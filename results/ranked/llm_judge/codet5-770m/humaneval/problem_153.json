{
  "timestamp": "2025-09-14T12:23:31.462230",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 153,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# your code here\n    extension_name_list = []\n    for extension in extensions:\n        extension_name_list.append(extension.upper())\n        extension_name_list.append(extension.lower())\n    extension_name_list.sort()\n    extension_name_list_count = {}\n    for i in range(len(extension_name_list)):\n        if extension_name_list[i] in extension_name_list_count:\n            extension_name_list_count[extension_name_list[i]] += 1\n        else:\n            extension_name_list_count[extension_name_list[i]] = 1\n    best_extension = ''\n    best_count = 0\n    for i in extension_name_list_count:\n        if extension_name_list_count[i] > best_count:\n            best_count = extension_name_list_count[i]\n            best_extension = extension_name_list[i]\n    return class_name + '.' + best_extension"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "strength = 0\n    strength_index = 0\n    for extension in extensions:\n        strength += len(extension) - len(extension.lower())\n        strength_index += 1\n    if strength_index == 1:\n        return class_name + '.' + extensions[0]\n    else:\n        return class_name + '.' + extensions[strength_index-1]"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "strength = []\n    for extension in extensions:\n        upper_strength = len(extension.upper())\n        lower_strength = len(extension.lower())\n        strength.append(upper_strength - lower_strength)\n    strength.sort()\n    return class_name + '.' + extensions[strength.index(max(strength))]"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# write your code here\n    return '.'.join([class_name, max(extensions, key=lambda x: len(x))])\n\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    # write your code here\n    return '.'.join([class_name, max(extensions, key=lambda x: len(x))])\n\n\ndef Strongest_Extension_3(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "strongest_extension = ''\n    strongest_strength = -1\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            strength += ord(letter) - 65\n        strength = strength / len(extension)\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        if extension.isupper():\n            strength += 1\n        elif extension.islower():\n            strength -= 1\n    if strength == 0:\n        return class_name\n    elif strength == 1:\n        return strongest_extension\n    else:\n        return strongest_extension + '.' + class_name\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        if extension.isupper():\n            strength += 1\n        elif extension.islower():\n            strength -= 1\n    if strength == 0:\n        return class_name\n    elif strength == 1:\n        return strongest_extension\n    else:\n        return strongest_extension + '.' + class_name\n\ndef Strongest_Extension_3(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions."
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Fill this in.\n    pass\n\n\ndef main():\n    print(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]))\n    print(Strongest_Extension(\"Slices\", [\"AA\", \"Be\", \"CC\"]))\n    print(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\"]))\n    print(Strongest_Extension(\"Slices\", [\"AA\", \"Be\", \"CC\", \"SErviNGSliCes\"]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "pass\n\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    pass\n\n\ndef Strongest_Extension_3(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Your code here\n    extensions = sorted(extensions)\n    capital_count = 0\n    lowercase_count = 0\n    for extension in extensions:\n        if extension.isupper():\n            capital_count += 1\n        else:\n            lowercase_count += 1\n    strength = capital_count - lowercase_count\n    return class_name + \".\" + extensions[strength].lower()\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        strength += len(extension) - len(extension.lower())\n    if strength == 0:\n        return strongest_extension\n    else:\n        for extension in extensions:\n            strength -= len(extension)\n            if strength == 0:\n                return strongest_extension\n            else:\n                strongest_extension = f'{class_name}.{extension}'\n    return strongest_extension\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['a', 'b', 'c']))\nprint(Strongest_Extension('my_class', ['a', 'b', 'c', 'd']))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        strength += len(extension.upper()) - len(extension.lower())\n        if strength > strength:\n            strongest_extension = extension\n    return '{}.{}'.format(class_name, strongest_extension)\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "strongest_ext = ''\n    strength = 0\n    for ext in extensions:\n        if ext.isupper():\n            strength += 1\n        else:\n            strength -= 1\n        if strength == 0:\n            strongest_ext = ext\n    return class_name + '.' + strongest_ext\n\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['AE', 'BE', 'CC']))\nprint(Strongest_Extension('Slices', ['AA', 'BE', 'CC']))\nprint(Strongest_Extension('Slices', ['AE', 'BE', 'CC']))\nprint(Strongest_Extension('Slices', ['AE', 'BE', 'CC']))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "strongest_name = ''\n    strongest_strength = -1\n    for extension in extensions:\n        upper_count = len(extension.upper())\n        lower_count = len(extension.lower())\n        strength = upper_count - lower_count\n        if strength == strongest_strength:\n            strongest_name = class_name + '.' + extension\n            break\n        elif strength > strongest_strength:\n            strongest_strength = strength\n            strongest_name = class_name + '.' + extension\n    return strongest_name\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC', 'XYZ']))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "strongest_extension = ''\n    strongest_strength = -1\n    for extension in extensions:\n        upper_count = 0\n        lower_count = 0\n        for char in extension:\n            if char.isupper():\n                upper_count += 1\n            else:\n                lower_count += 1\n        strength = upper_count - lower_count\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "highest_strength = 0\n    highest_strength_name = ''\n    for extension in extensions:\n        extension_strength = len(extension.upper()) - len(extension.lower())\n        if extension_strength > highest_strength:\n            highest_strength = extension_strength\n            highest_strength_name = extension\n    return '{}.{}'.format(class_name, highest_strength_name)\n\nprint(Strongest_Extension('Slices', ['SeaFfed', 'SeaFfed']))\nprint(Strongest_Extension('Slices', ['SeaFfed', 'SeaFfed', 'SeaFfed']))\nprint(Strongest_Extension('Slices', ['SeaFfed', 'SeaFfed', 'SeaFfed']))"
    },
    {
      "rank": 16,
      "score": 9.986027844747118,
      "candidate": "strongest_extension = ''\n    strength_cap = 0\n    strength_sm = 0\n    for extension in extensions:\n        if extension.isupper():\n            strength_cap += 1\n        else:\n            strength_sm += 1\n    if strength_cap > strength_sm:\n        strongest_extension = extensions[0]\n    elif strength_cap == strength_sm:\n        strongest_extension = extensions[0]\n    else:\n        strongest_extension = '.'.join(extensions[:strength_cap]) + '.' + extensions[strength_cap]\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 17,
      "score": 9.954897169868586,
      "candidate": "strongest_extension = ''\n    strongest_strength = -1\n    strongest_class = ''\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            strength += ord(letter) - 64\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n            strongest_class = class_name\n    return '{}.{}'.format(strongest_class, strongest_extension)"
    },
    {
      "rank": 18,
      "score": 9.911947242810252,
      "candidate": "strongest_extension = None\n    strength = None\n    for extension in extensions:\n        if extension == class_name:\n            continue\n        if strongest_extension == None:\n            strongest_extension = extension\n            strength = extensions.index(extension)\n        elif strength == -1:\n            strongest_extension = extension\n            strength = extensions.index(extension)\n    return f'{class_name}.{strongest_extension}'\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['SS', 'SSS']))\nprint(Strongest_Extension('my_class', ['SS', 'SSS', 'SSS']))\nprint(Strongest_Extension('my_class', ['SS', 'SSS', 'SSS']))\nprint(Strongest_Extension('my_class', ['SS', 'SSS', 'SSS', 'SSS']))"
    },
    {
      "rank": 19,
      "score": 9.90868658678982,
      "candidate": "strongest_extension = ''\n    strongest_strength = -1\n\n    for extension in extensions:\n        strength = len(extension) - len(extension.lower())\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return class_name + '.' + strongest_extension\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['StuFfed', 'Cheese', 'SeaFfed']))"
    },
    {
      "rank": 20,
      "score": 9.879407173418027,
      "candidate": "extensions.sort()\n    for extension in extensions:\n        capital = len(extension)\n        lowercase = len(extension.lower())\n        strength = capital - lowercase\n        if strength == 0:\n            continue\n        else:\n            return class_name + '.' + extension\n    return 'No strongest extension found.'\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['a', 'b', 'c']))\nprint(Strongest_Extension('Slices', ['a', 'b', 'c', 'd']))\nprint(Strongest_Extension('Slices', ['a', 'b', 'c', 'd', 'e']))\nprint(Strongest_Extension('Slices', ['a', 'b', 'c', 'd', 'e', 'f']))\nprint(Strongest_Extension('Slices', ['a', 'b', 'c', 'd', 'e', 'f', 'g']))"
    },
    {
      "rank": 21,
      "score": 9.820350879325684,
      "candidate": "strength = 0\n    best_extension = ''\n    for extension in extensions:\n        cap = len(extension)\n        sm = len(extension.lower())\n        strength += cap - sm\n        if strength > 0:\n            best_extension = extension\n    return class_name + '.' + best_extension\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strength = 0\n    best_extension = ''\n    for extension in extensions:\n        cap = len(extension)\n        sm = len(extension.lower())\n        strength += cap - sm\n        if strength > 0:\n            best_extension = extension\n    return class_name + '.' + best_extension\n\ndef Strongest_Extension_3(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in"
    },
    {
      "rank": 22,
      "score": 9.81926709980314,
      "candidate": "strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        ext_cap = len(extension)\n        ext_sm = len(extension.lower())\n        strength = ext_cap - ext_sm\n        if strength > strength:\n            strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 23,
      "score": 9.813122047240338,
      "candidate": "# Write your code here\n    strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        caps = len(extension.upper())\n        lower = len(extension.lower())\n        strength += caps - lower\n        if strength > 0:\n            strongest_extension = extension\n            break\n    return class_name + '.' + strongest_extension\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 24,
      "score": 9.80431475300203,
      "candidate": "strengths = {}\n    for extension in extensions:\n        strength = 0\n        for char in extension:\n            if char.isupper():\n                strength += 1\n            elif char.islower():\n                strength += 1\n        strengths[extension] = strength\n    max_strength = -1\n    strongest_extension = ''\n    for key, value in strengths.items():\n        if value > max_strength:\n            max_strength = value\n            strongest_extension = key\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 25,
      "score": 9.765334421230536,
      "candidate": "# Write your code here\n    strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        capital = extension.upper()\n        lowercase = extension.lower()\n        strength += capital - lowercase\n        if strength == 0:\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 26,
      "score": 9.736000419880677,
      "candidate": "# Write your code here\n\n    # Your code here\n    if len(extensions) == 0:\n        return class_name\n    else:\n        class_name = class_name.upper()\n        class_name = class_name.replace(' ', '')\n        class_name = class_name.replace('-', '')\n        class_name = class_name.replace('.', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('-', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace(' ', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('-', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace(' ', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('.', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('-', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace(' ', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('.', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('-', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace(' ', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('.', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('-', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('.', '')\n        class_name = class_name.replace('_', '')\n        class_name = class_name.replace('-', '')\n        class_"
    },
    {
      "rank": 27,
      "score": 9.719260758726064,
      "candidate": "strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        if len(extension) > strength:\n            strength = len(extension)\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 28,
      "score": 9.67270516594317,
      "candidate": "strength = {}\n    for extension in extensions:\n        strength[extension] = extension.upper() == extension.lower()\n    strength = sorted(strength.items(), key=lambda x: x[1], reverse=True)\n    return strength[0][0]\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 29,
      "score": 9.604995863069576,
      "candidate": "strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        upper_letter_count = len(extension.upper())\n        lowercase_letter_count = len(extension.lower())\n        strength = upper_letter_count - lowercase_letter_count\n        if strength > 0:\n            strongest_extension = extension\n            break\n    return f'{class_name}.{strongest_extension}'\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['SSS', 'SSS', 'SSS']))"
    },
    {
      "rank": 30,
      "score": 9.5874927377072,
      "candidate": "extension_strength = {}\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            strength += ord(letter) - ord('A')\n        extension_strength[extension] = strength\n    sorted_strengths = sorted(extension_strength.items(), key=lambda x: x[1])\n    strongest_extension = sorted_strengths[0][0]\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\n\n# Time Complexity: O(N)\n# Space Complexity: O(N)\n\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    extension_strength = {}\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            strength += ord(letter) - ord('A')\n        extension_strength[extension] = strength\n    sorted_strengths ="
    },
    {
      "rank": 31,
      "score": 9.56852936013765,
      "candidate": "strength = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n        capital = extension.isupper()\n        lowercase = extension.islower()\n        strength += capital - lowercase\n        if strength > 0:\n            strongest_extension = extension\n            break\n    return class_name + \".\" + strongest_extension\n\n\nprint(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]))\nprint(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Sheep\", \"Steak\", \"Stupid\"]))\nprint(Strongest_Extension(\"Slices\", [\"Sheep\", \"Steak\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\"]))\nprint(Strongest_Extension(\"Slices\", [\"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\"]))\nprint(Strongest_Extension(\"Slices\", [\"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\"]))\nprint(Strongest_Extension(\"Slices\", [\"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\"]))\nprint(Strongest_Extension(\"Slices\", [\"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\"]))\nprint(Strongest_Extension(\"Slices\", [\"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\"]))\nprint(Strongest_Extension(\"Slices\", [\"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid\", \"Stupid"
    },
    {
      "rank": 32,
      "score": 9.551112504805301,
      "candidate": "pass\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    pass\n\ndef Strongest_Extension_3(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then"
    },
    {
      "rank": 33,
      "score": 9.533479416608538,
      "candidate": "strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        extension_strength = len(extension) - len(extension.lower())\n        if extension_strength > strength:\n            strength = extension_strength\n            strongest_extension = extension\n    return '{}.{}'.format(class_name, strongest_extension)\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 34,
      "score": 9.5238709765113,
      "candidate": "strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        strength += len(extension) - len(extension.lower())\n        if strength > 0:\n            strongest_extension = extension\n\n    return f'{class_name}.{strongest_extension}'\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AB', 'CD', 'EF']))"
    },
    {
      "rank": 35,
      "score": 9.482007440929612,
      "candidate": "pass\n\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    pass\n\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should"
    },
    {
      "rank": 36,
      "score": 9.449201556479236,
      "candidate": "strongest_extension_name = ''\n    strongest_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n            elif letter.islower():\n                extension_strength += 1\n        strongest_strength = strongest_strength if strongest_strength > extension_strength else extension_strength\n        if strongest_strength == extension_strength:\n            strongest_extension_name = extension\n    return class_name + '.' + strongest_extension_name\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['Slices', 'SErviNGSliCes', 'Cheese']))"
    },
    {
      "rank": 37,
      "score": 9.370583536698913,
      "candidate": "extensions.sort()\n    strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n        upper_letters = extension.upper()\n        lowercase_letters = extension.lower()\n        strength = len(upper_letters) - len(lowercase_letters)\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n# Test Cases\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['A', 'B', 'C']))\nprint(Strongest_Extension('Slices', ['A', 'B', 'C', 'D', 'E']))"
    },
    {
      "rank": 38,
      "score": 9.312414339408534,
      "candidate": "strength = 0\n    for extension in extensions:\n        strength += len(extension)\n    strength = strength / len(extensions)\n    return class_name + '.' + extensions[strength].upper() + '.' + extensions[strength].lower()\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 39,
      "score": 9.234050852198141,
      "candidate": "extension_dict = {}\n    strongest_name = \"\"\n    for extension in extensions:\n        extension_dict[extension] = extension_dict.get(extension, 0) + 1\n    \n    for extension in extension_dict:\n        strength = extension_dict[extension]\n        if strength == 1:\n            strongest_name = extension\n        elif strength == -1:\n            strongest_name = extension\n        else:\n            strongest_name = f\"{class_name}.{extension}\"\n    return strongest_name\n\nprint(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]))"
    },
    {
      "rank": 40,
      "score": 9.226766272351448,
      "candidate": "strengths = {}\n    for extension in extensions:\n        strength = len(extension) - len(extension.lower())\n        strengths[strength] = extension\n    \n    strongest = 0\n    strongest_extension = None\n    \n    for strength, extension in strengths.items():\n        if strength > strongest:\n            strongest = strength\n            strongest_extension = extension\n    \n    return f'{class_name}.{strongest_extension}'"
    },
    {
      "rank": 41,
      "score": 9.224848123305652,
      "candidate": "strength = -1\n    for ext in extensions:\n        cap, sm = ext.upper(), ext.lower()\n        strength = max(strength, cap - sm)\n    return class_name + '.' + extensions[strength]\n\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['A', 'B', 'C']))\nprint(Strongest_Extension('Slices', ['A', 'B']))"
    },
    {
      "rank": 42,
      "score": 9.205959372648458,
      "candidate": "# Write your code here\n    strengths = {}\n    for extension in extensions:\n        strengths[extension] = 0\n        for letter in extension:\n            strengths[extension] += (ord(letter) - ord('A') + 1)\n    for extension, strength in strengths.items():\n        if strength > 0:\n            return class_name + '.' + extension\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C']))\nprint(Strongest_Extension('my_class', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['Slices', 'Dog', 'Cat']))\nprint(Strongest_Extension('my_class', ['Cheese', 'StuFfed']))"
    },
    {
      "rank": 43,
      "score": 9.183391466815202,
      "candidate": "strengths = []\n    for extension in extensions:\n        upper_letters = len(extension.upper())\n        lower_letters = len(extension.lower())\n        strength = upper_letters - lower_letters\n        strengths.append(strength)\n    strengths.sort()\n    return class_name + '.' + extensions[strengths.index(max(strengths))]\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['Slices', 'SeaFed', 'SeaFed']))\nprint(Strongest_Extension('my_class', ['SeaFed', 'SeaFed', 'SeaFed']))"
    },
    {
      "rank": 44,
      "score": 9.177268828905222,
      "candidate": "strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        upper_count = len(extension.upper())\n        lower_count = len(extension.lower())\n        strength += upper_count - lower_count\n    if strength == 0:\n        return class_name\n    else:\n        return class_name + '.' + strongest_extension\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C']))\nprint(Strongest_Extension('my_class', ['A', 'B']))\nprint(Strongest_Extension('my_class', ['A']))\nprint(Strongest_Extension('my_class', ['A']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'B', 'C']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'B', 'C', 'C']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'B', 'C', 'C', 'C', 'C']))"
    },
    {
      "rank": 45,
      "score": 9.122564458729856,
      "candidate": "strength = 0\n    for extension in extensions:\n        upper_count = 0\n        lower_count = 0\n        for char in extension:\n            if char.isupper():\n                upper_count += 1\n            else:\n                lower_count += 1\n        strength += upper_count - lower_count\n    return class_name + '.' + extensions[strength].lower()\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['STUFED', 'Cheese']))\nprint(Strongest_Extension('Slices', ['Cheese', 'STUFED']))\nprint(Strongest_Extension('Slices', ['Cheese', 'STUFED', 'STUFED', 'STUFED']))\nprint(Strongest_Extension('Slices', ['Cheese', 'STUFED', 'STUFED', 'STUFED', 'STUFED']))\nprint(Strongest_Extension('Slices', ['STUFED', 'STUFED', 'STUFED', 'STUFED', 'STUFED']))\nprint(Strongest_Extension('Slices', ['STUFED', 'STUFED', 'STUFED', 'STUFED', 'STUFED']))"
    },
    {
      "rank": 46,
      "score": 8.978299409405,
      "candidate": "strength_map = {}\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength += 1\n        strength_map[extension] = strength\n    strongest_extension = ''\n    for extension in extensions:\n        strength = strength_map[extension]\n        if strength == -1:\n            strongest_extension = extension\n            break\n    return class_name + '.' + strongest_extension\n\n\n# Test Cases\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['Slices']))\nprint(Strongest_Extension('my_class', ['Vehicle', 'Car', 'Car_With_Vehicle']))"
    },
    {
      "rank": 47,
      "score": 8.973005557553902,
      "candidate": "upper_cap = 0\n    lowercase_cap = 0\n    strongest_extension = ''\n    \n    for extension in extensions:\n        if extension[0].isupper():\n            upper_cap += 1\n        else:\n            lowercase_cap += 1\n            \n    strength = upper_cap - lowercase_cap\n    \n    if strength == 0:\n        return strongest_extension\n    elif strength > 0:\n        for extension in extensions:\n            if extension[0].isupper():\n                if strength == upper_cap - lowercase_cap:\n                    strongest_extension = class_name + '.' + extension\n                    return strongest_extension\n    else:\n        for extension in extensions:\n            if extension[0].islower():\n                if strength == uppercase_cap - lowercase_cap:\n                    strongest_extension = class_name + '.' + extension\n                    return strongest_extension\n    \n    return strongest_extension"
    },
    {
      "rank": 48,
      "score": 8.932217008005624,
      "candidate": "ext_list = []\n    ext_list.append(class_name)\n    for ext in extensions:\n        ext_list.append(ext)\n    ext_list.sort(key=lambda x: (-len(x), x))\n    strongest_extension = ext_list[0]\n    for ext in ext_list:\n        if ext_list.count(strongest_extension) > 1:\n            strongest_extension = ext\n    return strongest_extension"
    },
    {
      "rank": 49,
      "score": 8.910084504002544,
      "candidate": "strongest_extension = \"\"\n    \n    for extension in extensions:\n        upper_count = len(extension)\n        lower_count = len(extension.lower())\n        strength = upper_count - lower_count\n        \n        if strength > 0:\n            strongest_extension = extension\n            break\n    \n    return class_name + \".\" + strongest_extension\n\n\n# Tests\nprint(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]))\nprint(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"StuFfed\", \"FedFed\"]))\nprint(Strongest_Extension(\"Slices\", [\"FedFed\", \"StuFfed\"]))"
    },
    {
      "rank": 50,
      "score": 8.902145503295483,
      "candidate": "strengths = []\n    for ext in extensions:\n        ext_strength = 0\n        for char in ext:\n            ext_strength += ord(char) - ord('A')\n        strengths.append(ext_strength)\n    strengths.sort()\n    index = strengths.index(max(strengths))\n    return class_name + '.' + extensions[index]\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 51,
      "score": 8.850707355641543,
      "candidate": "strength = [0,0]\n    for extension in extensions:\n        extension_strength = len(extension)\n        strength[0] += extension_strength.isupper()\n        strength[1] += extension_strength.islower()\n    strength.sort(reverse=True)\n    return class_name + '.' + extensions[strength[0]]\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 52,
      "score": 8.81367773444215,
      "candidate": "strongest_extension = None\n    highest_strength = 0\n    for extension in extensions:\n        strength = len(extension) - len(extension.lower())\n        if strength > highest_strength:\n            strongest_extension = extension\n            highest_strength = strength\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['A', 'B', 'C']))\nprint(Strongest_Extension('Slices', ['A', 'B', 'C', 'D']))"
    },
    {
      "rank": 53,
      "score": 8.76828871349479,
      "candidate": "strongest_extension = ''\n    strongest_strength = 0\n    for ext in extensions:\n        ext_strength = len(ext.upper()) - len(ext.lower())\n        if ext_strength > strongest_strength:\n            strongest_extension = ext\n            strongest_strength = ext_strength\n    return f'{class_name}.{strongest_extension}'\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 54,
      "score": 8.715724466237427,
      "candidate": "strongest_name = ''\n    strength = 0\n    for extension in extensions:\n        extension_name = extension.split('.')\n        extension_name_upper = ''.join([letter.upper() for letter in extension_name[0]])\n        extension_name_lower = ''.join([letter.lower() for letter in extension_name[0]])\n        strength += abs(len(extension_name_upper) - len(extension_name_lower))\n        if strength > 0:\n            strongest_name = extension_name\n    return class_name + '.' + strongest_name\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['SeaFed', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['SeaFed', 'Cheese', 'StuFfed', 'SeaFed']))"
    },
    {
      "rank": 55,
      "score": 8.692801520950061,
      "candidate": "strongest_extension = ''\n    strongest_strength = -1\n    for extension in extensions:\n        extension_strength = len(extension)\n        if extension_strength > strongest_strength:\n            strongest_strength = extension_strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 56,
      "score": 8.632293453617281,
      "candidate": "strengths = {}\n    \n    for extension in extensions:\n        strengths[extension] = 1\n        for letter in extension.upper():\n            strengths[letter] += 1\n        \n    sorted_strengths = sorted(strengths.items(), key=lambda x: x[1])\n    \n    return class_name + '.' + sorted_strengths[0][0]\n\n\n\n# Tests\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\nassert Strongest_Extension('my_class', ['Cheese', 'StuFfed']) =='my_class.Cheese'\nassert Strongest_Extension('my_class', ['SErviNGSliCes', 'Cheese']) =='my_class.SErviNGSliCes'\nassert Strongest_Extension('my_class', ['Slices', 'Cheese', 'StuFfed']) =='my_class.Slices.Cheese'\nassert Strongest_Extension('my_class', ['Slices', 'Cheese', 'StuFfed']) =='my_class.Slices.Cheese'"
    },
    {
      "rank": 57,
      "score": 8.625262456968262,
      "candidate": "strength = []\n    for ext in extensions:\n        cap = len(ext)\n        sm = len(ext.lower())\n        strength.append(cap - sm)\n    strength = sorted(strength)\n    strongest_extension = extensions[strength.index(max(strength))]\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 58,
      "score": 8.623000730200317,
      "candidate": "strength = 0\n    strength_dict = {}\n    for extension in extensions:\n        extension_strength = len(extension)\n        strength_dict[extension] = extension_strength\n    for extension in extensions:\n        if strength_dict[extension] > strength:\n            strength = strength_dict[extension]\n    strongest_extension = extensions[strength]\n    return class_name + '.' + strongest_extension\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 59,
      "score": 8.616253589228675,
      "candidate": "from collections import Counter\n    class_name_dict = Counter(class_name)\n    ext_dict = Counter(extensions)\n    strongest_ext = None\n    for ext, c in ext_dict.items():\n        if c == class_name_dict[ext]:\n            strength = class_name_dict[ext] - ext_dict[ext]\n            if strongest_ext is None or strength > strongest_ext:\n                strongest_ext = ext\n    return class_name + '.' + strongest_ext\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 60,
      "score": 8.610076160146226,
      "candidate": "ext_dict = {}\n    for extension in extensions:\n        ext_dict[extension] = ext_dict.get(extension, 0) + 1\n    \n    ext_list = sorted(ext_dict.items(), key=lambda x: x[1])\n    \n    return f'{class_name}.{ext_list[0][0]}'\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese']))\nprint(Strongest_Extension('Slices', ['StuFfed', 'Cheese']))\nprint(Strongest_Extension('Slices', ['StuFfed', 'Cheese', 'Cheese']))\nprint(Strongest_Extension('Slices', ['StuFfed', 'Cheese', 'Cheese']))\nprint(Strongest_Extension('Slices', ['StuFfed', 'Cheese', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 61,
      "score": 8.60156811074208,
      "candidate": "strength_of_extensions = []\n    for extension in extensions:\n        strength_of_extensions.append(len(extension.upper()))\n        strength_of_extensions.append(len(extension.lower()))\n    strongest_extension = extensions[strength_of_extensions.index(max(strength_of_extensions))]\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 62,
      "score": 8.542875062379007,
      "candidate": "strength = {}\n    for ext in extensions:\n        strength[ext] = strength.get(ext, 0) + 1\n    highest_strength_ext = max(strength, key=strength.get)\n    return class_name + '.' + highest_strength_ext\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 63,
      "score": 8.53012858503943,
      "candidate": "strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n        strength = len(extension) - len(extension.lower())\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 64,
      "score": 8.499905739299377,
      "candidate": "return class_name + '.' + max(map(lambda x: len(x) - x.count('a'), extensions), key = lambda x: x)\n\n# Tests\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['Egg', 'Foo', 'Bar']))\nprint(Strongest_Extension('my_class', ['Slices', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C', 'D']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C', 'D', 'E', 'F']))"
    },
    {
      "rank": 65,
      "score": 8.437695832075478,
      "candidate": "# Your code here\n    strength_of_extensions = {}\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength += 1\n        strength_of_extensions[extension] = strength\n    \n    strongest_extension = ''\n    for extension in extensions:\n        strength = strength_of_extensions[extension]\n        if strength == -1:\n            strongest_extension = extension\n            break\n    \n    return class_name + '.' + strongest_extension\n    \n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC', 'D']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC', 'D', 'E']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC', 'D', 'E', 'F']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC', 'D', 'E', 'F', 'G']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC', 'D', 'E', 'F', 'G', 'H']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC', 'D', 'E', 'F', 'G', 'H', 'I']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC', 'D', 'E', 'F', 'G', 'H', 'I', 'J']))\nprint(Strongest_Extension('Slices', ['AA', 'Be', 'CC', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']))\nprint(Strongest_Extension"
    },
    {
      "rank": 66,
      "score": 8.408439383654278,
      "candidate": "extension_strength = {}\n    for extension in extensions:\n        extension_strength[extension] = extension.count('a') - extension.count('e')\n    highest_strength = max(extension_strength.values())\n    highest_strength_index = extension_strength.values().index(highest_strength)\n    highest_strength_extension = extensions[highest_strength_index]\n    return f'{class_name}.{highest_strength_extension}'\n\n\nif __name__ == '__main__':\n    print(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\n    print(Strongest_Extension('Slices', ['A', 'B', 'C']))\n    print(Strongest_Extension('Slices', ['A', 'B']))\n    print(Strongest_Extension('Slices', ['A', 'B', 'C']))"
    },
    {
      "rank": 67,
      "score": 8.375312293858853,
      "candidate": "if len(extensions) <= 1:\n        return class_name\n    else:\n        extensions.sort()\n        extension_strengths = [len(extension.upper()) - len(extension.lower()) for extension in extensions]\n        return class_name + '.' + extensions[extension_strengths.index(min(extension_strengths))]\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 68,
      "score": 8.351614956112536,
      "candidate": "strongest_ext = ''\n    strength = 0\n    for ext in extensions:\n        upper_cap = len(ext.upper())\n        lower_cap = len(ext.lower())\n        strength += upper_cap - lower_cap\n    strongest_ext = class_name + '.' + extensions[strength].upper()\n    return strongest_ext\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 69,
      "score": 8.334608500525688,
      "candidate": "class_name_dict = {}\n    for extension in extensions:\n        class_name_dict[extension] = class_name_dict.get(extension, 0) + 1\n    \n    sorted_extensions = sorted(class_name_dict.items(), key=lambda item: item[1])\n    return sorted_extensions[0][0]\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 70,
      "score": 8.327367757082776,
      "candidate": "strongest_extension = ''\n    strongest_extension_strength = -1\n    extensions.sort()\n    for extension in extensions:\n        uppercase_letter = extension[0].upper()\n        lowercase_letter = extension[0].lower()\n        strength = uppercase_letter - lowercase_letter\n        if strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = strength\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 71,
      "score": 8.298597569547805,
      "candidate": "def check_strength(extension):\n        \"\"\"This function returns the strength of the extension.\n        It takes an extension name and returns the number of uppercase letters\n        in the extension.\n        \"\"\"\n        upper_letters = 0\n        lower_letters = 0\n        for letter in extension:\n            if letter.isupper():\n                upper_letters += 1\n            else:\n                lower_letters += 1\n        return upper_letters - lower_letters\n\n    def strongest_extension(extensions):\n        \"\"\"This function returns the strongest extension. It takes a list of\n        extensions and returns the one that comes first in the list.\n        \"\"\"\n        strongest_extension_name = ''\n        strongest_strength = -1\n        for extension in extensions:\n            strength = check_strength(extension)\n            if strength > strongest_strength:\n                strongest_strength = strength\n                strongest_extension_name = extension\n        return strongest_extension_name\n\n    return strongest_extension(extensions)\n\n\nif __name__ == '__main__':\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 72,
      "score": 8.294940769211511,
      "candidate": "class_name = class_name.lower()\n    extensions = sorted(extensions, key=lambda x: len(x))\n    strength = 0\n    for extension in extensions:\n        strength += len(extension) - len(extension.lower())\n    return f'{class_name}.{extensions[strength // 2] if strength // 2!= 0 else \"\"}'\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 73,
      "score": 8.2938925966498,
      "candidate": "import re\n    strongest_ext = ''\n    extension_strength = -1\n    for extension in extensions:\n        extension_strength = len(extension.upper()) - len(extension.lower())\n        if extension_strength > 0:\n            strongest_ext = extension\n            break\n    return '{}{}.{}'.format(class_name, strongest_ext, strongest_ext)\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 74,
      "score": 8.251903304236286,
      "candidate": "strength_dict = {}\n    for extension in extensions:\n        strength = len(extension)\n        strength_dict[strength] = extension\n    strength_dict = sorted(strength_dict.items(), key=lambda x: x[0])\n    for strength, extension in strength_dict:\n        if strength == -1:\n            continue\n        if extension not in class_name.split(\".\"):\n            class_name = class_name + \".\" + extension\n    return class_name\n\ndef Strongest_Extension_Recursive(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_Recursive('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strength_dict = {}\n    for extension in extensions:\n        strength = len(extension)\n        strength_dict[strength] = extension\n    strength_dict = sorted(strength_dict.items(), key=lambda x: x[0])\n    for strength, extension in strength_dict:\n        if strength == -1:\n            continue\n        if extension not in class_name.split(\".\"):\n            class_name = class_name + \".\" + extension"
    },
    {
      "rank": 75,
      "score": 8.211579567659316,
      "candidate": "class_name = class_name.upper()\n    extensions = sorted(extensions, key=lambda x: len(x.lower()))\n    \n    strongest_extension = \"\"\n    strength = -1\n    \n    for extension in extensions:\n        if len(class_name) - len(extension) > strength:\n            strength = len(class_name) - len(extension)\n            strongest_extension = extension\n            \n    return f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension(\"Slices\", [\"Sea\", \"Cheese\", \"StuFfed\"]))\nprint(Strongest_Extension(\"Slices\", [\"Sea\", \"Cheese\", \"StuFfed\", \"Sea\", \"StuFfed\"]))"
    },
    {
      "rank": 76,
      "score": 8.209707251476969,
      "candidate": "strength = 0\n    strongest_name = \"\"\n    for extension in extensions:\n        if extension.isupper():\n            strength += 1\n        elif extension.islower():\n            strength -= 1\n        if strength == 0:\n            strongest_name = extension\n    return class_name + \".\" + strongest_name\n\n\nprint(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]))"
    },
    {
      "rank": 77,
      "score": 8.185309335307622,
      "candidate": "extension_names = []\n    for extension in extensions:\n        extension_names.append(extension)\n    extension_names.sort()\n    upper_case_strength = []\n    lower_case_strength = []\n    for extension in extension_names:\n        upper_case_strength.append(extension.upper())\n        lower_case_strength.append(extension.lower())\n    upper_case_strength.sort()\n    lower_case_strength.sort()\n    strength = 0\n    if len(upper_case_strength) == 0:\n        strength = 0\n    else:\n        strength = len(upper_case_strength) - len(lower_case_strength)\n    if strength == -1:\n        strength = 0\n    else:\n        strength = strength // 2\n    if len(upper_case_strength) > 1:\n        strength = strength - 1\n    if len(lower_case_strength) > 1:\n        strength = strength - 1\n    if strength == -1:\n        return class_name\n    else:\n        return \".\".join([class_name, extension_names[strength]])\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['SS', 'SSS']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'A']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'A', 'A']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'A', 'A']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'A', 'A']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'A', 'A']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'A', 'A']))\nprint(Strongest_Extension('my_class', ['A', 'A', 'A', 'A']))"
    },
    {
      "rank": 78,
      "score": 8.179564342560925,
      "candidate": "strongest_extension = ''\n    strongest_strength = -1\n\n    for extension in extensions:\n        upper_letter_count = len(extension)\n        lower_letter_count = len(extension.lower())\n        strength = upper_letter_count - lower_letter_count\n\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 79,
      "score": 8.172253082181854,
      "candidate": "strength_dict = {}\n    for extension in extensions:\n        strength = len(extension) - len(extension.lower())\n        if strength_dict.get(strength) is None:\n            strength_dict[strength] = extension\n        else:\n            strength_dict[strength] = strength_dict.get(strength) + extension\n    \n    strongest_extension = max(strength_dict, key=strength_dict.get)\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 80,
      "score": 8.163300679823958,
      "candidate": "strongest_extension = None\n    strength = 0\n    for extension in extensions:\n        strength += len(extension.upper()) - len(extension.lower())\n    if strength > 0:\n        strongest_extension = extensions[strength.index(max(strength))]\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 81,
      "score": 8.144125099485041,
      "candidate": "class_name = class_name.lower()\n    strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        extension = extension.lower()\n        strength += len(extension) - len(extension.replace(' ', ''))\n        if strength > strength:\n            strength = strength\n            strongest_extension = extension\n    return '.'.join([class_name, strongest_extension])"
    },
    {
      "rank": 82,
      "score": 8.121884567141883,
      "candidate": "strength = [0,0]\n    for ext in extensions:\n        strength[0] += len(ext.upper())\n        strength[1] += len(ext.lower())\n    best_name = ''\n    best_strength = -1\n    for i in range(2):\n        if strength[i] > best_strength:\n            best_name = class_name\n            best_strength = strength[i]\n    return f'{class_name}.{best_name}'\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 83,
      "score": 8.040197642997851,
      "candidate": "strength_list = []\n    for extension in extensions:\n        strength = len(extension) - len(extension.lower())\n        strength_list.append(strength)\n    strength_list.sort()\n    if len(strength_list) > 1:\n        strength = strength_list[1]\n        return class_name + '.' + extensions[strength]\n    else:\n        return class_name\n\n\nif __name__ == '__main__':\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n    print(Strongest_Extension('my_class', ['Cheese', 'StuFfed']))\n    print(Strongest_Extension('my_class', ['Slices']))"
    },
    {
      "rank": 84,
      "score": 7.990432406683839,
      "candidate": "strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n        extension_strength = len(extension)\n        if extension_strength > strongest_strength:\n            strongest_strength = extension_strength\n            strongest_extension = extension\n\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 85,
      "score": 7.7320703513377165,
      "candidate": "strength = []\n    for i in extensions:\n        cap = len(i.upper())\n        sm = len(i.lower())\n        strength.append(cap - sm)\n\n    max_strength = max(strength)\n    best_extension = ''\n    for i in range(len(strength)):\n        if strength[i] == max_strength:\n            best_extension = extensions[i]\n\n    return class_name + '.' + best_extension\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 86,
      "score": 7.705183449260731,
      "candidate": "strongest_extension = ''\n    for extension in extensions:\n        upper_count = len(extension.upper())\n        lower_count = len(extension.lower())\n        strength = (upper_count - lower_count)\n        if strength == 0:\n            continue\n        elif strength == 1:\n            strongest_extension = extension\n        elif strength > 1:\n            continue\n        else:\n            break\n    return class_name + '.' + strongest_extension\n\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 87,
      "score": 7.5819855281879285,
      "candidate": "strongest_extension = ''\n    strength = -1\n    for extension in extensions:\n        capital_count = 0\n        lowercase_count = 0\n        for char in extension:\n            if char.isupper():\n                capital_count += 1\n            elif char.islower():\n                lowercase_count += 1\n        strength = capital_count - lowercase_count\n        if strength > 0:\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['Slices', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['A', 'B']))\nprint(Strongest_Extension('my_class', ['C', 'D']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C', 'D']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C', 'D', 'E']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C', 'D', 'E', 'F']))\nprint(Strongest_Extension('my_class', ['A', 'B', 'C', 'D', 'E', 'F', 'G']))"
    },
    {
      "rank": 88,
      "score": 7.4878043221155455,
      "candidate": "strength = {}\n    for extension in extensions:\n        strength[extension] = strength.get(extension, 0) + 1\n    max_strength = max(strength.values())\n    max_strength_index = strength.keys().index(max_strength)\n    return class_name + '.' + extensions[max_strength_index]\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 89,
      "score": 7.464609382504557,
      "candidate": "strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        capitalized = extension.upper()\n        lowercased = extension.lower()\n        strength += len(capitalized) - len(lowercased)\n    if strength == 0:\n        return strongest_extension\n    for extension in extensions:\n        if strength == 0:\n            return strongest_extension\n        elif strength == 1:\n            return class_name + '.' + extension\n    return strongest_extension\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['Slices', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['Banana', 'Banana', 'Banana']))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "strength = {}\n    for ext in extensions:\n        strength[ext.upper()] = strength.get(ext.upper(), 0) + 1\n        strength[ext.lower()] = strength.get(ext.lower(), 0) + 1\n\n    best_strength = None\n    for ext in extensions:\n        if strength[ext] == max(strength.values()):\n            best_strength = ext\n\n    return class_name + \".\" + best_strength\n\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n    strength = {}\n    for ext in extensions:\n        strength[ext.upper()] = strength.get(ext.upper(), 0) + 1\n        strength[ext.lower()] = strength.get(ext.lower(), 0) + 1\n\n    best_strength = None\n    for ext in extensions:\n        if strength[ext] == max(strength.values()):\n            best_strength = ext\n\n    return class_name + \".\""
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "upper = []\n    lower = []\n    for i in range(len(class_name)):\n        upper.append(class_name[i].isupper())\n        lower.append(class_name[i].islower())\n        \n    # check if two or more extensions have the same strength\n    if (sum(upper) == sum(lower)):\n        for i in range(len(extensions)):\n            if (upper[i] == lower[i]):\n                return extensions[i]\n        return -1\n    \n    # otherwise we have to find the strongest extension\n    for i in range(len(extensions)):\n        if (upper[i] - lower[i] == 1):\n            return extensions[i]\n        \n    return -1\n\n\ndef Strongest_Extension2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    \n    upper = []\n    lower = []\n    for i in range(len(class_name)):\n        upper.append(class_name[i].isupper())"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "upper_letters = [i.upper() for i in class_name]\n    lower_letters = [i.lower() for i in class_name]\n    strength = [upper_letters.count(i) - lower_letters.count(i) for i in extensions]\n    if len(set(strength)) == 1:\n        return extensions[strength.index(max(strength))]\n    else:\n        return ''\n\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    upper_letters = [i.upper() for i in class_name]\n    lower_letters = [i.lower() for i in class_name]\n    strength = [upper_letters.count(i) - lower_letters.count(i) for i in extensions]\n    if len(set(strength)) == 1:\n        return extensions[strength.index(max(strength))]\n    else:\n        return ''"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "strongest_extension = ''\n    strength = -1\n    for extension in extensions:\n        if extension.isupper():\n            strength += 1\n        elif extension.islower():\n            strength -= 1\n        if strength == 0:\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = ''\n    strength = -1\n    for extension in extensions:\n        if extension.isupper():\n            strength += 1\n        elif extension.islower():\n            strength -= 1\n        if strength == 0:\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\ndef Strongest_Extension_3(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "strongest_extension = \"\"\n    strength = 0\n    for extension in extensions:\n        strength += (len(extension) - len(extension.lower()))\n    if strength == 0:\n        return strongest_extension\n    else:\n        for extension in extensions:\n            strength += (len(extension) - len(extension.upper()))\n        if strength == 0:\n            return strongest_extension\n        else:\n            return strongest_extension + \".\" + extensions[strength//2]\n\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = \"\"\n    strength = 0\n    for extension in extensions:\n        strength += (len(extension) - len(extension.lower()))\n    if strength == 0:\n        return strongest_extension\n    else:\n        for extension in extensions:\n            strength += (len(extension) - len(extension.upper()))\n        if strength == 0:\n            return strongest_extension\n        else:\n            return strongest_"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "strongest_extension = ''\n    strength = 0\n\n    for extension in extensions:\n        capital = len(extension)\n        lower = len(extension.lower())\n        strength += capital - lower\n\n    if strength == 0:\n        return 'No strongest extension'\n    elif strength == 1:\n        return class_name + '.' + extensions[0]\n    elif strength == 2:\n        return class_name + '.' + extensions[1]\n    elif strength == -1:\n        return 'No strongest extension'\n\n\n# Tests\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa']) == 'Slices.Sea'\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa']) == 'Slices.San'\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa', 'Sea']) == 'Slices.Sea'\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa', 'Sea', 'San']) == 'Slices.Sea'\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa', 'Sea', 'San']) == 'Slices.Sea'\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa', 'Sea']) == 'Slices.Sea'\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa', 'Sea', 'San']) == 'Slices.Sea'\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa', 'Sea', 'San']) == 'Slices.Sea'\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa', 'Sea', 'San', 'Sea']) == 'Slices.Sea'\nassert Strongest_Extension('Slices', ['Sea', 'San', 'Lisa', 'Sea', 'San', 'Sea', 'San', 'Lisa', 'Sea', 'San']) == 'Slices.Sea'\nassert Strong"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "strength = 0\n    strongest_extension_name = \"\"\n    for extension in extensions:\n        extension_name = extension.upper()\n        extension_strength = extension_name.count('A') - extension_name.count('E')\n        if extension_strength == strength:\n            strongest_extension_name = extension\n        strength = extension_strength\n    return class_name + \".\" + strongest_extension_name\n\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strength = 0\n    strongest_extension_name = \"\"\n    for extension in extensions:\n        extension_name = extension.lower()\n        extension_strength = extension_name.count('A') - extension_name.count('E')\n        if extension_strength == strength:\n            strongest_extension_name = extension\n        strength = extension_strength\n    return class_name + \".\" + strongest_extension_name\n\n\ndef Strongest_Extension_3(class_name, extensions):"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "strongest_extension = ''\n    strength = -1\n    for extension in extensions:\n        upper_count = 0\n        lower_count = 0\n        for character in extension:\n            if character.isupper():\n                upper_count += 1\n            elif character.islower():\n                lower_count += 1\n        strength = upper_count - lower_count\n        if strength > 0:\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\n\ndef Strongest_Extension2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = ''\n    strength = -1\n    for extension in extensions:\n        upper_count = 0\n        lower_count = 0\n        for character in extension:\n            if character.isupper():\n                upper_count += 1\n            elif character.islower():\n                lower_count += 1\n        strength = upper_count - lower_count\n        if strength > 0:\n            strongest_extension = extension\n    return f'{class_name}.{"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "strongest_name = ''\n    strongest_strength = -1\n    for extension in extensions:\n        capital_count = len(extension.upper())\n        lowercase_count = len(extension.lower())\n        strength = capital_count - lowercase_count\n        if strength > strongest_strength:\n            strongest_name = extension\n            strongest_strength = strength\n    return f'{class_name}.{strongest_name}'\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_name = ''\n    strongest_strength = -1\n    for extension in extensions:\n        capital_count = len(extension.upper())\n        lowercase_count = len(extension.lower())\n        strength = capital_count - lowercase_count\n        if strength > strongest_strength:\n            strongest_name = extension\n            strongest_strength = strength\n    return f'{class_name}.{strongest_name}'\n\ndef Strongest_Extension_3(class_name"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "strongest_extension = ''\n    strength = -1\n    for ext in extensions:\n        cap = len(ext)\n        sm = len(ext.lower())\n        strength = cap - sm\n        if strength > 0:\n            strongest_extension = ext\n    return class_name + '.' + strongest_extension\n\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    strongest_extension = ''\n    strength = -1\n    for ext in extensions:\n        cap = len(ext)\n        sm = len(ext.lower())\n        strength = cap - sm\n        if strength > 0:\n            strongest_extension = ext\n    return class_name + '.' + strongest_extension\n\n\ndef Strongest_Extension_3(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "class_list = class_name.split('.')\n    extension_list = [x.split('.') for x in extensions]\n    extension_list.sort(key=lambda x: -1 if len(x) > 1 else 0)\n    strongest_extension = extension_list[0]\n    for extension in extension_list:\n        if len(extension) == 1:\n            continue\n        if len(extension) > 1:\n            if extension[0].upper() > strongest_extension[0].upper():\n                strongest_extension = extension\n    return '.'.join(class_list[:-1] + [strongest_extension[0]])\n\n\ndef Strongest_Extension2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension2('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    class_list = class_name.split('.')\n    extension_list = [x.split('.') for x in extensions]\n    extension_list.sort(key=lambda x: -1 if len(x) > 1 else 0)\n    strongest_extension = extension_"
    }
  ]
}