{
  "timestamp": "2025-09-14T12:01:42.301945",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 104,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "x.sort()\n    even_digits = [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n    return even_digits\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(x, key=lambda x: x if x % 2 == 0 else seen_add(x))\n\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return sorted(x, key=lambda x: x if x % 2 == 0 else seen_add(x))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Your code here\n    return [x for x in x if x % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "unique_digit_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_digit_list.append(i)\n    unique_digit_list.sort()\n    return unique_digit_list\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Your code here\n    unique_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_list.append(i)\n    return unique_list\n\n\ndef unique_digits_recursive(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_recursive([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_recursive([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    if x == []:\n        return []\n    elif x[0] % 2 == 0:\n        return [x[0]] + unique_digits_recursive(x[1:])\n    else:\n        return unique_digits_recursive(x[1:])\n\n\ndef unique_digits_iterative(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_iterative([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_iterative([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    unique_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_list.append(i)\n    return sorted(unique_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return [x for x in x if x % 2 == 0]\n\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if x % 2!= 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if len(x) == 0:\n        return []\n    else:\n        return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n\ndef unique_digits_recursive(x, seen=None, seen_add=None):\n    \"\"\"Recursive implementation of unique digits.\n\n    The recursive implementation works by checking for a digit in x\n    and checking if it's already in seen or not.\n\n    For example:\n    >>> unique_digits_recursive([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_recursive([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if seen is None:\n        seen = set()\n    if x in seen:\n        return []\n    seen.add(x)\n    if len(x) == 1:\n        return [x]\n    else:\n        return [x[0]] + unique_digits_recursive(x[1:], seen, seen_add)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "unique_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_list.append(i)\n    return unique_list\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "unique_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_list.append(i)\n    return unique_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "unique = []\n    for item in x:\n        if item % 2 == 0:\n            unique.append(item)\n    return sorted(unique)\n\ndef unique_digits_recursive(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_recursive([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_recursive([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    else:\n        return sorted(set(x) - set(x[0])) + unique_digits_recursive(x[1:])"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "x.sort()\n    s = set()\n    for i in x:\n        if i % 2!= 0:\n            s.add(i)\n    return sorted(list(s))\n\n\ndef unique_digits_1(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x.sort()\n    s = set()\n    for i in x:\n        if i % 2!= 0:\n            s.add(i)\n    return sorted(list(s))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "unique_digits_set = set()\n    for number in x:\n        if number % 2 == 0:\n            unique_digits_set.add(number)\n    return sorted(unique_digits_set)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "unique_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_list.append(i)\n    return unique_list\n\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_list = []\n    for i in x:\n        if i % 2!= 0:\n            unique_list.append(i)\n    return sorted(set(unique_list))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "unique = []\n    for i in x:\n        if i % 2 == 0:\n            unique.append(i)\n\n    return sorted(unique)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "unique = []\n    for x_i in x:\n        if x_i % 2 == 0:\n            unique.append(x_i)\n    return sorted(unique)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if len(x) == 0:\n        return []\n    x.sort()\n    unique_digits_list = []\n    for num in x:\n        if num % 2!= 0:\n            unique_digits_list.append(num)\n    return unique_digits_list\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "x = sorted(set(x))\n    return x\n\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(set(x))\n    return [x for x in x if x % 2!= 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n\n    result.sort()\n    return result\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if len(x) == 0:\n        return []\n\n    # We know that even digit is not included.\n    even_digits = [i for i in x if i % 2 == 0]\n\n    # We want to sort even digits.\n    even_digits.sort()\n\n    # We add the even digit to the result.\n    return [i + 2 for i in even_digits]\n\n\ndef unique_digits_v2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_v2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_v2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n\n    # We know that even digit is not included.\n    even_digits = [i for i in x if i % 2 == 0]\n\n    # We want to sort even digits.\n    even_digits.sort()\n\n    # We add the even digit to the result.\n    return [i + 2 for i in even_digits]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "x.sort()\n    return [i for i in x if i%2!=0]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return [num for num in x if num % 2!= 0]\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [num for num in x if num % 2!= 0]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "unique_digits_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_digits_list.append(i)\n    return sorted(unique_digits_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "unique_digits_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_digits_list.append(i)\n    return sorted(unique_digits_list)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# Solution 1\n    return sorted(set(x) - set([int(str(i)) for i in x]))\n\n    # Solution 2\n    x = sorted(x)\n    seen = set()\n    result = []\n    for i in x:\n        if i not in seen:\n            seen.add(i)\n            result.append(i)\n    return result\n\n    # Solution 3\n    seen = set()\n    result = []\n    for i in x:\n        if not int(str(i)) % 2:\n            seen.add(i)\n            result.append(i)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "result = []\n    for num in x:\n        if num % 2 == 0:\n            result.append(num)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# Your code here\n    result = []\n    for i in x:\n        if i%2 == 0:\n            result.append(i)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "x = sorted(set(x))\n    return [i for i in x if i % 2!= 0]"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "x.sort()\n    even_digits = []\n    for i in x:\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "unique_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_list.append(i)\n    return sorted(unique_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "result = []\n    for x_val in x:\n        if x_val % 2 == 0:\n            result.append(x_val)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "unique = []\n    for i in x:\n        if i % 2 == 0:\n            unique.append(i)\n    return sorted(unique)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "s = list(set(str(x)))\n    s.sort()\n    return s\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n\n\ndef unique_digits_recursive(x, res):\n    if len(x) == 1:\n        res.append(x[0])\n        return\n\n    unique_digits_recursive(x[1:], res)\n\n    unique_digits_recursive(x[:-1], res)\n\n\ndef unique_digits_iterative(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    For example:\n    >>> unique_digits_iterative([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_iterative([152, 323, 1422, 10])\n    []\n    \"\"\"\n    res = []\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            res.append(x[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "x = sorted(x)\n    return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "return [x for x in x if x%2==0]"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "result = []\n    for element in x:\n        if not element % 2:\n            result.append(element)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "digits = [int(d) for d in str(x)]\n    return sorted([d for d in digits if d % 2 == 0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "unique = []\n    for el in x:\n        if el % 2 == 0:\n            unique.append(el)\n    return sorted(unique)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)\n\ndef unique_digits_v2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    For example:\n    >>> unique_digits_v2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_v2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)\n\ndef unique_digits_v3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    For example:\n    >>> unique_digits_v3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_v3([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)\n\ndef unique_digits_v4(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    For example:\n    >>> unique_digits_v4([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_v4([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "result = []\n    for element in x:\n        if element % 2 == 0:\n            result.append(element)\n    return sorted(result)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "x.sort()\n    seen = set()\n    for i in x:\n        if i % 2 == 0:\n            if i not in seen:\n                seen.add(i)\n    return sorted(seen)\n\n\ndef unique_digits_recursive(x):\n    \"\"\"Given a list of positive integers x. Return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example\n    >>> unique_digits_recursive([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_recursive([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 1:\n        return [x[0]]\n    seen = set()\n    for i in x:\n        if i % 2 == 0:\n            if i not in seen:\n                seen.add(i)\n                if len(seen) > 1:\n                    seen = seen - {x[0]}\n                else:\n                    return [x[0]]\n        else:\n            seen = seen | unique_digits_recursive(x[1:])\n    return []\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "unique = []\n    for i in x:\n        if i % 2 == 0:\n            unique.append(i)\n    return unique\n\ndef unique_digits_recursive(x):\n    \"\"\"Given a list of positive integers x. Return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    elif x[0] % 2 == 0:\n        return [x[0]]\n    else:\n        return unique_digits_recursive(x[1:]) + [x[0]]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "unique_digits_set = set()\n    for item in x:\n        if item % 2 == 0:\n            unique_digits_set.add(item)\n    return sorted(unique_digits_set)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "x = sorted(x)\n    unique_digits_list = []\n    for i in range(0, len(x), 2):\n        if x[i] % 2!= 0:\n            unique_digits_list.append(x[i])\n    return unique_digits_list\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return [x[0]]\n    \n    x.sort()\n    \n    even_digit = 0\n    even_number = 0\n    for digit in x:\n        if digit % 2 == 0:\n            even_digit += 1\n        elif digit % 2 == 1:\n            even_number += 1\n    \n    if even_digit == 0:\n        return [x[0]]\n    elif even_number == 0:\n        return [x[0], x[1]]\n    \n    return [x[0], x[1], x[2], x[3]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "if len(x) == 0:\n        return []\n    unique_digits_list = []\n    for i in range(len(x)):\n        if x[i] % 2!= 0:\n            unique_digits_list.append(x[i])\n    return sorted(unique_digits_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "unique_digits_list = []\n    for x_element in x:\n        if x_element % 2 == 0:\n            unique_digits_list.append(x_element)\n    return unique_digits_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n\n\ndef unique_digits_reverse(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(x, reverse=True)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "return [x_ for x_ in x if x_.isdigit() and len(set(x_))==1]\n\n\ndef unique_digits_recursive(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_recursive([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_recursive([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if len(x) == 1:\n        return [x[0]]\n    return sorted([x[0]] + unique_digits_recursive(x[1:]))"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "x = list(set(x))\n    x.sort()\n    return x"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "result = []\n    for num in x:\n        if num % 2 == 0:\n            result.append(num)\n    result.sort()\n    return result\n\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n\n\ndef unique_digits_3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n\n\ndef unique_digits_4(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.0,
      "candidate": "return sorted(set(x) - set(str(i) for i in x if int(i) % 2 == 0))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.0,
      "candidate": "return sorted([x for x in x if x % 2 == 0])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "return sorted(set(x) - set([int(x[i]) for i in range(len(x)) if x[i] % 2 == 0]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "s = []\n    for e in x:\n        if e % 2!= 0:\n            s.append(e)\n    return sorted(s)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "unique_digits_list = []\n    for i in x:\n        if i % 2!= 0:\n            unique_digits_list.append(i)\n    unique_digits_list.sort()\n    return unique_digits_list"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "return sorted(list(set(x) - set([int(digit) for digit in str(x)])))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "return sorted([i for i in x if int(str(i)[0]) % 2 == 0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "return sorted([n for n in x if n % 2!= 0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "return [e for e in x if e % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "result = []\n    for item in x:\n        if item % 2 == 0:\n            result.append(item)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "return sorted(set(x) - set([int(c) for c in str(x)]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "return sorted([num for num in x if num % 2 == 0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "# code here\n    return [x for x in x if not x % 2]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "result = []\n    for i in x:\n        if not i % 2:\n            result.append(i)\n    return sorted(result)\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))\nprint(unique_digits([10, 15, 33, 1422]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "seen = set()\n    return sorted(x, key=lambda x: str(x).count('0')) \\\n        if x not in seen else []\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "return [n for n in x if n % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "x = list(sorted(set(x)))\n    return [i for i in x if len(str(i)) % 2 == 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "if len(x) == 0:\n        return []\n    else:\n        return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "x = sorted(x)\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            x.pop(i)\n    return sorted(x)\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "return [x for x in x if x % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "return sorted([x[i] for i in range(len(x)) if x[i] % 2 == 0])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "unique = []\n    for i in x:\n        if i % 2 == 0:\n            unique.append(i)\n    return unique\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "return [x for x in x if x % 2 == 0]"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "if len(x) <= 1:\n        return x\n    else:\n        unique_digits_1 = unique_digits(x[:-1])\n        unique_digits_2 = unique_digits(x[1:])\n        unique_digits_3 = unique_digits_1 + unique_digits_2\n        unique_digits_4 = unique_digits_3 + x[-1]\n        return sorted(unique_digits_4)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "unique_list = []\n    for element in x:\n        if element % 2 == 0:\n            unique_list.append(element)\n    return unique_list"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "x.sort()\n    return [x[i] for i in range(len(x)) if x[i] % 2 == 0]"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "unique_list = []\n    for i in x:\n        if i % 2!= 0:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "return sorted(set(map(int, str(x))))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "result = []\n    for num in x:\n        if num % 2 == 0:\n            result.append(num)\n    return sorted(result)"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "return [x_i for x_i in x if x_i % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "x = sorted(x)\n    return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "return [x for x in x if x % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "if len(x) == 1:\n        return [x[0]]\n    else:\n        return [i for i in x if not (i%2==0)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "return sorted(set(x) - set([int(i) for i in str(x)]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "result = []\n    for i in x:\n        if i % 2!= 0:\n            result.append(i)\n    return sorted(result)"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "if len(x) == 0:\n        return []\n    \n    unique = []\n    for i in x:\n        if i % 2 == 0:\n            unique.append(i)\n            \n    return sorted(unique)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "x = sorted(set(x))\n    return [i for i in x if x.count(str(i)) == 1]"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "unique_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_list.append(i)\n    return unique_list\n\nprint(unique_digits([15, 33, 1422, 1]))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "unique = []\n    for i in x:\n        if i % 2!= 0:\n            unique.append(i)\n    return unique\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "unique_list = []\n    for i in x:\n        if i % 2 == 0:\n            unique_list.append(i)\n\n    return sorted(unique_list)\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "return [x_i for x_i in x if x_i % 2 == 0]\n\n\ndef unique_digits_v2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_v2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_v2([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    return [x_i for x_i in x if x_i % 2!= 0]\n\n\ndef unique_digits_v3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_v3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_v3([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    return [x_i for x_i in x if x_i % 2!= 0]\n\n\ndef unique_digits_v4(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_v4([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_v4([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    return [x_i for x_i in x if x_i % 2]\n\n\ndef unique_digits_v5(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_v5([15, 33, 14"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "result = []\n    for i in x:\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\ndef unique_digits_recursive(x, n):\n    \"\"\"Given a list of positive integers x, and an integer n, return a sorted \n    list of all elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example\n    >>> unique_digits_recursive([15, 33, 1422, 1], 1)\n    [1, 15, 33]\n    >>> unique_digits_recursive([152, 323, 1422, 10], 10)\n    []\n    \"\"\"\n    if n == 1:\n        result = [x[0]]\n    else:\n        result = []\n        for i in range(n):\n            if x[i] % 2 == 0:\n                result.append(x[i])\n    return result\n\ndef unique_digits_recursive2(x, n):\n    \"\"\"Given a list of positive integers x, and an integer n, return a sorted \n    list of all elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example\n    >>> unique_digits_recursive2([15, 33, 1422, 1], 1)\n    [1, 15, 33]\n    >>> unique_digits_recursive2([152, 323, 1422, 10], 10)\n    []\n    \"\"\"\n    if n == 1:\n        result = [x[0]]\n    else:\n        result = []\n        for i in range(n):\n            if x[i] % 2 == 0:\n                result.append(x[i])\n    return result\n\ndef unique_digits_recursive3(x, n):\n    \"\"\"Given a list of positive integers x, and an integer n, return a sorted \n    list of all elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example\n    >>> unique_digits_recursive3([15, 33, 1422, 1], 1)\n    [1, 15, 33]\n    >>> unique_digits_recursive3([152, 323, 1422"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "x = sorted(set(x))\n    x = [int(i) for i in x if int(i) % 2 == 0]\n    return x\n\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. Return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    x = sorted(set(x))\n    x = [i for i in x if int(i) % 2!= 0]\n    return x"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "return [element for element in x if element % 2 == 0]\n\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted([element for element in x if element % 2 == 0])"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted([x for x in x if x % 2!= 0 and x not in seen and not seen_add(x)])\n\ndef unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return sorted([x for x in x if x % 2!= 0 and x not in seen and not seen_add(x)])\n\ndef unique_digits_3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_3([152, 323, 1422, 10])\n    []\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return sorted([x for x in x if x % 2!= 0 and x not in seen and not seen_add(x)])\n\ndef unique_digits_4(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_4([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_4([152, 323, 1422, 10])\n    []\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return sorted([x for x in x if x % 2!= 0 and x not in seen and not seen_add(x"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "return [x for x in x if x%2!=0]\n\ndef unique_digits_with_regex(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example\n    >>> unique_digits_with_regex([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_with_regex([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if re.match(r'^\\d+$', str(x))]\n\n\ndef unique_digits_with_regex_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example\n    >>> unique_digits_with_regex_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_with_regex_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [x for x in x if re.match(r'^\\d+$', str(x))]"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "unique_digits = []\n    for i in x:\n        if int(i) % 2 == 0:\n            unique_digits.append(i)\n    return unique_digits\n\n\ndef unique_digits_recursive(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_recursive([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_recursive([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_digits = []\n    for i in x:\n        if int(i) % 2 == 0:\n            unique_digits.append(i)\n        else:\n            if len(unique_digits) > 0:\n                unique_digits.append(unique_digits.pop(0))\n            unique_digits_recursive(unique_digits)\n    return unique_digits\n\n\ndef unique_digits_iterative(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits_iterative([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_iterative([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_digits = []\n    for i in x:\n        if int(i) % 2 == 0:\n            unique_digits.append(i)\n        else:\n            if len(unique_digits) > 0:\n                unique_digits.append(unique_digits.pop(0))\n            unique_digits_iterative(unique_digits)\n    return unique_digits\n\n\ndef unique_digits_recursive_iterative(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "if len(x) <= 1:\n        return []\n    x = sorted(list(set(x)))\n    return [int(i) for i in x if not int(i).is_even()]\n\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) <= 1:\n        return []\n    x = sorted(list(set(x)))\n    return [int(i) for i in x if not int(i).is_even()]\n\n\ndef unique_digits3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if len(x) <= 1:\n        return []\n    x = sorted(list(set(x)))\n    return [int(i) for i in x if not int(i).is_even()]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    }
  ]
}