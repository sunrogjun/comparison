{
  "timestamp": "2025-09-14T11:31:18.482707",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 35,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return max(l[0], l[1])\n    if l[0] > l[1]:\n        return max(l[0], l[1])\n    return max(l[0], l[2])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return min(l)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return max(l[0], max_element(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if l == []:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], max_element(l[1:]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "max_num = 0\n    for i in l:\n        if max_num < i:\n            max_num = i\n    return max_num\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if l:\n        return l[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if not l:\n        return None\n    max_ = l[0]\n    for i in l:\n        if i > max_:\n            max_ = i\n    return max_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return max(l[0], max_element(l[1:]))\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return min(l[0], min_element(l[1:]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "max_element = l[0]\n\n    for i in l:\n        if i > max_element:\n            max_element = i\n\n    return max_element\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return max(l)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "max_element_list = [l[0]]\n    for i in range(1, len(l)):\n        max_element_list.append(max(l[i], max_element_list[-1] + l[i]))\n    return max(max_element_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "max_element = l[0]\n    for i in l[1:]:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return max(l[0], l[1])\n    if len(l) == 3:\n        return max(l[0], l[1], l[2])\n    return max(l[0], max(l[1], l[2]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return max(l, key=lambda x: x)\n\n\ndef find_max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> find_max_element([1, 2, 3])\n    3\n    >>> find_max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l, key=l.index)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if len(l) == 0:\n        return 0\n\n    return max(l)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    return max(l[0], max_element(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], max_element(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return max(l)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return max(l)\n\n\ndef max_element_two(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_two([1, 2, 3])\n    3\n    >>> max_element_two([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], l[1])\n\n\ndef max_element_three(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_three([1, 2, 3])\n    3\n    >>> max_element_three([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], max_element_three(l[1:]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if len(l) <= 1:\n        return l[0]\n    return max(l[0], max_element(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "max_element_index = 0\n    max_element_value = l[0]\n    for i in range(len(l)):\n        if l[i] > max_element_value:\n            max_element_value = l[i]\n            max_element_index = i\n    return l[max_element_index]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return min(l)\n\n\ndef find_max_and_min(l: list):\n    \"\"\"Return max and min element in the list.\n    >>> find_max_and_min([1, 2, 3])\n    (3, 3)\n    >>> find_max_and_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, 123)\n    \"\"\"\n    return max(l), min(l)\n\n\ndef find_max_and_min_recursive(l: list):\n    \"\"\"Return max and min element in the list recursively.\n    >>> find_max_and_min_recursive([1, 2, 3])\n    (3, 3)\n    >>> find_max_and_min_recursive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, 123)\n    \"\"\"\n    max_ = find_max(l)\n    min_ = find_min(l)\n    if max_ < min_:\n        return max_, min_\n    else:\n        return max_ + 1, min_ + 1\n\n\ndef find_max_and_min_recursive_iterative(l: list):\n    \"\"\"Return max and min element in the list recursively.\n    >>> find_max_and_min_recursive_iterative([1, 2, 3])\n    (3, 3)\n    >>> find_max_and_min_recursive_iterative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, 123)\n    \"\"\"\n    max_ = find_max(l)\n    min_ = find_min(l)\n    if max_ < min_:\n        return max_, min"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if not l:\n        return None\n    max_element = l[0]\n    for x in l:\n        if x > max_element:\n            max_element = x\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "max_value = 0\n    for element in l:\n        if max_value < element:\n            max_value = element\n    return max_value\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return min(l)\n\n\ndef intersection(a: list, b: list):\n    \"\"\"Return the intersection of two lists.\n    >>> intersection([1, 2, 3], [1, 2, 3])\n    [1, 2]\n    \"\"\"\n    return [x for x in a if x in b]\n\n\ndef union(a: list, b: list):\n    \"\"\"Return the union of two lists.\n    >>> union([1, 2, 3], [1, 2, 3])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in a if x not in b]"
    },
    {
      "rank": 34,
      "score": 9.982086980445024,
      "candidate": "return max(l)\n\n\ndef max_element_2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_2([1, 2, 3])\n    3\n    >>> max_element_2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l, key=lambda x: x)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.963994939209833,
      "candidate": "if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] if l[0] > l[1] else l[1]\n    if len(l) > 2:\n        return max(max_element(l[0:2]), max_element(l[2:]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.930867849414408,
      "candidate": "max_elem = 0\n    for i in l:\n        if i > max_elem:\n            max_elem = i\n    return max_elem\n\n\ndef max_element_recursive(l: list, current_max: int = 0, max_elem: int = 0):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_recursive([1, 2, 3])\n    3\n    >>> max_element_recursive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if l == []:\n        return current_max\n    elif l[0] > current_max:\n        current_max = l[0]\n    elif l[0] == current_max:\n        return max_elem\n    else:\n        max_elem = max_element_recursive(l[1:], current_max, max_elem)\n        return max_elem\n\n\ndef max_element_recursive_2(l: list, current_max: int = 0, max_elem: int = 0):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_recursive_2([1, 2, 3])\n    3\n    >>> max_element_recursive_2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if l == []:\n        return current_max\n    elif l[0] > current_max:\n        current_max = l[0]\n    elif l[0] == current_max:\n        return max_elem\n    else:\n        max_elem = max_element_recursive_2(l[1:], current_max, max_elem)\n        return max_elem\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.907170511668092,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 9.890164056081243,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return min(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.887111849756732,
      "candidate": "if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(max_element(l[:-1]), max_element(l[1:]))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 9.88293152152541,
      "candidate": "max_val = l[0]\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n\ndef max_element_with_lambda(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_with_lambda([1, 2, 3])\n    3\n    >>> max_element_with_lambda([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n\ndef max_element_with_lambda_and_list(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_with_lambda_and_list([1, 2, 3])\n    3\n    >>> max_element_with_lambda_and_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n\ndef max_element_with_lambda_and_tuple(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_with_lambda_and_tuple([1, 2, 3])\n    3\n    >>> max_element_with_lambda_and_tuple([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.854153125103362,
      "candidate": "if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(max_element(l[:-1]), max_element(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.850496324767066,
      "candidate": "if l:\n        return max(l)\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.849448152205355,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 9.836168926701117,
      "candidate": "if l == []:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] if l[0] > l[1] else l[1]\n    return max(l[0], max(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.803945923433922,
      "candidate": "if len(l) == 0:\n        return None\n    else:\n        return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        return None\n    else:\n        return min(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.769680614520107,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return min(l)\n\n\ndef sum_elements(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_elements([1, 2, 3])\n    3\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return sum(l)\n\n\ndef main():\n    print(max_element([1, 2, 3]))\n    print(min_element([1, 2, 3]))\n    print(sum_elements([1, 2, 3]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 9.768291153593768,
      "candidate": "if l == []:\n        return None\n    else:\n        return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if l == []:\n        return None\n    else:\n        return min(l)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.76713512321487,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return min(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.765262807032524,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.760412881077356,
      "candidate": "if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], l[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.740864890863175,
      "candidate": "return max(l)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.73511989811648,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.72780863773741,
      "candidate": "if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return max(l[0], l[1])\n\n    max_1 = max_element(l[0:2])\n    max_2 = max_element(l[2:])\n    return max(max_1, max_2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.699680655040597,
      "candidate": "return max(l)\n\n\ndef max_element_iterative(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_iterative([1, 2, 3])\n    3\n    >>> max_element_iterative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n\ndef max_element_recursive(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_recursive([1, 2, 3])\n    3\n    >>> max_element_recursive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return l[0]\n    max_val = l[0]\n    for val in l[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
      "rank": 55,
      "score": 9.699146693885302,
      "candidate": "return max(l)\n\n\ndef max_element_v2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_v2([1, 2, 3])\n    3\n    >>> max_element_v2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.677440122697439,
      "candidate": "if l is None:\n        return None\n    if len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], l[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 9.661538999847021,
      "candidate": "if not l:\n        return 0\n    else:\n        return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.648973453061323,
      "candidate": "if not l:\n        return 0\n    return l[0]\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    3\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return 0\n    return l[0]\n\n\ndef merge(left: list, right: list):\n    \"\"\"Return a list containing the result of merging the lists.\n    >>> merge([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [1, 2, 3, 123, 1, -10]\n    \"\"\"\n    if not left:\n        return right\n    if not right:\n        return left\n    result = [left[0]]\n    for i in range(1, len(left)):\n        result.append(max(left[i], right[i]))\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 9.640077895802646,
      "candidate": "max_element_value = 0\n    for i in l:\n        if i > max_element_value:\n            max_element_value = i\n    return max_element_value\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 9.595753198553407,
      "candidate": "max_element_index = 0\n    max_element_value = l[0]\n    for index, value in enumerate(l):\n        if value > max_element_value:\n            max_element_value = value\n            max_element_index = index\n    return l[max_element_index]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 9.58039123838868,
      "candidate": "if l:\n        return max(l)\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.545987962239394,
      "candidate": "max_ = l[0]\n    for i in l:\n        if i > max_:\n            max_ = i\n    return max_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 9.493584439832787,
      "candidate": "return max(l)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 9.47114453552205,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.446832512996986,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 9.42450321128885,
      "candidate": "max_element_list = []\n    for item in l:\n        if item > max_element_list[-1]:\n            max_element_list.append(item)\n    return max(max_element_list)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 9.401896687959665,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 9.335906975550785,
      "candidate": "max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n\n\ndef find_max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> find_max_element([1, 2, 3])\n    3\n    >>> find_max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\ndef find_max_element2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> find_max_element2([1, 2, 3])\n    3\n    >>> find_max_element2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\ndef find_max_element3(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> find_max_element3([1, 2, 3])\n    3\n    >>> find_max_element3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\ndef find_max_element4(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> find_max_element4([1, 2, 3])\n    3\n    >>> find_max_element4([5, 3, -5, 2, -3, 3, 9"
    },
    {
      "rank": 69,
      "score": 9.287625906893272,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    2\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    return min(l)\n\n\ndef sum_elements(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_elements([1, 2, 3])\n    3\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return sum(l)\n\n\ndef find_max_min(l: list):\n    \"\"\"Return maximum element and minimum element in the list.\n    >>> find_max_min([1, 2, 3])\n    (3, 2)\n    >>> find_max_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, 1)\n    \"\"\"\n    max_element = max(l)\n    min_element = min(l)\n    return max_element, min_element\n\n\ndef find_min_max(l: list):\n    \"\"\"Return minimum and maximum element in the list.\n    >>> find_min_max([1, 2, 3])\n    (1, 3)\n    >>> find_min_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (1, 123)\n    \"\"\"\n    max_element = max(l)\n    min_element = min(l)\n    return max_element, min_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 9.137541083743484,
      "candidate": "if l is None or len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return max(l[0], l[1])\n    return max(l[0], l[1], l[2])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 9.118479922318633,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 9.020164938060113,
      "candidate": "max_element_list = [None] * len(l)\n    max_element_list[0] = l[0]\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            max_element_list[i] = l[i]\n        else:\n            max_element_list[i] = l[i - 1]\n    return max_element_list[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 9.006215542699554,
      "candidate": "if len(l) == 0:\n        return 0\n    else:\n        return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.78350445158715,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.690127447955128,
      "candidate": "if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return max(l[0], l[1])\n    return max(l[0], l[1], l[2])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.688330726225034,
      "candidate": "if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return max(l[0], max(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.686605692077666,
      "candidate": "if len(l) == 0:\n        return 0\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.673294973869963,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.650080672470242,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.64992007053825,
      "candidate": "if len(l) == 0:\n        return 0\n    return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.597363516654662,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.533722587322382,
      "candidate": "if not l:\n        return None\n    return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.53034901683656,
      "candidate": "return max(l)"
    },
    {
      "rank": 84,
      "score": 8.526632221859366,
      "candidate": "if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], max_element(l[1:]))"
    },
    {
      "rank": 85,
      "score": 8.472175091871911,
      "candidate": "return max(l)"
    },
    {
      "rank": 86,
      "score": 8.46738463857832,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.44572280860506,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.441070138259962,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.415532373847384,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 8.385906100763611,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.36714135048164,
      "candidate": "max_element_index = 0\n    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element_index = i\n            max_element = l[i]\n    return max_element_index\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.348173874340365,
      "candidate": "max_element_idx = 0\n    max_element_val = l[0]\n    for idx, val in enumerate(l):\n        if val > max_element_val:\n            max_element_val = val\n            max_element_idx = idx\n    return l[max_element_idx]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 8.31900518354831,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 8.3038725621342,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 8.139233531951689,
      "candidate": "if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return max(l[0], l[1])"
    },
    {
      "rank": 96,
      "score": 8.091368519110622,
      "candidate": "max_element = l[0]\n    for i in l[1:]:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 8.078565707411414,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 8.074813946852588,
      "candidate": "if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(max_element(l[:-1]), max_element(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 7.966124383279995,
      "candidate": "return max(l, key=lambda x: x)\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return max(l)\n\n\ndef max_element_2(l: list):\n    \"\"\"Return the max element in the list.\n    >>> max_element_2([1, 2, 3])\n    3\n    >>> max_element_2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"
    }
  ]
}