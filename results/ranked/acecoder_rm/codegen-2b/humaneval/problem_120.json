{
  "problem": {
    "task_id": "HumanEval/120",
    "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
    "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n",
    "entry_point": "maximum",
    "docstring": "",
    "problem_id": 120
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if k == 0:\n        return []\n    if k == 1:\n        return [arr[0]] if arr else []\n\n    if k == 2:\n        return sorted(arr, key=lambda x: x if x > 0 else 0)\n    if k == 3:\n        return sorted(arr, key=lambda x: x if x > 0 else 0)\n    if k == 4:\n        return sorted(arr, key=lambda x: x if x > 0 else 0)\n    if k == 5:\n        return sorted(arr, key=lambda x: x if x > 0 else 0)\n    if k == 6:\n        return sorted(arr, key=lambda x: x if x > 0 else 0)\n\n\n# Your Maximum function will be called like this:\n# function = Maximum(arr, k)\n# Where function(arr, k) is the expression you're trying to evaluate.\n# arr is a list of integers, and k is an integer.\n# function returns the k largest integers in the list.\ndef maximum(arr, k):\n    if len(arr) < k:\n        return []\n    return sorted(arr, key=lambda x: x if x > 0 else 0, reverse=True)[:k]\n\n# Your Maximum function will be called like this:\n# function = Maximum(arr, k)\n# Where function(arr, k) is the expression you're trying to evaluate.\n# arr is a list of integers, and k is an integer.\n# function returns the k largest integers in the list.\ndef maximum(arr, k):\n    if len(arr) < k:\n        return []\n    return sorted(arr, key=lambda x: x if x > 0 else 0, reverse=True)[:k]\n\n# Your Maximum function will be called like this:\n# function = Maximum(arr, k)\n# Where function(arr, k) is the expression you're trying to evaluate.\n# arr is a list of integers, and k is an integer.\n# function returns the k largest integers in the list.\ndef maximum(arr, k):\n    if len(arr) < k:\n        return []\n    return sorted(arr, key=lambda x: x if x > 0 else 0, reverse=True)[:k]",
      4.79296875
    ],
    [
      "# sort the array\n    arr = sorted(arr)\n    \n    # get the max value from the first k elements\n    max_value = arr[0]\n    for i in range(1, k):\n        max_value = max(max_value, arr[i])\n\n    # return the max value\n    return [max_value] + arr[k:]\n\n\n# Test Cases\n\n# maximum([-3, -4, 5], 3) == [-4, -3, 5]\n# maximum([-3, -4, 5], 2) == [-4, -3, 5]\n# maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n# maximum([-3, 2, 1, 2, -1, -2, 1], 2) == [2, -2]\n# maximum([-3, 2, 1, 2, -1, -2, 1], 3) == [2, -2, 1]",
      1.9638671875
    ],
    [
      "# Brute force solution\n    # This is really a \"best effort\" solution.\n    # Since we can't know whether the solution is unique or not,\n    # we will just return a list of length k.\n    # We will try to optimize it later.\n    ans = []\n    for i in range(k):\n        ans.append(max(arr))\n\n    return ans",
      0.241943359375
    ],
    [
      "# sort the array\n    sorted_arr = sorted(arr)\n    # get the first k elements\n    sorted_arr = sorted_arr[:k]\n    # return the first k elements\n    return sorted_arr\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([4, -4, 4], 1))",
      0.2379150390625
    ],
    [
      "max_num = -sys.maxsize\n    ans = []\n    for i in range(k):\n        max_num = max(max_num, arr[i])\n        ans.append(max_num)\n    for i in range(k, len(arr)):\n        max_num = max(max_num, arr[i])\n        ans.append(max_num)\n    return ans",
      0.18994140625
    ],
    [
      "if not arr or k < 1:\n        return []\n    if k == 1:\n        return sorted(arr)\n    else:\n        left, right = 0, k - 1\n        max_k_numbers = []\n        while left < right:\n            max_k_numbers.append(arr[left])\n            left += 1\n            right -= 1\n        max_k_numbers.append(arr[right])\n        return max_k_numbers",
      0.1363525390625
    ],
    [
      "if k > len(arr):\n        return []\n\n    max_list = [arr[0]]\n    for i in range(1, k+1):\n        max_list.append(max(max_list[i-1:], key=lambda x: arr[i-1]-x))\n    return max_list",
      0.1346435546875
    ],
    [
      "# Time:  O(nk)\n    # Space: O(k)\n    if k == 1:\n        return arr\n    arr_len = len(arr)\n    if arr_len <= k:\n        return arr\n    arr_sort = sorted(arr)\n    max_arr = []\n    for i in range(k):\n        max_arr.append(arr_sort[i])\n    for i in range(k, arr_len):\n        max_arr.append(arr_sort[i - k])\n    return max_arr\n\n\n# TESTS\nfor arr, k, expected in [\n    ([], 1, []),\n    ([-3, -4, 5], 3, [-4, -3, 5]),\n    ([-3, -4, 5], 2, [-4, -3, 5]),\n    ([4, -4, 4], 1, [4]),\n    ([4, -4, 4], 2, [4, 4]),\n    ([4, -4, 4], 3, [4, 4, 4]),\n]:\n    sol = Solution().maximum(arr, k)\n    print('Maximum of {} with k = {} = {}'.format(arr, k, sol))\n    assert sol == expected",
      0.1328125
    ],
    [
      "# Sort the array and then search from the end\n    arr.sort()\n    return arr[:k]\n\nif __name__ == \"__main__\":\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -0.625
    ],
    [
      "# write your code here\n    k = k if k <= len(arr) else len(arr)\n\n    if k == 1:\n        return sorted(arr)[0]\n    else:\n        return max(maximum(arr[:k], k-1), maximum(arr[k:], k-1))\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([4, -4, 4], 1))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -0.7509765625
    ],
    [
      "res = []\n    for i in range(k):\n        max_num = -1\n        for j in range(len(arr)):\n            if max_num < arr[j]:\n                max_num = arr[j]\n        res.append(max_num)\n    return res\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([4, -4, 4], 1))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 2))",
      -0.85693359375
    ],
    [
      "# Sort arr\n    arr = sorted(arr)\n    \n    # Get the maximum value in the array\n    max_val = arr[0]\n    \n    # Get the first k elements\n    for i in range(1, k+1):\n        max_val = max(max_val, arr[i])\n    \n    # Return the k elements\n    return [max_val] + arr[k:]",
      -0.85693359375
    ],
    [
      "if not arr or not k:\n        return []\n\n    # sort the array\n    sorted_arr = sorted(arr)\n\n    # find the k-th largest number\n    k_largest_num = sorted_arr[k-1]\n\n    # find the k-th largest number in the array\n    for i in range(k-2, -1, -1):\n        if sorted_arr[i] > k_largest_num:\n            k_largest_num = sorted_arr[i]\n\n    return [k_largest_num]\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))",
      -0.85693359375
    ],
    [
      "# Your code here\n    res = []\n    n = len(arr)\n    if n == 0:\n        return res\n    if k > n:\n        return res\n    if k == 1:\n        return arr\n    \n    max_arr = []\n    for i in range(k):\n        max_arr.append(max(arr[i:k]))\n    max_arr.sort()\n    res.append(max_arr[0])\n    return res",
      -0.85693359375
    ],
    [
      "# Sort the array\n    arr = sorted(arr)\n\n    # Find the maximum number in the array\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n\n    # Find the indices of the maximum number in the array\n    max_indices = [i for i, x in enumerate(arr) if x == max_num]\n\n    # Return the maximum k numbers in the array\n    return arr[max_indices[:k]]",
      -0.85791015625
    ],
    [
      "# Sort the array\n    arr = sorted(arr)\n\n    # Calculate the maximum number in the array\n    max_num = arr[0]\n    max_num_index = 0\n\n    for i in range(1, len(arr)):\n        if max_num < arr[i]:\n            max_num = arr[i]\n            max_num_index = i\n\n    # Return the sorted array\n    return arr[max_num_index:max_num_index+k]",
      -0.85791015625
    ],
    [
      "# sort the array\n    arr = sorted(arr)\n    # find the kth largest element\n    kth_largest = arr[:k]\n    # reverse the array so we can find the kth largest element\n    arr = list(reversed(arr))\n    # reverse the kth largest element\n    kth_largest.reverse()\n    # return the kth largest element\n    return kth_largest\n\nif __name__ == '__main__':\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
      -0.85791015625
    ],
    [
      "res = []\n    for i in range(k):\n        max_num = -1\n        max_idx = -1\n        for j in range(len(arr)):\n            if arr[j] > max_num:\n                max_num = arr[j]\n                max_idx = j\n        res.append(max_num)\n        arr[max_idx] = -1\n    return res",
      -0.85791015625
    ],
    [
      "# Sort\n    arr = sorted(arr)\n\n    # Get max\n    max_val = arr[0]\n    max_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_idx = i\n    \n    # Get k max\n    max_arr = []\n    for i in range(k):\n        max_arr.append(arr[i])\n\n    return max_arr",
      -0.85791015625
    ],
    [
      "# sort the array\n    arr.sort()\n\n    # max_num is the maximum number in the array\n    max_num = arr[0]\n\n    # k is the number of elements to be returned\n    k = k % len(arr)\n\n    # create a list to store the k elements\n    return_list = []\n\n    # calculate the maximum k elements\n    for i in range(k):\n        return_list.append(max_num)\n\n    # append the rest of the elements to the list\n    return_list.extend(arr[k:])\n\n    # sort the list\n    return_list.sort()\n\n    # return the list\n    return return_list\n\n\nif __name__ == '__main__':\n    arr = [4, -4, 4, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    k = 4\n    print(maximum(arr, k))",
      -0.85791015625
    ],
    [
      "if k == 1:\n        return max_heapify(arr, k)\n    elif k == 2:\n        return max_heapify(arr, k)\n    elif k > len(arr):\n        return []\n    else:\n        return max_heapify(arr, k)",
      -0.85791015625
    ],
    [
      "# Sort the array\n    arr = sorted(arr)\n    # Get the kth largest element from the array\n    return arr[:k]\n\n\n# Your MaximumKPermutations object will be instantiated and called as such:\n# obj = MaximumKPermutations(arr,k)\n# param_1 = obj.maximum(arr,k)",
      -0.85791015625
    ],
    [
      "# sort the array\n    arr = sorted(arr)\n\n    # reverse the array\n    arr = list(reversed(arr))\n\n    # get the kth largest number\n    kth_largest = arr[:k]\n\n    # sort the kth largest number\n    kth_largest = sorted(kth_largest)\n\n    return kth_largest\n\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))",
      -0.85791015625
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0]]\n\n    if len(arr) == 2:\n        return [max(arr), min(arr)]\n\n    if len(arr) < k:\n        return maximum(arr, k)\n\n    mid = len(arr) / 2\n    left = maximum(arr[:mid], k)\n    right = maximum(arr[mid:], k)\n\n    return left + right\n\n\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([-3, -4, 5], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -0.85791015625
    ],
    [
      "if k == 1:\n        return max_heapify(arr, 0)\n    elif k == 2:\n        return max_heapify(arr, 1)\n    else:\n        return max_heapify(arr, 2)\n\n\n# TESTS\ndef test_maximum():\n    assert maximum([], 0) == []\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
      -0.8583984375
    ],
    [
      "# Sort the array\n    arr = sorted(arr)\n    # Iterate from end to beginning\n    for i in range(len(arr) - k + 1):\n        # If the maximum number in arr[i:i+k] is larger than the current max,\n        # replace it with the current max\n        if arr[i] > arr[i+k-1]:\n            arr[i+k-1] = arr[i]\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))",
      -0.8583984375
    ],
    [
      "if k > len(arr):\n        return arr\n    if k == 1:\n        return sorted(arr)[0]\n\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i])\n        if k - 1 < i:\n            return max_sum\n    return max_sum",
      -0.8583984375
    ],
    [
      "# Sort arr and return the kth largest number\n    return sorted(arr, reverse=True)[:k]\n\n\ndef main():\n    # Output: [2, 4, 5, -4, -3]\n    arr = [-3, -4, 5]\n    k = 3\n    print maximum(arr, k)\n\n    # Output: [-3, -4, 5]\n    arr = [-3, -4, 5]\n    k = 1\n    print maximum(arr, k)\n\n    # Output: [4, 4]\n    arr = [4, -4, 4]\n    k = 2\n    print maximum(arr, k)\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "# Sort the array.\n    arr.sort()\n\n    # Get the k-th largest number in the array.\n    if k == 1:\n        return arr[0]\n    elif k == 2:\n        return arr[1]\n    else:\n        # Find the largest number in the first k-1 elements.\n        return arr[:k - 1] + arr[k - 1]\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5], \"Example 1\"\n    assert maximum([4, -4, 4], 2) == [4, 4], \"Example 2\"\n    assert maximum([4, -4, 4], 1) == [4], \"Example 3\"",
      -0.8583984375
    ],
    [
      "if k == 0:\n        return []\n    max_num = arr[0]\n    arr_copy = arr[:]\n    arr_copy.sort()\n    for i in range(1, k):\n        max_num = max(max_num, arr_copy[i])\n    return [max_num] + arr[k:]\n\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))",
      -0.8583984375
    ],
    [
      "# Sort the array and get the maximum value\n    arr = sorted(arr)\n    max_val = arr[0]\n    for i in range(1, k+1):\n        max_val = max(max_val, arr[i])\n\n    # Return the sorted list of max_val\n    return sorted([max_val])\n\n\n# TESTS\nfor arr, k, expected in [\n    ([], 0, []),\n    ([4], 1, [4]),\n    ([1, 2, 3], 2, [3, 2, 1]),\n    ([-4, -3, 5], 3, [-4, -3, 5]),\n]:\n    sol = maximum(arr, k)\n    actual = minimum(arr, k)\n    assert actual == expected\n    assert actual == sol",
      -0.8583984375
    ],
    [
      "if len(arr) < k:\n        return arr\n\n    # Sort the array\n    arr = sorted(arr)\n\n    # Find the first k elements and find the max value\n    for i in range(k):\n        if i < len(arr) - 1:\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return arr[:k]",
      -0.85888671875
    ],
    [
      "if k == 0:\n        return []\n\n    if len(arr) == 0:\n        return [0] * k\n\n    left = maximum(arr[:k], k)\n    right = maximum(arr[k:], k)\n    if len(left) == k:\n        return left\n    if len(right) == k:\n        return right\n\n    mid = sorted(arr[k:])\n    return left + mid + right",
      -0.85888671875
    ],
    [
      "# sort by decreasing order\n    arr = sorted(arr, reverse=True)\n    # use bisection to find the kth largest element\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([-3, -4, 5], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -0.85888671875
    ],
    [
      "n = len(arr)\n    if k > n:\n        return arr\n    elif k == n:\n        return sorted(arr)\n    elif k == 1:\n        return sorted(arr)[0]\n\n    # Find the maximum value\n    max_val = arr[0]\n    max_idx = 0\n    for idx in range(1, n):\n        if arr[idx] > max_val:\n            max_val = arr[idx]\n            max_idx = idx\n    return arr[max_idx:k]",
      -0.85888671875
    ],
    [
      "return sorted(arr, reverse=True)[:k]\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.maximum([-3, -4, 5], 3))\n    print(sol.maximum([4, -4, 4], 2))\n    print(sol.maximum([4, -4, 4], 1))\n    print(sol.maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -0.85888671875
    ],
    [
      "result = []\n    for i in range(k):\n        max_i = -1\n        for j in range(len(arr)):\n            if arr[j] > arr[max_i]:\n                max_i = j\n        result.append(max_i)\n    return result\n\n\nclass Solution(object):\n    def maximumKSimilar(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(arr) < k:\n            return 0\n\n        # find the maximum in arr\n        max_arr = maximum(arr, k)\n        # sort the maximum in arr\n        max_arr = sorted(max_arr)\n        # find the k most similar\n        result = [arr[i] for i in range(len(arr)) if i not in max_arr]\n        return len(result)",
      -0.85888671875
    ],
    [
      "res = []\n    k = min(k, len(arr))\n    for i in range(k):\n        res.append(max(arr[:i+1]))\n    return res\n\n\nclass Solution(object):\n    def maxNumber(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return 0\n        n = len(arr)\n        # print(arr)\n        # print(maximum(arr, k))\n        # print(maximum(arr, k))\n        # print(maximum(arr, k))\n        # print(maximum(arr, k))\n        return max(maximum(arr, k))",
      -0.85888671875
    ],
    [
      "result = []\n    arr = sorted(arr)\n\n    # find the maximum element in arr\n    maximum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n\n    # find the kth largest element in arr\n    for i in range(len(arr) - k + 1):\n        if i == 0:\n            result.append(arr[i])\n            continue\n\n        if arr[i] > maximum:\n            result.append(arr[i])\n            continue\n\n        if arr[i] > maximum - arr[i-1]:\n            result.append(arr[i])\n            continue\n\n        if arr[i] == maximum - arr[i-1]:\n            result.append(arr[i])\n            continue\n\n    return result\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))",
      -0.85888671875
    ],
    [
      "# Sort arr in ascending order\n    arr = sorted(arr)\n    # Get the kth largest element\n    return arr[:k]",
      -0.86083984375
    ],
    [
      "if k == 1:\n        return sorted(arr)\n\n    if k > len(arr):\n        return []\n\n    res = [arr[0]]\n    for i in range(1, k):\n        max_num = max(arr[i], max(arr[:i] + res))\n        res.append(max_num)\n    return res\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([-3, -4, 5], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -1.052734375
    ],
    [
      "if k > len(arr):\n        return arr\n    if k == 1:\n        return arr[0]\n    # Get the max value\n    max_val = arr[0]\n    for i in range(1, k):\n        max_val = max(max_val, arr[i])\n\n    # Find the index of max_val\n    index = 0\n    for i in range(k):\n        if arr[i] == max_val:\n            index = i\n    return arr[index]",
      -1.2685546875
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return arr\n\n    # Find the minimum value in the left half of the array\n    min_left = arr[0]\n\n    # Find the maximum value in the left half of the array\n    max_left = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_left:\n            max_left = arr[i]\n\n        if arr[i] < min_left:\n            min_left = arr[i]\n\n    # Find the minimum value in the right half of the array\n    min_right = arr[0]\n\n    # Find the maximum value in the right half of the array\n    max_right = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_right:\n            max_right = arr[i]\n\n        if arr[i] < min_right:\n            min_right = arr[i]\n\n    # Get the max_value and min_value in the left half\n    max_left_in_left = max_left\n\n    min_left_in_left = min_left\n\n    # Get the max_value and min_value in the right half\n    max_right_in_right = max_right\n\n    min_right_in_right = min_right\n\n    # Find the maximum value in the left half of the array\n    for i in range(1, len(arr)):\n        if arr[i] > max_left_in_left:\n            max_left_in_left = arr[i]\n\n        if arr[i] < min_left_in_left:\n            min_left_in_left = arr[i]\n\n    # Find the maximum value in the right half of the array\n    for i in range(1, len(arr)):\n        if arr[i] > max_right_in_right:\n            max_right_in_right = arr[i]\n\n        if arr[i] < min_right_in_right:\n            min_right_in_right = arr[i]\n\n    # Find the maximum value in the left half of the",
      -1.2822265625
    ],
    [
      "assert 0 <= k <= len(arr)\n\n    # Sort the array first.\n    # O(n log n) time, O(n) space.\n    # Use binary search to get the kth maximum number.\n    arr.sort()\n\n    # Find the kth maximum number.\n    # O(n log k) time, O(1) space.\n    # Use binary search to get the kth maximum number.\n    return arr[k-1]\n\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))",
      -1.3291015625
    ],
    [
      "# Sort the array first, then remove the kth largest element.\n    # The sort is O(nlog(n)), so the time complexity is O(n*log(n)).\n    # Then we just need to remove the kth largest element.\n    # The space complexity is O(1).\n    # Time complexity is O(n).\n    # https://leetcode.com/problems/maximum-of-subarray-with-k-equal-elements/discuss/267076/Python-2-O(n)-Sorting-Time-Complexity-O(1)-Space-Complexity\n    # https://leetcode.com/problems/maximum-of-subarray-with-k-equal-elements/discuss/240171/Java-O(n)-Sorting-Time-Complexity-O(1)-Space-Complexity\n    # https://leetcode.com/problems/maximum-of-subarray-with-k-equal-elements/discuss/240171/Java-O(n)-Sorting-Time-Complexity-O(1)-Space-Complexity\n    # https://leetcode.com/problems/maximum-of-subarray-with-k-equal-elements/discuss/240171/Java-O(n)-Sorting-Time-Complexity-O(1)-Space-Complexity\n    # https://leetcode.com/problems/maximum-of-subarray-with-k-equal-elements/discuss/240171/Java-O(n)-Sorting-Time-Complexity-O(1)-Space-Complexity\n    # https://leetcode.com/problems/maximum-of-subarray-with-k-equal-elements/discuss/240171/Java-O(n)-Sorting-Time-Complexity-O(1)-Space-Complexity\n    # https://leetcode.com/problems/maximum-of-subarray-with-k-equal-elements/discuss/240171/Java-O(n)-Sorting-Time-Complexity-O(1)-Space-Complexity\n    # https://le",
      -1.4375
    ],
    [
      "if not arr:\n        return []\n    \n    if k == 1:\n        return [max(arr)]\n\n    # get all max values\n    max_values = []\n    for i in range(k):\n        max_values.append(max(arr[:i+1]))\n\n    # get all sorted indices\n    sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])\n\n    # get all max indices\n    max_indices = sorted_indices[:k]\n\n    # get all max values\n    max_values = sorted(max_values, reverse=True)\n\n    # get the largest value\n    largest_value = max_values[0]\n    largest_indices = sorted_indices[0:k]\n\n    # get all sorted indices from largest value\n    largest_indices = sorted(largest_indices, key=lambda x: arr[x])\n\n    # return the largest indices\n    return largest_indices\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([[1,2,3],[4,5,6],[7,8,9]], 3)\n        self._test([[1,2,3],[4,5,6],[7,8,9],[0,1,2,3,4,5,6,7,8,9]], 2)\n        self._test([[1,2,3],[4,5,6],[7,8,9],[0,1,2,3,4,5,6,7,8,9]], 0)\n        self._test([[1,2,3],[4,5,6],[7,8,9]], 3)\n        self._test([[1,2,3],[4,5,6],[7,8,9],[0,1,2,3,4,5,6,7,8,9]], 2)\n        self._test([[1,2,3],[4,5,6],[7,8,9],[0,1,2,3,4,5,6,7,8,9]], 0)\n\n    def _test(self, arr, k):\n        actual = maximum(arr",
      -1.5029296875
    ],
    [
      "# Sort the array using sort function\n    arr = sorted(arr)\n    # Initialize the maximum value to the first number\n    maximum = arr[0]\n    # Iterate through the array to find the maximum number\n    for i in range(1, len(arr)):\n        # If the current number is greater than the previous maximum, then update it\n        if arr[i] > maximum:\n            maximum = arr[i]\n    # Return the maximum value\n    return maximum\n\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))",
      -1.7783203125
    ],
    [
      "# Approach #1: Sort and find the maximum\n    sorted_arr = sorted(arr)\n    max_num = sorted_arr[0]\n    for i in range(1, k):\n        max_num = max(sorted_arr[i], max_num)\n\n    # Approach #2: Binary Search\n    # Sort the array to find the kth largest element\n    sorted_arr = sorted(arr)\n    kth_largest = sorted_arr[0]\n    lower_bound = 0\n    upper_bound = len(sorted_arr) - 1\n    while lower_bound <= upper_bound:\n        mid = (lower_bound + upper_bound) // 2\n        if kth_largest > sorted_arr[mid]:\n            upper_bound = mid - 1\n        else:\n            lower_bound = mid + 1\n    return sorted_arr[lower_bound:upper_bound + 1]\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))",
      -1.8017578125
    ],
    [
      "# sort and take kth largest elements\n    sorted_arr = sorted(arr)\n    return sorted_arr[:k]\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -1.912109375
    ],
    [
      "# Sort the array\n    sorted_arr = sorted(arr)\n    # Find the maximum k numbers in the sorted array\n    max_k_numbers = [sorted_arr[i] for i in range(len(sorted_arr)) if i < len(sorted_arr) - k]\n    return max_k_numbers",
      -1.9697265625
    ],
    [
      "# Sort the array\n    # arr = sorted(arr)\n    arr = sorted(arr)\n    # Return the first k numbers\n    return arr[:k]\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([-4, -3, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 3) == [4, 4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 2) == [2, -1]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 3) == [2, -1, -2]",
      -1.9931640625
    ],
    [
      "# sort the array\n    arr = sorted(arr)\n    max_arr = []\n    k = k - 1\n\n    # keep kth largest element\n    for i in range(len(arr)):\n        if i >= k:\n            break\n        max_arr.append(arr[i])\n    return max_arr\n\n\nclass Solution(object):\n    def maxNumber(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not arr or not k:\n            return 0\n\n        # sort the array\n        arr = sorted(arr)\n\n        # keep kth largest element\n        max_arr = []\n        k = k - 1\n        for i in range(len(arr)):\n            if i >= k:\n                break\n            max_arr.append(arr[i])\n        return max(max_arr)\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))",
      -2.2421875
    ],
    [
      "# Your Function\n    # @param {integer[]} arr\n    # @param {integer} k\n    # @return {integer[]}\n    def max_k_arr(arr, k):\n        if k == 1:\n            return [max(arr)]\n        else:\n            return max_k_arr(arr, k-1) + [max(arr[:k-1])]\n    return max_k_arr(arr, k)\n\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))",
      -2.376953125
    ],
    [
      "# sort arr using a heap\n    # heap is a min-heap where the maximum element is at the top\n    heap = []\n    for num in arr:\n        heap.append(num)\n        heap.sort(reverse=True)\n    # add the max element at the end\n    heap.append(arr[0])\n    # now pop the max element from the end of heap\n    # and push it to the top of the heap\n    while len(heap) > k:\n        heap[0] = heap.pop()\n        heap.sort()\n    return heap[:k]",
      -2.3828125
    ],
    [
      "# Sort the array and get the maximum k values\n    arr = sorted(arr)\n    max_values = []\n    for i in range(k):\n        max_values.append(arr[i])\n    return max_values\n\n\ndef main():\n    \"\"\"\n    Test cases\n    \"\"\"\n    # arr = [-3, -4, 5]\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n    # arr = [-3, 2, 1, 2, -1, -2, 1]\n    arr = [4, -4, 4]\n    k = 1\n    print(maximum(arr, k))\n    # arr = [-3, 2, 1, 2, -1, -2, 1]\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
      -2.41015625
    ],
    [
      "# sort arr and return k largest numbers\n    return sorted(arr, reverse=True)[:k]\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([-3, -4, 5], 3)\n        self._test([-3, -4, 5], 2)\n        self._test([-3, -4, 5], 1)\n        self._test([-3, -4, 5], 0)\n\n    def _test(self, arr, k):\n        self.assertEqual(maximum(arr, k), expected(arr, k))\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -2.42578125
    ],
    [
      "n = len(arr)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [arr[0]]\n    elif k == 0:\n        return []\n    elif k == 1:\n        return [arr[0]]\n\n    left = [arr[0]]\n    right = [arr[0]]\n\n    for i in range(1, n):\n        left.append(min(arr[i - 1], arr[i]))\n        right.append(max(arr[i - 1], arr[i]))\n\n    return sorted(left + right)\n\n\nclass Solution(object):\n    def maxSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return nums[0]\n        elif k == 1:\n            return max(nums)\n\n        left = nums[0]\n        right = nums[0]\n\n        for i in range(1, n):\n            left = max(left, nums[i - 1])\n            right = max(right, nums[i])\n\n        return max(left, right)\n\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))",
      -2.478515625
    ],
    [
      "# https://leetcode.com/problems/maximum-subarray-sum/discuss/86716/C%2B%2B-easy-to-understand-and-fast-solution\n\n    # Binary Search\n    max_value = -2147483648\n    max_idx = 0\n\n    for i in range(len(arr)):\n        # Binary Search\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_idx = i\n\n    # Binary Search\n    max_value = -2147483648\n    max_idx = 0\n\n    for i in range(len(arr) - k + 1):\n        # Binary Search\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_idx = i\n\n    return arr[max_idx:max_idx + k]\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))",
      -2.564453125
    ],
    [
      "if k > len(arr):\n        return []\n    if k == 0:\n        return arr\n\n    max_arr = []\n    for i in range(k):\n        max_arr.append(-arr[0])\n        arr[0] += 1\n        \n    for i in range(1, len(arr)):\n        max_arr.append(max(arr[i-1], arr[i]))\n    return max_arr\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([-3, -4, 5], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -2.75390625
    ],
    [
      "if k > len(arr):\n        return []\n    max_nums = []\n    start = 0\n    end = k\n    while start < len(arr):\n        if end > len(arr):\n            end = len(arr)\n        max_nums.append(arr[start])\n        while start < end and arr[start] <= arr[end]:\n            start += 1\n        if start < end:\n            start += 1\n    return max_nums\n\n\ndef main():\n    # Output: [-4, -3, 5]\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n\n    # Output: [4, 4]\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n\n    # Output: [4, 4]\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
      -2.994140625
    ],
    [
      "# https://leetcode.com/problems/maximum-subarray/\n    # https://leetcode.com/problems/maximum-sum-of-subarray/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-ii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-iii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-ii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-iii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-ii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-iii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-ii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-iii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-ii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-iii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-ii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-iii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-ii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-iii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-ii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-iii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-ii/\n    # https://leetcode.com/problems/maximum-sum-of-subarray-iii/\n    # https://leetcode.com/problems/maximum-sum-of-sub",
      -3.087890625
    ],
    [
      "if k == 1:\n        return [max(arr)]\n    arr_copy = list(arr)\n    arr_copy.sort()\n    ans = []\n    for i in range(k):\n        ans.append(arr_copy[i])\n    return ans\n\n\nclass Solution(object):\n    def maximumAverage(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        if not nums or k == 1:\n            return 0\n        arr = [0] * k\n        for num in nums:\n            arr[0] = max(arr[0], num)\n            arr[k - 1] = max(arr[k - 1], num)\n        return sum(arr) / k\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maximumAverage([1, 2, 3, 4], 2))\n    print(sol.maximumAverage([1, 2, 3], 3))\n    print(sol.maximumAverage([1, 2, 3], 1))\n    print(sol.maximumAverage([1, 2, 3, 4, 5], 3))\n    print(sol.maximumAverage([-3, -4, 5], 3))\n    print(sol.maximumAverage([-3, -4, 5], 2))",
      -3.13671875
    ],
    [
      "# write your code here\n    if k == 0:\n        return []\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    if k == 1:\n        return max(arr)\n    max_num = arr[0]\n    for i in range(1, k):\n        max_num = max(max_num, arr[i])\n    return max_num\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([-3, -4, 5], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -3.173828125
    ],
    [
      "# Sort the array, so that we can find the maximum\n    arr = sorted(arr)\n    # Find the maximum\n    max_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_arr.append(arr[i])\n    # Get the last k elements\n    k_arr = [arr[i] for i in range(len(arr)-k+1)]\n    # Get the maximum\n    return max(max_arr, k_arr)",
      -3.44140625
    ],
    [
      "# Sort the array, then find the max element in the sorted array\n    # and return it.\n    return sorted(arr, reverse=True)[:k]\n\n\ndef main():\n    # Output: [2, 4, 4, 4, 4, 4, 4, 5, 5]\n    arr = [4, -4, 5, -3, 2, -1, -2, 1]\n    print(maximum(arr, 3))\n\n    # Output: [4, 4, 4, 4, 4, 4, 4]\n    arr = [4, -4, 4, 4, 4, 4, 4]\n    print(maximum(arr, 3))\n\n    # Output: [4, 4, 4, 4, 4, 4, 4]\n    arr = [4, 4, 4, 4, 4, 4, 4]\n    print(maximum(arr, 3))\n\n\nif __name__ == '__main__':\n    main()",
      -3.71875
    ],
    [
      "# Sort the array and take the kth largest element.\n    return sorted(arr)[:k]\n\n\n# TESTS\nfor arr, k, expected in [\n    ([], 1, []),\n    ([1], 1, [1]),\n    ([-3, -4, 5], 3, [-4, -3, 5]),\n    ([4, -4, 4], 3, [4, 4]),\n    ([4, -4, 4], 2, [4, 4]),\n    ([-3, 2, 1, 2, -1, -2, 1], 1, [2]),\n    ([-3, 2, 1, 2, -1, -2, 1], 2, [-3, 2]),\n    ([-3, 2, 1, 2, -1, -2, 1], 3, [-3, 2, 1]),\n]:\n    print(\"maximum({}, {}) = {}\".format(arr, k, expected))\n    actual = maximum(arr, k)\n    assert actual == expected",
      -3.76953125
    ],
    [
      "return sort_and_partition(arr, k, 0, len(arr))\n\n# time:O(N), space:O(N)\ndef sort_and_partition(arr, k, start, end):\n    \"\"\"\n    Sort the array arr and return the partition of the array into k subarrays.\n    Each subarray will be sorted in increasing order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [1, -4, -3]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # sort the array arr in ascending order\n    sorted_arr = sorted(arr)\n\n    # get the first k elements\n    first_k_elements = sorted_arr[start:end]\n\n    # sort the first k elements in descending order\n    first_k_elements = sorted(first_k_elements, reverse=True)\n\n    # get the last k elements\n    last_k_elements = sorted_arr[end-k:end]\n\n    # sort the last k elements in ascending order\n    last_k_elements = sorted(last_k_elements)\n\n    # construct the partition\n    partition = first_k_elements + last_k_elements\n\n    return partition",
      -3.966796875
    ],
    [
      "# Sort the array and then sort the array again\n    # to get the maximum value of k.\n    arr.sort()\n    arr.sort()\n    return arr[:k]\n\n\ndef main():\n    # Output: [2, 4, 4]\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n\n    # Output: [-4, -3, 5]\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n\n    # Output: [4, 4]\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
      -4.0859375
    ],
    [
      "return max_subarray(arr, 0, len(arr), k)\n\n\ndef max_subarray(arr, start, end, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    max_num = min(arr[start:end])\n    max_list = [max_num]\n    i = start\n    while i < end:\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_list = [max_num]\n        elif arr[i] == max_num:\n            max_list.append(arr[i])\n        i += 1\n    return max_list\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -4.3046875
    ],
    [
      "# Sort the array\n    arr = sorted(arr)\n\n    # Find the maximum k numbers in the array\n    max_arr = []\n    for i in range(k):\n        max_arr.append(arr[i])\n\n    # Find the maximum value in the max_arr\n    max_val = max(max_arr)\n\n    # Add the max value to the end of the max_arr\n    max_arr.append(max_val)\n\n    # Return the sorted list\n    return sorted(max_arr)\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([4, -4, 4], 1))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -4.56640625
    ],
    [
      "assert k > 0, \"k should be positive.\"\n    assert len(arr) >= k, \"The length of arr should be at least k.\"\n    # Sort the array.\n    arr = sorted(arr)\n    # Find the maximum k numbers in the array.\n    arr = arr[:k]\n    # Find the maximum of the first k numbers in arr.\n    max_arr = [arr[0]]\n    for i in xrange(1, k):\n        max_arr.append(max(arr[i], max_arr[i-1]))\n    return max_arr\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print maximum(arr, k)",
      -4.890625
    ],
    [
      "# sort the array\n    arr = sorted(arr)\n\n    # find the maximum value\n    max_value = arr[0]\n    for i in range(1, k):\n        if arr[i] > max_value:\n            max_value = arr[i]\n\n    # return the max value\n    return max_value\n\nif __name__ == '__main__':\n    # n = int(input())\n    n = 0\n    arr = list()\n    for _ in range(n):\n        arr.append(int(input()))\n\n    k = int(input())\n    print(maximum(arr, k))",
      -5.0390625
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return arr\n\n    if k == 1:\n        return [max(arr)]\n\n    left = []\n    right = []\n\n    for i in range(len(arr)):\n        if i == k - 1:\n            left.append(arr[i])\n        else:\n            left.append(arr[i] - arr[i - 1])\n\n    for i in range(len(arr)):\n        if i == len(arr) - k + 1:\n            right.append(arr[i])\n        else:\n            right.append(arr[i] - arr[i + 1])\n\n    return max(left) + max(right)\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([4, -4, 4], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -5.42578125
    ],
    [
      "if k == 0:\n        return []\n    if k == 1:\n        return [arr[0]]\n    if k == 2:\n        return [max(arr), min(arr)]\n    # Note:\n    # We use a binary search to search the sorted array.\n    # For example, we start from the middle of the array, and we use a binary search to find the maximum\n    # number in the range [start, end] where end is the end of the array.\n    # The time complexity is O(log(n)) because we need to do a binary search for every time step.\n    start, end = 0, len(arr)\n    while start < end:\n        mid = start + (end - start) / 2\n        if arr[mid] > arr[end - 1]:\n            end = mid\n        elif arr[mid] < arr[end - 1]:\n            start = mid + 1\n        else:\n            return arr[start:end]\n    return arr[start:end]\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print(\"Maximum of {} numbers in array {} is {}\".format(k, arr, maximum(arr, k)))",
      -5.58203125
    ],
    [
      "# Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    # Sort the array\n    #",
      -5.59765625
    ],
    [
      "# Using a heap to store the max elements\n    heap = []\n    # Initialize the heap\n    for i in range(len(arr)):\n        heap.append(arr[i])\n    # Pop the largest element\n    max_value = heap.pop()\n    # Add the max value into the heap\n    while len(heap) > k:\n        # Get the largest value and remove it from the heap\n        heap[0] = heap.pop()\n        # Add the largest value into the heap\n        heap.append(heap[0])\n    # Return the max value\n    return max_value\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))",
      -5.66015625
    ],
    [
      "# sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    # sort the array\n    #",
      -5.72265625
    ],
    [
      "# Your Codec\n    def maximum_k(arr, k):\n        max_k = []\n        for i in range(k):\n            max_k.append(arr[0])\n            arr.pop(0)\n        while arr:\n            max_k.append(arr[0])\n            arr.pop(0)\n        return max_k\n\n    # Your Function\n    def maximum_k_1(arr, k):\n        max_k = []\n        for i in range(k):\n            max_k.append(arr[0])\n            arr.pop(0)\n        while arr:\n            max_k.append(arr[0])\n            arr.pop(0)\n        return max_k\n\n    # Your Function\n    def maximum_k_2(arr, k):\n        max_k = []\n        for i in range(k):\n            max_k.append(arr[0])\n            arr.pop(0)\n        while arr:\n            max_k.append(arr[0])\n            arr.pop(0)\n        return max_k\n\n    # Your Function\n    def maximum_k_3(arr, k):\n        max_k = []\n        for i in range(k):\n            max_k.append(arr[0])\n            arr.pop(0)\n        while arr:\n            max_k.append(arr[0])\n            arr.pop(0)\n        return max_k\n\n    # Your Function\n    def maximum_k_4(arr, k):\n        max_k = []\n        for i in range(k):\n            max_k.append(arr[0])\n            arr.pop(0)\n        while arr:\n            max_k.append(arr[0])\n            arr.pop(0)\n        return max_k\n\n    # Your Function\n    def maximum_k_5(arr, k):\n        max_k = []\n        for i in range(k):\n            max_k.append(arr[0])\n            arr.pop(0)\n        while arr:\n            max_k.append(arr[0])\n            arr.pop(0)\n        return max_k\n\n    # Your Function",
      -5.765625
    ],
    [
      "if len(arr) <= 0 or k <= 0 or k > len(arr):\n        return []\n\n    max_k = -np.inf\n    max_arr = []\n\n    for i in range(len(arr)):\n        if i < k:\n            max_k = max(max_k, arr[i])\n            max_arr.append(arr[i])\n        else:\n            max_arr.append(max(arr[i-k+1:i+1], key=lambda x: x))\n\n    return max_arr\n\n\nif __name__ == '__main__':\n    print(maximum([-3, -4, 5], 3))\n    print(maximum([-3, -4, 5], 2))\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -5.82421875
    ],
    [
      "if not arr or not k:\n        return []\n\n    # The sorted array will be a list of length k.\n    sorted_arr = sorted(arr)\n    sorted_arr_len = len(sorted_arr)\n\n    # We need to find the maximum k elements in the sorted array.\n    # The maximum k elements are at the end of the sorted array.\n    # So we need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # The k elements are at the end of the sorted array.\n    # So we need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from\n    # the end of the array to the end.\n    # We need to find the maximum k elements in the sorted array from",
      -6.0
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return arr\n\n    max_num = arr[0]\n    max_num_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_num_index = i\n    if k == 1:\n        return [max_num]\n    else:\n        if k == len(arr):\n            return arr\n        else:\n            if max_num_index == k-1:\n                return arr[max_num_index:]\n            else:\n                return maximum(arr[max_num_index+1:k], k-1)\n\n\n# Test Cases:\n\n# arr = [-3, -4, 5]\n# k = 3\n# Output: [-4, -3, 5]\n\n# arr = [4, -4, 4]\n# k = 2\n# Output: [4, 4]\n\n# arr = [-3, 2, 1, 2, -1, -2, 1]\n# k = 1\n# Output: [2]\n\n# arr = [-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,",
      -6.03125
    ],
    [
      "# Sort the array by ascending\n    arr = sorted(arr)\n    # Find the maximum value\n    max_val = arr[0]\n    for i in range(1, k):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return [max_val] + arr[k:]\n\n\nclass Solution(object):\n    def maximumKSum(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # Sort the array by ascending\n        arr = sorted(arr)\n        # Find the maximum value\n        max_val = arr[0]\n        for i in range(1, k):\n            if arr[i] > max_val:\n                max_val = arr[i]\n        # Find the maximum value in k-th element\n        max_val = arr[k]\n        # Find the maximum value in k-th element\n        for i in range(k):\n            if arr[i] > max_val:\n                max_val = arr[i]\n        return [max_val] + arr[k:]\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))",
      -6.81640625
    ],
    [
      "res = []\n    res_len = 0\n    max_num = arr[0]\n    for i in arr:\n        if i > max_num:\n            res.append(i)\n            res_len += 1\n            max_num = i\n        else:\n            res.append(max_num)\n            res_len += 1\n            max_num = i\n\n    res.append(max_num)\n    res_len += 1\n    return res[:k]\n\n\nclass Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if not nums or len(nums) < k:\n            return []\n\n        res = []\n        max_num = nums[0]\n        window = [max_num]\n        for i in range(1, len(nums)):\n            if nums[i] > max_num:\n                max_num = nums[i]\n                window.append(max_num)\n            else:\n                window.append(max_num)\n\n        for i in range(len(nums) - k + 1):\n            max_num = nums[i]\n            for j in range(i + k, i + k + len(window)):\n                if nums[j] > max_num:\n                    max_num = nums[j]\n                    window.append(max_num)\n                else:\n                    window.append(max_num)\n\n        res.append(max(window))\n        res.extend(window)\n        return res\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n    print(Solution().maxSlidingWindow(arr, k))",
      -7.39453125
    ],
    [
      "# Note:\n    #   We can use a stack to keep track of the maximum k numbers.\n    #   Stack is O(1) space, O(k) time.\n    #   This is the same as the solution in leetcode.\n    #   Time complexity: O(n)\n    #   Space complexity: O(n)\n    #   Time complexity: O(n)\n    #   Space complexity: O(1)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(n)\n    #   Time complexity: O(n)\n    #   Space complexity: O(1)\n    #   Time complexity: O(n)\n    #   Space complexity: O(1)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space complexity: O(k)\n    #   Time complexity: O(k)\n    #   Space",
      -7.41015625
    ],
    [
      "# T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K), 8 ms (80.79%)\n    # T:O(NlogK), S:O(K),",
      -7.7421875
    ],
    [
      "if k > len(arr):\n        return arr[:k]\n\n    # If the number of elements in arr is less than k,\n    # then return the first k elements of arr.\n    if len(arr) < k:\n        return arr[:k]\n\n    # Sort the array with the first k elements of arr.\n    sorted_arr = sorted(arr[:k])\n\n    # Return the k elements of arr with the maximum values.\n    return sorted_arr[:k]\n\n\ndef main():\n    # Output: [-4, -3, 5]\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n\n    # Output: [4, 4]\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n\n    # Output: [4, 4]\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
      -7.80078125
    ],
    [
      "# O(n^2) solution\n    # https://leetcode.com/problems/maximum-subarray/discuss/49850/Java-O(n^2)-Solutions-O(n)-Space-O(1)-Time\n    # https://discuss.leetcode.com/topic/24138/java-solution-using-stack\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-Solution\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-Solution\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-Solution\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-Solution\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-Solution\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-Solution\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-Solution\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-Solution\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-Solution\n    # https://leetcode.com/problems/maximum-subarray-ii/discuss/146473/Java-O(n)-Time-Space-O(1)-",
      -7.83203125
    ],
    [
      "if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr[0]]\n\n    if len(arr) == 2:\n        return [max(arr[0], arr[1]), min(arr[0], arr[1])]\n\n    # sort the array\n    arr.sort()\n\n    # find the maximum k elements\n    ans = []\n    for i in range(k):\n        ans.append(arr[0])\n        arr.pop(0)\n\n    # add the last k elements\n    for i in range(len(arr)):\n        ans.append(arr[i])\n\n    return ans\n\n\n# Test Cases\nprint(\"Maximum k numbers in an array\")\nprint(maximum([-3, -4, 5], 3))\nprint(\"Maximum k numbers in an array\")\nprint(maximum([4, -4, 4], 2))\nprint(\"Maximum k numbers in an array\")\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
      -8.0390625
    ],
    [
      "# The idea is to find the maximum value in the array and then search for the \n    # maximum value in the array using binary search.\n    # The complexity of the solution is O(k*log(k)) = O(k*log(n)).\n    # So the complexity of the solution is O(k*log(n)) = O(k*log(k)).\n    # The complexity of the solution is O(log(k)*n) = O(k*log(k)).\n    # The complexity of the solution is O(n) = O(k*log(k)).\n    # The complexity of the solution is O(n) = O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).\n    # The complexity of the solution is O(k*log(k)).",
      -8.34375
    ],
    [
      "# Algorithm: Sort the array and then do a binary search to find the max.\n    # Note: This is a sorted array, so we can just do a binary search.\n    # The complexity of this algorithm is O(n log k).\n    # This is a dynamic programming problem, and the complexity is O(k).\n    # We can also do a binary search on the sorted array to find the max.\n    # But since the sorted array is sorted, we can use a binary search to find the max.\n    # This can be done in O(n log k) time.\n    # We can also use a dynamic programming problem to find the max.\n    # This can be done in O(n log k) time.\n    # We can also use a linear search to find the max.\n    # This can be done in O(n) time.\n    # If we want to sort the array, we can use a sort function to sort the array.\n    # This can be done in O(n log k) time.\n    # We can also use a sort function to sort the array.\n    # This can be done in O(n log k) time.\n    # We can also use a binary search to find the max.\n    # This can be done in O(n log k) time.\n    # We can also use a sort function to find the max.\n    # This can be done in O(n log k) time.\n    # We can also use a linear search to find the max.\n    # This can be done in O(n) time.\n    # We can also use a sort function to find the max.\n    # This can be done in O(n log k) time.\n    # We can also use a binary search to find the max.\n    # This can be done in O(n log k) time.\n    # We can also use a sort function to find the max.\n    # This can be done in O(n log k) time.\n    # We can also use a linear search to find the max.\n    # This can be done in O(n) time.\n    # We can also use a sort function to find the max.\n    # This can be done in O(n log k) time.\n    # We can also use a binary",
      -8.84375
    ],
    [
      "# Sort the array, then find the maximum value in the first k elements.\n    # The original array is not sorted, so we have to sort it.\n    # We can use the same method as the problem statement.\n    # The sort method is a simple bubble sort.\n    # The complexity is O(n^2), where n is the number of elements.\n    # We can use the same method to sort the array.\n    # The complexity is O(n).\n    arr = sorted(arr)\n    max_num = arr[0]\n    i = 1\n    while i < k:\n        if arr[i] > max_num:\n            max_num = arr[i]\n        i += 1\n    return [max_num] + arr[k:]\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert isinstance(maximum([-3, -4, 5], 3), list), \"TypeError\"\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5], \"Error\"\n    assert maximum([4, -4, 4], 2) == [4, 4], \"Error\"\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2], \"Error\"\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2], \"Error\"\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2], \"Error\"\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2], \"Error\"\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2], \"Error\"\n\n\nif __name__ == \"__main__\":\n    main()",
      -8.921875
    ],
    [
      "if not arr:\n        return []\n\n    # sort arr, reverse the array\n    arr = sorted(arr)\n    arr = arr[::-1]\n\n    # sort the sorted array\n    arr = sorted(arr)\n\n    # find the first k-1 elements\n    min_index = 0\n    max_index = k - 1\n    while min_index <= max_index:\n        # find the max element\n        max_index = k - 1\n        while max_index >= 0 and arr[max_index] >= arr[min_index]:\n            max_index -= 1\n        # find the min element\n        min_index = k - 1\n        while min_index >= 0 and arr[min_index] <= arr[max_index]:\n            min_index -= 1\n        # swap the elements\n        arr[min_index], arr[max_index] = arr[max_index], arr[min_index]\n        \n    return arr[:k]",
      -9.03125
    ],
    [
      "# Solution 1:\n    # sort the array and return the first k elements\n    # sort the array\n    # return the first k elements\n\n    # Solution 2:\n    # use heap to sort the array\n    # return the first k elements\n\n    # Solution 3:\n    # use heap to sort the array\n    # use a heap to sort the array\n    # return the first k elements\n    # sort the array\n    # return the first k elements\n    # sort the array\n    # return the first k elements\n    # sort the array\n    # return the first k elements\n\n    # Solution 4:\n    # use heap to sort the array\n    # use a heap to sort the array\n    # return the first k elements\n\n    # Time complexity: O(nlogn)\n    # Space complexity: O(n)\n    # n: length of the array\n    # k: the number of maximum values to find\n\n    # n^2 complexity\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O(n^2)\n    # O",
      -9.140625
    ],
    [
      "if not arr or not k:\n        return []\n    if len(arr) == 1:\n        return arr\n    if k == 1:\n        return sorted(arr)\n    if k == 2:\n        return [max(arr)]\n    if k > len(arr):\n        return []\n\n    # find the maximum value in arr[1:k]\n    max_arr = [arr[0]]\n    for i in range(1, k):\n        max_arr.append(max(arr[i:k]))\n\n    # find the maximum value in arr[k:len(arr)]\n    max_arr.append(max(arr[k:]))\n\n    return max_arr\n\nif __name__ == \"__main__\":\n    arr = [3, -4, 5, -5]\n    print(maximum(arr, 3))\n    arr = [4, -4, 4]\n    print(maximum(arr, 2))\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    print(maximum(arr, 1))\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    print(maximum(arr, 2))\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    print(maximum(arr, 2))",
      -12.15625
    ],
    [
      "if k == 0:\n        return []\n\n    if k == 1:\n        return arr[:k]\n\n    if k == 2:\n        return max(arr[:k])\n\n    # sort the array\n    arr = sorted(arr)\n\n    # get the first and last element in arr\n    first = arr[0]\n    last = arr[-1]\n\n    # get the first and last elements in arr[k:], sorted by the first element\n    first_k = arr[:k]\n    last_k = arr[-k:]\n    first_k = sorted(first_k)\n    last_k = sorted(last_k)\n\n    # get the kth largest element from the first and last elements in arr[k:], sorted by the first element\n    k_largest = first_k[k-1]\n    k_largest_k = last_k[k-1]\n\n    # get the kth largest element from the first and last elements in arr[k:], sorted by the second element\n    k_largest_k_2 = first_k[k-2]\n    k_largest_k_2_k = last_k[k-2]\n\n    # get the kth largest element from the first and last elements in arr[k:], sorted by the third element\n    k_largest_k_3 = first_k[k-3]\n    k_largest_k_3_k = last_k[k-3]\n\n    # get the kth largest element from the first and last elements in arr[k:], sorted by the fourth element\n    k_largest_k_4 = first_k[k-4]\n    k_largest_k_4_k = last_k[k-4]\n\n    # get the kth largest element from the first and last elements in arr[k:], sorted by the fifth element\n    k_largest_k_5 = first_k[k-5]\n    k_largest_k_5_k = last_k[k-5]\n\n    # get the kth largest element from the first and last elements in arr[k:], sorted by the sixth element\n    k_largest_k_6 = first_k[k-6]\n    k_largest_",
      -12.203125
    ],
    [
      "res = []\n    if not arr or not k:\n        return res\n\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < 0:\n            left = mid + 1\n        elif arr[mid] > 0:\n            right = mid - 1\n        else:\n            res.append(arr[mid])\n            left = mid + 1\n            right = mid - 1\n    res.extend(arr[left:right])\n\n    return res\n\n\n# TESTS\nfor arr, k, expected in [\n    ([-3, -4, 5], 3, [-4, -3, 5]),\n    ([-3, -4, 5], 0, []),\n    ([-3, -4, 5], 1, [-4]),\n    ([-3, -4, 5], 2, [-3, 5]),\n    ([4, -4, 4], 3, [4, 4, 4]),\n    ([4, -4, 4], 2, [4, 4]),\n    ([4, -4, 4], 1, [4]),\n]:\n    sol = Solution()\n    actual = sol.maximum(arr, k)\n    print(\"Maximum in\", arr, \"with k =\", k, \"->\", actual)\n    assert actual == expected",
      -12.2734375
    ],
    [
      "if k == 1:\n        return [arr[0]]\n    if k == 2:\n        return [max(arr)]\n    if k == 3:\n        return [max(arr), max(arr), max(arr)]\n    if k > len(arr):\n        return []\n    if k == len(arr):\n        return arr\n    mid = len(arr) / 2\n    left, right = [], []\n    while mid:\n        left.append(arr[mid - 1])\n        right.append(arr[mid])\n        mid -= 1\n    left.sort()\n    right.sort()\n    return maximum(left + right, k - len(left)) + maximum(left, k - len(left))",
      -12.6171875
    ],
    [
      "# Time:  O(n^2)\n    # Space: O(n)\n    # Brute force\n    # O(n^2) time\n    # O(n) space\n    def helper(arr, k, i, j):\n        if i > j:\n            return arr[i]\n        mid = (i + j) / 2\n        if arr[mid] > arr[i]:\n            return helper(arr, k, mid + 1, j)\n        elif arr[mid] < arr[i]:\n            return helper(arr, k, i, mid + 1)\n        else:\n            return arr[mid]\n    return helper(arr, k, 0, len(arr) - 1)\n\n\n# TESTS\nfor arr, k, expected in tests:\n    actual = maximum(arr, k)\n    print(\"maximum({}, {}) = {}\".format(arr, k, expected))\n    assert actual == expected",
      -12.78125
    ],
    [
      "if k == 0:\n        return []\n    # Base Case\n    if k == 1:\n        return [max(arr)]\n    # Recursive Case\n    return maximum(arr[:k], k) + maximum(arr[k:], k)\n\n\nclass Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # Sort the array\n        nums.sort()\n\n        # Find the k-th largest number\n        largest_num = nums[0]\n        largest_idx = 0\n\n        for i in range(1, len(nums)):\n            if nums[i] > largest_num:\n                largest_idx = i\n                largest_num = nums[i]\n\n        # Find the k-th largest number in the sorted array\n        idx = 0\n        ret = []\n        while idx < len(nums) and k > 0:\n            ret.append(nums[idx])\n            idx += 1\n            k -= 1\n\n        # Add the largest number to the end of the list\n        ret.append(largest_num)\n\n        return ret\n\n\nif __name__ == \"__main__\":\n    arr = [-3, -4, 5]\n    k = 3\n    print maximum(arr, k)",
      -13.2109375
    ],
    [
      "# Sort the array\n    arr.sort()\n\n    # We'll be using a binary search to find the kth largest element\n    # So we'll use a helper function to find the kth largest element\n    # in the sorted array.\n    # The helper function will return the index of the kth largest element, \n    # or -1 if there is no kth largest element\n    def find_kth_largest(arr, k):\n        # We'll need to know the length of the array, so we'll\n        # calculate it here.\n        length = len(arr)\n        # We'll keep track of our current index, since we're going\n        # to be using binary search to find the kth largest element\n        # in the sorted array.\n        current_index = 0\n\n        # This is the minimum index we'll need to check\n        min_index = 0\n\n        # This is the maximum index we'll need to check\n        max_index = length - 1\n\n        # We'll keep track of the largest element we've found\n        # so we can return it.\n        largest_element = arr[min_index]\n\n        # This is the \"k\" we'll be using to find the kth largest element\n        # in the array.\n        k = k - 1\n\n        # We'll keep looping until we've found the kth largest element\n        # or until we've checked all the elements.\n        while current_index < length:\n\n            # We'll use the binary search function to find the kth largest\n            # element in the array.\n            # We'll use a binary search to find the kth largest element in the \n            # array. We'll keep track of the largest element found\n            # so we can return it when we're done.\n            # We'll use a helper function to find the kth largest element.\n            # This function will return the index of the kth largest element\n            # in the sorted array, or -1 if there is no kth largest element.\n            current_index = binary_search(arr, k, min_index, max_index)\n            if current_index!= -1:\n                # We found the kth largest element\n                # so we'll return it to the caller\n                return largest_element\n\n            # We didn",
      -16.421875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}