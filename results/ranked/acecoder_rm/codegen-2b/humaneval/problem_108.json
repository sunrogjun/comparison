{
  "problem": {
    "task_id": "HumanEval/108",
    "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
    "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "count_nums",
    "docstring": "",
    "problem_id": 108
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return sum([sum(map(int, str(x))) for x in arr])",
      3.931640625
    ],
    [
      "return sum(map(sum, arr)) > 0\n\ndef find_sum(arr):\n    \"\"\"\n    Write a function find_sum which takes an array of integers and returns\n    the sum of all numbers in the array.\n    >>> find_sum([]) == 0\n    >>> find_sum([-1, 11, -11]) == -1\n    >>> find_sum([1, 1, 2]) == 3\n    \"\"\"\n    return sum(arr)\n\ndef main():\n    arr = [1, 1, 2]\n    assert find_sum(arr) == 3\n\nif __name__ == '__main__':\n    main()",
      3.037109375
    ],
    [
      "return sum(1 for num in arr if num > 0)\n\n\nif __name__ == \"__main__\":\n    print(count_nums([-1, 11, -11]))\n    print(count_nums([1, 1, 2]))\n    print(count_nums([1, 2, 3]))",
      2.53125
    ],
    [
      "return sum(map(sum, arr)) > 0\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, -2, -3, -4, -5]\n    print(count_nums(arr))\n\nif __name__ == \"__main__\":\n    main()",
      2.455078125
    ],
    [
      "return sum([n * (10 ** (len(str(n)) - 1)) for n in arr if str(n)[-1] == '1'])\n\nif __name__ == '__main__':\n    main()",
      2.453125
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.3515625
    ],
    [
      "return sum(x>0 for x in arr)\n\ndef count_nums_2(arr):\n    \"\"\"\n    Write a function count_nums_2 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_2([]) == 0\n    >>> count_nums_2([-1, 11, -11]) == 1\n    >>> count_nums_2([1, 1, 2]) == 3\n    \"\"\"\n    return sum(x>0 for x in arr)\n\ndef count_nums_3(arr):\n    \"\"\"\n    Write a function count_nums_3 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_3([]) == 0\n    >>> count_nums_3([-1, 11, -11]) == 1\n    >>> count_nums_3([1, 1, 2]) == 3\n    \"\"\"\n    return sum(x>0 for x in arr)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.6005859375
    ],
    [
      "return sum(map(sum, arr)) > 0\n\nif __name__ == \"__main__\":\n    arr = [-1, -11, 1, 1, 2]\n    print(count_nums(arr))",
      1.56640625
    ],
    [
      "return sum(x > 0 for x in arr)\n\n\nif __name__ == \"__main__\":\n    print(count_nums([-1, 11, -11]))\n    print(count_nums([1, 1, 2]))\n    print(count_nums([1, 2, 3]))",
      1.4443359375
    ],
    [
      "n = len(arr)\n    for i in range(n):\n        if arr[i] > 0:\n            continue\n        else:\n            for j in range(i + 1, n):\n                if arr[j] < 0:\n                    arr[i] += arr[j]\n                    arr[j] = 0 - arr[j]\n                    break\n            else:\n                arr[i] = 0\n    return sum(arr)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.134765625
    ],
    [
      "count = 0\n    for num in arr:\n        if num < 0:\n            num = num * -1\n        sum_digits = 0\n        while num:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_nums([]) == 0, \"empty array\"\n    assert count_nums([-1, 11, -11]) == 1, \"one element\"\n    assert count_nums([1, 1, 2]) == 3, \"three elements\"\n    assert count_nums([-1, -1, -1]) == 0, \"negative number\"\n    assert count_nums([1, 2, 3]) == 3, \"duplicate element\"",
      0.90771484375
    ],
    [
      "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        if num > 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.89453125
    ],
    [
      "total = 0\n    for num in arr:\n        if num < 0:\n            num = num * -1\n        total += int(str(num)[-1])\n    return total\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.826171875
    ],
    [
      "return sum(1 for num in arr if num > 0)",
      0.79833984375
    ],
    [
      "result = 0\n    for num in arr:\n        if num > 0:\n            result += num % 10\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(count_nums([-1, 11, -11]))\n    print(count_nums([1, 1, 2]))\n    print(count_nums([1, 1, -1]))\n    print(count_nums([-1, -11, 11]))\n    print(count_nums([1, 2, 3]))\n    print(count_nums([-1, -11, -11]))",
      0.73974609375
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\ndef main():\n    arr = [-1, 11, -11]\n    print(count_nums(arr))\n\nif __name__ == '__main__':\n    main()",
      0.444091796875
    ],
    [
      "count = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            count += arr[i]\n        else:\n            count += arr[i] * -1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.162353515625
    ],
    [
      "return sum([sum(int_arr) > 0 for int_arr in arr])",
      0.1473388671875
    ],
    [
      "return sum(map(lambda x: sum(map(lambda y: int(y), str(x))), arr))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.0699462890625
    ],
    [
      "return sum(map(lambda x: int(x[:x.index('-')]), arr))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.0180816650390625
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_nums([-1, 11, -11]))\n    print(count_nums([1, 1, 2]))\n    print(count_nums([1, 2, 3]))\n    print(count_nums([1, 2, 3, 4]))\n    print(count_nums([1, 2, 3, 4, 5]))\n    print(count_nums([1, 2, 3, 4, 5, 6]))",
      -0.5595703125
    ],
    [
      "return sum(1 for i in arr if sum(int(j) for j in str(i)) > 0)\n\ndef main():\n    print(count_nums([-1, 11, -11]))\n\nif __name__ == \"__main__\":\n    main()",
      -0.72216796875
    ],
    [
      "count = 0\n    for num in arr:\n        if num < 0:\n            num += 10**9\n        if sum(map(int, str(num))) > 0:\n            count += 1\n    return count",
      -0.85595703125
    ],
    [
      "count = 0\n    for i in arr:\n        if i < 0:\n            for j in range(i):\n                if i % 10 == 0:\n                    count += 1\n                i = i / 10\n        else:\n            i = i\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    try:\n        while True:\n            n = input('Please enter a number: ')\n            if n == 'quit':\n                break\n            print(count_nums(int(n)))\n    except ValueError:\n        print('Please enter a number.')",
      -0.85595703125
    ],
    [
      "return len([x for x in arr if sum(map(int, str(x))) > 0])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "total = 0\n    for num in arr:\n        total += num\n    return total",
      -0.85595703125
    ],
    [
      "return sum(map(int, list(map(str, arr)))) > 0",
      -0.85595703125
    ],
    [
      "return sum(map(lambda x: sum(map(int, str(x))), arr)) > 0\n\ndef main():\n    print(count_nums([1, -1, -1, 1, -1, -1, 1]))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "return sum([1 for x in arr if x > 0])",
      -0.85693359375
    ],
    [
      "return sum(map(lambda x: int(x), filter(lambda x: str(x)[-1] == \"1\", arr)))\n\n\ndef main():\n    print count_nums([-1, 11, -11])\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "return sum(map(sum, arr))",
      -0.85693359375
    ],
    [
      "return sum(map(sum, arr))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return sum(map(sum, filter(lambda x: x > 0, arr)))",
      -0.857421875
    ],
    [
      "return sum(x for x in arr if x > 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return sum(x for x in arr if sum(map(int, str(x))) > 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return sum(1 for n in arr if sum(int(c) for c in str(n)) > 0)\n\nif __name__ == '__main__':\n    print(count_nums([-1, 11, -11]))",
      -0.857421875
    ],
    [
      "return sum(map(sum, arr))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "sum_digits = 0\n    for num in arr:\n        sum_digits += num\n    return sum_digits > 0",
      -0.85791015625
    ],
    [
      "return sum(1 for i in arr if i > 0 and i % 10 == 0)\n\n# Note:\n# A. If a number is negative, then its first signed digit will be negative:\n#    e.g. -123 has signed digits -1, 2, and 3.\n# B. If a number is positive, then its first signed digit will be positive:\n#    e.g. 123 has signed digits 1, 2, and 3.",
      -0.85791015625
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\ndef main():\n    print(\"Part 1:\", count_nums([-1, 11, -11]))\n    print(\"Part 2:\", count_nums([1, 1, 2]))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "return sum([1 for x in arr if sum(map(int, str(x))) > 0])\n\ndef main():\n    print count_nums([1, -1, 2, -2, 4, -4, 6, -6])\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "total = 0\n    for num in arr:\n        if num > 0:\n            total += num\n    return total\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return sum(map(sum, arr)) > 0\n\ndef main():\n    \"\"\"\n    Write a function print_nums which takes an array of integers and returns a\n    string.\n    >>> print_nums([1, 2, 3, 4])\n    1 2 3 4\n    >>> print_nums([-1, 11, -11])\n    -1 2 3\n    >>> print_nums([1, 1, 2])\n    1 1 2\n    \"\"\"\n    arr = [int(x) for x in input().split()]\n    print(arr)\n    print(count_nums(arr))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "count = 0\n    for i in arr:\n        if i > 0:\n            count += int(str(i)[::-1])\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return sum(map(sum, arr))\n\nif __name__ == \"__main__\":\n    print(count_nums([-1, 11, -11, -123, -11, 1, -11]))",
      -0.8583984375
    ],
    [
      "return sum([1 for _ in arr if sum([int(c) for c in str(i)]) > 0])",
      -0.8583984375
    ],
    [
      "return sum(map(len, filter(lambda x: sum(map(int, x)) > 0, arr)))",
      -0.8583984375
    ],
    [
      "return sum(map(sum, zip(arr, range(1, 10)))) > 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            continue\n        # If num is negative, then first digit is negative\n        if num < 0:\n            num = -num\n        # num now has first digit positive\n        digits = 0\n        while num > 0:\n            digits += 1\n            num /= 10\n        if digits > 1:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(count_nums([1, 1, 2]))\n    print(count_nums([1, -1, 2]))\n    print(count_nums([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))",
      -0.8583984375
    ],
    [
      "return len(filter(lambda x: sum(map(int, str(x))) > 0, arr))",
      -0.8583984375
    ],
    [
      "return sum(map(sum, arr))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        else:\n            for i in range(1, len(str(num))):\n                if num < 0:\n                    num = num * -1\n                if num % 10 == 0:\n                    num = num / 10\n                else:\n                    break\n        if num == 0:\n            break\n    return count\n\nprint count_nums([1, 2, 3, -1, -2, -3])\nprint count_nums([1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1])",
      -0.8583984375
    ],
    [
      "return sum(map(sum, arr)) > 0",
      -0.8583984375
    ],
    [
      "sum_nums = sum(arr)\n    if sum_nums == 0:\n        return 0\n    # If the number is negative, then the first digit will be negative.\n    # If the number is positive, then the first digit will be positive.\n    # We need to subtract 1 from the sum_nums to make sure that the first\n    # digit is positive.\n    if sum_nums > 0:\n        sum_nums -= 1\n    return sum(arr) > 0",
      -0.85888671875
    ],
    [
      "return sum(i > 0 and (i % 10) == 0 for i in arr)\n\n\nif __name__ == '__main__':\n    print(count_nums([-1, 11, -11]))",
      -0.85888671875
    ],
    [
      "count = 0\n    for i in arr:\n        if i < 0:\n            count += 1\n        for j in range(0, len(str(i))):\n            if i % 10 == 0:\n                return count\n            if i % j == 0:\n                return count\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "count = 0\n    for i in arr:\n        if i < 0:\n            i = i * -1\n        while i:\n            count += 1\n            i = i // 10\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(map(sum, arr)) > 0",
      -0.85888671875
    ],
    [
      "return sum([int(d) for d in arr])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(map(lambda x: int(str(x)[::-1][:1]), arr))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(count_nums([-1, 11, -11]))",
      -0.85888671875
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        else:\n            count += num\n    return count\n\ndef main():\n    print(count_nums([1, 1, 2]))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "sum_digits = 0\n    for num in arr:\n        sum_digits += num\n    return sum_digits\n\nif __name__ == \"__main__\":\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3",
      -0.86083984375
    ],
    [
      "return sum(1 for i in arr if sum(int(j) for j in str(i)) > 0)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "return sum(map(sum, arr))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.91259765625
    ],
    [
      "return sum(x > 0 for x in arr)",
      -0.9970703125
    ],
    [
      "count = 0\n    for num in arr:\n        if num < 0:\n            for i in range(num // 10):\n                count += 1\n        else:\n            for i in range(num // 10):\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.5654296875
    ],
    [
      "return sum(map(sum, arr)) > 0\n\ndef main():\n    \"\"\"\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()",
      -1.6640625
    ],
    [
      "nums = [0] * len(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            nums[i] += arr[i][j]\n    return sum(nums)\n\nif __name__ == \"__main__\":\n    print(count_nums([-1, 11, -11]))\n    print(count_nums([1, 1, 2]))\n    print(count_nums([1, 2, 3]))",
      -1.8154296875
    ],
    [
      "return sum([abs(num) for num in arr if num > 0])\n\n\nif __name__ == \"__main__\":\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3",
      -1.8203125
    ],
    [
      "# TODO: write a function that takes an array of integers and returns the\n    # number of elements with a sum of digits > 0.\n    return 0\n\n# Tests\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3",
      -2.3984375
    ],
    [
      "count = 0\n    for i in arr:\n        if i > 0:\n            if i % 10 == 0:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_nums([1, 1, 2]) == 3, \"1, 1, 2\"\n    assert count_nums([-1, 11, -11]) == 1, \"1, 11, -11\"\n    assert count_nums([-1, -2, -3]) == 2, \"1, -2, -3\"\n    assert count_nums([-1, -11, -12]) == 0, \"1, -11, -12\"\n    assert count_nums([-1, -11, -12, -13]) == 0, \"1, -11, -12, -13\"",
      -2.498046875
    ],
    [
      "return sum(map(lambda x: sum(map(int, str(x))), arr)) > 0\n\ndef main():\n    \"\"\"\n    Write a function to find the number of elements with the sum of digits > 0\n    in an array.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    print(count_nums([-1, 11, -11]))\n\nif __name__ == \"__main__\":\n    main()",
      -2.689453125
    ],
    [
      "return sum(map(sum, arr)) > 0\n\nif __name__ == \"__main__\":\n    arr = [int(x) for x in input().split()]\n    print(count_nums(arr))",
      -3.271484375
    ],
    [
      "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        for i in range(len(str(num))):\n            if num >= 10:\n                num /= 10\n            if num < 10:\n                num *= 10\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.419921875
    ],
    [
      "sum_nums = 0\n    for num in arr:\n        sum_nums += num\n    return sum(num > 0 for num in arr)\n\ndef main():\n    \"\"\"\n    Write a function solve which takes an integer and returns the sum of all\n    integers which have a sum of digits > 0.\n    >>> solve(0)\n    0\n    >>> solve(1)\n    1\n    >>> solve(2)\n    2\n    >>> solve(3)\n    3\n    >>> solve(4)\n    4\n    >>> solve(5)\n    5\n    >>> solve(6)\n    6\n    >>> solve(7)\n    7\n    >>> solve(8)\n    8\n    >>> solve(9)\n    9\n    >>> solve(10)\n    10\n    >>> solve(11)\n    11\n    >>> solve(12)\n    12\n    >>> solve(13)\n    13\n    >>> solve(14)\n    14\n    >>> solve(15)\n    15\n    >>> solve(16)\n    16\n    >>> solve(17)\n    17\n    >>> solve(18)\n    18\n    >>> solve(19)\n    19\n    >>> solve(20)\n    20\n    >>> solve(21)\n    21\n    >>> solve(22)\n    22\n    >>> solve(23)\n    23\n    >>> solve(24)\n    24\n    >>> solve(25)\n    25\n    >>> solve(26)\n    26\n    >>> solve(27)\n    27\n    >>> solve(28)\n    28\n    >>> solve(29)\n    29\n    >>> solve(30)\n    30\n    >>> solve(31)\n    31\n    >>> solve(32)\n    32\n    >>> solve(33)\n    33\n    >>> solve(34)\n    34\n    >>> solve(35)\n    35\n    >>> solve(36)\n    36\n    >>> solve(37)\n    37\n    >>> solve(38)\n    38\n    >>> solve(39)\n    39\n    >>> solve(40)\n    40\n    >>> solve(41)\n    41\n    >>> solve(42)\n    42\n    >>> solve(43)\n    43",
      -4.125
    ],
    [
      "return sum([len(str(x)) for x in arr])\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_nums([1, 1, 2]) == 3, \"1, 1, 2\"\n    assert count_nums([-1, 11, -11]) == 1, \"negative numbers\"\n    assert count_nums([-1, -11, -111, -1111]) == 3, \"negative numbers\"\n    assert count_nums([-2, -1, -11, -111, -1111]) == 2, \"negative numbers\"\n    assert count_nums([0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0, \"0\"\n    assert count_nums([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
      -4.35546875
    ],
    [
      "return sum(map(sum, arr)) > 0\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.55859375
    ],
    [
      "return sum([sum(int_arr) > 0 for int_arr in arr])\n\nif __name__ == '__main__':\n    print(count_nums([-1, 11, -11]))",
      -4.62890625
    ],
    [
      "count = 0\n    for num in arr:\n        if num < 0:\n            num = num * -1\n        count += num > 0 and 1 or 0\n    return count\n\n\ndef main():\n    \"\"\"\n    >>> count_nums([]) == 0\n    True\n    >>> count_nums([-1, 11, -11]) == 1\n    True\n    >>> count_nums([1, 1, 2]) == 3\n    True\n    >>> count_nums([1, -1, 2]) == 2\n    True\n    >>> count_nums([1, 1, 2, -1, 2]) == 3\n    True\n    >>> count_nums([1, 2, 3, 4, 5]) == 1\n    True\n    >>> count_nums([-1, -2, -3, -4, -5]) == 3\n    True\n    >>> count_nums([-1, -2, -3, -4, -5, -6]) == 4\n    True\n    >>> count_nums([-1, -2, -3, -4, -5, -6, -7]) == 5\n    True\n    >>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8]) == 6\n    True\n    >>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 7\n    True\n    >>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 8\n    True\n    >>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == 9\n    True\n    >>> count_nums([1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == 9\n    True\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    main",
      -4.6328125
    ],
    [
      "count = 0\n    for num in arr:\n        if num >= 0:\n            count += int(str(num))\n        else:\n            count += int(str(num)[::-1])\n    return count\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_nums([1, 1, 2]) == 3, \"1 + 1 + 2\"\n    assert count_nums([-1, 11, -11]) == 1, \"-1 + 11 + -11\"\n    assert count_nums([1, -1, 2]) == 3, \"1 - 1 + 2\"\n    assert count_nums([-1, -11, -12]) == 1, \"-1 - 11 - 12\"\n    assert count_nums([-1, -11, -12, 1, 11, 12]) == 5, \"-1 - 11 - 12 + 1 + 11 + 12\"",
      -4.859375
    ],
    [
      "return sum([int(x) for x in arr if is_digit(x)])\n\ndef is_digit(x):\n    \"\"\"\n    >>> is_digit(1)\n    False\n    >>> is_digit(0)\n    True\n    >>> is_digit(-1)\n    True\n    >>> is_digit(0.0)\n    False\n    >>> is_digit('0')\n    True\n    >>> is_digit('1')\n    True\n    \"\"\"\n    return isinstance(x, int) and x >= 0\n\ndef is_prime(x):\n    \"\"\"\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(12)\n    True\n    \"\"\"\n    if x == 2:\n        return True\n    elif x < 2:\n        return False\n    elif x % 2 == 0:\n        return False\n    elif x == 3:\n        return True\n    elif x % 3 == 0:\n        return False\n    else:\n        return all([is_prime(i) for i in x_range(5, x, 6)])\n\ndef is_prime_within_range(x, low, high):\n    \"\"\"\n    >>> is_prime_within_range(2, 1, 10)\n    False\n    >>> is_prime_within_range(3, 1, 10)\n    True\n    >>> is_prime_within_range(7, 1, 10)\n    False\n    >>> is_prime_within_range(12, 1, 10)\n    True\n    >>> is_prime_within_range(12, 2, 10)\n    False\n    >>> is_prime_within_range(12, 3, 10)\n    True\n    >>> is_prime_within_range(12, 4, 10)\n    False\n    >>> is_prime_within_range(12, 5, 10)\n    True\n    >>> is_prime_within_range(12, 6, 10)\n    False\n    >>> is_prime_within_range(12, 7, 10)\n    True\n    \"\"\"\n    if x < low or x > high:",
      -4.8984375
    ],
    [
      "return sum(map(sum, arr)) > 0\n\ndef main():\n    \"\"\"\n    Main program that calls the count_nums() function.\n    \"\"\"\n    arr = [random.randint(-100, 100) for i in range(1000)]\n    print(\"%d numbers\" % len(arr))\n    print(\"%d numbers with a sum of digits > 0\" % count_nums(arr))\n\nif __name__ == '__main__':\n    main()",
      -4.93359375
    ],
    [
      "nums = sum(arr)\n    if nums > 0:\n        return 0\n    else:\n        return sum([count_nums(a) for a in arr if a > 0])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.53125
    ],
    [
      "return sum([sum(digit_nums) for digit_nums in arr])\n\nif __name__ == '__main__':\n    print(count_nums([-1, 11, -11]))\n    print(count_nums([1, 1, 2]))",
      -5.625
    ],
    [
      "count = 0\n    for i in arr:\n        if sum(str(i)) > 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.6484375
    ],
    [
      "return sum(1 for i in arr if sum(i) > 0)\n\n\n# Tests\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1,",
      -6.171875
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\ndef print_all_nums(arr):\n    \"\"\"\n    Write a function print_all_nums which takes an array of integers and prints\n    all the elements with a sum of digits > 0.\n    >>> print_all_nums([])\n    []\n    >>> print_all_nums([-1, 11, -11])\n    [-1, 11, -11]\n    >>> print_all_nums([1, 1, 2])\n    [1, 1, 2]\n    >>> print_all_nums([1, 1, -1])\n    [1, 1, -1]\n    \"\"\"\n    for num in arr:\n        if num > 0:\n            print(num)\n\ndef main():\n    \"\"\"\n    Write a function print_all_nums which takes an array of integers and prints\n    all the elements with a sum of digits > 0.\n    >>> print_all_nums([])\n    []\n    >>> print_all_nums([-1, 11, -11])\n    [-1, 11, -11]\n    >>> print_all_nums([1, 1, 2])\n    [1, 1, 2]\n    >>> print_all_nums([1, 1, -1])\n    [1, 1, -1]\n    \"\"\"\n    arr = [int(i) for i in input().split()]\n    print_all_nums(arr)\n\nif __name__ == '__main__':\n    main()",
      -6.78125
    ],
    [
      "return sum(map(lambda x: sum(map(int, str(x))), arr))\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for\n    # auto-testing\n    assert count_nums([1]) == 1, \"Basic case\"\n    assert count_nums([-1]) == 1, \"Negative numbers\"\n    assert count_nums([-11, -111, -1111]) == 3, \"Negative numbers\"\n    assert count_nums([-1, 11, -11]) == 3, \"Negative numbers\"\n    assert count_nums([-1, 1, -1]) == 2, \"Negative numbers\"\n    assert count_nums([-1, 1, 1]) == 2, \"Negative numbers\"\n    assert count_nums([-1, -1, 1]) == 2, \"Negative numbers\"\n    assert count_nums([-1, -1, -1]) == 2, \"Negative numbers\"\n    assert count_nums([1, -1, 1, -1]) == 3, \"Negative numbers\"\n    assert count_nums([1, 1, 1, 1, 1, 1]) == 4, \"Negative numbers\"\n    assert count_nums([1, -1, 1, -1, 1, -1]) == 4, \"Negative numbers\"\n    assert count_nums([-1, 1, -1, 1, -1, -1]) == 4, \"Negative numbers\"\n    assert count_nums([-1, 1, -1, 1, -1, -1]) == 4, \"Negative numbers\"\n    assert count_nums([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 4, \"Negative numbers\"",
      -7.7265625
    ],
    [
      "count = 0\n    for i in arr:\n        if i > 0:\n            if i < 10:\n                count += 1\n            else:\n                count += int(str(i)[::-1])\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -7.83203125
    ],
    [
      "return sum(map(sum, arr)) > 0\n\n\ndef count_nums_negative(arr):\n    \"\"\"\n    Write a function count_nums_negative which takes an array of integers and\n    returns the number of elements which has a sum of digits > 0 and is\n    negative.\n    >>> count_nums_negative([]) == 0\n    >>> count_nums_negative([-1, 11, -11]) == 1\n    >>> count_nums_negative([1, 1, 2]) == 2\n    \"\"\"\n    return sum(map(sum, arr)) > 0 and sum(map(abs, arr)) < 0\n\n\ndef count_nums_positive(arr):\n    \"\"\"\n    Write a function count_nums_positive which takes an array of integers and\n    returns the number of elements which has a sum of digits > 0 and is\n    positive.\n    >>> count_nums_positive([]) == 0\n    >>> count_nums_positive([-1, 11, -11]) == 1\n    >>> count_nums_positive([1, 1, 2]) == 2\n    \"\"\"\n    return sum(map(sum, arr)) > 0 and sum(map(abs, arr)) > 0\n\n\ndef count_nums_positive_negative(arr):\n    \"\"\"\n    Write a function count_nums_positive_negative which takes an array of\n    integers and returns the number of elements which has a sum of digits > 0\n    and is positive or negative.\n    >>> count_nums_positive_negative([]) == 0\n    >>> count_nums_positive_negative([-1, 11, -11]) == 1\n    >>> count_nums_positive_negative([1, 1, 2]) == 2\n    \"\"\"\n    return sum(map(sum, arr)) > 0 and sum(map(abs, arr)) > 0 and sum(map(abs, arr)) < 0\n\n\ndef main():\n    print(count_nums([-1, 11, -11]))\n    print(count_nums_negative([-1, 11, -11]))\n    print(count_nums_positive([-1, 11, -11]))\n    print(count_nums_positive_negative([-1",
      -8.0625
    ],
    [
      "count = 0\n    for i in arr:\n        if i > 0:\n            count += int(str(i)[::-1])\n        else:\n            count += int(str(i)[::-1][::-1])\n    return count\n\ndef count_nums_recursive(arr):\n    \"\"\"\n    Write a function count_nums_recursive which takes an array of integers and\n    returns the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_recursive([]) == 0\n    >>> count_nums_recursive([-1, 11, -11]) == 1\n    >>> count_nums_recursive([1, 1, 2]) == 3\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        count = arr[0]\n        for i in arr[1:]:\n            if i > 0:\n                count += int(str(i)[::-1])\n            else:\n                count += int(str(i)[::-1][::-1])\n        return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(count_nums([1, 2, 3, 4]))",
      -8.9765625
    ],
    [
      "count = 0\n    for num in arr:\n        if sum(str(num)) > 0:\n            count += 1\n    return count\n\n\ndef main():\n    \"\"\"\n    Test cases\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    assert count_nums([1, 1, 1]) == 1\n    assert count_nums([1, 1, 0]) == 1\n    assert count_nums([0, 1, 0]) == 1\n    assert count_nums([0, 0, 0]) == 0\n    assert count_nums([0, 0, 1]) == 1\n    assert count_nums([0, 1, 1]) == 2\n    assert count_nums([0, 1, 0]) == 1\n    assert count_nums([-1, -1, -1]) == 1\n    assert count_nums([-1, -1, 0]) == 1\n    assert count_nums([0, -1, 0]) == 1\n    assert count_nums([-1, -1, -1]) == 2\n    assert count_nums([-1, -1, 0]) == 1\n    assert count_nums([0, -1, 0]) == 1\n    assert count_nums([-1, -1, -1]) == 2\n    assert count_nums([-1, -1, 0]) == 1\n    assert count_nums([0, -1, 0]) == 1\n    assert count_nums([-1, -1, -1]) == 2\n    assert count_nums([-1, -1, 0]) == 1\n    assert count_nums([0, -1, 0]) == 1\n    assert count_nums([-1, -1, -1]) == 2\n    assert count_nums([-1, -1, 0]) == 1\n\n\nif __name__ == '__main",
      -8.984375
    ],
    [
      "nums = []\n    for num in arr:\n        if num == 0:\n            continue\n        if num < 0:\n            num = -num\n            s = 1\n        else:\n            s = 0\n        while num!= 0:\n            if num % 10 == 0:\n                s += 1\n            num = num // 10\n        nums.append(s)\n    return sum(nums)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -9.15625
    ],
    [
      "return sum(map(sum, zip(arr, range(1, len(arr) + 1)))) > 0\n\ndef is_palindrome(num):\n    \"\"\"\n    Write a function is_palindrome which takes an integer as an argument and\n    returns True if the number is a palindrome and False if not.\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(12)\n    False\n    >>> is_palindrome(-5)\n    False\n    >>> is_palindrome(0)\n    True\n    >>> is_palindrome(42)\n    False\n    >>> is_palindrome(-42)\n    True\n    \"\"\"\n    return num == reverse(num)\n\ndef reverse(num):\n    \"\"\"\n    Write a function reverse which takes an integer as an argument and returns\n    the number with all digits in reverse order.\n    >>> reverse(5)\n    5\n    >>> reverse(12)\n    12\n    >>> reverse(-5)\n    -5\n    >>> reverse(0)\n    0\n    >>> reverse(42)\n    42\n    >>> reverse(-42)\n    -42\n    \"\"\"\n    return sum(map(lambda x: x * 10, list(reversed(str(num))))). // 10\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -9.4375
    ],
    [
      "sum_nums = sum(arr)\n    for i in range(len(arr)):\n        if sum_nums > 0:\n            break\n        sum_nums -= arr[i]\n    return i + 1\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -10.5859375
    ],
    [
      "return sum(map(int, str(arr))) > 0\n\n\ndef main():\n    \"\"\"\n    Write a function sum_nums which takes an array of integers and returns\n    the sum of all elements.\n    >>> sum_nums([]) == 0\n    >>> sum_nums([-1, 11, -11]) == -12\n    >>> sum_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(map(int, str(arr)))\n\n\nif __name__ == '__main__':\n    print(main())",
      -12.2421875
    ],
    [
      "return sum(map(lambda x: sum(map(int, str(x))), arr))\n\ndef count_nums_with_negative(arr):\n    \"\"\"\n    Write a function count_nums_with_negative which takes an array of integers\n    and returns the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_with_negative([]) == 0\n    >>> count_nums_with_negative([-1, 11, -11]) == 1\n    >>> count_nums_with_negative([1, 1, 2]) == 3\n    \"\"\"\n    return sum(map(lambda x: sum(map(lambda y: sum(map(int, str(y))), x)), arr))\n\ndef count_nums_with_negative_and_nonzero(arr):\n    \"\"\"\n    Write a function count_nums_with_negative_and_nonzero which takes an array\n    of integers and returns the number of elements which has a sum of digits > 0\n    and at least one non-zero digit.\n    >>> count_nums_with_negative_and_nonzero([]) == 0\n    >>> count_nums_with_negative_and_nonzero([-1, 11, -11]) == 1\n    >>> count_nums_with_negative_and_nonzero([1, 1, 2]) == 2\n    \"\"\"\n    return sum(map(lambda x: sum(map(lambda y: sum(map(int, str(y))), x)), arr))\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n\ndef test_count_nums_with_negative():\n    assert count_nums_with_negative([]) == 0\n    assert count_nums_with_negative([-1, 11, -11]) == 1\n    assert count_nums_with_negative([1, 1, 2]) == 3\n\ndef",
      -13.6484375
    ],
    [
      "nums = len(arr)\n    for i in range(nums):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n        if arr[i] > 0:\n            arr[i] = int(arr[i])\n    for i in range(nums):\n        if arr[i] > 0:\n            for j in range(1, len(arr[i]) + 1):\n                if arr[i] % 10 == 0:\n                    break\n                arr[i] = arr[i] / 10\n    return nums\n\ndef main():\n    arr = [1, 1, 2]\n    print(count_nums(arr))\n\nif __name__ == '__main__':\n    main()",
      -13.9921875
    ],
    [
      "count = 0\n    for x in arr:\n        if x < 0:\n            x = -x\n        if x == 0:\n            continue\n        sum = 0\n        while x:\n            sum += x % 10\n            x //= 10\n        if sum > 0:\n            count += 1\n    return count\n\n#------------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) >= 2:\n        test_case = int(sys.argv[1])\n    else:\n        test_case = 1\n    sys.stdout.write(\"Test case #%d\\n\" % test_case)\n    test_case = test_case\n    while test_case:\n        test_case -= 1\n        nums = [random.randrange(0, 10) for i in range(10)]\n        print \"nums = \", nums\n        print \"count_nums(nums) = \", count_nums(nums)",
      -16.0
    ],
    [
      "result = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        for i in range(1, int(log10(num)) + 1):\n            if num % (10 ** i) >= 10:\n                result += 1\n    return result\n\n\ndef main():\n    print(count_nums([-1, 11, -11]))\n\nif __name__ == '__main__':\n    main()",
      -16.140625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}