{
  "problem": {
    "task_id": "HumanEval/157",
    "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
    "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n",
    "entry_point": "right_angle_triangle",
    "docstring": "",
    "problem_id": 157
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)\n\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    '''\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\n\ndef main():\n    a = int(input('Enter the first side of the triangle: '))\n    b = int(input('Enter the second side of the triangle: '))\n    c = int(input('Enter the third side of the triangle: '))\n    if right_angle_triangle(a, b, c):\n        print('The triangle is right-angled.')\n    else:\n        print('The triangle is not right-angled.')\n    if is_triangle(a, b, c):\n        print('The triangle is a triangle.')\n    else:\n        print('The triangle is not a triangle.')\n\n\nif __name__ == '__main__':\n    main()",
      4.390625
    ],
    [
      "# return True if the three sides of a triangle form a right-angled triangle\n    return ((a+b > c and a+c > b and b+c > a) or (a+b > c and a+c > b and c+b > a) or (a+b > c and a+c > b and b+c > a))\n\n\ndef main():\n    '''\n    Read the sides of a triangle from the user and calculate the area of the\n    triangle\n    '''\n    a = input(\"What is the length of the side of the triangle A? \")\n    b = input(\"What is the length of the side of the triangle B? \")\n    c = input(\"What is the length of the side of the triangle C? \")\n    area = 0.5*(a+b+c)\n    print(\"The area of the triangle is {}\".format(area))\n\nif __name__ == '__main__':\n    main()",
      3.90234375
    ],
    [
      "return (a + b > c or a + c > b or b + c > a) and (a + c > b or a + b > c or b + a > c)\n\ndef area_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    area_triangle(3, 4, 5) == 6\n    area_triangle(1, 2, 3) == 0\n    '''\n    return (a * b) / 2\n\ndef perimeter_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle.\n    Example:\n    perimeter_triangle(3, 4, 5) == 7\n    perimeter_triangle(1, 2, 3) == 0\n    '''\n    return (a + b + c)\n\nif __name__ == \"__main__\":\n    main()",
      1.560546875
    ],
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return abs((a + b + c) / 2.0)\n\ndef main():\n    '''\n    Given the length of the sides of a triangle, return the area of the triangle.\n    '''\n    a = int(input(\"Input the length of the first side of the triangle: \"))\n    b = int(input(\"Input the length of the second side of the triangle: \"))\n    c = int(input(\"Input the length of the third side of the triangle: \"))\n    print(triangle_area(a, b, c))\n\nif __name__ == '__main__':\n    main()",
      1.4208984375
    ],
    [
      "return (a + b > c and a + c > b and b + c > a)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal or all three\n    sides are different.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return (a + b >= c and a + c >= b and b + c >= a) or (a + b <= c and a + c <= b and b + c <= a)\n\nif __name__ == '__main__':\n    print(right_angle_triangle(3, 4, 5))\n    print(right_angle_triangle(1, 2, 3))\n    print(is_triangle(3, 4, 5))\n    print(is_triangle(1, 2, 3))",
      1.3125
    ],
    [
      "# sides = (a + b + c) / 2\n    # return sides[0] > sides[1] and sides[1] > sides[2]\n    return (a + b + c) / 2 > (b + c + a) / 2\n\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Returns True if the triangle a, b, and c is a right-angle triangle, False\n    otherwise.\n    '''\n    return right_angle_triangle(a, b, c)\n\n\ndef is_triangle(a, b, c):\n    '''\n    Returns True if the triangle a, b, and c is a triangle, False otherwise.\n    '''\n    return a >= 0 and b >= 0 and c >= 0\n\n\ndef is_square(a, b):\n    '''\n    Returns True if the square a, b, is a square, False otherwise.\n    '''\n    return a * a == b * b",
      1.142578125
    ],
    [
      "return (a+b > c) and (a+c > b) and (b+c > a)\n\n\ndef main():\n    '''\n    Input is a list of length 3.\n    Output is True if the triangle formed by the three given sides is right-angled, False otherwise.\n    '''\n    print('main()')\n\n    a = raw_input('Enter the length of the first side: ')\n    b = raw_input('Enter the length of the second side: ')\n    c = raw_input('Enter the length of the third side: ')\n\n    if right_angle_triangle(int(a), int(b), int(c)):\n        print('The triangle formed by the three sides is right-angled')\n    else:\n        print('The triangle formed by the three sides is not right-angled')\n\nif __name__ == '__main__':\n    main()",
      0.798828125
    ],
    [
      "return (a + b > c and a + c > b and a + b > c)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return (a + b > c and a + c > b and a + b > c) or \\\n           (b + c > a and b + a > c and b + c > a) or \\\n           (c + a > b and c + b > a and c + a > b)\n\nif __name__ == '__main__':\n    print(right_angle_triangle(3, 4, 5))\n    print(right_angle_triangle(1, 2, 3))\n    print(is_triangle(3, 4, 5))\n    print(is_triangle(1, 2, 3))",
      0.65966796875
    ],
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef main():\n    '''\n    For each triangle, check if the three sides are right-angled.\n    '''\n    triangle_list = []\n    for i in range(0, 3):\n        for j in range(0, 3):\n            for k in range(0, 3):\n                triangle_list.append([i, j, k])\n    for triangle in triangle_list:\n        is_right_angle = right_angle_triangle(triangle[0], triangle[1], triangle[2])\n        print(triangle, is_right_angle)\n\nif __name__ == '__main__':\n    main()",
      0.323974609375
    ],
    [
      "return (b**2 + c**2) <= (a**2 + b**2 + c**2)\n\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    return (b**2 + c**2) <= (a**2 + b**2 + c**2)\n\n\ndef is_right_angle_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle_2(3, 4, 5) == True\n    is_right_angle_triangle_2(1, 2, 3) == False\n    '''\n    return (b**2 + c**2) <= (a**2 + b**2 + c**2)\n\n\ndef main():\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    main(3, 4, 5) == True\n    main(1, 2, 3) == False\n    '''\n    return is_right_angle_triangle(3, 4, 5)\n\n\nif __name__ == '__main__':\n    print(main())",
      -0.1353759765625
    ],
    [
      "return ((a*b >= c*c) and (a*a == c*c or a*a == b*b))\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) or right_angle_triangle(b, c, a) or right_angle_triangle(c, a, b)\n\ndef main():\n    print is_triangle(3, 4, 5)\n    print is_triangle(1, 2, 3)\n\nif __name__ == '__main__':\n    main()",
      -0.2646484375
    ],
    [
      "return (a + b > c and a + c > b and b + c > a)\n\ndef right_angle_triangle_check(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_check(3, 4, 5) == True\n    right_angle_triangle_check(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\ndef is_triangle_check(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle_check(3, 4, 5) == True\n    is_triangle_check(1, 2, 3) == False\n    '''\n    return right_angle_triangle_check(a, b, c)\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    Example:\n    is_square(3, 4, 5) == False\n    is_square(1, 2, 3) == True\n    '''\n    return (a == b) and (a == c) and (b == c)\n\ndef is_square_check(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three",
      -0.5625
    ],
    [
      "return a <= b and b <= c\n\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    return is_right_angle_triangle(a, b, c)",
      -0.85791015625
    ],
    [
      "return a + b > c and b + c > a and c + a > b\n\n# Test Cases\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\nprint(right_angle_triangle(1, 2, 1))\nprint(right_angle_triangle(1, 2, 0))\nprint(right_angle_triangle(1, 2, -1))",
      -0.85791015625
    ],
    [
      "return a * b > c * c",
      -0.85888671875
    ],
    [
      "return ((a + b <= c) and (c + b <= a) and (a + c <= b))\n\n\ndef is_triangle(a, b, c):\n    '''\n    Check if a triangle is valid.\n    A triangle is valid if all three sides are equal.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return (a == b) and (b == c) and (a == c)\n\n\nif __name__ == '__main__':\n    print(right_angle_triangle(3, 4, 5))\n    print(is_triangle(3, 4, 5))",
      -0.85888671875
    ],
    [
      "return a*b >= c*c and a*c >= b*b\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return a*b + b*c + c*a\n\nif __name__ == '__main__':\n    triangle_area(3, 4, 5)\n    right_angle_triangle(3, 4, 5)\n    triangle_area(3, 4, 5)",
      -0.85888671875
    ],
    [
      "return (a + b > c or a + c > b or b + c > a)\n\nif __name__ == \"__main__\":\n    print(right_angle_triangle(3, 4, 5))\n    print(right_angle_triangle(1, 2, 3))",
      -0.85888671875
    ],
    [
      "return a + b <= c and a + c <= b\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b == c and a + c == b\n\ndef main():\n    # YOUR CODE HERE\n    pass\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return (a + b + c) / 2",
      -0.85888671875
    ],
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)",
      -0.85888671875
    ],
    [
      "if a + b > c:\n        return False\n    elif a + c > b:\n        return False\n    else:\n        return True\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    if right_angle_triangle(a, b, c):\n        return True\n    else:\n        return False\n\n\ndef is_right_angle_triangle_recursive(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle_recursive(3, 4, 5) == True\n    is_right_angle_triangle_recursive(1, 2, 3) == False\n    '''\n    if a + b > c:\n        return False\n    elif a + c > b:\n        return False\n    else:\n        return True\n\n\ndef is_right_angle_triangle_recursive_v2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle_recursive_v2(3, 4, 5) == True\n    is_right_angle_triangle_recursive_v2(1, 2, 3) == False\n    '''\n    if a + b > c:\n        return False\n    el",
      -0.86181640625
    ],
    [
      "return a + b > c + c\n\ndef is_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle(3, 4, 5) == True\n    is_right_angled_triangle(1, 2, 3) == False\n    '''\n    return a + b > c + c\n\ndef is_right_angled_triangle_fast(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle_fast(3, 4, 5) == True\n    is_right_angled_triangle_fast(1, 2, 3) == False\n    '''\n    return a + b > c + c\n\nif __name__ == '__main__':\n    a = [5, 3, 1]\n    b = [4, 2, 3]\n    c = [3, 4, 5]\n    print(right_angle_triangle(a, b, c))\n    print(is_right_angled_triangle(a, b, c))\n    print(is_right_angled_triangle_fast(a, b, c))",
      -0.89697265625
    ],
    [
      "return a <= 1 and b <= 1 and c <= 1\n\ndef left_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a left-angled triangle, False otherwise.\n    A left-angled triangle is a triangle in which one angle is left angle or \n    90 degree.\n    Example:\n    left_angle_triangle(3, 4, 5) == False\n    left_angle_triangle(1, 2, 3) == True\n    '''\n    return a >= 1 and b >= 1 and c >= 1\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\ndef is_left_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a left-angled triangle, False otherwise.\n    A left-angled triangle is a triangle in which one angle is left angle or \n    90 degree.\n    Example:\n    is_left_angle_triangle(3, 4, 5) == False\n    is_left_angle_triangle(1, 2, 3) == True\n    '''\n    return left_angle_triangle(a, b, c)\n\ndef test_is_right_angle_triangle():\n    assert is_right_angle_triangle(3, 4, 5) == True\n    assert is_right_angle_triangle(1, 2, 3) == False\n\ndef test_is_left_angle_triangle():\n    assert is_left_angle_triangle(3, 4, 5) ==",
      -1.150390625
    ],
    [
      "return a + b > c or a + c > b + b\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    return a + b > c or a + c > b + b\n\ndef is_triangle_with_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_with_right_angle(3, 4, 5) == True\n    is_triangle_with_right_angle(1, 2, 3) == False\n    '''\n    return a + b > c or a + c > b + b\n\ndef is_triangle_with_right_angle_no_check(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_with_right_angle_no_check(3, 4, 5) == True\n    is_triangle_with_right_angle_no_check(1, 2, 3) == False\n    '''\n    return a + b > c or a + c > b + b\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_right_angle_triangle(3, 4, 5), \"Test",
      -1.4599609375
    ],
    [
      "return a**2 + b**2 == c**2\n\ndef right_angle_rectangle(a, b, c):\n    '''\n    Given the lengths of the sides of a rectangle. Return True if the two\n    sides form a right-angled rectangle, False otherwise.\n    A right-angled rectangle is a rectangle in which one side is right angle or \n    90 degree.\n    Example:\n    right_angle_rectangle(3, 4, 5) == False\n    right_angle_rectangle(1, 2, 3) == True\n    '''\n    return a**2 + b**2 == c**2\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which one side is equal to the sum of the other\n    two sides.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b == c\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the two\n    sides form a rectangle, False otherwise.\n    A rectangle is a rectangle in which one side is equal to the sum of the other\n    two sides.\n    Example:\n    is_rectangle(3, 4, 5) == False\n    is_rectangle(1, 2, 3) == True\n    '''\n    return a + b == c\n\ndef test_is_triangle():\n    assert is_triangle(3, 4, 5) == True\n    assert is_triangle(1, 2, 3) == False\n\ndef test_is_rectangle():\n    assert is_rectangle(3, 4, 5) == False\n    assert is_rectangle(1, 2, 3) == True\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False",
      -1.466796875
    ],
    [
      "return ((a + b > c) and (a + c > b) and (b + c > a))\n\n\ndef right_angle_triangle_test():\n    '''\n    A test case for right_angle_triangle.\n    '''\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return its area.\n    '''\n    return ((a + b) * c) / 2\n\n\ndef triangle_area_test():\n    '''\n    A test case for triangle_area.\n    '''\n    assert triangle_area(3, 4, 5) == 7.0\n    assert triangle_area(1, 2, 3) == 0.0\n\n\ndef right_triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return its area.\n    '''\n    return ((a + b) * c) / 2\n\n\ndef right_triangle_area_test():\n    '''\n    A test case for right_triangle_area.\n    '''\n    assert right_triangle_area(3, 4, 5) == 7.0\n    assert right_triangle_area(1, 2, 3) == 0.0\n\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return its perimeter.\n    '''\n    return (a + b + c)\n\n\ndef triangle_perimeter_test():\n    '''\n    A test case for triangle_perimeter.\n    '''\n    assert triangle_perimeter(3, 4, 5) == 12\n    assert triangle_perimeter(1, 2, 3) == 0\n\n\ndef right_triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return its perimeter.\n    '''\n    return (a + b + c)\n\n\ndef right_triangle_perimeter_test():\n    '''",
      -1.71875
    ],
    [
      "return (a + b > c and a + c > b and b + c > a)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal or greater than\n    one.\n    Example:\n    is_triangle(3, 4, 5) == False\n    is_triangle(1, 2, 3) == True\n    '''\n    return (a + b > c and b + c > a and a + c > b)\n\ndef main():\n    # Test cases:\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert is_triangle(3, 4, 5) == False\n    assert is_triangle(1, 2, 3) == True\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.767578125
    ],
    [
      "return a < (b + c) and b < (c + a) and c < (a + b)\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the \n    triangle.\n    '''\n    return (a + b + c) / 2.0\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return True if the \n    triangle is a triangle, False otherwise.\n    '''\n    return right_angle_triangle(a, b, c) and triangle_area(a, b, c) > 0.0\n\ndef main():\n    '''\n    Test the is_triangle function\n    '''\n    assert is_triangle(3, 4, 5)\n    assert not is_triangle(1, 2, 3)\n    assert not is_triangle(1, 2, 4)\n    assert not is_triangle(1, 2, 2)\n    assert not is_triangle(1, 1, 1)\n    assert is_triangle(3, 4, 5)\n    assert not is_triangle(3, 4, 6)\n    assert not is_triangle(3, 5, 6)\n\nif __name__ == '__main__':\n    main()",
      -1.9814453125
    ],
    [
      "return a + b > c or a + c > b or b + c > a\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its area.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return (a + b + c) / 2.0\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its perimeter.\n    Example:\n    triangle_perimeter(3, 4, 5) == 9\n    triangle_perimeter(1, 2, 3) == 3\n    '''\n    return (a + b + c)\n\ndef main():\n    '''\n    Given the length of a side of a triangle, determine if it is a right-angled\n    triangle.\n    '''\n    a, b, c = map(int, input().split())\n    print(right_angle_triangle(a, b, c))\n    print(triangle_area(a, b, c))\n    print(triangle_perimeter(a, b, c))\n\nif __name__ == '__main__':\n    main()",
      -2.009765625
    ],
    [
      "# Make sure the sides are all positive\n    a = max(a, 0)\n    b = max(b, 0)\n    c = max(c, 0)\n    # Check if the three sides are equal\n    if a == b and b == c:\n        return True\n    # Check if the three sides are equal\n    if a == b or a == c or b == c:\n        return False\n    # Check if the three sides are right angle\n    if b**2 + c**2 == a**2:\n        return True\n    return False\n\n# Test cases\n\nassert(right_angle_triangle(1, 2, 3) == True)\nassert(right_angle_triangle(3, 4, 5) == True)\nassert(right_angle_triangle(5, 6, 7) == True)\nassert(right_angle_triangle(5, 4, 4) == False)\nassert(right_angle_triangle(5, 5, 5) == False)\nassert(right_angle_triangle(4, 5, 4) == False)",
      -2.1015625
    ],
    [
      "a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    return ((a_squared + b_squared) == c_squared) and (a_squared + c_squared) == b_squared\n\ndef right_angle_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_2(3, 4, 5) == True\n    right_angle_triangle_2(1, 2, 3) == False\n    '''\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    return (a_squared + c_squared) == b_squared\n\ndef right_angle_triangle_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_3(3, 4, 5) == True\n    right_angle_triangle_3(1, 2, 3) == False\n    '''\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    return (a_squared + b_squared) == c_squared\n\ndef right_angle_triangle_4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_4(3, 4, 5) ==",
      -2.228515625
    ],
    [
      "return a + b > c or a + c > b or b + c > a\n\ndef right_angle_triangle_recursive(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_recursive(3, 4, 5) == True\n    right_angle_triangle_recursive(1, 2, 3) == False\n    '''\n    if a + b > c or a + c > b or b + c > a:\n        return True\n    return False\n\ndef right_angle_triangle_iterative(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_iterative(3, 4, 5) == True\n    right_angle_triangle_iterative(1, 2, 3) == False\n    '''\n    if a + b > c or a + c > b or b + c > a:\n        return True\n    return False\n\ndef right_angle_triangle_recursive_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_recursive_2(3, 4, 5) == True\n    right_angle_triangle_recursive_2(1, 2, 3) == False\n    '''\n    if a + b > c or a + c > b or b + c > a:\n        return True\n    return False\n\ndef right_angle_triangle_recursive_3(a, b,",
      -2.41796875
    ],
    [
      "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\ndef right_angle_triangle_check(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Check if the three\n    sides form a right-angled triangle.\n    Example:\n    right_angle_triangle_check(3, 4, 5) == True\n    right_angle_triangle_check(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return (a**2 + b**2) / 2.0\n\ndef triangle_area_check(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Check if the area of the \n    triangle is equal to the sum of the three sides.\n    Example:\n    triangle_area_check(3, 4, 5) == True\n    triangle_area_check(1, 2, 3) == False\n    '''\n    return triangle_area(a, b, c) == sum(a, b, c)\n\ndef right_angle_triangle_check(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Check if the three sides \n    form a right-angled triangle.\n    Example:\n    right_angle_triangle_check(3, 4, 5) == True\n    right_angle_triangle_check(1, 2, 3) == False\n    '''\n    return right_angle_triangle_check(a, b, c)\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides",
      -2.419921875
    ],
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a polygon with three sides.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) or right_angle_triangle(b, c, a) or right_angle_triangle(c, a, b)\n\ndef is_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a polygon with three sides.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) or right_angle_triangle(b, c, a) or right_angle_triangle(c, a, b)\n\ndef is_triangle_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a polygon with three sides.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) or right_angle_triangle(b, c, a) or right_angle_triangle(c, a, b)\n\ndef is_triangle_4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a polygon with three sides",
      -2.4453125
    ],
    [
      "return (a + b > c or a + c > b or b + c > a) and (a + b + c > 2 * a)\n\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return (a + b > c or a + c > b or b + c > a) and (a + b + c > 2 * a)\n\n\ndef main():\n    a = input('Enter the first side of the triangle: ')\n    b = input('Enter the second side of the triangle: ')\n    c = input('Enter the third side of the triangle: ')\n\n    if is_right_angle_triangle(a, b, c):\n        print('This is a right-angle triangle.')\n    else:\n        print('This is not a right-angle triangle.')\n\nif __name__ == '__main__':\n    main()",
      -2.4609375
    ],
    [
      "return a + b > c and a + c > b and b + c > a\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 7.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return 0.5 * (a + b + c)\n\ndef is_right_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_triangle(3, 4, 5) == True\n    is_right_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b > c and a + c > b and b + c > a\n\nif __name__ == '__main__':\n    print(triangle_area(3, 4, 5))\n    print(is_right_triangle(3, 4, 5))\n    print(is_triangle(3, 4, 5))",
      -2.541015625
    ],
    [
      "return abs(a + b - c) < 1e-6\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) and \\\n        a + b > c and \\\n        b + c > a\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return a + b - c\n\ndef area_of_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    area_of_triangle(3, 4, 5) == 5.0\n    area_of_triangle(1, 2, 3) == 0.0\n    '''\n    return triangle_area(a, b, c)\n\ndef is_triangle_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides are equal, False otherwise.\n    Example:\n    is_triangle_equilateral(3, 4, 5) == True\n    is_triangle_equilateral(1, 2, 3) == False\n    '''\n    return a == b == c\n\ndef is_triangle_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides are",
      -2.5703125
    ],
    [
      "return (a * c) > (b * b)\n\ndef is_right_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_triangle(3, 4, 5) == True\n    is_right_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) and a + b > c\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return abs(a * b + b * c + c * a) / 2.0\n\ndef is_right_triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_triangle_area(3, 4, 5) == True\n    is_right_triangle_area(1, 2, 3) == False\n    '''\n    return triangle_area(a, b, c) == c\n\ndef is_right_triangle_area_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_triangle_area_area(3, 4, 5) == True\n    is_right_triangle_area_area",
      -2.578125
    ],
    [
      "return a**2 + b**2 == c**2\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return abs(a*b + b*c + c*a) / 2\n\ndef is_sorted(array):\n    '''\n    Given an unsorted array, return True if the array is sorted, False if not.\n    '''\n    for i in range(1, len(array)):\n        if array[i-1] > array[i]:\n            return False\n    return True\n\ndef get_difference(array, first_index, last_index):\n    '''\n    Given an unsorted array, return the difference between the values at first\n    and last index.\n    '''\n    return array[last_index] - array[first_index]\n\ndef get_median(array, first_index, last_index):\n    '''\n    Given an unsorted array, return the median of the values at first and last \n    index.\n    '''\n    return (array[first_index] + array[last_index]) / 2\n\ndef get_median_of_three(a, b, c):\n    '''\n    Given three values, return the median of the three values.\n    '''\n    if (a > b) and (a > c):\n        return a\n    elif (b > a) and (b > c):\n        return b\n    elif (c > a) and (c > b):\n        return c\n    return a\n\ndef is_palindrome(string):\n    '''\n    Given a string, return True if the string is a palindrome, False if not.\n    '''\n    if len(string) < 2:\n        return True\n    else:\n        return string[0] == string[-1] and is_palindrome(string[1:-1])\n\ndef get_product(array):",
      -2.685546875
    ],
    [
      "if a + b > c:\n        return False\n    else:\n        return True\n\n\ndef area_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    area_triangle(3, 4, 5) == 5.0\n    area_triangle(1, 2, 3) == 0.0\n    '''\n    return (a + b + c) / 2.0\n\n\ndef perimeter_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle.\n    Example:\n    perimeter_triangle(3, 4, 5) == 9.0\n    perimeter_triangle(1, 2, 3) == 0.0\n    '''\n    return (a + b + c) * 2\n\n\ndef main():\n    '''\n    This is the main function.\n    '''\n    print('Hello, welcome to the triangle problem.')\n    print('Please enter the lengths of the sides of a triangle:')\n    a = input('> ')\n    b = input('> ')\n    c = input('> ')\n    print('The area of the triangle is {}.'.format(area_triangle(a, b, c)))\n    print('The perimeter of the triangle is {}.'.format(perimeter_triangle(a, b, c)))\n\n\nif __name__ == '__main__':\n    main()",
      -2.884765625
    ],
    [
      "if a + b > c or a + c > b or b + c > a:\n        return False\n    return True\n\ndef get_sides(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the length of\n    each side.\n    Example:\n    get_sides(3, 4, 5) == [3, 4, 5]\n    get_sides(1, 2, 3) == [1, 2, 3]\n    '''\n    return [a, b, c]\n\ndef get_sides_no_zero(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the length of\n    each side.\n    Example:\n    get_sides_no_zero(3, 4, 5) == [3, 4, 5]\n    get_sides_no_zero(1, 2, 3) == [1, 2, 3]\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return [0, 0, 0]\n    return [a, b, c]\n\ndef get_sides_no_zero_no_zero(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the length of\n    each side.\n    Example:\n    get_sides_no_zero_no_zero(3, 4, 5) == [3, 4, 5]\n    get_sides_no_zero_no_zero(1, 2, 3) == [1, 2, 3]\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return [0, 0, 0]\n    if a < 0 or b < 0 or c < 0:\n        return [0, 0, 0]\n    return [a, b, c]\n\ndef get_sides_no_zero_no_zero_no_zero(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the length of\n    each side.\n    Example:\n    get_sides_no_zero_no_zero_no_",
      -2.978515625
    ],
    [
      "a, b, c = map(int, (a, b, c))\n    if a + b > c:\n        return False\n    return True\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the \n    triangle is a valid triangle, False otherwise.\n    A valid triangle is a triangle in which all the sides have the same length.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    is_triangle(1, 1, 1) == True\n    '''\n    a, b, c = map(int, (a, b, c))\n    if a + b > c:\n        return False\n    if a == b == c:\n        return True\n    return False\n\ndef is_valid_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the \n    triangle is a valid triangle, False otherwise.\n    A valid triangle is a triangle in which all the sides have the same length.\n    Example:\n    is_valid_triangle(3, 4, 5) == True\n    is_valid_triangle(1, 2, 3) == False\n    is_valid_triangle(1, 1, 1) == True\n    '''\n    a, b, c = map(int, (a, b, c))\n    if a + b > c:\n        return False\n    if a == b == c:\n        return True\n    return False\n\ndef is_triangle_sum(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the \n    triangle is a valid triangle, False otherwise.\n    A valid triangle is a triangle in which all the sides have the same length.\n    Example:\n    is_triangle_sum(3, 4, 5) == True\n    is_triangle_sum(1, 2, 3) == False\n    is_triangle_sum(1, 1, 1) == True\n    '''\n    a, b,",
      -3.306640625
    ],
    [
      "# a > b > c\n    return (a + b > c) and (b + c > a) and (c + a > b)\n\ndef is_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # a > b > c\n    return (a + b > c) and (b + c > a) and (c + a > b)\n\ndef is_right_angled_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # a > b > c\n    return (a + b > c) and (b + c > a) and (c + a > b) and (a + c > b)\n\ndef is_right_angled_triangle_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # a > b > c\n    return (a + b > c) and (b + c > a) and (c + a > b) and (a + c",
      -3.42578125
    ],
    [
      "return a*b >= c*c and a*c >= b*b\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its area.\n    Example:\n    triangle_area(3, 4, 5) == 5.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return abs(a*b + b*c + c*a - a*c - b*c - c*a) / 2.0\n\n\ndef area_of_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its area.\n    Example:\n    area_of_triangle(3, 4, 5) == 5.0\n    area_of_triangle(1, 2, 3) == 0.0\n    '''\n    return triangle_area(a, b, c)",
      -3.4453125
    ],
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)\n\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which three sides are equal.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b > c and b + c > a and c + a > b\n\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the three\n    sides form a rectangle, False otherwise.\n    A rectangle is a rectangle in which all three sides are equal.\n    Example:\n    is_rectangle(3, 4, 5) == False\n    is_rectangle(1, 2, 3) == True\n    '''\n    return a == b and b == c and a == c\n\n\ndef main():\n    '''\n    Use the functions defined above to solve the following problem:\n    What is the smallest value that can be written as the sum of a consecutive\n    number of the digits 1 to 9, inclusive?\n    '''\n    print(sum_consecutive_digits(10))\n\n\nif __name__ == '__main__':\n    main()",
      -3.45703125
    ],
    [
      "return ((a + b > c) and (a + c > b) and (b + c > a))\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return ((a == b) and (b == c) and (c == a))\n\ndef main():\n    a = int(input(\"Enter the side a of the triangle: \"))\n    b = int(input(\"Enter the side b of the triangle: \"))\n    c = int(input(\"Enter the side c of the triangle: \"))\n    if right_angle_triangle(a, b, c):\n        print(\"The triangle is a right-angled triangle.\")\n    elif is_triangle(a, b, c):\n        print(\"The triangle is a triangle.\")\n    else:\n        print(\"The triangle is not a triangle.\")\n\nif __name__ == \"__main__\":\n    main()",
      -3.69140625
    ],
    [
      "if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False\n\n\ndef is_triangle_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_right_angle(3, 4, 5) == True\n    is_triangle_right_angle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\n\nif __name__ == '__main__':\n    print is_triangle_right_angle(3, 4, 5)",
      -3.748046875
    ],
    [
      "a = float(a)\n    b = float(b)\n    c = float(c)\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert right_angle_triangle(3, 4, 5) == True, \"Test triangle 1\"\n    assert right_angle_triangle(1, 2, 3) == False, \"Test triangle 2\"\n    assert right_angle_triangle(4, 5, 6) == False, \"Test triangle 3\"\n    assert right_angle_triangle(4, 5, 6) == False, \"Test triangle 4\"\n    assert right_angle_triangle(7, 8, 9) == False, \"Test triangle 5\"\n    assert right_angle_triangle(1, 2, 3) == False, \"Test triangle 6\"\n    assert right_angle_triangle(4, 5, 6) == False, \"Test triangle 7\"\n    assert right_angle_triangle(3, 2, 1) == False, \"Test triangle 8\"\n    assert right_angle_triangle(1, 2, 3) == False, \"Test triangle 9\"\n    assert right_angle_triangle(4, 5, 6) == False, \"Test triangle 10\"",
      -3.78515625
    ],
    [
      "return a + b <= c or a + c <= b or b + c <= a\n\ndef is_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle(3, 4, 5) == True\n    is_right_angled_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) and right_angle_triangle(b, c, a)\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    A square is a triangle in which all three sides are equal.\n    Example:\n    is_square(3, 4, 5) == True\n    is_square(1, 2, 3) == False\n    '''\n    return (a + b + c) == (a + b) + (a + c)\n\ndef is_square_of_three(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    A square is a triangle in which all three sides are equal.\n    Example:\n    is_square_of_three(3, 4, 5) == True\n    is_square_of_three(1, 2, 3) == False\n    '''\n    return is_square(a, b, c) and is_square(b, c, a) and is_square(c, a, b)\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    A square is a triangle in which all three sides are equal.\n    Example:\n    is_rectangle(3, 4",
      -3.9140625
    ],
    [
      "return (a**2 + b**2 == c**2) and (a+b > c)\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 7.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return (a+b+c)/2\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 10.0\n    triangle_perimeter(1, 2, 3) == 0.0\n    '''\n    return (a+b+c)\n\ndef triangle_sides(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return a tuple containing\n    the sides.\n    Example:\n    triangle_sides(3, 4, 5) == (3, 4, 5)\n    triangle_sides(1, 2, 3) == (1, 2, 3)\n    '''\n    return (a, b, c)\n\ndef triangle_area_perimeter_ratio(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the ratio of the\n    area to the perimeter.\n    Example:\n    triangle_area_perimeter_ratio(3, 4, 5) == 7.0/10.0\n    triangle_area_perimeter_ratio(1, 2, 3) == 0.0\n    '''\n    return triangle_area(a, b, c)/triangle_perimeter(a, b, c)\n\ndef triangle_sides_perimeter_ratio(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the ratio of the\n    sides to the perimeter.\n    Example:\n    triangle_sides_perimeter_ratio(3",
      -3.99609375
    ],
    [
      "if a > b and a > c:\n        if b > c:\n            if a >= c:\n                return True\n            else:\n                return False\n        else:\n            if b >= c:\n                return True\n            else:\n                return False\n    else:\n        return False\n\n\ndef is_triangle_right(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_right(3, 4, 5) == True\n    is_triangle_right(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\n\ndef is_triangle_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_right_angle(3, 4, 5) == True\n    is_triangle_right_angle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\n\ndef main():\n    '''\n    This is the main function. It is used to test the is_triangle_right and\n    is_triangle_right_angle functions.\n    '''\n    print(is_triangle_right(3, 4, 5))\n    print(is_triangle_right_angle(3, 4, 5))\n    print(is_triangle_right(1, 2, 3))\n    print(is_triangle_right_angle(1, 2, 3))\n\n\nif __name__ == '__main__':\n    main()",
      -4.01171875
    ],
    [
      "return (b*c >= a*a + a*b) and (a*a + a*b >= c*c) and (a*a + c*c >= b*b)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    #assert right_angle_triangle(3, 4, 5), \"Example triangle\"\n    #assert not right_angle_triangle(1, 2, 3), \"First triangle\"\n    assert right_angle_triangle(1, 2, 3), \"Second triangle\"\n    assert not right_angle_triangle(2, 3, 4), \"Third triangle\"\n    assert not right_angle_triangle(3, 4, 5), \"Fourth triangle\"\n    assert not right_angle_triangle(4, 5, 6), \"Fifth triangle\"\n    assert not right_angle_triangle(1, 2, 4), \"Sixth triangle\"\n    assert not right_angle_triangle(1, 2, 6), \"Seventh triangle\"\n    assert not right_angle_triangle(1, 2, 7), \"Eigth triangle\"\n    assert not right_angle_triangle(1, 2, 8), \"Ninth triangle\"\n    assert not right_angle_triangle(1, 2, 9), \"Tenth triangle\"\n    assert not right_angle_triangle(1, 2, 10), \"Eleventh triangle\"\n    assert not right_angle_triangle(1, 2, 11), \"Twelve triangle\"\n    assert not right_angle_triangle(1, 2, 12), \"Thirteenth triangle\"\n    assert not right_angle_triangle(1, 2, 13), \"Fourteenth triangle\"\n    assert not right_angle_triangle(1, 2, 14), \"Fifteenth triangle\"\n    assert not right_angle_triangle(1, 2, 15), \"Sixteenth triangle\"\n    assert not right_angle_triangle(1, 2, 16), \"Seventeenth triangle\"\n    assert not right_angle_triangle(1, 2, 17), \"Eighteenth triangle\"\n    assert not right_angle_triangle(1, 2, 18), \"Nineteenth",
      -4.14453125
    ],
    [
      "return a + b > c and a + c > b and a + b > c\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b == c and a + c == b and a + b == c\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    A square is a square in which all three sides are equal.\n    Example:\n    is_square(3, 4, 5) == True\n    is_square(1, 2, 3) == False\n    '''\n    return a + b == c and a + c == b and a + b == c\n\ndef is_square_or_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a square or a triangle. Return True\n    if the three sides form a square or a triangle, False otherwise.\n    A square or triangle is a square or triangle in which all three sides are\n    equal.\n    Example:\n    is_square_or_triangle(3, 4, 5) == True\n    is_square_or_triangle(1, 2, 3) == True\n    is_square_or_triangle(1, 2, 4) == False\n    is_square_or_triangle(1, 2, 2) == False\n    '''\n    return a + b == c and a + c == b and a + b == c\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the\n    three sides form a rectangle, False otherwise.\n    A rectangle is a rectangle in which all three sides are equal.\n    Example:\n    is_rectangle(3, 4",
      -4.1484375
    ],
    [
      "return (a + b > c and a + c > b and b + c > a)\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return (a + b + c) / 2\n\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of \n    the triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 9\n    triangle_perimeter(1, 2, 3) == 0\n    '''\n    return (a + b + c)\n\n\ndef triangle_perimeter_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_perimeter_area(3, 4, 5) == 5\n    triangle_perimeter_area(1, 2, 3) == 0\n    '''\n    return triangle_perimeter(a, b, c) / 2\n\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the \n    triangle is a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return (right_angle_triangle(a, b, c) and triangle_perimeter(a, b, c) ==\n            triangle_perimeter_area(a, b, c))\n\n\nif __name__ == '__main__':\n    print(right_angle_triangle(3, 4, 5))\n    print(is_triangle(3, 4, 5))",
      -4.2734375
    ],
    [
      "return a + b > c and a + c > b and a + b > c\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a three-sided object.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b > c and a + c > b and a + b > c\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the\n    three sides form a rectangle, False otherwise.\n    A rectangle is a four-sided object.\n    Example:\n    is_rectangle(3, 4, 5) == False\n    is_rectangle(1, 2, 3) == False\n    '''\n    return a + b > c and a + c > b and a + b > c\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    A square is a four-sided object.\n    Example:\n    is_square(3, 4, 5) == False\n    is_square(1, 2, 3) == False\n    '''\n    return a + b > c and a + c > b and a + b > c\n\ndef is_pentagon(a, b, c):\n    '''\n    Given the lengths of the three sides of a pentagon. Return True if the\n    three sides form a pentagon, False otherwise.\n    A pentagon is a five-sided object.\n    Example:\n    is_pentagon(3, 4, 5) == False\n    is_pentagon(1, 2, 3) == False\n    '''\n    return a + b > c and a + c > b and a + b > c and a + c > b\n\ndef is_hexagon(a, b, c):\n    '''\n    Given the lengths of the",
      -4.40625
    ],
    [
      "return (a + b > c or a + c > b or b + c > a)\n\ndef right_angle_triangle_sides(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the sides as a \n    tuple.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_sides(3, 4, 5) == (3, 4)\n    right_angle_triangle_sides(1, 2, 3) == (2, 3)\n    '''\n    return (a + b > c or a + c > b or b + c > a)\n\ndef is_triangle_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_right_angle(3, 4, 5) == True\n    is_triangle_right_angle(1, 2, 3) == False\n    '''\n    return (a + b > c or a + c > b or b + c > a)\n\ndef is_triangle_right_angle_sides(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the sides as a \n    tuple.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_right_angle_sides(3, 4, 5) == (3, 4)\n    is_triangle_right_angle_sides(1, 2, 3) == (2, 3)\n    '''\n    return (a + b > c or a + c > b or b + c > a)\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three",
      -4.55859375
    ],
    [
      "return ((a + b > c and a + c > b and b + c > a) or\n            (a + b < c and b + c < a and a + c > b))\n\ndef triangle_area(a, b, c):\n    '''\n    Given the length of each side of the triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 7.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return a + b + c\n\ndef main():\n    print(\"This program will calculate the area of a right-angled triangle.\")\n    print(\"Please enter the lengths of the three sides of the triangle.\")\n    print(\"The area will be displayed.\")\n    \n    a = int(input(\"Enter the first side: \"))\n    b = int(input(\"Enter the second side: \"))\n    c = int(input(\"Enter the third side: \"))\n    \n    if right_angle_triangle(a, b, c):\n        print(\"This is a right-angled triangle.\")\n        print(\"The area is\", triangle_area(a, b, c))\n    else:\n        print(\"This is not a right-angled triangle.\")\n\nif __name__ == '__main__':\n    main()",
      -4.57421875
    ],
    [
      "return (a * b > c * c) and (a * c > b * b)\n\ndef right_angle_triangle_recursive(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_recursive(3, 4, 5) == True\n    right_angle_triangle_recursive(1, 2, 3) == False\n    '''\n    if a < 0 or b < 0 or c < 0:\n        return False\n    if a * b > c * c:\n        return right_angle_triangle_recursive(a - b, b, c) and right_angle_triangle_recursive(a, b + c, c)\n    if a * c > b * b:\n        return right_angle_triangle_recursive(a, b - c, c) and right_angle_triangle_recursive(a + b, b, c)\n    return False\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(5, 6, 7) == False\n    assert right_angle_triangle(1, 2, 2) == True\n    assert right_angle_triangle(2, 1, 2) == True\n    assert right_angle_triangle(3, 4, 3) == True\n\ndef test_right_angle_triangle_recursive():\n    assert right_angle_triangle_recursive(3, 4, 5) == True\n    assert right_angle_triangle_recursive(1, 2, 3) == False\n    assert right_angle_triangle_recursive(5, 6, 7) == False\n    assert right_angle_triangle_recursive(1, 2, 2) == True\n    assert right_angle_triangle_recursive(2, 1, 2) ==",
      -4.9453125
    ],
    [
      "return (a + b >= c) and (a + c >= b) and (b + c >= a)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) or right_angle_triangle(b, c, a)\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the \n    three sides form a rectangle, False otherwise.\n    Example:\n    is_rectangle(3, 4, 5) == True\n    is_rectangle(1, 2, 3) == False\n    '''\n    return (a + b >= c) and (b + c >= a) and (a + c >= b)\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    Example:\n    is_square(3, 4, 5) == True\n    is_square(1, 2, 3) == False\n    '''\n    return (a + b >= c) and (b + c >= a) and (a + c >= b)\n\ndef area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its area.\n    '''\n    return abs((a + b + c) / 2)\n\ndef perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its perimeter.\n    '''\n    return 2 * (a + b + c)\n\ndef main():\n    '''\n    Test cases.\n    '''\n    assert(is_triangle(3, 4, 5))\n    assert(is_triangle(1, 2, 3))\n    assert(is_tri",
      -5.05859375
    ],
    [
      "a = float(a)\n    b = float(b)\n    c = float(c)\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    An triangle is a triangle in which all three sides are equal.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    return (a + b == c) and (a + c == b) and (b + c == a)\n\nif __name__ == '__main__':\n    print(is_triangle(3, 4, 5))\n    print(is_triangle(1, 2, 3))\n    print(is_triangle(3, 4, 5))\n    print(is_triangle(1, 2, 3))",
      -5.28515625
    ],
    [
      "return a*b >= c*a\n\ndef triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the\n    triangle.\n    '''\n    return abs(a*b*c) / 2.0\n\ndef area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the\n    triangle.\n    '''\n    return triangle(a, b, c)\n\ndef angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the angle formed\n    by the side opposite the origin, the side opposite the origin and the side\n    opposite the origin.\n    '''\n    return math.atan2(b, a)\n\ndef angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the angle formed\n    by the side opposite the origin, the side opposite the origin and the side\n    opposite the origin.\n    '''\n    return math.atan2(b, a)\n\ndef main():\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the\n    triangle.\n    '''\n    a = input()\n    b = input()\n    c = input()\n    \n    if right_angle_triangle(a, b, c):\n        print(area(a, b, c))\n    else:\n        print(None)\n\nmain()",
      -5.421875
    ],
    [
      "a_b = b * b - a * a\n    c_a = a * a - c * c\n    return a_b <= 0 and c_a <= 0\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal or if the\n    triangle is a right-angled triangle.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    is_triangle(5, 6, 7) == False\n    '''\n    return (a + b > c and a + c > b and b + c > a) or (right_angle_triangle(a, b, c))\n\ndef main():\n    print \"is_triangle(3, 4, 5):\", is_triangle(3, 4, 5)\n    print \"is_triangle(1, 2, 3):\", is_triangle(1, 2, 3)\n    print \"is_triangle(5, 6, 7):\", is_triangle(5, 6, 7)\n\nif __name__ == '__main__':\n    main()",
      -5.65625
    ],
    [
      "return a + b > c and a + c > b and b + c > a\n    \ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    \ndef triangle_area(a, b, c):\n    '''\n    Given the length of each side of a triangle. Return the area of the triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return abs(a + b - c) / 2.0\n    \ndef test_triangle_area():\n    assert triangle_area(3, 4, 5) == 5.0\n    assert triangle_area(1, 2, 3) == 0.0\n    \ndef triangle_perimeter(a, b, c):\n    '''\n    Given the length of each side of a triangle. Return the perimeter of the\n    triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 5.0\n    triangle_perimeter(1, 2, 3) == 3.0\n    '''\n    return a + b + c\n    \ndef test_triangle_perimeter():\n    assert triangle_perimeter(3, 4, 5) == 5.0\n    assert triangle_perimeter(1, 2, 3) == 3.0\n    \ndef is_right_triangle(a, b, c):\n    '''\n    Given the length of each side of a triangle. Return True if the triangle is\n    right-angled, False otherwise.\n    Example:\n    is_right_triangle(3, 4, 5) == True\n    is_right_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n    \ndef test_is_right_triangle():\n    assert is_right_triangle(3, 4, 5) == True\n    assert is_right_triangle(1, 2, 3) == False\n    \ndef main():\n    #",
      -5.73828125
    ],
    [
      "return (a + b > c or a + c > b or b + c > a) and (a + b < c or a + c < b or b + c < a)\n\n\ndef is_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle(3, 4, 5) == True\n    is_right_angled_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) and (a + b > c or a + c > b or b + c > a)\n\n\ndef main():\n    '''\n    This program takes three numbers and checks if they form a right-angled\n    triangle.\n    '''\n    print(is_right_angled_triangle(5, 3, 7))\n    print(is_right_angled_triangle(4, 2, 3))\n    print(is_right_angled_triangle(1, 4, 4))\n    print(is_right_angled_triangle(1, 2, 2))\n    print(is_right_angled_triangle(3, 2, 2))\n    print(is_right_angled_triangle(2, 2, 2))\n    print(is_right_angled_triangle(5, 5, 5))\n    print(is_right_angled_triangle(4, 4, 4))\n    print(is_right_angled_triangle(5, 3, 6))\n    print(is_right_angled_triangle(5, 2, 4))\n    print(is_right_angled_triangle(5, 4, 3))\n    print(is_right_angled_triangle(5, 4, 5))\n    print(is_right_angled_triangle(5, 5, 5))\n    print(is_right_angled_triangle(2, 1, 3))\n    print(is_right_angled_tri",
      -5.8515625
    ],
    [
      "return a + b >= c and a + c >= b and a + b >= c\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return abs(a * b - b * c + c * a - a * c) / 2\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of \n    the triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 6\n    triangle_perimeter(1, 2, 3) == 0\n    '''\n    return (a + b + c) / 2\n\ndef triangle_perimeter_difference(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the difference\n    between the perimeter of the triangle and the perimeter of the equilateral\n    triangle.\n    Example:\n    triangle_perimeter_difference(3, 4, 5) == 3\n    triangle_perimeter_difference(1, 2, 3) == 0\n    '''\n    return triangle_perimeter(a, b, c) - triangle_perimeter_equilateral(a, b, c)\n\ndef triangle_perimeter_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of \n    the triangle.\n    Example:\n    triangle_perimeter_equilateral(3, 4, 5) == 5\n    triangle_perimeter_equilateral(1, 2, 3) == 0\n    '''\n    return (a + b + c) / 2\n\ndef triangle_perimeter_equilateral_difference(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the difference\n    between the perimeter of the triangle and the perimeter of the equilateral\n    triangle.\n    Example:",
      -5.86328125
    ],
    [
      "if a + b > c or a + c > b or b + c > a:\n        return False\n    return True\n\ndef is_sorted_asc(arr):\n    '''\n    Given a list, check if the list is sorted in ascending order.\n    Example:\n    is_sorted_asc([2, 1, 4, 3]) == True\n    is_sorted_asc([2, 4, 1, 3]) == False\n    '''\n    if arr[0] > arr[1]:\n        return False\n    return True\n\ndef is_sorted_desc(arr):\n    '''\n    Given a list, check if the list is sorted in descending order.\n    Example:\n    is_sorted_desc([2, 1, 4, 3]) == False\n    is_sorted_desc([2, 4, 1, 3]) == True\n    '''\n    if arr[0] < arr[1]:\n        return False\n    return True\n\ndef check_triangle(num_triangles):\n    '''\n    Given a number of triangles, check if it is a triangle.\n    Example:\n    check_triangle(1) == True\n    check_triangle(2) == True\n    check_triangle(3) == True\n    check_triangle(4) == False\n    '''\n    if num_triangles == 1:\n        return True\n    if num_triangles == 2:\n        return True\n    if num_triangles == 3:\n        return True\n    return False\n\ndef check_triangle_sort(num_triangles):\n    '''\n    Given a number of triangles, check if it is a triangle in sorted order.\n    Example:\n    check_triangle_sort(1) == True\n    check_triangle_sort(2) == True\n    check_triangle_sort(3) == True\n    check_triangle_sort(4) == False\n    '''\n    if num_triangles == 1:\n        return True\n    if num_triangles == 2:\n        return True\n    if num_triangles == 3:\n        return True\n    return False\n\ndef check_triangle_sort_asc(num_tri",
      -6.02734375
    ],
    [
      "return a*b > c*c and b*c > a*a\n\ndef is_triangle_with_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_with_right_angle(3, 4, 5) == True\n    is_triangle_with_right_angle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) and a*b > c*c and b*c > a*a\n\ndef is_triangle_with_right_angle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_with_right_angle(3, 4, 5) == True\n    is_triangle_with_right_angle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) and b*c > a*a and a*b > c*c\n\ndef is_triangle_with_right_angle_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_with_right_angle(3, 4, 5) == True\n    is_triangle_with_right_angle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) and b*c > a*a and c*a > b*b\n\ndef is_",
      -6.09375
    ],
    [
      "a = float(a)\n    b = float(b)\n    c = float(c)\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef is_right_angle_triangle_with_sides(a, b, c, d):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle_with_sides(3, 4, 5, 6) == True\n    is_right_angle_triangle_with_sides(1, 2, 3, 4) == False\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    d = float(d)\n    return (a + b > c) and (a + c > b) and (b + c > d) and (a + d > c) and (b + d > c) and (c + d > a)\n\ndef is_right_angle_triangle_with_sides_with_triangle_construction(a, b, c, d):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right",
      -6.40625
    ],
    [
      "return a + b > c and a + c > b and a + b > c\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return abs(a + b - c) / 2\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of \n    the triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 6\n    triangle_perimeter(1, 2, 3) == 0\n    '''\n    return a + b + c\n\ndef area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    area(3, 4, 5) == 5\n    area(1, 2, 3) == 0\n    '''\n    return triangle_area(a, b, c)\n\ndef perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of \n    the triangle.\n    Example:\n    perimeter(3, 4, 5) == 6\n    perimeter(1, 2, 3) == 0\n    '''\n    return triangle_perimeter(a, b, c)\n\ndef main():\n    '''\n    Test Cases\n    --------------\n    >>> main()\n    Traceback (most recent call last):\n   ...\n    AssertionError: 1.0!= 3.0\n    >>> main()\n    Traceback (most recent call last):\n   ...\n    AssertionError: 1.0!= 4.0\n    >>> main()\n    Traceback (most recent call last):\n   ...\n    AssertionError: 1.0!= 5.0\n    >>> main()\n    Traceback (most recent call last):\n   ...\n    AssertionError: 1",
      -6.44140625
    ],
    [
      "return (a*b >= c*c) and (a*c >= b*b) and (b*c >= a*a)\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return 0.5*(a+b+c)\n\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 7.5\n    triangle_perimeter(1, 2, 3) == 3\n    '''\n    return (a+b+c)/2\n\n\ndef triangle_perimeter_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_perimeter_area(3, 4, 5) == 5\n    triangle_perimeter_area(1, 2, 3) == 0\n    '''\n    return triangle_perimeter_area(a, b, c) / 2\n\n\ndef right_angle_triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    right_angle_triangle_area(3, 4, 5) == 5\n    right_angle_triangle_area(1, 2, 3) == 0\n    '''\n    return triangle_area(a, b, c) / 2\n\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 2, 1) == False\n\n\ndef test_triangle_area():\n    assert triangle_area(3,",
      -6.5234375
    ],
    [
      "return (a + b > c or a + c > b or b + c > a)\n\n\ndef check_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a set of three sides that add to a multiple of 180 degree.\n    Example:\n    check_triangle(3, 4, 5) == True\n    check_triangle(1, 2, 3) == False\n    '''\n    return (a + b == c or a + c == b or b + c == a)\n\n\ndef check_triangle_angles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a set of three sides that add to a multiple of 180 degree.\n    Example:\n    check_triangle_angles(3, 4, 5) == True\n    check_triangle_angles(1, 2, 3) == False\n    '''\n    return (a + b == c or a + c == b or b + c == a)\n\n\ndef check_triangle_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a set of three sides that add to a multiple of 180 degree.\n    Example:\n    check_triangle_right_angle(3, 4, 5) == True\n    check_triangle_right_angle(1, 2, 3) == False\n    '''\n    return (a + b > c or a + c > b or b + c > a)\n\n\ndef check_triangle_right_angle_angles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a set of three sides that add to a multiple of 180 degree.\n    Example:\n    check_triangle_right_angle_angles(3, 4, 5)",
      -6.54296875
    ],
    [
      "return (a + b > c or b + c > a or c + a > b)\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle, return True if the\n    rectangle is a rectangle, False otherwise.\n    A rectangle is a rectangle if the length of the longest side is exactly \n    equal to the length of the shorter side.\n    Example:\n    is_rectangle(3, 4, 5) == False\n    is_rectangle(1, 2, 3) == True\n    '''\n    return (a + b == c or b + c == a or c + a == b)\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a square, return True if the square\n    is a square, False otherwise.\n    A square is a square if the length of the longest side is exactly equal to\n    the length of the shorter side.\n    Example:\n    is_square(3, 4, 5) == False\n    is_square(1, 2, 3) == True\n    '''\n    return (a + b == c or b + c == a or c + a == b)\n\ndef area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the\n    triangle.\n    '''\n    return (a * b) / 2\n\ndef perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the perimeter of\n    the triangle.\n    '''\n    return a + b + c\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the\n    triangle.\n    '''\n    return math.sqrt(a * b * c)\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the perimeter of\n    the triangle.\n    '''\n    return math.sqrt(a + b + c)\n\ndef is_triangle(a, b",
      -6.69140625
    ],
    [
      "return a + b > c and a + c > b and b + c > a\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    return a + b > c and a + c > b and b + c > a\n\ndef right_angle_triangle_with_sides(a, b, c, d):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_with_sides(3, 4, 5, 6) == True\n    right_angle_triangle_with_sides(1, 2, 3, 4) == False\n    '''\n    return a + b > c and a + c > b and b + c > d and d + c > b\n\ndef is_right_angle_triangle_with_sides(a, b, c, d):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle_with_sides(3, 4, 5, 6) == True\n    is_right_angle_triangle_with_sides(1, 2, 3, 4) == False\n    '''\n    return a + b > c and a + c > b and b + c > d and d + c > b\n\ndef right_angle_triangle_with_angles",
      -6.7109375
    ],
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which each side has exactly three vertices.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the three\n    sides form a rectangle, False otherwise.\n    A rectangle is a rectangle in which all sides have the same length.\n    Example:\n    is_rectangle(3, 4, 5) == False\n    is_rectangle(1, 2, 3) == True\n    '''\n    return (a + b == c) and (a + c == b) and (b + c == a)\n\ndef get_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle or rectangle. Return the\n    area of the triangle or rectangle.\n    Example:\n    get_area(3, 4, 5) == 5\n    get_area(1, 2, 3) == 0\n    '''\n    if is_triangle(a, b, c):\n        return (a + b) * (c + b) - (a + c) * (b + c)\n    elif is_rectangle(a, b, c):\n        return (a + b) * (c + b) - (a + c) * (b + c)\n    else:\n        return 0\n\ndef get_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle or rectangle. Return the\n    perimeter of the triangle or rectangle.\n    Example:\n    get_perimeter(3, 4, 5) == 12",
      -6.91015625
    ],
    [
      "if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    return a + b <= c and a + c <= b and b + c <= a\n\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal or greater than\n    zero.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    return a + b <= c and b + c <= a and a + c <= b\n\n\ndef main():\n    '''\n    Given a triangle, check if it is a right-angled triangle or not.\n    '''\n    tests = [\n        (3, 4, 5),\n        (1, 2, 3),\n        (5, 4, 1),\n        (1, 1, 1),\n        (4, 4, 4),\n        (4, 4, 4),\n        (4, 4, 4)\n    ]\n    for test in tests:\n        print '{} is {}'.format(test, right_angle_triangle(test[0], test[1], test[2]))\n\n\nif __name__ == '__main__':\n    main()",
      -6.9296875
    ],
    [
      "return a >= b and b >= c\n\ndef right_angle_triangle_with_b(a, b, c, d):\n    '''\n    Given the lengths of the four sides of a triangle. Return True if the four\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_with_b(3, 4, 5, 6) == True\n    right_angle_triangle_with_b(1, 2, 3, 4) == False\n    '''\n    return a >= b and b >= c and c >= d\n\ndef right_angle_triangle_with_a(a, b, c, d):\n    '''\n    Given the lengths of the four sides of a triangle. Return True if the four\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_with_a(3, 4, 5, 6) == True\n    right_angle_triangle_with_a(1, 2, 3, 4) == False\n    '''\n    return a >= b and b >= c and c >= d\n\ndef right_angle_triangle_with_b_and_c(a, b, c, d):\n    '''\n    Given the lengths of the four sides of a triangle. Return True if the four\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_with_b_and_c(3, 4, 5, 6) == True\n    right_angle_triangle_with_b_and_c(1, 2, 3, 4) == False\n    '''\n    return a >= b and b >= c and c >= d\n\ndef right_angle_triangle_with_a_and_c(a, b, c, d):\n    '''\n    Given the lengths of the four sides of a",
      -6.9375
    ],
    [
      "return a >= b and b >= c and c >= a\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its area.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return abs((a + b + c) / 2.0)\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its perimeter.\n    Example:\n    triangle_perimeter(3, 4, 5) == 7\n    triangle_perimeter(1, 2, 3) == 0\n    '''\n    return (a + b + c)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return True if the \n    triangle is a right-angle triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\ndef triangle_perimeter_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its perimeter \n    and its area.\n    Example:\n    triangle_perimeter_area(3, 4, 5) == 7, 5\n    triangle_perimeter_area(1, 2, 3) == 0, 0\n    '''\n    return triangle_perimeter(a, b, c), triangle_area(a, b, c)\n\ndef main():\n    '''\n    Given the length of the side of a triangle, return its area.\n    Example:\n    area(5) == 5\n    area(1) == 0\n    '''\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    return area(a, b, c)\n\nif __name__ == '__main__':\n    main()",
      -7.0859375
    ],
    [
      "return a + b > c or a + c > b or b + c > a\n\ndef main():\n    # Test cases\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(2, 3, 4) == False\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(2, 3, 4) == False\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(3, 4, 4",
      -7.20703125
    ],
    [
      "return right_angle(a, b, c) and right_angle(c, a, b)\n\ndef right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle(3, 4, 5) == False\n    right_angle(1, 2, 3) == True\n    '''\n    return (a+b > c) and (a+c > b)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    '''\n    return (a+b > c) and (a+c > b) and (a+c > b)\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    '''\n    return (a+b > c) and (a+c > b) and (b+c > a)\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the three\n    sides form a rectangle, False otherwise.\n    '''\n    return (a+b > c) and (a+c > b) and (b+c > a)\n\ndef main():\n    print(is_triangle(2, 3, 4))\n    print(is_triangle(1, 4, 5))\n    print(is_triangle(1, 2, 4))\n    print(is_triangle(3, 5, 6))\n    print(is_triangle(1, 5, 6))\n    print(is_triangle(2, 4, 6))\n    print(is_triangle(1, 3, 5))\n    print(is_triangle(1, 5, 8))\n    print(is_tri",
      -7.984375
    ],
    [
      "return (a + b > c or a + c > b or b + c > a) and a + b > c\n\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return (a + b == c or a + c == b or b + c == a) and a + b == c\n\n\ndef is_triangle_equal(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal.\n    Example:\n    is_triangle_equal(3, 4, 5) == True\n    is_triangle_equal(1, 2, 3) == False\n    '''\n    return a == b == c",
      -8.125
    ],
    [
      "# Calculate the dot product of a and b\n    dot_product = a * b\n    # If the dot product is less than or equal to the sum of the two sides\n    # of the triangle, then the triangle is right-angled.\n    return (dot_product <= a + b) and (dot_product <= c + b)\n\n\ndef right_angle_triangle_1(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Calculate the dot product of a and b\n    dot_product = a * b\n    # If the dot product is less than or equal to the sum of the two sides\n    # of the triangle, then the triangle is right-angled.\n    return (dot_product <= a + b) and (dot_product <= c + b)\n\n\ndef right_angle_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Calculate the dot product of a and b\n    dot_product = a * b\n    # If the dot product is less than or equal to the sum of the two sides\n    # of the triangle, then the triangle is right-angled.\n    return (dot_product <= a + b) and (dot_product <= c + b)\n\n\ndef right_angle_triangle_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three",
      -8.2734375
    ],
    [
      "return a + b > c or a + c > b or b + c > a\n\ndef triangle_area(a, b, c):\n    '''\n    Given the length of the three sides of a triangle. Return its area.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return a + b + c\n\ndef is_right_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_triangle(3, 4, 5) == True\n    is_right_triangle(1, 2, 3) == False\n    '''\n    return a + b > c or a + c > b or b + c > a\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b > c or a + c > b or b + c > a\n\nif __name__ == \"__main__\":\n    print(\"is_right_triangle(3, 4, 5) == %s\" % is_right_triangle(3, 4, 5))\n    print(\"is_triangle(3, 4, 5) == %s\" % is_triangle(3, 4, 5))",
      -8.75
    ],
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a three-sided shape, and has 3 sides.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b > c and a + c > b and b + c > a\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a square, False otherwise.\n    A square is a four-sided shape, and has 4 sides.\n    Example:\n    is_square(3, 4, 5) == False\n    is_square(1, 2, 3) == True\n    '''\n    return a + b > c and a + c > b and b + c > a\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a rectangle, False otherwise.\n    A rectangle is a four-sided shape, and has 4 sides.\n    Example:\n    is_rectangle(3, 4, 5) == False\n    is_rectangle(1, 2, 3) == False\n    is_rectangle(1, 2, 4) == True\n    '''\n    return a + b > c and a + c > b and b + c > a\n\ndef is_pentagon(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a pentagon, False otherwise.\n    A pentagon is a five-sided shape, and has 5 sides.\n    Example:\n    is_pentagon(3, 4, 5) == False\n    is_pentagon(1, 2, 3) == False\n    is_pentagon(1, 2, 4)",
      -8.7578125
    ],
    [
      "return a*b > c*c and b*c > a*a\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which one side is equal to the sum of the other\n    two sides.\n    Example:\n    is_triangle(3, 4, 5) == False\n    is_triangle(1, 2, 3) == True\n    '''\n    return a + b == c\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    A square is a square in which one side is equal to the square of the other\n    sides.\n    Example:\n    is_square(3, 4, 5) == False\n    is_square(1, 2, 3) == True\n    '''\n    return a*a == b*b and b*b == c*c\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the three\n    sides form a rectangle, False otherwise.\n    A rectangle is a rectangle in which all three sides are equal.\n    Example:\n    is_rectangle(3, 4, 5) == False\n    is_rectangle(1, 2, 3) == True\n    '''\n    return a == b == c\n\ndef is_orthogonal(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three\n    sides form an orthogonal triangle, False otherwise.\n    A triangle is an orthogonal triangle if the three sides are equal.\n    Example:\n    is_orthogonal(3, 4, 5) == False\n    is_orthogonal(1, 2, 3) == True\n    '''\n    return a == b == c\n\ndef is_in_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of",
      -9.3671875
    ],
    [
      "return (a**2 + b**2 == c**2) and ((a + b > c) and (a + c > b) and (b + c > a))\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\ndef is_square(a, b):\n    '''\n    Given the lengths of the two sides of a square. Return True if the two sides\n    form a square, False otherwise.\n    Example:\n    is_square(3, 4) == True\n    is_square(1, 2) == False\n    '''\n    return (a**2 == b**2)\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the three\n    sides form a rectangle, False otherwise.\n    Example:\n    is_rectangle(3, 4, 5) == True\n    is_rectangle(1, 2, 3) == False\n    '''\n    return (a**2 == b**2 and b**2 == c**2)\n\ndef is_rectangle_or_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle or square. Return True\n    if the three sides form a rectangle or square, False otherwise.\n    Example:\n    is_rectangle_or_square(3, 4, 5) == True\n    is_rectangle_or_square(1, 2, 3) == False\n    '''\n    return is_rectangle(a, b) or is_square(a, b)\n\ndef is_square_or_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a square or rectangle. Return True\n    if the three sides form a square or rectangle, False otherwise.\n    Example:",
      -9.4140625
    ],
    [
      "return a + b > c and a + c > b and b + c > a\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a == b == c\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 7.5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return 0.5 * (a + b + c)\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 12\n    triangle_perimeter(1, 2, 3) == 0\n    '''\n    return a + b + c\n\ndef main():\n    print(\"Is triangle?\", is_triangle(3, 4, 5))\n    print(\"Is triangle?\", is_triangle(1, 2, 3))\n    print(\"Is triangle?\", is_triangle(2, 3, 4))\n    print(\"Is triangle?\", is_triangle(3, 4, 4))\n    print(\"Is triangle?\", is_triangle(4, 5, 6))\n    print(\"Is triangle?\", is_triangle(3, 4, 2))\n    print(\"Is triangle?\", is_triangle(1, 2, 3))\n    print(\"Is triangle?\", is_triangle(1, 2, 4))\n    print(\"Is triangle?\", is_triangle(2, 3, 4))\n    print(\"Is triangle?\", is_triangle(2, 3, 3))\n    print(\"Is triangle?\", is_triangle(1, 2, 5))",
      -9.484375
    ],
    [
      "return a + b > c and a + c > b and a + b > c\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b > c and a + c > b and a + b > c\n\ndef is_square(a, b):\n    '''\n    Given the lengths of the two sides of a square. Return True if the two sides\n    form a square, False otherwise.\n    Example:\n    is_square(3, 4) == True\n    is_square(5, 4) == False\n    '''\n    return a + b == c\n\ndef is_square_with_odd_sides(a, b):\n    '''\n    Given the lengths of the two sides of a square. Return True if the two sides\n    form a square with an odd number of sides, False otherwise.\n    Example:\n    is_square_with_odd_sides(3, 4) == True\n    is_square_with_odd_sides(5, 4) == False\n    '''\n    return (a + b) % 2 == 1\n\ndef is_rectangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the three\n    sides form a rectangle, False otherwise.\n    Example:\n    is_rectangle(3, 4, 5) == True\n    is_rectangle(1, 2, 3) == False\n    '''\n    return a + b > c and a + c > b and a + b > c\n\ndef is_rectangle_with_odd_sides(a, b, c):\n    '''\n    Given the lengths of the three sides of a rectangle. Return True if the three\n    sides form a rectangle with an odd number of sides, False otherwise.\n    Example:\n    is_rectangle_with_odd_sides(3, 4, 5) == True",
      -9.96875
    ],
    [
      "return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef right_angle_triangles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return a list of \n    right-angled triangles.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangles(3, 4, 5) == [\n        [3, 4, 5],\n        [1, 2, 3],\n        [1, 3, 4],\n        [1, 4, 5],\n        [2, 3, 4],\n        [2, 4, 5],\n        [3, 4, 5]\n    ]\n    '''\n    return [\n        [a, b, c],\n        [a, b, c + 1],\n        [a, b + 1, c],\n        [a, b + 1, c + 1],\n        [a + 1, b, c],\n        [a + 1, b, c + 1],\n        [a + 1, b + 1, c],\n        [a + 1, b + 1, c + 1]\n    ]\n\ndef right_angle_triangles_recursive(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return a list of \n    right-angled triangles.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangles_recursive(3, 4, 5) == [\n        [3, 4, 5],\n        [1, 2, 3],\n        [1, 3, 4],\n        [1, 4, 5],\n        [2, 3, 4],\n        [2, 4, 5],\n        [3, 4, 5]\n    ]\n    '''\n    if a + b > c:\n        return [\n            [a, b, c],\n            [a, b, c + 1],\n            [a, b + 1, c],\n            [a, b + 1, c + 1],",
      -9.984375
    ],
    [
      "return abs(a + b - c) < (a + b) / 2\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal or the sum of\n    the three sides is equal to the length of the triangle.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return a + b > c + b > a + c\n\ndef is_square(a, b, c):\n    '''\n    Given the lengths of the three sides of a square. Return True if the three\n    sides form a square, False otherwise.\n    A square is a square in which all three sides are equal.\n    Example:\n    is_square(3, 4, 5) == False\n    is_square(1, 2, 3) == True\n    '''\n    return a + b == c + b\n\ndef is_pentagon(a, b, c):\n    '''\n    Given the lengths of the three sides of a pentagon. Return True if the three\n    sides form a pentagon, False otherwise.\n    A pentagon is a pentagon in which all three sides are equal.\n    Example:\n    is_pentagon(3, 4, 5) == False\n    is_pentagon(1, 2, 3) == True\n    '''\n    return a + b == c + b + 2 * a\n\ndef is_hexagon(a, b, c):\n    '''\n    Given the lengths of the three sides of a hexagon. Return True if the three\n    sides form a hexagon, False otherwise.\n    A hexagon is a hexagon in which all three sides are equal.\n    Example:\n    is_hexagon(3, 4, 5) == False\n    is_hexagon(1, 2, 3) == True\n    '''\n    return a + b == c + b + 2 * a + 2 * b\n\ndef is_heptagon(a, b, c):",
      -10.0703125
    ],
    [
      "a_plus_b_minus_c = a + b - c\n    return (a_plus_b_minus_c >= 0) and (a_plus_b_minus_c <= 3)\n\ndef is_triangle_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an equilateral triangle, False otherwise.\n    An equilateral triangle is a triangle in which all three sides are equal or \n    within a tolerance of 1e-10.\n    Example:\n    is_triangle_equilateral(3, 4, 5) == True\n    is_triangle_equilateral(1, 2, 3) == False\n    '''\n    a_plus_b_minus_c = a + b - c\n    return (a_plus_b_minus_c >= -1e-10) and (a_plus_b_minus_c <= 1e-10)\n\ndef is_triangle_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an isosceles triangle, False otherwise.\n    An isosceles triangle is a triangle in which all three sides are equal or \n    within a tolerance of 1e-10.\n    Example:\n    is_triangle_isosceles(3, 4, 5) == False\n    is_triangle_isosceles(1, 2, 3) == True\n    '''\n    a_plus_b_minus_c = a + b - c\n    return (a_plus_b_minus_c <= -1e-10) and (a_plus_b_minus_c >= 1e-10)\n\ndef is_triangle_scalene(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a scalene triangle, False otherwise.\n    A scalene triangle is a triangle in which all three sides are equal.\n    Example:\n    is_triangle_scalene(3, 4, 5) == False\n    is_tri",
      -10.328125
    ],
    [
      "return a*b >= c*c and a*c >= b*b\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its area.\n    Example:\n    triangle_area(3, 4, 5) == 7.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return a*b/2 + c*a/2\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its perimeter.\n    Example:\n    triangle_perimeter(3, 4, 5) == 9\n    triangle_perimeter(1, 2, 3) == 0\n    '''\n    return 2*(a+b+c)\n\ndef triangle_perimeter_ratio(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its perimeter ratio.\n    Example:\n    triangle_perimeter_ratio(3, 4, 5) == 6\n    triangle_perimeter_ratio(1, 2, 3) == 0\n    '''\n    return 3*(a+b+c)/2\n\ndef triangle_area_ratio(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its area ratio.\n    Example:\n    triangle_area_ratio(3, 4, 5) == 5\n    triangle_area_ratio(1, 2, 3) == 0\n    '''\n    return 2*(a+b+c)/3\n\ndef test_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert triangle_area(3, 4, 5) == 7.0\n    assert triangle_area(1, 2, 3) == 0.0\n    assert triangle_perimeter(3, 4, 5) == 9\n    assert triangle_perimeter(1, 2, 3) == 0\n    assert triangle_perimeter_ratio(3, 4,",
      -10.3359375
    ],
    [
      "# return True if the three sides form a right-angled triangle\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2)\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its area.\n    Example:\n    triangle_area(3, 4, 5) == 5.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return 0.5 * (a + b + c)\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its perimeter.\n    Example:\n    triangle_perimeter(3, 4, 5) == 10.0\n    triangle_perimeter(1, 2, 3) == 0.0\n    '''\n    return 2 * (a + b + c)\n\ndef triangle_perimeter_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its perimeter\n    area.\n    Example:\n    triangle_perimeter_area(3, 4, 5) == 10.0\n    triangle_perimeter_area(1, 2, 3) == 0.0\n    '''\n    return triangle_perimeter(a, b, c) * 0.5\n\ndef triangle_area_perimeter_ratio(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return its perimeter\n    area ratio.\n    Example:\n    triangle_area_perimeter_ratio(3, 4, 5) == 2.0\n    triangle_area_perimeter_ratio(1, 2, 3) == 0.0\n    '''\n    return triangle_perimeter_area(a, b, c) / triangle_area(a, b, c)\n\nif __name__ == '__main__':\n    print('triangle_area(3, 4, 5) ==', triangle_area(3, 4, 5))\n    print('triangle_area(1, 2, 3) ==',",
      -10.8671875
    ],
    [
      "return ((a + b + c) / 2.0) ** 2.0 == (a + b + c)\n\ndef is_triangle_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_right_angle(3, 4, 5) == True\n    is_triangle_right_angle(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c)\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 5.0\n    triangle_area(1, 2, 3) == 0.0\n    '''\n    return (a + b + c) / 2.0\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of \n    the triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 12.0\n    triangle_perimeter(1, 2, 3) == 0.0\n    '''\n    return (a + b + c) * 2.0\n\ndef is_triangle_right_angle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_triangle_right_angle_perimeter(3, 4, 5) == True\n    is_triangle_right_angle_perimeter(1, 2, 3) == False\n    '''\n    return right_angle_triangle(a, b, c) and",
      -11.484375
    ],
    [
      "if (a + b > c and a + c > b and b + c > a):\n        return True\n    else:\n        return False\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 7.5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return abs(a * b + b * c + c * a) / 2.0\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 6.0\n    triangle_perimeter(1, 2, 3) == 0\n    '''\n    return (a + b + c) * 2.0\n\ndef triangle_perimeter_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_perimeter_area(3, 4, 5) == 7.5\n    triangle_perimeter_area(1, 2, 3) == 0\n    '''\n    return triangle_perimeter(a, b, c) / 2.0\n\ndef triangle_sides_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_sides_area(3, 4, 5) == 7.5\n    triangle_sides_area(1, 2, 3) == 0\n    '''\n    return (a + b + c) / 2.0\n\ndef triangle_sides_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle.\n    Example:\n    triangle_sides_perimeter(3, 4, 5) == 6.0\n    triangle",
      -11.8515625
    ],
    [
      "return a >= (b + c) and b >= (a + c) and c >= (a + b)\n\n\ndef check_triangle(triangle):\n    '''\n    Given a triangle, check whether it's valid or not.\n    A triangle is valid if all three sides are equal, or if right angle triangle\n    is valid.\n    Example:\n    check_triangle([1, 2, 3]) == True\n    check_triangle([4, 5, 6]) == True\n    check_triangle([7, 8, 9]) == False\n    check_triangle([3, 4, 5]) == False\n    '''\n    a, b, c = triangle\n    if right_angle_triangle(a, b, c) and a == b + c:\n        return True\n    else:\n        return False\n\n\ndef check_triangle_with_angles(triangle):\n    '''\n    Given a triangle, check whether it's valid or not.\n    A triangle is valid if all three sides are equal, or if right angle triangle\n    is valid.\n    Example:\n    check_triangle_with_angles([1, 2, 3]) == True\n    check_triangle_with_angles([4, 5, 6]) == True\n    check_triangle_with_angles([7, 8, 9]) == False\n    check_triangle_with_angles([3, 4, 5]) == False\n    '''\n    a, b, c = triangle\n    if right_angle_triangle(a, b, c) and a == b + c:\n        return True\n    else:\n        return False\n\n\ndef main():\n    '''\n    The main function.\n    '''\n    # Test case 1: Valid triangle\n    print(\"Test case 1:\")\n    triangle = [1, 2, 3]\n    print(check_triangle(triangle))\n\n    # Test case 2: Invalid triangle\n    print(\"Test case 2:\")\n    triangle = [1, 2, 4]\n    print(check_triangle(triangle))\n\n    # Test case 3: Valid triangle with angles\n    print(\"Test case 3:\")\n    triangle = [1, 2, 3]\n    print(",
      -12.7890625
    ],
    [
      "# Triangles with angles below this angle are not right-angled\n    MIN_ANGLE = 45\n    return a + b > c and a + c > b and a + b > c\n\ndef right_angle_triangle_count(n):\n    '''\n    Given an integer, return the number of right-angled triangles with sides of\n    length n.\n    Example:\n    right_angle_triangle_count(3) == 3\n    right_angle_triangle_count(5) == 5\n    right_angle_triangle_count(7) == 2\n    '''\n    return sum(1 for i in range(n) if right_angle_triangle(i, n - i, n - 2 * i))\n\ndef triangle_area(n):\n    '''\n    Given an integer, return the area of the triangle with sides of length n.\n    Example:\n    triangle_area(3) == 1\n    triangle_area(4) == 4/3\n    triangle_area(5) == 5/2\n    '''\n    return 2 * n / 3 * (n - 1)\n\ndef triangle_perimeter(n):\n    '''\n    Given an integer, return the perimeter of the triangle with sides of length n.\n    Example:\n    triangle_perimeter(3) == 3 + 2 + 1\n    triangle_perimeter(4) == 6 + 4 + 2\n    triangle_perimeter(5) == 6 + 4 + 3\n    '''\n    return n * (n + 1) / 2\n\ndef triangle_volume(n):\n    '''\n    Given an integer, return the volume of the triangle with sides of length n.\n    Example:\n    triangle_volume(3) == 1/3\n    triangle_volume(4) == 1/2\n    triangle_volume(5) == 1/1\n    '''\n    return n * (n - 1) * (n - 2) / 6\n\ndef main():\n    print right_angle_triangle_count(10)\n    print triangle_area(10)\n    print triangle_perimeter(10)\n    print triangle_volume(10)\n\nif __name__ == '__main__",
      -12.9921875
    ],
    [
      "return (a + b <= c and a + c <= b) or (b + c <= a and b + a <= c)\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a triangle in which all three sides are equal.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    return (a + b == c and a + c == b and b + c == a) or (b + c == a and b + a == c and c + a == b) or (a + b == c and a + c == b and c + b == a)\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the triangle.\n    A triangle is a triangle in which all three sides are equal.\n    Example:\n    triangle_area(3, 4, 5) == 5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return (a + b == c and a + c == b and b + c == a) or (b + c == a and b + a == c and c + a == b) or (a + b == c and a + c == b and c + b == a)\n\nif __name__ == \"__main__\":\n    print is_triangle(3, 4, 5)\n    print is_triangle(1, 2, 3)\n    print is_triangle(6, 4, 10)\n    print is_triangle(3, 4, 2)\n    print is_triangle(4, 2, 3)\n    print is_triangle(4, 5, 4)\n    print is_triangle(3, 4, 5)\n    print is_triangle(3, 4, 5)\n    print is_triangle(3, 4, 5)\n    print is_triangle(3, 4, 5)\n    print is_triangle(3, 4, 5)\n    print",
      -14.7265625
    ],
    [
      "return a >= b and a >= c and b >= c\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    An isosceles triangle is a triangle in which all three sides have the same\n    length.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    is_triangle(1, 1, 1) == False\n    '''\n    return a >= b and b >= c and c >= a\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the\n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 7.5\n    triangle_area(1, 2, 3) == 0\n    '''\n    return abs(a * b + b * c + c * a) / 2.0\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the perimeter of\n    the triangle.\n    Example:\n    triangle_perimeter(3, 4, 5) == 9\n    triangle_perimeter(1, 2, 3) == 0\n    '''\n    return a + b + c\n\ndef triangle_circumference(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the\n    triangle.\n    Example:\n    triangle_circumference(3, 4, 5) == 9\n    triangle_circumference(1, 2, 3) == 0\n    '''\n    return 2 * triangle_area(a, b, c)\n\nif __name__ == '__main__':\n    '''\n    Test cases:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    is_triangle(1, 1, 1) == False\n    '''\n    print is",
      -15.8984375
    ],
    [
      "return a + b > c or b + c > a or a + c > b\n\ndef area_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the\n    triangle.\n    Example:\n    area_triangle(3, 4, 5) == 5\n    area_triangle(1, 2, 3) == 0\n    '''\n    return abs(a + b - c)\n\ndef perimeter_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the perimeter.\n    Example:\n    perimeter_triangle(3, 4, 5) == 7\n    perimeter_triangle(1, 2, 3) == 0\n    '''\n    return 2 * (a + b + c)\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the\n    triangle.\n    Example:\n    area_triangle(3, 4, 5) == 5\n    area_triangle(1, 2, 3) == 0\n    '''\n    return abs(a + b - c)\n\ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the perimeter.\n    Example:\n    perimeter_triangle(3, 4, 5) == 7\n    perimeter_triangle(1, 2, 3) == 0\n    '''\n    return 2 * (a + b + c)\n\n\n# --------------------------------------------------------------\n# Test cases\n# --------------------------------------------------------------\n\n# Test case 1\ntest_cases = [\n    (3, 4, 5, True),\n    (1, 2, 3, False),\n]\n\n# --------------------------------------------------------------\n# Main\n# --------------------------------------------------------------\n\n# Run tests\nfor test in test_cases:\n    print(test)\n    result = area_triangle(*test)\n    print('area_triangle: %s' % result)\n\n    result = perimeter_triangle(*test)\n    print('perimeter_triangle: %s' % result)\n\n    result",
      -16.90625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}