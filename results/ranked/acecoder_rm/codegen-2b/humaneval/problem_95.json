{
  "problem": {
    "task_id": "HumanEval/95",
    "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
    "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n",
    "entry_point": "check_dict_case",
    "docstring": "",
    "problem_id": 95
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if not isinstance(dict, dict):\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\n\ndef is_number(value):\n    try:\n        float(value)\n        return True\n    except ValueError:\n        return False\n\n\ndef check_number(value):\n    \"\"\"\n    Given a value, return True if it is a float, else return False.\n    \"\"\"\n    if isinstance(value, float):\n        return True\n    else:\n        return False\n\n\ndef get_number(value):\n    \"\"\"\n    Given a value, return a float value if it is a float, else return None.\n    \"\"\"\n    if isinstance(value, float):\n        return value\n    else:\n        return None\n\n\ndef get_list(value):\n    \"\"\"\n    Given a value, return a list if it is a list, else return None.\n    \"\"\"\n    if isinstance(value, list):\n        return value\n    else:\n        return None\n\n\ndef get_number_list(value):\n    \"\"\"\n    Given a value, return a list of numbers if it is a list of numbers, else return None.\n    \"\"\"\n    if isinstance(value, list):\n        for i in range(len(value)):\n            if not is_number(value[i]):\n                return None\n        return value\n    else:\n        return None\n\n\ndef get_list_of_lists(value):\n    \"\"\"\n    Given a value, return a list of lists if it is a list of lists, else return None.\n    \"\"\"\n    if isinstance(value, list):\n        for i in range(len(value)):\n            if not isinstance(value[i], list):\n                return None\n        return value\n    else:\n        return None\n\n\ndef get_list_of_strings(value):\n    \"\"\"\n    Given a value, return a list of strings if it is a list of strings, else return None.\n    \"\"\"\n    if isinstance(value, list):\n        for i in range(len(value)):\n            if not isinstance(value[i], str):\n                return None\n        return value",
      4.0859375
    ],
    [
      "if not dict:\n        return False\n    elif not isinstance(dict, dict):\n        return False\n    elif not all(isinstance(key, str) for key in dict.keys()):\n        return False\n    else:\n        keys = list(dict.keys())\n        for key in keys:\n            if not key.islower() and not key.isupper():\n                return False\n        return True\n\n\n# --------------------------------------------------------------\n# Main\n# --------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
      3.927734375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True\n\n\ndef check_dict_all(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in upper \n    case or all keys are strings in lower case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_all({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_all({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_all({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_all({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_all({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.isupper()!= key.islower():\n            return False\n    return True\n\n\ndef check_list_all(list_):\n    \"\"\"\n    Given a list, return True if all items are strings in upper \n    case or all items are strings in lower case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_all([\"a\",\"b\"]) should return True.\n    check_list_all([\"a\",\"B\"]) should return False.\n    check_list_all([\"a\",\"apple\"]) should return False.\n    check_list_all([\"Name\",\"John\", \"Age\",\"36\", \"City\",\"Houston\"]) should return False.\n    check_list_all([\"STATE\",\"NC\", \"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if len(list_) == 0:\n        return False",
      2.724609375
    ],
    [
      "if len(dict) == 0:\n        return False\n    else:\n        return all(key.islower() or key.isupper() for key in dict.keys())\n\ndef check_dict_contains(dict, key):\n    \"\"\"\n    Given a dictionary, return True if the given key is in the dictionary,\n    else return False.\n    Examples:\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"a\") should return True.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"b\") should return True.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"C\") should return False.\n    \"\"\"\n    return key in dict\n\ndef check_dict_key(dict, key):\n    \"\"\"\n    Given a dictionary, return True if the given key is in the dictionary,\n    else return False.\n    Examples:\n    check_dict_key({\"a\":\"apple\", \"b\":\"banana\"}, \"a\") should return True.\n    check_dict_key({\"a\":\"apple\", \"b\":\"banana\"}, \"b\") should return True.\n    check_dict_key({\"a\":\"apple\", \"b\":\"banana\"}, \"C\") should return False.\n    \"\"\"\n    return key in dict\n\ndef check_dict_value(dict, value):\n    \"\"\"\n    Given a dictionary, return True if the given value is in the dictionary,\n    else return False.\n    Examples:\n    check_dict_value({\"a\":\"apple\", \"b\":\"banana\"}, \"apple\") should return True.\n    check_dict_value({\"a\":\"apple\", \"b\":\"banana\"}, \"banana\") should return True.\n    check_dict_value({\"a\":\"apple\", \"b\":\"banana\"}, \"C\") should return False.\n    \"\"\"\n    return value in dict\n\ndef check_dict_values(dict, values):\n    \"\"\"\n    Given a dictionary, return True if all of the given values are in the dictionary,\n    else return False.\n    Examples:\n    check_dict_values({\"a\":\"apple\", \"b\":\"banana\"}, [\"apple\", \"banana\"]) should return True.",
      0.986328125
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    else:\n        if len(dict) == 0:\n            return False\n        else:\n            for key, value in dict.iteritems():\n                if not isinstance(key, str):\n                    return False\n                elif not isinstance(value, str):\n                    return False\n                elif key.islower()!= value.islower():\n                    return False\n                elif key.isupper()!= value.isupper():\n                    return False\n    return True\n\n\ndef is_integer(num):\n    \"\"\"\n    Given a string, return True if the string is an integer else return False.\n    Examples:\n    is_integer(\"0\") should return True.\n    is_integer(\"2\") should return True.\n    is_integer(\"2.5\") should return False.\n    is_integer(\"2.5a\") should return False.\n    \"\"\"\n    try:\n        num = int(num)\n        return True\n    except ValueError:\n        return False",
      0.90966796875
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert check_dict_case({}), \"Empty dictionary\"\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}), \"Lower case\"\n    assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}), \"Upper case\"\n    assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}), \"Duplicate keys\"\n    assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}), \"Extra keys\"\n    assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}), \"Lower case\"",
      0.8271484375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if key.islower():\n            if value.islower():\n                continue\n            else:\n                return False\n        elif key.isupper():\n            if value.isupper():\n                continue\n            else:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
      0.80908203125
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n        if key.islower():\n            return True\n    return True\n\ndef check_dict_case_2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in upper case \n    or all keys are strings in lower case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_2({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_2({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_2({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_2({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_2({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            return False\n        if key.isupper():\n            return True\n    return True\n\ndef check_dict_case_3(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower case \n    or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_3({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_3({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_3({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_3({\"Name\":\"John\", \"Age\":\"36\", \"",
      0.6533203125
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}), \"Some key is not lowercase\"\n    assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}), \"Some key is not uppercase\"\n    assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}), \"Some value is not lowercase\"\n    assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}), \"Some value is not uppercase\"\n    assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }), \"Some key is not uppercase\"",
      0.57568359375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if key.isupper():\n            if key.lower()!= key:\n                return False\n        else:\n            if key.upper()!= key:\n                return False\n    return True\n\ndef check_dict_case_lower(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if key.isupper():\n            if key.lower()!= key:\n                return False\n    return True\n\ndef check_dict_case_upper(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in upper \n    case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"",
      0.4501953125
    ],
    [
      "if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if not key.isupper() and not key.islower():\n                return False\n    return True\n\ndef check_dict_contains(dict, key, value):\n    \"\"\"\n    Given a dictionary and a key, return True if the key is in the dictionary and value is in the dictionary, else return False.\n    Examples:\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"a\", \"apple\") should return True.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"b\", \"banana\") should return True.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"c\", \"banana\") should return False.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"d\", \"apple\") should return False.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"A\", \"apple\") should return True.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"A\", \"banana\") should return False.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"B\", \"banana\") should return True.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"B\", \"apple\") should return False.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"C\", \"apple\") should return False.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"C\", \"banana\") should return False.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"D\", \"apple\") should return False.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"D\", \"banana\") should return False.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"E\", \"apple\") should return False.\n    check_dict_contains({\"a\":\"apple\", \"b",
      0.355224609375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if key.isupper():\n            if key.lower()!= key:\n                return False\n        elif key.islower():\n            if key.upper()!= key:\n                return False\n    return True\n\ndef is_int(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_float(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_str(s):\n    try:\n        str(s)\n        return True\n    except TypeError:\n        return False\n\ndef is_dict(s):\n    try:\n        s.keys()\n        return True\n    except AttributeError:\n        return False\n\ndef is_list(s):\n    try:\n        s.__iter__()\n        return True\n    except AttributeError:\n        return False\n\ndef is_tuple(s):\n    try:\n        tuple(s)\n        return True\n    except TypeError:\n        return False\n\ndef is_str_or_int(s):\n    return is_str(s) or is_int(s)\n\ndef is_float_or_int(s):\n    return is_float(s) or is_int(s)\n\ndef is_dict_or_list(s):\n    return is_dict(s) or is_list(s)\n\ndef is_tuple_or_list(s):\n    return is_tuple(s) or is_list(s)\n\ndef is_str_or_float_or_int(s):\n    return is_str_or_int(s) or is_float_or_int(s)\n\ndef is_dict_or_list_or_tuple_or_str_or_float_or_int(s):\n    return is_dict_or_list(s) or is_tuple_or_list(s) or is_",
      0.2108154296875
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False\n        if key.islower()!= value.islower():\n            return False\n        if key.isupper()!= value.isupper():\n            return False\n    return True\n\n# check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n# check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n# check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n# check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n# check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\ndef check_dict_case_with_empty_dict(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_with_empty_dict({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_with_empty_dict({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_with_empty_dict({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_with_empty_dict({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_with_empty_dict({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return True\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False",
      -0.1856689453125
    ],
    [
      "if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n            elif len(key) > 1:\n                if key.islower():\n                    return False\n                elif key.isupper():\n                    return False\n            else:\n                if key.isupper():\n                    return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements in the list are strings in lower \n    case or all elements in the list are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\",\"b\",\"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"b\",\"banana\"]) should return False.\n    check_list_case([\"Name\",\"John\",\"Age\",\"36\", \"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\",\"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    else:\n        for element in list:\n            if not isinstance(element, str):\n                return False\n            elif len(element) > 1:\n                if element.islower():\n                    return False\n                elif element.isupper():\n                    return False\n            else:\n                if element.isupper():\n                    return False\n    return True\n\ndef check_list_case_2(list):\n    \"\"\"\n    Given a list, return True if all elements in the list are strings in lower \n    case or all elements in the list are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case_2([\"a\",\"apple\",\"b\",\"banana\"]) should return True.\n    check_list_case_2([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_",
      -0.25390625
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n# if __name__ == \"__main__\":\n#     test_cases = [\n#         ({\"a\":\"apple\", \"b\":\"banana\"}, True),\n#         ({\"a\":\"apple\", \"B\":\"banana\"}, False),\n#         ({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}, False),\n#         ({\"NAME\":\"John\", \"AGE\":\"36\", \"CITY\":\"Houston\"}, False),\n#         ({\"STATE\":\"NC\", \"ZIP\":\"12345\"}, True)\n#     ]\n#     for input_dict, output in test_cases:\n#         print(\"check_dict_case({}) = {}\".format(input_dict, check_dict_case(input_dict)))\n#         print(\"check_dict_case({}) = {}\".format(input_dict, check_dict_case_in_place(input_dict)))\n#         print(\"check_dict_case({}) = {}\".format(input_dict, check_dict_case_in_place(input_dict, True)))\n#     print(\"\\n\")",
      -0.34814453125
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            if key.isupper():\n                return False\n        elif key.isupper():\n            if key.islower():\n                return False\n    return True\n\ndef check_dict_case_2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_2({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_2({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_2({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_2({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_2({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower() and key.isupper():\n            return False\n    return True\n\nif __name__ == '__main__':\n    test_dict_case = {\"a\":\"apple\", \"b\":\"banana\"}\n    print(check_dict_case(test_dict_case))\n\n    test_dict_case_2 = {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}\n    print(check_dict_case_2(test_dict_case_2))\n\n    test_dict_case_3 = {\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}\n    print(check_dict_case_3(test_dict_case_3))\n\n    test_dict_case_4 = {\"Name\":\"John\", \"Age",
      -0.4951171875
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if key.islower() and value.islower():\n            return True\n        elif key.isupper() and value.isupper():\n            return True\n        else:\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    Simple test of check_dict_case()\n    \"\"\"\n    print(\"check_dict_case({\")\n    print(\"    'a': 'apple', \")\n    print(\"    'b': 'banana'\")\n    print(\"}). \")\n    print(check_dict_case({'a': 'apple', 'b': 'banana'}))\n    print(\"check_dict_case({\")\n    print(\"    'a': 'apple', \")\n    print(\"    'A': 'banana', \")\n    print(\"    'B': 'banana'\")\n    print(\"}). \")\n    print(check_dict_case({'a': 'apple', 'A': 'banana', 'B': 'banana'}))\n    print(\"check_dict_case({\")\n    print(\"    'a': 'apple', \")\n    print(\"    8: 'banana', \")\n    print(\"    'a': 'apple'\")\n    print(\"}). \")\n    print(check_dict_case({'a': 'apple', 8: 'banana', 'a': 'apple'}))\n    print(\"check_dict_case({\")\n    print(\"    'NAME': 'John', \")\n    print(\"    'AGE': '36', \")\n    print(\"    'CITY': 'Houston'\")\n    print(\"}). \")\n    print(check_dict_case({'NAME': 'John', 'AGE': '36', 'CITY': 'Houston'}))\n    print(\"check_dict_case({\")\n    print(\"    'STATE': 'NC', \")\n    print(\"    'ZIP': '12345'\")\n    print(\"}). \"",
      -0.60986328125
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    lower_keys = [key.lower() for key in dict]\n    upper_keys = [key.upper() for key in dict]\n    for key in lower_keys:\n        if key not in upper_keys:\n            return False\n    for key in upper_keys:\n        if key not in lower_keys:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
      -0.65625
    ],
    [
      "return all([isinstance(k, str) and isinstance(v, str)\n                for k, v in dict.items()])\n\n\ndef check_dict_case_with_value(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_with_value({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_with_value({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_with_value({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_with_value({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_with_value({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return all([isinstance(k, str) and isinstance(v, str)\n                for k, v in dict.items()]) and dict.get(\"City\", \"\")\n\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements are strings in lower \n    case or all elements are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\", \"b\",\"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\", \"A\",\"banana\", \"B\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\", 8,\"banana\", \"a\",\"apple\"]) should return False.\n    check_list_case([\"Name\",\"John\", \"Age\",\"36\", \"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\", \"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    return all([isinstance(v, str)",
      -0.73291015625
    ],
    [
      "return (all(isinstance(k, str) for k in dict.keys())) and (all(k.islower() for k in dict.keys()))\n\nif __name__ == \"__main__\":\n    print(check_dict_case({\"a\":\"apple\", \"B\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
      -0.85791015625
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if not key.isupper() and not key.islower():\n            return False\n    return True\n\n\n# Example test\nif __name__ == \"__main__\":\n    dict = {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}\n    print(\"is_dict_case:\", check_dict_case(dict))\n    print(\"is_dict_case_2:\", check_dict_case_2(dict))\n    print(\"is_dict_case_3:\", check_dict_case_3(dict))\n    print(\"is_dict_case_4:\", check_dict_case_4(dict))\n    print(\"is_dict_case_5:\", check_dict_case_5(dict))\n    print(\"is_dict_case_6:\", check_dict_case_6(dict))",
      -0.85791015625
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key:\n            return False\n    return True",
      -0.85791015625
    ],
    [
      "if not dict:\n        return False\n    else:\n        return all(map(lambda key: key.islower() or key.isupper(), dict.keys()))",
      -0.8583984375
    ],
    [
      "if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n        if not value.islower() and not value.isupper():\n            return False\n    return True",
      -0.8583984375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.isupper()!= dict[key].isupper():\n            return False\n    return True",
      -0.8583984375
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if key.islower() and value.islower():\n            return True\n        elif key.isupper() and value.isupper():\n            return True\n    return False",
      -0.8583984375
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict.keys():\n        if not key.islower():\n            return False\n    for key in dict.keys():\n        if not key.isupper():\n            return False\n    return True",
      -0.8583984375
    ],
    [
      "if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key:\n            return False\n        if key.upper()!= key:\n            return False\n        return True\n\n# Tests\ndef test_check_dict_case():\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True\n    assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False\n    assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False\n    assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False\n    assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True\n\n# Main\ndef main():\n    test_check_dict_case()\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "if not dict:\n        return False\n    else:\n        return all([key.islower() or key.isupper() for key in dict.keys()])",
      -0.8583984375
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print check_dict_case({'a': 'apple', 'b': 'banana'})\n    print check_dict_case({'a': 'apple', 'A': 'banana', 'B': 'banana'})\n    print check_dict_case({'a': 'apple', 8: 'banana', 'a': 'apple'})\n    print check_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})\n    print check_dict_case({'STATE': 'NC', 'ZIP': '12345'})",
      -0.8583984375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key, value in dict.iteritems():\n        if not isinstance(key, basestring):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True",
      -0.8583984375
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.isupper() and not key.islower():\n            return False\n    return True",
      -0.8583984375
    ],
    [
      "if len(dict) == 0:\n        return False\n    else:\n        for key in dict.keys():\n            if key not in dict.keys():\n                return False\n            else:\n                if not isinstance(dict[key], str):\n                    return False\n        return True",
      -0.8583984375
    ],
    [
      "return all(map(lambda k: isinstance(k, str), dict.keys())) and all(map(lambda k: k.islower() or k.isupper(), dict.keys()))",
      -0.8583984375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if key.lower()!= key:\n            return False\n    for key in dict:\n        if key.upper()!= key:\n            return False\n    return True\n\n# If we get this far, the test is passed\nprint(\"Test passed\")",
      -0.8583984375
    ],
    [
      "if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if key.isupper() and not value.isupper():\n            return False\n        elif key.islower() and not value.islower():\n            return False\n    return True",
      -0.8583984375
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() and key.isupper():\n            return False\n        if key.isupper() and key.islower():\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
      -0.8583984375
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        elif key.islower():\n            pass\n        elif key.isupper():\n            pass\n        else:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n    print(check_dict_case({\"A\":\"apple\", \"B\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))",
      -0.8583984375
    ],
    [
      "if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if not key.islower():\n            return False\n        if not value.islower():\n            return False\n    return True\n\n#-------------------------------------------------------------------------------\n#  Main program:\n#-------------------------------------------------------------------------------\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            if not isinstance(value, str):\n                return False\n        else:\n            if not isinstance(value, str):\n                return False\n    return True",
      -0.8583984375
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\n# Test Cases\nprint(check_dict_case({}))\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))",
      -0.85888671875
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper() and key.islower():\n            return True\n        if key.isupper() and not key.islower():\n            return False\n        if not key.isupper() and key.islower():\n            return False\n        if not key.isupper() and not key.islower():\n            return False\n    return True\n\ndef is_valid_input(input_dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    is_valid_input({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    is_valid_input({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    is_valid_input({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    is_valid_input({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    is_valid_input({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not isinstance(input_dict, dict):\n        return False\n    for key in input_dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper() and key.islower():\n            return True\n        if key.isupper() and not key.islower():\n            return False\n        if not key.isupper() and key.islower():\n            return False\n        if not key.isupper() and not key.islower():\n            return False\n    return True\n\n\ndef main():\n    \"\"\"\n    Main function to run the tests.\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()",
      -1.0224609375
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n        if key.islower():\n            return True\n    return True\n\ndef check_dict_case2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case2({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case2({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case2({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case2({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case2({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            return False\n        if key.isupper():\n            return True\n    return True\n\ndef check_dict_case3(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case3({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case3({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case3({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case3({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case3({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return",
      -1.09765625
    ],
    [
      "if not dict:\n        return False\n    if not isinstance(dict, dict):\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True\n\n\ndef check_dict_case_str(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_str({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_str({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_str({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_str({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_str({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    if not isinstance(dict, dict):\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True\n\n\ndef check_dict_case_int(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_int({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_int({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_int({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False",
      -1.166015625
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key:\n            return False\n        if key.upper()!= key:\n            return False\n    return True\n\ndef get_dict_values(dict):\n    \"\"\"\n    Given a dictionary, return a list of all values in the dictionary.\n    \"\"\"\n    return [v for v in dict.values()]\n\ndef get_dict_keys(dict):\n    \"\"\"\n    Given a dictionary, return a list of all keys in the dictionary.\n    \"\"\"\n    return [k for k in dict.keys()]\n\ndef get_dict_keys_with_values(dict):\n    \"\"\"\n    Given a dictionary, return a list of all keys in the dictionary\n    and a list of all values in the dictionary.\n    \"\"\"\n    return [k for k in dict.keys()]\n\ndef get_dict_values_with_keys(dict):\n    \"\"\"\n    Given a dictionary, return a list of all values in the dictionary\n    and a list of all keys in the dictionary.\n    \"\"\"\n    return [v for v in dict.values()]\n\ndef get_dict_values_with_keys_and_values(dict):\n    \"\"\"\n    Given a dictionary, return a list of all values in the dictionary\n    and a list of all keys in the dictionary.\n    \"\"\"\n    return [v for v in dict.values()]\n\ndef get_dict_values_with_keys_and_values_with_keys(dict):\n    \"\"\"\n    Given a dictionary, return a list of all values in the dictionary\n    and a list of all keys in the dictionary.\n    \"\"\"\n    return [v for v in dict.values()]\n\ndef get_dict_values_with_keys_and_values_with_keys_and_values(dict):\n    \"\"\"\n    Given a dictionary, return a list of all values in the dictionary\n    and a list of all keys in the dictionary.\n    \"\"\"\n    return [v for v in dict.values()]\n\ndef get_dict_",
      -1.2236328125
    ],
    [
      "if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n            else:\n                if key.islower():\n                    if not isinstance(dict[key], str):\n                        return False\n                else:\n                    if not isinstance(dict[key], str):\n                        return False\n    return True\n\ndef check_dict_case_with_list(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_with_list({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_with_list({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_with_list({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_with_list({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_with_list({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n            else:\n                if key.islower():\n                    if not isinstance(dict[key], str):\n                        return False\n                else:\n                    if not isinstance(dict[key], str):\n                        return False\n    return True\n\ndef check_dict_case_with_list_with_value(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_with_list_with_value({\"a\":\"apple\", \"b\":\"banana\"}",
      -1.287109375
    ],
    [
      "if not dict:\n        return False\n    if not isinstance(dict, dict):\n        return False\n    keys = dict.keys()\n    for key in keys:\n        if key not in dict:\n            return False\n        if not isinstance(dict[key], str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    # Your check_dict_case function should return true for the following cases:\n    # check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    # check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return True.\n    # check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    # check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    # check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    # Note: Do not count key as lowercase if it is upper case.\n    # Example 1:\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n    # Example 2:\n    print(check_dict_case({\"A\":\"banana\", \"B\":\"banana\"}))\n    # Example 3:\n    print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n    # Example 4:\n    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    # Example 5:\n    print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
      -1.318359375
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            if key.isupper():\n                return False\n        elif key.isupper():\n            if key.islower():\n                return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements in the list are strings in lower \n    case or all elements in the list are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\"]) should return True.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\",\"B\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\",\"b\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\",\"a\",\"apple\"]) should return False.\n    \"\"\"\n    if not list:\n        return False\n    for item in list:\n        if not isinstance(item, str):\n            return False\n        if item.islower():\n            if item.isupper():\n                return False\n        elif item.isupper():\n            if item.islower():\n                return False\n    return True\n\ndef is_valid_username(username):\n    \"\"\"\n    Check if the given username is valid.\n    The username is valid if it is a string and it is not empty.\n    Examples:\n    is_valid_username(\"john\") should return True.\n    is_valid_username(\"john@gmail.com\") should return False.\n    is_valid_username(\"john@gmail.com\") should return False.\n    is_valid_username(\"john\") should return False.\n    \"\"\"\n    if not username:\n        return False\n    if not isinstance(username, str):\n        return False\n    return True\n\ndef is_valid_email(email):\n    \"\"\"\n    Check if the given email",
      -1.498046875
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    return True\n\ndef check_dict_numeric(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are numbers in the\n    range of 0 to 9, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_numeric({\"a\":3, \"b\":\"banana\"}) should return True.\n    check_dict_numeric({\"a\":3, \"b\":\"banana\", \"c\":1.0}) should return False.\n    check_dict_numeric({\"a\":3, 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_numeric({\"a\":3, \"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_numeric({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, int):\n            return False\n    return True\n\ndef check_dict_not_empty(dict):\n    \"\"\"\n    Given a dictionary, return True if the dictionary is not empty, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_not_empty({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_not_empty({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_not_empty({\"a\":\"apple\", \"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_not_empty({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    return True\n\ndef check_dict_has_key(dict, key):\n    \"\"\"\n    Given a dictionary, return True if the dictionary has the given key, else return False.\n    The",
      -1.634765625
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\ndef check_dict_contains(dict, key):\n    \"\"\"\n    Given a dictionary and a key, return True if the dictionary contains\n    the key, else return False.\n    Examples:\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"a\") should return True.\n    check_dict_contains({\"a\":\"apple\", \"b\":\"banana\"}, \"B\") should return False.\n    check_dict_contains({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}, \"a\") should return False.\n    check_dict_contains({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}, \"City\") should return True.\n    check_dict_contains({\"STATE\":\"NC\", \"ZIP\":\"12345\"}, \"ZIP\") should return True.\n    \"\"\"\n    return key in dict\n\ndef check_dict_contains_all(dict, keys):\n    \"\"\"\n    Given a dictionary and a list of keys, return True if the dictionary\n    contains all keys, else return False.\n    Examples:\n    check_dict_contains_all({\"a\":\"apple\", \"b\":\"banana\"}, [\"a\",\"b\"]) should return True.\n    check_dict_contains_all({\"a\":\"apple\", \"b\":\"banana\"}, [\"a\",\"c\"]) should return False.\n    check_dict_contains_all({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}, [\"a\",\"b\"]) should return False.\n    check_dict_contains_all({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}, [\"City\",\"State\"]) should return True.\n    check_dict_contains_all({\"STATE\":\"NC\", \"ZIP\":\"12345\"}, [\"ZIP\"]) should return True.\n    \"\"\"\n    for key in keys:\n        if not check_dict_contains(dict, key):\n            return False\n    return True\n\ndef check_dict_does_not_contain(dict, key):\n    \"\"\"",
      -1.6884765625
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    if len(dict.keys())!= len(dict.values()):\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n    return True\n\ndef get_max_id(collection):\n    \"\"\"\n    Given a collection, return the max id in the collection.\n    If there is no max id, return 0.\n    \"\"\"\n    max_id = 0\n    for item in collection:\n        if not isinstance(item, dict):\n            continue\n        if \"id\" in item:\n            max_id = max(max_id, item[\"id\"])\n    return max_id\n\ndef get_max_id_for_collection(collection):\n    \"\"\"\n    Given a collection, return the max id in the collection.\n    If there is no max id, return 0.\n    \"\"\"\n    max_id = 0\n    for item in collection:\n        if not isinstance(item, dict):\n            continue\n        if \"id\" in item:\n            max_id = max(max_id, item[\"id\"])\n    return max_id\n\ndef is_collection_empty(collection):\n    \"\"\"\n    Given a collection, return True if it is empty, else return False.\n    \"\"\"\n    return len(collection) == 0\n\ndef is_collection_empty_or_contains_dict(collection):\n    \"\"\"\n    Given a collection, return True if it is empty, else return False.\n    If the collection contains a dict, return False.\n    \"\"\"\n    return is_collection_empty(collection) or not isinstance(collection[0], dict)\n\ndef is_collection_not_empty_or_contains_dict(collection):\n    \"\"\"\n    Given a collection, return True if it is not empty, else return False.\n    If the collection does not contain a dict, return False.\n    \"\"\"\n    return not is_collection_empty_or_contains_dict(collection)\n\ndef is_collection_not_empty_or_contains_dict",
      -1.78125
    ],
    [
      "if len(dict) == 0:\n        return False\n    else:\n        for key in dict.keys():\n            if not isinstance(key, str):\n                return False\n            else:\n                if not key.isupper():\n                    return False\n                elif not key.islower():\n                    return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements are strings in lower \n    case or all elements are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\"]) should return True.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"Name\",\"John\",\"Age\",\"36\",\"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\",\"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    else:\n        for item in list:\n            if not isinstance(item, str):\n                return False\n            else:\n                if not item.isupper():\n                    return False\n                elif not item.islower():\n                    return False\n    return True\n\ndef check_dict_order(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are in the same \n    case as the values, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_order({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_order({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return",
      -1.7822265625
    ],
    [
      "if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n        if not value.islower() and not value.isupper():\n            return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements in the list are strings in lower \n    case or all elements in the list are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\", \"b\",\"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\", \"A\",\"banana\", \"B\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\", 8,\"banana\", \"a\",\"apple\"]) should return False.\n    check_list_case([\"Name\",\"John\",\"Age\",\"36\",\"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\",\"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if not list:\n        return False\n    for item in list:\n        if not isinstance(item, str):\n            return False\n        if not item.islower() and not item.isupper():\n            return False\n    return True\n\ndef check_str_case(string):\n    \"\"\"\n    Given a string, return True if all characters in the string are lower \n    case or all characters in the string are upper case, else return False.\n    The function should return False is the given string is empty.\n    Examples:\n    check_str_case(\"a\") should return True.\n    check_str_case(\"A\") should return False.\n    check_str_case(\"Aa\") should return False.\n    check_str_case(\"Aaa\") should return False.\n    check_str_case(\"aA\") should return False.\n    check_str_case(\"aAa\") should return False.",
      -2.044921875
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n\ndef is_valid_email(email):\n    \"\"\"\n    Check if the given email is valid.\n    Examples:\n    is_valid_email(\"john@gmail.com\") should return True.\n    is_valid_email(\"john@gmail.com\") should return True.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email(\"john@gmail.com\") should return False.\n    is_valid_email",
      -2.234375
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\ndef check_dict_case_2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_2({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_2({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_2({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_2({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_2({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\ndef check_dict_case_3(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_3({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_3({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_3({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_3({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_3({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for",
      -2.296875
    ],
    [
      "if not dict:\n        return False\n    elif not isinstance(dict, dict):\n        return False\n    else:\n        return all(isinstance(key, str) and key.islower() for key in dict.keys())\n\n\ndef check_dict_case_with_non_string_keys(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_with_non_string_keys({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_with_non_string_keys({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_with_non_string_keys({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_with_non_string_keys({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_with_non_string_keys({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    elif not isinstance(dict, dict):\n        return False\n    else:\n        return all(isinstance(key, str) and key.islower() for key in dict.keys()) and all(isinstance(key, str) for key in dict.values())\n\n\ndef is_iterable(obj):\n    \"\"\"\n    Return True if obj is an iterable object, else return False.\n    Examples:\n    is_iterable([1,2,3,4]) should return True.\n    is_iterable(\"a\") should return False.\n    is_iterable(set([\"a\", \"b\"])) should return True.\n    is_iterable({\"a\":1, \"b\":2}) should return True.\n    is_iterable(None) should return False.\n    \"\"\"\n    return hasattr(obj, \"__iter__\")",
      -2.392578125
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            if key.isupper():\n                return False\n    return True\n\n\ndef print_dict(dict):\n    \"\"\"\n    Given a dictionary, print the keys and values in a pretty way.\n    Examples:\n    print_dict({\"a\":\"apple\", \"b\":\"banana\"}) should print the following:\n    'a' : 'apple'\n    'b' : 'banana'\n    \"\"\"\n    for key in dict:\n        print(\"'%s' : '%s'\" % (key, dict[key]))\n\n\ndef print_dict_case(dict):\n    \"\"\"\n    Given a dictionary, print the keys and values in a pretty way.\n    Examples:\n    print_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should print the following:\n    'a' : 'apple'\n    'b' : 'banana'\n    \"\"\"\n    if len(dict) == 0:\n        return\n    for key in dict:\n        if not isinstance(key, str):\n            return\n        if key.islower():\n            if key.isupper():\n                print(\"'%s' : '%s'\" % (key, dict[key]))\n            else:\n                print(\"'%s' : '%s'\" % (key, dict[key]))\n        else:\n            if key.isupper():\n                print(\"'%s' : '%s'\" % (key, dict[key]))\n            else:\n                print(\"'%s' : '%s'\" % (key, dict[key]))",
      -2.419921875
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.isupper():\n            return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all items are strings in lower \n    case or all items are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([1, 2, 3]) should return True.\n    check_list_case([1, \"apple\", \"banana\", \"banana\"]) should return False.\n    check_list_case([1, \"apple\", \"banana\", \"banana\", \"apple\"]) should return False.\n    check_list_case([1, \"apple\", \"banana\", \"banana\", \"apple\", \"apple\"]) should return False.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    for item in list:\n        if not isinstance(item, str):\n            return False\n        if not item.isupper():\n            return False\n    return True\n\ndef check_file_case(file_name):\n    \"\"\"\n    Given a file name, return True if the file name is in lower \n    case or upper case, else return False.\n    The function should return False is the given file name is empty.\n    \"\"\"\n    if len(file_name) == 0:\n        return False\n    if file_name.isupper():\n        return True\n    if file_name.islower():\n        return True\n    return False\n\ndef check_file_case_2(file_name):\n    \"\"\"\n    Given a file name, return True if the file name is in lower \n    case or upper case, else return False.\n    The function should return False is the given file name is empty.\n    \"\"\"\n    if len(file_name) == 0:\n        return False\n    if file_name.isupper():\n        return True\n    if file_name.islower():\n        return True\n    return False\n\ndef check_file_case_3(file_",
      -2.572265625
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    return True\n\ndef is_valid_phone_number(phone_number):\n    \"\"\"\n    Given a string, check if it is a valid phone number.\n    Examples:\n    is_valid_phone_number(\"+1 555-555-5555\") should return True.\n    is_valid_phone_number(\"+1 555555555\") should return False.\n    is_valid_phone_number(\"5555555555\") should return False.\n    is_valid_phone_number(\"55555555555555555555555555555555\") should return False.\n    is_valid_phone_number(\"1-555-555-5555\") should return False.\n    is_valid_phone_number(\"1 555-555-5555\") should return False.\n    is_valid_phone_number(\"555-555-5555\") should return False.\n    is_valid_phone_number(\"555 555-5555\") should return False.\n    is_valid_phone_number(\"5555555555\") should return False.\n    is_valid_phone_number(\"55555555555555555555555555555555\") should return False.\n    is_valid_phone_number(\"555 555-5555\") should return False.\n    is_valid_phone_number(\"555 555-555-5555\") should return False.\n    is_valid_phone_number(\"555 555555555\") should return False.\n    is_valid_phone_number(\"555 555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555",
      -2.603515625
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n        if not key.isupper():\n            return False\n    return True\n\ndef check_file_case(file):\n    \"\"\"\n    Given a file object, return True if all lines are lower case, else return False.\n    The function should return False is the given file is empty.\n    Examples:\n    check_file_case(\"/home/john/file.txt\") should return True.\n    check_file_case(\"/home/john/file.txt\") should return False.\n    check_file_case(\"/home/john/file.txt\") should return False.\n    check_file_case(\"/home/john/file.txt\") should return False.\n    check_file_case(\"/home/john/file.txt\") should return False.\n    \"\"\"\n    if not file:\n        return False\n    for line in file:\n        if not line.islower():\n            return False\n    return True\n\ndef check_file_case_in_dir(dir):\n    \"\"\"\n    Given a directory, return True if all files in that directory are lower case, else return False.\n    The function should return False if the given directory does not exist or is empty.\n    Examples:\n    check_file_case_in_dir(\"/home/john/file.txt\") should return True.\n    check_file_case_in_dir(\"/home/john/file.txt\") should return False.\n    check_file_case_in_dir(\"/home/john/file.txt\") should return False.\n    check_file_case_in_dir(\"/home/john/file.txt\") should return False.\n    check_file_case_in_dir(\"/home/john/file.txt\") should return False.\n    \"\"\"\n    if not os.path.isdir(dir):\n        return False\n    for file in os.listdir(dir):\n        if not check_file_case(open(dir + \"/\" + file, \"r\")):\n            return False\n    return True\n\ndef check_file_",
      -2.701171875
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n        if not isinstance(value, str):\n            return False\n        if not value.islower():\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n    \n    # print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n    # print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    # print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n    # print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    # print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
      -2.7265625
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.isupper():\n            return False\n    return True\n\ndef check_dict_case_lower(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_lower({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_lower({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_lower({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_lower({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_lower({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            return True\n    return False\n\ndef check_dict_case_upper(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_upper({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_upper({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_upper({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_upper({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return",
      -2.849609375
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key.upper():\n            return False\n    return True\n\ndef check_dict_case_2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_2({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_2({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_2({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_2({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_2({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key.upper():\n            return False\n    return True\n\ndef check_dict_case_3(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_3({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_3({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_3({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_3({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case",
      -2.923828125
    ],
    [
      "if len(dict) == 0:\n        return False\n    if all(isinstance(key, str) for key in dict.keys()):\n        for key in dict.keys():\n            if key.isupper():\n                if key.lower() not in dict:\n                    return False\n            elif key.islower():\n                if key.upper() not in dict:\n                    return False\n    return True\n\n\n#\n# Tests\n#\n\ndef test_is_valid_dict():\n    assert is_valid_dict({\"a\":\"apple\", \"b\":\"banana\"})\n    assert not is_valid_dict({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n    assert not is_valid_dict({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n    assert not is_valid_dict({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n    assert is_valid_dict({\"STATE\":\"NC\", \"ZIP\":\"12345\"})\n\ndef test_check_dict_case():\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    assert not check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n    assert not check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n    assert not check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n    assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"})\n\nif __name__ == \"__main__\":\n    test_is_valid_dict()\n    test_check_dict_case()",
      -2.939453125
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key:\n            return False\n    return True\n\ndef check_dict_length(dict):\n    \"\"\"\n    Given a dictionary, return True if the keys are all strings, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_length({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_length({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_length({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_length({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    return True\n\ndef check_dict_contains_all(dict, keys):\n    \"\"\"\n    Given a dictionary and a set of keys, return True if all keys are in the dictionary, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_contains_all({\"a\":\"apple\", \"b\":\"banana\"}, {\"a\",\"b\"}) should return True.\n    check_dict_contains_all({\"a\":\"apple\", \"b\":\"banana\"}, {\"b\",\"c\"}) should return False.\n    check_dict_contains_all({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}, {\"a\",\"b\",\"c\"}) should return False.\n    check_dict_contains_all({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}, {\"NAME\",\"AGE\",\"CITY\"}) should return False.\n    check_dict_contains_all({\"STATE\":\"NC\", \"ZIP\":\"12345\"}, {\"STATE\",\"ZIP\"}) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in keys:\n        if key not in dict",
      -2.9453125
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.isupper() and key.islower():\n            return False\n        elif key.isupper() and not key.islower():\n            return False\n        elif not key.isupper() and key.islower():\n            return False\n        elif not key.isupper() and not key.islower():\n            return False\n    return True\n\ndef check_dict_order(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are in order and the value\n    of each key is in the same order as the keys.\n    Examples:\n    check_dict_order({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}) should return True.\n    check_dict_order({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"donut\"}) should return False.\n    check_dict_order({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"donut\", \"e\":\"egg\"}) should return False.\n    check_dict_order({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"donut\", \"e\":\"egg\", \"f\":\"feast\"}) should return False.\n    check_dict_order({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"donut\", \"e\":\"egg\", \"f\":\"feast\", \"g\":\"good\"}) should return False.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    sorted_dict = sorted(dict.items(), key=lambda t: t[0])\n    for key in sorted_dict:\n        if key[0]!= sorted_dict[0][0]:\n            return False\n    return True\n\ndef check_dict_contains_keys(dict, keys):\n    \"\"\"\n    Given a dictionary and a list of keys, return True if all keys are in the dictionary\n    and the values of those keys are in the dictionary.\n    Examples:\n    check_dict_contains_",
      -2.96875
    ],
    [
      "if len(dict) == 0:\n        return False\n    else:\n        return all([isinstance(key, str) and key.islower() or key.isupper() \n                    for key in dict.keys()])\n\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements are strings in lower \n    case or all elements are strings in upper case, else return False.\n    Examples:\n    check_list_case([\"a\",\"apple\", \"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\", \"banana\", 8]) should return False.\n    check_list_case([\"a\",\"apple\", 8,\"banana\"]) should return False.\n    check_list_case([\"Name\",\"John\", \"Age\",\"36\", \"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\", \"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    else:\n        return all([isinstance(element, str) and element.islower() or element.isupper() \n                    for element in list])\n\n\ndef check_dict_contains_case(dict, key, value):\n    \"\"\"\n    Given a dictionary and a key and value, return True if the dictionary \n    contains the key and value, else return False.\n    Examples:\n    check_dict_contains_case({\"a\":\"apple\", \"b\":\"banana\"}, \"a\", \"apple\") should return True.\n    check_dict_contains_case({\"a\":\"apple\", \"b\":\"banana\"}, \"b\", \"banana\") should return True.\n    check_dict_contains_case({\"a\":\"apple\", \"b\":\"banana\"}, \"c\", \"banana\") should return False.\n    check_dict_contains_case({\"a\":\"apple\", \"b\":\"banana\"}, \"a\", \"apple\") should return False.\n    check_dict_contains_case({\"a\":\"apple\", \"b\":\"banana\"}, \"b\", \"apple\") should return False.\n    check_dict_contains_case({\"a\":\"apple\", \"b\":\"",
      -3.0078125
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements in the list are strings in \n    lower case or all elements are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([1,2,3]) should return True.\n    check_list_case([1,2,3,4,5]) should return True.\n    check_list_case([1,2,3,4,5,6,7]) should return True.\n    check_list_case([1,2,3,4,5,6,7,8]) should return False.\n    check_list_case([1,2,3,4,5,6,7,8,9]) should return False.\n    check_list_case([1,2,3,4,5,6,7,8,9,10]) should return False.\n    check_list_case([1,2,3,4,5,6,7,8,9,10,11]) should return False.\n    check_list_case([1,2,3,4,5,6,7,8,9,10,11,12]) should return False.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    for item in list:\n        if not isinstance(item, str):\n            return False\n        if not item.islower() and not item.isupper():\n            return False\n    return True\n\ndef check_input(args):\n    \"\"\"\n    Check if there are any wrong input parameters to the program.\n    If there are any wrong input parameters, then the program will\n    exit with a message and exit code of 1.\n    Examples:\n    check_input([\"apple\", \"banana\", \"banana\"]) should return True.\n    check_input([\"apple\", \"banana\", \"apple\"]) should return",
      -3.048828125
    ],
    [
      "if not dict:\n        return False\n    for key, value in dict.items():\n        if isinstance(key, str):\n            if not isinstance(value, str):\n                return False\n            if key.isupper() and value.islower():\n                continue\n            elif key.islower() and value.isupper():\n                continue\n            else:\n                return False\n    return True\n\n# In[ ]:\n\n\n# test function\n\n# print check_dict_case({'a':'apple', 'b':'banana'})\n# print check_dict_case({'a':'apple', 'A':'banana', 'B':'banana'})\n# print check_dict_case({'a':'apple', 8:'banana', 'a':'apple'})\n# print check_dict_case({'Name':'John', 'Age':'36', 'City':'Houston'})\n# print check_dict_case({'STATE':'NC', 'ZIP':'12345'})\n\n# test function\n\n# print check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n# print check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n# print check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n# print check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n# print check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:\n\n\n\n\n# In[ ]:",
      -3.154296875
    ],
    [
      "if not dict:\n        return False\n    elif not isinstance(dict, dict):\n        return False\n    elif not all([isinstance(x, str) for x in dict.keys()]):\n        return False\n    elif not all([x.islower() for x in dict.keys()]):\n        return False\n    elif not all([x.isupper() for x in dict.keys()]):\n        return False\n    return True\n\n#-----------------------------------------------------------------------\n# check_dict_case\n#-----------------------------------------------------------------------\ndef check_dict_case_1(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_1({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_1({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_1({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_1({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_1({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    elif not isinstance(dict, dict):\n        return False\n    elif not all([isinstance(x, str) for x in dict.keys()]):\n        return False\n    elif not all([x.islower() for x in dict.keys()]):\n        return False\n    elif not all([x.isupper() for x in dict.keys()]):\n        return False\n    return True\n\n#-----------------------------------------------------------------------\n# check_dict_case_2\n#-----------------------------------------------------------------------\ndef check_dict_case_2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should",
      -3.251953125
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n        if not key.isupper():\n            return False\n    return True\n\ndef get_list_from_file(filename):\n    \"\"\"\n    Given a filename, return a list of all the lines in the file.\n    The function should return an empty list if the file does not exist.\n    \"\"\"\n    if not os.path.exists(filename):\n        return []\n    with open(filename, 'r') as f:\n        return f.readlines()\n\ndef get_list_from_dir(dirname):\n    \"\"\"\n    Given a directory name, return a list of all the files in the directory.\n    The function should return an empty list if the directory does not exist.\n    \"\"\"\n    if not os.path.exists(dirname):\n        return []\n    return os.listdir(dirname)\n\ndef get_list_from_dir_recursive(dirname):\n    \"\"\"\n    Given a directory name, return a list of all the files in the directory\n    and all the sub-directories.\n    The function should return an empty list if the directory does not exist.\n    \"\"\"\n    if not os.path.exists(dirname):\n        return []\n    files = os.listdir(dirname)\n    subdirs = os.listdir(dirname)\n    for subdir in subdirs:\n        subdir = os.path.join(dirname, subdir)\n        files.extend(get_list_from_dir_recursive(subdir))\n    return files\n\ndef get_list_from_file_recursive(filename):\n    \"\"\"\n    Given a filename, return a list of all the files in the file\n    and all the sub-directories.\n    The function should return an empty list if the file does not exist.\n    \"\"\"\n    if not os.path.exists(filename):\n        return []\n    files = os.listdir(filename)\n    subdirs = os.listdir(filename)\n    for subdir",
      -3.26953125
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if not key.islower():\n            return False\n        if not key.isupper():\n            return False\n    return True\n\ndef check_dict_case_with_key(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_with_key({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_with_key({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_with_key({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_with_key({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_with_key({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if not key.islower():\n            return False\n        if not key.isupper():\n            return False\n    return True\n\ndef check_dict_case_with_key_and_value(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_with_key_and_value({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_with_key_and_value({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case",
      -3.56640625
    ],
    [
      "if not dict:\n        return False\n    elif not isinstance(dict, dict):\n        return False\n    else:\n        for key in dict.keys():\n            if not isinstance(key, str):\n                return False\n            else:\n                if not key.islower() and not key.isupper():\n                    return False\n    return True\n\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements in the list are strings in \n    lower case or all elements in the list are strings in upper case, else\n    return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\", \"apple\", \"banana\"]) should return True.\n    check_list_case([\"a\", \"apple\", \"banana\"]) should return False.\n    check_list_case([\"a\", \"apple\", 8, \"banana\"]) should return False.\n    check_list_case([\"Name\",\"John\", \"Age\",\"36\", \"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\", \"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if not list:\n        return False\n    elif not isinstance(list, list):\n        return False\n    else:\n        for value in list:\n            if not isinstance(value, str):\n                return False\n            else:\n                if not value.islower() and not value.isupper():\n                    return False\n    return True\n\n\ndef check_dict_case_and_list(dictionary, list):\n    \"\"\"\n    Given a dictionary and a list, return True if all elements in the list\n    are strings in lower case or all elements in the list are strings in \n    upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_and_list({\"a\":\"apple\", \"b\":\"banana\"}, [\"a\",\"apple\", \"banana\"]) should return True.\n    check_dict_case_and_list({\"a\":\"apple\", \"b\":\"banana\"}, [\"a\",\"apple\", \"banana\"])",
      -3.583984375
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        elif key.islower():\n            pass\n        elif key.isupper():\n            pass\n        else:\n            return False\n    return True\n\ndef check_dict_length(dict):\n    \"\"\"\n    Given a dictionary, return True if the length of the dictionary is \n    exactly equal to the length of the keys in the dictionary, else return \n    False.\n    Examples:\n    check_dict_length({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_length({\"a\":\"apple\", \"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_length({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_length({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_length({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    else:\n        return len(dict) == len(list(dict.keys()))\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all of the elements of the list are strings in lower \n    case or all elements of the list are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\"]) should return True.\n    check_list_case([\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\"]) should return False.\n    check_list_case([\"Name\",\"John\",\"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\",\"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if not list:\n        return False\n    for item in list:\n        if not isinstance(item, str):\n            return False\n        elif item.islower():\n            pass",
      -3.623046875
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, basestring):\n            return False\n        if key.islower():\n            pass\n        elif key.isupper():\n            pass\n        else:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    for key in check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}):\n        print key, \"is lower case\"\n    for key in check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}):\n        print key, \"is upper case\"\n    for key in check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}):\n        print key, \"is not a string\"\n    for key in check_dict_case({1:\"apple\", 2:\"banana\", 3:\"banana\"}):\n        print key, \"is not a number\"\n    for key in check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}):\n        print key, \"is not a valid key\"\n    for key in check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}):\n        print key, \"is not a valid key\"\n    for key in check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\"}):\n        print key, \"is not a valid key\"",
      -4.0703125
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key:\n            return False\n        if key.upper()!= key:\n            return False\n    return True\n\ndef check_dict_case_2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_2({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_2({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_2({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_2({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_2({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key:\n            return False\n        if key.upper()!= key:\n            return False\n    return True\n\ndef check_dict_case_3(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_3({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_3({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict",
      -4.078125
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n        if not value.islower() and not value.isupper():\n            return False\n    return True\n\n\ndef check_dict_is_case_sensitive(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_is_case_sensitive({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_is_case_sensitive({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_is_case_sensitive({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_is_case_sensitive({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_is_case_sensitive({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False\n        if key.islower()!= value.islower():\n            return False\n    return True\n\n\ndef check_dict_is_empty(dict):\n    \"\"\"\n    Given a dictionary, return True if the dictionary is empty, else return False.\n    Examples:\n    check_dict_is_empty({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_is_empty({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return True.\n    check_dict_is_empty({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should",
      -4.08203125
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\n# check_dict_case({'a': 'apple', 'A': 'banana'}) should return False\n# check_dict_case({'a': 'apple', 'A': 'banana', 'B': 'banana'}) should return True\n# check_dict_case({'a': 'apple', 8: 'banana', 'a': 'apple'}) should return False\n# check_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'}) should return False\n# check_dict_case({'STATE': 'NC', 'ZIP': '12345'}) should return True\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}), \"lowercase keys\"\n    assert not check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\", \"a\": \"apple\"}), \"mixed case keys\"\n    assert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}), \"lowercase keys\"\n    assert not check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), \"mixed case keys\"\n    assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}), \"uppercase keys\"",
      -4.203125
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            if isinstance(value, str):\n                return False\n        elif key.isupper():\n            if isinstance(value, str):\n                return False\n        else:\n            return False\n    return True\n\ndef check_string_case(string):\n    \"\"\"\n    Given a string, return True if all characters are lower case or upper case,\n    else return False.\n    Examples:\n    check_string_case(\"abcd\") should return True.\n    check_string_case(\"ABCD\") should return True.\n    check_string_case(\"abcd\") should return False.\n    check_string_case(\"abcd\") should return False.\n    check_string_case(\"12345\") should return True.\n    check_string_case(\"12345\") should return False.\n    \"\"\"\n    if not isinstance(string, str):\n        return False\n    if len(string) == 0:\n        return False\n    for char in string:\n        if not (char.islower() or char.isupper()):\n            return False\n    return True\n\ndef is_valid_url(url):\n    \"\"\"\n    Given a URL, return True if the URL is valid, else return False.\n    Examples:\n    is_valid_url(\"http://www.google.com\") should return True.\n    is_valid_url(\"https://www.google.com\") should return True.\n    is_valid_url(\"https://www.google.com/\") should return True.\n    is_valid_url(\"https://www.google.com/path\") should return False.\n    is_valid_url(\"https://www.google.com:8080\") should return False.\n    is_valid_url(\"https://www.google.com:8080/\") should return False.\n    is_valid_url(\"https://www.google.com:8080/path\") should return True.\n    \"\"\"\n    if not isinstance(url, str):\n        return False\n    url = url.strip()",
      -4.24609375
    ],
    [
      "if not dict:\n        return False\n    if not isinstance(dict, dict):\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            if key.lower()!= key:\n                return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements of the list are strings in lower \n    case or all elements of the list are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\", \"b\",\"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\", \"A\",\"banana\", \"B\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\", 8,\"banana\", \"a\",\"apple\"]) should return False.\n    check_list_case([\"Name\",\"John\", \"Age\",\"36\", \"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\", \"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if not list:\n        return False\n    if not isinstance(list, list):\n        return False\n    for item in list:\n        if not isinstance(item, str):\n            return False\n        if item.isupper():\n            if item.lower()!= item:\n                return False\n    return True\n\ndef check_dict_match(dict1, dict2):\n    \"\"\"\n    Given two dictionaries, return True if all the keys in the first\n    dictionary are the same as the keys in the second dictionary,\n    and all the values of the keys in the first dictionary are the same as the values of the keys\n    in the second dictionary, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_match({\"a\":\"apple\", \"b\":\"banana\"}, {\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_match({\"a\":\"apple\", \"b\":\"banana\"}, {\"a\":\"apple\",",
      -4.34375
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    if len(dict) == 0:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if key.lower()!= key:\n            return False\n        if key.upper()!= key:\n            return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements are strings in lower \n    case or all elements are strings in upper case, else return False.\n    Examples:\n    check_list_case([\"a\",\"apple\", \"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\", \"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\", 8,\"banana\"]) should return False.\n    check_list_case([\"Name\",\"John\",\"Age\",\"36\",\"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\",\"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if not isinstance(list, list):\n        return False\n    if len(list) == 0:\n        return False\n    for value in list:\n        if not isinstance(value, str):\n            return False\n        if value.lower()!= value:\n            return False\n        if value.upper()!= value:\n            return False\n    return True\n\ndef check_dict_key_case(dict, key):\n    \"\"\"\n    Given a dictionary, return True if key is a string in lower \n    case or key is a string in upper case, else return False.\n    Examples:\n    check_dict_key_case({\"a\":\"apple\", \"b\":\"banana\"}, \"A\") should return True.\n    check_dict_key_case({\"a\":\"apple\", \"b\":\"banana\"}, \"B\") should return True.\n    check_dict_key_case({\"a\":\"apple\", \"b\":\"banana\"}, 8) should return False.\n    check_dict_key_case({\"Name\":\"John\", \"Age\":\"36\", \"",
      -4.50390625
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True\n\ndef check_string_case(string):\n    \"\"\"\n    Given a string, return True if all letters are in lower case, else return False.\n    Examples:\n    check_string_case(\"ABC\") should return True.\n    check_string_case(\"aBC\") should return False.\n    check_string_case(\"ABCD\") should return False.\n    \"\"\"\n    if not string:\n        return False\n    for char in string:\n        if not isinstance(char, str) or char.islower()!= char.isupper():\n            return False\n    return True\n\ndef check_all_case(string):\n    \"\"\"\n    Given a string, return True if all letters are in lower case or upper case, else return False.\n    Examples:\n    check_all_case(\"ABC\") should return True.\n    check_all_case(\"aBC\") should return True.\n    check_all_case(\"ABCD\") should return False.\n    \"\"\"\n    if not string:\n        return False\n    for char in string:\n        if not isinstance(char, str) or char.islower()!= char.isupper():\n            return False\n    return True\n\ndef check_string_case_or_all_case(string):\n    \"\"\"\n    Given a string, return True if all letters are in lower case or upper case, else return False.\n    Examples:\n    check_string_case_or_all_case(\"ABC\") should return True.\n    check_string_case_or_all_case(\"aBC\") should return True.\n    check_string_case_or_all_case(\"ABCD\") should return True.\n    \"\"\"\n    if not string:\n        return False\n    for char in string:\n        if not isinstance(char, str) or char.islower()!= char.isupper():\n            return False\n    return True\n\ndef check_string_case_or_all_case_and_not_empty(string):\n    \"\"\"",
      -4.7734375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key:\n            return False\n        if key.upper()!= key:\n            return False\n    return True\n\ndef check_dict_case_all_keys_in_lower(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_all_keys_in_lower({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_all_keys_in_lower({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_all_keys_in_lower({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_all_keys_in_lower({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_all_keys_in_lower({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.lower()!= key:\n            return False\n    return True\n\ndef check_dict_case_all_keys_in_upper(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in upper \n    case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_all_keys_in_upper({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_all_keys_in_upper({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_all_keys",
      -4.79296875
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    for key in dict:\n        if not key.islower():\n            return False\n    for key in dict:\n        if not key.isupper():\n            return False\n    return True\n\ndef check_str_case(string):\n    \"\"\"\n    Given a string, return True if all characters are lower case or upper case, \n    else return False.\n    Examples:\n    check_str_case(\"Apple\") should return True.\n    check_str_case(\"Apple\") should return False.\n    check_str_case(\"aPple\") should return True.\n    check_str_case(\"APPLE\") should return True.\n    check_str_case(\"aPple\") should return False.\n    check_str_case(\"APPLE\") should return False.\n    \"\"\"\n    if not string:\n        return False\n    for char in string:\n        if not isinstance(char, str):\n            return False\n    for char in string:\n        if not char.islower():\n            return False\n    for char in string:\n        if not char.isupper():\n            return False\n    return True\n\ndef check_str_contains(string, sub_str):\n    \"\"\"\n    Given a string and a sub_str, return True if the sub_str is in the string, \n    else return False.\n    Examples:\n    check_str_contains(\"Apple\", \"a\") should return True.\n    check_str_contains(\"Apple\", \"apple\") should return True.\n    check_str_contains(\"Apple\", \"banana\") should return False.\n    check_str_contains(\"Apple\", \"aPple\") should return False.\n    check_str_contains(\"Apple\", \"apple\") should return False.\n    check_str_contains(\"Apple\", \"a\") should return False.\n    check_str_contains(\"Apple\", \"\") should return False.\n    check_str_contains(\"Apple\", \"apple\") should return False.\n    check_str_contains(\"Apple\", \"apple\") should return False.\n    \"\"\"\n    if not",
      -4.9921875
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        elif value is not None:\n            if not isinstance(value, str):\n                return False\n            elif value.lower()!= value:\n                return False\n        else:\n            return False\n    return True\n\ndef check_list_case(list_):\n    \"\"\"\n    Given a list, return True if all strings in lower case, else return False.\n    Examples:\n    check_list_case([1, \"apple\", \"banana\"]) should return True.\n    check_list_case([1, \"apple\", \"banana\", \"orange\"]) should return False.\n    check_list_case([1, \"apple\", \"banana\", \"orange\", \"apple\"]) should return False.\n    check_list_case([1, \"apple\", \"banana\", \"orange\", \"apple\", 8, \"banana\", \"banana\"]) should return False.\n    \"\"\"\n    if not isinstance(list_, list):\n        return False\n    for value in list_:\n        if not isinstance(value, str):\n            return False\n        elif value.lower()!= value:\n            return False\n    return True\n\ndef check_str_case(string):\n    \"\"\"\n    Given a string, return True if all characters are lower case, else return False.\n    Examples:\n    check_str_case(\"Apple\") should return True.\n    check_str_case(\"Apple\", \"Apple\") should return True.\n    check_str_case(\"Apple\", \"apple\") should return False.\n    \"\"\"\n    if not isinstance(string, str):\n        return False\n    for char in string:\n        if not isinstance(char, str) or char.lower()!= char:\n            return False\n    return True\n\ndef check_float_case(float_):\n    \"\"\"\n    Given a float, return True if it is a float, else return False.\n    Examples:\n    check_float_case(1) should return True.\n    check_float_case(1, 1) should return True.\n    check_float",
      -5.1875
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\ndef check_dict_case_inverse(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in upper case,\n    else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_inverse({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_inverse({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_inverse({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_inverse({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_inverse({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.isupper():\n            return False\n    return True\n\ndef is_subset(dict1, dict2):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    is_subset({\"a\":\"apple\", \"b\":\"banana\"}, {\"a\":\"apple\", \"B\":\"banana\"}) should return False.\n    is_subset({\"a\":\"apple\", \"b\":\"banana\"}, {\"a\":\"apple\", \"B\":\"banana\", \"A\":\"banana\"}) should return True.\n    is_subset({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}, {\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    is_subset",
      -5.46875
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, basestring):\n            return False\n        if key.islower() == key.isupper():\n            return False\n    return True\n\ndef check_string_case(string):\n    \"\"\"\n    Given a string, return True if all letters in the string are lower \n    case or upper case, else return False.\n    The function should return False is the given string is empty.\n    Examples:\n    check_string_case(\"Hello\") should return True.\n    check_string_case(\"Hello World\") should return False.\n    check_string_case(\"HELLO WORLD\") should return False.\n    check_string_case(\"HELLO WORLD\") should return True.\n    \"\"\"\n    if len(string) == 0:\n        return False\n    for letter in string:\n        if not isinstance(letter, basestring):\n            return False\n        if letter.islower() == letter.isupper():\n            return False\n    return True\n\ndef check_string_numeric(string):\n    \"\"\"\n    Given a string, return True if all letters in the string are numeric, \n    else return False.\n    The function should return False is the given string is empty.\n    Examples:\n    check_string_numeric(\"Hello\") should return True.\n    check_string_numeric(\"Hello World\") should return True.\n    check_string_numeric(\"HELLO WORLD\") should return True.\n    check_string_numeric(\"HELLO WORLD\") should return False.\n    \"\"\"\n    if len(string) == 0:\n        return False\n    for letter in string:\n        if not isinstance(letter, basestring):\n            return False\n        if not letter.isdigit():\n            return False\n    return True\n\ndef check_string_alphanumeric(string):\n    \"\"\"\n    Given a string, return True if all letters in the string are alphanumeric, \n    else return False.\n    The function should return False is the given string is empty.\n    Examples:\n    check_string_alphanumeric(\"Hello\") should return True.\n    check_string_",
      -5.81640625
    ],
    [
      "if not dict:\n        return False\n    keys = set(dict.keys())\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n        if key.islower()!= key.isupper():\n            return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements are strings in lower \n    case or all elements are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"Name\",\"John\",\"Age\",\"36\", \"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\",\"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if not list:\n        return False\n    for element in list:\n        if not isinstance(element, str):\n            return False\n        if element.islower()!= element.isupper():\n            return False\n    return True\n\ndef check_str_case(string):\n    \"\"\"\n    Given a string, return True if all elements are strings in lower \n    case or all elements are strings in upper case, else return False.\n    The function should return False is the given string is empty.\n    Examples:\n    check_str_case(\"a apple A banana\") should return True.\n    check_str_case(\"a apple A banana\") should return False.\n    check_str_case(\"a apple A banana\") should return False.\n    check_str_case(\"a apple A banana\") should return False.\n    check_str_case(\"Name John Age 36 City Houston\") should return False.\n    check_str_case(\"STATE NC ZIP 12345\") should return True.\n    \"\"\"\n    if not string:\n        return False\n    for",
      -5.8359375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, basestring):\n            return False\n        if not isinstance(dict[key], basestring):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n        if not dict[key].islower() and not dict[key].isupper():\n            return False\n    return True\n\ndef check_dict_case_only(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_only({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_only({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_only({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_only({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_only({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, basestring):\n            return False\n        if not isinstance(dict[key], basestring):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\ndef check_dict_case_only_reverse(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case_only_reverse({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_only_reverse({\"a\":\"apple\",",
      -6.8125
    ],
    [
      "if not dict:\n        return False\n    if len(dict) == 1:\n        return True\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.isupper():\n            return False\n    return True\n\ndef check_dict_size(dict):\n    \"\"\"\n    Given a dictionary, return the size of the dictionary as an integer,\n    else return -1.\n    Examples:\n    check_dict_size({\"a\":\"apple\", \"b\":\"banana\"}) should return 2.\n    check_dict_size({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"car\"}) should return 3.\n    check_dict_size({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return -1.\n    check_dict_size({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return -1.\n    check_dict_size({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return 2.\n    \"\"\"\n    if not dict:\n        return -1\n    if len(dict) == 1:\n        return 1\n    return len(dict)\n\ndef check_dict_keys_size(dict):\n    \"\"\"\n    Given a dictionary, return the number of keys in the dictionary as an integer,\n    else return -1.\n    Examples:\n    check_dict_keys_size({\"a\":\"apple\", \"b\":\"banana\"}) should return 2.\n    check_dict_keys_size({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"car\"}) should return 3.\n    check_dict_keys_size({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return -1.\n    check_dict_keys_size({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return -1.\n    check_dict_keys_size({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return 2.\n    \"\"\"\n    if not dict:\n        return",
      -6.83984375
    ],
    [
      "if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if not value.islower():\n            return False\n        if not value.isupper():\n            return False\n    return True\n\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements are strings in lower \n    case or all elements are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\", \"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\", 8,\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\", 8,\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\", 8,\"banana\"]) should return False.\n    check_list_case([\"Name\",\"John\", \"Age\",\"36\", \"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\", \"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if not list:\n        return False\n    for value in list:\n        if not isinstance(value, str):\n            return False\n        if not value.islower():\n            return False\n        if not value.isupper():\n            return False\n    return True\n\n\ndef check_string_case(string):\n    \"\"\"\n    Given a string, return True if all characters are letters in lower \n    case or all characters are letters in upper case, else return False.\n    The function should return False is the given string is empty.\n    Examples:\n    check_string_case(\"a\") should return True.\n    check_string_case(\"a\") should return True.\n    check_string_case(\"a\") should return False.\n    check_string_case(\"a\") should return False.\n    check_string_case(\"John\") should return True.\n    check_string_case(\"John\") should return True.\n    check_string_case(\"John\") should",
      -6.98046875
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper() and key.islower():\n            continue\n        elif key.islower() and key.isupper():\n            continue\n        else:\n            return False\n    return True\n\ndef check_dict_case_inplace(dict):\n    \"\"\"\n    Given a dictionary, check the keys are all in upper or lower case\n    and return the dictionary itself.\n    Examples:\n    check_dict_case_inplace({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case_inplace({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case_inplace({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case_inplace({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case_inplace({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper() and key.islower():\n            dict[key.upper()] = dict[key]\n            del dict[key]\n        elif key.islower() and key.isupper():\n            dict[key.lower()] = dict[key]\n            del dict[key]\n        else:\n            return False\n    return dict\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements are strings in lower case or \n    all elements are strings in upper case, else return False.\n    Examples:\n    check_list_case([\"a\",\"apple\"]) should return True.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"",
      -7.015625
    ],
    [
      "if not dict:\n        return False\n    for key, value in dict.items():\n        if isinstance(key, str):\n            if not key.islower():\n                return False\n        if isinstance(value, str):\n            if not value.isupper():\n                return False\n    return True\n\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements in the list are strings in lower \n    case or all elements in the list are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([]) should return True.\n    check_list_case([8, \"banana\", \"apple\"]) should return True.\n    check_list_case([8, \"banana\", \"apple\", 8, \"banana\"]) should return False.\n    check_list_case([8, \"banana\", \"apple\", 8, \"banana\", \"apple\"]) should return False.\n    check_list_case([8, \"banana\", \"apple\", 8, \"banana\", \"apple\", 8, \"banana\", 8, \"banana\"]) should return False.\n    check_list_case([8, \"banana\", \"apple\", 8, \"banana\", \"apple\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana\", 8, \"banana",
      -7.5625
    ],
    [
      "if not isinstance(dict, dict):\n        return False\n    elif len(dict) == 0:\n        return False\n    else:\n        for key, value in dict.items():\n            if not isinstance(key, str):\n                return False\n            elif key.isupper() and value.isupper():\n                continue\n            elif key.islower() and value.islower():\n                continue\n            else:\n                return False\n        return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements in the list are strings in \n    lower or upper case, else return False.\n    Examples:\n    check_list_case([1,2,3]) should return True.\n    check_list_case([1,2,3,4]) should return True.\n    check_list_case([1,2,3,4,5]) should return False.\n    check_list_case([1,2,3,4,5,6]) should return False.\n    check_list_case([1,2,3,4,5,6,7]) should return False.\n    check_list_case([1,2,3,4,5,6,7,8]) should return False.\n    \"\"\"\n    if not isinstance(list, list):\n        return False\n    elif len(list) == 0:\n        return False\n    else:\n        for item in list:\n            if not isinstance(item, str):\n                return False\n            elif item.isupper() or item.islower():\n                continue\n            else:\n                return False\n        return True\n\ndef check_string_case(string):\n    \"\"\"\n    Given a string, return True if all characters in the string are \n    letters or digits, else return False.\n    Examples:\n    check_string_case(\"test\") should return True.\n    check_string_case(\"123\") should return True.\n    check_string_case(\"abc\") should return True.\n    check_string_case(\"a1b2c3\") should return True.\n    check_string_case(\"a1b2c3d\") should return False.\n    check_string_",
      -7.6953125
    ],
    [
      "if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if key not in dict.keys():\n                return False\n            else:\n                if not isinstance(dict[key], str):\n                    return False\n                elif not dict[key].islower():\n                    return False\n                elif not dict[key].isupper():\n                    return False\n        return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements in the list are strings in \n    lower case or all elements in the list are strings in upper case, else \n    return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\", \"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\", \"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\", 8,\"banana\"]) should return False.\n    check_list_case([\"Name\",\"John\",\"Age\",\"36\", \"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\",\"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    else:\n        for item in list:\n            if not isinstance(item, str):\n                return False\n            elif not item.islower():\n                return False\n            elif not item.isupper():\n                return False\n        return True\n\ndef check_set_case(set):\n    \"\"\"\n    Given a set, return True if all elements in the set are strings in \n    lower case or all elements in the set are strings in upper case, else \n    return False.\n    The function should return False is the given set is empty.\n    Examples:\n    check_set_case({\"a\",\"apple\", \"banana\"}) should return True.\n    check_set_case({\"a\",\"apple\", \"banana\"}) should return False.\n    check_set_case({\"a\",\"apple\", 8,\"banana\"}) should return False.\n    check_set_case({\"Name\",\"",
      -8.15625
    ],
    [
      "if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n        if not key.isupper():\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    print check_dict_case({\"A\":\"apple\", \"B\":\"banana\"})\n    print check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n    print check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n    print check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"})\n    print check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\"})\n    print check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\"})\n    print check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\"})\n    print check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\"})\n    print check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\"})\n    print check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\"})\n    print check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\", \"ZIP\":\"12345\", \"STATE\":\"NC\"})",
      -8.7890625
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    for key in dict.keys():\n        if not key.islower():\n            return False\n    return True\n\ndef is_valid_name(name):\n    \"\"\"\n    Given a name, return True if it is valid, else return False.\n    Examples:\n    is_valid_name(\"John\") should return True.\n    is_valid_name(\"John Doe\") should return True.\n    is_valid_name(\"John D. Doe\") should return True.\n    is_valid_name(\"John Doe\") should return False.\n    is_valid_name(\"John Doe, Jr.\") should return False.\n    is_valid_name(\"John Doe, Jr. Jr.\") should return True.\n    \"\"\"\n    if not name:\n        return False\n    if not name.isalnum():\n        return False\n    if len(name) < 1 or len(name) > 30:\n        return False\n    if name[0].islower() and name[0]!= 'j':\n        return False\n    if name[-1].islower() and name[-1]!= 'j':\n        return False\n    if name[0] == name[-1]:\n        return False\n    if name[0].isupper() and name[0]!= 'J':\n        return False\n    if name[-1].isupper() and name[-1]!= 'J':\n        return False\n    if name[0] == name[-1]:\n        return False\n    return True\n\ndef is_valid_phone_number(phone_number):\n    \"\"\"\n    Given a phone number, return True if it is valid, else return False.\n    Examples:\n    is_valid_phone_number(\"(123) 456-7890\") should return True.\n    is_valid_phone_number(\"123-456-7890\") should return True.\n    is_valid_phone_number(\"123-456-7890 X\") should return False.\n    \"\"\"\n    if not phone_number:\n        return False\n    if not phone_number.isdigit():\n        return False",
      -10.4375
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if key not in dict.keys():\n            return False\n        if key.islower() and dict[key] not in dict.keys():\n            return False\n        if key.isupper() and dict[key] not in dict.keys():\n            return False\n    return True\n\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all elements are strings in lower \n    case or all elements are strings in upper case, else return False.\n    The function should return False is the given list is empty.\n    Examples:\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return True.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"A\",\"banana\"]) should return False.\n    check_list_case([\"a\",\"apple\",\"a\",\"apple\"]) should return False.\n    check_list_case([\"NAME\",\"John\",\"Age\",\"36\",\"City\",\"Houston\"]) should return False.\n    check_list_case([\"STATE\",\"NC\",\"ZIP\",\"12345\"]) should return True.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    for item in list:\n        if item not in list:\n            return False\n        if item.islower() and list[item] not in list:\n            return False\n        if item.isupper() and list[item] not in list:\n            return False\n    return True\n\ndef check_dict_list(dict, list):\n    \"\"\"\n    Given a dictionary and a list, return True if all keys in the dictionary \n    are in the list, else return False.\n    The function should return False if the dictionary is empty or if the \n    list is empty.\n    Examples:\n    check_dict_list({\"a\":\"apple\", \"b\":\"banana\"}, [\"a\",\"b\"]) should return True.\n    check_dict_list({\"a\":\"apple\", \"b\":\"banana\"}, [\"a\",\"b\",\"A\",\"B\",\"C\"]) should return False.\n    check_",
      -10.8828125
    ],
    [
      "if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    for key in dict.keys():\n        if key.islower():\n            if not key.isupper():\n                return False\n    return True\n\ndef is_valid_email(email):\n    \"\"\"\n    Checks if an email address is valid.\n    \n    Valid email addresses must be of the form \"name@domain.com\" or \"name@domain\".\n    \n    The function should return False if the email address is not valid.\n    \"\"\"\n    if len(email) == 0:\n        return False\n    if not re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n        return False\n    return True\n\ndef is_valid_username(username):\n    \"\"\"\n    Checks if an username is valid.\n    \n    The function should return False if the username is not valid.\n    \"\"\"\n    if len(username) == 0:\n        return False\n    if re.match(r\"[^\\w]+\", username):\n        return False\n    return True\n\ndef is_valid_password(password):\n    \"\"\"\n    Checks if a password is valid.\n    \n    The function should return False if the password is not valid.\n    \"\"\"\n    if len(password) == 0:\n        return False\n    if not re.match(r\"[^\\w]+\", password):\n        return False\n    return True\n\ndef is_valid_password_strength(password):\n    \"\"\"\n    Checks if a password is valid.\n    \n    The function should return False if the password is not valid.\n    \"\"\"\n    password_length = len(password)\n    if password_length < 6:\n        return False\n    if password_length > 20:\n        return False\n    if password_length < 6:\n        return False\n    if password_length > 20:\n        return False\n    if password_length < 8:\n        return False\n    if password_length > 20:\n        return False\n    if password_length < 8:\n        return False\n    if password_length > 20:\n        return False\n    if password_",
      -11.953125
    ],
    [
      "if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, basestring):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\ndef check_dict_format(dict):\n    \"\"\"\n    Given a dictionary, check if all keys are in the format of \"Name\" and \"Age\" \n    and return True if this is true, else return False.\n    Examples:\n    check_dict_format({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_format({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return True.\n    check_dict_format({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    check_dict_format({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_format({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_format({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, basestring):\n            return False\n        if not key.startswith(\"Name\") or not key.endswith(\"Age\"):\n            return False\n    return True\n\ndef check_dict_valid(dict):\n    \"\"\"\n    Given a dictionary, check if the dictionary is valid or not.\n    The dictionary should be in the format of {\"Name\" and \"Age\" and \"City\"}.\n    Examples:\n    check_dict_valid({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_valid({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return True.\n    check_dict_valid({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    check_dict_valid({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check",
      -13.671875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}