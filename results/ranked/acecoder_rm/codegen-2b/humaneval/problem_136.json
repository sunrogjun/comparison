{
  "problem": {
    "task_id": "HumanEval/136",
    "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
    "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n",
    "entry_point": "largest_smallest_integers",
    "docstring": "",
    "problem_id": 136
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def largest_smallest_integers_aux(lst):\n        if not lst:\n            return None, None\n        a = lst[0]\n        b = lst[-1]\n        for i in lst[1:-1]:\n            if i < 0:\n                a = max(a, i)\n            else:\n                b = min(b, i)\n        return a, b\n\n    return largest_smallest_integers_aux(lst)\n\n\ndef print_largest_smallest_integers(lst):\n    '''\n    Print the largest and smallest integers in a list.\n    If there is no integers, print \"None\".\n    '''\n    a, b = largest_smallest_integers(lst)\n    if a is None:\n        print('None')\n    else:\n        print(a)\n    if b is None:\n        print('None')\n    else:\n        print(b)\n\n\ndef main():\n    print_largest_smallest_integers([2, 4, 1, 3, 5, 7])\n\n\nif __name__ == '__main__':\n    main()",
      2.287109375
    ],
    [
      "a = None\n    b = None\n    for x in lst:\n        if x < 0:\n            if a is None:\n                a = x\n            else:\n                if a > x:\n                    a = x\n        else:\n            if b is None:\n                b = x\n            else:\n                if b < x:\n                    b = x\n    return a, b\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for x in lst:\n        if x < 0:\n            if a is None:\n                a = x\n        else:\n            if b is None:\n                b = x\n            else:\n                if b < x:\n                    b = x\n    return a, b\n\n\nif __name__ == '__main__':\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (7, 1)\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n    assert largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (7, 1)\n    assert largest_smallest_integers_2([]) == (None, None)\n    assert largest_smallest_integers_2([0]) == (None, None)",
      1.0517578125
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        if len(lst) == 0:\n            return (None, None)\n        elif len(lst) == 1:\n            return (lst[0], lst[0])\n        else:\n            return (max(lst) if lst[0] < 0 else lst[0], min(lst) if lst[0] > 0 else lst[0])\n    return largest_smallest_integers_aux\n\n\nif __name__ == '__main__':\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n    print(largest_smallest_integers([]))\n    print(largest_smallest_integers([0]))",
      0.82568359375
    ],
    [
      "a = None\n    b = None\n    for x in lst:\n        if a is None:\n            a = x\n        elif x > a:\n            a = x\n        elif x < b:\n            b = x\n    return (a, b)\n\n\ndef largest_smallest_integers_recursive(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_recursive([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_recursive([]) == (None, None)\n    largest_smallest_integers_recursive([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n    else:\n        return largest_smallest_integers_recursive(lst[1:])",
      0.654296875
    ],
    [
      "try:\n        a = min(lst)\n        b = max(lst)\n    except ValueError:\n        a = b = None\n    return a, b",
      0.57666015625
    ],
    [
      "if len(lst) == 0:\n        return (None, None)\n\n    a = None\n    b = None\n\n    for i in lst:\n        if i > 0:\n            if a is None or a > i:\n                a = i\n        else:\n            if b is None or b < i:\n                b = i\n\n    return (a, b)\n\ndef largest_smallest_integers_in_list(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_in_list([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_in_list([]) == (None, None)\n    largest_smallest_integers_in_list([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n\n    a = None\n    b = None\n\n    for i in lst:\n        if i > 0:\n            if a is None or a > i:\n                a = i\n        else:\n            if b is None or b < i:\n                b = i\n\n    return (a, b)\n\ndef largest_smallest_integers_in_list_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_in_list_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_in_list_2([]) == (None, None)\n    largest_smallest_integers_in_list_2([0]) == (None, None)\n    '''",
      0.251220703125
    ],
    [
      "# if the list is empty, return a tuple of None\n    if not lst:\n        return None, None\n\n    # if there are no negative or positive integers, return them as None\n    if not any(map(lambda x: x >= 0, lst)):\n        return None, None\n\n    # if there are only negative integers, return the smallest positive integer\n    if not any(map(lambda x: x <= 0, lst)):\n        return None, lst[0]\n\n    # create a sorted list of the list\n    lst = sorted(lst)\n\n    # return the largest negative integer and the smallest positive integer\n    return lst[-1], lst[0]\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert largest_smallest_integers([1, 3, -5, -6, -9, -10, -12, -15, -17, -18]) == (-18, -10), 'Sorting by largest negative integer'\n    assert largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7]) == (1, 7), 'Sorting by smallest positive integer'\n    assert largest_smallest_integers([]) == (None, None), 'Sorting by empty list'\n    assert largest_smallest_integers([0]) == (None, None), 'Sorting by list containing only 0'",
      -0.74072265625
    ],
    [
      "a, b = None, None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return (a, b)",
      -0.85693359375
    ],
    [
      "if not lst:\n        return None, None\n\n    # The largest integer\n    max_int = max(lst)\n\n    # The smallest integer\n    min_int = min(lst)\n\n    if max_int == min_int:\n        return max_int, min_int\n    else:\n        return max_int, min_int",
      -0.85693359375
    ],
    [
      "# The smallest value is the first value in the list.\n    # The largest value is the last value in the list.\n    if lst:\n        a = lst[0]\n        b = lst[-1]\n        return (a, b)\n    else:\n        return (None, None)",
      -0.85693359375
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return a, b",
      -0.85693359375
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        if len(lst) == 0:\n            return (None, None)\n        if len(lst) == 1:\n            return (lst[0], lst[0])\n\n        if lst[0] > lst[1]:\n            return (lst[0], lst[1])\n        else:\n            return (lst[1], lst[0])\n\n    return largest_smallest_integers_aux\n\n\nif __name__ == '__main__':\n    lst = [2, 4, 1, 3, 5, 7]\n    print(largest_smallest_integers(lst))",
      -0.85791015625
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return (a, b)",
      -0.85791015625
    ],
    [
      "a = None\n    b = None\n    for x in lst:\n        if x < 0:\n            a = x\n        elif x > 0:\n            b = x\n    return (a, b)\n\n\n# Example:\n# >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# (5, 1)",
      -0.85791015625
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return (a, b)",
      -0.85791015625
    ],
    [
      "# If the list is empty, return None for both values.\n    if not lst:\n        return (None, None)\n\n    # Find the largest and smallest positive integers.\n    a, b = max(lst), min(lst)\n\n    # If there are no positive or negative integers, return them as None.\n    if a is None or b is None:\n        return (None, None)\n\n    return (a, b)",
      -0.85791015625
    ],
    [
      "a = None\n    b = None\n    for x in lst:\n        if x < 0:\n            if a is None:\n                a = x\n            else:\n                if a > x:\n                    a = x\n        else:\n            if b is None:\n                b = x\n            else:\n                if b < x:\n                    b = x\n    return (a, b)",
      -0.85791015625
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if a is None:\n            a = i\n        elif i > 0 and a < 0:\n            a = i\n        elif i < 0 and b > 0:\n            b = i\n        else:\n            a = i\n    return (a, b)\n\nif __name__ == \"__main__\":\n    print largest_smallest_integers([2, 4, 1, 3, 5, 7])",
      -0.85791015625
    ],
    [
      "if not lst:\n        return (None, None)\n\n    if not any(i for i in lst):\n        return (None, None)\n\n    lst = sorted(lst)\n\n    if lst[0] >= 0:\n        return (lst[0], lst[-1])\n    else:\n        return (lst[0], lst[-1])",
      -0.85791015625
    ],
    [
      "a, b = None, None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return a, b\n\nif __name__ == '__main__':\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n    print(largest_smallest_integers([]))\n    print(largest_smallest_integers([0]))",
      -0.8583984375
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if a is None:\n            a = i\n        elif i > 0:\n            if b is None:\n                b = i\n            else:\n                if a > i:\n                    a = i\n                elif a == i:\n                    b = i\n    return (a, b)\n\nprint largest_smallest_integers([2, 4, 1, 3, 5, 7])\nprint largest_smallest_integers([])\nprint largest_smallest_integers([0])",
      -0.8583984375
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if i > 0:\n            if a is None or i > a:\n                a = i\n        elif i < 0:\n            if b is None or i < b:\n                b = i\n    return (a, b)",
      -0.8583984375
    ],
    [
      "if not lst:\n        return (None, None)\n    if not lst[0]:\n        return (None, None)\n\n    # Find the largest and smallest integers\n    largest = min(lst)\n    smallest = max(lst)\n\n    # Find the smallest and largest integers that aren't in the list\n    smallest_not_in_list = smallest\n    largest_not_in_list = largest\n\n    # Iterate through the list, and find the largest and smallest\n    # integers that are not in the list\n    for i in lst:\n        if i < smallest:\n            smallest_not_in_list = i\n        elif i > largest:\n            largest_not_in_list = i\n\n    return (largest, smallest_not_in_list)",
      -0.8583984375
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        if lst:\n            return max(map(lambda x: -x, lst)), min(lst)\n        else:\n            return None, None\n    return largest_smallest_integers_aux",
      -0.8583984375
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return (a, b)\n\ndef test():\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (5, 1)\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n\nif __name__ == '__main__':\n    test()",
      -0.8583984375
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        a, b = None, None\n        for i in range(len(lst)):\n            if lst[i] > 0:\n                a = lst[i]\n            if lst[i] < 0:\n                b = lst[i]\n        return (a, b)\n    return largest_smallest_integers_aux(lst)",
      -0.8583984375
    ],
    [
      "def f(lst):\n        if not lst:\n            return None, None\n        if not lst:\n            return None, None\n        a, b = None, None\n        for i in lst:\n            if i > 0:\n                if a is None:\n                    a = i\n            elif i < 0:\n                if b is None:\n                    b = i\n        return a, b\n    return f\n\nif __name__ == '__main__':\n    lst = [2, 4, 1, 3, 5, 7]\n    a, b = largest_smallest_integers(lst)\n    print a, b",
      -0.8583984375
    ],
    [
      "if not lst:\n        return None, None\n    a, b = lst[0], lst[-1]\n    for i in lst[1:]:\n        if i < 0:\n            a = max(a, -i)\n        elif i > 0:\n            b = min(b, i)\n    return a, b\n\nif __name__ == '__main__':\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n    print(largest_smallest_integers([]))\n    print(largest_smallest_integers([0]))\n    print(largest_smallest_integers([]))",
      -0.8583984375
    ],
    [
      "if lst:\n        if lst[0] < 0:\n            return (None, 0)\n        if lst[-1] > 0:\n            return (lst[-1], lst[0])\n        return (None, None)\n    return (None, None)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# find the largest negative number\n    negative_num = max(lst)\n    # find the smallest positive number\n    positive_num = min(lst)\n\n    return (negative_num, positive_num)",
      -0.85888671875
    ],
    [
      "if lst:\n        a = lst[0]\n        b = lst[-1]\n        for x in lst[1:]:\n            if x < a:\n                a = x\n            elif x > b:\n                b = x\n        return a, b\n    else:\n        return None, None\n\n\nif __name__ == '__main__':\n    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    largest_smallest_integers([])\n    largest_smallest_integers([0])",
      -0.85888671875
    ],
    [
      "# create a function that returns the largest and smallest\n    # integers in the list\n    def largest_smallest(lst):\n        # create a list of tuples of (negative, positive)\n        # integers\n        t = [(i, j) for i, j in zip(lst, lst[1:])]\n        # sort the list of tuples\n        t.sort()\n        # take the tuple with the largest negative integer\n        return t[0]\n    return largest_smallest(lst)",
      -0.85888671875
    ],
    [
      "a, b = None, None\n    for i in lst:\n        if i < 0:\n            if a is None:\n                a = i\n        elif i > 0:\n            if b is None:\n                b = i\n    return (a, b)",
      -0.85888671875
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        if lst:\n            if not lst[0]:\n                return lst[0], lst[1]\n            return largest_smallest_integers_aux(lst[1:])\n        else:\n            return None, None\n    return largest_smallest_integers_aux(lst)\n\nif __name__ == '__main__':\n    lst = [2, 4, 1, 3, 5, 7]\n    print(largest_smallest_integers(lst))",
      -0.85888671875
    ],
    [
      "a, b = None, None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return a, b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return tuple(map(int, sorted(filter(lambda x: x > 0, lst))))",
      -0.85888671875
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        # Check if there are any negative or positive integers.\n        if not lst:\n            return (None, None)\n        elif any(i < 0 for i in lst):\n            return (None, None)\n        elif any(i > 0 for i in lst):\n            return (None, None)\n        else:\n            # Sort list by value and return the result.\n            lst.sort()\n            return lst[0], lst[-1]\n\n    return largest_smallest_integers_aux",
      -0.85888671875
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = min(a, i)\n        else:\n            b = max(b, i)\n    return (a, b)\n\n\ndef print_list(lst):\n    for i in lst:\n        print i,\n    print",
      -0.85888671875
    ],
    [
      "if len(lst) == 0:\n        return (None, None)\n    else:\n        a, b = None, None\n        for i in lst:\n            if i < 0:\n                if a is None:\n                    a = i\n            else:\n                if b is None:\n                    b = i\n        return (a, b)",
      -0.85888671875
    ],
    [
      "def _largest_smallest_integers(lst):\n        if len(lst) == 0:\n            return None, None\n        a = -1\n        b = 2 ** 63 - 1\n        for i in lst:\n            if i < 0:\n                a = i\n            else:\n                b = i\n        return (a, b)\n    return _largest_smallest_integers(lst)",
      -0.85888671875
    ],
    [
      "if not lst:\n        return (None, None)\n    a = max(lst)\n    b = min(lst)\n    return (a, b)",
      -0.85888671875
    ],
    [
      "def largest_smallest_integers(lst):\n        if lst:\n            lst = sorted(lst)\n            return lst[0], lst[-1]\n        else:\n            return None, None\n    return largest_smallest_integers",
      -0.85888671875
    ],
    [
      "try:\n        a = lst[0]\n        b = lst[1]\n        if a is None or b is None:\n            return (None, None)\n    except:\n        return (None, None)\n\n    if a >= 0 and b <= 0:\n        return (a, b)\n    elif a >= 0 and b > 0:\n        return (a, b)\n    elif a < 0 and b >= 0:\n        return (a, b)\n    else:\n        return (None, None)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def largest_smallest(lst):\n        if not lst:\n            return (None, None)\n        negative_ints = [i for i in lst if i < 0]\n        positive_ints = [i for i in lst if i > 0]\n        if not negative_ints and not positive_ints:\n            return (None, None)\n        if not negative_ints:\n            return (positive_ints[0], positive_ints[-1])\n        if not positive_ints:\n            return (negative_ints[-1], negative_ints[0])\n        return (max(negative_ints), min(positive_ints))\n    return largest_smallest\n\ndef largest_smallest_ints(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_ints([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_ints([]) == (None, None)\n    largest_smallest_ints([0]) == (None, None)\n    '''\n    def largest_smallest(lst):\n        if not lst:\n            return (None, None)\n        negative_ints = [i for i in lst if i < 0]\n        positive_ints = [i for i in lst if i > 0]\n        if not negative_ints and not positive_ints:\n            return (None, None)\n        if not negative_ints:\n            return (positive_ints[0], positive_ints[-1])\n        if not positive_ints:\n            return (negative_ints[-1], negative_ints[0])\n        return (max(negative_ints), min(positive_ints))\n    return largest_smallest\n\nif __name__ == '__main__':\n    #print largest_smallest_ints([2, 4, 1, 3, 5, 7])\n    #print largest_smallest_integers([2, 4, 1, 3, 5,",
      -0.921875
    ],
    [
      "if not lst:\n        return (None, None)\n\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    a, b = None, None\n    for i in lst:\n        if i > 0:\n            if a is None or i > a:\n                a = i\n        elif i < 0:\n            if b is None or i < b:\n                b = i\n    return (a, b)\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    a, b = None, None\n    for i in lst:\n        if i > 0:\n            if a is None or i > a:\n                a = i\n        elif i < 0:\n            if b is None or i < b:\n                b = i\n    return (a, b)\n\n\ndef largest_smallest_integers_3(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_3([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_3([]) == (None, None)\n    largest",
      -0.990234375
    ],
    [
      "return (largest_smallest_integer(lst), smallest_largest_integer(lst))",
      -0.99267578125
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        a, b = None, None\n        for i in lst:\n            if i < 0:\n                a = -i\n            elif i > 0:\n                b = i\n        return a, b\n    return largest_smallest_integers_aux(lst)\n\nif __name__ == '__main__':\n    assert(largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (7, 1))\n    assert(largest_smallest_integers([2, -3, 4, 1, -7, -8]) == (1, -8))\n    assert(largest_smallest_integers([-2, -3, 4, 1, -7, -8]) == (None, None))\n    assert(largest_smallest_integers([]) == (None, None))\n    assert(largest_smallest_integers([0]) == (None, None))",
      -1.0126953125
    ],
    [
      "if lst:\n        lst = sorted(lst)\n        return lst[-1], lst[0]\n    else:\n        return None, None\n\ndef is_palindrome(s):\n    '''\n    Check if the string s is a palindrome.\n\n    Examples:\n    is_palindrome('A man, a plan, a canal: Panama') == True\n    is_palindrome('race a car') == False\n    is_palindrome('race a car') == False\n    '''\n    if s:\n        s = s.upper()\n        for i in range(len(s) / 2):\n            if s[i]!= s[-1 - i]:\n                return False\n        return True\n    else:\n        return False\n\ndef is_palindrome_list(lst):\n    '''\n    Check if the list lst is a palindrome.\n\n    Examples:\n    is_palindrome_list(['A man, a plan, a canal: Panama']) == True\n    is_palindrome_list(['race a car']) == False\n    is_palindrome_list(['race a car']) == False\n    '''\n    if lst:\n        return is_palindrome(lst[0]) and is_palindrome_list(lst[1:])\n    else:\n        return False\n\ndef reverse_string(s):\n    '''\n    Reverse a string.\n\n    Examples:\n    reverse_string('A man, a plan, a canal: Panama') == 'race a car'\n    reverse_string('race a car') == 'A man, a plan, a canal: Panama'\n    '''\n    return s[::-1]\n\ndef reverse_list(lst):\n    '''\n    Reverse a list.\n\n    Examples:\n    reverse_list(['A man, a plan, a canal: Panama']) == ['race a car']\n    reverse_list(['race a car']) == ['A man, a plan, a canal: Panama']\n    '''\n    if lst:\n        return lst[::-1]\n    else:",
      -1.0986328125
    ],
    [
      "if not lst:\n        return (None, None)\n    negative = [i for i in lst if i < 0]\n    positive = [i for i in lst if i > 0]\n    if not negative and not positive:\n        return (None, None)\n    if not negative:\n        return (None, positive[0])\n    if not positive:\n        return (negative[0], None)\n    return (negative[0], positive[0])\n\n\ndef largest_smallest_integers_recursive(lst):\n    '''\n    Create a recursive function that returns a tuple (a, b), where\n    'a' is the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_recursive([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_recursive([]) == (None, None)\n    largest_smallest_integers_recursive([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    negative = [i for i in lst if i < 0]\n    positive = [i for i in lst if i > 0]\n    if not negative and not positive:\n        return (None, None)\n    if not negative:\n        return (None, positive[0])\n    if not positive:\n        return (negative[0], None)\n    return (negative[0], positive[0])\n\n\ndef largest_smallest_integers_recursive_2(lst):\n    '''\n    Create a recursive function that returns a tuple (a, b), where\n    'a' is the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_recursive_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_recursive_2([])",
      -1.4423828125
    ],
    [
      "return max(lst, key=lambda x: x * -1) if lst else None, min(lst, key=lambda x: x)\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    return max(lst, key=lambda x: x * -1) if lst else None, min(lst, key=lambda x: x)\n\n\ndef largest_smallest_integers_3(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_3([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_3([]) == (None, None)\n    largest_smallest_integers_3([0]) == (None, None)\n    '''\n    return max(lst, key=lambda x: x * -1) if lst else None, min(lst, key=lambda x: x)",
      -1.5068359375
    ],
    [
      "# Sort the list by value, then by sign.\n    lst.sort(key=lambda x: (x, -1 if x < 0 else 1))\n    # Return the first positive value as a, and the last negative value as b.\n    return lst[0], lst[-1]\n\n# Test cases\n# The largest and smallest integers in the list must be returned.\nassert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (7, 1)\nassert largest_smallest_integers([]) == (None, None)\nassert largest_smallest_integers([0]) == (None, None)\n\n# The largest and smallest integers in the list must be returned.\nassert largest_smallest_integers([2, -4, 1, -3, 5, -7]) == (-7, 1)\nassert largest_smallest_integers([]) == (None, None)\nassert largest_smallest_integers([0]) == (None, None)\n\n# The largest and smallest integers in the list must be returned.\nassert largest_smallest_integers([2, 4, 1, 3, 5, -7]) == (-7, 1)\nassert largest_smallest_integers([]) == (None, None)\nassert largest_smallest_integers([0]) == (None, None)\n\n# The largest and smallest integers in the list must be returned.\nassert largest_smallest_integers([2, -4, 1, 3, 5, -7]) == (-7, 1)\nassert largest_smallest_integers([]) == (None, None)\nassert largest_smallest_integers([0]) == (None, None)\n\n# The largest and smallest integers in the list must be returned.\nassert largest_smallest_integers([2, -4, 1, 3, 5, 7]) == (7, 1)\nassert largest_smallest_integers([]) == (None, None)\nassert largest_smallest_integers([0]) == (None, None)",
      -1.7421875
    ],
    [
      "if not lst:\n        return (None, None)\n    if not any(x < 0 for x in lst):\n        return (None, None)\n    if not any(x > 0 for x in lst):\n        return (None, None)\n    return (max(lst), min(lst))\n\n\ndef largest_smallest_integers_with_empty_lists(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    If a list is empty, return (None, None)\n\n    Examples:\n    largest_smallest_integers_with_empty_lists([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_with_empty_lists([]) == (None, None)\n    largest_smallest_integers_with_empty_lists([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n    if not any(x < 0 for x in lst):\n        return (None, None)\n    if not any(x > 0 for x in lst):\n        return (None, None)\n    return (max(lst), min(lst))\n\n\ndef largest_smallest_integers_with_negative_and_positive_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    If a list is empty, return (None, None)\n\n    Examples:\n    largest_smallest_integers_with_negative_and_positive_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_with_negative_and_positive_integers([]) == (None, None)\n    largest_",
      -1.8759765625
    ],
    [
      "if lst == []:\n        return (None, None)\n    if lst == [None]:\n        return (None, None)\n    a, b = 0, 0\n    for n in lst:\n        if n < 0:\n            a = max(a, n)\n        elif n > 0:\n            b = min(b, n)\n    return (a, b)\n\n\ndef largest_smallest_integers_with_count(lst):\n    '''\n    Create a function that returns a tuple (a, b, c), where 'a' is\n    the largest of negative integers, 'b' is the smallest of positive integers,\n    and 'c' is the number of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_with_count([2, 4, 1, 3, 5, 7]) == (None, 1, 7)\n    largest_smallest_integers_with_count([]) == (None, None, None)\n    largest_smallest_integers_with_count([0]) == (None, None, None)\n    '''\n    if lst == []:\n        return (None, None, None)\n    if lst == [None]:\n        return (None, None, None)\n    a, b, c = 0, 0, 0\n    for n in lst:\n        if n < 0:\n            a = max(a, n)\n        elif n > 0:\n            b = min(b, n)\n            c += 1\n    return (a, b, c)\n\n\ndef largest_smallest_integers_with_sum(lst):\n    '''\n    Create a function that returns a tuple (a, b, s), where 'a' is\n    the largest of negative integers, 'b' is the smallest of positive integers,\n    and's' is the sum of all positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_with_sum([2, 4, 1, 3, 5, 7]) == (None, 1,",
      -1.8896484375
    ],
    [
      "a, b = None, None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return a, b\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    a, b = None, None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return a, b\n\n\ndef largest_smallest_integers_3(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_3([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_3([]) == (None, None)\n    largest_smallest_integers_3([0]) == (None, None)\n    '''\n    a, b = None, None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return a, b\n\n\ndef largest_smallest_integers_4(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of",
      -2.17578125
    ],
    [
      "if not lst:\n        return (None, None)\n\n    a = None\n    b = None\n\n    for i in lst:\n        if a is None:\n            a = i\n        elif i < 0:\n            a = i\n        elif i > 0:\n            b = i\n\n    return (a, b)\n\n\ndef largest_smallest_integers_iterable(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_iterable([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_iterable([]) == (None, None)\n    largest_smallest_integers_iterable([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    a = None\n    b = None\n\n    for i in lst:\n        if a is None:\n            a = i\n        elif i < 0:\n            a = i\n        elif i > 0:\n            b = i\n\n    return (a, b)\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (7, 1)\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n    print(\"Passed self-checking\")",
      -2.59765625
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if i > 0:\n            a = i\n        elif i < 0:\n            b = i\n        else:\n            return (None, None)\n    return (a, b)\n\nif __name__ == '__main__':\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n    print(largest_smallest_integers([2, 4, 0, 3, 5, 7]))\n    print(largest_smallest_integers([]))\n    print(largest_smallest_integers([0]))",
      -2.6796875
    ],
    [
      "if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n    a, b = None, None\n    for i in lst:\n        if i < 0:\n            if a is not None:\n                return (a, b)\n            a = i\n        elif i > 0:\n            if b is not None:\n                return (a, b)\n            b = i\n    return (a, b)\n\n#-------------------------------------------------------------------------------\n\ndef test_largest_smallest_integers():\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n    assert largest_smallest_integers([-1, -2, -3]) == (None, -3)\n    assert largest_smallest_integers([-1, -2, -3, -4]) == (None, -3)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5]) == (None, -5)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5, -6]) == (None, -6)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7]) == (-7, -1)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8]) == (-7, -1)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-7, -1)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == (-7, -1)\n\n#-------------------------------------------------------------------------------\n\ndef main():\n    test_largest_smallest_integers()\n    print('All tests passed.')",
      -2.681640625
    ],
    [
      "a = None\n    b = None\n\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n\n    return (a, b)",
      -3.21875
    ],
    [
      "try:\n        a = lst[0]\n        b = lst[0]\n        for i in lst:\n            if i < 0:\n                a = i\n            elif i > 0:\n                b = i\n    except IndexError:\n        a = None\n        b = None\n    return a, b\n\nif __name__ == '__main__':\n    test_cases = [\n        [2, 4, 1, 3, 5, 7],\n        [],\n        [0],\n        [1, -1],\n        [-1, -1, -2],\n        [-1, -1, -2, -3, -4, -5],\n        [-1, -1, -2, -3, -4, -5, -6],\n        [-1, -1, -2, -3, -4, -5, -6, -7],\n        [-1, -1, -2, -3, -4, -5, -6, -7, -8],\n        [-1, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n    ]\n    for test_case in test_cases:\n        print 'test case:', test_case\n        result = largest_smallest_integers(test_case)\n        print 'largest:', result[0]\n        print'smallest:', result[1]",
      -3.248046875
    ],
    [
      "if lst:\n        a, b = lst[0], lst[-1]\n        for i in lst[1:-1]:\n            if a > i:\n                a, b = i, a\n            elif b < i:\n                b, a = i, b\n        return a, b\n    return None, None\n\n\ndef max_min_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the maximum of positive integers, and 'b' is the minimum of\n    negative integers in a list.\n    If there is no positive or negative integers, return them as None.\n\n    Examples:\n    max_min_integers([2, 4, 1, 3, 5, 7]) == (7, -3)\n    max_min_integers([]) == (None, None)\n    max_min_integers([0]) == (None, None)\n    '''\n    if lst:\n        a, b = lst[0], lst[-1]\n        for i in lst[1:-1]:\n            if a < i:\n                a, b = i, a\n            elif b > i:\n                b, a = i, b\n        return a, b\n    return None, None\n\n\ndef is_palindrome(num):\n    '''\n    Create a function that returns True if the number is a palindrome,\n    and returns False otherwise.\n\n    Examples:\n    is_palindrome(1) == True\n    is_palindrome(2) == True\n    is_palindrome(4) == True\n    is_palindrome(5) == False\n    is_palindrome(12) == False\n    '''\n    if num < 0:\n        return False\n    return str(num) == str(num)[::-1]\n\n\ndef is_palindrome_list(lst):\n    '''\n    Create a function that returns True if the list is a palindrome,\n    and returns False otherwise.\n\n    Examples:\n    is_palindrome_list([1, 2, 4, 5, 12]) == True\n    is_palind",
      -3.2890625
    ],
    [
      "if not lst:\n        return (None, None)\n    max_neg = min_pos = lst[0]\n    for i in lst:\n        if i < 0:\n            max_neg = max(max_neg, i)\n        else:\n            min_pos = min(min_pos, i)\n    return (max_neg, min_pos)\n\n\ndef test_largest_smallest_integers():\n    '''\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (7, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    >>> largest_smallest_integers([0, 1, 2])\n    (None, None)\n    >>> largest_smallest_integers([-1, -2, -3, -4, -5])\n    (-1, -5)\n    '''\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (7, 1)\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n    assert largest_smallest_integers([0, 1, 2]) == (None, None)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5]) == (-1, -5)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.291015625
    ],
    [
      "if not lst:\n        return (None, None)\n\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            if b is None:\n                b = i\n                a = i + 1\n        elif b is None:\n            b = i\n            a = i - 1\n    return (a, b)\n\n\ndef largest_smallest_integers_with_duplicates(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_with_duplicates([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_with_duplicates([2, 4, 1, 3, 5, 7, 8]) == (None, 8)\n    largest_smallest_integers_with_duplicates([]) == (None, None)\n    largest_smallest_integers_with_duplicates([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            if b is None:\n                b = i\n                a = i + 1\n        elif b is None:\n            b = i\n            a = i - 1\n    return (a, b)\n\n\ndef largest_smallest_integers_with_duplicates_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_with_duplicates_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest",
      -3.318359375
    ],
    [
      "if len(lst) == 0:\n        return (None, None)\n\n    if len(lst) == 1:\n        return lst[0]\n\n    # First, find the largest and smallest positive integers\n    max_int = max(lst)\n    min_int = min(lst)\n\n    # Now, find the largest and smallest negative integers\n    max_neg_int = max_int * -1\n    min_neg_int = min_int * -1\n\n    return (max_neg_int, min_neg_int)\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n\n    if len(lst) == 1:\n        return lst[0]\n\n    # First, find the largest and smallest positive integers\n    max_int = max(lst)\n    min_int = min(lst)\n\n    # Now, find the largest and smallest negative integers\n    max_neg_int = max_int * -1\n    min_neg_int = min_int * -1\n\n    return (max_neg_int, min_neg_int)",
      -3.37890625
    ],
    [
      "a = None\n    b = None\n\n    for i in lst:\n        if i < 0:\n            if a is None:\n                a = -i\n            elif i > b:\n                b = i\n        elif i > 0:\n            if a is None:\n                a = i\n            elif i < b:\n                b = i\n\n    return (a, b)\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    a = None\n    b = None\n\n    for i in lst:\n        if i < 0:\n            if a is None:\n                a = -i\n            elif i > b:\n                b = i\n        elif i > 0:\n            if a is None:\n                a = i\n            elif i < b:\n                b = i\n\n    return (a, b)\n\nif __name__ == '__main__':\n    print(largest_smallest_integers([1, 2, 3, 4, 5, 6]))\n    print(largest_smallest_integers_2([1, 2, 3, 4, 5, 6]))",
      -3.607421875
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        if lst:\n            max_i, min_i = lst[0], lst[0]\n            for i in lst[1:]:\n                if i < 0:\n                    max_i = max(max_i, i)\n                elif i > 0:\n                    min_i = min(min_i, i)\n                else:\n                    return None, None\n            return max_i, min_i\n        else:\n            return None, None\n    return largest_smallest_integers_aux\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    def largest_smallest_integers_aux(lst):\n        if lst:\n            max_i, min_i = lst[0], lst[0]\n            for i in lst[1:]:\n                if i < 0:\n                    max_i = max(max_i, i)\n                elif i > 0:\n                    min_i = min(min_i, i)\n                else:\n                    return None, None\n            return max_i, min_i\n        else:\n            return None, None\n    return largest_smallest_integers_aux\n\nif __name__ == \"__main__\":\n    lst = [0, 1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7]\n    print(largest_smallest_integers(lst))\n    print(largest_smallest_integers",
      -3.80078125
    ],
    [
      "# This function is not implemented in Python 2.7\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/12488094/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/11789930/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/17451375/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/16054551/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/14251439/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/14056501/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/13180585/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/13252949/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/12488094/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/12488094/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/12488094/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/12488094/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/12488094/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/12488094/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com/a/12488094/12488094\n    #\n    # This implementation is from\n    # http://stackoverflow.com",
      -3.810546875
    ],
    [
      "a, b = None, None\n\n    for i in lst:\n        if i < 0:\n            if a is not None:\n                a, b = None, i\n        else:\n            if a is None:\n                a = i\n            else:\n                a = min(a, i)\n\n    return a, b\n\ndef largest_smallest_integers_1(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    a, b = None, None\n    for i in lst:\n        if i < 0:\n            a, b = None, i\n        else:\n            if a is None:\n                a = i\n            else:\n                a = min(a, i)\n\n    return a, b\n\nif __name__ == '__main__':\n    print largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    print largest_smallest_integers([])\n    print largest_smallest_integers([0])",
      -3.9140625
    ],
    [
      "if not lst:\n        return (None, None)\n\n    lst = sorted(lst)\n    negative_ints = [i for i in lst if i < 0]\n    positive_ints = [i for i in lst if i > 0]\n\n    if not negative_ints and not positive_ints:\n        return (None, None)\n\n    if not negative_ints:\n        return (positive_ints[-1], positive_ints[0])\n\n    if not positive_ints:\n        return (negative_ints[-1], negative_ints[0])\n\n    return (positive_ints[-1], negative_ints[0])\n\n\ndef get_max_min_of_list(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    get_max_min_of_list([2, 4, 1, 3, 5, 7]) == (None, 1)\n    get_max_min_of_list([]) == (None, None)\n    get_max_min_of_list([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    lst = sorted(lst)\n    negative_ints = [i for i in lst if i < 0]\n    positive_ints = [i for i in lst if i > 0]\n\n    if not negative_ints and not positive_ints:\n        return (None, None)\n\n    if not negative_ints:\n        return (positive_ints[-1], positive_ints[0])\n\n    if not positive_ints:\n        return (negative_ints[-1], negative_ints[0])\n\n    return (positive_ints[-1], negative_ints[0])\n\n\ndef get_max_min_of_range(range_start, range_end):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest",
      -3.96875
    ],
    [
      "a, b = None, None\n    for x in lst:\n        if x < 0:\n            a = None\n        elif x > 0:\n            b = None\n        else:\n            return a, b\n    return a, b\n\n\ndef longest_shortest_strings(lst):\n    '''\n    Create a function that returns the longest and shortest\n    string in a list.\n\n    Examples:\n    longest_shortest_strings([1, 2, 3, 4, 5]) == ('1', '5')\n    longest_shortest_strings([]) == ('', '')\n    '''\n    longest, shortest = '', ''\n    for i in lst:\n        if len(longest) < len(i):\n            longest = i\n        elif len(shortest) < len(i):\n            shortest = i\n    return longest, shortest\n\n\ndef longest_shortest_strings_recursive(lst):\n    '''\n    Create a recursive function that returns the longest and shortest\n    string in a list.\n\n    Examples:\n    longest_shortest_strings_recursive([1, 2, 3, 4, 5]) == ('1', '5')\n    longest_shortest_strings_recursive([]) == ('', '')\n    '''\n    if not lst:\n        return ('', '')\n    longest, shortest = '', ''\n    for i in lst:\n        if len(longest) < len(i):\n            longest = i\n        elif len(shortest) < len(i):\n            shortest = i\n    return longest, shortest\n\n\ndef longest_shortest_strings_recursive_2(lst):\n    '''\n    Create a recursive function that returns the longest and shortest\n    string in a list.\n\n    Examples:\n    longest_shortest_strings_recursive_2([1, 2, 3, 4, 5]) == ('1', '5')\n    longest_shortest_strings_recursive_2([]) == ('', '')\n    '''\n    if not lst:\n        return ('', '')\n    longest, shortest = '', ''\n    for i in lst",
      -4.09765625
    ],
    [
      "a, b = None, None\n    for x in lst:\n        if x < 0:\n            a, b = b, a\n        elif x > 0:\n            a, b = x, b\n        else:\n            a, b = None, None\n    return a, b\n\n\ndef get_max_sum(nums):\n    '''\n    Create a function that returns the maximum sum of the numbers.\n    If there is no maximum sum, return None.\n\n    Examples:\n    get_max_sum([2, 4, 1, 3, 5, 7]) == 8\n    get_max_sum([]) == None\n    get_max_sum([0]) == None\n    '''\n    max_sum = None\n    for num in nums:\n        if num > max_sum:\n            max_sum = num\n    return max_sum\n\n\ndef get_max_sum_partition(nums):\n    '''\n    Create a function that returns the maximum sum of the numbers\n    when they are partitioned into two or more groups.\n    If there is no maximum sum, return None.\n\n    Examples:\n    get_max_sum_partition([2, 4, 1, 3, 5, 7]) == 8\n    get_max_sum_partition([]) == None\n    get_max_sum_partition([0]) == None\n    '''\n    max_sum = None\n    for num in nums:\n        if len(nums) == 1:\n            max_sum = num\n        else:\n            if num > max_sum:\n                max_sum = num\n    return max_sum\n\n\ndef largest_smallest_integers_partition(nums):\n    '''\n    Create a function that returns the largest and smallest\n    integers in a list when they are partitioned into two or more\n    groups.\n    If there is no maximum or minimum, return them as None.\n\n    Examples:\n    largest_smallest_integers_partition([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_partition([]) == (None, None)\n    largest_smallest_integers_partition",
      -4.25
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        elif i > 0:\n            b = i\n    return (a, b)\n\n\ndef main():\n    '''\n    Test suite:\n    1. Test largest_smallest_integers\n    2. Test largest_smallest_integers_with_one_negative_and_one_positive\n    3. Test largest_smallest_integers_with_two_negative_and_two_positive\n    4. Test largest_smallest_integers_with_three_negative_and_three_positive\n    5. Test largest_smallest_integers_with_four_negative_and_four_positive\n    '''\n    assert largest_smallest_integers([1, 2, 3, 4, 5]) == (5, 1)\n    assert largest_smallest_integers([-3, -2, -1, 0, 1, 2]) == (2, -1)\n    assert largest_smallest_integers([-3, -2, -1, 0, 1, 2, 3, 4]) == (4, 3)\n    assert largest_smallest_integers([-3, -2, -1, 0, 1, 2, 3, 4, 5]) == (5, 4)\n    assert largest_smallest_integers([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6]) == (6, 5)\n\n    assert largest_smallest_integers_with_one_negative_and_one_positive() == (None, 1)\n    assert largest_smallest_integers_with_two_negative_and_two_positive() == (None, 1)\n    assert largest_smallest_integers_with_three_negative_and_three_positive() == (None, 1)\n    assert largest_smallest_integers_with_four_negative_and_four_positive() == (None, 1)\n\n\nif __name__ == '__main__':\n    main()",
      -4.2734375
    ],
    [
      "# The first element in the list is always the smallest.\n    a = lst[0]\n    b = lst[0]\n\n    for i in lst:\n        if i > 0:\n            if a is None:\n                a = i\n            else:\n                if a > i:\n                    a = i\n        elif i < 0:\n            if b is None:\n                b = i\n            else:\n                if b < i:\n                    b = i\n\n    return (a, b)\n\n\ndef test_largest_smallest_integers():\n    assert largest_smallest_integers([-3, -1, -2, -5, -6, -8, -9]) == (-5, 1)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7]) == (-4, -1)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8]) == (-8, -1)\n    assert largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-9, 1)\n\n\nif __name__ == \"__main__\":\n    test_largest_smallest_integers()",
      -4.640625
    ],
    [
      "# Use an empty list to get the largest and smallest numbers\n    if not lst:\n        return (None, None)\n    # Initialize a list to store the largest and smallest numbers\n    largest = None\n    smallest = None\n    # Iterate over the list to find the largest and smallest numbers\n    for i in lst:\n        # If there is no negative or positive numbers, return them as None\n        if not i:\n            return (None, None)\n        # If the current number is the largest, update the largest number\n        if i > largest:\n            largest = i\n        # If the current number is the smallest, update the smallest number\n        if i < smallest:\n            smallest = i\n    # Return the largest and smallest numbers\n    return (largest, smallest)\n\n\nif __name__ == '__main__':\n    lst = [2, 4, 1, 3, 5, 7]\n    print(largest_smallest_integers(lst))\n    lst = []\n    print(largest_smallest_integers(lst))\n    lst = [0]\n    print(largest_smallest_integers(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(largest_smallest_integers(lst))",
      -4.94140625
    ],
    [
      "if not lst:\n        return None, None\n\n    # Get the largest and smallest integers\n    a, b = min(lst), max(lst)\n\n    # Return the largest and smallest integers\n    return a, b\n\n\ndef largest_smallest_integers_with_list(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_with_list([2, 4, 1, 3, 5, 7]) == (2, 1)\n    largest_smallest_integers_with_list([]) == (None, None)\n    largest_smallest_integers_with_list([0]) == (None, None)\n    '''\n    if not lst:\n        return None, None\n\n    # Get the largest and smallest integers\n    a, b = min(lst), max(lst)\n\n    # Return the largest and smallest integers\n    return a, b\n\n\nif __name__ == '__main__':\n    print(largest_smallest_integers([-1, 1, 3, 5, 7, 9]))\n    print(largest_smallest_integers_with_list([-1, 1, 3, 5, 7, 9]))",
      -4.9453125
    ],
    [
      "def largest_smallest_integers(lst):\n        '''\n        Create a function that returns a tuple (a, b), where 'a' is\n        the largest of negative integers, and 'b' is the smallest\n        of positive integers in a list.\n        If there is no negative or positive integers, return them as None.\n        '''\n        if lst:\n            a = -max([abs(int(i)) for i in lst])\n            b = min([int(i) for i in lst])\n            return (a, b)\n        else:\n            return (None, None)\n    return largest_smallest_integers\n\ndef longest_shortest_strings(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the longest of strings, and 'b' is the shortest of strings\n    in a list.\n    If there is no strings, return them as None.\n\n    Examples:\n    longest_shortest_strings([2, 4, 1, 3, 5, 7]) == (None, 1)\n    longest_shortest_strings([]) == (None, None)\n    longest_shortest_strings([0]) == (None, None)\n    '''\n    def longest_shortest_strings(lst):\n        '''\n        Create a function that returns a tuple (a, b), where 'a' is\n        the longest of strings, and 'b' is the shortest of strings\n        in a list.\n        If there is no strings, return them as None.\n        '''\n        if lst:\n            a = max(lst)\n            b = min(lst)\n            return (a, b)\n        else:\n            return (None, None)\n    return longest_shortest_strings\n\ndef longest_shortest_strings_with_unique_elements(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the longest of strings, and 'b' is the shortest of strings\n    in a list.\n    If there is no strings, return them as None.\n\n    Examples:\n    longest_shortest_strings",
      -5.20703125
    ],
    [
      "if not lst:\n        return None, None\n    if not lst:\n        return None, None\n\n    a = lst[0]\n    b = lst[0]\n    for i in lst[1:]:\n        if i < 0:\n            a = max(a, i)\n        elif i > 0:\n            b = min(b, i)\n    return a, b\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    if not lst:\n        return None, None\n    if not lst:\n        return None, None\n\n    a = lst[0]\n    b = lst[0]\n    for i in lst[1:]:\n        if i < 0:\n            a = max(a, i)\n        elif i > 0:\n            b = min(b, i)\n    return a, b\n\n\ndef is_pandigital(n):\n    '''\n    Create a function that checks if a number is pandigital.\n    A pandigital number is a number that is made up of all of the digits\n    of a number from 1 to 9.\n    If the number is not a pandigital, return False.\n\n    Examples:\n    is_pandigital(123456789) == True\n    is_pandigital(123456789) == False\n    is_pandigital(123456789) == False\n    is_pandigital(123456789) == False\n    '''\n    if not n:\n        return False\n\n    digits = list(str",
      -5.78125
    ],
    [
      "if not lst:\n        return (None, None)\n    max_int = max(lst)\n    min_int = min(lst)\n    if max_int < 0:\n        return (None, min_int)\n    elif min_int > 0:\n        return (max_int, min_int)\n    else:\n        return (max_int, min_int)\n\n\nif __name__ == '__main__':\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1, 2]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1, 2, 3]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1, 2, 3, 4]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1, 2, 3, 4, 5]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1, 2, 3, 4, 5, 6]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1, 2, 3, 4, 5, 6, 7]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1, 2, 3, 4, 5, 6, 7, 8]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == (7, 1)\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 1, 2,",
      -5.796875
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        if len(lst) == 0:\n            return (None, None)\n        if len(lst) == 1:\n            return (lst[0], None)\n        a = lst[0]\n        b = lst[1]\n        for i in range(2, len(lst)):\n            if a < 0:\n                a = lst[i]\n            elif b > 0:\n                b = lst[i]\n        return (a, b)\n    return largest_smallest_integers_aux(lst)\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (7, 1)\n    assert largest_smallest_integers([-1, -3, -5, -7, -9]) == (-9, -7)\n    assert largest_smallest_integers([1, 2, 3, 4]) == (4, 3)\n    assert largest_smallest_integers([-1, -2, -3, -4]) == (-4, -3)\n    assert largest_smallest_integers([-1, -2, -3, -4]) == (-4, -3)",
      -6.0703125
    ],
    [
      "a = b = None\n    for i in lst:\n        if i < 0:\n            a = -i\n        elif i > 0:\n            b = i\n    return a, b\n\n\ndef test_largest_smallest_integers():\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (7, 1)\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n\n\ndef test_largest_smallest_integers_2():\n    assert largest_smallest_integers([-2, 4, 1, 3, 5, 7]) == (-2, 5)\n    assert largest_smallest_integers([-2, -1, 0, 3, 5, 7]) == (-2, 7)\n    assert largest_smallest_integers([-2, -1, 0, -3, 5, 7]) == (7, -3)\n\n\ndef test_largest_smallest_integers_3():\n    assert largest_smallest_integers([-2, -1, 0, 3, 5, 7]) == (7, -3)\n    assert largest_smallest_integers([-2, -1, 0, -3, 5, 7]) == (5, -3)\n\n\ndef test_largest_smallest_integers_4():\n    assert largest_smallest_integers([-2, -1, 0, -3, 5, 7]) == (5, -3)\n    assert largest_smallest_integers([-2, -1, 0, 3, 5, 7]) == (7, 3)\n\n\ndef test_largest_smallest_integers_5():\n    assert largest_smallest_integers([-2, -1, 0, -3, 5, 7]) == (7, -3)\n    assert largest_smallest_integers([-2, -1, 0, 3, 5, 7]) == (5, 3)\n\n\ndef test_largest_smallest_integers_6():\n    assert largest_smallest_integers([-2, -1, 0, -3, 5, 7",
      -6.5546875
    ],
    [
      "return (largest_smallest_integer(lst), smallest_largest_integer(lst))\n\n\ndef largest_smallest_integer(lst):\n    '''\n    Create a function that returns the largest of negative integers\n    in a list.\n    If there is no negative integers, return None.\n\n    Examples:\n    largest_smallest_integer([2, 4, 1, 3, 5, 7]) == 7\n    largest_smallest_integer([]) == None\n    largest_smallest_integer([0]) == None\n    '''\n    if len(lst) == 0:\n        return None\n\n    return max(filter(lambda x: x < 0, lst))\n\n\ndef smallest_largest_integer(lst):\n    '''\n    Create a function that returns the smallest of positive integers\n    in a list.\n    If there is no positive integers, return None.\n\n    Examples:\n    smallest_largest_integer([2, 4, 1, 3, 5, 7]) == 1\n    smallest_largest_integer([]) == None\n    smallest_largest_integer([0]) == None\n    '''\n    if len(lst) == 0:\n        return None\n\n    return min(filter(lambda x: x > 0, lst))\n\n\ndef largest_smallest_integers_in_range(lst, start, end):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers in a range, and 'b' is the\n    smallest of positive integers in a range.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_in_range([2, 4, 1, 3, 5, 7], 0, 7) == (None, 7)\n    largest_smallest_integers_in_range([], 0, 7) == (None, None)\n    largest_smallest_integers_in_range([0], 0, 7) == (None, None)\n    largest_smallest_integers_in_range([2, 4, 1, 3, 5, 7], 0, 0) == (None, None)\n    largest_small",
      -6.7578125
    ],
    [
      "if not lst:\n        return (None, None)\n    for i in range(len(lst) - 1, -1, -1):\n        if lst[i] < 0:\n            return (lst[i], lst[i + 1])\n    return (lst[0], lst[-1])\n\n\ndef main():\n    '''\n    Create a function that takes a list of integers and returns\n    a tuple (a, b), where 'a' is the largest of negative integers\n    and 'b' is the smallest of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''\n    test_cases = [\n        [1, 2, 3, 4],\n        [-1, 0, 1, 2, 3, 4],\n        [],\n        [-1, 0],\n        [0, 1, 2, 3, 4],\n        [1, 2, 3, 4, 5, 6],\n    ]\n    for test_case in test_cases:\n        print('-' * 80)\n        print('Test case:', test_case)\n        print('-' * 80)\n        print(largest_smallest_integers(test_case))\n\nif __name__ == '__main__':\n    main()",
      -6.89453125
    ],
    [
      "def largest_smallest(lst):\n        if len(lst) == 0:\n            return (None, None)\n        if len(lst) == 1:\n            return (lst[0], lst[0])\n        a = lst[0]\n        b = lst[0]\n        for x in lst[1:]:\n            if x < 0:\n                a = x\n            else:\n                b = x\n        return (a, b)\n    return largest_smallest\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    def largest_smallest(lst):\n        if len(lst) == 0:\n            return (None, None)\n        if len(lst) == 1:\n            return (lst[0], lst[0])\n        a = lst[0]\n        b = lst[0]\n        for x in lst[1:]:\n            if x < 0:\n                a = x\n            else:\n                b = x\n        return (a, b)\n    return largest_smallest\n\n\ndef largest_smallest_integers_3(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_3([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_",
      -7.1171875
    ],
    [
      "if not lst:\n        return (None, None)\n    if not lst:\n        return (None, None)\n    # find max and min\n    max = min = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n        elif i < min:\n            min = i\n    # find largest and smallest of max and min\n    max_pos = min_neg = None\n    for i in (max, min):\n        if i > 0:\n            max_pos = max_pos if max_pos is None else max_pos\n        else:\n            min_neg = min_neg if min_neg is None else min_neg\n    return (max_pos, min_neg)\n\nif __name__ == '__main__':\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n    print(largest_smallest_integers([1, 2, 3, 4, 5, 6]))\n    print(largest_smallest_integers([1, 2, 3, 4, 5]))\n    print(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7]))",
      -7.1328125
    ],
    [
      "return largest_smallest_integers_aux(lst)\n\n\ndef largest_smallest_integers_aux(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_aux([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_aux([]) == (None, None)\n    largest_smallest_integers_aux([0]) == (None, None)\n    '''\n    if not lst:\n        return (None, None)\n\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n\n    # Sort the list.\n    lst.sort()\n\n    # Find the largest positive and smallest negative integers.\n    # (We don't need to check for negative numbers, since if there\n    # are no positive numbers, then there must be no negative numbers.)\n    if lst[0] < 0:\n        return (lst[0], lst[-1])\n    elif lst[-1] < 0:\n        return (lst[-1], lst[0])\n\n    # Find the largest negative and smallest positive integers.\n    return (lst[0], lst[-1])\n\n\ndef test_largest_smallest_integers():\n    '''\n    Test largest_smallest_integers() function.\n    '''\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n    assert largest_smallest_integers([0, 0, 0, 0, 0, 0]) == (None, None)\n    assert largest_smallest_integers([-1, -1, -1, -1, -1, -1]) == (None, None)\n    assert largest_smallest_integers([-2, -2, -2, -2, -2,",
      -7.43359375
    ],
    [
      "if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n\n    a = None\n    b = None\n    for i in range(0, len(lst)):\n        if lst[i] < 0:\n            if a is not None:\n                if a < 0:\n                    return (a, b)\n                else:\n                    a = None\n            a = lst[i]\n        else:\n            if b is not None:\n                if b > 0:\n                    return (a, b)\n                else:\n                    b = None\n            b = lst[i]\n    return (a, b)\n\n\ndef smallest_largest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the smallest of positive integers, and 'b' is the largest of\n    negative integers in a list.\n    If there is no positive or negative integers, return them as None.\n\n    Examples:\n    smallest_largest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n    smallest_largest_integers([]) == (None, None)\n    smallest_largest_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n\n    a = None\n    b = None\n    for i in range(0, len(lst)):\n        if lst[i] > 0:\n            if b is not None:\n                if b < 0:\n                    return (a, b)\n                else:\n                    b = None\n            b = lst[i]\n        else:\n            if a is not None:\n                if a > 0:\n                    return (a, b)\n                else:\n                    a = None\n            a = lst[i]\n    return (a, b)\n\n\ndef smallest_largest_integers_in_list(lst):",
      -8.1171875
    ],
    [
      "if len(lst) == 0:\n        return (None, None)\n\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n\n    for i in range(0, len(lst)):\n        if lst[i] > 0:\n            return (lst[i], lst[0])\n        if lst[i] < 0:\n            return (lst[0], lst[i])\n\n    return (None, None)\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n\n    for i in range(0, len(lst)):\n        if lst[i] > 0:\n            return (lst[i], lst[0])\n        if lst[i] < 0:\n            return (lst[0], lst[i])\n\n    return (None, None)\n\n\ndef test_largest_smallest_integers():\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (7, 1)\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n\n    assert largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (7, 1)\n    assert largest_smallest_integers_2([",
      -8.40625
    ],
    [
      "a = None\n    b = None\n    for i in lst:\n        if a is None:\n            a = i\n        elif i > 0:\n            if a < 0:\n                a = i\n        elif i < 0:\n            if b is None:\n                b = i\n            else:\n                a = i\n    return (a, b)\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in lst:\n        if a is None:\n            a = i\n        elif i > 0:\n            if a < 0:\n                a = i\n        elif i < 0:\n            if b is None:\n                b = i\n            else:\n                a = i\n    return (a, b)\n\n\ndef largest_smallest_integers_3(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_3([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_3([]) == (None, None)\n    largest_smallest_integers_3([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for i in lst:\n        if a is None:",
      -8.46875
    ],
    [
      "return (largest_smallest_integers_recursive(lst),\n            smallest_largest_integers_recursive(lst))\n\n\ndef largest_smallest_integers_recursive(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_recursive([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_recursive([]) == (None, None)\n    largest_smallest_integers_recursive([0]) == (None, None)\n    '''\n    if lst:\n        if len(lst) == 1:\n            return (lst[0], None)\n        else:\n            return (largest_smallest_integers_recursive(lst[:-1]), lst[-1])\n    else:\n        return (None, None)\n\n\ndef smallest_largest_integers_recursive(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the smallest of positive integers, and 'b' is the largest\n    of negative integers in a list.\n    If there is no positive or negative integers, return them as None.\n\n    Examples:\n    smallest_largest_integers_recursive([2, 4, 1, 3, 5, 7]) == (1, None)\n    smallest_largest_integers_recursive([]) == (None, None)\n    smallest_largest_integers_recursive([0]) == (None, None)\n    '''\n    if lst:\n        if len(lst) == 1:\n            return (lst[0], None)\n        else:\n            return (smallest_largest_integers_recursive(lst[1:]), lst[0])\n    else:\n        return (None, None)\n\n\ndef smallest_largest_integers(lst):\n    '''",
      -8.5859375
    ],
    [
      "if not lst:\n        return None, None\n\n    a = lst[0]\n    b = lst[0]\n\n    for i in range(1, len(lst)):\n        if a is None:\n            a = lst[i]\n        elif b is None:\n            b = lst[i]\n        else:\n            a, b = max(a, lst[i]), min(b, lst[i])\n\n    return a, b\n\n\ndef largest_smallest_integers_recursive(lst):\n    '''\n    Create a recursive function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest of positive integers\n    in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_recursive([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_recursive([]) == (None, None)\n    largest_smallest_integers_recursive([0]) == (None, None)\n    '''\n    if not lst:\n        return None, None\n\n    a = lst[0]\n    b = lst[0]\n\n    for i in range(1, len(lst)):\n        if a is None:\n            a = lst[i]\n        elif b is None:\n            b = lst[i]\n        else:\n            a, b = max(a, lst[i]), min(b, lst[i])\n\n    return a, b\n\nif __name__ == '__main__':\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]))\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7, 0, 0]))\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7, 0, 0, 0]))",
      -9.171875
    ],
    [
      "if len(lst) == 0:\n        return (None, None)\n    if lst[0] < 0:\n        return (None, lst[0])\n    if lst[-1] > 0:\n        return (lst[-1], None)\n    else:\n        return (None, lst[-1])\n\n\ndef find_max_min_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    find_max_min_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    find_max_min_integers([]) == (None, None)\n    find_max_min_integers([0]) == (None, None)\n    '''\n    if len(lst) == 0:\n        return (None, None)\n    if lst[0] < 0:\n        return (lst[0], lst[0])\n    if lst[-1] > 0:\n        return (lst[-1], None)\n    else:\n        return (None, lst[-1])\n\n\ndef sum_of_integers_from_to(start, end):\n    '''\n    Create a function that returns the sum of integers\n    between'start' and 'end'.\n    If there is no integers between'start' and 'end', return 0.\n\n    Examples:\n    sum_of_integers_from_to(0, 5) == 5\n    sum_of_integers_from_to(1, 5) == 4\n    sum_of_integers_from_to(1, None) == 4\n    sum_of_integers_from_to(None, 5) == 5\n    sum_of_integers_from_to(None, None) == 0\n    '''\n    if start is None:\n        return 0\n    if end is None:\n        return start\n    return sum(i for i in range",
      -9.3125
    ],
    [
      "# no negative or positive integers, return them as None\n    if not lst:\n        return (None, None)\n\n    # create a list of the largest and smallest integers\n    largest = max(lst)\n    smallest = min(lst)\n\n    # return the largest and smallest integers\n    return (largest, smallest)\n\nif __name__ == '__main__':\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # test a list with no negative or positive integers\n    print(largest_smallest_integers([]))\n\n    # test a list with negative integers\n    print(largest_smallest_integers([-2]))\n\n    # test a list with positive integers\n    print(largest_smallest_integers([3, 4, 7, 1, 5, 2]))\n\n    # test a list with negative and positive integers\n    print(largest_smallest_integers([-2, 4, 7, 1, 5, 2]))",
      -9.390625
    ],
    [
      "a = None\n    b = None\n    for x in lst:\n        if x > 0:\n            a = x\n        elif x < 0:\n            b = x\n    return (a, b)\n\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    a = None\n    b = None\n    for x in lst:\n        if x > 0:\n            a = x\n        elif x < 0:\n            b = x\n    if a is None:\n        return (None, None)\n    else:\n        return (a, b)\n\n\nif __name__ == \"__main__\":\n    print(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n    print(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]))\n    print(largest_smallest_integers_2([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(largest_smallest_integers",
      -9.7890625
    ],
    [
      "# TODO: write this function\n    return None\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7]) == (5, 1)\n    assert largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7, 0]) == (7, 1)\n    assert largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7, 0, 9]) == (9, 1)\n    assert largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7, 0, 9, -1]) == (9, -1)\n    assert largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7, 0, 9, -1, 0]) == (9, -1)\n    assert largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7, 0, 9, -1, 0, -1]) == (9, -1)\n    assert largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7, 0, 9, -1, 0, -1, 0]) == (9, -1)\n    assert largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7, 0, 9, -1, 0, -1, 0, -1]) == (9, -1)",
      -10.1796875
    ],
    [
      "def largest_smallest_integers_helper(lst):\n        if lst:\n            a, b = sorted(lst)[-2:]\n            return a, b\n        return None, None\n    return largest_smallest_integers_helper\n\n\ndef print_list(lst):\n    '''\n    Print a list, one element per line.\n    '''\n    for i in lst:\n        print i,\n    print\n\ndef print_dict(dct):\n    '''\n    Print a dictionary, one key per line.\n    '''\n    for k, v in dct.items():\n        print k, v,\n    print\n\ndef print_tuple(tup):\n    '''\n    Print a tuple, one element per line.\n    '''\n    for i in tup:\n        print i,\n    print\n\ndef print_str(s):\n    '''\n    Print a string, one character per line.\n    '''\n    for i in s:\n        print i,\n    print\n\ndef print_int(n):\n    '''\n    Print an integer, one character per line.\n    '''\n    for i in str(n):\n        print i,\n    print\n\ndef print_float(n):\n    '''\n    Print a float, one character per line.\n    '''\n    for i in str(n):\n        print i,\n    print\n\ndef print_char(c):\n    '''\n    Print a single character, one character per line.\n    '''\n    for i in c:\n        print i,\n    print\n\ndef print_char_str(s):\n    '''\n    Print a string of characters, one character per line.\n    '''\n    for i in s:\n        print i,\n    print\n\ndef print_char_int(n):\n    '''\n    Print a string of characters, one character per line.\n    '''\n    for i in str(n):\n        print i,\n    print\n\ndef print_char_float(n):\n    '''\n    Print a string of characters, one character per line.\n    '''\n    for i",
      -10.25
    ],
    [
      "if not lst:\n        return (None, None)\n    # largest and smallest numbers in lst\n    max_number = max(lst)\n    min_number = min(lst)\n    # largest and smallest numbers in lst\n    # if there are no negative or positive numbers\n    if max_number == min_number:\n        return (None, None)\n    # if there is one positive number\n    if max_number == 1:\n        return (0, max_number)\n    # if there are two positive numbers\n    if max_number == 2:\n        return (1, max_number)\n    # if there are three positive numbers\n    if max_number == 3:\n        return (2, max_number)\n    # if there are four positive numbers\n    if max_number == 4:\n        return (3, max_number)\n    # if there are five positive numbers\n    if max_number == 5:\n        return (4, max_number)\n    # if there are six positive numbers\n    if max_number == 6:\n        return (5, max_number)\n    # if there are seven positive numbers\n    if max_number == 7:\n        return (6, max_number)\n    # if there are eight positive numbers\n    if max_number == 8:\n        return (7, max_number)\n    # if there are nine positive numbers\n    if max_number == 9:\n        return (8, max_number)\n    # if there are ten positive numbers\n    if max_number == 10:\n        return (9, max_number)\n    # if there are eleven positive numbers\n    if max_number == 11:\n        return (10, max_number)\n    # if there are twelve positive numbers\n    if max_number == 12:\n        return (11, max_number)\n    # if there are thirteen positive numbers\n    if max_number == 13:\n        return (12, max_number)\n    # if there are fourteen positive numbers\n    if max_number == 14:\n        return (13, max_number)\n    # if there are fifteen positive numbers\n    if max_number == 15:\n        return (14, max_number)\n    # if there are",
      -11.96875
    ],
    [
      "if lst:\n        if all(x < 0 for x in lst):\n            return (-lst[0], lst[-1])\n        elif all(x > 0 for x in lst):\n            return (lst[0], lst[-1])\n        else:\n            return (None, None)\n    else:\n        return (None, None)\n\n\n# https://stackoverflow.com/questions/18013698/how-to-calculate-the-largest-number-of-digits-in-an-integer\ndef find_largest_digit(n):\n    '''\n    Find the largest digit in a positive integer\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return 10\n    else:\n        return find_largest_digit(n % 10) + 1\n\n\n# https://stackoverflow.com/questions/18013698/how-to-calculate-the-largest-number-of-digits-in-an-integer\ndef find_smallest_digit(n):\n    '''\n    Find the smallest digit in a positive integer\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 10 == 0:\n        return 10\n    else:\n        return find_smallest_digit(n % 10) + 1\n\n\n# https://stackoverflow.com/questions/18013698/how-to-calculate-the-largest-number-of-digits-in-an-integer\ndef find_number_of_digits(n):\n    '''\n    Find the number of digits in a positive integer\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 10 == 0:\n        return find_number_of_digits(n % 10) + 1\n    else:\n        return find_number_of_digits(n % 10) + find_number_of_digits(n / 10) + 1\n\n\n# https://stack",
      -12.1484375
    ],
    [
      "def largest_smallest_integers_aux(lst):\n        if len(lst) == 0:\n            return (None, None)\n        if len(lst) == 1:\n            return (lst[0], lst[0])\n        a = lst[0]\n        b = lst[-1]\n        for i in range(1, len(lst)):\n            if a > lst[i]:\n                a = lst[i]\n            if b < lst[i]:\n                b = lst[i]\n        return (a, b)\n    return largest_smallest_integers_aux\n\n\ndef largest_smallest_integers_with_sum(lst, sum_to_find):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list, but with sum'sum_to_find'.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_with_sum([2, 4, 1, 3, 5, 7], 8) == (None, 1)\n    largest_smallest_integers_with_sum([], 8) == (None, None)\n    largest_smallest_integers_with_sum([0], 8) == (None, None)\n    largest_smallest_integers_with_sum([1, 1, 1], 4) == (1, 1)\n    largest_smallest_integers_with_sum([1, 2, 3], 4) == (1, 3)\n    largest_smallest_integers_with_sum([2, 4, 1, 3, 5, 7], 8) == (1, 7)\n    largest_smallest_integers_with_sum([2, 4, 1, 3, 5, 7], 8, 4) == (1, 7)\n    largest_smallest_integers_with_sum([2, 4, 1, 3, 5, 7], 8, 7) == (1, 7)\n    largest_smallest_integers_with_sum([2, 4",
      -13.5546875
    ],
    [
      "if not lst:\n        return None, None\n    # find the largest and smallest integers\n    a = max(lst)\n    b = min(lst)\n    return a, b\n\n\ndef print_largest_smallest(lst):\n    '''\n    Print the largest and smallest integers in a list.\n    '''\n    if not lst:\n        return\n    a, b = largest_smallest_integers(lst)\n    print(f'Largest: {a}')\n    print(f'Smallest: {b}')\n\n\ndef main():\n    '''\n    Test the largest_smallest_integers function.\n    '''\n    lst = [2, 4, 1, 3, 5, 7]\n    print_largest_smallest(lst)\n    lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print_largest_smallest(lst)\n\n\nif __name__ == '__main__':\n    main()",
      -14.5
    ],
    [
      "# Create a function that returns the smallest and largest integer in a list.\n    def smallest_largest_integers(lst):\n        smallest = None\n        largest = None\n        for i in lst:\n            if i < 0:\n                if smallest is None:\n                    smallest = i\n                else:\n                    smallest = min(smallest, i)\n            else:\n                if largest is None:\n                    largest = i\n                else:\n                    largest = max(largest, i)\n        return smallest, largest\n    return smallest_largest_integers\n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers_2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers_2([]) == (None, None)\n    largest_smallest_integers_2([0]) == (None, None)\n    '''\n    # Create a function that returns the smallest and largest integer in a list.\n    def smallest_largest_integers(lst):\n        # Create a list of all integers.\n        integers = list(range(-sys.maxsize - 1, sys.maxsize))\n        # Sort the list.\n        integers.sort()\n        # Create a list of all possible combinations of integers.\n        pairs = []\n        for i in integers:\n            for j in integers:\n                if i < j:\n                    pairs.append((i, j))\n        pairs.sort()\n        # Create a list of all possible combinations of pairs.\n        all_pairs = []\n        for i in integers:\n            for j in integers:\n                if i < j:\n                    for k in pairs:\n                        all_pairs.append((i, k[0], k[1]))\n        # Sort the list.\n        all_pairs.sort()\n        # Find the largest and smallest.",
      -15.203125
    ],
    [
      "return _largest_smallest_integers(lst, min)\n\ndef smallest_largest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the smallest of negative integers, and 'b' is the largest of\n    positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    smallest_largest_integers([2, 4, 1, 3, 5, 7]) == (1, None)\n    smallest_largest_integers([]) == (None, None)\n    smallest_largest_integers([0]) == (None, None)\n    '''\n    return _largest_smallest_integers(lst, max)\n\ndef _largest_smallest_integers(lst, func):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    _largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    _largest_smallest_integers([]) == (None, None)\n    _largest_smallest_integers([0]) == (None, None)\n    '''\n    if not lst:\n        return None, None\n    a = func(lst)\n    if a is None:\n        return None, None\n    return a",
      -18.75
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}