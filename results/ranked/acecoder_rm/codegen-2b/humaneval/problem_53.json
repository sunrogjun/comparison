{
  "problem": {
    "task_id": "HumanEval/53",
    "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
    "canonical_solution": "    return x + y\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n",
    "entry_point": "add",
    "docstring": "",
    "problem_id": 53
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    289\n    \"\"\"\n    return x ** y\n\n\ndef fact(n: int):\n    \"\"\"Return factorial of n\n    >>> fact(5)\n    120\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return n * fact(n - 1)\n\n\ndef fibonacci(n: int):\n    \"\"\"Return nth fibonacci number\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)",
      3.900390625
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    49\n    \"\"\"\n    return x ** y\n\n\ndef equal(x: int, y: int):\n    \"\"\"Equal two numbers x and y\n    >>> equal(2, 3)\n    False\n    >>> equal(5, 7)\n    True\n    \"\"\"\n    return x == y\n\n\ndef not_equal(x: int, y: int):\n    \"\"\"Not equal two numbers x and y\n    >>> not_equal(2, 3)\n    True\n    >>> not_equal(5, 7)\n    False\n    \"\"\"\n    return x!= y\n\n\ndef greater(x: int, y: int):\n    \"\"\"Greater than two numbers x and y\n    >>> greater(2, 3)\n    False\n    >>> greater(5, 7)\n    True\n    \"\"\"\n    return x > y\n\n\ndef less(x: int, y: int):\n    \"\"\"Less than two numbers x and y\n    >>> less(2, 3)\n    True\n    >>> less(5, 7)\n    False\n    \"\"\"",
      3.734375
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1.3333333333333333\n    >>> div(5, 7)\n    2.6666666666666667\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulus of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef eq(x: int, y: int):\n    \"\"\"Equality of two numbers x and y\n    >>> eq(2, 3)\n    False\n    >>> eq(5, 7)\n    True\n    \"\"\"\n    return x == y\n\ndef ne(x: int, y: int):\n    \"\"\"Equality of two numbers x and y\n    >>> ne(2, 3)\n    True\n    >>> ne(5, 7)\n    False\n    \"\"\"\n    return x!= y\n\ndef lt(x: int, y: int):\n    \"\"\"Less than two numbers x and y\n    >>> lt(2, 3)\n    True\n    >>> lt(5, 7)\n    False\n    \"\"\"\n    return x < y\n\ndef le(x: int, y: int):\n    \"\"\"Less than or equal to two numbers x and y\n    >>> le(2, 3)\n    True\n    >>> le(5, 7)\n    True\n    \"\"\"\n    return x <= y\n\ndef gt(x: int, y: int):\n    \"\"\"Greater than two numbers x and y\n    >>> gt(2, 3)\n    False",
      3.361328125
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulus division\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef add_mod(x: int, y: int, mod: int):\n    \"\"\"Add two numbers x and y, and return remainder after division\n    >>> add_mod(2, 3, 7)\n    2\n    >>> add_mod(5, 7, 7)\n    0\n    >>> add_mod(5, 7, 8)\n    3\n    \"\"\"\n    return x + y % mod\n\ndef sub_mod(x: int, y: int, mod: int):\n    \"\"\"Subtract two numbers x and y, and return remainder after division\n    >>> sub_mod(2, 3, 7)\n    1\n    >>> sub_mod(5, 7, 7)\n    0\n    >>> sub_mod(5, 7, 8)\n    3\n    \"\"\"\n    return x - y % mod\n\ndef mul_mod(x: int, y: int, mod: int):\n    \"\"\"Multiply two numbers x and y, and return remainder after division\n    >>> mul_mod(2, 3, 7)\n    6\n    >>> mul_mod(5, 7, 7)\n    0\n    >>> mul_mod(5, 7, 8)\n    7\n    \"\"\"\n    return x * y % mod",
      2.80078125
    ],
    [
      "return x + y\n\n\ndef add_two(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_two(2, 3)\n    5\n    >>> add_two(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef subtract_two(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract_two(2, 3)\n    1\n    >>> subtract_two(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\n\ndef multiply_two(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply_two(2, 3)\n    6\n    >>> multiply_two(5, 7)\n    49\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.3333333333333333\n    >>> divide(5, 7)\n    0.5\n    \"\"\"\n    return x / y\n\n\ndef divide_two(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide_two(2, 3)\n    0.3333333333333333\n    >>> divide_two(5, 7)\n    0.5\n    \"\"\"\n    return x / y\n\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    3\n    \"\"\"\n    return x % y\n\n\ndef modulo_two(x: int, y",
      2.53125
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power of y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef factorial(x: int):\n    \"\"\"Factorial of a number\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n    >>> factorial(6)\n    720\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be positive.\")\n    if x == 0:\n        return 1\n    return x * factorial(x - 1)\n\n\ndef fibonacci(n: int):\n    \"\"\"Fibonacci number of a number\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3",
      1.423828125
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef add_to(x: int, y: int):\n    \"\"\"Add two numbers x and y to variable y\n    >>> add_to(2, 3)\n    5\n    >>> add_to(5, 7)\n    12\n    \"\"\"\n    return y + x\n\ndef sub_from(x: int, y: int):\n    \"\"\"Subtract two numbers x and y from variable y\n    >>> sub_from(2, 3)\n    1\n    >>> sub_from(5, 7)\n    2\n    \"\"\"\n    return y - x\n\ndef mul_from(x: int, y: int):\n    \"\"\"Multiply two numbers x and y from variable y\n    >>> mul_from(2, 3)\n    6\n    >>> mul_from(5, 7)\n    21\n    \"\"\"\n    return y * x\n\ndef div_from(x: int, y: int):\n    \"\"\"Divide two numbers x and y from variable y\n    >>> div_from(2, 3)\n    0\n    >>> div_from(5, 7)\n    2\n    \"\"\"\n    return y / x\n\ndef mod_from(x: int, y: int):\n    \"\"\"Mod",
      1.3876953125
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(5, 3)\n    2\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(5, 3)\n    2\n    >>> div(5, 7)\n    1\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(5, 3)\n    2\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    61\n    \"\"\"\n    return x ** y\n\ndef sqrt(x: int):\n    \"\"\"Square root of a number x\n    >>> sqrt(100)\n    25\n    \"\"\"\n    return int(x ** 0.5)\n\ndef pow_mod(x: int, y: int, m: int):\n    \"\"\"Power of x and y modulo m\n    >>> pow_mod(5, 3, 7)\n    2\n    >>> pow_mod(5, 3, 13)\n    3\n    \"\"\"\n    return (x ** y) % m\n\ndef factorial(x: int):\n    \"\"\"Factorial of a number x\n    >>> factorial(2)\n    6\n    >>> factorial(5)\n    120\n    \"\"\"\n    if x == 0:\n        return 1\n    return x * factorial(x-1)\n\ndef fibonacci(n: int):\n    \"\"\"Fibonacci number n\n    >>> fibonacci(0)\n    0\n    >>> fibonacci",
      1.3623046875
    ],
    [
      "return x + y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    63\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(3, 2)\n    1\n    >>> divide(5, 7)\n    1\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(3, 2)\n    1\n    >>> mod(5, 7)\n    1\n    \"\"\"\n    return x % y\n\ndef test():\n    \"\"\"Test the functions\n    >>> test()\n    >>> print(add(2, 3))\n    5\n    >>> print(add(5, 7))\n    12\n    >>> print(multiply(2, 3))\n    6\n    >>> print(multiply(5, 7))\n    63\n    >>> print(divide(3, 2))\n    1\n    >>> print(divide(5, 7))\n    1\n    >>> print(mod(3, 2))\n    1\n    >>> print(mod(5, 7))\n    1\n    \"\"\"\n    print(add(2, 3))\n    print(add(5, 7))\n    print(multiply(2, 3))\n    print(multiply(5, 7))\n    print(divide(3, 2))\n    print(divide(5, 7))\n    print(mod(3, 2))\n    print(mod(5, 7))\n\nif __name__ == '__main__':\n    test()",
      1.0546875
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    49\n    \"\"\"\n    return x ** y\n\n\ndef factorial(x: int):\n    \"\"\"Factorial of number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n    \"\"\"\n    if x < 0:\n        return 0\n    if x == 0:\n        return 1\n    return x * factorial(x - 1)\n\n\ndef fibonacci(n: int):\n    \"\"\"Fibonacci number n\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(8)\n    21\n    >>> fibonacci(9)\n    34\n    >>> fibonacci(",
      0.85986328125
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1\n    >>> divide(5, 7)\n    0.6\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo y of x\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef power(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    13\n    \"\"\"\n    return x ** y\n\ndef square(x: int):\n    \"\"\"Square x\n    >>> square(2)\n    4\n    >>> square(5)\n    25\n    \"\"\"\n    return x ** 2\n\ndef cube(x: int):\n    \"\"\"Cube x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n    \"\"\"\n    return x ** 3\n\ndef increment(x: int):\n    \"\"\"Increment x\n    >>> increment(2)\n    3\n    >>> increment(5)\n    6\n    \"\"\"\n    return x + 1\n\ndef decrement(x: int):\n    \"\"\"Decrement x\n    >>> decrement(2)\n    1\n    >>> decrement(5)\n    4\n    \"\"\"\n    return x - 1\n\ndef if_else(condition: bool, x: int, y: int):\n    \"\"\"If condition is true, then x is returned, otherwise y is returned\n    >>> if_else(True, 2,",
      0.85498046875
    ],
    [
      "return x + y\n\n\ndef add_int(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_int(2, 3)\n    5\n    >>> add_int(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef sub_int(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub_int(2, 3)\n    1\n    >>> sub_int(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef mul_int(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul_int(2, 3)\n    6\n    >>> mul_int(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x // y\n\n\ndef div_int(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div_int(2, 3)\n    1\n    >>> div_int(5, 7)\n    2\n    \"\"\"\n    return x // y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef mod_int(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod_int(",
      0.666015625
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2.5\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo operator\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef absolute(x: int):\n    \"\"\"Absolute value operator\n    >>> absolute(2)\n    2\n    >>> absolute(-2)\n    2\n    \"\"\"\n    return abs(x)\n\ndef neg(x: int):\n    \"\"\"Negate operator\n    >>> neg(2)\n    -2\n    \"\"\"\n    return -x\n\ndef pow(x: int, y: int):\n    \"\"\"Exponent operator\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    35\n    \"\"\"\n    return x ** y\n\ndef negation(x: int):\n    \"\"\"Negation operator\n    >>> negation(2)\n    -2\n    >>> negation(-2)\n    2\n    \"\"\"\n    return -x\n\ndef exp(x: int, y: int):\n    \"\"\"Exponent operator\n    >>> exp(2, 3)\n    8\n    >>> exp(5, 7)\n    35\n    \"\"\"\n    return x ** y\n\ndef pow(x: int, y: int):\n    \"\"\"Exponent operator\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    35\n    \"\"\"\n    return x",
      0.615234375
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.3333333333333333\n    >>> divide(5, 7)\n    0.5\n    \"\"\"\n    if y == 0:\n        raise ZeroDivisionError\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo division\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef gcd(x: int, y: int):\n    \"\"\"Greatest common divisor\n    >>> gcd(3, 4)\n    3\n    >>> gcd(4, 4)\n    4\n    >>> gcd(4, 3)\n    1\n    >>> gcd(3, 3)\n    3\n    \"\"\"\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\ndef lcm(x: int, y: int):\n    \"\"\"Least common multiple\n    >>> lcm(3, 4)\n    12\n    >>> lcm(4, 4)\n    16\n    >>> lcm(4, 3)\n    12\n    >>> lcm(3, 3)\n    9\n    \"\"\"\n    return x * y / gcd(x, y)\n\ndef factorial(x: int):\n    \"\"\"Calculate factorial of x\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    >>> factorial(4)",
      0.486083984375
    ],
    [
      "return x + y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    63\n    \"\"\"\n    return x ** y\n\n\ndef eq(x: int, y: int):\n    \"\"\"Check if two numbers x and y are equal\n    >>> eq(2, 3)\n    False\n    >>> eq(5, 7)\n    True\n    \"\"\"\n    return x == y\n\n\ndef neq(x: int, y: int):\n    \"\"\"Check if two numbers x and y are not equal\n    >>> neq(2, 3)\n    True\n    >>> neq(5, 7)\n    False\n    \"\"\"\n    return x!= y\n\n\ndef lt(x: int, y: int):\n    \"\"\"Check if two numbers x and y are less than\n    >>> lt(2, 3)\n    True\n    >>> lt(5, 7)\n    False\n    \"\"\"\n    return x < y\n\n\ndef le(x: int, y: int):\n    \"\"\"Check if two numbers x and y are less than or equal\n    >>> le(2, 3)\n    True\n    >>> le(5, 7)\n    False\n    \"\"\"\n    return x <= y\n\n\ndef gt(x: int, y: int):\n    \"\"\"Check if two numbers x and y are greater than\n    >>> gt(2, 3)",
      0.462158203125
    ],
    [
      "return x + y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef add_numbers(numbers: List[int]):\n    \"\"\"Add numbers in list\n    >>> add_numbers([1, 2, 3])\n    6\n    >>> add_numbers([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    return sum(numbers)\n\ndef multiply_numbers(numbers: List[int]):\n    \"\"\"Multiply numbers in list\n    >>> multiply_numbers([1, 2, 3])\n    6\n    >>> multiply_numbers([1, 2, 3, 4, 5])\n    30\n    \"\"\"\n    return reduce(lambda x, y: x * y, numbers)\n\ndef add_with_list(numbers: List[int]):\n    \"\"\"Add numbers in list\n    >>> add_with_list([1, 2, 3])\n    6\n    >>> add_with_list([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    return sum(numbers)\n\ndef multiply_with_list(numbers: List[int]):\n    \"\"\"Multiply numbers in list\n    >>> multiply_with_list([1, 2, 3])\n    6\n    >>> multiply_with_list([1, 2, 3, 4, 5])\n    30\n    \"\"\"\n    return reduce(lambda x, y: x * y, numbers)\n\ndef add_numbers_with_list(numbers: List[int]):\n    \"\"\"Add numbers in list\n    >>> add_numbers_with_list([1, 2, 3])\n    6\n    >>> add_numbers_with_list([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    return sum(numbers)\n\ndef multiply_numbers_with_list(numbers: List[int]):\n    \"\"\"Multiply numbers in list\n    >>> multiply_numbers_with_list([1, 2, 3])\n    6",
      0.3837890625
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2.5\n    \"\"\"\n    return x / y\n\ndef power(x: int, y: int):\n    \"\"\"Raise x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    31\n    \"\"\"\n    return x ** y\n\ndef square(x: int):\n    \"\"\"Square a number x\n    >>> square(3)\n    9\n    >>> square(5)\n    25\n    \"\"\"\n    return x * x\n\ndef cube(x: int):\n    \"\"\"Cube a number x\n    >>> cube(3)\n    9\n    >>> cube(5)\n    25\n    \"\"\"\n    return x * x * x\n\ndef square_root(x: int):\n    \"\"\"Find the square root of a number x\n    >>> square_root(2)\n    1\n    >>> square_root(3)\n    1.732050807568877\n    >>> square_root(5)\n    2.23606797749979\n    \"\"\"\n    return int(x ** 0.5)\n\ndef fibonacci(n: int):\n    \"\"\"Find the nth fibonacci number\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5",
      0.285400390625
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    3\n    \"\"\"\n    return x % y\n\ndef power(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef sqrt(x: int):\n    \"\"\"Square root of a number x\n    >>> sqrt(4)\n    2\n    >>> sqrt(7)\n    3\n    \"\"\"\n    return int(math.sqrt(x))\n\ndef rand(max: int):\n    \"\"\"Return random number between 0 and max\n    >>> rand(20)\n    7\n    \"\"\"\n    return random.randint(0, max)",
      0.2110595703125
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef pow_mod(x: int, y: int, m: int):\n    \"\"\"Raise x to the power y modulo m\n    >>> pow_mod(2, 3, 5)\n    2\n    >>> pow_mod(5, 7, 17)\n    2\n    \"\"\"\n    return pow(x, y, m)\n\ndef pow_mod_mod(x: int, y: int, m1: int, m2: int):\n    \"\"\"Raise x to the power y modulo m1, modulo m2\n    >>> pow_mod_mod(2, 3, 5, 17)\n    2\n    >>> pow_mod_mod(5, 7, 17, 17)\n    2\n    \"\"\"\n    return pow_mod(x, y, m1) % m2\n\ndef fact(n: int):\n    \"\"\"Calculate factorial of n\n    >>> fact(0)\n    1\n    >>> fact(1)",
      0.2054443359375
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.6666666666666666\n    >>> divide(5, 7)\n    1.5\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo division of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef divide_mod(x: int, y: int, mod: int):\n    \"\"\"Divide two numbers x and y by a modulo\n    >>> divide_mod(2, 3, 7)\n    1\n    >>> divide_mod(5, 7, 7)\n    2\n    \"\"\"\n    return x // y % mod\n\ndef is_prime(x: int):\n    \"\"\"Check if x is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_composite(x: int):\n    \"\"\"Check if x is composite\n    >>> is_composite(2)\n    False\n    >>> is_composite(3)\n    True\n    >>> is_composite(4)\n    True\n    \"\"\"\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False",
      0.1287841796875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef abs(x: int):\n    \"\"\"Absolute value of number x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n    \"\"\"\n    return abs(x)\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(2, -3)\n    0.125\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Find the factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(-5)\n    1\n    \"\"\"\n    if x < 0:\n        return 1\n    return reduce(mul, xrange(1, x+1))\n\ndef factorial_recursive(x: int):\n    \"\"\"Find the factorial of x\n    >>> factorial_recursive(5)\n    120\n    >>> factorial_recursive(-5)\n    1\n    \"\"\"\n    if x < 0:\n        return 1\n    return reduce(mul, xrange(1, x+1))\n\ndef factorial_iterative(x: int):\n    \"\"\"Find the factorial of",
      0.08154296875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    35\n    \"\"\"\n    return x ** y\n\ndef fact(n: int):\n    \"\"\"Factorial of n\n    >>> fact(1)\n    1\n    >>> fact(2)\n    2\n    >>> fact(3)\n    6\n    >>> fact(4)\n    24\n    >>> fact(5)\n    120\n    >>> fact(6)\n    720\n    >>> fact(7)\n    5040\n    >>> fact(8)\n    40320\n    >>> fact(9)\n    362880\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return n * fact(n - 1)\n\ndef fibonacci(n: int):\n    \"\"\"Fibonacci number\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2",
      0.00423431396484375
    ],
    [
      "return x + y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(5, 7)\n    42\n    >>> multiply(5, 3)\n    15\n    \"\"\"\n    return x * y\n\n\ndef square(x: int):\n    \"\"\"Square a number x\n    >>> square(5)\n    25\n    \"\"\"\n    return x * x\n\n\ndef cube(x: int):\n    \"\"\"Cube a number x\n    >>> cube(5)\n    125\n    \"\"\"\n    return x * x * x\n\n\ndef double(x: int):\n    \"\"\"Double a number x\n    >>> double(5)\n    10\n    \"\"\"\n    return x * 2\n\n\ndef negate(x: int):\n    \"\"\"Negate a number x\n    >>> negate(5)\n    -5\n    \"\"\"\n    return -x\n\n\ndef reciprocal(x: int):\n    \"\"\"Reciprocal of a number x\n    >>> reciprocal(5)\n    0.5\n    \"\"\"\n    return 1 / x\n\n\ndef power(x: int, y: int):\n    \"\"\"Raise a number x to a power y\n    >>> power(5, 2)\n    25\n    >>> power(5, 0)\n    1\n    \"\"\"\n    return x ** y\n\n\ndef exponential(x: int):\n    \"\"\"Exponential of a number x\n    >>> exponential(2)\n    2.71828182845905\n    \"\"\"\n    return math.exp(x)\n\n\ndef sine(x: int):\n    \"\"\"Sine of a number x\n    >>> sine(0)\n    0.0\n    \"\"\"\n    return math.sin(x)\n\n\ndef cosine(x: int):\n    \"\"\"Cosine of a number x\n    >>> cosine(0)\n    1.0\n    \"\"\"\n    return math.cos(x)\n\n\ndef tangent(x: int):\n    \"\"\"Tangent of a number x\n    >>> tangent(0)\n    0.0\n    \"\"\"\n    return math.tan(x)\n\n\ndef cotangent(x: int):\n    \"\"\"Cotangent of a number x\n    >>> cotangent",
      -0.0723876953125
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(5, 3)\n    2\n    >>> div(3, 3)\n    1\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(5, 3)\n    2\n    >>> mod(3, 3)\n    0\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(5, 3)\n    125\n    >>> pow(5, 0)\n    1\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Calculate factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n    1\n    \"\"\"\n    return x * (x - 1) * (x - 2) * (x - 3) * (x - 4)\n\ndef sqrt(x: int):\n    \"\"\"Calculate square root of x\n    >>> sqrt(5)\n    2\n    >>> sqrt(0)\n    Traceback (most recent call last):\n   ...\n    ValueError: x must be positive\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be positive\")\n    return int(x ** 0.5)\n\ndef is_prime(x: int):\n    \"\"\"Check if x is prime\n    >>> is_prime(5)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    True\n    >>>",
      -0.10418701171875
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    42\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulus of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(3, 2)\n    9\n    >>> pow(5, 2)\n    25\n    \"\"\"\n    return x ** y\n\n\ndef is_prime(x: int):\n    \"\"\"Check if x is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True",
      -0.19921875
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.3333333333333333\n    >>> divide(5, 7)\n    0.2\n    \"\"\"\n    return x / y\n\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef power(x: int, y: int):\n    \"\"\"Raise x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(2, 5)\n    32\n    \"\"\"\n    return x ** y\n\n\ndef factorial(x: int):\n    \"\"\"Factorial of x\n    >>> factorial(3)\n    6\n    >>> factorial(5)\n    120\n    \"\"\"\n    return reduce(lambda x, y: x * y, range(1, x + 1))\n\n\ndef fibonacci(x: int):\n    \"\"\"Fibonacci number of x\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if x == 1:\n        return 1\n    elif x == 2:\n        return 1\n    else:\n        return fibonacci(x - 1) + fibonacci(x - 2)\n\n\ndef fibonacci_recursive(x: int):\n    \"\"\"Fibonacci number of x\n    >>> fibonacci_recursive(1)\n    1\n    >>> fibonacci_recursive(5)\n    5",
      -0.27001953125
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    21\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo (remainder) of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Power of a number x to y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    29\n    \"\"\"\n    return x ** y\n\n\ndef factorial(x: int):\n    \"\"\"Return the factorial of a number x\n    >>> factorial(3)\n    6\n    >>> factorial(5)\n    120\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be a positive integer\")\n    fact = 1\n    for i in range(1, x + 1):\n        fact *= i\n    return fact\n\n\ndef factorial_iter(x: int):\n    \"\"\"Return the factorial of a number x\n    >>> factorial_iter(3)\n    6\n    >>> factorial_iter(5)\n    120\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be a positive integer\")\n    fact = 1\n    for i in range(1, x + 1):\n        fact *= i\n    return fact\n\n\ndef binomial(n: int, k: int):\n    \"\"\"Return the binomial coefficient of n",
      -0.34326171875
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(5, 7)\n    2\n    >>> subtract(5, 3)\n    2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(5, 3)\n    15\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(5, 3)\n    2\n    >>> divide(5, 7)\n    1.5\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(5, 3)\n    2\n    >>> mod(5, 7)\n    1\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(5, 3)\n    25\n    >>> pow(5, 7)\n    49\n    \"\"\"\n    return x ** y\n\n\ndef sqrt(x: int):\n    \"\"\"Square root of a number x\n    >>> sqrt(5)\n    2\n    >>> sqrt(7)\n    3\n    \"\"\"\n    return x ** 0.5\n\n\ndef is_prime(x: int):\n    \"\"\"Check if a number x is prime\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    False\n    \"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\n\ndef factorial(x: int):\n    \"\"\"Calculate factorial of a number x\n    >>> factorial(5)\n    120\n    >>> factorial(7)\n    5040\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Can't compute factorial of negative number\")\n    if x",
      -0.377197265625
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    49\n    \"\"\"\n    return x ** y\n\n\ndef fact(x: int):\n    \"\"\"Calculate factorial of x\n    >>> fact(3)\n    6\n    >>> fact(10)\n    3628800\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Negative factorial\")\n    if x < 2:\n        return 1\n    return x * fact(x-1)\n\ndef fibonacci(n: int):\n    \"\"\"Return the nth fibonacci number\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(8)\n    21\n    >>> fibonacci(9",
      -0.5107421875
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1.3333333333333335\n    >>> divide(5, 7)\n    2.0\n    \"\"\"\n    return x / y\n\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef factorial(n: int):\n    \"\"\"Factorial of number n\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef fibonacci(n: int):\n    \"\"\"Fibonacci number of number n\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(0)\n    0\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n\ndef memoize(f: Callable):\n    \"\"\"\n    >>> @memoize\n   ... def fib(n):\n   ...     if n == 0:\n   ...         return 0\n   ...     if n == 1:\n   ...         return 1\n   ...     return fib(n - 1) + fib(n - 2)\n   ...\n    >>> fib(5)\n    5\n    >>> fib(0)\n    0\n    >>> fib(2)\n    2\n    \"\"\"",
      -0.68115234375
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1\n    >>> divide(5, 7)\n    1\n    >>> divide(2, 0)\n    Traceback (most recent call last):\n   ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n    if y == 0:\n        raise ZeroDivisionError\n    return x / y\n\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    1\n    >>> modulo(2, 0)\n    Traceback (most recent call last):\n   ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n    if y == 0:\n        raise ZeroDivisionError\n    return x % y\n\n\ndef power(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    1\n    >>> power(2, 0)\n    Traceback (most recent call last):\n   ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n    if y == 0:\n        raise ZeroDivisionError\n    return x ** y\n\n\ndef factorial(x: int):\n    \"\"\"The factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n    1\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    if x == 0:\n        return 1\n    return x * power(x, x -",
      -0.6884765625
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x // y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power of y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    49\n    \"\"\"\n    return x ** y\n\ndef fact(x: int):\n    \"\"\"Calculate factorial of x\n    >>> fact(2)\n    2\n    >>> fact(5)\n    120\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    return reduce(mul, xrange(1, x + 1), 1)\n\ndef fib(n: int):\n    \"\"\"Calculate fibonacci number of n\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(5)\n    5\n    >>> fib(6)\n    8\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n -",
      -0.708984375
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef modulo(x: int, y: int):\n    \"\"\"Return the modulo of two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    3\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Return the power of a number x to y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    98765\n    \"\"\"\n    return x ** y\n\ndef equal(x: int, y: int):\n    \"\"\"Return whether x and y are equal\n    >>> equal(2, 3)\n    False\n    >>> equal(2, 2)\n    True\n    >>> equal(5, 7)\n    False\n    \"\"\"\n    return x == y\n\ndef greater_than(x: int, y: int):\n    \"\"\"Return whether x is greater than y\n    >>> greater_than(2, 3)\n    False\n    >>> greater_than(2, 2)\n    False\n    >>> greater_than(5, 7)\n    True\n    \"\"\"\n    return x > y\n\ndef less_than(x: int, y: int):\n    \"\"\"Return whether x is less than y\n    >>> less_than(2, 3)\n    False\n    >>> less_than(2, 2)\n    False\n    >>> less_than(5, 7)\n    False",
      -0.75634765625
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.66\n    >>> divide(5, 7)\n    2.33\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef sum(x: int, y: int):\n    \"\"\"Sum of two numbers x and y\n    >>> sum(2, 3)\n    5\n    >>> sum(5, 7)\n    12\n    \"\"\"\n    return x + y\n\ndef difference(x: int, y: int):\n    \"\"\"Difference of two numbers x and y\n    >>> difference(2, 3)\n    1\n    >>> difference(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef product(x: int, y: int):\n    \"\"\"Product of two numbers x and y\n    >>> product(2, 3)\n    6\n    >>> product(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef pow(x: int, y: int):\n    \"\"\"Power of x to y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef pow_mod(x: int, y: int, m: int):\n    \"\"\"Power of x to y modulo m\n    >>> pow_mod(2, 3, 5)\n    1\n    >>> pow_mod(",
      -0.822265625
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo y with x\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    42\n    \"\"\"\n    return x ** y\n\ndef fact(x: int):\n    \"\"\"Calculate factorial of x\n    >>> fact(0)\n    1\n    >>> fact(1)\n    1\n    >>> fact(2)\n    2\n    >>> fact(3)\n    6\n    >>> fact(4)\n    24\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be positive\")\n    return x * fact(x - 1)\n\ndef fib(n: int):\n    \"\"\"Fibonacci numbers\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(5)\n    5\n    >>> fib(6)\n    8\n    >>> fib(7)\n    13\n    \"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b,",
      -0.833984375
    ],
    [
      "return x + y\n\ndef sum(numbers: List[int]):\n    \"\"\"Calculate sum of all numbers in list\n    >>> sum([1, 2, 3])\n    6\n    \"\"\"\n    return sum(numbers)\n\ndef sum_of_odds(numbers: List[int]):\n    \"\"\"Calculate sum of odds\n    >>> sum_of_odds([1, 2, 3, 4])\n    6\n    >>> sum_of_odds([5, 6, 7, 8])\n    14\n    \"\"\"\n    return sum(numbers) % 2 == 1 and sum_of_odds(numbers[1::2]) or sum_of_odds(numbers[::2])\n\ndef main():\n    \"\"\"Main\"\"\"\n    print(sum([1, 2, 3, 4]))\n    print(sum_of_odds([1, 2, 3, 4]))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "return x + y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef main():\n    print(\"Answer: {}\".format(add(2, 3)))\n    print(\"Answer: {}\".format(add(5, 7)))\n    print(\"Answer: {}\".format(multiply(2, 3)))\n    print(\"Answer: {}\".format(multiply(5, 7)))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "return x + y\n\ndef main():\n    \"\"\"The main function\n    >>> main()\n    5\n    >>> main(7)\n    12\n    \"\"\"\n    return sum(map(add, range(1, 10), range(1, 10)))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(main())",
      -0.85888671875
    ],
    [
      "return x + y\n\ndef main():\n    # for i in range(0, 10):\n    #     print(i, add(i, i))\n    # print(add(1, 1))\n    # print(add(5, 6))\n    print(add(1, 3))\n    print(add(5, 7))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef neg(x: int):\n    \"\"\"Negate a number\n    >>> neg(2)\n    -2\n    \"\"\"\n    return -x\n\ndef add_all(x: list, y: list):\n    \"\"\"Add two lists\n    >>> add_all([2, 3], [5, 7])\n    [6, 10]\n    \"\"\"\n    return list(map(lambda x, y: x + y, x, y))\n\ndef sub_all(x: list, y: list):\n    \"\"\"Subtract two lists\n    >>> sub_all([2, 3], [5, 7])\n    [1, 4]\n    \"\"\"\n    return list(map(lambda x, y: x - y, x, y))\n\ndef mul_all(x: list, y: list):\n    \"\"\"Multiply two lists\n    >>> mul_all([2, 3], [5, 7])\n    [6, 15]\n    \"\"\"\n    return list(",
      -0.9541015625
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo (remainder) of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef abs(x: int):\n    \"\"\"Absolute value of number x\n    >>> abs(-5)\n    5\n    \"\"\"\n    return abs(x)\n\ndef neg(x: int):\n    \"\"\"Negate number x\n    >>> neg(5)\n    -5\n    \"\"\"\n    return -x\n\ndef neg_neg(x: int):\n    \"\"\"Negate number x\n    >>> neg_neg(5)\n    -5\n    \"\"\"\n    return -x\n\ndef neg_neg_neg(x: int):\n    \"\"\"Negate number x\n    >>> neg_neg_neg(5)\n    -5\n    \"\"\"\n    return -x\n\ndef neg_neg_neg_neg(x: int):\n    \"\"\"Negate number x\n    >>> neg_neg_neg_neg(5)\n    -5\n    \"\"\"\n    return -x\n\ndef neg_neg_neg_neg_neg(x: int):\n    \"\"\"Negate number x\n    >>> neg_neg_neg_neg_neg(5)\n    -5\n    \"\"\"\n    return -x\n\ndef neg_neg_neg_neg_neg_neg(x: int):\n    \"\"\"",
      -0.96142578125
    ],
    [
      "return x + y\n\n\ndef get_first_positive(x: int):\n    \"\"\"Get the first positive number in a list\n    >>> get_first_positive([-2, 0, 3])\n    0\n    >>> get_first_positive([2, 4, 0])\n    2\n    >>> get_first_positive([0, 4, 2])\n    2\n    \"\"\"\n    return next((i for i in x if i > 0), 0)\n\n\ndef get_first_negative(x: int):\n    \"\"\"Get the first negative number in a list\n    >>> get_first_negative([-2, 0, 3])\n    -2\n    >>> get_first_negative([2, 4, 0])\n    4\n    >>> get_first_negative([0, 4, 2])\n    -2\n    \"\"\"\n    return next((i for i in x if i < 0), 0)\n\n\ndef get_last_positive(x: int):\n    \"\"\"Get the last positive number in a list\n    >>> get_last_positive([-2, 0, 3])\n    3\n    >>> get_last_positive([2, 4, 0])\n    4\n    >>> get_last_positive([0, 4, 2])\n    0\n    \"\"\"\n    return next((i for i in reversed(x) if i > 0), 0)\n\n\ndef get_last_negative(x: int):\n    \"\"\"Get the last negative number in a list\n    >>> get_last_negative([-2, 0, 3])\n    -2\n    >>> get_last_negative([2, 4, 0])\n    2\n    >>> get_last_negative([0, 4, 2])\n    -2\n    \"\"\"\n    return next((i for i in reversed(x) if i < 0), 0)\n\n\ndef get_max_positive(x: int):\n    \"\"\"Get the maximum positive number in a list\n    >>> get_max_positive([-2, 0, 3])\n    3\n    >>> get_max_positive([2, 4, 0])\n    4\n    >>> get_max_positive([0, 4, 2])\n    4\n    \"\"\"\n    return max(x)\n\n\ndef get_max_negative(x: int",
      -1.03515625
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulus of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    1714\n    \"\"\"\n    return x ** y\n\ndef fact(n: int):\n    \"\"\"Return the factorial of n\n    >>> fact(4)\n    24\n    >>> fact(9)\n    30240\n    \"\"\"\n    return reduce(mul, range(1, n+1), 1)\n\ndef fib(n: int):\n    \"\"\"Return the nth Fibonacci number\n    >>> fib(4)\n    5\n    >>> fib(10)\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef is_prime(n: int):\n    \"\"\"Check whether n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6",
      -1.0439453125
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(5, 7)\n    2\n    >>> sub(2, 3)\n    -1\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(5, 7)\n    21\n    >>> mul(2, 3)\n    6\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(5, 7)\n    1\n    >>> div(2, 3)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(5, 7)\n    2\n    >>> mod(2, 3)\n    1\n    \"\"\"\n    return x % y\n\n\ndef neg(x: int):\n    \"\"\"Negate a number\n    >>> neg(5)\n    -5\n    \"\"\"\n    return -x\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise a number to a power\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef fact(x: int):\n    \"\"\"Calculate the factorial of a number\n    >>> fact(5)\n    120\n    \"\"\"\n    return x * (x - 1) * (x - 2) * (x - 3) * (x - 4) * (x - 5) * (x - 6) * (x - 7) * (x - 8) * (x - 9)\n\n\ndef fib(x: int):\n    \"\"\"Calculate the Fibonacci number\n    >>> fib(5)\n    5\n    >>> fib(10)\n    55\n    \"\"\"\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    elif x == 2:\n        return 1\n    else:\n        return fib(x - 1) + fib(x -",
      -1.1982421875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef factorial(n: int):\n    \"\"\"Calculate factorial of number n\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    return reduce(mul, range(1, n+1), 1)\n\ndef fibonacci(n: int):\n    \"\"\"Calculate fibonacci number n\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(7)\n    13\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1)",
      -1.5048828125
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo division of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> pow(3, 2)\n    9\n    >>> pow(5, 3)\n    125\n    \"\"\"\n    return x ** y\n\ndef fact(x: int):\n    \"\"\"Find the factorial of a number\n    >>> fact(5)\n    120\n    \"\"\"\n    return x * (x - 1) * (x - 2) * (x - 3) * (x - 4) * (x - 5)\n\ndef fact2(x: int):\n    \"\"\"Find the factorial of a number\n    >>> fact2(5)\n    120\n    \"\"\"\n    return fact(x)\n\ndef fact3(x: int):\n    \"\"\"Find the factorial of a number\n    >>> fact3(5)\n    120\n    \"\"\"\n    return fact2(x)\n\ndef fact4(x: int):\n    \"\"\"Find the factorial of a number\n    >>> fact4(5)\n    120\n    \"\"\"\n    return fact3(x)\n\ndef fact5(x: int):\n    \"\"\"Find the factorial of a number\n    >>> fact5(5)\n    120",
      -1.548828125
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2.0\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, n: int):\n    \"\"\"Power of x by n\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    7\n    \"\"\"\n    return x ** n\n\ndef pow_mod(x: int, n: int, mod: int):\n    \"\"\"Power of x by n and modulo mod\n    >>> pow_mod(2, 3, 3)\n    1\n    >>> pow_mod(5, 7, 7)\n    1\n    >>> pow_mod(2, 3, 5)\n    4\n    \"\"\"\n    return pow(x, n, mod)\n\ndef pow_mod_2(x: int, n: int, mod: int):\n    \"\"\"Power of x by n and modulo mod\n    >>> pow_mod_2(2, 3, 3)\n    1\n    >>> pow_mod_2(5, 7, 7)\n    1\n    >>> pow_mod_2(2, 3, 5)\n    4\n    \"\"\"\n    return pow(x, n, mod) % mod\n\ndef pow_mod_3(x: int, n: int, mod: int):\n    \"\"\"Power of x",
      -1.58984375
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1.3333333333333333\n    >>> divide(5, 7)\n    1.5\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef power(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef exp(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> exp(2, 3)\n    8\n    >>> exp(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Calculate factorial of x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n    \"\"\"\n    return factorial(x - 1) * x\n\ndef fibonacci(n: int):\n    \"\"\"Calculate Fibonacci number of n\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci",
      -1.607421875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> pow(2, 3)\n    8\n    >>> pow(2, 0)\n    1\n    >>> pow(2, -1)\n    1\n    >>> pow(2, -2)\n    1\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Calculate the factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n    1\n    >>> factorial(-1)\n    1\n    \"\"\"\n    if x < 0:\n        return 1\n    return x * factorial(x-1)\n\ndef binomial(x: int, y: int):\n    \"\"\"Calculate the binomial coefficient of x and y\n    >>> binomial(5, 3)\n    120\n    >>> binomial(5, 0)\n    1\n    >>> binomial(0, 3)\n    1\n    \"\"\"\n    if y == 0:\n        return 1\n    return factorial(x) / (factorial(y) * factorial(x-y))\n\ndef fib(n: int):\n    \"\"\"",
      -1.61328125
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0.6666666666666666\n    >>> div(5, 7)\n    2.5\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Power of a number x by y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    35\n    \"\"\"\n    return x ** y\n\n\ndef fact(n: int):\n    \"\"\"Return factorial of number n\n    >>> fact(5)\n    120\n    >>> fact(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * fact(n - 1)\n\n\ndef fact_rec(n: int):\n    \"\"\"Return factorial of number n\n    >>> fact_rec(5)\n    120\n    >>> fact_rec(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * fact_rec(n - 1)\n\n\ndef fact_iter(n: int):\n    \"\"\"Return factorial of number n\n    >>> fact_iter(5)\n    120\n    >>> fact_iter(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * fact_iter(n - 1)\n\n\ndef fib(n: int):\n    \"\"\"Return",
      -1.6533203125
    ],
    [
      "return x + y\n\ndef get_input():\n    \"\"\"Get the input from the user and return it as a list of numbers\n    >>> get_input()\n    [2, 3]\n    \"\"\"\n    return [int(i) for i in input().split()]\n\ndef get_sum(numbers):\n    \"\"\"Get the sum of all the numbers in the list\n    >>> get_sum([1, 2, 3])\n    6\n    \"\"\"\n    return sum(numbers)\n\ndef get_min(numbers):\n    \"\"\"Get the smallest number in the list\n    >>> get_min([1, 2, 3])\n    1\n    \"\"\"\n    return min(numbers)\n\ndef get_max(numbers):\n    \"\"\"Get the largest number in the list\n    >>> get_max([1, 2, 3])\n    3\n    \"\"\"\n    return max(numbers)\n\ndef get_avg(numbers):\n    \"\"\"Get the average of all the numbers in the list\n    >>> get_avg([1, 2, 3])\n    2\n    \"\"\"\n    return sum(numbers) / len(numbers)\n\ndef main():\n    \"\"\"Main function\"\"\"\n    numbers = get_input()\n    print(f\"The sum is {get_sum(numbers)}\")\n    print(f\"The min is {get_min(numbers)}\")\n    print(f\"The max is {get_max(numbers)}\")\n    print(f\"The avg is {get_avg(numbers)}\")\n\nif __name__ == '__main__':\n    main()",
      -1.6962890625
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    3\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    245\n    \"\"\"\n    return x ** y\n\n\ndef sqr(x: int):\n    \"\"\"Square of a number x\n    >>> sqr(2)\n    4\n    >>> sqr(5)\n    25\n    \"\"\"\n    return x ** 2\n\n\ndef fact(x: int):\n    \"\"\"Factorial of a number x\n    >>> fact(3)\n    6\n    >>> fact(5)\n    120\n    \"\"\"\n    return factorial(x)\n\n\ndef factorial(x: int):\n    \"\"\"Factorial of a number x\n    >>> factorial(3)\n    6\n    >>> factorial(5)\n    120\n    \"\"\"\n    if x < 0:\n        raise ValueError('x must be a positive integer')\n    if x == 0:\n        return 1\n    return x * factorial(x - 1)\n\n\ndef factorial2(x: int):\n    \"\"\"Factorial of a number x\n    >>> factorial2(3)\n    6\n    >>> factorial2(",
      -1.724609375
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    1728\n    \"\"\"\n    return x ** y\n\ndef neg(x: int):\n    \"\"\"Negate a number\n    >>> neg(5)\n    -5\n    \"\"\"\n    return -x\n\ndef abs(x: int):\n    \"\"\"Absolute value of a number\n    >>> abs(-5)\n    5\n    \"\"\"\n    return abs(x)\n\ndef fact(x: int):\n    \"\"\"Factorial of a number x\n    >>> fact(5)\n    120\n    >>> fact(3)\n    120\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Negative factorial\")\n    if x == 0:\n        return 1\n    return x * fact(x - 1)\n\ndef fibonacci(x: int):\n    \"\"\"Fibonacci number of a number x\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(3)\n    4\n    >>> fibonacci(4)\n    5\n    \"\"\"\n    if x <",
      -1.8876953125
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef fact(n: int):\n    \"\"\"Return the factorial of a number\n    >>> fact(4)\n    24\n    >>> fact(10)\n    3628800\n    \"\"\"\n    return 1\n    # return math.factorial(n)\n\n\ndef pow2(x: int):\n    \"\"\"Raise x to the power 2\n    >>> pow2(2)\n    4\n    >>> pow2(5)\n    32\n    \"\"\"\n    return x << 1\n\n\ndef pow3(x: int):\n    \"\"\"Raise x to the power 3\n    >>> pow3(2)\n    8\n    >>> pow3(5)\n    64\n    \"\"\"\n    return x << 2\n\n\ndef pow4(x: int):\n    \"\"\"Raise x to the power 4\n    >>> pow4(2)\n    16\n    >>> pow4(5)\n    128\n    \"\"\"\n    return x << 3\n\n\ndef pow5(x: int):\n    \"\"\"",
      -2.0625
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(5, 3)\n    2\n    >>> sub(2, 5)\n    3\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(5, 3)\n    15\n    >>> mul(2, 5)\n    10\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(5, 3)\n    2\n    >>> div(2, 5)\n    1\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo a number x with a number y\n    >>> mod(3, 5)\n    2\n    >>> mod(5, 3)\n    1\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(3, 2)\n    9\n    >>> pow(2, 3)\n    8\n    \"\"\"\n    return x ** y\n\n\ndef sqrt(x: int):\n    \"\"\"Square root of x\n    >>> sqrt(5)\n    2\n    \"\"\"\n    return int(math.sqrt(x))\n\n\ndef factorial(x: int):\n    \"\"\"Compute factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    362880\n    \"\"\"\n    return math.factorial(x)\n\n\ndef factorial2(x: int):\n    \"\"\"Compute factorial of x\n    >>> factorial2(5)\n    120\n    >>> factorial2(10)\n    362880\n    \"\"\"\n    return math.factorial(x)\n\n\ndef pow_mod(x: int, y: int, mod: int):\n    \"\"\"Raise x to the power y using a modular arithmetic\n    >>> pow_mod(3, 2, 5)\n    1\n    >>> pow_mod(3, 5, 5)\n    1",
      -2.1171875
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo the number x by y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise number x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    1729\n    \"\"\"\n    return x ** y\n\n\ndef fact(n: int):\n    \"\"\"Calculate factorial of number n\n    >>> fact(3)\n    6\n    >>> fact(5)\n    120\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    if n == 0:\n        return 1\n\n    return n * fact(n - 1)",
      -2.130859375
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    42\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0.5\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    3\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Power of two number x and y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef exp(x: int, y: int):\n    \"\"\"Exponentiation of two numbers x and y\n    >>> exp(2, 3)\n    8\n    >>> exp(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef fact(n: int):\n    \"\"\"Factorial of number n\n    >>> fact(2)\n    6\n    >>> fact(5)\n    120\n    \"\"\"\n    if n < 0:\n        raise ValueError('Factorial of negative number is undefined')\n    if n == 0:\n        return 1\n    return n * fact(n - 1)",
      -2.193359375
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef fact(x: int):\n    \"\"\"Factorial of x\n    >>> fact(5)\n    120\n    >>> fact(0)\n    1\n    \"\"\"\n    if x < 0:\n        return 0\n    if x == 0:\n        return 1\n    return fact(x - 1) * x\n\ndef fib(n: int):\n    \"\"\"Fibonacci number\n    >>> fib(5)\n    5\n    >>> fib(0)\n    0\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef fib2(n: int):\n    \"\"\"Fibonacci number\n    >>> fib2(5)\n    5\n    >>> fib2(0)\n    0\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return",
      -2.22265625
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef is_prime(n: int):\n    \"\"\"Check if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 2:\n        return True\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n: int):\n    \"\"\"Check if n is a palindrome\n    >>> is_palindrome(2)\n    True\n    >>> is_palindrome(3)\n    False\n    >>> is_palindrome(5)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef is_square(n: int):\n    \"\"\"Check if n is a square\n    >>> is_square(2)\n    False\n    >>> is",
      -2.41796875
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.3333333333333333\n    >>> divide(5, 7)\n    0.5\n    \"\"\"\n    return x / y\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Calculate the power of a number x to y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    121\n    \"\"\"\n    return x ** y\n\ndef sqrt(x: int):\n    \"\"\"Calculate the square root of a number x\n    >>> sqrt(4)\n    2\n    >>> sqrt(9)\n    3\n    \"\"\"\n    return x ** 0.5\n\ndef factorial(x: int):\n    \"\"\"Calculate factorial of a number x\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n    \"\"\"\n    return reduce(mul, xrange(1, x+1), 1)\n\ndef fibonacci(x: int):\n    \"\"\"Calculate the fibonacci number of a number x\n    >>> fibonacci(0)\n    1\n    >>> fib",
      -2.57421875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef fact(n: int):\n    \"\"\"Return n!\n    >>> fact(3)\n    9\n    >>> fact(5)\n    125\n    \"\"\"\n    return fact(n - 1) * n\n\ndef fibonacci(n: int):\n    \"\"\"Return the nth fibonacci number\n    >>> fibonacci(1)\n    0\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    1\n    >>> fibonacci(4)\n    2\n    >>> fibonacci(5)\n    3\n    >>> fibonacci(6)\n    5\n    >>> fibonacci(7)\n    8\n    >>> fibonacci(8)\n    13\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:",
      -2.66015625
    ],
    [
      "return x + y\n\ndef mult(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mult(2, 3)\n    6\n    >>> mult(2, 5)\n    25\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0.66\n    >>> div(2, 5)\n    2.5\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(2, 5)\n    2\n    \"\"\"\n    return x % y\n\ndef add_to_list(x: int, y: int, list: List[int]):\n    \"\"\"Add to list x and y\n    >>> add_to_list(2, 3, [1, 2, 3])\n    [1, 2, 3, 4]\n    \"\"\"\n    list.append(x + y)\n\ndef mult_to_list(x: int, y: int, list: List[int]):\n    \"\"\"Multiply to list x and y\n    >>> mult_to_list(2, 3, [1, 2, 3])\n    [1, 2, 3, 6]\n    \"\"\"\n    list.extend([x * y for y in range(1, 4)])\n\ndef div_to_list(x: int, y: int, list: List[int]):\n    \"\"\"Divide to list x and y\n    >>> div_to_list(2, 3, [1, 2, 3])\n    [1, 2, 3, 1]\n    \"\"\"\n    list.extend([x / y for y in range(1, 4)])\n\ndef mod_to_list(x: int, y: int, list: List[int]):\n    \"\"\"Modulo to list x and y\n    >>> mod_to_list(2, 3, [1, 2, 3])\n    [1, 2, 3, 1]\n    \"\"\"\n    list.extend([x % y for",
      -2.701171875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    1\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    2047\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Factorial of x\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n    >>> factorial(6)\n    720\n    >>> factorial(7)\n    5040\n    >>> factorial(8)\n    40320\n    \"\"\"\n    return x * factorial(x - 1)\n\ndef factorial_recursive(x: int):\n    \"\"\"Factorial of x\n    >>> factorial_recursive(0)\n    1\n    >>> factorial_recursive(1)\n    1\n    >>> factorial_recursive(2)\n    2\n    >>> factorial_recursive(3)\n    6\n    >>> factorial_recursive(4)\n    24",
      -2.755859375
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    1728\n    \"\"\"\n    return x ** y\n\ndef sqrt(x: int):\n    \"\"\"Square root of x\n    >>> sqrt(9)\n    3\n    \"\"\"\n    return int(math.sqrt(x))\n\ndef factorial(x: int):\n    \"\"\"Calculate factorial of x\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    \"\"\"\n    return math.factorial(x)\n\ndef fib(n: int):\n    \"\"\"Fibonacci number\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(5)\n    5\n    \"\"\"\n    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\ndef fib2(n: int):\n    \"\"\"Fibonacci number\n    >>> fib2(2)\n    1\n    >>> fib2(3)",
      -2.779296875
    ],
    [
      "return x + y\n\n\ndef add_and_print(x: int, y: int):\n    \"\"\"Print result of addition x and y\n    >>> add_and_print(2, 3)\n    5\n    \"\"\"\n    print(add(x, y))\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\n\ndef multiply_and_print(x: int, y: int):\n    \"\"\"Print result of multiplication x and y\n    >>> multiply_and_print(2, 3)\n    6\n    \"\"\"\n    print(multiply(x, y))\n\n\ndef main():\n    print(add(1, 2))\n    print(add(2, 3))\n    print(add(3, 4))\n    print(add(5, 7))\n    print(add_and_print(1, 2))\n    print(add_and_print(2, 3))\n    print(add_and_print(3, 4))\n    print(add_and_print(5, 7))\n    print(multiply(1, 2))\n    print(multiply(2, 3))\n    print(multiply(3, 4))\n    print(multiply(5, 7))\n    print(multiply_and_print(1, 2))\n    print(multiply_and_print(2, 3))\n    print(multiply_and_print(3, 4))\n    print(multiply_and_print(5, 7))\n\n\nif __name__ == '__main__':\n    main()",
      -2.990234375
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef sqrt(x: int):\n    \"\"\"Square root of a number x\n    >>> sqrt(2)\n    1\n    >>> sqrt(3)\n    1\n    >>> sqrt(4)\n    2\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be positive\")\n    x = abs(x)\n    y = x\n    while y >= 1:\n        y = (y - x / y) / 2\n    return y\n\n\ndef is_prime(x: int):\n    \"\"\"Check if x is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if x <= 1:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    i = 3\n    while i <= x:\n        if x % i == 0:\n            return False\n        i += 2\n    return True",
      -3.078125
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo a number x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    3\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise a number x to an integer y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef gcd(x: int, y: int):\n    \"\"\"Greatest common divisor of two numbers x and y\n    >>> gcd(2, 3)\n    1\n    >>> gcd(5, 7)\n    1\n    \"\"\"\n    return x if x > y else y\n\ndef lcm(x: int, y: int):\n    \"\"\"Least common multiple of two numbers x and y\n    >>> lcm(2, 3)\n    6\n    >>> lcm(5, 7)\n    21\n    \"\"\"\n    return x * y / gcd(x, y)\n\ndef factorial(x: int):\n    \"\"\"Factorial of a number x\n    >>> factorial(5)\n    120\n    \"\"\"\n    return reduce(mul, xrange(1, x + 1))\n\ndef factorial2(x: int):\n    \"\"\"Factorial of a number x\n    >>> factorial2(5)\n    120\n    \"\"\"",
      -3.109375
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    21\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0.66\n    >>> div(5, 7)\n    0.5\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo a number x by y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    289\n    \"\"\"\n    return x ** y\n\n\ndef fact(x: int):\n    \"\"\"Return the factorial of x\n    >>> fact(2)\n    2\n    >>> fact(5)\n    120\n    \"\"\"\n    return 1 if x == 0 else x * fact(x - 1)\n\n\ndef fib(n: int):\n    \"\"\"Return the nth Fibonacci number\n    >>> fib(3)\n    5\n    >>> fib(4)\n    8\n    >>> fib(5)\n    13\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fact_mod(x: int, y: int):\n    \"\"\"Return the xth factorial modulo y\n    >>> fact_mod(3, 5)\n    3\n    >>> fact_mod(4, 7)\n    4\n    >>>",
      -3.18359375
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise number x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    15\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Find factorial of number x\n    >>> factorial(5)\n    120\n    \"\"\"\n    return reduce(mul, xrange(2, x+1))\n\ndef bin(x: int):\n    \"\"\"Find number of bits in number x\n    >>> bin(5)\n    2\n    \"\"\"\n    return len(bin(x))\n\ndef dec(x: int):\n    \"\"\"Find number of digits in number x\n    >>> dec(5)\n    2\n    \"\"\"\n    return len(str(x))\n\ndef hex(x: int):\n    \"\"\"Find number of digits in number x\n    >>> hex(5)\n    2\n    \"\"\"\n    return len(hex(x))\n\ndef oct(x: int):\n    \"\"\"Find number of digits in number x\n    >>> oct(5)\n    2\n    \"\"\"\n    return len(oct(x))\n\ndef dec_to_bin(",
      -3.220703125
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1.3333333333333333\n    >>> divide(5, 7)\n    1.6\n    \"\"\"\n    return x / y\n\ndef power(x: int, y: int):\n    \"\"\"Calculate the power of a number x to y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Calculate factorial of a number x\n    >>> factorial(3)\n    6\n    >>> factorial(5)\n    120\n    \"\"\"\n    if x < 0:\n        return 0\n    if x == 0:\n        return 1\n    return x * factorial(x - 1)\n\ndef factorial2(x: int):\n    \"\"\"Calculate factorial of a number x\n    >>> factorial2(3)\n    6\n    >>> factorial2(5)\n    120\n    \"\"\"\n    if x < 0:\n        return 0\n    return factorial(x) / x\n\ndef fibonacci(x: int):\n    \"\"\"Calculate Fibonacci number of a number x\n    >>> fibonacci(3)\n    4\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if x < 0:\n        return 0\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    return fibonacci(x - 1) + fibonacci(x - 2)\n\ndef fibonacci_recursive(x:",
      -3.228515625
    ],
    [
      "return x + y\n\n\ndef mult(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mult(2, 3)\n    6\n    >>> mult(5, 7)\n    21\n    \"\"\"\n    return x * y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0.5\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise number x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    9\n    \"\"\"\n    return x ** y\n\n\ndef factorial(x: int):\n    \"\"\"Compute factorial of number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n    \"\"\"\n    return x * (x - 1) * (x - 2) * (x - 3) * (x - 4) * (x - 5)\n\n\ndef power(x: int, y: int):\n    \"\"\"Compute x to the power y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    9\n    \"\"\"\n    return x ** y\n\n\ndef factorial_power(x: int, y: int):\n    \"\"\"Compute factorial(x)^y\n    >>> factorial_power(2, 3)\n    8\n    >>> factorial_power(5, 7)\n    9\n    \"\"\"\n    return factorial(x) ** y\n\n\ndef sqrt(x: int):\n    \"\"\"Compute",
      -3.236328125
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef is_prime(x: int):\n    \"\"\"Check if number x is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    i = 3\n    while i <= x:\n        if x % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_prime2(x: int):\n    \"\"\"Check if number x is prime\n    >>> is_prime2(2)\n    True\n    >>> is_prime2(3)\n    True\n    >>> is_prime2(4)\n    False\n    >>> is_prime2(5)\n    False\n    \"\"\"\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    i = 3\n    while i <= x:\n        if x % i == 0:\n            return False\n        i",
      -3.3359375
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    3\n    \"\"\"\n    return x % y\n\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    3\n    \"\"\"\n    return x % y\n\n\ndef power(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef factorial(x: int):\n    \"\"\"Factorial of a number x\n    >>> factorial(5)\n    120\n    \"\"\"\n    return x * (x - 1) * (x - 2) * (x - 3) * (x - 4)\n\n\ndef fibonacci(n: int):\n    \"\"\"Fibonacci number n\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n\ndef factorial_recursive(n: int):\n    \"\"\"Factorial of a",
      -3.40625
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(5, 3)\n    2\n    >>> divide(7, 3)\n    2\n    \"\"\"\n    return x / y\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo a number x and y\n    >>> modulo(5, 3)\n    2\n    >>> modulo(7, 3)\n    2\n    \"\"\"\n    return x % y\n\ndef negate(x: int):\n    \"\"\"Negate a number\n    >>> negate(5)\n    -5\n    \"\"\"\n    return -x\n\ndef add_and_modulo(x: int, y: int):\n    \"\"\"Add two numbers x and y and return the result modulo y\n    >>> add_and_modulo(5, 3)\n    2\n    >>> add_and_modulo(7, 3)\n    2\n    \"\"\"\n    return x + y % y\n\ndef subtract_and_modulo(x: int, y: int):\n    \"\"\"Subtract two numbers x and y and return the result modulo y\n    >>> subtract_and_modulo(5, 3)\n    2\n    >>> subtract_and_modulo(7, 3)\n    2\n    \"\"\"\n    return x - y % y\n\ndef multiply_and_modulo(x: int, y: int):\n    \"\"\"Multiply two numbers x and y and return the result modulo y\n    >>> multiply_and_modulo(5, 3)\n    2\n    >>> multiply_and_modulo(7, 3)\n    2\n    \"\"\"\n    return x * y % y\n\ndef divide_and_modulo(x: int,",
      -3.6015625
    ],
    [
      "return x + y\n\ndef factorial(x: int):\n    \"\"\"Return factorial of x\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    \"\"\"\n    if x < 0:\n        return 0\n    if x == 0:\n        return 1\n    result = 1\n    for i in range(1, x+1):\n        result *= i\n    return result\n\ndef fibonacci(n: int):\n    \"\"\"Return nth fibonacci number\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(8)\n    21\n    >>> fibonacci(9)\n    34\n    \"\"\"\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    if n == 0 or n == 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\ndef is_palindrome(x: int):\n    \"\"\"Return True if x is a palindrome\n    >>> is_palindrome(12345)\n    True\n    >>> is_palindrome(1234)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    return str(x) == str(x)[::-1]\n\ndef is_palindrome_rec(x: int):\n    \"\"\"Return True if x is a palindrome\n    >>> is_palindrome_rec(12345)\n    True\n    >>> is_palindrome_rec(1234)\n    True\n    >>> is_palindrome_rec(123)\n    False\n    \"\"\"\n    if x < 0:\n        return False\n    if x",
      -3.671875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x // y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef neg(x: int):\n    \"\"\"Negate a number\n    >>> neg(2)\n    -2\n    \"\"\"\n    return -x\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    14\n    \"\"\"\n    return x ** y\n\ndef add_mod(x: int, y: int):\n    \"\"\"Add two numbers x and y,\n    but only return the result if it is\n    between x and y\n    >>> add_mod(5, 7)\n    6\n    >>> add_mod(6, 5)\n    6\n    >>> add_mod(6, 7)\n    7\n    \"\"\"\n    return x + y % x\n\ndef add_mod_neg(x: int, y: int):\n    \"\"\"Add two numbers x and y,\n    but only return the result if it is\n    between x and y\n    >>> add_mod_neg(5, 7)\n    6\n    >>> add_mod_neg(6, 5)\n    6\n    >>> add_mod_neg(6, 7)\n    -1",
      -3.70703125
    ],
    [
      "return x + y\n\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0.5\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef abs(x: int):\n    \"\"\"Absolute value\n    >>> abs(2)\n    2\n    >>> abs(-5)\n    5\n    \"\"\"\n    return abs(x)\n\n\ndef pow(x: int, y: int):\n    \"\"\"Power\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    49\n    \"\"\"\n    return x ** y\n\n\ndef add_pow(x: int, y: int, z: int):\n    \"\"\"Add to a power\n    >>> add_pow(2, 3, 4)\n    24\n    >>> add_pow(5, 7, 4)\n    96\n    \"\"\"\n    return x ** y + z\n\n\ndef sub_pow(x: int, y: int, z: int):\n    \"\"\"Subtract from a power\n    >>> sub_pow(2, 3, 4)\n    -12\n    >>> sub_pow(5, 7, 4)\n    -96\n    \"\"\"\n    return x ** y - z\n\n\ndef mul_pow(x: int, y: int, z: int):\n    \"\"\"Multiply to a power\n    >>> mul_pow(2,",
      -3.953125
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2.5\n    \"\"\"\n    return x / y\n\ndef power(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef modulo_sum(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> modulo_sum(2, 3)\n    1\n    >>> modulo_sum(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef modulo_product(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> modulo_product(2, 3)\n    1\n    >>> modulo_product(5, 7)\n    7\n    \"\"\"\n    return x * y\n\ndef modulo_division(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> modulo_division(2, 3)\n    1\n    >>> modulo_division(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef modulo_division_quotient(x: int, y",
      -4.0859375
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1\n    >>> divide(5, 7)\n    0.5\n    \"\"\"\n    return x / y\n\ndef modulus(x: int, y: int):\n    \"\"\"Modulus of two numbers x and y\n    >>> modulus(2, 3)\n    1\n    >>> modulus(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef is_prime(x: int):\n    \"\"\"Is x a prime number\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    \"\"\"\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    i = 3\n    while i <= x:\n        if x % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_palindrome(x: int):\n    \"\"\"Is x a palindrome\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(6)\n    False\n    \"\"\"\n    if x < 2:\n        return False\n    return x == abs(x % 10)\n\ndef is_palindrome_reversed(x: int):\n    \"\"\"Is x a palindrome\n    >>> is_palindrome_reversed(5)\n    True\n    >>> is_palindrome_reversed(6)\n    False\n    \"\"\"\n    if x < 2:\n        return False\n    return x == abs(x %",
      -4.25
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1.5\n    >>> divide(5, 7)\n    2.5\n    \"\"\"\n    return x / y\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    3\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Calculate factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(7)\n    5040\n    \"\"\"\n    return factorial(x - 1) * x\n\ndef fibonacci(n):\n    \"\"\"Return Fibonacci number for n\n    >>> fibonacci(3)\n    4\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\ndef fibonacci_recursive(n):\n    \"\"\"Return Fibonacci number using recursive formula\n    >>> fibonacci_recursive(3)\n    4\n    >>> fibonacci_recursive(5)\n    5\n    \"\"\"\n    a, b = 0, 1\n    while n > 0:\n        a, b = b",
      -4.37109375
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise number x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    721\n    \"\"\"\n    return x ** y\n\ndef powmod(x: int, y: int, m: int):\n    \"\"\"Raise number x to the power y modulo m\n    >>> powmod(2, 3, 5)\n    1\n    >>> powmod(5, 7, 7)\n    1\n    \"\"\"\n    return pow(x, y, m)\n\ndef factorial(x: int):\n    \"\"\"Compute factorial of x\n    >>> factorial(5)\n    120\n    \"\"\"\n    return factorial(x - 1) * x\n\ndef factorial2(x: int):\n    \"\"\"Compute factorial of x\n    >>> factorial2(5)\n    120\n    \"\"\"\n    return x * (x - 1) * (x - 2)\n\ndef fib(n: int):\n    \"\"\"Compute the nth Fibonacci number\n    >>> fib(5)\n    5\n    >>> fib(10)\n    55\n    \"\"\"\n    if n ==",
      -4.50390625
    ],
    [
      "return x + y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(2, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef fact(x: int):\n    \"\"\"Calculate factorial of number x\n    >>> fact(5)\n    120\n    \"\"\"\n    return reduce(mul, range(1, x+1))\n\ndef pow(x: int, y: int):\n    \"\"\"Calculate x^y\n    >>> pow(3, 3)\n    27\n    >>> pow(3, 4)\n    81\n    \"\"\"\n    return reduce(mul, range(1, y+1)) ** x\n\ndef sqrt(x: int):\n    \"\"\"Calculate square root of number x\n    >>> sqrt(4)\n    2\n    \"\"\"\n    return reduce(div, range(1, x+1))\n\ndef fact_2(x: int):\n    \"\"\"Calculate factorial of number x\n    >>> fact_2(5)\n    120\n    \"\"\"\n    return reduce(mul, range(1, x+1))\n\ndef fact_3(x: int):\n    \"\"\"Calculate factorial of number x\n    >>> fact_3(5)\n    120\n    \"\"\"\n    return reduce(mul, range(1, x+1))\n\ndef fact_4(x:",
      -4.8671875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    1\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    729\n    \"\"\"\n    return x ** y\n\ndef fact(n: int):\n    \"\"\"Return n!\n    >>> fact(5)\n    120\n    >>> fact(0)\n    1\n    \"\"\"\n    if n < 0:\n        return 1\n    if n < 2:\n        return 1\n    return n * fact(n-1)\n\ndef fact_iter(n: int):\n    \"\"\"Return n!\n    >>> fact_iter(5)\n    120\n    >>> fact_iter(0)\n    1\n    \"\"\"\n    if n < 0:\n        return 1\n    if n == 0:\n        yield 1\n    else:\n        for i in range(2, n+1):\n            yield i * fact_iter(n-i)\n\ndef fact_recur(n: int):\n    \"\"\"Return n!\n    >>> fact_recur(5)\n    120\n    >>> fact_recur(0)\n    1\n    \"\"\"\n    if n < 0:",
      -5.05078125
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.66\n    >>> divide(5, 7)\n    0.14\n    \"\"\"\n    return x / y\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power of y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    29\n    \"\"\"\n    return x ** y\n\ndef sqrt(x: int):\n    \"\"\"Square root of a number x\n    >>> sqrt(5)\n    2\n    \"\"\"\n    return int(x ** 0.5)\n\ndef factorial(x: int):\n    \"\"\"Return the factorial of a number x\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    return x * (x - 1) * (x - 2) * (x - 3) * (x - 4) * (x - 5)\n\ndef binomial(x: int, y: int):\n    \"\"\"Return the binomial coefficient of two numbers x and y\n    >>> binomial(5, 3)\n    15\n    >>> binomial(5, 4)\n    250\n    \"\"\"\n    return factorial(x) / (factorial(y) * factorial(x - y))\n\ndef fibonacci(n):",
      -5.14453125
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.66666666666666667\n    >>> divide(5, 7)\n    0.5\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef mod_mul(x: int, y: int):\n    \"\"\"Modulo multiplication of two numbers x and y\n    >>> mod_mul(2, 3)\n    1\n    >>> mod_mul(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef mod_div(x: int, y: int):\n    \"\"\"Modulo division of two numbers x and y\n    >>> mod_div(2, 3)\n    1\n    >>> mod_div(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef mod_mod(x: int, y: int):\n    \"\"\"Modulo modulo of two numbers x and y\n    >>> mod_mod(2, 3)\n    1\n    >>> mod_mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef sqrt(x: int):\n    \"\"\"Square root of a number x\n    >>> sq",
      -5.2890625
    ],
    [
      "return x + y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef factorial(x: int):\n    \"\"\"Compute factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n    1\n    \"\"\"\n    return x and reduce(lambda x, y: x * y, range(1, x+1)) or 1\n\ndef fibonacci(x: int):\n    \"\"\"Compute Fibonacci number of x\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(8)\n    21\n    \"\"\"\n    return x and reduce(lambda x, y: x + y, [0, 1]) or 0\n\ndef is_prime(x: int):\n    \"\"\"Check if number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    \"\"\"\n    return x and x > 2 and x % 2 == 0 and x % 3 == 0\n\ndef is_palindrome(x: int):\n    \"\"\"Check if number is palindrome\n    >>> is_palindrome(2)\n    False\n    >>> is_palindrome(2)\n    False\n    >>> is_palindrome(3)\n    True\n    >>> is_palindrome(4)\n    True\n    >>> is_palindrome(7)\n    True\n    \"\"\"\n    return x and x >= 0 and x % 2 == 0 and x % 3 == 0 and x % 5 == 0 and x % 7 == 0\n\ndef is_positive(x: int):\n    \"\"\"Check if number is positive\n    >>> is_positive(2)",
      -5.328125
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.66\n    >>> divide(5, 7)\n    0.5\n    \"\"\"\n    if y == 0:\n        raise ZeroDivisionError\n    return x / y\n\n\ndef square(x: int):\n    \"\"\"Square a number x\n    >>> square(2)\n    4\n    >>> square(5)\n    25\n    \"\"\"\n    return x * x\n\n\ndef cube(x: int):\n    \"\"\"Cube a number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n    \"\"\"\n    return x * x * x\n\n\ndef double(x: int):\n    \"\"\"Double a number x\n    >>> double(2)\n    4\n    >>> double(5)\n    25\n    \"\"\"\n    return x * 2\n\n\ndef triple(x: int):\n    \"\"\"Triple a number x\n    >>> triple(2)\n    6\n    >>> triple(5)\n    125\n    \"\"\"\n    return x * 3\n\n\ndef get_nth_prime(n: int) -> int:\n    \"\"\"Get the nth prime number\n    >>> get_nth_prime(1)\n    2\n    >>> get_nth_prime(4)\n    11\n    >>> get_nth_prime(10)\n    29\n    \"\"\"\n    primes = [2, 3]\n    for i in range(2, n):\n        primes.append(get_next_prime(primes[-1]))\n    return primes[-1]\n\n\ndef get_next_prime(x: int",
      -5.3515625
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulus of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef power(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    49\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"The factorial of a number x\n    >>> factorial(5)\n    120\n    \"\"\"\n    if x < 0:\n        return 0\n    return x * (x + 1) * (x + 2) * (x + 3) * (x + 4)\n\ndef factorial2(x: int):\n    \"\"\"The factorial of a number x\n    >>> factorial2(5)\n    120\n    \"\"\"\n    if x < 0:\n        return 0\n    return x * (x + 1) * (x + 1)\n\ndef fib(n: int):\n    \"\"\"Fibonacci number\n    >>> fib(5)\n    5\n    >>> fib(10)\n    55\n    \"\"\"\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\ndef fib2(n: int):\n    \"\"\"Fibonacci number",
      -5.5078125
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    35\n    \"\"\"\n    return x ** y\n\ndef pow2(x: int):\n    \"\"\"Raise x to the power of 2\n    >>> pow2(3)\n    9\n    >>> pow2(5)\n    25\n    \"\"\"\n    return x << 1\n\ndef pow3(x: int):\n    \"\"\"Raise x to the power of 3\n    >>> pow3(3)\n    27\n    >>> pow3(5)\n    125\n    \"\"\"\n    return x * x * x\n\ndef pow4(x: int):\n    \"\"\"Raise x to the power of 4\n    >>> pow4(4)\n    16\n    >>> pow4(5)\n    125\n    \"\"\"\n    return x * x * x * x\n\ndef pow5(x: int):\n    \"\"\"Raise x to the power of 5\n    >>> pow5(5)\n    125\n    >>> pow5(5)\n    125\n    \"\"\"\n    return x * x * x * x * x\n\ndef pow",
      -5.609375
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    1\n    \"\"\"\n    return x % y\n\n\ndef power(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef factorial(n: int):\n    \"\"\"Factorial of a number n\n    >>> factorial(4)\n    24\n    >>> factorial(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return reduce(lambda x, y: x * y, range(1, n + 1))\n\n\ndef nth_prime(n: int):\n    \"\"\"Prime number in the range of n\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(4)\n    5\n    >>> nth_prime(7)\n    11\n    \"\"\"\n    return primes[n]\n\n\ndef is_prime(n: int):\n    \"\"\"Check if n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if",
      -6.8359375
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the yth power\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    55\n    \"\"\"\n    return x ** y\n\ndef pow2(x: int, y: int):\n    \"\"\"Raise x to the yth power using base 2\n    >>> pow2(2, 3)\n    8\n    >>> pow2(5, 7)\n    55\n    \"\"\"\n    return pow(2, y, x)\n\ndef fact(x: int):\n    \"\"\"Return the factorial of x\n    >>> fact(5)\n    120\n    \"\"\"\n    return x * fact(x - 1)\n\ndef fact2(x: int):\n    \"\"\"Return the factorial of x using base 2\n    >>> fact2(5)\n    120\n    \"\"\"\n    return pow(2, x, x)\n\ndef fact3(x: int):\n    \"\"\"Return the factorial of x using base 3\n    >>> fact3(5)\n    120\n    \"\"\"\n    return fact(x) / x\n\ndef fact4(x: int):\n    \"\"\"Return the factorial of x using base",
      -7.08203125
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2.5\n    \"\"\"\n    return x / y\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    3\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    49\n    \"\"\"\n    return x ** y\n\ndef square(x: int):\n    \"\"\"Square number x\n    >>> square(2)\n    4\n    >>> square(5)\n    25\n    \"\"\"\n    return x ** 2\n\ndef cube(x: int):\n    \"\"\"Cube number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n    \"\"\"\n    return x ** 3\n\ndef power(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    49\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Factorial of number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n    \"\"\"\n    return math.factorial(x)\n\ndef fibonacci(n: int):\n    \"\"\"Fibonacci number n",
      -9.0703125
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef sqrt(x: int):\n    \"\"\"Square root of x\n    >>> sqrt(2)\n    1.4142135623730951\n    >>> sqrt(5)\n    2.23606797749979\n    \"\"\"\n    return int(x ** 0.5)\n\n\ndef factorial(x: int):\n    \"\"\"Compute x!\n    >>> factorial(5)\n    120\n    >>> factorial(1)\n    1\n    \"\"\"\n    return reduce(mul, xrange(1, x + 1))\n\n\ndef is_prime(x: int):\n    \"\"\"Check if x is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n    if x < 9:\n        return True\n    if x %",
      -9.21875
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    42\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Power of two numbers x and y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\ndef neg(x: int):\n    \"\"\"Negate a number x\n    >>> neg(2)\n    -2\n    \"\"\"\n    return -x\n\ndef abs(x: int):\n    \"\"\"Absolute value of a number x\n    >>> abs(-2)\n    2\n    \"\"\"\n    return abs(x)\n\ndef fact(x: int):\n    \"\"\"Factorial of a number x\n    >>> fact(3)\n    6\n    \"\"\"\n    return x * (x - 1) * (x - 2)\n\ndef fib(x: int):\n    \"\"\"Fibonacci number of a number x\n    >>> fib(4)\n    5\n    \"\"\"\n    return fib(x - 1) + fib(x - 2)\n\ndef fib2(x: int):\n    \"\"\"Fibonacci number of a number x\n    >>> fib2(4)\n    5\n    \"\"\"\n    return fib2(x - 1) + fib2(x",
      -9.2265625
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    3\n    \"\"\"\n    return x % y\n\ndef exponent(x: int, y: int):\n    \"\"\"Calculate the exponent of two numbers x and y\n    >>> exponent(2, 3)\n    1\n    >>> exponent(5, 7)\n    4\n    \"\"\"\n    return x ** y\n\ndef factorial(x: int):\n    \"\"\"Calculate factorial of a number x\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    return factorial_helper(x, 1)\n\ndef factorial_helper(x: int, n: int):\n    \"\"\"Recursive helper function for factorial\n    >>> factorial_helper(1, 2)\n    1\n    >>> factorial_helper(2, 3)\n    6\n    >>> factorial_helper(3, 4)\n    120\n    \"\"\"\n    if n == 0:\n        return 1\n    return factorial_helper(x, n - 1) * x\n\ndef factorial_iterative(x: int):",
      -9.4453125
    ],
    [
      "return x + y\n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    2\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef fact(n: int):\n    \"\"\"Return factorial of number n\n    >>> fact(5)\n    120\n    \"\"\"\n    return reduce(mul, xrange(1, n+1), 1)\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number\n    >>> fib(5)\n    5\n    >>> fib(10)\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fact_mod(n: int, mod: int):\n    \"\"\"Return n-th factorial modulo m\n    >>> fact_mod(5, 7)\n    5\n    >>> fact_mod(10, 7)\n    55\n    >>> fact_mod(5, 13)\n    11\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (fact_mod(n-1, mod) * fact_mod(n-2, mod)) % mod\n\ndef fib",
      -9.6875
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    49\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.3333333333333333\n    >>> divide(5, 7)\n    2.5\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Power of a number x to y\n    >>> pow(2, 3)\n    8\n    >>> pow(2, 5)\n    32\n    \"\"\"\n    return x ** y\n\ndef square(x: int):\n    \"\"\"Square of a number x\n    >>> square(2)\n    4\n    >>> square(5)\n    25\n    \"\"\"\n    return x ** 2\n\ndef cube(x: int):\n    \"\"\"Cube of a number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n    \"\"\"\n    return x ** 3\n\ndef is_prime(x: int):\n    \"\"\"Check if a number x is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(11)\n    True\n    \"\"\"\n    if x == 2:\n        return True\n    if x < 2:\n        return False\n    for i in range(2, int(math.sqrt(x)) +",
      -9.6953125
    ],
    [
      "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\n\n\ndef remainder(x: int, y: int):\n    \"\"\"Remainder of two numbers x and y\n    >>> remainder(2, 3)\n    1\n    >>> remainder(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef pow(x: int, y: int):\n    \"\"\"Raise x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    343\n    \"\"\"\n    return x ** y\n\n\ndef sqrt(x: int):\n    \"\"\"Square root of a number\n    >>> sqrt(2)\n    1.41421356237309504880168872420969807856967187537694807317667973799\n    \"\"\"\n    if x == 0:\n        return 0\n    return int(math.sqrt(x))\n\n\ndef factorial(x: int):\n    \"\"\"Factorial of a number\n    >>> factorial(2)\n    6\n    >>> factorial(5)\n    120\n    \"\"\"\n    return x * (x - 1) * (x - 2)\n\n\ndef fibonacci(x: int):\n    \"\"\"Fibonacci number\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return",
      -10.6328125
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1.3333333333333333\n    >>> divide(5, 7)\n    1.5\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    3\n    \"\"\"\n    return x % y\n\ndef pow(x: int, y: int):\n    \"\"\"Raise a number x to the power y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    29\n    \"\"\"\n    return x ** y\n\ndef sqrt(x: int):\n    \"\"\"Square root of a number x\n    >>> sqrt(5)\n    2\n    \"\"\"\n    return x ** 0.5\n\ndef pow_mod(x: int, y: int, m: int):\n    \"\"\"Raise x to the power y modulo m\n    >>> pow_mod(5, 3, 7)\n    1\n    >>> pow_mod(5, 3, 5)\n    1\n    \"\"\"\n    return pow(x, y, m)\n\ndef log(x: int, y: int):\n    \"\"\"Return the base e logarithm of x\n    >>> log(5, 10)\n    1\n    >>> log(5, 2)\n    2\n    \"\"\"\n    return math.log(x, y)\n\ndef pow_log(x: int, y: int, m: int):\n    \"\"\"Raise x to the base e logar",
      -11.0859375
    ],
    [
      "return x + y\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.66666666666666667\n    >>> divide(5, 7)\n    0.5\n    \"\"\"\n    return x / y\n\ndef mod(x: int, y: int):\n    \"\"\"Modulo of two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    2\n    \"\"\"\n    return x % y\n\ndef factorial(x: int):\n    \"\"\"Factorial of a number x\n    >>> factorial(5)\n    120\n    \"\"\"\n    if x == 0:\n        return 1\n    return reduce(lambda x, y: x * y, range(1, x + 1))\n\ndef square(x: int):\n    \"\"\"Square of a number x\n    >>> square(2)\n    4\n    >>> square(5)\n    25\n    \"\"\"\n    return x * x\n\ndef cube(x: int):\n    \"\"\"Cube of a number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n    \"\"\"\n    return x * x * x\n\ndef power(x: int, y: int):\n    \"\"\"Power of a number x to a number y\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n    \"\"\"\n    return x ** y\n\ndef ln(x: int):\n    \"\"\"Natural log of a number x\n    >>> ln(3)\n    1.6094379124341003\n    \"\"\"\n    return math.log(x, 10)\n\ndef",
      -13.0546875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}