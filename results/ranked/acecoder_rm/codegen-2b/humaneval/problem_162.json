{
  "problem": {
    "task_id": "HumanEval/162",
    "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
    "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "string_to_md5",
    "docstring": "",
    "problem_id": 162
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if not text:\n        return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n\n\ndef md5_for_file(filename):\n    \"\"\"\n    Given a filename, return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_for_file('test_file') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:\n        return None\n    import hashlib\n    m = hashlib.md5()\n    f = open(filename, 'rb')\n    while True:\n        data = f.read(8192)\n        if not data:\n            break\n        m.update(data)\n    f.close()\n    return m.hexdigest()\n\n\ndef md5_for_file_and_dir(filename):\n    \"\"\"\n    Given a filename, return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_for_file_and_dir('test_file') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:\n        return None\n    import hashlib\n    m = hashlib.md5()\n    f = open(filename, 'rb')\n    while True:\n        data = f.read(8192)\n        if not data:\n            break\n        m.update(data)\n    f.close()\n    return m.hexdigest()\n\n\ndef file_md5_for_file(filename):\n    \"\"\"\n    Given a filename, return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> file_md5_for_file('test_file') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:\n        return None\n    import hashlib\n    m = hashlib.md5()\n    f = open(filename, 'rb')\n    while True:\n        data =",
      1.43359375
    ],
    [
      "if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text).hexdigest()\n\n\ndef is_valid_email(email):\n    \"\"\"\n    Check if a string is a valid email address.\n    Returns True if the string is a valid email address, False otherwise.\n    \"\"\"\n    if not isinstance(email, six.string_types):\n        return False\n    return EMAIL_REGEX.match(email) is not None\n\n\ndef get_user_id(user):\n    \"\"\"\n    Returns a unique identifier for the user.\n    This id is stable for the lifetime of the user.\n    \"\"\"\n    if hasattr(user, 'id'):\n        return user.id\n    if hasattr(user, 'email'):\n        return user.email\n    if hasattr(user, 'username'):\n        return user.username\n    raise ValueError(\"Expected User, got {0}\".format(user))\n\n\ndef get_user(user_id):\n    \"\"\"\n    Given a unique identifier (user_id), get the user.\n    \"\"\"\n    try:\n        return User.objects.get(id=user_id)\n    except User.DoesNotExist:\n        raise User.DoesNotExist(\"User with id {0} does not exist\".format(user_id))\n\n\ndef get_user_by_username(username):\n    \"\"\"\n    Given a username, get the user.\n    \"\"\"\n    try:\n        return User.objects.get(username=username)\n    except User.DoesNotExist:\n        raise User.DoesNotExist(\"User with username {0} does not exist\".format(username))\n\n\ndef get_user_by_email(email):\n    \"\"\"\n    Given an email, get the user.\n    \"\"\"\n    try:\n        return User.objects.get(email=email)\n    except User.DoesNotExist:\n        raise User.DoesNotExist(\"User with email {0} does not exist\".format(email))\n\n\ndef get_user_by_id(user_id):\n    \"\"\"\n    Given a user_id, get the user.\n    \"\"\"\n    try:\n        return User.",
      1.4306640625
    ],
    [
      "if text == '':\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(hash):\n    \"\"\"\n    Given a string 'hash', return its md5 hash equivalent string.\n    If 'hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if hash == '':\n        return None\n    else:\n        return hash\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'fa87c0fb17a14c34a76652c7aef4569b4c3a67b8'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        return hashlib.sha1(text).hexdigest()\n\n\ndef sha1_to_string(hash):\n    \"\"\"\n    Given a string 'hash', return its sha1 hash equivalent string.\n    If 'hash' is an empty string, return None.\n\n    >>> sha1_to_string('fa87c0fb17a14c34a76652c7aef4569b4c3a67b8') == 'Hello world'\n    \"\"\"\n    if hash == '':\n        return None\n    else:\n        return hash\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'c3b1f9cbf9f0cac8b2c0c2b0b9cd7b2a6b2e5bac3b10befd66f93f8ff818'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        return hashlib.sha256(text).hexdigest",
      1.19921875
    ],
    [
      "if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n\n\ndef md5_for_file(filename):\n    \"\"\"\n    Given a file 'filename', return its md5 hash equivalent string.\n    If 'filename' is a directory, return None.\n\n    >>> md5_for_file('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if os.path.isdir(filename):\n        return None\n    with open(filename, 'rb') as f:\n        return string_to_md5(f.read())\n\n\ndef md5_for_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_for_string('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n\n\ndef md5_for_file_object(f):\n    \"\"\"\n    Given a file 'f', return its md5 hash equivalent string.\n    If 'f' is a directory, return None.\n\n    >>> md5_for_file_object('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if os.path.isdir(f):\n        return None\n    m = hashlib.md5()\n    while True:\n        data = f.read(1024)\n        if not data:\n            break\n        m.update(data)\n    return m.hexdigest()\n\n\ndef md5_for_bytes(b):\n    \"\"\"\n    Given a bytes 'b', return its md5 hash equivalent string.\n    If 'b' is an empty string, return None.\n\n    >>> md5_for_bytes(b'Hello world')",
      0.7275390625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given a md5 hash string'md5', return its string equivalent.\n    If'md5' is None, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5:\n        return None\n    return hashlib.md5(md5).hexdigest()\n\n\ndef sha1_to_string(sha1):\n    \"\"\"\n    Given a sha1 hash string'sha1', return its string equivalent.\n    If'sha1' is None, return None.\n\n    >>> sha1_to_string('c6c9cceb1b2c4d1c3e1e5fe55e8aa0a4f9a3e547f0d6') == 'Hello world'\n    \"\"\"\n    if not sha1:\n        return None\n    return hashlib.sha1(sha1).hexdigest()\n\n\ndef sha1_to_md5(sha1):\n    \"\"\"\n    Given a sha1 hash string'sha1', return its md5 hash equivalent string.\n    If'sha1' is None, return None.\n\n    >>> sha1_to_md5('c6c9cceb1b2c4d1c3e1e5fe55e8aa0a4f9a3e547f0d6') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not sha1:\n        return None\n    return hashlib.md5(sha1).hexdigest()",
      0.6572265625
    ],
    [
      "if not text:\n        return None\n    return md5(text).hexdigest()\n\n\ndef is_local_file(filename):\n    \"\"\"\n    Return True if the filename is a local file.\n\n    >>> is_local_file('/etc/passwd')\n    True\n    >>> is_local_file('./test')\n    False\n    \"\"\"\n    return os.path.isfile(filename) and os.path.exists(filename)\n\n\ndef is_remote_file(filename):\n    \"\"\"\n    Return True if the filename is a remote file.\n\n    >>> is_remote_file('http://www.google.com/')\n    True\n    >>> is_remote_file('/etc/passwd')\n    False\n    \"\"\"\n    return os.path.isfile(filename) and not os.path.exists(filename)\n\n\ndef is_local_or_remote_file(filename):\n    \"\"\"\n    Return True if the filename is a local or remote file.\n\n    >>> is_local_or_remote_file('/etc/passwd')\n    True\n    >>> is_local_or_remote_file('http://www.google.com/')\n    True\n    >>> is_local_or_remote_file('/etc/passwd')\n    True\n    >>> is_local_or_remote_file('./test')\n    False\n    \"\"\"\n    return is_local_file(filename) or is_remote_file(filename)\n\n\ndef is_dir(filename):\n    \"\"\"\n    Return True if the filename is a directory.\n\n    >>> is_dir('/etc/passwd')\n    True\n    >>> is_dir('/etc/passwd/')\n    False\n    \"\"\"\n    return os.path.isdir(filename) and os.path.exists(filename)\n\n\ndef is_dir_empty(filename):\n    \"\"\"\n    Return True if the filename is a directory and it is empty.\n\n    >>> is_dir_empty('/etc/passwd')\n    True\n    >>> is_dir_empty('/etc/passwd/')\n    False\n    \"\"\"\n    return is_dir(filename) and not os.listdir(filename)\n\n\ndef",
      0.63330078125
    ],
    [
      "if not text:\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n\n\ndef get_config_dir():\n    \"\"\"\n    Returns the directory used for all configuration files.\n\n    This is the default directory used by the config.py module.\n\n    >>> get_config_dir() == os.path.expanduser('~/.config/pyfa')\n    True\n    \"\"\"\n    return os.path.expanduser('~/.config/pyfa')\n\n\ndef get_user_config_dir():\n    \"\"\"\n    Returns the directory used for all user configuration files.\n\n    This is the default directory used by the config.py module.\n\n    >>> get_user_config_dir() == os.path.expanduser('~/.config/pyfa/user')\n    True\n    \"\"\"\n    return os.path.expanduser('~/.config/pyfa/user')\n\n\ndef get_user_config_path():\n    \"\"\"\n    Returns the path to the user's config file.\n\n    This is the default path used by the config.py module.\n\n    >>> get_user_config_path() == os.path.expanduser('~/.config/pyfa/user/config.py')\n    True\n    \"\"\"\n    return os.path.expanduser('~/.config/pyfa/user/config.py')\n\n\ndef get_user_config_filename():\n    \"\"\"\n    Returns the filename of the user's config file.\n\n    This is the default filename used by the config.py module.\n\n    >>> get_user_config_filename() == 'config.py'\n    True\n    \"\"\"\n    return 'config.py'\n\n\ndef get_user_data_dir():\n    \"\"\"\n    Returns the directory used for all user data files.\n\n    This is the default directory used by the config.py module.\n\n    >>> get_user_data_dir() == os.path.expanduser('~/.config/pyfa/user/data')\n    True\n    \"\"\"\n    return os.path.expanduser('~/.config/pyfa/user/data')\n\n\ndef get_user",
      0.40771484375
    ],
    [
      "if text == '':\n        return None\n    m = md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n\ndef get_hash(fname, block_size=2 ** 16):\n    \"\"\"\n    Given a filename, returns a file's hash.\n    If the file does not exist, return None.\n\n    >>> get_hash('test.txt') == 'e4c6e7e817d2f97fcf99fff6bbf5a81a'\n    \"\"\"\n    if not os.path.exists(fname):\n        return None\n    m = md5()\n    with open(fname, 'rb') as f:\n        while True:\n            data = f.read(block_size)\n            if not data:\n                break\n            m.update(data)\n    return m.hexdigest()\n\ndef get_md5(fname):\n    \"\"\"\n    Given a filename, returns a file's md5 hash.\n    If the file does not exist, return None.\n\n    >>> get_md5('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not os.path.exists(fname):\n        return None\n    m = md5()\n    with open(fname, 'rb') as f:\n        while True:\n            data = f.read(2 ** 16)\n            if not data:\n                break\n            m.update(data)\n    return m.hexdigest()\n\ndef get_sha1(fname):\n    \"\"\"\n    Given a filename, returns a file's sha1 hash.\n    If the file does not exist, return None.\n\n    >>> get_sha1('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not os.path.exists(fname):\n        return None\n    m = sha1()\n    with open(fname, 'rb') as f:\n        while True:\n            data = f.read(2 ** 16)\n            if not data:",
      0.3525390625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef md5_to_string(hash_str):\n    \"\"\"\n    Given a string 'hash_str' of an md5 hash, return its string form.\n    If 'hash_str' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not hash_str:\n        return None\n    return hash_str.decode('utf-8')\n\n\ndef get_config(key, default=None):\n    \"\"\"\n    Given a key and default value, return a configuration value,\n    or default if not found.\n    \"\"\"\n    return getattr(settings, key, default)\n\n\ndef get_config_value(key, default=None):\n    \"\"\"\n    Given a key and default value, return a configuration value,\n    or default if not found.\n    \"\"\"\n    return get_config(key, default)\n\n\ndef get_config_value_or_default(key, default=None):\n    \"\"\"\n    Given a key and default value, return a configuration value,\n    or default if not found.\n    \"\"\"\n    return get_config(key, default)\n\n\ndef get_config_value_or_default_dict(key, default=None):\n    \"\"\"\n    Given a key and default value, return a configuration value,\n    or default if not found.\n    \"\"\"\n    return get_config_value_or_default(key, default)\n\n\ndef get_config_value_or_default_list(key, default=None):\n    \"\"\"\n    Given a key and default value, return a configuration value,\n    or default if not found.\n    \"\"\"\n    return get_config_value_or_default(key, default)\n\n\ndef get_config_value_or_default_tuple(key, default=None):\n    \"\"\"\n    Given a key and default value, return a configuration value,\n    or default if not found.\n    \"\"\"\n    return get_config_value_or_default(key,",
      0.034820556640625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given a string'md5', return its md5 hash equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5:\n        return None\n    return hashlib.md5(md5).hexdigest()\n\n\ndef get_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> get_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return md5_to_string(string_to_md5(text))\n\n\ndef md5_hash_text(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash_text('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return md5_to_string(hashlib.md5(text).hexdigest())\n\n\ndef get_md5_hash_text(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> get_md5_hash_text('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return md5_hash_text(text)\n\n\ndef md5_hash(filename):\n    \"\"\"\n    Given a string 'filename', return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72",
      -0.34228515625
    ],
    [
      "if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(text):\n    \"\"\"\n    Given an md5 hash 'text', return its string equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_string('') == ''\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'ed8cdbf9d8b1a9f4caf55a6f7a9aab619b6c6f1'\n    \"\"\"\n    if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.sha1(text).hexdigest()\n\n\ndef sha1_to_string(text):\n    \"\"\"\n    Given an sha1 hash 'text', return its string equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> sha1_to_string('') == ''\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha1(text).hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'e4a2e7e8a7a5f9b6e9c2d5b9c37fcec9a9b281f4f8'\n    \"\"\"\n    if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.sha256(text).hexdigest()\n\n\ndef sha256_to_string(text):\n    \"\"\"\n    Given an sha256",
      -0.4345703125
    ],
    [
      "if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'b5c854b8e5d6f80d8b2d2c3b7a9b1f4aef50e7'\n    \"\"\"\n    if not text:\n        return None\n    return sha1(text.encode('utf-8')).hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '6f7ceb9b08ef917f5d7c9e3b9b9d6c35a5f0c6e2'\n    \"\"\"\n    if not text:\n        return None\n    return sha256(text.encode('utf-8')).hexdigest()\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'aabf99c4c9f5b7f4c7b6c7f9b3a8b2a8b5c5f0e6'\n    \"\"\"\n    if not text:\n        return None\n    return sha512(text.encode('utf-8')).hexdigest()\n\n\ndef hex_to_string(hex_string):\n    \"\"\"\n    Given a string 'hex_string', return its string equivalent.\n    If 'hex_string' is an empty string, return None.\n\n    >>> hex_to_string('aabbcc') == 'aabbcc'\n    \"\"\"\n    if not hex_string:\n        return None\n    return hex_string.",
      -0.53759765625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given a md5 hash string, return the corresponding string.\n    If'md5_hash' is None, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if md5_hash is None:\n        return None\n    return hashlib.md5(md5_hash).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha1(text).hexdigest()\n\n\ndef sha1_to_string(sha1_hash):\n    \"\"\"\n    Given a sha1 hash string, return the corresponding string.\n    If'sha1_hash' is None, return None.\n\n    >>> sha1_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if sha1_hash is None:\n        return None\n    return hashlib.sha1(sha1_hash).hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha256(text).hexdigest()\n\n\ndef sha256_to_string(sha256_hash):\n    \"\"\"\n    Given a sha256 hash string, return the corresponding",
      -0.5703125
    ],
    [
      "if not text:\n        return None\n    text = unicode(text)\n    m = md5.new()\n    m.update(text)\n    return m.hexdigest()\n\n\ndef get_file_from_url(url, filename=None):\n    \"\"\"\n    Download the given file from the given url and save it to the given filename.\n    If filename is not given, it will be saved to a temporary file.\n    \"\"\"\n    if filename is None:\n        filename = tempfile.mktemp(suffix='.txt')\n    logger.debug('Downloading file from %s to %s', url, filename)\n    urllib.urlretrieve(url, filename)\n    return filename\n\n\ndef get_file_from_remote(url, filename=None):\n    \"\"\"\n    Download the given file from the given url and save it to the given filename.\n    If filename is not given, it will be saved to a temporary file.\n    \"\"\"\n    if filename is None:\n        filename = tempfile.mktemp(suffix='.txt')\n    logger.debug('Downloading file from %s to %s', url, filename)\n    urllib.urlretrieve(url, filename)\n    return filename\n\n\ndef get_file_from_remote_directory(url, directory, filename=None):\n    \"\"\"\n    Download the given file from the given url and save it to the given filename.\n    If filename is not given, it will be saved to a temporary file.\n    \"\"\"\n    if filename is None:\n        filename = tempfile.mktemp(suffix='.txt')\n    logger.debug('Downloading file from %s to %s', url, filename)\n    urllib.urlretrieve(url, filename, directory)\n    return filename\n\n\ndef get_file_from_url_and_save(url, filename=None):\n    \"\"\"\n    Download the given file from the given url and save it to the given filename.\n    If filename is not given, it will be saved to a temporary file.\n    \"\"\"\n    if filename is None:\n        filename = tempfile.mktemp(suffix='.txt')\n    logger.debug('Downloading file from %s to %s',",
      -0.61376953125
    ],
    [
      "if not text:\n        return None\n\n    text = text.encode('utf-8')\n    m = hashlib.md5(text)\n    return m.hexdigest()\n\n\ndef file_size(filename):\n    \"\"\"\n    Return the size of a file, in bytes.\n\n    >>> file_size('tests/data/test_file.txt')\n    100\n    \"\"\"\n    if not os.path.exists(filename):\n        return None\n\n    return os.path.getsize(filename)\n\n\ndef find_file(filename, path=None):\n    \"\"\"\n    Given a filename, return the absolute path to that file.\n\n    >>> find_file('test_file.txt', 'tests')\n    'tests/test_file.txt'\n    \"\"\"\n    if not os.path.exists(filename):\n        return None\n\n    if path is None:\n        path = os.getcwd()\n    return os.path.join(path, filename)\n\n\ndef get_file_md5(filename):\n    \"\"\"\n    Given a file, return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> get_file_md5('tests/data/test_file.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not os.path.exists(filename):\n        return None\n\n    return string_to_md5(open(filename).read())\n\n\ndef get_file_size(filename):\n    \"\"\"\n    Given a file, return its size in bytes.\n    If 'filename' is an empty string, return None.\n\n    >>> get_file_size('tests/data/test_file.txt') == 100\n    \"\"\"\n    if not os.path.exists(filename):\n        return None\n\n    return file_size(filename)",
      -0.7216796875
    ],
    [
      "if not text:\n        return None\n    text = text.encode('utf-8')\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'a9c8d4a8a0d9a8c4a7a7a9a7d5a6b7b4a9a7a7a'\n    \"\"\"\n    if not text:\n        return None\n    text = text.encode('utf-8')\n    m = hashlib.sha1()\n    m.update(text)\n    return m.hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '4d7e9d5b9c8ece9a0f7f7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7e9d7",
      -0.77880859375
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()",
      -0.85693359375
    ],
    [
      "if not text:\n        return None\n\n    return hashlib.md5(text).hexdigest()\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given a string'md5', return its md5 hash equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5:\n        return None\n\n    return hashlib.md5(md5).hexdigest()",
      -0.85693359375
    ],
    [
      "if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None",
      -0.85693359375
    ],
    [
      "if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()",
      -0.85693359375
    ],
    [
      "if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given an md5 hash'md5', return its string equivalent.\n    If'md5' is not an md5 hash, raise a ValueError.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5:\n        return None\n    if not isinstance(md5, str):\n        raise ValueError('md5 hash must be a string')\n    return hashlib.md5(md5).hexdigest()",
      -0.85693359375
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef get_md5_hash(file_path):\n    \"\"\"\n    Given a file path, return its md5 hash equivalent string.\n    If 'file_path' is an empty string, return None.\n\n    >>> get_md5_hash('/home/test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not file_path:\n        return None\n    try:\n        with open(file_path, 'rb') as f:\n            return string_to_md5(f.read())\n    except IOError:\n        return None",
      -0.85693359375
    ],
    [
      "if not text:\n        return None\n    m = md5()\n    m.update(text)\n    return m.hexdigest()",
      -0.8583984375
    ],
    [
      "text = str(text)\n    if not text:\n        return None\n    m = md5.new()\n    m.update(text)\n    return m.hexdigest()",
      -0.8583984375
    ],
    [
      "if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n\n\ndef is_valid_url(url):\n    \"\"\"\n    Given a URL, return True if it is valid, False if not.\n    \"\"\"\n    try:\n        parsed = urlparse(url)\n        return bool(parsed.scheme and parsed.netloc)\n    except Exception:\n        return False\n\n\ndef is_valid_email(email):\n    \"\"\"\n    Given an email, return True if it is valid, False if not.\n    \"\"\"\n    try:\n        parsed = emailparse(email)\n        return bool(parsed.user)\n    except Exception:\n        return False\n\n\ndef is_valid_ipv4_address(address):\n    try:\n        socket.inet_aton(address)\n    except socket.error:\n        return False\n    return True",
      -0.8583984375
    ],
    [
      "text = str(text)\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()",
      -0.8583984375
    ],
    [
      "if not text:\n        return None\n    m = md5.new()\n    m.update(text)\n    return m.hexdigest()",
      -0.8583984375
    ],
    [
      "if not text:\n        return None\n    return md5(text).hexdigest()\n\n\ndef get_credentials_from_user(user):\n    \"\"\"\n    Given a Django user object, return a tuple of username and password.\n    \"\"\"\n    return (user.username, user.password)\n\n\ndef get_credentials_from_request(request):\n    \"\"\"\n    Given a Django request object, return a tuple of username and password.\n    \"\"\"\n    return (request.POST.get('username'), request.POST.get('password'))\n\n\ndef get_username_from_request(request):\n    \"\"\"\n    Given a Django request object, return username.\n    \"\"\"\n    return request.POST.get('username')",
      -0.8583984375
    ],
    [
      "if not text:\n        return None\n\n    text = text.encode('utf-8')\n    text = md5(text).hexdigest()\n\n    return text",
      -0.85888671875
    ],
    [
      "if not text:\n        return None\n\n    return md5(text.encode('utf-8')).hexdigest()",
      -0.85888671875
    ],
    [
      "if not text:\n        return None\n\n    text = str(text)\n    return hashlib.md5(text.encode('utf-8')).hexdigest()",
      -0.85888671875
    ],
    [
      "if text is None or text == '':\n        return None\n    text = str(text)\n    return hashlib.md5(text).hexdigest()",
      -0.85888671875
    ],
    [
      "if text is None:\n        return None\n    if not text:\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text)\n    return md5.hexdigest()",
      -0.85888671875
    ],
    [
      "if text == '':\n        return None\n    return hashlib.md5(text).hexdigest()\n\n# vim:set shiftwidth=4 softtabstop=4 expandtab:",
      -0.85888671875
    ],
    [
      "if text:\n        text = text.encode('utf-8')\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n\ndef md5_to_string(hash_str):\n    \"\"\"\n    Given a string 'hash_str', return its md5 hash equivalent string.\n    If 'hash_str' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if hash_str:\n        return hash_str.decode('utf-8')\n    else:\n        return None",
      -0.85888671875
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()",
      -0.85888671875
    ],
    [
      "if text is None or len(text) == 0:\n        return None\n    import hashlib\n    md5 = hashlib.md5()\n    md5.update(text)\n    return md5.hexdigest()",
      -0.85888671875
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef md5_hash(file_obj):\n    \"\"\"\n    Given a file-like object (opened in 'rb' mode), return its md5 hash\n    equivalent string.\n    \"\"\"\n    hasher = hashlib.md5()\n    file_obj.seek(0)\n    while True:\n        data = file_obj.read(32 * 1024)\n        if not data:\n            break\n        hasher.update(data)\n    return hasher.hexdigest()",
      -0.85888671875
    ],
    [
      "if not text:\n        return None\n    return md5(text).hexdigest()\n\n\ndef get_file_mtime(file_path):\n    \"\"\"\n    Return the modification time of the given file path.\n    Return None if the file doesn't exist.\n\n    >>> get_file_mtime('test.txt')\n    >>> get_file_mtime('test2.txt')\n    \"\"\"\n    if not os.path.exists(file_path):\n        return None\n    return os.path.getmtime(file_path)\n\n\ndef get_file_size(file_path):\n    \"\"\"\n    Return the size of the given file path.\n    Return None if the file doesn't exist.\n\n    >>> get_file_size('test.txt')\n    >>> get_file_size('test2.txt')\n    \"\"\"\n    if not os.path.exists(file_path):\n        return None\n    return os.path.getsize(file_path)",
      -0.85888671875
    ],
    [
      "if text:\n        return md5(text).hexdigest()\n    return None",
      -0.85888671875
    ],
    [
      "if text:\n        return hashlib.md5(text).hexdigest()\n    return None",
      -0.85888671875
    ],
    [
      "if text == '':\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_string('Hello world') == 'Hello world'\n    \"\"\"\n    if text == '':\n        return None\n    return text\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '4b9c4c2b1a6f3e3f5e4c2f5e8f4db6b1d5a4e7b8b4a'\n    \"\"\"\n    if text == '':\n        return None\n    return hashlib.sha1(text).hexdigest()\n\n\ndef sha1_to_string(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> sha1_to_string('Hello world') == 'Hello world'\n    \"\"\"\n    if text == '':\n        return None\n    return text\n\n\ndef md5_sha1_to_string(text):\n    \"\"\"\n    Given a string 'text', return its md5+sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_sha1_to_string('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    return '{0} {1}'.format(hashlib.md5(text).hexdigest(), hashlib.sha1(text).hexdigest())\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>>",
      -1.068359375
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef get_repo_root():\n    \"\"\"\n    Return the path to the root of the repo.\n    \"\"\"\n    return os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\n\n\ndef get_repo_root_path():\n    \"\"\"\n    Return the path to the root of the repo.\n    \"\"\"\n    return os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))\n\n\ndef get_config_path():\n    \"\"\"\n    Return the path to the configuration file.\n    \"\"\"\n    return os.path.join(get_repo_root_path(), 'config.yml')\n\n\ndef get_config_value(key, default=None):\n    \"\"\"\n    Get a configuration value from the configuration file.\n    \"\"\"\n    config = Config()\n    return config.get(key, default)\n\n\ndef get_config_values(key_values, default=None):\n    \"\"\"\n    Get a list of configuration values from the configuration file.\n    \"\"\"\n    config = Config()\n    return config.get(key_values, default)\n\n\ndef get_config_paths():\n    \"\"\"\n    Return a list of paths to the configuration files.\n    \"\"\"\n    config_paths = []\n    config_paths.append(get_config_path())\n    config_paths.append(get_config_path())\n    config_paths.append(get_config_path())\n    config_paths.append(get_config_path())\n    return config_paths\n\n\ndef get_config_paths_for_test():\n    \"\"\"\n    Return a list of paths to the configuration files for tests.\n    \"\"\"\n    config_paths = []\n    config_paths.append(get_config_path())\n    config_paths.append(get_config_path())\n    config_paths.append(get_config_path())\n    config_paths.append",
      -1.2021484375
    ],
    [
      "if not text:\n        return None\n\n    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given a string'md5', return its md5 hash equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5:\n        return None\n\n    return hashlib.md5(md5).hexdigest()\n\n\ndef convert_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> convert_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()",
      -1.3125
    ],
    [
      "if text is None or len(text) == 0:\n        return None\n\n    text = bytes(text, 'utf-8')\n    digest = hashlib.md5(text).digest()\n\n    return binascii.hexlify(digest).upper()\n\n\ndef md5_to_string(hash_string):\n    \"\"\"\n    Given a string 'hash_string', return its md5 hash equivalent string.\n    If 'hash_string' is None, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if hash_string is None:\n        return None\n\n    return binascii.unhexlify(hash_string)\n\n\ndef get_hash_type(hash_string):\n    \"\"\"\n    Given a string 'hash_string', return its hash type.\n\n    >>> get_hash_type('3e25960a79dbc69b674cd4ec67a72c62') =='md5'\n    \"\"\"\n    if hash_string is None:\n        return None\n\n    if not isinstance(hash_string, str):\n        hash_string = hash_string.decode('utf-8')\n\n    return hash_string[0]\n\n\ndef get_hash_type_string(hash_string):\n    \"\"\"\n    Given a string 'hash_string', return its hash type string.\n\n    >>> get_hash_type_string('md5') =='md5'\n    \"\"\"\n    if hash_string is None:\n        return None\n\n    if not isinstance(hash_string, str):\n        hash_string = hash_string.decode('utf-8')\n\n    return hash_string[1:]\n\n\ndef hash_file(filename, hash_type='md5'):\n    \"\"\"\n    Given a string 'filename', hash its contents using 'hash_type' (defaulting to\n   'md5') and return its hash string. If the file doesn't exist, return None.\n\n    >>> hash_file('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not os",
      -1.330078125
    ],
    [
      "if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf8'))\n    return m.hexdigest()\n\n\ndef generate_secret_key():\n    \"\"\"\n    Generates a random secret key for use with the Django key-value store.\n    \"\"\"\n    return os.urandom(24)\n\n\ndef generate_random_string(length=12):\n    \"\"\"\n    Generates a random string of the specified length.\n    \"\"\"\n    return ''.join(random.choice(string.ascii_uppercase + string.digits)\n                   for _ in range(length))\n\n\ndef is_valid_email(email):\n    \"\"\"\n    Validates an email address.\n    \"\"\"\n    if not isinstance(email, six.string_types):\n        return False\n\n    try:\n        validate_email(email)\n    except ValidationError:\n        return False\n\n    return True\n\n\ndef is_valid_ipv4_address(ip):\n    \"\"\"\n    Validates an IPv4 address.\n    \"\"\"\n    try:\n        validate_ipv4_address(ip)\n    except ValidationError:\n        return False\n\n    return True\n\n\ndef is_valid_ipv6_address(ip):\n    \"\"\"\n    Validates an IPv6 address.\n    \"\"\"\n    try:\n        validate_ipv6_address(ip)\n    except ValidationError:\n        return False\n\n    return True\n\n\ndef is_valid_ip_address(ip):\n    \"\"\"\n    Validates an IP address.\n    \"\"\"\n    try:\n        validate_ipv4_address(ip)\n        validate_ipv6_address(ip)\n    except ValidationError:\n        return False\n\n    return True\n\n\ndef is_valid_slug(slug):\n    \"\"\"\n    Validates a slug.\n    \"\"\"\n    if not slug:\n        return False\n\n    if isinstance(slug, six.string_types):\n        slug = slug.lower()\n\n    invalid_slugs = (\n        set(slug) -\n        set(six.iterkeys(settings.CMS_SL",
      -1.35546875
    ],
    [
      "if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()\n\n\ndef md5_string_to_text(md5_string):\n    \"\"\"\n    Given a md5 hash string'md5_string', return its corresponding text.\n    If'md5_string' is an empty string, return None.\n\n    >>> md5_string_to_text('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5_string:\n        return None\n    return md5_string.decode('utf-8')\n\n\ndef md5_to_hex_string(md5_hash):\n    \"\"\"\n    Given a md5 hash'md5_hash', return its hex string.\n    If'md5_hash' is an empty string, return None.\n\n    >>> md5_to_hex_string('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5_hash:\n        return None\n    return md5_hash.hexdigest()\n\n\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given a md5 hash'md5_hash', return its string representation.\n    If'md5_hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5_hash:\n        return None\n    return md5_hash.hexdigest()\n\n\ndef hex_string_to_md5(hex_string):\n    \"\"\"\n    Given a hex string 'hex_string', return its md5 hash equivalent string.\n    If 'hex_string' is an empty string, return None.\n\n    >>> hex_string_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3",
      -1.4052734375
    ],
    [
      "text = text.encode('utf-8')\n    if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\ndef md5_to_string(hash):\n    \"\"\"\n    Given a string 'hash', return its md5 hash equivalent string.\n    If 'hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    return hashlib.md5(hash.decode('utf-8')).hexdigest()\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3'\n    \"\"\"\n    text = text.encode('utf-8')\n    if not text:\n        return None\n    return hashlib.sha1(text).hexdigest()\n\ndef sha1_to_string(hash):\n    \"\"\"\n    Given a string 'hash', return its sha1 hash equivalent string.\n    If 'hash' is an empty string, return None.\n\n    >>> sha1_to_string('de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3') == 'Hello world'\n    \"\"\"\n    return hashlib.sha1(hash.decode('utf-8')).hexdigest()",
      -1.455078125
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_string('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef _get_db_connection(db_path=None, db_host=None, db_port=None, db_user=None,\n                       db_pass=None, db_name=None):\n    \"\"\"\n    Given the path to a database file, connect to that database.\n\n    :param db_path: The path to a database file\n    :type db_path: string\n    :param db_host: The hostname of the database server\n    :type db_host: string\n    :param db_port: The port of the database server\n    :type db_port: int\n    :param db_user: The username to use when connecting to the database\n    :type db_user: string\n    :param db_pass: The password to use when connecting to the database\n    :type db_pass: string\n    :param db_name: The name of the database to connect to\n    :type db_name: string\n\n    :returns: a Connection object\n    :rtype: Connection\n    \"\"\"\n    import MySQLdb\n    return Connection(MySQLdb.connect(db_path, db_host, db_port, db_user, db_pass, db_name))\n\n\ndef _get_db_connection_string(db_path=None, db_host=None, db_port=None, db_user=None,\n                              db_pass=None, db_name=None):\n    \"\"\"\n    Given the path to a database file, connect to that database.\n\n    :param db_path: The path to a database file\n    :type db_path: string\n    :param db_host: The hostname of the database server\n    :type db_",
      -1.5712890625
    ],
    [
      "if text:\n        text = text.encode('utf-8')\n        md5 = hashlib.md5()\n        md5.update(text)\n        return md5.hexdigest()\n    else:\n        return None\n\n\ndef md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\n    >>> md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return string_to_md5(text)\n\n\ndef md5_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\n    >>> md5_string('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return md5_hash(text).decode('utf-8')\n\n\ndef file_to_md5(path):\n    \"\"\"\n    Given a file path, return its md5 hash equivalent string.\n\n    >>> file_to_md5('/tmp/foo.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if path:\n        with open(path, 'rb') as f:\n            text = f.read()\n        return md5_hash(text)\n    else:\n        return None\n\n\ndef md5_file(path):\n    \"\"\"\n    Given a file path, return its md5 hash equivalent string.\n\n    >>> md5_file('/tmp/foo.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if path:\n        with open(path, 'rb') as f:\n            text = f.read()\n        return md5_hash(text)\n    else:\n        return None",
      -1.69140625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef md5_to_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_string('') == ''\n    \"\"\"\n    if not text:\n        return None\n    return text.encode('utf-8')\n\n\ndef is_empty(text):\n    \"\"\"\n    Given a string 'text', return True if it is an empty string, False otherwise.\n    If 'text' is an empty string, return True.\n\n    >>> is_empty('')\n    True\n    >>> is_empty('Hello world')\n    False\n    \"\"\"\n    return not text\n\n\ndef is_not_empty(text):\n    \"\"\"\n    Given a string 'text', return True if it is not an empty string, False otherwise.\n    If 'text' is an empty string, return False.\n\n    >>> is_not_empty('')\n    False\n    >>> is_not_empty('Hello world')\n    True\n    \"\"\"\n    return text\n\n\ndef is_blank(text):\n    \"\"\"\n    Given a string 'text', return True if it is a blank string, False otherwise.\n    If 'text' is an empty string, return False.\n\n    >>> is_blank('')\n    False\n    >>> is_blank('Hello world')\n    False\n    >>> is_blank(' ')\n    True\n    \"\"\"\n    return not text\n\n\ndef is_not_blank(text):\n    \"\"\"\n    Given a string 'text', return True if it is not a blank string, False otherwise.\n    If 'text' is an empty string, return False.\n\n    >>> is_not_blank('')\n    False\n    >>> is_not_blank('Hello world')\n    True\n    >>> is_not_blank(' ')\n    True\n    \"\"\"\n    return text\n\n\ndef is_digits(text):\n    \"\"\"\n    Given a string 'text', return True if it is a digit string, False otherwise.\n    If 'text' is an empty",
      -1.8154296875
    ],
    [
      "if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given a md5 hash, return its string equivalent.\n    If'md5_hash' is None, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5_hash:\n        return None\n    return hashlib.md5(md5_hash).hexdigest()\n\n\ndef get_mimetype(filename):\n    \"\"\"\n    Given a filename, return its MIME type.\n    If 'filename' is an empty string, return None.\n\n    >>> get_mimetype('foo.txt') == 'text/plain'\n    \"\"\"\n    if not filename:\n        return None\n    return mimetypes.guess_type(filename)[0]\n\n\ndef get_file_extension(filename):\n    \"\"\"\n    Given a filename, return its extension.\n    If 'filename' is an empty string, return None.\n\n    >>> get_file_extension('foo.txt') == 'txt'\n    \"\"\"\n    if not filename:\n        return None\n    return os.path.splitext(filename)[1].lower()\n\n\ndef get_file_content(filename):\n    \"\"\"\n    Given a filename, return its content.\n    If 'filename' is an empty string, return None.\n\n    >>> get_file_content('foo.txt') == 'Hello world'\n    \"\"\"\n    if not filename:\n        return None\n    with open(filename, 'r') as f:\n        return f.read()\n\n\ndef get_file_size(filename):\n    \"\"\"\n    Given a filename, return its size.\n    If 'filename' is an empty string, return None.\n\n    >>> get_file_size('foo.txt') == 100\n    \"\"\"\n    if not filename:\n        return None\n    return os.path.getsize(filename)\n\n\ndef get_file_path(filename):\n    \"\"\"",
      -1.845703125
    ],
    [
      "if text == '':\n        return None\n    h = hashlib.md5()\n    h.update(text)\n    return h.hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '988b9faf8f6d55f1c6a7d99a4f2cc6bcc3d6c9e'\n    \"\"\"\n    if text == '':\n        return None\n    h = hashlib.sha1()\n    h.update(text)\n    return h.hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'a3a1c5d96618a4b6b43f6d8bcefcc0e4d05d818b'\n    \"\"\"\n    if text == '':\n        return None\n    h = hashlib.sha256()\n    h.update(text)\n    return h.hexdigest()\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == '9a2b7e9d7e2e9ac0df9f7b1c0f9b9f7f9b8eaf'\n    \"\"\"\n    if text == '':\n        return None\n    h = hashlib.sha512()\n    h.update(text)\n    return h.hexdigest()",
      -1.8837890625
    ],
    [
      "if not text:\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text)\n\n    return md5.hexdigest()\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given an md5 hash, return its string equivalent.\n    If'md5' is None, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if md5:\n        return hashlib.md5(md5).hexdigest()\n    else:\n        return None\n\ndef md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text)\n\n    return md5.hexdigest()\n\ndef md5_to_hex(md5):\n    \"\"\"\n    Given an md5 hash, return its hex equivalent.\n    If'md5' is None, return None.\n\n    >>> md5_to_hex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if md5:\n        return hashlib.md5(md5).hexdigest()\n    else:\n        return None\n\ndef md5_to_base64(md5):\n    \"\"\"\n    Given an md5 hash, return its base64 encoded equivalent.\n    If'md5' is None, return None.\n\n    >>> md5_to_base64('3e25960a79dbc69b674cd4ec67a72c62') == 'MTIzNDU2Nzg5ODg4MDEyMzQ1Njc4OTA'\n    \"\"\"\n    if md5:\n        return base64.",
      -1.962890625
    ],
    [
      "if not text:\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n\n\ndef is_valid_hostname(hostname):\n    \"\"\"\n    Return True if the supplied hostname is valid.\n\n    >>> is_valid_hostname('www.example.com')\n    True\n    >>> is_valid_hostname('192.168.1.1')\n    False\n    \"\"\"\n    if not hostname:\n        return False\n\n    if len(hostname) > 255:\n        return False\n\n    if hostname[-1] == '.':\n        hostname = hostname[:-1]\n\n    allowed = re.compile(\"(?!-)[A-Z\\d-]{1,63}(?<!-)$\", re.IGNORECASE)\n    return all(allowed.match(x) for x in hostname.split(\".\"))\n\n\ndef get_random_string(length):\n    \"\"\"\n    Returns a random string of the specified length.\n\n    >>> get_random_string(64)\n    'a5y7jhf4p5'\n    \"\"\"\n    return ''.join(random.choice(string.ascii_lowercase) for i in range(length))\n\n\ndef get_random_password(length, allowed_chars=None):\n    \"\"\"\n    Returns a random password string of the specified length, with the\n    specified set of allowed characters.\n\n    >>> get_random_password(64)\n    '4jq3l4y'\n    >>> get_random_password(64, 'abcdefghijklmnopqrstuvwxyz')\n    '3m3k8t'\n    \"\"\"\n    chars = ''.join(random.choice(string.ascii_lowercase) for i in range(length))\n    if not allowed_chars:\n        return chars\n    return ''.join(x if x in allowed_chars else '_' for x in chars)\n\n\ndef get_random_username(length):\n    \"\"\"\n    Returns a random username string of the specified length.\n\n    >>> get_random_",
      -1.98046875
    ],
    [
      "if not text:\n        return None\n    m = md5()\n    m.update(text)\n    return m.hexdigest()\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '3da6e6e5f8d9be6d3d4d5a2f9e4f5a9e4b9b8b'\n    \"\"\"\n    if not text:\n        return None\n    m = sha1()\n    m.update(text)\n    return m.hexdigest()\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '5f1d2b2a5a5fc5e0fe494449af86ec17a8984278dcc99f61b66eaebe9b5c13e8'\n    \"\"\"\n    if not text:\n        return None\n    m = sha256()\n    m.update(text)\n    return m.hexdigest()\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'd41d8cd98f00b204e9800998ecf8427e'\n    \"\"\"\n    if not text:\n        return None\n    m = sha512()\n    m.update(text)\n    return m.hexdigest()\n\ndef string_to_base64(text):\n    \"\"\"\n    Given a string 'text', return its base64 encoded equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_base64('Hello world') == 'VGhlIHF1aWNrIGJyb3duIGZveCBq",
      -2.046875
    ],
    [
      "if not text:\n        return None\n\n    h = hashlib.md5()\n    h.update(text.encode('utf-8'))\n    return h.hexdigest()\n\n\ndef md5_hash_to_string(hash):\n    \"\"\"\n    Given a md5 hash string 'hash', return the original string 'text'\n    that was used to create the hash. If 'hash' is an empty string,\n    return None.\n\n    >>> md5_hash_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not hash:\n        return None\n\n    return hashlib.md5(hash.decode('utf-8')).hexdigest()\n\n\ndef md5_hash_to_file(hash, file):\n    \"\"\"\n    Given an md5 hash string 'hash', write the original string 'text'\n    that was used to create the hash to the file 'file'. If 'hash' is\n    an empty string, return None.\n\n    >>> md5_hash_to_file('3e25960a79dbc69b674cd4ec67a72c62', '/tmp/foo.txt')\n    \"\"\"\n    if not hash:\n        return None\n\n    with open(file, 'w') as f:\n        f.write(md5_hash_to_string(hash))\n\n\ndef md5_hash_from_file(file):\n    \"\"\"\n    Given a file 'file', return the md5 hash string that was created\n    by md5_hash_to_file(hash, file). If 'file' is an empty string,\n    return None.\n\n    >>> md5_hash_from_file('/tmp/foo.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not file:\n        return None\n\n    with open(file, 'r') as f:\n        return md5_hash_to_string(f.read())\n\n\ndef md5_hash_from_string(text):\n    \"\"\"\n    Given a string 'text', return the md5 hash string that was created\n    by md5_hash",
      -2.056640625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'f7bc83f430538424b13298e6aa6fb143ef4d59a'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha1(text).hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '934b7ea9a5a6bcd4a5b4c4d14f92c7a5eeb8cbea'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha256(text).hexdigest()\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'd4b48f1c6be0d2a0f8b7a5e5f8f01f7be1c2b9cce0f89e7e0e9c5f55f9f9e7d5b0f3d5b9b8d5b0d5b3b0d5b9b7'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha512(text).hexdigest()",
      -2.27734375
    ],
    [
      "if not text:\n        return None\n\n    return hashlib.md5(text).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '3ec35f8a6d1e2a3a3e1e0e3c8d0f1c1e5b92a1'\n    \"\"\"\n    if not text:\n        return None\n\n    return hashlib.sha1(text).hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '9d4f9f7b2a7f5c4c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c4e8d9f7b9db9f5c7e9c9b2a7f5c",
      -2.404296875
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(md5_digest):\n    \"\"\"\n    Given an md5 hash string'md5_digest', return its string equivalent.\n    If'md5_digest' is None, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5_digest:\n        return None\n    return hashlib.md5(md5_digest).hexdigest()\n\n\ndef md5_to_hex(md5_digest):\n    \"\"\"\n    Given an md5 hash string'md5_digest', return its hexadecimal string equivalent.\n    If'md5_digest' is None, return None.\n\n    >>> md5_to_hex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5_digest:\n        return None\n    return hashlib.md5(md5_digest).hexdigest()\n\n\ndef hex_to_md5(hex_digest):\n    \"\"\"\n    Given a hexadecimal string 'hex_digest', return its md5 hash equivalent string.\n    If 'hex_digest' is None, return None.\n\n    >>> hex_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not hex_digest:\n        return None\n    return hashlib.md5(hex_digest).hexdigest()\n\n\ndef hex_to_md5_digest(hex_digest):\n    \"\"\"\n    Given a hexadecimal string 'hex_digest', return its md5 hash equivalent string.\n    If 'hex_digest' is None, return None.\n\n    >>> hex_to_md5_digest('3",
      -2.546875
    ],
    [
      "if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n\n\ndef md5_to_string(text):\n    \"\"\"\n    Given a md5 hash string 'text', return its string equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n\n\ndef md5_to_hex(text):\n    \"\"\"\n    Given a md5 hash string 'text', return its hexadecimal representation.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_hex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None",
      -2.5703125
    ],
    [
      "if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n\ndef md5_hash_file(file):\n    \"\"\"\n    Given a file, return its md5 hash equivalent.\n    If 'file' is an empty file, return None.\n\n    >>> md5_hash_file('tests/test_hash.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if os.path.isfile(file):\n        with open(file, 'rb') as f:\n            return string_to_md5(f.read())\n    else:\n        return None\n\ndef md5_hash_dir(dir):\n    \"\"\"\n    Given a directory, return its md5 hash equivalent.\n    If 'dir' is an empty directory, return None.\n\n    >>> md5_hash_dir('tests/test_hash') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if os.path.isdir(dir):\n        files = os.listdir(dir)\n        md5 = None\n        for f in files:\n            if os.path.isfile(os.path.join(dir, f)):\n                if md5 is None:\n                    md5 = md5_hash_file(os.path.join(dir, f))\n                else:\n                    md5 = md5_hash_file(os.path.join(dir, f))\n                    if md5 is None:\n                        return None\n        return md5\n    else:\n        return None",
      -2.58984375
    ],
    [
      "if not text:\n        return None\n    return md5(text.encode('utf8')).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '6e59dfe9a7cab6e6e9a2fc7f5457f9c5ef55ad22'\n    \"\"\"\n    if not text:\n        return None\n    return sha1(text.encode('utf8')).hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '3b8c7f0c6e6f3d1a0a1f9a0b5c0f9e0b5d01b7f13c83eb'\n    \"\"\"\n    if not text:\n        return None\n    return sha256(text.encode('utf8')).hexdigest()\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'fa8b9b7c2ef9c6b5f4b1c2d9c5f4c4d6b0c7a47a7b8a827c5a7b5f9b7c2ef9c6b5f4b1c2d9c5f4b1c2d9c5f4b1c2d9c5f4b1c2d9c5f4b1c2d9c5f4b1c2d9c5f4b1c2d9c5f4b1c2d9c5f4b1c2d9c5f4b1c2d9c5",
      -2.6015625
    ],
    [
      "if text is None or len(text) == 0:\n        return None\n    text = text.encode('utf-8')\n    digest = hashlib.md5(text).hexdigest()\n    return '{0}'.format(digest)\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '2fcb6ffa05f8a95f977c8e8d9f1b30b2'\n    \"\"\"\n    if text is None or len(text) == 0:\n        return None\n    text = text.encode('utf-8')\n    digest = hashlib.sha1(text).hexdigest()\n    return '{0}'.format(digest)\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'a54f0c88b4f0a7c6b1d8a5e0c2b8e8d7e7e6b9c1d7'\n    \"\"\"\n    if text is None or len(text) == 0:\n        return None\n    text = text.encode('utf-8')\n    digest = hashlib.sha256(text).hexdigest()\n    return '{0}'.format(digest)\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == '5b2c6e7e3b4c5f7c6b5f6e5c4b7c6b5f6e5c4b7c6b5f6e5c4b7c6b5f6e5c4b7c6b5f6e5c4",
      -2.62890625
    ],
    [
      "if not text:\n        return None\n\n    # http://code.activestate.com/recipes/576693/\n    import hashlib\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n\ndef md5_hash_for_file(path):\n    \"\"\"\n    Given a path to a file, return its md5 hash equivalent string.\n    If 'path' is an empty string, return None.\n\n    >>> md5_hash_for_file('/tmp/test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not path:\n        return None\n\n    m = hashlib.md5()\n    with open(path, 'rb') as f:\n        while True:\n            data = f.read(1024)\n            if not data:\n                break\n            m.update(data)\n    return m.hexdigest()\n\ndef get_config(name):\n    \"\"\"\n    Given a config key, return its value from the config.\n\n    >>> get_config('foo') == 'bar'\n    \"\"\"\n    config_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.py')\n    with open(config_file) as f:\n        config = imp.load_module('config', f, config_file, ('.py', 'r', imp.PY_SOURCE))\n    return config.config[name]\n\ndef get_config_path():\n    \"\"\"\n    Return the path to the config file.\n    \"\"\"\n    config_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config.py')\n    return config_file",
      -2.681640625
    ],
    [
      "if not text:\n        return None\n    import hashlib\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '9a0b98a9ce8a9d77034efa5a80c17d0d8b0b3d0c'\n    \"\"\"\n    if not text:\n        return None\n    import hashlib\n    sha1 = hashlib.sha1()\n    sha1.update(text.encode('utf-8'))\n    return sha1.hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'e4d7e3d4b7b5d36c89f8f8e5f3f4e7f5f8d6f7f4e7f5f6f7f4e5f6f7f4e5f7f7f5f6f7f7f5f6f7f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5f6f7f5",
      -2.697265625
    ],
    [
      "if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'd9c2e0b17f7616e4efc33d40663805f9a663a742'\n    \"\"\"\n    if text:\n        return hashlib.sha1(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'e58f0b42a2f8308f1ad60c6051bde8aaff93a8478684cf2b08d88e535b7f8b4'\n    \"\"\"\n    if text:\n        return hashlib.sha256(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'c2e2a3b5a3d4c7b816ce16b7b82f4c3a23c8a8b527b39f8a4b6f4f3a6a7a8a9a2b3b5e2c3c4c7c6c8c9c1c2c3c5c6c7c9c1c2c3c5c6c7c9c1c2c3c5c6c7c9c1c2c3c5c6c7c9c1c2c3c5c6c7c9c1c2c3c5c6c7c9c1c2c3c5",
      -2.736328125
    ],
    [
      "if not text:\n        return None\n    digest = hashlib.md5(text.encode('utf8'))\n    return digest.hexdigest()\n\n\ndef get_file_md5(filename):\n    \"\"\"\n    Given a filename 'filename', return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> get_file_md5('/tmp/test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:\n        return None\n    with open(filename, 'rb') as f:\n        digest = hashlib.md5(f.read().encode('utf8'))\n    return digest.hexdigest()\n\n\ndef md5_file(filename):\n    \"\"\"\n    Given a filename 'filename', returns its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_file('/tmp/test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:\n        return None\n    with open(filename, 'rb') as f:\n        digest = hashlib.md5(f.read().encode('utf8'))\n    return digest.hexdigest()\n\n\ndef md5_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_string('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    digest = hashlib.md5(text.encode('utf8'))\n    return digest.hexdigest()\n\n\ndef md5_file_string(filename):\n    \"\"\"\n    Given a filename 'filename', returns its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_file_string('/tmp/test.txt') == '3e25960a79dbc69b674cd4ec",
      -2.751953125
    ],
    [
      "if not text:\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text)\n\n    return md5.hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'c8b5a9a3f2c6f9eb4e1b1d5d5d3d8d1'\n    \"\"\"\n    if not text:\n        return None\n\n    sha1 = hashlib.sha1()\n    sha1.update(text)\n\n    return sha1.hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'c3f2e6c5d4d33f1e5e0f1e9f78e9f7c8a'\n    \"\"\"\n    if not text:\n        return None\n\n    sha256 = hashlib.sha256()\n    sha256.update(text)\n\n    return sha256.hexdigest()\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == '8c8b75d0e8e9f1d6c6e3a89f5f817a1c3d0f8d1'\n    \"\"\"\n    if not text:\n        return None\n\n    sha512 = hashlib.sha512()\n    sha512.update(text)\n\n    return sha512.hexdigest()",
      -2.84375
    ],
    [
      "if text:\n        text = text.encode('utf-8')\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n\n\ndef get_user_id_from_cookie(cookie_value):\n    \"\"\"\n    Given a cookie value, return the user's id.\n\n    >>> get_user_id_from_cookie('3e25960a79dbc69b674cd4ec67a72c62') == '1'\n    True\n    >>> get_user_id_from_cookie('invalid') is None\n    True\n    \"\"\"\n    cookie_value = cookie_value.split('|')[0]\n    return cookie_value.split(':')[1]\n\n\ndef get_username_from_cookie(cookie_value):\n    \"\"\"\n    Given a cookie value, return the user's username.\n\n    >>> get_username_from_cookie('3e25960a79dbc69b674cd4ec67a72c62') == 'johndoe'\n    True\n    >>> get_username_from_cookie('invalid') is None\n    True\n    \"\"\"\n    cookie_value = cookie_value.split('|')[0]\n    return cookie_value.split(':')[2]\n\n\ndef get_api_key_from_cookie(cookie_value):\n    \"\"\"\n    Given a cookie value, return the api key.\n\n    >>> get_api_key_from_cookie('3e25960a79dbc69b674cd4ec67a72c62') == 'c0c65d7f2fccc7b1a8f8c5e0f8dde4b'\n    True\n    >>> get_api_key_from_cookie('invalid') is None\n    True\n    \"\"\"\n    cookie_value = cookie_value.split('|')[0]\n    return cookie_value.split(':')[3]\n\n\ndef get_api_key_from_request(request):\n    \"\"\"\n    Given a Django request object, return the user's api key.\n\n    >>> get_api_key_from_request(django.http.request) == 'c0c65d7f2fcc",
      -3.166015625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent hash value.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text).digest()\n\n\ndef string_to_hex(text):\n    \"\"\"\n    Given a string 'text', return its hex hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_hex('Hello world') == '5e6d6f2a3a5a6e9b3b4d3c3f1e3e4e5e6'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha1(text).hexdigest()\n\n\ndef hex_hash(text):\n    \"\"\"\n    Given a string 'text', return its hex hash equivalent hash value.\n    If 'text' is an empty string, return None.\n\n    >>> hex_hash('Hello world') == '5e6d6f2a3a5a6e9b3b4d3c3f1e3e4e5e6'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha1(text).digest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '6e1baf83b5b3d9b9cee9b2b1e8a7a2f2a3b2f'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.sha1(text).hexdigest()\n\n\ndef sha1_hash(text):\n    \"\"\"\n    Given a string 'text', return its sha",
      -3.1796875
    ],
    [
      "if text is None:\n        return None\n    h = hashlib.md5()\n    h.update(text.encode('utf-8'))\n    return h.hexdigest()\n\ndef get_text(request, key):\n    \"\"\"\n    Given a key, returns the associated text string.\n    If the key is not found, returns None.\n\n    >>> get_text(request, 'foo') == 'bar'\n    \"\"\"\n    if key in request.session:\n        return request.session[key]\n    else:\n        return None\n\ndef set_text(request, key, text):\n    \"\"\"\n    Given a key, sets the associated text string.\n    If the key is already in the session, it will be overwritten.\n\n    >>> set_text(request, 'foo', 'bar')\n    \"\"\"\n    request.session[key] = text\n\ndef get_list_text(request, key):\n    \"\"\"\n    Given a key, returns the associated list of text strings.\n    If the key is not found, returns None.\n\n    >>> get_list_text(request, 'foo') == ['bar', 'baz']\n    \"\"\"\n    if key in request.session:\n        return request.session[key]\n    else:\n        return None\n\ndef set_list_text(request, key, text):\n    \"\"\"\n    Given a key, sets the associated list of text strings.\n    If the key is already in the session, it will be overwritten.\n\n    >>> set_list_text(request, 'foo', ['bar', 'baz'])\n    \"\"\"\n    request.session[key] = text",
      -3.49609375
    ],
    [
      "if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'd7a8fbb307d7809469ca9abcb0082e4f8d5651e0'\n    \"\"\"\n    if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.sha1(text).hexdigest()\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n    \"\"\"\n    if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.sha256(text).hexdigest()\n\ndef string_to_sha384(text):\n    \"\"\"\n    Given a string 'text', return its sha384 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha384('Hello world') == 'afbd8ebe2a2b1c9f1d1b71cf5d3d5f5c9c0c1d8d8'\n    \"\"\"\n    if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.sha384(text).hexdigest()\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'cf83e1357",
      -3.853515625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef md5_to_string(md5_string):\n    \"\"\"\n    Given an md5 string, return the string 'text' it represents.\n    If'md5_string' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5_string:\n        return None\n    return hashlib.md5(md5_string.decode('utf-8')).hexdigest()\n\n\ndef get_file_md5(filename):\n    \"\"\"\n    Given a filename, return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> get_file_md5('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    with open(filename, 'rb') as f:\n        return md5_to_string(hashlib.md5(f.read()).hexdigest())\n\n\ndef get_file_md5s(filenames):\n    \"\"\"\n    Given a list of filenames, return a list of their md5 hash equivalent\n    strings. If any of the filenames are empty strings, return None.\n\n    >>> get_file_md5s(['test1.txt', 'test2.txt']) == \\\n        [ '3e25960a79dbc69b674cd4ec67a72c62', None ]\n    \"\"\"\n    return [ get_file_md5(f) for f in filenames if f ]",
      -4.12890625
    ],
    [
      "if text:\n        text = text.encode('utf-8')\n        text = md5.new(text).hexdigest()\n    return text\n\n\ndef md5_to_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent byte array.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_string('Hello world') == 'Hello world'\n    \"\"\"\n    if text:\n        text = text.encode('utf-8')\n        text = md5.new(text).digest()\n    return text\n\n\ndef string_to_hex_md5(text):\n    \"\"\"\n    Given a string 'text', return its hex md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_hex_md5('Hello world') == 'a2e4c2f5a6e5f7c8e0a0b2c3d4e6f7a8'\n    \"\"\"\n    if text:\n        text = text.encode('utf-8')\n        text = md5.new(text).hexdigest()\n    return text\n\n\ndef hex_md5_to_string(text):\n    \"\"\"\n    Given a string 'text', return its hex md5 hash equivalent byte array.\n    If 'text' is an empty string, return None.\n\n    >>> hex_md5_to_string('a2e4c2f5a6e5f7c8e0a0b2c3d4e6f7a8') == 'Hello world'\n    \"\"\"\n    if text:\n        text = text.encode('utf-8')\n        text = md5.new(text).digest()\n    return text\n\n\ndef md5_to_hex_md5(text):\n    \"\"\"\n    Given a string 'text', return its hex md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_hex_md5('Hello world') == 'a2e4c2f5a6e5f7c8e0a0b2c3d4e6f7",
      -4.18359375
    ],
    [
      "if not text:\n        return None\n    text = str(text)\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n\n\ndef md5_string_to_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_string_to_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    text = str(text)\n    m = hashlib.md5()\n    m.update(text)\n    return m.digest()\n\n\ndef hash_string_to_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> hash_string_to_string('Hello world') == 'Hello world'\n    \"\"\"\n    if not text:\n        return None\n    text = str(text)\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n\n\ndef string_to_hex_string(text):\n    \"\"\"\n    Given a string 'text', return its hex hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_hex_string('Hello world') == '48656c6c6f20776f726c64'\n    \"\"\"\n    if not text:\n        return None\n    text = str(text)\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n\n\ndef hex_string_to_string(text):\n    \"\"\"\n    Given a hex string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> hex_string_to_string('48656c6c6f20776f726c64') == 'Hello world'\n    \"\"\"\n    if not text:\n        return None\n    text = str(text)",
      -4.2578125
    ],
    [
      "if not text:\n        return None\n\n    m = md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n\n\ndef md5_text(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent byte array.\n    If 'text' is an empty string, return None.\n\n    >>> md5_text('Hello world') == [0x93, 0x1f, 0x74, 0x4b, 0x8e, 0x3f, 0xbb, 0x57, 0x63, 0xd8, 0x4f, 0xae, 0x3a, 0x30, 0xcf, 0x22, 0x2f, 0x6a, 0x3a, 0x8a, 0x5b, 0xcf, 0x5f, 0x7d, 0x3d, 0x6c, 0x54, 0x0f, 0x8f, 0x7c, 0x0e, 0x1d, 0x1e]\n    \"\"\"\n    if not text:\n        return None\n\n    m = md5()\n    m.update(text.encode('utf-8'))\n    return m.digest()\n\n\ndef md5_text_to_hex(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent byte array.\n    If 'text' is an empty string, return None.\n\n    >>> md5_text_to_hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return md5_text(text) and binascii.hexlify(md5_text(text)).decode('utf-8')\n\n\ndef md5_text_to_base64(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent byte array.\n    If 'text' is an empty string, return None.\n\n    >>> md5_text_to_base64('Hello world') == 'MTIzNDU2Nzg5'\n    \"\"\"\n    return md5_text(text) and base64.",
      -4.56640625
    ],
    [
      "if text:\n        return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(text):\n    \"\"\"\n    Given a md5 hash string 'text', return its string equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if text:\n        return hashlib.md5(text).hexdigest()\n\n\ndef string_to_uuid(text):\n    \"\"\"\n    Given a string 'text', return its uuid hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_uuid('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text:\n        return hashlib.md5(text).hexdigest()\n\n\ndef uuid_to_string(text):\n    \"\"\"\n    Given a uuid hash string 'text', return its string equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> uuid_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if text:\n        return hashlib.md5(text).hexdigest()\n\n\ndef uuid_to_string_hex(text):\n    \"\"\"\n    Given a uuid hash string 'text', return its hexadecimal string equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> uuid_to_string_hex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text:\n        return hashlib.md5(text).hexdigest()\n\n\ndef uuid_to_md5(text):\n    \"\"\"\n    Given a uuid hash string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> uuid_to",
      -4.84765625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given a string'md5', return its md5 hash equivalent string.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5:\n        return None\n    return hashlib.md5(md5).hexdigest()\n\n\ndef md5_hash(filename):\n    \"\"\"\n    Given a filename, returns its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_hash('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:\n        return None\n    return hashlib.md5(open(filename, 'rb').read()).hexdigest()\n\n\ndef sha1_hash(filename):\n    \"\"\"\n    Given a filename, returns its sha1 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> sha1_hash('test.txt') == '9b9e9e6c6d8a0f8c8d4a3e9f1f9a2c7f5b6f0b8a1b7a9f9b9e9e6c6d8a0f8c8d4a3e9f1f9a2c7f5b6f0b8a1b7a9f9b9e9e6c6d8a0f8c8d4a3e9f1f9a2c7f5b6f0b8a1b7a9f9b9e9e6c6d8a0f8c8d4a3e9f1f9a2c7f5b6f0b8a1b7a9f9b9e9e6c6d8a0f8c8d4a3e",
      -5.1171875
    ],
    [
      "if text:\n        return md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n\n\ndef md5_string_to_hex(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent hex string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_string_to_hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text:\n        return hexlify(md5(text.encode('utf-8')).digest()).decode('utf-8')\n    else:\n        return None\n\n\ndef hash_to_string(hash_value):\n    \"\"\"\n    Given a string 'hash_value', return its md5 hash equivalent string.\n    If 'hash_value' is an empty string, return None.\n\n    >>> hash_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if hash_value:\n        return md5(hash_value.encode('utf-8')).hexdigest()\n    else:\n        return None\n\n\ndef get_md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> get_md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return string_to_md5(text)\n\n\ndef get_md5_hash_hex(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent hex string.\n    If 'text' is an empty string, return None.\n\n    >>> get_md5_hash_hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return md5_string_to_hex(text)\n\n\ndef get_md5_hash_string(text):\n    \"\"\"\n    Given a string 'text', return its",
      -5.234375
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(hash):\n    \"\"\"\n    Given an md5 hash 'hash', return its string equivalent.\n    If 'hash' is None, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not hash:\n        return None\n    return hashlib.md5(hash).hexdigest()\n\n\ndef file_to_string(filename):\n    \"\"\"\n    Given a filename 'filename', return its string equivalent.\n    If 'filename' is an empty string, return None.\n\n    >>> file_to_string('foo') == 'foo'\n    \"\"\"\n    if not filename:\n        return None\n    with open(filename, 'r') as f:\n        return f.read()\n\n\ndef string_to_file(text, filename):\n    \"\"\"\n    Given a string 'text' and a filename 'filename', write 'text' to 'filename'.\n\n    >>> string_to_file('foo', 'bar') == 'foo'\n    \"\"\"\n    if not filename:\n        return None\n    with open(filename, 'w') as f:\n        f.write(text)\n\n\ndef string_to_file_lines(text, filename):\n    \"\"\"\n    Given a string 'text' and a filename 'filename', write 'text' to 'filename'\n    and return a list of the lines in the file.\n\n    >>> string_to_file_lines('foo\\nbar\\nbaz\\n', 'bar') == ['foo', 'bar', 'baz']\n    \"\"\"\n    if not filename:\n        return None\n    with open(filename, 'w') as f:\n        f.write(text)\n    with open(filename, 'r') as f:\n        return [line for line in f]\n\n\ndef string_to_lines(text, delimiter=None):\n    \"\"\"\n    Given a string 'text', return a list of the lines in the string.\n    If 'delimiter' is not None, split the string on 'delimiter', returning",
      -5.25
    ],
    [
      "if text:\n        text = text.encode('utf-8')\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'a49b36a2b5a2b4b36a5d39e4d5a4b458b0fd64d'\n    \"\"\"\n    if text:\n        text = text.encode('utf-8')\n        return hashlib.sha1(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'd4a44b7b8f95b2ff6d09a8a7a8a4a5a3ad0c3d8'\n    \"\"\"\n    if text:\n        text = text.encode('utf-8')\n        return hashlib.sha256(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'f3b8a7f1d5b3e0f1c7e9b492782a5f89c6f85c7c6c38c1a5e3f8b8c2e7a7fc6'\n    \"\"\"\n    if text:\n        text = text.encode('utf-8')\n        return hashlib.sha512(text).hexdigest()\n    else:\n        return None\n\n\ndef string_to_sha3_256(text):\n    \"\"\"\n    Given a string 'text', return its sha3-256 hash",
      -5.9609375
    ],
    [
      "if not text:\n        return None\n    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_string_to_dict(string):\n    \"\"\"\n    Given a md5 hash string'string', return a dict of the key/value pairs\n    in that string.\n    If'string' is None, return None.\n\n    >>> md5_string_to_dict('3e25960a79dbc69b674cd4ec67a72c62') == {\n   ...     'file': 'foo.py',\n   ...     'hash': '3e25960a79dbc69b674cd4ec67a72c62'\n   ... }\n    \"\"\"\n    if not string:\n        return None\n    d = {}\n    for line in string.splitlines():\n        try:\n            key, value = line.split(':')\n        except ValueError:\n            continue\n        key = key.strip()\n        value = value.strip()\n        d[key] = value\n    return d\n\n\ndef dict_to_md5(d):\n    \"\"\"\n    Given a dict 'd', return its md5 hash equivalent string.\n    If 'd' is None, return None.\n\n    >>> dict_to_md5({'file': 'foo.py', 'hash': '3e25960a79dbc69b674cd4ec67a72c62'}) == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not d:\n        return None\n    text = ''\n    for key, value in d.items():\n        text += key + ':' + value + '\\n'\n    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n\n\ndef dict_to_string(d):\n    \"\"\"\n    Given a dict 'd', return its md5 hash equivalent string.\n    If 'd' is None, return None.\n\n    >>> dict_to_string({'file': 'foo.py', 'hash': '3e25960a79dbc69b674cd4ec67a72c",
      -5.96484375
    ],
    [
      "if not text:\n        return None\n    try:\n        import hashlib\n        hasher = hashlib.md5(text.encode('utf-8'))\n        return hasher.hexdigest()\n    except ImportError:\n        return None\n\ndef md5_string_to_hex(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent hex string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_string_to_hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    try:\n        import hashlib\n        hasher = hashlib.md5(text.encode('utf-8'))\n        return hasher.hexdigest()\n    except ImportError:\n        return None\n\ndef md5_string_to_hex_list(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent hex list.\n    If 'text' is an empty string, return None.\n\n    >>> md5_string_to_hex_list('Hello world') == [\n   ...     '3e25960a79dbc69b674cd4ec67a72c62',\n   ...     '4d58d7d4e3af9f8f6c4e3a5d8a8b0b2',\n   ...     'a1c6d1f7d0c9a9c9f9b3f6f4b3a3f4',\n   ...     'a2c7d1f7d0c9a9c9f9b3f6f4b3a3f4']\n    \"\"\"\n    if not text:\n        return None\n    try:\n        import hashlib\n        hasher = hashlib.md5(text.encode('utf-8'))\n        return hasher.hexdigest()\n    except ImportError:\n        return None\n\ndef md5_hex_list_to_string(hex_list):\n    \"\"\"\n    Given a list of hex strings, return the md5 hash of each one.",
      -6.12109375
    ],
    [
      "if text == '':\n        return None\n    else:\n        return md5(text).hexdigest()\n\n\ndef md5_file(filename):\n    \"\"\"\n    Given a filepath 'filename', return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_file('tests/fixtures/test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if filename == '':\n        return None\n    else:\n        return md5(open(filename, 'rb').read()).hexdigest()\n\n\ndef file_md5(filename):\n    \"\"\"\n    Given a filepath 'filename', return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> file_md5('tests/fixtures/test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if filename == '':\n        return None\n    else:\n        return file_md5(filename)\n\n\ndef string_to_base64(text):\n    \"\"\"\n    Given a string 'text', return its base64 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_base64('Hello world') == 'dXJuOmFkaW9ia2Rlc3Q='\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        return base64.b64encode(text.encode('utf-8')).decode('utf-8')\n\n\ndef base64_file(filename):\n    \"\"\"\n    Given a filepath 'filename', return its base64 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> base64_file('tests/fixtures/test.txt') == 'dXJuOmFkaW9ia2Rlc3Q='\n    \"\"\"\n    if filename == '':\n        return None\n    else:\n        return base64_file(filename)\n\n\ndef file_to_base64(filename):\n    \"\"\"\n    Given a filepath 'filename', return",
      -6.30859375
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '9a0a1a1b9b1a1b3e4d1a1b9b1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3e4d1a1b9b1a1b3",
      -6.33984375
    ],
    [
      "if not text:\n        return None\n\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '2cac0b7f2a8a8f0d8f4d9f48e8c2c8a3b1c3b1d58e37e5f5b6c6fba0d3d8c5b8e4b5a0d4b5b3b5f5b6c5b7a0d4b7a4b6a5b7a4b5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5b6a5b7a5",
      -6.62109375
    ],
    [
      "if text:\n        return md5(text).hexdigest()\n    else:\n        return None\n\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given an md5 hash, return its string equivalent.\n    If'md5_hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if md5_hash:\n        return md5_hash\n    else:\n        return None\n\ndef md5_hash_to_string(md5_hash):\n    \"\"\"\n    Given an md5 hash, return its string equivalent.\n    If'md5_hash' is an empty string, return None.\n\n    >>> md5_hash_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if md5_hash:\n        return md5_hash\n    else:\n        return None\n\ndef get_md5_hash(file_path):\n    \"\"\"\n    Given a file path, return its md5 hash equivalent.\n    If 'file_path' is an empty string, return None.\n\n    >>> get_md5_hash('/tmp/test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if file_path:\n        return md5(open(file_path, 'rb').read()).hexdigest()\n    else:\n        return None\n\ndef get_md5_hash_from_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> get_md5_hash_from_string('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text:\n        return md5(text).hexdigest()\n    else:\n        return None\n\ndef get_md5_hash_from_file(file_path):\n    \"\"\"\n    Given a",
      -6.96875
    ],
    [
      "if not text:\n        return None\n    return md5(text).hexdigest()\n\n\ndef md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return md5(text).hexdigest()\n\n\ndef md5_hash_file(filename):\n    \"\"\"\n    Given a filename, return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_hash_file('hello.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:\n        return None\n    with open(filename, 'rb') as f:\n        text = f.read()\n    return md5_hash(text)\n\n\ndef md5_hash_file_line(filename, lineno):\n    \"\"\"\n    Given a filename and line number, return the md5 hash equivalent string\n    for the line of the file at that position.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_hash_file_line('hello.txt', 1) == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:\n        return None\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    return md5_hash(lines[lineno-1])\n\n\ndef md5_hash_file_line_bytes(filename, lineno):\n    \"\"\"\n    Given a filename and line number, return the md5 hash equivalent string\n    for the line of the file at that position.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_hash_file_line_bytes('hello.txt', 1) == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:",
      -7.5625
    ],
    [
      "if text is None:\n        return None\n    if isinstance(text, six.text_type):\n        text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n\n\ndef md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    return string_to_md5(text)\n\n\ndef hash_to_string(text):\n    \"\"\"\n    Given a string 'text', return its hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> hash_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if text is None:\n        return None\n    if isinstance(text, six.text_type):\n        text = text.encode('utf-8')\n    return md5_hash(text).decode('utf-8')\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '6b1d3c8dd8a1d48e2f1d6e8d2c0a5c9d2e5e5b58d2d7e3f6c3e5b4c7e2d4e6f6d2d3e7d4e5b6d6d5e7e6d7e7d6d7e7e6d7e7e7e6d7e7e6d7e7e6d7e6d7e6d7e6d7e6d7e6d7e6d7e6d7e6d7e6d7e6d7e6d7e6d7e6d7e6d7e6d",
      -7.7890625
    ],
    [
      "if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n\n\ndef md5_hash(file_to_hash):\n    \"\"\"\n    Given a file object, return its md5 hash equivalent string.\n    If 'file_to_hash' is an empty string, return None.\n\n    >>> md5_hash(open(__file__, 'r')) == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not file_to_hash:\n        return None\n    m = hashlib.md5()\n    while True:\n        data = file_to_hash.read(32 * 1024)\n        if not data:\n            break\n        m.update(data)\n    return m.hexdigest()\n\n\ndef md5_hash_file(file_to_hash):\n    \"\"\"\n    Given a file object, return its md5 hash equivalent string.\n    If 'file_to_hash' is an empty string, return None.\n\n    >>> md5_hash_file(open(__file__, 'r')) == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not file_to_hash:\n        return None\n    m = hashlib.md5()\n    while True:\n        data = file_to_hash.read(32 * 1024)\n        if not data:\n            break\n        m.update(data)\n    return m.hexdigest()\n\n\ndef get_file_hash(file_to_hash):\n    \"\"\"\n    Given a file object, return its md5 hash equivalent string.\n    If 'file_to_hash' is an empty string, return None.\n\n    >>> get_file_hash(open(__file__, 'r')) == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not file_to_hash:\n        return None\n    m = hashlib.md5()\n    while True:\n        data = file_to_hash.read(",
      -8.171875
    ],
    [
      "if text == '':\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n\n\ndef md5_to_string(hash):\n    \"\"\"\n    Given an md5 hash 'hash', return its string equivalent.\n    If 'hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if hash == '':\n        return None\n    else:\n        return hashlib.md5(hash).hexdigest()\n\n\ndef hex_to_string(hex):\n    \"\"\"\n    Given a hex string 'hex', return its string equivalent.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if hex == '':\n        return None\n    else:\n        return hex\n\n\ndef string_to_hex(text):\n    \"\"\"\n    Given a string 'text', return its hex hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n\n\ndef hex_to_string(hash):\n    \"\"\"\n    Given an hex hash 'hash', return its string equivalent.\n    If 'hash' is an empty string, return None.\n\n    >>> hex_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if hash == '':\n        return None\n    else:\n        return hashlib.md5(hash).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha",
      -8.5390625
    ],
    [
      "if text == '':\n        return None\n    else:\n        return md5(text).hexdigest()\n\n\ndef md5sum_file(path):\n    \"\"\"\n    Given a file 'path', return its md5 hash equivalent string.\n    If 'path' is an empty string, return None.\n\n    >>> md5sum_file('/tmp/test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if path == '':\n        return None\n    else:\n        return md5(open(path, 'rb').read()).hexdigest()\n\n\ndef md5sum_file_old(path):\n    \"\"\"\n    Given a file 'path', return its md5 hash equivalent string.\n    If 'path' is an empty string, return None.\n\n    >>> md5sum_file_old('/tmp/test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if path == '':\n        return None\n    else:\n        return md5(open(path, 'rb').read()).digest()\n\n\ndef md5sum_dir(path):\n    \"\"\"\n    Given a directory 'path', return its md5 hash equivalent string.\n    If 'path' is an empty string, return None.\n\n    >>> md5sum_dir('/tmp/test') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if path == '':\n        return None\n    else:\n        return md5(open('%s/%s' % (path, md5sum_file(path))).read()).hexdigest()\n\n\ndef md5sum_dir_old(path):\n    \"\"\"\n    Given a directory 'path', return its md5 hash equivalent string.\n    If 'path' is an empty string, return None.\n\n    >>> md5sum_dir_old('/tmp/test') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if path == '':\n        return None\n    else:\n        return md5(open('%",
      -8.65625
    ],
    [
      "if not text:\n        return None\n    return md5(text).hexdigest()\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '4e3ddd0a1a79a0e3c8b6b5de8a9e4d8a9baf9b1d6f3d6f1d5a0c6f2bef7'\n    \"\"\"\n    if not text:\n        return None\n    return sha1(text).hexdigest()\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'eb5d0a9c4a9b9c9cfc9063a9a6c9b7a9b4d5d3f928892d88ecc0b6ccb7a6'\n    \"\"\"\n    if not text:\n        return None\n    return sha256(text).hexdigest()\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff'\n    \"\"\"\n    if not text:\n        return None\n    return sha512(text).hexdigest()\n\ndef string_to_hex(text):\n    \"\"\"\n    Given a string 'text', return its hexadecimal hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_hex('Hello world') == '1f8b083ef2a96517e5b9f6dee6e9d4f2'\n    \"\"\"\n    if not",
      -8.9375
    ],
    [
      "if not text:\n        return None\n\n    return hashlib.md5(text).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'e4c9f9a3c2ce0c6f4c6b0a9d3e16e898a6d0a5b2c6d9b917f3c7a8e5fcb8a7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3c7a8e5fcb917f3",
      -9.359375
    ],
    [
      "if text == '':\n        return None\n\n    # Python 2.4.2's md5 does not handle unicode strings\n    # (and it's broken on Windows as well).\n    if sys.version_info[0] == 2 and sys.version_info[1] < 5:\n        text = text.encode('utf-8')\n\n    hash = hashlib.md5(text)\n    return hash.hexdigest()\n\n\ndef md5_checksum(filename):\n    \"\"\"\n    Return the md5 checksum of the given file.\n\n    >>> md5_checksum('test.txt') == '2e7c7a5a3c9f1e9a0b3c2f5b979a87e'\n    \"\"\"\n    with open(filename, 'rb') as f:\n        return string_to_md5(f.read())\n\n\ndef file_to_md5(filename):\n    \"\"\"\n    Given a filename, return its md5 hash equivalent string.\n    If 'filename' is an empty string, return None.\n\n    >>> file_to_md5('test.txt') == '2e7c7a5a3c9f1e9a0b3c2f5b979a87e'\n    \"\"\"\n    if filename == '':\n        return None\n\n    return md5_checksum(filename)\n\n\ndef md5_digest(filename):\n    \"\"\"\n    Return the md5 digest of the given file.\n\n    >>> md5_digest('test.txt') == '2e7c7a5a3c9f1e9a0b3c2f5b979a87e'\n    \"\"\"\n    return md5_checksum(filename)\n\n\ndef file_digest(filename):\n    \"\"\"\n    Given a filename, return its md5 digest string.\n    If 'filename' is an empty string, return None.\n\n    >>> file_digest('test.txt') == '2e7c7a5a3c9f1e9a0b3c2f5b979a87e'\n    \"\"\"\n    if filename == '':\n        return None\n\n    return md5_digest(filename)",
      -9.5078125
    ],
    [
      "if not text:\n        return None\n    m = md5.new()\n    m.update(text.encode('utf8'))\n    return m.hexdigest()\n\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given an md5 hash, return its string representation.\n    If'md5_hash' is None, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5_hash:\n        return None\n    return md5_hash.decode('utf8').rstrip('\\n')\n\ndef md5_to_hex(md5_hash):\n    \"\"\"\n    Given an md5 hash, return its hex hash equivalent string.\n    If'md5_hash' is None, return None.\n\n    >>> md5_to_hex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5_hash:\n        return None\n    return md5_hash.hexdigest()\n\ndef string_to_hex(text):\n    \"\"\"\n    Given a string 'text', return its hex hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return md5_to_hex(string_to_md5(text))\n\ndef md5_to_base64(md5_hash):\n    \"\"\"\n    Given an md5 hash, return its base64 hash equivalent string.\n    If'md5_hash' is None, return None.\n\n    >>> md5_to_base64('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5_hash:",
      -11.8125
    ],
    [
      "if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n\ndef md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n\ndef md5_hash_file(filename):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash_file('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    with open(filename, 'rb') as f:\n        text = f.read()\n    return md5_hash(text)\n\ndef md5_hash_file_lines(filename):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash_file_lines('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    with open(filename, 'rb') as f:\n        text = f.readlines()\n    return md5_hash(text)\n\ndef md5_hash_file_lines_utf8(filename):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_hash_file_lines_utf8('test.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    with open(filename, 'rb') as f:\n        text = f.readlines()\n    return md5_hash_file_lines",
      -12.46875
    ],
    [
      "if not text:\n        return None\n    m = md5.new()\n    m.update(text)\n    return m.hexdigest()\n\ndef md5_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent byte array.\n    If 'text' is an empty string, return None.\n\n    >>> md5_string('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    m = md5.new()\n    m.update(text)\n    return m.digest()\n\ndef md5_file(filename):\n    \"\"\"\n    Given a file 'filename', return its md5 hash equivalent byte array.\n    If 'filename' is an empty string, return None.\n\n    >>> md5_file('foo.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not filename:\n        return None\n    m = md5.new()\n    f = open(filename, 'rb')\n    try:\n        while True:\n            buf = f.read(8192)\n            if not buf:\n                break\n            m.update(buf)\n    finally:\n        f.close()\n    return m.digest()\n\ndef md5_stream(stream):\n    \"\"\"\n    Given a file-like'stream', return its md5 hash equivalent byte array.\n    If'stream' is an empty string, return None.\n\n    >>> md5_stream(sys.stdin) == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not stream:\n        return None\n    m = md5.new()\n    while True:\n        buf = stream.read(8192)\n        if not buf:\n            break\n        m.update(buf)\n    return m.digest()\n\ndef md5_stream_file(stream, filename):\n    \"\"\"\n    Given a file-like'stream' and a file 'filename', return the md5 hash\n    equivalent byte array.\n    If'stream'",
      -12.6015625
    ],
    [
      "if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef md5_to_string(md5):\n    \"\"\"\n    Given an md5 hash, return its string equivalent.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not md5:\n        return None\n    return hashlib.md5(md5.decode('utf-8')).hexdigest()\n\n\ndef md5_to_hex(md5):\n    \"\"\"\n    Given an md5 hash, return its hexadecimal equivalent.\n    If'md5' is an empty string, return None.\n\n    >>> md5_to_hex('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not md5:\n        return None\n    return hashlib.md5(md5.decode('utf-8')).hexdigest()\n\n\ndef hex_to_md5(hex):\n    \"\"\"\n    Given a hexadecimal md5 hash, return its string equivalent.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_to_md5('3e25960a79dbc69b674cd4ec67a72c62') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not hex:\n        return None\n    return hashlib.md5(hex.decode('utf-8')).hexdigest()\n\n\ndef hex_to_string(hex):\n    \"\"\"\n    Given a hexadecimal md5 hash, return its string equivalent.\n    If 'hex' is an empty string, return None.\n\n    >>> hex_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n    if not hex:\n        return None",
      -14.1171875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}