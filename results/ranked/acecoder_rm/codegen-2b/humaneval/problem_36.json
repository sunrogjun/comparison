{
  "problem": {
    "task_id": "HumanEval/36",
    "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
    "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n",
    "entry_point": "fizz_buzz",
    "docstring": "",
    "problem_id": 36
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return sum(map(lambda x: x % 11 == 7 and x % 13 == 0, range(1, n + 1)))\n\n\ndef fizz_buzz_prime(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13 and are also prime.\n    >>> fizz_buzz_prime(50)\n    0\n    >>> fizz_buzz_prime(78)\n    2\n    >>> fizz_buzz_prime(79)\n    3\n    \"\"\"\n    return sum(map(lambda x: x % 11 == 7 and x % 13 == 0 and is_prime(x), range(1, n + 1)))\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\"Return True if n is a palindrome, False otherwise.\n    >>> is_palindrome(5)\n    False\n    >>> is_palindrome(6)\n    False\n    >>> is_palindrome(7)\n    True\n    >>> is_palindrome(8)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef is_palindrome_prime(n: int) -> bool:\n    \"\"\"Return True if n is a palindrome prime, False otherwise.\n    >>> is_palindrome_prime(5)\n    False\n    >>> is_palindrome_prime(6)\n    False\n    >>> is_palindrome_prime(7)\n    True",
      3.181640625
    ],
    [
      "# TODO: write a more efficient solution\n    return sum(map(lambda x: x % 10 == 7 and x % 11 == 0, range(1, n+1)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      2.453125
    ],
    [
      "return sum(1 for x in range(1, n) if x % 11 == 7 and x % 13 == 0)",
      1.4404296875
    ],
    [
      "count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            count += 1\n        if i % 13 == 7:\n            count += 1\n    return count\n\ndef is_fizz_buzz(n: int):\n    \"\"\"Return True if the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13 is equal to the number of times the digit 7 appears in integers less than n which are divisible by 7.\n    >>> is_fizz_buzz(50)\n    False\n    >>> is_fizz_buzz(78)\n    False\n    >>> is_fizz_buzz(79)\n    True\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            count += 1\n        if i % 13 == 7:\n            count += 1\n        if i % 7 == 7:\n            count += 1\n    return count == fizz_buzz(n)",
      0.80029296875
    ],
    [
      "count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.5791015625
    ],
    [
      "return sum(1 for x in range(1, n) if x % 11 == 7 and x % 13 == 0)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.435302734375
    ],
    [
      "return sum(x % 11 == 7 and x % 13 == 0 for x in range(1, n+1) if x % 11 == 0 or x % 13 == 0)\n\n\ndef is_bravo(n: int):\n    \"\"\"Return true if n is divisible by 11 and 13 and is not divisible by 23.\n    >>> is_bravo(78)\n    True\n    >>> is_bravo(79)\n    False\n    >>> is_bravo(80)\n    True\n    \"\"\"\n    return n % 23 == 0 and n % 11 == 0 and n % 13 == 0\n\n\ndef fizz_buzz_c(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_c(50)\n    0\n    >>> fizz_buzz_c(78)\n    2\n    >>> fizz_buzz_c(79)\n    3\n    \"\"\"\n    return sum(x % 11 == 7 and x % 13 == 0 for x in range(1, n+1) if x % 11 == 0 or x % 13 == 0)\n\n\ndef is_bravo_c(n: int):\n    \"\"\"Return true if n is divisible by 11 and 13 and is not divisible by 23.\n    >>> is_bravo_c(78)\n    True\n    >>> is_bravo_c(79)\n    False\n    >>> is_bravo_c(80)\n    True\n    \"\"\"\n    return n % 23 == 0 and n % 11 == 0 and n % 13 == 0\n\n\ndef fizz_buzz_d(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_d(50)\n    0\n    >>> fizz_buzz_d(78)\n    2\n    >>> fizz_buzz_d(79)\n    3\n    \"\"\"\n    return sum(x % 11 == 7 and x % 13 == 0 for x in range(1, n+1) if x % 11 == 0 or x % 13 == 0)",
      0.427001953125
    ],
    [
      "return sum(1 for x in range(1, n + 1) if x % 11 == 7 and x % 13 == 0)",
      0.2978515625
    ],
    [
      "count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.371337890625
    ],
    [
      "count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n    return count\n\n\ndef fizz_buzz_old(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_old(50)\n    0\n    >>> fizz_buzz_old(78)\n    2\n    >>> fizz_buzz_old(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count\n\n\ndef fizz_buzz_new(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_new(50)\n    0\n    >>> fizz_buzz_new(78)\n    2\n    >>> fizz_buzz_new(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.489501953125
    ],
    [
      "return sum([1 for n in range(1, n) if n % 7 == 1 and n % 11 == 0 or n % 13 == 0])\n\n\n# TODO: fizz_buzz\n\ndef fizz_buzz_2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50)\n    0\n    >>> fizz_buzz_2(78)\n    2\n    >>> fizz_buzz_2(79)\n    3\n    \"\"\"\n    return sum([1 for n in range(1, n) if n % 7 == 1 and n % 11 == 0 or n % 13 == 0])\n\n\n# TODO: fizz_buzz\n\ndef fizz_buzz_3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_3(50)\n    0\n    >>> fizz_buzz_3(78)\n    2\n    >>> fizz_buzz_3(79)\n    3\n    \"\"\"\n    return sum([1 for n in range(1, n) if n % 7 == 1 and n % 11 == 0 or n % 13 == 0])\n\n\n# TODO: fizz_buzz\n\ndef fizz_buzz_4(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_4(50)\n    0\n    >>> fizz_buzz_4(78)\n    2\n    >>> fizz_buzz_4(79)\n    3\n    \"\"\"\n    return sum([1 for n in range(1, n) if n % 7 == 1 and n % 11 == 0 or n % 13 == 0])\n\n\n# TODO: fizz_buzz\n\ndef fizz_buzz_5(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_5(50)\n    0",
      -0.492919921875
    ],
    [
      "result = 0\n    while n > 0:\n        if n % 10 == 7 or n % 11 == 7 or n % 13 == 7:\n            result += 1\n        n /= 10\n        n /= 10\n        n /= 10\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return sum(\n        [\n            1 if i % 11 == 7 or i % 13 == 7 else 0\n            for i in range(1, n + 1)\n        ]\n    )\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return sum(1 for i in range(1, n+1) if i % 11 == 7 or i % 13 == 7)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    #print(fizz_buzz(78))\n\n    n = int(input(\"Enter a number: \"))\n    print(fizz_buzz(n))",
      -0.85595703125
    ],
    [
      "res = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 and i % 13 == 0:\n            res += 1\n    return res\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return sum(1 for i in range(1, n+1) if i % 7 == 0 or i % 13 == 0)",
      -0.85693359375
    ],
    [
      "numbers = []\n    for i in range(1, n):\n        if i % 11 == 0:\n            numbers.append(i)\n        elif i % 13 == 0:\n            numbers.append(i)\n        else:\n            numbers.append(0)\n    return len(numbers)",
      -0.85693359375
    ],
    [
      "return sum(1 for i in range(1, n + 1) if i % 11 == 7 and i % 13 == 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return sum(\n        (fizz_buzz(i*10) for i in range(1, int(n/10)+1))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "count = 0\n    while n % 11 == 7 or n % 13 == 7:\n        count += 1\n        n //= 10\n    return count\n\n\ndef main():\n    print(fizz_buzz(78))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n    return count",
      -0.85693359375
    ],
    [
      "# TODO: implement this method\n    return 0",
      -0.85693359375
    ],
    [
      "return sum(int(n % i) == 7 for i in range(1, 11) if n % i == 0)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count",
      -0.85693359375
    ],
    [
      "count = 0\n    while n > 0:\n        if n % 11 == 7:\n            count += 1\n        if n % 13 == 11:\n            count += 1\n        n /= 10\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n < 10:\n        return 0\n    count = 0\n    for i in range(10, n, 10):\n        if i % 11 == 7:\n            count += 1\n        if i % 13 == 7:\n            count += 1\n    return count",
      -0.85791015625
    ],
    [
      "return sum(1 for n in range(1, n) if (n % 11 == 7) or (n % 13 == 7))\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "fizz = fizz_buzz(n // 10)\n    buzz = fizz_buzz(n % 10)\n    return fizz + buzz\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return sum(1 for i in range(1, n) if i % 11 == 7 and i % 13 == 0)\n\nprint(fizz_buzz(78))",
      -0.85791015625
    ],
    [
      "result = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            result += 1\n    return result\n\ndef fizz_buzz2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz2(50)\n    0\n    >>> fizz_buzz2(78)\n    2\n    >>> fizz_buzz2(79)\n    3\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            result += 1\n        if i % 7 == 0:\n            result += 1\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "result = 0\n    for i in range(1, n):\n        if i % 11 == 7:\n            result += 1\n        elif i % 13 == 7:\n            result += 2\n        else:\n            pass\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return sum(map(lambda x: x % 11 == 7 and x % 13 == 0, range(1, n+1)))",
      -0.8583984375
    ],
    [
      "# TODO: Implement fizz_buzz.\n    pass\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 11 == 0 or n % 13 == 0:\n        return fizz_buzz(n // 10) + 1\n    else:\n        return fizz_buzz(n // 10) + fizz_buzz(n // 13) + 1\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "n = int(n)\n    return sum(1 for x in range(1, n+1) if x % 11 == 7 and x % 13 == 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7 and i % 13 == 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "count = 0\n    while n > 0:\n        if n % 11 == 7:\n            count += 1\n        if n % 13 == 7:\n            count += 1\n        n //= 10\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum([1 if d == 7 else 0 for d in bin(n)[2:]])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(map(fizz_buzz_iter, range(1, n+1)))\n\n\ndef fizz_buzz_iter(x: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than x which are divisible by 11 or 13.\n    >>> fizz_buzz_iter(50)\n    0\n    >>> fizz_buzz_iter(78)\n    2\n    >>> fizz_buzz_iter(79)\n    3\n    \"\"\"\n    yield 0\n    yield 1\n    yield 1\n    yield 2\n    yield 3\n    for i in range(3, x+1, 3):\n        yield i\n    yield 7\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(i % 11 == 7 and i % 13 == 0 for i in range(1, n+1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "res = 0\n    for i in range(1, n + 1):\n        if 11 in i:\n            res += 1\n        if 13 in i:\n            res += 1\n        if 7 in i:\n            res += 1\n    return res\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "fizz_count = 0\n    buzz_count = 0\n\n    for i in range(1, n+1):\n        if i % 11 == 0:\n            fizz_count += 1\n        elif i % 13 == 0:\n            buzz_count += 1\n\n    return fizz_count + buzz_count\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(1 for x in range(1, n+1) if x % 11 == 7 and x % 13 == 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(1 for x in range(1, n+1) if x % 11 == 7 and x % 13 == 0)",
      -0.85888671875
    ],
    [
      "count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n        elif i % 11 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "if n < 10:\n        return 0\n    fizz = fizz_buzz(n // 10)\n    buzz = (n % 10) == 7\n    return fizz + buzz\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum([n % i for i in range(1, 7) if n % i == 7])\n\ndef fizz_buzz_old(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_old(50)\n    0\n    >>> fizz_buzz_old(78)\n    2\n    >>> fizz_buzz_old(79)\n    3\n    \"\"\"\n    return sum([n % i for i in range(1, 7) if n % i == 7]) + sum([n % i for i in range(11, 13) if n % i == 11])\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "count = 0\n    for i in range(1, n + 1):\n        if 11 * i % 13 == 7:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(1 for i in range(1, n + 1) if i % 11 == 7 and i % 13 == 0)",
      -0.85888671875
    ],
    [
      "return sum([1 for x in range(1, n) if x % 11 == 7 and x % 13 == 0])",
      -0.85888671875
    ],
    [
      "return sum(n % i == 7 for i in range(11, n + 1) if n % i == 0 or n % i == 13)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "fizz_buzz_sum = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            fizz_buzz_sum += 1\n    return fizz_buzz_sum\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(1 for x in range(1, n) if x % 11 == 7 and x % 13 == 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(n % i for i in range(11, n + 1, 11) if i % 13 == 0) + sum(n % i for i in range(13, n + 1, 13) if i % 11 == 0)\n\ndef fizz_buzz2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz2(50)\n    0\n    >>> fizz_buzz2(78)\n    2\n    >>> fizz_buzz2(79)\n    3\n    \"\"\"\n    return sum(n % i for i in range(11, n + 1, 11) if i % 13 == 0) + sum(n % i for i in range(13, n + 1, 13) if i % 11 == 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "return sum(1 for i in range(1, n + 1) if (i % 11 == 7 or i % 13 == 7))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "# TODO: write a recursive function\n    return 0",
      -0.85888671875
    ],
    [
      "return sum(1 for i in range(1, n+1) if i % 11 == 7 and i % 13 == 0)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.88916015625
    ],
    [
      "count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7 and i % 13 == 0:\n            count += 1\n    return count\n\ndef fizz_buzz_2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50)\n    0\n    >>> fizz_buzz_2(78)\n    2\n    >>> fizz_buzz_2(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7 and i % 13 == 0:\n            count += 1\n    return count\n\ndef fizz_buzz_3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_3(50)\n    0\n    >>> fizz_buzz_3(78)\n    2\n    >>> fizz_buzz_3(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7 and i % 13 == 0:\n            count += 1\n    return count\n\ndef fizz_buzz_4(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_4(50)\n    0\n    >>> fizz_buzz_4(78)\n    2\n    >>> fizz_buzz_4(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7 and i % 13 == 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.015625
    ],
    [
      "return sum([1 if i % 3 == 0 or i % 5 == 0 else 0 for i in range(1, n + 1)])\n\n\ndef fizz_buzz_list(n: int):\n    \"\"\"Return a list of the numbers which are divisible by 3 and 5, or 7, or 11, or 13, or 19, or 23, or 29, or 31, or 37.\n    >>> fizz_buzz_list(50)\n    []\n    >>> fizz_buzz_list(78)\n    [78]\n    >>> fizz_buzz_list(79)\n    [79, 131]\n    \"\"\"\n    return [i for i in range(1, n + 1) if i % 3 == 0 or i % 5 == 0 or i % 7 == 0 or i % 11 == 0 or i % 13 == 0 or i % 19 == 0 or i % 23 == 0 or i % 29 == 0 or i % 31 == 0 or i % 37 == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.251953125
    ],
    [
      "return sum(map(fizz_buzz_digit, range(1, n+1)))\n\ndef fizz_buzz_digit(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_digit(50)\n    0\n    >>> fizz_buzz_digit(78)\n    2\n    >>> fizz_buzz_digit(79)\n    3\n    \"\"\"\n    return sum(map(fizz_buzz_digit_digit, range(1, n+1)))\n\ndef fizz_buzz_digit_digit(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_digit_digit(50)\n    0\n    >>> fizz_buzz_digit_digit(78)\n    2\n    >>> fizz_buzz_digit_digit(79)\n    3\n    \"\"\"\n    return sum(map(fizz_buzz_digit_digit_digit, range(1, n+1)))\n\ndef fizz_buzz_digit_digit_digit(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_digit_digit_digit(50)\n    0\n    >>> fizz_buzz_digit_digit_digit(78)\n    2\n    >>> fizz_buzz_digit_digit_digit(79)\n    3\n    \"\"\"\n    return sum(map(fizz_buzz_digit_digit_digit_digit, range(1, n+1)))\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -1.279296875
    ],
    [
      "assert n > 0\n    return sum(int(x) for x in str(n) if x == \"7\")\n\n\ndef fizz_buzz2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz2(50)\n    0\n    >>> fizz_buzz2(78)\n    2\n    >>> fizz_buzz2(79)\n    3\n    \"\"\"\n    assert n > 0\n    return sum(x % 11 == 7 and x % 13 == 0 for x in range(n))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    print(\"\\n\".join((\"{0:.2f}\".format(timeit.timeit(\"fizz_buzz(10**6)\", setup=\"from __main__ import fizz_buzz\")) for _ in range(10))))\n    print(\"\\n\".join((\"{0:.2f}\".format(timeit.timeit(\"fizz_buzz2(10**6)\", setup=\"from __main__ import fizz_buzz2\")) for _ in range(10))))",
      -1.29296875
    ],
    [
      "return sum(1 for i in range(1, n + 1) if i % 11 == 7 and i % 13 == 0)\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    assert fizz_buzz(8) == 0, \"8\"\n    assert fizz_buzz(9) == 1, \"9\"\n    assert fizz_buzz(10) == 2, \"10\"\n    assert fizz_buzz(11) == 3, \"11\"\n    assert fizz_buzz(12) == 3, \"12\"\n    assert fizz_buzz(13) == 4, \"13\"\n    assert fizz_buzz(14) == 4, \"14\"\n    assert fizz_buzz(15) == 5, \"15\"\n    assert fizz_buzz(16) == 5, \"16\"\n    assert fizz_buzz(17) == 6, \"17\"\n    assert fizz_buzz(18) == 6, \"18\"\n    assert fizz_buzz(19) == 7, \"19\"\n    assert fizz_buzz(20) == 7, \"20\"\n    assert fizz_buzz(21) == 8, \"21\"\n    assert fizz_buzz(22) == 8, \"22\"\n    assert fizz_buzz(23) == 9, \"23\"\n    assert fizz_buzz(24) == 9, \"24\"\n    assert fizz_buzz(25) == 10, \"25\"\n    assert fizz_buzz(26) == 10, \"26\"\n    assert fizz_buzz(27) == 11, \"27\"\n    assert fizz_buzz(28) == 11, \"28\"\n    assert fizz_buzz(29) == 12, \"29\"\n    assert fizz_buzz(30) == 12, \"30\"\n    assert fizz_buzz(31) == 13, \"31\"\n    assert fizz_buzz(32) == 13, \"32\"\n    assert fizz_buzz(33) == 14, \"33\"\n    assert fizz_buzz(",
      -1.5634765625
    ],
    [
      "return sum(x % 11 == 7 for x in range(1, n+1) if x % 11 in [7, 11])\n\ndef fizz_buzz2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz2(50)\n    0\n    >>> fizz_buzz2(78)\n    2\n    >>> fizz_buzz2(79)\n    3\n    \"\"\"\n    return sum(x % 11 == 7 for x in range(1, n+1) if x % 13 == 7)\n\ndef fizz_buzz3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz3(50)\n    0\n    >>> fizz_buzz3(78)\n    2\n    >>> fizz_buzz3(79)\n    3\n    \"\"\"\n    return sum(x % 11 == 7 for x in range(1, n+1) if x % 11 == 7) + sum(x % 13 == 7 for x in range(1, n+1) if x % 13 == 7)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.7080078125
    ],
    [
      "# Assumes that we'll never have a value that is divisible by 11 or 13.\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n\ndef fizz_buzz_recursive(n: int):\n    \"\"\"Returns the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_recursive(50)\n    0\n    >>> fizz_buzz_recursive(78)\n    2\n    >>> fizz_buzz_recursive(79)\n    3\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 11 == 7 or n % 13 == 7:\n            count += 1\n        n /= 10\n    return count\n\ndef fizz_buzz_iterative(n: int):\n    \"\"\"Returns the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_iterative(50)\n    0\n    >>> fizz_buzz_iterative(78)\n    2\n    >>> fizz_buzz_iterative(79)\n    3\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 11 == 7 or n % 13 == 7:\n            count += 1\n        n //= 10\n    return count\n\ndef fizz_buzz_iterative_recursive(n: int):\n    \"\"\"Returns the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_iterative_recursive(50)\n    0\n    >>> fizz_buzz_iterative_recursive(78)\n    2\n    >>> fizz_buzz_iterative_recursive(79)\n    3\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 11 == 7 or n % 13 == 7:\n            count += 1\n        n //= 10\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.test",
      -1.75390625
    ],
    [
      "result = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            result += 1\n        if i % 13 == 7:\n            result += 1\n    return result\n\ndef fizz_buzz_recursive(n: int):\n    \"\"\"Recursive implementation of fizz_buzz.\n    >>> fizz_buzz_recursive(50)\n    0\n    >>> fizz_buzz_recursive(78)\n    2\n    >>> fizz_buzz_recursive(79)\n    3\n    \"\"\"\n    if n < 10:\n        return 0\n    elif n < 100:\n        return 1\n    else:\n        return 2 + fizz_buzz_recursive(n // 10) + fizz_buzz_recursive(n % 10)\n\ndef fizz_buzz_iterative(n: int):\n    \"\"\"Iterative implementation of fizz_buzz.\n    >>> fizz_buzz_iterative(50)\n    0\n    >>> fizz_buzz_iterative(78)\n    2\n    >>> fizz_buzz_iterative(79)\n    3\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            result += 1\n        if i % 13 == 7:\n            result += 1\n    return result\n\ndef fizz_buzz_vectorized(n: int):\n    \"\"\"Vectorized implementation of fizz_buzz.\n    >>> fizz_buzz_vectorized(50)\n    0\n    >>> fizz_buzz_vectorized(78)\n    2\n    >>> fizz_buzz_vectorized(79)\n    3\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            result += 1\n        if i % 13 == 7:\n            result += 1\n    return result\n\ndef fizz_buzz_generator(n: int):\n    \"\"\"Generator implementation of fizz_buzz.\n    >>> list(fizz_buzz_generator(50))\n    [0, 0]\n    >>>",
      -2.099609375
    ],
    [
      "count = 0\n    for i in range(n):\n        if i % 11 == 7:\n            count += 1\n        elif i % 13 == 7:\n            count += 2\n    return count\n\ndef fizz_buzz_iter(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_iter(50)\n    0\n    >>> fizz_buzz_iter(78)\n    2\n    >>> fizz_buzz_iter(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 7:\n            count += 1\n        elif i % 13 == 7:\n            count += 2\n    return count\n\ndef fizz_buzz_recursive(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_recursive(50)\n    0\n    >>> fizz_buzz_recursive(78)\n    2\n    >>> fizz_buzz_recursive(79)\n    3\n    \"\"\"\n    count = 0\n    if n < 10:\n        return 0\n    for i in range(n):\n        if i % 11 == 7:\n            count += 1\n        elif i % 13 == 7:\n            count += 2\n    return count\n\ndef fizz_buzz_recursive_iter(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_recursive_iter(50)\n    0\n    >>> fizz_buzz_recursive_iter(78)\n    2\n    >>> fizz_buzz_recursive_iter(79)\n    3\n    \"\"\"\n    count = 0\n    if n < 10:\n        return 0\n    for i in range(n):\n        if i % 11 == 7:\n            count += 1\n        elif i % 13 == 7:\n            count += 2\n    return count\n\nif __name__ == '__main__",
      -2.4140625
    ],
    [
      "return sum(1 for x in range(1, n+1) if x % 3 == 0 and x % 5 == 0)\n\ndef fizz_buzz_iter(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> list(fizz_buzz_iter(50))\n    []\n    >>> list(fizz_buzz_iter(78))\n    [2, 3]\n    >>> list(fizz_buzz_iter(79))\n    [3, 4]\n    \"\"\"\n    return list(1 for x in range(1, n+1) if x % 3 == 0 and x % 5 == 0)\n\ndef fizz_buzz_sorted(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_sorted(50)\n    0\n    >>> fizz_buzz_sorted(78)\n    2\n    >>> fizz_buzz_sorted(79)\n    3\n    \"\"\"\n    return sum(1 for x in range(1, n+1) if x % 3 == 0 and x % 5 == 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.98828125
    ],
    [
      "if n == 0: return 0\n    \n    # Count the number of times the digit 7 appears in the digits of the number n\n    # which are divisible by 11 or 13.\n    # The algorithm is similar to the one in the book \"Algorithms in C, Third Edition\" by Robert Sedgewick and Kevin Wayne\n    # (page 5)\n    # http://www.cs.princeton.edu/courses/archive/spr06/cos321/lectures/lecture09.html\n    # (We are using a binary search to find the smallest number that is divisible by 11 or 13)\n    \n    # This is the maximum value of n that we can consider\n    # (n is a non-negative integer)\n    max_n = (n - 1) // 10 * 10 + 1\n    # This is the smallest value of n that we can consider\n    # (n is a non-negative integer)\n    min_n = max_n - 9\n    \n    # The number of times the digit 7 appears in the digits of the number n\n    # which are divisible by 11 or 13.\n    n_buzz = 0\n    \n    while min_n < max_n:\n        # Find the smallest value of n that is divisible by 11 or 13\n        # (this value is guaranteed to be divisible by 11 or 13)\n        # (this is guaranteed to be a non-negative integer)\n        # (this is guaranteed to be smaller than the number of digits in n)\n        n_11_or_13 = min_n\n        \n        # Find the largest value of n that is divisible by 11 or 13\n        # (this is guaranteed to be a non-negative integer)\n        # (this is guaranteed to be smaller than the number of digits in n)\n        n_11_or_13 = max_n\n        \n        # Find the smallest value of n that is divisible by 11 or 13\n        # (this is guaranteed to be a non-negative integer)\n        # (this is guaranteed to be smaller than the number of digits in n)\n        min_n = n_11_or_13 - 9\n        \n        # Find the largest value of n that is divisible by 11 or 13\n        # (this is guaranteed to be",
      -2.990234375
    ],
    [
      "result = 0\n    while n > 0:\n        if n % 13 == 7:\n            result += 1\n        if n % 11 == 7:\n            result += 1\n        n //= 10\n    return result\n\ndef fizz_buzz2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 13 or 11.\n    >>> fizz_buzz2(50)\n    0\n    >>> fizz_buzz2(78)\n    2\n    >>> fizz_buzz2(79)\n    3\n    \"\"\"\n    result = 0\n    while n > 0:\n        if n % 13 == 7:\n            result += 1\n        if n % 11 == 7:\n            result += 1\n        n //= 10\n    return result\n\ndef fizz_buzz3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n    >>> fizz_buzz3(50)\n    0\n    >>> fizz_buzz3(78)\n    2\n    >>> fizz_buzz3(79)\n    3\n    \"\"\"\n    result = 0\n    while n > 0:\n        if n % 3 == 7:\n            result += 1\n        if n % 5 == 7:\n            result += 1\n        n //= 10\n    return result\n\ndef fizz_buzz4(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 15 or 25.\n    >>> fizz_buzz4(50)\n    0\n    >>> fizz_buzz4(78)\n    2\n    >>> fizz_buzz4(79)\n    3\n    \"\"\"\n    result = 0\n    while n > 0:\n        if n % 15 == 7:\n            result += 1\n        if n % 25 == 7:\n            result += 1\n        n //= 10\n    return result",
      -3.14453125
    ],
    [
      "if n < 10:\n        return 0\n    if n % 10 == 7:\n        return 1\n    if n % 11 == 7:\n        return 2\n    if n % 13 == 7:\n        return 3\n    if n % 11 == 13:\n        return 4\n    if n % 13 == 19:\n        return 5\n    return 6\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.197265625
    ],
    [
      "n = int(n)\n    count = 0\n    for i in range(2, n + 1):\n        if (i % 7 == 7) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count\n\n# Complete the fizzBuzz function below.\ndef fizz_buzz(n: int):\n    \"\"\"\n    :type n: int\n    :rtype: List[str]\n    \"\"\"\n    fizz_count = 0\n    buzz_count = 0\n    fizz_buzz_list = []\n    for i in range(2, n + 1):\n        if i % 15 == 0:\n            fizz_buzz_list.append('FizzBuzz')\n            fizz_count += 1\n        elif i % 5 == 0:\n            fizz_buzz_list.append('Buzz')\n            buzz_count += 1\n        else:\n            fizz_buzz_list.append('Fizz')\n            fizz_count += 1\n    fizz_buzz_list.append('Fizz')\n    fizz_buzz_list.append('Buzz')\n    fizz_buzz_list.append('Fizz')\n    fizz_buzz_list.append('Fizz')\n    fizz_buzz_list.append('Fizz')\n    return fizz_buzz_list\n\nif __name__ == '__main__':\n    import time\n\n    start_time = time.time()\n    test_cases = int(input().strip())\n\n    for t in range(test_cases):\n        n = int(input().strip())\n        print(\"Case #{}: {}\".format(t + 1, fizz_buzz(n)))\n    end_time = time.time()\n    print(\"Time elapsed: {}\".format(end_time - start_time))",
      -3.197265625
    ],
    [
      "return sum([1 for i in range(1, n+1) if is_fizzbuzz(i)])\n\n\ndef is_fizzbuzz(n: int):\n    \"\"\"Returns whether the number is a fizzbuzz number\n    >>> is_fizzbuzz(79)\n    True\n    >>> is_fizzbuzz(78)\n    False\n    \"\"\"\n    return (n % 15 == 7 and n % 5 == 3) or (n % 15 == 11 and n % 5 == 1)\n\n\ndef is_fizz_buzz(n: int):\n    \"\"\"Returns whether the number is a fizzbuzz number\n    >>> is_fizz_buzz(79)\n    True\n    >>> is_fizz_buzz(78)\n    False\n    \"\"\"\n    return (n % 15 == 7 and n % 5 == 3) or (n % 15 == 11 and n % 5 == 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.3515625
    ],
    [
      "count = 0\n    for i in range(1, n+1):\n        if (11 * i) % n == 7:\n            count += 1\n        if (13 * i) % n == 7:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -3.375
    ],
    [
      "return sum([0 if divisible(n, i) else 1 for i in range(1, 10)])\n\n\ndef divisible(n: int, d: int):\n    \"\"\"Return True if n is divisible by d, False otherwise.\n    >>> divisible(13, 7)\n    True\n    >>> divisible(13, 13)\n    True\n    >>> divisible(13, 14)\n    False\n    \"\"\"\n    return n % d == 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.583984375
    ],
    [
      "return sum(1 for digit in str(n) if digit == '7')\n\ndef fizz_buzz2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz2(50)\n    0\n    >>> fizz_buzz2(78)\n    2\n    >>> fizz_buzz2(79)\n    3\n    \"\"\"\n    return sum(1 for digit in str(n) if digit == '7') + sum(1 for digit in str(n) if digit == '5')\n\ndef fizz_buzz3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz3(50)\n    0\n    >>> fizz_buzz3(78)\n    2\n    >>> fizz_buzz3(79)\n    3\n    \"\"\"\n    return sum(1 for digit in str(n) if digit == '7') + sum(1 for digit in str(n) if digit == '5') + sum(1 for digit in str(n) if digit == '3')\n\ndef fizz_buzz4(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz4(50)\n    0\n    >>> fizz_buzz4(78)\n    2\n    >>> fizz_buzz4(79)\n    3\n    \"\"\"\n    return sum(1 for digit in str(n) if digit == '7') + sum(1 for digit in str(n) if digit == '5') + sum(1 for digit in str(n) if digit == '3') + sum(1 for digit in str(n) if digit == '1')\n\nif __name__ == '__main__':\n    import timeit\n    print(timeit.timeit(\"fizz_buzz(50)\", setup=\"from __main__ import fizz_buzz\", number=1))\n    print(timeit.timeit(\"fizz_buzz2(50)\",",
      -4.12109375
    ],
    [
      "return sum(1 for x in range(1, n + 1) if x % 11 == 7 and x % 13 == 0)\n\n\ndef fizz_buzz_2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50)\n    0\n    >>> fizz_buzz_2(78)\n    2\n    >>> fizz_buzz_2(79)\n    3\n    \"\"\"\n    return sum(1 for x in range(1, n + 1) if x % 11 == 7 and x % 13 == 0) + sum(1 for x in range(1, n + 1) if x % 11 == 13 and x % 13 == 0)\n\n\ndef fizz_buzz_3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_3(50)\n    0\n    >>> fizz_buzz_3(78)\n    2\n    >>> fizz_buzz_3(79)\n    3\n    \"\"\"\n    return sum(1 for x in range(1, n + 1) if x % 11 == 7 and x % 13 == 0) + sum(1 for x in range(1, n + 1) if x % 13 == 11 and x % 13 == 0)\n\n\ndef fizz_buzz_4(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_4(50)\n    0\n    >>> fizz_buzz_4(78)\n    2\n    >>> fizz_buzz_4(79)\n    3\n    \"\"\"\n    return sum(1 for x in range(1, n + 1) if x % 11 == 7 and x % 13 == 0) + sum(1 for x in range(1, n + 1) if x % 13 == 11 and x % 13 == 0)\n\n\ndef fizz_buzz_5(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which",
      -4.1640625
    ],
    [
      "count = 0\n    for x in range(1, n+1):\n        if x % 11 == 0 and x % 13 == 0:\n            count += 1\n    return count\n\ndef fizz_buzz(n):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for x in range(1, n+1):\n        if x % 11 == 0 and x % 13 == 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.31640625
    ],
    [
      "count = 0\n    while n > 0:\n        if n % 10 == 7:\n            count += 1\n        n //= 10\n    return count\n\ndef fizz_buzz_iter(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> list(fizz_buzz_iter(50))\n    []\n    >>> list(fizz_buzz_iter(78))\n    [2, 3]\n    >>> list(fizz_buzz_iter(79))\n    [2, 3, 4]\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 10 == 7:\n            count += 1\n        n //= 10\n    yield count\n    for i in range(1, 10):\n        for j in range(0, i):\n            yield count + j\n\ndef fizz_buzz_recursive(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_recursive(50)\n    0\n    >>> fizz_buzz_recursive(78)\n    2\n    >>> fizz_buzz_recursive(79)\n    3\n    \"\"\"\n    count = 0\n    if n < 10:\n        return 0\n    elif n % 10 == 7:\n        count = 1\n    else:\n        for i in range(1, 10):\n            if n % i == 7:\n                count += 1\n            if i == 10:\n                break\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.37109375
    ],
    [
      "if n < 11:\n        return 0\n    elif n < 100:\n        return 1\n    elif n < 1000:\n        return 2\n    elif n < 10000:\n        return 3\n    elif n < 100000:\n        return 4\n    elif n < 1000000:\n        return 5\n    elif n < 10000000:\n        return 6\n    elif n < 100000000:\n        return 7\n    else:\n        return 8\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    False\n    >>> is_prime(20)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_num(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime_num(2)\n    True\n    >>> is_prime_num(3)\n    True\n    >>> is_prime_num(4)\n    False\n    >>> is_prime_num",
      -4.53125
    ],
    [
      "if n < 7:\n        return 0\n    elif n % 11 == 0 and n % 13 == 0:\n        return 1\n    elif n % 11 == 7 and n % 13 == 0:\n        return 2\n    elif n % 11 == 7 and n % 13 == 1:\n        return 3\n    else:\n        return 0\n\ndef fizz_buzz_recursive(n: int):\n    if n < 7:\n        return 0\n    elif n % 11 == 0 and n % 13 == 0:\n        return 1\n    elif n % 11 == 7 and n % 13 == 0:\n        return 2\n    elif n % 11 == 7 and n % 13 == 1:\n        return 3\n    else:\n        return fizz_buzz_recursive(n // 3 * 3) + fizz_buzz_recursive(n // 3 * 3 + 1) + fizz_buzz_recursive(n // 3 * 3 + 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.58984375
    ],
    [
      "return sum(1 for digit in str(n) if digit == '7' and n % 11 == 0 or n % 13 == 0)\n\ndef fizz_buzz_iter(n: int):\n    \"\"\"Return an iterator which yields the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> list(fizz_buzz_iter(50))\n    []\n    >>> list(fizz_buzz_iter(78))\n    [2]\n    >>> list(fizz_buzz_iter(79))\n    [3, 3]\n    \"\"\"\n    for n in range(1, n + 1):\n        if n % 11 == 0 or n % 13 == 0:\n            yield fizz_buzz(n)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.91015625
    ],
    [
      "if n < 7:\n        return 0\n    elif n < 11:\n        return 1\n    elif n < 13:\n        return 2\n    else:\n        return 3\n\ndef get_first_five(n: int):\n    \"\"\"Returns the first five digits of n.\n    >>> get_first_five(78)\n    '789'\n    \"\"\"\n    return str(n)[:5]\n\ndef get_last_five(n: int):\n    \"\"\"Returns the last five digits of n.\n    >>> get_last_five(78)\n    '78'\n    \"\"\"\n    return str(n)[-5:]\n\ndef get_all_digits(n: int):\n    \"\"\"Returns all digits of n.\n    >>> get_all_digits(78)\n    '78'\n    \"\"\"\n    return str(n)\n\ndef get_first_five_and_last_five(n: int):\n    \"\"\"Returns the first five digits of n and the last five digits of n.\n    >>> get_first_five_and_last_five(78)\n    ('789', '78')\n    \"\"\"\n    return (get_first_five(n), get_last_five(n))\n\ndef get_all_digits_and_first_five(n: int):\n    \"\"\"Returns all digits of n and the first five digits of n.\n    >>> get_all_digits_and_first_five(78)\n    ('78', '789')\n    \"\"\"\n    return (get_all_digits(n), get_first_five(n))\n\ndef get_fizz_buzz_and_first_five(n: int):\n    \"\"\"Returns the fizz_buzz and first five digits of n.\n    >>> get_fizz_buzz_and_first_five(78)\n    ('78', '789', '789', '789', '789')\n    \"\"\"\n    return (get_fizz_buzz(n), get_first_five(n), get_first_five(n), get_first_five(n), get_first_five(n))\n\ndef get_fizz_buzz_and_all_digits(n:",
      -5.30859375
    ],
    [
      "count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\ndef fizz_buzz_test(n):\n    \"\"\"Test that fizz_buzz gives the correct answer for n.\"\"\"\n    count = fizz_buzz(n)\n    return count == n % 10\n\ndef fizz_buzz_test_2(n):\n    \"\"\"Test that fizz_buzz gives the correct answer for n.\"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count == n % 10\n\ndef fizz_buzz_test_3(n):\n    \"\"\"Test that fizz_buzz gives the correct answer for n.\"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n    return count == n % 10\n\nif __name__ == '__main__':\n    print('fizz_buzz(50) =', fizz_buzz(50))\n    print('fizz_buzz(78) =', fizz_buzz(78))\n    print('fizz_buzz(79) =', fizz_buzz(79))\n    print('fizz_buzz_test(50) =', fizz_buzz_test(50))\n    print('fizz_buzz_test(78) =', fizz_buzz_test(78))\n    print('fizz_buzz_test(79) =', fizz_buzz_test(79))\n    print('fizz_buzz_test_2(50) =', fizz_buzz_test_2(50))\n    print('fizz_buzz_test_2(78) =', fizz_buzz_test_2(78))\n    print('fizz_buzz_test_2(79) =', fizz_buzz_test_2(79))\n    print('fizz_buzz",
      -5.47265625
    ],
    [
      "count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7 and i % 13 == 0:\n            count += 1\n    return count\n\n\ndef count_divisors(n: int):\n    \"\"\"Return the number of divisors of n.\n    >>> count_divisors(1)\n    0\n    >>> count_divisors(2)\n    1\n    >>> count_divisors(3)\n    2\n    >>> count_divisors(4)\n    3\n    >>> count_divisors(5)\n    5\n    >>> count_divisors(6)\n    6\n    >>> count_divisors(7)\n    7\n    >>> count_divisors(8)\n    8\n    >>> count_divisors(9)\n    9\n    >>> count_divisors(10)\n    10\n    >>> count_divisors(11)\n    11\n    >>> count_divisors(12)\n    12\n    >>> count_divisors(13)\n    13\n    >>> count_divisors(14)\n    15\n    >>> count_divisors(15)\n    16\n    \"\"\"\n    divisors = 1\n    for i in range(1, n + 1):\n        if i % 10 == 0:\n            divisors += 1\n        elif i % 11 == 0:\n            divisors += 2\n        elif i % 13 == 0:\n            divisors += 3\n        else:\n            divisors += 1\n    return divisors\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)",
      -5.5
    ],
    [
      "return sum(x for x in range(1, n+1) if x % 11 == 7 and x % 13 == 0)\n\ndef fizz_buzz_sum(n: int):\n    \"\"\"Return the sum of the numbers of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_sum(50)\n    0\n    >>> fizz_buzz_sum(78)\n    2\n    >>> fizz_buzz_sum(79)\n    3\n    \"\"\"\n    return sum(x for x in range(1, n+1) if x % 11 == 7 and x % 13 == 0)\n\ndef fizz_buzz_fib(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_fib(50)\n    0\n    >>> fizz_buzz_fib(78)\n    2\n    >>> fizz_buzz_fib(79)\n    3\n    \"\"\"\n    return sum(x for x in range(1, n+1) if x % 11 == 7 and x % 13 == 0) + sum(x for x in range(1, n+1) if x % 11 == 7 and x % 13!= 0)\n\ndef fizz_buzz_fib_sum(n: int):\n    \"\"\"Return the sum of the numbers of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_fib_sum(50)\n    0\n    >>> fizz_buzz_fib_sum(78)\n    2\n    >>> fizz_buzz_fib_sum(79)\n    3\n    \"\"\"\n    return sum(x for x in range(1, n+1) if x % 11 == 7 and x % 13 == 0) + sum(x for x in range(1, n+1) if x % 11 == 7 and x % 13!= 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.70703125
    ],
    [
      "if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            count += 1\n            if i % 13 == 7:\n                count += 1\n    return count\n\ndef fizz_buzz_recursive(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_recursive(50)\n    0\n    >>> fizz_buzz_recursive(78)\n    2\n    >>> fizz_buzz_recursive(79)\n    3\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            count += 1\n            if i % 13 == 7:\n                count += 1\n        else:\n            count += fizz_buzz_recursive(i)\n    return count\n\ndef fizz_buzz_iterative(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_iterative(50)\n    0\n    >>> fizz_buzz_iterative(78)\n    2\n    >>> fizz_buzz_iterative(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            count += 1\n            if i % 13 == 7:\n                count += 1\n        else:\n            count += fizz_buzz_iterative(i)\n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.7890625
    ],
    [
      "count = 0\n    for i in range(1, n+1):\n        if divisible_by(i, 11) or divisible_by(i, 13):\n            count += 1\n    return count\n\n\ndef divisible_by(n: int, d: int):\n    \"\"\"Returns True if n is divisible by d, False otherwise.\n    >>> divisible_by(3, 2)\n    True\n    >>> divisible_by(7, 3)\n    False\n    \"\"\"\n    return n % d == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    for i in range(1, 100):\n        print(fizz_buzz(i))",
      -5.93359375
    ],
    [
      "# The number of times 7 appears in numbers less than n which are divisible by 11 or 13.\n    return sum(1 for n in range(1, n) if n % 11 == 7 or n % 13 == 7)\n\n# TODO: Implement the function below.\n# def lcm(a: int, b: int) -> int:\n#     \"\"\"Return the least common multiple of a and b.\n#     >>> lcm(6, 9)\n#     18\n#     >>> lcm(3, 7)\n#     21\n#     >>> lcm(10, 30)\n#     30\n#     >>> lcm(5, 7)\n#     21\n#     >>> lcm(5, 10)\n#     5\n#     >>> lcm(5, 15)\n#     15\n#     \"\"\"\n#     return a * b // gcd(a, b)\n\n# TODO: Implement the function below.\n# def gcd(a: int, b: int) -> int:\n#     \"\"\"Return the greatest common divisor of a and b.\n#     >>> gcd(6, 9)\n#     3\n#     >>> gcd(3, 7)\n#     1\n#     >>> gcd(10, 30)\n#     10\n#     >>> gcd(5, 7)\n#     5\n#     >>> gcd(5, 10)\n#     5\n#     >>> gcd(5, 15)\n#     5\n#     \"\"\"\n#     while b > 0:\n#         a, b = b, a % b\n#     return a\n\n# TODO: Implement the function below.\n# def lcm_divisible_by_x(n: int, x: int) -> int:\n#     \"\"\"Return the least common multiple of n and x.\n#     >>> lcm_divisible_by_x(78, 7)\n#     79\n#     >>> lcm_divisible_by_x(78, 13)\n#     78\n#     >>> lcm_divisible_by_x(78, 23)\n#     78\n#     >>> lcm_divisible_by_x(78, 37)\n#     37\n#     >>> lcm_divisible_by",
      -6.93359375
    ],
    [
      "# return sum(1 for x in range(1, n) if x % 3 == 0 or x % 5 == 0)\n    return sum(1 for x in range(1, n) if x % 3 == 0 and x % 5 == 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -7.64453125
    ],
    [
      "return sum(map(lambda i: i % 11 == 7 and i % 13 == 0, range(1, n+1)))\n\ndef fizz_buzz_sum(n: int):\n    \"\"\"Return the sum of the numbers of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_sum(50)\n    0\n    >>> fizz_buzz_sum(78)\n    2\n    >>> fizz_buzz_sum(79)\n    3\n    \"\"\"\n    return sum(map(lambda i: i % 11 == 7 and i % 13 == 0, range(1, n+1)))\n\ndef fizz_buzz_sum_recursive(n: int):\n    \"\"\"Return the sum of the numbers of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_sum_recursive(50)\n    0\n    >>> fizz_buzz_sum_recursive(78)\n    2\n    >>> fizz_buzz_sum_recursive(79)\n    3\n    \"\"\"\n    return fizz_buzz_sum_recursive(n-1) + fizz_buzz_sum_recursive(n)\n\ndef fizz_buzz_sum_iterative(n: int):\n    \"\"\"Return the sum of the numbers of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_sum_iterative(50)\n    0\n    >>> fizz_buzz_sum_iterative(78)\n    2\n    >>> fizz_buzz_sum_iterative(79)\n    3\n    \"\"\"\n    return sum(map(lambda i: i % 11 == 7 and i % 13 == 0, range(1, n+1)))\n\ndef fizz_buzz_sum_recursive_iterative(n: int):\n    \"\"\"Return the sum of the numbers of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_sum_recursive_iterative(50)\n    0\n    >>> fizz_buzz_sum",
      -7.9453125
    ],
    [
      "count = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\n\ndef is_fizzbuzz(n: int):\n    \"\"\"Return whether n is a fizzbuzz number.\n    >>> is_fizzbuzz(50)\n    False\n    >>> is_fizzbuzz(78)\n    True\n    >>> is_fizzbuzz(79)\n    False\n    \"\"\"\n    return fizz_buzz(n) == 3\n\n\ndef is_fizz_buzz(n: int):\n    \"\"\"Return whether n is a fizzbuzz number.\n    >>> is_fizz_buzz(50)\n    False\n    >>> is_fizz_buzz(78)\n    False\n    >>> is_fizz_buzz(79)\n    True\n    \"\"\"\n    return fizz_buzz(n) == 2\n\n\ndef is_fizzbuzz2(n: int):\n    \"\"\"Return whether n is a fizzbuzz number.\n    >>> is_fizzbuzz2(50)\n    False\n    >>> is_fizzbuzz2(78)\n    False\n    >>> is_fizzbuzz2(79)\n    False\n    \"\"\"\n    return fizz_buzz(n) == 2 and fizz_buzz(n) == 1\n\n\ndef is_fizz_buzz2(n: int):\n    \"\"\"Return whether n is a fizzbuzz number.\n    >>> is_fizz_buzz2(50)\n    False\n    >>> is_fizz_buzz2(78)\n    False\n    >>> is_fizz_buzz2(79)\n    False\n    \"\"\"\n    return fizz_buzz(n) == 2 and fizz_buzz(n) == 1 and fizz_buzz(n) == 0\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -8.21875
    ],
    [
      "return sum(fizz_buzz(i) for i in range(1, n + 1) if i % 11 == 7 or i % 13 == 7)\n\n# https://leetcode.com/problems/fizz-buzz/discuss/118728/Python-DP-Solutions-using-recursion-and-memoization\ndef fizz_buzz_recur(n: int):\n    \"\"\"\n    >>> fizz_buzz_recur(50)\n    0\n    >>> fizz_buzz_recur(78)\n    2\n    >>> fizz_buzz_recur(79)\n    3\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 15 == 0:\n        return 1\n    elif n % 3 == 0:\n        return 2\n    else:\n        return fizz_buzz_recur(n - 1) + fizz_buzz_recur(n - 2)\n\n# https://leetcode.com/problems/fizz-buzz/discuss/118728/Python-DP-Solutions-using-recursion-and-memoization\ndef fizz_buzz_recur_memo(n: int):\n    \"\"\"\n    >>> fizz_buzz_recur_memo(50)\n    0\n    >>> fizz_buzz_recur_memo(78)\n    2\n    >>> fizz_buzz_recur_memo(79)\n    3\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 15 == 0:\n        return 1\n    elif n % 3 == 0:\n        return 2\n    else:\n        if n % 5 == 0:\n            return 3\n        else:\n            return fizz_buzz_recur_memo(n - 1) + fizz_buzz_recur_memo(n - 2)\n\n# https://leetcode.com/problems/fizz-buzz/discuss/118728/Python-DP-Solutions-using-recursion-",
      -8.625
    ],
    [
      "return sum(int(n % 11 == 7) for n in range(1, n + 1) if n % 11 in (11, 13))\n\n\ndef fizz_buzz_solution(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_solution(50)\n    0\n    >>> fizz_buzz_solution(78)\n    2\n    >>> fizz_buzz_solution(79)\n    3\n    \"\"\"\n    return sum(fizz_buzz(n) for n in range(1, n + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -8.8671875
    ],
    [
      "return sum(\n        (\n            1 if n % 11 == 7 and n % 13 == 0 else\n            0 if n % 11 == 7 else\n            0 if n % 13 == 0 else\n            0\n        )\n        for n in range(1, n + 1)\n    )\n\n\ndef fizz_buzz_sieve(n: int):\n    \"\"\"Generate a sieve of the fizz and buzz numbers between 0 and n.\n    >>> fizz_buzz_sieve(50)\n    [0, 1, 3, 7, 13, 29, 61, 127, 251, 543, 1087, 2081, 4033, 8209, 16439, 33279, 65789, 121467,\n    245741, 491623, 983103, 1897161, 3811287, 7549721, 15245977, 31882923, 63151687, 125829109,\n    251658657, 50331653, 100663319, 196699161, 393489969, 793719929, 1576901361, 3175995087,\n    6377609311, 12777030489, 26559970561, 53579557627, 104729142577, 209186945509, 419096048863,\n    827189536369, 1646991523897, 352729741741, 724594389977, 146768803777, 296638689939, 633746769279,\n    1246307726987, 2509978441961, 5073604877479, 10073934953627, 19615203829141, 39383589754879,\n    78776975502579, 158665070642789, 317599508760697, 637760931159331, 125166928157633, 265599705619641,\n    535795576277963, 1047291425772779, 209186945509871, 419096048863961, 8271895363691671,\n    16469915238973761, 3527297417409941,",
      -9.03125
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 11 == 7 or n % 13 == 11:\n        return fizz_buzz(n - 1)\n    return fizz_buzz(n // 2) + fizz_buzz(n // 3)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    try:\n        while True:\n            n = int(input(\"Enter a number to find its fizz_buzz: \"))\n            print(fizz_buzz(n))\n    except EOFError:\n        print(\"\\nGoodbye.\")",
      -10.125
    ],
    [
      "return sum(n % i for i in range(1, 11) if n % i in [11, 13, 17])\n\n# Time:  O(n)\n# Space: O(1)\n# DP solution\nclass Solution:\n    def fizzBuzz(self, n: int) -> str:\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        # n%10 == 0 and n%100!= 0\n        # fizz, buzz\n        # fizz, buzz, fizz, buzz, fizz\n        # fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz\n        # fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz, buzz, fizz,",
      -10.6171875
    ],
    [
      "return sum(1 for x in range(n, 0, -10) if x % 11 == 7 or x % 13 == 7)\n\n\ndef fizz_buzz_recursive(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_recursive(50)\n    0\n    >>> fizz_buzz_recursive(78)\n    2\n    >>> fizz_buzz_recursive(79)\n    3\n    \"\"\"\n    if n < 10:\n        return 0\n    return fizz_buzz_recursive(n - 10) + fizz_buzz_recursive(n)\n\n\ndef fizz_buzz_iterative(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_iterative(50)\n    0\n    >>> fizz_buzz_iterative(78)\n    2\n    >>> fizz_buzz_iterative(79)\n    3\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 11 == 7 or n % 13 == 7:\n            count += 1\n        n /= 10\n    return count\n\n\ndef fizz_buzz_factorial(n: int):\n    \"\"\"Return the factorial of a number n which is divisible by 11 or 13.\n    >>> fizz_buzz_factorial(50)\n    0\n    >>> fizz_buzz_factorial(78)\n    6\n    >>> fizz_buzz_factorial(79)\n    15\n    \"\"\"\n    return factorial(n) // (factorial(n // 10) * factorial(n // 13))\n\n\ndef fizz_buzz_factorial_iterative(n: int):\n    \"\"\"Return the factorial of a number n which is divisible by 11 or 13.\n    >>> fizz_buzz_factorial_iterative(50)\n    0\n    >>> fizz_buzz_factorial_iterative(78)\n    6\n    >>> fizz_buzz_factorial_iterative(",
      -11.078125
    ],
    [
      "if n < 11:\n        return 0\n    elif n < 100:\n        return 1\n    elif n < 1000:\n        return 2\n    elif n < 1000000:\n        return 3\n    else:\n        return 4\n\n\ndef fizz_buzz_number(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_number(50)\n    0\n    >>> fizz_buzz_number(78)\n    2\n    >>> fizz_buzz_number(79)\n    3\n    \"\"\"\n    if n < 11:\n        return 0\n    elif n < 100:\n        return 1\n    elif n < 1000:\n        return 2\n    elif n < 1000000:\n        return 3\n    else:\n        return 4\n\n\ndef is_fizz_buzz_number(n: int):\n    \"\"\"Return true if the number n is divisible by 11 or 13 and has the same number of fizz and buzz times.\n    >>> is_fizz_buzz_number(50)\n    False\n    >>> is_fizz_buzz_number(78)\n    True\n    >>> is_fizz_buzz_number(79)\n    False\n    \"\"\"\n    return fizz_buzz_number(n) == fizz_buzz(n)\n\n\ndef is_fizz_buzz_number_str(n: str):\n    \"\"\"Return true if the string n is divisible by 11 or 13 and has the same number of fizz and buzz times.\n    >>> is_fizz_buzz_number_str('50')\n    False\n    >>> is_fizz_buzz_number_str('78')\n    True\n    >>> is_fizz_buzz_number_str('79')\n    False\n    \"\"\"\n    return fizz_buzz_number_str(n) == fizz_buzz(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -12.828125
    ],
    [
      "count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n    return count\n\ndef fizz_buzz_count(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_count(50)\n    0\n    >>> fizz_buzz_count(78)\n    2\n    >>> fizz_buzz_count(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n    return count\n\ndef fizz_buzz_dictionary(n: int):\n    \"\"\"Return a dictionary of the numbers of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_dictionary(50)\n    {}\n    >>> fizz_buzz_dictionary(78)\n    {1: 2, 3: 3}\n    >>> fizz_buzz_dictionary(79)\n    {1: 3, 3: 4}\n    \"\"\"\n    dictionary = collections.defaultdict(int)\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            dictionary[i] += 1\n    return dictionary\n\ndef fizz_buzz_dictionary_count(n: int):\n    \"\"\"Return a dictionary of the numbers of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_dictionary_count(50)\n    {}\n    >>> fizz_buzz_dictionary_count(78)\n    {1: 2, 3: 3}\n    >>> fizz_buzz_dictionary_count(79)\n    {1: 3, 3: 4}\n    \"\"\"\n    dictionary = collections.defaultdict(int)\n    for i in range(1, n+1):\n        if i % 11 == 0 and i % 13 == 0:\n            dictionary",
      -13.359375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}