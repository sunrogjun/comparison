{
  "problem": {
    "task_id": "HumanEval/24",
    "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
    "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n",
    "entry_point": "largest_divisor",
    "docstring": "",
    "problem_id": 24
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "d = n\n    while d > 1:\n        if n % d == 0:\n            return d\n        else:\n            d -= 1\n    return 1\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, check if n is prime\n    >>> is_prime(12)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(10)\n    True\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(2)\n    False\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    d = 5\n    while d*d <= n:\n        if n % d == 0 or n % (d + 2) == 0:\n            return False\n        d += 6\n    return True\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a palindrome\n    >>> is_palindrome(12)\n    True\n    >>> is_palindrome(5)\n    True\n    >>> is_palindrome(6)\n    False\n    >>> is_palindrome(3)\n    False\n    >>> is_palindrome(4)\n    True\n    >>> is_palindrome(5)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef is_palindrome_odd(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a palindrome, but only if it is odd\n    >>> is_palindrome_odd(12)\n    False\n    >>> is_palindrome_odd(5)\n    False\n    >>> is_palindrome_odd(6)\n    True\n    >>> is_palindrome_odd(3)\n    False\n    >>>",
      0.0926513671875
    ],
    [
      "if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n // 2\n    d = 3\n    while d < n:\n        if n % d == 0:\n            return d\n        d += 2\n    return n\n\ndef main():\n    \"\"\" The main function\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "return largest_divisor_recursive(n)\n\ndef largest_divisor_recursive(n: int) -> int:\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    return largest_divisor_recursive(n / 2)\n\nif __name__ == '__main__':\n    print(largest_divisor(15))",
      -0.85693359375
    ],
    [
      "if n <= 0:\n        return 1\n    \n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return max(divisors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return reduce(lambda x, y: x * y if x % y == 0 else None, range(2, n + 1), 1)\n\n\ndef smallest_multiple(n: int) -> int:\n    \"\"\" Find the smallest number that is a multiple of n\n    >>> smallest_multiple(20)\n    10\n    \"\"\"\n    return n * largest_divisor(n)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "d = 2\n    while n % d == 0:\n        n //= d\n        d += 1\n    return d",
      -0.85693359375
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n / 2\n    return n\n\n\ndef is_divisible(n: int) -> bool:\n    \"\"\" Check if a number is divisible by a given number\n    >>> is_divisible(6)\n    True\n    >>> is_divisible(5)\n    False\n    \"\"\"\n    return n % largest_divisor(n) == 0\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime\n    >>> is_prime(6)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    return is_divisible(n) and n > 2",
      -0.85693359375
    ],
    [
      "while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n * 3 + 1\n    return n\n\ndef main():\n    \"\"\"\n    >>> largest_divisor(10)\n    5\n    >>> largest_divisor(100)\n    25\n    >>> largest_divisor(1)\n    1\n    >>> largest_divisor(0)\n    1\n    \"\"\"\n    print(largest_divisor(10))\n    print(largest_divisor(100))\n    print(largest_divisor(1))\n    print(largest_divisor(0))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "n = abs(n)\n    # If n is not an even number, then the largest divisor is 1\n    if n % 2 == 0:\n        return 2\n    # If n is an even number, then the largest divisor is the largest even integer\n    else:\n        # Find the largest odd integer that divides n evenly\n        return largest_divisor(n // 2) * 2\n\n# This is the brute force method\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    return 1",
      -0.85693359375
    ],
    [
      "divisors = [n//d for d in range(1, int(n ** 0.5) + 1)]\n    return max(divisors)\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "return n // largest_divisor_subset(n)[0]\n\ndef largest_divisor_subset(n: int) -> Tuple[int,...]:\n    \"\"\" Return the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_subset(15)\n    (5, 3)\n    \"\"\"\n    return divisors_with_largest_mod(n)[0]\n\ndef divisors_with_largest_mod(n: int) -> Tuple[int,...]:\n    \"\"\" Return the largest number that divides n evenly, smaller than n\n    >>> divisors_with_largest_mod(15)\n    (5, 3)\n    \"\"\"\n    divisors = []\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)",
      -0.8583984375
    ],
    [
      "return 1\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\n    return 1",
      -0.8583984375
    ],
    [
      "# TODO: Implement this function\n    return 0\n\ndef smallest_multiple(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that is a multiple of n\n    >>> smallest_multiple(15)\n    5\n    \"\"\"\n    # TODO: Implement this function\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "divisors = [n // i for i in range(1, int(n ** 0.5) + 1)]\n    return max(divisors)\n\n\ndef main():\n    n = int(input())\n    print(largest_divisor(n))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "if n < 0:\n        return -largest_divisor(-n)\n\n    for d in divisors(n):\n        if n % d == 0:\n            return d\n    return n\n\ndef divisors(n: int) -> List[int]:\n    \"\"\" For a given number n, find all divisors of n\n    >>> divisors(4)\n    [1, 2, 3]\n    \"\"\"\n    d = []\n    for i in range(1, n+1):\n        d.append(i)\n        for j in range(i, n+1, i):\n            d.append(j)\n    return d\n\ndef main():\n    \"\"\" For a given number, find the largest divisor that divides it evenly\n    >>> largest_divisor(5)\n    3\n    >>> largest_divisor(10)\n    5\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(20)\n    10\n    >>> largest_divisor(21)\n    5\n    >>> largest_divisor(100)\n    25\n    \"\"\"\n    print(largest_divisor(100))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "if n < 0:\n        return -largest_divisor(-n)\n    # the largest divisor for n is the biggest divisor that divides n evenly\n    if n == 0:\n        return 0\n    # we could also start with n = 1 to get the largest divisor\n    # we want to find the largest divisor of n, not the largest divisor of n-1\n    # which is n / (n - 1)\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# This is the largest number that divides n evenly\n    return n // largest_divisor(n % n)\n\ndef main():\n    print(largest_divisor(15))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "largest_divisor_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            largest_divisor_list.append(i)\n    return max(largest_divisor_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "if n < 0:\n        raise ValueError('Number must be non-negative')\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n - 1\n    return n\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns True if n is a prime number, False otherwise\n    >>> is_prime(4)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
      -0.8583984375
    ],
    [
      "# use binary search to find the largest number that divides n evenly\n    # the following algorithm is O(logn)\n    while n > 0:\n        # find the largest divisor smaller than n\n        # if the largest divisor is not n, then n is not a divisor\n        if n % largest_divisor(n)!= 0:\n            break\n        n = n // largest_divisor(n)\n    return n\n\ndef main():\n    # n = 15\n    # print(largest_divisor(n))\n    # n = 15\n    # print(largest_divisor(n))\n    n = 15\n    print(largest_divisor(n))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i > divisors[-1]:\n                divisors.append(n // i)\n    return max(divisors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "while n % 2 == 0:\n        n //= 2\n    while n % 5 == 0:\n        n //= 5\n    while n % 3 == 0:\n        n //= 3\n    while n % 7 == 0:\n        n //= 7\n    return n",
      -0.8583984375
    ],
    [
      "divisor = 1\n    while n % divisor == 0:\n        divisor *= 2\n        if divisor > n:\n            return divisor\n    return n",
      -0.8583984375
    ],
    [
      "while n % 2 == 0:\n        n //= 2\n    for i in range(3, n // 3 + 1):\n        if n % i == 0:\n            return i\n    return n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return divisors(n)[-1]\n\ndef divisors(n: int) -> List[int]:\n    \"\"\" Returns a list of all divisors of n, including 1\n    >>> divisors(25)\n    [1, 2, 3, 5, 7, 10, 15]\n    \"\"\"\n    result = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            result.append(i)\n            result.append(n / i)\n    return result\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "return max(1, int(math.floor(math.sqrt(n) + 0.5)))\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Checks if a number is prime or not\n    >>> is_prime(2)\n    True\n    >>> is_prime(6)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    \"\"\"\n    if n == 2:\n        return True\n    elif n < 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "divisor = 1\n    while n % divisor == 0:\n        divisor *= 2\n        if divisor > n:\n            return divisor\n    return divisor\n\nif __name__ == \"__main__\":\n    for i in range(1, 1000000):\n        print(largest_divisor(i))",
      -0.8583984375
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    return largest_divisor(n//2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "if n <= 0:\n        raise ValueError(\"Argument must be positive.\")\n\n    # Find all divisors\n    divisors = [d for d in range(1, n) if n % d == 0]\n\n    # Find the largest divisor\n    return max(divisors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "divisors = [1]\n    while n > 1:\n        divisor = n % 2\n        if divisor == 0:\n            divisors.append(divisor)\n            n /= 2\n        else:\n            n /= divisor\n    return max(divisors)\n\nif __name__ == \"__main__\":\n    for i in range(1, 100000):\n        if largest_divisor(i) == i:\n            print(i)\n            break",
      -0.85888671875
    ],
    [
      "for d in range(2, n//2):\n        if n % d == 0:\n            return d\n    return n\n\ndef test_largest_divisor() -> None:\n    assert largest_divisor(15) == 5\n    assert largest_divisor(10) == 2\n    assert largest_divisor(5) == 1\n    assert largest_divisor(100) == 20\n\nif __name__ == \"__main__\":\n    test_largest_divisor()",
      -0.85888671875
    ],
    [
      "if n == 0:\n        return 0\n    divisors = [1]\n    for i in range(2, int(np.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            n //= i\n    return max(divisors)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "divisors = divisors_of(n)\n    return max(divisors)\n\ndef divisors_of(n: int) -> List[int]:\n    \"\"\" For a given number n, find all divisors that divides n evenly\n    >>> divisors_of(5)\n    [1, 2, 3, 5, 7, 5]\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\nif __name__ == \"__main__\":\n    print(largest_divisor(12))\n    print(largest_divisor(16))",
      -0.85888671875
    ],
    [
      "divisors = [n // d for d in divisors(n)]\n    if not divisors:\n        return 1\n    return max(divisors)\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "result = n\n    while result > 1:\n        if n % result == 0:\n            return result\n        result = result - 1\n    return result\n\n\ndef test_largest_divisor() -> None:\n    assert largest_divisor(15) == 5\n    assert largest_divisor(100) == 10\n    assert largest_divisor(1000) == 100\n    assert largest_divisor(10000) == 1000",
      -0.85888671875
    ],
    [
      "while n % 2 == 0:\n        n = n // 2\n    while n % 5 == 0:\n        n = n // 5\n    return n\n\ndef main() -> None:\n    n = input(\"Enter a number: \")\n    print(largest_divisor(n))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n - 1\n    return n\n\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\" Return the largest prime factor of a given number\n    >>> largest_prime_factor(15)\n    5\n    \"\"\"\n    # TODO: Implement this\n    return largest_divisor(n)\n\n\ndef prime_factorization(n: int) -> List[int]:\n    \"\"\" Return a list of prime factors of a given number\n    >>> prime_factorization(25)\n    [5, 3, 2]\n    \"\"\"\n    # TODO: Implement this\n    return [largest_prime_factor(n)]",
      -0.85888671875
    ],
    [
      "# I thought this was the only way to do it.\n    # But I was wrong.\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return n\n\ndef main():\n    # These are the values that will be tested\n    for i in range(1, 100):\n        print(\"{} / {} = {}\".format(i, i, largest_divisor(i)))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "if n == 0:\n        return 0\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(13)\n    True\n    \"\"\"\n    if n == 1 or n == 0:\n        return False\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "divisors = [i for i in range(1, n+1) if n % i == 0]\n    return max(divisors)\n\ndef smallest_multiple_of_k(n: int, k: int) -> int:\n    \"\"\" For a given number n and a number k, find the smallest number that is k times the largest\n    number that divides n evenly, smaller than n\n    >>> smallest_multiple_of_k(15, 3)\n    9\n    \"\"\"\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return min(divisors) * k\n\nif __name__ == \"__main__\":\n    assert largest_divisor(15) == 5\n    assert smallest_multiple_of_k(15, 3) == 9\n    print(\"Success\")",
      -0.85888671875
    ],
    [
      "while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            continue\n        if n % 5 == 0:\n            n /= 5\n            continue\n        if n % 3 == 0:\n            n /= 3\n            continue\n        if n % 7 == 0:\n            n /= 7\n            continue\n        return n\n\ndef largest_multiple(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_multiple(15)\n    15\n    \"\"\"\n    return n // largest_divisor(n)\n\ndef main():\n    for testcase in range(1, input().__len__()):\n        testcase = input()\n        print(\"Case #{}: {}\".format(testcase, largest_multiple(int(testcase))))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "if n <= 0:\n        return -1\n    if n % 2 == 0:\n        return 2\n    if n % 5 == 0:\n        return 5\n    if n % 3 == 0:\n        return 3\n    if n % 7 == 0:\n        return 7\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 ==",
      -0.935546875
    ],
    [
      "for i in range(1, n+1):\n        if n % i == 0:\n            return i\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns True if n is prime, False otherwise\n    >>> is_prime(100)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\" Returns a list of prime factors of n, including n itself\n    >>> prime_factors(15)\n    [3, 7]\n    >>> prime_factors(100)\n    [2, 5, 23]\n    >>> prime_factors(12)\n    [2, 3]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    factors.append(n)\n    return factors\n\ndef is_consecutive(a: int, b: int) -> bool:\n    \"\"\" Returns True if a and b are consecutive numbers, False otherwise\n    >>> is_consecutive(4, 6)\n    True\n    >>> is_consecutive(4, 8)\n    False\n    >>> is_consecutive(4, 2)\n    False\n    \"\"\"\n    return a + 1 == b or a - 1 == b\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Returns True if n is a palindrome, False otherwise\n    >>> is_palindrome(9)\n    True\n    >>> is_palindrome(11)\n    False\n    >>> is_palindrome(12)\n    False\n    \"\"\"\n    n = str(n)\n    return n == n[::-1]\n\ndef is_square(n: int) -> bool:\n    \"\"\" Returns True if n is a square, False otherwise\n    >>> is_square(9)\n    True\n    >>> is_square(11)\n    False\n    >>> is_square(12)\n    False",
      -0.9658203125
    ],
    [
      "largest = 1\n    for divisor in range(2, n // 2 + 1):\n        if n % divisor == 0:\n            largest = max(largest, divisor)\n    return largest\n\n\ndef main():\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    print(largest_divisor(15))\n    return 0\n\nif __name__ == '__main__':\n    import sys\n    sys.exit(main())",
      -0.96875
    ],
    [
      "return 1\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, greater than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\n    return 1\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, check if it is a prime number\n    >>> is_prime(15)\n    True\n    >>> is_prime(16)\n    False\n    \"\"\"\n    return True\n\ndef next_prime(n: int) -> int:\n    \"\"\" For a given number n, find the next prime number after n\n    >>> next_prime(5)\n    7\n    >>> next_prime(6)\n    7\n    >>> next_prime(7)\n    11\n    >>> next_prime(8)\n    11\n    >>> next_prime(9)\n    17\n    >>> next_prime(10)\n    17\n    >>> next_prime(11)\n    23\n    >>> next_prime(12)\n    23\n    >>> next_prime(13)\n    29\n    >>> next_prime(14)\n    31\n    >>> next_prime(15)\n    37\n    >>> next_prime(16)\n    41\n    >>> next_prime(17)\n    43\n    >>> next_prime(18)\n    47\n    >>> next_prime(19)\n    53\n    >>> next_prime(20)\n    59\n    >>> next_prime(21)\n    61\n    >>> next_prime(22)\n    67\n    >>> next_prime(23)\n    71\n    >>> next_prime(24)\n    73\n    >>> next_prime(25)\n    79\n    >>> next_prime(26)\n    83\n    >>> next_prime(27)\n    89\n    >>> next_prime(28)\n    97\n    >>> next_prime(29)\n    101\n    >>> next_prime(30)\n    103\n    >>> next_prime(31)\n    107\n    >>> next_prime(32)\n    109\n    >>> next_prime(33)\n    113\n    >>> next_prime(34)\n    127",
      -1.5146484375
    ],
    [
      "# Find the largest divisor that divides n evenly\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            return divisor\n    return n\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\" For a given number n, find the largest prime factor of n\n    >>> largest_prime_factor(15)\n    5\n    \"\"\"\n    # Find the largest prime factor of n\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            return divisor\n    return n\n\ndef largest_prime_factor_rec(n: int) -> int:\n    \"\"\" Recursive method to find the largest prime factor of a given number n\n    >>> largest_prime_factor_rec(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    return largest_prime_factor_rec(largest_prime_factor(n))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.5322265625
    ],
    [
      "return divisors(n)[-1]\n\ndef divisors(n: int) -> list:\n    \"\"\" For a given number n, find all numbers that divide n evenly, smaller than n\n    >>> divisors(15)\n    [1, 2, 3, 5, 7, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    result = []\n    for d in range(1, n):\n        if n % d == 0:\n            result.append(d)\n    result.append(n)\n    return result\n\ndef find_divisors(n: int) -> int:\n    \"\"\" For a given number n, find all numbers that divide n evenly, smaller than n\n    >>> find_divisors(15)\n    5\n    \"\"\"\n    return sum(divisors(n))\n\ndef main():\n    n = int(input())\n    print(largest_divisor(n))\n    print(find_divisors(n))\n\nif __name__ == \"__main__\":\n    main()",
      -1.845703125
    ],
    [
      "if n == 1:\n        return 1\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            return divisor\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Is n prime?\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(13)\n    False\n    >>> is_prime(15)\n    True\n    >>> is_prime(17)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_even(n: int) -> bool:\n    \"\"\" Is n even?\n    >>> is_even(2)\n    True\n    >>> is_even(3)\n    False\n    >>> is_even(5)\n    True\n    >>> is_even(7)\n    False\n    >>> is_even(13)\n    False\n    >>> is_even(15)\n    True\n    >>> is_even(17)\n    False\n    \"\"\"\n    return n % 2 == 0\n\ndef is_odd(n: int) -> bool:\n    \"\"\" Is n odd?\n    >>> is_odd(2)\n    False\n    >>> is_odd(3)\n    True\n    >>> is_odd(5)\n    False\n    >>> is_odd(7)\n    False\n    >>> is_odd(13)\n    False\n    >>> is_odd(15)\n    False\n    >>> is_odd(17)\n    True\n    \"\"\"\n    return not is_even(n)\n\ndef is_triplet(n: int) -> bool:\n    \"\"\" Is n a triplet?\n    >>> is_triplet(3)\n    True\n    >>> is_triplet(5)\n    False\n    >>> is_triplet",
      -1.888671875
    ],
    [
      "# This is a very inefficient algorithm.\n    # There are many other methods that can be used\n    # This algorithm is not very efficient\n    # TODO: Improve this algorithm\n    # TODO: Check for division by zero\n    # TODO: Check for negative numbers\n    # TODO: Check for special cases like 0 and 1\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TODO: Check for special cases like 2 and 4\n    # TODO: Check for special cases like 3 and 7\n    # TOD",
      -1.94140625
    ],
    [
      "n_divisors = [1]\n    for i in range(2, n // 2):\n        if n % i == 0:\n            n_divisors.append(i)\n    if n % n_divisors[-1] == 0:\n        n_divisors.append(n)\n    return max(n_divisors)\n\ndef largest_sum_of_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the largest sum of all the divisors less than n\n    >>> largest_sum_of_divisors(15)\n    15\n    \"\"\"\n    return n * (n + 1) // 2\n\ndef largest_sum_of_divisors_smaller_than(n: int) -> int:\n    \"\"\" For a given number n, find the largest sum of all the divisors less than n\n    >>> largest_sum_of_divisors_smaller_than(15)\n    15\n    \"\"\"\n    return largest_sum_of_divisors(n) - largest_sum_of_divisors(n - 1)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns true if the number n is prime, false otherwise\n    >>> is_prime(5)\n    True\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_slow(n: int) -> bool:\n    \"\"\" Returns true if the number n is prime, false otherwise\n    >>> is_prime_slow(5)\n    True\n    >>> is_prime_slow(9)\n    False\n    >>> is_prime_slow(10)\n    True\n    >>> is_prime_slow(11)\n    False\n    \"\"\"\n    if n < 2:",
      -2.130859375
    ],
    [
      "# Check if n is a perfect square\n    if n % 2 == 0:\n        return 2\n    # Check if n is a perfect triangle\n    elif n % 3 == 0:\n        return 3\n    # Check if n is a perfect pentagram\n    elif n % 5 == 0:\n        return 5\n    # Check if n is a perfect hexagram\n    elif n % 7 == 0:\n        return 7\n    # Check if n is a perfect heptagram\n    elif n % 9 == 0:\n        return 9\n    # Check if n is a perfect octagram\n    elif n % 11 == 0:\n        return 11\n    # Check if n is a perfect pyramidal\n    elif n % 13 == 0:\n        return 13\n    # Check if n is a perfect square-free\n    elif n % 17 == 0:\n        return 17\n    # Check if n is a perfect triangle-free\n    elif n % 19 == 0:\n        return 19\n    # Check if n is a perfect pentagram-free\n    elif n % 23 == 0:\n        return 23\n    # Check if n is a perfect hexagram-free\n    elif n % 29 == 0:\n        return 29\n    # Check if n is a perfect heptagram-free\n    elif n % 31 == 0:\n        return 31\n    # Check if n is a perfect octagram-free\n    elif n % 37 == 0:\n        return 37\n    # Check if n is a perfect pyramidal-free\n    elif n % 41 == 0:\n        return 41\n    # Check if n is a perfect square-free\n    elif n % 43 == 0:\n        return 43\n    # Check if n is a perfect triangle-free\n    elif n % 47 == 0:\n        return 47\n    # Check if n is a perfect pentagram-free\n    elif n % 53 == 0:\n        return 53\n    # Check if n is a perfect hexagram-free\n    elif n % 59 == 0:\n        return 59\n    # Check if n is a perfect heptagram-free\n    elif n % 61 == 0:\n        return 61\n    # Check if n is a perfect octagram-free\n    el",
      -2.140625
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n // 2\n    if n % 3 == 0:\n        return n // 3\n    if n % 5 == 0:\n        return n // 5\n    if n % 7 == 0:\n        return n // 7\n    if n % 11 == 0:\n        return n // 11\n    if n % 13 == 0:\n        return n // 13\n    if n % 17 == 0:\n        return n // 17\n    if n % 19 == 0:\n        return n // 19\n    if n % 23 == 0:\n        return n // 23\n    if n % 29 == 0:\n        return n // 29\n    if n % 31 == 0:\n        return n // 31\n    if n % 37 == 0:\n        return n // 37\n    if n % 41 == 0:\n        return n // 41\n    if n % 43 == 0:\n        return n // 43\n    if n % 47 == 0:\n        return n // 47\n    if n % 49 == 0:\n        return n // 49\n    if n % 53 == 0:\n        return n // 53\n    if n % 59 == 0:\n        return n // 59\n    if n % 61 == 0:\n        return n // 61\n    if n % 67 == 0:\n        return n // 67\n    if n % 71 == 0:\n        return n // 71\n    if n % 73 == 0:\n        return n // 73\n    if n % 79 == 0:\n        return n // 79\n    if n % 83 == 0:\n        return n // 83\n    if n % 89 == 0:\n        return n // 89\n    if n % 97 == 0:\n        return n // 97\n    if n % 101 == 0:\n        return n // 101\n    if n % 103 == 0:\n        return n // 103\n    if n % 109 == 0:\n        return n // 109\n    if n % 113 == 0:\n        return n // 113\n    if n % 127 == 0:\n        return n // 127\n    if n % 131 == 0:\n        return n // 131",
      -2.240234375
    ],
    [
      "divisor = 2\n    while n % divisor == 0:\n        divisor += 1\n    return divisor\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns true if n is prime, false otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    divisor = 3\n    while divisor < n:\n        if n % divisor == 0:\n            return False\n        divisor += 2\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.24609375
    ],
    [
      "while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            break\n    return n\n\n\ndef largest_multiple(n: int) -> int:\n    \"\"\" Find the largest multiple of 2 or 4 that divides n evenly, smaller than n\n    >>> largest_multiple(5)\n    5\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0 and n % 4 == 0:\n            n /= 2\n            n /= 4\n        else:\n            break\n    return n\n\n\ndef get_factors(n: int) -> Tuple[int,...]:\n    \"\"\" Get the factors of a number\n    >>> get_factors(15)\n    (2, 3, 5, 7)\n    \"\"\"\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return tuple(factors)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime\n    >>> is_prime(5)\n    False\n    >>> is_prime(13)\n    True\n    \"\"\"\n    if n == 1 or n == 0:\n        return False\n    if n % 2 == 0 and n!= 2:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Check if a number is palindrome\n    >>> is_palindrome(5)\n    False\n    >>> is_palindrome(123)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef is_square(n: int) -> bool:\n    \"\"\" Check if a number is square\n    >>> is_square(5)\n    False\n    >>> is_square(9)\n    True\n    \"\"\"\n    return n ** 2 == n\n\n\ndef is_pentagon(n: int) -> bool:\n    \"\"\" Check if a number is pentagon\n    >>> is_pentagon(5)\n    False",
      -2.30859375
    ],
    [
      "# find largest divisor that divides evenly\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime.\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    \"\"\"\n    # check if n is even\n    if n % 2 == 0:\n        return False\n    # check if n is divisible by 2\n    if n % 3 == 0:\n        return False\n    # check if n is divisible by 3\n    if n % 5 == 0:\n        return False\n    # check if n is divisible by 5\n    if n % 7 == 0:\n        return False\n    # check if n is divisible by 7\n    if n % 11 == 0:\n        return False\n    # check if n is divisible by 11\n    if n % 13 == 0:\n        return False\n    # check if n is divisible by 13\n    if n % 17 == 0:\n        return False\n    # check if n is divisible by 17\n    if n % 19 == 0:\n        return False\n    # check if n is divisible by 19\n    if n % 23 == 0:\n        return False\n    # check if n is divisible by 23\n    if n % 29 == 0:\n        return False\n    # check if n is divisible by 29\n    if n % 31 == 0:\n        return False\n    # check if n is divisible by 31\n    if n % 37 == 0:\n        return False\n    # check if n is divisible by 37\n    if n % 41 == 0:\n        return False\n    # check if n is divisible by 41\n    if n % 43 == 0:\n        return False\n    # check if n is divisible by 43\n    if n % 47 == 0:\n        return False\n    # check if n is divisible by 47\n    if n % 49 == 0:",
      -2.6953125
    ],
    [
      "if n < 0:\n        raise ValueError(\"negative numbers are not allowed\")\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    # Use the binary search method to find the largest divisor of n\n    # (find the largest number between 1 and n that divides n evenly)\n    # This is not the most efficient way to do this, but it works well enough for our purposes\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) / 2\n        if (n % mid == 0):\n            return mid\n        elif (n % mid < 0):\n            low = mid + 1\n        else:\n            high = mid\n\n    # If we get here, we have a number that does not divide n evenly\n    return n\n\ndef test_largest_divisor():\n    \"\"\" Test the largest_divisor() function\n    >>> test_largest_divisor()\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    assert largest_divisor(0) == 0\n    assert largest_divisor(1) == 1\n    assert largest_divisor(2) == 1\n    assert largest_divisor(3) == 1\n    assert largest_divisor(4) == 2\n    assert largest_divisor(5) == 2\n    assert largest_divisor(6) == 2\n    assert largest_divisor(7) == 2\n    assert largest_divisor(8) == 2\n    assert largest_divisor(9) == 3\n    assert largest_divisor(10) == 3\n    assert largest_divisor(11) == 3\n    assert largest_divisor(12) == 3\n    assert largest_divisor(13) == 3\n    assert largest_divisor(14) == 3\n    assert largest_divisor(15) == 5\n    assert largest_divisor(16) == 5\n    assert largest_divisor(17) == 5\n    assert largest_divisor(18) == 5\n    assert largest_divisor(19) == 5\n    assert largest_divisor(20) == 5",
      -2.81640625
    ],
    [
      "if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return 2\n    \n    if n % 3 == 0:\n        return 3\n    \n    if n % 5 == 0:\n        return 5\n    \n    if n % 7 == 0:\n        return 7\n    \n    if n % 11 == 0:\n        return 11\n    \n    if n % 13 == 0:\n        return 13\n    \n    if n % 17 == 0:\n        return 17\n    \n    if n % 19 == 0:\n        return 19\n    \n    if n % 23 == 0:\n        return 23\n    \n    if n % 29 == 0:\n        return 29\n    \n    if n % 31 == 0:\n        return 31\n    \n    if n % 37 == 0:\n        return 37\n    \n    if n % 41 == 0:\n        return 41\n    \n    if n % 43 == 0:\n        return 43\n    \n    if n % 47 == 0:\n        return 47\n    \n    if n % 53 == 0:\n        return 53\n    \n    if n % 59 == 0:\n        return 59\n    \n    if n % 61 == 0:\n        return 61\n    \n    if n % 67 == 0:\n        return 67\n    \n    if n % 71 == 0:\n        return 71\n    \n    if n % 73 == 0:\n        return 73\n    \n    if n % 79 == 0:\n        return 79\n    \n    if n % 83 == 0:\n        return 83\n    \n    if n % 89 == 0:\n        return 89\n    \n    if n % 97 == 0:\n        return 97\n    \n    if n % 101 == 0:\n        return 101\n    \n    if n % 103 == 0:\n        return 103\n    \n    if n % 109 == 0:\n        return 109\n    \n    if n % 113 == 0:\n        return 113\n    \n    if n % 127 == 0:\n        return 127\n    \n    if n % 131 == 0:\n        return 131\n    \n    if n % 137 == 0:\n        return 137\n    \n    if n % 139 == 0:\n        return 139\n    \n    if n %",
      -2.83984375
    ],
    [
      "divisor = 2\n    while n % divisor == 0:\n        divisor += 1\n    return divisor\n\ndef is_pandigital(n: int) -> bool:\n    \"\"\" Check if a number is pandigital\n    >>> is_pandigital(3)\n    False\n    >>> is_pandigital(9)\n    True\n    \"\"\"\n    digits = [str(n)]\n    for i in range(2, int(math.sqrt(n))+1):\n        digits.append(str(n)[::-1])\n        n //= i\n    for digit in digits:\n        if digit not in '0123456789':\n            return False\n    return True\n\ndef pandigital_product(n: int) -> str:\n    \"\"\" Find the pandigital product of a number\n    >>> pandigital_product(3)\n    '123'\n    >>> pandigital_product(9)\n    '123456789'\n    >>> pandigital_product(3)\n    '123'\n    >>> pandigital_product(3)\n    '123'\n    \"\"\"\n    product = 1\n    for i in range(2, int(math.sqrt(n))+1):\n        product *= n // i\n    return str(product)\n\ndef main():\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))\n    print(largest_divisor(123456789))",
      -2.88671875
    ],
    [
      "return largest_divisor_recur(n, 1)\n\ndef largest_divisor_recur(n: int, d: int) -> int:\n    \"\"\" Recursive version of largest_divisor\n    >>> largest_divisor_recur(15, 1)\n    5\n    >>> largest_divisor_recur(15, 2)\n    5\n    >>> largest_divisor_recur(15, 3)\n    5\n    >>> largest_divisor_recur(15, 4)\n    5\n    >>> largest_divisor_recur(15, 5)\n    5\n    >>> largest_divisor_recur(15, 6)\n    5\n    >>> largest_divisor_recur(15, 7)\n    5\n    >>> largest_divisor_recur(15, 8)\n    5\n    >>> largest_divisor_recur(15, 9)\n    5\n    >>> largest_divisor_recur(15, 10)\n    5\n    >>> largest_divisor_recur(15, 11)\n    5\n    >>> largest_divisor_recur(15, 12)\n    5\n    >>> largest_divisor_recur(15, 13)\n    5\n    >>> largest_divisor_recur(15, 14)\n    5\n    >>> largest_divisor_recur(15, 15)\n    15\n    >>> largest_divisor_recur(15, 16)\n    15\n    >>> largest_divisor_recur(15, 17)\n    15\n    >>> largest_divisor_recur(15, 18)\n    15\n    >>> largest_divisor_recur(15, 19)\n    15\n    >>> largest_divisor_recur(15, 20)\n    15\n    >>> largest_divisor_recur(15, 21)\n    15\n    >>> largest_divisor_recur(15, 22)\n    15\n    >>> largest_divisor_recur(15, 23)\n    15\n    >>> largest_divisor_recur(15, 24)\n    15\n    >>> largest_div",
      -2.90234375
    ],
    [
      "for d in range(1, n + 1):\n        if n % d == 0:\n            return d\n    return n\n\ndef smallest_prime_factor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest prime factor that divides n evenly\n    >>> smallest_prime_factor(15)\n    5\n    \"\"\"\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    for d in range(3, int(n**0.5) + 1, 2):\n        if n % d == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.970703125
    ],
    [
      "return divisor_with_largest_modulus(n)\n\n\ndef divisor_with_largest_modulus(n: int) -> int:\n    \"\"\" For a given number n, find the largest divisor that divides n evenly, smaller than n\n    >>> divisor_with_largest_modulus(15)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    divisor = 2\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n\n    return n\n\ndef divisors_of(n: int) -> List[int]:\n    \"\"\" For a given number n, find all divisors of n\n    >>> divisors_of(5)\n    [1, 2, 4, 5]\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [1]\n\n    if n == 2:\n        return [1, 2]\n\n    if n == 3:\n        return [1, 3]\n\n    if n == 4:\n        return [1, 2, 4]\n\n    if n == 5:\n        return [1, 5]\n\n    if n % 2 == 0:\n        return divisors_of(n / 2)\n\n    if n % 3 == 0:\n        return divisors_of(n / 3)\n\n    if n % 5 == 0:\n        return divisors_of(n / 5)\n\n    return [n] + divisors_of(n + 1)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, check if it is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False",
      -3.150390625
    ],
    [
      "i = 0\n    while n % i!= 0:\n        i += 1\n    return i\n\ndef largest_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisors(15)\n    5\n    \"\"\"\n    return reduce(lambda x, y: x * y, [i for i in range(1, n + 1) if n % i == 0])\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.171875
    ],
    [
      "if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 5 == 0:\n        return 5\n    if n % 3 == 0:\n        return 3\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    return n\n\ndef smallest_multiple(n: int) -> int:\n    \"\"\" For a given number n, find the smallest multiple that is greater than n\n    >>> smallest_multiple(10)\n    10\n    \"\"\"\n    return n + largest_divisor(n) - 1\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the sum of the divisors of n\n    >>> sum_of_divisors(10)\n    10\n    \"\"\"\n    return reduce(lambda x, y: x + y, [i for i in range(2, n+1) if n % i == 0])\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a palindrome\n    >>> is_palindrome(10)\n    True\n    >>> is_palindrome(123)\n    True\n    >>> is_palindrome(12345)\n    False\n    >>> is_palindrome(12)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef is_square(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a square\n    >>> is_square(10)\n    True\n    >>> is_square(7)\n    True\n    >>> is_square(15)\n    False\n    \"\"\"\n    return n * n == n\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" For a given number n, check if n is perfect\n    >>> is_perfect(10)\n    True\n    >>> is_perfect(7)\n    False\n    >>> is_perfect(15)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    if n %",
      -3.412109375
    ],
    [
      "if n < 0:\n        raise ValueError('n must be non-negative')\n\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n\n    # divide n by the largest number that divides n evenly\n    divisor = 2\n    while n % divisor!= 0:\n        divisor += 1\n\n    return divisor\n\n\ndef largest_multiple(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that is a multiple of n, smaller than n\n    >>> largest_multiple(15)\n    15\n    \"\"\"\n    if n < 0:\n        raise ValueError('n must be non-negative')\n\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n\n    # find the largest multiple that divides n evenly\n    divisor = 2\n    while n % divisor!= 0:\n        divisor += 1\n\n    return divisor\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check whether a given number is a prime number\n    >>> is_prime(4)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(25)\n    True\n    >>> is_prime(26)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_with_primes_below(n: int) -> bool:\n    \"\"\" Check whether a given number is a prime number\n    >>> is_prime_with_primes_below(4)\n    False\n    >>> is_prime_with_primes_below(13)\n    True\n    >>> is_prime_with_primes_below(25)\n    False\n    >>> is_prime_with_primes_below(26)\n    True\n    >>> is_prime_with_primes_below(28)\n    False\n    >>> is_prime_with_primes_",
      -3.48828125
    ],
    [
      "if n <= 0:\n        raise ValueError(\"n must be positive\")\n    if n % 2 == 0:\n        return n // 2\n    if n % 3 == 0:\n        return n // 3\n    if n % 5 == 0:\n        return n // 5\n    if n % 7 == 0:\n        return n // 7\n    if n % 11 == 0:\n        return n // 11\n    if n % 13 == 0:\n        return n // 13\n    if n % 17 == 0:\n        return n // 17\n    if n % 19 == 0:\n        return n // 19\n    if n % 23 == 0:\n        return n // 23\n    if n % 29 == 0:\n        return n // 29\n    if n % 31 == 0:\n        return n // 31\n    if n % 37 == 0:\n        return n // 37\n    if n % 41 == 0:\n        return n // 41\n    if n % 43 == 0:\n        return n // 43\n    if n % 47 == 0:\n        return n // 47\n    if n % 53 == 0:\n        return n // 53\n    if n % 59 == 0:\n        return n // 59\n    if n % 61 == 0:\n        return n // 61\n    if n % 67 == 0:\n        return n // 67\n    if n % 71 == 0:\n        return n // 71\n    if n % 73 == 0:\n        return n // 73\n    if n % 79 == 0:\n        return n // 79\n    if n % 83 == 0:\n        return n // 83\n    if n % 89 == 0:\n        return n // 89\n    if n % 97 == 0:\n        return n // 97\n    if n % 101 == 0:\n        return n // 101\n    if n % 103 == 0:\n        return n // 103\n    if n % 109 == 0:\n        return n // 109\n    if n % 127 == 0:\n        return n // 127\n    if n % 131 == 0:\n        return n // 131\n    if n % 137 == 0:\n        return n // 137\n    if n % 139 == 0:\n        return n // 139\n    if n % 149 == 0:\n        return n // 149",
      -3.548828125
    ],
    [
      "return n // largest_divisor_for_n(n)\n\ndef largest_divisor_for_n(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_for_n(15)\n    5\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n // 2\n    if n % 3 == 0:\n        return n // 3\n    if n % 5 == 0:\n        return n // 5\n    if n % 7 == 0:\n        return n // 7\n    if n % 11 == 0:\n        return n // 11\n    if n % 13 == 0:\n        return n // 13\n    if n % 17 == 0:\n        return n // 17\n    if n % 19 == 0:\n        return n // 19\n    if n % 23 == 0:\n        return n // 23\n    if n % 29 == 0:\n        return n // 29\n    if n % 31 == 0:\n        return n // 31\n    if n % 37 == 0:\n        return n // 37\n    if n % 41 == 0:\n        return n // 41\n    if n % 43 == 0:\n        return n // 43\n    if n % 47 == 0:\n        return n // 47\n    if n % 53 == 0:\n        return n // 53\n    if n % 59 == 0:\n        return n // 59\n    if n % 61 == 0:\n        return n // 61\n    if n % 67 == 0:\n        return n // 67\n    if n % 71 == 0:\n        return n // 71\n    if n % 73 == 0:\n        return n // 73\n    if n % 79 == 0:\n        return n // 79\n    if n % 83 == 0:\n        return n // 83\n    if n % 89 == 0:\n        return n // 89\n    if n % 97 == 0:\n        return n // 97\n    if n % 101 == 0:\n        return n // 101\n    if n % 103 == 0:\n        return n // 103\n    if n % 109 ==",
      -3.5859375
    ],
    [
      "while n % 2 == 0:\n        n /= 2\n    while n % 3 == 0:\n        n /= 3\n    while n % 5 == 0:\n        n /= 5\n    while n % 7 == 0:\n        n /= 7\n    while n % 11 == 0:\n        n /= 11\n    while n % 13 == 0:\n        n /= 13\n    while n % 17 == 0:\n        n /= 17\n    while n % 19 == 0:\n        n /= 19\n    while n % 23 == 0:\n        n /= 23\n    while n % 29 == 0:\n        n /= 29\n    while n % 31 == 0:\n        n /= 31\n    while n % 37 == 0:\n        n /= 37\n    while n % 41 == 0:\n        n /= 41\n    while n % 43 == 0:\n        n /= 43\n    while n % 47 == 0:\n        n /= 47\n    while n % 49 == 0:\n        n /= 49\n    while n % 53 == 0:\n        n /= 53\n    while n % 59 == 0:\n        n /= 59\n    while n % 61 == 0:\n        n /= 61\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Checks if a number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Checks if a number is a palindrome\n    >>> is_palindrome(123)\n    True\n    >>> is_palindrome(12345)\n    True\n    >>> is_palindrome(12345678)\n    True\n    >>> is_palindrome(123456789)\n    True\n    >>> is_palindrome(123",
      -3.7109375
    ],
    [
      "if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    while n % 5 == 0:\n        n /= 5\n    while n % 3 == 0:\n        n /= 3\n    while n % 7 == 0:\n        n /= 7\n    while n % 11 == 0:\n        n /= 11\n    while n % 13 == 0:\n        n /= 13\n    while n % 17 == 0:\n        n /= 17\n    while n % 19 == 0:\n        n /= 19\n    while n % 23 == 0:\n        n /= 23\n    while n % 29 == 0:\n        n /= 29\n    while n % 31 == 0:\n        n /= 31\n    while n % 37 == 0:\n        n /= 37\n    while n % 41 == 0:\n        n /= 41\n    while n % 43 == 0:\n        n /= 43\n    while n % 47 == 0:\n        n /= 47\n    while n % 49 == 0:\n        n /= 49\n    while n % 53 == 0:\n        n /= 53\n    while n % 59 == 0:\n        n /= 59\n    while n % 61 == 0:\n        n /= 61\n    return n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.88671875
    ],
    [
      "i = 2\n    while n % i == 0:\n        i += 1\n    return i\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_pandigital(n: int, digits: str) -> bool:\n    \"\"\" Check if a number is pandigital\n    >>> is_pandigital(123, '123')\n    True\n    >>> is_pandigital(123, '12345')\n    False\n    >>> is_pandigital(12345, '12345')\n    True\n    >>> is_pandigital(12345, '1234567')\n    False\n    >>> is_pandigital(12345, '123456789')\n    False\n    \"\"\"\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Check if a number is a palindrome\n    >>> is_palindrome(123)\n    True\n    >>> is_palindrome(12345)\n    True\n    >>> is_palindrome(123456789)\n    True\n    >>> is_palindrome(123456789)\n    False\n    >>> is_palindrome(123456789)\n    False\n    >>> is_palindrome(123456789)\n    False\n    \"\"\"\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n",
      -3.94921875
    ],
    [
      "if n <= 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n / 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return i\n\ndef find_divisors(n: int) -> int:\n    \"\"\" Find the largest divisor of n that divides n evenly\n    >>> find_divisors(15)\n    5\n    >>> find_divisors(12)\n    6\n    \"\"\"\n    if n <= 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n / 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return i\n\ndef is_square(n: int) -> bool:\n    \"\"\" Check if a number is square\n    >>> is_square(4)\n    True\n    >>> is_square(6)\n    False\n    \"\"\"\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    return n == n * n\n\ndef is_pentagonal(n: int) -> bool:\n    \"\"\" Check if a number is pentagonal\n    >>> is_pentagonal(4)\n    False\n    >>> is_pentagonal(6)\n    True\n    \"\"\"\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    return n == n * (3 * n - 1) / 4\n\ndef is_hexagonal(n: int) -> bool:\n    \"\"\" Check if a number is hexagonal\n    >>> is_hexagonal(4)\n    False\n    >>> is_hexagonal(6)\n    True\n    \"\"\"\n    if n <=",
      -4.0
    ],
    [
      "n = abs(n)\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167",
      -4.2109375
    ],
    [
      "# Find the largest divisor that divides n evenly\n    for divisor in range(1, n):\n        if n % divisor == 0:\n            return divisor\n    return n\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\" For a given number n, find the largest prime factor that divides n evenly\n    >>> largest_prime_factor(15)\n    5\n    \"\"\"\n    # Find the largest prime factor that divides n evenly\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            return divisor\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, check if it is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    False\n    >>> is_prime(20)\n    True\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    False\n    >>> is_prime(24)\n    True\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    False\n    >>> is_prime(28)\n    True\n    >>> is_prime(29)\n    False\n    >>>",
      -4.21875
    ],
    [
      "return 1\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime(6)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(9)\n    True\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n    return True\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime_fast(6)\n    True\n    >>> is_prime_fast(5)\n    False\n    >>> is_prime_fast(7)\n    True\n    >>> is_prime_fast(9)\n    True\n    >>> is_prime_fast(13)\n    True\n    >>> is_prime_fast(14)\n    False\n    >>> is_prime_fast(15)\n    False\n    \"\"\"\n    if n < 2 or n % 2 == 0:\n        return False\n    elif n < 9:\n        return True\n    elif n < 100:\n        return is_prime(n)\n    else:\n        d = n - 1\n        for i in range(2, int(d**0.5)+1):\n            if d % i == 0:\n                return False\n        return True\n\ndef is_prime_slow(n: int) -> bool:\n    \"\"\" Return true if n is prime\n    >>> is_prime_slow(6)\n    True\n    >>> is_prime_slow(5)\n    False\n    >>> is_prime_slow(7)\n    True\n    >>> is_prime_slow(9)\n    True\n    >>> is_prime_slow(13)\n    True\n    >>> is_prime_slow(14)",
      -4.7421875
    ],
    [
      "return largest_divisor_recursive(n)\n\ndef largest_divisor_recursive(n: int) -> int:\n    \"\"\" Recursive implementation of the largest divisor algorithm\n    >>> largest_divisor_recursive(15)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return largest_divisor_recursive(n / 2) + 1\n    else:\n        return largest_divisor_recursive(n - 1) + 1\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if n is prime\n    >>> is_prime(6)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(17)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_fast(n: int) -> bool:\n    \"\"\" Fast implementation of the is_prime algorithm\n    >>> is_prime_fast(6)\n    False\n    >>> is_prime_fast(12)\n    True\n    >>> is_prime_fast(17)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_slow(n: int) -> bool:\n    \"\"\" Slow implementation of the is_prime algorithm\n    >>> is_prime_slow(6)\n    False\n    >>> is_prime_slow(12)\n    True\n    >>> is_prime_slow(17)\n    False\n    \"\"\"\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n",
      -4.8828125
    ],
    [
      "divisors = [1,2,3,5,7,9,10,12,15,18,20]\n    if n < 1:\n        raise ValueError(\"The number must be at least 1\")\n\n    for i in range(len(divisors)):\n        if n % divisors[i] == 0:\n            return divisors[i]\n\n    return 1\n\ndef find_k(n: int) -> int:\n    \"\"\" Find the number of k-th divisors of n, where k is between 2 and n/2\n    >>> find_k(6)\n    3\n    \"\"\"\n    k = 2\n    while n % k!= 0:\n        k += 1\n    return k\n\n\ndef find_k_prime(n: int) -> int:\n    \"\"\" Find the number of k-th prime divisors of n, where k is between 2 and n/2\n    >>> find_k_prime(6)\n    3\n    \"\"\"\n    k = 2\n    while n % k!= 0:\n        k += 1\n    return k - 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.984375
    ],
    [
      "assert n > 0\n    return n // largest_divisor_no_division(n)\n\ndef largest_divisor_no_division(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_no_division(15)\n    5\n    \"\"\"\n    assert n > 0\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139",
      -4.99609375
    ],
    [
      "return math.ceil(math.sqrt(n))\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns true if n is a prime number\n    >>> is_prime(25)\n    True\n    >>> is_prime(6)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_num(n: int) -> bool:\n    \"\"\" Returns true if n is a prime number\n    >>> is_prime_num(25)\n    True\n    >>> is_prime_num(6)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_divisors(n: int) -> int:\n    \"\"\" Finds prime divisors of n\n    >>> find_prime_divisors(25)\n    [5, 2, 3]\n    \"\"\"\n    divisors = []\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            divisors.append(i)\n            if is_prime_num(i):\n                divisors.append(i)\n    return divisors\n\ndef find_prime_divisors_rec(n: int) -> list:\n    \"\"\" Finds prime divisors recursively\n    >>> find_prime_divisors_rec(25)\n    [5, 2, 3]\n    \"\"\"\n    divisors = []\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            divisors.append(i)\n            if is_prime_num(i):\n                divisors.append(i)\n            else:\n                divisors.extend(find_prime_divisors_rec(i))\n    return divisors",
      -5.21484375
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    divisors = [1]\n    while n % 2 == 0:\n        divisors.append(2)\n        n = n / 2\n    while n % 5 == 0:\n        divisors.append(5)\n        n = n / 5\n    while n % 3 == 0:\n        divisors.append(3)\n        n = n / 3\n    while n % 7 == 0:\n        divisors.append(7)\n        n = n / 7\n    while n % 11 == 0:\n        divisors.append(11)\n        n = n / 11\n    while n % 13 == 0:\n        divisors.append(13)\n        n = n / 13\n    while n % 17 == 0:\n        divisors.append(17)\n        n = n / 17\n    while n % 19 == 0:\n        divisors.append(19)\n        n = n / 19\n    while n % 23 == 0:\n        divisors.append(23)\n        n = n / 23\n    while n % 29 == 0:\n        divisors.append(29)\n        n = n / 29\n    while n % 31 == 0:\n        divisors.append(31)\n        n = n / 31\n    while n % 37 == 0:\n        divisors.append(37)\n        n = n / 37\n    while n % 41 == 0:\n        divisors.append(41)\n        n = n / 41\n    while n % 43 == 0:\n        divisors.append(43)\n        n = n / 43\n    while n % 47 == 0:\n        divisors.append(47)\n        n = n / 47\n    while n % 53 == 0:\n        divisors.append(53)\n        n = n / 53\n    while n % 59 == 0:\n        divisors.append(59)\n        n = n / 59\n    while n % 61 == 0:\n        divisors.append(61)\n        n = n / 61\n    while n % 67 == 0:\n        divisors",
      -5.234375
    ],
    [
      "if n < 2:\n        return 1\n    else:\n        return largest_divisor(n // 2) * 2\n\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, greater than n\n    >>> smallest_divisor(15)\n    5\n    \"\"\"\n    if n < 2:\n        return 1\n    else:\n        return smallest_divisor(n // 2) * 2\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    True\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    True\n    >>> is_prime(22)\n    True\n    >>> is_prime(23)\n    True\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    True\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    True\n    >>> is_prime(28)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime(30)\n    False\n    >>> is_prime(31)\n    True\n    >>> is_prime(32)\n    False\n    >>> is",
      -5.37890625
    ],
    [
      "if n == 1:\n        return 1\n    # If n is even, then the largest divisor is n/2\n    if n % 2 == 0:\n        return n / 2\n    # Otherwise, the largest divisor is 2\n    return 2\n\n\ndef next_prime(n: int) -> int:\n    \"\"\" Find the next prime number greater than n\n    >>> next_prime(10)\n    11\n    >>> next_prime(11)\n    13\n    >>> next_prime(13)\n    17\n    >>> next_prime(17)\n    19\n    >>> next_prime(19)\n    23\n    >>> next_prime(23)\n    29\n    \"\"\"\n    # If n is even, then the next prime number is 2\n    if n % 2 == 0:\n        return 2\n    # Otherwise, the next prime is the next odd number\n    # greater than n\n    return n + 1 - largest_divisor(n)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if n is a prime number\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(19)\n    False\n    >>> is_prime(23)\n    True\n    >>> is_prime(29)\n    False\n    \"\"\"\n    # If n is even, then it is not prime\n    if n % 2 == 0:\n        return False\n    # Otherwise, it is prime if the number of factors is even\n    return n == n * (n - 1) // 2\n\n\ndef is_prime_number(n: int) -> bool:\n    \"\"\" Check if n is a prime number\n    >>> is_prime_number(2)\n    True\n    >>> is_prime_number(3)\n    False\n    >>> is_prime_number(10)\n    True\n    >>> is_prime_number(11)\n    False\n    >>> is_prime_number(13)\n    True\n    >>> is_",
      -5.41796875
    ],
    [
      "if n < 2:\n        return n\n    largest = n\n    divisors = [1,2,3]\n    while n % divisors[-1]!= 0:\n        divisors.append(divisors[-1] * 2)\n    while n % divisors[-2]!= 0:\n        divisors.append(divisors[-2] * 3)\n    for divisor in divisors[:-2]:\n        if n % divisor == 0:\n            largest = divisor\n            break\n    return largest\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns True if n is prime, False otherwise\n    >>> is_prime(20)\n    True\n    >>> is_prime(21)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    r = largest_divisor(n)\n    for i in range(2, r):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" Returns the sum of the divisors of n\n    >>> sum_of_divisors(20)\n    10\n    \"\"\"\n    if n == 0:\n        return 0\n    return n + sum_of_divisors(n // largest_divisor(n))\n\ndef main():\n    print(\"Part 1:\", largest_prime_factor(1234))\n    print(\"Part 2:\", sum_of_divisors(1234))\n\nif __name__ == \"__main__\":\n    main()",
      -5.7890625
    ],
    [
      "if n <= 0:\n        return 0\n    if n % 2 == 0:\n        return 2\n    while n % 3 == 0:\n        n /= 3\n    while n % 5 == 0:\n        n /= 5\n    while n % 7 == 0:\n        n /= 7\n    while n % 11 == 0:\n        n /= 11\n    while n % 13 == 0:\n        n /= 13\n    while n % 17 == 0:\n        n /= 17\n    while n % 19 == 0:\n        n /= 19\n    while n % 23 == 0:\n        n /= 23\n    while n % 29 == 0:\n        n /= 29\n    while n % 31 == 0:\n        n /= 31\n    while n % 37 == 0:\n        n /= 37\n    while n % 41 == 0:\n        n /= 41\n    while n % 43 == 0:\n        n /= 43\n    while n % 47 == 0:\n        n /= 47\n    while n % 53 == 0:\n        n /= 53\n    while n % 59 == 0:\n        n /= 59\n    while n % 61 == 0:\n        n /= 61\n    while n % 67 == 0:\n        n /= 67\n    while n % 71 == 0:\n        n /= 71\n    while n % 73 == 0:\n        n /= 73\n    while n % 79 == 0:\n        n /= 79\n    while n % 83 == 0:\n        n /= 83\n    while n % 89 == 0:\n        n /= 89\n    while n % 97 == 0:\n        n /= 97\n    while n % 101 == 0:\n        n /= 101\n    while n % 103 == 0:\n        n /= 103\n    while n % 109 == 0:\n        n /= 109\n    while n % 113 == 0:\n        n /= 113\n    while n % 127 == 0:\n        n /= 127\n    return n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.828125
    ],
    [
      "return 1\n\ndef smallest_multiple(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    >>> smallest_multiple(15)\n    5\n    \"\"\"\n    return 1\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" For a given number n, check if n is perfect\n    >>> is_perfect(100)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n    return n % 2 == 0\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, check if n is prime\n    >>> is_prime(100)\n    False\n    >>> is_prime(12)\n    True\n    \"\"\"\n    return n > 2 and is_perfect(n) and is_perfect(n - 1)\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a palindrome\n    >>> is_palindrome(100)\n    False\n    >>> is_palindrome(10001)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef is_triangular(n: int) -> bool:\n    \"\"\" For a given number n, check if n is triangular\n    >>> is_triangular(100)\n    False\n    >>> is_triangular(1000)\n    True\n    \"\"\"\n    return n == n * (n + 1) / 2\n\ndef is_square(n: int) -> bool:\n    \"\"\" For a given number n, check if n is square\n    >>> is_square(100)\n    False\n    >>> is_square(1000)\n    True\n    \"\"\"\n    return n == n * n\n\ndef is_pentagonal(n: int) -> bool:\n    \"\"\" For a given number n, check if n is pentagonal\n    >>> is_pentagonal(100)\n    False\n    >>> is_pentagonal(1000)\n    True\n    \"\"\"\n    return n == n * (3 * n - 1) / 2\n\ndef is_hexagonal(n: int) -> bool:\n    \"\"\" For a given number n,",
      -5.87109375
    ],
    [
      "while n % 2 == 0:\n        n //= 2\n    while n % 3 == 0:\n        n //= 3\n    while n % 5 == 0:\n        n //= 5\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, check if it is prime or not\n    >>> is_prime(15)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n < 2:\n        return False\n    if n == 3:\n        return True\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> prime_factors(15)\n    [5, 3]\n    \"\"\"\n    factors = [n]\n    for i in range(2, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef factorial(n: int) -> int:\n    \"\"\" For a given number n, find the factorial of n\n    >>> factorial(5)\n    120\n    \"\"\"\n    factors = [1]\n    for i in range(2, n + 1):\n        factors.append(factors[i - 1] * i)\n    return sum(factors)\n\ndef n_factorial(n: int) -> int:\n    \"\"\" For a given number n, find the factorial of n\n    >>> n_factorial(5)\n    120\n    \"\"\"\n    return factorial(n)\n\ndef is_prime_num(n: int) -> bool:\n    \"\"\" For a given number n, check if it is prime or not\n    >>> is_prime_num(15)\n    True\n    \"\"\"",
      -6.03515625
    ],
    [
      "while n % 2 == 0:\n        n /= 2\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef largest_divisor_from_factors(factors: List[int]) -> int:\n    \"\"\" For a given list of factors, find the largest divisor from the list of factors\n    >>> largest_divisor_from_factors([2, 3, 5, 7])\n    7\n    \"\"\"\n    largest_divisor = 1\n    for i in range(len(factors)):\n        largest_divisor = largest_divisor * factors[i]\n    return largest_divisor\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    True\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    True\n    >>> is_prime(19)\n    False\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    False\n    >>> is_prime(22)\n    True\n    >>> is_prime(23)\n    False\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    True\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    False\n    >>> is_",
      -6.1171875
    ],
    [
      "assert n > 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 49 == 0:\n        return 49\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163",
      -6.1953125
    ],
    [
      "if n == 1:\n        return 1\n\n    if n < 0:\n        n = -n\n\n    return largest_divisor(n // 2) * 2 + (n % 2)\n\n\ndef find_pythagorean_triplet(n: int) -> tuple:\n    \"\"\" Given a number, find the three largest values that divide it evenly\n    >>> find_pythagorean_triplet(15)\n    (5, 3, 7)\n    >>> find_pythagorean_triplet(5)\n    (5, 5, 5)\n    >>> find_pythagorean_triplet(6)\n    (3, 3, 6)\n    \"\"\"\n    if n == 1:\n        return (1, 1, 1)\n\n    if n < 0:\n        n = -n\n\n    if n % 2 == 0:\n        return (n / 2, n / 2, n / 2)\n\n    m = n // 2\n\n    while m > 1:\n        if n % m == 0:\n            return (m, m, n)\n\n        m -= 1\n\n    return (m, m, n)\n\n\ndef largest_pythagorean_triplet(n: int) -> tuple:\n    \"\"\" Find the three largest pythagorean triples for a given number n\n    >>> largest_pythagorean_triplet(15)\n    (7, 5, 3)\n    >>> largest_pythagorean_triplet(5)\n    (5, 5, 5)\n    >>> largest_pythagorean_triplet(6)\n    (3, 3, 6)\n    \"\"\"\n    if n == 1:\n        return (1, 1, 1)\n\n    if n < 0:\n        n = -n\n\n    if n % 2 == 0:\n        return (n / 2, n / 2, n / 2)\n\n    m = n // 2\n\n    while m > 1:\n        if n % m == 0:\n            return (m, m, n)\n\n        m -= 1\n\n    return (m, m, n)",
      -6.34375
    ],
    [
      "while n % 2 == 0:\n        n /= 2\n    while n % 5 == 0:\n        n /= 5\n    while n % 3 == 0:\n        n /= 3\n    while n % 7 == 0:\n        n /= 7\n    while n % 11 == 0:\n        n /= 11\n    while n % 13 == 0:\n        n /= 13\n    while n % 17 == 0:\n        n /= 17\n    while n % 19 == 0:\n        n /= 19\n    while n % 23 == 0:\n        n /= 23\n    while n % 29 == 0:\n        n /= 29\n    while n % 31 == 0:\n        n /= 31\n    while n % 37 == 0:\n        n /= 37\n    while n % 41 == 0:\n        n /= 41\n    while n % 43 == 0:\n        n /= 43\n    while n % 47 == 0:\n        n /= 47\n    while n % 49 == 0:\n        n /= 49\n    while n % 53 == 0:\n        n /= 53\n    while n % 59 == 0:\n        n /= 59\n    while n % 61 == 0:\n        n /= 61\n    while n % 67 == 0:\n        n /= 67\n    while n % 71 == 0:\n        n /= 71\n    while n % 73 == 0:\n        n /= 73\n    while n % 79 == 0:\n        n /= 79\n    while n % 83 == 0:\n        n /= 83\n    while n % 89 == 0:\n        n /= 89\n    while n % 97 == 0:\n        n /= 97\n    while n % 101 == 0:\n        n /= 101\n    while n % 103 == 0:\n        n /= 103\n    while n % 107 == 0:\n        n /= 107\n    while n % 109 == 0:\n        n /= 109\n    while n % 113 == 0:\n        n /= 113\n    while n % 127 == 0:\n        n /= 127\n    while n % 131 == 0:\n        n /= 131\n    while n % 137 == 0:\n        n /= 137\n    while",
      -6.3671875
    ],
    [
      "if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    for d in range(3, n//2 + 1):\n        if n % d == 0:\n            return d\n    return n\n\ndef divisors(n: int) -> List[int]:\n    \"\"\" For a given number n, find all the divisors of n, less than n.\n    >>> divisors(10)\n    [1, 2, 5, 10, 15]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [1, 3]\n    if n < 0:\n        return []\n    d = largest_divisor(n)\n    return [d] + divisors(n//d)\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\" For a given number n, find all the prime factors of n.\n    >>> prime_factors(10)\n    [2, 3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n < 0:\n        return []\n    factors = []\n    for d in divisors(n):\n        if n % d == 0:\n            factors.append(d)\n    return factors\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, determine if it is prime or not.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    False\n    >>> is_prime(",
      -6.453125
    ],
    [
      "if n == 1:\n        return 1\n    return largest_divisor(n // 2)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns true if n is a prime number, false otherwise\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_in_range(n: int, low: int, high: int) -> bool:\n    \"\"\" Returns true if n is prime, false otherwise\n    >>> is_prime_in_range(2, 2, 2)\n    True\n    >>> is_prime_in_range(5, 2, 3)\n    True\n    >>> is_prime_in_range(6, 2, 3)\n    False\n    >>> is_prime_in_range(7, 2, 3)\n    False\n    \"\"\"\n    if low == high:\n        return is_prime(low)\n    if low > high:\n        return False\n    for i in range(low, high):\n        if is_prime(i):\n            return True\n    return False\n\ndef is_prime_in_range_by_factor_of_two(n: int, low: int, high: int) -> bool:\n    \"\"\" Returns true if n is prime, false otherwise\n    >>> is_prime_in_range_by_factor_of_two(2, 2, 2)\n    True\n    >>> is_prime_in_range_by_factor_of_two(5, 2, 3)\n    True\n    >>> is_prime_in_range_by_factor_of_two(6, 2, 3)\n    False\n    >>> is_prime_in_range_by_factor_of_two(7, 2, 3)\n    False",
      -6.66015625
    ],
    [
      "divisors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n            if i == n // i:\n                return i\n    if n > 1:\n        divisors.append(n)\n    return max(divisors)\n\n\ndef is_divisible(n: int) -> bool:\n    \"\"\" Returns True if n is divisible by any integer greater than 0\n    >>> is_divisible(15)\n    True\n    >>> is_divisible(6)\n    False\n    \"\"\"\n    return True if n % largest_divisor(n) == 0 else False\n\n\ndef get_prime_factors(n: int) -> List[int]:\n    \"\"\" Returns a list of prime factors of n\n    >>> get_prime_factors(15)\n    [5, 3]\n    >>> get_prime_factors(6)\n    [2, 3, 2]\n    >>> get_prime_factors(15)\n    [5, 3, 5]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if n % i == 0 and is_divisible(i):\n            factors.append(i)\n            while n % i == 0:\n                n //= i\n            if n == 1:\n                break\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.859375
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n < 0:\n        return -largest_divisor(-n)\n    if n % 2 == 0:\n        return 2\n    while n % 5 == 0:\n        n /= 5\n    while n % 3 == 0:\n        n /= 3\n    while n % 7 == 0:\n        n /= 7\n    while n % 11 == 0:\n        n /= 11\n    while n % 13 == 0:\n        n /= 13\n    while n % 17 == 0:\n        n /= 17\n    while n % 19 == 0:\n        n /= 19\n    while n % 23 == 0:\n        n /= 23\n    while n % 29 == 0:\n        n /= 29\n    while n % 31 == 0:\n        n /= 31\n    while n % 37 == 0:\n        n /= 37\n    while n % 41 == 0:\n        n /= 41\n    while n % 43 == 0:\n        n /= 43\n    while n % 47 == 0:\n        n /= 47\n    while n % 53 == 0:\n        n /= 53\n    while n % 59 == 0:\n        n /= 59\n    while n % 61 == 0:\n        n /= 61\n    if n > 1:\n        return n\n    else:\n        return 1\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Checks if a number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime",
      -7.234375
    ],
    [
      "return n // largest_divisor(n % largest_divisor(n))\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Test if number is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_power_of_two(n: int) -> bool:\n    \"\"\" Test if number is power of two\n    >>> is_power_of_two(2)\n    True\n    >>> is_power_of_two(3)\n    True\n    >>> is_power_of_two(4)\n    True\n    >>> is_power_of_two(5)\n    False\n    >>> is_power_of_two(6)\n    False\n    >>> is_power_of_two(7)\n    False\n    >>> is_power_of_two(8)\n    False\n    >>> is_power_of_two(9)\n    False\n    \"\"\"\n    return n > 0 and (n & (n - 1)) == 0\n\n\ndef is_prime_list(numbers: list) -> list:\n    \"\"\" Test if numbers are all prime\n    >>> is_prime_list([2, 3, 5, 7])\n    [True, True, True]\n    >>> is_prime_list([2, 3, 5, 7, 11])\n    [True, False, True, False]\n    \"\"\"\n    return [is_prime(n) for n in numbers]\n\n\ndef is_prime_set(numbers: set) -> set:\n    \"\"\" Test if numbers are all prime\n    >>> is_prime_set({2, 3, 5, 7})\n    {True",
      -7.328125
    ],
    [
      "return max(divisors(n))\n\n\ndef divisors(n: int) -> list:\n    \"\"\" Generate all divisors of a number n\n    >>> list(divisors(15))\n    [1, 3, 5, 7, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35, 57, 15, 21, 35",
      -7.3671875
    ],
    [
      "if n == 0:\n        return 0\n    s = 1\n    while s*s <= n:\n        if n % s == 0:\n            return s\n        s += 1\n    return n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(5)\n    True\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_number(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime_number(5)\n    True\n    >>> is_prime_number(25)\n    False\n    >>> is_prime_number(10001)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_number_fast(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime_number_fast(5)\n    True\n    >>> is_prime_number_fast(25)\n    False\n    >>> is_prime_number_fast(10001)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    d = 5\n    while d*d <= n:\n        if n % d == 0:\n            return",
      -8.3125
    ],
    [
      "for d in range(2, int(n**0.5) + 1):\n        if n % d == 0:\n            return d\n    return 1\n\ndef largest_common_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_common_divisor(15)\n    5\n    \"\"\"\n    for d in range(2, int(n**0.5) + 1):\n        if n % d == 0:\n            return d\n    return 1\n\ndef test_largest_divisor() -> None:\n    assert largest_divisor(1) == 1\n    assert largest_divisor(2) == 2\n    assert largest_divisor(3) == 3\n    assert largest_divisor(4) == 2\n    assert largest_divisor(5) == 5\n    assert largest_divisor(6) == 2\n    assert largest_divisor(7) == 3\n    assert largest_divisor(8) == 2\n    assert largest_divisor(9) == 3\n    assert largest_divisor(10) == 2\n    assert largest_divisor(11) == 3\n    assert largest_divisor(12) == 2\n    assert largest_divisor(13) == 3\n    assert largest_divisor(14) == 5\n    assert largest_divisor(15) == 5\n    assert largest_divisor(16) == 2\n    assert largest_divisor(17) == 3\n    assert largest_divisor(18) == 2\n    assert largest_divisor(19) == 3\n    assert largest_divisor(20) == 2\n    assert largest_divisor(21) == 3\n    assert largest_divisor(22) == 2\n    assert largest_divisor(23) == 3\n    assert largest_divisor(24) == 2\n    assert largest_divisor(25) == 3\n    assert largest_divisor(26) == 2\n    assert largest_divisor(27) == 3\n    assert largest_divisor(28) == 2\n    assert",
      -9.109375
    ],
    [
      "if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n\ndef largest_product(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that can be expressed as the product of two factors, smaller than n\n    >>> largest_product(15)\n    15\n    \"\"\"\n    p = 2\n    while p * p <= n:\n        if n % p == 0:\n            return n // p\n        p += 1\n    return n\n\ndef is_pandigital(n: int) -> bool:\n    \"\"\" Return whether n is a pandigital number\n    >>> is_pandigital(15)\n    True\n    >>> is_pandigital(4)\n    False\n    >>> is_pandigital(17)\n    False\n    \"\"\"\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    s = str(n)\n    if len(s) == 1:\n        return True\n    for i in range(2, len(s) + 1):\n        if s[:i] == s[-i:]:\n            return True\n    return False\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return whether n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(17)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return whether n is a palindrome\n    >>> is_palindrome(2)\n    True\n    >>> is_palindrome(3)\n    True\n    >>> is",
      -9.5078125
    ],
    [
      "return n // largest_divisor(n % len(str(n)))\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert largest_divisor(1) == 1, \"1 should be a single digit\"\n    assert largest_divisor(2) == 1, \"2 should be a single digit\"\n    assert largest_divisor(3) == 1, \"3 should be a single digit\"\n    assert largest_divisor(4) == 2, \"4 should be a pair of digits\"\n    assert largest_divisor(5) == 2, \"5 should be a pair of digits\"\n    assert largest_divisor(6) == 2, \"6 should be a pair of digits\"\n    assert largest_divisor(7) == 3, \"7 should be a triplet of digits\"\n    assert largest_divisor(8) == 3, \"8 should be a triplet of digits\"\n    assert largest_divisor(9) == 3, \"9 should be a triplet of digits\"\n    assert largest_divisor(10) == 3, \"10 should be a triplet of digits\"\n    assert largest_divisor(11) == 3, \"11 should be a triplet of digits\"\n    assert largest_divisor(12) == 3, \"12 should be a triplet of digits\"\n    assert largest_divisor(13) == 3, \"13 should be a triplet of digits\"\n    assert largest_divisor(14) == 3, \"14 should be a triplet of digits\"\n    assert largest_divisor(15) == 5, \"15 should be a quadruplet of digits\"\n    assert largest_divisor(16) == 5, \"16 should be a quadruplet of digits\"\n    assert largest_divisor(17) == 5, \"17 should be a quadruplet of digits\"\n    assert largest_divisor(18) == 5, \"18 should be a quadruplet of digits\"\n    assert largest_divisor(19) == 5, \"19 should be a quadruplet of digits\"\n    assert largest_divisor(20) == 5, \"20 should be a quadruplet",
      -10.1796875
    ],
    [
      "assert n > 0\n    assert n % 2 == 0\n    i = 1\n    while n % i == 0:\n        i = i + 1\n    return i\n\ndef is_square(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a perfect square\n    >>> is_square(14)\n    True\n    >>> is_square(15)\n    False\n    \"\"\"\n    assert n > 0\n    assert n % 2 == 0\n    if n == 2 ** (int(math.sqrt(n))):\n        return True\n    return False\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a prime number\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    True\n    \"\"\"\n    assert n > 0\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i <= n:\n        if n % i == 0:\n            return False\n        i = i + 2\n    return True\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a palindrome\n    >>> is_palindrome(14)\n    True\n    >>> is_palindrome(15)\n    False\n    \"\"\"\n    assert n > 0\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return is_palindrome(n // 2)\n    if n % 3 == 0:\n        return is_palindrome(n // 3)\n    i = 5\n    while i <= n:\n        if n % i == 0:\n            return False\n        i = i + 2\n    return True\n\ndef is_triangle(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a triangle\n    >>> is_triangle(14)\n    True\n    >>> is_triangle(15)\n    False\n    \"\"\"\n    assert n > 0",
      -10.8203125
    ],
    [
      "d = 2\n    while n % d == 0:\n        d += 1\n    return d\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns true if n is a prime number\n    >>> is_prime(4)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    True\n    >>> is_prime(7)\n    False\n    \"\"\"\n    d = largest_divisor(n)\n    for i in range(2, d):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_divisors(n: int) -> int:\n    \"\"\" Returns the number of prime divisors of n\n    >>> prime_divisors(4)\n    3\n    >>> prime_divisors(5)\n    5\n    >>> prime_divisors(6)\n    5\n    >>> prime_divisors(7)\n    3\n    \"\"\"\n    d = largest_divisor(n)\n    if n == 1:\n        return 1\n    return n // d + prime_divisors(n % d)\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Returns true if n is a palindrome\n    >>> is_palindrome(123)\n    True\n    >>> is_palindrome(1234)\n    True\n    >>> is_palindrome(12345)\n    True\n    >>> is_palindrome(12345678)\n    True\n    >>> is_palindrome(123456789)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef is_abundant(n: int) -> bool:\n    \"\"\" Returns true if n is an abundant number\n    >>> is_abundant(4)\n    True\n    >>> is_abundant(5)\n    True\n    >>> is_abundant(6)\n    True\n    >>> is_abundant(7)\n    True\n    >>> is_abundant(8)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    return n % 2 == 0 and is_",
      -13.7109375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}