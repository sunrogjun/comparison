{
  "problem": {
    "task_id": "HumanEval/155",
    "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
    "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "even_odd_count",
    "docstring": "",
    "problem_id": 155
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "even, odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return even, odd\n\n\ndef even_odd_count_recursive(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    This is a recursive function.\n\n    Example:\n        even_odd_count_recursive(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return 0, 0\n    return even_odd_count_recursive(num // 2) + even_odd_count_recursive(num % 2)\n\n\ndef even_odd_count_iterative(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    This is an iterative function.\n\n    Example:\n        even_odd_count_iterative(123) ==> (1, 2)\n    \"\"\"\n    even, odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 2\n    return even, odd\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      1.6669921875
    ],
    [
      "even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\ndef get_fibonacci_number(n):\n    \"\"\"Given an integer n, return the nth Fibonacci number.\n\n     Example:\n        get_fibonacci_number(0) ==> 0\n        get_fibonacci_number(1) ==> 1\n        get_fibonacci_number(2) ==> 1\n        get_fibonacci_number(3) ==> 2\n        get_fibonacci_number(4) ==> 3\n        get_fibonacci_number(5) ==> 5\n        get_fibonacci_number(6) ==> 8\n        get_fibonacci_number(7) ==> 13\n        get_fibonacci_number(8) ==> 21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return get_fibonacci_number(n - 1) + get_fibonacci_number(n - 2)\n\ndef get_fibonacci_number_recursive(n):\n    \"\"\"Given an integer n, return the nth Fibonacci number using the recursive definition.\n\n     Example:\n        get_fibonacci_number_recursive(0) ==> 0\n        get_fibonacci_number_recursive(1) ==> 1\n        get_fibonacci_number_recursive(2) ==> 1\n        get_fibonacci_number_recursive(3) ==> 2\n        get_fibonacci_number_recursive(4) ==> 3\n        get_fibonacci_number_recursive(5) ==> 5\n        get_fibonacci_number_recursive(6) ==> 8\n        get_fibonacci_number_recursive(7) ==> 13\n        get_fibonacci_number_recursive",
      1.251953125
    ],
    [
      "even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        num, rem = divmod(num, 2)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\ndef even_odd_count_1(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        num //= 2\n\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    for num in range(1, 1000):\n        print(num, '->', even_odd_count(num))",
      1.1357421875
    ],
    [
      "if num is None:\n        return (0, 0)\n\n    num = int(num)\n\n    even_count = 0\n    odd_count = 0\n\n    while num:\n        num, mod = divmod(num, 10)\n        if mod == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\ndef count_even_odd(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        count_even_odd(-12) ==> (1, 1)\n        count_even_odd(123) ==> (1, 2)\n    \"\"\"\n    if num is None:\n        return (0, 0)\n\n    num = int(num)\n\n    even_count = 0\n    odd_count = 0\n\n    while num:\n        if num % 10 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      0.93017578125
    ],
    [
      "if num == 0:\n        return (0, 0)\n    elif num % 2 == 0:\n        return (num // 2, 0)\n    else:\n        return (num // 2, num % 2)\n\n\ndef multiply_with_carry(a, b):\n    \"\"\"Given two numbers, multiply them and return the carry.\n\n     Example:\n        multiply_with_carry(2, 3) ==> 6\n        multiply_with_carry(5, 1) ==> 6\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return (a * b) + (a * (b - 1)) % 10\n\n\ndef find_minimum_index(array):\n    \"\"\"Given an array of integers, return the index of the minimum element.\n\n     Example:\n        find_minimum_index([5, 2, 3, 4]) ==> 0\n        find_minimum_index([2, 5, 3, 4]) ==> 1\n    \"\"\"\n    return min(enumerate(array), key=lambda x: x[1])[0]",
      0.779296875
    ],
    [
      "return (num % 2, num // 2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return (num % 2, num // 2)",
      -0.85693359375
    ],
    [
      "if num == 0:\n        return (0, 0)\n\n    return even_odd_count(num // 10) + (num % 10, )\n\ndef solve(num):\n    \"\"\"Given an integer, return the number of digits that can be represented by the number.\n\n    Example:\n        solve(12) ==> 4\n        solve(123) ==> 4\n        solve(12345) ==> 4\n    \"\"\"\n    even_odd_count = even_odd_count(num)\n    return even_odd_count[0] + even_odd_count[1]\n\nif __name__ == '__main__':\n    num = int(input())\n    print(solve(num))",
      -0.85693359375
    ],
    [
      "even = 0\n    odd = 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        if rem % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef main():\n    num = 123\n    even, odd = even_odd_count(num)\n    print(even, odd)\n    even, odd = even_odd_count(num)\n    print(even, odd)\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "return (int(num) % 2, int(num) // 2)\n\n\ndef even_odd_count_recursive(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    The recursive implementation is not necessarily the fastest method.\n    \"\"\"\n    return (num % 2, num // 2)\n\n\nif __name__ == \"__main__\":\n    num = 12\n    print(even_odd_count(num))\n    print(even_odd_count_recursive(num))\n    num = -12\n    print(even_odd_count(num))\n    print(even_odd_count_recursive(num))",
      -0.85693359375
    ],
    [
      "even = 0\n    odd = 0\n    for i in range(num):\n        if num % i == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nif __name__ == '__main__':\n    print even_odd_count(12)\n    print even_odd_count(123)",
      -0.85693359375
    ],
    [
      "even = 0\n    odd = 0\n\n    while num > 0:\n        if num % 10 == 0:\n            odd += 1\n        else:\n            even += 1\n\n        num //= 10\n\n    return even, odd\n\nif __name__ == \"__main__\":\n    print(even_odd_count(123))\n    print(even_odd_count(1234))\n    print(even_odd_count(12345))\n    print(even_odd_count(123456))\n    print(even_odd_count(1234567))",
      -0.85693359375
    ],
    [
      "return (num & 1, num >> 1) if num else (0, 0)",
      -0.85693359375
    ],
    [
      "return (num % 2, num // 2)\n\ndef main():\n    num = int(input())\n    even_odd_count(num)\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "return (num // 10, num % 10)",
      -0.85693359375
    ],
    [
      "even, odd = 0, 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nif __name__ == '__main__':\n    print(even_odd_count(12))\n    print(even_odd_count(123))",
      -0.85693359375
    ],
    [
      "even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n            num /= 2\n        else:\n            odd += 1\n            num = num - 1\n    return even, odd\n\ndef test_even_odd_count():\n    assert even_odd_count(12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n\nif __name__ == \"__main__\":\n    test_even_odd_count()\n    print(\"Success!\")",
      -0.85693359375
    ],
    [
      "return (int(str(num)[-1]) % 2, int(str(num)[:-1]) % 2)\n\n\ndef get_even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (int(str(num)[-1]) % 2, int(str(num)[:-1]) % 2)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(123))\n    print(even_odd_count(1234))\n    print(even_odd_count(12345))\n    print(even_odd_count(123456))\n    print(even_odd_count(1234567))",
      -0.85693359375
    ],
    [
      "return (int(num/10**i) for i in range(1, int(num) + 1))\n\ndef odd_even_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        odd_even_count(12) ==> (2, 1)\n        odd_even_count(123) ==> (2, 2)\n    \"\"\"\n    return (int(num/10**i) for i in range(1, int(num) + 1))\n\nif __name__ == '__main__':\n    num = int(input())\n    print(*even_odd_count(num), *odd_even_count(num))",
      -0.85693359375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    else:\n        num = int(num)\n        num = str(num)\n        even = 0\n        odd = 0\n        for i in range(len(num)):\n            if num[i] == '0':\n                odd += 1\n            elif num[i] == '1':\n                even += 1\n        return (even, odd)",
      -0.85693359375
    ],
    [
      "return (sum(map(lambda x: x % 2, num)), sum(map(lambda x: x // 2, num)))\n\nif __name__ == '__main__':\n    num = int(input())\n    print(even_odd_count(num))",
      -0.85791015625
    ],
    [
      "odd_count = 0\n    even_count = 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return True if the number is a palindrome else False.\n\n     Example:\n        is_palindrome(-12) ==> False\n        is_palindrome(12) ==> True\n        is_palindrome(123) ==> True\n    \"\"\"\n    if num < 0:\n        return False\n    odd_count, even_count = even_odd_count(num)\n    return (odd_count == even_count)\n\n\ndef main():\n    \"\"\"\n    Main function to test the is_palindrome function.\n    \"\"\"\n    assert is_palindrome(12) == True\n    assert is_palindrome(-12) == False\n    assert is_palindrome(123) == True\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "if num == 0:\n        return (0, 0)\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        num, mod = divmod(num, 10)\n        if mod == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n    return (even_count, odd_count)\n\n\ndef main():\n    num = int(input())\n    even_odd_count = even_odd_count(num)\n    print('%d' % num)\n    print('%d' % even_odd_count[0])\n    print('%d' % even_odd_count[1])\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "return (len(str(num)) - len(str(num).replace(\"0\", \"\")), len(str(num).replace(\"0\", \"\")))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(12) == (2, 0)\n    assert even_odd_count(123) == (2, 1)\n    assert even_odd_count(0) == (0, 0)\n\n\nif __name__ == \"__main__\":\n    test_even_odd_count()",
      -0.8583984375
    ],
    [
      "even = 0\n    odd = 0\n    for x in range(len(str(num))):\n        if num % 10 == 0:\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)\n\ndef main():\n    num = int(input())\n    (even, odd) = even_odd_count(num)\n    print(even, odd)\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "return (num//10, num%10) if num >= 0 else (num%10, 10-num%10)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    # print s.countAndSay(2)\n    # print s.countAndSay(3)\n    # print s.countAndSay(4)\n    # print s.countAndSay(5)\n    # print s.countAndSay(6)\n    # print s.countAndSay(7)\n    # print s.countAndSay(8)\n    # print s.countAndSay(9)\n    # print s.countAndSay(10)\n    print s.countAndSay(11)",
      -0.8583984375
    ],
    [
      "return (num % 2, num // 2)",
      -0.8583984375
    ],
    [
      "even = 0\n    odd = 0\n    for i in range(0, len(str(num))):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\ndef main():\n    \"\"\"\n    Main function to test the even_odd_count function.\n    \"\"\"\n    print even_odd_count(123)\n    print even_odd_count(-12)\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "even_odd_count_result = (0, 0)\n    for i in range(1, int(num) + 1):\n        if num % i == 0:\n            even_odd_count_result = (even_odd_count_result[0] + 1, even_odd_count_result[1] + 1)\n    return even_odd_count_result\n\n\nif __name__ == '__main__':\n    print(even_odd_count(12))\n    print(even_odd_count(123))",
      -0.8583984375
    ],
    [
      "return (num % 2, num // 2)\n\nif __name__ == '__main__':\n    print(even_odd_count(3))",
      -0.8583984375
    ],
    [
      "num_digits = len(str(num))\n    even_num = 0\n    odd_num = 0\n    for i in range(num_digits):\n        if num % 10 == 0:\n            odd_num += 1\n        else:\n            even_num += 1\n    return (even_num, odd_num)\n\n\nif __name__ == \"__main__\":\n    print even_odd_count(12)\n    print even_odd_count(123)",
      -0.85888671875
    ],
    [
      "return (num % 2, num // 2)\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    print(even_odd_count(123))\n    print(even_odd_count(123))\n    print(even_odd_count(123))\n    print(even_odd_count(123))\n    print(even_odd_count(123))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "odd_count = 0\n    even_count = 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    for i in range(1, 100):\n        (even, odd) = even_odd_count(i)\n        print(i, even, odd)",
      -0.85888671875
    ],
    [
      "even = 0\n    odd = 0\n    while num > 0:\n        num, mod = divmod(num, 10)\n        if mod % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\ndef solve(num):\n    \"\"\"Given an integer. return the number of digits in the smallest number with that many digits.\n\n     Example:\n        solve(12) ==> 1\n        solve(123) ==> 2\n    \"\"\"\n    even_odd_count = even_odd_count(num)\n    return max(even_odd_count)\n\nif __name__ == '__main__':\n    num = int(input())\n    print(solve(num))",
      -0.85888671875
    ],
    [
      "if num == 0:\n        return (0, 0)\n    else:\n        even = 0\n        odd = 0\n        while num!= 0:\n            num, rem = divmod(num, 10)\n            if rem % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        return (even, odd)\n\n\ndef main():\n    \"\"\"Main function\"\"\"\n    num = int(input())\n    (even, odd) = even_odd_count(num)\n    print('{0} is {1} digit number'.format(num, num // 10))\n    print('{0} is {1} digit number'.format(even, even * 10))\n    print('{0} is {1} digit number'.format(odd, odd * 10))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "return (num // 10 % 10, num // 10 % 10 * 10)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(123))\n    print(even_odd_count(1234))\n    print(even_odd_count(12345))\n    print(even_odd_count(123456))\n    print(even_odd_count(1234567))",
      -0.85888671875
    ],
    [
      "even_digits = 0\n    odd_digits = 0\n    for digit in str(num):\n        if digit == '0':\n            continue\n        if digit == '1':\n            odd_digits += 1\n        else:\n            even_digits += 1\n    return (even_digits, odd_digits)",
      -0.85888671875
    ],
    [
      "return (int(num) % 2, int(num) // 2)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(12))\n    print(even_odd_count(123))",
      -0.85888671875
    ],
    [
      "odd_count = 0\n    even_count = 0\n    while num!= 0:\n        num, rem = divmod(num, 10)\n        if rem % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef main():\n    \"\"\"The main function\"\"\"\n    n = int(input())\n    for i in range(n):\n        a = int(input())\n        even_odd = even_odd_count(a)\n        print(even_odd)\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "return (int(num % 2), int(num / 2))\n\n\ndef is_prime(n):\n    \"\"\"Returns true if n is a prime number.\n\n    Example:\n        is_prime(2) ==> True\n        is_prime(3) ==> True\n        is_prime(4) ==> True\n        is_prime(5) ==> False\n        is_prime(6) ==> False\n        is_prime(7) ==> False\n        is_prime(8) ==> False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for x in range(3, int(n ** 0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True",
      -0.85888671875
    ],
    [
      "if num < 0:\n        raise ValueError(\"Can't have negative numbers!\")\n\n    even_odd_counts = [0, 0]\n    for i in range(1, int(num)):\n        if num % i == 0:\n            even_odd_counts[0] += 1\n        else:\n            even_odd_counts[1] += 1\n\n    return even_odd_counts\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return True if the number is a palindrome, False otherwise.\n\n    Example:\n        is_palindrome(123) ==> False\n        is_palindrome(12345) ==> True\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Can't have negative numbers!\")\n\n    num = str(num)\n    length = len(num)\n    if length % 2 == 1:\n        return False\n    for i in range(length / 2):\n        if num[i]!= num[length - i - 1]:\n            return False\n    return True",
      -0.85888671875
    ],
    [
      "return (num // 10 * 10, num // 10)",
      -0.85888671875
    ],
    [
      "return (num // 2, num % 2)",
      -0.85888671875
    ],
    [
      "return (num % 2, num // 2)",
      -0.85888671875
    ],
    [
      "return (num % 2, num // 2)\n\n\ndef main():\n    \"\"\"Main function\"\"\"\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "if num == 0:\n        return (0, 0)\n    count_even = 0\n    count_odd = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n\nif __name__ == '__main__':\n    print even_odd_count(12)\n    print even_odd_count(123)\n    print even_odd_count(0)\n    print even_odd_count(-12)\n    print even_odd_count(-123)",
      -0.85888671875
    ],
    [
      "return (int(num % 10), int((num % 100) / 10))\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(123))\n    print(even_odd_count(98765))\n    print(even_odd_count(0))",
      -0.85888671875
    ],
    [
      "# Get the number of digits in the number\n    digits = len(str(num))\n    # Get the number of even and odd digits\n    even = 0\n    odd = 0\n    # For each digit\n    for i in range(digits):\n        # If it's even\n        if num % 10 == 0:\n            even += 1\n        # If it's odd\n        else:\n            odd += 1\n        # Increment the number by 1\n        num = num / 10\n    # Return the even and odd number of digits\n    return (even, odd)\n\n\ndef main():\n    \"\"\"Main function\"\"\"\n    # Test cases\n    test_cases = (\n        (12, 1, 1),\n        (123, 2, 2),\n        (456, 3, 3),\n        (987, 4, 4),\n        (9999, 5, 5),\n        (12345, 6, 6),\n        (123456, 7, 7),\n        (1234567, 8, 8),\n        (12345678, 9, 9),\n        (123456789, 10, 10),\n        (1234567890, 11, 11),\n        (12345678901, 12, 12),\n        (123456789012, 13, 13),\n        (1234567890123, 14, 14),\n        (12345678901234, 15, 15),\n        (123456789012345, 16, 16),\n        (1234567890123456, 17, 17),\n        (12345678901234567, 18, 18),\n        (123456789012345678, 19, 19),\n        (1234567890123456789, 20, 20),\n        (12345678901234567890, 21, 21),\n    )\n\n    # For each test case\n    for test_case in test_cases:\n        # Get the number\n        num = test_case[0]\n        # Get the number of even and odd digits\n        (even, odd) = even_odd_count(num)\n        # Check that the result is correct\n        assert(even == test_case[1])\n        assert(odd == test_case[2])",
      -0.8984375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.isPalindrome(\"A man, a plan, a canal: Panama\"))\n    print(s.isPalindrome(\"race a car\"))\n    print(s.isPalindrome(\"1\"))\n    print(s.isPalindrome(\"1 2 3\"))\n    print(s.isPalindrome(\"1 3 2\"))\n    print(s.isPalindrome(\"1 2\"))\n    print(s.isPalindrome(\"1 2 3 4 5 6 7 8 9 10\"))\n    print(s.isPalindrome(\"11\"))\n    print(s.isPalindrome(\"a1b2c3\"))\n    print(s.isPalindrome(\"a1b2c3d4\"))\n    print(s.isPalindrome(\"a1b2c3d4e5\"))\n    print(s.isPalindrome(\"a1b2c3d4e5f6\"))\n    print(s.isPalindrome(\"\"))\n    print(s.isPalindrome(\" \"))",
      -0.92919921875
    ],
    [
      "return (num % 2 == 0, num // 2)\n\n\ndef is_prime(n):\n    \"\"\"Given an integer, return true if it is prime, else return false.\n\n     Example:\n        is_prime(5) ==> True\n        is_prime(17) ==> False\n        is_prime(0) ==> False\n        is_prime(1) ==> True\n        is_prime(2) ==> True\n        is_prime(3) ==> True\n        is_prime(4) ==> False\n        is_prime(5) ==> True\n        is_prime(6) ==> False\n        is_prime(7) ==> True\n        is_prime(8) ==> False\n        is_prime(9) ==> True\n    \"\"\"\n    if n < 2:\n        return False\n\n    if n == 2:\n        return True\n\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n# https://leetcode.com/problems/is-it-a-triangle/\n# Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\n\ndef min_path_sum(triangle):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if len(triangle) < 3:\n        return triangle[0][0]\n\n    min_sum = triangle[0][0]\n    for i in range(1, len(triangle)):\n        min_sum = min(min_sum, triangle[i][0]) + triangle[i][i]\n\n    for i in range(len(triangle)-2, -1, -1):\n        min_sum = min(min_sum, triangle[i][i]) + triangle[i+1][i]\n    return min_sum\n\n# https://leetcode.com/problems/unique-paths/\n# Given a binary tree and a sum, determine if the tree has a root-to-leaf path\n# such that",
      -1.642578125
    ],
    [
      "even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert even_odd_count(-1) == (0, 1)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(1) == (1, 0)\n    assert even_odd_count(2) == (1, 1)\n    assert even_odd_count(3) == (1, 1)\n    assert even_odd_count(4) == (2, 0)\n    assert even_odd_count(5) == (2, 1)\n    assert even_odd_count(6) == (2, 1)\n    assert even_odd_count(7) == (2, 1)\n    assert even_odd_count(8) == (3, 0)\n    assert even_odd_count(9) == (3, 1)\n    assert even_odd_count(10) == (3, 1)\n    assert even_odd_count(11) == (3, 1)\n    assert even_odd_count(12) == (3, 1)\n    assert even_odd_count(13) == (3, 1)\n    assert even_odd_count(14) == (3, 2)\n    assert even_odd_count(15) == (3, 2)\n    assert even_odd_count(16) == (3, 2)\n    assert even_odd_count(17) == (4, 0)\n    assert even_odd_count(18) == (4, 1)\n    assert even_odd_count(19) == (4, 1)\n    assert even_odd_count(20) == (4, 1)\n    assert even_odd_count(21) == (4, 1)\n    assert even_odd_count(22) == (4, 2)\n    assert even_odd_count(23) == (4,",
      -1.7060546875
    ],
    [
      "even_digits = 0\n    odd_digits = 0\n    for i in range(1, num+1):\n        if i % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n    return (even_digits, odd_digits)\n\nif __name__ == \"__main__\":\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(1) == (0, 1)\n    assert even_odd_count(2) == (1, 0)\n    assert even_odd_count(3) == (1, 1)\n    assert even_odd_count(4) == (2, 0)\n    assert even_odd_count(5) == (1, 2)\n    assert even_odd_count(6) == (2, 1)\n    assert even_odd_count(7) == (2, 2)\n    assert even_odd_count(8) == (3, 0)\n    assert even_odd_count(9) == (2, 3)\n    assert even_odd_count(10) == (3, 1)\n    assert even_odd_count(11) == (3, 2)\n    assert even_odd_count(12) == (3, 3)\n    assert even_odd_count(13) == (4, 0)\n    assert even_odd_count(14) == (3, 4)\n    assert even_odd_count(15) == (4, 1)\n    assert even_odd_count(16) == (4, 2)\n    assert even_odd_count(17) == (4, 3)\n    assert even_odd_count(18) == (4, 4)\n    assert even_odd_count(19) == (5, 0)\n    assert even_odd_count(20) == (4, 5)\n    assert even_odd_count(21) == (5, 1)\n    assert even_odd_count(22) == (5, 2)\n    assert even_odd_count(23) == (5, 3)\n    assert even_odd_count(24) == (5, 4)\n    assert even",
      -1.9140625
    ],
    [
      "return (int(num / 2), int(num / 2))\n\n\ndef get_odd_even_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of odd and even digits respectively.\n\n     Example:\n        get_odd_even_count(-12) ==> (1, 1)\n        get_odd_even_count(123) ==> (2, 1)\n    \"\"\"\n    return (int(num / 2), int(num / 2))\n\n\ndef get_max_min_sum(num):\n    \"\"\"Given an integer. return the maximum and minimum sum of the digits.\n\n     Example:\n        get_max_min_sum(-12) ==> (0, -12)\n        get_max_min_sum(123) ==> (123, 0)\n    \"\"\"\n    return (int(num / 2), int(num / 2))\n\n\ndef get_max_min_sum_2(num):\n    \"\"\"Given an integer. return the maximum and minimum sum of the digits.\n\n     Example:\n        get_max_min_sum(-12) ==> (0, -12)\n        get_max_min_sum(123) ==> (123, 0)\n    \"\"\"\n    return (int(num / 2), int(num / 2))\n\n\ndef get_max_min_sum_3(num):\n    \"\"\"Given an integer. return the maximum and minimum sum of the digits.\n\n     Example:\n        get_max_min_sum(-12) ==> (0, -12)\n        get_max_min_sum(123) ==> (123, 0)\n    \"\"\"\n    return (int(num / 2), int(num / 2))\n\n\ndef get_max_min_sum_4(num):\n    \"\"\"Given an integer. return the maximum and minimum sum of the digits.\n\n     Example:\n        get_max_min_sum(-12) ==> (0, -12)\n        get_max_min_sum(123) ==> (123, 0)\n    \"\"\"\n    return (int(num / 2), int(num / 2))\n\n\ndef get_max_min_sum_5(num):\n    \"\"\"Given an integer. return the maximum and minimum sum",
      -1.958984375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        num, digit = divmod(num, 10)\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef find_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        find_odd_count(12) ==> (1, 0)\n        find_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_odd_count = even_odd_count(num)\n    return (even_odd_count[0], (even_odd_count[0] - even_odd_count[1]))\n\n\ndef find_even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        find_even_odd_count(12) ==> (0, 1)\n        find_even_odd_count(123) ==> (2, 1)\n    \"\"\"\n    even_odd_count = even_odd_count(num)\n    return (even_odd_count[1], (even_odd_count[1] - even_odd_count[0]))\n\n\ndef find_num_digits(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        find_num_digits(123) ==> (2, 1)\n    \"\"\"\n    even_odd_count = even_odd_count(num)\n    return (num // even_odd_count[0], num % even_odd_count[0])\n\n\ndef find_even_odd_count_dec(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        find_even_odd_count_dec(12) ==> (0, 1)\n        find_even_odd_count_dec(123) ==> (2, 1",
      -2.03125
    ],
    [
      "return (num & 1, num & -2)\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return a boolean.\n\n     Example:\n        is_palindrome(1234) ==> True\n        is_palindrome(123) ==> True\n        is_palindrome(12345) ==> False\n    \"\"\"\n    odd_even_count = even_odd_count(num)\n    if odd_even_count[0] % 2 == 0:\n        return num == int(str(num)[::-1])\n    else:\n        return num!= int(str(num)[::-1])\n\n\ndef is_palindrome_reverse(num):\n    \"\"\"Given an integer. return a boolean.\n\n     Example:\n        is_palindrome_reverse(1234) ==> True\n        is_palindrome_reverse(123) ==> True\n        is_palindrome_reverse(12345) ==> False\n    \"\"\"\n    if num == 0:\n        return True\n    odd_even_count = even_odd_count(num)\n    return (odd_even_count[0] % 2 == 0) and (num == int(str(num)[::-1]))\n\n\ndef is_palindrome_iterative(num):\n    \"\"\"Given an integer. return a boolean.\n\n     Example:\n        is_palindrome_iterative(1234) ==> True\n        is_palindrome_iterative(123) ==> True\n        is_palindrome_iterative(12345) ==> False\n    \"\"\"\n    odd_even_count = even_odd_count(num)\n    if odd_even_count[0] % 2 == 0:\n        return num == int(str(num)[::-1])\n    else:\n        return num!= int(str(num)[::-1])\n\n\ndef is_palindrome_recursive(num):\n    \"\"\"Given an integer. return a boolean.\n\n     Example:\n        is_palindrome_recursive(1234) ==> True\n        is_palindrome_recursive(123) ==> True\n        is_palindrome_recursive(12345) ==> False",
      -2.0390625
    ],
    [
      "return (num // 10, num % 10)\n\n\nif __name__ == '__main__':\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(1) == (1, 0)\n    assert even_odd_count(2) == (1, 1)\n    assert even_odd_count(3) == (1, 1)\n    assert even_odd_count(4) == (1, 2)\n    assert even_odd_count(5) == (1, 2)\n    assert even_odd_count(6) == (1, 2)\n    assert even_odd_count(7) == (1, 2)\n    assert even_odd_count(8) == (1, 2)\n    assert even_odd_count(9) == (1, 2)\n    assert even_odd_count(10) == (2, 0)\n    assert even_odd_count(11) == (2, 0)\n    assert even_odd_count(12) == (2, 0)\n    assert even_odd_count(13) == (2, 1)\n    assert even_odd_count(14) == (2, 1)\n    assert even_odd_count(15) == (2, 1)\n    assert even_odd_count(16) == (2, 1)\n    assert even_odd_count(17) == (2, 1)\n    assert even_odd_count(18) == (2, 1)\n    assert even_odd_count(19) == (2, 1)\n    assert even_odd_count(20) == (2, 1)\n    assert even_odd_count(21) == (2, 1)\n    assert even_odd_count(22) == (2, 1)\n    assert even_odd_count(23) == (2, 1)\n    assert even_odd_count(24) == (2, 1)\n    assert even_odd_count(25) == (2, 1)\n    assert even_odd_count(26) == (2, 1)\n    assert even_odd_count(27) == (2, 1)\n    assert even_odd_count(28) == (",
      -2.08984375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    num_even = num // 2\n    num_odd = num - num_even\n    return (num_even, num_odd)\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert even_odd_count(0) == (0, 0), \"Example\"\n    assert even_odd_count(1) == (1, 0), \"Example\"\n    assert even_odd_count(2) == (1, 1), \"Example\"\n    assert even_odd_count(3) == (2, 0), \"Example\"\n    assert even_odd_count(4) == (2, 1), \"Example\"\n    assert even_odd_count(5) == (2, 1), \"Example\"\n    assert even_odd_count(6) == (2, 2), \"Example\"\n    assert even_odd_count(7) == (3, 0), \"Example\"\n    assert even_odd_count(8) == (3, 1), \"Example\"\n    assert even_odd_count(9) == (3, 1), \"Example\"\n    assert even_odd_count(10) == (3, 2), \"Example\"\n    assert even_odd_count(11) == (3, 2), \"Example\"\n    assert even_odd_count(12) == (3, 2), \"Example\"\n    assert even_odd_count(13) == (3, 3), \"Example\"\n    assert even_odd_count(14) == (4, 0), \"Example\"\n    assert even_odd_count(15) == (4, 1), \"Example\"\n    assert even_odd_count(16) == (4, 1), \"Example\"\n    assert even_odd_count(17) == (4, 2), \"Example\"\n    assert even_odd_count(18) == (4, 2), \"Example\"\n    assert even_odd_count(19) == (4, 2), \"Example\"\n    assert even_odd_count(20) == (4, 3), \"Example\"\n    assert even_odd_count(21) == (",
      -2.109375
    ],
    [
      "if num < 0:\n        raise ValueError('num must be non-negative')\n    num = str(num)\n    even = 0\n    odd = 0\n    for i in range(0, len(num)):\n        if num[i] == '0':\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)\n\n\ndef count_digits(num):\n    \"\"\"Given an integer. return a tuple that has the number of digits in the number.\n\n     Example:\n        count_digits(-12) ==> (2, 1)\n        count_digits(123) ==> (3, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('num must be non-negative')\n    num = str(num)\n    even = 0\n    odd = 0\n    for i in range(0, len(num)):\n        if num[i] == '0':\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)\n\n\ndef count_odds(num):\n    \"\"\"Given an integer. return a tuple that has the number of odds in the number.\n\n     Example:\n        count_odds(-12) ==> (0, 1)\n        count_odds(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('num must be non-negative')\n    num = str(num)\n    odd = 0\n    for i in range(0, len(num)):\n        if num[i] == '1':\n            odd += 1\n        else:\n            odd += 1\n    return (odd, 0)\n\n\ndef count_evens(num):\n    \"\"\"Given an integer. return a tuple that has the number of evens in the number.\n\n     Example:\n        count_evens(-12) ==> (0, 1)\n        count_evens(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        raise ValueError('num must be non-negative')\n    num = str(num)\n    even = 0\n    for i in range(0, len(num)):\n        if num[i] ==",
      -2.458984375
    ],
    [
      "return (int(num / 10), int(num % 10))\n\n\ndef even_odd_count_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    This function is the same as above, but uses a nested function.\n    \"\"\"\n    return (even_odd_count(num / 10), even_odd_count(num % 10))\n\n\ndef even_odd_count_3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    This function is the same as above, but uses a nested function.\n    \"\"\"\n    return (even_odd_count(num / 10), even_odd_count(num % 10))\n\n\ndef even_odd_count_4(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    This function is the same as above, but uses a nested function.\n    \"\"\"\n    return (even_odd_count(num / 10), even_odd_count(num % 10))\n\n\ndef even_odd_count_5(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    This function is the same as above, but uses a nested function.\n    \"\"\"\n    return (even_odd_count(num / 10), even_odd_count(num % 10))\n\n\ndef even_odd_count_6(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    This function is the same as above, but uses a nested function.\n    \"\"\"\n    return (even_odd_count(num / 10), even_odd_count(num % 10))\n\n\ndef even_odd_count_7(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    This function is the same as above, but uses a nested function.\n    \"\"\"\n    return (even_odd_count(num / 10), even_odd_count(num % 10))\n\n\ndef even_odd_count_8(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.",
      -2.861328125
    ],
    [
      "num = int(num)\n    even_count = 0\n    odd_count = 0\n    while num:\n        num, rem = divmod(num, 2)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef even_odd_count_with_list(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_with_list(-12) ==> (1, 1)\n        even_odd_count_with_list(123) ==> (1, 2)\n    \"\"\"\n    num = int(num)\n    even_count = 0\n    odd_count = 0\n    for i in range(len(str(num))):\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num / 10\n    return (even_count, odd_count)\n\n\ndef print_even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        print_even_odd_count(-12) ==> (1, 1)\n        print_even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_odd_count = even_odd_count(num)\n    print('%d is %d even digits' % (num, even_odd_count[0]))\n    print('%d is %d odd digits' % (num, even_odd_count[1]))\n\n\ndef main():\n    \"\"\"Main\"\"\"\n    #print_even_odd_count(-12)\n    #print_even_odd_count(123)\n    print_even_odd_count_with_list(123)\n\n\nif __name__ == '__main__':\n    main()",
      -2.876953125
    ],
    [
      "even_count = 0\n    odd_count = 0\n    for i in range(0, num):\n        if num % i == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef even_odd_sum(num):\n    \"\"\"Given an integer. return a tuple that has the sum of even and odd digits.\n\n     Example:\n        even_odd_sum(-12) ==> -6\n        even_odd_sum(123) ==> -2\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for i in range(0, num):\n        if num % i == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return (even_sum, odd_sum)\n\n\ndef even_odd_product(num):\n    \"\"\"Given an integer. return a tuple that has the product of even and odd digits.\n\n     Example:\n        even_odd_product(-12) ==> 6\n        even_odd_product(123) ==> 24\n    \"\"\"\n    even_product = 1\n    odd_product = 1\n    for i in range(0, num):\n        if num % i == 0:\n            even_product *= i\n        else:\n            odd_product *= i\n    return (even_product, odd_product)\n\n\ndef even_odd_quotient(num):\n    \"\"\"Given an integer. return a tuple that has the quotient of even and odd digits.\n\n     Example:\n        even_odd_quotient(-12) ==> -1\n        even_odd_quotient(123) ==> 2\n    \"\"\"\n    even_quotient = 1\n    odd_quotient = 1\n    for i in range(0, num):\n        if num % i == 0:\n            even_quotient *= i\n        else:\n            odd_quotient *= i\n    return (even_quotient, odd_quotient)\n\n\ndef even_odd_modulus(num):\n    \"\"\"Given an integer. return a tuple that has the modulus of even and odd digits.\n\n     Example:",
      -2.990234375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        if num % 10 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num / 10\n    return (even_count, odd_count)\n\ndef even_odd_count_recursive(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_recursive(-12) ==> (1, 1)\n        even_odd_count_recursive(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        if num % 10 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num / 10\n    return (even_count, odd_count)\n\ndef even_odd_count_recursive_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_recursive_2(-12) ==> (1, 1)\n        even_odd_count_recursive_2(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        if num % 10 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num / 10\n    return (even_count, odd_count)\n\ndef even_odd_count_recursive_3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_recursive_3(-12) ==> (1, 1)\n        even_odd_count_recursive_3(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:",
      -3.099609375
    ],
    [
      "if num is None:\n        return None\n    else:\n        even_odd_count_num = 0\n        odd_even_count_num = 0\n        for digit in str(num):\n            if digit == '0':\n                continue\n            if digit == '1':\n                odd_even_count_num += 1\n            else:\n                even_odd_count_num += 1\n        return even_odd_count_num, odd_even_count_num\n\n\ndef is_valid_binary_number(num):\n    \"\"\"Given an integer. return True if it is valid binary number else False.\n\n     Example:\n        is_valid_binary_number(0) ==> True\n        is_valid_binary_number(-1) ==> False\n        is_valid_binary_number(1) ==> True\n        is_valid_binary_number(2) ==> True\n        is_valid_binary_number(3) ==> True\n        is_valid_binary_number(4) ==> False\n        is_valid_binary_number(5) ==> True\n        is_valid_binary_number(6) ==> True\n        is_valid_binary_number(7) ==> True\n        is_valid_binary_number(8) ==> False\n        is_valid_binary_number(9) ==> True\n        is_valid_binary_number(10) ==> False\n        is_valid_binary_number(11) ==> False\n        is_valid_binary_number(12) ==> False\n        is_valid_binary_number(13) ==> False\n        is_valid_binary_number(14) ==> False\n        is_valid_binary_number(15) ==> False\n        is_valid_binary_number(16) ==> True\n        is_valid_binary_number(17) ==> True\n        is_valid_binary_number(18) ==> True\n        is_valid_binary_number(19) ==> True\n        is_valid_binary_number(20) ==> False\n        is_valid_binary_number(21) ==> False\n        is_valid_binary_number(22) ==> False\n        is_valid_binary_number",
      -3.111328125
    ],
    [
      "even = 0\n    odd = 0\n    for i in range(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef count_digits(num):\n    \"\"\"Given an integer. return a tuple that has the number of digits.\n\n    Example:\n        count_digits(123) ==> (3, 1)\n        count_digits(12) ==> (2, 1)\n    \"\"\"\n    return (len(str(num)), 1) if num > 0 else (0, 0)\n\n\ndef count_digits_with_mod(num, mod):\n    \"\"\"Given an integer and a mod, return a tuple that has the number of digits and their sum.\n\n    Example:\n        count_digits_with_mod(123, 10) ==> (3, 1)\n        count_digits_with_mod(12, 10) ==> (2, 1)\n    \"\"\"\n    return (len(str(num % mod)), (num % mod))\n\n\ndef count_digits_with_mod_2(num):\n    \"\"\"Given an integer, return a tuple that has the number of digits and their sum.\n\n    Example:\n        count_digits_with_mod_2(123) ==> (3, 1)\n        count_digits_with_mod_2(12) ==> (2, 1)\n    \"\"\"\n    return (len(str(num)), num)\n\n\ndef count_digits_with_mod_3(num):\n    \"\"\"Given an integer, return a tuple that has the number of digits and their sum.\n\n    Example:\n        count_digits_with_mod_3(123) ==> (3, 1)\n        count_digits_with_mod_3(12) ==> (2, 1)\n    \"\"\"\n    return (len(str(num)), num)\n\n\ndef count_digits_with_mod_4(num):\n    \"\"\"Given an integer, return a tuple that has the number of digits and their sum.\n\n    Example:\n        count_digits_with_mod_4(123) ==> (3, 1)\n        count_digits_with",
      -3.201171875
    ],
    [
      "even = 0\n    odd = 0\n    while num > 0:\n        if num % 10 == 0:\n            odd += 1\n        else:\n            even += 1\n        num /= 10\n    return even, odd\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return true if it is a palindrome, false otherwise.\n\n     Example:\n        is_palindrome(123) ==> True\n        is_palindrome(12345) ==> False\n    \"\"\"\n    # TODO: write your code here\n    return num == str(num)\n\n\ndef is_palindrome_recur(num):\n    \"\"\"Given an integer. return true if it is a palindrome, false otherwise.\n\n     Example:\n        is_palindrome_recur(123) ==> True\n        is_palindrome_recur(12345) ==> False\n    \"\"\"\n    # TODO: write your code here\n    if num == 0:\n        return False\n    elif num == 1:\n        return True\n    else:\n        return is_palindrome_recur(num / 10) and is_palindrome_recur(num % 10)\n\nif __name__ == \"__main__\":\n    num = int(input())\n    print(\"{} is a palindrome if it is divisible by 10\".format(num))\n    print(\"{} is a palindrome if it is divisible by 11\".format(num))\n    print(\"{} is a palindrome if it is divisible by 12\".format(num))\n    print(\"{} is a palindrome if it is divisible by 13\".format(num))\n    print(\"{} is a palindrome if it is divisible by 14\".format(num))\n    print(\"{} is a palindrome if it is divisible by 15\".format(num))\n    print(\"{} is a palindrome if it is divisible by 16\".format(num))\n    print(\"{} is a palindrome if it is divisible by 17\".format(num))\n    print(\"{} is a palindrome if it is divisible by 18\".format(num))\n    print(\"{} is a pal",
      -3.50390625
    ],
    [
      "even, odd = 0, 0\n    while num!= 0:\n        num, mod = divmod(num, 2)\n        if mod == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. Return a boolean that indicates whether the integer is a palindrome or not.\n\n     Example:\n        is_palindrome(123) ==> False\n        is_palindrome(-123) ==> True\n    \"\"\"\n    even, odd = even_odd_count(num)\n    if even == odd:\n        return True\n    else:\n        return False\n\n\ndef is_palindrome_recursive(num):\n    \"\"\"Given an integer. Return a boolean that indicates whether the integer is a palindrome or not.\n\n     Example:\n        is_palindrome_recursive(123) ==> False\n        is_palindrome_recursive(-123) ==> True\n    \"\"\"\n    if num == 0:\n        return True\n    else:\n        return is_palindrome_recursive(num // 2) and is_palindrome_recursive(num % 2)\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    print(is_palindrome(123))\n    print(is_palindrome(-123))\n    print(is_palindrome_recursive(123))\n    print(is_palindrome_recursive(-123))\n\n\nif __name__ == '__main__':\n    main()",
      -3.51953125
    ],
    [
      "if num == 0:\n        return (0, 0)\n    if num < 0:\n        num = -num\n    num_str = str(num)\n    even_count = 0\n    odd_count = 0\n    for i in range(len(num_str)):\n        if num_str[i] == '0':\n            odd_count += 1\n        else:\n            even_count += 1\n    return (even_count, odd_count)\n\n\ndef get_digit_count(num, num_digits):\n    \"\"\"Given an integer, return a tuple that has the number of digits in the integer.\n    Example:\n        get_digit_count(1234, 4) ==> (4, 0)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        num = -num\n    num_str = str(num)\n    if len(num_str) > num_digits:\n        return (0, 0)\n    else:\n        return (len(num_str), 0)\n\n\ndef is_valid_num(num, num_digits):\n    \"\"\"Given an integer, return a tuple that has the number of digits in the integer.\n    Example:\n        is_valid_num(1234, 4) ==> (4, 0)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        num = -num\n    num_str = str(num)\n    if len(num_str) > num_digits:\n        return (0, 0)\n    else:\n        return (len(num_str), 0)\n\n\ndef is_odd_or_even_num(num):\n    \"\"\"Given an integer, return a tuple that has the number of digits in the integer.\n    Example:\n        is_odd_or_even_num(1234) ==> (4, 0)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        num = -num\n    num_str = str(num)\n    odd_even_count = even_odd_count(num)\n    even_odd_",
      -3.556640625
    ],
    [
      "odd_count = 0\n    even_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n\n\ndef is_palindrome(num):\n    \"\"\"Given a integer. return True if it is a palindrome and False if it is not.\n\n    Example:\n        is_palindrome(5) ==> True\n        is_palindrome(123) ==> True\n        is_palindrome(1234) ==> True\n        is_palindrome(12345) ==> False\n    \"\"\"\n    odd_even_count = even_odd_count(num)\n    odd_count, even_count = odd_even_count\n    return odd_count == even_count\n\n\ndef is_palindrome_recursive(num):\n    \"\"\"Given a integer. return True if it is a palindrome and False if it is not.\n\n    Example:\n        is_palindrome_recursive(5) ==> True\n        is_palindrome_recursive(123) ==> True\n        is_palindrome_recursive(1234) ==> True\n        is_palindrome_recursive(12345) ==> False\n    \"\"\"\n    if num == 0:\n        return True\n    odd_even_count = even_odd_count(num)\n    odd_count, even_count = odd_even_count\n    if odd_count == even_count:\n        return is_palindrome_recursive(num // 2)\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    assert is_palindrome(5) == True\n    assert is_palindrome(123) == True\n    assert is_palindrome(1234) == True\n    assert is_palindrome(12345) == False\n    assert is_palindrome_recursive(5) == True\n    assert is_palindrome_recursive(123) == True\n    assert is_palindrome_recursive(1234) == True\n    assert is_palindrome_recursive",
      -3.583984375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    if num == 1:\n        return (1, 0)\n    if num < 0:\n        return (0, num)\n    elif num < 10:\n        return (1, num)\n    else:\n        return (2, num - 1)\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return True if it is a palindrome, else False.\n\n     Example:\n        is_palindrome(-12) ==> True\n        is_palindrome(123) ==> True\n        is_palindrome(1234) ==> False\n    \"\"\"\n    if num == 0:\n        return True\n    if num == 1:\n        return True\n    if num < 0:\n        return False\n    elif num < 10:\n        return True\n    else:\n        return num == int(str(num)[::-1])\n\ndef reverse_palindrome(num):\n    \"\"\"Given an integer. return a reversed palindrome.\n\n     Example:\n        reverse_palindrome(-12) ==> 12\n        reverse_palindrome(123) ==> 321\n        reverse_palindrome(1234) ==> 3412\n    \"\"\"\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num < 0:\n        return -num\n    elif num < 10:\n        return num\n    else:\n        return int(str(num)[::-1])\n\ndef is_valid_number(num):\n    \"\"\"Given an integer. return True if it is a valid number, else False.\n\n     Example:\n        is_valid_number(-12) ==> False\n        is_valid_number(123) ==> True\n        is_valid_number(1234) ==> True\n    \"\"\"\n    if num == 0:\n        return False\n    elif num == 1:\n        return True\n    elif num < 0:\n        return False\n    elif num < 10:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking",
      -3.85546875
    ],
    [
      "num = str(num)\n    even = 0\n    odd = 0\n    for i, c in enumerate(num):\n        if c == '0':\n            continue\n        if c == '1':\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)\n\ndef even_odd_count_python(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_python(-12) ==> (1, 1)\n        even_odd_count_python(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for i, c in enumerate(num):\n        if c == '0':\n            continue\n        if c == '1':\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(-123) == (-1, -2)\n    assert even_odd_count_python(123) == (1, 2)\n    assert even_odd_count_python(-123) == (-1, -2)\n    assert even_odd_count_python(0) == (0, 0)\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n    print(even_odd_count_python(-12))\n    print(even_odd_count_python(123))\n\nif __name__ == '__main__':\n    main()",
      -4.12109375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    if num == 1:\n        return (1, 0)\n    if num == 2:\n        return (0, 1)\n    if num == 3:\n        return (1, 1)\n    odd_count = 0\n    even_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef even_odd_count_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_2(-12) ==> (1, 1)\n        even_odd_count_2(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num == 1:\n        return (1, 0)\n    if num == 2:\n        return (0, 1)\n    if num == 3:\n        return (1, 1)\n    odd_count = 0\n    even_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef even_odd_count_3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_3(-12) ==> (1, 1)\n        even_odd_count_3(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num == 1:\n        return (1, 0)\n    if num == 2:\n        return (0, 1)\n    if num == 3:\n        return (1, 1)\n    odd_count = 0\n    even_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            even_count += 1",
      -4.265625
    ],
    [
      "count_even = 0\n    count_odd = 0\n    for i in range(0, len(str(num))):\n        if num % 10 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n\n\ndef is_prime(num):\n    \"\"\"Given an integer. return True if the integer is prime, False otherwise.\n\n    Note: this function assumes that num is a positive integer.\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0:\n        return False\n    i = 5\n    while i <= num//2:\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_pentagon(num):\n    \"\"\"Given an integer. return True if the number is a pentagon, False otherwise.\n\n    Note: this function assumes that num is a positive integer.\n    \"\"\"\n    if num < 9:\n        return False\n    if num % 2 == 0:\n        return False\n    i = 5\n    while i <= num//2:\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_hexagon(num):\n    \"\"\"Given an integer. return True if the number is a hexagon, False otherwise.\n\n    Note: this function assumes that num is a positive integer.\n    \"\"\"\n    if num < 9:\n        return False\n    if num % 2 == 0:\n        return False\n    i = 5\n    while i <= num//2:\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_heptagon(num):\n    \"\"\"Given an integer. return True if the number is a heptagon, False otherwise.\n\n    Note: this function assumes that num is a positive integer.\n    \"\"\"\n    if num < 9:\n        return False\n    if num % 2 == 0:\n        return False\n    i = 5\n    while i <= num//2:\n        if num",
      -4.38671875
    ],
    [
      "return (len(str(num)), len(str(num)[::-1]))\n\n\ndef check_for_duplicates(lst):\n    \"\"\"Given a list of strings. return a list of unique strings.\n\n     Example:\n        check_for_duplicates(['a', 'b', 'a']) ==> ['a', 'b']\n    \"\"\"\n    unique = []\n    for i in range(len(lst)):\n        if lst[i] not in unique:\n            unique.append(lst[i])\n    return unique\n\n\ndef get_unique_elements(lst):\n    \"\"\"Given a list of strings. return a list of unique elements.\n\n     Example:\n        get_unique_elements(['a', 'b', 'a']) ==> ['a', 'b']\n    \"\"\"\n    unique = []\n    for i in range(len(lst)):\n        if lst[i] not in unique:\n            unique.append(lst[i])\n    return unique\n\n\ndef get_unique_elements_with_duplicates(lst):\n    \"\"\"Given a list of strings. return a list of unique elements with duplicates.\n\n     Example:\n        get_unique_elements_with_duplicates(['a', 'b', 'a']) ==> ['a', 'b', 'a']\n    \"\"\"\n    unique = []\n    for i in range(len(lst)):\n        if lst[i] not in unique:\n            if lst[i] not in unique:\n                unique.append(lst[i])\n    return unique\n\n\ndef get_unique_elements_with_duplicates_in_a_list(lst):\n    \"\"\"Given a list of strings. return a list of unique elements with duplicates.\n\n     Example:\n        get_unique_elements_with_duplicates_in_a_list(['a', 'b', 'a']) ==> ['a', 'b', 'a']\n    \"\"\"\n    unique = []\n    for i in range(len(lst)):\n        if lst[i] not in unique:\n            if lst[i] not in unique:",
      -4.58984375
    ],
    [
      "even_count = 0\n    odd_count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n    return even_count, odd_count\n\n\ndef even_odd_count_new(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_new(-12) ==> (1, 1)\n        even_odd_count_new(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n    return even_count, odd_count\n\n\ndef test_even_odd_count():\n    assert even_odd_count(12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n\n\ndef test_even_odd_count_new():\n    assert even_odd_count_new(12) == (1, 1)\n    assert even_odd_count_new(123) == (1, 2)\n    assert even_odd_count_new(0) == (0, 0)\n\n\ndef main():\n    test_even_odd_count()\n    test_even_odd_count_new()\n\n\nif __name__ == '__main__':\n    main()",
      -4.74609375
    ],
    [
      "even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 2)\n        if rem == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef digit_sum(num):\n    \"\"\"Given an integer. return a tuple that has the sum of the digits.\n\n     Example:\n        digit_sum(-12) ==> (-1, 2)\n        digit_sum(123) ==> (1, 3)\n    \"\"\"\n    sum = 0\n    while num:\n        sum += num % 10\n        num //= 10\n    return sum\n\n\ndef digit_product(num):\n    \"\"\"Given an integer. return a tuple that has the product of the digits.\n\n     Example:\n        digit_product(-12) ==> (1, 4)\n        digit_product(123) ==> (1, 3)\n    \"\"\"\n    prod = 1\n    while num:\n        prod *= num % 10\n        num //= 10\n    return prod\n\n\ndef factorial(num):\n    \"\"\"Given an integer. return a tuple that has the factorial of the digits.\n\n     Example:\n        factorial(-12) ==> (-1, 4)\n        factorial(123) ==> (1, 3)\n    \"\"\"\n    if num == 0:\n        return (1, 1)\n    prod = 1\n    while num:\n        prod *= num\n        num //= 10\n    return (prod, digit_product(prod))\n\n\ndef factorial_sum(num):\n    \"\"\"Given an integer. return a tuple that has the sum of the factorials.\n\n     Example:\n        factorial_sum(-12) ==> (-1, 4)\n        factorial_sum(123) ==> (1, 3)\n    \"\"\"\n    fact = factorial(num)\n    sum = 0\n    while fact:\n        sum += fact[0] * fact[1]\n        fact = fact[0], fact[1] * fact[1]\n    return sum\n\n\ndef fibonacci(num):\n    \"\"\"Given an integer. return a tuple that has the fibonacci number of the digits.\n\n     Example:",
      -4.90625
    ],
    [
      "count = 0\n    while num:\n        num, mod = divmod(num, 2)\n        count += mod\n    return count\n\n\ndef even_odd_count_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    This version uses a binary search to find the number of digits in the number.\n    \"\"\"\n    count = 0\n    while num:\n        if num & 1:\n            count += 1\n        num >>= 1\n    return count\n\n\ndef even_odd_count_3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    This version uses a loop to find the number of digits in the number.\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    for num in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147",
      -5.14453125
    ],
    [
      "even_count = 0\n    odd_count = 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef even_odd_count_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num:\n        num, rem = divmod(num, 2)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef even_odd_count_3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef even_odd_count_4(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num:\n        num, rem = divmod(num, 2)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef even_odd_count_5(num",
      -5.4140625
    ],
    [
      "return (int(str(num).count('1')), int(str(num).count('0')))\n\ndef is_palindrome(num):\n    \"\"\"Given a number. return True if the number is a palindrome else False.\n\n    Example:\n        is_palindrome(-1) ==> False\n        is_palindrome(123) ==> True\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef sum_of_digits(num):\n    \"\"\"Given a number. return the sum of the digits of the number.\n\n    Example:\n        sum_of_digits(123) ==> 9\n    \"\"\"\n    return sum(map(int, str(num)))\n\ndef factorial(num):\n    \"\"\"Given a number. return the factorial of the number.\n\n    Example:\n        factorial(5) ==> 120\n    \"\"\"\n    return math.factorial(num)\n\ndef power_of_ten(num):\n    \"\"\"Given a number. return the power of 10 of the number.\n\n    Example:\n        power_of_ten(10) ==> 100\n    \"\"\"\n    return math.pow(10, num)\n\ndef power_of_ten_to_string(num):\n    \"\"\"Given a number. return the power of 10 to the string of the number.\n\n    Example:\n        power_of_ten_to_string(10) ==> '100'\n    \"\"\"\n    return str(power_of_ten(num))\n\ndef power_of_ten_to_string_with_zeros(num):\n    \"\"\"Given a number. return the power of 10 to the string of the number.\n\n    Example:\n        power_of_ten_to_string_with_zeros(10) ==> '1.00'\n    \"\"\"\n    return str(power_of_ten_to_string(num))\n\ndef power_of_ten_to_string_with_zeros_and_comma(num):\n    \"\"\"Given a number. return the power of 10 to the string of the number.\n\n    Example:\n        power_of_ten_to_string_with_zeros_and_comma(10) ==",
      -5.54296875
    ],
    [
      "even = 0\n    odd = 0\n    for i in range(0, len(str(num))):\n        if str(num)[i] == '0':\n            odd += 1\n        else:\n            even += 1\n    return even, odd\n\n\ndef number_of_digits(num):\n    \"\"\"Given an integer. return the number of digits in the number.\n\n    Example:\n        number_of_digits(1234) ==> 4\n    \"\"\"\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return sum(even_odd_count(num))\n\n\ndef number_of_decimals(num):\n    \"\"\"Given an integer. return the number of decimals in the number.\n\n    Example:\n        number_of_decimals(1234) ==> 2\n    \"\"\"\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 0\n    else:\n        return number_of_digits(num) - 1\n\n\ndef is_multiple_of(num, multiple):\n    \"\"\"Given an integer and a multiple. return True if the number is a multiple of the multiple.\n\n    Example:\n        is_multiple_of(1234, 4) ==> True\n        is_multiple_of(123, 4) ==> False\n    \"\"\"\n    return num % multiple == 0\n\n\ndef is_divisible_by(num, divisor):\n    \"\"\"Given an integer and a divisor. return True if the number is divisible by the divisor.\n\n    Example:\n        is_divisible_by(1234, 4) ==> True\n        is_divisible_by(123, 4) ==> False\n    \"\"\"\n    return num % divisor == 0\n\n\ndef is_prime(num):\n    \"\"\"Given an integer, return True if the number is prime.\n\n    Example:\n        is_prime(1234) ==> False\n        is_prime(12) ==> True\n        is_prime(1) ==> False\n        is_prime(0) ==>",
      -5.875
    ],
    [
      "count_even = 0\n    count_odd = 0\n\n    for i in range(1, len(str(num)) + 1):\n        if num % 10 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return count_even, count_odd\n\n\ndef even_odd_count_reversed(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_reversed(-12) ==> (2, 1)\n        even_odd_count_reversed(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count_odd += 1\n        else:\n            count_even += 1\n\n    return count_odd, count_even\n\n\ndef even_odd_count_reversed_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_reversed_2(-12) ==> (1, 2)\n        even_odd_count_reversed_2(123) ==> (1, 1)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, len(str(num)) + 1):\n        if num % 10 == 0:\n            count_odd += 1\n        else:\n            count_even += 1\n\n    return count_odd, count_even\n\n\ndef even_odd_count_reversed_3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_reversed_3(-12) ==> (2, 1)\n        even_odd_count_reversed_3(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            count_odd +=",
      -5.94921875
    ],
    [
      "odd_num = 0\n    even_num = 0\n    while num > 0:\n        num, mod = divmod(num, 10)\n        if mod == 0:\n            odd_num += 1\n        else:\n            even_num += 1\n    return even_num, odd_num\n\n\ndef count_digits(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        count_digits(-12) ==> (1, 1)\n        count_digits(123) ==> (1, 2)\n    \"\"\"\n    odd_num, even_num = 0, 0\n    while num > 0:\n        odd_num += 1\n        num, mod = divmod(num, 10)\n        if mod == 0:\n            even_num += 1\n    return even_num, odd_num\n\n\ndef count_digits_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        count_digits_2(-12) ==> (1, 1)\n        count_digits_2(123) ==> (1, 2)\n    \"\"\"\n    odd_num, even_num = 0, 0\n    while num > 0:\n        odd_num += 1\n        num, mod = divmod(num, 10)\n        if mod == 0:\n            even_num += 1\n    return even_num, odd_num\n\n\ndef even_odd_count_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_2(-12) ==> (1, 1)\n        even_odd_count_2(123) ==> (1, 2)\n    \"\"\"\n    odd_num = 0\n    even_num = 0\n    while num > 0:\n        num, mod = divmod(num, 10)\n        if mod == 0:\n            odd_num += 1\n        else:\n            even_num += 1\n    return even_num, odd_num\n\n\ndef count_digits_3(num):\n    \"\"\"Given an integer. return a tuple",
      -5.99609375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n    return (even_count, odd_count)\n\n\ndef number_of_digits(num):\n    \"\"\"Given an integer, return the number of digits in the integer.\n\n     Example:\n        number_of_digits(-12) ==> 3\n        number_of_digits(123) ==> 4\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        return len(str(num))\n\n\ndef number_of_digits_in_string(num):\n    \"\"\"Given an integer, return the number of digits in the string.\n\n     Example:\n        number_of_digits_in_string(123) ==> 4\n        number_of_digits_in_string(123456789) ==> 9\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        return len(str(num))\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. Return True if the integer is a palindrome, False otherwise.\n\n     Example:\n        is_palindrome(-12) ==> True\n        is_palindrome(123) ==> False\n    \"\"\"\n    if num == 0:\n        return True\n    else:\n        return str(num) == str(num)[::-1]\n\n\ndef is_palindrome_string(num):\n    \"\"\"Given an integer, return True if the integer is a palindrome, False otherwise.\n\n     Example:\n        is_palindrome_string(123) ==> True\n        is_palindrome_string(123456789) ==> False\n    \"\"\"\n    if num == 0:\n        return True\n    else:\n        return str(num) == str(num)[::-1]\n\n\ndef is_prime(num):\n    \"\"\"Given an integer, return True if the integer is prime, False otherwise.\n\n     Example:\n        is_prime(-12) ==>",
      -6.1484375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    if num < 0:\n        num = -num\n    count = [0, 0]\n    while num:\n        if num % 2 == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n        num //= 2\n    return count\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return True if the number is a palindrome.\n\n    Note:\n        The palindrome is defined as a number that reads the same when read from\n        either end. If the number is negative, it is considered to be a positive\n        number.\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return True\n    count = even_odd_count(num)\n    return count[0] == count[1]\n\ndef is_palindrome_recur(num, low, high):\n    \"\"\"Given an integer. return True if the number is a palindrome.\n\n    Note:\n        The palindrome is defined as a number that reads the same when read from\n        either end. If the number is negative, it is considered to be a positive\n        number.\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return True\n    if low >= high:\n        return False\n    mid = (low + high) // 2\n    if num < mid:\n        return is_palindrome_recur(num, low, mid)\n    if num > mid:\n        return is_palindrome_recur(num, mid+1, high)\n    return is_palindrome_recur(num, low, mid)\n\ndef is_palindrome_recur_iter(num, low, high):\n    \"\"\"Given an integer. return True if the number is a palindrome.\n\n    Note:\n        The palindrome is defined as a number that reads the same when read from\n        either end. If the number is negative, it is considered to be a positive\n        number.\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return True",
      -6.25
    ],
    [
      "num = str(num)\n    if num[0] == '-':\n        num = num[1:]\n    count = [0, 0]\n    for i in range(len(num)):\n        if num[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n    return count\n\n\ndef sum_of_evens(num):\n    \"\"\"Given an integer. return the sum of all the even digits.\n\n    Example:\n        sum_of_evens(12) ==> 10\n        sum_of_evens(-12) ==> -10\n    \"\"\"\n    return int(sum([i for i in str(num) if i == '0']))\n\n\ndef sum_of_odds(num):\n    \"\"\"Given an integer. return the sum of all the odd digits.\n\n    Example:\n        sum_of_odds(12) ==> 10\n        sum_of_odds(-12) ==> -10\n    \"\"\"\n    return int(sum([i for i in str(num) if i == '1']))\n\n\ndef sum_of_even_odds(num):\n    \"\"\"Given an integer. return the sum of all the even digits and the sum of all the odd digits.\n\n    Example:\n        sum_of_even_odds(12) ==> 10\n        sum_of_even_odds(-12) ==> -10\n    \"\"\"\n    return sum_of_evens(num) + sum_of_odds(num)\n\n\ndef sum_of_all_digits(num):\n    \"\"\"Given an integer. return the sum of all the digits.\n\n    Example:\n        sum_of_all_digits(12) ==> 12\n        sum_of_all_digits(-12) ==> -12\n    \"\"\"\n    return sum([int(i) for i in str(num)])\n\n\ndef sum_of_digits(num):\n    \"\"\"Given an integer. return the sum of all the digits.\n\n    Example:\n        sum_of_digits(12) ==> 12\n        sum_of_digits(-12) ==> -12\n    \"\"\"\n    return sum([int(i)",
      -6.69921875
    ],
    [
      "odd_count, even_count = 0, 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n\n\ndef get_digit_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of digits.\n\n    Example:\n        get_digit_count(123) ==> (3, 1)\n        get_digit_count(12345) ==> (4, 2)\n    \"\"\"\n    odd_count, even_count = 0, 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count, even_count\n\n\ndef get_digit_sum(num):\n    \"\"\"Given an integer. return the sum of digits.\n\n    Example:\n        get_digit_sum(123) ==> 12\n        get_digit_sum(12345) ==> 145\n    \"\"\"\n    odd_sum, even_sum = 0, 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even_sum += 1\n        else:\n            odd_sum += 1\n    return odd_sum, even_sum\n\n\ndef get_digit_sum_odd_even(num):\n    \"\"\"Given an integer. return the sum of odd digits and even digits.\n\n    Example:\n        get_digit_sum_odd_even(123) ==> 12\n        get_digit_sum_odd_even(12345) ==> 145\n    \"\"\"\n    odd_sum, even_sum = 0, 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        if rem == 0:\n            even_sum += 1\n        else:\n            odd_sum += 1\n    return odd_sum, even_sum\n\n\ndef is_pandigital(num):\n    \"\"\"Given an integer. return True if it is a pandigital and False otherwise.\n\n    Example:\n        is",
      -6.72265625
    ],
    [
      "if num == 0:\n        return (0, 0)\n    elif num < 0:\n        return (0, 0)\n    odd_count = 0\n    even_count = 0\n    for i in range(len(str(num))):\n        if num % 10 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\ndef is_prime(num):\n    \"\"\"Return True if num is prime.\n    \"\"\"\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0 or num % 5 == 0:\n        return False\n    i = 6\n    while i <= num / 2:\n        if num % i == 0:\n            return False\n        if num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef get_prime_factors(num):\n    \"\"\"Return a list of prime factors of num.\n    \"\"\"\n    if num == 1:\n        return [1]\n    if num == 2:\n        return [2]\n    if num < 2 or num % 2 == 0:\n        return []\n    if num < 9:\n        return [2, 3]\n    i = 6\n    factors = []\n    while i <= num / 2:\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num / i)\n        i += 6\n    if num % 2 == 0:\n        factors.append(2)\n    if num % 3 == 0:\n        factors.append(3)\n    if num % 5 == 0:\n        factors.append(5)\n    return factors\n\ndef get_prime_factors_with_num(num):\n    \"\"\"Given a number. return a list of prime factors with the number.\n    \"\"\"\n    factors = []\n    if num == 1:\n        return [1]\n    if num == 2:\n        return [2]\n    if num < 2",
      -6.8203125
    ],
    [
      "return (int(num / 10) * 2, num % 10)\n\n\ndef even_odd_sum(num):\n    \"\"\"Given an integer. return a tuple that has the sum of even and odd digits respectively.\n\n     Example:\n        even_odd_sum(-12) ==> (-1, 1)\n        even_odd_sum(123) ==> (0, 1)\n    \"\"\"\n    even, odd = even_odd_count(num)\n    return (even + odd, odd + even)\n\n\ndef even_odd_sum_with_zeros(num):\n    \"\"\"Given an integer. return a tuple that has the sum of even and odd digits respectively,\n    but include zeros.\n\n     Example:\n        even_odd_sum_with_zeros(-12) ==> (1, 1)\n        even_odd_sum_with_zeros(123) ==> (1, 2)\n    \"\"\"\n    even, odd = even_odd_count(num)\n    return (even + odd, odd + even)\n\n\ndef even_odd_product(num):\n    \"\"\"Given an integer. return a tuple that has the product of even and odd digits respectively.\n\n     Example:\n        even_odd_product(-12) ==> (-1, 1)\n        even_odd_product(123) ==> (1, 1)\n    \"\"\"\n    even, odd = even_odd_count(num)\n    return (even * odd, odd * even)\n\n\ndef even_odd_product_with_zeros(num):\n    \"\"\"Given an integer. return a tuple that has the product of even and odd digits respectively,\n    but include zeros.\n\n     Example:\n        even_odd_product_with_zeros(-12) ==> (1, 1)\n        even_odd_product_with_zeros(123) ==> (1, 2)\n    \"\"\"\n    even, odd = even_odd_count(num)\n    return (even * odd, odd * even)\n\n\ndef even_odd_sum_with_zeros_with_negatives(num):\n    \"\"\"Given an integer. return a tuple that has the sum of even and odd digits respectively,\n    but include zeros and negatives.\n\n     Example:",
      -6.9609375
    ],
    [
      "odds = 0\n    evens = 0\n    for i in range(len(str(num))):\n        if num % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n\ndef even_odd_sum(num):\n    \"\"\"Given an integer. return the sum of the number of even and odd digits.\n\n     Example:\n        even_odd_sum(-12) ==> 1\n        even_odd_sum(123) ==> 3\n    \"\"\"\n    evens = 0\n    odds = 0\n    for i in range(len(str(num))):\n        if num % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return odds + evens\n\ndef even_odd_product(num):\n    \"\"\"Given an integer. return the product of the number of even and odd digits.\n\n     Example:\n        even_odd_product(-12) ==> 2\n        even_odd_product(123) ==> 6\n    \"\"\"\n    evens = 0\n    odds = 0\n    for i in range(len(str(num))):\n        if num % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return odds * evens\n\ndef even_odd_sum_product(num):\n    \"\"\"Given an integer. return the sum of the number of even and odd digits multiplied by the product of the number of even and odd digits.\n\n     Example:\n        even_odd_sum_product(-12) ==> 1\n        even_odd_sum_product(123) ==> 3\n    \"\"\"\n    evens = 0\n    odds = 0\n    for i in range(len(str(num))):\n        if num % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return odds * evens * 2\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    print(even_odd_count(100))\n    print(even_odd_sum(100))\n    print(even_odd_product(100))\n    print(even_odd_sum_product(100))\n\nif __name__ == '",
      -7.84375
    ],
    [
      "if num == 0:\n        return (0, 0)\n    counts = [0, 0]\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            counts[0] += 1\n        else:\n            counts[1] += 1\n    return counts\n\ndef even_odd_count_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    counts = [0, 0]\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            counts[0] += 1\n            counts[1] += 1\n        else:\n            counts[0] += 1\n            counts[1] += 1\n    return counts\n\nif __name__ == \"__main__\":\n    print(even_odd_count(12))\n    print(even_odd_count(123))",
      -8.2109375
    ],
    [
      "return (num // 2, num % 2)\n\n\ndef even_odd_count_recur(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_recur(-12) ==> (1, 1)\n        even_odd_count_recur(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    return (num // 2, num % 2) + even_odd_count_recur(num // 2) + even_odd_count_recur(num % 2)\n\n\nif __name__ == '__main__':\n    num = -12\n    assert(even_odd_count(num) == (1, 1))\n    num = 123\n    assert(even_odd_count(num) == (1, 2))\n    num = 1234\n    assert(even_odd_count(num) == (1, 2))\n    num = 12345\n    assert(even_odd_count(num) == (1, 3))\n    num = 123456\n    assert(even_odd_count(num) == (1, 3))\n    num = 1234567\n    assert(even_odd_count(num) == (1, 4))\n    num = 12345678\n    assert(even_odd_count(num) == (1, 4))\n    num = 123456789\n    assert(even_odd_count(num) == (1, 5))\n    num = 1234567890\n    assert(even_odd_count(num) == (1, 5))\n    num = 12345678901\n    assert(even_odd_count(num) == (1, 6))\n    num = 123456789012\n    assert(even_odd_count(num) == (1, 6))\n    num = 1234567890123\n    assert(even_odd_count(num) == (1, 7))\n    num = 12345678901234\n    assert(even_odd_count(num) == (1, 7))\n    num = 123456789012345\n    assert(even_odd_count(",
      -8.4609375
    ],
    [
      "return (int(num / 10) % 2, int(num / 10) % 2)\n\n\ndef is_prime(num):\n    \"\"\"Given an integer. return a boolean.\n\n    Example:\n        is_prime(12) ==> True\n        is_prime(10) ==> False\n        is_prime(11) ==> False\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return a boolean.\n\n    Example:\n        is_palindrome(12) ==> True\n        is_palindrome(11) ==> False\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return is_palindrome(num // 2)\n    if num % 2 == 1:\n        return not is_palindrome(num // 2)\n    return not is_palindrome(num // 2)\n\n\ndef is_palindrome_rev(num):\n    \"\"\"Given an integer. return a boolean.\n\n    Example:\n        is_palindrome_rev(12) ==> True\n        is_palindrome_rev(11) ==> False\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return is_palindrome_rev(num // 2)\n    if num % 2 == 1:\n        return not is_palindrome_rev(num // 2)\n    return not is_palindrome_rev(num // 2)\n\n\ndef is_palindrome_rev_easy(num):\n    \"\"\"Given an integer. return a boolean.\n\n    Example:\n        is_palindrome_rev_easy(12) ==> True\n        is_palindrome_rev_easy(11) ==> False\n    \"\"\"\n    if num <",
      -8.578125
    ],
    [
      "return (num & 1, num & 2)\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return True if the integer is a palindrome, otherwise False.\n    \"\"\"\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\n\ndef is_palindrome_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        is_palindrome_count(-12) ==> (1, 1)\n        is_palindrome_count(123) ==> (1, 2)\n    \"\"\"\n    return (num & 1, num & 2)\n\n\ndef is_palindrome_with_odd_even_count(num):\n    \"\"\"Given an integer. return True if the integer is a palindrome, otherwise False.\n    \"\"\"\n    num_str = str(num)\n    odd_even_count = even_odd_count(num)\n    return (num_str[::-1] == num_str[::-1]) and odd_even_count\n\n\nif __name__ == '__main__':\n    # The test cases are taken from leetcode.com/problem\n\n    # Input: num = 100\n    # Output: True\n    num = 100\n    assert is_palindrome(num) == True\n    assert is_palindrome_count(num) == (1, 1)\n\n    # Input: num = 1234\n    # Output: True\n    num = 1234\n    assert is_palindrome(num) == True\n    assert is_palindrome_count(num) == (1, 1)\n\n    # Input: num = 123\n    # Output: False\n    num = 123\n    assert is_palindrome(num) == False\n    assert is_palindrome_count(num) == (1, 1)\n\n    # Input: num = 12345\n    # Output: True\n    num = 12345\n    assert is_palindrome(num) == True\n    assert is_palindrome_count(num) == (1, 2)\n\n    # Input: num = 12345678\n    # Output: True",
      -8.8046875
    ],
    [
      "count = 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        count += 1\n    return count, count % 2\n\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, else False.\n\n    >>> is_prime(1)\n    True\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    False\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    True\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    x = 5\n    y = 2\n    while y < n:\n        x = x + y\n        y = x + 1\n        if x > n:\n            return True\n    return False\n\n\ndef is_prime_gen(n):\n    \"\"\"Return True if n is prime, else False.\n\n    >>> is_prime_gen(1)\n    True\n    >>> is_prime_gen(2)\n    True\n    >>> is_prime_gen(3)\n    True\n    >>> is_prime_gen(4)\n    False\n    >>> is_prime_gen(5)\n    False\n    >>> is_prime_gen(6)\n    False\n    >>> is_prime_gen(7)\n    True\n    >>> is_prime_",
      -8.9296875
    ],
    [
      "even = 0\n    odd = 0\n    while num:\n        num, mod = divmod(num, 10)\n        if mod % 2:\n            odd += 1\n        else:\n            even += 1\n    return even, odd\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. Return True if the integer is a palindrome. Otherwise, return False.\n\n     Example:\n        is_palindrome(1234) ==> True\n        is_palindrome(1234) ==> True\n        is_palindrome(123) ==> False\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return True\n    odd, even = even_odd_count(num)\n    if even == odd:\n        return True\n    return False\n\n\ndef is_palindrome_recursive(num):\n    \"\"\"Given an integer. Return True if the integer is a palindrome. Otherwise, return False.\n\n     Example:\n        is_palindrome_recursive(1234) ==> True\n        is_palindrome_recursive(1234) ==> True\n        is_palindrome_recursive(123) ==> False\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return True\n    odd, even = even_odd_count(num)\n    if even == odd:\n        return True\n    return is_palindrome_recursive(num // 10) and is_palindrome_recursive(num % 10)\n\n\ndef is_palindrome_iterative(num):\n    \"\"\"Given an integer. Return True if the integer is a palindrome. Otherwise, return False.\n\n     Example:\n        is_palindrome_iterative(1234) ==> True\n        is_palindrome_iterative(1234) ==> True\n        is_palindrome_iterative(123) ==> False\n    \"\"\"\n    if num < 0:\n        num = -num\n    if num == 0:\n        return True\n    odd, even = even_odd_count(num)\n    if even == odd:\n        return True\n    return is_palind",
      -9.625
    ],
    [
      "even_count, odd_count = 0, 0\n    while num:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n    return (even_count, odd_count)\n\n\ndef digit_sum(num):\n    \"\"\"Given an integer. return the sum of digits.\n\n     Example:\n        digit_sum(12) ==> 10\n        digit_sum(123) ==> 23\n    \"\"\"\n    sum = 0\n    while num:\n        sum += num % 10\n        num //= 10\n    return sum\n\n\ndef is_prime(num):\n    \"\"\"Check if the number is prime.\n\n     Example:\n        is_prime(2) ==> False\n        is_prime(3) ==> True\n        is_prime(4) ==> True\n        is_prime(5) ==> False\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n    return True\n\n\ndef is_palindrome(num):\n    \"\"\"Check if the number is palindrome.\n\n     Example:\n        is_palindrome(12) ==> False\n        is_palindrome(123) ==> True\n    \"\"\"\n    if num < 2:\n        return False\n    if num % 10 == 0:\n        return is_palindrome(num // 10)\n    if num % 10 == 1:\n        return not is_palindrome(num // 10 * 10)\n    return not is_palindrome(num // 10 * 10) and not is_palindrome(num // 10 * 10 + 1)\n\n\ndef is_rotated(num):\n    \"\"\"Check if the number is rotated.\n\n     Example:\n        is_rotated(12) ==> False\n        is_rotated(123) ==> True\n    \"\"\"\n    if num < 2:\n        return False",
      -10.46875
    ],
    [
      "if num == 0:\n        return (0, 0)\n    else:\n        odd = 0\n        even = 0\n        for i in range(len(str(num))):\n            if str(num)[i] == '1':\n                odd += 1\n            else:\n                even += 1\n        return (even, odd)\n\ndef print_digits(num):\n    \"\"\"Given an integer. print all digits.\n\n     Example:\n        print_digits(-12) ==> 1 2 3 4 5 6 7 8 9\n        print_digits(123) ==> 1 2 3 4 5 6 7 8 9 0 1\n    \"\"\"\n    if num == 0:\n        return \"0\"\n    else:\n        return \"\".join(str(num)[i] for i in range(len(str(num))))\n\ndef check_if_palindrome(num):\n    \"\"\"Given an integer. return true if the number is a palindrome else return false.\n\n     Example:\n        check_if_palindrome(-12) ==> True\n        check_if_palindrome(123) ==> False\n    \"\"\"\n    if num == 0:\n        return False\n    else:\n        return str(num)[::-1] == str(num)\n\ndef reverse_number(num):\n    \"\"\"Given an integer. reverse the number.\n\n     Example:\n        reverse_number(-12) ==> 12\n        reverse_number(123) ==> 321\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return str(num)[::-1]\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    print(\"Part 1:\")\n    print(\"Enter a number\")\n    num = int(input())\n\n    print(\"Part 2:\")\n    print(\"Even and odd count\")\n    print(even_odd_count(num))\n    print(\"Print digits\")\n    print(print_digits(num))\n    print(\"Check if palindrome\")\n    print(check_if_palindrome(num))\n    print(\"Reverse number\")\n    print(reverse_number(num))\n\n    print(\"Part 3:\")\n    print(\"Even and odd count\")\n    print(",
      -10.9609375
    ],
    [
      "num_even = 0\n    num_odd = 0\n    while num > 0:\n        num_even += num % 10\n        num_odd += num % 10\n        num //= 10\n    return (num_even, num_odd)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(0))\n    print(even_odd_count(1))\n    print(even_odd_count(2))\n    print(even_odd_count(3))\n    print(even_odd_count(4))\n    print(even_odd_count(5))\n    print(even_odd_count(6))\n    print(even_odd_count(7))\n    print(even_odd_count(8))\n    print(even_odd_count(9))\n    print(even_odd_count(10))\n    print(even_odd_count(11))\n    print(even_odd_count(12))\n    print(even_odd_count(13))\n    print(even_odd_count(14))\n    print(even_odd_count(15))\n    print(even_odd_count(16))\n    print(even_odd_count(17))\n    print(even_odd_count(18))\n    print(even_odd_count(19))\n    print(even_odd_count(20))\n    print(even_odd_count(21))\n    print(even_odd_count(22))\n    print(even_odd_count(23))\n    print(even_odd_count(24))\n    print(even_odd_count(25))\n    print(even_odd_count(26))\n    print(even_odd_count(27))\n    print(even_odd_count(28))\n    print(even_odd_count(29))\n    print(even_odd_count(30))\n    print(even_odd_count(31))\n    print(even_odd_count(32))\n    print(even_odd_count(33))\n    print(even_odd_count(34))\n    print(even_odd_count(35))\n    print(even_odd_count(36))",
      -11.4453125
    ],
    [
      "if num == 0:\n        return (0, 0)\n\n    num = str(num)\n    count = 0\n    for i in range(len(num)):\n        if i % 2 == 0:\n            count += 1\n        else:\n            count += 1\n            if count == 2:\n                break\n    return (count, len(num))\n\n\ndef get_sum(digits):\n    \"\"\"Given a list of digits, return the sum of all the digits.\n\n    Example:\n        get_sum([1, 2, 3]) ==> 6\n    \"\"\"\n    sum = 0\n    for digit in digits:\n        sum += digit\n    return sum\n\n\ndef get_count(digits):\n    \"\"\"Given a list of digits, return the sum of all the digits.\n\n    Example:\n        get_count([1, 2, 3]) ==> 3\n    \"\"\"\n    count = 0\n    for digit in digits:\n        if digit == 0:\n            break\n        count += 1\n    return count\n\n\ndef get_sum_even_odd(digits):\n    \"\"\"Given a list of digits, return the sum of all the digits.\n\n    Example:\n        get_sum_even_odd([1, 2, 3]) ==> 6\n    \"\"\"\n    sum = 0\n    for digit in digits:\n        if digit == 0:\n            break\n        sum += digit\n        if sum % 2 == 0:\n            sum = sum / 2\n        else:\n            sum = sum / 2\n            sum = sum + 1\n    return sum\n\n\ndef get_sum_even_odd_count(digits):\n    \"\"\"Given a list of digits, return the sum of all the digits.\n\n    Example:\n        get_sum_even_odd_count([1, 2, 3]) ==> (1, 2)\n    \"\"\"\n    count = 0\n    sum = 0\n    for digit in digits:\n        if digit == 0:\n            break\n        sum += digit\n        if sum % 2 == 0:\n            sum = sum / 2\n        else:\n            sum = sum / 2\n            sum = sum + 1\n        count += 1\n    return (count, sum)\n\n\ndef get_sum_even_odd_count_rec",
      -11.5390625
    ],
    [
      "count = 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        count += 1\n    return (count % 2, count / 2)\n\ndef count_digits(num):\n    \"\"\"Given an integer. return a tuple that has the number of digits.\n\n     Example:\n        count_digits(-12) ==> (1, 1)\n        count_digits(123) ==> (2, 2)\n    \"\"\"\n    count = 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        count += 1\n    return count\n\ndef sum_of_even_odd_digits(num):\n    \"\"\"Given an integer. return a tuple that has the sum of the even and odd digits.\n\n     Example:\n        sum_of_even_odd_digits(-12) ==> (1, 1)\n        sum_of_even_odd_digits(123) ==> (1, 2)\n    \"\"\"\n    even, odd = even_odd_count(num)\n    return sum(even_odd_digits(num)[even:]) + sum(even_odd_digits(num)[odd:])\n\ndef sum_of_digits(num):\n    \"\"\"Given an integer. return a tuple that has the sum of digits.\n\n     Example:\n        sum_of_digits(-12) ==> (1, 1)\n        sum_of_digits(123) ==> (2, 2)\n    \"\"\"\n    count = 0\n    while num > 0:\n        num, rem = divmod(num, 10)\n        count += 1\n    return count\n\ndef sum_of_even_odd_digits_2(num):\n    \"\"\"Given an integer. return a tuple that has the sum of the even and odd digits.\n\n     Example:\n        sum_of_even_odd_digits_2(-12) ==> (1, 1)\n        sum_of_even_odd_digits_2(123) ==> (1, 2)\n    \"\"\"\n    even, odd = even_odd_count(num)\n    return sum(even_odd_digits(num)[even:]) + sum(even_odd",
      -12.484375
    ],
    [
      "even = 0\n    odd = 0\n    while num:\n        if num % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 2\n    return (even, odd)\n\n\ndef even_odd_sum(num):\n    \"\"\"Given an integer. return the sum of even and odd digits respectively.\n\n    Example:\n        even_odd_sum(123) ==> 123\n        even_odd_sum(45) ==> 45\n        even_odd_sum(0) ==> 0\n    \"\"\"\n    even = 0\n    odd = 0\n    while num:\n        if num % 2:\n            odd += num % 2\n        else:\n            even += num % 2\n        num //= 2\n    return (even, odd)\n\n\ndef even_odd_product(num):\n    \"\"\"Given an integer. return the product of even and odd digits respectively.\n\n    Example:\n        even_odd_product(123) ==> 123\n        even_odd_product(45) ==> 495\n        even_odd_product(0) ==> 0\n    \"\"\"\n    even = 0\n    odd = 0\n    while num:\n        if num % 2:\n            odd *= num % 2\n        else:\n            even *= num % 2\n        num //= 2\n    return (even, odd)\n\n\ndef even_odd_sum_product(num):\n    \"\"\"Given an integer. return the sum of even and odd digits respectively.\n\n    Example:\n        even_odd_sum_product(123) ==> 123\n        even_odd_sum_product(45) ==> 495\n        even_odd_sum_product(0) ==> 0\n    \"\"\"\n    even = 0\n    odd = 0\n    while num:\n        if num % 2:\n            odd += num % 2\n        else:\n            even += num % 2\n        num //= 2\n    return (even * num, odd * num)\n\n\nif __name__ == '__main__':\n    assert even_odd_sum(123) == (1, 1)\n    assert even_odd_sum(45) == (1, 2)\n    assert even_odd_sum(0) == (0, 0)",
      -13.140625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}