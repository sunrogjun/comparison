{
  "problem": {
    "task_id": "HumanEval/80",
    "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
    "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n",
    "entry_point": "is_happy",
    "docstring": "",
    "problem_id": 80
  },
  "model_name": "codegen-2b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return len(s) >= 3 and all(s[i]!= s[i+1] and s[i]!= s[i+2] for i in range(len(s) - 2))\n\n\ndef main():\n    \"\"\"Read input from stdin and print the answer to stdout.\"\"\"\n    s = input().rstrip()\n    print(is_happy(s))\n\nif __name__ == '__main__':\n    main()",
      6.3125
    ],
    [
      "if len(s) < 3: return False\n    if len(s) == 3: return True\n    if s[0] == s[1] and s[1] == s[2]: return False\n    if s[0] == s[1]: return False\n    return True\n\ndef is_happy_iter(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_iter(a) => False\n    is_happy_iter(aa) => False\n    is_happy_iter(abcd) => True\n    is_happy_iter(aabb) => False\n    is_happy_iter(adb) => True\n    is_happy_iter(xyy) => False\n    \"\"\"\n    if len(s) < 3: return False\n    if len(s) == 3: return True\n    if s[0] == s[1] and s[1] == s[2]: return False\n    if s[0] == s[1]: return False\n    return True\n\ndef is_happy_dict(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_dict(a) => False\n    is_happy_dict(aa) => False\n    is_happy_dict(abcd) => True\n    is_happy_dict(aabb) => False\n    is_happy_dict(adb) => True\n    is_happy_dict(xyy) => False\n    \"\"\"\n    if len(s) < 3: return False\n    if len(s) == 3: return True\n    if s[0] == s[1] and s[1] == s[2]: return False\n    if s[0] == s[1]: return False\n    return True\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing",
      3.591796875
    ],
    [
      "return len(s) >= 3 and all(set(s[i:i+3]) for i in range(len(s)-2))\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return is_happy(s) and len(s) >= 3\n\nif __name__ == \"__main__\":\n    assert(solve(\"a\") == False)\n    assert(solve(\"aa\") == False)\n    assert(solve(\"abcd\") == True)\n    assert(solve(\"aabb\") == False)\n    assert(solve(\"adb\") == True)\n    assert(solve(\"xyy\") == False)",
      3.556640625
    ],
    [
      "s_len = len(s)\n    if s_len < 3:\n        return False\n    else:\n        s_set = set(s)\n        if len(s_set) == s_len:\n            return True\n        else:\n            return False\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_happy(\"a\") == False, \"1\"\n    assert is_happy(\"aa\") == False, \"2\"\n    assert is_happy(\"abcd\") == True, \"3\"\n    assert is_happy(\"aabb\") == False, \"4\"\n    assert is_happy(\"adb\") == True, \"5\"\n    assert is_happy(\"xyy\") == False, \"6\"\n    assert is_happy(\"aadb\") == True, \"7\"\n    assert is_happy(\"\") == True, \"8\"",
      2.966796875
    ],
    [
      "# if len(s) < 3, then return False\n    # if s[0] == s[1] and s[1] == s[2], then return False\n    # if s[0]!= s[1] and s[1]!= s[2] and s[0]!= s[2], then return True\n    return len(s) >= 3 and all([s[0] == s[1] and s[1] == s[2] or s[0]!= s[2] and s[1]!= s[2] or s[0]!= s[2]])\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        print(is_happy(s))",
      1.568359375
    ],
    [
      "if len(s) < 3:\n        return False\n    if s[0] == s[1] and s[1] == s[2]:\n        return False\n    return True\n\ndef main():\n    s = input().strip()\n    print(is_happy(s))\n\nif __name__ == '__main__':\n    main()",
      1.3828125
    ],
    [
      "if len(s) < 3:\n        return False\n    l = list(s)\n    for i in range(len(l) - 2):\n        if l[i] == l[i+1] and l[i+1] == l[i+2]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    s = \"aabbccdd\"\n    print is_happy(s)\n    s = \"aaabbccdd\"\n    print is_happy(s)\n    s = \"aabbccddee\"\n    print is_happy(s)\n    s = \"aabbccddeeff\"\n    print is_happy(s)",
      0.84814453125
    ],
    [
      "if not s: return False\n    if len(s) < 3: return False\n    seen = set()\n    for i in range(len(s)):\n        if s[i] not in seen:\n            seen.add(s[i])\n            if i < len(s)-3 and s[i:i+3] not in seen: return False\n    return True\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if not s: return False\n    if len(s) < 3: return False\n    seen = set()\n    for i in range(len(s)):\n        if s[i] not in seen:\n            seen.add(s[i])\n            if i < len(s)-3 and s[i:i+3] not in seen: return False\n    return True\n\nif __name__ == \"__main__\":\n    for s in [\n        \"a\",\n        \"aa\",\n        \"abcd\",\n        \"aabb\",\n        \"adb\",\n        \"xyy\"\n    ]:\n        print(\"is_happy({}) = {}\".format(s, is_happy(s)))\n        print(\"is_happy_2({}) = {}\".format(s, is_happy_2(s)))",
      0.63818359375
    ],
    [
      "return len(s) >= 3 and set(s) == set(s[:-1])\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      0.264404296875
    ],
    [
      "return len(s) >= 3 and all(s[i:i+3]!= s[i+1:i+2] for i in range(len(s) - 2))\n\n\ndef main():\n    s = input().strip()\n    print(is_happy(s))\n\n\nif __name__ == '__main__':\n    main()",
      0.239990234375
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return s[0] == s[1] and s[1] == s[2]\n    for i in range(1, len(s) - 2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n    return True\n\ndef is_happy_rec(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_rec(a) => False\n    is_happy_rec(aa) => False\n    is_happy_rec(abcd) => True\n    is_happy_rec(aabb) => False\n    is_happy_rec(adb) => True\n    is_happy_rec(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return s[0] == s[1] and s[1] == s[2]\n    for i in range(1, len(s) - 2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n    return True\n\ndef main():\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n\nif __name__ == \"__main__\":\n    main()",
      0.2381591796875
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(3, len(s) + 1):\n        if s[:i] in s[i:]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    test_cases = [\n        (\"\", True),\n        (\"a\", True),\n        (\"aa\", True),\n        (\"abc\", True),\n        (\"adb\", False),\n        (\"xyy\", False),\n    ]\n    for test_case in test_cases:\n        print(\"is_happy({}) = {}\".format(test_case[0], is_happy(test_case[0])))",
      0.137451171875
    ],
    [
      "if len(s) < 3:\n        return False\n    n = len(s)\n    for i in range(0, n-2):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n    return True\n\ndef solve(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    if s == s[::-1]:\n        return True\n    for i in range(0, n-2):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n    return True\n\ndef main():\n    print(solve(\"xyy\"))\n    print(solve(\"aabb\"))\n    print(solve(\"adb\"))\n    print(solve(\"xyy\"))\n    print(solve(\"xyy\"))\n    print(solve(\"aabb\"))\n    print(solve(\"adb\"))\n    print(solve(\"xyy\"))\n    print(solve(\"xyy\"))\n    print(solve(\"adb\"))\n    print(solve(\"xyy\"))\n    print(solve(\"xyy\"))\n    print(solve(\"adb\"))\n    print(solve(\"xyy\"))\n    print(solve(\"xyy\"))\n    print(solve(\"adb\"))\n    print(solve(\"xyy\"))\n    print(solve(\"xyy\"))\n    print(solve(\"adb\"))\n    print(solve(\"xyy\"))\n    print(solve(\"xyy\"))\n    print(solve(\"adb\"))\n    print(solve(\"xyy\"))\n    print(solve(\"xyy\"))",
      0.1275634765625
    ],
    [
      "letters = list(s)\n    if len(letters) < 3:\n        return False\n    if len(letters) == 3 and letters[0] == letters[1] and letters[1] == letters[2]:\n        return True\n    for i in range(len(letters)):\n        if letters[i] in letters[i+1:]:\n            return False\n    return True\n\ndef main():\n    s = 'aabbccdd'\n    print(is_happy(s))\n\nif __name__ == '__main__':\n    main()",
      -0.0261688232421875
    ],
    [
      "return len(s) >= 3 and all(set(s[i:i+3]) == set(s[:i]) for i in range(len(s)-3+1))\n\n\ndef is_happy_rec(s):\n    if len(s) == 0:\n        return True\n\n    if len(s) == 1:\n        return is_happy(s)\n\n    if not is_happy(s[:3]):\n        return False\n\n    return is_happy_rec(s[3:]) and is_happy_rec(s[:3])\n\n\ndef is_happy_iter(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return is_happy_iter(s[:3]) and is_happy_iter(s[3:])\n\n\nif __name__ == '__main__':\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy_iter(\"a\"))\n    print(is_happy_iter(\"aa\"))\n    print(is_happy_iter(\"abcd\"))\n    print(is_happy_iter(\"aabb\"))\n    print(is_happy_iter(\"adb\"))\n    print(is_happy_iter(\"xyy\"))\n    print(is_happy_rec(\"a\"))\n    print(is_happy_rec(\"aa\"))\n    print(is_happy_rec(\"abcd\"))\n    print(is_happy_rec(\"aabb\"))\n    print(is_happy_rec(\"adb\"))\n    print(is_happy_rec(\"xyy\"))",
      -0.08587646484375
    ],
    [
      "length = len(s)\n    if length < 3:\n        return False\n    if length % 3!= 0:\n        return False\n    for i in range(0, length-2, 3):\n        if s[i:i+3] == s[i+2:i+4]:\n            return False\n    return True\n\ndef is_happy_recur(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) % 3!= 0:\n        return False\n    if is_happy_recur(s[:len(s)/3]):\n        return True\n    for i in range(len(s)/3, len(s)-1):\n        if s[i:i+3] == s[i+2:i+4]:\n            return False\n    return True\n\ndef main():\n    s = 'aabbcdd'\n    print(is_happy(s))\n    print(is_happy_recur(s))\n\nif __name__ == \"__main__\":\n    main()",
      -0.257568359375
    ],
    [
      "# check if the string is empty\n    if s == '':\n        return False\n    # check if the string is only letters\n    if s.isalpha():\n        return False\n    # check if the string is length is more than 3\n    if len(s) < 3:\n        return False\n    # check if the string is only 3 letters\n    if len(s) == 3 and s.isalpha():\n        return False\n    # check if the string has only three consecutive letters\n    if len(s) == 3 and s.isalpha():\n        return False\n    return True",
      -0.8310546875
    ],
    [
      "if len(s) < 3 or s[0]!= s[-1]:\n        return False\n    letters = [s[i] for i in range(1, len(s))]\n    return len(set(letters)) == len(letters)\n\n\nclass Solution(object):\n    def isHappy(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return is_happy(s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isHappy('a')\n    print s.isHappy('abcd')",
      -0.85693359375
    ],
    [
      "return len(s) >= 3 and all(x in set(s) for x in range(len(s) - 2))\n\nif __name__ == \"__main__\":\n    s = input()\n    print(is_happy(s))",
      -0.85693359375
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(1, len(s)):\n        if s[i-1] == s[i] and s[i-1] == s[i+1]:\n            return False\n    return True\n\n# Your code here",
      -0.85693359375
    ],
    [
      "return len(s) >= 3 and not s.startswith('a') and not s.endswith('a') and all(map(lambda c: c not in 'abc', s))",
      -0.85693359375
    ],
    [
      "if len(s) < 3: return False\n    return all(set(s[i:i+3]) == set(s[:i]) for i in range(len(s)-2))\n\nprint(is_happy(s))",
      -0.85693359375
    ],
    [
      "return len(s) >= 3 and len(s) % 3 == 0 and set(s[i:i+3] for i in range(0, len(s), 3)) == set(s)\n\nif __name__ == '__main__':\n    test_cases = [\n        ('a', False),\n        ('aa', False),\n        ('abcd', True),\n        ('aabb', False),\n        ('adb', True),\n        ('xyy', False),\n    ]\n\n    for test in test_cases:\n        print('is_happy({}) = {}'.format(test[0], is_happy(test[0])))",
      -0.85693359375
    ],
    [
      "if len(s) < 3: return False\n    a = [ord(c) for c in s]\n    if a[0]!= a[1] and a[1]!= a[2]: return False\n    for i in range(1, len(a)):\n        if a[i]!= a[i-1]: return False\n    return True\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "return len(s) >= 3 and all(set(s[i:i+3]) == set(s[i-3:i+3]) for i in range(0, len(s), 3))\n\nif __name__ == \"__main__\":\n    s = \"aabbccddeeff\"\n    print(is_happy(s))",
      -0.85693359375
    ],
    [
      "s_len = len(s)\n    if s_len < 3:\n        return False\n    curr_count = [0] * s_len\n    for i in range(s_len - 2):\n        if s[i:i+3] in curr_count:\n            return False\n        curr_count[i:i+3] = [1] * 3\n    return True\n\ndef main():\n    s = input()\n    s_len = len(s)\n    if is_happy(s):\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "if len(s) < 3:\n        return False\n    count = {}\n    for i in range(len(s)):\n        if s[i] in count:\n            count[s[i]] += 1\n        else:\n            count[s[i]] = 1\n    for i in range(len(s)):\n        if s[i] in count:\n            if count[s[i]]!= 1:\n                return False\n        else:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "s = s.lower()\n    if len(s) < 3:\n        return False\n    if s[0] == s[1] and s[1] == s[2] and s[0]!= s[2]:\n        return False\n    return True\n\ndef main():\n    s = \"aabbccdd\"\n    print is_happy(s)\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "return len(s) >= 3 and all(set(s[i:i+3]) == set(s[i-3:i+4]) for i in range(1, len(s)-2))\n\nprint(is_happy(\"xyy\"))",
      -0.85693359375
    ],
    [
      "return len(s) >= 3 and all(x not in s for x in range(3, len(s) + 1))",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and len(s) % 3 == 0 and len(set([s[i:i+3] for i in range(0, len(s)-2, 3)])) == len(s) - 2\n\nif __name__ == '__main__':\n    s = 'aabbccddeeff'\n    print(is_happy(s))",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and all(x!= y for x, y in zip(s[:-1], s[1:]))",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and all(map(lambda x: x not in \"abcdefghijklmnopqrstuvwxyz\", s))\n\nif __name__ == \"__main__\":\n    s = input()\n    if is_happy(s):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and all(set(s[i:i+3]) == set(s[i:i+3]) for i in range(0, len(s) - 2))\n\ndef main():\n    s = input()\n    print(is_happy(s))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and set(s) == set(s[i:i+3] for i in range(len(s)-2))\n\ndef main():\n    s = input()\n    print(is_happy(s))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and set(s) == set(s[::3])\n\n\nclass Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        return self.is_happy(n)",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and all(set(s[i:i+3]) == set(s[i-3:i+4]) for i in range(len(s) - 3))",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and all(x in s for x in range(3, len(s) + 1))",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and s.count(''.join(set(s))) == len(s)\n\nif __name__ == '__main__':\n    print(is_happy('abcd'))",
      -0.85791015625
    ],
    [
      "return len(s) >= 3 and sorted(s)!= list(s)\n\n\nif __name__ == \"__main__\":\n    tests = [\n        (\"a\", True),\n        (\"aa\", True),\n        (\"ab\", True),\n        (\"abc\", True),\n        (\"abb\", False),\n        (\"abcd\", True),\n        (\"adb\", True),\n        (\"xyy\", False)\n    ]\n    for test in tests:\n        assert is_happy(test[0]) == test[1]",
      -0.85888671875
    ],
    [
      "return len(s) >= 3 and len(set([s[i:i+3] for i in range(0, len(s)-2, 3)])) == len(s)\n\n\ndef main():\n    \"\"\"\n    Sample Input:\n        a\n    Sample Output:\n        True\n    \"\"\"\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "if len(s) < 3:\n        return False\n    # first check if there are consecutive letters\n    # for each consecutive letter, check if they are different\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j] and i!= j:\n                return False\n    return True",
      -0.85888671875
    ],
    [
      "return len(s) >= 3 and all(s[i]!= s[i + 1] for i in range(len(s) - 1))\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))",
      -0.85888671875
    ],
    [
      "if len(s) < 3:\n        return False\n    s_list = list(s)\n    # first element is first letter\n    if s_list[0] == s_list[1]:\n        return False\n    # rest of the letters are consecutive\n    for i in range(1, len(s_list) - 1):\n        if s_list[i] == s_list[i + 1]:\n            return False\n    return True\n\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -0.85888671875
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n    return True\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and all(x in s for x in range(len(s) - 2))\n\nif __name__ == '__main__':\n    s = 'abcd'\n    print is_happy(s)\n    print is_happy_2(s)",
      -0.85888671875
    ],
    [
      "if len(s) < 3:\n        return False\n    l = [ord(x) for x in s]\n    for i in range(len(l) - 1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    assert is_happy('a') == False, 'a'\n    assert is_happy('aa') == False, 'aa'\n    assert is_happy('abcd') == True, 'abcd'\n    assert is_happy('aabb') == False, 'aabb'\n    assert is_happy('adb') == True, 'adb'\n    assert is_happy('xyy') == False, 'xyy'",
      -0.85888671875
    ],
    [
      "if len(s) < 3 or len(s) == 3 and s[0] == s[1] and s[1] == s[2]:\n        return False\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n    return True\n\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"dbaa\"))\nprint(is_happy(\"bbdd\"))\nprint(is_happy(\"abbd\"))\nprint(is_happy(\"bbdd\"))\nprint(is_happy(\"dddd\"))",
      -0.85888671875
    ],
    [
      "if len(s) < 3:\n        return False\n    if s[0]!= s[1] and s[0]!= s[2] and s[1]!= s[2]:\n        return False\n    for i in range(3, len(s)):\n        if s[i]!= s[i-3]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))",
      -0.85888671875
    ],
    [
      "if len(s) < 3:\n        return False\n    set_of_chars = set()\n    for i in range(0, len(s) - 2):\n        if s[i:i+3] in set_of_chars:\n            return False\n        set_of_chars.add(s[i:i+3])\n    return True\n\n# Your code below this line",
      -0.85888671875
    ],
    [
      "return sum(1 for x in s if x in set(s[:3])) == len(s) and all(x in set(s[:3]) for x in s[3:])\n\nif __name__ == '__main__':\n    assert is_happy('a') == False, 'a'\n    assert is_happy('aa') == False, 'aa'\n    assert is_happy('abcd') == True, 'abcd'\n    assert is_happy('aabb') == False, 'aabb'\n    assert is_happy('adb') == True, 'adb'\n    assert is_happy('xyy') == False, 'xyy'",
      -0.85888671875
    ],
    [
      "if len(s) < 3:\n        return False\n    if not set(s).issubset(set(s[i:i+3]) for i in range(len(s)-2)):\n        return False\n    return True\n\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))",
      -0.85888671875
    ],
    [
      "return all(s[i:i+3]!= s[i+1:i+2] for i in range(len(s)-2))\n\ndef main():\n    \"\"\"Main function\"\"\"\n    print is_happy(input())\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "if not s:\n        return False\n    if len(s) <= 2:\n        return True\n    if s[0] == s[1]:\n        return False\n    for i in range(1, len(s) - 1):\n        if s[i] == s[i-1]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))",
      -0.85888671875
    ],
    [
      "return len(s) >= 3 and len(s) % 3 == 0 and all(set(s[i:i+3]) == set(s[i-2:i+3]) for i in range(1, len(s) - 2, 3))\n\nif __name__ == '__main__':\n    print(is_happy('aabb'))",
      -0.85888671875
    ],
    [
      "return len(s) >= 3 and not set(s).intersection(set(s[i:i+3]) for i in range(0, len(s)-2, 3))\n\ndef main():\n    s = \"aabbcc\"\n    print(is_happy(s))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "return len(s) >= 3 and len(s) % 3 == 0 and s[:3] not in s[3:6] and s[:3] not in s[6:9] and s[:3] not in s[9:12] and s[:3] not in s[12:15]\n\nif __name__ == '__main__':\n    print(is_happy(sys.argv[1]))",
      -0.85888671875
    ],
    [
      "s = s.upper()\n    if len(s) < 3:\n        return False\n    s = list(s)\n    return len(set(s)) == len(s)",
      -0.86083984375
    ],
    [
      "return all(len(s) % 3 == 0 and s[i:i + 3]!= s[i - 2:i + 2] for i in range(len(s) - 2))\n\nif __name__ == \"__main__\":\n    print(is_happy(\"aaabbb\"))\n    print(is_happy(\"aaabbb\"))\n    print(is_happy(\"abb\"))\n    print(is_happy(\"abb\"))\n    print(is_happy(\"abbb\"))",
      -0.86083984375
    ],
    [
      "if not s:\n        return True\n    if len(s) < 3:\n        return False\n    n = len(s)\n    seen = set()\n    for i in range(n):\n        if s[i] not in seen and i!= 0 and i!= n - 1:\n            if s[i - 1] == s[i] and s[i + 1] == s[i]:\n                seen.add(s[i])\n    return len(seen) >= 3\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    print(is_happy(s))",
      -0.86083984375
    ],
    [
      "return (len(s) >= 3 and all(x not in s for x in range(3)))\n\n\nif __name__ == '__main__':\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(is_happy(s))",
      -0.86083984375
    ],
    [
      "if len(s) < 3:\n        return False\n    return all(set(s[i:i + 3])!= set(s[i - 2:i + 1]) for i in range(1, len(s) - 2))\n\n\ndef main():\n    \"\"\"Main\"\"\"\n    s = input()\n    print(is_happy(s))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.86083984375
    ],
    [
      "# if len(s) < 3: return False\n    # if len(s) == 3: return True\n    # for i in range(1, len(s)):\n    #     if s[i-1] == s[i] and s[i-1] == s[i+1]:\n    #         return False\n    # return True\n    # for i in range(1, len(s)):\n    #     if s[i] not in s[:i]:\n    #         return False\n    return True\n\nprint(is_happy('abcd'))",
      -0.86083984375
    ],
    [
      "return len(s) >= 3 and len([x for x in s if x not in 'abcdef']) == 0",
      -0.88671875
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s)):\n        if s[i]!= s[i+1] and s[i+1]!= s[i+2]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    s = \"abcd\"\n    print(is_happy(s))",
      -0.908203125
    ],
    [
      "if len(s) < 3:\n        return False\n    s_str = ''.join(s)\n    seen = set()\n    for i in range(len(s)):\n        if i % 3!= 0:\n            continue\n        if s[i] not in seen and s[i-1]!= s[i+1]:\n            seen.add(s[i])\n    return len(seen) == len(s)",
      -1.3330078125
    ],
    [
      "# Check if s is empty or not\n    if s == '':\n        return False\n\n    # Check if there are 2 consecutive same letters\n    if len(s) < 3 or len(s) % 3!= 0:\n        return False\n\n    # Check if every 3 consecutive letters are different\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n\n    # If there are no 2 consecutive same letters, then there is at least 3\n    return True\n\n\ndef main():\n    \"\"\"\n    Sample Input:\n    a\n    aa\n    abcd\n    aabb\n    adb\n    xyy\n    \"\"\"\n    s = input()\n    print(is_happy(s))\n\n\nif __name__ == '__main__':\n    main()",
      -1.3515625
    ],
    [
      "return len(s) >= 3 and all(map(lambda x: x in set(s), range(len(s) - 2)))\n\nif __name__ == '__main__':\n    input = sys.stdin.read().splitlines()\n    print(is_happy(input[0]))\n    print(is_happy(input[1]))",
      -1.3642578125
    ],
    [
      "n = len(s)\n    if n < 3 or n % 3!= 0:\n        return False\n    dp = [False for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i:j] in dp[i]:\n                return False\n            dp[j] = dp[i] or s[i:j] not in dp\n    return True\n\n\ndef solve(s):\n    \"\"\"Return the happy string\"\"\"\n    n = len(s)\n    if n < 3 or n % 3!= 0:\n        return None\n    dp = [False for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i:j] in dp[i]:\n                return None\n            dp[j] = dp[i] or s[i:j] not in dp\n    return s\n\n\nif __name__ == \"__main__\":\n    s = \"aabbccddeeffghjkmnpqrstuvwxyz\"\n    print(is_happy(s))\n    print(solve(s))",
      -1.4296875
    ],
    [
      "if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(len(s) - 2):\n        if s[i] in seen and s[i+1] in seen and s[i+2] in seen:\n            return False\n        seen.add(s[i])\n        seen.add(s[i+1])\n        seen.add(s[i+2])\n    return True\n\ndef is_happy_1(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(len(s) - 2):\n        if s[i] in seen and s[i+1] in seen and s[i+2] in seen:\n            return False\n        seen.add(s[i])\n        seen.add(s[i+1])\n        seen.add(s[i+2])\n    return True\n\nif __name__ == \"__main__\":\n    print(is_happy_1(\"abc\"))\n    print(is_happy_1(\"ab\"))\n    print(is_happy_1(\"aabb\"))\n    print(is_happy_1(\"aabbb\"))\n    print(is_happy_1(\"aabbccdd\"))",
      -1.455078125
    ],
    [
      "return not s.startswith('a') or s.startswith('z') or s.startswith('b') or s.startswith('d') or s.startswith('t') or s.startswith('y')\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        print(' '.join(s.split()))\n        if is_happy(s):\n            print('Yes')\n        else:\n            print('No')",
      -1.5537109375
    ],
    [
      "return len(s) >= 3 and len(s) % 3 == 0 and all(x not in s for x in range(len(s) - 2))\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))",
      -2.0625
    ],
    [
      "letters = list(s)\n    if len(letters) < 3:\n        return False\n    if len(letters) == 3:\n        return letters[0]!= letters[1] and letters[0]!= letters[2] and letters[1]!= letters[2]\n    for i in range(1, len(letters) - 2):\n        if letters[i] == letters[i + 1] and letters[i] == letters[i + 2]:\n            return False\n    return True\n\ndef is_happy_slow(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    letters = list(s)\n    if len(letters) < 3:\n        return False\n    for i in range(1, len(letters) - 2):\n        if letters[i] == letters[i + 1] and letters[i] == letters[i + 2]:\n            return False\n    return True\n\n\ndef test_is_happy():\n    assert is_happy('a') == False\n    assert is_happy('aa') == False\n    assert is_happy('abcd') == True\n    assert is_happy('aabb') == False\n    assert is_happy('adb') == True\n    assert is_happy('xyy') == False\n    assert is_happy_slow('a') == False\n    assert is_happy_slow('aa') == False\n    assert is_happy_slow('abcd') == True\n    assert is_happy_slow('aabb') == False\n    assert is_happy_slow('adb') == True\n    assert is_happy_slow('xyy') == False\n\n\ndef test_is_happy_slow():\n    assert is_happy_slow('a') == False\n    assert is_happy_slow('aa') == False",
      -2.509765625
    ],
    [
      "return len(s) >= 3 and all(x not in s for x in range(3, len(s) + 1))\n\n\nif __name__ == '__main__':\n    s = 'aaabbbccccdddd'\n    print(is_happy(s))\n    s = 'aabbccdd'\n    print(is_happy(s))\n    s = 'abcdd'\n    print(is_happy(s))\n    s = 'abcde'\n    print(is_happy(s))\n    s = 'abcd'\n    print(is_happy(s))\n    s = 'abd'\n    print(is_happy(s))\n    s = 'bab'\n    print(is_happy(s))\n    s = 'bab'\n    print(is_happy(s))\n    s = 'bac'\n    print(is_happy(s))\n    s = 'abbbbb'\n    print(is_happy(s))\n    s = 'abbbbb'\n    print(is_happy(s))\n    s = 'bbbbb'\n    print(is_happy(s))\n    s = 'bbbbb'\n    print(is_happy(s))",
      -2.697265625
    ],
    [
      "return len(s) >= 3 and all(c in set(s[:3]) for c in s)\n\n\ndef solve(s):\n    \"\"\"Solve the problem given in the problem statement.\n    Your code should return the number of happy strings.\n    \"\"\"\n    if is_happy(s):\n        return 1\n    if s == \"\":\n        return 0\n    return solve(s[1:]) + solve(s[:-1])\n\n\nif __name__ == \"__main__\":\n    assert solve(\"\") == 0\n    assert solve(\"a\") == 1\n    assert solve(\"aa\") == 2\n    assert solve(\"abcd\") == 3\n    assert solve(\"aabb\") == 3\n    assert solve(\"adb\") == 3\n    assert solve(\"xyy\") == 2",
      -2.767578125
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(s) % 3!= 0:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))",
      -2.76953125
    ],
    [
      "l = len(s)\n    if l < 3:\n        return False\n    prev_letters = set()\n    for i in range(l - 2):\n        if s[i:i+3] not in prev_letters:\n            return False\n        prev_letters.add(s[i:i+3])\n    return True\n\ndef main():\n    s = 'aabbb'\n    print(is_happy(s))\n\nif __name__ == '__main__':\n    main()",
      -3.744140625
    ],
    [
      "return len(s) >= 3 and all(c!= s[i % len(s)] for i, c in enumerate(s))\n\ndef is_happy_iter(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_iter(a) => False\n    is_happy_iter(aa) => False\n    is_happy_iter(abcd) => True\n    is_happy_iter(aabb) => False\n    is_happy_iter(adb) => True\n    is_happy_iter(xyy) => False\n    \"\"\"\n    for i, c in enumerate(s):\n        if i % 3!= 0 and s[i:i+3]!= s[i-1:i+2]:\n            return False\n    return True\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_2(a) => False\n    is_happy_2(aa) => False\n    is_happy_2(abcd) => True\n    is_happy_2(aabb) => False\n    is_happy_2(adb) => True\n    is_happy_2(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    return all(c!= s[i % len(s)] for i, c in enumerate(s))\n\ndef is_happy_3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_3(a) => False\n    is_happy_3(aa) => False\n    is_happy_3(abcd) => True\n    is_happy_3(aabb) => False\n    is",
      -4.125
    ],
    [
      "return len(s) >= 3 and all(c == s[i] for i, c in enumerate(s) if i % 3 == 0)\n\n\ndef main():\n    n = int(input())\n    s = input()\n    s = list(s)\n    print(is_happy(s))\n    # print(s)\n    # print(sorted(s))\n    # print(sorted(s, key=lambda s: len(s)))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(sorted(s, key=lambda s: s.count('a'), reverse=True))\n    # print(",
      -4.2109375
    ],
    [
      "count = 0\n    for i in range(len(s)):\n        if i >= 3:\n            if s[i-3:i] == s[i-2:i+1]:\n                count += 1\n    return count >= 3\n\ndef is_happy_long(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i >= 3:\n            if s[i-3:i] == s[i-2:i+1]:\n                count += 1\n    return count >= 3\n\ndef is_happy_long2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i >= 3:\n            if s[i-3:i] == s[i-2:i+1]:\n                count += 1\n    return count >= 3\n\ndef is_happy_long3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is",
      -5.09375
    ],
    [
      "# print(\"is_happy\", s)\n    if not s:\n        return False\n    if len(s) < 3:\n        return False\n    if s[0] == s[1] and s[0] == s[2]:\n        return False\n    if s[1] == s[2]:\n        return False\n    if s[0] == s[2]:\n        return False\n    return True\n\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_2(a) => False\n    is_happy_2(aa) => False\n    is_happy_2(abcd) => True\n    is_happy_2(aabb) => False\n    is_happy_2(adb) => True\n    is_happy_2(xyy) => False\n    \"\"\"\n    if not s:\n        return False\n    if len(s) < 3:\n        return False\n    for i in range(3):\n        if s[0] == s[i] and s[1] == s[i + 1] and s[2] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    # s = \"abbcabababbbcababbabbbabbabbbabbbbbabbbbbabbabbbbabbbbbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbbabbbbbbbbbabbbabbbabbbbbabbbbbbabbbbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbbbbbbbbabbbbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb",
      -5.234375
    ],
    [
      "return sum(1 for i in range(len(s)) if i % 3 == 0) >= 3 and all(s[i]!= s[i+1] for i in range(len(s) - 2))\n\n\ndef main():\n    \"\"\"\n    Use the list of words to create a dictionary.\n    Then, for each word, check if it is happy or not.\n    \"\"\"\n    with open('input.txt') as f:\n        words = f.read().split()\n        dictionary = {word: False for word in words}\n        for word in words:\n            if is_happy(word):\n                dictionary[word] = True\n\n    print(len(dictionary))\n    for key in dictionary:\n        print(key, \"->\", dictionary[key])\n\n\nif __name__ == '__main__':\n    main()",
      -5.26171875
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    for i in range(3, len(s)):\n        if s[i-3] == s[i-2] and s[i-2] == s[i-1]:\n            return False\n    return True\n\ndef is_happy_recur(s):\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    if len(s) == 4:\n        return False\n    for i in range(3, len(s)):\n        if s[i-3] == s[i-2] and s[i-2] == s[i-1]:\n            return False\n        if s[i-3] == s[i-2] and s[i-1] == s[i-2]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy_recur(\"a\"))\n    print(is_happy_recur(\"aa\"))\n    print(is_happy_recur(\"abcd\"))\n    print(is_happy_recur(\"aabb\"))\n    print(is_happy_recur(\"adb\"))\n    print(is_happy_recur(\"xyy\"))",
      -5.34765625
    ],
    [
      "if len(s) < 3:\n        return False\n    m = {a: 0 for a in s}\n    for i in range(len(s) - 2):\n        m[s[i:i+3]] += 1\n    return sum(m.values()) == 0\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    m = {a: 0 for a in s}\n    for i in range(len(s) - 2):\n        m[s[i:i+3]] += 1\n    return sum(m.values()) == 0 and len(m) == 1\n\nif __name__ == '__main__':\n    s = 'abcd'\n    print(is_happy(s))\n    s = 'abcdx'\n    print(is_happy(s))\n    s = 'abcdxy'\n    print(is_happy(s))\n    s = 'abcde'\n    print(is_happy(s))\n    s = 'abcde'\n    print(is_happy(s))\n    s = 'abcdef'\n    print(is_happy(s))\n    s = 'abcdabcde'\n    print(is_happy(s))\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(is_happy(s))\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(is_happy(s))\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(is_happy(s))\n    s = 'abcdefghijklmnopqr",
      -5.37890625
    ],
    [
      "if len(s) < 3:\n        return False\n    dic = {x: 1 for x in s}\n    for i in range(3, len(s) + 1):\n        for j in range(i):\n            if s[j: i] in dic:\n                dic[s[j: i]] += 1\n            else:\n                dic[s[j: i]] = 1\n    return len(dic) == len(s)\n\ndef is_happy_rec(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    dic = {x: 1 for x in s}\n    for i in range(3, len(s) + 1):\n        for j in range(i):\n            if s[j: i] in dic:\n                dic[s[j: i]] += 1\n            else:\n                dic[s[j: i]] = 1\n    return len(dic) == len(s)",
      -5.41015625
    ],
    [
      "if len(s) < 3 or len(s) % 3!= 0:\n        return False\n\n    prev = s[0]\n    for i in range(1, len(s) - 2):\n        if prev == s[i] and prev == s[i + 1]:\n            prev = s[i + 2]\n        else:\n            return False\n    return True\n\ndef main():\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n\nif __name__ == \"__main__\":\n    main()",
      -5.9140625
    ],
    [
      "# check for length\n    if len(s) < 3:\n        return False\n    # check for the same letters\n    if s[0] == s[1] and s[1] == s[2]:\n        return False\n    # check for the same consecutive letters\n    if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n        return False\n    return True\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()",
      -6.55859375
    ],
    [
      "# TODO: write your code here\n    if len(s) < 3:\n        return False\n    if len(s) % 3!= 0:\n        return False\n    prev_letter = s[0]\n    for i in range(1, len(s) - 2):\n        if prev_letter == s[i] and prev_letter == s[i+1]:\n            prev_letter = s[i+2]\n        else:\n            return False\n    return True\n\nif __name__ == '__main__':\n    s = 'abcd'\n    print is_happy(s)\n    s = 'aabb'\n    print is_happy(s)\n    s = 'xyy'\n    print is_happy(s)\n    s = 'adb'\n    print is_happy(s)",
      -6.59765625
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        return False\n    # if len(s) == 4:\n    #     if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n    #         return True\n    #     return False\n    if s[0]!= s[1] and s[1]!= s[2]:\n        return False\n    for i in range(1, len(s)):\n        if s[i]!= s[i - 1]:\n            if s[i - 1] == s[i + 1]:\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    s = \"a\"\n    print(is_happy(s))\n    s = \"aa\"\n    print(is_happy(s))\n    s = \"abb\"\n    print(is_happy(s))\n    s = \"aabb\"\n    print(is_happy(s))\n    s = \"adb\"\n    print(is_happy(s))\n    s = \"xyy\"\n    print(is_happy(s))",
      -6.73828125
    ],
    [
      "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    if s[0] == s[1] and s[1] == s[2]:\n        return True\n    for i in range(3, len(s)):\n        if s[i] == s[i-1]:\n            return False\n    return True\n\ndef main():\n    s = 'abc'\n    print(is_happy(s))\n    s = 'abcd'\n    print(is_happy(s))\n    s = 'abde'\n    print(is_happy(s))\n    s = 'acb'\n    print(is_happy(s))\n    s = 'aabb'\n    print(is_happy(s))\n    s = 'aabbb'\n    print(is_happy(s))\n    s = 'aabbcc'\n    print(is_happy(s))\n    s = 'aabbccdd'\n    print(is_happy(s))\n    s = 'aabbccddee'\n    print(is_happy(s))\n    s = 'aabbccddeeff'\n    print(is_happy(s))\n    s = 'aabbccddeeffaabbccddeeff'\n    print(is_happy(s))\n\nif __name__ == '__main__':\n    main()",
      -7.65625
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(3, len(s)):\n        if s[i-3:i] == s[i-2:i]:\n            return False\n    return True\n\ndef is_happy_iter(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(3, len(s)):\n        if s[i-3:i] == s[i-2:i]:\n            return False\n    return True\n\ndef is_happy_dp(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    dp = [False for i in range(len(s))]\n    for i in range(len(s) - 2):\n        for j in range(i+3, i+4):\n            if s[i:j] == s[j-1:j] and s[i:j]!= s[j-2:j]:\n                dp[i] = True\n    return dp[0]\n\nif __name__ == \"__main__\":\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False",
      -7.6875
    ],
    [
      "return len(s) >= 3 and all(s[i]!= s[i+1] for i in range(len(s)-2))\n\ndef is_happy_recur(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return is_happy(s[0])\n    elif len(s) == 2:\n        return is_happy(s[0]) and is_happy(s[1])\n    else:\n        return is_happy(s[0]) and is_happy_recur(s[1:])\n\ndef main():\n    \"\"\"\n    Input:\n    a string s\n    a string t\n    Output:\n    True if the two strings are happy, False otherwise\n    \"\"\"\n    a = input()\n    t = input()\n    print(is_happy_recur(a) == is_happy_recur(t))\n\nif __name__ == \"__main__\":\n    main()",
      -7.9296875
    ],
    [
      "if len(s) < 3:\n        return False\n    for i in range(len(s)):\n        if s[i:i+3] in s[:i]:\n            return False\n    return True\n\ndef is_happy_recur(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return s[0] == s[1] and s[1] == s[2]\n    return is_happy_recur(s[:3]) and is_happy_recur(s[3:])\n\ndef is_happy_recur_with_stack(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return s[0] == s[1] and s[1] == s[2]\n    stack = [0]\n    for i in range(len(s)):\n        if s[i:i+3] not in stack:\n            stack.append(s[i:i+3])\n        else:\n            stack.pop()\n            if len(stack) == 0:\n                return False\n    return True\n\ndef is",
      -8.0
    ],
    [
      "count = collections.Counter(s)\n    if len(s) < 3:\n        return False\n    elif len(s) == 3 and count[s[0]] == 1:\n        return False\n    elif len(s) == 3 and count[s[1]] == 1:\n        return False\n    elif len(s) == 3 and count[s[2]] == 1:\n        return False\n    else:\n        return True\n\nif __name__ == \"__main__\":\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False",
      -9.6953125
    ],
    [
      "return len(s) >= 3 and all(x in s for x in xrange(3))\n\n\ndef test_is_happy():\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False\n\n\ndef count_happy(s):\n    \"\"\"Count the number of happy strings in a string s.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    count_happy(a) => 0\n    count_happy(aa) => 0\n    count_happy(abcd) => 1\n    count_happy(aabb) => 0\n    count_happy(adb) => 2\n    count_happy(xyy) => 0\n    \"\"\"\n    if not is_happy(s):\n        return 0\n    return sum(1 for i in xrange(len(s)) if s[i:i + 3] in s)\n\n\ndef test_count_happy():\n    assert count_happy(\"a\") == 0\n    assert count_happy(\"aa\") == 0\n    assert count_happy(\"abcd\") == 1\n    assert count_happy(\"aabb\") == 0\n    assert count_happy(\"adb\") == 2\n    assert count_happy(\"xyy\") == 0\n\n\ndef count_happy_rec(s, i):\n    \"\"\"Count the number of happy strings in a string s.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    count_happy_rec(a, 0) => 0\n    count_happy_rec(aa, 0) => 0\n    count_happy_rec(abcd, 0) => 1\n    count_happy_rec(aabb, 0) => 0\n    count_happy_rec(adb, 0) => 2\n    count_happy_rec(xyy, 0) => 0\n    \"\"\"\n    if i == len(s) - 3:\n        return 0\n    if not is_happy(s[i:i + 3]",
      -9.7578125
    ],
    [
      "# Create a set of all possible 3-letter strings\n    # (e.g. a, b, c,...)\n    # and a list of all possible strings of length 3\n    # (e.g. abcd, ab, aa, a, b, c,...)\n    s = set(s)\n    ss = [''.join(i) for i in s]\n    return all(len(i) == 3 for i in ss)\n\n\nif __name__ == '__main__':\n    s = 'aabbccddeeff'\n    print(is_happy(s))",
      -9.8203125
    ],
    [
      "if len(s) < 3:\n        return False\n    counts = collections.Counter(s)\n    if len(counts) < 3:\n        return False\n    for c in counts:\n        if c in s:\n            return False\n    return True\n\n\ndef is_happy_long(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_long(a) => False\n    is_happy_long(aa) => False\n    is_happy_long(abcd) => True\n    is_happy_long(aabb) => False\n    is_happy_long(adb) => True\n    is_happy_long(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    counts = collections.Counter(s)\n    if len(counts) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if counts[s[i]] == counts[s[i + 1]] == counts[s[i + 2]]:\n            return False\n    return True\n\n\ndef is_happy_long2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_long2(a) => False\n    is_happy_long2(aa) => False\n    is_happy_long2(abcd) => True\n    is_happy_long2(aabb) => False\n    is_happy_long2(adb) => True\n    is_happy_long2(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    counts = collections.Counter(s)\n    if len(counts) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if counts[s[i]] == counts[s[i + 1]] == counts",
      -9.9296875
    ],
    [
      "return len(s) >= 3 and s.count(\"a\") == len(s) and s.count(\"b\") == len(s) and s.count(\"c\") == len(s)\n\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and s.count(\"a\") >= 3 and s.count(\"b\") >= 3 and s.count(\"c\") >= 3\n\n\ndef is_happy_3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and s.count(\"a\") >= 3 and s.count(\"b\") >= 3 and s.count(\"c\") >= 3 and s.count(\"d\") >= 3\n\n\ndef is_happy_4(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return",
      -11.515625
    ],
    [
      "return len(s) >= 3 and all(c in s for c in string.ascii_lowercase)\n\nif __name__ == '__main__':\n    s = 'aabb'\n    print(is_happy(s))\n    s = 'aabbb'\n    print(is_happy(s))\n    s = 'aabbbb'\n    print(is_happy(s))\n    s = 'aaaaa'\n    print(is_happy(s))\n    s = 'bbbbbb'\n    print(is_happy(s))\n    s = 'abcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd",
      -12.5546875
    ],
    [
      "return sum(map(len, s)) >= 3 and all(len(s) - i >= 3 for i in range(len(s) - 3))\n\ndef is_happy_s(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_s(a) => False\n    is_happy_s(aa) => False\n    is_happy_s(abcd) => True\n    is_happy_s(aabb) => False\n    is_happy_s(adb) => True\n    is_happy_s(xyy) => False\n    \"\"\"\n    return sum(map(len, s)) >= 3 and all(len(s) - i >= 3 for i in range(len(s) - 3)) and all(c in s for c in string.ascii_uppercase)\n\ndef is_happy_s_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy_s(a) => False\n    is_happy_s(aa) => False\n    is_happy_s(abcd) => True\n    is_happy_s(aabb) => False\n    is_happy_s(adb) => True\n    is_happy_s(xyy) => False\n    \"\"\"\n    return sum(map(len, s)) >= 3 and all(len(s) - i >= 3 for i in range(len(s) - 3)) and all(c in s for c in string.ascii_uppercase) and all(s[i:i+3] for i in range(len(s) - 3))\n\ndef is_happy_s_3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example",
      -12.875
    ],
    [
      "letters = list(s)\n    if len(letters) < 3:\n        return False\n    for i in range(3, len(letters)):\n        if letters[i - 3: i] == letters[i - 2: i]:\n            return False\n    return True\n\n\n# Time:  O(n)\n# Space: O(n)\nclass Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        dic = {}\n        def is_happy(n):\n            if n == 1:\n                return True\n            if n in dic:\n                return dic[n]\n            if n in dic:\n                return False\n            if n < 0:\n                return False\n            dic[n] = is_happy(n % 10)\n            return dic[n]\n        return is_happy(n)",
      -13.015625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}