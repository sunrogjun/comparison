{
  "problem": {
    "task_id": "MBPP/131",
    "prompt": "Write a python function to reverse only the vowels of a given string.",
    "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
    "test_list": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ],
    "challenge_test_list": [],
    "problem_id": 120
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Given a string, reverse only the vowels and return the new string.\n    \"\"\"\n    vowels = 'aeiou'\n    new_string = \"\"\n    for letter in string:\n        if letter not in vowels:\n            new_string += letter\n    return new_string\n\n\nif __name__ == \"__main__\":\n    test_string = \"Hello world\"\n    print(reverse_vowels(test_string))",
      2.9375
    ],
    [
      "def reverseVowels(string):\n    # Write your code here\n    string = string.lower()\n    string = string.replace(\"a\", \"e\")\n    string = string.replace(\"e\", \"a\")\n    string = string.replace(\"i\", \"o\")\n    string = string.replace(\"o\", \"i\")\n    string = string.replace(\"u\", \"o\")\n    string = string.replace(\"o\", \"u\")\n    string = string.replace(\"y\", \"i\")\n    string = string.replace(\"y\", \"u\")\n    string = string.replace(\"h\", \"a\")\n    string = string.replace(\"w\", \"u\")\n    string = string.replace(\"r\", \"i\")\n    string = string.replace(\"n\", \"o\")\n    string = string.replace(\"b\", \"a\")\n    string = string.replace(\"f\", \"a\")\n    string = string.replace(\"d\", \"a\")\n    string = string.replace(\"g\", \"a\")\n    return string\n\nprint reverseVowels(\"hello\")",
      2.203125
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Return the reversed string.\n    \"\"\"\n    return ''.join([''.join(list(reversed(char))) for char in string if char in \"aeiouAEIOU\"])\n\nprint(reverse_vowels(\"hello\"))",
      1.13671875
    ],
    [
      "def reverse_vowels(string):\n    '''\n    reverse vowels of a string\n    '''\n\n    # create a list of vowels\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n\n    # initialize a reverse_vowels_list\n    reverse_vowels_list = []\n\n    # add the vowels to the list\n    for vowel in vowels:\n        reverse_vowels_list.append(vowel)\n\n    # reverse the vowels of the string\n    reversed_string = ''\n\n    for letter in string:\n        if letter in vowels:\n            reversed_string += reverse_vowels_list[vowels.index(letter)]\n\n    return reversed_string\n\n# test\nprint(reverse_vowels('aeiou'))\nprint(reverse_vowels('aeiou'))\nprint(reverse_vowels('aeiou'))\nprint(reverse_vowels('aeiou'))\nprint(reverse_vowels('aeiou'))",
      0.9091796875
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Reverses only the vowels of a given string.\n\n    :param string: a string\n    :return: a reversed string\n    \"\"\"\n    return \"\".join(ch for ch in string if ch in \"aeiou\")\n\ndef main():\n    print(reverse_vowels(\"I have a big heart\"))\n\nif __name__ == \"__main__\":\n    main()",
      0.81201171875
    ],
    [
      "def reverse_vowels(text):\n    \"\"\"\n    :rtype: str\n    \"\"\"\n    letters = []\n    for c in text:\n        if c.lower() in ['a', 'e', 'i', 'o', 'u', 'y']:\n            letters.append(c.lower())\n    return \"\".join(letters)\n\n#print(reverse_vowels(\"hello\"))\n#print(reverse_vowels(\"helloworld\"))\nprint(reverse_vowels(\"hello\"))",
      0.09832763671875
    ],
    [
      "def reverse_vowels(text):\n    # YOUR CODE HERE\n    if text:\n        return \"\".join(x for x in text if x in \"aeiou\")\n    else:\n        return \"\"\n\nif __name__ == \"__main__\":\n    text = \"hello, world!\"\n    print(reverse_vowels(text))",
      -0.258544921875
    ],
    [
      "def reverse_vowels(string):\n    return ''.join(ch for ch in string if ch in 'aeiou')\n\nprint(reverse_vowels('Hello'))",
      -0.85693359375
    ],
    [
      "def reverse_vowels(s):\n    \"\"\"\n    :param s: A string to reverse.\n    :return: A string with the reversed vowels.\n    \"\"\"\n    return ''.join([''.join(['w', x]) for x in s[::-1]])\n\n\nif __name__ == '__main__':\n    print(reverse_vowels('Hello'))\n    print(reverse_vowels('a'))\n    print(reverse_vowels('aa'))\n    print(reverse_vowels('aaa'))",
      -0.85693359375
    ],
    [
      "def reverse_vowels(string):\n    # Write your code here\n    #print(string)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(string)):\n        if string[i] in vowels:\n            result += string[i]\n    return result\n\nif __name__ == '__main__':\n    string = \"Hello world\"\n    print(reverse_vowels(string))",
      -0.85693359375
    ],
    [
      "# Reverse only the vowels of a given string.\ndef reverse_vowels(string):\n    return ''.join(c for c in string if c in 'aeiou')\n\nprint reverse_vowels('hello')\n#>>>olleh\nprint reverse_vowels('hello world')\n#>>>helloworld",
      -0.85693359375
    ],
    [
      "def reverse_only_vowels(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # +++your code here+++\n    \n    vowels = 'aeiou'\n    reverse = ''\n    for letter in string:\n        if letter not in vowels:\n            reverse += letter\n    return reverse",
      -0.85693359375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # Write your code here\n    return \"\".join(map(lambda c: c if c.lower() not in \"aeiou\" else \"\", string))",
      -0.85693359375
    ],
    [
      "def reverse_vowels(string):\n    # write your code here\n    \"\"\"\n    Arguments:\n        string: A string to be reversed.\n\n    Returns:\n        A string with the vowels reversed.\n    \"\"\"\n    return ''.join([''.join(x) for x in zip(string[::-1], string[1::-1])])\n\n\ndef main():\n    print(reverse_vowels(\"Hello\"))\n    print(reverse_vowels(\"I love you\"))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def reverse_vowels(string):\n    string = string.lower()\n    result = []\n    for c in string:\n        if c.lower() in \"aeiou\":\n            result.append(c.lower())\n    return \"\".join(result)\n\nif __name__ == \"__main__\":\n    print reverse_vowels(\"Hello\")",
      -0.85693359375
    ],
    [
      "# reverse_only_vowels = lambda s: s[::-1].replace(\"a\",\"o\").replace(\"e\",\"i\").replace(\"i\",\"o\").replace(\"o\",\"a\")\n# reverse_only_vowels(\"hello\")\n\ndef reverse_only_vowels(s):\n    \"\"\"\n    Reverse only the vowels of a given string.\n\n    :param s: string\n    :return: string\n    \"\"\"\n    return s[::-1].replace(\"a\",\"o\").replace(\"e\",\"i\").replace(\"i\",\"o\").replace(\"o\",\"a\")\n\nprint(reverse_only_vowels(\"hello\"))",
      -0.85693359375
    ],
    [
      "# A function to test your function\ndef test_reverse_vowels():\n    assert reverse_vowels('hello') == 'holle'\n    assert reverse_vowels('abcd') == 'bcda'\n    assert reverse_vowels('z') == 'z'\n    assert reverse_vowels('abcd') == 'bcda'\n\n# Your function\ndef reverse_vowels(string):\n    return \"\".join([char for char in string if char.lower() in \"aeiou\"])\n\n# Test your function\ntest_reverse_vowels()",
      -0.85693359375
    ],
    [
      "def reverse_vowels(string):\n    # write your code here\n    return ''.join([''.join(x) for x in zip(*[iter(string), reversed(string)])])\n\nif __name__ == '__main__':\n    print reverse_vowels('abcde')\n    print reverse_vowels('abcd')\n    print reverse_vowels('abcd')\n    print reverse_vowels('abcd')\n    print reverse_vowels('abcd')\n    print reverse_vowels('abcd')",
      -0.85693359375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Write a function that takes a string and returns a reversed version of\n    the string with only vowels reversed.\n    \"\"\"\n    return ''.join([''.join(['-', c]) for c in string])\n\nif __name__ == '__main__':\n    print reverse_vowels(\"hello\")\n    print reverse_vowels(\"I have a big, long string.\")",
      -0.85693359375
    ],
    [
      "def reverseVowels(string):\n    # Write your code here\n    return \"\".join(reversed(string))\n\nif __name__ == \"__main__\":\n    print(reverseVowels(\"Hello World\"))\n    print(reverseVowels(\"I'm a little tea pot\"))",
      -0.85693359375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Args:\n        string: A string\n    Returns:\n        A string with the vowels reversed\n    \"\"\"\n    vowels = \"aeiouy\"\n    return ''.join(reversed(string.lower()[::-1]))\n\n\nif __name__ == \"__main__\":\n    print(reverse_vowels(\"Hello\"))",
      -0.85693359375
    ],
    [
      "def reverse_vowels(string):\n    # Write your code here\n    vowels = 'aeiou'\n    for char in string:\n        if char not in vowels:\n            return string[::-1]\n    return string\n\n\nif __name__ == '__main__':\n    string = 'hello'\n    print(reverse_vowels(string))",
      -0.85693359375
    ],
    [
      "def reverse_vowels(text):\n    \"\"\"\n    :param text: String to reverse.\n    :type text: str\n    :return: Reversed string.\n    :rtype: str\n    \"\"\"\n    return ''.join([i for i in text if i in 'aeiou'])\n\nprint(reverse_vowels('Hello World!'))",
      -0.85693359375
    ],
    [
      "# Write your code below.\ndef reverse_vowels(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    if not text:\n        return ''\n\n    vowels = 'aeiou'\n    reverse_vowel = ''\n\n    for letter in text:\n        if letter in vowels:\n            reverse_vowel += letter\n        else:\n            reverse_vowel +=''\n\n    return reverse_vowel\n\nprint(reverse_vowels('hello'))",
      -0.85791015625
    ],
    [
      "# Complete the function below.\ndef reverse_vowels(s):\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    new_string = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            new_string += s[i]\n    return new_string\n\n# Test Cases\ntest_cases = [\n    (\"puppies are the best\", \"aouuio\"),\n    (\"a\", \"a\"),\n    (\"\", \"\")\n]\n\nfor t in test_cases:\n    print(\"Reverse only the vowels of string: \" + t[0])\n    print(\"Expected: \" + t[1])\n    print(\"Actual: \" + reverse_vowels(t[0]))",
      -0.85791015625
    ],
    [
      "# TODO:\n# - use a list of vowels\n# - use a list of consonants\n# - check if a vowel is in the list of consonants\n# - check if a vowel is in the list of vowels\n# - check if a vowel is in the list of vowels\n\n\ndef reverse_vowels(string):\n    return string[::-1].replace('a', 'e').replace('e', 'a').replace('i', 'i').replace('o', 'o').replace('u', 'u')\n\n\ndef reverse_consonants(string):\n    return string[::-1].replace('a', 'e').replace('e', 'a').replace('i', 'i').replace('o', 'o').replace('u', 'u')\n\n\nif __name__ == \"__main__\":\n    # test_vowels()\n    # test_consonants()\n    test_reverse()",
      -0.85791015625
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    letters = string.lower()\n    new_letters = ''\n    for letter in letters:\n        if letter in 'aeiou':\n            new_letters += letter.upper()\n    return new_letters\n\nprint reverse_vowels('hello')",
      -0.85791015625
    ],
    [
      "def reverse_vowels(string):\n    # +++your code here+++\n    return \"\".join(sorted(string, key=lambda c: c in \"aeiou\"))\n\nif __name__ == '__main__':\n    print reverse_vowels(\"Hello\")\n    print reverse_vowels(\"\")\n    print reverse_vowels(\"alex\")\n    print reverse_vowels(\"Hello World\")\n    print reverse_vowels(\"Hello World\")",
      -0.85791015625
    ],
    [
      "def reverse_vowels(string):\n    return string[::-1][:len(string)-1][::-1][:len(string)-1][::-1][:len(string)-1][::-1]\n\nprint reverse_vowels('hello')",
      -0.85791015625
    ],
    [
      "def reverse_vowels(string):\n    return ''.join(reversed(string))\n\nif __name__ == \"__main__\":\n    string = 'Hello World!'\n    print(reverse_vowels(string))",
      -0.85791015625
    ],
    [
      "import re\n\n\ndef reverse_vowels(string):\n    \"\"\"\n    Returns a string that has the vowels of a given string reversed.\n    :param string: the string to reverse\n    :return: the string with vowels reversed\n    \"\"\"\n    return re.sub('[aeiou]', 'AEIOU', string)\n\n\ndef main():\n    print(reverse_vowels('hello'))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def reverseVowels(string):\n    # Write your code here\n    \n    # First we will store the string in a list\n    list = string.split()\n    \n    # We will then reverse the list and then convert the list into a string\n    newString = \"\"\n    \n    # We will go through the list and find all the vowels\n    for i in list:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            newString = newString + i\n    \n    # Now we reverse the string\n    newString = newString[::-1]\n    \n    # Finally we return the string\n    return newString\n\nprint reverseVowels(\"Hello World\")",
      -0.85791015625
    ],
    [
      "def reverse_string(s):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    :param s: a string\n    :return: a string\n    \"\"\"\n    return ''.join([c for c in s if c not in 'aeiou'])\n\n\ndef test_reverse_string():\n    assert reverse_string('hello') == 'dlrow'\n    assert reverse_string('Hello') == 'dlrow'\n    assert reverse_string('A') == 'A'\n    assert reverse_string('abcd') == 'dcba'\n    assert reverse_string('aeiou') == 'aeiou'\n    assert reverse_string('a') == 'a'\n    assert reverse_string('') == ''",
      -0.85791015625
    ],
    [
      "def reverse_vowels(s):\n    \"\"\"\n    >>> reverse_vowels(\"hello\")\n    'holo'\n    >>> reverse_vowels(\"goodbye\")\n    'goodbye'\n    >>> reverse_vowels(\"hello\")\n    'holo'\n    \"\"\"\n    return \"\".join([c for c in s if c.lower() not in \"aeiou\"])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Reverse only the vowels of a given string\ndef reverse_vowels(string):\n    \"\"\"\n    Reverse only the vowels of a given string.\n\n    :param string: The string to reverse.\n    :return: The reversed string.\n    \"\"\"\n    return \"\".join([''.join(c) for c in reversed(string) if c.lower() in 'aeiou'])\n\n# Example\nprint(reverse_vowels(\"Hello World\"))",
      -0.8583984375
    ],
    [
      "import re\n\ndef reverse_only_vowels(string):\n    \"\"\"\n    Given a string, return a reversed version of the string\n    with only vowels.\n    \"\"\"\n    reversed_string = ''\n    for letter in string:\n        if re.search(r'[AEIOUaeiou]', letter):\n            reversed_string += letter\n    return reversed_string\n\nif __name__ == '__main__':\n    string = \"Hello, my name is John\"\n    print reverse_only_vowels(string)",
      -0.8583984375
    ],
    [
      "import re\n\ndef reverse_vowels(string):\n    '''\n    string: str, the string to reverse\n    return: str, the reversed string\n    '''\n    # create a regular expression\n    vowel_pattern = re.compile('[aeiouAEIOU]')\n    # create a new string by replacing the vowels with a space\n    new_string = string.replace('aeiouAEIOU','')\n    # reverse the vowels\n    return new_string.strip().lower()\n\nif __name__ == '__main__':\n    print reverse_vowels('Hello')",
      -0.8583984375
    ],
    [
      "def reverse_vowels(s):\n    return s.replace(\"a\", \"e\").replace(\"e\", \"a\").replace(\"i\", \"i\").replace(\"o\", \"o\").replace(\"u\", \"u\")\n\nprint reverse_vowels(\"hello\")",
      -0.8583984375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Reverse vowels only.\n    \"\"\"\n    \n    vowels = 'aeiou'\n    reverse_string = ''\n    for letter in string:\n        if letter in vowels:\n            reverse_string += letter\n        else:\n            reverse_string +=''\n    return reverse_string\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    \n    string = 'Hello World'\n    print 'Original string:', string\n    reverse_string = reverse_vowels(string)\n    print 'Reverse string:', reverse_string\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def reverse_vowels(string):\n    # write your code here\n    # The vowels in the string are 'a', 'e', 'i', 'o', 'u'\n    vowels = 'aeiou'\n    return ''.join(sorted(string, key=str.upper))\n\n\nif __name__ == '__main__':\n    print(reverse_vowels('Hello World'))",
      -0.8583984375
    ],
    [
      "def reverse_only_vowels(string):\n    \"\"\"\n    Return the reverse of the string, only containing vowels.\n    \"\"\"\n    return ''.join([x if x.lower() not in ['a', 'e', 'i', 'o', 'u'] else'' for x in string.lower()])\n\n\nprint(reverse_only_vowels('hello'))\n# 'aello'",
      -0.8583984375
    ],
    [
      "def reverse_only_vowels(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    return ''.join([''.join(['a', 'e', 'i', 'o', 'u'][(i + 1) % 4], 'o' + str(i + 1)) for i in range(len(text))])\n\nif __name__ == '__main__':\n    print reverse_only_vowels('Hello')",
      -0.8583984375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Reverses only the vowels of a given string.\n\n    >>> reverse_vowels('Hello')\n    'olleh'\n    >>> reverse_vowels('Hello')\n    'olleh'\n    >>> reverse_vowels('Hello')\n    'olleh'\n    \"\"\"\n    return ''.join([char for char in string if char.isupper() or char.islower()])\n\n\nif __name__ == \"__main__\":\n    print(reverse_vowels('Hello'))",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\ndef reverse_vowels(string):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(ch for ch in string if ch in vowels)\n\n# test\nprint reverse_vowels(\"hello\")",
      -0.8583984375
    ],
    [
      "def reverse_vowels(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if not s:\n        return ''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    #print 'vowels: ', vowels\n    for i in range(len(s)):\n        if s[i] not in vowels:\n            #print 'not vowels'\n            return s[::-1]\n    return s[::-1]\n\nif __name__ == '__main__':\n    print reverse_vowels('Hello')",
      -0.8583984375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Args:\n        string: A string of characters that will be reversed.\n\n    Returns:\n        A string with the vowels of the given string reversed.\n    \"\"\"\n    return ''.join(ch for ch in string if ch in 'aeiou')\n\n\nif __name__ == '__main__':\n    test_string = 'the quick brown fox jumps over the lazy dog'\n    print(reverse_vowels(test_string))",
      -0.8583984375
    ],
    [
      "def reverse_vowels(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    # TODO: Implement your code here.\n    return ''\n    \n\n# Test cases:\n\ntext = \"Hello World\"\nprint(reverse_vowels(text))\n\ntext = \"Hello\"\nprint(reverse_vowels(text))\n\ntext = \"A\"\nprint(reverse_vowels(text))\n\ntext = \"a\"\nprint(reverse_vowels(text))",
      -0.8583984375
    ],
    [
      "def reverse_vowels(string):\n    # Write your code here\n    if len(string) == 0:\n        return string\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = []\n    for i in range(len(string)):\n        if string[i] in vowels:\n            result.append(string[i])\n    return ''.join(result)\n\n\nif __name__ == '__main__':\n    print(reverse_vowels('hello'))",
      -0.8583984375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    :rtype: string\n    :returns: Returns the reverse vowels of a given string.\n    \"\"\"\n    return ''.join([c for c in string if c in 'aeiou'])\n\n\nif __name__ == '__main__':\n    print reverse_vowels('Hello')",
      -0.8583984375
    ],
    [
      "import re\n\n# Regex to find vowels\nvowel_regex = re.compile('[aeiou]')\n\n# Regex to find all vowels\nvowels = re.findall('[aeiou]', 'hello world')\n\n# Reversing vowels\nreversed_vowels = \"\".join(reversed(vowels))\n\n# Print the result\nprint(reversed_vowels)",
      -0.8583984375
    ],
    [
      "# Note that the vowels are defined as 'a', 'e', 'i', 'o', 'u'\n\ndef reverse_vowels(string):\n    if string == None:\n        return None\n    vowels = \"aeiou\"\n    for letter in string:\n        if letter not in vowels:\n            return string\n    return string[::-1]\n\n\nprint(reverse_vowels(\"Hello\"))\n#>>> olleH",
      -0.86083984375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    reverse_vowels(string) -> string\n    Reverse only the vowels of a given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_string = ''\n    for letter in string:\n        if letter in vowels:\n            reversed_string += letter\n        else:\n            reversed_string += letter[::-1]\n    return reversed_string",
      -0.86083984375
    ],
    [
      "def reverse_vowels(string):\n    for i in range(len(string)):\n        if string[i] in 'aeiou':\n            string = string[i:] + string[:i]\n    return string\n\n\nprint reverse_vowels('hello')",
      -1.431640625
    ],
    [
      "# Assign the method to a variable.\n# Note: if you do not assign the method to a variable, it will be \n# automatically assigned to the function.\nreverse = str.maketrans('abcdefghijklmnopqrstuvwxyz',\n                        'zyxwvutsrqponmlkjihgfedcba')\n\n# Create a string variable with the original string.\noriginal = 'abcdefghijklmnopqrstuvwxyz'\n\n# Reverse the string.\nprint(original.translate(reverse))",
      -1.478515625
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    >>> reverse_vowels(\"Hello\")\n    'oell'\n    >>> reverse_vowels(\"Hello\")\n    'oell'\n    >>> reverse_vowels(\"Hello\")\n    'oell'\n    >>> reverse_vowels(\"Hello\")\n    'oell'\n    \"\"\"\n    return \"\".join([vowel for vowel in string if vowel not in \"aeiou\"])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.814453125
    ],
    [
      "def reverseVowels(string):\n    \"\"\"\n    Input:\n        string: string to reverse.\n    Output:\n        reversedString: reversed string.\n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join(sorted(list(string), key=lambda x: vowels.index(x)))",
      -2.1875
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    >>> reverse_vowels(\"Hello\")\n    'olleh'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'\n    >>> reverse_vowels(\"Hello\")\n    'Hello'",
      -2.25
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Write a function to reverse only the vowels of a given string.\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vow",
      -2.74609375
    ],
    [
      "import re\n\ndef reverse_only_vowels(string):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \"\"\"\n    return ''.join([''.join(reversed(list(ch))) for ch in re.split('[^aeiouAEIOU]', string)])\n\nif __name__ == \"__main__\":\n    print(reverse_only_vowels('hello'))\n    print(reverse_only_vowels('I am a programmer'))\n    print(reverse_only_vowels('I am a python programmer'))\n    print(reverse_only_vowels('Hello, world'))",
      -2.859375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_vowels('hello')\n    'lhi'\n    >>> reverse_v",
      -3.01953125
    ],
    [
      "# Write a function to reverse only the vowels of a given string.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n\n# The vowels of a string are those characters which are considered to be vowels\n# when used in the English language.\n#\n# The vowels of a",
      -3.61328125
    ],
    [
      "def reverse_vowels(s):\n    return s[::-1]\n\nif __name__ == \"__main__\":\n    print(reverse_vowels(\"hello\"))\n    print(reverse_vowels(\"Hello\"))\n    print(reverse_vowels(\"world\"))\n    print(reverse_vowels(\"\"))\n    print(reverse_vowels(\"abc\"))\n    print(reverse_vowels(\"abcd\"))",
      -4.0234375
    ],
    [
      "def reverse_vowels(text):\n    # +++your code here+++\n    text = text.upper()\n    for letter in text:\n        if letter in ['A','E','I','O','U','Y']:\n            text = text[:text.find(letter)+1] + letter + text[text.find(letter)+2:]\n    return text\n\n# Test Cases\nprint reverse_vowels(\"Hello\")\nprint reverse_vowels(\"a\")\nprint reverse_vowels(\"Aa\")\nprint reverse_vowels(\"aa\")\nprint reverse_vowels(\"aaa\")\nprint reverse_vowels(\"aaaa\")\nprint reverse_vowels(\"aaaaa\")",
      -4.0390625
    ],
    [
      "# TODO:\n# 1) Remove the word.reverse\n# 2) Remove the 'print'\n# 3) Remove the 'print'\n# 4) Remove the 'print'\n# 5) Remove the 'print'\n# 6) Remove the 'print'\n# 7) Remove the 'print'\n# 8) Remove the 'print'\n# 9) Remove the 'print'\n# 10) Remove the 'print'\n# 11) Remove the 'print'\n# 12) Remove the 'print'\n# 13) Remove the 'print'\n# 14) Remove the 'print'\n# 15) Remove the 'print'\n# 16) Remove the 'print'\n# 17) Remove the 'print'\n# 18) Remove the 'print'\n# 19) Remove the 'print'\n# 20) Remove the 'print'\n# 21) Remove the 'print'\n# 22) Remove the 'print'\n# 23) Remove the 'print'\n# 24) Remove the 'print'\n# 25) Remove the 'print'\n# 26) Remove the 'print'\n# 27) Remove the 'print'\n# 28) Remove the 'print'\n# 29) Remove the 'print'\n# 30) Remove the 'print'\n# 31) Remove the 'print'\n# 32) Remove the 'print'\n# 33) Remove the 'print'\n# 34) Remove the 'print'\n# 35) Remove the 'print'\n# 36) Remove the 'print'\n# 37) Remove the 'print'\n# 38) Remove the 'print'\n# 39) Remove the 'print'\n# 40) Remove the 'print'\n# 41) Remove the 'print'\n# 42) Remove the 'print'\n# 43) Remove the 'print'\n# 44) Remove the 'print'\n# 45) Remove the 'print'\n# 46) Remove the 'print'\n# 47) Remove the 'print'\n# 48) Remove the 'print'\n# 49) Remove the 'print'\n# 50) Remove the 'print'\n# 51) Remove the 'print'\n# 52) Remove the 'print'\n# 53) Remove the 'print'\n# 54) Remove the 'print'\n# 55) Remove the 'print'\n# 56) Remove the 'print'\n# 57",
      -4.109375
    ],
    [
      "#\n# Use the built-in string class to store a string.\n#\n\n# Create a string object using the built-in string class.\n#\n# This string object is a sequence of characters and is initialized\n# with the empty string.\n#\n# You can use the built-in str function to convert the string object\n# to a string.\n#\n\n# Use the string class to create a string object that stores the vowels\n# of the string argument.\n#\n\n# Use the built-in string class to convert the string object to a string.\n#\n# Use the built-in reversed method to return a string object that is\n# the reverse of the string argument.\n#\n# Use the built-in str method to convert the string object to a string.\n#\n\n# Use the string class to create a string object that stores the vowels\n# of the string argument.\n#\n# Use the built-in reversed method to return a string object that is\n# the reverse of the string argument.\n#\n# Use the built-in str method to convert the string object to a string.\n#\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a string.\n\n# Use the built-in str method to convert the string object to a",
      -4.296875
    ],
    [
      "import sys\n\ndef reverse_vowels(string):\n    \"\"\"\n    string is a string to be reversed.\n    \"\"\"\n    return ''.join(reversed(string))\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print \"Usage: python reverse_vowels.py string\"\n        exit()\n    print reverse_vowels(sys.argv[1])",
      -4.4375
    ],
    [
      "import sys\n\ndef reverse_vowels(string):\n    # Write your code here\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    rev_str = ''\n    for i in range(len(string)):\n        if string[i] not in vowels:\n            rev_str += string[i]\n    return rev_str\n\nif __name__ == '__main__':\n    try:\n        string = sys.argv[1]\n    except:\n        string = input(\"Please enter a string: \")\n    print(reverse_vowels(string))",
      -4.828125
    ],
    [
      "def reverse_only_vowels(string):\n    \"\"\"\n    Args:\n        string: string to reverse\n    Returns:\n        string: string with only vowels\n    \"\"\"\n    return \"\".join([i for i in string if i in \"aeiou\"])\n\nif __name__ == \"__main__\":\n    print(reverse_only_vowels(\"Hello\"))",
      -4.85546875
    ],
    [
      "def reverse_vowels(string):\n    # +++your code here+++\n    return string[::-1]\n\n\n# Test Cases\n\ntest_strings = [\n    'Hello',\n    'leetcode',\n    'leetcode leetcode',\n    'leetcode',\n    'leetcode leetcode leetcode',\n    'leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leetcode leet",
      -5.0078125
    ],
    [
      "# Write a function to reverse only the vowels of a given string.\n# The vowels are defined as the letters a, e, i, o, u, and y.\n# If the string is empty, reverse it.\n\ndef reverse_only_vowels(string):\n    # +++your code here+++\n    if string == '':\n        return string\n    else:\n        return string[::-1]\n\n# Test Cases\n\nstring = \"hello\"\nprint(reverse_only_vowels(string))\n\nstring = \"greetings\"\nprint(reverse_only_vowels(string))\n\nstring = \"this is a test\"\nprint(reverse_only_vowels(string))\n\nstring = \"this is a test\"\nprint(reverse_only_vowels(string))\n\nstring = \"i love you\"\nprint(reverse_only_vowels(string))",
      -5.26171875
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    >>> reverse_vowels('Hello')\n    'oHlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')\n    'HlEl'\n    >>> reverse_vowels('Hello')",
      -5.58984375
    ],
    [
      "def reverse_vowels(s):\n    vowels = ['a','e','i','o','u']\n    return s[::-1]\n    #return ''.join(vowels).join(s.split())\n\nprint reverse_vowels('hello')\n#print reverse_vowels('a')\n\n#print reverse_vowels('Hello')\n#print reverse_vowels('hello world')\n#print reverse_vowels('Hello world')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse_vowels('a')\n#print reverse",
      -5.671875
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Write a function that reverses only the vowels of a given string.\n\n    >>> reverse_vowels(\"hello\")\n    'oello'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_vowels(\"hello\")\n    'heo'\n    >>> reverse_v",
      -6.13671875
    ],
    [
      "# TODO:\n# - Add a function to test whether a given string is a palindrome or not\n# - Add a function to reverse only the vowels of a given string\n\ndef reverse_only_vowels(string):\n    \"\"\"\n    Reverses only vowels of a given string\n    :param string: string to reverse only vowels\n    :return: reversed string\n    \"\"\"\n    return ''.join(c for c in string if c in 'aeiou')\n\n\ndef main():\n    \"\"\"\n    Main function\n    :return: None\n    \"\"\"\n    string = input(\"Please enter a string: \")\n\n    print(reverse_only_vowels(string))\n\n\nif __name__ == '__main__':\n    main()",
      -6.5390625
    ],
    [
      "# Returns a string reversed but without vowels\ndef reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = ''\n    for c in string:\n        if c not in vowels:\n            new_string += c\n    return new_string\n\n# Returns a string reversed\ndef reverse_string(string):\n    new_string = ''\n    for c in string:\n        new_string += c\n    return new_string\n\n# Returns a string reversed\ndef reverse_string_v(string):\n    new_string = ''\n    for c in string:\n        if c.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            new_string += c.lower()\n    return new_string\n\n# Returns a string reversed\ndef reverse_string_v2(string):\n    new_string = ''\n    for c in string:\n        if c.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            new_string += c.upper()\n    return new_string\n\n# Returns a string reversed\ndef reverse_string_v3(string):\n    new_string = ''\n    for c in string:\n        if c.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            new_string += c.upper()\n    return new_string\n\n# Returns a string reversed\ndef reverse_string_v4(string):\n    new_string = ''\n    for c in string:\n        if c.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            new_string += c.upper()\n    return new_string\n\n# Returns a string reversed\ndef reverse_string_v5(string):\n    new_string = ''\n    for c in string:\n        if c.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            new_string += c.upper()\n    return new_string\n\n# Returns a string reversed\ndef reverse_string_v6(string):\n    new_string = ''\n    for c",
      -6.5546875
    ],
    [
      "# Write your code here.\n\ndef reverse_vowels(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(s[::-1] for s in string if s in 'aeiou')\n\nif __name__ == '__main__':\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('leetcode'))\n    print(reverse_vowels('leetcode'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('hello'))\n    print(",
      -7.359375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Args:\n        string (str): A string with vowels only.\n\n    Returns:\n        str: The string with only vowels reversed.\n\n    Examples:\n        >>> reverse_vowels('Hello')\n        'olleh'\n        >>> reverse_vowels('The quick brown fox jumps over the lazy dog.')\n        'kdlby fxo qk rbz oj xf yj tp rd'\n    \"\"\"\n    return ''.join(s for s in string if s in 'aeiou')\n\n# The following solution is also acceptable.\ndef reverse_vowels_2(string):\n    \"\"\"\n    Args:\n        string (str): A string with vowels only.\n\n    Returns:\n        str: The string with only vowels reversed.\n\n    Examples:\n        >>> reverse_vowels_2('Hello')\n        'olleh'\n        >>> reverse_vowels_2('The quick brown fox jumps over the lazy dog.')\n        'kdlby fxo qk rbz oj xf yj tp rd'\n    \"\"\"\n    return ''.join(s for s in string if s in 'aeiou')\n\n\nif __name__ == '__main__':\n    assert reverse_vowels('Hello') == 'olleh'\n    assert reverse_vowels('The quick brown fox jumps over the lazy dog.') == 'kdlby fxo qk rbz oj xf yj tp rd'",
      -7.9609375
    ],
    [
      "def reverse_only_vowels(string):\n    for i in range(0, len(string)):\n        if string[i] not in ['a', 'e', 'i', 'o', 'u']:\n            string = string[:i] + string[i:]\n\n    return string\n\nif __name__ == '__main__':\n    print(reverse_only_vowels('abcd'))",
      -8.0546875
    ],
    [
      "def reverse_only_vowels(str):\n    # +++your code here+++\n    # Lint problem:\n    #\n    # The problem is that the following code will not work:\n    #\n    # str = str.lower()\n    # str = str.replace('a', '')\n    # str = str.replace('e', '')\n    # str = str.replace('i', '')\n    # str = str.replace('o', '')\n    # str = str.replace('u', '')\n    # str = str.replace('A', '')\n    # str = str.replace('E', '')\n    # str = str.replace('I', '')\n    # str = str.replace('O', '')\n    # str = str.replace('U', '')\n    #\n    # This code will work:\n    #\n    # str = str.lower()\n    # str = str.replace('a', '')\n    # str = str.replace('e', '')\n    # str = str.replace('i', '')\n    # str = str.replace('o', '')\n    # str = str.replace('u', '')\n    # str = str.replace('A', '')\n    # str = str.replace('E', '')\n    # str = str.replace('I', '')\n    # str = str.replace('O', '')\n    # str = str.replace('U', '')\n    #\n    # This code will work:\n    #\n    # str = str.lower()\n    # str = str.replace('A', '')\n    # str = str.replace('E', '')\n    # str = str.replace('I', '')\n    # str = str.replace('O', '')\n    # str = str.replace('U', '')\n    #\n    # This code will work:\n    #\n    # str = str.lower()\n    # str = str.replace('a', '')\n    # str = str.replace('e', '')\n    # str = str.replace('i', '')\n    # str = str.replace('o', '')\n    # str = str.replace('u",
      -8.3671875
    ],
    [
      "def reverse_string(s):\n    \"\"\"\n    Reverse only the vowels of a given string.\n\n    Input:\n        s: a string\n\n    Output:\n        a string with only vowels\n    \"\"\"\n    # Create a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    # Reverse the string\n    return ''.join(s[::-1] if w in vowels else w for w in s)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Test 1: Test with a string\n    print(reverse_string('hello'))\n\n    # Test 2: Test with a string\n    print(reverse_string('hello'))\n\n    # Test 3: Test with a string\n    print(reverse_string('hello'))\n\n    # Test 4: Test with a string\n    print(reverse_string('hello'))\n\n    # Test 5: Test with a string\n    print(reverse_string('hello'))\n\n    # Test 6: Test with a string\n    print(reverse_string('hello'))\n\nif __name__ == '__main__':\n    main()",
      -8.375
    ],
    [
      "# reverse_vowels_python.py\n#\n# Usage: reverse_vowels_python.py <string>\n#\n# Example: reverse_vowels_python.py \"Hello\"\n#\n# Output: \"olleh\"\n#\n# Assumptions:\n# - The input string is a valid string\n# - The input string is not empty\n\n# This function reverses only the vowels of a given string.\n# The vowels of a string are those characters which are at the start, middle, or end of the string.\n# The function is written in a way that is easy to read and understand.\n# The function is not optimized.\n#\n# Note:\n# - The function does not use any additional libraries.\n# - The function does not use any built-in libraries.\n# - The function does not use any other functions that are already implemented.\n# - The function does not use any other functions that are already imported.\n# - The function does not use any other global variables.\n# - The function does not use any other constants.\n# - The function does not use any other variables.\n# - The function does not use any other functions.\n# - The function does not use any other objects.\n# - The function does not use any other constants.\n# - The function does not use any other methods.\n# - The function does not use any other objects.\n# - The function does not use any other methods.\n# - The function does not use any other functions.\n# - The function does not use any other classes.\n# - The function does not use any other classes.\n# - The function does not use any other modules.\n\ndef reverse_vowels(string):\n    # Assign the string to a variable named input_string.\n    # The input_string is a string.\n    input_string = string\n\n    # Initialize a variable named reversed_string to be an empty string.\n    # The reversed_string is a string.\n    reversed_string = \"\"\n\n    # Loop through the characters in the input_string.\n    # The reversed_string is a string.\n    for char in input_string:\n        # If the character is a vowel, then add it to the reversed_string.\n        if char.isalpha",
      -8.4609375
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    string - a string to reverse\n    \"\"\"\n    \n    # convert string to list\n    string_list = list(string)\n    \n    # reverse list\n    string_list.reverse()\n    \n    # convert back to string\n    return ''.join(string_list)\n    \n    \nif __name__ == '__main__':\n    string = 'abcde'\n    print(reverse_vowels(string))",
      -8.7421875
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    string: a string\n    returns: a string in which the vowels have been reversed.\n    \"\"\"\n    vowels = \"aeiou\"\n    return ''.join([v for v in string if v in vowels])\n\ndef reverse_vowels_with_lambda(string):\n    \"\"\"\n    string: a string\n    returns: a string in which the vowels have been reversed.\n    \"\"\"\n    vowels = \"aeiou\"\n    return ''.join([v for v in string if v in vowels])\n\ndef reverse_vowels_with_list(string):\n    \"\"\"\n    string: a string\n    returns: a string in which the vowels have been reversed.\n    \"\"\"\n    vowels = \"aeiou\"\n    return ''.join([v for v in string if v in vowels])\n\ndef reverse_vowels_with_dict(string):\n    \"\"\"\n    string: a string\n    returns: a string in which the vowels have been reversed.\n    \"\"\"\n    vowels = \"aeiou\"\n    return ''.join([v for v in string if v in vowels])\n\ndef reverse_vowels_with_generator(string):\n    \"\"\"\n    string: a string\n    returns: a string in which the vowels have been reversed.\n    \"\"\"\n    vowels = \"aeiou\"\n    return ''.join([v for v in string if v in vowels])\n\ndef reverse_vowels_with_function(string):\n    \"\"\"\n    string: a string\n    returns: a string in which the vowels have been reversed.\n    \"\"\"\n    vowels = \"aeiou\"\n    return ''.join([v for v in string if v in vowels])\n\ndef reverse_vowels_with_generator_and_function(string):\n    \"\"\"\n    string: a string\n    returns: a string in which the vowels have been reversed.\n    \"\"\"\n    vowels = \"aeiou\"\n    return ''.join([v for v in string if v in vowels])\n\ndef reverse_vow",
      -9.234375
    ],
    [
      "# reverse the vowels of a string\n# (This is an example of a solution)\n\ndef reverse_vowels(string):\n    # reverse vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += char\n        else:\n            new_string += \" \"\n    return new_string\n\n# reverse vowels of a string using a list\ndef reverse_vowels_list(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += char\n        else:\n            new_string += \" \"\n    return new_string\n\n# reverse vowels of a string using a set\ndef reverse_vowels_set(string):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += char\n        else:\n            new_string += \" \"\n    return new_string\n\n# reverse vowels of a string using a dictionary\ndef reverse_vowels_dict(string):\n    vowels = {'a':0, 'e':0, 'i':0, 'o':0, 'u':0}\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += char\n        else:\n            new_string += \" \"\n    return new_string\n\n# reverse vowels of a string using a generator\ndef reverse_vowels_gen(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += char\n        else:\n            new_string += \" \"\n    return new_string\n\n# reverse vowels of a string using a generator\ndef reverse_vowels_gen_list(string",
      -9.7421875
    ],
    [
      "import re\n\n\ndef reverse_vowels(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # list of vowels in lowercase\n    vowels = \"aeiouy\"\n\n    # list of consonants in lowercase\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n\n    # get the number of vowels and consonants\n    vowels_count = len(vowels)\n    consonants_count = len(consonants)\n\n    # create a pattern for vowel\n    vowel_pattern = r\"([aeiouy]\"\n\n    # create a pattern for consonant\n    consonant_pattern = r\"([bcdfghjklmnpqrstvwxyz]\"\n\n    # create a pattern for vowel and consonant\n    pattern = vowel_pattern + consonant_pattern\n\n    # create a pattern for the string\n    pattern = pattern + r\")\"\n\n    # create a pattern for the string\n    pattern = pattern + r\"|\"\n\n    # create a pattern for the string\n    pattern = pattern + r\"|$\"\n\n    # create a pattern for the string\n    pattern = pattern + r\"|[^aeiouybcdfghjklmnpqrstvwxyz]\"\n\n    # create a pattern for the string\n    pattern = pattern + r\"|[^aeiouybcdfghjklmnpqrstvwxyz]\"\n\n    # create a pattern for the string\n    pattern = pattern + r\"|[^aeiouybcdfghjklmnpqrstvwxyz]\"\n\n    # create a pattern for the string\n    pattern = pattern + r\"|[^aeiouybcdfghjklmnpqrstvwxyz]\"\n\n    # create a pattern for the string\n    pattern = pattern + r\"|[^aeiouybcdfghjklmnpqrstvwxyz]\"\n\n    # create a pattern for the string\n    pattern = pattern + r\"|[^aeiouybcdfghjklmnpqrstvwxyz]\"\n\n    # create a pattern for the string",
      -11.3515625
    ],
    [
      "# reverse only the vowels of a given string\n# https://www.reddit.com/r/dailyprogrammer/comments/3wz9gf/reverse_only_the_vowels_of_a_given/\n\ndef reverse_vowels(string):\n    '''\n    string: a string\n    returns: a string\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for char in string:\n        if char in vowels:\n            string = string[::-1]\n    return string\n\nprint(reverse_vowels('Hello'))\nprint(reverse_vowels('Hello World'))\nprint(reverse_vowels('Hello World!'))",
      -12.28125
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char in \"aeiouAEIOU\":\n            result += char.upper()\n    return result\n\nif __name__ == \"__main__\":\n    print reverse_vowels(\"hello\")\n    print reverse_vowels(\"heLLo\")\n    print reverse_vowels(\"heLLo\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_vowels(\"HELLO\")\n    print reverse_v",
      -12.71875
    ],
    [
      "# Note: If you're curious about how this works, check out the\n# comments in the main function.\n\ndef reverse_vowels(s):\n    \"\"\"\n    Return a string with the vowels of s reversed.\n    \"\"\"\n    # Note: We're using a regular expression to find the vowels in s.\n    # We could use a different method to find vowels.\n    vowels = 'aeiouAEIOU'\n    # Note: We're using a reversed list to find the vowels in s.\n    # We could use a different method to find vowels.\n    vowels_reversed = reversed(vowels)\n\n    # Note: We're using a reversed list to find the vowels in s.\n    # We could use a different method to find vowels.\n    vowels_reversed_reversed = reversed(vowels_reversed)\n\n    # Note: We're using a reversed list to find the vowels in s.\n    # We could use a different method to find vowels.\n    vowels_reversed_reversed_reversed = reversed(vowels_reversed_reversed)\n\n    # Note: We're using a reversed list to find the vowels in s.\n    # We could use a different method to find vowels.\n    vowels_reversed_reversed_reversed_reversed = reversed(vowels_reversed_reversed_reversed)\n\n    # Note: We're using a reversed list to find the vowels in s.\n    # We could use a different method to find vowels.\n    vowels_reversed_reversed_reversed_reversed_reversed = reversed(vowels_reversed_reversed_reversed_reversed)\n\n    return ''.join(vowels_reversed_reversed_reversed_reversed_reversed)\n\nif __name__ == '__main__':\n    print(reverse_vowels('hello'))\n    print(reverse_vowels('a'))\n    print(reverse_vowels('ab'))\n    print(",
      -13.0078125
    ],
    [
      "def reverse_vowels(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return \"\".join(vowel_map[s[i]] for i in range(len(s)))\n\ndef vowel_map(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return [s[i] for i in range(len(s)) if s[i] in vowels]\n\nif __name__ == '__main__':\n    assert(reverse_vowels(\"Hello World\") == \"dlrow olleH\")",
      -13.1875
    ],
    [
      "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return string[::-1].translate(str.maketrans('', '', vowels))\n\ndef main():\n    string = 'Hello, World!'\n    print(reverse_vowels(string))\n\nif __name__ == '__main__':\n    main()",
      -13.6171875
    ],
    [
      "import string\n\ndef reverse_string(string):\n    \"\"\"\n    Reverses only the vowels of a given string.\n    \"\"\"\n    # Create a list of all the vowels in the string.\n    vowels = [c for c in string if c.lower() in string[::-1] if c.isupper()]\n    # If there are no vowels, return the string.\n    if len(vowels) == 0:\n        return string\n    # Otherwise, return the reversed string with the vowels reversed.\n    return ''.join(vowels[::-1])\n\nif __name__ == '__main__':\n    string = input(\"Please enter a string: \")\n    reverse_string(string)",
      -14.0859375
    ],
    [
      "def reverse_vowels(string):\n    if string is None:\n        return None\n\n    string = string.lower()\n    result = \"\"\n    for char in string:\n        if char.lower() in \"aeiou\":\n            result += char.lower()\n        else:\n            result += char\n    return result\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [\"a\", \"a\"],\n        [\"ab\", \"ba\"],\n        [\"aa\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"ab\", \"ab\"],\n        [\"a\", \"ab\"],\n        [\"a\", \"bb\"],\n        [\"ab\", \"ab\"],\n        [\"abc\", \"cba\"],\n        [\"ab\", \"abc\"],\n        [\"abc\", \"ab\"],\n        [\"abcd\", \"ad\"],\n        [\"a\", \"abc\"],\n        [\"a\", \"aac\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"a\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa\"],\n        [\"a\", \"aa",
      -14.328125
    ],
    [
      "# Reverse only the vowels of a given string\ndef reverse_vowels(s):\n    \"\"\"\n    Return a reversed version of the string s.\n\n    Reverse only the vowels of a given string.\n\n    Example:\n    reverse_vowels(\"hello\") -> \"olleh\"\n    reverse_vowels(\"goodbye\") -> \"bodego\"\n    reverse_vowels(\"hello\") -> \"olleh\"\n    \"\"\"\n    return \"\".join(ch for ch in s if ch in \"aeiouy\")\n\n# Test cases\ntest_cases = [\n    (\"hello\", \"olleh\"),\n    (\"goodbye\", \"bodego\"),\n    (\"hello\", \"olleh\"),\n    (\"hello\", \"olleh\"),\n    (\"hello\", \"olleh\"),\n    (\"hello\", \"olleh\"),\n]\n\nfor test_case in test_cases:\n    print(\"Reverse vowels of: \\\"{}\\\" -> \\\"{}\\\"\".format(test_case[0], reverse_vowels(test_case[0])))",
      -14.4140625
    ],
    [
      "def reverse_vowels(s):\n    \"\"\"\n    s: string\n    \"\"\"\n    return ''.join([''.join(c) for c in zip(*[iter(s), reversed(s)])])\n\n\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_vowels('hello'))\n# print(reverse_",
      -14.5625
    ],
    [
      "def reverse_vowels(s):\n    # +++your code here+++\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([v for v in s if v in vowels])\n\n\n# Test Cases\n\n# Test Case 1:\ns = 'hello'\nprint(reverse_vowels(s))\n# 'dlrow olleH'\n\n# Test Case 2:\ns = 'leetcode'\nprint(reverse_vowels(s))\n# 'leetleetcode'\n\n# Test Case 3:\ns = 'loveleetcode'\nprint(reverse_vowels(s))\n# 'loveleetcode'\n\n# Test Case 4:\ns = 'loveleetcode'\nprint(reverse_vowels(s))\n# 'loveleetcode'\n\n# Test Case 5:\ns = 'hello'\nprint(reverse_vowels(s))\n# 'dlrow olleH'\n\n# Test Case 6:\ns = 'leetcode'\nprint(reverse_vowels(s))\n# 'leetleetcode'\n\n# Test Case 7:\ns = 'loveleetcode'\nprint(reverse_vowels(s))\n# 'loveleetcode'\n\n# Test Case 8:\ns = 'loveleetcode'\nprint(reverse_vowels(s))\n# 'loveleetcode'\n\n# Test Case 9:\ns = 'hello'\nprint(reverse_vowels(s))\n# 'dlrow olleH'\n\n# Test Case 10:\ns = 'leetcode'\nprint(reverse_vowels(s))\n# 'leetleetcode'\n\n# Test Case 11:\ns = 'loveleetcode'\nprint(reverse_vowels(s))\n# 'loveleetcode'\n\n# Test Case 12:\ns = 'loveleetcode'\nprint(reverse_vowels(s))\n# 'loveleetcode'",
      -15.21875
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    Write a function that reverses only the vowels of a given string.\n    \"\"\"\n    new_string = \"\"\n    for letter in string:\n        if letter.lower() in \"aeiou\":\n            new_string += letter.upper()\n    return new_string\n\n# Test Cases\n#string = \"Hello\"\n#string = \"world\"\n#string = \"this is a test\"\n#string = \"hello world\"\n#string = \"hello\"\n#string = \"This is a test\"\n#string = \"a test\"\n#string = \"This is a test\"\n#string = \"test\"\n#string = \"This is a test\"\n#string = \"test\"\n#string = \"a\"\n#string = \"A\"\n#string = \"a\"\n#string = \"A\"\n#string = \"A\"\n#string = \"A\"\n#string = \"A\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string = \"a\"\n#string =",
      -15.40625
    ],
    [
      "# First, write a function that takes a string as input and returns a string.\n# Return the reversed string.\n\n# Note:\n# For the purpose of this challenge, 'vowels' are considered to be\n# 'aeiou'\n\n# Hint:\n# You can use the list comprehension to get all the vowels.\n\ndef reverse_vowels(s):\n    return ''.join(ch for ch in s if ch in 'aeiou')\n\n# Test Cases\nprint(reverse_vowels('hello'))\nprint(reverse_vowels('there'))\nprint(reverse_vowels('goodbye'))\nprint(reverse_vowels('howdy'))\nprint(reverse_vowels('adios'))",
      -16.96875
    ],
    [
      "# Example 1:\n# Input: \"hello\"\n# Output: \"olleh\"\n# Explanation: Only 'h' and 'e' is a vowel.\n# Example 2:\n# Input: \"leetcode\"\n# Output: \"leotcede\"\n# Explanation: Both 'l' and 'e' are vowels.\n# Example 3:\n# Input: \"wordtastic\"\n# Output: \"woordtas\"\n# Explanation: 'w' is a vowel, 't' is a consonant.\n# Example 4:\n# Input: \"1a\"\n# Output: \"10\"\n# Explanation: Only 'a' is a vowel.\n\n# Note:\n# The wordlist is a string, length will not exceed 10,000.\n# All letters are lowercase.\n\nclass Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        def is_vowel(c):\n            return c in 'aeiou'\n        return \"\".join(\n            [c if is_vowel(c) else '_' for c in s])\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.reverseVowels(\"hello\")\n    print solution.reverseVowels(\"leetcode\")\n    print solution.reverseVowels(\"wordtastic\")\n    print solution.reverseVowels(\"1a\")",
      -17.15625
    ],
    [
      "def reverse_only_vowels(string):\n    # +++your code here+++\n    vowels = 'aeiou'\n    return ''.join(vowels.index(char) for char in string)\n\ndef main():\n    test_cases = [\n        ('Hello World', 'dlrow olleh'),\n        ('Hello World', 'World Hello'),\n        ('Hello', 'World'),\n        ('I am John', 'jhn am ji'),\n        ('Hello', ''),\n        ('', 'amh'),\n    ]\n\n    for string, expected in test_cases:\n        print('String: {}, Expected: {}'.format(string, expected))\n        result = reverse_only_vowels(string)\n        print('Result: {}, Expected: {}'.format(result, expected))\n        assert result == expected\n\nif __name__ == '__main__':\n    main()",
      -17.265625
    ],
    [
      "def reverse_vowels(string):\n    \"\"\"\n    string: The string to reverse.\n    return: A reversed version of the string.\n    \"\"\"\n    # Use the in operator to find out what vowels are in the string.\n    vowels = [ch for ch in string if ch in \"aeiou\"]\n\n    # Reverse the vowels.\n    return string[::-1] + \"\".join(vowels)\n\n# Test Cases\nstring = \"Hello World\"\nprint(reverse_vowels(string))",
      -18.5625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}