{
  "problem": {
    "task_id": "MBPP/435",
    "prompt": "Write a python function to find the last digit of a given number.",
    "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) ",
    "test_list": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ],
    "challenge_test_list": [],
    "problem_id": 424
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# https://github.com/david-blondeau/coding-interview-questions/blob/master/last-digit-of-a-number.py\n\ndef last_digit(n):\n    \"\"\"\n    Returns the last digit of a given number.\n    >>> last_digit(12345)\n    '5'\n    >>> last_digit(1234)\n    '4'\n    >>> last_digit(123)\n    '1'\n    >>> last_digit(123456789)\n    '9'\n    >>> last_digit(12345678901)\n    '1'\n    \"\"\"\n    if n <= 0:\n        return ''\n    n = str(n)\n    return n[-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      12.625
    ],
    [
      "def lastDigit(num):\n    return num % 10\n\n\n# Test Cases\nprint(lastDigit(1234))\nprint(lastDigit(12345))\nprint(lastDigit(1234567890))\nprint(lastDigit(12345678901))\nprint(lastDigit(1234567890123))\nprint(lastDigit(123456789012345))\nprint(lastDigit(12345678901234567))\nprint(lastDigit(123456789012345678))\nprint(lastDigit(1234567890123456789))",
      11.3125
    ],
    [
      "def last_digit(num):\n    \"\"\"\n    Input:\n    num -- a number\n\n    Output:\n    last_digit -- the last digit of num\n    \"\"\"\n    return num % 10\n\nprint last_digit(1)\nprint last_digit(12)\nprint last_digit(123)\nprint last_digit(12345)\nprint last_digit(1234567)\nprint last_digit(123456789)\nprint last_digit(12345678901)\nprint last_digit(1234567890123)\nprint last_digit(123456789012345)",
      7.98828125
    ],
    [
      "import math\n\ndef last_digit(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return math.floor(number % 10)\n\nif __name__ == \"__main__\":\n    assert last_digit(123) == 2, \"wrong answer\"\n    assert last_digit(12345) == 5, \"wrong answer\"\n    assert last_digit(1234567) == 7, \"wrong answer\"\n    assert last_digit(12345678) == 8, \"wrong answer\"\n    assert last_digit(123456789) == 9, \"wrong answer\"\n    assert last_digit(1234567890) == 0, \"wrong answer\"\n    assert last_digit(12345678901) == 1, \"wrong answer\"\n    assert last_digit(123456789012) == 2, \"wrong answer\"\n    assert last_digit(1234567890123) == 3, \"wrong answer\"\n    assert last_digit(12345678901234) == 4, \"wrong answer\"\n    assert last_digit(123456789012345) == 5, \"wrong answer\"\n    assert last_digit(1234567890123456) == 6, \"wrong answer\"\n    assert last_digit(12345678901234567) == 7, \"wrong answer\"\n    assert last_digit(123456789012345678) == 8, \"wrong answer\"\n    assert last_digit(1234567890123456789) == 9, \"wrong answer\"",
      7.828125
    ],
    [
      "def last_digit(num):\n    return num % 10\n\n# Your last_digit function should return a integer.\n#\n# Test cases:\n#     Input:  0\n#     Output: 0\n#     Input:  9\n#     Output: 9\n#     Input:  123\n#     Output: 3\n#     Input:  101\n#     Output: 5\n#     Input:  10001\n#     Output: 5\n#     Input:  9000\n#     Output: 0\n#     Input:  10000001\n#     Output: 1\n#     Input:  11\n#     Output: 1\n#     Input:  -1\n#     Output: -1\n#     Input:  -11\n#     Output: -1\n#     Input:  -10001\n#     Output: -1\n#     Input:  -9000\n#     Output: -1\n#     Input:  -10000001\n#     Output: -1",
      7.76953125
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    :param number: integer\n    :return: integer\n    \"\"\"\n    return int(str(number)[-1])\n\nif __name__ == '__main__':\n    print last_digit(123)\n    print last_digit(0)\n    print last_digit(9)\n    print last_digit(99)\n    print last_digit(100)\n    print last_digit(12345)\n    print last_digit(1234567)\n    print last_digit(123456789)\n    print last_digit(12345678901)\n    print last_digit(123456789012)",
      7.16015625
    ],
    [
      "def last_digit(n):\n    return n % 10\n\n\ndef main():\n    print(last_digit(5))\n    print(last_digit(1234))\n    print(last_digit(12345))\n    print(last_digit(123456))\n    print(last_digit(1234567))\n    print(last_digit(12345678))\n    print(last_digit(123456789))\n    print(last_digit(12345678901))\n\nif __name__ == '__main__':\n    main()",
      6.30859375
    ],
    [
      "# Define a function last_digit\n# Input: number\n# Return: last digit\ndef last_digit(n):\n    # Convert the number to a string\n    s = str(n)\n    # Convert the string to a list of digits\n    l = list(s)\n    # Find the last digit\n    last_digit = l.pop()\n    # Convert the list back to a number\n    return int(last_digit)\n\n# Test cases\nassert last_digit(23) == 2\nassert last_digit(7) == 7\nassert last_digit(1) == 1\nassert last_digit(0) == 0\nassert last_digit(9) == 9",
      6.10546875
    ],
    [
      "def last_digit(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return num % 10\n\nif __name__ == '__main__':\n    print last_digit(1)\n    print last_digit(10)\n    print last_digit(100)\n    print last_digit(1000)\n    print last_digit(10000)\n    print last_digit(100000)\n    print last_digit(1000000)\n    print last_digit(10000000)\n    print last_digit(100000000)\n    print last_digit(1000000000)\n    print last_digit(10000000000)\n    print last_digit(100000000000)",
      5.59765625
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    :param n: The number whose last digit we want to find.\n    :return: The last digit of the number.\n    \"\"\"\n    return int(n) % 10\n\n\ndef last_digit_python(n):\n    \"\"\"\n    :param n: The number whose last digit we want to find.\n    :return: The last digit of the number.\n    \"\"\"\n    return n % 10\n\n\nif __name__ == \"__main__\":\n    assert last_digit(123) == 3\n    assert last_digit_python(123) == 3",
      5.0625
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    :param n: a number\n    :return: the last digit of the number\n    \"\"\"\n    return n % 10\n\n\ndef test(n):\n    print(last_digit(n))\n\n\nif __name__ == '__main__':\n    test(123)\n    test(12345)\n    test(1234567)\n    test(123456789)",
      4.5234375
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return int(str(number)[-1])\n\nif __name__ == '__main__':\n    assert last_digit(123) == 2, 'Wrong last digit'\n    assert last_digit(123456789) == 9, 'Wrong last digit'\n    assert last_digit(1234567890) == 0, 'Wrong last digit'\n    assert last_digit(12345678900) == 0, 'Wrong last digit'\n    assert last_digit(12345678901) == 0, 'Wrong last digit'\n    assert last_digit(123456789012) == 0, 'Wrong last digit'\n    assert last_digit(1234567890123456789) == 0, 'Wrong last digit'\n    assert last_digit(12345678901234567890) == 0, 'Wrong last digit'\n    assert last_digit(123456789012345678901) == 0, 'Wrong last digit'\n    assert last_digit(1234567890123456789012) == 0, 'Wrong last digit'",
      4.2890625
    ],
    [
      "def last_digit(number):\n    return number % 10\n\nif __name__ == '__main__':\n    print(last_digit(1234))\n    print(last_digit(12))\n    print(last_digit(123))\n    print(last_digit(12.3))\n    print(last_digit(0))\n    print(last_digit(1))\n    print(last_digit(1234.2))\n    print(last_digit(123.4))\n    print(last_digit(123.45))\n    print(last_digit(123.456))\n    print(last_digit(123.4567))\n    print(last_digit(123.45678))\n    print(last_digit(123.456789))",
      3.92578125
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    :param number: The number to find the last digit of.\n    :return: The last digit of number.\n    \"\"\"\n\n    return int(number) % 10\n\n\ndef main():\n    \"\"\"\n    Write a function last_digit that takes a number as input and returns its last digit.\n    \"\"\"\n\n    number = 100\n    last_digit(number)\n\nif __name__ == '__main__':\n    main()",
      3.779296875
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    Find the last digit of a given number.\n    :param n:\n    :return:\n    \"\"\"\n    return n % 10\n\n\nif __name__ == '__main__':\n    print(last_digit(123))\n    print(last_digit(12))\n    print(last_digit(12345))\n    print(last_digit(123456789))",
      3.77734375
    ],
    [
      "#!/usr/bin/env python\n\ndef last_digit(number):\n    return int(str(number)[-1])\n\n# Sample Output\n# last_digit(4) = 4\n# last_digit(6) = 6\n# last_digit(7) = 7\n# last_digit(9) = 9\n\nif __name__ == '__main__':\n    print last_digit(4)\n    print last_digit(6)\n    print last_digit(7)\n    print last_digit(9)",
      3.36328125
    ],
    [
      "def last_digit(n):\n    return int(n) % 10\n\ndef last_digit_in_base(n, base):\n    return n % base\n\nif __name__ == '__main__':\n    # test cases\n    print(last_digit(0))\n    print(last_digit(1))\n    print(last_digit(10))\n    print(last_digit(100))\n    print(last_digit(1000))\n    print(last_digit(10000))\n    print(last_digit(1000000))\n    print(last_digit(10000000))\n    print(last_digit(100000000))\n    print(last_digit(1000000000))\n    print(last_digit(10000000000))\n    print(last_digit(100000000000))\n    print(last_digit(1000000000000))\n    print(last_digit(10000000000000))\n    print(last_digit(100000000000000))\n    print(last_digit(1000000000000000))\n    print(last_digit(10000000000000000))\n    print(last_digit(100000000000000000))\n    print(last_digit(1000000000000000000))\n    print(last_digit(10000000000000000000))",
      2.72265625
    ],
    [
      "# Returns the last digit of a given number.\ndef last_digit(number):\n    return int(number) % 10\n\n# Test Cases\nprint(last_digit(100))\nprint(last_digit(1234))\nprint(last_digit(99))\nprint(last_digit(1))\nprint(last_digit(0))\n\n# Your last_digit solution",
      2.380859375
    ],
    [
      "# This is a solution to the problem\n# https://www.hackerrank.com/challenges/last-digit/problem\n# https://www.hackerrank.com/challenges/last-digit/submissions/code/907878\n\ndef last_digit(n):\n    return n % 10\n\n# Your code here\n\ndef last_digit(n):\n    return n % 10\n\n# Your code here\n\ndef last_digit(n):\n    return n % 10",
      2.3359375
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    Returns the last digit of a given number.\n    >>> last_digit(1234)\n    '4'\n    >>> last_digit(1)\n    '1'\n    >>> last_digit(0)\n    '0'\n    \"\"\"\n    if number == 0:\n        return '0'\n    return str(number % 10)\n\nprint(last_digit(1234))",
      1.8896484375
    ],
    [
      "def last_digit(n):\n    return str(n)[-1]\n\nif __name__ == \"__main__\":\n    assert last_digit(123) == '3'\n    assert last_digit(12345) == '5'\n    assert last_digit(1234567) == '7'",
      1.7890625
    ],
    [
      "def last_digit(number):\n    return int(str(number)[-1])\n\n\n# Test Cases\n\n# Input:\n#   13\n# Output:\n#   3\n# Input:\n#   123\n# Output:\n#   2\n# Input:\n#   0\n# Output:\n#   0\n# Input:\n#   -1\n# Output:\n#   -1\n# Input:\n#   -123\n# Output:\n#   -1\n\n# Input:\n#   12345\n# Output:\n#   5\n# Input:\n#   -12345\n# Output:\n#   -5\n# Input:\n#   123456\n# Output:\n#   6\n# Input:\n#   -123456\n# Output:\n#   -6\n# Input:\n#   1234567\n# Output:\n#   7\n# Input:\n#   -1234567\n# Output:\n#   -7\n# Input:\n#   12345678\n# Output:\n#   8\n# Input:\n#   -12345678\n# Output:\n#   -8\n\n# Input:\n#   123456789\n# Output:\n#   9\n# Input:\n#   -123456789\n# Output:\n#   -9\n# Input:\n#   1234567890\n# Output:\n#   10\n# Input:\n#   -1234567890\n# Output:\n#   -10\n\n# Input:\n#   10000000000\n# Output:\n#   100\n# Input:\n#   -10000000000\n# Output:\n#   -100\n# Input:\n#   100000000000\n# Output:\n#   1000\n# Input:\n#   -100000000000\n# Output:\n#   -1000\n# Input:\n#   1000000000000\n# Output:\n#   10000\n# Input:\n#   -1000000000000\n# Output:\n#   -10000\n# Input:\n#   10000000000000\n# Output:\n#   100000\n# Input:\n#   -10000000000000\n# Output:\n#   -100000\n# Input:\n#   100000000000000\n# Output:\n#",
      1.6982421875
    ],
    [
      "def last_digit(num):\n    \"\"\"\n    Input: A number\n    Output: The last digit of the number.\n    \"\"\"\n    # Get the last digit of the number\n    return str(num % 10)\n\n# Test Cases\n\nprint last_digit(123456789)",
      1.1611328125
    ],
    [
      "# https://www.hackerrank.com/challenges/last-digit/problem\n\ndef last_digit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Get the last digit of n.\n    return n % 10\n\n\nif __name__ == '__main__':\n    input_num = int(input())\n    print(last_digit(input_num))",
      1.1005859375
    ],
    [
      "def last_digit(num):\n    # write your code here\n    if num is 0:\n        return 0\n    return num % 10\n\ndef test():\n    assert last_digit(0) == 0\n    assert last_digit(1) == 1\n    assert last_digit(2) == 2\n    assert last_digit(10) == 0\n    assert last_digit(11) == 1\n    assert last_digit(100) == 2\n    assert last_digit(999) == 9\n\nif __name__ == \"__main__\":\n    test()",
      0.9970703125
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(str(n)[-1])\n\n\ndef main():\n    \"\"\"\n    Sample Input:\n        5\n    Sample Output:\n        1\n    \"\"\"\n    print(last_digit(5))\n\n\nif __name__ == '__main__':\n    main()",
      0.9072265625
    ],
    [
      "import unittest\n\ndef last_digit(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return int(str(number)[-1])\n\nclass Test(unittest.TestCase):\n\n    def test_last_digit(self):\n        self.assertEqual(last_digit(0), 0)\n        self.assertEqual(last_digit(1), 1)\n        self.assertEqual(last_digit(3), 3)\n        self.assertEqual(last_digit(10), 10)\n        self.assertEqual(last_digit(100), 10)\n        self.assertEqual(last_digit(1000), 10)\n        self.assertEqual(last_digit(10000), 10)\n        self.assertEqual(last_digit(100000), 10)\n        self.assertEqual(last_digit(1000000), 10)\n        self.assertEqual(last_digit(10000000), 10)\n        self.assertEqual(last_digit(100000000), 10)\n        self.assertEqual(last_digit(1000000000), 10)\n        self.assertEqual(last_digit(10000000000), 10)\n        self.assertEqual(last_digit(100000000000), 10)\n        self.assertEqual(last_digit(1000000000000), 10)\n        self.assertEqual(last_digit(10000000000000), 10)\n        self.assertEqual(last_digit(100000000000000), 10)\n        self.assertEqual(last_digit(1000000000000000), 10)\n        self.assertEqual(last_digit(10000000000000000), 10)\n        self.assertEqual(last_digit(100000000000000000), 10)\n        self.assertEqual(last_digit(1000000000000000000), 10)\n\nif __name__ == '__main__':\n    unittest.main()",
      0.78759765625
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    last_digit(number) -> int\n    \n    Find the last digit of a given number.\n    \n    >>> last_digit(123)\n    3\n    >>> last_digit(0)\n    0\n    >>> last_digit(-123)\n    -1\n    \"\"\"\n    return int(number) % 10",
      0.609375
    ],
    [
      "def last_digit(number):\n    return number % 10\n\n# Test Cases\ntest_cases = [\n    (1, '1'),\n    (10, '0'),\n    (13, '1'),\n    (100, '0'),\n    (1000, '1'),\n    (123456789, '9'),\n    (12345678900123456789, '9'),\n    (1234567890012345678900123456789, '9'),\n    (123456789001234567890012345678900123456789, '9')\n]\n\nfor test_case in test_cases:\n    print 'Last digit for {} is {}'.format(test_case[0], last_digit(test_case[0]))",
      0.50732421875
    ],
    [
      "def last_digit(n):\n    return n % 10\n\nif __name__ == '__main__':\n    #print last_digit(123)\n    print last_digit(10)",
      0.453369140625
    ],
    [
      "#!/usr/bin/env python\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport sys\n\ndef last_digit(number):\n    \"\"\"\n    Write a function last_digit that takes a number as an input and returns\n    the last digit of that number.\n\n    >>> last_digit(15)\n    '5'\n    >>> last_digit(123456789)\n    '9'\n    \"\"\"\n    return str(number)[-1]\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        sys.exit(\"Usage: %s <number>\" % sys.argv[0])\n\n    try:\n        number = int(sys.argv[1])\n    except ValueError:\n        sys.exit(\"Number must be an integer\")\n\n    print(last_digit(number))",
      0.343505859375
    ],
    [
      "def last_digit(num):\n    \"\"\"\n    Write a function last_digit that takes a number as input and returns the\n    last digit of that number.\n    \"\"\"\n    return num % 10\n\n\ndef test_last_digit():\n    assert last_digit(13) == 3\n    assert last_digit(1) == 0\n    assert last_digit(5) == 5\n    assert last_digit(0) == 0\n    assert last_digit(12) == 2\n    assert last_digit(123) == 3\n    assert last_digit(123456789) == 9\n    assert last_digit(100000000000000000000) == 0",
      0.31494140625
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    Input: number\n    Output: last digit of number\n    \"\"\"\n\n    if number < 0:\n        raise ValueError(\"number must be non-negative\")\n\n    return int(number % 10)\n\nif __name__ == \"__main__\":\n\n    number = -4\n    last_digit_function = last_digit(number)\n\n    print(\"The last digit of {} is {}\".format(number, last_digit_function))",
      0.1826171875
    ],
    [
      "def last_digit(number):\n    return number % 10\n\n\n# Sample Run\nprint(last_digit(1234))\nprint(last_digit(123))\nprint(last_digit(12345))\nprint(last_digit(123456))\nprint(last_digit(1234567))\nprint(last_digit(12345678))\nprint(last_digit(123456789))",
      0.09503173828125
    ],
    [
      "# This solution is based on the solution from\n# http://www.geeksforgeeks.org/last-digit-of-a-given-number/\n\ndef last_digit(n):\n    \"\"\"\n    Returns the last digit of the given number.\n    :param n: number\n    :return: last digit of the given number\n    \"\"\"\n    return n % 10\n\n\nif __name__ == '__main__':\n    # Tests\n    assert last_digit(123) == 3\n    assert last_digit(100) == 2\n    assert last_digit(99) == 0\n    assert last_digit(5) == 5\n    assert last_digit(3) == 3\n    assert last_digit(1) == 0\n    assert last_digit(0) == 0",
      -0.197021484375
    ],
    [
      "def lastDigit(number):\n    \"\"\"\n    lastDigit(number) -> int\n\n    Returns the last digit of the given number.\n    \"\"\"\n    return int(number % 10)\n\n\ndef main():\n    \"\"\"\n    main() -> None\n\n    Tests lastDigit().\n    \"\"\"\n    assert lastDigit(12) == '2', \"Error: lastDigit(12) == '2'\"\n    assert lastDigit(123) == '3', \"Error: lastDigit(123) == '3'\"\n    assert lastDigit(1234) == '4', \"Error: lastDigit(1234) == '4'\"\n    assert lastDigit(12345) == '5', \"Error: lastDigit(12345) == '5'\"\n    assert lastDigit(123456) == '6', \"Error: lastDigit(123456) == '6'\"\n    assert lastDigit(1234567) == '7', \"Error: lastDigit(1234567) == '7'\"\n    assert lastDigit(12345678) == '8', \"Error: lastDigit(12345678) == '8'\"\n    assert lastDigit(123456789) == '9', \"Error: lastDigit(123456789) == '9'\"\n    assert lastDigit(1234567890) == '0', \"Error: lastDigit(1234567890) == '0'\"\n    assert lastDigit(12345678901) == '1', \"Error: lastDigit(12345678901) == '1'\"\n    assert lastDigit(123456789012) == '2', \"Error: lastDigit(123456789012) == '2'\"\n    assert lastDigit(1234567890123) == '3', \"Error: lastDigit(1234567890123) == '3'\"\n    assert lastDigit(12345678901234) == '4', \"Error: lastDigit(12345678901234) == '4'\"\n    assert lastDigit(123456789012345) == '5', \"Error: lastDigit(123456789012345) == '5'\"\n    assert lastDig",
      -0.461669921875
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    Find the last digit of a given number.\n\n    Example\n    Input:\n    2\n    Output:\n    2\n    \"\"\"\n    return int(number) % 10\n\n\nif __name__ == \"__main__\":\n    print(last_digit(2))\n    print(last_digit(10))\n    print(last_digit(100))\n    print(last_digit(1000))\n    print(last_digit(100000000))\n    print(last_digit(100000000000))\n    print(last_digit(1000000000000))\n    print(last_digit(10000000000000))\n    print(last_digit(100000000000000))\n    print(last_digit(1000000000000000))",
      -0.485595703125
    ],
    [
      "def lastDigit(number):\n    \"\"\"\n    >>> lastDigit(1234)\n    3\n    >>> lastDigit(12345)\n    5\n    >>> lastDigit(123)\n    0\n    >>> lastDigit(0)\n    0\n    >>> lastDigit(-123)\n    0\n    >>> lastDigit(123456789)\n    1\n    \"\"\"\n    return int(str(number)[-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.76953125
    ],
    [
      "def lastDigit(number):\n    return int(str(number)[-1])\n\nprint lastDigit(12)",
      -0.85595703125
    ],
    [
      "def last_digit(num):\n    \"\"\"\n    Find the last digit of num.\n\n    :param num: The number.\n    :return: The last digit of num.\n    \"\"\"\n    return str(num)[-1]\n\n\nif __name__ == '__main__':\n    num = 12345\n    print(last_digit(num))",
      -0.85595703125
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return str(n)[-1]\n\nif __name__ == '__main__':\n    n = 100\n    print last_digit(n)",
      -0.85595703125
    ],
    [
      "def last_digit(num):\n    return num % 10\n\n\nprint last_digit(1000000000)",
      -0.85693359375
    ],
    [
      "def last_digit(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return num % 10\n\n\n# Your last_digit solution here.\n\nif __name__ == '__main__':\n    print(last_digit(5))\n    print(last_digit(534))",
      -0.85693359375
    ],
    [
      "import math\n\ndef last_digit(number):\n    return int(math.floor(number % 10))\n\nprint(last_digit(12345))\nprint(last_digit(123))\nprint(last_digit(1234567890))",
      -0.85693359375
    ],
    [
      "def last_digit(num):\n    return num % 10\n\nprint last_digit(123)",
      -0.85693359375
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    Write a function to calculate the last digit of a given number.\n    \"\"\"\n    return n % 10",
      -0.85693359375
    ],
    [
      "def last_digit(n):\n    '''\n    n: a given number\n    return: the last digit of n\n    '''\n    return n % 10\n\n\n\nif __name__ == '__main__':\n    print last_digit(123)\n    print last_digit(321)\n    print last_digit(9)\n    print last_digit(3)\n    print last_digit(0)\n    print last_digit(-1)",
      -0.85693359375
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    Returns the last digit of a given number.\n    \"\"\"\n    return n % 10\n\ndef main():\n    \"\"\"\n    main function.\n    \"\"\"\n    print(last_digit(5))\n    print(last_digit(23))\n    print(last_digit(7))\n    print(last_digit(99))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def last_digit(n):\n    return int(n) % 10\n\n\ndef main():\n    \"\"\"\n    Write a function to find the last digit of a given number.\n    \"\"\"\n    num = input('Enter a number: ')\n    print(last_digit(num))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n!= 0:\n        r = n % 10\n        n = n / 10\n        if r == 0:\n            break\n        else:\n            n = r\n    return n\n\n\nif __name__ == \"__main__\":\n    print(last_digit(10))\n    print(last_digit(123))\n    print(last_digit(123456789))",
      -0.85693359375
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    >>> last_digit(983)\n    3\n    >>> last_digit(123)\n    3\n    >>> last_digit(12345)\n    5\n    >>> last_digit(123)\n    5\n    >>> last_digit(0)\n    0\n    >>> last_digit(-1)\n    -1\n    \"\"\"\n    if number < 0:\n        return last_digit(-number)\n    return int(str(number)[-1])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def last_digit(number):\n    return (number % 10)\n\nprint last_digit(123456789)",
      -0.85693359375
    ],
    [
      "def last_digit(n):\n    return n % 10\n\nprint(last_digit(20))",
      -0.85693359375
    ],
    [
      "def last_digit(number):\n    return number % 10\n\nprint(last_digit(123))",
      -0.85791015625
    ],
    [
      "def last_digit(number):\n    return str(number)[-1]\n\nprint(last_digit(123))\nprint(last_digit(10000000000000000000000000000))\nprint(last_digit(123456789123456789))",
      -0.85791015625
    ],
    [
      "def last_digit(number):\n    if number < 10:\n        return number\n    else:\n        return last_digit(number / 10) + number % 10\n\nprint last_digit(5)\nprint last_digit(5)",
      -0.85791015625
    ],
    [
      "import math\n\ndef last_digit(num):\n    return int(math.floor(num % 10))\n\nprint last_digit(12345)",
      -0.85791015625
    ],
    [
      "def last_digit(n):\n    return n % 10\n\n# Write your code below!\n\nprint(last_digit(100))\nprint(last_digit(4))\nprint(last_digit(0))\nprint(last_digit(-2))\nprint(last_digit(-1))",
      -0.85791015625
    ],
    [
      "def last_digit(number):\n    return int(number) % 10\n\nprint(last_digit(10))\n#>>> 5",
      -0.85791015625
    ],
    [
      "def last_digit(number):\n    return (number % 10)\n\nprint(last_digit(12345))\nprint(last_digit(123))\nprint(last_digit(123456789))\nprint(last_digit(1234567891))\nprint(last_digit(12345678912))\nprint(last_digit(123456789123))\nprint(last_digit(12345678912345))\nprint(last_digit(123456789123456))\nprint(last_digit(1234567891234567))",
      -0.85791015625
    ],
    [
      "def last_digit(n):\n    return n % 10\n\nif __name__ == '__main__':\n    for i in range(10, 100):\n        print(last_digit(i))",
      -0.85791015625
    ],
    [
      "def last_digit(number):\n    return int(number % 10)\n\n# Your last_digit function should return a string.\nprint last_digit(15)",
      -0.85791015625
    ],
    [
      "def last_digit(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    return int(num) % 10",
      -0.85791015625
    ],
    [
      "def last_digit(num):\n    # your code goes here\n    return num % 10\n\n\nprint(last_digit(1234))",
      -0.85791015625
    ],
    [
      "def last_digit(num):\n    return num % 10\n\nprint(last_digit(123))",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\ndef last_digit(n):\n    \"\"\"\n    Find the last digit of a number n.\n    \"\"\"\n    return n % 10\n\nprint last_digit(23)\nprint last_digit(1234)\nprint last_digit(99)\nprint last_digit(0)\nprint last_digit(0)",
      -0.85791015625
    ],
    [
      "def last_digit(number):\n    return int(str(number)[-1])\n\n\"\"\"\nTest Cases:\n1\n5\n\"\"\"\n\n# Test Case 1\nprint last_digit(1)\n# Output: 1\n\n# Test Case 2\nprint last_digit(5)\n# Output: 5\n\n# Test Case 3\nprint last_digit(10)\n# Output: 0\n\n# Test Case 4\nprint last_digit(100)\n# Output: 0\n\n# Test Case 5\nprint last_digit(1000)\n# Output: 1",
      -0.8583984375
    ],
    [
      "def last_digit(num):\n    return num % 10\n\nprint last_digit(123)\n#>>> 3",
      -0.8583984375
    ],
    [
      "def last_digit(n):\n    return n % 10\n\n# Test Cases\n\nassert last_digit(1234) == 4\nassert last_digit(1234) == 4\nassert last_digit(12345) == 5\nassert last_digit(12345) == 5\nassert last_digit(123456) == 6\nassert last_digit(123456) == 6\nassert last_digit(1234567) == 7\nassert last_digit(1234567) == 7\nassert last_digit(12345678) == 8\nassert last_digit(12345678) == 8\nassert last_digit(123456789) == 9\nassert last_digit(123456789) == 9\nassert last_digit(1234567890) == 0\nassert last_digit(1234567890) == 0",
      -0.8583984375
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    >>> last_digit(123)\n    3\n    >>> last_digit(10)\n    1\n    >>> last_digit(123456789)\n    9\n    \"\"\"\n    return int(str(n)[-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def last_digit(number):\n    return number % 10\n\nprint(last_digit(123))",
      -0.8583984375
    ],
    [
      "def last_digit(n):\n    return n % 10\n\n\ndef last_digit_2(n):\n    return n % 100\n\n\ndef last_digit_3(n):\n    return n % 1000\n\nprint last_digit(15)\nprint last_digit(100)\nprint last_digit(1000)\nprint last_digit(10000)\nprint last_digit(1000000)",
      -0.8583984375
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    Args:\n        number (int): The number whose last digit we want to find.\n\n    Returns:\n        int: The last digit of the given number.\n\n    Examples:\n        >>> last_digit(123)\n        3\n        >>> last_digit(12345)\n        5\n    \"\"\"\n\n    return int(str(number)[-1])\n\nif __name__ == '__main__':\n    assert last_digit(123) == 3\n    assert last_digit(12345) == 5",
      -0.8583984375
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    Function to calculate the last digit of a given number.\n\n    Args:\n        number: A given number.\n\n    Returns:\n        The last digit of the number.\n\n    Examples:\n        >>> last_digit(1337)\n        3\n        >>> last_digit(12345)\n        4\n        >>> last_digit(0)\n        0\n        >>> last_digit(-1337)\n        -3\n    \"\"\"\n    if number == 0:\n        return 0\n    return str(number)[-1]\n\nif __name__ == '__main__':\n    assert last_digit(1337) == 3\n    assert last_digit(12345) == 4\n    assert last_digit(0) == 0\n    assert last_digit(-1337) == -3",
      -0.8583984375
    ],
    [
      "def last_digit(num):\n    return int(num % 10)\n\n\nprint(last_digit(123))\nprint(last_digit(123.45))\nprint(last_digit(12345))\nprint(last_digit(1234567))\nprint(last_digit(123456789))",
      -0.8583984375
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    Write a function last_digit that takes as input an integer n and returns the last\n    digit of n.\n    \"\"\"\n    # Write your code here\n    return n % 10\n\ndef main():\n    \"\"\"\n    Write a test function last_digit_test that takes as input an integer n and\n    returns the last digit of n. Then write a test function last_digit_test that\n    takes as input an integer n and returns the last digit of n.\n    \"\"\"\n    print(last_digit(5))\n    print(last_digit(9))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def last_digit(n):\n    return n % 10\n\nprint last_digit(123)\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\n\ndef last_digit(n):\n    return n % 10\n\nprint last_digit(123)",
      -0.8583984375
    ],
    [
      "import sys\n\ndef last_digit(n):\n    return n % 10\n\ndef main():\n    num = int(sys.stdin.readline())\n    print(last_digit(num))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def last_digit(number):\n    \"\"\"\n    last_digit(number) -> int\n\n    Returns the last digit of a given number.\n    \"\"\"\n    return number % 10\n\nprint(last_digit(123))\nprint(last_digit(12345))\nprint(last_digit(1234))\nprint(last_digit(1234))",
      -0.85888671875
    ],
    [
      "def last_digit(number):\n    return int(str(number)[-1])\n\n# Test cases\nprint(last_digit(4))\nprint(last_digit(10))\nprint(last_digit(100))\nprint(last_digit(1000))\nprint(last_digit(10000))\nprint(last_digit(100000))\nprint(last_digit(1000000))\nprint(last_digit(1000000000))\nprint(last_digit(10000000000))",
      -0.85888671875
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    Find the last digit of a given number n.\n\n    Example:\n    >>> last_digit(12345)\n    5\n    >>> last_digit(123456789)\n    9\n    >>> last_digit(123456789)\n    9\n    \"\"\"\n    return n % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def last_digit(number):\n    return number % 10\n\ndef main():\n    for x in range(10):\n        print(last_digit(x))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    n: The number to find the last digit of\n    return: The last digit of n\n    \"\"\"\n\n    while n > 0:\n        n, rem = divmod(n, 10)\n        return rem\n\nif __name__ == '__main__':\n    for n in range(10, 100):\n        print n, last_digit(n)",
      -0.85888671875
    ],
    [
      "#!/usr/bin/env python\n\ndef last_digit(n):\n    return n % 10\n\n# Your code here!",
      -0.85888671875
    ],
    [
      "import math\n\n\ndef last_digit(number):\n    return math.floor(number % 10)\n\nif __name__ == '__main__':\n    print(last_digit(1))\n    print(last_digit(0))\n    print(last_digit(3))\n    print(last_digit(1234))",
      -0.85888671875
    ],
    [
      "def last_digit(num):\n    if num == 0:\n        return 0\n    return (num % 10) + 1\n\nprint last_digit(1234)",
      -0.85888671875
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    n is a number.\n\n    Returns the last digit of n.\n    \"\"\"\n    return n % 10\n\n\n\ndef test():\n    assert last_digit(123) == 3\n    assert last_digit(12345) == 5\n    assert last_digit(123456789) == 9\n\nif __name__ == '__main__':\n    test()",
      -0.9052734375
    ],
    [
      "# https://www.hackerrank.com/challenges/find-last-digit/problem\n\ndef findLastDigit(number):\n    \"\"\"\n    Returns the last digit of the number.\n    \"\"\"\n    if not number:\n        return 0\n\n    # The last digit of a number is always the last character in the string.\n    last_digit = number[-1]\n\n    # Convert the number to a string.\n    number = str(number)\n\n    # Find the last digit.\n    last_digit_index = len(number) - 1\n    while last_digit_index >= 0:\n        if number[last_digit_index]!= '0':\n            return int(number[last_digit_index])\n\n        last_digit_index -= 1\n\n    return 0\n\n# Test Cases\n# number = 123\n# print findLastDigit(number)\n# number = 987\n# print findLastDigit(number)\n# number = 0\n# print findLastDigit(number)\n# number = -1\n# print findLastDigit(number)",
      -1.4267578125
    ],
    [
      "def lastDigit(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n % 10\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(lastDigit(n))",
      -1.552734375
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        raise ValueError('n must be positive')\n\n    return (n % 10) + 1\n\n# Your last_digit solution here.",
      -1.5556640625
    ],
    [
      "# Note:\n# The input number can be positive or negative.\n\n# Example\n# input:\n#   10\n# output:\n#   0\n# expected:\n#   0\n#\n# Explanation:\n# The last digit of 10 is 0, and the last digit of -10 is 10.\n\n# Example\n# input:\n#   -10\n# output:\n#   0\n# expected:\n#   0\n#\n# Explanation:\n# The last digit of -10 is 0, and the last digit of 10 is 10.\n\n# Example\n# input:\n#   1000000\n# output:\n#   0\n# expected:\n#   0\n#\n# Explanation:\n# The last digit of 1000000 is 0, and the last digit of -1000000 is 1000000.\n\n# Note:\n# The number is a 32-bit signed integer and will not exceed the range of a signed 32-bit integer.\n\n# Runtime:\n#   total = 1\n#   total = total + (1 * 1)\n#   total = total + (2 * 1)\n#   total = total + (3 * 1)\n#   total = total + (4 * 1)\n#   total = total + (5 * 1)\n#   total = total + (6 * 1)\n#   total = total + (7 * 1)\n#   total = total + (8 * 1)\n#   total = total + (9 * 1)\n#   total = total + (10 * 1)\n#   total = total + (11 * 1)\n#   total = total + (12 * 1)\n#   total = total + (13 * 1)\n#   total = total + (14 * 1)\n#   total = total + (15 * 1)\n#   total = total + (16 * 1)\n#   total = total + (17 * 1)\n#   total = total + (18 * 1)\n#   total = total + (19 * 1)\n#   total = total + (20 * 1)\n#   total = total + (21 * 1)\n#   total = total + (22 * 1)\n#   total = total + (23 * 1)\n#   total = total + (24 *",
      -1.6591796875
    ],
    [
      "def last_digit(n):\n    return n % 10\n\n# Test Cases\n\n# Test Case 1:\ntest_cases = [\n    (123, 4),\n    (123, 5),\n    (123, 6),\n    (123, 7),\n    (123, 8),\n    (123, 9)\n]\n\nfor test_case in test_cases:\n    print(last_digit(test_case[0]))",
      -2.197265625
    ],
    [
      "def last_digit(number):\n    if number == 0:\n        return 0\n    else:\n        return int(str(number)[-1])\n\n\"\"\"\nTest cases\n\"\"\"\n\nassert last_digit(1) == 0\nassert last_digit(12) == 1\nassert last_digit(123) == 2\nassert last_digit(12345) == 3\nassert last_digit(1234567) == 4\nassert last_digit(12345678) == 5\nassert last_digit(123456789) == 6\nassert last_digit(1234567890) == 7\nassert last_digit(12345678901) == 8\nassert last_digit(123456789012) == 9\nassert last_digit(1234567890123) == 10\nassert last_digit(12345678901234) == 11\nassert last_digit(123456789012345) == 12\nassert last_digit(1234567890123456) == 13\nassert last_digit(12345678901234567) == 14\nassert last_digit(123456789012345678) == 15\nassert last_digit(1234567890123456789) == 16\nassert last_digit(12345678901234567890) == 17\nassert last_digit(123456789012345678901) == 18\nassert last_digit(1234567890123456789012) == 19\nassert last_digit(12345678901234567890123) == 20\nassert last_digit(123456789012345678901234) == 21\nassert last_digit(1234567890123456789012345) == 22\nassert last_digit(12345678901234567890123456) == 23\nassert last_digit(123456789012345678901234567) == 24\nassert last_digit(1234567890123456789012345678) == 25\nassert last_digit(12345678901234567890123456789) == 26\nassert last_digit(123456789012345678901234567890) == 27\n\n\"\"\"\nRun tests",
      -2.826171875
    ],
    [
      "# I implemented this using a for loop to iterate through the number\n# and return the last digit.\n\ndef last_digit(n):\n    i = len(str(n)) - 1\n    while i >= 0:\n        if n % 10 == 0:\n            return n % 10\n        n /= 10\n        i -= 1\n    return 0\n\n\n# This is the expected output.\nprint(last_digit(123456789))\nprint(last_digit(1234))\nprint(last_digit(123))\nprint(last_digit(12345))\nprint(last_digit(123456))\nprint(last_digit(1234567))",
      -3.130859375
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    :param n: the number to find the last digit from\n    :return: the last digit of n\n    \"\"\"\n    while n >= 10:\n        n = n % 10\n    return n\n\nif __name__ == '__main__':\n    assert last_digit(123) == 3\n    assert last_digit(12) == 0\n    assert last_digit(123456789) == 9\n    assert last_digit(1234567890) == 0\n    assert last_digit(12345678901) == 1\n    assert last_digit(123456789012) == 12\n    assert last_digit(1234567890123) == 23\n    assert last_digit(12345678901234) == 34\n    assert last_digit(123456789012345) == 45\n    assert last_digit(1234567890123456) == 56\n    assert last_digit(12345678901234567) == 67\n    assert last_digit(123456789012345678) == 78\n    assert last_digit(1234567890123456789) == 89\n    assert last_digit(12345678901234567890) == 90\n    assert last_digit(123456789012345678901) == 91\n    assert last_digit(123456789012345678902) == 92\n    assert last_digit(123456789012345678903) == 93\n    assert last_digit(123456789012345678904) == 94\n    assert last_digit(123456789012345678905) == 95\n    assert last_digit(123456789012345678906) == 96\n    assert last_digit(123456789012345678907) == 97\n    assert last_digit(123456789012345678908) == 98\n    assert last_digit(123456789012345678909) == 99\n    assert last_digit(123456789012345678910) == 100\n    assert last_digit(123456789012345678911) == 101\n    assert last",
      -3.541015625
    ],
    [
      "def last_digit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # return int(n % 10)\n    if n < 0:\n        return -1\n    n = abs(n)\n    while n > 0:\n        n, r = divmod(n, 10)\n        if r == 0:\n            return n\n    return 0\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(last_digit(n))",
      -5.30859375
    ],
    [
      "def find_last_digit(number):\n    last_digit = 0\n    for digit in number:\n        last_digit = last_digit * 10 + digit\n    return last_digit % 10\n\nif __name__ == '__main__':\n    print find_last_digit(10)\n    print find_last_digit(100)\n    print find_last_digit(1000)\n    print find_last_digit(10000)",
      -5.3984375
    ],
    [
      "#!/usr/bin/env python\n\n#\n# Copyright 2016, Google Inc. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport argparse\nimport sys\n\nfrom google.cloud.dataflow.examples.cookbook import snippets\n\n\ndef run(argv):\n  parser = argparse.ArgumentParser()\n  parser.add_argument('--input', required=True,\n                      help='Input file to process.')\n  parser.add_argument('--output', required=True,\n                      help='Output file to write to.')\n  known_args, pipeline_args = parser.parse_known_args(argv)\n\n  # Create a pipeline and set the options\n  p = beam.Pipeline(options=pipeline_args)\n\n  # Read the text file and print out the number of words\n  (p\n   | 'ReadLines' >> beam.io.ReadFromText(known_args.input)\n   | 'CountWords' >> beam.FlatMap(lambda x: snippets.extract_words(x))\n   | 'FormatAsTable' >> beam.Map(snippets.format_as_table)\n   | 'Write' >> beam.io.WriteToText(known_args.output))\n\n  p.run()\n\n\nif __name__ == '__main__':\n  run(sys.argv[1:])",
      -7.23828125
    ],
    [
      "# https://leetcode.com/problems/last-digit-of-a-number/discuss/367518/Python-Recursion-Solution\n\nclass Solution(object):\n    def lastDigit(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            return self.lastDigit(num // 10) + num % 10\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.lastDigit(42))\n    print(s.lastDigit(1234))\n    print(s.lastDigit(12345))\n    print(s.lastDigit(123456789))\n    print(s.lastDigit(12345678901))\n    print(s.lastDigit(1234567890123456789))",
      -7.48828125
    ],
    [
      "# import the necessary packages\nfrom __future__ import print_function\nfrom itertools import islice\nfrom functools import reduce\n\ndef last_digit(n):\n    \"\"\"\n    Return the last digit of n.\n    \"\"\"\n\n    # n = 2\n    if n == 2:\n        return '2'\n\n    # n = 3\n    if n == 3:\n        return '3'\n\n    # n = 4\n    if n == 4:\n        return '4'\n\n    # n = 5\n    if n == 5:\n        return '5'\n\n    # n = 6\n    if n == 6:\n        return '6'\n\n    # n = 7\n    if n == 7:\n        return '7'\n\n    # n = 8\n    if n == 8:\n        return '8'\n\n    # n = 9\n    if n == 9:\n        return '9'\n\n    # n = 10\n    if n == 10:\n        return '0'\n\n    # n = 11\n    if n == 11:\n        return '1'\n\n    # n = 12\n    if n == 12:\n        return '2'\n\n    # n = 13\n    if n == 13:\n        return '3'\n\n    # n = 14\n    if n == 14:\n        return '4'\n\n    # n = 15\n    if n == 15:\n        return '5'\n\n    # n = 16\n    if n == 16:\n        return '6'\n\n    # n = 17\n    if n == 17:\n        return '7'\n\n    # n = 18\n    if n == 18:\n        return '8'\n\n    # n = 19\n    if n == 19:\n        return '9'\n\n    # n = 20\n    if n == 20:\n        return '0'\n\n    # n = 21\n    if n == 21:\n        return '1'\n\n    # n = 22\n    if n == 22:\n        return '2'\n\n    # n = 23\n    if n == 23:\n        return '3'\n\n    # n = 24\n    if n == 24:\n        return '4'\n\n    # n = 25\n    if n == 25:\n        return '5'",
      -8.0859375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}