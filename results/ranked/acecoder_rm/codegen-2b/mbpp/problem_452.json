{
  "problem": {
    "task_id": "MBPP/463",
    "prompt": "Write a function to find the maximum product subarray of the given array.",
    "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
    "test_list": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ],
    "challenge_test_list": [],
    "problem_id": 452
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_prod = -float(\"inf\")\n        for i in range(len(nums)):\n            for j in range(i):\n                max_prod = max(max_prod, nums[i] * nums[j])\n        return max_prod\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxProduct([1, 2, 3]) == 6\n\n    assert Solution().maxProduct([-1, -2, -3, -4, -5]) == -5",
      2.478515625
    ],
    [
      "import collections\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        res = collections.defaultdict(int)\n        for i in range(len(nums)):\n            res[i] = max(res[i], nums[i])\n        res[0] = 1\n        for i in range(1, len(nums)):\n            for j in range(i, len(nums)):\n                res[i] = max(res[i], res[j] * nums[i])\n        return max(res.values())\n\nif __name__ == \"__main__\":\n    print Solution().maxProduct([-2, -3, -4])",
      2.228515625
    ],
    [
      "# Definition for a subarray.\nclass Subarray(object):\n    def __init__(self, s, e):\n        \"\"\"\n        :type s: int\n        :type e: int\n        \"\"\"\n        self.s = s\n        self.e = e\n\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_product = nums[0]\n        for i in xrange(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product\n\n    def maxProduct2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = nums[0]\n        for i in xrange(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 1, 2]\n    s = Solution()\n    print s.maxProduct2(nums)",
      1.61328125
    ],
    [
      "def find_max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 1, 2, 3]\n    print(find_max_product(arr))",
      0.9794921875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        if not nums:\n            return 0\n        max_sum = min_sum = nums[0]\n        for i in xrange(1, len(nums)):\n            max_sum = max(max_sum, nums[i] * nums[i])\n            min_sum = min(min_sum, nums[i] * nums[i])\n        return max_sum if max_sum > min_sum else min_sum",
      0.869140625
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        \n        max_product = nums[0]\n        max_product_idx = 0\n        \n        for i in range(1, len(nums)):\n            product = nums[i] * nums[i-1]\n            if product > max_product:\n                max_product = product\n                max_product_idx = i\n        \n        return max_product",
      0.68359375
    ],
    [
      "# https://www.hackerrank.com/challenges/max-product-subarray/problem\n\ndef max_product(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(arr[i] * arr[i-1], max_product)\n    return max_product\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6]\n    print(max_product(arr))",
      0.64501953125
    ],
    [
      "def max_product(arr):\n    \"\"\"\n    For example:\n    Given [2,3,-2,4]\n    return 6\n    \n    Given [2,3,-2,-1]\n    return -2\n    \"\"\"\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    max_product = arr[0]\n    for i in range(1, n):\n        max_product = max(max_product, arr[i] * arr[i-1])\n    return max_product\n\nif __name__ == '__main__':\n    arr = [2, 3, -2, 4]\n    print max_product(arr)\n    \n    arr = [2, 3, -2, -1]\n    print max_product(arr)\n    \n    arr = [-1, -1, -1, -1]\n    print max_product(arr)",
      0.54638671875
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_num = nums[0]\n        max_product = nums[0]\n        for i in xrange(1, len(nums)):\n            max_num = max(max_num, nums[i])\n            max_product = max(max_product, nums[i] * max_num)\n        return max_product",
      0.2432861328125
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        max_product = nums[0]\n        for i in xrange(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maxProduct([1,2,3,4,5])\n    print s.maxProduct([1,2,3,4,5,6])\n    print s.maxProduct([-1,-2,-3,-4,-5,-6])\n    print s.maxProduct([-1,2,3,4,5,6])",
      0.096923828125
    ],
    [
      "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    def maxProduct(self, A: List[Interval]) -> int:\n        if not A:\n            return 0\n        res = 0\n        intervals = []\n        for i in range(len(A)):\n            intervals.append(Interval(A[i].start, A[i].end))\n        intervals.sort()\n        for i in range(len(A)):\n            if i > 0 and A[i].start > A[i - 1].end:\n                continue\n            max_interval = intervals[0]\n            for j in range(1, len(intervals)):\n                if A[i].start >= intervals[j].start:\n                    max_interval = max(max_interval, intervals[j])\n                else:\n                    break\n            res = max(res, max_interval.end * A[i].end)\n        return res",
      0.018310546875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        if not nums:\n            return 0\n        n = len(nums)\n        max_product = nums[0]\n        for i in range(1, n):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product",
      -0.70263671875
    ],
    [
      "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    def maxProduct(self, intervals: List[Interval]) -> int:\n        max_product = -1\n        for i in range(len(intervals)):\n            if intervals[i].start < intervals[i].end:\n                max_product = max(max_product, intervals[i].end - intervals[i].start)\n        return max_product",
      -0.75390625
    ],
    [
      "def max_subarray(arr):\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_so_far = max(max_so_far, arr[i]) * arr[i]\n    return max_so_far\n\n# Test cases\nassert max_subarray([1, 2, 3, 4, 5]) == 15\nassert max_subarray([1, 2, 3, 4, 5, 6]) == 120\nassert max_subarray([1, 2, 3, 4, 5, 6, 7]) == 120\nassert max_subarray([1, 2, 3, 4, 5, 6, 7, 8]) == 720\nassert max_subarray([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 720\n\n# Time Complexity\n# O(n^2)",
      -0.77099609375
    ],
    [
      "import collections\n\n\ndef find_max_subarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n\n    max_product = nums[0]\n    max_product_end = 0\n    max_product_end_idx = 0\n\n    for idx, num in enumerate(nums):\n        if num == 0:\n            continue\n        max_product_end = max(max_product_end, idx)\n        max_product = max(max_product, num)\n        max_product_end_idx = max(max_product_end_idx, idx)\n\n    return max(max_product_end_idx, len(nums) - max_product_end)\n\n\ndef test():\n    assert find_max_subarray([]) == 0\n    assert find_max_subarray([1]) == 1\n    assert find_max_subarray([1, 2, 3, 4, 5]) == 3\n    assert find_max_subarray([1, 2, 3, 4, 5, 6]) == 6\n    assert find_max_subarray([1, 2, 3, 4, 5, 6, 7]) == 7\n    assert find_max_subarray([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n\n\nif __name__ == '__main__':\n    test()",
      -0.81005859375
    ],
    [
      "import math\n\n\ndef find_max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 2:\n        return arr[0]\n    \n    max_product = arr[0]\n    max_index = 0\n    \n    for i in range(1, len(arr)):\n        product = arr[i] * arr[i-1]\n        if product > max_product:\n            max_product = product\n            max_index = i\n    \n    return max_product\n    \n    \n\n# Your code here\n    \n\nif __name__ == '__main__':\n    arr = [2, 3, 6, 7, 8, 5, 9, 4, 3]\n    print(find_max_product(arr))",
      -0.85693359375
    ],
    [
      "def max_product(arr):\n    max_product = 0\n    max_arr = [0]*len(arr)\n    max_arr[0] = arr[0]\n    max_arr[1] = arr[1] * arr[0]\n    for i in range(2, len(arr)):\n        max_arr[i] = max(arr[i-1] * arr[i], arr[i-1] * max_arr[i-1])\n    for i in range(len(max_arr)):\n        max_product = max(max_product, max_arr[i])\n    return max_product\n\nif __name__ == \"__main__\":\n    arr = [2,3,1,4,6,4,9,2,3]\n    print(max_product(arr))",
      -0.85693359375
    ],
    [
      "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 0:\n            return 0\n\n        max_num = max(nums)\n        max_product = max_num * nums[0]\n        for i in range(1, n):\n            max_product = max(max_product, nums[i] * nums[i-1])\n\n        for i in range(1, n):\n            max_product = max(max_product, nums[i] * nums[i-1])\n            max_product = max(max_product, nums[i] * nums[i-2])\n\n        return max_product",
      -0.85693359375
    ],
    [
      "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product",
      -0.85693359375
    ],
    [
      "def maxProduct(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    max_idx = 0\n    \n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i])\n        if max_product * arr[i] > max_product:\n            max_idx = i\n    \n    return max_product * arr[max_idx]\n\nprint maxProduct([1,2,3,4,5])",
      -0.85693359375
    ],
    [
      "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    max_sub_arr = 0\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_product = max(arr[i] * arr[j], max_product)\n    return max_product\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(max_product(arr))",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        if not nums:\n            return 0\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, nums[i] * nums[i-1])\n        return max_product",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0] * nums[1], nums[1] * nums[0])\n        \n        max_product = nums[0] * nums[1]\n        for i in range(2, n):\n            max_product = max(max_product, nums[i] * nums[i-1])\n        return max_product",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_prod = 0\n        max_idx = 0\n        for i in range(len(nums)):\n            prod = nums[i]\n            if prod > max_prod:\n                max_idx = i\n                max_prod = prod\n            else:\n                prod *= nums[i]\n        return max_prod",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        ans = nums[0]\n        for i in range(1, n):\n            ans = max(ans, nums[i] * nums[i - 1])\n        return ans",
      -0.8583984375
    ],
    [
      "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 1:\n            return 0\n        max_prod = nums[0]\n        for i in xrange(1, len(nums)):\n            max_prod = max(max_prod * nums[i], nums[i])\n        return max_prod",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        max_prod = nums[0]\n        for i in range(1, n):\n            max_prod = max(max_prod, nums[i] * nums[i-1])\n        return max_prod",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param A, a list of integers\n    # @return an integer\n    def maxProduct(self, A):\n        max_product = 0\n        max_start = 0\n        for i in range(len(A)):\n            max_product = max(max_product, A[i])\n            max_start = max(max_start, i)\n            while i+1 < len(A) and A[i+1] * A[i] > max_product:\n                max_product = max(max_product, A[i+1] * A[i])\n                i += 1\n        return max_product",
      -0.8583984375
    ],
    [
      "# Definition for a subarray.\nclass Subarray(object):\n    def __init__(self, l, r, s):\n        self.start = l\n        self.end = r\n        self.size = s\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        ans = nums[0]\n        for i in xrange(1, n):\n            ans = max(ans, nums[i] * nums[i - 1])\n        return ans",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_product = nums[0]\n        for num in nums:\n            if num > 0:\n                max_product = max(max_product, num)\n            else:\n                max_product = max(max_product, num * num)\n        return max_product",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        if not nums: return 0\n        max_prod = nums[0]\n        max_prod_ind = 0\n        for i in range(1, len(nums)):\n            max_prod = max(max_prod * nums[i], nums[i])\n            if max_prod > max_prod_ind:\n                max_prod_ind = max_prod\n        return max_prod_ind\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4]\n    s = Solution()\n    print s.maxProduct(nums)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        if not nums or len(nums) == 0:\n            return 0\n        return max(self.maxProductRec(nums, 0, len(nums)-1))\n\n    def maxProductRec(self, nums, start, end):\n        if end - start == 0:\n            return 1\n        if start == end:\n            return nums[start]\n        if start == end-1:\n            return max(nums[start], nums[end])\n        else:\n            return max(self.maxProductRec(nums, start, end-1), self.maxProductRec(nums, start+1, end))",
      -0.8583984375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param nums: A list of integers\n    @return: The maximum product subarray\n    \"\"\"\n    def maxProduct(self, nums):\n        if nums == None or nums == []:\n            return 0\n        \n        m = [0] * len(nums)\n        for i in range(len(nums)):\n            m[i] = max(m[i-1] * nums[i], nums[i])\n        \n        max_product = m[0]\n        for i in range(1, len(m)):\n            max_product = max(max_product * m[i], m[i])\n        \n        return max_product",
      -0.8583984375
    ],
    [
      "def find_max_product(arr):\n    max_product = 0\n    max_index = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i]*arr[j])\n            if max_product > 0:\n                max_index = max(max_index, i+j)\n    return max_index\n\nif __name__ == \"__main__\":\n    arr = [2, 3, -1, 4, -5]\n    print(find_max_product(arr))",
      -0.8583984375
    ],
    [
      "import math\n\ndef max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_product = nums[0]\n    for i in range(1, len(nums)):\n        max_product = max(nums[i], nums[i] * max_product)\n    return max_product\n\n\nif __name__ == '__main__':\n    assert max_product([1,2,3,4,5]) == 120\n    assert max_product([3,2,1]) == 3\n    assert max_product([1,2,3,4,5,6]) == 120\n    assert max_product([-1, -2, -3, -4, -5]) == -120",
      -0.8583984375
    ],
    [
      "class Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        max_product = nums[0]\n        max_index = 0\n        for i in range(1, len(nums)):\n            max_product = max(nums[i] * max_product, nums[i])\n            if max_product > nums[i]:\n                max_product = nums[i]\n                max_index = i\n        return max_product * max_index",
      -0.85888671875
    ],
    [
      "def max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    \n    max_product = nums[0]\n    max_product_i = 0\n    for i in range(1, len(nums)):\n        max_product = max(max_product * nums[i], nums[i])\n        if max_product_i < max_product:\n            max_product_i = max_product\n    return max_product_i",
      -0.85888671875
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        ans = nums[0]\n        for i in range(1, len(nums)):\n            ans = max(ans * nums[i], nums[i])\n        return ans\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test([1, 2, 3], 3)\n\n    def _test(self, nums, expected):\n        actual = Solution().maxProduct(nums)\n        self.assertEqual(expected, actual)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.85888671875
    ],
    [
      "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    # @param nums: A list of integers\n    # @return: A integer\n    def maxProduct(self, nums):\n        if not nums:\n            return 0\n        m = max(nums)\n        max_product = m * nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, nums[i] * m)\n        return max_product\n\nif __name__ == \"__main__\":\n    nums = [3, 1, 2, 2, 3]\n    solution = Solution()\n    print solution.maxProduct(nums)",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 1\n        \n        res = 1\n        for i in range(1, len(nums)):\n            res = max(res, nums[i] * self.maxProduct(nums[:i]))\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.maxProduct([-1,2,-3,4,-1,2,-3,4]))",
      -0.85888671875
    ],
    [
      "# https://oj.leetcode.com/problems/maximum-product-subarray/\n# Definition for an interval.\nclass Interval(object):\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n\n        start = 0\n        end = 1\n        max_product = nums[start]\n        for i in range(1, n):\n            if nums[i] > 0:\n                max_product = max(max_product * nums[i], nums[i])\n            else:\n                max_product = max(max_product, nums[i])\n            if max_product > nums[end]:\n                end = i\n        return max_product",
      -0.85888671875
    ],
    [
      "def max_product(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 0:\n        return 0\n    res = a[0]\n    for i in range(1, len(a)):\n        res = max(a[i], a[i] * a[i - 1])\n    return res",
      -0.86083984375
    ],
    [
      "def maxProduct(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr or len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product*arr[i], arr[i])\n    return max_product",
      -0.86083984375
    ],
    [
      "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_product = float('-inf')\n        for i in range(len(nums)):\n            max_product = max(max_product, nums[i]*self.maxProduct(nums[i+1:], nums[:i]))\n        return max_product\n\ns = Solution()\nprint(s.maxProduct([1,2,3,4,5]))",
      -0.86083984375
    ],
    [
      "def max_subarray(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = max(res*arr[i], arr[i])\n    return res\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(max_subarray(arr))",
      -0.86083984375
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n        return max_product",
      -0.86083984375
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = 0\n        max_index = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] * nums[j] > max_product:\n                    max_product = nums[i] * nums[j]\n                    max_index = i\n        return max_product",
      -0.99462890625
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = 1\n        for i in range(len(nums)):\n            max_product = max(max_product, nums[i] * self.max_product(nums[i + 1:]) + 1)\n        return max_product\n\n    def max_product(self, nums):\n        max_product = 1\n        for i in range(len(nums)):\n            max_product = max(max_product, nums[i] * self.max_product(nums[i + 1:]) + 1)\n        return max_product\n\ns = Solution()\nprint(s.maxProduct([1,2,3]))",
      -1.328125
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        ans = nums[0]\n        for i in range(1, n):\n            ans = max(ans, nums[i] * nums[i - 1])\n        return ans",
      -1.4306640625
    ],
    [
      "import math\n\ndef max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    max_value = arr[0]\n    for i in xrange(1, len(arr)):\n        max_value = max(max_value * arr[i], arr[i])\n    return max_value\n\ndef main():\n    arr = [2,3,1,2,4,3]\n    print max_product(arr)\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print max_product(arr)\n    arr = [1,1,1,1,1,1,1,1,1,1]\n    print max_product(arr)\n\nif __name__ == '__main__':\n    main()",
      -1.57421875
    ],
    [
      "def maxProduct(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, n):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(maxProduct(arr))",
      -1.8935546875
    ],
    [
      "# Definition for an interval.\nclass Interval(object):\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        max_product = nums[0]\n        for i in xrange(1, len(nums)):\n            max_product = max(max_product, nums[i] * max(nums[i-1], nums[i-2]))\n        return max_product",
      -2.0625
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_value = nums[0]\n        max_pos = 0\n        max_start = 0\n        max_end = 0\n        for i in range(1, len(nums)):\n            if nums[i] > max_value:\n                max_value = nums[i]\n                max_pos = i\n            elif nums[i] == max_value:\n                max_end = i\n            else:\n                max_start = i\n        if max_start == max_end:\n            return max_value * max_start\n        else:\n            return max_value * (max_end - max_start)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.maxProduct([1,2,3,4,5,6,7])\n    print sol.maxProduct([1,2,3,4,5,6,7,8])\n    print sol.maxProduct([-1,-2,-3,-4,-5,-6,-7,-8])\n    print sol.maxProduct([-1,1,2,3,4,5,6,7])\n    print sol.maxProduct([1,-1,1,-1,1,-1,1,-1])",
      -2.1796875
    ],
    [
      "# Definition for a subarray\nclass SubArray(object):\n    def __init__(self, s, t):\n        \"\"\"\n        :type s: int\n        :type t: int\n        \"\"\"\n        self.start = s\n        self.end = t\n        self.val = t\n\n    def __str__(self):\n        return \"SubArray({}, {})\".format(self.start, self.end)\n\ndef maxProduct(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 1:\n        return 0\n    max_so_far = arr[0]\n    max_so_far_end = arr[0]\n    max_so_far_start = arr[0]\n    for i in range(1, len(arr)):\n        max_so_far = max(max_so_far * arr[i], arr[i])\n        max_so_far_end = max(max_so_far_end * arr[i], arr[i])\n        max_so_far_start = max(max_so_far_start * arr[i], arr[i])\n    return max(max_so_far, max_so_far_end, max_so_far_start)\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert maxProduct([1]) == 1, \"1\"\n    assert maxProduct([1, 2]) == 2, \"2\"\n    assert maxProduct([1, 2, 3]) == 6, \"3\"\n    assert maxProduct([3, 2, 1]) == 6, \"3\"\n    assert maxProduct([3, 2, 1, 3]) == 12, \"3\"\n    assert maxProduct([3, 2, 1, 3, 4]) == 24, \"3\"\n    assert maxProduct([3, 2, 1, 4, 3]) == 24, \"3\"\n    assert maxProduct([3, 2, 1, 4, 3, 2]) == 24, \"3\"\n    assert maxProduct([3, 2, 1, 4, 3, 2, 1]) == 24, \"3\"",
      -2.232421875
    ],
    [
      "import unittest\nimport itertools\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ans, max_product = nums[0], 1\n        for i in xrange(1, len(nums)):\n            if ans[0] * max_product > ans[i]:\n                ans[i] *= max_product\n            else:\n                ans[i] *= ans[i-1]\n            max_product = max(ans[i], max_product)\n        return max(ans, max_product)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/maximum-product-subarray/solution/\n\n# 3ms 100%\nclass Solution {\n    public int maxProduct(int[] nums) {\n        int[] product = new int[nums.length];\n        product[0] = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            product[i] = Math.max(product[i-1] * nums[i], nums[i]);\n        }\n        return product[product.length-1];\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int maxProduct(int[] nums) {\n        int max = Integer.MIN_VALUE;\n        int[] maxProd = new int[nums.length];\n        int[] minProd = new int[nums.length];\n        maxProd[0] = nums[0];\n        minProd[0] = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            maxProd[i] = Math.max(maxProd[i-1] * nums[i], nums[i]);\n            minProd[i] = Math.min",
      -2.296875
    ],
    [
      "# Definition for a subarray.\nclass Subarray:\n    def __init__(self, s: int, i: int, j: int):\n        self.s = s\n        self.i = i\n        self.j = j\n\n    def __repr__(self):\n        return \"[\" + str(self.s) + \", \" + str(self.i) + \", \" + str(self.j) + \"]\"\n\ndef max_product(arr: [int]) -> int:\n    if len(arr) == 0:\n        return 0\n    ans = arr[0]\n    for i in range(1, len(arr)):\n        ans = max(ans, arr[i] * arr[i - 1])\n    return ans\n\nclass Solution:\n    def maxProduct(self, nums: [int]) -> int:\n        if len(nums) == 0:\n            return 0\n        max_product = nums[0]\n        for i in range(1, len(nums)):\n            max_product = max(max_product, nums[i] * nums[i - 1])\n        return max_product\n\nif __name__ == \"__main__\":\n    assert Solution().maxProduct([1,2,3,4]) == 24\n    assert Solution().maxProduct([1,2,3]) == 3\n    assert Solution().maxProduct([1]) == 1\n    assert Solution().maxProduct([]) == 1",
      -2.36328125
    ],
    [
      "def max_product(arr):\n    \"\"\"\n    For a positive integer array arr,\n    return the maximum product of any subarray of arr.\n    \"\"\"\n    max_product = 0\n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i] * max_product(arr[:i]))\n    return max_product\n\n# Tests\nassert max_product([1,2,3]) == 6\nassert max_product([1,2,3,4]) == 24\nassert max_product([2,3,4,5]) == 120\nassert max_product([1,2,3,4,5]) == 120\nassert max_product([2,3,4,5,6]) == 720",
      -2.533203125
    ],
    [
      "# https://leetcode.com/problems/max-product-subarray/\n\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_num = 1\n        max_prod = 1\n        for num in nums:\n            max_num *= num\n            max_prod = max(max_prod, max_num)\n        return max_prod\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxProduct([1, 2, 3]) == 6\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    assert Solution().maxProduct(nums) == 143",
      -2.587890625
    ],
    [
      "# Definition for a subarray\nclass Subarray:\n    def __init__(self, l, r, value):\n        self.start = l\n        self.end = r\n        self.value = value\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n\n        max_product = nums[0]\n        min_product = nums[0]\n\n        for i in range(1, n):\n            max_product = max(max_product * nums[i], nums[i])\n            min_product = min(min_product * nums[i], nums[i])\n\n        return max_product if max_product > min_product else min_product",
      -2.73046875
    ],
    [
      "import numpy as np\n\ndef max_product(arr):\n    \"\"\"\n    :type arr: list\n    :rtype: int\n    \"\"\"\n    # Initialize max_product to the product of the first element\n    max_product = arr[0]\n    # Iterate over the remaining elements\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], arr[i] * max_product)\n    return max_product\n\n# Test Cases\n\n# Inputs\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]\n# Output\narr = [1, 2, 3, 4, 5]\n# Expected Output\narr = [1, 2, 3, 4, 5]",
      -2.732421875
    ],
    [
      "# https://leetcode.com/problems/maximum-product-subarray/\n\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        max_left = max(nums)\n        max_right = max_left\n        max_product = nums[0]\n        for i in xrange(1, len(nums)):\n            max_product = max(max_product * nums[i], nums[i])\n            max_left = max(max_left * nums[i], nums[i])\n            max_right = max(max_right * nums[i], nums[i])\n        return max(max_left * max_product, max_product * max_right)",
      -2.794921875
    ],
    [
      "# Definition for a subarray.\nclass Subarray:\n    def __init__(self, s, e):\n        self.start = s\n        self.end = e\n        self.max = 0\n\n    def __str__(self):\n        return str(self.start) + \" \" + str(self.end) + \" \" + str(self.max)\n\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Find the max subarray and its product.\n        max_subarr = Subarray(0, 0)\n        max_product = 0\n        for i in range(len(nums)):\n            # Find the max subarray.\n            for j in range(i + 1, len(nums)):\n                # Find the max product between subarrays.\n                max_product = max(max_product, nums[i] * nums[j])\n                if max_subarr.end < j:\n                    max_subarr = Subarray(i, j)\n            # Update the max subarray.\n            max_subarr.max = max(max_subarr.max, max_product)\n        return max_subarr.max",
      -3.34375
    ],
    [
      "def find_max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    for i in range(0, len(nums)):\n        for j in range(i, len(nums)):\n            if i == 0 or j == 0:\n                product = nums[i] * nums[j]\n            else:\n                product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return find_max_product(nums)\n\nif __name__ == \"__main__\":\n    nums = [1, 2]\n    print(Solution().maxProduct(nums))",
      -3.564453125
    ],
    [
      "import collections\n\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        res, max_res = 0, 0\n        for i in range(len(nums)):\n            max_res = max(max_res, nums[i])\n            res = max(res, nums[i] * max_res)\n        return res\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6]\n    print(Solution().maxProduct(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(Solution().maxProduct(nums))",
      -3.568359375
    ],
    [
      "def max_product(arr):\n    max_sum = 0\n    max_sub_sum = 0\n    max_index = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sub_sum = arr[i] * arr[j]\n            if max_sum < sub_sum:\n                max_sum = sub_sum\n                max_sub_sum = max_sum\n                max_index = i\n\n    return max_sub_sum, max_index\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print max_product(arr)",
      -3.84765625
    ],
    [
      "def max_subarray(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_here = arr[0]\n    for i in range(1, len(arr)):\n        max_here = max(arr[i], max_here * arr[i])\n        max_so_far = max(max_so_far, max_here)\n\n    return max_so_far\n\nif __name__ == '__main__':\n    assert max_subarray([1, 2, 3, 4, 5]) == 120\n    assert max_subarray([-1, -2, -3, -4, -5]) == -120\n    assert max_subarray([1, 2, 3, 4, 5, 6]) == 120\n    assert max_subarray([-1, -2, -3, -4, -5, -6]) == -120",
      -3.919921875
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        max_prod = nums[0]\n        for i in range(1, len(nums)):\n            max_prod = max(max_prod * nums[i], nums[i])\n        return max_prod\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxProduct([1,2,3,4,5,6,7,8,9])",
      -3.921875
    ],
    [
      "import sys\nimport time\n\ndef get_max_product(arr):\n    \"\"\"\n    Get the maximum product subarray of the given array.\n\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # store the max product as the first element of the list\n    max_product = arr[0]\n\n    # store the max product as the first element of the list\n    max_product = arr[0]\n\n    # store the max product as the first element of the list\n    for i in range(len(arr)):\n        max_product = max(arr[i], max_product)\n\n    return max_product\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print get_max_product(arr)\n    print time.time() - start_time\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    print get_max_product(arr)\n    print time.time() - start_time\n\n    arr = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    print get_max_product(arr)\n    print time.time() - start_time\n\n    arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
      -4.0859375
    ],
    [
      "from collections import deque\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        n = len(nums)\n        if n == 2:\n            return max(nums[0] * nums[1], nums[1] * nums[0])\n        max_ = nums[0] * nums[0]\n        for i in xrange(1, n):\n            max_ = max(max_, nums[i] * nums[i])\n        return max(max_, nums[n - 1] * nums[n - 1])",
      -4.3359375
    ],
    [
      "# Definition for a subarray.\nclass Subarray:\n    def __init__(self, s, l, r):\n        self.start = s\n        self.end = r\n        self.length = r - l + 1\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        max_product = 0\n        for i in range(len(nums)):\n            max_product = max(max_product, self.max_product(nums, i))\n        return max_product\n\n    def max_product(self, nums, i):\n        max_product = 0\n        if i == len(nums) - 1:\n            return nums[i]\n        for j in range(i, len(nums)):\n            max_product = max(max_product, nums[i] * nums[j])\n        return max_product\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [2, 3, 2, -1]\n    print(s.maxProduct(nums))",
      -4.6953125
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        left, right = 0, len(nums) - 1\n        max_product = nums[left] * nums[right]\n        while left < right:\n            max_product = max(max_product, nums[left] * nums[right])\n            if nums[left] > nums[right]:\n                left += 1\n            else:\n                right -= 1\n\n        return max_product\n\n\nif __name__ == \"__main__\":\n    print Solution().maxProduct([1, 2, 3, 4])\n    print Solution().maxProduct([-1, 0, -2, 1])",
      -4.7578125
    ],
    [
      "from collections import deque\n\n\nclass Solution:\n\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        max_product = nums[0]\n        for i in range(1, n):\n            max_product = max(max_product, nums[i] * nums[:i])\n        return max_product\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxProduct([1, 2, 3, 4, 5, 6, 7]))",
      -5.41015625
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        if not nums:\n            return 0\n        n = len(nums)\n        max_product = nums[0]\n        for i in range(1, n):\n            max_product = max(max_product, nums[i] * nums[i-1])\n        return max_product\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxProduct([1,2,3,4,5])\n    print s.maxProduct([2,3,4,5])\n    print s.maxProduct([2,3,4,5,6])\n    print s.maxProduct([1,2,3,4,5])\n    print s.maxProduct([1,2,3,4,5,6])\n    print s.maxProduct([1,2,3,4,5,6,7])\n    print s.maxProduct([1,2,3,4,5,6,7,8])\n    print s.maxProduct([1,2,3,4,5,6,7,8,9])\n    print s.maxProduct([1,2,3,4,5,6,7,8,9,10])\n    print s.maxProduct([1,2,3,4,5,6,7,8,9,10,11])\n    print s.maxProduct([1,2,3,4,5,6,7,8,9,10,11,12])\n    print s.maxProduct([1,2,3,4,5,6,7,8,9,10,11,12,13])\n    print s.maxProduct([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n    print s.maxProduct([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
      -5.47265625
    ],
    [
      "# https://leetcode.com/problems/maximum-product-subarray/\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        n = len(nums)\n        if n == 0: return 0\n\n        # nums[0] * nums[1] * nums[2] *... * nums[n-1]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-1]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-2]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-3]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-4]\n        #...\n        # nums[0] * nums[1] * nums[2] *... * nums[n-1]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-2]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-3]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-4]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-5]\n        #...\n        # nums[0] * nums[1] * nums[2] *... * nums[n-1]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-2]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-3]\n        # nums[0] * nums[1] * nums[2] *... * nums[n-4]\n        # nums[0] * nums",
      -6.2890625
    ],
    [
      "from collections import Counter\nimport time\n\n\ndef max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    return max_product_sorted(arr)\n\n\ndef max_product_sorted(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    # if len(arr) == 1:\n    #     return arr[0]\n    # arr.sort()\n    # return max(arr) * arr[0]\n    # arr.sort()\n    # return max(arr) * arr[-1]\n    # arr.sort()\n    # return max(arr) * arr[-1]\n    # arr.sort()\n    # return max(arr) * arr[-1]\n    # arr.sort()\n    # return max(arr) * arr[-1]\n    arr.sort()\n    return max(arr) * arr[-1]\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    arr = [1, 2, 3, 4, 5]\n    print(\"Max product for {} is {}\".format(arr, max_product(arr)))\n    print(\"Time elapsed: {}\".format(time.time() - start_time))",
      -6.3984375
    ],
    [
      "import sys\n\n# Function to find the maximum product of the subarray of the given array.\ndef find_max_product(arr):\n    max_product = 0\n    # Iterate through the array and find the maximum product of the subarray.\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n# Test Cases\nprint find_max_product([1, 2, 3, 4, 5])\nprint find_max_product([6, 2, 3, 4, 5])\nprint find_max_product([1, 2, 3, 4, 5, 6])\nprint find_max_product([1, 2, 3, 4, 5, 6, 7])\nprint find_max_product([1, 2, 3, 4, 5, 6, 7, 8])\nprint find_max_product([1, 2, 3, 4, 5, 6, 7, 8, 9])",
      -6.51171875
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        res = 1\n        max_res = 1\n        max_res_pos = 0\n        max_res_neg = 0\n        for i in range(1, len(nums)):\n            max_res_pos = max(max_res_pos, max_res_neg)\n            max_res_neg = max(max_res_pos, max_res_neg)\n            max_res = max(max_res, max_res_pos * nums[i])\n            max_res = max(max_res, max_res_neg * nums[i])\n        return max_res",
      -6.80078125
    ],
    [
      "import sys\n\ndef find_max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    max_end = 0\n    max_start = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            max_product = max(max_product, max_start * max_end)\n            max_start = 0\n            max_end = i + 1\n        else:\n            max_start += 1\n    max_product = max(max_product, max_start * max_end)\n    return max_product\n\nif __name__ == '__main__':\n    arr = [1, 1, 1, 2, 2, 2]\n    print(find_max_product(arr))",
      -7.29296875
    ],
    [
      "# Definition for a subarray.\nclass Subarray:\n    def __init__(self, s, e):\n        self.start = s\n        self.end = e\n        self.sum = 0\n\n    def get_sum(self):\n        return self.sum\n\n    def set_sum(self, sum):\n        self.sum = sum\n\n    def get_start(self):\n        return self.start\n\n    def set_start(self, start):\n        self.start = start\n\n    def get_end(self):\n        return self.end\n\n    def set_end(self, end):\n        self.end = end\n\n    def get_length(self):\n        return self.end - self.start\n\n    def __str__(self):\n        return \"Subarray(start=\" + str(self.start) + \", end=\" + str(self.end) + \", sum=\" + str(self.sum) + \")\"\n\n\nclass Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if nums == []:\n            return 0\n        if nums[0] == 0:\n            return 0\n        max_product = nums[0]\n        start = 0\n        end = 0\n        for i in range(1, len(nums)):\n            max_product = max(max_product, nums[i])\n            end = i\n            while start < end and nums[start] == 0:\n                start += 1\n            max_product = max(max_product, nums[end] * nums[start])\n            start = end\n        return max_product\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 0]\n    print(Solution().maxProduct(nums))\n    nums = [1, 2, 3, 4, 5]\n    print(Solution().maxProduct(nums))",
      -7.91796875
    ],
    [
      "import math\nimport operator\n\n# O(n^2) time and O(n) space\ndef maxProduct(arr):\n    max_product = max(arr)\n    for i in xrange(len(arr)):\n        arr[i] = max(arr[i:], key=operator.mul)\n        max_product = max(max_product, arr[i] * arr[i+1:])\n    return max_product\n\n# O(n) time and O(1) space\ndef maxProduct2(arr):\n    max_product = arr[0]\n    for i in xrange(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n\nif __name__ == '__main__':\n    arr = [3, 2, 4, 6, 7, 9]\n    print maxProduct(arr)\n    print maxProduct2(arr)",
      -7.9921875
    ],
    [
      "# Definition for an interval.\nclass Interval(object):\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def __str__(self):\n        return \"[{}:{}]\".format(self.start, self.end)\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = 0\n        for i in xrange(len(nums)):\n            max_product = max(max_product, self.max_product_helper(nums, i))\n        return max_product\n\n    def max_product_helper(self, nums, i):\n        max_product = 0\n        start = 0\n        end = i\n        while start < end:\n            interval = Interval(nums[start], nums[end])\n            max_product = max(max_product, nums[start] * nums[end])\n            if start < end and nums[start] > nums[end]:\n                start += 1\n            else:\n                end -= 1\n        return max_product\n\nif __name__ == \"__main__\":\n    nums = [2, 3, -1, -2]\n    Solution().maxProduct(nums)",
      -8.1796875
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxProduct(self, nums):\n        if not nums:\n            return 0\n        max_product = 0\n        max_end = 0\n        max_start = 0\n        for i in range(len(nums)):\n            if i!= 0:\n                max_product = max(max_product, nums[i - 1] * nums[max_end])\n            max_end = max(max_end, i)\n            max_product = max(max_product, nums[i] * nums[max_start])\n            max_start = max(max_start, i)\n        return max_product\n\nif __name__ == \"__main__\":\n    print Solution().maxProduct([1, 2, 3, 4])",
      -8.2734375
    ],
    [
      "from __future__ import print_function\n\ndef findMaxProduct(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: int\n    \"\"\"\n    if not array:\n        return 0\n    max_length = 0\n    max_product = 0\n    for i in xrange(1, len(array)):\n        current_max_length = max_length\n        current_max_product = max_product\n        for j in xrange(i, len(array)):\n            current_product = array[i] * array[j]\n            if current_product > current_max_product:\n                current_max_product = current_product\n                current_max_length = j - i + 1\n        max_length = max(max_length, current_max_length)\n        max_product = max(max_product, current_max_product)\n    return max(max_length, max_product)\n\n\nif __name__ == \"__main__\":\n    array = [2, 3, 1, 2, 4]\n    print(findMaxProduct(array))",
      -8.3984375
    ],
    [
      "import numpy as np\n\n\ndef max_product(arr):\n    \"\"\"\n    :param arr: A list of integers.\n    :return: The maximum product subarray.\n    \"\"\"\n    # write your code here\n    max_val = arr[0]\n    max_start = 0\n    max_end = 0\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_start = i\n        else:\n            max_val = max(max_val, arr[i])\n        max_product = max(max_product, max_val * arr[max_start:max_end + 1])\n        max_end = i\n    return max_product\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6]\n    print max_product(arr)",
      -8.40625
    ],
    [
      "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        max_product = 0\n        max_start = 0\n        for i in range(len(nums)):\n            max_product = max(max_product, nums[i])\n            if max_product >= nums[i]:\n                max_product = nums[i]\n                max_start = i\n            else:\n                max_product = nums[i]\n                max_start = i + 1\n\n        max_product = 0\n        for i in range(max_start, len(nums)):\n            max_product = max(max_product, nums[i] * nums[i - 1])\n\n        return max_product",
      -8.40625
    ],
    [
      "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 2:\n        return 1\n    \n    max_val = arr[0]\n    max_pos = 0\n    for i in range(1, len(arr)):\n        max_val = max(arr[max_pos], arr[i]) * max_val\n        max_pos = max(max_pos, i)\n    return max_val\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8]\n    print max_product(arr)",
      -8.4453125
    ],
    [
      "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    max_sub_array = 0\n    max_sub_array_pos = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_sub_array = max(max_sub_array, arr[i] * arr[j])\n            if max_sub_array > max_sub_array_pos:\n                max_sub_array_pos = max_sub_array\n    return max_sub_array_pos\n\n\narr = [2, 3, 2, 3, 1]\nprint max_product(arr)",
      -8.5
    ],
    [
      "import numpy as np\n\n\ndef find_max_subarray(array):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    :param array: An integer array.\n    :return: The maximum product subarray of the given array.\n    \"\"\"\n    n = len(array)\n    if n == 0:\n        return 0\n    if n == 1:\n        return array[0]\n    if n == 2:\n        return array[0] * array[1]\n    max_product = array[0] * array[1]\n    max_start = 0\n    max_end = 1\n    for i in range(2, n):\n        max_product = max(max_product, array[i] * array[i - 1])\n        max_end = max(max_end, i + 1)\n    return max_product\n\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4]\n    print(find_max_subarray(array))",
      -8.6953125
    ],
    [
      "# Definition for a subarray.\n# class SubArray(object):\n#     def __init__(self, s, e):\n#         self.start = s\n#         self.end = e\n#         self.max = s\n#         self.length = 0\n#\n#\n# def maxProduct(self, arr):\n#     \"\"\"\n#     :type arr: List[int]\n#     :rtype: int\n#     \"\"\"\n#     if len(arr) == 0:\n#         return 0\n#     s = 0\n#     e = len(arr) - 1\n#     max_so_far = arr[s] * arr[e]\n#     # while s < e:\n#     while s < e:\n#         if arr[s] * arr[e] < max_so_far:\n#             max_so_far = arr[s] * arr[e]\n#         s += 1\n#         e -= 1\n#     return max_so_far\n\nclass Solution(object):\n    def maxProduct(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        # if len(arr) == 0:\n        #     return 0\n        # s = 0\n        # e = len(arr) - 1\n        # max_so_far = arr[s] * arr[e]\n        # while s < e:\n        #     if arr[s] * arr[e] < max_so_far:\n        #         max_so_far = arr[s] * arr[e]\n        #     s += 1\n        #     e -= 1\n        # return max_so_far\n        # max_so_far = arr[0] * arr[len(arr) - 1]\n        # for i in range(1, len(arr)):\n        #     max_so_far = max(max_so_far, arr[i] * arr[len(arr) - 1 - i])\n        # return max_so_far\n        # max_so_far = arr[0] * arr[len(arr) - 1]\n        # for i in range(1, len(arr)):",
      -9.3203125
    ],
    [
      "from collections import namedtuple\n\n# Definition for a subarray\nSubArray = namedtuple(\"SubArray\", \"start end\")\n\nclass Solution(object):\n    def maxProduct(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        max_product = 0\n        i = 0\n        while i < len(A):\n            j = i\n            max_product = max(max_product, 1)\n            while j < len(A) and A[j] <= A[i]:\n                max_product = max(max_product, A[j] * A[i])\n                j += 1\n            i += 1\n        return max_product\n\nif __name__ == \"__main__\":\n    A = [3, 2, 1, 3, 1]\n    print Solution().maxProduct(A)\n    A = [1, 2, 3]\n    print Solution().maxProduct(A)",
      -9.5
    ],
    [
      "# https://leetcode.com/problems/maximum-product-subarray/\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        max_sub_array = max_sub_array_recursive(nums)\n        return max_sub_array[0] * max_sub_array[1]\n\n    def maxProduct_iterative(self, nums):\n        max_sub_array = [0] * (len(nums) + 1)\n        max_sub_array[0] = max_sub_array[1] = 0\n        for i in range(1, len(nums) + 1):\n            max_sub_array[i] = max(max_sub_array[i - 1], nums[i - 1] * max_sub_array[i - 2])\n        return max_sub_array[-1]\n\n    def maxProduct_recursive(self, nums):\n        max_sub_array = [0] * (len(nums) + 1)\n        max_sub_array[0] = max_sub_array[1] = 0\n        for i in range(1, len(nums) + 1):\n            max_sub_array[i] = max(max_sub_array[i - 1], nums[i - 1] * max_sub_array[i - 2])\n        return max_sub_array[-1]\n\n\ndef max_sub_array_recursive(nums):\n    if not nums:\n        return [0] * (len(nums) + 1)\n    max_sub_array = [0] * (len(nums) + 1)\n    max_sub_array[0] = max_sub_array[1] = nums[0]\n    for i in range(2, len(nums) + 1):\n        max_sub_array[i] = max(max_sub_array[i - 1], nums[i - 1] * max_sub_array[i - 2])\n    return max_sub",
      -9.6015625
    ],
    [
      "class Solution:\n    # @param nums: a list of integers\n    # @return: an integer\n    def maxProduct(self, nums):\n        if not nums:\n            return 0\n        m = [0 for _ in range(len(nums))]\n        for i in range(len(nums)):\n            m[i] = max(m[i], nums[i])\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                m[i] = max(m[i], m[j] * nums[j])\n        return m[0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxProduct([1,2,3,4,5,6,7,8,9])\n    print s.maxProduct([1])\n    print s.maxProduct([1,2,3,4,5,6,7,8,9,10])\n    print s.maxProduct([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
      -9.8515625
    ],
    [
      "# Definition for a subarray.\nclass SubArray:\n    def __init__(self, nums):\n        self.nums = nums\n        self.start = 0\n        self.end = 0\n        self.max = 0\n\n    def update(self, num):\n        if self.end == len(self.nums):\n            self.max = max(self.max, self.end * num)\n        else:\n            if num > self.nums[self.end]:\n                self.end += 1\n                self.max = max(self.max, num * self.end)\n\n    def getMax(self):\n        return self.max\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_subarray = SubArray(nums)\n        for i in xrange(len(nums)):\n            max_subarray.update(nums[i])\n\n        return max_subarray.getMax()\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxProduct([1, 2, 3, 4, 5])",
      -10.046875
    ],
    [
      "# The solution I have been working on is the following:\n# 1. Find the maximum of the subarray.\n# 2. Find the maximum of the subarray with the current maximum.\n# 3. If the maximum of the subarray is greater than the maximum of the subarray\n#    with the current maximum, replace the maximum of the subarray with the\n#    current maximum.\n# 4. Repeat from step 3 until the maximum of the subarray is equal to the\n#    maximum of the subarray with the current maximum.\n#\n# The steps are the following:\n# 1. Find the maximum of the subarray.\n# 2. Find the maximum of the subarray with the current maximum.\n# 3. If the maximum of the subarray is greater than the maximum of the\n#    subarray with the current maximum, replace the maximum of the subarray\n#    with the current maximum.\n# 4. Repeat from step 3 until the maximum of the subarray is equal to the\n#    maximum of the subarray with the current maximum.\n#\n#\n#\n# Example:\n# Input: [1,2,3,4,5,6,7]\n# Output: [1,2,3,4,5,7]\n#\n#\n#\n#\n\ndef max_product(arr):\n    max_product = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i] * arr[max_index])\n        if max_product > arr[i]:\n            max_product = arr[i]\n            max_index = i\n    return max_product\n\nif __name__ == '__main__':\n    assert max_product([1, 2, 3, 4, 5, 6, 7]) == 7",
      -10.34375
    ],
    [
      "import sys\nsys.setrecursionlimit(100000)\n\ndef max_product(arr):\n    if len(arr) == 0:\n        return 1\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0] * arr[1], arr[0] * arr[1])\n    max_product_list = [1]\n    max_product_list.append(arr[0] * arr[1])\n    max_product_list.append(arr[0] * arr[0])\n    max_product_list.append(arr[1] * arr[1])\n    max_product_list.append(arr[0] * arr[1])\n    max_product_list.append(arr[0] * arr[0])\n    max_product_list.append(arr[1] * arr[1])\n    max_product_list.append(arr[1] * arr[0])\n    max_product_list.append(arr[0] * arr[1])\n    max_product_list.append(arr[0] * arr[0])\n    max_product_list.append(arr[1] * arr[1])\n    max_product_list.append(arr[0] * arr[0])\n    max_product_list.append(arr[1] * arr[0])\n    max_product_list.append(arr[1] * arr[1])\n    max_product_list.append(arr[0] * arr[0])\n    max_product_list.append(arr[0] * arr[0])\n    max_product_list.append(arr[0] * arr[0])\n    max_product_list.append(arr[1] * arr[1])\n    max_product_list.append(arr[1] * arr[1])\n    max_product_list.append(arr[1] * arr[0])\n    max_product_list.append(arr[0] * arr[1])\n    max_product_list.append(arr[0] * arr[0])\n    max_product_list.append(arr[1] *",
      -10.6015625
    ],
    [
      "# Definition for a subarray\nclass Subarray(object):\n    def __init__(self, s, e):\n        self.start = s\n        self.end = e\n        self.sum = 0\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return max(nums)\n\n        max_val = max(nums)\n        max_sub = [Subarray(0, len(nums) - 1)]\n        for i in xrange(len(nums)):\n            for j in xrange(i + 1, len(nums)):\n                if nums[i] * nums[j] > max_val:\n                    max_val = nums[i] * nums[j]\n                    max_sub = [Subarray(i, j)]\n                elif nums[i] * nums[j] == max_val:\n                    max_sub.append(Subarray(i, j))\n        return max_val * max_sub[0].sum\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1,2,3,1,2,3,4]\n    print s.maxProduct(nums)\n    nums = [1]\n    print s.maxProduct(nums)",
      -13.6484375
    ],
    [
      "# https://oj.leetcode.com/problems/maximum-product-subarray/\n# Given an integer array nums, find the contiguous subarray within\n# the array that has the largest product (also known as the contiguous\n# subarray with maximum product).\n#\n# For example, given the array [2, 3, 2, 4, 1],\n# the contiguous subarray [2, 3, 4] has a product of 24.\n#\n# More formally, for a non-empty array nums, the contiguous subarray\n# (subarray) in the array that has the largest product is defined as:\n#\n# The contiguous subarray is [a[0], a[1],..., a[i-1]],\n# where i is the smallest integer such that a[i] < a[i+1]\n# and at least one of the following is true:\n#\n# a[i] > 0 and a[i] <= nums[i]\n# a[i] > 0 and nums[i] < 0\n# a[i] < 0 and nums[i] > 0\n#\n# Note:\n#\n# 1. The length of nums is at most 1000.\n# 2. The value in nums is in the range [-1000, 1000].\n# 3. The answer is guaranteed to fit in a 32-bit integer.\n\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = 0\n        start = 0\n        end = 0\n        for i in range(len(nums)):\n            if i > start and nums[i] > 0:\n                end = i\n                max_product = max(max_product, nums[start:end] * nums[end])\n                start = end + 1\n            elif i < end and nums[i] < 0:\n                end = i\n                max_product = max(max_product, nums[start:end] * nums[end])\n                start = end + 1\n            elif i == end:\n                end += 1\n        return max_product",
      -13.9375
    ],
    [
      "# https://leetcode.com/problems/maximum-product-subarray/description/\n# https://leetcode.com/problems/maximum-product-subarray/discuss/7956/Python-and-C-Implementation-1-solution-with-explanation\n# https://leetcode.com/problems/maximum-product-subarray/discuss/9082/C-Implementation-with-explained-explanation\n# https://leetcode.com/problems/maximum-product-subarray/discuss/9081/C-Implementation-with-explained-explanation\n\n\ndef maxProduct(self, nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    max_product = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n                max_length = 1\n            elif product > max_product:\n                max_length += 1\n    return max_length\n\n\nif __name__ == '__main__':\n    assert maxProduct([1, 2, 3]) == 3\n    assert maxProduct([-2, -1, 1]) == 1\n    assert maxProduct([-2, -1, -1]) == -1\n    assert maxProduct([-2, -1, -2, -1]) == -2",
      -14.2578125
    ],
    [
      "# Definition for a subarray.\nclass Subarray(object):\n    def __init__(self, s, m):\n        \"\"\"\n        :type s: list[int]\n        :type m: int\n        \"\"\"\n        self.s = s\n        self.m = m\n        self.max_product = 1\n        self.product = 1\n\n    def update_max_product(self, value):\n        \"\"\"\n        :type value: int\n        \"\"\"\n        self.max_product = max(self.max_product, value)\n        self.product *= value\n\n    def update_product(self, value):\n        \"\"\"\n        :type value: int\n        \"\"\"\n        self.product *= value\n\nclass Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = 0\n        sub_arrays = []\n        for s in nums:\n            max_sub_arrays = []\n            for sub_arr in sub_arrays:\n                curr_max_product = 0\n                for i in range(sub_arr[0], sub_arr[1]):\n                    curr_max_product = max(curr_max_product, s * sub_arr[2][i])\n                max_sub_arrays.append((curr_max_product, sub_arr[0], sub_arr[1]))\n            sub_arrays = max_sub_arrays\n            max_product = max(max_product, s * max_sub_arrays[0][0])\n\n        return max_product",
      -15.3046875
    ],
    [
      "from collections import deque\nimport math\n\nclass Solution(object):\n    \"\"\"\n    @param nums: The integer array\n    @return: The maximum product subarray\n    \"\"\"\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_product = nums[0]\n        max_product_idx = 0\n        max_product_idx_end = 0\n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                max_product = max(0, max_product)\n            else:\n                max_product = max(max_product, nums[i])\n            if max_product > nums[i]:\n                max_product = max_product\n                max_product_idx = i\n                max_product_idx_end = i\n        return max_product * max_product_idx_end\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxProduct([1,2,3])\n    print s.maxProduct([-2, -3, -4])\n    print s.maxProduct([0, 1, 2, 3, 4, 5, 6, 7])\n    print s.maxProduct([0, 1, 2, 3, 4, 5, 6, 7, 8])",
      -17.0
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}