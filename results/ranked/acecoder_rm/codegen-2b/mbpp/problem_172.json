{
  "problem": {
    "task_id": "MBPP/183",
    "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
    "test_list": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ],
    "challenge_test_list": [],
    "problem_id": 172
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def count_pairs_diff(arr, k):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    arr = [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5]\n    k = 2\n    print(count_pairs_diff(arr, k))",
      1.0654296875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def getDistinct(self, nums, k):\n        # write your code here\n        n = len(nums)\n        if n == 0:\n            return 0\n        if k == 0:\n            return 1\n        if k == 1:\n            return 2\n        if k == 2:\n            return n * (n - 1) // 2\n        dp = [[0] * (k + 1) for i in range(n)]\n        for i in range(n):\n            dp[i][0] = 1\n        for i in range(1, k + 1):\n            for j in range(n):\n                dp[j][i] = dp[j][i - 1] + dp[j - 1][i]\n        return dp[n - 1][k]",
      0.9541015625
    ],
    [
      "from collections import Counter\n\ndef pairs_with_difference(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    counter = Counter(arr)\n    diff = list(set(arr) - set(counter.keys()))\n    return len(diff)\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 3, 4]\n    k = 2\n    print(pairs_with_difference(arr, k))",
      -0.041046142578125
    ],
    [
      "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    # @param intervals, a list of Interval\n    # @param k, an integer\n    # @return an integer\n    def numDistinct(self, intervals, k):\n        if not intervals:\n            return 0\n        if k == 0:\n            return 1\n        if k > len(intervals):\n            return 0\n\n        ans = 0\n        for i in xrange(len(intervals)):\n            ans += self.numDistinct(intervals[i+1:], k-1)\n        return ans\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.numDistinct([], 0)\n    print s.numDistinct([], 1)\n    print s.numDistinct([Interval(0, 1)], 0)\n    print s.numDistinct([Interval(0, 1), Interval(2, 3)], 2)",
      -0.287841796875
    ],
    [
      "def distinct_pairs(arr, k):\n    # write your code here\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i]!= arr[j] and abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count",
      -0.5009765625
    ],
    [
      "from itertools import combinations\n\ndef count_pairs(arr, k):\n    \"\"\"\n    Input: arr: an array of integers, k: an integer\n    Output: a list of lists containing distinct pairs.\n    \"\"\"\n    return [comb for comb in combinations(arr, 2) if comb[0]!= comb[1] + k]\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    k = 2\n    print(count_pairs(arr, k))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def diffPairs(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(arr)\n        if k > n or n % 2 == 0:\n            return 0\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                ans += 1 if arr[i] - arr[j] == k else 0\n        return ans",
      -0.85693359375
    ],
    [
      "def count_distinct_pairs_with_diff(arr, k):\n    if len(arr) <= 1:\n        return 0\n    return count_distinct_pairs_with_diff(arr[1:], k - 1) + count_distinct_pairs_with_diff(arr[:-1], k - 1)\n\nprint(count_distinct_pairs_with_diff([1, 2, 3], 2))",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def numDistinctPairs(self, nums, k):\n        res = 0\n        n = len(nums)\n        if k > n:\n            return 0\n        for i in xrange(n):\n            for j in xrange(i + 1, n):\n                if nums[i] - nums[j] == k:\n                    res += 1\n        return res\n\nif __name__ == \"__main__\":\n    print Solution().numDistinctPairs([1,2,3], 2)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def numDistinctPairs(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        ans = 0\n        for i in range(len(A) - 1):\n            for j in range(i + 1, len(A)):\n                if abs(A[i] - A[j]) == k:\n                    ans += 1\n        return ans",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def numDistinct(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        ans = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if j-i >= k:\n                    break\n                ans += 1\n        return ans",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def diffPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        d = collections.defaultdict(int)\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i]-nums[j] == k:\n                    d[nums[i]-nums[j]] += 1\n        return d.items()\n\nif __name__ == \"__main__\":\n    print Solution().diffPairs([1, 2, 3], 1)",
      -0.85693359375
    ],
    [
      "def find_pairs(a, k):\n    if k == 0:\n        return 1\n    if len(a) == 1:\n        return 0\n    if len(a) == 2:\n        return (a[0]!= a[1])\n    pairs = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i!= j:\n                if a[i]!= a[j] and abs(a[i] - a[j]) == k:\n                    pairs += 1\n    return pairs\n\na = [1, 2, 3, 4]\nk = 1\nprint find_pairs(a, k)",
      -0.85693359375
    ],
    [
      "import unittest\n\ndef get_distinct_pairs(arr):\n    return len(list(set(arr)))\n\nclass Test(unittest.TestCase):\n    def test_distinct_pairs(self):\n        self.assertEqual(get_distinct_pairs([1, 2, 3, 1, 2, 3]), 3)\n        self.assertEqual(get_distinct_pairs([1, 2, 3, 4, 5]), 4)\n        self.assertEqual(get_distinct_pairs([1, 2, 3, 4, 5, 6]), 5)\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.85693359375
    ],
    [
      "from __future__ import annotations\n\nclass Solution:\n    def distinctPairs(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [0] * (n * (n - 1))\n        dp[0] = 1\n        for i in range(1, n):\n            dp[i * (i - 1)] = 1\n        for i in range(1, n - 1):\n            for j in range(i + 1, n):\n                dp[i * (n - 1) + j - i] = dp[j * (n - 1) + i - j] + 1\n        return dp[n * (n - 1) / 2]",
      -0.85693359375
    ],
    [
      "def count_pairs(arr, k):\n    ret = 0\n    for i in range(0, len(arr) - k + 1):\n        for j in range(i + k, len(arr)):\n            if arr[i]!= arr[j]:\n                ret += 1\n    return ret\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 3, 3, 3, 3, 3, 3]\n    k = 2\n    print count_pairs(arr, k)",
      -0.85693359375
    ],
    [
      "def distinct_pairs(arr, k):\n    \n    # base case\n    if len(arr) < k + 1:\n        return 1\n\n    # recursive case\n    return distinct_pairs(arr[1:], k) + distinct_pairs(arr[:-1], k)\n\nprint distinct_pairs([1,2,3,4,5], 2)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def diffPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return len(set(nums) - set(list(set(nums) - set(range(1, k+1)))))",
      -0.85693359375
    ],
    [
      "def get_pairs(arr):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j] and abs(arr[i] - arr[j]) == k:\n                pairs.append((arr[i], arr[j]))\n    return pairs\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(get_pairs(arr))",
      -0.85791015625
    ],
    [
      "def distinct_pairs_with_k_diff(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i]!= arr[j] and abs(arr[i] - arr[j]) == k:\n                res += 1\n    return res",
      -0.85791015625
    ],
    [
      "def count_pairs(arr, k):\n    res = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i]!= arr[j] and abs(arr[i] - arr[j]) == k:\n                res += 1\n    return res\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print count_pairs(arr, 2)",
      -0.85791015625
    ],
    [
      "# https://leetcode.com/problems/distinct-pairs-with-dif-k-in-a-set-ii/discuss/82438/Python-n-way-solution-with-explanation\nclass Solution(object):\n    def numDistinctPairs(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(arr) < k:\n            return 0\n        n = len(arr)\n        ans = 0\n        for i in range(n - k + 1):\n            for j in range(i + 1, n):\n                if arr[i] == arr[j] and i!= j:\n                    ans += 1\n        return ans",
      -0.85791015625
    ],
    [
      "def count_distinct_pairs(arr, k):\n    return len(arr) * (len(arr) - 1) / 2 - arr.count(k)\n\n# Your count_distinct_pairs solution should be written using only basic arithmetic and in-place\n# operations. Do not use libraries such as'set' or'sorted'.",
      -0.85791015625
    ],
    [
      "from collections import defaultdict\n\n\ndef distinct_pairs_with_diff_k(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    d = defaultdict(int)\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            d[arr[i] + arr[j]] += 1\n    return sum(d[i - k] for i in range(k + 1, len(arr) + 1))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(distinct_pairs_with_diff_k(arr, 2))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def diffPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # naive approach, O(n*n)\n        res = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] - nums[j] == k:\n                    res += 1\n        return res",
      -0.85791015625
    ],
    [
      "def count_pairs(arr, k):\n\tn = len(arr)\n\tif k == 0:\n\t\treturn 0\n\telif k == 1:\n\t\treturn sum(arr)\n\telif k == 2:\n\t\treturn sum(arr[0]!= arr[1])\n\telse:\n\t\treturn sum(arr[0]!= arr[i] for i in range(k-1, n-k+1))\n\nif __name__ == \"__main__\":\n\tarr = [2, 3, 4, 1, 2, 4]\n\tk = 3\n\tprint count_pairs(arr, k)",
      -0.8583984375
    ],
    [
      "def count_diff_pairs(arr, k):\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j] and abs(i - j) == k:\n                res += 1\n    return res\n\n# Your code here\narr = [1,2,3,4,5]\nk = 2\nprint(count_diff_pairs(arr, k))",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param nums, a list of integers\n    # @param k, an integer\n    # @return an integer\n    def numDistinctPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n        # count the number of pairs\n        result = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if abs(nums[i] - nums[j]) == k:\n                    result += 1\n        return result",
      -0.8583984375
    ],
    [
      "# Definition for an array of integers.\nclass Array(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n        self.num_set = set()\n\n    def distinct_pairs(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return len(set(xrange(len(self.nums))).difference(self.num_set))\n\n# Your Array object will be instantiated and called as such:\n# obj = Array(nums)\n# param_1 = obj.distinct_pairs(k)",
      -0.8583984375
    ],
    [
      "def distinct_pairs(arr, k):\n    # write your code here\n    if k > len(arr) - 1:\n        return 0\n\n    distinct_pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                distinct_pairs += 1\n    return distinct_pairs\n\n\n# print distinct_pairs(arr, 2)\n# print distinct_pairs(arr, 3)\n# print distinct_pairs(arr, 5)\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print distinct_pairs(arr, 2)\n    print distinct_pairs(arr, 3)\n    print distinct_pairs(arr, 5)",
      -0.8583984375
    ],
    [
      "import math\nimport sys\n\nclass Solution(object):\n    def distinctPairs(self, A, B, k):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not A or not B:\n            return 0\n\n        if not A or not B:\n            return 0\n\n        if k >= len(A) or k >= len(B):\n            return 0\n\n        n = len(A)\n        m = len(B)\n        res = 0\n\n        for i in range(n):\n            for j in range(m):\n                if abs(A[i] - B[j]) == k:\n                    res += 1\n\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().distinctPairs([1,2,3,4], [1,2,3,4,5], 1)",
      -0.8583984375
    ],
    [
      "def count_pairs_diff(arr, k):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                pairs.append([arr[i], arr[j]])\n\n    return len(pairs)",
      -0.8583984375
    ],
    [
      "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    def distinctPairs(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals: return 0\n        dp = [0] * (len(intervals) + 1)\n        for i in range(len(intervals)):\n            for j in range(i + 1, len(intervals) + 1):\n                if intervals[i].end <= intervals[j].start:\n                    dp[j] += dp[i]\n                elif intervals[i].start <= intervals[j].start:\n                    dp[j] += dp[i]\n                else:\n                    dp[j] += dp[i] + 1\n        return dp[-1]",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def numDistinctPairs(self, nums, k):\n        n = len(nums)\n        if k == 0:\n            return n**2\n        dp = [0] * (n*(n+1))\n        for i in range(n):\n            for j in range(i+1, n):\n                dp[i*(i+1) + j*(j+1) - k] += 1\n        return dp[n*n - k]",
      -0.8583984375
    ],
    [
      "def distinct_pairs(arr, k):\n    # write your code here\n    n = len(arr)\n    if n < k:\n        return 0\n    \n    pairs = 0\n    for i in range(n-k+1):\n        for j in range(i+1, n-k+1):\n            pairs += 1\n    return pairs\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,3,3,3]\n    k = 3\n    print distinct_pairs(arr, k)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def numDistinct(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(arr)):\n            res += self.numDistinct(arr[:i] + arr[i+1:], k)\n        return res",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\ndef distinct_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    d = Counter(arr)\n    return sum(d[i] for i in d if i - k in d)\n\nif __name__ == '__main__':\n    arr = [1,2,3,4]\n    k = 2\n    print(distinct_pairs(arr, k))",
      -0.85888671875
    ],
    [
      "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def distinctPairs(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals:\n            return 0\n        intervals.sort(key=lambda x: (x.start, x.end))\n        n = len(intervals)\n        res = 0\n        for i in range(n):\n            if i == 0:\n                continue\n            if intervals[i].start!= intervals[i-1].end:\n                res += 1\n        return res",
      -0.85888671875
    ],
    [
      "from collections import Counter\n\ndef distinct_pairs(arr, k):\n    c = Counter(arr)\n    d = c.keys()\n    return d[k:] - d[:-k]\n\nprint distinct_pairs([1, 2, 3, 4, 5], 2)",
      -0.85888671875
    ],
    [
      "def distinct_pairs_with_diff_k(arr, k):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j] and arr[i] - arr[j] == k:\n                result += 1\n    return result\n\n\nif __name__ == '__main__':\n    arr = [1, 1, 1, 2, 2, 3]\n    k = 2\n    print(distinct_pairs_with_diff_k(arr, k))",
      -0.85888671875
    ],
    [
      "def count_diff_pairs(arr, k):\n    d = {}\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) == k:\n                if arr[i] not in d:\n                    d[arr[i]] = 0\n                d[arr[i]] += 1\n                if arr[j] not in d:\n                    d[arr[j]] = 0\n                d[arr[j]] += 1\n    return len(d)\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(count_diff_pairs(arr, 3))",
      -0.85888671875
    ],
    [
      "def count_pairs(arr, k):\n    d = {}\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j] and abs(k - (i-j)) < k:\n                d[arr[i]-arr[j]] = d.get(arr[i]-arr[j], 0) + 1\n    return d\n\n# Your code here\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6]\n    k = 3\n    print(count_pairs(arr, k))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "from collections import defaultdict\n\nclass Solution(object):\n    def diffPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = defaultdict(int)\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                res[(nums[i] - nums[j])] += 1\n        return sum(res.values())",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def distinctPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        for i in range(1, len(nums) + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] - nums[j] == k:\n                    count += dp[i] * dp[j]\n        return count\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3]\n    print Solution().distinctPairs(nums)",
      -0.85888671875
    ],
    [
      "def distinct_pairs(arr, k):\n    # write your code here\n    return 0\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6]\n    k = 3\n    print distinct_pairs(arr, k)",
      -0.86083984375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def numDistinctPairs(self, nums, k):\n        if len(nums) == 0:\n            return 0\n\n        res = 0\n        for i in range(len(nums)):\n            for j in range(i + k, len(nums)):\n                res += 1\n        return res",
      -0.9384765625
    ],
    [
      "# https://leetcode.com/problems/distinct-pairs-with-diference-in-array/\n\nclass Solution(object):\n    def distinctPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if k < 0 or k > n:\n            return 0\n        dp = [0] * (n+1)\n        dp[0] = 1\n        for i in range(1, n+1):\n            for j in range(i-k, i):\n                dp[j] += dp[j-1]\n        return dp[n]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.distinctPairs([1, 1, 1], 2))\n    print(s.distinctPairs([2, 2], 1))\n    print(s.distinctPairs([2, 2], -1))\n    print(s.distinctPairs([-1, -1], 1))\n    print(s.distinctPairs([-1, -1], 2))\n    print(s.distinctPairs([-1, -1], 3))\n    print(s.distinctPairs([-1, -1], 4))\n    print(s.distinctPairs([-1, -1], 5))\n    print(s.distinctPairs([1, 2], 2))\n    print(s.distinctPairs([2, 1], 2))",
      -1.306640625
    ],
    [
      "class Solution(object):\n    def numDistinctPairs(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not A or len(A) < 2:\n            return 0\n        d = {}\n        for i in range(len(A) - 1):\n            for j in range(i + 1, len(A)):\n                diff = A[i] - A[j]\n                if diff in d:\n                    d[diff] += 1\n                else:\n                    d[diff] = 1\n        return len(d) - k + 1",
      -1.33203125
    ],
    [
      "class Solution(object):\n    def numDistinctPairs(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        n = len(A)\n        if k == 0:\n            return n*(n-1)/2\n        if k == 1:\n            return n*(n-1)/2 - 1\n        if k == 2:\n            return n*(n-1)/2 - n\n        if k > n:\n            return 0\n        if k == n-1:\n            return 2\n        if k == n-2:\n            return n*(n-1)/2 - n + 1\n\n        ans = 0\n        for i in range(n-1):\n            for j in range(i+1, n):\n                ans += self.numDistinctPairs(A[i:n], k-1)\n        return ans",
      -1.4306640625
    ],
    [
      "from collections import Counter\n\ndef count_distinct_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return len(Counter(arr).items()) - (len(arr) - 1) * (len(arr) - 2) / 2\n\nif __name__ == '__main__':\n    assert count_distinct_pairs([1, 2, 3, 4], 1) == 4\n    assert count_distinct_pairs([1, 2, 3, 4], 2) == 4\n    assert count_distinct_pairs([1, 2, 3, 4], 3) == 4\n    assert count_distinct_pairs([1, 2, 3, 4], 4) == 0\n    assert count_distinct_pairs([1, 2, 3, 4], 5) == 0",
      -1.556640625
    ],
    [
      "import collections\n\ndef find_distinct_pairs(arr, k):\n    pairs = collections.defaultdict(int)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                pairs[(arr[i], arr[j])] += 1\n    return pairs\n\nprint(find_distinct_pairs([-3, -4, -1, -3, -4, -1, -3, -4, -1, -3, -4], 2))\nprint(find_distinct_pairs([-3, -4, -1, -3, -4, -1, -3, -4, -1, -3, -4], 3))",
      -1.7255859375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def numDistinctPairs(self, nums, k):\n        if not nums:\n            return 0\n        n = len(nums)\n        res = set()\n        for i in range(n):\n            for j in range(i+1, n):\n                if abs(nums[i]-nums[j]) == k:\n                    res.add((nums[i], nums[j]))\n        return len(res)\n\nif __name__ == '__main__':\n    print Solution().numDistinctPairs([1,2,2], 1)",
      -1.96484375
    ],
    [
      "from collections import Counter\nfrom itertools import combinations\n\n\ndef count_diff_pairs(arr, k):\n    counter = Counter()\n    for i in range(len(arr) - k + 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i]!= arr[j]:\n                counter[(arr[i], arr[j])] += 1\n    return counter.keys()\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(count_diff_pairs(arr, 2))",
      -2.1015625
    ],
    [
      "def pairs(a, k):\n    \"\"\"\n    :type a: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not a:\n        return 0\n    if len(a) == 1:\n        return 1\n    if k == 0:\n        return pairs(a[1:], k) + 1\n    if k == 1:\n        return pairs(a[:-1], k) + 1\n    if k == 2:\n        return pairs(a[1:], k) + pairs(a[:-1], k)\n    return pairs(a[1:], k) + pairs(a[:-1], k) + pairs(a[2:], k)\n\na = [1, 2, 3, 4, 5, 6]\nprint(pairs(a, 0))\nprint(pairs(a, 1))\nprint(pairs(a, 2))\nprint(pairs(a, 3))\nprint(pairs(a, 4))\nprint(pairs(a, 5))\nprint(pairs(a, 6))\nprint(pairs(a, 7))\nprint(pairs(a, 8))",
      -2.361328125
    ],
    [
      "# https://oj.leetcode.com/problems/distinct-pairs-with-diference-k-in-a-sorted-array/\n# \n# Given an array of integers, return the number of distinct pairs with a difference of k.\n# \n# Example 1:\n# Input: [1, 2, 3]\n# k = 2\n# Output: 2\n# \n# Example 2:\n# Input: [1, 3, 2]\n# k = 1\n# Output: 3\n# \n# Example 3:\n# Input: [1, 2, 2]\n# k = 1\n# Output: 4\n# \n# \n# Constraints:\n# 1 <= k <= n <= 10^4\n# -10^9 <= a[i] <= 10^9\n# \n# \n# Follow up:\n# What if you cannot modify the array (ie, the input array is read only)?\n# In this case, you should return the total number of distinct pairs.\n# \n# Companies\n# Microsoft Apple\n# Related Topics\n# Array\n# Similar Questions\n# Distinct Subsequences\n# \n# Author: ChenHao\n\nclass Solution(object):\n    def numDistinctPairs(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # Note: we can use the index as the pair index\n        ans = 0\n        for i in range(len(A)):\n            for j in range(i, len(A)):\n                if i!= j and abs(A[i] - A[j]) == k:\n                    ans += 1\n        return ans",
      -2.5
    ],
    [
      "import os\n\ndef distinct_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) == k:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 3, 3]\n    k = 3\n    print distinct_pairs(arr, k)\n    # expected: 3",
      -2.779296875
    ],
    [
      "def distinct_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k < 0:\n        return 0\n    if k == 0:\n        return len(arr)\n    if len(arr) < k + 1:\n        return 0\n    ans = 0\n    for i in range(len(arr) - k):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j] - k:\n                ans += 1\n    return ans\n\nclass Solution(object):\n    def distinctPairs(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k < 0:\n            return 0\n        if len(arr) < k + 1:\n            return 0\n        ans = 0\n        for i in range(len(arr) - k):\n            for j in range(i + 1, len(arr)):\n                if arr[i] == arr[j] - k:\n                    ans += 1\n        return ans\n\nif __name__ == \"__main__\":\n    s = Solution()\n    arr = [2, 3, 5, 7, 11, 13]\n    k = 3\n    print s.distinctPairs(arr, k)",
      -2.94140625
    ],
    [
      "# https://leetcode.com/problems/distinct-pairs-with-diference-k-in-any-array/discuss/86584/Python-Solutions-Using-Dynamic-Programming-and-backtracking\n# https://www.youtube.com/watch?v=fzd3VyCKQAQ\n# https://www.youtube.com/watch?v=JGv4vRqJ4Zc\n# https://www.youtube.com/watch?v=QQa-w7c2q7w\n# https://www.youtube.com/watch?v=r4Q2tFZk3f8\n# https://www.youtube.com/watch?v=iT-Qz_uqkcY\n\nclass Solution(object):\n    def countPairs(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(arr) == 0:\n            return 0\n        if k == 0:\n            return len(arr)\n        if k == 1:\n            return len(set(arr))\n        if k > len(arr):\n            return 0\n        return self.countPairs(arr[k:], k - 1) + self.countPairs(arr[:k], k - 1)\n\n\nif __name__ == \"__main__\":\n    print(Solution().countPairs([1, 2, 3, 4], 2))\n    print(Solution().countPairs([1, 2, 3, 4], 1))\n    print(Solution().countPairs([1, 2, 3, 4], 5))\n    print(Solution().countPairs([1, 2, 3, 4], 3))\n    print(Solution().countPairs([1, 2, 3, 4], 0))",
      -2.943359375
    ],
    [
      "from collections import defaultdict\n\nclass Solution(object):\n    def distinctPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        distinct = defaultdict(int)\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                if k == 0:\n                    break\n                if nums[i] - nums[j]!= k:\n                    distinct[nums[i] - nums[j]] += 1\n                k -= 1\n        return len(distinct)",
      -3.041015625
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/sherlock-and-difference\n\nimport unittest\n\n\ndef distinct_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    distinct_pairs_cnt = 0\n    distinct_pairs = []\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j] + k:\n                distinct_pairs.append((i, j))\n                distinct_pairs_cnt += 1\n\n    return distinct_pairs_cnt\n\n\nclass TestCode(unittest.TestCase):\n    def test_distinct_pairs(self):\n        self.assertEqual(distinct_pairs([1, 1, 2, 2, 3, 3], 1), 2)\n        self.assertEqual(distinct_pairs([1, 1, 2, 2, 3, 3], 2), 0)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -3.1328125
    ],
    [
      "class Solution(object):\n    def distinctPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0 or k == 0:\n            return 0\n        dp = [0] * len(nums)\n        for i in range(len(nums) - 1):\n            dp[i] = dp[i + 1]\n            if i + k < len(nums) and nums[i]!= nums[i + k]:\n                dp[i] += 1\n        return dp[0]",
      -3.888671875
    ],
    [
      "# Definition for a pair of integers.\nclass Pair(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"({}, {})\".format(self.x, self.y)\n\n# @param A, a list of integers\n# @param k, an integer\n# @return an integer\ndef diffPairs(A, k):\n    dp = [[0] * len(A) for _ in range(len(A))]\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            dp[i][j] = dp[j][i] + 1\n    dp = [[0] * (len(A) + 1) for _ in range(len(A) + 1)]\n    dp[0][0] = 1\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            dp[i+1][j] = dp[i][j] + dp[i][j-1]\n    return dp[-1][-1]\n\n# @param A, a list of integers\n# @return an integer\ndef diffPairs2(A):\n    dp = [[0] * (len(A) + 1) for _ in range(len(A) + 1)]\n    dp[0][0] = 1\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            dp[i+1][j] = dp[i][j-1] + dp[i][j]\n    return dp[-1][-1]\n\n\nif __name__ == '__main__':\n    A = [1, 2, 3, 4]\n    print(diffPairs(A, 1))\n    print(diffPairs2(A))",
      -4.0078125
    ],
    [
      "# TLE\n# from common.array_helper import *\n\ndef get_all_pairs_with_k_diff(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i]!= arr[j] and arr[i] + k == arr[j]:\n                count += 1\n    return count\n\n# Time:  O(n^2)\n# Space: O(n)\nclass Solution(object):\n    def countDistinct(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(arr) - k + 1):\n            for j in range(i + k, len(arr)):\n                if arr[i]!= arr[j]:\n                    count += 1\n        return count",
      -4.05859375
    ],
    [
      "from collections import Counter\n\n# Note:\n# The input array is a list of positive integers.\n# The input k is a positive integer.\n# The output is a dictionary of distinct pairs.\n# The output should be sorted by the number of elements in each pair.\n\n\ndef distinct_pairs_with_k(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: dict[int, int]\n    \"\"\"\n    counter = Counter(arr)\n    result = {}\n    for i in counter:\n        for j in counter:\n            if abs(i - j) <= k:\n                result[i, j] = counter[i] + counter[j]\n    return result\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    k = 3\n    print(distinct_pairs_with_k(arr, k))",
      -4.171875
    ],
    [
      "def distinct_pairs_k(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    dp = [0] * (nums[-1] + 1)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i]!= nums[j]:\n                if i + k - j <= j:\n                    dp[i + k - j] += dp[j]\n    return dp[-1]\n\nif __name__ == '__main__':\n    print distinct_pairs_k([1, 2, 3], 2)\n    print distinct_pairs_k([1, 2, 3], 1)\n    print distinct_pairs_k([1, 2, 3], 3)\n    print distinct_pairs_k([1, 2, 3], 4)\n    print distinct_pairs_k([1, 2, 3], 5)\n    print distinct_pairs_k([1, 2, 3], 6)\n    print distinct_pairs_k([1, 2, 3], 7)\n    print distinct_pairs_k([1, 2, 3], 8)\n    print distinct_pairs_k([1, 2, 3], 9)\n    print distinct_pairs_k([1, 2, 3], 10)\n    print distinct_pairs_k([1, 2, 3], 11)\n    print distinct_pairs_k([1, 2, 3], 12)\n    print distinct_pairs_k([1, 2, 3], 13)",
      -4.17578125
    ],
    [
      "# https://www.hackerrank.com/challenges/distinct-pairs-k/problem\n\ndef findDistinctPairs(arr, k):\n    distinct = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i]!= arr[j] and abs(k - (arr[i] - arr[j])) == k:\n                distinct += 1\n    return distinct\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = int(input())\n    print(findDistinctPairs(arr, k))\n\nif __name__ == '__main__':\n    main()",
      -4.75
    ],
    [
      "# https://leetcode.com/problems/distinct-pairs-with-diference-in-array/discuss/114860/Python-DP-with-Python-and-Java-C\n\nclass Solution(object):\n    def distinctPairs(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if len(A) < 2:\n            return 0\n        \n        # dp[i] is the number of distinct pairs of A[:i] and A[i+1:]\n        dp = [0] * (len(A) + 1)\n        \n        # dp[i] is the number of distinct pairs of A[:i] and A[i:]\n        dp[0] = 1\n        \n        # dp[i] is the number of distinct pairs of A[:i] and A[i:]\n        for i in range(1, len(A) + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        \n        return dp[-1]\n\ns = Solution()\nprint(s.distinctPairs([1, 2, 3, 4, 5, 6]))",
      -5.41015625
    ],
    [
      "from collections import Counter\n\ndef diff_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    c = Counter(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j and c[i]!= c[j] and arr[i] - arr[j] == k:\n                c[i] += c[j]\n    return sum(c.values())\n\nif __name__ == '__main__':\n    assert diff_pairs([1,2,3], 0) == 0\n    assert diff_pairs([1,2,3,4], 0) == 2\n    assert diff_pairs([1,2,3,4], 1) == 4\n    assert diff_pairs([1,2,3,4,5], 1) == 5\n    assert diff_pairs([1,2,3,4,5,6,7], 1) == 7",
      -5.5703125
    ],
    [
      "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n#         \n\nclass Solution:\n    # @param intervals, a list of Interval\n    # @param k, an integer\n    # @return an integer\n    def numDistinct(self, intervals, k):\n        intervals.sort(key=lambda x: x.start)\n        if k == 0:\n            return len(intervals)\n        diffs = [x.end - x.start for x in intervals]\n        if k > len(diffs):\n            return len(intervals)\n        count = 0\n        for i in range(len(intervals) - k + 1):\n            for j in range(k):\n                if intervals[i + j].start < diffs[j]:\n                    break\n            if j == k:\n                count += 1\n        return count",
      -6.03125
    ],
    [
      "def diff_pairs(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] == arr[1]:\n        return arr[0]\n\n    count = 0\n    for i in range(2, len(arr)):\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i-2]:\n            count += arr[i]\n    return count\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 3, 3]\n    print diff_pairs(arr)\n    print diff_pairs(arr)\n    print diff_pairs(arr)",
      -6.07421875
    ],
    [
      "from collections import defaultdict\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef diff_k_distinct_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    cnt = defaultdict(int)\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            cnt[arr[i] - arr[j]] += 1\n    return sum(cnt.values())\n\n\nif __name__ == '__main__':\n    print(diff_k_distinct_pairs([1, 2, 3], 2))\n    print(diff_k_distinct_pairs([1, 2, 3], 3))",
      -6.08984375
    ],
    [
      "def count_distinct_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if arr[0] == arr[1]:\n        return 1\n    if arr[0] == arr[-1]:\n        return 1\n    if arr[0] - arr[-1] == k:\n        return 1\n    if arr[-1] - arr[0] == k:\n        return 1\n\n    pairs = 0\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-1] == k:\n            pairs += 1\n    return pairs\n\nprint(count_distinct_pairs([1,2,3,4], 1))\nprint(count_distinct_pairs([1,1,2,2,3,3], 1))\nprint(count_distinct_pairs([1,2,3,4], 2))\nprint(count_distinct_pairs([1,1,2,2,3,3], 2))",
      -6.15234375
    ],
    [
      "import time\n\nstart_time = time.time()\n\ndef distinct_pairs(arr, k):\n    n = len(arr)\n    if n < 2:\n        return n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j] and abs(k-i) == abs(k-j):\n                count += 1\n    return count\n\nprint distinct_pairs([3,1,2,4,5], 2)\nprint distinct_pairs([-1,0,1,2,-3,3], 2)\n\nprint \"--- %s seconds ---\" % (time.time() - start_time)",
      -6.75
    ],
    [
      "def distinct_pairs(arr, k):\n    n = len(arr)\n    dist = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j] and j-i < k:\n                dist[i,j] = dist.get(i, 0) + dist.get(j, 0)\n    return dist.values()\n\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer[][]}\n    def kDistinctPairs(self, nums, k):\n        if k == 0:\n            return [[]]\n        if k == 1:\n            return [[i, i+1] for i in range(len(nums))]\n\n        dist = distinct_pairs(nums, k)\n        ret = []\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i!= j and dist[i, j] > k:\n                    ret.append([i, j])\n        return ret\n\nif __name__ == \"__main__\":\n    print Solution().kDistinctPairs([1,1,2,2,3], 3)",
      -7.16796875
    ],
    [
      "from collections import defaultdict\n\n\nclass Solution(object):\n    def diffPairs(self, A, k):\n        \"\"\"\n        :type A: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n\n        n = len(A)\n        d = defaultdict(int)\n        for i in xrange(n):\n            d[A[i]] += 1\n\n        count = 0\n        for i in xrange(n):\n            for j in xrange(i + 1, n):\n                d[A[i]] -= 1\n                d[A[j]] -= 1\n                if d[A[i]] < 0 or d[A[j]] < 0:\n                    d[A[i]] += 1\n                    d[A[j]] += 1\n                if d[A[i]] == 0 and d[A[j]] == 0:\n                    count += 1\n\n        return count\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    A = [1, 2, 3, 4]\n    k = 2\n    print sol.diffPairs(A, k)",
      -7.38671875
    ],
    [
      "from collections import defaultdict\n\n\ndef distinct_pairs(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: int\n    \"\"\"\n    if len(array) == 0:\n        return 0\n    count = defaultdict(int)\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i]!= array[j]:\n                count[array[i] - array[j]] += 1\n    return sum(count.values())\n\n\nif __name__ == '__main__':\n    assert distinct_pairs([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8]) == 15\n\n    assert distinct_pairs([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8]) == 15\n    assert distinct_pairs([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8]) == 15\n    assert distinct_pairs([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8]) == 15\n    assert distinct_pairs([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8]) == 15\n    assert distinct_pairs([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8]) == 15\n    assert distinct_pairs([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8]) == 15\n    assert distinct_pairs([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8]) == 15\n    assert distinct_pairs([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8]) == 15\n    assert distinct_pairs([1, 2, 2,",
      -8.1328125
    ],
    [
      "# https://www.hackerrank.com/challenges/distinct-pairs/problem\n\n# A. Distinct pairs\n# A problem that is known to be challenging to solve.\n# Problem statement:\n# Given an array of n positive integers, write a function that returns the number of distinct pairs in the array.\n# Example:\n# Input:\n# [1, 2, 3]\n# Output:\n# 3\n# Explanation:\n# There are 3 distinct pairs: (1, 2), (1, 3), (2, 3).\n# Input:\n# [1, 2, 3, 4]\n# Output:\n# 5\n# Explanation:\n# There are 5 distinct pairs: (1, 2), (2, 3), (1, 4), (3, 4), (1, 3).\n# Note:\n# 1 <= n <= 1000\n# The elements of the given array are unique.\n# The input array is sorted in non-decreasing order.\n\n# Binary search solution\ndef distinct_pairs_binary_search(arr):\n    # write your code here\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    l = 0\n    r = len(arr) - 1\n    while l < r:\n        mid = l + (r - l) / 2\n        if arr[mid] == arr[r]:\n            r = mid\n        elif arr[mid] < arr[r]:\n            l = mid + 1\n        else:\n            r = mid\n    return r - l + 1\n\n# O(n^2) solution\ndef distinct_pairs_linear_time(arr):\n    # write your code here\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    result = 0\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            result += 1\n    return result\n\n# O(n^2) solution\ndef distinct_pairs_linear_time_with_arr_sorted(arr):\n    # write your code here\n    if len(arr) == 0",
      -8.25
    ],
    [
      "class Solution(object):\n    def differenceK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        for i in xrange(1, len(nums) + 1):\n            dp[i] = dp[i - 1] + (i - 1) * dp[i - 2]\n        return dp[-1] - (nums[-1] - k) * (nums[-1] - k)",
      -8.34375
    ],
    [
      "# https://www.hackerrank.com/challenges/distinct-pairs/problem\n\n# Note:\n# The input array will be sorted in ascending order.\n# The range of k is [0, 10^4].\n# Example\n# Given array A = [0, 2, 4, 1, 3, 1, 5, 4], and k = 3, return 6.\n\nfrom collections import Counter\n\ndef distinctPairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n < k:\n        return 0\n    nums = Counter(arr)\n    return sum(nums[i] for i in range(k) if i+k <= n)\n\nif __name__ == \"__main__\":\n    arr = [0, 2, 4, 1, 3, 1, 5, 4]\n    k = 3\n    print(distinctPairs(arr, k))",
      -8.515625
    ],
    [
      "import os\nimport sys\nsys.path.append(os.path.join(os.path.dirname(__file__), '..'))\n\nfrom collections import defaultdict\nfrom functools import reduce\n\nfrom algorithms.sort.sort import sort_by_size\nfrom algorithms.sort.heap import build_heap\nfrom algorithms.sort.heap import heap_insert\nfrom algorithms.sort.heap import heap_pop\nfrom algorithms.sort.heap import heap_top\n\n\ndef find_difference(arr):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n    diffs = defaultdict(int)\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            diffs[arr[i] - arr[j]] += 1\n\n    return diffs\n\n\ndef find_difference_sort(arr):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n    sorted_arr = sort_by_size(arr)\n\n    diff_dict = defaultdict(int)\n    for i in range(len(sorted_arr)):\n        for j in range(i, len(sorted_arr)):\n            diff_dict[sorted_arr[i] - sorted_arr[j]] += 1\n\n    return diff_dict\n\n\ndef find_difference_heap(arr):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n    heap = build_heap(arr)\n\n    diff_dict = defaultdict(int)\n    while heap:\n        diff_dict[heap_top(heap)] += 1\n        heap_pop(heap)\n\n    return diff_dict\n\n\ndef find_difference_heap_2(arr):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    \"\"\"\n    heap = build_heap(arr)\n\n    diff_dict = defaultdict(int)\n    while heap:\n        diff_dict[heap_pop(heap)] += 1",
      -9.109375
    ],
    [
      "def get_diff_pairs(arr, k):\n    return {arr[i] : arr[i+k] for i in range(len(arr)-k)}\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(get_diff_pairs(arr, 1))\n    print(get_diff_pairs(arr, 2))\n    print(get_diff_pairs(arr, 3))\n    print(get_diff_pairs(arr, 4))\n    print(get_diff_pairs(arr, 5))\n    print(get_diff_pairs(arr, 6))\n    print(get_diff_pairs(arr, 7))\n    print(get_diff_pairs(arr, 8))",
      -9.828125
    ],
    [
      "def count_distinct_pairs(nums, k):\n    # write your code here\n    n = len(nums)\n    if n < 2:\n        return 0\n    if n < k:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        for j in range(i):\n            if i - j >= k:\n                dp[i] += dp[j]\n    return dp[n]\n\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def numDistinct(self, nums, k):\n        n = len(nums)\n        if n < 2:\n            return 0\n        if n < k:\n            return 1\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            for j in range(i):\n                if i - j >= k:\n                    dp[i] += dp[j]\n        return dp[n]",
      -9.9453125
    ],
    [
      "# https://oj.leetcode.com/problems/distinct-pairs-with-dif-k-in-a-sorted-array/\n# Given an array of n integers nums, there is a sliding window of size k which is moving\n# from the very left of the array to the very right. You can only see the k numbers in the window.\n# Each time the sliding window moves right by one position.\n#\n# For example,\n# Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.\n#\n# Window position                Max\n# ---------------               -----\n# [1  3  -1] -3  5  3  6  7       3\n# [1  3  -1] -3  5  3  6  7       3\n# [1  3  -1] -3  5  3  6  7       2\n# [1  3  -1] -3  5  3  6  7       2\n# [1  3  -1] -3  5  3  6  7       1\n#\n# Note:\n# You may assume k is always valid, 1 \u2264 k \u2264 input array's size for non-empty array.\n#\n# Follow up:\n# Could you solve it with O(n log n) time complexity?\n\nclass Solution(object):\n    def numDistinctPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.countPairs(nums, k, 0, len(nums) - 1)\n\n    def countPairs(self, nums, k, left, right):\n        if left >= right:\n            return 0\n        mid = (left + right) // 2\n        return self.countPairs(nums, k, left, mid) + self.countPairs(nums, k, mid + 1, right)",
      -10.578125
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def numDistinctPairs(self, nums, k):\n        if k == 0:\n            return 1\n        if len(nums) < 2:\n            return len(nums)\n        res = self.numDistinctPairs(nums[:len(nums)/2], k)\n        res += self.numDistinctPairs(nums[len(nums)/2:], k)\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.numDistinctPairs([1, 2, 2, 3], 0))\n    print(s.numDistinctPairs([1, 2, 2, 3], 1))\n    print(s.numDistinctPairs([1, 2, 2, 3], 2))\n    print(s.numDistinctPairs([1, 2, 2, 3], 3))\n    print(s.numDistinctPairs([1, 2, 2, 3], 4))\n    print(s.numDistinctPairs([1, 2, 2, 3], 5))\n    print(s.numDistinctPairs([1, 2, 2, 3], 6))\n    print(s.numDistinctPairs([1, 2, 2, 3], 7))\n    print(s.numDistinctPairs([1, 2, 2, 3], 8))\n    print(s.numDistinctPairs([1, 2, 2, 3], 9))\n    print(s.numDistinctPairs([1, 2, 2, 3], 10))\n    print(s.numDistinctPairs([1, 2, 2, 3], 11))\n    print(s.numDistinctPairs([1, 2, 2, 3], 12))\n    print(s.numDistinctPairs([1, 2, 2, 3], 13))\n    print(s.numDistinctPairs([1, 2, 2, 3], 14))\n    print(s.numDistinctPairs([1, 2, 2, 3], 15))",
      -10.84375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def diffPairs(self, nums, k):\n        # write your code here\n        if k == 0:\n            return 0\n        diffs = [0] * (len(nums) + 1)\n        for i in xrange(len(nums)):\n            diffs[i+1] = diffs[i] + 1\n        diffs[0] = 0\n        for j in xrange(len(nums)):\n            for i in xrange(j, len(nums)):\n                diffs[i+1] = diffs[i] + 1 if nums[i] - nums[j] == k else diffs[i+1]\n        return diffs[len(nums)]\n\nif __name__ == \"__main__\":\n    print Solution().diffPairs([1, 2, 3], 2)",
      -10.9453125
    ],
    [
      "from collections import defaultdict\n\n# https://leetcode.com/problems/distinct-pairs-with-diferences-in-any-array/discuss/95987/Python-O(N^2)-solution-with-explanation\n\nclass Solution:\n    def distinctPairs(self, A: List[int], k: int) -> int:\n        if not A:\n            return 0\n        n = len(A)\n        result = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                result += 1\n                if A[i]!= A[j] and abs(A[i] - A[j]) == k:\n                    break\n        return result\n\n\nif __name__ == \"__main__\":\n    assert Solution().distinctPairs([1, 1], 1) == 2\n    assert Solution().distinctPairs([1, 1], 2) == 3\n    assert Solution().distinctPairs([1, 1], 3) == 4\n    assert Solution().distinctPairs([1, 2], 1) == 3\n    assert Solution().distinctPairs([1, 2], 2) == 6\n    assert Solution().distinctPairs([1, 2], 3) == 8\n    assert Solution().distinctPairs([1, 2, 3], 1) == 6\n    assert Solution().distinctPairs([1, 2, 3], 2) == 12\n    assert Solution().distinctPairs([1, 2, 3], 3) == 12\n    assert Solution().distinctPairs([1, 2, 3, 4], 2) == 20\n    assert Solution().distinctPairs([1, 2, 3, 4], 3) == 24\n    assert Solution().distinctPairs([1, 2, 3, 4], 4) == 24",
      -11.046875
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @param k, an integer\n    # @return an integer\n    def numDistinctPairs(self, num, k):\n        if len(num) < k:\n            return 0\n        dp = [1] * len(num)\n        for i in range(len(num) - k + 1):\n            dp[i] = dp[i + 1]\n            for j in range(i + k, len(num)):\n                dp[i] *= num[j] - num[i]\n                dp[i] %= 1000000007\n            dp[i] //= 1000000007\n        return dp[-1]\n\n    # @param num, a list of integer\n    # @param k, an integer\n    # @return an integer\n    def numDistinctPairs1(self, num, k):\n        if len(num) < k:\n            return 0\n        dp = [1] * len(num)\n        for i in range(len(num) - k + 1):\n            dp[i] = dp[i + 1]\n            for j in range(i + k, len(num)):\n                dp[i] *= num[j] - num[i]\n                dp[i] %= 1000000007\n            dp[i] //= 1000000007\n        return dp[-1]\n\n\nif __name__ == \"__main__\":\n    print(Solution().numDistinctPairs([1, 2, 2], 2))\n    print(Solution().numDistinctPairs([1, 2, 3, 4], 2))\n    print(Solution().numDistinctPairs([1, 2, 2], 3))\n    print(Solution().numDistinctPairs([1, 2, 3, 4], 3))",
      -11.328125
    ],
    [
      "# TLE\ndef distinct_pairs(arr, k):\n    if len(arr) <= 1:\n        return 0\n    else:\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j] and abs(k - arr[i])!= abs(k - arr[j]):\n                    count += 1\n        return count\n\n# TLE\ndef distinct_pairs2(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(k - arr[i])!= abs(k - arr[j]):\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    arr = [1, 3, 4, 5, 7, 9]\n    k = 3\n    print distinct_pairs(arr, k)\n    print distinct_pairs2(arr, k)",
      -11.6953125
    ],
    [
      "import math\n\ndef diff_pairs(arr, k):\n    return math.factorial(len(arr))/math.factorial(k)*math.factorial(len(arr)-k)/math.factorial(len(arr))\n\n# Your code here\n\nclass Solution(object):\n    def diffPairs(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(arr) < 2:\n            return 0\n        ans = 0\n        for i in range(1, len(arr)):\n            if arr[i] - arr[i-1] == k:\n                ans += 1\n        return ans\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    arr3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    arr4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    arr5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    arr6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    arr7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    arr8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    arr9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    arr10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12",
      -12.0625
    ],
    [
      "# https://leetcode.com/problems/distinct-pairs-with-diference-in-a-sorted-array/\n\nclass Solution(object):\n    def distinctPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if k == 0:\n            return 0\n        if k == 1:\n            return len(set(nums))\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(n):\n            for j in range(k):\n                if i - j >= 0 and nums[i]!= nums[i - j]:\n                    dp[i + 1][j + 1] += dp[i][j]\n        return dp[n][k]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.distinctPairs([1, 2, 3, 4, 5, 6], 2)\n    print s.distinctPairs([3, 3, 3, 3, 3, 3, 3, 4, 5], 3)\n    print s.distinctPairs([1, 2, 3, 4, 5, 6, 7], 4)\n    print s.distinctPairs([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n    print s.distinctPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n    print s.distinctPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4)\n    print s.distinctPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4)\n    print s.distinctPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 4)\n    print s.distinctP",
      -12.6484375
    ],
    [
      "#!/usr/bin/env python\n\nclass Solution(object):\n    def distinctPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.count(nums, 0, k, k)\n\n    def count(self, nums, start, k, tmp):\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if nums[start]!= tmp:\n            return 0\n        if k == 0:\n            return self.count(nums[start + 1:], start + 1, k, tmp) + self.count(nums[start + 1:], start + 1, k, nums[start])\n        else:\n            return self.count(nums[start + 1:], start + 1, k - 1, nums[start]) + self.count(nums[start + 1:], start + 1, k - 1, nums[start + 1])\n\n    def distinctPairs2(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if k == 0:\n            return self.distinctPairs2(nums[1:], k)\n        else:\n            return self.distinctPairs2(nums[1:], k - 1) + self.distinctPairs2(nums[1:], k - 1)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.distinctPairs([1, 3, 4, 5], 2))\n    print(sol.distinctPairs([1, 2, 3, 4, 5], 2))\n    print(sol.distinctPairs([1, 2, 3, 4, 5], 1))\n    print(sol.distinctPairs([1, 2, 3, 4, 5], 3))\n    print(sol.dist",
      -12.8515625
    ],
    [
      "import unittest\n\n# Complete the distinctPairs function below.\ndef distinctPairs(arr, k):\n    if len(arr) == 0:\n        return 0\n    elif k >= len(arr):\n        return len(arr) - 1\n    else:\n        return distinctPairs(arr[k:], k) + distinctPairs(arr[:k], k)\n\n\nclass Test(unittest.TestCase):\n    def test_distinctPairs(self):\n        self.assertEqual(distinctPairs([1, 3, 5, 7], 2), 2)\n        self.assertEqual(distinctPairs([1, 2, 3, 4, 5], 2), 1)\n        self.assertEqual(distinctPairs([1, 3, 5, 7, 9], 2), 1)\n        self.assertEqual(distinctPairs([1, 2, 3, 4, 5, 6, 7, 8, 9], 2), 2)\n        self.assertEqual(distinctPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), 3)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -13.328125
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def numDistinct(self, nums, k):\n        # write your code here\n        res = 0\n        for i in range(len(nums)):\n            res += self.getDiff(nums, i, k)\n        return res\n\n    def getDiff(self, nums, i, k):\n        if i == len(nums) - 1:\n            return 0\n        if i == len(nums) - 2:\n            return nums[i] - nums[i + 1]\n        if k == 0:\n            return 1\n        if nums[i] - nums[i + 1]!= k:\n            return 0\n        return self.getDiff(nums, i + 1, k - 1) + self.getDiff(nums, i + 2, k)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numDistinct([1,2,3], 0))\n    print(sol.numDistinct([1,2,3], 1))\n    print(sol.numDistinct([1,2,3], 2))\n    print(sol.numDistinct([1,2,3], 3))\n    print(sol.numDistinct([1,2,3], 4))\n    print(sol.numDistinct([1,2,3], 5))\n    print(sol.numDistinct([1,2,3], 6))\n    print(sol.numDistinct([1,2,3], 7))\n    print(sol.numDistinct([1,2,3], 8))\n    print(sol.numDistinct([1,2,3], 9))\n    print(sol.numDistinct([1,2,3], 10))\n    print(sol.numDistinct([1,2,3], 11))\n    print(sol.numDistinct([1,2,3], 12))\n    print(sol.numDistinct([1,2,3], 13))\n    print(sol.numDistinct([1,2,3], 14))\n    print(",
      -13.625
    ],
    [
      "import collections\nimport math\n\ndef distinct_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # TODO: write your code here\n    \n    if k < 0:\n        return 0\n    \n    # initialize\n    result = 0\n    # sort arr\n    arr = sorted(arr)\n    # calculate k+1\n    k_plus_1 = k + 1\n    # calculate k\n    k = len(arr) - k\n    \n    # calculate the pairs\n    for i in range(0, k):\n        # calculate the index of i-th element in arr\n        index = i + k\n        # calculate the index of i+1-th element in arr\n        index_plus_1 = index + k_plus_1\n        # calculate the difference between i and i+1\n        diff = arr[index] - arr[index_plus_1]\n        # calculate the number of pairs having a difference of diff\n        result += math.factorial(k) / (math.factorial(k - diff) * math.factorial(k + diff))\n    \n    return result\n\nif __name__ == \"__main__\":\n    print(distinct_pairs([1, 2, 3, 4], 2))\n    print(distinct_pairs([1, 2, 3, 4, 5, 6], 3))\n    print(distinct_pairs([1, 1], 1))\n    print(distinct_pairs([1, 2, 3, 4, 5, 6], 4))\n    print(distinct_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))",
      -13.7265625
    ],
    [
      "# https://leetcode.com/problems/distinct-pairs-with-diference-k-in-array/discuss/222213/C-Python-Solution\n\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def numDistinctPairs(self, nums, k):\n        count = 0\n        for i in range(len(nums) - k + 1):\n            for j in range(i + k, len(nums)):\n                if i!= j:\n                    count += 1\n        return count\n\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def numDistinctPairs2(self, nums, k):\n        n = len(nums)\n        if n < 2 or k < 0:\n            return 0\n        if n == 2:\n            return (nums[0]!= nums[1])\n        if k == 1:\n            return sum(1 for _ in nums)\n        if k == 2:\n            return sum(1 for _ in nums)\n        if k > n:\n            return 0\n        if k == n:\n            return sum(1 for _ in nums)\n        # k > 1\n        if k > n//2:\n            return self.numDistinctPairs2(nums[:k], k - 1) + self.numDistinctPairs2(nums[k:], k - 1)\n        # k < n//2\n        return self.numDistinctPairs2(nums[:k], k - 1) + self.numDistinctPairs2(nums[k:], k - 1) + self.numDistinctPairs2(nums[k:], k)",
      -13.9375
    ],
    [
      "import math\n\n\ndef distinct_pairs_with_difference_k(arr, k):\n    # write your code here\n    n = len(arr)\n    d = n - k\n\n    # if d is even, then d is a multiple of 2\n    # if d is odd, then d is a multiple of 3\n    if d % 2 == 0:\n        return count_pairs_with_difference_k_even_arr(arr, k, d / 2)\n    else:\n        return count_pairs_with_difference_k_odd_arr(arr, k, d / 3)\n\n\ndef count_pairs_with_difference_k_even_arr(arr, k, d):\n    # write your code here\n    return len(set(arr[i:i + d] for i in range(0, n, d)))\n\n\ndef count_pairs_with_difference_k_odd_arr(arr, k, d):\n    # write your code here\n    return sum(1 for i in range(0, d) if arr[i]!= arr[i + d])\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(distinct_pairs_with_difference_k(arr, 2))",
      -14.671875
    ],
    [
      "# https://www.hackerrank.com/challenges/distinct-pairs-with-dif\ndef distinct_pairs_with_dif(n, k):\n    # write your code in Python 2/3\n    if n == 0:\n        return 0\n\n    # n is the number of elements in the array\n    # k is the difference of elements in the array\n    # i is the current index\n\n    # return the number of pairs that have a difference of k\n    return distinct_pairs_with_dif(n-1, k) + distinct_pairs_with_dif(n-1, k-1)\n\n\n# Test case\n# n = 1\n# k = 1\n# n = 5\n# k = 2\n# n = 9\n# k = 3\n# n = 10\n# k = 4\n# n = 14\n# k = 5\n# n = 15\n# k = 6\n# n = 16\n# k = 7\n# n = 17\n# k = 8\n# n = 18\n# k = 9\n# n = 19\n# k = 10\n# n = 20\n# k = 11\n# n = 21\n# k = 12\n# n = 22\n# k = 13\n# n = 23\n# k = 14\n# n = 24\n# k = 15\n# n = 25\n# k = 16\n# n = 26\n# k = 17\n# n = 27\n# k = 18\n# n = 28\n# k = 19\n# n = 29\n# k = 20\n# n = 30\n# k = 21\n# n = 31\n# k = 22\n# n = 32\n# k = 23\n# n = 33\n# k = 24\n# n = 34\n# k = 25\n# n = 35\n# k = 26\n# n = 36\n# k = 27\n# n = 37\n# k = 28\n# n = 38\n# k = 29\n# n = 39\n# k = 30\n# n = 40\n# k = 31\n# n = 41\n# k = 32\n# n = 42\n# k = 33\n# n = 43\n# k = 34\n# n = 44\n# k = 35\n# n = 45\n# k = 36",
      -15.6171875
    ],
    [
      "# https://www.hackerrank.com/challenges/distinct-pairs-in-an-array/problem\n\n# My solution is a bit more straightforward than the one in the book\n# We loop through all the elements of the array\n# We keep a list of all the unique pairs\n# We keep a list of all the unique pairs for each element\n# Once we found a pair, we check to see if it is the same as the previous one\n# If it is the same, we remove the previous pair and add the current pair\n# If it isn't the same, we add the current pair to the list\n# Once we've found all the pairs, we print the number of pairs\n# Then we return\n\ndef distinct_pairs(arr, k):\n    # Initialize the lists\n    pairs = []\n    pairs_for_elem = []\n\n    # Loop through all the elements of the array\n    for element in arr:\n        # Check to see if we have found a pair before\n        if len(pairs) > 0:\n            # If we have found a pair before, check if the pair is the same as the previous one\n            if len(pairs) == len(pairs_for_elem) and pairs[-1] == element:\n                # If it is the same, remove the previous pair and add the current pair\n                pairs.pop()\n                pairs.append(element)\n            else:\n                # If it isn't the same, add the current pair to the list\n                pairs_for_elem.append(element)\n        else:\n            # If we haven't found a pair before, add the current pair to the list\n            pairs_for_elem.append(element)\n\n    # Print the number of pairs\n    print(len(pairs))\n\n# Test Cases\narr = [1, 2, 3, 4, 5, 6]\nk = 3\ndistinct_pairs(arr, k)\n\narr = [1, 2, 2, 2, 2, 2, 2, 2]\nk = 3\ndistinct_pairs(arr, k)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nk = 3\ndistinct_pairs(",
      -15.859375
    ],
    [
      "class Solution(object):\n    def findPairs(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(arr) < 2:\n            return 0\n        n = len(arr)\n        d = {}\n        for i in range(n):\n            for j in range(i+1, n):\n                if arr[i]!= arr[j]:\n                    d[(i, j)] = d.get((i, j), 0) + 1\n        res = 0\n        for i in d.keys():\n            if d[i] == k:\n                res += 1\n        return res\n\n# Note:\n# Given arr = [1, 2, 3, 4]\n# k = 2\n# return: 2\n# Given arr = [1, 2, 3, 4, 5]\n# k = 3\n# return: 4",
      -16.15625
    ],
    [
      "# https://oj.leetcode.com/problems/distinct-pairs-with-dif-k-in-an-array/\n# tags: easy, array, pair, hashmap\n\n\"\"\"\n  Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\n  \n  For example,\n  Given nums = [1,1,2,3,3,4] and k = 2,\n\n  Window position                Max\n  -------------------------     -----\n  [1,1,2,3]                     3\n  [1,1,3,4]                     4\n  [2,3,3,4]                     4\n  [1,2,3,4]                     3\n  [1,2,4,4]                     2\n  [1,3,4,4]                     2\n  [2,3,4,4]                     2\n  [1,2,3,3]                     3\n  [1,2,3,4]                     4\n  [1,2,4,4]                     4\n  [1,3,4,4]                     4\n  [2,3,4,4]                     4\n  \n  The output should be the list of distinct pairs [(1,2), (2,3), (3,4)].\n  \n  Note:\n  You may assume k is always valid, 1 \u2264 k \u2264 input array's size for non-empty array.\n\"\"\"\n\nclass Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in xrange(len(nums) - k + 1):\n            res += (nums[i:i+k] == nums[i:i+k-1: -1])\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().countPairs([1,1,2,3,3,4], 2)",
      -16.53125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}