{
  "problem": {
    "task_id": "MBPP/408",
    "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
    "test_list": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ],
    "challenge_test_list": [],
    "problem_id": 397
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "#!/bin/python\n\n# https://www.hackerrank.com/challenges/sorted-pairs\n\nimport sys\nimport collections\n\n# Complete the sortedPairs function below.\ndef sortedPairs(nums1, nums2):\n    # Complete this function\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                pairs.append((nums1[i], nums2[j]))\n    return pairs\n\nif __name__ == '__main__':\n    nums1 = sys.stdin.readline().strip().split(' ')\n    nums2 = sys.stdin.readline().strip().split(' ')\n    nums1 = [int(i) for i in nums1]\n    nums2 = [int(i) for i in nums2]\n    result = sortedPairs(nums1, nums2)\n    print(' '.join(str(i) for i in result))",
      2.45703125
    ],
    [
      "#!/bin/python\n# @author kasun\n# @date   Aug, 2016\n\nfrom __future__ import print_function\nimport numpy as np\n\ndef findKPairs(arr1, arr2, k):\n    # initialize a list for storing the pairs\n    pairList = []\n\n    # iterate over arr1 and arr2\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            # if the two elements are same, add the pair to the list\n            if arr1[i] == arr2[j]:\n                pairList.append([arr1[i], arr2[j]])\n\n    # return the number of pairs\n    return len(pairList)\n\ndef main():\n    # arr1 = [1, 2, 3, 4, 5]\n    # arr2 = [1, 2, 3, 5]\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [1, 2, 3, 5, 6]\n    k = 3\n\n    print(\"Number of pairs found: \", findKPairs(arr1, arr2, k))\n\nif __name__ == '__main__':\n    main()",
      2.455078125
    ],
    [
      "def find_pairs(a, b, k):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    res = []\n    if len(a) < k or len(b) < k:\n        return res\n\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                res.append([a[i], b[j]])\n\n    return res\n\nif __name__ == '__main__':\n    print(find_pairs([1, 2, 3], [4, 5, 6], 2))",
      1.0458984375
    ],
    [
      "from collections import Counter\n\n# @include\ndef find_k_pairs(first_arr, second_arr, k):\n    # Count the number of pairs.\n    return Counter(first_arr) & Counter(second_arr) == Counter(first_arr)\n# @exclude\n\n\ndef main():\n    first_arr = [1, 2, 3]\n    second_arr = [1, 3, 4]\n    print(find_k_pairs(first_arr, second_arr, 2))\n\n\nif __name__ == '__main__':\n    main()",
      0.80615234375
    ],
    [
      "\"\"\"\nExample 1:\n\nInput:\nnums1 = [1, 2], nums2 = [3, 4, 5, 6]\nk = 3\nOutput:\n[1, 2, 3, 4]\n\nExample 2:\n\nInput:\nnums1 = [1, 2], nums2 = [1, 2, 3, 4]\nk = 4\nOutput:\n[1, 2, 3, 4]\n\nExample 3:\n\nInput:\nnums1 = [1, 2], nums2 = [1, 2, 3, 4, 5, 6]\nk = 7\nOutput:\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\nclass Solution(object):\n    def kSmallestPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # sort by k-1\n        nums1.sort()\n        nums2.sort()\n\n        # check k\n        if k > len(nums1) or k > len(nums2):\n            return []\n        else:\n            # find k-1 smallest pairs\n            result = []\n            for i in xrange(k-1):\n                result.append(nums1[i])\n                result.append(nums2[i])\n\n            return result",
      0.79736328125
    ],
    [
      "class Solution(object):\n    def kSubsets(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n        if len(nums1) == 0:\n            return 0\n        if len(nums2) == 0:\n            return 0\n        return self.helper(nums1, nums2, 0, k)\n\n    def helper(self, nums1, nums2, start, k):\n        if k == 0:\n            return 1\n        if len(nums1) == 0:\n            return 0\n        if len(nums2) == 0:\n            return 0\n        if start == k:\n            return 1\n        if start == len(nums1) + len(nums2):\n            return 0\n        return self.helper(nums1, nums2, start + 1, k - 1) + self.helper(nums1, nums2, start + 1, k - 1)",
      0.348876953125
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n     def __init__(self, x):\n         self.val = x\n         self.left = None\n         self.right = None\n\"\"\"\n\n# Definition for a binary tree node.\nclass TreeNode:\n     def __init__(self, x):\n         self.val = x\n         self.left = None\n         self.right = None\n\nclass Solution:\n    def findKthSmallest(self, root: TreeNode, k: int) -> int:\n        def helper(root, k):\n            if not root:\n                return 0\n            if k == 1:\n                return 1\n            return max(helper(root.left, k-1) + 1, helper(root.right, k-1) + 1)\n        return helper(root, k)",
      0.296875
    ],
    [
      "# https://www.hackerrank.com/challenges/pair-distance/problem\n\nimport math\n\ndef find_pairs(arr1, arr2):\n    # Write your code here\n    n = len(arr1)\n    pairs = 0\n    for i in range(n):\n        for j in range(n):\n            if arr1[i] == arr2[j]:\n                pairs += 1\n    return pairs\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_pairs(arr1, arr2))",
      0.005451202392578125
    ],
    [
      "def pair_number(first, second, k):\n    pairs = 0\n    for i in range(len(first)):\n        for j in range(len(second)):\n            if first[i] == second[j]:\n                pairs += 1\n    return pairs\n\n# Your code here\n\n# Sample Input:\n# [1,2,3,4,5]\n# [1,2,3,4,5,6]\n# k = 3\n#\n# Sample Output:\n# 4 pairs\n# 1 pair\n# 0 pairs\n#\n# Explanation:\n# There are 4 pairs.\n# There is 1 pair.\n# There are 0 pairs.",
      -0.26123046875
    ],
    [
      "# I don't have time to write this solution yet.\n\nimport sys\n\ndef find_k_pairs(first, second, k):\n    # I don't have time to write this solution yet.\n    pass\n\nif __name__ == \"__main__\":\n    first = [1,2,3,4,5,6,7,8]\n    second = [1,4,5,7,8]\n    k = 3\n    find_k_pairs(first, second, k)",
      -0.61279296875
    ],
    [
      "\"\"\"\nExample:\nGiven first array = [1, 2, 3, 4, 5],\nsecond array = [3, 4, 5],\nk = 2\nreturn [1, 3]\n\"\"\"\n\n# https://leetcode.com/problems/pairs-with-dif-k-in-the-array/description/\nclass Solution(object):\n    def pairsWithKDistinct(self, first, second, k):\n        \"\"\"\n        :type first: List[int]\n        :type second: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if len(first) < k:\n            return []\n        result = []\n        for i in range(len(first)):\n            if i < k:\n                result.append(first[i])\n            elif i == k:\n                result.append(first[i-1])\n            elif i > k:\n                result.append(second[i-k-1])\n        return result",
      -0.6171875
    ],
    [
      "import math\n\ndef find_k_pairs(array1, array2, k):\n    \"\"\"\n    :type array1: List[int]\n    :type array2: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(array1) - k + 1):\n        for j in range(len(array2) - k + 1):\n            if i == j:\n                continue\n            if array1[i] == array2[j]:\n                count += 1\n    return count\n\ndef main():\n    array1 = [1,2,3,4,5]\n    array2 = [1,2,3,4,5,6]\n    k = 3\n    print(find_k_pairs(array1, array2, k))\n\nif __name__ == '__main__':\n    main()",
      -0.61962890625
    ],
    [
      "def find_pairs(arr1, arr2):\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    arr1 = [1,2,3,4,5]\n    arr2 = [1,2,3,4]\n    print find_pairs(arr1, arr2)",
      -0.6201171875
    ],
    [
      "import random\n\ndef find_pairs(arr1, arr2, k):\n    # create a random list of k elements\n    rand_list = []\n    for i in range(k):\n        rand_list.append(random.randint(0, len(arr1) - 1))\n    \n    # create a list of pairs\n    pairs = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                pairs.append((i, j))\n    \n    # return the number of pairs\n    return len(pairs)\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr2 = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(find_pairs(arr1, arr2, 4))",
      -0.73876953125
    ],
    [
      "def get_pairs(arr1, arr2, k):\n    pairs = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                pairs.append((i,j))\n    return pairs[:k]\n\n# your code goes here\nprint get_pairs([1,2,3,4,5], [2,3,5,6,7], 2)",
      -0.75048828125
    ],
    [
      "# https://leetcode.com/problems/find-k-pairs-with-same-element-in-both-sides/discuss/175955/Python-O(n^2)-Java-O(n^2)-C++-O(n^2)-Python-O(n^2)-C++-O(n^2)\n\n# 1ms 100%\nclass Solution(object):\n    def kPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums1 or not nums2 or k <= 0:\n            return 0\n        n1 = len(nums1)\n        n2 = len(nums2)\n        dp = [[0 for j in range(n2+1)] for i in range(n1+1)]\n        for i in range(n1+1):\n            for j in range(n2+1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif i == n1 or j == n2:\n                    dp[i][j] = 0\n                elif nums1[i-1] == nums2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[n1][n2]\n\n# 2ms 100%\nclass Solution(object):\n    def kPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums1 or not nums2 or k <= 0:\n            return 0\n        n1 = len(nums1)\n        n2 = len(nums2)\n        dp = [[0 for j in range",
      -0.76611328125
    ],
    [
      "import unittest\n\nfrom solution import kPairs\n\n\nclass TestKPairs(unittest.TestCase):\n    def test_kPairs(self):\n        self.assertEqual(kPairs([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"c\"]), 3)\n        self.assertEqual(kPairs([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\"]), 3)\n        self.assertEqual(kPairs([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"d\"]), 2)\n        self.assertEqual(kPairs([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"c\", \"d\"]), 2)\n        self.assertEqual(kPairs([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"c\", \"e\"]), 0)\n        self.assertEqual(kPairs([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"c\", \"d\", \"e\"]), 0)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.78662109375
    ],
    [
      "# Time:  O(n^2)\n# Space: O(1)\n\nclass Solution(object):\n    def countPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if i == j:\n                    continue\n                if nums1[i] == nums2[j]:\n                    res += 1\n        return res % k",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/k-number-of-pairs/problem\n\n#!/usr/bin/python\n\nn = int(input().strip())\n\narr1 = []\narr2 = []\n\nfor i in range(n):\n    arr1.append(list(input().strip()))\n    arr2.append(list(input().strip()))\n\nfor i in range(n):\n    for j in range(n):\n        if arr1[i] == arr2[j]:\n            arr2[j] = arr1[i]\n\nfor i in range(n):\n    print(arr2[i])",
      -0.85693359375
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/count-pairs\n\nimport os\nimport sys\n\n# Complete the countPairs function below.\ndef countPairs(arr1, arr2):\n    # your code goes here\n    return 0\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    T = int(input())\n\n    for t in range(T):\n        arr1 = input().split(' ')\n\n        arr2 = input().split(' ')\n\n        k = int(input())\n\n        pairs = countPairs(arr1, arr2)\n\n        fptr.write(str(pairs) + '\\n')\n\n    fptr.close()",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/two-arrays/problem\n\nimport sys\n\narr1 = [int(x) for x in sys.stdin.readline().split()]\narr2 = [int(x) for x in sys.stdin.readline().split()]\n\ncount = 0\n\nfor i in range(len(arr1)):\n    for j in range(len(arr2)):\n        if arr1[i] == arr2[j]:\n            count += 1\n\nprint(count)",
      -0.85791015625
    ],
    [
      "import numpy as np\nimport math\n\ndef find_pairs(arr1, arr2):\n    \"\"\"\n    :param arr1: List\n    :param arr2: List\n    :return: int\n    \"\"\"\n    return math.ceil(len(arr1) / 2)\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3]\n    arr2 = [4, 5, 6]\n    print find_pairs(arr1, arr2)",
      -0.85791015625
    ],
    [
      "def find_pairs(first_array, second_array, k):\n    \"\"\"\n    :type first_array: List[int]\n    :type second_array: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n\n    if len(first_array) < 1 or len(second_array) < 1:\n        return result\n\n    if k < 1:\n        return result\n\n    if len(first_array) < k:\n        return result\n\n    if len(second_array) < k:\n        return result\n\n    for i in range(0, len(first_array) - k + 1):\n        for j in range(0, len(second_array) - k + 1):\n            if first_array[i] == second_array[j]:\n                result.append([first_array[i], second_array[j]])\n\n    return result",
      -0.85791015625
    ],
    [
      "#!/bin/python\n\n\"\"\"\nInput:\nk = 5\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4, 5]\n\nOutput:\n3\n\"\"\"\n\n# https://www.hackerrank.com/challenges/k-pairs/problem\n\ndef find_k_pairs(k, arr1, arr2):\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n\n    return count\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4, 5]\nk = 5\n\nprint(find_k_pairs(k, arr1, arr2))",
      -0.85791015625
    ],
    [
      "import unittest\n\n# @include\ndef find_k_pairs(A, B, k):\n    return [x for x in A if x in B]\n# @exclude\n\n\nclass Test(unittest.TestCase):\n    def test_example(self):\n        self.assertEqual([1], find_k_pairs([1], [2], 1))\n        self.assertEqual([1, 2], find_k_pairs([1, 2], [1, 2], 2))\n        self.assertEqual([1, 2, 3], find_k_pairs([1, 2, 3], [1, 2], 2))\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.85791015625
    ],
    [
      "def pairs(arr1, arr2, k):\n    return sum(i for i in xrange(k) if arr1[i] == arr2[i])\n\nprint pairs([1, 2, 3, 4], [4, 5], 3)",
      -0.85791015625
    ],
    [
      "# https://oj.leetcode.com/problems/pairs-with-diferent-k/\n\n\nclass Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        dic = {}\n        for n in nums1:\n            dic[n] = dic.get(n, 0) + 1\n        for n in nums2:\n            dic[n] = dic.get(n, 0) - 1\n\n        pairs = []\n        for n in dic:\n            if dic[n] == 0:\n                continue\n            pairs.append([n, dic[n]])\n        return pairs",
      -0.85791015625
    ],
    [
      "from collections import defaultdict\n\nclass Solution(object):\n    def findKPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        dic = defaultdict(list)\n        for i in xrange(len(nums1)):\n            dic[nums1[i]].append(i)\n\n        for i in xrange(len(nums2)):\n            if nums2[i] in dic:\n                dic[nums2[i]].append(i)\n\n        result = []\n        for i in xrange(k):\n            if len(dic[nums1[i]]) == 1:\n                result.append([nums1[i], nums2[dic[nums1[i]][0]]])\n            else:\n                for j in xrange(len(dic[nums1[i]])):\n                    result.append([nums1[i], nums2[dic[nums1[i]][j]]])\n\n        return result",
      -0.85791015625
    ],
    [
      "def pair_count(arr1, arr2):\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [5, 6, 7, 8, 9]\n    print pair_count(arr1, arr2)\n    print pair_count(arr2, arr1)",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/k-pairs/problem\n\ndef findKPairs(arr1, arr2, k):\n    # write your code here\n    pairs = []\n    n = len(arr1)\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if arr1[i] == arr2[j]:\n                    pairs.append([arr1[i], arr2[j]])\n                    if len(pairs) == k:\n                        break\n    return pairs\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr2 = [1, 2, 3, 4, 5]\n    k = 3\n    pairs = findKPairs(arr1, arr2, k)\n    print(pairs)",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/pair-distribution/\n# time:O(n^2)\n# space:O(n^2)\n# score:100ms\nclass Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (m+1) for _ in range(n+1)]\n        for i in range(n):\n            for j in range(m):\n                if nums1[i] == nums2[j]:\n                    dp[i+1][j+1] = dp[i][j] + 1\n                else:\n                    dp[i+1][j+1] = max(dp[i][j], dp[i+1][j])\n        return dp[n][m]",
      -0.8583984375
    ],
    [
      "def findPairs(a, b):\n    count = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [2, 4, 6, 8, 10]\n    print(findPairs(a, b))",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/k-pairs/problem\n\nimport sys\n\nn = int(input().strip())\n\narr1 = list(map(int, input().strip().split(' ')))\narr2 = list(map(int, input().strip().split(' ')))\n\nk = int(input().strip())\n\n# This is a simple implementation\npairs = 0\n\nfor i in range(0, n):\n    for j in range(0, n):\n        if arr1[i] == arr2[j]:\n            pairs += 1\n\nprint(pairs)",
      -0.8583984375
    ],
    [
      "import time\nfrom random import randint\n\nstart_time = time.time()\n\n\ndef find_k_pairs(arr1, arr2, k):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    res = []\n    for i in range(k):\n        res.append([])\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                res[i % k].append(j)\n    return res\n\n\ndef test_find_k_pairs():\n    arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 4\n    start_time = time.time()\n    res = find_k_pairs(arr1, arr2, k)\n    end_time = time.time()\n    print('{} secs'.format(end_time - start_time))\n    assert res == [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]\n\n\ndef main():\n    test_find_k_pairs()\n\nif __name__ == '__main__':\n    main()\n    # test_find_k_pairs()",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef find_k_pairs(arr1, arr2, k):\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 < n2:\n        return 0\n    else:\n        cnt = 0\n        for i in range(n1):\n            for j in range(n2):\n                if arr1[i] == arr2[j]:\n                    cnt += 1\n                    if cnt >= k:\n                        return i + 1\n        return 0\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4]\n    arr2 = [2, 3, 4]\n    k = 2\n    cnt = find_k_pairs(arr1, arr2, k)\n    print cnt",
      -0.8583984375
    ],
    [
      "#!/usr/bin/python\n\nimport math\n\ndef find_pairs(arr1, arr2, k):\n    if k == 0:\n        return 0\n    else:\n        return sum(find_pairs(arr1, arr2, k - 1) + find_pairs(arr2, arr1, k - 1))\n\narr1 = [1, 2, 3, 4, 5, 6]\narr2 = [1, 2, 3, 4, 5, 6]\n\nprint(find_pairs(arr1, arr2, 6))",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef pair_pairs(arr1, arr2):\n    return math.ceil(len(arr1) / 2) * math.ceil(len(arr2) / 2)\n\n\nif __name__ == '__main__':\n    print pair_pairs([1, 2, 3, 4], [4, 3, 2, 1])",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/pairs-with-distinct-values-sum-of-k/\n\nclass Solution(object):\n    def pairsWithDistinct(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return sum(1 for i in range(k) if nums1[i]!= nums2[i])",
      -0.8583984375
    ],
    [
      "def count_pairs(arr1, arr2):\n\tarr1_len = len(arr1)\n\tarr2_len = len(arr2)\n\t# print(arr1_len, arr2_len)\n\tif arr1_len == 0 or arr2_len == 0:\n\t\treturn 0\n\telif arr1_len == 1 or arr2_len == 1:\n\t\treturn 1\n\telse:\n\t\ttotal = 0\n\t\tfor i in range(arr1_len):\n\t\t\tfor j in range(arr2_len):\n\t\t\t\tif arr1[i] == arr2[j]:\n\t\t\t\t\ttotal += 1\n\t\t\t\t\tbreak\n\t\treturn total\n\nprint(count_pairs([1,2,3], [4,5]))",
      -0.8583984375
    ],
    [
      "from collections import defaultdict\n\ndef get_pairs(arr1, arr2):\n    d = defaultdict(list)\n    for i, j in zip(arr1, arr2):\n        d[i].append(j)\n    return d\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 3, 5, 7]\n    print get_pairs(arr1, arr2)",
      -0.8583984375
    ],
    [
      "from collections import defaultdict\n\nclass Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @param {integer} k\n    # @return {integer}\n    def findKPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dic = defaultdict(list)\n        for i in range(len(nums1)):\n            dic[nums1[i]].append(nums2[i])\n        return sum(len(dic[i]) for i in range(1, k + 1))\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findKPairs([1, 2, 3], [2, 3, 4], 1)",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef k_pairs(arr1, arr2, k):\n    n = len(arr1)\n    for i in range(n):\n        for j in range(k):\n            if arr1[i] == arr2[j]:\n                return i + 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [6, 7, 8, 9]\n    k = 3\n    print(k_pairs(arr1, arr2, k))",
      -0.8583984375
    ],
    [
      "from collections import defaultdict\n\ndef kPairs(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    k = len(arr1)\n    pairs = [[] for _ in range(k)]\n    dp = defaultdict(list)\n\n    for i in range(k):\n        for j in range(k):\n            if i == j:\n                continue\n            if arr1[i] == arr2[j]:\n                dp[arr1[i]].append(arr2[j])\n    for i in range(k):\n        pairs[i] = dp[arr1[i]]\n\n    return pairs\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [2, 4, 6, 8, 10]\n    k = 2\n    pairs = kPairs(arr1, arr2)\n    print(pairs)",
      -0.85888671875
    ],
    [
      "def get_pairs(arr1, arr2, k):\n    pairs = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if i == j:\n                continue\n            if arr1[i] == arr2[j]:\n                pairs.append((arr1[i], arr2[j]))\n    return pairs\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4, 5]\n    pairs = get_pairs(arr1, arr2, 4)\n    print pairs",
      -0.85888671875
    ],
    [
      "# http://www.geeksforgeeks.org/find-k-pairs-that-consist-of-one-element-from-first-array-and-one-element-from-second-array/\n\ndef find_k_pairs_1(arr1, arr2, k):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    # k pairs can be formed from two different elements\n    pairs = [[], []]\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if i == j:\n                continue\n            if arr1[i] == arr2[j]:\n                pairs[0].append(arr1[i])\n                pairs[1].append(arr2[j])\n    return pairs\n\ndef find_k_pairs_2(arr1, arr2, k):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    # k pairs can be formed from two different elements\n    pairs = [[], []]\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if i == j:\n                continue\n            if arr1[i] == arr2[j]:\n                pairs[0].append(arr1[i])\n                pairs[1].append(arr2[j])\n    return pairs\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4, 5]\n    print(find_k_pairs_2(arr1, arr2, 2))\n    print(find_k_pairs_1(arr1, arr2, 2))",
      -1.3310546875
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef k_pairs(arr1, arr2, k):\n    if k == 0:\n        return 0\n    \n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    pairs = 0\n    for i in xrange(n1):\n        for j in xrange(n2):\n            if arr1[i] == arr2[j]:\n                pairs += 1\n    \n    return pairs\n\ndef main():\n    arr1 = list(map(int, sys.stdin.readline().strip().split()))\n    arr2 = list(map(int, sys.stdin.readline().strip().split()))\n    \n    k = int(sys.stdin.readline().strip())\n    \n    print k_pairs(arr1, arr2, k)\n\nif __name__ == \"__main__\":\n    main()",
      -1.4423828125
    ],
    [
      "import unittest\n\n# Note:\n# The first array is already sorted in ascending order.\n# The second array is already sorted in ascending order.\n# The first array and the second array are both unique.\n\n# Note:\n# The length of first array and second array is less than 1000.\n# The length of first array and the length of second array is less than 1000.\n# The sum of elements in first array is less than 100000.\n# The sum of elements in second array is less than 100000.\n# The sum of elements in both arrays is less than 100000.\n# The sum of elements in both arrays is less than 100000.\n# The sum of elements in both arrays is less than 100000.\n# The sum of elements in both arrays is less than 100000.\n\n\nclass Solution(object):\n    def findPairs(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        # write your code here\n        nums1.sort()\n        nums2.sort()\n        result = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    result.append([i, j])\n        return result\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/find-pairs-of-one-elements-from-two-sorted-arrays/solution/\n\n# 0ms 100%\nclass Solution {\n    public List<List<Integer>> findPairs(int[] nums1, int[] nums2) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0) return",
      -1.546875
    ],
    [
      "from collections import defaultdict\n\nclass Solution(object):\n    def numPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n        nums1.sort()\n        nums2.sort()\n        dic = defaultdict(list)\n        for i in xrange(len(nums1)):\n            dic[nums1[i]].append(nums2[i])\n        return sum([len(v) for v in dic.values() if len(v) == k])",
      -1.837890625
    ],
    [
      "import time\n\nstart_time = time.time()\n\n\ndef find_pairs(arr1, arr2, k):\n    # write your code here\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [2, 3, 4, 5]\n    print find_pairs(arr1, arr2, 2)\n    print \"Time taken: {}\".format(time.time() - start_time)",
      -2.10546875
    ],
    [
      "#!/usr/bin/env python\n\n# import the required modules\nimport sys\nsys.path.append('..')\n\nfrom itertools import izip\n\n# the main function\ndef find_pairs(arr1, arr2, k):\n\t# create an empty list to store the pairs\n\tpairs = []\n\t# iterate over the first array\n\tfor i in range(len(arr1)):\n\t\t# create a list for the first element\n\t\tfirst_elem = [arr1[i]]\n\t\t# iterate over the second array\n\t\tfor j in range(len(arr2)):\n\t\t\t# create a list for the second element\n\t\t\tsecond_elem = [arr2[j]]\n\t\t\t# find the pair\n\t\t\tpair = list(izip(first_elem, second_elem))\n\t\t\t# add the pair to the pairs list\n\t\t\tpairs.append(pair)\n\t# return the number of pairs\n\treturn len(pairs)\n\n# test the function\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4, 5, 6]\nprint find_pairs(arr1, arr2, 3)\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4, 5, 6]\nprint find_pairs(arr1, arr2, 4)",
      -2.15625
    ],
    [
      "import random\nimport math\n\ndef pairs(arr1, arr2, k):\n    if not arr1 or not arr2:\n        return\n\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n                if count == k:\n                    return\n    return\n\ndef main():\n    arr1 = [1, 2, 3]\n    arr2 = [1, 2, 3]\n    arr3 = [4, 5, 6]\n    arr4 = [7, 8, 9]\n\n    for i in range(10):\n        arr1.append(random.randint(0, 10))\n        arr2.append(random.randint(0, 10))\n        arr3.append(random.randint(0, 10))\n        arr4.append(random.randint(0, 10))\n\n    print pairs(arr1, arr2, 3)\n    print pairs(arr1, arr3, 3)\n    print pairs(arr2, arr3, 3)\n    print pairs(arr3, arr4, 3)\n\nif __name__ == '__main__':\n    main()",
      -2.173828125
    ],
    [
      "import unittest\nfrom collections import defaultdict\nfrom math import ceil\n\n\nclass Solution(object):\n    def pairs(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        nums1.sort()\n        nums2.sort()\n        cnt = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                cnt += 1\n        return cnt\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairs-with-one-element-from-each-end/solution/\n\nApproach #1: Sort [1,n] and [n,n+m]\nComplexity Analysis\nTime Complexity: O(n+m), where n is the length of the first array and m is the length of the second array.\nSpace Complexity: O(1).\n\n# 7ms 92.37%\nclass Solution {\n    public int pairs(int[] nums1, int[] nums2) {\n        if (nums1.length == 0 || nums2.length == 0) {\n            return 0;\n        }\n        Arrays.sort(nums1);\n        Arrays.sort(nums2);\n        int count = 0;\n        for (int i = 0; i < nums1.length; i++) {\n            if (nums1[i] == nums2[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public int pairs(int[] nums1, int[] nums2) {\n        if (nums1 == null || nums",
      -2.365234375
    ],
    [
      "#!/usr/bin/env python\n\nimport unittest\n\nfrom collections import Counter\n\n\nclass Solution(object):\n    def findKPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        c = Counter(nums1)\n        c.update(nums2)\n        return len([(v, k) for v in c.elements() if v == k])\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pairs-with-same-sum/solution/\n\n# DFS\n# 7ms 100%\nclass Solution {\n    public int findKPairs(int[] nums1, int[] nums2, int k) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums1.length; i++) {\n            map.put(nums1[i], map.getOrDefault(nums1[i], 0) + 1);\n        }\n        for (int i = 0; i < nums2.length; i++) {\n            map.put(nums2[i], map.getOrDefault(nums2[i], 0) - 1);\n        }\n        return k <= map.size()? map.size() : 0;\n    }\n}\n\n# DFS + HashMap\n# 2ms 100%\nclass Solution {\n    public int findKPairs(int[] nums1, int[] nums2, int k) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums1.length; i++) {\n            map.put(nums1[i], map.getOrDefault(nums1[i], 0) + 1);",
      -2.744140625
    ],
    [
      "class Solution(object):\n    def findKPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums1)\n        m = len(nums2)\n        if n > m:\n            n = m\n        if n == 0 or m == 0 or k == 0:\n            return 0\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if i == 1 or j == 1:\n                    dp[i][j] = 1\n                elif nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]",
      -2.759765625
    ],
    [
      "def find_pairs(first, second, k):\n    count = 0\n    for i in range(len(first)):\n        for j in range(len(second)):\n            if first[i] == second[j]:\n                count += 1\n                if count == k:\n                    return i\n    return -1\n\nif __name__ == \"__main__\":\n    first = [1, 2, 3]\n    second = [4, 5, 6]\n    k = 3\n    print find_pairs(first, second, k)",
      -2.841796875
    ],
    [
      "def find_pairs(arr1, arr2):\n    # write your code here\n    if len(arr1) < 1 or len(arr2) < 1:\n        return 0\n    total_pairs = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                total_pairs += 1\n    return total_pairs\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [5, 6, 7, 8]\n    print find_pairs(arr1, arr2)\n    arr1 = [1, 2, 3, 4]\n    arr2 = [1, 2]\n    print find_pairs(arr1, arr2)\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8]\n    print find_pairs(arr1, arr2)\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr2 = [5, 6, 7, 8]\n    print find_pairs(arr1, arr2)",
      -3.1953125
    ],
    [
      "from collections import defaultdict\n\n\nclass Solution(object):\n    def kSubsets(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        res = defaultdict(int)\n        for i in range(len(nums1) + 1):\n            for j in range(len(nums2) + 1):\n                if i == 0:\n                    res[(nums1[i-1], nums2[j-1])] += 1\n                elif j == 0:\n                    res[(nums1[i-1], nums2[j-1])] += 1\n                else:\n                    if nums1[i-1] == nums2[j-1]:\n                        res[(nums1[i-1], nums2[j-1])] += 1\n                    else:\n                        res[(nums1[i-1], nums2[j-1])] += 1\n        return sum(res.itervalues())\n\n\nif __name__ == \"__main__\":\n    nums1 = [1, 2, 3]\n    nums2 = [1, 3, 5]\n    nums1.sort()\n    nums2.sort()\n    nums1.append(4)\n    nums1.append(5)\n    print Solution().kSubsets(nums1, nums2, 2)",
      -3.2109375
    ],
    [
      "from itertools import combinations\n\ndef find_pairs(first, second, k):\n    first_pairs = [combination(first, k) for i in range(k)]\n    second_pairs = [combination(second, k) for i in range(k)]\n    return len(set(first_pairs).intersection(set(second_pairs)))\n\ndef combination(seq, k):\n    return [seq[i:i+k] for i in range(len(seq))]\n\nprint(find_pairs([1, 2, 3, 4, 5], [3, 4, 5], 2))\nprint(find_pairs([1, 2, 3, 4, 5], [3, 4, 5], 5))\nprint(find_pairs([1, 2, 3, 4, 5], [3, 4, 5], 1))\nprint(find_pairs([1, 2, 3, 4, 5], [3, 4, 5], 0))\nprint(find_pairs([1, 2, 3, 4, 5], [3, 4, 5], 6))\nprint(find_pairs([1, 2, 3, 4, 5], [3, 4, 5], 7))\nprint(find_pairs([1, 2, 3, 4, 5], [3, 4, 5], 8))\nprint(find_pairs([1, 2, 3, 4, 5], [3, 4, 5], 9))",
      -3.361328125
    ],
    [
      "def find_pairs(arr1, arr2, k):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if k == 0:\n        return 0\n    \n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    dp = [[0] * (k+1) for i in range(n1+1)]\n    \n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if arr1[i-1] == arr2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n1][n2]\n\n# Your code here\narr1 = [1, 2, 3]\narr2 = [3, 4, 5, 6]\nk = 1\nprint(find_pairs(arr1, arr2, k))",
      -3.373046875
    ],
    [
      "from collections import defaultdict\nfrom itertools import combinations\n\n\ndef pair_count(first, second):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :rtype: int\n    \"\"\"\n    # for each pair of elements, return the number of pairs\n    return sum(1 for element in first if element in second)\n\n\ndef pair_count_2(first, second):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :rtype: int\n    \"\"\"\n    # for each pair of elements, return the number of pairs\n    return sum(1 for element in first if second.count(element) > 0)\n\n\ndef pair_count_3(first, second):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :rtype: int\n    \"\"\"\n    # for each pair of elements, return the number of pairs\n    return sum(1 for element in first if second.count(element) > 0)\n\n\ndef pair_count_4(first, second):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :rtype: int\n    \"\"\"\n    # for each pair of elements, return the number of pairs\n    return sum(1 for element in first if second.count(element) > 0)\n\n\ndef pair_count_5(first, second):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :rtype: int\n    \"\"\"\n    # for each pair of elements, return the number of pairs\n    return sum(1 for element in first if second.count(element) > 0)\n\n\ndef pair_count_6(first, second):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :rtype: int\n    \"\"\"\n    # for each pair of elements, return the number of pairs\n    return sum(1 for element in first if second.count(element) > 0)\n\n\ndef pair_count_7(first, second):\n    \"\"\"\n    :type first: List[int]",
      -3.666015625
    ],
    [
      "#!/bin/python3\n\ndef find_pairs(arr1, arr2, k):\n    # write your code here\n    if len(arr1)!= len(arr2):\n        return []\n\n    pairs = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j] and i!= j:\n                pairs.append([arr1[i], arr2[j]])\n    return pairs\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3]\n    arr2 = [1, 2, 3, 4]\n    k = 2\n    print(find_pairs(arr1, arr2, k))",
      -3.763671875
    ],
    [
      "# https://leetcode.com/problems/k-pairs-with-one-element-from-each-array/discuss/451168/Java-O(n)\n# \n# O(n)\n# O(n)\nclass Solution:\n    def numKPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        if not nums1 or not nums2 or len(nums1)!= len(nums2):\n            return 0\n        \n        # k - 1 pairs\n        n = len(nums1)\n        dp = [0 for _ in range(n)]\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(0, i):\n                dp[i] += dp[j]\n            dp[i] += nums1[i]\n        \n        # k - 2 pairs\n        for i in range(1, n):\n            for j in range(i+1, n):\n                dp[i] += dp[j]\n                dp[i] += min(nums1[i], nums1[j])\n                \n        return dp[-1]",
      -3.841796875
    ],
    [
      "# https://leetcode.com/problems/find-k-closest-pair-of-arrays/discuss/105639/Python-O(n^2)-Java-O(n)\n# https://leetcode.com/problems/find-k-closest-pair-of-arrays/discuss/105640/Python-O(n^2)-Java-O(n)\n# https://leetcode.com/problems/find-k-closest-pair-of-arrays/discuss/105640/Java-O(n^2)-Python-O(n)\n# https://leetcode.com/problems/find-k-closest-pair-of-arrays/discuss/105640/Java-O(n^2)-Python-O(n)\n# https://leetcode.com/problems/find-k-closest-pair-of-arrays/discuss/105640/Java-O(n^2)-Python-O(n)\n\nclass Solution(object):\n    def kClosestPairs(self, arr1, arr2, k):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if len(arr1) < k or len(arr2) < k:\n            return []\n        if len(arr1) == k:\n            return [[i, arr2[i]] for i in range(len(arr2))]\n\n        if len(arr2) == k:\n            return [[arr1[i], i] for i in range(len(arr1))]\n\n        dp = [[0] * len(arr2) for _ in range(len(arr1))]\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                if arr1[i] == arr2[j]:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1]",
      -3.97265625
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport time\nimport random\n\ndef k_pairs(arr1, arr2):\n    \"\"\"\n    Find k number of pairs which consist of one element from the first array and one element from the second array.\n\n    :param arr1: first array\n    :param arr2: second array\n    :return: a list of pairs\n    \"\"\"\n    result = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                result.append((arr1[i], arr2[j]))\n    return result\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(k_pairs(arr1, arr2))\n    #arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,",
      -4.0625
    ],
    [
      "# First array is the first array\n# Second array is the second array\n# Return the number of pairs\n\ndef count_pairs(arr1, arr2):\n    count = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4]\n    arr2 = [5, 6, 7, 8]\n    print(count_pairs(arr1, arr2))",
      -4.1953125
    ],
    [
      "# https://leetcode.com/problems/two-sum/\n\n\nclass Solution:\n    # @return an integer\n    def twoSum(self, nums1, nums2, k):\n        table = {}\n        for i in range(len(nums1)):\n            if nums1[i] in table:\n                j = table[nums1[i]]\n                if j!= i:\n                    return i, j\n            else:\n                table[nums1[i]] = i\n\n        for i in range(len(nums2)):\n            if nums2[i] in table:\n                j = table[nums2[i]]\n                if j!= i:\n                    return i, j\n            else:\n                table[nums2[i]] = i\n\n        return -1\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums1 = [1, 2, 3, 4, 5]\n    nums2 = [2, 3, 6, 7, 8]\n    print(s.twoSum(nums1, nums2, 1))\n    print(s.twoSum(nums1, nums2, 2))\n    print(s.twoSum(nums1, nums2, 3))\n    print(s.twoSum(nums1, nums2, 4))\n    print(s.twoSum(nums1, nums2, 5))\n    print(s.twoSum(nums1, nums2, 6))\n    print(s.twoSum(nums1, nums2, 7))\n    print(s.twoSum(nums1, nums2, 8))",
      -4.3515625
    ],
    [
      "import unittest\n\nclass Solution:\n    # @param a, a list of integers\n    # @param b, a list of integers\n    # @param k, an integer\n    # @return an integer\n    def findPairs(self, a, b, k):\n        n = len(a)\n        m = len(b)\n        dp = [[0] * (m+1) for i in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if a[i-1] == b[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[n][m]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n        print Solution().findPairs([1, 2, 3, 4], [1, 2, 3, 4], 1)\n        print Solution().findPairs([1, 2, 3, 4], [1, 2, 3, 4], 2)\n\nif __name__ == \"__main__\":\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 11/17/2017\n# 11/19/2017\n# 11/20/2017\n# 11/22/2017\n# 11/28/2017\n# 11/29/2017\n# 11/30/2017\n# 12/1/2017\n# 12/2/2017\n# 12/3/2017\n# 12/4/2017\n# 12/5/2017\n# 12/6/2017\n# 12/7/2017\n# 12/8/2017\n# 12/9/2017\n# 12/10/2017\n# 12/11/2017\n# 12/12/2017\n# 12/13/2017\n# 12/14/2017\n# 12/15/2017\n# 12/16/2017\n# 12/17/2017\n# 12/18/2017\n# 12/19/2017\n#",
      -4.42578125
    ],
    [
      "# https://leetcode.com/problems/pairs-with-duplicate-values/discuss/254750/Python-Solution-Faster-O(N)\nclass Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if not nums1 or not nums2:\n            return []\n        nums1.sort()\n        nums2.sort()\n        ans = []\n        for i in range(len(nums1) - k + 1):\n            for j in range(len(nums2) - k + 1):\n                if i == j:\n                    continue\n                if nums1[i] == nums2[j]:\n                    ans.append([nums1[i], nums2[j]])\n                    break\n        return ans",
      -4.54296875
    ],
    [
      "# https://www.hackerrank.com/challenges/two-arrays/problem\n# https://www.hackerrank.com/challenges/two-arrays/submissions/code/6336715\n\n# The first array contains a list of integers, while the second array contains a list of integers.\n# The goal is to find the number of pairs which consist of elements from the first array and elements from the second array.\n# For example, the pair (5, 6) is counted as one pair.\n# The pair (6, 5) is not counted as one pair.\n# The pair (6, 6) is counted as one pair.\n# The pair (1, 1) is counted as one pair.\n# The pair (1, 2) is counted as one pair.\n# The pair (2, 1) is counted as one pair.\n# The pair (2, 2) is counted as one pair.\n# The pair (3, 3) is counted as one pair.\n# The pair (3, 4) is counted as one pair.\n# The pair (4, 3) is counted as one pair.\n# The pair (4, 4) is counted as one pair.\n# The pair (5, 5) is counted as one pair.\n# The pair (5, 6) is not counted as one pair.\n# The pair (6, 5) is not counted as one pair.\n# The pair (6, 6) is counted as one pair.\n# The pair (1, 3) is counted as one pair.\n# The pair (1, 4) is counted as one pair.\n# The pair (2, 3) is counted as one pair.\n# The pair (2, 4) is counted as one pair.\n# The pair (3, 1) is counted as one pair.\n# The pair (3, 2) is counted as one pair.\n# The pair (3, 3) is counted as one pair.\n# The pair (3, 4) is counted as one pair.\n# The pair (4, 1) is counted as one pair.\n# The pair (4, 2) is counted as one pair.\n# The pair (4, 3) is counted as one pair.\n# The pair (4, 4) is counted as one pair.\n# The",
      -4.578125
    ],
    [
      "import sys\nimport collections\n\n# @include\ndef pairs_from_one_array_and_two_array(first_array, second_array):\n    # Store the number of elements in the first array.\n    num_elements_first_array = len(first_array)\n    # Store the number of elements in the second array.\n    num_elements_second_array = len(second_array)\n    # Store the number of elements in the pairs.\n    num_pairs = num_elements_first_array * num_elements_second_array\n    # Initialize the pairs list.\n    pairs = collections.defaultdict(int)\n    # Iterate over the first array.\n    for i in range(num_elements_first_array):\n        # Iterate over the second array.\n        for j in range(num_elements_second_array):\n            # If the first element of the first array is the second element of the second array,\n            # then the pair (i, j) is added to the pairs list.\n            if first_array[i] == second_array[j]:\n                pairs[(i, j)] += 1\n    # Return the number of pairs.\n    return pairs\n# @exclude\n\n\ndef main():\n    first_array = [1, 2, 3, 4]\n    second_array = [5, 6, 7, 8]\n    # pairs = pairs_from_one_array_and_two_array(first_array, second_array)\n    # pairs = pairs_from_one_array_and_two_array(first_array, second_array)\n    pairs = pairs_from_one_array_and_two_array(first_array, second_array)\n    # print(pairs)\n    # print(pairs)\n    assert (pairs == {(1, 5): 2, (1, 6): 2, (1, 7): 2, (1, 8): 2, (2, 5): 2, (2, 6): 2, (2, 7): 2, (2, 8): 2, (3, 5): 2, (3, 6): 2, (3, 7): 2, (3, 8): 2,",
      -4.66015625
    ],
    [
      "class Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @param {integer} k\n    # @return {integer}\n    def numSubsets(self, nums1, nums2, k):\n        nums1.sort()\n        nums2.sort()\n        nums1.insert(0, 0)\n        nums2.insert(0, 0)\n        nums1.append(0)\n        nums2.append(0)\n        res = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                res += self.dfs(nums1[i], nums2[j], k)\n        return res\n    \n    def dfs(self, x, y, k):\n        if k == 0:\n            return 1\n        if x == 0 and y == 0:\n            return 0\n        if x == 0:\n            return self.dfs(y, k-1, 0)\n        if y == 0:\n            return self.dfs(x, k-1, 0)\n        return self.dfs(x-1, y-1, k-1) + self.dfs(x-1, y, k-1) + self.dfs(x, y-1, k-1) + self.dfs(x, y, k-1)",
      -4.7109375
    ],
    [
      "def find_k_pairs(first_array, second_array, k):\n    # write your code here\n    \n    if len(first_array) < k:\n        return []\n    \n    if len(second_array) < k:\n        return []\n    \n    if len(first_array) < len(second_array):\n        first_array, second_array = second_array, first_array\n    \n    res = []\n    for i in range(len(first_array) - k + 1):\n        for j in range(len(second_array) - k + 1):\n            if first_array[i] == second_array[j]:\n                res.append((first_array[i], second_array[j]))\n    return res\n\ndef test():\n    assert(find_k_pairs([1, 2, 3, 4], [3, 4, 5, 6], 2) == [(1, 3), (2, 4)])\n\nif __name__ == '__main__':\n    test()",
      -5.31640625
    ],
    [
      "import numpy as np\nimport pandas as pd\nfrom collections import defaultdict\nfrom itertools import combinations\n\ndef k_pairs(first_list, second_list, k):\n    \"\"\"\n    :param first_list: List of elements from first array\n    :param second_list: List of elements from second array\n    :param k: Number of pairs to be found\n    :return: List of pairs\n    \"\"\"\n    return list(combinations(first_list, k)) + list(combinations(second_list, k))\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    # input\n    first_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    second_list = [10, 11, 12, 13, 14, 15, 16, 17, 18]\n\n    # output\n    print(\"Output:\")\n    print(\"{}\".format(k_pairs(first_list, second_list, 4)))\n\n    # output\n    print(\"Output:\")\n    print(\"{}\".format(k_pairs(first_list, second_list, 10)))\n\n    # output\n    print(\"Output:\")\n    print(\"{}\".format(k_pairs(first_list, second_list, 0)))\n\nif __name__ == '__main__':\n    main()",
      -5.609375
    ],
    [
      "import sys\n\ndef find_pairs(array_one, array_two):\n    \"\"\"\n    :type array_one: List[int]\n    :type array_two: List[int]\n    :rtype: int\n    \"\"\"\n    # print(array_one)\n    # print(array_two)\n    counter = 0\n    for i in range(0, len(array_one)):\n        if array_one[i] == array_two[i]:\n            counter += 1\n    return counter\n\nif __name__ == '__main__':\n    array_one = [1, 2, 3, 4, 5]\n    array_two = [2, 4, 6, 8, 10]\n    print(find_pairs(array_one, array_two))",
      -5.6875
    ],
    [
      "def find_pairs(arr1, arr2, k):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                result += 1\n    return result\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4]\n    arr2 = [1, 2, 3, 4]\n    k = 3\n    print find_pairs(arr1, arr2, k)\n    k = 5\n    print find_pairs(arr1, arr2, k)\n    k = 6\n    print find_pairs(arr1, arr2, k)\n    k = 7\n    print find_pairs(arr1, arr2, k)",
      -5.828125
    ],
    [
      "from collections import defaultdict\n\ndef pairs(arr1, arr2, k):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    dic = defaultdict(list)\n    for i in range(len(arr1)):\n        dic[arr1[i]].append(i)\n    for i in range(len(arr2)):\n        dic[arr2[i]].append(i)\n    res = []\n    for i in range(k):\n        res.append(min(dic[arr1[j]][0] for j in range(len(dic[arr1]))))\n        res.append(min(dic[arr2[j]][0] for j in range(len(dic[arr2]))))\n    return res\n\nif __name__ == '__main__':\n    assert pairs([1, 2, 3], [1, 2], 2) == [0, 1]\n    assert pairs([1, 2, 3], [1, 2], 1) == [0, 1]\n    assert pairs([1, 2, 3], [1, 2], 3) == [0, 1, 2]\n    assert pairs([1, 2, 3], [1, 2], 4) == [0, 1, 2, 3]",
      -5.921875
    ],
    [
      "#!/usr/bin/env python\n\ndef get_pairs(arr1, arr2):\n    \"\"\"\n    Input:\n    arr1 - a list of numbers\n    arr2 - a list of numbers\n    Output:\n    k - an integer, k number of pairs\n    \"\"\"\n    k = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                k += 1\n    return k\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print get_pairs(arr1, arr2)",
      -5.9296875
    ],
    [
      "\"\"\"\nGiven two arrays, the first is sorted and the second is sorted in ascending order, return the number of pairs.\n\nExample:\n\nInput:\nfirst = [1,2,3,4], second = [2,3,4,5]\nOutput: 4\n\nInput:\nfirst = [1,2,3], second = [2,3,4]\nOutput: 2\n\nInput:\nfirst = [1,2,3], second = [1,2,3,4]\nOutput: 1\n\nInput:\nfirst = [1,2,3], second = [3,4]\nOutput: 0\n\nNote:\n\nThe length of both arrays will not exceed 100.\nBoth arrays contain unique integers.\n\"\"\"\n\nclass Solution(object):\n    def numPairs(self, first, second):\n        \"\"\"\n        :type first: List[int]\n        :type second: List[int]\n        :rtype: int\n        \"\"\"\n        if len(first) == 0 or len(second) == 0:\n            return 0\n        if len(first) < len(second):\n            first, second = second, first\n        pairs = 0\n        for i in xrange(len(first)):\n            if first[i] == second[i]:\n                pairs += 1\n            else:\n                break\n        return pairs",
      -6.0234375
    ],
    [
      "import numpy as np\n\ndef find_pairs(arr1, arr2, k):\n    # Check if arr1 and arr2 are of the same size\n    if len(arr1)!= len(arr2):\n        return -1\n    # Initialize the pairs array\n    pairs = np.zeros(k, dtype=int)\n    # For each pair in arr1, add its value to pairs and remove it from arr1\n    for i in range(len(arr1)):\n        pairs[0] = arr1[i]\n        for j in range(1, k):\n            if i + j < len(arr1):\n                pairs[j] = arr1[i + j]\n                arr1.pop(i + j)\n    # For each pair in arr2, add its value to pairs and remove it from arr2\n    for i in range(len(arr2)):\n        pairs[0] = arr2[i]\n        for j in range(1, k):\n            if i + j < len(arr2):\n                pairs[j] = arr2[i + j]\n                arr2.pop(i + j)\n    # Return the number of pairs\n    return pairs.sum()\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_pairs(arr1, arr2, 3))",
      -6.33984375
    ],
    [
      "import unittest\nfrom collections import defaultdict\n\n# O(n^2) time. O(n^2) space. DFS.\nclass Solution:\n    def numDistinctPairs(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        def count(i, j, k, A, B):\n            if i < 0 or j < 0 or k < 0:\n                return 0\n            if i == j:\n                return 0\n            if i > j:\n                return 0\n            if k == 0:\n                return 1\n            if k == 1:\n                return 1 if A[i] == B[j] else 0\n            return count(i, j-1, k-1, A, B) + count(i, j, k-1, A, B)\n\n        return count(len(A)-1, len(B)-1, len(A), A, B)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/distinct-pairs/solution/\n\n/**\n * Definition for a point.\n * class Point {\n *     int x;\n *     int y;\n *     Point() { x = 0; y = 0; }\n *     Point(int a, int b) { x = a; y = b; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() { val = 0; }\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\n# 0",
      -6.6484375
    ],
    [
      "\"\"\"\nInput:\n    A = [1,2,3,4]\n    B = [3,4,5,6]\n    k = 4\nOutput:\n    2 pairs of [1,3], [1,4], [2,3], [2,4]\n\"\"\"\n\n# https://oj.leetcode.com/problems/k-pairs-with-same-sum/\n# \n# 1. Find the k pairs with same sum\n# 2. \n# 3. \n# 4. \n# 5. \n# 6. \n# 7. \n# 8. \n# 9. \n# 10. \n# 11. \n# 12. \n# 13. \n# 14. \n# 15. \n# 16. \n# 17. \n# 18. \n# 19. \n# 20. \n# 21. \n# 22. \n# 23. \n# 24. \n# 25. \n# 26. \n# 27. \n# 28. \n# 29. \n# 30. \n# 31. \n# 32. \n# 33. \n# 34. \n# 35. \n# 36. \n# 37. \n# 38. \n# 39. \n# 40. \n# 41. \n# 42. \n# 43. \n# 44. \n# 45. \n# 46. \n# 47. \n# 48. \n# 49. \n# 50. \n# 51. \n# 52. \n# 53. \n# 54. \n# 55. \n# 56. \n# 57. \n# 58. \n# 59. \n# 60. \n# 61. \n# 62. \n# 63. \n# 64. \n# 65. \n# 66. \n# 67. \n# 68. \n# 69. \n# 70. \n# 71. \n# 72. \n# 73. \n# 74. \n# 75. \n# 76. \n# 77. \n# 78. \n# 79. \n# 80. \n# 81. \n# 82.",
      -6.7421875
    ],
    [
      "import unittest\nimport timeit\n\n\nclass Solution(object):\n    def findPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if len(nums1) < k:\n            return []\n\n        res = []\n        nums1.sort()\n        nums2.sort()\n        for i in range(k):\n            if nums1[i] == nums2[i]:\n                res.append(i)\n        return res\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/pair-distribution/solution/\n\n# 1ms 100%\nclass Solution {\n    public int[] findPairs(int[] nums1, int[] nums2, int k) {\n        int[] result = new int[k];\n        int i = 0, j = 0;\n        while (i < nums1.length && j < nums2.length) {\n            if (nums1[i] == nums2[j]) {\n                result[i] = j;\n                i++;\n                j++;\n            } else if (nums1[i] < nums2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return result;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int[] findPairs(int[] nums1, int[] nums2, int k) {\n        int[] result = new int[k];\n        int i = 0, j = 0;\n        while (i < nums1.length && j < nums2.length) {\n            if (nums1[i] == nums2[j]) {\n                result[i] = j;\n                i++;",
      -7.42578125
    ],
    [
      "\"\"\"\nFor example, if the first array is [1,2,3], the second array is [4,5], and k is 2, it should return [1,4].\n\"\"\"\n\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Python-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/k-pairs-with-equal-sum/discuss/63420/Java-O(n2)\n# https://leetcode.com/problems/",
      -7.4921875
    ],
    [
      "# https://www.hackerrank.com/challenges/find-pairs\n\nimport unittest\n\nclass Solution(object):\n    def findPairs(self, arr1, arr2, k):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                if arr1[i] == arr2[j]:\n                    res += 1\n        return res\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/find-pairs/solution/\n\n# 1ms 100%\nclass Solution {\n    public int findPairs(int[] arr1, int[] arr2, int k) {\n        int res = 0;\n        for (int i = 0; i < arr1.length; i++) {\n            for (int j = 0; j < arr2.length; j++) {\n                if (arr1[i] == arr2[j]) res++;\n            }\n        }\n        return res;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public int findPairs(int[] nums1, int[] nums2, int k) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums1.length; i++) {\n            map.put(nums1[i], map.getOrDefault(nums1[i], 0) + 1);\n        }\n        for (int i = 0; i < nums2.length; i++) {\n            map.put(nums2[i], map.getOrDefault(nums2[i], 0) + 1);\n        }\n        return map.entrySet().stream().filter(e -> e.getValue",
      -7.6484375
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def findKPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # TODO\n        return 0\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 10ms 100%\nclass Solution {\n    public int findKPairs(int[] nums1, int[] nums2, int k) {\n        int[] dp = new int[nums1.length + 1];\n        dp[0] = 0;\n        for (int i = 1; i <= nums1.length; i++) {\n            dp[i] = Math.max(dp[i - 1], nums1[i - 1] == nums2[i - 1]);\n        }\n        int ans = 0;\n        for (int i = 1; i <= k; i++) {\n            ans += dp[i];\n        }\n        return ans;\n    }\n}\n\n# 8ms 100%\nclass Solution {\n    public int findKPairs(int[] nums1, int[] nums2, int k) {\n        int[] dp = new int[nums1.length + 1];\n        dp[0] = 0;\n        for (int i = 1; i <= nums1.length; i++) {\n            for (int j = 1; j <= k; j++) {\n                dp[i] = Math.max(dp[i], nums1[i - 1] == nums2[j - 1]);\n            }\n        }\n        return dp[k];\n    }\n}\n\n# 8ms 100%\nclass Solution {\n    public int findKPairs(int[] nums1, int[] nums2, int k) {\n        int[] dp = new int[nums",
      -7.69140625
    ],
    [
      "from collections import defaultdict\n\ndef find_pairs(first, second):\n    \"\"\"\n    :type first: List[int]\n    :type second: List[int]\n    :rtype: int\n    \"\"\"\n    k = len(first)\n    count = defaultdict(lambda: 0)\n    for i in range(k):\n        for j in range(k):\n            if i == j:\n                continue\n            if first[i] == second[j]:\n                count[i] += 1\n    return sum(count.values())\n\nif __name__ == \"__main__\":\n    first = [1, 2, 3]\n    second = [3, 4, 5]\n    print find_pairs(first, second)\n    first = [1, 2, 3, 4, 5, 6]\n    second = [3, 4, 5, 6]\n    print find_pairs(first, second)\n    first = [1, 2, 3, 4, 5]\n    second = [1, 2, 3, 4, 5]\n    print find_pairs(first, second)\n    first = [1, 2, 3, 4, 5]\n    second = [1, 2, 3, 4, 5, 6]\n    print find_pairs(first, second)\n    first = [1, 2, 3, 4, 5]\n    second = [1, 2, 3, 4, 5, 6]\n    print find_pairs(first, second)",
      -7.90625
    ],
    [
      "# https://www.hackerrank.com/challenges/k-pairs/problem\n\nimport unittest\nimport collections\nimport sys\nimport random\nimport math\n\ndef find_k_pairs(first, second, k):\n    k_pairs = collections.defaultdict(list)\n    for i in range(len(first)):\n        for j in range(len(second)):\n            if first[i] == second[j]:\n                k_pairs[i].append(j)\n                k_pairs[j].append(i)\n    return k_pairs\n\nclass TestKPairs(unittest.TestCase):\n    def test_find_k_pairs(self):\n        self.assertEqual(find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3),\n                         find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3))\n        self.assertEqual(find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 4),\n                         find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 4))\n        self.assertEqual(find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5),\n                         find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5))\n        self.assertEqual(find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 1),\n                         find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 1))\n        self.assertEqual(find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 2),\n                         find_k_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4",
      -7.98828125
    ],
    [
      "import unittest\n\n\nclass TestCases(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(find_pairs([\"a\", \"b\", \"c\"], [\"a\", \"b\"]), 2)\n\n    def test_2(self):\n        self.assertEqual(find_pairs([\"a\", \"b\", \"c\"], [\"a\", \"c\"]), 2)\n\n    def test_3(self):\n        self.assertEqual(find_pairs([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]), 3)\n\n    def test_4(self):\n        self.assertEqual(find_pairs([\"a\", \"b\", \"c\"], [\"a\", \"c\", \"d\"]), 1)\n\n    def test_5(self):\n        self.assertEqual(find_pairs([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\"]), 2)\n\n    def test_6(self):\n        self.assertEqual(find_pairs([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]), 0)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -7.99609375
    ],
    [
      "# https://www.hackerrank.com/challenges/k-pairs/problem\n\n# I - In the first array, there are k pairs which consist of one element from the first array and one element from the second array.\n# II - In the second array, there are k pairs which consist of one element from the second array and one element from the first array.\n# III - In the third array, there are k pairs which consist of one element from the third array and one element from the fourth array.\n# IV - In the fourth array, there are k pairs which consist of one element from the fourth array and one element from the third array.\n# V - In the fifth array, there are k pairs which consist of one element from the fifth array and one element from the sixth array.\n# VI - In the sixth array, there are k pairs which consist of one element from the sixth array and one element from the fifth array.\n# VII - In the seventh array, there are k pairs which consist of one element from the seventh array and one element from the eighth array.\n# VIII - In the eighth array, there are k pairs which consist of one element from the eighth array and one element from the seventh array.\n# VIX - In the ninth array, there are k pairs which consist of one element from the ninth array and one element from the tenth array.\n# VIY - In the tenth array, there are k pairs which consist of one element from the tenth array and one element from the ninth array.\n# VIIY - In the eleventh array, there are k pairs which consist of one element from the eleventh array and one element from the twelve array.\n# VIIIY - In the twelve array, there are k pairs which consist of one element from the twelve array and one element from the eleventh array.\n# VIIYZ - In the eleventh array, there are k pairs which consist of one element from the eleventh array and one element from the twelve array.\n# VIYZ - In the twelve array, there are k pairs which consist of one element from the twelve array and one element from the eleventh array.\n# VIIYZA - In the eleventh array, there are k pairs which consist of one element from the eleventh array and one element from the twelve array.\n# VIIYZB - In the twelve array, there are k pairs which consist of one element from",
      -8.8984375
    ],
    [
      "import sys\n\ndef main():\n    array1 = [1, 2, 3, 4, 5]\n    array2 = [6, 7, 8, 9, 10]\n    \n    print(solution(array1, array2, 1, 2))\n    \n    array1 = [1, 2, 3, 4, 5]\n    array2 = [6, 7, 8, 9, 10]\n    \n    print(solution(array1, array2, 2, 2))\n    \n    array1 = [1, 2, 3, 4, 5]\n    array2 = [6, 7, 8, 9, 10]\n    \n    print(solution(array1, array2, 3, 2))\n    \n    array1 = [1, 2, 3, 4, 5]\n    array2 = [6, 7, 8, 9, 10]\n    \n    print(solution(array1, array2, 4, 2))\n    \n    array1 = [1, 2, 3, 4, 5]\n    array2 = [6, 7, 8, 9, 10]\n    \n    print(solution(array1, array2, 5, 2))\n\ndef solution(array1, array2, k, m):\n    k = k - 1\n    m = m - 1\n    \n    if k < 0 or m < 0 or len(array1) < k or len(array2) < m:\n        return 0\n    \n    pairs = 0\n    for i in range(0, len(array1) - k):\n        for j in range(0, len(array2) - m):\n            if array1[i] == array2[j]:\n                pairs += 1\n    \n    return pairs\n    \nif __name__ == '__main__':\n    main()",
      -9.09375
    ],
    [
      "from collections import Counter\n\n# https://www.hackerrank.com/challenges/k-number-of-pairs\n\ndef findKPairs(arr1, arr2):\n    n = len(arr1)\n    m = len(arr2)\n    k = n + m\n    \n    pairs = []\n    for i in range(n):\n        for j in range(m):\n            if arr1[i] == arr2[j]:\n                pairs.append((arr1[i], arr2[j]))\n    \n    # print pairs\n    return pairs\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3]\n    arr3 = [1, 2, 3, 4, 5]\n    arr4 = [1, 2, 3, 4, 5, 6]\n    arr5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    print findKPairs(arr1, arr2)\n    print findKPairs(arr1, arr3)\n    print findKPairs(arr1, arr4)\n    print findKPairs(arr1, arr5)",
      -9.109375
    ],
    [
      "import numpy as np\n\ndef find_k_pairs(arr1, arr2, k):\n    arr_pairs = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j] and arr1[i] not in arr_pairs:\n                arr_pairs.append(arr1[i])\n                arr_pairs.append(arr2[j])\n    return arr_pairs\n\nif __name__ == \"__main__\":\n    arr1 = [1, 3, 1, 2, 5, 1, 3, 1, 2, 4, 2, 1, 2, 1, 2, 1, 3, 2, 1]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    k = 3\n    arr_pairs = find_k_pairs(arr1, arr2, k)\n    print(arr_pairs)",
      -9.578125
    ],
    [
      "class Solution(object):\n    def kSmallestPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums1)\n        m = len(nums2)\n        if k > n or k > m:\n            return 0\n        \n        dp = [[0] * (k + 1) for _ in range(m + 1)]\n        for i in range(n):\n            for j in range(m):\n                dp[j][0] = nums1[i]\n                dp[j][1] = nums2[j]\n        \n        for j in range(m):\n            for i in range(1, k + 1):\n                dp[j][i] = dp[j][i - 1]\n                if dp[j][i] > dp[j][i - 1]:\n                    dp[j][i] = dp[j][i - 1]\n        return dp[m - 1][k]",
      -9.6015625
    ],
    [
      "# https://oj.leetcode.com/problems/pairs-with-dif-and-sum/\n\nclass Solution(object):\n    def pairsWithDifAndSum(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # base case\n        if k == 0:\n            return 0\n        # base case\n        if len(nums1) < k:\n            return 0\n        # base case\n        if len(nums2) < k:\n            return 0\n        # base case\n        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        # base case\n        if len(nums1) == 1 or len(nums2) == 1:\n            return 0\n        # base case\n        if nums1[0] == nums2[0]:\n            return 0\n        # base case\n        if nums1[0] == nums2[len(nums2) - 1]:\n            return 0\n        # base case\n        if nums1[len(nums1) - 1] == nums2[0]:\n            return 0\n        # base case\n        if nums1[len(nums1) - 1] == nums2[len(nums2) - 1]:\n            return 0\n        # base case\n        if nums1[0] + nums2[0] == nums1[len(nums1) - 1] + nums2[len(nums2) - 1]:\n            return 0\n        # base case\n        if nums1[0] + nums2[0] == nums1[len(nums1) - 1] + nums2[len(nums2) - 1]:\n            return 0\n        # base case\n        if nums1[len(nums1) - 1] + nums2[0] == nums1[0] + nums2[len(nums2) - 1]:\n            return 0\n        # base case",
      -9.9765625
    ],
    [
      "# Your code here\n\n# Example 1:\n# Input:\n# first = [1,2,3], second = [1,2,3,4]\n# Output:\n# 2\n# Explanation:\n# There are two pairs which consist of one element from the first array and one element from the second array.\n\n# Example 2:\n# Input:\n# first = [1,2], second = [1,2,3,4]\n# Output:\n# 0\n# Explanation:\n# There is no pair which consists of one element from the first array and one element from the second array.\n\n# Note:\n# first and second will have a length of at least 1.\n# first and second will contain at least one number.\n# First and second have no duplicates.\n# k will be in the range [1, 10000].\n\nclass Solution(object):\n    def numDistinctPairs(self, first, second, k):\n        \"\"\"\n        :type first: List[int]\n        :type second: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.numDistinctPairsHelper(first, second, k)\n\n    def numDistinctPairsHelper(self, first, second, k):\n        if len(first) < 1 or len(second) < 1:\n            return 0\n        if len(first) == 1 and len(second) == 1:\n            return 1\n        # The problem is that the pairs are in the form of\n        # (first[i], second[j])\n        # where i and j are the indices of first and second\n        # respectively.\n        # For example, [1,2,3,4] and [1,2,3]\n        # are in the form of [0, 1, 2, 3], [0, 1, 2, 4]\n        # and [0, 1, 3, 4]\n        # where the index of second is the index of first in the second list.\n        # So we need to find the number of pairs which consist of one element from the first array and one element from the second array.\n        # We can do this by iterating through the first list and comparing the first element with the second list.",
      -10.28125
    ],
    [
      "import unittest\n\n# The following solution is brute force O(n^2)\ndef bruteForce(arr1, arr2, k):\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                if i == 0 or j == 0:\n                    return k\n                else:\n                    k -= 1\n                    arr1[i] = arr2[j]\n                    arr2[j] = arr1[i]\n                    arr1[i] = arr1[i-1]\n                    arr2[j] = arr2[j-1]\n                    arr1[i-1] = arr2[j-1]\n                    arr2[j-1] = arr1[i-1]\n                    break\n\n# The following solution is O(n) time and O(n^2) space\n# There are 3 ways to do it\n# 1. Iterate through all elements in arr1 and arr2 and check for the presence of elements in both lists.\n# 2. Use a dict to keep track of the number of pairs which consist of one element from arr1 and one element from arr2.\n# 3. Use a stack to keep track of the number of pairs which consist of one element from arr1 and one element from arr2.\n# Note: In case of O(n) time and space, we are using a stack to keep track of the number of pairs.\n# In case of O(n^2) time and space, we are using a dict to keep track of the number of pairs.\n# The time complexity of this solution is O(n^2) because we are using a stack to keep track of the pairs.\n# The space complexity of this solution is O(n) because we are using a dict to keep track of the number of pairs.\ndef kPairs(arr1, arr2, k):\n    stack = []\n    dict = {}\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                if i == 0 or j == 0:\n                    return k\n                else:\n                    if stack[-1] == j",
      -10.4296875
    ],
    [
      "class Solution(object):\n    def kPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums1)\n        m = len(nums2)\n        dp = [0 for _ in range(n + 1)]\n        for i in range(m):\n            dp[0] += 1\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i] = max(dp[i], dp[i - 1] + 1)\n                if nums1[i - 1] == nums2[j - 1]:\n                    dp[i] = max(dp[i], dp[i - 1] + 1)\n        return dp[-1]",
      -11.046875
    ],
    [
      "import unittest\n\n# Your code here\nclass Solution(object):\n    def numPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif i == 1 and j == 1:\n                    dp[i][j] = 1\n                elif i == 1:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                elif j == 1:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[n][m]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 15ms 100%\nclass Solution {\n    public int numPairs(int[] nums1, int[] nums2, int k) {\n        int n = nums1.length;\n        int m = nums2.length;\n        int[] dp = new int[n + 1];\n        for (int i = 0; i <= n; i++) dp[i] = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) dp[i + 1]",
      -12.5234375
    ],
    [
      "import numpy as np\n\ndef find_k_pairs(arr1, arr2, k):\n    \"\"\"\n    :param arr1: The first array.\n    :param arr2: The second array.\n    :param k: The number of pairs.\n    :return: A list of pairs.\n    \"\"\"\n    # make a list of pairs\n    pair_list = []\n\n    # loop through each element\n    for i in range(len(arr1)):\n        # loop through each element in arr2\n        for j in range(len(arr2)):\n            # if both elements are equal\n            if arr1[i] == arr2[j]:\n                # append the pair to the list\n                pair_list.append((i, j))\n                # break the loop\n                break\n\n    # return the list\n    return pair_list\n\n\n# test cases\n\n# arr1 = [1, 2, 3, 4, 5]\n# arr2 = [2, 3, 5, 6, 7]\n# k = 2\n# expected_result = [0, 1]\n\n# arr1 = [1, 2, 3, 4, 5, 6, 7, 8]\n# arr2 = [2, 3, 5, 6, 7, 8, 9, 10]\n# k = 4\n# expected_result = [0, 1, 2, 3]\n\n# arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# arr2 = [2, 3, 5, 6, 7, 8, 9, 10]\n# k = 10\n# expected_result = []\n\n# arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# arr2 = [2, 3, 5, 6, 7, 8, 9, 10]\n# k = 1\n# expected_result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\narr2 = [2, 3, 5, 6, 7, 8, 9, 10]\nk = 2\nexpected_result =",
      -13.015625
    ],
    [
      "# I/O\n# 1. Input\n# 2. Output\n# 3. Code\n\n# Sample Input\n# 1, 1, 2, 3, 4\n# 1, 2, 3, 4, 5\n# 1, 2, 3, 4, 5\n# 1, 2, 3, 4, 5\n# 2, 3, 4, 5, 6\n# 2, 3, 4, 5, 6\n# 2, 3, 4, 5, 6\n# 2, 3, 4, 5, 6\n\n# Sample Output\n# 1, 1, 2, 2, 2\n# 2, 3, 4, 3, 3\n# 2, 3, 4, 3, 3\n# 2, 3, 4, 3, 3\n# 2, 3, 4, 4, 4\n# 2, 3, 4, 4, 4\n# 2, 3, 4, 4, 4\n# 2, 3, 4, 4, 4\n\ndef find_k_pairs(arr1, arr2, k):\n    # Initialize\n    count = 0\n    pairs = []\n\n    # Iterate through each number in arr1\n    for i in range(len(arr1)):\n        # Iterate through each number in arr2\n        for j in range(len(arr2)):\n            # If the number in arr1 and arr2 are the same, add the pair to the list of pairs\n            if arr1[i] == arr2[j]:\n                pairs.append([arr1[i], arr2[j]])\n                count += 1\n                break\n\n    # Return the number of pairs\n    return count, pairs\n\n\n# Sample Input\n# 1, 1, 2, 3, 4\n# 1, 2, 3, 4, 5\n# 1, 2, 3, 4, 5\n# 1, 2, 3, 4, 5\n# 2, 3, 4, 5, 6\n# 2, 3, 4, 5, 6\n# 2, 3, 4, 5, 6\n# 2, 3, 4, 5, 6\n\n# Sample Output\n# 1, 1, 2, 2, 2\n# 2, 3, 4, 3, 3\n# 2, 3, 4, 3, 3\n# 2, 3, 4, 3, 3\n# 2,",
      -13.6640625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}