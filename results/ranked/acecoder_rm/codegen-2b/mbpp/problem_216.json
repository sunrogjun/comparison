{
  "problem": {
    "task_id": "MBPP/227",
    "prompt": "Write a function to find minimum of three numbers.",
    "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
    "test_list": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ],
    "challenge_test_list": [],
    "problem_id": 216
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def min3(a, b, c):\n    \"\"\"\n    Find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n\ndef min3_2(a, b, c):\n    \"\"\"\n    Find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\ndef min3_3(a, b, c):\n    \"\"\"\n    Find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(min3(a, b, c))\n    print(min3_2(a, b, c))\n    print(min3_3(a, b, c))",
      7.93359375
    ],
    [
      "def find_min(a, b, c):\n    \"\"\"\n    a, b, c: integers\n    return: minimum of a, b, c\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        if b < c:\n            return b\n        else:\n            return c\n    else:\n        return c\n\nif __name__ == '__main__':\n    print find_min(1, 2, 3)",
      6.359375
    ],
    [
      "def find_min(a, b, c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: int\n    \"\"\"\n    return min(a, min(b, c))\n\n\nif __name__ == '__main__':\n    assert find_min(1, 2, 3) == 1\n    assert find_min(5, 6, 7) == 3",
      6.14453125
    ],
    [
      "def min_three(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return min(min(a, b), c)\n\nif __name__ == \"__main__\":\n    print(min_three(1, 2, 3))\n    print(min_three(3, 2, 1))\n    print(min_three(1, 1, 2))\n    print(min_three(2, 1, 1))\n    print(min_three(1, 1, 1))",
      5.41015625
    ],
    [
      "def min3(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n\nprint(min3(1, 2, 3))\nprint(min3(2, 1, 3))\nprint(min3(1, 3, 2))\nprint(min3(3, 1, 2))",
      5.0625
    ],
    [
      "def min3(a, b, c):\n    return min(min(a, b), c)\n\n\nif __name__ == \"__main__\":\n    print(min3(1, 2, 3))\n    print(min3(2, 1, 3))\n    print(min3(2, 3, 1))\n    print(min3(1, 2, 3))\n    print(min3(1, 1, 1))\n    print(min3(1, 2, 2))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))",
      4.671875
    ],
    [
      "import math\n\n\ndef min3(a, b, c):\n    return min(a, min(b, c))\n\n\ndef min3_1(a, b, c):\n    return min(min(a, b), c)\n\n\ndef min3_2(a, b, c):\n    return min(min(min(a, b), c), a)\n\n\ndef min3_3(a, b, c):\n    return min(min(min(a, b), c), min(a, b))\n\n\ndef min3_4(a, b, c):\n    return min(min(min(min(a, b), c), a), min(a, b))\n\n\ndef min3_5(a, b, c):\n    return min(min(min(min(min(a, b), c), a), b), c)\n\n\ndef min3_6(a, b, c):\n    return min(min(min(min(min(min(a, b), c), a), b), c), a)\n\n\ndef min3_7(a, b, c):\n    return min(min(min(min(min(min(min(a, b), c), a), b), c), a), b)\n\n\ndef min3_8(a, b, c):\n    return min(min(min(min(min(min(min(min(a, b), c), a), b), c), a), b), c)\n\n\nif __name__ == '__main__':\n    assert min3(1, 2, 3) == 1\n    assert min3_1(1, 2, 3) == 1\n    assert min3_2(1, 2, 3) == 1\n    assert min3_3(1, 2, 3) == 1\n    assert min3_4(1, 2, 3) == 1\n    assert min3_5(1, 2, 3) == 1\n    assert min3_6(1, 2, 3) == 1\n    assert min3_7(1, 2, 3) == 1\n    assert min3_8(1, 2, 3) == 1",
      4.3828125
    ],
    [
      "def min3(n1, n2, n3):\n    if n1 < n2 and n1 < n3:\n        return n1\n    elif n2 < n1 and n2 < n3:\n        return n2\n    elif n3 < n1 and n3 < n2:\n        return n3\n    else:\n        return min3(n1, n2, n3)\n\nprint(min3(1, 2, 3))\nprint(min3(4, 2, 3))\nprint(min3(4, 5, 3))\nprint(min3(4, 5, 6))\nprint(min3(4, 5, 7))",
      4.15234375
    ],
    [
      "def min3(a, b, c):\n    return min(a, min(b, c))\n\nif __name__ == \"__main__\":\n    print(min3(1, 2, 3))\n    print(min3(4, 5, 6))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1, 2, 3))\n    print(min3(1",
      3.4453125
    ],
    [
      "def min3(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n#Test cases\nassert min3(2, 3, 4) == 2\nassert min3(4, 2, 1) == 2\nassert min3(4, 1, 2) == 1\nassert min3(4, 2, 3) == 2\nassert min3(4, 3, 2) == 2\nassert min3(4, 3, 3) == 3\nassert min3(3, 4, 4) == 3\nassert min3(3, 4, 5) == 3\nassert min3(3, 5, 4) == 3\nassert min3(3, 5, 5) == 5\nassert min3(1, 2, 3) == 1",
      3.419921875
    ],
    [
      "# Function to find minimum of three numbers\n# @param num1 - First number\n# @param num2 - Second number\n# @param num3 - Third number\ndef min3(num1, num2, num3):\n\tif num1 < num2:\n\t\tif num1 < num3:\n\t\t\treturn num1\n\t\telse:\n\t\t\treturn num3\n\telse:\n\t\tif num2 < num3:\n\t\t\treturn num2\n\t\telse:\n\t\t\treturn num3\n\n# Test cases\n# Input: num1, num2, num3\n# Output: Minimum of num1, num2, num3\n\n# Test cases\n# Input: 1, 2, 3\n# Output: 1\n# Input: 1, 2, 2\n# Output: 2\n# Input: 1, 2, 3\n# Output: 1\n# Input: 2, 2, 3\n# Output: 2\n# Input: 2, 2, 2\n# Output: 2\n# Input: 1, 2, 3\n# Output: 1\n\n# Test cases\n# Input: 1, 2, 3\n# Output: 1\n# Input: 4, 5, 6\n# Output: 3\n# Input: 1, 2, 3\n# Output: 1\n# Input: 4, 5, 6\n# Output: 3\n# Input: 2, 2, 2\n# Output: 2\n# Input: 1, 2, 3\n# Output: 1\n# Input: 4, 5, 6\n# Output: 3\n# Input: 2, 2, 2\n# Output: 2\n# Input: 1, 2, 3\n# Output: 1\n# Input: 4, 5, 6\n# Output: 3\n# Input: 2, 2, 2\n# Output: 2\n# Input: 1, 2, 3\n# Output: 1\n# Input: 4, 5, 6\n# Output: 3\n# Input: 2, 2, 2\n# Output: 2\n# Input: 1, 2, 3\n# Output: 1\n# Input: 4, 5, 6\n# Output: 3\n# Input: 2, 2, 2\n# Output: 2\n# Input: 1, 2, 3\n# Output: 1\n# Input: 4, 5, 6\n# Output: 3\n# Input: 2, 2, 2\n# Output",
      2.880859375
    ],
    [
      "def min_three(a, b, c):\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    print(min_three(1, 2, 3))\n    print(min_three(1, 3, 2))\n    print(min_three(2, 3, 1))",
      2.52734375
    ],
    [
      "def find_min(a, b, c):\n    \"\"\"\n    a: int\n    b: int\n    c: int\n\n    return: int\n    \"\"\"\n    return min(a, min(b, c))\n\ndef test_find_min():\n    assert find_min(1, 2, 3) == 1\n    assert find_min(2, 3, 4) == 2\n    assert find_min(2, 4, 3) == 2\n\ndef test_find_min_with_list():\n    assert find_min([1, 2, 3]) == 1\n    assert find_min([2, 3, 4]) == 2\n    assert find_min([2, 4, 3]) == 2\n\nif __name__ == '__main__':\n    test_find_min()\n    test_find_min_with_list()",
      2.51171875
    ],
    [
      "def find_min(num1, num2, num3):\n    \"\"\"\n    Input:\n        num1, num2, num3: Three integers\n    Output:\n        Minimum of three integers\n    \"\"\"\n    min1 = min(num1, num2, num3)\n    min2 = min(num1, num2, num3)\n    min3 = min(num1, num2, num3)\n    return min(min1, min2, min3)\n\nif __name__ == '__main__':\n    num1, num2, num3 = 1, 5, 6\n    print find_min(num1, num2, num3)\n    print find_min(num1, num2, 6)\n    print find_min(6, num2, num3)\n    print find_min(6, 6, num3)\n    print find_min(6, 5, 6)\n    print find_min(5, 6, 6)",
      2.115234375
    ],
    [
      "from collections import namedtuple\n\n__author__ = 'Daniel'\n\n\ndef get_min(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n\n\ndef main():\n    print get_min(5, 2, 3)\n\n\nif __name__ == '__main__':\n    main()",
      1.6845703125
    ],
    [
      "# https://leetcode.com/problems/minimum-of-three-numbers/\n\n\nclass Solution(object):\n\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        nums.sort()\n        result = []\n        for i in range(len(nums) - 2):\n            if i == 0 or i == len(nums) - 1:\n                continue\n            j = i + 1\n            k = len(nums) - 1\n            while j < k:\n                if nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                elif nums[i] + nums[j] + nums[k] < 0:\n                    j += 1\n                else:\n                    result.append([nums[i], nums[j], nums[k]])\n                    j += 1\n                    k -= 1\n        return result\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [0, 0, 0]\n    print(sol.threeSum(nums))",
      1.30078125
    ],
    [
      "def min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:",
      1.197265625
    ],
    [
      "def min3(a,b,c):\n    \"\"\"\n    a,b,c are three numbers.\n    return the minimum of a,b,c.\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif b <= c <= a:\n        return b\n    else:\n        return c\n\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(min3(a,b,c))",
      1.1806640625
    ],
    [
      "def min3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if nums[0] < nums[1]:\n        if nums[0] < nums[2]:\n            return nums[0]\n        else:\n            return nums[2]\n    elif nums[1] < nums[2]:\n        return nums[1]\n    else:\n        return nums[2]",
      0.90771484375
    ],
    [
      "from math import sqrt\n\ndef min3(a, b, c):\n    \"\"\"\n    a, b, c are three numbers.\n    Returns the minimum value of a, b and c.\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif b <= c <= a:\n        return b\n    elif c <= a < b:\n        return c\n\ndef min3(a, b, c):\n    \"\"\"\n    a, b, c are three numbers.\n    Returns the minimum value of a, b and c.\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif b <= c <= a:\n        return b\n    elif c <= a < b:\n        return c\n\ndef min3(a, b, c):\n    \"\"\"\n    a, b, c are three numbers.\n    Returns the minimum value of a, b and c.\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif b <= c <= a:\n        return b\n    elif c <= a < b:\n        return c\n\ndef min3(a, b, c):\n    \"\"\"\n    a, b, c are three numbers.\n    Returns the minimum value of a, b and c.\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif b <= c <= a:\n        return b\n    elif c <= a < b:\n        return c\n\ndef min3(a, b, c):\n    \"\"\"\n    a, b, c are three numbers.\n    Returns the minimum value of a, b and c.\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif b <= c <= a:\n        return b\n    elif c <= a < b:\n        return c\n\ndef min3(a, b, c):\n    \"\"\"\n    a, b, c are three numbers.\n    Returns the minimum value of a, b and c.\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif b <= c <= a:\n        return b\n    elif c <= a < b:\n        return c\n\ndef min3(a,",
      0.5478515625
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    Input: a, b, c\n    Output: Minimum of a, b, c\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\ndef test_min3():\n    assert min3(1, 2, 3) == 1\n    assert min3(3, 2, 1) == 2\n    assert min3(2, 1, 3) == 1\n    assert min3(1, 2, 3) == 1\n    assert min3(3, 2, 1) == 2\n    assert min3(2, 1, 3) == 1\n\nif __name__ == \"__main__\":\n    test_min3()",
      0.2822265625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def findMin(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n\n        left = head\n        right = head\n        while left and right:\n            if left.val < right.val:\n                left = left.next\n            else:\n                right = right.next\n        if not left:\n            return right\n        if not right:\n            return left\n        while left:\n            left = left.next\n            right = right.next\n        return left\n\n    def findMin3(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next or not head.next.next:\n            return head\n        cur = head\n        while cur.next and cur.next.next:\n            cur = cur.next.next\n        return cur",
      0.1878662109375
    ],
    [
      "#!/usr/bin/env python\n\n\"\"\"\n@author: anand\n@license: MIT\n\"\"\"\n\ndef find_min(a, b, c):\n    return min(a, min(b, c))\n\ndef main():\n    print find_min(1,2,3)\n\nif __name__ == '__main__':\n    main()",
      -0.028900146484375
    ],
    [
      "def find_min(arr):\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val\n\nif __name__ == '__main__':\n    arr = [1, 4, 5]\n    print find_min(arr)",
      -0.04241943359375
    ],
    [
      "from math import sqrt\n\ndef find_min(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\ndef min3(a, b, c):\n    return min(find_min(a, b, c), find_min(b, a, c), find_min(c, a, b))\n\nif __name__ == '__main__':\n    print(min3(2, 3, 4))",
      -0.35107421875
    ],
    [
      "# Function to get minimum of three numbers\ndef get_min(a, b, c):\n    return min(a, min(b, c))\n\n# Test cases\n\nprint get_min(5, 2, 1)\n#>>> 1\n\nprint get_min(5, 6, 3)\n#>>> 3\n\nprint get_min(2, 3, 4)\n#>>> 2\n\nprint get_min(3, 2, 4)\n#>>> 2",
      -0.354248046875
    ],
    [
      "def min3(n1, n2, n3):\n    \"\"\"\n    >>> min3(1, 2, 3)\n    1\n    >>> min3(3, 2, 1)\n    1\n    >>> min3(1, 3, 2)\n    1\n    >>> min3(2, 1, 3)\n    1\n    >>> min3(2, 3, 1)\n    2\n    >>> min3(1, 1, 1)\n    1\n    >>> min3(2, 2, 2)\n    2\n    >>> min3(5, 6, 7)\n    1\n    >>> min3(1, 2, 3)\n    1\n    >>> min3(2, 1, 3)\n    2\n    >>> min3(2, 3, 1)\n    2\n    >>> min3(1, 3, 2)\n    2\n    >>> min3(3, 2, 1)\n    2\n    \"\"\"\n    # return min(n1, min(n2, n3))\n    return min(n1, min(n2, n3))",
      -0.41650390625
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    >>> min3(1, 2, 3)\n    1\n    >>> min3(3, 2, 1)\n    1\n    >>> min3(1, 1, 2)\n    1\n    >>> min3(1, 2, 3)\n    1\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.478271484375
    ],
    [
      "#!/usr/bin/env python\n\ndef find_min(nums):\n    min_num = nums[0]\n    min_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n            min_index = i\n    return min_index, min_num\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print find_min(nums)\n    nums = [2, 1, 3]\n    print find_min(nums)",
      -0.85693359375
    ],
    [
      "def min(a, b, c):\n    \"\"\"\n    Min of a, b and c.\n    \"\"\"\n    return min(a, min(b, c))\n\ndef min3(a, b, c):\n    \"\"\"\n    Min of a, b and c.\n    \"\"\"\n    return min(min(a, b), min(a, c), min(b, c))\n\nif __name__ == \"__main__\":\n    print min(1, 2, 3)\n    print min(4, 3, 2)\n    print min(1, 2, 3)\n    print min3(1, 2, 3)\n    print min3(4, 3, 2)",
      -0.85693359375
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    a, b, c are integers\n    return the minimum of a, b, c\n    \"\"\"\n    return min(min(a, b), c)",
      -0.85693359375
    ],
    [
      "def find_min3(a, b, c):\n    \"\"\"\n    >>> find_min3(1, 2, 3)\n    1\n    >>> find_min3(5, 2, 3)\n    3\n    \"\"\"\n    return min(a, b, c)",
      -0.85693359375
    ],
    [
      "def find_min(a,b,c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n    print(find_min(a,b,c))",
      -0.85693359375
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    a, b, c: numbers\n    return: minimum of a, b and c\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\nprint(min3(2, 5, 6))",
      -0.85693359375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findMin(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        return self.helper(root)\n\n    def helper(self, root):\n        if root is None:\n            return 0\n        if root.left is None:\n            return root.val\n        if root.right is None:\n            return root.val\n        return min(self.helper(root.left), self.helper(root.right))",
      -0.85693359375
    ],
    [
      "def min3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return min(nums[0], nums[1])\n    if nums[0] < nums[1]:\n        if nums[2] < nums[1]:\n            return nums[2]\n        else:\n            return min(nums[1], nums[2])\n    else:\n        if nums[2] < nums[0]:\n            return nums[2]\n        else:\n            return min(nums[0], nums[2])\n\nif __name__ == '__main__':\n    nums = [2, 3, 4]\n    print min3(nums)",
      -0.85693359375
    ],
    [
      "def min(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\ndef min3(a, b, c):\n    return min(a, min(b, c), min(a, c, b))\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(min3(a, b, c))",
      -0.85693359375
    ],
    [
      "def min_three(a, b, c):\n    return min(a, min(b, c))\n\n\nif __name__ == '__main__':\n    a = 3\n    b = 4\n    c = 5\n    print min_three(a, b, c)",
      -0.85693359375
    ],
    [
      "import math\ndef find_min(a, b, c):\n    return min(a, b, c)\n\nprint(find_min(3, 4, 5))",
      -0.85693359375
    ],
    [
      "def find_min_three(a, b, c):\n    return min(a, min(b, c))\n\n\nif __name__ == '__main__':\n    print find_min_three(1, 2, 3)\n    print find_min_three(1, 2, 4)",
      -0.85693359375
    ],
    [
      "def min3(a, b, c):\n    return min(a, min(b, c))\n\n\nprint min3(2, 5, 1)",
      -0.85693359375
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    >>> min3(1, 2, 3)\n    1\n    >>> min3(3, 2, 1)\n    1\n    >>> min3(2, 1, 3)\n    1\n    >>> min3(1, 2, 2)\n    2\n    >>> min3(2, 2, 2)\n    2\n    >>> min3(3, 3, 3)\n    3\n    >>> min3(4, 5, 6)\n    3\n    \"\"\"\n    return min(min(a, b), c)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def min3(a, b, c):\n    if a < b < c:\n        return a\n    elif a < b > c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    assert min3(1, 2, 3) == 1\n    assert min3(3, 4, 1) == 1\n    assert min3(4, 2, 3) == 2\n    assert min3(3, 2, 4) == 2\n    assert min3(4, 3, 2) == 2\n    assert min3(1, 3, 4) == 3\n    assert min3(3, 4, 5) == 3",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/minimum-of-three\n\nimport math\nimport timeit\n\ndef min3(a, b, c):\n    return min(a, min(b, c))\n\nprint(min3(1, 2, 3))\nprint(min3(2, 1, 3))\nprint(min3(1, 3, 2))",
      -0.85693359375
    ],
    [
      "def min(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    print min(1, 2, 3)\n    print min(1, 3, 2)\n    print min(1, 2, 3)",
      -0.85693359375
    ],
    [
      "def find_min(a, b, c):\n    return min(a, min(b, c))\n\nprint(find_min(1, 2, 3))",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/minimum-of-three\n\ndef min3(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if a < b < c:\n        return min(a, min(b, c))\n    elif a < b:\n        return min(a, b)\n    else:\n        return min(a, c)\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, raw_input().split())\n    print min3(a, b, c)",
      -0.85693359375
    ],
    [
      "def find_min(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        if b < c:\n            return b\n        else:\n            return c\n    else:\n        return c\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(find_min(a, b, c))",
      -0.85693359375
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    @param a: int\n    @param b: int\n    @param c: int\n    @return: int\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    a = 0\n    b = 0\n    c = 0\n    a = int(input('Enter a: '))\n    b = int(input('Enter b: '))\n    c = int(input('Enter c: '))\n    print(min3(a, b, c))",
      -0.85693359375
    ],
    [
      "def min(a, b, c):\n    return min(min(a, b), c)\n\ndef min3(a, b, c):\n    return min(min(min(a, b), c), min(a, min(b, c)))\n\nprint(min3(4, 5, 6))",
      -0.85693359375
    ],
    [
      "def min3(a, b, c):\n    if a < b < c:\n        return a\n    elif a < b:\n        return b\n    else:\n        return c\n\nif __name__ == \"__main__\":\n    assert min3(1, 2, 3) == 1\n    assert min3(3, 2, 1) == 2\n    assert min3(2, 1, 3) == 2\n    assert min3(1, 2, 2) == 1",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums.sort()\n        nums.reverse()\n        nums = [nums[i] for i in range(len(nums))]\n        nums.sort()\n        nums.reverse()\n        ans = []\n        for i in range(len(nums)-2):\n            for j in range(i+1, len(nums)-1):\n                if i > 0 and nums[i] == nums[i-1]:\n                    continue\n                if j > 0 and nums[j] == nums[j-1]:\n                    continue\n                if nums[i] + nums[j] + nums[j+1] > 0:\n                    ans.append(nums[i] + nums[j] + nums[j+1])\n        return ans\n\nif __name__ == '__main__':\n    print Solution().threeSum([-1,0,1,2,1,-4])",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/minimum-of-three\n\nimport math\n\ndef find_min(a, b, c):\n    if a < b:\n        return find_min(b, a, c)\n    elif b < c:\n        return find_min(c, b, a)\n    else:\n        return a\n\ndef find_min3(a, b, c):\n    return find_min(a, b, c)\n\nprint find_min3(3, 4, 5)",
      -0.85791015625
    ],
    [
      "def min3(a, b, c):\n    return min(min(a, b), c)\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(min3(a, b, c))",
      -0.85791015625
    ],
    [
      "def find_min(num1, num2, num3):\n    \"\"\"\n    Input:\n        num1, num2, num3: int\n    Output:\n        min: int\n    \"\"\"\n    return min(num1, num2, num3)\n\n\nif __name__ == '__main__':\n    num1, num2, num3 = (2, 3, 4)\n    print(find_min(num1, num2, num3))",
      -0.85791015625
    ],
    [
      "def min3(a, b, c):\n    return min(a, min(b, c))\n\n\nprint min3(1, 2, 3)\nprint min3(3, 2, 1)\nprint min3(2, 1, 3)\nprint min3(1, 1, 1)",
      -0.85791015625
    ],
    [
      "def min3(numbers):\n  min_val = numbers[0]\n  for i in range(1, len(numbers)):\n    if numbers[i] < min_val:\n      min_val = numbers[i]\n  return min_val\n\nprint(min3([-1, -2, -3, 4, 5, 6]))",
      -0.85791015625
    ],
    [
      "from math import sqrt\n\ndef min3(a, b, c):\n    \"\"\"\n    min3(a, b, c)\n    Find the minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    print min3(2, 1, 3)\n    print min3(2, 3, 1)\n    print min3(1, 2, 3)",
      -0.85791015625
    ],
    [
      "def min3(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n\n\ndef min3_1(a,b,c):\n    if a<b and a<c:\n        return a\n    elif a<c:\n        return a\n    else:\n        return c\n\ndef min3_2(a,b,c):\n    if b<a and b<c:\n        return b\n    elif b<c:\n        return b\n    else:\n        return c\n\ndef min3_3(a,b,c):\n    if c<a and c<b:\n        return c\n    elif c<b:\n        return c\n    else:\n        return a\n\n\nif __name__ == \"__main__\":\n    a = 3\n    b = 4\n    c = 5\n    print min3(a,b,c)\n    print min3_1(a,b,c)\n    print min3_2(a,b,c)\n    print min3_3(a,b,c)",
      -0.8583984375
    ],
    [
      "def find_min(a, b, c):\n    return min(a, min(b, c))\n\n\nprint(find_min(3, 4, 5))",
      -0.8583984375
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    Find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c\n\n\nprint(min3(1, 2, 3))\nprint(min3(1, 3, 2))\nprint(min3(3, 1, 2))\nprint(min3(3, 2, 1))",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/minimum-of-three-numbers/problem\n\ndef find_minimum(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return min(a, b, c)\n\nif __name__ == '__main__':\n    n = int(input())\n    for i in range(n):\n        a, b, c = map(int, input().split())\n        print(find_minimum(a, b, c))",
      -0.8583984375
    ],
    [
      "import math\n\ndef find_min(a, b, c):\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\ndef find_min3(a, b, c):\n    return min(min(a, b), c)\n\ndef find_min_2(a, b):\n    return min(a, b)\n\ndef main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(find_min(a, b, c))\n    print(find_min3(a, b, c))\n    print(find_min_2(a, b))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\nprint min3(1, 2, 3)\nprint min3(3, 2, 1)\nprint min3(1, 1, 1)\nprint min3(3, 1, 2)\nprint min3(1, 2, 3)\nprint min3(2, 2, 2)\nprint min3(2, 2, 3)\nprint min3(2, 3, 2)",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/min-three\n\ndef min3(a, b, c):\n    return min(min(a, b), c)\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for a0 in range(t):\n        a, b, c = list(map(int, input().split()))\n        print(min3(a, b, c))",
      -0.86083984375
    ],
    [
      "def find_min3(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\n# Test Cases\n\na = 4\nb = 3\nc = 2\n\nprint find_min3(a, b, c)",
      -0.86083984375
    ],
    [
      "def min3(a, b, c):\n    return min(a, b, c)\n\nif __name__ == '__main__':\n    a = [1, 2, 3]\n    b = [3, 4, 5]\n    c = [2, 5, 6]\n    min1 = min3(a, b, c)\n    print min1",
      -0.86083984375
    ],
    [
      "def find_min(arr):\n    arr.sort()\n    return arr[0]\n\ndef find_min_3(arr):\n    arr.sort()\n    return arr[0], arr[1], arr[2]\n\nif __name__ == '__main__':\n    arr = [1, 2, 3]\n    print(find_min(arr))\n    arr = [1, 1, 1]\n    print(find_min(arr))\n    arr = [1, 2, 3, 4]\n    print(find_min(arr))\n    arr = [1, 2, 3, 4, 5]\n    print(find_min(arr))\n    arr = [1, 1, 1, 1, 1]\n    print(find_min(arr))\n    arr = [1, 1, 1, 1, 1, 1]\n    print(find_min(arr))\n    arr = [1, 2, 3, 4, 5, 6]\n    print(find_min(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(find_min(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(find_min(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_min(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_min(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(find_min(arr))",
      -1.0283203125
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    a, b, c are integers.\n\n    Returns a float.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        if b < c:\n            return b\n        else:\n            return c\n    else:\n        return c\n\n\na = int(input(\"Enter a number: \"))\nb = int(input(\"Enter b number: \"))\nc = int(input(\"Enter c number: \"))\n\nprint(\"Minimum of {}, {}, {} is {}\".format(a, b, c, min3(a, b, c)))",
      -1.109375
    ],
    [
      "def min3(a, b, c):\n    return min(a, min(b, c))\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(min3(a, b, c))",
      -1.328125
    ],
    [
      "def find_min_three(a, b, c):\n    \"\"\"\n    a, b, c: integers\n    return: minimum of a, b and c\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\n# Test Cases\n\nprint(find_min_three(1, 2, 3))\nprint(find_min_three(1, 2, 4))\nprint(find_min_three(1, 2, 5))",
      -1.34375
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    a, b, c are integers.\n    Returns the minimum of a, b, c.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    elif c < a < b:\n        return c\n\nif __name__ == '__main__':\n    assert min3(1, 2, 3) == 1\n    assert min3(2, 3, 4) == 2\n    assert min3(3, 4, 5) == 3\n    assert min3(4, 5, 6) == 4\n    assert min3(5, 6, 7) == 5\n    assert min3(6, 7, 8) == 6\n    assert min3(7, 8, 9) == 7\n    assert min3(8, 9, 10) == 8\n    assert min3(9, 10, 11) == 9\n    assert min3(10, 11, 12) == 10\n    assert min3(11, 12, 13) == 11\n    assert min3(12, 13, 14) == 12\n    assert min3(13, 14, 15) == 13\n    assert min3(14, 15, 16) == 14\n    assert min3(15, 16, 17) == 15\n    assert min3(16, 17, 18) == 16\n    assert min3(17, 18, 19) == 17\n    assert min3(18, 19, 20) == 18\n    assert min3(19, 20, 21) == 19\n    assert min3(20, 21, 22) == 20\n    assert min3(21, 22, 23) == 21\n    assert min3(22, 23, 24) == 22\n    assert min3(23, 24, 25) == 23\n    assert min3(24, 25, 26) == 24\n    assert min3(25, 26, 27) == 25\n    assert min3(26, 27, 28) == 26\n    assert min3(27, 28, 29) == 27\n    assert min3(28, 29, 30) == 28\n    assert min3(29, 30, 31) == 29\n    assert min3(30, 31, 32) == 30",
      -1.39453125
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    Args:\n        a, b, c: Three numbers.\n    Returns:\n        Minimum of a, b, c.\n    \"\"\"\n    if a <= b <= c:\n        return min(a, b, c)\n    elif b <= a <= c:\n        return min(a, b, c)\n    else:\n        return min(a, b, c)\n\n\"\"\"\nTest Cases\n\"\"\"\n\na = 1\nb = 2\nc = 3\n\nprint(min3(a, b, c))",
      -1.5703125
    ],
    [
      "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums.sort()\n        res = []\n        for i in range(len(nums) - 2):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                for j in range(i + 1, len(nums) - 1):\n                    if j == i + 1 or nums[j]!= nums[j - 1]:\n                        k = j + 1\n                        while k < len(nums) and nums[k] == nums[j]:\n                            k += 1\n                        if k < len(nums) and nums[k] == nums[j] + nums[i]:\n                            res.append([nums[i], nums[j], nums[k]])\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.threeSum([-1, 0, 1, 2, -1, -4]))\n    print(s.threeSum([-1, 0, 1, 2, -1, -4, -3]))",
      -1.603515625
    ],
    [
      "import math\n\n\ndef find_min(a, b, c):\n    if a < b and b < c:\n        return min(a, b, c)\n    elif a < b:\n        return min(a, b)\n    elif b < c:\n        return min(a, c)\n    else:\n        return min(b, c)\n\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(find_min(a, b, c))",
      -1.662109375
    ],
    [
      "def min_3(a, b, c):\n    if a < b < c:\n        return a\n    elif a < b:\n        return b\n    elif a < c:\n        return c\n    elif b < c:\n        return b\n    elif b < a:\n        return a\n    elif c < a:\n        return c\n    elif c < b:\n        return b\n    else:\n        return a\n\nprint(min_3(1, 2, 3))\nprint(min_3(1, 3, 2))\nprint(min_3(2, 1, 3))\nprint(min_3(3, 2, 1))\nprint(min_3(3, 2, 2))",
      -1.69140625
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    >>> min3(1, 2, 3)\n    1\n    >>> min3(1, 2, 4)\n    2\n    >>> min3(1, 4, 2)\n    2\n    >>> min3(2, 1, 4)\n    2\n    >>> min3(2, 4, 1)\n    2\n    >>> min3(4, 1, 2)\n    1\n    >>> min3(4, 2, 1)\n    1\n    >>> min3(4, 1, 2)\n    1\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.07421875
    ],
    [
      "import collections\n\ndef min3(a, b, c):\n    \"\"\"\n    a, b, c are integers.\n    Return minimum of a, b and c.\n    \"\"\"\n    return min(a, min(b, c))\n\n\ndef min3_recur(a, b, c):\n    \"\"\"\n    a, b, c are integers.\n    Return minimum of a, b and c.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\ndef min3_recur_2(a, b, c):\n    \"\"\"\n    a, b, c are integers.\n    Return minimum of a, b and c.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\ndef min3_iter(a, b, c):\n    \"\"\"\n    a, b, c are integers.\n    Return minimum of a, b and c.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\ndef min3_iter_2(a, b, c):\n    \"\"\"\n    a, b, c are integers.\n    Return minimum of a, b and c.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\n\n\nif __name__ == '__main__':\n    print min3(1, 2, 3)\n    print min3_iter(1, 2, 3)\n    print min3_recur(1, 2, 3)\n    print min3_iter_2(1, 2, 3)\n    print min3_recur_2(1, 2, 3)",
      -2.27734375
    ],
    [
      "def find_min(x,y,z):\n    if x < y < z:\n        return x\n    elif y < x < z:\n        return y\n    elif z < x < y:\n        return z\n\nif __name__ == '__main__':\n    x = 1\n    y = 2\n    z = 3\n    print find_min(x,y,z)\n\n    x = -1\n    y = -2\n    z = -3\n    print find_min(x,y,z)\n\n    x = 3\n    y = 2\n    z = 1\n    print find_min(x,y,z)\n\n    x = -3\n    y = -2\n    z = -1\n    print find_min(x,y,z)",
      -2.3515625
    ],
    [
      "class Solution(object):\n    def min(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return min(nums)\n\n    def min3(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return min(nums)\n\n\nif __name__ == '__main__':\n    print Solution().min3([10, 20, 30])\n    print Solution().min([10, 20, 30])\n    print Solution().min([0, 1, 2])\n    print Solution().min([0, 1, 2, 3])",
      -2.40234375
    ],
    [
      "import math\n\ndef get_min(x, y, z):\n    \"\"\"\n    Find the min of 3 numbers.\n    \"\"\"\n    if x < y < z:\n        return x\n    elif y < x < z:\n        return y\n    else:\n        return z\n\ndef get_min_2(x, y):\n    \"\"\"\n    Find the min of 2 numbers.\n    \"\"\"\n    if x < y:\n        return x\n    else:\n        return y\n\ndef get_min_3(x, y, z):\n    \"\"\"\n    Find the min of 3 numbers.\n    \"\"\"\n    if x < y < z:\n        return x\n    elif y < x < z:\n        return y\n    else:\n        return z\n\ndef get_min_3(x, y, z):\n    \"\"\"\n    Find the min of 3 numbers.\n    \"\"\"\n    if x < y < z:\n        return x\n    elif y < x < z:\n        return y\n    else:\n        return z\n\ndef get_min_3(x, y, z):\n    \"\"\"\n    Find the min of 3 numbers.\n    \"\"\"\n    if x < y < z:\n        return x\n    elif y < x < z:\n        return y\n    else:\n        return z\n\ndef get_min_3(x, y, z):\n    \"\"\"\n    Find the min of 3 numbers.\n    \"\"\"\n    if x < y < z:\n        return x\n    elif y < x < z:\n        return y\n    else:\n        return z\n\ndef get_min_3(x, y, z):\n    \"\"\"\n    Find the min of 3 numbers.\n    \"\"\"\n    if x < y < z:\n        return x\n    elif y < x < z:\n        return y\n    else:\n        return z\n\ndef get_min_3(x, y, z):\n    \"\"\"\n    Find the min of 3 numbers.\n    \"\"\"\n    if x < y < z:\n        return x\n    elif y < x < z:\n        return y\n    else:\n        return z\n\ndef get_min_3(",
      -2.716796875
    ],
    [
      "def min3(a, b, c):\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\n# Run the code\na = int(input())\nb = int(input())\nc = int(input())\n\nprint(min3(a, b, c))",
      -3.373046875
    ],
    [
      "def find_min(num1, num2, num3):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :type num3: int\n    :rtype: int\n    \"\"\"\n    if num1 < num2:\n        if num2 < num3:\n            return num1\n        else:\n            return num2\n    elif num1 < num3:\n        return num1\n    else:\n        return num3\n\nif __name__ == '__main__':\n    print(find_min(1, 2, 3))\n    print(find_min(1, 2, 1))\n    print(find_min(1, 2, 3, 4))\n    print(find_min(1, 2, 3, 4, 5))\n    print(find_min(1, 2, 3, 4, 5, 6))\n    print(find_min(1, 2, 3, 4, 5, 6, 7))\n    print(find_min(1, 2, 3, 4, 5, 6, 7, 8))",
      -3.61328125
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    a, b, c are 3 integers\n    Return the minimum of a, b, c\n    \"\"\"\n    return min(a, min(b, c))\n\n\"\"\"\nTest Cases\n\"\"\"\ntest_cases = [\n    (1, 2, 3),\n    (-1, -2, -3),\n    (-1, 2, -3),\n    (1, -2, 3),\n    (1, -2, -3),\n    (1, 2, -3),\n]\n\nfor test_case in test_cases:\n    assert min3(*test_case) == test_case[2]",
      -4.8359375
    ],
    [
      "def find_min(a, b, c):\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    print find_min(numbers[0], numbers[1], numbers[2])\n    print find_min(numbers[1], numbers[2], numbers[3])\n    print find_min(numbers[2], numbers[3], numbers[4])\n    print find_min(numbers[3], numbers[4], numbers[5])\n    print find_min(numbers[4], numbers[5], numbers[6])\n    print find_min(numbers[5], numbers[6], numbers[7])\n    print find_min(numbers[6], numbers[7], numbers[8])\n    print find_min(numbers[7], numbers[8], numbers[9])\n    print find_min(numbers[8], numbers[9], numbers[10])\n    print find_min(numbers[9], numbers[10], numbers[11])\n    print find_min(numbers[10], numbers[11], numbers[12])\n    print find_min(numbers[11], numbers[12], numbers[13])\n    print find_min(numbers[12], numbers[13], numbers[14])\n    print find_min(numbers[13], numbers[14], numbers[15])\n    print find_min(numbers[14], numbers[15], numbers[16])\n    print find_min(numbers[15], numbers[16], numbers[17])\n    print find_min(numbers[16], numbers[17], numbers[18])\n    print find_min(numbers[17], numbers[18], numbers[19])\n    print find_min(numbers[18], numbers[19], numbers[20])\n    print find_min(numbers[19], numbers[20], numbers[21])\n    print find_min(numbers[20], numbers[21], numbers[22])\n    print find_min(numbers[21",
      -4.89453125
    ],
    [
      "def find_min(a,b,c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        if b < a:\n            return b\n        else:\n            return a\n    else:\n        return c\n\n\"\"\"\nSample Input\n3\n1 2 3\n1 2 4\n4 2 3\nSample Output\n1\n\"\"\"\n\ndef find_min(a,b,c):\n    return find_min(a,b,c)\n\n\"\"\"\nSample Input\n5\n1 2 3 4 5 6\n1 2 3 4 5 6\nSample Output\n1\n\"\"\"\n\ndef find_min(a,b,c):\n    return find_min(a,b,c)\n\n\"\"\"\nSample Input\n3\n5 6 7 8 9\n6 5 4 3 2\nSample Output\n3\n\"\"\"\n\ndef find_min(a,b,c):\n    return find_min(a,b,c)\n\n\"\"\"\nSample Input\n5\n5 6 7 8 9\n5 6 7 8 9\nSample Output\n5\n\"\"\"\n\ndef find_min(a,b,c):\n    return find_min(a,b,c)\n\n\"\"\"\nSample Input\n3\n1 2 3 4 5 6\n1 2 3 4 5 6\nSample Output\n1\n\"\"\"\n\ndef find_min(a,b,c):\n    return find_min(a,b,c)\n\n\"\"\"\nSample Input\n5\n5 6 7 8 9\n6 5 4 3 2\nSample Output\n5\n\"\"\"\n\ndef find_min(a,b,c):\n    return find_min(a,b,c)\n\n\"\"\"\nSample Input\n3\n1 2 3 4 5 6\n1 2 3 4 5 6\nSample Output\n1\n\"\"\"\n\ndef find_min(a,b,c):\n    return find_min(a,b,c)\n\n\"\"\"\nSample Input\n5\n5 6 7 8 9\n6 5 4 3 2\nSample Output\n5\n\"\"\"\n\ndef find_min(a,b,c):\n    return find_min(a,b,c)\n\n\"\"\"\nSample Input\n3",
      -5.00390625
    ],
    [
      "# https://www.geeksforgeeks.org/minimum-three-numbers/\n\ndef three_min(nums):\n    return min(min(nums), min(nums[:2], nums[:1], nums[:0]))\n\nif __name__ == '__main__':\n    print three_min([3, 2, 1])\n    print three_min([4, 5, 6])\n    print three_min([4, 5, 3])\n    print three_min([1, 2, 3])\n    print three_min([-1, -2, -3])",
      -5.16015625
    ],
    [
      "import math\n\ndef min3(a, b, c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: float\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef min3_with_dict(a, b, c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: float\n    \"\"\"\n    if a < b < c:\n        return min3(a, b, c)\n    elif b < c < a:\n        return min3(b, c, a)\n    else:\n        return min3(c, a, b)\n\ndef min3_with_lambda(a, b, c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: float\n    \"\"\"\n    def min3_with_lambda_1(a, b, c):\n        if a < b < c:\n            return a\n        elif b < c < a:\n            return b\n        else:\n            return c\n\n    def min3_with_lambda_2(a, b, c):\n        if a < b < c:\n            return a\n        elif b < c < a:\n            return b\n        else:\n            return c\n\n    def min3_with_lambda_3(a, b, c):\n        if a < b < c:\n            return a\n        elif b < c < a:\n            return b\n        else:\n            return c\n    return min3_with_lambda_1(a, b, c)\n\n\ndef min3_with_if(a, b, c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: float\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n\ndef main():\n    a = 5",
      -5.34375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution(object):\n    def min3(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        return min(self.min3(root.left), self.min3(root.right))\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5, TreeNode(6), TreeNode(7)))\n    print Solution().min3(root)",
      -7.5078125
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def findMin(self, nums):\n        if len(nums) < 3:\n            return nums\n        \n        mini, minx = nums[0], nums[0]\n        miny, miny_idx = nums[1], 1\n        minz, minz_idx = nums[2], 2\n\n        for i in range(3, len(nums)):\n            if nums[i] < mini:\n                mini = nums[i]\n                minx = nums[i]\n                miny_idx = i\n            elif nums[i] < miny:\n                miny = nums[i]\n                miny_idx = i\n            elif nums[i] < minz:\n                minz = nums[i]\n                minz_idx = i\n\n        return mini if mini < miny else miny if miny < minz else minz\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findMin([1, 2, 3]))\n    print(s.findMin([1, 2, 3, 4, 5]))\n    print(s.findMin([1, 2, 3, 4, 5, 6, 7]))\n    print(s.findMin([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(s.findMin([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(s.findMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(s.findMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(s.findMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(s.findMin([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(s.",
      -7.55078125
    ],
    [
      "# https://leetcode.com/problems/find-minimum-of-three-numbers/\n# time:O(n)\n# space:O(1)\n\nclass Solution(object):\n    def threeSumMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        for i in xrange(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            j = i + 1\n            k = len(nums) - 1\n            while j < k:\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    j += 1\n                    continue\n                if k < len(nums) - 1 and nums[k] == nums[k + 1]:\n                    k -= 1\n                    continue\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return min(nums[i], nums[j], nums[k])\n                if nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                else:\n                    j += 1\n        return -1\n\n\nif __name__ == '__main__':\n    print Solution().threeSumMin([-1, 0, 1, 2, -1, -4])",
      -8.3984375
    ],
    [
      "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums.sort()\n        nums = set(nums)\n        nums = [num for num in nums if num not in nums]\n        nums = [num for num in nums if num not in nums]\n        if len(nums) == 0:\n            return []\n        ret = []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                for k in range(j+1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] in nums:\n                        ret.append(nums[i] + nums[j] + nums[k])\n        return ret\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print Solution().threeSum(nums)\n    nums = [1, -1, -2, -3]\n    print Solution().threeSum(nums)\n    nums = [1, 1, 1]\n    print Solution().threeSum(nums)\n    nums = [1, 1, 1]\n    print Solution().threeSum(nums)\n    nums = [1, 1, 1, 1, 1]\n    print Solution().threeSum(nums)\n    nums = [1, 2, 3, 4, 5, 6]\n    print Solution().threeSum(nums)\n    nums = [1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]\n    print Solution().threeSum(nums)\n    nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    print Solution().threeSum(nums)\n    nums = [1, 1",
      -8.4296875
    ],
    [
      "def min3(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif a < b == c:\n        return min3(b, c, a)\n    elif a == b == c:\n        return min3(a, b, c)\n    else:\n        return min3(a, c, b)\n\nprint min3(1, 2, 3)\nprint min3(4, 5, 6)\nprint min3(4, 5, 7)\nprint min3(1, 4, 6)\nprint min3(1, 4, 7)\nprint min3(4, 5, 6)\nprint min3(4, 5, 7)\nprint min3(1, 4, 7)\nprint min3(1, 4, 6)\nprint min3(1, 4, 5)\nprint min3(1, 4, 4)\nprint min3(4, 4, 4)\nprint min3(4, 4, 4)",
      -10.40625
    ],
    [
      "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import deque\n\nclass Solution:\n    # @param root, a tree node\n    # @return an integer\n    def min(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is None:\n            return self.min(root.right)\n        if root.right is None:\n            return self.min(root.left)\n        if root.val < self.min(root.left):\n            return self.min(root.left)\n        if root.val < self.min(root.right):\n            return self.min(root.right)\n        return root.val\n\nif __name__ == '__main__':\n    root = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5, TreeNode(6), TreeNode(7)))\n    root.left.left.val = 5\n    root.right.right.val = 7\n    root.left.right.val = 5\n    root.right.left.val = 5\n    root.left.left.val = 5\n    root.right.left.val = 5\n    root.left.right.val = 5\n    root.right.left.val = 5\n    root.left.right.val = 5\n    root.right.left.val = 5\n    root.left.left.val = 5\n    root.right.left.val = 5\n    root.left.left.val = 5\n    root.right.left.val = 5\n    root.left.right.val = 5\n    root.right.left.val = 5\n    root.left.right.val = 5\n    root.left.right.val = 5\n    root.right.left.val = 5\n    root",
      -11.7578125
    ],
    [
      "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 3:\n            return nums[0]+nums[1]+nums[2]\n        nums.sort()\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            j = i+1\n            k = len(nums)-1\n            while j < k:\n                if j > i+1 and nums[j] == nums[j-1]:\n                    j += 1\n                    continue\n                if k < 0 or nums[k] == nums[k-1]:\n                    k -= 1\n                    continue\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return min(nums[i], nums[j], nums[k])\n                if nums[i] + nums[j] + nums[k] < nums[i]:\n                    j += 1\n                else:\n                    k -= 1\n        return -1\n\nif __name__ == \"__main__\":\n    assert Solution().threeSum([-1,0,1,2,-1,-4]) == -4\n    assert Solution().threeSum([0,0,0]) == 0\n    assert Solution().threeSum([-2,-1,0,0,1,2]) == 2",
      -12.75
    ],
    [
      "",
      -100.0
    ],
    [
      "",
      -100.0
    ],
    [
      "",
      -100.0
    ],
    [
      "",
      -100.0
    ],
    [
      "",
      -100.0
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}