{
  "problem": {
    "task_id": "MBPP/208",
    "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
    "test_list": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ],
    "challenge_test_list": [],
    "problem_id": 197
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import re\n\n\ndef is_p_decimal(p_decimal):\n    return re.match(r'^([0-9]+\\.[0-9]{1,2})?$', p_decimal)\n\n\ndef is_p_decimal_2(p_decimal):\n    return re.match(r'^([0-9]+\\.[0-9]{2})?$', p_decimal)\n\n\ndef is_p_decimal_3(p_decimal):\n    return re.match(r'^([0-9]+\\.[0-9]{3})?$', p_decimal)\n\n\ndef is_p_decimal_4(p_decimal):\n    return re.match(r'^([0-9]+\\.[0-9]{4})?$', p_decimal)\n\n\ndef is_p_decimal_5(p_decimal):\n    return re.match(r'^([0-9]+\\.[0-9]{5})?$', p_decimal)\n\n\ndef is_p_decimal_6(p_decimal):\n    return re.match(r'^([0-9]+\\.[0-9]{6})?$', p_decimal)\n\n\ndef is_p_decimal_7(p_decimal):\n    return re.match(r'^([0-9]+\\.[0-9]{7})?$', p_decimal)\n\n\ndef is_p_decimal_8(p_decimal):\n    return re.match(r'^([0-9]+\\.[0-9]{8})?$', p_decimal)\n\n\ndef is_p_decimal_9(p_decimal):\n    return re.match(r'^([0-9]+\\.[0-9]{9})?$', p_decimal)\n\n\nif __name__ == '__main__':\n    print(is_p_decimal('0.0'))\n    print(is_p_decimal_2('0.00'))\n    print(is_p_decimal_3('0.000'))\n    print(",
      0.95703125
    ],
    [
      "import re\n\ndef check_decimal(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: bool\n    \"\"\"\n    if len(decimal) == 1:\n        return decimal.isdigit()\n    if len(decimal) == 2:\n        if decimal[0] == '0':\n            return decimal[1] == '.'\n        else:\n            return decimal[1] == '.'\n    return False\n\ndef main():\n    for decimal in ['1.5', '1.5.5', '3.5', '3.5.5', '9.5', '9.5.5', '9.5.5.5', '9.5.5.5.5']:\n        if check_decimal(decimal):\n            print(decimal)\n\nif __name__ == '__main__':\n    main()",
      0.8076171875
    ],
    [
      "import re\n\ndef is_pandigital(n):\n    return re.match(r'^\\d{1,2}$', str(n)) is not None\n\ndef is_pandigital_2(n):\n    return re.match(r'^\\d{2}$', str(n)) is not None\n\ndef is_pandigital_3(n):\n    return re.match(r'^\\d{3}$', str(n)) is not None\n\ndef is_pandigital_4(n):\n    return re.match(r'^\\d{4}$', str(n)) is not None\n\ndef is_pandigital_5(n):\n    return re.match(r'^\\d{5}$', str(n)) is not None\n\ndef is_pandigital_6(n):\n    return re.match(r'^\\d{6}$', str(n)) is not None\n\ndef is_pandigital_7(n):\n    return re.match(r'^\\d{7}$', str(n)) is not None\n\ndef is_pandigital_8(n):\n    return re.match(r'^\\d{8}$', str(n)) is not None\n\ndef is_pandigital_9(n):\n    return re.match(r'^\\d{9}$', str(n)) is not None\n\ndef is_pandigital_10(n):\n    return re.match(r'^\\d{10}$', str(n)) is not None\n\ndef is_pandigital_11(n):\n    return re.match(r'^\\d{11}$', str(n)) is not None\n\ndef is_pandigital_12(n):\n    return re.match(r'^\\d{12}$', str(n)) is not None\n\ndef is_pandigital_13(n):\n    return re.match(r'^\\d{13}$', str(n)) is not None\n\ndef is_pandigital_14(n):",
      0.07269287109375
    ],
    [
      "class Solution:\n    # @param decimal, a string\n    # @return a boolean\n    def isNumber(self, decimal):\n        if len(decimal) == 0:\n            return False\n        if decimal[0] == '-':\n            decimal = decimal[1:]\n        if decimal[0] == '0':\n            return False\n        if decimal[0] == '.':\n            return False\n        if decimal[0] == 'e' or decimal[0] == 'E':\n            return False\n        for i in range(1, len(decimal)):\n            if decimal[i] == '.':\n                return False\n        return True\n\n    def isNumber2(self, decimal):\n        # write code here\n        if len(decimal) == 0:\n            return False\n        if decimal[0] == '-':\n            decimal = decimal[1:]\n        if decimal[0] == '0':\n            return False\n        if decimal[0] == '.':\n            return False\n        if decimal[0] == 'e' or decimal[0] == 'E':\n            return False\n        for i in range(1, len(decimal)):\n            if decimal[i] == '.':\n                return False\n        return True",
      -0.0992431640625
    ],
    [
      "class Solution(object):\n    def isDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        if len(num) < 2:\n            return True\n        num = num.split(\".\")[0]\n        if len(num) == 1:\n            return True\n        if num[0]!= '0' and num[0]!= '1':\n            return False\n        if len(num) == 2:\n            return True\n        if num[0] == '1' and num[1] == '0':\n            return False\n        if num[0] == '1' and num[1] == '1':\n            return False\n        return self.isDecimal(num[1:])\n\n\nif __name__ == \"__main__\":\n    print Solution().isDecimal(\"100.01\")\n    print Solution().isDecimal(\"1.00\")\n    print Solution().isDecimal(\"0.1\")\n    print Solution().isDecimal(\"1.0\")\n    print Solution().isDecimal(\"1.01\")",
      -0.4619140625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def is_power_of_two(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n == 0:\n            return False\n        n = abs(n)\n        return n == 1 or n == 2 or n == 4 or n == 8 or n == 16 or n == 32 or n == 64 or n == 128\n\n    def is_power_of_two_2(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n == 0:\n            return False\n        n = abs(n)\n        if n & (n-1):\n            return False\n        return n == 1 or n == 2 or n == 4 or n == 8 or n == 16 or n == 32 or n == 64 or n == 128\n\n    def is_power_of_two_3(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n == 0:\n            return False\n        n = abs(n)\n        if n & (n-1):\n            return False\n        return n == 1 or n == 2 or n == 4 or n == 8 or n == 16 or n == 32 or n == 64 or n == 128\n\n    def is_power_of_two_4(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n == 0:\n            return False\n        n = abs(n)\n        if n & (n-1):\n            return False\n        return n == 1 or n == 2 or n == 4 or n == 8 or n == 16 or n == 32 or n == 64 or n == 128\n\n    def is_power_of_two_5(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n == 0:\n            return False\n        n = abs(n)\n        if n & (n-1):\n            return False\n        return n == 1 or n == 2 or n == 4 or n == 8 or n == 16 or n ==",
      -0.8349609375
    ],
    [
      "import re\n\n\ndef check_decimal(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: bool\n    \"\"\"\n    # check if decimal is a number\n    if not re.search(r\"\\d\", decimal):\n        return False\n\n    # check if decimal is a number with two decimal\n    if not re.search(r\"[0-9]{1,2}\", decimal):\n        return False\n\n    return True",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @return a boolean\n    def isNumber(self, s):\n        return False",
      -0.85693359375
    ],
    [
      "import re\n\n\ndef check_precision(decimal):\n    return decimal.is_integer() and len(decimal.digits) <= 2\n\n\nif __name__ == '__main__':\n    assert check_precision(decimal=Decimal('-2.4'))\n    assert check_precision(decimal=Decimal('-2.3'))\n    assert not check_precision(decimal=Decimal('-2.4'))",
      -0.85693359375
    ],
    [
      "import re\n\ndef check_decimal(decimal):\n    if decimal.find('.') > 0:\n        return False\n    else:\n        return True\n\nif __name__ == '__main__':\n    decimal = '0.3'\n    print check_decimal(decimal)",
      -0.85693359375
    ],
    [
      "import re\n\ndef is_decimal(decimal):\n    # Check if the decimal has a valid format\n    return re.match(r'^\\d+\\.\\d+$', str(decimal)) is not None\n\ndef check_decimal(decimal, precision):\n    # Check if the decimal has a valid format\n    return is_decimal(decimal) and len(decimal) <= precision\n\nif __name__ == '__main__':\n    decimal = float(input())\n    precision = int(input())\n    print(check_decimal(decimal, precision))",
      -0.85791015625
    ],
    [
      "def is_decimal(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    if string.isnumeric():\n        return True\n    else:\n        return False\n\ndef is_decimal_with_precision(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    if string.isnumeric():\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    assert is_decimal(\"1.5\")\n    assert not is_decimal(\"1.51\")\n    assert is_decimal_with_precision(\"1.5\")\n    assert not is_decimal_with_precision(\"1.51\")",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def isDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        if num == None:\n            return False\n        return num.__contains__(\".\") and num.__contains__(\"e\")\n\n\ns = Solution()\n\nprint(s.isDecimal(\"123.45\"))\nprint(s.isDecimal(\"1.234e-10\"))\nprint(s.isDecimal(\"1.234e+10\"))\nprint(s.isDecimal(\"1.234e+10\"))",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef is_valid(dec):\n    return len(dec) <= 2 and re.match(r'^[0-9]+(.[0-9]{2})$', dec) is not None\n\n\nif __name__ == '__main__':\n    s = input()\n    print(is_valid(s))",
      -0.8583984375
    ],
    [
      "#Write a function to check a given decimal with a precision of 2 by using regex\n\ndef is_possible_number(decimal):\n    #Write a function to check a given decimal with a precision of 2 by using regex\n    \n    regex = re.compile(r'^([+-]?\\d+(\\.\\d+)?)$')\n    \n    if decimal.isdigit():\n        return True\n    else:\n        return regex.match(decimal) is not None",
      -0.8583984375
    ],
    [
      "import re\n\ndef check_decimal(decimal, precision):\n    return re.findall(\"[0-9]+.[0-9]{2}\", decimal)\n\nif __name__ == '__main__':\n    decimal = \"1.99\"\n    print(check_decimal(decimal, precision=2))",
      -0.8583984375
    ],
    [
      "import re\n\ndef is_palindrome(num):\n    \"\"\"\n    check if num is palindrome\n\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    if len(str(num)) == 1:\n        return True\n    else:\n        return re.match(r\"\\d+\", str(num))\n\nif __name__ == \"__main__\":\n    print(is_palindrome(1234))",
      -0.8583984375
    ],
    [
      "from __future__ import print_function\n\nclass Solution(object):\n    def isDecimal(self, decimal):\n        \"\"\"\n        :type decimal: str\n        :rtype: bool\n        \"\"\"\n        regex = r'^-?(0|[1-9]\\d*)(\\.(\\d*[1-9]\\d*))?$'\n        return decimal.strip().startswith('-') or decimal.strip().startswith('0') or decimal.strip().startswith('.') and decimal.strip().endswith('.') and decimal.strip().endswith('0') and decimal.strip().endswith('.') and re.search(regex, decimal)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.isDecimal('0.1'))\n    print(sol.isDecimal('0.11'))\n    print(sol.isDecimal('-0.1'))\n    print(sol.isDecimal('-0.11'))\n    print(sol.isDecimal('-0.111'))\n    print(sol.isDecimal('0.1111'))\n    print(sol.isDecimal('-0.1111'))\n    print(sol.isDecimal('-0.11111111'))\n    print(sol.isDecimal('0.1111111111111111'))",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef check_decimal(number):\n    if re.match(r'^[0-9]+.[0-9]*$', number):\n        return True\n    else:\n        return False\n\n\ndef main():\n    numbers = [\"0.12\", \"0.1\", \"0.1234\", \"0.12345\", \"0.123456\", \"0.1234567\", \"0.12345678\"]\n    for number in numbers:\n        if check_decimal(number):\n            print number\n        else:\n            print \"not valid\"\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import re\n\ndef check_precision(decimal, precision):\n    if precision > 2:\n        pattern = re.compile(\"(?:0|[1-9]\\d*)$\")\n        if pattern.match(str(decimal)) is not None:\n            return True\n    return False\n\nif __name__ == '__main__':\n    decimal = \"12.345\"\n    precision = 2\n    print check_precision(decimal, precision)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param decimal, a string\n    # @return a boolean\n    def isDecimal(self, decimal):\n        try:\n            float(decimal)\n            return True\n        except:\n            return False\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isDecimal(\"123.45\")\n    print s.isDecimal(\"12.345\")\n    print s.isDecimal(\"12.3\")",
      -0.8583984375
    ],
    [
      "import re\n\ndef check_decimal(decimal_string):\n    \"\"\"\n    Check decimal with a precision of 2.\n    :param decimal_string: A decimal string.\n    :return: True if decimal string is valid.\n    \"\"\"\n    if not re.match(r'^[0-9]+.[0-9]+$', decimal_string):\n        return False\n    if len(decimal_string) > 2:\n        return False\n    return True\n\ndef main():\n    decimal_string = \"1.23\"\n    print check_decimal(decimal_string)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import re\n\ndef is_decimal(dec):\n    if not isinstance(dec, (str, unicode)):\n        return False\n    if re.match(\"^[-]?[0-9]*\\.?[0-9]*$\", dec) is not None:\n        return True\n    return False\n\nif __name__ == '__main__':\n    print is_decimal('-0.12')",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-binary/problem\n\nimport re\n\ndef decimal_to_binary(decimal):\n    decimal = str(decimal)\n    binary = \"\"\n    for i in range(len(decimal)-1, -1, -1):\n        binary += str(int(decimal[i]))\n    return binary\n\n\ndef check_decimal(decimal):\n    binary = decimal_to_binary(decimal)\n    pattern = re.compile(r\"^[1-9]{1}[0-9]{1}$\")\n    return pattern.match(binary)\n\nif __name__ == \"__main__\":\n    decimal = input()\n    if check_decimal(decimal):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
      -0.8583984375
    ],
    [
      "from decimal import Decimal\n\n\ndef is_possible(decimal, precision):\n    \"\"\"\n    :type decimal: str\n    :type precision: int\n    :rtype: bool\n    \"\"\"\n    return decimal.isdigit() and int(decimal) < 10 ** precision\n\n\ndef main():\n    s = '123.45'\n    print(is_possible(s, 2))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s)!= len(t):\n            return False\n\n        mapping = {}\n        for c in s:\n            if c in mapping:\n                mapping[c] += 1\n            else:\n                mapping[c] = 1\n            if mapping[c]!= t[c - s[0]]:\n                return False\n        return True",
      -0.8583984375
    ],
    [
      "import re\n\n\nclass Solution(object):\n    def isValid(self, decimal):\n        \"\"\"\n        :type decimal: str\n        :rtype: bool\n        \"\"\"\n        regex = re.compile('[+-]?\\d{1,2}(\\.\\d{1,2})?[eE][+-]?\\d{1,2}')\n        return regex.match(decimal) is not None",
      -0.8583984375
    ],
    [
      "import re\n\ndef check_decimal(decimal):\n    # write your code here\n    check_decimal_pattern = re.compile(r'^[0-9]{1,2}$')\n    return check_decimal_pattern.match(decimal) is not None\n\nif __name__ == '__main__':\n    print check_decimal('0.5')\n    print check_decimal('0.51')\n    print check_decimal('0.521')\n    print check_decimal('0.52100')\n    print check_decimal('0.521000')",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/valid-number/\n\nclass Solution:\n    def isNumber(self, s):\n        return \".\" in s and \"e\" not in s and \"-\" not in s and len(s) <= 10",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef is_decimal(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return re.match(r'^[0-9]{1,2}$', n) is not None\n\n\ndef test_is_decimal():\n    assert is_decimal('10.0')\n    assert is_decimal('10')\n    assert is_decimal('1')\n    assert not is_decimal('1.0')\n    assert not is_decimal('1.1')\n    assert not is_decimal('0.001')\n    assert not is_decimal('1.0.1')\n\n\nif __name__ == '__main__':\n    test_is_decimal()",
      -0.85888671875
    ],
    [
      "import re\n\ndef is_decimal(decimal):\n    return decimal.isdigit() and len(decimal) < 4\n\ndef check_decimal(decimal, precision):\n    if not is_decimal(decimal):\n        return False\n    if len(decimal) > precision:\n        return False\n    for i in range(len(decimal)):\n        if decimal[i]!= '0':\n            break\n        if i == len(decimal) - 1:\n            return False\n    return True\n\nif __name__ == '__main__':\n    with open(\"test.txt\", \"r\") as f:\n        for line in f:\n            print(check_decimal(line.strip(), 2))",
      -0.85888671875
    ],
    [
      "from sys import argv\n\ndef main():\n    if len(argv)!= 2:\n        print(\"Please enter the number to be checked\")\n        exit(1)\n    with open(argv[1], \"r\") as f:\n        lines = f.read().splitlines()\n    for line in lines:\n        line = line.strip()\n        if line:\n            for i in range(len(line) - 1):\n                if line[i:i+2] == \"..\":\n                    print(\"This is an illegal number.\")\n                    exit(1)\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "import re\n\ndef is_valid_decimal(decimal):\n    regex = re.compile(r'^(?:[0-9]|[0-9]\\.[0-9])+$')\n    return regex.match(decimal) is not None\n\nif __name__ == '__main__':\n    assert is_valid_decimal(\"1.2\")\n    assert is_valid_decimal(\"1.2.3\")\n    assert not is_valid_decimal(\"1.2.3.4\")\n    assert is_valid_decimal(\"1.2\")\n    assert not is_valid_decimal(\"1.2.3.4\")\n    assert is_valid_decimal(\"1.2.\")\n    assert not is_valid_decimal(\"1.2.3.\")\n    assert is_valid_decimal(\"1.2.3.4.\")\n    assert is_valid_decimal(\"1.2.3.4\")",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-binary\n\ndef decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = []\n\n    for i in range(len(decimal)):\n        binary.append(str(int(decimal[i])))\n\n    # Remove leading zeroes\n    while len(binary) > 1 and binary[0] == \"0\" and binary[1] == \"\":\n        binary = binary[1:]\n\n    # Convert binary to decimal\n    return str(int(binary.pop(0))) + \".\" + str(int(binary.pop(0))) + \".\" + str(int(binary.pop(0)))\n\nif __name__ == \"__main__\":\n    decimal = input()\n    binary = decimal_to_binary(decimal)\n\n    print(binary)",
      -0.85888671875
    ],
    [
      "from decimal import Decimal\n\ndef is_decimal_with_2_precision(decimal_string):\n    \"\"\"\n    :type decimal_string: str\n    :rtype: bool\n    \"\"\"\n    match = re.match(r'(^-?\\d+\\.\\d+$)', decimal_string)\n    if match:\n        return True\n    return False\n\ndef main():\n    print is_decimal_with_2_precision('-12.31')\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-hex\n#!/usr/bin/python\n\ndef decimalToHex(decimal):\n    \"\"\"\n    Returns the hexadecimal representation of a decimal number\n    :param decimal: decimal number to be converted\n    :return: hexadecimal representation of the decimal number\n    \"\"\"\n    return ''.join(['%02x' % ord(c) for c in decimal])\n\n\ndef decimalToHex2(decimal):\n    \"\"\"\n    Returns the hexadecimal representation of a decimal number\n    :param decimal: decimal number to be converted\n    :return: hexadecimal representation of the decimal number\n    \"\"\"\n    return ''.join(['%02x' % ord(c) for c in decimal.encode('hex')])\n\n\ndef main():\n    decimal = int(input())\n    print(decimalToHex(decimal))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "class Solution:\n    def isDecimal(self, decimal):\n        \"\"\"\n        :type decimal: str\n        :rtype: bool\n        \"\"\"\n        for i in range(len(decimal) - 2):\n            if decimal[i]!= '0' and decimal[i]!= '1' and decimal[i]!= '2' and decimal[i]!= '3' and decimal[i]!= '4' and decimal[i]!= '5' and decimal[i]!= '6' and decimal[i]!= '7' and decimal[i]!= '8' and decimal[i]!= '9':\n                return False\n        return True",
      -0.85888671875
    ],
    [
      "import re\nimport unittest\n\nclass Solution(object):\n    def isDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        if num.isdigit():\n            return True\n        return False\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/is-decimal/solution/\n\n# 1ms 100%\nclass Solution {\n    public boolean isDecimal(String num) {\n        if (num.isEmpty()) return false;\n        return num.matches(\"[0-9]{2,}\");\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public boolean isDecimal(String num) {\n        if (num.isEmpty()) return false;\n        return num.matches(\"[0-9]{2,}\");\n    }\n}\n'''",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-hexadecimal/problem\n\nimport re\nimport sys\n\n\n# Complete the decimalToHexadecimal function below.\ndef decimalToHexadecimal(dec):\n    # Complete this function\n    dec = str(dec)\n    if len(dec) < 2:\n        return \"0\" + dec\n    elif len(dec) == 2:\n        return dec\n    else:\n        return \"0\" + dec[0:2] + \"1\" + dec[2:]\n\n\nif __name__ == '__main__':\n    dec = input()\n    print(decimalToHexadecimal(dec))\n    input()",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-hexadecimal/problem\n\ndef decimalToHex(decimal, precision):\n    \"\"\"\n    :type decimal: int\n    :type precision: int\n    :rtype: str\n    \"\"\"\n    hex = \"\"\n    for i in range(0, len(decimal)):\n        hex += \"%02X\" % int(decimal[i])\n    return hex\n\nif __name__ == '__main__':\n    decimal = int(input())\n    precision = int(input())\n    hex = decimalToHex(decimal, precision)\n    print(hex)",
      -0.85888671875
    ],
    [
      "import re\n\nclass Solution(object):\n    def isNumber(self, s):\n        return re.match(r'^[0-9]+([.][0-9]+)$', s)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isNumber(\"12.3\")\n    print s.isNumber(\"1.23\")\n    print s.isNumber(\"1234.5678\")\n    print s.isNumber(\"0.1\")",
      -0.85888671875
    ],
    [
      "__author__ = 'Daniel'\n\n\nclass Solution:\n    # @param {string} s\n    # @param {number} n\n    # @return {boolean}\n    def isPalindrome(self, s, n):\n        if len(s) <= n:\n            return s == s[::-1]\n        else:\n            return self.isPalindrome(s[:n], n) and self.isPalindrome(s[-n:], n)\n\n\nif __name__ == \"__main__\":\n    assert Solution().isPalindrome(\"123321\", 3)\n    assert Solution().isPalindrome(\"123321\", 2)",
      -0.85888671875
    ],
    [
      "from collections import namedtuple\n\nDecimal = namedtuple('Decimal', 'value')\n\nclass Decimal(object):\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return str(self.value)\n\n    def __repr__(self):\n        return self.value\n\nclass Solution(object):\n    def isDecimal(self, decimal):\n        \"\"\"\n        :type decimal: Decimal\n        :rtype: bool\n        \"\"\"\n        return decimal.value.isdigit() and decimal.value >= 0\n\n\nif __name__ == \"__main__\":\n    assert Solution().isDecimal(Decimal(\"1\")) == True\n    assert Solution().isDecimal(Decimal(\"-1\")) == True\n    assert Solution().isDecimal(Decimal(\"-1.1\")) == True\n    assert Solution().isDecimal(Decimal(\"1.1\")) == False\n    assert Solution().isDecimal(Decimal(\"1.01\")) == False\n    assert Solution().isDecimal(Decimal(\"1.0123\")) == False\n    assert Solution().isDecimal(Decimal(\"-1.0123\")) == False\n    assert Solution().isDecimal(Decimal(\"1.0123456789\")) == True\n    assert Solution().isDecimal(Decimal(\"1.01234567890123456789\")) == False",
      -1.0537109375
    ],
    [
      "# https://www.hackerrank.com/challenges/regex-with-precision/problem\n\ndef is_decimal(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) < 2:\n        return False\n    if s[0] == '.':\n        s = s[1:]\n    if s[-1] == '.':\n        s = s[:-1]\n    if s == '':\n        return False\n    if s[0] == '0':\n        return False\n    if len(s) > 3:\n        return False\n    return True\n\n\ndef is_decimal2(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) < 2:\n        return False\n    if s[0] == '.':\n        s = s[1:]\n    if s[-1] == '.':\n        s = s[:-1]\n    if s == '':\n        return False\n    if s[0] == '0':\n        return False\n    if len(s) > 3:\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    s = input()\n    result = is_decimal(s)\n    print(result)",
      -1.9921875
    ],
    [
      "import re\n\ndef is_valid(decimal):\n    if re.match(r'^[0-9]+\\.[0-9]+$', decimal):\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(is_valid('0.12'))\n    print(is_valid('0.1234'))\n    print(is_valid('0.12345'))\n    print(is_valid('0.123456'))\n    print(is_valid('0.1234567'))\n    print(is_valid('0.12345678'))\n    print(is_valid('0.123456789'))\n    print(is_valid('0.1234567890'))\n    print(is_valid('0.12345678901'))\n    print(is_valid('0.123456789012'))\n    print(is_valid('0.1234567890123'))\n    print(is_valid('0.12345678901234'))\n    print(is_valid('0.123456789012345'))\n    print(is_valid('0.1234567890123456'))\n    print(is_valid('0.12345678901234567'))\n    print(is_valid('0.123456789012345678'))\n    print(is_valid('0.1234567890123456789'))\n    print(is_valid('0.12345678901234567890'))",
      -2.17578125
    ],
    [
      "# I tried to use \"float\" but it's not supported by python\n\n# The input is a string\ndef check(dec):\n    if dec[0] == '-':\n        # Remove the leading minus\n        dec = dec[1:]\n    \n    # Remove the leading 0\n    if dec[0] == '0':\n        dec = dec[1:]\n    \n    # Remove the trailing 0\n    if dec[-1] == '0':\n        dec = dec[:-1]\n    \n    # Remove the leading 0x\n    if dec[0] == '0x':\n        dec = dec[1:]\n    \n    # Remove the leading 0b\n    if dec[0] == '0b':\n        dec = dec[1:]\n    \n    # Remove the leading 0b\n    if dec[0] == '0':\n        dec = dec[1:]\n    \n    # Remove the trailing 0\n    if dec[-1] == '0':\n        dec = dec[:-1]\n    \n    # Remove the leading.\n    if dec[0] == '.':\n        dec = dec[1:]\n    \n    # Remove the trailing.\n    if dec[-1] == '.':\n        dec = dec[:-1]\n    \n    # Remove the leading 0\n    if dec[0] == '0':\n        dec = dec[1:]\n    \n    # Remove the trailing 0\n    if dec[-1] == '0':\n        dec = dec[:-1]\n    \n    # Remove the leading 0x\n    if dec[0] == '0x':\n        dec = dec[1:]\n    \n    # Remove the leading 0b\n    if dec[0] == '0b':\n        dec = dec[1:]\n    \n    # Remove the leading 0b\n    if dec[0] == '0':\n        dec = dec[1:]\n    \n    # Remove the trailing 0\n    if dec[-1] == '0':\n        dec = dec[:-1]\n    \n    # Remove the leading.\n    if dec[0] == '.':\n        dec = dec[1:]\n    \n    # Remove the trailing.\n    if dec[-1",
      -2.208984375
    ],
    [
      "def is_pandigital(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_2(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_3(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_4(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_5(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_6(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_7(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_8(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_9(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_10(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_11(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_12(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_13(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_14(s):\n    if len(s) == 9:\n        return True\n    else:\n        return False\n\ndef is_pandigital_15",
      -2.490234375
    ],
    [
      "# -*- coding: utf-8 -*-\n\nimport re\n\n\ndef is_decimal(decimal_string):\n    \"\"\"\n    Checks if the given string is decimal using regex.\n\n    :param decimal_string: String to check\n    :return: Boolean\n    \"\"\"\n\n    return bool(re.search(r'[0-9]+', decimal_string))\n\n\ndef is_decimal_without_precision(decimal_string):\n    \"\"\"\n    Checks if the given string is decimal without precision using regex.\n\n    :param decimal_string: String to check\n    :return: Boolean\n    \"\"\"\n\n    return bool(re.search(r'^[0-9]+', decimal_string))\n\n\ndef is_decimal_with_two_precision(decimal_string):\n    \"\"\"\n    Checks if the given string is decimal with two precision using regex.\n\n    :param decimal_string: String to check\n    :return: Boolean\n    \"\"\"\n\n    return bool(re.search(r'[0-9]+.[0-9]+', decimal_string))\n\n\nif __name__ == '__main__':\n    assert is_decimal('123.45')\n    assert is_decimal('12345')\n    assert is_decimal('12345.67')\n    assert is_decimal('12345.678')\n    assert is_decimal('12345.6789')\n    assert is_decimal('12345.67891')\n    assert is_decimal_without_precision('12345')\n    assert is_decimal_without_precision('12345.67')\n    assert is_decimal_without_precision('12345.678')\n    assert is_decimal_without_precision('12345.6789')\n    assert is_decimal_without_precision('12345.67891')\n    assert is_decimal_with_two_precision('12345.67891')",
      -2.5234375
    ],
    [
      "class Solution(object):\n    def isDecimal(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: bool\n        \"\"\"\n        return bool(re.match(r'^[0-9]{1,2}$', n))\n\ndef main():\n    solution = Solution()\n    n = '1.23'\n    print solution.isDecimal(n)\n    n = '1.2345'\n    print solution.isDecimal(n)\n    n = '1.234567'\n    print solution.isDecimal(n)\n    n = '1.23456789'\n    print solution.isDecimal(n)\n    n = '1.2345678901'\n    print solution.isDecimal(n)\n    n = '1.23456789012'\n    print solution.isDecimal(n)\n    n = '123456789012345'\n    print solution.isDecimal(n)\n\nif __name__ == '__main__':\n    main()",
      -2.5625
    ],
    [
      "import re\n\n\ndef check_decimal(decimal):\n    regex = re.compile(r'^-?[0-9]{1,2}(?:[.][0-9]{1,2})?')\n    if re.match(regex, decimal):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    test_cases = [\n        ('-11.5', True),\n        ('-10.5', True),\n        ('-10.51', False),\n        ('-1.51', False),\n        ('-1.5', False),\n        ('-1.51', False),\n        ('-0.51', False),\n        ('-0.5', False),\n        ('-0.51', False),\n        ('-0.5', False),\n        ('-0.51', False),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5', True),\n        ('0.51', True),\n        ('0.5',",
      -2.63671875
    ],
    [
      "# TODO:\n# 1. Check if the decimal is a number.\n# 2. Check if the decimal is a negative number.\n# 3. Check if the decimal is a positive number.\n# 4. Check if the decimal is a zero.\n# 5. Check if the decimal is a negative zero.\n# 6. Check if the decimal is a positive zero.\n# 7. Check if the decimal is a negative infinity.\n# 8. Check if the decimal is a positive infinity.\n# 9. Check if the decimal is a NaN.\n# 10. Check if the decimal is a positive infinity.\n# 11. Check if the decimal is a negative infinity.\n# 12. Check if the decimal is a negative infinity.\n# 13. Check if the decimal is a negative zero.\n# 14. Check if the decimal is a negative zero.\n# 15. Check if the decimal is a negative infinity.\n# 16. Check if the decimal is a negative infinity.\n# 17. Check if the decimal is a negative infinity.\n# 18. Check if the decimal is a negative infinity.\n# 19. Check if the decimal is a negative infinity.\n# 20. Check if the decimal is a negative infinity.\n# 21. Check if the decimal is a negative infinity.\n# 22. Check if the decimal is a negative infinity.\n# 23. Check if the decimal is a negative infinity.\n# 24. Check if the decimal is a negative infinity.\n# 25. Check if the decimal is a negative infinity.\n# 26. Check if the decimal is a negative infinity.\n# 27. Check if the decimal is a negative infinity.\n# 28. Check if the decimal is a negative infinity.\n# 29. Check if the decimal is a negative infinity.\n# 30. Check if the decimal is a negative infinity.\n# 31. Check if the decimal is a negative infinity.\n# 32. Check if the decimal is a negative infinity.\n# 33. Check if the decimal is a negative infinity.\n# 34. Check if the decimal is a negative infinity.\n# 35. Check if the decimal is a negative infinity.\n# 36. Check if the decimal is a negative infinity.\n# 37. Check if the decimal is a negative infinity.\n# 38. Check if the decimal is a negative infinity.\n# 39. Check if the decimal is a negative infinity.\n#",
      -2.837890625
    ],
    [
      "import re\n\ndef is_decimal(num):\n    return num.isnumeric() and re.match(r\"^[+-]?(?:0|[1-9]\\d*)(?:\\.\\d+)?$\", num)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert is_decimal(\"-1.5\"), \"Should be valid\"\n    assert is_decimal(\"-1.51\"), \"Should be valid\"\n    assert is_decimal(\"-1.5e1\"), \"Should be valid\"\n    assert not is_decimal(\"-1.5e-1\"), \"Should not be valid\"\n    assert not is_decimal(\"-1.5e\"), \"Should not be valid\"\n    assert not is_decimal(\"-1.5e+1\"), \"Should not be valid\"\n    assert not is_decimal(\"-1.5e-\"), \"Should not be valid\"\n    assert not is_decimal(\"-1.5e+\"), \"Should not be valid\"\n    assert not is_decimal(\"-1.5.5\"), \"Should not be valid\"\n    assert not is_decimal(\"-1.5E-1\"), \"Should not be valid\"\n    assert not is_decimal(\"-1.5E+1\"), \"Should not be valid\"",
      -2.974609375
    ],
    [
      "__author__ = 'Daniel'\n\nimport re\n\n# Definition for a decimal.\nclass Decimal:\n    def __init__(self, num):\n        if num.find('.')!= -1:\n            self.num = num.replace('.', '')\n        else:\n            self.num = num\n        self.exp = self.num.find('e')\n        if self.exp!= -1:\n            self.exp = int(self.num[self.exp:])\n            self.num = self.num[:self.exp]\n        self.prec = len(self.num)\n\n    def __str__(self):\n        return str(self.num)\n\n    def __repr__(self):\n        return str(self.num)\n\n    def __eq__(self, other):\n        if not isinstance(other, Decimal):\n            return False\n        if self.num == other.num:\n            return True\n        return False\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __lt__(self, other):\n        if not isinstance(other, Decimal):\n            return False\n        if self.num < other.num:\n            return True\n        return False\n\n    def __le__(self, other):\n        if not isinstance(other, Decimal):\n            return False\n        if self.num <= other.num:\n            return True\n        return False\n\n    def __gt__(self, other):\n        if not isinstance(other, Decimal):\n            return False\n        if self.num > other.num:\n            return True\n        return False\n\n    def __ge__(self, other):\n        if not isinstance(other, Decimal):\n            return False\n        if self.num >= other.num:\n            return True\n        return False\n\n    def to_string(self, num=2, exp=2):\n        if num < 0:\n            num = -num\n            sign = ''\n        else:\n            sign = '+'\n        if self.exp < 0:\n            exp = -self.exp\n            self.num = '0' + self.num\n        else",
      -3.119140625
    ],
    [
      "def is_num(n):\n    return '0' <= n <= '9'\n\ndef is_num_regex(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2(n):\n    return n.isdigit()\n\ndef is_num_2_regex(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_2(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_3(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_4(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_5(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_6(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_7(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_8(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_9(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_10(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_11(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_12(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_13(n):\n    return re.match('^[0-9]+$', n)\n\ndef is_num_2_regex_14(n):",
      -3.259765625
    ],
    [
      "import re\n\ndef is_possible_decimal(num):\n    return re.match(r'^([0-9]{1,3})([.,]{1})([0-9]{1,3})$', num)\n\n# Your code here\n\nif __name__ == \"__main__\":\n    num = \"12.3\"\n    assert is_possible_decimal(num) == True, num\n    num = \"12.3\"\n    assert is_possible_decimal(num) == True, num\n    num = \"12.3\"\n    assert is_possible_decimal(num) == True, num\n    num = \"12.34\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.345\"\n    assert is_possible_decimal(num) == True, num\n    num = \"12.34\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.3\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.3\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.3\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.34\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.34\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.34\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.3\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.3\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.3\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.34\"\n    assert is_possible_decimal(num) == False, num\n    num = \"12.34\"\n    assert is_possible_decimal(",
      -3.494140625
    ],
    [
      "import re\n\ndef is_decimal(s):\n    \"\"\"\n    Check if the string is a decimal number.\n\n    :param s: a string\n    :return: True if s is a decimal number, False otherwise.\n    \"\"\"\n    s = s.replace('.', '')\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_decimal_number(s):\n    \"\"\"\n    Check if the string is a decimal number.\n\n    :param s: a string\n    :return: True if s is a decimal number, False otherwise.\n    \"\"\"\n    s = s.replace('.', '')\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\nif __name__ == '__main__':\n    s = '12.34'\n    print is_decimal(s)\n    s = '1.23456789'\n    print is_decimal(s)\n    s = '1.2'\n    print is_decimal(s)\n    s = '1.2.3'\n    print is_decimal(s)\n    s = '123.45'\n    print is_decimal(s)\n    s = '12345'\n    print is_decimal(s)\n    s = '1.2345'\n    print is_decimal(s)\n    s = '1.23456789'\n    print is_decimal_number(s)\n    s = '1.2'\n    print is_decimal_number(s)\n    s = '1.2.3'\n    print is_decimal_number(s)\n    s = '123.45'\n    print is_decimal_number(s)\n    s = '12345'\n    print is_decimal_number(s)\n    s = '1.2345'\n    print is_decimal_number(s)\n    s = '1.23456789'\n    print is_decimal_number(s)",
      -3.509765625
    ],
    [
      "from math import ceil, log10\n\ndef check(number, precision):\n    \"\"\"\n    :type number: str\n    :type precision: int\n    :rtype: bool\n    \"\"\"\n    if precision < 1:\n        return False\n    else:\n        precision = int(precision)\n        if len(number) <= precision:\n            return True\n        else:\n            number = number.replace('.', '')\n            if len(number) < precision:\n                return True\n            else:\n                number = number[0:precision]\n                number = int(number)\n                if number < 10:\n                    return True\n                else:\n                    number = int(ceil(log10(number)))\n                    number = number * 10**(precision - number)\n                    if number < 10:\n                        return True\n                    else:\n                        return False\n\n\nif __name__ == '__main__':\n    print(check('123.45', 2))\n    print(check('123.45', 3))\n    print(check('123.45', 4))\n    print(check('123.45', 5))\n    print(check('123.45', 6))",
      -3.935546875
    ],
    [
      "import re\n\n\ndef is_possible_decimal(num, precision):\n    \"\"\"\n    :type num: int\n    :type precision: int\n    :rtype: bool\n    \"\"\"\n    if num == 0:\n        return False\n    if precision == 0:\n        return True\n    if num == 1:\n        return True\n    if num % 10 == 0:\n        return True\n    if num % 100 == 0:\n        return True\n    if num % 1000 == 0:\n        return True\n    if num % 10000 == 0:\n        return True\n    if num % 100000 == 0:\n        return True\n    if num % 1000000 == 0:\n        return True\n    if num % 10000000 == 0:\n        return True\n    if num % 100000000 == 0:\n        return True\n    if num % 1000000000 == 0:\n        return True\n    return False\n\n\ndef is_possible_decimal_2(num, precision):\n    \"\"\"\n    :type num: int\n    :type precision: int\n    :rtype: bool\n    \"\"\"\n    if num == 0:\n        return False\n    if precision == 0:\n        return True\n    if num == 1:\n        return True\n    if num % 10 == 0:\n        return True\n    if num % 100 == 0:\n        return True\n    if num % 1000 == 0:\n        return True\n    if num % 10000 == 0:\n        return True\n    if num % 100000 == 0:\n        return True\n    if num % 1000000 == 0:\n        return True\n    if num % 10000000 == 0:\n        return True\n    if num % 100000000 == 0:\n        return True\n    if num % 1000000000 == 0:\n        return True\n    return False\n\n\ndef check_possible_decimal(num, precision):\n    \"\"\"\n    :type num: int\n    :type precision: int\n    :rtype: bool\n    \"\"\"\n    if num == 0:\n        return False\n    if precision == 0:\n        return True\n    if num == 1:\n        return True\n    if num % 10 == 0:\n        return True\n    if num % 100 == 0:\n        return True\n    if num",
      -4.01953125
    ],
    [
      "from math import floor, ceil\nimport re\n\nclass Solution(object):\n    def isNan(self, n):\n        return re.match(r'^-?[0-9]+\\.?[0-9]*$', str(n)) is None\n\n    def isInt(self, n):\n        return re.match(r'^[0-9]+$', str(n)) is not None\n\n    def isFinite(self, n):\n        return self.isInt(n) or self.isNan(n)\n\n    def isOdd(self, n):\n        return n % 2 == 1\n\n    def isPrime(self, n):\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(4, int(floor(n ** 0.5)) + 1, 2):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n\n    def isPalindrome(self, n):\n        if n < 0:\n            return False\n        if n == 0:\n            return True\n        return self.isPalindrome(n % 10) and self.isPalindrome(n / 10)\n\n    def isPandigital(self, n):\n        if self.isPalindrome(n):\n            return True\n        if self.isFinite(n) and self.isPrime(n):\n            return True\n        if n < 100 and n >= 11:\n            return True\n        if n < 1000 and n >= 100:\n            return True\n        if n < 10000 and n >= 1000:\n            return True\n        return False\n\n    def isPrimeNumber(self, n):\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(4, int(floor(n ** 0.5)) + 1, 2):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n\n    def isP",
      -4.03515625
    ],
    [
      "class Solution(object):\n    def isNumber(self, s):\n        return re.match(r'^[-]?\\d+\\.\\d+$', s)\n\n    def isNumberWithRounding(self, s):\n        return re.match(r'^([-]?\\d+\\.\\d+|\\.\\d+)?([eE][+-]?\\d+)?$', s)\n\n    def isNumberWithPrecision(self, s):\n        return re.match(r'^([-]?\\d+\\.\\d+)?([eE][+-]?\\d+)?([-]?\\d+\\.\\d+)?$', s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isNumber('-1.0')\n    print s.isNumber('-1')\n    print s.isNumber('-1.00')\n    print s.isNumber('-1.00e+2')\n    print s.isNumber('-1.00e+2')\n    print s.isNumber('-1.00e+2')\n    print s.isNumber('-1.00e+2')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00')\n    print s.isNumber('-1.00e+2.00",
      -4.05859375
    ],
    [
      "def is_valid(decimal):\n    if len(decimal) == 0:\n        return False\n\n    # remove the leading '0'\n    decimal = decimal[1:]\n\n    # check the decimal is not too small\n    if decimal[0] == '0':\n        return False\n\n    # check the decimal is not too large\n    if decimal[-1] == '0':\n        return False\n\n    # check the decimal is not too small\n    if decimal[-2] == '0':\n        return False\n\n    # check the decimal is not too large\n    if decimal[-3] == '0':\n        return False\n\n    # check the decimal is not too small\n    if decimal[-4] == '0':\n        return False\n\n    # check the decimal is not too large\n    if decimal[-5] == '0':\n        return False\n\n    # check the decimal is not too small\n    if decimal[-6] == '0':\n        return False\n\n    # check the decimal is not too large\n    if decimal[-7] == '0':\n        return False\n\n    # check the decimal is not too small\n    if decimal[-8] == '0':\n        return False\n\n    # check the decimal is not too large\n    if decimal[-9] == '0':\n        return False\n\n    # check the decimal is not too small\n    if decimal[-10] == '0':\n        return False\n\n    # check the decimal is not too large\n    if decimal[-11] == '0':\n        return False\n\n    # check the decimal is not too small\n    if decimal[-12] == '0':\n        return False\n\n    # check the decimal is not too large\n    if decimal[-13] == '0':\n        return False\n\n    # check the decimal is not too small\n    if decimal[-14] == '0':\n        return False\n\n    # check the decimal is not too large\n    if decimal[-15] == '0':\n        return False\n\n    # check the decimal is not too small\n    if decimal[-16] == '0':\n        return False\n\n    # check the decimal is not too large\n    if decimal[-17] == '0':\n        return False\n\n    #",
      -4.1640625
    ],
    [
      "import re\nimport math\nfrom decimal import Decimal\n\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\ndef check_number(s, precision):\n    if not is_number(s):\n        return False\n\n    m = re.match(\"([0-9]+)([.]([0-9]+))?$\", s)\n    if m:\n        n = int(m.group(1))\n        if m.group(2):\n            d = Decimal(m.group(2))\n            if d > Decimal(10)**(precision-1):\n                return False\n            n += int(m.group(2)[0])\n        return float(n) == float(s)\n    return False\n\ndef check_precision(s, precision):\n    if not is_number(s):\n        return False\n\n    m = re.match(\"([0-9]+)([.]([0-9]+))?$\", s)\n    if m:\n        n = int(m.group(1))\n        if m.group(2):\n            d = Decimal(m.group(2))\n            if d > Decimal(10)**(precision-1):\n                return False\n            n += int(m.group(2)[0])\n        return float(n) == float(s)\n    return False\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert check_number(\"1234.5678\", 2) == True, \"Test 1\"\n    assert check_number(\"12345.6789\", 2) == True, \"Test 2\"\n    assert check_number(\"12345.67890\", 2) == False, \"Test 3\"\n    assert check_precision(\"12345.67890\", 2) == True, \"Test 4\"\n    assert check_precision(\"12345.678901\", 2) == False, \"Test 5\"\n    assert check_precision(\"12345.6789012\", 2) == True, \"Test 6\"\n    assert check_precision(\"12345.67",
      -4.25390625
    ],
    [
      "import re\n\n\ndef is_decimal_with_2_precision(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: bool\n    \"\"\"\n    try:\n        float(decimal)\n        return True\n    except ValueError:\n        return False\n\n\ndef main():\n    print(is_decimal_with_2_precision('1.2345'))\n    print(is_decimal_with_2_precision('1.23456789'))\n    print(is_decimal_with_2_precision('123456789'))\n    print(is_decimal_with_2_precision('123456789.1'))\n    print(is_decimal_with_2_precision('123456789.12'))\n    print(is_decimal_with_2_precision('123456789.123'))\n    print(is_decimal_with_2_precision('123456789.1234'))\n    print(is_decimal_with_2_precision('123456789.12345'))\n    print(is_decimal_with_2_precision('123456789.123456'))\n    print(is_decimal_with_2_precision('123456789.1234567'))\n    print(is_decimal_with_2_precision('123456789.12345678'))\n    print(is_decimal_with_2_precision('123456789.123456789'))\n\n\nif __name__ == '__main__':\n    main()",
      -4.3203125
    ],
    [
      "import re\n\ndef check_decimal(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: bool\n    \"\"\"\n    return re.match(\"^(-?\\d+\\.\\d+|-?\\d+)$\", decimal)\n\n\nif __name__ == \"__main__\":\n    assert check_decimal(\"0.0\")\n    assert not check_decimal(\"1.0\")\n    assert not check_decimal(\"-0.0\")\n    assert not check_decimal(\"0.00\")\n    assert not check_decimal(\"1.00\")\n    assert not check_decimal(\"-1.00\")\n    assert check_decimal(\"-1.1\")\n    assert check_decimal(\"-0.1\")\n    assert check_decimal(\"-0.01\")\n    assert check_decimal(\"-0.001\")\n    assert check_decimal(\"-0.0001\")\n    assert check_decimal(\"-0.00001\")\n    assert check_decimal(\"-0.000001\")\n    assert check_decimal(\"-0.0000001\")\n    assert check_decimal(\"-0.00000001\")\n    assert check_decimal(\"-0.00000001\")\n    assert check_decimal(\"-0.000000001\")\n    assert check_decimal(\"-0.0000000001\")\n    assert check_decimal(\"-0.00000000001\")\n    assert check_decimal(\"-0.000000000001\")\n    assert check_decimal(\"-0.0000000000001\")\n    assert check_decimal(\"-0.00000000000001\")\n    assert check_decimal(\"-0.000000000000001\")\n    assert check_decimal(\"-0.0000000000000001\")\n    assert check_decimal(\"-0.000000000000000001\")\n    assert check_decimal(\"-0.0000000000000000001\")\n    assert check_decimal(\"-0.00000000000000000001\")\n    assert check_decimal(\"-0.000000000000000000001\")\n    assert check_decimal(\"-0.0000000000000000000001\")\n    assert check_decimal(\"-0.00000000000000000000001\")\n    assert check_decimal(\"-0.000000000000000000000001\")\n    assert check_decimal",
      -4.32421875
    ],
    [
      "class Solution:\n    # @param decimal, a string\n    # @return a boolean\n    def isFraction(self, decimal):\n        if len(decimal)!= 2:\n            return False\n        return decimal[0] == '.' and decimal[1] == '.'\n\n# TEST\ntests = [\n    (['.5', '5.'], True),\n    (['.5', '5'], False),\n    (['.5', '.'], False),\n    (['.5', '5.1'], False),\n    (['.5', '5'], False),\n    (['.5', '5.0'], True),\n    (['.5', '5.01'], True),\n    (['.5', '5.001'], True),\n    (['.5', '5.0001'], True),\n    (['.5', '5.00001'], True),\n    (['.5', '5.000001'], True),\n    (['.5', '5.0000001'], True),\n    (['.5', '5.0000001'], True),\n    (['.5', '5.0000001'], True),\n]\nfor t in tests:\n    sol = Solution()\n    actual = sol.isFraction(t[0])\n    print(\"Is fraction of\", t[0], \"->\", actual)\n    assert actual == t[1]",
      -4.37109375
    ],
    [
      "import re\n\ndef is_a_number(number):\n    \"\"\"\n    Return true if the number is a decimal.\n    \"\"\"\n    if len(number) > 1:\n        return False\n    else:\n        return re.match(\"^[0-9]*[.]?[0-9]*$\", number) is not None\n\ndef is_a_number_with_precision(number, precision):\n    \"\"\"\n    Return true if the number is a decimal with a precision of 2.\n    \"\"\"\n    if len(number) > precision:\n        return False\n    else:\n        return re.match(\"^[0-9]*[.]?[0-9]*[.]?[0-9]*$\", number) is not None\n\nif __name__ == \"__main__\":\n    assert is_a_number(\"0.1\")\n    assert is_a_number(\"1\")\n    assert is_a_number(\"1.1\")\n    assert is_a_number(\"1.01\")\n    assert not is_a_number(\"1.1.1\")\n    assert not is_a_number(\"1.1.01\")\n    assert not is_a_number(\"1.1.1.1\")\n    assert not is_a_number(\"1.1.1.01\")\n    assert not is_a_number(\"1.1.1.1.1\")\n    assert not is_a_number(\"1.1.1.01.1\")\n    assert is_a_number_with_precision(\"1.1\", 2)\n    assert is_a_number_with_precision(\"1.1.1\", 2)\n    assert not is_a_number_with_precision(\"1.1.1.1\", 2)\n    assert is_a_number_with_precision(\"1.1.1.01\", 2)\n    assert is_a_number_with_precision(\"1.1.1.01.1\", 2)\n    assert is_a_number_with_precision(\"1.1.1.01.01\", 2)\n    assert is_a_number_with_precision(\"1.1.1.01.01",
      -4.4140625
    ],
    [
      "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        def check(i):\n            if i >= len(s):\n                return False\n            if s[i] == '.':\n                return check(i + 1)\n            if s[i] in '0123456789':\n                return True\n            return False\n        return check(0)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s.isNumber(\"1.0\")\n    print s",
      -4.42578125
    ],
    [
      "from collections import namedtuple\n\nfrom decimal import Decimal\nfrom regex import match, sub\nfrom re import IGNORECASE, MULTILINE, DOTALL\n\nimport regex as re\n\n# Constants\nDECIMAL_REGEX = r\"([0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_2 = r\"([0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_3 = r\"([0-9]*[0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_4 = r\"([0-9]*[0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_5 = r\"([0-9]*[0-9]*[0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_6 = r\"([0-9]*[0-9]*[0-9]*[0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_7 = r\"([0-9]*[0-9]*[0-9]*[0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_8 = r\"([0-9]*[0-9]*[0-9]*[0-9]*[0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_9 = r\"([0-9]*[0-9]*[0-9]*[0-9]*[0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_10 = r\"([0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*\\.[0-9]*)\"\nDECIMAL_REGEX_11 = r\"([0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*\\.[0-9]*)\"\nDECIMAL_REG",
      -4.4921875
    ],
    [
      "import re\n\n\ndef is_int(n):\n    \"\"\"Check if the given number is integer.\"\"\"\n    return re.match(r'^[+-]?\\d+$', str(n))\n\n\ndef is_decimal(n):\n    \"\"\"Check if the given number is decimal.\"\"\"\n    return re.match(r'^[+-]?\\d+(\\.\\d+)?$', str(n))\n\n\ndef is_float(n):\n    \"\"\"Check if the given number is float.\"\"\"\n    return re.match(r'^[+-]?\\d+(\\.\\d+)?$', str(n))\n\n\ndef is_decimal_float(n):\n    \"\"\"Check if the given number is decimal and float.\"\"\"\n    return re.match(r'^[+-]?\\d+(\\.\\d+)?$', str(n)) and is_float(n)\n\n\ndef is_int_float(n):\n    \"\"\"Check if the given number is integer or float.\"\"\"\n    return is_int(n) or is_float(n)\n\n\ndef is_decimal_float_int(n):\n    \"\"\"Check if the given number is decimal, float, and integer.\"\"\"\n    return is_decimal_float(n) and is_int_float(n)\n\n\ndef is_int_decimal_float(n):\n    \"\"\"Check if the given number is integer, decimal, and float.\"\"\"\n    return is_int(n) and is_decimal_float(n)\n\n\ndef is_decimal_int_float(n):\n    \"\"\"Check if the given number is decimal, integer, and float.\"\"\"\n    return is_decimal_int(n) and is_int_float(n)\n\n\ndef is_decimal_int_float_decimal(n):\n    \"\"\"Check if the given number is decimal, integer, float, and decimal.\"\"\"\n    return is_decimal_int(n) and is_int_float(n) and is_decimal(n)\n\n\ndef is_decimal_float_decimal_int(n):\n    \"\"\"Check if the given number is decimal, float, decimal, and integer.\"\"\"\n    return is_",
      -4.8515625
    ],
    [
      "def check_decimal(decimal_string, precision):\n    if not isinstance(decimal_string, str):\n        return False\n    if len(decimal_string) > precision:\n        return False\n    if len(decimal_string) == precision:\n        if decimal_string.isdigit():\n            return True\n        else:\n            return False\n    if decimal_string[0] == '.':\n        if not decimal_string[1:].isdigit():\n            return False\n    if decimal_string[-1] == '.':\n        if not decimal_string[-2:-1].isdigit():\n            return False\n    if decimal_string[-1] == '0':\n        return False\n    return True\n\ndef test_decimal():\n    assert check_decimal(\"1.2\", 2) == True\n    assert check_decimal(\"1.20\", 2) == False\n    assert check_decimal(\"1.21\", 2) == False\n    assert check_decimal(\"1.2.0\", 2) == True\n    assert check_decimal(\"1.2.1\", 2) == False\n    assert check_decimal(\"1.2.10\", 2) == False\n    assert check_decimal(\"1.2.100\", 2) == False\n    assert check_decimal(\"1.2.1.1\", 2) == False\n    assert check_decimal(\"1.2.1.10\", 2) == False\n    assert check_decimal(\"1.2.1.100\", 2) == False\n    assert check_decimal(\"1.2.1.1.1\", 2) == False\n    assert check_decimal(\"1.2.1.1.10\", 2) == False\n    assert check_decimal(\"1.2.1.1.100\", 2) == False\n    assert check_decimal(\"1.2.1.1.1.1\", 2) == False\n    assert check_decimal(\"1.2.1.1.1.10\", 2) == False\n    assert check_decimal(\"1.2.1.1.1.100\", 2) == False\n    assert check_decimal(\"1.2.",
      -5.0625
    ],
    [
      "# Definition for a decimal.\nclass Decimal(object):\n    def __init__(self, num):\n        \"\"\"\n        :type num: int\n        \"\"\"\n        self.num = num\n        self.str_num = str(num)\n\n    def __repr__(self):\n        return str(self.str_num)\n\n    def __eq__(self, other):\n        return self.str_num == other.str_num\n\n\nclass Solution(object):\n    def isDecimal(self, num):\n        \"\"\"\n        :type num: Decimal\n        :rtype: bool\n        \"\"\"\n        # check if it is a number\n        if num.str_num.isdigit():\n            return True\n\n        # check if it is a string\n        if num.str_num.isnumeric():\n            return True\n\n        # check if it is a string with dot\n        if num.str_num.find(\".\") > -1:\n            return True\n\n        # check if it is a string with space\n        if num.str_num.find(\" \") > -1:\n            return True\n\n        # check if it is a string with underscore\n        if num.str_num.find(\"_\") > -1:\n            return True\n\n        # check if it is a string with zero\n        if num.str_num.find(\"0\") > -1:\n            return True\n\n        # check if it is a string with special character\n        if num.str_num.find(\".\") > -1 or num.str_num.find(\"-\") > -1 or num.str_num.find(\"+\") > -1 or num.str_num.find(\"e\") > -1 or num.str_num.find(\"E\") > -1 or num.str_num.find(\" \") > -1 or num.str_num.find(\"_\") > -1 or num.str_num.find(\" \") > -1 or num.str_num.find(\"0\") > -1:\n            return True\n\n        return False",
      -5.1328125
    ],
    [
      "class Solution(object):\n    def isDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        if not num:\n            return False\n        if not num.isdigit():\n            return False\n        if num.find('.') == -1:\n            return False\n        if len(num) > 10:\n            return False\n        if num.find('.') == len(num)-1:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")\n    print s.isDecimal(\"23.45\")",
      -5.27734375
    ],
    [
      "# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.com/practice/algorithms/strings/regex/\n# https://www.hackerearth.",
      -5.28125
    ],
    [
      "import re\nimport math\n\n\ndef is_valid(number):\n    return re.match(r\"^[+-]?[0-9]*\\.[0-9]+$\", number)\n\n\ndef main():\n    tests = [\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"-123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True),\n        (\"123.45\", True),\n        (\"-123.45\", True",
      -5.29296875
    ],
    [
      "class Solution:\n    def isNumber(self, s):\n        return s.isnumeric()\n\nif __name__ == '__main__':\n    print Solution().isNumber(\"0.0\")\n    print Solution().isNumber(\"0.1\")\n    print Solution().isNumber(\"-0.1\")\n    print Solution().isNumber(\"-0\")\n    print Solution().isNumber(\"0\")\n    print Solution().isNumber(\"1.0\")\n    print Solution().isNumber(\"-1.0\")\n    print Solution().isNumber(\"-1\")\n    print Solution().isNumber(\"-1.1\")\n    print Solution().isNumber(\"-1.9\")\n    print Solution().isNumber(\"-1.91\")\n    print Solution().isNumber(\"-1.91\")\n    print Solution().isNumber(\"-1.99\")\n    print Solution().isNumber(\"-1.99\")\n    print Solution().isNumber(\"-2.1\")\n    print Solution().isNumber(\"-2.09\")\n    print Solution().isNumber(\"-2.09\")\n    print Solution().isNumber(\"-2.091\")\n    print Solution().isNumber(\"-2.091\")\n    print Solution().isNumber(\"-2.0919\")\n    print Solution().isNumber(\"-2.0919\")\n    print Solution().isNumber(\"-2.09199\")\n    print Solution().isNumber(\"-2.09199\")\n    print Solution().isNumber(\"-2.091999\")\n    print Solution().isNumber(\"-2.091999\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")\n    print Solution().isNumber(\"-2.092\")",
      -5.33984375
    ],
    [
      "def check_decimal(decimal, precision):\n    regex = '^[0-9]{1,2}[.][0-9]{1,2}$'\n    if re.match(regex, decimal):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print check_decimal(\"8.00\", 2)\n    print check_decimal(\"0.00\", 2)\n    print check_decimal(\"9.99\", 2)\n    print check_decimal(\"0.00\", 2)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"8.00\", 2)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"0.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"8.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"0.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"8.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"0.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"8.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"0.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"8.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"0.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"8.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"0.00\", 3)\n    print check_decimal(\"9.99\", 3)\n    print check_decimal(\"8.00\", 3)\n    print check_decimal(\"9.99\", 3",
      -5.484375
    ],
    [
      "import re\nimport math\n\n\ndef is_decimal(x):\n    return re.match(r'^[0-9]*\\.[0-9]*$', str(x))\n\n\ndef is_float(x):\n    return re.match(r'^[0-9]*\\.[0-9]*$', str(x))\n\n\ndef is_integer(x):\n    return re.match(r'^[0-9]*$', str(x))\n\n\ndef is_decimal_with_precision(x, precision):\n    if is_decimal(x):\n        if is_decimal(x):\n            return re.match(r'^[0-9]*\\.[0-9]*$', str(x))\n    if is_float(x):\n        if is_float(x):\n            return re.match(r'^[0-9]*\\.[0-9]*$', str(x))\n    if is_integer(x):\n        if is_integer(x):\n            return re.match(r'^[0-9]*$', str(x))\n    return False\n\n\ndef is_decimal_with_precision_2(x):\n    if is_decimal(x):\n        if is_decimal(x):\n            return re.match(r'^[0-9]*\\.[0-9]*$', str(x))\n    if is_float(x):\n        if is_float(x):\n            return re.match(r'^[0-9]*\\.[0-9]*$', str(x))\n    if is_integer(x):\n        if is_integer(x):\n            return re.match(r'^[0-9]*$', str(x))\n    return False\n\n\ndef is_decimal_with_precision_3(x):\n    if is_decimal(x):\n        if is_decimal(x):\n            return re.match(r'^[0-9]*\\.[0-9]*$', str(x))\n    if is_float(x):\n        if is_float(x):",
      -5.70703125
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-formatting/problem\n# https://www.hackerrank.com/challenges/decimal-formatting-regex/problem\n\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    s = input().strip()\n\n    # Check the input\n    if not n or not s:\n        print(\"Invalid Input\")\n    else:\n        # Create a list of digits\n        digits = list(s)\n        # Create a list of the first digit\n        first_digit = digits[0]\n        # Create a list of the second digit\n        second_digit = digits[1]\n\n        # Get the length of the list\n        len_digits = len(digits)\n\n        # Check the length of the first digit\n        if len_digits!= 2:\n            print(\"Invalid Input\")\n        else:\n            # Check the first digit\n            if first_digit!= \"0\":\n                print(\"Invalid Input\")\n            else:\n                # Check the second digit\n                if second_digit!= \".\":\n                    print(\"Invalid Input\")\n                else:\n                    # Check the second digit\n                    if len_digits > 2:\n                        print(\"Invalid Input\")\n                    else:\n                        # Check the third digit\n                        if len_digits == 2:\n                            if second_digit!= \"0\":\n                                print(\"Invalid Input\")\n                            else:\n                                # Check the fourth digit\n                                if len_digits > 3:\n                                    print(\"Invalid Input\")\n                                else:\n                                    # Check the fifth digit\n                                    if len_digits == 3:\n                                        if second_digit!= \"0\" and first_digit!= \"0\":\n                                            if second_digit!= \".\":\n                                                if first_digit!= \"0\":\n                                                    print(\"Invalid Input\")\n                                                else:\n                                                    # Check the sixth digit\n                                                    if len_digits > 4:\n                                                        print(\"Invalid Input\")\n                                                    else:\n                                                        # Check",
      -5.71875
    ],
    [
      "import re\n\nclass Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return False\n        if s == '.' or s == ',':\n            return False\n        if s == '0':\n            return False\n        if s == '1':\n            return True\n        if s == '2':\n            return True\n        if s == '3':\n            return True\n        if s == '4':\n            return True\n        if s == '5':\n            return True\n        if s == '6':\n            return True\n        if s == '7':\n            return True\n        if s == '8':\n            return True\n        if s == '9':\n            return True\n        if s == '.':\n            return False\n        if s == ',':\n            return False\n        if s == 'e':\n            return False\n        if s == 'E':\n            return False\n        if s == '+':\n            return False\n        if s == '-':\n            return False\n        if s =='':\n            return False\n        if s == '-0':\n            return False\n        if s == '-1':\n            return True\n        if s == '-2':\n            return True\n        if s == '-3':\n            return True\n        if s == '-4':\n            return True\n        if s == '-5':\n            return True\n        if s == '-6':\n            return True\n        if s == '-7':\n            return True\n        if s == '-8':\n            return True\n        if s == '-9':\n            return True\n        if s == '-.':\n            return False\n        if s == '-,':\n            return False\n        if s == '-e':\n            return False\n        if s == '-E':\n            return False\n        if s == '-+':\n            return False\n        if s == '- ':\n            return False\n        if s == '-0 ':\n            return False\n        if s == '-1 ':\n            return True\n        if s ==",
      -5.75
    ],
    [
      "class Solution(object):\n    def isDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        if num is None or num == \"\":\n            return False\n        else:\n            return True\n\n    def isDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        if num is None or num == \"\":\n            return False\n        else:\n            return True\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.isDecimal(\"12.345\")\n    print solution.isDecimal(\"12.34\")\n    print solution.isDecimal(\"12.3\")\n    print solution.isDecimal(\"12.3e-10\")\n    print solution.isDecimal(\"12.3e-10e-10\")\n    print solution.isDecimal(\"-12.34\")\n    print solution.isDecimal(\"-12.34e-10\")\n    print solution.isDecimal(\"-12.34e-10e-10\")\n    print solution.isDecimal(\"123.45e-10\")\n    print solution.isDecimal(\"123.45e-10e-10\")\n    print solution.isDecimal(\"123.45e-10e-10e-10\")",
      -6.31640625
    ],
    [
      "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num <= 0:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        if num % 3 == 0:\n            return False\n        if num % 5 == 0:\n            return False\n        if num % 7 == 0:\n            return False\n        if num % 11 == 0:\n            return False\n        if num % 13 == 0:\n            return False\n        if num % 17 == 0:\n            return False\n        if num % 19 == 0:\n            return False\n        if num % 23 == 0:\n            return False\n        if num % 29 == 0:\n            return False\n        if num % 31 == 0:\n            return False\n        if num % 37 == 0:\n            return False\n        if num % 41 == 0:\n            return False\n        if num % 43 == 0:\n            return False\n        if num % 47 == 0:\n            return False\n        if num % 53 == 0:\n            return False\n        if num % 59 == 0:\n            return False\n        if num % 61 == 0:\n            return False\n        if num % 67 == 0:\n            return False\n        if num % 71 == 0:\n            return False\n        if num % 73 == 0:\n            return False\n        if num % 79 == 0:\n            return False\n        if num % 83 == 0:\n            return False\n        if num % 89 == 0:\n            return False\n        if num % 97 == 0:\n            return False\n        if num % 101 == 0:\n            return False\n        if num % 103 == 0:\n            return False\n        if num % 109 == 0:\n            return False\n        if num % 113 == 0:\n            return False\n        if num % 127 == 0:\n            return False\n        if num % 131 == 0:\n            return False\n        if num % 137 == 0:\n            return False\n        if num % 139 == 0:\n            return False\n        if num % 149 == 0:\n            return False",
      -6.3671875
    ],
    [
      "from string import digits\n\ndef is_valid_decimal(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return False\n    if s[0]!= '0':\n        return False\n    for i in range(1, len(s)):\n        if s[i] not in digits:\n            return False\n    return True\n\n\ndef is_valid_decimal_with_2_digits(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return False\n    if s[0]!= '0':\n        return False\n    for i in range(1, len(s)):\n        if s[i] not in digits:\n            return False\n        if s[i]!= '0':\n            return False\n    return True\n\n\ndef is_valid_decimal_with_3_digits(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return False\n    if s[0]!= '0':\n        return False\n    for i in range(1, len(s)):\n        if s[i] not in digits:\n            return False\n        if s[i]!= '0':\n            return False\n        if s[i]!= '0':\n            return False\n    return True\n\n\ndef is_valid_decimal_with_4_digits(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return False\n    if s[0]!= '0':\n        return False\n    for i in range(1, len(s)):\n        if s[i] not in digits:\n            return False\n        if s[i]!= '0':\n            return False\n        if s[i]!= '0':\n            return False\n        if s[i]!= '0':\n            return False\n    return True\n\n\ndef is_valid_decimal_with_5_digits(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:",
      -6.62109375
    ],
    [
      "import re\n\ndef is_pow_of_two(n):\n    return n > 0 and n & (n-1) == 0\n\ndef is_power_of_two(n):\n    return n > 0 and (n & (n-1)) == 0\n\ndef is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n == 1 or n % 2 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        if n % (i+4) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_pow(n, p):\n    if n == 1:\n        return True\n    if n == p or n == p-1:\n        return True\n    if n < 0:\n        return False\n    if p < 0:\n        return False\n    if is_power_of_two(p):\n        return is_pow_of_two(n)\n    if is_power_of_two(n):\n        return is_pow_of_two(p)\n    if is_prime(p):\n        return is_prime(n)\n    if is_prime(n):\n        return is_prime(p)\n    if p < n:\n        return is_pow(n, p+1)\n    return is_pow(n, p-1)\n\ndef is_prime_regex(n):\n    if n == 1:\n        return True\n    if n == 3 or n == 5 or n == 7:\n        return True\n    if n == 11 or n == 13 or n == 17:\n        return True\n    if n == 19 or n == 23 or n == 29:\n        return True\n    if n == 31 or n == 37 or n == 41 or n == 43 or n == 47:\n        return True\n    if n == 53:\n        return True\n    if n == 59 or n == 61 or n == 67 or n == 71 or n ==",
      -6.9296875
    ],
    [
      "from sys import stdin\n\ndef check_decimal(decimal):\n    # write your code here\n    for i in range(0, len(decimal)):\n        if decimal[i] == '0':\n            decimal = decimal[0:i]\n        elif decimal[i] == '.':\n            decimal = decimal[0:i+1]\n        elif decimal[i] == '1':\n            decimal = decimal[0:i]\n        elif decimal[i] == '2':\n            decimal = decimal[0:i]\n        elif decimal[i] == '3':\n            decimal = decimal[0:i]\n        elif decimal[i] == '4':\n            decimal = decimal[0:i]\n        elif decimal[i] == '5':\n            decimal = decimal[0:i]\n        elif decimal[i] == '6':\n            decimal = decimal[0:i]\n        elif decimal[i] == '7':\n            decimal = decimal[0:i]\n        elif decimal[i] == '8':\n            decimal = decimal[0:i]\n        elif decimal[i] == '9':\n            decimal = decimal[0:i]\n        elif decimal[i] == '.':\n            decimal = decimal[0:i]\n        elif decimal[i] == ',':\n            decimal = decimal[0:i]\n        elif decimal[i] =='':\n            decimal = decimal[0:i]\n        elif decimal[i] == 'E':\n            decimal = decimal[0:i]\n        elif decimal[i] == '-':\n            decimal = decimal[0:i]\n        elif decimal[i] == '+':\n            decimal = decimal[0:i]\n        else:\n            return False\n    return True\n\ndef main():\n    decimal = stdin.readline()\n    check_decimal(decimal)\n\nif __name__ == '__main__':\n    main()",
      -6.94140625
    ],
    [
      "#\n# This is the algorithm\n#\n# 1. Check whether the decimal is a float\n# 2. If yes, return\n# 3. Otherwise, check whether the decimal is a string\n# 4. If yes, return\n# 5. Otherwise, check whether the decimal is a number\n# 6. If yes, return\n# 7. Otherwise, check whether the decimal is a floating point number\n# 8. If yes, return\n# 9. Otherwise, check whether the decimal is a number with a non-zero fractional part\n# 10. If yes, return\n# 11. Otherwise, check whether the decimal is a number with a non-zero integer part\n# 12. If yes, return\n# 13. Otherwise, check whether the decimal is a number with a fractional part greater than 1/10\n# 14. If yes, return\n# 15. Otherwise, check whether the decimal is a number with a integer part greater than 1\n# 16. If yes, return\n# 17. Otherwise, check whether the decimal is a number with a fractional part greater than 1/10\n# 18. If yes, return\n# 19. Otherwise, check whether the decimal is a number with a integer part greater than 1\n# 20. If yes, return\n# 21. Otherwise, check whether the decimal is a number with a fractional part greater than 1/10\n# 22. If yes, return\n# 23. Otherwise, check whether the decimal is a number with a integer part greater than 1\n# 24. If yes, return\n# 25. Otherwise, check whether the decimal is a number with a fractional part greater than 1/10\n# 26. If yes, return\n# 27. Otherwise, check whether the decimal is a number with a integer part greater than 1\n# 28. If yes, return\n# 29. Otherwise, check whether the decimal is a number with a fractional part greater than 1/10\n# 30. If yes, return\n# 31. Otherwise, check whether the decimal is a number with a integer part greater than 1\n# 32. If yes, return\n# 33. Otherwise, check whether the decimal is a number with a fractional part greater than 1/10\n# 34. If yes, return\n# 35. Otherwise, check whether the decimal is a number with a integer part greater than 1\n# 36. If yes, return\n# 37. Otherwise, check",
      -7.3515625
    ],
    [
      "from collections import namedtuple\n\nDecimal = namedtuple(\"Decimal\", \"sign digits\")\n\ndef is_decimal(decimal):\n    \"\"\"\n    :type decimal: Decimal\n    :rtype: bool\n    \"\"\"\n    return decimal.sign == \"+\" and len(decimal.digits) == 2\n\ndef get_decimal(decimal):\n    \"\"\"\n    :type decimal: Decimal\n    :rtype: Decimal\n    \"\"\"\n    return Decimal(decimal.sign, decimal.digits)\n\nif __name__ == \"__main__\":\n    print(is_decimal(Decimal(\"-1.00\")))\n    print(is_decimal(Decimal(\"-1.10\")))\n    print(is_decimal(Decimal(\"1.00\")))\n    print(is_decimal(Decimal(\"1.10\")))\n    print(is_decimal(Decimal(\"0.00\")))\n    print(is_decimal(Decimal(\"0.01\")))\n    print(is_decimal(Decimal(\"0.10\")))\n    print(is_decimal(Decimal(\"0.11\")))\n    print(is_decimal(Decimal(\"0.00\")))\n    print(is_decimal(Decimal(\"0.01\")))\n    print(is_decimal(Decimal(\"0.10\")))\n    print(is_decimal(Decimal(\"0.11\")))\n    print(is_decimal(Decimal(\"0.00\")))\n    print(is_decimal(Decimal(\"0.01\")))\n    print(is_decimal(Decimal(\"0.10\")))\n    print(is_decimal(Decimal(\"0.11\")))\n    print(is_decimal(Decimal(\"0.00\")))\n    print(is_decimal(Decimal(\"0.01\")))\n    print(is_decimal(Decimal(\"0.10\")))\n    print(is_decimal(Decimal(\"0.11\")))\n    print(is_decimal(Decimal(\"0.00\")))\n    print(is_decimal(Decimal(\"0.01\")))",
      -7.7421875
    ],
    [
      "# https://leetcode.com/problems/check-decimal/\n\n\nclass Solution(object):\n    def isOne(self, n):\n        return n == 1\n\n    def check(self, num):\n        if num == 0:\n            return True\n        if num == 1:\n            return False\n        if self.isOne(num):\n            return True\n        if num % 10 == 0:\n            return True\n        if num % 100 == 0:\n            return True\n        if num % 1000 == 0:\n            return True\n        return False\n\n    def checkDecimal(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        n = len(num)\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if num[0] == '0':\n            return True\n        if num[0] == '1' and num[1] == '0':\n            return True\n        if num[0] == '1' and num[1] == '1':\n            return False\n        if num[0] == '1' and num[1] == '2':\n            return True\n        if num[0] == '1' and num[1] == '3':\n            return True\n        if num[0] == '1' and num[1] == '4':\n            return True\n        if num[0] == '1' and num[1] == '5':\n            return True\n        if num[0] == '1' and num[1] == '6':\n            return True\n        if num[0] == '1' and num[1] == '7':\n            return True\n        if num[0] == '1' and num[1] == '8':\n            return True\n        if num[0] == '1' and num[1] == '9':\n            return True\n        if num[0] == '2' and num[1] == '0':\n            return True\n        if num[0] == '2' and num[1] == '1':\n            return False\n        if num[0] == '2' and num[1] == '2",
      -8.0703125
    ],
    [
      "from math import log\nfrom functools import reduce\nfrom operator import mul\nfrom re import compile, match\n\n\ndef get_decimal_precision(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: int\n    \"\"\"\n    return len(decimal) - 1\n\n\ndef get_decimal_digits(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: int\n    \"\"\"\n    return int(decimal[-1])\n\n\ndef get_decimal_power(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: int\n    \"\"\"\n    return int(decimal[:-1])\n\n\ndef get_decimal_log(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: int\n    \"\"\"\n    return int(decimal[:-1])\n\n\ndef get_decimal_square(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: int\n    \"\"\"\n    return int(decimal[:-1]) * int(decimal[:-1])\n\n\ndef get_decimal_power_log(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: int\n    \"\"\"\n    return int(decimal[:-1]) * get_decimal_log(decimal)\n\n\ndef get_decimal_power_square(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: int\n    \"\"\"\n    return get_decimal_log(decimal) * get_decimal_square(decimal)\n\n\ndef get_decimal_power_log_square(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: int\n    \"\"\"\n    return get_decimal_log(decimal) * get_decimal_log(decimal) * get_decimal_square(decimal)\n\n\ndef get_decimal_power_log_square_square(decimal):\n    \"\"\"\n    :type decimal: str\n    :rtype: int\n    \"\"\"\n    return get_decimal_log(decimal) * get_decimal_log(decimal) * get_decimal_log",
      -8.1953125
    ],
    [
      "import re\n\ndef is_decimal(number):\n    \"\"\"\n    Input: a string\n    Output: True or False\n    \"\"\"\n    #Check for the number of characters\n    if len(number)!= 4:\n        return False\n    #Check if the first character is a digit\n    if not number[0].isdigit():\n        return False\n    #Check if the second character is a digit\n    if not number[1].isdigit():\n        return False\n    #Check if the third character is a digit\n    if not number[2].isdigit():\n        return False\n    #Check if the fourth character is a digit\n    if not number[3].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[0].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[1].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[2].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[3].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[0].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[1].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[2].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[3].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[0].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[1].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[2].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[3].isdigit():\n        return False\n    #Check if the number is greater than 0\n    if not number[0].isdigit():",
      -8.3359375
    ],
    [
      "class Solution(object):\n    def isDecimal(self, decimal):\n        \"\"\"\n        :type decimal: str\n        :rtype: bool\n        \"\"\"\n        if decimal == \"\":\n            return False\n        if decimal[0] == \"0\":\n            return False\n        if decimal[-1] == \"0\":\n            return False\n        if decimal[-1] == \".\":\n            return False\n        if decimal[0] == \".\":\n            return False\n        if decimal[-1] == \".\":\n            return False\n        if decimal[0] == \".\":\n            return False\n        if decimal[-1] == \".\":\n            return False\n        if decimal[0] == \"e\":\n            return False\n        if decimal[-1] == \"e\":\n            return False\n        if decimal[-1] == \"E\":\n            return False\n        if decimal[-2] == \"e\" or decimal[-2] == \"E\":\n            return False\n        if decimal[-2] == \".\":\n            return False\n        if decimal[-2] == \"e\":\n            return False\n        if decimal[-2] == \"E\":\n            return False\n        if decimal[-2] == \".\":\n            return False\n        return True\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.isDecimal(\"1.2\")\n    print solution.isDecimal(\"1.2e1\")\n    print solution.isDecimal(\"1.2e-1\")\n    print solution.isDecimal(\"1.2e-2\")\n    print solution.isDecimal(\"1.2e-3\")\n    print solution.isDecimal(\"1.2e-4\")\n    print solution.isDecimal(\"1.2e-5\")\n    print solution.isDecimal(\"1.2e-6\")\n    print solution.isDecimal(\"1.2e-7\")\n    print solution.isDecimal(\"1.2e-8\")\n    print solution.isDecimal(\"1.2e-9\")\n    print solution.isDecimal(\"1.2e-10\")\n    print solution.isDec",
      -8.5703125
    ],
    [
      "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        s = s.strip()\n        if len(s) == 0:\n            return False\n        if s[0] == '-':\n            s = s[1:]\n        if s[0] == '.':\n            s = s[1:]\n        if s[-1] == '.':\n            s = s[:-1]\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n        if 'e' in s:\n            return False\n        if '.' in s:\n            if len(s) < 2:\n                return False\n            if s[-2] == '0' and s[-1]!= '.':\n                return False\n            if s[-2] == '.' and s[-1]!= '0':\n                return False\n        return True\n\nif __name__ == '__main__':\n    assert Solution().isNumber(\"1.2\")\n    assert Solution().isNumber(\"1.2e\")\n    assert Solution().isNumber(\"1.2e-\")\n    assert Solution().isNumber(\"1.2e+\")\n    assert Solution().isNumber(\"1.2e+5\")\n    assert Solution().isNumber(\"1.2e-5\")\n    assert Solution().isNumber(\"-1.2e-5\")\n    assert Solution().isNumber(\"-1.2e+5\")\n    assert Solution().isNumber(\"-1.2e+-5\")\n    assert Solution().isNumber(\"-1.2e-\")\n    assert Solution().isNumber(\"-1.2e\")\n    assert Solution().isNumber(\"-1.2e+\")\n    assert Solution().isNumber(\"-1.2e+5\")\n    assert Solution().isNumber(\"-1.2e-5\")\n    assert Solution().isNumber(\"-1.2e-5\")\n    assert Solution().isNumber(\"-1.2e+5\")\n    assert Solution().isNumber(\"-1.2e+-5\")\n    assert Solution().",
      -8.703125
    ],
    [
      "def is_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_decimal(s):\n    if not is_integer(s):\n        return False\n    m = re.match(r'[-+]?([0-9]*\\.[0-9]+)', s)\n    if m is None:\n        return False\n    return True\n\ndef is_decimal_precision(s, precision):\n    if not is_decimal(s):\n        return False\n    m = re.match(r'[-+]?([0-9]*\\.[0-9]+)', s)\n    if m is None:\n        return False\n    if int(m.group(1))!= precision:\n        return False\n    return True\n\ndef test():\n    assert is_decimal('1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.00')\n    assert is_decimal('-1.00')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')\n    assert is_decimal('-1.0')",
      -8.828125
    ],
    [
      "import re\n\ndef is_pandigital(dec):\n    if len(dec) == 10:\n        return True\n    if len(dec) == 1:\n        return True\n    if len(dec) == 2:\n        return True\n    if len(dec) > 2:\n        return False\n    if dec.isdigit():\n        return True\n    if dec[0] == dec[1]:\n        return True\n    if dec[1] == dec[2]:\n        return True\n    if dec[0] == dec[2]:\n        return True\n    if dec[0] == dec[3]:\n        return True\n    if dec[1] == dec[3]:\n        return True\n    if dec[0] == dec[4]:\n        return True\n    if dec[1] == dec[4]:\n        return True\n    if dec[0] == dec[5]:\n        return True\n    if dec[1] == dec[5]:\n        return True\n    if dec[0] == dec[6]:\n        return True\n    if dec[1] == dec[6]:\n        return True\n    if dec[0] == dec[7]:\n        return True\n    if dec[1] == dec[7]:\n        return True\n    if dec[0] == dec[8]:\n        return True\n    if dec[1] == dec[8]:\n        return True\n    if dec[0] == dec[9]:\n        return True\n    if dec[1] == dec[9]:\n        return True\n    return False\n\ndef is_pandigital_with_precision(dec, precision):\n    if len(dec) == 10:\n        return True\n    if len(dec) > 2:\n        return False\n    if len(dec) == 1:\n        return True\n    if len(dec) == 2:\n        return True\n    if dec.isdigit():\n        return True\n    if dec[0] == dec[1]:\n        return True\n    if dec[1] == dec[2]:\n        return True\n    if dec[0] == dec[2]:\n        return True\n    if dec[0] == dec[3]:\n        return True",
      -9.375
    ],
    [
      "from decimal import Decimal\nimport re\n\ndef check_decimal(decimal_string):\n    if not isinstance(decimal_string, str):\n        raise TypeError(\"Input must be a string.\")\n\n    if len(decimal_string) == 0:\n        raise ValueError(\"Input must not be empty.\")\n\n    # convert to float\n    decimal = Decimal(decimal_string)\n\n    # check decimal is within range\n    if decimal > Decimal(\"10\") or decimal < Decimal(\"0\"):\n        raise ValueError(\"Input must not be out of range.\")\n\n    # check decimal has two digits\n    if len(decimal.as_tuple().digits)!= 2:\n        raise ValueError(\"Input must have two digits.\")\n\n    # check decimal has no trailing zeros\n    if decimal.is_finite() and decimal.as_tuple().digits[-1] == 0:\n        raise ValueError(\"Input must not have trailing zeros.\")\n\n    # check decimal is not a multiple of 10\n    if decimal % Decimal(\"10\") == 0:\n        raise ValueError(\"Input must not be a multiple of 10.\")\n\n    # check decimal is not a multiple of 100\n    if decimal % Decimal(\"100\") == 0:\n        raise ValueError(\"Input must not be a multiple of 100.\")\n\n    # check decimal is not a multiple of 1000\n    if decimal % Decimal(\"1000\") == 0:\n        raise ValueError(\"Input must not be a multiple of 1000.\")\n\n    # check decimal is not a multiple of 10000\n    if decimal % Decimal(\"10000\") == 0:\n        raise ValueError(\"Input must not be a multiple of 10000.\")\n\n    # check decimal is not a multiple of 100000\n    if decimal % Decimal(\"100000\") == 0:\n        raise ValueError(\"Input must not be a multiple of 100000.\")\n\n    # check decimal is not a multiple of 1000000\n    if decimal % Decimal(\"1000000\") == 0:\n        raise ValueError(\"Input must not be a multiple of 1000000.\")\n\n    # check decimal is not a multiple of 10000000\n    if decimal % Decimal(\"10000000\") == 0:\n        raise ValueError(\"Input must not be a multiple of 10000000.\")\n\n    # check decimal is not",
      -10.4609375
    ],
    [
      "import re\n\n# your function here\n\ndef is_pandigital(n):\n    if not isinstance(n, int):\n        return False\n    if n == 0:\n        return False\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n < 1000:\n        return False\n    if n < 1000000:\n        return False\n    if n < 1000000000:\n        return False\n    if n < 1000000000000:\n        return False\n    if n < 1000000000000000:\n        return False\n    if n < 10000000000000000:\n        return False\n    if n < 100000000000000000:\n        return False\n    if n < 1000000000000000000:\n        return False\n    if n < 10000000000000000000:\n        return False\n    if n < 100000000000000000000:\n        return False\n    if n < 10000000000000000000:\n        return False\n    if n < 10000000000000000000:\n        return False\n    return True\n\ndef pandigital_sum(n):\n    if is_pandigital(n):\n        return sum(str(n))\n    else:\n        return 0\n\ndef pandigital_sum_2(n):\n    if is_pandigital(n):\n        return sum(str(n).split('.'))\n    else:\n        return 0\n\ndef pandigital_sum_3(n):\n    if is_pandigital(n):\n        return sum([int(x) for x in str(n).split('.')])\n    else:\n        return 0\n\ndef pandigital_sum_4(n):\n    if is_pandigital(n):\n        return sum([int(x) for x in str(n).split('.')[0:2]])\n    else:\n        return 0\n\ndef pandigital_sum_5(n):\n    if is_pandigital(n):\n        return sum([int(x) for x in str(n).split('.')[0:3]])\n    else:\n        return 0\n\ndef pandigital_sum_6(n):\n    if is_pandigital(n):\n        return",
      -10.6328125
    ],
    [
      "import re\n\ndef is_valid(num, precision):\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n    \n    # check the given number is valid\n    if num < 0:\n        return False\n    if num > precision:\n        return False\n    \n    # check the number is within the given range\n    if num > precision - 1:\n        return False\n    \n    # check the number is within the given range\n    if num < precision - 1:\n        return False\n    \n    # check the number is within the given range\n    if num > precision - 2:\n        return False\n    \n    # check the number is within the given range\n    if num < precision - 2:\n        return False\n    \n    # check the number is within the given range\n    if num > precision - 3:\n        return False\n    \n    # check the number is within the given range\n    if num < precision - 3:\n        return False\n    \n    # check the number is within the given range\n    if num > precision - 4:\n        return False\n    \n    # check the number is within the given range\n    if num < precision - 4:\n        return False\n    \n    # check the number is within the given range\n    if num > precision - 5:\n        return False\n    \n    # check the number is within the given range\n    if num < precision - 5:\n        return False\n    \n    # check the number is within the given range\n    if num > precision - 6:\n        return False\n    \n    # check the number is within the given range\n    if num < precision - 6:\n        return False\n    \n    # check the number is within the given range\n    if num > precision - 7:\n        return False\n    \n    # check the number is within the given range\n    if num < precision - 7:\n        return False\n    \n    # check the number is within the given range\n    if num > precision - 8:\n        return False\n    \n    # check the number is within the given range\n    if num < precision - 8:\n        return False\n    \n    # check the number is within the given range\n    if num > precision - 9:\n        return False",
      -11.484375
    ],
    [
      "def is_close(a, b, epsilon=0.00001):\n    return abs(a - b) <= epsilon\n\ndef is_close_to(a, b, c, epsilon=0.00001):\n    return is_close(a, b) and is_close(b, c)\n\ndef is_close_to_2(a, b, c, d, epsilon=0.00001):\n    return is_close(a, b) and is_close(b, c) and is_close(c, d) and is_close(d, epsilon)\n\ndef is_close_to_3(a, b, c, d, e, f, epsilon=0.00001):\n    return is_close(a, b) and is_close(b, c) and is_close(c, d) and is_close(d, e) and is_close(e, f) and is_close(f, epsilon)\n\ndef is_close_to_4(a, b, c, d, e, f, g, h, epsilon=0.00001):\n    return is_close(a, b) and is_close(b, c) and is_close(c, d) and is_close(d, e) and is_close(e, f) and is_close(f, g) and is_close(g, h) and is_close(h, epsilon)\n\ndef is_close_to_5(a, b, c, d, e, f, g, h, i, epsilon=0.00001):\n    return is_close(a, b) and is_close(b, c) and is_close(c, d) and is_close(d, e) and is_close(e, f) and is_close(f, g) and is_close(g, h) and is_close(h, i) and is_close(i, epsilon)\n\ndef is_close_to_6(a, b, c, d, e, f, g, h, i, j, epsilon=0.00001):\n    return",
      -11.5
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-binary/problem\n\n# import sys\n# from functools import reduce\n# from operator import add\n# from collections import deque\n\n# input_file = open(\"input.txt\", \"r\")\n# input_lines = input_file.readlines()\n# input_file.close()\n\n# input_lines = [line.rstrip(\"\\n\") for line in input_lines]\n\n# input_lines = [line for line in input_lines if line]\n\n# input_lines = [line for line in input_lines if len(line) > 1]\n\n# input_lines = [line for line in input_lines if line[0]!= '#']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!= '\\n']\n\n# input_lines = [line.split() for line in input_lines]\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line[1:] for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n# input_lines = [line for line in input_lines if line[0]!='']\n\n#",
      -11.8828125
    ],
    [
      "from collections import deque\nimport re\nfrom typing import List, Optional, Tuple\n\n\nclass Solution:\n    def decimalToHexWithPrecision(self, decimal: str, precision: int) -> str:\n        \"\"\"\n        :type decimal: str\n        :type precision: int\n        :rtype: str\n        \"\"\"\n        q = deque([decimal])\n        while len(q) > 0:\n            q.popleft()\n            if len(q) == 0:\n                break\n            if len(q) == 1:\n                if len(q[0]) == 1:\n                    return \"0\" + q[0]\n                else:\n                    return \"0.\" + q[0]\n            if len(q[0]) == 1:\n                if q[0][0] == '0':\n                    return \"0.\" + q[0]\n                else:\n                    return \"0\" + q[0]\n            if q[0][0] == '0':\n                return \"0.\" + q[0]\n            if q[0][0] == '.':\n                return q[0]\n            if q[0][0] == '1':\n                return \"0\" + q[0]\n            if q[0][0] == '2':\n                return \"0.\" + q[0]\n            if q[0][0] == '3':\n                return \"0.\" + q[0]\n            if q[0][0] == '4':\n                return \"0.\" + q[0]\n            if q[0][0] == '5':\n                return \"0.\" + q[0]\n            if q[0][0] == '6':\n                return \"0.\" + q[0]\n            if q[0][0] == '7':\n                return \"0.\" + q[0]\n            if q[0][0] == '8':\n                return \"0.\" + q[0]\n            if q[0][0] == '9':\n                return \"0.\" + q[0]\n            if q[0][0] == 'A':\n                return \"0.\" + q[0]\n            if q[0][0] == 'B':",
      -12.3671875
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-binary\n\nimport re\n\ndef decimalToBinary(decimal, precision):\n    \"\"\"\n    Decimal --> Binary\n    Input: decimal --> string, precision --> integer\n\n    Output: Binary --> string\n\n    Precondition: 1 <= decimal < 10^precision <= 36\n    \"\"\"\n    # Make sure decimal is an integer and precison is a positive integer\n    if not isinstance(decimal, int) or not isinstance(precision, int) or decimal < 0 or precision < 0:\n        raise ValueError(\"Input type is not correct\")\n\n    # Make sure decimal is not too big\n    if decimal > 2 ** precision:\n        raise ValueError(\"Input is too large\")\n\n    # Make sure decimal is not too small\n    if decimal < 0:\n        raise ValueError(\"Input is too small\")\n\n    # Make sure decimal is not zero\n    if decimal == 0:\n        raise ValueError(\"Input is zero\")\n\n    # Make sure decimal is not one\n    if decimal == 1:\n        raise ValueError(\"Input is one\")\n\n    # Make sure decimal is not two\n    if decimal == 2:\n        raise ValueError(\"Input is two\")\n\n    # Make sure decimal is not three\n    if decimal == 3:\n        raise ValueError(\"Input is three\")\n\n    # Make sure decimal is not four\n    if decimal == 4:\n        raise ValueError(\"Input is four\")\n\n    # Make sure decimal is not five\n    if decimal == 5:\n        raise ValueError(\"Input is five\")\n\n    # Make sure decimal is not six\n    if decimal == 6:\n        raise ValueError(\"Input is six\")\n\n    # Make sure decimal is not seven\n    if decimal == 7:\n        raise ValueError(\"Input is seven\")\n\n    # Make sure decimal is not eight\n    if decimal == 8:\n        raise ValueError(\"Input is eight\")\n\n    # Make sure decimal is not nine\n    if decimal == 9:\n        raise ValueError(\"Input is nine\")\n\n    # Make sure decimal is not ten\n    if decimal == 10:\n        raise ValueError(\"Input is ten\")\n\n    # Make sure decimal is not 11\n    if decimal == 11:\n        raise ValueError(\"Input is eleven\")",
      -14.9609375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}