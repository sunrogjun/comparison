{
  "problem": {
    "task_id": "MBPP/41",
    "prompt": "Write a function to filter even numbers using lambda function.",
    "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
    "test_list": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ],
    "challenge_test_list": [],
    "problem_id": 30
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def filterEven(listToFilter):\n    \"\"\"\n    filterEven(listToFilter) -> list\n\n    Returns a list of even numbers from listToFilter.\n    \"\"\"\n    return [i for i in listToFilter if i % 2 == 0]\n\nprint filterEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
      10.0625
    ],
    [
      "# https://www.hackerrank.com/challenges/filter-evens/problem\n\n# Complete the filterEvens function below.\ndef filterEvens(numbers):\n    \"\"\"\n    Returns a list of even numbers.\n    :param numbers: list of integers\n    :return: list of even integers\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n\nif __name__ == '__main__':\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    # numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    result = filterEvens(numbers)\n    print(result)",
      8.6328125
    ],
    [
      "def even_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\n# Write a function that takes an iterable and returns a new\n# iterable containing only the odd numbers.\n\ndef odd_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 1, numbers)\n\n# Write a function that takes an iterable and returns a new\n# iterable containing only the even numbers.\n\ndef even_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\n# Write a function that takes an iterable and returns a new\n# iterable containing only the even numbers.\n\ndef even_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\n# Write a function that takes an iterable and returns a new\n# iterable containing only the odd numbers.\n\ndef odd_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 1, numbers)\n\n# Write a function that takes an iterable and returns a new\n# iterable containing only the even numbers.\n\ndef even_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\n# Write a function that takes an iterable and returns a new\n# iterable containing only the even numbers.\n\ndef even_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\n# Write a function that takes an iterable and returns a new\n# iterable containing only the even numbers.\n\ndef even_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\n# Write a function that takes an iterable and returns a new\n# iterable containing only the even numbers.\n\ndef even_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\n# Write a function that takes an iterable and returns a new\n# iterable containing only the even numbers.\n\ndef even_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 0,",
      5.39453125
    ],
    [
      "def even_filter(input_list):\n    # YOUR CODE HERE\n    even_numbers = filter(lambda x: x % 2 == 0, input_list)\n    return even_numbers\n\nif __name__ == \"__main__\":\n    even_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even_filter(even_list)\n    print even_list",
      4.8671875
    ],
    [
      "def filter_even_numbers(numbers):\n    \"\"\"\n    numbers: list of ints\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n\ndef test():\n    \"\"\"\n    Test function using a list of numbers.\n    \"\"\"\n    assert filter_even_numbers([1,2,3,4,5,6,7,8,9]) == [2,4,6,8,10]\n\nif __name__ == '__main__':\n    test()",
      4.7578125
    ],
    [
      "def filter_even_numbers(numbers):\n    return [n for n in numbers if n % 2 == 0]\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print filter_even_numbers(numbers)",
      4.3828125
    ],
    [
      "def filter_even(numbers):\n    return [number for number in numbers if number % 2 == 0]\n\nprint filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9])",
      4.1171875
    ],
    [
      "def filter_even(list_of_numbers):\n    return filter(lambda x: x % 2 == 0, list_of_numbers)\n\nif __name__ == '__main__':\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))",
      3.41796875
    ],
    [
      "#%%\ndef filter_even(numbers):\n    \"\"\"\n    filter_even(numbers) -> list\n\n    Filter even numbers.\n\n    :param numbers: List of numbers.\n    :return: List of even numbers.\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n#%%\n\ndef filter_even_2(numbers):\n    \"\"\"\n    filter_even(numbers) -> list\n\n    Filter even numbers.\n\n    :param numbers: List of numbers.\n    :return: List of even numbers.\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n#%%\n\ndef filter_even_3(numbers):\n    \"\"\"\n    filter_even(numbers) -> list\n\n    Filter even numbers.\n\n    :param numbers: List of numbers.\n    :return: List of even numbers.\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n#%%\n\ndef filter_even_4(numbers):\n    \"\"\"\n    filter_even(numbers) -> list\n\n    Filter even numbers.\n\n    :param numbers: List of numbers.\n    :return: List of even numbers.\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n#%%\n\ndef filter_even_5(numbers):\n    \"\"\"\n    filter_even(numbers) -> list\n\n    Filter even numbers.\n\n    :param numbers: List of numbers.\n    :return: List of even numbers.\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n#%%\n\ndef filter_even_6(numbers):\n    \"\"\"\n    filter_even(numbers) -> list\n\n    Filter even numbers.\n\n    :param numbers: List of numbers.\n    :return: List of even numbers.\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n#%%\n\ndef filter_even_7(numbers):\n    \"\"\"\n    filter_even(numbers) -> list\n\n    Filter even numbers.\n\n    :param numbers: List of numbers.\n    :return: List of even numbers.\n    \"\"\"\n    return [i for i in numbers if i % 2",
      3.3359375
    ],
    [
      "def filter_even_numbers(numbers):\n    return [x for x in numbers if x % 2 == 0]\n\nprint filter_even_numbers([1, 2, 3, 4, 5, 6])",
      3.208984375
    ],
    [
      "#!/bin/python\n\ndef even_numbers(numbers):\n    \"\"\"\n    Write a function that filters even numbers.\n\n    >>> even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [n for n in numbers if n % 2 == 0]\n\nif __name__ == '__main__':\n    print(even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      2.935546875
    ],
    [
      "def filter_even_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n\nclass Solution:\n    # @param {List<Integer>} numbers\n    # @return {List<Integer>}\n    def filterEvenNumbers(self, numbers):\n        return filter(lambda x: x % 2 == 0, numbers)",
      2.517578125
    ],
    [
      "def is_even(x):\n    return x % 2 == 0\n\n\n# Test\nprint(is_even(1))\nprint(is_even(2))\nprint(is_even(3))\nprint(is_even(4))\nprint(is_even(5))\nprint(is_even(6))",
      2.42578125
    ],
    [
      "def even_filter(n):\n    return lambda x: x % 2 == 0\n\n# Test Cases\n\n# Even Numbers\nassert even_filter(1) == lambda x: x % 2 == 0\nassert even_filter(2) == lambda x: x % 2 == 0\nassert even_filter(3) == lambda x: x % 2 == 0\nassert even_filter(4) == lambda x: x % 2 == 0\nassert even_filter(5) == lambda x: x % 2 == 0\nassert even_filter(6) == lambda x: x % 2 == 0\nassert even_filter(7) == lambda x: x % 2 == 0\nassert even_filter(8) == lambda x: x % 2 == 0\nassert even_filter(9) == lambda x: x % 2 == 0\nassert even_filter(10) == lambda x: x % 2 == 0\nassert even_filter(11) == lambda x: x % 2 == 0\nassert even_filter(12) == lambda x: x % 2 == 0\nassert even_filter(13) == lambda x: x % 2 == 0\nassert even_filter(14) == lambda x: x % 2 == 0\nassert even_filter(15) == lambda x: x % 2 == 0\nassert even_filter(16) == lambda x: x % 2 == 0\nassert even_filter(17) == lambda x: x % 2 == 0\nassert even_filter(18) == lambda x: x % 2 == 0\nassert even_filter(19) == lambda x: x % 2 == 0\nassert even_filter(20) == lambda x: x % 2 == 0\nassert even_filter(21) == lambda x: x % 2 == 0\nassert even_filter(22) == lambda x: x % 2 == 0\nassert even_filter(23) == lambda x: x % 2 == 0\nassert even_filter(24) == lambda x: x % 2 == 0\nassert even_filter(25) == lambda x: x % 2 == 0\nassert even_filter(26) == lambda x: x % 2 == 0\nassert even_filter(27) == lambda x: x % 2 == 0\nassert even_filter(28) == lambda x: x % 2 == 0\nassert even_filter(29",
      2.376953125
    ],
    [
      "def even_numbers(numbers):\n    return [i for i in numbers if i % 2 == 0]\n\nprint(even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239",
      2.017578125
    ],
    [
      "def even_numbers(iterable):\n    \"\"\"\n    filter even numbers using lambda function\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, iterable)\n\nprint even_numbers([1,2,3,4,5,6])\n\n# Test\n# even_numbers([1,2,3,4,5,6])\n# [2, 4, 6]",
      1.8056640625
    ],
    [
      "def filter_even(n):\n    \"\"\"\n    >>> filter_even(20)\n    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n    \"\"\"\n    return [i for i in range(0, n) if i % 2 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.623046875
    ],
    [
      "def is_even(x):\n    return x % 2 == 0\n\n\ndef is_even_lambda(x):\n    return lambda x: x % 2 == 0\n\n\ndef is_even_lambda_lambda(x):\n    return lambda x: x % 2 == 0\n\n\ndef is_even_lambda_lambda_lambda(x):\n    return lambda x: x % 2 == 0\n\n\ndef is_even_lambda_lambda_lambda(x):\n    return lambda x: x % 2 == 0\n\nprint(is_even(4))\nprint(is_even(10))\nprint(is_even(15))\nprint(is_even(20))\nprint(is_even_lambda(4))\nprint(is_even_lambda(10))\nprint(is_even_lambda(15))\nprint(is_even_lambda(20))\nprint(is_even_lambda_lambda(4))\nprint(is_even_lambda_lambda(10))\nprint(is_even_lambda_lambda(15))\nprint(is_even_lambda_lambda(20))\nprint(is_even_lambda_lambda_lambda(4))\nprint(is_even_lambda_lambda_lambda(10))\nprint(is_even_lambda_lambda_lambda(15))\nprint(is_even_lambda_lambda_lambda(20))",
      1.3544921875
    ],
    [
      "def even_filter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return lambda x: x % 2 == 0\n    \nif __name__ == '__main__':\n    print even_filter(6)\n    print even_filter(15)\n    print even_filter(20)\n    print even_filter(24)\n    print even_filter(25)\n    print even_filter(27)\n    print even_filter(30)\n    print even_filter(35)\n    print even_filter(36)\n    print even_filter(37)\n    print even_filter(38)\n    print even_filter(39)\n    print even_filter(40)\n    print even_filter(41)\n    print even_filter(42)\n    print even_filter(43)\n    print even_filter(44)\n    print even_filter(45)\n    print even_filter(46)\n    print even_filter(47)\n    print even_filter(48)\n    print even_filter(49)\n    print even_filter(50)\n    print even_filter(51)\n    print even_filter(52)\n    print even_filter(53)\n    print even_filter(54)\n    print even_filter(55)\n    print even_filter(56)\n    print even_filter(57)\n    print even_filter(58)\n    print even_filter(59)\n    print even_filter(60)\n    print even_filter(61)\n    print even_filter(62)\n    print even_filter(63)\n    print even_filter(64)\n    print even_filter(65)\n    print even_filter(66)\n    print even_filter(67)\n    print even_filter(68)\n    print even_filter(69)\n    print even_filter(70)\n    print even_filter(71)\n    print even_filter(72)\n    print even_filter(73)\n    print even_filter(74)\n    print even_filter(75)\n    print even_filter(76)\n    print even_filter(77)\n    print even_filter(78)",
      1.1796875
    ],
    [
      "def even_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    even_numbers = [n for n in numbers if n % 2 == 0]\n    return even_numbers",
      1.158203125
    ],
    [
      "def even_filter(n):\n    return n % 2 == 0\n\nprint(even_filter(8))\nprint(even_filter(2))\nprint(even_filter(9))\nprint(even_filter(4))\nprint(even_filter(5))\nprint(even_filter(7))",
      0.7939453125
    ],
    [
      "def filter_even(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_2(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_3(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_4(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_5(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_6(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_7(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_8(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_9(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_10(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_11(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_12(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_13(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_14(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_15(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_16(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_17(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_18(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_19(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_20(n):\n    return lambda x: x % 2 == 0\n\ndef filter_even_lambda_21(n):",
      0.58056640625
    ],
    [
      "from collections import Counter\n\n\ndef filter_evens(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    evens = [n for n in numbers if n % 2 == 0]\n    return evens\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    evens = filter_evens(numbers)\n    print(evens)\n    assert Counter(evens) == Counter({0: 6, 2: 4, 4: 2, 6: 1, 8: 1, 10: 1})",
      0.2337646484375
    ],
    [
      "def filter_even(list_of_numbers):\n    \"\"\"\n    :param list_of_numbers: list of numbers to filter\n    :return: filtered list of even numbers\n    \"\"\"\n    return [x for x in list_of_numbers if x % 2 == 0]\n\ndef main():\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\nif __name__ == \"__main__\":\n    main()",
      0.13525390625
    ],
    [
      "def filter_even(n):\n    return lambda x: x % 2 == 0\n\ndef main():\n    print filter_even(5)\n\nif __name__ == '__main__':\n    main()",
      0.057586669921875
    ],
    [
      "def even(x):\n    return x % 2 == 0\n\neven_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven_list_filtered = filter(even, even_list)\nprint even_list_filtered",
      -0.026092529296875
    ],
    [
      "def filter_even(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    return [n for n in range(1, 10) if n % 2 == 0]\n\n# Your solution should be in python\n# Your function should be in python\n\ndef filter_even2(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    return [n for n in range(1, 10) if n % 2 == 0]\n\n# Your solution should be in python\n# Your function should be in python\n\ndef filter_even3(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    return [n for n in range(1, 10) if n % 2 == 0]\n\n# Your solution should be in python\n# Your function should be in python\n\ndef filter_even4(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    return [n for n in range(1, 10) if n % 2 == 0]\n\n# Your solution should be in python\n# Your function should be in python\n\ndef filter_even5(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    return [n for n in range(1, 10) if n % 2 == 0]\n\n# Your solution should be in python\n# Your function should be in python\n\ndef filter_even6(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    return [n for n in range(1, 10) if n % 2 == 0]\n\n# Your solution should be in python\n# Your function should be in python\n\ndef filter_even7(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    return [n for n in range(1, 10) if n % 2 == 0]\n\n# Your solution should be in python\n# Your function should be in python\n\ndef filter_even8(n):\n    \"\"\"\n    :type",
      -0.094482421875
    ],
    [
      "def even_filter(n):\n    return lambda x: x%2==0\n\n#print(even_filter(1))\n#print(even_filter(2))\n#print(even_filter(3))\n#print(even_filter(4))\n#print(even_filter(5))\n#print(even_filter(6))\n#print(even_filter(7))\n#print(even_filter(8))\n#print(even_filter(9))\n#print(even_filter(10))\n#print(even_filter(11))\n#print(even_filter(12))\n#print(even_filter(13))\n#print(even_filter(14))\n#print(even_filter(15))\n#print(even_filter(16))\n#print(even_filter(17))\n#print(even_filter(18))\n#print(even_filter(19))\n#print(even_filter(20))\n#print(even_filter(21))\n#print(even_filter(22))\n#print(even_filter(23))\n#print(even_filter(24))\n#print(even_filter(25))\n#print(even_filter(26))\n#print(even_filter(27))\n#print(even_filter(28))\n#print(even_filter(29))\n#print(even_filter(30))\n#print(even_filter(31))\n#print(even_filter(32))\n#print(even_filter(33))\n#print(even_filter(34))\n#print(even_filter(35))\n#print(even_filter(36))\n#print(even_filter(37))\n#print(even_filter(38))\n#print(even_filter(39))\n#print(even_filter(40))\n#print(even_filter(41))\n#print(even_filter(42))\n#print(even_filter(43))\n#print(even_filter(44))\n#print(even_filter(45))\n#print(even_filter(46))\n#print(even_filter(47))\n#print(even_filter(48))\n#print(even_filter(49))\n#",
      -0.1170654296875
    ],
    [
      "def even_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in numbers if lambda y: y % 2 == 0]",
      -0.462158203125
    ],
    [
      "def even(number):\n    \"\"\"\n    Return True if number is even, otherwise False.\n    \"\"\"\n    return number % 2 == 0\n\n\nprint(even(15))\nprint(even(17))\nprint(even(25))\nprint(even(35))\nprint(even(45))",
      -0.513671875
    ],
    [
      "def filter_evens(n):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n    def evens(n):\n        return n % 2 == 0\n    return filter(evens, n)\n\nprint filter_evens(range(1, 100))",
      -0.6630859375
    ],
    [
      "#!/usr/bin/env python\n\ndef filter_even(n):\n    return lambda x: x % 2 == 0 and x >= 0 and x < n\n\nprint filter_even(10)\n#>>> lambda x: x % 2 == 0 and x >= 0 and x < 10\n\nprint filter_even(10)\n#>>> lambda x: x % 2 == 0 and x >= 0 and x < 10\n\nprint filter_even(10)\n#>>> lambda x: x % 2 == 0 and x >= 0 and x < 10",
      -0.77734375
    ],
    [
      "def filter_even(numbers):\n    return [n for n in numbers if n % 2 == 0]\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print filter_even(numbers)",
      -0.85595703125
    ],
    [
      "def even_numbers(numbers):\n    return [i for i in numbers if i % 2 == 0]\n\ndef test():\n    assert even_numbers([1, 2, 3, 4, 5]) == [2, 4, 6]\n    assert even_numbers([4, 2, 1]) == [4, 2]\n    assert even_numbers([-4, -2, -1]) == [-4, -2]\n\nif __name__ == \"__main__\":\n    test()",
      -0.85595703125
    ],
    [
      "def filterEven(n):\n    return lambda x: x % 2 == 0 and x > 0\n\n\ndef main():\n    \"\"\"\n    Write a function to print even numbers in a list of integers.\n    \"\"\"\n    evenNumbers = [2, 4, 6, 8]\n\n    print(filterEven(evenNumbers))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85595703125
    ],
    [
      "def filterEven(numbers):\n    return [n for n in numbers if n % 2 == 0]\n\nnumbers = [2, 6, 4, 3, 8, 1, 9, 5]\n\nprint filterEven(numbers)",
      -0.85693359375
    ],
    [
      "def even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(even_numbers(numbers))",
      -0.85693359375
    ],
    [
      "def filter_even(numbers):\n    \"\"\"\n    Filter even numbers using lambda function.\n\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [i for i in numbers if i % 2 == 0]\n\nif __name__ == '__main__':\n    assert filter_even([2, 4, 6, 8]) == [2, 4]",
      -0.85693359375
    ],
    [
      "def filter_even(n):\n    \"\"\"\n    Input:\n        n: an integer\n    Output:\n        a list of even numbers\n    Explanation:\n        Even numbers are numbers that are divisible by 2, 3, or 5.\n    \"\"\"\n    return [i for i in range(1, n + 1) if i % 2 == 0 and i % 5 == 0]\n\n#print filter_even(100)\n#print filter_even(200)\n#print filter_even(300)\n#print filter_even(500)\n#print filter_even(600)\n#print filter_even(700)\n#print filter_even(800)\n#print filter_even(900)",
      -0.85693359375
    ],
    [
      "def filterEven(n):\n    \"\"\"\n    >>> filterEven(8)\n    [0, 2, 4]\n    >>> filterEven([1, 2, 3, 4])\n    [1, 3]\n    \"\"\"\n    return [i for i in n if i % 2 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/filter-evens\n\ndef filter_evens(numbers):\n    return [number for number in numbers if number % 2 == 0]\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_evens(numbers))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def filter_even(numbers):\n    return [x for x in numbers if x % 2 == 0]\n\ndef filter_even_test():\n    assert filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n\nif __name__ == '__main__':\n    filter_even_test()",
      -0.85693359375
    ],
    [
      "def even_filter(n):\n    return lambda x: x % 2 == 0\n\nprint(even_filter(10))",
      -0.85693359375
    ],
    [
      "def even_filter(n):\n    return lambda x: x % 2 == 0\n\nprint(even_filter(10))",
      -0.85693359375
    ],
    [
      "def is_even(x):\n    return x % 2 == 0\n\nprint(filter(is_even, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/even-numbers/problem\n\ndef filter_even(n):\n    return lambda x: x % 2 == 0\n\n\nprint filter_even(5)",
      -0.85693359375
    ],
    [
      "def even_numbers(numbers):\n    return [x for x in numbers if x % 2 == 0]\n\nprint(even_numbers([1, 2, 3, 4, 5]))",
      -0.85693359375
    ],
    [
      "from collections import Counter\n\ndef even_number(n):\n    \"\"\"\n    Example\n    >>> even_number(5)\n    [True, True, False, False]\n    >>> even_number(2)\n    [True, False]\n    \"\"\"\n    return [True if n % 2 == 0 else False for n in range(n + 1)]\n\n\nif __name__ == '__main__':\n    assert even_number(5) == [True, True, False, False]\n    assert even_number(2) == [True, False]",
      -0.85693359375
    ],
    [
      "from collections import namedtuple\n\nEvenNumber = namedtuple('EvenNumber', 'n')\n\ndef is_even(n):\n    return n % 2 == 0\n\nprint(is_even(10))\nprint(is_even(3))\nprint(is_even(20))\nprint(is_even(12))",
      -0.85693359375
    ],
    [
      "def filter_even(n):\n    return lambda x: (x % 2) == 0\n\n\ndef filter_odd(n):\n    return lambda x: (x % 2)!= 0\n\n\nif __name__ == '__main__':\n    print filter_even(6)\n    print filter_odd(6)",
      -0.85693359375
    ],
    [
      "def filter_even(n):\n    return lambda x: x % 2 == 0 and x > 0\n\ndef main():\n    even_numbers = filter(filter_even, range(10))\n    print(even_numbers)\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def even_numbers(numbers):\n    return [i for i in numbers if i % 2 == 0]\n\nprint(even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.85693359375
    ],
    [
      "def filter_even_numbers(lst):\n    return [i for i in lst if i % 2 == 0]\n\nprint(filter_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.85693359375
    ],
    [
      "def even(n):\n    return lambda x: x % 2 == 0\n\nprint even(100)",
      -0.857421875
    ],
    [
      "def even_numbers(numbers):\n    return [x for x in numbers if x % 2 == 0]",
      -0.857421875
    ],
    [
      "def filter_even(n):\n    return lambda x: x%2 == 0 and x > 0\n\nprint filter_even(2)\nprint filter_even(7)\nprint filter_even(8)\nprint filter_even(9)\nprint filter_even(10)",
      -0.85791015625
    ],
    [
      "def is_even(x):\n    \"\"\"\n    Check if a number is even.\n    \"\"\"\n    return lambda x: x % 2 == 0\n\nprint(is_even(1))\nprint(is_even(3))\nprint(is_even(4))",
      -0.85791015625
    ],
    [
      "def even_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in numbers if x % 2 == 0]",
      -0.85791015625
    ],
    [
      "def even_numbers_filter(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\nprint(even_numbers_filter([1, 2, 3, 4, 5, 6]))\n\n\"\"\"\nOutput:\n>>> [1, 2, 3, 4, 5, 6]\n\"\"\"",
      -0.85791015625
    ],
    [
      "def filterEven(list):\n    return [item for item in list if not item % 2]\n\n\nif __name__ == '__main__':\n    assert filterEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\ndef filter_even_numbers(numbers):\n    \"\"\"\n    Filter even numbers using lambda function.\n\n    Input:\n        numbers = [1, 2, 3, 4, 5]\n\n    Output:\n        [1, 3, 5]\n    \"\"\"\n    return [x for x in numbers if x % 2 == 0]\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5]\n    print(filter_even_numbers(numbers))\n    print(Counter(filter_even_numbers(numbers)))",
      -0.8583984375
    ],
    [
      "def is_even(number):\n    \"\"\"\n    :rtype: bool\n    \"\"\"\n    return number % 2 == 0\n\n\nprint(is_even(100))\nprint(is_even(200))\nprint(is_even(300))\nprint(is_even(400))\nprint(is_even(500))\nprint(is_even(600))",
      -0.8583984375
    ],
    [
      "def filter_even(n):\n    return n % 2 == 0\n\nprint filter_even(8)\nprint filter_even(9)\nprint filter_even(0)\nprint filter_even(-1)",
      -0.8583984375
    ],
    [
      "def filterEven(n):\n    \"\"\"\n    Input:\n        n: an integer\n    Output:\n        a list of even integers\n    Explanation:\n        For example:\n            filterEven(6) == [2, 4, 6]\n            filterEven(11) == [2, 4, 6, 8, 10]\n    \"\"\"\n    return [i for i in range(n) if i % 2 == 0]\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer[]}\n    def filterEven(self, nums):\n        return [i for i in nums if i % 2 == 0]\n\nif __name__ == '__main__':\n    print Solution().filterEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
      -0.8583984375
    ],
    [
      "def even_numbers(numbers):\n    return [i for i in numbers if i % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even_numbers(numbers)\n\n    # Expected output\n    # [2, 4, 6, 8, 10]\n\n    numbers = [1, 3, 5, 7, 9, 11]\n    even_numbers(numbers)\n\n    # Expected output\n    # [1, 3, 5, 7, 9, 11]",
      -0.8583984375
    ],
    [
      "def filter_even(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\nnumbers = [1, 2, 3, 4, 5]\nprint filter_even(numbers)",
      -0.8583984375
    ],
    [
      "def filterEven(n):\n    return lambda x: x % 2 == 0 and x >= 0 and x <= n\n\n\ndef main():\n    print filterEven(5)\n    print filterEven(4)\n    print filterEven(3)\n    print filterEven(2)\n    print filterEven(1)\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def filter_even(number):\n    return lambda n: n % 2 == 0\n\nprint filter_even(100)",
      -0.8583984375
    ],
    [
      "def even_numbers(numbers):\n    return [x for x in numbers if x % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(even_numbers(numbers))",
      -0.85888671875
    ],
    [
      "def even_filter(n):\n    return lambda x: x % 2 == 0 and x >= 0\n\nprint(even_filter(4))\nprint(even_filter(6))\nprint(even_filter(8))\n\n\"\"\"\nOutput:\n\n>>> even_filter(4)\nTrue\nTrue\nTrue\n\n>>> even_filter(6)\nTrue\nTrue\n\n>>> even_filter(8)\nFalse\n\"\"\"",
      -0.85888671875
    ],
    [
      "def even_numbers(numbers):\n    \"\"\"\n    :param numbers: List of integers\n    :return: List of even numbers\n    \"\"\"\n    return [x for x in numbers if x % 2 == 0]\n\nif __name__ == \"__main__\":\n    assert even_numbers([1, 2, 3, 4, 5]) == [2, 4, 6]\n    assert even_numbers([2, 4, 6]) == [2, 4, 6]\n    assert even_numbers([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
      -0.85888671875
    ],
    [
      "def filter_even(n):\n    return lambda x: x % 2 == 0 and x % 4 == 0\n\nprint filter_even(8)\nprint filter_even(9)\nprint filter_even(4)\nprint filter_even(5)",
      -0.85888671875
    ],
    [
      "def even(n):\n  return lambda x: x % 2 == 0\n\nif __name__ == '__main__':\n  print even(5)",
      -0.85888671875
    ],
    [
      "def filterEven(n):\n    return lambda x: x%2 == 0 and x > 0\n\nprint filterEven(10)\n\n\"\"\"\nWrite a function to filter odd numbers using lambda function.\n\"\"\"\n\ndef filterOdd(n):\n    return lambda x: x%2 == 1 and x > 0\n\nprint filterOdd(10)\n\n\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\n\ndef filterEven(n):\n    return lambda x: x%2 == 0 and x > 0\n\nprint filterEven(10)\n\n\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\n\ndef filterEven(n):\n    return lambda x: x%2 == 0 and x > 0\n\nprint filterEven(10)\n\n\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\n\ndef filterEven(n):\n    return lambda x: x%2 == 0 and x > 0\n\nprint filterEven(10)",
      -0.85888671875
    ],
    [
      "def filter_even(lst):\n    \"\"\"\n    Args:\n        lst (list): List to be filtered.\n\n    Returns:\n        list: Filtered list.\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n\n\nif __name__ == '__main__':\n    assert filter_even([2, 4, 6, 8]) == [2, 4, 6]\n    assert filter_even([2, 4, 6, 8, 10]) == [2, 4, 6, 8]\n    assert filter_even([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 8, 10]\n    assert filter_even([2, 4, 6, 8, 10, 12, 14]) == [2, 4, 6, 8, 10, 12]",
      -0.85888671875
    ],
    [
      "def even_numbers(num):\n    return lambda x: x % 2 == 0\n\nprint(even_numbers(10))",
      -0.85888671875
    ],
    [
      "def filter_even(n):\n    return lambda x: x % 2 == 0 and x >= 0\n\nprint filter_even(123)",
      -0.85888671875
    ],
    [
      "from collections import defaultdict\n\ndef filter_even(numbers):\n    \"\"\"\n    Write a function that returns a new list\n    containing only even numbers.\n    \"\"\"\n    evens = []\n    for number in numbers:\n        if number % 2 == 0:\n            evens.append(number)\n    return evens\n\ndef test():\n    assert filter_even([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\n    assert filter_even([2, 4, 6, 8, 10]) == [2, 4, 6]\n    assert filter_even([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 8, 10]\n\nif __name__ == \"__main__\":\n    test()",
      -1.029296875
    ],
    [
      "def filterEven(n):\n    if n % 2 == 0:\n        return n\n    return 0\n\n#print filterEven(7)\n#print filterEven(3)\n#print filterEven(1)\n#print filterEven(5)\n#print filterEven(12)\n#print filterEven(21)\n#print filterEven(22)\n#print filterEven(23)\n#print filterEven(24)\n#print filterEven(25)\n#print filterEven(26)\n#print filterEven(27)\n#print filterEven(28)\n#print filterEven(29)\n#print filterEven(30)\n#print filterEven(31)\n#print filterEven(32)\n#print filterEven(33)\n#print filterEven(34)\n#print filterEven(35)\n#print filterEven(36)\n#print filterEven(37)\n#print filterEven(38)\n#print filterEven(39)\n#print filterEven(40)\n#print filterEven(41)\n#print filterEven(42)\n#print filterEven(43)\n#print filterEven(44)\n#print filterEven(45)\n#print filterEven(46)\n#print filterEven(47)\n#print filterEven(48)\n#print filterEven(49)\n#print filterEven(50)\n#print filterEven(51)\n#print filterEven(52)\n#print filterEven(53)\n#print filterEven(54)\n#print filterEven(55)\n#print filterEven(56)\n#print filterEven(57)\n#print filterEven(58)\n#print filterEven(59)\n#print filterEven(60)\n#print filterEven(61)\n#print filterEven(62)\n#print filterEven(63)\n#print filterEven(64)\n#print filterEven(65)\n#print filterEven(66)\n#print filterEven(67)\n#print filterEven(68)\n#print filterEven(69)\n#print filterEven(70)\n#print filterEven(71)\n#print filterEven(72)\n#print filterEven(73)\n#print filterEven(74)\n#print filterEven(75)\n#print filterEven(76)",
      -1.0400390625
    ],
    [
      "def filter_even(n):\n    \"\"\"\n    Example:\n    >>> filter_even(20)\n    [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    >>> filter_even(22)\n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    >>> filter_even(24)\n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n    >>> filter_even(26)\n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n    >>> filter_even(28)\n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n    \"\"\"\n    return [i for i in n if i % 2 == 0]\n\nif __name__ == '__main__':\n    print filter_even(20)\n    print filter_even(22)\n    print filter_even(24)\n    print filter_even(26)\n    print filter_even(28)",
      -1.1396484375
    ],
    [
      "def filterEven(number):\n    \"\"\"\n    :param number: A number\n    :return: A list of even numbers\n    \"\"\"\n    return [number for number in range(0, number + 1) if number % 2 == 0]\n\n\nprint filterEven(5)\n#>>> [0, 2, 4]\n\nprint filterEven(10)\n#>>> [0, 2, 4, 6, 8]\n\nprint filterEven(11)\n#>>> [0, 2, 4, 6, 8, 10]\n\nprint filterEven(100)\n#>>> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
      -1.369140625
    ],
    [
      "def filterEven(n):\n    return lambda x: x % 2 == 0\n\nprint filterEven(5)\nprint filterEven(3)\nprint filterEven(6)",
      -1.4326171875
    ],
    [
      "def filter_even(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n\nprint filter_even([2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# your code should pass these tests:\n# [2, 4, 6, 8, 10]\n# [2, 4, 6, 8, 10]\n# [2, 4, 6, 8, 10]",
      -1.5029296875
    ],
    [
      "def even_numbers(n):\n    return lambda x: x % 2 == 0\n\nif __name__ == \"__main__\":\n    even_numbers(10)\n    even_numbers(0)\n    even_numbers(1)\n    even_numbers(2)\n    even_numbers(3)\n    even_numbers(4)\n    even_numbers(5)\n    even_numbers(6)\n    even_numbers(7)\n    even_numbers(8)\n    even_numbers(9)\n    even_numbers(10)\n    even_numbers(11)\n    even_numbers(12)\n    even_numbers(13)\n    even_numbers(14)\n    even_numbers(15)\n    even_numbers(16)\n    even_numbers(17)\n    even_numbers(18)\n    even_numbers(19)\n    even_numbers(20)\n    even_numbers(21)\n    even_numbers(22)\n    even_numbers(23)\n    even_numbers(24)\n    even_numbers(25)\n    even_numbers(26)\n    even_numbers(27)\n    even_numbers(28)\n    even_numbers(29)\n    even_numbers(30)\n    even_numbers(31)\n    even_numbers(32)\n    even_numbers(33)\n    even_numbers(34)\n    even_numbers(35)\n    even_numbers(36)\n    even_numbers(37)\n    even_numbers(38)\n    even_numbers(39)\n    even_numbers(40)\n    even_numbers(41)\n    even_numbers(42)\n    even_numbers(43)\n    even_numbers(44)\n    even_numbers(45)\n    even_numbers(46)\n    even_numbers(47)\n    even_numbers(48)\n    even_numbers(49)\n    even_numbers(50)\n    even_numbers(51)\n    even",
      -1.6337890625
    ],
    [
      "def filter_even_numbers(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number % 2 == 0:\n            result.append(number)\n    return result\n\nif __name__ == '__main__':\n    assert filter_even_numbers([2, 4, 6, 8]) == [2, 4, 6]\n    assert filter_even_numbers([2, 4, 6, 7, 8]) == [6, 8]",
      -1.654296875
    ],
    [
      "import collections\n\n\ndef even_filter(numbers):\n    \"\"\"\n    :type numbers: collections.Iterable[int]\n    :rtype: collections.Iterable[int]\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, numbers)\n\n\nif __name__ == '__main__':\n    print(even_filter([2, 4, 6, 8]))",
      -1.6962890625
    ],
    [
      "import timeit\n\ndef filter_even(n):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n    return lambda x: x % 2 == 0\n\ndef filter_even_timeit(n):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n    return lambda x: x % 2 == 0\n\ndef filter_even_numpy(n):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n    return lambda x: x % 2 == 0\n\ndef filter_even_numpy_timeit(n):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n    return lambda x: x % 2 == 0\n\nif __name__ == '__main__':\n    t = timeit.Timer(\"filter_even(10)\", \"from __main__ import filter_even, filter_even_timeit, filter_even_numpy, filter_even_numpy_timeit\")\n    print(t.timeit(10))\n    print(\"Python 2\")\n    t = timeit.Timer(\"filter_even(10)\", \"from __main__ import filter_even, filter_even_timeit, filter_even_numpy, filter_even_numpy_timeit\")\n    print(t.timeit(10))\n    print(\"Python 3\")\n    t = timeit.Timer(\"filter_even(10)\", \"from __main__ import filter_even, filter_even_timeit, filter_even_numpy, filter_even_numpy_timeit\")\n    print(t.timeit(10))\n    print(\"Numpy 2\")\n    t = timeit.Timer(\"filter_even(10)\", \"from __main__ import filter_even, filter_even_timeit, filter_even_numpy, filter_even_numpy_timeit\")\n    print(t.timeit(10))\n    print(\"Numpy 3\")\n    t = timeit.Timer(\"filter_even(10)\", \"from __main__ import filter_even, filter_even_timeit, filter_even_numpy, filter_even_numpy_timeit\")\n    print(t.timeit(",
      -1.9921875
    ],
    [
      "from functools import reduce\n\ndef filter_even(n):\n    return lambda x: x%2 == 0 and x >= 0 and x <= n\n\ndef main():\n    print filter_even(10)\n\nif __name__ == \"__main__\":\n    main()",
      -2.54296875
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCheck even number\n\"\"\"\n\ndef check_even_number(n):\n    return lambda x: int(x) % 2 == 0\n\n\ndef main():\n    \"\"\"\n    Check even number\n    \"\"\"\n    for n in range(100):\n        print(check_even_number(n))\n\n\nif __name__ == '__main__':\n    main()",
      -2.603515625
    ],
    [
      "def filter_even(n):\n    \"\"\"\n    >>> filter_even(3)\n    True\n    >>> filter_even(4)\n    True\n    >>> filter_even(5)\n    False\n    >>> filter_even(6)\n    False\n    >>> filter_even(7)\n    True\n    >>> filter_even(8)\n    False\n    \"\"\"\n    return lambda x: x % 2 == 0\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.75390625
    ],
    [
      "def is_even(number):\n    return number % 2 == 0\n\ndef is_even_lambda(number):\n    return lambda: number % 2 == 0\n\n# Note: the first lambda function is not evaluated.\ndef even_filter(number):\n    return number % 2 == 0\n\ndef even_filter_lambda(number):\n    return lambda: number % 2 == 0\n\n# Note: the first lambda function is not evaluated.\ndef even_filter_lambda_lambda(number):\n    return lambda: lambda: number % 2 == 0\n\ndef even_filter_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: number % 2 == 0\n\ndef even_filter_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: lambda: number % 2 == 0\n\ndef even_filter_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: lambda: lambda: number % 2 == 0\n\n# Note: the first lambda function is not evaluated.\ndef even_filter_lambda_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: lambda: lambda: lambda: number % 2 == 0\n\ndef even_filter_lambda_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: lambda: lambda: lambda: lambda: number % 2 == 0\n\ndef even_filter_lambda_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: lambda: lambda: lambda: lambda: number % 2 == 0\n\ndef even_filter_lambda_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: lambda: lambda: lambda: lambda: lambda: number % 2 == 0\n\ndef even_filter_lambda_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: lambda: lambda: lambda: lambda: lambda: number % 2 == 0\n\ndef even_filter_lambda_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: lambda: lambda: lambda: lambda: lambda: number % 2 == 0\n\ndef even_filter_lambda_lambda_lambda_lambda(number):\n    return lambda: lambda: lambda: lambda: lambda: lambda: lambda: lambda: number % 2 == 0\n\ndef even",
      -3.1484375
    ],
    [
      "def filter_evens(numbers):\n    \"\"\"\n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, numbers)\n\n\ndef filter_evens_with_filter_func(numbers):\n    \"\"\"\n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, numbers, filter_evens)\n\n\ndef filter_evens_with_lambda(numbers):\n    \"\"\"\n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, numbers, lambda x: x % 2 == 0)\n\n\ndef filter_evens_with_lambda_and_filter_func(numbers):\n    \"\"\"\n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, numbers, lambda x: x % 2 == 0, filter_evens)\n\n\ndef filter_evens_with_lambda_and_filter_func_with_default(numbers):\n    \"\"\"\n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, numbers, lambda x: x % 2 == 0, filter_evens, 42)\n\n\ndef filter_evens_with_lambda_and_filter_func_with_default_and_filter_func(numbers):\n    \"\"\"\n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, numbers, lambda x: x % 2 == 0, filter_evens, lambda x: x % 2 == 0, filter_evens)\n\n\ndef filter_evens_with_lambda_and_filter_func_with_default_and_filter_func_with_default(numbers):\n    \"\"\"\n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, numbers, lambda x: x % 2",
      -3.390625
    ],
    [
      "def filter_even_numbers(numbers):\n    return filter(lambda x: x % 2 == 0, numbers)\n\n\n# Test cases:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint filter_even_numbers(numbers)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint filter_even_numbers(numbers)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint filter_even_numbers(numbers)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint filter_even_numbers(numbers)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint filter_even_numbers(numbers)",
      -3.431640625
    ],
    [
      "# W0621:\ndef filter_even(n):\n    if n % 2:\n        return True\n    else:\n        return False\n\ndef test():\n    assert filter_even(1)\n    assert filter_even(2)\n    assert not filter_even(3)\n    assert filter_even(4)\n    assert filter_even(5)\n    assert not filter_even(6)\n    assert not filter_even(7)\n    assert filter_even(8)\n    assert not filter_even(9)\n    assert filter_even(10)\n    assert not filter_even(11)\n\ntest()",
      -4.3671875
    ],
    [
      "from collections import Counter\nfrom functools import lru_cache\n\nclass EvenNumber:\n    \"\"\"Class to filter even numbers using lambda function\"\"\"\n    def __init__(self, number):\n        self.number = number\n\n    @lru_cache(maxsize=None)\n    def is_even(self):\n        \"\"\"Return True if number is even else False\"\"\"\n        return self.number % 2 == 0\n\n    @lru_cache(maxsize=None)\n    def is_odd(self):\n        \"\"\"Return True if number is odd else False\"\"\"\n        return not self.is_even()\n\n    @lru_cache(maxsize=None)\n    def even_even_number(self):\n        \"\"\"Return True if number is even number else False\"\"\"\n        return self.is_even() and self.is_even()\n\n    @lru_cache(maxsize=None)\n    def even_odd_number(self):\n        \"\"\"Return True if number is even number else False\"\"\"\n        return not self.is_even() and self.is_even()\n\n    @lru_cache(maxsize=None)\n    def odd_odd_number(self):\n        \"\"\"Return True if number is odd number else False\"\"\"\n        return not self.is_even() and not self.is_even()\n\n    @lru_cache(maxsize=None)\n    def odd_even_number(self):\n        \"\"\"Return True if number is odd number else False\"\"\"\n        return self.is_even() and not self.is_even()\n\n    @lru_cache(maxsize=None)\n    def even_even_number_with_lambda(self):\n        \"\"\"Return True if number is even number else False\"\"\"\n        return self.is_even(number=self.number)\n\n    @lru_cache(maxsize=None)\n    def even_odd_number_with_lambda(self):\n        \"\"\"Return True if number is even number else False\"\"\"\n        return self.is_even(number=self.number)\n\n    @lru_cache(maxsize=None)\n    def odd_odd_number_with_lambda(self):\n        \"\"\"Return True if number is odd number else False\"\"\"\n        return self",
      -5.02734375
    ],
    [
      "def even_filter(n):\n    return lambda x: x % 2 == 0\n\nprint(even_filter(1))\n#>>> True\n\nprint(even_filter(10))\n#>>> True\n\nprint(even_filter(5))\n#>>> True\n\nprint(even_filter(8))\n#>>> False\n\nprint(even_filter(21))\n#>>> False\n\n\"\"\"\nWrite a function that returns a list of even numbers between\n1 and 10.\n\"\"\"\n\ndef even_list(n):\n    return [x for x in range(1, n + 1) if even_filter(x)]\n\nprint(even_list(1))\n#>>> [1]\n\nprint(even_list(10))\n#>>> [2, 4, 6, 8]\n\nprint(even_list(5))\n#>>> [2, 4, 6]\n\nprint(even_list(8))\n#>>> [2, 4, 6, 8]\n\nprint(even_list(21))\n#>>> [2, 4, 6, 8, 10]",
      -5.36328125
    ],
    [
      "def filter_even(n):\n    return lambda x: x % 2 == 0\n    \ndef test():\n    assert filter_even(10) == [2, 4, 6, 8]\n    assert filter_even(20) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    assert filter_even(100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n    assert filter_even(1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\n\ndef main():\n    test()\n\nif __name__ == '__main__':\n    main()",
      -5.38671875
    ],
    [
      "def filter_even(n):\n    return lambda x: x % 2 == 0 and x % 4 == 0\n\ndef main():\n    evens = [2, 4, 6, 8]\n    evens = filter(filter_even, evens)\n    print(evens)\n\nif __name__ == \"__main__\":\n    main()",
      -5.86328125
    ],
    [
      "def even_filter(n):\n    \"\"\"\n    :param n: Integer to filter\n    :return: True if n is even, otherwise False\n    \"\"\"\n    return lambda x: x % 2 == 0\n\n\ndef test_even_filter():\n    assert even_filter(1) == True\n    assert even_filter(2) == True\n    assert even_filter(3) == False\n    assert even_filter(4) == False\n    assert even_filter(5) == False\n    assert even_filter(6) == False\n    assert even_filter(7) == False\n    assert even_filter(8) == False\n    assert even_filter(9) == False\n    assert even_filter(10) == False\n    assert even_filter(11) == False\n    assert even_filter(12) == False\n    assert even_filter(13) == False\n    assert even_filter(14) == False\n    assert even_filter(15) == False\n    assert even_filter(16) == False\n    assert even_filter(17) == False\n    assert even_filter(18) == False\n    assert even_filter(19) == False\n    assert even_filter(20) == False\n    assert even_filter(21) == False\n    assert even_filter(22) == False\n    assert even_filter(23) == False\n    assert even_filter(24) == False\n    assert even_filter(25) == False\n    assert even_filter(26) == False\n    assert even_filter(27) == False\n    assert even_filter(28) == False\n    assert even_filter(29) == False\n    assert even_filter(30) == False\n    assert even_filter(31) == False\n    assert even_filter(32) == False\n    assert even_filter(33) == False\n    assert even_filter(34) == False\n    assert even_filter(35) == False\n    assert even_filter(36) == False\n    assert even_filter(37) == False\n    assert even_filter(38) == False\n    assert even_filter(39) == False\n    assert even_filter(40) == False\n    assert even_filter(41) == False\n    assert even_",
      -6.27734375
    ],
    [
      "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def filterEven(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: List[Interval]\n        \"\"\"\n        return [x for x in intervals if x.start % 2 == 0]\n\nif __name__ == \"__main__\":\n    assert Solution().filterEven([Interval(2, 4), Interval(1, 3), Interval(5, 7)]) == [Interval(1, 3), Interval(5, 7)]\n    assert Solution().filterEven([Interval(1, 3), Interval(5, 7)]) == [Interval(1, 3), Interval(5, 7)]\n    assert Solution().filterEven([]) == []\n    assert Solution().filterEven([Interval(1, 3)]) == [Interval(1, 3)]",
      -10.03125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}