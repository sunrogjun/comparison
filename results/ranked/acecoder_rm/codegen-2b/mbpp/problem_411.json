{
  "problem": {
    "task_id": "MBPP/422",
    "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
    "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
    "test_list": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ],
    "challenge_test_list": [],
    "problem_id": 411
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def average(n):\n    \"\"\"\n    Input:\n        n = the number of natural numbers\n    Output:\n        the average of cubes of the first n natural numbers\n    Example:\n        >>> average(2)\n        1.75\n        >>> average(3)\n        2.5\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n\n\nif __name__ == '__main__':\n    print(average(2))\n    print(average(3))",
      13.5
    ],
    [
      "def get_average(n):\n    # Create a list of cubes of the first n natural numbers\n    numbers = [i**3 for i in range(n)]\n    # Sum the cubes\n    total = sum(numbers)\n    # Calculate the average\n    average = total / n\n    return average\n\n\n# Test\nif __name__ == '__main__':\n    print(get_average(5))",
      11.734375
    ],
    [
      "import math\n\ndef find_average(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    :param n: the number of cubes\n    :return: the average of cubes\n    \"\"\"\n\n    # your code here\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n\n\n\nif __name__ == '__main__':\n    print(find_average(3))\n    print(find_average(10))\n    print(find_average(20))\n    print(find_average(100))\n    print(find_average(1000))",
      11.4921875
    ],
    [
      "#!/usr/bin/env python\n\ndef find_average(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n    \"\"\"\n    avg = 0\n    for i in range(1, n+1):\n        avg += i ** 3\n    return avg / n\n\n#print find_average(2)\n#print find_average(3)\n#print find_average(4)\n#print find_average(5)\n#print find_average(6)\n#print find_average(7)\n#print find_average(8)\n#print find_average(9)\n#print find_average(10)\n#print find_average(11)\n#print find_average(12)\n#print find_average(13)\n#print find_average(14)\n#print find_average(15)\n#print find_average(16)\n#print find_average(17)\n#print find_average(18)\n#print find_average(19)\n#print find_average(20)\n#print find_average(21)\n#print find_average(22)\n#print find_average(23)\n#print find_average(24)\n#print find_average(25)\n#print find_average(26)\n#print find_average(27)\n#print find_average(28)\n#print find_average(29)\n#print find_average(30)\n#print find_average(31)\n#print find_average(32)\n#print find_average(33)\n#print find_average(34)\n#print find_average(35)\n#print find_average(36)\n#print find_average(37)\n#print find_average(38)\n#print find_average(39)\n#print find_average(40)\n#print find_average(41)\n#print find_average(42)\n#print find_average(43)\n#print find_average(44)\n#print find_average(45)\n#print find_average(46)\n#print find_average(47)\n#print find_average(48)\n#print find_average(49)\n#print find_average(50)",
      6.3671875
    ],
    [
      "import math\n\ndef find_average(n):\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += (i ** 3)\n    return sum_of_cubes / n\n\n# Test cases\nassert(find_average(2) == 1.0)\nassert(find_average(3) == 2.0)\nassert(find_average(4) == 3.0)\nassert(find_average(5) == 4.0)\nassert(find_average(6) == 5.0)\nassert(find_average(7) == 6.0)\nassert(find_average(8) == 7.0)\nassert(find_average(9) == 8.0)\nassert(find_average(10) == 9.0)\nassert(find_average(11) == 10.0)\nassert(find_average(12) == 11.0)\nassert(find_average(13) == 12.0)\nassert(find_average(14) == 13.0)\nassert(find_average(15) == 14.0)\nassert(find_average(16) == 15.0)\nassert(find_average(17) == 16.0)\nassert(find_average(18) == 17.0)\nassert(find_average(19) == 18.0)\nassert(find_average(20) == 19.0)\nassert(find_average(21) == 20.0)\nassert(find_average(22) == 21.0)\nassert(find_average(23) == 22.0)\nassert(find_average(24) == 23.0)\nassert(find_average(25) == 24.0)\nassert(find_average(26) == 25.0)\nassert(find_average(27) == 26.0)\nassert(find_average(28) == 27.0)\nassert(find_average(29) == 28.0)\nassert(find_average(30) == 29.0)\nassert(find_average(31) == 30.0)\nassert(find_average(32) == 31.0)\nassert(find_average(33) == 32.0)\nassert(",
      5.6328125
    ],
    [
      "def average_of_cubes(n):\n    return (1.0 * sum(x**3 for x in range(1, n + 1))) / (n * 3)\n\nprint(average_of_cubes(4))\n\n\"\"\"\nOutput:\n\n1.0\n\"\"\"",
      4.5546875
    ],
    [
      "import math\n\n\ndef average_of_cubes(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += math.pow(i, 3)\n\n    return sum / n\n\n\nif __name__ == \"__main__\":\n    print(average_of_cubes(10))",
      4.0703125
    ],
    [
      "import math\n\ndef get_average(n):\n    cubes = [math.pow(i,3) for i in range(1,n+1)]\n    average = sum(cubes) / float(n)\n    return average\n\n\nif __name__ == \"__main__\":\n    # Sample Inputs\n    # n = 1\n    # n = 2\n    # n = 3\n    # n = 4\n    n = 5\n    print get_average(n)",
      4.0625
    ],
    [
      "import timeit\n\ndef average_of_n_cubes(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return sum(n**3 for n in range(1, n+1)) / (n * n * n)\n\nif __name__ == '__main__':\n    average_of_n_cubes(10)\n    print(timeit.timeit(\"average_of_n_cubes(10)\", setup=\"from __main__ import average_of_n_cubes\", number=1))",
      3.892578125
    ],
    [
      "def cube(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers\n    :param n: int\n    :return: float\n    \"\"\"\n    if n == 0:\n        return 0\n    return 1.0 * sum([x**3 for x in range(1, n + 1)]) / (n + 1)\n\nif __name__ == \"__main__\":\n    print(cube(4))\n    print(cube(3))\n    print(cube(2))\n    print(cube(1))\n    print(cube(0))",
      3.412109375
    ],
    [
      "def average_of_cubes(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    return sum(map(lambda x: pow(x, 3), range(1, n + 1))) / n\n\n\nif __name__ == \"__main__\":\n    print(average_of_cubes(3))\n    print(average_of_cubes(4))",
      2.5703125
    ],
    [
      "def first_n_natural_numbers(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result / n\n\nif __name__ == \"__main__\":\n    print first_n_natural_numbers(3)\n    print first_n_natural_numbers(4)\n    print first_n_natural_numbers(5)\n    print first_n_natural_numbers(6)\n    print first_n_natural_numbers(7)\n    print first_n_natural_numbers(8)\n    print first_n_natural_numbers(9)\n    print first_n_natural_numbers(10)\n    print first_n_natural_numbers(100)\n    print first_n_natural_numbers(1000)\n    print first_n_natural_numbers(10000)",
      2.2421875
    ],
    [
      "def find_average_of_cube(n):\n    \"\"\"\n    Given n natural numbers, find the average of all cubes of these numbers.\n    \"\"\"\n    numbers = [0] * n\n    total = 0\n    for i in range(1, n + 1):\n        numbers[i - 1] = i ** 3\n        total += numbers[i - 1]\n    return total / n\n\nif __name__ == \"__main__\":\n    print(find_average_of_cube(4))\n    print(find_average_of_cube(10))\n    print(find_average_of_cube(15))\n    print(find_average_of_cube(100))\n    print(find_average_of_cube(1000))\n    print(find_average_of_cube(10000))",
      1.96484375
    ],
    [
      "def average_of_cube(n):\n    total = 0\n    for i in range(n):\n        total += pow(i, 3)\n    return total / n\n\n\nif __name__ == '__main__':\n    print(average_of_cube(4))\n    print(average_of_cube(5))\n    print(average_of_cube(6))\n    print(average_of_cube(7))\n    print(average_of_cube(8))\n    print(average_of_cube(9))\n    print(average_of_cube(10))\n    print(average_of_cube(11))\n    print(average_of_cube(12))\n    print(average_of_cube(13))\n    print(average_of_cube(14))",
      1.6650390625
    ],
    [
      "def get_average_of_cubes(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    return sum(map(lambda x: pow(x, 3), range(1, n + 1))) / n\n\nif __name__ == \"__main__\":\n    print(get_average_of_cubes(1))\n    print(get_average_of_cubes(2))\n    print(get_average_of_cubes(3))\n    print(get_average_of_cubes(4))\n    print(get_average_of_cubes(5))\n    print(get_average_of_cubes(6))\n    print(get_average_of_cubes(7))\n    print(get_average_of_cubes(8))\n    print(get_average_of_cubes(9))\n    print(get_average_of_cubes(10))\n    print(get_average_of_cubes(11))\n    print(get_average_of_cubes(12))\n    print(get_average_of_cubes(13))\n    print(get_average_of_cubes(14))\n    print(get_average_of_cubes(15))\n    print(get_average_of_cubes(16))\n    print(get_average_of_cubes(17))\n    print(get_average_of_cubes(18))\n    print(get_average_of_cubes(19))\n    print(get_average_of_cubes(20))\n    print(get_average_of_cubes(21))\n    print(get_average_of_cubes(22))\n    print(get_average_of_cubes(23))\n    print(get_average_of_cubes(24))\n    print(get_average_of_cubes(25))\n    print(get_average_of_cubes(26))\n    print(get_average_of_cubes(27))\n    print(get_average_of_cubes(28))\n    print(get_average_of_cubes(29))\n    print(get_",
      1.6630859375
    ],
    [
      "#!/usr/bin/python\n\ndef find_average(n):\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total / n\n\ndef main():\n    print find_average(10)\n\nif __name__ == '__main__':\n    main()",
      1.6552734375
    ],
    [
      "def average(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n    \"\"\"\n    return sum([1 for i in range(n)]) / n\n\nif __name__ == \"__main__\":\n    print(average(5))",
      1.533203125
    ],
    [
      "def average(n):\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n    return total/n\n\ndef main():\n    print average(10)\n\nif __name__ == '__main__':\n    main()",
      1.3623046875
    ],
    [
      "import numpy as np\n\ndef average_of_cubes(n):\n    \"\"\"\n    Input:\n        n: int\n    Output:\n        float\n    \"\"\"\n    x = np.arange(1, n+1)\n    x = np.array(x)\n    y = np.array(x)\n    y = y**3\n    return np.mean(y)\n\nif __name__ == \"__main__\":\n    # Test case 1\n    print(average_of_cubes(4))\n    # Test case 2\n    print(average_of_cubes(5))",
      1.216796875
    ],
    [
      "import numpy as np\n\ndef find_avg_cube(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n\n    :param n: The number of natural numbers to average.\n    :return: The average of cubes of first n natural numbers.\n    \"\"\"\n    n = int(n)\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n\n    result = np.zeros(n)\n    for i in range(n):\n        result[i] = i ** 3\n    return np.mean(result)\n\n\nif __name__ == '__main__':\n    print(find_avg_cube(2))\n    print(find_avg_cube(3))\n    print(find_avg_cube(4))\n    print(find_avg_cube(5))\n    print(find_avg_cube(6))\n    print(find_avg_cube(7))\n    print(find_avg_cube(8))\n    print(find_avg_cube(9))\n    print(find_avg_cube(10))\n    print(find_avg_cube(11))\n    print(find_avg_cube(12))\n    print(find_avg_cube(13))\n    print(find_avg_cube(14))\n    print(find_avg_cube(15))\n    print(find_avg_cube(16))\n    print(find_avg_cube(17))\n    print(find_avg_cube(18))\n    print(find_avg_cube(19))\n    print(find_avg_cube(20))\n    print(find_avg_cube(21))\n    print(find_avg_cube(22))\n    print(find_avg_cube(23))\n    print(find_avg_cube(24))\n    print(find_avg_cube(25))\n    print(find_avg_cube(26))\n    print(find_avg_cube(27))\n    print(find_avg_cube(28))\n    print(find_avg_cube(29))\n    print",
      1.0087890625
    ],
    [
      "from functools import reduce\n\ndef average(n):\n    return reduce(lambda x, y: x + y, (i**3 for i in range(1, n+1))) / (n**3)\n\nprint(average(10))\nprint(average(20))\nprint(average(100))",
      0.99658203125
    ],
    [
      "def find_average_of_cubes(n):\n    \"\"\"\n    >>> find_average_of_cubes(1)\n    3\n    >>> find_average_of_cubes(5)\n    10\n    >>> find_average_of_cubes(15)\n    18\n    >>> find_average_of_cubes(20)\n    20\n    \"\"\"\n    # TODO: Write your code here\n    return sum(map(lambda x: x ** 3, range(1, n+1))) / n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.91796875
    ],
    [
      "def average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(average(n))",
      0.80810546875
    ],
    [
      "def average(n):\n    cubes = 0\n    for i in range(1, n+1):\n        cubes += i**3\n    return cubes / n\n\nprint average(7)",
      0.607421875
    ],
    [
      "import numpy as np\n\ndef average(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n\n    :param n: The number of cubes\n    :return: The average of cubes\n    \"\"\"\n    return np.sum(np.power(np.arange(1, n + 1), 3)) / n\n\nif __name__ == '__main__':\n    print(average(1))\n    print(average(2))\n    print(average(3))\n    print(average(4))",
      0.43701171875
    ],
    [
      "import numpy as np\n\ndef first_n_cubes(n):\n    \"\"\"\n    Given a number of cubes, find the average.\n    \"\"\"\n\n    return np.sum(np.power(np.arange(1, n+1), 3))/float(n)\n\nprint(first_n_cubes(5))",
      0.10589599609375
    ],
    [
      "def average(n):\n    if n == 1:\n        return 1\n    return sum([x ** 3 for x in range(1, n + 1)]) / (n ** 3)\n\nprint(average(2))\nprint(average(3))\nprint(average(4))\nprint(average(5))\nprint(average(6))",
      -0.0135345458984375
    ],
    [
      "def average(n):\n    \"\"\"\n    Average of cubes of first n natural numbers.\n\n    >>> average(4)\n    1.25\n    >>> average(6)\n    2.5\n    >>> average(10)\n    4.75\n    \"\"\"\n    return sum(i**3 for i in range(1, n+1)) / float(n)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.03924560546875
    ],
    [
      "import math\n\ndef average(n):\n    if n == 0:\n        return 0\n    return sum(map(lambda x: x**3, range(1, n + 1))) ** 0.333333333\n\ndef main():\n    print(average(5))\n\nif __name__ == '__main__':\n    main()",
      -0.1796875
    ],
    [
      "import math\n\ndef find_average(num):\n    \"\"\"\n    :type num: int\n    :rtype: float\n    \"\"\"\n    return 1.0 * sum(math.pow(i, 3) for i in range(1, num + 1)) / (num * math.pow(3, 2))\n\n\nif __name__ == '__main__':\n    print(find_average(3))",
      -0.2098388671875
    ],
    [
      "def find_average(n):\n    \"\"\"\n    Function to find average of cubes of first n natural numbers\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nif __name__ == '__main__':\n    print find_average(5)\n    print find_average(10)\n    print find_average(20)\n    print find_average(100)",
      -0.3046875
    ],
    [
      "import sys\n\n\ndef average(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    return sum / n\n\n\nif __name__ == '__main__':\n    n = int(sys.argv[1])\n    print(average(n))",
      -0.32861328125
    ],
    [
      "def average(n):\n    if n == 0:\n        return 0\n    else:\n        return sum(map(lambda x: x**3, range(1, n+1))) / n\n\nprint average(3)",
      -0.360595703125
    ],
    [
      "import math\n\ndef find_average_of_cubes(n):\n    cubes = [0] * n\n    for i in range(n):\n        cubes[i] = i ** 3\n    avg = 0\n    for i in range(n):\n        avg += cubes[i]\n    avg = avg / n\n    return avg\n\nif __name__ == \"__main__\":\n    avg = find_average_of_cubes(2)\n    print(avg)\n    avg = find_average_of_cubes(3)\n    print(avg)\n    avg = find_average_of_cubes(4)\n    print(avg)\n    avg = find_average_of_cubes(5)\n    print(avg)\n    avg = find_average_of_cubes(6)\n    print(avg)\n    avg = find_average_of_cubes(7)\n    print(avg)\n    avg = find_average_of_cubes(8)\n    print(avg)\n    avg = find_average_of_cubes(9)\n    print(avg)\n    avg = find_average_of_cubes(10)\n    print(avg)\n    avg = find_average_of_cubes(11)\n    print(avg)\n    avg = find_average_of_cubes(12)\n    print(avg)\n    avg = find_average_of_cubes(13)\n    print(avg)\n    avg = find_average_of_cubes(14)\n    print(avg)\n    avg = find_average_of_cubes(15)\n    print(avg)\n    avg = find_average_of_cubes(16)\n    print(avg)\n    avg = find_average_of_cubes(17)\n    print(avg)\n    avg = find_average_of_cubes(18)\n    print(avg)\n    avg = find_average_of_cubes(19)\n    print(avg)\n    av",
      -0.477294921875
    ],
    [
      "import math\n\ndef average(n):\n    return (1.0 * n) / math.sqrt(n)\n\n# Your code here",
      -0.61474609375
    ],
    [
      "import math\n\ndef average_of_cubes(n):\n    return round(math.sqrt(sum(map(lambda x: x ** 3, range(1, n + 1)))) / (n + 1), 2)\n\nif __name__ == '__main__':\n    print(average_of_cubes(10))",
      -0.70263671875
    ],
    [
      "def get_average(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / n\n\nprint(get_average(10))",
      -0.7666015625
    ],
    [
      "def average(n):\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i ** 3)\n    avg = sum(cubes) / len(cubes)\n    return avg\n\nprint average(10)",
      -0.8046875
    ],
    [
      "# Function to calculate average of cubes of first n natural numbers\ndef average(n):\n    # Initialize variables\n    total = 0\n    cubes = 0\n    # Calculate average of cubes\n    for i in range(1, n + 1):\n        cubes = i ** 3\n        total += cubes\n    return total / n\n\n# Test cases\nprint average(10)\nprint average(5)\nprint average(20)\nprint average(15)\nprint average(25)\nprint average(30)",
      -0.85693359375
    ],
    [
      "def average(n):\n    result = 0\n    for i in range(1, n+1):\n        result += pow(i, 3)\n    return result / n\n\nif __name__ == '__main__':\n    print(average(10))",
      -0.85693359375
    ],
    [
      "def cube_n(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / (n * 3)\n\nprint cube_n(5)",
      -0.85693359375
    ],
    [
      "def average(n):\n    return sum(range(1, n+1)) / n\n\nprint(average(10))",
      -0.85693359375
    ],
    [
      "def average(n):\n    \"\"\"\n    average(n)\n\n    Write a python function to find the average of cubes of first n natural numbers.\n\n    Example:\n        >>> average(3)\n        6.0\n    \"\"\"\n    return sum(range(1, n + 1)) / n\n\nif __name__ == \"__main__\":\n    print(average(10))",
      -0.85693359375
    ],
    [
      "def avg(n):\n    return sum(1 for _ in range(n)) / n\n\nif __name__ == \"__main__\":\n    print(avg(100))\n    print(avg(2))\n    print(avg(3))\n    print(avg(4))\n    print(avg(5))",
      -0.85693359375
    ],
    [
      "def average(n):\n    return sum(map(lambda x: x ** 3, range(1, n + 1))) / n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(average(n))",
      -0.85693359375
    ],
    [
      "import math\n\ndef average(n):\n    # return sum(cubes(n)) / n\n    return math.sqrt(sum(cubes(n)))\n\ndef cubes(n):\n    return [i ** 3 for i in range(n)]\n\nif __name__ == \"__main__\":\n    print(average(3))",
      -0.85693359375
    ],
    [
      "def average(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / (n + 1)\n\nif __name__ == '__main__':\n    print(average(2))\n    print(average(3))\n    print(average(4))\n    print(average(5))",
      -0.85693359375
    ],
    [
      "import math\n\ndef average(n):\n    return math.pow(n, 3)/3\n\nprint(average(3))",
      -0.857421875
    ],
    [
      "def cube(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result / n\n\ndef average(n):\n    return cube(n) / n\n\nprint(\"Average of first n natural numbers:\", average(10))",
      -0.85791015625
    ],
    [
      "import math\n\ndef average(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += pow(i, 3)\n    return total / (n * 3)\n\nprint(average(10))",
      -0.85791015625
    ],
    [
      "def average(n):\n    # write your code here\n    return sum(map(lambda x: pow(x, 3), range(1, n+1))) / n\n\nif __name__ == \"__main__\":\n    print average(3)\n    print average(5)\n    print average(7)",
      -0.85791015625
    ],
    [
      "def average_of_cubes(n):\n    \"\"\"\n    Input:\n        n: the number of cubes\n    Output:\n        the average of cubes\n    \"\"\"\n    return (n**3) / (3*n + 1)\n\nif __name__ == '__main__':\n    print(average_of_cubes(2))\n    print(average_of_cubes(3))\n    print(average_of_cubes(5))\n    print(average_of_cubes(10))\n    print(average_of_cubes(100))\n    print(average_of_cubes(1000))\n    print(average_of_cubes(10000))",
      -0.85791015625
    ],
    [
      "from math import sqrt\n\ndef find_average(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers\n    :param n: number of natural numbers\n    :return: average of cubes of first n natural numbers\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nif __name__ == \"__main__\":\n    print find_average(3)\n    print find_average(10)",
      -0.85791015625
    ],
    [
      "import math\n\ndef get_average_cube(n):\n    \"\"\"\n    :param n: the number of cubes\n    :return: the average of cubes\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n + 1):\n        sum_of_cubes += math.pow(i, 3)\n    return sum_of_cubes / n\n\nif __name__ == '__main__':\n    print(get_average_cube(1))\n    print(get_average_cube(2))\n    print(get_average_cube(3))\n    print(get_average_cube(4))\n    print(get_average_cube(5))\n    print(get_average_cube(6))\n    print(get_average_cube(7))\n    print(get_average_cube(8))\n    print(get_average_cube(9))\n    print(get_average_cube(10))",
      -0.85791015625
    ],
    [
      "def cube(n):\n    \"\"\"\n    Calculate the sum of cubes of first n natural numbers.\n    :param n:\n    :return:\n    \"\"\"\n    return sum([n ** 3 for n in range(1, n + 1)]) / n\n\n\ndef main():\n    print(cube(1))\n    print(cube(2))\n    print(cube(3))\n    print(cube(4))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def average(n):\n    return sum(map(lambda x: x ** 3, range(1, n + 1))) / n\n\nif __name__ == \"__main__\":\n    print(average(3))\n    print(average(5))\n    print(average(7))",
      -0.85791015625
    ],
    [
      "# this function should be written in python 3.x\n\ndef average(n):\n    \"\"\"\n    average(n)\n    :param n:\n    :return:\n    \"\"\"\n    return sum(range(1, n + 1)) / n\n\n# test cases\n\nprint(average(5))\nprint(average(10))\nprint(average(100))\nprint(average(1000))",
      -0.85791015625
    ],
    [
      "def average(n):\n    return sum(range(1,n+1))/float(n)\n\nprint(average(3))",
      -0.85791015625
    ],
    [
      "# Definition for a cube.\nclass Cube(object):\n    def __init__(self, number):\n        self.number = number\n\n    def __repr__(self):\n        return \"{}^{}\".format(self.number, self.number)\n\nclass Solution(object):\n    def averageOfCubes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: float\n        \"\"\"\n        return sum([Cube(i).number for i in xrange(1, n+1)])/n",
      -0.85791015625
    ],
    [
      "def get_average_of_cubes(n):\n    \"\"\"\n    >>> get_average_of_cubes(3)\n    3\n    >>> get_average_of_cubes(4)\n    2.5\n    >>> get_average_of_cubes(5)\n    2\n    >>> get_average_of_cubes(6)\n    1.5\n    >>> get_average_of_cubes(7)\n    1\n    >>> get_average_of_cubes(8)\n    0.5\n    \"\"\"\n    average = 0\n    for i in range(1, n+1):\n        average += i**3\n    return average / n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "import numpy as np\n\ndef average_cube(n):\n    \"\"\"\n    n - number of cubes\n    \"\"\"\n    return np.mean(np.power(np.arange(1, n + 1), 3))\n\nif __name__ == '__main__':\n    print(average_cube(5))\n    print(average_cube(10))\n    print(average_cube(15))\n    print(average_cube(20))\n    print(average_cube(30))\n    print(average_cube(100))\n    print(average_cube(200))\n    print(average_cube(500))",
      -0.8583984375
    ],
    [
      "def average_of_cubes(n):\n    return (n**3)/(n**2+n)\n\ndef main():\n    print(average_of_cubes(6))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "import math\n\ndef average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nprint(average(3))\nprint(average(5))\nprint(average(10))",
      -0.8583984375
    ],
    [
      "def average(n):\n    \"\"\"\n    average(n)\n    Find the average of first n natural numbers.\n    \"\"\"\n    return sum(x ** 2 for x in range(1, n + 1)) / n\n\nif __name__ == '__main__':\n    print(average(10))",
      -0.8583984375
    ],
    [
      "def average(n):\n    \"\"\"\n    Given n natural numbers, find the average of the cubes of the numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**3)\n    return sum / n\n\nprint average(5)",
      -0.8583984375
    ],
    [
      "def average_cubes(n):\n    return sum(1 for i in range(1, n+1))/n\n\nif __name__ == '__main__':\n    print(average_cubes(3))",
      -0.8583984375
    ],
    [
      "def average(n):\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n\n\ndef average2(n):\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n\n\nprint average2(10)",
      -0.8583984375
    ],
    [
      "import math\n\ndef average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n\n\nprint(average(5))",
      -0.8583984375
    ],
    [
      "import numpy as np\n\ndef average_cube(n):\n    \"\"\"\n    \"\"\"\n    return sum(np.power(i, 3) for i in range(1, n+1)) / (n+1)\n\nif __name__ == \"__main__\":\n    print(average_cube(5))",
      -0.8583984375
    ],
    [
      "def find_average(n):\n    cubes = 1\n    for i in range(1, n + 1):\n        cubes *= i\n    return cubes / n\n\n# Sample Run:\n#>>> find_average(3)\n#2.0\n\n# Sample Input:\n#>>> find_average(5)\n#3.0\n\n# Sample Output:\n#>>> find_average(10)\n#9.0\n\n# Sample Input:\n#>>> find_average(20)\n#21.0\n\n# Sample Output:\n#>>> find_average(100)\n#102.0",
      -0.8583984375
    ],
    [
      "import math\n\ndef find_average(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n    \"\"\"\n    return sum(map(lambda i: math.pow(i, 3), range(1, n + 1))) / n\n\nprint find_average(5)",
      -0.8583984375
    ],
    [
      "def average(n):\n    \"\"\"\n    This is the function that is being written.\n    \"\"\"\n    # write your code here\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    \n    sum = 0\n    for i in numbers:\n        sum = sum + i\n    average = sum/n\n    return average\n\nif __name__ == '__main__':\n    numbers = [2, 3, 4, 5, 6, 7, 8]\n    average = average(numbers)\n    print average",
      -0.85888671875
    ],
    [
      "import math\n\ndef find_average(n):\n    return sum(i**3 for i in range(1, n+1)) / n**3\n\nif __name__ == \"__main__\":\n    print(find_average(10))",
      -0.85888671875
    ],
    [
      "def get_average(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / (n ** 3)\n\nprint(get_average(2))",
      -0.85888671875
    ],
    [
      "import math\n\ndef average(n):\n    \"\"\"\n    Args:\n        n (int): The number of natural numbers\n    Returns:\n        float: The average of the cubes of the first n natural numbers\n    \"\"\"\n    return sum([math.pow(i, 3) for i in range(1, n + 1)]) / math.pow(n, 3)\n\nif __name__ == \"__main__\":\n    print(average(3))\n    print(average(4))\n    print(average(5))\n    print(average(6))\n    print(average(7))\n    print(average(8))\n    print(average(9))",
      -0.85888671875
    ],
    [
      "import math\n\n\ndef cube(x):\n    return x ** 3\n\n\ndef average(n):\n    total = 0\n    for i in range(n):\n        total += cube(i)\n    return total / n\n\n\nif __name__ == '__main__':\n    print(average(3))",
      -0.85888671875
    ],
    [
      "def find_average(n):\n    \"\"\"\n    n is the number of cubes you want to find the average of\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    total = 0\n    for i in range(1, n + 1):\n        total += i**3\n    return total/n\n\nprint(find_average(5))",
      -0.85888671875
    ],
    [
      "#!/usr/bin/env python\n\ndef average(n):\n    '''\n    n - the number of cubes\n    returns average of first n natural numbers\n    '''\n    return sum(x**3 for x in range(1,n+1))/n\n\n\n\n# print average(5)\n\n# print average(10)",
      -0.90380859375
    ],
    [
      "def average(n):\n    \"\"\"\n    >>> average(3)\n    3.0\n    >>> average(4)\n    4.0\n    >>> average(5)\n    5.0\n    >>> average(6)\n    6.0\n    \"\"\"\n    def cube(n):\n        return n ** 3\n    return sum(cube(n) for n in range(1, n + 1)) / (n + 1)\n\nprint(average(3))\nprint(average(4))\nprint(average(5))\nprint(average(6))",
      -0.97021484375
    ],
    [
      "def average(n):\n    \"\"\"\n    >>> average(10)\n    6.0\n    \"\"\"\n    return sum(range(1, n+1)) / n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.0400390625
    ],
    [
      "def cube(n):\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n\n\n#print cube(4)",
      -1.431640625
    ],
    [
      "def average(n):\n    if n == 1:\n        return 0.0\n    return (1 + n) / 2.0\n\nprint(average(3))\nprint(average(10))\nprint(average(100))",
      -1.54296875
    ],
    [
      "def average(n):\n    \"\"\"\n    Return the average of n cubes of the first n natural numbers.\n    >>> average(5)\n    3.5\n    >>> average(15)\n    15.0\n    >>> average(30)\n    30.0\n    >>> average(100)\n    100.0\n    \"\"\"\n    return sum(range(1, n+1))/n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.572265625
    ],
    [
      "import math\n\ndef get_average(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / n\n\ndef get_average_2(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / (n ** 2)\n\ndef get_average_3(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / (n ** 3)\n\ndef get_average_4(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / (n ** 4)\n\ndef get_average_5(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / (n ** 5)\n\ndef get_average_6(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / (n ** 6)\n\ndef get_average_7(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / (n ** 7)\n\ndef get_average_8(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / (n ** 8)\n\ndef get_average_9(n):\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum / (n ** 9)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(get_average(n))\n    print(get_average_2(n))\n    print(get_average_3(n))\n    print(get_average_4(n))\n    print(get_average_5(n))\n    print(get_average_6(n))\n    print(get_average_7(n))\n    print(get_average_8(n))\n    print(get_average_9(n))",
      -1.580078125
    ],
    [
      "from math import sqrt\n\ndef average(n):\n    \"\"\"\n    Average of n cubes\n    :param n: integer\n    :return: float\n    \"\"\"\n    if n == 1:\n        return 0\n    n = int(n)\n    total = 0\n    for i in range(1, n):\n        total += i**3\n    return total / n\n\ndef main():\n    print(average(2))\n\nif __name__ == '__main__':\n    main()",
      -3.302734375
    ],
    [
      "def average(n):\n    return sum(map(lambda x: x**3, range(1, n + 1))) / (n + 1)\n\nif __name__ == \"__main__\":\n    print average(2)\n    print average(3)\n    print average(4)\n    print average(5)\n    print average(6)\n    print average(7)\n    print average(8)\n    print average(9)\n    print average(10)\n    print average(11)\n    print average(12)\n    print average(13)\n    print average(14)\n    print average(15)\n    print average(16)\n    print average(17)\n    print average(18)\n    print average(19)\n    print average(20)\n    print average(21)\n    print average(22)\n    print average(23)\n    print average(24)\n    print average(25)\n    print average(26)\n    print average(27)\n    print average(28)\n    print average(29)\n    print average(30)\n    print average(31)\n    print average(32)\n    print average(33)\n    print average(34)\n    print average(35)\n    print average(36)\n    print average(37)\n    print average(38)\n    print average(39)\n    print average(40)\n    print average(41)\n    print average(42)\n    print average(43)\n    print average(44)\n    print average(45)\n    print average(46)\n    print average(47)\n    print average(48)\n    print average(49)\n    print average(50)\n    print average(51)\n    print average(52)\n    print average(53)\n    print average(54)\n    print average(55)\n    print average(56)\n    print average(57)\n    print average(58)\n    print average(59)\n    print average(60)\n    print average(61)\n    print average(62)\n    print average(63)\n    print average(64)\n    print average(65)\n    print average(66)\n    print average(67)\n    print average",
      -3.47265625
    ],
    [
      "#!/usr/bin/env python\n\nimport math\n\ndef nth_cube(n):\n    \"\"\"\n    Returns the nth cube of a natural number\n    \"\"\"\n    return math.pow(nth_cube(n-1), 3)\n\ndef average_cubes(n):\n    \"\"\"\n    Returns the average of nth cube\n    \"\"\"\n    return nth_cube(n) / n\n\nif __name__ == '__main__':\n    print nth_cube(5)\n    print average_cubes(5)",
      -3.482421875
    ],
    [
      "# https://www.hackerrank.com/challenges/sums-of-cubes-1/problem\n\ndef find_average(n):\n    '''\n    Find the average of cubes of first n natural numbers\n    '''\n    average = 0\n    for i in range(1, n + 1):\n        average += i ** 3\n    return average / (n + 1)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(find_average(n))",
      -3.56640625
    ],
    [
      "def average(n):\n    \"\"\"\n    n is the number of cubes\n    \"\"\"\n\n    # n is the number of natural numbers\n    sum_of_n = 0\n    for i in range(1, n + 1):\n        sum_of_n += i ** 3\n    return sum_of_n / (n + 1)\n\nif __name__ == '__main__':\n    print(average(3))\n    print(average(4))\n    print(average(5))\n    print(average(6))\n    print(average(7))\n    print(average(8))\n    print(average(9))\n    print(average(10))\n    print(average(11))\n    print(average(12))\n    print(average(13))\n    print(average(14))\n    print(average(15))\n    print(average(16))\n    print(average(17))\n    print(average(18))\n    print(average(19))\n    print(average(20))\n    print(average(21))\n    print(average(22))\n    print(average(23))\n    print(average(24))\n    print(average(25))\n    print(average(26))\n    print(average(27))\n    print(average(28))\n    print(average(29))\n    print(average(30))\n    print(average(31))\n    print(average(32))\n    print(average(33))\n    print(average(34))\n    print(average(35))\n    print(average(36))\n    print(average(37))\n    print(average(38))\n    print(average(39))\n    print(average(40))\n    print(average(41))\n    print(average(42))\n    print(average(43))\n    print(average(44))\n    print(average(45))\n    print(average(46))\n    print(average(47))\n    print(average(48))\n    print(average(49))\n    print(average(50))\n    print(average(51))\n    print(average(52))\n    print(average(53))\n    print(average(54))\n    print(average(55",
      -5.078125
    ],
    [
      "import math\n\ndef main():\n    print \"Enter the number of natural numbers: \",\n    n = int(raw_input())\n    cubes = []\n    for i in range(n):\n        print \"Enter the value of i: \",\n        i = int(raw_input())\n        cubes.append(math.pow(i, 3))\n    print \"The average of cubes is: \",\n    print sum(cubes) / len(cubes)\n\nif __name__ == '__main__':\n    main()",
      -5.66796875
    ],
    [
      "def get_average(n):\n    cubes = [0 for x in range(n)]\n    for i in range(1, n):\n        cubes[i] = cubes[i-1] * i\n    return sum(cubes) / n\n\ndef main():\n    n = int(input('Enter n: '))\n    print('Average of cubes of first {} natural numbers: {}'.format(n, get_average(n)))\n\nif __name__ == '__main__':\n    main()",
      -6.48046875
    ],
    [
      "# import time\n# t1 = time.time()\n\n# def average_of_cubes(n):\n    # if n == 1:\n        # return 1\n    # else:\n        # return sum(x**3 for x in range(n)) / (3 * n)\n\n# t2 = time.time()\n# print('Average of cubes:', average_of_cubes(3))\n# print('Time:', t2 - t1)\n\n# t1 = time.time()\n# def average_of_cubes(n):\n    # if n == 1:\n        # return 1\n    # else:\n        # return sum(x**3 for x in range(n)) / (3 * n)\n\n# t2 = time.time()\n# print('Average of cubes:', average_of_cubes(3))\n# print('Time:', t2 - t1)\n\n# t1 = time.time()\n# def average_of_cubes(n):\n    # if n == 1:\n        # return 1\n    # else:\n        # return sum(x**3 for x in range(n)) / (3 * n)\n\n# t2 = time.time()\n# print('Average of cubes:', average_of_cubes(3))\n# print('Time:', t2 - t1)\n\n# t1 = time.time()\n# def average_of_cubes(n):\n    # if n == 1:\n        # return 1\n    # else:\n        # return sum(x**3 for x in range(n)) / (3 * n)\n\n# t2 = time.time()\n# print('Average of cubes:', average_of_cubes(3))\n# print('Time:', t2 - t1)\n\n# t1 = time.time()\n# def average_of_cubes(n):\n    # if n == 1:\n        # return 1\n    # else:\n        # return sum(x**3 for x in range(n)) / (3 * n)\n\n# t2 = time.time()\n# print('Average of cubes:', average_of_cubes(3))\n# print('Time:",
      -6.67578125
    ],
    [
      "# import numpy as np\n# import math\n\n# def average(n, a):\n#     \"\"\"\n#     n is the number of cubes\n#     a is a list of the first n natural numbers\n#     \"\"\"\n#     # print(a)\n#     a = list(a)\n#     # print(a)\n#     # a.sort()\n#     # print(a)\n#     # a.sort()\n#     # print(a)\n#     # a.sort()\n#     # print(a)\n#     a.sort()\n#     # print(a)\n#     return sum(a[:n]) / n\n\n# a = list(range(1, 100))\n# a.sort()\n# print(average(100, a))\n\n# a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# print(average(100, a))\n\n# a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n# print(average(100, a))\n\n# a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n# print(average(100, a))\n\n# a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78",
      -7.0625
    ],
    [
      "def cube_average(n):\n    return (1.0 * n) / 3.0\n\nif __name__ == \"__main__\":\n    print(cube_average(1))\n    print(cube_average(2))\n    print(cube_average(3))\n    print(cube_average(4))\n    print(cube_average(5))\n    print(cube_average(6))\n    print(cube_average(7))\n    print(cube_average(8))\n    print(cube_average(9))\n    print(cube_average(10))\n    print(cube_average(11))\n    print(cube_average(12))\n    print(cube_average(13))\n    print(cube_average(14))\n    print(cube_average(15))\n    print(cube_average(16))\n    print(cube_average(17))\n    print(cube_average(18))\n    print(cube_average(19))\n    print(cube_average(20))\n    print(cube_average(21))\n    print(cube_average(22))\n    print(cube_average(23))\n    print(cube_average(24))\n    print(cube_average(25))\n    print(cube_average(26))\n    print(cube_average(27))\n    print(cube_average(28))\n    print(cube_average(29))\n    print(cube_average(30))\n    print(cube_average(31))\n    print(cube_average(32))\n    print(cube_average(33))\n    print(cube_average(34))\n    print(cube_average(35))\n    print(cube_average(36))\n    print(cube_average(37))\n    print(cube_average(38))\n    print(cube_average(39))\n    print(cube_average(40))\n    print(cube_average(41))\n    print(cube_average(42))\n    print(cube_average(43))\n    print(cube_average(44))\n    print(cube_average(45))\n    print(cube_average(46))\n    print(cube_average(47))\n    print(cube_average(",
      -7.08203125
    ],
    [
      "import math\n\ndef find_average_of_cubes(n):\n    '''\n    n: the number of cubes you want to average\n    returns: the average of cubes\n    '''\n    return (math.sqrt(n) + 1) ** 3 / 4\n\nif __name__ == '__main__':\n    print find_average_of_cubes(1)\n    print find_average_of_cubes(2)\n    print find_average_of_cubes(3)\n    print find_average_of_cubes(4)\n    print find_average_of_cubes(5)\n    print find_average_of_cubes(6)\n    print find_average_of_cubes(7)\n    print find_average_of_cubes(8)\n    print find_average_of_cubes(9)\n    print find_average_of_cubes(10)\n    print find_average_of_cubes(11)\n    print find_average_of_cubes(12)\n    print find_average_of_cubes(13)\n    print find_average_of_cubes(14)\n    print find_average_of_cubes(15)\n    print find_average_of_cubes(16)\n    print find_average_of_cubes(17)\n    print find_average_of_cubes(18)\n    print find_average_of_cubes(19)\n    print find_average_of_cubes(20)\n    print find_average_of_cubes(21)\n    print find_average_of_cubes(22)\n    print find_average_of_cubes(23)\n    print find_average_of_cubes(24)\n    print find_average_of_cubes(25)\n    print find_average_of_cubes(26)\n    print find_average_of_cubes(27)\n    print find_average_of_cubes(28)\n    print find_average_of_cubes(29)\n    print find_average_of_cubes(30)\n    print find_average_of_cubes(31)",
      -7.6015625
    ],
    [
      "import numpy as np\n\ndef cube(n):\n    n = np.array(n)\n    cube = n ** 3\n    return cube\n\ndef average(n):\n    n = np.array(n)\n    sum = np.sum(cube(n))\n    return sum / n.size\n\ndef main():\n    n = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,",
      -8.6640625
    ],
    [
      "import math\n\ndef average_of_cubes(n):\n    return math.pow(n, 3) / 3\n\n# Test Cases\n\n# Test Case 1\ntest_case_1 = [1, 2, 3, 4]\nprint(average_of_cubes(test_case_1))\n\n# Test Case 2\ntest_case_2 = [1, 2, 3, 4, 5]\nprint(average_of_cubes(test_case_2))\n\n# Test Case 3\ntest_case_3 = [1, 2, 3, 4, 5, 6]\nprint(average_of_cubes(test_case_3))\n\n# Test Case 4\ntest_case_4 = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(average_of_cubes(test_case_4))\n\n# Test Case 5\ntest_case_5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(average_of_cubes(test_case_5))\n\n# Test Case 6\ntest_case_6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(average_of_cubes(test_case_6))\n\n# Test Case 7\ntest_case_7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(average_of_cubes(test_case_7))\n\n# Test Case 8\ntest_case_8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nprint(average_of_cubes(test_case_8))",
      -8.7734375
    ],
    [
      "import math\n\ndef average(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    :param n:\n    :return:\n    \"\"\"\n    return sum([(i**3) for i in range(1, n+1)])/math.factorial(n)\n\n\nif __name__ == '__main__':\n    # print(average(3))\n    # print(average(5))\n    # print(average(10))\n    print(average(11))",
      -9.203125
    ],
    [
      "# import time\n# import math\n# import random\n# import sys\n# import os\n\n# def cube(n):\n#     return n ** 3\n\n# def avg(cubes):\n#     total = 0\n#     for cube in cubes:\n#         total += cube\n#     return total / len(cubes)\n\n# if __name__ == \"__main__\":\n#     n = int(sys.argv[1])\n#     print \"cube(%d) = %d\" % (n, cube(n))\n#     print \"avg(cubes(%d)) = %d\" % (n, avg(cube(n)))\n#     # print \"average(%d) = %.5f\" % (n, avg(cube(n)))\n#     # time.sleep(1)",
      -10.7578125
    ],
    [
      "def average(n):\n    \"\"\"\n    >>> average(4)\n    3.5\n    >>> average(5)\n    5.0\n    >>> average(10)\n    9.0\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return sum(range(1, n + 1)) / n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -10.7890625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}