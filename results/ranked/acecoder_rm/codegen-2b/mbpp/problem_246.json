{
  "problem": {
    "task_id": "MBPP/257",
    "prompt": "Write a function to swap two numbers.",
    "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
    "test_list": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ],
    "challenge_test_list": [],
    "problem_id": 246
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "class Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\n    def swap2(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\n    def swap3(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\n    def swap4(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\n    def swap5(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\nif __name__ == '__main__':\n    assert Solution().swap(1, 2) == (2, 1)\n    assert Solution().swap(5, 7) == (7, 5)\n    assert Solution().swap2(1, 2) == (2, 1)\n    assert Solution().swap2(5, 7) == (7, 5)\n    assert Solution().swap3(1, 2) == (2, 1)\n    assert Solution().swap3(5, 7) == (7, 5)\n    assert Solution().swap4(1, 2) == (2, 1)\n    assert Solution().swap4(5, 7) == (7, 5)\n    assert Solution().swap5(1, 2) == (2, 1)\n    assert Solution().swap5(5, 7) == (7, 5)",
      14.390625
    ],
    [
      "def swap(x, y):\n    return y, x\n\ndef swap2(x, y):\n    return y, x\n\ndef swap3(x, y):\n    return y, x\n\ndef swap4(x, y):\n    return y, x\n\ndef swap5(x, y):\n    return y, x\n\ndef swap6(x, y):\n    return y, x\n\ndef swap7(x, y):\n    return y, x\n\ndef swap8(x, y):\n    return y, x\n\ndef swap9(x, y):\n    return y, x\n\ndef swap10(x, y):\n    return y, x\n\ndef swap11(x, y):\n    return y, x\n\ndef swap12(x, y):\n    return y, x\n\ndef swap13(x, y):\n    return y, x\n\ndef swap14(x, y):\n    return y, x\n\ndef swap15(x, y):\n    return y, x\n\ndef swap16(x, y):\n    return y, x\n\ndef swap17(x, y):\n    return y, x\n\ndef swap18(x, y):\n    return y, x\n\ndef swap19(x, y):\n    return y, x\n\ndef swap20(x, y):\n    return y, x\n\ndef swap21(x, y):\n    return y, x\n\ndef swap22(x, y):\n    return y, x\n\ndef swap23(x, y):\n    return y, x\n\ndef swap24(x, y):\n    return y, x\n\ndef swap25(x, y):\n    return y, x\n\ndef swap26(x, y):\n    return y, x\n\ndef swap27(x, y):\n    return y, x\n\ndef swap28(x, y):\n    return y, x\n\ndef swap29(x, y):\n    return y, x\n\ndef swap30(x, y):\n    return y, x\n\ndef swap31(x, y):\n    return y, x\n\ndef swap32(x, y):\n    return y, x",
      8.9765625
    ],
    [
      "def swap(x, y):\n    return y, x\n\ndef swap2(x, y):\n    return y, x\n\ndef swap3(x, y):\n    return y, x\n\ndef swap4(x, y):\n    return y, x\n\ndef swap5(x, y):\n    return y, x\n\ndef swap6(x, y):\n    return y, x\n\ndef swap7(x, y):\n    return y, x\n\ndef swap8(x, y):\n    return y, x\n\ndef swap9(x, y):\n    return y, x\n\ndef swap10(x, y):\n    return y, x\n\ndef swap11(x, y):\n    return y, x\n\ndef swap12(x, y):\n    return y, x\n\ndef swap13(x, y):\n    return y, x\n\ndef swap14(x, y):\n    return y, x\n\ndef swap15(x, y):\n    return y, x\n\ndef swap16(x, y):\n    return y, x\n\ndef swap17(x, y):\n    return y, x\n\ndef swap18(x, y):\n    return y, x\n\ndef swap19(x, y):\n    return y, x\n\ndef swap20(x, y):\n    return y, x\n\ndef swap21(x, y):\n    return y, x\n\ndef swap22(x, y):\n    return y, x\n\ndef swap23(x, y):\n    return y, x\n\ndef swap24(x, y):\n    return y, x\n\ndef swap25(x, y):\n    return y, x\n\ndef swap26(x, y):\n    return y, x\n\ndef swap27(x, y):\n    return y, x\n\ndef swap28(x, y):\n    return y, x\n\ndef swap29(x, y):\n    return y, x\n\ndef swap30(x, y):\n    return y, x\n\ndef swap31(x, y):\n    return y, x\n\ndef swap32(x, y):\n    return y, x",
      8.9765625
    ],
    [
      "# Write your code here\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return y, x\n\ndef swap(x, y):\n    return",
      4.6875
    ],
    [
      "class Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.swap(4,3)",
      3.931640625
    ],
    [
      "def swap(a, b):\n\ta, b = b, a\n\treturn a, b\n\ndef swap_numbers(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_2(a, b):\n\treturn b, a\n\ndef swap_numbers_3(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_4(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_5(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_6(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_7(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_8(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_9(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_10(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_11(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_12(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_13(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_14(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_15(a, b):\n\ta, b = swap(a, b)\n\treturn a, b\n\ndef swap_numbers_16(a, b):\n\ta, b = swap(a",
      2.923828125
    ],
    [
      "# https://www.hackerrank.com/challenges/swap-numbers/problem\n\ndef swap(x, y):\n    return x, y\n\ndef swap_numbers(x, y):\n    return y, x\n\nif __name__ == '__main__':\n    n = int(input())\n    for i in range(n):\n        x, y = input().split()\n        print(swap(x, y))\n        print(swap_numbers(x, y))",
      2.814453125
    ],
    [
      "def swap(a, b):\n    return b, a\n\ndef swap_2(a, b):\n    return b, a\n\ndef swap_3(a, b):\n    return b, a\n\ndef swap_4(a, b):\n    return b, a\n\ndef swap_5(a, b):\n    return b, a\n\ndef swap_6(a, b):\n    return b, a\n\ndef swap_7(a, b):\n    return b, a\n\ndef swap_8(a, b):\n    return b, a\n\ndef swap_9(a, b):\n    return b, a\n\ndef swap_10(a, b):\n    return b, a\n\ndef swap_11(a, b):\n    return b, a\n\ndef swap_12(a, b):\n    return b, a\n\ndef swap_13(a, b):\n    return b, a\n\ndef swap_14(a, b):\n    return b, a\n\ndef swap_15(a, b):\n    return b, a\n\ndef swap_16(a, b):\n    return b, a\n\ndef swap_17(a, b):\n    return b, a\n\ndef swap_18(a, b):\n    return b, a\n\ndef swap_19(a, b):\n    return b, a\n\ndef swap_20(a, b):\n    return b, a\n\ndef swap_21(a, b):\n    return b, a\n\ndef swap_22(a, b):\n    return b, a\n\ndef swap_23(a, b):\n    return b, a\n\ndef swap_24(a, b):\n    return b, a\n\ndef swap_25(a, b):\n    return b, a\n\ndef swap_26(a, b):\n    return b, a\n\ndef swap_27(a, b):\n    return b, a\n\ndef swap_28(a, b):\n    return b, a\n\ndef swap_29(a, b):\n    return b, a\n\ndef swap_30(a, b):\n    return b, a\n\ndef swap_",
      2.5234375
    ],
    [
      "def swap(a, b):\n    return b, a\n\ndef swap_recursive(a, b):\n    if a < b:\n        return swap(a, b)\n    else:\n        return swap(b, a)\n\ndef swap(a, b):\n    return b, a\n\ndef swap_recursive(a, b):\n    if a < b:\n        return swap(a, b)\n    else:\n        return swap(b, a)\n\ndef swap(a, b):\n    return b, a\n\ndef swap_recursive(a, b):\n    if a < b:\n        return swap(a, b)\n    else:\n        return swap(b, a)\n\ndef swap(a, b):\n    return b, a\n\ndef swap_recursive(a, b):\n    if a < b:\n        return swap(a, b)\n    else:\n        return swap(b, a)\n\ndef swap(a, b):\n    return b, a\n\ndef swap_recursive(a, b):\n    if a < b:\n        return swap(a, b)\n    else:\n        return swap(b, a)\n\ndef swap(a, b):\n    return b, a\n\ndef swap_recursive(a, b):\n    if a < b:\n        return swap(a, b)\n    else:\n        return swap(b, a)\n\ndef swap(a, b):\n    return b, a\n\ndef swap_recursive(a, b):\n    if a < b:\n        return swap(a, b)\n    else:\n        return swap(b, a)\n\ndef swap(a, b):\n    return b, a\n\ndef swap_recursive(a, b):\n    if a < b:\n        return swap(a, b)\n    else:\n        return swap(b, a)\n\ndef swap(a, b):\n    return b, a\n\ndef swap_recursive(a, b):\n    if a < b:\n        return swap(a, b)\n    else:\n        return swap(b, a)\n\ndef swap(a, b):",
      2.263671875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        if x > y:\n            return y, x\n        else:\n            return x, y\n\n\nif __name__ == \"__main__\":\n    assert Solution().swap(2, 4) == (4, 2)",
      1.869140625
    ],
    [
      "class Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return x, y\n\n    def swap2(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        x, y = y, x\n        return x, y\n\nclass Solution2(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\nclass Solution3(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\nclass Solution4(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return x, y",
      1.5625
    ],
    [
      "import sys\n\n# @include\ndef swap_numbers(a, b):\n    a, b = a + 1, b + 1\n    a, b = a - 1, b - 1\n    return a, b\n# @exclude\n\n\ndef main():\n    # Output:\n    # (3, 4)\n    # (3, 1)\n    # (5, 4)\n    # (4, 1)\n    for a, b in [\n        (1, 2),\n        (3, 4),\n        (5, 4),\n        (4, 1),\n    ]:\n        print(swap_numbers(a, b))\n    assert swap_numbers(1, 2) == (2, 1)\n\n\nif __name__ == '__main__':\n    main()",
      1.2109375
    ],
    [
      "import unittest\n\nclass Solution:\n    def swap(self, a, b):\n        a_str = str(a)\n        b_str = str(b)\n        a_str = a_str[::-1]\n        b_str = b_str[::-1]\n        return int(a_str + b_str)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/swap-numbers/solution/\n\n# 2ms 100%\nclass Solution {\n    public int swap(int a, int b) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(a);\n        sb.reverse();\n        sb.append(b);\n        return Integer.parseInt(sb.toString());\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public int swap(int a, int b) {\n        return b < a? a ^ b : a ^ b ^ (a - b);\n    }\n}\n'''",
      1.056640625
    ],
    [
      "class Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\n    def swap2(self, x, y):\n        return y, x\n\n    def swap3(self, x, y):\n        return y, x, x\n\n    def swap4(self, x, y):\n        return y, y, x, x\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.swap(3, 2)\n    print solution.swap2(3, 2)\n    print solution.swap3(3, 2)\n    print solution.swap4(3, 2)",
      0.85595703125
    ],
    [
      "def swap(a, b):\n    return b, a\n\ndef swap_v2(a, b):\n    return b, a\n\ndef swap_v3(a, b):\n    return a, b\n\ndef swap_v4(a, b):\n    return b, a\n\ndef swap_v5(a, b):\n    return a, b\n\ndef swap_v6(a, b):\n    return b, a\n\ndef swap_v7(a, b):\n    return a, b\n\ndef swap_v8(a, b):\n    return b, a\n\ndef swap_v9(a, b):\n    return a, b\n\ndef swap_v10(a, b):\n    return a, b\n\ndef swap_v11(a, b):\n    return a, b\n\ndef swap_v12(a, b):\n    return a, b\n\ndef swap_v13(a, b):\n    return a, b\n\ndef swap_v14(a, b):\n    return a, b\n\ndef swap_v15(a, b):\n    return a, b\n\ndef swap_v16(a, b):\n    return a, b\n\ndef swap_v17(a, b):\n    return a, b\n\ndef swap_v18(a, b):\n    return a, b\n\ndef swap_v19(a, b):\n    return a, b\n\ndef swap_v20(a, b):\n    return a, b\n\ndef swap_v21(a, b):\n    return a, b\n\ndef swap_v22(a, b):\n    return a, b\n\ndef swap_v23(a, b):\n    return a, b\n\ndef swap_v24(a, b):\n    return a, b\n\ndef swap_v25(a, b):\n    return a, b\n\ndef swap_v26(a, b):\n    return a, b\n\ndef swap_v27(a, b):\n    return a, b\n\ndef swap_v28(a, b):\n    return a, b\n\ndef swap_v29(a, b):",
      0.79833984375
    ],
    [
      "class Solution(object):\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num1, num2\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.swap(1, 2)\n    print sol.swap(2, 3)",
      0.673828125
    ],
    [
      "class Solution(object):\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num1, num2\n\n\nif __name__ == '__main__':\n    assert Solution().swap(1, 2) == (2, 1)\n    assert Solution().swap(1, 0) == (0, 1)\n    assert Solution().swap(1, 1) == (1, 1)\n    assert Solution().swap(0, 0) == (0, 0)",
      0.5302734375
    ],
    [
      "def swap(a, b):\n    return b, a\n\ndef swap_reverse(a, b):\n    return a, b\n\ndef swap_back(a, b):\n    return b, a\n\ndef swap_back_reverse(a, b):\n    return b, a\n\ndef swap_back_2(a, b):\n    return a, b\n\ndef swap_back_2_reverse(a, b):\n    return b, a\n\ndef swap_back_3(a, b, c):\n    return c, b, a\n\ndef swap_back_3_reverse(a, b, c):\n    return c, b, a\n\ndef swap_back_4(a, b, c, d):\n    return d, c, b, a\n\ndef swap_back_4_reverse(a, b, c, d):\n    return d, c, b, a\n\ndef swap_back_5(a, b, c, d, e):\n    return e, d, c, b, a\n\ndef swap_back_5_reverse(a, b, c, d, e):\n    return e, d, c, b, a\n\ndef swap_back_6(a, b, c, d, e, f):\n    return f, e, d, c, b, a\n\ndef swap_back_6_reverse(a, b, c, d, e, f):\n    return f, e, d, c, b, a\n\ndef swap_back_7(a, b, c, d, e, f, g):\n    return g, f, e, d, c, b, a\n\ndef swap_back_7_reverse(a, b, c, d, e, f, g):\n    return g, f, e, d, c, b, a\n\ndef swap_back_8(a, b, c, d, e, f, g, h):\n    return h, g, f, e, d, c, b, a\n\ndef swap_back_8_reverse(a, b, c, d, e, f, g, h):\n    return h, g, f, e, d, c,",
      0.48779296875
    ],
    [
      "# https://leetcode.com/problems/swap-numbers/discuss/4479/Java-solution-using-bit-operations\n# https://leetcode.com/problems/swap-numbers/discuss/4479/C++-solution-using-bit-operations\n# https://leetcode.com/problems/swap-numbers/discuss/4479/C++-solution-using-bit-operations\n\nclass Solution(object):\n    def swap_numbers(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        # use bit operations to swap the two numbers\n        # and return the result\n        a_bits = (a & 0x55555555) << 1\n        b_bits = (b & 0x55555555) << 1\n        return (a_bits | b_bits) >> 16\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.swap_numbers(1, 2))\n    print(sol.swap_numbers(2, 1))\n    print(sol.swap_numbers(4, 5))\n    print(sol.swap_numbers(5, 4))",
      0.265380859375
    ],
    [
      "def swap(x, y):\n    return y, x\n\ndef swap_recursive(x, y):\n    if x > y:\n        return y, x\n    elif x < y:\n        return x, y\n    else:\n        return swap_recursive(x, y - 1)\n\ndef swap(x, y):\n    return y, x\n\ndef swap_recursive(x, y):\n    if x > y:\n        return y, x\n    elif x < y:\n        return x, y\n    else:\n        return swap_recursive(x, y - 1)\n\ndef swap(x, y):\n    return y, x\n\ndef swap_recursive(x, y):\n    if x > y:\n        return y, x\n    elif x < y:\n        return x, y\n    else:\n        return swap_recursive(x, y - 1)\n\ndef swap(x, y):\n    return y, x\n\ndef swap_recursive(x, y):\n    if x > y:\n        return y, x\n    elif x < y:\n        return x, y\n    else:\n        return swap_recursive(x, y - 1)\n\ndef swap(x, y):\n    return y, x\n\ndef swap_recursive(x, y):\n    if x > y:\n        return y, x\n    elif x < y:\n        return x, y\n    else:\n        return swap_recursive(x, y - 1)\n\ndef swap(x, y):\n    return y, x\n\ndef swap_recursive(x, y):\n    if x > y:\n        return y, x\n    elif x < y:\n        return x, y\n    else:\n        return swap_recursive(x, y - 1)\n\ndef swap(x, y):\n    return y, x\n\ndef swap_recursive(x, y):\n    if x > y:\n        return y, x\n    elif x < y:\n        return x, y\n    else:\n        return swap_recursive(x, y - 1)\n\ndef swap(x, y):",
      0.251708984375
    ],
    [
      "__author__ = 'Daniel'\n\n\ndef swap_numbers(num1, num2):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    return num1, num2\n\nif __name__ == '__main__':\n    print swap_numbers(1, 2)",
      0.1466064453125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head.next\n        while curr and curr.next:\n            prev.next = curr.next\n            curr.next = curr.next.next\n            prev = curr\n            curr = curr.next\n        prev.next = curr\n        return dummy.next",
      0.027069091796875
    ],
    [
      "def swap_numbers(a, b):\n    return b, a\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return swap_numbers_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_numbers_recursive(a, b):\n    if a < b:\n        return",
      0.004276275634765625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def swap(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        return a, b\n\n    def swap2(self, a, b):\n        return b, a\n\n\nif __name__ == \"__main__\":\n    Solution().swap(1, 2)\n    print Solution().swap(1, 2)",
      -0.04083251953125
    ],
    [
      "def swap_numbers(first, second):\n    \"\"\"\n    Swap two numbers.\n    \"\"\"\n    return first, second\n\ndef swap_numbers_recursive(first, second):\n    \"\"\"\n    Swap two numbers using recursion.\n    \"\"\"\n    if first > second:\n        return swap_numbers_recursive(second, first)\n    else:\n        return first, second\n\ndef swap_numbers_iterative(first, second):\n    \"\"\"\n    Swap two numbers using iterative approach.\n    \"\"\"\n    while first > second:\n        first, second = second, first\n    return first, second\n\ndef swap_numbers_recursive_1(first, second):\n    \"\"\"\n    Swap two numbers using recursion.\n    \"\"\"\n    if first > second:\n        return swap_numbers_recursive(second, first)\n    else:\n        return first, second\n\ndef swap_numbers_recursive_2(first, second):\n    \"\"\"\n    Swap two numbers using recursion.\n    \"\"\"\n    if first > second:\n        return swap_numbers_recursive(second, first)\n    else:\n        return first, second\n\ndef swap_numbers_recursive_3(first, second):\n    \"\"\"\n    Swap two numbers using recursion.\n    \"\"\"\n    if first > second:\n        return swap_numbers_recursive(second, first)\n    else:\n        return first, second\n\ndef swap_numbers_iterative_1(first, second):\n    \"\"\"\n    Swap two numbers using iterative approach.\n    \"\"\"\n    while first > second:\n        first, second = second, first\n    return first, second\n\ndef swap_numbers_iterative_2(first, second):\n    \"\"\"\n    Swap two numbers using iterative approach.\n    \"\"\"\n    while first > second:\n        first, second = second, first\n    return first, second\n\ndef swap_numbers_iterative_3(first, second):\n    \"\"\"\n    Swap two numbers using iterative approach.\n    \"\"\"\n    while first > second:\n        first, second = second, first\n    return first, second",
      -0.24609375
    ],
    [
      "class Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return a, b\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\n\"\"\"\nWrite a function to swap two numbers.\n\"\"\"\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\n\"\"\"\nWrite a function to",
      -0.435546875
    ],
    [
      "def swap(a, b):\n    return b, a\n\ndef swap_recur(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap_recur(a, b)\n\ndef swap(a, b):\n    return b, a\n\ndef swap_recur(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap_recur(a, b)\n\ndef swap(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap(a, b)\n\ndef swap_recur(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap_recur(a, b)\n\ndef swap(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap(a, b)\n\ndef swap_recur(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap_recur(a, b)\n\ndef swap(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap(a, b)\n\ndef swap_recur(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap_recur(a, b)\n\ndef swap(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap(a, b)\n\ndef swap_recur(a, b):\n    if a == b:\n        return\n    else:\n        a, b = swap(a, b)\n        swap_recur(a, b)\n\ndef swap(a,",
      -0.6640625
    ],
    [
      "class Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return x, y\n\n    def swap2(self, x, y):\n        return x, y[::-1]\n\n\nif __name__ == '__main__':\n    obj = Solution()\n    print obj.swap(1, 2)\n    print obj.swap2(1, 2)",
      -0.73583984375
    ],
    [
      "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\nif __name__ == \"__main__\":\n    print Solution().swap(2, 1)",
      -0.76513671875
    ],
    [
      "class Solution:\n    # @param a, a number\n    # @param b, a number\n    # @return nothing\n    def swap(self, a, b):\n        a, b = a ^ b, a ^ b\n        a, b = b ^ a, a ^ b\n        return a ^ b\n\n    # @param a, a number\n    # @param b, a number\n    # @return nothing\n    def swap_inv(self, a, b):\n        a, b = b ^ a, a ^ b\n        a, b = b ^ a, a ^ b\n        return a ^ b\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.swap(7, 11))\n    print(sol.swap_inv(7, 11))",
      -0.79052734375
    ],
    [
      "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def swap(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: None\n        \"\"\"\n        a, b = a ^ b, a, b ^ a\n        return a, b\n\nif __name__ == '__main__':\n    print(Solution().swap(2, 3))",
      -0.85595703125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n        \n        p1 = head\n        p2 = head.next.next\n        \n        while p1 and p2:\n            temp = p1.next\n            p1.next = p2.next\n            p2.next = temp\n            \n            p1 = p1.next\n            p2 = p2.next\n        \n        return head",
      -0.85595703125
    ],
    [
      "class Solution:\n    # @param a, b, an integer\n    # @return nothing\n    def swap(self, a, b):\n        a, b = int(a), int(b)\n        temp = a\n        a = b\n        b = temp",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y + x\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.swap(3, 4))",
      -0.85693359375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param: a: the first number\n    @param: b: the second number\n    @return: the swap result\n    \"\"\"\n    def swap(self, a, b):\n        return b, a",
      -0.85693359375
    ],
    [
      "def swap(x, y):\n    return x, y\n\nif __name__ == '__main__':\n    a = 3\n    b = 4\n    c = swap(a, b)\n    print(c)",
      -0.85693359375
    ],
    [
      "def swap(a, b):\n    return b, a\n\ndef main():\n    a, b = swap(1, 2)\n    print(a, b)\n    a, b = swap(2, 1)\n    print(a, b)\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def swap_numbers(a, b):\n    return b, a\n\nprint swap_numbers(5, 6)\nprint swap_numbers(5, 0)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num1, num2\n\n\nif __name__ == \"__main__\":\n    assert Solution().swap(1, 2) == (2, 1)",
      -0.85693359375
    ],
    [
      "def swap(x, y):\n    return y, x\n\nif __name__ == '__main__':\n    print swap(2, 3)\n    print swap(3, 2)",
      -0.85693359375
    ],
    [
      "class Solution:\n    def swap(self, a, b):\n        return a, b",
      -0.85693359375
    ],
    [
      "def swap(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return b, a\n\n\nif __name__ == '__main__':\n    assert swap(1, 2) == (2, 1)\n    assert swap(1, 2) == (2, 1)\n    assert swap(2, 1) == (1, 2)\n    assert swap(2, 3) == (3, 2)\n    assert swap(3, 2) == (2, 3)",
      -0.85693359375
    ],
    [
      "def swap(num1, num2):\n    return num2, num1\n\n\nif __name__ == \"__main__\":\n    print swap(1, 2)",
      -0.85791015625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def swap(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: None\n        \"\"\"\n        return a, b\n\n\ndef main():\n    solution = Solution()\n    a, b = solution.swap(1, 2)\n    print a, b\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def swap(n1, n2):\n    return n1, n2\n\ndef swap_and_print(n1, n2):\n    n1, n2 = swap(n1, n2)\n    print(n1, n2)\n\ndef main():\n    n1 = int(input())\n    n2 = int(input())\n    swap_and_print(n1, n2)\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def swap(x, y):\n    return (y, x)\n\nprint swap(1, 2)\n\nprint swap(1, 3)",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.swap(10, 20) == (20, 10)",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/swap-numbers/problem\n\ndef swap_numbers(n1, n2):\n    \"\"\"\n    Write a function to swap two numbers.\n    :type n1: int\n    :type n2: int\n    :rtype: None\n    \"\"\"\n    if n1 > n2:\n        n1, n2 = n2, n1\n    while n2!= 0:\n        n1, n2 = n2, n1 % n2\n    print(n1, n2)\n\nif __name__ == '__main__':\n    n1 = int(input().strip())\n    n2 = int(input().strip())\n    swap_numbers(n1, n2)",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param a, a number\n    # @param b, a number\n    # @return nothing\n    def swap(self, a, b):\n        temp = a\n        a = b\n        b = temp\n\n\nif __name__ == '__main__':\n    s = Solution()\n    s.swap(10, 1)",
      -0.85791015625
    ],
    [
      "def swap_numbers(a, b):\n    return b, a\n\nclass Solution:\n    # @param a, a number\n    # @param b, a number\n    # @return nothing\n    def swap_numbers(self, a, b):\n        b, a = swap_numbers(b, a)\n        return a, b\n\nif __name__ == \"__main__\":\n    a = Solution().swap_numbers(2, 1)\n    print(a)",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num1, num2\n\nif __name__ == '__main__':\n    print Solution().swap(3, 4)",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param x, an integer\n    # @param y, an integer\n    # @return nothing\n    def swap(self, x, y):\n        a = x\n        x = y\n        y = a\n        return x, y\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.swap(1, 2)\n    print s.swap(2, 1)\n    print s.swap(2, 2)",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef swap(x, y):\n    return y, x\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 3:\n        print(\"Usage: {} number1 number2\".format(sys.argv[0]))\n        sys.exit(0)\n\n    number1, number2 = swap(int(sys.argv[1]), int(sys.argv[2]))\n    print(number1, number2)",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\ndef swap(a, b):\n    temp = a\n    a = b\n    b = temp\n    return (a, b)\n\nif __name__ == \"__main__\":\n    a, b = swap(1, 2)\n    print a, b",
      -0.85791015625
    ],
    [
      "def swap(n1, n2):\n    n1 = int(n1)\n    n2 = int(n2)\n    n1, n2 = n2, n1\n    return n1, n2\n\ndef swap_numbers(n1, n2):\n    n1, n2 = swap(n1, n2)\n    return n1, n2\n\nif __name__ == \"__main__\":\n    print swap(2, 1)\n    print swap_numbers(2, 1)\n    print swap(1, 2)\n    print swap_numbers(1, 2)\n    print swap(1, 1)\n    print swap_numbers(1, 1)",
      -0.85791015625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def swap(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        return a, b\n\n\ndef main():\n    solution = Solution()\n    a, b = solution.swap(1, 2)\n    print a, b\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param num1, a number\n    # @param num2, a number\n    # @return void\n    def swap(self, num1, num2):\n        n1 = num1\n        n2 = num2\n        n1, n2 = n2, n1\n        return n1, n2\n\n# Test\ns = Solution()\ns.swap(1,2)\nprint(s.swap(1,2))",
      -0.8583984375
    ],
    [
      "def swap_numbers(x, y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    return y, x\n\nif __name__ == '__main__':\n    assert swap_numbers(1, 2) == (2, 1)\n    assert swap_numbers(1, 1) == (1, 1)\n    assert swap_numbers(5, 1) == (5, 1)\n    assert swap_numbers(1, 5) == (5, 1)\n    assert swap_numbers(5, 5) == (5, 5)",
      -0.8583984375
    ],
    [
      "def swap(number1, number2):\n    number1, number2 = number1.replace(\" \", \"\"), number2.replace(\" \", \"\")\n    number1, number2 = int(number1), int(number2)\n    number1, number2 = number1.split(\"\")[::-1], number2.split(\"\")[::-1]\n    return number1 + number2 + number1[::-1] + number2[::-1]\n\nif __name__ == \"__main__\":\n    print(swap(\"123\", \"456\"))\n    print(swap(\"123\", \"456\"))\n    print(swap(\"123\", \"456\"))\n    print(swap(\"123\", \"456\"))\n    print(swap(\"123\", \"456\"))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return x, y\n\nif __name__ == \"__main__\":\n    assert Solution().swap(1, 2) == (2, 1)\n    assert Solution().swap(2, 4) == (4, 2)\n    assert Solution().swap(3, 1) == (1, 3)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer} a\n    # @param {integer} b\n    # @return {void} Do not return anything, modify the input a and b in-place instead.\n    def swap(self, a, b):\n        a, b = a - b, b - a\n        return a, b\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    a, b = 1, 2\n    sol.swap(a, b)\n    print(a, b)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {void} Do not return anything, modify x and y in-place instead.\n    def swap(self, x, y):\n        if x > y:\n            x, y = y, x\n        x, y = y, x\n        x, y = x + y, x - y\n        return x, y",
      -0.8583984375
    ],
    [
      "def swap(n1, n2):\n    return (n2, n1)\n\ndef main():\n    n1 = int(input())\n    n2 = int(input())\n    n1, n2 = swap(n1, n2)\n    print(n1, n2)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num2, num1\n        \n    def swap_2(self, num1, num2):\n        return num2, num1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.swap(1, 2) == (2, 1)\n    assert s.swap(1, 2) == (2, 1)\n    assert s.swap(1, 2) == (2, 1)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def swap(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        return b if a > b else a if a < b else a\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.swap(a, b)",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param x, a number\n    # @param y, a number\n    # @return nothing\n    def swap(self, x, y):\n        temp = x\n        x = y\n        y = temp",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def swap(self, a, b):\n        return b, a\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.swap(1, 2))",
      -0.85888671875
    ],
    [
      "class Solution:\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num1, num2\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert(sol.swap(5, 6) == (6, 5))",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param num1, a list of integer\n    # @param num2, a list of integer\n    # @return nothing\n    def swap(self, num1, num2):\n        # write your code here\n        temp = num1[0]\n        num1[0] = num2[0]\n        num2[0] = temp",
      -0.85888671875
    ],
    [
      "def swap(a, b):\n\tif a > b:\n\t\treturn (b, a)\n\telse:\n\t\treturn (a, b)\n\ndef main():\n\ta = int(raw_input(\"Enter first number: \"))\n\tb = int(raw_input(\"Enter second number: \"))\n\tprint swap(a, b)\n\nif __name__ == '__main__':\n\tmain()",
      -0.86083984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = head\n        q = head.next\n        while p.next and q.next:\n            p.next, q.next = q.next, p.next\n            p = p.next\n            q = q.next\n        p.next = q.next\n        return head",
      -1.1494140625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def swap(self, a, b):\n        \"\"\"\n        :param a: a int\n        :param b: b int\n        :return: None\n        \"\"\"\n        a = int(a)\n        b = int(b)\n        if a == b:\n            return a\n        if a > b:\n            return b, a\n        else:\n            return a, b\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.swap(2, 1)\n    print s.swap(2, 2)\n    print s.swap(2, 3)\n    print s.swap(2, 4)\n    print s.swap(2, 5)\n    print s.swap(2, 6)",
      -1.1865234375
    ],
    [
      "class Solution(object):\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num1, num2\n\nclass Solution1(object):\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num2, num1\n\nclass Solution2(object):\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num2, num1\n\nclass Solution3(object):\n    def swap(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        return num2, num1\n\n\n\nif __name__ == \"__main__\":\n    print Solution().swap(1,2)",
      -1.3544921875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        head_next = head.next\n        head_next_next = head_next.next\n        head.next.next = head\n        head.next = None\n        head_next.next = head_next_next\n        head_next_next = None\n        return head_next\n\nif __name__ == \"__main__\":\n    n1 = ListNode(1)\n    n2 = ListNode(2)\n    n3 = ListNode(3)\n    n4 = ListNode(4)\n    n5 = ListNode(5)\n    n1.next = n2\n    n2.next = n3\n    n3.next = n4\n    n4.next = n5\n    n5.next = n1\n    print Solution().swapPairs(n1)",
      -1.36328125
    ],
    [
      "def swap(a, b):\n    if a > b:\n        return b, a\n    else:\n        return a, b\n\ndef swap_recursive(a, b):\n    if a > b:\n        return swap_recursive(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_2(a, b):\n    if a > b:\n        return swap_recursive_2(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_3(a, b):\n    if a > b:\n        return swap_recursive_3(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_4(a, b):\n    if a > b:\n        return swap_recursive_4(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_5(a, b):\n    if a > b:\n        return swap_recursive_5(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_6(a, b):\n    if a > b:\n        return swap_recursive_6(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_7(a, b):\n    if a > b:\n        return swap_recursive_7(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_8(a, b):\n    if a > b:\n        return swap_recursive_8(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_9(a, b):\n    if a > b:\n        return swap_recursive_9(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_10(a, b):\n    if a > b:\n        return swap_recursive_10(b, a)\n    else:\n        return a, b\n\ndef swap_recursive_11(a, b):\n    if a > b:\n        return swap_recursive_11(b, a)",
      -1.4443359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\n\nclass Solution:\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        p1 = head\n        p2 = head.next\n        while p1.next and p2:\n            temp = p1.next\n            p1.next = p2.next\n            p2.next = temp\n            p1 = p1.next\n            p2 = p2.next\n        return p1",
      -1.9951171875
    ],
    [
      "class Solution(object):\n    def swap(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: void Do not return anything, modify a and b in-place instead.\n        \"\"\"\n        a, b = b, a\n        a, b = b, a\n        a, b = b, a\n        return",
      -2.314453125
    ],
    [
      "import unittest\n\nclass Solution:\n    # @param {integer} a\n    # @param {integer} b\n    # @return {void} Do not return anything, modify the given array in-place instead.\n    def swap(self, a, b):\n        a, b = a, b\n        a, b = b, a\n        a, b = b, a\n        return\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 12ms 100%\nclass Solution {\n    public void swap(int a, int b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n}\n\n# 7ms 50%\nclass Solution {\n    public void swap(int a, int b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n}\n\n# 6ms 100%\nclass Solution {\n    public void swap(int a, int b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n}\n\n# 6ms 100%\nclass Solution {\n    public void swap(int a, int b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n}\n\n# 6ms 100%\nclass Solution {\n    public void swap(int a, int b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n}\n'''",
      -2.419921875
    ],
    [
      "def swap(num1, num2):\n    if num1 > num2:\n        return (num1, num2)\n    else:\n        return (num2, num1)\n\ndef swap_recursive(num1, num2):\n    if num1 > num2:\n        return swap_recursive(num2, num1)\n    else:\n        return (num1, num2)\n\nif __name__ == '__main__':\n    assert swap(1, 2) == (2, 1)\n    assert swap(2, 1) == (1, 2)\n    assert swap_recursive(1, 2) == (2, 1)\n    assert swap_recursive(2, 1) == (1, 2)",
      -2.646484375
    ],
    [
      "class Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        if x < y:\n            return x, y\n        return y, x\n\nif __name__ == '__main__':\n    print Solution().swap(3, 1)\n    print Solution().swap(1, 2)\n    print Solution().swap(0, 1)\n    print Solution().swap(3, 4)\n    print Solution().swap(2, 4)\n    print Solution().swap(1, 3)\n    print Solution().swap(2, 4)\n    print Solution().swap(1, 2)",
      -2.71484375
    ],
    [
      "class Solution(object):\n    def swap(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        return a, b\n\n\ndef main():\n    solution = Solution()\n    print solution.swap(1, 2)\n\nif __name__ == '__main__':\n    main()",
      -2.88671875
    ],
    [
      "# https://www.hackerrank.com/challenges/swap-numbers/problem\n\ndef swap_numbers(first, second):\n    first = int(first)\n    second = int(second)\n    if first > second:\n        first, second = second, first\n    while first > second:\n        second, first = first, second\n        first, second = second, first\n    return second\n\nif __name__ == \"__main__\":\n    first = int(input())\n    second = int(input())\n    print(swap_numbers(first, second))",
      -2.921875
    ],
    [
      "def swap(x, y):\n    return y, x\n\nclass Solution:\n    def swapPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n = len(nums)\n        for i in range(n-1):\n            if i+1 < n and nums[i] == nums[i+1]:\n                j = i + 2\n                while j < n and nums[j] == nums[j-2]:\n                    j += 1\n                if j > i+1:\n                    nums[i], nums[j-1] = nums[j-1], nums[i]\n        return nums\n\nif __name__ == '__main__':\n    assert Solution().swapPairs([1, 1]) == [1, 1]\n    assert Solution().swapPairs([1, 2, 3]) == [3, 2, 1]\n    assert Solution().swapPairs([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1]\n    assert Solution().swapPairs([-1, 0, 1]) == [1, 0, -1]\n    assert Solution().swapPairs([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]",
      -3.46484375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        p1 = head\n        p2 = head.next\n        while p1 and p2:\n            p1.next, p2.next = p2, p1\n            p1 = p1.next\n            p2 = p2.next\n        return head\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    print(sol.swapPairs(head))",
      -4.01953125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        \n        pre = ListNode(0)\n        pre.next = head\n        pre.next.next = head.next.next\n        head.next.next = head\n        \n        while head.next.next:\n            head.next, head.next.next = head.next.next, head.next\n            head = head.next\n        \n        return pre.next",
      -4.10546875
    ],
    [
      "def swap(a, b):\n    return b, a\n\ndef swap_recur(a, b, i, j):\n    if i == j:\n        return swap(a, b)\n    else:\n        return swap(a, swap_recur(a, b, i + 1, j - 1)[0], i + 1, j - 1)\n\ndef swap_iter(a, b):\n    return b, a\n\ndef swap_iter_recur(a, b, i, j):\n    if i == j:\n        return swap(a, b)\n    else:\n        return swap(a, swap_iter_recur(a, b, i + 1, j - 1)[0], i + 1, j - 1)\n\nif __name__ == '__main__':\n    a = 0\n    b = 1\n    print swap(a, b)\n    print swap_recur(a, b, 0, len(str(a)) - 1)\n    print swap_iter(a, b)\n    print swap_iter_recur(a, b, 0, len(str(a)) - 1)",
      -4.3125
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def swap(self, a, b):\n        return b, a\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/swap-numbers/solution/\n\n# 1ms 100%\nclass Solution {\n    public int[] swap(int[] a, int[] b) {\n        int[] ans = new int[a.length];\n        for (int i = 0; i < a.length; i++) {\n            ans[i] = a[i];\n        }\n        for (int i = 0; i < b.length; i++) {\n            ans[i] = b[i];\n        }\n        return ans;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int[] swap(int[] a, int[] b) {\n        int[] ans = new int[a.length];\n        for (int i = 0; i < a.length; i++) {\n            ans[i] = a[i];\n        }\n        for (int i = 0; i < b.length; i++) {\n            int tmp = a[i];\n            ans[i] = b[i];\n            ans[i + 1] = tmp;\n        }\n        return ans;\n    }\n}\n'''",
      -6.02734375
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def swap(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        return y, x\n\n\nif __name__==\"__main__\":\n    import sys\n    f = open(\"0.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        # construct cipher\n        n1 = int(f.readline().strip())\n        n2 = int(f.readline().strip())\n        cipher = [solution.swap(n1, n2)]\n\n        # solve\n        for i in xrange(n2 - 1):\n            n1, n2 = cipher.pop()\n            cipher.append(solution.swap(n1, n2))\n\n        print cipher[0]",
      -6.5234375
    ],
    [
      "def swap(a, b):\n    return b, a\n\ndef swap2(a, b):\n    return b, a\n\ndef swap3(a, b):\n    return b, a, b\n\ndef swap4(a, b):\n    return a, b, a\n\ndef swap5(a, b):\n    return b, a, a\n\ndef swap6(a, b):\n    return b, b, a\n\ndef swap7(a, b):\n    return b, b, a, b\n\ndef swap8(a, b):\n    return a, b, a, b, b, a, b\n\ndef swap9(a, b):\n    return a, b, a, b, b, a, b, a\n\ndef swap10(a, b):\n    return a, a, b, b, b, b, a, b, a\n\ndef swap11(a, b):\n    return a, a, a, b, b, b, b, a, a\n\ndef swap12(a, b):\n    return a, a, a, a, a, a, a, a, a, a\n\ndef swap13(a, b):\n    return a, a, a, a, a, a, a, a, a, a, a, a\n\ndef swap14(a, b):\n    return a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a\n\ndef swap15(a, b):\n    return a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a\n\ndef swap16(a, b):\n    return a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a",
      -6.625
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p1 = head\n        p2 = head.next\n        while p1 and p2:\n            tmp = p1.next\n            p1.next = p2.next\n            p2.next = p1\n            p1 = tmp\n            p2 = p2.next\n        return head",
      -7.37109375
    ],
    [
      "def swap(a, b):\n    a, b = a % 10, b % 10\n    a, b = str(a), str(b)\n    if len(a) > len(b):\n        a, b = b, a\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            continue\n        a[i], b[i] = b[i], a[i]\n        return a, b\n    return b, a\n\n\nclass Solution:\n    def swap(self, a, b):\n        a, b = a % 10, b % 10\n        a, b = str(a), str(b)\n        if len(a) > len(b):\n            a, b = b, a\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                continue\n            a[i], b[i] = b[i], a[i]\n            return a, b\n        return b, a\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert(swap(0, 1) == (1, 0))\n    assert(swap(1, 0) == (1, 0))\n    assert(swap(1, 1) == (0, 1))\n    assert(swap(1, 2) == (2, 1))\n    assert(swap(1, 3) == (3, 1))\n    assert(swap(4, 1) == (1, 4))\n    assert(swap(5, 1) == (1, 5))",
      -8.1640625
    ],
    [
      "def swap(x, y):\n    return x, y\n\ndef swap2(x, y):\n    return y, x\n\ndef swap3(x, y):\n    return x, y, x\n\ndef swap4(x, y):\n    return x, y, x, y\n\ndef swap5(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap6(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap7(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap8(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap9(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap10(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap11(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap12(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap13(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap14(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap15(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap16(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap17(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap18(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap19(x, y):\n    return x, x, y, y, x, x, y, y\n\ndef swap20(x, y):\n    return x, x, y, y, x, x",
      -8.171875
    ],
    [
      "class Solution:\n    # @param a, a number\n    # @param b, a number\n    # @return nothing\n    def swap(self, a, b):\n        a, b = a ^ b, a ^ b\n        a, b = b ^ a, a ^ b\n        a, b = b ^ a, a ^ b\n        a, b = b ^ a, a ^ b\n        return a, b\n\nif __name__ == \"__main__\":\n    assert Solution().swap(1, 2) == (2, 1)",
      -8.40625
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def swap(self, x, y):\n        return y, x\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/swap-numbers/solution/\n\n# 15ms 100%\nclass Solution {\n    public int[] swap(int[] nums) {\n        int[] res = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            res[i] = nums[i];\n        }\n        for (int i = 0; i < nums.length; i++) {\n            res[i] = nums[i];\n        }\n        return res;\n    }\n}\n'''",
      -8.671875
    ],
    [
      "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    # @param A: A list of integers\n    # @param B: A list of integers\n    # @return: nothing\n    def swapPairs(self, A, B):\n        if not A or not B:\n            return\n        l = len(A)\n        for i in range(0, l):\n            if i + 1 < l:\n                tmp = A[i]\n                A[i] = B[i]\n                B[i] = tmp\n                tmp = A[i + 1]\n                A[i + 1] = B[i + 1]\n                B[i + 1] = tmp",
      -8.6953125
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param p, a ListNode\n    # @param q, a ListNode\n    # @return a ListNode\n    def swapPairs(self, p, q):\n        head = p\n        while p and q:\n            p.val, q.val = q.val, p.val\n            p = p.next\n            q = q.next\n        return head\n\nif __name__ == '__main__':\n    solution = Solution()\n    p = ListNode(1)\n    q = ListNode(2)\n    p.next = q\n    print solution.swapPairs(p, q).val\n    p = ListNode(1)\n    q = ListNode(2)\n    p.next = q\n    q.next = ListNode(3)\n    print solution.swapPairs(p, q).val\n    p = ListNode(1)\n    q = ListNode(2)\n    p.next = q\n    q.next = ListNode(3)\n    q.next = ListNode(4)\n    print solution.swapPairs(p, q).val\n    p = ListNode(1)\n    q = ListNode(2)\n    p.next = q\n    q.next = ListNode(3)\n    q.next = ListNode(4)\n    q.next = ListNode(5)\n    print solution.swapPairs(p, q).val",
      -9.6484375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param: first: an integer\n    @param: second: an integer\n    @return: void\n    \"\"\"\n    def swap(self, first, second):\n        if first > second:\n            temp = first\n            first = second\n            second = temp\n        temp = first\n        first = second\n        second = temp\n\n    def swap2(self, first, second):\n        first = first ^ second\n        second = first ^ second\n        first = first ^ second\n        second = first ^ second\n        return first ^ second\n\n    def swap3(self, first, second):\n        first = first ^ second\n        second = first ^ second\n        first = first ^ second\n        second = first ^ second\n        return first ^ second\n\n    def swap4(self, first, second):\n        first = first ^ second\n        second = first ^ second\n        first = first ^ second\n        second = first ^ second\n        return first ^ second\n\n    def swap5(self, first, second):\n        first = first ^ second\n        second = first ^ second\n        first = first ^ second\n        second = first ^ second\n        return first ^ second\n\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2)\n    print s.swap(1, 2",
      -10.2890625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = head\n        while p and p.next:\n            n1 = p.next\n            p.next = n1.next\n            n1.next = p\n            p = p.next\n        return head\n\nif __name__ == \"__main__\":\n    l = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next.next.next.next\n    l1 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next.next.next\n    l2 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next.next\n    l3 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next\n    l4 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next\n    l5 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next\n    print Solution().swapPairs(l).val\n    print Solution().swapPairs(l1).val\n    print Solution().swapPairs(l2).val\n    print Solution().swapPairs(l3).val\n    print Solution().swapPairs(l4).val\n    print Solution().swapPairs(l5).val",
      -12.7578125
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def swapPairs(self, root: TreeNode) -> TreeNode:\n        \"\"\"\n        O(n)\n        O(n)\n        \"\"\"\n        if not root:\n            return root\n\n        if not root.left and not root.right:\n            return root\n\n        if not root.left:\n            root.left, root.right = root.right, root.left\n            return root\n\n        if not root.right:\n            root.left, root.right = root.left, root.right\n            return root\n\n        # root is a node with left and right children\n        # swap left and right children\n        left, right = root.left, root.right\n        root.left, root.right = right, left\n\n        # Recursive\n        return self.swapPairs(root.left)\n\n    def swapPairs(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return root\n\n        if not root.left and not root.right:\n            return root\n\n        if not root.left:\n            root.left, root.right = root.right, root.left\n            return root\n\n        if not root.right:\n            root.left, root.right = root.left, root.right\n            return root\n\n        # root is a node with left and right children\n        # swap left and right children\n        left, right = root.left, root.right\n        root.left, root.right = right, left\n\n        # Recursive\n        return self.swapPairs(root.left)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.right = TreeNode(6)\n\n    root =",
      -12.859375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        tmp = slow.next\n        slow.next = fast\n        fast.next = tmp\n        return head\n\nif __name__ == '__main__':\n    s = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    print s.swapPairs(head)\n    print s.swapPairs(head)",
      -15.8046875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}