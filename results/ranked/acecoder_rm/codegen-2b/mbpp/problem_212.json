{
  "problem": {
    "task_id": "MBPP/223",
    "prompt": "Write a function to check for majority element in the given sorted array.",
    "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
    "test_list": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ],
    "challenge_test_list": [],
    "problem_id": 212
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return nums[0] if len(nums) == 1 else 0\n        count = {}\n        for num in nums:\n            count[num] = count.get(num, 0) + 1\n        majority_num = 0\n        for num, count in count.items():\n            if count > len(nums) / 2:\n                majority_num = num\n        return majority_num\n\nif __name__ == '__main__':\n    nums = [1, 1, 1, 2, 2, 2, 3, 3, 3]\n    print Solution().majorityElement(nums)",
      3.451171875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return nums[0]\n        count = {}\n        for num in nums:\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n        majority = 0\n        for key in count:\n            if count[key] > len(nums)/2:\n                majority = key\n                break\n        return majority\n\nif __name__ == '__main__':\n    print Solution().majorityElement([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])\n    print Solution().majorityElement([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
      1.982421875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return -1\n        n = len(nums)\n        if n % 2!= 0:\n            return nums[n/2]\n        cnt = 0\n        for i in range(n):\n            cnt += nums[i]\n        return nums[cnt/2]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.majorityElement([1,3,2,2,3])\n    print s.majorityElement([1,1,1,1,1])\n    print s.majorityElement([1,2,3])\n    print s.majorityElement([1,3,3])\n    print s.majorityElement([1])\n    print s.majorityElement([])\n    print s.majorityElement([-1,-1,-1,-1,-1])",
      1.71875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        if n < 2:\n            return nums[0]\n        m = nums[0]\n        for i in range(1, n):\n            if nums[i] == m:\n                continue\n            if nums[i] == m + 1:\n                return m\n            elif nums[i] == m - 1:\n                return m\n            else:\n                m = nums[i]\n        return m\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.majorityElement([3, 2, 1, 1, 1])\n    print sol.majorityElement([1, 1, 1, 1, 1])\n    print sol.majorityElement([1, 1, 1, 1, 1, 1, 1, 1])\n    print sol.majorityElement([1, 1, 1, 2, 2, 2, 2])",
      1.67578125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def majorityElement(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n\n        count = 0\n        p = head\n        while p:\n            if p.val == head.val:\n                count += 1\n            else:\n                count -= 1\n\n            p = p.next\n\n        if count >= len(head.val) / 2:\n            return head.val\n        else:\n            return None",
      1.3564453125
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        majority = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == majority:\n                majority = nums[i]\n            elif nums[i] == majority:\n                return majority\n        return majority",
      1.1572265625
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return None\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        count = 0\n        for i in xrange(n):\n            if nums[i] == nums[count]:\n                count += 1\n            else:\n                count = 0\n        if count == n:\n            return nums[0]\n        elif count > n / 3:\n            return nums[0]\n        else:\n            return nums[0]",
      1.0654296875
    ],
    [
      "def majorityElement(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        return arr[0] if arr[0] == arr[1] else arr[1]\n    else:\n        max_val = arr[0]\n        majority_num = 0\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                continue\n            if arr[i] == max_val:\n                majority_num += 1\n            elif arr[i] == max_val:\n                majority_num -= 1\n            elif arr[i] == max_val:\n                majority_num += 1\n            else:\n                majority_num -= 1\n            max_val = arr[i]\n            if majority_num == 0:\n                return arr[i]\n        return arr[i-1]\n\nprint(majorityElement([1, 2, 3, 4, 5, 6]))\nprint(majorityElement([1, 2, 3, 4, 5, 6, 7]))\nprint(majorityElement([1, 2, 3, 4, 5, 6, 7, 7]))\nprint(majorityElement([1, 2, 3, 4, 5, 6, 7, 8]))",
      0.98193359375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        if n < 2:\n            return nums[0]\n        \n        cnt = 0\n        for i in range(n):\n            if nums[i] == nums[0]:\n                cnt += 1\n            elif nums[i] == nums[n-1]:\n                cnt -= 1\n            else:\n                cnt = 0\n        \n        return nums[n/2] if cnt >= n/2 else nums[n/2+1]",
      0.98095703125
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return nums[0]\n        count = {}\n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        majority = 0\n        for key in count:\n            if count[key] > count[majority]:\n                majority = key\n        return majority",
      0.93017578125
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return nums[0]\n        \n        count = {}\n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        \n        majority = -1\n        for num in count:\n            if count[num] > len(nums) / 3:\n                majority = num\n                break\n        \n        return majority",
      0.90869140625
    ],
    [
      "# https://leetcode.com/problems/majority-element-in-sorted-array/discuss/241654/C-Python-C-solution-using-two-passes-and-sort-algorithm\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def majorityElement(self, head):\n        if not head:\n            return None\n        if not head.next:\n            return head.val\n        n = 1\n        head_prev = head\n        while head.next:\n            head_prev = head\n            head = head.next\n            n += 1\n        if n % 2 == 1:\n            return head_prev.val\n        else:\n            return head_prev.next.val",
      0.79638671875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 1:\n            return None\n        count = [0] * 101\n        for num in nums:\n            count[num] += 1\n        majority = 0\n        for i in range(101):\n            if count[i] > majority:\n                majority = i\n        return majority",
      0.7021484375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def majorityElement(self, nums):\n        if not nums or len(nums) < 2:\n            return None\n\n        count = {}\n        for num in nums:\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n\n        majority_num = None\n        max_count = 0\n        for key, value in count.items():\n            if value > max_count:\n                majority_num = key\n                max_count = value\n\n        if max_count < 2:\n            return None\n\n        return majority_num",
      0.61279296875
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @return a integer\n    def majorityElement(self, num):\n        if not num: return None\n        if len(num) == 1: return num[0]\n        count = {}\n        for i in num:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        majority = None\n        maxcount = 0\n        for i in count:\n            if count[i] > maxcount:\n                majority = i\n                maxcount = count[i]\n        return majority\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.majorityElement([1,2,3,1,2,3])",
      0.5146484375
    ],
    [
      "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # T:O(N), S:O(N), 0 ms\n        cnt = collections.Counter(nums)\n        return cnt.most_common(1)[0][0] if cnt else -1",
      0.3427734375
    ],
    [
      "def majorityElement(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr or len(arr) < 2:\n        return None\n    counts = {}\n    for i in arr:\n        counts[i] = counts.get(i, 0) + 1\n    max_count = 0\n    max_count_i = None\n    for i in counts:\n        if counts[i] > max_count:\n            max_count = counts[i]\n            max_count_i = i\n    return max_count_i",
      0.2413330078125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def majorityElement(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # Using a linked list as a queue.\n        lst = []\n        curr = head\n        while curr:\n            lst.append(curr.val)\n            curr = curr.next\n        lst.sort()\n        \n        # Find the majority element.\n        curr = head\n        while curr:\n            if curr.val in lst and lst.count(curr.val) > 1:\n                return curr.val\n            curr = curr.next\n        return None",
      0.2386474609375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = 0\n        for num in nums:\n            if num == count:\n                count += 1\n            elif num == count - 1:\n                count -= 1\n            else:\n                count = num\n        return nums[count]",
      0.160400390625
    ],
    [
      "import collections\n\ndef majority(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    counts = collections.Counter(a)\n    for i in range(len(a)):\n        if counts[i] > 1:\n            return i\n    return -1",
      0.1470947265625
    ],
    [
      "# https://leetcode.com/problems/majority-element/discuss/816/Java-Python-C-and-C-Solution-with-explanation\n# https://leetcode.com/problems/majority-element/discuss/816/Java-Python-C-and-C-Solution-with-explanation\n# https://leetcode.com/problems/majority-element/discuss/816/Java-Python-C-and-C-Solution-with-explanation\n# https://leetcode.com/problems/majority-element/discuss/816/Java-Python-C-and-C-Solution-with-explanation\n# https://leetcode.com/problems/majority-element/discuss/816/Java-Python-C-and-C-Solution-with-explanation\n# https://leetcode.com/problems/majority-element/discuss/816/Java-Python-C-and-C-Solution-with-explanation\n# https://leetcode.com/problems/majority-element/discuss/816/Java-Python-C-and-C-Solution-with-explanation\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums or len(nums) < 2:\n            return None\n        cnt = {}\n        for num in nums:\n            if num in cnt:\n                cnt[num] += 1\n            else:\n                cnt[num] = 1\n        return max(cnt, key=cnt.get)",
      0.14453125
    ],
    [
      "# https://www.hackerrank.com/challenges/majority-element\n\ndef majority_element(arr):\n    # Complete this function\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count -= 1\n    if count > len(arr) / 2:\n        return arr[-1]\n    else:\n        return arr[-1]\n\nif __name__ == '__main__':\n    arr = [1,1,2,2,2,3,3,3,4,4,5,5]\n    print(majority_element(arr))",
      0.09735107421875
    ],
    [
      "#!/usr/bin/env python\n\n# https://leetcode.com/problems/majority-element/\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        return self.majorityElement1(nums)\n\n    def majorityElement1(self, nums):\n        if not nums:\n            return 0\n        count = 0\n        majority = -1\n        for i in xrange(len(nums)):\n            if nums[i] == majority:\n                count += 1\n            else:\n                if count == len(nums) - 1:\n                    majority = nums[i]\n                count = 1\n        if count == len(nums) - 1:\n            return majority\n        return -1",
      0.0810546875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        \n        count = {x:0 for x in range(1, 10)}\n        for x in nums:\n            count[x] += 1\n        for k, v in count.items():\n            if v >= 5:\n                return k\n        return None",
      0.02093505859375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        counts = [0] * 256\n        for num in nums:\n            counts[num] += 1\n        majority = 0\n        for i in range(256):\n            if counts[i] > counts[majority]:\n                majority = i\n        return majority",
      0.018035888671875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        counts = {}\n        for i in nums:\n            if i in counts:\n                counts[i] += 1\n            else:\n                counts[i] = 1\n\n        for key in counts:\n            if counts[key] > len(nums) / 2:\n                return key\n        return -1",
      0.00862884521484375
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @return a integer\n    def majorityElement(self, num):\n        if not num or len(num) == 1:\n            return num[0]\n        n = len(num)\n        p = num[0]\n        cnt = 0\n        for i in range(n):\n            if num[i] == p:\n                cnt += 1\n            elif cnt > 0:\n                if num[i] == p:\n                    cnt -= 1\n                else:\n                    cnt = 0\n        if cnt > 0:\n            return p\n        else:\n            return num[0]",
      -0.037200927734375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        n = len(nums)\n        cnt = [0] * (n + 1)\n        for i in range(n):\n            cnt[nums[i]] += 1\n        for i in range(n):\n            if cnt[i] > n / 2:\n                return nums[i]\n        return None",
      -0.11376953125
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @return a boolean\n    def majorityElement(self, num):\n        if not num:\n            return False\n\n        a = sorted(num)\n        if a[0] == a[-1]:\n            return False\n        else:\n            return a[-1] == a[-2]",
      -0.2265625
    ],
    [
      "# https://leetcode.com/problems/majority-element/discuss/77982/Java-O(n)-Time-JavaScript-DP-solution\n\nfrom collections import Counter\n\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # https://leetcode.com/problems/majority-element/discuss/77982/Java-O(n)-Time-JavaScript-DP-solution\n        cnt = Counter(nums)\n        if len(cnt) == 1:\n            return cnt.most_common()[0][0]\n        return nums[cnt.most_common()[0][1]]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.majorityElement([1, 2, 3]))\n    print(s.majorityElement([2, 2, 2, 3]))\n    print(s.majorityElement([1, 2, 3, 2]))",
      -0.294189453125
    ],
    [
      "class Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        cnt = {}\n        for n in nums:\n            if n in cnt:\n                cnt[n] += 1\n            else:\n                cnt[n] = 1\n        majority_element = None\n        for v in cnt:\n            if cnt[v] > 1:\n                majority_element = v\n                break\n        return majority_element",
      -0.35107421875
    ],
    [
      "class Solution:\n\t# @param num, a list of integer\n\t# @return a integer\n\tdef majorityElement(self, num):\n\t\tif len(num) < 2:\n\t\t\treturn num[0]\n\n\t\tcnt = {}\n\t\tfor i in num:\n\t\t\tif i not in cnt:\n\t\t\t\tcnt[i] = 1\n\t\t\telse:\n\t\t\t\tcnt[i] += 1\n\n\t\tfor i in cnt:\n\t\t\tif cnt[i] > len(num) / 2:\n\t\t\t\treturn i\n\n\t\treturn -1",
      -0.367919921875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        count = {}\n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        majority = None\n        for num, count in count.items():\n            if count >= len(nums) / 2:\n                majority = num\n                break\n        return majority\n\n\nif __name__ == '__main__':\n    print Solution().majorityElement([1, 1, 1, 2, 2, 2, 3, 3, 3])\n    print Solution().majorityElement([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])\n    print Solution().majorityElement([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5])\n    print Solution().majorityElement([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5])\n    print Solution().majorityElement([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6",
      -0.390380859375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        l = len(nums)\n        count = [0] * l\n        for i in range(l):\n            count[i] = nums[i]\n        for i in range(l):\n            count[i] = count[i] + count[i + 1]\n        for i in range(l):\n            count[i] = count[i] / 2\n        majority = 0\n        for i in range(l):\n            if count[i] > majority:\n                majority = count[i]\n        return majority",
      -0.70166015625
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return None\n        n = len(nums)\n        ret = nums[0]\n        for i in range(n):\n            if nums[i] == ret:\n                count = 1\n                for j in range(i+1, n):\n                    if nums[j] == ret:\n                        count += 1\n                    else:\n                        break\n                if count > n//3:\n                    return ret\n        return None\n\nclass Solution2(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n < 2:\n            return None\n        ret = nums[0]\n        for i in range(n):\n            if nums[i] == ret:\n                count = 1\n                for j in range(i+1, n):\n                    if nums[j] == ret:\n                        count += 1\n                    else:\n                        break\n                if count > n//3:\n                    return ret\n        return None",
      -0.75341796875
    ],
    [
      "import collections\n\n\nclass Solution(object):\n\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        counts = collections.Counter(nums)\n        for i in range(len(nums)):\n            if counts[i] > 1:\n                return i\n        return -1\n\n\nif __name__ == '__main__':\n    assert Solution().majorityElement([3, 2, 3, 4, 2]) == 3",
      -0.85595703125
    ],
    [
      "class Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = collections.Counter(nums)\n        majority_elements = [i for i,c in count.most_common() if c == count[i]]\n        return majority_elements[0] if len(majority_elements) > 1 else -1\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,3,4,5,6,7]\n    print(sol.majorityElement(nums))\n    print(sol.majorityElement(nums[::-1]))",
      -0.85595703125
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @return a integer\n    def majorityElement(self, num):\n        # write your code here\n        # sort num, then get the index of the majority element\n        if len(num) == 0:\n            return None\n        elif len(num) == 1:\n            return num[0]\n        else:\n            return num[0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.majorityElement([1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6])",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        majority_element = None\n        for i, n in enumerate(nums):\n            if majority_element is None:\n                majority_element = n\n            elif n == majority_element:\n                majority_element += 1\n            elif n == majority_element - 1:\n                majority_element -= 1\n        return majority_element if majority_element > 0 else 0",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return nums[0]\n        cnt = {}\n        for num in nums:\n            if num in cnt:\n                cnt[num] += 1\n            else:\n                cnt[num] = 1\n        if len(cnt) > 1:\n            return nums[0]\n        else:\n            return max(cnt, key=cnt.get)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [2, 2, 2, 2, 2]\n    print s.majorityElement(nums)",
      -0.85791015625
    ],
    [
      "def majorityElement(arr):\n    # Write your code here\n    majorityElementCount = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[majorityElementCount]:\n            majorityElementCount += 1\n        else:\n            majorityElementCount = 0\n            \n    return majorityElementCount",
      -0.85791015625
    ],
    [
      "from collections import Counter\n\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        c = Counter(nums)\n        majority_count = c.most_common(1)[0][1]\n        return nums[c.most_common(1)[0][0]] if majority_count > 1 else -1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.majorityElement([1,1,1,1,1,1,1])\n    print s.majorityElement([1,2,3,4])\n    print s.majorityElement([1,1,1,1])\n    print s.majorityElement([1,1,1,2,2,2])\n    print s.majorityElement([1,1,2,3])\n    print s.majorityElement([1,1,2,2,2])\n    print s.majorityElement([1,1,1,2,2,2,2])",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @return an integer\n    def majorityElement(self, num):\n        if not num: return None\n        if len(num) == 1: return num[0]\n\n        counts = {}\n        for num_item in num:\n            counts[num_item] = counts.get(num_item, 0) + 1\n\n        for key, value in counts.items():\n            if value == len(num):\n                return key\n        return None",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        n = len(nums)\n        if n < 2:\n            return nums[0]\n        count = [0] * n\n        for i in range(n):\n            count[i] += 1\n        for i in range(n):\n            count[i] -= 1\n            if count[i] == 0:\n                return nums[i]\n        return nums[0]\n\nif __name__ == \"__main__\":\n    nums = [2, 2, 2, 3, 3, 3, 4, 4, 4]\n    print(Solution().majorityElement(nums))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        nums.sort()\n        majority = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == majority:\n                majority += 1\n            else:\n                majority -= 1\n        return majority",
      -0.8583984375
    ],
    [
      "def majorityElement(arr):\n    # write your code here\n    majority_value = -1\n    for i in arr:\n        if i == majority_value:\n            continue\n        else:\n            majority_value = i\n    return majority_value\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,5,6,7,8,9,10,11,12]\n    print(majorityElement(arr))",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    # @param head, a ListNode\n    # @return a boolean\n    def majorityElement(self, head):\n        if head is None:\n            return False\n        elif head.next is None:\n            return head.val\n        else:\n            curr = head.val\n            head = head.next\n            while head is not None:\n                if head.val == curr:\n                    curr = head.val\n                    head = head.next\n                else:\n                    head = head.next\n            return curr",
      -0.8583984375
    ],
    [
      "from collections import Counter\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return\n        maj = nums[0]\n        cnt = Counter(nums)\n        for n in nums:\n            if n == maj:\n                if cnt[n] > 1:\n                    maj = n\n            else:\n                cnt[n] -= 1\n                if cnt[n] == 0:\n                    maj = n\n        return maj",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return None\n        nums.sort()\n        for i in range(1, n):\n            if nums[i] == nums[i - 1]:\n                continue\n            if nums[i] == nums[i + 1]:\n                continue\n            return nums[i]",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # The algorithm is similar to counting majority, but\n        # we don't need to keep track of the majority count.\n        # Instead, we just keep track of the number of times\n        # we see the majority element.\n        majority_count = 0\n        for num in nums:\n            if num == majority_count:\n                majority_count += 1\n            elif num == majority_count - 1:\n                majority_count -= 1\n            elif num == majority_count + 1:\n                majority_count -= 1\n        return nums[majority_count]\n\n\nif __name__ == \"__main__\":\n    print Solution().majorityElement([1,2,3,3,3,4])",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        count = 0\n        for i in range(0, len(nums)):\n            if nums[i] == nums[i-1]:\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                count = 0\n        return nums[count == 0]",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/majority-element/discuss/93572/Python-O(N)-Time-Solutions\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == nums[-1]:\n                count += 1\n            else:\n                count -= 1\n            if count == 0:\n                return nums[i]\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = []\n# param_2 = []\n# param_2 = obj.majorityElement(param_1)",
      -0.8583984375
    ],
    [
      "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        counts = [0] * (nums[-1] + 1)\n        for num in nums:\n            counts[num] += 1\n\n        majority = -1\n        for i in xrange(len(counts)):\n            if counts[i] > nums.count(i):\n                majority = i\n                break\n        return majority",
      -0.85888671875
    ],
    [
      "def majority(arr):\n    cnt = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[0]:\n            cnt += 1\n        else:\n            cnt -= 1\n    if cnt > len(arr) / 2:\n        return arr[0]\n    else:\n        return -1",
      -0.85888671875
    ],
    [
      "def majorityElement(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    majority_element = -1\n    for i in xrange(len(nums)):\n        if nums[i] == majority_element:\n            majority_element = nums[i]\n        else:\n            majority_element = nums[i]\n    return majority_element",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return None\n\n        # count number of each element\n        cnt = collections.Counter(nums)\n        counts = sorted(cnt.values())\n\n        # find majority element\n        for i in range(len(counts) - 1):\n            if counts[i] > counts[i + 1]:\n                return nums[i]\n        return None",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # count the number of times each element appears\n        count = [0] * 101\n        for num in nums:\n            count[num] += 1\n\n        # for each element, count the number of times it appears\n        for i in range(101):\n            if count[i] >= len(nums) / 2:\n                return i",
      -0.85888671875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # sort the list\n        nums.sort()\n        # find the first and last element\n        first = nums[0]\n        last = nums[-1]\n        # check if the first element is majority\n        if nums[0] == first:\n            # if the last element is not majority, return -1\n            if nums[-1]!= last:\n                return -1\n            else:\n                # otherwise, return the first element\n                return first\n        else:\n            # otherwise, return -1\n            return -1",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        cnt = {}\n        for num in nums:\n            if num not in cnt:\n                cnt[num] = 1\n            else:\n                cnt[num] += 1\n        for key, value in cnt.items():\n            if value > 1:\n                return key\n        return None\n\n# Note:\n# This is a classic majority element problem",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @return a integer\n    def majorityElement(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        if not num:\n            return -1\n        if len(num) == 1:\n            return num[0]\n        cnt = [0] * len(num)\n        for i in range(len(num)):\n            cnt[num[i]] += 1\n        for i in range(len(num)):\n            if cnt[i] == len(num):\n                return num[i]\n        return num[cnt.index(max(cnt))]",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @return a integer\n    def majorityElement(self, num):\n        majority_num = 0\n        for i in range(len(num)):\n            if num[i] == majority_num:\n                majority_num += 1\n            else:\n                majority_num -= 1\n        return majority_num\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.majorityElement([1, 2, 3, 3, 3, 4, 5, 5])",
      -0.86083984375
    ],
    [
      "# https://leetcode.com/problems/majority-element/\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        m = nums[0]\n        for i in range(1, n):\n            if nums[i]!= m:\n                m = nums[i]\n                nums[i] = nums[0]\n            else:\n                nums[i] = nums[0]\n        return nums[0]",
      -0.86083984375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return None\n        cnt = collections.Counter(nums)\n        majority = cnt.most_common(1)[0][0]\n        for i in range(len(nums)):\n            if nums[i] == majority:\n                cnt[nums[i]] -= 1\n                if cnt[nums[i]] == 0:\n                    del cnt[nums[i]]\n        return majority",
      -0.86083984375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = {}\n        for num in nums:\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n        for key in count:\n            if count[key] > nums.count(key):\n                return key\n\nif __name__ == \"__main__\":\n    print Solution().majorityElement([1,1,1,2,2,2])",
      -0.86083984375
    ],
    [
      "# Your code here!\n\ndef majorityElement(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    cnt = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[i] % len(nums):\n            cnt += 1\n        else:\n            cnt = 0\n        if cnt > len(nums) / 2:\n            return nums[i]",
      -0.86083984375
    ],
    [
      "# https://leetcode.com/problems/majority-element/\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.majorityElementCount(nums)\n    \n    def majorityElementCount(self, nums):\n        count = {}\n        for i in range(len(nums)):\n            if nums[i] not in count:\n                count[nums[i]] = 1\n            else:\n                count[nums[i]] += 1\n        for key, value in count.items():\n            if value == len(nums):\n                return key\n        return -1",
      -0.9423828125
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @return a integer\n    def majorityElement(self, num):\n        if len(num) == 0:\n            return None\n        max_count = 0\n        max_index = 0\n        for i in range(len(num)):\n            if num[i] == num[max_index]:\n                max_count += 1\n            else:\n                max_count = 1\n            if max_count > len(num) / 2:\n                max_index = i\n                max_count = 1\n        return num[max_index]\n\n\nif __name__ == '__main__':\n    print Solution().majorityElement([1,1,1,2])",
      -0.96435546875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, self.next)\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # TODO: write your code here\n        cnt = collections.Counter(nums)\n        count = 0\n        for v in cnt.values():\n            if v > count:\n                return v\n            count += v\n\n        return None\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.majorityElement([1, 1, 1, 2, 2, 2, 3, 3, 4])\n    print solution.majorityElement([1, 1, 1, 1, 2, 2, 3, 3, 4])\n    print solution.majorityElement([1, 1, 1, 1, 1, 2, 2, 3, 3, 4])",
      -0.99755859375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param: A list of integers\n    @return: A boolean\n    \"\"\"\n    def majorityElement(self, nums):\n        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] == nums[0]\n        nums.sort()\n        for i in xrange(len(nums)-1):\n            if nums[i] == nums[i+1]:\n                return nums[i]\n        return False",
      -1.3515625
    ],
    [
      "# https://www.hackerrank.com/challenges/majority-element\n# https://www.hackerrank.com/challenges/majority-element-ii\n\n# Use count function to determine the majority element.\ndef majorityElement(arr):\n    n = len(arr)\n    if n < 2:\n        return\n    majority = arr[0]\n    count = 0\n    for i in range(n):\n        if arr[i] == majority:\n            count += 1\n        elif count > 0:\n            count -= 1\n        else:\n            count = 0\n    if count > 0:\n        return majority\n    else:\n        return arr[0]\n\n\n# Write a function that returns whether the given array is sorted in ascending order.\ndef isSorted(arr):\n    n = len(arr)\n    if n < 2:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n\n# Test Cases\n\n# arr = [1, 2, 3, 4, 5, 6]\n# arr = [6, 5, 4, 3, 2, 1]\n# arr = [2, 4, 6, 8, 10]\narr = [1, 2, 3, 4, 5, 6]\nprint(\"Is Sorted: \", isSorted(arr))\nprint(\"Majority Element: \", majorityElement(arr))",
      -1.99609375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return None\n        \n        cnt = {}\n        for i in xrange(len(nums)):\n            if nums[i] in cnt:\n                cnt[nums[i]] += 1\n            else:\n                cnt[nums[i]] = 1\n        \n        majority = nums[0]\n        for i in xrange(1, len(nums)):\n            if cnt[nums[i]] > cnt[majority]:\n                majority = nums[i]\n                \n        return majority",
      -2.111328125
    ],
    [
      "class Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        count = len(nums)\n        majority_value = nums[0]\n        for i in range(1, count):\n            if nums[i] == majority_value:\n                majority_value += 1\n            else:\n                majority_value -= 1\n        return majority_value\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [2, 2, 2, 3, 3, 3, 4]\n    print(s.majorityElement(nums))",
      -2.158203125
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        cnt = [0] * (len(nums) + 1)\n        for i in range(1, len(nums) + 1):\n            cnt[i] = 0\n            for j in range(i - 1, -1, -1):\n                if nums[j] == nums[i - 1]:\n                    cnt[i] += 1\n                    if cnt[i] > 1:\n                        return nums[i - 1]\n        return nums[0]\n\n# test\ns = Solution()\nnums = [1, 1, 1, 2, 2, 2, 3]\nprint s.majorityElement(nums)\nnums = [1, 1, 1, 2, 2, 3]\nprint s.majorityElement(nums)",
      -2.630859375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return None\n        counts = [0] * 10\n        for i in nums:\n            counts[i] += 1\n        for i in range(10):\n            if counts[i] > 1:\n                return i\n        return None\n\n# Note:\n#\n# A majority element is an element that appears more than the half of the array.",
      -2.677734375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        # find the majority element and its index\n        majority_index = 0\n        majority_count = 0\n        for i in range(len(nums)):\n            if nums[i] == nums[majority_index]:\n                majority_count += 1\n            else:\n                if majority_count > 1:\n                    return nums[majority_index]\n                majority_count = 1\n                majority_index = i\n\n        return nums[majority_index]\n\n\nif __name__ == \"__main__\":\n    print Solution().majorityElement([2,2,2,2,2,3])\n    print Solution().majorityElement([1,1,1,2])\n    print Solution().majorityElement([2,2,2,2,2,3])\n    print Solution().majorityElement([2,2,3])\n    print Solution().majorityElement([2,2,2,2])\n    print Solution().majorityElement([2,2,2,2,2,2,3])\n    print Solution().majorityElement([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
      -2.796875
    ],
    [
      "import sys\n\n__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # TODO: use a counter to keep track of the number of elements that are the majority element\n        # and when the majority element is found, return the index of the majority element\n        # use a hashmap to keep track of the number of times a particular element occurs\n        # use a boolean array to keep track of the majority element\n        # use a counter to keep track of the number of times a particular element occurs\n        # return the index of the majority element\n        # use a counter to keep track of the number of times a particular element occurs\n        # return the index of the majority element\n\n        if not nums:\n            return -1\n\n        hashmap = {}\n        for i, num in enumerate(nums):\n            if num not in hashmap:\n                hashmap[num] = 1\n            else:\n                hashmap[num] += 1\n\n        majority_element = None\n        for num in hashmap:\n            if hashmap[num] > len(nums)/2:\n                return i\n\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 2, 3, 3, 3]\n    s = Solution()\n    print s.majorityElement(nums)\n\n    nums = [1, 1, 1, 1]\n    s = Solution()\n    print s.majorityElement(nums)\n\n    nums = [1, 1, 1, 1]\n    s = Solution()\n    print s.majorityElement(nums)\n\n    nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
      -2.8984375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        majority_element = None\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == majority_element:\n                count += 1\n            else:\n                count -= 1\n            if count == 0:\n                majority_element = nums[i]\n        return majority_element\n\nif __name__ == \"__main__\":\n    print Solution().majorityElement([3, 1, 3, 3, 3, 3, 1, 3, 3])\n    print Solution().majorityElement([1, 1, 1, 1, 1, 1, 1, 1, 1])\n    print Solution().majorityElement([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
      -3.048828125
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.majorityElementCount(nums)\n    def majorityElementCount(self, nums):\n        if not nums:\n            return 0\n        m = 0\n        for i in range(len(nums)):\n            if nums[i] > m:\n                m = nums[i]\n        return m\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        m = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == m:\n                m = nums[i]\n            else:\n                m = nums[i]\n        return m\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        m = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == m:\n                m = nums[i]\n            else:\n                m = nums[i]\n        return m\n\n\nif __name__ == '__main__':\n    print Solution().majorityElement([2,2,2,3,3,4,5])",
      -3.130859375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: ListNode\n        \"\"\"\n        if not nums:\n            return None\n        majority = nums[0]\n        pre_node = ListNode(0)\n        pre_node.next = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == majority:\n                pre_node.next = nums[i]\n                pre_node = pre_node.next\n            else:\n                pre_node.next = nums[i]\n                pre_node = pre_node.next\n        return pre_node.next\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,2,2,3,3,3]\n    print(sol.majorityElement(nums))",
      -3.50390625
    ],
    [
      "from collections import Counter\n\ndef majority(arr):\n    count = Counter(arr)\n    if (sum(count.values()) >= len(arr) / 2):\n        return arr[count.most_common(1)[0][0]]\n    return None\n\nif __name__ == '__main__':\n    print(majority([2, 2, 1, 2, 2, 2, 3, 1]))\n    print(majority([2, 2, 2, 3, 3, 3, 4, 4]))\n    print(majority([3, 3, 4, 4, 4, 4, 5, 5]))\n    print(majority([3, 3, 4, 4, 4, 4, 5, 5]))\n    print(majority([1, 1, 1, 1, 1, 1, 1, 1]))\n    print(majority([1, 1, 1, 1, 1, 1, 1, 1]))\n    print(majority([1, 1, 1, 1, 1, 1, 1, 1]))\n    print(majority([1, 1, 1, 1, 1, 1, 1, 1]))\n    print(majority([1, 1, 1, 1, 1, 1, 1, 1]))\n    print(majority([1, 1, 1, 1, 1, 1, 1, 1]))",
      -3.591796875
    ],
    [
      "class Solution:\n    # @param num, a list of integer\n    # @return a boolean\n    def majorityElement(self, num):\n        if len(num) <= 1:\n            return False\n        count = [0] * len(num)\n        for i in range(len(num)):\n            if num[i] in count:\n                count[num[i]] += 1\n            else:\n                count[num[i]] = 1\n        for i in range(len(count)):\n            if count[i] > len(num) / 2:\n                return num[i]\n        return False",
      -3.62890625
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return None\n        cnt = [0] * 10\n        for num in nums:\n            cnt[num] += 1\n        for i in range(10):\n            if cnt[i] > 1:\n                return i\n        return None\n\n# Note:\n# The solution above is faster than the following one.\n# 1. sort the array\n# 2. find the majority element\n# 3. return the index of the majority element",
      -3.884765625
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        maj = nums[0]\n        for num in nums:\n            if num == maj:\n                maj += 1\n            else:\n                maj -= 1\n        return maj\n\n\nif __name__ == '__main__':\n    print Solution().majorityElement([2, 2, 2, 3, 3, 4])",
      -3.955078125
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        \n        sorted_nums = sorted(nums)\n        \n        majority = sorted_nums[0]\n        count = 1\n        for i in range(1, len(sorted_nums)):\n            if sorted_nums[i] == majority:\n                count += 1\n            else:\n                if count == 2:\n                    return majority\n                else:\n                    count = 1\n                \n        return majority",
      -4.43359375
    ],
    [
      "def majority_element(nums):\n    # write your code here\n    nums = sorted(nums)\n    cnt = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[i + 1]:\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt > 0:\n            return nums[i]\n\nif __name__ == '__main__':\n    print(majority_element([3, 3, 3, 3]))\n    print(majority_element([1, 2, 2, 3, 3]))\n    print(majority_element([1, 2, 2, 2, 3, 3]))\n    print(majority_element([1, 2, 2, 2, 2]))\n    print(majority_element([1, 2, 2, 2, 2, 2, 2]))\n    print(majority_element([1, 2, 2, 2, 2, 2, 2, 2, 2, 2]))",
      -4.609375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return\n        # the first element is majority\n        if nums[0] not in [nums[i] for i in range(1, len(nums))]:\n            return nums[0]\n        # count the number of occurance of each element\n        cnt = [0] * len(nums)\n        for i in range(1, len(nums)):\n            cnt[nums[i]] += 1\n        # check the majority element\n        majority = nums[0]\n        for i in range(1, len(nums)):\n            if cnt[i] > cnt[majority]:\n                majority = nums[i]\n        return majority",
      -6.58203125
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in xrange(len(nums)):\n            if nums[i] == nums[count]:\n                count += 1\n            else:\n                count = 0\n        return nums[count]\n\nif __name__ == \"__main__\":\n    print Solution().majorityElement([2, 2, 2, 3, 3, 4])\n    print Solution().majorityElement([2, 2, 2])\n    print Solution().majorityElement([2, 2, 2, 3, 3, 4, 3])",
      -7.00390625
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        cnt = 0\n        for n in nums:\n            if n not in nums:\n                cnt += 1\n            else:\n                if cnt:\n                    if cnt == 1:\n                        return n\n                    elif cnt == 2:\n                        return n\n                    else:\n                        return 0\n                else:\n                    cnt += 1\n        return 0\n\n\nif __name__ == \"__main__\":\n    print Solution().majorityElement([1, 2, 3, 1, 2, 3])",
      -7.16015625
    ],
    [
      "# https://leetcode.com/problems/majority-element/\n# https://leetcode.com/problems/majority-element/discuss/126515/1-line-solution-using-buble-sort\n# https://leetcode.com/problems/majority-element/discuss/126516/1-line-solution-using-buble-sort\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = {}\n        for i in xrange(len(nums)):\n            if nums[i] in count:\n                count[nums[i]] += 1\n            else:\n                count[nums[i]] = 1\n        majority = 0\n        for i in xrange(len(count)):\n            if count[i] > 1:\n                majority = nums[i]\n                break\n        return majority",
      -7.59765625
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        cnt = [0] * 10\n        for num in nums:\n            cnt[num] += 1\n        for i in range(10):\n            if cnt[i] > len(nums) / 2:\n                return i\n        return -1\n\n\"\"\"\nTest cases\n\"\"\"\ntests = [\n    [[1], 1],\n    [[1, 1, 1], 1],\n    [[1, 2, 3], 3],\n    [[1, 2, 3, 3], 3],\n    [[1, 2, 3, 3, 3, 3, 4, 5, 6, 7], 7],\n]\nfor test in tests:\n    sol = Solution()\n    actual = sol.majorityElement(test[0])\n    print actual\n    assert actual == test[1]",
      -7.80859375
    ],
    [
      "class Solution:\n    # @param A, a list of integer\n    # @return an integer\n    def majorityElement(self, A):\n        if len(A) < 2:\n            return A[0]\n        count = 0\n        for i in xrange(len(A)):\n            if A[i] == A[0]:\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                count = 0\n            if count > 1:\n                return A[0]\n        return A[0]\n\n\nif __name__ == \"__main__\":\n    assert Solution().majorityElement([1,2,3,4,4]) == 4\n    assert Solution().majorityElement([1,2,2,2,3]) == 3\n    assert Solution().majorityElement([1,1,1,1,1]) == 1\n    assert Solution().majorityElement([1,2,3,4]) == 3\n    assert Solution().majorityElement([1,2,3,3,3,3,4]) == 3\n    assert Solution().majorityElement([1,1,1,2,3,4,5,6]) == 4\n    assert Solution().majorityElement([1,1,2,3,4,5,6]) == 3",
      -8.09375
    ],
    [
      "#!/usr/bin/python\n\nimport sys\n\ndef majorityElement(arr):\n    majority = None\n    for i in range(len(arr)):\n        if arr[i] == majority:\n            majority = i\n        else:\n            if majority!= None:\n                break\n    return majority\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print \"Most common element: \" + str(majorityElement(arr))\n    arr = [1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print \"Most common element: \" + str(majorityElement(arr))\n    arr = [1, 1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print \"Most common element: \" + str(majorityElement(arr))\n    arr = [1, 1, 1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print \"Most common element: \" + str(majorityElement(arr))",
      -8.7734375
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Count of each element\n        count = [0] * 10\n        for num in nums:\n            count[num] += 1\n\n        # Count of each element in the range [0, 10)\n        count_min = [0] * 10\n        count_max = [0] * 10\n\n        # Count of each element in the range [10, 20)\n        count_min_max = [0] * 10\n\n        # Count of each element in the range [20, 30)\n        count_max_min = [0] * 10\n\n        # Count of each element in the range [30, 40)\n        count_max_min_max = [0] * 10\n\n        # Count of each element in the range [40, 50)\n        count_max_min_max_max = [0] * 10\n\n        # Count of each element in the range [50, 60)\n        count_max_min_max_max_max = [0] * 10\n\n        # Count of each element in the range [60, 70)\n        count_max_min_max_max_max_max = [0] * 10\n\n        # Count of each element in the range [70, 80)\n        count_max_min_max_max_max_max_max = [0] * 10\n\n        # Count of each element in the range [80, 90)\n        count_max_min_max_max_max_max_max_max = [0] * 10\n\n        # Count of each element in the range [90, 100)\n        count_max_min_max_max_max_max_max_max_max = [0] * 10\n\n        # Count of each element in the range [100, 110)\n        count_max_min_max_max_max_max_max_max_max_max = [0] * 10\n\n        # Count of each element in the range [110, 120)\n        count_max_min_max_max_max_max_max_max_max_max_max = [0] * 10\n\n        # Count",
      -9.75
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param A : the sorted array\n    # @return : the majority element in the array\n    def majorityElement(self, A):\n        if len(A) < 2:\n            return A[0]\n        ans = None\n        cnt = 0\n        head = None\n        for i in range(len(A)):\n            if head == None:\n                head = ListNode(A[i])\n                cnt = 1\n            else:\n                if A[i]!= head.val:\n                    if ans == None:\n                        ans = A[i]\n                    else:\n                        ans = ans if ans == A[i] else ans\n                    head = ListNode(A[i])\n                    cnt = 1\n                else:\n                    cnt += 1\n                    if cnt > len(A) / 2:\n                        ans = ans if ans == A[i] else ans\n            if i+1 == len(A):\n                return ans\n        return ans\n\nif __name__ == \"__main__\":\n    assert Solution().majorityElement([1, 1, 1, 1, 2, 2, 2, 3]) == 3\n    assert Solution().majorityElement([3, 3, 3]) == 3\n    assert Solution().majorityElement([1, 1, 1, 1, 1, 1, 1, 1]) == 1",
      -11.078125
    ],
    [
      "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = {}\n        for i in xrange(len(nums)):\n            if nums[i] in count:\n                if count[nums[i]] == 1:\n                    count[nums[i]] += 1\n                else:\n                    count[nums[i]] -= 1\n            else:\n                count[nums[i]] = 1\n        majority = None\n        for i in xrange(len(count)):\n            if count[i] > 1:\n                if majority is None:\n                    majority = i\n                else:\n                    if count[majority] > count[i]:\n                        majority = i\n                    elif count[majority] < count[i]:\n                        majority = i\n        return majority\n\n# Note:\n# Since we know that the number of distinct elements is at most 10000,\n# we can use the binary search algorithm to find the majority element.\n#\n# Note:\n# In a sorted array, the number of duplicates is at most 1.\n# The number of duplicates is 0 if and only if the array is unique.\n#\n# Note:\n# The majority element is the element that appears more than 1/3 of the time.\n#\n# Example 1:\n# Input: nums = [1,1,2]\n# Output: 2\n# Explanation:\n# The number of duplicates is 0, so the majority element is 2.\n# Example 2:\n# Input: nums = [1,1,1,2,2,3,3,3,4,4,4,5]\n# Output: 4\n# Explanation:\n# The number of duplicates is 3, so the majority element is 4.\n# Example 3:\n# Input: nums = [1]\n# Output: 1\n# Explanation:\n# There is only 1 element in the array, so the majority element is itself.\n# Example 4:\n# Input: nums = [1,2]\n# Output: 1\n# Explanation:\n# The number of duplicates is 1, so the majority element is 2.\n# Example",
      -11.7890625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def majorityElement(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # Use a list to store the current number of occurances.\n        num = []\n        # Iterate through all the nodes in the linked list.\n        for node in head:\n            # Iterate through all the numbers in the list and store them.\n            for val in node.val:\n                # If the number is already in the list, increment the number of occurances.\n                if val in num:\n                    num[num.index(val)] += 1\n                # Otherwise, add the number to the list.\n                else:\n                    num.append(val)\n        # Check the number of occurances in the list.\n        majority = num[num.index(max(num))]\n        # Find the first occurance of the majority element in the list.\n        for i, val in enumerate(num):\n            if val == majority:\n                return head[i]\n        return None",
      -11.8359375
    ],
    [
      "def majorityElement(arr):\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == arr[0]:\n            count += 1\n        else:\n            count -= 1\n            if count == 0:\n                return arr[i]\n\n# Test cases:\n# arr = [1, 2, 1, 1, 3, 5]\n# arr = [1, 1, 2, 3, 3, 3, 4]\n# arr = [1, 2, 3, 4, 5]\n# arr = [1, 2, 3, 3, 3, 4, 4, 4]\n# arr = [1, 2, 3, 4]\n# arr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 3, 3, 4, 4, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 3, 3, 4, 4, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4, 5]\narr",
      -12.078125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a boolean\n    def hasMajorityElement(self, head):\n        if not head:\n            return False\n        n = 0\n        while head:\n            n += 1\n            head = head.next\n        if n == 1:\n            return True\n        count = 0\n        while head:\n            if head.val == count:\n                count += 1\n            else:\n                count = 1\n            head = head.next\n        if count > n / 2:\n            return True\n        return False\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(1)\n    head.next.next.next = ListNode(2)\n    head.next.next.next.next = ListNode(2)\n    head.next.next.next.next.next = ListNode(2)\n    head.next.next.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next.next.next.",
      -13.8046875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = {}\n        for i in nums:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        majority_count = 0\n        for i in count:\n            if count[i] > majority_count:\n                majority_count = count[i]\n        return majority_count\n\n# Note:\n# https://leetcode.com/problems/majority-element/discuss/933/Python-solution-using-a-doubly-linked-list",
      -14.1796875
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == nums[i] and count == 0:\n                count += 1\n            elif nums[i] == nums[i] and count > 0:\n                count -= 1\n            else:\n                count = 0\n        if count > 0:\n            return nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[nums[",
      -14.546875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}