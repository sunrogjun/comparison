{
  "problem": {
    "task_id": "MBPP/364",
    "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
    "test_list": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ],
    "challenge_test_list": [],
    "problem_id": 353
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from __future__ import print_function\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    fptr = open(os.path.join(os.path.dirname(__file__), '..', '..', '..', '..', '..', 'data', 'flip_count.txt'), 'r')\n    flip_count = fptr.readlines()\n    fptr.close()\n    sys.exit(0)\n\n\ndef flip_count(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    string = string.lower()\n    string = ''.join(sorted(string))\n    return sum([ord(c) == ord(t) for c, t in zip(string, string[::-1])])\n\n\nif __name__ == \"__main__\":\n    flip_count('abc')",
      2.814453125
    ],
    [
      "import sys\n\n\ndef count_flips(s):\n    if s == \"\":\n        return 0\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n        else:\n            count += 2\n    return count\n\n\ndef main():\n    print(count_flips(sys.argv[1]))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.642578125
    ],
    [
      "import unittest\n\n__author__ = 'Daniel'\n\n\nclass Test(unittest.TestCase):\n\n    def test_flip_string(self):\n        self.assertEqual(flip_string(\"1010\"), 3)\n        self.assertEqual(flip_string(\"1011\"), 4)\n        self.assertEqual(flip_string(\"1110\"), 5)\n        self.assertEqual(flip_string(\"1101\"), 6)\n        self.assertEqual(flip_string(\"11110\"), 7)\n        self.assertEqual(flip_string(\"11110\"), 7)\n        self.assertEqual(flip_string(\"0111\"), 3)\n        self.assertEqual(flip_string(\"100100\"), 6)\n        self.assertEqual(flip_string(\"1010101\"), 6)\n\n    def test_flip_string_2(self):\n        self.assertEqual(flip_string_2(\"1010\"), 3)\n        self.assertEqual(flip_string_2(\"1011\"), 4)\n        self.assertEqual(flip_string_2(\"1110\"), 5)\n        self.assertEqual(flip_string_2(\"1101\"), 6)\n        self.assertEqual(flip_string_2(\"11110\"), 7)\n        self.assertEqual(flip_string_2(\"11110\"), 7)\n        self.assertEqual(flip_string_2(\"0111\"), 3)\n        self.assertEqual(flip_string_2(\"100100\"), 6)\n        self.assertEqual(flip_string_2(\"1010101\"), 6)\n\n    def test_flip_string_3(self):\n        self.assertEqual(flip_string_3(\"1010\"), 3)\n        self.assertEqual(flip_string_3(\"1011\"), 4)\n        self.assertEqual(flip_string_3(\"1110\"), 5)\n        self.assertEqual(flip_string_3(\"1101\"), 6)\n        self.assertEqual(flip_string_3(\"11110\"), 7)",
      0.01561737060546875
    ],
    [
      "def num_flips(string):\n    # write your code here\n    if not string:\n        return 0\n    flips = 0\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            flips += 1\n    return flips\n\nif __name__ == '__main__':\n    string
      -0.2286376953125
    ],
    [
      "#!/bin/python\n\n__author__ = 'Libao Jin'\n__date__ = 'December 13, 2015'\n\nclass Solution(object):\n    def numberOfAlternateChars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                count += 1\n            else:\n                count -= 1\n        return count\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.numberOfAlternateChars(\"10101\")",
      -0.65673828125
    ],
    [
      "class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return sum(bin(i).count('1') for i in num)\n\nif __name__ == '__main__':\n    print Solution().countBits('11')",
      -0.7138671875
    ],
    [
      "def flip_string(s):\n    if not s:\n        return 0\n    # s = '1111'\n    # flip_string('1111') == 6\n    # flip_string('1101') == 6\n    # flip_string('1011') == 4\n    # flip_string('0000') == 0\n    # flip_string('0011') == 3\n    # flip_string('1111') == 6\n    # flip_string('1101') == 6\n    # flip_string('1011') == 4\n    # flip_string('0000') == 0\n    # flip_string('0011') == 3\n    # flip_string('1111') == 6\n    # flip_string('1101') == 6\n    # flip_string('1011') == 4\n    # flip_string('0000') == 0\n    # flip_string('0011') == 3\n    # flip_string('1111') == 6\n    # flip_string('1101') == 6\n    # flip_string('1011') == 4\n    # flip_string('0000') == 0\n    # flip_string('0011') == 3\n    # flip_string('1111') == 6\n    # flip_string('1101') == 6\n    # flip_string('1011') == 4\n    # flip_string('0000') == 0\n    # flip_string('0011') == 3\n    # flip_string('1111') == 6\n    # flip_string('1101') == 6\n    # flip_string('1011') == 4\n    # flip_string('0000') == 0\n    # flip_string('0011') == 3\n    # flip_string('1111') == 6\n    # flip_string('1101') == 6\n    # flip_string('1011') == 4\n    # flip_string('0000') == 0\n    # flip_string('0011') == 3\n    # flip_string('1111') == 6\n    # flip_string('1101') == 6\n    # flip_string('1011') == 4\n    # flip_string('0000') == 0\n    # flip_string('0011') == 3\n    # flip_string('1111') == 6\n    # flip_string('1101') ==",
      -0.74609375
    ],
    [
      "class Solution(object):\n    def countBits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(1 for b in s)\n\nif __name__ == \"__main__\":\n    Solution().countBits(\"10110\")",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def numBitsToFlip(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        if not num:\n            return 0\n        if len(num) == 1:\n            return 1\n        return 2 + self.numBitsToFlip(num[1:])",
      -0.85791015625
    ],
    [
      "def count_flips(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count += 2\n    return count\n\nif __name__ == '__main__':\n    s = '101001101001'\n    print(count_flips(s))",
      -0.85791015625
    ],
    [
      "def find_flip_sequence(s):\n\tn = len(s)\n\tflip_sequence = 0\n\tfor i in range(0, n):\n\t\tif s[i] == '1':\n\t\t\tflip_sequence += 1\n\t\telse:\n\t\t\tflip_sequence += 2\n\treturn flip_sequence\n\nif __name__ == '__main__':\n\ts = '111011'\n\tprint(find_flip_sequence(s))",
      -0.85791015625
    ],
    [
      "#!/bin/python\n\ndef count_flips(str):\n    flips = 0\n    for i in range(len(str)):\n        if str[i] == '1':\n            flips += 1\n            str[i] = '0'\n        else:\n            flips += 1\n            str[i] = '1'\n    return flips\n\n# Sample Input:\n# \"1010\"\n# Output:\n# 3\n# Sample Input:\n# \"1101\"\n# Output:\n# 1\n# Sample Input:\n# \"1011\"\n# Output:\n# 0\n\ntest_cases = int(input())\nfor i in range(test_cases):\n    test = input().split()\n    flips = count_flips(test[0])\n    print(flips)",
      -0.85791015625
    ],
    [
      "class Solution:\n    def countBits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return bin(int(s, 2)).count(\"1\")\n\n# debug\na = Solution()\nprint(a.countBits(\"1\"))\nprint(a.countBits(\"11\"))\nprint(a.countBits(\"101\"))\nprint(a.countBits(\"111\"))",
      -0.85791015625
    ],
    [
      "class Solution:\n    \"\"\"\n    @param s: A binary string\n    @return: An integer\n    \"\"\"\n    def numBits(self, s):\n        res = 0\n        for i in range(len(s)):\n            res += len(s) - i\n            if s[i] == '0':\n                res += 1\n        return res\n\ns = Solution()\nprint s.numBits(\"10011\")",
      -0.85791015625
    ],
    [
      "def number_of_flips(string):\n\tcount = 0\n\tfor i in range(len(string)):\n\t\tif string[i] == '1':\n\t\t\tstring[i] = '0'\n\t\telse:\n\t\t\tstring[i] = '1'\n\t\tcount += 1\n\treturn count\n\nprint number_of_flips('110110101')",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def numBits(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        return len(binary) + 1\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.numBits(\"10100\"))\n    print(s.numBits(\"101001\"))\n    print(s.numBits(\"11010101\"))\n    print(s.numBits(\"110101010\"))",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\nimport os\nimport sys\n\ndef solution(binStr):\n    return len(binStr) - countAlternate(binStr)\n\ndef countAlternate(binStr):\n    count = 0\n    for i in xrange(len(binStr) - 1):\n        if binStr[i]!= binStr[i+1]:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    if (len(sys.argv)!= 2):\n        print \"Usage:./%s <bin_string>\" % os.path.basename(sys.argv[0])\n        sys.exit(1)\n    binStr = sys.argv[1]\n    print solution(binStr)",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def countBits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        return sum(self.countBits(s[1:])) + self.countBits(s[:-1])\n\n\nif __name__ == \"__main__\":\n    print Solution().countBits(\"11\")",
      -0.85791015625
    ],
    [
      "def count_flips(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i] == '1':\n            str[i] = '0'\n            count += 1\n        else:\n            str[i] = '1'\n    return count\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [\"1101\", 2],\n        [\"0101\", 3]\n    ]\n\n    for test in test_cases:\n        print \"Case #{}: {}\".format(test[0], count_flips(test[1]))",
      -0.85791015625
    ],
    [
      "# https://oj.leetcode.com/problems/flip-game/\n\nclass Solution(object):\n    def numFlips(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        if not isinstance(s, str):\n            s = str(s)\n        # count the number of flips required\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += 1\n                s[i] = '0'\n            elif s[i] == '0':\n                s[i] = '1'\n        return count\n\n# test\ns = Solution()\nassert s.numFlips('1011') == 2\nassert s.numFlips('1010') == 1\nassert s.numFlips('10110101') == 8\nassert s.numFlips('1010') == 1",
      -0.8583984375
    ],
    [
      "import unittest\n\n\nclass Solution:\n    def numAlternateCharStrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(s.count('1') - s.count('0') for s in self.alternate_string_solutions(s))\n\n    def alternate_string_solutions(self, s):\n        return [s[:i] + '1' + s[i:] for i in range(len(s)) if s[i]!= s[i - 1]]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/alternate-character-sequences/solution/\n# 1ms 100%\nclass Solution {\n    public int numAlternateCharStrings(String s) {\n        Map<Character, Integer> count = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            count.put(s.charAt(i), count.getOrDefault(s.charAt(i), 0) + 1);\n        }\n\n        int res = 0;\n        for (char c : s.toCharArray()) {\n            if (count.get(c) == 1) {\n                res++;\n            } else if (count.get(c) == 0) {\n                count.put(c, 1);\n            } else {\n                count.put(c, 0);\n            }\n        }\n        return res;\n    }\n}\n'''",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/alternate-binary-string\n\nimport sys\n\n# Complete the alternateBinary function below.\ndef alternateBinary(s):\n    return alternateBinaryHelper(s, 0, len(s) - 1)\n\ndef alternateBinaryHelper(s, i, j):\n    if i == j:\n        return 1\n    elif s[i] == s[j]:\n        return alternateBinaryHelper(s, i + 1, j - 1) + alternateBinaryHelper(s, i + 1, j)\n    else:\n        return alternateBinaryHelper(s, i + 1, j - 1) + alternateBinaryHelper(s, i, j - 1)\n\nif __name__ == '__main__':\n    s = sys.stdin.readline().strip()\n    s = list(map(int, s))\n    print(alternateBinary(s))",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return an integer\n    def numBits(self, s):\n        return sum(bin(ord(c)).count(\"1\") for c in s)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.numBits(\"10\"))",
      -0.8583984375
    ],
    [
      "def flip_count(string):\n    # Check if the string is all 0 or all 1\n    if string.count(\"1\") == string.count(\"0\"):\n        return 0\n    # Count the number of 1's and 0's\n    count = 0\n    for c in string:\n        if c == \"1\":\n            count += 1\n        elif c == \"0\":\n            count -= 1\n    return count\n\ndef main():\n    # Test case 1\n    print(flip_count(\"11100\"))\n    # Test case 2\n    print(flip_count(\"11000110101\"))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def find_flip_sequence(string):\n    return 0\n\nif __name__ == \"__main__\":\n    print(find_flip_sequence(\"11\"))\n    print(find_flip_sequence(\"10111\"))\n    print(find_flip_sequence(\"1101\"))\n    print(find_flip_sequence(\"110111\"))\n    print(find_flip_sequence(\"011101\"))\n    print(find_flip_sequence(\"01110111\"))\n    print(find_flip_sequence(\"11011101\"))\n    print(find_flip_sequence(\"1101110111\"))\n    print(find_flip_sequence(\"0111011101\"))\n    print(find_flip_sequence(\"011101110111\"))\n    print(find_flip_sequence(\"110111011101\"))\n    print(find_flip_sequence(\"11011101110111\"))\n    print(find_flip_sequence(\"01110111011101\"))\n    print(find_flip_sequence(\"0111011101110111\"))\n    print(find_flip_sequence(\"1101110111011101\"))\n    print(find_flip_sequence(\"110111011101110111\"))",
      -0.8583984375
    ],
    [
      "import sys\n\n\nclass Solution(object):\n    def numAlternateWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return self.numFlips(s)\n\n    def numFlips(self, s):\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += self.numFlips(s[i:])\n            else:\n                count += self.numFlips(s[:i] + s[i+1:])\n        return count\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.numAlternateWords(\"1010\")\n    s.numAlternateWords(\"1101\")\n    s.numAlternateWords(\"1011\")\n    s.numAlternateWords(\"1010\")\n    s.numAlternateWords(\"10001\")",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def numBits(self, s):\n        # @param {string} s\n        # @return {integer}\n        def numBits(s):\n            n = 0\n            for i in range(len(s)):\n                if s[i] == '1':\n                    n += 1\n                else:\n                    n -= 1\n            return n\n        return numBits(s)",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\nclass Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        if not num:\n            return 0\n        # print num\n        c = Counter(num)\n        res = 0\n        for i in range(len(num)):\n            for j in range(len(num)):\n                if num[i] == num[j]:\n                    if i == 0 or num[i - 1] == num[j - 1]:\n                        res += c[num[i]]\n                    else:\n                        res -= c[num[i]]\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.countBits(\"10011010010\")\n    print sol.countBits(\"10100101101\")",
      -0.8583984375
    ],
    [
      "def find_number_of_flips(string):\n    num_flips = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            string[i] = '0'\n        else:\n            string[i] = '1'\n    for i in range(len(string)):\n        if string[i] == '0':\n            string[i] = '1'\n        else:\n            string[i] = '0'\n    for i in range(len(string)):\n        if string[i] == '1':\n            num_flips += 1\n        else:\n            string[i] = '1'\n    return num_flips",
      -0.8583984375
    ],
    [
      "import time\nstart = time.time()\n\ndef alternate_sequence(string):\n    \"\"\"\n    string: A string of 0's and 1's.\n    Returns: An integer representing the number of flips required to make the string a sequence of alternate characters.\n    \"\"\"\n    \n    if len(string) == 1:\n        return 0\n    \n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i+1]:\n            count += 1\n        else:\n            count += 2\n    return count\n\nprint(alternate_sequence('10110101'))\n\nprint(time.time() - start)",
      -0.8583984375
    ],
    [
      "# Time:  O(n)\n# Space: O(n)\n\nclass Solution(object):\n    def numAlternateWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        if n == 0:\n            return 0\n        if s[0] == '0':\n            return 0\n        res = 1\n        for i in xrange(1, n):\n            if s[i]!= s[i-1]:\n                res += 1\n            if s[i] == '1':\n                res += 1\n        return res\n\nif __name__ == '__main__':\n    print Solution().numAlternateWords('0111')\n    print Solution().numAlternateWords('101')\n    print Solution().numAlternateWords('101')\n    print Solution().numAlternateWords('1010')\n    print Solution().numAlternateWords('1011')\n    print Solution().numAlternateWords('0010')\n    print Solution().numAlternateWords('0010')\n    print Solution().numAlternateWords('0001')",
      -0.8583984375
    ],
    [
      "from string import ascii_uppercase as uppercase\nfrom string import ascii_lowercase as lowercase\n\ndef num_flips(s):\n    return sum(1 for i in range(len(s)) if s[i]!= s[(i + 1) % len(s)])\n\ndef main():\n    print num_flips(\"1101\")\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def count_flips(string):\n    \"\"\"\n    >>> count_flips('101')\n    1\n    >>> count_flips('111')\n    2\n    >>> count_flips('1011')\n    3\n    \"\"\"\n    if len(string) == 1:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n            string[i] = '1'\n        elif string[i] == '1':\n            string[i] = '0'\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "import unittest\nimport sys\nsys.path.append(\"../\")\nfrom alternate_characters_flip_sequence import Solution\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        self.assertEqual(solution.alternateFlipSequence(\"10101\"), 3)\n\n    def test_2(self):\n        solution = Solution()\n        self.assertEqual(solution.alternateFlipSequence(\"1011\"), 2)\n\n    def test_3(self):\n        solution = Solution()\n        self.assertEqual(solution.alternateFlipSequence(\"11\"), 1)\n\n    def test_4(self):\n        solution = Solution()\n        self.assertEqual(solution.alternateFlipSequence(\"101\"), 0)\n\n    def test_5(self):\n        solution = Solution()\n        self.assertEqual(solution.alternateFlipSequence(\"10011\"), 3)\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -0.8583984375
    ],
    [
      "def flip(string):\n    if len(string) == 1:\n        return 0\n    else:\n        return len(string) - flip(string[1:])\n\ndef main():\n    test_cases = [\n        ('', 0),\n        ('1', 1),\n        ('11', 2),\n        ('101', 3),\n        ('10011', 5),\n        ('1010', 6),\n        ('10101', 7)\n    ]\n\n    for test in test_cases:\n        print('Case #{}: {}'.format(test[0], flip(test[1])))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def countBits(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        return self.countBits_1(binaryString)\n        \n    def countBits_1(self, binaryString):\n        return self.countBits_2(binaryString)\n        \n    def countBits_2(self, binaryString):\n        ret = 0\n        for i in xrange(len(binaryString)):\n            if binaryString[i] == '0':\n                ret += 1\n            else:\n                ret += (binaryString[i] == '1')\n        return ret\n\nif __name__ == '__main__':\n    print Solution().countBits('00110011')",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def numBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(32):\n            if n & (1 << i):\n                res += 1\n            else:\n                res += self.numBits(n & ~(1 << i))\n        return res\n\n    def numBits(self, n):\n        res = 0\n        while n:\n            res += 1\n            n >>= 1\n        return res",
      -0.8583984375
    ],
    [
      "def count_flips(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n            if i < len(s) - 1:\n                if s[i + 1] == '0':\n                    count += 1\n    return count\n\nif __name__ == '__main__':\n    s = '01010101'\n    print count_flips(s)",
      -0.8583984375
    ],
    [
      "def count_flips(str):\n\tflips = 0\n\tfor i in range(len(str)):\n\t\tif str[i] == str[i-1]:\n\t\t\tflips += 1\n\t\telse:\n\t\t\tflips += 2\n\treturn flips\n\ndef main():\n\ttest_cases = [\n\t\t('00', 2),\n\t\t('101', 3),\n\t\t('100100', 4),\n\t\t('01010101', 8)\n\t]\n\tfor test_case in test_cases:\n\t\tprint('Case #{}: {}'.format(test_case[0], count_flips(test_case[1])))\n\nif __name__ == '__main__':\n\tmain()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def numBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return bin(num).count(\"1\")\n\nif __name__ == \"__main__\":\n    print Solution().numBits(0b100101)\n    print Solution().numBits(0b1)\n    print Solution().numBits(0b1001010001)\n    print Solution().numBits(0b100000001)",
      -0.8583984375
    ],
    [
      "import unittest\n\n# @include\ndef number_of_flips(s):\n    n = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '1':\n            n += 1\n            i += 1\n        else:\n            n += 2\n            i += 1\n    return n\n# @exclude\n\n\nclass Test(unittest.TestCase):\n    def test_number_of_flips(self):\n        self.assertEqual(number_of_flips('0111'), 2)\n        self.assertEqual(number_of_flips('11'), 1)\n        self.assertEqual(number_of_flips('10011'), 1)\n        self.assertEqual(number_of_flips('0011'), 3)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.8583984375
    ],
    [
      "def getAlternateCount(s):\n    c = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            c += 1\n        else:\n            c -= 1\n    return c\n\ndef getAlternateCount_recursive(s):\n    if len(s) == 1:\n        return 0\n    c = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            c += 1\n        else:\n            c -= 1\n    return c\n\nif __name__ == '__main__':\n    s = '0101'\n    print getAlternateCount(s)\n    print getAlternateCount_recursive(s)",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/flip-game/\n\n# O(n) time and O(n) space\nclass Solution(object):\n    def numAlternateWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # O(n) time and O(n) space\n        if not s:\n            return 0\n\n        # O(n) time and O(n) space\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                count += 1\n            elif s[i] == '1':\n                count += -1\n        return count\n\n# O(n) time and O(1) space\nclass Solution2(object):\n    def numAlternateWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # O(n) time and O(n) space\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                count += 1\n                if s[i+1] == '0':\n                    count += -1\n                if s[i+1] == '1':\n                    count += 1\n                if s[i+1] == '0':\n                    count += -1\n                if s[i+1] == '1':\n                    count += 1\n            elif s[i] == '1':\n                count += -1\n        return count\n\nif __name__ == '__main__':\n    print Solution().numAlternateWords(\"1010\")\n    print Solution().numAlternateWords(\"0101\")\n    print Solution().numAlternateWords(\"11100\")\n    print Solution().numAlternateWords(\"110000\")",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return self.countBits_python(num)\n\n    def countBits_python(self, num):\n        n = len(num)\n        count = 0\n        for i in range(n):\n            count += num[i] * pow(2, n - i - 1)\n        return count\n\n    def countBits_c(self, num):\n        return self.countBits_c(num, 0)\n\n    def countBits_c(self, num, start):\n        n = len(num)\n        count = 0\n        for i in range(start, n):\n            count += num[i] * pow(2, n - i - 1)\n        return count",
      -0.8583984375
    ],
    [
      "# Definition for a binary string.\n# class BinaryString(object):\n#     def __init__(self, s):\n#         \"\"\"\n#         Args:\n#             s: A string, the characters of the binary string.\n#         \"\"\"\n#         self.s = s\n\nclass Solution(object):\n    def numBits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(bin(ord(x))[2:] for x in s)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def countBits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.countBits_recursive(nums, 0, len(nums)-1)\n\n    def countBits_recursive(self, nums, start, end):\n        if end < start:\n            return 0\n        res = 0\n        for i in range(start, end+1):\n            res += nums[i]*(end-i)\n        return res\n\n\nif __name__ == '__main__':\n    print Solution().countBits([0,1,1,1])\n    print Solution().countBits([1,0,1,1])\n    print Solution().countBits([1,1,1,0,1,1])",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return self.countBits2(num)\n\n    def countBits2(self, num):\n        count = 0\n        for i in range(len(num)):\n            if num[i] == '1':\n                count += 1\n            else:\n                count += 2\n        return count\n\n\nif __name__ == \"__main__\":\n    print Solution().countBits(\"1010101\")\n    print Solution().countBits(\"101010101\")\n    print Solution().countBits(\"10101010101\")",
      -0.8583984375
    ],
    [
      "# The function should return the number of flips required to make the given string a sequence of alternate characters.\n#\n# For example, the function should return 3 when given the string \"101\" (alternate 1,1,0),\n# and 4 when given the string \"110\" (alternate 1,0,1).\n#\n# Note:\n# The string size will not exceed 100.\n# The given string will only contain lowercase letters (a-z).\n#\n\n# Note:\n# The time complexity of the solution should be within O(n).\n#\n\nclass Solution(object):\n    def numBits(self, string):\n        \"\"\"\n        :type string: str\n        :rtype: int\n        \"\"\"\n        string = str(string)\n        return sum([ord(c) - ord('a') + 1 for c in string])\n\n    def countBits(self, string):\n        \"\"\"\n        :type string: str\n        :rtype: int\n        \"\"\"\n        string = str(string)\n        return int(bin(self.numBits(string)))\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.countBits(\"101\")\n    print solution.countBits(\"110\")\n    print solution.countBits(\"1101\")",
      -0.8583984375
    ],
    [
      "import sys\n\ndef find_flips(s):\n    flips = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            flips += 1\n            s[i] = '1'\n        elif s[i] == '1':\n            flips += 1\n            s[i] = '0'\n    return flips\n\nif __name__ == '__main__':\n    s = sys.argv[1]\n    print(find_flips(s))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def numFlips(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        res = 0\n        for i in xrange(len(s)):\n            if s[i] == '0':\n                res += 1\n                s[i] = '1'\n            else:\n                s[i] = '0'\n                res += -1\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.numFlips(\"1010011\")",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        :type cipher: str\n        :rtype: int\n        \"\"\"\n        flips = 0\n        for i in xrange(len(cipher)):\n            if cipher[i] == '1':\n                flips += 1\n                cipher[i] = '0'\n            else:\n                flips += 1\n                cipher[i] = '1'\n        return flips",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\nclass Solution:\n    def numAlternateChars(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        binary = ''.join(list(filter(lambda x: x in '01', binary)))\n        cnt = Counter(binary)\n        return len(cnt) - 1\n\n\nif __name__ == '__main__':\n    assert Solution().numAlternateChars('1011') == 1\n    assert Solution().numAlternateChars('10101') == 2\n    assert Solution().numAlternateChars('10101010') == 5\n    assert Solution().numAlternateChars('1011010101') == 8",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return sum(bin(int(x)).count('1') for x in num)",
      -0.8583984375
    ],
    [
      "from collections import Counter\nimport string\n\ndef count_alternate_characters(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    counter = Counter(s)\n    return sum(map(lambda x: 2**(len(x)-1)-1, counter.values()))\n\nif __name__ == \"__main__\":\n    print(count_alternate_characters(\"abcb\"))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def numBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return len(num) * (2 ** len(num) - 1) / 2\n\n    def findAlternateSequence(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return self.numBits(num)",
      -0.85888671875
    ],
    [
      "import sys\n\ndef flip(s):\n    return s[::-1]\n\ndef count_flips(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if flip(s[i:j]) == s[i:j]:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    n = int(sys.argv[1])\n    s = ''.join(map(str, range(n)))\n    print(count_flips(s))",
      -0.85888671875
    ],
    [
      "def count_flips(string):\n    flips = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            flips += 1\n            string[i] = '1'\n        else:\n            flips += 1\n            string[i] = '0'\n    return flips\n\nif __name__ == \"__main__\":\n    string = '0111'\n    print(count_flips(string))",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return sum(1 << (len(num) - 1 - i) for i in xrange(len(num)))",
      -0.85888671875
    ],
    [
      "# https://leetcode.com/problems/flip-bits/\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def numBitsToFlip(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        return self.flip_bits(binaryString)\n\n    def flip_bits(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        return self.flip_bits_rec(binaryString, 0)\n\n    def flip_bits_rec(self, binaryString, curr):\n        if curr == len(binaryString):\n            return 1\n        else:\n            if binaryString[curr] == '0':\n                return self.flip_bits_rec(binaryString, curr + 1)\n            else:\n                return self.flip_bits_rec(binaryString, curr) + self.flip_bits_rec(binaryString, curr + 1)",
      -0.85888671875
    ],
    [
      "def find_alternate_characters(binary_string):\n    # write your code here\n    return 0\n\nif __name__ == \"__main__\":\n    binary_string = \"11001\"\n    print find_alternate_characters(binary_string)\n    binary_string = \"1111\"\n    print find_alternate_characters(binary_string)\n    binary_string = \"101\"\n    print find_alternate_characters(binary_string)",
      -0.85888671875
    ],
    [
      "def count_flips(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        elif s[i] == '0':\n            count -= 1\n    return count\n\nif __name__ == '__main__':\n    s = '101000100'\n    print(count_flips(s))",
      -0.86083984375
    ],
    [
      "# https://leetcode.com/problems/find-the-number-of-flips-to-make-a-binary-string-alternate/\n# Example:\n# Input: \"11101\"\n# Output: 3\n# Explanation: The input string has three alternate characters: \"1\" and \"0\".\n# So the answer is 3.\n# Note:\n# The input string will have length in range [1, 50].\n# The input string may contain only lowercase letters and digits.\n\nclass Solution(object):\n    def numBits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        # base case\n        if len(s) == 1:\n            return 1\n        # base case\n        if len(s) == 2:\n            return 2\n        # base case\n        if len(s) == 3:\n            return 4\n        # base case\n        if len(s) == 4:\n            return 8\n        # base case\n        if len(s) == 5:\n            return 16\n        # base case\n        if len(s) == 6:\n            return 32\n        # base case\n        if len(s) == 7:\n            return 64\n        # base case\n        if len(s) == 8:\n            return 128\n        # base case\n        if len(s) == 9:\n            return 256\n        # base case\n        if len(s) == 10:\n            return 512\n        # base case\n        if len(s) == 11:\n            return 1024\n        # base case\n        if len(s) == 12:\n            return 2048\n        # base case\n        if len(s) == 13:\n            return 4096\n        # base case\n        if len(s) == 14:\n            return 8192\n        # base case\n        if len(s) == 15:\n            return 16384\n        # base case\n        if len(s) == 16:\n            return 32768\n        # base case\n        if len(s) == 17:\n            return 65536\n        # base case\n        if len(s) == 18:\n            return 131072",
      -1.005859375
    ],
    [
      "# https://www.codewars.com/kata/55a45f8c8dbe1aad3e000f00/train/python\ndef numberOfAlternateCharacters(string):\n    # Your code here\n    if string == \"\":\n        return 0\n    else:\n        return (len(string) - 1) * numberOfAlternateCharacters(string[0]) - numberOfAlternateCharacters(string[-1])",
      -1.5078125
    ],
    [
      "# https://leetcode.com/problems/flip-game/\n\nclass Solution(object):\n    def numFlips(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        n = len(binaryString)\n        cnt = 0\n        for i in range(n):\n            for j in range(i):\n                if binaryString[i] == binaryString[j]:\n                    cnt += 1\n                else:\n                    cnt += 2\n        return cnt\n\n\n    def numFlips_1(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        n = len(binaryString)\n        cnt = 0\n        for i in range(n):\n            for j in range(i):\n                if binaryString[i] == binaryString[j]:\n                    cnt += 1\n                else:\n                    if binaryString[i] == '1':\n                        binaryString[i] = '0'\n                    else:\n                        binaryString[i] = '1'\n                    cnt += 2\n        return cnt\n\n\n    def numFlips_2(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        n = len(binaryString)\n        cnt = 0\n        for i in range(n):\n            for j in range(i):\n                if binaryString[i] == binaryString[j]:\n                    cnt += 1\n                else:\n                    binaryString[i], binaryString[j] = binaryString[j], binaryString[i]\n                    cnt += 2\n        return cnt",
      -2.3984375
    ],
    [
      "class Solution(object):\n    def numBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return self.__numBits(num, 0)\n\n    def __numBits(self, num, i):\n        if i == len(num):\n            return len(num)\n        if i == len(num) - 1:\n            return 0\n        if num[i] == num[i + 1]:\n            return self.__numBits(num, i + 2)\n        else:\n            return self.__numBits(num, i + 1) + 1",
      -2.794921875
    ],
    [
      "# Definition for a binary string.\nclass BinaryString(object):\n    def __init__(self, binary_string):\n        \"\"\"\n        :type binary_string: str\n        \"\"\"\n        self.binary_string = binary_string\n        self.len = len(binary_string)\n\n    def count_flips(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in xrange(self.len - 1, -1, -1):\n            if self.binary_string[i] == self.binary_string[i + 1]:\n                count += 1\n            else:\n                count += 2\n        return count\n\n\nclass Solution(object):\n    def countBits(self, binary_string):\n        \"\"\"\n        :type binary_string: str\n        :rtype: int\n        \"\"\"\n        self.binary_string = binary_string\n        self.len = len(binary_string)\n        return self.count_flips()\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    test_case = \"110110111\"\n    print solution.countBits(test_case)",
      -3.349609375
    ],
    [
      "import unittest\n\ndef num_flips(str):\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 1\n    num_flips = 0\n    for i in range(len(str)):\n        if str[i] == '0':\n            num_flips += num_flips(str[:i])\n            num_flips += num_flips(str[i + 1:])\n    return num_flips\n\nclass Test(unittest.TestCase):\n    def test_num_flips(self):\n        self.assertEqual(num_flips(\"1010\"), 2)\n        self.assertEqual(num_flips(\"1011\"), 1)\n        self.assertEqual(num_flips(\"0011\"), 3)\n        self.assertEqual(num_flips(\"10001\"), 3)\n        self.assertEqual(num_flips(\"10101\"), 5)\n        self.assertEqual(num_flips(\"1010\"), 2)\n        self.assertEqual(num_flips(\"1011\"), 1)\n        self.assertEqual(num_flips(\"0011\"), 3)\n        self.assertEqual(num_flips(\"10001\"), 3)\n        self.assertEqual(num_flips(\"10101\"), 5)\n        self.assertEqual(num_flips(\"111111\"), 5)\n        self.assertEqual(num_flips(\"101111\"), 7)\n        self.assertEqual(num_flips(\"1010101\"), 7)\n        self.assertEqual(num_flips(\"11010101\"), 13)\n        self.assertEqual(num_flips(\"1101010101\"), 20)\n\nif __name__ == '__main__':\n    unittest.main()",
      -3.97265625
    ],
    [
      "import time\nfrom random import randint\n\nclass Solution(object):\n    def numAlternateCharStrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum(1 for i in range(len(s)) if s[i]!= s[i-1])\n\n    def numAlternateCharStrings2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return 1 + sum(1 for i in range(len(s)) if s[i]!= s[i-1])\n\n    def numAlternateCharStrings3(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return 1 + sum(1 for i in range(len(s)) if s[i]!= s[i-1] and s[i]!= s[i-2])\n\n    def numAlternateCharStrings4(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return 1 + sum(1 for i in range(len(s)) if s[i]!= s[i-1] and s[i]!= s[i-2] and s[i]!= s[i-3])\n\n    def numAlternateCharStrings5(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return 1 + sum(1 for i in range(len(s)) if s[i]!= s[i-1] and s[i]!= s[i-2] and s[i]!= s[i-3] and s[i]!= s[i-4])\n\n    def numAlternateCharStrings6(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return 1 + sum(1 for i in range(len(s)) if s[i]!= s[i-1] and s[i]!= s[i-2] and s[i]!= s[i-3] and s[i]!= s[i-4] and s[i]!= s",
      -5.125
    ],
    [
      "def count_flips(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            result += 1\n        else:\n            result += 2\n    return result\n\ndef count_flips_2(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            result += 1\n        else:\n            result += 2\n        if s[i] == s[i+2]:\n            result += 1\n        else:\n            result += 2\n    return result\n\ndef count_flips_3(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            result += 1\n        if s[i] == s[i+2]:\n            result += 1\n        if s[i] == s[i+3]:\n            result += 1\n        if s[i] == s[i+4]:\n            result += 1\n        if s[i] == s[i+5]:\n            result += 1\n        if s[i] == s[i+6]:\n            result += 1\n        if s[i] == s[i+7]:\n            result += 1\n        if s[i] == s[i+8]:\n            result += 1\n        if s[i] == s[i+9]:\n            result += 1\n        if s[i] == s[i+10]:\n            result += 1\n        if s[i] == s[i+11]:\n            result += 1\n        if s[i] == s[i+12]:\n            result += 1\n        if s[i] == s[i+13]:\n            result += 1\n        if s[i] == s[i+14]:\n            result += 1\n        if s[i] == s[",
      -5.3984375
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(num)):\n            if num[i] == '0':\n                count += 2 ** (len(num) - i - 1)\n        return count\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/count-binary-substrings/solution/\n#\nApproach 1: Count Bit\nComplexity Analysis\nTime Complexity: O(n), where n is the length of binary string.\nSpace Complexity: O(1)\n\n# 5ms 100%\nclass Solution {\n    public int countBits(String binary) {\n        int n = binary.length();\n        int[] counts = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            if (binary.charAt(i) == '0') counts[i] = 0;\n            else counts[i] = counts[i + 1] + 2;\n        }\n        return counts[n];\n    }\n}\n\nApproach 2: Binary Search\nComplexity Analysis\nTime Complexity: O(n), where n is the length of binary string.\nSpace Complexity: O(1)\n\n# 5ms 100%\nclass Solution {\n    public int countBits(String binary) {\n        int n = binary.length();\n        int[] counts = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            if (binary.charAt(i) == '0') counts[i] = 0;\n            else counts[i] = counts[i + 1] + 2;\n        }\n        return counts[n];\n    }\n}\n\nApproach 3: DFS\nComplexity Analysis\nTime Complexity: O(n), where n is the",
      -5.69921875
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def numberOfInversions(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += self.numberOfInversions(s[i + 1:])\n        return count\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\nThe solution is the number of inversions, and we can do it in O(n) time.\n\n# 2ms 100%\nclass Solution {\n    public int numberOfInversions(String s) {\n        int[] dp = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                int start = i + 1;\n                int end = i;\n                while (start < end) {\n                    int temp = s.charAt(start) - s.charAt(end);\n                    start++;\n                    end--;\n                    if (temp < 0) {\n                        end--;\n                    } else if (temp > 0) {\n                        start++;\n                    }\n                }\n                dp[i] = end - start;\n            }\n        }\n        return dp[s.length() - 1];\n    }\n}\n\n# 0ms 100%\nclass Solution {\n    public int numberOfInversions(String s) {\n        int[] dp = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                dp[i] = i;\n                int start = i + 1;\n                int end = i;\n                while (start < end) {\n                    int temp = s.charAt(start) - s.charAt(end);\n                    start++;\n                    end--",
      -6.53125
    ],
    [
      "class Solution(object):\n    def numBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        # n = len(num)\n        # return sum(1 for i in range(n) if num[i] == '0') + sum(1 for i in range(n) if num[i] == '1')\n        count = 0\n        for i in range(len(num)):\n            if num[i] == '1':\n                count += 1\n            elif num[i] == '0':\n                count -= 1\n        return count\n\n    def numBits2(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(num)):\n            if num[i] == '1':\n                count += 1\n            elif num[i] == '0':\n                count -= 1\n        return count\n\n    def numBits3(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(num)):\n            if num[i] == '1':\n                count += 1\n            elif num[i] == '0':\n                count -= 1\n            elif num[i] == '1':\n                count += 1\n            elif num[i] == '0':\n                count -= 1\n        return count\n\n    def numBits4(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(num)):\n            if num[i] == '1':\n                count += 1\n                if num[i - 1] == '0':\n                    count -= 1\n            elif num[i] == '0':\n                count -= 1\n                if num[i + 1] == '0':\n                    count += 1\n            elif num[i] == '1':\n                count -= 1\n                if num[i + 1] == '0':\n                    count += 1\n        return count\n\nif __name__",
      -6.5625
    ],
    [
      "def count_flips(string):\n    flips = 0\n    for i in range(len(string)):\n        if string[i] == string[(i + 1) % len(string)]:\n            flips += 1\n    return flips\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"1101\", 1),\n        (\"1001011\", 2),\n        (\"1001011\", 3),\n        (\"1001011\", 4),\n        (\"11010101\", 2),\n        (\"11010101\", 3),\n        (\"11010101\", 4),\n        (\"11010101\", 5),\n        (\"11010101\", 6),\n        (\"11010101\", 7),\n        (\"11010101\", 8),\n        (\"11010101\", 9),\n        (\"11010101\", 10),\n        (\"11010101\", 11),\n        (\"11010101\", 12),\n        (\"11010101\", 13),\n        (\"11010101\", 14),\n        (\"11010101\", 15),\n        (\"11010101\", 16),\n        (\"11010101\", 17),\n        (\"11010101\", 18),\n        (\"11010101\", 19),\n        (\"11010101\", 20),\n        (\"11010101\", 21),\n        (\"11010101\", 22),\n        (\"11010101\", 23),\n        (\"11010101\", 24),\n        (\"11010101\", 25),\n        (\"11010101\", 26),\n        (\"11010101\", 27),\n        (\"11010101\", 28),\n        (\"11010101\", 29),\n        (\"11010101\", 30),\n        (\"11010101\", 31),\n        (\"11010101\", 32),\n        (\"11010101\", 33),\n        (\"11010101\", 34),\n        (\"11010101\", 35),\n        (\"11010101\", 36),\n        (\"11010101\", 37),\n        (\"11010101\", 38),\n        (\"11010101\", 39),\n        (\"11010101\", 40),\n        (\"11010101\", 41),",
      -6.76171875
    ],
    [
      "# Definition for binary string.\nclass binary(object):\n    def __init__(self, s):\n        \"\"\"\n        :type s: str\n        \"\"\"\n        self.s = s\n\n    def __repr__(self):\n        return self.s\n\nclass Solution(object):\n    def numAlternateCharacter(self, s):\n        \"\"\"\n        :type s: binary\n        :rtype: int\n        \"\"\"\n        # s.s.split()\n        n = len(s.s)\n        cnt = 0\n        for i in xrange(n):\n            if s.s[i] == '0':\n                cnt += 1\n            else:\n                if i > 0 and s.s[i-1] == '1':\n                    cnt += 1\n                if i < n-1 and s.s[i+1] == '1':\n                    cnt += 1\n        return cnt",
      -6.984375
    ],
    [
      "import sys\n\n\nclass Solution(object):\n    def flip(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i in range(len(num)):\n            if num[i] == '0':\n                ret += 1\n            else:\n                num[i] = '1'\n                ret += self.flip(num[:i])\n                num[i] = '0'\n                ret += self.flip(num[i + 1:])\n        return ret\n\n    def flip_flop(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i in range(len(num)):\n            if num[i] == '0':\n                num[i] = '1'\n                ret += self.flip_flop(num[:i])\n                num[i] = '0'\n                ret += self.flip_flop(num[i + 1:])\n        return ret\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.flip('11010101111000111')\n    print solution.flip_flop('11010101111000111')\n    print solution.flip('11010101111000111')\n    print solution.flip_flop('11010101111000111')\n    print solution.flip('11010101111000111')\n    print solution.flip_flop('11010101111000111')\n    print solution.flip('11010101111000111')\n    print solution.flip_flop('11010101111000111')\n    print solution.flip('11010101111000111')\n    print solution.flip_flop('11010101111000111')\n    print solution.flip('11010101111000111')\n    print solution.flip_flop('11010101111000111')\n    print solution.flip('11010101111000111')\n    print solution.",
      -7.02734375
    ],
    [
      "class Solution(object):\n    def countBits(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        return self.countBits_helper(binaryString, 0)\n\n    def countBits_helper(self, binaryString, count):\n        if len(binaryString) == 0:\n            return count\n        if len(binaryString) == 1:\n            return self.countBits_helper(binaryString[0], count + 1)\n        if binaryString[0] == '0':\n            return self.countBits_helper(binaryString[1:], count)\n        else:\n            return self.countBits_helper(binaryString[1:], count) + self.countBits_helper(binaryString[0], count)\n\n    def countBits_DP(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        n = len(binaryString)\n        dp = [0] * (n + 1)\n        for i in range(n + 1):\n            dp[i] = 1 if binaryString[i] == '1' else 0\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + dp[i]\n        return dp[-1]\n\n    def countBits_DP_2(self, binaryString):\n        \"\"\"\n        :type binaryString: str\n        :rtype: int\n        \"\"\"\n        n = len(binaryString)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = 1 if binaryString[i - 1] == '1' else 0\n            dp[i] += dp[i - 1]\n            dp[i] += dp[i - 2] if i > 2 else 0\n        return dp[-1]\n\nif __name__ == '__main__':\n    print(Solution().countBits(\"11101\"))",
      -7.1171875
    ],
    [
      "import unittest\nfrom typing import List\n\nclass Solution(object):\n    def numAlternateChars(self, s: str) -> int:\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # the idea is to keep track of the number of alternates of a given character\n        # when the number of alternates is 0, we need to keep track of the number of\n        # characters until we find a non-zero number of alternates\n        # when the number of alternates is 1, we can just check the next character\n        # when the number of alternates is 2, we need to check the next two characters\n        #...and so on\n        # the general idea is to keep track of the number of alternates of a given\n        # character and keep track of the number of characters until we find a non-zero\n        # number of alternates.\n        # the trick is to keep track of the number of characters until we find a non-zero\n        # number of alternates\n        # when the number of alternates is 1, we can just check the next character\n        # when the number of alternates is 2, we need to check the next two characters\n        #...and so on\n        # we can use a map to keep track of the number of alternates of a given character\n        # and keep track of the number of characters until we find a non-zero number of alternates\n        # the trick is to keep track of the number of characters until we find a non-zero\n        # number of alternates\n        # when the number of alternates is 1, we can just check the next character\n        # when the number of alternates is 2, we need to check the next two characters\n        #...and so on\n        # we can use a map to keep track of the number of alternates of a given character\n        # and keep track of the number of characters until we find a non-zero number of alternates\n        # the trick is to keep track of the number of characters until we find a non-zero\n        # number of alternates\n        # when the number of alternates is 1, we can just check the next character\n        # when the number of alternates is 2, we need to check the next two characters\n        #...and so on",
      -7.375
    ],
    [
      "# https://leetcode.com/problems/alternate-permutation/\n\n# 1. use two pointers to go through the string,\n# 2. keep track of the number of times a character is flipped\n# 3. keep track of the number of times a character is flipped twice\n# 4. keep track of the number of times a character is flipped three times\n# 5. keep track of the number of times a character is flipped four times\n# 6. keep track of the number of times a character is flipped five times\n# 7. keep track of the number of times a character is flipped six times\n# 8. keep track of the number of times a character is flipped seven times\n# 9. keep track of the number of times a character is flipped eight times\n# 10. keep track of the number of times a character is flipped nine times\n# 11. keep track of the number of times a character is flipped ten times\n# 12. keep track of the number of times a character is flipped eleven times\n# 13. keep track of the number of times a character is flipped twelve times\n# 14. keep track of the number of times a character is flipped thirteen times\n# 15. keep track of the number of times a character is flipped fourteen times\n# 16. keep track of the number of times a character is flipped fifteen times\n# 17. keep track of the number of times a character is flipped sixteen times\n# 18. keep track of the number of times a character is flipped seventeen times\n# 19. keep track of the number of times a character is flipped eighteen times\n# 20. keep track of the number of times a character is flipped nineteen times\n# 21. keep track of the number of times a character is flipped twenty-one times\n# 22. keep track of the number of times a character is flipped twenty-two times\n# 23. keep track of the number of times a character is flipped twenty-three times\n# 24. keep track of the number of times a character is flipped twenty-four times\n# 25. keep track of the number of times a character is flipped twenty-five times\n# 26. keep track of the number of times a character is flipped twenty-six times\n# 27. keep track of the number of times a character is flipped twenty-seven times\n# 28. keep track of the number of times a character is flipped twenty-eight times\n# 29. keep track of",
      -8.28125
    ],
    [
      "def number_of_flips(bin_str):\n\tnum_flips = 0\n\tfor i in range(len(bin_str)):\n\t\tif bin_str[i] == '0':\n\t\t\tnum_flips += 1\n\t\telse:\n\t\t\tnum_flips += 2\n\treturn num_flips\n\nif __name__ == '__main__':\n\t# Test cases\n\ttest_cases = [('1011', 3), ('11100', 5), ('011101', 5)]\n\tfor test in test_cases:\n\t\tprint(\"Number of flips for\", test[0], \"->\", number_of_flips(test[0]))",
      -8.3828125
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @return {integer}\n    def numBits(self, s):\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if s[0] == '1':\n            return self.numBits(s[1:])\n        if s[-1] == '1':\n            return self.numBits(s[:-1])\n        if s[0] == '0':\n            return self.numBits(s[1:])\n        if s[-1] == '0':\n            return self.numBits(s[:-1])\n        return self.numBits(s[1:-1]) + 1\n\n    def numBits(self, s):\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if s[0] == '1':\n            return self.numBits(s[1:])\n        if s[-1] == '1':\n            return self.numBits(s[:-1])\n        if s[0] == '0':\n            return self.numBits(s[1:])\n        if s[-1] == '0':\n            return self.numBits(s[:-1])\n        return self.numBits(s[1:-1]) + 1\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.numBits('0011'))\n    print(sol.numBits('1111'))\n    print(sol.numBits('10011'))\n    print(sol.numBits('10101'))\n    print(sol.numBits('101100'))\n    print(sol.numBits('111111'))\n    print(sol.numBits('11111111'))\n    print(sol.numBits('1111111111111111'))\n    print(sol.numBits('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      -8.8515625
    ],
    [
      "def count_flips(string):\n    flips = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            flips += 1\n            string[i] = '0'\n        else:\n            string[i] = '1'\n    return flips\n\nif __name__ == '__main__':\n    s
      -8.984375
    ],
    [
      "from collections import Counter\n\ndef count_flips(string):\n    \"\"\"\n    string: a binary string\n    \"\"\"\n    return sum(1 for _ in string) - Counter(string).values()\n\ndef test_count_flips():\n    assert count_flips('') == 0\n    assert count_flips('11') == 0\n    assert count_flips('10111') == 1\n    assert count_flips('110111') == 3\n    assert count_flips('1101') == 1\n    assert count_flips('11011101') == 5\n    assert count_flips('11011110101') == 6\n    assert count_flips
      -9.3125
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n    def numFlips(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        s = list(s)\n        flip_count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                flip_count += 1\n                s[i] = '0'\n            elif s[i] == '0':\n                flip_count += 1\n                s[i] = '1'\n        return flip_count\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/number-of-flips-to-make-string-alternate/solution/\n\n# 1ms 100%\nclass Solution {\n    public int numFlips(String s) {\n        int len = s.length();\n        int flips = 0;\n\n        for (int i = 0; i < len; i++) {\n            if (s.charAt(i) == '1') {\n                flips += 1;\n                s = s.substring(0, i) + \"0\" + s.substring(i + 1);\n            } else if (s.charAt(i) == '0') {\n                flips += 1;\n                s = s.substring(0, i) + \"1\" + s.substring(i + 1);\n            }\n        }\n        return flips;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int numFlips(String s) {\n        int len = s.length();\n        int flips = 0;\n\n        for (int i = 0; i < len; i++) {\n            if (s.charAt(i) == '1') {\n                flips += 1;\n                s = s.substring(0, i) + \"0\" + s.substring(i + 1);\n            } else",
      -9.390625
    ],
    [
      "class Solution(object):\n    def numAlternateWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return self.numAlternateWords1(s)\n    \n    def numAlternateWords1(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return self.numAlternateWords2(s)\n    \n    def numAlternateWords2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return self.numAlternateWords3(s)\n    \n    def numAlternateWords3(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        n = len(s)\n        #print s\n        count = 0\n        for i in xrange(n):\n            if s[i] == s[n-1-i]:\n                count += 1\n            else:\n                n -= 1\n        return count\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.numAlternateWords(\"11\")\n    print s.numAlternateWords(\"1010\")\n    print s.numAlternateWords(\"1010101\")\n    print s.numAlternateWords(\"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
      -10.7890625
    ],
    [
      "import unittest\nimport sys\nimport os\n\nclass Test(unittest.TestCase):\n    def test_flip_bit(self):\n        self.assertEqual(flip_bit('0'), 0)\n        self.assertEqual(flip_bit('1'), 1)\n        self.assertEqual(flip_bit('1011'), 2)\n        self.assertEqual(flip_bit('10111'), 3)\n        self.assertEqual(flip_bit('11111'), 4)\n        self.assertEqual(flip_bit('101010101'), 8)\n        self.assertEqual(flip_bit('101010111'), 9)\n        self.assertEqual(flip_bit('101011011'), 10)\n        self.assertEqual(flip_bit('101011101'), 11)\n        self.assertEqual(flip_bit('101011110'), 12)\n        self.assertEqual(flip_bit('101011111'), 13)\n        self.assertEqual(flip_bit('1011'), 14)\n        self.assertEqual(flip_bit('1011'), 15)\n        self.assertEqual(flip_bit('10111'), 16)\n        self.assertEqual(flip_bit('1010111'), 17)\n        self.assertEqual(flip_bit('10101101'), 18)\n        self.assertEqual(flip_bit('101011110'), 19)\n        self.assertEqual(flip_bit('1010111110'), 20)\n        self.assertEqual(flip_bit('1010111111'), 21)\n        self.assertEqual(flip_bit('101110111'), 22)\n        self.assertEqual(flip_bit('101111011'), 23)\n        self.assertEqual(flip_bit('1011110110'), 24)\n        self.assertEqual(flip_bit('10111101110'), 25)\n        self.assertEqual(flip_bit('10111101111'), 26)\n        self.assertEqual(flip_bit('1011111011'), 27",
      -10.9765625
    ],
    [
      "from collections import Counter\n\ndef count_flips(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(Counter(s).values())\n\nif __name__ == '__main__':\n    assert count_flips('0101') == 1\n    assert count_flips('1010') == 0\n    assert count_flips('1011') == 2\n    assert count_flips('0000') == 0\n    assert count_flips('0011') == 2\n    assert count_flips('1101') == 1\n    assert count_flips('0110') == 2\n    assert count_flips('1110') == 1\n    assert count_flips('1101') == 1\n    assert count_flips('1010') == 0\n    assert count_flips('1011') == 2\n    assert count_flips('0000') == 0\n    assert count_flips('0011') == 2\n    assert count_flips('1101') == 1\n    assert count_flips('0110') == 2\n    assert count_flips('1110') == 1\n    assert count_flips('1101') == 1\n    assert count_flips('1010') == 0\n    assert count_flips('1011') == 2\n    assert count_flips('0000') == 0\n    assert count_flips('0011') == 2\n    assert count_flips('1101') == 1\n    assert count_flips('0110') == 2\n    assert count_flips('1110') == 1\n    assert count_flips('1101') == 1\n    assert count_flips('1010') == 0\n    assert count_flips('1011') == 2\n    assert count_flips('0000') == 0\n    assert count_flips('0011') == 2\n    assert count_flips('1101') == 1\n    assert count_flips('0110') == 2\n    assert count_flips('1110') == 1\n    assert count_flips('1101') == 1\n    assert count_flips('1010') == 0\n    assert count_flips('1011') == 2\n    assert",
      -11.109375
    ],
    [
      "def count_flips(string):\n\tflips = 0\n\tfor i in range(len(string)):\n\t\tif string[i] == string[(i + 1) % len(string)]:\n\t\t\tflips += 1\n\t\telse:\n\t\t\tflips += 2\n\treturn flips\n\nif __name__ == \"__main__\":\n\tprint(count_flips(\"1010\"))\n\tprint(count_flips(\"10101\"))\n\tprint(count_flips(\"10101010\"))\n\tprint(count_flips
      -11.203125
    ],
    [
      "def count_flips(string):\n    return len(string) - len(string.replace('0', '1'))\n\n\nassert count_flips(\"0000\") == 0\nassert count_flips(\"0110\") == 1\nassert count_flips(\"1011\") == 2\nassert count_flips(\"1111\") == 3\nassert count_flips(\"1101\") == 2\nassert count_flips(\"10111\") == 2\nassert count_flips(\"11111\") == 3\nassert count_flips(\"11111\") == 4\nassert count_flips(\"11111\") == 5\nassert count_flips(\"11111\") == 6\nassert count_flips(\"11111\") == 7\nassert count_flips(\"11111\") == 8\nassert count_flips(\"11111\") == 9\nassert count_flips(\"11111\") == 10\nassert count_flips(\"11111\") == 11\nassert count_flips(\"11111\") == 12\nassert count_flips(\"11111\") == 13\nassert count_flips(\"11111\") == 14\nassert count_flips(\"11111\") == 15\nassert count_flips(\"11111\") == 16\nassert count_flips(\"11111\") == 17\nassert count_flips(\"11111\") == 18\nassert count_flips(\"11111\") == 19\nassert count_flips(\"11111\") == 20\nassert count_flips(\"11111\") == 21\nassert count_flips(\"11111\") == 22\nassert count_flips(\"11111\") == 23\nassert count_flips(\"11111\") == 24\nassert count_flips(\"11111\") == 25\nassert count_flips(\"11111\") == 26\nassert count_flips(\"11111\") == 27\nassert count_flips(\"11111\") == 28\nassert count_flips(\"11111\") == 29\nassert count_flips(\"11111\") == 30\nassert count_flips(\"11111\") == 31\nassert count_flips(\"11111\") == 32\nassert count_flips(\"11111\") == 33\nassert count_flips(\"11111\") == 34\nassert count_flips(\"11111\") == 35\nassert count_flips(\"11111\") == 36\nassert count_",
      -11.921875
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def numBits(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        binary = \"0\" + binary\n        num_bits = len(binary)\n        num_bits = num_bits - 1\n        count = 0\n        while len(binary) > 0:\n            while binary[0] == \"0\":\n                binary = binary[1:]\n            while binary[-1] == \"0\":\n                binary = binary[:-1]\n            count += 1\n        return count\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/alternate-permutation/solution/\n#\nApproach 1: Brute Force [Accepted]\nComplexity Analysis\nTime Complexity: O(N)\nSpace Complexity: O(N)\n\n# 21ms 95.86%\nclass Solution {\n    public int numBits(String binary) {\n        int N = binary.length();\n        int count = 0;\n        for (int i = 0; i < N; i++) {\n            while (binary.charAt(i) == '0') {\n                binary = binary.substring(0, i) + binary.substring(i + 1);\n                i--;\n            }\n            while (binary.charAt(i) == '1') {\n                binary = binary.substring(0, i) + binary.substring(i + 1);\n                i--;\n            }\n            count++;\n        }\n        return count;\n    }\n}\n\nApproach 2: DP [Accepted]\nComplexity Analysis\nTime Complexity: O(N)\nSpace Complexity: O(N)\n\n# 2ms 100%\nclass Solution {\n    public int numBits(String binary) {\n        int N = binary.length();\n        int[] count = new int[N + 1];\n        count[0] =",
      -11.9453125
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def numAlternateCharacter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                count += 1\n            else:\n                count -= 1\n        return count\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/alternate-permutation/solution/\n#\nApproach #1: Count the number of alternate characters\nComplexity Analysis\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n# 12ms 100%\nclass Solution {\n    public int numAlternateCharacter(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '0') {\n                count++;\n            } else {\n                count--;\n            }\n        }\n        return count;\n    }\n}\n\n# 12ms 100%\nclass Solution {\n    public int numAlternateCharacter(String s) {\n        int[] counts = new int[128];\n        for (char c : s.toCharArray()) {\n            counts[c]++;\n        }\n        int count = 0;\n        for (int i = 0; i < counts.length; i++) {\n            if (counts[i] % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n# 12ms 100%\nclass Solution {\n    public int numAlternateCharacter(String s) {\n        int[] counts = new int[128];\n        for (char c : s.toCharArray()) {\n            counts[c]++;\n        }\n        int count = 0;\n        for (int i = 0; i < counts.length; i++) {",
      -11.96875
    ],
    [
      "# @include\ndef count_flips(s: str) -> int:\n    # Counts the number of flips required to make the given string a sequence of alternate characters.\n    n = len(s)\n    return sum(bin(ord(c) - ord(s[i])).count('1') for i, c in enumerate(s))\n# @exclude\n\n\nif __name__ == '__main__':\n    assert count_flips('1') == 1\n    assert count_flips('101') == 0\n    assert count_flips('01010101') == 2\n    assert count_flips('101101010101') == 1\n    assert count_flips
      -12.2890625
    ],
    [
      "# https://oj.leetcode.com/problems/flip-game/\n# https://oj.leetcode.com/discuss/48/how-to-implement-a-flip-game-with-flip-board-in-python\n# https://oj.leetcode.com/discuss/1025/solution-using-a-flip-board-and-numpy\n# https://oj.leetcode.com/discuss/1032/numpy-solution-with-explanation\n\nclass Solution(object):\n    def numAlternate(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        if not binary:\n            return 0\n\n        # flip the last one, and use the last one as a starting point\n        return self.flip(binary, binary[-1]) + self.flip(binary, binary[-2]) + self.flip(binary, binary[-3])\n\n    def flip(self, binary, char):\n        if char == '0':\n            return 0\n        elif char == '1':\n            return 1\n        else:\n            return 2\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.numAlternate('1101'))\n    print(s.numAlternate('11001'))\n    print(s.numAlternate('10101'))\n    print(s.numAlternate('110101'))\n    print(s.numAlternate('1100101'))",
      -12.921875
    ],
    [
      "def count_flips(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n\nif __name__ == '__main__':\n    assert count_flips(\"10101\") == 4\n    assert count_flips(\"1101\") == 2\n    assert count_flips(\"10011\") == 3\n    assert count_flips(\"11101\") == 4\n    assert count_flips(\"1010111010111101\") == 7\n    assert count_flips(\"1101\") == 2\n    assert count_flips(\"110111010111101\") == 7\n    assert count_flips(\"1010111010111101\") == 7",
      -13.140625
    ],
    [
      "#!/usr/bin/python\n\n\"\"\"\nA sequence is a string of alternating characters.\n\"\"\"\n\nclass Solution:\n    # @param {string} s\n    # @return {integer}\n    def numBits(self, s):\n        if s == \"1\":\n            return 1\n\n        count = 0\n        for c in s:\n            if c == \"1\":\n                count += 1\n            else:\n                count -= 1\n\n        return count\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.numBits(\"1010\")\n    print s.numBits(\"100110110\")",
      -13.375
    ],
    [
      "def find_alternate_sequence(bin_string):\n    \"\"\"\n    :type bin_string: str\n    :rtype: int\n    \"\"\"\n    n = len(bin_string)\n    if n == 0:\n        return 0\n    bin_string = bin_string.replace('0', '1')\n    return bin_string.count('1') + bin_string.count('0') - 1\n\nif __name__ == '__main__':\n    assert find_alternate_sequence('1010') == 4\n    assert find_alternate_sequence('1010') == 4\n    assert find_alternate_sequence('1101') == 4\n    assert find_alternate_sequence('1101') == 4\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence('10110101') == 9\n    assert find_alternate_sequence",
      -13.5234375
    ],
    [
      "# https://leetcode.com/problems/count-of-one-bits/\n\nclass Solution(object):\n    def countBits(self, binary):\n        \"\"\"\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in xrange(len(binary)):\n            res += bin(ord(binary[i]) ^ ord('1'))[2:]\n        return res\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.countBits('01')\n    print solution.countBits('11')\n    print solution.countBits('111')\n    print solution.countBits('01010101')\n    print solution.countBits('10101')\n    print solution.countBits
      -13.5546875
    ],
    [
      "# https://oj.leetcode.com/problems/flip-game/\n\n\nclass Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        # print num\n        # print ''.join('1' if c == '1' else '0' for c in num)\n        # print ''.join('1' if c == '1' else '0' for c in num)\n        return self.count_bits(num)\n\n    def count_bits(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        return sum(bin(ord(x))[2:] == bin(ord(y))[2:] for x, y in zip(num, num[1:]))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    # print s.countBits('101')\n    # print s.countBits('10101')\n    # print s.countBits
      -14.21875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    # @param {string} s\n    # @return {integer}\n    def numTrees(self, s):\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        result = 0\n        for i in range(2, len(s)+1):\n            for j in range(0, i):\n                if s[j] == s[i-j-1]:\n                    result += self.find(s, j, i)\n        return result\n        \n    def find(self, s, start, end):\n        if start == end:\n            return 1\n        \n        if start == end-1:\n            return 0\n        \n        mid = start + (end - start)/2\n        result = self.find(s, start, mid) + self.find(s, mid+1, end)\n        \n        return result\n\ns = Solution()\nprint s.numTrees(\"11\")",
      -15.234375
    ],
    [
      "import unittest\nimport sys\n\n# Time:  O(n)\n# Space: O(1)\n#\n# The given string s is a sequence of 1s and 0s. The function should return the number of 1s in s,\n# the number of 0s in s, and the number of 1s and 0s that appear in s.\n#\n# Example 1:\n# Input: \"10100\"\n# Output: 3\n# Explanation: The string can be interpreted as \"1011 001\", which means there are three 1s and three 0s.\n#\n# Example 2:\n# Input: \"1010\"\n# Output: 3\n# Explanation: The string can be interpreted as \"1011 001\", which means there are three 1s and three 0s.\n#\n# Example 3:\n# Input: \"101\"\n# Output: 2\n# Explanation: The string can be interpreted as \"1011 001\", which means there are three 1s and three 0s.\n#\n# Example 4:\n# Input: \"11100\"\n# Output: 4\n# Explanation: The string can be interpreted as \"1011 001\", which means there are three 1s and three 0s.\n#\n# Example 5:\n# Input: \"1110\"\n# Output: 3\n# Explanation: The string can be interpreted as \"1011 001\", which means there are three 1s and three 0s.\n#\n# Note:\n# The length of s will be in the range [1, 50,000].\n# The string s consists of only digits 0 or 1.\n\nclass Solution(object):\n    def numBits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        s = list(s)\n        return sum(self.numBits_fast(s[:i], s[i:]) for i in range(len(s)))\n\n    def numBits_fast(self, a, b):\n        return sum(1 for _ in range(len(a)) if a[i] == b[i])\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1",
      -16.890625
    ],
    [
      "class Solution(object):\n    def countBits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return self.countBits_recursive(s)\n\n    def countBits_recursive(self, s):\n        if len(s) == 0:\n            return 0\n        else:\n            return (self.countBits_recursive(s[1:]) + self.countBits_recursive(s[:-1])) % 2\n\n    def countBits_dp(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        if n == 0:\n            return 0\n\n        ret = 0\n        for i in range(n):\n            ret += self.countBits_dp(s[:i] + s[i+1:])\n\n        return ret\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.countBits(\"10110001\"))\n    print(s.countBits(\"10110001100100\"))",
      -16.90625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}