{
  "problem": {
    "task_id": "MBPP/448",
    "prompt": "Write a function to calculate the sum of perrin numbers.",
    "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
    "test_list": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ],
    "challenge_test_list": [],
    "problem_id": 437
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def perrin_sum(n):\n    if n < 1:\n        return 0\n    else:\n        return sum([(n * (n + 1)) / 2 for n in range(1, n + 1)])\n\nprint(perrin_sum(100))",
      1.6875
    ],
    [
      "def perrin_sums(n):\n    return sum(i for i in range(n+1) if i % 10 == 0)\n\nif __name__ == \"__main__\":\n    print(perrin_sums(5))",
      1.5693359375
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    >>> perrin_sum(1)\n    0\n    >>> perrin_sum(2)\n    1\n    >>> perrin_sum(3)\n    3\n    >>> perrin_sum(4)\n    7\n    >>> perrin_sum(5)\n    13\n    >>> perrin_sum(6)\n    21\n    >>> perrin_sum(7)\n    28\n    >>> perrin_sum(8)\n    35\n    >>> perrin_sum(9)\n    42\n    >>> perrin_sum(10)\n    50\n    \"\"\"\n    return sum(map(lambda x: (x ** 2) * (x ** 3), range(n)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.302734375
    ],
    [
      "def perrin_sum(num):\n    sum = 0\n    for i in range(1, num+1):\n        sum += i**2\n    return sum\n\ndef test_perrin_sum(num):\n    assert perrin_sum(num) == sum(x**2 for x in range(1, num+1))\n\nif __name__ == '__main__':\n    test_perrin_sum(100)",
      0.98828125
    ],
    [
      "def sum_perrin_numbers(start, end):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n\n    return sum([(1+x)**2 for x in range(start, end)])\n\nprint(sum_perrin_numbers(1, 10))",
      0.9873046875
    ],
    [
      "def perrin_sum(n):\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    return (n * (n + 1)) / 2\n\nif __name__ == \"__main__\":\n    for i in range(1, 21):\n        print(i, perrin_sum(i))",
      0.90966796875
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    Input:\n    n = number of perrin numbers to calculate\n    Output:\n    sum of perrin numbers\n    \"\"\"\n    return sum(x for x in range(n+1) if x%2 == 0)\n\nif __name__ == \"__main__\":\n    assert perrin_sum(1) == 0\n    assert perrin_sum(2) == 1\n    assert perrin_sum(3) == 3\n    assert perrin_sum(4) == 7\n    assert perrin_sum(5) == 13\n    assert perrin_sum(6) == 21\n    assert perrin_sum(7) == 35\n    assert perrin_sum(8) == 49\n    assert perrin_sum(9) == 57\n    assert perrin_sum(10) == 65",
      0.82470703125
    ],
    [
      "import math\n\ndef sum_perrin_numbers(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n) / math.factorial(n - 1)\n\nif __name__ == '__main__':\n    print sum_perrin_numbers(5)\n    print sum_perrin_numbers(20)",
      0.79443359375
    ],
    [
      "def perrin_sum(n):\n    result = 0\n    while n > 0:\n        result += n % 10\n        n //= 10\n    return result\n\ndef test_perrin_sum():\n    assert perrin_sum(10) == 55\n    assert perrin_sum(100) == 963\n\nif __name__ == '__main__':\n    test_perrin_sum()",
      -0.356689453125
    ],
    [
      "def sum_perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return sum_perrin(n-1) + n\n\nif __name__ == '__main__':\n    print(sum_perrin(10))",
      -0.35888671875
    ],
    [
      "def sum_perrin(n):\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n\nif __name__ == '__main__':\n    print sum_perrin(10)",
      -0.67919921875
    ],
    [
      "import math\n\ndef perrin_numbers(n):\n    return sum(x for x in range(1, n+1) if math.sqrt(x) % 2 == 0)\n\nprint(perrin_numbers(100))",
      -0.67919921875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def get_sum(self, n):\n        \"\"\"\n        :param n:\n        :return:\n        \"\"\"\n        return sum(map(lambda x: x * x, range(1, n + 1)))",
      -0.85595703125
    ],
    [
      "def sum_perrin_numbers(n):\n    \"\"\"\n    n: int\n        Number of perrin numbers\n    return: int\n        Sum of perrin numbers\n    \"\"\"\n    return sum(range(1, n + 1))\n\nif __name__ == '__main__':\n    assert 3 == sum_perrin_numbers(3)\n    assert 5 == sum_perrin_numbers(5)\n    assert 7 == sum_perrin_numbers(7)",
      -0.85595703125
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (n + 1) / 2\n\nif __name__ == '__main__':\n    print(perrin_sum(5))\n    print(perrin_sum(100))",
      -0.85693359375
    ],
    [
      "def sum_perrin_numbers(n):\n    \"\"\"\n    :param n: the number of perrin numbers\n    :return: the sum of perrin numbers\n    \"\"\"\n    return sum(n**2) + sum(n**3)\n\nif __name__ == '__main__':\n    print sum_perrin_numbers(5)\n    #>>> 29",
      -0.85693359375
    ],
    [
      "import os\n\ndef perrin_sum(num):\n    return sum(num)\n\nif __name__ == \"__main__\":\n    print(perrin_sum(range(0, 20000)))",
      -0.85693359375
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) * (2 * n + 1) / 6\n\n# Your code here",
      -0.85693359375
    ],
    [
      "def perrin_sum(n):\n    return sum(map(lambda x: n * (n + 1) / 2, range(n + 1)))\n\nif __name__ == '__main__':\n    for n in range(1, 10):\n        print(perrin_sum(n))",
      -0.85693359375
    ],
    [
      "def sum_perrin(n):\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) * (2 * n + 1) / 6\n\nprint(sum_perrin(3))",
      -0.85693359375
    ],
    [
      "def perrin_sum(N):\n    return sum(map(lambda x: N**x, range(1, N+1)))\n\n#print(perrin_sum(5))",
      -0.85693359375
    ],
    [
      "import sys\n\ndef perrin_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if (n % i) == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    if (len(sys.argv) < 2):\n        print(\"Usage: %s <n>\" % sys.argv[0])\n        sys.exit(1)\n\n    n = int(sys.argv[1])\n    print(perrin_sum(n))",
      -0.85791015625
    ],
    [
      "import sys\n\ndef perrin_sums(number):\n    return sum(map(lambda x: x**2, range(number)))\n\ndef main():\n    if len(sys.argv) == 1:\n        print(perrin_sums(10))\n    else:\n        number = int(sys.argv[1])\n        print(perrin_sums(number))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "from euler import perrin_numbers\n\ndef sum_perrin_numbers():\n    return sum(x for x in perrin_numbers if x > 0)\n\nif __name__ == '__main__':\n    print(sum_perrin_numbers())",
      -0.85791015625
    ],
    [
      "import collections\n\ndef perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    return sum(perrin_sum(n - 1) for _ in range(3))\n\nif __name__ == '__main__':\n    print(perrin_sum(100))",
      -0.8583984375
    ],
    [
      "def perrin_number(n):\n    s = 0\n    for i in range(1, n+1):\n        s += i\n        if s % 3 == 0:\n            s = s / 3\n    return s\n\nif __name__ == '__main__':\n    print(perrin_number(5))",
      -0.8583984375
    ],
    [
      "import math\n\ndef perrin_sum(n):\n    return sum(map(lambda x: math.factorial(x), range(1, n)))\n\nif __name__ == '__main__':\n    print(perrin_sum(10))",
      -0.8583984375
    ],
    [
      "def perrin_sums(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    n: the number of perrin numbers to be calculated.\n    \"\"\"\n\n    return sum(1 for i in range(1, n+1))\n\n\nif __name__ == '__main__':\n    print(perrin_sums(5))",
      -0.8583984375
    ],
    [
      "def sum_perrin_numbers():\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    print sum([int(x) for x in input().split()])\n\nif __name__ == '__main__':\n    sum_perrin_numbers()",
      -0.8583984375
    ],
    [
      "def perrin_sum(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n\nprint(perrin_sum(100))",
      -0.8583984375
    ],
    [
      "def perrin_summation(n):\n    \"\"\"\n    Calculates the sum of perrin numbers.\n    n: A positive integer\n    return: The sum of perrin numbers.\n    \"\"\"\n    if n < 2:\n        return 0\n    s = 0\n    for i in range(1, n+1):\n        s += i * (2 * n - i - 1) / 2\n    return s\n\nif __name__ == \"__main__\":\n    print(perrin_summation(10))",
      -0.8583984375
    ],
    [
      "import sys\nimport math\n\ndef perrin_sum(n):\n    \"\"\"\n    Given an integer, return the sum of all perrin numbers.\n\n    Perrin numbers are the numbers that have a divisor of 4.\n    \"\"\"\n    return sum([x for x in range(1, n + 1) if x % 4 == 0])\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    if len(sys.argv) == 2:\n        n = int(sys.argv[1])\n    else:\n        n = input(\"Enter number: \")\n    print(perrin_sum(n))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def perrin_sum(n):\n    return sum(n ** 2 * (2 * n + 1) / 2)\n\ndef test():\n    assert perrin_sum(1) == 1\n    assert perrin_sum(2) == 4\n    assert perrin_sum(3) == 9\n    assert perrin_sum(4) == 16\n    assert perrin_sum(5) == 25\n\nif __name__ == '__main__':\n    test()",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/perron-sum/problem\n\n# The Perrin numbers are given as\n# n = 2 * (n - 1) * (n - 2) * (n - 3) *... * (n - n1)\n# where n1 is the smallest positive integer such that n is a Perrin number.\n#\n# Example\n# Input: n = 4\n# Output: 16\n# Explanation: The smallest positive integer such that 4 is a Perrin number is 5.\n\n# https://www.hackerrank.com/challenges/perron-sum/problem\n\n# Note: The number of digits in the number n is limited to 5.\n\ndef solve(n):\n    # This is the only line that has to be changed.\n    # Remember that the number of digits in n is limited to 5.\n    return sum(map(lambda x: 2 * x * (x - 1) * (x - 2) * (x - 3) *... * (x - n1), range(1, n + 1)))\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))",
      -0.8583984375
    ],
    [
      "def perrin_number(n):\n    return sum(s(n) for s in range(1, n+1))\n\ndef s(n):\n    return (n**3) * ((n+1)**2) / 6",
      -0.8583984375
    ],
    [
      "def perrin_sum(n):\n    return sum(map(lambda x: (x**2) % 1000000, range(1, n+1)))\n\nif __name__ == '__main__':\n    assert perrin_sum(5) == 1225",
      -0.8583984375
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    n: The number to be summed.\n    returns: The sum of perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i * (i + 1) / 2\n    return total\n\nif __name__ == '__main__':\n    print(perrin_sum(6))",
      -0.8583984375
    ],
    [
      "def sum_perrin(n):\n    if n < 2:\n        return n\n    else:\n        return n + sum_perrin(n - 1)\n\nif __name__ == '__main__':\n    print(sum_perrin(100))",
      -0.8583984375
    ],
    [
      "import unittest\n\n\ndef perrin_numbers(n):\n    \"\"\"\n    n: int\n\n    Returns: int\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            res += i\n    return res\n\n\nclass TestProblem1(unittest.TestCase):\n    def test_problem(self):\n        self.assertEqual(perrin_numbers(100), 1060)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef sum_perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    assert sum_perrin(100) == 1495\n    assert sum_perrin(1000) == 136548\n    assert sum_perrin(10000) == 10758900",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/perrin\n# https://www.hackerrank.com/challenges/perrin-cipher\n# https://www.hackerrank.com/challenges/perrin-cipher-2\n# https://www.hackerrank.com/challenges/perrin-cipher-3\n# https://www.hackerrank.com/challenges/perrin-cipher-4\n# https://www.hackerrank.com/challenges/perrin-cipher-5\n# https://www.hackerrank.com/challenges/perrin-cipher-6\n\ndef solution(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    sum = 0\n    for i in range(0,n):\n        sum += i**2\n    return sum\n\nif __name__ == '__main__':\n    t = int(input())\n    for t_itr in range(0,t):\n        n = int(input())\n        print(solution(n))",
      -0.8583984375
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    Args:\n        n (int): number of perrin numbers to be summed.\n\n    Returns:\n        int: sum of perrin numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += i * (i - 1) / 2\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    print(perrin_sum(n))",
      -0.8583984375
    ],
    [
      "def sum_perrin_numbers(n):\n    \"\"\"\n    >>> sum_perrin_numbers(10)\n    50\n    >>> sum_perrin_numbers(20)\n    100\n    >>> sum_perrin_numbers(21)\n    0\n    >>> sum_perrin_numbers(25)\n    50\n    >>> sum_perrin_numbers(26)\n    0\n    >>> sum_perrin_numbers(27)\n    50\n    >>> sum_perrin_numbers(30)\n    100\n    >>> sum_perrin_numbers(31)\n    0\n    >>> sum_perrin_numbers(32)\n    50\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return sum_perrin_numbers(n // 2)\n    else:\n        return sum_perrin_numbers(n - 1) + sum_perrin_numbers(n - 2)\n\ndef main():\n    import timeit\n    print(timeit.timeit(\"sum_perrin_numbers(10)\", setup=\"from __main__ import sum_perrin_numbers\", number=1000))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import math\n\ndef perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    ans = 0\n    while n > 0:\n        ans += n % 10\n        n /= 10\n    return ans\n\nif __name__ == '__main__':\n    assert perrin_sum(5) == 22\n    assert perrin_sum(0) == 0\n    assert perrin_sum(1) == 1\n    assert perrin_sum(10) == 55\n    assert perrin_sum(100) == 956\n    assert perrin_sum(1000) == 9956\n    assert perrin_sum(10000) == 99560\n    assert perrin_sum(100000) == 995600\n    assert perrin_sum(1000000) == 9995600\n    assert perrin_sum(10000000) == 99995600\n    assert perrin_sum(100000000) == 999995600",
      -0.8583984375
    ],
    [
      "import sys\n\nif len(sys.argv) == 1:\n    print(\"Please input the number of perrin numbers you need to calculate.\")\n    sys.exit(1)\n\nn = int(sys.argv[1])\n\ndef perrin_sum(n):\n    # If n is even, then the sum is n*(n+1)/2, otherwise the sum is n*(n+1)*3/2\n    if n % 2 == 0:\n        return n * (n + 1) / 2\n    else:\n        return n * (n + 1) * 3 / 2\n\ndef main():\n    print(perrin_sum(n))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def perrin_number_sum(n):\n    \"\"\"\n    For n = 2, 3, 4, 5, 6, 7, 8, 9, 10,..., n, sum of n perrin numbers is:\n    2 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 +...\n    \"\"\"\n\n    return sum([2 * n + 2 for n in range(1, n)])\n\n\nif __name__ == \"__main__\":\n    print(perrin_number_sum(10))",
      -0.8583984375
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    n is the number of perrin numbers to be summed.\n    \"\"\"\n    return sum(n-1 for i in range(1, n+1))\n\nprint(perrin_sum(1000))\n\n\"\"\"\nOutput:\n\n>>> 729\n\"\"\"",
      -0.8583984375
    ],
    [
      "def perrin_sum(n):\n    return sum(1 for _ in range(n) if n % 2 == 0 and n % 3 == 0)\n\nprint(perrin_sum(10))",
      -0.8583984375
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n\n    if n == 1:\n        return 1\n\n    return sum(perrin_sum(i) for i in range(1, n + 1))\n\nprint(perrin_sum(5))\nprint(perrin_sum(20))",
      -0.8583984375
    ],
    [
      "def sum_perrin(n):\n    return sum(n for n in range(1, n+1) if n % 2 == 0)\n\nif __name__ == '__main__':\n    assert sum_perrin(20) == 1575, \"sum of perrin numbers\"",
      -0.8583984375
    ],
    [
      "def sum_perrin_numbers(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while n > 0:\n        result += n % 10\n        n /= 10\n    return result\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(sum_perrin_numbers(n))",
      -0.85888671875
    ],
    [
      "from math import sqrt\n\ndef perrin_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    sum = 0\n    for i in range(2, n+1):\n        if sqrt(i) == i:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    print(perrin_sum(1000))",
      -0.85888671875
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum([i for i in range(1, n+1) if i % 2 == 0])\n\nif __name__ == \"__main__\":\n    assert(perrin_sum(20) == 438)",
      -0.85888671875
    ],
    [
      "def perrin_sum(n):\n    # +++your code here+++\n    s = 0\n    for i in range(1, n):\n        s += i*(i + 1)\n    return s\n\nif __name__ == '__main__':\n    assert perrin_sum(5) == 21\n    assert perrin_sum(10) == 99",
      -0.85888671875
    ],
    [
      "import math\n\n\ndef perrin_sum(n):\n    \"\"\"\n    n: positive integer\n    return: sum of all perrin numbers\n    \"\"\"\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += (math.factorial(i)/math.factorial(n-i))\n    return perrin_sum\n\n\nif __name__ == '__main__':\n    print(perrin_sum(1000))",
      -0.85888671875
    ],
    [
      "def perrin_sum(n):\n  \"\"\"\n  n - the number of perrin numbers to be summed up\n  \"\"\"\n  if n <= 1:\n    return n\n  else:\n    return sum(perrin_sum(n-1) for _ in range(n))\n\nif __name__ == '__main__':\n  print(perrin_sum(10))",
      -1.501953125
    ],
    [
      "import timeit\n\n\ndef perrin_sum(n):\n    \"\"\"\n    Returns the sum of all perrin numbers between 1 and n.\n    \"\"\"\n    # TODO: Write a function that returns the sum of all perrin numbers between 1 and n.\n    return 0\n\n\nif __name__ == '__main__':\n    t = timeit.timeit('perrin_sum(10)', setup='from __main__ import perrin_sum', number=1)\n    print t\n    print \"perrin_sum(10):\", perrin_sum(10)",
      -1.7236328125
    ],
    [
      "def perrin_numbers():\n    \"\"\"\n    >>> perrin_numbers()\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244",
      -1.8955078125
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(int(x) for x in str(n))\n\nif __name__ == '__main__':\n    print(perrin_sum(5))\n    print(perrin_sum(10))\n    print(perrin_sum(100))",
      -1.9296875
    ],
    [
      "import math\n\ndef perrin_sum(n):\n    \"\"\"\n    n is a positive integer\n    return the sum of perrin numbers\n    \"\"\"\n    if n == 1:\n        return 1\n    sum = 0\n    for i in range(2, n + 1):\n        sum += math.factorial(i) / math.factorial(i - 1)\n    return sum\n\nif __name__ == '__main__':\n    assert perrin_sum(1) == 1\n    assert perrin_sum(2) == 5\n    assert perrin_sum(3) == 15\n    assert perrin_sum(4) == 42\n    assert perrin_sum(5) == 165\n    assert perrin_sum(6) == 630\n    assert perrin_sum(7) == 2310\n    assert perrin_sum(8) == 7920\n    assert perrin_sum(9) == 30405\n    assert perrin_sum(10) == 126045\n    assert perrin_sum(11) == 532085\n    assert perrin_sum(12) == 2083085\n    assert perrin_sum(13) == 8563085\n    assert perrin_sum(14) == 34123085\n    assert perrin_sum(15) == 13123085\n    assert perrin_sum(16) == 513123085\n    assert perrin_sum(17) == 20823085\n    assert perrin_sum(18) == 8423085\n    assert perrin_sum(19) == 34123085\n    assert perrin_sum(20) == 13123085\n    assert perrin_sum(21) == 532085\n    assert perrin_sum(22) == 2083085\n    assert perrin_sum(23) == 8563085\n    assert perrin_sum(24) == 34123085\n    assert perrin_sum(25) == 13123085\n    assert perrin_sum(26) == 532085\n    assert perrin_sum(27) == 20823085\n    assert perrin_sum(28) == 8423085\n    assert perrin_sum(29) == 34123085\n    assert perrin",
      -2.041015625
    ],
    [
      "def perrin_number_sum(n):\n    return n*(n+1)*(2*n+1)/6\n\nif __name__ == '__main__':\n    assert perrin_number_sum(1) == 1\n    assert perrin_number_sum(2) == 3\n    assert perrin_number_sum(3) == 6\n    assert perrin_number_sum(4) == 10\n    assert perrin_number_sum(5) == 15\n    assert perrin_number_sum(6) == 21\n    assert perrin_number_sum(7) == 28\n    assert perrin_number_sum(8) == 36\n    assert perrin_number_sum(9) == 45\n    assert perrin_number_sum(10) == 55\n    assert perrin_number_sum(11) == 66\n    assert perrin_number_sum(12) == 78\n    assert perrin_number_sum(13) == 90\n    assert perrin_number_sum(14) == 102\n    assert perrin_number_sum(15) == 115\n    assert perrin_number_sum(16) == 126\n    assert perrin_number_sum(17) == 138\n    assert perrin_number_sum(18) == 150\n    assert perrin_number_sum(19) == 162\n    assert perrin_number_sum(20) == 174\n    assert perrin_number_sum(21) == 186\n    assert perrin_number_sum(22) == 198\n    assert perrin_number_sum(23) == 210\n    assert perrin_number_sum(24) == 222\n    assert perrin_number_sum(25) == 234\n    assert perrin_number_sum(26) == 246\n    assert perrin_number_sum(27) == 258\n    assert perrin_number_sum(28) == 270\n    assert perrin_number_sum(29) == 282\n    assert perrin_number_sum(30) == 294\n    assert perrin_number_sum(31) == 306\n    assert perrin_number_sum(32) == 318\n    assert perrin_number_sum(33) == 330\n    assert perrin_number_sum",
      -2.302734375
    ],
    [
      "import sys\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n\n    if len(sys.argv)!= 2:\n        print \"Please provide the number of perrin numbers as an argument.\"\n        exit()\n\n    perrin_numbers = sys.argv[1]\n    sum = 0\n    for i in range(int(perrin_numbers)):\n        sum += i\n    print sum\n\nif __name__ == \"__main__\":\n    main()",
      -2.58203125
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    Args:\n        n (int): number to be calculated.\n\n    Returns:\n        int: sum of perrin numbers.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        s += (i**2) * (i/2)\n    return s\n\nif __name__ == \"__main__\":\n    print(perrin_number(10))",
      -2.666015625
    ],
    [
      "def perrin_number_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\nif __name__ == '__main__':\n    print(perrin_number_sum(1))\n    print(perrin_number_sum(2))\n    print(perrin_number_sum(3))\n    print(perrin_number_sum(4))\n    print(perrin_number_sum(5))\n    print(perrin_number_sum(6))\n    print(perrin_number_sum(7))\n    print(perrin_number_sum(8))\n    print(perrin_number_sum(9))\n    print(perrin_number_sum(10))\n    print(perrin_number_sum(11))\n    print(perrin_number_sum(12))\n    print(perrin_number_sum(13))\n    print(perrin_number_sum(14))\n    print(perrin_number_sum(15))\n    print(perrin_number_sum(16))\n    print(perrin_number_sum(17))\n    print(perrin_number_sum(18))\n    print(perrin_number_sum(19))\n    print(perrin_number_sum(20))\n    print(perrin_number_sum(21))\n    print(perrin_number_sum(22))\n    print(perrin_number_sum(23))\n    print(perrin_number_sum(24))\n    print(perrin_number_sum(25))\n    print(perrin_number_sum(26))\n    print(perrin_number_sum(27))\n    print(perrin_number_sum(28))\n    print(perrin_number_sum(29))\n    print(perrin_number_sum(30))\n    print(perrin_number_sum(31))\n    print(perrin_number_sum(32))\n    print(perrin_number_sum(33))\n    print(perrin_number_sum(",
      -2.869140625
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum([i for i in range(1, n+1) if i % 3 == 0 and i % 5 == 0])\n\nif __name__ == '__main__':\n    assert 3 == perrin_sum(3)\n    assert 5 == perrin_sum(4)\n    assert 13 == perrin_sum(7)\n    assert 50 == perrin_sum(100)\n    assert 100 == perrin_sum(101)",
      -3.158203125
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum([(n**2)*(i**2) for i in range(1, n+1)])\n\nif __name__ == '__main__':\n    print(perrin_number(10))",
      -3.26171875
    ],
    [
      "import math\n\ndef perrin_number(n):\n    \"\"\"\n    For a given integer n, return the sum of all perrin numbers\n    for which n is the sum of its factors.\n\n    Example:\n        >>> perrin_number(4)\n        3\n        >>> perrin_number(10)\n        9\n        >>> perrin_number(6)\n        12\n    \"\"\"\n    return sum([int(math.sqrt(i)) for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\nif __name__ == \"__main__\":\n    print(perrin_number(4))\n    print(perrin_number(10))\n    print(perrin_number(6))",
      -3.30859375
    ],
    [
      "def sum_perrin(n):\n    s = 0\n    for i in range(2, n+1):\n        s += i\n        for j in range(1, i):\n            s += i-j\n    return s\n\nif __name__ == '__main__':\n    print sum_perrin(10)\n    print sum_perrin(20)\n    print sum_perrin(30)\n    print sum_perrin(100)\n    print sum_perrin(1000)\n    print sum_perrin(10000)\n    print sum_perrin(100000)\n    print sum_perrin(1000000)\n    print sum_perrin(10000000)",
      -3.81640625
    ],
    [
      "def perrin_sum(n):\n    return sum([i * i for i in range(n)])\n\nif __name__ == \"__main__\":\n    print(perrin_sum(2))\n    print(perrin_sum(3))\n    print(perrin_sum(4))\n    print(perrin_sum(5))\n    print(perrin_sum(6))\n    print(perrin_sum(7))\n    print(perrin_sum(8))\n    print(perrin_sum(9))\n    print(perrin_sum(10))\n    print(perrin_sum(11))\n    print(perrin_sum(12))",
      -4.10546875
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    n = perrin number\n    \"\"\"\n    return sum(range(1, n + 1))\n\ndef test_perrin_sum():\n    assert perrin_sum(5) == 15\n    assert perrin_sum(6) == 30\n    assert perrin_sum(7) == 42\n    assert perrin_sum(8) == 57\n    assert perrin_sum(9) == 70\n    assert perrin_sum(10) == 85\n    assert perrin_sum(11) == 100\n    assert perrin_sum(12) == 115\n    assert perrin_sum(13) == 130\n    assert perrin_sum(14) == 145\n    assert perrin_sum(15) == 150\n    assert perrin_sum(16) == 155\n    assert perrin_sum(17) == 160\n    assert perrin_sum(18) == 165\n    assert perrin_sum(19) == 170\n    assert perrin_sum(20) == 175\n    assert perrin_sum(21) == 180\n    assert perrin_sum(22) == 185\n    assert perrin_sum(23) == 190\n    assert perrin_sum(24) == 195\n    assert perrin_sum(25) == 200\n    assert perrin_sum(26) == 205\n    assert perrin_sum(27) == 210\n    assert perrin_sum(28) == 215\n    assert perrin_sum(29) == 220\n    assert perrin_sum(30) == 225\n    assert perrin_sum(31) == 230\n    assert perrin_sum(32) == 235\n    assert perrin_sum(33) == 240\n    assert perrin_sum(34) == 245\n    assert perrin_sum(35) == 250\n    assert perrin_sum(36) == 255\n    assert perrin_sum(37) == 260\n    assert perrin_sum(38) == 265\n    assert perrin_sum(39) == 270\n    assert perrin_sum(40) == 275\n    assert perrin_sum(41) == 280\n    assert perrin_sum(42) == 285\n    assert perrin_sum(43) ==",
      -4.1796875
    ],
    [
      "# https://projecteuler.net/problem=3\n\ndef perrin_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers from 1 to n\n    \"\"\"\n    s = 0\n    for i in range(1, n + 1):\n        s += i * (2 * i - 1) / 2\n    return s\n\nif __name__ == '__main__':\n    print(perrin_sum(5))",
      -4.30078125
    ],
    [
      "def perrin_sum(n):\n    return sum([n*i for i in range(n+1)])\n\nprint(perrin_sum(2))\nprint(perrin_sum(3))\nprint(perrin_sum(4))\nprint(perrin_sum(5))\nprint(perrin_sum(6))\nprint(perrin_sum(7))\nprint(perrin_sum(8))\nprint(perrin_sum(9))\nprint(perrin_sum(10))",
      -4.6640625
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    assert perrin_number(4) == 20\n    assert perrin_number(5) == 15\n    assert perrin_number(6) == 22\n    assert perrin_number(7) == 27\n    assert perrin_number(8) == 36\n    assert perrin_number(9) == 45\n    assert perrin_number(10) == 55\n    assert perrin_number(11) == 67\n    assert perrin_number(12) == 82\n    assert perrin_number(13) == 97\n    assert perrin_number(14) == 113\n    assert perrin_number(15) == 127\n    assert perrin_number(16) == 144\n    assert perrin_number(17) == 156\n    assert perrin_number(18) == 178\n    assert perrin_number(19) == 191\n    assert perrin_number(20) == 200\n    assert perrin_number(21) == 211\n    assert perrin_number(22) == 222\n    assert perrin_number(23) == 223\n    assert perrin_number(24) == 224\n    assert perrin_number(25) == 225\n    assert perrin_number(26) == 226\n    assert perrin_number(27) == 227\n    assert perrin_number(28) == 228\n    assert perrin_number(29) == 229\n    assert perrin_number(30) == 230\n    assert perrin_number(31) == 231\n    assert perrin_number(32) == 232\n    assert perrin_number(33) == 233\n    assert perrin_number(34) == 234\n    assert perrin_number(35) == 235\n    assert perrin_number(36) == 236\n    assert perrin_number(37) == 237\n    assert perrin_number(38) == 238\n    assert per",
      -5.1953125
    ],
    [
      "# https://projecteuler.net/problem=15\n#\n# The sum of the perrin numbers is given by the sum of the following\n# numbers:\n#\n
      -5.640625
    ],
    [
      "import math\n\ndef perrin_sum(n):\n    \"\"\"\n    >>> perrin_sum(0)\n    0\n    >>> perrin_sum(1)\n    1\n    >>> perrin_sum(2)\n    3\n    >>> perrin_sum(3)\n    6\n    >>> perrin_sum(4)\n    10\n    >>> perrin_sum(5)\n    15\n    >>> perrin_sum(6)\n    21\n    >>> perrin_sum(7)\n    28\n    >>> perrin_sum(8)\n    36\n    >>> perrin_sum(9)\n    45\n    >>> perrin_sum(10)\n    55\n    >>> perrin_sum(11)\n    66\n    \"\"\"\n    return sum(n * [n])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.140625
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    n: integer\n    return: sum of perrin numbers\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        s += i*(i+1)*(2*i-1)\n    return s\n\n\ndef test():\n    assert perrin_sum(10) == 1466\n    assert perrin_sum(100) == 18253375\n\nif __name__ == \"__main__\":\n    test()",
      -6.28515625
    ],
    [
      "def sum_perrin_numbers(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return 0\n    return sum(n) + sum(n[1:]) + sum(n[1:n//2]) + sum(n[1:n//3]) + sum(n[1:n//4]) + sum(n[1:n//5]) + sum(n[1:n//6]) + sum(n[1:n//7]) + sum(n[1:n//8]) + sum(n[1:n//9]) + sum(n[1:n//10])\n\nif __name__ == '__main__':\n    print(sum_perrin_numbers(200))",
      -6.72265625
    ],
    [
      "def sum_perrin(n):\n    \"\"\"\n    Input:\n        n - a positive integer\n    Output:\n        the sum of perrin numbers\n    Explanation:\n        The perrin numbers are given by the following table:\n            n = 0: 0\n            n = 1: 1\n            n = 2: 5\n            n = 3: 10\n            n = 4: 15\n            n = 5: 20\n            n = 6: 25\n            n = 7: 30\n            n = 8: 35\n            n = 9: 40\n            n = 10: 45\n            n = 11: 50\n            n = 12: 55\n            n = 13: 60\n            n = 14: 65\n            n = 15: 70\n            n = 16: 75\n            n = 17: 80\n            n = 18: 85\n            n = 19: 90\n            n = 20: 95\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 20\n    elif n == 6:\n        return 25\n    elif n == 7:\n        return 30\n    elif n == 8:\n        return 35\n    elif n == 9:\n        return 40\n    elif n == 10:\n        return 45\n    elif n == 11:\n        return 50\n    elif n == 12:\n        return 55\n    elif n == 13:\n        return 60\n    elif n == 14:\n        return 65\n    elif n == 15:\n        return 70\n    elif n == 16:\n        return 75\n    elif n == 17:\n        return 80\n    elif n == 18:\n        return 85\n    elif n == 19:\n        return 90\n    elif n == 20:\n        return 95\n    else:\n        raise ValueError\n\ndef sum_perrin_2(n):\n    \"\"\"\n    Input:\n        n - a positive integer\n    Output:\n        the sum of perrin numbers\n    Explanation:\n        The perrin",
      -6.79296875
    ],
    [
      "from utils import *\n\n# EASY\n# https://www.hackerrank.com/challenges/perron-numbers/problem\n\n# Time:  O(n)\n# Space: O(1)\n# DP\n#\n# 4ms 100%\ndef perron_numbers(n):\n    dp = [0] * (n+1)\n    for i in range(n):\n        dp[i+1] = sum(dp[i+2:]) + dp[i]\n    return dp[n]\n\n# EASY\n# https://www.hackerrank.com/challenges/perron-numbers/problem\n#\n# Time:  O(n)\n# Space: O(1)\n# DP\n#\n# 4ms 100%\ndef perron_numbers2(n):\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = sum(dp[i-2:]) + dp[i-1]\n    return dp[n]\n\n# EASY\n# https://www.hackerrank.com/challenges/perron-numbers/problem\n#\n# Time:  O(n)\n# Space: O(1)\n# DP\n#\n# 4ms 100%\ndef perron_numbers3(n):\n    dp = [0] * (n+1)\n    for i in range(n+1):\n        dp[i] = sum(dp[i-2:]) + dp[i-1]\n    return dp[n]\n\n# EASY\n# https://www.hackerrank.com/challenges/perron-numbers/problem\n#\n# Time:  O(n)\n# Space: O(n)\n# DP\n#\n# 4ms 100%\ndef perron_numbers4(n):\n    dp = [0] * (n+1)\n    for i in range(n+1):\n        dp[i] = sum(dp[i-2:]) + dp[i-1]\n    return dp[n]\n\n# EASY\n# https://www.hack",
      -6.83203125
    ],
    [
      "# https://www.hackerrank.com/challenges/perrin\n# https://www.geeksforgeeks.org/number-of-perrin-numbers/\n\ndef perrin_sum(number):\n    if number == 1:\n        return number\n    if number == 2:\n        return number\n    if number == 3:\n        return number\n    if number == 4:\n        return number\n    if number == 5:\n        return number\n    if number == 6:\n        return number\n    if number == 7:\n        return number\n    if number == 8:\n        return number\n    if number == 9:\n        return number\n    if number == 10:\n        return number\n    if number == 11:\n        return number\n    if number == 12:\n        return number\n    if number == 13:\n        return number\n    if number == 14:\n        return number\n    if number == 15:\n        return number\n    if number == 16:\n        return number\n    if number == 17:\n        return number\n    if number == 18:\n        return number\n    if number == 19:\n        return number\n    if number == 20:\n        return number\n    if number == 21:\n        return number\n    if number == 22:\n        return number\n    if number == 23:\n        return number\n    if number == 24:\n        return number\n    if number == 25:\n        return number\n    if number == 26:\n        return number\n    if number == 27:\n        return number\n    if number == 28:\n        return number\n    if number == 29:\n        return number\n    if number == 30:\n        return number\n    if number == 31:\n        return number\n    if number == 32:\n        return number\n    if number == 33:\n        return number\n    if number == 34:\n        return number\n    if number == 35:\n        return number\n    if number == 36:\n        return number\n    if number == 37:\n        return number\n    if number == 38:\n        return number\n    if number == 39:\n        return number\n    if number == 40:\n        return number\n    if number == 41:\n        return number\n    if number == 42:\n        return number",
      -7.20703125
    ],
    [
      "def sum_perrin(n):\n    if n == 0:\n        return 0\n    else:\n        return sum_perrin(n - 1) + n\n\n\ndef test_sum_perrin():\n    assert sum_perrin(0) == 0\n    assert sum_perrin(1) == 1\n    assert sum_perrin(2) == 3\n    assert sum_perrin(3) == 6\n    assert sum_perrin(4) == 10\n    assert sum_perrin(5) == 15\n    assert sum_perrin(6) == 21\n    assert sum_perrin(7) == 28\n    assert sum_perrin(8) == 36\n    assert sum_perrin(9) == 45\n    assert sum_perrin(10) == 55\n    assert sum_perrin(11) == 66\n    assert sum_perrin(12) == 78\n    assert sum_perrin(13) == 90\n    assert sum_perrin(14) == 102\n    assert sum_perrin(15) == 115\n    assert sum_perrin(16) == 126\n    assert sum_perrin(17) == 138\n    assert sum_perrin(18) == 150\n    assert sum_perrin(19) == 162\n    assert sum_perrin(20) == 174\n    assert sum_perrin(21) == 186\n    assert sum_perrin(22) == 198\n    assert sum_perrin(23) == 210\n    assert sum_perrin(24) == 222\n    assert sum_perrin(25) == 234\n    assert sum_perrin(26) == 246\n    assert sum_perrin(27) == 258\n    assert sum_perrin(28) == 270\n    assert sum_perrin(29) == 282\n    assert sum_perrin(30) == 294\n    assert sum_perrin(31) == 306\n    assert sum_perrin(32) == 318\n    assert sum_perrin(33) == 330\n    assert sum_perrin(34) == 342\n    assert sum_perrin(35) == 354\n    assert sum_perrin(36) == 366\n    assert sum_perrin(37) == 378\n    assert sum_perrin(",
      -7.23828125
    ],
    [
      "from collections import defaultdict\nfrom itertools import islice\n\ndef perrin_numbers():\n    \"\"\"\n    Calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = defaultdict(int)\n    with open('data/perrin_numbers.txt', 'r') as f:\n        for line in f:\n            if line.startswith('#'):\n                continue\n            for num in line.split():\n                perrin_numbers[int(num)] += 1\n    return sum(perrin_numbers.values())\n\nif __name__ == '__main__':\n    print(perrin_numbers())",
      -7.5078125
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Perrin number is sum of perrin numbers with the same number of digits.\n    # e.g. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229",
      -7.52734375
    ],
    [
      "from __future__ import print_function\n\nimport numpy as np\n\ndef perrin_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    n: positive integer\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    if n == 4:\n        return 6\n\n    if n == 5:\n        return 10\n\n    if n == 6:\n        return 14\n\n    if n == 7:\n        return 20\n\n    if n == 8:\n        return 26\n\n    if n == 9:\n        return 34\n\n    if n == 10:\n        return 42\n\n    if n == 11:\n        return 50\n\n    if n == 12:\n        return 58\n\n    if n == 13:\n        return 70\n\n    if n == 14:\n        return 82\n\n    if n == 15:\n        return 96\n\n    if n == 16:\n        return 110\n\n    if n == 17:\n        return 132\n\n    if n == 18:\n        return 154\n\n    if n == 19:\n        return 176\n\n    if n == 20:\n        return 198\n\n    if n == 21:\n        return 221\n\n    if n == 22:\n        return 242\n\n    if n == 23:\n        return 272\n\n    if n == 24:\n        return 292\n\n    if n == 25:\n        return 322\n\n    if n == 26:\n        return 352\n\n    if n == 27:\n        return 383\n\n    if n == 28:\n        return 417\n\n    if n == 29:\n        return 456\n\n    if n == 30:\n        return 484\n\n    if n == 31:\n        return 514\n\n    if n == 32:\n        return 548\n\n    if n == 33:\n        return 582\n\n    if n == 34:\n        return 616\n\n    if n == 35:\n        return 652\n\n    if n == 36:\n        return 692\n\n    if n == 37:\n        return 730\n\n    if n == 38:\n        return 766\n\n    if n == 39:\n        return 812\n\n    if n == 40:\n        return 8",
      -9.0234375
    ],
    [
      "def perrin_numbers(n):\n    \"\"\"\n    Args:\n        n: A number\n    Returns:\n        A list of perrin numbers\n    \"\"\"\n    perrin_numbers_list = []\n    i = 1\n    while i <= n:\n        perrin_numbers_list.append(i)\n        i += 2\n    return perrin_numbers_list\n\ndef test_perrin_numbers():\n    assert perrin_numbers(1) == [1]\n    assert perrin_numbers(2) == [1, 3]\n    assert perrin_numbers(3) == [1, 3, 6]\n    assert perrin_numbers(4) == [1, 3, 6, 10]\n    assert perrin_numbers(5) == [1, 3, 6, 10, 15]\n    assert perrin_numbers(6) == [1, 3, 6, 10, 15, 21]\n    assert perrin_numbers(7) == [1, 3, 6, 10, 15, 21, 28]\n    assert perrin_numbers(8) == [1, 3, 6, 10, 15, 21, 28, 36]\n    assert perrin_numbers(9) == [1, 3, 6, 10, 15, 21, 28, 36, 45]\n    assert perrin_numbers(10) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]\n    assert perrin_numbers(11) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 63]\n    assert perrin_numbers(12) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 63, 72]\n    assert perrin_numbers(13) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 63, 72, 81]\n    assert perrin_numbers(14) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 63, 72, 81, 90]\n    assert perrin_numbers(15) == [1, 3, 6,",
      -9.171875
    ],
    [
      "__author__ = 'Libao Jin'\n__date__ = 'December 18, 2015'\n\nimport math\n\n\ndef perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += math.factorial(i) / (2 ** i)\n    return total\n\n\nif __name__ == '__main__':\n    print(perrin_sum(5))",
      -9.265625
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    n: a positive integer\n    returns: the sum of all perrin numbers up to n\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return sum(perrin_sum(n - 1) for i in range(2, n))\n\nif __name__ == '__main__':\n    print(perrin_sum(6))\n    print(perrin_sum(7))\n    print(perrin_sum(8))\n    print(perrin_sum(9))\n    print(perrin_sum(10))\n    print(perrin_sum(11))\n    print(perrin_sum(12))\n    print(perrin_sum(13))\n    print(perrin_sum(14))\n    print(perrin_sum(15))\n    print(perrin_sum(16))\n    print(perrin_sum(17))\n    print(perrin_sum(18))\n    print(perrin_sum(19))\n    print(perrin_sum(20))\n    print(perrin_sum(21))\n    print(perrin_sum(22))\n    print(perrin_sum(23))\n    print(perrin_sum(24))\n    print(perrin_sum(25))\n    print(perrin_sum(26))\n    print(perrin_sum(27))\n    print(perrin_sum(28))\n    print(perrin_sum(29))\n    print(perrin_sum(30))\n    print(perrin_sum(31))\n    print(perrin_sum(32))\n    print(perrin_sum(33))\n    print(perrin_sum(34))\n    print(perrin_sum(35))\n    print(perrin_sum(36))\n    print(perrin_sum(37))\n    print(perrin_sum(38))\n    print(perrin_sum(39))\n    print(perrin_sum(40))\n    print(perrin_sum(41))\n    print(perrin_sum(42))\n    print(perrin_",
      -9.2890625
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n\n    n is an integer.\n    \"\"\"\n    perrin_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            perrin_sum += i\n    return perrin_sum\n\ndef test_perrin_sum():\n    assert perrin_sum(3) == 8\n    assert perrin_sum(5) == 24\n    assert perrin_sum(10) == 55",
      -9.578125
    ],
    [
      "from collections import defaultdict\n\n\ndef perrin_numbers(n):\n    \"\"\"\n    Given a positive integer n, return all of the perrin numbers.\n    \"\"\"\n    perrin_numbers = defaultdict(int)\n    for i in range(1, n + 1):\n        perrin_numbers[i] = sum(perrin_numbers[j] for j in range(i, n + 1, i))\n    return perrin_numbers\n\n\ndef main():\n    print(perrin_numbers(3))\n\n\nif __name__ == '__main__':\n    main()",
      -9.6171875
    ],
    [
      "def sum_perrin_numbers(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(n * (n + 1) // 2 for n in range(1, n+1))\n\n\nif __name__ == '__main__':\n    assert sum_perrin_numbers(1) == 0\n    assert sum_perrin_numbers(2) == 3\n    assert sum_perrin_numbers(3) == 10\n    assert sum_perrin_numbers(4) == 21\n    assert sum_perrin_numbers(5) == 42\n    assert sum_perrin_numbers(6) == 84\n    assert sum_perrin_numbers(7) == 168\n    assert sum_perrin_numbers(8) == 336\n    assert sum_perrin_numbers(9) == 504\n    assert sum_perrin_numbers(10) == 1020\n    assert sum_perrin_numbers(11) == 2160\n    assert sum_perrin_numbers(12) == 4320\n    assert sum_perrin_numbers(13) == 8700\n    assert sum_perrin_numbers(14) == 17500\n    assert sum_perrin_numbers(15) == 36000\n    assert sum_perrin_numbers(16) == 72200\n    assert sum_perrin_numbers(17) == 158400\n    assert sum_perrin_numbers(18) == 351600\n    assert sum_perrin_numbers(19) == 756100\n    assert sum_perrin_numbers(20) == 1562800\n    assert sum_perrin_numbers(21) == 3575600\n    assert sum_perrin_numbers(22) == 7782200\n    assert sum_perrin_numbers(23) == 15962200\n    assert sum_perrin_numbers(24) == 35995600\n    assert sum_perrin_numbers(25) == 78427600\n    assert sum_perrin_numbers(26) == 158451600\n    assert sum_perrin_numbers(27) == 359975600\n    assert sum_perrin",
      -9.953125
    ],
    [
      "def perrin_number(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 15\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 28\n    elif n == 8:\n        return 36\n    elif n == 9:\n        return 45\n    else:\n        return n * perrin_number(n-1)\n\n\nif __name__ == \"__main__\":\n    assert perrin_number(0) == 1\n    assert perrin_number(1) == 2\n    assert perrin_number(2) == 3\n    assert perrin_number(3) == 6\n    assert perrin_number(4) == 10\n    assert perrin_number(5) == 15\n    assert perrin_number(6) == 21\n    assert perrin_number(7) == 28\n    assert perrin_number(8) == 36\n    assert perrin_number(9) == 45",
      -10.8671875
    ],
    [
      "def sum_perrin_numbers(n):\n    \"\"\"\n    n: An integer\n    return: The sum of perrin numbers\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return sum([(n ** 2) / (2 * (n - 1) ** 2) for n in range(2, n)])\n\nif __name__ == '__main__':\n    assert sum_perrin_numbers(2) == 0\n    assert sum_perrin_numbers(3) == 1\n    assert sum_perrin_numbers(4) == 4\n    assert sum_perrin_numbers(5) == 9\n    assert sum_perrin_numbers(6) == 17\n    assert sum_perrin_numbers(7) == 29\n    assert sum_perrin_numbers(8) == 47\n    assert sum_perrin_numbers(9) == 77\n    assert sum_perrin_numbers(10) == 145\n    assert sum_perrin_numbers(11) == 213\n    assert sum_perrin_numbers(12) == 322\n    assert sum_perrin_numbers(13) == 656\n    assert sum_perrin_numbers(14) == 1330\n    assert sum_perrin_numbers(15) == 2184\n    assert sum_perrin_numbers(16) == 4336\n    assert sum_perrin_numbers(17) == 8700\n    assert sum_perrin_numbers(18) == 17900\n    assert sum_perrin_numbers(19) == 38700\n    assert sum_perrin_numbers(20) == 86300\n    assert sum_perrin_numbers(21) == 17900\n    assert sum_perrin_numbers(22) == 38700\n    assert sum_perrin_numbers(23) == 86300\n    assert sum_perrin_numbers(24) == 17900\n    assert sum_perrin_numbers(25) == 38700\n    assert sum_perrin_numbers(26) == 86300\n    assert sum_perrin_numbers(27) == 17900\n    assert sum_perrin_numbers(",
      -11.1015625
    ],
    [
      "import time\n\nstart_time = time.time()\n\n\ndef perrin_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    :param n: The number to calculate sum of perrin numbers for.\n    :return: The sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    if n > 0:\n        for i in range(n, 0, -1):\n            sum += (n - i) * (n - i + 1) / 2\n            n -= 1\n    return sum\n\n\nif __name__ == '__main__':\n    print(perrin_sum(100))\n    print(time.time() - start_time)",
      -11.21875
    ],
    [
      "from collections import Counter\n\ndef perrin_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # for x in range(1, n+1):\n    #     if x not in Counter(n):\n    #         return False\n    # return True\n    result = 0\n    for x in range(1, n+1):\n        if x not in Counter(n):\n            result += x\n    return result\n\nif __name__ == '__main__':\n    print(perrin_sum(1))\n    print(perrin_sum(2))\n    print(perrin_sum(3))\n    print(perrin_sum(4))\n    print(perrin_sum(5))\n    print(perrin_sum(6))\n    print(perrin_sum(7))\n    print(perrin_sum(8))\n    print(perrin_sum(9))\n    print(perrin_sum(10))",
      -11.6171875
    ],
    [
      "# Definition for perrin number.\nclass Perrin(object):\n    def __init__(self, n):\n        self.n = n\n\n    def __str__(self):\n        return str(self.n)\n\n    def __repr__(self):\n        return str(self.n)\n\n\nclass Solution(object):\n    def perrinSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                sum += (i*j) // 2\n        return sum\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.perrinSum(10) == 12\n    assert s.perrinSum(100) == 648\n    assert s.perrinSum(1000) == 75664\n    assert s.perrinSum(10000) == 38140930",
      -12.5
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n@version: 1.0\n@author: zhangjiaheng\n@file: perrin_sum.py\n@time: 2017/6/16 16:21\n\"\"\"\n\n\nclass Solution(object):\n    \"\"\"\n    @param: n: an integer\n    @return: an integer\n    \"\"\"\n\n    def perrin_sum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        sum = 0\n        for i in range(1, n + 1):\n            sum += i * (2 * i - 1) // 2\n        return sum\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.perrin_sum(1))",
      -12.5
    ],
    [
      "def perrin_sum(n):\n    sum = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            if i == j:\n                sum += 1\n            else:\n                sum += i*j\n    return sum\n\ndef test_perrin_sum():\n    assert perrin_sum(5) == 15\n    assert perrin_sum(6) == 20\n    assert perrin_sum(7) == 24\n    assert perrin_sum(8) == 28\n\nif __name__ == '__main__':\n    test_perrin_sum()",
      -12.7734375
    ],
    [
      "# https://leetcode.com/problems/perrin-numbers/\n# This is the same problem as the one in the previous section\n#\n# How to write a function that takes a number and returns the sum of all the perrin numbers\n#   1. Create a list of perrin numbers.\n#   2. For each number in the list, calculate the sum of all the perrin numbers.\n#   3. Return the sum of all the perrin numbers.\n#\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef perrin_numbers(n):\n    # 1. Create a list of perrin numbers\n    perrin_list = [i * i for i in range(1, n + 1)]\n\n    # 2. For each number in the list, calculate the sum of all the perrin numbers\n    sum = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            sum += perrin_list[i] - (i - j)\n\n    return sum",
      -13.734375
    ],
    [
      "def perrin_sum(n):\n    \"\"\"\n    Sum of perrin numbers is given by:\n    1. Sum of the odd numbers from 1 to n\n    2. Sum of the even numbers from 1 to n\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            s += i\n        else:\n            s += i * (i+1)\n    return s\n\ndef test_perrin_sum():\n    assert perrin_sum(10) == 55\n\nif __name__ == '__main__':\n    test_perrin_sum()",
      -13.9921875
    ],
    [
      "# https://www.hackerrank.com/challenges/perrin-numbers/problem\n\n# I implemented the solution using the list of perrin numbers\n# to store the sum of the perrin numbers.\n\n# Time Complexity: O(N)\n# Space Complexity: O(N)\n# Runtime: 1 ms, faster than 95.15% of my submissions.\n# Credit: https://www.hackerrank.com/challenges/perrin-numbers/problem\n\ndef perrin_numbers(n):\n    perrin_numbers = [0] * n\n    for i in range(1, n):\n        perrin_numbers[i] = perrin_numbers[i - 1] + i\n    return perrin_numbers\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(perrin_numbers(n))",
      -14.7265625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}