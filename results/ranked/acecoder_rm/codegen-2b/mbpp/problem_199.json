{
  "problem": {
    "task_id": "MBPP/210",
    "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
    "test_list": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ],
    "challenge_test_list": [],
    "problem_id": 199
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# write your code here\ndef is_valid_sudoku(s):\n    # your code goes here\n    #print s\n    count = 0\n    for c in s:\n        if c not in 'abcdefghijklmnopqrstuvwxyz0123456789':\n            return False\n        else:\n            count += 1\n    return count == len(s)\n\n\ndef main():\n    s = \"2.1.2.3.4.5.6.7.8.9.0\"\n    print is_valid_sudoku(s)\n\n\nif __name__ == '__main__':\n    main()",
      6.1328125
    ],
    [
      "import re\nimport string\n\n\ndef valid_string(string_to_check):\n    \"\"\"\n    :rtype: bool\n    :type string_to_check: str\n    :return: True if the given string contains only a certain set of characters(a-z, a-z and 0-9)\n    \"\"\"\n    return all(char in string_to_check for char in string.ascii_letters + string.digits)\n\n\nif __name__ == \"__main__\":\n    string_to_check = \"a\"\n    print(valid_string(string_to_check))\n    string_to_check = \"abc\"\n    print(valid_string(string_to_check))\n    string_to_check = \"abcd\"\n    print(valid_string(string_to_check))\n    string_to_check = \"a1b2c3d4\"\n    print(valid_string(string_to_check))\n    string_to_check = \"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"\n    print(valid_string(string_to_check))\n    string_to_check = \"abcd\"\n    print(valid_string(string_to_check))\n    string_to_check = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    print(valid_string(string_to_check))\n    string_to_check = \"abcdefghijklmnopqrstuvwxyz0123456789a\"\n    print(valid_string(string_to_check))",
      4.5234375
    ],
    [
      "# Example:\n# input: \"abc\"\n# output: True\n# Example:\n# input: \"a-a\"\n# output: True\n# Example:\n# input: \"0-9\"\n# output: True\n# Example:\n# input: \"a-z\"\n# output: False\n# Example:\n# input: \"z-a\"\n# output: False\n# Example:\n# input: \"qwerty\"\n# output: False\n\n# Definition for a string:\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n    def is_valid(self):\n        return all(char in 'abcdefghijklmnopqrstuvwxyz0123456789' for char in self.s)\n\n\nclass Solution:\n    def validString(self, s):\n        if not s:\n            return True\n\n        # for each char in string\n        for c in s:\n            # if c is not in 'abcdefghijklmnopqrstuvwxyz0123456789'\n            if c not in 'abcdefghijklmnopqrstuvwxyz0123456789':\n                return False\n\n        return True",
      4.4296875
    ],
    [
      "#!/usr/bin/env python\n\n# Complete the function below.\ndef is_valid_phone_number(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return s.replace('-', '').isalnum() and s.isnumeric()\n\n\nif __name__ == \"__main__\":\n    assert is_valid_phone_number(\"1234-5678-9000\") == True, \"The number '1234-5678-9000' is valid.\"\n    assert is_valid_phone_number(\"a-z\") == False, \"The number 'a-z' is invalid.\"\n    assert is_valid_phone_number(\"1-2-3-4\") == False, \"The number '1-2-3-4' is invalid.\"\n    assert is_valid_phone_number(\"123456789\") == True, \"The number '123456789' is valid.\"",
      3.212890625
    ],
    [
      "import re\n\ndef contains_only_characters(s, allowed_chars):\n    \"\"\"\n    :type s: str\n    :type allowed_chars: set\n    :rtype: bool\n    \"\"\"\n    return re.compile(r'^[a-zA-Z0-9]+$').match(s) is not None\n\ndef main():\n    s = 'a1b2c3d4e5f6g7h8i9j10k'\n    allowed_chars = 'abcdefghijklmnopqrstuvwxyz0123456789'\n    assert contains_only_characters(s, allowed_chars) == True\n    print('All tests passed.')\n\nif __name__ == '__main__':\n    main()",
      2.80078125
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param chars, a string\n    # @return a boolean\n    def isMatch(self, s, chars):\n        if len(s) < len(chars):\n            return False\n        if len(s) == len(chars):\n            return s in chars\n        if len(s) > len(chars):\n            return False\n        if chars.find('0') >= 0:\n            return False\n        return self.isMatch(s[1:], chars)\n\n    def isMatch_regex(self, s, chars):\n        if len(s) < len(chars):\n            return False\n        if len(s) == len(chars):\n            return s in chars\n        if len(s) > len(chars):\n            return False\n        if chars.find('0') >= 0:\n            return False\n        return self.isMatch_regex(s[1:], chars)\n\n    def isMatch_regex(self, s, chars):\n        if len(s) < len(chars):\n            return False\n        if len(s) == len(chars):\n            return s in chars\n        if len(s) > len(chars):\n            return False\n        if chars.find('0') >= 0:\n            return False\n        return self.isMatch_regex(s[1:], chars)",
      1.361328125
    ],
    [
      "class Solution:\n    def containsOnly(self, s, t):\n        return s == t or re.search(r'[a-zA-Z0-9]*', s) == None\n\n\n# test\ns = Solution()\nassert s.containsOnly(\"a\", \"a\") == True\nassert s.containsOnly(\"a\", \"b\") == False\nassert s.containsOnly(\"a\", \"\") == True\nassert s.containsOnly(\"\", \"a\") == True\nassert s.containsOnly(\"\", \"\") == True\nassert s.containsOnly(\"a\", \"abc\") == False\nassert s.containsOnly(\"a\", \"abc123\") == False\nassert s.containsOnly(\"abc123\", \"abc123\") == True",
      1.2080078125
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport re\n\ndef check_regex(s):\n    return re.compile(r\"[^a-zA-Z0-9]\").search(s) is None\n\nif __name__ == '__main__':\n    test_cases = open(\"tests/test_cases.txt\", \"r\")\n    for test in test_cases:\n        print check_regex(test.strip())",
      0.97900390625
    ],
    [
      "def check_chars(s):\n    pattern = r'^[a-zA-Z0-9]+$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n\nprint check_chars('abcd')\nprint check_chars('abcd1234')\nprint check_chars('abcdefghijklmnopqrstuvwxyz')\nprint check_chars('abcd1234')",
      0.8115234375
    ],
    [
      "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return re.match(r'^[a-z0-9]*$', s)\n\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n        if not s[0].isalpha():\n            return False\n        if not s[-1].isdigit():\n            return False\n        if not re.match(r'^[a-z0-9]*$', s):\n            return False\n        return True\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isValid('a')\n    print s.isValid('12345')\n    print s.isValid('abcd')\n    print s.isValid('abcde')\n    print s.isValid('abcd12345')\n    print s.isValid('12345abc')\n    print s.isValid('12345abcd')\n    print s.isValid('12345a12345')",
      0.44482421875
    ],
    [
      "import re\n\ndef is_valid_string(string):\n    \"\"\"\n    Write a function that checks if a string is valid.\n    :param string: string to check.\n    :return: True if valid, False otherwise.\n    \"\"\"\n    valid_chars = re.compile(r'^[a-zA-Z0-9]*$')\n    return valid_chars.match(string)\n\ndef main():\n    \"\"\"\n    Write a function that takes a string and checks if it is valid.\n    \"\"\"\n    string = 'a123456789'\n    print is_valid_string(string)\n\nif __name__ == '__main__':\n    main()",
      0.4365234375
    ],
    [
      "import re\n\n\ndef check_string(text, valid_chars):\n    return re.search(r'^[a-zA-Z0-9]+$', text)\n\n\nif __name__ == '__main__':\n    string = \"abcd123z\"\n    valid_chars = \"a-zA-Z0-9\"\n    print(check_string(string, valid_chars))",
      0.32861328125
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param chars, a string of characters\n    # @return a boolean\n    def isValid(self, s, chars):\n        if not s:\n            return False\n        if not chars:\n            return True\n        if not isinstance(s, str):\n            return False\n        if not isinstance(chars, str):\n            return False\n        if s.isalnum() or s.isdigit() or s.isalpha():\n            return False\n        for c in chars:\n            if c not in s:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    print Solution().isValid(\"abc\", \"123\")",
      0.241455078125
    ],
    [
      "# https://leetcode.com/problems/check-if-a-string-has-all-digits-only/\n\nclass Solution(object):\n    def checkOnlyChars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if s == None or len(s) == 0:\n            return False\n        if not all(c in '0123456789abcdefABCDEF' for c in s):\n            return False\n        return True",
      0.211669921875
    ],
    [
      "# https://www.hackerrank.com/challenges/string-validation/problem\n# https://www.hackerrank.com/challenges/string-validation-regex/problem\n\n# Complete the function below.\ndef is_valid(string):\n    if string == \"\":\n        return True\n    else:\n        return all(c.isalpha() or c.isdigit() for c in string)\n\nif __name__ == '__main__':\n    string = input()\n    print(is_valid(string))\n    print(is_valid(\"abc\"))\n    print(is_valid(\"1234\"))\n    print(is_valid(\"abc1234\"))\n    print(is_valid(\"1a2z\"))\n    print(is_valid(\"1a2z1234\"))\n    print(is_valid(\"1a2z1234a\"))\n    print(is_valid(\"1a2z1234a1234\"))\n    print(is_valid(\"1a2z1234a1234z\"))",
      0.190185546875
    ],
    [
      "import re\n\ndef check_regex(string, regex):\n    pattern = re.compile(regex)\n    if pattern.search(string):\n        return True\n    else:\n        return False\n\nprint(check_regex('abcd', '^[a-z0-9]+$'))\nprint(check_regex('abcd', '^[a-z]+$'))\nprint(check_regex('abcd', '^[0-9]+$'))\nprint(check_regex('abcd', '^[0-9a-z]+$'))\nprint(check_regex('abcd', '^[a-z0-9a-z]+$'))",
      0.052276611328125
    ],
    [
      "#Write your code here\n\ndef isValid(word):\n    valid = True\n    if len(word) > 3:\n        valid = False\n    else:\n        for i in range(0, len(word)):\n            if word[i] not in \"abcdef0123456789\":\n                valid = False\n                break\n    return valid\n\ndef main():\n    s = \"abc123456789\"\n    print \"The string is\", s\n    print \"The string is valid:\", isValid(s)\n    print \"The string is invalid:\", not isValid(s)\n\nif __name__ == '__main__':\n    main()",
      0.040985107421875
    ],
    [
      "def check_regex(string, pattern):\n    # write your code here\n    return False\n\nif __name__ == '__main__':\n    string = \"abc123def456ghi\"\n    pattern = \"^[a-z0-9]+$\"\n    print check_regex(string, pattern)",
      -0.1785888671875
    ],
    [
      "import re\n\ndef check_regex(string, regex):\n    return bool(re.search(regex, string))\n\nif __name__ == '__main__':\n    string = \"a-z, a-z and 0-9\"\n    regex = \"^[a-z0-9]+$\"\n    print(check_regex(string, regex))",
      -0.28125
    ],
    [
      "import re\n\ndef is_valid(string):\n    if not string:\n        return False\n    if string.isdigit() or string[0] == '-':\n        return False\n    if not re.match('[a-zA-Z0-9]*', string):\n        return False\n    return True\n\nif __name__ == '__main__':\n    assert is_valid(\"abc123xyz\") == True\n    assert is_valid(\"\") == True\n    assert is_valid(\"-123\") == False\n    assert is_valid(\"-a\") == False\n    assert is_valid(\"abcd\") == False",
      -0.342041015625
    ],
    [
      "#!/bin/python3\n\n# Write your code here\n\ndef check_valid(string):\n    return all(ch in string for ch in \"abcdefghijklmnopqrstuvwxyz0123456789\")\n\n\nif __name__ == '__main__':\n    string = 'abcdgfhijklmnopqrstuvwxyz0123456789'\n    print(check_valid(string))",
      -0.61767578125
    ],
    [
      "# Write your code here\n# Input: s = \"Hello\"\n# Output: True\n\n#!/bin/python\n\nclass Solution(object):\n    def validUtf8(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return False\n        for i in range(0, len(s)):\n            if ord(s[i]) < 0x21 or ord(s[i]) > 0x7e:\n                return False\n        return True\n\ns = Solution()\nprint s.validUtf8(\"Hello\")\nprint s.validUtf8(\"\u4f60\u597d\")\nprint s.validUtf8(\"\\xe6\\x97\\xa5\\xe6\\x9c\\xac\")",
      -0.65234375
    ],
    [
      "def is_valid_string(s):\n    return all(c in string.ascii_letters + string.digits for c in s)\n\nif __name__ == \"__main__\":\n    s = \"qwerty123\"\n    print(is_valid_string(s))\n    s = \"qwerty!123\"\n    print(is_valid_string(s))\n    s = \"abc\"\n    print(is_valid_string(s))\n    s = \"a\"\n    print(is_valid_string(s))\n    s = \"qwerty123qwerty123\"\n    print(is_valid_string(s))\n    s = \"qwerty123qwerty123\"\n    print(is_valid_string(s))",
      -0.6943359375
    ],
    [
      "class Solution(object):\n    def checkRegex(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: bool\n        \"\"\"\n        return str.isalpha() and str.isalnum() and str.isdigit()",
      -0.82421875
    ],
    [
      "import re\n\n\ndef is_valid_password(password):\n    \"\"\"\n    :type password: str\n    :rtype: bool\n    \"\"\"\n    return re.search('[a-zA-Z0-9]', password) is not None\n\n\nif __name__ == \"__main__\":\n    assert is_valid_password(\"a\")\n    assert not is_valid_password(\"b\")\n    assert not is_valid_password(\"0\")\n    assert not is_valid_password(\"1\")\n    assert not is_valid_password(\"abc\")\n    assert not is_valid_password(\"def\")\n    assert is_valid_password(\"abc1\")",
      -0.85595703125
    ],
    [
      "def check(word):\n    regex = r'^[a-z0-9]+$'\n    return re.match(regex, word)\n\ndef main():\n    word = 'abcde'\n    print(check(word))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def contains_only_a_z(string):\n    return re.match(\"^[a-zA-Z0-9]+$\", string)\n\nif __name__ == '__main__':\n    assert contains_only_a_z(\"a\") is True\n    assert contains_only_a_z(\"abc\") is True\n    assert contains_only_a_z(\"0123456789\") is True\n    assert contains_only_a_z(\"a123456789\") is False\n    assert contains_only_a_z(\"a\") is True\n    assert contains_only_a_z(\"a1\") is False",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def checkInclusion(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        return ''.join(s) == t or t == ''.join(s) or t == ''.join(s).upper()",
      -0.85693359375
    ],
    [
      "#!/usr/bin/python\n\n# Complete the countValidChars function below.\ndef countValidChars(s):\n    # TODO: Implement countValidChars\n    return 0\n\nif __name__ == \"__main__\":\n    s = \"a\"\n    print countValidChars(s)",
      -0.85693359375
    ],
    [
      "# write your code here\ndef check_chars(word):\n    return ''.join(c for c in word if c.isdigit() or c.isalpha() or c =='')\n\nif __name__ == \"__main__\":\n    print(check_chars(\"a-z 0-9\"))\n    print(check_chars(\"abc\"))",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/check-if-a-string-contains-only-numbers\ndef check_string(s):\n    return all(c.isalpha() for c in s) and all(c.isdigit() for c in s)\n\n\nif __name__ == '__main__':\n    s = input().strip()\n    print(check_string(s))",
      -0.85693359375
    ],
    [
      "import re\n\ndef check_string(string, valid_chars):\n    return re.match(\"^[a-zA-Z0-9]+$\", string) is not None\n\nif __name__ == \"__main__\":\n    string = \"test\"\n    print(check_string(string, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"))\n    print(check_string(string, \"a-zA-Z0-9\"))",
      -0.85693359375
    ],
    [
      "import re\n\n\ndef is_valid_email(email):\n    \"\"\"\n    Return True if email is valid.\n    :param email: string\n    :return: boolean\n    \"\"\"\n    return bool(re.match(r\"[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9]+\", email))\n\n\nif __name__ == \"__main__\":\n    assert is_valid_email(\"test@test.com\") == True\n    assert is_valid_email(\"test123@test.com\") == False",
      -0.85693359375
    ],
    [
      "#Write your code here\ndef check_characters(string):\n    '''\n    string: string to check\n    returns: True if string contains only a-z, a-z and 0-9\n    '''\n    if re.match(r'^[a-zA-Z0-9]+$', string):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = 'abcdefghijklmnopqrstuvwxyz0123456789'\n    print(check_characters(string))",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param chars, a set of characters\n    # @return a boolean\n    def isMatch(self, s, chars):\n        if not s or not chars:\n            return True\n        if len(s) > len(chars):\n            return False\n        return s[:len(chars)] == chars\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.isMatch('aa', 'a')\n    print solution.isMatch('aa', 'a-z')\n    print solution.isMatch('aa', 'a-z0-9')\n    print solution.isMatch('aa', '0-9')\n    print solution.isMatch('aa', '0-9a-z')",
      -0.85693359375
    ],
    [
      "# Your function should return true if the given string contains only a certain set of characters, otherwise it should return false.\n\ndef containsOnlyDigits(str):\n    regex = r'[a-zA-Z0-9]'\n    return regex.search(str) is not None\n\n\nif __name__ == '__main__':\n    assert containsOnlyDigits('a1b2c3') == True, 'a1b2c3'\n    assert containsOnlyDigits('1a2b3c') == False, '1a2b3c'\n    assert containsOnlyDigits('aa1b2c3') == True, 'aa1b2c3'\n    assert containsOnlyDigits('1aa2b3c') == False, '1aa2b3c'",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return all(char in string.ascii_lowercase + string.digits for char in s)",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return ''.join(char for char in s if char.isalnum() or char == '0') == s\n\n\nif __name__ == '__main__':\n    print Solution().isValid('abcd')\n    print Solution().isValid('a')\n    print Solution().isValid('abcdz')\n    print Solution().isValid('a0')",
      -0.85791015625
    ],
    [
      "#!/bin/python\n\nimport re\n\nstring = \"abcd1234\"\n\ndef isValid(string):\n    if re.match(\"^[a-z0-9]+$\", string):\n        return True\n    else:\n        return False\n\nprint(isValid(string))",
      -0.85791015625
    ],
    [
      "#!/bin/python\n\n# import the modules\nimport re\n\n# create a pattern to check if the string contains only a certain set of characters\npattern = re.compile('^[a-zA-Z0-9]+$')\n\n# check if the string contains only a certain set of characters\nif pattern.match(str):\n    print \"The string contains only a-z, a-z and 0-9.\"\nelse:\n    print \"The string contains an illegal character.\"",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return False\n        return self.valid(s)\n\n    def valid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return all(c in 'abcdef0123456789' for c in s)\n\n\nif __name__ == '__main__':\n    Solution().checkValid('abcd')\n    Solution().checkValid('abcd')",
      -0.85791015625
    ],
    [
      "class Solution:\n    \"\"\"\n    @param s: A string\n    @param dict: A set of characters\n    @return: A boolean\n    \"\"\"\n    def isMatch(self, s, p):\n        regex = re.compile(r'[a-zA-Z0-9]*')\n        return regex.match(s) is not None\n\n# print Solution().isMatch('a*b*c*d*e*', 'abced*')\nprint Solution().isMatch('abce', 'abce')\nprint Solution().isMatch('abcd', 'abcde')\nprint Solution().isMatch('abcd', 'abcde')",
      -0.85791015625
    ],
    [
      "def check_regex(string, regex):\n    return re.search(regex, string)\n\nprint check_regex(\"aab\", \"a-z\")\nprint check_regex(\"aab\", \"a-z0-9\")\nprint check_regex(\"aab\", \"a-z0-9a-z\")\nprint check_regex(\"aab\", \"a-z0-9a-z0-9\")",
      -0.85791015625
    ],
    [
      "def isValid(s):\n    if not s:\n        return False\n    s = s.lower()\n    return all(x in string.ascii_lowercase + string.digits for x in s)\n\nif __name__ == \"__main__\":\n    print(isValid(\"a\"))\n    print(isValid(\"a2\"))\n    print(isValid(\"a1\"))\n    print(isValid(\"A1\"))\n    print(isValid(\"Aa\"))\n    print(isValid(\"a2a\"))\n    print(isValid(\"a1a\"))\n    print(isValid(\"a1a2\"))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return re.match(\"^[a-zA-Z0-9]+$\", s)",
      -0.85791015625
    ],
    [
      "class Solution:\n    def isValid(self, s: str) -> bool:\n        return all(c in \"abcdef0123456789\" for c in s)",
      -0.85791015625
    ],
    [
      "import re\n\n\ndef is_valid_string(string, allowed_chars):\n    if not isinstance(string, str):\n        return False\n    if not isinstance(allowed_chars, str):\n        return False\n    if not re.match(r\"^[a-zA-Z0-9]+$\", allowed_chars):\n        return False\n    for char in string:\n        if char not in allowed_chars:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    string = 'abc1123'\n    allowed_chars = 'a-zA-Z0-9'\n    print(is_valid_string(string, allowed_chars))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def checkInclusion(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if t == '*':\n            return True\n        if len(s) > len(t):\n            return False\n        if s == t:\n            return True\n        if s[0] == t[0]:\n            return self.checkInclusion(s[1:], t[1:])\n        return False\n        \n\n\ns = Solution()\ns.checkInclusion('abcd', '*')\nprint s.checkInclusion('abc', '*')\nprint s.checkInclusion('abc', 'ab')\nprint s.checkInclusion('abc', 'abc')\nprint s.checkInclusion('abc', 'abcd')\nprint s.checkInclusion('abc', 'c')",
      -0.85791015625
    ],
    [
      "class Solution:\n\t# @param s, a string\n\t# @param chars, a string of characters\n\t# @return a boolean\n\tdef isMatch(self, s, chars):\n\t\tif not s:\n\t\t\treturn False\n\t\tif not chars:\n\t\t\treturn True\n\t\tfor c in chars:\n\t\t\tif c not in s:\n\t\t\t\treturn False\n\t\treturn True",
      -0.85791015625
    ],
    [
      "def contains_only_numbers(string):\n\treturn re.search(\"^[a-zA-Z0-9]+$\", string)\n\n#print contains_only_numbers(\"asdasd\")\n#print contains_only_numbers(\"asdasdasd\")\n#print contains_only_numbers(\"0asdasd\")",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param valid, a set of characters\n    # @return a boolean\n    def isMatch(self, s, valid):\n        if not s:\n            return False\n        if not valid:\n            return True\n        return all(c in valid for c in s)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.isMatch(\"aa\", \"a\") == True\n    assert s.isMatch(\"aa\", \"a-z\") == True\n    assert s.isMatch(\"aa\", \"0-9\") == True\n    assert s.isMatch(\"aa\", \"a-z0-9\") == True\n    assert s.isMatch(\"aa\", \"a-z\") == False\n    assert s.isMatch(\"aa\", \"a-z0-9a-z\") == False\n    assert s.isMatch(\"a\", \"a\") == True\n    assert s.isMatch(\"a\", \"a-z\") == False\n    assert s.isMatch(\"a\", \"0-9\") == False\n    assert s.isMatch(\"a\", \"a-z0-9\") == False",
      -0.8583984375
    ],
    [
      "#!/bin/python\n\n# write your code here\n\ndef isValid(str):\n    return all(ord(c) >= ord('a') and ord(c) <= ord('z') or ord(c) >= ord('0') and ord(c) <= ord('9') for c in str)\n\nif __name__ == '__main__':\n    assert isValid(\"a123456789\") == True\n    assert isValid(\"a123456789a123456789\") == False",
      -0.8583984375
    ],
    [
      "def is_valid_string(s):\n    regex = re.compile('[a-z0-9]*')\n    return regex.match(s)\n\nif __name__ == \"__main__\":\n    assert is_valid_string(\"1234567890\"), \"Should be valid\"\n    assert not is_valid_string(\"abcdefghijklmnopqrstuvwxyz\"), \"Should be invalid\"",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return re.match(\"^[a-zA-Z0-9]+$\", s)\n\n    def checkValid2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return re.match(\"^[a-zA-Z0-9]+$\", s)\n\n\nif __name__ == \"__main__\":\n    print Solution().checkValid(\"a-z\")\n    print Solution().checkValid2(\"a-z\")\n    print Solution().checkValid2(\"a-z0-9\")\n    print Solution().checkValid2(\"a-z0-9_\")\n    print Solution().checkValid2(\"a-z0-9_a-z\")\n    print Solution().checkValid2(\"a-z0-9_a-z0-9_\")",
      -0.8583984375
    ],
    [
      "def contains_only_digits(s):\n    pattern = r'\\d+'\n    return re.search(pattern, s) is not None\n\nif __name__ == \"__main__\":\n    assert contains_only_digits('123') == True\n    assert contains_only_digits('abc') == False\n    assert contains_only_digits('0123') == True",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return re.search('[a-zA-Z0-9]*', s) is not None",
      -0.8583984375
    ],
    [
      "import re\n\ndef is_valid_email(email):\n    valid_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    if len(email)!= 15:\n        return False\n    if email.isalpha() == False:\n        return False\n    if email.isnumeric() == False:\n        return False\n    if email.isdigit() == False:\n        return False\n    for c in email:\n        if c not in valid_chars:\n            return False\n    return True\n\ndef main():\n    s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@gmail.com'\n    print(is_valid_email(s))\n    s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    print(is_valid_email(s))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return True\n        regex = r'^[a-z0-9]*$'\n        return re.match(regex, s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.checkValid('abcd')\n    print s.checkValid('ac')\n    print s.checkValid('0123456789')\n    print s.checkValid('0123456789abcdefg')",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def containsOnly(self, s, chars):\n        \"\"\"\n        :type s: str\n        :type chars: str\n        :rtype: bool\n        \"\"\"\n        regex = re.compile('[^a-zA-Z0-9]')\n        return regex.search(s) == None\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.containsOnly(\"abcd\", \"abcd\") == True\n    assert s.containsOnly(\"abcd\", \"cde\") == False\n    assert s.containsOnly(\"abcd\", \"a\") == False\n    assert s.containsOnly(\"abcd\", \"a\") == False\n    assert s.containsOnly(\"abcd\", \"a\") == False\n    assert s.containsOnly(\"abcd\", \"a\") == False\n    assert s.containsOnly(\"abcd\", \"\") == True",
      -0.85888671875
    ],
    [
      "#!/usr/bin/env python\n\ndef is_valid_phone_number(number):\n    #print \"number: \", number\n    if number.isdigit():\n        return True\n    else:\n        return False\n\ndef main():\n    print is_valid_phone_number(\"12345\")\n\nif __name__ == \"__main__\":\n    main()",
      -0.86083984375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param character, a character\n    # @return a boolean\n    def isMatch(self, s, character):\n        return re.search(r'[a-zA-Z0-9]*', s)!= None",
      -0.86083984375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport re\n\ndef check_string(str):\n    return re.search(r'^[a-zA-Z0-9]+$', str)\n\nif __name__ == '__main__':\n    print check_string('ABCD')\n    print check_string('Z')\n    print check_string('a')\n    print check_string('0')\n    print check_string('12345')",
      -0.86083984375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a boolean\n    def isPalindrome(self, s):\n        return self.__isPalindrome(s)\n\n    def __isPalindrome(self, s):\n        if s is None:\n            return False\n\n        # if s is empty, return false\n        if len(s) <= 1:\n            return False\n\n        # if s is a single character, return true\n        if len(s) == 2:\n            return True\n\n        # if s is a string of two characters, return false\n        if s[0] == s[-1]:\n            return False\n\n        # if s has more than 2 characters, split the string into two parts\n        # and check each part for palindromity\n        first, second = s[0:len(s)/2], s[len(s)/2:]\n        return self.__isPalindrome(first) and self.__isPalindrome(second)\n\n\nif __name__ == \"__main__\":\n    assert Solution().isPalindrome(\"A man, a plan, a canal: Panama\")\n    assert not Solution().isPalindrome(\"race a car\")",
      -1.39453125
    ],
    [
      "# https://leetcode.com/problems/valid-base-numbers/\n# time:O(n)\n# space:O(1)\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return all(c.isalpha() or c.isdigit() for c in s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.isValid('ab12'))",
      -1.7529296875
    ],
    [
      "#Write your code here\ndef isValid(s):\n    return all(char.isalpha() and char.isdigit() for char in s)\n\n#Input: s = \"abcd\"\n#Output: True\n#Explanation: All characters are a-z, a-z and 0-9.\n\n#Input: s = \"abc123\"\n#Output: False\n#Explanation: The string \"abc123\" is not valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation: The string \"abc1z23\" is valid.\n\n#Input: s = \"abc1z23\"\n#Output: True\n#Explanation",
      -1.97265625
    ],
    [
      "def is_valid_password(password):\n    return re.match(\"^[a-zA-Z0-9]+$\", password)\n\ndef is_valid_username(username):\n    return re.match(\"^[a-zA-Z0-9]+$\", username)\n\ndef is_valid_email(email):\n    return re.match(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$\", email)\n\ndef is_valid_phone_number(phone_number):\n    return re.match(\"^[0-9]{10}$\", phone_number)\n\ndef is_valid_website(website):\n    return re.match(\"^(http|https|ftp)://[a-zA-Z0-9.-]+(.[a-zA-Z]{2,3}|\\.[a-zA-Z]{2,3}(.[a-zA-Z]{2,3})?)$\", website)\n\ndef is_valid_address(address):\n    return re.match(\"^[a-zA-Z0-9.-]+\\s[a-zA-Z0-9.-]+\\s[a-zA-Z0-9.-]+\\s[a-zA-Z0-9.-]*$\", address)\n\ndef is_valid_date(date):\n    return re.match(\"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\", date)\n\ndef is_valid_ssn(ssn):\n    return re.match(\"^[0-9]{3}-[0-9]{2}-[0-9]{4}$\", ssn)\n\ndef is_valid_ssn(ssn):\n    return re.match(\"^[0-9]{3}-[0-9]{2}-[0-9]{4}$\", ssn)\n\ndef is_valid_ssn(ssn):\n    return re.match(\"^[0-9]{3",
      -2.001953125
    ],
    [
      "def is_valid(s):\n    if not s:\n        return False\n    if len(s) > 100:\n        return False\n    if s.upper() in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if s.upper() in \"0123456789\":\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    s = \"abcde12345\"\n    assert is_valid(s) == True\n    s = \"0123456789\"\n    assert is_valid(s) == True\n    s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6\"\n    assert is_valid(s) == True\n    s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6\"\n    assert is_valid(s) == True\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert is_valid(s) == True\n    s = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    assert is_valid(s) == True\n    s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6\"\n    assert is_valid(s) == True",
      -2.171875
    ],
    [
      "def is_palindrome(s):\n    if len(s) <= 1:\n        return True\n    else:\n        s1 = s[:len(s)/2]\n        s2 = s[len(s)/2:]\n        return is_palindrome(s1) and is_palindrome(s2)\n\ndef test():\n    assert is_palindrome(\"\") == True\n    assert is_palindrome(\"a\") == False\n    assert is_palindrome(\"abc\") == False\n    assert is_palindrome(\"abcdef\") == True\n    assert is_palindrome(\"abcdefabcdef\") == False\n    assert is_palindrome(\"a1a2a3a4a5a6a7a8a9aaabacadaeaf\") == False\n    assert is_palindrome(\"a1a2a3a4a5a6a7a8a9aaabacadaeaf\") == True\n\nif __name__ == \"__main__\":\n    test()",
      -2.32421875
    ],
    [
      "def is_valid_numeric_string(numeric_string):\n    return all(char in \"0123456789\" for char in numeric_string)\n\ndef test_is_valid_numeric_string():\n    assert is_valid_numeric_string(\"0\")\n    assert is_valid_numeric_string(\"123\")\n    assert is_valid_numeric_string(\"abc\")\n    assert not is_valid_numeric_string(\"abcdefg\")\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\n\ndef is_valid_alphanumeric_string(alphanumeric_string):\n    return all(char in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" for char in alphanumeric_string)\n\ndef test_is_valid_alphanumeric_string():\n    assert is_valid_alphanumeric_string(\"abc\")\n    assert is_valid_alphanumeric_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\n    assert not is_valid_alphanumeric_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")\n\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\"\"\"\n\ndef is_valid_alphanumeric_string_regex(alphanumeric_string):\n    return all(re.match(\"[a-zA-Z0-9]*\", alphanumeric_string) is not None)\n\ndef test_is_valid_alphanumeric_string_regex():\n    assert is_valid_alphanumeric_string_regex(\"abc\")\n    assert is_valid_alphanumeric_string_regex(\"abcdefghijklmnopqrstuvwxyz",
      -2.419921875
    ],
    [
      "# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hackerearth.com/problem/algorithm/cipher-words/\n# https://www.hac",
      -3.525390625
    ],
    [
      "class Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return all(char in 'abcdef0123456789' for char in s)\n\n    def checkValid1(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return all(char in 'abcdef0123456789' for char in s) and all(char in 'abcdef0123456789' for char in s) and all(char in 'abcdef0123456789' for char in s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    s.checkValid(\"abc\")\n    s.checkValid(\"abcd\")\n    s.checkValid(\"123\")\n    s.checkValid(\"0123456789\")\n    s.checkValid(\"0123456789\")\n    s.checkValid(\"0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef0123456789\")\n    s.checkValid(\"abcdef01",
      -3.603515625
    ],
    [
      "def contains_digits(s):\n    return re.search(\"\\d\", s)\n\ndef contains_only_digits(s):\n    return re.match(\"\\d+\", s)\n\ndef contains_a_z(s):\n    return re.search(\"[a-z]\", s)\n\ndef contains_a_z_and_digits(s):\n    return re.match(\"[a-z0-9]+\", s)\n\ndef contains_a_z_and_digits_and_lowercase(s):\n    return re.match(\"[a-z0-9]*[a-z]*\", s)\n\ndef contains_a_z_and_digits_and_uppercase(s):\n    return re.match(\"[A-Z0-9]*[a-z]*\", s)\n\ndef contains_a_z_and_digits_and_lowercase_and_uppercase(s):\n    return re.match(\"[A-Z0-9]*[a-z]*[A-Z]*\", s)\n\ndef contains_a_z_and_digits_and_uppercase_and_lowercase(s):\n    return re.match(\"[A-Z0-9]*[a-z]*[a-z]*\", s)\n\ndef contains_only_a_z(s):\n    return re.match(\"[a-z]+\", s)\n\ndef contains_only_a_z_and_digits(s):\n    return re.match(\"[a-z0-9]+\", s)\n\ndef contains_only_a_z_and_digits_and_lowercase(s):\n    return re.match(\"[a-z0-9]*[a-z]*\", s)\n\ndef contains_only_a_z_and_digits_and_uppercase(s):\n    return re.match(\"[A-Z0-9]*[a-z]*\", s)\n\ndef contains_only_a_z_and_digits_and_lowercase_and_uppercase(s):\n    return re.match(\"",
      -3.638671875
    ],
    [
      "from string import ascii_letters, digits\n\ndef check_string(string):\n    return all(char in ascii_letters + digits + '-_')\n\nif __name__ == '__main__':\n    assert check_string('a1b2c3d4e5')\n    assert not check_string('a-b')\n    assert not check_string('a0b')\n    assert not check_string('a$b')\n    assert not check_string('a+b')\n    assert not check_string('a,b')\n    assert not check_string('a!b')\n    assert not check_string('a(b')\n    assert not check_string('a)b')\n    assert not check_string('a?b')\n    assert not check_string('a.b')\n    assert not check_string('a@b')\n    assert not check_string('a#b')\n    assert not check_string('a^b')\n    assert not check_string('a&b')\n    assert not check_string('a|b')\n    assert not check_string('a:b')\n    assert not check_string('a;b')\n    assert not check_string('a<b')\n    assert not check_string('a>b')\n    assert not check_string('a=b')\n    assert not check_string('a~b')\n    assert not check_string('a[b')\n    assert not check_string('a]b')\n    assert not check_string('a{b')\n    assert not check_string('a}b')\n    assert not check_string('a*b')\n    assert not check_string('a+b')\n    assert not check_string('a/b')\n    assert not check_string('a?b')\n    assert not check_string('a!b')\n    assert not check_string('a&b')\n    assert not check_string('a|b')\n    assert not check_string('a(b')\n    assert not check_string('a)b')\n    assert not check_string('a^b')\n    assert not check_string('a[b')\n    assert not check_string('a]b",
      -3.912109375
    ],
    [
      "def is_valid(s):\n\treturn all(ch.isalpha() or ch.isdigit() for ch in s)\n\nif __name__ == '__main__':\n\ts = 'abc'\n\tprint(is_valid(s))\n\tprint(is_valid('123'))\n\tprint(is_valid('a1'))\n\tprint(is_valid('a'))\n\tprint(is_valid('aa'))\n\tprint(is_valid('a0'))\n\tprint(is_valid('a-a'))\n\tprint(is_valid('a-b'))\n\tprint(is_valid('a-z'))\n\tprint(is_valid('a-z1'))\n\tprint(is_valid('a-z0'))\n\tprint(is_valid('a-0'))\n\tprint(is_valid('a0-z'))\n\tprint(is_valid('a0-z1'))\n\tprint(is_valid('a0-z0'))\n\tprint(is_valid('a0-0'))\n\tprint(is_valid('a-a0'))\n\tprint(is_valid('a-a0-z'))\n\tprint(is_valid('a-a0-z1'))\n\tprint(is_valid('a-a0-z0'))\n\tprint(is_valid('a-a0-0'))\n\tprint(is_valid('a-0-a'))\n\tprint(is_valid('a-0-a0'))\n\tprint(is_valid('a-0-a0-z'))\n\tprint(is_valid('a-0-a0-z1'))\n\tprint(is_valid('a-0-a0-z0'))\n\tprint(is_valid('a-0-a0-0'))\n\tprint(is_valid('a-0-0-a'))\n\tprint(is_valid('a-0-0-a0'))\n\tprint(is_valid('a-0-0-a0-z'))\n\tprint(is_valid('a-0-0-a0-z",
      -4.18359375
    ],
    [
      "#!/bin/python\n\n#!/bin/python\n\n# Complete the function below.\ndef checkValid(s):\n    return s[0] in \"abcdefghijklmnopqrstuvwxyz\" and s[1] in \"abcdefghijklmnopqrstuvwxyz0123456789\"\n\n# SAMPLE INPUT:\n# \"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"\n# SAMPLE OUTPUT:\n# True\n# True\n\ns = \"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"\n\ncheckValid(s)",
      -4.27734375
    ],
    [
      "# import re\n\ndef contains_only_num(s):\n    # print s\n    return re.findall('[0-9a-zA-Z]+', s)\n\nif __name__ == '__main__':\n    # print contains_only_num(\"a\")\n    print contains_only_num(\"a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a9a0a1a2a3a4a5a6a7a8a",
      -4.328125
    ],
    [
      "import re\n\ndef check_if_valid(string, pattern):\n    # write your code here\n    return re.compile(pattern).search(string) is not None\n\nif __name__ == \"__main__\":\n    print(check_if_valid(\"abc\", \"^[a-z]{3,}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z0-9]{10,}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z0-9]{5,}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z0-9]{1,3}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z]{2,}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z]{4,}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z]{10,}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z]{5,}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z]{1,3}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z]{2,}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z]{4,}$\"))\n    print(check_if_valid(\"abcdefghijklmnopqrstuvwxyz\", \"^[a-z]{10,}$\"))\n    print(check_",
      -4.33984375
    ],
    [
      "import re\n\ndef is_valid_phone(s):\n    pattern = re.compile('^\\d{3}$')\n    return pattern.match(s)\n\nif __name__ == '__main__':\n    s = 'abc123'\n    print(is_valid_phone(s))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid_phone('123abc'))\n    print(is_valid",
      -4.3671875
    ],
    [
      "import re\n\ndef contains_only_digits(string):\n    return re.search('^[0-9]*$', string)\n\nif __name__ == '__main__':\n    print(contains_only_digits('abc123'))\n    print(contains_only_digits('abc'))\n    print(contains_only_digits('123'))\n    print(contains_only_digits('123456789'))\n    print(contains_only_digits('abcdefghijklmnopqrstuvwxyz'))",
      -4.7734375
    ],
    [
      "# TODO\n# - Check for empty string\n# - Check for multiple instances of the same character\n# - Check for the case where the string is empty\n# - Check for the case where the string contains a non-a-z character\n# - Check for the case where the string contains a non-0-9 character\n\n# TODO\n# - Check for a case where the string is empty\n# - Check for a case where the string contains a non-a-z character\n# - Check for a case where the string contains a non-0-9 character\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # TODO\n        # - Check for empty string\n        # - Check for multiple instances of the same character\n        # - Check for the case where the string is empty\n        # - Check for the case where the string contains a non-a-z character\n        # - Check for the case where the string contains a non-0-9 character\n        return s.isalpha() and s.isnumeric()",
      -4.78515625
    ],
    [
      "#!/usr/bin/env python\n\nclass Solution(object):\n    def valid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return all(c in \"abcdefghijklmnopqrstuvwxyz0123456789\" for c in s)\n\n    def validRegex(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return all(c in \"abcdefghijklmnopqrstuvwxyz0123456789\" for c in s) and all(c in \"a-z\" for c in s) and all(c in \"0-9\" for c in s)\n\nif __name__ == \"__main__\":\n    assert Solution().valid(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26a1b2c3d4e",
      -4.99609375
    ],
    [
      "def contains_only_characters(s, chars):\n    return all(ch in chars for ch in s)\n\nprint contains_only_characters(\"abc\", \"abc\")\nprint contains_only_characters(\"a-z\", \"abc\")\nprint contains_only_characters(\"abc0\", \"abc\")\nprint contains_only_characters(\"abc-\", \"abc\")\nprint contains_only_characters(\"abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-abc-",
      -5.6015625
    ],
    [
      "class Solution(object):\n    def valid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return all(char in \"abcdef0123456789\" for char in s)\n\n    def check(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return self.valid(s) and self.valid(s.lower()) and self.valid(s.upper())\n\n\nif __name__ == \"__main__\":\n    Solution().check(\"hello\")\n    Solution().check(\"abc\")\n    Solution().check(\"0123456789\")\n    Solution().check(\"a-z\")\n    Solution().check(\"A-Z\")",
      -6.16015625
    ],
    [
      "# I have only used the regex function in this project, so I have written this function using regex.\n# I have used a function to check if the string is a number.\n# I have used the regex to check for numbers\n# I have used the regex to check for only letters and numbers\n\n# I have used the regex to check for only numbers and letters.\n# I have used the regex to check for only numbers and letters and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to check for only letters and numbers and numbers.\n# I have used the regex to",
      -6.40234375
    ],
    [
      "class Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # 1. Check whether s is a valid string\n        # 2. Check whether s contains only a-z, a-z and 0-9\n        # 3. Check whether s contains only a-z, a-z and 0-9\n        # 4. Check whether s contains only a-z, a-z and 0-9\n        # 5. Check whether s contains only a-z, a-z and 0-9\n        # 6. Check whether s contains only a-z, a-z and 0-9\n        # 7. Check whether s contains only a-z, a-z and 0-9\n        # 8. Check whether s contains only a-z, a-z and 0-9\n        # 9. Check whether s contains only a-z, a-z and 0-9\n        # 10. Check whether s contains only a-z, a-z and 0-9\n        # 11. Check whether s contains only a-z, a-z and 0-9\n        # 12. Check whether s contains only a-z, a-z and 0-9\n        # 13. Check whether s contains only a-z, a-z and 0-9\n        # 14. Check whether s contains only a-z, a-z and 0-9\n        # 15. Check whether s contains only a-z, a-z and 0-9\n        # 16. Check whether s contains only a-z, a-z and 0-9\n        # 17. Check whether s contains only a-z, a-z and 0-9\n        # 18. Check whether s contains only a-z, a-z and 0-9\n        # 19. Check whether s contains only a-z, a-z and 0-9\n        # 20. Check whether s contains only a-z, a-z and 0-9\n        # 21. Check whether s contains only a-z, a-z and 0-9\n        # 22. Check whether s contains only a-z, a-z and 0-9\n        # 23. Check whether s contains only a-z, a-z and 0-9",
      -7.2265625
    ],
    [
      "import re\n\ndef contains_only_characters(s, chars):\n    return re.match(r'^[a-z0-9]*$', s) is not None\n\nif __name__ == '__main__':\n    assert contains_only_characters('abc', 'abc')\n    assert not contains_only_characters('abc', 'ABC')\n    assert contains_only_characters('0123456789', '0123456789')\n    assert not contains_only_characters('0123456789', 'ABC')\n    assert not contains_only_characters('abc', 'ABC')\n    assert not contains_only_characters('abc', '0-9')\n    assert contains_only_characters('abc', '0-9')\n    assert not contains_only_characters('0123456789', '0-9')\n    assert contains_only_characters('0123456789', 'a-z')\n    assert contains_only_characters('0123456789', 'A-Z')\n    assert contains_only_characters('0123456789', 'a-z0-9')\n    assert not contains_only_characters('0123456789', 'a-z0-9')",
      -7.578125
    ],
    [
      "#Write your code below\n#input = \"abcdefghijklmnopqrstuvwxyz1234567890\"\n\n#input = \"abcdefghijklmnopqrstuvwxyz1234567890\"\ninput = \"abcdefghijklmnopqrstuvwxyz1234567890\"\n\n#print \"The input string is: \" + input\n\n#print \"The output is: \" + check_if_string_is_valid(input)\n\n#check_if_string_is_valid(\"abcdefghijklmnopqrstuvwxyz1234567890\")\n\ndef check_if_string_is_valid(string):\n    #regex = r'[a-zA-Z0-9]'\n    regex = r'[a-zA-Z0-9]*'\n    #regex = r'[a-zA-Z0-9]*[a-zA-Z0-9]*'\n    #regex = r'[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*'\n    #regex = r'[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*'\n\n    return all(char in string for char in regex)\n    #return all(char in string for char in regex)\n    #return regex.match(string) is not None\n    #return regex.match(string) is not None\n\n\n#test_cases = [\n#    (\"abcdefghijklmnopqrstuvwxyz1234567890\", True),\n#    (\"abcdefghijklmnopqrstuvwxyz1234567890\", False),\n#    (\"abcdefghijklmnopqrstuvwxyz1234567890\", True),\n#    (\"abcdefghijklmnopqrstuvwxyz1234567890\", False),\n#    (\"abcdefghijklmnopqrstuvw",
      -7.88671875
    ],
    [
      "# Write your code here\n#\n#\ndef contains_only_number(s):\n    # Complete this function\n    pass\n\nif __name__ == '__main__':\n    s = 'abcabc123'\n    print contains_only_number(s)\n    print\n    s = '123456789'\n    print contains_only_number(s)\n    print\n    s = '1234'\n    print contains_only_number(s)\n    print\n    s = 'abc'\n    print contains_only_number(s)\n    print\n    s = 'abcabc123abc'\n    print contains_only_number(s)\n    print\n    s = 'abcabc123'\n    print contains_only_number(s)\n    print\n    s = '123456789'\n    print contains_only_number(s)\n    print\n    s = '1234'\n    print contains_only_number(s)\n    print\n    s = 'abc'\n    print contains_only_number(s)\n    print\n    s = 'abcabc123abc'\n    print contains_only_number(s)\n    print\n    s = 'abcabc123'\n    print contains_only_number(s)\n    print\n    s = '123456789'\n    print contains_only_number(s)\n    print\n    s = '1234'\n    print contains_only_number(s)\n    print\n    s = 'abc'\n    print contains_only_number(s)\n    print\n    s = 'abcabc123abc'\n    print contains_only_number(s)\n    print\n    s = 'abcabc123'\n    print contains_only_number(s)\n    print\n    s = '123456789'\n    print contains_only_number(s)\n    print\n    s = '1234'\n    print contains_only_number(s)\n    print\n    s = 'abc'\n    print contains_only_number(s)\n    print\n    s = 'abcabc123abc'\n    print contains_only_number(s)\n    print\n    s = 'abcabc123'\n    print contains_only",
      -8.1796875
    ],
    [
      "#!/usr/bin/python\n\n# the given string is \"a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-01-23-45-67-89\"\n# return true if the given string contains only a-z, a-z and 0-9\n\ndef is_valid(string):\n    if not isinstance(string, str):\n        return False\n    if not string:\n        return False\n    if len(string) > 100:\n        return False\n    if not string.isalnum():\n        return False\n    if not string.isupper():\n        return False\n    if not string.isdigit():\n        return False\n    return True\n\ndef check(string):\n    if is_valid(string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\nif __name__ == \"__main__\":\n    print check(\"a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-01-23-45-67-89\")",
      -8.3828125
    ],
    [
      "# Write your code here\ndef is_valid_sudoku(sudoku):\n    \"\"\"\n    :type sudoku: str\n    :rtype: bool\n    \"\"\"\n    sudoku = sudoku.replace(\" \",\"\")\n    sudoku = sudoku.replace(\"\\n\",\"\")\n    sudoku = sudoku.replace(\"\\r\",\"\")\n    sudoku = sudoku.replace(\"\\t\",\"\")\n    sudoku = sudoku.replace(\"\\v\",\"\")\n    sudoku = sudoku.replace(\"\\f\",\"\")\n    sudoku = sudoku.replace(\"\\x0b\",\"\")\n    sudoku = sudoku.replace(\"\\x0c\",\"\")\n    sudoku = sudoku.replace(\"\\x0e\",\"\")\n    sudoku = sudoku.replace(\"\\x0f\",\"\")\n    sudoku = sudoku.replace(\"\\x10\",\"\")\n    sudoku = sudoku.replace(\"\\x11\",\"\")\n    sudoku = sudoku.replace(\"\\x12\",\"\")\n    sudoku = sudoku.replace(\"\\x13\",\"\")\n    sudoku = sudoku.replace(\"\\x14\",\"\")\n    sudoku = sudoku.replace(\"\\x15\",\"\")\n    sudoku = sudoku.replace(\"\\x16\",\"\")\n    sudoku = sudoku.replace(\"\\x17\",\"\")\n    sudoku = sudoku.replace(\"\\x18\",\"\")\n    sudoku = sudoku.replace(\"\\x19\",\"\")\n    sudoku = sudoku.replace(\"\\x1a\",\"\")\n    sudoku = sudoku.replace(\"\\x1b\",\"\")\n    sudoku = sudoku.replace(\"\\x1c\",\"\")\n    sudoku = sudoku.replace(\"\\x1d\",\"\")\n    sudoku = sudoku.replace(\"\\x1e\",\"\")\n    sudoku = sudoku.replace(\"\\x1f\",\"\")\n    sudoku = sudoku.replace(\"\\x20\",\"\")\n    sudoku = sud",
      -8.390625
    ],
    [
      "def is_valid_email(email):\n    #return re.match('^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$', email)\n    return True if re.match('^[a-z0-9]{1,}$', email) else False\n\nif __name__ == '__main__':\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.com\"))\n    print(is_valid_email(\"haha@haha.",
      -9.1015625
    ],
    [
      "# The function should return true if the string can be encoded using the given encoding.\n# The function should return false otherwise.\n\n# Example:\n# s = \"a1b2\"\n# encoded = \"a1b2\"\n# encoded = \"a1b2\"\n# encoded = \"a1b2\"\n# encoded = \"a1b2\"\n# encoded = \"a1b2\"\n# encoded = \"a1b2\"\n# encoded = \"a1b2\"\n# encoded = \"a1b2\"\n\ndef is_valid_string(s, charset):\n    # Write your code here\n    return s.replace(\" \", \"\") in charset\n\n# Test cases\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"0-9\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a1b2\", \"a-z\")\nprint is_valid_string(\"a",
      -9.3125
    ],
    [
      "# http://www.tutorialspoint.com/python/python_regex.htm\n\ndef is_valid_string(string):\n    #print string\n    #print \"string: \" + string\n    regex = r'^[a-zA-Z0-9]+$'\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False\n\ndef main():\n    string = 'asdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdasdf123asdas",
      -9.4765625
    ],
    [
      "class Solution(object):\n    def checkSubstring(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: str\n        :rtype: bool\n        \"\"\"\n        if len(s) < k:\n            return False\n        if len(s) == k:\n            return True\n        if not s.isalpha():\n            return False\n        if not s.isdigit():\n            return False\n        if not s.isupper():\n            return False\n        if not s.islower():\n            return False\n        return self.checkSubstring(s[k:], k)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.checkSubstring(\"abc\", 3))\n    print(s.checkSubstring(\"abc\", 4))\n    print(s.checkSubstring(\"abc\", 5))\n    print(s.checkSubstring(\"abc\", 6))\n    print(s.checkSubstring(\"abc\", 7))\n    print(s.checkSubstring(\"abc\", 8))\n    print(s.checkSubstring(\"abc\", 9))",
      -9.6875
    ],
    [
      "def checkValid(str, chars):\n    pattern = re.compile(r'[a-zA-Z0-9]+')\n    return pattern.match(str) is not None\n\nif __name__ == '__main__':\n    str = 'hello'\n    chars = 'a-zA-Z0-9'\n    print checkValid(str, chars)\n    print checkValid('helloworld', chars)\n    print checkValid('hello', chars)\n    print checkValid('hello, world', chars)\n    print checkValid('hello,hello,world', chars)\n    print checkValid('hello,hello,hello,world', chars)\n    print checkValid('hello,hello,hello,hello,world', chars)\n    print checkValid('hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello,hello",
      -10.1328125
    ],
    [
      "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def checkInclusion(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        return s.replace('a', '').replace('z', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('a', '').replace('z', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('a', '').replace('z', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('a', '').replace('z', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('a', '').replace('z', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('a', '').replace('z', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('a', '').replace('z', ''",
      -12.1953125
    ],
    [
      "class Solution:\n    # @param {string} str\n    # @param {string} pattern\n    # @return {boolean}\n    def isMatch(self, str, pattern):\n        if len(str)!= len(pattern):\n            return False\n        # check the first char\n        if pattern[0] == '*':\n            if str[0]!= '*':\n                return False\n            pattern = pattern[1:]\n            str = str[1:]\n        # check the last char\n        if pattern[-1] == '*':\n            if str[-1]!= '*':\n                return False\n            pattern = pattern[:-1]\n            str = str[:-1]\n        # check the first char\n        if pattern[0] == '?':\n            if str[0]!= '?' and str[0]!= pattern[0]:\n                return False\n            pattern = pattern[1:]\n            str = str[1:]\n        # check the last char\n        if pattern[-1] == '?':\n            if str[-1]!= '?' and str[-1]!= pattern[-1]:\n                return False\n            pattern = pattern[:-1]\n            str = str[:-1]\n        # check the middle\n        for i in range(1, len(pattern)-1):\n            if pattern[i]!= '?' and str[i]!= pattern[i]:\n                return False\n            pattern = pattern[i+1:]\n            str = str[i+1:]\n        # check the last char\n        if pattern[-1]!= '?' and str[-1]!= pattern[-1]:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.isMatch('aa', 'a'))\n    print(s.isMatch('aa', 'a*'))\n    print(s.isMatch('aa', 'a*a'))\n    print(s.isMatch('aa', 'a?a'))\n    print(s.isMatch('aa', 'a?*'))\n    print(s.isMatch('aa', 'a?*a'))\n    print(s.isMatch",
      -12.453125
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param chars, a string of characters\n    # @return a boolean\n    def isMatch(self, s, chars):\n        if len(s)!= len(chars):\n            return False\n        re = re.compile(r'[^' + chars + ']')\n        if re.match(s):\n            return False\n        return True\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isMatch(\"ab\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"ab\", \"ab\")\n    print s.isMatch(\"abc\", \"a\")\n    print s.isMatch(\"aa\", \"aa\")\n    print s.isMatch(\"ab\", \"abc\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"a\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch(\"aa\", \"a\")\n    print s.isMatch",
      -15.75
    ],
    [
      "# +++your code here+++\n# Write functions and modify main() to call them\n\ndef check_number(s):\n    return all(c in string.ascii_lowercase+string.digits for c in s)\n\ndef check_alpha(s):\n    return all(c in string.ascii_lowercase for c in s)\n\ndef check_alpha_num(s):\n    return check_alpha(s) and check_number(s)\n\ndef check_alpha_num_regex(s):\n    return check_alpha_num(s) and s.lower() == s\n\ndef check_alpha_num_regex_2(s):\n    return check_alpha_num_regex(s) and s.lower() == s\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert check_alpha(\"abcde\"), \"Test Case 1\"\n    assert check_alpha_num(\"abcde\"), \"Test Case 2\"\n    assert check_alpha_num_regex(\"abcde\"), \"Test Case 3\"\n    assert check_alpha_num_regex_2(\"abcde\"), \"Test Case 4\"\n\n\nif __name__ == \"__main__\":\n    main()",
      -16.671875
    ],
    [
      "def is_valid_password(password):\n    # Write your code here\n    # Create a regex object\n    regex = re.compile('[a-zA-Z0-9]*')\n    # Create a string object\n    string = 'abcdefghijklmnopqrstuvwxyz1234567890'\n    # Check if the string is a valid string\n    if regex.match(password):\n        return True\n    else:\n        return False\n\ndef main():\n    # Test cases\n    print is_valid_password('a')\n    print is_valid_password('abc')\n    print is_valid_password('a1')\n    print is_valid_password('abcdef')\n    print is_valid_password('abcdefghijklmnopqrstuvwxyz1234567890')\n    print is_valid_password('abcdefghijklmnopqrstuvwxyz1234567890a')\n    print is_valid_password('abcdefghijklmnopqrstuvwxyz1234567890a1')\n\nif __name__ == '__main__':\n    main()",
      -17.1875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}