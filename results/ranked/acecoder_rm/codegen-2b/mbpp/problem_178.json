{
  "problem": {
    "task_id": "MBPP/189",
    "prompt": "Write a python function to find the first missing positive number.",
    "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
    "test_list": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ],
    "challenge_test_list": [],
    "problem_id": 178
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = nums[i] * -1\n        if nums[i] > nums[i+1]:\n            return i+1\n    return len(nums)\n\nif __name__ == '__main__':\n    print(firstMissingPositive([1, 2, 3, 4, 5, 6]))",
      3.548828125
    ],
    [
      "# First missing positive number\ndef firstMissingPositive(numbers):\n    for i in range(1, len(numbers) + 1):\n        if numbers[i] == i:\n            continue\n        elif numbers[i] > i:\n            return i\n        else:\n            return numbers[i]\n\nprint(firstMissingPositive([1, 2, 3]))",
      1.873046875
    ],
    [
      "def first_missing(numbers):\n    for i in range(len(numbers)):\n        if numbers[i] > 0 and numbers[i] not in numbers:\n            return numbers[i]\n\n\nprint first_missing([1,2,3,4])\nprint first_missing([1,2,-1,3])\nprint first_missing([-1, -2, -3, -4])",
      1.7021484375
    ],
    [
      "def firstMissingPositive(nums):\n    i = 0\n    while i < len(nums):\n        if nums[i] > 0 and nums[i] <= len(nums) and nums[i] not in nums:\n            i += 1\n        else:\n            return i\n    return i\n\nnums = [1, 2, 3, 4]\nprint(firstMissingPositive(nums))",
      1.5732421875
    ],
    [
      "# https://www.hackerrank.com/challenges/first-missing-positive\n\ndef firstMissingPositive(arr):\n    for i in range(0, len(arr)):\n        if arr[i]!= i + 1 and arr[i] > 0:\n            arr[arr[i] - 1] = arr[i]\n    for i in range(0, len(arr)):\n        if arr[i]!= i + 1 and arr[i] < len(arr):\n            arr[arr[i] - 1] = arr[i]\n    for i in range(0, len(arr)):\n        if arr[i]!= i + 1:\n            return i + 1\n    return len(arr) + 1\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(firstMissingPositive(arr))",
      1.4755859375
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            nums[i] = firstMissingPositive(nums[:i])\n        else:\n            return i + 1\n\n    return len(nums) + 1\n\nif __name__ == '__main__':\n    print(firstMissingPositive([1, 0, -1, 3, -4]))",
      1.3271484375
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n        if nums[i] > 0 and nums[i] not in nums:\n            return i\n    return -1",
      1.19921875
    ],
    [
      "def findMissingPositive(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            return i\n    return len(arr)",
      1.1357421875
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(nums):\n        if nums[i] > 0:\n            j = i + 1\n            while j < len(nums):\n                if nums[j] == 0:\n                    return j\n                j += 1\n        i += 1\n    return -1",
      0.828125
    ],
    [
      "import sys\n\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            j = 0\n            while j < i:\n                if nums[j] > 0 and nums[j] < nums[i]:\n                    nums[i] = -nums[i]\n                j += 1\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            return i\n    return len(nums)\n\nif __name__ == \"__main__\":\n    nums = [1, 2, -3, 4, -5, 6]\n    print(firstMissingPositive(nums))",
      0.81005859375
    ],
    [
      "import sys\n\ndef findMissingPositive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(numbers)):\n        if numbers[i] > 0:\n            count += 1\n    if count == 0:\n        return numbers[0]\n    else:\n        return findMissingPositive(numbers[:count])\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    numbers = map(int, input().split())\n    print(findMissingPositive(numbers))\n\nif __name__ == '__main__':\n    sys.exit(main())",
      0.57275390625
    ],
    [
      "# https://www.hackerrank.com/challenges/first-missing-positive\n# https://www.codeeval.com/open_challenges/5/\n\ndef find_missing_positive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0 and n / i > 0:\n            n /= i\n        else:\n            return i\n    return n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(find_missing_positive(n))",
      0.01837158203125
    ],
    [
      "def first_missing_positive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # Your Solution Here\n    for i in range(len(numbers)):\n        if numbers[i] < 0:\n            continue\n        elif numbers[i] > 0:\n            return i\n        else:\n            return i\n    return -1",
      -0.25927734375
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = nums[i] + len(nums)\n        elif nums[i] > len(nums):\n            nums[i] = nums[i] - len(nums)\n        elif nums[i] == len(nums):\n            return i\n        else:\n            return -1",
      -0.30224609375
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    \n    for i in range(len(nums)):\n        if nums[i] < 0:\n            return i + 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] > 0:\n            return i + 1\n    return len(nums) + 1",
      -0.31201171875
    ],
    [
      "def first_missing_positive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(2, n+1):\n        if i not in [j for j in range(2, n+1) if j%i==0]:\n            return i\n    return n+1\n\nif __name__ == '__main__':\n    print(first_missing_positive(6))\n    print(first_missing_positive(7))",
      -0.65185546875
    ],
    [
      "def firstMissingPositive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    for i in range(len(numbers)):\n        if numbers[i] > 0 and numbers[i] <= len(numbers) and numbers[i] not in numbers:\n            numbers[i] = -1\n    for i in range(len(numbers)):\n        if numbers[i] > 0 and numbers[i] <= len(numbers) and numbers[i] not in numbers:\n            return i\n    return -1",
      -0.65283203125
    ],
    [
      "def firstMissingPositive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 1\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n + 1",
      -0.85693359375
    ],
    [
      "def find_missing_positive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(0, len(numbers)):\n        if numbers[i] < 0:\n            numbers[i] = 0\n    for i in range(0, len(numbers)):\n        if numbers[i] == 0:\n            return i\n    return -1",
      -0.85693359375
    ],
    [
      "from collections import Counter\n\ndef firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        while nums[i] > 0 and nums[i] <= len(nums) and nums[i-1] < nums[i]:\n            nums[i-1], nums[i] = nums[i], nums[i-1]\n            nums[i-1] -= 1\n            if nums[i-1] == 0:\n                return i\n    return len(nums)\n\nif __name__ == '__main__':\n    print(firstMissingPositive([2,3,4,1,2,4]))",
      -0.85693359375
    ],
    [
      "#!/usr/bin/env python\n\n# Note:\n# The solution is trivial, just use a loop.\n\n# Hint:\n# Try to use a while loop.\n\n# Challenge:\n# Can you do it in-place?\n\ndef firstMissingPositive(nums):\n    # write your code here\n    i = 0\n    while i < len(nums):\n        if nums[i] <= 0:\n            nums[i] = -1\n        else:\n            i += 1\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            return i\n    return -1",
      -0.85791015625
    ],
    [
      "def first_missing_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            continue\n        for j in range(i+1, len(nums)):\n            if nums[j] <= 0:\n                continue\n            if nums[i] > nums[j]:\n                nums[j] = nums[i]\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(first_missing_positive(nums))",
      -0.85791015625
    ],
    [
      "def firstMissingPositive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(numbers)):\n        while numbers[i] < 0:\n            if numbers[i] == -1:\n                numbers[i] = numbers[-1]\n                numbers[-1] = -1\n            else:\n                numbers[i] = -numbers[i]\n    for i in range(len(numbers)):\n        if numbers[i] == -1:\n            return i\n    return -1",
      -0.85791015625
    ],
    [
      "def first_missing(numbers):\n    for i in range(1, n+1):\n        if numbers[i-1] > 0 and numbers[i] < 0:\n            return i\n    return 0\n\nnumbers = [1, -1, -3, 4, -2, 3, -1, 2, 1]\nprint(first_missing(numbers))",
      -0.85791015625
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    nums.append(-1)\n    for i in range(len(nums)):\n        while nums[i] == -1:\n            if i + 1 < len(nums) and nums[i + 1] > 0:\n                nums[i] = nums[i + 1]\n            else:\n                return i + 1\n    return len(nums)",
      -0.85791015625
    ],
    [
      "def firstMissingPositive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(1, n+1):\n        if i not in [j for j in range(1, n+1) if j!= i]:\n            return i\n    return n+1\n\nif __name__ == '__main__':\n    print(firstMissingPositive(8))",
      -0.85791015625
    ],
    [
      "def firstMissingPositive(numbers):\n    for i in range(1, len(numbers)):\n        if numbers[i] > 0 and numbers[i] <= len(numbers) and numbers[i]!= numbers[i - 1]:\n            return numbers[i]\n    return -1\n\n\ndef main():\n    numbers = [1, -1, 2, -2, -3]\n    print(firstMissingPositive(numbers))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def firstMissingPositive(nums):\n    for i in range(0,len(nums)):\n        if nums[i] <= 0:\n            return i\n        elif nums[i] > 0 and nums[i] not in nums:\n            return i\n    return len(nums)",
      -0.85791015625
    ],
    [
      "def first_missing_positive(num_list):\n    \"\"\"\n    :type num_list: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(1, len(num_list)):\n        if num_list[i] < 0:\n            return i\n    return -1\n\n\nif __name__ == '__main__':\n    print(first_missing_positive([1, 2, 3, 4]))\n    print(first_missing_positive([2, -4, 5, -3]))\n    print(first_missing_positive([-1, -1, -1, -1, -1]))",
      -0.85791015625
    ],
    [
      "def first_missing(numbers):\n    for i in range(1, n+1):\n        if numbers[i] == 0:\n            return i\n    return -1\n\nnumbers = [2, 3, 0, 4, 1]\nprint(first_missing(numbers))",
      -0.85791015625
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(0, len(arr)):\n        if arr[i] < 0:\n            return i\n    return -1",
      -0.85791015625
    ],
    [
      "def first_missing(numbers):\n    for i in range(1, len(numbers)):\n        if numbers[i] < 0:\n            return i\n    return -1\n\nprint(first_missing([1, 2, 3, 4]))",
      -0.85791015625
    ],
    [
      "def find_missing_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            return i\n    return -1\n\nclass Solution:\n    # @param nums, a list of integer\n    # @return an integer\n    def firstMissingPositive(self, nums):\n        n = len(nums)\n        for i in range(n):\n            if nums[i] < 0:\n                nums[i] = -nums[i]\n        for i in range(n):\n            if nums[i] > 0:\n                return i\n        return -1",
      -0.85791015625
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(nums):\n        if nums[i] <= 0:\n            nums[i] = nums[i] + 1\n        else:\n            i += 1\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            continue\n        else:\n            return i\n    return len(nums)",
      -0.8583984375
    ],
    [
      "def findMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            return i\n    return len(nums)\n\nif __name__ == \"__main__\":\n    print(findMissingPositive([1,2,3,4,5,6]))",
      -0.8583984375
    ],
    [
      "def firstMissingPositive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return -1\n    for i in range(1, n + 1):\n        if n % i == 0 and n!= i:\n            return i\n    return n + 1",
      -0.8583984375
    ],
    [
      "def firstMissingPositive(nums):\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            return i\n    return len(nums)\n\ndef main():\n    nums = [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    print(firstMissingPositive(nums))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def firstMissingPositive(nums):\n    for i in range(1, len(nums)):\n        if nums[i] > 0 and nums[i] <= len(nums) and nums[i] not in nums[1:]:\n            return nums[i]\n    return -1\n\nif __name__ == \"__main__\":\n    print(firstMissingPositive([1, -1, -2, 3]))",
      -0.8583984375
    ],
    [
      "def findMissingPositive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(1, len(numbers)):\n        if numbers[i] > numbers[i-1]:\n            return numbers[i-1]\n    return numbers[0]\n\n\nif __name__ == \"__main__\":\n    numbers = [1,2,3,4,5,6,7,8,9,10]\n    print(findMissingPositive(numbers))",
      -0.8583984375
    ],
    [
      "import sys\n\ndef get_first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    arr = [1, -1, -2, 3, 4, -5, 6]\n    print(get_first_missing_positive(arr))",
      -0.8583984375
    ],
    [
      "def first_missing_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(nums):\n        if nums[i] < 0:\n            i += 1\n            continue\n        else:\n            return i\n    return len(nums)",
      -0.8583984375
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    nums: A list of integers\n\n    Returns the first missing positive number in nums.\n    \"\"\"\n    if not nums:\n        return 1\n    for i in range(0, len(nums)):\n        if nums[i] < 1:\n            nums[i] = firstMissingPositive(nums[i+1:])\n    return nums[0]\n\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(firstMissingPositive(nums))",
      -0.8583984375
    ],
    [
      "# function to find the first missing positive number\ndef find_missing(n):\n    i = 0\n    while i < n:\n        if i == n:\n            return i\n        else:\n            i += 1\n    return i\n\n\n# test case\ntest_case = [1, 0, 2, 3, 4]\nprint find_missing(test_case)",
      -0.8583984375
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            return i\n        elif nums[i] == 0:\n            continue\n        elif nums[i] > nums[nums[i]]:\n            nums[nums[i]] = nums[i]\n            return nums[i]\n    return -1",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/first-missing-positive/\nclass Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        for i in range(n):\n            while nums[i] > 0 and nums[i] <= n and nums[nums[i]-1]!= nums[i]:\n                nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n            if nums[i] <= 0:\n                return i\n        return n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.firstMissingPositive([1, 2, 0]))\n    print(s.firstMissingPositive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.8583984375
    ],
    [
      "def first_missing_positive(numbers):\n    \"\"\"\n    numbers = [1,2,3]\n    return 1\n    \"\"\"\n\n    # check if all numbers are positive\n    for number in numbers:\n        if number <= 0:\n            return number\n    # check if any of the numbers is negative\n    for number in numbers:\n        if number < 0:\n            return number\n    # if none of the numbers is negative\n    # then return the first number that is positive\n    return numbers[0]",
      -0.8583984375
    ],
    [
      "def first_missing(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            nums[i] = nums[i] + len(nums)\n    for i in range(len(nums)):\n        if nums[i] == len(nums):\n            return i + 1\n    return len(nums) + 1\n\nif __name__ == '__main__':\n    print(first_missing([1,2,3,4,5,6]))\n    print(first_missing([-1,0,1,2,3,4,5]))\n    print(first_missing([-1,0,1,2,3,4,5,6]))\n    print(first_missing([1,2,3,4,5,6,7,8]))\n    print(first_missing([1,2,3,4,5,6,7,8,9]))\n    print(first_missing([1,2,3,4,5,6,7,8,9,10]))\n    print(first_missing([-1,0,1,2,3,4,5,6,7,8,9,10]))\n    print(first_missing([-1,0,1,2,3,4,5,6,7,8,9,10,11]))\n    print(first_missing([1,2,3,4,5,6,7,8,9,10,11,12,13]))",
      -0.8583984375
    ],
    [
      "# define first missing positive number\n# first missing positive number = (n-1) * 2 + 1\ndef first_missing_positive_number(n):\n    return (n-1) * 2 + 1\n\nprint(first_missing_positive_number(100))",
      -0.8583984375
    ],
    [
      "def firstMissingPositive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(1, n+1):\n        if n % i == 0 and i > 0:\n            return i\n    return n\n\nif __name__ == \"__main__\":\n    print(firstMissingPositive(10))\n    print(firstMissingPositive(7))\n    print(firstMissingPositive(15))",
      -0.8583984375
    ],
    [
      "def firstMissingPositive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(1, n+1):\n        if n % i == 0:\n            j = i\n            while j < n:\n                if n % j == 0:\n                    return j\n                else:\n                    j += 1\n    return n\n\nif __name__ == \"__main__\":\n    print(firstMissingPositive(5))",
      -0.8583984375
    ],
    [
      "def first_missing(numbers):\n    for i in range(len(numbers)):\n        if numbers[i] < 0:\n            return i\n    return len(numbers)\n\nif __name__ == '__main__':\n    numbers = [1, 2, -1, -2]\n    print(first_missing(numbers))",
      -0.85888671875
    ],
    [
      "def firstMissingPositive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n / i\n        else:\n            i += 1\n    if n > 0:\n        return n\n    else:\n        return -1\n\nif __name__ == '__main__':\n    print firstMissingPositive(20)",
      -0.85888671875
    ],
    [
      "def firstMissingPositive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(numbers)):\n        while numbers[i] > 0 and numbers[i] <= len(numbers) and numbers[numbers[i] - 1] > 0 and numbers[numbers[i] - 1] <= len(numbers) and numbers[i]!= numbers[numbers[i] - 1]:\n            numbers[numbers[i] - 1], numbers[i] = numbers[i], numbers[numbers[i] - 1]\n    if len(numbers) == 0:\n        return 0\n    return numbers[0]",
      -0.85888671875
    ],
    [
      "from collections import Counter\nimport math\n\ndef find_missing_number(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    counter = Counter(numbers)\n    # print counter\n    # print sum(counter.values())\n    for i in range(len(numbers)):\n        if counter[i] < 0:\n            return i\n    return None\n\nif __name__ == '__main__':\n    numbers = [1, -1, 0, 2, -2, 3]\n    print find_missing_number(numbers)\n    # print find_missing_number([1, 1, -1, -2, -2])",
      -0.85888671875
    ],
    [
      "def firstMissingPositive(nums):\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n            return i\n    return len(nums)\n\nnums = [3,4,6,5,9,1,7,1,4,5,8,9,2,7,2,2]\n\nprint(firstMissingPositive(nums))",
      -0.86083984375
    ],
    [
      "def find_missing_positive(numbers):\n    for i in range(1, len(numbers)):\n        if numbers[i] > 0:\n            numbers[i] = -numbers[i]\n            break\n    for i in range(len(numbers) - 1, -1, -1):\n        if numbers[i] < 0:\n            return i\n    return -1",
      -0.86083984375
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(nums):\n        if nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= nums[nums[i] - 1]:\n            nums[nums[i] - 1] = nums[i]\n            i += 1\n        else:\n            return i\n    return i",
      -0.86083984375
    ],
    [
      "def first_missing_positive(numbers):\n    \"\"\"\n    numbers is a list of positive integers.\n\n    Return the first missing positive number.\n    \"\"\"\n    # The first missing positive number is the first number that is not a\n    # multiple of any number in numbers.\n    for i in range(1, n+1):\n        if i not in numbers:\n            return i\n    return n+1\n\n\nprint(first_missing_positive([1,2,3,4,5,6,7,8,9]))",
      -0.86083984375
    ],
    [
      "def firstMissingPositive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(1, n + 1):\n        if n % i == 0:\n            continue\n        if n % i!= i:\n            return i\n    return n\n\nif __name__ == '__main__':\n    assert firstMissingPositive(5) == 2\n    assert firstMissingPositive(10) == 3\n    assert firstMissingPositive(20) == 5",
      -0.8681640625
    ],
    [
      "def firstMissingPositive(numbers):\n    for i in range(1, n):\n        if numbers[i] < 0:\n            numbers[i] = numbers[i] + n\n            return i\n    return n\n\nnumbers = [-1, 0, 1, 2, 3]\nprint(firstMissingPositive(numbers))",
      -1.0830078125
    ],
    [
      "# TODO\n# Add comments\n# Add additional functions\n# Add additional tests\n\ndef first_missing_positive(numbers):\n    \"\"\"\n    Write a function to find the first missing positive number.\n    :param numbers: A list of positive numbers\n    :return: The first missing positive number\n    \"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] < 0:\n            continue\n        if numbers[i] == 0:\n            return i\n        if numbers[i] > 0:\n            return numbers[i]\n    return None\n\ndef test_first_missing_positive():\n    assert first_missing_positive([-1,0,1,2,3]) == 1\n    assert first_missing_positive([-1,0,1,2,3,4]) == 4\n    assert first_missing_positive([-1,0,1,2,3,4,5]) == 5\n    assert first_missing_positive([-1,0,1,2,3,4,5,6]) == 6\n    assert first_missing_positive([-1,0,1,2,3,4,5,6,7]) == 7\n    assert first_missing_positive([-1,0,1,2,3,4,5,6,7,8]) == 8\n    assert first_missing_positive([-1,0,1,2,3,4,5,6,7,8,9]) == 9\n\nif __name__ == '__main__':\n    test_first_missing_positive()",
      -1.376953125
    ],
    [
      "#\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport math\n\n\ndef first_missing(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # first missing positive number\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return -1\n\n\nif __name__ == '__main__':\n    print(first_missing(100))",
      -1.43359375
    ],
    [
      "def firstMissingPositive(nums):\n    for i in range(0, len(nums)):\n        if nums[i] > 0 and nums[i] <= len(nums) and nums[i]!= i+1:\n            return i+1\n    return len(nums) + 1\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print firstMissingPositive(nums)\n    nums = [1, 2, -1, -2, -3]\n    print firstMissingPositive(nums)",
      -1.498046875
    ],
    [
      "def find_missing_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            return i + 1\n    return -1\n\nif __name__ == '__main__':\n    print(find_missing_positive([3, 0, -2, 1, -4, 5]))",
      -1.7548828125
    ],
    [
      "# Example 1:\n# Input: [1,2,0]\n# Output: 2\n# Explanation: The first missing positive number is 2.\n\n# Example 2:\n# Input: [3,4,-1,1]\n# Output: 0\n# Explanation: The first missing positive number is not found.\n\n# Note:\n# The length of the array will be in the range [1, 1000].\n# The range of numbers in the array is [-1000, 1000] and will be positive.\n\nclass Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums)):\n            if nums[i]!= i+1 and nums[i] <= len(nums) and nums[nums[i]-1]!= nums[i]:\n                nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]\n        for i in range(len(nums)):\n            if nums[i]!= i+1:\n                return i+1\n        return len(nums) + 1",
      -2.54296875
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def firstMissingPositive(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if not fast:\n            return slow\n        if not slow.val:\n            return slow\n        slow.val = -slow.val\n        return self.firstMissingPositive(slow.next)",
      -3.43359375
    ],
    [
      "# Example:\n#   Given 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,",
      -3.46484375
    ],
    [
      "# https://leetcode.com/problems/first-missing-positive/\n\nclass Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(nums)):\n            while nums[i] < 0 or nums[i] > len(nums) or nums[nums[i] - 1] == nums[i]:\n                if nums[i] == nums[nums[i] - 1]:\n                    nums[nums[i] - 1] = nums[i]\n                else:\n                    nums[i] = nums[nums[i] - 1]\n        for i in range(len(nums)):\n            if nums[i]!= i + 1:\n                return i + 1\n        return len(nums) + 1\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.firstMissingPositive([0,1,2,3,4,5,6]))\n    print(s.firstMissingPositive([0,1,3,4,5]))\n    print(s.firstMissingPositive([1,2,3]))\n    print(s.firstMissingPositive([-1,1,1]))\n    print(s.firstMissingPositive([0,1,2,3,4,5,6]))\n    print(s.firstMissingPositive([0,1,2,3,4,5]))",
      -3.61328125
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    for i in range(1, len(nums)):\n        if nums[i] > 0 and nums[i] < nums[0]:\n            return i\n    return len(nums)\n\n\nif __name__ == '__main__':\n    print(firstMissingPositive([1, 2, 3]))\n    print(firstMissingPositive([0, 1, 2, 3, 4]))\n    print(firstMissingPositive([-1, -2, -3]))\n    print(firstMissingPositive([-1, -2, -3, -4]))",
      -3.94140625
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    nums: A list of positive integers\n\n    Returns: The first missing positive number\n    \"\"\"\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1] and nums[i] not in nums[:i]:\n            return nums[i]\n    return nums[0]\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4]\n    print(firstMissingPositive(nums))\n    nums = [5, 6, 7, 8, 10]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3, 4, 5]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3, 4, 5, 6]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(firstMissingPositive(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(firstMissingPositive(nums))",
      -4.01171875
    ],
    [
      "def find_missing_positive(n):\n    return 1 if n == 0 else find_missing_positive(n-1)\n\n\ndef find_missing_positive2(n):\n    return 1 if n == 0 else find_missing_positive2(n-1)\n\n\ndef find_missing_positive3(n):\n    return 1 if n == 0 else find_missing_positive3(n-1)\n\n\ndef find_missing_positive4(n):\n    return 1 if n == 0 else find_missing_positive4(n-1)\n\n\ndef find_missing_positive5(n):\n    return 1 if n == 0 else find_missing_positive5(n-1)\n\n\ndef find_missing_positive6(n):\n    return 1 if n == 0 else find_missing_positive6(n-1)\n\n\ndef find_missing_positive7(n):\n    return 1 if n == 0 else find_missing_positive7(n-1)\n\n\ndef find_missing_positive8(n):\n    return 1 if n == 0 else find_missing_positive8(n-1)\n\n\ndef find_missing_positive9(n):\n    return 1 if n == 0 else find_missing_positive9(n-1)\n\n\ndef find_missing_positive10(n):\n    return 1 if n == 0 else find_missing_positive10(n-1)\n\n\ndef find_missing_positive11(n):\n    return 1 if n == 0 else find_missing_positive11(n-1)\n\n\ndef find_missing_positive12(n):\n    return 1 if n == 0 else find_missing_positive12(n-1)\n\n\ndef find_missing_positive13(n):\n    return 1 if n == 0 else find_missing_positive13(n-1)\n\n\nif __name__ == '__main__':\n    print(find_missing_positive(5))\n    print(find_missing_positive2(5))\n    print(find_missing_positive3(5))\n    print(find_missing_positive4(5))\n    print(find_missing_positive5(5))\n    print(find_missing_positive6(5))\n    print(find_missing_positive7",
      -4.3671875
    ],
    [
      "def first_missing_positive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(numbers) and numbers[i] < 0:\n        i += 1\n    if i == len(numbers):\n        return 1\n    j = 0\n    while j < len(numbers) and numbers[j] >= 0:\n        j += 1\n    return j + 1\n\nclass Solution:\n    def firstMissingPositive(self, numbers):\n        \"\"\"\n        :type numbers: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        while i < len(numbers):\n            if numbers[i] < 0:\n                numbers[i] += 1\n            else:\n                i += 1\n        for i in range(len(numbers)):\n            if numbers[i] < 0:\n                numbers[i] += 1\n        for i in range(len(numbers)):\n            if numbers[i] == i + 1:\n                numbers[i] = 0\n        for i in range(len(numbers)):\n            if numbers[i] == i + 1:\n                numbers[i] = i + 1\n        return first_missing_positive(numbers)",
      -4.78515625
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] < 0:\n            nums[i] = nums[i] + 1\n        elif nums[i] == 0:\n            nums[i] = nums[i + 1]\n            nums[i + 1] = -1\n        i = i + 1\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            return i\n    return -1\n\nclass Solution:\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(nums)):\n            while nums[i] <= 0:\n                nums[i] = nums[i] + 1\n        for i in range(len(nums)):\n            if nums[i]!= i + 1:\n                nums[i] = -1\n        for i in range(len(nums)):\n            if nums[i] == i + 1:\n                return i\n        return -1",
      -5.31640625
    ],
    [
      "# Problem Statement\n#\n#   The first missing positive number is defined as the first number\n#   that is missing from the set of numbers 1, 2, 3,..., n.\n#\n#   For example, if n = 10, then the first missing number is 2.\n#\n#   There are many possible missing numbers.\n#   For example, if n = 10, the possible missing numbers are:\n#\n#      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,",
      -5.38671875
    ],
    [
      "def firstMissingPositive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] < 0:\n            continue\n        j = i + 1\n        while j < len(numbers):\n            if numbers[j] > 0 and numbers[j] < numbers[i]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n            j += 1\n    for i in range(len(numbers)):\n        if numbers[i] <= 0:\n            return i + 1\n    return len(numbers) + 1\n\n\nif __name__ == '__main__':\n    print(firstMissingPositive([1,2,3]))\n    print(firstMissingPositive([-1,2,3]))\n    print(firstMissingPositive([-1,2,-3]))\n    print(firstMissingPositive([1,2,3,4,5,6]))\n    print(firstMissingPositive([-1,2,3,4,5,-6]))",
      -5.5390625
    ],
    [
      "# https://leetcode.com/problems/first-missing-positive/\n# <8>\n# Implement a First Missing Positive\n# \n# Follow up for \"Search for a Number\":\n# What if duplicates are allowed?\n# \n# Would this affect the run-time complexity? How and why?\n# \n# Write a function to find the first missing positive number.\n# \n# Companies\n# Google\n# Related Topics\n# Math\n# Similar Questions\n# First Missing Positive II\n# \n# Notes:\n# Given a positive integer n, return the first positive integer, \n# which is missing from the list of positive integers [1,2,3,...,n].\n# \n# Example 1:\n# Input:\n# n = 4\n# \n# Output:\n# 2\n# \n# Explanation:\n# The first missing positive number is 2.\n# \n# Example 2:\n# Input:\n# n = -1\n# \n# Output:\n# 0\n# \n# Explanation:\n# All numbers are positive, so the first missing positive number is 0.\n# \n# Example 3:\n# Input:\n# n = 0\n# \n# Output:\n# 0\n# \n# Explanation:\n# The first missing positive number is itself (i.e. a positive number itself).\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#",
      -6.0703125
    ],
    [
      "def firstMissingPositive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    for i in range(len(numbers)):\n        while numbers[i] > 0 and numbers[i] <= len(numbers) and numbers[i-1]!= numbers[i]:\n            numbers[i] = numbers[i-1]\n    while numbers[-1] > 0 and numbers[-1] <= len(numbers):\n        numbers[-1] = numbers[-1-1]\n    for i in range(len(numbers)):\n        if numbers[i] == 0:\n            return i\n    return -1",
      -6.83203125
    ],
    [
      "import math\n\n\ndef first_missing_positive_number(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    for i in range(2, num):\n        if num % i == 0:\n            return i\n    return num\n\nif __name__ == '__main__':\n    assert first_missing_positive_number(2) == 2\n    assert first_missing_positive_number(3) == 3\n    assert first_missing_positive_number(9) == 3\n    assert first_missing_positive_number(4) == 3\n    assert first_missing_positive_number(5) == 5\n    assert first_missing_positive_number(6) == 5\n    assert first_missing_positive_number(7) == 7\n    assert first_missing_positive_number(8) == 7\n    assert first_missing_positive_number(9) == 7\n    assert first_missing_positive_number(10) == 10\n    assert first_missing_positive_number(11) == 11\n    assert first_missing_positive_number(12) == 11\n    assert first_missing_positive_number(13) == 13\n    assert first_missing_positive_number(14) == 13\n    assert first_missing_positive_number(15) == 15\n    assert first_missing_positive_number(16) == 15\n    assert first_missing_positive_number(17) == 17\n    assert first_missing_positive_number(18) == 17\n    assert first_missing_positive_number(19) == 19\n    assert first_missing_positive_number(20) == 19\n    assert first_missing_positive_number(21) == 21\n    assert first_missing_positive_number(22) == 21\n    assert first_missing_positive_number(23) == 23\n    assert first_missing_positive_number(24) == 23\n    assert first_missing_positive_number(25) == 25\n    assert first_missing_positive_number(26) == 25\n    assert first_missing_positive_number(27) == 27\n    assert first_missing_positive_",
      -7.1171875
    ],
    [
      "def firstMissingPositive(nums):\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            return i\n        elif nums[i] > nums[i-1]:\n            continue\n        else:\n            return i\n    return i\n\n# Your firstMissingPositive function should return 0.\ndef test():\n    assert firstMissingPositive([1, 2, 0]) == 1\n    assert firstMissingPositive([1, 0, 2]) == 2\n    assert firstMissingPositive([1, 2, 3]) == 3\n    assert firstMissingPositive([0, 2, 3, 4]) == 3\n    assert firstMissingPositive([0, -1, -2, -3, -4]) == 0\n    assert firstMissingPositive([]) == 0\n    assert firstMissingPositive([-1, -2, -3, -4]) == -1\n\nif __name__ == '__main__':\n    test()",
      -7.375
    ],
    [
      "def first_missing_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(1, len(nums) + 1):\n        if nums[i - 1] < 0:\n            if nums[i] > 0:\n                return i\n        elif nums[i] > 0:\n            return i\n\n    return len(nums) + 1\n\n\nif __name__ == '__main__':\n    print(first_missing_positive([1, 2, 3, 4, 5]))\n    print(first_missing_positive([-1, -2, -3, -4, -5]))\n    print(first_missing_positive([-1, 0, -2, -3, -4]))\n    print(first_missing_positive([1, 2, 3, 4, 5, 6]))\n    print(first_missing_positive([-1, -2, -3, -4, -5, -6]))",
      -7.57421875
    ],
    [
      "def find_first_missing_positive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    for i in range(1, len(numbers) + 1):\n        if numbers[i - 1] < 0 or numbers[i - 1] > i:\n            return i - 1\n    return len(numbers)\n\nif __name__ == '__main__':\n    print(find_first_missing_positive([1, 2, 3]))\n    print(find_first_missing_positive([2, 1, 4, 3]))\n    print(find_first_missing_positive([3, 2, 4]))\n    print(find_first_missing_positive([2, 3, 4, 5]))\n    print(find_first_missing_positive([-1, -2, -3, -4]))\n    print(find_first_missing_positive([-2, -3, -4, -5]))\n    print(find_first_missing_positive([-3, -4, -5]))",
      -8.5234375
    ],
    [
      "def firstMissingPositive(numbers):\n    # write your code here\n    for i in range(1, len(numbers) + 1):\n        if numbers[i - 1] > 0:\n            if numbers[i - 1] < numbers[i]:\n                numbers[i - 1] = numbers[i]\n            else:\n                numbers[i - 1] = numbers[i - 1] + 1\n    for i in range(1, len(numbers) + 1):\n        if numbers[i - 1] == numbers[i]:\n            numbers[i - 1] = numbers[i] + 1\n    for i in range(1, len(numbers) + 1):\n        if numbers[i - 1] == numbers[i]:\n            numbers[i - 1] = numbers[i]\n    return numbers[1]\n\ndef main():\n    print(firstMissingPositive([1, 2, 0]))\n    print(firstMissingPositive([2, 0, 1]))\n    print(firstMissingPositive([0, 0, 0, 0]))\n    print(firstMissingPositive([1, 1, 1, 1, 1]))\n    print(firstMissingPositive([1, 2, 3, 4, 5]))\n    print(firstMissingPositive([1, 1, 1, 1, 1, 1, 1, 1, 1]))\n\nif __name__ == '__main__':\n    main()",
      -8.6796875
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: omi\n# @Date:   2014-08-24 21:07:41\n# @Last Modified by:   omi\n# @Last Modified time: 2015-02-10 16:32:47\n\n# -*- coding: utf-8 -*-\n\"\"\"\nGiven an array with n objects colored red, white or blue, sort them so that\nobjects of the same color are adjacent, with the colors in the order red, white\nand blue.\n\nHere, we will use the integers 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9 to represent the\nobjects in the array, COLOR_RED = 0, COLOR_WHITE = 1, and COLOR_BLUE = 2.\n\nAssume we have already sorted the array so that elements of the same color are\nadjacent.\n\nNote:\nYou may assume the number of objects is at most 10,000.\n\"\"\"\n\nclass Solution(object):\n    \"\"\"\n    @param nums: Give an integer array\n    @return: Find the missing positive integer\n    \"\"\"\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        for i in range(n):\n            if nums[i] > 0 and nums[i] <= n:\n                j = nums[i] - 1\n                while j > 0 and nums[j] == nums[j - 1]:\n                    j -= 1\n                if j == 0:\n                    nums[i] = nums[n - 1]\n                    nums[n - 1] = -1\n                    n -= 1\n                    continue\n                nums[j] = nums[n - 1]\n                nums[n - 1] = -1\n        for i in range(n):\n            if nums[i]!= i + 1:\n                return i + 1\n        return n + 1\n\n\nif __name__ == \"__main__\":\n    print Solution().firstMissingPositive([0, 1, 0, 2, 1,",
      -8.828125
    ],
    [
      "def first_missing_positive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] < 0:\n            numbers[i] = -numbers[i]\n        elif numbers[i] == 0:\n            numbers[i] = 1\n        else:\n            return i\n\n    for i in range(len(numbers)):\n        if numbers[i] == 0:\n            numbers[i] = 1\n        elif numbers[i] < 0:\n            numbers[i] = -numbers[i]\n\n    for i in range(len(numbers)):\n        if numbers[i] == 0:\n            numbers[i] = 1\n        elif numbers[i] < 0:\n            numbers[i] = -numbers[i]\n\n    for i in range(len(numbers)):\n        if numbers[i] == 0:\n            numbers[i] = 1\n        elif numbers[i] < 0:\n            numbers[i] = -numbers[i]\n        elif numbers[i] == 1:\n            return i\n\n    return len(numbers) - 1\n\nnumbers = [-1, -2, 3, -4, -5, 6]\n\nprint(first_missing_positive(numbers))",
      -8.859375
    ],
    [
      "def firstMissingPositive(numbers):\n    \"\"\"\n    Returns the first missing positive number in the given list.\n\n    >>> firstMissingPositive([1, 2, 0])\n    2\n    >>> firstMissingPositive([1, 2, 3, 4])\n    3\n    >>> firstMissingPositive([])\n    None\n    \"\"\"\n    if not numbers:\n        return None\n    for num in numbers:\n        if num < 0:\n            return None\n        if num > len(numbers):\n            return num\n    for num in range(1, len(numbers)):\n        if numbers[num]!= num:\n            return num\n    return None\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -9.5078125
    ],
    [
      "def first_missing_positive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    \n    # find the first negative number\n    # if it is the first positive number, then the first positive number is the first missing positive number\n    for i, num in enumerate(numbers):\n        if num < 0:\n            numbers[i] = num + 1\n            break\n    \n    # find the first positive number\n    for i, num in enumerate(numbers):\n        if num > 0:\n            numbers[i] = num - 1\n            break\n    \n    # find the first negative number\n    for i, num in enumerate(numbers):\n        if num < 0:\n            numbers[i] = num + 1\n            break\n    \n    # find the first positive number\n    for i, num in enumerate(numbers):\n        if num > 0:\n            numbers[i] = num - 1\n            break\n    \n    # find the first negative number\n    for i, num in enumerate(numbers):\n        if num < 0:\n            numbers[i] = num + 1\n            break\n    \n    # find the first positive number\n    for i, num in enumerate(numbers):\n        if num > 0:\n            numbers[i] = num - 1\n            break\n    \n    # find the first negative number\n    for i, num in enumerate(numbers):\n        if num < 0:\n            numbers[i] = num + 1\n            break\n    \n    for i, num in enumerate(numbers):\n        if num > 0:\n            numbers[i] = num - 1\n            break\n    \n    # find the first positive number\n    for i, num in enumerate(numbers):\n        if num > 0:\n            numbers[i] = num - 1\n            break\n    \n    for i, num in enumerate(numbers):\n        if num < 0:\n            numbers[i] = num + 1\n            break\n    \n    return min(numbers)",
      -10.5546875
    ],
    [
      "def first_missing(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(1,n+1):\n        if n%i == 0:\n            return i\n\nif __name__ == '__main__':\n    assert first_missing(1) == 1, \"1 should be the first missing positive number\"\n    assert first_missing(2) == 2, \"2 should be the first missing positive number\"\n    assert first_missing(3) == 3, \"3 should be the first missing positive number\"\n    assert first_missing(4) == 4, \"4 should be the first missing positive number\"\n    assert first_missing(5) == 5, \"5 should be the first missing positive number\"\n    assert first_missing(6) == 6, \"6 should be the first missing positive number\"\n    assert first_missing(7) == 7, \"7 should be the first missing positive number\"\n    assert first_missing(8) == 8, \"8 should be the first missing positive number\"\n    assert first_missing(9) == 9, \"9 should be the first missing positive number\"\n    assert first_missing(10) == 10, \"10 should be the first missing positive number\"\n    assert first_missing(11) == 11, \"11 should be the first missing positive number\"\n    assert first_missing(12) == 12, \"12 should be the first missing positive number\"\n    assert first_missing(13) == 13, \"13 should be the first missing positive number\"\n    assert first_missing(14) == 14, \"14 should be the first missing positive number\"\n    assert first_missing(15) == 15, \"15 should be the first missing positive number\"\n    assert first_missing(16) == 16, \"16 should be the first missing positive number\"\n    assert first_missing(17) == 17, \"17 should be the first missing positive number\"\n    assert first_missing(18) == 18, \"18 should be the first missing positive number\"\n    assert first_missing(19) == 19, \"19 should be the first missing positive number\"\n    assert first_missing(20) == 20, \"20 should be the first missing positive number\"\n    assert first_missing",
      -10.6015625
    ],
    [
      "def firstMissingPositive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n        if nums[i] > len(nums) - 1:\n            nums[i] = -nums[i]\n\n    for i in range(len(nums)):\n        if nums[i] == i + 1:\n            nums[i] = -i - 1\n    for i in range(len(nums)):\n        if nums[i] == -i - 1:\n            nums[i] = i + 1\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            nums[i] = -i - 1\n    for i in range(len(nums)):\n        if nums[i] == i:\n            nums[i] = -1\n\n    for i in range(len(nums)):\n        if nums[i] == -1:\n            return i\n\n\n\nif __name__ == '__main__':\n    nums = [1, -2, 3, -4, 5, -6]\n    firstMissingPositive(nums)\n    print(nums)",
      -11.734375
    ],
    [
      "def findMissingPositive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(1, n+1):\n        if i == n:\n            return i\n        if i % 2 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 3 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 5 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 7 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 11 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 13 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 17 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 19 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 23 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 29 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 31 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 37 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 41 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 43 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 47 == 0:\n            if i < n:\n                return i\n            else:\n                return i + n\n        if i % 53 == 0:",
      -12.40625
    ],
    [
      "def first_missing_positive(numbers):\n    for i in range(1, len(numbers)):\n        if numbers[i] > 0 and numbers[i] <= len(numbers) and numbers[i] not in numbers:\n            return numbers[i]\n    return 0\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([1, 2, 3, 4, 5, 6]))\n    print(first_missing_positive([1, -3, -4, 5, 6, 7]))\n    print(first_missing_positive([1, -3, -4, 5, 6, 7]))\n    print(first_missing_positive([-1, -2, -3, -4, 5, 6, 7]))\n    print(first_missing_positive([-1, -2, -3, -4, 5, 6, 7]))\n    print(first_missing_positive([-1, -2, -3, -4, 5, 6, 7]))\n    print(first_missing_positive([-1, -2, -3, -4, 5, 6, 7]))\n    print(first_missing_positive([-1, -2, -3, -4, 5, 6, 7]))\n    print(first_missing_positive([-1, -2, -3, -4, 5, 6, 7]))\n    print(first_missing_positive([-1, -2, -3, -4, 5, 6, 7]))\n    print(first_missing_positive([-1, -2, -3, -4, 5, 6, 7]))",
      -12.5859375
    ],
    [
      "def firstMissingPositive(nums):\n    i = 0\n    for i in range(len(nums)):\n        while nums[i]!= i+1 and nums[i]!= nums[nums[i]-1]:\n            nums[nums[i]] = nums[i]\n            i = i - 1\n    while nums[i]!= i+1 and nums[i]!= nums[nums[i]-1]:\n        nums[i] = nums[nums[i]]\n        i = i - 1\n    if nums[i] == i+1:\n        return i+1\n    else:\n        return i\n\n\"\"\"\nGiven a list of integers, return the first missing positive integer.\n\"\"\"\ndef firstMissingPositive(nums):\n    i = 0\n    for i in range(len(nums)):\n        while nums[i]!= i+1 and nums[i]!= nums[nums[i]-1]:\n            nums[nums[i]] = nums[i]\n            i = i - 1\n    while nums[i]!= i+1 and nums[i]!= nums[nums[i]-1]:\n        nums[i] = nums[nums[i]]\n        i = i - 1\n    while nums[i]!= i+1:\n        nums[i] = nums[i]\n        i = i - 1\n    if nums[i] == i+1:\n        return i+1\n    else:\n        return i\n\nif __name__ == \"__main__\":\n    nums = [2,3,4,5,1,6]\n    print(firstMissingPositive(nums))\n    nums = [1,2,3,4,5,6]\n    print(firstMissingPositive(nums))\n    nums = [1,2,3,4,5,6,7,8]\n    print(firstMissingPositive(nums))\n    nums = [1,2,3,4,5,6,7,8,9]\n    print(firstMissingPositive(nums))",
      -12.6484375
    ],
    [
      "from math import ceil\n\n\ndef firstMissingPositive(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    for i in xrange(1, num + 1):\n        if num % i == 0:\n            return i\n    return num\n\n\nif __name__ == '__main__':\n    print firstMissingPositive(100)\n    print firstMissingPositive(200)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print firstMissingPositive(300)\n    print",
      -13.5546875
    ],
    [
      "def first_missing(n):\n    \"\"\"\n    Find the first missing positive number in the range [1, n]\n    \"\"\"\n    for i in range(1, n+1):\n        if i not in [j for j in range(1, n+1) if j!= i]:\n            return i\n\ndef test():\n    assert first_missing(5) == 2\n    assert first_missing(100) == 20\n    assert first_missing(200) == 200\n    assert first_missing(1000) == 1000\n\nif __name__ == '__main__':\n    test()",
      -13.8203125
    ],
    [
      "def first_missing_positive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(2, n+1):\n        if i not in range(2, n+1):\n            return i\n    return 0\n\nif __name__ == '__main__':\n    print(first_missing_positive(1))\n    print(first_missing_positive(2))\n    print(first_missing_positive(3))\n    print(first_missing_positive(4))\n    print(first_missing_positive(5))\n    print(first_missing_positive(6))\n    print(first_missing_positive(7))\n    print(first_missing_positive(8))\n    print(first_missing_positive(9))\n    print(first_missing_positive(10))\n    print(first_missing_positive(11))\n    print(first_missing_positive(12))\n    print(first_missing_positive(13))\n    print(first_missing_positive(14))\n    print(first_missing_positive(15))\n    print(first_missing_positive(16))\n    print(first_missing_positive(17))\n    print(first_missing_positive(18))\n    print(first_missing_positive(19))\n    print(first_missing_positive(20))\n    print(first_missing_positive(21))\n    print(first_missing_positive(22))\n    print(first_missing_positive(23))\n    print(first_missing_positive(24))\n    print(first_missing_positive(25))\n    print(first_missing_positive(26))\n    print(first_missing_positive(27))\n    print(first_missing_positive(28))\n    print(first_missing_positive(29))\n    print(first_missing_positive(30))\n    print(first_missing_positive(31))\n    print(first_missing_positive(32))\n    print(first_missing_positive(33))\n    print(first_missing_positive(34))\n    print(first_missing_positive(35))\n    print(first_missing_positive(36))\n    print",
      -13.8984375
    ],
    [
      "def firstMissingPositive(numbers):\n    for i in range(1, len(numbers) + 1):\n        if numbers[i-1] > 0 and numbers[i] < 0:\n            return i\n    return len(numbers)\n\n\"\"\"\nTest cases\n\"\"\"\n\nassert firstMissingPositive([1,2,3,4,5]) == 2, \"1st\"\nassert firstMissingPositive([2,3,4,5,6]) == 3, \"2nd\"\nassert firstMissingPositive([1,2,3,4,5,6,7,8,9]) == 1, \"3rd\"\nassert firstMissingPositive([1,2,3,4,5,6,7,8,9,10]) == 1, \"4th\"\nassert firstMissingPositive([-1,2,3,4,5,6,7,8,9]) == 1, \"5th\"\nassert firstMissingPositive([1,2,3,4,5,6,7,8,9,10,11]) == 1, \"6th\"\nassert firstMissingPositive([-1,2,3,4,5,6,7,8,9,10,11,12]) == 1, \"7th\"",
      -13.9296875
    ],
    [
      "def first_missing_positive(numbers):\n    for i in range(1, n + 1):\n        if i not in numbers and i > 0:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    #numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(\"First missing positive number is \" + str(first_missing_positive(numbers)))",
      -14.0
    ],
    [
      "def firstMissingPositive(nums):\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            nums[i] = nums[i] + len(nums)\n            return nums[i]\n    return len(nums)\n\ndef test():\n    assert firstMissingPositive([1, 2, 0]) == 3\n    assert firstMissingPositive([-1, -2, -3]) == 1\n    assert firstMissingPositive([1, 2, 3, 4, 5]) == 2\n    assert firstMissingPositive([1, -2, 3, -4, 5]) == 2\n    assert firstMissingPositive([-1, -2, -3, -4, -5]) == -1\n    assert firstMissingPositive([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == -1\n    assert firstMissingPositive([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]) == -1\n    assert firstMissingPositive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert firstMissingPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2\n    assert firstMissingPositive([-1, -2, -3, -4, -5, 6, 7, 8, 9]) == 2\n    assert firstMissingPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 1\n\nif __name__ == \"__main__\":\n    test()",
      -14.1875
    ],
    [
      "def firstMissingPositive(numbers):\n    for i in range(0, len(numbers)):\n        if numbers[i] < 0:\n            numbers[i] = -numbers[i]\n            continue\n        elif numbers[i] == 0:\n            numbers[i] = numbers[0]\n            numbers[0] = 0\n            break\n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i-1]+1:\n            numbers[i] = numbers[i-1]\n            numbers[i-1] = 0\n    for i in range(0, len(numbers)):\n        if numbers[i] == 0:\n            return i\n    return -1\n\ndef main():\n    numbers = [1, 2, -2, 3, 4, 5]\n    print(firstMissingPositive(numbers))\n\nif __name__ == '__main__':\n    main()",
      -14.5390625
    ],
    [
      "def firstMissingPositive(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(numbers)):\n        while numbers[i] > 0 and numbers[i] <= len(numbers) and numbers[i]!= i:\n            if numbers[i] > numbers[numbers[i]]:\n                numbers[i], numbers[numbers[i]] = numbers[numbers[i]], numbers[i]\n            else:\n                return numbers[i]\n    return numbers[-1]\n\n\nif __name__ == '__main__':\n    print(firstMissingPositive([0,1,2,3,4,5]))\n    print(firstMissingPositive([-1,0,1,2,3,4,5]))\n    print(firstMissingPositive([-1,-1,0,1,2,3,4,5]))\n    print(firstMissingPositive([0,1,2,3,4,5,6]))\n    print(firstMissingPositive([0,1,2,3,4,5,6,7]))\n    print(firstMissingPositive([0,1,2,3,4,5,6,7,8]))\n    print(firstMissingPositive([0,1,2,3,4,5,6,7,8,9]))\n    print(firstMissingPositive([0,1,2,3,4,5,6,7,8,9,10]))\n    print(firstMissingPositive([0,1,2,3,4,5,6,7,8,9,10,11]))\n    print(firstMissingPositive([0,1,2,3,4,5,6,7,8,9,10,11,12]))\n    print(firstMissingPositive([0,1,2,3,4,5,6,7,8,9,10,11,12,13]))",
      -14.734375
    ],
    [
      "# https://www.hackerrank.com/challenges/first-missing-positive\n\n# Your function should return the missing positive number. If there are multiple missing positive numbers, return the smallest one.\n\n# The input is an integer array where each element is the value of a positive integer.\n# Input example:\n# [1,2,4,5,6]\n\n# Output example:\n# 4\n# 1\n# 7\n\ndef firstMissingPositive(nums):\n    # Your code here\n    if len(nums) == 0:\n        return 1\n    else:\n        for i in range(1, len(nums) + 1):\n            if nums[i-1] > i and nums[i-1] not in nums:\n                nums[i-1] = nums[i-1] + 1\n                nums[nums[i-1]-1] = nums[i-1]\n                return nums[i-1]\n    return nums[0]\n\n\n# Test Cases\n# Input: [1,2,4,5,6]\n# Output: 4\n# Input: [7,8,9,10,11]\n# Output: 1",
      -16.484375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}