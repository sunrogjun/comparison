{
  "problem": {
    "task_id": "MBPP/336",
    "prompt": "Write a function to check whether the given month name contains 28 days or not.",
    "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
    "test_list": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ],
    "challenge_test_list": [],
    "problem_id": 325
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# https://leetcode.com/problems/check-if-month-name-contains-28-days/discuss/102645/Python-DP-solution\n\n# DP\ndef check_28_day(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if month_name == 'January' or month_name == 'February' or month_name == 'March' or month_name == 'April' or month_name == 'May' or month_name == 'June' or month_name == 'July' or month_name == 'August' or month_name == 'September' or month_name == 'October' or month_name == 'November' or month_name == 'December':\n        return True\n    else:\n        return False\n\n# DP\ndef check_28_day_dp(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if month_name == 'January' or month_name == 'February' or month_name == 'March' or month_name == 'April' or month_name == 'May' or month_name == 'June' or month_name == 'July' or month_name == 'August' or month_name == 'September' or month_name == 'October' or month_name == 'November' or month_name == 'December':\n        return True\n    else:\n        return False\n\n# DP\ndef check_28_day_dp_2(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if month_name == 'January' or month_name == 'February' or month_name == 'March' or month_name == 'April' or month_name == 'May' or month_name == 'June' or month_name == 'July' or month_name == 'August' or month_name == 'September' or month_name == 'October' or month_name == 'November' or month_name == 'December':\n        return True\n    else:\n        return False",
      4.1171875
    ],
    [
      "# https://www.hackerrank.com/challenges/month28/problem\n\ndef check_month(m):\n    if m == 'January':\n        return 28\n    elif m == 'February':\n        return 28\n    elif m == 'March':\n        return 28\n    elif m == 'April':\n        return 28\n    elif m == 'May':\n        return 28\n    elif m == 'June':\n        return 28\n    elif m == 'July':\n        return 28\n    elif m == 'August':\n        return 28\n    elif m == 'September':\n        return 28\n    elif m == 'October':\n        return 28\n    elif m == 'November':\n        return 28\n    elif m == 'December':\n        return 28\n    else:\n        return False\n\nprint(check_month('December'))",
      3.2109375
    ],
    [
      "def is_leap_year(year):\n    \"\"\"\n    Returns true if the given year is a leap year, otherwise false.\n    \"\"\"\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef get_days(month, year):\n    \"\"\"\n    Returns the number of days in the given month and year.\n    \"\"\"\n    if is_leap_year(year):\n        return 29\n    else:\n        return 28\n\ndef check_leap_year(month):\n    \"\"\"\n    Returns true if the given month is a leap month, otherwise false.\n    \"\"\"\n    if month == 2:\n        return is_leap_year(month)\n    else:\n        return False\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    for month in range(1, 13):\n        print(\"Month: {0}\".format(month))\n        print(\"Is leap year: {0}\".format(check_leap_year(month)))\n        print(\"Days in month: {0}\".format(get_days(month, 2019)))\n\nif __name__ == '__main__':\n    main()",
      0.55029296875
    ],
    [
      "# https://oj.leetcode.com/problems/check-if-month-contains-28-days/\n\nclass Solution:\n    # @param month: A month string\n    # @return: A boolean\n    def checkIsLeapYear(self, month):\n        days = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"]\n        if month.lower() not in days:\n            return False\n        if month.lower() == \"jan\" or month.lower() == \"feb\" or month.lower() == \"mar\" or month.lower() == \"apr\" or month.lower() == \"may\" or month.lower() == \"jun\" or month.lower() == \"jul\" or month.lower() == \"aug\" or month.lower() == \"sep\" or month.lower() == \"oct\" or month.lower() == \"nov\" or month.lower() == \"dec\":\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    print Solution().checkIsLeapYear(\"jan\")",
      0.437255859375
    ],
    [
      "# Definition for a valid month.\nclass Month(object):\n    def __init__(self, month):\n        self.month = month\n        self.days = 0\n\n    def set_days(self, days):\n        self.days = days\n\n    def get_days(self):\n        return self.days\n\n    def __repr__(self):\n        return str(self.days)\n\n# Your Month object will be instantiated and called as such:\n# obj = Month(month)\n# param_1 = obj.set_days(days)\n# param_2 = obj.get_days()\n# param_3 = obj.__repr__()\n\nmonths = {\n    'January': Month(1),\n    'February': Month(2),\n    'March': Month(3),\n    'April': Month(4),\n    'May': Month(5),\n    'June': Month(6),\n    'July': Month(7),\n    'August': Month(8),\n    'September': Month(9),\n    'October': Month(10),\n    'November': Month(11),\n    'December': Month(12)\n}\n\n# 28 days is the number of days in a month\nfor i in range(1, 13):\n    for j in range(1, 28):\n        if (months[i].get_days() == j):\n            print i\n            break",
      0.1431884765625
    ],
    [
      "# https://www.hackerrank.com/challenges/day-of-the-week-in-a-month\ndef dayOfWeek(month, day):\n    if (day == 1 and month == \"January\"):\n        return \"Monday\"\n    elif (day == 1 and month == \"February\"):\n        return \"Tuesday\"\n    elif (day == 1 and month == \"March\"):\n        return \"Wednesday\"\n    elif (day == 1 and month == \"April\"):\n        return \"Thursday\"\n    elif (day == 1 and month == \"May\"):\n        return \"Friday\"\n    elif (day == 1 and month == \"June\"):\n        return \"Saturday\"\n    elif (day == 1 and month == \"July\"):\n        return \"Sunday\"\n    elif (day == 1 and month == \"August\"):\n        return \"Monday\"\n    elif (day == 1 and month == \"September\"):\n        return \"Tuesday\"\n    elif (day == 1 and month == \"October\"):\n        return \"Wednesday\"\n    elif (day == 1 and month == \"November\"):\n        return \"Thursday\"\n    elif (day == 1 and month == \"December\"):\n        return \"Friday\"\n    elif (day == 28 and month == \"January\"):\n        return \"Monday\"\n    elif (day == 28 and month == \"February\"):\n        return \"Tuesday\"\n    elif (day == 28 and month == \"March\"):\n        return \"Wednesday\"\n    elif (day == 28 and month == \"April\"):\n        return \"Thursday\"\n    elif (day == 28 and month == \"May\"):\n        return \"Friday\"\n    elif (day == 28 and month == \"June\"):\n        return \"Saturday\"\n    elif (day == 28 and month == \"July\"):\n        return \"Sunday\"\n    elif (day == 28 and month == \"August\"):\n        return \"Monday\"\n    elif (day == 28 and month == \"September\"):\n        return \"Tuesday\"\n    elif (day == 28 and month == \"October\"):\n        return \"Wednesday\"\n    elif (day == 28 and month == \"November",
      0.0258026123046875
    ],
    [
      "def check_if_month_28(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if month_name == 'JANUARY':\n        return False\n    elif month_name == 'FEBRUARY':\n        return False\n    elif month_name == 'MARCH':\n        return False\n    elif month_name == 'APRIL':\n        return False\n    elif month_name == 'MAY':\n        return False\n    elif month_name == 'JUNE':\n        return False\n    elif month_name == 'JULY':\n        return False\n    elif month_name == 'AUGUST':\n        return False\n    elif month_name == 'SEPTEMBER':\n        return False\n    elif month_name == 'OCTOBER':\n        return False\n    elif month_name == 'NOVEMBER':\n        return False\n    elif month_name == 'DECEMBER':\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(check_if_month_28('FEBRUARY'))\n    print(check_if_month_28('MARCH'))\n    print(check_if_month_28('APRIL'))\n    print(check_if_month_28('JULY'))\n    print(check_if_month_28('JUNE'))\n    print(check_if_month_28('NOVEMBER'))\n    print(check_if_month_28('DECEMBER'))",
      0.00815582275390625
    ],
    [
      "import re\n\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\ndef check_for_28_days(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if len(month_name)!= 3:\n        return False\n    if not re.match('^(?i)^(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)$', month_name):\n        return False\n    return len(months[int(month_name)]) == 28\n\nif __name__ == '__main__':\n    assert check_for_28_days('Dec') == False\n    assert check_for_28_days('December') == False\n    assert check_for_28_days('january') == False\n    assert check_for_28_days('December') == True\n    assert check_for_28_days('Dec') == True",
      -0.07666015625
    ],
    [
      "# https://oj.leetcode.com/problems/valid-month-name/\n# Given a month name, return true if the month contains 28 days, otherwise false.\n# \n# The name can be lowercase as well as uppercase.\n# \n# Example 1:\n# Input: \"February\"\n# Output: true\n# Example 2:\n# Input: \"January\"\n# Output: false\n# Example 3:\n# Input: \"Unknown\"\n# Output: false\n# Example 4:\n# Input: \"November\"\n# Output: true\n\n# https://leetcode.com/problems/valid-month-name/discuss/134080/Python-solution-using-bfs-and-stack\n# https://leetcode.com/problems/valid-month-name/discuss/134082/Java-solution-using-bfs-and-stack\n# https://leetcode.com/problems/valid-month-name/discuss/134083/Java-solution-using-bfs-and-stack-using-string-compare-method\n# https://leetcode.com/problems/valid-month-name/discuss/134084/Java-solution-using-bfs-and-stack-using-string-compare-method\n# https://leetcode.com/problems/valid-month-name/discuss/134085/Java-solution-using-bfs-and-stack-using-string-compare-method\n# https://leetcode.com/problems/valid-month-name/discuss/134086/Java-solution-using-bfs-and-stack-using-string-compare-method\n# https://leetcode.com/problems/valid-month-name/discuss/134087/Java-solution-using-bfs-and-stack-using-string-compare-method\n# https://leetcode.com/problems/valid-month-name/discuss/134088/Java-solution-using-bfs-and-stack-using-string-compare-method\n# https://leetcode.com/problems/valid-month",
      -0.58447265625
    ],
    [
      "# https://www.hackerrank.com/challenges/check-if-month-name-contains-28-days/problem\n\nimport sys\n\n\ndef is_28_days(month):\n    \"\"\"\n    :param month: str\n    :return: bool\n    \"\"\"\n    if month in [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]:\n        return False\n    else:\n        return True\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Read input\n    n = int(input().strip())\n    months = [input() for _ in range(n)]\n\n    # Calculate result\n    result = False\n    for month in months:\n        if is_28_days(month):\n            result = True\n    print(result)\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      -0.62109375
    ],
    [
      "from collections import defaultdict\n\ndef contains28Days(month):\n    day = defaultdict(int)\n    for day in month:\n        day[day] += 1\n    if day[28] == 0:\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    print(contains28Days(\"January\"))\n    print(contains28Days(\"February\"))\n    print(contains28Days(\"March\"))\n    print(contains28Days(\"April\"))\n    print(contains28Days(\"May\"))\n    print(contains28Days(\"June\"))\n    print(contains28Days(\"July\"))\n    print(contains28Days(\"August\"))\n    print(contains28Days(\"September\"))\n    print(contains28Days(\"October\"))\n    print(contains28Days(\"November\"))\n    print(contains28Days(\"December\"))",
      -0.62109375
    ],
    [
      "def check_month(month_name):\n    if month_name == 'january':\n        return False\n    elif month_name == 'february':\n        return False\n    elif month_name =='march':\n        return False\n    elif month_name == 'april':\n        return False\n    elif month_name =='may':\n        return False\n    elif month_name == 'june':\n        return False\n    elif month_name == 'july':\n        return False\n    elif month_name == 'august':\n        return False\n    elif month_name =='september':\n        return False\n    elif month_name == 'october':\n        return False\n    elif month_name == 'november':\n        return False\n    elif month_name == 'december':\n        return True\n\nprint(check_month('january'))\nprint(check_month('february'))\nprint(check_month('march'))\nprint(check_month('april'))\nprint(check_month('may'))\nprint(check_month('june'))\nprint(check_month('july'))\nprint(check_month('august'))\nprint(check_month('september'))\nprint(check_month('october'))\nprint(check_month('november'))\nprint(check_month('december'))",
      -0.62158203125
    ],
    [
      "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def checkIsLeap(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == 'JANUARY':\n            return False\n        elif month == 'FEBRUARY':\n            return True\n        elif month == 'MARCH':\n            return True\n        elif month == 'APRIL':\n            return True\n        elif month == 'MAY':\n            return True\n        elif month == 'JUNE':\n            return True\n        elif month == 'JULY':\n            return True\n        elif month == 'AUGUST':\n            return True\n        elif month == 'SEPTEMBER':\n            return True\n        elif month == 'OCTOBER':\n            return True\n        elif month == 'NOVEMBER':\n            return True\n        elif month == 'DECEMBER':\n            return True\n        else:\n            return False\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.checkIsLeap('MARCH')\n    print s.checkIsLeap('JANUARY')\n    print s.checkIsLeap('FEBRUARY')\n    print s.checkIsLeap('FEBRUARY')\n    print s.checkIsLeap('FEBRUARY')\n    print s.checkIsLeap('JANUARY')\n    print s.checkIsLeap('MARCH')",
      -0.69384765625
    ],
    [
      "# https://www.hackerrank.com/challenges/month-name-28-days\n\n#!/bin/python\n\n#!/bin/python\n\n# The following is a sample run.\n# Enter the name of the month:\n# \"June\"\n# Enter the name of the month:\n# \"February\"\n# The name of the month contains 28 days:\n# True\n# The name of the month contains 28 days:\n# True\n# Enter the name of the month:\n# \"March\"\n# The name of the month contains 28 days:\n# False\n# Enter the name of the month:\n# \"April\"\n# The name of the month contains 28 days:\n# True\n\nmonth_name = raw_input()\nmonth_name = month_name.lower()\n\nif month_name.find(\"jan\") > -1:\n    if month_name.find(\"feb\") > -1:\n        print \"True\"\n    elif month_name.find(\"mar\") > -1:\n        print \"True\"\n    else:\n        print \"False\"\nelse:\n    print \"False\"",
      -0.69775390625
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @return a boolean\n    def check_month(self, month):\n        days = 30\n        if month == \"FEBRUARY\":\n            days = 29\n        if month == \"MARCH\":\n            days = 28\n        if month == \"APRIL\":\n            days = 27\n        if month == \"MAY\":\n            days = 26\n        if month == \"JUNE\":\n            days = 25\n        if month == \"JULY\":\n            days = 24\n        if month == \"AUGUST\":\n            days = 23\n        if month == \"SEPTEMBER\":\n            days = 22\n        if month == \"OCTOBER\":\n            days = 21\n        if month == \"NOVEMBER\":\n            days = 20\n        if month == \"DECEMBER\":\n            days = 19\n        return days == 30",
      -0.732421875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def check_valid_month(self, month):\n        \"\"\"\n        :param month: str\n        :return: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if month.isdigit():\n            return False\n        if month not in {'jan', 'feb','mar', 'apr','may', 'jun',\n                         'jul', 'aug','sep', 'oct', 'nov', 'dec'}:\n            return False\n\n        if month == 'jan':\n            return True\n        elif month == 'feb':\n            return True\n        elif month =='mar':\n            return True\n        elif month == 'apr':\n            return True\n        elif month =='may':\n            return True\n        elif month == 'jun':\n            return True\n        elif month == 'jul':\n            return True\n        elif month == 'aug':\n            return True\n        elif month =='sep':\n            return True\n        elif month == 'oct':\n            return True\n        elif month == 'nov':\n            return True\n        elif month == 'dec':\n            return True\n        else:\n            return False\n\n    def check_valid_month_easy(self, month):\n        \"\"\"\n        :param month: str\n        :return: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if month.isdigit():\n            return False\n        if month not in {'jan', 'feb','mar', 'apr','may', 'jun',\n                         'jul', 'aug','sep', 'oct', 'nov', 'dec'}:\n            return False\n        return True\n\n    def check_valid_month_hard(self, month):\n        \"\"\"\n        :param month: str\n        :return: bool\n        \"\"\"\n        if month.isdigit():\n            return False\n        if month not in {'jan', 'feb','mar', 'apr','may', 'jun',\n                         'jul', 'aug','sep', 'oct', 'nov', 'dec'",
      -0.75
    ],
    [
      "# https://www.hackerrank.com/challenges/is-it-a-festival\n# Time complexity: O(1)\n# Space complexity: O(1)\n\ndef is_28_days_festival(month_name):\n    days = {'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31}\n    return days[month_name] == 28\n\nif __name__ == '__main__':\n    print(is_28_days_festival('February'))",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/30-days-of-the-month/problem\n\n# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def has28Days(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        days = [0 for _ in range(28)]\n        for i in range(len(month)):\n            days[month[i] - 'A'] += 1\n        return all(days)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.has28Days('January')\n    assert not s.has28Days('June')\n    assert s.has28Days('December')",
      -0.85693359375
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :param s: str\n        :return: bool\n        \"\"\"\n        if not s:\n            return False\n        if len(s) == 2:\n            return True\n        if len(s)!= 3:\n            return False\n        if s[0] == s[1]:\n            if s[2] == '0':\n                return False\n            return True\n\n        return True\n\n\nif __name__ == \"__main__\":\n    print Solution().checkValid(\"0\")\n    print Solution().checkValid(\"2\")\n    print Solution().checkValid(\"32\")",
      -0.85693359375
    ],
    [
      "def check_28(name):\n    return '28' in name\n\nif __name__ == '__main__':\n    name = input()\n    print(name.startswith('February'))\n    print(check_28(name))",
      -0.85693359375
    ],
    [
      "from datetime import datetime\nimport unittest\n\ndef check_if_28_days_in_month(month):\n    \"\"\"\n    :type month: str\n    :rtype: bool\n    \"\"\"\n    today = datetime.today()\n    if today.day == 29 and today.month == int(month):\n        return True\n    else:\n        return False\n\nclass Test(unittest.TestCase):\n    def test_check_if_28_days_in_month(self):\n        self.assertTrue(check_if_28_days_in_month('April'))\n        self.assertTrue(check_if_28_days_in_month('May'))\n        self.assertFalse(check_if_28_days_in_month('May'))\n        self.assertFalse(check_if_28_days_in_month('December'))\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.85693359375
    ],
    [
      "# https://leetcode.com/problems/check-if-month-is-a-full-month/discuss/184979/Python-Cython-Solution\n\nclass Solution(object):\n    def is_full_month(self, month_name):\n        \"\"\"\n        :type month_name: str\n        :rtype: bool\n        \"\"\"\n        return len(month_name) == 3 and month_name.isalpha() and month_name.isupper()",
      -0.85693359375
    ],
    [
      "# https://leetcode.com/problems/is-it-a-valid-month/discuss/78124/Python-Cython-Recursion-and-iterative-solutions\n\nclass Solution(object):\n    def checkValid(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        # if month not in MONTHS:\n        #     return False\n        # if len(month)!= 3:\n        #     return False\n        # for i in range(len(month)):\n        #     if i == 2 and month[i]!= '0':\n        #         return False\n        # return True\n        if len(month)!= 3:\n            return False\n        for i in range(len(month)):\n            if i == 2 and month[i]!= '0':\n                return False\n            if i == 0:\n                if month[i] not in 'ABCD':\n                    return False\n            elif month[i] not in 'abc':\n                return False\n        return True",
      -0.85791015625
    ],
    [
      "def is_28_days(month_name):\n    '''\n    :type month_name: str\n    :rtype: bool\n    '''\n    if len(month_name)!= 3:\n        return False\n    if month_name.isdigit():\n        return False\n    if len(month_name) == 3 and month_name[0] == '0':\n        return False\n    if month_name[1] not in '12':\n        return False\n    if month_name[2] not in '01':\n        return False\n    return True\n\nif __name__ == '__main__':\n    print is_28_days('1212')",
      -0.85791015625
    ],
    [
      "# https://leetcode.com/problems/valid-month-name/\n\nclass Solution(object):\n    def isValidMonthName(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        for i in range(0, len(month)):\n            if month[i] not in \"abcdefghijklmnopqrstuvwxyz\":\n                return False\n        return True",
      -0.85791015625
    ],
    [
      "def is_28_days(month):\n    days = 0\n    for day in month:\n        if day == '28':\n            days = days + 1\n    return days == 1\n\nprint is_28_days('September')\nprint is_28_days('November')\nprint is_28_days('November')\nprint is_28_days('December')",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/day-name-problem\ndef day_name(month_name):\n    \"\"\"\n    :param month_name: str\n    :return: bool\n    \"\"\"\n    if len(month_name)!= 3:\n        return False\n\n    if month_name.lower() in ['jan', 'feb','mar', 'apr','may', 'jun', 'jul', 'aug','sep', 'oct', 'nov', 'dec']:\n        return True\n\n    return False\n\n# Day name problem\nprint day_name('feb')",
      -0.85791015625
    ],
    [
      "# https://leetcode.com/problems/is-it-a-month/\n# Definition for a valid date.\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s)!= 3:\n            return False\n\n        if s[0]!= 'J' and s[0]!= 'F' and s[0]!= 'M':\n            return False\n\n        if s[1]!= 'a' and s[1]!= 'i' and s[1]!= 'u':\n            return False\n\n        if s[2]!= '.' and s[2]!='':\n            return False\n\n        return True\n\n# Note:\n# 28 days is a leap year\n# February is a leap month\n# February is a leap month\n# February is a leap month",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def checkIsValid(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == \"December\":\n            return False\n        if month == \"June\" or month == \"September\" or month == \"November\":\n            return True\n        if month == \"April\" or month == \"August\" or month == \"January\" or month == \"May\":\n            return False\n        if month == \"February\" or month == \"July\" or month == \"October\" or month == \"March\":\n            return True\n        return False",
      -0.85791015625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return True\n        if root.left is None and root.right is None:\n            return True\n        if root.left is None or root.right is None:\n            return False\n        if root.left.val >= root.right.val:\n            return False\n        return self.isValidBST(root.left) and self.isValidBST(root.right)",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/check-if-month-28-in-a-month\n\n\ndef check_if_month_28(month_name):\n    if '28' in month_name:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    month_name = input()\n    if check_if_month_28(month_name):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
      -0.8583984375
    ],
    [
      "# Definition for a valid month\nclass Month(object):\n    def __init__(self, month):\n        self.month = month\n\n    def is_valid(self):\n        return self.month.isalpha() and self.month.isupper() and len(self.month) == 3\n\nclass Solution(object):\n    def check_month(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        month = month.upper()\n        if not len(month) == 3:\n            return False\n        if not month.isalpha() or not month.isupper():\n            return False\n        if not month.isdigit():\n            return False\n        return Month(month)\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.check_month('jul')\n    print solution.check_month('aug')\n    print solution.check_month('aug')",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/30-days-of-the-month\n# Written by James Andre\n# Time complexity O(n), where n is the number of characters in the month name\n\nimport sys\n\nif len(sys.argv) < 2:\n    print(\"Usage: {} <month>\".format(sys.argv[0]))\n    sys.exit(0)\n\n# Read month name\nmonth = sys.argv[1]\n\n# Get number of days in the month\ndays = 0\nfor i in range(len(month)):\n    if month[i] == '1':\n        days = days + 1\n\nif days == 28:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      -0.85888671875
    ],
    [
      "def check_28_days(month_name):\n    if len(month_name)!= 3:\n        return False\n    if month_name in ['Aug', 'Sep', 'Nov', 'Dec']:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print check_28_days('Nov')",
      -0.85888671875
    ],
    [
      "def is_leap_year(month_num):\n    return month_num % 4 == 0 and (month_num % 100!= 0 or month_num % 400 == 0)\n\ndef check_leap_year(month_name):\n    if len(month_name) == 3:\n        return is_leap_year(int(month_name))\n    else:\n        return False\n\n# Testing\nprint check_leap_year(\"January\")\nprint check_leap_year(\"February\")\nprint check_leap_year(\"March\")\nprint check_leap_year(\"April\")\nprint check_leap_year(\"May\")\nprint check_leap_year(\"June\")\nprint check_leap_year(\"July\")\nprint check_leap_year(\"August\")\nprint check_leap_year(\"September\")\nprint check_leap_year(\"October\")\nprint check_leap_year(\"November\")\nprint check_leap_year(\"December\")",
      -0.85888671875
    ],
    [
      "# Definition for a valid month.\nclass Month:\n    def __init__(self, month_name):\n        self.month_name = month_name\n        self.is_valid = False\n\n    def is_valid_28_days(self):\n        if self.month_name.isdigit():\n            if int(self.month_name) == 12:\n                self.is_valid = True\n            else:\n                self.is_valid = False\n        else:\n            self.is_valid = False\n\n        return self.is_valid\n\n\nclass Solution(object):\n    def checkIsValid(self, month_name):\n        \"\"\"\n        :type month_name: str\n        :rtype: bool\n        \"\"\"\n        month = Month(month_name)\n        return month.is_valid_28_days()",
      -0.85888671875
    ],
    [
      "#!/usr/bin/env python\n\n\"\"\"\n\nhttps://www.hackerrank.com/challenges/30-day-february-long-month\n\n\"\"\"\n\n#!/usr/bin/env python\n\nimport sys\n\n# Complete the dayOfMonth function below.\ndef dayOfMonth(month, day):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    elif month == 2:\n        if day == 28:\n            return 29\n        else:\n            return 28\n    else:\n        return 0\n\nif __name__ == '__main__':\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        # month, day = raw_input().strip().split(' ')\n        month, day = raw_input().strip().split(' ')\n        month = int(month)\n        day = int(day)\n        print dayOfMonth(month, day)",
      -1.1396484375
    ],
    [
      "def check_month(month):\n    if month == \"January\":\n        return 1\n    elif month == \"February\":\n        return 2\n    elif month == \"March\":\n        return 3\n    elif month == \"April\":\n        return 4\n    elif month == \"May\":\n        return 5\n    elif month == \"June\":\n        return 6\n    elif month == \"July\":\n        return 7\n    elif month == \"August\":\n        return 8\n    elif month == \"September\":\n        return 9\n    elif month == \"October\":\n        return 10\n    elif month == \"November\":\n        return 11\n    elif month == \"December\":\n        return 12\n    else:\n        return False\n\n# print(check_month(\"January\"))\n# print(check_month(\"February\"))\n# print(check_month(\"March\"))\n# print(check_month(\"April\"))\n# print(check_month(\"May\"))\n# print(check_month(\"June\"))\n# print(check_month(\"July\"))\n# print(check_month(\"August\"))\n# print(check_month(\"September\"))\n# print(check_month(\"October\"))\n# print(check_month(\"November\"))\n# print(check_month(\"December\"))\n# print(check_month(\"Prayer\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Rishab\"))\n# print(check_month(\"Lalala\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(check_month(\"Shangha\"))\n# print(",
      -1.15234375
    ],
    [
      "# https://www.hackerrank.com/challenges/month28/problem\n\n# This is the solution from the Hackererank challenge\ndef month28(month):\n    if month == \"February\":\n        return 28\n    if month == \"March\":\n        return 28\n    if month == \"April\":\n        return 28\n    if month == \"May\":\n        return 28\n    if month == \"June\":\n        return 28\n    if month == \"July\":\n        return 28\n    if month == \"August\":\n        return 28\n    if month == \"September\":\n        return 28\n    if month == \"October\":\n        return 28\n    if month == \"November\":\n        return 28\n    if month == \"December\":\n        return 28\n    return False\n\n# This is the solution from the HackerRank challenge\ndef month28_2(month):\n    if month == \"February\":\n        return 28\n    if month == \"March\":\n        return 28\n    if month == \"April\":\n        return 28\n    if month == \"May\":\n        return 28\n    if month == \"June\":\n        return 28\n    if month == \"July\":\n        return 28\n    if month == \"August\":\n        return 28\n    if month == \"September\":\n        return 28\n    if month == \"October\":\n        return 28\n    if month == \"November\":\n        return 28\n    if month == \"December\":\n        return 28\n    return False\n\n# This is the solution from the HackerRank challenge\ndef month28_3(month):\n    if month == \"February\":\n        return 28\n    if month == \"March\":\n        return 28\n    if month == \"April\":\n        return 28\n    if month == \"May\":\n        return 28\n    if month == \"June\":\n        return 28\n    if month == \"July\":\n        return 28\n    if month == \"August\":\n        return 28\n    if month == \"September\":\n        return 28\n    if month == \"October\":\n        return 28\n    if month == \"November\":\n        return 28\n    if month == \"December\":\n        return 28\n    return False\n\n# This is the solution from the HackerRank challenge\ndef month28_4(month):",
      -1.572265625
    ],
    [
      "# Definition for a valid month.\nclass Month:\n    def __init__(self, month_name):\n        self.month_name = month_name\n        self.is_28_days = False\n        self.days = []\n\n    def add_day(self, day):\n        self.days.append(day)\n        if day == 28:\n            self.is_28_days = True\n\nclass Solution(object):\n    def check_valid_month(self, month_name):\n        \"\"\"\n        :type month_name: str\n        :rtype: bool\n        \"\"\"\n        months = {\n            'January': Month('January'),\n            'February': Month('February'),\n            'March': Month('March'),\n            'April': Month('April'),\n            'May': Month('May'),\n            'June': Month('June'),\n            'July': Month('July'),\n            'August': Month('August'),\n            'September': Month('September'),\n            'October': Month('October'),\n            'November': Month('November'),\n            'December': Month('December'),\n        }\n\n        months[month_name].add_day(1)\n        months[month_name].add_day(2)\n        months[month_name].add_day(3)\n        months[month_name].add_day(4)\n        months[month_name].add_day(5)\n        months[month_name].add_day(6)\n        months[month_name].add_day(7)\n        months[month_name].add_day(8)\n        months[month_name].add_day(9)\n        months[month_name].add_day(10)\n        months[month_name].add_day(11)\n        months[month_name].add_day(12)\n        months[month_name].add_day(13)\n        months[month_name].add_day(14)\n        months[month_name].add_day(15)\n        months[month_name].add_day(16)\n        months[month_name].add_day(17)\n        months[month_name].add_day(18)\n        months[month_name",
      -1.5927734375
    ],
    [
      "# https://www.hackerrank.com/challenges/day-of-the-week\n# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def dayOfTheWeek(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: str\n        \"\"\"\n        if month == \"January\":\n            return \"Sunday\"\n        elif month == \"February\":\n            return \"Monday\"\n        elif month == \"March\":\n            return \"Tuesday\"\n        elif month == \"April\":\n            return \"Wednesday\"\n        elif month == \"May\":\n            return \"Thursday\"\n        elif month == \"June\":\n            return \"Friday\"\n        elif month == \"July\":\n            return \"Saturday\"\n        elif month == \"August\":\n            return \"Sunday\"\n        elif month == \"September\":\n            return \"Monday\"\n        elif month == \"October\":\n            return \"Tuesday\"\n        elif month == \"November\":\n            return \"Wednesday\"\n        elif month == \"December\":\n            return \"Thursday\"\n        else:\n            return \"Error\"\n\n# Time:  O(n)\n# Space: O(1)\nclass Solution2(object):\n    def dayOfTheWeek(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: str\n        \"\"\"\n        if month == \"January\":\n            return \"Mon\"\n        elif month == \"February\":\n            return \"Tue\"\n        elif month == \"March\":\n            return \"Wed\"\n        elif month == \"April\":\n            return \"Thu\"\n        elif month == \"May\":\n            return \"Fri\"\n        elif month == \"June\":\n            return \"Sat\"\n        elif month == \"July\":\n            return \"Sun\"\n        elif month == \"August\":\n            return \"Mon\"\n        elif month == \"September\":\n            return \"Tue\"\n        elif month == \"October\":\n            return \"Wed\"\n        elif month == \"November\":\n            return \"Thu\"\n        elif month == \"December\":\n            return \"Fri\"\n        else:\n            return \"Error",
      -1.685546875
    ],
    [
      "def is_leap(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    else:\n        return year % 4 == 0\n\ndef check_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\ndef check_leap_month(year, month):\n    if month == 2:\n        return is_leap(year)\n    elif month == 4:\n        return check_leap_year(year)\n    elif month == 6:\n        return is_leap(year)\n    else:\n        return False\n\ndef check_leap_month_year(month, year):\n    if check_leap_month(year, month) == True:\n        return True\n    else:\n        return False\n\nprint(check_leap_month_year(2, 2015))",
      -1.7041015625
    ],
    [
      "# https://leetcode.com/problems/valid-month-name-with-28-days/description/\n\nclass Solution(object):\n    def checkValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if s == 'January' or s == 'February' or s == 'March' or s == 'April' or s == 'May' or s == 'June' or s == 'July' or s == 'August' or s == 'September' or s == 'October' or s == 'November' or s == 'December':\n            return True\n        elif s[0] == 'J' or s[0] == 'F' or s[0] == 'M' or s[0] == 'A' or s[0] == 'M' or s[0] == 'J' or s[0] == 'J' or s[0] == 'A' or s[0] == 'S' or s[0] == 'O' or s[0] == 'N' or s[0] == 'D':\n            return False\n        else:\n            return False",
      -1.71484375
    ],
    [
      "# https://leetcode.com/problems/check-if-month-name-contains-28-days/description/\n\nclass Solution(object):\n    def check_month(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        for i in xrange(0, len(month)):\n            if ord(month[i]) - ord('a') + 1 > 12:\n                return False\n        return True\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.check_month('march')\n    print s.check_month('may')\n    print s.check_month('june')\n    print s.check_month('july')\n    print s.check_month('august')\n    print s.check_month('september')\n    print s.check_month('october')\n    print s.check_month('november')\n    print s.check_month('december')\n    print s.check_month('january')\n    print s.check_month('february')\n    print s.check_month('march')\n    print s.check_month('april')\n    print s.check_month('may')\n    print s.check_month('june')\n    print s.check_month('july')\n    print s.check_month('august')\n    print s.check_month('september')\n    print s.check_month('october')\n    print s.check_month('november')\n    print s.check_month('december')\n    print s.check_month('january')\n    print s.check_month('february')\n    print s.check_month('march')\n    print s.check_month('april')\n    print s.check_month('may')\n    print s.check_month('june')\n    print s.check_month('july')\n    print s.check_month('august')\n    print s.check_month('september')\n    print s.check_month",
      -2.2109375
    ],
    [
      "# https://leetcode.com/problems/day-of-month-with-maximum-number-of-occurrences/\n\nclass Solution(object):\n    def check_month(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        max_occurrences = 0\n        for i in range(len(month)):\n            if month[i] == 'M':\n                if month[i+1] == 'J':\n                    max_occurrences += 1\n                elif month[i+1] == 'A':\n                    max_occurrences += 2\n                elif month[i+1] == 'J':\n                    max_occurrences += 3\n                elif month[i+1] == 'F':\n                    max_occurrences += 4\n                elif month[i+1] == 'A':\n                    max_occurrences += 5\n                elif month[i+1] == 'S':\n                    max_occurrences += 6\n                elif month[i+1] == 'O':\n                    max_occurrences += 7\n                elif month[i+1] == 'N':\n                    max_occurrences += 8\n                elif month[i+1] == 'D':\n                    max_occurrences += 9\n                elif month[i+1] == 'L':\n                    max_occurrences += 10\n                elif month[i+1] == 'G':\n                    max_occurrences += 11\n                elif month[i+1] == 'Y':\n                    max_occurrences += 12\n                elif month[i+1] == 'Z':\n                    max_occurrences += 13\n                elif month[i+1] == 'Y':\n                    max_occurrences += 14\n                elif month[i+1] == 'V':\n                    max_occurrences += 15\n                elif month[i+1] == 'E':\n                    max_occurrences += 16\n                elif month[i+1] == 'B':\n                    max_occurrences += 17\n                elif month[i",
      -2.232421875
    ],
    [
      "# Definition for a valid month.\nclass Month(object):\n    def __init__(self, month_name):\n        self.month_name = month_name\n        self.is_valid = False\n\n    def is_valid(self):\n        return self.is_valid\n\nclass Solution(object):\n    def checkValid(self, month_name):\n        \"\"\"\n        :type month_name: str\n        :rtype: bool\n        \"\"\"\n        if month_name == \"January\" or month_name == \"February\" or month_name == \"March\" or month_name == \"April\" or month_name == \"May\" or month_name == \"June\" or month_name == \"July\" or month_name == \"August\" or month_name == \"September\" or month_name == \"October\" or month_name == \"November\" or month_name == \"December\":\n            return True\n        elif month_name == \"Jan\":\n            return True\n        elif month_name == \"Feb\":\n            return True\n        elif month_name == \"Mar\":\n            return True\n        elif month_name == \"Apr\":\n            return True\n        elif month_name == \"May\":\n            return True\n        elif month_name == \"Jun\":\n            return True\n        elif month_name == \"Jul\":\n            return True\n        elif month_name == \"Aug\":\n            return True\n        elif month_name == \"Sep\":\n            return True\n        elif month_name == \"Oct\":\n            return True\n        elif month_name == \"Nov\":\n            return True\n        elif month_name == \"Dec\":\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.checkValid(\"January\")\n    print solution.checkValid(\"February\")\n    print solution.checkValid(\"March\")\n    print solution.checkValid(\"April\")\n    print solution.checkValid(\"May\")\n    print solution.checkValid(\"June\")\n    print solution.checkValid(\"July\")\n    print solution.checkValid(\"August\")\n    print solution.checkValid(\"September\")\n    print solution.checkValid(\"",
      -2.8984375
    ],
    [
      "# https://www.hackerrank.com/challenges/day-of-the-week-in-the-month\n# https://www.hackerrank.com/challenges/day-of-the-week-in-the-month/submissions/code/43592757\n\nimport unittest\n\ndef is_28_days(month_name):\n    if len(month_name) == 3:\n        if month_name.isupper():\n            if len(month_name) == 3:\n                return True\n        return False\n    else:\n        return False\n\nclass TestFunction(unittest.TestCase):\n    def test_is_28_days(self):\n        self.assertTrue(is_28_days(\"jan\"))\n        self.assertTrue(is_28_days(\"feb\"))\n        self.assertTrue(is_28_days(\"mar\"))\n        self.assertTrue(is_28_days(\"apr\"))\n        self.assertTrue(is_28_days(\"may\"))\n        self.assertTrue(is_28_days(\"jun\"))\n        self.assertTrue(is_28_days(\"jul\"))\n        self.assertTrue(is_28_days(\"aug\"))\n        self.assertTrue(is_28_days(\"sep\"))\n        self.assertTrue(is_28_days(\"oct\"))\n        self.assertTrue(is_28_days(\"nov\"))\n        self.assertTrue(is_28_days(\"dec\"))\n\n        self.assertFalse(is_28_days(\"january\"))\n        self.assertFalse(is_28_days(\"february\"))\n        self.assertFalse(is_28_days(\"march\"))\n        self.assertFalse(is_28_days(\"april\"))\n        self.assertFalse(is_28_days(\"may\"))\n        self.assertFalse(is_28_days(\"june\"))\n        self.assertFalse(is_28_days(\"july\"))\n        self.assertFalse(is_28_days(\"august\"))\n        self.assertFalse(is_28_days(\"september\"))\n        self.assertFalse(is_28_days(\"october\"))\n        self.assertFalse",
      -2.908203125
    ],
    [
      "def check_if_month_has_28_days(month_name):\n    # write your code here\n    if month_name == 'January' or month_name == 'February' or month_name == 'March' or month_name == 'April':\n        return True\n    else:\n        return False\n\n# test cases\nprint check_if_month_has_28_days('February')\nprint check_if_month_has_28_days('March')\nprint check_if_month_has_28_days('April')\nprint check_if_month_has_28_days('May')\nprint check_if_month_has_28_days('June')\nprint check_if_month_has_28_days('July')\nprint check_if_month_has_28_days('August')\nprint check_if_month_has_28_days('September')\nprint check_if_month_has_28_days('October')\nprint check_if_month_has_28_days('November')\nprint check_if_month_has_28_days('December')\nprint check_if_month_has_28_days('January')\nprint check_if_month_has_28_days('February')\nprint check_if_month_has_28_days('March')\nprint check_if_month_has_28_days('April')\nprint check_if_month_has_28_days('May')\nprint check_if_month_has_28_days('June')\nprint check_if_month_has_28_days('July')\nprint check_if_month_has_28_days('August')\nprint check_if_month_has_28_days('September')\nprint check_if_month_has_28_days('October')\nprint check_if_month_has_28_days('November')\nprint check_if_month_has_28_days('December')",
      -3.001953125
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def is_leap_year(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        return (month % 4 == 0) and (month % 100!= 0 or month % 400 == 0)\n\n    def check_leap_year(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        return month in [1, 3, 5, 7, 8, 10, 12]\n\n    def check_leap_year_aux(self, month):\n        if self.check_leap_year(month):\n            return True\n        elif self.check_leap_year(month - 1):\n            return True\n        else:\n            return False\n\n    def check_leap_year_str(self, month):\n        if month == 4:\n            return True\n        elif month == 6:\n            return True\n        elif month == 9:\n            return True\n        elif month == 11:\n            return True\n        else:\n            return False\n\n    def check_leap_year_str_aux(self, month):\n        if month in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n\n    def check_leap_year_aux(self, month):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        elif month in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n\n    def check_leap_year_aux2(self, month):\n        if month == 4:\n            return True\n        elif month == 6:\n            return True\n        elif month == 9:\n            return True\n        elif month == 11:\n            return True\n        else:\n            return False\n\n    def check_leap_year_aux2_aux(self, month):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        elif month in [4, 6, 9, 11]:\n            return True\n        else:",
      -3.037109375
    ],
    [
      "# https://leetcode.com/problems/day-of-month/\n\nclass Solution(object):\n    def check_day(self, month, day):\n        if day == 29 and month in [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]:\n            return True\n        elif day == 28 and month in [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]:\n            return True\n        return False\n\n# https://leetcode.com/problems/day-of-month/discuss/208935/Python-Solution-using-if-else\nclass Solution(object):\n    def check_day(self, month, day):\n        if month == 12 and day == 31:\n            return True\n        elif month == 1 and day == 31:\n            return True\n        elif month == 1 and day == 30:\n            return True\n        elif month == 2 and day == 29:\n            return True\n        elif month == 3 and day == 31:\n            return True\n        elif month == 4 and day == 30:\n            return True\n        elif month == 5 and day == 31:\n            return True\n        elif month == 6 and day == 30:\n            return True\n        elif month == 7 and day == 31:\n            return True\n        elif month == 8 and day == 31:\n            return True\n        elif month == 9 and day == 30:\n            return True\n        elif month == 10 and day == 31:\n            return True\n        elif month == 11 and day == 30:\n            return True\n        elif month == 12 and day == 31:\n            return True\n        else:\n            return False",
      -3.208984375
    ],
    [
      "def is_leap_year(year):\n    \"\"\"\n    Check whether the given year is leap or not.\n    :type year: int\n    :rtype: bool\n    \"\"\"\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\ndef is_leap_month(month):\n    \"\"\"\n    Check whether the given month is leap or not.\n    :type month: int\n    :rtype: bool\n    \"\"\"\n    if month == 2 and is_leap_year(year):\n        return True\n    elif month == 2 and not is_leap_year(year):\n        return False\n    else:\n        return False\n\ndef is_leap_day(day):\n    \"\"\"\n    Check whether the given day is leap or not.\n    :type day: int\n    :rtype: bool\n    \"\"\"\n    if day == 29 and is_leap_month(month):\n        return True\n    elif day == 29 and not is_leap_month(month):\n        return False\n    else:\n        return False\n\ndef check_leap_days(year):\n    \"\"\"\n    Check whether the given year has 29 days or not.\n    :type year: int\n    :rtype: bool\n    \"\"\"\n    if is_leap_year(year):\n        return 29\n    else:\n        return 28\n\ndef check_leap_month(month):\n    \"\"\"\n    Check whether the given month has 29 days or not.\n    :type month: int\n    :rtype: bool\n    \"\"\"\n    if is_leap_month(month):\n        return 29\n    else:\n        return 28\n\nif __name__ == '__main__':\n    print(check_leap_month(1))\n    print(check_leap_month(2))\n    print(check_leap_month(3))\n    print(check_leap_month(4))\n    print(check_leap_month(5))\n    print(check_leap_month(",
      -3.333984375
    ],
    [
      "# https://leetcode.com/problems/check-if-month-name-contains-28-days/discuss/776892/Python-solution-using-regular-expressions\n\nclass Solution(object):\n    def checkIsLeapYear(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == 'January':\n            return False\n        elif month == 'February':\n            return True\n        elif month == 'March':\n            return False\n        elif month == 'April':\n            return False\n        elif month == 'May':\n            return False\n        elif month == 'June':\n            return False\n        elif month == 'July':\n            return False\n        elif month == 'August':\n            return False\n        elif month == 'September':\n            return False\n        elif month == 'October':\n            return False\n        elif month == 'November':\n            return False\n        elif month == 'December':\n            return False\n        else:\n            raise Exception(\"Invalid month name\")\n        \n    def checkIsLeapYear(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == 'January':\n            return False\n        elif month == 'February':\n            return False\n        elif month == 'March':\n            return True\n        elif month == 'April':\n            return False\n        elif month == 'May':\n            return False\n        elif month == 'June':\n            return False\n        elif month == 'July':\n            return False\n        elif month == 'August':\n            return False\n        elif month == 'September':\n            return False\n        elif month == 'October':\n            return False\n        elif month == 'November':\n            return False\n        elif month == 'December':\n            return False\n        else:\n            raise Exception(\"Invalid month name\")\n        \n    def checkIsLeapYear(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == 'January':\n            return False\n        elif month == 'February",
      -3.3359375
    ],
    [
      "def is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    else:\n        return year % 4 == 0\n\ndef is_leap_month(month):\n    return month == 2 and is_leap_year(year)\n\ndef is_leap_month_name(month_name):\n    month_name = month_name.lower()\n    if month_name == 'january' or month_name == 'february':\n        return is_leap_month(month_name)\n    elif month_name =='march' or month_name == 'april':\n        return False\n    elif month_name =='may' or month_name == 'june':\n        return is_leap_month(month_name)\n    elif month_name == 'july' or month_name == 'august':\n        return False\n    elif month_name =='september' or month_name =='september':\n        return is_leap_month(month_name)\n    elif month_name == 'october' or month_name == 'november':\n        return is_leap_month(month_name)\n    elif month_name == 'december':\n        return is_leap_month(month_name)\n    else:\n        return False\n\nprint(is_leap_month_name('march'))\nprint(is_leap_month_name('february'))\nprint(is_leap_month_name('april'))\nprint(is_leap_month_name('march'))\nprint(is_leap_month_name('july'))\nprint(is_leap_month_name('august'))\nprint(is_leap_month_name('september'))\nprint(is_leap_month_name('september'))\nprint(is_leap_month_name('october'))\nprint(is_leap_month_name('november'))\nprint(is_leap_month_name('december'))",
      -3.419921875
    ],
    [
      "import re\n\ndef is_leap(year):\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    return False\n\ndef get_days(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    elif month == 2 and is_leap(year):\n        return 29\n    return 28\n\ndef check_leap_year(year):\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    return False\n\ndef check_month(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    elif month == 2 and check_leap_year(year):\n        return True\n    return False\n\ndef check_day(day):\n    if day == 1 or day == 2 or day == 3 or day == 4 or day == 5 or day == 6 or day == 7 or day == 8 or day == 9 or day == 10 or day == 11 or day == 12 or day == 13 or day == 14 or day == 15 or day == 16 or day == 17 or day == 18 or day == 19 or day == 20 or day == 21 or day == 22 or day == 23 or day == 24 or day == 25 or day == 26 or day == 27 or day == 28:\n        return True\n    return False\n\ndef check_leap_day(day):\n    if day == 1 or day == 2 or day == 3 or day == 4 or day == 5 or day == 6 or day == 7 or day == 8 or day == 9 or day == 10 or day == 11 or day == 12 or day == 13 or day == 14 or day == 15 or day == 16 or day == 17 or day == 18 or day == 19 or day == 20 or day ==",
      -3.513671875
    ],
    [
      "def check_if_month_has_28_days(month_name):\n    if len(month_name) == 3:\n        return month_name[2] == 'A' or month_name[2] == 'B'\n    elif len(month_name) == 4:\n        return month_name[3] == 'A' or month_name[3] == 'B'\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(check_if_month_has_28_days('May'))\n    print(check_if_month_has_28_days('November'))\n    print(check_if_month_has_28_days('December'))\n    print(check_if_month_has_28_days('January'))\n    print(check_if_month_has_28_days('February'))\n    print(check_if_month_has_28_days('March'))\n    print(check_if_month_has_28_days('April'))\n    print(check_if_month_has_28_days('May'))\n    print(check_if_month_has_28_days('November'))\n    print(check_if_month_has_28_days('December'))\n    print(check_if_month_has_28_days('January'))\n    print(check_if_month_has_28_days('February'))\n    print(check_if_month_has_28_days('March'))\n    print(check_if_month_has_28_days('April'))\n    print(check_if_month_has_28_days('May'))\n    print(check_if_month_has_28_days('November'))\n    print(check_if_month_has_28_days('December'))",
      -3.548828125
    ],
    [
      "# The given month name is the name of a month, e.g. \"February\".\n# Return True if the month has 28 days, and False otherwise.\n#\n# Example 1:\n# Input: \"February\"\n# Output: True\n# Example 2:\n# Input: \"January\"\n# Output: False\n# Example 3:\n# Input: \"December\"\n# Output: False\n# Note:\n# The month name is case-insensitive.\n# The month name is guaranteed to be consist of two upper-case letters (January or February or...)\n# The length of the given month name is guaranteed to be less than 11.\n# The length of the given month name is guaranteed to be greater than 0.\n# The input is guaranteed to be a valid month name.\n# The answer is guaranteed to be a valid integer.\n# The answer is guaranteed to be 0 or 1.\n\n# 2017-06-20\nclass Solution(object):\n    def checkIsLeapYear(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: int\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        if month[0].isalpha():\n            month = month[0].upper() + month[1:].lower()\n        if month in ['FEBRUARY','FEB','FEBRAIL','FEBR','F','FRA','FR','FRB','FRB','FR','FE','FEBR']:\n            return True\n        return False",
      -3.611328125
    ],
    [
      "# -*- coding:utf-8 -*-\nclass Solution(object):\n    def isLeapYear(self, year):\n        return year%4==0 and (year%100!=0 or year%400==0)\n    \n    def checkIsLeap(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if self.isLeapYear(year):\n            return True\n        else:\n            return False\n        \n    def checkIsLeap2(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if self.isLeapYear(year):\n            return True\n        else:\n            return False\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.checkIsLeap2(2016)\n    print s.checkIsLeap2(2000)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017)\n    print s.checkIsLeap2(2017",
      -3.748046875
    ],
    [
      "# https://leetcode.com/problems/month-name-contains-28-days/discuss/82634/Python-with-explanation-and-suggestions-with-10-lines-of-code-and-20-lines-of-comment\n\nclass Solution(object):\n    def checkIsMonth(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if len(month)!= 3:\n            return False\n        \n        # month starts with a capital letter\n        if month[0].isupper():\n            return False\n        \n        # month starts with a lowercase letter\n        if month[0].islower():\n            return False\n        \n        # month starts with a capital letter and a capital letter\n        if month[0].isupper() and month[1].isupper():\n            return False\n        \n        # month starts with a capital letter and a lowercase letter\n        if month[0].isupper() and month[1].islower():\n            return False\n        \n        # month starts with a capital letter and a capital letter and a capital letter\n        if month[0].isupper() and month[1].isupper() and month[2].isupper():\n            return False\n        \n        # month starts with a capital letter and a capital letter and a lowercase letter\n        if month[0].isupper() and month[1].isupper() and month[2].islower():\n            return False\n        \n        # month starts with a capital letter and a lowercase letter and a capital letter\n        if month[0].isupper() and month[1].islower() and month[2].isupper():\n            return False\n        \n        # month starts with a capital letter and a lowercase letter and a lowercase letter\n        if month[0].isupper() and month[1].islower() and month[2].islower():\n            return False\n        \n        # month starts with a capital letter and a lowercase letter and a capital letter and a capital letter\n        if month[0].isupper() and month[1].islower() and month[2].isupper() and month[3].isupper():\n            return False\n        \n        # month starts with a",
      -4.12109375
    ],
    [
      "# https://www.hackerrank.com/challenges/month-28/problem\n\n# 1. Write a function that takes a string as an input and returns true or false.\n# 2. If the function returns true, print \"The month name is 28 days.\". Otherwise, print \"The month name is not 28 days.\"\n# 3. Test your function and submit it to Hackerrank.\n\ndef check_if_month_28(month):\n    # your code here\n    if len(month) == 4:\n        return month[:2] == 'Jan' or month[:2] == 'Feb' or month[:2] == 'Mar' or month[:2] == 'Apr' or month[:2] == 'May' or month[:2] == 'Jun' or month[:2] == 'Jul' or month[:2] == 'Aug' or month[:2] == 'Sep' or month[:2] == 'Oct' or month[:2] == 'Nov' or month[:2] == 'Dec'\n    else:\n        return False\n\nif __name__ == '__main__':\n    month = input()\n    print(check_if_month_28(month))",
      -4.15625
    ],
    [
      "# TODO:\n# 1. use a dictionary to store the number of days in a month\n# 2. check the first and last day of the month\n# 3. check the number of days in the month, and if it is 28, print True, otherwise print False\n# 4. check the number of days in the month, and if it is 29, print True, otherwise print False\n\n# https://leetcode.com/problems/valid-month-name/\n\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return False\n        if s[0] == '0':\n            return False\n        if len(s) == 1:\n            return False\n        if s[1] == '0':\n            return False\n        if s[0] == '1' and s[1] == '0':\n            return False\n        if s[0] == '0' and s[1] == '1':\n            return False\n        if s[0] == '1' and s[1] == '1':\n            return False\n        if s[0] == '2':\n            return False\n        if s[0] == '3':\n            return False\n        if s[0] == '4':\n            return False\n        if s[0] == '5':\n            return False\n        if s[0] == '6':\n            return False\n        if s[0] == '7':\n            return False\n        if s[0] == '8':\n            return False\n        if s[0] == '9':\n            return False\n        if s[0] == '10':\n            return False\n        if s[0] == '11':\n            return False\n        if s[0] == '12':\n            return False\n        if s[0] == '13':\n            return False\n        if s[0] == '14':\n            return False\n        if s[0] == '15':\n            return False\n        if s[0] == '16':\n            return False\n        if s[0] == '17':\n            return False\n        if s[",
      -4.36328125
    ],
    [
      "# https://www.hackerrank.com/challenges/check-if-month-has-28-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-29-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-30-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-31-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-32-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-33-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-34-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-35-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-36-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-37-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-38-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-39-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-40-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-41-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-42-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-43-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-44-days/problem\n# https://www.hackerrank.com/challenges/check-if-month-has-45-days/problem\n# https://www.hackerr",
      -4.60546875
    ],
    [
      "# https://www.hackerrank.com/challenges/day-of-the-month\n\nimport re\n\ndef is_leap_year(year):\n    \"\"\"\n    Check whether the given year is a leap year.\n    :param year: int\n    :return: bool\n    \"\"\"\n    if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n        return True\n    else:\n        return False\n\ndef day_of_the_month(month, year):\n    \"\"\"\n    Returns the number of days in the given month of the year.\n    :param month: int\n    :param year: int\n    :return: int\n    \"\"\"\n    if month == 1:\n        return 31 if is_leap_year(year) else 30\n    elif month == 3 or month == 5 or month == 8 or month == 10:\n        return 30\n    elif month == 2:\n        return is_leap_year(year) and 29 or 28\n    else:\n        return 29\n\ndef day_of_the_month_checker(month, year):\n    \"\"\"\n    Returns whether the given month has 28 or 29 days.\n    :param month: int\n    :param year: int\n    :return: bool\n    \"\"\"\n    if month == 2:\n        if is_leap_year(year):\n            return day_of_the_month(month, year) == 29\n        else:\n            return day_of_the_month(month, year) == 28\n    else:\n        return day_of_the_month(month, year) == 29\n\ndef main():\n    \"\"\"\n    Main function\n    :return: None\n    \"\"\"\n    month = input()\n    year = int(input())\n    if day_of_the_month_checker(month, year):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()",
      -4.78515625
    ],
    [
      "# https://www.hackerrank.com/challenges/check-if-month-has-28-days\n# https://www.hackerrank.com/challenges/check-if-month-has-30-days\n# https://www.hackerrank.com/challenges/check-if-month-has-31-days\n# https://www.hackerrank.com/challenges/check-if-month-has-29-days\n# https://www.hackerrank.com/challenges/check-if-month-has-30-days\n# https://www.hackerrank.com/challenges/check-if-month-has-31-days\n# https://www.hackerrank.com/challenges/check-if-month-has-29-days\n# https://www.hackerrank.com/challenges/check-if-month-has-30-days\n# https://www.hackerrank.com/challenges/check-if-month-has-31-days\n# https://www.hackerrank.com/challenges/check-if-month-has-29-days\n# https://www.hackerrank.com/challenges/check-if-month-has-30-days\n# https://www.hackerrank.com/challenges/check-if-month-has-31-days\n\n#!/usr/bin/python\n\nimport sys\n\ndef check_if_month_has_28_days(month_name):\n    if len(month_name)!= 3:\n        sys.exit(\"Invalid month name\")\n\n    if month_name == \"JAN\":\n        if int(day_of_month) == 1:\n            return True\n        else:\n            return False\n    elif month_name == \"FEB\":\n        if int(day_of_month) == 29:\n            return True\n        else:\n            return False\n    elif month_name == \"MAR\":\n        if int(day_of_month) == 30:\n            return True\n        else:\n            return False\n    elif month_name == \"APR\":\n        if int(day_of_month) == 31:\n            return True\n        else:",
      -4.796875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def isValid(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        # print month\n        return len(month) == 3 and (month == 'Jan' or month == 'Feb' or month == 'Mar' or month == 'Apr' or month == 'May' or month == 'Jun' or month == 'Jul' or month == 'Aug' or month == 'Sep' or month == 'Oct' or month == 'Nov' or month == 'Dec' or month == 'Jan' or month == 'Feb' or month == 'Mar' or month == 'Apr' or month == 'May' or month == 'Jun' or month == 'Jul' or month == 'Aug' or month == 'Sep' or month == 'Oct' or month == 'Nov' or month == 'Dec' or month == 'Jan' or month == 'Feb' or month == 'Mar' or month == 'Apr' or month == 'May' or month == 'Jun' or month == 'Jul' or month == 'Aug' or month == 'Sep' or month == 'Oct' or month == 'Nov' or month == 'Dec' or month == 'Jan' or month == 'Feb' or month == 'Mar' or month == 'Apr' or month == 'May' or month == 'Jun' or month == 'Jul' or month == 'Aug' or month == 'Sep' or month == 'Oct' or month == 'Nov' or month == 'Dec' or month == 'Jan' or month == 'Feb' or month == 'Mar' or month == 'Apr' or month == 'May' or month == 'Jun' or month == 'Jul' or month == 'Aug' or month == 'Sep' or month == 'Oct' or month == 'Nov' or month == 'Dec'\n\n    def isValid_2(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        # print month\n        return len(month) == 3 and (month == 'Jan' or month == 'Feb' or month == 'Mar' or month == 'Apr' or month == 'May' or month == 'Jun' or month == 'Jul' or",
      -4.82421875
    ],
    [
      "from datetime import date\nfrom datetime import timedelta\n\n\ndef check_if_is_28_day_month(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if not isinstance(month_name, str):\n        return False\n\n    month_name = month_name.lower()\n    if month_name == 'jan' or month_name == 'feb':\n        return True\n    elif month_name =='mar' or month_name == 'apr':\n        return True\n    elif month_name =='may' or month_name == 'jun':\n        return True\n    elif month_name == 'jul' or month_name == 'aug':\n        return True\n    elif month_name =='sep' or month_name == 'oct':\n        return True\n    elif month_name == 'nov' or month_name == 'dec':\n        return True\n    else:\n        return False\n\n\ndef check_if_is_28_day_month_with_delta(month_name, delta):\n    \"\"\"\n    :type month_name: str\n    :type delta: int\n    :rtype: bool\n    \"\"\"\n    if not isinstance(month_name, str):\n        return False\n\n    month_name = month_name.lower()\n    if month_name == 'jan' or month_name == 'feb':\n        return True\n    elif month_name =='mar' or month_name == 'apr':\n        return True\n    elif month_name =='may' or month_name == 'jun':\n        return True\n    elif month_name == 'jul' or month_name == 'aug':\n        return True\n    elif month_name =='sep' or month_name == 'oct':\n        return True\n    elif month_name == 'nov' or month_name == 'dec':\n        return True\n    else:\n        return False\n\n\ndef check_if_is_28_day_month_with_delta_and_year(month_name, delta, year):\n    \"\"\"\n    :type month_name: str\n    :",
      -4.88671875
    ],
    [
      "def is_28_day_month(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if len(month_name)!= 3:\n        return False\n    if month_name not in ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']:\n        return False\n    if month_name == 'Dec':\n        return True\n    if month_name == 'Jan':\n        return False\n    if month_name == 'Feb':\n        return False\n    if month_name == 'Mar':\n        return False\n    if month_name == 'Apr':\n        return False\n    if month_name == 'May':\n        return False\n    if month_name == 'Jun':\n        return False\n    if month_name == 'Jul':\n        return False\n    if month_name == 'Aug':\n        return False\n    if month_name == 'Sep':\n        return False\n    if month_name == 'Oct':\n        return False\n    if month_name == 'Nov':\n        return False\n    if month_name == 'Dec':\n        return True\n    return False\n\n# test cases\nprint is_28_day_month('Dec')\nprint is_28_day_month('Feb')\nprint is_28_day_month('Jan')\nprint is_28_day_month('May')\nprint is_28_day_month('Apr')\nprint is_28_day_month('Apr')\nprint is_28_day_month('Feb')\nprint is_28_day_month('Feb')",
      -4.953125
    ],
    [
      "# https://www.hackerrank.com/challenges/is-it-28-day-month/problem\n\nimport unittest\n\ndef is_28_day_month(month_name):\n    if len(month_name)!= 3:\n        return False\n    if month_name[0] not in 'abc':\n        return False\n    if month_name[1] not in '123':\n        return False\n    if month_name[2] not in '0123':\n        return False\n    return True\n\nclass TestIsIt28DayMonth(unittest.TestCase):\n    def test_is_28_day_month(self):\n        self.assertTrue(is_28_day_month('a'))\n        self.assertTrue(is_28_day_month('a'))\n        self.assertFalse(is_28_day_month('b'))\n        self.assertFalse(is_28_day_month('c'))\n        self.assertFalse(is_28_day_month('c'))\n        self.assertFalse(is_28_day_month('d'))\n        self.assertFalse(is_28_day_month('e'))\n        self.assertFalse(is_28_day_month('f'))\n        self.assertFalse(is_28_day_month('g'))\n        self.assertFalse(is_28_day_month('h'))\n        self.assertFalse(is_28_day_month('i'))\n        self.assertFalse(is_28_day_month('j'))\n        self.assertFalse(is_28_day_month('k'))\n        self.assertFalse(is_28_day_month('l'))\n        self.assertFalse(is_28_day_month('m'))\n        self.assertFalse(is_28_day_month('n'))\n        self.assertFalse(is_28_day_month('o'))\n        self.assertFalse(is_28_day_month('p'))\n        self.assertFalse(is_28_day_month('q'))\n        self.assertFalse(is_28_day_month('r",
      -5.19921875
    ],
    [
      "# https://www.hackerrank.com/challenges/month-name-28\n# https://www.codewars.com/kata/month-name-28/train/python\n\nimport unittest\n\n\ndef is_28_days(month_name):\n    \"\"\"\n    :param month_name: str\n    :return: bool\n    \"\"\"\n    if month_name == \"January\":\n        return False\n    elif month_name == \"February\":\n        return False\n    elif month_name == \"March\":\n        return False\n    elif month_name == \"April\":\n        return False\n    elif month_name == \"May\":\n        return False\n    elif month_name == \"June\":\n        return False\n    elif month_name == \"July\":\n        return False\n    elif month_name == \"August\":\n        return False\n    elif month_name == \"September\":\n        return False\n    elif month_name == \"October\":\n        return False\n    elif month_name == \"November\":\n        return False\n    elif month_name == \"December\":\n        return True\n    else:\n        return False\n\n\nclass TestCode(unittest.TestCase):\n    def test_is_28_days(self):\n        self.assertTrue(is_28_days(\"February\"))\n        self.assertTrue(is_28_days(\"March\"))\n        self.assertTrue(is_28_days(\"April\"))\n        self.assertTrue(is_28_days(\"May\"))\n        self.assertTrue(is_28_days(\"June\"))\n        self.assertTrue(is_28_days(\"July\"))\n        self.assertTrue(is_28_days(\"August\"))\n        self.assertTrue(is_28_days(\"September\"))\n        self.assertTrue(is_28_days(\"October\"))\n        self.assertTrue(is_28_days(\"November\"))\n        self.assertTrue(is_28_days(\"December\"))\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -5.203125
    ],
    [
      "# https://www.hackerrank.com/challenges/day-of-month\n\n# Time complexity: O(1)\n# Space complexity: O(1)\n\n# We can get the 28 days in a month by counting the days in the month.\n# However, if the month name has \"long\" as a suffix, we cannot count it.\n# So, we need to check whether the suffix is \"long\" or not.\n# If the suffix is long, we can count the days in the month, otherwise we\n# need to count the days in the next month.\n\n# For example, the month name \"May\" has 28 days.\n# If the suffix is \"long\", we can simply count the days in the month,\n# otherwise, we need to count the days in the next month.\n\ndef check_if_month_has_28_days(month_name):\n    # Your function should return true if the given month has 28 days,\n    # and false otherwise.\n    return len(month_name)!= 4 or month_name[3] == 'long'\n\n# For example, if the month name is \"May\",\n# the function should return true,\n# and if the month name is \"June\",\n# the function should return false.\n\ndef check_if_month_has_28_days_aux(month_name):\n    # Your function should return true if the given month has 28 days,\n    # and false otherwise.\n    return len(month_name)!= 4 or month_name[3] == 'long'\n\nif __name__ == '__main__':\n    print(check_if_month_has_28_days_aux('May'))\n    print(check_if_month_has_28_days_aux('June'))\n    print(check_if_month_has_28_days_aux('September'))\n    print(check_if_month_has_28_days_aux('December'))\n    print(check_if_month_has_28_days_aux('December'))",
      -5.2109375
    ],
    [
      "#!/usr/bin/python\n\n# https://www.hackerrank.com/challenges/month-name-28/problem\n\n# Note:\n# The number of days in February depends on the year.\n# For example, in 2014, February has 29 days if and only if the year is not a leap year.\n# For February in other years, the number of days is the same as the number of days in February.\n# You may assume that the input month name is in lowercase.\n# Example 1:\n# Input: \"feb\"\n# Output: true\n# Explanation: February has 29 days in any year.\n# Example 2:\n# Input: \"february\"\n# Output: false\n# Explanation: February has 28 days in 2014 and 2015.\n# Example 3:\n# Input: \"feb\"\n# Output: false\n# Explanation: February has 28 days in all years.\n\n# 2017.02.16\nclass Solution(object):\n    def is_leap_year(self, month):\n        if month == \"jan\":\n            return True\n        if month == \"feb\":\n            return True\n        if month == \"mar\":\n            return True\n        if month == \"apr\":\n            return True\n        if month == \"may\":\n            return True\n        if month == \"jun\":\n            return True\n        if month == \"jul\":\n            return True\n        if month == \"aug\":\n            return True\n        if month == \"sep\":\n            return True\n        if month == \"oct\":\n            return True\n        if month == \"nov\":\n            return True\n        if month == \"dec\":\n            return True\n\n        if month == \"january\":\n            return True\n        if month == \"february\":\n            return True\n        if month == \"march\":\n            return True\n        if month == \"april\":\n            return True\n        if month == \"may\":\n            return True\n        if month == \"june\":\n            return True\n        if month == \"july\":\n            return True\n        if month == \"august\":\n            return True\n        if month == \"september\":\n            return True\n        if month == \"october\":\n            return",
      -5.25390625
    ],
    [
      "# https://leetcode.com/problems/check-if-month-contains-28-days/discuss/338828/Python-Solution\n\nclass Solution(object):\n    def checkIsPM(self, month):\n        return 'PM' in month and month.count('PM') == 1\n\n    def checkIs28(self, month):\n        return len(month) == 2 and month.count('M') == 2 and month.count('AP') == 0 and month.count('APM') == 0 and month.count('PM') == 0 and month.count('P') == 0 and month.count('PST') == 0 and month.count('PDT') == 0 and month.count('UTC') == 0\n\n    def checkIs28(self, month):\n        return len(month) == 2 and month.count('M') == 2 and month.count('AP') == 0 and month.count('APM') == 0 and month.count('PM') == 0 and month.count('P') == 0 and month.count('PST') == 0 and month.count('PDT') == 0 and month.count('UTC') == 0\n\n    def checkIs28(self, month):\n        return len(month) == 2 and month.count('M') == 2 and month.count('AP') == 0 and month.count('APM') == 0 and month.count('PM') == 0 and month.count('P') == 0 and month.count('PST') == 0 and month.count('PDT') == 0 and month.count('UTC') == 0\n\n    def checkIs28(self, month):\n        return len(month) == 2 and month.count('M') == 2 and month.count('AP') == 0 and month.count('APM') == 0 and month.count('PM') == 0 and month.count('P') == 0 and month.count('PST') == 0 and month.count('PDT') == 0 and month.count('UTC') == 0\n\n    def checkIs28(self, month):\n        return len(month) == 2 and month.count('M') == 2 and month.count('AP') == 0 and month.count('APM') == 0 and month.count('PM') == 0 and month.count",
      -5.28125
    ],
    [
      "import re\n\ndef is_valid(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if len(month_name)!= 3:\n        return False\n    if month_name[0] not in 'abc':\n        return False\n    if month_name[1] not in 'defghijklmnopqrstuvwxyz':\n        return False\n    if month_name[2] not in '0123456789':\n        return False\n    if re.match(r'^[0-9]+$', month_name) is None:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(is_valid('abc'))\n    print(is_valid('def'))\n    print(is_valid('ghi'))\n    print(is_valid('jkl'))\n    print(is_valid('mno'))\n    print(is_valid('pqr'))\n    print(is_valid('tuv'))\n    print(is_valid('wxy'))\n    print(is_valid('z'))\n    print(is_valid('0'))\n    print(is_valid('123'))\n    print(is_valid('1234'))",
      -5.28125
    ],
    [
      "import re\n\n\ndef check_if_month_contains_28_days(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if re.search(r'^(?i)^(?:January|February|March|April|May|June|July|August|September|October|November|December)$', month_name):\n        return False\n    elif re.search(r'^(?i)^(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)$', month_name):\n        return False\n    elif re.search(r'^(?i)^(?:Janvier|Febrier|Mars|Avril|Mai|Juin|Juillet|Ao\u00fbt|Septembre|Octobre|Novembre|Decembre)$', month_name):\n        return False\n    elif re.search(r'^(?i)^(?:Janvier|Febrier|Mars|Avril|Mai|Juin|Juillet|Ao\u00fbt|Septembre|Octobre|Novembre|Decembre)$', month_name):\n        return False\n    elif re.search(r'^(?i)^(?:Janvier|Febrier|Mars|Avril|Mai|Juin|Juillet|Ao\u00fbt|Septembre|Octobre|Novembre|Decembre)$', month_name):\n        return False\n    elif re.search(r'^(?i)^(?:Janvier|Febrier|Mars|Avril|Mai|Juin|Juillet|Ao\u00fbt|Septembre|Octobre|Novembre|Decembre)$', month_name):\n        return False\n    elif re.search(r'^(?i)^(?:Janvier|Febrier|Mars|Avril|Mai|Juin|Juillet|Ao\u00fbt|Septembre|Octobre|Novembre|Decembre)$', month_name):\n        return False\n    elif re.search(r",
      -5.49609375
    ],
    [
      "def check_month_28(month_name):\n    if month_name == 'Jan':\n        return True\n    elif month_name == 'Feb':\n        return True\n    elif month_name == 'Mar':\n        return True\n    elif month_name == 'Apr':\n        return True\n    elif month_name == 'May':\n        return True\n    elif month_name == 'Jun':\n        return True\n    elif month_name == 'Jul':\n        return True\n    elif month_name == 'Aug':\n        return True\n    elif month_name == 'Sep':\n        return True\n    elif month_name == 'Oct':\n        return True\n    elif month_name == 'Nov':\n        return True\n    elif month_name == 'Dec':\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(check_month_28('Jan'))\n    print(check_month_28('Feb'))\n    print(check_month_28('Mar'))\n    print(check_month_28('Apr'))\n    print(check_month_28('May'))\n    print(check_month_28('Jun'))\n    print(check_month_28('Jul'))\n    print(check_month_28('Aug'))\n    print(check_month_28('Sep'))\n    print(check_month_28('Oct'))\n    print(check_month_28('Nov'))\n    print(check_month_28('Dec'))",
      -5.62890625
    ],
    [
      "# https://leetcode.com/problems/check-if-month-contains-28-days/\n\nclass Solution(object):\n    def checkIsLeapYear(self, month, day):\n        \"\"\"\n        :type month: int\n        :type day: int\n        :rtype: bool\n        \"\"\"\n        if month == 2 and day == 29:\n            return True\n        elif month == 2 and day == 28:\n            return False\n        elif month == 3 and day == 31:\n            return True\n        elif month == 3 and day == 30:\n            return False\n        elif month == 4 and day == 31:\n            return True\n        elif month == 4 and day == 30:\n            return False\n        elif month == 5 and day == 31:\n            return True\n        elif month == 5 and day == 30:\n            return False\n        elif month == 6 and day == 31:\n            return True\n        elif month == 6 and day == 30:\n            return False\n        elif month == 7 and day == 31:\n            return True\n        elif month == 7 and day == 30:\n            return False\n        elif month == 8 and day == 31:\n            return True\n        elif month == 8 and day == 30:\n            return False\n        elif month == 9 and day == 31:\n            return True\n        elif month == 9 and day == 30:\n            return False\n        elif month == 10 and day == 31:\n            return True\n        elif month == 10 and day == 30:\n            return False\n        elif month == 11 and day == 31:\n            return True\n        elif month == 11 and day == 30:\n            return False\n        elif month == 12 and day == 31:\n            return True\n        elif month == 12 and day == 30:\n            return False\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    assert Solution().checkIsLeapYear(2, 29) == True\n    assert Solution().checkIsLeapYear(2, 28) == False\n    assert Solution().checkIsLeapYear(3, 31) == True\n    assert Solution().checkIsLeapYear(3, 30)",
      -5.77734375
    ],
    [
      "#!/usr/bin/python\n\nimport re\n\ndef check_month(month):\n    if len(month)!= 3:\n        return False\n    if len(month) == 3:\n        if month.find('a')!= -1:\n            return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month) == 3:\n        if len(month) == 3:\n            if month.find('a')!= -1:\n                return False\n    if len(month",
      -5.8203125
    ],
    [
      "# https://www.hackerrank.com/challenges/month-28\ndef month28(month):\n    if month == \"January\":\n        return True\n    elif month == \"February\":\n        return True\n    elif month == \"March\":\n        return True\n    elif month == \"April\":\n        return True\n    elif month == \"May\":\n        return True\n    elif month == \"June\":\n        return True\n    elif month == \"July\":\n        return True\n    elif month == \"August\":\n        return True\n    elif month == \"September\":\n        return True\n    elif month == \"October\":\n        return True\n    elif month == \"November\":\n        return True\n    elif month == \"December\":\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print month28(\"January\")\n    print month28(\"February\")\n    print month28(\"March\")\n    print month28(\"April\")\n    print month28(\"May\")\n    print month28(\"June\")\n    print month28(\"July\")\n    print month28(\"August\")\n    print month28(\"September\")\n    print month28(\"October\")\n    print month28(\"November\")\n    print month28(\"December\")",
      -5.9375
    ],
    [
      "class Solution:\n    # @param month, a string\n    # @return a boolean\n    def checkIsLeapYear(self, month):\n        if len(month)!= 3:\n            return False\n        if month in [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]:\n            return False\n        if month in [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"]:\n            return False\n        if month in [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"]:\n            return False\n        if month in [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"]:\n            return False\n        if month in [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"]:\n            return False\n        if month in [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"]:\n            return False\n        if month in [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"]:\n            return False\n        if month in [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"]:\n            return False\n        if month in [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"]:\n            return False\n        if month in [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"]:\n            return False\n        if month in",
      -5.99609375
    ],
    [
      "# https://www.hackerrank.com/challenges/find-the-largest-day-in-a-month/problem\n\n# Complete the function below.\ndef is_leap_year(month):\n    if month == 2 and (month % 4 == 0 and month % 100!= 0 or month % 400 == 0):\n        return True\n    else:\n        return False\n\n# Check for leap year\ndef is_leap_year_check(month):\n    if month == 2 and (month % 4 == 0 and month % 100!= 0 or month % 400 == 0):\n        return True\n    else:\n        return False\n\n# Check for leap year\ndef is_leap_year_check2(month):\n    if month == 2 and (month % 4 == 0 and month % 100!= 0 or month % 400 == 0):\n        return True\n    else:\n        return False\n\n# Check for leap year\ndef is_leap_year_check3(month):\n    if month == 2 and (month % 4 == 0 and month % 100!= 0 or month % 400 == 0):\n        return True\n    else:\n        return False\n\n# Check for leap year\ndef is_leap_year_check4(month):\n    if month == 2 and (month % 4 == 0 and month % 100!= 0 or month % 400 == 0):\n        return True\n    else:\n        return False\n\n# Check for leap year\ndef is_leap_year_check5(month):\n    if month == 2 and (month % 4 == 0 and month % 100!= 0 or month % 400 == 0):\n        return True\n    else:\n        return False\n\n# Check for leap year\ndef is_leap_year_check6(month):\n    if month == 2 and (month % 4 == 0 and month % 100!= 0 or month % 400 == 0):\n        return True\n    else:\n        return False\n\n# Check for leap year\ndef is_leap_year_check7(month):\n    if month == 2 and (month % 4 == 0 and month % 100!= 0 or month % 400 == 0):\n        return True\n    else:\n        return False\n\n# Check for leap year\ndef is_leap",
      -6.109375
    ],
    [
      "def is_leap_year(year):\n    if year % 4 == 0 and year % 100!= 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    else:\n        return year % 4 == 0\n\ndef check_leap_year(month):\n    if month == 2 and is_leap_year(year):\n        return True\n    elif month == 1 and not is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef check_leap_month(month):\n    if month == 2 and is_leap_year(year):\n        return True\n    elif month == 1 and not is_leap_year(year):\n        return False\n    else:\n        return True\n\n# Test Cases\nprint(check_leap_year(1))\nprint(check_leap_year(2))\nprint(check_leap_year(3))\nprint(check_leap_year(4))\nprint(check_leap_year(5))\nprint(check_leap_year(6))\nprint(check_leap_year(7))\nprint(check_leap_year(8))\nprint(check_leap_year(9))\nprint(check_leap_year(10))\nprint(check_leap_year(11))\nprint(check_leap_year(12))\nprint(check_leap_year(13))\nprint(check_leap_year(14))\nprint(check_leap_year(15))\nprint(check_leap_year(16))\nprint(check_leap_year(17))\nprint(check_leap_year(18))\nprint(check_leap_year(19))\nprint(check_leap_year(20))\nprint(check_leap_year(21))\nprint(check_leap_year(22))\nprint(check_leap_year(23))\nprint(check_leap_year(24))\nprint(check_leap_year(25))\nprint(check_leap_year(26))\nprint(check_leap_year(27))\nprint(",
      -6.1171875
    ],
    [
      "def is_leap(month):\n    if month == 2:\n        return True if ((year % 4) == 0) else False\n    elif month == 4:\n        return True if ((year % 100) == 0) else False\n    elif month == 6:\n        return True if ((year % 400) == 0) else False\n    else:\n        return False\n\ndef check_leap_month(month):\n    return is_leap(month)\n\ndef check_leap_year(year):\n    return is_leap(year)\n\ndef check_leap_year(year):\n    if year % 4 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\n\ndef check_leap_month(month):\n    if month == 2:\n        return True if ((year % 4) == 0) else False\n    elif month == 4:\n        return True if ((year % 100) == 0) else False\n    elif month == 6:\n        return True if ((year % 400) == 0) else False\n    else:\n        return False\n\ndef check_leap_year(year):\n    if year % 4 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\n\ndef check_leap_month(month):\n    if month == 2:\n        return True if ((year % 4) == 0) else False\n    elif month == 4:\n        return True if ((year % 100) == 0) else False\n    elif month == 6:\n        return True if ((year % 400) == 0) else False\n    else:\n        return False\n\ndef check_leap_year(year):\n    if year % 4 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 400 == 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(check_leap_year(1900",
      -6.12109375
    ],
    [
      "# https://leetcode.com/problems/is-it-a-month/discuss/145944/Python-DP-solution-using-recursion\n\nclass Solution(object):\n    def isItMonth(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == 'December':\n            return True\n        elif month == 'January':\n            return True\n        elif month == 'February':\n            return True\n        elif month == 'March':\n            return True\n        elif month == 'April':\n            return True\n        elif month == 'May':\n            return True\n        elif month == 'June':\n            return True\n        elif month == 'July':\n            return True\n        elif month == 'August':\n            return True\n        elif month == 'September':\n            return True\n        elif month == 'October':\n            return True\n        elif month == 'November':\n            return True\n        elif month == 'December':\n            return True\n        elif month == 'January':\n            return False\n        elif month == 'February':\n            return False\n        elif month == 'March':\n            return False\n        elif month == 'April':\n            return False\n        elif month == 'May':\n            return False\n        elif month == 'June':\n            return False\n        elif month == 'July':\n            return False\n        elif month == 'August':\n            return False\n        elif month == 'September':\n            return False\n        elif month == 'October':\n            return False\n        elif month == 'November':\n            return False\n        elif month == 'December':\n            return False\n        elif month == 'January':\n            return False\n        elif month == 'February':\n            return False\n        elif month == 'March':\n            return False\n        elif month == 'April':\n            return False\n        elif month == 'May':\n            return False\n        elif month == 'June':\n            return False\n        elif month == 'July':\n            return False\n        elif month == 'August':\n            return False\n        elif month == '",
      -6.1328125
    ],
    [
      "def is_leap_year(year):\n    \"\"\"\n    Check whether the given year is leap or not.\n    :param year: A given year\n    :return: True if the given year is leap, False otherwise\n    \"\"\"\n    if (year % 4) == 0 and (year % 100)!= 0:\n        return True\n    elif (year % 400) == 0:\n        return True\n    else:\n        return False\n\ndef is_leap_month(month):\n    \"\"\"\n    Check whether the given month is leap or not.\n    :param month: A given month\n    :return: True if the given month is leap, False otherwise\n    \"\"\"\n    if (month % 4) == 0 and (month % 100)!= 0:\n        return True\n    elif (month % 400) == 0:\n        return True\n    else:\n        return False\n\ndef is_leap_month_in_range(month):\n    \"\"\"\n    Check whether the given month is leap or not in the given range.\n    :param month: A given month\n    :param start: A given start month\n    :param end: A given end month\n    :return: True if the given month is leap, False otherwise\n    \"\"\"\n    if month < start or month > end:\n        return False\n    else:\n        return is_leap_month(month)\n\ndef is_leap_month_in_range_and_leap_year(month, start, end):\n    \"\"\"\n    Check whether the given month is leap and the given year is leap or not in the given range.\n    :param month: A given month\n    :param start: A given start month\n    :param end: A given end month\n    :return: True if the given month is leap, False otherwise\n    \"\"\"\n    if month < start or month > end:\n        return False\n    else:\n        return is_leap_year(year) and is_leap_month(month)\n\ndef is_leap_month_in_range_and_leap_year_and_leap_month(month, start, end):\n    \"\"\"\n    Check whether the given month is leap and the given year is leap and the given month is leap",
      -6.1640625
    ],
    [
      "# https://www.hackerrank.com/challenges/check-if-a-month-has-28-days\n# Part of Cosmos by OpenGenus Foundation\n#\n# For example, February contains 28 days.\n#\n# Input: month\n# Output: True or False\n\ndef check_month(month):\n    if month == 'February':\n        return True\n    elif month == 'January':\n        return False\n    else:\n        return check_month(month[0:3]) and check_month(month[3:6])\n\n# Input: month\n# Output: True or False\n\ndef check_month2(month):\n    if month == 'January':\n        return True\n    elif month == 'February':\n        return False\n    else:\n        return check_month2(month[0:3]) and check_month2(month[3:6])\n\n# Input: month\n# Output: True or False\n\ndef check_month3(month):\n    if month == 'January':\n        return True\n    elif month == 'February':\n        return False\n    elif month == 'March':\n        return True\n    else:\n        return check_month3(month[0:3]) and check_month3(month[3:6])\n\n# Input: month\n# Output: True or False\n\ndef check_month4(month):\n    if month == 'January':\n        return True\n    elif month == 'February':\n        return False\n    elif month == 'March':\n        return True\n    elif month == 'April':\n        return False\n    elif month == 'May':\n        return True\n    else:\n        return check_month4(month[0:3]) and check_month4(month[3:6])\n\n# Input: month\n# Output: True or False\n\ndef check_month5(month):\n    if month == 'January':\n        return True\n    elif month == 'February':\n        return False\n    elif month == 'March':\n        return True\n    elif month == 'April':\n        return False\n    elif month == 'May':\n        return True\n    elif month == 'June':\n        return False",
      -6.2734375
    ],
    [
      "#!/usr/bin/env python\n\nimport re\n\ndef check_if_28_days(month):\n    if month == 'January':\n        return True\n    elif month == 'February':\n        return True\n    elif month == 'March':\n        return True\n    elif month == 'April':\n        return True\n    elif month == 'May':\n        return True\n    elif month == 'June':\n        return True\n    elif month == 'July':\n        return True\n    elif month == 'August':\n        return True\n    elif month == 'September':\n        return True\n    elif month == 'October':\n        return True\n    elif month == 'November':\n        return True\n    elif month == 'December':\n        return True\n    else:\n        return False\n\n# print check_if_28_days('January')\n# print check_if_28_days('February')\n# print check_if_28_days('March')\n# print check_if_28_days('April')\n# print check_if_28_days('May')\n# print check_if_28_days('June')\n# print check_if_28_days('July')\n# print check_if_28_days('August')\n# print check_if_28_days('September')\n# print check_if_28_days('October')\n# print check_if_28_days('November')\n# print check_if_28_days('December')\n# print check_if_28_days('January')\n# print check_if_28_days('February')\n# print check_if_28_days('March')\n# print check_if_28_days('April')\n# print check_if_28_days('May')\n# print check_if_28_days('June')\n# print check_if_28_days('July')\n# print check_if_28_days('August')\n# print check_if_28_days('September')\n# print check_if_28_days('October')\n# print check_if_28_days('November')\n# print check_if_28_days('December')\n\ndef main():\n    print check_",
      -6.421875
    ],
    [
      "# https://oj.leetcode.com/problems/check-if-month-name-contains-28-days/\n\nclass Solution:\n    # @param month: A string\n    # @return: A boolean\n    def checkIsLeap(self, month):\n        return month in [\"FEBRUARY\", \"APRIL\", \"JUNE\", \"SEPTEMBER\", \"NOVEMBER\", \"DECEMBER\"]\n\n    def checkIsLeap_2(self, month):\n        month = month.lower()\n        return month in [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]\n\n    def checkIsLeap_3(self, month):\n        month = month.lower()\n        if len(month)!= 3:\n            return False\n\n        for i in xrange(0, len(month)):\n            if not (month[i] in \"abcdefghijklmnopqrstuvwxyz\"):\n                return False\n\n        if month[0] == \"f\" and month[1] == \"r\" and month[2] == \"e\":\n            return True\n\n        return False\n\n    def checkIsLeap_4(self, month):\n        month = month.lower()\n        if len(month)!= 3:\n            return False\n\n        for i in xrange(0, len(month)):\n            if not (month[i] in \"abcdefghijklmnopqrstuvwxyz\"):\n                return False\n\n        if month[0] == \"f\" and month[1] == \"r\" and month[2] == \"e\":\n            return True\n\n        if month[0] == \"f\" and month[1] == \"e\" and month[2] == \"b\":\n            return True\n\n        return False",
      -6.484375
    ],
    [
      "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0 and year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef is_leap_month(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\ndef is_leap_month_name(month_name):\n    if month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\":\n        return True\n    else:\n        return False\n\ndef check_leap_month(month_name):\n    if month_name == \"January\" or month_name == \"March\" or month_name == \"May\" or month_name == \"July\" or month_name == \"August\" or month_name == \"October\" or month_name == \"December\":\n        return True\n    else:\n        return False\n\ndef main():\n    # Check Leap year\n    print(\"\\nTest 1: Leap year\")\n    print(\"Is %s a leap year?\" % \"January\")\n    print(check_leap_year(\"January\"))\n    print(\"Is %s a leap year?\" % \"February\")\n    print(check_leap_year(\"February\"))\n    print(\"Is %s a leap year?\" % \"March\")\n    print(check_leap_year(\"March\"))\n    print(\"Is %s a leap year?\" % \"April\")\n    print(check_leap_year(\"April\"))\n    print(\"Is %s a leap year?\" % \"May\")\n    print(check_leap_year(\"May\"))\n    print(\"Is %s a leap year?\" % \"June\")\n    print(check_leap_year(\"June\"))\n    print(\"Is %s a leap year?\" % \"July\")\n    print(check_leap_year(\"July\"))\n    print(\"Is %s a leap year?\" % \"",
      -6.61328125
    ],
    [
      "# https://leetcode.com/problems/check-if-month-name-contains-28-days/discuss/159905/Python-solution-using-recursion\n\nclass Solution(object):\n    def checkIsLeap(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == \"February\":\n            return True\n        elif month == \"January\":\n            return False\n        elif month == \"March\":\n            return False\n        elif month == \"April\":\n            return False\n        elif month == \"May\":\n            return False\n        elif month == \"June\":\n            return False\n        elif month == \"July\":\n            return False\n        elif month == \"August\":\n            return False\n        elif month == \"September\":\n            return False\n        elif month == \"October\":\n            return False\n        elif month == \"November\":\n            return False\n        elif month == \"December\":\n            return False\n        elif month == \"January\":\n            return True\n        elif month == \"February\":\n            return True\n        elif month == \"March\":\n            return True\n        elif month == \"April\":\n            return True\n        elif month == \"May\":\n            return True\n        elif month == \"June\":\n            return True\n        elif month == \"July\":\n            return True\n        elif month == \"August\":\n            return True\n        elif month == \"September\":\n            return True\n        elif month == \"October\":\n            return True\n        elif month == \"November\":\n            return True\n        elif month == \"December\":\n            return True\n        elif month == \"December\":\n            return True\n        elif month == \"January\":\n            return True\n        elif month == \"February\":\n            return True\n        elif month == \"March\":\n            return True\n        elif month == \"April\":\n            return True\n        elif month == \"May\":\n            return True\n        elif month == \"June\":\n            return True\n        elif month == \"July\":\n            return True\n        elif month == \"August\":\n            return True",
      -6.67578125
    ],
    [
      "import re\n\ndef is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n\ndef is_leap_month(month):\n    if month == 2:\n        return is_leap_year(year)\n    else:\n        return not is_leap_year(year)\n\ndef is_leap_day(day):\n    if day == 29 and is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef is_leap_month_day(month, day):\n    if is_leap_month(month) and is_leap_day(day):\n        return True\n    else:\n        return False\n\ndef is_leap_day_of_month(day, month):\n    if is_leap_month_day(month, day):\n        return True\n    else:\n        return False\n\ndef check_leap_day_of_month(day, month):\n    if month == 2 and is_leap_year(year) and day == 29:\n        return True\n    else:\n        return False\n\ndef is_leap_day_of_month(day, month):\n    if is_leap_month_day(month, day):\n        return True\n    else:\n        return False\n\ndef is_leap_month_of_year(month, year):\n    if month == 2 and is_leap_year(year):\n        return True\n    else:\n        return False\n\ndef is_leap_month_of_year(month, year):\n    if is_leap_month_of_year(month, year):\n        return True\n    else:\n        return False\n\ndef is_leap_day_of_year(day, year):\n    if is_leap_month_of_year(month, year) and day == 29:\n        return True\n    else:\n        return False\n\ndef is_leap_day_of_year(day, year):",
      -6.69140625
    ],
    [
      "def is_leap_year(year):\n    if year % 100!= 0:\n        if year % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        if year % 4 == 0:\n            return True\n        else:\n            return False\n\ndef is_leap_month(month):\n    if month % 4 == 0:\n        return True\n    else:\n        return False\n\ndef is_leap_day(day):\n    if day % 4 == 0:\n        return True\n    else:\n        return False\n\ndef is_leap_year_with_leap_month(year, month):\n    if year % 100!= 0 and year % 4 == 0:\n        if month % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        if year % 4 == 0:\n            return True\n        else:\n            return False\n\ndef is_leap_year_with_leap_month_with_leap_day(year, month, day):\n    if year % 100!= 0 and year % 4 == 0 and day % 4 == 0:\n        if month % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        if year % 4 == 0 and day % 4 == 0:\n            return True\n        else:\n            return False\n\ndef is_leap_year_with_leap_month_with_leap_day_and_leap_day_of_month(year, month, day, day_of_month):\n    if year % 100!= 0 and year % 4 == 0 and day % 4 == 0 and day_of_month % 4 == 0:\n        if month % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        if year % 4 == 0 and day % 4 == 0 and day_of_month % 4 == 0:\n            return True\n        else:\n            return False\n\nif __name__ == '__main__':\n    print(is_leap_year_with_leap_month_with_leap_day_and_leap_day_of_month(2017, 12, 21, 21",
      -6.8203125
    ],
    [
      "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\ndef is_leap_month(month):\n    return month == 2 and is_leap_year(year)\n\ndef is_leap_month_name(month_name):\n    month_number = 0\n    for i in range(len(month_name)):\n        if month_name[i] == 'M':\n            month_number += 1\n    return is_leap_month(month_number)\n\ndef is_leap_month_day(month, day):\n    return is_leap_month(month) and day == 29\n\ndef is_leap_month_day_name(month_name, day_name):\n    month_number = 0\n    for i in range(len(month_name)):\n        if month_name[i] == 'M':\n            month_number += 1\n    return is_leap_month_day(month_number, day_name)\n\ndef main():\n    month_name = input().split()\n    month_number = 0\n    for i in range(len(month_name)):\n        if month_name[i] == 'M':\n            month_number += 1\n    return is_leap_month_day_name(month_name, month_number)\n\nif __name__ == \"__main__\":\n    main()",
      -7.12109375
    ],
    [
      "from collections import Counter\n\n\nclass Solution(object):\n    def is_leap(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        if month == 'FEBRUARY' and (month.isalpha() or len(month) == 2):\n            return False\n        elif month == 'FEBRUARY' and len(month) == 3:\n            return True\n        elif month == 'JANUARY' or month == 'MARCH':\n            return True\n        elif month == 'APRIL' or month == 'MAY':\n            return True\n        elif month == 'JUNE' or month == 'JULY':\n            return True\n        elif month == 'AUGUST' or month == 'SEPTEMBER' or month == 'OCTOBER':\n            return True\n        elif month == 'NOVEMBER' or month == 'DECEMBER':\n            return True\n        else:\n            return False\n\n    def is_leap_year(self, month, year):\n        if month == 'FEBRUARY':\n            if year % 400 == 0 or (year % 100!= 0 and year % 4 == 0):\n                return True\n            else:\n                return False\n        elif month == 'APRIL' or month == 'JUNE' or month == 'SEPTEMBER' or month == 'NOVEMBER':\n            return True\n        elif month == 'JANUARY' or month == 'MARCH':\n            return False\n        else:\n            return False\n\n    def check_leap_year(self, month, year):\n        if month == 'FEBRUARY':\n            if year % 400 == 0 or (year % 100!= 0 and year % 4 == 0):\n                return True\n            else:\n                return False\n        elif month == 'APRIL' or month == 'JUNE' or month == 'SEPTEMBER' or month == 'NOVEMBER':\n            return True\n        elif month == 'JANUARY' or month == 'MARCH':\n            return False\n        else:\n            return False\n\n    def is_leap_year(self, month, year):\n        if month == 'FEBRU",
      -7.4375
    ],
    [
      "class Solution:\n    def isPM(self, month):\n        return (month == 'Dec' and not (29 in month or 30 in month)) or (month == 'Feb' and not (29 in month or 28 in month))\n\nif __name__ == '__main__':\n    assert Solution().isPM('Dec') == False, 'PM should not be 28'\n    assert Solution().isPM('Jan') == True, 'PM should be 28'\n    assert Solution().isPM('Feb') == True, 'PM should be 28'\n    assert Solution().isPM('Mar') == False, 'PM should not be 28'\n    assert Solution().isPM('Apr') == False, 'PM should not be 28'\n    assert Solution().isPM('May') == False, 'PM should not be 28'\n    assert Solution().isPM('Jun') == False, 'PM should not be 28'\n    assert Solution().isPM('Jul') == False, 'PM should not be 28'\n    assert Solution().isPM('Aug') == False, 'PM should not be 28'\n    assert Solution().isPM('Sep') == False, 'PM should not be 28'\n    assert Solution().isPM('Oct') == False, 'PM should not be 28'\n    assert Solution().isPM('Nov') == False, 'PM should not be 28'\n    assert Solution().isPM('Dec') == False, 'PM should not be 28'",
      -7.70703125
    ],
    [
      "def is_leap(year):\n    \"\"\"\n    Check whether a year is leap or not.\n    :type year: int\n    :rtype: bool\n    \"\"\"\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\n\ndef is_leap_year(year):\n    return is_leap(year)\n\n\ndef is_leap_month(month):\n    return month == 2 and is_leap_year(year)\n\n\ndef is_leap_month_28_day(month):\n    return month == 2 and is_leap_year(year) and is_leap_month(month)\n\n\ndef main():\n    print(is_leap_month_28_day(2))\n    print(is_leap_month_28_day(3))\n    print(is_leap_month_28_day(4))\n    print(is_leap_month_28_day(5))\n    print(is_leap_month_28_day(6))\n    print(is_leap_month_28_day(7))\n    print(is_leap_month_28_day(8))\n    print(is_leap_month_28_day(9))\n    print(is_leap_month_28_day(10))\n    print(is_leap_month_28_day(11))\n    print(is_leap_month_28_day(12))\n    print(is_leap_month_28_day(13))\n    print(is_leap_month_28_day(14))\n    print(is_leap_month_28_day(15))\n    print(is_leap_month_28_day(16))\n    print(is_leap_month_28_day(17))\n    print(is_leap_month_28_day(18))\n    print(is_leap_month_28_day(19))\n    print(is_leap_month_28_day(20))\n    print(is_leap_month_28_day(21))\n    print(is_leap_month_28_",
      -7.98046875
    ],
    [
      "# https://www.hackerrank.com/challenges/day-of-month/problem\n#\n# Time complexity: O(1)\n# Space complexity: O(1)\n\nimport sys\n\ndef is_leap(year):\n    if year % 4 == 0:\n        if year % 100!= 0:\n            return year % 400 == 0\n        else:\n            return year % 4 == 0\n    else:\n        return year % 4 == 0\n\ndef is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100!= 0:\n            return year % 400 == 0\n        else:\n            return year % 4 == 0\n    else:\n        return year % 4 == 0\n\ndef day_of_month(month, year):\n    if is_leap_year(year):\n        if month == 2:\n            return 29 if is_leap(year) else 28\n        else:\n            return 31 if month == 4 or month == 6 or month == 9 or month == 11 else 30\n    else:\n        return 31 if month == 2 else 30\n\ndef is_leap_month(month, year):\n    if is_leap_year(year):\n        if month == 2:\n            return is_leap(year)\n        else:\n            return month == 4 or month == 6 or month == 9 or month == 11\n    else:\n        return month == 4 or month == 6 or month == 9 or month == 11\n\ndef day_of_year(year, month, day):\n    if is_leap_year(year):\n        if month == 2:\n            return day if day <= 29 else day + 1\n        else:\n            return day\n    else:\n        return day\n\ndef day_of_month_in_year(year, month):\n    if is_leap_year(year):\n        if month == 2:\n            return 29 if is_leap(year) else 28\n        else:\n            return 31 if month == 4 or month == 6 or month == 9 or month == 11 else 30\n    else:\n        return 31 if month == 2 else 30\n\ndef main():\n    n = int(input().strip())\n    for _",
      -8.390625
    ],
    [
      "def is_leap_year(year):\n    \"\"\"\n    :type year: int\n    :rtype: bool\n    \"\"\"\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n\ndef is_leap_month(month):\n    \"\"\"\n    :type month: int\n    :rtype: bool\n    \"\"\"\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    elif month == 2:\n        if is_leap_year(year):\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef is_leap_month_name(month_name):\n    \"\"\"\n    :type month_name: str\n    :rtype: bool\n    \"\"\"\n    if month_name == 'January' or month_name == 'February' or month_name == 'March' or month_name == 'April' or month_name == 'May' or month_name == 'June' or month_name == 'July' or month_name == 'August' or month_name == 'September' or month_name == 'October' or month_name == 'November' or month_name == 'December':\n        return is_leap_month(int(month_name[0:3]))\n    else:\n        return False\n\ndef is_leap_month_name_with_year(month_name, year):\n    \"\"\"\n    :type month_name: str\n    :type year: int\n    :rtype: bool\n    \"\"\"\n    if month_name == 'January' or month_name == 'February' or month_name == 'March' or month_name == 'April' or month_name == 'May' or month_name == 'June' or month_name == 'July' or month_name == 'August' or month_name == 'September' or month_name == 'October' or month_name == 'November' or month_name == 'December':\n        return is_leap_month_name",
      -9.5390625
    ],
    [
      "import sys\n\n__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def is_leap(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 400 == 0:\n            return True\n        elif year % 100 == 0:\n            return False\n        elif year % 4 == 0:\n            return True\n        else:\n            return False\n\n    def check_leap_year(self, year):\n        \"\"\"\n        :type year: int\n        :rtype: bool\n        \"\"\"\n        if year % 4 == 0 and year % 100!= 0:\n            return True\n        elif year % 4!= 0 and year % 100 == 0:\n            return True\n        else:\n            return False\n\n    def check_leap_month(self, month):\n        \"\"\"\n        :type month: int\n        :rtype: bool\n        \"\"\"\n        if self.check_leap_year(month):\n            return True\n        else:\n            return False\n\n    def check_leap_day(self, day):\n        \"\"\"\n        :type day: int\n        :rtype: bool\n        \"\"\"\n        if self.check_leap_month(day):\n            return True\n        else:\n            return False\n\n    def check_leap_days(self, year, month, day):\n        \"\"\"\n        :type year: int\n        :type month: int\n        :type day: int\n        :rtype: bool\n        \"\"\"\n        if self.check_leap_year(year):\n            return True\n        elif self.check_leap_month(month):\n            return True\n        elif self.check_leap_day(day):\n            return True\n        else:\n            return False\n\n    def check_leap_days2(self, year, month, day):\n        \"\"\"\n        :type year: int\n        :type month: int\n        :type day: int\n        :rtype: bool\n        \"\"\"\n        if self.check_leap_year(year):\n            return True\n        elif self.check_leap_month(month):\n            return True\n        el",
      -11.3203125
    ],
    [
      "# https://www.hackerrank.com/challenges/is-it-a-month\n\n# This is a problem of day counting.\n# The problem is to check whether the given month name contains 28 days or not.\n# In the month name, the following are considered as 28 days:\n# \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\".\n# The other days are considered as not 28 days.\n\n# For example, \"February\" contains 28 days, but \"January\" does not.\n# If you want to check whether the given month name contains 28 days,\n# you should count the number of days in the month name.\n# For example, if the month name is \"February\",\n# then the number of days in February is 29.\n# If the month name is \"January\",\n# then the number of days in January is 31.\n# If the month name is \"December\",\n# then the number of days in December is 31.\n\n# Example 1:\n# Input: \"February\"\n# Output: True\n# Explanation: The month name contains 28 days.\n\n# Example 2:\n# Input: \"January\"\n# Output: False\n# Explanation: The month name does not contain 28 days.\n\n# Example 3:\n# Input: \"December\"\n# Output: True\n# Explanation: The month name contains 28 days.\n\n# Note:\n# The length of month name is less than 20.\n# The length of month name is in the range of [1, 10].\n# The month name consists of lower and upper case English letters only.\n# You may assume the month name is in the format of \"January\", \"February\",..., \"December\".\n\n\nclass Solution(object):\n    def checkIsItAMonth(self, month):\n        \"\"\"\n        :type month: str\n        :rtype: bool\n        \"\"\"\n        return len(month) == 3 and month in ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']",
      -11.9609375
    ],
    [
      "# https://www.hackerrank.com/challenges/day-of-the-week\n# Time:  O(n)\n# Space: O(n)\n\nimport collections\nimport re\n\nclass Solution(object):\n    def is_leap(self, month):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        elif month in [4, 6, 9, 11]:\n            return False\n        else:\n            return (month % 4 == 0) and (month % 100!= 0 or month % 400 == 0)\n\n    def is_leap_year(self, year):\n        return self.is_leap(year // 100) and self.is_leap(year % 100)\n\n    def day_of_week(self, month, year):\n        return collections.Counter(\n            (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)\n           .index(day)\n            for day in [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if day <= self.is_leap_year(year)\n            and day <= self.is_leap(month)\n        )\n\n    def is_leap_days(self, month, year):\n        return self.day_of_week(month, year) == 28\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.is_leap_days(1, 2016))\n    print(s.is_leap_days(2, 2016))\n    print(s.is_leap_days(3, 2016))\n    print(s.is_leap_days(4, 2016))\n    print(s.is_leap_days(5, 2016))\n    print(s.is_leap_days(6, 2016))\n    print(s.is_leap_days(7, 2016))\n    print(s.is_leap_",
      -12.7734375
    ],
    [
      "# Definition for a valid day\nclass Day:\n    def __init__(self, day):\n        self.day = day\n\n    def is_leap(self):\n        if self.day == 29:\n            return True\n        else:\n            return False\n\n\n# Time:  O(n)\n# Space: O(n)\nclass Solution(object):\n    def checkIsValid(self, month_name):\n        \"\"\"\n        :type month_name: str\n        :rtype: bool\n        \"\"\"\n        month = [None] * 13\n        month[0] = Day(1)\n        month[1] = Day(1)\n        month[2] = Day(1)\n        month[3] = Day(1)\n        month[4] = Day(1)\n        month[5] = Day(1)\n        month[6] = Day(1)\n        month[7] = Day(1)\n        month[8] = Day(1)\n        month[9] = Day(1)\n        month[10] = Day(1)\n        month[11] = Day(1)\n        month[12] = Day(1)\n\n        for i in range(1, 13):\n            if month_name[i] in 'jan feb mar apr may jun jul aug sep oct nov dec'.split():\n                month[i] = Day(i)\n            elif month_name[i] in 'jan feb mar apr may jun jul aug sep oct nov dec'.split():\n                month[i] = Day(i)\n            else:\n                return False\n\n        for i in range(0, 12):\n            if month[i].is_leap():\n                if month[i + 1].is_leap():\n                    if month[i + 2].is_leap():\n                        if month[i + 3].is_leap():\n                            if month[i + 4].is_leap():\n                                if month[i + 5].is_leap():\n                                    if month[i + 6].is_leap():\n                                        if month[i + 7].is_leap():\n                                            if month[i + 8].is_leap",
      -13.5078125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}