{
  "problem": {
    "task_id": "MBPP/498",
    "prompt": "Write a python function to find gcd of two positive integers.",
    "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
    "test_list": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ],
    "challenge_test_list": [],
    "problem_id": 487
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def gcd(a, b):\n    \"\"\"\n    a and b are positive integers\n    return gcd of a and b\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef test_gcd():\n    assert gcd(4, 6) == 2\n    assert gcd(7, 9) == 1\n    assert gcd(4, 9) == 1\n\nif __name__ == '__main__':\n    test_gcd()",
      16.71875
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert gcd(5, 7) == 1, \"5\"\n    assert gcd(4, 6) == 2, \"4\"\n    assert gcd(10, 12) == 2, \"10\"\n    assert gcd(10, 15) == 5, \"10\"\n    assert gcd(20, 15) == 5, \"20\"",
      12.2109375
    ],
    [
      "#\n#   Modified from: https://www.tutorialspoint.com/python/python_modulo.htm\n#\n\ndef gcd(a, b):\n    \"\"\"\n    Calculates the greatest common divisor of two numbers.\n\n    Args:\n        a: first number\n        b: second number\n    Returns:\n        gcd: greatest common divisor\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    print(gcd(4, 6))\n\nif __name__ == '__main__':\n    main()",
      11.1640625
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef findGCD(a, b):\n    if a == 0 or b == 0:\n        return 0\n    return gcd(a, b)\n\nprint findGCD(2,3)",
      10.7265625
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Write a python function to find gcd of two positive integers.\n    Input:\n        a: int\n            A positive integer\n        b: int\n            A positive integer\n    Output:\n        gcd: int\n            The greatest common divisor of a and b\n    Example:\n        >>> gcd(3, 4)\n        2\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(gcd(a, b))\n\nif __name__ == '__main__':\n    main()",
      9.328125
    ],
    [
      "import math\n\ndef gcd(a, b):\n    \"\"\"\n    GCD of two positive integers\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef test_gcd():\n    assert gcd(1, 1) == 1\n    assert gcd(1, 2) == 1\n    assert gcd(2, 4) == 2\n    assert gcd(4, 6) == 2\n\nif __name__ == \"__main__\":\n    test_gcd()",
      7.953125
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of two numbers.\n\n    >>> gcd(6, 4)\n    2\n    >>> gcd(6, 10)\n    2\n    >>> gcd(3, 0)\n    3\n    >>> gcd(0, 0)\n    0\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd(b, a % b)\n    else:\n        return gcd(a, b % a)\n\nprint(gcd(6, 4))\nprint(gcd(6, 10))\nprint(gcd(3, 0))\nprint(gcd(0, 0))",
      7.484375
    ],
    [
      "import math\n\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two integers.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        a, b = b, a\n    while a > 0:\n        a, b = b % a, a\n    return b\n\ndef test_gcd():\n    assert gcd(4, 6) == 2\n    assert gcd(9, 6) == 3\n    assert gcd(10, 11) == 1\n    assert gcd(100, 110) == 10\n    assert gcd(100, 200) == 100\n\nif __name__ == '__main__':\n    test_gcd()",
      6.7890625
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))\n\nif __name__ == '__main__':\n    main()",
      6.7734375
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while a!= 0:\n        a, b = b % a, a\n    return b\n\na = int(input())\nb = int(input())\n\nprint(gcd(a, b))",
      5.9765625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nif __name__ == '__main__':\n    print(gcd(5, 6))\n    print(gcd(6, 5))\n    print(gcd(5, 6))\n    print(gcd(10, 20))",
      5.69140625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef main():\n    print(gcd(10, 20))\n    print(gcd(20, 10))\n    print(gcd(10, 10))\n    print(gcd(10, 20))\n    print(gcd(20, 20))\n\nif __name__ == '__main__':\n    main()",
      4.60546875
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert gcd(3, 4) == 1, \"1\"\n    assert gcd(4, 9) == 1, \"1\"\n    assert gcd(6, 7) == 1, \"1\"\n    assert gcd(7, 2) == 1, \"1\"\n    assert gcd(9, 10) == 1, \"1\"\n    assert gcd(10, 9) == 1, \"1\"\n    assert gcd(10, 6) == 1, \"1\"\n    assert gcd(10, 6) == 1, \"1\"\n    assert gcd(9, 8) == 1, \"1\"\n    assert gcd(8, 9) == 1, \"1\"\n    assert gcd(7, 6) == 1, \"1\"\n    assert gcd(6, 7) == 1, \"1\"\n    assert gcd(9, 10) == 2, \"2\"\n    assert gcd(10, 9) == 2, \"2\"\n    assert gcd(10, 6) == 2, \"2\"\n    assert gcd(10, 6) == 2, \"2\"\n    assert gcd(9, 8) == 2, \"2\"\n    assert gcd(8, 9) == 2, \"2\"\n    assert gcd(7, 6) == 2, \"2\"\n    assert gcd(6, 7) == 2, \"2\"",
      3.794921875
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two integers.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b:\n        a, b = b, a % b\n    return a\n\ndef gcd_rec(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b:\n        a, b = b, a % b\n    return a\n\ndef gcd_dp(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two integers.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n    print(gcd(a, b))",
      3.7421875
    ],
    [
      "def gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n#Test cases\na = 3\nb = 2\n\nprint(\"GCD of %d and %d is %d\" % (a, b, gcd(a, b)))\n\na = -1\nb = -1\n\nprint(\"GCD of %d and %d is %d\" % (a, b, gcd(a, b)))",
      3.3046875
    ],
    [
      "import math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef main():\n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n    print(\"The greatest common divisor of {0} and {1} is {2}\".format(num1, num2, gcd(num1, num2)))\n\nif __name__ == \"__main__\":\n    main()",
      3.064453125
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two numbers a and b.\n\n    Time Complexity: O(log(max(a, b)))\n    Space Complexity: O(1)\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    assert gcd(3, 7) == 1\n    assert gcd(5, 15) == 5\n    assert gcd(3, 4) == 1\n    assert gcd(3, 10) == 1\n    assert gcd(3, 20) == 3\n    assert gcd(3, 30) == 1\n    assert gcd(3, 100) == 3\n    assert gcd(3, 1000) == 3\n    assert gcd(3, 10000) == 3\n    assert gcd(3, 100000) == 3\n    assert gcd(3, 1000000) == 3\n    assert gcd(3, 10000000) == 3\n    assert gcd(3, 100000000) == 3\n    assert gcd(3, 1000000000) == 3\n    assert gcd(3, 100000000000) == 3\n    assert gcd(3, 1000000000000) == 3\n    assert gcd(3, 10000000000000) == 3\n    assert gcd(3, 100000000000000) == 3\n    assert gcd(3, 1000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000) == 3\n    assert gcd(3, 10000000000000000)",
      2.875
    ],
    [
      "# https://www.hackerrank.com/challenges/gcd\n\n# Sample Input\n# 5, 4\n\n# Sample Output\n# 1\n\n# Note\n# The input is assumed to be valid, i.e. no negative numbers and no 0.\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        return gcd(b, a)\n    if b < a:\n        return gcd(a, b)\n    return gcd(a % b, b)\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))",
      2.82421875
    ],
    [
      "import math\n\ndef gcd(a, b):\n    \"\"\"\n    >>> gcd(1, 1)\n    1\n    >>> gcd(2, 3)\n    1\n    >>> gcd(3, 4)\n    1\n    >>> gcd(2, 3)\n    1\n    >>> gcd(2, 4)\n    2\n    >>> gcd(2, 3)\n    2\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    print(gcd(1, 1))\n    print(gcd(2, 3))\n    print(gcd(3, 4))\n    print(gcd(2, 3))\n    print(gcd(2, 4))\n    print(gcd(2, 3))",
      2.751953125
    ],
    [
      "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b:\n        a, b = b, a % b\n    return a\n\nprint gcd(1, 2)\nprint gcd(10, 20)\nprint gcd(1000, 2000)",
      2.125
    ],
    [
      "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef is_prime(num):\n    if num == 1:\n        return False\n    if num < 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))\n\nif __name__ == '__main__':\n    main()",
      1.505859375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    a, b: positive integers\n    return: gcd(a, b)\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    gcd_answer = gcd(a, b)\n    print(gcd_answer)",
      1.4384765625
    ],
    [
      "import sys\n\n\ndef gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two positive integers.\n\n    :param a: First integer\n    :param b: Second integer\n    :return: Greatest common divisor of a and b\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print('Usage: gcd.py <integer>')\n        exit(1)\n\n    a = int(sys.argv[1])\n    print(gcd(a, 0))",
      1.318359375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef test():\n    assert gcd(4, 4) == 4\n    assert gcd(5, 5) == 1\n    assert gcd(10, 10) == 10\n    assert gcd(100, 100) == 100\n    assert gcd(10, 11) == 1\n    assert gcd(3, 12) == 3\n    assert gcd(4, 6) == 2\n\nif __name__ == '__main__':\n    test()",
      1.0107421875
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    a and b must be positive integers.\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef test_gcd():\n    assert gcd(3, 4) == 1\n    assert gcd(1, 1) == 1\n    assert gcd(0, 0) == 0\n    assert gcd(2, 6) == 2\n    assert gcd(7, -7) == 1\n    assert gcd(2, 3) == 1\n    assert gcd(2, -3) == 1\n    assert gcd(3, -2) == 1\n    assert gcd(2, 3) == 1\n    assert gcd(3, -2) == 1\n    assert gcd(3, -4) == 1\n    assert gcd(2, 5) == 1\n    assert gcd(5, 2) == 1\n    assert gcd(5, -2) == 1\n    assert gcd(2, 5) == 1\n    assert gcd(5, -2) == 1\n    assert gcd(5, -4) == 1\n    assert gcd(3, 0) == 3\n    assert gcd(0, 3) == 3\n    assert gcd(-3, 0) == 3\n    assert gcd(0, -3) == 3\n    assert gcd(-3, 0) == 3\n    assert gcd(0, -3) == 3\n    assert gcd(0, 0) == 0\n    assert gcd(0, -0) == 0\n    assert gcd(0, 0) == 0\n    assert gcd(-0, 0) == 0\n    assert gcd(0, -0) == 0\n    assert gcd(0, 0) == 0\n    assert gcd(-0, 0) == 0\n    assert gcd(0, -0) == 0\n    assert gcd(1, -1) == 1\n    assert gcd(2, -2) == 1\n    assert gcd(3, -3) == 1\n    assert gcd(4, -4) == 1\n    assert",
      0.74560546875
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef main():\n    print gcd(5, 7)\n\nif __name__ == '__main__':\n    main()",
      0.666015625
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef main():\n    print(gcd(13, 12))\n    print(gcd(7, 13))\n    print(gcd(7, -13))\n\nif __name__ == '__main__':\n    main()",
      0.62548828125
    ],
    [
      "def gcd(x, y):\n    \"\"\"\n    x and y are positive integers.\n    Return the greatest common divisor of x and y.\n    \"\"\"\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x == 1 or y == 1:\n        return 1\n    while y!= 0:\n        if x < y:\n            x = x - y\n        else:\n            y = y - x\n    return x\n\nif __name__ == '__main__':\n    print gcd(2,3)\n    print gcd(2,4)",
      0.427490234375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    >>> gcd(1, 2)\n    1\n    >>> gcd(2, 3)\n    2\n    >>> gcd(2, 0)\n    0\n    >>> gcd(2, -3)\n    1\n    >>> gcd(-2, 0)\n    0\n    >>> gcd(0, 0)\n    0\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a < 0 and b < 0:\n        return gcd(-a, b)\n    if a < 0:\n        return gcd(b, -a)\n    if b < 0:\n        return gcd(-a, -b)\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.34228515625
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of a and b.\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef find_gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of a and b.\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcd(a, b)\n\ndef test():\n    assert gcd(6, 9) == 3\n    assert gcd(0, 0) == 0\n    assert gcd(9, 0) == 9\n    assert gcd(1, 1) == 1\n\nif __name__ == '__main__':\n    test()",
      0.1953125
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    print gcd(2, 3)\n    print gcd(2, -3)",
      0.1439208984375
    ],
    [
      "from math import gcd\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef f(a, b):\n    return gcd(a, b)\n\ndef find_gcd(a, b):\n    gcd_list = []\n    while a or b:\n        gcd_list.append(f(a, b))\n        a, b = b, a % b\n    return gcd_list\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(find_gcd(a, b))",
      0.1395263671875
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Calculate the gcd of two integers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef gcd_recursive(a, b):\n    \"\"\"\n    Calculate the gcd of two integers.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\ndef gcd_iterative(a, b):\n    \"\"\"\n    Calculate the gcd of two integers.\n    \"\"\"\n    while a!= b:\n        if a < b:\n            a = a % b\n        else:\n            b = b % a\n    return a\n\ndef gcd_dp(a, b):\n    \"\"\"\n    Calculate the gcd of two integers.\n    \"\"\"\n    m, n = max(a, b), min(a, b)\n    if m == n:\n        return m\n    if m % n == 0:\n        return n\n    if n % m == 0:\n        return m\n    return gcd_dp(n, m)\n\ndef gcd_dp_recursive(a, b):\n    \"\"\"\n    Calculate the gcd of two integers.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        return gcd_dp_recursive(b, a % b)\n    else:\n        return gcd_dp_recursive(a % b, b)\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))\n    print(gcd_recursive(a, b))\n    print(gcd_iterative(a, b))\n    print(gcd_dp(a, b))\n    print(gcd_dp_recursive(a, b))",
      0.139404296875
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd(b, a % b)\n    else:\n        return gcd(a, b % a)\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.03729248046875
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    gcd(a, b) -> gcd\n    \n    Returns the greatest common divisor of a and b.\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nprint gcd(6, 7)",
      -0.040313720703125
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of two integers.\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef test_gcd():\n    assert gcd(4, 6) == 2\n    assert gcd(10, 20) == 10\n    assert gcd(4, 20) == 4\n    assert gcd(4, 6) == 2\n    assert gcd(10, 20) == 10\n    assert gcd(10, 20) == 10\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(100, 200",
      -0.040863037109375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    a - a is a positive integer\n    b - b is a positive integer\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef main():\n    \"\"\"\n    a - a is a positive integer\n    b - b is a positive integer\n    \"\"\"\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(gcd(a, b))\n\nif __name__ == \"__main__\":\n    main()",
      -0.1849365234375
    ],
    [
      "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef gcd_recursive(x, y):\n    if x < y:\n        return gcd_recursive(y, x)\n    else:\n        return x\n\ndef gcd_iterative(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef test_gcd():\n    assert gcd(3, 9) == 3\n    assert gcd(12, 34) == 2\n    assert gcd(24, -12) == 24\n    assert gcd(24, -12) == 24\n    assert gcd(9, -24) == -24\n    assert gcd(9, -24) == -24\n    assert gcd(9, -24) == -24\n    assert gcd(9, -24) == -24\n\ndef test_gcd_recursive():\n    assert gcd_recursive(3, 9) == 3\n    assert gcd_recursive(12, 34) == 2\n    assert gcd_recursive(24, -12) == 24\n    assert gcd_recursive(24, -12) == 24\n    assert gcd_recursive(9, -24) == -24\n    assert gcd_recursive(9, -24) == -24\n    assert gcd_recursive(9, -24) == -24\n    assert gcd_recursive(9, -24) == -24\n\ndef test_gcd_iterative():\n    assert gcd_iterative(3, 9) == 3\n    assert gcd_iterative(12, 34) == 2\n    assert gcd_iterative(24, -12) == 24\n    assert gcd_iterative(24, -12) == 24\n    assert gcd_iterative(9, -24) == -24\n    assert gcd_iterative(9, -24) == -24\n    assert gcd_iterative(9, -24) == -24\n    assert gcd_iterative(9, -24) == -24",
      -0.20751953125
    ],
    [
      "def gcd(x, y):\n    while y!= 0:\n        x, y = y, x % y\n    return x\n\ndef gcd2(x, y):\n    if x < y:\n        return gcd(y, x)\n    elif x == y:\n        return x\n    else:\n        return gcd2(y, x % y)\n\ndef main():\n    print(gcd(10, 15))\n    print(gcd2(10, 15))\n\nif __name__ == '__main__':\n    main()",
      -0.296875
    ],
    [
      "import unittest\n\ndef gcd(a, b):\n    \"\"\"\n    :param a: a positive integer\n    :param b: a positive integer\n    :return: the greatest common divisor of a and b\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nclass Test(unittest.TestCase):\n    def test_basic(self):\n        self.assertEqual(gcd(0, 0), 0)\n        self.assertEqual(gcd(1, 1), 1)\n        self.assertEqual(gcd(5, 7), 1)\n        self.assertEqual(gcd(7, 5), 1)\n        self.assertEqual(gcd(7, -5), 1)\n        self.assertEqual(gcd(7, -7), 1)\n        self.assertEqual(gcd(-5, 7), 1)\n        self.assertEqual(gcd(-7, 5), 1)\n        self.assertEqual(gcd(-7, -5), 1)\n        self.assertEqual(gcd(-7, -7), 1)\n        self.assertEqual(gcd(7, -7), 1)\n\n    def test_large(self):\n        self.assertEqual(gcd(7, 13), 1)\n        self.assertEqual(gcd(13, 7), 1)\n\n    def test_zero(self):\n        self.assertEqual(gcd(0, 0), 0)\n        self.assertEqual(gcd(0, 1), 0)\n        self.assertEqual(gcd(1, 0), 1)\n        self.assertEqual(gcd(1, -1), 1)\n        self.assertEqual(gcd(-1, 0), 1)\n        self.assertEqual(gcd(-1, -1), 1)\n\n    def test_negative(self):\n        self.assertEqual(gcd(7, -5), 1)\n        self.assertEqual(gcd(7, -7), 1)\n        self.assert",
      -0.391845703125
    ],
    [
      "def gcd(a, b):\n  if a == 0:\n    return b\n  if b == 0:\n    return a\n  if a < b:\n    a, b = b, a\n  while a % b!= 0:\n    a = a - b\n  return b\n\ndef solution(a, b):\n  return gcd(a, b)\n\nprint(solution(3, 4))",
      -0.43701171875
    ],
    [
      "#!/bin/python\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef main():\n    x = int(raw_input(\"Enter first number:\"))\n    y = int(raw_input(\"Enter second number:\"))\n    print \"GCD of %d and %d is %d\" % (x, y, gcd(x, y))\n\nif __name__ == \"__main__\":\n    main()",
      -0.56884765625
    ],
    [
      "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef test_gcd():\n    assert gcd(0, 0) == 0\n    assert gcd(0, 1) == 1\n    assert gcd(1, 0) == 1\n    assert gcd(1, 1) == 1\n    assert gcd(2, 2) == 2\n    assert gcd(3, 2) == 1\n    assert gcd(10, 20) == 2\n    assert gcd(10, 30) == 1\n    assert gcd(20, 30) == 2\n    assert gcd(5, 4) == 1\n    assert gcd(5, 5) == 1\n    assert gcd(5, 6) == 1\n    assert gcd(5, 7) == 1\n    assert gcd(5, 15) == 5\n    assert gcd(5, 25) == 5\n    assert gcd(5, 35) == 5\n    assert gcd(5, 45) == 5\n    assert gcd(5, 55) == 5\n    assert gcd(5, 75) == 5\n    assert gcd(5, 95) == 5\n    assert gcd(5, 105) == 5\n    assert gcd(5, 125) == 5\n    assert gcd(5, 150) == 5\n    assert gcd(5, 175) == 5\n    assert gcd(5, 195) == 5\n    assert gcd(5, 225) == 5\n    assert gcd(5, 255) == 5\n    assert gcd(5, 285) == 5\n    assert gcd(5, 315) == 5\n    assert gcd(5, 345) == 5\n    assert gcd(5, 365) == 5\n    assert gcd(5, 385) == 5\n    assert gcd(5, 405) == 5\n    assert gcd(5, 455) == 5\n    assert gcd(5, 495) == 5\n    assert gcd(5, 505) == 5\n    assert gcd(5, 515) == 5\n    assert gcd(5, 525",
      -0.79052734375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nprint(gcd(5,6))",
      -0.85693359375
    ],
    [
      "#!/bin/python\n\ndef gcd(a, b):\n  if a < b:\n    return gcd(b, a)\n  if a == b:\n    return a\n  if a == 0:\n    return b\n  if b == 0:\n    return a\n  while a!= b:\n    if a > b:\n      a = a - b\n    else:\n      b = b - a\n  return a\n\na = int(input())\nb = int(input())\n\nprint(gcd(a, b))",
      -0.85693359375
    ],
    [
      "def find_gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    print(find_gcd(4, 6))\n    print(find_gcd(5, 6))\n    print(find_gcd(10, 15))",
      -0.85693359375
    ],
    [
      "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\na = int(input())\nb = int(input())\ng = gcd(a, b)\nprint(g)",
      -0.85693359375
    ],
    [
      "def gcd(x, y):\n    while y!= 0:\n        x, y = y, x % y\n    return x\n\n\ndef main():\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/gcd-of-two-numbers/problem\n\ndef gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of two numbers.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        return gcd(b, a)\n    return gcd(b % a, a)\n\n\ndef main():\n    \"\"\"\n    For each line of input, print the gcd of the two numbers\n    \"\"\"\n    test_cases = int(input())\n\n    for _ in range(test_cases):\n        a, b = map(int, input().split())\n        print(gcd(a, b))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Calculates GCD of two positive integers\n    >>> gcd(10, 20)\n    2\n    >>> gcd(2, 1)\n    1\n    >>> gcd(20, 10)\n    2\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nprint gcd(2, 3)",
      -0.85693359375
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef main():\n    print(gcd(10, 14))\n    print(gcd(10, -14))\n    print(gcd(10, 0))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def gcd(x, y):\n    \"\"\"\n    Find gcd of two positive integers.\n\n    >>> gcd(5, 3)\n    1\n    >>> gcd(10, 15)\n    5\n    >>> gcd(6, 9)\n    3\n    \"\"\"\n    while y!= 0:\n        x, y = y, x % y\n    return x\n\n\nif __name__ == '__main__':\n    print(gcd(10, 15))",
      -0.85693359375
    ],
    [
      "import math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(13, 9))",
      -0.85693359375
    ],
    [
      "def gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    print(gcd(10, 20))",
      -0.85791015625
    ],
    [
      "def find_gcd(x, y):\n    \"\"\"\n    Find gcd of two positive integers.\n    Input: x and y are positive integers.\n    Output: gcd of x and y.\n    \"\"\"\n    if x < y:\n        return find_gcd(y, x)\n    if x == y:\n        return x\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    while x!= y:\n        if x > y:\n            x -= y\n        else:\n            y -= x\n    return x\n\nprint(find_gcd(3, 4))",
      -0.85791015625
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcd(b % a, a)\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Find gcd of two positive integers.\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nif __name__ == '__main__':\n    print(gcd(1, 6))\n    print(gcd(1, 3))\n    print(gcd(1, 2))\n    print(gcd(2, 3))\n    print(gcd(2, 4))",
      -0.85791015625
    ],
    [
      "from __future__ import division\nimport math\n\ndef gcd(x, y):\n    \"\"\"\n    Compute the greatest common divisor of two positive integers\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef main():\n    \"\"\"\n    Simple test cases.\n    \"\"\"\n    print(gcd(1, 1))\n    print(gcd(2, 3))\n    print(gcd(4, 8))\n    print(gcd(3, 7))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef f(a, b):\n    return gcd(a, b)\n\nif __name__ == \"__main__\":\n    print(f(2, 3))\n    print(f(3, 2))\n    print(f(5, 3))\n    print(f(3, 5))\n    print(f(5, 7))\n    print(f(1, 1))\n    print(f(1, 2))\n    print(f(1, 3))",
      -0.85791015625
    ],
    [
      "import unittest\n\n\ndef gcd(a, b):\n    \"\"\"\n    Find gcd of two positive integers.\n    \"\"\"\n    if a > b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nclass TestGCD(unittest.TestCase):\n\n    def test_gcd(self):\n        self.assertEqual(gcd(4, 8), 2)\n        self.assertEqual(gcd(0, 0), 0)\n        self.assertEqual(gcd(3, 0), 3)\n        self.assertEqual(gcd(0, 3), 0)\n        self.assertEqual(gcd(-1, 1), 1)\n        self.assertEqual(gcd(-1, -1), 1)\n        self.assertEqual(gcd(0, -1), 0)\n        self.assertEqual(gcd(-1, 0), 1)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.85791015625
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    a and b are positive integers\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(5, 3))",
      -0.85791015625
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nprint(gcd(10, 6))",
      -0.85791015625
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of two positive integers.\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of two numbers.\n\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a!= b:\n        if a < b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(gcd(13, 22))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of a and b.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    assert gcd(1, 1) == 1\n    assert gcd(5, 10) == 5\n    assert gcd(12, 12) == 12\n    assert gcd(100, 100) == 100\n    assert gcd(100, 200) == 100\n    assert gcd(1000, 2000) == 1000",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    GCD of two positive integers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    print(gcd(7, 9))\n    print(gcd(5, 6))\n    print(gcd(5, 10))\n    print(gcd(10, 15))",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    a, b positive integers\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nif __name__ == '__main__':\n    print gcd(4, 2)\n    print gcd(13, 21)\n    print gcd(2, 3)\n    print gcd(7, 1)\n    print gcd(7, 6)\n    print gcd(7, 7)\n    print gcd(7, 8)\n    print gcd(7, 9)",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    elif a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return gcd(b % a, a)\n\na = int(input())\nb = int(input())\nprint(gcd(a, b))",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Find the Greatest Common Divisor of two integers.\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef gcd_recursion(a, b):\n    \"\"\"\n    Find the Greatest Common Divisor of two integers using recursion.\n    \"\"\"\n    if a == b:\n        return a\n    else:\n        return gcd_recursion(b, a % b)\n\nif __name__ == '__main__':\n    print(gcd(2, 3))\n    print(gcd_recursion(2, 3))",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b:\n        a, b = b, a % b\n\n    return a\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n    print(gcd(a, b))",
      -0.8583984375
    ],
    [
      "import unittest\nfrom math import gcd\n\nclass TestGcd(unittest.TestCase):\n    def test_gcd(self):\n        self.assertEqual(gcd(2, 3), 1)\n        self.assertEqual(gcd(3, 2), 1)\n        self.assertEqual(gcd(2, 3), 1)\n        self.assertEqual(gcd(3, 2), 1)\n        self.assertEqual(gcd(6, 3), 3)\n        self.assertEqual(gcd(6, 3), 3)\n        self.assertEqual(gcd(6, 3), 3)\n        self.assertEqual(gcd(6, 3), 3)\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    a, b: positive integers\n    return: gcd(a, b)\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nif __name__ == '__main__':\n    print gcd(1, 5)",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a % b!= 0:\n        a, b = b, a % b\n    return b\n\n\nprint(gcd(2, 3))\nprint(gcd(3, 4))",
      -0.85888671875
    ],
    [
      "# gcd(a, b) = a if a % b == 0\n# gcd(a, b) = b if a % b == 0\n# gcd(a, b) = 0 if a == 0 or b == 0\n# gcd(a, b) = 1 if a == 1 or b == 1\n# gcd(a, b) = gcd(b, a) if b % a == 0\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == 1:\n        return b\n    elif b == 1:\n        return a\n    elif b % a == 0:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\n\nprint(gcd(4, 9))",
      -0.85888671875
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef f(a, b):\n    return gcd(a, b)\n\nprint(f(1, 2))\nprint(f(5, 6))\nprint(f(1, 0))\nprint(f(0, 1))\nprint(f(0, 0))\nprint(f(0, -1))\nprint(f(-1, 0))\nprint(f(0, -1))\nprint(f(-1, -1))\nprint(f(-1, -2))",
      -0.85888671875
    ],
    [
      "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    a, b = map(int, input().split())\n    print(gcd(a, b))",
      -0.85888671875
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of two numbers a and b.\n\n    @param a: a positive integer.\n    @param b: a positive integer.\n    @return: the greatest common divisor of a and b.\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"a and b must be positive\")\n\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    assert gcd(2, 3) == 1\n    assert gcd(4, 6) == 2\n    assert gcd(100, 25) == 5\n    assert gcd(100, 125) == 25",
      -0.85888671875
    ],
    [
      "def find_gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a!= 0:\n        if b > a:\n            temp = a\n            a = b\n            b = temp\n        else:\n            temp = b\n            b = a\n            a = temp\n    return a\n\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(find_gcd(a, b))",
      -0.85888671875
    ],
    [
      "def gcd(x, y):\n    \"\"\"\n    >>> gcd(2, 5)\n    1\n    >>> gcd(2, 3)\n    1\n    >>> gcd(2, -5)\n    1\n    >>> gcd(-2, 5)\n    1\n    >>> gcd(-2, 3)\n    -1\n    >>> gcd(-2, -5)\n    1\n    >>> gcd(2, 0)\n    0\n    >>> gcd(0, 2)\n    0\n    >>> gcd(0, 0)\n    0\n    >>> gcd(1, 2)\n    1\n    >>> gcd(1, -2)\n    1\n    >>> gcd(-1, 2)\n    1\n    >>> gcd(-1, -2)\n    -1\n    \"\"\"\n    if x < 0 and y < 0:\n        return gcd(-x, -y)\n    if x < 0:\n        return gcd(-x, y)\n    if y < 0:\n        return gcd(x, -y)\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x < y:\n        return gcd(y, x)\n    return gcd(y, x)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86669921875
    ],
    [
      "def gcd(x, y):\n    if x < y:\n        return gcd(y, x)\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)\n\nprint(gcd(8, 7))",
      -0.890625
    ],
    [
      "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))\n\nif __name__ == '__main__':\n    main()",
      -0.90625
    ],
    [
      "#!/usr/bin/python\n\ndef gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two positive integers.\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(1, 2)\n    1\n    >>> gcd(1, 1)\n    1\n    >>> gcd(3, 2)\n    1\n    >>> gcd(2, 3)\n    1\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 6)\n    2\n    >>> gcd(6, 2",
      -0.9345703125
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two positive integers\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n\nprint(gcd(5, 7))",
      -1.04296875
    ],
    [
      "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint gcd(3, 4)",
      -1.431640625
    ],
    [
      "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a % b == 0:\n        return gcd(b, a/b)\n    return gcd(a%b, b)\n\n# Test Cases\nprint \"Test Case 1:\"\nprint gcd(7, 6)\nprint gcd(6, 7)\nprint gcd(7, 6)\nprint gcd(7, 7)\nprint gcd(7, 7)\n\n# Test Case 2\nprint \"Test Case 2:\"\nprint gcd(20, 30)\nprint gcd(30, 20)\nprint gcd(20, 30)\nprint gcd(30, 20)\nprint gcd(20, 30)\n\n# Test Case 3\nprint \"Test Case 3:\"\nprint gcd(100, 10)\nprint gcd(10, 100)\nprint gcd(100, 10)\nprint gcd(10, 100)\nprint gcd(100, 10)\n\n# Test Case 4\nprint \"Test Case 4:\"\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\n\n# Test Case 5\nprint \"Test Case 5:\"\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100)\nprint gcd(100, 100",
      -1.4990234375
    ],
    [
      "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    # @param {TreeNode} p\n    # @param {TreeNode} q\n    # @return {integer}\n\n    def gcd(self, p, q):\n        if not p or not q:\n            return p or q\n        if p.val!= q.val:\n            return self.gcd(p.left, q.right) or self.gcd(p.right, q.left)\n        return self.gcd(p.left, q.left) or self.gcd(p.right, q.right)\n\n# TESTS\nfor p, q, exp in [\n    ([1, 2, 3], [1, 2, 3], 1),\n    ([1, 2, 3], [1, 2, 4], 2),\n    ([1, 2, 3], [1, 4, 5], 2),\n    ([1, 2, 3], [4, 5, 6], 1),\n    ([1, 2, 3], [1, 2, 3], 1)\n]:\n    sol = Solution()\n    actual = sol.gcd(TreeNode(*p), TreeNode(*q))\n    print(actual)\n    assert actual == exp",
      -1.712890625
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two positive numbers.\n\n    >>> gcd(2, 3)\n    1\n    >>> gcd(4, 6)\n    2\n    >>> gcd(5, 6)\n    2\n    >>> gcd(4, 5)\n    1\n    >>> gcd(3, 4)\n    1\n    >>> gcd(3, 0)\n    0\n    >>> gcd(0, 4)\n    0\n    >>> gcd(4, 0)\n    4\n    >>> gcd(0, 0)\n    0\n    >>> gcd(1, 2)\n    1\n    >>> gcd(1, -1)\n    1\n    >>> gcd(1, -2)\n    1\n    >>> gcd(1, -3)\n    1\n    >>> gcd(1, -4)\n    1\n    >>> gcd(1, -5)\n    1\n    >>> gcd(1, -6)\n    1\n    >>> gcd(1, -7)\n    1\n    >>> gcd(1, -8)\n    1\n    >>> gcd(1, -9)\n    1\n    >>> gcd(1, -10)\n    1\n    >>> gcd(1, -11)\n    1\n    >>> gcd(1, -12)\n    1\n    >>> gcd(1, -13)\n    1\n    >>> gcd(1, -14)\n    1\n    >>> gcd(1, -15)\n    1\n    >>> gcd(1, -16)\n    1\n    >>> gcd(1, -17)\n    1\n    >>> gcd(1, -18)\n    1\n    >>> gcd(1, -19)\n    1\n    >>> gcd(1, -20)\n    1\n    >>> gcd(1, -21)\n    1\n    >>> gcd(1, -22)\n    1\n    >>> gcd(1, -23)\n    1\n    >>> gcd(1, -24)\n    1\n    >>> gcd(1, -25)\n    1\n    >>> gcd(",
      -2.103515625
    ],
    [
      "import math\n\n\ndef gcd(a, b):\n    \"\"\"\n    >>> gcd(4, 6)\n    2\n    >>> gcd(4, -6)\n    2\n    >>> gcd(4, 0)\n    4\n    >>> gcd(4, -4)\n    4\n    >>> gcd(4, -6)\n    -6\n    >>> gcd(4, 6, -6)\n    -6\n    >>> gcd(4, 6, -6)\n    -6\n    >>> gcd(4, -6)\n    -6\n    >>> gcd(4, -6, -6)\n    -6\n    >>> gcd(4, -6, -6)\n    -6\n    >>> gcd(-4, -6)\n    6\n    >>> gcd(-4, 6, -6)\n    6\n    >>> gcd(-4, 6, -6)\n    6\n    >>> gcd(-4, -6)\n    -6\n    >>> gcd(-4, -6, -6)\n    -6\n    >>> gcd(-4, -6, -6)\n    -6\n    >>> gcd(-4, -6, 6)\n    6\n    >>> gcd(-4, -6, 6)\n    6\n    >>> gcd(-4, 6, -6)\n    -6\n    >>> gcd(-4, 6, -6)\n    -6\n    >>> gcd(-4, -6)\n    -6\n    >>> gcd(-4, -6, -6)\n    -6\n    >>> gcd(-4, -6, 6)\n    6\n    >>> gcd(-4, -6, 6)\n    6\n    >>> gcd(-4, 6)\n    6\n    >>> gcd(-4, 6, -6)\n    6\n    >>> gcd(-4, 6, -6)\n    6\n    >>> gcd(-4, -6)\n    -6\n    >>> gcd(-4, -6, -6)\n    -6\n    >>> gcd(-4, -6, 6)\n    6\n    >>> gcd(-4, -6, 6)\n    6\n    >>> g",
      -2.2890625
    ],
    [
      "import math\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 2:\n        return True\n    if n == 3:\n        return True\n    if n % 3 == 0:\n        return False\n    if n < 3:\n        return True\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_in_list(n, list):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 2:\n        return True\n    if n == 3:\n        return True\n    if n % 3 == 0:\n        return False\n    if n < 3:\n        return True\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\n\ndef test(n, list):\n    if is_prime_in_list(n, list):\n        print(n, \"is prime in list\")\n    else:\n        print(n, \"is not prime in list\")\n\ndef main():\n    print(\"gcd of 1 and 1:\", gcd(1, 1))\n    print(\"gcd of 1 and 2:\", gcd(1, 2))\n    print(\"gcd of 2 and 2:\", gcd(2, 2))\n    print(\"gcd of 1 and 3:\", gcd(1, 3))\n    print(\"gcd of 2 and 3:\", gcd(2, 3))\n    print(\"gcd of 3 and 3:\", gcd(3, 3))\n    print(\"gcd of 5 and 7:\", gcd(5, 7))\n    print(\"gcd of 10 and 11:\", gcd(10, 11))",
      -2.455078125
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    >>> gcd(4, 6)\n    2\n    >>> gcd(6, 2)\n    2\n    >>> gcd(2, 5)\n    1\n    >>> gcd(10, 20)\n    2\n    >>> gcd(10, 50)\n    2\n    >>> gcd(10, 20)\n    2\n    >>> gcd(50, 10)\n    2\n    >>> gcd(50, 20)\n    2\n    >>> gcd(50, 20)\n    2\n    >>> gcd(50, 50)\n    1\n    >>> gcd(50, 100)\n    1\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    while a!= 0 and b!= 0:\n        if a < b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\ndef main():\n    print(gcd(10, 20))\n\nif __name__ == \"__main__\":\n    main()",
      -2.751953125
    ],
    [
      "# write a python function to find gcd of two positive integers\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\nprint(gcd(2, 3))\n\n# test cases\n\nprint(gcd(7, 11))\nprint(gcd(5, 7))\nprint(gcd(3, 7))\nprint(gcd(7, 5))\nprint(gcd(7, 3))",
      -2.857421875
    ],
    [
      "import math\n\ndef gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two numbers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef is_prime(n):\n    \"\"\"\n    Check if n is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\nif __name__ == '__main__':\n    n = int(input('Enter a number to find gcd of: '))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {} and {} is {}.'.format(n, n+1, gcd(n, n+1)))\n    print('The gcd of {}",
      -3.5703125
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two positive integers.\n\n    >>> gcd(1, 2)\n    2\n    >>> gcd(7, 12)\n    2\n    >>> gcd(4, 2)\n    2\n    >>> gcd(6, 3)\n    3\n    >>> gcd(7, 8)\n    1\n    >>> gcd(6, 7)\n    1\n    >>> gcd(5, 10)\n    5\n    >>> gcd(10, 15)\n    5\n    >>> gcd(10, 20)\n    10\n    >>> gcd(10, 0)\n    0\n    >>> gcd(0, 15)\n    15\n    >>> gcd(0, 0)\n    0\n    >>> gcd(0, -15)\n    -15\n    >>> gcd(-5, 10)\n    5\n    >>> gcd(-10, 15)\n    15\n    >>> gcd(-10, -15)\n    -15\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.171875
    ],
    [
      "import math\n\ndef gcd(a, b):\n    \"\"\"\n    a, b are positive integers\n    returns gcd of a and b\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        a, b = b, a\n    while a!= b:\n        a, b = b, a % b\n    return a\n\ndef gcd_recur(a, b):\n    \"\"\"\n    a, b are positive integers\n    returns gcd of a and b\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        a, b = b, a\n    while a!= b:\n        a, b = b, a % b\n    return a\n\ndef gcd_dp(a, b):\n    \"\"\"\n    a, b are positive integers\n    returns gcd of a and b\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        a, b = b, a\n    while a!= b:\n        if a < b:\n            a, b = b, a % b\n        else:\n            b, a = a, b % a\n    return a\n\ndef gcd_dp_1(a, b):\n    \"\"\"\n    a, b are positive integers\n    returns gcd of a and b\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        a, b = b, a\n    while a!= b:\n        if a < b:\n            a, b = b, a % b\n        else:\n            b, a = a, b % a\n    return a\n\ndef gcd_dp_2(a, b):\n    \"\"\"\n    a, b are positive integers\n    returns gcd of a and b\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < b:\n        a, b = b, a\n    while a",
      -4.484375
    ],
    [
      "def find_gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two integers.\n    \"\"\"\n    return a if a < b else b\n\n\ndef gcd_two_positive_integers(a, b):\n    \"\"\"\n    Find the greatest common divisor of two positive integers.\n    \"\"\"\n    return find_gcd(a, b)\n\n\nif __name__ == \"__main__\":\n    print(gcd_two_positive_integers(1, 2))\n    print(gcd_two_positive_integers(10, 5))\n    print(gcd_two_positive_integers(100, 200))\n    print(gcd_two_positive_integers(100, 200))\n    print(gcd_two_positive_integers(100, 200))",
      -4.6015625
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    gcd(a, b) -> gcd of a and b\n\n    Compute the greatest common divisor of a and b.\n    \"\"\"\n    if a == 0 or b == 0:\n        return a + b\n    return gcd(b, a % b)\n\n\ndef is_prime(n):\n    \"\"\"\n    is_prime(n) -> is_prime of n\n\n    Returns true if n is prime, and false otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_and_prime(a, b):\n    \"\"\"\n    is_prime_and_prime(a, b) -> is_prime_and_prime of a and b\n\n    Returns true if both a and b are prime, and false otherwise.\n    \"\"\"\n    if a < 2 or b < 2:\n        return False\n    for i in range(2, int(max(a, b) ** 0.5) + 1):\n        if a % i == 0 and b % i == 0:\n            return False\n    return True\n\n\ndef is_prime_and_composite(a, b):\n    \"\"\"\n    is_prime_and_composite(a, b) -> is_prime_and_composite of a and b\n\n    Returns true if both a and b are prime and both a and b are composite, and false otherwise.\n    \"\"\"\n    if a < 2 or b < 2:\n        return False\n    for i in range(2, int(max(a, b) ** 0.5) + 1):\n        if a % i == 0 and b % i == 0:\n            return False\n        if a % i!= 0 and b % i!= 0:\n            return True\n    return False\n\n\ndef gcd_and_is_prime_and_prime(a, b):\n    \"\"\"\n    gcd_and_is_prime_and_prime(a, b) -> gcd_and_is_prime_and_prime of a and b\n\n    Returns the",
      -6.28515625
    ],
    [
      "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if b == 0:\n            return a\n        if a == 0:\n            return b\n        if a < b:\n            return self.gcd(b, a)\n        \n        # find the first number smaller than a\n        a_smaller = 0\n        while a_smaller < a:\n            a_smaller = a_smaller * 10 + a % 10\n            a = a / 10\n        \n        # find the first number smaller than b\n        b_smaller = 0\n        while b_smaller < b:\n            b_smaller = b_smaller * 10 + b % 10\n            b = b / 10\n        \n        # find the gcd of these two numbers\n        while a_smaller < b_smaller:\n            a_smaller = a_smaller * 10 + a % 10\n            b_smaller = b_smaller * 10 + b % 10\n            a = a / 10\n            b = b / 10\n        \n        return b_smaller",
      -10.1015625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {TreeNode} p\n    # @param {TreeNode} q\n    # @return {integer}\n    def findGCD(self, p, q):\n        # base case\n        if p == None or q == None:\n            return 0\n        if p.val == q.val:\n            return self.findGCD(p.left, q.left) or self.findGCD(p.right, q.right)\n        else:\n            return self.findGCD(p.left, q) or self.findGCD(p.right, q)\n\n    # @param {TreeNode} p\n    # @param {TreeNode} q\n    # @return {integer}\n    def gcd(self, p, q):\n        # base case\n        if p == None or q == None:\n            return 0\n        if p.val == q.val:\n            return p.val\n        else:\n            return self.gcd(p.left, q) or self.gcd(p.right, q)\n\n    # @param {TreeNode} root\n    # @return {integer}\n    def gcd2(self, root):\n        # base case\n        if root == None:\n            return 0\n        if root.left == None and root.right == None:\n            return root.val\n        else:\n            return self.gcd(root.left, root.right)\n\nif __name__ == '__main__':\n    p = TreeNode(1)\n    q = TreeNode(2)\n    print(Solution().findGCD(p, q))\n    print(Solution().gcd(p, q))",
      -13.5703125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}