{
  "problem": {
    "task_id": "MBPP/38",
    "prompt": "Write a function to find the division of first even and odd number of a given list.",
    "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
    "test_list": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ],
    "challenge_test_list": [],
    "problem_id": 27
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# https://www.hackerrank.com/challenges/even-odd-division\n\ndef even_odd_division(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    even_num = [i for i in numbers if i % 2 == 0]\n    odd_num = [i for i in numbers if i % 2 == 1]\n    return even_num, odd_num\n\nif __name__ == '__main__':\n    print(even_odd_division([1, 2, 3, 4, 5, 6]))",
      2.38671875
    ],
    [
      "def findDivision(nums):\n    evens = []\n    odds = []\n    for num in nums:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return [evens, odds]\n\nif __name__ == '__main__':\n    evens = [1, 3, 5, 7]\n    odds = [2, 4, 6, 8]\n    print findDivision(evens)\n    print findDivision(odds)",
      2.166015625
    ],
    [
      "import math\n\n\ndef first_even_odd(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return int(math.ceil(float(len(numbers))/2))\n\n\nif __name__ == '__main__':\n    print(first_even_odd([1, 2, 3, 4, 5]))",
      0.302978515625
    ],
    [
      "def find_even_odd_numbers(numbers):\n    even = 0\n    odd = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even, odd = find_even_odd_numbers(numbers)\n    print(\"Even numbers:\", even)\n    print(\"Odd numbers:\", odd)",
      -0.0201416015625
    ],
    [
      "from collections import Counter\n\ndef even_odd(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    c = Counter(nums)\n    even = c.get('even', 0)\n    odd = c.get('odd', 0)\n    return (even, odd)\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    print(even_odd(nums))",
      -0.0399169921875
    ],
    [
      "def first_even_odd_division(nums):\n    return [(nums[i] // 2) if nums[i] % 2 == 0 else nums[i] for i in range(len(nums))]\n\nprint(first_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.135498046875
    ],
    [
      "def find_even_odd_division(numbers):\n    # Complete this function\n    even = []\n    odd = []\n    for number in numbers:\n        if number % 2 == 0:\n            even.append(number)\n        else:\n            odd.append(number)\n    return [len(even), len(odd)]\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5]\n    print(find_even_odd_division(numbers))",
      -0.1683349609375
    ],
    [
      "# https://www.hackerrank.com/challenges/divisible-sum/problem\n\ndef divisors(n):\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [2] + divisors(n/2)\n    else:\n        return [n] + divisors(n-1)\n\ndef sum_divisors(n):\n    return sum(divisors(n))\n\ndef find_sum(n):\n    return sum_divisors(n)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(find_sum(n))",
      -0.261474609375
    ],
    [
      "def even_odd(numbers):\n\todds = []\n\tevens = []\n\tfor number in numbers:\n\t\tif number % 2 == 0:\n\t\t\tevens.append(number)\n\t\telse:\n\t\t\todds.append(number)\n\treturn (evens, odds)\n\nif __name__ == '__main__':\n\tevens, odds = even_odd([1, 2, 3, 4, 5, 6])\n\tprint(evens)\n\tprint(odds)",
      -0.331298828125
    ],
    [
      "#!/usr/bin/python\n\n# https://www.hackerrank.com/challenges/divisible-sum-of-evens-odds\n# https://www.hackerrank.com/challenges/divisible-sum-of-evens-odds/submissions/code/21451601\n\ndef find_sum_evens_odds(nums):\n    return sum(num for num in nums if num % 2 == 0) + sum(num for num in nums if num % 2!= 0)\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\n\nprint find_sum_evens_odds(nums)",
      -0.6591796875
    ],
    [
      "def div_even_odd(l):\n    \n    odds = []\n    evens = []\n    for i in l:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return odds, evens\n\n\nif __name__ == \"__main__\":\n    \n    odds, evens = div_even_odd([1,2,3,4,5])\n    print(odds)\n    print(evens)",
      -0.85595703125
    ],
    [
      "# https://www.hackerrank.com/challenges/divisible-even-odd-numbers\n\ndef findDiv(num):\n    # base case\n    if num == 0:\n        return 0\n\n    # recursive step\n    return 1 + findDiv(num - 1)\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for a0 in range(t):\n        # read and parse input\n        n = int(input())\n        num = [int(x) for x in input().split(' ')]\n\n        # write your code here\n        print(findDiv(n))",
      -0.85693359375
    ],
    [
      "def div_even_odd(numbers):\n    even = []\n    odd = []\n    for num in numbers:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n\n    even_sum = sum(even)\n    odd_sum = sum(odd)\n\n    return even_sum, odd_sum\n\n\nif __name__ == '__main__':\n    assert(div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (28, 4))",
      -0.85693359375
    ],
    [
      "def findDivision(nums):\n    nums = sorted(nums)\n    return nums[0] / 2, nums[-1] / 2",
      -0.85693359375
    ],
    [
      "#!/usr/bin/env python\n\ndef first_even_odd(nums):\n    return [nums[0] // 2, nums[1] // 2]\n\nif __name__ == \"__main__\":\n    nums = [2,4,6,8,10,12,14]\n    first_even_odd(nums)",
      -0.85791015625
    ],
    [
      "def even_odd_division(nums):\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i] /= 2\n        else:\n            nums[i] = (nums[i] - 1) / 2\n    return nums\n\nnums = [1, 2, 4, 8, 16, 32]\neven_odd_division(nums)\nprint(nums)\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\neven_odd_division(nums)\nprint(nums)",
      -0.85791015625
    ],
    [
      "def even_odd(numbers):\n    even = []\n    odd = []\n    for n in numbers:\n        if n % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return even, odd\n\nif __name__ == '__main__':\n    even, odd = even_odd([1, 2, 3, 4, 5, 6])\n    print(even)\n    print(odd)",
      -0.85791015625
    ],
    [
      "from math import ceil\n\n\ndef find_even_odd_division(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    even_div = []\n    odd_div = []\n\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            even_div.append(numbers[i])\n        else:\n            odd_div.append(numbers[i])\n\n    return even_div, odd_div\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5]\n    even_odd_division = find_even_odd_division(numbers)\n    print(even_odd_division)\n    print(find_even_odd_division(numbers))",
      -0.85791015625
    ],
    [
      "# Definition for a Node.\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\n\nclass Solution:\n    def findDivisor(self, nums: List[int]) -> int:\n        head = Node(0)\n        tail = head\n        for val in nums:\n            cur = Node(val)\n            if cur.val % 2 == 0:\n                tail.next = cur\n                tail = cur\n            else:\n                tail.next = None\n                tail = head\n        \n        return head.next.val\n\nif __name__ == \"__main__\":\n    nums = [1, 3, 5]\n    Solution().findDivisor(nums)",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\ndef find_evens_odds(numbers):\n    evens = []\n    odds = []\n\n    for number in numbers:\n        if number % 2 == 0:\n            evens.append(number)\n        else:\n            odds.append(number)\n\n    return (evens, odds)\n\nif __name__ == \"__main__\":\n    evens, odds = find_evens_odds([1, 2, 3, 4, 5, 6, 7])\n    print(evens)\n    print(odds)",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/divisible-sum-of-first-even-and-odd/problem\n\ndef divisible_sum_of_first_even_and_odd(a):\n    even = 0\n    odd = 0\n    for x in a:\n        if x % 2 == 0:\n            even += x\n        else:\n            odd += x\n    return even, odd\n\nif __name__ == '__main__':\n    t = int(input())\n    for a0 in range(t):\n        a = list(map(int, input().split()))\n        even, odd = divisible_sum_of_first_even_and_odd(a)\n        print(\"{} {}\".format(even, odd))",
      -0.85791015625
    ],
    [
      "def division(numbers):\n    evens = [x for x in numbers if x % 2 == 0]\n    odds = [x for x in numbers if x % 2 == 1]\n    return len(evens) / len(odds)\n\n\n# your code here\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]\n    print(division(numbers))",
      -0.8583984375
    ],
    [
      "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def findDivisor(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        max_nums = max(nums)\n        min_nums = min(nums)\n        if max_nums % 2 == 0:\n            return max_nums / 2\n        elif min_nums % 2 == 0:\n            return min_nums / 2\n        else:\n            return max_nums",
      -0.8583984375
    ],
    [
      "def even_odd(l):\n    return [l[i] for i in range(len(l)) if l[i] % 2 == 0]\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(even_odd(l))",
      -0.8583984375
    ],
    [
      "def find_even_odd_division(lst):\n    # write your code here\n    if len(lst) == 0:\n        return 0, 0\n    if len(lst) == 1:\n        return 1, 1\n    if len(lst) == 2:\n        return 1, 1\n    if len(lst) == 3:\n        return 1, 1\n    else:\n        if lst[0] % 2 == 0:\n            return 1, 1\n        else:\n            return 1, 2\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3]\n    print(find_even_odd_division(lst))",
      -0.8583984375
    ],
    [
      "def get_even_odd(numbers):\n    even = 0\n    odd = 0\n    for i in numbers:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even, odd = get_even_odd(numbers)\n    print(even, odd)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def first_even_odd_divisor(numbers):\n    first_even_num = 0\n    first_odd_num = 0\n    for number in numbers:\n        if number % 2 == 0:\n            first_even_num += number\n        else:\n            first_odd_num += number\n    return first_even_num, first_odd_num\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 3, 5, 6, 8, 9, 10, 12, 13]\n    print(first_even_odd_divisor(numbers))\n    numbers = [1, 2, 4, 5, 6, 7, 8, 10, 12]\n    print(first_even_odd_divisor(numbers))\n    numbers = [1, 2, 4, 5, 6, 7, 8, 10, 12, 14]\n    print(first_even_odd_divisor(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(first_even_odd_divisor(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(first_even_odd_divisor(numbers))",
      -0.8583984375
    ],
    [
      "def find_even_odd_number(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            even_num += nums[i]\n        else:\n            odd_num += nums[i]\n    return [even_num, odd_num]\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_even_odd_number(nums))",
      -0.8583984375
    ],
    [
      "def findDivision(nums):\n    evens = [i for i in nums if i % 2 == 0]\n    odds = [i for i in nums if i % 2 == 1]\n    return [len(evens), len(odds)]\n\nprint(findDivision([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.8583984375
    ],
    [
      "#!/bin/python\n\ndef get_divisions(numbers):\n    return [numbers[0]//2, numbers[1]//2]\n\ndef get_even_numbers(numbers):\n    return [numbers[i] for i in range(0, len(numbers)) if numbers[i] % 2 == 0]\n\ndef get_odd_numbers(numbers):\n    return [numbers[i] for i in range(0, len(numbers)) if numbers[i] % 2 == 1]\n\ndef get_divisions_odd(numbers):\n    return [numbers[i]//2 for i in range(0, len(numbers)) if numbers[i] % 2 == 1]\n\ndef get_divisions_even(numbers):\n    return [numbers[i]//2 for i in range(0, len(numbers)) if numbers[i] % 2 == 0]\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(get_divisions(numbers))\n    print(get_even_numbers(numbers))\n    print(get_odd_numbers(numbers))\n    print(get_divisions_even(numbers))\n    print(get_divisions_odd(numbers))",
      -0.8583984375
    ],
    [
      "from collections import defaultdict\n\ndef find_even_odd_div(lst):\n    evens = 0\n    odds = 0\n    for i in range(0, len(lst)):\n        if lst[i] % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return evens, odds\n\n\n# Your code here\nlst = [1, 2, 3, 4, 5]\nevens, odds = find_even_odd_div(lst)\nprint(evens, odds)",
      -0.8583984375
    ],
    [
      "# Time:  O(N)\n# Space: O(1)\n\n# Solution:\n# Use two pointers.\n# First pointer is used to find first even number.\n# Second pointer is used to find first odd number.\n# When they meet, then they are both odd.\n# Then, first pointer is used to find next odd number.\n# When they meet, then they are both even.\n# When they meet again, then the result is the difference of them.\n# The space complexity is O(1).\n\nclass Solution(object):\n    def findDivisor(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        evens = []\n        odds = []\n        for num in nums:\n            if num % 2 == 0:\n                evens.append(num)\n            else:\n                odds.append(num)\n        first_even = min(evens)\n        first_odd = max(odds)\n        second_odd = max(odds)\n        for i in xrange(first_even, first_odd, -1):\n            if first_odd % i == 0 and second_odd % i == 0:\n                return i\n\nif __name__ == \"__main__\":\n    print Solution().findDivisor([1, 2, 3, 4, 5, 6])",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\ndef find_even_odd_division(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    evens = [n for n in nums if n % 2 == 0]\n    odds = [n for n in nums if n % 2!= 0]\n    return [len(evens), len(odds)]\n\ndef test_even_odd_division():\n    assert find_even_odd_division([1, 2, 3, 4, 5, 6]) == [3, 2]\n\ndef test_even_odd_division_2():\n    assert find_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8]) == [4, 3]\n\ndef test_even_odd_division_3():\n    assert find_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [5, 4]\n\ndef test_even_odd_division_4():\n    assert find_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [7, 6]\n\nif __name__ == '__main__':\n    test_even_odd_division()\n    test_even_odd_division_2()\n    test_even_odd_division_3()\n    test_even_odd_division_4()",
      -0.8583984375
    ],
    [
      "class Solution:\n    def firstOddAndEven(self, nums: List[int]) -> int:\n        return sum(1 for i in nums if i % 2)\n\n\n# TESTS\nfor nums, expected in [\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 3),\n]:\n    sol = Solution()\n    actual = sol.firstOddAndEven(nums)\n    print(\"First even and odd of\", nums, \"->\", actual)\n    assert actual == expected",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/even-odd-numbers\n# https://www.hackerrank.com/challenges/even-odd-numbers-recursion\n# https://www.hackerrank.com/challenges/even-odd-numbers-recursion-part-2\n\ndef find_even_odd(lst):\n    # Recursion\n    if len(lst) == 1:\n        return lst[0]\n\n    # Base Case\n    if len(lst) % 2 == 1:\n        return lst[0]\n\n    # Recursion\n    return find_even_odd(lst[1::2]) + find_even_odd(lst[::2])\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6]\n    print(find_even_odd(lst))",
      -0.8583984375
    ],
    [
      "def findDivision(numbers):\n    return sum(1 for n in numbers if n % 2 == 0)\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(findDivision(numbers))",
      -0.8583984375
    ],
    [
      "def get_even_odd_number(numbers):\n    even_list = []\n    odd_list = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_list.append(number)\n        else:\n            odd_list.append(number)\n    return (even_list, odd_list)\n\ndef get_division(numbers):\n    even_list, odd_list = get_even_odd_number(numbers)\n    odd_list.sort()\n    even_list.sort()\n    return (even_list[0] / 2, odd_list[-1] / 2)\n\nif __name__ == \"__main__\":\n    numbers = [2, 4, 6, 8, 10, 12]\n    even_odd = get_even_odd_number(numbers)\n    even_division = get_division(numbers)\n    print(even_odd)\n    print(even_division)\n    odd_division = get_division(numbers)\n    print(odd_division)",
      -0.8583984375
    ],
    [
      "def find_even_odd_divisors(numbers):\n    if len(numbers) == 0:\n        return []\n    odd_divisors = [1]\n    even_divisors = [1]\n    for i in range(2, len(numbers)):\n        odd_divisors.append(numbers[i] % 2)\n        even_divisors.append(numbers[i] // 2)\n    return list(set(odd_divisors) & set(even_divisors))\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(find_even_odd_divisors(numbers))",
      -0.85888671875
    ],
    [
      "from sys import argv\n\ndef find_evens_odds(l):\n    evens = 0\n    odds = 0\n    for i in l:\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return odds, evens\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    odds, evens = find_evens_odds(l)\n    print(\"The number of evens is: \", evens)\n    print(\"The number of odds is: \", odds)",
      -0.85888671875
    ],
    [
      "def find_odd_even_division(numbers):\n    # write your code here\n    odd_numbers = []\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n        else:\n            odd_numbers.append(number)\n\n    return (len(odd_numbers), len(even_numbers))\n\n\n\nnumbers = [3, 7, 11, 12, 15]\nprint(find_odd_even_division(numbers))",
      -0.85888671875
    ],
    [
      "def find_odd_even_divisors(nums):\n    if len(nums) == 0:\n        return 0\n    odd_divisors = 0\n    even_divisors = 0\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            odd_divisors += 1\n        else:\n            even_divisors += 1\n    return odd_divisors, even_divisors\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3]\n    print find_odd_even_divisors(nums)",
      -0.8759765625
    ],
    [
      "#!/usr/bin/python\n\n\"\"\"\n\nhttps://www.hackerrank.com/challenges/even-odd-number-of-list\n\nSample Input\n\n4\n1 2 3 4\n\nSample Output\n\n1\n2\n\"\"\"\n\n\ndef even_odd_number_of_list(arr):\n    # write your code here\n    even_numbers = []\n    odd_numbers = []\n\n    for i in arr:\n        if i % 2 == 0:\n            even_numbers.append(i)\n        else:\n            odd_numbers.append(i)\n\n    return even_numbers, odd_numbers\n\n\nif __name__ == '__main__':\n    arr = [int(i) for i in input().split(' ')]\n    even_numbers, odd_numbers = even_odd_number_of_list(arr)\n    print(len(even_numbers), len(odd_numbers))",
      -0.90478515625
    ],
    [
      "def even_odd_division(numbers):\n    even_divisors = [i for i in range(1, len(numbers)+1) if numbers[i-1] % 2 == 0]\n    odd_divisors = [i for i in range(1, len(numbers)+1) if numbers[i-1] % 2 == 1]\n\n    for i in range(len(numbers)):\n        if numbers[i-1] % 2 == 0:\n            even_divisors.remove(numbers[i-1])\n        else:\n            odd_divisors.remove(numbers[i-1])\n\n    if len(even_divisors) == 0:\n        print('No even number')\n    elif len(odd_divisors) == 0:\n        print('No odd number')\n    else:\n        print(even_divisors[0] // odd_divisors[0])\n\nnumbers = [2, 3, 4, 5, 6, 7, 8]\neven_odd_division(numbers)",
      -1.1748046875
    ],
    [
      "#!/usr/bin/env python\n\ndef find_div(numbers):\n    evens = 0\n    odds = 0\n    for number in numbers:\n        if number % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return odds, evens\n\n# test cases\n\nnumbers = [2, 4, 6, 8, 10, 12]\n\nprint(find_div(numbers))",
      -1.220703125
    ],
    [
      "def get_odds_evens(lst):\n    \"\"\"\n    lst = [1, 2, 3, 4]\n    \"\"\"\n    odds = []\n    evens = []\n    for i in lst:\n        if i % 2 == 0:\n            odds.append(i)\n        else:\n            evens.append(i)\n    return odds, evens\n\n\ndef get_odds_evens2(lst):\n    \"\"\"\n    lst = [1, 2, 3, 4]\n    \"\"\"\n    odds = []\n    evens = []\n    for i in lst:\n        if i % 2 == 0:\n            odds.append(i)\n        else:\n            evens.append(i)\n    return odds, evens\n\ndef get_odds_evens3(lst):\n    \"\"\"\n    lst = [1, 2, 3, 4]\n    \"\"\"\n    odds = []\n    evens = []\n    for i in lst:\n        if i % 2 == 0:\n            odds.append(i)\n        else:\n            evens.append(i)\n    return odds, evens\n\ndef get_odds_evens4(lst):\n    \"\"\"\n    lst = [1, 2, 3, 4]\n    \"\"\"\n    odds = []\n    evens = []\n    for i in lst:\n        if i % 2 == 0:\n            odds.append(i)\n        else:\n            evens.append(i)\n    return odds, evens\n\ndef get_odds_evens5(lst):\n    \"\"\"\n    lst = [1, 2, 3, 4]\n    \"\"\"\n    odds = []\n    evens = []\n    for i in lst:\n        if i % 2 == 0:\n            odds.append(i)\n        else:\n            evens.append(i)\n    return odds, evens\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    odds, evens = get_odds_evens(lst)\n    print(",
      -1.431640625
    ],
    [
      "def find_even_odd(list):\n    even_num = 0\n    odd_num = 0\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return even_num, odd_num\n\nprint(find_even_odd([1,2,3,4,5,6,7,8,9,10,11]))",
      -1.5556640625
    ],
    [
      "def even_odd_division(list_):\n    return [int(i) for i in list_ if i % 2 == 0]\n\nif __name__ == '__main__':\n    print(even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
      -1.5556640625
    ],
    [
      "def even_odd_division(numbers):\n\teven_list = []\n\todd_list = []\n\tfor number in numbers:\n\t\tif number % 2 == 0:\n\t\t\teven_list.append(number)\n\t\telse:\n\t\t\todd_list.append(number)\n\treturn even_list, odd_list\n\nif __name__ == '__main__':\n\teven_list, odd_list = even_odd_division([2, 3, 5, 7, 11, 13])\n\tprint(even_list)\n\tprint(odd_list)",
      -1.9375
    ],
    [
      "def find_even_odd(numbers):\n    \"\"\"\n    numbers: list of integers\n    return: tuple of integers (even, odd)\n    \"\"\"\n    even = 0\n    odd = 0\n\n    for i in range(0, len(numbers)):\n        if numbers[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6]\n    print(find_even_odd(numbers))",
      -1.9462890625
    ],
    [
      "from collections import defaultdict\n\ndef find_div_of_even_odd(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    # create a dictionary of the even and odd numbers\n    even_odd = defaultdict(int)\n    for number in numbers:\n        if number % 2 == 0:\n            even_odd[number] += 1\n        else:\n            even_odd[number] -= 1\n\n    # get the max and min number of even and odd numbers\n    max_even = max(even_odd.values())\n    min_odd = min(even_odd.values())\n\n    # return the division\n    return max_even / min_odd\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_div_of_even_odd(numbers))",
      -2.02734375
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    numbers = map(int, sys.stdin.readline().strip().split(' '))\n    even = sum([x for x in numbers if x % 2 == 0])\n    odd = sum([x for x in numbers if x % 2 == 1])\n    print even / odd\n\nif __name__ == '__main__':\n    main()",
      -2.224609375
    ],
    [
      "def find_even_odd_numbers(numbers):\n    evens = []\n    odds = []\n    for number in numbers:\n        if number % 2 == 0:\n            evens.append(number)\n        else:\n            odds.append(number)\n    return evens, odds\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    evens, odds = find_even_odd_numbers(numbers)\n    print(evens)\n    print(odds)",
      -2.296875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def findDivisor(self, n: int, m: int) -> int:\n        \"\"\"\n        Brute force\n        :param n: int\n        :param m: int\n        :return: int\n        \"\"\"\n        return max(1, n // m, n % m)\n\n    def findDivisor2(self, n: int, m: int) -> int:\n        \"\"\"\n        Divide and conquer\n        :param n: int\n        :param m: int\n        :return: int\n        \"\"\"\n        if m == 1:\n            return 1\n\n        # Find the number of even numbers\n        even = 0\n        for i in range(2, m + 1):\n            if n % i == 0:\n                even += 1\n        if even == 0:\n            return 1\n\n        # Find the number of odd numbers\n        odd = 0\n        for i in range(2, m + 1):\n            if n % i == 1:\n                odd += 1\n        if odd == 0:\n            return 1\n\n        # Compute the quotient\n        quotient = n // m\n\n        # Find the divisor\n        return self.findDivisor(quotient, odd)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n\n    print(sol.findDivisor(3, 2))\n    print(sol.findDivisor(4, 2))\n    print(sol.findDivisor(4, 3))\n    print(sol.findDivisor(4, 4))",
      -2.359375
    ],
    [
      "import sys\n\ndef division(a):\n    if len(a) == 0:\n        return 0\n    \n    even = 0\n    odd = 0\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return odd\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6]\n    print(division(a))",
      -2.380859375
    ],
    [
      "# Your function will be called as follows:\n# number_list = [1, 2, 3, 4]\n# return [2, 1]\n\n# The input to your function should be a list of integers\n\n# The function should return a list of integers\n\ndef even_odd_div(number_list):\n    even_number = 0\n    odd_number = 0\n    for number in number_list:\n        if number % 2 == 0:\n            even_number += 1\n        else:\n            odd_number += 1\n\n    return [even_number, odd_number]\n\nif __name__ == \"__main__\":\n    assert even_odd_div([1, 2, 3, 4]) == [2, 1]",
      -2.70703125
    ],
    [
      "def find_div(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2!= 0]\n    return len(even), len(odd)\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_div(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print(find_div(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n    print(find_div(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138",
      -3.103515625
    ],
    [
      "def findDiv(nums):\n    even = 0\n    odd = 0\n    for i in nums:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n# Test Cases\nnums = [2,4,6,8,10,12]\nprint findDiv(nums)",
      -3.189453125
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/div2\n\nn = int(input().strip())\n\nevens = []\nodds = []\n\nfor i in range(0, n):\n    num = int(input().strip())\n    if num % 2 == 0:\n        evens.append(num)\n    else:\n        odds.append(num)\n\nprint(len(evens))\nprint(len(odds))\n\nfor i in range(0, len(evens)):\n    print(evens[i])\n\nfor i in range(0, len(odds)):\n    print(odds[i])",
      -3.2734375
    ],
    [
      "# Write a function to find the division of first even and odd number of a given list.\n#\n# Example 1:\n#\n# Input: [2, 4, 3, 1]\n#\n# Output: 2\n#\n# Explanation: The first even number is 2, the first odd number is 3.\n#\n# Example 2:\n#\n# Input: [4, 6, 5, 7, 8]\n#\n# Output: 2\n#\n# Explanation: The first even number is 4, the first odd number is 6.\n#\n# Example 3:\n#\n# Input: [1, 2, 3, 4]\n#\n# Output: 1\n#\n# Explanation: The first even number is 1, the first odd number is 2.\n\n\nclass Solution(object):\n    def findDivisor(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.findDivisor_1(nums)\n\n    def findDivisor_1(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            mid = l + (r - l) / 2\n            if nums[mid] % 2 == 0:\n                l = mid + 1\n            else:\n                r = mid\n        return l + 1",
      -3.5703125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def oddEvenList(self, head):\n        if not head:\n            return None\n        odd = head\n        even = head.next\n        while even:\n            odd.next = even.next\n            odd = odd.next\n            even = even.next\n        odd.next = head\n        return head\n\n    def divide(self, head):\n        if not head or not head.next:\n            return\n        odd = head\n        even = head.next\n        while even:\n            odd.next = even.next\n            odd = odd.next\n            even = even.next\n        odd.next = head\n        return head",
      -3.6640625
    ],
    [
      "def findDivisor(numbers):\n    if len(numbers) == 0:\n        return 0\n    if len(numbers) == 1:\n        return 1\n    if len(numbers) == 2:\n        return 1\n    \n    for i in range(2, len(numbers)):\n        if numbers[i] % 2 == 0:\n            return 2\n    return 1\n\nprint(findDivisor([1, 2, 3]))\nprint(findDivisor([1, 2, 3, 4]))",
      -3.712890625
    ],
    [
      "# The function should return a tuple of two integers.\n# The first integer is the number of even numbers in the list.\n# The second integer is the number of odd numbers in the list.\n\ndef find_even_odd_numbers(numbers):\n    even = 0\n    odd = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n# Your code should pass the following test cases.\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(find_even_odd_numbers(numbers))\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\nprint(find_even_odd_numbers(numbers))",
      -3.830078125
    ],
    [
      "def even_odd_divide(numbers):\n    return [numbers[0]//2, numbers[1]//2]\n\nif __name__ == '__main__':\n    numbers = [2, 4, 6, 8]\n    print(even_odd_divide(numbers))\n    numbers = [1, 2, 3, 4]\n    print(even_odd_divide(numbers))\n    numbers = [5, 7, 9, 10]\n    print(even_odd_divide(numbers))\n    numbers = [5, 10, 15, 20]\n    print(even_odd_divide(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n    print(even_odd_divide(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n    print(even_odd_divide(numbers))\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100",
      -3.8671875
    ],
    [
      "import unittest\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def findDivisor(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if head is None:\n            return 0\n        prev = head\n        curr = head.next\n        while curr:\n            if curr.val % 2 == 0:\n                prev = prev.next\n            else:\n                prev = curr\n            curr = curr.next\n        return prev.val\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/division-of-an-even-and-odd-number-of-elements-in-a-linked-list/solution/\nApproach #1: Iterative [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the list.\nSpace Complexity: O(n).\n\n# 3ms 100%\nclass Solution {\n    public int findDivisor(ListNode head) {\n        if (head == null) {\n            return 0;\n        }\n        ListNode prev = head;\n        ListNode curr = head.next;\n        int count = 2;\n        while (curr!= null) {\n            if (curr.val % 2 == 0) {\n                prev = prev.next;\n            } else {\n                count++;\n                prev = curr;\n            }\n            curr = curr.next;\n        }\n        return count;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public int findDivisor(ListNode head) {\n        if (head == null) {\n            return 0;\n        }\n        int count = 1;\n        ListNode prev = head;\n        ListNode curr",
      -3.931640625
    ],
    [
      "#\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def findDivisors(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        while head:\n            res.append(head.val)\n            head = head.next\n        res.sort()\n        return [i for i in range(1, len(res) + 1) if res[i - 1] % i == 0]",
      -4.16015625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def findDivisors(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        def dfs(head, result):\n            if not head:\n                return\n            if head.next:\n                dfs(head.next, result)\n            result.append(head.val)\n        result = []\n        dfs(head, result)\n        return result\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(4)\n    head.next.next.next = ListNode(8)\n    head.next.next.next.next = ListNode(16)\n    head.next.next.next.next.next = ListNode(32)\n    head.next.next.next.next.next.next = ListNode(64)\n    print Solution().findDivisors(head)",
      -4.22265625
    ],
    [
      "# https://www.hackerrank.com/challenges/quicksort\n# Time complexity: O(n log n)\n# Space complexity: O(1)\n# Difficulty: Medium\n# Comments:\n\ndef quicksort(list):\n    if not list:\n        return\n\n    # sort list in ascending order\n    # if even number of elements, sort evens first, else sort odds first\n    return quicksort(list[:]) + quicksort(list[1:])\n\nif __name__ == \"__main__\":\n    n = int(input())\n    list = list(map(int, input().split()))\n\n    print(\"{}\".format(quicksort(list)))",
      -4.375
    ],
    [
      "def find_odd_and_even(numbers):\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            odd_numbers.append(number)\n        else:\n            break\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n        else:\n            break\n    return odd_numbers, even_numbers\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    odd_numbers, even_numbers = find_odd_and_even(numbers)\n    print(odd_numbers)\n    print(even_numbers)",
      -5.875
    ],
    [
      "# Write your code here.\n\n# Example 1:\n# Input: [3,1,2,4,3,5]\n# Output: [1,2]\n# Explanation:\n# 3 is the first even number in the list.\n# 1 is the first odd number in the list.\n# 2 is the second even number in the list.\n# 4 is the third even number in the list.\n# 5 is the fourth even number in the list.\n\n\n# Example 2:\n# Input: [4,1,2,3,4,5]\n# Output: [2,3]\n# Explanation:\n# 4 is the first even number in the list.\n# 1 is the first odd number in the list.\n# 2 is the second even number in the list.\n# 3 is the third even number in the list.\n# 4 is the fourth even number in the list.\n# 5 is the fifth even number in the list.\n\n# Note:\n# The given list is always valid, each number is in the range of 32-bit signed integer and all the numbers in the list are unique.\n# The given list has at least one even number and one odd number.\n\nclass Solution(object):\n    def findDivisors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if nums == []:\n            return []\n        nums.sort()\n        ans = []\n        for i in range(len(nums)):\n            if i == 0:\n                ans.append(1)\n            elif nums[i] % 2 == 0:\n                ans.append(nums[i])\n            else:\n                ans.append(2)\n        return ans\n\n\nif __name__ == \"__main__\":\n    print(Solution().findDivisors([3,1,2,4,3,5]))",
      -6.29296875
    ],
    [
      "import math\n\n# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    def getDivisor(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # First even and odd number\n        even = []\n        odd = []\n\n        for i in range(len(nums)):\n            if nums[i] % 2 == 0:\n                even.append(nums[i])\n            else:\n                odd.append(nums[i])\n\n        # Get the max of all even and odd numbers\n        max_even = max(even)\n        max_odd = max(odd)\n        max_num = max(max_even, max_odd)\n\n        # Divide the max number by 2\n        divisor = max_num / 2\n\n        return divisor\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getDivisor([3, 4, 5, 6, 7, 8, 9])\n    print s.getDivisor([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
      -6.37109375
    ],
    [
      "# Your code here\n\n# Test cases\nprint(div(1, [1,2,3,4,5]) == 2)\nprint(div(1, [2,3,4,5,6,7,8]) == 3)\nprint(div(1, [1,2,3,4,5,6,7,8,9]) == 2)\nprint(div(1, [2,3,4,5,6,7,8,9,10]) == 3)\nprint(div(1, [2,3,4,5,6,7,8,9,10,11]) == 2)\nprint(div(1, [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181",
      -6.75
    ],
    [
      "# https://www.hackerrank.com/challenges/div-two-numbers/problem\n\n# Returns the division of the first even number of the input list.\ndef even_odd(input_list):\n    return sum(1 for number in input_list if number % 2 == 0)\n\n# Returns the division of the first odd number of the input list.\ndef odd_even(input_list):\n    return sum(1 for number in input_list if number % 2!= 0)\n\n# Returns the division of the first even number of the input list.\ndef even_odd_2(input_list):\n    return sum(1 for number in input_list if number % 2 == 0)\n\n# Returns the division of the first odd number of the input list.\ndef odd_even_2(input_list):\n    return sum(1 for number in input_list if number % 2!= 0)\n\n# Returns the division of the first even number of the input list.\ndef even_odd_3(input_list):\n    return sum(1 for number in input_list if number % 2 == 0)\n\n# Returns the division of the first odd number of the input list.\ndef odd_even_3(input_list):\n    return sum(1 for number in input_list if number % 2!= 0)\n\n# Returns the division of the first even number of the input list.\ndef even_odd_4(input_list):\n    return sum(1 for number in input_list if number % 2 == 0)\n\n# Returns the division of the first odd number of the input list.\ndef odd_even_4(input_list):\n    return sum(1 for number in input_list if number % 2!= 0)\n\n# Returns the division of the first even number of the input list.\ndef even_odd_5(input_list):\n    return sum(1 for number in input_list if number % 2 == 0)\n\n# Returns the division of the first odd number of the input list.\ndef odd_even_5(input_list):\n    return sum(1 for number in input_list if number % 2!= 0)\n\n# Returns the division of the first even number of the input list.\ndef even_odd_6",
      -7.0390625
    ],
    [
      "def is_even(n):\n    return n % 2 == 0\n\ndef is_odd(n):\n    return n % 2 == 1\n\ndef division(nums):\n    if len(nums) == 0:\n        return 0\n    if is_even(nums[0]):\n        return 1\n    if is_even(nums[-1]):\n        return 1\n    if is_odd(nums[0]):\n        return 0\n    if is_odd(nums[-1]):\n        return 0\n    return len(nums) - 2\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nprint(division(nums))",
      -7.54296875
    ],
    [
      "# Complete the divideEvens function below.\ndef divideEvens(nums):\n    evens = []\n    odds = []\n    for i in nums:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return (evens, odds)\n\n\nif __name__ == '__main__':\n    nums = [2, 1, 4, 3, 5, 2, 3, 4, 5, 5, 4, 4, 1, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3",
      -8.0390625
    ],
    [
      "def get_div(numbers):\n\tdivs = [0] * (numbers.count(2) + 1)\n\tfor i in range(len(numbers)):\n\t\tif numbers[i] % 2 == 0:\n\t\t\tdivs[numbers[i] / 2] += 1\n\t\telse:\n\t\t\tdivs[numbers[i] / 2] -= 1\n\treturn divs\n\nif __name__ == \"__main__\":\n\tnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tprint(get_div(numbers))",
      -8.109375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def findDivisor(self, nums: List[int]) -> int:\n        \"\"\"\n        @param nums: A list of integers.\n        @return: An integer which is the division of all the numbers in the list.\n        \"\"\"\n        d = 1\n        for n in nums:\n            d *= 2\n            if n % 2 == 0:\n                d -= 1\n        return d",
      -8.8515625
    ],
    [
      "# Your Code Goes Here\ndef even_odd_division(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i] = nums[i] / 2\n        else:\n            nums[i] = nums[i] / 2 + 1\n    return nums\n\n# Test Cases\nprint even_odd_division([1, 2, 3])\nprint even_odd_division([4, 5, 6])\nprint even_odd_division([1, 2, 3, 4, 5, 6])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\nprint even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
      -9.09375
    ],
    [
      "def even_odd(nums):\n    even = 0\n    odd = 0\n    for i in nums:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nif __name__ == '__main__':\n    # Test cases\n    even_odd([1, 2, 3, 4, 5, 6])\n    even_odd([3, 4, 5, 6, 7, 8])\n    even_odd([2, 4, 6, 8, 10])\n    even_odd([1, 3, 5, 7, 9])\n    even_odd([3, 5, 7, 9, 11])",
      -9.1640625
    ],
    [
      "def even_odd_division(numbers):\n\t# write your code here\n\todd = []\n\teven = []\n\tfor x in numbers:\n\t\tif x % 2 == 0:\n\t\t\teven.append(x)\n\t\telse:\n\t\t\todd.append(x)\n\treturn even, odd\n\nif __name__ == '__main__':\n\tassert even_odd_division([2, 4, 6, 8]) == ([2, 4], [6, 8])\n\tassert even_odd_division([1, 2, 3, 4, 5]) == ([1, 2, 3], [4, 5])\n\tassert even_odd_division([1, 3, 5, 7, 9]) == ([1, 3, 5], [7, 9])",
      -9.2109375
    ],
    [
      "def find_divisor(numbers):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n\n    Input:\n    numbers - a list of integers\n\n    Output:\n    The division of first even and odd number of a given list.\n    \"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            numbers[i] //= 2\n        else:\n            numbers[i] = 3*numbers[i] + 1\n    return numbers\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,",
      -9.546875
    ],
    [
      "# -*- coding:utf-8 -*-\nclass Solution(object):\n    def findDivision(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        def findDivision(nums, result, left, right):\n            if left == right:\n                result.append(left)\n            for i in range(left, right):\n                if nums[i] % 2 == 0:\n                    findDivision(nums, result, left, i - 1)\n                else:\n                    findDivision(nums, result, i + 1, right)\n        result = []\n        findDivision(nums, result, 0, len(nums) - 1)\n        return result",
      -10.0859375
    ],
    [
      "def find_even_odd_number(numbers):\n    evens = 0\n    odds = 0\n    for i in numbers:\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return evens, odds\n\ndef main():\n    numbers = [1, 2, 3, 4, 5]\n    evens, odds = find_even_odd_number(numbers)\n    print(\"The first even number of the given list is:\", numbers[evens])\n    print(\"The first odd number of the given list is:\", numbers[odds])\n\nif __name__ == \"__main__\":\n    main()",
      -10.2734375
    ],
    [
      "import unittest\n\n# @include\ndef find_divisors(nums):\n    return {\n        2: 1,\n        3: 1,\n        4: 2,\n        5: 2,\n        6: 2,\n        7: 3,\n        8: 3,\n        9: 3,\n        10: 4,\n        11: 4,\n        12: 4,\n        13: 4,\n        14: 4,\n        15: 5,\n        16: 5,\n        17: 5,\n        18: 5,\n        19: 5,\n        20: 6,\n        21: 6,\n        22: 6,\n        23: 6,\n        24: 6,\n        25: 6,\n        26: 6,\n        27: 6,\n        28: 6,\n        29: 6,\n        30: 6,\n        31: 6,\n        32: 7,\n        33: 7,\n        34: 7,\n        35: 7,\n        36: 7,\n        37: 7,\n        38: 7,\n        39: 7,\n        40: 7,\n        41: 7,\n        42: 7,\n        43: 7,\n        44: 7,\n        45: 7,\n        46: 7,\n        47: 7,\n        48: 7,\n        49: 7,\n        50: 7,\n        51: 7,\n        52: 8,\n        53: 8,\n        54: 8,\n        55: 8,\n        56: 8,\n        57: 8,\n        58: 8,\n        59: 8,\n        60: 8,\n        61: 8,\n        62: 8,\n        63: 8,\n        64: 8,\n        65: 8,\n        66: 8,\n        67: 8,\n        68: 8,\n        69: 8,\n        70: 8,\n        71: 8,\n        72: 8,\n        73: 8,\n        74: 8,\n        75: 8,\n        76: 8,\n        77: 8,\n        78: 8,\n        79: 8,\n        80: 8,\n        81: 8,\n        82: 8,",
      -10.421875
    ],
    [
      "def find_even_odd(list):\n    if len(list) == 0:\n        return []\n\n    odd_num = list[0]\n    even_num = list[1]\n    for num in list[2:]:\n        if num % 2 == 0:\n            odd_num = num\n        else:\n            even_num = num\n    return [odd_num, even_num]\n\n\nif __name__ == '__main__':\n    input_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    result = find_even_odd(input_list)\n    print(result)",
      -11.0
    ],
    [
      "from itertools import combinations\n\ndef findDivision(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(numbers) <= 1:\n        return numbers\n    \n    # build a list of all combinations of numbers\n    # (evens, odds)\n    allCombinations = [combinations(numbers, 2)]\n    for i in range(1, len(numbers)):\n        allCombinations.append(combinations(numbers, i))\n    \n    # we can build the output list by\n    # checking if the first element is even or odd\n    # and then checking if the rest is even or odd\n    # or the first element is even and the rest is odd\n    # or the first element is odd and the rest is even\n    # or the first element is odd and the rest is even\n    # and so on\n    output = []\n    for combination in allCombinations:\n        # for each combination\n        # check if the first element is even or odd\n        # if it is even, then we append the second element\n        # if it is odd, then we append the second element\n        # and so on\n        # if the first element is even, then we append the second element\n        # if the first element is odd, then we append the second element\n        # and so on\n        # if the first element is even, then we append the second element\n        # if the first element is odd, then we append the second element\n        # and so on\n        # and so on\n        if combination[0][0] % 2 == 0:\n            output.append(combination[0][1])\n        else:\n            output.append(combination[0][1])\n            \n    return output\n\n\nif __name__ == \"__main__\":\n    numbers = [2, 3, 4, 5]\n    print(findDivision(numbers))",
      -11.0390625
    ],
    [
      "#!/usr/bin/env python\n\nclass Solution(object):\n    def findDivisor(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        \n        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return nums[0]\n        \n        # get the even and odd numbers\n        even = 0\n        odd = 0\n        for i in xrange(n):\n            if nums[i] % 2 == 0:\n                even += nums[i]\n            else:\n                odd += nums[i]\n        \n        # return the even number division\n        if even % 2 == 0:\n            return even // 2\n        else:\n            return odd // 2",
      -11.3046875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def oddEvenList(self, head):\n        # write your code here\n        odd = head\n        even = head.next\n        while even:\n            if odd.val % 2:\n                odd.next = even.next\n            odd = odd.next\n            even = even.next\n        odd.next = head\n        return head\n\n    def oddEvenList2(self, head):\n        # write your code here\n        odd = head\n        even = head.next\n        while even:\n            odd.next = even.next\n            odd = odd.next\n            even = even.next\n        odd.next = head\n        return head\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode",
      -11.78125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\t# @param head, a ListNode\n\t# @return a ListNode\n\tdef oddEvenList(self, head):\n\t\tif not head:\n\t\t\treturn None\n\n\t\todd = head\n\t\teven = head.next\n\t\twhile even:\n\t\t\todd.next = even.next\n\t\t\todd = odd.next\n\t\t\teven = even.next\n\n\t\todd.next = None\n\t\treturn head",
      -11.8359375
    ],
    [
      "# Definition for a Node.\nclass Node(object):\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findDiv(self, root, n):\n        \"\"\"\n        :type root: Node\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 3:\n            if root.val % 2 == 0:\n                return 1\n            else:\n                return 0\n        if n == 4:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 5:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 6:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 7:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 8:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 9:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 10:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 11:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 12:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 13:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 14:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 15:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 16:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 17:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 18:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 19:\n            return 1 if root.val % 2 == 0 else 0\n        if n == 20:\n            return 1 if",
      -11.9609375
    ],
    [
      "def divide_even_odd(lst):\n    if len(lst) < 2:\n        return\n    odd_count = 0\n    even_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test():\n    assert divide_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2, 3)\n\n\nif __name__ == '__main__':\n    test()",
      -13.0234375
    ],
    [
      "def div_even_odd(nums):\n    return [nums[0]//2, nums[-1]//2]\n\n# Testing\nif __name__ == '__main__':\n    print(div_even_odd([2, 4, 6, 8, 10]))\n    print(div_even_odd([2, 4, 6, 8, 10, 12]))\n    print(div_even_odd([2, 4, 6, 8, 10, 12, 14]))\n    print(div_even_odd([2, 4, 6, 8, 10, 12, 14, 16]))\n    print(div_even_odd([2, 4, 6, 8, 10, 12, 14, 16, 18]))",
      -13.0859375
    ],
    [
      "# https://leetcode.com/problems/division-of-first-even-and-odd-number-of-a-given-list/discuss/173848/Python-with-explanation-with-comments\nclass Solution(object):\n    def firstEvenDivisible(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def findFirstEven(nums):\n            if len(nums) == 1:\n                return 0\n            mid = (len(nums) - 1) / 2\n            if nums[mid] % 2 == 0:\n                return findFirstEven(nums[:mid]) + 1\n            else:\n                return findFirstEven(nums[mid:])\n\n        return findFirstEven(nums)\n\n    def firstEvenDivisible_recursive(self, nums):\n        if len(nums) == 1:\n            return 0\n        if nums[0] % 2 == 0:\n            return self.firstEvenDivisible_recursive(nums[1:])\n        else:\n            return self.firstEvenDivisible_recursive(nums[1:]) + 1\n\n    def firstEvenDivisible_recursive_with_extra(self, nums):\n        if len(nums) == 1:\n            return 0\n        if nums[0] % 2 == 0:\n            return self.firstEvenDivisible_recursive_with_extra(nums[1:])\n        else:\n            return self.firstEvenDivisible_recursive_with_extra(nums[1:]) + 1\n\nif __name__ == \"__main__\":\n    nums = [2, 4, 6, 8, 10]\n    print(Solution().firstEvenDivisible(nums))\n    print(Solution().firstEvenDivisible_recursive(nums))\n    print(Solution().firstEvenDivisible_recursive_with_extra(nums))",
      -13.109375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def divideList(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n\n        # find the first even and odd number\n        even = head\n        odd = head\n        while even.next and even.next.next:\n            even = even.next\n            odd = odd.next\n\n        # find the first even and odd number\n        even = head\n        odd = head\n        while even.next and even.next.next:\n            even = even.next\n            odd = odd.next\n\n        # divide the list\n        odd.next = even.next\n        even.next = None\n        return head\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    print(sol.divideList(head))",
      -13.203125
    ],
    [
      "# Your code here\n\n\ndef findDivision(lst):\n    # base case\n    if len(lst) == 0:\n        return 0\n    # base case\n    if len(lst) == 1:\n        return lst[0]\n    if lst[0] % 2 == 0:\n        return lst[0] / 2\n    else:\n        return lst[0] / 2 + 1\n\n\ndef main():\n    # your code here\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    print findDivision(lst)\n\n\nif __name__ == '__main__':\n    main()",
      -13.609375
    ],
    [
      "def find_even_odd_number(a):\n\todd_list = []\n\teven_list = []\n\tfor i in a:\n\t\tif i % 2 == 0:\n\t\t\teven_list.append(i)\n\t\telse:\n\t\t\todd_list.append(i)\n\treturn [even_list, odd_list]\n\n\n\ndef test_find_even_odd_number(a):\n\tassert find_even_odd_number(a) == [a, a]\n\n\n\ntest_find_even_odd_number([1, 2, 3, 4, 5, 6])\ntest_find_even_odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ntest_find_even_odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\ntest_find_even_odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
      -13.7421875
    ],
    [
      "# https://leetcode.com/problems/number-of-divisors/discuss/223436/Python-and-C#2-lines-with-comments\n\n\ndef divisor_sum(nums):\n    # write your code here\n    res = [0 for _ in range(nums[0] + 1)]\n    for i in range(1, nums[0] + 1):\n        res[i] = sum(nums[:i])\n    for i in range(1, nums[0] + 1):\n        for j in range(i + 1, nums[0] + 1):\n            if j % i == 0:\n                res[j] += res[j // i]\n    return res[1]\n\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 5, 7, 8, 9, 10]\n    print(divisor_sum(nums))",
      -15.5390625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findDiv(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        count = 0\n        count += self.findDiv(root.left)\n        count += self.findDiv(root.right)\n        if root.left and root.left.val % 2 == 0:\n            count += root.left.val\n        if root.right and root.right.val % 2 == 0:\n            count += root.right.val\n        return count\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print s.findDiv(root)\n    root.left.right.left = TreeNode(8)\n    root.left.right.right = TreeNode(9)\n    print s.findDiv(root)",
      -16.28125
    ],
    [
      "# I know this is a pretty silly function, but it's a challenge, so I'm\n# going to try it out.\n\n# This is the definition of the function:\ndef even_odd(list):\n    even = 0\n    odd = 0\n    for i in list:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n# This is the code:\neven, odd = even_odd([2, 3, 5, 7, 9, 11])\nprint \"The even numbers are\", even\nprint \"The odd numbers are\", odd",
      -16.40625
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def findDiv(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if nums is None or len(nums) == 0:\n            return 0\n        root = TreeNode(nums[0])\n        for i in range(1, len(nums)):\n            node = root\n            while node is not None:\n                if nums[i] % 2 == 0:\n                    node.left = TreeNode(nums[i])\n                else:\n                    node.right = TreeNode(nums[i])\n                node = node.left if node.left is not None else node.right\n        return root.val\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [2, 3, 4, 5]\n    print(sol.findDiv(nums))\n    nums = [1]\n    print(sol.findDiv(nums))\n    nums = [1, 2]\n    print(sol.findDiv(nums))\n    nums = [1, 2, 3]\n    print(sol.findDiv(nums))\n    nums = [1, 3, 5, 7]\n    print(sol.findDiv(nums))\n    nums = [1, 2, 3, 4, 5]\n    print(sol.findDiv(nums))\n    nums = [1, 3, 5, 7, 9]\n    print(sol.findDiv(nums))",
      -16.53125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def findDiv(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # Use a stack to store the divisors\n        stack = []\n        cur = head\n        while cur:\n            cur = cur.next\n            if cur:\n                stack.append(cur.val)\n            else:\n                # If the list has only one element, it is not divided\n                if len(stack) == 1:\n                    return None\n                # Otherwise, pop the top element from the stack and set it to the current head\n                else:\n                    head.val = stack.pop()\n                    head = head.next\n        return head",
      -18.171875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}