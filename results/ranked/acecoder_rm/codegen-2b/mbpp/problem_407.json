{
  "problem": {
    "task_id": "MBPP/418",
    "prompt": "Write a python function to find the sublist having maximum length.",
    "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
    "test_list": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ],
    "challenge_test_list": [],
    "problem_id": 407
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def max_length_sublist(L):\n    \"\"\"\n    :type L: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for i in range(len(L)):\n        if i == 0 or L[i]!= L[i - 1]:\n            max_length = max(max_length, len(L[i:]))\n    return max_length\n\n# Time:  O(n^2)\n# Space: O(n^2)\nclass Solution(object):\n    def maxLengthSubList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return max_length_sublist(nums)",
      1.1552734375
    ],
    [
      "# The function should return a list of length 2\n# where the first element is the list of sub-lists and the second element is the length of the maximum sublist.\n\ndef max_sub_list_length(lst):\n    max_sublist_length = 0\n    max_sublist = []\n    max_sublist_length = 0\n    max_sublist_length = 0\n    for i in lst:\n        max_sublist_length = max(max_sublist_length, len(i))\n        for j in i:\n            if max_sublist_length < len(j):\n                max_sublist_length = len(j)\n                max_sublist = i\n    return max_sublist, max_sublist_length\n\n\n# Test cases\n\n# [[1,2,3],[1,2,3],[1,2,3]]\n# [[1,2],[1,2],[1,2]]\n# [[1,2],[1,2],[1,2]]\n\nlst = [[1,2,3],[1,2,3],[1,2,3]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2,3],[1,2,3],[1,2,3]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2],[1,2]]\nlst = [[1,2],[1,2",
      0.440185546875
    ],
    [
      "# Note:\n# If we want to find the sublist having the maximum sum, we can do the following.\n# We need to compare the two elements of the sublist and find the maximum sum.\n# We can do the same thing for the max sum of the sublist.\n# We can do the same thing for the min sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n# We can do the same thing for the sum of the sublist.\n#",
      0.434814453125
    ],
    [
      "def find_sublist_max_length(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    max_index = 0\n    for index in range(len(list_)):\n        if len(list_[index:]) > max_length:\n            max_length = len(list_[index:])\n            max_index = index\n    return max_index\n\n\nif __name__ == '__main__':\n    print(find_sublist_max_length([2, 4, 6, 8]))\n    print(find_sublist_max_length([1, 2, 3]))\n    print(find_sublist_max_length([1, 2, 3, 1]))",
      0.389892578125
    ],
    [
      "def max_len_sublist(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    max_len = 0\n    max_len_sublist = []\n    for i in range(len(list_)):\n        for j in range(i, len(list_)):\n            if list_[i] + list_[j] == list_[max_len]:\n                max_len_sublist.append(list_[i:j+1])\n                if len(max_len_sublist) > max_len:\n                    max_len = len(max_len_sublist)\n                if len(max_len_sublist) > max_len:\n                    max_len_sublist = []\n    return max_len",
      0.320556640625
    ],
    [
      "def findMaxSubList(list):\n    max_list = []\n    max_length = 0\n    for index in range(0, len(list)):\n        if len(list[index]) > max_length:\n            max_list = list[index]\n            max_length = len(max_list)\n\n    return max_list, max_length\n\ndef main():\n    list = [1,2,3,4,5,6,7,8,9]\n    max_list, max_length = findMaxSubList(list)\n    print \"The max sublist is:\", max_list\n    print \"The max length is:\", max_length\n\nif __name__ == '__main__':\n    main()",
      0.1884765625
    ],
    [
      "import sys\n\ndef max_length_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if not arr:\n        return 0\n    sublist_len = 0\n    max_len = 0\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        max_len = max(arr[i-1:i+1]) + 1\n        if max_len > sublist_len:\n            sublist_len = max_len\n    return sublist_len\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(max_length_sublist(arr))",
      -0.61669921875
    ],
    [
      "def maxSubListLength(arr):\n    maxLen = 0\n    maxIndex = 0\n    for index in range(len(arr)):\n        if maxLen < len(arr[index]):\n            maxLen = len(arr[index])\n            maxIndex = index\n    return arr[maxIndex], maxLen\n\nprint maxSubListLength([1,2,3,4,5,6,7,8,9,10,11,12,13])",
      -0.61767578125
    ],
    [
      "def max_length_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    max_len = 0\n    max_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[max_idx]:\n            max_len += 1\n        else:\n            max_len = max(max_len, len(arr[max_idx:]))\n            max_idx += 1\n    return max_len\n\n\n# Your code here",
      -0.85693359375
    ],
    [
      "def find_max_length_sublist(list_of_numbers):\n    if not list_of_numbers:\n        return 0\n\n    max_length = 1\n    for num in list_of_numbers:\n        max_length = max(max_length, len(list(sorted(list_of_numbers[:num]))))\n\n    return max_length\n\nprint(find_max_length_sublist([1,2,3,4,5,6,7,8,9,10]))",
      -0.85693359375
    ],
    [
      "def max_length(arr):\n    max_length = 0\n    for i in range(len(arr)):\n        if len(arr[i]) > max_length:\n            max_length = len(arr[i])\n    return max_length\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\nprint max_length(arr)",
      -0.85693359375
    ],
    [
      "def max_length_sublist(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    if not lst:\n        return 0\n\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[j] > lst[i]:\n                max_length = max(max_length, j - i + 1)\n\n    return max_length",
      -0.85693359375
    ],
    [
      "def maxSubListLength(list):\n    maxLength = 0\n    maxLengthList = []\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if len(list[i:j]) > maxLength:\n                maxLength = len(list[i:j])\n                maxLengthList = list[i:j]\n    return maxLength, maxLengthList\n\nprint maxSubListLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint maxSubListLength([1, 2, 3, 4, 5, 6, 7, 8, 9])",
      -0.85791015625
    ],
    [
      "def max_length(lst):\n    \"\"\"\n    lst: a list of integers\n    Returns the sublist having the maximum length.\n    \"\"\"\n    def max_length_helper(lst):\n        if len(lst) == 1:\n            return lst\n        else:\n            max_len = max_length_helper(lst[1:])\n            if len(lst) == 1:\n                return lst\n            else:\n                if len(lst[0]) > max_len:\n                    return lst\n                else:\n                    return max_length_helper(lst[1:])\n    return max_length_helper(lst)\n\nprint max_length([1, 2, 3, 4, 5, 6, 7])",
      -0.85791015625
    ],
    [
      "def max_sublist_length(lst):\n    return max([len(sublist) for sublist in lst])\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(max_sublist_length(lst))",
      -0.85791015625
    ],
    [
      "def max_length(a):\n    \"\"\"\n    :type a: list[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 0:\n        return 0\n    max_length = 0\n    for i in range(len(a)):\n        if len(a[i:]) > max_length:\n            max_length = len(a[i:])\n    return max_length\n\n# Your MaxLength function will be called like this:\n# max_length = max_length(some_list)",
      -0.85791015625
    ],
    [
      "def maxSubListLength(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    max = 1\n    max_nums = []\n    max_len = 0\n    for i in range(len(nums)):\n        if nums[i] > max_nums[-1]:\n            max_nums.append(nums[i])\n            max_len = 1\n        elif nums[i] == max_nums[-1]:\n            max_len += 1\n        else:\n            max_len = max(max_len, len(max_nums))\n    return max_len",
      -0.85791015625
    ],
    [
      "def max_length(l):\n    if len(l) == 0:\n        return None\n    max_length = 0\n    for i in range(0, len(l)):\n        if len(l[i]) > max_length:\n            max_length = len(l[i])\n    return max_length\n\nprint(max_length([1,2,3,4,5,6,7,8,9]))",
      -0.85791015625
    ],
    [
      "def max_len(lst):\n    \"\"\"\n    Input: list of integers\n    Return: the length of the longest sublist.\n    \"\"\"\n    return max([len(sublist) for sublist in lst])\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(\"max_len(lst) =\", max_len(lst))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def max_sublist(l):\n    max_length = 0\n    max_length_pos = 0\n    for i in range(len(l)):\n        if l[i] > l[max_length_pos]:\n            max_length = i + 1\n            max_length_pos = i\n    return max_length\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print max_sublist(l)",
      -0.85791015625
    ],
    [
      "def findMaxLengthSublist(L):\n    \"\"\"\n    L: List\n    return: List\n    \"\"\"\n    maxLen = 0\n    maxLenSublist = []\n    for i in range(len(L)):\n        for j in range(i, len(L)):\n            if L[i] == L[j]:\n                if len(L[i]) > maxLen:\n                    maxLen = len(L[i])\n                    maxLenSublist = [L[i]]\n                elif len(L[i]) == maxLen:\n                    maxLenSublist.append(L[i])\n    return maxLenSublist\n\n# Test Cases\nL = [1, 2, 3, 4]\nprint(findMaxLengthSublist(L))\nL = [1, 2, 3, 4, 5]\nprint(findMaxLengthSublist(L))",
      -0.8583984375
    ],
    [
      "def findMaxSubList(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    def maxSubList(arr, left, right):\n        if left == right:\n            return arr[left]\n        mid = (left + right) / 2\n        if arr[mid] > arr[right]:\n            return maxSubList(arr, mid + 1, right)\n        else:\n            return maxSubList(arr, left, mid)\n    \n    maxSubList(arr, 0, len(arr) - 1)",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\ndef find_max_length_sublist(list):\n    max_len = 0\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                if list[i] > max_len:\n                    max_len = list[i]\n    return max_len\n\n#list = [2, 4, 5, 6, 7, 8]\nlist = [2, 3, 4, 5, 6, 7, 8]\nprint find_max_length_sublist(list)",
      -0.8583984375
    ],
    [
      "def find_max_sublist_length(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    return max_sublist_length(arr)\n\ndef max_sublist_length(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) <= 1:\n        return len(arr)\n    else:\n        return max(max_sublist_length(arr[:i] + arr[i+1:]) for i in range(1, len(arr)-1))\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(find_max_sublist_length(arr))",
      -0.8583984375
    ],
    [
      "def max_length(lst):\n    \"\"\"\n    >>> max_length([1, 2, 3, 4])\n    2\n    >>> max_length([1, 2, 3, 4, 5, 6, 7, 8])\n    3\n    >>> max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    5\n    \"\"\"\n    if len(lst) <= 1:\n        return 1\n    max_length = 1\n    for i in range(1, len(lst)):\n        if len(lst[i:]) > max_length:\n            max_length = len(lst[i:])\n    return max_length\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def max_length_sublist(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    def find_max_length(head, curr_length):\n        if head is None:\n            return curr_length\n        else:\n            if curr_length < head[1]:\n                return find_max_length(head[2], head[1])\n            else:\n                return find_max_length(head[2], curr_length)\n    max_length = 0\n    for i in list:\n        if i < 0:\n            max_length = max(max_length, -i)\n        else:\n            max_length = max(max_length, i)\n    return find_max_length(None, max_length)\n\n\nprint(max_length_sublist([-4, 2, 3, 1, -5, -2, 4]))",
      -0.8583984375
    ],
    [
      "def maxSubList(arr):\n    \"\"\"\n    Input:\n    arr: an array of integers\n    Output:\n    the length of the sublist having maximum length\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max = arr[0]\n    max_sublist = 1\n    for i in range(1, n):\n        if arr[i] > max:\n            max = arr[i]\n            max_sublist = 1\n        else:\n            if arr[i] == max:\n                max_sublist += 1\n            else:\n                max_sublist = 1\n    return max_sublist\n\narr = [1,2,3,4,5]\nprint maxSubList(arr)",
      -0.8583984375
    ],
    [
      "def find_max_length(list_of_strings):\n    max_len = 0\n    max_string = ''\n    for s in list_of_strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_string = s\n    return max_string\n\nprint find_max_length(['a','bb','ccc','dddd','eeee'])",
      -0.8583984375
    ],
    [
      "def max_sublist_length(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    for i in range(0, len(list_) - 1):\n        for j in range(i + 1, len(list_)):\n            if list_[i] + list_[j] > list_[i + 1] + list_[j + 1]:\n                max_length = max(max_length, list_[i] + list_[j] - list_[i + 1] - list_[j + 1])\n    return max_length",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/max-sublist-length/problem\n# https://www.hackerrank.com/challenges/max-sublist-length/submissions/code/30490582\n\ndef max_sublist_length(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    if len(list) == 0:\n        return 0\n\n    max_length = 0\n    max_index = 0\n    max_length_sublist = 0\n\n    for i in range(len(list)):\n        if i == 0:\n            if max_length_sublist < len(list[i:]):\n                max_length_sublist = len(list[i:])\n                max_index = i\n        else:\n            if len(list[i:]) > max_length_sublist:\n                max_length_sublist = len(list[i:])\n                max_index = i\n    return max_index",
      -0.8583984375
    ],
    [
      "def maxSubList(list):\n    if not list:\n        return []\n\n    if len(list) == 1:\n        return list\n\n    maxLen = 0\n    maxLenList = []\n\n    for i in range(len(list)):\n        for j in range(i, len(list)):\n            if list[i] == list[j]:\n                continue\n            else:\n                tmpList = list[i:j]\n                tmpLen = len(tmpList)\n                if tmpLen > maxLen:\n                    maxLen = tmpLen\n                    maxLenList = tmpList\n\n    return maxLenList\n\nprint(maxSubList(list))",
      -0.8583984375
    ],
    [
      "def maxSub(s, m):\n    max_len = 0\n    max_sub = []\n    for i in range(len(s)):\n        if i+m > len(s):\n            break\n        for j in range(i, i+m):\n            if s[j:j+m] in max_sub:\n                max_len = max(max_len, len(s[j:j+m]))\n            else:\n                if len(s[j:j+m]) > max_len:\n                    max_len = len(s[j:j+m])\n                max_sub.append(s[j:j+m])\n    return max_sub, max_len\n\nprint maxSub(\"abcd\", 2)",
      -0.8583984375
    ],
    [
      "def maxSubList(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n\n    def max_sublist(arr, len_sublist):\n        if len(arr) == 1:\n            return len_sublist\n        else:\n            max_sublist_left = max_sublist(arr[:len(arr) / 2], len_sublist)\n            max_sublist_right = max_sublist(arr[len(arr) / 2:], len_sublist)\n            return max(max_sublist_left, max_sublist_right)\n\n    return max_sublist(arr, len(arr))\n\n# Your code here!",
      -0.8583984375
    ],
    [
      "def find_max_length_sublist(list_of_lists):\n    \"\"\"\n    Input: a list of lists\n    Output: the maximum length sublist\n    \"\"\"\n    max_length = 0\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_length:\n                max_length = list_of_lists[i][j]\n    return max_length\n\n# Test Cases\nprint(\"Test Case 1:\")\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7]]\nprint(\"The maximum length sublist of list is {}\".format(find_max_length_sublist(list_of_lists)))\n\nprint(\"\\nTest Case 2:\")\nlist_of_lists = [[1, 2, 3, 4], [5, 6], [7, 8]]\nprint(\"The maximum length sublist of list is {}\".format(find_max_length_sublist(list_of_lists)))\n\nprint(\"\\nTest Case 3:\")\nlist_of_lists = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]\nprint(\"The maximum length sublist of list is {}\".format(find_max_length_sublist(list_of_lists)))\n\nprint(\"\\nTest Case 4:\")\nlist_of_lists = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\nprint(\"The maximum length sublist of list is {}\".format(find_max_length_sublist(list_of_lists)))\n\nprint(\"\\nTest Case 5:\")\nlist_of_lists = [[1, 2, 3, 4, 5], [6, 7], [8, 9], [10, 11], [12, 13]]\nprint(\"The maximum length sublist of list is {}\".format(find_max_length_sublist(list_of_lists)))",
      -0.8583984375
    ],
    [
      "def max_length_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    def find_max_length(arr, i, max_length):\n        if i == len(arr):\n            return max_length\n        elif arr[i] > arr[i + 1]:\n            return find_max_length(arr, i + 1, max_length)\n        else:\n            return max_length_sublist(arr[i:])\n    return find_max_length(arr, 0, 0)\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    print(max_length_sublist(arr))",
      -0.8583984375
    ],
    [
      "def maxSubListLength(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    return max(map(len, filter(lambda x: x > 0, a)))\n\nif __name__ == \"__main__\":\n    assert maxSubListLength([1, 2, 3, 4]) == 4\n    assert maxSubListLength([1, 2, 3, 4, 5]) == 5\n    assert maxSubListLength([]) == 0\n    assert maxSubListLength([1]) == 1",
      -0.8583984375
    ],
    [
      "def max_length(arr):\n    max_len = 0\n    for i in arr:\n        if len(i) > max_len:\n            max_len = len(i)\n\n    return max_len\n\nif __name__ == '__main__':\n    assert max_length([1, 2, 3, 4, 5]) == 3\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
      -0.8583984375
    ],
    [
      "def maxSubListLength(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    return max([len(list(sub)) for sub in groupby(arr)])\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print maxSubListLength(arr)",
      -0.8583984375
    ],
    [
      "def max_length_sublist(list_to_check, length):\n    \"\"\"\n    Find the sublist having maximum length.\n    \"\"\"\n    max_sublist = []\n    max_sublist_length = 0\n    for i in range(0, len(list_to_check)):\n        if len(list_to_check[i:]) > max_sublist_length:\n            max_sublist = list_to_check[i:]\n            max_sublist_length = len(max_sublist)\n    return max_sublist\n\ndef test():\n    assert max_length_sublist([1, 2, 3], 1) == [1, 2]\n    assert max_length_sublist([1, 2, 3], 2) == [1, 2]\n    assert max_length_sublist([1, 2, 3], 3) == [1, 2]\n    assert max_length_sublist([1, 2, 3], 4) == [1, 2]\n    assert max_length_sublist([1, 2, 3, 4, 5], 3) == [1, 2]\n    assert max_length_sublist([1, 2, 3, 4, 5], 4) == [1, 2]\n    assert max_length_sublist([1, 2, 3, 4, 5], 5) == [1, 2]\n    assert max_length_sublist([1, 2, 3, 4, 5], 6) == [1, 2]\n\nif __name__ == '__main__':\n    test()",
      -0.8583984375
    ],
    [
      "def max_length(seq):\n    return max(map(len, seq))\n\nprint(max_length(['a', 'b', 'c', 'd', 'e', 'f', 'g']))",
      -0.85888671875
    ],
    [
      "def max_length(list_):\n    \"\"\"\n    >>> max_length([1, 2, 3, 4, 5])\n    3\n    >>> max_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    3\n    \"\"\"\n    return max(map(lambda x: len(x), list_))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "import math\ndef find_max_length(list):\n    return max(list, key=lambda x: len(x))\n\ndef main():\n    list = [1, 2, 3, 4, 5, 6]\n    print find_max_length(list)\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "#!/usr/bin/python\n\n# Importing libraries\nimport math\nfrom operator import itemgetter\n\n# Function to find the maximum number of elements in a list\ndef max_length(list):\n    length = 0\n    max_length = 0\n    for i in list:\n        if i > max_length:\n            max_length = i\n    return max_length\n\n# Main function\ndef main():\n    list = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print \"Maximum length of list is: \", max_length(list)\n\n# Running main function\nmain()",
      -0.85888671875
    ],
    [
      "def max_length_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_len = 0\n    max_arr = []\n    for i in range(n):\n        if arr[i] > 0:\n            cur_len = 1\n            while i + 1 < n and arr[i + 1] > 0:\n                cur_len += 1\n                i += 1\n            max_len = max(max_len, cur_len)\n            if cur_len > max_len:\n                max_arr.append(arr[i])\n    return max_len\n\n# Your Code\nprint(max_length_sublist([1, 2, 3, 4, 5]))\nprint(max_length_sublist([1, 2, 3, 4, 5, 6]))",
      -0.85888671875
    ],
    [
      "def find_max_length(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_len = 0\n    max_len_list = []\n    for i in range(len(nums)):\n        if len(str(nums[i])) > max_len:\n            max_len = len(str(nums[i]))\n            max_len_list = [i]\n        elif len(str(nums[i])) == max_len:\n            max_len_list.append(i)\n    return max_len, max_len_list\n\nif __name__ == \"__main__\":\n    print(find_max_length([1,2,3,4,5,6,7,8,9]))",
      -0.85888671875
    ],
    [
      "def max_length_sublist(list_):\n    \"\"\"\n    Return the sublist having maximum length.\n    \"\"\"\n    # Your code here\n    \n    if len(list_) == 0:\n        return None\n\n    # Return the largest list\n    max_list = list_[0]\n    for i in range(1, len(list_)):\n        if len(list_[i]) > len(max_list):\n            max_list = list_[i]\n\n    return max_list\n\n\nif __name__ == \"__main__\":\n    print max_length_sublist([1,2,3,4,5])",
      -0.86083984375
    ],
    [
      "def max_sublist_length(L):\n    if len(L) < 2:\n        return len(L)\n    elif len(L) == 2:\n        return max(L)\n    else:\n        return max(max_sublist_length(L[1:]), max_sublist_length(L[:-1]))\n\nL = [1,2,3,4,5,6,7,8,9,10]\nprint(max_sublist_length(L))",
      -0.86083984375
    ],
    [
      "def maxSubLength(nums):\n    maxLength = 0\n    maxLengthList = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if len(nums[i:j]) > maxLength:\n                maxLength = len(nums[i:j])\n                maxLengthList = [i, j]\n    return maxLengthList\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print maxSubLength(nums)",
      -0.86083984375
    ],
    [
      "def findMaxSublist(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        maxSublist = arr[0]\n        for i in range(1, len(arr)):\n            if len(arr[i]) > len(maxSublist):\n                maxSublist = arr[i]\n        return maxSublist\n\narr = [1,2,3,4,5,6,7,8,9,10]\nprint(findMaxSublist(arr))",
      -0.86083984375
    ],
    [
      "def max_length(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    return max_len\n\nif __name__ == '__main__':\n    lst = [1, 3, 4, 5, 6, 7, 8]\n    print max_length(lst)",
      -0.86083984375
    ],
    [
      "def max_length(lst):\n    max_length = 0\n    for i in range(0,len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6,7,8,9]\n    print max_length(lst)",
      -0.86083984375
    ],
    [
      "def maxSubListLen(arr):\n  \"\"\"\n  :type arr: List[int]\n  :rtype: int\n  \"\"\"\n  if len(arr) < 1:\n    return 0\n  arr.sort()\n  maxLen = 0\n  for i in range(len(arr)):\n    if i == 0 or arr[i]!= arr[i-1]:\n      if len(arr) - i >= maxLen:\n        maxLen = len(arr) - i\n    if i == 0 or arr[i]!= arr[i-1]:\n      if len(arr) - i - 1 >= maxLen:\n        maxLen = len(arr) - i - 1\n  return maxLen\n\nprint(maxSubListLen([1,2,3,4,5]))\nprint(maxSubListLen([1,2,3,4,5,6]))",
      -0.8876953125
    ],
    [
      "def find_max_len_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) < 2:\n        return len(arr)\n    max_len = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if len(arr[i:j]) > max_len:\n                max_len = len(arr[i:j])\n                max_index = i\n    return max_index\n\nif __name__ == '__main__':\n    print(find_max_len_sublist([1, 2, 3, 4, 5]))\n    print(find_max_len_sublist([1, 2, 3, 4]))\n    print(find_max_len_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_max_len_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))",
      -1.7900390625
    ],
    [
      "def max_sublist(list_of_numbers):\n    max_length = 0\n    max_length_sublist = 0\n    for i in range(0, len(list_of_numbers)):\n        if max_length < len(list_of_numbers[i]):\n            max_length = len(list_of_numbers[i])\n            max_length_sublist = i\n    return max_length, max_length_sublist\n\n\n# Testing the function\nprint max_sublist([1,2,3,4,5,6,7,8])",
      -1.93359375
    ],
    [
      "def find_max_length(nums):\n    # write your code here\n    lengths = {}\n    for i in nums:\n        lengths[i] = lengths.get(i,0) + 1\n    lengths = sorted(lengths, key=lengths.get, reverse=True)\n    return lengths[0]\n\n# Test cases\n# [[1,2,3],[1,2,3,4],[1,2,3,4,5]]\n# [[1,2,3],[1,2,3,4,5,6,7]]\n# [[1,2,3,4,5,6,7]]\nnums = [[1,2,3],[1,2,3,4],[1,2,3,4,5,6,7]]\n# nums = [[1,2,3],[1,2,3,4],[1,2,3,4,5,6,7]]\n# nums = [[1,2,3],[1,2,3,4,5,6,7]]\n\n# nums = [[1,2,3,4],[1,2,3,4,5,6,7]]\nprint find_max_length(nums)",
      -2.427734375
    ],
    [
      "# https://leetcode.com/problems/find-the-maximum-length-sublist/description/\n\nclass Solution(object):\n    def findSubListWithMaxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # sort the list first, then find the max length sublist\n        nums.sort()\n        max_len = 0\n        for i in range(len(nums)):\n            max_len = max(max_len, len(nums[i:]))\n        return max_len",
      -2.451171875
    ],
    [
      "def findMaxSublist(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    maxLen = 0\n    maxLenNums = []\n    for i in range(len(nums)):\n        sublistLen = 0\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                sublistLen += 1\n            elif nums[i] == nums[j]:\n                sublistLen += 1\n                if sublistLen > maxLen:\n                    maxLen = sublistLen\n                    maxLenNums = [nums[i]]\n                elif sublistLen == maxLen:\n                    maxLenNums.append(nums[i])\n    return maxLenNums[-1]\n\nif __name__ == '__main__':\n    print(findMaxSublist([1, 2, 3, 4, 5]))\n    print(findMaxSublist([1, 2, 3, 4, 5, 6]))",
      -2.693359375
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\n\ndef max_length(L):\n    \"\"\"\n    Find the maximum length of the sublist\n    :param L: List\n    :return: max_length\n    \"\"\"\n    if len(L) == 0:\n        return 0\n    else:\n        return max(map(len, L))\n\n\ndef main():\n    \"\"\"\n    Main function\n    :return: None\n    \"\"\"\n    if len(sys.argv)!= 2:\n        print(\"Wrong number of arguments\")\n        sys.exit(1)\n    L = map(int, sys.argv[1].split(','))\n    print(max_length(L))\n\n\nif __name__ == '__main__':\n    main()",
      -2.998046875
    ],
    [
      "def max_length(list_of_strings):\n    \"\"\"\n    Returns the sublist having maximum length.\n    \"\"\"\n    return max(list_of_strings, key=len)\n\nif __name__ == '__main__':\n    strings = [\n        \"abc\",\n        \"aabbcc\",\n        \"aabbccdd\",\n        \"abbccdd\",\n        \"aabbccdde\",\n        \"abbccdde\",\n        \"abbccddeeee\",\n        \"abbccddeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbccddeeeeee\",\n        \"abbcc",
      -3.109375
    ],
    [
      "# Time:  O(n^2)\n# Space: O(n)\n\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        max_sub_len = 0\n        max_sub_val = 0\n        max_sub_idx = 0\n        for i in range(n):\n            max_sub_len = max(max_sub_len, 1)\n            max_sub_val = max(max_sub_val, nums[i])\n            for j in range(i + 1, n):\n                max_sub_len = max(max_sub_len, 1 + nums[j])\n                max_sub_val = max(max_sub_val, nums[j])\n                if max_sub_len > max_sub_len:\n                    max_sub_idx = j\n                    max_sub_len = max_sub_len\n                    max_sub_val = max_sub_val\n        return max_sub_val\n\n\nif __name__ == \"__main__\":\n    print Solution().maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4])\n    print Solution().maxSubArray([-2, -3, 4])",
      -3.365234375
    ],
    [
      "def max_sublist_length(list):\n    \"\"\"\n    :param list: List of integers\n    :return: The maximum length sublist\n    \"\"\"\n    if not list:\n        return 0\n\n    max_length = 0\n    max_length_list = []\n    for i in range(len(list)):\n        for j in range(i, len(list)):\n            if list[i] < list[j]:\n                max_length_list.append(list[i])\n                max_length = max(max_length, len(max_length_list))\n                max_length_list.pop()\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    print max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    print max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    print max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    print max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])",
      -3.693359375
    ],
    [
      "def max_sublist_length(list_):\n    \"\"\"\n    >>> max_sublist_length([1, 2, 3, 4, 5])\n    3\n    >>> max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8])\n    3\n    >>> max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    4\n    >>> max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    4\n    >>> max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    5\n    >>> max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    6\n    >>> max_sublist_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    6\n    \"\"\"\n    if len(list_) == 0:\n        return 0\n    max_length = 0\n    for i in range(len(list_)):\n        if len(list_[i:]) > max_length:\n            max_length = len(list_[i:])\n    return max_length\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.01953125
    ],
    [
      "def max_length_sublist(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if not arr:\n        return 0\n\n    max_length = 0\n    max_length_list = []\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                if arr[j] not in max_length_list:\n                    max_length_list.append(arr[j])\n                else:\n                    if len(max_length_list) < len(arr):\n                        max_length_list.append(arr[j])\n    return max(max_length_list)\n\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7,8]\n    print(max_length_sublist(arr))",
      -4.07421875
    ],
    [
      "def findMaxSubList(list):\n    maxLen = 0\n    maxLenPos = 0\n    for i in range(0, len(list)):\n        if len(list[i]) > maxLen:\n            maxLen = len(list[i])\n            maxLenPos = i\n    return maxLen, maxLenPos\n\ndef main():\n    print findMaxSubList([1,2,3,4])\n    #print findMaxSubList([1,2,3,4,5])\n\nif __name__ == '__main__':\n    main()",
      -4.3046875
    ],
    [
      "def find_max_length_sublist(arr):\n    \"\"\"\n    Input: list arr\n    Output: max_length_sublist\n    \"\"\"\n    max_len = 0\n    max_len_sublist = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            cur_len = 1\n            for j in range(i+1, len(arr)):\n                if arr[j] == arr[i]:\n                    cur_len += 1\n                else:\n                    break\n            if cur_len > max_len:\n                max_len = cur_len\n                max_len_sublist = [i]\n            else:\n                if cur_len == max_len:\n                    max_len_sublist.append(i)\n    return max_len_sublist\n\narr = [1,2,3,4,5,6,7,8,9,10]\n\nprint(find_max_length_sublist(arr))",
      -4.4765625
    ],
    [
      "def max_length(list):\n    max_length = 0\n    for i in range(0, len(list)):\n        if len(list[i]) > max_length:\n            max_length = len(list[i])\n    return max_length\n\n\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print max_length(list)\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print max_length(list)\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182",
      -4.59375
    ],
    [
      "def maxSublist(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    # Your code here!\n    def maxSublist(l):\n        if len(l) == 0:\n            return 0\n        else:\n            max_len = 0\n            for i in range(len(l)-1):\n                for j in range(i+1, len(l)):\n                    if l[i] + l[j] > l[max_len]:\n                        max_len = j\n            return max_len\n    return maxSublist(list)\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5]\n    print(maxSublist(l))",
      -4.64453125
    ],
    [
      "def max_len(lst):\n    return max(map(len, lst))\n\ndef max_len_sublist(lst):\n    return max(map(lambda x: max_len(x), lst))\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print \"Max length sublist is\", max_len_sublist(lst)",
      -5.00390625
    ],
    [
      "def max_sub_list_length(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: int\n    \"\"\"\n    sub_list = []\n    max_length = 0\n    for i in range(len(A)):\n        if A[i] not in sub_list:\n            sub_list.append(A[i])\n        else:\n            if len(sub_list) > max_length:\n                max_length = len(sub_list)\n    return max_length\n\nif __name__ == '__main__':\n    assert max_sub_list_length([1,2,3,4,5,6,7,8]) == 3\n    assert max_sub_list_length([1,2,3,4,5,6]) == 2\n    assert max_sub_list_length([1,2,3,4,5,6,7,8,9]) == 5\n    assert max_sub_list_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 14\n    assert max_sub_list_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119",
      -5.109375
    ],
    [
      "# You can use the built-in max function to find the max value in a list.\n# If you don't use the built-in max function, you can use the built-in\n# max function to find the max value in a list.\n\ndef max_length(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: int\n    \"\"\"\n    return max(list)\n\n\nprint(max_length([1, 2, 3, 4]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))",
      -5.42578125
    ],
    [
      "def findMaxSubListLength(list):\n    \"\"\"\n    list: a list of integers\n\n    Return the length of the sublist having maximum length.\n    \"\"\"\n\n    max_length = 0\n    max_length_sublist = []\n    for i in range(len(list)):\n        if i == 0:\n            if len(list[i:]) > max_length:\n                max_length = len(list[i:])\n                max_length_sublist = list[i:]\n        else:\n            if len(list[i:]) > max_length:\n                max_length = len(list[i:])\n                max_length_sublist = list[i:]\n    return max_length, max_length_sublist\n\n\"\"\"\nSample Input\n\n[1,2,3,4,5,6,7,8,9]\n\nSample Output\n\n5\n[1,2,3,4,5,6]\n\"\"\"\n\ndef findMaxSubListLength_test():\n    list = [1,2,3,4,5,6,7,8,9]\n    print(findMaxSubListLength(list))\n\n\"\"\"\nSample Input\n\n[1,2,3,4,5,6,7,8,9]\n\nSample Output\n\n5\n[1,2,3,4,5,6]\n\"\"\"\n\ndef findMaxSubListLength_test2():\n    list = [1,2,3,4,5,6,7,8,9]\n    print(findMaxSubListLength(list))\n\n\"\"\"\nSample Input\n\n[1,2,3,4,5,6,7,8,9]\n\nSample Output\n\n5\n[1,2,3,4,5,6,7]\n\"\"\"\n\ndef findMaxSubListLength_test3():\n    list = [1,2,3,4,5,6,7,8,9]\n    print(findMaxSubListLength(list))\n\n\"\"\"\nSample Input\n\n[1,2,3,4,5,6,7,8,9]\n\nSample Output\n\n5\n[1,2,3,4,5,6,",
      -6.12109375
    ],
    [
      "def find_sublist_with_max_length(L):\n    max_length = 0\n    max_sublist = []\n    for i in range(len(L)):\n        for j in range(i, len(L)):\n            if L[i] == L[j]:\n                if len(L[j:]) > max_length:\n                    max_length = len(L[j:])\n                    max_sublist = L[i:j]\n    return max_sublist\n\nif __name__ == '__main__':\n    L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190",
      -6.2265625
    ],
    [
      "import collections\n\ndef find_sublist_max_length(s):\n    \"\"\"\n    :type s: List[str]\n    :rtype: int\n    \"\"\"\n    max_len = 0\n    max_sublist = []\n    for i in range(0, len(s)):\n        for j in range(i, len(s)):\n            if i == 0:\n                if s[j] == s[i]:\n                    max_len = max(max_len, 1)\n                    max_sublist.append(s[i])\n            else:\n                if s[j] == s[i]:\n                    max_len = max(max_len, 1 + len(s[i]))\n                    max_sublist.append(s[i])\n                else:\n                    max_len = max(max_len, len(s[i]))\n                    max_sublist = max_sublist[0:i+1]\n                    break\n    return max_len\n\nif __name__ == \"__main__\":\n    s = [\"b\", \"bb\", \"bbb\", \"c\", \"ccc\", \"cddd\", \"dddd\"]\n    print(find_sublist_max_length(s))",
      -6.32421875
    ],
    [
      "def max_len(list_of_lists):\n    \"\"\"\n    Return the maximum length of the list.\n    \"\"\"\n    max_len = 0\n    for list in list_of_lists:\n        max_len = max(max_len, len(list))\n    return max_len\n\n\ndef max_len_2(list_of_lists):\n    \"\"\"\n    Return the maximum length of the list.\n    \"\"\"\n    max_len = 0\n    for list in list_of_lists:\n        max_len = max(max_len, max(list))\n    return max_len\n\n\ndef max_len_3(list_of_lists):\n    \"\"\"\n    Return the maximum length of the list.\n    \"\"\"\n    max_len = 0\n    for list in list_of_lists:\n        max_len = max(max_len, max(map(len, list)))\n    return max_len\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [ [1,2,3,4,5,6,7,8], [9,10,11,12,13,14,15,16], [17,18,19,20,21,22,23,24] ]\n    print max_len(list_of_lists)\n    print max_len_2(list_of_lists)\n    print max_len_3(list_of_lists)",
      -6.41796875
    ],
    [
      "# https://leetcode.com/problems/maximum-subarray-sum/\n# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def maxSubArrayLen(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # time complexity: O(n)\n        # space complexity: O(1)\n        max_sum, max_start, max_end = 0, 0, 0\n        for i in xrange(len(nums)):\n            max_sum = max(max_sum, nums[i])\n            if max_sum == nums[i]:\n                max_end = i\n            elif nums[i] > max_sum:\n                max_end = i\n            else:\n                max_start = i\n        return max(len(nums) - max_end, max_end - max_start)\n\nif __name__ == \"__main__\":\n    print Solution().maxSubArrayLen([-2, 1, -3, 4, -1, 2, 1, -5, 4])",
      -6.5625
    ],
    [
      "def max_length_sublist(L):\n    \"\"\"\n    :type L: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # https://leetcode.com/problems/maximum-length-sublist/\n    if len(L) == 0:\n        return []\n    max_length = 0\n    max_length_sublist = []\n    for i in range(len(L)):\n        if L[i] == 0:\n            continue\n        for j in range(i+1, len(L)):\n            if L[i] + L[j] > max_length:\n                max_length = L[i] + L[j]\n                max_length_sublist = [L[i], L[j]]\n    return max_length_sublist\n\nif __name__ == '__main__':\n    assert max_length_sublist([1, 2, 3]) == [1, 2]\n    assert max_length_sublist([0, 1, 0, 1, 2]) == [0, 1, 2]\n    assert max_length_sublist([]) == []\n    assert max_length_sublist([0, 1, 2]) == [0, 1]\n    assert max_length_sublist([1, 1, 1]) == [1]\n    assert max_length_sublist([1, 2, 1]) == [1, 2]",
      -6.70703125
    ],
    [
      "def max_sublist(list_of_numbers):\n    \"\"\"\n    Given a list of numbers, find the sublist having maximum length.\n\n    Input: A list of numbers.\n    Output: A list containing the sublist.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for i in range(len(list_of_numbers)):\n        for j in range(i, len(list_of_numbers)):\n            if list_of_numbers[j] < list_of_numbers[i]:\n                length = j - i + 1\n                if length > max_length:\n                    max_length = length\n                    max_list = [list_of_numbers[i]]\n                    for k in range(i + 1, j):\n                        max_list.append(list_of_numbers[k])\n            elif list_of_numbers[j] == list_of_numbers[i]:\n                length = j - i + 1\n                if length > max_length:\n                    max_length = length\n                    max_list = [list_of_numbers[i]]\n                    for k in range(i + 1, j):\n                        max_list.append(list_of_numbers[k])\n    return max_list\n\n\nif __name__ == \"__main__\":\n    list_of_numbers = [1, 2, 3, 4, 5]\n    print max_sublist(list_of_numbers)",
      -6.74609375
    ],
    [
      "def findMax(a):\n    \"\"\"\n    Write a python function to find the sublist having maximum length.\n    \n    Example:\n    \n    Given [1,2,3,4,5], return [1,3,5]\n    \n    Input:\n    \n    A list of integers.\n    \n    Output:\n    \n    A list of integers.\n    \"\"\"\n    \n    if len(a) == 0:\n        return []\n    \n    # sort the list first\n    a.sort()\n    \n    # return the last element in the sorted list\n    return a[-1]\n\nif __name__ == '__main__':\n    \n    a = [1,2,3,4,5]\n    \n    print findMax(a)",
      -6.8515625
    ],
    [
      "def max_length(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    max_length = arr[0]\n    max_length_idx = 0\n    for idx in range(1, len(arr)):\n        if arr[idx] > arr[max_length_idx]:\n            max_length_idx = idx\n            max_length = arr[idx]\n    return max_length\n\ndef main():\n    arr = [1, 3, 4, 5, 6, 7, 8]\n    print max_length(arr)\n\nif __name__ == '__main__':\n    main()",
      -7.05078125
    ],
    [
      "def find_max_length_sublist(arr):\n    \"\"\"\n    Input:\n    arr: A list of integers\n    Output:\n    A list of integers, the length of which is the maximum length of a sublist\n    \"\"\"\n    max_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == arr[j]:\n                if arr[i] > max_length:\n                    max_length = arr[i]\n    return max_length\n\n\nif __name__ == \"__main__\":\n    arr = [2, 1, 2, 1, 2, 3, 4, 5, 6]\n    print find_max_length_sublist(arr)",
      -7.1171875
    ],
    [
      "def find_max_sublist(list_of_numbers):\n    max_length_sublist = []\n    for i in range(len(list_of_numbers)):\n        for j in range(i):\n            if list_of_numbers[i] == list_of_numbers[j] and list_of_numbers[i] not in max_length_sublist:\n                max_length_sublist.append(list_of_numbers[i])\n\n    return max(max_length_sublist)\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,",
      -7.2734375
    ],
    [
      "def max_sublist(L):\n    \"\"\"\n    Input:\n    L -- list\n\n    Output:\n    return -- the list of sublist having maximum length\n    \"\"\"\n    m = 0\n    for i in xrange(len(L)):\n        if L[i]!= L[0]:\n            m = max(L[i], m)\n        else:\n            m = max(m, len(L[i]))\n    return L[0:m]\n\ndef max_sublist2(L):\n    \"\"\"\n    Input:\n    L -- list\n\n    Output:\n    return -- the list of sublist having maximum length\n    \"\"\"\n    if len(L) == 0:\n        return []\n\n    if len(L) == 1:\n        return L\n\n    m = len(L)\n    for i in xrange(len(L)):\n        if L[i]!= L[0]:\n            m = max(L[i], m)\n        else:\n            m = max(m, len(L[i]))\n\n    return L[0:m]\n\ndef max_sublist3(L):\n    \"\"\"\n    Input:\n    L -- list\n\n    Output:\n    return -- the list of sublist having maximum length\n    \"\"\"\n    if len(L) == 0:\n        return []\n\n    if len(L) == 1:\n        return L\n\n    m = len(L)\n    for i in xrange(len(L)):\n        if L[i]!= L[0]:\n            m = max(L[i], m)\n        else:\n            m = max(m, len(L[i]))\n\n    return L[0:m]\n\nif __name__ == '__main__':\n    L = [1, 2, 3, 4, 5]\n    print max_sublist(L)\n    print max_sublist2(L)\n    print max_sublist3(L)",
      -7.421875
    ],
    [
      "import sys\nimport math\n\ndef max_length_sublist(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_len = 0\n    max_index = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            if arr[i] < arr[j]:\n                if j - i > max_len:\n                    max_len = j - i\n                    max_index = i\n    return max_index + 1\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert max_length_sublist([1, 2, 3, 4, 5]) == 2, \"1st example\"\n    assert max_length_sublist([1, 2, 3, 4, 5, 6]) == 3, \"2nd example\"\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7]) == 4, \"3rd example\"\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8]) == 5, \"4th example\"\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6, \"5th example\"\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7, \"6th example\"\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 8, \"7th example\"\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 9, \"8th example\"\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 10, \"9th example\"\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13",
      -7.4921875
    ],
    [
      "def max_length_sublist(list):\n    \"\"\"\n    list: a list of integers\n    return: a tuple containing the maximum length sublist and the indices of its first and last element\n    \"\"\"\n    max_length = 0\n    max_index = 0\n    max_sublist = []\n    for i in range(len(list)):\n        if list[i] not in max_sublist:\n            max_sublist.append(list[i])\n        else:\n            if len(max_sublist) > max_length:\n                max_length = len(max_sublist)\n                max_index = i\n            elif len(max_sublist) == max_length:\n                if list[i] > max_sublist[max_index]:\n                    max_index = i\n    return max_length, max_index\n\ndef test():\n    assert max_length_sublist([1, 2, 3, 4, 5]) == (3, 1)\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8]) == (3, 1)\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (3, 1)\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (3, 1)\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (3, 1)\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (3, 1)\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (3, 1)\n    assert max_length_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == (3, 1)\n    assert max_length_sublist([1, 2, 3, 4, 5",
      -8.1328125
    ],
    [
      "def max_sublist_length(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    max_length_arr = []\n    for i in range(len(arr)):\n        length = 0\n        for j in range(i, len(arr)):\n            if arr[j] > arr[i]:\n                length += 1\n            elif arr[j] < arr[i]:\n                length += 1\n        if length > max_length:\n            max_length = length\n            max_length_arr = [arr[i], length]\n    return max_length_arr[1]\n\nif __name__ == '__main__':\n    print(max_sublist_length([1,2,3,4,5,6,7,8,9,10,11,12]))\n    print(max_sublist_length([1,2,3,4,5,6,7,8,9,10,11,12,13]))\n    print(max_sublist_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))",
      -8.203125
    ],
    [
      "def findMaxSubList(nums):\n    if len(nums) == 1:\n        return nums\n    \n    maxLen = nums[0]\n    maxLenSubList = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > maxLen:\n            maxLen = nums[i]\n            maxLenSubList = nums[i]\n    return maxLenSubList\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print(findMaxSubList(nums))\n    nums = [1, 2, 3, 4]\n    print(findMaxSubList(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print(findMaxSubList(nums))\n    nums = [1, 2, 3, 4, 5]\n    print(findMaxSubList(nums))",
      -8.59375
    ],
    [
      "def max_sublist_length(L):\n    \"\"\"\n    L - input list.\n    Return the length of the longest sublist.\n    \"\"\"\n    # If L is empty, return 0.\n    if len(L) == 0:\n        return 0\n    # If L has only one element, return 1.\n    if len(L) == 1:\n        return 1\n    # If L has more than one element, sort the list.\n    L.sort()\n    # Create a new list containing only first elements of L.\n    sub_list = [L[0]]\n    # Create a new list containing only second elements of L.\n    sub_list.append(L[1])\n    # Iterate through L.\n    for i in range(2, len(L)):\n        # If L[i] is greater than L[i-1], append it to sub_list.\n        if L[i] > L[i-1]:\n            sub_list.append(L[i])\n        # If L[i] is smaller than L[i-1], append it to sub_list.\n        else:\n            sub_list.append(L[i-1])\n    # If L[i] is greater than L[i-1], append it to sub_list.\n    if L[-1] > L[-2]:\n        sub_list.append(L[-1])\n    # If L[i] is smaller than L[i-1], append it to sub_list.\n    else:\n        sub_list.append(L[-2])\n    # If L[i] is greater than L[i-1], append it to sub_list.\n    if L[-1] > L[-2]:\n        sub_list.append(L[-1])\n    # If L[i] is smaller than L[i-1], append it to sub_list.\n    else:\n        sub_list.append(L[-2])\n    # Return the length of the longest sublist.\n    return max(map(len, sub_list))\n\n\nif __name__ == \"__main__\":\n    L = [1, 2, 3, 4, 5, 6, 7",
      -8.625
    ],
    [
      "def find_max_sublist(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_len = 0\n    max_index = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if len(nums[j:]) > max_len:\n                max_len = len(nums[j:])\n                max_index = j\n    return max_index\n\nclass Solution:\n    def maxSubList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return find_max_sublist(nums)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [1,2,3,4,5,6,7]\n    print(sol.maxSubList(nums))",
      -8.71875
    ],
    [
      "def find_max_length_sublist(arr):\n    \"\"\"\n    arr is a list of integers.\n\n    Return a tuple containing the sublist with maximum length and the\n    maximum length of the sublist.\n    \"\"\"\n    lengths = [len(arr[i:]) for i in range(len(arr))]\n    max_length_sublist = (max(lengths), max(lengths))\n    return max_length_sublist\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(find_max_length_sublist(arr))\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(find_max_length_sublist(arr))\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n    print(find_max_length_sublist(arr))",
      -8.734375
    ],
    [
      "#!/usr/bin/env python\n\ndef find_max_sublist(l):\n    \"\"\"\n    :type l: List\n    :rtype: int\n    \"\"\"\n    max_length = 0\n    max_length_item = 0\n\n    for i in range(len(l)):\n        if i == 0:\n            max_length = 0\n            max_length_item = 0\n            continue\n\n        # get all the elements in the sublist\n        sub_list = l[i:]\n\n        # get the maximum length\n        max_length = max(max_length, len(sub_list))\n\n        # get the max element in the sublist\n        max_length_item = max(max_length_item, max(sub_list))\n\n    return max_length, max_length_item\n\n\nif __name__ == '__main__':\n    l = [2, 3, 4, 5, 6, 7, 8, 9]\n    print find_max_sublist(l)",
      -8.8671875
    ],
    [
      "def max_len_sublist(list_of_numbers):\n    \"\"\"\n    Arguments:\n    list_of_numbers -- a list of numbers\n\n    Return:\n    the maximum length sublist\n    \"\"\"\n    # your code here\n    if not list_of_numbers:\n        return 0\n    max_len = 0\n    max_sublist = []\n    for i in range(len(list_of_numbers)):\n        sublist = list_of_numbers[i:len(list_of_numbers):1]\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return max_len, max_sublist\n\ndef test_max_len_sublist():\n    assert max_len_sublist([1,2,3]) == (1, [1, 2, 3])\n    assert max_len_sublist([1,2,3,4,5]) == (3, [1, 2, 3, 4, 5])\n    assert max_len_sublist([1,2,3,4,5,6]) == (4, [1, 2, 3, 4, 5])\n    assert max_len_sublist([1,2,3,4,5,6,7]) == (5, [1, 2, 3, 4, 5])\n    assert max_len_sublist([1,2,3,4,5,6,7,8]) == (6, [1, 2, 3, 4, 5])\n    assert max_len_sublist([1,2,3,4,5,6,7,8,9]) == (7, [1, 2, 3, 4, 5])\n    assert max_len_sublist([1,2,3,4,5,6,7,8,9,10]) == (8, [1, 2, 3, 4, 5])\n    assert max_len_sublist([1,2,3,4,5,6,7,8,9,10,11]) == (10, [1, 2, 3, 4, 5])\n    assert max_len_sublist([1,2",
      -8.90625
    ],
    [
      "# https://www.hackerrank.com/challenges/max-sublist-length/problem\n\n# I/O\n# read from input\n# print to output\n\n# logic\n# find the max length\n# find the max list\n# return the max list\n\n# time complexity\n# O(n)\n# space complexity\n# O(n)\n\n# sample test cases\n# n = 1\n# n = 2\n# n = 3\n# n = 4\n# n = 5\n# n = 6\n# n = 7\n# n = 8\n# n = 9\n# n = 10\n# n = 11\n# n = 12\n# n = 13\n# n = 14\n# n = 15\n# n = 16\n# n = 17\n# n = 18\n# n = 19\n# n = 20\n# n = 21\n# n = 22\n# n = 23\n# n = 24\n# n = 25\n# n = 26\n# n = 27\n# n = 28\n# n = 29\n# n = 30\n# n = 31\n# n = 32\n\ndef maxSubListLength(n):\n    # create a list of lists\n    sublist = [[1]]\n\n    # find the max length\n    maxLen = 0\n    for i in range(n):\n        # check if this is the first list\n        if i == 0:\n            # if it is, just append the list\n            sublist.append([1])\n            maxLen = 1\n        else:\n            # otherwise, check if this is the last list\n            if i == n - 1:\n                # if it is, append the list\n                sublist.append([1])\n                maxLen = max(maxLen, len(sublist))\n            else:\n                # otherwise, check if this is the first item\n                # in this list\n                if sublist[i][0] == 1:\n                    # if it is, append the list\n                    sublist.append([1])\n                    maxLen = max(maxLen, len(sublist))\n                else:\n                    # otherwise, check if this is the last item\n                    # in this list\n                    if sublist[i][-1] == 1:\n                        # if it is, append the",
      -9.5546875
    ],
    [
      "def find_max_length(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    max_length = 0\n    for i in range(0, len(arr)):\n        if arr[i] > arr[i + 1]:\n            max_length = max(max_length, i + 1)\n    return max_length\n\n# Your FindMaxSubLen solution here.\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 1, 2]\n    print(find_max_length(arr))\n    arr = [1, 2, 3, 1, 2, 3, 1, 2, 3]\n    print(find_max_length(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(find_max_length(arr))\n    arr = [1, 2, 3]\n    print(find_max_length(arr))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(find_max_length(arr))",
      -9.6875
    ],
    [
      "def find_max_length(arr):\n    \"\"\"\n    For the given array, find the sublist having the maximum length.\n\n    :param arr: A list of integers\n    :return: A list of integers, the first element of the list is the length of the sublist,\n             and the second element is the sublist\n    \"\"\"\n    max_length = 0\n    max_index = 0\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        elif arr[i] > arr[max_index]:\n            max_index = i\n            max_length = 1\n        else:\n            max_length = max(max_length, i - max_index)\n    return max_length, arr[max_index:]\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    max_length, sublist = find_max_length(arr)\n    print(max_length, sublist)",
      -10.2109375
    ],
    [
      "import sys\nimport time\nimport collections\n\nstart_time = time.time()\n\ndef max_length_sublist(list_):\n    \"\"\"\n    Find the maximum length sublist of list_\n    \"\"\"\n    if not list_:\n        return None\n    if len(list_) == 1:\n        return list_[0]\n    max_length = 0\n    max_length_sublist = []\n    for i in range(len(list_)):\n        if i == 0:\n            max_length_sublist.append(list_[i])\n            continue\n        if len(list_[i]) > len(max_length_sublist[max_length - 1]):\n            max_length_sublist.append(list_[i])\n    return max_length_sublist\n\ndef max_length_sublist_2(list_):\n    \"\"\"\n    Find the maximum length sublist of list_\n    \"\"\"\n    if not list_:\n        return None\n    if len(list_) == 1:\n        return list_[0]\n    max_length = 0\n    max_length_sublist = []\n    for i in range(len(list_)):\n        if i == 0:\n            max_length_sublist.append(list_[i])\n            continue\n        if len(list_[i]) > len(max_length_sublist[max_length - 1]):\n            max_length_sublist.append(list_[i])\n            max_length = len(list_[i])\n    return max_length_sublist\n\ndef max_length_sublist_3(list_):\n    \"\"\"\n    Find the maximum length sublist of list_\n    \"\"\"\n    if not list_:\n        return None\n    if len(list_) == 1:\n        return list_[0]\n    max_length = 0\n    max_length_sublist = []\n    for i in range(len(list_)):\n        if i == 0:\n            max_length_sublist.append(list_[i])\n            continue\n        if len(list_[i]) > max_length:\n            max_length_sublist.",
      -10.328125
    ],
    [
      "import collections\n\n\ndef find_max_sublist(a, b):\n    \"\"\"\n    Find the longest sublist of a.\n    :param a: List\n    :param b: List\n    :return: List of lists\n    \"\"\"\n    return max_sublist(a, b)\n\n\ndef max_sublist(a, b):\n    \"\"\"\n    Find the longest sublist of a.\n    :param a: List\n    :param b: List\n    :return: List of lists\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return []\n    if len(a) < len(b):\n        return max_sublist(b, a)\n    else:\n        return max_sublist(a, b)\n\n\ndef max_sublist_1(a, b):\n    \"\"\"\n    Find the longest sublist of a.\n    :param a: List\n    :param b: List\n    :return: List of lists\n    \"\"\"\n    return max_sublist_2(a, b)\n\n\ndef max_sublist_2(a, b):\n    \"\"\"\n    Find the longest sublist of a.\n    :param a: List\n    :param b: List\n    :return: List of lists\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return []\n    max_len = 0\n    max_len_sublist = []\n    for i in range(len(a)):\n        if len(a[i]) >= len(b[0]):\n            sublist = a[i][:len(b[0])]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n                max_len_sublist = sublist\n    return max_len_sublist\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6, 7]\n    b = [2, 3, 4, 5, 6]\n    print(max_sublist(a, b))\n    print(max_sublist_1(a, b))\n    print(max_sublist_2(a, b",
      -10.453125
    ],
    [
      "def find_max_sublist(list):\n    \"\"\"\n    Find the maximum sublist of list.\n    \"\"\"\n    max_length = 0\n    max_sublist = []\n    for item in list:\n        if len(max_sublist) == 0:\n            max_length = 1\n            max_sublist.append(item)\n        else:\n            for i in range(len(max_sublist)):\n                if item < max_sublist[i]:\n                    max_length = i + 1\n                    max_sublist = [item] + max_sublist[:i+1]\n                    break\n            if len(max_sublist) == 0:\n                max_length = len(list) + 1\n                max_sublist.append(item)\n    return max_sublist, max_length\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,",
      -11.046875
    ],
    [
      "def max_sublist_length(lst):\n    if not lst:\n        return 0\n    max_length = 0\n    max_length_idx = 0\n    for i, x in enumerate(lst):\n        if i == 0:\n            continue\n        if x < lst[i-1]:\n            max_length = 0\n            max_length_idx = 0\n            continue\n        if x > lst[i-1]:\n            continue\n        if x > lst[i-1] and x > lst[i]:\n            max_length = 0\n            max_length_idx = 0\n            continue\n        if x > lst[i-1] and x > lst[i]:\n            if max_length < 2:\n                max_length = 2\n                max_length_idx = i\n            elif max_length == 2:\n                max_length = max_length + 1\n                max_length_idx = i\n            else:\n                max_length = max_length + 1\n                max_length_idx = i\n        if x > lst[i-1] and x < lst[i]:\n            max_length = 0\n            max_length_idx = 0\n        if x > lst[i-1] and x < lst[i]:\n            if max_length < 3:\n                max_length = 3\n                max_length_idx = i\n            elif max_length == 3:\n                max_length = max_length + 1\n                max_length_idx = i\n            else:\n                max_length = max_length + 1\n                max_length_idx = i\n    return max_length, max_length_idx\n\nif __name__ == '__main__':\n    lst = [2, 3, 4, 5, 6, 7, 8, 9]\n    print(max_sublist_length(lst))",
      -11.1015625
    ],
    [
      "def max_sublist(data):\n    if not data:\n        return []\n    n = len(data)\n    l = [0] * n\n    for i in xrange(n):\n        l[i] = i\n    for i in xrange(1, n):\n        for j in xrange(i):\n            if data[j] > data[i]:\n                l[i] = max(l[i], j + 1)\n    return data[l[0]: l[-1] + 1]\n\ndef test_max_sublist():\n    assert max_sublist([1, 2, 3, 4, 5]) == [1, 2, 3]\n    assert max_sublist([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4]\n    assert max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4]\n\nif __name__ == \"__main__\":\n    test_max_sublist()",
      -12.6171875
    ],
    [
      "def find_max_length_sublist(l):\n    max_length = 0\n    max_sublist = []\n    for i in l:\n        max_length = max(max_length, len(i))\n        if max_length == len(i):\n            max_sublist.append(i)\n    return max_sublist\n\ndef find_max_length_sublist_2(l):\n    max_length = 0\n    max_sublist = []\n    for i in l:\n        max_length = max(max_length, len(i))\n        if max_length == len(i):\n            max_sublist.append(i)\n        else:\n            while len(max_sublist) > 0:\n                sublist = max_sublist[:max_length]\n                if len(sublist) == max_length:\n                    max_sublist = sublist\n                    max_length = 0\n                elif len(sublist) < max_length:\n                    max_length = len(sublist)\n                    max_sublist = sublist\n    return max_sublist\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print(find_max_length_sublist(l))\n    print(find_max_length_sublist_2(l))",
      -13.8046875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}