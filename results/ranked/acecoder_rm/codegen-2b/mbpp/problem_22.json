{
  "problem": {
    "task_id": "MBPP/33",
    "prompt": "Write a python function to convert a decimal number to binary number.",
    "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
    "test_list": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ],
    "challenge_test_list": [],
    "problem_id": 22
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def decimal_to_binary(dec):\n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    :param dec: decimal number\n    :return: binary number\n    \"\"\"\n    binary = \"\"\n    while dec > 0:\n        binary = str(dec % 2) + binary\n        dec = int(dec / 2)\n    return binary\n\n\ndef test():\n    assert decimal_to_binary(0) == '0'\n    assert decimal_to_binary(1) == '1'\n    assert decimal_to_binary(3) == '11'\n    assert decimal_to_binary(4) == '100'\n    assert decimal_to_binary(5) == '101'\n    assert decimal_to_binary(7) == '111'\n    assert decimal_to_binary(8) == '1000'\n    assert decimal_to_binary(9) == '1001'\n    assert decimal_to_binary(11) == '1011'\n    assert decimal_to_binary(12) == '1100'\n    assert decimal_to_binary(13) == '1101'\n    assert decimal_to_binary(14) == '1110'\n    assert decimal_to_binary(15) == '1111'\n    assert decimal_to_binary(16) == '10000'\n    assert decimal_to_binary(17) == '10001'\n    assert decimal_to_binary(18) == '10010'\n    assert decimal_to_binary(19) == '10011'\n    assert decimal_to_binary(20) == '10100'\n    assert decimal_to_binary(21) == '10101'\n    assert decimal_to_binary(22) == '10110'\n    assert decimal_to_binary(23) == '10111'\n    assert decimal_to_binary(24) == '11000'\n    assert decimal_to_binary(25) == '11001'\n    assert decimal_to_binary(26) == '11010'\n    assert decimal_to_binary(27) == '11011'\n    assert decimal_to_binary(28) == '11100'\n    assert decimal_to_binary(29) == '11101'",
      9.578125
    ],
    [
      "def decimalToBinary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = bin(decimal)\n    return binary[2:]\n\nprint(decimalToBinary(5))\n\ndef main():\n    print(decimalToBinary(5))\n    return\n\nif __name__ == '__main__':\n    main()",
      6.5546875
    ],
    [
      "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Input:\n        decimal_number: A decimal number.\n    Output:\n        binary_number: A binary number.\n    \"\"\"\n    return bin(decimal_number)\n\nprint(decimal_to_binary(3))\n#>>> '101'\nprint(decimal_to_binary(2))\n#>>> '010'\nprint(decimal_to_binary(0))\n#>>> '00'\nprint(decimal_to_binary(1))\n#>>> '01'\nprint(decimal_to_binary(3))\n#>>> '111'",
      4.69140625
    ],
    [
      "def to_binary(dec):\n    \"\"\"\n    >>> to_binary(0)\n    '0'\n    >>> to_binary(1)\n    '1'\n    >>> to_binary(2)\n    '10'\n    >>> to_binary(3)\n    '11'\n    >>> to_binary(4)\n    '100'\n    >>> to_binary(5)\n    '101'\n    >>> to_binary(6)\n    '110'\n    >>> to_binary(7)\n    '111'\n    >>> to_binary(8)\n    '1000'\n    >>> to_binary(9)\n    '1001'\n    >>> to_binary(10)\n    '1010'\n    >>> to_binary(11)\n    '1011'\n    >>> to_binary(12)\n    '1100'\n    >>> to_binary(13)\n    '1101'\n    >>> to_binary(14)\n    '1110'\n    >>> to_binary(15)\n    '1111'\n    >>> to_binary(16)\n    '10000'\n    >>> to_binary(17)\n    '10001'\n    >>> to_binary(18)\n    '10010'\n    >>> to_binary(19)\n    '10011'\n    >>> to_binary(20)\n    '10100'\n    >>> to_binary(21)\n    '10101'\n    >>> to_binary(22)\n    '10110'\n    >>> to_binary(23)\n    '10111'\n    >>> to_binary(24)\n    '11000'\n    >>> to_binary(25)\n    '11001'\n    >>> to_binary(26)\n    '11010'\n    >>> to_binary(27)\n    '11011'\n    >>> to_binary(28)\n    '11100'\n    >>> to_binary(29)\n    '11101'\n    >>> to_binary(30)\n    '11110'\n    >>> to_binary(31)\n    '11111'\n    >>> to_binary(32)\n    '100000'\n    >>> to_binary(33)\n    '100001'\n    >>> to",
      4.6328125
    ],
    [
      "import math\n\n\ndef to_binary(dec):\n    \"\"\"\n    Convert decimal to binary.\n\n    :param dec:\n    :return:\n    \"\"\"\n    result = \"\"\n    while dec > 0:\n        result = str(dec % 2) + result\n        dec = int(math.floor(dec / 2))\n    return result\n\n\nif __name__ == \"__main__\":\n    print(to_binary(3))",
      4.34375
    ],
    [
      "def convert_decimal_to_binary(decimal_num):\n    \"\"\"\n    Decimal number to binary number\n\n    :type decimal_num: int\n    :rtype: str\n    \"\"\"\n    binary_num = \"\"\n    while decimal_num > 0:\n        binary_num = str(decimal_num % 2) + binary_num\n        decimal_num = decimal_num // 2\n    return binary_num\n\nif __name__ == \"__main__\":\n    print convert_decimal_to_binary(5)\n    print convert_decimal_to_binary(5)\n    print convert_decimal_to_binary(5)\n    print convert_decimal_to_binary(5)\n    print convert_decimal_to_binary(5)\n    print convert_decimal_to_binary(5)\n    print convert_decimal_to_binary(5)\n    print convert_decimal_to_binary(5)",
      4.13671875
    ],
    [
      "def toBinary(decimal):\n    binary = \"\"\n    #print \"decimal: %s\" % decimal\n    while decimal!= 0:\n        if decimal % 2 == 1:\n            binary = \"1\" + binary\n        decimal = decimal / 2\n        #print \"binary: %s\" % binary\n    return binary\n\n\nif __name__ == \"__main__\":\n    print toBinary(1)\n    print toBinary(2)\n    print toBinary(3)\n    print toBinary(4)\n    print toBinary(5)\n    print toBinary(6)\n    print toBinary(7)\n    print toBinary(8)\n    print toBinary(9)\n    print toBinary(10)\n    print toBinary(11)\n    print toBinary(12)\n    print toBinary(13)\n    print toBinary(14)\n    print toBinary(15)\n    print toBinary(16)\n    print toBinary(17)\n    print toBinary(18)\n    print toBinary(19)\n    print toBinary(20)\n    print toBinary(21)\n    print toBinary(22)\n    print toBinary(23)\n    print toBinary(24)\n    print toBinary(25)\n    print toBinary(26)\n    print toBinary(27)\n    print toBinary(28)\n    print toBinary(29)\n    print toBinary(30)\n    print toBinary(31)\n    print toBinary(32)\n    print toBinary(33)\n    print toBinary(34)\n    print toBinary(35)\n    print toBinary(36)\n    print toBinary(37)\n    print toBinary(38)\n    print toBinary(39)\n    print toBinary(40)\n    print toBinary(41)\n    print toBinary(42)\n    print toBinary(43)\n    print toBinary(44)\n    print toBinary(45)\n    print toBinary(46)\n    print toBinary(47)",
      3.36328125
    ],
    [
      "def decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = bin(decimal)\n    binary = binary[2:]\n    return binary\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    decimal_to_binary(12)\n    decimal_to_binary(123)\n    decimal_to_binary(1234)\n    decimal_to_binary(12345)\n    decimal_to_binary(123456)\n    decimal_to_binary(1234567)\n    decimal_to_binary(12345678)\n    decimal_to_binary(123456789)\n    decimal_to_binary(1234567890)\n    decimal_to_binary(12345678901)\n    decimal_to_binary(123456789012)\n    decimal_to_binary(1234567890123)\n    decimal_to_binary(12345678901234)\n    decimal_to_binary(123456789012345)\n    decimal_to_binary(1234567890123456)\n    decimal_to_binary(12345678901234567)\n    decimal_to_binary(123456789012345678)\n    decimal_to_binary(1234567890123456789)\n\n\nif __name__ == '__main__':\n    main()",
      3.068359375
    ],
    [
      "def convert_to_binary(number):\n    \"\"\"\n    :type number: int\n    :rtype: str\n    \"\"\"\n    binary = bin(number)\n    return binary[2:]\n\nif __name__ == '__main__':\n    print convert_to_binary(7)\n    print convert_to_binary(9)\n    print convert_to_binary(0)\n    print convert_to_binary(1)\n    print convert_to_binary(2)\n    print convert_to_binary(3)\n    print convert_to_binary(4)\n    print convert_to_binary(5)\n    print convert_to_binary(6)\n    print convert_to_binary(7)\n    print convert_to_binary(8)\n    print convert_to_binary(9)\n    print convert_to_binary(10)\n    print convert_to_binary(11)\n    print convert_to_binary(12)\n    print convert_to_binary(13)\n    print convert_to_binary(14)\n    print convert_to_binary(15)\n    print convert_to_binary(16)\n    print convert_to_binary(17)\n    print convert_to_binary(18)\n    print convert_to_binary(19)\n    print convert_to_binary(20)\n    print convert_to_binary(21)\n    print convert_to_binary(22)\n    print convert_to_binary(23)\n    print convert_to_binary(24)\n    print convert_to_binary(25)\n    print convert_to_binary(26)\n    print convert_to_binary(27)\n    print convert_to_binary(28)\n    print convert_to_binary(29)\n    print convert_to_binary(30)\n    print convert_to_binary(31)\n    print convert_to_binary(32)\n    print convert_to_binary(33)\n    print convert_to_binary(34)\n    print convert_to_binary(35)\n    print convert_to_binary(36)\n    print convert_to_binary(37)\n    print convert_to_binary(38)\n    print convert",
      2.775390625
    ],
    [
      "import math\n\ndef convert_decimal_to_binary(decimal_number):\n    \"\"\"\n    :type decimal_number: int\n    :rtype: str\n    \"\"\"\n    if decimal_number == 0:\n        return '0'\n    \n    binary_number = ''\n    while decimal_number > 0:\n        binary_number += str(decimal_number % 2)\n        decimal_number = decimal_number // 2\n    return binary_number\n\nif __name__ == '__main__':\n    print convert_decimal_to_binary(0)\n    print convert_decimal_to_binary(1)\n    print convert_decimal_to_binary(2)\n    print convert_decimal_to_binary(3)\n    print convert_decimal_to_binary(4)\n    print convert_decimal_to_binary(5)\n    print convert_decimal_to_binary(6)\n    print convert_decimal_to_binary(7)\n    print convert_decimal_to_binary(8)\n    print convert_decimal_to_binary(9)\n    print convert_decimal_to_binary(10)\n    print convert_decimal_to_binary(20)\n    print convert_decimal_to_binary(100)\n    print convert_decimal_to_binary(1000)",
      2.328125
    ],
    [
      "def dec2bin(dec):\n    \"\"\"\n    Convert a decimal number to binary number.\n\n    Input:\n    dec -- decimal number\n\n    Output:\n    bin -- binary number\n    \"\"\"\n    bin = \"\"\n    while dec > 0:\n        bin = str(dec % 2) + bin\n        dec = dec // 2\n\n    return bin\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    num = input(\"Enter a number to convert: \")\n    bin = dec2bin(num)\n    print(bin)\n\nif __name__ == '__main__':\n    main()",
      1.8505859375
    ],
    [
      "def to_bin(dec):\n    \"\"\"Convert decimal number to binary number.\n\n    Args:\n        dec: the decimal number.\n\n    Returns:\n        The binary number.\n    \"\"\"\n    bin = \"\"\n    while dec > 0:\n        bin = str(dec % 2) + bin\n        dec = dec >> 1\n    return bin\n\n\ndef main():\n    dec = int(input(\"Input decimal number: \"))\n    bin = to_bin(dec)\n    print(bin)\n\n\nif __name__ == '__main__':\n    main()",
      1.302734375
    ],
    [
      "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to binary number.\n    :param decimal:\n    :return:\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    return binary\n\ndef test():\n    assert decimal_to_binary(1) == \"1\"\n    assert decimal_to_binary(2) == \"10\"\n    assert decimal_to_binary(3) == \"11\"\n    assert decimal_to_binary(4) == \"100\"\n    assert decimal_to_binary(5) == \"101\"\n    assert decimal_to_binary(6) == \"110\"\n    assert decimal_to_binary(7) == \"111\"\n    assert decimal_to_binary(8) == \"1000\"\n    assert decimal_to_binary(9) == \"1001\"\n    assert decimal_to_binary(10) == \"1010\"\n    assert decimal_to_binary(11) == \"1011\"\n    assert decimal_to_binary(12) == \"1100\"\n    assert decimal_to_binary(13) == \"1101\"\n    assert decimal_to_binary(14) == \"1110\"\n    assert decimal_to_binary(15) == \"1111\"\n    assert decimal_to_binary(16) == \"10000\"\n    assert decimal_to_binary(17) == \"10001\"\n    assert decimal_to_binary(18) == \"10010\"\n    assert decimal_to_binary(19) == \"10011\"\n    assert decimal_to_binary(20) == \"10100\"\n    assert decimal_to_binary(21) == \"10101\"\n    assert decimal_to_binary(22) == \"10110\"\n    assert decimal_to_binary(23) == \"10111\"\n    assert decimal_to_binary(24) == \"11000\"\n    assert decimal_to_binary(25) == \"11001\"\n    assert decimal_to_binary(26) == \"11010\"\n    assert decimal_to_binary(27) == \"11011\"\n    assert decimal_to_binary(28) == \"",
      1.146484375
    ],
    [
      "def binary(n):\n    \"\"\"\n    :type n: int\n    :rtype: str\n    \"\"\"\n    # binary string\n    s = \"\"\n    # number of digits\n    d = 0\n\n    # the number of digits\n    while n > 0:\n        # get the digit\n        d = n % 2\n        # print the digit\n        s = str(d) + s\n        # get the next digit\n        n = n / 2\n\n    return s\n\n\ndef main():\n    # test cases\n    print binary(1)\n    print binary(2)\n    print binary(3)\n    print binary(4)\n    print binary(5)\n    print binary(6)\n    print binary(7)\n    print binary(8)\n    print binary(9)\n    print binary(10)\n    print binary(15)\n    print binary(16)\n    print binary(17)\n    print binary(20)\n    print binary(21)\n    print binary(25)\n    print binary(26)\n    print binary(27)\n    print binary(30)\n    print binary(31)\n    print binary(32)\n    print binary(36)\n    print binary(37)\n    print binary(38)\n    print binary(42)\n    print binary(43)\n    print binary(44)\n    print binary(46)\n    print binary(47)\n    print binary(48)\n    print binary(54)\n    print binary(55)\n    print binary(56)\n    print binary(60)\n    print binary(61)\n    print binary(62)\n    print binary(63)\n    print binary(64)\n    print binary(70)\n    print binary(71)\n    print binary(72)\n    print binary(75)\n    print binary(76)\n    print binary(77)\n    print binary(80)\n    print binary(81)\n    print binary(82)\n    print binary(86)\n    print binary(87)\n    print binary(88)\n    print binary(92)\n    print binary(93)\n    print binary(94)\n    print binary(96)\n    print binary(97)\n    print binary(98)",
      0.93017578125
    ],
    [
      "# The decimal number is written as a string\n# The binary number is written as a string\n# The function should return the binary number as a string\n\ndef convert_decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    return binary\n\nif __name__ == \"__main__\":\n    print(convert_decimal_to_binary(9))\n    print(convert_decimal_to_binary(123))",
      -0.0654296875
    ],
    [
      "def decimal_to_bin(decimal_number):\n    \"\"\"\n    Given a decimal number, return its binary representation.\n    \"\"\"\n    bin_str = \"\"\n    while decimal_number > 0:\n        bin_str = str(decimal_number % 2) + bin_str\n        decimal_number = decimal_number / 2\n    return bin_str\n\n\ndef main():\n    \"\"\"\n    Write a function to convert a decimal number to binary number.\n    \"\"\"\n    # Complete the function below.\n    decimal_number = 0\n    binary_number = decimal_to_bin(decimal_number)\n    print(binary_number)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.119140625
    ],
    [
      "def decimal_to_bin(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    \n    if decimal == 0:\n        return '0'\n    \n    # Use a while loop to generate the binary number\n    binary = '0b'\n    while decimal!= 0:\n        binary = '0b' + binary + str(decimal % 2)\n        decimal = decimal / 2\n    \n    return binary\n\n\ndef main():\n    \n    decimal = int(input())\n    print(decimal_to_bin(decimal))\n    \nif __name__ == '__main__':\n    main()",
      -0.1968994140625
    ],
    [
      "# TODO:\n# * Optimize the code\n# * Add a test case\n# * Add a test case\n\ndef decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = '1'\n    while decimal > 0:\n        binary = '{}{}'.format(binary, str(decimal % 2))\n        decimal = decimal // 2\n    return binary\n\nif __name__ == '__main__':\n    print(decimal_to_binary(10))",
      -0.51171875
    ],
    [
      "# Hint: Use \"int\" to represent integer, \"long\" to represent long.\n# The \"decimal\" module is provided by the \"decimal\" library.\n\n# Convert a decimal number to binary number\ndef to_binary(decimal_number):\n    binary = ''\n    while decimal_number > 0:\n        binary = str(decimal_number % 2) + binary\n        decimal_number = decimal_number // 2\n    return binary\n\n\nif __name__ == '__main__':\n    # Input\n    decimal_number = int(raw_input('Please input a decimal number: '))\n\n    # Output\n    binary_number = to_binary(decimal_number)\n    print 'The binary number is: %s' % binary_number",
      -0.517578125
    ],
    [
      "import unittest\n\n\ndef binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    result = []\n    while decimal:\n        decimal, digit = divmod(decimal, 2)\n        result.append(digit)\n    result.reverse()\n    return ''.join(result)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(binary(10), '1010')\n\n    def test_2(self):\n        self.assertEqual(binary(16), '1011')\n\n    def test_3(self):\n        self.assertEqual(binary(7), '111')\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.5849609375
    ],
    [
      "def decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    decimal_number = int(input(\"Enter a number to convert to binary number: \"))\n    binary_number = decimal_to_binary(decimal_number)\n    print(decimal_number, '->', binary_number)\n\nif __name__ == '__main__':\n    main()",
      -0.76220703125
    ],
    [
      "def to_binary(dec):\n    \"\"\"\n    Convert a decimal number to binary number.\n\n    :param dec: The number to be converted.\n    :return: The binary number.\n    \"\"\"\n    return bin(dec)\n\nprint to_binary(dec)\n\n\"\"\"\nTest cases:\n\n>>> to_binary(dec)\n'1011101'\n>>> to_binary(dec)\n'1111111'\n\"\"\"",
      -0.85693359375
    ],
    [
      "import math\n\ndef dec2bin(dec):\n    \"\"\"\n    Convert decimal number to binary number.\n\n    :param dec: decimal number.\n    :return: binary number.\n    \"\"\"\n    return bin(int(dec))[2:]\n\ndef main():\n    print(dec2bin(123))\n    print(dec2bin(12345))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def toBinary(decimal):\n    \"\"\"\n    Convert decimal number to binary number.\n\n    Input:\n        decimal: decimal number\n\n    Output:\n        binary: binary number\n\n    Example:\n        >>> toBinary(15)\n        '11101'\n    \"\"\"\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal /= 2\n    return ''.join(map(str, binary))\n\ndef main():\n    \"\"\"\n    Main.\n    \"\"\"\n    decimal = int(input('Please enter a decimal number: '))\n    binary = toBinary(decimal)\n    print('The binary number is: {}'.format(binary))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def binary_number(dec):\n    bin = \"\"\n    for i in range(dec):\n        bin += str(dec % 2)\n        dec = int(dec / 2)\n\n    return bin\n\nprint binary_number(3)",
      -0.85693359375
    ],
    [
      "#!/usr/bin/python\n\ndef convert_decimal_to_binary(decimal):\n    binary = \"0b\"\n    while decimal > 0:\n        binary = str(binary + \"1\")\n        decimal = decimal - 1\n    return binary\n\nif __name__ == \"__main__\":\n    decimal = int(input(\"Enter a decimal number: \"))\n    binary = convert_decimal_to_binary(decimal)\n    print(binary)",
      -0.85693359375
    ],
    [
      "def decimal_to_bin(dec):\n    \"\"\"\n    Convert decimal number to binary number.\n\n    :param dec: The decimal number to be converted.\n    :type dec: int\n    :return: The binary number as a string.\n    :rtype: str\n    \"\"\"\n    return bin(dec)[2:]\n\n\nif __name__ == '__main__':\n    print decimal_to_bin(9)",
      -0.85693359375
    ],
    [
      "def decimal_to_binary(dec):\n    \"\"\"\n    Convert decimal number to binary.\n    :param dec: A decimal number.\n    :return: A binary number.\n    \"\"\"\n    return bin(dec)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    num = int(input())\n    print(decimal_to_binary(num))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "#!/usr/bin/env python\n\ndef decimal_to_binary(decimal):\n    \"\"\"\n    Decimal to binary.\n    \"\"\"\n    binary_number = ''\n    while decimal > 0:\n        binary_number = str(decimal % 2) + binary_number\n        decimal = decimal / 2\n    return binary_number\n\ndef main():\n    \"\"\"\n    Main.\n    \"\"\"\n    print decimal_to_binary(15)\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def convertToBinary(decimal):\n    \"\"\"\n    Convert a decimal number to binary number.\n    :param decimal: The decimal number.\n    :return: The binary number.\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n# Test cases\nprint(convertToBinary(3))\nprint(convertToBinary(6))\nprint(convertToBinary(8))\nprint(convertToBinary(10))\nprint(convertToBinary(11))\nprint(convertToBinary(101))\nprint(convertToBinary(100))\nprint(convertToBinary(1011))\nprint(convertToBinary(1010))\nprint(convertToBinary(1020))\nprint(convertToBinary(10))\nprint(convertToBinary(1000))\nprint(convertToBinary(1234))\nprint(convertToBinary(1234.5))\nprint(convertToBinary(1234.56789))",
      -0.85791015625
    ],
    [
      "def toBinary(decimal):\n    \"\"\"\n    :param decimal: decimal number\n    :return: binary number\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\nif __name__ == \"__main__\":\n    decimal = int(input())\n    binary = toBinary(decimal)\n    print(binary)",
      -0.85791015625
    ],
    [
      "def binary_number(decimal_number):\n    \"\"\"\n    :type decimal_number: int\n    :rtype: str\n    \"\"\"\n    binary_number = ''\n\n    for i in range(0, len(decimal_number)):\n        binary_number = str(decimal_number >> i) + binary_number\n\n    return binary_number\n\nif __name__ == '__main__':\n    decimal_number = int(input())\n    binary_number = binary_number(decimal_number)\n    print(binary_number)",
      -0.85791015625
    ],
    [
      "def bin(x):\n    \"\"\"\n    Convert decimal number to binary number\n    :param x: decimal number\n    :return: binary number\n    \"\"\"\n    return bin_str(x, 10)\n\n\ndef bin_str(x, base=2):\n    \"\"\"\n    Convert decimal number to binary number\n    :param x: decimal number\n    :param base: base of binary number\n    :return: binary number\n    \"\"\"\n    assert base >= 2\n    if x < 0:\n        return '-' + bin_str(-x, base)\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        x, r = divmod(x, base)\n        result = str(r) + result\n    return result\n\n\nif __name__ == '__main__':\n    print(bin(3))\n    print(bin(4))\n    print(bin(15))\n    print(bin(0))\n    print(bin(8))\n    print(bin(12))\n    print(bin(9))\n    print(bin(3.3))",
      -0.85791015625
    ],
    [
      "def decimal_to_bin(decimal):\n    \"\"\"\n    Converts decimal number to binary number.\n    Input: decimal number\n    Output: binary number\n    \"\"\"\n    bin_num = 0\n    while decimal > 0:\n        bin_num = bin_num * 2 + decimal % 2\n        decimal = decimal // 2\n    return bin_num\n\n# Test cases\nassert decimal_to_bin(1) == \"1\"\nassert decimal_to_bin(3) == \"11\"\nassert decimal_to_bin(12) == \"1100\"\nassert decimal_to_bin(123) == \"1110001\"",
      -0.85791015625
    ],
    [
      "def convert_decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.insert(0, decimal % 2)\n        decimal /= 2\n    return binary\n\ndef main():\n    test_case = int(input())\n    for t in range(test_case):\n        decimal = int(input())\n        binary = convert_decimal_to_binary(decimal)\n        print(' '.join(map(str, binary)))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def convert_decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to binary number.\n    \n    :param decimal_number:\n    :return:\n    \"\"\"\n    binary_number = 0\n    while decimal_number > 0:\n        decimal_number = decimal_number - 1\n        binary_number = binary_number * 2\n    return binary_number\n\nif __name__ == '__main__':\n    print(convert_decimal_to_binary(9))",
      -0.85791015625
    ],
    [
      "def decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = bin(decimal)\n    return binary.lstrip('0b')",
      -0.85791015625
    ],
    [
      "#!/usr/bin/python\n\ndef convert(decimal):\n\tbinary = \"\"\n\twhile decimal > 0:\n\t\tbinary = str(decimal % 2) + binary\n\t\tdecimal = decimal / 2\n\treturn binary\n\nif __name__ == \"__main__\":\n\tprint convert(12)",
      -0.85791015625
    ],
    [
      "def decimal_to_binary(decimal_number):\n    \"\"\"\n    :type decimal_number: int\n    :rtype: str\n    \"\"\"\n    binary_string = \"\"\n    binary_number = 0\n\n    while decimal_number!= 0:\n        binary_number = decimal_number % 2\n        decimal_number = decimal_number // 2\n        binary_string += str(binary_number)\n\n    return binary_string\n\nif __name__ == '__main__':\n    print(decimal_to_binary(12))",
      -0.85791015625
    ],
    [
      "from decimal import Decimal\n\ndef convert_decimal_to_binary(decimal_number):\n    \"\"\"\n    :type decimal_number: int\n    :rtype: str\n    \"\"\"\n    binary_number = \"\"\n    for i in range(len(str(decimal_number))):\n        binary_number += str(decimal_number % 2)\n        decimal_number = decimal_number // 2\n    return binary_number\n\nif __name__ == '__main__':\n    decimal_number = Decimal(3)\n    print convert_decimal_to_binary(decimal_number)",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-binary/problem\n\n# Binary number\n# ------------\n# The binary number is a number in base 2, where the number of bits in the number\n# is equal to the number of digits in the number. For example, the binary number\n# for 3 is 101 and the number of bits is 3.\n\n# Decimal number\n# -------------\n# The decimal number is a number in base 10, where the number of digits in the\n# number is equal to the number of digits in the number. For example, the decimal\n# number for 3 is 3 and the number of digits is 3.\n\n# Write a function that takes a decimal number as input and converts it to binary\n# number.\n\n# Input Format\n# ------------\n# The first line of the input contains a single integer, N, denoting the number\n# of digits in the decimal number. The next N lines contain N space-separated\n# integers denoting the decimal number.\n\n# Output Format\n# ------------\n# For each line of input, output the binary number.\n\n\ndef decimal_to_binary(decimal):\n    binary = []\n    for digit in decimal:\n        binary.append(bin(digit)[2:])\n    return ''.join(binary)\n\n\ndef decimal_to_binary_recursive(decimal):\n    binary = []\n    if len(decimal) == 0:\n        return binary\n    if len(decimal) == 1:\n        return [bin(decimal[0])[2:]]\n    binary_1 = decimal_to_binary_recursive(decimal[:-1])\n    binary_2 = decimal_to_binary_recursive(decimal[1:])\n    for i in range(len(binary_1)):\n        binary.append(binary_1[i] + binary_2[i])\n    return binary\n\nif __name__ == '__main__':\n    decimal = input().split()\n    binary = decimal_to_binary(decimal[0])\n    binary = decimal_to_binary_recursive(decimal[0])\n    print(' '.join(binary))",
      -0.8583984375
    ],
    [
      "# https://www.codewars.com/kata/convert-decimal-to-binary-number/train/python\n\ndef binary_number(decimal):\n    \"\"\"\n    :param decimal: Integer\n    :return: Integer\n    \"\"\"\n\n    binary_number = 0\n    for i in range(1, decimal + 1):\n        binary_number = binary_number | (decimal % 2) << (i - 1)\n\n    return binary_number\n\n\nif __name__ == '__main__':\n    print(binary_number(5))\n    print(binary_number(10))\n    print(binary_number(100))\n    print(binary_number(1000))\n    print(binary_number(10000))",
      -0.8583984375
    ],
    [
      "def toBinary(dec):\n    \"\"\"\n    dec: A decimal number\n    returns: A binary number\n    \"\"\"\n    b = 0\n    while dec > 0:\n        b = b << 1\n        dec = dec - 1\n    return b\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print toBinary(10)\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def toBinary(num):\n    \"\"\"\n    Write a function to convert a decimal number to binary number.\n    Input: a number.\n    Output: a binary number.\n    \"\"\"\n    return bin(num)\n\nif __name__ == '__main__':\n    print toBinary(15)",
      -0.8583984375
    ],
    [
      "from __future__ import print_function\n\ndef convert(decimal):\n    binary_list = [0] * 32\n\n    # Convert decimal number to binary number\n    while decimal > 0:\n        binary_list[decimal % 2] = decimal % 2\n        decimal = decimal >> 1\n\n    # Convert binary number to string\n    for i in range(len(binary_list)):\n        print(binary_list[i], end=\" \")\n    print()\n\nconvert(3)",
      -0.8583984375
    ],
    [
      "def to_binary(n):\n    \"\"\"\n    Convert decimal number to binary number.\n    \n    :param n: decimal number\n    :return: binary number\n    \"\"\"\n    \n    binary_num = \"\"\n    \n    while n:\n        binary_num += '1' if n % 2 else '0'\n        n = n >> 1\n    \n    return binary_num\n\nif __name__ == '__main__':\n    print to_binary(100)\n    print to_binary(5)",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef convert(num):\n    \"\"\"\n    convert(num) -> binary number\n    \"\"\"\n    result = 0\n    while num > 0:\n        result = result << 1\n        num = num - 1\n        if num % 2 == 1:\n            result = result + 1\n    return result\n\n\ndef main():\n    \"\"\"\n    main() -> None\n    \"\"\"\n    print(convert(3))\n    print(convert(9))\n    print(convert(10))\n    print(convert(20))\n    print(convert(100))\n    print(convert(1000))\n    print(convert(1000000))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def to_binary(num):\n    \"\"\"\n    Convert a decimal number to binary number.\n\n    :param num: decimal number\n    :return: binary number\n    \"\"\"\n    return bin(num)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    num = int(input(\"Enter a number: \"))\n    print(\"Decimal to binary is: \", to_binary(num))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def to_bin(number):\n    \"\"\"\n    >>> to_bin(2)\n    '100'\n    >>> to_bin(0)\n    '0'\n    >>> to_bin(12)\n    '1100'\n    \"\"\"\n    bin_num = '0'\n    for i in range(len(bin_num)):\n        bin_num = str(bin_num)\n        bin_num = bin_num + str(bin(number)[2:])\n    return bin_num\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def dec2bin(dec):\n    \"\"\"\n    dec2bin(dec) -> bin\n\n    Return the binary representation of dec.\n    \"\"\"\n    bin = []\n    for i in range(0, len(dec)):\n        bin.append(bin[i] + str(dec[i]))\n\n    return bin\n\ndef bin2dec(bin):\n    \"\"\"\n    bin2dec(bin) -> dec\n\n    Return the decimal representation of bin.\n    \"\"\"\n    dec = []\n    for i in range(0, len(bin)):\n        dec.append(int(bin[i]))\n\n    return dec\n\ndef main():\n    print(bin2dec(dec2bin(12345)))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def to_bin(num):\n    \"\"\"\n    Converts decimal number to binary number.\n    :param num: decimal number\n    :return: binary number\n    \"\"\"\n    num = str(num)\n    num_len = len(num)\n    bin_num = []\n    for i in range(num_len):\n        if num[i] == '1':\n            bin_num.append('1')\n        else:\n            bin_num.append('0')\n    return bin_num\n\ndef to_dec(bin_num):\n    \"\"\"\n    Converts binary number to decimal number.\n    :param bin_num: binary number\n    :return: decimal number\n    \"\"\"\n    bin_num_len = len(bin_num)\n    bin_num_str = ''\n    for i in range(bin_num_len):\n        if bin_num[i] == '1':\n            bin_num_str += '1'\n        else:\n            bin_num_str += '0'\n    return int(bin_num_str, 2)\n\nif __name__ == '__main__':\n    assert to_dec(to_bin(10)) == 10\n    assert to_dec(to_bin('1011')) == 11",
      -0.8583984375
    ],
    [
      "def to_bin(num):\n    \"\"\"\n    Convert a decimal number to binary number.\n    >>> to_bin(10)\n    '1010'\n    >>> to_bin(0)\n    '0'\n    >>> to_bin(-10)\n    '-1010'\n    \"\"\"\n    if num == 0:\n        return '0'\n    elif num < 0:\n        return '-' + to_bin(-num)\n    else:\n        return bin(num)[2:]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def bin_to_dec(x):\n    \"\"\"\n    :type x: int\n    :rtype: str\n    \"\"\"\n    return ''.join(['1' if i == '1' else '0' for i in bin(x)[2:]])\n\ndef main():\n    print(bin_to_dec(1234))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import sys\n\ndef dec2bin(dec):\n    \"\"\"\n    Convert decimal number to binary number.\n\n    Input:\n        dec: A decimal number.\n\n    Output:\n        A binary number.\n    \"\"\"\n    bin = \"\"\n    while dec > 0:\n        bin = str(dec % 2) + bin\n        dec = dec / 2\n    return bin\n\nif __name__ == '__main__':\n    print dec2bin(sys.argv[1])",
      -0.8583984375
    ],
    [
      "def convert(dec):\n    \"\"\"\n    Convert the decimal number dec to binary number.\n    :param dec: The decimal number to convert.\n    :return: The binary number.\n    \"\"\"\n    bin = \"\"\n    while dec > 0:\n        bin = str(dec % 2) + bin\n        dec = int(dec / 2)\n    return bin\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print convert(2)\n    print convert(3)\n    print convert(5)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    return binary\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(100))\n    print(decimal_to_binary(1000))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def decToBin(dec):\n    \"\"\"\n    Convert a decimal number to binary number.\n    dec: A decimal number.\n    \"\"\"\n    bin_str = '0'\n    for i in range(0,len(dec)):\n        bin_str += str(dec[i])\n    return bin_str\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print decToBin(5)\n    print decToBin(2)\n    print decToBin(2.5)\n    print decToBin(3.5)\n    print decToBin(7)\n    print decToBin(11)\n    print decToBin(15)\n    print decToBin(100)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def decimalToBinary(decimal):\n    \"\"\"\n    decimal: a decimal number\n    \n    Returns a binary number.\n    \"\"\"\n    binary = []\n    binary_num = 0\n    while decimal > 0:\n        binary_num = decimal % 2\n        binary.append(binary_num)\n        decimal = decimal / 2\n    return binary\n\n# Test Cases\nprint decimalToBinary(6)\nprint decimalToBinary(12)\nprint decimalToBinary(20)",
      -0.8583984375
    ],
    [
      "def to_binary(decimal):\n    \"\"\"\n    Write a function to convert a decimal number to binary number.\n\n    The function should return a string.\n    \"\"\"\n\n    # convert decimal to binary\n    binary = bin(decimal)\n\n    # remove leading zeros\n    binary = binary.lstrip('0b')\n\n    # remove trailing zeros\n    binary = binary.rstrip('0b')\n\n    return binary\n\nif __name__ == '__main__':\n    print(to_binary(100))\n    print(to_binary(1024))\n    print(to_binary(3))",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-binary-string/problem\n\n# Complete the decimalToBinary function below.\ndef decimalToBinary(dec):\n    # Convert dec to binary\n    # Decimal to binary conversion\n    # https://www.hackerrank.com/challenges/decimal-to-binary-string/problem\n    # Convert the decimal number to binary string\n    # https://www.hackerrank.com/challenges/decimal-to-binary-string/submissions/code/22371494\n\n    binary = []\n\n    while dec > 0:\n        # Convert to binary\n        if dec % 2 == 1:\n            binary.append('1')\n        else:\n            binary.append('0')\n        dec = dec - 1\n\n    return ''.join(binary)\n\nif __name__ == '__main__':\n    dec = int(input())\n\n    print(decimalToBinary(dec))",
      -0.8583984375
    ],
    [
      "def dec2bin(dec):\n    \"\"\"\n    Convert decimal number to binary number.\n    \n    dec: A decimal number.\n    \n    return: A binary number.\n    \"\"\"\n    \n    bin = bin(dec)\n    \n    # Remove the leading zeros\n    bin = bin.lstrip('0')\n    \n    # Remove the trailing zeros\n    bin = bin.rstrip('0')\n    \n    return bin\n\nif __name__ == '__main__':\n    dec = 100\n    \n    print dec2bin(dec)",
      -0.85888671875
    ],
    [
      "def to_binary(decimal_num):\n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    :param decimal_num:\n    :return:\n    \"\"\"\n    binary_num = \"\"\n    while decimal_num > 0:\n        binary_num = str(decimal_num % 2) + binary_num\n        decimal_num = decimal_num // 2\n    return binary_num\n\n\ndef main():\n    \"\"\"\n    Write a main function to test your function.\n    :return:\n    \"\"\"\n    print(to_binary(9))\n    print(to_binary(3))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def convert_decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    if binary.endswith('0'):\n        binary = binary[:-1]\n    return binary\n\ndef main():\n    print(convert_decimal_to_binary(1234))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "import math\n\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    binary_string = str(decimal)\n    for i in range(len(binary_string)):\n        binary += str(math.floor(binary_string[i]/2))\n    return binary\n\nprint(decimal_to_binary(123))",
      -0.85888671875
    ],
    [
      "#!/usr/bin/env python\n\n# This is a solution to the problem on leetcode\n# Given a number n, return the binary representation of n, without using any extra space.\n\n# Example 1:\n# Input: 3\n# Output: \"101\"\n# Example 2:\n# Input: -5\n# Output: \"11111111\"\n# Note:\n# The input number is guaranteed to fit within the range of a 32-bit signed integer.\n# You could assume no leading \"0\" on the input number.\n# If the input number is negative, then the binary representation of its absolute value is used.\n\nclass Solution(object):\n    def toBinary(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        num = abs(num)\n        result = []\n        while num > 0:\n            result.append(num % 2)\n            num = num // 2\n        result.reverse()\n        return \"\".join(str(x) for x in result)\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.toBinary(-5)\n    print solution.toBinary(3)",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/decimal-to-binary-number/problem\n\n# Complete the function below.\ndef decimal_to_binary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    if decimal < 0:\n        raise Exception(\"Decimal number must be non-negative\")\n    binary = \"0\"\n    while decimal > 0:\n        if decimal % 2 == 1:\n            binary = \"1\" + binary\n        decimal = decimal - 1\n        binary = binary + \"0\"\n    return binary\n\nif __name__ == '__main__':\n    decimal = int(input())\n    binary = decimal_to_binary(decimal)\n    print(binary)",
      -0.85888671875
    ],
    [
      "import os\nimport sys\nimport re\n\n# Complete the function below.\ndef binary_num(dec):\n    \"\"\"\n    :type dec: int\n    :rtype: str\n    \"\"\"\n    binary_num = bin(dec)\n    binary_num = binary_num[2:]\n    binary_num = binary_num.zfill(10)\n    return binary_num\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    dec_list = map(int, sys.stdin.read().split())\n\n    result = binary_num(dec_list[0])\n\n    fptr.write(result)\n\n    fptr.close()",
      -0.85888671875
    ],
    [
      "def bin(x):\n    \"\"\"\n    Convert a decimal number to binary number.\n    \"\"\"\n    b = \"\"\n    while x > 0:\n        b = str(x % 2) + b\n        x = int(x / 2)\n    return b\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    while True:\n        try:\n            num = int(input(\"Please enter a number: \"))\n            print(bin(num))\n        except ValueError:\n            print(\"Please enter a number.\")\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def binary_to_decimal(binary):\n    \"\"\"\n    Given a binary number, convert it to decimal number.\n    \"\"\"\n    return int(bin(int(binary))[2:], 2)\n\ndef main():\n    \"\"\"\n    Write a main function to test your function.\n    \"\"\"\n    assert binary_to_decimal(0b1111) == 7\n    assert binary_to_decimal(0b1010) == 5\n    assert binary_to_decimal(0b1011) == 10\n    assert binary_to_decimal(0b1000) == 4\n    assert binary_to_decimal(0b1001) == 9\n    assert binary_to_decimal(0b0010) == 2\n    assert binary_to_decimal(0b0101) == 15\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert decimal to binary\n\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(123456789)\n
      -0.90673828125
    ],
    [
      "def dec2bin(dec):\n    \"\"\"\n    Convert decimal number to binary number.\n    \"\"\"\n    bin_str = \"\"\n    while dec > 0:\n        bin_str = str(bin(dec % 2))\n        dec = dec / 2\n    return bin_str\n\ndef bin2dec(bin_str):\n    \"\"\"\n    Convert binary number to decimal number.\n    \"\"\"\n    dec = 0\n    while bin_str!= \"\":\n        dec += int(bin_str[0]) * (2 ** (len(bin_str) - 1))\n        bin_str = bin_str[1:]\n    return dec\n\nif __name__ == \"__main__\":\n    dec = int(input(\"Please input a decimal number:\"))\n    print(dec2bin(dec))\n    print(bin2dec(dec2bin(dec)))",
      -1.0146484375
    ],
    [
      "# Write your code here\n\ndef bin_to_dec(number):\n    \"\"\"\n    Convert decimal number to binary number.\n\n    Args:\n        number (int): the number to be converted.\n\n    Returns:\n        int: the binary number.\n    \"\"\"\n    res = \"\"\n    while number > 0:\n        res = str(number % 2) + res\n        number = number / 2\n    return int(res)\n\n\n\nif __name__ == \"__main__\":\n    print bin_to_dec(5)\n    print bin_to_dec(10)\n    print bin_to_dec(9)\n    print bin_to_dec(14)\n    print bin_to_dec(15)\n    print bin_to_dec(16)\n    print bin_to_dec(17)\n    print bin_to_dec(18)\n    print bin_to_dec(20)\n    print bin_to_dec(21)\n    print bin_to_dec(22)\n    print bin_to_dec(23)\n    print bin_to_dec(24)\n    print bin_to_dec(25)\n    print bin_to_dec(26)\n    print bin_to_dec(27)\n    print bin_to_dec(28)\n    print bin_to_dec(29)\n    print bin_to_dec(30)\n    print bin_to_dec(31)\n    print bin_to_dec(32)\n    print bin_to_dec(33)\n    print bin_to_dec(34)\n    print bin_to_dec(35)\n    print bin_to_dec(36)\n    print bin_to_dec(37)\n    print bin_to_dec(38)\n    print bin_to_dec(39)\n    print bin_to_dec(40)\n    print bin_to_dec(41)\n    print bin_to_dec(42)\n    print bin_to_dec(43)\n    print bin_to_dec(44)\n    print bin_to_dec(45)\n    print bin_to_dec(46)\n    print bin_to_dec(47)\n    print bin",
      -1.271484375
    ],
    [
      "# @include\ndef convert_decimal_to_binary(dec):\n    \"\"\"\n    >>> convert_decimal_to_binary(0)\n    '0'\n    >>> convert_decimal_to_binary(1)\n    '1'\n    >>> convert_decimal_to_binary(8)\n    '100'\n    >>> convert_decimal_to_binary(9)\n    '101'\n    >>> convert_decimal_to_binary(16)\n    '10000'\n    >>> convert_decimal_to_binary(17)\n    '10001'\n    >>> convert_decimal_to_binary(32)\n    '1000010000'\n    >>> convert_decimal_to_binary(33)\n    '1000010001'\n    >>> convert_decimal_to_binary(64)\n    '100001000010000'\n    >>> convert_decimal_to_binary(65)\n    '100001000010001'\n    >>> convert_decimal_to_binary(128)\n    '1000000000000'\n    >>> convert_decimal_to_binary(129)\n    '1000000000001'\n    >>> convert_decimal_to_binary(256)\n    '100000000000000'\n    >>> convert_decimal_to_binary(257)\n    '100000000000001'\n    >>> convert_decimal_to_binary(512)\n    '1000000000000000'\n    >>> convert_decimal_to_binary(513)\n    '1000000000000001'\n    >>> convert_decimal_to_binary(1024)\n    '1000000000000000100'\n    >>> convert_decimal_to_binary(1025)\n    '1000000000000000101'\n    >>> convert_decimal_to_binary(4096)\n    '100000000000000010000'\n    >>> convert_decimal_to_binary(4097)\n    '100000000000000010001'\n    >>> convert_decimal_to_binary(8192)\n    '10000000000000001000000'\n    >>> convert_decimal_to_binary(8193)\n    '10000000000000001000001'\n    >>> convert_decimal_to_binary(16384)\n    '10000000000000001",
      -1.61328125
    ],
    [
      "import sys\nimport operator\n\ndef main():\n    if len(sys.argv)!= 2:\n        sys.exit(\"Usage: %s <decimal number>\" % sys.argv[0])\n    decimal = sys.argv[1]\n    binary = \"\".join(map(str, operator.mod(int(decimal), 2)))\n    print binary\n    \nif __name__ == \"__main__\":\n    main()",
      -1.7822265625
    ],
    [
      "def to_bin(dec):\n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    :param dec: a decimal number\n    :return: a binary number\n    \"\"\"\n    if dec == 0:\n        return '0'\n    bin = ''\n    while dec!= 0:\n        if dec % 2 == 0:\n            bin += '0'\n        else:\n            bin += '1'\n        dec = dec >> 1\n    return bin\n\nif __name__ == '__main__':\n    dec = int(raw_input('Enter a decimal number: '))\n    bin = to_bin(dec)\n    print 'The binary number is: ', bin",
      -1.80859375
    ],
    [
      "# I/O\n\n# Function\ndef convert(n):\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        return convert(n - 1) + convert(n % 2)\n\n\n# Test\ndef test():\n    assert convert(0) == '0'\n    assert convert(1) == '1'\n    assert convert(2) == '11'\n    assert convert(3) == '101'\n    assert convert(4) == '10011'\n    assert convert(5) == '101011'\n    assert convert(6) == '110101'\n    assert convert(7) == '1101101'\n    assert convert(8) == '11011101'\n    assert convert(9) == '110111011'\n    assert convert(10) == '1101111011'\n    assert convert(11) == '1101111101'\n    assert convert(12) == '11011111101'\n    assert convert(13) == '110111111101'\n    assert convert(14) == '110111111011'\n    assert convert(15) == '110111111101'\n    assert convert(16) == '110111111011'\n    assert convert(17) == '110111111101'\n    assert convert(18) == '110111111101'\n    assert convert(19) == '1101111111101'\n    assert convert(20) == '11011111111101'\n    assert convert(21) == '110111111111101'\n    assert convert(22) == '1101111111111101'\n    assert convert(23) == '11011111111111101'\n    assert convert(24) == '110111111111111101'\n    assert convert(25) == '1101111111111111101'\n    assert convert(26) == '11011111111111111101'\n    assert convert(27) == '1101111111111111111101'\n    assert convert(28) == '110111111111111111111101'\n    assert convert(29) == '110111111111111111111111101'",
      -2.076171875
    ],
    [
      "# This is a dummy test program.\n# The real test program is in the tests folder.\n\n# Test case 1:\n# Input: 0\n# Output: \"0\"\n# Test case 2:\n# Input: 1\n# Output: \"1\"\n# Test case 3:\n# Input: 2\n# Output: \"10\"\n# Test case 4:\n# Input: 3\n# Output: \"11\"\n# Test case 5:\n# Input: 4\n# Output: \"100\"\n# Test case 6:\n# Input: 5\n# Output: \"101\"\n# Test case 7:\n# Input: 6\n# Output: \"110\"\n# Test case 8:\n# Input: 7\n# Output: \"111\"\n# Test case 9:\n# Input: 8\n# Output: \"1000\"\n# Test case 10:\n# Input: 9\n# Output: \"1001\"\n# Test case 11:\n# Input: 10\n# Output: \"1010\"\n# Test case 12:\n# Input: 11\n# Output: \"1011\"\n# Test case 13:\n# Input: 12\n# Output: \"1100\"\n# Test case 14:\n# Input: 13\n# Output: \"1101\"\n# Test case 15:\n# Input: 14\n# Output: \"1110\"\n# Test case 16:\n# Input: 15\n# Output: \"1111\"\n\n# Test case 17:\n# Input: 123\n# Output: \"101101010110110101010110101010101101101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
      -2.275390625
    ],
    [
      "def convert_decimal_to_binary(decimal_number):\n    \"\"\"\n    :type decimal_number: int\n    :rtype: str\n    \"\"\"\n    binary_number = '0b'\n    i = 0\n    while decimal_number > 0:\n        decimal_number, i = divmod(decimal_number, 2)\n        binary_number += '1' if i == 1 else '0'\n    return binary_number\n\n\nif __name__ == '__main__':\n    print convert_decimal_to_binary(23)",
      -2.296875
    ],
    [
      "import math\n\ndef to_binary(dec):\n    \"\"\"\n    >>> to_binary(0)\n    '0'\n    >>> to_binary(1)\n    '1'\n    >>> to_binary(2)\n    '10'\n    >>> to_binary(3)\n    '100'\n    >>> to_binary(4)\n    '1000'\n    >>> to_binary(5)\n    '10000'\n    >>> to_binary(6)\n    '100000'\n    >>> to_binary(7)\n    '1000000'\n    >>> to_binary(8)\n    '10000000'\n    >>> to_binary(9)\n    '100000000'\n    >>> to_binary(10)\n    '1000000000'\n    >>> to_binary(11)\n    '10000000000'\n    >>> to_binary(12)\n    '100000000000'\n    >>> to_binary(13)\n    '1000000000000'\n    >>> to_binary(14)\n    '10000000000000'\n    >>> to_binary(15)\n    '100000000000000'\n    >>> to_binary(16)\n    '1000000000000000'\n    >>> to_binary(17)\n    '10000000000000000'\n    >>> to_binary(18)\n    '100000000000000000'\n    >>> to_binary(19)\n    '1000000000000000000'\n    >>> to_binary(20)\n    '10000000000000000000'\n    >>> to_binary(21)\n    '100000000000000000000'\n    >>> to_binary(22)\n    '1000000000000000000000'\n    >>> to_binary(23)\n    '10000000000000000000000'\n    >>> to_binary(24)\n    '100000000000000000000000'\n    >>> to_binary(25)\n    '1000000000000000000000000'\n    >>> to_binary(26)\n    '10000000000000000000000000'\n    >>> to_binary(27)\n    '100000000000000000000000000'\n    >>> to_binary(28)\n    '1000000000000000000000000000'\n    >>> to_binary(29)\n    '10000000000000000000000000000'\n    >>> to_binary(30)\n    '100000000000000000000000000000'\n    >>> to_binary(31)\n    '",
      -2.708984375
    ],
    [
      "def decimal_to_binary(decimal):\n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    :param decimal: decimal number\n    :return: binary number\n    \"\"\"\n    binary_num = \"\"\n    while decimal > 0:\n        binary_num += str(decimal % 2)\n        decimal = decimal / 2\n    return binary_num\n\ndef main():\n    \"\"\"\n    Write a main function to test the decimal_to_binary function.\n    \"\"\"\n    print(\"decimal_to_binary(5) ==>\", decimal_to_binary(5))\n    print(\"decimal_to_binary(10) ==>\", decimal_to_binary(10))\n    print(\"decimal_to_binary(20) ==>\", decimal_to_binary(20))\n    print(\"decimal_to_binary(50) ==>\", decimal_to_binary(50))\n    print(\"decimal_to_binary(100) ==>\", decimal_to_binary(100))\n    print(\"decimal_to_binary(200) ==>\", decimal_to_binary(200))\n    print(\"decimal_to_binary(300) ==>\", decimal_to_binary(300))\n    print(\"decimal_to_binary(400) ==>\", decimal_to_binary(400))\n\nif __name__ == \"__main__\":\n    main()",
      -2.951171875
    ],
    [
      "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert decimal number to binary number.\n    :param decimal: decimal number\n    :return: binary number\n    \"\"\"\n    binary_num = 0\n    for i in range(0, len(str(decimal))):\n        binary_num = binary_num << 1\n        if str(decimal)[i] == '1':\n            binary_num = binary_num | 1\n    return binary_num\n\n\ndef main():\n    \"\"\"\n    Main function to test the function.\n    \"\"\"\n    print decimal_to_binary(2)\n    print decimal_to_binary(3)\n    print decimal_to_binary(4)\n    print decimal_to_binary(5)\n    print decimal_to_binary(6)\n    print decimal_to_binary(7)\n    print decimal_to_binary(8)\n    print decimal_to_binary(9)\n    print decimal_to_binary(10)\n    print decimal_to_binary(11)\n    print decimal_to_binary(12)\n    print decimal_to_binary(13)\n    print decimal_to_binary(14)\n    print decimal_to_binary(15)\n    print decimal_to_binary(16)\n    print decimal_to_binary(17)\n    print decimal_to_binary(18)\n    print decimal_to_binary(19)\n    print decimal_to_binary(20)\n    print decimal_to_binary(21)\n    print decimal_to_binary(22)\n    print decimal_to_binary(23)\n    print decimal_to_binary(24)\n    print decimal_to_binary(25)\n    print decimal_to_binary(26)\n    print decimal_to_binary(27)\n    print decimal_to_binary(28)\n    print decimal_to_binary(29)\n    print decimal_to_binary(30)\n    print decimal_to_binary(31)\n    print decimal_to_binary(32)\n    print decimal_to_binary(33)\n    print decimal_to_binary(34)\n    print decimal_to_binary(35)\n    print decimal_to_binary(36",
      -3.013671875
    ],
    [
      "def to_binary(dec):\n    binary = \"\"\n    while dec > 0:\n        binary += str(dec % 2)\n        dec = dec / 2\n    return binary\n\n# your code here\n\n# test cases\ndec = 123\nbinary = to_binary(dec)\nprint binary\n\ndec = 1234\nbinary = to_binary(dec)\nprint binary\n\ndec = 12345\nbinary = to_binary(dec)\nprint binary\n\ndec = 123456\nbinary = to_binary(dec)\nprint binary\n\ndec = 1234567\nbinary = to_binary(dec)\nprint binary\n\ndec = 12345678\nbinary = to_binary(dec)\nprint binary\n\ndec = 123456789\nbinary = to_binary(dec)\nprint binary\n\ndec = 1234567890\nbinary = to_binary(dec)\nprint binary\n\ndec = 12345678901\nbinary = to_binary(dec)\nprint binary\n\ndec = 123456789012\nbinary = to_binary(dec)\nprint binary\n\ndec = 1234567890123\nbinary = to_binary(dec)\nprint binary\n\ndec = 12345678901234\nbinary = to_binary(dec)\nprint binary\n\ndec = 123456789012345\nbinary = to_binary(dec)\nprint binary\n\ndec = 1234567890123456\nbinary = to_binary(dec)\nprint binary\n\ndec = 12345678901234567\nbinary = to_binary(dec)\nprint binary\n\ndec = 123456789012345678\nbinary = to_binary(dec)\nprint binary\n\ndec = 1234567890123456789\nbinary = to_binary(dec)\nprint binary",
      -3.26171875
    ],
    [
      "def dec2bin(dec):\n    \"\"\"\n    Convert a decimal number to binary number.\n\n    Input:\n        dec: the decimal number to be converted.\n    Output:\n        bin: the binary number.\n    \"\"\"\n\n    bin = []\n    while dec > 0:\n        bin.append(dec % 2)\n        dec = dec // 2\n\n    return bin\n\n\nif __name__ == \"__main__\":\n    print(dec2bin(12))\n    print(dec2bin(4))\n    print(dec2bin(3))\n    print(dec2bin(1))",
      -3.431640625
    ],
    [
      "def convert_decimal_to_binary(decimal_number):\n    \"\"\"\n    :type decimal_number: int\n    :rtype: str\n    \"\"\"\n    binary = \"\"\n    while decimal_number > 0:\n        binary = str(decimal_number % 2) + binary\n        decimal_number = decimal_number / 2\n    return binary\n\n\ndef main():\n    test_cases = [\n        (1, \"101\"),\n        (2, \"010\"),\n        (3, \"001\"),\n        (4, \"110\"),\n        (5, \"1010\"),\n        (6, \"1100\"),\n        (7, \"1110\"),\n        (8, \"1111\"),\n        (9, \"11110\"),\n        (10, \"111110\"),\n        (11, \"1111110\"),\n        (12, \"11111110\"),\n        (13, \"11111111\"),\n        (14, \"111111110\"),\n        (15, \"1111111110\"),\n        (16, \"11111111110\"),\n        (17, \"111111111110\"),\n        (18, \"111111111111\"),\n        (19, \"1111111111110\"),\n        (20, \"11111111111110\"),\n        (21, \"111111111111110\"),\n        (22, \"1111111111111110\"),\n        (23, \"1111111111111111\"),\n        (24, \"11111111111111110\"),\n        (25, \"111111111111111110\"),\n        (26, \"1111111111111111110\"),\n        (27, \"11111111111111111111\"),\n        (28, \"111111111111111111110\"),\n        (29, \"1111111111111111111110\"),\n        (30, \"11111111111111111111110\"),\n        (31, \"111111111111111111111111\"),\n        (32, \"1111111111111111111111110\"),\n    ]\n    for case in test_cases:\n        decimal_number = case[0]\n        expected = case[1]\n        print(\"Convert decimal number: {}\".format(decimal_number))\n        actual = convert_decimal_to_binary(decimal_number)\n        print(\"Expected: {}\".format(expected))\n        print(\"",
      -4.54296875
    ],
    [
      "# Convert decimal number to binary\ndef convert_decimal_to_binary(decimal_number):\n    binary_number = 0\n    while decimal_number > 0:\n        binary_number += decimal_number % 2\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\n# Convert binary number to decimal\ndef convert_binary_to_decimal(binary_number):\n    decimal_number = 0\n    while binary_number > 0:\n        decimal_number += binary_number % 2\n        binary_number = binary_number // 2\n    return decimal_number\n\n\n# Test\nif __name__ == '__main__':\n    print convert_decimal_to_binary(123)\n    print convert_binary_to_decimal(2)",
      -4.98046875
    ],
    [
      "#\n# The function should accept one argument: an integer.\n#\n# The function should return a binary number as a string.\n#\n\n#\n# Test Cases\n#\n# The following test cases are used to test your function.\n#\n#      n = 123\n#      print(binary(n))\n#      # Output: 100000001\n#      n = -123\n#      print(binary(n))\n#      # Output: 111111111\n#\n#      n = 0\n#      print(binary(n))\n#      # Output: 0\n#\n#      n = 1\n#      print(binary(n))\n#      # Output: 1\n#\n#      n = 10\n#      print(binary(n))\n#      # Output: 101\n#\n#      n = 1023\n#      print(binary(n))\n#      # Output: 11111111111111111111111111111111\n#\n#      n = 1024\n#      print(binary(n))\n#      # Output: 11111111111111111111111111111110\n#\n#      n = 1025\n#      print(binary(n))\n#      # Output: 11111111111111111111111111111111\n#\n#      n = 102300\n#      print(binary(n))\n#      # Output: 11111111111111111111111111111111\n#\n#      n = 0x12345678\n#      print(binary(n))\n#      # Output: 1000101110110101011110001011101111\n#\n#      n = 0x1234567890\n#      print(binary(n))\n#      # Output: 1000101110110101011110001011101111\n#\n#      n = 0x123456789abcdef0\n#      print(binary(n))\n#      # Output: 1000101110110101011110001011101111\n#\n#      n = 0x123456789abcdef0123456789abcdef0\n#      print(binary(n))\n#      # Output: 1000101110110101011110001011101111\n#\n#      n = 0x123456789abcdef0123456789",
      -5.3828125
    ],
    [
      "def to_bin(decimal_number):\n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n\n    :param decimal_number:\n    :return:\n    \"\"\"\n    bin_number = \"\"\n    while decimal_number:\n        bin_number += \"1\" if decimal_number % 2 else \"0\"\n        decimal_number = decimal_number // 2\n\n    return bin_number\n\n\ndef to_decimal(bin_number):\n    \"\"\"\n    Write a python function to convert a binary number to decimal number.\n\n    :param bin_number:\n    :return:\n    \"\"\"\n    decimal_number = 0\n    for digit in bin_number:\n        decimal_number = decimal_number * 2 + int(digit)\n\n    return decimal_number\n\n\ndef main():\n    # Test case\n    test_case = 1\n    decimal_number = int(input())\n    bin_number = to_bin(decimal_number)\n    print(\"Case #{}: {}\".format(test_case, to_decimal(bin_number)))\n\n\nif __name__ == '__main__':\n    main()",
      -5.64453125
    ],
    [
      "import sys\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Please input a number.\")\n        sys.exit(0)\n    \n    binary = \"\"\n    while True:\n        decimal = int(sys.argv[1])\n        if decimal == 0:\n            break\n        \n        binary = str(decimal) + binary\n        decimal = decimal / 2\n    \n    print(\"The binary number is: \" + binary)\n\nif __name__ == '__main__':\n    main()",
      -5.7578125
    ],
    [
      "# Definition for a binary number.\nclass BinaryNumber(object):\n    def __init__(self, num):\n        \"\"\"\n        :type num: int\n        \"\"\"\n        self.num = num\n        self.bit = BinaryNumber.get_bit(self.num)\n        \n    def __str__(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        return str(self.bit)\n    \n    @staticmethod\n    def get_bit(num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        else:\n            return num % 2\n\ndef bin_num(num):\n    \"\"\"\n    :type num: int\n    :rtype: BinaryNumber\n    \"\"\"\n    return BinaryNumber(num)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print bin_num(1)\n    print bin_num(3)\n    print bin_num(5)\n    print bin_num(7)\n    print bin_num(13)\n\nif __name__ == '__main__':\n    main()",
      -5.97265625
    ],
    [
      "def dec2bin(dec):\n    \"\"\"\n    Convert decimal number to binary number.\n\n    >>> dec2bin(3)\n    '11'\n    >>> dec2bin(8)\n    '100'\n    \"\"\"\n    if dec == 0:\n        return '0'\n    res = ''\n    while dec > 0:\n        res = '1' + res\n        dec = dec - 1\n    return res\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(dec2bin(8))\n    print(dec2bin(10))\n    print(dec2bin(13))\n    print(dec2bin(42))\n    print(dec2bin(99))\n    print(dec2bin(100))\n\n\nif __name__ == '__main__':\n    main()",
      -6.15625
    ],
    [
      "def binary_to_decimal(binary):\n    \"\"\"\n    :type binary: str\n    :rtype: int\n    \"\"\"\n    return int(binary, 2)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(binary_to_decimal(\"101\"))\n    print(binary_to_decimal(\"1111\"))\n    print(binary_to_decimal(\"01101\"))\n    print(binary_to_decimal(\"1\"))\n    print(binary_to_decimal(\"1\"))\n    print(binary_to_decimal(\"101101\"))\n    print(binary_to_decimal
      -6.7421875
    ],
    [
      "def toBinary(decimal):\n    \"\"\"\n    :type decimal: int\n    :rtype: str\n    \"\"\"\n    binary = []\n    for i in range(len(decimal)):\n        if decimal & 1:\n            binary.append('1')\n        else:\n            binary.append('0')\n        decimal >>= 1\n    return ''.join(binary)\n\n\ndef test():\n    assert toBinary(1) == '1'\n    assert toBinary(3) == '11'\n    assert toBinary(5) == '101'\n    assert toBinary(10) == '1010'\n    assert toBinary(15) == '10101'\n    assert toBinary(20) == '101001'\n    assert toBinary(30) == '101000101'\n    assert toBinary(100) == '10100000001'\n    assert toBinary(1000) == '1010000000101'\n    assert toBinary(10000) == '101000000010101'\n    assert toBinary(100000) == '10100000001010101'\n    assert toBinary(1000000) == '1010000000101010101'\n    assert toBinary(10000000) == '101000000010101010101'\n    assert toBinary(100000000) == '1010000000101010101010101'\n    assert toBinary(1000000000) == '10100000001010101010101010101'\n    assert toBinary(10000000000) == '101000000010101010101010101010101'\n    assert toBinary(100000000000) == '1010000000101010101010101010101010101'\n    assert toBinary(1000000000000) == '10100000001010101010101010101010101010101'\n    assert toBinary(10000000000000) == '101000000010101010101010101010101010101010101'\n    assert toBinary(100000000000000) == '1010000000101010101010101010101010101010101010101'\n    assert to",
      -6.77734375
    ],
    [
      "#!/usr/bin/env python\n\n# This function converts decimal number to binary number.\ndef to_binary(num):\n    bin_str = ''\n    if num < 0:\n        raise ValueError('Input number must be positive')\n\n    while num > 0:\n        bin_str += str(num % 2)\n        num /= 2\n    return bin_str\n\n# Test cases\n# num = -10\n# bin_str = '11111101'\n# bin_str = '1'\n# bin_str = '0'\n# bin_str = '0'\n\n# num = 0\n# bin_str = '0'\n# bin_str = '0'\n# bin_str = '0'\n\n# num = 1\n# bin_str = '1'\n# bin_str = '0'\n# bin_str = '1'\n\n# num = 2\n# bin_str = '11'\n# bin_str = '1'\n# bin_str = '1'\n\n# num = 3\n# bin_str = '11'\n# bin_str = '1'\n# bin_str = '0'\n\n# num = 4\n# bin_str = '100'\n# bin_str = '1'\n# bin_str = '0'\n\n# num = 5\n# bin_str = '101'\n# bin_str = '1'\n# bin_str = '0'\n\n# num = 6\n# bin_str = '111'\n# bin_str = '1'\n# bin_str = '1'\n\n# num = 7\n# bin_str = '1011'\n# bin_str = '1'\n# bin_str = '1'\n\n# num = 8\n# bin_str = '1101'\n# bin_str = '1'\n# bin_str = '1'\n\n# num = 9\n# bin_str = '1111'\n# bin_str = '1'\n# bin_str = '1'\n\n# num = 10\n# bin_str = '1110'\n# bin_str = '1'\n# bin_str = '1'\n\n# num = 11\n# bin_str",
      -7.30859375
    ],
    [
      "def convert_decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to binary number.\n    :param decimal: the decimal number.\n    :return: the binary number.\n    \"\"\"\n    binary = \"\"\n    for i in range(0, len(decimal)):\n        binary += str(int(decimal[i]))\n    return binary\n\n\ndef main():\n    print convert_decimal_to_binary(123)\n\nif __name__ == \"__main__\":\n    main()",
      -7.9140625
    ],
    [
      "# Convert a decimal number to binary number\n# Input: decimal number\n# Output: binary number\n\ndef decimal_to_binary(dec):\n    # Base\n    base = 2\n\n    # Start converting\n    binary = \"\"\n    while dec > 0:\n        # Check the next digit\n        if dec % base == 0:\n            # Append 1\n            binary += \"1\"\n            dec -= 1\n        else:\n            # Append 0\n            binary += \"0\"\n            dec -= 1\n\n    # Return the binary number\n    return binary\n\n# Test Cases\n# Input: decimal number = 123\n# Output: binary number = \"1011101\"\n\ndec = 123\nprint(decimal_to_binary(dec))",
      -8.984375
    ],
    [
      "def convert_to_bin(dec):\n    \"\"\"\n    convert_to_bin(dec) -> string\n\n    convert decimal number to binary string.\n\n    Input:\n        dec -- decimal number\n\n    Output:\n        string -- binary number\n    \"\"\"\n\n    # 1st: remove all leading zeros\n    while dec > 0:\n        dec = dec / 2\n        print dec\n        print 'dec:', dec\n\n    # 2nd: convert binary number to string\n    bin = ''\n    while dec > 0:\n        bin += str(dec % 2)\n        dec = dec / 2\n        print bin\n\n    return bin\n\n\nif __name__ == '__main__':\n    #Test\n    print convert_to_bin(10)\n    print convert_to_bin(9)\n    print convert_to_bin(8)\n    print convert_to_bin(7)\n    print convert_to_bin(6)\n    print convert_to_bin(5)\n    print convert_to_bin(4)\n    print convert_to_bin(3)\n    print convert_to_bin(2)\n    print convert_to_bin(1)\n    print convert_to_bin(0)",
      -9.0546875
    ],
    [
      "# This function converts decimal number to binary number.\n#\n# Input:\n#    x: a decimal number\n#\n# Output:\n#    y: a binary number\n#\n# Example:\n#    x = 5\n#    y = '101'\n#    The result is '101'\n\ndef dec_to_bin(x):\n    # Binary digit\n    y = ''\n\n    # The number of bits to convert\n    n = len(str(x))\n\n    # Convert the number to binary number\n    for i in range(n):\n        y += str(x % 2)\n\n        x = x / 2\n\n    return y\n\n\n# Test cases\n#\n# Test cases:\n#    x = 5\n#    y = '101'\n#    The result is '101'\n#    x = 3\n#    y = '001'\n#    The result is '001'\n#    x = -3\n#    y = '110'\n#    The result is '110'\n\nif __name__ == '__main__':\n    # Test case 1\n    x = 5\n    y = '101'\n    result = dec_to_bin(x)\n    assert result == '101'\n\n    # Test case 2\n    x = 3\n    y = '001'\n    result = dec_to_bin(x)\n    assert result == '001'\n\n    # Test case 3\n    x = -3\n    y = '110'\n    result = dec_to_bin(x)\n    assert result == '110'\n\n    # Test case 4\n    x = -7\n    y = '111'\n    result = dec_to_bin(x)\n    assert result == '111'",
      -9.1640625
    ],
    [
      "def binary(decimal_number):\n    binary_number = ''\n    \n    for i in range(0, len(decimal_number)):\n        binary_number += str(decimal_number % 2)\n        decimal_number = decimal_number // 2\n        \n    return binary_number\n\n# Test cases\nassert binary(0) == '0'\nassert binary(1) == '1'\nassert binary(7) == '11'\nassert binary(42) == '1010101010'\nassert binary(999) == '1101011101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
      -9.640625
    ],
    [
      "def dec2bin(dec):\n    \"\"\"\n    :param dec: a decimal number\n    :return: a binary number\n    \"\"\"\n    num = \"\"\n    for i in range(len(dec)):\n        num += str(int(dec[i]) + 1)\n    return num\n\n\ndef main():\n    dec = raw_input(\"Enter a decimal number: \")\n    print dec2bin(dec)\n\n\nif __name__ == \"__main__\":\n    main()",
      -9.9765625
    ],
    [
      "import sys\n\n\ndef bin_to_dec(binary_number, base=2):\n    \"\"\"\n    Convert a binary number to decimal number.\n\n    :param binary_number: A binary number\n    :param base: The base of the binary number\n    :return: A decimal number\n    \"\"\"\n    if not isinstance(binary_number, int):\n        raise ValueError('The number is not an integer')\n\n    if binary_number < 0:\n        raise ValueError('The number is not positive')\n\n    if base < 2 or base > 36:\n        raise ValueError('The base of the number is not valid')\n\n    # Convert the binary number to decimal\n    decimal_number = binary_number\n    while binary_number > 0:\n        decimal_number = decimal_number * base\n        binary_number = binary_number - 1\n\n    return decimal_number\n\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    # Get the input number\n    try:\n        number = int(input('Enter a number: '))\n    except ValueError:\n        print('Please enter a number')\n        sys.exit(1)\n\n    # Convert the number to binary number\n    binary_number = bin_to_dec(number)\n    print('The binary number is {}'.format(binary_number))\n\n\nif __name__ == '__main__':\n    main()",
      -14.9140625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}