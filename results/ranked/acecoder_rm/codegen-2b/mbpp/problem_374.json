{
  "problem": {
    "task_id": "MBPP/385",
    "prompt": "Write a function to find the n'th perrin number using recursion.",
    "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
    "test_list": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ],
    "challenge_test_list": [],
    "problem_id": 374
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# https://www.hackerrank.com/challenges/perrin-number/problem\n# https://www.hackerrank.com/challenges/perrin-number/submissions/code/353876\n\ndef perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n - 1) + perrin_number(n - 2)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(perrin_number(n))",
      6.4140625
    ],
    [
      "def find_perrin_nth(n):\n    if n == 1:\n        return 1\n    else:\n        return find_perrin_nth(n-1) + find_perrin_nth(n-2)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_perrin_nth(1) == 1, \"1st\"\n    assert find_perrin_nth(2) == 3, \"2nd\"\n    assert find_perrin_nth(3) == 15, \"3rd\"\n    assert find_perrin_nth(4) == 63, \"4th\"\n    assert find_perrin_nth(5) == 203, \"5th\"\n    assert find_perrin_nth(6) == 1065, \"6th\"\n    assert find_perrin_nth(7) == 4033, \"7th\"\n    assert find_perrin_nth(8) == 16561, \"8th\"\n    assert find_perrin_nth(9) == 61413, \"9th\"\n    assert find_perrin_nth(10) == 263321, \"10th\"",
      2.787109375
    ],
    [
      "def perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (perrin(n-1) + perrin(n-2)) % 1000000\n\nif __name__ == '__main__':\n    n = int(input())\n    print(perrin(n))",
      1.568359375
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return perrin_number(n - 1) + perrin_number(n - 2) + perrin_number(n - 3)\n\n\nif __name__ == '__main__':\n    print(perrin_number(5))",
      1.2568359375
    ],
    [
      "# Definition for a permutation of a sequence.\n# class Permutation(object):\n#     def __init__(self, x):\n#         self.nums = x\n\nclass Solution(object):\n    def getPermutation(self, n, r):\n        \"\"\"\n        :type n: int\n        :type r: int\n        :rtype: str\n        \"\"\"\n        if r == 0:\n            return str(n)\n        else:\n            return self.getPermutation(n-1, r-1) + self.getPermutation(n-1, r)\n\nif __name__ == '__main__':\n    print Solution().getPermutation(5, 2)",
      0.908203125
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    return perrin_number(n-1) + perrin_number(n-2)\n\nif __name__ == '__main__':\n    print(perrin_number(3))\n    print(perrin_number(4))\n    print(perrin_number(5))\n    print(perrin_number(6))\n    print(perrin_number(7))\n    print(perrin_number(8))\n    print(perrin_number(9))\n    print(perrin_number(10))",
      0.2369384765625
    ],
    [
      "def nthPerrin(n):\n    \"\"\"\n    Input: n = 7\n    Output: nthPerrin(7) = 1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return nthPerrin(n - 1) + nthPerrin(n - 2)\n\n\nif __name__ == '__main__':\n    print nthPerrin(7)",
      0.13916015625
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * perrin_number(n - 1))\n\nif __name__ == '__main__':\n    print(perrin_number(10))\n    print(perrin_number(100))",
      -0.7265625
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)\n\nprint(perrin_number(10))",
      -0.85595703125
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    return perrin_number(n-1) + perrin_number(n-2)\n\nif __name__ == '__main__':\n    print(perrin_number(5))\n    print(perrin_number(6))\n    print(perrin_number(10))\n    print(perrin_number(100))\n    print(perrin_number(1000))",
      -0.85693359375
    ],
    [
      "def getPerrinNumber(n):\n    if n == 1:\n        return 1\n    else:\n        return getPerrinNumber(n-1) + getPerrinNumber(n-2)\n\nprint getPerrinNumber(5)",
      -0.85693359375
    ],
    [
      "def perrin_number(n):\n    if n <= 1:\n        return 1\n    return n*perrin_number(n-1)\n\nif __name__ == '__main__':\n    print(perrin_number(3))\n    print(perrin_number(4))\n    print(perrin_number(10))\n    print(perrin_number(100))\n    print(perrin_number(1000))",
      -0.85693359375
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 25\n    elif n == 6:\n        return 36\n    else:\n        return perrin_number(n - 1) * perrin_number(n - 2)\n\nprint(perrin_number(6))",
      -0.85791015625
    ],
    [
      "# nth_perrin_number\ndef nth_perrin_number(n):\n    if n == 1:\n        return 1\n    return nth_perrin_number(n - 1) + nth_perrin_number(n - 2)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(nth_perrin_number(n))",
      -0.85791015625
    ],
    [
      "import math\n\ndef perrin_number(n):\n    if n == 1:\n        return 1\n    return perrin_number(n-1) + perrin_number(n-2)\n\nif __name__ == \"__main__\":\n    print(perrin_number(5))",
      -0.85791015625
    ],
    [
      "def perrin_n(n):\n    if n <= 1:\n        return 1\n    else:\n        return perrin_n(n - 1) + perrin_n(n - 2)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert perrin_n(4) == 15, \"n = 4\"\n    assert perrin_n(5) == 21, \"n = 5\"\n    assert perrin_n(6) == 30, \"n = 6\"\n    assert perrin_n(7) == 42, \"n = 7\"\n    assert perrin_n(8) == 57, \"n = 8\"\n    assert perrin_n(9) == 84, \"n = 9\"\n    assert perrin_n(10) == 105, \"n = 10\"",
      -0.85791015625
    ],
    [
      "def perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin(n - 1) + perrin(n - 2)",
      -0.85791015625
    ],
    [
      "def perrin(n):\n    \"\"\"\n    :param n: An integer\n    :return: Then'th perrin number\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return perrin(n - 1) + perrin(n - 2)\n\nif __name__ == '__main__':\n    n = int(input(\"Please enter a number: \"))\n    print(\"The {}'th perrin number is {}\".format(n, perrin(n)))",
      -0.85791015625
    ],
    [
      "def find_nth_perrin_number(n):\n    if n == 1:\n        return 1\n    else:\n        return find_nth_perrin_number(n-1) + find_nth_perrin_number(n-2)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(find_nth_perrin_number(n))",
      -0.85791015625
    ],
    [
      "def perrin_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return perrin_nth(n-1) + perrin_nth(n-2)\n\n# Your PerrinNth solution here.",
      -0.85791015625
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    return perrin_number(n-1) + perrin_number(n-2)\n\nprint(perrin_number(10))",
      -0.85791015625
    ],
    [
      "def perrin_number(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * perrin_number(n - 1)\n\nif __name__ == \"__main__\":\n    print(perrin_number(10))",
      -0.85791015625
    ],
    [
      "def perrin_n(n):\n    if n == 1:\n        return 1\n    return n * perrin_n(n - 1)\n\nif __name__ == '__main__':\n    print(perrin_n(4))",
      -0.85791015625
    ],
    [
      "# https://en.wikipedia.org/wiki/Perrin_sequence\ndef perrin_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return perrin_number(n - 1) + perrin_number(n - 2)\n\nprint(perrin_number(10))",
      -0.8583984375
    ],
    [
      "# Definition for a permutation of a sequence of integers\nclass Permutation:\n    def __init__(self, num):\n        self.num = num\n    def __repr__(self):\n        return str(self.num)\n\ndef perm(n, p):\n    if n == 1:\n        return 1\n    else:\n        return perm(n-1, p) + perm(n-1, p)\n\ndef find_nth_perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return perm(n, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\nif __name__ == \"__main__\":\n    print(find_nth_perrin(20))",
      -0.8583984375
    ],
    [
      "def perrin_n(n):\n    if n == 1:\n        return 1\n    else:\n        return n * perrin_n(n - 1)\n\nprint(perrin_n(2))",
      -0.8583984375
    ],
    [
      "def perrin_number(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * perrin_number(n - 1)\n\nif __name__ == '__main__':\n    print(perrin_number(10))",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/perrin-nth-permutation\ndef perm(n, x, y):\n    if n == 1:\n        return x, y\n    else:\n        return perm(n - 1, x, y + x)\n\nif __name__ == '__main__':\n    n = int(input())\n    x, y = perm(n, 1, 1)\n    print(x, y)",
      -0.8583984375
    ],
    [
      "def find_perrin_number(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_perrin_number(n-1) + find_perrin_number(n-2)\n\nif __name__ == '__main__':\n    assert find_perrin_number(10) == 362880\n    assert find_perrin_number(100) == 8392649\n    assert find_perrin_number(1000) == 8392649\n    assert find_perrin_number(10000) == 8392649\n    assert find_perrin_number(100000) == 8392649\n    assert find_perrin_number(1000000) == 8392649\n    assert find_perrin_number(10000000) == 8392649",
      -0.8583984375
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    n is a positive integer.\n    Return then'th perrin number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n - 1) + perrin_number(n - 2)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(perrin_number(6))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (n * (n - 1)) / 2\n\nif __name__ == '__main__':\n    print(perrin(20))",
      -0.8583984375
    ],
    [
      "def perrin_nth(n):\n  if n == 1:\n    return 1\n  return perrin_nth(n - 1) + n * perrin_nth(n - 2)\n\nprint(perrin_nth(5))",
      -0.8583984375
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n - 1) + perrin_number(n - 2)\n\nprint(perrin_number(4))",
      -0.8583984375
    ],
    [
      "import unittest\n\ndef perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return perrin_number(n - 1) + perrin_number(n - 2) + perrin_number(n - 3)\n\nclass TestPerrin(unittest.TestCase):\n    def test_perrin_number(self):\n        self.assertEqual(perrin_number(1), 1)\n        self.assertEqual(perrin_number(2), 2)\n        self.assertEqual(perrin_number(3), 4)\n        self.assertEqual(perrin_number(4), 16)\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.8583984375
    ],
    [
      "def perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return perrin(n - 1) + perrin(n - 2)\n\nprint(perrin(4))",
      -0.8583984375
    ],
    [
      "def perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return n * perrin(n-1)\n\nif __name__ == \"__main__\":\n    print(perrin(1))\n    print(perrin(2))\n    print(perrin(3))\n    print(perrin(4))\n    print(perrin(5))\n    print(perrin(6))\n    print(perrin(7))\n    print(perrin(8))\n    print(perrin(9))\n    print(perrin(10))\n    print(perrin(11))\n    print(perrin(12))\n    print(perrin(13))\n    print(perrin(14))\n    print(perrin(15))\n    print(perrin(16))",
      -0.8583984375
    ],
    [
      "from time import time\n\ndef get_nth_perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return get_nth_perrin(n - 1) + get_nth_perrin(n - 2)\n\ndef get_nth_perrin_recursive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_nth_perrin_recursive(n - 1) + get_nth_perrin_recursive(n - 2)\n\nif __name__ == '__main__':\n    t = time()\n    print(get_nth_perrin(10))\n    print(time() - t)",
      -0.8583984375
    ],
    [
      "def perrin_n(n):\n    if n < 2:\n        return n\n    else:\n        return perrin_n(n-1) + perrin_n(n-2)\n\nif __name__ == '__main__':\n    print(perrin_n(5))",
      -0.8583984375
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return perrin_number(n - 1) + perrin_number(n - 2)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(perrin_number(n))",
      -0.8583984375
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n - 1) + perrin_number(n - 2)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(perrin_number(n))",
      -0.8583984375
    ],
    [
      "# Your code here\n\ndef perrin_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * (perrin_number(n-1) + perrin_number(n-2))\n\nprint(perrin_number(2))\nprint(perrin_number(3))\nprint(perrin_number(4))\nprint(perrin_number(5))",
      -0.8583984375
    ],
    [
      "import math\n\ndef perrin_n(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin_n(n-1) + perrin_n(n-2)\n\n\ndef perrin_recursion(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin_recursion(n-1) + perrin_recursion(n-2)\n\n\nprint(perrin_recursion(100))\nprint(perrin_recursion(100))",
      -0.8583984375
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)\n\n# Your PerrinNumber solution here.",
      -0.8583984375
    ],
    [
      "# @include\ndef nth_perrin_number(n):\n    def helper(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 4\n        elif n == 3:\n            return 9\n        elif n == 4:\n            return 16\n        elif n == 5:\n            return 25\n        else:\n            return helper(n - 1) * (n + 1) / 2\n    return helper(n)\n# @exclude\n\n\ndef main():\n    # The input is: n = 4, expected output: 4\n    n = 4\n    print(nth_perrin_number(n))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def perrin_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (n * perrin_number(n-1)) % 1000000007\n\n# Testing\nprint(perrin_number(4))\nprint(perrin_number(5))\nprint(perrin_number(6))\nprint(perrin_number(7))\nprint(perrin_number(8))\nprint(perrin_number(9))",
      -0.85888671875
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))/2\n\nif __name__ == '__main__':\n    print(perrin_number(5))\n    print(perrin_number(10))\n    print(perrin_number(100))\n    print(perrin_number(1000))",
      -0.85888671875
    ],
    [
      "def perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * perrin(n - 1)\n\nif __name__ == '__main__':\n    print(perrin(3))",
      -0.85888671875
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)\n\nif __name__ == '__main__':\n    print(perrin_number(4))",
      -0.85888671875
    ],
    [
      "def perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return perrin(n-1) + perrin(n-2)\n\nif __name__ == '__main__':\n    print(perrin(4))",
      -0.85888671875
    ],
    [
      "# Definition for a permutation of a group of size N\n# class Permutation(object):\n#     def __init__(self, nums):\n#         self.nums = nums\n\nclass Solution(object):\n    def getPermutation(self, n, nums):\n        \"\"\"\n        :type n: int\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        return [self.getPermutation(n - 1, nums),\n                self.getPermutation(n - 2, nums),\n                self.getPermutation(n - 3, nums)]",
      -0.85888671875
    ],
    [
      "# @include\ndef perrin_number(n):\n    return _perrin_number(n, 0)\n# @exclude\n\n\ndef _perrin_number(n, curr):\n    if n == 1:\n        return curr\n    return _perrin_number(n - 1, curr * 2) + _perrin_number(n - 1, curr)\n\n\nif __name__ == '__main__':\n    sol = perrin_number(5)\n    assert sol == 4",
      -0.85888671875
    ],
    [
      "import math\n\ndef get_perrin_nth(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return get_perrin_nth(n - 1) + get_perrin_nth(n - 2)\n\ndef perrin_nth(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return perrin_nth(n - 1) + perrin_nth(n - 2)\n\ndef main():\n    print(perrin_nth(4))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "import unittest\nfrom Recursion import PerrinNumber\n\nclass TestPerrinNumber(unittest.TestCase):\n\n    def test_perrin_number_recursion(self):\n        self.assertEqual(PerrinNumber.perrin_number(10), [1, 10, 30, 100, 500, 1000, 2000])\n        self.assertEqual(PerrinNumber.perrin_number(4), [1, 2, 4, 8])\n        self.assertEqual(PerrinNumber.perrin_number(1), [1])\n        self.assertEqual(PerrinNumber.perrin_number(0), [])\n        self.assertEqual(PerrinNumber.perrin_number(-1), [])\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.85888671875
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n*perrin_number(n-1)\n\nif __name__ == '__main__':\n    for n in range(1, 20):\n        print n, perrin_number(n)",
      -0.85888671875
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    else:\n        return (perrin_number(n-1) + perrin_number(n-2)) * (n-1)\n\ndef perrin_number_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return (perrin_number_recursive(n-1) + perrin_number_recursive(n-2)) * (n-1)\n\ndef perrin_number_iterative(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin_number_iterative(n-1) + perrin_number_iterative(n-2)\n\nif __name__ == '__main__':\n    #print(perrin_number(5))\n    print(perrin_number_iterative(5))\n    print(perrin_number_recursive(5))",
      -0.85888671875
    ],
    [
      "def get_perm(n, perm):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return get_perm(n-1, perm) + get_perm(n-2, perm)\n\nn = 5\nprint(get_perm(n, [1, 2, 3, 4, 5]))",
      -0.85888671875
    ],
    [
      "# Your code here\n\ndef perrin_number(n):\n    if n <= 1:\n        return n\n    return perrin_number(n-1) + perrin_number(n-2)\n\ndef perrin_number(n):\n    if n == 1:\n        return 1\n    return perrin_number(n-1) + perrin_number(n-2)\n\nprint(perrin_number(3))",
      -0.85888671875
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)\n\nif __name__ == \"__main__\":\n    for i in range(1, 101):\n        print(\"{} = {}\".format(i, perrin_number(i)))",
      -0.85888671875
    ],
    [
      "def perrin_number(n):\n    if n <= 1:\n        return n\n    else:\n        return perrin_number(n - 1) + perrin_number(n - 2)\n\n\n\n#Test Cases\n\nprint(perrin_number(1))\nprint(perrin_number(2))\nprint(perrin_number(3))\nprint(perrin_number(4))\nprint(perrin_number(5))\nprint(perrin_number(6))\nprint(perrin_number(7))\nprint(perrin_number(8))\nprint(perrin_number(9))\nprint(perrin_number(10))",
      -0.85888671875
    ],
    [
      "def find_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return n * find_perrin(n - 1)\n\ndef find_perrin_recursion(n):\n    if n == 1:\n        return 1\n    else:\n        return find_perrin_recursion(n - 1) + find_perrin_recursion(n - 1)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(find_perrin_recursion(n))",
      -0.85888671875
    ],
    [
      "# Recursion\ndef get_perrin_number(n):\n    if n == 0:\n        return 1\n    else:\n        return get_perrin_number(n-1) * (n+1) / 2\n\nprint(get_perrin_number(5))",
      -0.85888671875
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    else:\n        return n * (perrin_number(n - 1) + perrin_number(n - 2))\n\nif __name__ == '__main__':\n    print(perrin_number(5))\n    print(perrin_number(10))",
      -0.85888671875
    ],
    [
      "def find_perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return find_perrin_number(n-1) + find_perrin_number(n-2)\n\nif __name__ == '__main__':\n    print find_perrin_number(2)",
      -0.86083984375
    ],
    [
      "def find_perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return find_perrin_number(n-1) + find_perrin_number(n-2)\n\nif __name__ == '__main__':\n    print(find_perrin_number(4))",
      -0.86083984375
    ],
    [
      "def nth_perrin_number(n):\n    if n == 1:\n        return 1\n    return nth_perrin_number(n - 1) + nth_perrin_number(n - 2)\n\n\nif __name__ == '__main__':\n    print(nth_perrin_number(5))",
      -0.9130859375
    ],
    [
      "import unittest\nfrom perrin import Perrin\n\nclass TestPerrin(unittest.TestCase):\n\n    def test_perrin_n_1(self):\n        self.assertEqual(Perrin().nth_perrin(1), 1)\n\n    def test_perrin_n_2(self):\n        self.assertEqual(Perrin().nth_perrin(2), 4)\n\n    def test_perrin_n_3(self):\n        self.assertEqual(Perrin().nth_perrin(3), 13)\n\n    def test_perrin_n_4(self):\n        self.assertEqual(Perrin().nth_perrin(4), 32)\n\n    def test_perrin_n_5(self):\n        self.assertEqual(Perrin().nth_perrin(5), 97)\n\n    def test_perrin_n_6(self):\n        self.assertEqual(Perrin().nth_perrin(6), 352)\n\n    def test_perrin_n_7(self):\n        self.assertEqual(Perrin().nth_perrin(7), 1093)\n\n    def test_perrin_n_8(self):\n        self.assertEqual(Perrin().nth_perrin(8), 4181)\n\n    def test_perrin_n_9(self):\n        self.assertEqual(Perrin().nth_perrin(9), 16657)\n\n    def test_perrin_n_10(self):\n        self.assertEqual(Perrin().nth_perrin(10), 65535)\n\n    def test_perrin_n_11(self):\n        self.assertEqual(Perrin().nth_perrin(11), 218503)\n\n    def test_perrin_n_12(self):\n        self.assertEqual(Perrin().nth_perrin(12), 859375)\n\n    def test_perrin_n_13(self):\n        self.assertEqual(Perrin().nth_perrin(13), 3515625)\n\n    def test_perrin_n_14(self):\n        self.assertEqual(",
      -1.12890625
    ],
    [
      "def find_perrin_number(n):\n    \"\"\"\n    @param n: The number to find\n    @type n: int\n    @return: Then'th perrin number\n    @rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return n * find_perrin_number(n-1)\n\nif __name__ == '__main__':\n    for n in range(1, 7):\n        print(\"%d: %d\" % (n, find_perrin_number(n)))",
      -1.40234375
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    else:\n        return perrin_number(n-1) * perrin_number(n-2)\n\nif __name__ == \"__main__\":\n    print(perrin_number(5))",
      -1.42578125
    ],
    [
      "# A simple solution\n# https://www.hackerrank.com/challenges/perrin-numbers/problem\n#\n# n = 6\n# n = 7\n# n = 10\n# n = 11\n# n = 12\n# n = 13\n# n = 14\n# n = 15\n# n = 16\n# n = 17\n# n = 18\n# n = 19\n# n = 20\n# n = 21\n# n = 22\n# n = 23\n# n = 24\n# n = 25\n# n = 26\n# n = 27\n# n = 28\n# n = 29\n# n = 30\n# n = 31\n# n = 32\n# n = 33\n# n = 34\n# n = 35\n# n = 36\n# n = 37\n# n = 38\n# n = 39\n# n = 40\n# n = 41\n# n = 42\n# n = 43\n# n = 44\n# n = 45\n# n = 46\n# n = 47\n# n = 48\n# n = 49\n# n = 50\n# n = 51\n# n = 52\n# n = 53\n# n = 54\n# n = 55\n# n = 56\n# n = 57\n# n = 58\n# n = 59\n# n = 60\n# n = 61\n# n = 62\n# n = 63\n# n = 64\n# n = 65\n# n = 66\n# n = 67\n# n = 68\n# n = 69\n# n = 70\n# n = 71\n# n = 72\n# n = 73\n# n = 74\n# n = 75\n# n = 76\n# n = 77\n# n = 78\n# n = 79\n# n = 80\n# n = 81\n# n = 82\n# n = 83\n# n = 84\n# n = 85\n# n = 86\n# n = 87\n# n = 88\n# n = 89\n# n = 90\n# n = 91\n# n = 92\n# n = 93\n# n = 94\n# n = 95\n# n = 96\n# n = 97\n# n = 98\n# n = 99\n# n = 100\n# n = 101\n# n = 102\n# n = 103\n# n",
      -2.041015625
    ],
    [
      "# Definition for a permutation of a sequence.\n# class Permutation(object):\n#     def __init__(self, x):\n#         self.numbers = x\n#         self.index = len(x) - 1\n#         self.inverse = [x[i] for i in range(len(x))]\n#         self.reversed = x[::-1]\n#     def __str__(self):\n#         return ''.join(str(i) for i in self.numbers)\n#     def __iter__(self):\n#         return (i for i in range(self.index + 1))\n#     def __len__(self):\n#         return self.index\n#     def __getitem__(self, i):\n#         return self.numbers[i]\n#     def __eq__(self, other):\n#         return self.numbers == other.numbers\n\nclass Solution(object):\n    def getPermutation(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        return self.getPermutationRecursion(n, [])\n\n    def getPermutationRecursion(self, n, result):\n        if n == 1:\n            return str(result)\n        for i in range(n):\n            result.append(self.getPermutationRecursion(n-1, result))\n        return str(result)\n\n\nif __name__ == '__main__':\n    print Solution().getPermutation(4)",
      -2.564453125
    ],
    [
      "def getPerrinNumber(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return getPerrinNumber(n-1) + getPerrinNumber(n-2)\n\nprint(getPerrinNumber(5))",
      -2.638671875
    ],
    [
      "def find_nth_perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return find_nth_perrin(n-1) + find_nth_perrin(n-2)\n\n\ndef test():\n    assert find_nth_perrin(3) == 7\n    assert find_nth_perrin(4) == 14\n    assert find_nth_perrin(5) == 21\n    assert find_nth_perrin(6) == 28\n    assert find_nth_perrin(7) == 35\n    assert find_nth_perrin(8) == 42\n    assert find_nth_perrin(9) == 49\n    assert find_nth_perrin(10) == 56\n    assert find_nth_perrin(11) == 63\n    assert find_nth_perrin(12) == 70\n    assert find_nth_perrin(13) == 77\n    assert find_nth_perrin(14) == 84\n    assert find_nth_perrin(15) == 91\n    assert find_nth_perrin(16) == 98\n    assert find_nth_perrin(17) == 105\n    assert find_nth_perrin(18) == 112\n    assert find_nth_perrin(19) == 119\n    assert find_nth_perrin(20) == 126\n    assert find_nth_perrin(21) == 133\n    assert find_nth_perrin(22) == 140\n    assert find_nth_perrin(23) == 147\n    assert find_nth_perrin(24) == 154\n    assert find_nth_perrin(25) == 161\n    assert find_nth_perrin(26) == 168\n    assert find_nth_perrin(27) == 175\n    assert find_nth_perrin(28) == 182\n    assert find_nth_perrin(29) == 189\n    assert find_nth_perrin(30) == 196\n    assert find_",
      -3.583984375
    ],
    [
      "import unittest\nfrom Recursion import perrin_number\n\n\nclass TestPerrinNumber(unittest.TestCase):\n\n    def test_perrin_number(self):\n        self.assertEqual(perrin_number(1), 1)\n        self.assertEqual(perrin_number(2), 2)\n        self.assertEqual(perrin_number(3), 3)\n        self.assertEqual(perrin_number(4), 4)\n        self.assertEqual(perrin_number(5), 5)\n        self.assertEqual(perrin_number(6), 6)\n        self.assertEqual(perrin_number(7), 7)\n        self.assertEqual(perrin_number(8), 8)\n        self.assertEqual(perrin_number(9), 9)\n        self.assertEqual(perrin_number(10), 10)\n        self.assertEqual(perrin_number(11), 11)\n        self.assertEqual(perrin_number(12), 12)\n        self.assertEqual(perrin_number(13), 13)\n        self.assertEqual(perrin_number(14), 14)\n        self.assertEqual(perrin_number(15), 15)\n        self.assertEqual(perrin_number(16), 16)\n        self.assertEqual(perrin_number(17), 17)\n        self.assertEqual(perrin_number(18), 18)\n        self.assertEqual(perrin_number(19), 19)\n        self.assertEqual(perrin_number(20), 20)\n        self.assertEqual(perrin_number(21), 21)\n        self.assertEqual(perrin_number(22), 22)\n        self.assertEqual(perrin_number(23), 23)\n        self.assertEqual(perrin_number(24), 24)\n        self.assertEqual(perrin_number(25), 25)\n        self.assertEqual(perrin_number(26), 26)\n        self.assertEqual(perrin_number(27), 27)\n        self.assertEqual(perrin_number",
      -4.21875
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)\n\nif __name__ == '__main__':\n    assert perrin_number(2) == 3\n    assert perrin_number(3) == 10\n    assert perrin_number(5) == 35\n    assert perrin_number(6) == 126\n    assert perrin_number(10) == 362880\n    assert perrin_number(11) == 39916800",
      -4.24609375
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    >>> perrin_number(1)\n    1\n    >>> perrin_number(2)\n    3\n    >>> perrin_number(3)\n    5\n    >>> perrin_number(4)\n    7\n    >>> perrin_number(5)\n    11\n    >>> perrin_number(6)\n    13\n    >>> perrin_number(7)\n    17\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return perrin_number(n - 1) + perrin_number(n - 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.51171875
    ],
    [
      "def get_nth_perrin(n):\n    \"\"\"\n    For n = 1, 2,..., n\n    Returns then'th perrin number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return get_nth_perrin(n-1) + get_nth_perrin(n-2)\n\n\ndef get_nth_perrin_recursive(n):\n    \"\"\"\n    For n = 1, 2,..., n\n    Returns then'th perrin number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return get_nth_perrin_recursive(n-1) + get_nth_perrin_recursive(n-2)\n\nif __name__ == '__main__':\n    print get_nth_perrin(10)\n    print get_nth_perrin_recursive(10)",
      -4.97265625
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    n is the number that we are looking for\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)\n\n# Test Cases\n# n = 5\n# print(perrin_number(5))\n# n = 4\n# print(perrin_number(4))\n# n = 3\n# print(perrin_number(3))\n# n = 2\n# print(perrin_number(2))\n# n = 1\n# print(perrin_number(1))\n# n = 0\n# print(perrin_number(0))\n# n = -1\n# print(perrin_number(-1))\n# n = -2\n# print(perrin_number(-2))\n# n = -3\n# print(perrin_number(-3))\n# n = -4\n# print(perrin_number(-4))\n# n = -5\n# print(perrin_number(-5))\n# n = -6\n# print(perrin_number(-6))\n# n = -7\n# print(perrin_number(-7))\n# n = -8\n# print(perrin_number(-8))\n# n = -9\n# print(perrin_number(-9))\n# n = -10\n# print(perrin_number(-10))\n# n = -11\n# print(perrin_number(-11))\n# n = -12\n# print(perrin_number(-12))\n# n = -13\n# print(perrin_number(-13))\n# n = -14\n# print(perrin_number(-14))\n# n = -15\n# print(perrin_number(-15))\n# n = -16\n# print(perrin_number(-16))\n# n = -17\n# print(perrin_number(-17))\n# n = -18\n# print(perrin_number(-18))\n# n = -19\n# print(perrin_number(-19))\n# n = -20\n# print(perrin_number(-20))\n# n = -21\n#",
      -4.984375
    ],
    [
      "# Definition for a permutation of a sequence.\n# class Permutation(object):\n#     def __init__(self, nums):\n#         \"\"\"\n#         :type nums: List[int]\n#         \"\"\"\n#         self.nums = nums\n\nclass Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        if n == 1:\n            return '1'\n        if n == 2:\n            return '123'\n        if n == 3:\n            return '1234'\n        if n == 4:\n            return '12345'\n        if n == 5:\n            return '123456'\n        if n == 6:\n            return '1234567'\n        if n == 7:\n            return '12345678'\n        if n == 8:\n            return '123456789'\n        if n == 9:\n            return '1234567890'\n        if n == 10:\n            return '12345678901'\n        if n == 11:\n            return '123456789012'\n        if n == 12:\n            return '1234567890123'\n        if n == 13:\n            return '12345678901234'\n        if n == 14:\n            return '123456789012345'\n        if n == 15:\n            return '1234567890123456'\n        if n == 16:\n            return '12345678901234567'\n        if n == 17:\n            return '123456789012345678'\n        if n == 18:\n            return '1234567890123456789'\n        if n == 19:\n            return '12345678901234567890'\n        if n == 20:\n            return '123456789012345678901'\n        if n == 21:\n            return '1234567890123456789012'\n        if n == 22:\n            return '12345678901234567890123'\n        if n == 23:\n            return '1234567",
      -5.93359375
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 1\n    return perrin_number(n-1) + perrin_number(n-2)\n\nif __name__ == '__main__':\n    assert 3 == perrin_number(3), \"3's perrin number is {}\".format(perrin_number(3))\n    assert 7 == perrin_number(7), \"7's perrin number is {}\".format(perrin_number(7))\n    assert 13 == perrin_number(13), \"13's perrin number is {}\".format(perrin_number(13))\n    assert 14 == perrin_number(14), \"14's perrin number is {}\".format(perrin_number(14))\n    assert 15 == perrin_number(15), \"15's perrin number is {}\".format(perrin_number(15))\n    assert 16 == perrin_number(16), \"16's perrin number is {}\".format(perrin_number(16))\n    assert 17 == perrin_number(17), \"17's perrin number is {}\".format(perrin_number(17))\n    assert 19 == perrin_number(19), \"19's perrin number is {}\".format(perrin_number(19))\n    assert 20 == perrin_number(20), \"20's perrin number is {}\".format(perrin_number(20))\n    assert 21 == perrin_number(21), \"21's perrin number is {}\".format(perrin_number(21))\n    assert 22 == perrin_number(22), \"22's perrin number is {}\".format(perrin_number(22))\n    assert 23 == perrin_number(23), \"23's perrin number is {}\".format(perrin_number(23))\n    assert 24 == perrin_number(24), \"24's perrin number is {}\".format(perrin_number(24))\n    assert 25 == perrin_number(25), \"25's perrin number is {}\".format(perrin_number(25))\n    assert 26 == perrin_number(26), \"26's perrin number",
      -6.12109375
    ],
    [
      "from __future__ import print_function\n\ndef get_perrin(n):\n    \"\"\"\n    Write a function get_perrin(n) to find then'th perrin number.\n    \"\"\"\n\n    if n < 1 or n > 100:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return",
      -6.234375
    ],
    [
      "def get_nth_perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 25\n    if n == 6:\n        return 36\n    if n == 7:\n        return 49\n    if n == 8:\n        return 64\n    if n == 9:\n        return 81\n    if n == 10:\n        return 100\n    if n == 11:\n        return 121\n    if n == 12:\n        return 144\n    if n == 13:\n        return 169\n    if n == 14:\n        return 196\n    if n == 15:\n        return 225\n    if n == 16:\n        return 256\n    if n == 17:\n        return 289\n    if n == 18:\n        return 324\n    if n == 19:\n        return 361\n    if n == 20:\n        return 400\n    if n == 21:\n        return 429\n    if n == 22:\n        return 464\n    if n == 23:\n        return 509\n    if n == 24:\n        return 544\n    if n == 25:\n        return 589\n    if n == 26:\n        return 634\n    if n == 27:\n        return 681\n    if n == 28:\n        return 729\n    if n == 29:\n        return 784\n    if n == 30:\n        return 831\n    if n == 31:\n        return 880\n    if n == 32:\n        return 929\n    if n == 33:\n        return 984\n    if n == 34:\n        return 1031\n    if n == 35:\n        return 1088\n    if n == 36:\n        return 1137\n    if n == 37:\n        return 1186\n    if n == 38:\n        return 1236\n    if n == 39:\n        return 1285\n    if n == 40:\n        return 1334\n    if n == 41:\n        return 1393\n    if n == 42:",
      -6.73828125
    ],
    [
      "from collections import namedtuple\n\n# Recursive\ndef get_perrin_nth(n):\n    return get_perrin_recursive(n, 0, 0, 0)\n\n# Recursive\ndef get_perrin_recursive(n, perrin, total, digit):\n    if n == 1:\n        return perrin\n    if n == 2:\n        return total + digit\n    if n == 3:\n        return total * 10 + digit\n    else:\n        return get_perrin_recursive(n-1, total * 10 + digit, total * 10 + digit, digit)\n\n# Iterative\ndef get_perrin_iterative(n):\n    return get_perrin_iterative_recursive(n, 0, 0, 0)\n\n# Iterative\ndef get_perrin_iterative_recursive(n, perrin, total, digit):\n    if n == 1:\n        return perrin\n    if n == 2:\n        return total + digit\n    if n == 3:\n        return total * 10 + digit\n    else:\n        return get_perrin_iterative_recursive(n-1, total * 10 + digit, total * 10 + digit, digit)\n\n# Iterative\ndef get_perrin_iterative_recursive_with_extra(n):\n    total = 0\n    digit = 0\n    while n > 0:\n        digit *= 10\n        total += digit\n        n -= 1\n    return total + digit\n\n# Iterative\ndef get_perrin_iterative_with_extra(n):\n    total = 0\n    digit = 0\n    while n > 0:\n        digit += 1\n        total += digit\n        n -= 1\n    return total + digit\n\n# Iterative\ndef get_perrin_iterative_with_extra_and_break(n):\n    total = 0\n    digit = 0\n    while n > 0:\n        digit *= 10\n        total += digit\n        n -= 1\n        if n == 1:\n            break\n    return total + digit\n\n# Iterative\ndef get_perrin_iterative_with_extra_and_break_with_break(n):\n    total = 0",
      -6.84765625
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 5040\n    else:\n        return perrin_number(n - 1) + perrin_number(n - 2) + perrin_number(n - 3) + perrin_number(n - 4) + perrin_number(n - 5) + perrin_number(n - 6) + perrin_number(n - 7)\n\ndef main():\n    print(perrin_number(7))\n\nif __name__ == \"__main__\":\n    main()",
      -7.27734375
    ],
    [
      "def perrin_number(n, base=10):\n    if n == 1:\n        return base\n    else:\n        return perrin_number(n-1, base*10) + perrin_number(n-1, base)\n\nif __name__ == '__main__':\n    print(perrin_number(4))",
      -7.3671875
    ],
    [
      "from math import log\n\ndef perrin_n(n, base=2):\n    \"\"\"\n    :type n: int\n    :type base: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:\n        return 256\n    if n == 10:\n        return 512\n    if n == 11:\n        return 1024\n    if n == 12:\n        return 2048\n    if n == 13:\n        return 4096\n    if n == 14:\n        return 8192\n    if n == 15:\n        return 16384\n    if n == 16:\n        return 32768\n    if n == 17:\n        return 65536\n    if n == 18:\n        return 131072\n    if n == 19:\n        return 262144\n    if n == 20:\n        return 524288\n    if n == 21:\n        return 1048576\n    if n == 22:\n        return 2097152\n    if n == 23:\n        return 4194304\n    if n == 24:\n        return 8388608\n    if n == 25:\n        return 16777216\n    if n == 26:\n        return 33554432\n    if n == 27:\n        return 67108864\n    if n == 28:\n        return 134217728\n    if n == 29:\n        return 268435456\n    if n == 30:\n        return 536870912\n    if n == 31:\n        return 1073741824\n    if n == 32:\n        return 2147483648\n    if n == 33:\n        return 4294967296\n    if n == 34:\n        return 8589934592\n    if n == 35:\n        return 17179869184\n    if n == 36:\n        return 34359738368\n    if n == 37:\n        return 68719",
      -7.375
    ],
    [
      "def perrin_number(n):\n    if n == 1:\n        return 1\n    return perrin_number(n - 1) + perrin_number(n - 2)\n\nif __name__ == \"__main__\":\n    assert perrin_number(1) == 1\n    assert perrin_number(2) == 5\n    assert perrin_number(3) == 15\n    assert perrin_number(4) == 52\n    assert perrin_number(5) == 215\n    assert perrin_number(6) == 1025\n    assert perrin_number(7) == 5215\n    assert perrin_number(8) == 26215\n    assert perrin_number(9) == 109825\n    assert perrin_number(10) == 51825\n    assert perrin_number(11) == 26325\n    assert perrin_number(12) == 109125\n    assert perrin_number(13) == 54325\n    assert perrin_number(14) == 24575\n    assert perrin_number(15) == 104925\n    assert perrin_number(16) == 52875\n    assert perrin_number(17) == 25725\n    assert perrin_number(18) == 109575\n    assert perrin_number(19) == 55975\n    assert perrin_number(20) == 26375\n    assert perrin_number(21) == 109975\n    assert perrin_number(22) == 55875\n    assert perrin_number(23) == 26325\n    assert perrin_number(24) == 109875\n    assert perrin_number(25) == 55775\n    assert perrin_number(26) == 25725\n    assert perrin_number(27) == 109575\n    assert perrin_number(28) == 55775\n    assert perrin_number(29) == 25725\n    assert perrin_number(30) == 109575\n    assert perrin_number(31) == 55775\n    assert perrin_number(32) == 25725\n    assert perrin_number(33) == 109575\n    assert perrin_number(34) == 55775\n    assert per",
      -7.8515625
    ],
    [
      "import math\n\n\ndef perrin_number(n):\n    if n == 1:\n        return 1\n    return perrin_number(n - 1) + perrin_number(n - 2)\n\n\ndef main():\n    \"\"\"\n    main() function\n    \"\"\"\n    print(perrin_number(10))\n\n\nif __name__ == '__main__':\n    main()",
      -8.0703125
    ],
    [
      "# Recursion\ndef perrin_num(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin_num(n-1) + perrin_num(n-2)\n\n\n# Iterative\ndef perrin_num_iterative(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin_num_iterative(n-1) + perrin_num_iterative(n-2)\n\n\n# The correct way\ndef perrin_num_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin_num_recursive(n-1) + perrin_num_recursive(n-2)\n\n\n# Testing\ndef test_perrin_num():\n    assert perrin_num(3) == 8\n    assert perrin_num_iterative(3) == 8\n    assert perrin_num_recursive(3) == 8\n\n\ndef test_perrin_num_2():\n    assert perrin_num(10) == 26320\n    assert perrin_num_iterative(10) == 26320\n    assert perrin_num_recursive(10) == 26320\n\n\nif __name__ == '__main__':\n    test_perrin_num()\n    test_perrin_num_2()",
      -8.109375
    ],
    [
      "from collections import defaultdict\nfrom functools import reduce\nfrom operator import mul\n\n\ndef get_perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\n\ndef get_perrin_recursion(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return get_perrin_recursion(n - 1) + get_perrin_recursion(n - 2)\n\n\ndef get_perrin_iterative(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return reduce(mul, range(1, n + 1), 1)\n\n\ndef get_perrin_recursive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return reduce(mul, range(1, n + 1), 1)\n\n\ndef get_perrin_dp(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return get_perrin_dp(n - 1) + get_perrin_dp(n - 2)\n\n\ndef get_perrin_dp_iterative(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return get_perrin_dp_iterative(n - 1) + get_perrin_dp_iterative(n - 2)\n\n\ndef get_perrin_dp_recursive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return get_perrin_dp_recursive(n - 1) + get_perrin_dp_recursive(n - 2)\n\n\ndef get_perrin_dp_recursive",
      -8.28125
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n    def perrinNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 5\n        if n == 4:\n            return 15\n        if n == 5:\n            return 35\n        if n == 6:\n            return 70\n        if n == 7:\n            return 210\n        if n == 8:\n            return 465\n        if n == 9:\n            return 1215\n        if n == 10:\n            return 3285\n        return n * self.perrinNumber(n - 1)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/perrin-number/solution/\n\nApproach #1: Recursion [Accepted]\nComplexity Analysis\nTime Complexity: O(log(n)). We can solve this problem by using the recursion.\nSpace Complexity: O(1). We can use the stack.\n\n# 2ms 99.81%\nclass Solution {\n    public int perrinNumber(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 5;\n        }\n        if (n == 4) {\n            return 15;\n        }\n        if (n == 5) {\n            return 35;\n        }\n        if (n == 6) {\n            return 70;\n        }\n        if (n == 7) {\n            return 210;\n        }\n        if (n == 8) {\n            return 465;\n        }\n        if (n == 9) {\n            return 1215;\n        }\n        if (n == 10) {\n            return 3285;\n        }\n        return n * perrin",
      -8.8984375
    ],
    [
      "# Definition for a permutation of a group of size n.\nclass Permutation:\n    def __init__(self, numbers):\n        self.numbers = numbers\n        self.size = len(numbers)\n        self.inverse = self.inverse_permutation()\n\n    def __str__(self):\n        return \"Permutation: {0}\".format(self.numbers)\n\n    def __repr__(self):\n        return str(self)\n\n    def __eq__(self, other):\n        return self.numbers == other.numbers\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __iter__(self):\n        return self.numbers.__iter__()\n\n    def __getitem__(self, index):\n        return self.numbers[index]\n\n    def __len__(self):\n        return len(self.numbers)\n\n    def __contains__(self, item):\n        return item in self.numbers\n\n    def __bool__(self):\n        return bool(self.numbers)\n\n    def __add__(self, other):\n        return Permutation(self.numbers + other.numbers)\n\n    def __radd__(self, other):\n        return Permutation(other.numbers + self.numbers)\n\n    def __mul__(self, other):\n        return Permutation(self.numbers * other.numbers)\n\n    def __rmul__(self, other):\n        return Permutation(other.numbers * self.numbers)\n\n    def __sub__(self, other):\n        return Permutation(self.numbers - other.numbers)\n\n    def __rsub__(self, other):\n        return Permutation(other.numbers - self.numbers)\n\n    def __iter__(self):\n        for item in self.numbers:\n            yield item\n\n    def __get_index(self, number):\n        if number in self.numbers:\n            return self.numbers.index(number)\n        else:\n            return -1\n\n    def __inverse_permutation(self):\n        inv",
      -9.125
    ],
    [
      "#!/usr/bin/env python\n\ndef perrin_number(n, x, prev_x, prev_n):\n    \"\"\"\n    Input:\n    n -- int, the number to find\n    x -- int, the current position\n    prev_x -- int, the previous position\n    prev_n -- int, the previous number\n    \"\"\"\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    if n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    el",
      -9.671875
    ],
    [
      "# Definition for a permutation of a sequence.\nclass Permutation(object):\n    def __init__(self, num):\n        \"\"\"\n        :type num: int\n        \"\"\"\n        self.num = num\n        self.items = []\n        self.size = 0\n\n    def __iter__(self):\n        for i in range(0, self.size):\n            yield self.items[i]\n\n    def __getitem__(self, index):\n        return self.items[index]\n\n    def __len__(self):\n        return self.size\n\n    def __str__(self):\n        return str(self.num)\n\n    def __repr__(self):\n        return str(self.num)\n\n    def __add__(self, other):\n        if self.size < other.size:\n            return other + self\n        else:\n            return self\n\n    def __mul__(self, other):\n        if self.size < other.size:\n            return Permutation(self.num * other.num)\n        else:\n            return Permutation(self.num * other.num)\n\n    def __eq__(self, other):\n        return self.size == other.size and self.num == other.num\n\n    def __lt__(self, other):\n        if self.size < other.size:\n            return True\n        else:\n            return False\n\n    def __le__(self, other):\n        if self.size < other.size:\n            return True\n        else:\n            return False\n\n    def __gt__(self, other):\n        if self.size > other.size:\n            return True\n        else:\n            return False\n\n    def __ge__(self, other):\n        if self.size > other.size:\n            return True\n        else:\n            return False\n\n\ndef get_permutation(n, size=0):\n    if size == 0:\n        return Permutation(n)\n    else:\n        return get_permutation(n, size - 1) + get_permutation(n, size)\n\n\ndef get_permutation_recursion(n, size=0):\n    if size == 0:\n        return",
      -9.7734375
    ],
    [
      "# Definition for a permutation of a given array\n# class Permutation(object):\n#     def __init__(self, x):\n#         self.nums = list(x)\n#         self.rank = len(x)\n#         self.permuted_nums = []\n#         self.rank = len(x)\n\nclass Solution(object):\n    def findNthPermutation(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        if n < 1:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 3, 2, 4]\n        if n == 5:\n            return [1, 4, 2, 3, 5]\n        if n == 6:\n            return [1, 5, 3, 4, 2, 6]\n        if n == 7:\n            return [1, 6, 4, 2, 5, 3, 7]\n        if n == 8:\n            return [1, 7, 5, 3, 6, 4, 2, 8]\n        if n == 9:\n            return [1, 8, 6, 4, 2, 7, 5, 3, 9]\n        if n == 10:\n            return [1, 9, 7, 5, 3, 8, 6, 4, 2, 10]\n        if n == 11:\n            return [1, 10, 8, 6, 4, 2, 9, 7, 5, 3, 11]\n        if n == 12:\n            return [1, 11, 9, 7, 5, 3, 10, 8, 6, 4, 2, 12]\n        if n == 13:\n            return [1, 12, 10, 8, 6, 4, 2, 11, 9, 7, 5, 3, 13]\n        if n == 14:\n            return [1, 13, 11, 9, 7, 5, 3, 12, 10, 8, 6, 4, 2, 14]\n        if n == 15:\n            return [1, 14,",
      -9.9765625
    ],
    [
      "class Perrin(object):\n\n    def __init__(self, n):\n        self.n = n\n\n    def print_nth_perrin(self, n):\n        if n == 0:\n            print(self.n)\n        else:\n            self.nth_perrin(n - 1)\n\n    def nth_perrin(self, n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 5\n        elif n == 5:\n            return 6\n        elif n == 6:\n            return 7\n        else:\n            return self.nth_perrin(n - 1) + self.nth_perrin(n - 2) + self.nth_perrin(n - 3) + self.nth_perrin(n - 4) + self.nth_perrin(n - 5) + self.nth_perrin(n - 6)\n\n\nif __name__ == \"__main__\":\n    n = Perrin(7)\n    n.print_nth_perrin(0)\n    n.print_nth_perrin(1)\n    n.print_nth_perrin(2)\n    n.print_nth_perrin(3)\n    n.print_nth_perrin(4)\n    n.print_nth_perrin(5)\n    n.print_nth_perrin(6)",
      -10.078125
    ],
    [
      "def perrin_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    return perrin_number(n - 1) + perrin_number(n - 2)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(perrin_number(n))",
      -10.3046875
    ],
    [
      "def find_perrin(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * find_perrin(n - 1)\n\nif __name__ == \"__main__\":\n    print find_perrin(2)\n    print find_perrin(3)\n    print find_perrin(4)\n    print find_perrin(5)\n    print find_perrin(6)\n    print find_perrin(7)\n    print find_perrin(8)\n    print find_perrin(9)\n    print find_perrin(10)\n    print find_perrin(11)\n    print find_perrin(12)\n    print find_perrin(13)\n    print find_perrin(14)\n    print find_perrin(15)\n    print find_perrin(16)\n    print find_perrin(17)\n    print find_perrin(18)\n    print find_perrin(19)\n    print find_perrin(20)\n    print find_perrin(21)\n    print find_perrin(22)\n    print find_perrin(23)\n    print find_perrin(24)\n    print find_perrin(25)\n    print find_perrin(26)\n    print find_perrin(27)\n    print find_perrin(28)\n    print find_perrin(29)\n    print find_perrin(30)\n    print find_perrin(31)\n    print find_perrin(32)\n    print find_perrin(33)\n    print find_perrin(34)\n    print find_perrin(35)\n    print find_perrin(36)\n    print find_perrin(37)\n    print find_perrin(38)\n    print find_perrin(39)\n    print find_perrin(40)\n    print find_perrin(41)\n    print find_perrin(42)\n    print find_perrin(43)\n    print find_perrin(44)",
      -11.25
    ],
    [
      "class PerrinNumber(object):\n    @staticmethod\n    def _get_perrin_number(n, total):\n        if n == 0:\n            return total\n        else:\n            return PerrinNumber._get_perrin_number(n - 1, total * n)\n\n    @staticmethod\n    def get_perrin_number(n):\n        return PerrinNumber._get_perrin_number(n, 1)\n\nif __name__ == '__main__':\n    assert PerrinNumber.get_perrin_number(100) == 1385\n    assert PerrinNumber.get_perrin_number(101) == 1225\n    assert PerrinNumber.get_perrin_number(102) == 1275\n    assert PerrinNumber.get_perrin_number(103) == 1325\n    assert PerrinNumber.get_perrin_number(104) == 1325\n    assert PerrinNumber.get_perrin_number(105) == 1325\n    assert PerrinNumber.get_perrin_number(106) == 1325\n    assert PerrinNumber.get_perrin_number(107) == 1325\n    assert PerrinNumber.get_perrin_number(108) == 1325\n    assert PerrinNumber.get_perrin_number(109) == 1325\n    assert PerrinNumber.get_perrin_number(110) == 1325\n    assert PerrinNumber.get_perrin_number(111) == 1325\n    assert PerrinNumber.get_perrin_number(112) == 1325\n    assert PerrinNumber.get_perrin_number(113) == 1325\n    assert PerrinNumber.get_perrin_number(114) == 1325\n    assert PerrinNumber.get_perrin_number(115) == 1325\n    assert PerrinNumber.get_perrin_number(116) == 1325\n    assert PerrinNumber.get_perrin_number(117) == 1325\n    assert PerrinNumber.get_perrin_number(118) == 1325\n    assert PerrinNumber.get_perrin_number(119) == 1325\n    assert PerrinNumber.get_perrin_number(120) == 1325",
      -11.7421875
    ],
    [
      "def perrin_nth(n, m):\n    \"\"\"\n    Recursive function to find the nth perrin number using recursion.\n    Input:\n    n -- the number of perrin numbers to be found.\n    m -- the number of perrin numbers that have already been found.\n    Output:\n    then'th perrin number.\n    \"\"\"\n    if m == n:\n        return 1\n    else:\n        return perrin_nth(n, m+1) * (m+1) / (m*(m+1))\n\ndef perrin_nth_recursive(n, m):\n    \"\"\"\n    Recursive function to find then'th perrin number using recursion.\n    Input:\n    n -- the number of perrin numbers to be found.\n    m -- the number of perrin numbers that have already been found.\n    Output:\n    then'th perrin number.\n    \"\"\"\n    if m == n:\n        return 1\n    else:\n        return perrin_nth_recursive(n, m+1) * (m+1) / (m*(m+1))\n\nif __name__ == \"__main__\":\n    print(perrin_nth(10, 1))\n    print(perrin_nth(10, 2))\n    print(perrin_nth(10, 3))\n    print(perrin_nth(10, 4))\n    print(perrin_nth(10, 5))\n    print(perrin_nth(10, 6))\n    print(perrin_nth(10, 7))\n    print(perrin_nth(10, 8))\n    print(perrin_nth(10, 9))\n    print(perrin_nth(10, 10))\n    print(perrin_nth(10, 11))\n    print(perrin_nth(10, 12))\n    print(perrin_nth(10, 13))\n    print(perrin_nth(10, 14))\n    print(perrin_nth(10, 15))\n    print(perrin_nth(10, 16))\n    print(perrin_nth(10,",
      -13.5546875
    ],
    [
      "# @include\ndef perrin_n(n):\n    def _perrin_n(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n % 2 == 0:\n            return _perrin_n(n / 2) * (n - 1)\n        else:\n            return _perrin_n(n / 2) * (n - 2)\n    return _perrin_n(n)\n# @exclude\n\n\ndef main():\n    sol = perrin_n(100)\n    print(sol)\n    assert 9 == sol\n\n\nif __name__ == '__main__':\n    main()",
      -16.765625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}