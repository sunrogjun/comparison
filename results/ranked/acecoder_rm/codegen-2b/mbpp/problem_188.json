{
  "problem": {
    "task_id": "MBPP/199",
    "prompt": "Write a python function to find highest power of 2 less than or equal to given number.",
    "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
    "test_list": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ],
    "challenge_test_list": [],
    "problem_id": 188
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def find_max_power_of_two(n):\n    \"\"\"\n    :param n: a number\n    :return: the highest power of two less than or equal to n\n    \"\"\"\n    return n - (n & (n-1))\n\nif __name__ == \"__main__\":\n    assert find_max_power_of_two(3) == 2\n    assert find_max_power_of_two(4) == 4\n    assert find_max_power_of_two(5) == 4\n    assert find_max_power_of_two(6) == 4\n    assert find_max_power_of_two(7) == 4\n    assert find_max_power_of_two(8) == 8\n    assert find_max_power_of_two(9) == 8\n    assert find_max_power_of_two(10) == 8\n    assert find_max_power_of_two(11) == 8\n    assert find_max_power_of_two(12) == 8\n    assert find_max_power_of_two(13) == 8\n    assert find_max_power_of_two(14) == 8\n    assert find_max_power_of_two(15) == 8\n    assert find_max_power_of_two(16) == 16\n    assert find_max_power_of_two(17) == 16\n    assert find_max_power_of_two(18) == 16\n    assert find_max_power_of_two(19) == 16\n    assert find_max_power_of_two(20) == 16\n    assert find_max_power_of_two(21) == 16\n    assert find_max_power_of_two(22) == 16\n    assert find_max_power_of_two(23) == 16\n    assert find_max_power_of_two(24) == 16\n    assert find_max_power_of_two(25) == 16\n    assert find_max_power_of_two(26) == 16\n    assert find_max_power_of_two(27) == 16\n    assert find_max_power_of_two(28) == 16",
      5.57421875
    ],
    [
      "def highest_power_of_2(number):\n    \"\"\"\n    For number = 9, highest_power_of_2(number) = 4.\n    For number = 10, highest_power_of_2(number) = 4.\n    For number = 12, highest_power_of_2(number) = 8.\n    For number = 15, highest_power_of_2(number) = 8.\n    For number = 18, highest_power_of_2(number) = 16.\n    For number = 21, highest_power_of_2(number) = 16.\n    For number = 24, highest_power_of_2(number) = 32.\n    For number = 27, highest_power_of_2(number) = 32.\n    For number = 30, highest_power_of_2(number) = 64.\n    For number = 33, highest_power_of_2(number) = 64.\n    For number = 36, highest_power_of_2(number) = 128.\n    For number = 39, highest_power_of_2(number) = 128.\n    For number = 42, highest_power_of_2(number) = 256.\n    For number = 45, highest_power_of_2(number) = 256.\n    For number = 48, highest_power_of_2(number) = 512.\n    For number = 51, highest_power_of_2(number) = 512.\n    For number = 54, highest_power_of_2(number) = 1024.\n    For number = 57, highest_power_of_2(number) = 1024.\n    For number = 60, highest_power_of_2(number) = 2048.\n    For number = 63, highest_power_of_2(number) = 2048.\n    For number = 66, highest_power_of_2(number) = 4096.\n    For number = 69, highest_power_of_2(number) = 4096.\n    For number = 72, highest_power_of_2(number) = 8192.\n    For number = 75, highest_power_of_2(number) = 8192.\n    For number = 78, highest_power_of_2(",
      2.251953125
    ],
    [
      "#!/bin/python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef getHighestPowerOf2(num):\n    \"\"\"\n    >>> getHighestPowerOf2(1)\n    1\n    >>> getHighestPowerOf2(2)\n    2\n    >>> getHighestPowerOf2(4)\n    4\n    >>> getHighestPowerOf2(8)\n    8\n    >>> getHighestPowerOf2(16)\n    16\n    >>> getHighestPowerOf2(32)\n    32\n    >>> getHighestPowerOf2(64)\n    64\n    >>> getHighestPowerOf2(128)\n    128\n    >>> getHighestPowerOf2(256)\n    256\n    >>> getHighestPowerOf2(512)\n    512\n    >>> getHighestPowerOf2(1024)\n    1024\n    >>> getHighestPowerOf2(2048)\n    2048\n    >>> getHighestPowerOf2(4096)\n    4096\n    >>> getHighestPowerOf2(8192)\n    8192\n    >>> getHighestPowerOf2(16384)\n    16384\n    >>> getHighestPowerOf2(32768)\n    32768\n    >>> getHighestPowerOf2(65536)\n    65536\n    >>> getHighestPowerOf2(131072)\n    131072\n    >>> getHighestPowerOf2(262144)\n    262144\n    >>> getHighestPowerOf2(524288)\n    524288\n    >>> getHighestPowerOf2(1048576)\n    1048576\n    >>> getHighestPowerOf2(2097152)\n    2097152\n    >>> getHighestPowerOf2(4194304)\n    4194304\n    >>> getHighestPowerOf2(8388608)\n    8388608\n    >>> getHighestPowerOf2(16777216)\n    16777216\n    >>> getHighestPowerOf2(33554432)\n    33554432\n    >>> getHighestPowerOf2(67108864)\n    67108864\n    >>> getHighestPowerOf2(134217728",
      1.4755859375
    ],
    [
      "def highest_pow2_num(num):\n    if num == 0:\n        return 1\n    else:\n        power = 1\n        while num % 2 == 0:\n            power *= 2\n            num /= 2\n        return power\n\n\nprint highest_pow2_num(16)\n#>>> 2\n\nprint highest_pow2_num(10)\n#>>> 4\n\nprint highest_pow2_num(20)\n#>>> 8\n\nprint highest_pow2_num(100)\n#>>> 16\n\nprint highest_pow2_num(1000)\n#>>> 64",
      1.44140625
    ],
    [
      "import math\n\ndef highest_power_of_2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return math.floor(math.log(num, 2))\n\nif __name__ == \"__main__\":\n    print highest_power_of_2(0)\n    print highest_power_of_2(1)\n    print highest_power_of_2(2)\n    print highest_power_of_2(3)\n    print highest_power_of_2(4)\n    print highest_power_of_2(5)\n    print highest_power_of_2(6)\n    print highest_power_of_2(7)\n    print highest_power_of_2(8)\n    print highest_power_of_2(9)\n    print highest_power_of_2(10)\n    print highest_power_of_2(11)\n    print highest_power_of_2(12)\n    print highest_power_of_2(13)\n    print highest_power_of_2(14)\n    print highest_power_of_2(15)\n    print highest_power_of_2(16)\n    print highest_power_of_2(17)\n    print highest_power_of_2(18)\n    print highest_power_of_2(19)\n    print highest_power_of_2(20)\n    print highest_power_of_2(21)\n    print highest_power_of_2(22)\n    print highest_power_of_2(23)\n    print highest_power_of_2(24)\n    print highest_power_of_2(25)\n    print highest_power_of_2(26)\n    print highest_power_of_2(27)\n    print highest_power_of_2(28)\n    print highest_power_of_2(29)\n    print highest_power_of_2(30)\n    print highest_power_of_2(31)\n    print highest_power_of_2(32)\n    print highest_power_of_2(33)\n    print highest_power_",
      1.3017578125
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return x\n        if n == 2:\n            return x * x\n        if n == 3:\n            return x * x * x\n        if n == 4:\n            return x * x * x * x\n        if n == 5:\n            return x * x * x * x * x\n        if n == 6:\n            return x * x * x * x * x * x\n        if n == 7:\n            return x * x * x * x * x * x * x\n        if n == 8:\n            return x * x * x * x * x * x * x * x\n        if n == 9:\n            return x * x * x * x * x * x * x * x * x\n        if n == 10:\n            return x * x * x * x * x * x * x * x * x * x\n        if n == 11:\n            return x * x * x * x * x * x * x * x * x * x * x\n        if n == 12:\n            return x * x * x * x * x * x * x * x * x * x * x * x\n        if n == 13:\n            return x * x * x * x * x * x * x * x * x * x * x * x * x\n        if n == 14:\n            return x * x * x * x * x * x * x * x * x * x * x * x * x * x\n        if n == 15:\n            return x * x * x * x * x * x * x * x * x * x * x * x * x * x * x\n        if n == 16:\n            return x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x\n        if n == 17:\n            return x * x * x",
      1.255859375
    ],
    [
      "def highest_pow_of_2(num):\n    if num == 0:\n        return 1\n    else:\n        return highest_pow_of_2(num-1) if num & 1 else highest_pow_of_2(num/2)\n\nprint highest_pow_of_2(1)\nprint highest_pow_of_2(2)\nprint highest_pow_of_2(4)\nprint highest_pow_of_2(8)\nprint highest_pow_of_2(16)\nprint highest_pow_of_2(32)\nprint highest_pow_of_2(64)\nprint highest_pow_of_2(128)\nprint highest_pow_of_2(256)\nprint highest_pow_of_2(512)\nprint highest_pow_of_2(1024)\nprint highest_pow_of_2(2048)\nprint highest_pow_of_2(4096)\nprint highest_pow_of_2(8192)\nprint highest_pow_of_2(16384)\nprint highest_pow_of_2(32768)\nprint highest_pow_of_2(65536)\nprint highest_pow_of_2(131072)\nprint highest_pow_of_2(262144)\nprint highest_pow_of_2(524288)\nprint highest_pow_of_2(1048576)\nprint highest_pow_of_2(2097152)\nprint highest_pow_of_2(4194304)\nprint highest_pow_of_2(8388608)\nprint highest_pow_of_2(16777216)\nprint highest_pow_of_2(33554432)\nprint highest_pow_of_2(67108864)\nprint highest_pow_of_2(134217728)\nprint highest_pow_of_2(268435456)\nprint highest_pow_of_2(536870912)\nprint highest_pow_of_2(1073741824)",
      1.2216796875
    ],
    [
      "def highest_power_of_2(n):\n    power = 1\n    while n > 1:\n        if n & 1:\n            power = n\n        n = n >> 1\n    return power\n\n\nif __name__ == '__main__':\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(128))\n    print(highest_power_of_2(15))\n    print(highest_power_of_2(1))\n    print(highest_power_of_2(0))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(17))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(31))\n    print(highest_power_of_2(32))\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(1000))\n    print(highest_power_of_2(100000))",
      0.6396484375
    ],
    [
      "def getHighestPowerOf2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    assert n > 0\n    # https://www.youtube.com/watch?v=F6X8jNlZ-pE\n    # https://en.wikipedia.org/wiki/Highest_power_of_two\n    # https://en.wikipedia.org/wiki/Binary_logarithm\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    # https://en.wikipedia.",
      0.380126953125
    ],
    [
      "def highest_power_of_2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return 2 ** (int(math.log(num, 2)))\n\n\nif __name__ == '__main__':\n    assert highest_power_of_2(2 ** (128 - 1)) == 2 ** (128 - 1)\n    assert highest_power_of_2(2 ** (128 - 2)) == 2 ** (128 - 2)\n    assert highest_power_of_2(2 ** (128 - 3)) == 2 ** (128 - 3)\n    assert highest_power_of_2(2 ** (128 - 4)) == 2 ** (128 - 4)\n    assert highest_power_of_2(2 ** (128 - 5)) == 2 ** (128 - 5)\n    assert highest_power_of_2(2 ** (128 - 6)) == 2 ** (128 - 6)\n    assert highest_power_of_2(2 ** (128 - 7)) == 2 ** (128 - 7)\n    assert highest_power_of_2(2 ** (128 - 8)) == 2 ** (128 - 8)\n    assert highest_power_of_2(2 ** (128 - 9)) == 2 ** (128 - 9)\n    assert highest_power_of_2(2 ** (128 - 10)) == 2 ** (128 - 10)\n    assert highest_power_of_2(2 ** (128 - 11)) == 2 ** (128 - 11)\n    assert highest_power_of_2(2 ** (128 - 12)) == 2 ** (128 - 12)\n    assert highest_power_of_2(2 ** (128 - 13)) == 2 ** (128 - 13)\n    assert highest_power_of_2(2 ** (128 - 14)) == 2 ** (128 - 14)\n    assert highest_power_of_2(2 ** (128 - 15)) == 2 ** (128 - 15)\n    assert highest_power_of_2(2 ** (128 - 16)) == 2 ** (128 - 16)\n    assert highest_power_of_2(2 ** (128 - 17)) == 2 ** (128 - 17)\n    assert highest_power_of_2",
      -0.31640625
    ],
    [
      "def highest_power_of_2(n):\n    return (n & -(n & -n))\n\nif __name__ == '__main__':\n    print highest_power_of_2(1)\n    print highest_power_of_2(2)\n    print highest_power_of_2(3)\n    print highest_power_of_2(4)\n    print highest_power_of_2(5)\n    print highest_power_of_2(6)\n    print highest_power_of_2(7)\n    print highest_power_of_2(8)\n    print highest_power_of_2(9)\n    print highest_power_of_2(10)\n    print highest_power_of_2(11)\n    print highest_power_of_2(12)\n    print highest_power_of_2(13)\n    print highest_power_of_2(14)\n    print highest_power_of_2(15)\n    print highest_power_of_2(16)\n    print highest_power_of_2(17)\n    print highest_power_of_2(18)\n    print highest_power_of_2(19)\n    print highest_power_of_2(20)\n    print highest_power_of_2(21)\n    print highest_power_of_2(22)\n    print highest_power_of_2(23)\n    print highest_power_of_2(24)\n    print highest_power_of_2(25)\n    print highest_power_of_2(26)\n    print highest_power_of_2(27)\n    print highest_power_of_2(28)\n    print highest_power_of_2(29)\n    print highest_power_of_2(30)\n    print highest_power_of_2(31)\n    print highest_power_of_2(32)\n    print highest_power_of_2(33)\n    print highest_power_of_2(34)\n    print highest_power_of_2(35)\n    print highest_power_of_2(36)\n    print highest_power_",
      -0.447021484375
    ],
    [
      "def highest_power_of_2(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num == 4:\n        return 8\n    if num == 5:\n        return 16\n    if num == 6:\n        return 32\n    if num == 7:\n        return 64\n    if num == 8:\n        return 128\n    if num == 9:\n        return 256\n    if num == 10:\n        return 512\n    if num == 11:\n        return 1024\n    if num == 12:\n        return 2048\n    if num == 13:\n        return 4096\n    if num == 14:\n        return 8192\n    if num == 15:\n        return 16384\n    if num == 16:\n        return 32768\n    if num == 17:\n        return 65536\n    if num == 18:\n        return 131072\n    if num == 19:\n        return 262144\n    if num == 20:\n        return 524288\n    if num == 21:\n        return 1048576\n    if num == 22:\n        return 2097152\n    if num == 23:\n        return 4194304\n    if num == 24:\n        return 8388608\n    if num == 25:\n        return 16777216\n    if num == 26:\n        return 33554432\n    if num == 27:\n        return 67108864\n    if num == 28:\n        return 134217728\n    if num == 29:\n        return 268435456\n    if num == 30:\n        return 536870912\n    if num == 31:\n        return 1073741824\n    if num == 32:\n        return 2147483648\n\n\nprint highest_power_of_2(30)",
      -0.548828125
    ],
    [
      "from functools import reduce\n\ndef highest_power_of_two_less_than_or_equal_to(num):\n    \"\"\"\n    >>> highest_power_of_two_less_than_or_equal_to(2)\n    2\n    >>> highest_power_of_two_less_than_or_equal_to(3)\n    4\n    >>> highest_power_of_two_less_than_or_equal_to(4)\n    4\n    >>> highest_power_of_two_less_than_or_equal_to(5)\n    8\n    >>> highest_power_of_two_less_than_or_equal_to(8)\n    8\n    >>> highest_power_of_two_less_than_or_equal_to(9)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to(16)\n    16\n    >>> highest_power_of_two_less_than_or_equal_to(17)\n    32\n    >>> highest_power_of_two_less_than_or_equal_to(32)\n    32\n    >>> highest_power_of_two_less_than_or_equal_to(33)\n    64\n    >>> highest_power_of_two_less_than_or_equal_to(64)\n    64\n    >>> highest_power_of_two_less_than_or_equal_to(65)\n    128\n    >>> highest_power_of_two_less_than_or_equal_to(128)\n    128\n    >>> highest_power_of_two_less_than_or_equal_to(129)\n    256\n    >>> highest_power_of_two_less_than_or_equal_to(256)\n    256\n    >>> highest_power_of_two_less_than_or_equal_to(257)\n    512\n    >>> highest_power_of_two_less_than_or_equal_to(512)\n    512\n    >>> highest_power_of_two_less_than_or_equal_to(513)\n    1024\n    >>> highest_power_of_two_",
      -0.70849609375
    ],
    [
      "def highest_power_of_2(num):\n    '''\n    :type num: int\n    :rtype: int\n    '''\n    if num == 0:\n        return 1\n    \n    # get the highest power of 2 less than num\n    num_power_2 = 2\n    while num_power_2 < num:\n        num_power_2 *= 2\n\n    # return the highest power of 2 less than num\n    return num_power_2\n\n\nif __name__ == '__main__':\n    print highest_power_of_2(10)\n    print highest_power_of_2(6)\n    print highest_power_of_2(16)\n    print highest_power_of_2(20)\n    print highest_power_of_2(100)\n    print highest_power_of_2(200)",
      -0.85693359375
    ],
    [
      "def highest_power_of_two(num):\n    \"\"\"\n    >>> highest_power_of_two(5)\n    2\n    >>> highest_power_of_two(15)\n    4\n    >>> highest_power_of_two(20)\n    4\n    >>> highest_power_of_two(30)\n    8\n    >>> highest_power_of_two(31)\n    8\n    \"\"\"\n    \n    return 2 ** (int(math.floor(math.log(num, 2))) + 1)\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def highest_power_of_2(n):\n    if n == 0:\n        return 1\n    return highest_power_of_2(n / 2) * 2\n\n# Test Cases\n# highest_power_of_2(2) == 2\n# highest_power_of_2(3) == 4\n# highest_power_of_2(4) == 4\n# highest_power_of_2(5) == 8\n# highest_power_of_2(6) == 8\n# highest_power_of_2(7) == 8\n# highest_power_of_2(8) == 8\n\n# Test\nn = 9\nprint(highest_power_of_2(n))",
      -0.85693359375
    ],
    [
      "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while i < n:\n        i = i << 1\n    return i >> 1",
      -0.85693359375
    ],
    [
      "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if n <= 0:\n        return 1\n    else:\n        i = 2\n        while i < n:\n            if n % i == 0:\n                n /= i\n            else:\n                i += 1\n        return i",
      -0.85693359375
    ],
    [
      "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (2 ** (n - 1))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    n = int(input())\n    print(highest_power_of_two(n))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def get_highest_power_of_2(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return n\n    \n    return 2 ** get_highest_power_of_2(n / 2)\n\n\nif __name__ == '__main__':\n    print(get_highest_power_of_2(20))\n    print(get_highest_power_of_2(32))\n    print(get_highest_power_of_2(4))\n    print(get_highest_power_of_2(5))\n    print(get_highest_power_of_2(5000000))",
      -0.85791015625
    ],
    [
      "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        raise ValueError('Negative number')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    max_num = 1\n    while n!= 0:\n        max_num = max_num << 1\n        n = n >> 1\n    return max_num\n\nprint highest_power_of_two(3)",
      -0.85791015625
    ],
    [
      "def highest_power_of_2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num <= 0:\n        return 0\n\n    power = 1\n    while num!= 1:\n        power = 2 * power\n        num = num >> 1\n    return power\n\n\nif __name__ == '__main__':\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(0))\n    print(highest_power_of_2(101))\n    print(highest_power_of_2(2147483647))\n    print(highest_power_of_2(2147483648))\n    print(highest_power_of_2(2147483649))\n    print(highest_power_of_2(2147483650))\n    print(highest_power_of_2(2147483651))",
      -0.85791015625
    ],
    [
      "#!/usr/bin/python\n\ndef powerOf2(n):\n    \"\"\"\n    Returns the highest power of 2 less than or equal to n\n    \"\"\"\n    result = 1\n    while result < n:\n        result = result << 1\n    return result\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    print(powerOf2(10))\n    print(powerOf2(100))\n    print(powerOf2(1000))\n    print(powerOf2(10000))\n    print(powerOf2(100000))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def highest_power_of_two(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i <= num:\n        if num % i == 0:\n            return i\n        i += 1\n    return i\n\nif __name__ == \"__main__\":\n    print(highest_power_of_two(100))\n    print(highest_power_of_two(5))\n    print(highest_power_of_two(1))",
      -0.85791015625
    ],
    [
      "def highest_power_of_2(num):\n    if num == 0:\n        return 1\n\n    while num!= 1:\n        num >>= 1\n        if num == 0:\n            return 1\n        else:\n            num >>= 1\n\n    return num\n\n\nif __name__ == \"__main__\":\n    assert highest_power_of_2(10) == 2\n    assert highest_power_of_2(100) == 4\n    assert highest_power_of_2(1000) == 8\n    assert highest_power_of_2(10002) == 16\n    assert highest_power_of_2(1000000) == 1 << 30",
      -0.85791015625
    ],
    [
      "def highest_power_of_2(n):\n    \"\"\"\n    Find highest power of 2 less than or equal to given number.\n    Input: n, number to be searched\n    Output: highest power of 2 less than or equal to given number\n    \"\"\"\n    # find highest power of 2 less than or equal to given number\n    result = 1\n    while n > 0:\n        result = result * 2\n        n = n >> 1\n    return result\n\n\nif __name__ == '__main__':\n    print highest_power_of_2(3)\n    print highest_power_of_2(100)\n    print highest_power_of_2(100000)\n    print highest_power_of_2(2000000)",
      -0.85791015625
    ],
    [
      "def highest_power_of_2(number):\n    \"\"\"\n    Highest power of 2\n    :param number: int\n    :return: int\n    \"\"\"\n    result = 2\n    while number > 0:\n        result = result * 2\n        number = number >> 1\n    return result\n\n\nif __name__ == '__main__':\n    print(highest_power_of_2(6))\n    print(highest_power_of_2(1))\n    print(highest_power_of_2(0))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(1000))",
      -0.85791015625
    ],
    [
      "def highest_power_of_2(n):\n    power = 1\n    while power < n:\n        power = 2 ** power\n    return power\n\n\nif __name__ == '__main__':\n    print highest_power_of_2(10)\n    print highest_power_of_2(20)\n    print highest_power_of_2(30)\n    print highest_power_of_2(40)\n    print highest_power_of_2(50)\n    print highest_power_of_2(60)\n    print highest_power_of_2(70)\n    print highest_power_of_2(80)\n    print highest_power_of_2(90)\n    print highest_power_of_2(100)\n    print highest_power_of_2(1000)",
      -0.85791015625
    ],
    [
      "#  https://stackoverflow.com/questions/29750131/find-highest-power-of-2-less-than-or-equal-to-a-given-number\n\ndef find_highest_power_of_2(num):\n    result = 2\n    while result < num:\n        result = result << 1\n    return result\n\ndef main():\n    num = int(input())\n    print(find_highest_power_of_2(num))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def highestPowerOf2(x):\n    \"\"\"\n    x: number\n    return: highest power of 2 less than or equal to x\n    \"\"\"\n    if x < 2:\n        return x\n    else:\n        return highestPowerOf2(x/2) * 2\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/largest-power-of-two-less-than-or-equal-to-n/problem\n\nimport math\n\ndef find_largest_power_of_two_less_than_or_equal_to_n(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.floor(math.log(n, 2))\n\nif __name__ == '__main__':\n    n = int(input())\n    print(find_largest_power_of_two_less_than_or_equal_to_n(n))",
      -0.8583984375
    ],
    [
      "def highest_power_of_two(number):\n    # number = int(number)\n    # print(\"number =\", number)\n    if number == 0:\n        return 1\n    result = 1\n    while number > 0:\n        number >>= 1\n        result <<= 1\n    return result\n\nif __name__ == '__main__':\n    # print(highest_power_of_two(5))\n    # print(highest_power_of_two(1024))\n    print(highest_power_of_two(10))",
      -0.8583984375
    ],
    [
      "def highest_pow_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # find highest power of 2 less than or equal to n\n        p = 2\n        while p < n:\n            p = p * 2\n        return p\n\nprint highest_pow_2(1)\nprint highest_pow_2(2)\nprint highest_pow_2(4)\nprint highest_pow_2(8)\nprint highest_pow_2(16)\nprint highest_pow_2(32)\nprint highest_pow_2(64)\nprint highest_pow_2(128)\nprint highest_pow_2(256)\nprint highest_pow_2(512)\nprint highest_pow_2(1024)\nprint highest_pow_2(2048)\nprint highest_pow_2(4096)\nprint highest_pow_2(8192)",
      -0.8583984375
    ],
    [
      "import math\n\ndef highest_power_of_two(number):\n    \"\"\"\n    @param number: Integer\n    @return: Integer\n    \"\"\"\n    num = 1\n    while num < number:\n        num = num * 2\n    return num\n\n\nif __name__ == '__main__':\n    print highest_power_of_two(3)\n    print highest_power_of_two(10)\n    print highest_power_of_two(16)\n    print highest_power_of_two(32)\n    print highest_power_of_two(64)\n    print highest_power_of_two(128)\n    print highest_power_of_two(256)\n    print highest_power_of_two(512)\n    print highest_power_of_two(1024)\n    print highest_power_of_two(2048)\n    print highest_power_of_two(4096)\n    print highest_power_of_two(8192)\n    print highest_power_of_two(16384)",
      -0.8583984375
    ],
    [
      "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 1\n    while True:\n        i = n\n        n = n >> 1\n        if i < n:\n            return n",
      -0.8583984375
    ],
    [
      "def highest_power_of_two(num):\n    if num == 0:\n        return 1\n    return 2 ** (int(math.ceil(math.log(num, 2))))\n\nprint highest_power_of_two(10)",
      -0.8583984375
    ],
    [
      "def findHighestPower(number):\n\t\"\"\"\n\tFunction to find highest power of 2 less than or equal to given number.\n\t@param number: Number to be checked for power of 2\n\t@return: Highest power of 2 less than or equal to given number.\n\t\"\"\"\n\tif number == 0:\n\t\treturn 0\n\telif number == 1:\n\t\treturn 1\n\telse:\n\t\treturn 2 ** (int(log(number, 2)) + 1)\n\nif __name__ == '__main__':\n\tprint findHighestPower(10)",
      -0.8583984375
    ],
    [
      "import math\n\ndef get_highest_power_of_two(number):\n    \"\"\"\n    Write a function to find highest power of 2 less than or equal to given number.\n    \"\"\"\n    if number == 0:\n        return 1\n    elif number == 1:\n        return 2\n    else:\n        return math.ceil(math.log2(number))\n\n\nif __name__ == \"__main__\":\n    print get_highest_power_of_two(2)\n    print get_highest_power_of_two(4)\n    print get_highest_power_of_two(16)\n    print get_highest_power_of_two(32)\n    print get_highest_power_of_two(1024)\n    print get_highest_power_of_two(4096)\n    print get_highest_power_of_two(16384)\n    print get_highest_power_of_two(33554432)\n    print get_highest_power_of_two(1073741824)\n    print get_highest_power_of_two(2147483648)\n    print get_highest_power_of_two(9223372036854775808)\n    print get_highest_power_of_two(18446744073709551615)",
      -0.8583984375
    ],
    [
      "def highest_power_of_two(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        while num > 1:\n            num = num >> 1\n            if num == 0:\n                return 2\n        return num\n\nif __name__ == '__main__':\n    print(highest_power_of_two(100))",
      -0.8583984375
    ],
    [
      "def highest_power_of_2(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return number & (~number + 1)\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(3))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(1000))",
      -0.8583984375
    ],
    [
      "# Your function should return:\n#\n#    If the number is a power of two, return its base 2 logarithm.\n#    If the number is not a power of two, return -1.\n#\n# Example\n# Given n = 2**11, return 11.\n#\n# Follow up:\n# Could you solve it without using any loop / recursion?\n\ndef highest_power_of_two(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        return highest_power_of_two(n/2) * 2\n\n# Your highest_power_of_two is called the answer function.\n\n# Your function should be called with n and return the result.",
      -0.8583984375
    ],
    [
      "def highest_power_of_2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    \n    if num == 0:\n        return 1\n    elif num == 1:\n        return 2\n    elif num == 2:\n        return 4\n    else:\n        if num & (num - 1) == 0:\n            return num\n        else:\n            return highest_power_of_2(num - 1) * 2",
      -0.8583984375
    ],
    [
      "import math\n\ndef highest_power_of_two(x):\n    \"\"\"\n    Find highest power of 2 less than or equal to given number.\n    :param x:\n    :return:\n    \"\"\"\n    if x == 0:\n        return 1\n    return math.ceil(math.log(x, 2))",
      -0.8583984375
    ],
    [
      "def highest_power_of_two_less_equal(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number < 2:\n        return number\n    else:\n        return highest_power_of_two_less_equal(number / 2) * 2\n\n\nif __name__ == '__main__':\n    print(highest_power_of_two_less_equal(15))",
      -0.8583984375
    ],
    [
      "def highest_power_of_2(n):\n    if n == 0:\n        return 1\n\n    p = 2\n    while p <= n:\n        if n % p == 0:\n            return p\n        p = p * 2\n\n    return p\n\ndef main():\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(20))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef highest_power_of_two(n):\n    \"\"\"\n    Find highest power of 2 less than or equal to given number.\n\n    Args:\n        n: int\n\n    Returns:\n        int\n    \"\"\"\n    # base case: n is a number\n    if n <= 0:\n        return 0\n\n    # base case: n is a power of 2\n    if n == 1 or n == 2:\n        return n\n\n    # recursive case: n is not a power of 2\n    return highest_power_of_two(n/2) * 2\n\n\nif __name__ == '__main__':\n    print(highest_power_of_two(2147483647))",
      -0.8583984375
    ],
    [
      "def highest_power_of_2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    res = 2\n    while res < num:\n        res = res << 1\n    return res\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(32))\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(1000))\n    print(highest_power_of_2(10000))\n    print(highest_power_of_2(100000))",
      -0.85888671875
    ],
    [
      "def highest_power_of_2_less_than_or_equal_to(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 0:\n        return 0\n\n    if number == 1:\n        return 1\n\n    while True:\n        if number == 1:\n            return 1\n\n        if number % 2 == 0:\n            return number\n\n        number = number / 2\n\n    return number\n\nif __name__ == '__main__':\n    print(highest_power_of_2_less_than_or_equal_to(200))",
      -0.85888671875
    ],
    [
      "def highestPowerOf2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    while num > 0:\n        num = num >> 1\n        if num == 0:\n            return 1\n    return num\n\nif __name__ == '__main__':\n    print highestPowerOf2(10)",
      -0.85888671875
    ],
    [
      "import math\n\ndef highest_power_of_2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    num = num - 1\n    while num > 1:\n        num = num >> 1\n    return num + 1\n\nif __name__ == '__main__':\n    print(highest_power_of_2(5))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(20))",
      -0.85888671875
    ],
    [
      "from math import log\nfrom math import ceil\n\ndef highest_power_of_2(n):\n    \"\"\"\n    Highest power of 2 less than or equal to given number.\n    :param n:\n    :return:\n    \"\"\"\n    return int(ceil(log(n, 2)))\n\nif __name__ == '__main__':\n    print(highest_power_of_2(1))\n    print(highest_power_of_2(2))\n    print(highest_power_of_2(3))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(5))\n    print(highest_power_of_2(6))\n    print(highest_power_of_2(7))\n    print(highest_power_of_2(8))\n    print(highest_power_of_2(9))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(1000))",
      -0.85888671875
    ],
    [
      "# https://leetcode.com/problems/largest-power-of-two-less-than-or-equal-to-n/?tab=Description\n\nclass Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        res = 1\n        while n > 0:\n            if n & 1:\n                res = res * x\n            n >>= 1\n            x = x * x\n        return res",
      -0.85888671875
    ],
    [
      "def highest_power_of_2(n):\n    power = 0\n    while n > 0:\n        if n & 1 == 1:\n            power += 1\n        n >>= 1\n    return power\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(2))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(3))\n    print(highest_power_of_2(5))\n    print(highest_power_of_2(7))\n    print(highest_power_of_2(9))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(23))\n    print(highest_power_of_2(32))\n    print(highest_power_of_2(64))\n    print(highest_power_of_2(128))",
      -0.85888671875
    ],
    [
      "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 2\n    \n    if n % 2 == 0:\n        return highest_power_of_2(n / 2)\n    \n    return highest_power_of_2(n * 3) / 2",
      -0.85888671875
    ],
    [
      "import math\n\ndef highest_power_of_2(num):\n    while num > 1:\n        if num & (num - 1):\n            num = num >> 1\n        else:\n            return num\n\nif __name__ == \"__main__\":\n    print highest_power_of_2(12)",
      -0.85888671875
    ],
    [
      "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 0\n    while n & 1 == 0:\n        n >>= 1\n    return n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(50))\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(1000))\n    print(highest_power_of_2(10000))",
      -0.85888671875
    ],
    [
      "def find_power_of_two(number):\n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    :rtype: int\n    \"\"\"\n    if number <= 0:\n        return 0\n    return 1 << ((number - 1) & (number - 1))\n\n\n\nif __name__ == '__main__':\n    print(find_power_of_two(8))",
      -0.85888671875
    ],
    [
      "#!/bin/python\n\ndef highest_power_of_two(n):\n    if n <= 1:\n        return 1\n    return n << 1\n\nprint highest_power_of_two(10)",
      -0.85888671875
    ],
    [
      "from math import log\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n\nif __name__ == '__main__':\n    print(highest_power_of_2(1))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(8))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(32))\n    print(highest_power_of_2(64))\n    print(highest_power_of_2(128))",
      -0.85888671875
    ],
    [
      "from __future__ import print_function\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 1\n\n    return highest_power_of_2(n >> 1) << 1\n\nif __name__ == '__main__':\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(17))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(24))",
      -0.85888671875
    ],
    [
      "def highest_power_of_2(number):\n    if number == 0:\n        return 1\n    for i in range(1, number):\n        if number % i == 0:\n            return i\n    return number\n\ndef main():\n    print highest_power_of_2(10)\n    print highest_power_of_2(100)\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "#!/usr/bin/python\n\n# Complete the highestPower function below.\ndef highestPower(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        i += 1\n\n    return i\n\nif __name__ == '__main__':\n    print(highestPower(20))",
      -0.86083984375
    ],
    [
      "def find_power_of_2(n):\n    \"\"\"\n    Find highest power of 2 less than or equal to given number.\n    >>> find_power_of_2(5)\n    4\n    >>> find_power_of_2(6)\n    8\n    >>> find_power_of_2(10)\n    16\n    >>> find_power_of_2(15)\n    16\n    \"\"\"\n    # Check if n is power of 2\n    if n & (n-1) == 0:\n        return n\n    else:\n        return find_power_of_2(n - 1) + 1\n\nprint(find_power_of_2(1))\nprint(find_power_of_2(2))\nprint(find_power_of_2(3))\nprint(find_power_of_2(4))\nprint(find_power_of_2(5))\nprint(find_power_of_2(6))\nprint(find_power_of_2(7))\nprint(find_power_of_2(8))\nprint(find_power_of_2(9))\nprint(find_power_of_2(10))\nprint(find_power_of_2(11))\nprint(find_power_of_2(12))\nprint(find_power_of_2(13))\nprint(find_power_of_2(14))\nprint(find_power_of_2(15))\nprint(find_power_of_2(16))\nprint(find_power_of_2(17))",
      -0.86279296875
    ],
    [
      "#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python",
      -0.89453125
    ],
    [
      "def highestPowerOf2(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    power = 1\n    while power < number:\n        power *= 2\n    return power\n\nif __name__ == '__main__':\n    assert highestPowerOf2(1) == 1\n    assert highestPowerOf2(2) == 2\n    assert highestPowerOf2(3) == 4\n    assert highestPowerOf2(4) == 4\n    assert highestPowerOf2(5) == 8\n    assert highestPowerOf2(6) == 8\n    assert highestPowerOf2(7) == 8\n    assert highestPowerOf2(8) == 8\n    assert highestPowerOf2(9) == 16\n    assert highestPowerOf2(10) == 16\n    assert highestPowerOf2(11) == 16\n    assert highestPowerOf2(12) == 16\n    assert highestPowerOf2(13) == 16\n    assert highestPowerOf2(14) == 16\n    assert highestPowerOf2(15) == 16\n    assert highestPowerOf2(16) == 16\n    assert highestPowerOf2(17) == 16\n    assert highestPowerOf2(18) == 32\n    assert highestPowerOf2(19) == 32\n    assert highestPowerOf2(20) == 32\n    assert highestPowerOf2(21) == 32\n    assert highestPowerOf2(22) == 32\n    assert highestPowerOf2(23) == 32\n    assert highestPowerOf2(24) == 32\n    assert highestPowerOf2(25) == 32\n    assert highestPowerOf2(26) == 32\n    assert highestPowerOf2(27) == 64\n    assert highestPowerOf2(28) == 64\n    assert highestPowerOf2(29) == 64\n    assert highestPowerOf2(30) == 64\n    assert highestPowerOf2(31) == 64\n    assert highestPowerOf2(32) == 64\n    assert highestPowerOf2(33) == 64\n    assert highestPowerOf2(34) == 64\n    assert highestPowerOf2(35) == 64\n    assert highestPowerOf2(36) == 128\n    assert highestPowerOf2(37) == 128\n    assert highestPower",
      -1.02734375
    ],
    [
      "from math import log2\n\ndef highest_power_of_2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    \n    return int(2**(log2(num) / 2))\n    \n\nif __name__ == '__main__':\n    print(highest_power_of_2(1))\n    print(highest_power_of_2(2))\n    print(highest_power_of_2(3))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(5))\n    print(highest_power_of_2(6))\n    print(highest_power_of_2(7))\n    print(highest_power_of_2(8))\n    print(highest_power_of_2(9))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(11))\n    print(highest_power_of_2(12))\n    print(highest_power_of_2(13))\n    print(highest_power_of_2(14))\n    print(highest_power_of_2(15))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(17))\n    print(highest_power_of_2(18))\n    print(highest_power_of_2(19))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(21))\n    print(highest_power_of_2(22))\n    print(highest_power_of_2(23))\n    print(highest_power_of_2(24))\n    print(highest_power_of_2(25))\n    print(highest_power_of_2(26))\n    print(highest_power_of_2(27))\n    print(highest_power_of_2(28))\n    print(highest_power_of_2(29))\n    print(highest_power_of_2(30))\n    print(highest_power_of_",
      -1.365234375
    ],
    [
      "def highest_power_of_two(n):\n    if n == 0:\n        return 0\n    return highest_power_of_two(n / 2) * 2\n\nif __name__ == '__main__':\n    assert highest_power_of_two(0) == 0\n    assert highest_power_of_two(1) == 1\n    assert highest_power_of_two(2) == 2\n    assert highest_power_of_two(3) == 4\n    assert highest_power_of_two(4) == 4\n    assert highest_power_of_two(5) == 8\n    assert highest_power_of_two(6) == 8\n    assert highest_power_of_two(7) == 8\n    assert highest_power_of_two(8) == 8\n    assert highest_power_of_two(9) == 16\n    assert highest_power_of_two(10) == 16\n    assert highest_power_of_two(11) == 16\n    assert highest_power_of_two(12) == 16\n    assert highest_power_of_two(13) == 32\n    assert highest_power_of_two(14) == 32\n    assert highest_power_of_two(15) == 32\n    assert highest_power_of_two(16) == 32\n    assert highest_power_of_two(17) == 64\n    assert highest_power_of_two(18) == 64\n    assert highest_power_of_two(19) == 64\n    assert highest_power_of_two(20) == 64\n    assert highest_power_of_two(21) == 128\n    assert highest_power_of_two(22) == 128\n    assert highest_power_of_two(23) == 128\n    assert highest_power_of_two(24) == 128\n    assert highest_power_of_two(25) == 256\n    assert highest_power_of_two(26) == 256\n    assert highest_power_of_two(27) == 256\n    assert highest_power_of_two(28) == 256\n    assert highest_power_of_two(29) == 512\n    assert highest_power_of_two",
      -1.369140625
    ],
    [
      "from math import ceil\n\ndef find_highest_power_of_two(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    result = 1\n    while number > 1:\n        if number & 1 == 0:\n            number >>= 1\n        else:\n            result <<= 1\n            number >>= 1\n    return result\n\n\nif __name__ == '__main__':\n    assert find_highest_power_of_two(0) == 1\n    assert find_highest_power_of_two(1) == 1\n    assert find_highest_power_of_two(2) == 2\n    assert find_highest_power_of_two(3) == 2\n    assert find_highest_power_of_two(4) == 4\n    assert find_highest_power_of_two(5) == 2\n    assert find_highest_power_of_two(6) == 4\n    assert find_highest_power_of_two(7) == 4\n    assert find_highest_power_of_two(8) == 8\n    assert find_highest_power_of_two(9) == 4\n    assert find_highest_power_of_two(10) == 8\n    assert find_highest_power_of_two(100) == 64\n    assert find_highest_power_of_two(1000) == 256\n    assert find_highest_power_of_two(10000) == 1024\n    assert find_highest_power_of_two(100000) == 4096\n    assert find_highest_power_of_two(1000000) == 4096",
      -1.6455078125
    ],
    [
      "def highest_power_of_2(num):\n    return 2 ** (int(num) - 1)\n\nprint(highest_power_of_2(4))\n#print(highest_power_of_2(2))\n#print(highest_power_of_2(3))\n#print(highest_power_of_2(4))\n#print(highest_power_of_2(5))\n#print(highest_power_of_2(6))\n#print(highest_power_of_2(7))\n#print(highest_power_of_2(8))\n#print(highest_power_of_2(9))\n#print(highest_power_of_2(10))\n#print(highest_power_of_2(11))\n#print(highest_power_of_2(12))\n#print(highest_power_of_2(13))\n#print(highest_power_of_2(14))\n#print(highest_power_of_2(15))\n#print(highest_power_of_2(16))\n#print(highest_power_of_2(17))\n#print(highest_power_of_2(18))\n#print(highest_power_of_2(19))\n#print(highest_power_of_2(20))\n#print(highest_power_of_2(21))\n#print(highest_power_of_2(22))\n#print(highest_power_of_2(23))\n#print(highest_power_of_2(24))\n#print(highest_power_of_2(25))\n#print(highest_power_of_2(26))\n#print(highest_power_of_2(27))\n#print(highest_power_of_2(28))\n#print(highest_power_of_2(29))\n#print(highest_power_of_2(30))\n#print(highest_power_of_2(31))\n#print(highest_power_of_2(32))\n#print(highest_power_of_2(33))\n#print(highest_power_of_2(34))\n#print(highest_power_of_2",
      -1.8671875
    ],
    [
      "def highest_power_of_2(number):\n    '''\n    :type number: int\n    :rtype: int\n    '''\n\n    # 2^0 is 1\n    # 2^1 is 2\n    # 2^2 is 4\n    # 2^3 is 8\n    # 2^4 is 16\n    # 2^5 is 32\n    # 2^6 is 64\n    # 2^7 is 128\n    # 2^8 is 256\n    # 2^9 is 512\n    # 2^10 is 1024\n    # 2^11 is 2048\n    # 2^12 is 4096\n    # 2^13 is 8192\n    # 2^14 is 16384\n    # 2^15 is 32768\n    # 2^16 is 65536\n    # 2^17 is 131072\n    # 2^18 is 262144\n    # 2^19 is 524288\n    # 2^20 is 1048576\n    # 2^21 is 2097152\n    # 2^22 = 4194304\n    # 2^23 = 8388608\n    # 2^24 = 16777216\n    # 2^25 = 33554432\n    # 2^26 = 67108864\n    # 2^27 = 134217728\n    # 2^28 = 268435456\n    # 2^29 = 536870912\n    # 2^30 = 1073741824\n    # 2^31 = 2147483648\n    # 2^32 = 4294967296\n    # 2^33 = 8589934592\n    # 2^34 = 17179869184\n    # 2^35 = 34359738368\n    # 2^36 = 68719476736\n    # 2^37 = 137438953472\n    # 2^38 = 274877906944\n    # 2^39 = 549755813888\n    # 2^40 = 1099511627776\n    # 2^41 = 21058226068608\n    # 2^42 = 4194302623104\n    # 2^43 = 8589934592000\n    # 2^44 = 17179869184000\n    # 2^45 = 34359738368000\n    # 2",
      -1.8896484375
    ],
    [
      "# The following solution is from StackOverflow\n# https://stackoverflow.com/questions/114545/algorithm-to-find-the-highest-power-of-2-less-than-or-equal-to-a-number\ndef highest_pow2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return int(2 ** (math.floor(math.log(num, 2))))\n\n# The following solution is from StackOverflow\n# https://stackoverflow.com/questions/266424/how-to-find-the-highest-power-of-2-less-than-or-equal-to-a-number\ndef highest_pow2_slow(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    while num > 1:\n        if num & 1 == 0:\n            num >>= 1\n        else:\n            num = num >> 1\n    return num\n\n# The following solution is from StackOverflow\n# https://stackoverflow.com/questions/266424/how-to-find-the-highest-power-of-2-less-than-or-equal-to-a-number\ndef highest_pow2_fast(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    while num > 1:\n        num = num & (num - 1)\n    return num\n\n# The following solution is from StackOverflow\n# https://stackoverflow.com/questions/266424/how-to-find-the-highest-power-of-2-less-than-or-equal-to-a-number\ndef highest_pow2_fast_recursive(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 1\n    return num * highest_pow2_fast_recursive(num - 1)\n\n# The following solution is from StackOverflow\n# https://stackoverflow.com/questions/266424/how-to-find-the-highest-power-of-2-less",
      -2.626953125
    ],
    [
      "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return -1\n    else:\n        while n > 1:\n            if n & 1:\n                n >>= 1\n            else:\n                n = n >> 1\n    return n\n\nif __name__ == '__main__':\n    print(highest_power_of_2(5))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(1623))\n    print(highest_power_of_2(1624))\n    print(highest_power_of_2(1625))\n    print(highest_power_of_2(1626))\n    print(highest_power_of_2(1627))\n    print(highest_power_of_2(1628))\n    print(highest_power_of_2(1629))\n    print(highest_power_of_2(1630))\n    print(highest_power_of_2(1631))\n    print(highest_power_of_2(1632))",
      -2.935546875
    ],
    [
      "# https://github.com/michael-lazar/interview/blob/master/src/interview/python/highest_power_of_two.py\n\ndef highest_power_of_two(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 4\n    if num == 3:\n        return 8\n    if num == 4:\n        return 16\n    if num == 5:\n        return 32\n    if num == 6:\n        return 64\n    if num == 7:\n        return 128\n    if num == 8:\n        return 256\n    if num == 9:\n        return 512\n    if num == 10:\n        return 1024\n    if num == 11:\n        return 2048\n    if num == 12:\n        return 4096\n    if num == 13:\n        return 8192\n    if num == 14:\n        return 16384\n    if num == 15:\n        return 32768\n    if num == 16:\n        return 65536\n    if num == 17:\n        return 131072\n    if num == 18:\n        return 262144\n    if num == 19:\n        return 524288\n    if num == 20:\n        return 1048576\n    if num == 21:\n        return 2097152\n    if num == 22:\n        return 4194304\n    if num == 23:\n        return 8388608\n    if num == 24:\n        return 16777216\n    if num == 25:\n        return 33554432\n    if num == 26:\n        return 67108864\n    if num == 27:\n        return 134217728\n    if num == 28:\n        return 268435456\n    if num == 29:\n        return 536870912\n    if num == 30:\n        return 1073741824\n    if num == 31:\n        return 2147483648\n    return num\n\nif __name__ == '__main__':\n    print(highest_power_of_two(31))\n    print(highest_power_of_two(32))\n    print",
      -3.2421875
    ],
    [
      "def highest_power_of_2(num):\n    \"\"\"\n    Args:\n        num (int):\n    Returns:\n        int:\n    \"\"\"\n    #if num == 1:\n    #    return 1\n    \n    # while num > 1:\n    #     if num % 2 == 0:\n    #         num = num / 2\n    #     else:\n    #         num = 3 * num + 1\n    \n    #     #print(num)\n    #     \n    #     if num == 1:\n    #         return 1\n    #     \n    #     if num > 1:\n    #         num = num / 2\n    #     \n    #     if num == 1:\n    #         return 1\n    #     \n    #     if num > 1:\n    #         num = 3 * num + 1\n    #         \n    #     if num == 1:\n    #         return 1\n    #     \n    #     if num > 1:\n    #         num = 3 * num + 1\n    #         \n    #     if num == 1:\n    #         return 1\n    #     \n    #     if num > 1:\n    #         num = 3 * num + 1\n    #         \n    #     if num == 1:\n    #         return 1\n    #     \n    #     if num > 1:\n    #         num = 3 * num + 1\n    #         \n    #     if num == 1:\n    #         return 1\n    #     \n    #     if num > 1:\n    #         num = 3 * num + 1\n    #         \n    #     if num == 1:\n    #         return 1\n    #     \n    #     if num > 1:\n    #         num = 3 * num + 1\n    #         \n    #     if num == 1:\n    #         return 1\n    #     \n    #     if num > 1:\n    #         num = 3 * num + 1\n    #         \n    #     if num == 1:\n    #         return 1\n    #     \n    #     if num > 1:\n    #         num = 3 * num + 1\n    #         \n    #     if num == 1:\n    #         return 1",
      -3.51171875
    ],
    [
      "def highest_power_of_2_less_equal(number):\n\tif number == 0:\n\t\treturn 0\n\tresult = 1\n\twhile result < number:\n\t\tresult = result * 2\n\treturn result\n\nif __name__ == '__main__':\n\tassert highest_power_of_2_less_equal(0) == 0\n\tassert highest_power_of_2_less_equal(1) == 1\n\tassert highest_power_of_2_less_equal(2) == 2\n\tassert highest_power_of_2_less_equal(3) == 2\n\tassert highest_power_of_2_less_equal(4) == 2\n\tassert highest_power_of_2_less_equal(5) == 4\n\tassert highest_power_of_2_less_equal(6) == 4\n\tassert highest_power_of_2_less_equal(7) == 4\n\tassert highest_power_of_2_less_equal(8) == 8\n\tassert highest_power_of_2_less_equal(9) == 8\n\tassert highest_power_of_2_less_equal(10) == 8\n\tassert highest_power_of_2_less_equal(11) == 8\n\tassert highest_power_of_2_less_equal(12) == 8\n\tassert highest_power_of_2_less_equal(13) == 8\n\tassert highest_power_of_2_less_equal(14) == 8\n\tassert highest_power_of_2_less_equal(15) == 8\n\tassert highest_power_of_2_less_equal(16) == 8\n\tassert highest_power_of_2_less_equal(17) == 8\n\tassert highest_power_of_2_less_equal(18) == 8\n\tassert highest_power_of_2_less_equal(19) == 8\n\tassert highest_power_of_2_less_equal(20) == 8\n\tassert highest_power_of_2_less_equal(21) == 8\n\tassert highest_power_of_2_less_equal(22) == 8\n\tassert highest_power_of_2_less_",
      -3.71484375
    ],
    [
      "# Function to find highest power of 2 less than or equal to given number.\ndef findHighestPow2(num):\n    \"\"\"\n    num: int\n    return: int\n    \"\"\"\n    if num == 0:\n        return 0\n    \n    if num == 1:\n        return 1\n    \n    p = 2\n    while p < num:\n        p = p * 2\n    \n    return p\n\n# Test Cases\n\n# num = 0\n# print findHighestPow2(num)\n\n# num = 1\n# print findHighestPow2(num)\n\n# num = 2\n# print findHighestPow2(num)\n\n# num = 3\n# print findHighestPow2(num)\n\n# num = 4\n# print findHighestPow2(num)\n\n# num = 5\n# print findHighestPow2(num)\n\n# num = 6\n# print findHighestPow2(num)\n\n# num = 7\n# print findHighestPow2(num)\n\n# num = 8\n# print findHighestPow2(num)\n\n# num = 9\n# print findHighestPow2(num)\n\n# num = 10\n# print findHighestPow2(num)\n\n# num = 20\n# print findHighestPow2(num)\n\n# num = 30\n# print findHighestPow2(num)\n\n# num = 40\n# print findHighestPow2(num)\n\n# num = 50\n# print findHighestPow2(num)\n\n# num = 100\n# print findHighestPow2(num)\n\n# num = 1000\n# print findHighestPow2(num)\n\n# num = 1001\n# print findHighestPow2(num)\n\n# num = 1002\n# print findHighestPow2(num)\n\n# num = 1003\n# print findHighestPow2(num)\n\n# num = 1004\n# print findHighestPow2(num)\n\n# num = 1005\n# print findHighestPow2(num)\n\n# num = 1006\n# print find",
      -3.916015625
    ],
    [
      "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while i < n:\n        i = 2 * i\n    return i\n\n\nif __name__ == \"__main__\":\n    assert highest_power_of_2(2) == 2\n    assert highest_power_of_2(3) == 4\n    assert highest_power_of_2(4) == 4\n    assert highest_power_of_2(5) == 8\n    assert highest_power_of_2(6) == 8\n    assert highest_power_of_2(7) == 8\n    assert highest_power_of_2(8) == 8\n    assert highest_power_of_2(9) == 16\n    assert highest_power_of_2(10) == 16\n    assert highest_power_of_2(11) == 16\n    assert highest_power_of_2(12) == 16\n    assert highest_power_of_2(13) == 16\n    assert highest_power_of_2(14) == 16\n    assert highest_power_of_2(15) == 16\n    assert highest_power_of_2(16) == 16\n    assert highest_power_of_2(17) == 32\n    assert highest_power_of_2(18) == 32\n    assert highest_power_of_2(19) == 32\n    assert highest_power_of_2(20) == 32\n    assert highest_power_of_2(21) == 32\n    assert highest_power_of_2(22) == 32\n    assert highest_power_of_2(23) == 32\n    assert highest_power_of_2(24) == 32\n    assert highest_power_of_2(25) == 32\n    assert highest_power_of_2(26) == 32\n    assert highest_power_of_2(27) == 32\n    assert highest_power_of_2(28) == 32\n    assert highest_power_of_2(29) == 32\n    assert highest_power_of_2(30) == 32\n    assert highest_power_of_2",
      -4.484375
    ],
    [
      "# write a function to find highest power of 2 less than or equal to given number\n\ndef highest_power_of_2(num):\n    '''\n    Input: num = number\n    Output: highest power of 2\n    '''\n    # find the highest power of 2 less than or equal to num\n    # first let's find the highest power of 2 less than num\n    i = 0\n    while i < num:\n        i = i + 1\n        if (i & 1) == 1:\n            # if it is odd, then it is not the highest power of 2\n            continue\n        else:\n            # if it is even, then it is the highest power of 2\n            return i\n    # if we get here, then num is the highest power of 2\n    return num\n\nif __name__ == '__main__':\n    print(highest_power_of_2(3))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(5))\n    print(highest_power_of_2(6))\n    print(highest_power_of_2(7))\n    print(highest_power_of_2(8))\n    print(highest_power_of_2(9))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(11))\n    print(highest_power_of_2(12))\n    print(highest_power_of_2(13))\n    print(highest_power_of_2(14))\n    print(highest_power_of_2(15))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(17))\n    print(highest_power_of_2(18))\n    print(highest_power_of_2(19))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(21))\n    print(highest_power_of_2(22))\n    print(highest_power_of_2(23))\n    print(highest_power_of_2(24))\n    print(highest_power_of_2(25))",
      -4.484375
    ],
    [
      "def highest_power_of_two(num):\n    power = 1\n    while power < num:\n        power = power * 2\n    return power\n\n\nprint highest_power_of_two(1)\nprint highest_power_of_two(2)\nprint highest_power_of_two(3)\nprint highest_power_of_two(4)\nprint highest_power_of_two(5)\nprint highest_power_of_two(6)\nprint highest_power_of_two(7)\nprint highest_power_of_two(8)\nprint highest_power_of_two(9)\nprint highest_power_of_two(10)\nprint highest_power_of_two(11)\nprint highest_power_of_two(12)\nprint highest_power_of_two(13)\nprint highest_power_of_two(14)\nprint highest_power_of_two(15)\nprint highest_power_of_two(16)\nprint highest_power_of_two(17)\nprint highest_power_of_two(18)\nprint highest_power_of_two(19)\nprint highest_power_of_two(20)\nprint highest_power_of_two(21)\nprint highest_power_of_two(22)\nprint highest_power_of_two(23)\nprint highest_power_of_two(24)\nprint highest_power_of_two(25)\nprint highest_power_of_two(26)\nprint highest_power_of_two(27)\nprint highest_power_of_two(28)\nprint highest_power_of_two(29)\nprint highest_power_of_two(30)\nprint highest_power_of_two(31)\nprint highest_power_of_two(32)\nprint highest_power_of_two(33)\nprint highest_power_of_two(34)\nprint highest_power_of_two(35)\nprint highest_power_of_two(36)\nprint highest_power_of_two(37)\nprint highest_power_of_two(38)\nprint highest_power_of_two(39)\nprint highest_power_of_",
      -4.640625
    ],
    [
      "def highest_power_of_two(number):\n    if number == 0:\n        return 0\n    \n    return (number & ~(number - 1)) | (number - 1)\n\n\ndef test():\n    assert highest_power_of_two(0) == 0\n    assert highest_power_of_two(1) == 1\n    assert highest_power_of_two(2) == 2\n    assert highest_power_of_two(3) == 2\n    assert highest_power_of_two(4) == 4\n    assert highest_power_of_two(5) == 2\n    assert highest_power_of_two(6) == 4\n    assert highest_power_of_two(7) == 4\n    assert highest_power_of_two(8) == 8\n    assert highest_power_of_two(9) == 8\n    assert highest_power_of_two(10) == 8\n    assert highest_power_of_two(11) == 8\n    assert highest_power_of_two(12) == 8\n    assert highest_power_of_two(13) == 8\n    assert highest_power_of_two(14) == 16\n    assert highest_power_of_two(15) == 16\n    assert highest_power_of_two(16) == 16\n    assert highest_power_of_two(17) == 16\n    assert highest_power_of_two(18) == 16\n    assert highest_power_of_two(19) == 16\n    assert highest_power_of_two(20) == 32\n    assert highest_power_of_two(21) == 32\n    assert highest_power_of_two(22) == 32\n    assert highest_power_of_two(23) == 32\n    assert highest_power_of_two(24) == 32\n    assert highest_power_of_two(25) == 32\n    assert highest_power_of_two(26) == 32\n    assert highest_power_of_two(27) == 32\n    assert highest_power_of_two(28) == 32\n    assert highest_power_of_two(29) == 32\n    assert highest_power_of_two(30) ==",
      -4.8828125
    ],
    [
      "def highest_power_of_2(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    number = int(number)\n\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 4\n    if number == 4:\n        return 8\n    if number == 5:\n        return 16\n    if number == 6:\n        return 32\n    if number == 7:\n        return 64\n    if number == 8:\n        return 128\n    if number == 9:\n        return 256\n    if number == 10:\n        return 512\n    if number == 11:\n        return 1024\n    if number == 12:\n        return 2048\n    if number == 13:\n        return 4096\n    if number == 14:\n        return 8192\n    if number == 15:\n        return 16384\n    if number == 16:\n        return 32768\n    if number == 17:\n        return 65536\n    if number == 18:\n        return 131072\n    if number == 19:\n        return 262144\n    if number == 20:\n        return 524288\n    if number == 21:\n        return 1048576\n    if number == 22:\n        return 2097152\n    if number == 23:\n        return 4194304\n    if number == 24:\n        return 8388608\n    if number == 25:\n        return 16777216\n    if number == 26:\n        return 33554432\n    if number == 27:\n        return 67108864\n    if number == 28:\n        return 134217728\n    if number == 29:\n        return 268435456\n    if number == 30:\n        return 536870912\n    if number == 31:\n        return 1073741824\n    if number == 32:\n        return 2147483648\n    if number == 33:\n        return 4294967296\n    if number == 34:\n        return 8589934592\n    if number == 35:\n        return 17179869184\n    if number == 36:\n        return 34359738368\n    if number == 37:",
      -4.9296875
    ],
    [
      "def highestPowerOf2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:\n        return 256\n    if n == 10:\n        return 512\n    if n == 11:\n        return 1024\n    if n == 12:\n        return 2048\n    if n == 13:\n        return 4096\n    if n == 14:\n        return 8192\n    if n == 15:\n        return 16384\n    if n == 16:\n        return 32768\n    if n == 17:\n        return 65536\n    if n == 18:\n        return 131072\n    if n == 19:\n        return 262144\n    if n == 20:\n        return 524288\n    if n == 21:\n        return 1048576\n    if n == 22:\n        return 2097152\n    if n == 23:\n        return 4194304\n    if n == 24:\n        return 8388608\n    if n == 25:\n        return 16777216\n    if n == 26:\n        return 33554432\n    if n == 27:\n        return 67108864\n    if n == 28:\n        return 134217728\n    if n == 29:\n        return 268435456\n    if n == 30:\n        return 536870912\n    if n == 31:\n        return 1073741824\n    if n == 32:\n        return 2147483648\n    if n == 33:\n        return 4294967296\n    if n == 34:\n        return 8589934592\n    if n == 35:\n        return 17179869184\n    if n == 36:\n        return 34359738368\n    if n == 37:",
      -4.94140625
    ],
    [
      "def power2(x):\n    \"\"\"\n    Input:\n        x = number\n    Output:\n        max(x)\n    \"\"\"\n    if x <= 1:\n        return 1\n    return 2 ** (x - 1)\n\ndef power2_2(x):\n    \"\"\"\n    Input:\n        x = number\n    Output:\n        max(x)\n    \"\"\"\n    if x <= 1:\n        return 1\n    return 2 ** (x - 1) * 2\n\ndef power2_3(x):\n    \"\"\"\n    Input:\n        x = number\n    Output:\n        max(x)\n    \"\"\"\n    if x <= 1:\n        return 1\n    return 2 ** (x - 1) * 2 ** (x - 2)\n\ndef power2_4(x):\n    \"\"\"\n    Input:\n        x = number\n    Output:\n        max(x)\n    \"\"\"\n    if x <= 1:\n        return 1\n    return 2 ** (x - 1) * 2 ** (x - 2) * 2 ** (x - 3)\n\ndef power2_5(x):\n    \"\"\"\n    Input:\n        x = number\n    Output:\n        max(x)\n    \"\"\"\n    if x <= 1:\n        return 1\n    return 2 ** (x - 1) * 2 ** (x - 2) * 2 ** (x - 3) * 2 ** (x - 4)\n\ndef power2_6(x):\n    \"\"\"\n    Input:\n        x = number\n    Output:\n        max(x)\n    \"\"\"\n    if x <= 1:\n        return 1\n    return 2 ** (x - 1) * 2 ** (x - 2) * 2 ** (x - 3) * 2 ** (x - 4) * 2 ** (x - 5)\n\ndef power2_7(x):\n    \"\"\"\n    Input:\n        x = number\n    Output:\n        max(x)\n    \"\"\"\n    if x <= 1:\n        return 1\n    return 2 ** (x - 1) * 2 ** (x - 2) * 2 ** (x - 3) * 2 ** (x - 4) * 2 ** (x - 5) * 2 ** (x - 6)",
      -5.3671875
    ],
    [
      "#!/usr/bin/python\n\ndef highest_power_of_two(n):\n    # Write your code here\n    if n == 0:\n        return 1\n    return highest_power_of_two(n/2) * 2\n\nif __name__ == \"__main__\":\n    print highest_power_of_two(3)\n    print highest_power_of_two(4)\n    print highest_power_of_two(5)\n    print highest_power_of_two(7)\n    print highest_power_of_two(9)\n    print highest_power_of_two(10)\n    print highest_power_of_two(15)\n    print highest_power_of_two(16)\n    print highest_power_of_two(17)\n    print highest_power_of_two(32)\n    print highest_power_of_two(33)\n    print highest_power_of_two(34)\n    print highest_power_of_two(35)\n    print highest_power_of_two(36)\n    print highest_power_of_two(37)\n    print highest_power_of_two(38)\n    print highest_power_of_two(39)\n    print highest_power_of_two(40)\n    print highest_power_of_two(41)\n    print highest_power_of_two(42)\n    print highest_power_of_two(43)\n    print highest_power_of_two(44)\n    print highest_power_of_two(45)\n    print highest_power_of_two(46)\n    print highest_power_of_two(47)\n    print highest_power_of_two(48)\n    print highest_power_of_two(49)\n    print highest_power_of_two(50)\n    print highest_power_of_two(51)\n    print highest_power_of_two(52)\n    print highest_power_of_two(53)\n    print highest_power_of_two(54)\n    print highest_power_of_two(55)\n    print highest_power_of_two(56)",
      -5.703125
    ],
    [
      "def highest_power_of_2(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    while num > 1:\n        if num & 1:\n            return num\n        else:\n            num = num >> 1\n    return num\n\nprint(highest_power_of_2(1))\nprint(highest_power_of_2(2))\nprint(highest_power_of_2(3))\nprint(highest_power_of_2(4))\nprint(highest_power_of_2(5))\nprint(highest_power_of_2(6))\nprint(highest_power_of_2(7))\nprint(highest_power_of_2(8))\nprint(highest_power_of_2(9))\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(11))\nprint(highest_power_of_2(12))\nprint(highest_power_of_2(13))\nprint(highest_power_of_2(14))\nprint(highest_power_of_2(15))\nprint(highest_power_of_2(16))\nprint(highest_power_of_2(17))\nprint(highest_power_of_2(18))\nprint(highest_power_of_2(19))\nprint(highest_power_of_2(20))\nprint(highest_power_of_2(21))\nprint(highest_power_of_2(22))\nprint(highest_power_of_2(23))\nprint(highest_power_of_2(24))\nprint(highest_power_of_2(25))\nprint(highest_power_of_2(26))\nprint(highest_power_of_2(27))\nprint(highest_power_of_2(28))\nprint(highest_power_of_2(29))\nprint(highest_power_of_2(30))\nprint(highest_power_of_2(31))\nprint(highest_power_of_2(32))\nprint(highest_power_of_2(33))\nprint(highest_power",
      -5.875
    ],
    [
      "from math import log2, ceil\n\ndef highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while i < n:\n        i *= 2\n    return i\n\nif __name__ == '__main__':\n    print(highest_power_of_2(2))\n    print(highest_power_of_2(100))\n    print(highest_power_of_2(9999))\n    print(highest_power_of_2(1000000))\n    print(highest_power_of_2(100000000))\n    print(highest_power_of_2(1000000000))\n    print(highest_power_of_2(10000000000))\n    print(highest_power_of_2(100000000000))\n    print(highest_power_of_2(1000000000000))\n    print(highest_power_of_2(10000000000000))\n    print(highest_power_of_2(100000000000000))\n    print(highest_power_of_2(1000000000000000))\n    print(highest_power_of_2(10000000000000000))\n    print(highest_power_of_2(100000000000000000))\n    print(highest_power_of_2(1000000000000000000))\n    print(highest_power_of_2(10000000000000000000))\n    print(highest_power_of_2(100000000000000000000))\n    print(highest_power_of_2(1000000000000000000000))\n    print(highest_power_of_2(10000000000000000000000))\n    print(highest_power_of_2(100000000000000000000000))\n    print(highest_power_of_2(1000000000000000000000000))\n    print(highest_power_of_2(10000000000000000000000000))\n    print(highest_power_of_2(100000000000000000000000000))\n    print(highest_power_of_2(1000000000000000000000000000))",
      -5.98046875
    ],
    [
      "def highest_power_of_2(num):\n    return 2 ** (int(num) - 1)\n\n\ndef test_highest_power_of_2():\n    assert highest_power_of_2(1) == 2\n    assert highest_power_of_2(2) == 4\n    assert highest_power_of_2(3) == 8\n    assert highest_power_of_2(4) == 16\n    assert highest_power_of_2(5) == 32\n    assert highest_power_of_2(6) == 64\n    assert highest_power_of_2(7) == 128\n    assert highest_power_of_2(8) == 256\n    assert highest_power_of_2(9) == 512\n    assert highest_power_of_2(10) == 1024\n    assert highest_power_of_2(11) == 2048\n    assert highest_power_of_2(12) == 4096\n    assert highest_power_of_2(13) == 8192\n    assert highest_power_of_2(14) == 16384\n    assert highest_power_of_2(15) == 32768\n    assert highest_power_of_2(16) == 65536\n    assert highest_power_of_2(17) == 131072\n    assert highest_power_of_2(18) == 262144\n    assert highest_power_of_2(19) == 524288\n    assert highest_power_of_2(20) == 1048576\n    assert highest_power_of_2(21) == 2097152\n    assert highest_power_of_2(22) == 4194304\n    assert highest_power_of_2(23) == 8388608\n    assert highest_power_of_2(24) == 16777216\n    assert highest_power_of_2(25) == 33554432\n    assert highest_power_of_2(26) == 67108864\n    assert highest_power_of_2(27) == 134217728\n    assert highest_power_of_2(28) == 268435456\n    assert highest_power_of_2(29) == 536870912\n    assert highest",
      -6.09375
    ],
    [
      "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    if n == 4:\n        return 8\n\n    if n == 5:\n        return 16\n\n    if n == 6:\n        return 32\n\n    if n == 7:\n        return 64\n\n    if n == 8:\n        return 128\n\n    if n == 9:\n        return 256\n\n    if n == 10:\n        return 512\n\n    if n == 11:\n        return 1024\n\n    if n == 12:\n        return 2048\n\n    if n == 13:\n        return 4096\n\n    if n == 14:\n        return 8192\n\n    if n == 15:\n        return 16384\n\n    if n == 16:\n        return 32768\n\n    if n == 17:\n        return 65536\n\n    if n == 18:\n        return 131072\n\n    if n == 19:\n        return 262144\n\n    if n == 20:\n        return 524288\n\n    if n == 21:\n        return 1048576\n\n    if n == 22:\n        return 2097152\n\n    if n == 23:\n        return 4194304\n\n    if n == 24:\n        return 8388608\n\n    if n == 25:\n        return 16777216\n\n    if n == 26:\n        return 33554432\n\n    if n == 27:\n        return 67108864\n\n    if n == 28:\n        return 134217728\n\n    if n == 29:\n        return 268435456\n\n    if n == 30:\n        return 536870912\n\n    if n == 31:\n        return 1073741824\n\n    if n == 32:\n        return 2147483648\n\n    if n == 33:\n        return 4294967296\n\n    if n == 34:\n        return 8589934592\n\n    if n == 35:\n        return 17179869184\n\n    if n == 36:\n        return 34359738368\n\n    if n == 37:\n        return 68719476736",
      -6.1171875
    ],
    [
      "def highestPowerOf2LessThanOrEqual(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    \n    # 1 is already a power of 2\n    if num == 1:\n        return 1\n    \n    # 2 is already a power of 2\n    if num == 2:\n        return 2\n    \n    # 3 is already a power of 2\n    if num == 3:\n        return 4\n    \n    # 4 is already a power of 2\n    if num == 4:\n        return 8\n    \n    # 5 is already a power of 2\n    if num == 5:\n        return 16\n    \n    # 6 is already a power of 2\n    if num == 6:\n        return 32\n    \n    # 7 is already a power of 2\n    if num == 7:\n        return 64\n    \n    # 8 is already a power of 2\n    if num == 8:\n        return 128\n    \n    # 9 is already a power of 2\n    if num == 9:\n        return 256\n    \n    # 10 is already a power of 2\n    if num == 10:\n        return 512\n    \n    # 11 is already a power of 2\n    if num == 11:\n        return 1024\n    \n    # 12 is already a power of 2\n    if num == 12:\n        return 2048\n    \n    # 13 is already a power of 2\n    if num == 13:\n        return 4096\n    \n    # 14 is already a power of 2\n    if num == 14:\n        return 8192\n    \n    # 15 is already a power of 2\n    if num == 15:\n        return 16384\n    \n    # 16 is already a power of 2\n    if num == 16:\n        return 32768\n    \n    # 17 is already a power of 2\n    if num == 17:\n        return 65536\n    \n    # 18 is already a power of 2\n    if num == 18:\n        return 131072\n    \n    # 19 is already a power of 2\n    if num == 19:\n        return 262144\n    \n    # 20 is already a power of 2\n    if num == 20:\n        return",
      -6.23828125
    ],
    [
      "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * 2 - 1\n\nif __name__ == '__main__':\n    print highest_power_of_two(1)\n    print highest_power_of_two(2)\n    print highest_power_of_two(3)\n    print highest_power_of_two(4)\n    print highest_power_of_two(5)\n    print highest_power_of_two(6)\n    print highest_power_of_two(7)\n    print highest_power_of_two(8)\n    print highest_power_of_two(9)\n    print highest_power_of_two(10)\n    print highest_power_of_two(11)\n    print highest_power_of_two(12)\n    print highest_power_of_two(13)\n    print highest_power_of_two(14)\n    print highest_power_of_two(15)\n    print highest_power_of_two(16)\n    print highest_power_of_two(17)\n    print highest_power_of_two(18)\n    print highest_power_of_two(19)\n    print highest_power_of_two(20)\n    print highest_power_of_two(21)\n    print highest_power_of_two(22)\n    print highest_power_of_two(23)\n    print highest_power_of_two(24)\n    print highest_power_of_two(25)\n    print highest_power_of_two(26)\n    print highest_power_of_two(27)\n    print highest_power_of_two(28)\n    print highest_power_of_two(29)\n    print highest_power_of_two(30)\n    print highest_power_of_two(31)\n    print highest_power_of_two(32)\n    print highest_power_of_two(33)\n    print highest_power_of_two(34)\n    print highest_power_of_two(35)\n    print highest_",
      -6.2890625
    ],
    [
      "def highest_power_of_2_less_or_equal(number):\n    \"\"\"\n    :param number: positive integer\n    :return: highest power of 2 less or equal to given number\n    \"\"\"\n    # write your code here\n    while number > 1:\n        if number % 2 == 0:\n            return number\n        number = number >> 1\n    return 1\n\nif __name__ == '__main__':\n    assert highest_power_of_2_less_or_equal(1) == 2\n    assert highest_power_of_2_less_or_equal(2) == 2\n    assert highest_power_of_2_less_or_equal(4) == 4\n    assert highest_power_of_2_less_or_equal(32) == 4\n    assert highest_power_of_2_less_or_equal(1024) == 4\n    assert highest_power_of_2_less_or_equal(4096) == 4\n    assert highest_power_of_2_less_or_equal(16384) == 4\n    assert highest_power_of_2_less_or_equal(32768) == 4\n    assert highest_power_of_2_less_or_equal(1048576) == 4\n    assert highest_power_of_2_less_or_equal(2147483648) == 4\n    assert highest_power_of_2_less_or_equal(2147483647) == 4\n    assert highest_power_of_2_less_or_equal(2147483647) == 4\n    assert highest_power_of_2_less_or_equal(2147483647) == 4\n    assert highest_power_of_2_less_or_equal(2147483647) == 4\n    assert highest_power_of_2_less_or_equal(2147483647) == 4\n    assert highest_power_of_2_less_or_equal(2147483647) == 4\n    assert highest_power_of_2_less_or_equal(2147483647) == 4\n    assert highest_power_of_2_less_or_equal(214748364",
      -6.765625
    ],
    [
      "# https://oj.leetcode.com/problems/power-of-two/\n# Given a number n, return the largest power of two that is less than or equal to n.\n\n# For example, given n = 2, return 1.\n# Given n = 2^30, return 1048575.\n\n# Note: If you are not familiar with integer math, you can simplify the above code to:\n# return (int(math.log(n, 2)) + 1) or (int(math.log(n, 2)) + 2)\n\n# https://oj.leetcode.com/discuss/3949/python-solution-using-binary-search\n\n# 0 <= n <= 2^32\ndef highest_power_of_two(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        i = 2\n        while i < n:\n            i *= 2\n        return i\n\n# 0 <= n <= 2^32\ndef highest_power_of_two_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        i = 2\n        while i < n:\n            i *= 2\n            if i > n:\n                break\n        return i\n\n# 0 <= n <= 2^32\ndef highest_power_of_two_3(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        i = 2\n        while i < n:\n            i *= 2\n            if i > n:\n                break\n        return i\n\n# 0 <= n <= 2^32\ndef highest_power_of_two_4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        i = 2\n        while i < n:\n            i *= 2\n            if i",
      -6.8046875
    ],
    [
      "def find_largest_power_of_2(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number % 2 == 0:\n        return number\n    if number == 2:\n        return 2\n    if number % 3 == 0:\n        return number\n    if number == 3:\n        return 4\n    if number % 5 == 0:\n        return number\n    if number == 5:\n        return 8\n    if number % 7 == 0:\n        return number\n    if number == 7:\n        return 16\n    if number % 9 == 0:\n        return number\n    if number == 9:\n        return 32\n    if number % 11 == 0:\n        return number\n    if number == 11:\n        return 64\n    if number % 13 == 0:\n        return number\n    if number == 13:\n        return 128\n    if number % 17 == 0:\n        return number\n    if number == 17:\n        return 256\n    if number % 19 == 0:\n        return number\n    if number == 19:\n        return 512\n    if number % 23 == 0:\n        return number\n    if number == 23:\n        return 1024\n    if number % 29 == 0:\n        return number\n    if number == 29:\n        return 2048\n    if number % 31 == 0:\n        return number\n    if number == 31:\n        return 4096\n    if number % 37 == 0:\n        return number\n    if number == 37:\n        return 8192\n    if number % 41 == 0:\n        return number\n    if number == 41:\n        return 16384\n    if number % 43 == 0:\n        return number\n    if number == 43:\n        return 32768\n    if number % 47 == 0:\n        return number\n    if number == 47:\n        return 65536\n    if number % 53 == 0:\n        return number\n    if number == 53:\n        return 131072\n    if number % 59 == 0:\n        return number\n    if number == 59:\n        return 262144\n    if number % 61 == 0:\n        return number\n    if number",
      -7.1796875
    ],
    [
      "# @include\ndef find_max_pow_of_2(num):\n    if num == 0:\n        return 1\n    return int(2**(num - 1) + 1)\n# @exclude\n\n\ndef test_find_max_pow_of_2():\n    assert find_max_pow_of_2(0) == 1\n    assert find_max_pow_of_2(1) == 2\n    assert find_max_pow_of_2(2) == 4\n    assert find_max_pow_of_2(3) == 8\n    assert find_max_pow_of_2(4) == 16\n    assert find_max_pow_of_2(5) == 32\n    assert find_max_pow_of_2(6) == 64\n    assert find_max_pow_of_2(7) == 128\n    assert find_max_pow_of_2(8) == 256\n    assert find_max_pow_of_2(9) == 512\n    assert find_max_pow_of_2(10) == 1024\n    assert find_max_pow_of_2(11) == 2048\n    assert find_max_pow_of_2(12) == 4096\n    assert find_max_pow_of_2(13) == 8192\n    assert find_max_pow_of_2(14) == 16384\n    assert find_max_pow_of_2(15) == 32768\n    assert find_max_pow_of_2(16) == 65536\n    assert find_max_pow_of_2(17) == 131072\n    assert find_max_pow_of_2(18) == 262144\n    assert find_max_pow_of_2(19) == 524288\n    assert find_max_pow_of_2(20) == 1048576\n    assert find_max_pow_of_2(21) == 2097152\n    assert find_max_pow_of_2(22) == 4194304\n    assert find_max_pow_of_2(23) ==",
      -7.44921875
    ],
    [
      "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    res = highest_power_of_2(n >> 1)\n    if (n & 1) == 1:\n        res = res * 2\n    return res\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(1))\n    print(highest_power_of_2(2))\n    print(highest_power_of_2(3))\n    print(highest_power_of_2(4))\n    print(highest_power_of_2(5))\n    print(highest_power_of_2(6))\n    print(highest_power_of_2(7))\n    print(highest_power_of_2(8))\n    print(highest_power_of_2(9))\n    print(highest_power_of_2(10))\n    print(highest_power_of_2(11))\n    print(highest_power_of_2(12))\n    print(highest_power_of_2(13))\n    print(highest_power_of_2(14))\n    print(highest_power_of_2(15))\n    print(highest_power_of_2(16))\n    print(highest_power_of_2(17))\n    print(highest_power_of_2(18))\n    print(highest_power_of_2(19))\n    print(highest_power_of_2(20))\n    print(highest_power_of_2(21))\n    print(highest_power_of_2(22))\n    print(highest_power_of_2(23))\n    print(highest_power_of_2(24))\n    print(highest_power_of_2(25))\n    print(highest_power_of_2(26))\n    print(highest_power_of_2(27))\n    print(highest_power_of_2(28))\n    print(highest_power_of_2(29))\n    print(highest_power_of_2(30",
      -7.546875
    ],
    [
      "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 8\n    if n == 4:\n        return 16\n    if n == 5:\n        return 32\n    if n == 6:\n        return 64\n    if n == 7:\n        return 128\n    if n == 8:\n        return 256\n    if n == 9:\n        return 512\n    if n == 10:\n        return 1024\n    if n == 11:\n        return 2048\n    if n == 12:\n        return 4096\n    if n == 13:\n        return 8192\n    if n == 14:\n        return 16384\n    if n == 15:\n        return 32768\n    if n == 16:\n        return 65536\n    if n == 17:\n        return 131072\n    if n == 18:\n        return 262144\n    if n == 19:\n        return 524288\n    if n == 20:\n        return 1048576\n    if n == 21:\n        return 2097152\n    if n == 22:\n        return 4194304\n    if n == 23:\n        return 8388608\n    if n == 24:\n        return 16777216\n    if n == 25:\n        return 33554432\n    if n == 26:\n        return 67108864\n    if n == 27:\n        return 134217728\n    if n == 28:\n        return 268435456\n    if n == 29:\n        return 536870912\n    if n == 30:\n        return 1073741824\n    if n == 31:\n        return 2147483648\n    if n == 32:\n        return 4294967296\n    if n == 33:\n        return 8589934592\n    if n == 34:\n        return 17179869184\n    if n == 35:\n        return 34359738368\n    if n == 36:\n        return 68719476736\n    if n == 37:\n        return 13",
      -8.25
    ],
    [
      "def highest_power_of_two(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    while n >= 2:\n        if n & 1:\n            return n\n        n >>= 1\n    \n    return n\n\nif __name__ == \"__main__\":\n    print highest_power_of_two(1)\n    print highest_power_of_two(2)\n    print highest_power_of_two(3)\n    print highest_power_of_two(4)\n    print highest_power_of_two(5)\n    print highest_power_of_two(6)\n    print highest_power_of_two(7)\n    print highest_power_of_two(8)\n    print highest_power_of_two(9)\n    print highest_power_of_two(10)\n    print highest_power_of_two(11)\n    print highest_power_of_two(12)\n    print highest_power_of_two(13)\n    print highest_power_of_two(14)\n    print highest_power_of_two(15)\n    print highest_power_of_two(16)\n    print highest_power_of_two(17)\n    print highest_power_of_two(18)\n    print highest_power_of_two(19)\n    print highest_power_of_two(20)\n    print highest_power_of_two(21)\n    print highest_power_of_two(22)\n    print highest_power_of_two(23)\n    print highest_power_of_two(24)\n    print highest_power_of_two(25)\n    print highest_power_of_two(26)\n    print highest_power_of_two(27)\n    print highest_power_of_two(28)\n    print highest_power_of_two(29)\n    print highest_power_of_two(30)\n    print highest_power_of_two(31)\n    print highest_power_of_two(32)\n    print highest_power_of_",
      -8.515625
    ],
    [
      "def highest_power_of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # base case\n    if n == 0:\n        return 1\n    # binary search\n    while True:\n        if n & 1 == 1:\n            return n\n        n >>= 1\n\nif __name__ == '__main__':\n    assert highest_power_of_2(2) == 2\n    assert highest_power_of_2(3) == 4\n    assert highest_power_of_2(4) == 4\n    assert highest_power_of_2(5) == 8\n    assert highest_power_of_2(6) == 8\n    assert highest_power_of_2(7) == 8\n    assert highest_power_of_2(8) == 8\n    assert highest_power_of_2(9) == 16\n    assert highest_power_of_2(10) == 16\n    assert highest_power_of_2(11) == 16\n    assert highest_power_of_2(12) == 16\n    assert highest_power_of_2(13) == 16\n    assert highest_power_of_2(14) == 16\n    assert highest_power_of_2(15) == 16\n    assert highest_power_of_2(16) == 16\n    assert highest_power_of_2(17) == 32\n    assert highest_power_of_2(18) == 32\n    assert highest_power_of_2(19) == 32\n    assert highest_power_of_2(20) == 32\n    assert highest_power_of_2(21) == 32\n    assert highest_power_of_2(22) == 32\n    assert highest_power_of_2(23) == 32\n    assert highest_power_of_2(24) == 32\n    assert highest_power_of_2(25) == 32\n    assert highest_power_of_2(26) == 32\n    assert highest_power_of_2(27) == 32\n    assert highest_power_of_2(28) == 32\n    assert highest_power_of_2(29) == 32\n    assert",
      -8.8203125
    ],
    [
      "def highest_power_of_two(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while i < num:\n        i += 1\n        while True:\n            if num % i == 0:\n                num /= i\n                break\n        if i * i == num:\n            return i\n    return i\n\n\nif __name__ == '__main__':\n    assert highest_power_of_two(16) == 8\n    assert highest_power_of_two(18) == 9\n    assert highest_power_of_two(20) == 10\n    assert highest_power_of_two(21) == 10\n    assert highest_power_of_two(22) == 10\n    assert highest_power_of_two(40) == 20\n    assert highest_power_of_two(64) == 32\n    assert highest_power_of_two(100) == 10\n    assert highest_power_of_two(1000) == 100\n    assert highest_power_of_two(2000) == 100\n    assert highest_power_of_two(2000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power_of_two(3000) == 100\n    assert highest_power",
      -11.6015625
    ],
    [
      "import math\n\ndef highest_power_of_2(number):\n    if number == 0:\n        return 1\n    elif number == 1:\n        return 2\n    elif number == 2:\n        return 4\n    elif number == 3:\n        return 8\n    elif number == 4:\n        return 16\n    elif number == 5:\n        return 32\n    elif number == 6:\n        return 64\n    elif number == 7:\n        return 128\n    elif number == 8:\n        return 256\n    elif number == 9:\n        return 512\n    elif number == 10:\n        return 1024\n    elif number == 11:\n        return 2048\n    elif number == 12:\n        return 4096\n    elif number == 13:\n        return 8192\n    elif number == 14:\n        return 16384\n    elif number == 15:\n        return 32768\n    elif number == 16:\n        return 65536\n    elif number == 17:\n        return 131072\n    elif number == 18:\n        return 262144\n    elif number == 19:\n        return 524288\n    elif number == 20:\n        return 1048576\n    elif number == 21:\n        return 2097152\n    elif number == 22:\n        return 4194304\n    elif number == 23:\n        return 8388608\n    elif number == 24:\n        return 16777216\n    elif number == 25:\n        return 33554432\n    elif number == 26:\n        return 67108864\n    elif number == 27:\n        return 134217728\n    elif number == 28:\n        return 268435456\n    elif number == 29:\n        return 536870912\n    elif number == 30:\n        return 1073741824\n    elif number == 31:\n        return 2147483648\n    else:\n        raise ValueError(\"Number is not a power of 2.\")\n\ndef main():\n    print(highest_power_of_2(31))\n    print(highest_power_of_2(31))\n\nif __name__ == \"__main__\":\n    main()",
      -12.5859375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}