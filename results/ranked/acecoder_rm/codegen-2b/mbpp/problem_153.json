{
  "problem": {
    "task_id": "MBPP/164",
    "prompt": "Write a python function to check whether the sum of divisors are same or not.",
    "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
    "test_list": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ],
    "challenge_test_list": [],
    "problem_id": 153
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def sum_divisors(n):\n    return sum(i for i in range(1, int(n) + 1) if n % i == 0)\n\n\nprint sum_divisors(100)",
      3.2109375
    ],
    [
      "def sum_divisors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    print sum_divisors(10)",
      1.6474609375
    ],
    [
      "def sum_of_divisors(n):\n    sum = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# test cases\nn = 10\nprint sum_of_divisors(n)\n\nn = 9\nprint sum_of_divisors(n)\n\nn = 8\nprint sum_of_divisors(n)\n\nn = 7\nprint sum_of_divisors(n)\n\nn = 6\nprint sum_of_divisors(n)\n\nn = 5\nprint sum_of_divisors(n)\n\nn = 4\nprint sum_of_divisors(n)\n\nn = 3\nprint sum_of_divisors(n)\n\nn = 2\nprint sum_of_divisors(n)\n\nn = 1\nprint sum_of_divisors(n)\n\nn = 0\nprint sum_of_divisors(n)\n\nn = -1\nprint sum_of_divisors(n)\n\nn = -2\nprint sum_of_divisors(n)\n\nn = -3\nprint sum_of_divisors(n)\n\nn = -4\nprint sum_of_divisors(n)\n\nn = -5\nprint sum_of_divisors(n)\n\nn = -6\nprint sum_of_divisors(n)\n\nn = -7\nprint sum_of_divisors(n)\n\nn = -8\nprint sum_of_divisors(n)\n\nn = -9\nprint sum_of_divisors(n)\n\nn = -10\nprint sum_of_divisors(n)",
      1.2470703125
    ],
    [
      "def check_sum_divisors(num):\n    return sum([1 for i in range(1, num + 1) if i % j == 0 for j in range(2, int(num ** 0.5) + 1)])\n\nprint check_sum_divisors(10)\n\n\"\"\"\nOutput:\n\ncheck_sum_divisors(10)\n\n\"\"\"",
      0.98193359375
    ],
    [
      "def sum_of_divisors(n):\n    return sum([i for i in range(1, n+1) if n % i == 0])\n\nprint sum_of_divisors(20)",
      0.60986328125
    ],
    [
      "def sum_of_divisors(number):\n    sum_of_divisors = 0\n    for i in range(1, int(number**0.5)+1):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(sum_of_divisors(i))",
      0.49853515625
    ],
    [
      "def sum_of_divisors(n):\n    if n == 1:\n        return 1\n    return sum(numpy.divisors(n))\n\nn = int(input())\nprint(sum_of_divisors(n))",
      0.24267578125
    ],
    [
      "#!/usr/bin/env python\n\ndef sum_divisors(n):\n    \"\"\"\n    sum_divisors(n) -> list of integers\n    sum_divisors(n) -> list of integers\n    \"\"\"\n    d = [1]\n    for i in range(2, n+1):\n        d.append(d[-1] + i)\n    return d\n\nif __name__ == '__main__':\n    n = int(input('Enter a number : '))\n    print('The sum of divisors of', n, 'is : ', sum_divisors(n))",
      0.1302490234375
    ],
    [
      "#!/usr/bin/python\n\ndef check_sum(number):\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    sum = check_sum(100)\n    print sum",
      0.1265869140625
    ],
    [
      "def sum_of_divisors(n):\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\nn = int(input())\nprint(sum_of_divisors(n))",
      -0.3447265625
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    Calculate sum of divisors of n\n    :param n: int\n    :return: sum of divisors\n    \"\"\"\n    # sum of divisors of n\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(divisors)\n\n\ndef check_sum_divisors(n):\n    \"\"\"\n    Check whether the sum of divisors of n is same or not\n    :param n: int\n    :return: boolean\n    \"\"\"\n    # check sum of divisors\n    return sum_divisors(n) == n\n\n\nif __name__ == '__main__':\n    n = int(input('Enter an integer: '))\n    print(sum_divisors(n))\n    print(check_sum_divisors(n))",
      -0.65576171875
    ],
    [
      "# https://www.hackerrank.com/challenges/divisor-sum/problem\n\n#!/usr/bin/python\n\n# The solution to this problem is to check whether the sum of divisors is same or not.\n# The sum of divisors of a number is defined as the sum of its divisors excluding the number itself.\n\n# Complete the 'divisorSum' function below.\ndef divisorSum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# Your divisorSum function should return an int.\ndef divisorSum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    n = int(input())\n    print(divisorSum(n))",
      -0.6728515625
    ],
    [
      "def sum_of_divisors(n):\n    # write your code here\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(divisors)\n\n\n# print sum_of_divisors(9)\n# print sum_of_divisors(12)\n# print sum_of_divisors(15)\n# print sum_of_divisors(16)\n# print sum_of_divisors(20)\n# print sum_of_divisors(22)\n# print sum_of_divisors(24)\n# print sum_of_divisors(25)\n# print sum_of_divisors(26)\n# print sum_of_divisors(27)\n# print sum_of_divisors(28)\n# print sum_of_divisors(29)\n# print sum_of_divisors(30)\n# print sum_of_divisors(31)\n# print sum_of_divisors(32)\n# print sum_of_divisors(33)\n# print sum_of_divisors(34)\n# print sum_of_divisors(35)\n# print sum_of_divisors(36)\n# print sum_of_divisors(37)\n# print sum_of_divisors(38)\n# print sum_of_divisors(39)\n# print sum_of_divisors(40)\n# print sum_of_divisors(41)\n# print sum_of_divisors(42)\n# print sum_of_divisors(43)\n# print sum_of_divisors(44)\n# print sum_of_divisors(45)\n# print sum_of_divisors(46)\n# print sum_of_divisors(47)\n# print sum_of_divisors(48)\n# print sum_of_divisors(49)\n# print sum_of_divisors(50)\n# print sum_of_divisors(51)\n# print sum_of_divisors(52)\n#",
      -0.68115234375
    ],
    [
      "def sum_of_divisors(number):\n    sum_of_divisors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\ndef sum_of_divisors_python(number):\n    return sum(divisors(number))\n\nprint(sum_of_divisors_python(10))\n\n\"\"\"\nOutput:\n\nsum_of_divisors_python(10) = 3\n\"\"\"",
      -0.85595703125
    ],
    [
      "def sum_divisors(n):\n    divisors = [i for i in range(2, int(n ** 0.5) + 1) if n % i == 0]\n    return sum(divisors)\n\ndef main():\n    print sum_divisors(7)\n\nif __name__ == '__main__':\n    main()",
      -0.85595703125
    ],
    [
      "def check_sum(n):\n    \"\"\"\n    >>> check_sum(1)\n    True\n    >>> check_sum(2)\n    True\n    >>> check_sum(3)\n    True\n    >>> check_sum(4)\n    True\n    >>> check_sum(5)\n    False\n    \"\"\"\n    return sum([1 for x in range(1,n) if n%x==0]) == n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "def sum_of_divisors(number):\n    return sum([i for i in range(1, number) if number % i == 0])\n\nprint(sum_of_divisors(3))\nprint(sum_of_divisors(9))\nprint(sum_of_divisors(10))",
      -0.85693359375
    ],
    [
      "def sum_divisors(n):\n    divisor_sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\nprint sum_divisors(20)",
      -0.85693359375
    ],
    [
      "def sum_divisors(n):\n    return sum(x for x in range(1, n) if n % x == 0)\n\nprint(sum_divisors(10))",
      -0.85693359375
    ],
    [
      "# Write your code here\ndef sum_of_divisors(n):\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i\n    return sum\n\nprint sum_of_divisors(20)",
      -0.85693359375
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    Find the sum of all the divisors of n.\n    n is a positive integer\n    \"\"\"\n    if n == 1:\n        return 1\n    divisors = [1]\n    for i in range(2, n + 1):\n        divisors.append(i)\n        for j in range(2, int(n ** 0.5) + 1):\n            if i % j == 0:\n                divisors[-1] += divisors[-1]\n                divisors.append(divisors[-1])\n    return sum(divisors)\n\n\nprint(sum_divisors(100))",
      -0.85791015625
    ],
    [
      "def sum_of_divisors(n):\n    return sum(divisor(n) for divisor in range(1, n+1))\n\ndef divisor(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\nprint sum_of_divisors(10)",
      -0.85791015625
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    Check whether the sum of divisors are same or not.\n    :param n: integer\n    :return: boolean\n    \"\"\"\n    if n == 1:\n        return False\n    divisors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n / i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print sum_divisors(25)\n    print sum_divisors(5)\n    print sum_divisors(4)\n    print sum_divisors(3)\n    print sum_divisors(2)\n    print sum_divisors(1)\n    print sum_divisors(0)",
      -0.85791015625
    ],
    [
      "def sum_of_divisors(n):\n    return sum([i for i in range(1, n + 1) if n % i == 0])\n\nif __name__ == '__main__':\n    print sum_of_divisors(5)\n    print sum_of_divisors(4)\n    print sum_of_divisors(3)\n    print sum_of_divisors(2)\n    print sum_of_divisors(1)\n    print sum_of_divisors(0)",
      -0.85791015625
    ],
    [
      "def sum_divisors(num):\n    \"\"\"\n    sum_divisors(num) -> bool\n    \"\"\"\n    # This will return the sum of divisors of num\n    sum_divisors = 0\n    for x in range(1, num):\n        if num % x == 0:\n            sum_divisors += x\n    return sum_divisors == num\n\nif __name__ == '__main__':\n    #Test cases\n    assert sum_divisors(0) == 0\n    assert sum_divisors(1) == 1\n    assert sum_divisors(2) == 2\n    assert sum_divisors(3) == 3\n    assert sum_divisors(4) == 2\n    assert sum_divisors(5) == 5\n    assert sum_divisors(6) == 3\n    assert sum_divisors(7) == 2\n    assert sum_divisors(8) == 4\n    assert sum_divisors(9) == 9",
      -0.85791015625
    ],
    [
      "import math\n\ndef check_sum_of_divisors(number):\n    return sum(divisors(number)) == number\n\ndef divisors(number):\n    if number == 0:\n        return []\n    else:\n        return [1] + [number//i for i in range(2, math.floor(math.sqrt(number)) + 1) if number % i == 0]\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(check_sum_of_divisors(n))",
      -0.85791015625
    ],
    [
      "def sum_of_divisors(n):\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(divisors)\n\nif __name__ == '__main__':\n    print(sum_of_divisors(6))",
      -0.85791015625
    ],
    [
      "def sum_of_divisors(n):\n    \"\"\"\n    sum_of_divisors(n) -> int\n    \"\"\"\n    return sum(divisor(n) for divisor in xrange(1,n))\n\ndef divisor(n):\n    \"\"\"\n    divisor(n) -> int\n    \"\"\"\n    return reduce(lambda x,y: x*y, xrange(1,n))\n\nif __name__ == \"__main__\":\n    print sum_of_divisors(5)",
      -0.85791015625
    ],
    [
      "def sumOfDivisors(num):\n    sum = 0\n    for i in range(1, num):\n        if i % num == 0:\n            sum += i\n    return sum\n\ndef sumOfDivisors2(num):\n    # sum of divisors\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum\n\nprint sumOfDivisors(13)\nprint sumOfDivisors2(13)",
      -0.85791015625
    ],
    [
      "def sum_divisors(n):\n    return sum(sorted(divisors(n)))\n\ndef divisors(n):\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    result = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            result += [i]\n            result += [n // i]\n    return result\n\nif __name__ == '__main__':\n    print sum_divisors(12)",
      -0.8583984375
    ],
    [
      "def sumOfDivisors(number):\n    return sum([i for i in range(1, number+1) if number % i == 0])\n\nprint sumOfDivisors(100)",
      -0.8583984375
    ],
    [
      "def sumOfDivisors(n):\n    \"\"\"\n    >>> sumOfDivisors(10)\n    True\n    >>> sumOfDivisors(20)\n    False\n    \"\"\"\n    sumOfDivisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sumOfDivisors += i\n    return sumOfDivisors == n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def sumDivisors(n):\n    return sum([i for i in range(1,n+1) if n%i==0])\n\nprint sumDivisors(10)\nprint sumDivisors(20)\nprint sumDivisors(30)\nprint sumDivisors(40)\nprint sumDivisors(50)\nprint sumDivisors(60)\nprint sumDivisors(70)\nprint sumDivisors(80)\nprint sumDivisors(90)",
      -0.8583984375
    ],
    [
      "def sum_divisors(num):\n    \"\"\"\n    sum_divisors(num) -> bool\n\n    Returns True if the sum of divisors of num is same as num, else returns False.\n    \"\"\"\n    if num == 0:\n        return True\n    sum_divisors = 0\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            sum_divisors += i\n    if num == sum_divisors:\n        return True\n    else:\n        return False\n\nprint sum_divisors(6)",
      -0.8583984375
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    Return sum of divisors of n.\n    \"\"\"\n    return sum(divisors(n))\n\ndef divisors(n):\n    \"\"\"\n    Return a list of all divisors of n.\n    \"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    return divisors\n\ndef sum_divisors_2(n):\n    \"\"\"\n    Return sum of divisors of n.\n    \"\"\"\n    return sum(divisors(n))\n\nif __name__ == \"__main__\":\n    n = 5\n    print(sum_divisors(n))\n    print(sum_divisors_2(n))",
      -0.8583984375
    ],
    [
      "def check(n):\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    \n    #print n\n    s = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        #print i\n        if n % i == 0:\n            s += i\n            #print s\n            if s == n:\n                return True\n    return False\n\nif __name__ == '__main__':\n    print check(100)",
      -0.8583984375
    ],
    [
      "def sum_divisors(number):\n    divisor_sum = 0\n    for i in range(2, number):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\nif __name__ == \"__main__\":\n    print sum_divisors(12)",
      -0.8583984375
    ],
    [
      "def sum_of_divisors(n):\n    \"\"\"\n    Returns the sum of the divisors of n.\n    \"\"\"\n    return sum(divisors(n))\n\ndef divisors(n):\n    \"\"\"\n    Returns a list of all the divisors of n.\n    \"\"\"\n    d = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            d.append(i)\n            d.append(n // i)\n    return d\n\nif __name__ == '__main__':\n    print sum_of_divisors(100)\n    print sum_of_divisors(1000)\n    print sum_of_divisors(200)\n    print sum_of_divisors(2000)\n    print sum_of_divisors(5000)\n    print sum_of_divisors(100000)",
      -0.8583984375
    ],
    [
      "# Write your code here\ndef is_sum_of_divisors(n):\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    if n % 5 == 0:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    for i in range(1, 1000000):\n        if is_sum_of_divisors(i) == True:\n            print(i)\n            break",
      -0.8583984375
    ],
    [
      "def sum_of_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    divisors = [1]\n    for i in range(2, n+1):\n        while n % i == 0:\n            divisors.append(i)\n            n /= i\n    return sum(divisors)\n\n\nif __name__ == '__main__':\n    assert sum_of_divisors(13) == 13, \"Sum of divisors is 13\"\n    assert sum_of_divisors(20) == 10, \"Sum of divisors is 10\"\n    assert sum_of_divisors(100) == 20, \"Sum of divisors is 20\"",
      -0.8583984375
    ],
    [
      "def sum_divisors(number):\n    \"\"\"\n    Check whether the sum of divisors of number is same or not.\n    :param number:\n    :return:\n    \"\"\"\n    return sum(x for x in range(1, number) if number % x == 0)\n\nif __name__ == '__main__':\n    print sum_divisors(1000)\n    print sum_divisors(100)\n    print sum_divisors(50)\n    print sum_divisors(20)\n    print sum_divisors(10)",
      -0.8583984375
    ],
    [
      "def sum_divisors(num):\n    sum_divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_divisors += i\n    return sum_divisors\n\nprint sum_divisors(10)",
      -0.8583984375
    ],
    [
      "def sum_of_divisors(n):\n    divisors = [1]\n    for i in range(2, n + 1):\n        if i in divisors:\n            divisors.append(i)\n            continue\n        for j in range(1, i):\n            if i % j == 0:\n                divisors.append(j)\n                divisors.append(i / j)\n    return sum(divisors)\n\nif __name__ == '__main__':\n    print(sum_of_divisors(100))",
      -0.85888671875
    ],
    [
      "def sum_divisors(num):\n    divisors = [1]\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n            divisors.append(num/i)\n    return sum(divisors)\n\nif __name__ == '__main__':\n    sum_divisors(100)",
      -0.85888671875
    ],
    [
      "def check_sum_of_divisors(num):\n    divisors = [1]\n    for i in range(2, num):\n        for j in range(1, i):\n            divisors.append(i)\n            divisors.append(j)\n    return sum(divisors) == num\n\nprint(check_sum_of_divisors(10))",
      -0.85888671875
    ],
    [
      "def sum_of_divisors(number):\n    \"\"\"\n    :type number: int\n    :rtype: bool\n    \"\"\"\n    if number == 1:\n        return True\n    sum_of_divisors = 0\n    for i in range(2, number + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors == number\n\n\nif __name__ == '__main__':\n    print sum_of_divisors(100)",
      -0.90283203125
    ],
    [
      "def check_sum_divisors(n):\n    sum_divisors = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors == n\n\n#print(check_sum_divisors(13))\n#print(check_sum_divisors(12))\n#print(check_sum_divisors(10))\n#print(check_sum_divisors(8))\n#print(check_sum_divisors(5))\n#print(check_sum_divisors(4))\n#print(check_sum_divisors(3))\n#print(check_sum_divisors(2))\n#print(check_sum_divisors(1))\n#print(check_sum_divisors(0))",
      -0.912109375
    ],
    [
      "def sum_divisors(n):\n    return sum(x for x in range(1, n) if x not in (n // x))\n\nprint(sum_divisors(4))",
      -0.984375
    ],
    [
      "def sum_of_divisors(n):\n    '''\n    sum of divisors\n    '''\n    \n    divisor_sum = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\ndef main():\n    '''\n    main\n    '''\n    print sum_of_divisors(500)\n    print sum_of_divisors(100)\n    print sum_of_divisors(28)\n    \n    \nif __name__ == '__main__':\n    main()",
      -0.994140625
    ],
    [
      "def sum_divisors(n):\n    '''\n    sum of divisors\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i\n        if s % n == 0:\n            s /= n\n    return s\n\nif __name__ == '__main__':\n    print(sum_divisors(100))\n    print(sum_divisors(1))\n    print(sum_divisors(2))\n    print(sum_divisors(3))\n    print(sum_divisors(4))\n    print(sum_divisors(5))\n    print(sum_divisors(6))\n    print(sum_divisors(7))\n    print(sum_divisors(8))\n    print(sum_divisors(9))\n    print(sum_divisors(10))\n    print(sum_divisors(11))\n    print(sum_divisors(12))\n    print(sum_divisors(13))\n    print(sum_divisors(14))\n    print(sum_divisors(15))\n    print(sum_divisors(16))\n    print(sum_divisors(17))\n    print(sum_divisors(18))\n    print(sum_divisors(19))\n    print(sum_divisors(20))\n    print(sum_divisors(21))\n    print(sum_divisors(22))\n    print(sum_divisors(23))\n    print(sum_divisors(24))\n    print(sum_divisors(25))\n    print(sum_divisors(26))\n    print(sum_divisors(27))\n    print(sum_divisors(28))\n    print(sum_divisors(29))\n    print(sum_divisors(30))\n    print(sum_divisors(31))\n    print(sum_divisors(32))\n    print(sum_divisors(33))\n    print(sum_divisors(34))\n    print(sum_divisors(35))",
      -1.03125
    ],
    [
      "def sum_of_divisors(num):\n    '''\n    sum_of_divisors(num) --> int\n    Return the sum of all divisors of num.\n    >>> sum_of_divisors(12)\n    6\n    >>> sum_of_divisors(15)\n    10\n    '''\n    divisors = [1]\n    for i in range(2, num/2 + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\ndef main():\n    \"\"\"\n    Write a main() function that takes an integer and prints whether its sum of divisors are same or not.\n    >>> main()(12)\n    True\n    >>> main()(15)\n    False\n    \"\"\"\n    num = int(input('Enter number: '))\n    print('The sum of divisors is {}'.format(sum_of_divisors(num)))\n\nif __name__ == '__main__':\n    main()",
      -1.0478515625
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    sum_divisors(n)\n    :type n: int\n    :rtype: int\n    \"\"\"\n    s = 1\n    for i in range(2, n):\n        if n % i == 0:\n            s += i\n    return s\n\nprint sum_divisors(10)",
      -1.2216796875
    ],
    [
      "def sum_divisors(num):\n    s = 0\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            s += i\n    return s\n\ndef sum_divisors_recursive(num):\n    if num == 1:\n        return 1\n    else:\n        return sum_divisors_recursive(num-1) + sum_divisors_recursive(num/2)\n\nprint sum_divisors(10)",
      -1.3671875
    ],
    [
      "def sum_of_divisors(number):\n    \"\"\"\n    >>> sum_of_divisors(4)\n    True\n    >>> sum_of_divisors(12)\n    True\n    >>> sum_of_divisors(0)\n    False\n    \"\"\"\n    return sum([i for i in range(1, number + 1) if number % i == 0])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.7373046875
    ],
    [
      "def sum_divisors(number):\n    if number == 1:\n        return 1\n\n    divisors = [1]\n    sum_divisors = 0\n    for i in range(2, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n            sum_divisors += i\n        else:\n            divisors.append(1)\n    return sum_divisors\n\nprint sum_divisors(1000)",
      -1.771484375
    ],
    [
      "import math\nimport sys\n\ndef check_sum_of_divisors(n):\n    \"\"\"\n    Check whether the sum of divisors of n is same or not.\n    n is a positive integer\n    Returns True if sum of divisors is same as n, else False.\n    \"\"\"\n    s = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s += i\n    return s == n\n\ndef main():\n    \"\"\"\n    Main function to test the function.\n    \"\"\"\n    n = int(sys.argv[1])\n    if check_sum_of_divisors(n) == True:\n        print(\"True\")\n    else:\n        print(\"False\")\n\nif __name__ == '__main__':\n    main()",
      -1.8642578125
    ],
    [
      "def sum_of_divisors(n):\n    divisors = [1]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n/i)\n    return sum(divisors)\n\ndef test_sum_of_divisors():\n    assert(sum_of_divisors(6) == 2)\n    assert(sum_of_divisors(10) == 5)\n    assert(sum_of_divisors(100) == 25)\n    assert(sum_of_divisors(1000) == 500)\n\nif __name__ == '__main__':\n    test_sum_of_divisors()",
      -1.908203125
    ],
    [
      "def sum_divisors(n):\n    return sum([i for i in range(1, n+1) if n % i == 0])\n\ndef check(n):\n    return sum_divisors(n) == n\n\nif __name__ == \"__main__\":\n    print(check(7))\n    print(check(4))",
      -2.099609375
    ],
    [
      "def sum_divisors(n):\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\nif __name__ == '__main__':\n    sum_of_divisors = sum_divisors(15)\n    print sum_of_divisors\n    print sum_of_divisors == sum_of_divisors2",
      -2.20703125
    ],
    [
      "def sum_of_divisors(n):\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(divisors)\n\nif __name__ == '__main__':\n    print sum_of_divisors(10)\n    print sum_of_divisors(13)",
      -2.21484375
    ],
    [
      "def sum_of_divisors(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    n = int(input())\n    print(sum_of_divisors(n))",
      -2.21484375
    ],
    [
      "def sum_divisors(num):\n    \"\"\"\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(2)\n    2\n    >>> sum_divisors(3)\n    3\n    >>> sum_divisors(4)\n    4\n    >>> sum_divisors(5)\n    5\n    >>> sum_divisors(6)\n    6\n    >>> sum_divisors(7)\n    7\n    >>> sum_divisors(8)\n    8\n    >>> sum_divisors(9)\n    9\n    >>> sum_divisors(10)\n    10\n    >>> sum_divisors(11)\n    11\n    >>> sum_divisors(12)\n    12\n    >>> sum_divisors(13)\n    13\n    >>> sum_divisors(14)\n    14\n    >>> sum_divisors(15)\n    15\n    \"\"\"\n    s = 1\n    for i in range(2, int(num**0.5)+1):\n        while num % i == 0:\n            s += i\n            num //= i\n    return s\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.8984375
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n == 0:\n        return True\n    divisor_sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum == n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(sum_divisors(n))",
      -3.02734375
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    sum_divisors(n) -> sum of divisors of n\n    sum_divisors(0) -> 0\n    sum_divisors(1) -> 1\n    sum_divisors(2) -> 2\n    sum_divisors(3) -> 1 + 2\n    sum_divisors(4) -> 1 + 2 + 3\n    sum_divisors(5) -> 1 + 2 + 3 + 5\n    sum_divisors(6) -> 1 + 2 + 3 + 5 + 6\n    sum_divisors(7) -> 1 + 2 + 3 + 5 + 6 + 7\n    sum_divisors(8) -> 1 + 2 + 3 + 5 + 6 + 7 + 8\n    sum_divisors(9) -> 1 + 2 + 3 + 5 + 6 + 7 + 8 + 9\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n\n\nif __name__ == '__main__':\n    print sum_divisors(2)\n    print sum_divisors(3)\n    print sum_divisors(4)\n    print sum_divisors(5)\n    print sum_divisors(6)\n    print sum_divisors(7)\n    print sum_divisors(8)\n    print sum_divisors(9)\n    print sum_divisors(10)\n    print sum_divisors(100)",
      -3.806640625
    ],
    [
      "def sum_of_divisors(n):\n    return sum([i for i in range(1, n + 1) if n % i == 0])\n\nprint(sum_of_divisors(25))",
      -3.96484375
    ],
    [
      "def sum_divisors(num):\n    \"\"\"\n    >>> sum_divisors(8)\n    1\n    >>> sum_divisors(32)\n    6\n    >>> sum_divisors(24)\n    6\n    >>> sum_divisors(50)\n    10\n    \"\"\"\n    if num <= 1:\n        return 1\n    s = 0\n    for i in range(2, int(num ** 0.5) + 1):\n        while num % i == 0:\n            s += i\n            num //= i\n    return s\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.0
    ],
    [
      "def sum_divisors(number):\n    \"\"\"\n    number: the number that you are checking\n    return: the sum of divisors of number\n    \"\"\"\n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number/i)\n    return sum(divisors)\n\ndef main():\n    print(sum_divisors(500))\n\nif __name__ == '__main__':\n    main()",
      -4.0546875
    ],
    [
      "def is_sum_of_divisors(n):\n    # write code here\n    sum_of_divisors = 0\n    for i in range(1,n+1):\n        sum_of_divisors += i\n        if sum_of_divisors == n:\n            return True\n        elif sum_of_divisors % i == 0:\n            return False\n    return False\n\nif __name__ == '__main__':\n    print is_sum_of_divisors(100)",
      -4.0859375
    ],
    [
      "def sumOfDivisors(n):\n    \"\"\"\n    sumOfDivisors(n) -> int\n    \n    Returns the sum of divisors of n.\n    \"\"\"\n    divisor = 2\n    sum = 0\n    while divisor <= n:\n        if n % divisor == 0:\n            sum += divisor\n            n //= divisor\n        else:\n            divisor += 1\n    return sum\n\nif __name__ == '__main__':\n    for i in range(1, 1001):\n        if sumOfDivisors(i) == i:\n            print(i)\n            break",
      -4.11328125
    ],
    [
      "def sum_divisors(n):\n    s = sum(divisors(n))\n    if s == n:\n        return True\n    else:\n        return False\n\ndef divisors(n):\n    d = 1\n    while n > 1:\n        d *= n\n        n -= 1\n    return d\n\nif __name__ == '__main__':\n    assert sum_divisors(0) == False, 'Sum of divisors should be False'\n    assert sum_divisors(1) == True, 'Sum of divisors should be True'\n    assert sum_divisors(2) == True, 'Sum of divisors should be True'\n    assert sum_divisors(3) == True, 'Sum of divisors should be True'\n    assert sum_divisors(4) == True, 'Sum of divisors should be True'\n    assert sum_divisors(5) == True, 'Sum of divisors should be True'\n    assert sum_divisors(6) == True, 'Sum of divisors should be True'\n    assert sum_divisors(7) == False, 'Sum of divisors should be False'\n    assert sum_divisors(8) == False, 'Sum of divisors should be False'\n    assert sum_divisors(9) == False, 'Sum of divisors should be False'\n    assert sum_divisors(10) == False, 'Sum of divisors should be False'\n    assert sum_divisors(20) == False, 'Sum of divisors should be False'\n    assert sum_divisors(100) == False, 'Sum of divisors should be False'\n    assert sum_divisors(1000) == False, 'Sum of divisors should be False'",
      -4.171875
    ],
    [
      "def sumOfDivisors(n):\n    '''\n    Input:\n    n: an integer\n    Output:\n    a list of sum of divisors of n\n    '''\n    return [i for i in range(1,n+1) if n%i==0]\n\ndef sumOfDivisors_2(n):\n    '''\n    Input:\n    n: an integer\n    Output:\n    a list of sum of divisors of n\n    '''\n    return [i for i in range(1,n+1) if n%i==0 and i!=n]\n\ndef sumOfDivisors_3(n):\n    '''\n    Input:\n    n: an integer\n    Output:\n    a list of sum of divisors of n\n    '''\n    return [i for i in range(1,n+1) if n%i==0 and i!=n and i!=1]\n\ndef sumOfDivisors_4(n):\n    '''\n    Input:\n    n: an integer\n    Output:\n    a list of sum of divisors of n\n    '''\n    return [i for i in range(1,n+1) if n%i==0 and i!=n and i!=1 and i!=2]\n\ndef sumOfDivisors_5(n):\n    '''\n    Input:\n    n: an integer\n    Output:\n    a list of sum of divisors of n\n    '''\n    return [i for i in range(1,n+1) if n%i==0 and i!=n and i!=1 and i!=2 and i!=3]\n\ndef sumOfDivisors_6(n):\n    '''\n    Input:\n    n: an integer\n    Output:\n    a list of sum of divisors of n\n    '''\n    return [i for i in range(1,n+1) if n%i==0 and i!=n and i!=1 and i!=2 and i!=3 and i!=4]\n\ndef sumOfDivisors_7(n):\n    '''\n    Input",
      -4.4140625
    ],
    [
      "def is_sum_divisible(n):\n    \"\"\"\n    Args:\n        n: an integer\n    Returns:\n        True or False\n    \"\"\"\n    s = sum(divisors(n))\n    return s == n\n\ndef divisors(n):\n    \"\"\"\n    Args:\n        n: an integer\n    Returns:\n        a list of all divisors of n\n    \"\"\"\n    if n == 1:\n        return [1]\n    divisors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n/i)\n    return divisors\n\nprint is_sum_divisible(15)",
      -4.76953125
    ],
    [
      "# write your code here\ndef checkSum(num):\n    return sum([i for i in xrange(1,int(num)+1) if num % i == 0])\n\nprint checkSum(10)\n#>>> 6\nprint checkSum(100)\n#>>> 34\nprint checkSum(1000)\n#>>> 966\nprint checkSum(10000)\n#>>> 1533\nprint checkSum(100000)\n#>>> 7069\nprint checkSum(1000000)\n#>>> 86595\nprint checkSum(10000000)\n#>>> 141666\nprint checkSum(100000000)\n#>>> 302727\nprint checkSum(1000000000)\n#>>> 638881\nprint checkSum(10000000000)\n#>>> 9663741\nprint checkSum(100000000000)\n#>>> 14166667\nprint checkSum(1000000000000)\n#>>> 30272733\nprint checkSum(10000000000000)\n#>>> 63888181\nprint checkSum(100000000000000)\n#>>> 966374119\nprint checkSum(100000000000000000)\n#>>> 1416666719\nprint checkSum(10000000000000000)\n#>>> 3027273361\nprint checkSum(1000000000000000000)\n#>>> 6388818121\nprint checkSum(10000000000000000000)\n#>>> 96637411921\nprint checkSum(100000000000000000000)\n#>>> 141666671921\nprint checkSum(1000000000000000000000)\n#>>> 302727336119\nprint checkSum(10000000000000000000000)\n#>>> 638881812121\nprint checkSum(1000000000000000000000000)\n#>>> 9663741192119\nprint checkSum(10000000000000000000000000)\n#>>> 14166667192119\nprint checkSum(100000000000000000000000000)\n#>>> 30272733611921\nprint checkSum(1000000000000000000000000000)\n#>>> 63888181212121\nprint checkSum(10000000000000000000000000000)\n#>>> 966374119211921\nprint checkSum(1000000000000000000000000000000)\n#>>> 1416666719211921\nprint checkSum(1000000000000000000000000000000000)\n#>>> 302727336119211921\nprint checkSum(",
      -5.12890625
    ],
    [
      "def checkSumDivisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n == 1:\n        return True\n\n    # sum of divisors of n\n    sumDivisors = sum(divisors(n))\n\n    return sumDivisors == n\n\n# write a test case\ntestCases = [\n    (5, True),\n    (6, True),\n    (7, False),\n    (8, True),\n    (10, True),\n    (12, False),\n]\n\nfor case in testCases:\n    print('The sum of divisors of %d is %d' % (case[0], checkSumDivisors(case[0])))",
      -5.37109375
    ],
    [
      "# I wrote this myself\n# I have a feeling I am not doing this correctly\ndef divisors(number):\n    \"\"\"\n    Returns a list of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number / i)\n    return divisors\n\ndef sum_divisors(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if i in divisors(number):\n            sum += i\n    return sum\n\ndef main():\n    \"\"\"\n    Write a function to check whether the sum of divisors are same or not.\n    \"\"\"\n    print(sum_divisors(6))\n\nif __name__ == \"__main__\":\n    main()",
      -5.421875
    ],
    [
      "#\n# Write a python function to check whether the sum of divisors are same or not.\n#\n# Input:\n#  n: An integer\n#\n# Output:\n#  True or False\n#\ndef is_summation_equal(n):\n  #\n  # Write your code here\n  #\n  if n <= 0:\n    return False\n  if n == 1:\n    return True\n  if n % 2 == 0:\n    return True\n  if n % 3 == 0:\n    return True\n  if n % 5 == 0:\n    return True\n  if n % 7 == 0:\n    return True\n  if n % 11 == 0:\n    return True\n  if n % 13 == 0:\n    return True\n  if n % 17 == 0:\n    return True\n  if n % 19 == 0:\n    return True\n  if n % 23 == 0:\n    return True\n  if n % 29 == 0:\n    return True\n  if n % 31 == 0:\n    return True\n  if n % 37 == 0:\n    return True\n  if n % 41 == 0:\n    return True\n  if n % 43 == 0:\n    return True\n  if n % 47 == 0:\n    return True\n  if n % 53 == 0:\n    return True\n  if n % 59 == 0:\n    return True\n  if n % 61 == 0:\n    return True\n  if n % 67 == 0:\n    return True\n  if n % 71 == 0:\n    return True\n  if n % 73 == 0:\n    return True\n  if n % 79 == 0:\n    return True\n  if n % 83 == 0:\n    return True\n  if n % 89 == 0:\n    return True\n  if n % 97 == 0:\n    return True\n  if n % 101 == 0:\n    return True\n  if n % 103 == 0:\n    return True\n  if n % 109 == 0:\n    return True\n  if n % 113 == 0:\n    return True\n  if n % 127 == 0:\n    return True\n  if n % 131 == 0:\n    return True\n  if n % 137 == 0:\n    return True",
      -5.94140625
    ],
    [
      "def sum_divisors(n):\n    return sum(divisors(n))\n\ndef divisors(n):\n    d = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            d.append(i)\n            if i!= n/i:\n                d.append(n/i)\n    return d\n\nif __name__ == '__main__':\n    print(sum_divisors(9))\n    print(sum_divisors(10))\n    print(sum_divisors(20))\n    print(sum_divisors(30))\n    print(sum_divisors(100))\n    print(sum_divisors(1000))\n    print(sum_divisors(10000))\n    print(sum_divisors(100000))\n    print(sum_divisors(1000000))\n    print(sum_divisors(1000000000))",
      -6.03515625
    ],
    [
      "def sum_divisors(num):\n    \"\"\"\n    sum_divisors(num) -> list of integers\n\n    sum_divisors(num) computes the sum of divisors of num\n    >>> sum_divisors(5)\n    [1, 2, 3, 5, 7]\n    \"\"\"\n    if num == 1:\n        return [1]\n    if num == 0:\n        return []\n\n    divisors = [1]\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            num //= i\n    return divisors\n\n\ndef check_sum_divisors(num):\n    \"\"\"\n    check_sum_divisors(num) -> boolean\n\n    check_sum_divisors(num) computes whether the sum of divisors of num is same or not.\n    >>> check_sum_divisors(5)\n    True\n    >>> check_sum_divisors(6)\n    False\n    \"\"\"\n    divisors = sum_divisors(num)\n    return len(divisors) == len(set(divisors))\n\n\ndef main():\n    print(sum_divisors(5))\n    print(check_sum_divisors(5))\n\nif __name__ == '__main__':\n    main()",
      -6.1640625
    ],
    [
      "def sum_of_divisors(n):\n    divisors = []\n    for i in range(1, int(n) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 1:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the sum of divisors are same or not.\n\nExample\nGiven n = 7, return true.\n\nGiven n = 14, return false.\n\"\"\"\n\ndef sum_of_divisors_2(n):\n    divisors = [1]\n    for i in range(2, int(n) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 1:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the sum of divisors are same or not.\n\nExample\nGiven n = 7, return true.\n\nGiven n = 14, return false.\n\"\"\"\n\ndef sum_of_divisors_3(n):\n    divisors = [1]\n    for i in range(2, int(n) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 1:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the sum of divisors are same or not.\n\nExample\nGiven n = 7, return true.\n\nGiven n = 14, return false.\n\"\"\"\n\ndef sum_of_divisors_4(n):\n    divisors = [1]\n    for i in range(2, int(n) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 1:\n        return True\n    else:\n        return False\n\n\"\"\"\nWrite a function to check whether the sum of divisors are same or not.\n\nExample\nGiven n = 7, return true.\n\nGiven n = 14, return false.\n\"\"\"\n\ndef sum_",
      -6.17578125
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    sum_divisors(n) -> number of divisors of n\n    \"\"\"\n    return sum(map(lambda x: 1, divisors(n)))\n\ndef divisors(n):\n    \"\"\"\n    divisors(n) -> list of divisors of n\n    \"\"\"\n    return [i for i in range(1, n+1) if n % i == 0]",
      -6.19921875
    ],
    [
      "def checkSumOfDivisors(number):\n    \"\"\"\n    :type number: int\n    :rtype: bool\n    \"\"\"\n    if number < 0:\n        return False\n\n    sum = 0\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            sum += i\n    return number == sum\n\n# Your Solution here\n\n# test\n\nprint(checkSumOfDivisors(1))\nprint(checkSumOfDivisors(2))\nprint(checkSumOfDivisors(3))\nprint(checkSumOfDivisors(4))\nprint(checkSumOfDivisors(5))\nprint(checkSumOfDivisors(6))\nprint(checkSumOfDivisors(7))\nprint(checkSumOfDivisors(8))\nprint(checkSumOfDivisors(9))\nprint(checkSumOfDivisors(10))\nprint(checkSumOfDivisors(11))\nprint(checkSumOfDivisors(12))\nprint(checkSumOfDivisors(13))\nprint(checkSumOfDivisors(14))\nprint(checkSumOfDivisors(15))\nprint(checkSumOfDivisors(16))\nprint(checkSumOfDivisors(17))\nprint(checkSumOfDivisors(18))\nprint(checkSumOfDivisors(19))\nprint(checkSumOfDivisors(20))\nprint(checkSumOfDivisors(21))\nprint(checkSumOfDivisors(22))\nprint(checkSumOfDivisors(23))\nprint(checkSumOfDivisors(24))\nprint(checkSumOfDivisors(25))\nprint(checkSumOfDivisors(26))\nprint(checkSumOfDivisors(27))\nprint(checkSumOfDivisors(28))\nprint(checkSumOfDivisors(29))\nprint(checkSumOfDivisors(30))\nprint(checkSumOfDivisors(31))\nprint(checkSumOfDivisors(32))\nprint(checkSumOfDivisors(33))\nprint(checkSumOfDivisors(34))\nprint(checkSumOfDiv",
      -6.41796875
    ],
    [
      "def check_sum_of_divisors(n):\n    # check for divisors of n\n    divisors = [1]\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    print(sum(divisors))\n\n\"\"\"\nCheck whether the sum of divisors are same or not.\n\"\"\"\n\ndef check_sum_of_divisors2(n):\n    # check for divisors of n\n    divisors = [1]\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\n\n\"\"\"\nCheck whether the sum of divisors are same or not.\n\"\"\"\n\ndef check_sum_of_divisors3(n):\n    # check for divisors of n\n    divisors = [1]\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\n\n\"\"\"\nCheck whether the sum of divisors are same or not.\n\"\"\"\n\ndef check_sum_of_divisors4(n):\n    # check for divisors of n\n    divisors = [1]\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\n\n\"\"\"\nCheck whether the sum of divisors are same or not.\n\"\"\"\n\ndef check_sum_of_divisors5(n):\n    # check for divisors of n\n    divisors = [1]\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\n\n\"\"\"\nCheck whether the sum of divisors are same or not.\n\"\"\"\n\ndef check_sum_of_divisors6(n):\n    # check for divisors of n\n    divis",
      -6.62109375
    ],
    [
      "def check(n):\n    \"\"\"\n    Check whether the sum of divisors are same or not.\n    :param n: The number to be checked.\n    :return: True if sum of divisors are same, else False.\n    \"\"\"\n    # The sum of divisors are same if the sum of all the divisors is equal to n.\n    return sum(divisors(n)) == n\n\ndef divisors(n):\n    \"\"\"\n    Get the divisors of a number.\n    :param n: The number for which we need to find the divisors.\n    :return: A list of divisors of the number.\n    \"\"\"\n    divisors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n // i)\n    return divisors\n\nif __name__ == '__main__':\n    print(check(7))\n    print(check(14))\n    print(check(18))\n    print(check(36))\n    print(check(42))\n    print(check(99))\n    print(check(100))\n    print(check(120))\n    print(check(1000))\n    print(check(1002))\n    print(check(1000000))\n    print(check(10000000))\n    print(check(100000000))",
      -6.80859375
    ],
    [
      "def sum_of_divisors(num):\n    sum = 0\n    for i in range(1, num + 1):\n        sum += i\n        for j in range(1, i):\n            if i % j == 0:\n                sum -= j\n    return sum\n\n\ndef main():\n    for i in range(1, 20):\n        if sum_of_divisors(i) == i:\n            print(i)\n\n\nif __name__ == '__main__':\n    main()",
      -6.86328125
    ],
    [
      "def sum_of_divisors(n):\n    \"\"\"\n    >>> sum_of_divisors(2)\n    2\n    >>> sum_of_divisors(3)\n    2\n    >>> sum_of_divisors(4)\n    2\n    >>> sum_of_divisors(5)\n    5\n    >>> sum_of_divisors(6)\n    6\n    >>> sum_of_divisors(7)\n    7\n    >>> sum_of_divisors(8)\n    8\n    >>> sum_of_divisors(9)\n    8\n    >>> sum_of_divisors(10)\n    10\n    >>> sum_of_divisors(11)\n    11\n    >>> sum_of_divisors(12)\n    12\n    >>> sum_of_divisors(13)\n    13\n    >>> sum_of_divisors(14)\n    14\n    >>> sum_of_divisors(15)\n    15\n    >>> sum_of_divisors(16)\n    16\n    >>> sum_of_divisors(17)\n    17\n    >>> sum_of_divisors(18)\n    18\n    >>> sum_of_divisors(19)\n    19\n    >>> sum_of_divisors(20)\n    20\n    \"\"\"\n    return sum(divisors(n))\n\ndef divisors(n):\n    \"\"\"\n    >>> divisors(2)\n    [1, 2]\n    >>> divisors(3)\n    [1, 3, 3]\n    >>> divisors(4)\n    [1, 2, 4, 4]\n    >>> divisors(5)\n    [1, 5, 5, 5, 5]\n    >>> divisors(6)\n    [1, 3, 3, 6, 6]\n    >>> divisors(7)\n    [1, 7, 7, 7, 7, 7]\n    >>> divisors(8)\n    [1, 2, 4, 8, 8]\n    >>> divisors(9)\n    [1, 3, 3, 9, 9]",
      -7.125
    ],
    [
      "import math\n\ndef sum_divisors(n):\n    # write your code here\n    # https://www.hackerrank.com/challenges/sum-of-divisors/problem\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            while n % i == 0:\n                n = n / i\n                divisors.append(i)\n    return n + sum(divisors)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(sum_divisors(n))",
      -7.1328125
    ],
    [
      "import math\n\n\ndef sum_divisors(num):\n    \"\"\"\n    :param num: the number whose sum of divisors to be checked\n    :return: True if the sum of divisors is same else False\n    \"\"\"\n\n    sum_of_divisors = 0\n    for x in range(1, num + 1):\n        if num % x == 0:\n            sum_of_divisors += x\n    return (sum_of_divisors == num)\n\n\nif __name__ == '__main__':\n    assert sum_divisors(10) == True\n    assert sum_divisors(100) == True\n    assert sum_divisors(1000) == True\n    assert sum_divisors(10000) == True\n    assert sum_divisors(100000) == False\n    assert sum_divisors(1000000) == False\n    assert sum_divisors(10000000) == False",
      -7.16015625
    ],
    [
      "def is_prime(n):\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef check_sum_of_divisors(n):\n    return sum(i for i in range(1, int(n**0.5) + 1) if n % i == 0)\n\n\ndef test():\n    assert(is_prime(3) is True)\n    assert(is_prime(4) is False)\n    assert(is_prime(5) is False)\n    assert(is_prime(6) is False)\n    assert(is_prime(7) is False)\n    assert(is_prime(8) is False)\n    assert(is_prime(9) is False)\n    assert(is_prime(10) is False)\n    assert(is_prime(11) is False)\n    assert(is_prime(12) is False)\n    assert(is_prime(13) is False)\n    assert(is_prime(14) is False)\n    assert(is_prime(15) is False)\n    assert(is_prime(16) is False)\n    assert(is_prime(17) is False)\n    assert(is_prime(18) is False)\n    assert(is_prime(19) is False)\n    assert(is_prime(20) is True)\n    assert(is_prime(21) is False)\n    assert(is_prime(22) is False)\n    assert(is_prime(23) is False)\n    assert(is_prime(24) is False)\n    assert(is_prime(25) is False)\n    assert(is_prime(26) is False)\n    assert(is_prime(27) is False)\n    assert(is_prime(28) is False)\n    assert(is_prime(29) is False)\n    assert(is_prime(30) is False)\n    assert(is_prime(31) is False)\n    assert(is_prime(32) is",
      -7.2109375
    ],
    [
      "def sum_of_divisors(n):\n    \"\"\"\n    Check whether the sum of divisors are same or not.\n    \"\"\"\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += i\n    if divisors == n:\n        return True\n    else:\n        return False\n\nprint(sum_of_divisors(7))",
      -7.5234375
    ],
    [
      "def check_sum_divisors(n):\n    \"\"\"\n    Function to check whether the sum of divisors are same or not.\n    :param n: number\n    :return: sum_divisors\n    \"\"\"\n    sum_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_divisors += i\n    if sum_divisors == n:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(check_sum_divisors(17))",
      -7.6328125
    ],
    [
      "def sum_of_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum == n\n\nif __name__ == '__main__':\n    print sum_of_divisors(3)\n    print sum_of_divisors(5)\n    print sum_of_divisors(7)\n    print sum_of_divisors(11)\n    print sum_of_divisors(13)\n    print sum_of_divisors(17)",
      -7.82421875
    ],
    [
      "def sum_divisors(n):\n    divisors = [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n    sum_of_divisors = sum(divisors)\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print sum_divisors(13)\n    print sum_divisors(12)\n    print sum_divisors(15)\n    print sum_divisors(16)",
      -9.4765625
    ],
    [
      "def sum_of_divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return all(x % n == 0 for x in range(1, n+1))\n\nif __name__ == '__main__':\n    assert sum_of_divisors(3) == False\n    assert sum_of_divisors(4) == True\n    assert sum_of_divisors(10) == False\n    assert sum_of_divisors(20) == True\n    assert sum_of_divisors(22) == False\n    assert sum_of_divisors(45) == False\n    assert sum_of_divisors(500) == False\n    assert sum_of_divisors(1701) == True\n    assert sum_of_divisors(5) == False\n    assert sum_of_divisors(7) == False\n    assert sum_of_divisors(9) == True\n    assert sum_of_divisors(12) == True\n    assert sum_of_divisors(15) == False\n    assert sum_of_divisors(16) == False\n    assert sum_of_divisors(100) == False\n    assert sum_of_divisors(1000) == False\n    assert sum_of_divisors(1000000) == False\n    assert sum_of_divisors(12345) == True\n    assert sum_of_divisors(123456) == False\n    assert sum_of_divisors(1234567) == False\n    assert sum_of_divisors(12345678) == False\n    assert sum_of_divisors(123456789) == False\n    assert sum_of_divisors(1234567890) == False\n    assert sum_of_divisors(12345678901) == True\n    assert sum_of_divisors(123456789012) == False\n    assert sum_of_divisors(1234567890123) == False\n    assert sum_of_divisors(12345678901234) == False\n    assert sum_of_divisors",
      -9.8359375
    ],
    [
      "def check_sum_of_divisors(n):\n    \"\"\"\n    :param n: integer\n    :return: True if the sum of divisors are same, else False\n    \"\"\"\n    divisors = [1, n]\n    for i in range(2, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 1:\n        return True\n    else:\n        return False\n\ndef main():\n    for n in range(1, 100):\n        if check_sum_of_divisors(n):\n            print(n)\n            break\n\nif __name__ == '__main__':\n    main()",
      -10.0
    ],
    [
      "def checkSumOfDivisors(n):\n    # Write your code here\n    sumDivisors = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            sumDivisors += i\n    return sumDivisors == n\n\n\"\"\"\nTest cases\n\"\"\"\nprint \"Test 1:\", checkSumOfDivisors(7)\nprint \"Test 2:\", checkSumOfDivisors(12)\nprint \"Test 3:\", checkSumOfDivisors(100)\nprint \"Test 4:\", checkSumOfDivisors(101)\nprint \"Test 5:\", checkSumOfDivisors(50)\nprint \"Test 6:\", checkSumOfDivisors(1000)",
      -11.015625
    ],
    [
      "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime.\n    Returns False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_divisors(n):\n    \"\"\"\n    Returns the sum of all the divisors of n.\n    \"\"\"\n    if is_prime(n):\n        return n\n    return sum_divisors(n/2) + sum_divisors(n/3) + sum_divisors(n/4) + sum_divisors(n/5) + sum_divisors(n/6)\n\ndef main():\n    \"\"\"\n    Unit tests for sum_divisors()\n    \"\"\"\n    assert sum_divisors(1) == 1\n    assert sum_divisors(2) == 2\n    assert sum_divisors(3) == 3\n    assert sum_divisors(4) == 6\n    assert sum_divisors(5) == 10\n    assert sum_divisors(6) == 15\n    assert sum_divisors(7) == 21\n    assert sum_divisors(8) == 28\n    assert sum_divisors(9) == 36\n\nif __name__ == \"__main__\":\n    main()",
      -11.078125
    ],
    [
      "# Write your code below!\ndef check_sum(n):\n    \"\"\"\n    Check whether the sum of divisors are same or not.\n    :param n: integer\n    :return: boolean\n    \"\"\"\n    # Your code here!\n    return n == sum(divisors(n))\n\n# Test Cases\nprint(check_sum(20))\nprint(check_sum(3))\nprint(check_sum(4))\nprint(check_sum(7))\nprint(check_sum(12))\nprint(check_sum(100))\nprint(check_sum(0))\nprint(check_sum(1))\nprint(check_sum(2))\nprint(check_sum(3))\nprint(check_sum(4))\nprint(check_sum(5))\nprint(check_sum(6))\nprint(check_sum(7))\nprint(check_sum(8))\nprint(check_sum(9))\nprint(check_sum(10))\nprint(check_sum(11))\nprint(check_sum(12))\nprint(check_sum(13))\nprint(check_sum(14))\nprint(check_sum(15))\nprint(check_sum(16))\nprint(check_sum(17))\nprint(check_sum(18))\nprint(check_sum(19))\nprint(check_sum(20))\nprint(check_sum(21))\nprint(check_sum(22))\nprint(check_sum(23))\nprint(check_sum(24))\nprint(check_sum(25))\nprint(check_sum(26))\nprint(check_sum(27))\nprint(check_sum(28))\nprint(check_sum(29))\nprint(check_sum(30))\nprint(check_sum(31))\nprint(check_sum(32))\nprint(check_sum(33))\nprint(check_sum(34))\nprint(check_sum(35))\nprint(check_sum(36))\nprint(check_sum(37))\nprint(check_sum(38))\nprint(check_sum(39))\nprint(check_sum(40))\nprint(check_sum(41))\nprint(check_sum",
      -12.125
    ],
    [
      "def check_sum_of_divisors(number):\n    \"\"\"\n    Function to check whether the sum of divisors are same or not.\n    :param number: number\n    :return: True if sum of divisors is same or False\n    \"\"\"\n    divisors = []\n    divisors.append(1)\n    for i in range(2, int(number**0.5)+1):\n        if number%i == 0:\n            divisors.append(i)\n            divisors.append(number/i)\n    return sum(divisors) == number\n\nif __name__ == \"__main__\":\n    number = input(\"Enter number : \")\n    if check_sum_of_divisors(number):\n        print(\"Sum of divisors is same\")\n    else:\n        print(\"Sum of divisors is different\")",
      -12.9609375
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    :param n: an integer\n    :return: True if sum of divisors are same or False if not\n    \"\"\"\n    s = sum(divisors(n))\n    if s == n:\n        return True\n    else:\n        return False\n\n\"\"\"\nTest cases\n\"\"\"\n\nprint sum_divisors(1)\nprint sum_divisors(2)\nprint sum_divisors(3)\nprint sum_divisors(4)\nprint sum_divisors(5)\nprint sum_divisors(6)\nprint sum_divisors(7)\nprint sum_divisors(8)\nprint sum_divisors(9)\nprint sum_divisors(10)\nprint sum_divisors(11)\nprint sum_divisors(12)\nprint sum_divisors(13)\nprint sum_divisors(14)\nprint sum_divisors(15)\nprint sum_divisors(16)\nprint sum_divisors(17)\nprint sum_divisors(18)\nprint sum_divisors(19)\nprint sum_divisors(20)\nprint sum_divisors(21)\nprint sum_divisors(22)\nprint sum_divisors(23)\nprint sum_divisors(24)\nprint sum_divisors(25)\nprint sum_divisors(26)\nprint sum_divisors(27)\nprint sum_divisors(28)\nprint sum_divisors(29)\nprint sum_divisors(30)\nprint sum_divisors(31)\nprint sum_divisors(32)\nprint sum_divisors(33)\nprint sum_divisors(34)\nprint sum_divisors(35)\nprint sum_divisors(36)\nprint sum_divisors(37)\nprint sum_divisors(38)\nprint sum_divisors(39)\nprint sum_divisors(40)\nprint sum_divisors(41)",
      -14.171875
    ],
    [
      "def sum_divisors(n):\n    \"\"\"\n    sum_divisors(n)\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(2)\n    2\n    >>> sum_divisors(3)\n    3\n    >>> sum_divisors(4)\n    6\n    >>> sum_divisors(5)\n    5\n    >>> sum_divisors(6)\n    6\n    >>> sum_divisors(7)\n    7\n    >>> sum_divisors(8)\n    8\n    >>> sum_divisors(9)\n    9\n    >>> sum_divisors(10)\n    10\n    \"\"\"\n    if n == 0:\n        return 0\n    s = 1\n    for i in range(1, n+1):\n        s *= i\n    return s\n\nif __name__ == '__main__':\n    print sum_divisors(4)\n    print sum_divisors(5)\n    print sum_divisors(6)\n    print sum_divisors(7)\n    print sum_divisors(8)\n    print sum_divisors(9)\n    print sum_divisors(10)",
      -14.8359375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}