{
  "problem": {
    "task_id": "MBPP/390",
    "prompt": "Write a function to insert a given string at the beginning of all items in a list.",
    "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
    "test_list": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ],
    "challenge_test_list": [],
    "problem_id": 379
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def insertInAlist(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return ListNode(val)\n        p = head\n        while p.next is not None:\n            p = p.next\n        p.next = ListNode(val)\n        return head\n\nif __name__ == '__main__':\n    s = Solution()\n    head = ListNode(0)\n    p = head\n    for i in range(1, 10):\n        p.next = ListNode(i)\n        p = p.next\n    head = s.insertInAlist(head, 10)\n    print head.val\n    head = s.insertInAlist(head, 20)\n    print head.val\n    head = s.insertInAlist(head, 30)\n    print head.val",
      3.646484375
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def insertIntoList(self, head: TreeNode, value: str) -> TreeNode:\n        if head is None:\n            return TreeNode(value)\n        else:\n            new_head = TreeNode(value)\n            new_head.left = self.insertIntoList(head.left, value)\n            new_head.right = self.insertIntoList(head.right, value)\n            return new_head\n\nif __name__ == \"__main__\":\n    cases = [\n        (\"Hello\", \"Hell\"),\n        (\"Hello\", \"Hell\"),\n        (\"Hello\", \"Hell\"),\n        (\"Hello\", \"Hell\"),\n        (\"Hello\", \"Hell\")\n    ]\n    s = Solution()\n    for case in cases:\n        print(case, s.insertIntoList(None, case[1]))",
      3.412109375
    ],
    [
      "# https://leetcode.com/problems/insert-at-the-beginning-of-the-list/discuss/126521/Python-solution-with-explanation\n\nclass Solution(object):\n    def insertAt(self, list, insert_string):\n        \"\"\"\n        :type list: List[str]\n        :type insert_string: str\n        :rtype: List[str]\n        \"\"\"\n        return [insert_string] + list",
      2.453125
    ],
    [
      "import unittest\n\ndef insert_string_at_beginning(s, l):\n    \"\"\"\n    :type s: str\n    :type l: list[str]\n    :rtype: list[str]\n    \"\"\"\n    return [s + x for x in l]\n\nclass TestSolution(unittest.TestCase):\n    def test_ex1_str_list(self):\n        s = \"hello\"\n        l = [1,2,3,4,5]\n        self.assertEqual(insert_string_at_beginning(s, l), [s,1,2,3,4,5])\n\n    def test_ex2_str_list(self):\n        s = \"a\"\n        l = [\"a\",\"b\",\"c\"]\n        self.assertEqual(insert_string_at_beginning(s, l), [s, \"a\", \"b\", \"c\"])\n\n    def test_ex3_str_list(self):\n        s = \"hello\"\n        l = [1,2,3,4,5]\n        self.assertEqual(insert_string_at_beginning(s, l), [1,2,3,4,5,s])\n\nif __name__ == '__main__':\n    unittest.main()",
      2.185546875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n        \n        current = head\n        previous = None\n        while current is not None:\n            next = current.next\n            \n            # find the first node to insert\n            while next is not None:\n                if current.val > next.val:\n                    current.next = next\n                    break\n                current = next\n                previous = next\n                next = next.next\n            \n            if previous is None:\n                current.next = head\n                head = current\n            else:\n                previous.next = current\n                current = head\n                head = current\n                \n        return head",
      1.283203125
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-a-string-at-the-beginning-of-all-the-items-in-a-list\n# https://www.hackerearth.com/practice/lists-and-strings/strings/practice-problems/algorithm/insert-a-string-at-the-beginning-of-all-the-items-in-a-list/\n# https://www.hackerearth.com/practice/lists-and-strings/strings/practice-problems/algorithm/insert-a-string-at-the-beginning-of-all-the-items-in-a-list/problem\n\ndef insert_string(list_, string_):\n    for i in range(0, len(list_)):\n        list_[i] = string_ + list_[i]\n    return list_\n\nif __name__ == '__main__':\n    string = \"Hello\"\n    list_ = [\"Hello\", \"World\", \"Hacker\", \"Programmer\", \"Java\", \"Python\", \"PHP\"]\n    print(insert_string(list_, string))",
      1.0361328125
    ],
    [
      "def insert_string(list, string):\n    \"\"\"\n    :type list: List[str]\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    for i, item in enumerate(list):\n        list[i] = string + item\n    return list\n\n# Your Solution\n\n# Note:\n# You can only modify the list in place. Do not create a new list.\n\n# Test cases\n\n# Input: list = [\"a\", \"b\", \"c\"], string = \"c\"\n# Output: [\"a\", \"c\", \"b\"]\n\n# Input: list = [\"a\", \"b\", \"c\"], string = \"a\"\n# Output: [\"a\", \"a\", \"b\", \"c\"]\n\n# Input: list = [\"a\", \"b\", \"c\"], string = \"c\"\n# Output: [\"a\", \"b\", \"c\", \"a\"]",
      0.42333984375
    ],
    [
      "# https://www.geeksforgeeks.org/write-a-function-to-insert-a-given-string-at-the-beginning-of-all-items-in-a-list/\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def insertStrAtHead(self, head: ListNode, str: str) -> None:\n        \"\"\"\n        :type head: ListNode\n        :type str: str\n        :rtype: None\n        \"\"\"\n        # Write your code here\n        cur = head\n        while cur is not None:\n            cur = cur.next\n        insert_point = head\n        while cur is not None:\n            insert_point = insert_point.next\n            cur = cur.next\n        cur.next = ListNode(str)\n        cur = cur.next\n        while cur is not None:\n            cur = cur.next\n            insert_point = insert_point.next\n        cur = head\n        while cur is not None:\n            cur.val = str\n            cur = cur.next\n        return head",
      -0.267333984375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        fast = head\n        while fast:\n            temp = fast.next\n            fast.next = slow\n            slow = slow.next\n            fast = temp\n        return head",
      -0.57470703125
    ],
    [
      "# Definition for a string: str.\nclass String:\n    def __init__(self, x):\n        self.value = x\n\n    def __repr__(self):\n        return str(self.value)\n\nclass Solution:\n    def insertionSort(self, arr):\n        \"\"\"\n        :type arr: List[String]\n        :rtype: void Do not return anything, modify arr in-place instead.\n        \"\"\"\n        for i in range(1, len(arr)):\n            s = arr[i]\n            j = i - 1\n            while j >= 0 and arr[j].value > s.value:\n                arr[j + 1] = arr[j]\n                j -= 1\n            arr[j + 1] = s\n        return\n\nif __name__ == \"__main__\":\n    s = Solution()\n    arr = [String(\"a\"), String(\"b\"), String(\"c\"), String(\"d\"), String(\"e\"), String(\"f\")]\n    s.insertionSort(arr)\n    for i in arr:\n        print i",
      -0.673828125
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-a-string-in-every-item-of-a-list/problem\n\ndef insert_string(my_list, string):\n    for item in my_list:\n        if string in item:\n            my_list.remove(item)\n        else:\n            my_list.insert(0, item)\n    return my_list\n\n\nmy_list = [1, 2, 3, 4, 5]\n\nprint(insert_string(my_list, \"a\"))",
      -0.85595703125
    ],
    [
      "#!/usr/bin/env python\n\ndef insert_string(str, list):\n    for item in list:\n        item.insert(0, str)\n\nif __name__ == '__main__':\n    str = 'abc'\n    list = [1, 2, 3]\n    insert_string(str, list)\n    print list",
      -0.85595703125
    ],
    [
      "def insert_at_beg(list, str):\n    \"\"\"\n    :type list: List[str]\n    :type str: str\n    :rtype: List[str]\n    \"\"\"\n    # Your Solution here.\n    return list[:1] + [str] + list[1:]\n\nif __name__ == '__main__':\n    print insert_at_beg([\"1\", \"2\", \"3\"], \"4\")",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-a-string-at-the-beginning-of-every-item-in-a-list\n# Write a function to insert a given string at the beginning of all items in a list.\n\ndef insert_string_at_the_beginning(string, list):\n    \"\"\"\n    :type string: str\n    :type list: List[str]\n    :rtype: List[str]\n    \"\"\"\n    for item in list:\n        list.insert(0, string)\n    return list\n\n\nif __name__ == '__main__':\n    string = input().strip()\n    list_ = input().strip().split(' ')\n    print(insert_string_at_the_beginning(string, list_))",
      -0.85693359375
    ],
    [
      "def insert_str_at_head(items, str_to_add):\n    \"\"\"\n    :type items: List[str]\n    :type str_to_add: str\n    :rtype: List[str]\n    \"\"\"\n    return [str_to_add + item for item in items]\n\n# Your Solution\n\n# Your code below is using a list instead of a set.\n# See if you can find a way to convert it to a set.\n\ndef insert_str_at_head(items, str_to_add):\n    return [str_to_add + item for item in items]",
      -0.85693359375
    ],
    [
      "class Solution:\n    def insertStringAtBeginning(self, s, list):\n        \"\"\"\n        :type s: str\n        :type list: List[str]\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in list:\n            if i == s:\n                result.append(s)\n            else:\n                result.append(i)\n        return result",
      -0.85693359375
    ],
    [
      "import sys\n\nclass Solution(object):\n    def insertionSort(self, arr):\n        \"\"\"\n        :type arr: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(arr) == 0:\n            return arr\n        \n        for i in range(1, len(arr)):\n            for j in range(i):\n                if arr[j] < arr[j-1]:\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                    \n        return arr\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    print arr\n    print sol.insertionSort(arr)",
      -0.85693359375
    ],
    [
      "# https://leetcode.com/problems/insert-at-front/discuss/240167/Python-solution-with-pretty-print-and-iteration\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def insertAtFront(self, head: ListNode, val: int) -> ListNode:\n        if head is None:\n            return ListNode(val)\n        pre = head\n        while pre.next is not None:\n            pre = pre.next\n        pre.next = ListNode(val)\n        return head",
      -0.85693359375
    ],
    [
      "def insert_string(list_of_strings, new_string):\n    for i in range(0, len(list_of_strings)):\n        list_of_strings[i] = new_string + list_of_strings[i]\n    return list_of_strings\n\ndef main():\n    list_of_strings = [\"hello\", \"world\", \"how\", \"are\", \"you\"]\n    insert_string(list_of_strings, \"goodbye\")\n    print list_of_strings\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def insert_str_in_all_items(items, string, new_string):\n    for i in range(len(items)):\n        items[i] = new_string + items[i]\n    return items\n\nif __name__ == '__main__':\n    items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    items = insert_str_in_all_items(items, \"a\", \"b\")\n    print items",
      -0.85693359375
    ],
    [
      "import unittest\nfrom utils import *\n\nclass TestInsertStringAtBeginning(unittest.TestCase):\n    def test_insert_string_at_beginning(self):\n        self.assertEqual(insert_string_at_beginning(\"abc\", \"123\"), [\"123\", \"abc\"])\n        self.assertEqual(insert_string_at_beginning(\"abc\", \"\"), [\"\", \"abc\"])\n        self.assertEqual(insert_string_at_beginning(\"\", \"123\"), [\"123\", \"\"])\n        self.assertEqual(insert_string_at_beginning(\"\", \"\"), [\"\", \"\"])\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -0.85693359375
    ],
    [
      "def insert_str_in_list(items, str):\n    \"\"\"\n    :type items: List[str]\n    :type str: str\n    :rtype: List[str]\n    \"\"\"\n    return [str + item for item in items]\n\n# Your Solution here.",
      -0.85693359375
    ],
    [
      "def insert_string(s, lst):\n    \"\"\"\n    :type s: str\n    :type lst: List[str]\n    :rtype: List[str]\n    \"\"\"\n    for i in range(len(lst)):\n        lst[i] = s + lst[i]\n    return lst\n\nprint(insert_string(\"Test\", [\"Test\", \"Test2\"]))",
      -0.85693359375
    ],
    [
      "# https://leetcode.com/problems/insert-at-front-of-all-the-strings/discuss/103872/Python-O(1)\n\n\nclass Solution(object):\n    def insert_at_front(self, s, list):\n        \"\"\"\n        :type s: str\n        :type list: List[str]\n        :rtype: None Do not return anything, modify list in-place instead.\n        \"\"\"\n        for i in range(len(list)):\n            if list[i] == s:\n                list.insert(0, s)\n                break\n        else:\n            list.insert(0, s)",
      -0.85693359375
    ],
    [
      "def insert_string(string, lst):\n    \"\"\"\n    :type string: str\n    :type lst: List[str]\n    :rtype: List[str]\n    \"\"\"\n    for i in range(len(lst)):\n        lst[i] = string + lst[i]\n    return lst\n\n\n\n# Your Solution\n# @param {string} str\n# @param {List[string]} list\n# @return {List[string]}\ndef insert_string(str, lst):\n    \"\"\"\n    :type str: str\n    :type lst: List[str]\n    :rtype: List[str]\n    \"\"\"\n    for i in range(len(lst)):\n        lst[i] = str + lst[i]\n    return lst",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def insert(self, head, str):\n        \"\"\"\n        :type head: ListNode\n        :type str: str\n        :rtype: ListNode\n        \"\"\"\n        p = head\n        while p:\n            p = p.next\n        p = ListNode(str)\n        p.next = head\n        return p",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution:\n    # @param head, a list node\n    # @param str, a string\n    # @return a list node\n    def insertNodeAtFront(self, head, str):\n        node = ListNode(str[0])\n        node.next = head\n        return node\n\nif __name__ == '__main__':\n    sol = Solution()\n    head = ListNode('a')\n    head.next = ListNode('b')\n    head.next.next = ListNode('c')\n    head.next.next.next = ListNode('d')\n    head.next.next.next.next = ListNode('e')\n\n    sol.insertNodeAtFront(head, 'f')\n    print head.next",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-a-string-in-a-list\n# Python 3.6\n# time limit exceeded\n\nimport sys\n\ndef insert(list, string):\n    \"\"\"\n    :type list: List[str]\n    :type string: str\n    :rtype: None\n    \"\"\"\n    for i in range(len(list)):\n        list[i] = string + list[i]\n\nif __name__ == '__main__':\n    string = input()\n    list = input()\n    insert(list, string)\n    print(list)",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def insert(self, head, new_val):\n        \"\"\"\n        :type head: ListNode\n        :type new_val: str\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            new_node = ListNode(new_val)\n            new_node.next = head\n            return new_node\n        else:\n            new_node = ListNode(new_val)\n            new_node.next = head\n            current_node = head\n            while current_node.next:\n                current_node = current_node.next\n            current_node.next = new_node\n            return head",
      -0.85693359375
    ],
    [
      "def insert_string(my_list, my_string):\n    for item in my_list:\n        my_list.insert(0, my_string)\n\nmy_list = [\"one\", \"two\", \"three\", \"four\"]\ninsert_string(my_list, \"a\")\nprint my_list\n\nmy_list = [\"one\", \"two\", \"three\", \"four\"]\ninsert_string(my_list, \"b\")\nprint my_list\n\nmy_list = [\"one\", \"two\", \"three\", \"four\"]\ninsert_string(my_list, \"c\")\nprint my_list",
      -0.85791015625
    ],
    [
      "# https://leetcode.com/problems/insert-str-into-all-elements-of-a-sorted-list/\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def insertIntoAll(self, head, str):\n        \"\"\"\n        :type head: ListNode\n        :type str: str\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return ListNode(str)\n        node = head\n        while node.next:\n            node = node.next\n        node.next = ListNode(str)\n        node.next.next = head\n        return head",
      -0.85791015625
    ],
    [
      "def insert_string(items, str):\n\t\"\"\"\n\t:type items: List[str]\n\t:type str: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [str + item for item in items]\n\n# Your Solution here.",
      -0.85791015625
    ],
    [
      "import collections\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def insert(self, head, data):\n        \"\"\"\n        :type head: TreeNode\n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        if not head:\n            return TreeNode(data)\n        else:\n            p = head\n            while p.left:\n                p = p.left\n            p.left = TreeNode(data)\n            return self.insert(p.left, data)\n\n# Note:\n# 1. use list.append instead of list.insert\n# 2. use a list to store the data instead of a list of nodes",
      -0.85791015625
    ],
    [
      "# Definition for a Node.\nclass Node:\n    def __init__(self, val, next):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def insert(self, head, str):\n        \"\"\"\n        :type head: Node\n        :type str: str\n        :rtype: Node\n        \"\"\"\n        p = head\n        while p:\n            if str in p.val:\n                p = p.next\n            else:\n                break\n        p.next = Node(str, p)\n        return head\n\nif __name__ == \"__main__\":\n    head = Node(1, None)\n    head = Solution().insert(head, \"hello\")\n    print(head.val)\n    print(head.next.val)",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-a-string-at-the-beginning-of-every-item-in-a-list\n\ndef insert_string_at_beg(s, lst):\n    \"\"\"\n    :type s: str\n    :type lst: List[str]\n    :rtype: List[str]\n    \"\"\"\n    for i, item in enumerate(lst):\n        lst[i] = s + item\n    return lst\n\nif __name__ == '__main__':\n    s = 'abc'\n    lst = [1,2,3,4,5]\n    lst = insert_string_at_beg(s, lst)\n    print(lst)",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-a-string-at-the-beginning-of-every-element-of-a-list/problem\n\ndef insert_string(list_, string_):\n    for i in range(len(list_)):\n        list_[i] = string_ + list_[i]\n    return list_\n\n\nif __name__ == '__main__':\n    list_ = [1, 2, 3, 4, 5]\n    string_ = \"Hello\"\n\n    print(insert_string(list_, string_))",
      -0.85791015625
    ],
    [
      "# Your function will be called as follows:\n# functionName(list, string)\n\ndef insert_str(list, str):\n    for i in range(len(list)):\n        list[i] = str + list[i]\n\nprint insert_str([\"hello\", \"world\"], \"goodbye\")",
      -0.8583984375
    ],
    [
      "#!/bin/python\n\n# Complete the insertionString method below.\ndef insertionString(aList, string):\n    returnList = []\n    for i in range(0, len(aList)):\n        if i == 0:\n            returnList.append(string)\n        else:\n            returnList.append(aList[i])\n    return returnList\n\n# driver program to test above function\naList = ['python', 'is', 'great']\nprint insertionString(aList, 'a')",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/insert-into-the-middle-of-the-list/\n\n\nclass Solution(object):\n    def insert(self, head, data):\n        \"\"\"\n        :type head: ListNode\n        :type data: str\n        :rtype: ListNode\n        \"\"\"\n        if head == None:\n            head = ListNode(data)\n            head.next = head\n        else:\n            p = head\n            while p.next:\n                p = p.next\n            p.next = ListNode(data)\n            p.next.next = head\n            return head\n\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    head = ListNode(1)\n    p = head\n    for i in range(3):\n        p = s.insert(p, i)\n    while p.next:\n        print p.next.data\n        p = p.next",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/insert-str-into-the-beginning-of-all-elements-of-a-list/\n\nclass Solution(object):\n    def insertions(self, head, str):\n        \"\"\"\n        :type head: ListNode\n        :type str: str\n        :rtype: ListNode\n        \"\"\"\n        if not head or not str:\n            return head\n        \n        new_head = ListNode(str)\n        new_head.next = head\n        \n        while head.next:\n            head = head.next\n            if head.val == str:\n                head.next = new_head\n                return head\n            else:\n                head = head.next\n        \n        return new_head\n\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None",
      -0.8583984375
    ],
    [
      "def insert_string(list_, string):\n    for item in list_:\n        list_.insert(0, item)\n    return list_\n\nif __name__ == \"__main__\":\n    print insert_string(['a', 'b', 'c'], 'd')",
      -0.8583984375
    ],
    [
      "def insert_string(string, list_items):\n    \"\"\"\n    :type string: str\n    :type list_items: List[str]\n    :rtype: List[str]\n    \"\"\"\n    for i in range(len(list_items)):\n        list_items[i] = string + list_items[i]\n    return list_items\n\ndef main():\n    \"\"\"\n    Example:\n        >>> insert_string('Hello', ['World', 'How', 'Are', 'You', 'Today'])\n        ['Hello', 'World', 'How', 'Are', 'You', 'Today']\n    \"\"\"\n    string = 'Hello'\n    list_items = ['World', 'How', 'Are', 'You', 'Today']\n    print(insert_string(string, list_items))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "#!/bin/python\n\ndef insert_string_at_start(list, string):\n    for i, item in enumerate(list):\n        if i == 0:\n            list[i] = string + item\n        else:\n            list[i] = item + string\n\ndef main():\n    print insert_string_at_start([\"Hello\", \"World\", \"How\", \"Are\", \"You\"], \"Goodbye\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def insertIntoList(self, head, val):\n        \"\"\"\n        :type head: TreeNode\n        :type val: int\n        :rtype: TreeNode\n        \"\"\"\n        if not head:\n            return TreeNode(val)\n        if head.val < val:\n            head.left = self.insertIntoList(head.left, val)\n            return head\n        else:\n            head.right = self.insertIntoList(head.right, val)\n            return head",
      -0.8583984375
    ],
    [
      "def insert_string(items, s):\n    for i in items:\n        i.insert(0, s)\n\n# Your code here\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {ListNode}\n    def insertIntoList(self, head, s):\n        if not head:\n            return ListNode(s)\n        \n        new_head = ListNode(s)\n        cur = new_head\n        while head:\n            cur.next = head\n            head = head.next\n            cur = cur.next\n        \n        cur.next = head\n        return new_head",
      -0.8583984375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def in_order_traversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        cur = root\n        while cur or res:\n            if cur:\n                res.append(cur.val)\n                cur = cur.left\n            else:\n                cur = res.pop()\n                cur = cur.right\n        return res",
      -0.8583984375
    ],
    [
      "def insert_string(list, string):\n    for item in list:\n        if not isinstance(item, str):\n            item = str(item)\n        item = string + item\n        list[list.index(item)] = item\n    return list\n\n# Test cases\n\ntest_cases = [\n    ([], \"a\"),\n    ([1, 2, 3], \"a\"),\n    ([1, \"a\", \"b\"], \"a\"),\n    ([1, \"b\", \"a\"], \"a\"),\n    ([1, \"a\", \"b\"], \"a\")\n]\n\nfor test in test_cases:\n    print(\"Insert String -\", test)\n    assert insert_string(test, \"a\") == test",
      -0.8583984375
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        if not root:\n            return result\n        stack = []\n        stack.append(root)\n        while stack:\n            top = stack.pop()\n            result.append(top.val)\n            if top.left:\n                stack.append(top.left)\n            if top.right:\n                stack.append(top.right)\n        return result",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {List[str]} nums\n    # @param {string} str\n    # @return {void} Do not return anything, modify nums in-place instead.\n    def insertions(self, nums, str):\n        \"\"\"\n        :type nums: List[str]\n        :type str: str\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        for i in range(len(nums)):\n            if str == nums[i]:\n                nums[i] = str\n                continue\n            if len(str) > len(nums[i]):\n                nums[i] = str\n            else:\n                nums[i] = nums[i][len(str):] + str\n\n        return\n\nif __name__ == \"__main__\":\n    nums = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"]\n    str = \"hello\"\n    Solution().insertions(nums, str)\n    print(nums)",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-a-string-at-the-beginning-of-every-element-in-a-list/problem\n\ndef insert_string(data, s):\n    \"\"\"\n    :type data: List[str]\n    :type s: str\n    :rtype: None\n    \"\"\"\n    for i, x in enumerate(data):\n        data[i] = x + s\n\nif __name__ == '__main__':\n    data = [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\"\n    ]\n    insert_string(data, \"A\")\n    print(data)",
      -0.85888671875
    ],
    [
      "# Time:  O(n)\n# Space: O(1)\n\n# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __repr__(self):\n        return self.s\n\nclass Solution(object):\n    def prependString(self, head, s):\n        \"\"\"\n        :type head: ListNode\n        :type s: String\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        cur = head\n        while cur.next:\n            cur = cur.next\n        cur.next = ListNode(s)\n        cur = cur.next\n        while cur.next:\n            cur = cur.next\n            cur.next = ListNode(s)\n            cur = cur.next\n        return head\n\nif __name__ == '__main__':\n    s = Solution()\n    head = ListNode(String('hello'))\n    head = s.prependString(head, String('world'))\n    print(head)\n    print(head.next.s)",
      -0.91943359375
    ],
    [
      "def insert_str_at_beginning(lst, str):\n    new_lst = []\n    new_lst.append(str)\n    for item in lst:\n        new_lst.append(item)\n    return new_lst\n\ndef test():\n    assert insert_str_at_beginning([], \"hello\") == [\"hello\"]\n    assert insert_str_at_beginning([\"hello\"], \"world\") == [\"hello\", \"world\"]\n    assert insert_str_at_beginning([\"hello\", \"world\"], \"hello\") == [\"hello\", \"hello\", \"world\"]\n    assert insert_str_at_beginning([\"hello\", \"world\"], \"hello\") == [\"hello\", \"hello\", \"world\"]\n    assert insert_str_at_beginning([\"hello\", \"world\"], \"world\") == [\"hello\", \"world\", \"hello\"]\n    assert insert_str_at_beginning([\"hello\", \"world\"], \"hello\") == [\"hello\", \"hello\", \"world\"]\n    assert insert_str_at_beginning([\"hello\", \"world\"], \"world\") == [\"hello\", \"world\", \"hello\"]\n\nif __name__ == \"__main__\":\n    test()",
      -0.92333984375
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-at-front/problem\n# http://www.geeksforgeeks.org/insert-a-string-at-the-beginning-of-a-list/\n\n# TODO:\n# - Make it work with lists of strings\n# - Use a function to insert the string at the beginning of a list\n\n# TODO:\n# - Use a function to insert a string at the beginning of a list of strings\n\n# TODO:\n# - Make it work with lists of strings\n\n# TODO:\n# - Make it work with lists of strings\n# - Make it work with lists of strings\n\n# TODO:\n# - Make it work with lists of strings\n# - Make it work with lists of strings\n\ndef insert_at_front(str_to_insert, list_of_strings):\n    \"\"\"\n    Inserts a string at the beginning of a list of strings.\n\n    Args:\n        str_to_insert: String to insert at the beginning of the list.\n        list_of_strings: List of strings.\n\n    Returns:\n        List of strings.\n    \"\"\"\n    for index, string in enumerate(list_of_strings):\n        list_of_strings[index] = str_to_insert + string\n    return list_of_strings\n\n\ndef insert_at_front_list(str_to_insert, list_of_strings):\n    \"\"\"\n    Inserts a string at the beginning of a list of strings.\n\n    Args:\n        str_to_insert: String to insert at the beginning of the list.\n        list_of_strings: List of strings.\n\n    Returns:\n        List of strings.\n    \"\"\"\n    for index, string in enumerate(list_of_strings):\n        list_of_strings[index] = str_to_insert + string\n    return list_of_strings\n\n\ndef insert_at_front_list_2(str_to_insert, list_of_strings):\n    \"\"\"\n    Inserts a string at the beginning of a list of strings.\n\n    Args:\n        str_to_insert: String to insert at the beginning of the list.\n        list_of_strings: List of strings",
      -1.34765625
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef insert_str(list_str, insert_str):\n    for i in range(len(list_str)):\n        list_str[i] = insert_str + list_str[i]\n    return list_str\n\ndef main():\n    if (len(sys.argv) < 2):\n        print \"usage: %s <input_file>\" % sys.argv[0]\n        return\n    list_str = []\n    with open(sys.argv[1], 'r') as f:\n        for line in f:\n            list_str.append(line.strip())\n    insert_str(list_str, \"\")\n    with open(sys.argv[1], 'w') as f:\n        for line in list_str:\n            f.write(line + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()",
      -1.3798828125
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-a-string-in-every-item-of-a-list\ndef insert_string(list_of_strings, string_to_insert):\n    for i, item in enumerate(list_of_strings):\n        if i == 0:\n            list_of_strings[i] = string_to_insert + item\n        else:\n            list_of_strings[i] = item + string_to_insert\n    return list_of_strings\n\nif __name__ == \"__main__\":\n    string_to_insert = input()\n    list_of_strings = input().split()\n    list_of_strings = insert_string(list_of_strings, string_to_insert)\n    print(\"\".join(list_of_strings))",
      -1.4873046875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def insert(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: void Do not return anything, modify root in-place instead.\n        \"\"\"\n        if not root:\n            root = TreeNode(val)\n        else:\n            self.insert(root.left, val)\n            self.insert(root.right, val)\n\nif __name__ == '__main__':\n    solution = Solution()\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    solution.insert(root, 8)\n    print(root.val)",
      -2.11328125
    ],
    [
      "# https://leetcode.com/problems/insert-at-the-beginning-of-every-element-in-a-sorted-list/discuss/131352/Python-with-python-and-numpy\n\n# The basic idea is to keep a sorted list of all the elements, and then insert the new string in the sorted list.\n# The complexity is O(n).\n\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n        p = head\n        while p.next is not None:\n            q = p\n            while q.next is not None:\n                if q.next.val < p.val:\n                    q = q.next\n                else:\n                    break\n            if q.val > p.val:\n                q.next = p\n                p = p.next\n            else:\n                break\n        if p is head:\n            return head\n        q = head\n        while p is not None:\n            if p.val < q.val:\n                q = q.next\n            else:\n                q.next = p\n                p = p.next\n        return head\n\n\nif __name__ == \"__main__\":\n    assert Solution().insertionSortList([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert Solution().insertionSortList([6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]\n    assert Solution().insertionSortList([]) == []",
      -2.224609375
    ],
    [
      "import sys\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    if len(sys.argv)!= 2:\n        sys.exit(\"Usage: python3 {} <string>\".format(sys.argv[0]))\n    str = sys.argv[1]\n    list_ = [1, 2, 3]\n    insert_str(str, list_)\n\ndef insert_str(str, list_):\n    \"\"\"\n    Insert a string at the beginning of all items in a list.\n    \"\"\"\n    for i in list_:\n        list_[i] = str + list_[i]\n\nif __name__ == \"__main__\":\n    main()",
      -2.53125
    ],
    [
      "def insert_string_at_beginning(items, string):\n    \"\"\"\n    :type items: List[str]\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    for item in items:\n        items.insert(0, item)\n    return items\n\n\nif __name__ == '__main__':\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\") == [\"x\", \"a\", \"b\", \"c\"]\n    assert insert_string_at_beginning([\"a\", \"b\", \"c\"], \"x\")",
      -2.537109375
    ],
    [
      "# -*- coding:utf-8 -*-\n\nclass Solution(object):\n    def prepend_string(self, head, s):\n        \"\"\"\n        :type head: ListNode\n        :type s: str\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        prepend_node = ListNode(s)\n        prepend_node.next = head\n        prepend_node.val = s\n        return prepend_node\n\nif __name__ == \"__main__\":\n    s = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    print(s.prepend_string(head, \"a\"))\n    print(head.next.next.next.next.next.next.val)\n    print(head.next.next.next.next.next.next.next.next.val)\n    print(head.next.next.next.next.next.next.next.next.next.next.val)\n    print(head.next.next.next.next.next.next.next.next.next.next.next.val)\n    print(head.next.next.next.next.next.next.next.next.next.next.next.next.val)\n    print(head.next.next.next.next.next.next.next.next.next.next.next.next.next.val)",
      -2.94921875
    ],
    [
      "def insert_at_head(str, lst):\n    \"\"\"\n    :type str: str\n    :type lst: List[str]\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(str + i)\n    return result\n\nif __name__ == \"__main__\":\n    assert insert_at_head(\"hello\", [\"world\"]) == [\"hello\", \"world\"]\n    assert insert_at_head(\"hello\", [\"hello\"]) == [\"hello\", \"hello\"]\n    assert insert_at_head(\"hello\", [\"hello\"]) == [\"hello\", \"hello\"]\n    assert insert_at_head(\"hello\", [\"hello\"]) == [\"hello\", \"hello\"]\n    assert insert_at_head(\"hello\", [\"hello\"]) == [\"hello\", \"hello\"]",
      -3.353515625
    ],
    [
      "# https://leetcode.com/problems/insert-at-the-beginning-of-every-element-in-a-sorted-list/\n\nclass Solution:\n    # @return a list of integers\n    def insertAtTheBeginning(self, list, insert_str):\n        result = []\n        for i in range(len(list)):\n            result.append(insert_str)\n            result.append(list[i])\n        return result\n\n\n# Note:\n# The list must be sorted\n# The insert_str must be unique\n# The insert_str must not contain duplicate characters\n\nif __name__ == \"__main__\":\n    sol = Solution()\n\n    # print(sol.insertAtTheBeginning([\"A\", \"B\", \"C\"], \"D\"))\n    # print(sol.insertAtTheBeginning([\"A\", \"B\", \"C\"], \"D\", \"A\"))\n    # print(sol.insertAtTheBeginning([\"A\", \"B\", \"C\"], \"D\", \"D\"))\n    # print(sol.insertAtTheBeginning([\"A\", \"B\", \"C\"], \"D\", \"E\"))\n\n    print(sol.insertAtTheBeginning([\"A\", \"B\", \"C\"], \"D\", \"D\"))\n    print(sol.insertAtTheBeginning([\"A\", \"B\", \"C\"], \"D\", \"D\", \"A\"))\n    print(sol.insertAtTheBeginning([\"A\", \"B\", \"C\"], \"D\", \"D\", \"D\"))\n    print(sol.insertAtTheBeginning([\"A\", \"B\", \"C\"], \"D\", \"D\", \"E\"))",
      -3.4765625
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: Gillett Hernandez\n# @Date:   2016-06-04 15:01:26\n# @Last Modified by:   Gillett Hernandez\n# @Last Modified time: 2017-08-19 16:52:07\n\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            if slow.val > fast.val:\n                slow = slow.next\n            else:\n                fast = fast.next\n        slow.next = head\n        return self.insertionSortList(slow.next)\n\nif __name__ == '__main__':\n    s = Solution()\n    head = ListNode(1)\n    head.next = ListNode(3)\n    head.next.next = ListNode(2)\n    print s.insertionSortList(head)\n    print head.val",
      -3.697265625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass Solution(object):\n    def insertIntoList(self, head, insert_node):\n        \"\"\"\n        :type head: ListNode\n        :type insert_node: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return insert_node\n        insert_node.next = head\n        insert_node.val = insert_node.val\n        head.val = insert_node.val\n        return insert_node\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n\n    node = ListNode(6)\n    node.next = ListNode(7)\n    node.next.next = ListNode(8)\n    node.next.next.next = ListNode(9)\n    node.next.next.next.next = ListNode(10)\n    node.next.next.next.next.next = ListNode(11)\n\n    insert_node = ListNode(12)\n    insert_node.next = node\n\n    solution = Solution()\n    print solution.insertIntoList(head, insert_node)\n    print head.val",
      -3.859375
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-at-the-end-of-the-list/problem\n\ndef insert_at_the_end(list_items, string):\n    \"\"\"\n    :type list_items: List[str]\n    :type string: str\n    :rtype: None\n    \"\"\"\n    new_list = []\n    for item in list_items:\n        new_list.append(item)\n        new_list.append(string)\n    return new_list\n\nif __name__ == '__main__':\n    test_cases = [\n        ([], \"Test\"),\n        ([1, 2, 3], \"Test\"),\n        ([1, 2, 3, 4], \"Test\"),\n        ([1, 2, 3, 4, 5], \"Test\"),\n        ([1, 2, 3, 4, 5, 6], \"Test\"),\n    ]\n    for test_case, test_case_result in test_cases:\n        print(\"Insert at the end of list:\", test_case)\n        actual = insert_at_the_end(test_case, \"Test\")\n        print(\"Expected:\", test_case_result)\n        print(\"Actual:\", actual)\n        assert actual == test_case_result, \"Error: Expected: %s, Actual: %s\" % (test_case_result, actual)\n        print(\"\")",
      -4.40625
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} str\n    # @return {ListNode}\n    def insertionsortlist(self, head):\n        if head == None:\n            return head\n        p = head\n        while p.next!= None:\n            p = self.insert(p, head)\n            head = p\n        return head\n\n    def insert(self, p, head):\n        if p == None:\n            return head\n        if p.val > head.val:\n            p.next = self.insert(p.next, head)\n        else:\n            p.next = self.insert(p.next, p.next)\n        return p\n\n\nif __name__ == '__main__':\n    # https://www.youtube.com/watch?v=5rRqZmqXJzU\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)",
      -4.57421875
    ],
    [
      "# https://oj.leetcode.com/problems/insert-into-every-position/\n# Given a string, you need to insert this string into every position of a 1-indexed list of strings.\n# Example 1:\n# Input: [\"a\",\"b\",\"c\"]\n# Input: \"my\"\n# Output: [\"my\",\"b\",\"c\"]\n# Example 2:\n# Input: [\"a\",\"b\",\"c\"]\n# Input: \"dog\"\n# Output: [\"a\",\"dog\",\"c\",\"b\",\"c\"]\n# Note:\n# You can assume the string given is always one character long.\n# You are not allowed to use any method to do this, such as using a loop or recursion.\n# You only have to insert the character into the list of lists.\n# Please do not use any built-in libraries.\n\n# 2017.05.09\nclass Solution(object):\n    def insertIntoList(self, list, str):\n        \"\"\"\n        :type list: List[str]\n        :type str: str\n        :rtype: List[str]\n        \"\"\"\n        return [str] + list",
      -4.83203125
    ],
    [
      "class Solution(object):\n    def prepend_string(self, head, s):\n        \"\"\"\n        :type head: ListNode\n        :type s: str\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return ListNode(s)\n        pre_node = ListNode(s)\n        pre_node.next = head\n        pre_node.next = self.prepend_string(pre_node.next, s)\n        return pre_node.next\n\n# \u601d\u8def\uff1a\n# 1.\u6784\u5efa\u4e00\u4e2a\u7a7a\u7684\u94fe\u8868\uff0c\u4e24\u4e2a\u70b9\uff0c\u7b2c\u4e00\u4e2a\u70b9\u4e3a\u5934\n# 2.\u5c06\u7b2c\u4e00\u4e2a\u70b9\u63d2\u5165\u5230\u5934\n# 3.\u5c06\u7b2c\u4e8c\u4e2a\u70b9\u63d2\u5165\u5230\u5934\uff0c\u4ece\u5934\u5f00\u59cb\u63d2\u5165\n# 4.\u5c06\u7b2c\u4e09\u4e2a\u70b9\u63d2\u5165\u5230\u5934\uff0c\u4ece\u5934\u5f00\u59cb\u63d2\u5165\n# 5.\u5c06\u7b2c\u56db\u4e2a\u70b9\u63d2\u5165\u5230\u5934\uff0c\u4ece\u5934\u5f00\u59cb\u63d2\u5165\n# 6.\u7b2c\u4e94\u4e2a\u70b9\u63d2\u5165\u5230\u5934\uff0c\u4ece\u5934\u5f00\u59cb\u63d2\u5165\n# 7.\u628a\u7b2c\u4e00\u4e2a\u70b9\u63d2\u5165\u5230\u5934\uff0c\u4ece\u5934\u5f00\u59cb\u63d2\u5165\n# 8.\u628a\u7b2c\u4e8c\u4e2a\u70b9\u63d2\u5165\u5230\u5934\uff0c\u4ece\u5934\u5f00\u59cb\u63d2\u5165\n# 9.\u628a\u7b2c\u4e09\u4e2a\u70b9\u63d2\u5165\u5230\u5934\uff0c\u4ece\u5934\u5f00\u59cb\u63d2\u5165\n# 10.\u628a\u7b2c\u56db\u4e2a\u70b9\u63d2\u5165\u5230\u5934\uff0c\u4ece\u5934",
      -4.96875
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} str\n    # @return {ListNode}\n    def insertionSortList(self, head, str):\n        if not head:\n            return head\n        if not str:\n            return head\n        if head == None:\n            return head\n        newHead = ListNode(str)\n        newHead.next = head\n        pre = None\n        cur = newHead\n        while cur:\n            pre = cur\n            cur = cur.next\n            while cur and cur.val < str:\n                pre = pre.next\n                cur = cur.next\n            pre.next = cur\n            cur = newHead\n        return newHead.next\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    head.next.next.next.next.next.next.next.next.next.next.next",
      -5.04296875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: TreeNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        if not head:\n            return\n        tmp = head\n        while tmp.left:\n            tmp = tmp.left\n        tmp.left = head\n        head = tmp.right\n        while head:\n            tmp = head\n            while tmp.right and tmp.right.val < tmp.left.val:\n                tmp = tmp.right\n            tmp.right = tmp.left\n            tmp.left = head\n            head = tmp.right\n\nif __name__ == '__main__':\n    head = TreeNode(1)\n    head.left = TreeNode(2)\n    head.right = TreeNode(3)\n    head.right.left = TreeNode(4)\n    head.right.right = TreeNode(5)\n    head.right.right.left = TreeNode(6)\n    head.right.right.right = TreeNode(7)\n    print Solution().insertionSortList(head)",
      -5.56640625
    ],
    [
      "import re\n\ndef insert_str_in_list(str, list_items):\n    return [str + x for x in list_items]\n\n#Test cases\n\n# Test 1:\ntest_input = ['a', 'b', 'c', 'd']\ntest_output = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\n\nprint(\"Test 1:\")\nprint(\"Input: \" + str(test_input))\nprint(\"Output: \" + str(test_output))\n\n# Test 2:\ntest_input = ['a', 'b', 'c', 'd']\ntest_output = ['a', 'a', 'a', 'a', 'b', 'c', 'd', 'd']\n\nprint(\"Test 2:\")\nprint(\"Input: \" + str(test_input))\nprint(\"Output: \" + str(test_output))\n\n# Test 3:\ntest_input = ['a', 'b', 'c', 'd', 'a']\ntest_output = ['a', 'a', 'a', 'a', 'a', 'b', 'c', 'd', 'd', 'a']\n\nprint(\"Test 3:\")\nprint(\"Input: \" + str(test_input))\nprint(\"Output: \" + str(test_output))\n\n# Test 4:\ntest_input = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\ntest_output = ['a', 'a', 'a', 'a', 'a', 'b', 'c', 'd', 'd', 'a']\n\nprint(\"Test 4:\")\nprint(\"Input: \" + str(test_input))\nprint(\"Output: \" + str(test_output))\n\n# Test 5:\ntest_input = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b']\ntest_output = ['a', 'a', 'a', 'a', 'a', 'b', 'c', 'd', 'd', 'a', 'b']\n\nprint(\"Test 5:\")\nprint(\"Input: \" + str(test_input))\nprint",
      -5.796875
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/insert-a-string\n\ndef insert_string(list_items, string):\n    # print(list_items)\n    for i in list_items:\n        print(i + string)\n\n# list = ['one', 'two', 'three', 'four', 'five','six']\n# insert_string(list, 'a')\n# insert_string(list, 'b')\n# insert_string(list, 'c')\n# insert_string(list, 'd')\n# insert_string(list, 'e')\n# insert_string(list, 'f')\n\n# list = [1, 2, 3, 4, 5, 6]\n# insert_string(list, 'a')\n# insert_string(list, 'b')\n# insert_string(list, 'c')\n# insert_string(list, 'd')\n# insert_string(list, 'e')\n# insert_string(list, 'f')\n\n# list = [1, 2, 3, 4, 5, 6]\n# insert_string(list, 'a')\n# insert_string(list, 'b')\n# insert_string(list, 'c')\n# insert_string(list, 'd')\n# insert_string(list, 'e')\n# insert_string(list, 'f')\n# insert_string(list, 'g')\n# insert_string(list, 'h')\n\n# list = [1, 2, 3, 4, 5, 6]\n# insert_string(list, 'a')\n# insert_string(list, 'b')\n# insert_string(list, 'c')\n# insert_string(list, 'd')\n# insert_string(list, 'e')\n# insert_string(list, 'f')\n# insert_string(list, 'g')\n# insert_string(list, 'h')\n# insert_string(list, 'i')\n# insert_string(list, 'j')\n\n# list = [1, 2, 3, 4, 5, 6]\n# insert_string(list, 'a')\n# insert_string(list",
      -5.984375
    ],
    [
      "# The following are the two methods we need to write.\ndef insert_string(items, s):\n    \"\"\"\n    Write a function that inserts a given string s at the beginning of all the items in a list.\n\n    Example 1:\n        Given the list [1,2,3], insert the string \"1\" at the beginning of the list.\n\n        1 2 3 1\n        2 3 1 1\n        3 1 1 1\n\n    Example 2:\n        Given the list [1,2,3,4,5], insert the string \"1\" at the beginning of the list.\n\n        1 2 3 4 5 1\n        2 3 4 5 1 1\n        3 4 5 1 1 1\n    \"\"\"\n    for i in range(len(items)):\n        items[i] = s + items[i]\n\ndef insert_string_2(items, s):\n    \"\"\"\n    Write a function that inserts a given string s at the beginning of all the items in a list.\n\n    Example 1:\n        Given the list [1,2,3], insert the string \"1\" at the beginning of the list.\n\n        1 2 3 1\n        2 3 1 1\n        3 1 1 1\n\n    Example 2:\n        Given the list [1,2,3,4,5], insert the string \"1\" at the beginning of the list.\n\n        1 2 3 4 5 1\n        2 3 4 5 1 1\n        3 4 5 1 1 1\n    \"\"\"\n    for i in range(len(items)):\n        items[i] = s + items[i]\n\n# Note:\n# We can use the method to insert a string at the beginning of a list in two ways.\n# 1. We can use the method to insert a string at the beginning of a list.\n# 2. We can use the method to insert a string at the end of a list.\n# The method to insert a string at the beginning of a list in two ways is the same as the method to insert a string at the end of a list.\n\n# Note:\n# We can use the method to insert a string at the beginning of a list in two ways.\n# 1. We can use the method to insert a string at the beginning of a list.\n# 2. We can use the method to insert a",
      -6.66796875
    ],
    [
      "#!/usr/bin/env python\n\nimport re\nimport os\nimport sys\n\ndef insert_string(list_to_modify, string_to_insert):\n    \"\"\"\n    :type list_to_modify: list\n    :type string_to_insert: str\n    \"\"\"\n    # Create a new list to hold the modified list.\n    new_list = []\n\n    # Iterate through the list.\n    for item in list_to_modify:\n\n        # If the item is a string, then append the new string to the item.\n        if isinstance(item, str):\n            new_list.append(string_to_insert + item)\n        # Otherwise, just append the item to the new list.\n        else:\n            new_list.append(item)\n\n    # Return the new list.\n    return new_list\n\n# Test Cases\n#>>> insert_string([\"A\", \"B\", \"C\"], \"D\")\n#['D', 'A', 'B', 'C']\n\n#>>> insert_string([\"A\", \"B\", \"C\"], \"D\", \"E\")\n#['D', 'E', 'A', 'B', 'C']\n\n#>>> insert_string([\"A\", \"B\", \"C\"], \"D\", \"E\", \"F\")\n#['D', 'E', 'F', 'A', 'B', 'C']\n\n#>>> insert_string([\"A\", \"B\", \"C\"], \"D\", \"E\", \"F\", \"G\")\n#['D', 'E', 'F', 'G', 'A', 'B', 'C']\n\n#>>> insert_string([\"A\", \"B\", \"C\"], \"D\", \"E\", \"F\", \"G\", \"H\")\n#['D', 'E', 'F', 'G', 'H', 'A', 'B', 'C']\n\nif __name__ == \"__main__\":\n    # Test 1\n    test_cases = [\n        [\"A\", \"B\", \"C\"],\n        [\"D\", \"E\"],\n        [\"F\", \"G\", \"H\"],\n    ]\n    for test in test_cases:\n        print insert_string(test, \"D\")\n        print insert",
      -6.984375
    ],
    [
      "import random\nimport timeit\n\n# Provided\ndef insert_at_start(lst, str):\n    \"\"\"\n    >>> lst = [1, 2, 3]\n    >>> insert_at_start(lst, \"a\")\n    >>> lst\n    ['a', 1, 2, 3]\n    \"\"\"\n    for item in lst:\n        lst.insert(0, str(item))\n\n\n# Provided\ndef insert_at_start_random(lst):\n    \"\"\"\n    >>> lst = [1, 2, 3]\n    >>> insert_at_start_random(lst)\n    >>> lst\n    [1, 1, 2, 3]\n    \"\"\"\n    for i in range(0, len(lst)):\n        random.seed()\n        r = random.randint(0, len(lst) - 1)\n        lst.insert(r, str(lst[r]))\n\n\n# Provided\ndef insert_at_start_random_reversed(lst):\n    \"\"\"\n    >>> lst = [1, 2, 3]\n    >>> insert_at_start_random_reversed(lst)\n    >>> lst\n    [3, 2, 1]\n    \"\"\"\n    for i in range(0, len(lst)):\n        random.seed()\n        r = random.randint(0, len(lst) - 1)\n        lst.insert(r, str(lst[r]))\n\n\n# Provided\ndef insert_at_start_random_reversed_2(lst):\n    \"\"\"\n    >>> lst = [1, 2, 3]\n    >>> insert_at_start_random_reversed_2(lst)\n    >>> lst\n    [3, 1, 2]\n    \"\"\"\n    for i in range(0, len(lst)):\n        random.seed()\n        r = random.randint(0, len(lst) - 1)\n        lst.insert(r, str(lst[r]))\n\n\n# Provided\ndef insert_at_start_random_2(lst):\n    \"\"\"\n    >>> lst = [1, 2",
      -7.06640625
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-at-the-beginning-of-every-item-in-a-linked-list\n\n# Node class definition\nclass Node(object):\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\n# Driver program to test above functions\ndef insertion_at_the_beginning_of_all_items_in_a_linked_list(linked_list):\n    \"\"\"\n    :type linked_list: List[Node]\n    :rtype: List[Node]\n    \"\"\"\n    new_head = None\n    current = linked_list\n    while current is not None:\n        new_head = Node(current.data)\n        new_head.next = current\n        current = current.next\n    new_head.next = linked_list\n    return new_head.next\n\n# Driver program to test above functions\ndef insertion_at_the_beginning_of_all_items_in_a_linked_list_iterative(linked_list):\n    \"\"\"\n    :type linked_list: List[Node]\n    :rtype: List[Node]\n    \"\"\"\n    new_head = None\n    current = linked_list\n    while current is not None:\n        new_head = Node(current.data)\n        new_head.next = current\n        current = current.next\n    new_head.next = linked_list\n    return new_head\n\n# Driver program to test above functions\ndef insertion_at_the_beginning_of_all_items_in_a_linked_list_recursive(linked_list):\n    \"\"\"\n    :type linked_list: List[Node]\n    :rtype: List[Node]\n    \"\"\"\n    new_head = None\n    current = linked_list\n    while current is not None:\n        new_head = Node(current.data)\n        new_head.next = current\n        current = current.next\n    new_head.next = linked_list\n    return new_head\n\n# Driver program to test above functions\ndef insertion_at_the_beginning_of_all_items_in_a_linked",
      -7.3359375
    ],
    [
      "import unittest\n\n# https://leetcode.com/problems/insert-into-the-beginning-of-the-list/description/\n\n\nclass Solution(object):\n    def insertIntoList(self, list, insert_str):\n        \"\"\"\n        :type list: List[str]\n        :type insert_str: str\n        :rtype: None Do not return anything, modify list in-place instead.\n        \"\"\"\n        for i in range(len(list)):\n            if insert_str == list[i]:\n                list.insert(i, insert_str)\n                return\n            elif insert_str < list[i]:\n                list.insert(i, insert_str)\n                return\n        list.insert(0, insert_str)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/insert-into-the-beginning-of-the-list/solution/\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\n# 2ms 100%\nclass Solution {\n    public void insertIntoList(ListNode head, int insert_str) {\n        ListNode dummy = new ListNode(-1);\n        dummy.next = head;\n        ListNode current = dummy;\n        while (current.next!= null) {\n            if (current.next.val < insert_str) {\n                current = current.next;\n            } else if (current.next.val > insert_str) {\n                break;\n            } else {\n                current.next = new ListNode(insert_str);\n                current.next.next = current.next.next.next;\n                return;\n            }\n        }\n        current.next = new ListNode(insert_str);\n        current.next.next = current.next.next",
      -7.6484375
    ],
    [
      "def insert_string(string, list_of_strings):\n    \"\"\"\n    Args:\n        string (str): The string to insert.\n        list_of_strings (list): The list of strings to insert the string into.\n\n    Returns:\n        list: A list of strings with the string inserted at the beginning of each item.\n    \"\"\"\n    return [string + s for s in list_of_strings]\n\nif __name__ == '__main__':\n    test_case = [\n        ['abcd', 'e', 'fgh', 'ijkl'],\n        ['a', 'b', 'c', 'd'],\n        ['', '', '', '', ''],\n        ['', '', '', '', ''],\n        ['', '', '', '', '']\n    ]\n\n    for test in test_case:\n        print('Testing:', test)\n        assert insert_string('', test) == test\n        assert insert_string('a', test) == [ 'a', 'abcd', 'e', 'fgh', 'ijkl']\n        assert insert_string('abcd', test) == [ 'a', 'abcd', 'e', 'fgh', 'ijkl']\n        assert insert_string('bcd', test) == [ 'a', 'bcd', 'e', 'fgh', 'ijkl']\n        assert insert_string('bcde', test) == [ 'a', 'bcde', 'e', 'fgh', 'ijkl']\n        assert insert_string('bcdef', test) == [ 'a', 'bcdef', 'e', 'fgh', 'ijkl']\n        assert insert_string('bcdefg', test) == [ 'a', 'bcdefg', 'e', 'fgh', 'ijkl']\n        assert insert_string('bcdefgh', test) == [ 'a', 'bcdefgh', 'e', 'fgh', 'ijkl']\n        assert insert_string('bcdefghi', test) == [ 'a', 'bcdefghi', 'e', 'fgh', 'ijkl']\n        assert insert_string('bcdefghij', test) == [ 'a', 'bcdefghij', 'e', 'fgh', 'ij",
      -7.765625
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://www.hackerrank.com/challenges/insert-at-first-in-a-linked-list\n\n\ndef insert_at_first(head, item):\n    \"\"\"\n    Inserts the given item at the beginning of the list.\n    :type head: ListNode\n    :rtype: ListNode\n    \"\"\"\n    new_head = head\n    while head.next:\n        new_head = head.next\n        head.next = head.next.next\n        head = head.next\n    head.next = node(item)\n    return new_head\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\ndef node(x):\n    return ListNode(x)\n\n\ndef main():\n    head = node(1)\n    head.next = node(2)\n    head.next.next = node(3)\n    head.next.next.next = node(4)\n    head.next.next.next.next = node(5)\n    head.next.next.next.next.next = node(6)\n    head.next.next.next.next.next.next = node(7)\n    head.next.next.next.next.next.next.next = node(8)\n    head.next.next.next.next.next.next.next.next = node(9)\n    print(head)\n    head = insert_at_first(head, 10)\n    print(head)\n    head = insert_at_first(head, 11)\n    print(head)\n\n\nif __name__ == '__main__':\n    main()",
      -7.80078125
    ],
    [
      "# https://leetcode.com/problems/insert-into-the-beginning-of-every-element-of-a-sorted-list/solution/\n\nclass Solution:\n    def insertInto(self, list, str):\n        return self.insert_helper(list, 0, str)\n\n    def insert_helper(self, list, index, str):\n        if index >= len(list):\n            list.append(str)\n            return list\n\n        if list[index] < str:\n            list[index] = str\n            self.insert_helper(list, index+1, str)\n        else:\n            self.insert_helper(list, index, str)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    list = [1,3,4,6,7,9]\n    print(solution.insertInto(list, \"z\"))\n    print(list)",
      -8.1953125
    ],
    [
      "# Approach #1: Iterate over the list and insert the string at the beginning of each item\n# Approach #2: Insert the string at the beginning of the list using a copy\n# Approach #3: Insert the string at the beginning of the list using a list comprehension\n\n# Example\n# Input: list = [\"a\",\"b\",\"c\"], string = \"hello\"\n# Output: [\"hello\",\"a\",\"b\",\"c\"]\n\ndef insert_at_beg(list, string):\n    return [string + str(i) for i in list]\n\n\ndef insert_at_beg_iter(list, string):\n    for i in list:\n        yield i + string\n\ndef insert_at_beg_list_compre(list, string):\n    return [list[i] + string for i in range(len(list))]\n\n# Test Cases\ntest_cases = [\n    ([], \"hello\"),\n    ([1], \"hello\"),\n    ([2, 3], \"hello\"),\n    ([1, 2, 3], \"hello\"),\n]\n\nfor test in test_cases:\n    actual = insert_at_beg(test[0], test[1])\n    expected = test[0] + test[1]\n    assert actual == expected, \"For input: {}\\nExpected: {}\\nActual: {}\".format(test[0], expected, actual)\n\nfor test in test_cases:\n    actual = insert_at_beg_iter(test[0], test[1])\n    expected = test[0] + test[1]\n    assert actual == expected, \"For input: {}\\nExpected: {}\\nActual: {}\".format(test[0], expected, actual)\n\nfor test in test_cases:\n    actual = insert_at_beg_list_compre(test[0], test[1])\n    expected = test[0] + test[1]\n    assert actual == expected, \"For input: {}\\nExpected: {}\\nActual: {}\".format(test[0], expected, actual)",
      -8.2890625
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def prepend_string(self, head, s):\n        \"\"\"\n        :type head: ListNode\n        :type s: str\n        :rtype: None Do not return anything, modify input list in-place instead.\n        \"\"\"\n        if not head:\n            return\n        p = head\n        while p.next:\n            p = p.next\n        p.next = ListNode(s, None)\n        p.next.next = head\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/prepend-string-to-all-elements-of-a-linked-list/solution/\n\n# 1ms 100%\nclass Solution {\n    public void prepend_string(ListNode head, String s) {\n        if (head == null) return;\n        if (head.next == null) head.next = new ListNode(s, null);\n        else {\n            ListNode p = head;\n            while (p.next!= null) p = p.next;\n            p.next = new ListNode(s, null);\n            p.next.next = head;\n        }\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public void prepend_string(ListNode head, String s) {\n        if (head == null || head.next == null) {\n            return;\n        }\n\n        ListNode p = head;\n        ListNode prev = null;\n        while (p!= null) {\n            prev = p;\n            p = p.next;\n        }\n        prev.next = new ListNode(s, null);\n        prev.next.next = head;\n    }\n}\n'''",
      -8.3046875
    ],
    [
      "# https://www.youtube.com/watch?v=hLQYw2kXzZ0\n\ndef insert_string(original_list, insert_string, position):\n    new_list = []\n    new_list.append(insert_string)\n    for i in range(0, len(original_list)):\n        new_list.append(original_list[i])\n        if position == i:\n            new_list[i] = insert_string\n    return new_list\n\ndef insert_string_in_all_lists(original_list, insert_string):\n    for i in range(0, len(original_list)):\n        original_list[i] = insert_string_in_all_lists(original_list[i], insert_string)\n    return original_list\n\ndef insert_string_in_all_lists_1(original_list, insert_string):\n    for i in range(0, len(original_list)):\n        original_list[i] = insert_string_in_all_lists_1(original_list[i], insert_string)\n    return original_list\n\ndef insert_string_in_all_lists_2(original_list, insert_string):\n    for i in range(0, len(original_list)):\n        original_list[i] = insert_string_in_all_lists_2(original_list[i], insert_string)\n    return original_list\n\ndef insert_string_in_all_lists_3(original_list, insert_string):\n    for i in range(0, len(original_list)):\n        original_list[i] = insert_string_in_all_lists_3(original_list[i], insert_string)\n    return original_list\n\ndef insert_string_in_all_lists_4(original_list, insert_string):\n    for i in range(0, len(original_list)):\n        original_list[i] = insert_string_in_all_lists_4(original_list[i], insert_string)\n    return original_list\n\ndef insert_string_in_all_lists_5(original_list, insert",
      -8.7109375
    ],
    [
      "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param {TreeNode} root\n    # @param {string} str\n    # @return {TreeNode}\n    def insertIntoTree(self, root, str):\n        if root is None:\n            return TreeNode(str)\n        if root.val > str[0]:\n            root.left = self.insertIntoTree(root.left, str)\n        elif root.val < str[0]:\n            root.right = self.insertIntoTree(root.right, str)\n        else:\n            root.val = str[0]\n            root.left = self.insertIntoTree(root.left, str[1:])\n            root.right = self.insertIntoTree(root.right, str[1:])\n        return root\n\n\n# @param {TreeNode} root\n# @param {string} str\n# @return {void} Do not return anything, modify root in-place instead.\ndef insertIntoTree(root, str):\n    if root is None:\n        return TreeNode(str)\n    if root.val > str[0]:\n        root.left = insertIntoTree(root.left, str)\n    elif root.val < str[0]:\n        root.right = insertIntoTree(root.right, str)\n    else:\n        root.val = str[0]\n        root.left = insertIntoTree(root.left, str[1:])\n        root.right = insertIntoTree(root.right, str[1:])\n    return root\n\n\n# @param {TreeNode} root\n# @param {string} str\n# @return {void} Do not return anything, modify root in-place instead.\ndef insertIntoTree2(root, str):\n    if root is None:\n        return TreeNode(str)\n    if str[0] > root.val:\n        root.left = insertIntoTree2(root",
      -9.3203125
    ],
    [
      "# https://leetcode.com/problems/insert-string-at-the-beginning-of-all-elements-in-a-list/solution/\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def insertNodeAtBeginning(self, head, node):\n        \"\"\"\n        :type head: ListNode\n        :type node: ListNode\n        :rtype: void Do not return anything, modify head in-place instead.\n        \"\"\"\n        if head is None:\n            return node\n        while head.next:\n            head = head.next\n        head.next = node\n\n# https://leetcode.com/problems/insert-string-at-the-beginning-of-all-elements-in-a-list/solution/\n\nclass Solution2(object):\n    def insertNodeAtBeginning(self, head, node):\n        \"\"\"\n        :type head: ListNode\n        :type node: ListNode\n        :rtype: void Do not return anything, modify head in-place instead.\n        \"\"\"\n        if head is None:\n            return node\n        pre = head\n        cur = head.next\n        while cur:\n            pre = pre.next\n            cur = cur.next\n        pre.next = node\n\n# https://leetcode.com/problems/insert-string-at-the-beginning-of-all-elements-in-a-list/discuss/276877/Python-C%2B%2B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B-%3B",
      -9.34375
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            if slow.val > fast.val:\n                slow = slow.next\n            else:\n                slow.next = fast.next\n                fast = fast.next\n        slow.next = head\n        return head\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/insertion-sort-list/solution/\n#\nApproach #1: Sort [Insertion Sort] [Time Limit Exceeded] [Space Limit Exceeded]\nComplexity Analysis\nTime Complexity: O(N logN).\n\nApproach #2: Sort [Insertion Sort] [Time Limit Exceeded] [Space Limit Exceeded]\nComplexity Analysis\nTime Complexity: O(N logN).\n\nApproach #3: Sort [Insertion Sort] [Time Limit Exceeded] [Space Limit Exceeded]\nComplexity Analysis\nTime Complexity: O(N logN).\n\nApproach #4: Sort [Insertion Sort] [Time Limit Exceeded] [Space Limit Exceeded]\nComplexity Analysis\nTime Complexity: O(N logN).\n\nApproach #5: Sort [Insertion Sort] [Time Limit Exceeded] [Space Limit Exceeded]\nComplexity Analysis\nTime Complexity: O(N logN).\n\nApproach #6: Sort [Insertion Sort] [Time Limit Exceeded] [Space Limit Exceeded]\nComplexity Analysis\nTime Complexity: O(N logN).\n\nApproach #7: Sort [Insertion Sort] [Time Limit Exceeded] [Space Limit Exceeded]\nComplexity Analysis\nTime Complexity: O(N logN).",
      -9.3515625
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-a-string-at-the-beginning-of-every-element-in-a-linked-list\n\ndef insertion_sort(head):\n    if head is None:\n        return head\n    if head.next is None:\n        return head\n    current_item = head\n    previous_item = None\n    while current_item is not None and current_item.next is not None:\n        previous_item = current_item\n        current_item = current_item.next\n        while previous_item is not None:\n            if previous_item.val < current_item.val:\n                previous_item.next = current_item\n                current_item = current_item.next\n            else:\n                previous_item = previous_item.next\n    previous_item.next = current_item\n    return head\n\ndef insertion_sort_recursive(head):\n    if head is None:\n        return head\n    if head.next is None:\n        return head\n    current_item = head\n    previous_item = None\n    while current_item is not None and current_item.next is not None:\n        previous_item = current_item\n        current_item = current_item.next\n        if previous_item.val < current_item.val:\n            previous_item.next = current_item\n            current_item = current_item.next\n        else:\n            previous_item = previous_item.next\n    previous_item.next = current_item\n    return head\n\ndef insertion_sort_iterative(head):\n    if head is None:\n        return head\n    if head.next is None:\n        return head\n    current_item = head\n    previous_item = None\n    while current_item is not None and current_item.next is not None:\n        previous_item = current_item\n        current_item = current_item.next\n        if previous_item.val < current_item.val:\n            previous_item.next = current_item\n            current_item = current_item.next\n        else:\n            previous_item = previous_",
      -10.71875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def insertFront(self, head, k):\n        \n        # write your code here\n        if not head:\n            return head\n        \n        new_head = ListNode(0)\n        new_head.next = head\n        \n        while head and k:\n            head = head.next\n            k -= 1\n        \n        new_head.next = head\n        return new_head\n        \n        \n\nif __name__ == '__main__':\n    s = Solution()\n    #print(s.insertFront([1,2,3], 0))\n    #print(s.insertFront([1,2,3], 1))\n    #print(s.insertFront([1,2,3], 2))\n    #print(s.insertFront([1,2,3], 3))\n    #print(s.insertFront([1,2,3], 4))\n    #print(s.insertFront([1,2,3], 5))\n    #print(s.insertFront([1,2,3], 6))\n    #print(s.insertFront([1,2,3], 7))\n    #print(s.insertFront([1,2,3], 8))\n    #print(s.insertFront([1,2,3], 9))\n    #print(s.insertFront([1,2,3], 10))\n    #print(s.insertFront([1,2,3], 11))\n    #print(s.insertFront([1,2,3], 12))\n    #print(s.insertFront([1,2,3], 13))\n    #print(s.insertFront([1,2,3], 14))\n    #print(s.insertFront([1,2,3], 15))\n    #print(s.insertFront([1,2,3], 16))\n    #print(s.insertFront([1,2,3",
      -10.984375
    ],
    [
      "def insertion_sort(list):\n    \"\"\"\n    :type list: List[str]\n    :rtype: void Do not return anything, modify list in-place instead.\n    \"\"\"\n    for i in range(1, len(list)):\n        j = i\n        while j > 0 and list[j - 1] > list[j]:\n            list[j] = list[j - 1]\n            j -= 1\n        list[j] = list[i]\n    return\n\n\n# Your Solution\n\n# Note:\n# 1. List may be empty.\n# 2. List may contain duplicate elements.\n# 3. Time Limit Exceeded\n\n# Test Cases\n\n# InsertionSort\n# 1. [],\n# 2. [\"a\"],\n# 3. [\"a\",\"b\"],\n# 4. [\"a\",\"c\",\"b\"],\n# 5. [\"a\",\"b\",\"c\"],\n# 6. [\"a\",\"b\",\"c\",\"d\"],\n# 7. [\"a\",\"b\",\"c\",\"d\",\"e\"],\n# 8. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"],\n# 9. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],\n# 10. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],\n# 11. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"],\n# 12. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"],\n# 13. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\"],\n# 14. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"],\n# 15. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"],\n# 16. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"],\n# 17. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\"],\n# 18. [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"",
      -11.7890625
    ],
    [
      "def insert_str_at_first(str_in_list, str_in_list_to_insert):\n    # +++your code here+++\n    for i in range(len(str_in_list)):\n        str_in_list[i] = str_in_list[i] + str_in_list_to_insert[0]\n    return str_in_list\n\n\n# Test Cases\n\n# Test Case 1:\ntest_cases = [\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"abc\"),\n    (\"abc\", \"abcd\"),\n    (\"abc\", \"abcd\"),\n    (\"abc\", \"abcde\"),\n    (\"abc\", \"abcde\"),\n    (\"abc\", \"abcdef\"),\n    (\"abc\", \"abcdef\"),\n    (\"abc\", \"abcdefg\"),\n    (\"abc\", \"abcdefg\"),\n    (\"abc\", \"abcdefgh\"),\n    (\"abc\", \"abcdefgh\"),\n    (\"abc\", \"abcdefghi\"),\n    (\"abc\", \"abcdefghi\"),\n    (\"abc\", \"abcdefghij\"),\n    (\"abc\", \"abcdefghij\"),\n    (\"abc\", \"abcdefghijk\"),\n    (\"abc\", \"abcdefghijk\"),\n    (\"abc\", \"abcdefghijkl\"),\n    (\"abc\", \"abcdefghijkl\")\n]\nfor test_case in test_cases:\n    print \"Test Case 1: \", test_case\n    assert(insert_str_at_first(test_case[0], test_case[1]) == test_case[2])\n\n# Test Case 2:\ntest_cases = [\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),\n    (\"abc\", \"xyz\"),",
      -12.4296875
    ],
    [
      "import re\n\nclass Solution(object):\n    def insertString(self, head, str):\n        \"\"\"\n        :type head: ListNode\n        :type str: str\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n\n        pre = head\n        cur = head.next\n        while cur:\n            if cur.val < str:\n                pre.next = cur\n                pre = cur\n            cur = cur.next\n        pre.next = ListNode(str)\n        return head\n\n    def insertString2(self, head, str):\n        \"\"\"\n        :type head: ListNode\n        :type str: str\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        \n        temp = head\n        while temp:\n            if temp.val < str:\n                temp.next = ListNode(str)\n                temp = temp.next\n            else:\n                break\n        temp.next = head\n        return head\n\nif __name__ == \"__main__\":\n    assert Solution().insertString(None, \"hello\") == None\n    assert Solution().insertString(ListNode(1), \"hello\") == None\n    assert Solution().insertString(ListNode(1,2), \"hello\") == None\n    assert Solution().insertString(ListNode(1,2,3), \"hello\") == None\n    assert Solution().insertString(ListNode(1,2,3,4), \"hello\") == None\n    assert Solution().insertString(ListNode(1,2,3,4,5), \"hello\") == None\n    assert Solution().insertString(ListNode(1,2,3,4,5,6), \"hello\") == None\n    assert Solution().insertString(ListNode(1,2,3,4,5,6,7), \"hello\") == None\n    assert Solution().insertString(ListNode(1,2,3,4,5,6,7,8), \"hello\") == None\n    assert Solution().insertString(ListNode(1,2,3,4,5,6,7,8,9), \"hello\") == None\n    assert Solution().insertString(ListNode(1,2,3,4,5,6",
      -12.5078125
    ],
    [
      "# https://www.hackerrank.com/challenges/insert-at-start/problem\n\ndef insert_at_start(list_):\n    for i in list_:\n        print(i)\n        \n    for i in list_:\n        print(i, end=\" \")\n    print()\n\n# Complete the insert_at_start function below.\ndef insert_at_start(list_):\n    for i in list_:\n        print(i)\n        \n    for i in list_:\n        print(i, end=\" \")\n    print()\n\nif __name__ == '__main__':\n    test_cases = [\n        [[], [\"a\"]],\n        [[1, 2], [\"a\"]],\n        [[1, 2, 3], [\"a\"]],\n        [[1, 2, 3], [\"a\", \"b\"]],\n        [[1, 2, 3, 4], [\"a\", \"b\", \"c\"]]\n    ]\n\n    for i in test_cases:\n        insert_at_start(i[0])",
      -12.578125
    ],
    [
      "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head: return head\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = self.insert(slow, fast.next)\n            fast = fast.next\n        return slow\n        \n    def insert(self, head, node):\n        while head and head.next:\n            if head.next.val < node.val:\n                head = head.next\n            else:\n                node.next = head.next\n                head.next = node\n                return head\n        node.next = head\n        return node\n        \nif __name__ == \"__main__\":\n    head = ListNode(1, ListNode(2, ListNode(3, None)))\n    head = self.insertionSortList(head)\n    while head:\n        print head.val\n        head = head.next",
      -13.2734375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {string} str\n    # @return {ListNode}\n\n    def insert(self, head, str):\n        cur = head\n        while cur:\n            cur = cur.next\n            cur.next = ListNode(str, cur.next)\n            cur.next.next = cur\n            cur = cur.next\n\n        return head\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n\n    head = solution.insert(head, \"a\")\n    while head:\n        print head.val,\n        head = head.next",
      -13.671875
    ],
    [
      "import unittest\n\n\nclass Solution:\n    def insertions(self, head: list, str: str) -> None:\n        if not head:\n            return\n        pre_head = head[0]\n        curr_head = pre_head\n        curr_str = str\n        while curr_head:\n            if curr_str < curr_head.data:\n                pre_head.next = curr_head\n                pre_head = curr_head\n            curr_head = curr_head.next\n        curr_head.next = pre_head\n        return head\n\n    def insertions1(self, head: list, str: str) -> None:\n        if not head:\n            return\n        pre_head = head[0]\n        curr_head = pre_head\n        curr_str = str\n        while curr_head:\n            if curr_str < curr_head.data:\n                pre_head.next = curr_head\n                pre_head = curr_head\n            curr_head = curr_head.next\n        pre_head.next = head[0]\n        return head\n\n    def insertions2(self, head: list, str: str) -> None:\n        if not head:\n            return\n        pre_head = head[0]\n        curr_head = pre_head\n        curr_str = str\n        while curr_head:\n            if curr_str < curr_head.data:\n                pre_head.next = curr_head\n                pre_head = curr_head\n            curr_head = curr_head.next\n        pre_head.next = head[0]\n        return head\n\n    def insertions3(self, head: list, str: str) -> None:\n        if not head:\n            return\n        pre_head = head[0]\n        curr_head = pre_head\n        curr_str = str\n        while curr_head:\n            if curr_str < curr_head.data:\n                pre_head.next = curr_head\n                pre_head = curr_head\n            curr_head = cur",
      -14.0234375
    ],
    [
      "# https://oj.leetcode.com/problems/insert-into-the-middle-of-the-list/\n# Write a function to insert a given string at the middle of the linked list.\n# https://oj.leetcode.com/problems/insert-into-the-middle-of-the-list/discuss/268896/Java-Python-C%2B%2B-Insert-a-String-into-the-Middle-of-the-List\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def insert(self, head, val):\n        if head is None:\n            return ListNode(val)\n        p = head\n        while p.next is not None:\n            p = p.next\n        n = ListNode(val)\n        n.next = p.next\n        p.next = n\n        return head\n\nif __name__ == '__main__':\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, None))))).next\n    print Solution().insert(head, 10)",
      -14.0859375
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None, next=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\n\nclass Solution:\n    # @param head, a list node\n    # @param str\n    # @return a tree node\n    def insertInto(self, head, str):\n        node = TreeNode(str[0])\n        node.next = head\n        node.left = None\n        node.right = None\n        while head is not None:\n            node = self.insert(node, head, str)\n            head = head.next\n        return node\n\n    def insert(self, node, head, str):\n        if head is None:\n            return node\n        elif head.val < str[0]:\n            node.left = self.insert(node.left, head.left, str)\n            head = head.next\n        elif head.val > str[0]:\n            node.right = self.insert(node.right, head.right, str)\n            head = head.next\n        else:\n            head = head.next\n        return node\n\nif __name__ == \"__main__\":\n    head = None\n    head = TreeNode(1, head, None, None)\n    head = TreeNode(2, head, None, None)\n    head = TreeNode(3, head, None, None)\n    head = TreeNode(4, head, None, None)\n    head = TreeNode(5, head, None, None)\n    head = TreeNode(6, head, None, None)\n    head = TreeNode(7, head, None, None)\n    head = TreeNode(8, head, None, None)\n    head = TreeNode(9, head, None, None)\n    head = TreeNode(10, head, None, None)\n    head = TreeNode(11, head, None, None)\n    head = TreeNode(12, head, None, None)\n    head = TreeNode(13, head, None, None)\n    head = TreeNode(14,",
      -14.4765625
    ],
    [
      "# https://leetcode.com/problems/insert-first-string-in-the-given-list/description/\n# https://leetcode.com/problems/insert-first-string-in-the-given-list/discuss/175715/Java-C%2B%2B-Python-Solution\nclass Solution:\n    def insertFirst(self, head: ListNode, str: str) -> ListNode:\n        if head is None:\n            return ListNode(str)\n        new_head = ListNode(str)\n        new_head.next = head\n        pre_node = new_head\n        while pre_node.next:\n            pre_node = pre_node.next\n        pre_node.next = head\n        return new_head\n\n# Test Cases\n# arr = [1,2,3,4,5,6,7,8,9,10]\n# str = 'a'\n# result = [1,2,3,4,5,6,7,8,9,10,a]\n# result = [1,2,3,4,a,5,6,7,8,9,10]\n# result = [1,2,3,4,a,5,6,7,8,a,9,10]\n# result = [1,2,3,4,a,5,6,7,8,9,10,a]\n# result = [1,2,3,4,a,5,6,7,8,9,10,a]\n# arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n# str = 'a'\n# result = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,a]\n# arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n# str = 'a'\n# result = [",
      -14.703125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def insertionSortList(self, head, k):\n        if head == None:\n            return None\n\n        if head.next == None:\n            return head\n\n        pre = head\n        cur = head.next\n        while cur.next!= None:\n            cur = cur.next\n            pre = self.insert(pre, k, cur.val)\n\n        return pre\n\n    def insert(self, head, k, val):\n        pre = None\n        cur = head\n\n        while cur!= None and cur.val < val:\n            pre = cur\n            cur = cur.next\n\n        if pre == None:\n            return self.insert(None, k, val)\n\n        if cur == None:\n            return pre\n        \n        if k < cur.val:\n            pre.next = self.insert(pre.next, k, val)\n        else:\n            pre.next = self.insert(pre.next, k - 1, val)\n        return pre\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n\n    Solution().insertionSortList(head, 5)\n\n    while head.next!= None:\n        print(head.val)\n        head = head.next",
      -14.828125
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n    def prepend_all(self, head, str):\n        \"\"\"\n        :type head: ListNode\n        :type str: str\n        :rtype: ListNode\n        \"\"\"\n        if not head or not str:\n            return head\n\n        head.next = self.prepend_all(head.next, str)\n        return head\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/prepend-all-strings/solution/\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\n# 4ms 100%\nclass Solution {\n    public ListNode prependAll(ListNode head, String str) {\n        if (head == null || head.next == null) {\n            ListNode newHead = new ListNode(str);\n            newHead.next = head;\n            return newHead;\n        }\n        ListNode cur = head;\n        while (cur.next!= null) {\n            cur = cur.next;\n        }\n        cur.next = new ListNode(str);\n        return head;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public ListNode prependAll(ListNode head, String str) {\n        if (head == null) return null;\n        ListNode cur = head;\n        while (cur.next!= null) {\n            cur = cur.next;\n        }\n        ListNode newHead = new ListNode(str);\n        newHead.next = cur.next;\n        cur.next = newHead;\n        return",
      -15.1875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}