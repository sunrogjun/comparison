{
  "problem": {
    "task_id": "MBPP/265",
    "prompt": "Write a function to split a list for every nth element.",
    "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
    "test_list": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ],
    "challenge_test_list": [],
    "problem_id": 254
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def split_list(list_, n):\n    if n == 0:\n        return list_\n    return [list_[i:i+n] for i in range(0, len(list_), n)]\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n        [7, 8],\n        [9],\n    ], \"Basic\"\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ], \"Nth\"\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9],\n    ], \"Nth\"\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n    ], \"Nth\"\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9],\n    ], \"Nth\"\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == [\n        [1, 2, 3, 4, 5, 6, 7],\n        [8, 9],\n    ], \"Nth\"\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == [\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [9],",
      5.36328125
    ],
    [
      "def split_list(lst, n):\n    \"\"\"\n    :type lst: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i + n])\n    return result\n\n\ndef test():\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5,",
      2.123046875
    ],
    [
      "def split_list(list_, n):\n    return [list_[i:i+n] for i in range(0, len(list_), n)]\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    print(split_list(l, 2))\n    print(split_list(l, 3))\n    print(split_list(l, 4))\n    print(split_list(l, 5))\n    print(split_list(l, 6))\n    print(split_list(l, 7))\n    print(split_list(l, 8))\n    print(split_list(l, 9))\n    print(split_list(l, 10))\n    print(split_list(l, 11))\n    print(split_list(l, 12))\n    print(split_list(l, 13))\n    print(split_list(l, 14))\n    print(split_list(l, 15))\n    print(split_list(l, 16))\n    print(split_list(l, 17))\n    print(split_list(l, 18))\n    print(split_list(l, 19))\n    print(split_list(l, 20))\n    print(split_list(l, 21))",
      1.6494140625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def splitListToParts(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: List[ListNode]\n        \"\"\"\n        if not head or not head.next:\n            return []\n        if not head.next.next:\n            return [head]\n\n        n = 0\n        part = []\n        pre = head\n        while pre.next:\n            n += 1\n            if n == k:\n                part.append(pre.next)\n            pre = pre.next\n        part.append(pre.next)\n        return part",
      1.64453125
    ],
    [
      "def split_list(lst, n):\n    \"\"\"\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)\n    [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 7)\n    [[1, 2, 3, 4, 5, 6], [7, 8, 9]]\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 0)\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    \"\"\"\n    if n == 0:\n        return [[]]\n\n    if len(lst) == 0:\n        return []\n\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\ndef test_split_list():\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) ==",
      0.90185546875
    ],
    [
      "def splitList(lst, n):\n    \"\"\"\n    >>> splitList([1, 2, 3, 4, 5], 2)\n    [[1, 2], [3, 4], [5]]\n    >>> splitList([1, 2, 3, 4, 5], 3)\n    [[1, 2, 3], [4, 5]]\n    >>> splitList([1, 2, 3, 4, 5], 6)\n    [[1, 2, 3, 4, 5]]\n    \"\"\"\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()",
      0.050384521484375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def splitListToParts(self, head: ListNode, k: int) -> List[ListNode]:\n        head_next = head\n        res = []\n        while head_next and k > 0:\n            res.append(head)\n            head = head_next\n            head_next = head_next.next\n            k -= 1\n        if head:\n            res.append(head)\n        return res",
      -0.31640625
    ],
    [
      "def split_list(lst, n):\n    \"\"\"\n    :type lst: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print split_list(lst, 3)",
      -0.4697265625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def splitListToParts(self, head, k):\n        if not head: return head\n        \n        # make a new list head\n        new_head = ListNode(0)\n        new_head.next = head\n        \n        # split the list\n        curr = new_head\n        while curr.next:\n            # move forward\n            curr = curr.next\n            \n            # split the list if needed\n            if curr.next and curr.val % k == 0:\n                # add a new node to the new list\n                new_head.next = ListNode(curr.val)\n                new_head.next.next = curr.next\n                \n                # move forward\n                curr = new_head.next\n                \n            # otherwise, add the current element to the new list\n            else:\n                curr.next = None\n                curr = curr.next\n        \n        # return the new head\n        return new_head.next",
      -0.5263671875
    ],
    [
      "import collections\n\n\ndef split_list(lst, n):\n    numbers = collections.Counter(lst)\n    return [numbers[i] for i in range(0, len(numbers), n)]\n\n\ndef test_split_list():\n    assert split_list([1, 2, 3, 4, 5], 2) == [1, 2],'should split'\n    assert split_list([1, 2, 3, 4, 5], 3) == [1, 2, 3],'should split'\n    assert split_list([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4],'should split'\n    assert split_list([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5],'should split'\n\n\nif __name__ == '__main__':\n    test_split_list()",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def splitListToParts(self, head, k):\n        if head is None:\n            return None\n        \n        prev = head\n        while head and head.next:\n            n = head.next\n            for i in range(k):\n                prev = head\n                head = head.next\n            prev.next = n\n            n.next = None\n        \n        return head",
      -0.85693359375
    ],
    [
      "def splitList(list):\n\tfor i in range(0, len(list), len(list)/2):\n\t\tyield list[i:i+len(list)/2]\n\ndef main():\n\tprint splitList([1,2,3,4,5])\n\nif __name__ == '__main__':\n\tmain()",
      -0.85693359375
    ],
    [
      "def split_list(input_list, n):\n    for i in range(0, len(input_list), n):\n        yield input_list[i:i+n]\n\ndef main():\n    input_list = [1,2,3,4,5,6,7,8,9]\n    for i in split_list(input_list, 2):\n        print(i)\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def splitList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[ListNode]\n        \"\"\"\n        if not head:\n            return []\n        count = 1\n        curr = head\n        while curr:\n            curr = curr.next\n            count += 1\n        splits = [head]\n        for i in xrange(count):\n            splits.append(curr)\n            curr = curr.next\n        return splits",
      -0.85791015625
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0):\n#         self.val = val\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def splitListToParts(self, head, k):\n        # Write your code here\n        p = None\n        cur = head\n        while cur:\n            p = cur\n            cur = cur.next\n            if cur:\n                cur = cur.next\n            while cur and cur.next and cur.val % k == 0:\n                cur.next = cur.next.next\n                cur = cur.next\n            p.next = cur\n        return head",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/list-splitter/problem\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def splitListToParts(self, head: ListNode, k: int) -> List[ListNode]:\n        result = []\n        curr_node = head\n        while curr_node is not None:\n            if k == 1:\n                result.append(curr_node)\n            else:\n                if k == 2:\n                    result.append(curr_node)\n                    curr_node = curr_node.next\n                else:\n                    curr_node = curr_node.next\n                    while k > 1 and curr_node is not None:\n                        k -= 1\n                        curr_node = curr_node.next\n        return result",
      -0.85791015625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def splitList(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n        \n        curr = head\n        nth = 1\n        while curr:\n            curr = curr.next\n            nth += 1\n            if nth % 2 == 0:\n                curr = curr.next\n            \n        prev = None\n        curr = head\n        while curr:\n            if prev:\n                prev.next = curr.next\n            else:\n                head = curr.next\n            curr = curr.next\n            \n        return head",
      -0.85791015625
    ],
    [
      "import numpy as np\n\ndef split_list(lst, n):\n    new_lst = []\n    for i in lst:\n        new_lst.append(i)\n        if len(new_lst) % n == 0:\n            yield new_lst\n            new_lst = []\n    if len(new_lst) > 0:\n        yield new_lst\n\ndef main():\n    lst = [1,2,3,4,5,6,7,8,9]\n    print(split_list(lst, 3))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/split-a-list-every-nth-element\n\n\ndef split_list(list_, n):\n    \"\"\"\n    >>> split_list([1, 2, 3, 4, 5, 6, 7], 2)\n    [[1, 2], [3, 4], [5, 6], [7]]\n    >>> split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [[1, 2, 3], [4, 5, 6], [7]]\n    \"\"\"\n    return [list(i) for i in list_[::n]]",
      -0.85791015625
    ],
    [
      "def split_list(L, n):\n    if n == 0:\n        return L\n    \n    return [L[i:i+n] for i in range(0, len(L), n)]",
      -0.85791015625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def splitList(self, head, n):\n        \"\"\"\n        :type head: TreeNode\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        # Base case\n        if head == None or head.left == None or head.right == None:\n            return []\n        \n        # The first step is to check if the list is split\n        if head.left.val % n == 0:\n            l = [head.val]\n            head = head.left\n        else:\n            l = []\n        \n        if head.right.val % n == 0:\n            r = [head.val]\n            head = head.right\n        else:\n            r = []\n        \n        return [l, r] + self.splitList(head.left, n) + self.splitList(head.right, n)",
      -0.85791015625
    ],
    [
      "def split_list(list_, n):\n    \"\"\"\n    :type list_: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(0, len(list_), n):\n        result.append([list_[i], list_[i + 1:i + n]])\n    return result\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(n)\n# param_1 = obj.split_list(list_, n)",
      -0.85791015625
    ],
    [
      "import collections\n\n\ndef split_list_by_nth(nth_list):\n    \"\"\"\n    :type nth_list: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    return collections.groupby(nth_list, lambda x: int(x % nth_list))\n\n\nif __name__ == '__main__':\n    nth_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_list_by_nth(nth_list))\n    nth_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_list_by_nth(nth_list, 3))",
      -0.85791015625
    ],
    [
      "def split_list(my_list, n):\n    '''\n    :type my_list: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    '''\n    res = []\n    for i in range(len(my_list)):\n        if i % n == 0:\n            res.append(my_list[i:i+n])\n    return res\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5], 2))\n    print(split_list([1, 2, 3, 4, 5], 3))\n    print(split_list([1, 2, 3, 4, 5], 4))\n    print(split_list([1, 2, 3, 4, 5], 5))",
      -0.85791015625
    ],
    [
      "def split_list_by_nth(list, n):\n    \"\"\"\n    :type list: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    \n    if n == 1:\n        return [list]\n\n    result = []\n    for i in range(len(list)):\n        if i % n == 0:\n            result.append(list[i:i + n])\n    return result",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/split-a-list-every-nth-element\n\ndef split_list(list, n):\n    return [list[i:i+n] for i in range(0, len(list), n)]\n\nif __name__ == '__main__':\n    n = int(input())\n    list = [int(i) for i in input().split()]\n    result = split_list(list, n)\n    print(result)",
      -0.85791015625
    ],
    [
      "def split_every_n(l, n):\n    \"\"\"\n    :type l: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    res = []\n    for i in range(len(l)):\n        if i % n == 0:\n            res.append(l[i:i+n])\n    return res",
      -0.85791015625
    ],
    [
      "def split_list(L, n):\n    # write your code here\n    L = sorted(L)\n    return [(L[i], L[i+n]) for i in range(len(L)-n+1)]\n\nif __name__ == \"__main__\":\n    print split_list([1, 2, 3, 4, 5], 2)",
      -0.85791015625
    ],
    [
      "def nth(lst, n):\n    return [lst[i::n] for i in range(len(lst))]\n\nprint(nth([1, 2, 3, 4, 5], 2))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def splitIntoLists(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        return [nums[i:i+k] for i in range(0, len(nums), k)]",
      -0.85791015625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution:\n    def splitListToParts(self, head: ListNode, n: int) -> List[ListNode]:\n        ans = []\n        pre = head\n        while pre:\n            ans.append([pre])\n            pre = pre.next\n            if pre and pre.val % n == 0:\n                pre = pre.next\n            else:\n                pre = None\n        if pre:\n            ans.append([pre])\n        return ans\n\n    def splitListToParts_2(self, head: ListNode, n: int) -> List[ListNode]:\n        ans = []\n        pre = head\n        while pre:\n            ans.append([pre])\n            pre = pre.next\n            if pre and pre.val % n == 0:\n                pre = pre.next\n            else:\n                pre = None\n        if pre:\n            ans.append([pre])\n        return ans\n\n    def splitListToParts_3(self, head: ListNode, n: int) -> List[ListNode]:\n        ans = []\n        pre = head\n        while pre:\n            ans.append([pre])\n            pre = pre.next\n            if pre and pre.val % n == 0:\n                pre = pre.next\n            else:\n                pre = None\n        if pre:\n            ans.append([pre])\n        return ans",
      -0.8583984375
    ],
    [
      "def splitList(myList):\n    \"\"\"\n    :type myList: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [myList[0:i:n] for i in range(1, len(myList) + 1)]",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def partition(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        def partition(nums, left, right):\n            if left == right:\n                return [nums[left:right]]\n            pivot = nums[left]\n            i = left\n            for j in range(left, right):\n                if nums[j] <= pivot:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    i += 1\n            nums[i], nums[right] = nums[right], nums[i]\n            i = left\n            for j in range(left, right):\n                if nums[j] <= pivot:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    i += 1\n            return [nums[left:i], nums[i:right]]\n        return partition(nums, 0, len(nums) - 1)\n\n# Note:\n#     1. The partition can be divided into two parts.\n#     2. The two parts can be merged into one.\n#     3. The length of the first part is n.\n#     4. The length of the second part is n.\n#     5. The first part and the second part can be merged into one.\n#     6. The length of the first part is n.\n#     7. The length of the second part is n.\n#     8. The length of the first part is n.\n#     9. The length of the second part is n.\n\n# Test\ntest = Solution()\nnums = [1, 2, 3, 4]\nprint(test.partition(nums, 2))",
      -0.8583984375
    ],
    [
      "def split_list(lst, n):\n    \"\"\"\n    :type lst: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        if i % n == 0:\n            res.append(lst[i:])\n    return res\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(lst, n)\n# param_1 = obj.split_list(lst, n)",
      -0.8583984375
    ],
    [
      "from collections import defaultdict\n\n\ndef split_every_nth(n, l):\n    d = defaultdict(list)\n    for i, x in enumerate(l):\n        d[x].append(i)\n    return [l[i] for i in range(0, len(l), n)]\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_every_nth(3, l))",
      -0.8583984375
    ],
    [
      "def splitList(myList):\n    \"\"\"\n    >>> splitList([1, 2, 3, 4, 5, 6])\n    [[1, 2], [3, 4], [5, 6]]\n    >>> splitList([1, 2, 3, 4, 5, 6, 7, 8])\n    [[1, 2], [3, 4], [5, 6], [7, 8]]\n    \"\"\"\n    return [myList[:i] for i in range(1, len(myList) + 1)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def splitList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[ListNode]\n        \"\"\"\n        if not head:\n            return []\n        pre = head\n        res = []\n        while pre:\n            res.append(pre)\n            pre = pre.next\n            if pre:\n                pre = pre.next\n        res.append(pre)\n        if len(res) % 2 == 0:\n            return res[:len(res)/2]\n        else:\n            return res[:len(res)/2+1]",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def splitList(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: List[ListNode]\n        \"\"\"\n        res = []\n        cur = head\n        while cur:\n            if k == 0:\n                res.append(cur)\n                cur = cur.next\n            else:\n                cur = cur.next\n                k -= 1\n        return res",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def splitList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[ListNode]\n        \"\"\"\n        d = {}\n        cur = head\n        while cur:\n            d[cur.val] = cur\n            cur = cur.next\n        \n        res = []\n        cur = head\n        while cur:\n            if cur.val in d:\n                res.append(d[cur.val])\n                cur = cur.next\n            else:\n                res.append(cur)\n                cur = cur.next\n        return res",
      -0.8583984375
    ],
    [
      "def splitList(list, n):\n    \"\"\"\n    :type list: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(0, len(list), n):\n        result.append(list[i:i + n])\n    return result",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param nums, a list of integer\n    # @param k, an integer\n    # @return a list of lists\n    def splitIntoLists(self, nums, k):\n        if len(nums) == 0:\n            return [[]]\n        if len(nums) == 1:\n            return [nums]\n        result = []\n        for i in range(0, len(nums), k):\n            result.append(nums[i:i+k])\n        return result\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    k = 2\n    print solution.splitIntoLists(nums, k)",
      -0.85888671875
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def splitList(self, head: TreeNode, n: int) -> TreeNode:\n        if not head or n <= 0:\n            return head\n        count = 0\n        curr = head\n        while curr:\n            count += 1\n            curr = curr.left\n        curr = head\n        for i in range(count, n):\n            curr.left = TreeNode(i)\n            curr = curr.left\n        curr = head\n        for i in range(n, count+1):\n            curr.right = TreeNode(i)\n            curr = curr.right\n        return head",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/splitting-a-list-every-nth\n\ndef split_list(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\nif __name__ == '__main__':\n    n = int(input())\n    lst = [int(i) for i in input().split()]\n    print(split_list(lst, n))",
      -0.85888671875
    ],
    [
      "def nth_split(lst, n):\n    \"\"\"\n    :type lst: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        if i % n == 0:\n            res.append(lst[i:i+n])\n        else:\n            res.append(lst[i:])\n    return res",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\nclass Solution:\n    def splitList(self, head: List[int], n: int) -> List[List[int]]:\n        def split(head: List[int], n: int, cur: int) -> List[List[int]]:\n            if n == 1:\n                return [head]\n            if cur == 0:\n                return [head]\n            if cur % n == 0:\n                return [head] + split(head[:cur], n, cur)\n            return [head] + split(head[:cur], n, cur + 1) + split(head[cur:], n, cur)\n\n        return split(head, n, 0)",
      -0.85888671875
    ],
    [
      "def nth_element(li, n):\n    \"\"\"\n    :type li: List[int]\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    # write your code here\n    # return [li[n-1]] + [li[i] for i in range(n-1, len(li))] + [li[0]]\n    result = []\n    for i in range(len(li)):\n        if i % n == 0:\n            result.append(li[i])\n        else:\n            result.append(li[i-1])\n    return result\n\nif __name__ == '__main__':\n    li = [1, 2, 3, 4, 5, 6, 7]\n    li2 = nth_element(li, 2)\n    print(li2)",
      -0.85888671875
    ],
    [
      "def split_every_nth(n, lst):\n    # Write your code here\n    \n    for i in range(0, len(lst), n):\n        yield lst[i:i+n]\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print split_every_nth(2, lst)",
      -0.85888671875
    ],
    [
      "def split_list(list, n):\n    \"\"\"\n    :type list: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    return [list[i:i+n] for i in range(0, len(list), n)]\n\n# Your Solution here",
      -0.85888671875
    ],
    [
      "def split_every_nth(l, n):\n    \"\"\"\n    >>> split_every_nth([1, 2, 3, 4, 5], 2)\n    [[1, 2], [3, 4], [5]]\n    >>> split_every_nth([1, 2, 3, 4, 5], 3)\n    [[1, 2, 3], [4, 5]]\n    >>> split_every_nth([1, 2, 3, 4, 5], 4)\n    [[1, 2, 3, 4], [5]]\n    \"\"\"\n    if not l or n <= 0:\n        return []\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/splitting-a-list-every-nth\n\ndef split_list(list, n):\n    \"\"\"\n    :type list: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    \n    if n == 0:\n        return [[] for _ in range(len(list))]\n    \n    return [list[i:i+n] for i in range(0, len(list), n)]",
      -0.86083984375
    ],
    [
      "def split_list(list_, n):\n    \"\"\"\n    >>> split_list([1, 2, 3, 4, 5], 2)\n    [[1, 2], [3, 4], [5]]\n    >>> split_list([1, 2, 3, 4, 5], 3)\n    [[1, 2, 3], [4, 5]]\n    >>> split_list([1, 2, 3, 4, 5], 5)\n    [[1, 2, 3, 4, 5]]\n    >>> split_list([1, 2, 3, 4, 5], 6)\n    [[1, 2, 3, 4, 5]]\n    \"\"\"\n    if len(list_) == 0:\n        return []\n    if len(list_) == 1:\n        return [[list_[0]]]\n    if n == 1:\n        return [[list_[i]] for i in range(len(list_))]\n    if n == len(list_):\n        return [[list_[i]] for i in range(len(list_))]\n    return [list_[i: i + n] for i in range(0, len(list_) - n + 1)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.0078125
    ],
    [
      "def split_list(lst, n):\n    \"\"\"\n    :type lst: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        if i % n == 0:\n            res.append(lst[i:i+n])\n        else:\n            res.append(lst[i:i+1])\n    return res\n\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} n\n    # @return {integer[][]}\n    def splitArray(self, nums, n):\n        return [[nums[i:i+n]] for i in range(len(nums)-n+1)]\n\nif __name__ == \"__main__\":\n    print Solution().splitArray([1,2,3,4,5,6,7], 3)",
      -1.0517578125
    ],
    [
      "from collections import defaultdict\n\n\ndef split_list(lst, n):\n    \"\"\"\n    :type lst: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    d = defaultdict(list)\n    for i in range(len(lst)):\n        d[i % n].append(lst[i])\n    return [d[x] for x in range(n)]\n\n\ndef test_split_list():\n    assert split_list([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\n\n\ndef test_split_list_no_divide():\n    assert split_list([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]\n\n\ndef test_split_list_empty():\n    assert split_list([], 1) == [[]]\n\n\ndef test_split_list_zero():\n    assert split_list([], 0) == [[]]",
      -1.0595703125
    ],
    [
      "def split_list(list_, n):\n    result = []\n    for i in range(0, len(list_), n):\n        result.append(list_[i:i + n])\n    return result\n\nif __name__ == \"__main__\":\n    # Test 1\n    l = [1, 2, 3, 4, 5, 6]\n    assert split_list(l, 2) == [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n    ]\n    assert split_list(l, 3) == [\n        [1, 2, 3],\n        [4, 5, 6],\n    ]\n    assert split_list(l, 4) == [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n    ]\n    assert split_list(l, 5) == [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n    ]\n    assert split_list(l, 6) == [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 10, 11, 12],\n        [13, 14, 15, 16, 17, 18],\n    ]\n    assert split_list(l, 7) == [\n        [1, 2, 3, 4, 5, 6, 7],\n        [8, 9, 10, 11, 12, 13, 14],\n        [15, 16, 17, 18, 19, 20, 21],\n    ]\n    assert split_list(l, 8) == [\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [9, 10, 11, 12, 13, 14, 15, 16],\n        [17, 18, 19, 20, 21, 22, 23, 24],\n    ]\n\n    # Test 2\n    l = [1, 2, 3, 4, 5, 6, 7]\n    assert split_list(l, 2) == [\n        [1, 2],\n        [3, 4],",
      -1.2470703125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def splitListToParts(self, head: ListNode, n: int) -> List[ListNode]:\n        if not head or not head.next:\n            return []\n        res = []\n        slow = head\n        fast = head\n        while fast and fast.next:\n            fast = fast.next.next\n            if fast and fast.next:\n                fast = fast.next\n            else:\n                res.append(ListNode(slow.val))\n                slow = slow.next\n        res.append(ListNode(slow.val))\n        res.append(ListNode(fast.val))\n        res.append(ListNode(head.next.val))\n        return res",
      -1.2685546875
    ],
    [
      "# https://leetcode.com/problems/split-a-list-into-equal-size-parts/\n\n\nclass Solution:\n    def splitIntoParts(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        k = k - 1\n        res = []\n        while nums:\n            if nums[0] % k == 0:\n                res.append(nums[:k])\n                nums = nums[k:]\n            else:\n                res.append(nums)\n                nums = []\n        return res",
      -1.3330078125
    ],
    [
      "def split_every_nth(nth, nums):\n    \"\"\"\n    :type nth: int\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    ret = []\n    for i in range(0, len(nums), nth):\n        ret.append(nums[i:i+nth])\n    return ret\n\nclass Solution(object):\n    def splitList(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        ret = []\n        for i in range(1, len(nums)):\n            ret.append(split_every_nth(i, nums))\n        return ret",
      -1.6669921875
    ],
    [
      "from collections import Counter\n\ndef split_list(l, n):\n    \"\"\"\n    :type l: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    res = []\n    for i in range(len(l)):\n        if i % n == 0:\n            res.append(l[i:i+n])\n    return res\n\n# Your code here\n# You have to do this in two steps\n# First, split the list into every nth element\n# Then, split the list into the lists, each of which is a list of every nth element\ndef split_list(l, n):\n    res = []\n    for i in range(len(l)):\n        if i % n == 0:\n            res.append(l[i:i+n])\n    return res",
      -1.7978515625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def splitListToParts(self, head: TreeNode, n: int) -> List[List[int]]:\n        if head is None:\n            return []\n        ret = []\n        pre = head\n        while pre is not None:\n            if n == 1:\n                ret.append([pre.val])\n            else:\n                ret.append([pre.val])\n                n -= 1\n                pre = pre.left\n            if pre is None:\n                break\n            pre = pre.right\n        return ret\n\n    def splitListToParts1(self, head: TreeNode, n: int) -> List[List[int]]:\n        if head is None:\n            return []\n        ret = []\n        pre = head\n        while pre is not None:\n            if n == 1:\n                ret.append([pre.val])\n            else:\n                ret.append([pre.val])\n                n -= 1\n                pre = pre.left\n            if pre is None:\n                break\n            pre = pre.right\n        return ret\n\ns = Solution()\nprint(s.splitListToParts(None, 5))",
      -1.9462890625
    ],
    [
      "def split_list_n(l, n):\n    \"\"\"\n    :type l: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % n == 0:\n            result.append(l[i:i+n])\n    return result\n\ndef split_list_odd(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(l[i:i+2])\n    return result\n\ndef split_list_even(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(l[i:i+1])\n    return result",
      -2.884765625
    ],
    [
      "import unittest\n\nclass Solution:\n    def splitIntoLists(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if not nums:\n            return []\n        \n        result = []\n        for i in range(len(nums)):\n            if i % k == 0:\n                result.append(nums[i:])\n                nums = nums[:i]\n            else:\n                nums = nums[i:]\n        if nums:\n            result.append(nums)\n        return result\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 7ms 100%\nclass Solution {\n    public List<List<Integer>> splitIntoLists(int[] nums, int k) {\n        if (nums == null || nums.length == 0) {\n            return new ArrayList<>();\n        }\n        int length = nums.length;\n        List<List<Integer>> result = new ArrayList<>();\n        int start = 0;\n        for (int i = 0; i < length; i++) {\n            if (i % k == 0) {\n                result.add(Arrays.asList(nums, start, i));\n                start = i;\n            }\n        }\n        result.add(Arrays.asList(nums, start, length));\n        return result;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public List<List<Integer>> splitIntoLists(int[] nums, int k) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (nums == null || nums.length == 0) {\n            return result;\n        }\n        int length = nums.length;\n        int start = 0;\n        for (int i = 0; i < length;",
      -2.953125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param n, an integer\n    # @return a ListNode\n    def splitListToParts(self, head, n):\n        if head is None:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        i = 0\n        while i < n and head:\n            head = head.next\n            i += 1\n        while i < n:\n            cur = ListNode(0)\n            cur.next = pre.next\n            pre.next = cur\n            pre = cur\n            i += 1\n        return dummy.next",
      -3.13671875
    ],
    [
      "from collections import Counter\nfrom itertools import groupby\nfrom operator import itemgetter\nfrom unittest import TestCase\n\n\nclass Solution(object):\n    def groupTheList(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        return self.group_list(A, 1)\n\n    def group_list(self, A, n):\n        if not A:\n            return []\n        result = []\n        for i in range(0, len(A), n):\n            result.append([])\n            for j in range(i, i + n):\n                result[-1].append(A[j])\n        return result\n\n\nclass Test(TestCase):\n    def test(self):\n        self._test([1, 2, 3, 4], [1, 2, 3, 4])\n        self._test([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n        self._test([1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1])\n        self._test([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
      -3.1484375
    ],
    [
      "class Solution:\n    # @param nums, a list of integer\n    # @param k, an integer\n    # @return a list of lists of integers\n    def splitIntoKLists(self, nums, k):\n        if not nums or k == 1:\n            return [[]]\n        res = []\n        for i in range(1, len(nums)):\n            if i % k == 0:\n                res.append([])\n            res[-1].append(nums[i])\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.splitIntoKLists([1,2,3,4,5,6,7], 3)",
      -3.33984375
    ],
    [
      "def split_list(my_list, n):\n    for i in range(len(my_list)):\n        if i % n == 0:\n            yield my_list[i:]\n            my_list = my_list[0:i]\n    yield my_list\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 4, 5]\n    my_list_split = split_list(my_list, 2)\n    for i in my_list_split:\n        print(i)",
      -3.46484375
    ],
    [
      "from collections import defaultdict\n\ndef split_list(lst, n):\n    \"\"\"\n    Input:\n        lst - list to split\n        n - size of each split\n    Output:\n        list of lists\n    Examples:\n        >>> split_list([1, 2, 3, 4, 5], 2)\n        [[1, 2], [3, 4], [5]]\n        >>> split_list([1, 2, 3, 4, 5, 6], 2)\n        [[1, 2], [3, 4], [5, 6]]\n        >>> split_list([1, 2, 3, 4, 5, 6, 7], 2)\n        [[1, 2], [3, 4], [5, 6], [7]]\n    \"\"\"\n    result = defaultdict(list)\n    for i in range(len(lst)):\n        result[i // n].append(lst[i])\n    return [result[i // n] for i in range(len(result))]",
      -3.650390625
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven a list of numbers, return a list of lists, with every nth element in the list\n\"\"\"\n\n#!/usr/bin/env python\n# -",
      -3.689453125
    ],
    [
      "# https://www.hackerrank.com/challenges/list-splitting\n\n\ndef split_list(n, l):\n    \"\"\"\n    :type n: int\n    :type l: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    if n == 1:\n        return [[e] for e in l]\n\n    return [[e] for e in l[:n]] + split_list(n - 1, l[n:])\n\n\nif __name__ == '__main__':\n    n, l = map(int, input().split())\n    print(split_list(n, l))",
      -3.73828125
    ],
    [
      "def split_list(lst, n):\n    if n <= 0:\n        return [lst]\n    if n == 1:\n        return [lst[i:i+1] for i in range(0, len(lst), 1)]\n    if n == 2:\n        return [lst[i:i+2] for i in range(0, len(lst), 2)]\n    if n == 3:\n        return [lst[i:i+3] for i in range(0, len(lst), 3)]\n    if n == 4:\n        return [lst[i:i+4] for i in range(0, len(lst), 4)]\n    if n == 5:\n        return [lst[i:i+5] for i in range(0, len(lst), 5)]\n    if n == 6:\n        return [lst[i:i+6] for i in range(0, len(lst), 6)]\n    if n == 7:\n        return [lst[i:i+7] for i in range(0, len(lst), 7)]\n    if n == 8:\n        return [lst[i:i+8] for i in range(0, len(lst), 8)]\n    if n == 9:\n        return [lst[i:i+9] for i in range(0, len(lst), 9)]\n    if n == 10:\n        return [lst[i:i+10] for i in range(0, len(lst), 10)]\n    if n == 11:\n        return [lst[i:i+11] for i in range(0, len(lst), 11)]\n    if n == 12:\n        return [lst[i:i+12] for i in range(0, len(lst), 12)]\n    if n == 13:\n        return [lst[i:i+13] for i in range(0, len(lst), 13)]\n    if n == 14:\n        return [lst[i:i+14] for i in range(0, len(lst), 14)]\n    if n == 15:\n        return [",
      -3.826171875
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def splitList(self, head: ListNode, n: int) -> ListNode:\n        if n == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        curr = dummy\n        \n        while curr.next:\n            curr = curr.next\n            if curr.val % n == 0:\n                pre.next = curr.next\n                curr.next = None\n            else:\n                pre = pre.next\n            \n        return dummy.next",
      -4.0390625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\nclass Solution:\n    def splitListToParts(self, head: ListNode, n: int) -> List[ListNode]:\n        curr = head\n        res = []\n        while curr:\n            res.append(curr)\n            curr = curr.next\n            if curr and n > 0:\n                n -= 1\n        return res\n\nif __name__ == '__main__':\n    l = ListNode(1)\n    l.next = ListNode(2)\n    l.next.next = ListNode(3)\n    l.next.next.next = ListNode(4)\n    l.next.next.next.next = ListNode(5)\n    l.next.next.next.next.next = ListNode(6)\n    l.next.next.next.next.next.next = ListNode(7)\n    l.next.next.next.next.next.next.next = ListNode(8)\n    l.next.next.next.next.next.next.next.next = ListNode(9)\n    l.next.next.next.next.next.next.next.next.next = ListNode(10)\n    l.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    l.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    l.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    l.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n\n    s = Solution()\n    res = s.splitListToParts(l, 3)\n    print(res)",
      -4.29296875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        if self is None:\n            return \"None\"\n        else:\n            return repr(self.val)\n\nclass Solution:\n    def splitListToParts(self, head: ListNode, k: int) -> List[ListNode]:\n        if k == 1:\n            return [head]\n        if k == 0:\n            return []\n\n        # k is odd\n        curr = head\n        res = []\n        while curr is not None:\n            res.append(curr)\n            curr = curr.next\n            if curr is not None:\n                curr = curr.next\n            if curr is not None:\n                curr = curr.next\n                curr = curr.next\n                if curr is None:\n                    curr = head\n        res.append(curr)\n        res = res[:k]\n        return res\n\n    def splitListToParts1(self, head: ListNode, k: int) -> List[ListNode]:\n        if k == 1:\n            return [head]\n        if k == 0:\n            return []\n\n        res = []\n        curr = head\n        while curr is not None:\n            res.append(curr)\n            curr = curr.next\n            if curr is not None:\n                curr = curr.next\n            if curr is not None:\n                curr = curr.next\n                curr = curr.next\n                if curr is not None:\n                    curr = curr.next\n        res.append(curr)\n        res = res[:k]\n        return res\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next",
      -4.37109375
    ],
    [
      "class Solution(object):\n    def splitListToParts(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: List[ListNode]\n        \"\"\"\n        res = []\n        if not head or not n:\n            return res\n        if n == 1:\n            res.append(head)\n            return res\n        if n == 2:\n            res.append(head)\n            return res\n        if n == 3:\n            res.append(head)\n            res.append(head.next)\n            return res\n        if n == 4:\n            res.append(head)\n            res.append(head.next)\n            res.append(head.next.next)\n            return res\n        if n == 5:\n            res.append(head)\n            res.append(head.next)\n            res.append(head.next.next)\n            res.append(head.next.next.next)\n            return res\n        if n == 6:\n            res.append(head)\n            res.append(head.next)\n            res.append(head.next.next)\n            res.append(head.next.next.next)\n            res.append(head.next.next.next.next)\n            return res\n        if n == 7:\n            res.append(head)\n            res.append(head.next)\n            res.append(head.next.next)\n            res.append(head.next.next.next)\n            res.append(head.next.next.next.next)\n            res.append(head.next.next.next.next.next)\n            return res\n        if n == 8:\n            res.append(head)\n            res.append(head.next)\n            res.append(head.next.next)\n            res.append(head.next.next.next)\n            res.append(head.next.next.next.next)\n            res.append(head.next.next.next.next.next)\n            return res\n        if n == 9:\n            res.append(head)\n            res.append(head.next)\n            res.append",
      -4.41796875
    ],
    [
      "# Example 1\n# Input: list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 3\n# Output: [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]\n\n# Example 2\n# Input: list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 2\n# Output: [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]\n\n# Example 3\n# Input: list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 10\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Example 4\n# Input: list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n = 1\n# Output: [1]\n\n# Note:\n# The list is already sorted.\n# 1 <= n <= list.length\n\n# TESTS\n\n# test cases:\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100\n\n# SAMPLE INPUT\n# [1, 2, 3, 4",
      -4.68359375
    ],
    [
      "def split_list(list_to_split):\n    '''\n    >>> split_list([1, 2, 3, 4, 5, 6])\n    [[1, 2], [3, 4], [5, 6]]\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200",
      -5.0078125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def splitList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[ListNode]\n        \"\"\"\n        if not head or not head.next:\n            return [head]\n\n        n = 0\n        curr = head\n        while curr:\n            n += 1\n            curr = curr.next\n        \n        result = []\n        curr = head\n        for i in range(1, n):\n            result.append(curr.next)\n            curr = curr.next\n        result.append(curr)\n\n        return result",
      -5.15234375
    ],
    [
      "def split_every_nth(l, n):\n    \"\"\"\n    :type l: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    return [[i] for i in l[:n]] + [l[i:i + n] for i in range(0, len(l), n)] + [[i] for i in l[n::n]]\n\nif __name__ == \"__main__\":\n    assert split_every_nth([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\n    assert split_every_nth([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\n    assert split_every_nth([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [5]]\n    assert split_every_nth([1, 2, 3, 4, 5], 5) == [[1, 2, 3, 4, 5]]",
      -5.17578125
    ],
    [
      "def split_list(lst, n):\n    if n == 1:\n        return lst\n    elif n == 2:\n        return [x for x in lst if x % 2 == 0]\n    elif n == 3:\n        return [x for x in lst if x % 3 == 0]\n    elif n == 4:\n        return [x for x in lst if x % 4 == 0]\n    elif n == 5:\n        return [x for x in lst if x % 5 == 0]\n    elif n == 6:\n        return [x for x in lst if x % 6 == 0]\n    elif n == 7:\n        return [x for x in lst if x % 7 == 0]\n    elif n == 8:\n        return [x for x in lst if x % 8 == 0]\n    elif n == 9:\n        return [x for x in lst if x % 9 == 0]\n    elif n == 10:\n        return [x for x in lst if x % 10 == 0]\n    else:\n        return [x for x in lst if x % n == 0]\n\n# Example\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
      -5.31640625
    ],
    [
      "#!/usr/bin/env python\n\nfrom collections import Counter\n\ndef split(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    n = 2\n    print split(l, n)\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(split(l, n))\n    print Counter(",
      -5.359375
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {integer} n\n    # @return {ListNode}\n    def splitListToParts(self, head, n):\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        pre = dummy\n        while p and p.next and p.next.next:\n            pre = p\n            p = p.next.next\n            if p.next and p.next.next:\n                p = p.next.next\n                n -= 1\n            if n == 0:\n                break\n        if n == 0:\n            return dummy.next\n        while p:\n            pre.next = p.next\n            p.next = p.next.next\n            p = p.next\n            pre = p\n        return dummy.next\n\n\nif __name__ == \"__main__\":\n    l = ListNode(1)\n    l.next = ListNode(2)\n    l.next.next = ListNode(3)\n    l.next.next.next = ListNode(4)\n    l.next.next.next.next = ListNode(5)\n    l.next.next.next.next.next = ListNode(6)\n    l.next.next.next.next.next.next = ListNode(7)\n    l.next.next.next.next.next.next.next = ListNode(8)\n    l.next.next.next.next.next.next.next.next = ListNode(9)\n    l.next.next.next.next.next.next.next.next.next = ListNode(10)\n    l.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    l.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    l.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    l.next.next.next.next.next.next.next.next.next.next.next.next.next = List",
      -5.62109375
    ],
    [
      "from collections import Counter\n\ndef split_every(n, seq):\n    \"\"\"\n    >>> split_every(2, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n    >>> split_every(2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n    >>> split_every(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    >>> split_every(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17]]\n    >>> split_every(2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17]]\n    \"\"\"\n    return [list(seq[i*n : (i+1)*n]) for i in range(len(seq)/n)]\n\ndef count_and_split(seq):\n    \"\"\"\n    >>> count_and_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17]]\n    >>> count_and_split([1, 2,",
      -6.08984375
    ],
    [
      "# https://leetcode.com/problems/split-list-into-k-parts/\nclass Solution(object):\n    def splitIntoKParts(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        for i in range(len(nums)):\n            if i > 0 and i % k == 0:\n                res.append(nums[i-k:])\n                nums = nums[i:]\n            else:\n                nums.append(nums[i])\n        res.append(nums)\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    k = 3\n    res = s.splitIntoKParts(nums, k)\n    for i in range(len(res)):\n        print(res[i])",
      -6.16796875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\tdef splitList(self, head):\n\t\t\"\"\"\n\t\t:type head: ListNode\n\t\t:rtype: List[ListNode]\n\t\t\"\"\"\n\t\tif head == None:\n\t\t\treturn []\n\t\t\n\t\tif head.next == None:\n\t\t\treturn [head]\n\t\t\n\t\tresult = []\n\t\t\n\t\tpre = head\n\t\tcur = head.next\n\t\twhile cur!= None:\n\t\t\tif cur.next == None:\n\t\t\t\tcur = None\n\t\t\telse:\n\t\t\t\tcur = cur.next\n\t\t\t\t\n\t\t\tif cur == None:\n\t\t\t\tresult.append(pre)\n\t\t\t\tpre = head\n\t\t\t\thead = head.next\n\t\t\t\t\n\t\tresult.append(pre)\n\t\t\n\t\treturn result",
      -6.796875
    ],
    [
      "# Approach 1:\n# First, split the list into two lists.\n# Second, split the list into two lists.\n# Third, combine the lists.\n#\n# Approach 2:\n# Loop through the list and split the list into two lists.\n# Then, combine the two lists.\n#\n# Approach 3:\n# Loop through the list and split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n#\n# Approach 4:\n# Loop through the list and split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list into two lists.\n# Then, combine the two lists.\n# Then, split the list",
      -7.16796875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\n\nclass Solution:\n\t# @param head, a ListNode\n\t# @param k, an integer\n\t# @return a ListNode\n\tdef splitListToParts(self, head, k):\n\t\tif head is None or head.next is None:\n\t\t\treturn head\n\n\t\tcurr = head\n\t\twhile curr is not None:\n\t\t\tcurr = curr.next\n\t\t\tk -= 1\n\n\t\t# k = 0\n\t\twhile k > 0:\n\t\t\tcurr = self.splitListToParts(head, k)\n\t\t\thead = curr\n\t\t\tk = 0\n\t\treturn head\n\n\t# @param head, a ListNode\n\t# @param k, an integer\n\t# @return a ListNode\n\tdef splitListToParts2(self, head, k):\n\t\tif head is None:\n\t\t\treturn head\n\n\t\tcurr = head\n\t\twhile curr is not None:\n\t\t\tcurr = curr.next\n\t\t\tk -= 1\n\n\t\tif k == 0:\n\t\t\treturn head\n\n\t\tprev = head\n\t\twhile k > 0:\n\t\t\tcurr = prev.next\n\t\t\tprev = curr\n\t\t\tk -= 1\n\t\treturn curr\n\nif __name__ == \"__main__\":\n\thead = ListNode(1)\n\thead.next = ListNode(2)\n\thead.next.next = ListNode(3)\n\thead.next.next.next = ListNode(4)\n\thead.next.next.next.next = ListNode(5)\n\n\t# print Solution().splitListToParts(head, 3)\n\tprint Solution().splitListToParts2(head, 3)",
      -7.2421875
    ],
    [
      "# Definition for a ListNode.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def splitListToParts(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: List[ListNode]\n        \"\"\"\n        res = []\n        if not head or not head.next:\n            return res\n        \n        curr_node = head\n        curr_node_next = head.next\n        \n        while curr_node:\n            if k > 0:\n                res.append(curr_node)\n                k -= 1\n            curr_node = curr_node_next\n            curr_node_next = curr_node_next.next\n        \n        return res",
      -7.328125
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.geeksforgeeks.org/split-a-list-for-every-nth-element/\n\ndef split_list(lst, n):\n    if n == 1:\n        return lst\n\n    new_lst = []\n    for i in range(len(lst)):\n        if i % n == 0:\n            new_lst.append(lst[i])\n        else:\n            new_lst.append(lst[i])\n\n    return new_lst\n\n# Test Cases\n\nprint(\"Test Case 1:\")\nprint(split_list([1, 2, 3, 4], 2))\nprint(split_list([1, 2, 3, 4], 3))\nprint(split_list([1, 2, 3, 4], 4))\nprint(split_list([1, 2, 3, 4], 5))\n\nprint(\"Test Case 2:\")\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 5))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 6))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 7))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 8))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8], 9))\n\nprint(\"Test Case 3:\")\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))",
      -7.671875
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param head, a list node\n    # @param n, an integer\n    # @return a list of lists of integers\n    def splitListToParts(self, head, n):\n        if not head or not head.next:\n            return []\n        l = []\n        r = []\n        cur = head\n        while cur and n:\n            if n == 1:\n                l.append(cur.val)\n                cur = cur.next\n            else:\n                if cur.left:\n                    cur = cur.left\n                    n -= 1\n                else:\n                    while cur.right and n:\n                        if n == 1:\n                            l.append(cur.val)\n                            cur = cur.right\n                        else:\n                            if cur.right:\n                                cur = cur.right\n                            else:\n                                cur = cur.next\n                            n -= 1\n        if cur:\n            r.append(cur.val)\n        return l + r",
      -8.6484375
    ],
    [
      "# https://leetcode.com/problems/split-list-into-even-sized-parts/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def splitList(self, head: ListNode) -> ListNode:\n        if not head:\n            return head\n\n        count = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            count += 1\n\n        if count % 2 == 1:\n            return self.splitList(head)\n\n        head2 = ListNode(0)\n        head2.next = head\n        curr = head\n        while curr:\n            next = curr.next\n            if count % 2 == 0:\n                curr.next = head2\n                head2.next = next\n            else:\n                head2.next = next\n            count -= 1\n            curr = next\n\n        return head2",
      -8.9375
    ],
    [
      "def split_list(my_list, n):\n    \"\"\"\n    :type my_list: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(len(my_list)):\n        if i % n == 0:\n            result.append(my_list[i:i + n])\n        else:\n            result.append(my_list[i:])\n    return result\n\nif __name__ == '__main__':\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print split_list([1, 2, 3, 4, 5, 6",
      -8.9609375
    ],
    [
      "# https://oj.leetcode.com/problems/split-a-string-into-parts/\n\n\nclass Solution(object):\n    def splitIntoParts(self, s, n):\n        \"\"\"\n        :type s: str\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        if len(s) == 0:\n            return []\n        if n == 1:\n            return [s]\n        if n == 2:\n            return [s[0:1], s[1:2]]\n        if n == 3:\n            return [s[0:2], s[2:3], s[3:]]\n        if n == 4:\n            return [s[0:3], s[3:4], s[4:]]\n        if n == 5:\n            return [s[0:4], s[4:5], s[5:]]\n        if n == 6:\n            return [s[0:5], s[5:6], s[6:]]\n        if n == 7:\n            return [s[0:6], s[6:7], s[7:]]\n        if n == 8:\n            return [s[0:7], s[7:8], s[8:]]\n        if n == 9:\n            return [s[0:8], s[8:9], s[9:]]\n        if n == 10:\n            return [s[0:9], s[9:10], s[10:]]\n        if n == 11:\n            return [s[0:10], s[10:11], s[11:]]\n        if n == 12:\n            return [s[0:11], s[11:12], s[12:]]\n        if n == 13:\n            return [s[0:12], s[12:13], s[13:]]\n        if n == 14:\n            return [s[0:13], s[13:14], s[14:]]\n        if n == 15:\n            return [s[0:14], s[14:15], s[15:]]\n        if n == 16:\n            return [s[0:15], s[15:16",
      -9.0234375
    ],
    [
      "from collections import deque\n\n\nclass Solution(object):\n    def splitListToParts(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: List[ListNode]\n        \"\"\"\n        result = []\n        if head is None:\n            return result\n        q = deque([head])\n        for i in range(0, k):\n            node = q.popleft()\n            result.append(node)\n        while q:\n            node = q.popleft()\n            if len(q) < k:\n                result.append(node)\n            else:\n                next_node = q.popleft()\n                node.next = next_node\n                q.append(next_node)\n        return result\n\n\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\ndef main():\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n\n    print Solution().splitListToParts(head, 2)\n    print Solution().splitListToParts(head, 3)\n    print Solution().splitListToParts(head, 4)\n    print Solution().splitList",
      -10.3359375
    ],
    [
      "def splitList(list, n):\n    if len(list) == 0:\n        return []\n    if n == 1:\n        return [list[0]]\n    if n == 2:\n        return [list[0], list[1]]\n    if n == 3:\n        return [list[0], list[1], list[2]]\n    for i in range(1, len(list) - n + 1):\n        if i == 1:\n            return [list[0], list[i]]\n        if i == 2:\n            return [list[0], list[i], list[i + 1]]\n        if i == 3:\n            return [list[0], list[i], list[i + 1], list[i + 2]]\n        if i == 4:\n            return [list[0], list[i], list[i + 1], list[i + 2], list[i + 3]]\n        if i == 5:\n            return [list[0], list[i], list[i + 1], list[i + 2], list[i + 3], list[i + 4]]\n        if i == 6:\n            return [list[0], list[i], list[i + 1], list[i + 2], list[i + 3], list[i + 4], list[i + 5]]\n        if i == 7:\n            return [list[0], list[i], list[i + 1], list[i + 2], list[i + 3], list[i + 4], list[i + 5], list[i + 6]]\n        if i == 8:\n            return [list[0], list[i], list[i + 1], list[i + 2], list[i + 3], list[i + 4], list[i + 5], list[i + 6], list[i + 7]]\n        if i == 9:\n            return [list[0], list[i], list[i + 1], list[i + 2], list[i + 3], list[i + 4], list[i + 5], list[i + 6], list[i + 7], list[i + 8]]\n        if i == 10:\n            return [list[0], list[i], list[i + 1], list[",
      -11.328125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def splitList(self, head: ListNode, k: int) -> ListNode:\n        dummy = ListNode(0)\n        dummy.next = head\n        node = dummy\n        pre = dummy\n        while node:\n            if node.val % k == 0:\n                pre.next = node.next\n                node.next = None\n            else:\n                pre = node\n            node = node.next\n        return dummy.next\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    print(sol.splitList(head, 2))",
      -11.8203125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def splitListToParts(self, head: ListNode, n: int) -> List[ListNode]:\n        if head is None:\n            return []\n        if head.next is None:\n            return [head]\n        if n == 1:\n            return [head]\n        if n == 2:\n            return [head, head.next]\n        if n == 3:\n            return [head, head.next, head.next.next]\n        res = []\n        cur = head\n        for i in range(1, n + 1):\n            cur = cur.next\n            res.append(cur)\n        return res\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    print(Solution().splitListToParts(head, 3))",
      -12.1015625
    ],
    [
      "# https://leetcode.com/problems/split-a-list-every-nth-element/discuss/91939/Python-O(n)-Java-O(n)-C#\n\n# My 1st attempt\nclass Solution:\n    # @param head, a list node\n    # @param k, an integer\n    # @return a list of list node\n\n    def splitList(self, head, k):\n        # write your code here\n        if head is None:\n            return None\n        if head.next is None:\n            return [head]\n        elif head.next is not None:\n            ans = []\n            cur = head\n            while cur is not None:\n                ans.append(cur)\n                if cur.next is None:\n                    break\n                cur = cur.next\n            ans.append(head.next)\n            for i in range(k - 1):\n                cur = head\n                while cur is not None:\n                    ans.append(cur)\n                    cur = cur.next\n            ans.append(head.next)\n            return ans\n        else:\n            return [head]\n\n# My 2nd attempt\nclass Solution:\n    # @param head, a list node\n    # @param k, an integer\n    # @return a list of list node\n\n    def splitList(self, head, k):\n        # write your code here\n        if head is None:\n            return None\n        if head.next is None:\n            return [head]\n        elif head.next is not None:\n            ans = []\n            cur = head\n            while cur is not None:\n                ans.append(cur)\n                if cur.next is None:\n                    break\n                cur = cur.next\n            ans.append(head.next)\n            for i in range(k - 1):\n                cur = head\n                while cur is not None:\n                    ans.append(cur)\n                    cur = cur.next\n            ans.append(head.next)\n            return ans\n        else:\n            return [head]",
      -12.3984375
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @param n, an integer\n    # @return a list of tree node\n    def splitList(self, root, n):\n        res = []\n        if root is None:\n            return res\n        if root.left is None and root.right is None:\n            res.append(root)\n            return res\n        if root.left is not None:\n            res = self.splitList(root.left, n)\n        if root.right is not None:\n            res = self.splitList(root.right, n)\n        res.append(root)\n        return res\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.left.left = TreeNode(3)\nroot.left.right = TreeNode(4)\nroot.left.right.left = TreeNode(5)\nroot.right = TreeNode(6)\nroot.right.right = TreeNode(7)\nroot.right.right.right = TreeNode(8)\n\ns = Solution()\nprint(s.splitList(root, 2))",
      -14.328125
    ],
    [
      "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @param n, an integer\n    # @return a list of tree node\n    def splitList(self, root, n):\n        return self.split_helper(root, 0, n - 1)\n        \n    def split_helper(self, root, start, end):\n        if root is None:\n            return []\n        if start == end:\n            return [root]\n        \n        left_child = self.split_helper(root.left, start, end - 1)\n        right_child = self.split_helper(root.right, start + 1, end)\n        \n        ret = []\n        for node in left_child:\n            ret.append(root)\n            root = node\n        for node in right_child:\n            root.left = node\n            root = node\n        return ret\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print Solution().splitList(root, 2)",
      -15.1640625
    ],
    [
      "class Solution:\n    # @param nums: A list of integer\n    # @param k: An integer\n    # @return: The list of lists after split\n    def splitIntoLists(self, nums, k):\n        if not nums:\n            return []\n        ret = []\n        cur_len = 0\n        cur_num = 0\n        for i in range(len(nums)):\n            cur_num += nums[i]\n            cur_len += 1\n            if cur_len == k:\n                ret.append([])\n                cur_len = 0\n                cur_num = 0\n            else:\n                ret[-1].append(cur_num)\n                cur_num = 0\n        return ret\n\n# test\n# k = 3\n# nums = [1,2,3,4,5,6,7,8,9,10]\n# ret = [[1,2,3], [4,5,6], [7,8,9], [10]]\n# ret = [[1,2,3,4,5], [6,7,8,9,10]]\n# ret = [[1,2,3], [4,5,6], [7,8,9], [10]]\n# ret = [[1,2,3], [4,5,6,7], [8,9,10]]\n# ret = [[1,2,3], [4,5,6,7,8], [9,10]]\n# ret = [[1,2,3,4], [5,6,7,8], [9,10]]\n# ret = [[1,2,3,4], [5,6,7,8,9], [10]]\n# ret = [[1,2,3,4,5], [6,7,8,9,10]]\n# ret = [[1,2,3,4,5,6], [7,8,9,10]]\n# ret = [[1,2,3,4,5,6,7], [8,9,10]]\n# ret = [[1,2,3,4,5,6,7,8], [9,10]]\n# ret = [[1,2,3,",
      -15.1796875
    ],
    [
      "from collections import deque\n\n\nclass Solution(object):\n    def splitList(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        res = deque()\n        cur = head\n        while cur:\n            res.append(cur)\n            cur = cur.next\n            if len(res) % k == 0:\n                cur = cur.next\n        return res.popleft()\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, None))))))\n    k = 3\n    s = Solution()\n    print s.splitList(head, k)\n    print s.splitList(head, 4)\n    print s.splitList(head, 5)",
      -15.234375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}