{
  "problem": {
    "task_id": "MBPP/249",
    "prompt": "Write a function to find the intersection of two arrays using lambda function.",
    "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
    "test_list": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ],
    "challenge_test_list": [],
    "problem_id": 238
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def intersection(array1, array2):\n    # write your code here\n    return [i for i in array1 if i in array2]\n\n\ndef intersection_lambda(array1, array2):\n    # write your code here\n    return [i for i in array1 if i in array2]\n\n\ndef intersection_lambda2(array1, array2):\n    # write your code here\n    return [i for i in array1 if i in array2]\n\n\ndef intersection_lambda3(array1, array2):\n    # write your code here\n    return [i for i in array1 if i in array2]\n\n\ndef intersection_lambda4(array1, array2):\n    # write your code here\n    return [i for i in array1 if i in array2]\n\n\ndef intersection_lambda5(array1, array2):\n    # write your code here\n    return [i for i in array1 if i in array2]\n\n\nif __name__ == \"__main__\":\n    array1 = [1, 2, 3]\n    array2 = [2, 4, 5]\n    print(intersection(array1, array2))\n    print(intersection_lambda(array1, array2))\n    print(intersection_lambda2(array1, array2))\n    print(intersection_lambda3(array1, array2))\n    print(intersection_lambda4(array1, array2))\n    print(intersection_lambda5(array1, array2))",
      11.3203125
    ],
    [
      "def intersection(arr1, arr2):\n    \"\"\"\n    Given two arrays, return an array with the elements that are in both arrays.\n\n    Example\n    Given arr1 = [1, 3, 5, 7], arr2 = [2, 4, 6, 8], the output should be\n    [2, 4, 6]\n    \"\"\"\n    return [item for item in arr1 if item in arr2]\n\ndef intersection2(arr1, arr2):\n    \"\"\"\n    Given two arrays, return an array with the elements that are in both arrays.\n\n    Example\n    Given arr1 = [1, 3, 5, 7], arr2 = [2, 4, 6, 8], the output should be\n    [2, 4, 6]\n    \"\"\"\n    return list(set(arr1) & set(arr2))\n\nif __name__ == \"__main__\":\n    arr1 = [1, 3, 5, 7]\n    arr2 = [2, 4, 6, 8]\n    print(intersection(arr1, arr2))\n    print(intersection2(arr1, arr2))",
      9.0625
    ],
    [
      "# https://www.hackerrank.com/challenges/intersection-of-two-arrays/problem\n\ndef intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\nif __name__ == '__main__':\n    arr1 = [1,2,3,4,5,6,7,8,9,10,11,12]\n    arr2 = [1,2,3,4,5,6,7,8]\n    print(intersection(arr1, arr2))",
      6.45703125
    ],
    [
      "import random\nimport math\n\ndef intersection(a, b):\n    intersection = set(a).intersection(b)\n    intersection_size = len(intersection)\n    if intersection_size == 0:\n        return None\n    elif intersection_size == 1:\n        return list(intersection)[0]\n    else:\n        return list(intersection)\n\nprint(intersection([1, 2, 3], [2, 3, 4]))\nprint(intersection([1, 2, 3], [2, 3, 5]))\n\nrandom.seed(0)\n\ndef intersection(a, b):\n    intersection = set(a).intersection(b)\n    intersection_size = len(intersection)\n    if intersection_size == 0:\n        return None\n    elif intersection_size == 1:\n        return list(intersection)[0]\n    else:\n        return list(intersection)\n\nprint(intersection([1, 2, 3], [2, 3, 4]))\nprint(intersection([1, 2, 3], [2, 3, 5]))",
      6.125
    ],
    [
      "def intersection(a, b):\n    \"\"\"\n    :type a: list[int]\n    :type b: list[int]\n    :rtype: list[int]\n    \"\"\"\n    return [x for x in a if x in b]\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 4]\n    c = [2, 3, 4, 5]\n    d = [2, 3, 4, 5, 6]\n    e = [1, 2, 3]\n\n    print(intersection(a, b))\n    print(intersection(a, c))\n    print(intersection(a, d))\n    print(intersection(a, e))\n\n    print(intersection(b, c))\n    print(intersection(b, d))\n    print(intersection(b, e))\n\n    print(intersection(c, d))\n    print(intersection(c, e))",
      5.51953125
    ],
    [
      "def find_intersection(first, second):\n    return [item for item in first if item in second]\n\nprint(find_intersection([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nprint(find_intersection([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7]))\nprint(find_intersection([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10]))",
      5.33203125
    ],
    [
      "def find_intersection(arr1, arr2):\n    \"\"\"\n    Input:\n        arr1: array\n        arr2: array\n    Output:\n        intersection: array\n    \"\"\"\n    intersection = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                intersection.append(arr2[j])\n    return intersection\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [2, 3, 4]\n    intersection = find_intersection(arr1, arr2)\n    print(intersection)",
      4.22265625
    ],
    [
      "# https://stackoverflow.com/questions/35477903/find-the-intersection-of-two-arrays-using-lambda-function\ndef intersection(a, b):\n    return [x for x in a if x in b]\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [2, 4, 6, 8]\n    intersection(a, b)",
      3.849609375
    ],
    [
      "def intersection(a, b):\n    \"\"\"\n    Find the intersection of two arrays.\n    :param a: An array\n    :param b: An array\n    :return: A list of integers\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return []\n    return [x for x in a if x in b]",
      3.791015625
    ],
    [
      "def intersection(arr1, arr2):\n    # write your code here\n    if len(arr1) == 0 or len(arr2) == 0:\n        return []\n    inter = []\n    for i in range(0, len(arr1)):\n        if arr1[i] in arr2:\n            inter.append(arr1[i])\n    return inter\n\n\n\n# Your code here\n# https://github.com/codecraft/LeetCode/blob/master/array.py",
      3.650390625
    ],
    [
      "def intersection(arr1, arr2):\n    \"\"\"\n    Input: arr1 and arr2 are two arrays.\n    Return: The intersection of arr1 and arr2.\n    \"\"\"\n    return [x for x in arr1 if x in arr2]\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3]\n    arr2 = [2, 3, 4]\n    result = intersection(arr1, arr2)\n    print result",
      3.322265625
    ],
    [
      "def intersection(arr1, arr2):\n    return [i for i in arr1 if i in arr2]\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [1, 2, 5, 7, 8]\n    print(intersection(arr1, arr2))",
      3.283203125
    ],
    [
      "def find_intersection(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in arr1 if x in arr2]\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [1, 3, 5, 7]\n\n    print(find_intersection(arr1, arr2))",
      3.2265625
    ],
    [
      "from functools import reduce\n\ndef find_intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [4, 5, 6, 7]\n    print(find_intersection(arr1, arr2))",
      3.20703125
    ],
    [
      "def intersection(arr1, arr2):\n    return [x for x in arr1 if x in arr2]\n\narr1 = [1, 2, 3, 4, 5, 6]\narr2 = [4, 5, 6, 7, 8, 9]\n\nprint(intersection(arr1, arr2))",
      2.6875
    ],
    [
      "def intersection(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [i for i in a if i in b]\n\n# Your Solution here\n\n# Test cases\n\na = [1, 2, 3]\nb = [1, 2, 3]\n\n# Test Case 1\nprint(intersection(a, b))\n\n# Test Case 2\na = [1, 2, 4]\nb = [1, 2, 3]\n\n# Test Case 3\nprint(intersection(a, b))",
      2.115234375
    ],
    [
      "def intersection(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return filter(lambda x: x in a and x in b, range(len(a)))\n\n# Your Solution here.\n\nclass Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return filter(lambda x: x in nums1 and x in nums2, range(len(nums1)))",
      1.8037109375
    ],
    [
      "#!/usr/bin/env python\n\n# Complete the intersection function below.\ndef intersection(a, b):\n    result = []\n    for i in a:\n        if i in b:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    print intersection([1, 2, 3], [2, 4, 6])",
      1.615234375
    ],
    [
      "import unittest\n\n\ndef intersection(arr1, arr2):\n    return [i for i in arr1 if i in arr2]\n\n\nclass Test(unittest.TestCase):\n    def test_non_intersection(self):\n        arr1 = [1, 2]\n        arr2 = [1, 3]\n        self.assertEqual(intersection(arr1, arr2), [])\n\n    def test_intersection(self):\n        arr1 = [1, 2, 3, 4, 5, 6]\n        arr2 = [1, 2, 3, 4]\n        self.assertEqual(intersection(arr1, arr2), [1, 2, 3, 4])\n\n\nif __name__ == '__main__':\n    unittest.main()",
      0.9873046875
    ],
    [
      "def intersection(a, b):\n    \"\"\"\n    :type a: list[int]\n    :type b: list[int]\n    :rtype: list[int]\n    \"\"\"\n    return [x for x in a if x in b]\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3], [2, 3, 4]))",
      0.9052734375
    ],
    [
      "def intersection(arr1, arr2):\n    return [x for x in arr1 if x in arr2]\n\n\n# Your code here\narr1 = [1, 2, 3, 4, 5, 6]\narr2 = [1, 2, 3, 4, 5]\n\nprint(intersection(arr1, arr2))",
      0.8662109375
    ],
    [
      "#!/bin/python\n\ndef intersection(x,y):\n    \"\"\"\n    Input:\n    x: A list of integers\n    y: A list of integers\n    Output:\n    The intersection of x and y\n    \"\"\"\n\n    return list(set(x).intersection(set(y)))\n\n# Test cases\n\nx = [1,2,3,4,5]\ny = [1,2,3]\n\nprint intersection(x,y)\n\nx = [1,2,3,4,5]\ny = [1,2,3]\n\nprint intersection(x,y)\n\nx = [1,2,3,4,5]\ny = [1,2,3,4]\n\nprint intersection(x,y)\n\nx = [1,2,3,4,5]\ny = [1,2,3,4,5]\n\nprint intersection(x,y)",
      0.85595703125
    ],
    [
      "class Solution:\n    # @return a list of lists of length 2, [[x1,y1], [x2,y2]]\n    def twoIntersections(self, A, B):\n        ans = []\n        for i in A:\n            for j in B:\n                if i[0] == j[0] and i[1] == j[1]:\n                    ans.append([i[0], i[1]])\n        return ans",
      0.84326171875
    ],
    [
      "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [lambda x,y: x if x in nums1 and y in nums2 else None for x in nums1 for y in nums2]\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.intersect([1,2,2,2,3], [1,3,5,7,9])",
      0.6328125
    ],
    [
      "def intersection(array1, array2):\n    \"\"\"\n    :type array1: list[int]\n    :type array2: list[int]\n    :rtype: list[int]\n    \"\"\"\n    return [i for i in array1 if i in array2]\n\n\nif __name__ == '__main__':\n    array1 = [1, 2, 3, 4]\n    array2 = [2, 3, 5, 6]\n    print(intersection(array1, array2))",
      0.5380859375
    ],
    [
      "def intersection(arr1, arr2):\n    \"\"\"\n    Input:\n        arr1: A list of integers\n        arr2: A list of integers\n    Output:\n        The intersection of arr1 and arr2.\n    Explanation:\n        The intersection of arr1 and arr2 is the list of all numbers that are both in arr1 and arr2.\n        In other words, the intersection of arr1 and arr2 is the list of numbers that are in both arr1 and arr2.\n    \"\"\"\n    intersection_list = []\n    for i in range(len(arr1)):\n        if arr1[i] in arr2:\n            intersection_list.append(arr1[i])\n    return intersection_list\n\nif __name__ == \"__main__\":\n    arr1 = [1,2,3,4,5]\n    arr2 = [3,5,6]\n    print(intersection(arr1, arr2))",
      0.39013671875
    ],
    [
      "# https://www.hackerrank.com/challenges/arrays-and-lambda/problem\n\n# Complete the intersection function below.\ndef intersection(array1, array2):\n    return [item for item in array1 if item in array2]\n\nif __name__ == '__main__':\n    array1 = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9]\n    array2 = [2, 5, 7, 8, 9, 11]\n    intersection_result = intersection(array1, array2)\n    print(intersection_result)",
      0.371337890625
    ],
    [
      "def intersection(array1, array2):\n    return [i for i in array1 if array2.count(i) > 0]\n\nif __name__ == \"__main__\":\n    array1 = [1, 2, 3, 4, 5]\n    array2 = [3, 4]\n    intersection(array1, array2)",
      0.0546875
    ],
    [
      "# https://www.hackerrank.com/challenges/arrays-and-lambda-functions/problem\n\ndef intersection(array1, array2):\n    \"\"\"\n    :type array1: list[int]\n    :type array2: list[int]\n    :rtype: list[int]\n    \"\"\"\n    return [x for x in array1 if x in array2]\n\nif __name__ == '__main__':\n    array1 = [1,2,3]\n    array2 = [4,5,6]\n    print(intersection(array1, array2))",
      -0.10650634765625
    ],
    [
      "import math\n\ndef intersect(a, b):\n    \"\"\"\n    :type a: list\n    :type b: list\n    :rtype: list\n    \"\"\"\n    c = []\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                c.append(a[i])\n    return c\n\ndef main():\n    a = [1, 2, 3, 4]\n    b = [2, 3, 4, 5]\n    c = intersect(a, b)\n    print(c)\n\nif __name__ == '__main__':\n    main()",
      -0.1524658203125
    ],
    [
      "import collections\n\ndef intersection(arr1, arr2):\n    \"\"\"\n    arr1 and arr2 are two arrays of the same length.\n    Return the indices of the intersection of arr1 and arr2.\n    \"\"\"\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    return [i for i, j in collections.Counter(arr1).items() if j in arr2]",
      -0.326904296875
    ],
    [
      "import unittest\n\ndef intersection(a, b):\n    return [x for x in a if x in b]\n\nclass TestIntersection(unittest.TestCase):\n    def test_intersection(self):\n        self.assertEqual(intersection([1,2,3,4], [3,4,5,6]), [3])\n        self.assertEqual(intersection([1,2,3,4], [1,3,5,6]), [3])\n        self.assertEqual(intersection([1,2,3,4], [1,3,5,7]), [3])\n        self.assertEqual(intersection([1,2,3,4], [1,2,3,5]), [])\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.361572265625
    ],
    [
      "from __future__ import print_function\n\nimport sys\n\n# https://www.hackerrank.com/challenges/arrays-and-lambda-functions\n\ndef intersection(a, b):\n    return [i for i in a if i in b]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    print(intersection(a, b))",
      -0.61767578125
    ],
    [
      "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        return [nums1[i] for i in range(len(nums1)) if nums2.count(nums1[i]) > 0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.intersect([1,3,5,6], [1,2,4,5,6,8])",
      -0.6865234375
    ],
    [
      "from itertools import product\n\ndef intersection(array1, array2):\n    return list(filter(lambda x: x in array1, array2))\n\ndef test():\n    assert intersection(range(3), range(3)) == [0, 1, 2]\n    assert intersection(range(4), range(5)) == []\n\nif __name__ == '__main__':\n    test()",
      -0.85693359375
    ],
    [
      "def intersection(arr1, arr2):\n    return [x for x in arr1 if x in arr2]\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4]\n    arr2 = [3, 4, 5, 6]\n\n    print(intersection(arr1, arr2))",
      -0.85693359375
    ],
    [
      "def intersection(arr1, arr2):\n    intersect = []\n    for a in arr1:\n        if a in arr2:\n            intersect.append(a)\n    return intersect\n\nprint(intersection([1, 2, 3], [2, 3, 4]))",
      -0.85693359375
    ],
    [
      "# A simple example to illustrate the use of lambda function\ndef intersection(a, b):\n    return [i for i in a if i in b]\n\nprint(intersection([1,2,3,4,5], [2,3,5,6,7]))",
      -0.85791015625
    ],
    [
      "def intersection(arr1, arr2):\n    return [i for i in arr1 if i in arr2]\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [3, 4, 5, 6]\n    print(intersection(arr1, arr2))",
      -0.85791015625
    ],
    [
      "def find_intersection(a, b):\n    return [i for i in a if i in b]\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [2, 4, 5, 6]\n    print(find_intersection(a, b))",
      -0.85791015625
    ],
    [
      "def intersection(a, b):\n    return list(filter(lambda x: x in a and x in b, range(len(a))))\n\nif __name__ == \"__main__\":\n    a = [1, 3, 5, 6, 7, 8, 9]\n    b = [2, 4, 6, 8, 10]\n    print(intersection(a, b))",
      -0.85791015625
    ],
    [
      "def intersection(arr1, arr2):\n    result = []\n    for i in range(len(arr1)):\n        if arr1[i] in arr2:\n            result.append(arr1[i])\n    return result\n\nif __name__ == '__main__':\n    arr1 = [1,2,3,4,5]\n    arr2 = [2,3,4,5,6]\n    print(intersection(arr1, arr2))",
      -0.85791015625
    ],
    [
      "def intersection(A, B):\n    \"\"\"\n    Returns the intersection of two arrays.\n\n    Inputs:\n    A = [1, 2, 3]\n    B = [1, 2, 3, 5]\n\n    Output:\n    [1, 2, 3]\n    \"\"\"\n    result = []\n\n    for i in A:\n        if i in B:\n            result.append(i)\n\n    return result\n\nprint(intersection([1, 2, 3], [1, 2, 3, 5]))",
      -0.8583984375
    ],
    [
      "def intersection(array1, array2):\n    \"\"\"\n    Input:\n    array1 = [1, 2, 3]\n    array2 = [1, 2, 3]\n    Output:\n    intersection = [1, 2]\n    \"\"\"\n    return [item for item in array1 if item in array2]\n\nif __name__ == \"__main__\":\n    array1 = [1, 2, 3]\n    array2 = [1, 2, 3]\n    intersection(array1, array2)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        result = []\n        for i in range(len(nums1)):\n            if nums1[i] in nums2:\n                result.append(nums1[i])\n        return result\n\nif __name__ == '__main__':\n    nums1 = [1,2,3]\n    nums2 = [2,3,4]\n    print(Solution().intersect(nums1, nums2))",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\ndef find_intersection(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [i for i in arr1 if i in arr2]\n\nif __name__ == \"__main__\":\n    arr1 = [1,2,3]\n    arr2 = [2,3,4]\n    print find_intersection(arr1, arr2)",
      -0.8583984375
    ],
    [
      "def intersection(a, b):\n    \"\"\"\n    Input: a list of numbers and a list of numbers.\n\n    Output: the intersection of two lists.\n    \"\"\"\n    intersection = []\n    for i in range(len(a)):\n        if i in b:\n            intersection.append(a[i])\n    return intersection\n\nprint(intersection([1, 2, 3], [1, 2]))",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/two-arrays-intersection/problem\n\ndef find_intersection(arr1, arr2):\n    intersection = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                intersection.append(arr1[i])\n                break\n    return intersection\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3]\n    arr2 = [1, 2, 3, 4]\n    print(find_intersection(arr1, arr2))",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/two-arrays/problem\n\ndef intersection(arr1, arr2):\n    return filter(lambda x: x in arr1, arr2)\n\narr1 = [1,2,3,4,5]\narr2 = [1,3,5]\n\nprint(intersection(arr1, arr2))",
      -0.8583984375
    ],
    [
      "import time\n\nstart = time.time()\n\ndef find_intersection(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in arr1 if x in arr2]\n\nprint(time.time() - start)",
      -0.8583984375
    ],
    [
      "import random\n\n\ndef intersection_of_arrays(first_array, second_array):\n    result = []\n    for i in first_array:\n        if i in second_array:\n            result.append(i)\n    return result\n\n\ndef test():\n    arrays = [range(1, 10), range(10, 20), range(20, 30)]\n    random.shuffle(arrays)\n    print(intersection_of_arrays(arrays[0], arrays[1]))\n    print(intersection_of_arrays(arrays[0], arrays[2]))\n\n\nif __name__ == \"__main__\":\n    test()",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @return {integer[]}\n    def findIntersection(self, nums1, nums2):\n        n = len(nums1)\n        m = len(nums2)\n        if n > m:\n            return self.findIntersection(nums2, nums1)\n        else:\n            if n == 0 or m == 0:\n                return []\n            ret = []\n            for i in range(0, n):\n                for j in range(0, m):\n                    if nums1[i] == nums2[j] and i!= j:\n                        ret.append(nums1[i])\n            return ret",
      -0.85888671875
    ],
    [
      "def intersection(arr1, arr2):\n    \"\"\"\n    arr1 and arr2 are both lists of integers.\n    Returns the intersection of arr1 and arr2 as a list of integers.\n    \"\"\"\n    return [i for i in arr1 if i in arr2]\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [1, 2, 3, 4, 5]\n    intersection(arr1, arr2)\n    arr2 = [1, 2, 3, 4, 5, 6, 7]\n    intersection(arr1, arr2)\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8]\n    intersection(arr1, arr2)",
      -0.85888671875
    ],
    [
      "def intersection(a, b):\n    return [item for item in a if item in b]\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4]\n    b = [3, 4, 5, 6]\n    print(intersection(a, b))",
      -0.86083984375
    ],
    [
      "#!/usr/bin/env python\n\ndef intersection(arr1, arr2):\n    \"\"\"\n    Return the intersection of two arrays.\n    \"\"\"\n    return filter(lambda x: x in arr1 and x in arr2, arr1)\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [2, 4]\n    print(intersection(arr1, arr2))",
      -0.86083984375
    ],
    [
      "def intersection(a, b):\n    return [i for i in a if i in b]\n\nif __name__ == '__main__':\n    a = [1,2,3,4,5]\n    b = [3,5,7]\n    intersection(a,b)\n\n    a = [1,2,3,4,5]\n    b = [2,3,4,5,6]\n    intersection(a,b)",
      -0.86083984375
    ],
    [
      "def intersection(arr1, arr2):\n    return [i for i in range(len(arr1)) if arr1[i] in arr2]\n\narr1 = [1, 2, 3, 4]\narr2 = [2, 4, 5, 6]\n\nprint(intersection(arr1, arr2))",
      -0.86083984375
    ],
    [
      "from typing import List\n\ndef intersection(a: List[int], b: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n\n    Example:\n    Given two arrays:\n        [1, 2, 2, 1]\n        [2, 2]\n\n    The function should return the following array:\n        [2, 2]\n    \"\"\"\n\n    def intersection(a: List[int], b: List[int]) -> List[int]:\n        return [x for x in a if x in b]\n\n    return intersection(a, b)",
      -0.86083984375
    ],
    [
      "import numpy as np\n\ndef intersection(a, b):\n    if len(a) == 0 or len(b) == 0:\n        return []\n    else:\n        return list(filter(lambda x: x in b, a))\n\na = [1, 2, 3, 4, 5]\nb = [2, 3, 4]\n\nresult = intersection(a, b)\nprint(result)",
      -0.86083984375
    ],
    [
      "# -*- coding: utf-8 -*-\n\nimport math\n\ndef intersect(A, B):\n    \"\"\"\n    Find the intersection of two arrays using lambda function.\n    :param A: list\n    :param B: list\n    :return: list\n    \"\"\"\n    intersection = []\n    for i in A:\n        for j in B:\n            if i == j:\n                intersection.append(i)\n    return intersection\n\n\ndef intersect2(A, B):\n    \"\"\"\n    Find the intersection of two arrays using lambda function.\n    :param A: list\n    :param B: list\n    :return: list\n    \"\"\"\n    intersection = []\n    for i in A:\n        if i in B:\n            intersection.append(i)\n    return intersection\n\n\ndef intersect3(A, B):\n    \"\"\"\n    Find the intersection of two arrays using lambda function.\n    :param A: list\n    :param B: list\n    :return: list\n    \"\"\"\n    intersection = []\n    for i in A:\n        for j in B:\n            if i == j:\n                intersection.append(i)\n    return intersection\n\n\ndef intersect4(A, B):\n    \"\"\"\n    Find the intersection of two arrays using lambda function.\n    :param A: list\n    :param B: list\n    :return: list\n    \"\"\"\n    intersection = []\n    for i in A:\n        for j in B:\n            if i == j:\n                intersection.append(i)\n    return intersection\n\n\ndef intersect5(A, B):\n    \"\"\"\n    Find the intersection of two arrays using lambda function.\n    :param A: list\n    :param B: list\n    :return: list\n    \"\"\"\n    intersection = []\n    for i in A:\n        for j in B:\n            if i == j:\n                intersection.append(i)\n    return intersection\n\n\ndef intersect6(A, B):\n    \"\"\"\n    Find the intersection of two arrays using lambda function.\n    :param A: list\n    :param B: list\n    :return: list\n    \"\"\"\n    intersection = []\n    for i in A:",
      -0.873046875
    ],
    [
      "#!/bin/python\n\ndef findIntersection(array1, array2):\n    intersection = []\n\n    for i in array1:\n        for j in array2:\n            if i == j:\n                intersection.append(i)\n\n    return intersection\n\narray1 = [1, 2, 2, 3]\narray2 = [1, 3, 4]\n\nprint findIntersection(array1, array2)",
      -0.87841796875
    ],
    [
      "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return list(filter(lambda x: x in nums1, nums2))",
      -0.91015625
    ],
    [
      "# https://www.hackerrank.com/challenges/array-intersection-ii/problem\n\n# Complete the intersection function below.\ndef intersection(a, b):\n    return [x for x in a if x in b]\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6]\n    b = [3, 4, 5]\n    print(intersection(a, b))",
      -0.9189453125
    ],
    [
      "# https://www.hackerrank.com/challenges/intersection-of-two-arrays/problem\n\n# My solution\ndef intersection(arr1, arr2):\n    return [i for i in range(len(arr1)) if arr1[i] in arr2]\n\n# Time Complexity: O(m+n)\n# Space Complexity: O(m+n)\n\n# My solution:\ndef intersection(arr1, arr2):\n    return [i for i in range(len(arr1)) if arr1[i] in arr2]",
      -0.98681640625
    ],
    [
      "#!/usr/bin/env python\n\nimport numpy as np\n\ndef intersection(arr1, arr2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    return [i for i in arr1 if i in arr2]\n\narr1 = [1, 2, 3, 4]\narr2 = [3, 2, 1]\n\nprint(intersection(arr1, arr2))",
      -1.0048828125
    ],
    [
      "import time\n\nstart = time.time()\n\ndef intersection(a, b):\n    return [x for x in a if x in b]\n\nprint(intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\n\nprint(time.time() - start)",
      -1.12109375
    ],
    [
      "from collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y'])\n\n\ndef intersection(a, b):\n    # TODO: write your code here\n    return sorted(filter(lambda x: x[0] < x[1], zip(a, b)))\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nif __name__ == \"__main__\":\n    a = [Point(1, 2), Point(3, 4), Point(3, 6)]\n    b = [Point(1, 3), Point(5, 6), Point(1, 2)]\n    print(intersection(a, b))",
      -1.1376953125
    ],
    [
      "# https://www.hackerrank.com/challenges/lambda-intersection-arrays/problem\n\ndef lambda_intersection(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    intersect = []\n\n    for i in range(len(arr1)):\n        if arr1[i] in arr2:\n            intersect.append(arr1[i])\n\n    return intersect\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [2, 4, 6, 8]\n    arr3 = lambda_intersection(arr1, arr2)\n    print arr3",
      -1.1455078125
    ],
    [
      "def intersection(first, second):\n    \"\"\"\n    :type first: list[int]\n    :type second: list[int]\n    :rtype: list[int]\n    \"\"\"\n    return [item for item in first if item in second]\n\nif __name__ == \"__main__\":\n    assert intersection([1,2,3,4], [1,2]) == [1,2]\n    assert intersection([1,2,3,4], [1,2,3]) == [1,2]\n    assert intersection([1,2,3,4], [1,2,3,4]) == [1,2]\n    assert intersection([1,2,3,4], [1,2,3,4,5]) == []\n    assert intersection([1,2,3,4], [1,2,3,4,5,6]) == []",
      -1.3125
    ],
    [
      "import numpy as np\n\n\ndef intersection(arr1, arr2):\n    # Check the length of the arrays\n    if len(arr1) == 0 or len(arr2) == 0:\n        return []\n\n    # Make a list of indexes of arr1 that are in arr2\n    # (assumes that arr1 and arr2 are sorted)\n    indexes = np.where(np.in1d(arr1, arr2))[0]\n\n    # Return the intersection of arr1 and arr2\n    return [arr1[index] for index in indexes]",
      -1.3623046875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @return {integer[]}\n    def intersection(self, nums1, nums2):\n        # write your code here\n        return [x for x in nums1 if x in nums2]\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    nums1 = [1, 2, 2, 1]\n    nums2 = [2, 2, 1, 1]\n    nums3 = solution.intersection(nums1, nums2)\n    print nums3",
      -1.4580078125
    ],
    [
      "# https://www.hackerrank.com/challenges/lambda-intersection-of-two-arrays\n\ndef intersection_of_arrays(A, B):\n    # if one of the arrays is empty, then return empty\n    if len(A) == 0:\n        return []\n    if len(B) == 0:\n        return []\n    # iterate over the first array\n    for i in A:\n        # iterate over the second array\n        for j in B:\n            # if the two elements are equal, then add the i and j\n            # to the list and break\n            if i == j:\n                intersection.append(i)\n                break\n    return intersection\n\n# initialize the list\nintersection = []\n\n# input\nA = [1, 2, 3, 4, 5]\nB = [2, 4, 6, 7, 8]\n\n# output\nprint(intersection_of_arrays(A, B))",
      -1.6591796875
    ],
    [
      "# https://www.hackerrank.com/challenges/arrays-and-lambda-functions/problem\n\ndef intersection(array1, array2):\n    intersection = []\n    for i in array1:\n        if i in array2:\n            intersection.append(i)\n    return intersection\n\ndef main():\n    array1 = [1,2,3,4,5]\n    array2 = [3,4,5,6,7]\n    print(intersection(array1, array2))\n\nif __name__ == '__main__':\n    main()",
      -1.7216796875
    ],
    [
      "# https://www.hackerrank.com/challenges/lambda-intersection-of-two-arrays/problem\n\ndef lambda_intersection(a, b):\n    if not a or not b:\n        return []\n    return [x for x in a if x in b]\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [2, 3, 4]\n    print(lambda_intersection(a, b))",
      -1.7685546875
    ],
    [
      "# https://www.hackerrank.com/challenges/array-intersection-two-arrays-lambda\n\ndef intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, range(len(arr1))))\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4]\n\n    print(intersection(arr1, arr2))",
      -1.8291015625
    ],
    [
      "# https://www.hackerrank.com/challenges/intersection-of-two-arrays/problem\n\ndef intersection(a, b):\n    return list(filter(lambda x: x in a, b))\n\ndef main():\n    n1, n2 = input().split(' ')\n    n1, n2 = [int(i) for i in n1.split(',')], [int(i) for i in n2.split(',')]\n    print(intersection(n1, n2))\n\nif __name__ == '__main__':\n    main()",
      -1.884765625
    ],
    [
      "def intersection(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [i for i in arr1 if i in arr2]\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [1, 2, 5]\n\n    print(intersection(arr1, arr2))",
      -1.9580078125
    ],
    [
      "#!/usr/bin/python\n\ndef intersection(a, b):\n    # a and b are lists of strings\n    # return a list of strings that is the intersection of a and b\n    return list(set(a) & set(b))\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4]\n    b = [2, 3, 4, 5]\n    c = intersection(a, b)\n    print(c)",
      -2.283203125
    ],
    [
      "def intersection(a, b):\n    return [x for x in a if x in b]\n\ndef test_intersection():\n    assert intersection([1, 2, 3, 4], [2, 3, 4, 5]) == [2]\n    assert intersection([1, 2, 3, 4], [2, 3, 4, 5, 6]) == [2, 4]\n    assert intersection([1, 2, 3, 4], [2, 3, 4, 5, 6, 7]) == [2, 4, 6]\n    assert intersection([1, 2, 3, 4], [2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8]\n    assert intersection([1, 2, 3, 4], [2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\n\nif __name__ == '__main__':\n    test_intersection()",
      -2.314453125
    ],
    [
      "#!/usr/bin/env python\n\nimport time\nimport random\n\ndef intersection(arr1, arr2):\n    \"\"\"\n    Input: arr1, arr2 is two arrays.\n    Output: the intersection of arr1 and arr2.\n    \"\"\"\n    inter = []\n    for i in arr1:\n        if i in arr2:\n            inter.append(i)\n\n    return inter\n\n\nif __name__ == '__main__':\n    start = time.time()\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4, 5]\n    inter = intersection(arr1, arr2)\n    end = time.time()\n    print(inter)\n    print(\"--- %s seconds ---\" % (end - start))",
      -2.38671875
    ],
    [
      "import unittest\n\n\ndef intersection(a, b):\n    return [x for x in a if x in b]\n\n\nclass TestLambdaFunction(unittest.TestCase):\n    def test_intersection(self):\n        self.assertEqual(intersection([1, 2, 3], [2, 3, 4]), [2])\n        self.assertEqual(intersection([1, 2, 3], [1, 2, 3]), [1, 2])\n        self.assertEqual(intersection([1, 2, 3], [4, 5, 6]), [])\n        self.assertEqual(intersection([1, 2, 3], [1, 2, 3, 4]), [1, 2, 3])\n        self.assertEqual(intersection([1, 2, 3], [2, 3, 4, 5]), [2, 3])\n        self.assertEqual(intersection([1, 2, 3], [2, 3, 4, 5, 6]), [2, 3, 4, 5])\n        self.assertEqual(intersection([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5])\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -2.556640625
    ],
    [
      "def find_intersection(arr1, arr2):\n    \"\"\"\n    Input: arr1 = [1, 2, 3]\n          arr2 = [4, 5]\n    Output: [1, 2]\n    \"\"\"\n    intersection = []\n\n    for x in arr1:\n        for y in arr2:\n            if x == y:\n                intersection.append(x)\n\n    return intersection\n\n# Test Cases\narr1 = [1, 2, 3]\narr2 = [4, 5]\n\narr1 = [1, 2]\narr2 = [1, 2, 3, 4]\n\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\narr1 = [1, 2, 3, 4]\narr2 = [5, 6, 7, 8]\n\narr1 = [1, 2, 3, 4]\narr2 = [5, 6, 7, 8, 9]\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [6, 7, 8, 9, 10]\n\narr1 = [1, 2, 3, 4, 5, 6]\narr2 = [7, 8, 9, 10, 11, 12]\n\narr1 = [1, 2, 3, 4, 5, 6, 7]\narr2 = [8, 9, 10, 11, 12, 13, 14]\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8]\narr2 = [9, 10, 11, 12, 13, 14, 15, 16]\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18]\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\narr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\narr2 = [12, 13, 14, 15, 16, 17,",
      -2.876953125
    ],
    [
      "# https://www.hackerrank.com/challenges/lambda-function-intersection\n\ndef intersection(arr1, arr2):\n    # write your code here\n    # Create a list of all the numbers in arr1 and arr2.\n    numbers = []\n    for i in arr1:\n        numbers.append(i)\n    for i in arr2:\n        numbers.append(i)\n\n    # Create a list of all the numbers in arr1 and arr2 that are in both lists.\n    intersection_list = []\n    for i in numbers:\n        if i in arr1 and i in arr2:\n            intersection_list.append(i)\n\n    return intersection_list\n\n# Input: arr1 = [1, 2, 3], arr2 = [3, 4, 5]\n# Output: [3, 4, 5]\narr1 = [1, 2, 3]\narr2 = [3, 4, 5]\n\nprint(intersection(arr1, arr2))",
      -2.8828125
    ],
    [
      "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass Solution:\n    def __init__(self):\n        self.l = []\n        self.r = []\n\n    def __call__(self, p1, p2):\n        if p1.x in self.l and p2.x in self.l:\n            return True\n        elif p1.x in self.r and p2.x in self.r:\n            return False\n        else:\n            self.l.append(p1.x)\n            self.r.append(p2.x)\n            return True\n\n\ndef main():\n    points = [Point(x, y) for x in range(0, 10) for y in range(0, 10)]\n    s = Solution()\n    for i in points:\n        print(s(i, i))\n\n\nif __name__ == '__main__':\n    main()",
      -3.853515625
    ],
    [
      "def find_intersection(arr1, arr2):\n    \"\"\"\n    arr1 is the first array to be compared.\n    arr2 is the second array to be compared.\n    :type arr1: list[int]\n    :type arr2: list[int]\n    :rtype: list[int]\n    \"\"\"\n    result = []\n    for i in range(len(arr1)):\n        if all(j in arr2 for j in arr1[i:]):\n            result.append(arr1[i:])\n\n    return result",
      -4.109375
    ],
    [
      "import time\n\ndef intersection(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    i = 0\n    j = 0\n    res = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            res.append(arr1[i])\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return res\n\ndef test():\n    arr1 = [1, 2, 3]\n    arr2 = [3, 2, 1]\n    start_time = time.time()\n    res = intersection(arr1, arr2)\n    end_time = time.time()\n    print('intersection time: {}'.format(end_time - start_time))\n    print('intersection result: {}'.format(res))\n    assert res == [3, 2]\n\nif __name__ == '__main__':\n    test()",
      -4.171875
    ],
    [
      "import random\n\n\ndef intersection(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for i in arr1:\n        if i in arr2:\n            res.append(i)\n    return res\n\n\ndef main():\n    \"\"\"\n    >>> intersection([1,2,3], [2,3,4])\n    [2, 3]\n    >>> intersection([1,2,3,4], [2,3,4])\n    []\n    >>> intersection([1,2,3,4,5], [2,3,4,6])\n    [2, 3, 4]\n    >>> intersection([1,2,3,4,5], [1,2,3,4,5])\n    []\n    >>> intersection([], [1,2,3,4,5])\n    []\n    >>> intersection([], [])\n    []\n    \"\"\"\n    random.seed()\n    arr1 = random.sample(range(100), 100)\n    arr2 = random.sample(range(100), 100)\n    print(intersection(arr1, arr2))\n\n\nif __name__ == '__main__':\n    main()",
      -4.36328125
    ],
    [
      "def intersection(arr1, arr2):\n    return [x for x in arr1 if x in arr2]\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8]\narr2 = [2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(intersection(arr1, arr2))\n\n# output: [2, 3, 4, 5, 6, 7, 8]",
      -4.41796875
    ],
    [
      "# https://leetcode.com/problems/intersection-of-two-arrays/discuss/124870/C%2B%2B-Python-using-lambda-to-find-the-intersection-of-two-arrays\n# https://leetcode.com/problems/intersection-of-two-arrays/discuss/106988/C++-using-lambda-to-find-the-intersection-of-two-arrays\n\nimport collections\n\nclass Solution(object):\n    def findIntersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        def find(nums, num):\n            # return [i for i in range(nums.__len__()) if nums[i] == num]\n            return [i for i in range(nums.__len__()) if nums[i] == num]\n        # return [i for i in range(nums1.__len__()) if [nums1[i], nums2[i]] in pairs]\n        return [i for i in range(nums1.__len__()) if [nums1[i], nums2[i]] in pairs]\n\n    def findIntersection_2(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [i for i in range(nums1.__len__()) if [nums1[i], nums2[i]] in pairs]\n\n    def findIntersection_3(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [i for i in range(nums1.__len__()) if [nums1[i], nums2[i]] in pairs]\n\n    def findIntersection_4(self,",
      -4.76171875
    ],
    [
      "# TODO\n# - implement lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place version of lambda function\n# - implement in-place",
      -5.03515625
    ],
    [
      "def intersection(arr1, arr2):\n    return [item for item in arr1 if item in arr2]\n\narr1 = [1, 2, 3, 4, 5, 6]\narr2 = [1, 2, 4, 7, 8]\n\n# Approach 1: Brute force\nresult = []\nfor i in arr1:\n    for j in arr2:\n        if i == j:\n            result.append(i)\n\n# Approach 2: Lambda\nresult = intersection(arr1, arr2)\n\n# Approach 3: Iterate\nresult = [i for i in arr1 if i in arr2]\n\nprint(result)\n\n# Output\n# [1, 4, 7, 8]",
      -5.125
    ],
    [
      "import sys\n\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\narr3 = [7, 8, 9]\narr4 = [10, 11, 12]\narr5 = [13, 14, 15]\narr6 = [16, 17, 18]\narr7 = [19, 20, 21]\narr8 = [22, 23, 24]\narr9 = [25, 26, 27]\narr10 = [28, 29, 30]\narr11 = [31, 32, 33]\narr12 = [34, 35, 36]\narr13 = [37, 38, 39]\narr14 = [40, 41, 42]\narr15 = [43, 44, 45]\narr16 = [46, 47, 48]\narr17 = [49, 50, 51]\narr18 = [52, 53, 54]\narr19 = [55, 56, 57]\narr20 = [58, 59, 60]\narr21 = [61, 62, 63]\narr22 = [64, 65, 66]\narr23 = [67, 68, 69]\narr24 = [70, 71, 72]\narr25 = [73, 74, 75]\narr26 = [76, 77, 78]\narr27 = [79, 80, 81]\narr28 = [82, 83, 84]\narr29 = [85, 86, 87]\narr30 = [88, 89, 90]\narr31 = [91, 92, 93]\narr32 = [94, 95, 96]\narr33 = [97, 98, 99]\narr34 = [100, 101, 102]\narr35 = [103, 104, 105]\narr36 = [106, 107, 108]\narr37 = [109, 110, 111]\narr38 = [112, 113, 114]\narr39 = [115, 116, 117]\narr40 = [118, 119, 120]\narr41 = [121, 122, 123]\narr42 = [124, 125, 126]\narr43 = [127, 128, 129]\narr44 = [130, 131, 132]\narr45 = [133, 134, 135]\narr46 = [136, 137, 138]\narr47",
      -5.12890625
    ],
    [
      "import collections\nimport random\n\n# The array of two sets.\nset_a = [1, 2, 3, 4, 5]\nset_b = [1, 3, 5, 7, 9]\n\n# Use a lambda function to get the intersection of two sets.\n# The output should be a list of all the elements of the intersection.\nintersection_of_two_sets = lambda a, b: list(collections.intersection(a, b))\n\nprint(\"Intersection of two sets using lambda function: \")\nprint(intersection_of_two_sets(set_a, set_b))\n\n# Use a lambda function to get the intersection of two sets.\n# The output should be a list of all the elements of the intersection.\nintersection_of_two_sets_2 = lambda a, b: list(collections.intersection(a, b))\n\nprint(\"Intersection of two sets using lambda function: \")\nprint(intersection_of_two_sets_2(set_a, set_b))",
      -5.96875
    ],
    [
      "# Time:  O(nlgn)\n# Space: O(1)\n\n# Definition for an interval.\nclass Interval(object):\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution(object):\n    def findIntersection(self, A, B):\n        \"\"\"\n        :type A: List[Interval]\n        :type B: List[Interval]\n        :rtype: List[Interval]\n        \"\"\"\n        return self.findIntersection_using_lambda(A, B)\n\n    def findIntersection_using_lambda(self, A, B):\n        return [x for x in A if x.start <= B[0].end <= x.end or x.start <= B[-1].end <= x.end]",
      -6.171875
    ],
    [
      "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [i for i in range(len(nums1)) if nums1[i] in nums2]",
      -7.30078125
    ],
    [
      "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def __str__(self):\n        return \"[{0}:{1}]\".format(self.start, self.end)\n\nclass Solution(object):\n    def hasIntersection(self, timeIntervals, taskIntervals):\n        \"\"\"\n        :type timeIntervals: List[Interval]\n        :type taskIntervals: List[Interval]\n        :rtype: bool\n        \"\"\"\n        # Time Intervals\n        timeIntervals = sorted(timeIntervals, key=lambda x: x.start)\n        taskIntervals = sorted(taskIntervals, key=lambda x: x.start)\n\n        # Check whether the first interval is not empty\n        if not timeIntervals[0].start <= timeIntervals[0].end:\n            return False\n\n        # Check whether the last interval is not empty\n        if not taskIntervals[-1].end <= taskIntervals[-1].start:\n            return False\n\n        # Interval overlap\n        for i in range(1, len(timeIntervals)):\n            if not timeIntervals[i].end <= timeIntervals[i - 1].start:\n                return False\n\n        for i in range(1, len(taskIntervals)):\n            if not taskIntervals[i].end <= taskIntervals[i - 1].start:\n                return False\n\n        return True",
      -7.76171875
    ],
    [
      "def intersection(arr1, arr2):\n    \"\"\"\n    :param arr1: A list of integers.\n    :param arr2: A list of integers.\n    :return: A list of integers that is the intersection of two arrays.\n    \"\"\"\n    return list(filter(lambda x: x in arr1 and x in arr2, range(len(arr1) + len(arr2))))\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3]\n    arr2 = [1, 4, 5]\n    print(intersection(arr1, arr2))\n    # => [1, 4]",
      -7.95703125
    ],
    [
      "from collections import defaultdict\nfrom functools import reduce\n\ndef intersection(arr1, arr2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    :type arr1: list[int]\n    :type arr2: list[int]\n    :rtype: list[int]\n    \"\"\"\n    return list(set(arr1) & set(arr2))\n\n# Time:  O(m * n)\n# Space: O(m * n)\nclass Solution(object):\n    def intersection(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        d = defaultdict(set)\n        for a in A:\n            d[a].add(a)\n        for b in B:\n            d[b].discard(b)\n        return list(d.values())\n\nif __name__ == \"__main__\":\n    print(Solution().intersection([1, 2, 2, 1], [3, 3]))",
      -8.3984375
    ],
    [
      "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n\nclass Solution:\n    def findIntersection(self, A, B):\n        \"\"\"\n        :type A: List[Interval]\n        :type B: List[Interval]\n        :rtype: List[Interval]\n        \"\"\"\n        intervals = []\n        for a in A:\n            for b in B:\n                if a.start <= b.start and a.end >= b.start:\n                    intervals.append(Interval(a.start, b.start))\n                if a.start <= b.end and a.end >= b.end:\n                    intervals.append(Interval(a.start, b.end))\n                if a.end <= b.start and a.end >= b.start:\n                    intervals.append(Interval(a.end, b.start))\n                if a.end <= b.end and a.end >= b.end:\n                    intervals.append(Interval(a.end, b.end))\n        return intervals",
      -9.015625
    ],
    [
      "import collections\n\nclass Intersection(object):\n    def __init__(self):\n        self.result = collections.defaultdict(set)\n\n    def find_intersection(self, arr1, arr2):\n        self.result.clear()\n        for i in arr1:\n            self.result[i].add(arr2[i])\n\n    def find_intersection_with_lambda(self, arr1, arr2):\n        self.result.clear()\n        for i in arr1:\n            self.result[i] = arr2[i]\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [1, 2, 3, 4]\n\n    print Intersection().find_intersection(arr1, arr2)\n    print Intersection().find_intersection_with_lambda(arr1, arr2)",
      -10.5390625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}