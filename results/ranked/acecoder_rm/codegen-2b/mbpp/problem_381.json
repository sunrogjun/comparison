{
  "problem": {
    "task_id": "MBPP/392",
    "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
    "test_list": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ],
    "challenge_test_list": [],
    "problem_id": 381
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import math\n\ndef max_sum(f):\n    n = 1\n    result = f(n)\n    while n < 100:\n        result = max(result, f(n) + f(n/2) + f(n/3) + f(n/4) + f(n/5))\n        n += 1\n    return result\n\ndef test():\n    assert max_sum(lambda n: n**2 + n/2) == 25\n    assert max_sum(lambda n: n**2 + n/3) == 25\n    assert max_sum(lambda n: n**2 + n/4) == 25\n    assert max_sum(lambda n: n**2 + n/5) == 25\n    assert max_sum(lambda n: n**2 + n/6) == 25\n\nif __name__ == \"__main__\":\n    test()",
      3.212890625
    ],
    [
      "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def maxSum(self, n):\n        if n < 1:\n            return 0\n        f = [0] * (n+1)\n        for i in range(2, n+1):\n            f[i] = max(f[i//2] + f[i//3] + f[i//4] + f[i//5], i)\n        return f[n]\n\n\nif __name__ == '__main__':\n    assert Solution().maxSum(3) == 6\n    assert Solution().maxSum(5) == 15",
      -0.669921875
    ],
    [
      "# TLE\ndef max_sum(n):\n    return sum(max_sum(x) for x in range(n, 0, -1))\n\nprint(max_sum(0))",
      -0.85595703125
    ],
    [
      "from time import time\n\ndef max_sum_by_div(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return n\n    n = n // 2\n    return max(max_sum_by_div(n), n + max_sum_by_div(n))\n\nif __name__ == '__main__':\n    t = time()\n    print(max_sum_by_div(200))\n    print(time() - t)",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\ndef maxSum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    return max(maxSum(n//2) + maxSum(n//3) + maxSum(n//4) + maxSum(n//5), n)\n\nif __name__ == \"__main__\":\n    print(maxSum(8))",
      -0.85693359375
    ],
    [
      "def max_sum(n):\n    f = lambda n: (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n    return max(f(n), n)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def maxSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        res = nums[0]\n        for num in nums:\n            res = max(res, num + max(self.maxSum(nums[::2]), self.maxSum(nums[1::3]), self.maxSum(nums[2::4]), self.maxSum(nums[3::5])))\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxSum([1,2,3,4,5,6,7])",
      -0.85693359375
    ],
    [
      "def max_sum_of_three_numbers(n):\n    return max(f(n/2) + f(n/3) + f(n/4), n)\n\n\ndef f(n):\n    if n == 1:\n        return 1\n\n    return max(f(n/2) + f(n/3) + f(n/4), n)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_three_numbers(3))\n    print(max_sum_of_three_numbers(5))",
      -0.85791015625
    ],
    [
      "from math import factorial\n\ndef max_sum(f):\n    max_sum = f[0]\n    for i in range(1, len(f)):\n        max_sum = max(max_sum + f[i], f[i])\n    return max_sum\n\ndef test_f(n, f):\n    return max_sum(f[:n])\n\ndef test_f_n(n):\n    f = []\n    for i in range(1, n + 1):\n        f.append(factorial(i) / factorial(i - 1))\n    return max_sum(f)\n\nif __name__ == '__main__':\n    assert test_f(2, [1, 2, 3]) == 4\n    assert test_f_n(5) == 14",
      -0.8583984375
    ],
    [
      "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def maxSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * (n+1)\n        dp[0] = nums[0]\n        for i in xrange(1, n+1):\n            dp[i] = max(dp[i//2] + nums[i], nums[i])\n        return max(dp)\n\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5]\n    print(Solution().maxSum(nums))\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(Solution().maxSum(nums))",
      -0.8583984375
    ],
    [
      "def max_sum(x, y):\n    return max(x, y)\n\ndef max_sum_recursive(x, y):\n    if x < y:\n        return max_sum_recursive(y, x)\n    return max(x, y)\n\n# Test Cases\nx = [1, 2, 3, 4]\ny = [3, 4, 5, 6]\n\n# Expected Output\nprint max_sum(x, y)\n# Output\n# 6\n\nx = [1, 2, 3, 4]\ny = [3, 4, 5, 6]\n\n# Expected Output\nprint max_sum_recursive(x, y)\n# 6",
      -0.8583984375
    ],
    [
      "def maxSum(n):\n    return max(sum(f(i) for i in range(1, n+1)), n)\n\ndef f(n):\n    return n*(n+1)*(2*n+1)\n\nif __name__ == \"__main__\":\n    print maxSum(5)",
      -0.8583984375
    ],
    [
      "import math\n\ndef max_sum(n):\n    if n == 0:\n        return 0\n    return max(sum(f(n/2) for f in f_iter(n)), n)\n\ndef f_iter(n):\n    yield 0\n    for i in xrange(1, n):\n        yield max(f(i/2) + f(i/3) + f(i/4) + f(i/5), i)\n\ndef main():\n    print max_sum(10)\n    print max_sum(20)\n    print max_sum(30)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def max_sum_with_sum_equation(n):\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\ndef f(n):\n    if n == 1:\n        return 1\n    return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n\ndef test():\n    assert max_sum_with_sum_equation(5) == 6\n    assert max_sum_with_sum_equation(7) == 15\n\ndef main():\n    test()\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def maxSumTwoSquares(self, f):\n        \"\"\"\n        :type f: List[int]\n        :rtype: int\n        \"\"\"\n        if len(f) == 1:\n            return f[0]\n        \n        max_sum = f[0]\n        for i in xrange(1, len(f)):\n            curr_sum = (f[i-1] + f[i]) * 2\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum",
      -0.8583984375
    ],
    [
      "def maxSum(num):\n    maxSum = num\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            maxSum = max(maxSum + i, num // i + maxSum)\n    return maxSum\n\nprint(maxSum(5))",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def maxSumSubarray(self, arr, n):\n        \"\"\"\n        :type arr: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        max_sum = arr[0]\n        for i in xrange(1, n):\n            max_sum = max(max_sum + arr[i], arr[i] + self.maxSumSubarray(arr, i/2))\n        return max_sum",
      -0.85888671875
    ],
    [
      "from math import sqrt\n\n\ndef max_sum(n):\n    return max(sum(f(n/2) for f in f_iter(n)) + sum(f(n/3) for f in f_iter(n)) + sum(f(n/4) for f in f_iter(n)) + sum(f(n/5) for f in f_iter(n)), n)\n\n\ndef f_iter(n):\n    f = [0] * (n + 1)\n    f[0] = n\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            f[i] += max(f[i - j], f[i - j / 2])\n    return f\n\n\nif __name__ == \"__main__\":\n    print(max_sum(5))\n    print(max_sum(10))",
      -0.85888671875
    ],
    [
      "import math\n\ndef max_sum(f, n):\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\nif __name__ == \"__main__\":\n    print(max_sum(lambda n: n**2 + n**3 + n**4 + n**5, 100))",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/maximum-sum-of-even-polynomials/problem\n#\n# https://www.youtube.com/watch?v=nB7dJ6Jx0M0\ndef max_sum_of_even_polynomials(n):\n    max_sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            max_sum += i\n            if i % 3 == 0:\n                max_sum += i\n                if i % 5 == 0:\n                    max_sum += i\n    return max_sum\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(max_sum_of_even_polynomials(n))",
      -0.85888671875
    ],
    [
      "def max_sum(f):\n    m = 0\n    for i in range(1, 6):\n        m = max(m, f(i))\n    return m\n\ndef f(n):\n    return (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n\nprint max_sum(f)",
      -0.85888671875
    ],
    [
      "def max_sum(x):\n    max_sum = 0\n    for i in range(1, x+1):\n        if i%3 == 0 and i%5 == 0:\n            max_sum += i\n        elif i%3 == 0:\n            max_sum += i\n        elif i%5 == 0:\n            max_sum += i\n        else:\n            max_sum += i\n    return max_sum\n\nif __name__ == \"__main__\":\n    print max_sum(1000)",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/max-sum-recursive/problem\n\nfrom math import sqrt\n\n\ndef max_sum_recursive(n):\n    # base case\n    if n == 1:\n        return 0\n\n    # recursive case\n    return max(max_sum_recursive(n / 2) + max_sum_recursive(n / 3) + max_sum_recursive(n / 4) + max_sum_recursive(n / 5), n)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(max_sum_recursive(n))",
      -0.85888671875
    ],
    [
      "def max_sum_f(n):\n    if n == 1:\n        return n\n    return max(max_sum_f(n/2), max_sum_f(n/3), max_sum_f(n/4), max_sum_f(n/5), n)\n\nprint(max_sum_f(5))",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def maxSum(self, n):\n        if n == 0:\n            return 0\n        return self.maxSum(n // 2) + self.maxSum(n // 3) + self.maxSum(n // 4) + self.maxSum(n // 5)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxSum(5))",
      -0.85888671875
    ],
    [
      "def f(n):\n    return n*(n+1)\n\ndef max_sum(n):\n    return max(f(n/2), f(n/3), f(n/4), f(n/5), n)\n\n\nprint max_sum(5)",
      -0.85888671875
    ],
    [
      "# from CommonClasses import * # hxl: comment out this line for submission\n\nclass Solution:\n    \n    # @return an integer\n    def maximumSum(self, f):\n        \n        return max(sum(map(f, [i/2, i/3, i/4, i/5])), i)\n\n\nif __name__ == \"__main__\":\n    \n    # Unit Test\n    print Solution().maximumSum([i for i in range(1, 11)]).",
      -0.85888671875
    ],
    [
      "def max_sum(n, f):\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\nif __name__ == \"__main__\":\n    f = lambda n: (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n    n = 100\n    print max_sum(n, f)",
      -0.85888671875
    ],
    [
      "def max_sum(f):\n    return max(f[i] for i in range(len(f)) if f[i] > 0)\n\nif __name__ == '__main__':\n    f = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print max_sum(f)",
      -0.85888671875
    ],
    [
      "#!/bin/python\n\ndef maxSum(f, n):\n    if n <= 1:\n        return n\n    return max(maxSum(f, n/2), maxSum(f, n/3), maxSum(f, n/4), maxSum(f, n/5))\n\nif __name__ == '__main__':\n    f = [3, 6, 1, 10]\n    n = 100\n    print maxSum(f, n)",
      -0.85888671875
    ],
    [
      "def maxSum(f):\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\n\nprint(maxSum(lambda n: n**2 + n**3 + n**4 + n**5))",
      -0.85888671875
    ],
    [
      "import math\n\ndef f(n):\n    return (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n\ndef max_sum(n):\n    return max(f(n), n)\n\nif __name__ == \"__main__\":\n    print max_sum(1)\n    print max_sum(2)\n    print max_sum(3)\n    print max_sum(4)\n    print max_sum(5)\n    print max_sum(6)\n    print max_sum(7)\n    print max_sum(8)\n    print max_sum(9)\n    print max_sum(10)\n    print max_sum(11)\n    print max_sum(12)",
      -0.85888671875
    ],
    [
      "def max_sum(f):\n    \"\"\"\n    :type f: List[int]\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(1, len(f)):\n        res = max(res + f[i], f[i])\n    return res\n\nif __name__ == \"__main__\":\n    assert max_sum([1, 2, 3, 4, 5]) == 10\n    assert max_sum([1, 3, 5, 7, 9]) == 21\n    assert max_sum([1, 2, 3, 4, 5, 6]) == 30",
      -0.85888671875
    ],
    [
      "import math\n\ndef maxSum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return f(n)\n\ndef f(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    else:\n        return max(f(n/2), f(n/3)) + f(n/4) + f(n/5)\n\nif __name__ == '__main__':\n    print maxSum(10)\n    print maxSum(20)",
      -0.85888671875
    ],
    [
      "def maxSum(n):\n    if n < 2:\n        return 0\n    return maxSum(n/2) + maxSum(n/3) + maxSum(n/4) + maxSum(n/5)\n\nprint maxSum(10)",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def maxSum(self, f):\n        \"\"\"\n        :type f: List[int]\n        :rtype: int\n        \"\"\"\n        if len(f) == 1:\n            return f[0]\n        max_sum = 0\n        for i in range(len(f)):\n            max_sum = max(max_sum, f[i] + maxSum(f[:i] + f[i+1:]))\n        return max_sum",
      -0.85888671875
    ],
    [
      "def max_sum(n):\n    return max(f(n) for f in f_funcs)\n\ndef f(n):\n    return n*(n+1)/2\n\ndef f_funcs():\n    return [f(n) for n in range(1, 6)]\n\nif __name__ == '__main__':\n    assert max_sum(1) == 1\n    assert max_sum(2) == 3\n    assert max_sum(3) == 6\n    assert max_sum(4) == 10\n    assert max_sum(5) == 15\n    assert max_sum(6) == 21",
      -0.85888671875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def maxSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        res = 0\n        cur_sum = root.val\n        left_sum = self.maxSum(root.left)\n        right_sum = self.maxSum(root.right)\n        if left_sum >= right_sum and left_sum >= cur_sum:\n            res = left_sum\n        elif right_sum >= left_sum and right_sum >= cur_sum:\n            res = right_sum\n        else:\n            res = cur_sum\n        return res + root.val",
      -0.85888671875
    ],
    [
      "def max_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\ndef f(n):\n    return n**2 + n**3 + n**4 + n**5",
      -0.86083984375
    ],
    [
      "#\n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n#\n#\n# Example 1:\n#\n# Input: f(1) = 1\n# Output: 1\n#\n#\n# Example 2:\n#\n# Input: f(2) = 3\n# Output: 3\n#\n#\n# Example 3:\n#\n# Input: f(3) = 4\n# Output: 4\n#\n#\n# Example 4:\n#\n# Input: f(4) = 5\n# Output: 5\n#\n#\n#\n# Note:\n#\n# f(n) is a positive integer\n# f(1) = 1\n# f(2) = 3\n# f(3) = 4\n# f(4) = 5\n# f(5) = 6\n#\n#\n#\n#\n#\n#\n#\n# Note:\n#\n# The given equation is valid iff f(n) is a perfect square.\n#\n\n\nclass Solution:\n    # @param {integer} n\n    # @return {integer}\n    def maxSum(self, n):\n        max_sum = 0\n        for i in range(2, n+1):\n            max_sum = max(max_sum + f(i), i)\n        return max_sum\n    \n    def f(self, n):\n        if n % 2 == 0:\n            return n\n        return n + self.f(n/2) + self.f(n/3) + self.f(n/4) + self.f(n/5)\n\n# Note:\n#\n# The given equation is valid iff f(n) is a perfect square.",
      -1.1044921875
    ],
    [
      "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def maxSumSubarray(self, n):\n        if n <= 1:\n            return 0\n        ans = 0\n        for i in range(1, n):\n            ans = max(ans, self.maxSubarray(i, n))\n        return ans\n    \n    def maxSubarray(self, i, n):\n        if i == 0:\n            return 0\n        if i == 1:\n            return 1\n        return self.maxSubarray(i-1, n) + self.maxSubarray(i-2, n)",
      -1.6875
    ],
    [
      "from math import sqrt\nfrom math import ceil\n\n\ndef max_sum(n):\n    return max(f(n), n)\n\n\ndef f(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    else:\n        return f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5)\n\n\nif __name__ == '__main__':\n    print(max_sum(50))",
      -1.919921875
    ],
    [
      "class Solution(object):\n    def maxSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums: return 0\n        n = len(nums)\n        max_sum = nums[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, self.max_sum(nums[:i])) + nums[i]\n        return max_sum\n\n    def maxSum2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums: return 0\n        n = len(nums)\n        max_sum = nums[0]\n        for i in range(1, n):\n            max_sum = max(max_sum, max(self.max_sum(nums[:i]), self.max_sum(nums[:i] + nums[:i+1])))\n        return max_sum\n\n# test\nassert Solution().maxSum([2, 3, -1, 4, -2, 2]) == 7\nassert Solution().maxSum([2, 3, -1, 4, -2, 2, -3, -4]) == 14",
      -1.9873046875
    ],
    [
      "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def maxSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        \n        return max(self.maxSum(root.left), self.maxSum(root.right)) + root.val",
      -2.265625
    ],
    [
      "def max_sum(f):\n    \"\"\"\n    :type f: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(f)\n    if n == 1:\n        return f[0]\n    elif n == 2:\n        return max(f[0], f[1])\n    elif n == 3:\n        return max(f[0], f[1], f[2])\n    elif n == 4:\n        return max(f[0], f[1], f[2], f[3])\n    elif n == 5:\n        return max(f[0], f[1], f[2], f[3], f[4])\n    else:\n        mid_n = n // 2\n        mid_f = f[mid_n]\n        return max(max_sum(f[:mid_n]), mid_f + max_sum(f[mid_n:]))\n\nif __name__ == '__main__':\n    f = [1, 2, 3, 4, 5]\n    print(max_sum(f))",
      -2.84765625
    ],
    [
      "# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def maxSumSubmatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        n = len(matrix)\n        if n == 0:\n            return 0\n        if n == 1:\n            return matrix[0][0]\n\n        max_sum = matrix[0][0]\n        for i in range(1, n):\n            max_sum = max(max_sum, matrix[i][0] + matrix[i-1][0])\n            max_sum = max(max_sum, matrix[i][0] + matrix[i-1][1] + matrix[i-1][2] + matrix[i-1][3])\n\n        return max_sum",
      -2.8515625
    ],
    [
      "from collections import Counter\n\ndef max_sum(n):\n    c = Counter()\n    for i in range(1, n+1):\n        c.update(f(i))\n    return max(c.values())\n\ndef f(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 10\n    else:\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n\nif __name__ == \"__main__\":\n    n = 10\n    print(max_sum(n))",
      -2.99609375
    ],
    [
      "import math\n\ndef findMaxSum(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    maxSum = 0\n    for i in range(1, n):\n        maxSum = max(maxSum, f(i) + findMaxSum(n - i))\n    return maxSum\n\ndef f(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n\nif __name__ == \"__main__\":\n    print findMaxSum(2)\n    print findMaxSum(3)\n    print findMaxSum(4)\n    print findMaxSum(5)\n    print findMaxSum(6)\n    print findMaxSum(7)\n    print findMaxSum(8)\n    print findMaxSum(9)\n    print findMaxSum(10)\n    print findMaxSum(11)\n    print findMaxSum(12)\n    print findMaxSum(13)\n    print findMaxSum(14)\n    print findMaxSum(15)",
      -3.154296875
    ],
    [
      "class Solution(object):\n    def maxSum(self, f):\n        \"\"\"\n        :type f: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(f)\n        if n == 0: return 0\n        if n == 1: return f[0]\n        res = 0\n        for i in range(1, n//2):\n            res = max(res, f[i] + f[n-i-1])\n        res = max(res, f[n//2] + f[n-n//2-1])\n        return res",
      -3.37890625
    ],
    [
      "#!/usr/bin/python\n\n# max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n\ndef max_sum(n):\n    if n <= 2:\n        return n\n    return max(max_sum(n/2) + max_sum(n/3) + max_sum(n/4) + max_sum(n/5), n)\n\nif __name__ == '__main__':\n    print max_sum(1)\n    print max_sum(5)",
      -3.548828125
    ],
    [
      "# https://www.hackerrank.com/challenges/summation-of-factorials/problem\n# Input: f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# Output: 2\n# Explanation: f(n/2) + f(n/3) + f(n/4) + f(n/5) = f(n) = 2 * (6 + 8 + 12 + 16) = 16\n# So, f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# The solution is f(n) = max(f(n/2), f(n/3), f(n/4), f(n/5)),\n# but f(n) is only one possible solution.\n# Note: The input will be in range [0, 10^5]\n\n\ndef max_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return max(max_sum_1(n), max_sum_2(n))\n\n\ndef max_sum_1(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return n\n\n    return max(max_sum_1(n / 2), max_sum_1(n / 3), max_sum_1(n / 4), max_sum_1(n / 5), n)\n\n\ndef max_sum_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return n\n\n    return max(max_sum_2(n / 2), max_sum_2(n / 3), max_sum_2(n / 4), max_sum_2(n / 5), max_sum_2(n / 6), max_sum_2(n / 7), max_sum_2(n / 8), max_sum_2(n / 9), n)\n\nif __name__ == \"__main__\":",
      -4.046875
    ],
    [
      "class Solution(object):\n    def maxSum(self, equations):\n        \"\"\"\n        :type equations: List[str]\n        :rtype: int\n        \"\"\"\n        max_sum = 0\n        for equation in equations:\n            max_sum = max(max_sum, self.max_sum_rec(equation))\n        return max_sum\n\n    def max_sum_rec(self, equation):\n        if equation == \"\":\n            return 0\n        elif equation[0] == '0':\n            return 0\n        elif equation[0] == '1':\n            return self.max_sum_rec(equation[1:])\n        else:\n            return self.max_sum_rec(equation[0:1]) + self.max_sum_rec(equation[1:])\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    equations = [\"2\", \"2+1\", \"2+2+1\", \"3+1\", \"3+2+1\", \"3+3+1\", \"4+1\", \"4+2+1\", \"4+3+1\"]\n    print solution.maxSum(equations)",
      -4.3671875
    ],
    [
      "# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def maxSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], max(nums[1], nums[2]))\n        if n == 4:\n            return max(nums[0], max(nums[1], max(nums[2], nums[3])))\n        if n == 5:\n            return max(nums[0], max(nums[1], max(nums[2], max(nums[3], nums[4]))))\n\n        nums.sort()\n        return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4], nums[0] + nums[1] + nums[2] + nums[3] + nums[4])\n\nif __name__ == \"__main__\":\n    print(Solution().maxSum([1, 1, 1, 1, 1]))\n    print(Solution().maxSum([1, 1, 1, 2, 3]))\n    print(Solution().maxSum([1, 2, 3, 4, 5]))",
      -4.390625
    ],
    [
      "class Solution(object):\n    def maxSumSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        max_sum = 0\n        for i in range(k):\n            max_sum = max(max_sum, nums[i], nums[n-i-1])\n        for i in range(k, n):\n            max_sum = max(max_sum, nums[i], nums[n-i-1])\n        return max_sum",
      -4.39453125
    ],
    [
      "import math\n\ndef max_sum(f):\n    \"\"\"\n    :type f: List[int]\n    :rtype: int\n    \"\"\"\n    return max(map(lambda x: f[x] + f[x/2] + f[x/3] + f[x/4] + f[x/5], range(1, len(f) + 1)))\n\n\nif __name__ == \"__main__\":\n    assert max_sum([1, 2, 3, 4, 5]) == 10\n    assert max_sum([2, 3, 4, 5, 6]) == 15\n    assert max_sum([2, 3, 4, 5, 6, 7]) == 23\n    assert max_sum([2, 3, 4, 5, 6, 7, 8]) == 34\n    assert max_sum([2, 3, 4, 5, 6, 7, 8, 9]) == 47\n    assert max_sum([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 63",
      -4.55859375
    ],
    [
      "import math\n\ndef max_sum(n):\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\ndef f(n):\n    return max(math.fabs(n-1), math.fabs(n-2), math.fabs(n-3), math.fabs(n-4), math.fabs(n-5))\n\nif __name__ == '__main__':\n    print(max_sum(1))\n    print(max_sum(2))\n    print(max_sum(3))\n    print(max_sum(4))\n    print(max_sum(5))\n    print(max_sum(6))\n    print(max_sum(7))\n    print(max_sum(8))\n    print(max_sum(9))",
      -4.68359375
    ],
    [
      "def maxSum(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return max(maxSum(n/2), maxSum(n/3), maxSum(n/4), maxSum(n/5), n)\n\nif __name__ == \"__main__\":\n    print maxSum(1)\n    print maxSum(2)\n    print maxSum(3)\n    print maxSum(4)\n    print maxSum(5)\n    print maxSum(6)\n    print maxSum(7)\n    print maxSum(8)\n    print maxSum(9)",
      -4.8125
    ],
    [
      "# O(n^2)\n# O(n^2)\ndef maxSum(f):\n    max_sum = 0\n    for n in range(1, int(math.sqrt(len(f)))+1):\n        max_sum = max(max_sum, max(f[n/2], f[n/3], f[n/4], f[n/5]))\n    return max_sum\n\n# O(n)\ndef maxSum(f):\n    max_sum = 0\n    for n in f:\n        max_sum = max(max_sum, max(n, n+1))\n    return max_sum\n\nif __name__ == '__main__':\n    f = [1, 2, 3, 4, 5]\n    print maxSum(f)\n    f = [1, 2, 3, 4, 5, 6]\n    print maxSum(f)\n    f = [1, 2, 3, 4, 5, 6, 7]\n    print maxSum(f)",
      -5.00390625
    ],
    [
      "# Example 1\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)",
      -5.4375
    ],
    [
      "class Solution(object):\n    def maxSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        ans = nums[0]\n        for i in range(1, len(nums)):\n            ans = max(ans + nums[i], nums[i])\n        return ans\n\n# Time:  O(n)\n# Space: O(n)\nclass Solution2(object):\n    def maxSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        ans = nums[0]\n        for i in range(1, len(nums)):\n            ans = max(ans + nums[i], nums[i])\n        return ans",
      -5.82421875
    ],
    [
      "# https://oj.leetcode.com/problems/max-sum-of-two-arrays/\n\n\nclass Solution:\n    # @return an integer\n    def maxSum(self, nums1, nums2):\n        result = 0\n        for i in range(len(nums1)):\n            result = max(result, nums1[i] + nums2[i])\n        return result\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.maxSum([1, 2, 3, 4], [5, 6, 7, 8])",
      -6.0546875
    ],
    [
      "def max_sum_of_f_with_given_equation(equation):\n    return max(sum(f(n) for n in range(1, int(max(equation)))), equation)\n\n\nif __name__ == \"__main__\":\n    equation = \"f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\";\n    print(max_sum_of_f_with_given_equation(equation))",
      -6.546875
    ],
    [
      "#!/bin/python\n\n# Your code here\n\n# This is a simple example.\n# We will use the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# to get the maximum sum of f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# We will use the same equation to get the maximum sum of f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# We will use the same equation to get the maximum sum of f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# We will use the same equation to get the maximum sum of f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# Then we will use the same equation to get the maximum sum of f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# and the same equation to get the maximum sum of f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# and the same equation to get the maximum sum of f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# and the same equation to get the maximum sum of f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# and the same equation to get the maximum sum of f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
      -6.64453125
    ],
    [
      "from collections import Counter\n\n\ndef max_sum_of_subsequences(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 2:\n        return n\n    subseq_count = Counter(f(n) for f in max_sum_of_subsequences)\n    return max(subseq_count.values())\n\n\ndef f(n):\n    return (n / 2) + (n / 3) + (n / 4) + (n / 5)\n\n\nif __name__ == \"__main__\":\n    assert max_sum_of_subsequences(3) == 2\n    assert max_sum_of_subsequences(5) == 4\n    assert max_sum_of_subsequences(10) == 6\n    assert max_sum_of_subsequences(100) == 101",
      -6.67578125
    ],
    [
      "# https://www.hackerrank.com/challenges/max-sum-of-a-range/problem\n\n# The algorithm here is not optimal, but it's still a good idea to understand the problem.\n# For example, the algorithm can't handle the case where the range is 1-5, since the answer is 1,\n# and there is no way to solve this problem.\n\n# The only time it's not optimal is when the range is 0, and the answer is 0.\n# In that case, the algorithm is able to solve the problem.\n\n# If you're not familiar with the problem, you can use the following code to solve the problem.\n\n# def max_sum(range):\n#     max_sum = 0\n#     for i in range(1, range + 1):\n#         max_sum = max(max_sum, max_sum + i)\n#     return max_sum\n\n# print(max_sum(5))\n# print(max_sum(0))\n\n# def max_sum(range):\n#     max_sum = 0\n#     for i in range(1, range + 1):\n#         max_sum = max(max_sum, max_sum + max_sum(range/2) + max_sum(range/3) + max_sum(range/4) + max_sum(range/5))\n#     return max_sum\n\n# print(max_sum(5))\n# print(max_sum(0))\n\n# def max_sum(range):\n#     max_sum = 0\n#     for i in range(1, range + 1):\n#         max_sum = max(max_sum, max_sum + max_sum(range/2) + max_sum(range/3) + max_sum(range/4) + max_sum(range/5))\n#     return max_sum\n\n# print(max_sum(5))\n# print(max_sum(0))\n\n# def max_sum(range):\n#     max_sum = 0\n#     for i in range(1, range + 1):\n#         max_sum = max(max_sum, max_sum + max_sum(range/2) + max_sum(",
      -6.84375
    ],
    [
      "from collections import Counter\n\ndef max_sum(f):\n    max_sum = 0\n    for n in range(1, 21):\n        print n\n        if Counter(str(n)) == Counter(\"0 1 2 4 6 8 10 12 15 18 20\"):\n            max_sum = max(max_sum, f(n))\n    return max_sum\n\ndef f(n):\n    return 1 + n + n + n + n + n + n + n + n + n\n\nprint max_sum(f)",
      -7.0625
    ],
    [
      "import collections\n\n\nclass Solution(object):\n    def maxSumSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        max_sum = nums[0]\n        max_sum_left = nums[0]\n        max_sum_right = nums[0]\n        for num in nums:\n            if num > max_sum_left and num < max_sum_right:\n                max_sum_right = max(max_sum_right, max_sum + num)\n            elif num > max_sum_left:\n                max_sum_left = max(max_sum_left, max_sum + num)\n            elif num < max_sum_right:\n                max_sum_right = max(max_sum_right, max_sum + num)\n            else:\n                max_sum = max(max_sum, max_sum + num)\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(Solution().maxSumSubarray(nums))",
      -7.375
    ],
    [
      "def maxSum(f):\n    n = 0\n    while True:\n        m = f(n)\n        if m == n:\n            return m\n        elif m > n:\n            return m\n        n += 1\n\ndef f(n):\n    return (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n\n# f(n) = max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n# f(n) = max(f(n/2) + f(n/3) + f(n/4), n)\n# f(n) = max(f(n/2) + f(n/3), n)\n# f(n) = max(f(n/2), n)\n# f(n) = max(f(n), n)\n# f(n) = max(n, n)\n# f(n) = max(n, n - 1)\n# f(n) = max(n - 1, n)\n# f(n) = max(n - 1, n - 2)\n# f(n) = max(n - 2, n)\n# f(n) = max(n - 2, n - 3)\n# f(n) = max(n - 3, n)\n# f(n) = max(n - 3, n - 4)\n# f(n) = max(n - 4, n)\n# f(n) = max(n - 4, n - 5)\n# f(n) = max(n - 5, n)\n# f(n) = max(n - 5, n - 6)\n# f(n) = max(n - 6, n)\n# f(n) = max(n - 6, n - 7)\n# f(n) = max(n - 7, n)\n# f(n) = max(n - 7, n - 8)\n# f(n) = max(n - 8, n)\n# f(n) = max(n - 8, n - 9)\n# f(n) = max(n -",
      -7.640625
    ],
    [
      "def max_sum(f):\n    # write your code here\n    s = 0\n    n = 1\n    while n < 10**5:\n        s = max(s, f(n))\n        n = n << 1\n    return s\n\n\nif __name__ == '__main__':\n    f = lambda n: n ** 2 + n ** 3 + n ** 4 + n ** 5\n    print(max_sum(f))",
      -8.0703125
    ],
    [
      "# https://oj.leetcode.com/problems/max-sum-of-two-arrays/\n\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      -8.109375
    ],
    [
      "from math import sqrt\n\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\ndef max_sum(n):\n    max_sum = 0\n    for i in range(1, n+1):\n        f = i\n        for j in range(2, sqrt(i)):\n            f += i/j\n        if f > max_sum:\n            max_sum = f\n    return max_sum\n\nif __name__ == \"__main__\":\n    print(max_sum(100))",
      -8.4296875
    ],
    [
      "from __future__ import annotations\n\n\ndef max_sum_of_three_numbers_given_equation(f: int, n: int) -> int:\n    \"\"\"\n    :type f: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 0\n\n    if n == 2:\n        return max(f(n / 2), f(n / 3))\n\n    if n == 3:\n        return max(f(n / 2), f(n / 3), f(n / 4))\n\n    if n == 4:\n        return max(f(n / 2), f(n / 3), f(n / 4), f(n / 5))\n\n    if n == 5:\n        return max(f(n / 2), f(n / 3), f(n / 4), f(n / 5), f(n / 6))\n\n    return max(f(n / 2), f(n / 3), f(n / 4), f(n / 5), f(n / 6), f(n / 7), f(n / 8))\n\n\nif __name__ == \"__main__\":\n    assert max_sum_of_three_numbers_given_equation(f=lambda n: (f(n / 2) + f(n / 3) + f(n / 4)), n=2) == 2\n    assert max_sum_of_three_numbers_given_equation(f=lambda n: (f(n / 2) + f(n / 3) + f(n / 4)), n=2) == 2\n    assert max_sum_of_three_numbers_given_equation(f=lambda n: (f(n / 2) + f(n / 3) + f(n / 4)), n=2) == 2\n    assert max_sum_of_three_numbers_given_equation(f=lambda n: (f(n / 2) + f(n / 3) + f(n / 4)), n=2) == 2\n    assert max_sum_of_three_numbers_given_equation(f=lambda n: (f(n / 2) + f(n / 3) + f(n",
      -9.21875
    ],
    [
      "def max_sum_of_two_fibonacci(n):\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\n# Time:  O(n)\n# Space: O(1)\n# DP\nclass Solution:\n    # @param n, an integer\n    # @return an integer\n    def maxSumTwoFibonacci(self, n):\n        result = 0\n        for i in xrange(n-1):\n            result = max(result, self.maxSumOfTwoFibonacci(i+1)) + self.maxSumOfTwoFibonacci(i+2)\n        return result\n\nif __name__ == \"__main__\":\n    print Solution().maxSumTwoFibonacci(5)",
      -9.4140625
    ],
    [
      "# https://www.hackerrank.com/challenges/maximum-sum-of-fractions/problem\n\nimport math\n\n\ndef max_sum_fraction(n):\n    if n == 0:\n        return 0\n    else:\n        return max(max_sum_fraction(n / 2), max_sum_fraction(n / 3) + max_sum_fraction(n / 4) + max_sum_fraction(n / 5))\n\n\nif __name__ == '__main__':\n    print max_sum_fraction(2)\n    print max_sum_fraction(3)\n    print max_sum_fraction(4)\n    print max_sum_fraction(5)\n    print max_sum_fraction(6)\n    print max_sum_fraction(7)",
      -9.875
    ],
    [
      "class Solution:\n    # @return an integer\n    def maxSum(self, f):\n        if f < 0:\n            return 0\n        if f == 0:\n            return 0\n        res = 0\n        for n in range(1, int(f**0.5)+1):\n            if f % n == 0:\n                res = max(res, n*(f/n + self.maxSum(f/n)))\n            if f % n == 0 and n % 3 == 0:\n                res = max(res, n*(f/n + self.maxSum(f/n)))\n        return res\n\n# test\ns = Solution()\nprint(s.maxSum(0))\nprint(s.maxSum(1))\nprint(s.maxSum(2))\nprint(s.maxSum(3))\nprint(s.maxSum(4))\nprint(s.maxSum(5))",
      -10.140625
    ],
    [
      "# https://leetcode.com/problems/max-sum-of-two-integers/discuss/145961/Python-solution-with-explanation\n\n# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def maxSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        l = 0\n        r = 0\n        for i in range(len(nums)):\n            if i % 2 == 0:\n                l += nums[i]\n            else:\n                r += nums[i]\n        max_sum = l + r\n        for i in range(len(nums)):\n            if i % 2 == 0:\n                max_sum = max(max_sum, l + nums[i] + r)\n            else:\n                max_sum = max(max_sum, l + nums[i] + r)\n        return max_sum",
      -10.6328125
    ],
    [
      "# https://leetcode.com/problems/max-sum-of-two-numbers/discuss/115416/C++-O(n)-solution-using-recursion-and-stack-with-time-limit-and-memory-limit\nclass Solution(object):\n    def maxSumTwoNo(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # maxSumTwoNo = max( max( max( (sum(nums/2) + sum(nums/3) + sum(nums/4) + sum(nums/5)), nums) for n in range(1, len(nums))), nums)\n        maxSumTwoNo = 0\n        stack = []\n        for i in range(len(nums)):\n            while len(stack) > 0 and nums[i] > nums[stack[-1]]:\n                stack.pop()\n            stack.append(i)\n            maxSumTwoNo = max(maxSumTwoNo, nums[i])\n        return maxSumTwoNo",
      -10.8046875
    ],
    [
      "from collections import Counter\n\nclass Solution:\n    def maxSum(self, n: int) -> int:\n        return self.maxSumHelper(n, 0)\n\n    def maxSumHelper(self, n, sum):\n        if n == 0:\n            return sum\n        if n == 1:\n            return max(sum, n)\n        return max(self.maxSumHelper(n/2, sum + n), self.maxSumHelper(n/3, sum + n), self.maxSumHelper(n/4, sum + n), self.maxSumHelper(n/5, sum + n))\n\nif __name__ == '__main__':\n    assert Solution().maxSum(0) == 0\n    assert Solution().maxSum(1) == 1\n    assert Solution().maxSum(2) == 2\n    assert Solution().maxSum(3) == 3\n    assert Solution().maxSum(4) == 4\n    assert Solution().maxSum(5) == 5\n    assert Solution().maxSum(6) == 6\n    assert Solution().maxSum(7) == 7\n    assert Solution().maxSum(8) == 8\n    assert Solution().maxSum(9) == 9\n    assert Solution().maxSum(10) == 10\n    assert Solution().maxSum(100) == 100",
      -11.0859375
    ],
    [
      "# O(n^2)\ndef max_sum_sub_array(arr):\n    res = 0\n    for i in range(len(arr)):\n        if i == 0:\n            res = arr[i]\n            continue\n        res = max(res, arr[i] + max_sum_sub_array(arr[:i]))\n    return res\n\nif __name__ == '__main__':\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206",
      -11.1171875
    ],
    [
      "# https://www.youtube.com/watch?v=gQKwT9gKsEg\n\ndef max_sum(eq):\n    \"\"\"\n    :param eq: the equation to be used.\n    :return: the maximum possible sum.\n    \"\"\"\n    n = 0\n    while True:\n        sum_f = 0\n        while n < len(eq):\n            sum_f += eq[n]\n            if sum_f > 0:\n                break\n            n += 1\n        if sum_f == 0:\n            break\n        n = n // 2\n    return sum_f\n\n\nif __name__ == '__main__':\n    eq = [10, 30, 50, 70, 80]\n    print max_sum(eq)",
      -11.203125
    ],
    [
      "# https://www.hackerrank.com/challenges/maxsum-a-triangle\n# https://www.hackerrank.com/challenges/maxsum-a-triangle/submissions/code/28992865\n# https://www.hackerrank.com/challenges/maxsum-a-triangle/submissions/code/29159861\n# https://www.hackerrank.com/challenges/maxsum-a-triangle/submissions/code/29159861\n# https://www.hackerrank.com/challenges/maxsum-a-triangle/submissions/code/29159861\n# https://www.hackerrank.com/challenges/maxsum-a-triangle/submissions/code/29159861\n# https://www.hackerrank.com/challenges/maxsum-a-triangle/submissions/code/29159861\n\ndef max_sum(l,r):\n    return max(l[r-1],l[r-2],l[r-3],l[r-4],l[r-5],l[r-6],l[r-7],l[r-8],l[r-9],l[r-10],l[r-11],l[r-12],l[r-13],l[r-14],l[r-15],l[r-16],l[r-17],l[r-18],l[r-19],l[r-20],l[r-21],l[r-22],l[r-23],l[r-24],l[r-25],l[r-26],l[r-27],l[r-28],l[r-29],l[r-30],l[r-31],l[r-32],l[r-33],l[r-34],l[r-35],l[r-36],l[r-37],l[r-38],l[r-39],l[r-40],l[r-41],l[r-42],l[r-43],l[r-44],l[r-45],l[r-46],l[r-47],",
      -11.765625
    ],
    [
      "import math\n\ndef max_sum(f):\n    max_sum = f[0]\n    for i in range(1, len(f)):\n        max_sum = max(f[i], max_sum)\n    return max_sum\n\nif __name__ == \"__main__\":\n    f = [1, 2, 3, 4, 5]\n    print(max_sum(f))\n    f = [1, 3, 5, 7, 9]\n    print(max_sum(f))\n    f = [1, 1, 1, 1, 1]\n    print(max_sum(f))\n    f = [1, 1, 1, 1, 1, 1]\n    print(max_sum(f))\n    f = [1, 1, 1, 1, 1, 1, 1]\n    print(max_sum(f))\n    f = [1, 1, 1, 1, 1, 1, 1, 1]\n    print(max_sum(f))\n    f = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    print(max_sum(f))\n    f = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    print(max_sum(f))",
      -11.953125
    ],
    [
      "# https://www.hackerrank.com/challenges/max-sum-of-even-factorials/problem\n\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n) = (f(n/2) + f(n/3) + f(n/4) + f(n/5)) * (n + 1) / 2\n# f(n) = (f(n/2) + f(n/3) + f(n/4) + f(n/5)) * (n + 1) / 2 + f(n) / 2\n# f(n) = (f(n/2) + f(n/3) + f(n/4) + f(n/5)) * (n + 1) / 2 + f(n) / 2 + f(n)\n# f(n) = (f(n/2) + f(n/3) + f(n/4) + f(n/5)) * (n + 1) / 2 + f(n) / 2 + f(n)\n# f(n) = (f(n/2) + f(n/3) + f(n/4) + f(n/5)) * (n + 1) / 2 + f(n) / 2 + f(n)\n# f(n) = (f(n/2) + f(n/3) + f(n/4) + f(n/5)) * (n + 1) / 2 + f(n) / 2 + f(n)\n# f(n) = (f(n/2) + f(n/3) + f(n/4) + f(n/5)) * (n + 1) / 2 + f(n) / 2 + f(n)\n# f(n) = (f(n/2) + f(n/3) + f(n/4) + f(n/5)) * (n + 1) / 2 + f(n) / 2 + f(n)\n# f(n) = (f(n/2) + f(n/3)",
      -12.1015625
    ],
    [
      "#!/bin/python\nimport math\n\ndef max_sum_possible(f):\n    n = 2\n    result = f(n)\n    while n <= 100000:\n        result = max(result, f(n))\n        n += 2\n    return result\n\nif __name__ == '__main__':\n    print(max_sum_possible(lambda n: n**2 + n**3 + n**4 + n**5))\n    print(max_sum_possible(lambda n: n**2 + n**3 + n**4 + n**5))\n    print(max_sum_possible(lambda n: n**2 + n**3 + n**4 + n**5))\n    print(max_sum_possible(lambda n: n**2 + n**3 + n**4 + n**5))",
      -12.59375
    ],
    [
      "def maxSum(f):\n    \"\"\"\n    :type f: List[int]\n    :rtype: int\n    \"\"\"\n    return max(sum(f[0:len(f)/2]), sum(f[len(f)/2:len(f)]))\n\nif __name__ == \"__main__\":\n    print(maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(maxSum([1, 2, 3, 4, 5]))\n    print(maxSum([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))",
      -12.84375
    ],
    [
      "import collections\n\nclass Solution:\n    def maxSumSubarray(self, nums: List[int]) -> int:\n        \"\"\"\n        Brute Force\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        n = len(nums)\n        ans = 0\n        for i in range(n-1):\n            if nums[i] == 0:\n                continue\n            ans = max(ans, nums[i] + self.maxSumSubarray(nums[i:n]));\n        return ans\n\n    def maxSumSubarray_dp(self, nums: List[int]) -> int:\n        \"\"\"\n        Dynamic Programming\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        nums.sort()\n        ans = nums[0]\n        for i in range(1, n):\n            if nums[i] == 0:\n                continue\n            ans = max(ans, nums[i] + self.maxSumSubarray_dp(nums[:i]));\n        return ans\n\n    def maxSumSubarray_dp2(self, nums: List[int]) -> int:\n        \"\"\"\n        Dynamic Programming\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        nums.sort()\n        ans = nums[0]\n        for i in range(1, n):\n            if nums[i] == 0:\n                continue\n            ans = max(ans, nums[i] + self.maxSumSubarray_dp2(nums[:i]));\n        return ans\n\nif __name__ == \"__main__\":\n    print(Solution().maxSumSubarray([0,1,2,3,4]))\n    print(Solution().maxSumSubarray([0,0,0,0,0]))\n    print(Solution().maxSumSubarray([1,2,3,4,5]))\n    print(Solution().max",
      -12.921875
    ],
    [
      "# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def maxSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        ans = 0\n        for i in xrange(len(nums)):\n            ans = max(ans, nums[i] + self.maxSum(nums[:i] + nums[i+1:]))\n        return ans\n\n# Note:\n#\n# The problem is to find the maximum sum of the elements between two given points.\n#\n# A. Consider the following equation:\n# f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n# f(n/2) = f(n/3) + f(n/4)\n# f(n/3) = f(n/4) + f(n/5)\n# f(n/4) = f(n/5)\n# f(n/5) = f(n/6) + f(n/7) + f(n/8) + f(n/9) + f(n/10) + f(n/11) + f(n/12)\n# f(n/6) = f(n/7) + f(n/8) + f(n/9) + f(n/10) + f(n/11) + f(n/12)\n# f(n/7) = f(n/8) + f(n/9) + f(n/10) + f(n/11) + f(n/12)\n# f(n/8) = f(n/9) + f(n/10) + f(n/11) + f(n/12)\n# f(n/9) = f(n/10) + f(n/11) + f(n/12)\n# f(",
      -13.2578125
    ],
    [
      "# @include\ndef max_sum_by_recursion(f):\n    max_sum = 0\n    # Base case\n    if f == 0:\n        return 0\n    # Recursion case\n    for i in range(1, f + 1):\n        if i % 2 == 0:\n            max_sum = max(max_sum, f + i)\n        elif i % 3 == 0:\n            max_sum = max(max_sum, f + i + i)\n        elif i % 4 == 0:\n            max_sum = max(max_sum, f + i + i + i)\n        else:\n            max_sum = max(max_sum, f + i + i + i + i)\n    return max_sum\n# @exclude\n\n\ndef max_sum_by_recursion(f):\n    # Base case\n    if f == 0:\n        return 0\n    # Recursion case\n    max_sum = f + f + f + f\n    for i in range(2, f + 1):\n        if i % 2 == 0:\n            max_sum = max(max_sum, f + f + i)\n        elif i % 3 == 0:\n            max_sum = max(max_sum, f + f + i + i)\n        elif i % 4 == 0:\n            max_sum = max(max_sum, f + f + i + i + i)\n        else:\n            max_sum = max(max_sum, f + f + i + i + i + i)\n    return max_sum\n\n\nif __name__ == '__main__':\n    f = 0\n    assert max_sum_by_recursion(f) == 0, 'f(n) = 0'\n    f = 1\n    assert max_sum_by_recursion(f) == 1, 'f(n) = 1'\n    f = 5\n    assert max_sum_by_recursion(f) == 5, 'f(n) = 5'\n    f = 7\n    assert max_sum_by_recursion(f) == 7, 'f(n) = 7'\n    f = 13\n    assert max_sum_by_recursion",
      -13.5
    ],
    [
      "class Solution:\n    # @param {int[]} nums\n    # @return {int}\n    def maxSum(self, nums):\n        # Find the maximum sum of the sub-arrays\n        # return max(self.maxSubSum(nums), nums[0] + self.maxSubSum(nums[1:]))\n        return max(self.maxSubSum(nums), nums[0])\n\n    # Find the maximum sum of the sub-arrays\n    def maxSubSum(self, nums):\n        # Sum of the first half of the sub-arrays\n        sum_first = 0\n        # Sum of the second half of the sub-arrays\n        sum_second = 0\n        # Find the maximum sum of the sub-arrays\n        for i in range(len(nums)):\n            if i % 2 == 0:\n                sum_first = sum_first + nums[i]\n            else:\n                sum_second = max(sum_second, nums[i] + sum_first)\n        return max(sum_first, sum_second)\n\n\nif __name__ == \"__main__\":\n    print Solution().maxSum([1, 2, 1, 1, 3])",
      -13.546875
    ],
    [
      "# https://www.hackerrank.com/challenges/sums-of-divisible-sub-squares/problem\n\ndef get_max_sum(n):\n    # Base Case\n    if n == 0:\n        return 0\n    # Recursive Case\n    return max(get_max_sum(n/2), get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_max_sum(2) == 4, \"Find the max sum for 2\"\n    assert get_max_sum(3) == 15, \"Find the max sum for 3\"\n    assert get_max_sum(4) == 24, \"Find the max sum for 4\"\n    assert get_max_sum(5) == 35, \"Find the max sum for 5\"\n    assert get_max_sum(6) == 56, \"Find the max sum for 6\"\n    assert get_max_sum(7) == 84, \"Find the max sum for 7\"\n    assert get_max_sum(8) == 112, \"Find the max sum for 8\"\n    assert get_max_sum(9) == 144, \"Find the max sum for 9\"\n    assert get_max_sum(10) == 200, \"Find the max sum for 10\"",
      -13.6484375
    ],
    [
      "from collections import Counter\nfrom math import floor\n\ndef find_max_sum(eqn):\n    \"\"\"\n    :type eqn: str\n    :rtype: int\n    \"\"\"\n    result = 0\n    numerator = 0\n    denominator = 0\n    for i, c in enumerate(eqn):\n        if c == '+':\n            numerator += float(eqn[i:i+3])\n            denominator += 1\n        elif c == '-':\n            numerator -= float(eqn[i:i+3])\n            denominator += 1\n        elif c == '*':\n            numerator *= float(eqn[i:i+3])\n            denominator += 1\n        elif c == '/':\n            numerator /= float(eqn[i:i+3])\n            denominator += 1\n    result = max(result, numerator / denominator)\n    return result\n\ndef test_find_max_sum():\n    assert find_max_sum(\"2 + 3 + 4 + 5\") == 6\n    assert find_max_sum(\"2 - 3 + 4 + 5\") == 2\n    assert find_max_sum(\"2 * 3 + 4 + 5\") == 6\n    assert find_max_sum(\"2 / 3 + 4 + 5\") == 2\n    assert find_max_sum(\"2 + 3 * 4 + 5\") == 10\n    assert find_max_sum(\"2 * 3 + 4 * 5\") == 20\n    assert find_max_sum(\"2 + 3 / 4 + 5\") == 3\n    assert find_max_sum(\"2 * 3 / 4 + 5\") == 2\n    assert find_max_sum(\"2 * 3 + 4 / 5\") == 4\n    assert find_max_sum(\"2 * 3 + 4 / 5\") == 2\n    assert find_max_sum(\"2 * 3 + 4 / 5\") == 2\n\ndef main():\n    test_find_max_sum()\n\nif __name__ == '__main__':\n    main()",
      -13.7109375
    ],
    [
      "def max_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return max(sum(f(n/2) for f in f_list), n)\n\ndef f(n):\n    \"\"\"\n    :type n: int\n    :rtype: list[int]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    f_list = []\n    f_list.append(f(n/2))\n    f_list.append(f(n/3))\n    f_list.append(f(n/4))\n    f_list.append(f(n/5))\n    f_list.append(f(n/6))\n    f_list.append(f(n/7))\n    f_list.append(f(n/8))\n    f_list.append(f(n/9))\n    f_list.append(f(n/10))\n    f_list.append(f(n/11))\n    f_list.append(f(n/12))\n    f_list.append(f(n/13))\n    f_list.append(f(n/14))\n    f_list.append(f(n/15))\n    return f_list\n\nif __name__ == \"__main__\":\n    assert max_sum(0) == 0\n    assert max_sum(1) == 1\n    assert max_sum(2) == 2\n    assert max_sum(3) == 3\n    assert max_sum(4) == 4\n    assert max_sum(5) == 5\n    assert max_sum(6) == 6\n    assert max_sum(7) == 7\n    assert max_sum(8) == 8\n    assert max_sum(9) == 9\n    assert max_sum(10) == 10\n    assert max_sum(11) == 11\n    assert max_sum(12) == 12\n    assert max_sum(13) == 13\n    assert max_sum(14) == 14\n    assert max_sum(15) == 15\n    assert max_sum(16) == 16",
      -13.921875
    ],
    [
      "import math\nimport timeit\n\n\nclass Solution(object):\n    def maxSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            if i & 1:\n                ans = max(ans, (sum(nums[:i]) + sum(nums[i:]) + (sum(nums[i::2]) + sum(nums[i::3])) + (sum(nums[i::4]) + sum(nums[i::5])))\n                          - (sum(nums[:i]) + sum(nums[i:]) + (sum(nums[i::2]) + sum(nums[i::3])) + (sum(nums[i::4]) + sum(nums[i::5]))))\n            else:\n                ans = max(ans, (sum(nums[:i]) + sum(nums[i:]) + (sum(nums[i::2]) + sum(nums[i::3])) + (sum(nums[i::4]) + sum(nums[i::5])))\n                          + (sum(nums[:i]) + sum(nums[i:]) + (sum(nums[i::2]) + sum(nums[i::3])) + (sum(nums[i::4]) + sum(nums[i::5]))))\n        return ans\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.maxSum([2, 3, 4, 5, 6, 7, 8]))\n    print(sol.maxSum([1, 2, 3, 4, 5]))\n    print(sol.maxSum([1, 2, 3]))",
      -14.125
    ],
    [
      "class Solution(object):\n    def maxSumTwoSquares(self, f):\n        \"\"\"\n        :type f: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(f)\n        if n < 2:\n            return 0\n        max_sum = 0\n        for i in xrange(n/2):\n            max_sum = max(max_sum, self.find(f, i, n/2))\n        max_sum = max(max_sum, self.find(f, n/2, n/2))\n        max_sum = max(max_sum, self.find(f, n/2, n/3))\n        max_sum = max(max_sum, self.find(f, n/2, n/4))\n        max_sum = max(max_sum, self.find(f, n/2, n/5))\n        return max_sum\n\n    def find(self, f, i, j):\n        if i == j:\n            return f[i]\n        mid = (i+j)/2\n        return max(self.find(f, i, mid), self.find(f, mid+1, j))\n\nif __name__ == '__main__':\n    assert Solution().maxSumTwoSquares([2, 3, 4, 5]) == 20",
      -14.3828125
    ],
    [
      "from __future__ import print_function\n\nimport math\n\n\ndef solve(f):\n    \"\"\"\n    :type f: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(f)\n    ans = 0\n\n    for i in range(1, n//2):\n        ans = max(ans, f[i] + f[n//2-i])\n        ans = max(ans, f[i] + f[n//2-i-1])\n        ans = max(ans, f[n//2-i] + f[n//2-i-1])\n\n    return ans\n\n\nif __name__ == '__main__':\n    f = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    print(solve(f))",
      -14.5546875
    ],
    [
      "class Solution(object):\n    def maxSum(self, f):\n        \"\"\"\n        :type f: List[int]\n        :rtype: int\n        \"\"\"\n        return self.maxSum1(f, 0, len(f)-1)\n\n    def maxSum1(self, f, start, end):\n        if start > end:\n            return 0\n        if start == end:\n            return f[start]\n        middle = (start + end) / 2\n        return max(self.maxSum1(f, start, middle), self.maxSum1(f, middle+1, end))\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.maxSum([-1, -1, -1]) == 3\n    assert sol.maxSum([-1, -2, -3, -4]) == 6\n    assert sol.maxSum([-2, -1, -1, -1]) == -2\n    assert sol.maxSum([-1, -1, -1, -1, -1]) == -3\n    assert sol.maxSum([-1, -1, -1, -1, -1, -1]) == -4\n    assert sol.maxSum([-1, -1, -1, -1, -1, -1, -1]) == -5",
      -14.609375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef max_sum(f):\n    max_sum = f[0]\n    for i in range(len(f)):\n        max_sum = max(max_sum, f[i] + max_sum)\n    return max_sum\n\ndef main():\n    f = [1, 1, 1, 1, 1]\n    f = [2, 2, 2, 2, 2]\n    f = [3, 3, 3, 3, 3]\n    f = [4, 4, 4, 4, 4]\n    f = [5, 5, 5, 5, 5]\n    f = [6, 6, 6, 6, 6]\n    f = [7, 7, 7, 7, 7]\n    f = [8, 8, 8, 8, 8]\n    f = [9, 9, 9, 9, 9]\n    f = [10, 10, 10, 10, 10]\n    f = [11, 11, 11, 11, 11]\n    f = [12, 12, 12, 12, 12]\n    f = [13, 13, 13, 13, 13]\n    f = [14, 14, 14, 14, 14]\n    f = [15, 15, 15, 15, 15]\n    f = [16, 16, 16, 16, 16]\n    f = [17, 17, 17, 17, 17]\n    f = [18, 18, 18, 18, 18]\n    f = [19, 19, 19, 19, 19]\n    f = [20, 20, 20, 20, 20]\n    f = [21, 21, 21, 21, 21]\n    f = [22, 22, 22, 22, 22]\n    f = [23, 23, 23, 23, 23]\n    f = [24, 24, 24, 24, 24]\n    f = [25, 25, 25, 25, 25]\n    f = [26, 26, 26, 26, 26]\n    f = [27, 27, 27, 27, 27]\n    f = [28, 28, 28, 28, 28]",
      -14.8203125
    ],
    [
      "# The main idea is to solve the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n), and then find the maximum of the resulting sum.\n# The first two equations are the same, so we can solve the first one.\n# Then, we need to find the maximum of the three solutions (there are three).\n# The solution is the same as the second one, except that we need to compute the sum from the second to the fourth one.\n# Thus, we need to find the maximum of the three solutions.\n# The only difference is that we need to include the second and fourth equation.\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n# def max_sum(self, f):\n#     # return self.solve(f, 0, len(f)-1)\n#     # return self.solve(f, 0, len(f)-1)\n#     return self.solve(f, 0, len(f)-1)\n\n\ndef max_sum(self, f):\n    # return self.solve(f, 0, len(f)-1)\n    # return self.solve(f, 0, len(f)-1)\n    return self.solve(f, 0, len(f)-1)\n\n\ndef solve(f, i, j):\n    if i == j:\n        return f[i]\n    if i > j:\n        return -1\n\n    if f[i] > f[j]:\n        return solve(f, i+1, j)\n    else:\n        return solve(f, i, j+1)\n\n\nif __name__ == '__main__':\n    f = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_sum(f))",
      -15.59375
    ],
    [
      "import math\nimport timeit\n\n\n# @include\ndef max_sum_of_triangle(n):\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n# @exclude\n\n\ndef f(n):\n    return math.pow(n, 2) + math.pow(n, 3) + math.pow(n, 4) + math.pow(n, 5)\n\n\ndef main():\n    for _ in range(1000):\n        n = random.randint(1, 100000)\n        print(n, max_sum_of_triangle(n))\n        assert max_sum_of_triangle(n) == max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\n\nif __name__ == '__main__':\n    t = timeit.Timer(\"main()\", setup=\"from __main__ import main\")\n    print(t.timeit(number=1))",
      -15.9453125
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    \"\"\"\n    @param: n: An integer\n    @return: An integer\n    \"\"\"\n    def maxSum(self, f, n):\n        if f[0] > f[1]:\n            return self.maxSum(f[1:], n)\n        else:\n            return self.maxSum(f[0:], n)\n\n    def maxSum(self, f, n):\n        if n == 0:\n            return 0\n        else:\n            max_sum = f[0]\n            for i in range(1, n+1):\n                max_sum = max(max_sum + f[i], max_sum + f[i-1])\n            return max_sum\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maxSum([1,2,3,4,5], 5)",
      -16.734375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}