{
  "problem": {
    "task_id": "MBPP/118",
    "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
    "test_list": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ],
    "challenge_test_list": [],
    "problem_id": 107
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import re\n\ndef to_list(s):\n    return re.findall(r\"[a-zA-Z0-9]+\", s)\n\nprint(to_list(\"https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https://www.facebook.com/sharer/sharer.php?u=https",
      2.462890625
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def stringToList(self, s):\n        res = []\n        cur = 0\n        while cur < len(s):\n            if s[cur] == ')':\n                res.append(s[cur+1:])\n                cur += 1\n            else:\n                cur += 1\n        return res",
      0.03704833984375
    ],
    [
      "import re\n\nclass Solution(object):\n    def strToList(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: List[str]\n        \"\"\"\n        list = re.split('\\s+', str)\n        return list\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.strToList('a b c')",
      0.023895263671875
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        res = []\n        cur = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                cur.append(s[i:])\n            elif s[i] == ')':\n                res.append(''.join(cur))\n                cur = []\n            elif s[i] == ',':\n                cur.append(s[i:])\n            else:\n                cur.append(s[i])\n        res.append(''.join(cur))\n        return res\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"",
      0.01568603515625
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @return {string[]}\n    def toSentenceString(self, s):\n        res = []\n        p = s.find(\"(\");\n        while p!= -1:\n            res.append(s[:p])\n            s = s[p+1:]\n            p = s.find(\"(\", p+1)\n        res.append(s)\n        return res\n\n    # @param {string} s\n    # @return {string[]}\n    def toSentenceString2(self, s):\n        res = []\n        p = s.find(\"(\");\n        while p!= -1:\n            res.append(s[:p])\n            s = s[p+1:]\n            p = s.find(\")\", p+1)\n        res.append(s)\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.toSentenceString(\"(Hello, world) (a test) (and another test)\"))\n    print(s.toSentenceString2(\"(Hello, world) (a test) (and another test)\"))",
      -0.0010862350463867188
    ],
    [
      "class Solution:\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[x:x+2] for x in range(0, len(s), 2)]\n\nclass Solution1:\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[x:x+2] for x in range(0, len(s), 2)]\n\nclass Solution2:\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[x:x+2] for x in range(0, len(s), 2)]\n\nclass Solution3:\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[x:x+2] for x in range(0, len(s), 2)]\n\nclass Solution4:\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[x:x+2] for x in range(0, len(s), 2)]\n\nclass Solution5:\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[x:x+2] for x in range(0, len(s), 2)]\n\nclass Solution6:\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[x:x+2] for x in range(0, len(s), 2)]\n\nclass Solution7:\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[x:x+2] for x in range(0,",
      -0.2279052734375
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        res = []\n        for i in range(len(s)):\n            if s[i] == ')':\n                res.append(s[i+1:])\n                break\n            elif s[i] == '(':\n                res.append(s[:i])\n                res.append(s[i+1:])\n                break\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().toList('(()(())())')",
      -0.2489013671875
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split()",
      -0.310791015625
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(0, len(s)):\n            if s[i] == '(' or s[i] == ')':\n                res.append(s[i])\n            elif s[i] == ',':\n                if res and res[-1] == '(' and res[-2] == ')':\n                    res.pop()\n                    res.pop()\n                else:\n                    res.append(s[i])\n            elif s[i] == '[':\n                if res and res[-1] == '(' and res[-2] == ')':\n                    res.pop()\n                    res.pop()\n                else:\n                    res.append(s[i])\n            elif s[i] == ']':\n                if res and res[-1] == '(' and res[-2] == ')':\n                    res.pop()\n                    res.pop()\n                else:\n                    res.append(s[i])\n        return res",
      -0.31494140625
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @return {string[]}\n    def stringToLIS(self, s):\n        if not s:\n            return []\n        dp = [[0 for _ in xrange(len(s) + 1)] for _ in xrange(len(s) + 1)]\n        for i in xrange(1, len(s) + 1):\n            for j in xrange(1, i + 1):\n                if s[i - j] == s[j - 1]:\n                    dp[i][j] = dp[i - j][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i][j - 1], dp[i - j][j])\n        return dp[len(s)][len(s) - 1]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.stringToLIS(\"aba\"))",
      -0.464599609375
    ],
    [
      "# https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/\n\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: TreeNode\n        \"\"\"\n        if head is None:\n            return None\n        cur = head\n        prev = None\n        while cur:\n            prev = cur\n            cur = cur.next\n        cur = prev\n        prev = None\n        while cur:\n            if cur.val < cur.next.val:\n                cur = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        return TreeNode(head.val, self.sortedListToBST(prev))\n\n\nclass TreeNode(object):\n    def __init__(self, val, left, right):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ns = Solution()\n\nprint(s.sortedListToBST([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))",
      -0.65576171875
    ],
    [
      "class Solution(object):\n    def my_str2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [i for i in s]\n\n\nif __name__ == \"__main__\":\n    assert Solution().my_str2list(\"hello world\") == [\"hello\", \"world\"], \"hello world\"\n    assert Solution().my_str2list(\"hello, world\") == [\"hello\", \"world\"], \"hello, world\"\n    assert Solution().my_str2list(\"hello, world!\\n\") == [\"hello\", \"world!\", \"\"], \"hello, world!\"\n    assert Solution().my_str2list(\"hello, world!\\r\\n\") == [\"hello\", \"world!\", \"\"], \"hello, world!\"\n    assert Solution().my_str2list(\"hello, world!\\n\\r\") == [\"hello\", \"world!\", \"\"], \"hello, world!\"",
      -0.6630859375
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [x for x in s]",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [[s[i:i+2] for i in range(0, len(s), 2)] for _ in range(0, len(s), 2)]",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split(' ')\n\n\n\na = Solution()\nprint(a.toList('write a function to convert a string to a list.'))",
      -0.85693359375
    ],
    [
      "import re\n\ndef to_list(s):\n    return re.findall(r'\\w+', s)\n\nif __name__ == '__main__':\n    s = \"Hello World\"\n    print(to_list(s))",
      -0.85693359375
    ],
    [
      "# https://leetcode.com/problems/convert-a-string-to-a-list-ii/description/\n\nclass Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(s)):\n            if i % 2 == 0:\n                result.append(s[i])\n        return result",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/strings/problem\n\nimport re\n\n\ndef convertToList(string):\n    list_of_strings = []\n    for char in string:\n        if char =='':\n            list_of_strings.append(' ')\n        else:\n            list_of_strings.append(char)\n    return list_of_strings\n\n\ndef main():\n    string = input()\n    list_of_strings = convertToList(string)\n    print(' '.join(list_of_strings))\n    \nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0: return 1\n        if n < 0: return 1 / self.myPow(x, -n)\n        if n == 1: return x\n        if n % 2 == 0:\n            return self.myPow(x * x, n / 2)\n        else:\n            return x * self.myPow(x * x, n / 2)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def convertToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        res = []\n        stack = []\n        for i, char in enumerate(s):\n            if char == \"(\":\n                stack.append(char)\n            elif char == \")\":\n                if stack:\n                    stack.pop()\n                else:\n                    res.append(s[i-1])\n            elif char == \" \":\n                if stack:\n                    res.append(s[i-1])\n            else:\n                res.append(char)\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.convertToList(\"(()()()()()())\"))\n    print(sol.convertToList(\"()()()()()\"))\n    print(sol.convertToList(\"()()()()()()()()()()()()()\"))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        stack = []\n        for char in s:\n            if char == ')':\n                while stack and stack[-1]!= '(':\n                    result.append(stack.pop())\n            elif char == '(':\n                stack.append(char)\n            else:\n                stack.append(char)\n        return result",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: List[float]\n        \"\"\"\n        if n == 0:\n            return [1]\n        result = []\n        if n < 0:\n            result.append(1)\n            n = -n\n        while n!= 0:\n            if n % 2 == 1:\n                result.append(x)\n            x *= x\n            n /= 2\n        return result",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i + 3] for i in range(0, len(s), 3)]\n\n\nif __name__ == \"__main__\":\n    print Solution().string2list(\"aabcc\")",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def stringToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return self.strToList(s)\n\n    def strToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split()",
      -0.85791015625
    ],
    [
      "import re\n\n\nclass Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return re.findall(r'\\[.+?\\]', s)\n\n\ndef main():\n    s = Solution()\n    print s.toList(\"[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\")\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "from __future__ import print_function\n\nimport re\nimport collections\n\n# Returns a list of all the links in a string\ndef links(string):\n    links = []\n    regex = re.compile(r'\\[(https?://[^\\]]+)\\]')\n    for match in regex.finditer(string):\n        links.append(match.group(0))\n    return links\n\nif __name__ == '__main__':\n    string = \"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\n    print(links(string))",
      -0.85791015625
    ],
    [
      "#!/bin/python\n\nclass Solution(object):\n    def parse_url(self, url):\n        \"\"\"\n        :type url: str\n        :rtype: List[str]\n        \"\"\"\n        return url.split(\" \")\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.parse_url(\"http://google.com/\")\n    print solution.parse_url(\"http://google.com/index.html\")",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def stringToInteger(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        return [int(s[i:i + 2]) for i in range(0, len(s), 2)]",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:j] for i, j in zip(range(len(s)), range(len(s)) + [len(s)]) if s[i:j] == s[i:j+1]]",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def toList(self, string):\n        \"\"\"\n        :type string: str\n        :rtype: List[str]\n        \"\"\"\n        return list(string)\n\n\nif __name__ == '__main__':\n    assert Solution().toList('Hello') == ['H','e','l','l','o']\n    assert Solution().toList('Hello World') == ['Hello','World']",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split(' ')",
      -0.85791015625
    ],
    [
      "import re\n\ndef toList(s):\n    return [x for x in re.split(r'(\\W+)', s) if x]\n\nprint(toList('Hello, world! How are you?'))\nprint(toList('Hello, world! How are you?').count(' '))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n\n        return [x for x in s]",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split(\" \")\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.toList(\"https://www.google.com https://www.youtube.com https://www.baidu.com\")\n    print sol.toList(\"\")\n    print sol.toList(\"\")\n    print sol.toList(\"\")\n    print sol.toList(\"\")\n    print sol.toList(\"\")\n    print sol.toList(\"\")\n    print sol.toList(\"\")",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/string-to-integer-atoi/\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        l = len(str)\n        i = 0\n        while i < l and str[i] =='':\n            i += 1\n        num = 0\n        while i < l:\n            if not str[i].isdigit():\n                break\n            num = num * 10 + int(str[i])\n            i += 1\n        if num < 0:\n            num = -num\n        return num",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/string-to-list\n\nimport re\nimport unittest\n\n\ndef string_to_list(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return [s[i:i+2] for i in range(0, len(s), 2)]\n\nclass TestStringToList(unittest.TestCase):\n    def test_string_to_list(self):\n        s = 'ababbccddee'\n        self.assertEqual(string_to_list(s), ['ab', 'bb', 'cc', 'dd', 'ee'])\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i + 2] for i in range(0, len(s), 2)]",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toList(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: List[str]\n        \"\"\"\n        return str.split(\" \")",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def stringToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [x.strip() for x in s.split(\" \") if x]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 6ms 100%\nclass Solution {\n    public List<String> stringToList(String s) {\n        List<String> res = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            if (word.length() > 1) res.add(word.substring(1));\n            else res.add(word);\n        }\n        return res;\n    }\n}\n\n# 7ms 100%\nclass Solution {\n    public List<String> stringToList(String s) {\n        List<String> res = new ArrayList<>();\n        if (s.length() == 0) return res;\n\n        for (int i = 0; i < s.length(); i++) {\n            String word = s.substring(i, i+1);\n            if (i < s.length()-1) {\n                if (s.charAt(i+1) =='') {\n                    res.add(word);\n                } else {\n                    res.add(word + s.charAt(i+1));\n                }\n            } else {\n                res.add(word);\n            }\n        }\n        return res;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public List<String> stringToList(String s) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            String word = s.substring(i, i+1);\n            if (i < s.length()-1) {\n                if (s.charAt(i+1) =='') {",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def stringToLinkedList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not s:\n            return []\n        \n        result = []\n        \n        for i in range(0, len(s)):\n            if s[i] == '(':\n                result.append(s[i:])\n                \n        return result\n        \n        \n    \n    \nif __name__ == '__main__':\n    s = Solution()\n    s = '((()))'\n    print s.stringToLinkedList(s)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toList(self, string):\n        \"\"\"\n        :type string: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(string)):\n            if string[i] == ')':\n                result.append(string[0:i])\n                string = string[i+1:]\n        result.append(string)\n        return result",
      -0.8583984375
    ],
    [
      "import re\n\ndef convert_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    return re.findall(r'\\[\\[(.*?)\\]\\]', string)\n\nprint convert_string('[[[http://www.python.org]]]write a function to convert a string to a list.')",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toList(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in xrange(len(str)):\n            if str[i] == '(' or str[i] == ')':\n                res.append(str[i])\n            else:\n                res.append(str[i] + str[i+1])\n        return res",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def strToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        i = 0\n        while i < len(s):\n            if s[i] == ')':\n                result.append(s[i+1:])\n                i = i + 1\n            else:\n                i = i + 1\n        return result",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split(' ')",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return list(s)",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\nclass Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split(' ')\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = 'write a function to convert a string to a list'\n    print(sol.toList(s))",
      -0.8583984375
    ],
    [
      "import re\n\ndef convert(string):\n    return re.sub('(\\bhttps?://[^\\s]*)\\b', r'\\1', string)\n\nprint(convert('this is a link'))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [x for x in s]",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def stringToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # check if there is a space in the string\n        # if yes, split the string into 2 parts\n        if'' in s:\n            return self.stringToList(s.split(' '))\n        \n        # otherwise, split the string into 1 part\n        else:\n            return [s]",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i+2] for i in range(0, len(s), 2)]",
      -0.85888671875
    ],
    [
      "class Solution:\n    def stringToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return int(s) if s.isdigit() else -1\n\n    def stringToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for char in s:\n            if char =='':\n                result.append(0)\n            elif char == '-':\n                result.append(-1)\n            elif char.isdigit():\n                result.append(self.stringToInt(char))\n            else:\n                return []\n        return result",
      -0.85888671875
    ],
    [
      "import re\n\n# \u4ee5\u4e0b\u662f\u7b80\u5355\u7684\u5206\u6790\ndef parse(s):\n    \"\"\"\n    :param s: str\n    :return: list\n    \"\"\"\n    return [x for x in re.split(r\"[\\s,]+\", s)]\n\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://www.python.org/ \"))\nprint(parse(\"https://",
      -1.013671875
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @return {string[]}\n    def strToLines(self, s):\n        if not s:\n            return []\n        res = []\n        i = 0\n        while i < len(s):\n            if s[i] == '\\n':\n                res.append(s[:i])\n                s = s[i + 1:]\n                i = 0\n            else:\n                i += 1\n        res.append(s)\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.strToLines(\"hello world\\nhow are you\")\n    print s.strToLines(\"hello\\nworld\\nhow are you\")\n    print s.strToLines(\"\")\n    print s.strToLines(\"\\n\")",
      -1.01953125
    ],
    [
      "# https://leetcode.com/problems/convert-a-string-to-a-list/\n\nclass Solution:\n    def stringToList(self, s: str) -> List[int]:\n        return map(int, s.split())\n\n    def stringToList_alt(self, s: str) -> List[int]:\n        return [int(x) for x in s.split()]",
      -1.080078125
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def stringToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        def toList(s):\n            return [x for x in s.split(' ') if x]\n        return toList(s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.stringToList('a b c')\n    print s.stringToList('a b c d')\n    print s.stringToList('a b c d e')\n    print s.stringToList('a b c d e f')\n    print s.stringToList('a b c d e f g')\n    print s.stringToList('a b c d e f g h')\n    print s.stringToList('a b c d e f g h i')",
      -1.169921875
    ],
    [
      "# https://leetcode.com/problems/string-to-integer-array/\n\nclass Solution(object):\n    def strToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(len(s)):\n            res.append(ord(s[i]) - ord('0'))\n        return res\n\ns = Solution()\ns.strToInt(\"\")\ns.strToInt(\"123\")\ns.strToInt(\"12345\")\ns.strToInt(\"12345678\")",
      -1.3779296875
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split(' ')",
      -1.4208984375
    ],
    [
      "import re\n\ndef to_list(s):\n    return [x for x in re.split(r'\\s+', s) if x]\n\nclass Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return to_list(s)",
      -1.591796875
    ],
    [
      "#!/bin/python\n\nclass Solution(object):\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if s == \"\":\n            return []\n        return [x.strip() for x in s.split(\"\\n\")]\n\n    def test(self):\n        assert self.string2list(\"\") == []\n        assert self.string2list(\"abc\") == [\"abc\"]\n        assert self.string2list(\"abc\\ndef\") == [\"abc\", \"def\"]\n        assert self.string2list(\"abc\\ndef\\nghi\") == [\"abc\", \"def\", \"ghi\"]\n        assert self.string2list(\"abc\\ndef\\nghi\\njkl\\n\") == [\"abc\", \"def\", \"ghi\", \"jkl\"]\n        assert self.string2list(\"abc\\ndef\\nghi\\njkl\\n\\n\") == [\"abc\", \"def\", \"ghi\", \"jkl\", \"\"]\n        assert self.string2list(\"\\n\\n\") == [\"\"]\n        assert self.string2list(\"\\n\\n\\n\") == [\"\"]\n        assert self.string2list(\"abc\\n\\n\\ndef\\n\\nghi\\n\\njkl\\n\\n\") == [\"abc\", \"\", \"def\", \"\", \"ghi\", \"\", \"jkl\", \"\", \"\"]\n\n\ns = Solution()\ns.test()",
      -1.6142578125
    ],
    [
      "import re\n\ndef convert(str):\n    str = str.lower()\n    pattern = re.compile(\"[a-z0-9]*\")\n    return pattern.findall(str)\n\nif __name__ == '__main__':\n    print convert(\"hello world\")\n    print convert(\"Hello World\")\n    print convert(\"hello world123\")\n    print convert(\"Hello World123\")\n    print convert(\"hello123\")\n    print convert(\"Hello123\")\n    print convert(\"123 hello world\")\n    print convert(\"123 hello world123\")\n    print convert(\"123 hello world123456789\")\n    print convert(\"123 hello world
      -1.615234375
    ],
    [
      "class Solution:\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return list(map(lambda x: x.strip(), s.split(\" \")))\n\n\"\"\"\n[JAVA]:\n1. split\n2. map\n3. filter\n\"\"\"\n\nclass Solution:\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return list(filter(lambda x: x, map(lambda x: x.strip(), s.split(\" \"))))\n\n\"\"\"\n[JAVA]:\n1. filter\n2. map\n3. filter\n\"\"\"\n\nclass Solution:\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return filter(lambda x: x, map(lambda x: x.strip(), s.split(\" \")))",
      -1.615234375
    ],
    [
      "import re\n\ndef to_list(string):\n    return re.findall(r'[a-zA-Z0-9]', string)\n\n\nif __name__ == '__main__':\n    print(to_list(\"a\"))\n    print(to_list(\"ab\"))\n    print(to_list(\"abc\"))\n    print(to_list(\"abcd\"))\n    print(to_list(\"abcde\"))\n    print(to_list(\"abcdef\"))\n    print(to_list(\"abcdefg\"))\n    print(to_list(\"abcdefgh\"))\n    print(to_list(\"abcdefghi\"))\n    print(to_list(\"abcdefghij\"))",
      -2.0859375
    ],
    [
      "class Solution:\n    def toList(self, s):\n        if not s:\n            return []\n        res = []\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append('(')\n            elif c == ')':\n                while stack and stack[-1] == '(':\n                    res.append(stack.pop())\n                stack.pop()\n            else:\n                stack.append(c)\n        while stack:\n            res.append(stack.pop())\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.toList('()'))\n    print(s.toList(')()'))\n    print(s.toList('()(()(()())))'))\n    print(s.toList
      -2.138671875
    ],
    [
      "class Solution(object):\n    def stringToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split()",
      -2.34375
    ],
    [
      "class Solution(object):\n    def stringToList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        return [s[i:i+8] for i in range(0, len(s), 8)]\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print(sol.stringToList('a'))\n    print",
      -2.52734375
    ],
    [
      "from string import ascii_uppercase\nfrom collections import defaultdict\n\ndef to_list(s):\n    return list(map(str.strip, s.split(',')))\n\ndef convert(s):\n    if not s:\n        return None\n    return to_list(s)\n\ndef main():\n    with open('input.txt', 'r') as f:\n        lines = f.readlines()\n    n = int(lines[0])\n    s = lines[1]\n    res = []\n    for i in range(n):\n        res.append(convert(s[i]))\n    return res\n\nif __name__ == '__main__':\n    print(main())",
      -2.568359375
    ],
    [
      "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<string> strToVec(string str) {\n        vector<string> ans;\n        string s = str;\n        int len = s.length();\n        for (int i = 0; i < len; i++) {\n            if (s[i] == '(') {\n                for (int j = i + 1; j < len; j++) {\n                    if (s[j] == ')') {\n                        ans.push_back(s.substr(i + 1, j - i - 1));\n                        i = j + 1;\n                        break;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n\nint main(int argc, char const *argv[])\n{\n    Solution s;\n    vector<string> ans = s.strToVec(\"(()\");\n    for (vector<string>::iterator it = ans.begin(); it!= ans.end(); ++it) {\n        cout << *it << endl;\n    }\n    return 0;\n}",
      -2.91796875
    ],
    [
      "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport re\nfrom string import digits\n\ndef str_to_list(s):\n    return [int(c) for c in s]\n\ndef list_to_str(l):\n    return ''.join(str(c) for c in l)\n\ndef str_to_hex(s):\n    return ''.join(sorted(re.findall('[0-9a-fA-F]+', s)))\n\ndef hex_to_str(h):\n    return ''.join(str(c) for c in h)\n\ndef main():\n    s = '1a2b3c4d5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v23w24x25y26z270123456789'\n    print str_to_list(s)\n    print list_to_str(str_to_list(s))\n    print str_to_hex(s)\n    print hex_to_str(str_to_hex(s))\n\nif __name__ == '__main__':\n    main()",
      -2.990234375
    ],
    [
      "import re\n\ndef toList(text):\n    # match all the links in the string\n    links = re.findall(r'https?://(?:[^\\s]+\\.)?[^\\s]+', text)\n\n    # create a list of all the links\n    return links\n\ndef testToList():\n    assert(toList('https://www.python.org') == ['https://www.python.org'])\n    assert(toList('this is a link: https://www.python.org') == ['https://www.python.org'])\n    assert(toList('https://www.python.org:8080/index.html') == ['https://www.python.org:8080/index.html'])\n    assert(toList('https://www.python.org/index.html') == ['https://www.python.org/index.html'])\n    assert(toList('this is a link: https://www.python.org/index.html') == ['https://www.python.org/index.html'])\n    assert(toList('this is a link: https://www.python.org/index.html/') == ['https://www.python.org/index.html'])\n    assert(toList('this is a link: https://www.python.org/index.html/') == ['https://www.python.org/index.html'])\n    assert(toList('this is a link: https://www.python.org/index.html/') == ['https://www.python.org/index.html'])\n    assert(toList('this is a link: https://www.python.org/index.html/') == ['https://www.python.org/index.html'])\n    assert(toList('this is a link: https://www.python.org/index.html/') == ['https://www.python.org/index.html'])\n    assert(toList('this is a link: https://www.python.org/index.html/') == ['https://www.python.org/index.html'])\n    assert(toList('this is a link: https://www.python.org/index.html/') == ['https",
      -3.107421875
    ],
    [
      "# https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/\n\nclass Solution:\n    # @return a tree node\n    def sortedArrayToBST(self, nums):\n        return self.sortedArrayToBSTHelper(nums, 0, len(nums)-1)\n\n    def sortedArrayToBSTHelper(self, nums, start, end):\n        if start > end:\n            return None\n        mid = start + (end-start)/2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBSTHelper(nums, start, mid-1)\n        root.right = self.sortedArrayToBSTHelper(nums, mid+1, end)\n        return root\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ns = Solution()\nprint(s.sortedArrayToBST([4,2,1,3]))\nprint(s.sortedArrayToBST([2,3,4]))\nprint(s.sortedArrayToBST([1,2]))\nprint(s.sortedArrayToBST([1]))\nprint(s.sortedArrayToBST([1,2,3]))\nprint(s.sortedArrayToBST([3,2,1]))\nprint(s.sortedArrayToBST([3,2,1,4]))\nprint(s.sortedArrayToBST([3,2,1,4,5]))\nprint(s.sortedArrayToBST([-10,-1,1,10]))\nprint(s.sortedArrayToBST([-10,-1,1,10,9]))",
      -3.30859375
    ],
    [
      "class Solution(object):\n    def my_str_to_list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for c in s:\n            if c == '(' or c == ')':\n                result.append(c)\n            else:\n                result.append('(' + c + ')')\n        return result\n\ns = Solution()\nprint(s.my_str_to_list
      -3.443359375
    ],
    [
      "# https://leetcode.com/problems/convert-a-string-to-an-integer-list/\n\nclass Solution(object):\n    def stringToInteger(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        i = 0\n        while i < len(s):\n            while i < len(s) and s[i] =='':\n                i += 1\n            if i < len(s) and s[i] == '+':\n                res.append(int(s[:i]))\n                i += 1\n            if i < len(s) and s[i] == '-':\n                res.append(int(s[:i]))\n                i += 1\n            if i < len(s) and s[i] >= '0' and s[i] <= '9':\n                res.append(int(s[:i]))\n                i += 1\n        return res\n\n\na = Solution()\nprint(a.stringToInteger(\"+1 2 3 -4 5\"))\nprint(a.stringToInteger(\"-1 2 3 +4 5\"))\nprint(a.stringToInteger(\"++1 2 3 -4 5\"))\nprint(a.stringToInteger(\"-1 2 3 +4 5\"))",
      -3.455078125
    ],
    [
      "class Solution(object):\n    def strToList(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        stack = []\n        for c in str:\n            if c == '[':\n                stack.append(c)\n            elif c == ']':\n                if stack:\n                    stack.pop()\n            elif c == ',' and stack:\n                ret.append(''.join(stack))\n                stack = []\n            else:\n                stack.append(c)\n        if stack:\n            ret.append(''.join(stack))\n        return ret",
      -3.650390625
    ],
    [
      "class Solution(object):\n    def string2list(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        res = []\n        i = 0\n        while i < len(s):\n            if s[i] == '(' or s[i] == '[':\n                res.append(s[i:i+1])\n                i += 1\n            elif s[i] == ')':\n                while i < len(s) and s[i]!= '(':\n                    res.append(s[i])\n                    i += 1\n            elif s[i] == ']':\n                while i < len(s) and s[i]!= '[':\n                    res.append(s[i])\n                    i += 1\n            elif s[i] == '[':\n                while i < len(s) and s[i]!= ']':\n                    res.append(s[i])\n                    i += 1\n            elif s[i] == ']':\n                while i < len(s) and s[i]!= '[':\n                    res.append(s[i])\n                    i += 1\n            else:\n                res.append(s[i])\n            i += 1\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().string2list(\"()[]{}\")\n    print Solution().string2list(\"())[]{}\")\n    print Solution().string2list(\"()[]{}()\")\n    print Solution().string2list(\"()[][]{}()\")\n    print Solution().string2list(\"()[]{}()[]\")\n    print Solution().string2list(\"()[]{}()[][]\")\n    print Solution().string2list(\"()[]{}()[]{}\")",
      -3.78515625
    ],
    [
      "class Solution:\n    \"\"\"\n    @param s, a string\n    @return a list of strings\n    \"\"\"\n    def splitToLines(self, s):\n        res = []\n        strs = s.split('\\n')\n        for str in strs:\n            res.append(str.strip())\n        return res",
      -3.849609375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def stringToLists(self, s):\n        ret = []\n        for i in range(len(s)):\n            if s[i] == '[':\n                ret.append([])\n            else:\n                ret[-1].append(s[i])\n        return ret\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.stringToLists(\"[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\"))",
      -3.9140625
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a list of strings\n    def stringToList(self, s):\n        ret = []\n        for i in range(len(s)):\n            if s[i] == ')':\n                ret.append('(')\n                ret.append(')')\n                continue\n            if s[i] == ']':\n                ret.append(']')\n                ret.append(']')\n                continue\n            if s[i] == '}':\n                ret.append('}')\n                ret.append('}')\n                continue\n            if s[i] == ')':\n                ret.append('(')\n                ret.append(')')\n                continue\n            if s[i] == ']':\n                ret.append(']')\n                ret.append(']')\n                continue\n            if s[i] == '}':\n                ret.append('}')\n                ret.append('}')\n                continue\n            ret.append(s[i])\n        return ret\n\n#test\ns
      -4.64453125
    ],
    [
      "class Solution:\n    def stringToList(self, string):\n        \"\"\"\n        :type string: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(len(string)):\n            if string[i] == '(' or string[i] == '[' or string[i] == '{':\n                res.append(string[:i])\n                res.append(string[i+1:])\n                res.append(string[i])\n            else:\n                res.append(string[i])\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.stringToList('(1+2)'))\n    print(s.stringToList('{1,2,3}'))\n    print(s.stringToList('{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}'))",
      -4.73828125
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://www.hackerrank.com/challenges/string-to-list/problem\n\n# In[1]:\n\n# Imports\nimport sys\nimport re\n\n# Function to convert a string to list\ndef string_to_list(s):\n    # Check if s is a string\n    if not isinstance(s, str):\n        raise TypeError('s must be a string')\n    \n    # Split string at each space\n    return re.split('\\s+', s)\n\n# If no input is given, print error\nif len(sys.argv) == 1:\n    sys.exit('Please provide a string as input!')\n\n# String input\ns = sys.argv[1]\n\n# Convert string to list\nl = string_to_list(s)\n\n# Print output\nfor i in l:\n    print(i)",
      -4.890625
    ],
    [
      "class Solution(object):\n    def stringToInteger(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        if s == '':\n            return []\n\n        # split on any character that is not a digit\n        # i.e. ['1', '2', '3', '4', '5', '6']\n        result = []\n        for i in s:\n            if i.isdigit():\n                result.append(int(i))\n            else:\n                result.append(1)\n\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n\n    print(s.stringToInteger(\"1\"))\n    print(s.stringToInteger(\"1 2\"))\n    print(s.stringToInteger(\"1 2 3\"))\n    print(s.stringToInteger(\"1 2 3 4\"))\n    print(s.stringToInteger(\"1 2 3 4 5\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9 0\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9 0 1\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9 0 1 2\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9 0 1 2 3\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9 0 1 2 3 4\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\"))\n    print(s.stringToInteger(\"1 2 3 4 5 6 7 8 9",
      -5.265625
    ],
    [
      "#!/bin/python\n\n# http://www.geeksforgeeks.org/convert-a-string-to-a-list-in-python/\n\ndef convert_to_list(s):\n    return [int(s[i:i+2]) for i in range(0, len(s), 2)]\n\ndef main():\n    s = input()\n    l = convert_to_list(s)\n    print l\n\nif __name__ == '__main__':\n    main()",
      -5.86328125
    ],
    [
      "class Solution(object):\n    def stringToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        # [a-z] is [0-9]\n        # [A-Z] is [10-35]\n        # [a-zA-Z] is [36-91]\n        res = []\n        for i in range(len(s)):\n            if s[i] == '[' or s[i] == ']':\n                continue\n            if s[i] >= '0' and s[i] <= '9':\n                res.append(int(s[i]))\n            elif s[i] >= 'a' and s[i] <= 'z':\n                res.append(10 + int(s[i]))\n            elif s[i] >= 'A' and s[i] <= 'Z':\n                res.append(36 + int(s[i]))\n            else:\n                res.append(0)\n        return res\n\n\nif __name__ == \"__main__\":\n    print(Solution().stringToInt(\"[][][][][][]\"))",
      -5.95703125
    ],
    [
      "# https://leetcode.com/problems/string-to-integer-atoi/description/\n\nclass Solution(object):\n    def stringToInteger(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        i = 0\n        while i < len(str):\n            while i < len(str) and str[i]!='':\n                res.append(int(str[i]))\n                i += 1\n            i += 1\n        return res\n\n\ndef main():\n    solution = Solution()\n    s = \"12345\"\n    print solution.stringToInteger(s)\n    s = \"abc\"\n    print solution.stringToInteger(s)\n    s = \"ab\"\n    print solution.stringToInteger(s)\n    s = \"abcd\"\n    print solution.stringToInteger(s)\n    s = \"a\"\n    print solution.stringToInteger(s)\n    s = \"1a\"\n    print solution.stringToInteger(s)\n\nif __name__ == '__main__':\n    main()",
      -6.23046875
    ],
    [
      "class Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        start = 0\n        while start < len(s):\n            if s[start]!='':\n                res.append(s[start:])\n                start += 1\n            else:\n                res.append(s[start:])\n                start += 1\n                while start < len(s) and s[start] =='':\n                    start += 1\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.toList('a b c'))\n    print(sol.toList('a   b c'))\n    print(sol.toList('a b'))\n    print(sol.toList('a   b'))",
      -6.3671875
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://leetcode.com/problems/string-to-integer-with-conversion/\n\n# Definition for a  string\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass Solution(object):\n    def toInteger(self, s):\n        \"\"\"\n        :type s: String\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(len(s)):\n            if s[i] == '0':\n                res.append(0)\n            elif s[i] == '1':\n                res.append(1)\n            elif s[i] == '2':\n                res.append(2)\n            elif s[i] == '3':\n                res.append(3)\n            elif s[i] == '4':\n                res.append(4)\n            elif s[i] == '5':\n                res.append(5)\n            elif s[i] == '6':\n                res.append(6)\n            elif s[i] == '7':\n                res.append(7)\n            elif s[i] == '8':\n                res.append(8)\n            elif s[i] == '9':\n                res.append(9)\n            else:\n                res.append(10)\n        return res\n\nif __name__ == '__main__':\n    s = \"23\"\n    s = \"0\"\n    s = \"0\"\n    s = \"1\"\n    s = \"2\"\n    s = \"2\"\n    s = \"2\"\n    s = \"3\"\n    s = \"4\"\n    s = \"4\"\n    s = \"4\"\n    s = \"4\"\n    s = \"4\"\n    s = \"4\"\n    s = \"4\"\n    s = \"4\"\n    s = \"4\"\n    s = \"4\"\n    s = \"4\"",
      -7.453125
    ],
    [
      "# https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/discuss/102079/Python-solution-with-explanation\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nimport unittest\nimport ListNode\n\nclass Solution:\n    def sortedListToBST(self, head: ListNode) -> ListNode.ListNode:\n        if head is None:\n            return None\n        nodes = [head]\n        while head.next is not None:\n            head = head.next\n            nodes.append(head)\n        \n        return self.sortedListToBSTHelper(nodes)\n\n    def sortedListToBSTHelper(self, nodes):\n        if len(nodes) == 1:\n            return nodes[0]\n        \n        mid = len(nodes) // 2\n        head = nodes[mid]\n        left = self.sortedListToBSTHelper(nodes[:mid])\n        right = self.sortedListToBSTHelper(nodes[mid+1:])\n        \n        return ListNode.ListNode(head.val, left, right)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/solution/\n\n# DFS\n# 1ms 100%\nclass Solution {\n    public ListNode sortedListToBST(ListNode head) {\n        if (head == null) return null;\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode slow = dummy, fast = dummy;\n        while (fast.next!= null && fast.next.next!= null) {\n            slow = slow.next;\n            fast = fast",
      -7.875
    ],
    [
      "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<string> strToVec(string str) {\n        vector<string> ret;\n        int n = str.size();\n        int i = 0;\n        while (i < n) {\n            int j = i;\n            while (j < n && str[j]!= '(') j++;\n            ret.push_back(str.substr(i, j - i));\n            i = j + 1;\n        }\n        return ret;\n    }\n    vector<string> strToVec_2(string str) {\n        vector<string> ret;\n        int n = str.size();\n        int i = 0;\n        while (i < n) {\n            int j = i;\n            while (j < n && str[j]!= ')') j++;\n            ret.push_back(str.substr(i, j - i));\n            i = j + 1;\n        }\n        return ret;\n    }\n};\n\nint main(void)\n{\n    Solution s;\n    cout << s.strToVec(\"(())\")[0] << endl;\n    cout << s.strToVec_2(\"(())\")[0] << endl;\n    return 0;\n}",
      -7.90234375
    ],
    [
      "from collections import defaultdict\n\n# Your function should return a list of strings.\n\ndef string_to_list(string):\n    d = defaultdict(list)\n    for i in range(len(string)):\n        d[string[i]].append(string[:i])\n        d[string[i]].append(string[i+1:])\n    return d[string[0]]\n\n\n# Sample tests\nprint string_to_list('abc')\n# >>> ['abc']\nprint string_to_list('aabc')\n# >>> ['a', 'abc']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('aabc')\n# >>> ['a', 'abc']\nprint string_to_list('aabc')\n# >>> ['a', 'abc']\nprint string_to_list('aabc')\n# >>> ['a', 'abc']\nprint string_to_list('abcdef')\n# >>> ['abc', 'def']\nprint string_to_list('abcdef')\n# >>> ['abc', 'def']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', 'cd']\nprint string_to_list('abcd')\n# >>> ['ab', '",
      -8.0625
    ],
    [
      "from collections import deque\nfrom itertools import islice\nimport re\n\ndef to_list(s):\n    return [s[i:i+80] for i in range(0, len(s), 80)]\n\ndef to_list_with_link(s):\n    lines = to_list(s)\n    result = []\n    for line in lines:\n        result.append(line)\n        result.append(\"<a href='https://'>\" + line + \"</a>\")\n    return result\n\ndef to_list_with_link_and_end_of_line(s):\n    lines = to_list(s)\n    result = []\n    for line in lines:\n        result.append(line)\n        result.append(\"<a href='https://'>\" + line + \"</a>\")\n        result.append(\"\\n\")\n    return result\n\ndef to_list_with_link_and_end_of_line_and_blank(s):\n    lines = to_list(s)\n    result = []\n    for line in lines:\n        result.append(line)\n        result.append(\"<a href='https://'>\" + line + \"</a>\")\n        result.append(\"\\n\")\n        result.append(\"\\n\")\n    return result\n\ndef to_list_with_link_and_blank(s):\n    lines = to_list(s)\n    result = []\n    for line in lines:\n        result.append(line)\n        result.append(\"<a href='https://'>\" + line + \"</a>\")\n        result.append(\"\\n\")\n    return result\n\ndef to_list_with_link_and_blank_and_end_of_line(s):\n    lines = to_list(s)\n    result = []\n    for line in lines:\n        result.append(line)\n        result.append(\"<a href='https://'>\" + line + \"</a>\")\n        result.append(\"\\n\")\n        result.append(\"\\n\")\n        result.append(\"\\n\")\n    return result\n\ndef to_list_with_link_and_blank_and",
      -8.3671875
    ],
    [
      "# Thought:\n\n# DP\n# Time: O(n)\n# Space: O(n)\nclass Solution(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '[':\n                res.append(s[i])\n                res.extend(self.toList(s[i:i+2]))\n            elif s[i] == ')':\n                res.append(']')\n            else:\n                res.append(s[i])\n        return res\n\n\n# Time: O(n)\n# Space: O(n)\nclass Solution2(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(' or s[i] == '[':\n                stack.append(s[i])\n            elif s[i] == ')':\n                res.append(']')\n                if stack:\n                    res.append(stack.pop())\n            else:\n                res.append(s[i])\n        return res\n\n\n# Time: O(n)\n# Space: O(n)\nclass Solution3(object):\n    def toList(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            elif s[i] == ')':\n                res.append(']')\n                if stack:\n                    res.append(stack.pop())\n            else:\n                res.append(s[i])\n        return res\n\n\n# TLE\n# Time: O(n)\n# Space: O(n)\nclass Solution4(object):\n    def toList",
      -8.53125
    ],
    [
      "from collections import namedtuple\n\nclass Solution:\n    def toList(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: List[str]\n        \"\"\"\n        return [str[i:i+len(str)] for i in range(0, len(str), len(str))]\n\nclass TrieNode:\n    def __init__(self, key):\n        self.children = {}\n        self.key = key\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode('root')\n    \n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode(char)\n            node = node.children[char]\n        node.key = word\n        \n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.key == word\n    \n    def remove(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        del node.key\n        return True\n\n\"\"\"\nTest\n\"\"\"\n\ndef main():\n    s = Solution()\n    s.insert('a')\n    s.insert('aa')\n    s.insert('ab')\n    s.insert('b')\n    s.insert('bb')\n    s.insert('c')\n    s.insert('d')\n    s.insert('de')\n    s.insert('e')\n    s.insert('ee')\n    s.insert('f')\n    s.insert('g')\n    s.insert('h')\n    s.insert('hh')\n    s.insert('i')\n    s.insert('j')\n    s.insert('jj')\n    s.insert('k')\n    s.insert('l')\n    s.insert('ll')\n    s.insert('m')\n    s.insert('mm')",
      -8.8515625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def stringToBST(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: TreeNode\n        \"\"\"\n        if len(str) == 0:\n            return None\n        return self.stringToBSTRecu(str, 0, len(str) - 1)\n\n    def stringToBSTRecu(self, str, start, end):\n        if start > end:\n            return None\n\n        mid = (start + end) / 2\n        node = TreeNode(int(str[mid]))\n        node.left = self.stringToBSTRecu(str, start, mid - 1)\n        node.right = self.stringToBSTRecu(str, mid + 1, end)\n\n        return node",
      -8.90625
    ],
    [
      "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if str is None:\n            return 0\n        str = str.strip()\n        if not str:\n            return 0\n        i = 0\n        while i < len(str) and str[i] in \"0123456789\":\n            i += 1\n        if i == len(str):\n            return 0\n        if str[i] == \"0\":\n            return 0\n        if str[i] == \"-\":\n            return -1\n        if str[i] == \"\":\n            return 0\n        sign = 1\n        if str[i] == \"+\":\n            i += 1\n        else:\n            sign = -1\n        if i >= len(str):\n            return sign * i\n        if str[i] in \"0123456789\":\n            return sign * (i + 1)\n        return sign * i\n\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\"\"\"\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if str is None:\n            return 0\n        str = str.strip()\n        if not str:\n            return 0\n        i = 0\n        while i < len(str) and str[i] in \"0123456789\":\n            i += 1\n        if i == len(str):\n            return 0\n        if str[i] == \"0\":\n            return 0\n        if str[i] == \"-\":\n            return -1\n        if str[i] == \"\":\n            return 0\n        sign = 1\n        if str[i] == \"+\":\n            i += 1\n        else:\n            sign = -1\n        if i >= len(str):\n            return sign * i\n        if str[i] in \"0123456789\":\n            return sign * (i + 1)\n        return sign * i\n\n\"\"\"\n[link text](https:// [",
      -9.6640625
    ],
    [
      "#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<string> toOriginalString(string s) {\n        vector<string> res;\n        string pre(\"\");\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == '(') {\n                pre += s[i];\n                continue;\n            }\n            if (s[i] == ')') {\n                if (pre == \"\")\n                    res.push_back(s.substr(0, i + 1));\n                else\n                    res.push_back(pre + s.substr(0, i + 1));\n                pre = \"\";\n                continue;\n            }\n            pre += s[i];\n        }\n        return res;\n    }\n};\n\nint main() {\n    Solution s;\n    vector<string> res = s.toOriginalString(\"(()())(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
      -10.3359375
    ],
    [
      "from string import ascii_lowercase as lc\n\n\nclass Solution(object):\n    def __init__(self, s):\n        \"\"\"\n        @param s: A string\n        \"\"\"\n        self.s = s\n        self.dic = {}\n        for i in lc:\n            self.dic[i] = 0\n\n    def countChar(self, c):\n        \"\"\"\n        :type c: str\n        :rtype: int\n        \"\"\"\n        return self.dic.get(c, 0)\n\n    def countChar2(self, c):\n        \"\"\"\n        :type c: str\n        :rtype: int\n        \"\"\"\n        return self.dic.get(c, 0) + self.countChar(c)\n\n    def convert(self):\n        \"\"\"\n        :rtype: List[str]\n        \"\"\"\n        return [self.s[i:i+self.countChar(self.s[i:i+1])] for i in range(len(self.s)) if self.countChar(self.s[i:i+1]) > 0]\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(s)\n# param_1 = obj.convert()",
      -10.515625
    ],
    [
      "class Solution:\n    def stringToList(self, s: str) -> List[str]:\n        return list(map(lambda x: x[::-1], reversed(s.split(' '))))\n\nclass Solution2:\n    def stringToList(self, s: str) -> List[str]:\n        return list(reversed(s.split(' ')))\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/string-to-list/solution/\n# Time:  O(n)\n# Space: O(1)\n#\n\n# Two pointers.\n#\n# 1. Scan the string.\n# 2. Reverse the string.\n# 3. Reverse the reversed string.\n# 4. Return the reversed list.\n#\n# Time complexity: O(n)\n# Space complexity: O(1)\n#\n\n# Approach 1: Two pointers.\n#\n# Time complexity: O(n)\n# Space complexity: O(1)\nclass Solution {\n    public List<String> stringToList(String s) {\n        List<String> res = new ArrayList<String>();\n        for (int i = 0; i < s.length(); i++) {\n            res.add(new StringBuilder(s).reverse().toString());\n        }\n        return res;\n    }\n}\n\n# Approach 2: Two pointers.\n#\n# Time complexity: O(n)\n# Space complexity: O(1)\nclass Solution {\n    public List<String> stringToList(String s) {\n        List<String> res = new ArrayList<String>();\n        int i = 0;\n        int j = 0;\n        while (i < s.length() && j < s.length()) {\n            res.add(s.substring(j, i));\n            j++;\n            i++;\n        }\n        return res;\n    }\n}\n'''",
      -11.96875
    ],
    [
      "#!/usr/bin/env python\n\n\"\"\"\nGiven a string s, return a list of all the words that can be produced\nusing letters from the given string.\n\nFor example, given s = \"numbers\", your function should return [\"number\", \"numbers\", \"numbering\", \"numberings\"].\n\"\"\"\n\nclass Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: Set[str]\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        if not wordDict:\n            return [s]\n        d = {}\n        for word in wordDict:\n            d[word] = 0\n        res = []\n        for i in range(len(s)):\n            for word in wordDict:\n                if d[word] == len(s) - i - 1:\n                    res.append(word)\n                    for j in range(i + 1, len(s) + 1):\n                        d[word] += 1\n                        if d[word] == len(s):\n                            return res\n                    d[word] -= 1\n                    res.pop()\n        return res\n\n# test\nsol = Solution()\nassert sol.wordBreak(\"a\", [\"a\"]) == [\"a\"]\nassert sol.wordBreak(\"a\", [\"a\", \"b\"]) == []\nassert sol.wordBreak(\"a\", [\"a\", \"b\", \"a\", \"c\"]) == [\"a\", \"a\", \"b\", \"a\", \"c\"]\nassert sol.wordBreak(\"a\", [\"a\", \"b\", \"c\", \"d\", \"e\", \"a\", \"b\", \"a\", \"b\"]) == [\"a\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\nassert sol.wordBreak(\"\", [\"a\", \"b\"]) == []\nassert sol.wordBreak(\"\", [\"a\", \"b\", \"a\", \"c\"]) == []\nassert sol.wordBreak(\"a\", [\"a\"]) == [\"a\"]\nassert sol.wordBreak(\"a\", [\"a\",",
      -12.4375
    ],
    [
      "# -*- coding: utf-8 -*-\n\nimport re\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def stringToLinkedList(self, head):\n        if head is None:\n            return None\n        prev = None\n        curr = head\n        while curr is not None:\n            if prev is None:\n                prev = curr\n            else:\n                prev.next = curr\n                prev = curr\n            curr = curr.next\n        return prev\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(13)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(14)\n    head.next.next.next.next.next.next.next.next.next.",
      -12.8046875
    ],
    [
      "# https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/\n\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: TreeNode\n        \"\"\"\n        if not head or not head.next:\n            return None\n\n        return self.sortedListToBST(head.next) if head.next else self.sortedListToBST(head.next)\n\n\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: TreeNode\n        \"\"\"\n        # Sort the list\n        head, l, r = self.sortList(head)\n\n        # Build the tree\n        if l is None or r is None:\n            return None\n\n        root = TreeNode(head.val)\n        root.left = self.sortedListToBST(l)\n        root.right = self.sortedListToBST(r)\n\n        return root\n\n    def sortList(self, head):\n        # Sort the list\n        if not head or not head.next:\n            return head, None, None\n\n        # Find the median\n        l = self.sortList(head.next)\n        r = self.sortList(head.next.next)\n\n        if l is None or r is None:\n            return head, None, None\n\n        mid = self.getMid(l, r)\n\n        head.next = self.mergeList(l, mid)\n        head.next.next = self.mergeList(mid, r)\n\n        return head, l, r\n\n    def getMid(self, l, r):\n        # Sort the list\n        if not l or not r:\n            return None\n\n        return l.val + (r.val - l.val) / 2\n\n    def mergeList(self, l, r):\n        # Sort the list\n        if not l:\n            return r\n\n        if not r:\n            return l\n\n        # Find the median\n        if l.val > r.val:\n            l, r = r, l\n\n        # Sort the list",
      -15.875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}