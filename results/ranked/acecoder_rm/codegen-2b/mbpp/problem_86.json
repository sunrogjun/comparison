{
  "problem": {
    "task_id": "MBPP/97",
    "prompt": "Write a function to find frequency count of list of lists.",
    "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
    "test_list": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ],
    "challenge_test_list": [],
    "problem_id": 86
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def find_frequency(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    count = 0\n    for list in list_of_lists:\n        for item in list:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    list_of_lists = [[1,2,3,4], [5,6,7], [8,9,10]]\n    print(find_frequency(list_of_lists))",
      1.6806640625
    ],
    [
      "def findFrequency(lists):\n    count = {}\n    for l in lists:\n        if l in count:\n            count[l] += 1\n        else:\n            count[l] = 1\n\n    return count\n\nif __name__ == \"__main__\":\n    lists = [[1, 2, 2, 3], [1, 3, 1, 2], [2, 2]]\n    print(findFrequency(lists))",
      1.5703125
    ],
    [
      "import collections\n\ndef frequencyCount(lst):\n    # write your code here\n    res = collections.Counter()\n    for i in lst:\n        res.update(i)\n    return res\n\n# test\nlst = [[1,2,3],[1,2,3],[1,2,3]]\nlst = [[1,1,1],[2,2,2],[3,3,3]]\nlst = [[1,1,2,1,1],[2,2,2,2,2],[3,3,3,3,3]]\nlst = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]\nlst = [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]]\nlst = [[1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]]\nlst = [[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]]\nlst = [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]]\n\nprint(frequencyCount(lst))",
      1.3193359375
    ],
    [
      "def find_frequency(lst):\n    \"\"\"\n    :type lst: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # Create a dictionary to store frequency of elements.\n    frequency = {}\n    # For each element in list, increment its frequency.\n    for e in lst:\n        if e in frequency:\n            frequency[e] += 1\n        else:\n            frequency[e] = 1\n    # Return the frequency of each element in the list.\n    return list(frequency.values())\n\n\nif __name__ == '__main__':\n    lst = [[1, 2, 3], [1, 3, 1], [3, 2, 3]]\n    print(find_frequency(lst))",
      1.0673828125
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return an integer\n    def getFrequencyCount(self, head):\n        if not head: return 0\n        cur = head\n        count = 1\n        while cur:\n            cur = cur.next\n            count += 1\n        return count\n\nif __name__ == \"__main__\":\n    sln = Solution()\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(1)\n    head.next.next.next = ListNode(1)\n    head.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next = ListNode(1)\n    head.next.next.next.next.next.next = ListNode(1)\n    print(sln.getFrequencyCount(head))\n    print(sln.getFrequencyCount(ListNode(1)))\n    print(sln.getFrequencyCount(ListNode(1, 2, 3, 3, 3, 3, 4, 4)))",
      0.97802734375
    ],
    [
      "def list_frequency(lst):\n    \"\"\"\n    Returns a dictionary that holds the frequency of each element\n    in the list.\n    \"\"\"\n    freq = {}\n    for elem in lst:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    return freq\n\ndef list_frequency2(lst):\n    \"\"\"\n    Returns a dictionary that holds the frequency of each element\n    in the list.\n    \"\"\"\n    freq = {}\n    for elem in lst:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    return freq\n\ndef list_frequency3(lst):\n    \"\"\"\n    Returns a dictionary that holds the frequency of each element\n    in the list.\n    \"\"\"\n    freq = {}\n    for elem in lst:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    return freq\n\ndef list_frequency4(lst):\n    \"\"\"\n    Returns a dictionary that holds the frequency of each element\n    in the list.\n    \"\"\"\n    freq = {}\n    for elem in lst:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    return freq\n\ndef list_frequency5(lst):\n    \"\"\"\n    Returns a dictionary that holds the frequency of each element\n    in the list.\n    \"\"\"\n    freq = {}\n    for elem in lst:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    return freq\n\ndef list_frequency6(lst):\n    \"\"\"\n    Returns a dictionary that holds the frequency of each element\n    in the list.\n    \"\"\"\n    freq = {}\n    for elem in lst:\n        if elem not in freq:\n            freq[elem] =",
      0.8662109375
    ],
    [
      "# https://github.com/skydark/LeetCode/blob/master/leetcode-in-python.py\n\nclass Solution:\n    # @param lists, a list of lists of integers\n    # @return a tuple, (number of pairs, number of unique pairs)\n    def pairFrequency(self, lists):\n        if len(lists) == 0:\n            return (0, 0)\n        n = len(lists)\n        table = [[0 for i in range(n)] for j in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if lists[i][j] == 0:\n                    continue\n                table[i][j] += 1\n                table[j][i] += 1\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if table[i][j] == 1:\n                    count += 1\n        return (count, len(table))\n\n\nif __name__ == \"__main__\":\n    print(Solution().pairFrequency([[1,2], [1,2]]))",
      0.13134765625
    ],
    [
      "#!/bin/python\n\n# https://www.hackerrank.com/challenges/find-the-frequency-count-of-a-list/problem\n# https://www.hackerrank.com/challenges/find-the-frequency-count-of-a-list/submissions/code/5677909\n\ndef find_frequency_count(list_of_lists):\n    if list_of_lists == []:\n        return 0\n    else:\n        count = 0\n        for i in range(len(list_of_lists)):\n            if list_of_lists[i] == []:\n                continue\n            else:\n                for j in range(len(list_of_lists[i])):\n                    if list_of_lists[i][j] == '':\n                        continue\n                    else:\n                        if list_of_lists[i][j] in list_of_lists[i]:\n                            count = count + 1\n                        else:\n                            list_of_lists[i].append(list_of_lists[i][j])\n        return count\n\n\nif __name__ == '__main__':\n    list_of_lists = [['a', 'b', ''], ['c', 'd', 'e'], []]\n    print(find_frequency_count(list_of_lists))",
      0.13134765625
    ],
    [
      "# https://www.hackerearth.com/practice/data-structures/arrays/lists/\n\ndef find_frequency_count(arr):\n    \"\"\"\n    :param arr: List of lists\n    :return: Frequency count of list of lists\n    \"\"\"\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    return count\n\nif __name__ == \"__main__\":\n    arr = [[1,2,3,4,5,6,7,8,9,10], [3,2,1], [1,2,4,3,1]]\n    print(find_frequency_count(arr))",
      0.095947265625
    ],
    [
      "def find_frequency(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n\ndef find_frequency_2(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n\ndef find_frequency_3(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n\ndef find_frequency_4(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n\ndef find_frequency_5(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n\ndef find_frequency_6(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n\ndef find_frequency_7(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n\ndef find_frequency_8(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n\ndef find_frequency_9(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n\ndef find_frequency_10(nums",
      -0.0765380859375
    ],
    [
      "def find_frequency(lists):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n    frequency_dict = {}\n    for list_ in lists:\n        for item in list_:\n            if item not in frequency_dict:\n                frequency_dict[item] = 1\n            else:\n                frequency_dict[item] += 1\n    return frequency_dict\n\nif __name__ == \"__main__\":\n    lists = [[1, 2, 2, 3, 3, 3, 4, 4], [1, 2, 2, 3, 3, 3, 4, 4, 5], [1, 2, 2, 3, 3, 3, 4, 4, 5, 6]]\n    frequency_dict = find_frequency(lists)\n    print(frequency_dict)\n    print(\"Frequency dict is : \")\n    for key in frequency_dict:\n        print(key, \" : \", frequency_dict[key])",
      -0.111083984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def __init__(self):\n        self.count = 0\n        self.max = 0\n\n    def addToCount(self, l):\n        if not l:\n            return\n        self.count += 1\n        self.max = max(self.max, self.count)\n        self.addToCount(l.next)\n\n    def findFrequentTreeSum(self, root: ListNode) -> int:\n        self.addToCount(root)\n        return self.max",
      -0.267333984375
    ],
    [
      "def find_frequency(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    count = [0] * 10\n    for i in arr:\n        for j in i:\n            count[j] += 1\n\n    return count\n\nif __name__ == \"__main__\":\n    arr = [[1, 2, 3], [1, 2, 3, 2, 2], [1, 2, 3, 2, 3]]\n    print(find_frequency(arr))",
      -0.60107421875
    ],
    [
      "def find_frequency(lst):\n    '''\n    :type lst: List[List[int]]\n    :rtype: List[int]\n    '''\n    if lst == []:\n        return []\n    freq = [0] * len(lst[0])\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            freq[lst[i][j]] += 1\n    return freq\n\nif __name__ == '__main__':\n    lst = [[1, 2, 2], [1, 2, 3], [2, 2, 2]]\n    freq = find_frequency(lst)\n    print(freq)",
      -0.7490234375
    ],
    [
      "class ListNode(object):\n    def __init__(self, val, next_node=None):\n        self.val = val\n        self.next = next_node\n\nclass Solution(object):\n    def findDuplicate(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if head is None:\n            return 0\n        \n        count = 0\n        node = head\n        while node.next is not None:\n            if node.next.val == node.val:\n                count += 1\n            node = node.next\n        return count",
      -0.771484375
    ],
    [
      "import collections\n\ndef frequency(items):\n    counts = collections.Counter(items)\n    return counts\n\ndef find_frequency(items):\n    return frequency(items)\n\ndef main():\n    items = [[1, 2, 3], [1, 2, 3, 4, 5]]\n    print(find_frequency(items))\n\nif __name__ == '__main__':\n    main()",
      -0.85595703125
    ],
    [
      "def find_frequency(lists):\n\tcount = {}\n\tfor list in lists:\n\t\tfor i in list:\n\t\t\tif i in count:\n\t\t\t\tcount[i] += 1\n\t\t\telse:\n\t\t\t\tcount[i] = 1\n\treturn count\n\nif __name__ == \"__main__\":\n\tlists = [[1,2,3], [2,3,4], [1,2,5], [1,2,3]]\n\tprint(find_frequency(lists))",
      -0.85791015625
    ],
    [
      "def count(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    return [len(lists[i]) for i in range(len(lists))]\n\nif __name__ == '__main__':\n    lists = [[1, 2, 3], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\n    print(count(lists))\n    # [[3, 2, 1], [3, 2, 1, 4, 5, 6], [3, 2, 1, 4], [3, 2, 1, 4, 5]]",
      -0.85791015625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a list node\n    # @return a list node\n    def getFrequencyCount(self, head):\n        if not head: return 0\n        cur, freq = head, 0\n        while cur:\n            cur = cur.next\n            freq += 1\n        return freq",
      -0.85791015625
    ],
    [
      "import collections\n\ndef count_frequency(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n\n    # create a hash map to store frequency\n    frequency = collections.defaultdict(int)\n\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            frequency[nums[i][j]] += 1\n\n    return list(frequency.items())\n\n\n# Your Solution Here",
      -0.85791015625
    ],
    [
      "# -*- coding: utf-8 -*-\n# Created by KyungHyun Park\n# 2018-01-22\n\nimport sys\n\nif __name__ == '__main__':\n    lines = sys.stdin.readlines()\n    \n    for line in lines:\n        line = line.strip()\n        if line:\n            lst = line.split(',')\n            \n            for i in lst:\n                i = i.strip()\n                if i:\n                    print(i, end='')\n                else:\n                    print('')\n            print()",
      -0.85791015625
    ],
    [
      "def count_frequency(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    counts = [0] * len(lists)\n    for item in lists:\n        counts[item[0]] += 1\n\n    return counts\n\nif __name__ == '__main__':\n    assert count_frequency([[1, 2, 3], [1, 2, 3]]) == [3, 2, 1]\n    assert count_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [3, 3, 2]",
      -0.85791015625
    ],
    [
      "import collections\n\ndef get_frequency(my_list):\n    \"\"\"\n    :type my_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    counts = collections.Counter(my_list)\n    return counts.most_common()\n\nif __name__ == '__main__':\n    print(get_frequency([[1, 2, 3], [1, 2, 3]]))\n    print(get_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3]]))",
      -0.85791015625
    ],
    [
      "def findFrequency(listOfLists):\n    \"\"\"\n    :type listOfLists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    \n    freq = {}\n    for list in listOfLists:\n        for item in list:\n            if item not in freq:\n                freq[item] = 1\n            else:\n                freq[item] += 1\n    return freq.items()\n\nif __name__ == '__main__':\n    listOfLists = [[1,1,2,2], [1,1,2,3], [1,2,3], [1,2], [1,2,3,4], [1,2,3,4,5], [1,2,3,4,5,6], [1,2,3,4,5,6,7]]\n    print findFrequency(listOfLists)",
      -0.8583984375
    ],
    [
      "import collections\n\n\ndef find_frequency(l):\n    \"\"\"\n    :type l: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    counter = collections.Counter(l)\n    return counter.most_common()\n\n\nif __name__ == '__main__':\n    l = [[1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print(find_frequency(l))",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef freq_count(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    counter = Counter(lists)\n    return counter.most_common()\n\n\nif __name__ == '__main__':\n    assert freq_count([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [(3, 3), (2, 2), (1, 1)]",
      -0.8583984375
    ],
    [
      "import sys\n\n\n# @include\ndef find_frequency(lists):\n    # Write your code here.\n    res = []\n    for l in lists:\n        res.append(len(l))\n    return res\n# @exclude\n\n\ndef simple_test():\n    assert find_frequency([[1], [2, 3], [1, 2], [1, 2]]) == [1, 2, 2, 1]\n\n\ndef main():\n    simple_test()\n    if sys.argv[1:]:\n        n = int(sys.argv[1])\n        lists = [list(map(int, x)) for x in sys.stdin.readlines()]\n        print(find_frequency(lists[:n]))\n    else:\n        main()\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def frequency(list):\n    \"\"\"\n    :type list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not list:\n        return []\n\n    freq = [0] * len(list[0])\n    for i in list:\n        for j in i:\n            freq[j] += 1\n\n    return freq\n\ndef main():\n    n = int(input())\n    list = [[int(x) for x in input().split()] for _ in range(n)]\n    freq = frequency(list)\n\n    for i in range(len(freq)):\n        print(freq[i], end=' ')\n    print()\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import collections\n\ndef freq(lst):\n    count = collections.Counter(lst)\n    return count\n\ndef freq2(lst):\n    cnt = collections.Counter(lst)\n    return cnt\n\nif __name__ == '__main__':\n    lst = [[1,2], [2,3], [1,1]]\n    print(freq(lst))\n    print(freq2(lst))",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def countFrequent(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        counts = defaultdict(int)\n        while head:\n            counts[head.val] += 1\n            head = head.next\n        for k, v in counts.items():\n            if v > 1:\n                result.append(v)\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(3)\n    head.next.next.next.next = ListNode(2)\n    head.next.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next.next = ListNode(2)\n    head.next.next.next.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next.next.next.next = ListNode(2)\n    head.next.next.next.next.next.next.next.next.next = ListNode(3)\n    print(sol.countFrequent(head))",
      -0.8583984375
    ],
    [
      "def count_frequencies(lst):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n\n    Example\n    Input: [[1,2,3],[2,3,4]]\n    Output: {1:2, 2:2, 3:1, 4:1}\n    \"\"\"\n    res = {}\n    for l in lst:\n        res[l[0]] = res.get(l[0], 0) + 1\n    return res",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n@version: 0.1\n@author: nightwing\n@contact: baycsns@163.com\n@site: http://www.github.com/baycsns\n@software: PyCharm\n@time: 2017/8/4 \u4e0b\u53483:30\n\"\"\"\n\nclass Solution(object):\n    def __init__(self):\n        self.nums = []\n\n    def count(self, nums):\n        self.nums = nums\n        self.count(0, len(nums))\n\n    def count(self, start, end):\n        if start == end:\n            self.nums[start] += 1\n        else:\n            for i in range(start, end):\n                self.count(start, i)\n                self.count(i + 1, end)\n\n    def getCount(self):\n        return self.nums",
      -0.85888671875
    ],
    [
      "# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\nclass Solution(object):\n    def __init__(self, root):\n        self.root = root\n\n    def countFrequency(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        count = 1\n        self.countFrequencyHelper(root)\n        return count\n\n    def countFrequencyHelper(self, root):\n        if not root:\n            return\n        if not root.children:\n            count += 1\n        else:\n            for i in range(len(root.children)):\n                self.countFrequencyHelper(root.children[i])\n\nroot = Node(1, [])\nroot.children = [Node(2, [Node(3, []), Node(4, [])])]\nroot.children[0].children = [Node(5, []), Node(6, [])]\n\nprint Solution(root).countFrequency(root)",
      -0.85888671875
    ],
    [
      "def frequencyCount(inputList):\n    \"\"\"\n    :type inputList: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    count = [0] * len(inputList)\n    for i in range(len(inputList)):\n        for j in range(len(inputList[i])):\n            count[inputList[i][j]] += 1\n    return count\n\n\n# Your frequencyCount object will be instantiated and called as such:\n# frequencyCount_object = frequencyCount(inputList)\n# frequencyCount_object.findFrequencyCount(inputList)",
      -0.85888671875
    ],
    [
      "#!/bin/python\n\ndef count_frequencies(nums):\n    cnt = defaultdict(int)\n    for i in nums:\n        for j in i:\n            cnt[j] += 1\n    return cnt\n\ndef main():\n    nums = [[1,2,3],[1,2,3]]\n    cnt = count_frequencies(nums)\n    print(cnt)\n    print(cnt.values())\n    print(cnt.keys())\n    print(cnt.items())\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def find_frequency(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: list of tuples: (item, frequency)\n    \"\"\"\n    lst = sorted(lst)\n    dic = {}\n    for i in lst:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic.items()\n\nif __name__ == '__main__':\n    lst = [[1,2,3],[2,3,4],[3,4,5]]\n    print find_frequency(lst)",
      -0.85888671875
    ],
    [
      "# TODO\n# 1) Write a function to find frequency count of list of lists.\n# 2) Write a function to count number of times a string occurs in a list.\n\n# 1) Write a function to find frequency count of list of lists.\n# 2) Write a function to count number of times a string occurs in a list.\n\n# 3) Write a function to find frequency count of list of lists.\n# 4) Write a function to count number of times a string occurs in a list.\n\n# Write a function to find frequency count of list of lists.\n# Write a function to count number of times a string occurs in a list.\n\n# Write a function to find frequency count of list of lists.\n# Write a function to count number of times a string occurs in a list.",
      -0.85888671875
    ],
    [
      "#!/usr/bin/python\n\n# import the modules necessary for this exercise\nimport sys\nsys.path.append(\"../\")\nimport collections\nfrom collections import defaultdict\n\ndef find_frequency(my_list):\n    \"\"\"\n    Find frequency of each item in list\n    \"\"\"\n\n    # initialize the dictionary\n    my_dict = defaultdict(int)\n\n    # loop through each item in list\n    for i in my_list:\n        # add item to dictionary\n        my_dict[i] += 1\n\n    # loop through each item in dictionary\n    for k in my_dict:\n        # print the item and its frequency\n        print \"%s: %s\" % (k, my_dict[k])\n\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # get the input\n    input = raw_input(\"Enter the list of lists separated by commas: \")\n    my_list = input.split(\",\")\n\n    # call find_frequency function\n    find_frequency(my_list)\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def countNodes(self, root: TreeNode) -> int:\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n\n        count = 0\n        self.countNodes(root.left)\n        self.countNodes(root.right)\n        return count + 1",
      -0.86083984375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param nums: A list of lists.\n    @return: A tuple, (the most frequent number, its frequency).\n    \"\"\"\n    def mostFrequent(self, nums):\n        if not nums:\n            return (None, 0)\n\n        # sort the lists\n        nums = sorted(nums, key=len)\n\n        # find the most frequent number\n        most_frequent = nums[0]\n        most_freq = 1\n        for num in nums[1:]:\n            if num == most_frequent:\n                most_freq += 1\n            else:\n                most_frequent = num\n                most_freq = 1\n\n        return (most_frequent, most_freq)\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.mostFrequent([[1, 2], [3, 2, 5], [1, 2]])",
      -0.904296875
    ],
    [
      "# https://www.hackerrank.com/challenges/frequency-counts\n\ndef main():\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(input().split())\n    \n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == '+':\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()",
      -0.9208984375
    ],
    [
      "def find_frequency(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not list_of_lists:\n        return []\n\n    frequency = [0] * len(list_of_lists[0])\n    for row in list_of_lists:\n        for value in row:\n            frequency[value] += 1\n\n    return frequency",
      -0.92138671875
    ],
    [
      "class Solution:\n    # @param A, a list of lists of integers\n    # @return a tuple, (number of pairs, number of unique pairs)\n    def findPairs(self, A):\n        # write your code here\n        if len(A) == 0:\n            return (0, 0)\n        if len(A[0]) == 0:\n            return (0, 0)\n        num = len(A)\n        count = [[0 for _ in range(num)] for _ in range(num)]\n        unique = [[0 for _ in range(num)] for _ in range(num)]\n        for i in range(num):\n            for j in range(i):\n                if A[i][j] == A[j][i]:\n                    count[i][j] += 1\n                    count[j][i] += 1\n                    unique[i][j] += 1\n                    unique[j][i] += 1\n        return (count, unique)\n\n\nif __name__ == \"__main__\":\n    A = [[1, 2], [2, 1]]\n    print(Solution().findPairs(A))",
      -0.92529296875
    ],
    [
      "def count_frequency(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # Complete this function\n    counts = [0] * len(lists)\n    for list_ in lists:\n        for value in list_:\n            counts[value] += 1\n\n    return counts\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    ]\n    print(count_frequency(lists))",
      -1.1591796875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def __init__(self):\n        self.freq_count = {}\n\n    def findFrequentTreeSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        self.findFrequentTreeSumRec(root)\n        return self.freq_count.values()\n\n    def findFrequentTreeSumRec(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if root is None:\n            return []\n        if root.left is None and root.right is None:\n            self.freq_count[root.val] = 1\n        elif root.left is None:\n            self.findFrequentTreeSumRec(root.right)\n        elif root.right is None:\n            self.findFrequentTreeSumRec(root.left)\n        else:\n            self.findFrequentTreeSumRec(root.left)\n            self.findFrequentTreeSumRec(root.right)",
      -1.1689453125
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        \"\"\"\n        self.nums = nums\n    def findFrequent(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        freq = collections.defaultdict(int)\n        for i in nums:\n            for j in i:\n                freq[j] += 1\n        return sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/frequency-counts/solution/\n\n# 15ms 64.32%\nclass Solution {\n    public int[] findFrequent(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return new int[0];\n        }\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\n        }\n        int[] result = new int[map.size()];\n        map.forEach((k, v) -> {\n            result[v - 1] = k;\n        });\n        return result;\n    }\n}\n\n# 17ms 22.67%\nclass Solution {\n    public int[] findFrequent(int[] nums) {\n        if (nums == null || nums.length == 0) return new int[0];\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            map",
      -1.1875
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.count = {}\n        self.max_count = 0\n        self.max_key = 0\n\n    def add_list(self, l):\n        \"\"\"\n        Adds a list of integers into the data structure.\n        :type l: List[int]\n        \"\"\"\n        for i in l:\n            if i not in self.count:\n                self.count[i] = 1\n            else:\n                self.count[i] += 1\n\n        self.max_key = max(self.count, key=self.count.get)\n        self.max_count = max(self.max_count, self.count[self.max_key])\n\n    def get_frequency_list(self):\n        \"\"\"\n        Returns a list of lists of integers corresponding to how often each integer occurs.\n        If a integer does not appear in the list of lists, it is listed as -1.\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        for i in self.count:\n            if i in self.count:\n                res.append([self.count[i]])\n            else:\n                res.append([-1])\n        return res\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# obj.add_list(l)\n# param_2 = obj.get_frequency_list()\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\nThe key is the max value in the list.\n\n# 96ms 19%\nclass Solution {\n    HashMap<Integer, Integer> map;\n    public Solution() {\n        map = new HashMap<>();\n    }\n\n    public void addList(List<Integer> list) {\n        for (int i : list) {\n            if (!map.containsKey(i)) {\n                map.",
      -1.203125
    ],
    [
      "from collections import defaultdict\n\ndef find_frequency(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    freq_dict = defaultdict(int)\n    for list_of_ints in list_of_lists:\n        for int_ in list_of_ints:\n            freq_dict[int_] += 1\n    return list(freq_dict.values())\n\nif __name__ == '__main__':\n    assert find_frequency([[1, 2, 3], [1, 2], [1]]) == [1, 3, 1]\n    assert find_frequency([[1, 2, 3], [1, 2], [1, 2]]) == [1, 2, 2]\n    assert find_frequency([[1, 2, 3], [1, 2], [1]]) == [1, 2, 1]\n    assert find_frequency([[1, 2, 3], [1, 2], [1, 2, 3]]) == [1, 2, 3]",
      -1.716796875
    ],
    [
      "# https://leetcode.com/problems/frequency-count-list/\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#\n# class Solution(object):\n#     def getFrequencyCount(self, head):\n#         \"\"\"\n#         :type head: ListNode\n#         :rtype: int\n#         \"\"\"\n#         count = 0\n#         node = head\n#         while node is not None:\n#             node = node.next\n#             count += 1\n#         return count\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#\n# class Solution(object):\n#     def getFrequencyCount(self, head):\n#         \"\"\"\n#         :type head: ListNode\n#         :rtype: int\n#         \"\"\"\n#         count = 0\n#         node = head\n#         while node is not None:\n#             count += 1\n#             node = node.next\n#         return count\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#\n# class Solution(object):\n#     def getFrequencyCount(self, head):\n#         \"\"\"\n#         :type head: ListNode\n#         :rtype: int\n#         \"\"\"\n#         count = 1\n#         node = head\n#         while node is not None:\n#             node = node.next\n#             count += 1\n#         return count",
      -1.76171875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def countFrequency(self, head):\n        if not head:\n            return None\n        counts = {}\n        while head:\n            if head.val in counts:\n                counts[head.val] += 1\n            else:\n                counts[head.val] = 1\n            head = head.next\n        return self.printCounts(counts)\n\n    def printCounts(self, counts):\n        node = self.head = ListNode(0)\n        for key, val in counts.iteritems():\n            node.val = key\n            node.next = ListNode(val)\n            node = node.next\n        return self.head.next\n\n\n\nclass Solution2:\n    # @param head, a ListNode\n    # @return a ListNode\n    def countFrequency(self, head):\n        if not head:\n            return None\n        counts = {}\n        while head:\n            if head.val in counts:\n                counts[head.val] += 1\n            else:\n                counts[head.val] = 1\n            head = head.next\n        return self.printCounts(counts)\n\n    def printCounts(self, counts):\n        node = self.head = ListNode(0)\n        for key, val in counts.iteritems():\n            node.val = key\n            node.next = ListNode(val)\n            node = node.next\n        return self.head.next",
      -1.8505859375
    ],
    [
      "# https://leetcode.com/problems/frequency-count/\n\nclass Solution(object):\n    def findFrequentTreeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def dfs(i, j):\n            if i == j:\n                return 0\n            else:\n                return max(dfs(i + 1, j), dfs(i, j + 1))\n\n        freq_count = 0\n        for num in nums:\n            freq_count += dfs(0, len(nums) - 1)\n        return freq_count",
      -1.947265625
    ],
    [
      "def find_frequency_count(l):\n    \"\"\"\n    :type l: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not l:\n        return 0\n\n    frequency_count = collections.defaultdict(int)\n    for line in l:\n        for value in line:\n            frequency_count[value] += 1\n\n    return sum(frequency_count.values())\n\n# Test cases\n\ndef test_find_frequency_count():\n    assert find_frequency_count([[1, 2, 3]]) == 1\n    assert find_frequency_count([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 3\n    assert find_frequency_count([[1, 2, 3], [1, 2, 3]]) == 2\n    assert find_frequency_count([[1, 2, 3], [1, 2, 3]]) == 2\n\n# Time:  O(n)\n# Space: O(n)\n# Divide and Conquer\n\n# BFS\n\nclass Solution:\n    # @param {List[List[int]]} matrix\n    # @return {int}\n    def totalNQueens(self, n):\n        if n == 0:\n            return 0\n\n        result = 0\n        self.bfs(n, 0, [])\n        return result\n\n    def bfs(self, n, row, columns):\n        if row == n:\n            result += 1\n            return\n\n        for column in range(n):\n            if self.isValid(n, row, column, columns):\n                self.bfs(n, row + 1, columns + [column])\n\n    def isValid(self, n, row, column, columns):\n        if row == n:\n            return False\n\n        if column == n:\n            return True\n\n        if row > n or column > n or columns[row - 1] == column or columns[column - 1] == row - 1:\n            return False\n\n        return True",
      -1.9658203125
    ],
    [
      "class Solution(object):\n    def countFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        result = collections.defaultdict(int)\n        for i in nums:\n            for j in i:\n                result[j] += 1\n        return sum(result.values())\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [[1, 2, 3, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]\n    k = 3\n    print(s.countFrequent(nums, k))",
      -2.107421875
    ],
    [
      "import sys\n\ndef find_frequency(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    freq = [0 for i in range(len(list_of_lists))]\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > 0:\n                freq[i][j] = freq[i][j] + 1\n    return freq\n\nif __name__ == '__main__':\n    list_of_lists = [[3, 1, 2, 2], [4, 5, 6, 1, 2], [1, 2, 3]]\n    freq = find_frequency(list_of_lists)\n    for i in range(len(freq)):\n        for j in range(len(freq[i])):\n            print(freq[i][j], end=\", \")\n        print()",
      -2.1953125
    ],
    [
      "# O(n) time\ndef count_frequency(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return [nums[i][0] for i in range(len(nums))]\n\n# O(n) space\ndef count_frequency2(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return [nums[i][0] for i in range(len(nums))]\n\n\n# O(n) time\ndef count_frequency3(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return [nums[i][0] for i in range(len(nums))]\n\n# O(n) space\ndef count_frequency4(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return [nums[i][0] for i in range(len(nums))]\n\n# O(n) time\ndef count_frequency5(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return [nums[i][0] for i in range(len(nums))]\n\n# O(n) time\ndef count_frequency6(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    return [nums[i][0] for i in range(len(nums))]\n\n# O(n) time\ndef",
      -2.2109375
    ],
    [
      "def list_of_lists_frequency_count(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not lists:\n        return []\n    result = [0] * len(lists[0])\n    for list in lists:\n        for index, value in enumerate(list):\n            result[index] += value\n    return result\n\n\nif __name__ == '__main__':\n    lists = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n             [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n             [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n             [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]\n    print list_of_lists_frequency_count(lists)",
      -2.220703125
    ],
    [
      "# https://oj.leetcode.com/problems/word-break/\n# Definition for a  word segmentation.\n# class Solution(object):\n#     def wordBreak(self, s, wordDict):\n#         \"\"\"\n#         :type s: str\n#         :type wordDict: Set[str]\n#         :rtype: bool\n#         \"\"\"\n#         n = len(s)\n#         dp = [False for i in range(n+1)]\n#         dp[0] = True\n#         for i in range(1, n+1):\n#             for j in range(1, i):\n#                 if dp[j] and s[j-1] in wordDict:\n#                     dp[i] = True\n#                     break\n#         return dp[n]\n\n# def wordBreak(self, s, wordDict):\n#     n = len(s)\n#     dp = [False for i in range(n+1)]\n#     dp[0] = True\n#     for i in range(1, n+1):\n#         for j in range(1, i):\n#             if dp[j] and s[j-1] in wordDict:\n#                 dp[i] = True\n#                 break\n#     return dp[n]\n\n# def wordBreak(self, s, wordDict):\n#     n = len(s)\n#     dp = [False for i in range(n+1)]\n#     dp[0] = True\n#     for i in range(1, n+1):\n#         for j in range(1, i):\n#             if dp[j] and s[j-1] in wordDict:\n#                 dp[i] = True\n#                 break\n#     return dp[n]\n\n# def wordBreak(self, s, wordDict):\n#     n = len(s)\n#     dp = [False for i in range(n+1)]\n#     dp[0] = True\n#     for i in range(1, n+1):\n#         for j in range(1, i):\n#             if dp[j] and",
      -2.251953125
    ],
    [
      "def list_frequency(list_of_lists):\n    \"\"\"\n    Input: list of lists\n    Output: frequency count of list\n    \"\"\"\n    count = defaultdict(int)\n    for list_of_words in list_of_lists:\n        for word in list_of_words:\n            count[word] += 1\n    return count\n\ndef main():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert list_frequency([[1,2,3], [1,2,3]]) == {1: 3, 2: 2, 3: 1}, \"1st example\"\n    assert list_frequency([[1,2,3], [4,5,6]]) == {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}, \"2nd example\"\n    assert list_frequency([[1,2,3], [4,5,6,7]]) == {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1}, \"3rd example\"\n\nif __name__ == \"__main__\":\n    main()",
      -2.591796875
    ],
    [
      "def count_frequency(data):\n    \"\"\"\n    :type data: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # Count frequency of list elements\n    frequency = defaultdict(int)\n    for item in data:\n        for i in item:\n            frequency[i] += 1\n\n    # Convert frequency to list\n    frequency_list = []\n    for i in frequency:\n        frequency_list.append(i)\n\n    # Sort list\n    frequency_list.sort()\n\n    # Return frequency list\n    return frequency_list\n\n\nif __name__ == '__main__':\n    data = [[1, 2, 3, 4], [1, 2, 3, 3], [1, 2, 3], [1, 2], [1]]\n    frequency = count_frequency(data)\n    print(frequency)\n\n    data = [[1, 2, 3, 4], [1, 2, 3, 3], [1, 2, 3], [1, 2], [1]]\n    frequency = count_frequency(data)\n    print(frequency)",
      -2.59765625
    ],
    [
      "# https://leetcode.com/problems/frequency-count-list/\n\nclass Solution:\n    # @param lists, a list of lists of integers\n    # @return an integer\n    def frequencyCount(self, lists):\n        if not lists:\n            return 0\n        freq = defaultdict(int)\n        for l in lists:\n            for i in l:\n                freq[i] += 1\n        return max(freq.values())\n\nif __name__ == '__main__':\n    assert Solution().frequencyCount([[1, 2], [3, 4, 5], [2, 7, 8, 9]]) == 3\n    assert Solution().frequencyCount([[1, 2], [3, 4, 5], [2, 7, 8, 9, 10]]) == 5\n    assert Solution().frequencyCount([[1, 2], [3, 4, 5, 6]]) == 2",
      -2.736328125
    ],
    [
      "from collections import Counter\n\n\ndef frequency_count(lst):\n    \"\"\"\n    :type lst: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    counter = Counter(lst)\n    return [count for key, count in counter.most_common()]\n\n\nif __name__ == '__main__':\n    lst = [[1, 2, 3, 1], [1, 2, 1], [1, 1, 1, 1]]\n    print(frequency_count(lst))\n    # [[2, 2, 2, 1], [1, 1, 1, 1]]",
      -2.765625
    ],
    [
      "def list_frequency_count(nums):\n    \"\"\"\n    :type nums: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n\nclass Solution:\n    def frequency(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for num in nums:\n            if num not in result:\n                result.append(num)\n        return result\n\nif __name__ == '__main__':\n    nums = [[1, 2, 3], [1, 3, 5], [1, 2, 3], [1, 3, 5], [1, 2, 3], [1, 3, 5], [1, 2, 3], [1, 3, 5], [1, 2, 3], [1, 3, 5]]\n    print(Solution().frequency(nums))",
      -3.173828125
    ],
    [
      "def find_frequency(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    frequency = [0] * len(list_of_lists)\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            frequency[list_of_lists[i][j]] += 1\n    return frequency\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3], [1, 2, 2, 2, 3], [1, 2, 2, 2, 2, 2, 2, 2, 2]]\n    frequency = find_frequency(list_of_lists)\n    print(frequency)",
      -3.1953125
    ],
    [
      "import collections\n\ndef count_frequency(input_list):\n    \"\"\"\n    Given a list of lists, count the frequency of each item.\n    \"\"\"\n    frequency = collections.defaultdict(int)\n    for items in input_list:\n        for item in items:\n            frequency[item] += 1\n\n    return frequency\n\n# TODO:\n# 1. Write a function to count frequency of an element in a list of lists.\n# 2. Write a function to find frequency of a list of lists.\n# 3. Write a function to find frequency of a list of lists.\n# 4. Write a function to find frequency of a list of lists.\n# 5. Write a function to find frequency of a list of lists.\n# 6. Write a function to find frequency of a list of lists.\n# 7. Write a function to find frequency of a list of lists.\n# 8. Write a function to find frequency of a list of lists.\n# 9. Write a function to find frequency of a list of lists.\n# 10. Write a function to find frequency of a list of lists.\n# 11. Write a function to find frequency of a list of lists.\n# 12. Write a function to find frequency of a list of lists.\n# 13. Write a function to find frequency of a list of lists.\n# 14. Write a function to find frequency of a list of lists.\n# 15. Write a function to find frequency of a list of lists.\n# 16. Write a function to find frequency of a list of lists.\n# 17. Write a function to find frequency of a list of lists.\n# 18. Write a function to find frequency of a list of lists.\n# 19. Write a function to find frequency of a list of lists.\n# 20. Write a function to find frequency of a list of lists.\n# 21. Write a function to find frequency of a list of lists.\n# 22. Write a function to find frequency of a list of lists.\n# 23. Write a function to find frequency of a list of lists.\n# 24. Write a function to find frequency of a list of lists.\n# 25. Write a function to find frequency of a list of lists.\n# 26. Write a function to find frequency of a list of lists.\n# 27. Write a function to find frequency of a list",
      -3.279296875
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.map = {}\n\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[List[int]]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        self.map = {}\n        n = len(nums)\n        for i in range(n):\n            for j in range(n):\n                if nums[i][j] in self.map:\n                    self.map[nums[i][j]] += 1\n                else:\n                    self.map[nums[i][j]] = 1\n\n        result = []\n        for i in range(k):\n            max_val = 0\n            max_idx = 0\n            for j in range(n):\n                if self.map[nums[j][i]] > max_val:\n                    max_val = self.map[nums[j][i]]\n                    max_idx = j\n            result.append(nums[max_idx][i])\n            self.map[nums[max_idx][i]] -= 1\n        return result\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/top-k-frequent-elements/solution/\n\n# 1ms 100%\nclass Solution {\n    public List<Integer> topKFrequent(int[] nums, int k) {\n        Map<Integer, Integer> map = new HashMap();\n        for (int num : nums) map.put(num, map.getOrDefault(num, 0) + 1);\n\n        List<Integer> res = new ArrayList();\n        for (Integer num : map.keySet()) {\n            if (map.get(num) >= k) res.add(num);\n        }\n        return res;",
      -3.353515625
    ],
    [
      "def list_frequency(input_list):\n    \"\"\"\n    :type input_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    freq = [0] * len(input_list)\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            freq[input_list[i][j]] += 1\n    return freq\n\n# test\nassert list_frequency([[1, 2, 2, 3], [1, 1, 2, 3], [1, 2, 2, 3], [1, 2, 2, 3]]) == [1, 2, 2, 2]\nassert list_frequency([[1, 2, 2, 3], [1, 1, 2, 3], [1, 2, 2, 3], [1, 2, 2, 3]]) == [1, 3, 2, 2]\nassert list_frequency([[1, 2, 2, 3], [1, 1, 2, 3], [1, 2, 2, 3], [1, 2, 2, 3]]) == [1, 3, 2, 2]\nassert list_frequency([[1, 2, 2, 3], [1, 1, 2, 3], [1, 2, 2, 3], [1, 2, 2, 3]]) == [1, 3, 2, 2]",
      -3.482421875
    ],
    [
      "def findFrequency(listOfLists):\n    \"\"\"\n    Arguments:\n    listOfLists: list of lists\n    Returns:\n    frequency of the list\n    \"\"\"\n    count = 0\n    for item in listOfLists:\n        if item not in listOfLists:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    testList = [[1,2,3,4], [1,2,3,4,5], [1,2,3,4,5,6], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8]]\n    print findFrequency(testList)\n    testList = [[1,2,3,4,5], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8]]\n    print findFrequency(testList)\n    testList = [[1,2,3,4,5,6], [1,2,3,4,5,6,7,8]]\n    print findFrequency(testList)\n    testList = [[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107",
      -3.51171875
    ],
    [
      "def list_to_dict(lst):\n    \"\"\"\n    Convert list of lists to dictionary.\n    \"\"\"\n    dic = {}\n    for i in lst:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\n\ndef count_frequency(lst):\n    \"\"\"\n    Count frequency of list.\n    \"\"\"\n    dic = list_to_dict(lst)\n    result = {}\n    for k, v in dic.items():\n        result[k] = v\n    return result\n\ndef main():\n    \"\"\"\n    Main.\n    \"\"\"\n    lst = [[1,2,3], [4,5,6], [7,8,9]]\n    result = count_frequency(lst)\n    print result\n\nif __name__ == '__main__':\n    main()",
      -3.658203125
    ],
    [
      "def list_frequency(input_list):\n    \"\"\"\n    :type input_list: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    frequency_list = [[0] * len(input_list[0]) for _ in range(len(input_list))]\n\n    for index, item in enumerate(input_list):\n        for i in range(len(item)):\n            frequency_list[index][i] += 1\n\n    return frequency_list\n\n\ndef list_frequency_2(input_list):\n    \"\"\"\n    :type input_list: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    frequency_list = [[0] * len(input_list[0]) for _ in range(len(input_list))]\n    for index, item in enumerate(input_list):\n        for i in range(len(item)):\n            frequency_list[index][i] += 1\n\n    return frequency_list\n\ndef list_frequency_3(input_list):\n    \"\"\"\n    :type input_list: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    frequency_list = [[0] * len(input_list[0]) for _ in range(len(input_list))]\n\n    for index, item in enumerate(input_list):\n        for i in range(len(item)):\n            if item[i] == 0:\n                frequency_list[index][i] += 1\n            else:\n                for j in range(i + 1, len(item)):\n                    if item[j] == 0:\n                        frequency_list[index][i] += 1\n                        frequency_list[index][j] += 1\n\n    return frequency_list\n\nif __name__ == '__main__':\n    input_list = [[1, 2, 0, 0, 3], [4, 5, 6], [7, 8], [9, 0]]\n    print(list_frequency(input_list))\n    print(list_frequency_2(input_list))\n    print(list_frequency_3(input_list))",
      -3.728515625
    ],
    [
      "# http://www.codeeval.com/open_challenges/20/\n\nimport sys\n\ndef main(argv):\n    if len(argv)!= 2:\n        print(\"Usage: {} <file>\".format(sys.argv[0]))\n        return 1\n    f = open(argv[1], \"r\")\n    data = f.readlines()\n    f.close()\n    data = [x.strip() for x in data]\n    data = [x.split(\",\") for x in data]\n    count = {}\n    for line in data:\n        for value in line:\n            if value not in count:\n                count[value] = 0\n            count[value] += 1\n    for key in count:\n        print(key, count[key])\n\nif __name__ == \"__main__\":\n    main(sys.argv)",
      -3.75390625
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n#\n# class Solution:\n#     def __init__(self):\n#         self.map = {}\n#\n#     def getListNode(self, head):\n#         if head is None:\n#             return None\n#         else:\n#             return head.next\n#\n#     def getListNodeCount(self, head):\n#         \"\"\"\n#         :type head: ListNode\n#         :rtype: List[int]\n#         \"\"\"\n#         count = 0\n#         node = self.getListNode(head)\n#         while node is not None:\n#             count += 1\n#             node = self.getListNode(node.next)\n#         return count\n#\n#     def printListNode(self, head):\n#         if head is None:\n#             return\n#         else:\n#             self.printListNode(head.next)\n#             print(head.val)\n#\n#     def printListNodeCount(self, head):\n#         count = self.getListNodeCount(head)\n#         print(count)\n#\n# s = Solution()\n# head = ListNode(1, ListNode(2, ListNode(3, ListNode(4))))\n# print(s.printListNode(head))\n# print(s.printListNodeCount(head))\n# print(s.printListNode(ListNode(1, ListNode(2, ListNode(3, ListNode(4))))))\n# print(s.printListNodeCount(ListNode(1, ListNode(2, ListNode(3, ListNode(4))))))",
      -3.763671875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def tree2list(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if root is None:\n            return []\n        return self.tree2list(root.left) + [root.val] + self.tree2list(root.right)\n    \n    def countFrequency(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if root is None:\n            return []\n        \n        return self.countFrequency(root.left) + [root.val] + self.countFrequency(root.right)\n    \n    def countFrequency2(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if root is None:\n            return []\n        \n        res = [0] * (1 + root.val)\n        res[0] = 1\n        \n        cur = root\n        while cur is not None:\n            res[cur.val] += 1\n            cur = cur.left\n        \n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print sol.tree2list(root)\n    print sol.countFrequency(root)",
      -3.8203125
    ],
    [
      "def count_frequency(l):\n    \"\"\"\n    Input:\n        l: a list of lists\n    Output:\n        a dict of frequency counts.\n    Example:\n        >>> l = [[1, 2, 1], [1, 2, 1], [2, 3, 1], [1, 2, 1]]\n        >>> count_frequency(l)\n        {1: 2, 2: 2, 3: 1}\n    \"\"\"\n    # Initialize a dict with default value of 0\n    freq = {k: 0 for k in set(l)}\n\n    for i in l:\n        for j in i:\n            freq[j] += 1\n\n    return freq\n\nif __name__ == '__main__':\n    l = [[1, 2, 1], [1, 2, 1], [2, 3, 1], [1, 2, 1]]\n    freq = count_frequency(l)\n    print(freq)",
      -3.869140625
    ],
    [
      "def find_frequency(input_list):\n    \"\"\"\n    Find frequency of input list.\n    input_list: list of lists.\n    return: list of tuples.\n    \"\"\"\n    frequency = {}\n    for element in input_list:\n        if element not in frequency:\n            frequency[element] = 1\n        else:\n            frequency[element] += 1\n    return [(key, value) for key, value in frequency.items()]\n\n\nif __name__ == \"__main__\":\n    input_list = [[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]\n    print find_frequency(input_list)",
      -3.875
    ],
    [
      "def find_frequency(lst):\n    '''\n    :type lst: List[List[int]]\n    :rtype: List[int]\n    '''\n    if not lst:\n        return []\n\n    frequency = []\n    for i in range(len(lst[0])):\n        if not lst[0][i]:\n            continue\n\n        if lst[0][i] in frequency:\n            frequency[lst[0][i]] += 1\n        else:\n            frequency.append(lst[0][i])\n\n    for i in range(1, len(lst)):\n        for j in range(len(lst[i])):\n            if not lst[i][j]:\n                continue\n\n            if lst[i][j] in frequency:\n                frequency[lst[i][j]] += 1\n            else:\n                frequency.append(lst[i][j])\n\n    return frequency\n\nclass Solution:\n    def findFrequency(self, list):\n        \"\"\"\n        :type list: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if not list:\n            return []\n\n        frequency = {}\n        for i in range(len(list[0])):\n            if not list[0][i]:\n                continue\n\n            if list[0][i] in frequency:\n                frequency[list[0][i]] += 1\n            else:\n                frequency.update({list[0][i]:1})\n\n        for i in range(1, len(list)):\n            for j in range(len(list[i])):\n                if not list[i][j]:\n                    continue\n\n                if list[i][j] in frequency:\n                    frequency[list[i][j]] += 1\n                else:\n                    frequency.update({list[i][j]:1})\n\n        return frequency.values()\n\nif __name__ == \"__main__\":\n    assert Solution().findFrequency([[1,1,2,2], [1,1,2,2], [1,2,2,2,3]]) == [2, 2, 3]\n    assert Solution().findFrequency([[1,1,2,",
      -3.91796875
    ],
    [
      "# https://leetcode.com/problems/frequency-count-list/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @param k, an integer\n    # @return a ListNode\n    def getFrequencyCount(self, head, k):\n        if head is None:\n            return None\n        elif head.next is None:\n            return ListNode(head.val, None)\n        else:\n            dummy = ListNode(0, None)\n            dummy.next = head\n            head = dummy\n            while head.next is not None:\n                # print(head.val, head.next.val)\n                if head.next.next is not None:\n                    if head.val == head.next.val and head.val == head.next.next.val:\n                        head.next.next = head.next.next.next\n                    else:\n                        head.next.next = head.next.next.next\n                else:\n                    head.next.next = head.next.next\n                head = head.next\n            head = dummy\n            head.next = head.next.next\n            return head\n\nif __name__ == \"__main__\":\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(10, ListNode(11, ListNode(12, ListNode(13, ListNode(14, ListNode(15, ListNode(16, ListNode(17, ListNode(18, ListNode(19, ListNode(20, ListNode(21, ListNode(22, ListNode(23, ListNode(24, ListNode(25, ListNode(26, ListNode(27, ListNode(28, ListNode(29, ListNode(30, ListNode(31, ListNode(32, ListNode(33, ListNode(34, ListNode(35, ListNode(36, ListNode(",
      -4.15625
    ],
    [
      "def find_frequency(input_list):\n    \"\"\"\n    :type input_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    frequency = {}\n    for element in input_list:\n        if element not in frequency:\n            frequency[element] = 1\n        else:\n            frequency[element] += 1\n    return list(frequency.values())\n\nclass Solution:\n    # @param input_list, a list of lists of integers\n    # @return a list of lists of integers\n    def findFrequency(self, input_list):\n        \"\"\"\n        :type input_list: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if not input_list:\n            return []\n        frequency = {}\n        for element in input_list:\n            if element not in frequency:\n                frequency[element] = 1\n            else:\n                frequency[element] += 1\n        return list(frequency.values())\n\nif __name__ == '__main__':\n    print Solution().findFrequency([[1,2], [3,4,5]])",
      -4.265625
    ],
    [
      "# https://leetcode.com/problems/frequency-count-of-list-of-lists/\n# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\nclass Solution:\n    def __init__(self):\n        self.dict = {}\n\n    def add_to_dict(self, node):\n        if node.val not in self.dict:\n            self.dict[node.val] = 1\n        else:\n            self.dict[node.val] += 1\n\n    def countFrequency(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        counter = [0] * 10\n        curr = head\n        while curr:\n            self.add_to_dict(curr)\n            counter[curr.val] += 1\n            curr = curr.next\n\n        for i in range(10):\n            if counter[i]:\n                for j in range(counter[i]):\n                    yield ListNode(i)\n\n        return head\n\ndef main():\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n\n    print(Solution().countFrequency(head))\n\nif __name__ == '__main__':\n    main()",
      -4.3515625
    ],
    [
      "import unittest\nimport collections\n\n# https://leetcode.com/problems/frequency-count-of-list-of-lists/discuss/122816/Python-solution-with-more-explanation\nclass Solution(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.table = collections.defaultdict(int)\n\n    def addNum(self, nums):\n        \"\"\"\n        Adds a num into the data structure.\n        :type nums: List[int]\n        :rtype: void\n        \"\"\"\n        for num in nums:\n            self.table[num] += 1\n\n    def getFrequency(self, nums):\n        \"\"\"\n        Returns the number of distinct elements present in the list.\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = 0\n        for num in nums:\n            if num in self.table:\n                count += self.table[num]\n        return count\n\n    def getFrequency1(self, nums):\n        \"\"\"\n        Returns the number of distinct elements present in the list.\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return collections.Counter(nums).most_common(1)[0][1]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/frequency-count-of-list-of-lists/solution/\n\n# 12ms 99.43%\nclass Solution {\n    public void addNum(int[] nums) {\n        for (int num : nums) {\n            table.put(num, table.getOrDefault(num, 0) + 1);\n        }\n    }\n\n    public int getFrequency(int[] nums) {\n        return table.entrySet().stream()\n                   .filter(e -> e.getValue() > 1)\n                   .mapTo",
      -5.01171875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def __init__(self, head):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        :type head: ListNode\n        \"\"\"\n        self.head = head\n        self.cnt = 0\n\n    def printList(self):\n        curr = self.head\n        while curr:\n            print curr.val\n            curr = curr.next\n\n    def printList2(self):\n        curr = self.head\n        while curr:\n            print curr.val, curr.next\n            curr = curr.next\n\n    def printList3(self):\n        curr = self.head\n        while curr:\n            print curr.val, curr.next.val, curr.next.next\n\n    def printList4(self):\n        curr = self.head\n        while curr:\n            print curr.val, curr.next.val, curr.next.next.val, curr.next.next.next\n\n    def printList5(self):\n        curr = self.head\n        while curr:\n            print curr.val, curr.next.val, curr.next.next.val, curr.next.next.next.val\n\n    def printList6(self):\n        curr = self.head\n        while curr:\n            print curr.val, curr.next.val, curr.next.next.val, curr.next.next.next.val, curr.next.next.next.next\n\n    def printList7(self):\n        curr = self.head\n        while curr:\n            print curr.val, curr.next.val, curr.next.next.val, curr.next.next.next.val, curr.next.next.next.next.val\n\n    def printList8(self):\n        curr = self",
      -5.68359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a list node\n    # @return a list of list node\n    def __build_list(self, head):\n        # write your code here\n        if not head:\n            return []\n        lst = []\n        curr = head\n        while curr:\n            lst.append(curr.val)\n            curr = curr.next\n        return lst\n\n    def __build_reverse(self, head):\n        # write your code here\n        if not head:\n            return []\n        lst = []\n        curr = head\n        while curr:\n            lst.append(curr.val)\n            curr = curr.next\n        lst.reverse()\n        return lst\n\n    def __build_list_reverse(self, head):\n        # write your code here\n        if not head:\n            return []\n        lst = []\n        curr = head\n        while curr:\n            lst.append(curr.val)\n            curr = curr.next\n        lst.reverse()\n        return lst\n\n    def __build_list_reverse2(self, head):\n        # write your code here\n        if not head:\n            return []\n        lst = []\n        curr = head\n        while curr:\n            lst.append(curr.val)\n            curr = curr.next\n        lst.reverse()\n        return lst\n\n    def __build_list_reverse3(self, head):\n        # write your code here\n        if not head:\n            return []\n        lst = []\n        curr = head\n        while curr:\n            lst.append(curr.val)\n            curr = curr.next\n        lst.reverse()\n        return lst\n\n    def __build_list_reverse4(self, head):\n        # write your code here\n        if not head:\n            return []\n        lst = []\n        curr = head",
      -5.7578125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a list node\n    # @return a list node\n    def countFrequency(self, head):\n        if not head:\n            return head\n        cnt = {}\n        curr = head\n        while curr:\n            if curr.val not in cnt:\n                cnt[curr.val] = 0\n            cnt[curr.val] += 1\n            curr = curr.next\n        for i in cnt:\n            cnt[i] = cnt[i]/2\n        return head\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(2)\n    head.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next.next.next.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next.next.",
      -6.05078125
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/insertionsort2/problem\n\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[j] < arr[j - 1]:\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n    return arr\n\n\n# arr = [[1,3,5,7], [2,4,6], [8,9,10]]\narr = [[9, 9, 9, 9], [1, 1, 1, 1], [5, 5, 5, 5], [9, 9, 9, 9]]\n# arr = [[1,3,5,7], [2,4,6], [8,9,10]]\n\nprint(insertion_sort(arr))",
      -6.25390625
    ],
    [
      "def find_frequency(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # Write your code here\n    frequency = [0] * 10\n    for list in list_of_lists:\n        for i in list:\n            frequency[i] += 1\n    return frequency\n\n\nif __name__ == '__main__':\n    assert find_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [0, 1, 2, 3]\n    assert find_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [0, 1, 2, 3]\n    assert find_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [0, 1, 2, 3]\n    assert find_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [0, 1, 2, 3]",
      -6.515625
    ],
    [
      "def frequencyCount(list):\n    \"\"\"\n    :type list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # write your code here\n    if not list:\n        return []\n    res = [0] * len(list[0])\n    for i in range(len(list)):\n        for j in range(len(list[0])):\n            if list[i][j] == 1:\n                res[j] += 1\n    return res\n\n\n# Your Code Below This Point\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#",
      -6.59765625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return an integer\n    def __len(self, head):\n        count = 0\n        while head:\n            head = head.next\n            count += 1\n        return count\n    \n    # @param head, a ListNode\n    # @return an integer\n    def __count(self, head):\n        count = 0\n        while head:\n            head = head.next\n            count += 1\n        return count\n    \n    # @param head, a ListNode\n    # @return an integer\n    def __count2(self, head):\n        count = 0\n        while head:\n            head = head.next\n            count += 1\n        return count\n    \n    def __count3(self, head):\n        count = 0\n        while head:\n            count += 1\n            head = head.next\n        return count\n    \n    # @param head, a ListNode\n    # @return an integer\n    def __count4(self, head):\n        count = 0\n        while head:\n            head = head.next\n            count += 1\n        return count\n    \n    # @param head, a ListNode\n    # @return an integer\n    def __count5(self, head):\n        count = 0\n        while head:\n            head = head.next\n            count += 1\n        return count\n    \n    # @param head, a ListNode\n    # @return an integer\n    def __count6(self, head):\n        count = 0\n        while head:\n            head = head.next\n            count += 1\n        return count\n    \n    # @param head, a ListNode\n    # @return an integer\n    def __count7(self, head):\n        count = 0\n        while head:\n            head = head.next\n            count += 1\n        return count\n    \n    # @param head, a ListNode\n    # @return an integer\n    def __count8(self, head):\n        count = 0\n        while head:",
      -6.98828125
    ],
    [
      "def frequency_count(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # Write your code here\n    return [[x,1] for x in lists]\n\nif __name__ == '__main__':\n    lists = [[1,2,3],[1,3,5],[2,3,5]]\n    print(frequency_count(lists))\n    lists = [[1,2,3,4,5,6,7,8,9],[1,3,5,7,9]]\n    print(frequency_count(lists))\n    lists = [[1,2,3],[1,3,5],[2,3,5]]\n    print(frequency_count(lists))\n    lists = [[1,2,3],[1,3,5],[2,3,5],[3,3,5]]\n    print(frequency_count(lists))\n    lists = [[1,2,3],[1,3,5],[2,3,5],[3,3,5],[4,3,5],[5,3,5]]\n    print(frequency_count(lists))",
      -7.73046875
    ],
    [
      "def list_frequency(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: frequency count of list\n    \"\"\"\n    if not lst:\n        return 0\n    dic = {}\n    for e in lst:\n        if e not in dic:\n            dic[e] = 1\n        else:\n            dic[e] += 1\n    return dic\n\ndef list_frequency2(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: frequency count of list\n    \"\"\"\n    if not lst:\n        return 0\n    dic = {}\n    for e in lst:\n        if e not in dic:\n            dic[e] = 1\n        else:\n            dic[e] += 1\n    return dic.values()\n\ndef list_frequency3(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: frequency count of list\n    \"\"\"\n    if not lst:\n        return 0\n    dic = {}\n    for e in lst:\n        if e not in dic:\n            dic[e] = 1\n        else:\n            dic[e] += 1\n    return dic.values()\n\ndef list_frequency4(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: frequency count of list\n    \"\"\"\n    if not lst:\n        return 0\n    dic = {}\n    for e in lst:\n        if e not in dic:\n            dic[e] = 1\n        else:\n            dic[e] += 1\n    return dic.values()\n\ndef list_frequency5(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: frequency count of list\n    \"\"\"\n    if not lst:\n        return 0\n    dic = {}\n    for e in lst:\n        if e not in dic:\n            dic[e] = 1\n        else:\n            dic[e] += 1\n    return dic.values()\n\nif __name__ == \"__main__\":\n    lst =",
      -8.21875
    ],
    [
      "# https://leetcode.com/problems/frequency-count-in-sorted-list/\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def countFrequency(self, head):\n        if not head:\n            return None\n        if not head.next:\n            return head\n        slow = head\n        fast = head.next\n        count = 1\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            count += 1\n        if fast:\n            slow = slow.next\n        else:\n            fast = head\n        return self.countFrequencyHelper(slow, fast, count)\n\n    def countFrequencyHelper(self, slow, fast, count):\n        if not slow:\n            return None\n        if not fast:\n            return slow\n        if slow.val!= fast.val:\n            return self.countFrequencyHelper(slow.next, fast, count)\n        slow = slow.next\n        fast = fast.next\n        while fast:\n            if slow.val!= fast.val:\n                slow = slow.next\n            fast = fast.next\n        if slow:\n            slow = slow.next\n        else:\n            fast = fast.next\n        return self.countFrequencyHelper(slow, fast, count)",
      -8.9296875
    ],
    [
      "def findFrequency(listOfLists):\n    \"\"\"\n    :type listOfLists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    listOfLists.sort()\n    frequency = {}\n    for index, element in enumerate(listOfLists):\n        if element not in frequency:\n            frequency[element] = 1\n        else:\n            frequency[element] += 1\n    return list(frequency.values())\n\n# Test Cases\ntestCases = [\n    [[1,2,2,3,3,3,4,4,4],\n     [1,2,2,3,3,3,4,4,4]],\n    [[1,2,2,2,2,3,3,3,3,3],\n     [1,2,2,2,2,3,3,3,3,3]],\n    [[1,2,3,3,4,4,4,4,4,4],\n     [1,2,3,3,4,4,4,4,4,4]],\n    [[1,2,3,3,4,4,4,4,4,4],\n     [1,2,3,3,4,4,4,4,4,4]],\n    [[1,2,3,3,4,4,4,4,4,4],\n     [1,2,3,3,4,4,4,4,4,4]],\n    [[1,2,3,3,4,4,4,4,4,4],\n     [1,2,3,3,4,4,4,4,4,4]]\n]\n\nfor testCase in testCases:\n    print(\"Frequency of list of lists:\", findFrequency(testCase))",
      -9.015625
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n    def __init__(self, L):\n        \"\"\"\n        :type L: List[List[int]]\n        \"\"\"\n        self.L = L\n        self.count = [0] * len(L)\n\n    def countFrequency(self, L):\n        \"\"\"\n        :type L: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        for i in range(len(L)):\n            for j in range(len(L[i])):\n                self.count[L[i][j]] += 1\n\n        return self.count\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 10/13/2016 Rewrite\n# 10/16/2016 Add to list to avoid duplicate\n# 10/17/2016 Use frequency count to avoid duplicate\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n# 8ms 100%\nclass Solution {\n    public ListNode[] countFrequency(ListNode[] L) {\n        ListNode[] result = new ListNode[L.length];\n        for (int i = 0; i < L.length; i++) {\n            result[i] = new ListNode(0);\n        }\n        for (int i = 0; i < L.length; i++) {\n            for (int j",
      -9.0625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def getListLength(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        res = 0\n        while head:\n            head = head.next\n            res += 1\n        return res\n\n    def getListLength2(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        res = 0\n        while head:\n            res += 1\n            head = head.next\n        return res\n\n    def getListLength3(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        length = 0\n        while head:\n            head = head.next\n            length += 1\n        return length\n\n\nif __name__ == \"__main__\":\n    n1 = ListNode(1)\n    n2 = ListNode(2)\n    n3 = ListNode(3)\n    n4 = ListNode(4)\n    n5 = ListNode(5)\n    n6 = ListNode(6)\n    n7 = ListNode(7)\n    n8 = ListNode(8)\n    n9 = ListNode(9)\n    n10 = ListNode(10)\n    n11 = ListNode(11)\n    n12 = ListNode(12)\n    n13 = ListNode(13)\n    n14 = ListNode(14)\n    n15 = ListNode(15)\n    n16 = ListNode(16)\n    n17 = ListNode(17)\n    n18 = ListNode(18)\n    n19 = ListNode(19)\n    n20 = ListNode(20)\n    n21 = ListNode(21)\n    n22 = ListNode(22)\n    n23 = ListNode(23)\n    n24 = ListNode(24)\n    n25 = ListNode(25)\n    n26 = ListNode(26)\n    n27 = ListNode(27)\n    n28 =",
      -9.125
    ],
    [
      "# Definition for a ListNode\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def __init__(self):\n        self.l = None\n        self.n = None\n        self.c = 0\n\n    def print_cnt(self, head):\n        if not head:\n            return\n        self.l = head\n        self.n = head.next\n        self.c = 0\n        while self.n:\n            self.c += 1\n            self.n = self.n.next\n        print self.c\n\n    def print_cnt2(self, head):\n        if not head:\n            return\n        self.l = head\n        self.n = head.next\n        self.c = 0\n        while self.n:\n            if self.n.next:\n                self.c += 1\n                self.n = self.n.next\n            else:\n                self.n = None\n        print self.c\n\n    def print_cnt3(self, head):\n        if not head:\n            return\n        self.l = head\n        self.n = head.next\n        self.c = 0\n        while self.n:\n            self.c += 1\n            self.n = self.n.next\n        print self.c\n\n    def print_cnt4(self, head):\n        if not head:\n            return\n        self.l = head\n        self.n = head.next\n        self.c = 0\n        while self.n:\n            if self.n.next:\n                self.c += 1\n                self.n = self.n.next\n            else:\n                self.n = None\n            if self.n:\n                self.c += 1\n                self.n = self.n.next\n        print self.c\n\n    def print_cnt5(self, head):\n        if not head:\n            return\n        self.l = head\n        self.n = head.next\n        self.c = 0\n        while self.n:\n            self.c += 1\n            self",
      -9.21875
    ],
    [
      "# https://www.hackerrank.com/challenges/list-frequency\ndef list_frequency(my_list):\n    # list of lists\n    # my_list is a list of lists\n    # my_list[0] is a list of strings\n    # my_list[1] is a list of strings\n    # my_list[2] is a list of strings\n    # my_list[3] is a list of strings\n    # my_list[4] is a list of strings\n    # my_list[5] is a list of strings\n    # my_list[6] is a list of strings\n    # my_list[7] is a list of strings\n    # my_list[8] is a list of strings\n    # my_list[9] is a list of strings\n    # my_list[10] is a list of strings\n    # my_list[11] is a list of strings\n    # my_list[12] is a list of strings\n    # my_list[13] is a list of strings\n    # my_list[14] is a list of strings\n    # my_list[15] is a list of strings\n    # my_list[16] is a list of strings\n    # my_list[17] is a list of strings\n    # my_list[18] is a list of strings\n    # my_list[19] is a list of strings\n    # my_list[20] is a list of strings\n    # my_list[21] is a list of strings\n    # my_list[22] is a list of strings\n    # my_list[23] is a list of strings\n    # my_list[24] is a list of strings\n    # my_list[25] is a list of strings\n    # my_list[26] is a list of strings\n    # my_list[27] is a list of strings\n    # my_list[28] is a list of strings\n    # my_list[29] is a list of strings\n    # my_list[30] is a list of strings\n    # my_list[31] is a list of strings\n    # my_list[32] is a list of strings\n    # my_",
      -9.46875
    ],
    [
      "def count_list_frequency(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    \n    # list of lists\n    # list of counts\n    # list of list of counts\n    # list of list of list of counts\n    # list of list of list of list of counts\n    # list of list of list of list of list of counts\n\n    # list of counts\n    # list of list of counts\n    # list of list of list of counts\n    # list of list of list of counts\n    # list of list of list of counts\n\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n    # list of list of counts\n\n    # list",
      -9.9453125
    ],
    [
      "class Solution(object):\n    def countFrequency(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if not lists:\n            return []\n\n        return self.countFrequencyHelper(lists, [])\n\n    def countFrequencyHelper(self, lists, cur):\n        if not lists:\n            return cur\n        if len(cur) == 1:\n            cur.append(0)\n        for i in lists:\n            cur[i[0]] += 1\n            cur = self.countFrequencyHelper(lists[:i[0]+1], cur)\n        return cur\n\n# test\nassert Solution().countFrequency([[1,2,3], [1,2], [1,2,3]]) == [[1, 2, 3], [1, 2], [1, 2, 3]]\nassert Solution().countFrequency([[1], [1,2], [1,2,3]]) == [[1], [1, 2], [1, 2, 3]]\nassert Solution().countFrequency([[1,2,3], [1,2], [1,2,3]]) == [[1, 2, 3], [1, 2], [1, 2, 3]]\nassert Solution().countFrequency([[1,2,3], [1,2], [1,2,3]]) == [[1, 2, 3], [1, 2], [1, 2, 3]]\nassert Solution().countFrequency([[1,2,3], [1,2], [1,2,3]]) == [[1, 2, 3], [1, 2], [1, 2, 3]]\nassert Solution().countFrequency([[1,2,3], [1,2], [1,2,3]]) == [[1, 2, 3], [1, 2], [1, 2, 3]]",
      -9.9609375
    ],
    [
      "# https://www.hackerrank.com/challenges/find-frequency-count-of-list-of-lists/problem\n# From a list of lists, find the frequency of each element.\n#\n# Example:\n#\n# listOfLists = [[1,1,1,2,2,3],[1,1,1,0,0,0],[2,2,2,2,3,4]]\n#\n# The frequency of 1 is 2, and the frequency of 0 is 3.\n#\n# Return [2,3]\n#\n# Challenge:\n#\n# The listOfLists is a nested list of lists.\n#\n# Input:\n# The first line of input will contain an integer T denoting the number of test cases.\n# Each test case will contain an integer N denoting the number of elements in listOfLists.\n# Each element in listOfLists will be a list of integers.\n#\n# The second line of input will contain T space-separated integers denoting the frequencies of each element in listOfLists.\n#\n# Output:\n# For each test case, print the frequency count of each element in listOfLists.\n#\n# Sample Input:\n# 2\n# 1 1 1 2 2 3\n# 1 1 1 0 0 0\n# 2 2 2 2 2 3\n# Sample Output:\n# 2 3\n#\n# Explanation:\n#\n# 1st test case:\n# 1st element is 1, frequency is 2, so output 1 3\n# 2nd test case:\n# 1st element is 1, frequency is 2, so output 1 3\n# 3rd test case:\n# 1st element is 1, frequency is 3, so output 1 3\n# 4th test case:\n# 1st element is 2, frequency is 2, so output 2 3\n# 5th test case:\n# 1st element is 2, frequency is 2, so output 2 3\n# 6th test case:\n# 1st element is 3, frequency is 2, so output 1 3\n#\n# Note:\n#\n# 1 <= T <= 100\n# 1 <= N <= 100\n# 1 <= each element in listOfLists <= 100\n#\n# Related Topics\n#\n# Array\n#\n# Similar Questions\n#",
      -10.3203125
    ],
    [
      "def list_frequency(list_of_lists):\n    \"\"\"\n    :type list_of_lists: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # TODO: (1) implement your code here.\n\n    # TODO: (2) remove duplicated elements.\n\n    # TODO: (3) write a function to count frequency of each element in list of lists.\n\n    # TODO: (4) write a function to count frequency of each element in list of lists.\n    # TODO: (5) write a function to count frequency of each element in list of lists.\n\n    # TODO: (6) write a function to count frequency of each element in list of lists.\n    # TODO: (7) write a function to count frequency of each element in list of lists.\n\n    # TODO: (8) write a function to count frequency of each element in list of lists.\n    # TODO: (9) write a function to count frequency of each element in list of lists.\n\n    # TODO: (10) write a function to count frequency of each element in list of lists.\n    # TODO: (11) write a function to count frequency of each element in list of lists.\n\n    # TODO: (12) write a function to count frequency of each element in list of lists.\n    # TODO: (13) write a function to count frequency of each element in list of lists.\n\n    # TODO: (14) write a function to count frequency of each element in list of lists.\n    # TODO: (15) write a function to count frequency of each element in list of lists.\n\n    # TODO: (16) write a function to count frequency of each element in list of lists.\n    # TODO: (17) write a function to count frequency of each element in list of lists.\n\n    # TODO: (18) write a function to count frequency of each element in list of lists.\n    # TODO: (19) write a function to count frequency of each element in list of lists.\n\n    # TODO: (20) write a function to count frequency of each element in list of lists.\n    # TODO: (21) write a function to count frequency of each element in list of lists.\n\n    #",
      -10.328125
    ],
    [
      "def list_to_dict(lst):\n    return dict((x, 1) for x in lst)\n\n\ndef frequency_list(lst, dict_to_count=list_to_dict):\n    \"\"\"\n    Find frequency count of list of lists.\n\n    Input:\n        lst: List of lists.\n        dict_to_count: Dictionary to count.\n\n    Output:\n        Frequency count of list of lists.\n    \"\"\"\n    dict_to_count = dict_to_count(lst)\n    return dict_to_count.values()\n\n\ndef frequency_list_2(lst):\n    \"\"\"\n    Find frequency count of list of lists.\n\n    Input:\n        lst: List of lists.\n\n    Output:\n        Frequency count of list of lists.\n    \"\"\"\n    return {x: 1 for x in lst}\n\n\ndef main():\n    lst = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print(frequency_list(lst))\n\n    lst = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print(frequency_list(lst))\n\n\nif __name__ == '__main__':\n    main()",
      -11.9609375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def countLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: int\n        \"\"\"\n        if not lists:\n            return 0\n        length = len(lists)\n        if length == 1:\n            return lists[0].val\n        if length == 2:\n            return lists[0].val + lists[1].val\n\n        max_count = 0\n        max_list = None\n        for i in xrange(length):\n            if not lists[i]:\n                continue\n            temp = lists[i]\n            while temp:\n                max_count += 1\n                temp = temp.next\n            if max_list is None or max_list.val < temp.val:\n                max_list = temp\n\n        return max_count\n\n\nif __name__ == \"__main__\":\n    n1 = [[1,2,3], [4,5,6]]\n    n2 = [[1,2], [1,2,3], [4,5]]\n    n3 = [[1,2], [1,2,3], [4,5,6]]\n    n4 = [[1,2,3]]\n    n5 = [[1,2], [1,2,3], [4,5,6]]\n    n6 = [[1,2,3]]\n    n7 = [[1,2,3]]\n    n8 = [[1,2], [1,2,3], [4,5]]\n    n9 = [[1,2], [1,2,3], [4,5,6]]\n    n10 = [[1,2], [1,2,3], [4,5,6]]\n    n11 = [[1,2], [1,2,3], [4,5,6]]\n    n12 = [[1,2], [1,2,3], [4,5,6]]\n    n13 = [[1,2], [1,2,3], [4,5,6]]",
      -14.0703125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}