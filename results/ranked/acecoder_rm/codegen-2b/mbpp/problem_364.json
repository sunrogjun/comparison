{
  "problem": {
    "task_id": "MBPP/375",
    "prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
    "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
    "test_list": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ],
    "challenge_test_list": [],
    "problem_id": 364
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "class Solution:\n    # @param {number} x\n    # @param {number} k\n    # @return {number}\n    def nearestMultiple(self, x, k):\n        return x - x % k + k\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.nearestMultiple(1, 2))\n    print(s.nearestMultiple(2, 2))\n    print(s.nearestMultiple(3, 2))\n    print(s.nearestMultiple(4, 2))",
      4.3515625
    ],
    [
      "def round_to_nearest(number, multiple):\n    \"\"\"\n    :type number: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return int(number/multiple)*multiple + multiple\n\nprint(round_to_nearest(30, 10))",
      0.810546875
    ],
    [
      "import unittest\n\nclass Solution:\n    # @param {integer} num\n    # @param {integer} target\n    # @return {integer}\n    def nearestMultiple(self, num, target):\n        # Write your code here\n        if num % target == 0:\n            return target\n        return self.nearestMultiple(num/target, target) * target\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/nearest-multiple/solution/\n# Approach #1: Iterative\n# Complexity Analysis\n# Time Complexity: O(log n).\n# Space Complexity: O(n).\n# Approach #2: Recursive\n# Complexity Analysis\n# Time Complexity: O(log n).\n# Space Complexity: O(1).\n# Approach #3: Iterative\n# Complexity Analysis\n# Time Complexity: O(log n).\n# Space Complexity: O(1).\n# Approach #4: Recursive\n# Complexity Analysis\n# Time Complexity: O(log n).\n# Space Complexity: O(1).\n\n# 8ms 100%\nclass Solution {\n    public int nearestMultiple(int num, int target) {\n        if (num % target == 0) {\n            return target;\n        }\n        int ret = target;\n        while (num % target!= 0) {\n            ret = target;\n            target /= 10;\n        }\n        return ret;\n    }\n}\n'''",
      0.26025390625
    ],
    [
      "class Solution(object):\n    def round(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        if num < 0:\n            return -1\n        if num % 10 == 0:\n            return num\n        if num % 10 == 1:\n            return num + 1\n        if num % 10 == 2:\n            return num + 2\n        if num % 10 == 3:\n            return num + 3\n        if num % 10 == 4:\n            return num + 4\n        if num % 10 == 5:\n            return num + 5\n        if num % 10 == 6:\n            return num + 6\n        if num % 10 == 7:\n            return num + 7\n        if num % 10 == 8:\n            return num + 8\n        if num % 10 == 9:\n            return num + 9",
      0.1385498046875
    ],
    [
      "#!/usr/bin/python\n\n# https://www.hackerrank.com/challenges/rounding-to-nearest-multiple\n\nimport math\n\ndef round_to_nearest_multiple(num, multiple):\n    return int(math.floor(num/multiple) * multiple)\n\nif __name__ == '__main__':\n    multiple = int(input())\n    num = int(input())\n    print(round_to_nearest_multiple(num, multiple))",
      -0.61962890625
    ],
    [
      "# https://www.hackerrank.com/challenges/round-to-the-nearest-multiple-of-a-number\n\ndef round_to_nearest_multiple_of_a_number(number, multiple):\n    \"\"\"\n    :type number: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    # Round to nearest multiple\n    rounded = int(number) + (int(number) - int(number) % multiple) % multiple\n    # Round to the nearest multiple\n    return int(rounded)\n\nif __name__ == '__main__':\n    number = int(input())\n    multiple = int(input())\n\n    print(round_to_nearest_multiple_of_a_number(number, multiple))",
      -0.85693359375
    ],
    [
      "#!/usr/bin/python\n\nclass Solution(object):\n    def round(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return int(n / self.n + (n % self.n!= 0)) * self.n\n\ndef main():\n    n = int(raw_input())\n    s = Solution()\n    print s.round(n)\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param {integer} num\n    # @param {integer} target\n    # @return {integer}\n    def nearestMultiple(self, num, target):\n        \"\"\"\n        :type num: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        if num % target == 0:\n            return num // target\n        return (num + target - 1) // target",
      -0.85693359375
    ],
    [
      "def round_to_nearest(number, multiple):\n    \"\"\"\n    :type number: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return ((number + multiple - 1) / multiple) * multiple",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def round(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return int(n/10)*10 + int(n%10)",
      -0.85693359375
    ],
    [
      "def round_nearest_multiple(num, multiple):\n    return num - num % multiple\n\n# Test Cases\n# 1. Test cases where the number is a multiple of the multiple.\n# 2. Test cases where the number is not a multiple of the multiple.\n\nprint(round_nearest_multiple(3, 2))\n\nprint(round_nearest_multiple(2, 4))\n\nprint(round_nearest_multiple(4, 2))\n\nprint(round_nearest_multiple(5, 2))",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @param {integer} k\n    # @return {integer}\n    def nearestMultiple(self, x, k):\n        res = x\n        while x % k!= 0:\n            x += 1\n        res = x\n        while x % k!= 0:\n            res = x\n            x -= 1\n        return res\n\n    def nearestMultiple2(self, x, k):\n        return x - (x % k) + k",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < k:\n            return 0\n        n -= 1\n        k += 1\n        return n // k * k + (n % k)",
      -0.85693359375
    ],
    [
      "# https://leetcode.com/problems/round-number/\n\nclass Solution(object):\n    def round(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        return int(n/5)*5 + 5*int(n%5)\n\n\ndef main():\n    solution = Solution()\n    print solution.round(10)\n    print solution.round(11)\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def nearest_multiple(number, multiple):\n    return (number - (number % multiple)) + multiple\n\nif __name__ == \"__main__\":\n    print(nearest_multiple(4, 2))\n    print(nearest_multiple(1, 2))\n    print(nearest_multiple(5, 2))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def round(self, value, multiple):\n        \"\"\"\n        :type value: int\n        :type multiple: int\n        :rtype: int\n        \"\"\"\n        return int((value+multiple-1)/multiple)*multiple",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/python-round/problem\n\nimport math\n\n\ndef round(number, multiple):\n    # round to the nearest multiple\n    return int(math.ceil(number / multiple) * multiple)\n\n\nif __name__ == \"__main__\":\n    multiple = int(input())\n    number = int(input())\n\n    print(round(number, multiple))",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/round-it-up\n\n\ndef round_it_up(num, multiple):\n    return int(num/multiple)*multiple\n\n\nif __name__ == \"__main__\":\n    multiple = int(input())\n    num = int(input())\n\n    print(round_it_up(num, multiple))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        return (n * m) / (m + 1)",
      -0.85791015625
    ],
    [
      "def round_to_nearest_multiple(number, multiple):\n    \"\"\"\n    :type number: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return int(number - (number % multiple)) + multiple\n\nif __name__ == '__main__':\n    print(round_to_nearest_multiple(12, 10))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, n, target):\n        \"\"\"\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        n, target = abs(n), abs(target)\n        if n == 0:\n            return target\n        if n % target == 0:\n            return target\n        m = n\n        while m % target!= 0:\n            m += target\n        return m",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        return n/m*m",
      -0.85791015625
    ],
    [
      "# https://leetcode.com/problems/round-number-to-nearest-multiple/\n\nclass Solution(object):\n    def round(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # https://leetcode.com/discuss/1836/simplest-java-solution-with-explanation\n        return n // 5 * 5 + n % 5\n\nif __name__ == '__main__':\n    print(Solution().round(10))\n    print(Solution().round(25))",
      -0.85791015625
    ],
    [
      "# Example:\n# roundToNearestMultipleOf(5, 2) -> 10\n# roundToNearestMultipleOf(10, 2) -> 10\n# roundToNearestMultipleOf(15, 2) -> 20\n# roundToNearestMultipleOf(25, 2) -> 50\n# roundToNearestMultipleOf(35, 2) -> 50\n# roundToNearestMultipleOf(45, 2) -> 50\n# roundToNearestMultipleOf(55, 2) -> 60\n\n# Approach #1: Brute force\nclass Solution(object):\n    def roundToNearestMultipleOf(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        # Brute force\n        return ((n + m - 1) // m) * m\n\n# Approach #2: Divide and Conquer\nclass Solution(object):\n    def roundToNearestMultipleOf(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        # Divide and Conquer\n        if m == 0:\n            return n\n        else:\n            return (n + m - 1) // m",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer} num\n    # @param {integer} target\n    # @return {integer}\n    def nearest(self, num, target):\n        if target == 0:\n            return 0\n\n        if target < 0:\n            return -1\n\n        if target % num == 0:\n            return target / num\n\n        if target % num == 0:\n            return target / num - 1",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/round-number-to-nearest-multiple/discuss/352593/Python-with-explanation-O(1)-time-and-O(n)-space-with-short-explanation\n# O(1) time, O(n) space\n\nclass Solution(object):\n    def round(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return (num + 1) // 2 * 2\n\nif __name__ == '__main__':\n    print(Solution().round(5))\n    print(Solution().round(10))\n    print(Solution().round(100))",
      -0.8583984375
    ],
    [
      "def round_nearest(num, multiple):\n    \"\"\"\n    :type num: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return int(num/multiple)*multiple",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {number} x\n    # @param {number} k\n    # @return {number}\n    def nearestMultiple(self, x, k):\n        m = x % k\n        if m == 0:\n            return x\n        else:\n            return x + k - m\n\nif __name__ == \"__main__\":\n    assert Solution().nearestMultiple(1, 2) == 2\n    assert Solution().nearestMultiple(3, 3) == 3\n    assert Solution().nearestMultiple(1, 1) == 1\n    assert Solution().nearestMultiple(2, 2) == 2\n    assert Solution().nearestMultiple(5, 2) == 5\n    assert Solution().nearestMultiple(6, 2) == 6\n    assert Solution().nearestMultiple(5, 5) == 5\n    assert Solution().nearestMultiple(5, 7) == 10\n    assert Solution().nearestMultiple(10, 7) == 10\n    assert Solution().nearestMultiple(10, 10) == 10",
      -0.8583984375
    ],
    [
      "class Solution:\n    def nearestMultiple(self, n: int, target: int) -> int:\n        \"\"\"\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        d = target/n\n        return int(n*(1+d))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.nearestMultiple(100, 10))\n    print(s.nearestMultiple(100, 100))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def round(self, value, to):\n        \"\"\"\n        :type value: int\n        :type to: int\n        :rtype: int\n        \"\"\"\n        if value == 0:\n            return 0\n        if value >= 0:\n            if value % to == 0:\n                return value\n            if value % to!= 0:\n                return value + to - (value % to)\n            return value + to\n        if value % to!= 0:\n            return value - to + (value % to)\n        return value - to",
      -0.8583984375
    ],
    [
      "#!/usr/bin/python\n\ndef round(number, multiple):\n    if multiple == 0:\n        return number\n    \n    if number >= 0:\n        return int(number/multiple) * multiple\n    else:\n        return int(number/multiple) * multiple + multiple\n\nprint round(-2.3, 0.1)\nprint round(2.3, 0.1)\nprint round(2.3, 0.1)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @param {integer} k\n    # @return {integer}\n    def nearest(self, x, k):\n        return x/k*k",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\ndef round_nearest(number, multiple):\n    \"\"\"\n    :type number: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return int(number/multiple) * multiple\n\nif __name__ == \"__main__\":\n    print round_nearest(100, 10)\n    print round_nearest(100, 5)\n    print round_nearest(100, 2)\n    print round_nearest(100, 1)\n    print round_nearest(100, 0)\n    print round_nearest(100, -1)\n    print round_nearest(100, -2)\n    print round_nearest(100, -5)\n    print round_nearest(100, -10)\n    print round_nearest(100, -100)\n    print round_nearest(100, -1000)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        return (n+m-1)/m*m",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/round-to-nearest-multiple-of-n/problem\n\nimport math\n\ndef roundToNearestMultipleOf(number, multiple):\n    return (number - math.floor(number / multiple) * multiple)\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        number, multiple = map(int, input().split())\n        print(roundToNearestMultipleOf(number, multiple))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        n = n % m\n        if n == 0:\n            return m\n        return n * m",
      -0.8583984375
    ],
    [
      "# https://oj.leetcode.com/problems/round-number-to-nearest-multiple/\n\n# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {integer} num\n    # @param {integer} target\n    # @return {integer}\n    def roundNearestMultiple(self, num, target):\n        res = num\n        while num > target:\n            res -= target\n            num -= target\n        res += target\n        return res\n\nif __name__ == '__main__':\n    print Solution().roundNearestMultiple(1, 2)",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/round-number-to-nearest-multiple/discuss/146953/Python-with-explanation\n# https://leetcode.com/problems/round-number-to-nearest-multiple/discuss/146957/Python-with-explanation\n\nclass Solution(object):\n    def nearestMultiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        return (n + m - 1) // m * m\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = int(input())\n# param_2 = int(input())\n# obj.nearestMultiple(param_1, param_2)",
      -0.85888671875
    ],
    [
      "def nearest_multiple(number, multiple):\n\tif number % multiple == 0:\n\t\treturn number\n\treturn int(number / multiple) * multiple\n\nprint nearest_multiple(3, 4)",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def __init__(self):\n        self.cache = {}\n    \n    def round(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num in self.cache:\n            return self.cache[num]\n        \n        if num == 0:\n            return 0\n        \n        if num % 2 == 0:\n            num = int(num / 2)\n            if num % 5 == 0:\n                num = int(num / 5)\n                if num % 10 == 0:\n                    num = int(num / 10)\n            \n        if num % 10 == 0:\n            num = int(num / 10)\n            if num % 5 == 0:\n                num = int(num / 5)\n            if num % 2 == 0:\n                num = int(num / 2)\n        \n        self.cache[num] = num\n        return num",
      -0.85888671875
    ],
    [
      "import unittest\nfrom decimal import Decimal\n\nclass Solution(object):\n    def nearestMultiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        return int(Decimal(n) / Decimal(m) * m)\n\n\nclass UnitTest(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(1, Solution().nearestMultiple(10, 2))\n        self.assertEqual(3, Solution().nearestMultiple(10, 3))\n        self.assertEqual(10, Solution().nearestMultiple(10, 1))\n        self.assertEqual(10, Solution().nearestMultiple(10, 0))\n        self.assertEqual(10, Solution().nearestMultiple(10, 5))\n        self.assertEqual(25, Solution().nearestMultiple(25, 5))\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def my_round(self, value, multiple):\n        \"\"\"\n        :type value: int\n        :type multiple: int\n        :rtype: int\n        \"\"\"\n        if value % multiple == 0:\n            return value\n        else:\n            return (value + multiple - 1) // multiple * multiple",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/round-to-nearest-multiple-of-n/problem\n\ndef round_to_nearest_multiple_of_n(n, x):\n    # TODO: Write code here\n    return 0",
      -0.85888671875
    ],
    [
      "# https://leetcode.com/problems/round-number-to-nearest-multiple-of-n/discuss/265800/Python-solution-using-recursion-with-explanation-and-other-solutions\n\nclass Solution:\n    def nearestMultiple(self, n, target: int) -> int:\n        def dfs(target):\n            if target % 2 == 0:\n                return dfs(target/2)\n            else:\n                return dfs(target - 1)\n\n        return dfs(target)\n\nif __name__ == \"__main__\":\n    assert Solution().nearestMultiple(3, 6) == 2\n    assert Solution().nearestMultiple(3, 7) == 5\n    assert Solution().nearestMultiple(3, 8) == 4\n    assert Solution().nearestMultiple(3, 12) == 6\n    assert Solution().nearestMultiple(3, 15) == 8",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/round-a-number\n\ndef round_a_number(n):\n    if n >= 0:\n        return int(n)\n    else:\n        return int(n) * -1\n\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    print(round_a_number(n))",
      -0.85888671875
    ],
    [
      "# https://leetcode.com/problems/round-number/\nclass Solution(object):\n    def round(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num < 0:\n            return -1\n        if num == 0:\n            return 0\n        if num > 0:\n            if num % 2 == 0:\n                return num // 2\n            else:\n                return (num + 1) // 2\n        if num == -1:\n            return -1\n        return num // 2",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @param {integer} k\n    # @return {integer}\n    def nearest_multiple(self, x, k):\n        if x < 0:\n            return 0\n        if x % k == 0:\n            return x\n        return x - x % k + k",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, n, target):\n        \"\"\"\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if n < target:\n            return target\n        else:\n            return n - (n % target)",
      -0.85888671875
    ],
    [
      "#!/usr/bin/python\n\n# This is a solution to the problem:\n# https://www.hackerrank.com/challenges/round-number\n\n#!/usr/bin/python\n\n# Complete the roundNumber function below.\ndef roundNumber(n, k):\n    if n < 0:\n        return roundNumber(-n, k)\n    if n == 0:\n        return 0\n    if n % k == 0:\n        return n\n    return roundNumber(n, k) + k\n\n# Driver program to test above function\nprint roundNumber(1, 1)\nprint roundNumber(1, 2)\nprint roundNumber(1, 3)\nprint roundNumber(1, 4)\nprint roundNumber(1, 5)\nprint roundNumber(1, 6)\nprint roundNumber(1, 7)\nprint roundNumber(1, 8)\nprint roundNumber(1, 9)\nprint roundNumber(1, 10)",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def round(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return n/self.base + (n%self.base>0 and 1 or 0)",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def round(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n\n        multiple = 10\n        while n % multiple == 0:\n            multiple *= 10\n\n        if multiple > 1:\n            return n // multiple\n\n        return n",
      -0.85888671875
    ],
    [
      "# https://leetcode.com/problems/round-it-up/\n\nclass Solution(object):\n    def roundItUp(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return int(n / 5) * 5 + (5 if n % 5 == 0 else 0)\n\n\nif __name__ == '__main__':\n    assert Solution().roundItUp(123) == 120",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def round(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return -1\n        n = int(n)\n        # print n\n        if n < 0:\n            return -1\n        # print n\n        if n == 0:\n            return 0\n        # print n\n        if n % 2 == 0:\n            return n\n        # print n\n        if n % 3 == 0:\n            return n\n        # print n\n        if n % 5 == 0:\n            return n\n        # print n\n        if n % 7 == 0:\n            return n\n        # print n\n        if n % 11 == 0:\n            return n\n        # print n\n        if n % 13 == 0:\n            return n\n        # print n\n        if n % 17 == 0:\n            return n\n        # print n\n        if n % 19 == 0:\n            return n\n        # print n\n        if n % 23 == 0:\n            return n\n        # print n\n        if n % 29 == 0:\n            return n\n        # print n\n        if n % 31 == 0:\n            return n\n        # print n\n        if n % 37 == 0:\n            return n\n        # print n\n        if n % 41 == 0:\n            return n\n        # print n\n        if n % 43 == 0:\n            return n\n        # print n\n        if n % 47 == 0:\n            return n\n        # print n\n        if n % 53 == 0:\n            return n\n        # print n\n        if n % 59 == 0:\n            return n\n        # print n\n        if n % 61 == 0:\n            return n\n        # print n\n        if n % 67 == 0:\n            return n\n        # print n\n        if n % 71 == 0:\n            return n\n        # print n\n        if n % 73 == 0:\n            return n\n        # print n\n        if n % 79 == 0:\n            return n\n        # print n\n        if n % 83 == 0:\n            return n\n        # print n\n        if n %",
      -1.0263671875
    ],
    [
      "# https://www.hackerrank.com/challenges/round-it-up\n# https://www.hackerearth.com/practice/datastructures/strings/algorithms/rounding/problems/round-it-up/practice-problems/round-it-up-solution/\n\ndef round_it_up(num, multiple):\n    return int(num) - (num % multiple) + multiple\n\nif __name__ == '__main__':\n    num, multiple = input().split(' ')\n    num = int(num)\n    multiple = int(multiple)\n    print(round_it_up(num, multiple))",
      -1.3359375
    ],
    [
      "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        result = 1\n        while n > 0:\n            result *= x\n            n -= 1\n        return result\n\nif __name__ == '__main__':\n    assert Solution().myPow(2, 0) == 1\n    assert Solution().myPow(2, 1) == 2\n    assert Solution().myPow(2, 2) == 4\n    assert Solution().myPow(2, 3) == 8\n    assert Solution().myPow(2, 4) == 16\n    assert Solution().myPow(2, 5) == 32\n    assert Solution().myPow(2, 6) == 64\n    assert Solution().myPow(2, 7) == 128\n    assert Solution().myPow(2, 8) == 256\n    assert Solution().myPow(2, 9) == 512\n    assert Solution().myPow(2, 10) == 1024\n    assert Solution().myPow(2, 11) == 2048\n    assert Solution().myPow(2, 12) == 4096\n    assert Solution().myPow(2, 13) == 8192\n    assert Solution().myPow(2, 14) == 16384\n    assert Solution().myPow(2, 15) == 32768\n    assert Solution().myPow(2, 16) == 65536\n    assert Solution().myPow(2, 17) == 131072\n    assert Solution().myPow(2, 18) == 262144\n    assert Solution().myPow(2, 19) == 524288\n    assert Solution().myPow(2, 20) == 1048576\n    assert Solution().myPow(2, 21) == 2097152\n    assert Solution().myPow(2, 22) == 4194304\n    assert Solution().myPow(2, 23) == 8388608\n    assert Solution().myPow(2, 24) == 16777216\n    assert Solution().myPow(2, 25) == 33554432\n    assert Solution().myPow(2, 26) ==",
      -1.5322265625
    ],
    [
      "# https://leetcode.com/problems/round-it-to-the-nearest-multiple-of-ten/\n\nclass Solution:\n    def roundToNearestMultiple(self, n: int, d: int) -> int:\n        return n + (n - (n % d)) // d * d\n\nclass Solution2:\n    def roundToNearestMultiple(self, n: int, d: int) -> int:\n        return n + (n - (n % d)) // d * d\n\n\ndef main():\n    n = 3\n    d = 10\n    s = Solution()\n    print(s.roundToNearestMultiple(n, d))\n\n    n = 3\n    d = 10\n    s = Solution2()\n    print(s.roundToNearestMultiple(n, d))\n    \n    n = 3\n    d = 0\n    s = Solution()\n    print(s.roundToNearestMultiple(n, d))\n\n    n = 3\n    d = 0\n    s = Solution2()\n    print(s.roundToNearestMultiple(n, d))\n\nif __name__ == '__main__':\n    main()",
      -1.658203125
    ],
    [
      "class Solution(object):\n    def round(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return int(num / self.nearestMultiple) * self.nearestMultiple\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.round(12.123))\n    print(sol.round(12.44))\n    print(sol.round(12.6))\n    print(sol.round(12.7))\n    print(sol.round(12.8))\n    print(sol.round(12.9))\n    print(sol.round(13))\n    print(sol.round(13.1))\n    print(sol.round(13.3))\n    print(sol.round(13.5))\n    print(sol.round(13.7))\n    print(sol.round(14))",
      -1.673828125
    ],
    [
      "# Your function will be called as follows:\n# round_num(number, multiple)\n#\n# number: A number to be rounded\n# multiple: A specific number to round the number to\n#\n# Return the rounded number\n\n# Test Cases\n# input:\n#\n# number: 1.8\n# multiple: 2\n#\n# return: 2\n#\n# input:\n#\n# number: 1.8\n# multiple: 3\n#\n# return: 2\n#\n# input:\n#\n# number: 1.8\n# multiple: 1\n#\n# return: 1\n#\n# input:\n#\n# number: 1.8\n# multiple: 0\n#\n# return: 1\n#\n# input:\n#\n# number: 1.8\n# multiple: -1\n#\n# return: 1\n#\n# input:\n#\n# number: 1.8\n# multiple: -2\n#\n# return: 2\n#\n# input:\n#\n# number: 1.8\n# multiple: -2\n#\n# return: 1\n#\n# input:\n#\n# number: 1.8\n# multiple: -3\n#\n# return: 3\n#\n# input:\n#\n# number: 1.8\n# multiple: -3\n#\n# return: 3\n#\n# input:\n#\n# number: 1.8\n# multiple: -4\n#\n# return: 4\n#\n# input:\n#\n# number: 1.8\n# multiple: -4\n#\n# return: 4\n#\n# input:\n#\n# number: 1.8\n# multiple: -5\n#\n# return: 5\n#\n# input:\n#\n# number: 1.8\n# multiple: -5\n#\n# return: 5\n#\n# input:\n#\n# number: 1.8\n# multiple: -6\n#\n# return: 6\n#\n# input:\n#\n# number: 1.8\n# multiple: -6\n#\n# return: 6\n#\n# input:\n#\n# number: 1.8\n# multiple: -7\n#\n# return: 7\n#\n# input:\n#\n# number: 1.",
      -2.021484375
    ],
    [
      "class Solution:\n    def nearestMultiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        return n/m*m\n\nif __name__ == '__main__':\n    assert Solution().nearestMultiple(10, 2) == 10\n    assert Solution().nearestMultiple(10, 3) == 20\n    assert Solution().nearestMultiple(10, 5) == 10\n    assert Solution().nearestMultiple(10, 7) == 10\n    assert Solution().nearestMultiple(10, 9) == 10\n    assert Solution().nearestMultiple(10, 15) == 10\n    assert Solution().nearestMultiple(10, 17) == 10\n    assert Solution().nearestMultiple(10, 19) == 10\n    assert Solution().nearestMultiple(10, 23) == 10",
      -2.33203125
    ],
    [
      "# http://www.geeksforgeeks.org/round-a-given-number-to-the-nearest-multiple-of-a-specific-number/\n\ndef round_to_nearest_multiple_of_multiple(n, multiple):\n    # multiple is the amount to be rounded to\n    # n is the number to be rounded\n\n    # get the remainder\n    remainder = n % multiple\n\n    # if the remainder is 0, then we are done\n    if remainder == 0:\n        return n\n\n    # if the remainder is not 0, then we need to round up\n    else:\n        return int(n/multiple)*multiple + multiple\n\nif __name__ == '__main__':\n    print round_to_nearest_multiple_of_multiple(1, 10)\n    print round_to_nearest_multiple_of_multiple(10, 10)\n    print round_to_nearest_multiple_of_multiple(10, 2)\n    print round_to_nearest_multiple_of_multiple(10, 5)\n    print round_to_nearest_multiple_of_multiple(10, 3)\n    print round_to_nearest_multiple_of_multiple(10, 7)\n    print round_to_nearest_multiple_of_multiple(10, 4)\n    print round_to_nearest_multiple_of_multiple(10, 6)\n    print round_to_nearest_multiple_of_multiple(10, 8)\n    print round_to_nearest_multiple_of_multiple(10, 9)\n    print round_to_nearest_multiple_of_multiple(10, 11)\n    print round_to_nearest_multiple_of_multiple(10, 12)\n    print round_to_nearest_multiple_of_multiple(10, 13)\n    print round_to_nearest_multiple_of_multiple(10, 14)\n    print round_to_nearest_multiple_of_multiple(10, 15)\n    print round_to_nearest_multiple_of_multiple(10, 16)\n    print round_to_nearest_multiple_of_multiple(10, 17)\n    print round_to_nearest_",
      -2.51171875
    ],
    [
      "def round_nearest(n, multiple):\n    return (n + multiple - 1) / multiple * multiple\n\nif __name__ == '__main__':\n    print round_nearest(2.5, 1)\n    print round_nearest(2.5, 2)\n    print round_nearest(2.5, 3)\n    print round_nearest(2.5, 4)\n    print round_nearest(2.5, 5)\n    print round_nearest(2.5, 6)\n    print round_nearest(2.5, 7)\n    print round_nearest(2.5, 8)\n    print round_nearest(2.5, 9)\n    print round_nearest(2.5, 10)\n    print round_nearest(2.5, 11)\n    print round_nearest(2.5, 12)\n    print round_nearest(2.5, 13)\n    print round_nearest(2.5, 14)\n    print round_nearest(2.5, 15)\n    print round_nearest(2.5, 16)\n    print round_nearest(2.5, 17)\n    print round_nearest(2.5, 18)\n    print round_nearest(2.5, 19)\n    print round_nearest(2.5, 20)\n    print round_nearest(2.5, 21)\n    print round_nearest(2.5, 22)\n    print round_nearest(2.5, 23)\n    print round_nearest(2.5, 24)\n    print round_nearest(2.5, 25)\n    print round_nearest(2.5, 26)\n    print round_nearest(2.5, 27)\n    print round_nearest(2.5, 28)\n    print round_nearest(2.5, 29)\n    print round_nearest(2.5, 30)\n    print round_nearest(2.5, 31)\n    print round_nearest(2.5, 32)\n    print round_nearest(2.5, 33)\n    print round_nearest(2.5, 34",
      -2.59375
    ],
    [
      "class Solution:\n    # @param {integer} k\n    # @param {integer} n\n    # @return {integer}\n    def nearest(self, k, n):\n        if n % k == 0:\n            return n\n        else:\n            return self.nearest(k, n / k) * k\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.nearest(5, 2))\n    print(s.nearest(5, 4))\n    print(s.nearest(5, 6))\n    print(s.nearest(5, 9))\n    print(s.nearest(5, 10))\n    print(s.nearest(5, 15))\n    print(s.nearest(5, 20))\n    print(s.nearest(5, 21))\n    print(s.nearest(5, 23))\n    print(s.nearest(5, 24))\n    print(s.nearest(5, 25))\n    print(s.nearest(5, 30))\n    print(s.nearest(5, 35))\n    print(s.nearest(5, 40))\n    print(s.nearest(5, 45))\n    print(s.nearest(5, 50))\n    print(s.nearest(5, 55))\n    print(s.nearest(5, 60))\n    print(s.nearest(5, 65))\n    print(s.nearest(5, 70))\n    print(s.nearest(5, 75))\n    print(s.nearest(5, 80))\n    print(s.nearest(5, 85))\n    print(s.nearest(5, 90))\n    print(s.nearest(5, 95))\n    print(s.nearest(5, 100))\n    print(s.nearest(5, 105))\n    print(s.nearest(5, 110))\n    print(s.nearest(5, 115))\n    print(s.nearest(5, 120))\n    print(s.nearest(5, 125))\n    print(s.nearest(5, 130))\n    print(s",
      -3.095703125
    ],
    [
      "import sys\n\ndef round(num, multiple):\n    '''\n    :type num: int\n    :type multiple: int\n    :rtype: int\n    '''\n    return (num/multiple + 1) * multiple\n\nif __name__ == '__main__':\n    if len(sys.argv) == 2:\n        multiple = int(sys.argv[1])\n        print(round(2, multiple))\n        print(round(3, multiple))\n        print(round(4, multiple))\n        print(round(5, multiple))\n        print(round(6, multiple))\n        print(round(7, multiple))\n        print(round(8, multiple))\n        print(round(9, multiple))\n        print(round(10, multiple))\n        print(round(11, multiple))\n        print(round(12, multiple))\n        print(round(13, multiple))\n        print(round(14, multiple))\n        print(round(15, multiple))\n        print(round(16, multiple))\n        print(round(17, multiple))\n        print(round(18, multiple))\n        print(round(19, multiple))\n        print(round(20, multiple))\n        print(round(21, multiple))\n        print(round(22, multiple))\n        print(round(23, multiple))\n        print(round(24, multiple))\n        print(round(25, multiple))\n        print(round(26, multiple))\n        print(round(27, multiple))\n        print(round(28, multiple))\n        print(round(29, multiple))\n        print(round(30, multiple))\n        print(round(31, multiple))\n        print(round(32, multiple))\n        print(round(33, multiple))\n        print(round(34, multiple))\n        print(round(35, multiple))\n        print(round(36, multiple))\n        print(round(37, multiple))\n        print(round(38, multiple))\n        print(round(39, multiple))\n        print(round(40, multiple))\n        print(round(41, multiple))\n        print(round(42, multiple))\n        print(round(43, multiple))",
      -3.205078125
    ],
    [
      "# https://oj.leetcode.com/problems/round-number/\n# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def round(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return int(round(num / 100) * 100)",
      -3.333984375
    ],
    [
      "def round_nearest(num, multiple):\n    return int(num / multiple) * multiple\n\n# Test Cases\nprint(\"Test Case 1:\", round_nearest(1, 10))\nprint(\"Test Case 2:\", round_nearest(11, 10))\nprint(\"Test Case 3:\", round_nearest(100, 10))\nprint(\"Test Case 4:\", round_nearest(10, 10))\nprint(\"Test Case 5:\", round_nearest(11.5, 10))\nprint(\"Test Case 6:\", round_nearest(100.5, 10))\nprint(\"Test Case 7:\", round_nearest(10.5, 10))\nprint(\"Test Case 8:\", round_nearest(10.5, 2))\nprint(\"Test Case 9:\", round_nearest(100.5, 2))\nprint(\"Test Case 10:\", round_nearest(10.5, 0))\nprint(\"Test Case 11:\", round_nearest(100.5, 0))\nprint(\"Test Case 12:\", round_nearest(10.5, -2))\nprint(\"Test Case 13:\", round_nearest(100.5, -2))\nprint(\"Test Case 14:\", round_nearest(10.5, -0))\nprint(\"Test Case 15:\", round_nearest(100.5, -0))\nprint(\"Test Case 16:\", round_nearest(10.5, 1))\nprint(\"Test Case 17:\", round_nearest(100.5, 1))\nprint(\"Test Case 18:\", round_nearest(10.5, 2))\nprint(\"Test Case 19:\", round_nearest(100.5, 2))\nprint(\"Test Case 20:\", round_nearest(10.5, 3))\nprint(\"Test Case 21:\", round_nearest(100.5, 3))\nprint(\"Test Case 22:\", round_nearest(10.5, 4))\nprint(\"Test Case 23:\", round_nearest(100.5, 4))\nprint(\"Test Case 24:\", round_nearest(10.5, 5))\nprint(\"Test Case 25:\", round_nearest(100.5, 5))\nprint(\"Test Case 26:\", round_nearest(10",
      -3.42578125
    ],
    [
      "def nearest_multiple(number, multiple):\n    return int(number/multiple)*multiple\n\ndef test():\n    assert nearest_multiple(1, 2) == 1\n    assert nearest_multiple(1, 3) == 1\n    assert nearest_multiple(3, 2) == 2\n    assert nearest_multiple(4, 2) == 2\n    assert nearest_multiple(5, 2) == 2\n    assert nearest_multiple(6, 2) == 2\n    assert nearest_multiple(7, 2) == 2\n    assert nearest_multiple(8, 2) == 4\n    assert nearest_multiple(9, 2) == 4\n    assert nearest_multiple(10, 2) == 4\n    assert nearest_multiple(11, 2) == 4\n    assert nearest_multiple(12, 2) == 4\n    assert nearest_multiple(13, 2) == 4\n    assert nearest_multiple(14, 2) == 4\n    assert nearest_multiple(15, 2) == 4\n    assert nearest_multiple(16, 2) == 4\n    assert nearest_multiple(17, 2) == 4\n    assert nearest_multiple(18, 2) == 8\n    assert nearest_multiple(19, 2) == 8\n    assert nearest_multiple(20, 2) == 8\n    assert nearest_multiple(21, 2) == 8\n    assert nearest_multiple(22, 2) == 8\n    assert nearest_multiple(23, 2) == 8\n    assert nearest_multiple(24, 2) == 8\n    assert nearest_multiple(25, 2) == 8\n    assert nearest_multiple(26, 2) == 8\n    assert nearest_multiple(27, 2) == 8\n    assert nearest_multiple(28, 2) == 8\n    assert nearest_multiple(29, 2) == 8\n    assert nearest_multiple(30, 2) == 8\n    assert nearest_multiple(31, 2) == 8\n    assert nearest_multiple(32, 2) == 8\n    assert nearest_multiple(33, 2) == 8\n    assert nearest_multiple(34, 2) == 8\n    assert nearest_multiple(35, 2) == 8\n    assert nearest_multiple(36, 2) == 16\n    assert nearest_multiple(37, 2) == 16\n    assert nearest_multiple",
      -3.515625
    ],
    [
      "class Solution:\n    def round(self, n: int, multiple: int) -> int:\n        return n - (n % multiple) + multiple\n\n\nif __name__ == \"__main__\":\n    assert Solution().round(10, 2) == 10\n    assert Solution().round(10, 3) == 10\n    assert Solution().round(10, 4) == 10\n    assert Solution().round(10, 5) == 10\n    assert Solution().round(10, 6) == 10\n    assert Solution().round(10, 7) == 10\n    assert Solution().round(10, 8) == 10\n    assert Solution().round(10, 9) == 10\n    assert Solution().round(10, 10) == 10\n    assert Solution().round(10, 11) == 10\n    assert Solution().round(10, 12) == 10\n    assert Solution().round(10, 13) == 10\n    assert Solution().round(10, 14) == 10\n    assert Solution().round(10, 15) == 10\n    assert Solution().round(10, 16) == 10\n    assert Solution().round(10, 17) == 10\n    assert Solution().round(10, 18) == 10\n    assert Solution().round(10, 19) == 10\n    assert Solution().round(10, 20) == 10\n    assert Solution().round(10, 21) == 10\n    assert Solution().round(10, 22) == 10\n    assert Solution().round(10, 23) == 10\n    assert Solution().round(10, 24) == 10\n    assert Solution().round(10, 25) == 10\n    assert Solution().round(10, 26) == 10\n    assert Solution().round(10, 27) == 10\n    assert Solution().round(10, 28) == 10\n    assert Solution().round(10, 29) == 10\n    assert Solution().round(10, 30) == 10\n    assert Solution().round(10, 31) == 10\n    assert Solution().round(10, 32) == 10\n    assert Solution().round(10, 33) == 10\n    assert Solution().round(10, 34) == 10\n    assert Solution().round(10, 35) == 10\n    assert Solution().round(10, 36) == 10\n    assert Solution().round(10, 37)",
      -3.892578125
    ],
    [
      "def round_nearest(num, multiple):\n    \"\"\"\n    :type num: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return (num / multiple) * multiple\n\nprint round_nearest(2, 1)\nprint round_nearest(2, 2)\nprint round_nearest(2, 3)\nprint round_nearest(2, 4)\nprint round_nearest(2, 5)\nprint round_nearest(2, 6)\nprint round_nearest(2, 7)\nprint round_nearest(2, 8)\nprint round_nearest(2, 9)\nprint round_nearest(2, 10)\nprint round_nearest(2, 11)\nprint round_nearest(2, 12)\nprint round_nearest(2, 13)\nprint round_nearest(2, 14)\nprint round_nearest(2, 15)\nprint round_nearest(2, 16)\nprint round_nearest(2, 17)\nprint round_nearest(2, 18)\nprint round_nearest(2, 19)\nprint round_nearest(2, 20)\nprint round_nearest(2, 21)\nprint round_nearest(2, 22)\nprint round_nearest(2, 23)\nprint round_nearest(2, 24)\nprint round_nearest(2, 25)\nprint round_nearest(2, 26)\nprint round_nearest(2, 27)\nprint round_nearest(2, 28)\nprint round_nearest(2, 29)\nprint round_nearest(2, 30)\nprint round_nearest(2, 31)\nprint round_nearest(2, 32)\nprint round_nearest(2, 33)\nprint round_nearest(2, 34)\nprint round_nearest(2, 35)\nprint round_nearest(2, 36)\nprint round_nearest(2, 37)\nprint round_nearest(2, 38)\nprint round_nearest(2, 39)\nprint round_nearest(2, 40)\nprint round_nearest(2, 41)\nprint round_nearest(2, 42)",
      -3.94921875
    ],
    [
      "class Solution:\n    # @param {integer} k\n    # @param {integer} x\n    # @return {integer}\n    def roundToNearest(self, k, x):\n        return (x + k - 1) / k * k\n\nif __name__ == '__main__':\n    assert Solution().roundToNearest(4, 1) == 1\n    assert Solution().roundToNearest(4, 2) == 2\n    assert Solution().roundToNearest(4, 3) == 4\n    assert Solution().roundToNearest(4, 4) == 4\n    assert Solution().roundToNearest(4, 5) == 4\n    assert Solution().roundToNearest(4, 6) == 4\n    assert Solution().roundToNearest(4, 7) == 4\n    assert Solution().roundToNearest(4, 8) == 8\n    assert Solution().roundToNearest(4, 9) == 8\n    assert Solution().roundToNearest(4, 10) == 8\n    assert Solution().roundToNearest(4, 11) == 8\n    assert Solution().roundToNearest(4, 12) == 12\n    assert Solution().roundToNearest(4, 13) == 12\n    assert Solution().roundToNearest(4, 14) == 12\n    assert Solution().roundToNearest(4, 15) == 12\n    assert Solution().roundToNearest(4, 16) == 16\n    assert Solution().roundToNearest(4, 17) == 16\n    assert Solution().roundToNearest(4, 18) == 16\n    assert Solution().roundToNearest(4, 19) == 16\n    assert Solution().roundToNearest(4, 20) == 20\n    assert Solution().roundToNearest(4, 21) == 20\n    assert Solution().roundToNearest(4, 22) == 20\n    assert Solution().roundToNearest(4, 23) == 20\n    assert Solution().roundToNearest(4, 24) == 24\n    assert Solution().roundToNearest(4, 25) == 24\n    assert Solution().roundToNearest(4, 26) == 24\n    assert Solution().roundToNearest(4, 27) == 24\n    assert Solution().roundToNearest(",
      -3.98828125
    ],
    [
      "# https://www.hackerrank.com/challenges/round-it/problem\n\n# https://www.hackerrank.com/challenges/round-it/submissions/code/9347900\n\n# round(number)\ndef round(number):\n    if number < 0:\n        return -1\n    if number >= 0 and number % 1 == 0:\n        return int(number)\n    return int(number) + 1\n\n# round(number, multiple)\ndef round_multiple(number, multiple):\n    if number < 0:\n        return -1\n    if number >= 0 and number % multiple == 0:\n        return int(number)\n    return int(number) + multiple\n\nif __name__ == \"__main__\":\n    number = int(input())\n    multiple = int(input())\n\n    result = round_multiple(number, multiple)\n\n    print(result)",
      -4.0546875
    ],
    [
      "class Solution(object):\n    def round(self, value, toNearest):\n        \"\"\"\n        :type value: int\n        :type toNearest: int\n        :rtype: int\n        \"\"\"\n        return value + (value - toNearest) % toNearest\n\n\nif __name__ == '__main__':\n    assert Solution().round(1, 2) == 1\n    assert Solution().round(5, 3) == 5\n    assert Solution().round(5, 4) == 5\n    assert Solution().round(5, 5) == 5\n    assert Solution().round(5, 1) == 5",
      -4.34765625
    ],
    [
      "# https://www.hackerrank.com/challenges/python-rounding\n# input: 3.4\n# output: 4\ndef round_to_nearest(x, n):\n    return (int(x) + n / 2) / n * n\n\nif __name__ == '__main__':\n    t = int(input())\n    for a0 in range(t):\n        n = int(input())\n        print(round_to_nearest(float(input()), n))",
      -4.546875
    ],
    [
      "def nearest_multiple(n, m):\n    return int(n/m)*m\n\nif __name__ == '__main__':\n    print(nearest_multiple(10, 2))\n    print(nearest_multiple(10, 3))\n    print(nearest_multiple(10, 4))\n    print(nearest_multiple(10, 5))\n    print(nearest_multiple(10, 6))\n    print(nearest_multiple(10, 7))\n    print(nearest_multiple(10, 8))\n    print(nearest_multiple(10, 9))\n    print(nearest_multiple(10, 10))\n    print(nearest_multiple(10, 11))\n    print(nearest_multiple(10, 12))\n    print(nearest_multiple(10, 13))\n    print(nearest_multiple(10, 14))\n    print(nearest_multiple(10, 15))\n    print(nearest_multiple(10, 16))\n    print(nearest_multiple(10, 17))\n    print(nearest_multiple(10, 18))\n    print(nearest_multiple(10, 19))\n    print(nearest_multiple(10, 20))\n    print(nearest_multiple(10, 21))\n    print(nearest_multiple(10, 22))\n    print(nearest_multiple(10, 23))\n    print(nearest_multiple(10, 24))\n    print(nearest_multiple(10, 25))\n    print(nearest_multiple(10, 26))\n    print(nearest_multiple(10, 27))\n    print(nearest_multiple(10, 28))\n    print(nearest_multiple(10, 29))\n    print(nearest_multiple(10, 30))\n    print(nearest_multiple(10, 31))\n    print(nearest_multiple(10, 32))\n    print(nearest_multiple(10, 33))\n    print(nearest_multiple(10, 34))\n    print(nearest_multiple(10, 35))\n    print(nearest_multiple(10, 36))\n    print(nearest_multiple(10, 37))\n    print(nearest_multiple(10, 38",
      -4.59375
    ],
    [
      "class Solution(object):\n    def round(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        if num < 0:\n            return -1\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 4\n        if num == 4:\n            return 8\n        if num == 5:\n            return 16\n        if num == 6:\n            return 32\n        if num == 7:\n            return 64\n        if num == 8:\n            return 128\n        if num == 9:\n            return 256\n        if num == 10:\n            return 512\n        if num == 11:\n            return 1024\n        if num == 12:\n            return 2048\n        if num == 13:\n            return 4096\n        if num == 14:\n            return 8192\n        if num == 15:\n            return 16384\n        if num == 16:\n            return 32768\n        if num == 17:\n            return 65536\n        if num == 18:\n            return 131072\n        if num == 19:\n            return 262144\n        if num == 20:\n            return 524288\n        if num == 21:\n            return 1048576\n        if num == 22:\n            return 2097152\n        if num == 23:\n            return 4194304\n        if num == 24:\n            return 8388608\n        if num == 25:\n            return 16777216\n        if num == 26:\n            return 33554432\n        if num == 27:\n            return 67108864\n        if num == 28:\n            return 134217728\n        if num == 29:\n            return 268435456\n        if num == 30:\n            return 536870912\n        if num == 31:\n            return 1073741824\n        if num == 32:\n            return 2147483648\n        return num\n\n\nif __name__ == '__main__':\n    assert Solution().round(-1) == -1\n    assert Solution().round(0) == 0\n    assert Solution().round(1) == 1\n    assert Solution().round(2) ==",
      -4.64453125
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @param {integer} k\n    # @return {integer}\n    def nearestMultiple(self, x, k):\n        if x <= 0 or k <= 0:\n            return 0\n        return int(x / k) * k\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.nearestMultiple(1, 2)\n    print solution.nearestMultiple(1, 3)\n    print solution.nearestMultiple(2, 3)\n    print solution.nearestMultiple(3, 3)\n    print solution.nearestMultiple(5, 2)",
      -4.67578125
    ],
    [
      "# https://leetcode.com/problems/round-number-to-nearest-multiple-of-a-specific-number/discuss/137824/C%2B%2B-Python-Round-to-nearest-multiple-of-a-specific-number\n# https://leetcode.com/problems/round-number-to-nearest-multiple-of-a-specific-number/discuss/137824/C%2B%2B-Python-Round-to-nearest-multiple-of-a-specific-number\n# https://leetcode.com/problems/round-number-to-nearest-multiple-of-a-specific-number/discuss/137824/C%2B%2B-Python-Round-to-nearest-multiple-of-a-specific-number\nclass Solution(object):\n    def roundToNearest(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return -1\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return n // 2\n        return (n + 1) // 2\n\nif __name__ == '__main__':\n    assert Solution().roundToNearest(0) == 0\n    assert Solution().roundToNearest(1) == 1\n    assert Solution().roundToNearest(2) == 2\n    assert Solution().roundToNearest(3) == 4\n    assert Solution().roundToNearest(4) == 4\n    assert Solution().roundToNearest(5) == 5\n    assert Solution().roundToNearest(6) == 6\n    assert Solution().roundToNearest(7) == 7\n    assert Solution().roundToNearest(8) == 8\n    assert Solution().roundToNearest(9) == 10\n    assert Solution().roundToNearest(10) == 10\n    assert Solution().roundToNearest(11) == 12\n    assert Solution().roundToNearest(12) == 12\n    assert Solution().roundToNearest(13) == 14\n    assert Solution().roundToNearest(14) ==",
      -4.69921875
    ],
    [
      "# https://www.hackerrank.com/challenges/round-it/problem\n# https://www.hackerrank.com/challenges/round-it/submissions/code/26155584\n\n# Returns the rounded number\ndef roundIt(number, multiple):\n    return int(number / multiple) * multiple\n\n# Returns the rounded number\ndef roundIt2(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt3(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt4(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt5(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt6(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt7(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt8(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt9(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt10(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt11(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt12(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the rounded number\ndef roundIt13(number, multiple):\n    return int(number / multiple) * multiple + multiple - (number % multiple)\n\n# Returns the",
      -4.8125
    ],
    [
      "# Definition for a rounding number.\nclass RoundingNumber:\n    def __init__(self, number, multiple):\n        self.number = number\n        self.multiple = multiple\n\n    def round(self):\n        return int(self.number / self.multiple) * self.multiple\n\n\nclass Solution:\n    def round(self, n: int, multiple: int) -> int:\n        \"\"\"\n        :type n: int\n        :type multiple: int\n        :rtype: int\n        \"\"\"\n        if multiple == 0:\n            return n\n\n        multiple_of_two = multiple / 2\n        if n % multiple == 0:\n            return n\n        if n % multiple_of_two == 0:\n            return n + multiple_of_two\n        return n + multiple\n\n\nif __name__ == \"__main__\":\n    assert Solution().round(12, 2) == 12\n    assert Solution().round(12, 3) == 12\n    assert Solution().round(12, 4) == 12\n    assert Solution().round(12, 5) == 12\n    assert Solution().round(12, 6) == 12\n    assert Solution().round(12, 7) == 12\n    assert Solution().round(12, 8) == 12\n    assert Solution().round(12, 9) == 12\n    assert Solution().round(12, 10) == 12\n    assert Solution().round(12, 11) == 12\n    assert Solution().round(12, 12) == 12\n    assert Solution().round(12, 13) == 12\n    assert Solution().round(12, 14) == 12\n    assert Solution().round(12, 15) == 12\n    assert Solution().round(12, 16) == 12\n    assert Solution().round(12, 17) == 12\n    assert Solution().round(12, 18) == 12\n    assert Solution().round(12, 19) == 12\n    assert Solution().round(12, 20) == 12\n    assert Solution().round(12, 21) == 12\n    assert Solution().round(12, 22) == 12\n    assert Solution().round(12, 23) == 12\n    assert Solution().round(12, 24) == 12\n    assert Solution().round(12, 25) == 12\n    assert Solution().round(12,",
      -4.8515625
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def nearestMultiple(self, x, y):\n        return int(x / y) * y\n\n\nif __name__ == \"__main__\":\n    assert Solution().nearestMultiple(3, 2) == 3\n    assert Solution().nearestMultiple(3, 3) == 3\n    assert Solution().nearestMultiple(3, 4) == 4\n    assert Solution().nearestMultiple(3, 5) == 5\n    assert Solution().nearestMultiple(3, 6) == 6\n    assert Solution().nearestMultiple(3, 7) == 7\n    assert Solution().nearestMultiple(3, 8) == 8\n    assert Solution().nearestMultiple(3, 9) == 9",
      -5.03515625
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @param {integer} k\n    # @return {integer}\n    def nearestMultiple(self, x, k):\n        return (x/k)*k\n\nif __name__ == \"__main__\":\n    assert Solution().nearestMultiple(1, 1) == 1, \"1\"\n    assert Solution().nearestMultiple(3, 2) == 2, \"3\"\n    assert Solution().nearestMultiple(5, 3) == 3, \"5\"\n    assert Solution().nearestMultiple(5, 4) == 4, \"5\"\n    assert Solution().nearestMultiple(5, 5) == 5, \"5\"\n    assert Solution().nearestMultiple(10, 2) == 10, \"10\"\n    assert Solution().nearestMultiple(10, 5) == 10, \"10\"\n    assert Solution().nearestMultiple(10, 10) == 10, \"10\"\n    assert Solution().nearestMultiple(10, 20) == 20, \"10\"\n    assert Solution().nearestMultiple(10, 30) == 30, \"10\"\n    assert Solution().nearestMultiple(10, 40) == 40, \"10\"\n    assert Solution().nearestMultiple(10, 50) == 50, \"10\"\n    assert Solution().nearestMultiple(10, 60) == 60, \"10\"\n    assert Solution().nearestMultiple(10, 70) == 70, \"10\"\n    assert Solution().nearestMultiple(10, 80) == 80, \"10\"\n    assert Solution().nearestMultiple(10, 90) == 90, \"10\"\n    assert Solution().nearestMultiple(10, 100) == 100, \"10\"\n    assert Solution().nearestMultiple(10, 110) == 110, \"10\"\n    assert Solution().nearestMultiple(10, 120) == 120, \"10\"\n    assert Solution().nearestMultiple(10, 130) == 130, \"10\"\n    assert Solution().nearestMultiple(10, 140) == 140, \"10\"\n    assert Solution().nearestMultiple(10, 150) == 150, \"10\"\n    assert Solution().nearestMultiple(10, 160) == 160, \"10\"\n    assert Solution().nearestMultiple(10, 170",
      -5.14453125
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        n, m = abs(n), abs(m)\n        if n == 0:\n            return 0\n        if n % m == 0:\n            return n // m\n        if n < 0:\n            return -self.nearestMultiple(-n, m)\n        if n > 0 and m > n:\n            return n - m\n        if n < 0 and m < n:\n            return -self.nearestMultiple(-n, m)\n        if n > 0 and m < n:\n            return n - m\n        return n\n\nif __name__ == \"__main__\":\n    assert Solution().nearestMultiple(0, 1) == 0\n    assert Solution().nearestMultiple(0, 10) == 0\n    assert Solution().nearestMultiple(1, 10) == 1\n    assert Solution().nearestMultiple(2, 10) == 2\n    assert Solution().nearestMultiple(3, 10) == 5\n    assert Solution().nearestMultiple(4, 10) == 10\n    assert Solution().nearestMultiple(5, 10) == 10\n    assert Solution().nearestMultiple(6, 10) == 10\n    assert Solution().nearestMultiple(7, 10) == 10\n    assert Solution().nearestMultiple(8, 10) == 10\n    assert Solution().nearestMultiple(9, 10) == 10\n    assert Solution().nearestMultiple(10, 10) == 10\n    assert Solution().nearestMultiple(11, 10) == 10\n    assert Solution().nearestMultiple(12, 10) == 10\n    assert Solution().nearestMultiple(13, 10) == 10\n    assert Solution().nearestMultiple(14, 10) == 10\n    assert Solution().nearestMultiple(15, 10) == 10\n    assert Solution().nearestMultiple(16, 10) == 10\n    assert Solution().nearestMultiple(17, 10) == 10\n    assert Solution().nearestMultiple(18, 10) == 10\n    assert Solution().nearestMultiple(19, 10) == 10\n    assert Solution().nearestMultiple(20, 10) == 10",
      -5.796875
    ],
    [
      "def round_nearest_multiple(num, multiple):\n    \"\"\"\n    :type num: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    # TODO: implement\n    return num\n\nif __name__ == \"__main__\":\n    assert round_nearest_multiple(1, 2) == 1\n    assert round_nearest_multiple(2, 2) == 2\n    assert round_nearest_multiple(2.5, 2) == 2\n    assert round_nearest_multiple(2.5, 3) == 3\n    assert round_nearest_multiple(2.5, 4) == 4\n    assert round_nearest_multiple(2.5, 5) == 5\n    assert round_nearest_multiple(2.5, 6) == 6\n    assert round_nearest_multiple(2.5, 7) == 7\n    assert round_nearest_multiple(2.5, 8) == 8\n    assert round_nearest_multiple(2.5, 9) == 9\n    assert round_nearest_multiple(2.5, 10) == 10\n    assert round_nearest_multiple(2.5, 11) == 11\n    assert round_nearest_multiple(2.5, 12) == 12\n    assert round_nearest_multiple(2.5, 13) == 13\n    assert round_nearest_multiple(2.5, 14) == 14\n    assert round_nearest_multiple(2.5, 15) == 15\n    assert round_nearest_multiple(2.5, 16) == 16\n    assert round_nearest_multiple(2.5, 17) == 17\n    assert round_nearest_multiple(2.5, 18) == 18\n    assert round_nearest_multiple(2.5, 19) == 19\n    assert round_nearest_multiple(2.5, 20) == 20\n    assert round_nearest_multiple(2.5, 21) == 21\n    assert round_nearest_multiple(2.5, 22) == 22\n    assert round_nearest_multiple(2.5, 23) == 23\n    assert round_nearest_multiple(2.5, 24) == 24\n    assert",
      -5.953125
    ],
    [
      "# I was thinking of rounding the number to the nearest multiple of 10, but that seems wrong.\n# I was thinking of rounding the number to the nearest multiple of 100, but that would round\n# the number to the nearest 100 if the number was even.\n\n# In this problem, I want the number to be rounded to the nearest multiple of 10.\n# So if the number is 1, the result should be 1.\n# If the number is 2, the result should be 10.\n# If the number is 3, the result should be 100.\n# If the number is 4, the result should be 1000.\n# If the number is 5, the result should be 10000.\n# If the number is 6, the result should be 100000.\n# If the number is 7, the result should be 1000000.\n# If the number is 8, the result should be 10000000.\n# If the number is 9, the result should be 100000000.\n# If the number is 10, the result should be 1000000000.\n\n# If the number is 11, the result should be 10000000000.\n# If the number is 12, the result should be 100000000000.\n# If the number is 13, the result should be 1000000000000.\n# If the number is 14, the result should be 10000000000000.\n# If the number is 15, the result should be 100000000000000.\n# If the number is 16, the result should be 1000000000000000.\n# If the number is 17, the result should be 10000000000000000.\n# If the number is 18, the result should be 10000000000000000000.\n\n# For example, round(1.25) should return 1.\n# round(1.5) should return 2.\n# round(1.75) should return 2.\n# round(2.25) should return 10.\n# round(2.5) should return 20.\n# round(2.75) should return 20.\n# round(3.25) should return 100.\n# round(3.5) should return 200.\n# round(3.75) should return 200.\n# round(4.25) should return 1000.\n# round(4.5) should return 2000.\n# round(4.75) should return 2000.\n# round(5.25) should return 10000.",
      -6.16015625
    ],
    [
      "import math\n\ndef round_to_nearest(number, multiple):\n    return int(math.ceil(number / multiple) * multiple)\n\nif __name__ == '__main__':\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 5)\n    print round_to_nearest(10, 3)\n    print round_to_nearest(10, 4)\n    print round_to_nearest(10, 5)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round_to_nearest(10, 2)\n    print round",
      -6.16796875
    ],
    [
      "def round_to_nearest_multiple(number, multiple):\n    \"\"\"\n    :type number: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    \n    if number < 0:\n        return -1\n    \n    return int(number / multiple) * multiple\n    \ndef test():\n    assert round_to_nearest_multiple(100, 10) == 100\n    assert round_to_nearest_multiple(10, 10) == 10\n    assert round_to_nearest_multiple(10, 100) == 10\n    assert round_to_nearest_multiple(10, 1000) == 10\n    assert round_to_nearest_multiple(10, 10000) == 10\n    assert round_to_nearest_multiple(10, 100000) == 100\n    assert round_to_nearest_multiple(10, 1000000) == 100\n    assert round_to_nearest_multiple(10, 10000000) == 1000\n    assert round_to_nearest_multiple(10, 100000000) == 10000\n    assert round_to_nearest_multiple(10, 1000000000) == 100000\n    assert round_to_nearest_multiple(10, 10000000000) == 1000000\n    assert round_to_nearest_multiple(10, 100000000000) == 10000000\n    assert round_to_nearest_multiple(10, 1000000000000) == 100000000\n    assert round_to_nearest_multiple(10, 10000000000000) == 1000000000\n    assert round_to_nearest_multiple(10, 100000000000000) == 10000000000\n    assert round_to_nearest_multiple(10, 1000000000000000) == 100000000000\n    assert round_to_nearest_multiple(10, 10000000000000000) == 1000000000000\n    assert round_to_nearest_multiple(10, 100000000000000000) == 10000000000000\n    assert round_to_nearest_multiple(10, 1000000000000000000) == 1000000000000000\n    assert round_to_nearest_multiple(10, 10000000000000000000) == 1000000000000000000\n    assert round_to_nearest_multiple(10, 100000000000000000000) == 100000000000000000\n    assert round_to_nearest_multiple(10, 1000000000000000000",
      -6.2890625
    ],
    [
      "def round_nearest_multiple(number, multiple):\n    return (number - (number % multiple)) + multiple\n\nif __name__ == '__main__':\n    number = 12.4\n    multiple = 1\n    print(round_nearest_multiple(number, multiple))\n    number = 12.2\n    multiple = 2\n    print(round_nearest_multiple(number, multiple))\n    number = 12.8\n    multiple = 5\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 3\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 4\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 5\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 6\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 7\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 8\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 9\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 10\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 11\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 12\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 13\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 14\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 15\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 16\n    print(round_nearest_multiple(number, multiple))\n    number = 12.5\n    multiple = 17\n    print",
      -6.328125
    ],
    [
      "def round_nearest(x, target):\n    \"\"\"\n    :type x: int\n    :type target: int\n    :rtype: int\n    \"\"\"\n    return int(x/target) * target\n\nif __name__ == '__main__':\n    assert round_nearest(100, 2) == 100\n    assert round_nearest(100, 3) == 100\n    assert round_nearest(100, 4) == 100\n    assert round_nearest(100, 5) == 100\n    assert round_nearest(100, 6) == 100\n    assert round_nearest(100, 7) == 100\n    assert round_nearest(100, 8) == 100\n    assert round_nearest(100, 9) == 100\n    assert round_nearest(100, 10) == 100\n    assert round_nearest(100, 11) == 100\n    assert round_nearest(100, 12) == 100\n    assert round_nearest(100, 13) == 100\n    assert round_nearest(100, 14) == 100\n    assert round_nearest(100, 15) == 100\n    assert round_nearest(100, 16) == 100\n    assert round_nearest(100, 17) == 100\n    assert round_nearest(100, 18) == 100\n    assert round_nearest(100, 19) == 100\n    assert round_nearest(100, 20) == 100\n    assert round_nearest(100, 21) == 100\n    assert round_nearest(100, 22) == 100\n    assert round_nearest(100, 23) == 100\n    assert round_nearest(100, 24) == 100\n    assert round_nearest(100, 25) == 100\n    assert round_nearest(100, 26) == 100\n    assert round_nearest(100, 27) == 100\n    assert round_nearest(100, 28) == 100\n    assert round_nearest(100, 29) == 100\n    assert round_nearest(100, 30) == 100\n    assert round_nearest(100, 31) == 100\n    assert round_nearest(100, 32) == 100\n    assert round_nearest(100, 33) == 100\n    assert",
      -6.50390625
    ],
    [
      "# https://www.hackerrank.com/challenges/round-to-nearest-multiple-of-a-number\n# https://www.hackerrank.com/challenges/round-to-nearest-multiple-of-a-number-2\n\ndef round_to_nearest_multiple_of_a_number(n, a):\n    \"\"\"\n    Rounds to the nearest multiple of a.\n    :type n: int\n    :type a: int\n    :rtype: int\n    \"\"\"\n    return int(n / a) * a\n\n\nif __name__ == \"__main__\":\n    print(round_to_nearest_multiple_of_a_number(10, 2))\n    print(round_to_nearest_multiple_of_a_number(10, 3))\n    print(round_to_nearest_multiple_of_a_number(10, 10))\n    print(round_to_nearest_multiple_of_a_number(10, 5))\n    print(round_to_nearest_multiple_of_a_number(10, 100))",
      -6.703125
    ],
    [
      "class Solution(object):\n    def round(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        if num < 0:\n            return -1\n        res = num\n        while res > 0:\n            res = res / 10\n        res = res * 10 + 1\n        return res\n\n\nif __name__ == \"__main__\":\n    assert Solution().round(-1) == -1\n    assert Solution().round(0) == 0\n    assert Solution().round(1) == 1\n    assert Solution().round(5) == 10\n    assert Solution().round(6) == 10\n    assert Solution().round(7) == 10\n    assert Solution().round(8) == 100\n    assert Solution().round(9) == 100\n    assert Solution().round(10) == 1000\n    assert Solution().round(100) == 10000\n    assert Solution().round(101) == 10000\n    assert Solution().round(102) == 10000\n    assert Solution().round(103) == 100000\n    assert Solution().round(104) == 100000\n    assert Solution().round(105) == 100000\n    assert Solution().round(106) == 1000000\n    assert Solution().round(107) == 1000000\n    assert Solution().round(108) == 1000000\n    assert Solution().round(109) == 10000000\n    assert Solution().round(110) == 10000000\n    assert Solution().round(111) == 10000000\n    assert Solution().round(112) == 100000000\n    assert Solution().round(113) == 100000000\n    assert Solution().round(114) == 100000000\n    assert Solution().round(115) == 1000000000\n    assert Solution().round(116) == 1000000000\n    assert Solution().round(117) == 1000000000\n    assert Solution().round(118) == 10000000000\n    assert Solution().round(119) == 10000000000\n    assert Solution().round(120) == 10000000000\n    assert Solution().round(121) == 100000000000\n    assert Solution().round(122) == 100000000000\n    assert Solution().round(123) == 100000000000\n    assert Solution().round(124) == 1000000000000\n    assert Solution().round(125)",
      -6.9609375
    ],
    [
      "class Solution(object):\n    def round(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        if num < 0:\n            return -self.round(-num)\n        if num % 2 == 0:\n            return num\n        else:\n            return num + 1\n\n\nif __name__ == '__main__':\n    assert Solution().round(0) == 0\n    assert Solution().round(1) == 1\n    assert Solution().round(2) == 2\n    assert Solution().round(3) == 4\n    assert Solution().round(4) == 4\n    assert Solution().round(5) == 6\n    assert Solution().round(6) == 6\n    assert Solution().round(7) == 8\n    assert Solution().round(8) == 8\n    assert Solution().round(9) == 10\n    assert Solution().round(10) == 10\n    assert Solution().round(11) == 12\n    assert Solution().round(12) == 12\n    assert Solution().round(13) == 14\n    assert Solution().round(14) == 14\n    assert Solution().round(15) == 16\n    assert Solution().round(16) == 16\n    assert Solution().round(17) == 18\n    assert Solution().round(18) == 18\n    assert Solution().round(19) == 20\n    assert Solution().round(20) == 20\n    assert Solution().round(21) == 22\n    assert Solution().round(22) == 22\n    assert Solution().round(23) == 24\n    assert Solution().round(24) == 24\n    assert Solution().round(25) == 26\n    assert Solution().round(26) == 26\n    assert Solution().round(27) == 28\n    assert Solution().round(28) == 28\n    assert Solution().round(29) == 30\n    assert Solution().round(30) == 30\n    assert Solution().round(31) == 32\n    assert Solution().round(32) == 32\n    assert Solution().round(33) == 34\n    assert Solution().round(34) == 34\n    assert Solution().round(35) == 36\n    assert Solution().round(36) == 36\n    assert Solution().round(",
      -7.14453125
    ],
    [
      "# https://leetcode.com/problems/round-number/\n\nclass Solution(object):\n    def round(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n < 0:\n            return -1\n        if n > 0:\n            return 1\n\n        n = n + 1\n        n_list = [0]\n        n_list.append(1)\n        n_list.append(2)\n        n_list.append(3)\n        n_list.append(4)\n        n_list.append(5)\n        n_list.append(6)\n        n_list.append(7)\n        n_list.append(8)\n        n_list.append(9)\n        n_list.append(10)\n        n_list.append(11)\n        n_list.append(12)\n        n_list.append(13)\n        n_list.append(14)\n        n_list.append(15)\n        n_list.append(16)\n        n_list.append(17)\n        n_list.append(18)\n        n_list.append(19)\n        n_list.append(20)\n        n_list.append(21)\n        n_list.append(22)\n        n_list.append(23)\n        n_list.append(24)\n        n_list.append(25)\n        n_list.append(26)\n        n_list.append(27)\n        n_list.append(28)\n        n_list.append(29)\n        n_list.append(30)\n        n_list.append(31)\n        n_list.append(32)\n        n_list.append(33)\n        n_list.append(34)\n        n_list.append(35)\n        n_list.append(36)\n        n_list.append(37)\n        n_list.append(38)\n        n_list.append",
      -7.7890625
    ],
    [
      "#\n#  Implementation of round_nearest_multiple\n#  @author: lizhen\n#  @date: 2015-05-26\n#\n\nclass Solution(object):\n    def round_nearest_multiple(self, num, target):\n        \"\"\"\n        :type num: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if num < 0:\n            return -1\n        if num == 0:\n            return 0\n        if target == 0:\n            return num\n\n        if target > 0:\n            if num < target:\n                return target\n            else:\n                return target - num\n\n        if num > target:\n            return target + num\n        else:\n            return target - num\n\n\nif __name__ == '__main__':\n    solution = Solution()\n\n    print solution.round_nearest_multiple(1, 2)\n    print solution.round_nearest_multiple(1, 3)\n    print solution.round_nearest_multiple(1, 4)\n    print solution.round_nearest_multiple(1, 5)\n    print solution.round_nearest_multiple(1, 6)\n    print solution.round_nearest_multiple(1, 7)\n    print solution.round_nearest_multiple(1, 8)\n    print solution.round_nearest_multiple(1, 9)\n    print solution.round_nearest_multiple(1, 10)\n    print solution.round_nearest_multiple(1, 11)\n    print solution.round_nearest_multiple(1, 12)\n    print solution.round_nearest_multiple(1, 13)\n    print solution.round_nearest_multiple(1, 14)\n    print solution.round_nearest_multiple(1, 15)\n    print solution.round_nearest_multiple(1, 16)\n    print solution.round_nearest_multiple(1, 17)\n    print solution.round_nearest_multiple(1, 18)\n    print solution.round_nearest_multiple(1, 19)\n    print solution.round_nearest_multiple(1, 20)\n    print solution.round_nearest_multiple(1, 100)",
      -8.3046875
    ],
    [
      "# https://leetcode.com/problems/round-number/\nclass Solution(object):\n    def nearestMultiple(self, n, target):\n        \"\"\"\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if target < 0:\n            return 0\n        if target == 0:\n            return n\n        if target % n == 0:\n            return target\n        if target % n == 0:\n            return target\n        return target\n\n    def nearestMultiple2(self, n, target):\n        \"\"\"\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if target < 0:\n            return 0\n        if target == 0:\n            return n\n        if target % n == 0:\n            return target\n        return target",
      -9.3046875
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n    def __init__(self):\n        self.round_to_nearest_multiple = round_to_nearest_multiple\n\n    def round_to_nearest_multiple(self, number, multiple):\n        \"\"\"\n        :type number: int\n        :type multiple: int\n        :rtype: int\n        \"\"\"\n        if number % multiple == 0:\n            return number\n        return number + multiple - number % multiple\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/round-to-nearest-multiple/solution/\n# Approach #1: Brute Force [Accepted]\n# Complexity Analysis\n# Time Complexity: O(log(n))\n# Space Complexity: O(1)\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\n\n# 2ms 98.57%\nclass Solution {\n    public int roundToNearestMultiple(int number, int multiple) {\n        if (number % multiple == 0) {\n            return number;\n        }\n        int half = multiple / 2;\n        return number + multiple - number % multiple - half;\n    }\n}\n'''",
      -10.234375
    ],
    [
      "from __future__ import print_function\nimport math\n\ndef round_nearest(number, multiple):\n    \"\"\"\n    :type number: int\n    :type multiple: int\n    :rtype: int\n    \"\"\"\n    return int(math.ceil(number/multiple) * multiple)\n\n\nif __name__ == '__main__':\n    print(round_nearest(10, 4))\n    print(round_nearest(10, 3))\n    print(round_nearest(10, 2))\n    print(round_nearest(10, 1))\n    print(round_nearest(10, 0))\n    print(round_nearest(10, -1))\n    print(round_nearest(10, -2))\n    print(round_nearest(10, -3))\n    print(round_nearest(10, -4))\n    print(round_nearest(10, -5))\n    print(round_nearest(10, -6))\n    print(round_nearest(10, -7))\n    print(round_nearest(10, -8))",
      -10.328125
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @param {integer} y\n    # @return {integer}\n    def nearestMultiple(self, x, y):\n        if x == 0:\n            return 0\n        if y == 0:\n            return x\n        \n        x, y = abs(x), abs(y)\n        \n        if x < y:\n            return x\n        if x == y:\n            return x\n        \n        x, y = x / y, y\n        \n        if x == 1:\n            return x * y\n        if x == 2:\n            return x * y\n        if x == 3:\n            return x * y\n        \n        x, y = x / 2, y / 2\n        \n        if x == 1:\n            return x * y\n        if x == 2:\n            return x * y\n        if x == 3:\n            return x * y\n        \n        x, y = x / 2, y / 2\n        \n        if x == 1:\n            return x * y\n        if x == 2:\n            return x * y\n        if x == 3:\n            return x * y\n        \n        x, y = x / 2, y / 2\n        \n        if x == 1:\n            return x * y\n        if x == 2:\n            return x * y\n        if x == 3:\n            return x * y\n        \n        x, y = x / 2, y / 2\n        \n        if x == 1:\n            return x * y\n        if x == 2:\n            return x * y\n        if x == 3:\n            return x * y\n        \n        x, y = x / 2, y / 2\n        \n        if x == 1:\n            return x * y\n        if x == 2:\n            return x * y\n        if x == 3:\n            return x * y\n        \n        x, y = x / 2, y / 2\n        \n        if x == 1:\n            return x * y\n        if x == 2:\n            return x * y\n        if x == 3:\n            return x * y\n        \n        x, y = x / 2, y / 2",
      -10.65625
    ],
    [
      "import math\nimport sys\n\nclass Solution(object):\n    def round(self, number, multiple):\n        \"\"\"\n        :type number: int\n        :type multiple: int\n        :rtype: int\n        \"\"\"\n        return math.ceil(number/multiple) * multiple\n\n    def test(self):\n        self.assertEqual(self.round(10, 2), 20)\n        self.assertEqual(self.round(10, 3), 20)\n        self.assertEqual(self.round(10, 4), 20)\n        self.assertEqual(self.round(10, 5), 20)\n        self.assertEqual(self.round(10, 6), 20)\n        self.assertEqual(self.round(10, 7), 20)\n        self.assertEqual(self.round(10, 8), 20)\n        self.assertEqual(self.round(10, 9), 20)\n        self.assertEqual(self.round(10, 10), 20)\n        self.assertEqual(self.round(10, 11), 20)\n        self.assertEqual(self.round(10, 12), 20)\n        self.assertEqual(self.round(10, 13), 20)\n        self.assertEqual(self.round(10, 14), 20)\n        self.assertEqual(self.round(10, 15), 20)\n        self.assertEqual(self.round(10, 16), 20)\n        self.assertEqual(self.round(10, 17), 20)\n        self.assertEqual(self.round(10, 18), 20)\n        self.assertEqual(self.round(10, 19), 20)\n        self.assertEqual(self.round(10, 20), 20)\n        self.assertEqual(self.round(10, 21), 20)\n        self.assertEqual(self.round(10, 22), 20)\n        self.assertEqual(self.round(10, 23), 20)\n        self.assertEqual(self.round(10, 24), 20)\n        self.assertEqual(self.round(10, 25), 20)\n        self.assertEqual(",
      -10.890625
    ],
    [
      "def round_to_nearest(num, multiple):\n    return num/multiple + (num%multiple!= 0)*multiple\n\nprint round_to_nearest(5.0, 10)\nprint round_to_nearest(5.5, 10)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round_to_nearest(5.0, 2)\nprint round",
      -11.3046875
    ],
    [
      "# https://leetcode.com/problems/round-number/solution/\n\nclass Solution(object):\n    def round(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return -1\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n % 2 == 0:\n            return n / 2\n        else:\n            return n + 1\n\n\nif __name__ == '__main__':\n    print Solution().round(-1)\n    print Solution().round(0)\n    print Solution().round(1)\n    print Solution().round(2)\n    print Solution().round(3)\n    print Solution().round(4)\n    print Solution().round(5)\n    print Solution().round(6)\n    print Solution().round(7)\n    print Solution().round(8)\n    print Solution().round(9)\n    print Solution().round(10)\n    print Solution().round(11)\n    print Solution().round(12)\n    print Solution().round(13)\n    print Solution().round(14)\n    print Solution().round(15)\n    print Solution().round(16)\n    print Solution().round(17)\n    print Solution().round(18)\n    print Solution().round(19)\n    print Solution().round(20)\n    print Solution().round(21)\n    print Solution().round(22)\n    print Solution().round(23)\n    print Solution().round(24)\n    print Solution().round(25)\n    print Solution().round(26)\n    print Solution().round(27)\n    print Solution().round(28)\n    print Solution().round(29)\n    print Solution().round(30)\n    print Solution().round(31)",
      -11.3515625
    ],
    [
      "class Solution(object):\n    def nearestMultiple(self, n, target):\n        \"\"\"\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        n = int(n)\n        target = int(target)\n        while n % target:\n            n = n * 10\n        return n / target\n\n\ndef main():\n    n = int(input())\n    target = int(input())\n    print(Solution().nearestMultiple(n, target))\n\nif __name__ == '__main__':\n    main()",
      -12.078125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}