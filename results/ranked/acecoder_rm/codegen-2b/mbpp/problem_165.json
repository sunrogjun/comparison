{
  "problem": {
    "task_id": "MBPP/176",
    "prompt": "Write a function to find the perimeter of a triangle.",
    "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
    "test_list": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ],
    "challenge_test_list": [],
    "problem_id": 165
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "\"\"\"\nImplementation using formula\n\"\"\"\n\ndef perimeter(triangle):\n    \"\"\"\n    triangle: A list of three integers\n    Returns: A integer, the perimeter of the triangle\n    \"\"\"\n    return triangle[0] + triangle[1] + triangle[2]\n\n\"\"\"\nImplementation using recursion\n\"\"\"\n\ndef perimeter_recursive(triangle):\n    \"\"\"\n    triangle: A list of three integers\n    Returns: A integer, the perimeter of the triangle\n    \"\"\"\n    return triangle[0] + triangle[1] + triangle[2]\n\n\"\"\"\nTest cases\n\"\"\"\n\nassert(perimeter([3, 4, 5]) == 10)\nassert(perimeter([4, 5, 6]) == 12)\nassert(perimeter([5, 6, 7]) == 15)\nassert(perimeter([6, 7, 8]) == 18)\nassert(perimeter([7, 8, 9]) == 21)\nassert(perimeter([8, 9, 10]) == 24)\nassert(perimeter([9, 10, 11]) == 27)\nassert(perimeter([10, 11, 12]) == 30)\nassert(perimeter([11, 12, 13]) == 33)\nassert(perimeter([12, 13, 14]) == 36)\nassert(perimeter([13, 14, 15]) == 39)\nassert(perimeter([14, 15, 16]) == 42)\nassert(perimeter([15, 16, 17]) == 45)\nassert(perimeter([16, 17, 18]) == 48)\nassert(perimeter([17, 18, 19]) == 51)\nassert(perimeter([18, 19, 20]) == 54)\nassert(perimeter([19, 20, 21]) == 57)\nassert(perimeter([20, 21, 22]) == 60)\nassert(perimeter([21, 22, 23]) == 63)\nassert(perimeter([22, 23, 24]) == 66)\nassert(perimeter([23, 24, 25]) == 69)\nassert(perimeter([24, 25, 26]) == 72)\nassert(perimeter([25, 26, 27]) == 75)\nassert(perimeter([26, 27, 28]) == 78)\nassert(perimeter([27, 28, 29]) == 81",
      4.0703125
    ],
    [
      "def perimeter(triangle):\n    \"\"\"\n    For a triangle, the perimeter is the sum of the lengths of the sides.\n    :type triangle: List[int]\n    :rtype: int\n    \"\"\"\n    sides = [triangle[0], triangle[1], triangle[2]]\n    length = 0\n    for side in sides:\n        length += side\n    return length\n\n# Test Cases\nassert perimeter([1, 2, 3]) == 3\nassert perimeter([1, 2, 3, 4]) == 7\nassert perimeter([2, 2, 2]) == 4\nassert perimeter([1, 2, 3, 4, 5]) == 10",
      3.72265625
    ],
    [
      "def perimeter(a, b, c):\n    return (a + b + c) / 2\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Test cases\n    print(perimeter(1, 2, 3))\n    print(perimeter(1, 2, 4))\n    print(perimeter(1, 1, 1))\n    print(perimeter(1, 2, 2))\n\nif __name__ == '__main__':\n    main()",
      3.212890625
    ],
    [
      "class Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) < 3:\n            return 0\n\n        a = points[0][0]\n        b = points[1][0]\n        c = points[2][0]\n\n        d = points[0][1]\n        e = points[1][1]\n        f = points[2][1]\n\n        g = (a + b + c) / 2\n        h = (d + e + f) / 2\n\n        perimeter = ((g - a) * (e - d) + (g - b) * (f - h) + (g - c) * (h - f)) / 2\n\n        return perimeter\n\na = [[0, 1], [1, 0], [1, 1]]\nprint Solution().trianglePerimeter(a)",
      1.13671875
    ],
    [
      "def perimeter(a,b,c):\n    \"\"\"\n    >>> perimeter(1,2,3)\n    6\n    >>> perimeter(1,2,1)\n    2\n    \"\"\"\n    return (a + b + c)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.7978515625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        return self.__triangle_perimeter(points)\n\n    def __triangle_perimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if len(points) == 0:\n            return []\n        if len(points) == 1:\n            return [points[0][0]]\n\n        a, b, c = points[0]\n        perim = [a, b, c]\n        for i in range(1, len(points)):\n            a, b, c = points[i]\n            perim.append(a + b + c)\n\n        return perim",
      0.62353515625
    ],
    [
      "import math\n\n\ndef get_perimeter(side_a, side_b, side_c):\n    \"\"\"\n    :type side_a: int\n    :type side_b: int\n    :type side_c: int\n    :rtype: int\n    \"\"\"\n    return int(math.sqrt(side_a + side_b + side_c))\n\n\ndef test_get_perimeter():\n    assert get_perimeter(2, 3, 4) == 6\n\n\nif __name__ == '__main__':\n    test_get_perimeter()",
      0.5322265625
    ],
    [
      "# https://www.hackerrank.com/challenges/triangle-perimeter/problem\n# https://www.hackerrank.com/challenges/triangle-perimeter-using-python/problem\n\n# using python list\ndef triangle_perimeter(triangle):\n    \"\"\"\n    Returns the perimeter of a triangle\n\n    :param triangle: A list of 3 integers representing the lengths of the 3 sides of the triangle\n    :return: The perimeter of the triangle\n    \"\"\"\n    return sum([triangle[0], triangle[1] + triangle[2]])\n\n# using python list with a custom function\ndef triangle_perimeter_custom(triangle):\n    \"\"\"\n    Returns the perimeter of a triangle\n\n    :param triangle: A list of 3 integers representing the lengths of the 3 sides of the triangle\n    :return: The perimeter of the triangle\n    \"\"\"\n    return triangle[0] + triangle[1] + triangle[2]\n\n# using python list with a custom function\ndef triangle_perimeter_custom_using_list(triangle):\n    \"\"\"\n    Returns the perimeter of a triangle\n\n    :param triangle: A list of 3 integers representing the lengths of the 3 sides of the triangle\n    :return: The perimeter of the triangle\n    \"\"\"\n    return triangle[0] + triangle[1] + triangle[2]\n\n# using python list with a custom function\ndef triangle_perimeter_using_list(triangle):\n    \"\"\"\n    Returns the perimeter of a triangle\n\n    :param triangle: A list of 3 integers representing the lengths of the 3 sides of the triangle\n    :return: The perimeter of the triangle\n    \"\"\"\n    return triangle[0] + triangle[1] + triangle[2]\n\n# using python list with a custom function\ndef triangle_perimeter_using_list_2(triangle):\n    \"\"\"\n    Returns the perimeter of a triangle\n\n    :param triangle: A list of 3 integers representing the lengths of the 3 sides of the triangle\n    :return: The perimeter of the triangle\n    \"\"\"\n    return triangle[0] + triangle[1] + triangle[2]\n\n# using python list with a custom function\ndef triangle_perimeter_using_list_3(triangle):\n    \"\"\"\n    Returns the perimeter of a triangle",
      0.435546875
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/triangle-perimeter\n# python3.5\n\ndef get_perimeter(triangle):\n    \"\"\"\n    Get perimeter of a triangle.\n    :param triangle: A list of points in form [x1,y1,x2,y2,x3,y3]\n    :return: A int\n    \"\"\"\n    # base case\n    if len(triangle) < 3:\n        return 0\n\n    # middle case\n    if len(triangle) == 3:\n        return (triangle[0][0] + triangle[1][0] + triangle[2][0]) * 3\n\n    # recursive case\n    perimeter = triangle[0][0] + triangle[1][0] + triangle[2][0]\n    for i in range(3, len(triangle)):\n        perimeter += triangle[i - 1][1] + triangle[i][0] + triangle[i][1]\n    return perimeter\n\nif __name__ == '__main__':\n    triangle = [\n        [3, 2, 1],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]\n    print(get_perimeter(triangle))",
      0.1431884765625
    ],
    [
      "# Definition for a point.\n# class Point:\n#     def __init__(self, a=0, b=0, c=0):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution:\n    def getPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        if len(points) == 1:\n            return points[0].a + points[0].b + points[0].c\n        if len(points) == 2:\n            return points[0].a + points[1].b\n        if len(points) == 3:\n            return points[0].a + points[1].b + points[2].c\n        # base case\n        sum = 0\n        for i in range(1, len(points)):\n            sum += points[i].a + points[i].b + points[i].c\n        return sum",
      0.0216522216796875
    ],
    [
      "class Solution(object):\n    \"\"\"\n    @param {number} a\n    @param {number} b\n    @param {number} c\n    @return {number}\n    \"\"\"\n    def trianglePerimeter(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: int\n        \"\"\"\n        return (a + b + c) / 2\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.trianglePerimeter(1, 1, 1)\n    print s.trianglePerimeter(2, 3, 4)\n    print s.trianglePerimeter(2, 3, 1)",
      -0.1669921875
    ],
    [
      "def triangle_perimeter(side1, side2, side3):\n    return (side1 + side2 + side3)\n\nif __name__ == \"__main__\":\n    print triangle_perimeter(1, 2, 3)\n    print triangle_perimeter(2, 3, 4)\n    print triangle_perimeter(3, 4, 5)",
      -0.85595703125
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def triangle(self, side):\n        \"\"\"\n        :type side: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(side) + (len(side)-1)*(side[0]+side[1]+side[2])\n\n    def triangle(self, side):\n        \"\"\"\n        :type side: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(side) + (len(side)-1)*(side[0]+side[1]+side[2])\n\n\nif __name__ == \"__main__\":\n    print Solution().triangle([3, 4, 5])",
      -0.85595703125
    ],
    [
      "def perimeter(triangle):\n    \"\"\"\n    :type triangle: list[int]\n    :rtype: int\n    \"\"\"\n    return sum(triangle[0]+triangle[1]+triangle[2])\n\n\n\nif __name__ == \"__main__\":\n    print(perimeter([3,4,5]))\n    print(perimeter([3,4,6]))\n    print(perimeter([3,4,7]))\n    print(perimeter([3,4,9]))\n    print(perimeter([3,4,12]))",
      -0.85693359375
    ],
    [
      "#!/usr/bin/env python\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"\n    a, b and c are the three sides of the triangle.\n    \"\"\"\n    return (a + b + c) / 2\n\nprint triangle_perimeter(1, 2, 3)",
      -0.85693359375
    ],
    [
      "import math\n\n\nclass Solution:\n    # @param {integer} sideA, sideB, sideC\n    # @return {integer}\n    def getPerimeter(self, sideA, sideB, sideC):\n        # Write your code here\n        return sideA + sideB + sideC\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.getPerimeter(4, 3, 6))",
      -0.85693359375
    ],
    [
      "def perimeter(a,b,c):\n    return a+b+c\n\ndef main():\n    \"\"\"\n    Runs a test case.\n    \"\"\"\n    a,b,c = 3,2,1\n    print(perimeter(a,b,c))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/triangle-perimeter/problem\n\ndef triangle_perimeter(a, b, c):\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(triangle_perimeter(a, b, c))",
      -0.85693359375
    ],
    [
      "import math\n\ndef triangle_perimeter(side1, side2, side3):\n    return math.sqrt(side1*side2*side3)\n\ndef main():\n    print triangle_perimeter(3, 4, 5)\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "# Import the libraries\nimport math\n\n# Define the function to find the perimeter\ndef perimeter(n):\n  return (n * (n + 1)) / 2\n\n# Test the function\nprint perimeter(3)\n\n# Output\n# The perimeter of a triangle is 6.",
      -0.85693359375
    ],
    [
      "def triangle_perimeter(triangle):\n    \"\"\"\n    Triangle perimeter\n    :param triangle: Triangle\n    :return: The perimeter of the triangle\n    \"\"\"\n    return (triangle[0][0] + triangle[1][0] + triangle[2][0]) * 2\n\nif __name__ == '__main__':\n    triangle = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print triangle_perimeter(triangle)",
      -0.85791015625
    ],
    [
      "def perimeter(triangle):\n    \"\"\"\n    triangle = [x1, y1, x2, y2, x3, y3]\n    returns the perimeter of the triangle\n    \"\"\"\n    sum = 0\n    for i in range(len(triangle)):\n        x1 = triangle[i]\n        y1 = triangle[i + 1]\n        x2 = triangle[i + 2]\n        y2 = triangle[i + 3]\n        sum += (x1 + x2 + x3) * (y1 + y2 + y3)\n    return sum\n\nif __name__ == '__main__':\n    triangle = [1, 2, 3, 4, 5, 6]\n    print(perimeter(triangle))",
      -0.85791015625
    ],
    [
      "import math\n\ndef find_perimeter(triangle):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :rtype: int\n    \"\"\"\n    return (triangle[0][0] + triangle[1][1] + triangle[2][2]) / 2\n\nif __name__ == '__main__':\n    triangle = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(find_perimeter(triangle))",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\nclass Solution(object):\n    def trianglePerimeter(self, p):\n        \"\"\"\n        :type p: List[int]\n        :rtype: int\n        \"\"\"\n        if len(p) == 3:\n            return (p[0] + p[1] + p[2])\n        else:\n            return (self.trianglePerimeter(p[0:3]) + self.trianglePerimeter(p[3:5]) + self.trianglePerimeter(p[5:]) + self.trianglePerimeter(p[:3]))\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.trianglePerimeter([3, 4, 5])\n    print s.trianglePerimeter([3, 4])\n    print s.trianglePerimeter([3, 3, 3])",
      -0.85791015625
    ],
    [
      "def find_perimeter(side_lengths):\n    \"\"\"\n    >>> find_perimeter([1, 2, 3])\n    6\n    >>> find_perimeter([1, 2, 3, 4])\n    10\n    >>> find_perimeter([1, 2, 3, 4, 5])\n    10\n    \"\"\"\n    return sum(side_lengths)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def triangle_perimeter(side_a, side_b, side_c):\n    return side_a + side_b + side_c\n\nprint triangle_perimeter(2,3,4)",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef perimeter(triangle):\n    \"\"\"\n    Calculate the perimeter of a triangle.\n\n    triangle: a triangle object.\n\n    Returns:\n        The perimeter of the triangle.\n    \"\"\"\n    a, b, c = triangle.a, triangle.b, triangle.c\n    return 2 * (a + b + c)\n\nif __name__ == '__main__':\n    triangle = Triangle(1, 2, 3)\n    print(perimeter(triangle))",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param {integer} side1, side2, side3\n    # @return {integer}\n    def calculate(self, side1, side2, side3):\n        return side1 + side2 + side3\n\nif __name__ == \"__main__\":\n    print Solution().calculate(3, 4, 5)",
      -0.85791015625
    ],
    [
      "\"\"\"\nFor example, given the following triangle,\n\n[[[2]]],\n\nthe function should return 5,\nnot 6.\n\"\"\"\n\ndef triangle_perimeter(triangle):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # return sum([row[0] for row in triangle])\n    return sum([row[0] + row[1] + row[2] for row in triangle])\n\nif __name__ == '__main__':\n    triangle = [[[2]]]\n    print triangle_perimeter(triangle)\n    triangle = [[[2, 2], [3, 4]], [[2, 3], [5, 6]]]\n    print triangle_perimeter(triangle)",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    s = a + b + c\n    return s * 2\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    a = int(input(\"input a: \"))\n    b = int(input(\"input b: \"))\n    c = int(input(\"input c: \"))\n    print(\"{} {} {} = {}\".format(a, b, c, triangle_perimeter(a, b, c)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def perimeter(triangle):\n    \"\"\"\n    triangle is a list of 3-tuples.\n    \"\"\"\n    a, b, c = triangle[0]\n    return a + b + c\n\ndef test_perimeter():\n    assert perimeter([(1,2,3), (1,2,1), (1,2,2)]) == 6\n\nif __name__ == '__main__':\n    test_perimeter()",
      -0.8583984375
    ],
    [
      "def triangle_perimeter(triangle):\n    \"\"\"\n    Input:\n        triangle - a list of integers representing the length of the sides of a triangle\n    Output:\n        The perimeter of the triangle.\n    Explanation:\n        The perimeter of a triangle is the sum of the lengths of its three sides.\n    \"\"\"\n    return sum(triangle)\n\n# Your TrianglePerimeter function should return the above correct value.\n\n\"\"\"\nTest Cases\n\"\"\"\n\n\"\"\"\nGiven\n[2, 1, 3]\n\nReturn\n6.0\n\"\"\"\n\nassert triangle_perimeter([2, 1, 3]) == 6\n\n\"\"\"\nGiven\n[1, 1, 1]\n\nReturn\n3.0\n\"\"\"\n\nassert triangle_perimeter([1, 1, 1]) == 3\n\n\"\"\"\nGiven\n[1, 1, 2, 2, 1]\n\nReturn\n8.0\n\"\"\"\n\nassert triangle_perimeter([1, 1, 2, 2, 1]) == 8",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef triangle_perimeter(side1, side2, side3):\n    \"\"\"\n    :type side1: int\n    :type side2: int\n    :type side3: int\n    :rtype: int\n    \"\"\"\n    a = side1 + side2 + side3\n    b = side1 * 2 + side2 * 2 + side3 * 2\n    c = side1 * 3 + side2 * 3 + side3 * 3\n    return math.sqrt(a * b - a * c + b * c)\n\n\nif __name__ == \"__main__\":\n    assert triangle_perimeter(3, 4, 5) == 10",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        points = sorted(points, key=lambda x: x[0])\n        perimeter = 0\n        for i in range(len(points) - 1):\n            p1 = points[i][0]\n            p2 = points[i + 1][0]\n            p3 = points[i + 2][0]\n            p = ((p1 + p2) * 2 + p3) / 2\n            perimeter += p\n        return perimeter\n\nif __name__ == \"__main__\":\n    points = [[1, 2], [1, 2], [1, 2]]\n    s = Solution()\n    print s.trianglePerimeter(points)",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\ndef getPerimeter(triangle):\n    \"\"\"\n    Given a triangle, return the perimeter.\n    \"\"\"\n    return sqrt(sum([(x + y + z) for (x, y, z) in triangle]))\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    triangle = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    print getPerimeter(triangle)\n    return 0\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def perimeter(side1, side2, side3):\n    \"\"\"\n    :type side1: int\n    :type side2: int\n    :type side3: int\n    :rtype: int\n    \"\"\"\n    return side1 + side2 + side3\n\ndef test_perimeter():\n    assert perimeter(3, 4, 5) == 10\n    assert perimeter(5, 10, 15) == 25\n    assert perimeter(3, 4, 6) == 9\n\nif __name__ == '__main__':\n    test_perimeter()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return points[0][0]\n        if len(points) == 2:\n            return max(points[0][0], points[1][0])\n        if len(points) == 3:\n            return max(points[0][0], points[1][0], points[2][0])\n        if len(points) == 4:\n            return max(points[0][0], points[1][0], points[2][0], points[3][0])\n        return (\n            points[0][0] +\n            points[1][0] +\n            points[2][0] +\n            points[3][0]\n        )",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"\n    Find the perimeter of a triangle.\n    \n    a, b and c are the sides of the triangle.\n    \n    Returns the perimeter of the triangle.\n    \"\"\"\n    return (a + b + c) / 2\n\n\ndef main():\n    \"\"\"\n    Write a program that calculates the perimeter of a triangle.\n    \"\"\"\n    # input: a, b and c\n    a, b, c = map(int, input().split())\n    perimeter = triangle_perimeter(a, b, c)\n    print('The perimeter of the triangle is', perimeter)\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: omi\n# @Date:   2014-08-10 21:45:47\n# @Last Modified by:   omi\n# @Last Modified time: 2015-08-17 14:08:32\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if len(points) == 0:\n            return []\n        perimeter = [0] * len(points)\n        for i in xrange(1, len(points)):\n            for j in xrange(0, i):\n                perimeter[i] += points[i][j] + points[j][i]\n        return perimeter",
      -0.85888671875
    ],
    [
      "from math import sqrt\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"\n    Calculate the perimeter of a triangle.\n\n    Args:\n        a (float): side of one vertex.\n        b (float): side of another vertex.\n        c (float): side of another vertex.\n\n    Returns:\n        float: The perimeter of the triangle.\n\n    Examples:\n        >>> triangle_perimeter(1, 2, 3)\n        6\n        >>> triangle_perimeter(2, 3, 4)\n        9\n        >>> triangle_perimeter(3, 4, 5)\n        12\n    \"\"\"\n    return sqrt(a + b + c)\n\nif __name__ == '__main__':\n    print(triangle_perimeter(1, 2, 3))\n    print(triangle_perimeter(2, 3, 4))\n    print(triangle_perimeter(3, 4, 5))",
      -0.85888671875
    ],
    [
      "def triangle_perimeter(side_a, side_b, side_c):\n    \"\"\"\n    :type side_a: int\n    :type side_b: int\n    :type side_c: int\n    :rtype: int\n    \"\"\"\n    return side_a + side_b + side_c\n\ndef test_triangle_perimeter():\n    assert triangle_perimeter(3, 4, 5) == 10\n    assert triangle_perimeter(6, 7, 8) == 22\n    assert triangle_perimeter(3, 4, 2) == 6\n    assert triangle_perimeter(0, 0, 0) == 0\n\nif __name__ == \"__main__\":\n    test_triangle_perimeter()",
      -0.85888671875
    ],
    [
      "import math\n\ndef get_perimeter(side1, side2, side3):\n    return math.sqrt((side1 + side2 + side3) ** 2)\n\ndef triangle_perimeter(side1, side2, side3):\n    return get_perimeter(side1, side2, side3) + get_perimeter(side1, side2, side3) - get_perimeter(side1, side2, side3)\n\nif __name__ == '__main__':\n    triangle_perimeter(1, 2, 3)",
      -0.85888671875
    ],
    [
      "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return str(self.x) + ',' + str(self.y)\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        if len(points) == 1:\n            return points[0].x\n\n        p1, p2, p3 = points[0], points[1], points[0]\n        for point in points[2:]:\n            p1, p2, p3 = p1, p2, point\n        return (p2.x - p1.x) * (p3.y - p2.y) + (p3.x - p1.x) * (p2.y - p1.y)",
      -0.85888671875
    ],
    [
      "# https://www.codeeval.com/open_challenges/63/\n\nimport math\n\ndef perimeter(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return 2*(a + b + c)\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Complete this function\n    a, b, c = map(int, input().split())\n    return perimeter(a, b, c)\n\nif __name__ == '__main__':\n    import sys\n    sys.stdin.readline()\n    answer = main()\n    print(answer)",
      -0.85888671875
    ],
    [
      "from math import sqrt\n\n\ndef get_perimeter(a, b, c):\n    \"\"\"\n    :param a: First side length of the triangle\n    :param b: Second side length of the triangle\n    :param c: Third side length of the triangle\n    :return: The perimeter of the triangle\n    \"\"\"\n    return 2 * (a + b + c)\n\n\ndef test_get_perimeter():\n    assert get_perimeter(2, 3, 4) == 7\n    assert get_perimeter(1, 1, 1) == 2\n\n\ndef main():\n    test_get_perimeter()\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "import math\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return (a + b + c) / 2\n\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    return (a + b + c) / 2\n\n\ndef main():\n    a = int(input('Enter the first side of the triangle: '))\n    b = int(input('Enter the second side of the triangle: '))\n    c = int(input('Enter the third side of the triangle: '))\n    print('The perimeter of the triangle is {}'.format(triangle_perimeter(a, b, c)))\n    print('The area of the triangle is {}'.format(triangle_area(a, b, c)))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def perimeter(triangle):\n    \"\"\"\n    Input:\n        triangle: a list of vertices of a triangle.\n    Output:\n        the perimeter of the triangle.\n    \"\"\"\n    return sum([p * q for p, q in zip(triangle[0], triangle[1:])])\n\nprint(perimeter([[0, 1], [1, 0], [1, 1]]))",
      -0.85888671875
    ],
    [
      "def get_perimeter(a,b,c):\n    return (a+b+c)\n\ndef main():\n    a,b,c = input().split(' ')\n    print(get_perimeter(int(a),int(b),int(c)))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def perimeter(side1, side2, side3):\n    \"\"\"\n    :type side1: int\n    :type side2: int\n    :type side3: int\n    :rtype: int\n    \"\"\"\n    return side1 + side2 + side3\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert perimeter(2, 3, 4) == 6, \"2 + 3 + 4\"\n    assert perimeter(1, 3, 4) == 3, \"1 + 3 + 4\"\n    assert perimeter(5, 3, 4) == 8, \"5 + 3 + 4\"\n    assert perimeter(1, 2, 3) == 6, \"1 + 2 + 3\"\n    assert perimeter(1, 2, 4) == 5, \"1 + 2 + 4\"\n    assert perimeter(2, 2, 4) == 4, \"2 + 2 + 4\"",
      -0.85888671875
    ],
    [
      "def triangle_perimeter(triangle):\n  \"\"\"\n  triangle: a tuple of integers, which are the side lengths of the triangle\n  returns: an integer, the perimeter of the triangle\n  \"\"\"\n  return (triangle[0] + triangle[1] + triangle[2])\n\n\ndef test_triangle_perimeter():\n  assert triangle_perimeter((4, 3, 5)) == 10\n\n\nif __name__ == \"__main__\":\n  test_triangle_perimeter()",
      -0.85888671875
    ],
    [
      "# Definition for a triangle.\nclass Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return '{} {} {}'.format(self.a, self.b, self.c)\n\n    def get_perimeter(self):\n        return self.a + self.b + self.c\n\n\n# Your Triangle object will be instantiated and called as such:\n# t = Triangle(a, b, c)\n# param_1 = t.get_perimeter()\n\nclass Solution:\n    def getPerimeter(self, triangle):\n        \"\"\"\n        :type triangle: Triangle\n        :rtype: int\n        \"\"\"\n        # Calculate the side of the triangle.\n        s = triangle.a + triangle.b + triangle.c\n        # Check for the case where triangle is a point.\n        if s == 0:\n            return 0\n        # Otherwise calculate the side of the triangle.\n        return s / 2",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def trianglePerimeter(self, vertices):\n        \"\"\"\n        :type vertices: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(vertices) < 3:\n            return 0\n        max = 0\n        for v in vertices:\n            max += v[0] + v[1] + v[2]\n        return max\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    vertices = [[1,2,3], [1,1,1], [1,3,4]]\n    print(sol.trianglePerimeter(vertices))",
      -0.85888671875
    ],
    [
      "# https://codility.com/demo/results/demoXRJvZ6/\n\ndef triangle_perimeter(a, b, c):\n    return a + b + c\n\ntriangle_perimeter(0, 0, 0)",
      -0.86083984375
    ],
    [
      "__author__ = 'Daniel'\n\n\ndef perimeter(triangle):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if triangle is None or len(triangle) < 3:\n        return 0\n    perimeter = 0\n    for i in range(len(triangle)):\n        for j in range(len(triangle[i])):\n            perimeter += abs(triangle[i][j])\n    return perimeter",
      -0.86083984375
    ],
    [
      "def triangle_perimeter(triangle):\n    \"\"\"\n    >>> triangle_perimeter((2, 3, 4))\n    7\n    >>> triangle_perimeter((1, 2, 3))\n    3\n    >>> triangle_perimeter((2, 1, 2))\n    2\n    \"\"\"\n    return triangle[0] + triangle[1] + triangle[2]",
      -0.86083984375
    ],
    [
      "# http://www.geeksforgeeks.org/triangle-perimeter/\n\ndef triangle_perimeter(l,b,r):\n    return 2*(l+b+r)\n\nif __name__ == \"__main__\":\n    print triangle_perimeter(4,3,2)",
      -0.86083984375
    ],
    [
      "def perimeter(triangle):\n    \"\"\"\n    triangle is a list of three lists\n    triangle[0] is the base\n    triangle[1] is the height\n    triangle[2] is the side length\n    \"\"\"\n    #print triangle\n    a = triangle[0][0]\n    b = triangle[1][0]\n    c = triangle[2][0]\n\n    d = a + b + c\n\n    return d\n\ndef main():\n    triangle = [[10, 2, 1], [2, 10, 5], [2, 1, 10]]\n    perimeter(triangle)\n\nif __name__ == '__main__':\n    main()",
      -1.142578125
    ],
    [
      "import math\n\n# https://stackoverflow.com/questions/13252817/how-to-calculate-the-perimeter-of-a-triangle\ndef perimeter(a, b, c):\n    \"\"\"\n    Calculates the perimeter of a triangle with the given sides.\n    \"\"\"\n    return math.sqrt(a ** 2 + b ** 2 + c ** 2)\n\n\n# https://stackoverflow.com/questions/16172525/how-to-calculate-the-perimeter-of-a-triangle-using-python\ndef perimeter(a, b, c):\n    \"\"\"\n    Calculates the perimeter of a triangle with the given sides.\n    \"\"\"\n    return ((a + b + c) / 2) * math.sqrt(a ** 2 + b ** 2 + c ** 2)\n\nif __name__ == '__main__':\n    assert perimeter(3, 4, 5) == 10\n    assert perimeter(5, 4, 3) == 10\n    assert perimeter(10, 4, 5) == 10\n    assert perimeter(10, 5, 4) == 10",
      -1.2578125
    ],
    [
      "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[int]\n        :rtype: int\n        \"\"\"\n        if len(points) < 3:\n            return 0\n        \n        s = 0\n        for i in range(len(points)):\n            s += points[i]\n            \n        for i in range(len(points) - 1):\n            s += points[i] + points[i + 1]\n        \n        return s",
      -1.7041015625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        return self.getPerimeter(points, 0, points[0][0])\n\n    def getPerimeter(self, points, index, p):\n        if index == len(points):\n            return p\n        return self.getPerimeter(points, index + 1, p + points[index][0])\n\n\nif __name__ == \"__main__\":\n    import sys\n    sys.exit(int(raw_input().strip()))",
      -1.880859375
    ],
    [
      "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.x, self.y)\n\n\nclass Solution(object):\n    def getPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        left, right = points[0], points[0]\n        for point in points[1:]:\n            left.x, left.y = left.x + point.x, left.y + point.y\n            right.x, right.y = right.x + point.x, right.y + point.y\n        return left.x + right.x\n\n\ndef main():\n    points = [\n        Point(0, 0),\n        Point(1, 1),\n        Point(2, 2)\n    ]\n    print Solution().getPerimeter(points)\n\nif __name__ == '__main__':\n    main()",
      -2.064453125
    ],
    [
      "import math\n\ndef find_perimeter(triangle):\n    \"\"\"\n    Find the perimeter of a triangle\n    \"\"\"\n    # Make sure triangle is a tuple\n    triangle = tuple(triangle)\n\n    # Make sure triangle is a valid triangle\n    if len(triangle)!= 3:\n        return 0\n\n    # Get the sides of the triangle\n    sides = triangle[0], triangle[1], triangle[2]\n\n    # Compute the perimeter\n    perimeter = 0\n    for side in sides:\n        perimeter += side\n\n    return perimeter\n\n\n# Test Cases\n\n# A triangle with side lengths 1, 3, and 4\ntriangle = (1, 3, 4)\n\n# A triangle with side lengths 5, 7, and 9\ntriangle = (5, 7, 9)\n\n# A triangle with side lengths 1, 1, and 1\ntriangle = (1, 1, 1)\n\n# A triangle with side lengths 0, 0, and 1\ntriangle = (0, 0, 1)\n\n# A triangle with side lengths 1, 1, and 1\ntriangle = (1, 1, 1)\n\n# A triangle with side lengths -1, -1, and -1\ntriangle = (-1, -1, -1)\n\n# A triangle with side lengths -1, -1, -1\ntriangle = (-1, -1, -1)\n\n# A triangle with side lengths -1, 1, -1\ntriangle = (-1, 1, -1)\n\n# A triangle with side lengths 1, -1, -1\ntriangle = (1, -1, -1)\n\n# A triangle with side lengths -1, -1, 1\ntriangle = (-1, -1, 1)\n\n# A triangle with side lengths 1, -1, 1\ntriangle = (1, -1, 1)\n\n# A triangle with side lengths -1, 1, 1\ntriangle = (-1, 1, 1)\n\n# A triangle with side lengths -1, 1, -1\ntriangle = (-1, 1, -1)\n\n# A triangle with side lengths 1, -1, -1\ntriangle = (1, -1, -1)\n\n# A triangle with side",
      -2.115234375
    ],
    [
      "\"\"\"\nInput:\n3\n4 2\n7 9 3\n\nOutput:\n24\n\"\"\"\n\n\ndef get_perimeter(triangle):\n    return sum(triangle[0] + triangle[1] + triangle[2])\n\n\"\"\"\nInput:\n3\n4 2\n7 9 3\n\nOutput:\n24\n\"\"\"\n\n\ndef get_perimeter_2(triangle):\n    return triangle[0] + triangle[1] + triangle[2]\n\n\"\"\"\nInput:\n2\n2\n\nOutput:\n4\n\"\"\"\n\n\ndef get_perimeter_3(triangle):\n    return triangle[0] + triangle[1]\n\n\"\"\"\nInput:\n2\n2\n\nOutput:\n4\n\"\"\"\n\n\ndef get_perimeter_4(triangle):\n    return triangle[0] + triangle[1] + triangle[2] + triangle[3]\n\n\n\"\"\"\nInput:\n3\n4 2\n7 9 3\n\nOutput:\n24\n\"\"\"\n\n\ndef get_perimeter_5(triangle):\n    return triangle[0] + triangle[1] + triangle[2] + triangle[3] + triangle[4]\n\n\"\"\"\nInput:\n1\n1\n\nOutput:\n2\n\"\"\"\n\n\ndef get_perimeter_6(triangle):\n    return triangle[0] + triangle[1] + triangle[2] + triangle[3] + triangle[4] + triangle[5]\n\n\"\"\"\nInput:\n1\n1\n\nOutput:\n2\n\"\"\"\n\n\ndef get_perimeter_7(triangle):\n    return triangle[0] + triangle[1] + triangle[2] + triangle[3] + triangle[4] + triangle[5] + triangle[6]\n\n\"\"\"\nInput:\n1\n1\n\nOutput:\n2\n\"\"\"\n\n\ndef get_perimeter_8(triangle):\n    return triangle[0] + triangle[1] + triangle[2] + triangle[3] + triangle[4] + triangle[5] + triangle[6] + triangle[7]\n\n\"\"\"\nInput:\n1\n1\n\nOutput:\n2\n\"\"\"\n\n\ndef get_perimeter_9(triangle):\n    return triangle[0] + triangle[1]",
      -2.75
    ],
    [
      "from math import sqrt\n\ndef triangle_perimeter(triangle):\n    \"\"\"\n    Find the perimeter of a triangle.\n    :param triangle: a list of three integers\n    :return: the perimeter of the triangle\n    \"\"\"\n\n    sides = [sqrt(triangle[0] + triangle[1] + triangle[2]) for triangle in triangle]\n    return sum(sides)\n\n\ndef main():\n    \"\"\"\n    Test cases for the function triangle_perimeter()\n    \"\"\"\n    assert triangle_perimeter([3, 4, 5]) == 10\n    assert triangle_perimeter([5, 10, 15]) == 30\n    assert triangle_perimeter([1, 2, 3]) == 6\n    assert triangle_perimeter([1, 1, 1]) == 3\n\n\nif __name__ == '__main__':\n    main()",
      -3.3828125
    ],
    [
      "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         \"\"\"\n#         :type a: int\n#         :type b: int\n#         :type c: int\n#         \"\"\"\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[int]\n        :rtype: int\n        \"\"\"\n        if len(points) == 0:\n            return 0\n        \n        if len(points) == 1:\n            return points[0]\n        \n        # \u524d\u9762\u7684\u4e09\u4e2a\u70b9\n        a, b, c = points[0], points[1], points[2]\n        \n        # \u540e\u9762\u7684\u4e09\u4e2a\u70b9\n        b1, b2, b3 = points[1], points[2], points[3]\n        \n        # \u6c42\u4e09\u89d2\u5f62\u7684\u957f\u5ea6\n        return max(a + b + c,\n                   max(b1 + b2 + b3,\n                       b2 + b3 + c),\n                   b3 + c + a)",
      -3.44921875
    ],
    [
      "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         \"\"\"\n#         :type a: int\n#         :type b: int\n#         :type c: int\n#         \"\"\"\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(points[0] + points[1] + points[2])\n\ndef main():\n    solution = Solution()\n    points = [[0, 1], [1, 0], [1, 1]]\n    print solution.trianglePerimeter(points)\n\nif __name__ == '__main__':\n    main()",
      -3.9453125
    ],
    [
      "#!/usr/bin/env python\n\nclass Solution:\n    def trianglePerimeter(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        return self.trianglePerimeter2(triangle)\n\n    def trianglePerimeter2(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not triangle:\n            return 0\n        else:\n            return sum([t[0]+t[1]+t[2] for t in triangle])",
      -4.26171875
    ],
    [
      "from math import sqrt\n\ndef get_perimeter(a,b,c):\n\treturn (a + b + c) * 2\n\ndef test_get_perimeter():\n\tassert get_perimeter(1,2,3) == 6\n\tassert get_perimeter(5,6,7) == 12\n\tassert get_perimeter(9,10,11) == 22\n\ndef get_area(a,b,c):\n\treturn sqrt(a*b + b*c + c*a)\n\ndef test_get_area():\n\tassert get_area(1,2,3) == 1\n\tassert get_area(5,6,7) == 9\n\tassert get_area(9,10,11) == 22\n\ndef main():\n\ttest_get_perimeter()\n\ttest_get_area()\n\nif __name__ == \"__main__\":\n\tmain()",
      -4.359375
    ],
    [
      "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         \"\"\"\n#         :type a: int\n#         :type b: int\n#         :type c: int\n#         \"\"\"\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[int]\n        :rtype: int\n        \"\"\"\n        # Two cases:\n        # 1. If the points are in the same row, the perimeter is the sum of the two sides.\n        # 2. Otherwise, the perimeter is the sum of the three sides.\n        # In either case, we can simply add the sum of the two sides and three sides.\n        # Note that the sum of the three sides is the same as the perimeter of a triangle.\n        # We can simply calculate the perimeter of a triangle by summing the three sides.\n        # Time complexity: O(n^2)\n        # Space complexity: O(1)\n        if len(points) < 3:\n            return 0\n        sum_of_two_sides = 0\n        sum_of_three_sides = 0\n        for i in range(1, len(points)):\n            sum_of_two_sides += points[i - 1] + points[i]\n            sum_of_three_sides += points[i - 1] + points[i] + points[i + 1]\n        return sum_of_two_sides + sum_of_three_sides\n\n\nif __name__ == '__main__':\n    points = [4, 2, 6, 6, 2, 4]\n    print Solution().trianglePerimeter(points)",
      -4.4453125
    ],
    [
      "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return 'Point({})'.format(self)\n\n    def __str__(self):\n        return '({}, {})'.format(self.a, self.b)\n\n\nclass Triangle:\n    def __init__(self, p1, p2, p3):\n        self.p1 = p1\n        self.p2 = p2\n        self.p3 = p3\n\n    def __repr__(self):\n        return 'Triangle({}, {}, {})'.format(self.p1, self.p2, self.p3)\n\n    def __str__(self):\n        return '({}, {}, {})'.format(self.p1, self.p2, self.p3)\n\n    def perimeter(self):\n        return self.p1.a + self.p2.a + self.p3.a\n\n\ndef triangle_perimeter(p1, p2, p3):\n    \"\"\"\n    :type p1: Point\n    :type p2: Point\n    :type p3: Point\n    :rtype: int\n    \"\"\"\n    return p1.a + p2.a + p3.a\n\n\ndef triangle_area(p1, p2, p3):\n    \"\"\"\n    :type p1: Point\n    :type p2: Point\n    :type p3: Point\n    :rtype: float\n    \"\"\"\n    return 0.5 * (p1.a + p2.a + p3.a)\n\n\ndef test_triangle_perimeter():\n    assert triangle_perimeter(Point(2, 3), Point(3, 4), Point(4, 5)) == 6\n    assert triangle_perimeter(Point(1, 3), Point(3, 4), Point(4, 5)) == 4\n    assert triangle_perimeter(Point(2, 3), Point(3, 4), Point(4, 5)) == 6\n\n\ndef test_triangle_area():",
      -4.6640625
    ],
    [
      "# Definition for a triangle.\nclass Triangle(object):\n    def __init__(self, a, b, c):\n        \"\"\"\n        a: length of side 1\n        b: length of side 2\n        c: length of side 3\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return \"a={}, b={}, c={}\".format(self.a, self.b, self.c)\n\n    def get_area(self):\n        \"\"\"\n        Returns the area of a triangle.\n\n        Example:\n        >>> t = Triangle(3, 4, 5)\n        >>> t.get_area()\n        12.0\n        \"\"\"\n        return self.a + self.b + self.c\n\n    def get_perimeter(self):\n        \"\"\"\n        Returns the perimeter of a triangle.\n\n        Example:\n        >>> t = Triangle(3, 4, 5)\n        >>> t.get_perimeter()\n        7.0\n        \"\"\"\n        return (self.a + self.b + self.c) / 2.0\n\n# Your Triangle object will be instantiated and called as such:\n# t = Triangle(a, b, c)\n# param_1 = t.get_area()\n# param_2 = t.get_perimeter()\n\ntriangle = Triangle(3, 4, 5)\nprint(triangle.get_area())\nprint(triangle.get_perimeter())",
      -4.6796875
    ],
    [
      "# https://www.hackerrank.com/challenges/triangle-perimeter/problem\n\n# Iterate through the triangle\n# For each edge, add the length to the perimeter\n# Then, add the length of the last edge to the perimeter.\n\n# https://www.hackerrank.com/challenges/triangle-perimeter/submissions/code/30677028\n\ndef triangle_perimeter(triangle):\n    # Calculate the perimeter of the triangle\n    # Iterate through the triangle\n    # For each edge, add the length to the perimeter\n    # Then, add the length of the last edge to the perimeter.\n    # Return the perimeter\n    # The perimeter is the sum of the lengths of the three edges\n    # The last edge is the length of the side opposite the last vertex\n    # The first edge is the length of the side opposite the first vertex\n    # The last edge is the length of the side opposite the first vertex\n    # The first edge is the length of the side opposite the second vertex\n    # The last edge is the length of the side opposite the second vertex\n    # The first edge is the length of the side opposite the third vertex\n    # The last edge is the length of the side opposite the third vertex\n    # The first edge is the length of the side opposite the fourth vertex\n    # The last edge is the length of the side opposite the fourth vertex\n    # The first edge is the length of the side opposite the fifth vertex\n    # The last edge is the length of the side opposite the fifth vertex\n    # The first edge is the length of the side opposite the sixth vertex\n    # The last edge is the length of the side opposite the sixth vertex\n    # The first edge is the length of the side opposite the seventh vertex\n    # The last edge is the length of the side opposite the seventh vertex\n    # The first edge is the length of the side opposite the eighth vertex\n    # The last edge is the length of the side opposite the eighth vertex\n    # The first edge is the length of the side opposite the ninth vertex\n    # The last edge is the length of the side opposite the ninth vertex\n    # The first edge is the length of the side opposite the tenth vertex\n    # The last edge is the length of the side opposite the tenth vertex\n    # The first edge is the length",
      -4.70703125
    ],
    [
      "import math\n\ndef triangle_perimeter(triangle):\n    \"\"\"\n    triangle: the perimeter of the triangle\n    returns: the perimeter of the triangle\n    \"\"\"\n    a,b,c = triangle\n    return 2 * (a + b + c)\n\ndef main():\n    \"\"\"\n    main: tests the triangle_perimeter function\n    \"\"\"\n    assert triangle_perimeter((10,20,30)) == 120\n    assert triangle_perimeter((20,10,30)) == 120\n    assert triangle_perimeter((30,10,20)) == 120\n\nif __name__ == '__main__':\n    main()",
      -5.05078125
    ],
    [
      "class Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if len(points) == 1:\n            return points[0][0] + points[0][1] + points[0][2]\n        if len(points) == 2:\n            return points[0][0] + points[1][1] + points[1][2]\n        if len(points) == 3:\n            a = points[0][0] + points[0][1] + points[0][2]\n            b = points[1][0] + points[1][1] + points[1][2]\n            c = points[2][0] + points[2][1] + points[2][2]\n            return max(a, max(b, c))\n        \n        for i in xrange(len(points)):\n            for j in xrange(i+1, len(points)):\n                for k in xrange(j+1, len(points)):\n                    a = points[i][0] + points[j][1] + points[k][2]\n                    b = points[i][1] + points[j][2] + points[k][0]\n                    c = points[i][2] + points[j][0] + points[k][1]\n                    return max(a, max(b, c))",
      -5.1875
    ],
    [
      "import math\n\n\ndef perimeter(triangle):\n    \"\"\"\n    Calculate the perimeter of a triangle.\n    \"\"\"\n\n    sides = [math.sqrt(p * p + q * q) for p in triangle[0]\n             for q in triangle[1]]\n    return sum(sides)\n\n\ndef test_perimeter():\n    \"\"\"\n    Test the perimeter function.\n    \"\"\"\n\n    assert perimeter([1, 1, 1]) == 2\n    assert perimeter([1, 1, 2]) == 3\n    assert perimeter([1, 2, 3]) == 6\n    assert perimeter([1, 2, 3, 4]) == 10\n    assert perimeter([1, 2, 3, 4, 5]) == 15\n    assert perimeter([1, 2, 3, 4, 5, 6]) == 20\n    assert perimeter([1, 2, 3, 4, 5, 6, 7]) == 27\n    assert perimeter([1, 2, 3, 4, 5, 6, 7, 8]) == 34\n    assert perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 41\n\n\ndef main():\n    \"\"\"\n    Main.\n    \"\"\"\n\n    test_perimeter()\n\n\nif __name__ == '__main__':\n    main()",
      -5.24609375
    ],
    [
      "import math\n\ndef get_perimeter(a, b, c):\n    return (a + b + c) / 2\n\ndef get_perimeter_2(a, b, c):\n    return (a + b + c) / 2\n\ndef get_perimeter_3(a, b, c):\n    return (a + b + c + a * b + b * c + c * a) / 6\n\ndef get_perimeter_4(a, b, c, d):\n    return (a + b + c + d) / 2\n\ndef get_perimeter_5(a, b, c, d, e):\n    return (a + b + c + d + e) / 2\n\ndef get_perimeter_6(a, b, c, d, e, f):\n    return (a + b + c + d + e + f) / 2\n\ndef get_perimeter_7(a, b, c, d, e, f, g):\n    return (a + b + c + d + e + f + g) / 2\n\ndef get_perimeter_8(a, b, c, d, e, f, g, h):\n    return (a + b + c + d + e + f + g + h) / 2\n\ndef get_perimeter_9(a, b, c, d, e, f, g, h, i):\n    return (a + b + c + d + e + f + g + h + i) / 2\n\ndef get_perimeter_10(a, b, c, d, e, f, g, h, i, j):\n    return (a + b + c + d + e + f + g + h + i + j) / 2\n\ndef get_perimeter_11(a, b, c, d, e, f, g, h, i, j, k):\n    return (a + b + c + d + e + f + g + h + i + j + k) / 2\n\ndef get_perimeter_12(a, b, c, d, e, f, g, h, i, j, k, l):\n    return (a + b + c + d + e",
      -6.34765625
    ],
    [
      "def triangle_perimeter(a,b,c):\n    return 2*(a + b + c)\n\ndef triangle_area(a,b,c):\n    return (a + b + c) / 2\n\nif __name__ == '__main__':\n    assert triangle_perimeter(0,0,0) == 0, \"0\"\n    assert triangle_perimeter(3,4,5) == 10, \"3 4 5\"\n    assert triangle_perimeter(4,1,3) == 6, \"4 1 3\"\n    assert triangle_perimeter(3,4,3) == 9, \"3 4 3\"\n    assert triangle_perimeter(5,5,5) == 20, \"5 5 5\"\n    assert triangle_perimeter(3,3,3) == 9, \"3 3 3\"\n    assert triangle_perimeter(5,5,5) == 20, \"5 5 5\"\n    assert triangle_perimeter(5,5,5) == 20, \"5 5 5\"\n    assert triangle_perimeter(4,3,5) == 9, \"4 3 5\"\n    assert triangle_perimeter(3,4,5) == 9, \"3 4 5\"\n    assert triangle_perimeter(5,5,5) == 20, \"5 5 5\"\n    assert triangle_perimeter(3,3,3) == 9, \"3 3 3\"\n    assert triangle_perimeter(5,5,5) == 20, \"5 5 5\"\n    assert triangle_perimeter(5,5,5) == 20, \"5 5 5\"\n    assert triangle_perimeter(4,3,5) == 9, \"4 3 5\"\n    assert triangle_perimeter(3,4,5) == 9, \"3 4 5\"\n    assert triangle_perimeter(5,5,5) == 20, \"5 5 5\"\n    assert triangle_perimeter(3,3,3) == 9, \"3 3 3\"\n    assert triangle_perimeter(5,5,5) == 20, \"5 5 5\"\n    assert triangle_perimeter(5,5,5) == 20, \"5 5 5\"\n    assert triangle_perimeter(4,3,",
      -7.078125
    ],
    [
      "from collections import namedtuple\n\nPt = namedtuple(\"Pt\", \"x y\")\n\ndef perimeter(pts):\n    \"\"\"\n    Return the perimeter of a triangle given as a list of points.\n    \"\"\"\n    # get the x and y coordinates of the points\n    x_coords = [pt.x for pt in pts]\n    y_coords = [pt.y for pt in pts]\n    # get the sum of the x coordinates\n    sum_x = sum(x_coords)\n    # get the sum of the y coordinates\n    sum_y = sum(y_coords)\n    # get the difference between the sum of the x coordinates\n    diff_x = sum_x - x_coords[0]\n    # get the difference between the sum of the y coordinates\n    diff_y = sum_y - y_coords[0]\n    # get the difference between the sum of the x coordinates and the sum of the y coordinates\n    sum_diff_x = sum_x - sum_y\n    # get the difference between the sum of the x coordinates and the sum of the y coordinates\n    sum_diff_y = sum_x - sum_y\n    # get the length of the side of the triangle\n    side_length = diff_x + diff_y\n    # get the length of the side of the triangle\n    side_length = sum_diff_x + sum_diff_y\n    # get the perimeter of the triangle\n    perimeter = side_length * 2\n    return perimeter\n\nif __name__ == \"__main__\":\n    pts = [Pt(1, 1), Pt(2, 2), Pt(3, 3)]\n    print(perimeter(pts))",
      -7.11328125
    ],
    [
      "def perimeter(triangle):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # TODO:\n    # 1. calculate the perimeter of a triangle\n    # 2. find the length of the side of a triangle\n    # 3. find the length of the side of a triangle\n    # 4. find the length of the side of a triangle\n    # 5. find the length of the side of a triangle\n    # 6. find the length of the side of a triangle\n    # 7. find the length of the side of a triangle\n    # 8. find the length of the side of a triangle\n    # 9. find the length of the side of a triangle\n    # 10. find the length of the side of a triangle\n    # 11. find the length of the side of a triangle\n    # 12. find the length of the side of a triangle\n    # 13. find the length of the side of a triangle\n    # 14. find the length of the side of a triangle\n    # 15. find the length of the side of a triangle\n    # 16. find the length of the side of a triangle\n    # 17. find the length of the side of a triangle\n    # 18. find the length of the side of a triangle\n    # 19. find the length of the side of a triangle\n    # 20. find the length of the side of a triangle\n    # 21. find the length of the side of a triangle\n    # 22. find the length of the side of a triangle\n    # 23. find the length of the side of a triangle\n    # 24. find the length of the side of a triangle\n    # 25. find the length of the side of a triangle\n    # 26. find the length of the side of a triangle\n    # 27. find the length of the side of a triangle\n    # 28. find the length of the side of a triangle\n    # 29. find the length of the side of a triangle\n    # 30. find the length of the side of a triangle\n    # 31. find the length of the side of a triangle\n    # 32. find the length of the side of a triangle\n    # 33. find the length of the side of a triangle\n    # 34. find the length of the side of a triangle",
      -7.8046875
    ],
    [
      "def find_perimeter(triangle):\n    \"\"\"\n    :type triangle: list[int]\n    :rtype: int\n    \"\"\"\n    return ((triangle[0] + triangle[1] + triangle[2]) / 2) * 3\n\ndef main():\n    \"\"\"\n    Sample Inputs\n    [4, 5, 6]\n    [1, 1, 1]\n    [10, 10, 10]\n    [4, 4, 4]\n    Sample Outputs\n    [15]\n    [24]\n    [120]\n    [40]\n    \"\"\"\n    assert(find_perimeter([4, 5, 6]) == 15)\n    assert(find_perimeter([1, 1, 1]) == 24)\n    assert(find_perimeter([10, 10, 10]) == 120)\n    assert(find_perimeter([4, 4, 4]) == 40)\n\nif __name__ == '__main__':\n    main()",
      -7.83203125
    ],
    [
      "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return \"(%s, %s, %s)\" % (self.a, self.b, self.c)\n\nclass Solution(object):\n    def triangleArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        return sum([p1.a + p2.b + p3.c for p1, p2, p3 in points]) / 2\n\n\nif __name__ == \"__main__\":\n    points = [\n        Point(1, 2, 3),\n        Point(4, 5, 6),\n        Point(7, 8, 9)\n    ]\n    print Solution().triangleArea(points)\n    print Solution().triangleArea([])",
      -8.171875
    ],
    [
      "from math import sqrt\n\n\ndef perimeter(triangle):\n    \"\"\"\n    :param triangle: a list of the three vertices of a triangle\n    :return: the perimeter of the triangle\n    \"\"\"\n    a, b, c = triangle\n    return a + b + c\n\n\ndef test_perimeter():\n    assert perimeter([1, 2, 3]) == 3 + 2 + 1\n    assert perimeter([1, 1, 1]) == 2\n\n\ndef test_perimeter_2():\n    assert perimeter([1, 2, 3, 4, 5]) == 5 + 4 + 3 + 2 + 1\n\n\ndef test_perimeter_3():\n    assert perimeter([1, 2, 3, 4, 5, 6, 7]) == 7 + 6 + 5 + 4 + 3 + 2 + 1\n\n\ndef test_perimeter_4():\n    assert perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n\n\ndef test_perimeter_5():\n    assert perimeter([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 4\n\n\ndef test_perimeter_6():\n    assert perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n\n\ndef test_perimeter_7():\n    assert perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n\n\ndef test_perimeter_8():\n    assert perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 12 + 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n\n\ndef test_perimeter_9():\n    assert perimeter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 14 + 13 + 12 + 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n\n\ndef test_perimeter",
      -8.265625
    ],
    [
      "import math\n\ndef perimeter(triangle):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :rtype: int\n    \"\"\"\n    a, b, c = triangle\n    return 2 * (a + b + c)\n\ndef test_perimeter():\n    assert perimeter([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30\n\ndef test_perimeter2():\n    assert perimeter([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 6\n\ndef test_perimeter3():\n    assert perimeter([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30\n\ndef test_perimeter4():\n    assert perimeter([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 6\n\ndef test_perimeter5():\n    assert perimeter([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30\n\ndef test_perimeter6():\n    assert perimeter([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 6\n\ndef test_perimeter7():\n    assert perimeter([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 6\n\ndef test_perimeter8():\n    assert perimeter([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30\n\ndef test_perimeter9():\n    assert perimeter([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 6\n\ndef test_perimeter10():\n    assert perimeter([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30\n\ndef test_perimeter11():\n    assert perimeter([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 6\n\ndef test_perimeter12():\n    assert perimeter([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30",
      -8.6328125
    ],
    [
      "def triangle_perimeter(side1, side2, side3):\n    \"\"\"\n    >>> triangle_perimeter(1, 2, 3)\n    6\n    >>> triangle_perimeter(4, 5, 6)\n    10\n    \"\"\"\n    return side1 + side2 + side3\n\ndef triangle_perimeter_recursive(side1, side2, side3):\n    if side1 + side2 + side3 == 0:\n        return 0\n    else:\n        return triangle_perimeter_recursive(side1, side2, side3 - side1 - side2) + triangle_perimeter_recursive(side1, side2, side3 - side1 - side2)\n\ndef triangle_perimeter_iterative(side1, side2, side3):\n    \"\"\"\n    >>> triangle_perimeter_iterative(1, 2, 3)\n    6\n    >>> triangle_perimeter_iterative(4, 5, 6)\n    10\n    \"\"\"\n    return triangle_perimeter_iterative(side1, side2, side3) + triangle_perimeter_iterative(side1, side2, side3 - side1 - side2)\n\ndef main():\n    print triangle_perimeter(1, 2, 3)\n    print triangle_perimeter(4, 5, 6)\n\nif __name__ == '__main__':\n    main()",
      -10.2421875
    ],
    [
      "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(points)\n        if n == 0:\n            return 0\n        if n == 1:\n            return points[0]\n        if n == 2:\n            return max(points[0], points[1])\n        a = points[0]\n        b = points[1]\n        c = points[2]\n        p = points[0] + points[1] + points[2]\n        # p = max(p, a + b + c)\n        # p = max(p, max(a, b), max(a, c), max(b, c))\n        # p = max(p, max(a, b), max(a, c), max(b, c))\n        p = max(p, max(a, b), max(a, c), max(b, c))\n        # p = max(p, max(a, b), max(a, c))\n        # p = max(p, max(a, b))\n        return p",
      -10.75
    ],
    [
      "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"(%d, %d)\" % (self.x, self.y)\n\n\nclass Solution(object):\n    def __init__(self):\n        self.cnt = 0\n\n    def threeSum(self, num):\n        \"\"\"\n        :type num: List[int]\n        :rtype: int\n        \"\"\"\n        self.cnt = 0\n        n = len(num)\n        if n < 3:\n            return 0\n        nums = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                k = j + 1\n                while k < n:\n                    a = num[i] + num[j] + num[k]\n                    if a in nums:\n                        break\n                    else:\n                        nums.append(a)\n                    k += 1\n        return self.cnt\n\n\ndef test(s):\n    return s.threeSum([-1, 0, 1, 2, -1, -4])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print test(s)",
      -10.9765625
    ],
    [
      "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         \"\"\"\n#         a: the length of one side of the triangle\n#         b: the length of the other side of the triangle\n#         c: the length of the third side of the triangle\n#         \"\"\"\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def triangleArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: float\n        \"\"\"\n        # https://discuss.leetcode.com/topic/36983/java-python-solution-o-n-log-n-time/2\n        # 1.  count the number of points in the triangle\n        # 2.  get the sum of all the points' x, y\n        # 3.  get the sum of all the points' x, y, z\n        # 4.  calculate the area\n        # 5.  return the area\n        # 6.  count the number of points in the triangle\n        # 7.  get the sum of all the points' x, y\n        # 8.  get the sum of all the points' x, y, z\n        # 9.  calculate the area\n        # 10. return the area\n        # 11. count the number of points in the triangle\n        # 12. get the sum of all the points' x, y\n        # 13. get the sum of all the points' x, y, z\n        # 14. calculate the area\n        # 15. return the area\n        # 16. count the number of points in the triangle\n        # 17. get the sum of all the points' x, y\n        # 18. get the sum of all the points' x, y, z\n        # 19. calculate the area\n        # 20. return the area\n        # 21. count the number of points in the triangle\n        # 22. get the sum of all the points' x, y\n        # 23. get the sum of all the points' x, y, z\n        # 24. calculate the area\n        # 25. return the area\n        #",
      -11.0625
    ],
    [
      "# Definition for a triangle.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\nclass Solution:\n    # @param triangle, a list of Point\n    # @return an integer\n    def triangleArea(self, triangle):\n        if len(triangle) == 0:\n            return 0\n        s = triangle[0]\n        for i in range(1, len(triangle)):\n            s += triangle[i] - triangle[i-1]\n        return s/2\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.triangleArea([Point(1,1,1), Point(3,5,1), Point(1,1,1)]) == 6\n    assert s.triangleArea([Point(1,1,1), Point(1,1,1), Point(1,1,1)]) == 3\n    assert s.triangleArea([Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1)]) == 4\n    assert s.triangleArea([Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1)]) == 4\n    assert s.triangleArea([Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1)]) == 4\n    assert s.triangleArea([Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1)]) == 4\n    assert s.triangleArea([Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,1,1), Point(1,",
      -11.171875
    ],
    [
      "# https://www.hackerrank.com/challenges/triangle-perimeter/problem\n\ndef triangle_perimeter(triangle):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # The triangle perimeter is the sum of the lengths of the sides\n    # of a triangle.\n    # We can get the lengths of the sides by adding\n    # the lengths of the sides of each of the three sides.\n    # The result is a list of three numbers.\n    # The sum of the three sides of a triangle is the perimeter.\n\n    # TODO:\n    # Use the list of three sides to calculate the perimeter.\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n\n    # TODO:\n    # Use the list of three sides to calculate the perimeter.\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n\n    # TODO:\n    # Use the list of three sides to calculate the perimeter.\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n\n    # TODO:\n    # Use the list of three sides to calculate the perimeter.\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n\n    # TODO:\n    # Use the list of three sides to calculate the perimeter.\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n    # Use the formula: perimeter = side1 + side2 + side3\n    return",
      -11.1796875
    ],
    [
      "# Definition for a point.\n# class Point:\n#     def __init__(self, a=0, b=0, c=0):\n#         self.x = a\n#         self.y = b\n#         self.z = c\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for p in points:\n            res += p.x\n            res += p.y\n        return res\n\nclass Point:\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return str(self.x) +'' + str(self.y) +'' + str(self.z)\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        res = 0\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                res += points[i].x + points[j].x\n                res += points[i].y + points[j].y\n                res += points[i].z + points[j].z\n        return res\n\nif __name__ == '__main__':\n    a = [Point(1,2,3),Point(2,3,4),Point(3,4,5)]\n    print Solution().trianglePerimeter(a)\n    b = [Point(1,2),Point(2,3),Point(3,4)]\n    print Solution().trianglePerimeter(b)\n    c = [Point(1,2,3),Point(2,3,4),Point(3,4,5)]\n    print Solution().trianglePerimeter(c)\n    d = [Point(1,2),Point(2,3),Point(3,4)]\n    print Solution().trianglePerimeter(d)",
      -12.125
    ],
    [
      "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point(%d, %d)\" % (self.x, self.y)\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n\n        # sort the points by the x coordinate\n        points = sorted(points, key=lambda p: p.x)\n\n        # calculate the perimeter of the triangle\n        a = points[0].x\n        b = points[1].x\n        c = points[2].x\n        perimeter = (a + b + c) / 2\n        for point in points[3:]:\n            a = b\n            b = c\n            c = point.x\n            perimeter += (a + b + c) / 2\n        return perimeter",
      -12.515625
    ],
    [
      "def triangle_perimeter(triangle):\n    \"\"\"\n    Input:\n    triangle = [ [a,b,c], [d,e,f], [g,h,i] ]\n    Output:\n    the perimeter of the triangle\n    \"\"\"\n    a, b, c = triangle[0]\n    d, e, f = triangle[1]\n    g, h, i = triangle[2]\n\n    return a + b + c + d + e + f + g + h + i\n\n\ndef test():\n    assert triangle_perimeter([[1,1,1],[1,1,1],[1,1,1]]) == 2\n    assert triangle_perimeter([[1,2,3],[4,5,6],[7,8,9]]) == 10\n    assert triangle_perimeter([[1,2,3],[4,5,6],[7,8,9],[1,2,3]]) == 8\n    assert triangle_perimeter([[1,2,3],[4,5,6],[7,8,9],[1,2,3],[1,2,3]]) == 8\n    assert triangle_perimeter([[1,2,3],[4,5,6],[7,8,9],[1,2,3],[1,2,3],[1,2,3]]) == 8\n    assert triangle_perimeter([[1,2,3],[4,5,6],[7,8,9],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]) == 8\n\nif __name__ == '__main__':\n    test()",
      -12.8203125
    ],
    [
      "from math import sqrt\n\n# Returns the perimeter of a triangle\ndef perimeter(triangle):\n    # The triangle is a list of 2 lists\n    # Each list is a row of the triangle\n    triangle = [\n        [1, 1],\n        [1, 2],\n        [2, 2],\n        [3, 1],\n        [3, 2],\n        [2, 3]\n    ]\n\n    # Sums the area of each row\n    area = sum([sqrt(p * q) for p, q in triangle])\n\n    # Return the perimeter\n    return area\n\n# Unit test\nassert(perimeter([[1, 1], [1, 2], [2, 2], [3, 1], [3, 2], [2, 3]]) == 6)",
      -12.9453125
    ],
    [
      "# Definition for a triangle.\n# class Triangle(object):\n#     def __init__(self, a, b, c):\n#         self.a = a\n#         self.b = b\n#         self.c = c\n\nclass Solution(object):\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        l = len(points)\n        if l == 1:\n            return points[0][0]\n        if l == 2:\n            return points[0][0] + points[1][1]\n        for i in xrange(l-2):\n            if points[i+1][0] + points[i+2][0] == points[i][0]:\n                return points[i+1][0] + points[i+2][0] + points[i][0]\n            if points[i+1][0] + points[i+2][0] == points[i][1]:\n                return points[i+1][1] + points[i+2][1] + points[i][1]\n            if points[i+1][1] + points[i+2][1] == points[i][0]:\n                return points[i+1][0] + points[i+2][0] + points[i][0]\n            if points[i+1][1] + points[i+2][1] == points[i][1]:\n                return points[i+1][1] + points[i+2][1] + points[i][1]\n        return 0\n\ndef test():\n    points = [[1, 2], [2, 3], [3, 4]]\n    print Solution().trianglePerimeter(points)\n\nif __name__ == '__main__':\n    test()",
      -13.453125
    ],
    [
      "# Definition for a point.\n# class Point:\n#     def __init__(self, a=0, b=0, c=0):\n#         self.x = a\n#         self.y = b\n#         self.z = c\n\nclass Solution:\n    # @param {Point[]} points\n    # @return {integer}\n    def computeArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) < 3:\n            return 0\n        \n        # A, B, C are the points of a triangle\n        A = points[0]\n        B = points[1]\n        C = points[2]\n        \n        # Get the sides of the triangle\n        sides = [A.x - B.x, B.y - A.y, C.x - B.x, B.y - C.y, C.x - A.x, A.y - C.y]\n        \n        # Get the area of the triangle\n        area = 0\n        for side in sides:\n            area += side\n        \n        return area",
      -14.828125
    ],
    [
      "__author__ = 'Libao Jin'\n__date__ = 'December 23, 2015'\n\nclass Solution:\n    # @param triangle, a list of lists of integers\n    # @return an integer\n    def trianglePerimeter(self, triangle):\n        if triangle is None or triangle == [] or triangle == [None]:\n            return 0\n        l = len(triangle)\n        if l == 1:\n            return triangle[0][0] + triangle[0][1] + triangle[0][2]\n        elif l == 2:\n            return triangle[0][0] + triangle[1][1] + triangle[0][2]\n        else:\n            p1 = self.trianglePerimeter(triangle[:l/2])\n            p2 = self.trianglePerimeter(triangle[:l/2]) + triangle[:l/2][0]\n            p3 = self.trianglePerimeter(triangle[:l/2]) + triangle[:l/2][1]\n            p4 = self.trianglePerimeter(triangle[:l/2]) + triangle[:l/2][2]\n            return min(p1, p2, p3, p4)\n\nif __name__ == '__main__':\n    s = Solution()\n    l = [[1,2,3],[4,5,6]]\n    print s.trianglePerimeter(l)\n    l = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n    print s.trianglePerimeter(l)",
      -15.515625
    ],
    [
      "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return \"Point(\" + str(self.a) + \",\" + str(self.b) + \",\" + str(self.c) + \")\"\n\n\nclass Solution:\n    def trianglePerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) < 3:\n            return 0\n        perimeter = 0\n        for i in range(len(points)):\n            p1 = points[i]\n            for j in range(i + 1, len(points)):\n                p2 = points[j]\n                perimeter += (p1.a + p2.a + p2.b)\n        return perimeter\n\n\nif __name__ == \"__main__\":\n    points = [Point(0, 0, 0), Point(0, 1, 0), Point(0, 0, 1)]\n    print(Solution().trianglePerimeter(points))",
      -16.984375
    ],
    [
      "# Definition for a point.\nclass Point(object):\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return 'Point(%s, %s, %s)' % (self.a, self.b, self.c)\n\n\nclass Solution(object):\n    def compute(self, p0, p1, p2):\n        \"\"\"\n        :type p0: Point\n        :type p1: Point\n        :type p2: Point\n        :rtype: int\n        \"\"\"\n        # p1.a + p2.a - p0.a\n        # p1.b + p2.b - p0.b\n        # p1.c + p2.c - p0.c\n        # p1.a + p2.b - p0.b\n        # p1.b + p2.c - p0.c\n        # p1.c + p2.a - p0.a\n        # p1.a + p2.b - p0.b\n        # p1.b + p2.c - p0.c\n        # p1.c + p2.a - p0.a\n        # p1.a + p2.c - p0.b\n        # p1.b + p2.a - p0.c\n        # p1.c + p2.b - p0.a\n        # p1.a + p2.c - p0.b\n        # p1.b + p2.c - p0.c\n        # p1.c + p2.a - p0.a\n        return abs(p1.a + p2.b - p0.b - p1.b + p2.c - p0.c + p1.c - p0.a + p2.a - p0.b + p1.c - p0.c + p2.a - p0.c)\n\n\nif __name__ == '__main__':\n    p0 = Point(1, 1, 1)\n    p",
      -17.15625
    ],
    [
      "\"\"\"\nExample 1:\n\nInput: vertices = [[2,0],[1,1],[2,2]]\nOutput: 5\nExplanation:\nThe perimeter is equal to (2*1.5 + 1.5*2 + 2*2) = 7.5\n\nExample 2:\n\nInput: vertices = [[1,1],[2,2],[3,2]]\nOutput: 4\nExplanation:\nThe perimeter is equal to (1.5*2.5 + 2.5*2 + 2.5*3) = 8.5\n\"\"\"\n\nclass Solution(object):\n    def trianglePerimeter(self, vertices):\n        \"\"\"\n        :type vertices: List[List[int]]\n        :rtype: int\n        \"\"\"\n        # write your code here\n        if len(vertices) == 0:\n            return 0\n\n        # write your code here\n        if len(vertices) == 1:\n            return vertices[0][0] + vertices[0][1]\n\n        # write your code here\n        if len(vertices) == 2:\n            return vertices[0][0] + vertices[1][1]\n\n        # write your code here\n        sum = 0\n        for i in range(2, len(vertices)):\n            sum += vertices[i][0] + vertices[i][1]\n        return sum\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    vertices = [[2,0],[1,1],[2,2]]\n    print(sol.trianglePerimeter(vertices))\n    vertices = [[1,1],[2,2],[3,2]]\n    print(sol.trianglePerimeter(vertices))",
      -17.21875
    ],
    [
      "# Definition for a point.\nclass Point:\n    def __init__(self, a=0, b=0, c=0):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __repr__(self):\n        return 'Point({}, {}, {})'.format(self.a, self.b, self.c)\n\n\nclass Solution:\n    def findPerimeter(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if not points:\n            return 0\n        l = len(points)\n        p1 = points[0]\n        p2 = points[1]\n        p3 = points[2]\n\n        p1x = p1.a + p2.a + p3.a\n        p1y = p1.b + p2.b + p3.b\n        p2x = p2.a + p1.a + p3.a\n        p2y = p2.b + p1.b + p3.b\n        p3x = p3.a + p1.a + p2.a\n        p3y = p3.b + p1.b + p2.b\n        return (p1x + p2x + p3x) * (p1y + p2y + p3y)",
      -17.5
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}