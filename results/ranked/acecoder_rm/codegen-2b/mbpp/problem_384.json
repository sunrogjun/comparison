{
  "problem": {
    "task_id": "MBPP/395",
    "prompt": "Write a python function to find the first non-repeated character in a given string.",
    "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
    "test_list": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ],
    "challenge_test_list": [],
    "problem_id": 384
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def first_non_repeated(string):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] not in string[0:i]:\n            return string[i]\n    return None\n\nprint(first_non_repeated(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      3.67578125
    ],
    [
      "def findFirstNonRepeatedCharacter(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # Solution 1: Brute Force\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == s[count]:\n    #         count += 1\n    #     else:\n    #         count = 0\n    # return s[0]\n\n    # Solution 2: Hash Map\n    # return s.__hash__()\n\n    # Solution 3: Use a dict\n    # return s.__hash__()\n\n    # Solution 4: Use a set\n    # return s.__hash__()\n\nif __name__ == \"__main__\":\n    s = \"abbcccdd\"\n    findFirstNonRepeatedCharacter(s)",
      3.474609375
    ],
    [
      "def firstNonRepeated(s):\n    for i in range(len(s)):\n        if s[i] not in s[:i]:\n            return s[i]\n    return None\n\nprint(firstNonRepeated(\"abcabc\"))\nprint(firstNonRepeated(\"abbc\"))\nprint(firstNonRepeated(\"abbcabb\"))\nprint(firstNonRepeated(\"abbcabbcabb\"))\nprint(firstNonRepeated(\"abbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabbcabb",
      3.3046875
    ],
    [
      "def find_non_repeated_char(string):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    :param string: str\n    :return:\n    \"\"\"\n\n    char_set = set()\n\n    for char in string:\n        if char not in char_set:\n            char_set.add(char)\n\n    return char_set.pop()\n\n\ndef test_find_non_repeated_char():\n    assert find_non_repeated_char('abcabc') == 'a'\n    assert find_non_repeated_char('abcabcabcabc') == 'a'\n    assert find_non_repeated_char('abcabc') == 'a'\n    assert find_non_repeated_char('abcabcabcabcabc') == 'a'\n    assert find_non_repeated_char('abcabcabcabcabcabc') == 'a'\n    assert find_non_repeated_char('abcabcabcabcabcabcabc') == 'a'\n    assert find_non_repeated_char('abcabcabcabcabcabcabcabc') == 'a'\n    assert find_non_repeated_char('abcabcabcabcabcabcabcabcabc') == 'a'\n    assert find_non_repeated_char('abcabcabcabcabcabcabcabcabcabc') == 'a'\n    assert find_non_repeated_char('abcabcabcabcabcabcabcabcabcabcabc') == 'a'\n\n\nif __name__ == '__main__':\n    test_find_non_repeated_char()",
      2.16015625
    ],
    [
      "def first_non_repeated_char(string):\n    \"\"\"\n    Write a function first_non_repeated_char that takes a string and returns the first non-repeated character in the string.\n\n    Input:\n        string: A string.\n\n    Output:\n        First non-repeated character in the string.\n\n    Example:\n        >>> first_non_repeated_char('aabbcc')\n        'b'\n        >>> first_non_repeated_char('abccc')\n        'b'\n        >>> first_non_repeated_char('abccc')\n        'a'\n    \"\"\"\n\n    if string is None:\n        return None\n    else:\n        return string[0]\n\n# test code\nif __name__ == '__main__':\n    string = 'abccc'\n    print(first_non_repeated_char(string))\n    string = 'aabbcc'\n    print(first_non_repeated_char(string))\n    string = 'abccc'\n    print(first_non_repeated_char(string))\n    string = 'aabbcc'\n    print(first_non_repeated_char(string))",
      1.6357421875
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @param s, a string\n    # @return an integer\n    def firstUniqChar(self, s):\n        \"\"\"\n        dfs: dfs, count, a, i\n        \"\"\"\n        # i is the start index\n        i = 0\n        # a is the current character\n        a = 0\n        # dfs: dfs, a, count, i\n        while i < len(s):\n            # if a == s[i]:\n            #     count += 1\n            # else:\n            #     count -= 1\n            #     a = s[i]\n            if a == s[i]:\n                a += 1\n            else:\n                a = 0\n            i += 1\n        # return a\n        return a\n\nif __name__ == '__main__':\n    print Solution().firstUniqChar(\"aabcc\")",
      1.2294921875
    ],
    [
      "import re\n\ndef first_non_repeated_char(string):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    Input:\n    string - a string\n    Output:\n    a character\n    \"\"\"\n\n    # if the string is empty, return 0\n    if not string:\n        return 0\n\n    # if the string is only 1 character, return it\n    if len(string) == 1:\n        return string[0]\n\n    # if the string is only one repeated character, return it\n    if string[0] == string[1]:\n        return string[0]\n\n    # if the string is more than 2 characters, find the first non-repeated character\n    for i in range(2, len(string)):\n        if string[i]!= string[i - 1]:\n            return string[i - 1]\n\n    # if no character is non-repeated, return 0\n    return 0\n\nif __name__ == '__main__':\n    string = 'abcd'\n    print first_non_repeated_char(string)",
      0.9775390625
    ],
    [
      "def find_non_repeated_character(string):\n    # write your code here\n    '''\n    Given a string, return the first non-repeated character.\n    '''\n    if not string:\n        return ''\n    count = 0\n    for ch in string:\n        if ch not in string[count:]:\n            count += 1\n            if ch!= string[count - 1]:\n                break\n    return string[0:count]\n\n\nif __name__ == '__main__':\n    string = 'ababab'\n    print(find_non_repeated_character(string))",
      0.228271484375
    ],
    [
      "def find_first_non_repeated_char(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    # TODO: write your code here\n    count = 0\n    for i in range(len(text)):\n        if text[i]!= text[0]:\n            count += 1\n        else:\n            count = 0\n    return count\n\nif __name__ == '__main__':\n    assert find_first_non_repeated_char(\"cbaab\") == 1",
      -0.06927490234375
    ],
    [
      "def findFirstNonRepeatedChar(str):\n    # Write your code here\n    if str == None:\n        return None\n    else:\n        return str[0]",
      -0.25634765625
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    \"\"\"\n    @param s: A string\n    @return: The first non-repeated character in the string.\n    \"\"\"\n    def firstNotRepeat(self, s):\n        dic = {}\n        for c in s:\n            if c in dic:\n                dic.pop(c)\n            else:\n                dic[c] = 1\n\n        for c in dic:\n            if dic[c] == 1:\n                return c\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.firstNotRepeat(\"aaaaa\")\n    print s.firstNotRepeat(\"aabb\")\n    print s.firstNotRepeat(\"abbbb\")\n    print s.firstNotRepeat(\"aabbb\")\n    print s.firstNotRepeat(\"aabbbb\")\n    print s.firstNotRepeat(\"aaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
      -0.29296875
    ],
    [
      "def find_first_non_repeated_char(str):\n    # Write your code here\n    #return str[0]\n    \n    if not str:\n        return None\n    \n    if not str[0]:\n        return None\n    \n    return str[0]\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_first_non_repeated_char(\"Hello\") == \"H\", \"Hello\"\n    assert find_first_non_repeated_char(\"World\") == \"W\", \"World\"\n    assert find_first_non_repeated_char(\"\") == \"\", \"Empty string\"\n    assert find_first_non_repeated_char(\"Hello World\") == \"H\", \"Hello World\"\n    assert find_first_non_repeated_char(\"Hello WorlD\") == \"H\", \"Hello WorlD\"\n    assert find_first_non_repeated_char(\"Hello World\") == \"H\", \"Hello World\"\n    assert find_first_non_repeated_char(\"Hello WorlD\") == \"H\", \"Hello WorlD\"\n    assert find_first_non_repeated_char(\"Hello\") == \"H\", \"Hello\"\n    assert find_first_non_repeated_char(\"World\") == \"W\", \"World\"\n    assert find_first_non_repeated_char(\"Hello World\") == \"H\", \"Hello World\"\n    assert find_first_non_repeated_char(\"Hello WorlD\") == \"H\", \"Hello WorlD\"\n    assert find_first_non_repeated_char(\"Hello\") == \"H\", \"Hello\"\n    assert find_first_non_repeated_char(\"World\") == \"W\", \"World\"\n    assert find_first_non_repeated_char(\"Hello World\") == \"H\", \"Hello World\"\n    assert find_first_non_repeated_char(\"Hello WorlD\") == \"H\", \"Hello WorlD\"",
      -0.53955078125
    ],
    [
      "def first_non_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    count = 1\n    for i in range(0, len(string)):\n        if string[i] == string[i + 1]:\n            count += 1\n        else:\n            break\n    return string[:i]\n\nprint(first_non_repeated_char(\"aabbcccc\"))",
      -0.6513671875
    ],
    [
      "def first_non_repeated(string):\n    non_repeated = []\n    for c in string:\n        if c not in non_repeated:\n            non_repeated.append(c)\n    return ''.join(non_repeated)\n\nprint(first_non_repeated('aabbb'))",
      -0.85693359375
    ],
    [
      "def firstNonRepeatedChar(s):\n    count = 0\n    for c in s:\n        if c not in s[count:]:\n            count += 1\n        else:\n            return c\n    return None\n\nif __name__ == \"__main__\":\n    s = \"abacd\"\n    print(firstNonRepeatedChar(s))",
      -0.85693359375
    ],
    [
      "def find_non_repeated_character(string):\n    \"\"\"\n    Input:\n    string - String\n    Output:\n    first_non_repeated_character - first non-repeated character\n    \"\"\"\n    count = 1\n    for i in range(len(string)):\n        if string[i]!= string[i-1]:\n            count += 1\n        else:\n            if count > 1:\n                return i\n            else:\n                count = 1\n    return -1",
      -0.85693359375
    ],
    [
      "import re\n\ndef find_first_non_repeated_char(string):\n    # Return the first non-repeated character in the string.\n    # Assume that there is no repeated character in the string.\n    for i in range(len(string)):\n        if string[i] not in string[:i]:\n            return string[i]\n    return None\n\nif __name__ == '__main__':\n    print find_first_non_repeated_char('abcabc')\n    print find_first_non_repeated_char('abcabcabc')",
      -0.85693359375
    ],
    [
      "def findFirstNonRepeatedChar(string):\n    for i in range(len(string)):\n        if string[i]!= string[i + 1]:\n            return string[i]\n    return None\n\n\nif __name__ == '__main__':\n    print(findFirstNonRepeatedChar(\"abcabc\"))",
      -0.85693359375
    ],
    [
      "import re\n\n\ndef find_first_non_repeated_char(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    pattern = re.compile(r'^.+$')\n    match = pattern.search(string)\n    return match.group(0)\n\n\nif __name__ == '__main__':\n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    print(find_first_non_repeated_char(s))",
      -0.85791015625
    ],
    [
      "def find_first_non_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    first_char = None\n    for i in range(len(s)):\n        if first_char is None:\n            first_char = s[i]\n        else:\n            if first_char == s[i]:\n                first_char = None\n    return first_char",
      -0.85791015625
    ],
    [
      "def first_non_repeated_character(string):\n    return {'a':'b', 'b':'a', 'c':'a', 'd':'e'}.get(string[0], None)\n\n\nprint(first_non_repeated_character('abcabcabc'))\nprint(first_non_repeated_character('aabbcc'))\nprint(first_non_repeated_character('aaa'))",
      -0.85791015625
    ],
    [
      "def find_first_non_repeated_character(string):\n    \"\"\"\n    Finds the first non-repeated character in the given string.\n    :param string: a string\n    :return: a character\n    \"\"\"\n    if not string:\n        return \"\"\n    \n    # The first character of the string is the first character of the first non-repeated character\n    first_non_repeated_character = string[0]\n    \n    # The first non-repeated character of the string is the first non-repeated character of the string\n    for index, character in enumerate(string[1:]):\n        if character == first_non_repeated_character:\n            first_non_repeated_character = character\n        else:\n            break\n    \n    return first_non_repeated_character",
      -0.85791015625
    ],
    [
      "def first_non_repeated_character(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    c = 0\n    for i in range(0, len(s)):\n        if s[i] == s[c]:\n            c += 1\n        else:\n            c = i\n    return s[c]\n\nif __name__ == '__main__':\n    s = 'abcdefg'\n    print(first_non_repeated_character(s))",
      -0.85791015625
    ],
    [
      "def find_first_non_repeated_char(string):\n    \"\"\"\n    Write a function to find the first non-repeated character in a given string.\n    :rtype: int\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            continue\n        else:\n            return i",
      -0.85791015625
    ],
    [
      "def first_non_repeated(str):\n    '''\n    :type str: str\n    :rtype: int\n    '''\n    return min(1, str.find(str[0]))\n\nif __name__ == '__main__':\n    assert first_non_repeated('abcabc') == 2, 'abc'\n    assert first_non_repeated('ababac') == 1, 'abc'\n    assert first_non_repeated('abcabcabcabc') == 0, 'abc'\n    assert first_non_repeated('abcabcabcabcabc') == 1, 'abc'\n    assert first_non_repeated('abcabcabcabcabcabcabcabc') == 3, 'abc'\n    assert first_non_repeated('abcabcabcabcabcabcabcabcabcabc') == 0, 'abc'",
      -0.85791015625
    ],
    [
      "def find_non_repeated_char(str):\n    '''\n    Args:\n        str: a string\n    Returns:\n        a character\n    '''\n    char_count = {}\n    for c in str:\n        if c not in char_count:\n            char_count[c] = 0\n        else:\n            char_count[c] += 1\n    for c, count in char_count.items():\n        if count > 1:\n            return c\n    return None",
      -0.85791015625
    ],
    [
      "import re\n\n\ndef find_first_non_repeated_char(string):\n    pattern = re.compile(r'\\w')\n    matches = re.findall(pattern, string)\n    for match in matches:\n        if match not in matches:\n            return match\n    return None\n\n\nif __name__ == '__main__':\n    print find_first_non_repeated_char('abcd1234')",
      -0.85791015625
    ],
    [
      "def find_nonrepeated(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    # Count the number of times each character appears.\n    count = {}\n    for c in s:\n        count[c] = count.get(c, 0) + 1\n\n    # Keep track of the character that appears the most.\n    max_count = 0\n    max_char = ''\n    for c, count in count.items():\n        if count > max_count:\n            max_count = count\n            max_char = c\n\n    # Return the index of the first character that does not appear.\n    return s.find(max_char) + 1\n\nif __name__ == '__main__':\n    s = 'abcabcabc'\n    print(find_nonrepeated(s))",
      -0.85791015625
    ],
    [
      "import re\n\ndef find_first_non_repeated_char(string):\n    # Your code here\n    pattern = re.compile(r'\\w')\n    first_char = None\n    for char in string:\n        if first_char is None:\n            first_char = char\n        elif first_char!= char:\n            first_char = char\n    return first_char",
      -0.85791015625
    ],
    [
      "def find_first_non_repeated_char(s):\n    '''\n    :type s: str\n    :rtype: int\n    '''\n    \n    # count the number of times a character is repeated\n    char_count = collections.Counter(s)\n    \n    # count the number of times a character is repeated\n    char_count = collections.Counter(s)\n    \n    # find the first non-repeated character\n    for c in char_count:\n        if char_count[c] == 1:\n            return c\n    \n    return 0\n\ndef find_first_non_repeated_char_recur(s):\n    '''\n    :type s: str\n    :rtype: int\n    '''\n    if len(s) == 0:\n        return 0\n    \n    if s[0] == s[1]:\n        return s[0]\n    \n    return find_first_non_repeated_char_recur(s[1:])\n\nprint(find_first_non_repeated_char(\"abaab\"))",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/first-non-repeated-character/problem\n\ndef find_first_non_repeated_character(string):\n    # +++your code here+++\n    count = 0\n    for i in range(len(string)):\n        if string[i]!= string[count]:\n            count = i\n    return string[count]\n\nif __name__ == '__main__':\n    string = input().strip()\n    print(find_first_non_repeated_character(string))",
      -0.8583984375
    ],
    [
      "def first_non_repeated_char(string):\n    \"\"\"\n    Input: string\n    Output: the first non-repeated character in a given string.\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string[0]\n    index = 0\n    while index < len(string):\n        if string[index]!= string[index + 1]:\n            return string[index]\n        index += 1\n    return string[index - 1]\n\nif __name__ == '__main__':\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    print(first_non_repeated_char(string))",
      -0.8583984375
    ],
    [
      "def first_non_repeated_char(string):\n    # write your code here\n    return string[0]\n\nif __name__ == '__main__':\n    print(first_non_repeated_char('abab'))\n    print(first_non_repeated_char('ababa'))",
      -0.8583984375
    ],
    [
      "def first_non_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    cnt = 0\n    for i, c in enumerate(string):\n        if cnt == 0:\n            cnt += 1\n        elif cnt!= 1:\n            return string[i]\n        else:\n            cnt = 0\n    return string[-1]\n\nif __name__ == '__main__':\n    assert first_non_repeated_char('') == ''\n    assert first_non_repeated_char('aabbcc') == 'a'\n    assert first_non_repeated_char('aabbccddddeee') == 'a'\n    assert first_non_repeated_char('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') == 'a'",
      -0.8583984375
    ],
    [
      "# Definition for a character:\nclass Character:\n    def __init__(self, x):\n        self.value = x\n        self.count = 1\n    def __repr__(self):\n        return \"%s:%s\" % (self.value, self.count)\n\nclass Solution:\n    # @param s, a string\n    # @return a character\n    def firstUniqChar(self, s):\n        # Write your code here\n        if not s:\n            return None\n        res = [None] * len(s)\n        for i in range(len(s)):\n            for j in range(i):\n                if s[i] == s[j]:\n                    res[i] = Character(s[i])\n                    break\n        return res[0] if res[0] else None",
      -0.8583984375
    ],
    [
      "def find_first_non_repeated(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    first_non_repeated_index = 0\n    for i in range(0, len(string)):\n        if string[i]!= string[first_non_repeated_index]:\n            first_non_repeated_index = i\n    return first_non_repeated_index\n\nif __name__ == '__main__':\n    print(find_first_non_repeated('aabccc'))",
      -0.8583984375
    ],
    [
      "def first_non_repeated(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s: return -1\n    s = s.upper()\n    if s[0] == s[1]:\n        return 0\n    i = 0\n    while i < len(s) - 1:\n        if s[i] == s[i + 1]:\n            i += 1\n        else:\n            return i\n    return -1\n\ns = \"aabbcc\"\nprint(first_non_repeated(s))",
      -0.8583984375
    ],
    [
      "def first_non_repeated_character(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    if len(str) == 0:\n        return -1\n    for i in range(len(str)):\n        if str[i]!= str[0]:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    print(first_non_repeated_character(\"aabb\"))\n    print(first_non_repeated_character(\"abbab\"))\n    print(first_non_repeated_character(\"abbabb\"))\n    print(first_non_repeated_character(\"abbabb\"))\n    print(first_non_repeated_character(\"abbbba\"))",
      -0.8583984375
    ],
    [
      "def first_non_repeated_character(string):\n    \"\"\"\n    Write a function that takes a string as input and returns the first non-repeated character in it.\n    \"\"\"\n    return \"\".join(x for x in string if x not in \"\".join(string))\n\nif __name__ == '__main__':\n    string = \"aabbbbaa\"\n    print(first_non_repeated_character(string))",
      -0.8583984375
    ],
    [
      "import re\n\ndef find_non_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if re.search(r'[^a-z]', string):\n        return 'a'\n    else:\n        return 'z'\n\n\nprint(find_non_repeated_char('abcabcbbb'))",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport string\nimport re\n\n# input:\n# s = 'abcabcbb'\n# return:\n# 'a'\n\ndef first_non_repeated_character(s):\n    char_set = set(s)\n    for c in s:\n        if c not in char_set:\n            return c\n    return None\n\nif __name__ == '__main__':\n    print first_non_repeated_character('abcabcbb')",
      -0.8583984375
    ],
    [
      "def find_non_repeated_char(str):\n    if str == '':\n        return 0\n    if len(str) == 1:\n        return 0\n    if str[0] == str[1]:\n        return 0\n    if str[0] == str[-1]:\n        return 0\n    return 1\n\n#print find_non_repeated_char('a')\n#print find_non_repeated_char('aa')\n#print find_non_repeated_char('aaa')\n#print find_non_repeated_char('abc')\n#print find_non_repeated_char('abcd')\n#print find_non_repeated_char('abcd')\n#print find_non_repeated_char('abcd')",
      -0.8583984375
    ],
    [
      "def find_first_non_repeated_character(string):\n    \"\"\"\n    Write a function that takes a string and returns the index of the first\n    non-repeated character.\n    \"\"\"\n\n    first_non_repeated_character = -1\n    for i in range(len(string)):\n        if string[i] == string[first_non_repeated_character]:\n            if first_non_repeated_character == -1:\n                first_non_repeated_character = i\n        else:\n            first_non_repeated_character = -1\n    return first_non_repeated_character\n\n\ndef main():\n    print find_first_non_repeated_character(\"aaaaaaaa\")\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "# write your code below\n# the function should return a list of the first non-repeated character in the given string\ndef first_non_repeated_character(s):\n    count = 0\n    for c in s:\n        if c!= s[count]:\n            count += 1\n        else:\n            return s[:count]\n    return s\n\n# driver code\nif __name__ == \"__main__\":\n    s = \"aabbccc\"\n    print(first_non_repeated_character(s))\n    s = \"aabbcccc\"\n    print(first_non_repeated_character(s))\n    s = \"aabbccc\"\n    print(first_non_repeated_character(s))",
      -0.8583984375
    ],
    [
      "def find_first_non_repeated(str):\n    for i in range(len(str) - 1):\n        if str[i] == str[i+1]:\n            continue\n        else:\n            return str[i]\n\nif __name__ == \"__main__\":\n    str = \"abcabcabc\"\n    print(find_first_non_repeated(str))",
      -0.85888671875
    ],
    [
      "def first_non_repeated(string):\n    \"\"\"\n    :param string: a string\n    :return: a character that is not repeated in the string\n    \"\"\"\n    for char in string:\n        if char not in string:\n            return char\n    return string[0]\n\nif __name__ == '__main__':\n    string = 'abbcccddddd'\n    print first_non_repeated(string)",
      -0.85888671875
    ],
    [
      "def firstNonRepeatedChar(s):\n    for c in s:\n        if c not in s:\n            return c\n    return None",
      -0.85888671875
    ],
    [
      "def find_first_non_repeated_character(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # Write your code here\n    result = ''\n    for ch in string:\n        if ch not in result:\n            result += ch\n        else:\n            break\n    return result\n\nif __name__ == '__main__':\n    print(find_first_non_repeated_character('abababa'))",
      -0.85888671875
    ],
    [
      "def first_non_repeated(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[count]:\n            count += 1\n            if count > len(s):\n                return s[0]\n    return s[0]\n\nif __name__ == '__main__':\n    print(first_non_repeated('cbaab'))\n    print(first_non_repeated('abcabc'))\n    print(first_non_repeated('ababc'))\n    print(first_non_repeated('abab'))",
      -0.85888671875
    ],
    [
      "def first_non_repeated_char(string):\n    \"\"\"\n    Input: string - string to search\n    Output: character at the first non-repeated character in the string\n    \"\"\"\n\n    char_set = {c for c in string}\n\n    return next(iter(char_set))\n\nif __name__ == \"__main__\":\n    string = \"abcabcabcabc\"\n    print(first_non_repeated_char(string))",
      -0.85888671875
    ],
    [
      "def first_non_repeated_character(string):\n    return ''\n\n# The above solution is not correct as it does not allow for the case where the string is empty\n# The following solution is correct but is more time consuming\ndef first_non_repeated_character2(string):\n    for i in range(len(string)):\n        if string[i]!= string[0]:\n            return string[i]\n    return string[0]",
      -0.85888671875
    ],
    [
      "#!/usr/bin/env python\n\ndef first_non_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return '' if string is None else str(string)[0]",
      -0.85888671875
    ],
    [
      "def find_first_non_repeated_char(string):\n    \"\"\"\n    :param string: String to be searched\n    :return: First non-repeated character in the given string\n    \"\"\"\n    non_repeated_char = -1\n    for i in range(0, len(string)):\n        if string[i]!= string[non_repeated_char]:\n            non_repeated_char = i\n    return non_repeated_char\n\nif __name__ == \"__main__\":\n    string = \"The quick brown fox jumps over the lazy dog\"\n    print(find_first_non_repeated_char(string))",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/first-non-repeated-character/problem\n\nimport re\n\n\ndef first_non_repeated_character(string):\n    return re.search(\"[^a-z]\", string).group()\n\nif __name__ == \"__main__\":\n    test_cases = open(\"tests/sample-inputs/first-non-repeated-character.txt\", \"r\")\n    for test in test_cases:\n        string = test.rstrip()\n        print(\"Case #{}: {}\".format(test_cases.count(test) + 1, first_non_repeated_character(string)))",
      -0.85888671875
    ],
    [
      "def first_non_repeated_character(string):\n    count = 0\n    for char in string:\n        if char not in string:\n            count += 1\n        else:\n            count = 0\n    return char",
      -0.90673828125
    ],
    [
      "def find_first_non_repeated_character(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    # We can do this using a set to check for duplicates.\n    # For this problem, we'll just iterate through the string and\n    # check for any repeated characters.\n    # If there are no repeated characters, then return the first\n    # character.\n    # If there are any repeated characters, then we'll return -1.\n    # We'll also do a check for an empty string.\n    # If the string is empty, then we'll return -1.\n    if not string:\n        return -1\n\n    # We'll use a set to check for repeated characters.\n    # If there are any repeated characters, then we'll return -1.\n    # We'll also do a check for an empty string.\n    # If the string is empty, then we'll return -1.\n    if not string:\n        return -1\n\n    # We'll use a set to check for repeated characters.\n    # If there are any repeated characters, then we'll return -1.\n    # We'll also do a check for an empty string.\n    # If the string is empty, then we'll return -1.\n    if not string:\n        return -1\n\n    # We'll use a set to check for repeated characters.\n    # If there are any repeated characters, then we'll return -1.\n    # We'll also do a check for an empty string.\n    # If the string is empty, then we'll return -1.\n    if not string:\n        return -1\n\n    # We'll use a set to check for repeated characters.\n    # If there are any repeated characters, then we'll return -1.\n    # We'll also do a check for an empty string.\n    # If the string is empty, then we'll return -1.\n    if not string:\n        return -1\n\n    # We'll use a set to check for repeated characters.\n    # If there are any repeated characters, then we'll return -1.\n    # We'll also do a check for an empty string.\n    # If the string is empty, then we'll return -1.\n    if not string:\n        return -",
      -1.298828125
    ],
    [
      "def find_nonrepeated_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    # O(n) time, O(1) space\n    non_repeated_char = 0\n    for i in range(len(str)):\n        if str[i]!= str[non_repeated_char]:\n            non_repeated_char += 1\n        else:\n            break\n    return non_repeated_char\n\nif __name__ == '__main__':\n    assert find_nonrepeated_char('abcabc') == 3, 'abc'\n    assert find_nonrepeated_char('abcabcabc') == 3, 'abc'\n    assert find_nonrepeated_char('abcabcabcabc') == 3, 'abc'\n    assert find_nonrepeated_char('abcabcabcabcabcabcabcabcabc') == 3, 'abc'",
      -1.4326171875
    ],
    [
      "def find_first_non_repeated(string):\n    \"\"\"\n    Write a function to find the first non-repeated character in a given string.\n\n    Input:\n        string: A string.\n\n    Output:\n        An integer.\n    \"\"\"\n    # Write your code here\n    i = 0\n    while i < len(string):\n        if string[i] == string[0]:\n            i += 1\n        else:\n            break\n    return i\n\nif __name__ == \"__main__\":\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    print find_first_non_repeated(string)\n    string = \"aabcdefghijklmnopqrstuvwxyz\"\n    print find_first_non_repeated(string)\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    print find_first_non_repeated(string)",
      -1.669921875
    ],
    [
      "# Write your code here\ndef find_first_non_repeated_char(str):\n    return first_non_repeated_char(str)\n\n# Test Cases\n\n# \"abcd\"\n# \"abab\"\n# \"ababa\"\n# \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
      -2.009765625
    ],
    [
      "def find_first_non_repeated(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return -1\n    if len(s) == 1:\n        return 0\n    if s[0]!= s[1]:\n        return 0\n    for i in range(2, len(s)):\n        if s[i]!= s[i-1]:\n            return i\n    return -1",
      -2.076171875
    ],
    [
      "import re\n\ndef find_first_non_repeated_character(string):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    Return:\n        A list of characters in the string.\n    \"\"\"\n    # Create a pattern for matching a repeated character.\n    pattern = re.compile(r\"\\d\")\n\n    # Create a list of characters in the string.\n    chars = []\n\n    # For each character in the string, create a list of the same character in the string.\n    for char in string:\n        if pattern.match(char) is None:\n            chars.append(char)\n\n    # Return the characters in the string.\n    return chars\n\n\n# Test Cases\n# string = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab",
      -2.08984375
    ],
    [
      "def find_first_non_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(string):\n        if string[i]!= string[i + 1]:\n            break\n        i += 1\n\n    return i\n\n\nif __name__ == '__main__':\n    assert find_first_non_repeated_char(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
      -2.171875
    ],
    [
      "def first_non_repeated_char(str):\n    \"\"\"\n    Write a function first_non_repeated_char that takes a string as input and returns\n    the first non-repeated character in the string.\n\n    Example\n    Input: \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      -2.21484375
    ],
    [
      "def first_non_repeated(string):\n    \"\"\"\n    >>> first_non_repeated('aabbcc')\n    'a'\n    >>> first_non_repeated('aaabbcc')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'\n    >>> first_non_repeated('aabbccdd')\n    'a'",
      -2.283203125
    ],
    [
      "def first_non_repeated_char(string):\n    for i in range(len(string)):\n        if string[i]!= string[0]:\n            return string[i]\n\nif __name__ == '__main__':\n    print(first_non_repeated_char(\"aabbcccddd\"))\n    print(first_non_repeated_char(\"aabbcccddd\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbbbb\"))\n    print(first_non_repeated_char(\"bbbbbbbb",
      -2.64453125
    ],
    [
      "def find_first_non_repeated_char(string):\n    return string[0]\n\n\nprint(find_first_non_repeated_char(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
      -2.736328125
    ],
    [
      "# The first non-repeated character.\ndef first_non_repeated_char(s):\n    '''\n    :type s: str\n    :rtype: str\n    '''\n    # Convert to lowercase.\n    s = s.lower()\n\n    # Start at the end of the string and work backwards.\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == s[i + 1]:\n            # If the characters are the same, move back one.\n            i -= 1\n\n        # If the characters are different, we have found the first non-repeated character.\n        else:\n            # Return the first non-repeated character.\n            return s[i]\n\n    # If we get to here, we didn't find a non-repeated character.\n    return None\n\nif __name__ == '__main__':\n    # Test 1\n    assert first_non_repeated_char('abcdefg') == 'a'\n    assert first_non_repeated_char('abcdefg') == 'a'\n    assert first_non_repeated_char('abcdefg') == 'a'\n    assert first_non_repeated_char('abcdefg') == 'a'\n    assert first_non_repeated_char('abcdefg') == 'a'\n    assert first_non_repeated_char('abcdefg') == 'a'\n\n    # Test 2\n    assert first_non_repeated_char('abcdefgh') == 'a'\n    assert first_non_repeated_char('abcdefgh') == 'a'\n    assert first_non_repeated_char('abcdefgh') == 'a'\n    assert first_non_repeated_char('abcdefgh') == 'a'\n    assert first_non_repeated_char('abcdefgh') == 'a'\n    assert first_non_repeated_char('abcdefgh') == 'a'",
      -3.076171875
    ],
    [
      "# Importing the required libraries\nimport re\n\n# Function to check if the character is repeated\ndef is_repeated(string):\n    for i in range(0, len(string) - 1):\n        if string[i] == string[i + 1]:\n            return True\n    return False\n\n\n# Function to return the first non-repeated character in a given string\ndef first_non_repeated(string):\n    for i in range(0, len(string) - 1):\n        if string[i]!= string[i + 1]:\n            return string[i]\n    return string[-1]\n\n\n# Function to print the first non-repeated character in a given string\ndef print_first_non_repeated(string):\n    for i in range(0, len(string) - 1):\n        if string[i]!= string[i + 1]:\n            print(string[i])\n    print(string[-1])\n\n\n# Main function\nstring = \"I'm a string with repeating characters\"\n\n# Call the function is_repeated\nprint(is_repeated(string))\n\n# Call the function first_non_repeated\nprint(first_non_repeated(string))\n\n# Call the function print_first_non_repeated\nprint_first_non_repeated(string)\n\n\n# Test case\ntest_string = \"I'm a string with repeating characters\"\n\n# Call the function is_repeated\nis_repeated_test = is_repeated(test_string)\n\n# Call the function first_non_repeated\nfirst_non_repeated_test = first_non_repeated(test_string)\n\n# Call the function print_first_non_repeated\nprint_first_non_repeated_test",
      -3.228515625
    ],
    [
      "def first_non_repeated(string):\n    \"\"\"\n    Write a function to find the first non-repeated character in a given string.\n    :rtype: int\n    \"\"\"\n\n    return string.index(max(string, key=string.count))\n\nif __name__ == \"__main__\":\n    assert first_non_repeated(\"abab\") == 1, \"abcabc\"\n    assert first_non_repeated(\"aabbb\") == 2, \"ababbb\"\n    assert first_non_repeated(\"\") == 0, \"aabbb\"\n    assert first_non_repeated(\"abcabc\") == 0, \"abcabc\"",
      -3.55859375
    ],
    [
      "def find_first_non_repeated_char(string):\n    count = 0\n    for i in range(0,len(string)):\n        if string[i] not in string[0:i]:\n            count += 1\n        if count == len(string):\n            return string[0:i]\n    return None\n\nif __name__ == \"__main__\":\n    string = \"abacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabacadabac",
      -3.755859375
    ],
    [
      "def find_first_non_repeated_char(str):\n    \"\"\"\n    Find the first non-repeated character in str.\n    \"\"\"\n    return str[0]\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"aabb\", \"aabb\"),\n        (\"aaaa\", \"aabb\"),\n        (\"aaaa\", \"aabbb\"),\n        (\"aabb\", \"aabbb\"),\n        (\"aabbbb\", \"aabbbb\"),\n        (\"aabbbb\", \"aabbbb\"),\n        (\"aabbbb\", \"aabbbb\"),\n        (\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
      -3.8515625
    ],
    [
      "def first_non_repeated_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    # return 1\n    # for each character in str\n    #   if current character is not repeated\n    #     return current character\n    # return 0\n    # return 1\n    return 1\n\n# Your FirstNonRepeatedChar solution should first try to use the built-in function\n# first_non_repeated_char, and then check if the character is repeated.\n# If you get it wrong, please submit a pull request to save your own solution.",
      -4.10546875
    ],
    [
      "def first_non_repeated_character(string):\n    for i in range(0, len(string) - 1):\n        if string[i]!= string[i + 1]:\n            return string[i]\n    return string[i]\n\nif __name__ == '__main__':\n    string = \"ababbbababbabbbababbbababbbbbabbbabbbababbbbbabbbbbabbbababbbabbbbbababbbababbbbbabbbbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbabbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbbbababbbababbbbbabbbb",
      -4.453125
    ],
    [
      "def find_first_non_repeated(string):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    Arguments:\n    string -- a string\n\n    Returns:\n    The first non-repeated character in a given string.\n    \"\"\"\n\n    return string[0] if len(string) > 0 else None\n\nif __name__ == \"__main__\":\n    print(find_first_non_repeated(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      -4.5078125
    ],
    [
      "# First non-repeated character in a string\ndef find_first_non_repeated(s):\n    for i in range(len(s)):\n        if s[i]!= s[i - 1]:\n            return s[i]\n    return s[len(s) - 1]\n\n# First non-repeated character in a string\ndef find_first_non_repeated2(s):\n    for i in range(len(s)):\n        if s[i]!= s[i - 1]:\n            return s[i]\n    return s[len(s) - 1]\n\n# First non-repeated character in a string\ndef find_first_non_repeated3(s):\n    for i in range(len(s)):\n        if s[i]!= s[i - 1]:\n            return s[i]\n    return s[len(s) - 1]\n\n# First non-repeated character in a string\ndef find_first_non_repeated4(s):\n    for i in range(len(s)):\n        if s[i]!= s[i - 1]:\n            return s[i]\n    return s[len(s) - 1]\n\n# First non-repeated character in a string\ndef find_first_non_repeated5(s):\n    for i in range(len(s)):\n        if s[i]!= s[i - 1]:\n            return s[i]\n    return s[len(s) - 1]\n\n# First non-repeated character in a string\ndef find_first_non_repeated6(s):\n    for i in range(len(s)):\n        if s[i]!= s[i - 1]:\n            return s[i]\n    return s[len(s) - 1]\n\n# First non-repeated character in a string\ndef find_first_non_repeated7(s):\n    for i in range(len(s)):\n        if s[i]!= s[i - 1]:\n            return s[i]\n    return s[len(s) - 1]\n\n# First non-repeated character in a string\ndef find_first",
      -4.61328125
    ],
    [
      "# Definition for a character:\n# class Character(object):\n#     def __init__(self, x):\n#         self.value = x\n#         self.next = None\n\nclass Solution(object):\n    def firstNotRepeated(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return -1\n        \n        cnt = collections.Counter(s)\n        for ch in s:\n            if cnt[ch] == 1:\n                return ch\n            elif cnt[ch] > 1:\n                return -1\n            \n        return -1",
      -4.71484375
    ],
    [
      "def first_non_repeated_char(string):\n    \"\"\"\n    Write a function to find the first non-repeated character in a given string.\n\n    You should write a function to find the first non-repeated character in a given string.\n    Given a string str, return the index of the first non-repeated character in the string.\n    If the string is empty, return -1.\n    If the string contains only one character, return the index of that character.\n    If the string contains more than one character, return the index of the first non-repeated character in the string.\n\n    Example\n    For str = \"abcabc\", the function should return 2, since the first non-repeated character is 'b'.\n    For str = \"\", the function should return -1.\n    For str = \"abcd\", the function should return -1.\n    For str = \"abc\", the function should return 0.\n    \"\"\"\n\n    if len(string) == 0:\n        return -1\n\n    if len(string) == 1:\n        return 0\n\n    if string[0] == string[1]:\n        return 1\n\n    return first_non_repeated_char(string[1:])\n\n\nif __name__ == '__main__':\n    print(first_non_repeated_char(\"abcabc\"))\n    print(first_non_repeated_char(\"\"))\n    print(first_non_repeated_char(\"abcd\"))\n    print(first_non_repeated_char(\"abc\"))",
      -4.73828125
    ],
    [
      "def first_non_repeated_char(string):\n    \"\"\"\n    Write a function first_non_repeated_char that takes a string and returns the first non-repeated character.\n    \"\"\"\n    # Your code here\n    \n    return string[0]\n    \n    \n\nif __name__ == '__main__':\n    string = 'aaa'\n    print first_non_repeated_char(string)\n    \n    string = 'abbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb",
      -5.07421875
    ],
    [
      "# Approach 1: Iterative\ndef first_non_repeated_char(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    \n    # Initialize all characters as repeated\n    first_non_repeated_char = 0\n    \n    for index in range(0, len(string)):\n        if string[index]!= string[first_non_repeated_char]:\n            first_non_repeated_char = index\n            \n    return first_non_repeated_char\n    \n# Approach 2: Recursive\ndef first_non_repeated_char_recursive(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    \n    # Base case: If string is empty, return 0\n    if len(string) == 0:\n        return 0\n    \n    # Base case: If string is of length 1, return 0\n    if len(string) == 1:\n        return 0\n    \n    # Base case: If string has only one character, return it\n    if len(string) == 2:\n        return string[0]\n    \n    # Base case: If string has only two characters, return the first\n    if len(string) == 3:\n        return string[0]\n    \n    # Base case: If string has more than three characters, return the first\n    # non-repeated character\n    return first_non_repeated_char_recursive(string[1:])\n    \n# Time Complexity: O(n)\n# Space Complexity: O(n)",
      -5.17578125
    ],
    [
      "# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\ndef find_non_repeated_char(string):\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    # TODO:\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    # TODO:\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    # TODO:\n    # - - - - - - - - - - - - - - - - - - - - - - - - - -",
      -5.2109375
    ],
    [
      "def first_non_repeated_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    if str == '':\n        return ''\n    return str[0]\n\nif __name__ == '__main__':\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated_char('abcabcabc') == 'a'\n    assert first_non_repeated",
      -5.34765625
    ],
    [
      "def first_non_repeated(string):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n\n    Input:\n    string - a string\n\n    Output:\n    The first non-repeated character in the string.\n    \"\"\"\n\n    non_repeated_character = ''\n\n    for character in string:\n        if character not in non_repeated_character:\n            non_repeated_character = character\n\n    return non_repeated_character\n\nif __name__ == \"__main__\":\n    print(first_non_repeated(\"hello world\"))\n    print(first_non_repeated(\"hello world\"))\n    print(first_non_repeated(\"hello world\"))",
      -5.859375
    ],
    [
      "def find_first_non_repeated_char(string):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    Input:\n        string: a string\n\n    Output:\n        A string of the first non-repeated character.\n    \"\"\"\n    # TODO: write a solution using a while loop.\n    # TODO: write a solution using a set to store the characters.\n    # TODO: write a solution using a list to store the characters.\n    # TODO: write a solution using a dictionary to store the characters.\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using a combination of set and list.\n\n    # TODO: write a solution using",
      -6.13671875
    ],
    [
      "def find_first_non_repeated(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    # TODO: write your code here\n    s = string.lower()\n    # s = string.upper()\n    # s = string.strip()\n    # s = string.strip(\"\\t\\n\\r\")\n    # s = string.strip(\" \")\n    # s = string.strip(\"\\n\")\n    # s = string.strip(\"\\n\\r\")\n    # s = string.strip(\"\\r\")\n    # s = string.strip(\"\\t\")\n    # s = string.strip(\"\\t\\n\")\n    # s = string.strip(\"\\n\\t\")\n    # s = string.strip(\"\\r\\n\")\n    # s = string.strip(\"\\t\\n\\r\")\n    # s = string.strip(\"\\n\\t\")\n    # s = string.strip(\"\\n\\r\")\n    # s = string.strip(\"\\t\")\n    # s = string.strip(\"\\t\\n\")\n    # s = string.strip(\"\\n\\t\")\n    # s = string.strip(\"\\r\\n\")\n    # s = string.strip(\"\\t\\n\\r\")\n    # s = string.strip(\"\\n\\t\")\n    # s = string.strip(\"\\r\\n\")\n    # s = string.strip(\"\\t\")\n    # s = string.strip(\"\\n\\t\")\n    # s = string.strip(\"\\r\\n\")\n    # s = string.strip(\"\\t\\n\\r\")\n    # s = string.strip(\"\\n\\t\")\n    # s = string.strip(\"\\r\\n\")\n    # s = string.strip(\"\\t\")\n    # s = string.strip(\"\\t\\n\")\n    # s = string.strip(\"\\n\\t\")\n    # s = string.strip(\"\\r\\n\")\n    # s = string.strip(\"\\t\")\n    # s = string.strip(\"\\n\\t\")\n    # s = string.strip(\"\\r\\n\")\n    # s",
      -6.16015625
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/first-non-repeated-character/problem\n\n# Complete the firstNonRepeated function below.\ndef firstNonRepeated(s):\n    # write your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            count = 0\n    return s[0] if count == 0 else s[1]\n\n\nif __name__ == '__main__':\n    test_cases = [\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"],\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"],\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"],\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"],\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p",
      -6.64453125
    ],
    [
      "# your code here\n\ndef find_first_non_repeated_char(string):\n    # write your code here\n    first_char = ''\n    for i in range(len(string)):\n        if first_char == '':\n            first_char = string[i]\n        elif string[i]!= first_char:\n            first_char = string[i]\n    return first_char\n\n\n\n#string = \"Hello\"\n#string = \"HELLO\"\n#string = \"HELLO\"\n#string = \"HELLO\"\nstring = \"Hello\"\nstring = \"Hello\"\nstring = \"Hello\"\nstring = \"Hello\"\nstring = \"HELLO\"\nstring = \"Hello\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO\"\nstring = \"HELLO",
      -7.625
    ],
    [
      "# Your First Python Function\ndef first_non_repeated(string):\n    \"\"\"\n    Returns the first non-repeated character in a string.\n    :param string: String to be searched.\n    :return: The first non-repeated character in a string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i]!= string[i+1]:\n            count = count + 1\n            if count > 1:\n                break\n    return string[i]\n\n# Test Cases\ntest_string = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      -7.9921875
    ],
    [
      "def first_non_repeated(string):\n    '''\n    >>> first_non_repeated('abcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n    'a'\n    >>> first_non_repeated('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n    'a'\n    '''\n    for i in range(0, len(string)):\n        if string[i]!= string[0]:\n            return string[i]\n    return string[0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -8.1171875
    ],
    [
      "def first_non_repeated_character(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    for i in range(0, len(string)):\n        if string[i]!= string[i-1]:\n            return string[i]\n    return -1\n\nif __name__ == '__main__':\n    s = \"aabcccdddee\"\n    print(first_non_repeated_character(s))",
      -8.21875
    ],
    [
      "def find_non_repeated_char(string):\n    # your code here\n    return_char = ''\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            return_char = string[i]\n        else:\n            return_char = ''\n    return return_char\n\nstring = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      -8.421875
    ],
    [
      "def get_first_non_repeated(s):\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return s[i]\n    return s[0]\n\n#test cases\n\n#print(get_first_non_repeated(\"ababab\"))\n#print(get_first_non_repeated(\"cababab\"))\n#print(get_first_non_repeated(\"abbbb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abababab\"))\n#print(get_first_non_repeated(\"abababab\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repeated(\"abbababb\"))\n#print(get_first_non_repe",
      -8.734375
    ],
    [
      "def find_first_non_repeated_char(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    prev = -1\n    for i in range(len(s)):\n        if prev == -1:\n            prev = s[i]\n        else:\n            if prev!= s[i]:\n                return i\n            prev = s[i]\n    return -1\n\nif __name__ == '__main__':\n    s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      -8.8515625
    ],
    [
      "def find_first_non_repeated(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    cnt = {}\n    for c in s:\n        if c not in cnt:\n            cnt[c] = 1\n        else:\n            cnt[c] += 1\n    for c, n in cnt.items():\n        if n > 1:\n            return c\n    return None\n\n\nif __name__ == '__main__':\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    print(find_first_non_repeated(s))",
      -9.015625
    ],
    [
      "def find_first_non_repeated(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    # Start at the end of the string and work backwards,\n    # looking for a character that is not repeated.\n    # Once we find one, we can break out of the loop.\n    # If we can't find one, then we will return the beginning of the string.\n    for i in range(len(str) - 1, -1, -1):\n        if str[i] not in str:\n            return i\n    return 0\n\nprint(find_first_non_repeated('hello'))\nprint(find_first_non_repeated('hellohellohello'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_repeated('hehehehehehehehehehehehehehe'))\nprint(find_first_non_",
      -9.2734375
    ],
    [
      "import re\n\ndef find_first_non_repeated_character(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated characters\n    pattern = re.compile(r'[a-z]{2,}')\n\n    # create a pattern to match all the repeated",
      -10.15625
    ],
    [
      "def find_first_non_repeated_char(string):\n    # write your code here\n    if string is None or len(string) == 0:\n        return -1\n    else:\n        first_non_repeated_char = -1\n        for i in range(len(string)):\n            if string[i]!= string[first_non_repeated_char]:\n                first_non_repeated_char = i\n        return first_non_repeated_char\n\n\nprint find_first_non_repeated_char(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      -10.203125
    ],
    [
      "def find_first_non_repeated(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    counter = 0\n    for c in string:\n        if c not in counter:\n            counter += 1\n        else:\n            return counter\n    return counter\n\n\nif __name__ == '__main__':\n    s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      -11.1953125
    ],
    [
      "#!/usr/bin/env python\n\n# Standard modules\nimport sys\n\n# Custom modules\nfrom utils import get_file_content\n\n\ndef main():\n    # Get the input string\n    input_str = get_file_content(sys.argv[1])\n\n    # Iterate over the string and find the first non-repeated character\n    for i in range(0, len(input_str)):\n        for j in range(i + 1, len(input_str)):\n            if input_str[i] == input_str[j]:\n                print('\\'%s\\' contains duplicate characters at positions %s and %s' % (input_str, i, j))\n                break\n        else:\n            print('\\'%s\\' does not contain duplicate characters at any position' % input_str)\n            break\n\n\nif __name__ == '__main__':\n    main()",
      -11.359375
    ],
    [
      "def find_first_non_repeated_char(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    # This is a simple implementation, but it might be more efficient\n    # to use a hash table for the repeated character case.\n    # return str[0]\n    # for i in range(0, len(str) - 1):\n    #     if str[i] == str[i + 1]:\n    #         return str[i]\n    #     else:\n    #         return str[i + 1]\n    return str[0]\n\ndef main():\n    \"\"\"\n    Simple Test\n    :return:\n    \"\"\"\n    print(find_first_non_repeated_char(\"abcabc\"))\n    print(find_first_non_repeated_char(\"abcabcabc\"))\n    print(find_first_non_repeated_char(\"abcabc\"))\n    print(find_first_non_repeated_char(\"abc\"))\n\nif __name__ == '__main__':\n    main()",
      -11.515625
    ],
    [
      "def find_non_repeated_char(string):\n    \"\"\"\n    :param string: String\n    :return: first non-repeated character\n    \"\"\"\n    # Use a list to keep track of the non-repeated characters\n    # Initialize list to be an empty list\n    non_repeated_char_list = []\n\n    # Use a dict to keep track of character occurrences\n    char_occurrences = {}\n\n    # Iterate through the string\n    for char in string:\n        # If the character is already in the list\n        # then add it to the list\n        if char in non_repeated_char_list:\n            non_repeated_char_list.append(char)\n        # If the character is not in the list\n        # then add it to the list\n        else:\n            non_repeated_char_list.append(char)\n\n            # Add the character to the dict\n            # Key is the character and value is 1\n            char_occurrences[char] = 1\n\n    # Find the character that appears the most times\n    # and return the character\n    max_char = max(char_occurrences, key=char_occurrences.get)\n\n    # Return the character\n    return max_char\n\n\nif __name__ == '__main__':\n    # Test 1\n    test_string = 'abcabcabc'\n    first_non_repeated_char = find_non_repeated_char(test_string)\n    print(first_non_repeated_char)\n\n    # Test 2\n    test_string = 'abcabcabc'\n    first_non_repeated_char = find_non_repeated_char(test_string)\n    print(first_non_repeated_char)\n\n    # Test 3\n    test_string = 'abcabcabc'\n    first_non_repeated_char = find_non_repeated_char(test_string)\n    print(first_non_repeated_char)",
      -15.3046875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}