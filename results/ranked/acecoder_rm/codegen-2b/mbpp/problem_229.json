{
  "problem": {
    "task_id": "MBPP/240",
    "prompt": "Write a function to replace the last element of the list with another list.",
    "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
    "test_list": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ],
    "challenge_test_list": [],
    "problem_id": 229
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def reorderList(self, head: ListNode) -> None:\n        if head is None:\n            return\n\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        new_head = slow.next\n        slow.next = None\n        slow = head\n        while slow.next:\n            slow = slow.next\n            fast = fast.next\n        fast.next = head\n        new_head.next = slow\n\n    def reorderList2(self, head: ListNode) -> None:\n        if head is None:\n            return\n\n        new_head = head\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next\n        new_head.next = slow.next\n        slow.next = head\n        new_head = slow\n        while new_head.next:\n            new_head = new_head.next\n            fast = fast.next\n        new_head.next = None\n        return head\n\n    def reorderList3(self, head: ListNode) -> None:\n        if head is None:\n            return\n\n        new_head = head\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next\n        new_head.next = slow.next\n        slow.next = head\n        new_head = slow\n        while new_head.next:\n            new_head = new_head.next\n            fast = fast.next\n        new_head.next = None\n        return head",
      2.837890625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while p.next:\n            p = p.next\n        k %= len(p.next.next)\n        for i in range(k):\n            p = p.next\n        p.next = p.next.next\n        return dummy.next",
      1.7529296875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {ListNode} node\n    # @return {ListNode}\n    def deleteNode(self, head, node):\n        while head and head.val!= node.val:\n            head = head.next\n        if head and head.val == node.val:\n            head.next = node.next\n        return head\n\n    def deleteNodeInLinkedList(self, head):\n        if not head:\n            return None\n        temp = head\n        pre = None\n        while temp:\n            if temp.next:\n                pre = temp\n                temp = temp.next\n            else:\n                if pre:\n                    pre.next = None\n                    temp = pre\n                    pre = None\n                else:\n                    temp = None\n        return head",
      1.68359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(-1)\n        dummy.next = head\n        while dummy.next is not None:\n            p = dummy\n            dummy = dummy.next\n            p.next = dummy.next\n            dummy.next = p\n        return dummy.next\n\n    def reverseList2(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        p = head\n        while p is not None:\n            t = p.next\n            p.next = p.next.next\n            p.next.next = p\n            p = t\n        return head\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    print Solution().reverseList(head)\n    print Solution().reverseList2(head)",
      1.1943359375
    ],
    [
      "from collections import deque\n\n\ndef last_element_replacement(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # https://leetcode.com/problems/replace-last-element-with-list/discuss/81713/Python-Solution-with-Deque\n    if not lst:\n        return lst\n    d = deque()\n    d.append(lst[-1])\n    lst[-1] = lst[-2]\n    return d.append(lst[-2])",
      0.97900390625
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-of-the-list/\n\n\nclass Solution(object):\n    def replaceLast(self, head, newHead):\n        \"\"\"\n        :type head: ListNode\n        :type newHead: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return newHead\n        if not newHead:\n            return head\n        if newHead.next:\n            newHead.next.next = head\n        return newHead",
      0.96923828125
    ],
    [
      "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums:\n            return\n        \n        if k == 0:\n            return nums\n        \n        k %= len(nums)\n        if k == 0:\n            return nums\n        \n        for i in range(k):\n            nums[-1], nums[0] = nums[0], nums[-1]\n        return nums",
      0.828125
    ],
    [
      "def last_in_list(list):\n    return list[-1]\n\n\n# Complete the function below.\ndef replace_last_in_list(list):\n    new_list = last_in_list(list)\n    list.pop()\n    list.append(new_list)\n    return list\n\n\nprint(replace_last_in_list([1, 2, 3]))",
      0.436279296875
    ],
    [
      "def last_element_with_replacement(list, replacement):\n    new_list = list[:-1]\n    new_list.append(replacement)\n    return new_list\n\n#Test Cases\n#Test 1\ntest_list = [1,2,3,4]\ntest_replacement = [5,6]\n\nprint(last_element_with_replacement(test_list, test_replacement))\n\n#Test 2\ntest_list = [1,2,3,4]\ntest_replacement = []\n\nprint(last_element_with_replacement(test_list, test_replacement))\n\n#Test 3\ntest_list = [1,2,3,4]\ntest_replacement = [5,6,7,8]\n\nprint(last_element_with_replacement(test_list, test_replacement))",
      0.34912109375
    ],
    [
      "def reverse_list(L):\n    return L[:len(L) - 1] + L[len(L) - 1:]\n\ndef main():\n    L = [1, 2, 3, 4, 5]\n    print(L)\n    print('reverse_list:', reverse_list(L))\n    print(L)\n\nif __name__ == \"__main__\":\n    main()",
      -0.0836181640625
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-of-the-list/\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def replaceLast(self, head, val):\n        if head is None:\n            return None\n        while head.next is not None:\n            head = head.next\n        head.next = ListNode(val)\n        return head",
      -0.08642578125
    ],
    [
      "from collections import deque\n\n\nclass Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        if n <= 1:\n            return\n        d = deque()\n        d.append(nums[n-1])\n        for i in range(n-2, -1, -1):\n            d.append(nums[i])\n        for i in range(n-k):\n            d.append(nums[i])\n        for i in range(k):\n            d.popleft()\n        for i in range(k, n-k):\n            d.append(nums[i])\n        for i in range(n-k, -1, -1):\n            d.append(nums[i])\n        for i in range(n-k, -1, -1):\n            nums[i] = d.pop()\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4]\n    Solution().rotate(nums, 1)\n    print(nums)",
      -0.146240234375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        pre = None\n        while head:\n            cur = head\n            head = head.next\n            cur.next = pre\n            pre = cur\n        return pre",
      -0.491455078125
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while p is not None:\n            q = p.next\n            p.next = q.next\n            q.next = p\n            p = q\n        return dummy.next",
      -0.6435546875
    ],
    [
      "def replace_last(list_, new_list):\n    if not list_:\n        return list_\n\n    if list_[-1] == list_[-2]:\n        return list_[:-2] + new_list\n    else:\n        return list_[:-1] + new_list",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def reverseLast(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n        newHead = head.next\n        head.next = None\n        while newHead is not None:\n            prev = newHead\n            newHead = newHead.next\n            prev.next = head\n            head = prev\n        return head",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def reverse(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        tail = head\n        while tail.next:\n            tail = tail.next\n            next = tail.next\n            tail.next = head\n            head = next\n        return head",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def rotateRight(self, head: ListNode, k: int) -> ListNode:\n        if not head or not head.next:\n            return head\n        \n        n = len(head.next)\n        k %= n\n        if k == 0:\n            return head\n        \n        # swap\n        head.next, head.next.next = head.next.next, head.next\n        # rotate\n        for i in range(n - k):\n            head = head.next\n        return head",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n        else:\n            return \"Nil\"\n\nclass Solution:\n    def reverseLast(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n        \n        new_head = head.next\n        head.next = None\n        head = new_head\n        \n        while head is not None:\n            next_node = head.next\n            head.next = None\n            head = next_node\n        \n        return head",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param head, a list node\n    # @param val, a list node\n    # @return a boolean\n    def reorderList(self, head, val):\n        if head is None:\n            return False\n        \n        if head.next is None:\n            return False\n        \n        new_head = head\n        while new_head.next is not None:\n            new_head = new_head.next\n        new_head.next = val\n        return True",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        p = head\n        while p.next:\n            p = p.next\n            k -= 1\n\n        n = p.next\n        p.next = None\n        while n:\n            n.val = n.val\n            n = n.next\n            k -= 1\n\n        head.val = head.val\n        head.next = n\n        return head",
      -0.85693359375
    ],
    [
      "def last_element_replaced(nums):\n    # +++your code here+++\n    # Write tests for your code here.\n    n = len(nums)\n    if n > 0:\n        return nums[n-1]\n    else:\n        return nums\n\nif __name__ == '__main__':\n    nums = [1,2,3]\n    print last_element_replaced(nums)",
      -0.85693359375
    ],
    [
      "# Write your code below\n\ndef swap_last(list):\n    list[-1], list[-2] = list[-2], list[-1]\n    return list\n\n# Your code should pass the following test cases:\n# [\n#   [[\"A\", \"B\", \"C\"], [\"D\", \"E\", \"F\"], [\"G\", \"H\", \"I\"]],\n#   [[\"A\", \"B\", \"C\"], [\"D\", \"E\", \"F\"], [\"G\", \"H\", \"I\"]],\n#   [[\"A\", \"B\", \"C\"], [\"D\", \"E\", \"F\"], [\"G\", \"H\", \"I\"]],\n# ]",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums:\n            return\n\n        nums.reverse()\n        nums.pop()\n        nums.reverse()\n\n        nums.insert(nums.pop(k % len(nums)))\n        nums.reverse()",
      -0.85791015625
    ],
    [
      "def last_to_last(lst):\n    return lst[:-1] + lst[-1]\n\ndef test():\n    lst = [1, 2, 3, 4, 5]\n    print last_to_last(lst)\n\nif __name__ == '__main__':\n    test()",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param head, a list node\n    # @param val, a list node\n    # @return a new list\n    def __replace_last(self, head, val):\n        # write your code here\n        if head == None or head.next == None:\n            return head\n        cur = head\n        while cur.next!= None:\n            cur = cur.next\n        cur.next = val\n        return head",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param head, a list node\n    # @param val, a list node\n    # @return a list node\n    def replaceLast(self, head, val):\n        slow = head\n        fast = head\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        slow.next = val\n        return head\n\nif __name__ == \"__main__\":\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next\n    val = ListNode(6, ListNode(7, ListNode(8, ListNode(9))))\n    Solution().replaceLast(head, val)\n    while head:\n        print head.val\n        head = head.next",
      -0.85791015625
    ],
    [
      "# TLE\ndef replace_last(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # TODO\n    pass\n\n# TLE\ndef replace_last(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # TODO\n    pass",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        k %= len(head.next.next)\n        if not k:\n            return head\n        head.next.next = self.rotateRight(head.next.next, k)\n        return head",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        \n        n = head.next\n        head.next = None\n        \n        while n:\n            n_next = n.next\n            n.next = head\n            head = n\n            n = n_next\n        \n        # rotate k times\n        for i in range(k):\n            head = head.next\n            \n        return head",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        \n        p = head\n        q = head\n        while p and q:\n            if p.next:\n                p = p.next\n                q = q.next\n            else:\n                break\n        \n        if not q:\n            return head\n        \n        # swap the two nodes\n        q.next = p\n        p.next = None\n        \n        # link the two nodes\n        p.next = q\n        return head",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-of-the-list/\n\nclass Solution(object):\n    def replaceLast(self, list, val):\n        \"\"\"\n        :type list: List[int]\n        :type val: int\n        :rtype: List[int]\n        \"\"\"\n        if not list or len(list) == 1:\n            return list\n        \n        last = list[-1]\n        if last == val:\n            return list[:-1]\n        \n        return [val] + list",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        new_head = head.next\n        head.next = None\n        head = new_head\n        while head.next:\n            next = head.next\n            head.next = next.next\n            next.next = head\n            head = next\n        return head",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def reverseLastElement(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head: return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next:\n            prev = cur\n            cur = cur.next\n            prev.next = cur.next\n            cur.next = prev\n        return dummy.next",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next: return head\n\n        dummy = ListNode(0)\n        dummy.next = head\n        p = dummy\n        while p.next:\n            p = p.next\n        p.next = None\n        \n        cur = dummy\n        while k > 0:\n            cur = cur.next\n            k -= 1\n        cur.next = head\n        return dummy.next",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/replace-last\n\ndef replace_last(head, new_list):\n    new_head = new_list[0]\n    if head is None:\n        return new_head\n    if len(head) == 1:\n        return new_head\n    if head[-1] == new_list[0]:\n        return new_head\n    new_head.append(head.pop(-1))\n    return new_head\n\nif __name__ == '__main__':\n    head = None\n    new_head = None\n    n = int(input())\n    for _ in range(n):\n        new_head = replace_last(head, input())\n        head = new_head\n    print(head)",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return None\n        curr = head\n        prev = None\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        prev.next = None\n        return prev",
      -0.8583984375
    ],
    [
      "def last_to_last(list):\n    \"\"\"\n    :type list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    i = len(list) - 1\n    while i >= 0:\n        list[i] = list[i - 1]\n        i -= 1\n    return list\n\nif __name__ == \"__main__\":\n    assert last_to_last([0, 1, 2]) == [0, 1, 2]\n    assert last_to_last([0, 1, 2, 3]) == [0, 1, 2, 3]\n    assert last_to_last([]) == []\n    assert last_to_last([1, 2, 3]) == [1, 2, 3]",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        while slow:\n            tmp = slow.next\n            slow.next = tmp.next\n            tmp.next = fast.next\n            fast.next = tmp\n            slow = slow.next\n        return head",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a list node\n    # @param val, an integer\n    # @return a list node\n    def insert(self, head, val):\n        new_node = ListNode(val)\n        new_node.next = head\n        return new_node\n\n# test\ns = Solution()\nl = ListNode(1)\nl.next = ListNode(2)\nl.next.next = ListNode(3)\nl.next.next.next = ListNode(4)\nl.next.next.next.next = ListNode(5)\n\n# print(s.insert(l, -1))\n# print(l.val)\n\n# print(s.insert(l, -1))\n# print(l.val)",
      -0.85888671875
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-of-the-list-with-another-list/\n# \n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def replaceLast(self, head, val):\n        if head is None or head.next is None:\n            return head\n        old = head\n        new = ListNode(val)\n        while old.next is not None:\n            old = old.next\n            new.next = old.next\n        old.next = new\n        return head\n\nif __name__ == \"__main__\":\n    head = ListNode(1, ListNode(2, ListNode(3)))\n    head = Solution().replaceLast(head, 4)\n    while head is not None:\n        print(head.val)\n        head = head.next",
      -0.85888671875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def replaceLast(self, head: ListNode, newHead: ListNode) -> ListNode:\n        if head is None:\n            return newHead\n        if head.next is None:\n            return newHead\n        \n        current = head\n        previous = head\n        while current:\n            previous = current\n            current = current.next\n        previous.next = newHead\n        return head",
      -0.85888671875
    ],
    [
      "def replace_last(l, val):\n    if len(l) == 0:\n        return l\n    else:\n        return [val] + l\n\n# Your function will be called as the following:\n# replace_last(l, val)\n\n# Your function should not modify l.\n# Only return a new list.",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/last-element-of-a-linked-list\n\n\ndef last_element(head):\n    \"\"\"\n    :type head: ListNode\n    :rtype: ListNode\n    \"\"\"\n    if not head:\n        return None\n\n    while head.next:\n        head = head.next\n    head.next = head.next.next\n    return head.next\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n\n    head = last_element(head)\n    print(head.val)\n    assert head.val == 5",
      -0.85888671875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def swap(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        # swap with next\n        next = head.next.next\n        head.next.next = head\n        head.next = next\n        return head\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# obj.swap(head)",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def reverseLast(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        temp = head.next\n        head.next = None\n        while temp is not None:\n            next_temp = temp.next\n            temp.next = head\n            head = temp\n            temp = next_temp\n        return head",
      -1.6416015625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def reverseLast(self, head: ListNode) -> ListNode:\n        if head is None:\n            return None\n        last = head\n        while last.next is not None:\n            last = last.next\n        \n        p = last\n        last = last.next\n        \n        p.next = None\n        return last",
      -1.7060546875
    ],
    [
      "# https://www.hackerrank.com/challenges/last-element-of-the-list-with-a-new-list-given-by-a-function\n\n\ndef last_element_with_new_list(lst, new_list):\n    return lst[:-1] + new_list\n\nlst = [1,2,3]\nnew_list = [4,5,6]\n\nprint(last_element_with_new_list(lst, new_list))",
      -1.70703125
    ],
    [
      "# Your function should return the list with the modified last element.\n\n# Example:\n# Input: [1,2,3]\n# Output: [1,2,3]\n# Explanation:\n# The original list is [1,2,3].\n# The first element is replaced with [1,2,3], the second element is replaced with [2,3], and the third element is replaced with [3].\n\n# Note:\n# The input list is always valid, each element is an integer, and the input list has length no more than 50.\n\nclass Solution(object):\n    def replaceLast(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: List[int]\n        \"\"\"\n        if len(nums) == 0:\n            return nums\n        i = len(nums) - 1\n        while i > 0 and nums[i] == nums[i-1]:\n            i -= 1\n        nums[i] = val\n        return nums",
      -1.7099609375
    ],
    [
      "# https://oj.leetcode.com/problems/replace-last-element-with-list/\n# \n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {ListNode} node\n    # @return {ListNode}\n    def replaceLast(self, head):\n        if head == None:\n            return None\n        \n        pre = head\n        curr = head.next\n        \n        while curr!= None:\n            pre = pre.next\n            curr = curr.next\n        \n        pre.next = None\n        return head\n\nif __name__ == '__main__':\n    s = Solution()\n    head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6))))))\n    head = s.replaceLast(head)\n    print(head.val)\n    while head!= None:\n        print(head.val)\n        head = head.next",
      -1.935546875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def reverseLast(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n\n        pre = None\n        cur = head\n        while cur.next is not None:\n            pre = cur\n            cur = cur.next\n        pre.next = cur.next\n        cur.next = None\n        return head\n\n\nif __name__ == '__main__':\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n\n    solution = Solution()\n    print solution.reverseLast(head)",
      -1.96484375
    ],
    [
      "class Solution(object):\n    def reverseLastElement(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        while curr.next:\n            next = curr.next\n            curr.next = next.next\n            next.next = curr\n            curr = next\n        curr.next = dummy.next\n        return dummy.next",
      -2.208984375
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-of-the-list-with-another-list/discuss/390150/C++-Solution-O(1)\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def replaceLast(self, head, val):\n        if not head or not head.next:\n            return head\n        p = head\n        while p.next:\n            p = p.next\n        p.next = ListNode(val, None)\n        return head",
      -2.29296875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while prev.next and prev.next.next:\n            next = prev.next.next\n            prev.next.next = next.next\n            prev.next = next\n            next.next = prev.next\n            prev = prev.next\n        return dummy.next",
      -2.51171875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def swapPairs(self, head):\n        if not head or not head.next:\n            return head\n        new_head = ListNode(-1)\n        new_head.next = head\n        cur_node = new_head\n        while cur_node.next:\n            cur_node.next = cur_node.next.next\n            cur_node = cur_node.next\n        cur_node.next = head\n        return new_head.next",
      -2.77734375
    ],
    [
      "#!/usr/bin/env python\n\n# These are the two methods we will be testing\ndef replace_last(lst, val):\n    # this one is the most basic:\n    lst[-1] = val\n\ndef replace_last_with_list(lst, val_list):\n    # this one is a bit more complex:\n    lst[-1] = val_list\n\n# Here is the tests:\n\n# Test 1:\ndef test_1():\n    lst = [1,2,3]\n    val_list = [4,5,6]\n    replace_last(lst, val_list)\n    assert lst == [4,5,6]\n    print \"Test 1 passed\"\n\n# Test 2:\ndef test_2():\n    lst = [1,2,3]\n    val_list = [4,5,6]\n    replace_last_with_list(lst, val_list)\n    assert lst == [4,5,6]\n    print \"Test 2 passed\"\n\n# Test 3:\ndef test_3():\n    lst = [1,2,3]\n    val_list = [4,5,6]\n    replace_last(lst, val_list)\n    assert lst == [4,5,6]\n    print \"Test 3 passed\"\n\n# Test 4:\ndef test_4():\n    lst = [1,2,3]\n    val_list = [4,5,6]\n    replace_last_with_list(lst, val_list)\n    assert lst == [4,5,6]\n    print \"Test 4 passed\"\n\n# Test 5:\ndef test_5():\n    lst = [1,2,3]\n    val_list = [4,5,6]\n    replace_last(lst, val_list)\n    assert lst == [4,5,6]\n    print \"Test 5 passed\"\n\n# Test 6:\ndef test_6():\n    lst = [1,2,3]\n    val_list = [4,5,6]\n    replace_last_with_list(l",
      -3.22265625
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-with-another-list/discuss/283300/Python-DP-with-one-pass-O(1)\n\nclass Solution(object):\n    def replaceLast(self, list, val):\n        \"\"\"\n        :type list: List[int]\n        :type val: int\n        :rtype: List[int]\n        \"\"\"\n        # if val is in list:\n        #     return list.copy()\n        # else:\n        #     if len(list) == 0:\n        #         return val\n        #     else:\n        #         return list[:len(list)-1] + [val] + list[len(list)-1:]\n\n        if len(list) == 0:\n            return val\n        else:\n            return list[:len(list)-1] + [val] + list[len(list)-1:]",
      -3.44140625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        # k is the number of times to rotate\n        # 1. swap the head and the last node\n        # 2. rotate the last node by k steps\n        # 3. return the new head\n        if head is None or head.next is None:\n            return head\n        head_next = head.next\n        head.next = None\n        head = head_next\n        k = k % len(head_next.next)\n        # rotate the last node by k steps\n        for _ in range(k):\n            head_next = head_next.next\n        head_next.next = head\n        head = head_next\n        return head\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.rotateRight(head,k)",
      -3.50390625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        new_head = None\n        while head:\n            curr = head\n            new_head = ListNode(curr.val)\n            curr = curr.next\n            new_head.next = curr\n            curr = new_head\n            while curr:\n                next = curr.next\n                curr.next = curr\n                curr = next\n            head = new_head\n        return new_head",
      -3.595703125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if head is None:\n            return head\n        newHead = head\n        while head.next is not None:\n            temp = head.next\n            head.next = temp.next\n            temp.next = newHead\n            newHead = temp\n            head = head.next\n        return newHead\n\n    def reverseListRecur(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n        newHead = head.next\n        head.next = None\n        newHead.next = self.reverseListRecur(newHead.next)\n        return newHead\n\n    def reverseList(self, head: ListNode) -> ListNode:\n        if head is None:\n            return head\n        newHead = None\n        curr = head\n        while curr.next is not None:\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = newHead\n            newHead = temp\n            curr = curr.next\n        return newHead\n\n    def reverseListRecur(self, head: ListNode) -> ListNode:\n        if head is None:\n            return head\n        newHead = head\n        curr = head\n        while curr.next is not None:\n            temp = curr.next\n            curr.next = None\n            newHead = temp\n            curr = temp.next\n        return newHead\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.reverseList(param_1)",
      -3.826171875
    ],
    [
      "# https://www.hackerrank.com/challenges/replacement-of-last-element-of-the-list/problem\n\ndef replace_last(lst):\n    if len(lst) == 0:\n        return lst\n    else:\n        return [lst[-1]] + lst[:-1]\n\n# Test Cases\nlst = [1,2,3,4]\nlst = replace_last(lst)\nprint(lst)\n\nlst = [1,2,3]\nlst = replace_last(lst)\nprint(lst)",
      -3.89453125
    ],
    [
      "class Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = head\n        q = head.next.next\n        while p and q:\n            if p.val > q.val:\n                p.next, q.next = q, p\n                p = q\n                q = p.next.next\n            else:\n                p = p.next\n                q = q.next\n        return head",
      -4.078125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self is None:\n            return \"null\"\n        else:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n\n\nclass Solution:\n    def reverseLast(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # base case\n        if head is None:\n            return None\n\n        # reverse the next node\n        head.next = self.reverseLast(head.next)\n\n        # reverse the node itself\n        head.val, head.next = head.next.val, head.next.next\n        return head\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    print(head)\n    head = Solution().reverseLast(head)\n    print(head)",
      -4.1484375
    ],
    [
      "# Your function will be called as such:\n# replaceLast(list, newList)\n#\n# Example 1:\n# Given 1->2->3->4->5->NULL and targetList = [2,3,5,7,8],\n# return [1->2->3->4->5->8].\n#\n# Example 2:\n# Given 1->2->3->4->5->NULL and targetList = [2,7,8],\n# return [1->2->3->4->5->7->8].\n#\n# Note:\n# The order of the elements in the list does not matter.\n# The order of the target list does not matter.\n# The number of elements in the list and the target list will not be more than 1000.\n# The list is guaranteed to have unique elements.\n# The last element of the list is guaranteed to be a null element.\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def replaceLast(self, head, newHead):\n        \"\"\"\n        :type head: ListNode\n        :type newHead: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # Use two pointers.\n        # First pointer to the new head, second pointer to the new head.\n        pre = head\n        cur = head\n        while cur:\n            pre = cur\n            cur = cur.next\n        pre.next = newHead\n        return head",
      -4.33984375
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-of-the-list/discuss/260180/Python-Python-Solution-My-Implementation\n\nclass Solution(object):\n    def replaceLast(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        if head.next == None:\n            head.next = ListNode(val)\n            return head\n        pre = head\n        while pre.next and pre.next.next:\n            pre = pre.next\n        pre.next = ListNode(val)\n        return head",
      -4.5234375
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-with-a-list/\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def replaceLast(self, head, val):\n        p = head\n        while p:\n            p = p.next\n        new_head = ListNode(val)\n        new_head.next = p\n        return new_head",
      -4.625
    ],
    [
      "def replace_last_element(original_list, new_list):\n    \"\"\"\n    :type original_list: List[int]\n    :type new_list: List[int]\n    :rtype: void Do not return anything, modify original_list in-place instead.\n    \"\"\"\n    original_list.pop()\n    original_list.append(new_list)\n\n\n# Your Solution Here\n# Test cases\n# [1,2,3]\n# [1,2]\n# [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n# [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n# [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,",
      -4.90625
    ],
    [
      "# Your function should return the new list.\n\n# Example 1:\n# Input: [1,2,3], 1\n# Output: [1,2,3,1]\n# Example 2:\n# Input: [1,2,3], 3\n# Output: [1,2,3]\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def deleteNode(self, node, val):\n        if not node:\n            return node\n        if node.val == val:\n            node.val = node.next.val\n            node.next = node.next.next\n        else:\n            node.val = self.deleteNode(node.next, val)\n        return node\n\n# Example 1:\n\n# Input: [1,2,3], 1\n# Output: [1,2,3,1]\n# Example 2:\n\n# Input: [1,2,3], 3\n# Output: [1,2,3]\n\n\n\n# Note:\n\n# The input list will have at least one element.\n# The last element of the input list is always valid.",
      -5.125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        if self.next is None:\n            return str(self.val)\n        else:\n            return str(self.val) + \"->\" + str(self.next)\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        h = dummy\n        while h:\n            p = h\n            while p.next:\n                p = p.next\n            p.next = dummy\n            dummy = dummy.next\n            h = p\n            if k % 2 == 1:\n                k = k - 1\n        return dummy.next",
      -5.15234375
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-with-a-list/#/description\n\nclass Solution(object):\n    def replaceLast(self, list, target):\n        \"\"\"\n        :type list: List[int]\n        :type target: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not list or not target:\n            return list\n\n        # find the last element of the target list\n        last_idx = len(target) - 1\n        last_element = target[last_idx]\n\n        # start from the end of the list\n        for i in reversed(range(len(list))):\n            if list[i] == last_element:\n                # replace the last element with the target list\n                list[i] = target[0]\n                # remove the last element of the target list\n                target.pop()\n\n                # return the list\n                return list\n        return list\n\nclass Solution2(object):\n    def replaceLast(self, list, target):\n        \"\"\"\n        :type list: List[int]\n        :type target: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not list or not target:\n            return list\n\n        # find the last element of the target list\n        last_idx = len(target) - 1\n        last_element = target[last_idx]\n\n        # start from the end of the list\n        for i in reversed(range(len(list))):\n            if list[i] == last_element:\n                # replace the last element with the target list\n                list[i] = target[0]\n                # remove the last element of the target list\n                target.pop()\n\n                # return the list\n                return list\n        return list\n\n\nif __name__ == \"__main__\":\n    assert Solution().replaceLast([1, 2, 3], [1]) == [1, 2, 3]\n    assert Solution().replaceLast([1, 2, 3], [3]) == [1, 2, 3]\n    assert Solution().replaceLast([1, 2, 3], [2]) == [1, 3, 3]\n    assert Solution().replaceLast([1",
      -5.3671875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        p = head\n        while p.next is not None:\n            q = p.next\n            p.next = q.next\n            q.next = head\n            head = q\n        return p\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    l = ListNode(1)\n    l.next = ListNode(2)\n    l.next.next = ListNode(3)\n    print s.reverseList(l)\n    print l\n    l.next.next = ListNode(4)\n    l.next.next.next = ListNode(5)\n    print s.reverseList(l)\n    print l",
      -5.6953125
    ],
    [
      "def last_element_replace(list, element, new_element):\n    \"\"\"\n    :type list: ListNode\n    :type element: ListNode\n    :type new_element: ListNode\n    :rtype: ListNode\n    \"\"\"\n    pass\n\n\n# Your LastElementReplace object will be instantiated and called as such:\n# obj = LastElementReplace(list, element, new_element)\n# param_1 = obj.last_element_replace(list, element, new_element)",
      -6.265625
    ],
    [
      "def last_to_second(last_list, second_list):\n    \"\"\"\n    Write the function last_to_second.\n    last_list: a list of integers\n    second_list: a list of integers\n    \"\"\"\n    last_list.append(second_list[0])\n    last_list.pop(0)\n    return last_list\n\ndef test():\n    assert last_to_second([1,2,3], [4,5,6,7]) == [4,5,6,7]\n    assert last_to_second([1,2,3], [1,2,3]) == [1,2,3]\n    assert last_to_second([1,2,3], [4,5,6]) == [4,5,6]\n\nif __name__ == '__main__':\n    test()",
      -6.67578125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def reverseBetween(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if m == n:\n            return head\n        if m == n + 1:\n            return head\n        if m > n:\n            return self.reverseBetween(head, n, m - 1)\n        else:\n            l = self.reverseBetween(head, m - 1, n)\n            r = self.reverseBetween(head, n, m)\n            return self.reverseList(l, r)\n\n    def reverseList(self, l, r):\n        curr = l\n        while curr and curr.next:\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = curr\n            curr = temp\n        return l\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n\n    print Solution().reverseBetween(head, 2, 4)\n    print Solution().reverseBetween(head, 1, 3)\n    print Solution().reverseBetween(head, 3, 1)\n    print Solution().reverseBetween(head, 2, 3)",
      -6.91796875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def replaceLast(self, head, newHead):\n        \"\"\"\n        :type head: ListNode\n        :type newHead: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return newHead\n        new_head = head\n        while new_head.next:\n            new_head = new_head.next\n        new_head.next = newHead\n        return head\n\n\nif __name__==\"__main__\":\n    print \"------\"\n    Solution().replaceLast([1,2,3], [4,5,6])\n    print \"------\"\n    Solution().replaceLast([1], [1,2])\n    print \"------\"\n    Solution().replaceLast([1,2,3,4,5,6], [7,8,9])",
      -7.0546875
    ],
    [
      "# Your function will be called as follows:\n# replace_last(l, x) where l is the list and x is the element to replace the last element of the list\n\ndef replace_last(l, x):\n    # write your code here\n    # Your function should return the new list.\n    return l[:-1] + [x] + l[-1:]\n\n# Test Cases\nprint(\"Test case 1:\")\nl = [1, 2, 3]\nprint(replace_last(l, 4))\nprint(l)\n\nprint(\"Test case 2:\")\nl = [1, 2, 3]\nprint(replace_last(l, [4, 5, 6]))\nprint(l)\n\nprint(\"Test case 3:\")\nl = [1, 2, 3]\nprint(replace_last(l, [4, 5, 6]))\nprint(l)\n\nprint(\"Test case 4:\")\nl = [1, 2, 3]\nprint(replace_last(l, [4, 5, 6]))\nprint(l)\n\nprint(\"Test case 5:\")\nl = [1, 2, 3]\nprint(replace_last(l, [4, 5, 6]))\nprint(l)",
      -7.80078125
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def replaceLast(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        if not val:\n            return head.next\n        # find the last element\n        slow = head\n        fast = head.next\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        # move the last element to the end\n        fast.next = val\n        return head\n\n\nif __name__ == \"__main__\":\n    print Solution().replaceLast(head=ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))), val=ListNode(6))",
      -7.88671875
    ],
    [
      "__author__ = 'Danyang'\nclass Solution:\n    def rotate(self, nums, k):\n        \"\"\"\n        k: number of steps to rotate\n\n        O(n) time, O(1) space\n        \"\"\"\n        n = len(nums)\n        if n<2:\n            return nums\n        k %= n\n        if k==0:\n            return nums\n        # first reverse\n        nums.reverse()\n        # then rotate\n        for i in range(n-k):\n            nums.append(nums.pop())\n        # finally, reverse again\n        nums.reverse()\n        return nums\n\n\nif __name__==\"__main__\":\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 3)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 4)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 5)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 6)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 7)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 8)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 9)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 10)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 11)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 12)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 13)\n    print Solution().rotate([1,2,3,4,5,6,7,8,9], 14)\n    print Solution().rotate([1,2,3",
      -8.3828125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        p1 = head\n        p2 = head.next\n        p3 = p2.next\n\n        while p3:\n            p1.next = p3\n            p2.next = p3.next\n            p3 = p3.next\n            p2 = p2.next\n\n        p1.next = p2\n\n        return head",
      -8.390625
    ],
    [
      "# https://www.hackerrank.com/challenges/replace-last-element\n\ndef replace_last_element(list_obj):\n    if len(list_obj) == 0:\n        return list_obj\n\n    return list_obj[:-1] + [list_obj[-1]] + list_obj[:-1]\n\n# Your code here.\n\n# list_obj = [1,2,3,4,5]\n# replace_last_element(list_obj)\n# print(list_obj)\n# list_obj = [1,2,3,4,5]\n# replace_last_element(list_obj)\n# print(list_obj)\n\n# list_obj = [1,2,3,4,5]\n# replace_last_element(list_obj)\n# print(list_obj)\n\nlist_obj = [1,2,3,4,5]\nreplace_last_element(list_obj)\nprint(list_obj)",
      -9.203125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def reorderList(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = dummy\n        prev = dummy\n        \n        while curr.next:\n            prev = curr\n            curr = curr.next\n            \n        curr.next = head\n        \n        return dummy.next\n\nclass Solution2:\n    def reorderList(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = dummy\n        prev = dummy\n        \n        while curr.next:\n            prev = curr\n            curr = curr.next\n            \n        curr.next = head\n        \n        return dummy.next\n\nif __name__ == '__main__':\n    s = Solution()\n    s.reorderList([1,2,3])\n    s.reorderList([1,2,3,4,5])\n    s.reorderList([1,2,3,4,5,6,7,8,9])\n    s.reorderList([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80",
      -9.7421875
    ],
    [
      "# https://www.hackerrank.com/challenges/singly-linked-list-replace-with-list\ndef replaceLast(head, newNode):\n    if head is None or newNode is None:\n        return\n    newNode.next = head\n    head = newNode\n    return head\n\n# https://www.hackerrank.com/challenges/singly-linked-list-delete-node\ndef deleteNode(head, nodeToDelete):\n    if head is None or nodeToDelete is None:\n        return\n    temp = head\n    while temp.next is not None:\n        if temp.next is nodeToDelete:\n            temp.next = nodeToDelete.next\n        else:\n            temp = temp.next\n    return head\n\n# https://www.hackerrank.com/challenges/singly-linked-list-delete-node-with-data\ndef deleteNodeWithData(head, nodeToDelete, data):\n    if head is None or nodeToDelete is None:\n        return\n    temp = head\n    while temp.next is not None:\n        if temp.next is nodeToDelete:\n            temp.data = data\n            temp.next = nodeToDelete.next\n        else:\n            temp = temp.next\n    return head\n\n# https://www.hackerrank.com/challenges/singly-linked-list-delete-node-with-data-2\ndef deleteNodeWithData2(head, nodeToDelete, data):\n    if head is None or nodeToDelete is None:\n        return\n    temp = head\n    while temp.next is not None:\n        if temp.next is nodeToDelete:\n            temp.data = data\n            temp.next = nodeToDelete.next\n        else:\n            temp = temp.next\n    return head\n\n# https://www.hackerrank.com/challenges/singly-linked-list-delete-node-with-data-3\ndef deleteNodeWithData3(head, nodeToDelete, data):\n    if head is None or nodeToDelete is None:\n        return\n    temp = head\n    while temp.next is not None:\n        if temp.next is nodeToDelete:\n            temp.",
      -10.171875
    ],
    [
      "# Write your code here\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\n#!/usr/bin/python\n\nclass Solution(object):\n    def __init__(self, l):\n        \"\"\"\n        :type l: ListNode\n        \"\"\"\n        self.head = l\n        self.length = 0\n        \n    def reverse(self, head):\n        if head is None:\n            return None\n        \n        # reverse the list\n        new_head = None\n        while head is not None:\n            temp = head.next\n            head.next = new_head\n            new_head = head\n            head = temp\n        \n        # append the new list to the end of the list\n        new_head.next = None\n        new_head = self.reverse(new_head)\n        \n        # return the reversed list\n        return new_head\n        \n    def reverse_recur(self, head, p, n):\n        if p is None:\n            return head\n        \n        if p.next is None:\n            return p.next\n        \n        # reverse the list\n        new_head = None\n        while p is not None:\n            temp = p.next\n            p.next = new_head\n            new_head = p\n            p = temp\n        \n        # append the new list to the end of the list\n        new_head.next = None\n        new_head = self.reverse_recur(new_head, new_head.next, n)\n        \n        # return the reversed list\n        return new_head\n        \n    def reverse(self, head):\n        \"\"\"\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        \n        # count the length\n        self.length = 0\n        p = head\n        while p is not None:\n            self.length += 1\n            p = p.next\n        \n        # reverse the list\n        new_head = None\n        p = head\n        n = self.length / 2\n        \n        while p is not None:\n            # append the new list to the end of the list\n            temp = p.next\n            p.next = new_head",
      -10.8671875
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a ListNode\n    def rotateRight(self, head, k):\n        if not head or not head.next:\n            return head\n        slow, fast = head, head.next\n        for i in range(k):\n            if not fast:\n                return head\n            slow, fast = slow.next, fast.next\n        fast.next = slow.next\n        slow.next = None\n        return head\n\n    def rotateRight2(self, head, k):\n        if not head or not head.next:\n            return head\n        slow, fast = head, head.next\n        for i in range(k):\n            if not fast:\n                return head\n            slow, fast = slow.next, fast.next\n        slow.next = fast.next\n        fast.next = None\n        return head\n\nif __name__ == '__main__':\n    k = 2\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(",
      -12.1640625
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-of-the-list-with-another-list/\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def replaceLast(self, head, newHead):\n        \"\"\"\n        :type head: ListNode\n        :type newHead: ListNode\n        :rtype: ListNode\n        \"\"\"\n        newHead.next = head.next\n        head.next = newHead\n        return newHead\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    print Solution().replaceLast(head, ListNode(5))\n    print Solution().replaceLast(head, ListNode(6))\n    print Solution().replaceLast(head, ListNode(7))\n    print Solution().replaceLast(head, ListNode(8))\n    print Solution().replaceLast(head, ListNode(9))\n    print Solution().replaceLast(head, ListNode(10))",
      -12.4921875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        if self is None:\n            return \"None\"\n        else:\n            return str(self.val)\n\nclass Solution:\n    # @param {ListNode} head\n    # @param {ListNode} newHead\n    # @return {ListNode}\n    def rotateRight(self, head, n):\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while n > 0:\n            prev = prev.next\n            n -= 1\n        dummy.next = prev.next\n        prev.next = None\n        return dummy.next",
      -12.78125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head is None:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = dummy.next\n        while cur is not None:\n            next = cur.next\n            cur.next = prev\n            prev = cur\n            cur = next\n\n        return dummy.next\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.reverseList(param_1)",
      -12.859375
    ],
    [
      "# Approach 1: Recursive\n# Time complexity: O(n)\n# Space complexity: O(1)\n#\n# def replace_last_element(self, new_list):\n#     if self.size() == 0:\n#         return new_list\n#     else:\n#         self[-1] = new_list[0]\n#         return replace_last_element(self.slice(0, -1), new_list[1:])\n#\n# def replace_last_element(self, new_list):\n#     if len(self) == 0:\n#         return new_list\n#     else:\n#         self[-1] = new_list[0]\n#         return replace_last_element(self.slice(0, -1), new_list[1:])\n\n# Approach 2: Iterative\n# Time complexity: O(n)\n# Space complexity: O(1)\n#\n# def replace_last_element(self, new_list):\n#     for i in reversed(xrange(0, self.size())):\n#         if self[i] == new_list[0]:\n#             self[i] = new_list[1]\n#             return replace_last_element(self.slice(i+1), new_list[1:])\n#\n# def replace_last_element(self, new_list):\n#     for i in reversed(xrange(0, self.size())):\n#         if self[i] == new_list[0]:\n#             self[i] = new_list[1]\n#             return replace_last_element(self.slice(i+1), new_list[1:])\n#\n# def replace_last_element(self, new_list):\n#     for i in reversed(xrange(0, self.size())):\n#         if self[i] == new_list[0]:\n#             self[i] = new_list[1]\n#             return replace_last_element(self.slice(i+1), new_list[1:])\n\n# Approach 3: One Pass\n# Time complexity: O(n)\n# Space complexity: O(1)\n#\n# def replace",
      -13.15625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if k == 0:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        while k > 0:\n            k -= 1\n            head = head.next\n        \n        head.next = dummy.next\n        dummy.next = head\n        \n        return dummy.next",
      -13.328125
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-with-list/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution:\n    def replaceLast(self, head, newNode):\n        \"\"\"\n        :type head: ListNode\n        :type newNode: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not newNode:\n            return head\n        newNode.next = head\n        return newNode\n\n    def test(self):\n        head = ListNode(1)\n        newNode = ListNode(2)\n        newNode.next = ListNode(3)\n        head.next = newNode\n\n        newNode = ListNode(4)\n        newNode.next = ListNode(5)\n        newNode.next.next = ListNode(6)\n        head.next.next = newNode.next\n\n        head = self.replaceLast(head, newNode)\n        while head:\n            print(head.val)\n            head = head.next\n\ns = Solution()\ns.test()",
      -13.40625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def swapPairs(self, head):\n        if not head or not head.next:\n            return head\n\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n        # swap\n        fast.next = slow.next\n        slow.next = head\n        return head\n\n\nif __name__ == '__main__':\n    assert Solution().swapPairs(ListNode(1, ListNode(2, ListNode(3)))) == ListNode(3, ListNode(1, ListNode(2, ListNode(3))))\n\n    # assert Solution().swapPairs(ListNode(1, ListNode(2, ListNode(3)))) == ListNode(3, ListNode(1, ListNode(2, ListNode(3))))",
      -13.7109375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        # Note:\n        # k = -k\n        if not head or not head.next:\n            return head\n\n        dummy = ListNode(-1)\n        dummy.next = head\n        p = dummy\n        while p.next:\n            p = p.next\n        p.next = None\n\n        k %= len(p.next.val)\n        p = dummy\n        while k:\n            p = p.next\n            k -= 1\n\n        p.next = p.next.next\n        return dummy.next\n\n\nif __name__ == '__main__':\n    # n1 = ListNode(1)\n    # n2 = ListNode(2)\n    # n3 = ListNode(3)\n    # n4 = ListNode(4)\n    # n5 = ListNode(5)\n    # n6 = ListNode(6)\n    # n7 = ListNode(7)\n    # n8 = ListNode(8)\n    # n9 = ListNode(9)\n    # n10 = ListNode(10)\n    # n11 = ListNode(11)\n    # n12 = ListNode(12)\n    # n13 = ListNode(13)\n    # n14 = ListNode(14)\n    # n15 = ListNode(15)\n    # n16 = ListNode(16)\n    # n17 = ListNode(17)\n    # n18 = ListNode(18)\n    # n19 = ListNode(19)\n    # n20 = ListNode(20)\n    # n21 = ListNode(21)\n    # n22 = ListNode(22)\n    # n23 = ListNode(23)\n    # n24 = ListNode(24)\n    # n25 = ListNode(25)\n    # n26 = ListNode(26)",
      -14.5234375
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-with-list/\n\nclass Solution(object):\n    def replaceLast(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        if len(lists) == 0:\n            return lists\n        if len(lists) == 1:\n            return lists\n        \n        # 1. get the last element\n        last_element = lists[len(lists)-1]\n        \n        # 2. get the next elements\n        next_elements = lists[len(lists)-2]\n        \n        # 3. replace the last element with the next elements\n        for i in range(len(next_elements)):\n            last_element[i] = next_elements[i]\n        \n        # 4. return the lists\n        return lists[:len(lists)-1]",
      -14.6640625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\nclass Solution:\n\t# @param head, a ListNode\n\t# @param val, an integer\n\t# @return a ListNode\n\tdef __init__(self, head, val):\n\t\tself.head = head\n\t\tself.val = val\n\t\n\t# @return a ListNode\n\tdef reverseList(self):\n\t\tcur = self.head\n\t\tpre = None\n\t\twhile cur:\n\t\t\tnext = cur.next\n\t\t\tcur.next = pre\n\t\t\tpre = cur\n\t\t\tcur = next\n\t\t\n\t\tself.head = pre\n\t\treturn self.head\n\t\t\n\t# @return a ListNode\n\tdef insert(self, node):\n\t\tcur = self.head\n\t\tpre = None\n\t\twhile cur:\n\t\t\tnext = cur.next\n\t\t\tcur.next = pre\n\t\t\tpre = cur\n\t\t\tcur = next\n\t\t\n\t\tpre.next = node\n\t\tself.head = node\n\t\treturn self.head\n\t\t\n\t# @return a ListNode\n\tdef delete(self, node):\n\t\tcur = self.head\n\t\tpre = None\n\t\twhile cur:\n\t\t\tnext = cur.next\n\t\t\tif cur == node:\n\t\t\t\tcur = next\n\t\t\t\tbreak\n\t\t\tpre = cur\n\t\t\tcur = next\n\t\t\n\t\tif cur == node:\n\t\t\tpre.next = None\n\t\t\tself.head = pre\n\t\telse:\n\t\t\tpre.next = next\n\t\t\n\t\treturn self.head\n\ndef printList(head):\n\tcur = head\n\twhile cur:\n\t\tprint cur.val,\n\t\tcur = cur.next\n\t\n\tprint\n\nif __name__ == '__main__':\n\thead = ListNode(1)\n\thead.next = ListNode(2)\n\thead.next.next = ListNode(3)\n\thead.next.next.next = ListNode(4)\n\thead.next.next.next.next = ListNode(5)\n\thead.next.next.next.next.next = ListNode(6)\n\thead.next.next.next.next.next.",
      -14.7265625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def reverseBetween(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n\n        dummy = ListNode(0)\n        dummy.next = head\n        head = dummy\n        cur = head\n        for i in xrange(m):\n            cur = cur.next\n\n        for i in xrange(n):\n            tmp = cur.next\n            cur.next = tmp.next\n            tmp.next = head.next\n            head.next = tmp\n            cur = tmp\n        return dummy.next\n\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n\n        p = head\n        while p.next:\n            p = p.next\n            p.next = p.next.next\n            p.next.next = p\n\n        return head",
      -15.21875
    ],
    [
      "# https://leetcode.com/problems/replace-last-element-of-the-list/\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return a ListNode\n    def deleteNode(self, node):\n        # write your code here\n        if node is None:\n            return None\n        if node.next is None:\n            return node.next\n        node.next = self.deleteNode(node.next)\n        return node\n\nif __name__ == '__main__':\n    cases = [\n        ([1,2,3], [1,2,3], [1,2,3]),\n        ([1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]),\n        ([1,2,3,4,5,6], [1,2,3,4,5,6], [2,3,4,5,6]),\n        ([1,2,3,4,5,6], [1,2,3,4,5,6], [2,3,4,5,6,7]),\n        ([1,2,3,4,5,6], [1,2,3,4,5,6], [2,3,4,5,6,7,8,9]),\n    ]\n    for case in cases:\n        node = ListNode(case[0][0])\n        for i in range(len(case[0])-1):\n            node = node.next = ListNode(case[0][i])\n        node = Solution().deleteNode(node)\n        print node.val\n        while node:\n            print node.val\n            node = node.next",
      -15.2421875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        slow = head\n        fast = head.next.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n        p = slow.next\n        slow.next = None\n        p.next = head\n        head.next = p\n\n        return head\n\nif __name__ == \"__main__\":\n    a1 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next.next.next\n    a2 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))).next.next.next.next.next\n    print Solution().swapPairs(a1)\n    print a1\n    print a2",
      -16.09375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://oj.leetcode.com/problems/replace-last-element-with-list/\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def replaceLast(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None or head.next is None:\n            return head\n        p = head\n        while p.next:\n            p = p.next\n        p.next = ListNode(val)\n        return head\n\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        p = head\n        while p is not None:\n            q = p.next\n            p.next = p.next.next\n            p.next.next = p\n            p = q\n        return head",
      -16.5
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/singly-linked-list-replaced-list/problem\n\nfrom collections import deque\nfrom heapq import heappush, heappop\n\ndef replace_last(head, new_head):\n    # write your code here\n    if head is None or new_head is None:\n        return head\n    \n    new_head_list = deque(new_head)\n    \n    while head:\n        if head.value == head.last.value:\n            head.last = new_head_list.popleft()\n        else:\n            heappop(new_head_list)\n        head = head.next\n    \n    return new_head_list.popleft()\n    \ndef main():\n    \n    n = int(input())\n    \n    head = None\n    \n    for _ in range(n):\n        head = replace_last(head, input())\n    \n    print(head.value)\n    \nif __name__ == '__main__':\n    main()",
      -17.046875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\n\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:\n        if m == n:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        i = 0\n        while i < m:\n            dummy = dummy.next\n            i += 1\n        while i < n:\n            dummy = dummy.next\n            i += 1\n        while m > 1:\n            head = head.next\n            m -= 1\n        while n > 1:\n            head = head.next\n            n -= 1\n        head.next = dummy.next\n        return dummy.next\n\n# TESTS\nfor n, m, o in [\n    ([1], 0, 1),\n    ([1], 1, [1]),\n    ([1, 2], 0, 2),\n    ([1, 2], 1, [2, 1]),\n    ([1, 2, 3], 0, 3),\n    ([1, 2, 3], 1, [3, 2, 1]),\n    ([1, 2, 3, 4], 0, 4),\n    ([1, 2, 3, 4], 1, [4, 3, 2, 1]),\n    ([1, 2, 3, 4], 2, [3, 2, 1, 4]),\n    ([1, 2, 3, 4], 3, [4, 3, 2, 1]),\n    ([1, 2, 3, 4], 4, [3, 2, 1, 4]),\n]:\n    sol = Solution()\n    head = ListNode(n)\n    head.next = ListNode(m)\n    head.next.next = ListNode(o)\n    print(sol.reverseBetween(head, *n))",
      -19.359375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}