{
  "problem": {
    "task_id": "MBPP/437",
    "prompt": "Write a function to remove odd characters in a string.",
    "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
    "test_list": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ],
    "challenge_test_list": [],
    "problem_id": 426
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def remove_odd_chars(string):\n    for char in string:\n        if char.isdigit() or char.isspace():\n            pass\n        else:\n            string = string.replace(char, '')\n    return string\n\nif __name__ == '__main__':\n    string = '123456789'\n    print(remove_odd_chars(string))",
      5.3125
    ],
    [
      "def remove_odds(s):\n    return \"\".join(c for c in s if c.isdigit())\n\n# Test cases:\ntest_cases = [\n    (\"hello\", \"helo\"),\n    (\"a\", \"a\"),\n    (\"12345\", \"12345\")\n]\n\nfor test_case in test_cases:\n    print \"Remove odd chars: \", test_case[0], \"->\", remove_odds(test_case[0])",
      5.22265625
    ],
    [
      "def remove_odd_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join([c for c in string if c.isdigit() or c.isalpha()])\n\nif __name__ == '__main__':\n    print(remove_odd_chars('A12345A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))\n    print(remove_odd_chars('A1234A'))",
      4.0546875
    ],
    [
      "def remove_odd_char(s):\n    # write your code here\n    return ''.join(c for c in s if c.isalpha() or c.isdigit())\n\nprint remove_odd_char(\"test\")",
      2.462890625
    ],
    [
      "def remove_odd_chars(str):\n    # write your code here\n    return \"\".join(ch for ch in str if ch.isdigit())\n\nif __name__ == \"__main__\":\n    print remove_odd_chars(\"Aa\")\n    print remove_odd_chars(\"2\")\n    print remove_odd_chars(\"Aa2\")\n    print remove_odd_chars(\"Aa2 3\")",
      2.12890625
    ],
    [
      "def remove_odd_chars(string):\n    return ''.join(c for c in string if c.isalpha())\n\n# Test Cases\n\ntest_cases = [\n    (\"Hello\", \"Helo\"),\n    (\"Hello World\", \"Hello World\"),\n    (\"Hello World!\", \"Hello World!\"),\n    (\"Hello World! \", \"Hello World!\"),\n    (\"Hello World!\", \"Hello World!\"),\n    (\"Hello World! \", \"Hello World!\"),\n]\n\nfor test_case in test_cases:\n    print(\"remove_odd_chars({}) == {}\".format(test_case[0], remove_odd_chars(test_case[0])))",
      2.046875
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        ret = ''\n        for i in range(len(s)):\n            if i % 2 == 0:\n                ret += s[i]\n        return ret\n\n\nif __name__ == '__main__':\n    print Solution().removeOddCharacters('abcd')",
      1.9013671875
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isalpha())\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeOddCharacters(\"Hello, world! How are you?\")",
      1.3681640625
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        return \"\".join(filter(lambda x: x.isalpha(), s))\n\nclass Solution2(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        return \"\".join(filter(lambda x: not x.isdigit(), s))\n\n\nif __name__ == \"__main__\":\n    print Solution().removeOddCharacters(\"Hello, World!@#\")\n    print Solution2().removeOddCharacters(\"Hello, World!@#\")",
      1.208984375
    ],
    [
      "def remove_odd_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    odd_chars = ','\n    return s.replace(odd_chars, '')\n\nif __name__ == '__main__':\n    print remove_odd_chars(\"a,b,c,d\")",
      0.90966796875
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(ch for ch in s if ch.isalpha())",
      0.8115234375
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join([c for c in s if c.isalpha() or c.isdigit()])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeOddCharacters(\"A man, a plan, a canal: Panama\")\n    print s.removeOddCharacters(\"\")",
      0.64208984375
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isalpha())\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeOddCharacters('a')\n    print s.removeOddCharacters('aa')\n    print s.removeOddCharacters('aaa')\n    print s.removeOddCharacters('abcd')",
      0.55908203125
    ],
    [
      "import re\nimport string\n\n# O(n)\n# Time: O(n)\n# Space: O(n)\n# Math\n# https://discuss.leetcode.com/topic/16596/share-my-solution-with-comments-and-explanation\ndef remove_odd_characters(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n\n# O(n)\n# Time: O(n)\n# Space: O(1)\n# Math\n# https://discuss.leetcode.com/topic/16596/share-my-solution-with-comments-and-explanation\ndef remove_odd_characters_2(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n\n# O(n)\n# Time: O(n)\n# Space: O(1)\n# Math\n# https://discuss.leetcode.com/topic/16596/share-my-solution-with-comments-and-explanation\ndef remove_odd_characters_3(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n\n# O(n)\n# Time: O(n)\n# Space: O(1)\n# Math\n# https://discuss.leetcode.com/topic/16596/share-my-solution-with-comments-and-explanation\ndef remove_odd_characters_4(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n\n# O(n)\n# Time: O(n)\n# Space: O(1)\n# Math\n# https://discuss",
      0.55322265625
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isdigit() or c.isalpha())",
      0.51123046875
    ],
    [
      "class Solution(object):\n    def removeOdd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[::-1].replace('O', '0')[::-1]",
      0.50537109375
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # O(n) time\n        # O(1) space\n        # using map\n        return ''.join([i if i%2==0 else '' for i in s])\n\nclass Solution2(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # O(n) time\n        # O(1) space\n        # using a list\n        return ''.join([i if i%2==0 else '' for i in s])\n\nclass Solution3(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # O(n) time\n        # O(1) space\n        # using a hashmap\n        return ''.join([i if i%2==0 else '' for i in s])",
      0.43359375
    ],
    [
      "def remove_odd(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join([c for c in s if c.isdigit() or c.isalpha()])\n\nif __name__ == '__main__':\n    assert remove_odd('test') == 'tet'\n    assert remove_odd('tet') == 'tet'\n    assert remove_odd('tet1') == 'tet'\n    assert remove_odd('tet1t') == 'tet1'\n    assert remove_odd('tet1t2') == 'tet1t2'\n    assert remove_odd('tet1t2t3') == 'tet1t2t3'\n    assert remove_odd('tet1t2t3t4') == 'tet1t2t3t4'\n    assert remove_odd('tet1t2t3t4t5') == 'tet1t2t3t4t5'",
      0.39306640625
    ],
    [
      "# https://oj.leetcode.com/problems/remove-odd-characters/\n# Write a function to remove all odd characters in a string.\n#\n# Example 1:\n# Input: \"1Og3mI\"\n# Output: \"1O3mI\"\n# Example 2:\n# Input: \"A man, a plan, a canal: Panama\"\n# Output: \"A man, a plan, a canal: Panama\"\n# Note:\n# The string size will not exceed 10,000.\n# All letters of the string will be ASCII.\n# The string will only include lowercase letters.\n\nclass Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join([chr(ord(c) % 2) for c in s])",
      0.368896484375
    ],
    [
      "# https://leetcode.com/problems/remove-odd-characters/\n\n\nclass Solution(object):\n    def removeOdd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in s if c.isdigit() or c.isalpha()])",
      0.088623046875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def removeOdd(self, s):\n        \"\"\"\n        odd char is not in s\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.isdigit(), s))\n\n\nif __name__==\"__main__\":\n    print Solution().removeOdd(\"1A\")",
      -0.040069580078125
    ],
    [
      "# Approach #1: Iterate over the string and remove odd characters\ndef remove_odd_characters(s):\n    return ''.join(c for c in s if c.isdigit())\n\n# Approach #2: Use a stack\ndef remove_odd_characters(s):\n    odd_characters = []\n    for c in s:\n        if c.isdigit():\n            odd_characters.append(c)\n        else:\n            while len(odd_characters) > 1:\n                odd_characters.pop()\n    return ''.join(odd_characters)\n\n# Approach #3: Iterate over the string and remove odd characters\ndef remove_odd_characters(s):\n    return ''.join(c for c in s if c.isdigit())\n\nprint(remove_odd_characters('abcd123'))\nprint(remove_odd_characters('abcd12345'))\nprint(remove_odd_characters('abcd1234567'))\nprint(remove_odd_characters('abcd123456789'))",
      -0.1326904296875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeOdd(self, s):\n        return ''.join(e for e in s if e.isalpha())\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.removeOdd('a'))\n    print(s.removeOdd('abc'))\n    print(s.removeOdd('aabbcc'))\n    print(s.removeOdd('Aabbcc'))\n    print(s.removeOdd('Aaabbcc'))",
      -0.432861328125
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([x for x in s if x.isalpha()])\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeOddCharacters(\"Hello\")\n    print s.removeOddCharacters(\"hello\")\n    print s.removeOddCharacters(\"Hello World!\")\n    print s.removeOddCharacters(\"Hello World! Hello World!\")\n    print s.removeOddCharacters(\"Hello\")",
      -0.498291015625
    ],
    [
      "def remove_odd_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s.replace(\"o\", \"\")\n\n\nif __name__ == \"__main__\":\n    assert remove_odd_chars(\"aabcc\") == \"aabbc\"\n    assert remove_odd_chars(\"abbcc\") == \"abbcc\"\n    assert remove_odd_chars(\"abbc\") == \"abbc\"\n    assert remove_odd_chars(\"abbccc\") == \"abbccc\"\n    assert remove_odd_chars(\"abbccc\") == \"abbccc\"\n    assert remove_odd_chars(\"abbccc\") == \"abbccc\"",
      -0.5625
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-odd-characters/problem\n\ndef removeOdd(string):\n    return ''.join(filter(lambda x: x.isdigit() or x.isalpha(), string))\n\nif __name__ == '__main__':\n    string = input().strip()\n    print(removeOdd(string))",
      -0.71337890625
    ],
    [
      "def remove_odd(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in s if c.isdigit())\n\nclass Solution(object):\n    def removeOdd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return remove_odd(s)",
      -0.7568359375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeOdd(self, s):\n        return ''.join(chr(ord(i)%2+ord(i)) for i in s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeOdd('A')\n    print s.removeOdd('Aa')\n    print s.removeOdd('abcde')\n    print s.removeOdd('abcdee')",
      -0.78369140625
    ],
    [
      "def remove_odd_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in s if c.isdigit())\n\nif __name__ == '__main__':\n    assert remove_odd_chars(\"test\") == \"tst\"\n    assert remove_odd_chars(\"test1\") == \"tst1\"\n    assert remove_odd_chars(\"test2\") == \"tst2\"\n    assert remove_odd_chars(\"test3\") == \"tst3\"\n    assert remove_odd_chars(\"test4\") == \"tst4\"\n    assert remove_odd_chars(\"test5\") == \"tst5\"\n    assert remove_odd_chars(\"test6\") == \"tst6\"\n    assert remove_odd_chars(\"test7\") == \"tst7\"\n    assert remove_odd_chars(\"test8\") == \"tst8\"\n    assert remove_odd_chars(\"test9\") == \"tst9\"\n    assert remove_odd_chars(\"test10\") == \"tst10\"\n    assert remove_odd_chars(\"test11\") == \"tst11\"\n    assert remove_odd_chars(\"test12\") == \"tst12\"\n    assert remove_odd_chars(\"test13\") == \"tst13\"\n    assert remove_odd_chars(\"test14\") == \"tst14\"\n    assert remove_odd_chars(\"test15\") == \"tst15\"\n    assert remove_odd_chars(\"test16\") == \"tst16\"\n    assert remove_odd_chars(\"test17\") == \"tst17\"\n    assert remove_odd_chars(\"test18\") == \"tst18\"\n    assert remove_odd_chars(\"test19\") == \"tst19\"\n    assert remove_odd_chars(\"test20\") == \"tst20\"\n    assert remove_odd_chars(\"test21\") == \"tst21\"\n    assert remove_odd_chars(\"test22\") == \"tst22\"\n    assert remove_odd_chars(\"test23\") == \"",
      -0.8505859375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param s: A string\n    @return: The string after removing the odd characters\n    \"\"\"\n    def removeOddChar(self, s):\n        return ''.join([i for i in s if i % 2!= 1])",
      -0.85595703125
    ],
    [
      "# https://www.hackerrank.com/challenges/odd-characters-in-a-string\n\ndef remove_odd_characters(s):\n    # Write your code here\n    if s is None:\n        return \"\"\n    odd_characters = list()\n    for i in range(len(s)):\n        if s[i] % 2 == 1:\n            odd_characters.append(s[i])\n    return \"\".join(odd_characters)\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(remove_odd_characters(s))",
      -0.85595703125
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(i for i in s if i % 2 == 0)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeOddCharacters(\"abcde\")\n    print s.removeOddCharacters(\"abcd\")",
      -0.85595703125
    ],
    [
      "def remove_odd_characters(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join([i for i in string if i.isdigit()])\n\ndef main():\n    print remove_odd_characters(\"asdasdasd\")\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "# https://leetcode.com/problems/remove-odd-characters/description/\n\nclass Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isalpha() or c.isdigit())",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([i for i in s if i % 2 == 0])",
      -0.85693359375
    ],
    [
      "def remove_odd_chars(string):\n    return ''.join(c for c in string if c.isdigit() or c.isalpha())\n\n\n\nif __name__ == '__main__':\n    string = \"a1b2c3\"\n    print(remove_odd_chars(string))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(i for i in s if i.isalpha())\n\n\nif __name__ == \"__main__\":\n    assert Solution().removeOddCharacters(\"abc\") == \"abc\"",
      -0.85693359375
    ],
    [
      "def remove_odd(s):\n    return ''.join(c for c in s if c.isdigit())\n\n\nif __name__ == '__main__':\n    assert remove_odd('abc123') == '123abc'",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        for i in range(len(s)):\n            if s[i] % 2 == 1:\n                s = s[:i] + s[i+1:]\n        return s\n\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeOddCharacters('abbabb')",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeOdd(self, s):\n        if s is None or s == \"\":\n            return \"\"\n        s = s.lower()\n        s = s.strip()\n        s = s.translate(None, \".,:;-_/()[]{}*+=\")\n        return s",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def removeOddChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(i for i in s if i.isdigit())\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeOddChar('abcd1234')\n    print s.removeOddChar('abcd1234')\n    print s.removeOddChar('a')",
      -0.85693359375
    ],
    [
      "def remove_odd_characters(s):\n    return ''.join(ch for ch in s if ch.isdigit())\n\nprint(remove_odd_characters('1asdf1'))",
      -0.857421875
    ],
    [
      "class Solution(object):\n    def removeOddChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c.isdigit() or c.isalpha())",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @return a string\n    def removeOddChar(self, s):\n        return s[0] + ''.join(x for x in s[1:] if x!= '#')\n\n    def removeOddChar_2(self, s):\n        return ''.join(x for x in s if x!= '#')",
      -0.85791015625
    ],
    [
      "def remove_odd_characters(s):\n    '''\n    :type s: str\n    :rtype: str\n    '''\n    return ''.join(ch for ch in s if ch.isalnum() or ch =='')\n\n\n\nif __name__ == '__main__':\n    s = 'hello world'\n    print remove_odd_characters(s)",
      -0.85791015625
    ],
    [
      "def remove_odds(s):\n    return s.replace('o', '').replace('O', '').replace('0', '').replace('0', '')\n\nif __name__ == '__main__':\n    print remove_odds('hello')",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x!= 'O', s))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def removeOdd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.isdigit() or x.isalpha(), s))",
      -0.85791015625
    ],
    [
      "def remove_odd_chars(s):\n    return ''.join(filter(lambda x: x.isdigit() or x.isalpha(), s))\n\n\nif __name__ == '__main__':\n    s = \"a1b2c3\"\n    print remove_odd_chars(s)",
      -0.85791015625
    ],
    [
      "def remove_odd_chars(s):\n    odd_chars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    return \"\".join([c for c in s if c not in odd_chars])\n\nprint(remove_odd_chars(\"aabbccddeeff\"))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace('o', '')",
      -0.85791015625
    ],
    [
      "import re\n\ndef remove_odd_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'[^0-9a-zA-Z]', '', string)\n\nif __name__ == '__main__':\n    s = \"Hello World\"\n    print(remove_odd_chars(s))",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @return a string\n    def removeOddCharacters(self, s):\n        return ''.join(chr(ord(c) - 1) if c.isdigit() else c for c in s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.removeOddCharacters('abc'))\n    print(s.removeOddCharacters('abb'))\n    print(s.removeOddCharacters('abbbc'))\n    print(s.removeOddCharacters('abbbcbc'))",
      -0.85791015625
    ],
    [
      "def remove_odd_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(i for i in string if i.isdigit())\n\n# TODO:\n#  * add this function to the string module",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeOdd(self, s):\n        return ''.join(chr(ord(c) - 1 if ord(c) % 2 else ord(c)) for c in s)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeOdd('abc')\n    print s.removeOdd('cba')",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeOdd(self, s):\n        res = \"\"\n        for i in range(len(s)):\n            if s[i] % 2 == 0:\n                res += s[i]\n        return res\n\nif __name__ == \"__main__\":\n    print Solution().removeOdd(\"a\")",
      -0.8583984375
    ],
    [
      "def remove_odd_characters(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in s if c.isdigit() or c.isdigit())\n\n\ndef test():\n    assert remove_odd_characters('hello') == 'helo'\n    assert remove_odd_characters('helo') == 'helo'\n    assert remove_odd_characters('helo') == 'helo'\n    assert remove_odd_characters('hello world') == 'hello world'\n    assert remove_odd_characters('hello world') == 'hello world'\n    assert remove_odd_characters('hello world') == 'hello world'\n\nif __name__ == '__main__':\n    test()",
      -0.8583984375
    ],
    [
      "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '').replace('A', '').replace('E', '').replace('I', '').replace('O', '').replace('U', '')\n\n\nif __name__ == '__main__':\n    assert Solution().removeOddCharacters('abcd') == 'acd'\n    assert Solution().removeOddCharacters('abcd') == 'acd'",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def removeOdd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.isdigit() or x.isalpha(), s))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeOdd(\"abcde\"))\n    print(s.removeOdd(\"abcde\"))\n    print(s.removeOdd(\"\"))\n    print(s.removeOdd(\"abcde\"))\n    print(s.removeOdd(\"abcde\"))\n    print(s.removeOdd(\"abcde\"))",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/remove-odd-characters-from-a-string/\n# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        return ''.join(c for c in s if c.isdigit() or c.isalpha())\n\n\nif __name__ == \"__main__\":\n    print Solution().removeOddCharacters(\"1Odd1Odd2Odd3\")",
      -0.8583984375
    ],
    [
      "# https://www.geeksforgeeks.org/remove-odd-characters-from-a-string/\n\ndef remove_odd_chars(s):\n    return ''.join([c for c in s if c.isdigit() or c.isalpha()])\n\nif __name__ == '__main__':\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))\n    print(remove_odd_chars('abcd'))",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @return a string\n    def removeOdd(self, s):\n        return \"\".join([chr(ord(c) - 1) for c in s if c.isalpha()])",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in s if c.isdigit()])",
      -0.8583984375
    ],
    [
      "def remove_odd_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return \"\".join(i for i in s if i.isdigit())\n\nclass Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return remove_odd_chars(s)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {string} str\n    # @return {string}\n    def removeOdd(self, str):\n        return ''.join([e for e in str if e.isdigit()])\n\nif __name__ == '__main__':\n    print Solution().removeOdd('A1B2C3D')",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeOdd(self, s):\n        return ''.join(chr(ord(c) % 2 + ord('a')) for c in s)\n\nif __name__ == '__main__':\n    print Solution().removeOdd('aoddbccdd')",
      -0.85888671875
    ],
    [
      "def remove_odd_characters(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join([chr(ord(c) - 1) for c in s if ord(c) % 2 == 1])\n\n# Note:\n# 1. use chr(ord(c) - 1) instead of ord(c) - 1\n# 2. use s.replace(c, '') instead of s.replace(c, '0')\n\n# Test Cases:\nprint(remove_odd_characters('a'))\nprint(remove_odd_characters('abc'))\nprint(remove_odd_characters('aaabbbccccc'))",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-odd-characters/problem\n\ndef remove_odd_characters(str):\n    return ''.join(i for i in str if not i % 2)\n\nif __name__ == \"__main__\":\n    str = \"Hello, World!\"\n    print(remove_odd_characters(str))",
      -0.85888671875
    ],
    [
      "import re\n\ndef remove_odd_chars(string):\n    return re.sub(r\"\\D\", \"\", string)\n\nif __name__ == '__main__':\n    s = \"Hello, world!\"\n    print(remove_odd_chars(s))",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def removeOdd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(i for i in s if i.isalpha())",
      -0.8876953125
    ],
    [
      "def remove_odd(string):\n    return ''.join(ch for ch in string if ch.isdigit())\n\n\nif __name__ == '__main__':\n    print(remove_odd(\"abcd\"))\n    print(remove_odd(\"aabbc\"))\n    print(remove_odd(\"abbbc\"))\n    print(remove_odd(\"bbbbc\"))\n    print(remove_odd(\"bbbbb\"))\n    print(remove_odd(\"aabbbbb\"))\n    print(remove_odd(\"aabbbbbbbb\"))",
      -0.9189453125
    ],
    [
      "class Solution:\n    # @return a string\n    def removeOdd(self, s):\n        return s[::2]",
      -0.92236328125
    ],
    [
      "def remove_odd_chars(s):\n    return ''.join([i for i in s if not i.isdigit() and (i == '0' or i.isalpha())])\n\nif __name__ == \"__main__\":\n    print(remove_odd_chars(\"a1b2c3\"))\n    print(remove_odd_chars(\"123\"))\n    print(remove_odd_chars(\"\"))\n    print(remove_odd_chars(\"a1b2c3a1b2c3\"))",
      -1.0087890625
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(chr(ord(c) % 2) for c in s)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeOddCharacters(\"abcde\")\n    print s.removeOddCharacters(\"abcd\")\n    print s.removeOddCharacters(\"\")\n    print s.removeOddCharacters(\"abcdeabcde\")",
      -1.1064453125
    ],
    [
      "def remove_odd_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join([i for i in string if i.isdigit()])\n\nif __name__ == '__main__':\n    assert remove_odd_chars('1abcde') == '1abcde'\n    assert remove_odd_chars('abcdefg') == 'abcdefg'\n    assert remove_odd_chars('abcdefgh') == 'abcdefgh'\n    assert remove_odd_chars('abcdefghi') == 'abcdefghi'\n    assert remove_odd_chars('abcdefghij') == 'abcdefghij'\n    assert remove_odd_chars('abcdefghijk') == 'abcdefghijk'\n    assert remove_odd_chars('abcdefghijkl') == 'abcdefghijkl'\n    assert remove_odd_chars('abcdefghijklm') == 'abcdefghijklm'\n    assert remove_odd_chars('abcdefghijklmn') == 'abcdefghijklmn'\n    assert remove_odd_chars('abcdefghijklmno') == 'abcdefghijklmno'\n    assert remove_odd_chars('abcdefghijklmnop') == 'abcdefghijklmnop'\n    assert remove_odd_chars('abcdefghijklmnopq') == 'abcdefghijklmnopq'\n    assert remove_odd_chars('abcdefghijklmnopqr') == 'abcdefghijklmnopqr'\n    assert remove_odd_chars('abcdefghijklmnopqrst') == 'abcdefghijklmnopqrst'\n    assert remove_odd_chars('abcdefghijklmnopqrstu') == 'abcdefghijklmnopqrstu'",
      -1.64453125
    ],
    [
      "def remove_odd_characters(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join([c for c in string if c.isdigit()])\n\nif __name__ == '__main__':\n    assert remove_odd_characters(\"hello\") == \"hello\"\n    assert remove_odd_characters(\"1\") == \"1\"\n    assert remove_odd_characters(\"11\") == \"1\"\n    assert remove_odd_characters(\"a1\") == \"a1\"\n    assert remove_odd_characters(\"abc1\") == \"abc1\"\n    assert remove_odd_characters(\"1a\") == \"1a\"\n    assert remove_odd_characters(\"aa\") == \"aa\"",
      -2.3125
    ],
    [
      "class Solution(object):\n    def removeOdd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(i for i in s if not i.isalpha() or (i.isalpha() and ord(i) % 2 == 0))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))\n    print(s.removeOdd('abcd'))",
      -2.595703125
    ],
    [
      "def remove_odd_chars(string):\n    return ''.join(filter(lambda x: x.isdigit(), string))\n\nif __name__ == '__main__':\n    s = 'aabbccddee'\n    print 'Original string:', s\n    print 'Removing odd chars:', remove_odd_chars(s)\n    print 'Removing odd chars:', remove_odd_chars('abcdee')\n    print 'Removing odd chars:', remove_odd_chars('abcdeeff')",
      -3.13671875
    ],
    [
      "def remove_odd(s):\n    return \"\".join(x for x in s if x.isdigit() or x in \"0123456789\")\n\n\nif __name__ == \"__main__\":\n    assert remove_odd(\"abc123\") == \"abc123\", \"odd characters removed\"\n    assert remove_odd(\"abc123def\") == \"abc123def\", \"odd characters removed\"\n    assert remove_odd(\"abc123def456\") == \"abc123def\", \"odd characters removed\"\n    assert remove_odd(\"abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def456abc123def",
      -3.13671875
    ],
    [
      "# https://codility.com/demo/results/demoRmOddChars-2AQA/\ndef remove_odd_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join([c for c in string if c.isdigit() or c.islower() or c.isupper()])\n\nif __name__ == '__main__':\n    assert remove_odd_chars(\"\") == \"\"\n    assert remove_odd_chars(\"1\") == \"1\"\n    assert remove_odd_chars(\"abc\") == \"abc\"\n    assert remove_odd_chars(\"abcabc\") == \"abc\"\n    assert remove_odd_chars(\"abcabcabcabcabcabc\") == \"abc\"\n    assert remove_odd_chars(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      -3.52734375
    ],
    [
      "class Solution(object):\n    def removeOdd(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([i for i in s if i%2!= 1])\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeOdd('aabbcc')\n    print s.removeOdd('abbcc')\n    print s.removeOdd('abc')\n    print s.removeOdd('abcdefgh')",
      -3.787109375
    ],
    [
      "def remove_odd_chars(string):\n    return \"\".join([i if (i % 2) == 0 else i for i in string])\n\nif __name__ == '__main__':\n    s = \"Hello world!\"\n    print s\n    print remove_odd_chars(s)",
      -3.865234375
    ],
    [
      "def remove_odd_characters(string):\n    for i in range(len(string)):\n        if string[i] % 2 == 1:\n            string = string[:i] + string[i+1:]\n    return string\n\nprint(remove_odd_characters('hello'))",
      -3.94140625
    ],
    [
      "def remove_odd_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s[::-1].replace(\"1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\", \"\").replace(\"5\", \"\").replace(\"6\", \"\")[::-1]\n\nif __name__ == '__main__':\n    s = 'a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26{}'\n    print(remove_odd_chars(s))",
      -4.2265625
    ],
    [
      "# https://leetcode.com/problems/remove-odd-characters-from-a-string/discuss/241635/Easy-Python-Solution\n# https://leetcode.com/problems/remove-odd-characters-from-a-string/discuss/251459/python-implementation\nclass Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join([c for c in s if c.isdigit()])\n\n\nif __name__ == '__main__':\n    print(Solution().removeOddCharacters(\"Hello\"))",
      -4.3046875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeOdd(self, s):\n        return ''.join(chr(ord(c) - 1 if c.isdigit() else ord(c)) for c in s)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.removeOdd(\"aaabbbccc\"))\n    print(s.removeOdd(\"abbbbb\"))\n    print(s.removeOdd(\"\"))\n    print(s.removeOdd(\"abc\"))\n    print(s.removeOdd(\"abbbc\"))\n    print(s.removeOdd(\"aabbb\"))\n    print(s.removeOdd(\"aabbbc\"))",
      -4.4609375
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-odd-characters/problem\n# https://www.hackerrank.com/challenges/remove-odd-characters/submissions/code/281601\n\ndef remove_odd_characters(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    return ''.join(char for char in str if char.isalpha())\n\nif __name__ == '__main__':\n    test_cases = [\n        ('a', 'a'),\n        ('ab', 'ab'),\n        ('abc', 'abc'),\n        ('abcd', 'abcd'),\n        ('abcde', 'abcde')\n    ]\n    for test_case in test_cases:\n        print('Remove Odd Characters: {}'.format(remove_odd_characters(test_case[0])))",
      -4.58203125
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        s = ''.join(x if not x.isdigit() else x.lower() for x in s)\n        return ''.join(x if not x.isdigit() else x.lower() for x in s)",
      -4.99609375
    ],
    [
      "def remove_odd_characters(s):\n    for i in range(0, len(s)):\n        if s[i] % 2 == 1:\n            s = s[:i] + s[i+1:]\n    return s\n\n\nif __name__ == '__main__':\n    assert remove_odd_characters('aabbcc') == 'aaabbcc'\n    assert remove_odd_characters('aabbccdd') == 'aaabbccdd'\n    assert remove_odd_characters('aabbccddee') == 'aaabbccddee'\n    assert remove_odd_characters('abcd') == 'abcd'\n    assert remove_odd_characters('abcdee') == 'abcdee'\n    assert remove_odd_characters('abcdefgh') == 'abcdefgh'\n    assert remove_odd_characters('abcdefghi') == 'abcdefghi'",
      -5.23046875
    ],
    [
      "# https://codility.com/demo/results/demoAjQEK9-B/\n# https://codility.com/demo/results/Z4KL8B9P-U/\n# https://codility.com/demo/results/YIWXK3M5-U/\n# https://codility.com/demo/results/2I4G1Y1D-U/\n# https://codility.com/demo/results/JE7JWQC3-U/\n# https://codility.com/demo/results/JZJQM9H9-U/\n# https://codility.com/demo/results/3W4W3CJE-U/\n# https://codility.com/demo/results/PQYKJXZW-U/\n# https://codility.com/demo/results/6H4B1C6J-U/\n# https://codility.com/demo/results/H2M6QA6D-U/\n# https://codility.com/demo/results/ZY4B1EZG-U/\n# https://codility.com/demo/results/EQ8CQ3QJ-U/\n# https://codility.com/demo/results/2J3B3C8E-U/\n# https://codility.com/demo/results/E2XZJZRZ-U/\n# https://codility.com/demo/results/BQX4YJ2I-U/\n# https://codility.com/demo/results/C5N2XQDQ-U/\n# https://codility.com/demo/results/Z3J4ZD6I-U/\n# https://codility.com/demo/results/X2E3X6YX-U/\n# https://codility.com/demo/results/J7JXRQXK-U/\n# https://codility.com/demo/results/J7JXRQXK-U/\n# https://codility.com/demo/",
      -6.35546875
    ],
    [
      "# Definition for a character\nclass Character:\n    def __init__(self, x):\n        self.x = x\n\n    def __lt__(self, other):\n        return self.x < other.x\n\n    def __str__(self):\n        return str(self.x)\n\n\nclass Solution(object):\n    def removeOdd(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x.x % 2 == 0, map(Character, S)))",
      -6.7109375
    ],
    [
      "# Definition for a character\nclass Character:\n    def __init__(self, ch):\n        self.ch = ch\n\n    def __str__(self):\n        return str(self.ch)\n\nclass Solution:\n    # @param s, a string\n    # @return a string\n    def removeOdd(self, s):\n        if s == None or len(s) == 0:\n            return s\n        oddChars = []\n        for ch in s:\n            if ch.isalpha():\n                oddChars.append(ch)\n        oddChars = ''.join(oddChars)\n        return s.replace(oddChars, '')\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeOdd('abc')\n    print s.removeOdd('abcd')\n    print s.removeOdd('abcde')\n    print s.removeOdd('abcdeabcde')\n    print s.removeOdd('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabc",
      -7.0078125
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([chr(ord(c) - 1) for c in s if chr(ord(c) - 1)!= c])",
      -8.359375
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = s\n        while res:\n            res = self.removeOddCharacters(res[1:])\n        return res\n\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for ch in s:\n            if ch.isalpha():\n                if ch.isupper():\n                    res += ch.lower()\n                else:\n                    res += ch\n        return res",
      -8.3671875
    ],
    [
      "def remove_odd_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # Remove odd characters\n    odd_chars = [chr(i) for i in range(65, 91) if i % 2 == 1]\n    return ''.join([c for c in s if c in odd_chars])\n\nif __name__ == '__main__':\n    s = 'abcdabcabd'\n    print(s)\n    print(remove_odd_chars(s))\n    print(s)",
      -8.3984375
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-odd-characters-from-a-string/problem\n# Problem: Remove Odd Characters from a String\n#\n# Write a function that takes a string and returns a new string with all odd\n# characters removed.\n#\n# Example:\n#\n# Input:\n# abc\n#\n# Output:\n# bc\n#\n# Explanation:\n# The string 'abc' is already a valid string, and has an even length.\n#\n# Input:\n# aaabbb\n#\n# Output:\n# aabbb\n#\n# Explanation:\n# The string 'aaabbb' is not a valid string, but aabbb is a valid string, and\n# has an odd length.\n#\n# Input:\n# aabb\n#\n# Output:\n# aaabb\n#\n# Explanation:\n# The string 'aabb' is a valid string, but aabb is not a valid string, and\n# has an odd length.\n#\n# Constraints:\n#\n# 1 <= s.length <= 50\n# s consists of lowercase English letters only.\n# s is a valid string.\n#\n#\n#\n#\n# Note:\n#\n# The input string is guaranteed to have an even length.\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#",
      -8.4375
    ],
    [
      "def remove_odd_chars(str):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = str[0:0]\n    for ch in str:\n        if ch in '0123456789':\n            result += ch\n        else:\n            result += '0'\n    return result\n\ndef test_remove_odd_chars():\n    assert remove_odd_chars('ABC') == 'ABC'\n    assert remove_odd_chars('ABC123') == 'ABC'\n    assert remove_odd_chars('ABC12345') == 'ABC'\n    assert remove_odd_chars('ABC1234567') == 'ABC'\n    assert remove_odd_chars('ABC123456789') == 'ABC'\n    assert remove_odd_chars('123456789') == '123456789'\n\nif __name__ == '__main__':\n    test_remove_odd_chars()",
      -9.8984375
    ],
    [
      "class Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        odd_list = []\n        for i in range(len(s)):\n            if s[i] % 2 == 1:\n                odd_list.append(s[i])\n            else:\n                odd_list.append('0' + s[i])\n\n        return ''.join(odd_list)",
      -12.6328125
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def removeOddCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[::-1].replace('o', '').replace('O', '').replace('1', '').replace('0', '')\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/remove-odd-characters/solution/\n\n# 11ms 100%\nclass Solution {\n    public String removeOddCharacters(String s) {\n        return s.replaceAll(\"[oO1]\", \"\").replaceAll(\"[Oo0]\", \"\").replaceAll(\"[0]\", \"\");\n    }\n}\n\n# 5ms 100%\nclass Solution {\n    public String removeOddCharacters(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] % 2!= 0) {\n                chars[i] = (char) (chars[i] + 1);\n            }\n        }\n        return new String(chars);\n    }\n}\n'''",
      -13.296875
    ],
    [
      "class Solution:\n    def removeOddCharacters(self, s: str) -> str:\n        if not s:\n            return s\n        odd = [c for c in s if c not in '0123456789']\n        if len(odd)!= len(s):\n            return ''.join(odd) + s[len(odd):]\n        return ''.join(odd) + ''.join(s[i:i+2] for i in range(0, len(s), 2))\n\n\nif __name__ == '__main__':\n    s = 'Hello'\n    print(Solution().removeOddCharacters(s))\n    print(Solution().removeOddCharacters(s))\n    print(Solution().removeOddCharacters(''))\n    print(Solution().removeOddCharacters(''))",
      -16.5
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}