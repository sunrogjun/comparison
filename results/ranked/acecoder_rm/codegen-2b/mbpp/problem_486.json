{
  "problem": {
    "task_id": "MBPP/497",
    "prompt": "Write a function to find the surface area of a cone.",
    "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
    "test_list": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ],
    "challenge_test_list": [],
    "problem_id": 486
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import math\n\ndef cone_surface(height, radius):\n    \"\"\"\n    Returns the surface area of a cone with given height and radius.\n    \"\"\"\n    return math.pi*height*radius**2\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    height = float(input(\"What is the height of the cone?\"))\n    radius = float(input(\"What is the radius of the cone?\"))\n\n    print(cone_surface(height, radius))\n\nif __name__ == '__main__':\n    main()",
      1.6865234375
    ],
    [
      "import math\n\n\ndef cone_surface(radius, height):\n    \"\"\"\n    :type radius: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return math.pi * radius * height\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(cone_surface(2, 3))\n\n\nif __name__ == '__main__':\n    main()",
      1.1982421875
    ],
    [
      "import math\n\ndef cone_area(height, radius):\n    \"\"\"\n    :param height: The height of the cone.\n    :param radius: The radius of the cone.\n    :return: The surface area of the cone.\n    \"\"\"\n    return math.pi * height * radius * radius\n\nif __name__ == '__main__':\n    height = int(input('Enter the height of the cone: '))\n    radius = int(input('Enter the radius of the cone: '))\n    print('The surface area of the cone is: {}'.format(cone_area(height, radius)))",
      1.1611328125
    ],
    [
      "import math\n\ndef cone_surface_area(height, radius):\n    \"\"\"\n    :type height: float\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    area = math.pi * height * radius * radius / 4\n    return area\n\nif __name__ == '__main__':\n    assert cone_surface_area(5, 2) == math.pi * 5 * 2 * 2 / 4\n    assert cone_surface_area(3, 1) == math.pi * 3 * 1 * 1 / 4\n    assert cone_surface_area(2, 2) == math.pi * 2 * 2 * 2 / 4\n    assert cone_surface_area(3, 1) == math.pi * 3 * 1 * 1 / 4",
      1.0654296875
    ],
    [
      "import math\n\ndef cone_area(radius, height):\n    \"\"\"\n    Inputs:\n        radius - radius of the cone\n        height - height of the cone\n    Output:\n        The surface area of the cone\n    \"\"\"\n    return math.pi * radius * height\n\n\nprint('The surface area of a cone is {}'.format(cone_area(1, 2)))",
      0.74658203125
    ],
    [
      "from math import pi, sqrt\n\n\ndef surface_area(height, radius):\n    \"\"\"\n    :type height: float\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return height * radius * pi\n\n\nif __name__ == \"__main__\":\n    print(surface_area(4, 2))\n    print(surface_area(4, 2.5))",
      0.67236328125
    ],
    [
      "from math import sqrt\n\ndef cone_area(radius, height):\n    return 2 * radius * height\n\nif __name__ == '__main__':\n    print(cone_area(2, 1))",
      0.436767578125
    ],
    [
      "import math\n\ndef cone_area(r, h):\n    return math.pi * r * h\n\n\ndef main():\n    r = input('Radius: ')\n    h = input('Height: ')\n    print('The surface area of a cone is {}'.format(cone_area(r, h)))\n\n\nif __name__ == '__main__':\n    main()",
      0.354736328125
    ],
    [
      "def cone_area(r, h):\n    \"\"\"\n    Function to find the surface area of a cone.\n\n    Arguments:\n    r - radius\n    h - height\n\n    Returns:\n    surface area of a cone\n    \"\"\"\n    return 4 * r * h\n\nif __name__ == \"__main__\":\n    print(cone_area(5, 3))",
      0.1375732421875
    ],
    [
      "#!/usr/bin/python\n\nfrom math import pi, sqrt\n\ndef area_cone(r, h):\n    return (r*sqrt(3))/2 * pi * h\n\ndef main():\n    print area_cone(10, 20)\n\nif __name__ == \"__main__\":\n    main()",
      0.1319580078125
    ],
    [
      "import math\nimport numpy as np\n\ndef cone_area(r, h):\n    return 2*np.pi*r*h\n\n\nif __name__ == \"__main__\":\n    r, h = map(int, input().split())\n    print(cone_area(r, h))",
      0.130859375
    ],
    [
      "import math\n\n\ndef cone_area(radius, height):\n    return math.pi * radius * height\n\n\ndef main():\n    print(cone_area(2, 1))\n    print(cone_area(3, 1))\n\n\nif __name__ == '__main__':\n    main()",
      -0.37548828125
    ],
    [
      "from math import sqrt\n\n\ndef cone_area(radius, height):\n    \"\"\"\n    Compute the surface area of a cone.\n\n    The surface area of a cone is equal to the surface of a cylinder with\n    radius equal to the radius and height equal to the height.\n    \"\"\"\n    return 2 * radius * height\n\n\nif __name__ == '__main__':\n    print('Area of a cone: {}'.format(cone_area(2, 3)))\n    print('Area of a cylinder: {}'.format(\n        sqrt(2 * 2 + 1 * 1) * 3))",
      -0.703125
    ],
    [
      "import math\ndef cone_area(height, radius):\n    return math.pi * (radius * radius) * height\n\nif __name__ == \"__main__\":\n    height = int(input())\n    radius = int(input())\n    print(cone_area(height, radius))",
      -0.70556640625
    ],
    [
      "# import the necessary packages\nimport math\n\n# define the dimensions of the cone\nradius = 2\nheight = 3\n\n# define the surface area of the cone\nsurface_area = (math.pi * radius ** 2 * height)\n\n# print the surface area of the cone\nprint(\"The surface area of a cone is\", surface_area)",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/cones\n\nimport math\nimport sys\n\ndef surface_area_of_a_cone(height, radius):\n    return math.pi * (radius ** 2) * height\n\nif __name__ == '__main__':\n    height = int(sys.stdin.readline().strip())\n    radius = int(sys.stdin.readline().strip())\n    print surface_area_of_a_cone(height, radius)",
      -0.85693359375
    ],
    [
      "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return \"(%d, %d)\" % (self.x, self.y)\n\n\nclass Solution:\n    def coneArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        # TODO\n        pass\n\n\nif __name__ == \"__main__\":\n    points = [(1, 1), (2, 3), (1, 2)]\n    print Solution().coneArea(points)",
      -0.85693359375
    ],
    [
      "import math\nimport time\n\ndef cone_area(r1, r2, h):\n    \"\"\"\n    Return the surface area of a cone with radius r1 and height h.\n    \"\"\"\n    return math.pi*(r1**2)*h\n\nstart_time = time.time()\n\nprint cone_area(3, 4, 5)\n\nprint \"Time: {}\".format(time.time() - start_time)",
      -0.85693359375
    ],
    [
      "# from math import pi\n\ndef cone_area(r, h):\n    return 2 * pi * r * h\n\n# print(cone_area(3, 4))\n\ndef main():\n    print(cone_area(3, 4))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def coneArea(self, x, y, r, h):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type r: int\n        :type h: int\n        :rtype: int\n        \"\"\"\n        # return (h + x) * (y - x) / 2 + r * r * (h - y)\n        return (h + x) * (y - x) / 2 + r * r * (h - y)",
      -0.85693359375
    ],
    [
      "import math\n\ndef cone_area(r, h):\n    return math.pi * r * h\n\n\ndef cone_area2(r, h):\n    return math.pi * r * h / 2.0\n\n\ndef cone_area3(r, h):\n    return math.pi * r * h / 3.0\n\n\ndef cone_area4(r, h):\n    return math.pi * r * h / 4.0\n\n\nif __name__ == \"__main__\":\n    print cone_area(2, 3)\n    print cone_area2(2, 3)\n    print cone_area3(2, 3)\n    print cone_area4(2, 3)",
      -0.85693359375
    ],
    [
      "from math import sqrt\n\ndef cone_area(r, h):\n    return 4 * r * sqrt(r * r + h * h)\n\ndef main():\n    print cone_area(2, 3)\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "# Definition for a point\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def coneArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        if len(points) < 3:\n            return 0\n        area = 0\n        p1 = points[0]\n        for p in points[1:]:\n            area += p1.x * p.y\n            p1 = p\n        return area",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/cone-area/problem\n\ndef cone_area(r, h):\n    return 2*r*h\n\nif __name__ == '__main__':\n    n = int(input())\n    r = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n    print(cone_area(r[0], h[0]))",
      -0.85693359375
    ],
    [
      "import math\n\ndef cone_area(height, radius):\n    \"\"\"\n    Input:\n    height = height of the cone\n    radius = radius of the cone\n\n    Output:\n    surface_area = surface area of the cone\n    \"\"\"\n    surface_area = math.pi * radius * height\n    return surface_area\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    height = int(input(\"Height: \"))\n    radius = int(input(\"Radius: \"))\n    print(cone_area(height, radius))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef cone_area(radius, height):\n    \"\"\"\n    Returns the area of a cone.\n\n    Arguments:\n        radius -- the radius of the cone\n        height -- the height of the cone\n    Returns:\n        The area of the cone.\n    \"\"\"\n    return math.pi * radius * height\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print cone_area(2, 3)\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def cone_area(radius, height):\n    \"\"\"\n    :param radius: the base radius\n    :param height: the height\n    :return: the surface area of the cone\n    \"\"\"\n    return 4 * radius * height\n\nif __name__ == \"__main__\":\n    print cone_area(3, 1)\n    print cone_area(2, 3)\n    print cone_area(2, 3.5)\n    print cone_area(2, 4)",
      -0.85791015625
    ],
    [
      "import math\n\ndef cone_surface_area(radius, height):\n    \"\"\"\n    Input: radius of the cone, height of the cone\n    Output: Surface area of the cone\n    \"\"\"\n    return math.pi * radius * height\n\ndef main():\n    \"\"\"\n    Main function to test the solution\n    \"\"\"\n    print cone_surface_area(1, 1)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import math\n\ndef cone_area(radius, height):\n    return math.pi * radius * height\n\nif __name__ == '__main__':\n    print cone_area(3, 4)",
      -0.8583984375
    ],
    [
      "import math\n\ndef surface_area(height, radius):\n    \"\"\"\n    Compute the surface area of a cone.\n    \"\"\"\n    return math.pi * radius * height\n\n\ndef main():\n    height = float(input(\"Please enter the height of the cone: \"))\n    radius = float(input(\"Please enter the radius of the cone: \"))\n    print(\"The surface area of a cone with height {0} and radius {1} is {2}\".format(height, radius, surface_area(height, radius)))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import math\n\ndef cone_surface(radius, height):\n    return math.pi * radius * height\n\ndef main():\n    radius = float(input('Radius: '))\n    height = float(input('Height: '))\n    print('The surface area of the cone is %f' % cone_surface(radius, height))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "import math\nimport sys\n\ndef surface_area(height, radius):\n    return math.pi * (radius ** 2) * height\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: {} <height> <radius>\".format(sys.argv[0]))\n        return\n\n    height = float(sys.argv[1])\n    radius = float(sys.argv[2])\n\n    print(\"{} = {}\".format(surface_area(height, radius), surface_area(height, radius)))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def cone_area(r, h):\n    return 2 * r * h\n\nif __name__ == '__main__':\n    print(cone_area(1, 2))",
      -0.85888671875
    ],
    [
      "def cone_area(radius, height):\n    \"\"\"\n    Returns the area of the cone with given radius and height.\n    \"\"\"\n    return 2 * radius * height\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "import math\n\ndef cone_surface_area(height, radius):\n    \"\"\"\n    Given the height and radius of the cone, return the surface area of the cone.\n    \"\"\"\n    return math.pi * (radius * radius) * height\n\n\ndef main():\n    \"\"\"\n    Run the main() function.\n    \"\"\"\n    print cone_surface_area(1, 1)\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/cones/problem\n\n# Complete the coneSurface function below.\ndef coneSurface(r, h):\n    return r * h\n\nif __name__ == '__main__':\n    r = int(input())\n    h = int(input())\n    print(coneSurface(r, h))",
      -0.85888671875
    ],
    [
      "from math import pi\n\ndef cone_area(radius, height):\n    \"\"\"\n    Returns the area of the cone with given radius and height.\n    \"\"\"\n    return pi * radius * height\n\nif __name__ == \"__main__\":\n    assert cone_area(2, 3) == pi * 4",
      -0.85888671875
    ],
    [
      "import math\n\ndef cone_surface(height, radius):\n    \"\"\"\n    :type height: float\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return 2 * math.pi * radius * height\n\nif __name__ == \"__main__\":\n    print(cone_surface(1, 2))",
      -0.85888671875
    ],
    [
      "from math import pi\n\ndef cone_surface(height, radius):\n    \"\"\"\n    The surface area of a cone is given by the formula:\n\n    :math:`A = 2 \\\\pi r^2`\n\n    where r is the radius of the cone.\n\n    :param height: The height of the cone\n    :type height: float\n    :param radius: The radius of the cone\n    :type radius: float\n\n    :return: The surface area of the cone\n    :rtype: float\n    \"\"\"\n    return 2 * pi * radius ** 2 * height\n\n\nif __name__ == \"__main__\":\n    print cone_surface(2, 1)",
      -0.85888671875
    ],
    [
      "import math\n\ndef cone_surface(r, h):\n    \"\"\"\n    >>> cone_surface(2, 1)\n    1.0\n    >>> cone_surface(2, 2)\n    2.0\n    >>> cone_surface(2, 3)\n    4.0\n    \"\"\"\n    return math.pi * (r ** 2 + h ** 2)\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "from math import sqrt\n\ndef cone_surface_area(base, height):\n    \"\"\"\n    Computes the surface area of a cone.\n\n    :param base: The base radius of the cone.\n    :param height: The height of the cone.\n    :returns: The surface area of the cone.\n    \"\"\"\n    return base * height * (sqrt(3) - 1)\n\nif __name__ == '__main__':\n    print(cone_surface_area(1, 1))\n    print(cone_surface_area(1, 2))",
      -0.86083984375
    ],
    [
      "def cone_area(r, h):\n    return (r * h) / 2.0\n\ndef main():\n    r = input(\"Radius: \")\n    h = input(\"Height: \")\n    print(\"Cone Area: \", cone_area(r, h))\n\nmain()",
      -0.88916015625
    ],
    [
      "# https://www.hackerrank.com/challenges/surface-area-of-a-cone/problem\n\n#!/bin/python\n\n#!/bin/python\n\n# Complete the surfaceArea function below.\ndef surfaceArea(r, h):\n    area = (r * (h - r)) / 2.0\n    return area\n\nif __name__ == '__main__':\n    r, h = map(float, input().split())\n    print(surfaceArea(r, h))",
      -0.9013671875
    ],
    [
      "def cone_surface(r, h):\n    return 2 * r * h\n\nif __name__ == \"__main__\":\n    print cone_surface(5, 10)",
      -0.9892578125
    ],
    [
      "import math\n\ndef cone_area(r, h):\n    \"\"\"\n    Compute the area of a cone.\n    :param r: radius of the cone\n    :param h: height of the cone\n    :return: the surface area of the cone\n    \"\"\"\n    return math.pi * r * h\n\ndef main():\n    print cone_area(1, 2)\n\nif __name__ == \"__main__\":\n    main()",
      -1.4296875
    ],
    [
      "from math import sqrt, pi\n\ndef cone_surface(r, h):\n    return pi * r * h\n\nif __name__ == \"__main__\":\n    print cone_surface(1, 2)",
      -1.5546875
    ],
    [
      "def cone_area(r, h):\n    \"\"\"\n    r is the radius, and h is the height.\n    \"\"\"\n    return 2 * r * h\n\nprint(cone_area(1, 1))\nprint(cone_area(2, 2))\nprint(cone_area(3, 3))\nprint(cone_area(4, 4))\nprint(cone_area(5, 5))\nprint(cone_area(6, 6))\nprint(cone_area(7, 7))\nprint(cone_area(8, 8))\nprint(cone_area(9, 9))\nprint(cone_area(10, 10))",
      -1.658203125
    ],
    [
      "import math\n\ndef surface_area(radius, height):\n    \"\"\"\n    :type radius: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return math.pi * radius * height\n\nif __name__ == '__main__':\n    print(surface_area(3, 6))\n    print(surface_area(2, 4))\n    print(surface_area(3, 5))\n    print(surface_area(4, 7))",
      -1.701171875
    ],
    [
      "class Solution(object):\n    def coneArea(self, L, R, R_L):\n        \"\"\"\n        :type L: int\n        :type R: int\n        :type R_L: int\n        :rtype: int\n        \"\"\"\n        # L is the base of the cone, and R is the apex\n        # The surface area of a cone is the area of a circle\n        # where the circle has a radius equal to the distance between the apex and base\n        # L is the apex, and R is the base\n        return (L + R) * (R_L + L) / 2\n\nif __name__ == \"__main__\":\n    assert Solution().coneArea(1, 2, 1) == 4, \"Expected 4, got %s\" % Solution().coneArea(1, 2, 1)\n    assert Solution().coneArea(1, 2, 2) == 8, \"Expected 8, got %s\" % Solution().coneArea(1, 2, 2)\n    assert Solution().coneArea(1, 2, 3) == 16, \"Expected 16, got %s\" % Solution().coneArea(1, 2, 3)\n    assert Solution().coneArea(1, 2, 4) == 32, \"Expected 32, got %s\" % Solution().coneArea(1, 2, 4)\n    assert Solution().coneArea(1, 2, 5) == 48, \"Expected 48, got %s\" % Solution().coneArea(1, 2, 5)\n    assert Solution().coneArea(1, 2, 6) == 64, \"Expected 64, got %s\" % Solution().coneArea(1, 2, 6)",
      -1.9716796875
    ],
    [
      "# https://www.hackerrank.com/challenges/cone-area/problem\n\nimport math\n\n\ndef cone_area(r, h):\n    # r is the radius of the cone, h is the height of the cone\n    return math.pi*r*r*h\n\n\nif __name__ == \"__main__\":\n    print(cone_area(4, 2))",
      -2.09375
    ],
    [
      "def cone_area(radius, height):\n    \"\"\"\n    :type radius: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    # Your Code Here\n    return (3.14 * radius * height)\n\nif __name__ == '__main__':\n    print(cone_area(3, 4))\n    print(cone_area(5, 5))",
      -2.109375
    ],
    [
      "import math\n\ndef cone_area(r, h):\n    return 2 * math.pi * r * h\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert cone_area(1, 1) == math.pi, \"Radius 1\"\n    assert cone_area(2, 1) == 2 * math.pi, \"Radius 2\"\n    assert cone_area(3, 1) == 6 * math.pi, \"Radius 3\"\n\nif __name__ == \"__main__\":\n    main()",
      -2.212890625
    ],
    [
      "import math\n\ndef cone_area(height, radius):\n    \"\"\"\n    :type height: int\n    :type radius: int\n    :rtype: int\n    \"\"\"\n    return math.pi * radius * radius * height\n\nif __name__ == \"__main__\":\n    height = int(input(\"Enter height of cone: \"))\n    radius = int(input(\"Enter radius of cone: \"))\n\n    print(\"The surface area of a cone with height {} and radius {} is {}\".format(height, radius, cone_area(height, radius)))",
      -2.263671875
    ],
    [
      "def cone_area(height, radius):\n    \"\"\"\n    :type height: float\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return 2 * height * radius\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    height = float(input(\"Enter height of the cone: \"))\n    radius = float(input(\"Enter radius of the cone: \"))\n    print(\"The surface area of the cone is: \", cone_area(height, radius))\n\nif __name__ == \"__main__\":\n    main()",
      -2.4296875
    ],
    [
      "import numpy as np\n\ndef cone_surface_area(height, radius):\n    \"\"\"\n    Function to calculate the surface area of a cone\n    :param height: Height of the cone\n    :param radius: Radius of the cone\n    :return: Surface Area of the cone\n    \"\"\"\n    return (4 * np.pi * radius * height) / 3\n\ndef cone_area(height, radius):\n    \"\"\"\n    Function to calculate the area of the cone\n    :param height: Height of the cone\n    :param radius: Radius of the cone\n    :return: Area of the cone\n    \"\"\"\n    return (4 * np.pi * radius * height)\n\ndef test_cone_surface_area(height, radius):\n    \"\"\"\n    Function to test the surface area of a cone\n    :param height: Height of the cone\n    :param radius: Radius of the cone\n    :return: True if the surface area of the cone is correct, False otherwise\n    \"\"\"\n    return cone_surface_area(height, radius) == cone_area(height, radius)\n\n\n\nif __name__ == \"__main__\":\n    height = 0.5\n    radius = 0.5\n    assert test_cone_surface_area(height, radius) == True\n    print(\"Test passed\")",
      -3.08984375
    ],
    [
      "from math import sqrt\n\n\ndef cone_area(r, h):\n    \"\"\"\n    Returns the area of a cone.\n    \"\"\"\n    return r * h\n\n\nif __name__ == \"__main__\":\n    r = float(input(\"Enter the radius: \"))\n    h = float(input(\"Enter the height: \"))\n    print(cone_area(r, h))",
      -3.1015625
    ],
    [
      "def cone_area(r, h):\n    \"\"\"\n    r is radius, h is height.\n    \"\"\"\n    return 2 * pi * r * h\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert cone_area(1, 1) == pi * 2, \"Testing for circle\"\n    assert cone_area(1, 2) == pi * 4, \"Testing for square\"\n    assert cone_area(2, 1) == pi * 6, \"Testing for triangle\"",
      -3.134765625
    ],
    [
      "# The surface area of a cone is given by\n#\n#     area = pi * r^2 * h\n#\n# where pi is the ratio of the circumference of a circle to its diameter,\n# r is the radius of the cone, and h is the height of the cone.\n#\n# The input is a tuple of three integers r, h, and pi.\n#\n# Your function should return an integer.\n\n# https://leetcode.com/problems/surface-area-of-a-cone/discuss/76470/Python-DP-solution-with-explanation\n\nclass Solution(object):\n    def coneArea(self, r, h, pi):\n        \"\"\"\n        :type r: int\n        :type h: int\n        :type pi: float\n        :rtype: int\n        \"\"\"\n        d = 2 * r * pi\n        return d * h\n\n# Time:  O(n)\n# Space: O(n)\n# DP solution\nclass Solution2(object):\n    def coneArea(self, r, h, pi):\n        \"\"\"\n        :type r: int\n        :type h: int\n        :type pi: float\n        :rtype: int\n        \"\"\"\n        n = h + 1\n        res = [0] * (n + 1)\n        res[0] = pi * r * r * h\n        for i in xrange(1, n + 1):\n            res[i] = res[i - 1] + pi * r * r * (h - i + 1)\n        return res[-1]\n\n# Time:  O(n)\n# Space: O(n)\n# DP solution with a stack\nclass Solution3(object):\n    def coneArea(self, r, h, pi):\n        \"\"\"\n        :type r: int\n        :type h: int\n        :type pi: float\n        :rtype: int\n        \"\"\"\n        res = [0] * (h + 1)\n        res[0] = pi * r * r * h\n        for i in xrange(1, h + 1):\n            res[i] = res[i - 1] + pi * r * r * (h - i +",
      -3.166015625
    ],
    [
      "from math import pi\nfrom time import time\n\ndef area_of_a_cone(radius, height):\n    return pi * radius * height\n\ndef main():\n    start = time()\n    print(area_of_a_cone(1, 2))\n    print('Time elapsed: {}'.format(time() - start))\n\nif __name__ == '__main__':\n    main()",
      -3.26171875
    ],
    [
      "import math\n\ndef surface_area(height, radius):\n    \"\"\"\n    :param height: The height of the cone\n    :param radius: The radius of the cone\n    :return: The surface area of the cone\n    \"\"\"\n    return math.pi*(radius**2)*(height/2)\n\nif __name__ == '__main__':\n    height = int(input('Enter the height of the cone: '))\n    radius = int(input('Enter the radius of the cone: '))\n    print('The surface area of the cone is {}'.format(surface_area(height, radius)))",
      -3.357421875
    ],
    [
      "from math import pi\n\ndef cone_area(height, radius):\n    return height * pi * radius**2\n\ndef main():\n    height = float(input(\"Enter the height of the cone: \"))\n    radius = float(input(\"Enter the radius of the cone: \"))\n    area = cone_area(height, radius)\n    print(\"The surface area of the cone is {}\".format(area))\n\nif __name__ == '__main__':\n    main()",
      -3.5390625
    ],
    [
      "#!/usr/bin/env python\n\n# First, we define the cone's base radius as the radius of the top circle\n# divided by the height of the cone.\n#\n# Now, we can use the Pythagorean Theorem to compute the surface area of a\n# cone.\n#\n# We can also find the volume of a cone.\n\n#!/usr/bin/env python\n\n# First, we define the cone's base radius as the radius of the top circle\n# divided by the height of the cone.\n#\n# Now, we can use the Pythagorean Theorem to compute the surface area of a\n# cone.\n#\n# We can also find the volume of a cone.\n\n#!/usr/bin/env python\n\n# First, we define the cone's base radius as the radius of the top circle\n# divided by the height of the cone.\n#\n# Now, we can use the Pythagorean Theorem to compute the surface area of a\n# cone.\n#\n# We can also find the volume of a cone.\n\n#!/usr/bin/env python\n\n# First, we define the cone's base radius as the radius of the top circle\n# divided by the height of the cone.\n#\n# Now, we can use the Pythagorean Theorem to compute the surface area of a\n# cone.\n#\n# We can also find the volume of a cone.\n\nimport math\n\ndef get_area_of_cone(radius, height):\n    return math.pi * radius * height\n\ndef get_volume_of_cone(radius, height):\n    return math.pi * radius * height * (height / 2)\n\nprint(\"The surface area of a cone is {0}\".format(get_area_of_cone(2, 3)))\nprint(\"The volume of a cone is {0}\".format(get_volume_of_cone(2, 3)))",
      -4.0
    ],
    [
      "import math\n\ndef cone_area(height, radius):\n    \"\"\"\n    Input:\n        height: height of the cone\n        radius: radius of the cone\n    Output:\n        area: surface area of the cone\n    \"\"\"\n    area = math.pi * height * radius * radius\n    return area\n\n\ndef main():\n    height = input(\"Input the height of the cone: \")\n    radius = input(\"Input the radius of the cone: \")\n    area = cone_area(height, radius)\n    print(\"The surface area of the cone is:\", area)\n\nif __name__ == '__main__':\n    main()",
      -4.16015625
    ],
    [
      "import math\n\ndef cone_area(height, radius):\n    \"\"\"\n    @param height: height of the cone\n    @param radius: radius of the cone\n    @return: surface area of the cone\n    \"\"\"\n    return math.pi * (height * radius)\n\ndef main():\n    height = int(input(\"Enter the height of the cone: \"))\n    radius = int(input(\"Enter the radius of the cone: \"))\n    print(cone_area(height, radius))\n\nif __name__ == \"__main__\":\n    main()",
      -4.328125
    ],
    [
      "#!/usr/bin/env python\n\nimport math\n\n\ndef cone_area(angle):\n    \"\"\"\n    Compute the surface area of a cone given its angle.\n\n    :param angle: The angle of the cone in degrees.\n    :returns: The surface area of the cone.\n    \"\"\"\n    return math.pi * angle * (angle + 1) / 2\n\n\nif __name__ == \"__main__\":\n    print cone_area(90)\n    print cone_area(180)\n    print cone_area(270)\n    print cone_area(360)",
      -4.58984375
    ],
    [
      "# Import the modules necessary for the program\nimport math\nimport numpy as np\n\n# Create a function to calculate the area of a cone\ndef cone_area(r, h):\n    \"\"\"\n    Calculate the surface area of a cone.\n    \n    Args:\n        r: The radius of the base of the cone.\n        h: The height of the cone.\n    \n    Returns:\n        The surface area of the cone.\n    \"\"\"\n    # Define the function that calculates the area of a cone\n    def area_cone(r, h):\n        \"\"\"\n        Calculate the surface area of a cone.\n        \n        Args:\n            r: The radius of the base of the cone.\n            h: The height of the cone.\n        \n        Returns:\n            The surface area of the cone.\n        \"\"\"\n        # Define the constant for the surface area of a cone\n        C = (math.pi * r * h) / 3.0\n        return C\n    return area_cone(r, h)\n\n# Calculate the surface area of a cone\nprint(cone_area(5, 10))",
      -4.60546875
    ],
    [
      "# The following line will not be needed in the final version.\nimport math\n\n# Create a variable to store the total surface area of the cone.\ntotal_surface_area = 0\n\n\n# The following function will be used to calculate the surface area of a cone.\ndef cone_surface_area(height, radius):\n    \"\"\"\n    Calculate the surface area of a cone.\n\n    :param height: The height of the cone.\n    :type height: float\n\n    :param radius: The radius of the cone.\n    :type radius: float\n\n    :rtype: float\n    \"\"\"\n    # The surface area of a cone is calculated by taking the area of the\n    # cylinder of radius r and height h.\n    #\n    # The formula is:\n    #   area = PI * r * h\n    #\n    # This is the area of a cylinder of radius r and height h.\n    #\n    # The formula is:\n    #   area = PI * r * h\n    #\n    # This is the area of a cylinder of radius r and height h.\n    #\n    # The formula is:\n    #   area = PI * r * h\n    #\n    # This is the area of a cylinder of radius r and height h.\n    #\n    # The formula is:\n    #   area = PI * r * h\n    #\n    # This is the area of a cylinder of radius r and height h.\n    #\n    # The formula is:\n    #   area = PI * r * h\n    #\n    # This is the area of a cylinder of radius r and height h.\n    #\n    # The formula is:\n    #   area = PI * r * h\n    #\n    # This is the area of a cylinder of radius r and height h.\n    #\n    # The formula is:\n    #   area = PI * r * h\n    #\n    # This is the area of a cylinder of radius r and height h.\n    #\n    # The formula is:\n    #   area = PI * r * h\n    #\n    # This is the area of a cylinder of radius r and height h.\n    #\n    # The formula is:\n    #   area = PI * r * h",
      -5.0625
    ],
    [
      "import math\n\n\ndef cone_area(radius, height):\n    return math.pi * radius ** 2 * height\n\n\nif __name__ == '__main__':\n    radius = float(input('radius: '))\n    height = float(input('height: '))\n    print(cone_area(radius, height))",
      -5.35546875
    ],
    [
      "from math import pi, sqrt\n\ndef surface_area(r, h):\n    return pi * r * h\n\ndef test_area(r, h):\n    assert surface_area(r, h) == pi * r * h\n    assert surface_area(r, h) == surface_area(r, h)\n\ntest_area(1, 2)\ntest_area(1, 2.5)\ntest_area(2, 2)\ntest_area(2, 2.5)\ntest_area(3, 2)\ntest_area(3, 2.5)\ntest_area(4, 2)\ntest_area(4, 2.5)\ntest_area(5, 2)\ntest_area(5, 2.5)\ntest_area(6, 2)\ntest_area(6, 2.5)\ntest_area(7, 2)\ntest_area(7, 2.5)\ntest_area(8, 2)\ntest_area(8, 2.5)\ntest_area(9, 2)\ntest_area(9, 2.5)\ntest_area(10, 2)\ntest_area(10, 2.5)\ntest_area(11, 2)\ntest_area(11, 2.5)\ntest_area(12, 2)\ntest_area(12, 2.5)\ntest_area(13, 2)\ntest_area(13, 2.5)\ntest_area(14, 2)\ntest_area(14, 2.5)\ntest_area(15, 2)\ntest_area(15, 2.5)\ntest_area(16, 2)\ntest_area(16, 2.5)\ntest_area(17, 2)\ntest_area(17, 2.5)\ntest_area(18, 2)\ntest_area(18, 2.5)\ntest_area(19, 2)\ntest_area(19, 2.5)\ntest_area(20, 2)\ntest_area(20, 2.5)\ntest_area(21, 2)\ntest_area(21, 2.5)\ntest_area(22, 2)\ntest_area(22,",
      -5.66015625
    ],
    [
      "import math\n\n\ndef cone_surface_area(height, radius):\n    \"\"\"\n    :type height: float\n    :type radius: float\n    :rtype: float\n    \"\"\"\n    return math.pi * height * radius\n\n\nif __name__ == '__main__':\n    height, radius = map(float, input().split())\n    print(cone_surface_area(height, radius))",
      -5.69921875
    ],
    [
      "# import the necessary packages\nfrom math import sqrt\n\n#... define the cone's base radius\nr1 = 5\n\n#... define the cone's height\nh = 5\n\n#... define the cone's base height\nh1 = 4\n\n#... define the cone's outer radius\nr2 = 3\n\n#... define the cone's outer height\nh2 = 2\n\n#... define the cone's volume\nvolume = r1 * h1 * r2 * h2\n\n#... define the cone's surface area\nsurface = 4 * volume\n\nprint(\"The surface area of a cone with base radius %s, height %s and outer radius %s and outer height %s is %s.\" % (r1, h1, r2, h2, surface))",
      -5.76171875
    ],
    [
      "import math\n\ndef cone_area(r, h):\n    return math.pi * r * h\n\ndef main():\n    \"\"\"\n    Write a program that prompts the user to enter the radius of the cone, and\n    the height of the cone. Then, print the area of the cone.\n    \"\"\"\n    r = float(input(\"Enter the radius: \"))\n    h = float(input(\"Enter the height: \"))\n    area = cone_area(r, h)\n    print(\"The area of the cone is %.2f\" % area)\n\nif __name__ == '__main__':\n    main()",
      -6.1953125
    ],
    [
      "from math import pi\n\ndef cone_area(height, radius, angle):\n    \"\"\"\n    Given height, radius and angle of a cone, return the surface area of the cone.\n    \"\"\"\n    return 2 * pi * radius * height * (angle / 180)\n\n\ndef main():\n    \"\"\"\n    Sample output:\n\n    The surface area of a cone with height 1, radius 10, angle 15 is 442.\n    \"\"\"\n    height = 1\n    radius = 10\n    angle = 15\n    area = cone_area(height, radius, angle)\n    print(\"The surface area of a cone with height {} and radius {} and angle {} is {}\".format(\n        height, radius, angle, area))\n\n\nif __name__ == '__main__':\n    main()",
      -6.515625
    ],
    [
      "def cone_area(height, radius, angle_of_rotation):\n    \"\"\"\n    :type height: int\n    :type radius: int\n    :type angle_of_rotation: int\n    :rtype: int\n    \"\"\"\n    area = (2 * math.pi * radius * height) / angle_of_rotation\n    return area\n\ndef main():\n    height = int(input())\n    radius = int(input())\n    angle_of_rotation = int(input())\n    print(cone_area(height, radius, angle_of_rotation))\n\nif __name__ == '__main__':\n    main()",
      -6.63671875
    ],
    [
      "import math\n\n\ndef cone_area(radius, height):\n    \"\"\"\n    :type radius: float\n    :type height: float\n    :rtype: float\n    \"\"\"\n    area = math.pi * (radius ** 2) * height\n    return area\n\n\nif __name__ == '__main__':\n    print cone_area(1, 2)\n    print cone_area(2, 3)",
      -6.66796875
    ],
    [
      "def cone_area(radius, height):\n    \"\"\"\n    :type radius: int\n    :type height: int\n    :rtype: int\n    \"\"\"\n    return 2 * radius * height\n\nif __name__ == \"__main__\":\n    assert cone_area(1, 2) == 6\n    assert cone_area(2, 2) == 4\n    assert cone_area(3, 2) == 6\n    assert cone_area(4, 2) == 8\n    assert cone_area(5, 2) == 10\n    assert cone_area(6, 2) == 12\n    assert cone_area(7, 2) == 14\n    assert cone_area(8, 2) == 16\n    assert cone_area(9, 2) == 18\n    assert cone_area(10, 2) == 20\n    assert cone_area(11, 2) == 22\n    assert cone_area(12, 2) == 24\n    assert cone_area(13, 2) == 26\n    assert cone_area(14, 2) == 28\n    assert cone_area(15, 2) == 30\n    assert cone_area(16, 2) == 32\n    assert cone_area(17, 2) == 34\n    assert cone_area(18, 2) == 36\n    assert cone_area(19, 2) == 38\n    assert cone_area(20, 2) == 40",
      -7.2265625
    ],
    [
      "import math\n\ndef surface_area(radius, height):\n    return math.pi * radius * height\n\nprint(surface_area(1, 1))\nprint(surface_area(1, 2))\nprint(surface_area(2, 1))\nprint(surface_area(2, 2))\nprint(surface_area(3, 1))\nprint(surface_area(3, 2))\nprint(surface_area(4, 1))\nprint(surface_area(4, 2))\nprint(surface_area(5, 1))\nprint(surface_area(5, 2))\nprint(surface_area(6, 1))\nprint(surface_area(6, 2))\nprint(surface_area(7, 1))\nprint(surface_area(7, 2))\nprint(surface_area(8, 1))\nprint(surface_area(8, 2))\nprint(surface_area(9, 1))\nprint(surface_area(9, 2))\nprint(surface_area(10, 1))\nprint(surface_area(10, 2))\nprint(surface_area(11, 1))\nprint(surface_area(11, 2))\nprint(surface_area(12, 1))\nprint(surface_area(12, 2))\nprint(surface_area(13, 1))\nprint(surface_area(13, 2))\nprint(surface_area(14, 1))\nprint(surface_area(14, 2))\nprint(surface_area(15, 1))\nprint(surface_area(15, 2))\nprint(surface_area(16, 1))\nprint(surface_area(16, 2))\nprint(surface_area(17, 1))\nprint(surface_area(17, 2))\nprint(surface_area(18, 1))\nprint(surface_area(18, 2))\nprint(surface_area(19, 1))\nprint(surface_area(19, 2))\nprint(surface_area(20, 1))\nprint(surface_area(20, 2))\nprint(surface_area(21, 1))\nprint(surface_area(21, 2))\nprint(surface_area(22, 1))\nprint(surface_area(22, 2))\nprint(",
      -7.53125
    ],
    [
      "import math\n\ndef cone_surface_area(height, radius):\n    \"\"\"\n    :param height: The height of the cone.\n    :param radius: The radius of the cone.\n    :return: The surface area of the cone.\n    \"\"\"\n    return math.pi * height * radius * radius / 4\n\n# Test cases\n# 1) Test case 1:\n# cone_surface_area(1, 1) == 2 * math.pi\n# cone_surface_area(2, 1) == 3 * math.pi / 2\n# cone_surface_area(3, 1) == 4 * math.pi / 3\n# cone_surface_area(4, 1) == 5 * math.pi / 4\n# cone_surface_area(5, 1) == 6 * math.pi / 5\n# cone_surface_area(6, 1) == 7 * math.pi / 6\n# cone_surface_area(7, 1) == 8 * math.pi / 7\n# cone_surface_area(8, 1) == 9 * math.pi / 8\n\n# 2) Test case 2:\n# cone_surface_area(1, 2) == 6 * math.pi / 4\n# cone_surface_area(2, 2) == 9 * math.pi / 5\n# cone_surface_area(3, 2) == 12 * math.pi / 7\n# cone_surface_area(4, 2) == 15 * math.pi / 8\n# cone_surface_area(5, 2) == 18 * math.pi / 9\n# cone_surface_area(6, 2) == 21 * math.pi / 10\n# cone_surface_area(7, 2) == 24 * math.pi / 11\n# cone_surface_area(8, 2) == 27 * math.pi / 12\n\n# 3) Test case 3:\n# cone_surface_area(1, 3) == 9 * math.pi / 5\n# cone_surface_area(2, 3) == 15 * math.pi / 8\n# cone_surface_area(3, 3) == 21 * math.pi / 10\n# cone_surface_area(4, 3) == 24 * math.pi / 11\n# cone_surface_area(5, 3",
      -7.5859375
    ],
    [
      "# http://stackoverflow.com/questions/113940/how-to-calculate-volume-of-a-cylinder\n# http://stackoverflow.com/questions/113940/how-to-calculate-volume-of-a-cylinder\n\n# area of a cylinder is half of the surface area of the cone\n# http://stackoverflow.com/questions/113940/how-to-calculate-volume-of-a-cylinder\n\n# https://www.youtube.com/watch?v=zdJZq9B_Zcg\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun.com/area-of-a-cylinder.html\n\n# http://www.mathsisfun",
      -8.3203125
    ],
    [
      "import math\n\ndef cone_area(radius, height):\n    \"\"\"\n    Returns the surface area of a cone.\n\n    radius: the radius of the cone\n    height: the height of the cone\n    \"\"\"\n    return math.pi * radius * height\n\n\ndef main():\n    \"\"\"\n    Unit tests for cone_area().\n    \"\"\"\n    assert cone_area(1, 1) == math.pi\n    assert cone_area(2, 1) == 2 * math.pi\n    assert cone_area(1, 2) == 4 * math.pi\n    assert cone_area(2, 2) == 4 * math.pi\n\n\nif __name__ == '__main__':\n    main()",
      -8.5078125
    ],
    [
      "def cone_area(height, radius):\n    \"\"\"\n    Input:\n    height -- the height of the cone\n    radius -- the radius of the cone\n    Output:\n    the surface area of the cone\n    \"\"\"\n    \n    height = float(height)\n    radius = float(radius)\n    \n    return height*radius*3.14159\n\nif __name__ == '__main__':\n    height = input('Enter the height of the cone: ')\n    radius = input('Enter the radius of the cone: ')\n    \n    print('The surface area of the cone is:', cone_area(height, radius))",
      -8.5390625
    ],
    [
      "# https://www.hackerrank.com/challenges/cone-area/problem\n# https://www.hackerrank.com/challenges/cone-area/hints/\n# https://www.hackerrank.com/challenges/cone-area/examples\n\n# Calculating the surface area of a cone is an optimization problem. The\n# objective is to minimize the volume of the cone.\n#\n# A cone has a surface area of 1.\n#\n# The volume of a cone is the product of the volume of the base and the\n# height of the cone.\n#\n# A cone has a surface area of 1, when the base is a point and the height is\n# 1.\n#\n# A cone has a surface area of 0, when the base is a point and the height is\n# greater than 1.\n#\n# A cone has a surface area of 0, when the base is a point and the height is\n# less than 1.\n#\n# A cone has a surface area of 1, when the base is a line and the height is\n# 1.\n#\n# A cone has a surface area of 0, when the base is a line and the height is\n# greater than 1.\n#\n# A cone has a surface area of 0, when the base is a line and the height is\n# less than 1.\n#\n# A cone has a surface area of 1, when the base is a line and the height is\n# greater than 2.\n#\n# A cone has a surface area of 0, when the base is a line and the height is\n# less than 2.\n\n# A cone has a surface area of 1, when the base is a line and the height is\n# greater than 2.\n#\n# A cone has a surface area of 0, when the base is a line and the height is\n# less than 2.\n\n# A cone has a surface area of 1, when the base is a line and the height is\n# greater than 2.\n#\n# A cone has a surface area of 0, when the base is a line and the height is\n# less than 2.\n\n# A cone has a surface area of 1, when the base is a line and the height is\n# greater than 2.\n#\n# A cone has a surface area",
      -8.5546875
    ],
    [
      "import math\n\ndef cone_surface_area(radius, height):\n    return math.pi * radius ** 2 * height\n\n# Test cases\nassert cone_surface_area(1, 1) == math.pi\nassert cone_surface_area(2, 1) == math.pi\nassert cone_surface_area(2, 2) == math.pi * 4\nassert cone_surface_area(4, 4) == math.pi * 8\nassert cone_surface_area(4, 5) == math.pi * 8\nassert cone_surface_area(4, 6) == math.pi * 8\nassert cone_surface_area(4, 7) == math.pi * 8\nassert cone_surface_area(4, 8) == math.pi * 8\nassert cone_surface_area(4, 9) == math.pi * 8\nassert cone_surface_area(4, 10) == math.pi * 8\nassert cone_surface_area(4, 11) == math.pi * 8\nassert cone_surface_area(4, 12) == math.pi * 8\nassert cone_surface_area(4, 13) == math.pi * 8\nassert cone_surface_area(4, 14) == math.pi * 8\nassert cone_surface_area(4, 15) == math.pi * 8\nassert cone_surface_area(4, 16) == math.pi * 8\nassert cone_surface_area(4, 17) == math.pi * 8\nassert cone_surface_area(4, 18) == math.pi * 8\nassert cone_surface_area(4, 19) == math.pi * 8\nassert cone_surface_area(4, 20) == math.pi * 8\nassert cone_surface_area(4, 21) == math.pi * 8\nassert cone_surface_area(4, 22) == math.pi * 8\nassert cone_surface_area(4, 23) == math.pi * 8\nassert cone_surface_area(4, 24) == math.pi * 8\nassert cone_surface_area(4, 25) == math.pi * 8\nassert cone_surface_area(4, 26) == math.pi * 8\nassert cone_surface_area(4, 27) == math.",
      -8.6796875
    ],
    [
      "import math\n\ndef cone_surface_area(r, h):\n    \"\"\"\n    @param r: the radius of the cone\n    @param h: the height of the cone\n    @return: the surface area of the cone\n    \"\"\"\n    return 2 * r * math.pi * h\n\nif __name__ == \"__main__\":\n    r = int(input(\"Enter the radius of the cone: \"))\n    h = int(input(\"Enter the height of the cone: \"))\n    print(\"The surface area of the cone is {0}\".format(cone_surface_area(r, h)))",
      -9.0625
    ],
    [
      "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return '<Point %s, %s>' % (self.x, self.y)\n\n# Definition for a line segment.\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __repr__(self):\n        return '<Segment %s, %s>' % (self.p1, self.p2)\n\nclass Solution:\n    def coneArea(self, l, r, h):\n        \"\"\"\n        :type l: Point\n        :type r: Point\n        :type h: Point\n        :rtype: int\n        \"\"\"\n        x1, y1 = l.x, l.y\n        x2, y2 = r.x, r.y\n        x3, y3 = h.x, h.y\n\n        d = (y2 - y3) * (x2 - x1) - (y3 - y1) * (x2 - x3)\n\n        return abs(d / 2)",
      -9.4296875
    ],
    [
      "def cone_surface_area(radius, height):\n    \"\"\"\n    Given a radius and a height, calculate the surface area of the cone.\n\n    Inputs:\n    radius - the radius of the cone\n    height - the height of the cone\n    Output:\n    The surface area of the cone.\n    \"\"\"\n    return 2 * radius * height\n\nif __name__ == \"__main__\":\n    radius = int(input(\"What is the radius of the cone? \"))\n    height = int(input(\"What is the height of the cone? \"))\n\n    print(cone_surface_area(radius, height))",
      -9.4453125
    ],
    [
      "from math import pi, sqrt\n\ndef cone_area(r, h):\n    \"\"\"\n    Calculates the area of a cone.\n\n    r is the radius of the base of the cone.\n    h is the height of the cone.\n\n    Returns an int.\n    \"\"\"\n    return pi * r * h\n\nif __name__ == \"__main__\":\n    r = float(input(\"Radius: \"))\n    h = float(input(\"Height: \"))\n\n    print(\"The surface area of the cone is {0}\".format(cone_area(r, h)))",
      -9.8359375
    ],
    [
      "import math\n\ndef cone_area(radius, height):\n    return 2 * math.pi * radius * height\n\ndef main():\n    radius = input(\"Radius: \")\n    height = input(\"Height: \")\n    area = cone_area(radius, height)\n    print(\"The cone's area is %s\" % area)\n\nif __name__ == '__main__':\n    main()",
      -9.9296875
    ],
    [
      "# https://www.codeeval.com/open_challenges/109/\n# https://www.codeeval.com/open_challenges/109/\n# https://www.codeeval.com/open_challenges/109/\n\n# Read the input file\nwith open(\"input.txt\") as input_file:\n    input_file_content = input_file.read()\n\n# Read the input file\ninput_file_content = input_file_content.strip().splitlines()\n\n# Read the input file\nn = int(input_file_content[0])\n\n# Read the input file\nsides = []\nfor line in input_file_content[1:n+1]:\n    sides.append(int(line))\n\n# Read the input file\n# sides = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,",
      -10.7265625
    ],
    [
      "# import the necessary packages\nfrom math import pi\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# define the cone\ncone = {\n    'base': 2.0,\n    'height': 1.0,\n    'opening': 0.0\n}\n\n# calculate the surface area of the cone\nsurface_area = (2.0 * pi * cone['base'] * cone['height']) - (2.0 * pi * cone['base'] * cone['opening'])\n\n# display the surface area\nprint(\"Surface area of a cone is %f\" % surface_area)\n\n# display the surface area of a cylinder\ncylinder = {\n    'base': 2.0,\n    'height': 1.0,\n    'length': 1.0\n}\n\nsurface_area = (2.0 * pi * cylinder['base'] * cylinder['height']) - (2.0 * pi * cylinder['base'] * cylinder['length'])\n\nprint(\"Surface area of a cylinder is %f\" % surface_area)\n\n# display the surface area of a sphere\nsphere = {\n    'radius': 2.0\n}\n\nsurface_area = 4.0 * pi * sphere['radius'] ** 3\n\nprint(\"Surface area of a sphere is %f\" % surface_area)\n\n# display the surface area of a cube\ncube = {\n    'length': 2.0,\n    'width': 2.0,\n    'height': 2.0\n}\n\nsurface_area = 6.0 * pi * cube['length'] * cube['width'] * cube['height']\n\nprint(\"Surface area of a cube is %f\" % surface_area)\n\n# display the surface area of a square\nsquare = {\n    'length': 2.0,\n    'width': 2.0\n}\n\nsurface_area = 2.0 * pi * square['length'] * square['width']\n\nprint(\"Surface area of a square is %f\" % surface_area)\n\n# display the surface area of a hexagon\nhexagon = {\n    'length': 2.0,\n    'width': 1.0\n}\n\nsurface_area = 6.0 * pi",
      -11.3203125
    ],
    [
      "# Definition for a point.\nclass Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution(object):\n    def coneArea(self, points):\n        \"\"\"\n        :type points: List[Point]\n        :rtype: int\n        \"\"\"\n        def getArea(p1, p2):\n            return p2.x * (p1.y - p2.y) + (p1.x - p2.x) * (p2.y - p1.y)\n        area = 0\n        for i in range(len(points)):\n            area += getArea(points[i], points[(i + 1) % len(points)])\n        return area",
      -11.4609375
    ],
    [
      "import math\n\ndef surface(radius, height):\n    \"\"\"\n    :type radius: float\n    :type height: float\n    :rtype: float\n    \"\"\"\n    return math.pi * (radius ** 2) * height\n\nif __name__ == '__main__':\n    assert surface(5, 4) == 24, \"Test 1\"\n    assert surface(5, 5) == 25, \"Test 2\"",
      -12.2265625
    ],
    [
      "import math\n\ndef cone_area(height, base_radius, top_radius):\n    \"\"\"\n    :type height: float\n    :type base_radius: float\n    :type top_radius: float\n    :rtype: float\n    \"\"\"\n    area = (height / 2) * (base_radius + top_radius)\n    area = math.sqrt(area)\n    return area\n\nif __name__ == \"__main__\":\n    print cone_area(2, 1, 1)",
      -12.25
    ],
    [
      "import numpy as np\n\ndef cone_surface_area(height, radius):\n    \"\"\"\n    Given a cone height and radius, return the surface area of the cone.\n    \"\"\"\n    return 2 * np.pi * radius * height\n\n\nif __name__ == '__main__':\n    height = np.array([1, 2, 3, 4])\n    radius = np.array([1, 2, 3, 4])\n    print(cone_surface_area(height, radius))",
      -12.2734375
    ],
    [
      "import math\n\ndef surface_area(height, radius):\n    \"\"\"\n    Given the height and radius of the cone, return the surface area.\n\n    Example\n    >>> surface_area(2, 1)\n    4\n    >>> surface_area(3, 2)\n    12\n    >>> surface_area(4, 3)\n    48\n    >>> surface_area(3, 2.5)\n    15.5\n    \"\"\"\n    return math.pi * (height * radius)\n\ndef main():\n    \"\"\"\n    Print the answer to the console.\n    \"\"\"\n    print surface_area(3, 2)\n\nif __name__ == \"__main__\":\n    main()",
      -12.6640625
    ],
    [
      "import math\n\n\ndef cone_area(angle_of_the_cone):\n    \"\"\"\n    :param angle_of_the_cone: the angle of the cone in degrees\n    :return: the surface area of the cone\n    \"\"\"\n    return math.pi * 2 * angle_of_the_cone\n\n\ndef main():\n    \"\"\"\n    This is the entry point of the program.\n    \"\"\"\n    angle_of_the_cone = input(\"Please enter the angle of the cone in degrees: \")\n    print(\"The cone's surface area is: {}\".format(cone_area(angle_of_the_cone)))\n\n\nif __name__ == '__main__':\n    main()",
      -13.5625
    ],
    [
      "from math import sqrt\n\ndef surface_area_of_cone(height, radius):\n    \"\"\"\n    Returns the surface area of a cone.\n\n    height: The height of the cone.\n    radius: The radius of the cone.\n    \"\"\"\n    return sqrt(4 * radius * radius * height)\n\nif __name__ == \"__main__\":\n    print(\"Enter the height of the cone:\")\n    height = float(input())\n    print(\"Enter the radius of the cone:\")\n    radius = float(input())\n    print(\"The surface area of the cone is:\", surface_area_of_cone(height, radius))",
      -14.46875
    ],
    [
      "import math\n\ndef cone_surface(height, radius, angle):\n    \"\"\"\n    :param height: Height of the cone\n    :param radius: Radius of the cone\n    :param angle: Angle of the cone\n    :return: Surface area of the cone\n    \"\"\"\n    # Assume that we have already checked that the height is positive.\n    # Calculate the area of the cone by taking the area of the cylinder\n    # and then subtracting the area of the cone itself.\n    return math.pi * radius * radius * height\n\n# Test cases\nprint(cone_surface(5, 10, math.pi/2))\nprint(cone_surface(10, 10, math.pi/2))\nprint(cone_surface(5, 10, math.pi))\nprint(cone_surface(10, 10, math.pi))\nprint(cone_surface(5, 10, math.pi/2 + math.pi/2))\nprint(cone_surface(10, 10, math.pi/2 + math.pi/2))",
      -16.453125
    ],
    [
      "# Definition for a point.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution(object):\n    def coneArea(self, x, y, r, h):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type r: int\n        :type h: int\n        :rtype: int\n        \"\"\"\n        # http://www.geeksforgeeks.org/area-of-a-cylinder/\n        # http://www.geeksforgeeks.org/area-of-a-cone/\n        return 2 * (x ** 2 + y ** 2) * r * h\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.coneArea(1, 2, 3, 4)\n    print s.coneArea(1, 2, 1, 4)",
      -16.765625
    ],
    [
      "# Definition for a point.\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Point({}, {})\".format(self.x, self.y)\n\nclass Solution:\n    def coneArea(self, x, y, r, h):\n        \"\"\"\n        :type x: float\n        :type y: float\n        :type r: float\n        :type h: float\n        :rtype: float\n        \"\"\"\n        return (2 * pi * r ** 2 * (h - y) + pi * r ** 2 * (x - r)) / 3\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.coneArea(1, 2, 3, 4))\n    print(s.coneArea(1, 2, 3, 1))\n    print(s.coneArea(1, 2, 4, 3))\n    print(s.coneArea(1, 2, 4, 2))\n    print(s.coneArea(1, 2, 4, 1))\n    print(s.coneArea(1, 2, 2, 1))\n    print(s.coneArea(1, 2, 2, 3))",
      -19.34375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}