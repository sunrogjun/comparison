{
  "problem": {
    "task_id": "MBPP/407",
    "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
    "test_list": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ],
    "challenge_test_list": [],
    "problem_id": 396
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from itertools import combinations\nfrom functools import reduce\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def nextGreaterElement(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return None\n        if root.left:\n            return self.nextGreaterElement(root.left)\n        if root.val > root.right.val:\n            return root\n        return self.nextGreaterElement(root.right)\n\n\nif __name__ == '__main__':\n    root = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    print(Solution().nextGreaterElement(root))",
      0.796875
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @return {integer}\n    def nextGreater(self, x):\n        if x <= 0:\n            return 1\n\n        # use a stack to store digits and find the next greater number\n        # for example, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8, 9 -> 9\n        # and keep the next greater number as the top of the stack\n        # the stack is empty when x is 9\n\n        stack = []\n        while x > 0:\n            stack.append(x % 10)\n            x //= 10\n\n        # we do not need to check the top of the stack since it is the next greater number\n        # if the top of the stack is 9, it means the number is already the next greater number\n        while stack:\n            if stack[-1] == 9:\n                break\n            stack.pop()\n            stack.append(stack.pop() + 1)\n\n        return stack[-1]",
      0.1409912109375
    ],
    [
      "def next_bigger(n):\n    digits = [int(i) for i in str(n)]\n    temp = 0\n    for i in xrange(len(digits)):\n        temp = digits[i] + digits[i+1]\n        digits[i] = temp % 10\n        temp = digits[i] / 10\n        digits[i+1] = temp\n    return int(''.join(map(str, digits)))\n\nprint next_bigger(10)",
      0.1383056640625
    ],
    [
      "# https://www.hackerrank.com/challenges/next-bigger/problem\n\nimport sys\n\n\ndef next_bigger(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    # Convert to string\n    number_str = str(number)\n    # Split into list of digits\n    digits = number_str.split(\"\")\n    # Create a new string that is next bigger\n    new_string = \"\"\n    # Iterate over the list\n    for i in range(len(digits)):\n        # Iterate over the digits\n        for j in range(len(digits)):\n            # If the digit is bigger than the current digit, append the next digit\n            if digits[i] > digits[j]:\n                new_string += digits[j]\n                # If the digit is the same, move the current digit to the left\n                elif digits[i] == digits[j]:\n                    new_string += digits[i]\n                    # If the digit is smaller than the current digit, move the current digit to the right\n                    elif digits[i] < digits[j]:\n                        new_string += digits[j]\n            # If the digit is smaller than the current digit, append the current digit\n            elif digits[i] < digits[j]:\n                new_string += digits[i]\n    return int(new_string)\n\n\nif __name__ == \"__main__\":\n    # https://www.hackerrank.com/challenges/next-bigger/problem\n    try:\n        number = int(sys.stdin.readline())\n    except ValueError:\n        print(\"ValueError\")\n    else:\n        print(next_bigger(number))",
      -0.257080078125
    ],
    [
      "class Solution(object):\n    def nextGreaterElements(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: List[int]\n        \"\"\"\n        result = [num]\n        for i in range(len(num) - 1):\n            if num[i] < num[i + 1]:\n                result.append(num[i])\n                result.append(num[i + 1])\n        return result",
      -0.6611328125
    ],
    [
      "import sys\n\nif __name__ == \"__main__\":\n    try:\n        num = int(sys.argv[1])\n    except ValueError:\n        print(\"Usage: python3 next_bigger_number.py number\")\n        sys.exit(1)\n    print(next_bigger_number(num))",
      -0.85693359375
    ],
    [
      "def next_bigger(num):\n    result = str(num)\n    result = '0' * (len(num) - 1) + result\n    for i in range(len(result)):\n        if i == 0:\n            if result[i] == '9':\n                result = result[:i] + '1' + result[i + 1:]\n            else:\n                result = result[:i] + '9' + result[i + 1:]\n        elif result[i] == '9':\n            result = result[:i] + '1' + result[i + 1:]\n        else:\n            result = result[:i] + '9' + result[i + 1:]\n    return result\n\n\ndef main():\n    num = '12223334444'\n    print(next_bigger(num))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param {integer} num\n    # @return {integer}\n    def nextDigit(self, num):\n        digits = [int(n) for n in str(num)]\n        for i, digit in enumerate(digits):\n            if digit < 10:\n                digits[i] = digit + 1\n                break\n            else:\n                digits[i] = digit - 10\n                break\n        return int(\"\".join(digits))\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.nextDigit(123)\n    print solution.nextDigit(12345)\n    print solution.nextDigit(123456789)\n    print solution.nextDigit(12345678901)\n    print solution.nextDigit(1234567890123)\n    print solution.nextDigit(123456789012345)",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return -1\n        digits = list(str(n))\n        digits.sort()\n        for i in range(len(digits) - 1, -1, -1):\n            if digits[i]!= digits[i + 1]:\n                return int(digits[i] + digits[i + 1])",
      -0.85791015625
    ],
    [
      "#\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def nextGreaterElement(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: TreeNode\n        \"\"\"\n        if root is None:\n            return None\n        if root.val > k:\n            return self.nextGreaterElement(root.right, k)\n        else:\n            return self.nextGreaterElement(root.left, k)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n /= 10\n\n        ans = 0\n        for i in range(len(digits) - 1, -1, -1):\n            if digits[i] < digits[i+1]:\n                ans = digits[i]\n                break\n\n        for i in range(len(digits) - 2, -1, -1):\n            if digits[i] > digits[i+1]:\n                ans = digits[i]\n                break\n\n        return ans",
      -0.8583984375
    ],
    [
      "from fractions import Fraction\n\n\nclass Solution(object):\n    def nextGreater(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        digits = [0] * 10\n        for i in range(len(digits)):\n            digits[i] = int(n) % 10\n            n = int(n) // 10\n\n        while True:\n            for i in range(len(digits)):\n                if digits[i] < 9:\n                    digits[i] += 1\n                    break\n            else:\n                break\n\n        return sum(digits)\n\n\nif __name__ == '__main__':\n    assert Solution().nextGreater(9) == 18\n    assert Solution().nextGreater(9) == 20\n    assert Solution().nextGreater(18) == 20",
      -0.8583984375
    ],
    [
      "import math\n\ndef next_bigger_num(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return int(str(num)[::-1]) + int(str(num)[1:])\n\ndef test_next_bigger_num():\n    assert next_bigger_num(10) == 11\n    assert next_bigger_num(100) == 101\n    assert next_bigger_num(1000) == 1001\n\nif __name__ == \"__main__\":\n    test_next_bigger_num()",
      -0.8583984375
    ],
    [
      "def next_greater_number(n):\n    \"\"\"\n    Input:\n    n - a number\n    \n    Output:\n    next_greater_number - next greater number\n    \n    Explanation:\n    If the number is already greater than the next greater number, return the original number.\n    For example, if n = 1000, the next greater number is 1001.\n    \n    If the number is not greater than the next greater number, return the next greater number.\n    For example, if n = 1001, the next greater number is 1000.\n    \"\"\"\n    \n    # Initialize next_greater_number\n    next_greater_number = n\n    \n    # If the number is greater than the next greater number, return the number\n    if n > next_greater_number:\n        return n\n    \n    # Otherwise, return the next greater number\n    while n > next_greater_number:\n        next_greater_number = next_greater_number * 10\n        next_greater_number = next_greater_number + n % 10\n        \n    return next_greater_number\n    \nif __name__ == \"__main__\":\n    n = 1001\n    print next_greater_number(n)",
      -0.8583984375
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def nextDigit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = n % 10\n        n = n * 10 + 9\n        return n % 10\n\n    def nextDigit2(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = n % 10\n        n = n * 10 + 9\n        return n % 10\n\n\nif __name__ == \"__main__\":\n    print Solution().nextDigit(12)\n    print Solution().nextDigit2(12)",
      -0.8583984375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param: n: An integer\n    @return: An integer\n    \"\"\"\n    def nextGreaterElement(self, n):\n        if n <= 0:\n            return 0\n        \n        num = n\n        res = 1\n        while num > 0:\n            if num % 10 > num / 10:\n                res = num\n                num = num / 10\n            else:\n                num = num / 10\n                res = res * 10 + num\n        \n        return res\n        \n\n# test\nsol = Solution()\nassert 2 == sol.nextGreaterElement(2)\nassert 10 == sol.nextGreaterElement(101)",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/next-bigger-number/problem\n\ndef next_bigger_number(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    s = str(num)\n    s_len = len(s)\n    s_copy = s[::-1]\n    for i in range(1, s_len):\n        if s[i]!= s[i-1]:\n            break\n    if i < s_len-1:\n        s_copy = s_copy[:i] + s_copy[i+1:]\n    return int(s_copy)\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for a0 in range(t):\n        num = int(input())\n        print(next_bigger_number(num))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nextDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        while num:\n            result += num % 10 * pow(10, len(str(num)) - 1)\n            num /= 10\n        return result",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @return {integer}\n    def nextDigits(self, x):\n        return x * 10 + self.nextDigits(x // 10)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nextDigits(1))\n    print(sol.nextDigits(100))",
      -0.8583984375
    ],
    [
      "def next_bigger(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(str(n)[::-1])\n\nif __name__ == \"__main__\":\n    for n in range(1, 100):\n        print(n, next_bigger(n))",
      -0.8583984375
    ],
    [
      "def next_bigger(number):\n    if number == 0:\n        return 1\n\n    big_number = 0\n    for i in range(len(str(number))):\n        digit = int(str(number)[i])\n        big_number = big_number * 10 + digit\n    return big_number\n\nprint(next_bigger(12))\nprint(next_bigger(123))\nprint(next_bigger(12345))\nprint(next_bigger(1234567))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nextDigit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        digit = 0\n        while n > 0:\n            digit = n % 10\n            n = n / 10\n        return digit + 10",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nextGreaterElements(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        ans = [num]\n        while num > 0:\n            ans.append(num % 10)\n            num /= 10\n        for i in xrange(len(ans) - 2, -1, -1):\n            if ans[i] < ans[i + 1]:\n                ans[i], ans[i + 1] = ans[i + 1], ans[i]\n        return ans",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def next_bigger(x):\n            if x <= 0:\n                return 0\n            x = 10*x\n            while x > n:\n                x = (x // 10) * 10 + 9\n            return x\n\n        return next_bigger(n)\n\n\nif __name__ == '__main__':\n    assert Solution().nextGreaterElement(9) == 10\n    assert Solution().nextGreaterElement(10) == 11\n    assert Solution().nextGreaterElement(11) == 12",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nextGreaterElements(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        curr = num\n        while curr > 0:\n            curr, rem = divmod(curr, 10)\n            result.append(rem)\n        result.reverse()\n        return result\n\nif __name__ == '__main__':\n    print Solution().nextGreaterElements(1234)",
      -0.8583984375
    ],
    [
      "__author__ = 'Daniel'\n\n\ndef next_bigger_number(num):\n    \"\"\"\n    :type num: str\n    :rtype: str\n    \"\"\"\n    s = str(num)\n    res = \"\"\n    for i, c in enumerate(s):\n        if i == 0:\n            res = str(10 ** (len(s) - 1) * int(c) + int(s[i + 1:]))\n        else:\n            res = str(10 ** (len(s) - 1 - i) * int(s[i + 1:]) + int(s[i:]))\n    return res\n\nif __name__ == \"__main__\":\n    print next_bigger_number(\"1010\")",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nextGreaterElements(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i in range(10, 0, -1):\n            if n % i == 0:\n                result.append(n / i)\n                n = n / i\n            elif n / i == 0:\n                result.append(n)\n                n = n / i\n        return result",
      -0.8583984375
    ],
    [
      "def next_bigger_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return next_bigger_number_base(n, 10)\n\n\ndef next_bigger_number_base(n, base):\n    if n < 0:\n        return next_bigger_number_base(-n, base)\n\n    if n == 0:\n        return 1\n\n    if n < base:\n        return n\n\n    return next_bigger_number_base(n / base, base * 10) + n % base\n\nif __name__ == '__main__':\n    print(next_bigger_number(1))\n    print(next_bigger_number(0))\n    print(next_bigger_number(123))\n    print(next_bigger_number(12345))\n    print(next_bigger_number(1234567))\n    print(next_bigger_number(123456789))\n    print(next_bigger_number(12345678901))",
      -0.8583984375
    ],
    [
      "def next_bigger(num):\n    # write your code here\n    big_num = num\n    for i in range(len(big_num)):\n        if big_num[i] < '9':\n            big_num = big_num[:i] + str(int(big_num[i]) + 1) + big_num[i+1:]\n    return big_num\n\n# Test Cases\nprint next_bigger(\"123\")\nprint next_bigger(\"100\")\nprint next_bigger(\"101\")\nprint next_bigger(\"12345\")\nprint next_bigger(\"1234567\")\nprint next_bigger(\"123456789\")",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/next-digit/discuss/27991/Java-with-explanation\n# https://leetcode.com/problems/next-digit/discuss/27992/Java-with-explanation\nclass Solution(object):\n    def nextDigit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # https://leetcode.com/problems/next-digit/discuss/27992/Java-with-explanation\n        # https://leetcode.com/problems/next-digit/discuss/27991/Java-with-explanation\n        return n + 10",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nextGreaterElements(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        i = 1\n        while i <= n:\n            if n % i == 0:\n                ans.append(n/i)\n                n = n / i\n                i = 1\n            else:\n                i += 1\n        ans.append(n)\n        ans.reverse()\n        return ans",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/next-digit/\n\n\nclass Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = str(n)\n        while len(n) > 0:\n            for i in range(len(n) - 1, 0, -1):\n                if n[i] < n[i - 1]:\n                    n = n[:i] + n[i + 1:]\n                    break\n            else:\n                return int(n)\n\n        return int(n)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        d = [0] * 10\n        i = 0\n        for digit in num:\n            while i < len(d) and d[i] > digit:\n                i += 1\n            d[i] = digit\n        return d[0]\n\n\nif __name__ == \"__main__\":\n    print Solution().nextGreaterElement(13)\n    print Solution().nextGreaterElement(11)\n    print Solution().nextGreaterElement(10)",
      -0.85888671875
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef next_bigger_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n if n % 2 == 0 else next_bigger_number(n / 2) * 10 + n % 10\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline())\n    print next_bigger_number(n)",
      -0.85888671875
    ],
    [
      "from collections import Counter\n\ndef next_bigger(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return 0\n\nif __name__ == \"__main__\":\n    assert next_bigger(5) == 0\n    assert next_bigger(6) == 2\n    assert next_bigger(10) == 20\n    assert next_bigger(100) == 200\n    assert next_bigger(1000) == 2000\n    assert next_bigger(12345) == 12345",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def nextGreaterElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        nums.sort()\n        for i in xrange(1, len(nums)):\n            if nums[i] > nums[i-1]:\n                return [nums[i]]\n            elif nums[i] < nums[i-1]:\n                return nums[i-1:] + [nums[i]]\n        return [nums[-1]]",
      -0.85888671875
    ],
    [
      "import re\n\ndef next_bigger(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if re.match(r'^[0-9]+$', num):\n        return next_bigger_digits(num)\n    else:\n        return next_bigger_string(num)\n\ndef next_bigger_digits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return str(int(num) + 1)\n\ndef next_bigger_string(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return ''.join(num.split('0')) + '1'\n\nif __name__ == \"__main__\":\n    print(next_bigger(123))\n    print(next_bigger(12345))\n    print(next_bigger(123456789))",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def nextDigit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # https://leetcode.com/problems/next-digit/discuss/63372/Python-Solution\n        while n > 0:\n            if n % 10 == 9:\n                n /= 10\n                n += 1\n            else:\n                n /= 10\n        return n\n\n\ndef main():\n    import time\n\n    start_time = time.time()\n    n = 1\n    for i in range(10):\n        n = Solution().nextDigit(n)\n    end_time = time.time()\n    print(n)\n    print(end_time - start_time)\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num < 0:\n            return -1\n        \n        i = len(str(num)) - 1\n        while i >= 0:\n            if int(str(num)[i]) < 10:\n                break\n            i -= 1\n            \n        if i == -1:\n            return 0\n        \n        while i < len(str(num)) - 1:\n            if int(str(num)[i]) > int(str(num)[i + 1]):\n                return num * 10 ** (len(str(num)) - i - 1)\n            i += 1\n        \n        return 0",
      -0.85888671875
    ],
    [
      "import unittest\n\ndef next_bigger(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return 0\n\nclass TestNextBigger(unittest.TestCase):\n    def test_next_bigger(self):\n        self.assertEqual(next_bigger(12), 21)\n        self.assertEqual(next_bigger(10), 20)\n        self.assertEqual(next_bigger(100), 200)\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.85888671875
    ],
    [
      "def next_bigger_number(n):\n    result = 0\n    while n > 0:\n        result = result * 10 + n % 10\n        n = n // 10\n    return result\n\n\nif __name__ == '__main__':\n    for i in range(1, 100):\n        print(next_bigger_number(i))",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def nextGreaterElements(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        nums = [num]\n        while nums[-1] > 0:\n            nums.append(nums[-1] + 1)\n            nums.append(nums[-1] - 1)\n        return nums\n\n\nif __name__ == '__main__':\n    print Solution().nextGreaterElements(1)\n    print Solution().nextGreaterElements(3)\n    print Solution().nextGreaterElements(5)\n    print Solution().nextGreaterElements(100)",
      -0.85888671875
    ],
    [
      "# https://leetcode.com/problems/next-larger-number/discuss/376852/Java-O(n)-Time-O(n)-Space-Solution\n\nclass Solution(object):\n    def nextLarger(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        while num!= ans:\n            num = num // 10\n            ans = ans * 10 + num\n        return ans\n\nclass Solution2(object):\n    def nextLarger(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        while num!= ans:\n            ans = ans * 10 + num\n            num = ans // 10\n            ans = ans % 10\n        return ans\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [2, 3, 4, 5]\n    for num in nums:\n        print(num, s.nextLarger(num))",
      -0.85888671875
    ],
    [
      "import sys\nimport collections\n\n\ndef get_digits(n):\n    return [int(i) for i in str(n)]\n\n\ndef next_bigger(n):\n    next_digits = get_digits(n)\n    next_digits.append(0)\n\n    for i in range(len(next_digits) - 2, -1, -1):\n        digits = next_digits[i:]\n        next_digits[i:] = [next_digits[i] + next_digits[i + 1]]\n\n        if all([next_digits[i] < next_digits[i + 1] for i in range(i, len(next_digits))]):\n            next_digits[i:] = digits\n\n    return ''.join(str(i) for i in next_digits)\n\n\ndef main():\n    test_cases = open(sys.argv[1], 'r')\n    for test in test_cases:\n        test = test.strip()\n        if test:\n            print(next_bigger(test))\n    test_cases.close()\n\n\nif __name__ == '__main__':\n    main()",
      -0.88623046875
    ],
    [
      "def next_bigger_number(n):\n    '''\n    n: integer, the number to be transformed\n    '''\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n //= 10\n    for i in range(1, len(digits)):\n        digits[i-1], digits[i] = digits[i], digits[i-1]\n    return sum([int(d) for d in digits])\n\n\nif __name__ == '__main__':\n    assert next_bigger_number(5) == 15\n    assert next_bigger_number(15) == 31\n    assert next_bigger_number(1) == 2\n    assert next_bigger_number(1000) == 1001\n    assert next_bigger_number(10000) == 10001",
      -1.3291015625
    ],
    [
      "class Solution(object):\n    def nextGreaterElements(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        # if n == 0:\n        #     return [1]\n        # if n == 1:\n        #     return [1, 1]\n        # if n == 2:\n        #     return [2, 1]\n        # if n == 3:\n        #     return [3, 2, 1]\n        # else:\n        #     return [n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9]\n\n        # if n == 0:\n        #     return [1]\n        # if n == 1:\n        #     return [1, 1]\n        # if n == 2:\n        #     return [2, 1]\n        # if n == 3:\n        #     return [3, 2, 1]\n        # else:\n        #     return [n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9]\n\n        return [n]",
      -2.23046875
    ],
    [
      "import unittest\n\nclass TestCases(unittest.TestCase):\n    def test_case1(self):\n        self.assertEqual(next_bigger_number('1'), '10')\n\n    def test_case2(self):\n        self.assertEqual(next_bigger_number('12'), '102')\n\n    def test_case3(self):\n        self.assertEqual(next_bigger_number('123'), '1230')\n\n    def test_case4(self):\n        self.assertEqual(next_bigger_number('1234'), '12340')\n\n    def test_case5(self):\n        self.assertEqual(next_bigger_number('12345'), '123456')\n\n    def test_case6(self):\n        self.assertEqual(next_bigger_number('123456'), '1234567')\n\n    def test_case7(self):\n        self.assertEqual(next_bigger_number('1234567'), '12345678')\n\n    def test_case8(self):\n        self.assertEqual(next_bigger_number('12345678'), '123456789')\n\n    def test_case9(self):\n        self.assertEqual(next_bigger_number('123456789'), '1234567890')\n\ndef next_bigger_number(n):\n    \"\"\"\n    :type n: str\n    :rtype: str\n    \"\"\"\n    return ''.join(sorted(n))\n\nif __name__ == '__main__':\n    unittest.main()",
      -2.513671875
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # check if n is a digit\n        if not isinstance(n, int):\n            return None\n        # check if n is negative\n        if n < 0:\n            return None\n        # check if n is zero\n        if n == 0:\n            return 1\n        # check if n is one\n        if n == 1:\n            return 2\n        # check if n is two\n        if n == 2:\n            return 3\n        # check if n is three\n        if n == 3:\n            return 4\n        # check if n is four\n        if n == 4:\n            return 5\n        # check if n is five\n        if n == 5:\n            return 6\n        # check if n is six\n        if n == 6:\n            return 7\n        # check if n is seven\n        if n == 7:\n            return 8\n        # check if n is eight\n        if n == 8:\n            return 9\n        # check if n is nine\n        if n == 9:\n            return 10\n        # check if n is 10\n        if n == 10:\n            return 11\n        # check if n is 11\n        if n == 11:\n            return 12\n        # check if n is 12\n        if n == 12:\n            return 13\n        # check if n is 13\n        if n == 13:\n            return 14\n        # check if n is 14\n        if n == 14:\n            return 15\n        # check if n is 15\n        if n == 15:\n            return 16\n        # check if n is 16\n        if n == 16:\n            return 17\n        # check if n is 17\n        if n == 17:\n            return 18\n        # check if n is 18\n        if n == 18:\n            return 19\n        # check if n is 19\n        if n == 19:\n            return 20\n        # check if n is 20\n        if n == 20:\n            return 21\n        # check if n is 21\n        if n == 21:\n            return 22\n        # check if n is 22\n        if n ==",
      -2.640625
    ],
    [
      "def next_bigger(n):\n    \"\"\"\n    :type n: str\n    :rtype: str\n    \"\"\"\n    if not n: return n\n    \n    l = len(n)\n    for i in range(l):\n        if i < l-1 and n[i] == n[i+1]:\n            n = n[:i+1] + str(int(n[i]) + 1) + n[i+2:]\n    return n\n\nif __name__ == '__main__':\n    n = \"11\"\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(n))\n    print(next_bigger(",
      -2.701171875
    ],
    [
      "# The function takes the number as input and returns the next bigger number.\n# If the number is already the next bigger number, it returns the same number.\n# If the number is negative, it returns the next bigger number with the sign reversed.\n\n# Input Format\n# The first line contains an integer N, denoting the number of test cases.\n# The second line contains N space-separated integers describing the number.\n# The following N lines describe the next bigger number for each number.\n# The last line contains a single integer denoting the number of test cases.\n# The integer value in each line is guaranteed to be between 1 and N.\n# Output Format\n# For each test case, print the next bigger number for the number on the first line.\n# The number of test cases is denoted on the last line.\n\n\n#!/usr/bin/python\n\nimport sys\n\ndef next_bigger(num):\n    result = num\n    while num > 1:\n        if num % 10 == 1:\n            num = num / 10\n        else:\n            num = num / 10 + num / 10\n        if num == 1:\n            break\n        result = num\n    return result\n\n\nif __name__ == '__main__':\n    # Read input\n    n = int(sys.argv[1])\n    data = [int(x) for x in sys.argv[2:n+1]]\n\n    # Calculate next bigger number\n    for i in range(n):\n        data[i] = next_bigger(data[i])\n    print(data)",
      -2.716796875
    ],
    [
      "import unittest\n\ndef next_bigger(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return 10 * next_bigger(n / 10) + n % 10\n\n\ndef next_bigger_1(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n if n % 10!= 9 else next_bigger(n / 10)\n\n\ndef next_bigger_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n if n % 10!= 9 else next_bigger(n / 10)\n\n\nclass TestNextBigger(unittest.TestCase):\n\n    def test_next_bigger(self):\n        self.assertEqual(next_bigger(9), 10)\n        self.assertEqual(next_bigger(10), 11)\n        self.assertEqual(next_bigger(100), 101)\n\n    def test_next_bigger_1(self):\n        self.assertEqual(next_bigger_1(9), 10)\n        self.assertEqual(next_bigger_1(10), 11)\n        self.assertEqual(next_bigger_1(100), 101)\n\n    def test_next_bigger_2(self):\n        self.assertEqual(next_bigger_2(9), 10)\n        self.assertEqual(next_bigger_2(10), 11)\n        self.assertEqual(next_bigger_2(100), 101)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -2.724609375
    ],
    [
      "import unittest\nimport os\nimport timeit\n\nclass Solution(object):\n    def nextDigit(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        # TODO\n        pass\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n# 1. keep all the digits, and try to find the next bigger number\n# 2. try to find the next bigger number by a simple method\n# 3. use a string of all digits to find the next bigger number\n# 4. use a string of all digits to find the next bigger number\n# 5. use a string of all digits to find the next bigger number\n# 6. use a string of all digits to find the next bigger number\n# 7. use a string of all digits to find the next bigger number\n# 8. use a string of all digits to find the next bigger number\n# 9. use a string of all digits to find the next bigger number\n# 10. use a string of all digits to find the next bigger number\n# 11. use a string of all digits to find the next bigger number\n# 12. use a string of all digits to find the next bigger number\n# 13. use a string of all digits to find the next bigger number\n# 14. use a string of all digits to find the next bigger number\n# 15. use a string of all digits to find the next bigger number\n# 16. use a string of all digits to find the next bigger number\n# 17. use a string of all digits to find the next bigger number\n# 18. use a string of all digits to find the next bigger number\n# 19. use a string of all digits to find the next bigger number\n# 20. use a string of all digits to find the next bigger number\n# 21. use a string of all digits to find the next bigger number\n# 22. use a string of all digits to find the next bigger number\n# 23. use a string of all digits to find the next bigger number\n# 24. use a string of all digits to find the next bigger number\n# 25. use a string",
      -3.142578125
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        while n > ans:\n            n = n - ans\n            ans += 1\n        return ans\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.nextGreaterElement(15))\n    print(s.nextGreaterElement(10))\n    print(s.nextGreaterElement(1))",
      -3.15234375
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.nextGreaterElement_back(n)\n\n    def nextGreaterElement_back(self, n):\n        # write your code here\n        if n == 1:\n            return 2\n        if n == 2:\n            return 4\n        if n == 3:\n            return 8\n        if n == 4:\n            return 16\n        if n == 5:\n            return 32\n        if n == 6:\n            return 64\n        if n == 7:\n            return 128\n        if n == 8:\n            return 256\n        if n == 9:\n            return 512\n        if n == 10:\n            return 1024\n        if n == 11:\n            return 2048\n        if n == 12:\n            return 4096\n        if n == 13:\n            return 8192\n        if n == 14:\n            return 16384\n        if n == 15:\n            return 32768\n        if n == 16:\n            return 65536\n        if n == 17:\n            return 131072\n        if n == 18:\n            return 262144\n        if n == 19:\n            return 524288\n        if n == 20:\n            return 1048576\n        if n == 21:\n            return 2097152\n        if n == 22:\n            return 4194304\n        if n == 23:\n            return 8388608\n        if n == 24:\n            return 16777216\n        if n == 25:\n            return 33554432\n        if n == 26:\n            return 67108864\n        if n == 27:\n            return 134217728\n        if n == 28:\n            return 268435456\n        if n == 29:\n            return 536870912\n        if n == 30:\n            return 1073741824\n        if n == 31:\n            return 2147483648\n        if n == 32:\n            return 4294967296\n        return n",
      -3.28515625
    ],
    [
      "#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n9\n\nOutput:\n\n10\n\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n3\n\nOutput:\n\n4\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n1\n\nOutput:\n\n2\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10\n\nOutput:\n\n100\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n14\n\nOutput:\n\n1004\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n100\n\nOutput:\n\n14\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n101\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n10001\n\nOutput:\n\n101\n\"\"\"\n\n#!/usr/bin/env python\n\n\"\"\"\nInput:\n\n101\n\nOutput:",
      -3.67578125
    ],
    [
      "# https://leetcode.com/problems/next-larger-number/\nclass Solution(object):\n    def nextLarger(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(num)):\n            res = num[i] + (10 ** i) * res\n        return res",
      -3.767578125
    ],
    [
      "# Example 1:\n# Input: [1,2,3]\n# Output: [1,3,2]\n# Explanation:\n# The 1 can be rearranged as a 1 2 3\n# The 2 can be rearranged as a 2 1 3\n# The 3 can be rearranged as a 3 2 1\n# Example 2:\n# Input: [3,2,1]\n# Output: [3,1,2]\n# Explanation:\n# The 1 can be rearranged as a 1 3 2\n# The 2 can be rearranged as a 2 3 1\n# The 3 can be rearranged as a 3 1 2\n# Example 3:\n# Input: [2,1,3]\n# Output: [2,3,1]\n# Explanation:\n# The 1 can be rearranged as a 1 2 3\n# The 2 can be rearranged as a 2 1 3\n# The 3 can be rearranged as a 3 2 1\n# Example 4:\n# Input: [1,4,5]\n# Output: [1,5,4]\n# Explanation:\n# The 1 can be rearranged as a 1 5 4\n# The 4 can be rearranged as a 4 1 5\n# The 5 can be rearranged as a 5 4 1\n# Example 5:\n# Input: [4,5,1]\n# Output: [4,1,5]\n# Explanation:\n# The 1 can be rearranged as a 1 4 5\n# The 4 can be rearranged as a 4 1 5\n# The 5 can be rearranged as a 5 1 4\n# Example 6:\n# Input: [3,2,1,6]\n# Output: [3,1,2,6]\n# Explanation:\n# The 1 can be rearranged as a 1 6 2 3\n# The 2 can be rearranged as a 2 1 6 3\n# The 3 can be rearranged as a 3 6 2 1\n# The 6 can be rearranged as a 6 1 2 3\n# Example 7:\n# Input: [7,6,5,4,3,2,1]\n# Output: [7,1,2,3,4,5,6]\n# Explanation:\n# The 1 can be rearranged as a 1 7 6 5 4 3 2",
      -3.919921875
    ],
    [
      "# Definition for a number.\nclass Number:\n    def __init__(self, num):\n        \"\"\"\n        num: a string\n        \"\"\"\n        self.num = num\n\n    def next(self):\n        return self.num[::-1] + str(int(self.num[::-1]) + 1)\n\n\nclass Solution(object):\n    def nextGreater(self, num):\n        \"\"\"\n        :type num: Number\n        :rtype: Number\n        \"\"\"\n        return self.next(num)\n\n\ndef main():\n    s = Solution()\n    nums = [\n        '12',\n        '123',\n        '1234',\n        '12345',\n        '123456',\n        '1234567',\n        '12345678',\n        '123456789',\n        '1234567890',\n        '12345678901',\n        '123456789012',\n        '1234567890123',\n        '12345678901234',\n        '123456789012345',\n        '1234567890123456',\n        '12345678901234567',\n        '123456789012345678',\n        '1234567890123456789',\n        '12345678901234567890',\n    ]\n    for num in nums:\n        print(num, s.nextGreater(Number(num)))\n\nif __name__ == '__main__':\n    main()",
      -3.99609375
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        str = str(n)\n        str_len = len(str)\n        \n        for i in range(str_len - 1, -1, -1):\n            if str[i] < str[i + 1]:\n                for j in range(i + 1, str_len):\n                    if str[j] > str[i]:\n                        return int(str[:i] + str[i + 1:j] + str[j + 1:])\n        return n",
      -4.0703125
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @return {integer}\n    def nextDigit(self, x):\n        i = 0\n        while i < 10 and x % 10 == 0:\n            i += 1\n            x /= 10\n        if i == 10:\n            return x\n        while x!= 0:\n            x, i = divmod(x, 10)\n            yield i\n\n    def nextDigit(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        while x!= 0:\n            x, i = divmod(x, 10)\n            yield i\n\n\nif __name__ == '__main__':\n    assert Solution().nextDigit(0) == 1\n    assert Solution().nextDigit(1) == 2\n    assert Solution().nextDigit(2) == 4\n    assert Solution().nextDigit(3) == 7\n    assert Solution().nextDigit(4) == 0\n    assert Solution().nextDigit(5) == 5\n    assert Solution().nextDigit(6) == 6\n    assert Solution().nextDigit(7) == 7\n    assert Solution().nextDigit(8) == 8\n    assert Solution().nextDigit(9) == 9\n    assert Solution().nextDigit(10) == 0",
      -4.47265625
    ],
    [
      "def next_bigger(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    # write your code here\n    if number == 0:\n        return 1\n    if number < 0:\n        return -1\n    result = 0\n    while number > 0:\n        if number % 10!= 0:\n            result = result * 10 + number % 10\n        number = number / 10\n    return result\n\nif __name__ == '__main__':\n    print next_bigger(4)\n    print next_bigger(12345)\n    print next_bigger(1000000)",
      -4.5
    ],
    [
      "class Solution:\n    # @param {integer} x\n    # @return {integer}\n    def nextDigit(self, x):\n        if x < 10:\n            return x + 1\n        else:\n            return x // 10 + 10 * (x % 10)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nextDigit(0))\n    print(sol.nextDigit(1))\n    print(sol.nextDigit(2))\n    print(sol.nextDigit(3))\n    print(sol.nextDigit(4))\n    print(sol.nextDigit(5))\n    print(sol.nextDigit(6))\n    print(sol.nextDigit(7))\n    print(sol.nextDigit(8))\n    print(sol.nextDigit(9))",
      -4.80859375
    ],
    [
      "class Solution:\n    # @param {integer} num\n    # @return {integer}\n    def nextDigit(self, num):\n        if num == 0:\n            return num\n        \n        str = str(num)\n        \n        for i in xrange(len(str)):\n            str = str[:i] + str[i+1:] + str[:i]\n            \n        if len(str) == 1:\n            return int(str)\n        \n        return int(str)",
      -5.4140625
    ],
    [
      "import unittest\nimport math\n\n\nclass Solution(object):\n    def nextGreaterElement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return int(math.ceil(num / 10)) * 10\n\n\nclass UnitTest(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(1, Solution().nextGreaterElement(1))\n        self.assertEqual(10, Solution().nextGreaterElement(9))\n        self.assertEqual(100, Solution().nextGreaterElement(99))\n        self.assertEqual(1000, Solution().nextGreaterElement(999))\n        self.assertEqual(10000, Solution().nextGreaterElement(9999))\n        self.assertEqual(100000, Solution().nextGreaterElement(99999))\n        self.assertEqual(1000000, Solution().nextGreaterElement(999999))\n        self.assertEqual(10000000, Solution().nextGreaterElement(9999999))\n        self.assertEqual(100000000, Solution().nextGreaterElement(99999999))\n        self.assertEqual(1000000000, Solution().nextGreaterElement(999999999))\n        self.assertEqual(10000000000, Solution().nextGreaterElement(9999999999))\n        self.assertEqual(100000000000, Solution().nextGreaterElement(99999999999))\n        self.assertEqual(1000000000000, Solution().nextGreaterElement(999999999999))\n        self.assertEqual(10000000000000, Solution().nextGreaterElement(9999999999999))\n        self.assertEqual(100000000000000, Solution().nextGreaterElement(99999999999999))\n        self.assertEqual(100000000000000, Solution().nextGreaterElement(999999999999999))\n        self.assertEqual(100000000000000, Solution().nextGreaterElement(9999999999999999))\n        self.assertEqual(100000000000000, Solution().nextGreaterElement(99999999999999999))\n        self.assertEqual(100000000000000, Solution().nextGreaterElement(999999999999999999))\n        self.assertEqual(100000000",
      -5.51171875
    ],
    [
      "# https://www.hackerrank.com/challenges/next-bigger-number/problem\n\nimport sys\n\n\ndef next_bigger(n):\n    if n < 2:\n        return n + 1\n    if n == 2:\n        return 3\n    if n < 10:\n        return n * 10\n    if n < 100:\n        return n * 100\n    if n < 1000:\n        return n * 1000\n    if n < 10000:\n        return n * 10000\n    if n < 100000:\n        return n * 100000\n    if n < 1000000:\n        return n * 1000000\n    if n < 10000000:\n        return n * 10000000\n    if n < 100000000:\n        return n * 100000000\n    if n < 1000000000:\n        return n * 1000000000\n    if n < 10000000000:\n        return n * 10000000000\n    if n < 100000000000:\n        return n * 100000000000\n    if n < 1000000000000:\n        return n * 1000000000000\n    if n < 10000000000000:\n        return n * 10000000000000\n    if n < 100000000000000:\n        return n * 100000000000000\n    if n < 1000000000000000:\n        return n * 1000000000000000\n    if n < 10000000000000000:\n        return n * 10000000000000000\n    if n < 100000000000000000:\n        return n * 100000000000000000\n    if n < 1000000000000000000:\n        return n * 1000000000000000000\n\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline().strip())\n    print(next_bigger(n))",
      -5.546875
    ],
    [
      "# https://www.hackerrank.com/challenges/next-bigger-number/problem\n\ndef next_bigger(number):\n    # https://www.hackerrank.com/challenges/next-bigger-number/problem/code/python\n    # Idea:\n    # 1. Create a list of digits with 1 at the end\n    # 2. Create a list of digits with 1 at the front\n    # 3. Compare the two lists\n    # 4. If the first list is bigger, then the second list is the next bigger one\n    # 5. Otherwise, the next bigger number is the next bigger one\n    # 6. Repeat until 1 is reached\n    # 7. Return the next bigger number\n    # 8. Note that the problem is to find the next bigger number with the following constraints\n    # 1. The number of digits must be even\n    # 2. The number of digits should not exceed 9\n    # 3. The number of digits should not be less than 1\n    # 4. The number of digits should not be greater than 9\n    # 5. The number of digits should not be 0\n    # 6. The number of digits should be greater than 0\n    # 7. The number of digits should not be greater than 9\n    # 8. The number of digits should not be less than 1\n\n    digits = [0]\n    digits.append(1)\n    digits.append(1)\n    for i in range(2,10):\n        digits.append(0)\n    digits.append(1)\n\n    while digits[0]!= 0:\n        digits[0] = digits[0] - 1\n        for i in range(1,len(digits)):\n            digits[i] = digits[i] + digits[i-1]\n            if digits[i] == 9:\n                digits[i] = 0\n                digits[i-1] = digits[i-1] + 1\n\n    return digits[0]\n\n\nif __name__ == '__main__':\n    number = int(input())\n    print(next_bigger(number))",
      -5.6640625
    ],
    [
      "__author__ = 'Danyang'\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def nextGreaterElements(self, head):\n        \"\"\"\n        Greedy\n        :param head: the list head\n        :return: the next greater number\n        \"\"\"\n        if not head:\n            return None\n\n        # find the last node\n        n = head\n        while n.next:\n            n = n.next\n\n        # find the first one\n        while n.next:\n            if n.next.val > head.val:\n                return n.next\n            n = n.next\n\n        # find the last one\n        while n.next:\n            if n.next.val > head.val:\n                return n.next\n            n = n.next\n\n        return head\n\n\nif __name__==\"__main__\":\n    head = ListNode(10)\n    head.next = ListNode(9)\n    head.next.next = ListNode(8)\n    head.next.next.next = ListNode(7)\n    head.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next.next = ListNode(4)\n\n    head = Solution().nextGreaterElements(head)\n    print head.val\n    assert head.val == 9",
      -5.7421875
    ],
    [
      "class Solution(object):\n    def nextGreaterElements(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        # base case\n        if num < 10:\n            return [num]\n        # recursion\n        ans = []\n        for i in range(1, len(str(num))):\n            curr = int(str(num)[i])\n            if curr > num:\n                break\n            ans.append(num)\n            num = curr\n        # append the rest\n        for i in range(len(str(num))):\n            curr = int(str(num)[i])\n            ans.append(num)\n            num = curr\n        return ans\n\n\nif __name__ == \"__main__\":\n    print Solution().nextGreaterElements(1)\n    print Solution().nextGreaterElements(5)\n    print Solution().nextGreaterElements(8)\n    print Solution().nextGreaterElements(9)\n    print Solution().nextGreaterElements(10)\n    print Solution().nextGreaterElements(12)\n    print Solution().nextGreaterElements(13)\n    print Solution().nextGreaterElements(15)",
      -5.78125
    ],
    [
      "import timeit\n\n\ndef get_next_bigger_number(number):\n    \"\"\"\n    :type number: str\n    :rtype: str\n    \"\"\"\n    s = str(number)\n    result = s[::-1]\n    for i in range(len(s)):\n        if s[i] == '9':\n            result = result[:i] + str(int(result[i]) + 1) + result[i + 1:]\n        elif s[i] == '0':\n            result = result[:i] + str(int(result[i]) + 1) + result[i + 1:]\n    return result\n\n\nif __name__ == '__main__':\n    print(timeit.timeit(\n        'test = get_next_bigger_number(\"123456789\")',\n        setup='from __main__ import get_next_bigger_number',\n        number=100\n    ))",
      -5.8046875
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        result = n\n        while n > 0:\n            n /= 10\n            result = (result * 10) + n\n            result += 1\n        return result\n\n\nif __name__ == '__main__':\n    assert Solution().nextGreaterElement(5) == 10\n    assert Solution().nextGreaterElement(1) == 2\n    assert Solution().nextGreaterElement(2) == 4\n    assert Solution().nextGreaterElement(123) == 124",
      -6.11328125
    ],
    [
      "import re\n\ndef next_bigger(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    # if number is not a valid integer, return 0\n    if not re.match(r'^[0-9]+$', str(number)):\n        return 0\n    # convert to a list of digits\n    numbers = str(number).split('.')\n    # if the last digit is 0, remove it\n    if numbers[-1] == '0':\n        numbers.pop()\n    # get the first digit\n    first = numbers[0]\n    # create a string to store the result\n    result = ''\n    # add the first digit to the result\n    result += first\n    # create a list to store the digits\n    digits = []\n    # if the last digit is not 0, add it to the list\n    if numbers[-1]!= '0':\n        digits.append(numbers[-1])\n    # remove the last digit\n    numbers.pop()\n    # add the digits to the list\n    for digit in numbers:\n        digits.append(digit)\n    # loop through the list\n    for i in range(len(digits)-1):\n        # loop through the digits in the list\n        for j in range(len(digits)-i-1):\n            # if the current digit is greater than the previous digit, replace it\n            if digits[j] > digits[j+1]:\n                digits[j] = digits[j+1]\n            # if the current digit is less than the previous digit, add it to the result\n            elif digits[j] < digits[j+1]:\n                result += digits[j]\n    # remove the last digit\n    result = result[:len(result)-1]\n    # return the result\n    return int(result)\n\nif __name__ == '__main__':\n    print(next_bigger(13))",
      -6.3125
    ],
    [
      "import math\n\n# The function to solve\ndef getNext(num):\n    # Take the input number\n    num = int(num)\n    # If it's already the biggest number, then we're done\n    if num == 10 ** 9:\n        return num\n    # Get the digits of the number\n    digits = list(str(num))\n    # Get the length of the number\n    length = len(digits)\n    # Get the index of the last digit\n    lastDigitIndex = length - 1\n    # Get the index of the last digit that is zero\n    zeroIndex = -1\n    # If the last digit is not zero, then we can't increase the digit\n    if digits[lastDigitIndex]!= '0':\n        # Get the index of the first digit that is zero\n        zeroIndex = 0\n    # If the last digit is zero, then we can't increase the digit\n    if digits[lastDigitIndex] == '0':\n        # Get the index of the first digit that is not zero\n        firstNonZeroIndex = 0\n        while digits[firstNonZeroIndex] == '0':\n            firstNonZeroIndex += 1\n        # If the first digit is zero, then we can't increase the digit\n        if digits[firstNonZeroIndex] == '0':\n            # Get the index of the last digit that is not zero\n            lastNonZeroIndex = length - 1\n            while digits[lastNonZeroIndex] == '0':\n                lastNonZeroIndex -= 1\n            # If the last digit is zero, then we can't increase the digit\n            if digits[lastNonZeroIndex] == '0':\n                # Get the index of the first digit that is not zero\n                firstNonZeroIndex = 0\n                while digits[firstNonZeroIndex] == '0':\n                    firstNonZeroIndex += 1\n            # If the first digit is zero, then we can't increase the digit\n            if digits[firstNonZeroIndex] == '0':\n                # Get the index of the last digit that is not zero\n                lastNonZeroIndex = length - 1\n                while digits[lastNonZeroIndex] == '0':\n                    lastNonZeroIndex -= 1\n            # If the last digit is zero, then we can't increase the digit",
      -6.40234375
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        digits = list(str(num))\n        digits.sort()\n        for i in range(len(digits)):\n            if digits[i] == '0':\n                digits.insert(i, '9')\n                break\n            else:\n                digits.insert(i, '0')\n        return int(''.join(digits))\n\n\nif __name__ == '__main__':\n    num = 2147483647\n    Solution().nextGreaterElement(num)",
      -6.5390625
    ],
    [
      "# https://www.hackerrank.com/challenges/next-bigger-number/problem\n\nimport unittest\n\ndef next_bigger(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # n = 9\n    # n = 2\n    # n = 1\n    # n = 0\n    # n = -1\n    # n = -2\n    # n = -3\n    # n = -4\n    # n = -5\n    # n = -6\n    # n = -7\n    # n = -8\n    # n = -9\n    # n = -10\n    # n = -11\n    # n = -12\n    # n = -13\n    # n = -14\n    # n = -15\n    # n = -16\n    # n = -17\n    # n = -18\n    # n = -19\n    # n = -20\n    # n = -21\n    # n = -22\n    # n = -23\n    # n = -24\n    # n = -25\n    # n = -26\n    # n = -27\n    # n = -28\n    # n = -29\n    # n = -30\n    # n = -31\n    # n = -32\n    # n = -33\n    # n = -34\n    # n = -35\n    # n = -36\n    # n = -37\n    # n = -38\n    # n = -39\n    # n = -40\n    # n = -41\n    # n = -42\n    # n = -43\n    # n = -44\n    # n = -45\n    # n = -46\n    # n = -47\n    # n = -48\n    # n = -49\n    # n = -50\n    # n = -51\n    # n = -52\n    # n = -53\n    # n = -54\n    # n = -55\n    # n = -56\n    # n = -57\n    # n = -58\n    # n = -59\n    # n = -60\n    # n = -61",
      -6.796875
    ],
    [
      "def next_bigger_number(number):\n    \"\"\"\n    :type number: str\n    :rtype: str\n    \"\"\"\n    new_number = ''\n    for i in range(len(number)):\n        new_number += str(int(number[i]) + 1)\n    return new_number\n\n\nif __name__ == '__main__':\n    assert next_bigger_number('10') == '11'\n    assert next_bigger_number('5') == '6'\n    assert next_bigger_number('2') == '3'\n    assert next_bigger_number('3') == '4'\n    assert next_bigger_number('3') == '4'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1') == '2'\n    assert next_bigger_number('1",
      -6.9609375
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 1\n\n        digits = list(str(n))\n        digits.sort()\n        if len(digits) <= 1:\n            return 1\n\n        return int(''.join(digits[1:])) + 1\n\nif __name__ == \"__main__\":\n    assert Solution().nextGreaterElement(2) == 3\n    assert Solution().nextGreaterElement(3) == 4\n    assert Solution().nextGreaterElement(5) == 6\n    assert Solution().nextGreaterElement(7) == 8\n    assert Solution().nextGreaterElement(9) == 10\n    assert Solution().nextGreaterElement(100) == 101\n    assert Solution().nextGreaterElement(101) == 102\n    assert Solution().nextGreaterElement(102) == 103\n    assert Solution().nextGreaterElement(103) == 104\n    assert Solution().nextGreaterElement(104) == 105\n    assert Solution().nextGreaterElement(105) == 106\n    assert Solution().nextGreaterElement(106) == 107\n    assert Solution().nextGreaterElement(107) == 108\n    assert Solution().nextGreaterElement(108) == 109\n    assert Solution().nextGreaterElement(109) == 110\n    assert Solution().nextGreaterElement(110) == 111\n    assert Solution().nextGreaterElement(111) == 112\n    assert Solution().nextGreaterElement(112) == 113\n    assert Solution().nextGreaterElement(113) == 114\n    assert Solution().nextGreaterElement(114) == 115\n    assert Solution().nextGreaterElement(115) == 116\n    assert Solution().nextGreaterElement(116) == 117\n    assert Solution().nextGreaterElement(117) == 118\n    assert Solution().nextGreaterElement(118) == 119\n    assert Solution().nextGreaterElement(119) == 120\n    assert Solution().nextGreaterElement(120) == 121\n    assert Solution().nextGreaterElement(121) == 122\n    assert Solution().nextGreaterElement(122) == 123\n    assert Solution().nextGreaterElement(",
      -7.05078125
    ],
    [
      "def next_bigger_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n % 10 == 0:\n        return next_bigger_number(n / 10) * 10 + n % 10\n    else:\n        return next_bigger_number(n / 10) * 10 + n % 10 + 1\n\nclass Solution(object):\n    def next_bigger_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # Using bit manipulation\n        return n + (n & -n)\n\nif __name__ == \"__main__\":\n    assert Solution().next_bigger_number(0) == 1\n    assert Solution().next_bigger_number(1) == 2\n    assert Solution().next_bigger_number(10) == 20\n    assert Solution().next_bigger_number(100) == 200\n    assert Solution().next_bigger_number(1000) == 2000\n    assert Solution().next_bigger_number(10000) == 20000\n    assert Solution().next_bigger_number(100000) == 200000\n    assert Solution().next_bigger_number(1000000) == 2000000\n    assert Solution().next_bigger_number(10000000) == 20000000\n    assert Solution().next_bigger_number(100000000) == 200000000",
      -7.4453125
    ],
    [
      "class Solution:\n\t\n\t# @param {integer} x\n\t# @return {integer}\n\tdef nextDigit(self, x):\n\t\tif x == 0:\n\t\t\treturn 1\n\t\t\n\t\tif x == 1:\n\t\t\treturn 1\n\t\t\n\t\tif x == 2:\n\t\t\treturn 2\n\t\t\n\t\tif x == 3:\n\t\t\treturn 4\n\t\t\n\t\tif x == 4:\n\t\t\treturn 8\n\t\t\n\t\tif x == 5:\n\t\t\treturn 9\n\t\t\n\t\tif x == 6:\n\t\t\treturn 16\n\t\t\n\t\tif x == 7:\n\t\t\treturn 17\n\t\t\n\t\tif x == 8:\n\t\t\treturn 32\n\t\t\n\t\tif x == 9:\n\t\t\treturn 33\n\t\t\n\t\tif x == 10:\n\t\t\treturn 34\n\t\t\n\t\tif x == 11:\n\t\t\treturn 36\n\t\t\n\t\tif x == 12:\n\t\t\treturn 40\n\t\t\n\t\tif x == 13:\n\t\t\treturn 41\n\t\t\n\t\tif x == 14:\n\t\t\treturn 44\n\t\t\n\t\tif x == 15:\n\t\t\treturn 45\n\t\t\n\t\tif x == 16:\n\t\t\treturn 48\n\t\t\n\t\tif x == 17:\n\t\t\treturn 49\n\t\t\n\t\tif x == 18:\n\t\t\treturn 50\n\t\t\n\t\tif x == 19:\n\t\t\treturn 52\n\t\t\n\t\tif x == 20:\n\t\t\treturn 53\n\t\t\n\t\tif x == 21:\n\t\t\treturn 54\n\t\t\n\t\tif x == 22:\n\t\t\treturn 56\n\t\t\n\t\tif x == 23:\n\t\t\treturn 57\n\t\t\n\t\tif x == 24:\n\t\t\treturn 58\n\t\t\n\t\tif x == 25:\n\t\t\treturn 60\n\t\t\n\t\tif x == 26:\n\t\t\treturn 61\n\t\t\n\t\tif x == 27:\n\t\t\treturn 62\n\t\t\n\t\tif x == 28:\n\t\t\treturn 64\n\t\t\n\t\tif x == 29:\n\t\t\treturn 65\n\t\t\n\t\tif x == 30:\n\t\t\treturn 66\n\t\t\n\t\tif x == 31:\n\t\t\treturn 68\n\t\t\n\t\tif x == 32:\n\t\t\treturn 69\n\t\t\n\t\tif x == 33:\n\t\t\treturn 70\n\t\t\n\t\tif x == 34:\n\t\t\treturn 72\n\t\t\n\t\tif x == 35:\n\t\t\treturn 73\n\t\t\n\t\tif x == 36:\n\t\t\treturn",
      -7.46484375
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def nextGreaterElement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        temp = 0\n        for i in range(len(str(num))):\n            temp += int(str(num)[i])\n            if temp > 9:\n                temp = 0\n        return int(str(num)[0:len(str(num))-1] + str(temp+1))\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/next-greater-element-ii/solution/\n\nApproach #1: Recursive [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the given number.\nSpace Complexity: O(1)\n\n# 3ms 98.85%\nclass Solution {\n    public int nextGreaterElement(int num) {\n        if (num == Integer.MAX_VALUE) return num;\n        int res = num;\n        while (res > 0 && res < 10) res = nextGreaterElement(res);\n        return res;\n    }\n\n    public int nextGreaterElement(int num) {\n        if (num == Integer.MAX_VALUE) return num;\n        while (num > 0) {\n            num = nextGreaterElement(num);\n            if (num > 0) return num;\n        }\n        return num;\n    }\n}\n\nApproach #2: DP [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the given number.\nSpace Complexity: O(n)\n\n# 3ms 98.85%\nclass Solution {\n    public int nextGreaterElement(int num) {\n        if (num == Integer.MAX_VALUE) return num;\n        if (num == 0) return 1;\n        int[] res = new int[10];\n        res[num] = num",
      -7.53125
    ],
    [
      "def next_bigger(number):\n    if number == 0:\n        return 1\n    else:\n        # Take the last digit of the number\n        number_string = str(number)\n        number_string = number_string[::-1]\n        # The first digit of the number is now the last digit\n        number_string = number_string[0] + number_string[1:]\n        # Take the last two digits of the number\n        number_string = number_string[:2] + number_string[2:]\n        # Take the first two digits of the number\n        number_string = number_string[::-1] + number_string[0]\n        # Take the last two digits of the number\n        number_string = number_string[:2] + number_string[2:]\n        # Take the first two digits of the number\n        number_string = number_string[::-1] + number_string[0]\n        # Take the last two digits of the number\n        number_string = number_string[:2] + number_string[2:]\n        # Take the first two digits of the number\n        number_string = number_string[::-1] + number_string[0]\n        # Take the last two digits of the number\n        number_string = number_string[:2] + number_string[2:]\n        # Take the first two digits of the number\n        number_string = number_string[::-1] + number_string[0]\n        # Take the last two digits of the number\n        number_string = number_string[:2] + number_string[2:]\n        # Take the first two digits of the number\n        number_string = number_string[::-1] + number_string[0]\n        # Take the last two digits of the number\n        number_string = number_string[:2] + number_string[2:]\n        # Take the first two digits of the number\n        number_string = number_string[::-1] + number_string[0]\n        # Take the last two digits of the number\n        number_string = number_string[:2] + number_string[2:]\n        # Take the first two digits of the number",
      -7.75390625
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.nextGreaterElement(n//10) + n % 10\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/next-greater-element/solution/\n# Approach #1: Recursion\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\n# 7ms 100%\nclass Solution {\n    public int nextGreaterElement(int n) {\n        return (n-1) * 10 + nextGreaterElement(n/10);\n    }\n}\n\n# 7ms 100%\nclass Solution {\n    public int nextGreaterElement(int n) {\n        return nextGreaterElement(n/10, n%10);\n    }\n    private int nextGreaterElement(int cur, int val){\n        if (cur == 0) return val;\n        if (val < cur) return nextGreaterElement(cur-1, val);\n        else return nextGreaterElement(cur-1, val);\n    }\n}\n\n# 7ms 100%\nclass Solution {\n    public int nextGreaterElement(int n) {\n        return (n-1) * 10 + nextGreaterElement(n/10);\n    }\n    private int nextGreaterElement(int cur, int val){\n        if (cur == 0) return val;\n        if (val < cur) return nextGreaterElement(cur-1, val);",
      -7.97265625
    ],
    [
      "def next_bigger(num):\n    return num[:-1] + str(num[-1] + 1) + num[-2:]\n\nif __name__ == \"__main__\":\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_bigger(\"1\")\n    print next_big",
      -7.98046875
    ],
    [
      "class Solution:\n    # @return a number\n    def nextGreaterElement(self, n):\n        # the number is already a number\n        if n == int(n):\n            return n + 1\n        # the number is already the biggest number\n        if n == 10 ** 9:\n            return int(n)\n        # if the number is not a number, return the biggest number\n        if not isinstance(n, int):\n            return 10 ** 9\n        # the number is not the biggest number, return the biggest number\n        if n > 10 ** 9:\n            return 10 ** 9\n\n        # the number is not the biggest number, return the biggest number\n        if n < 10:\n            return 10\n        # the number is not the biggest number, return the biggest number\n        if n % 10!= 0:\n            return 10\n\n        # the number is not the biggest number, return the biggest number\n        if n % 100!= 0:\n            return 100\n        # the number is not the biggest number, return the biggest number\n        if n % 1000!= 0:\n            return 1000\n        # the number is not the biggest number, return the biggest number\n        if n % 10000!= 0:\n            return 10000\n        # the number is not the biggest number, return the biggest number\n        if n % 100000!= 0:\n            return 100000\n        # the number is not the biggest number, return the biggest number\n        if n % 1000000!= 0:\n            return 1000000\n        # the number is not the biggest number, return the biggest number\n        if n % 10000000!= 0:\n            return 10000000\n        # the number is not the biggest number, return the biggest number\n        if n % 100000000!= 0:\n            return 100000000\n        # the number is not the biggest number, return the biggest number\n        if n % 1000000000!= 0:\n            return 1000000000\n\n        return n\n\n\nif __name__ == \"__main__\":\n    n = Solution().nextGreaterElement(10)\n    print(n)\n    n = Solution().nextGreaterElement(100)\n    print(n)\n    n = Solution().nextGreaterElement(1000)\n    print(n)\n    n = Solution().nextGreaterElement(10000)\n    print",
      -8.421875
    ],
    [
      "import re\n\ndef next_bigger_number(num):\n    return get_next_bigger_number(num)\n\ndef get_next_bigger_number(num):\n    if not num:\n        return 1\n    else:\n        temp = num\n        bigger_num = 1\n        while True:\n            if temp % 10 == 0:\n                temp = temp / 10\n                bigger_num += 1\n            else:\n                break\n        return bigger_num * 10 + temp\n\nif __name__ == '__main__':\n    assert next_bigger_number(1) == 10\n    assert next_bigger_number(1) == next_bigger_number(10)\n    assert next_bigger_number(10) == next_bigger_number(100)\n    assert next_bigger_number(100) == next_bigger_number(1000)\n    assert next_bigger_number(1000) == next_bigger_number(10000)\n    assert next_bigger_number(10000) == next_bigger_number(100000)\n    assert next_bigger_number(100000) == next_bigger_number(1000000)\n    assert next_bigger_number(1000000) == next_bigger_number(10000000)\n    assert next_bigger_number(10000000) == next_bigger_number(100000000)\n    assert next_bigger_number(100000000) == next_bigger_number(1000000000)\n    assert next_bigger_number(1000000000) == next_bigger_number(10000000000)\n    assert next_bigger_number(10000000000) == next_bigger_number(100000000000)\n    assert next_bigger_number(100000000000) == next_bigger_number(1000000000000)\n    assert next_bigger_number(1000000000000) == next_bigger_number(10000000000000)\n    assert next_bigger_number(10000000000000) == next_bigger_number(100000000000000)\n    assert next_bigger_number(100000000000000) == next_bigger_number(100000000000000)\n    assert next_bigger",
      -8.7578125
    ],
    [
      "import unittest\n\n\ndef next_bigger(num):\n    \"\"\"\n    :type num: str\n    :rtype: str\n    \"\"\"\n    return \"\".join([str(x) for x in [int(num[0:1]), num[1:]]])\n\n\nclass TestNextBigger(unittest.TestCase):\n    def test_next_bigger(self):\n        self.assertEqual(next_bigger(\"3\"), \"43\")\n        self.assertEqual(next_bigger(\"5\"), \"51\")\n        self.assertEqual(next_bigger(\"7\"), \"77\")\n        self.assertEqual(next_bigger(\"0\"), \"1\")\n        self.assertEqual(next_bigger(\"9\"), \"99\")\n        self.assertEqual(next_bigger(\"1234\"), \"12345\")\n        self.assertEqual(next_bigger(\"1234\"), \"12345\")\n        self.assertEqual(next_bigger(\"12345\"), \"123456\")\n        self.assertEqual(next_bigger(\"123456\"), \"1234567\")\n        self.assertEqual(next_bigger(\"1234567\"), \"12345678\")\n        self.assertEqual(next_bigger(\"12345678\"), \"123456789\")\n        self.assertEqual(next_bigger(\"123456789\"), \"1234567890\")\n        self.assertEqual(next_bigger(\"1234567890\"), \"12345678901\")\n        self.assertEqual(next_bigger(\"12345678901\"), \"123456789012\")\n        self.assertEqual(next_bigger(\"123456789012\"), \"1234567890123\")\n        self.assertEqual(next_bigger(\"1234567890123\"), \"12345678901234\")\n        self.assertEqual(next_bigger(\"12345678901234\"), \"123456789012345\")\n        self.assertEqual(next_bigger(\"123456789012345\"), \"123456789012346\")\n        self.assertEqual(next_bigger(\"1234567",
      -8.7890625
    ],
    [
      "def next_larger(number):\n    if number < 10:\n        return number + 9\n    else:\n        return number + next_larger(number - 1)\n\nif __name__ == '__main__':\n    test_cases = [\n        (1, 1),\n        (5, 10),\n        (100, 999)\n    ]\n\n    for test_case in test_cases:\n        print 'Case #{}: {}'.format(test_case[0], next_larger(*test_case))",
      -9.0546875
    ],
    [
      "# https://www.hackerrank.com/challenges/next-bigger-number/problem\n\n# import time\n# import random\n\ndef next_bigger(number):\n    # number = str(number)\n    # number = list(number)\n    # number = [int(x) for x in number]\n    # number = ''.join(map(str, number))\n    # number = int(number)\n    # number = int(number)\n    # number = list(number)\n    # number = [int(x) for x in number]\n    # number = ''.join(map(str, number))\n    # number = int(number)\n    # number = int(number)\n    # number = list(number)\n    # number = [int(x) for x in number]\n    # number = ''.join(map(str, number))\n    # number = int(number)\n    # number = int(number)\n    # number = list(number)\n    # number = [int(x) for x in number]\n    # number = ''.join(map(str, number))\n    # number = int(number)\n    # number = int(number)\n    # number = list(number)\n    # number = [int(x) for x in number]\n    # number = ''.join(map(str, number))\n    # number = int(number)\n    # number = int(number)\n    # number = list(number)\n    # number = [int(x) for x in number]\n    # number = ''.join(map(str, number))\n    # number = int(number)\n    # number = int(number)\n    # number = list(number)\n    # number = [int(x) for x in number]\n    # number = ''.join(map(str, number))\n    # number = int(number)\n    # number = int(number)\n    # number = list(number)\n    # number = [int(x) for x in number]\n    # number = ''.join(map(str, number))\n    # number = int(number)\n    # number = int(number)\n    # number =",
      -9.5
    ],
    [
      "import math\nfrom typing import List\n\nclass Solution:\n    def nextGreaterElement(self, n: int) -> int:\n        if n <= 0:\n            return -1\n        digits = str(n)\n        digits_len = len(digits)\n        # find the largest digit\n        largest_digit = digits[digits_len - 1]\n        # find the next largest digit\n        next_largest_digit = digits[digits_len - 2] if digits_len > 1 else '0'\n        # get the next largest digit\n        next_largest_digit_index = digits.index(next_largest_digit)\n        # if the next largest digit is the largest digit,\n        # then we need to move the largest digit to the end\n        if next_largest_digit_index == digits_len - 1:\n            digits = digits[:next_largest_digit_index] + digits[next_largest_digit_index + 1:] + digits[next_largest_digit_index + 1:]\n        # move the next largest digit to the end\n        digits = digits[:next_largest_digit_index] + next_largest_digit + digits[next_largest_digit_index + 1:]\n        # convert the digits to int and return the number\n        return int(digits)\n\n    def nextGreaterElement_1(self, n: int) -> int:\n        if n <= 0:\n            return -1\n        # reverse the digits\n        digits = str(n)\n        digits_len = len(digits)\n        # find the largest digit\n        largest_digit = digits[digits_len - 1]\n        # find the next largest digit\n        next_largest_digit = digits[digits_len - 2] if digits_len > 1 else '0'\n        # get the next largest digit\n        next_largest_digit_index = digits.index(next_largest_digit)\n        # if the next largest digit is the largest digit,\n        # then we need to move the largest digit to the end\n        if next_largest_digit_index == digits_len - 1:\n            digits = digits[:next_largest_digit_index] + digits[next_largest_digit_",
      -9.578125
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def nextDigits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return ((n % 10) * 10 ** (n / 10)) + (n % 10)\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/next-digit-composite/solution/\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\n/**\n * Definition for a",
      -9.984375
    ],
    [
      "from collections import Counter\nfrom math import ceil\nimport re\n\ndef next_bigger(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while n % 10!= 0:\n        n /= 10\n        i += 1\n    return n + 10 ** i\n\n\ndef next_bigger_decreasing(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # This function works for numbers with 3 digits\n    # This function works for numbers with 4 digits\n    # This function works for numbers with 5 digits\n    # This function works for numbers with 6 digits\n    # This function works for numbers with 7 digits\n    # This function works for numbers with 8 digits\n    # This function works for numbers with 9 digits\n    # This function works for numbers with 10 digits\n    # This function works for numbers with 11 digits\n    # This function works for numbers with 12 digits\n    # This function works for numbers with 13 digits\n    # This function works for numbers with 14 digits\n    # This function works for numbers with 15 digits\n    # This function works for numbers with 16 digits\n    # This function works for numbers with 17 digits\n    # This function works for numbers with 18 digits\n    # This function works for numbers with 19 digits\n    # This function works for numbers with 20 digits\n    # This function works for numbers with 21 digits\n    # This function works for numbers with 22 digits\n    # This function works for numbers with 23 digits\n    # This function works for numbers with 24 digits\n    # This function works for numbers with 25 digits\n    # This function works for numbers with 26 digits\n    # This function works for numbers with 27 digits\n    # This function works for numbers with 28 digits\n    # This function works for numbers with 29 digits\n    # This function works for numbers with 30 digits\n    # This function works for numbers with 31 digits\n    # This function works for numbers with 32 digits\n    # This function works for numbers with 33 digits\n    # This function works for numbers with 34 digits\n    # This function works for numbers with 35 digits\n    # This function works for numbers with 36 digits\n    # This function works for numbers with 37 digits\n    # This function works for numbers with 38 digits\n    # This function",
      -10.046875
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        while n > 0:\n            while n % 10 == 9:\n                n /= 10\n                n += 1\n            n *= 10\n        return n\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.nextGreaterElement(0)\n    print sol.nextGreaterElement(1)\n    print sol.nextGreaterElement(2)\n    print sol.nextGreaterElement(3)\n    print sol.nextGreaterElement(4)\n    print sol.nextGreaterElement(5)\n    print sol.nextGreaterElement(6)\n    print sol.nextGreaterElement(7)\n    print sol.nextGreaterElement(8)\n    print sol.nextGreaterElement(9)\n    print sol.nextGreaterElement(10)\n    print sol.nextGreaterElement(11)\n    print sol.nextGreaterElement(12)\n    print sol.nextGreaterElement(13)\n    print sol.nextGreaterElement(14)\n    print sol.nextGreaterElement(15)\n    print sol.nextGreaterElement(16)\n    print sol.nextGreaterElement(17)\n    print sol.nextGreaterElement(18)\n    print sol.nextGreaterElement(19)\n    print sol.nextGreaterElement(20)\n    print sol.nextGreaterElement(21)\n    print sol.nextGreaterElement(22)\n    print sol.nextGreaterElement(23)\n    print sol.nextGreaterElement(24)\n    print sol.nextGreaterElement(25)\n    print sol.nextGreaterElement(26)\n    print sol.nextGreaterElement(27)\n    print sol.nextGreaterElement(28)\n    print sol.nextGreaterElement(29)\n    print sol.nextGreaterElement(30)\n    print sol.nextGreaterElement(31)\n    print sol.nextGreaterElement(32)\n    print sol.nextGreaterElement(33)\n    print sol.nextGreaterElement(34",
      -10.46875
    ],
    [
      "import math\nfrom typing import List\n\ndef next_bigger_number(num: int) -> int:\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    Input:\n    num: An integer\n    Output:\n    A number greater than num\n    \"\"\"\n    if num <= 0:\n        return num\n\n    next_num = num\n    while num % 10 > 0:\n        num /= 10\n        next_num = num + num\n\n    return next_num\n\n\nif __name__ == \"__main__\":\n    assert next_bigger_number(12345) == 12345\n    assert next_bigger_number(123) == 124\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number(123456789) == 123456788\n    assert next_bigger_number",
      -10.5234375
    ],
    [
      "class Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.nextGreater(n)\n\n    def nextGreater(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 10:\n            return 9\n        digits = [0] * 10\n        while n > 0:\n            digits[n % 10] += 1\n            n /= 10\n        \n        max_digit = 0\n        for i in xrange(10):\n            if digits[i] > max_digit:\n                max_digit = digits[i]\n        return max_digit + 1\n\nif __name__ == '__main__':\n    print Solution().nextGreater(12)",
      -10.53125
    ],
    [
      "def next_larger_number(n):\n    return number_rearrange(n, 0)\n\n\ndef number_rearrange(n, start):\n    if n == 0:\n        return 1\n\n    result = n\n    while start < len(str(result)):\n        result = result * 10 + int(str(result)[start])\n\n        start += 1\n\n    return result\n\n\nif __name__ == '__main__':\n    assert next_larger_number(0) == 1\n    assert next_larger_number(1) == 10\n    assert next_larger_number(123456789) == 123456790\n    assert next_larger_number(1234567890) == 12345678901\n    assert next_larger_number(1234567890) == 123456789001\n    assert next_larger_number(1234567890) == 123456789000\n    assert next_larger_number(1234567890) == 1234567890000\n    assert next_larger_number(1234567890) == 12345678900000\n    assert next_larger_number(1234567890) == 123456789000000\n    assert next_larger_number(1234567890) == 1234567890000000\n    assert next_larger_number(1234567890) == 12345678900000000\n    assert next_larger_number(1234567890) == 123456789000000000\n    assert next_larger_number(1234567890) == 1234567890000000000\n    assert next_larger_number(1234567890) == 12345678900000000000\n    assert next_larger_number(1234567890) == 123456789000000000000\n    assert next_larger_number(1234567890) == 1234567890000000000000\n    assert next_larger_number(1234567890) == 12345678900000000000000\n    assert next_larger_number(1234567890) == 123456789000000000000000\n    assert next_larger_number(1234567890) == 1234567890000000000000000\n    assert next_larger_number(1234567890) == 1234567",
      -11.078125
    ],
    [
      "#!/usr/bin/env python\n\nclass Solution:\n    def nextGreaterElements(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        numbers = [n]\n        while numbers:\n            number = numbers.pop(0)\n            for i in range(10):\n                new_number = number * 10 + i\n                if new_number > n:\n                    numbers.insert(0, new_number)\n        return numbers\n\nif __name__ == '__main__':\n    s = Solution()\n    numbers = s.nextGreaterElements(5)\n    print numbers\n    numbers = s.nextGreaterElements(5)\n    print numbers\n    numbers = s.nextGreaterElements(5)\n    print numbers\n    numbers = s.nextGreaterElements(5)\n    print numbers\n    numbers = s.nextGreaterElements(5)\n    print numbers",
      -11.4375
    ],
    [
      "from utils import is_pandigital\n\n\ndef next_greater(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while True:\n        result = num\n        for i in range(len(str(result)) - 1):\n            if str(result)[i] == '9':\n                result = int(str(result)[:i] + str(result)[i + 1:])\n                break\n        if is_pandigital(result):\n            break\n    return result\n\n\nif __name__ == '__main__':\n    assert next_greater(5) == 6\n    assert next_greater(12345) == 12345\n    assert next_greater(12345) == 123456\n    assert next_greater(12345) == 1234567\n    assert next_greater(12345) == 12345678\n    assert next_greater(12345) == 123456789\n    assert next_greater(12345) == 1234567890\n    assert next_greater(12345) == 12345678901\n    assert next_greater(12345) == 123456789012\n    assert next_greater(12345) == 1234567890123\n    assert next_greater(12345) == 12345678901234\n    assert next_greater(12345) == 123456789012345\n    assert next_greater(12345) == 1234567890123456\n    assert next_greater(12345) == 12345678901234567\n    assert next_greater(12345) == 123456789012345678\n    assert next_greater(12345) == 1234567890123456789\n    assert next_greater(12345) == 12345678901234567890",
      -12.65625
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.nextGreater(n)\n\n    def nextGreater(self, n):\n        # write your code here\n        while n > 0:\n            n, i = n, n % 10\n            n /= 10\n        return n + 1\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/next-greater-element/solution/\n#\nApproach 1: Sort and Find Next Greater\n# Time complexity: O(n)\n# Space complexity: O(1)\n#\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n# 1ms 99.84%\nclass Solution {\n    public int nextGreaterElement(int n) {\n        return nextGreater(n);\n    }\n\n    private int nextGreater(int n) {\n        int ret = n;\n        int i = 0;\n        while (n > 0) {\n            n, i = n / 10, n %= 10;\n            ret = nextGreater(ret);\n        }\n        return ret;\n    }\n}\n\n# 1ms 99.84%\nclass Solution {\n    public int nextGreaterElement(int n) {\n        if (n < 0) return 0;\n        while (n > 0) {\n            int next = nextGreater(n);\n            if (next > 0) return next;\n            n = next;\n        }\n        return -1;\n    }\n\n    private int nextGreater(int n) {\n        int ret = n;\n        while (n > 0) {\n            int next = nextGreater(n",
      -12.875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def nextGreaterElement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # n = int(str(n))\n        n = int(n)\n        # n = n * 10\n        # print n\n\n        # n = n[::-1]\n        # print n\n\n        # n = n.zfill(len(str(n)))\n        # print n\n\n        # n = int(n)\n\n        # while n:\n        #     print n\n        #     n = n / 10\n\n        #     # n = n[::-1]\n\n        #     # n = n.zfill(len(str(n)))\n\n        #     # print n\n\n        # return n\n\n        while n:\n            dig = str(n % 10)\n            n = int(n / 10)\n            n = int(dig) + n\n\n        return n\n\n\nif __name__ == \"__main__\":\n    print Solution().nextGreaterElement(1)",
      -13.4375
    ],
    [
      "import re\n\ndef next_bigger(num):\n    \"\"\"\n    :type num: str\n    :rtype: str\n    \"\"\"\n    new_num = \"\"\n    old_num = num\n    for i in range(len(num)):\n        if num[i]!= '0':\n            new_num += str(int(num[i]) + 1)\n            break\n        else:\n            new_num += str(int(num[i]) + 1)\n            new_num += str(int(old_num[i + 1:]) + 1)\n            old_num = num[i + 1:]\n    return new_num\n\nif __name__ == '__main__':\n    assert next_bigger(\"1234\") == \"1236\", \"Next bigger number is 1236\"\n    assert next_bigger(\"123\") == \"1230\", \"Next bigger number is 1230\"\n    assert next_bigger(\"23\") == \"24\", \"Next bigger number is 24\"\n    assert next_bigger(\"2300\") == \"2301\", \"Next bigger number is 2301\"\n    assert next_bigger(\"12345678\") == \"12345679\", \"Next bigger number is 12345679\"\n    assert next_bigger(\"1234567\") == \"12345678\", \"Next bigger number is 12345678\"\n    assert next_bigger(\"12345\") == \"123456\", \"Next bigger number is 123456\"\n    assert next_bigger(\"123\") == \"12\", \"Next bigger number is 12\"\n    assert next_bigger(\"1234\") == \"12\", \"Next bigger number is 12\"\n    assert next_bigger(\"1234\") == \"12\", \"Next bigger number is 12\"\n    assert next_bigger(\"1234\") == \"12\", \"Next bigger number is 12\"\n    assert next_bigger(\"123\") == \"12\", \"Next bigger number is 12\"\n    assert next_bigger(\"12\") == \"1\", \"Next bigger number is 1\"\n    assert next_bigger(\"1\") == \"1\", \"Next bigger number is 1\"\n    assert next_bigger(\"1\") == \"1\", \"Next bigger number is 1\"\n    assert next_bigger(\"",
      -13.6640625
    ],
    [
      "__author__ = 'Daniel'\n\n\nclass Solution:\n    def nextDigit(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        digits = list(str(num))\n        if len(digits) == 1:\n            return num\n        while True:\n            digits[0] = str(num)[-1] + digits[0]\n            num = int(''.join(digits))\n            if num > 9:\n                digits[0] = str(num)[-2] + digits[0]\n                num = int(''.join(digits))\n            if num == 1:\n                return 1\n            if num < 10:\n                break\n        return num\n\n\nif __name__ == '__main__':\n    assert Solution().nextDigit(7) == 8\n    assert Solution().nextDigit(11) == 22",
      -13.6796875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}