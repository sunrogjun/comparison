{
  "problem": {
    "task_id": "MBPP/279",
    "prompt": "Write a function to find the nth decagonal number.",
    "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
    "test_list": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ],
    "challenge_test_list": [],
    "problem_id": 268
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def decagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # This is the decagonal number\n    return n * (3*n - 1) / 2\n\n\nif __name__ == '__main__':\n    assert decagonal(1) == 1\n    assert decagonal(2) == 2\n    assert decagonal(3) == 3\n    assert decagonal(4) == 4\n    assert decagonal(5) == 5\n    assert decagonal(6) == 6\n    assert decagonal(7) == 7\n    assert decagonal(8) == 8\n    assert decagonal(9) == 9\n    assert decagonal(10) == 10\n    assert decagonal(11) == 11\n    assert decagonal(12) == 12\n    assert decagonal(13) == 13\n    assert decagonal(14) == 14\n    assert decagonal(15) == 15\n    assert decagonal(16) == 16\n    assert decagonal(17) == 17\n    assert decagonal(18) == 18\n    assert decagonal(19) == 19\n    assert decagonal(20) == 20\n    assert decagonal(21) == 21\n    assert decagonal(22) == 22\n    assert decagonal(23) == 23\n    assert decagonal(24) == 24\n    assert decagonal(25) == 25\n    assert decagonal(26) == 26\n    assert decagonal(27) == 27\n    assert decagonal(28) == 28\n    assert decagonal(29) == 29\n    assert decagonal(30) == 30\n    assert decagonal(31) == 31\n    assert decagonal(32) == 32\n    assert decagonal(33) == 33\n    assert decagonal(34) == 34\n    assert decagonal(35) == 35\n    assert decagonal(36) == 36\n    assert decagonal(37) == 37\n    assert decagonal(38) == 38\n    assert decagonal(39) == 39\n    assert decagonal(40) == 40\n    assert decagonal(41) == 41\n    assert decagonal(42) == 42\n    assert decagonal(43) == 43\n    assert decagonal(44) == 44\n    assert decagonal(45) == 45",
      7.1015625
    ],
    [
      "class Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return -1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n        if n % 2 == 0:\n            return n/2\n        if n % 3 == 0:\n            return (n/3)*3 + (n/6)\n        if n % 5 == 0:\n            return (n/5)*5 + (n/10)\n        if n % 7 == 0:\n            return (n/7)*7 + (n/14)\n        return (n/10)*10 + (n/20)",
      2.970703125
    ],
    [
      "import math\n\n\ndef decagonal(n):\n    return math.sqrt(n) + (n - 1) / 2\n\n\nif __name__ == \"__main__\":\n    assert decagonal(0) == 0\n    assert decagonal(1) == 1\n    assert decagonal(2) == 2\n    assert decagonal(3) == 3\n    assert decagonal(4) == 4\n    assert decagonal(5) == 5\n    assert decagonal(6) == 6\n    assert decagonal(7) == 7\n    assert decagonal(8) == 8\n    assert decagonal(9) == 9\n    assert decagonal(10) == 10\n    assert decagonal(20) == 20\n    assert decagonal(100) == 100",
      2.357421875
    ],
    [
      "# https://leetcode.com/problems/nth-decagonal-number/\n\nclass Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        i = 0\n        while i < n:\n            n = n * 10 + 1\n            i += 1\n        return n\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decagonalNumber(4))",
      1.4423828125
    ],
    [
      "def decagonal_n(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n\n    Example\n    >>> decagonal_n(2)\n    3\n    >>> decagonal_n(5)\n    15\n    >>> decagonal_n(10)\n    151\n    >>> decagonal_n(100)\n    1501\n    >>> decagonal_n(1000)\n    15001\n    >>> decagonal_n(10000)\n    150000\n    >>> decagonal_n(100000)\n    1500000\n    >>> decagonal_n(1000000)\n    15000000\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 3 * (n / 2) + 1\n    return 3 * (n / 2) + 2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.57763671875
    ],
    [
      "import math\n\ndef decagonal_number(n):\n    return math.floor(math.sqrt(n)) * 10 ** (n - 1)\n\nprint(decagonal_number(3))\nprint(decagonal_number(4))\nprint(decagonal_number(5))",
      -0.61865234375
    ],
    [
      "from math import sqrt\ndef dec(n):\n    return int(sqrt(n)) + 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(dec(n))",
      -0.85595703125
    ],
    [
      "# Definition for decagonal number.\nclass DecagonalNumber:\n    def __init__(self, num):\n        self.num = num\n\n    def decagonal(self):\n        return self.num\n\n\n# Your DecagonalNumber object will be instantiated and called as such:\n# obj = DecagonalNumber(num)\n# param_1 = obj.decagonal()\n\ndef decagonal_number(n):\n    return (n-1) * (10 ** (n/2))\n\nclass Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return decagonal_number(n)",
      -0.85595703125
    ],
    [
      "def decagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return decagonal(n/2)\n    return decagonal(n/2) + n\n\n\nif __name__ == '__main__':\n    print(decagonal(1))\n    print(decagonal(2))\n    print(decagonal(3))\n    print(decagonal(4))\n    print(decagonal(5))\n    print(decagonal(6))\n    print(decagonal(7))",
      -0.85595703125
    ],
    [
      "class Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 1:\n            return n\n        return self.decagonalNumber(n-1) + (n-1)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decagonalNumber(2))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        num = 1\n        for i in range(n):\n            num = (num * 10) + 9\n        return num\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.decagonalNumber(2))\n    print(sol.decagonalNumber(3))",
      -0.85693359375
    ],
    [
      "def decagonal_n(n):\n    \"\"\"\n    n is the index, and the output is the decagonal number.\n    \"\"\"\n    return sum(int(i) for i in str(n))\n\nif __name__ == \"__main__\":\n    for i in range(1, 101):\n        print(decagonal_n(i))",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/decagonal-nth/problem\n# https://www.youtube.com/watch?v=l5LxjKfvwcY\n\ndef decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    decagonal_number = 0\n    for i in range(1, n):\n        decagonal_number += (n - i) * (n + i + 1)\n    return decagonal_number\n\nif __name__ == '__main__':\n    print(decagonal_number(int(input())))",
      -0.85693359375
    ],
    [
      "def decagonal_number(n):\n  # Base case\n  if n < 1:\n    return 0\n\n  # Recursion case\n  return (n * (10 ** (n - 1) + 1)) / 10\n\nif __name__ == \"__main__\":\n  for i in range(1, 10):\n    print(decagonal_number(i))",
      -0.85693359375
    ],
    [
      "def decagonal_number(n):\n  \"\"\"\n  :type n: int\n  :rtype: int\n  \"\"\"\n  return n * (10 ** (n - 1) - 1) / 10\n\nif __name__ == '__main__':\n  print(decagonal_number(5))",
      -0.85693359375
    ],
    [
      "def decagonal_n(n):\n    return n * (10 ** n) - 1\n\nif __name__ == '__main__':\n    for n in range(1, 11):\n        print(decagonal_n(n))",
      -0.85693359375
    ],
    [
      "from math import floor\n\n\ndef decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    nth = 0\n    while n > 0:\n        nth += 1\n        n = n - 1\n    return nth\n\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(decagonal_number(i))",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/decagonal-nth/problem\ndef decagonal_nth(n):\n    return (n+1) * (10 ** n)\n\nif __name__ == '__main__':\n    print decagonal_nth(3)",
      -0.85693359375
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while i < n:\n        i += 2\n    return i",
      -0.85693359375
    ],
    [
      "import math\n\ndef decagonal_number(n):\n    return n*(3*n-1)/2\n\nif __name__ == '__main__':\n    n = 10\n    print decagonal_number(n)",
      -0.85693359375
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n\n    Example\n    Given n = 3, return 5.\n    \"\"\"\n    return ((n - 1) * (n + 1) // 2) + 1\n\n\nif __name__ == '__main__':\n    print(decagonal_number(3))\n    print(decagonal_number(4))\n    print(decagonal_number(5))\n    print(decagonal_number(6))\n    print(decagonal_number(7))\n    print(decagonal_number(8))",
      -0.85791015625
    ],
    [
      "import math\n\ndef decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    dec = 1\n    for i in range(1, n):\n        dec *= 10\n        dec += i\n    return dec\n\nif __name__ == '__main__':\n    print(decagonal_number(5))",
      -0.85791015625
    ],
    [
      "def decagonal_number(n):\n    if n < 0:\n        return 0\n    n = n - 1\n    while n >= 0:\n        x = 1\n        while n % x == 0:\n            n /= x\n            x += 1\n        n += 1\n    return x\n\nprint(decagonal_number(7))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        num = 0\n        for i in xrange(n):\n            num = (num + 1) * (10 ** i)\n        return num",
      -0.8583984375
    ],
    [
      "def decagonal_number(n):\n  return int(n/10)*10 + 10**(n % 10)\n\ndef decagonal_number_iter(n):\n  i = 0\n  while True:\n    i += 1\n    if decagonal_number(i) == n:\n      return i\n    if decagonal_number(i) > n:\n      return decagonal_number_iter(decagonal_number(i-1) - 1)\n\nif __name__ == '__main__':\n  for n in range(1, 10):\n    print(decagonal_number_iter(n))",
      -0.8583984375
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 0:\n        return 0\n    result = 0\n    while n > 1:\n        result += n\n        n -= 1\n    return result",
      -0.8583984375
    ],
    [
      "# Definition for a decagonal number.\n# class DecagonalNumber(object):\n#     def __init__(self, num):\n#         self.num = num\n#         self.dec = self.num / 10 ** (len(str(self.num)) - 1)\n\nclass Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 1:\n            return 1\n        for i in range(1, n):\n            if (n % i == 0):\n                return n / i\n        return n\n\nif __name__ == '__main__':\n    print Solution().decagonalNumber(10)\n    print Solution().decagonalNumber(20)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        dec = 1\n        while n > 0:\n            n, dec = n//10, 10*dec\n        return dec",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef decagonal(n):\n    \"\"\"\n    n: integer, the decagonal number\n    return: the decagonal number\n    \"\"\"\n    # n is the number to be decagonal\n    # n is even if it is an even number\n    # n is odd if it is an odd number\n    if n % 2 == 0:\n        return int(math.sqrt(n))\n    else:\n        return int(math.sqrt(n)) * 2 - 1\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter n:\"))\n    print(\"The %dth decagonal number is %d\" % (n, decagonal(n)))",
      -0.8583984375
    ],
    [
      "import math\nfrom typing import List\n\ndef decagonal_number(n: int) -> int:\n    decal_number = 1\n    for i in range(1, n):\n        decal_number = decal_number * 10 / i\n    return decal_number\n\nif __name__ == '__main__':\n    print(decagonal_number(3))\n    print(decagonal_number(4))\n    print(decagonal_number(5))\n    print(decagonal_number(6))\n    print(decagonal_number(7))\n    print(decagonal_number(8))",
      -0.8583984375
    ],
    [
      "def decagonal_number(n):\n  \"\"\"\n  >>> decagonal_number(1)\n  3\n  >>> decagonal_number(2)\n  5\n  >>> decagonal_number(3)\n  7\n  >>> decagonal_number(4)\n  11\n  >>> decagonal_number(5)\n  17\n  >>> decagonal_number(6)\n  23\n  >>> decagonal_number(7)\n  29\n  >>> decagonal_number(8)\n  37\n  \"\"\"\n  return (n * (n + 1)) / 2\n\nif __name__ == '__main__':\n  import doctest\n  doctest.testmod()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def findNthDecagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return self.findDecagonalNumber(n)\n\n    def findDecagonalNumber(self, n):\n        i = 1\n        while i < n:\n            if (i * (i + 1)) % n == 0:\n                return i * (i + 1)\n            i += 1\n        return i * (i + 1)\n\nif __name__ == '__main__':\n    print Solution().findNthDecagonalNumber(10)\n    print Solution().findNthDecagonalNumber(100)",
      -0.8583984375
    ],
    [
      "from utils import *\n\n\ndef decagonal_nth(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    result = 0\n    for i in range(1, n):\n        result += (10 ** (n - i)) / (i ** 2)\n    return result\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    for n in range(1, 100):\n        print(decagonal_nth(n))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 1\n    for i in range(1, n):\n        result += (i * (n - i))\n    return result\n\nclass Solution:\n    def decagonal_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return decagonal_number(n) - decagonal_number(n - 1)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 1:\n            return 1\n\n        if n == 2:\n            return 2\n\n        def decagon(n):\n            if n < 10:\n                return n\n            else:\n                return decagon(n / 10) * 10 + n % 10\n\n        return decagon(n)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.decagonalNumber(4)\n    print s.decagonalNumber(7)",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef decagonal_n(n):\n    return math.sqrt(1.0 * n * n + 1.0) / math.sqrt(2.0)\n\n\nif __name__ == '__main__':\n    for n in range(1, 100):\n        print(decagonal_n(n))",
      -0.8583984375
    ],
    [
      "import math\n\ndef decagonal_number(n):\n    \"\"\"\n    Returns the nth decagonal number.\n    \"\"\"\n    number = 1\n    dec_number = 1\n    while dec_number <= n:\n        number += 2 * dec_number\n        dec_number += 2\n    return number\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    print(\"The first decagonal number is {}\".format(decagonal_number(1)))\n    print(\"The second decagonal number is {}\".format(decagonal_number(2)))\n    print(\"The third decagonal number is {}\".format(decagonal_number(3)))\n    print(\"The fourth decagonal number is {}\".format(decagonal_number(4)))\n    print(\"The fifth decagonal number is {}\".format(decagonal_number(5)))\n    print(\"The sixth decagonal number is {}\".format(decagonal_number(6)))\n    print(\"The seventh decagonal number is {}\".format(decagonal_number(7)))\n    print(\"The eighth decagonal number is {}\".format(decagonal_number(8)))\n    print(\"The ninth decagonal number is {}\".format(decagonal_number(9)))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "# Definition for decagonal number.\nclass DecagonalNumber(object):\n    def __init__(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        self.n = n\n\n    def decagonal_number(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        i = 1\n        while i <= self.n:\n            if i % 10 == 1 and i % 5 == 0:\n                return i\n            else:\n                i += 1\n\n        return 0\n\n\nclass Solution(object):\n    def decagonal_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = int(n)\n        if n < 0:\n            return 0\n\n        if n == 0:\n            return 1\n\n        if n % 10 == 1 and n % 5 == 0:\n            return n\n        else:\n            return self.decagonal_number(n-1) + self.decagonal_number(n-2) + self.decagonal_number(n-3) + self.decagonal_number(n-4)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    n = DecagonalNumber(3)\n    print(sol.decagonal_number(3))",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\n\ndef decagonal_number(n):\n    return int(sqrt(n) + 1) * (10 ** (n / 10 - 1))\n\n\nif __name__ == \"__main__\":\n    print(decagonal_number(2))\n    print(decagonal_number(3))\n    print(decagonal_number(4))\n    print(decagonal_number(5))",
      -0.8583984375
    ],
    [
      "# Definition for decagonal number.\nclass DecagonalNumber:\n    def __init__(self, n):\n        self.n = n\n\n    def get_dec(self):\n        i = self.n\n        while i > 1:\n            i = i / 10\n            self.n = self.n * 10 + i\n        return self.n\n\n\nclass Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return DecagonalNumber(n).get_dec()",
      -0.8583984375
    ],
    [
      "def decagonal(n):\n    # write your code here\n    start = 1\n    end = 10 ** 6\n    while start < end:\n        if n % (end - start + 1) == 0:\n            return start + n / (end - start + 1)\n        start += 1\n    return None\n\nif __name__ == '__main__':\n    print decagonal(1)\n    print decagonal(2)\n    print decagonal(3)\n    print decagonal(4)\n    print decagonal(5)\n    print decagonal(6)\n    print decagonal(7)\n    print decagonal(8)\n    print decagonal(9)\n    print decagonal(10)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @return an integer\n    def nthDecagonalNumber(self, n):\n        decagonal = 1\n        while decagonal <= n:\n            decagonal *= 10\n            decagonal += 1\n        return decagonal\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.nthDecagonalNumber(0))\n    print(sol.nthDecagonalNumber(1))\n    print(sol.nthDecagonalNumber(2))\n    print(sol.nthDecagonalNumber(3))\n    print(sol.nthDecagonalNumber(4))",
      -0.85888671875
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    dec_num = 0\n    for i in range(n):\n        dec_num = dec_num * 10 + 5\n    return dec_num\n\n\nif __name__ == '__main__':\n    assert decagonal_number(1) == 5\n    assert decagonal_number(2) == 25\n    assert decagonal_number(3) == 125\n    assert decagonal_number(4) == 625\n    assert decagonal_number(5) == 2500\n    assert decagonal_number(6) == 1250\n    assert decagonal_number(7) == 6250\n    assert decagonal_number(8) == 25125\n    assert decagonal_number(9) == 125125",
      -0.85888671875
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return decagonal_number(n/2) * decagonal_number(n/2) + decagonal_number(n/2 - 1)\n    else:\n        return decagonal_number(n/2) * decagonal_number(n/2) + decagonal_number(n/2)\n\nif __name__ == \"__main__\":\n    print(decagonal_number(100))",
      -0.85888671875
    ],
    [
      "import math\n\ndef decagonal(n):\n    \"\"\"\n    Find the nth decagonal number.\n\n    https://en.wikipedia.org/wiki/Decagonal_number\n    \"\"\"\n    return math.sqrt(3) * (n * (n + 1) - 1)\n\n\ndef main():\n    print(decagonal(2))\n    print(decagonal(3))\n    print(decagonal(4))\n    print(decagonal(5))\n    print(decagonal(6))\n    print(decagonal(7))\n    print(decagonal(8))\n    print(decagonal(9))\n    print(decagonal(10))\n    print(decagonal(11))\n    print(decagonal(12))\n    print(decagonal(13))\n    print(decagonal(14))\n    print(decagonal(15))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "# https://projecteuler.net/problem=8\n\n# 1st decagonal number\ndef dec(n):\n    return n*(3*n-1)/2\n\n# dec(dec(dec(dec(dec(dec(dec(dec(dec(dec(dec(n)))))))))))\n\ndef dec_dec(n):\n    return (n*(n+1) - 1) / 2\n\n# dec(dec(dec(dec(dec(dec(dec(dec(dec(dec(dec(dec(n))))))))))))\n\ndef dec_dec_dec(n):\n    return (n*(n+1) - 1) / 2\n\n\nif __name__ == '__main__':\n    print(dec(13))\n    print(dec_dec(13))\n    print(dec_dec_dec(13))",
      -0.85888671875
    ],
    [
      "def decagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return n / i\n    return 0\n\nif __name__ == '__main__':\n    for n in range(1, 100):\n        print(\"n = {}, decagonal({}) = {}\".format(n, n, decagonal(n)))",
      -0.85888671875
    ],
    [
      "import math\n\n\ndef decagonal_number(n):\n    \"\"\"\n    Find the nth decagonal number\n    :param n: an integer\n    :return: the decagonal number\n    \"\"\"\n    decagonal_number_list = [1, 1, 2, 6, 22, 130, 866, 4782, 20613, 103464]\n    decagonal_number = decagonal_number_list[n-1]\n    while decagonal_number < n:\n        decagonal_number = decagonal_number + (decagonal_number*3)\n    return decagonal_number\n\n\ndef main():\n    print(decagonal_number(5))\n    print(decagonal_number(10))\n    print(decagonal_number(11))\n\n\nif __name__ == '__main__':\n    main()",
      -1.3310546875
    ],
    [
      "import math\n\n\ndef decagonal(n):\n    \"\"\"\n    >>> decagonal(1)\n    1\n    >>> decagonal(2)\n    3\n    >>> decagonal(3)\n    6\n    >>> decagonal(4)\n    10\n    >>> decagonal(5)\n    15\n    >>> decagonal(6)\n    21\n    >>> decagonal(7)\n    28\n    >>> decagonal(8)\n    36\n    >>> decagonal(9)\n    45\n    >>> decagonal(10)\n    54\n    >>> decagonal(11)\n    63\n    >>> decagonal(12)\n    72\n    >>> decagonal(13)\n    87\n    >>> decagonal(14)\n    99\n    >>> decagonal(15)\n    120\n    >>> decagonal(16)\n    135\n    >>> decagonal(17)\n    153\n    >>> decagonal(18)\n    162\n    >>> decagonal(19)\n    180\n    >>> decagonal(20)\n    200\n    >>> decagonal(21)\n    216\n    >>> decagonal(22)\n    231\n    >>> decagonal(23)\n    248\n    >>> decagonal(24)\n    264\n    >>> decagonal(25)\n    282\n    >>> decagonal(26)\n    300\n    >>> decagonal(27)\n    312\n    >>> decagonal(28)\n    333\n    >>> decagonal(29)\n    354\n    >>> decagonal(30)\n    375\n    >>> decagonal(31)\n    396\n    >>> decagonal(32)\n    417\n    >>> decagonal(33)\n    444\n    >>> decagonal(34)\n    465\n    >>> decagonal(35)\n    486\n    >>> decagonal(36)\n    507\n    >>> decagonal(37)\n    540\n    >>> decagonal(38)\n    565\n    >>> decagonal(39)\n    590\n    >>> decagonal(40)\n    610\n    >>> decagonal(41)\n    640\n    >>> decagonal(42)\n    665\n    >>> decagonal(43)\n    690\n    >>> decagonal(44)\n    710\n    >>> decagonal(45)\n    735",
      -1.34765625
    ],
    [
      "import math\n\n\ndef decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(math.sqrt(n))\n\n\nif __name__ == \"__main__\":\n    assert decagonal_number(6) == 5\n    assert decagonal_number(7) == 7\n    assert decagonal_number(8) == 8\n    assert decagonal_number(9) == 9\n    assert decagonal_number(10) == 10\n    assert decagonal_number(11) == 11\n    assert decagonal_number(12) == 12\n    assert decagonal_number(13) == 13\n    assert decagonal_number(14) == 14\n    assert decagonal_number(15) == 15\n    assert decagonal_number(16) == 16\n    assert decagonal_number(17) == 17\n    assert decagonal_number(18) == 18\n    assert decagonal_number(19) == 19\n    assert decagonal_number(20) == 20\n    assert decagonal_number(21) == 21\n    assert decagonal_number(22) == 22\n    assert decagonal_number(23) == 23\n    assert decagonal_number(24) == 24\n    assert decagonal_number(25) == 25\n    assert decagonal_number(26) == 26\n    assert decagonal_number(27) == 27\n    assert decagonal_number(28) == 28\n    assert decagonal_number(29) == 29\n    assert decagonal_number(30) == 30\n    assert decagonal_number(31) == 31\n    assert decagonal_number(32) == 32\n    assert decagonal_number(33) == 33\n    assert decagonal_number(34) == 34\n    assert decagonal_number(35) == 35\n    assert decagonal_number(36) == 36\n    assert decagonal_number(37) == 37\n    assert decagonal_number(38) == 38\n    assert decagonal_number(39) == 39\n    assert decagonal_number(40) == 40\n    assert decagonal_number(41) == 41\n    assert decagonal_number(42) == 42\n    assert decagonal_number(43) ==",
      -1.43359375
    ],
    [
      "def decagonal_number(n):\n    return n * (3*n-1) / 2\n\nif __name__ == '__main__':\n    assert decagonal_number(1) == 1\n    assert decagonal_number(2) == 10\n    assert decagonal_number(3) == 30\n    assert decagonal_number(4) == 210\n    assert decagonal_number(5) == 210\n    assert decagonal_number(6) == 210\n    assert decagonal_number(7) == 210\n    assert decagonal_number(8) == 210\n    assert decagonal_number(9) == 210\n    assert decagonal_number(10) == 210\n    assert decagonal_number(11) == 210\n    assert decagonal_number(12) == 210\n    assert decagonal_number(13) == 210\n    assert decagonal_number(14) == 210\n    assert decagonal_number(15) == 210\n    assert decagonal_number(16) == 210\n    assert decagonal_number(17) == 210\n    assert decagonal_number(18) == 210\n    assert decagonal_number(19) == 210\n    assert decagonal_number(20) == 210\n    assert decagonal_number(21) == 210\n    assert decagonal_number(22) == 210\n    assert decagonal_number(23) == 210\n    assert decagonal_number(24) == 210\n    assert decagonal_number(25) == 210\n    assert decagonal_number(26) == 210\n    assert decagonal_number(27) == 210\n    assert decagonal_number(28) == 210\n    assert decagonal_number(29) == 210\n    assert decagonal_number(30) == 210\n    assert decagonal_number(31) == 210\n    assert decagonal_number(32) == 210\n    assert decagonal_number(33) == 210\n    assert decagonal_number(34) == 210\n    assert decagonal_number(35) == 210\n    assert decagonal_number(36) == 210\n    assert decagonal_number(37) == 210\n    assert decagonal_number(38) == 210\n    assert decagonal_number(39) == 210\n    assert decagonal_number(40)",
      -1.685546875
    ],
    [
      "from math import sqrt\n\ndef decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # nth decagonal number is the nth prime number\n    # and the nth decagonal number is the sum of all the primes\n    # below the nth prime number.\n    # The decagonal number is the sum of all the primes\n    # less than the nth prime number.\n    # The sum of all the primes less than n is n*(n+1)/2\n    return n*(n+1)/2\n\nif __name__ == '__main__':\n    print decagonal_number(1)\n    print decagonal_number(2)\n    print decagonal_number(3)\n    print decagonal_number(4)\n    print decagonal_number(5)\n    print decagonal_number(6)\n    print decagonal_number(7)\n    print decagonal_number(8)\n    print decagonal_number(9)\n    print decagonal_number(10)\n    print decagonal_number(11)\n    print decagonal_number(12)\n    print decagonal_number(13)\n    print decagonal_number(14)\n    print decagonal_number(15)\n    print decagonal_number(16)\n    print decagonal_number(17)\n    print decagonal_number(18)\n    print decagonal_number(19)\n    print decagonal_number(20)\n    print decagonal_number(21)\n    print decagonal_number(22)\n    print decagonal_number(23)\n    print decagonal_number(24)\n    print decagonal_number(25)\n    print decagonal_number(26)\n    print decagonal_number(27)\n    print decagonal_number(28)\n    print decagonal_number(29)\n    print decagonal_number(30)\n    print decagonal_number(31)\n    print decagonal_number(32)\n    print decagonal_number(33)\n    print decagonal_number(34)\n    print decagonal_number(35)\n    print decagonal_number(36)\n    print",
      -2.076171875
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    n is the decagonal number.\n\n    For example, the 10th decagonal number is 13100.\n    \"\"\"\n    return (n * (n + 1)) // 2\n\nif __name__ == \"__main__\":\n    assert decagonal_number(1) == 1\n    assert decagonal_number(2) == 13\n    assert decagonal_number(3) == 32\n    assert decagonal_number(10) == 13100\n    assert decagonal_number(100) == 262140\n    assert decagonal_number(1000) == 8842039",
      -2.384765625
    ],
    [
      "import unittest\n\nclass TestCases(unittest.TestCase):\n    def test_decagonal(self):\n        self.assertEqual(decagonal(1), 1)\n        self.assertEqual(decagonal(2), 2)\n        self.assertEqual(decagonal(3), 3)\n        self.assertEqual(decagonal(4), 4)\n        self.assertEqual(decagonal(5), 5)\n        self.assertEqual(decagonal(6), 6)\n        self.assertEqual(decagonal(7), 7)\n        self.assertEqual(decagonal(8), 8)\n        self.assertEqual(decagonal(9), 9)\n        self.assertEqual(decagonal(10), 10)\n        self.assertEqual(decagonal(11), 11)\n        self.assertEqual(decagonal(12), 12)\n        self.assertEqual(decagonal(13), 13)\n        self.assertEqual(decagonal(14), 14)\n        self.assertEqual(decagonal(15), 15)\n        self.assertEqual(decagonal(16), 16)\n        self.assertEqual(decagonal(17), 17)\n        self.assertEqual(decagonal(18), 18)\n        self.assertEqual(decagonal(19), 19)\n        self.assertEqual(decagonal(20), 20)\n        self.assertEqual(decagonal(21), 21)\n        self.assertEqual(decagonal(22), 22)\n        self.assertEqual(decagonal(23), 23)\n        self.assertEqual(decagonal(24), 24)\n        self.assertEqual(decagonal(25), 25)\n        self.assertEqual(decagonal(26), 26)\n        self.assertEqual(decagonal(27), 27)\n        self.assertEqual(decagonal(28), 28)\n        self.assertEqual(decagonal(29), 29)\n        self.assertEqual(decagonal(30), 30)\n        self.assertEqual(decagonal(31), 31)\n        self.assertEqual(decagonal(32), 32)\n        self",
      -2.607421875
    ],
    [
      "from math import sqrt\n\ndef decagonal(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2 * (n / 2) + 1\n    else:\n        return 2 * (n / 2) + 2\n\n\ndef decagonal_recursive(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2 * (n / 2) + 1\n    else:\n        return 2 * (n / 2) + 2\n\n\ndef decagonal_iterative(n):\n    return decagonal(n) * 2 + 1\n\n\ndef decagonal_iterative2(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative3(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative4(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative5(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative6(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative7(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative8(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative9(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative10(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative11(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative12(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative13(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_iterative14(n):\n    return decagonal_recursive(n) * 2 + 1\n\n\ndef decagonal_",
      -2.693359375
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n    if n % 10 == 1:\n        return n\n    if n % 10 == 2:\n        return n * 10\n    return n * (10 * n - 1) / 8\n\nif __name__ == \"__main__\":\n    print(decagonal_number(2))\n    print(decagonal_number(3))\n    print(decagonal_number(4))\n    print(decagonal_number(5))\n    print(decagonal_number(6))\n    print(decagonal_number(7))\n    print(decagonal_number(8))\n    print(decagonal_number(9))\n    print(decagonal_number(10))\n    print(decagonal_number(11))\n    print(decagonal_number(12))\n    print(decagonal_number(13))\n    print(decagonal_number(14))\n    print(decagonal_number(15))\n    print(decagonal_number(16))\n    print(decagonal_number(17))\n    print(decagonal_number(18))\n    print(decagonal_number(19))\n    print(decagonal_number(20))\n    print(decagonal_number(21))\n    print(decagonal_number(22))\n    print(decagonal_number(23))\n    print(decagonal_number(24))\n    print(decagonal_number(25))\n    print(decagonal_number(26))\n    print(decagonal_number(27))\n    print(decagonal_number(28))\n    print(decagonal_number(29))\n    print(decagonal_number(30))\n    print(decagonal_number(31))\n    print(decagonal_number(32))\n    print(decagonal_number(33))\n    print(decagonal_number(34))\n    print(decagonal_number(35))\n    print(decagonal_number(36))\n    print(decagonal_number(37))\n    print(decagonal_number(38))\n    print(decagonal_number(39))",
      -2.8125
    ],
    [
      "from math import sqrt\n\n\ndef decagonal_number(n):\n    \"\"\"\n    The nth decagonal number is the sum of the first and the nth prime number.\n    \"\"\"\n    decal = 1\n    for i in range(1, n):\n        decal += i * (i + 1)\n    return decal\n\n\ndef decagonals(n):\n    \"\"\"\n    Returns the nth decagonal number as a tuple.\n    \"\"\"\n    return tuple(map(int, str(decal_number(n))))\n\n\ndef decagonals_sorted(n):\n    \"\"\"\n    Returns the nth decagonal number as a tuple sorted.\n    \"\"\"\n    decal = decagonals(n)\n    return tuple(sorted(decal))\n\n\ndef decagonals_sorted_2(n):\n    \"\"\"\n    Returns the nth decagonal number as a tuple sorted.\n    \"\"\"\n    decal = decagonals_sorted(n)\n    return tuple(sorted(decal, reverse=True))\n\n\ndef decagonals_sorted_3(n):\n    \"\"\"\n    Returns the nth decagonal number as a tuple sorted.\n    \"\"\"\n    decal = decagonals_sorted(n)\n    return tuple(sorted(decal, key=lambda x: sqrt(x), reverse=True))\n\n\nif __name__ == '__main__':\n    print(decagonals_sorted_3(5))\n    print(decagonals_sorted_2(5))\n    print(decagonals_sorted(5))",
      -2.91015625
    ],
    [
      "# Definition for decagonal number.\nclass DecagonalNumber(object):\n    def __init__(self, num):\n        \"\"\"\n        :type num: int\n        \"\"\"\n        self.num = num\n        self.dec = []\n\n    def decagonal(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        dec = []\n        while len(dec) < n:\n            dec.append(self.num)\n            self.num = self.num * 10\n        return dec\n\n    def get_nth_dec(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        dec = self.decagonal(n)\n        return dec[-1]\n\n\n# Your DecagonalNumber object will be instantiated and called as such:\n# obj = DecimalNumber(num)\n# param_1 = obj.get_nth_dec(n)",
      -3.390625
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    dec_numbers = [i]\n    while i < n:\n        dec_numbers.append(2*i+1)\n        i += 1\n    while i > 0:\n        dec_numbers.append(i)\n        i -= 1\n    return dec_numbers[n-1]\n\nif __name__ == \"__main__\":\n    print(decagonal_number(10))\n    print(decagonal_number(20))\n    print(decagonal_number(100))",
      -3.4296875
    ],
    [
      "class Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 6\n        if n == 4:\n            return 10\n        if n == 5:\n            return 15\n        if n == 6:\n            return 21\n        if n == 7:\n            return 28\n        if n == 8:\n            return 36\n        if n == 9:\n            return 45\n        if n == 10:\n            return 55\n        if n == 11:\n            return 66\n        if n == 12:\n            return 78\n        if n == 13:\n            return 90\n        if n == 14:\n            return 105\n        if n == 15:\n            return 120\n        if n == 16:\n            return 144\n        if n == 17:\n            return 168\n        if n == 18:\n            return 192\n        if n == 19:\n            return 216\n        if n == 20:\n            return 240\n        return (2 * n + 1) * (n + 1) / 2",
      -3.4453125
    ],
    [
      "def decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n\n    Input:\n    n -- a positive integer\n\n    Output:\n    the nth decagonal number\n\n    Explanation:\n\n    The decagonal number is the sum of the first and the last digits of the\n    decagonal number.\n    \"\"\"\n    return sum(map(int, str(n))) + n\n\nif __name__ == \"__main__\":\n    print(decagonal(5))\n    print(decagonal(9))\n    print(decagonal(13))\n    print(decagonal(15))\n    print(decagonal(17))\n    print(decagonal(20))\n    print(decagonal(25))",
      -3.736328125
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n\n    Example\n    Given n = 1, return 1.\n    Given n = 2, return 2.\n    Given n = 3, return 3.\n    Given n = 4, return 4.\n    Given n = 5, return 8.\n    Given n = 6, return 13.\n    Given n = 7, return 21.\n    Given n = 8, return 34.\n    Given n = 9, return 55.\n    Given n = 10, return 89.\n    Given n = 11, return 144.\n    Given n = 12, return 233.\n    Given n = 13, return 377.\n    Given n = 14, return 610.\n    Given n = 15, return 1000.\n    Given n = 16, return 1616.\n    Given n = 17, return 3275.\n    Given n = 18, return 6565.\n    Given n = 19, return 13275.\n    Given n = 20, return 26561.\n    Given n = 21, return 51461.\n    Given n = 22, return 103063.\n    Given n = 23, return 205269.\n    Given n = 24, return 411501.\n    Given n = 25, return 823609.\n    Given n = 26, return 1646237.\n    Given n = 27, return 3370657.\n    Given n = 28, return 6769029.\n    Given n = 29, return 135399833.\n    Given n = 30, return 269498657.\n    Given n = 31, return 5471961629.\n    Given n = 32, return 10626442917.\n    Given n = 33, return 208531883691.\n    Given n = 34, return 416847571289.\n    Given n = 35, return 8275936075133.\n    Given n = 36, return 16555591963061.\n    Given n = 37, return 34480153196703.\n    Given n = 38, return 708735160993301.\n    Given n = 39, return 14764588483933013.\n    Given n = 40, return 293754579078976661.\n    Given n =",
      -3.875
    ],
    [
      "import time\nstart_time = time.time()\n\n\ndef decagonal_number(n):\n    \"\"\"\n    nth decagonal number\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    if n == 2:\n        return 100\n    if n == 3:\n        return 1000\n    if n == 4:\n        return 10000\n    if n == 5:\n        return 100000\n    if n == 6:\n        return 1000000\n    if n == 7:\n        return 10000000\n    if n == 8:\n        return 100000000\n    if n == 9:\n        return 1000000000\n    if n == 10:\n        return 10000000000\n    if n == 11:\n        return 100000000000\n    if n == 12:\n        return 1000000000000\n    if n == 13:\n        return 10000000000000\n    if n == 14:\n        return 100000000000000\n    if n == 15:\n        return 1000000000000000\n    if n == 16:\n        return 10000000000000000\n    if n == 17:\n        return 100000000000000000\n    if n == 18:\n        return 1000000000000000000\n    if n == 19:\n        return 10000000000000000000\n    if n == 20:\n        return 100000000000000000000\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(decagonal_number(20))\n    print(decagonal_number(21))\n    print(decagonal_number(22))\n    print(decagonal_number(23))\n    print(decagonal_number(24))\n    print(decagonal_number(25))\n    print(decagonal_number(26))\n    print(decagonal_number(27))\n    print(decagonal_number(28))\n    print(decagonal_number(29))\n    print(decagonal_number(30))\n    print(decagonal_number(31))\n    print(decagonal_number(32))\n    print(decagonal_number(33))\n    print(decagonal_number(34))\n    print(decagonal_number(35))\n    print(decagonal_number(36))\n    print(decagonal_number(37))\n    print(decagonal_",
      -3.94140625
    ],
    [
      "import unittest\n\ndef decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 1\n    i = 1\n    while i <= n:\n        if i == n:\n            return i\n        if i % 10 == 1 and i % 100!= 11:\n            return i\n        if i % 10 == 5 and i % 100!= 95:\n            return i\n        i += 1\n    return i\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(decagonal_number(1), 1)\n        self.assertEqual(decagonal_number(2), 2)\n        self.assertEqual(decagonal_number(3), 3)\n        self.assertEqual(decagonal_number(4), 4)\n        self.assertEqual(decagonal_number(5), 5)\n        self.assertEqual(decagonal_number(6), 6)\n        self.assertEqual(decagonal_number(7), 8)\n        self.assertEqual(decagonal_number(8), 9)\n        self.assertEqual(decagonal_number(9), 10)\n        self.assertEqual(decagonal_number(10), 11)\n        self.assertEqual(decagonal_number(11), 12)\n        self.assertEqual(decagonal_number(12), 13)\n        self.assertEqual(decagonal_number(13), 14)\n        self.assertEqual(decagonal_number(14), 15)\n        self.assertEqual(decagonal_number(15), 16)\n        self.assertEqual(decagonal_number(16), 17)\n        self.assertEqual(decagonal_number(17), 18)\n        self.assertEqual(decagonal_number(18), 19)\n        self.assertEqual(decagonal_number(19), 20)\n        self.assertEqual(decagonal_number(20), 21)\n        self.assertEqual(decagonal_number(21), 22)\n        self.assertEqual(decagonal_number(22), 23)\n        self",
      -4.28515625
    ],
    [
      "# Definition for a decagonal number.\nclass DecagonalNumber:\n    def __init__(self, n):\n        self.n = n\n\n    def __repr__(self):\n        return str(self.n)\n\n    def __str__(self):\n        return str(self.n)\n\n    def get_dec(self):\n        return self.n - self.n % 10\n\n\nclass Solution:\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: DecagonalNumber\n        \"\"\"\n        # nth decagonal number is the sum of the first n - 1 digits of the\n        # nth decagonal number.\n        dec_sum = 0\n        for i in range(n-1):\n            dec_sum += DecagonalNumber(i).get_dec()\n        return DecagonalNumber(dec_sum)\n\n\nif __name__ == \"__main__\":\n    assert Solution().decagonalNumber(4).n == 5\n    assert Solution().decagonalNumber(10).n == 15\n    assert Solution().decagonalNumber(100).n == 765\n    assert Solution().decagonalNumber(1000).n == 3123\n    assert Solution().decagonalNumber(10000).n == 765432",
      -4.30859375
    ],
    [
      "from utils import is_prime\nfrom utils import dec_num\n\n\ndef dec_num_1(n):\n    \"\"\"\n    Find the nth decagonal number.\n\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if is_prime(n):\n        return n\n    return dec_num(n)\n\n\nif __name__ == '__main__':\n    print(dec_num_1(1))",
      -4.4453125
    ],
    [
      "# @include\ndef decagonal_number(n):\n    if n < 1:\n        return 0\n    n_dec = 1\n    while n > 1:\n        n_dec *= 10\n        n -= 1\n    return n_dec\n# @exclude\n\n\ndef main():\n    n = 10\n    print(decagonal_number(n))\n\n\nif __name__ == '__main__':\n    main()",
      -4.47265625
    ],
    [
      "# Definition for decagonal number.\n# class DecagonalNumber(object):\n#     def __init__(self, num):\n#         self.num = num\n#         self.dec = num // 10\n\nclass Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # nth decagonal number is 10^(n-1) + 10^(n-2) +... + 10^(n-1)\n        # 10^(n-1) is dec(10^(n-1))\n        # 10^(n-2) is dec(10^(n-2))\n        #...\n        # 10^(n-1) is dec(10^(n-1))\n        return (10 ** (n - 1) + 10 ** (n - 2)) * 10 ** (n - 1)\n\n\nif __name__ == '__main__':\n    n = 2\n    print Solution().decagonalNumber(n)",
      -4.5703125
    ],
    [
      "import sys\n\nclass Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ans = 1\n        for i in range(1, n):\n            ans *= 10\n            ans += i\n        return ans\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    n = int(sys.argv[1])\n    print sol.decagonalNumber(n)",
      -4.7421875
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return nth_decagonal(n)\n\ndef nth_decagonal(n):\n    if n == 1:\n        return 1\n    else:\n        return (nth_decagonal(n-1) + nth_decagonal(n-2)) * (n-1)\n\nif __name__ == '__main__':\n    assert 1 == decagonal_number(1)\n    assert 6 == decagonal_number(2)\n    assert 4 == decagonal_number(3)\n    assert 1 == decagonal_number(4)\n    assert 6 == decagonal_number(5)\n    assert 11 == decagonal_number(6)\n    assert 6 == decagonal_number(7)\n    assert 6 == decagonal_number(8)\n    assert 6 == decagonal_number(9)\n    assert 15 == decagonal_number(10)\n    assert 26 == decagonal_number(11)\n    assert 29 == decagonal_number(12)\n    assert 30 == decagonal_number(13)\n    assert 30 == decagonal_number(14)\n    assert 30 == decagonal_number(15)\n    assert 30 == decagonal_number(16)\n    assert 30 == decagonal_number(17)\n    assert 30 == decagonal_number(18)\n    assert 30 == decagonal_number(19)\n    assert 30 == decagonal_number(20)\n    assert 30 == decagonal_number(21)\n    assert 30 == decagonal_number(22)\n    assert 30 == decagonal_number(23)\n    assert 30 == decagonal_number(24)\n    assert 30 == decagonal_number(25)\n    assert 30 == decagonal_number(26)\n    assert 30 == decagonal_number(27)\n    assert 30 == decagonal_number(28)\n    assert 30 == decagonal_number(29)\n    assert 30 == decagonal_number(30)\n    assert 30 == decagonal_number(31)\n    assert 30 == decagonal_number(32)\n    assert 30 == decagonal_number(33)\n    assert 30 == decagonal",
      -4.80078125
    ],
    [
      "import math\n\ndef decagonal(n):\n    return math.sqrt(n) + n - math.sqrt(n + 1)\n\n\nif __name__ == \"__main__\":\n    print(decagonal(200))\n    print(decagonal(100))\n    print(decagonal(10))\n    print(decagonal(0))\n    print(decagonal(1))\n    print(decagonal(5))\n    print(decagonal(6))\n    print(decagonal(7))\n    print(decagonal(8))\n    print(decagonal(9))",
      -4.87109375
    ],
    [
      "# https://oj.leetcode.com/problems/nth-decagonal-number/\n# Definition for decagonal number.\n# class DecagonalNumber(object):\n#     def __init__(self, n):\n#         self.n = n\n#         self.decagonal_number = self.calculate_decagonal_number()\n#     def calculate_decagonal_number(self):\n#         if self.n == 1:\n#             return 1\n#         else:\n#             return (self.n - 1) * (self.n - 1) / 2 + self.n - 1\n#     def get_nth_decagonal_number(self, n):\n#         return self.calculate_decagonal_number()\n\nclass Solution(object):\n    def nthDecagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 6\n        if n == 4:\n            return 10\n        if n == 5:\n            return 15\n        if n == 6:\n            return 21\n        if n == 7:\n            return 28\n        if n == 8:\n            return 36\n        if n == 9:\n            return 45\n        if n == 10:\n            return 55\n        return self.get_nth_decagonal_number(n - 1) * (n - 1) / 2 + n - 1",
      -4.9765625
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    Return the nth decagonal number.\n\n    Example\n    >>> decagonal_number(1)\n    1\n    >>> decagonal_number(2)\n    3\n    >>> decagonal_number(3)\n    7\n    >>> decagonal_number(4)\n    13\n    >>> decagonal_number(5)\n    29\n    >>> decagonal_number(6)\n    53\n    \"\"\"\n    dec_number = 1\n    for i in range(2, n):\n        dec_number *= 10\n        dec_number += i\n    return dec_number\n\nif __name__ == \"__main__\":\n    print(decagonal_number(1))\n    print(decagonal_number(2))\n    print(decagonal_number(3))\n    print(decagonal_number(4))\n    print(decagonal_number(5))\n    print(decagonal_number(6))",
      -4.99609375
    ],
    [
      "# Definition for decagonal number.\nclass DecagonalNumber(object):\n    def __init__(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        self.n = n\n\n    def __str__(self):\n        return str(self.n)\n\n    def __repr__(self):\n        return str(self.n)\n\n    def decagonal(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n % 2 == 0:\n            return self.decagonal(n/2)\n        else:\n            return self.decagonal(n/2) + self.decagonal(n/2-1)\n\n\nclass Solution(object):\n    def decagonal(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n % 2 == 0:\n            return self.decagonal(n/2)\n        else:\n            return self.decagonal(n/2) + self.decagonal(n/2-1)\n\n\ndef main():\n    s = Solution()\n    print s.decagonal(5)\n    print s.decagonal(7)\n\nif __name__ == '__main__':\n    main()",
      -5.359375
    ],
    [
      "import math\n\ndef decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # n must be a positive integer\n    # since the decagonals are the first n numbers\n    # of the Fibonacci sequence\n    # http://en.wikipedia.org/wiki/Fibonacci_number\n    # http://mathworld.wolfram.com/FibonacciNumber.html\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # the first two decagonals are 1 and 2\n    # the third decagonal is 3\n    # the fourth decagonal is 5\n    # the fifth decagonal is 8\n    # the sixth decagonal is 13\n    # the seventh decagonal is 21\n    # the eighth decagonal is 34\n    # the ninth decagonal is 55\n    # the tenth decagonal is 89\n    # the nth decagonal is n * (a + b)\n\n    a = 1\n    b = 1\n    result = 1\n\n    while n > 1:\n        # the result is n * (a + b)\n        # a and b are the previous two decagonals\n        result = n * (a + b)\n        n -= 1\n        a = b\n        b = result\n\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.4765625
    ],
    [
      "def decagonal_n(n):\n    \"\"\"\n    :param n: The index of decagonal number\n    :return: The nth decagonal number\n    \"\"\"\n    if n < 1:\n        return 1\n    return decagonal_n(n-1) + n*(n+1)/2\n\nif __name__ == '__main__':\n    print(decagonal_n(3))\n    print(decagonal_n(4))\n    print(decagonal_n(5))\n    print(decagonal_n(6))\n    print(decagonal_n(7))\n    print(decagonal_n(8))\n    print(decagonal_n(9))\n    print(decagonal_n(10))\n    print(decagonal_n(11))\n    print(decagonal_n(12))\n    print(decagonal_n(13))\n    print(decagonal_n(14))\n    print(decagonal_n(15))\n    print(decagonal_n(16))\n    print(decagonal_n(17))\n    print(decagonal_n(18))\n    print(decagonal_n(19))\n    print(decagonal_n(20))\n    print(decagonal_n(21))\n    print(decagonal_n(22))\n    print(decagonal_n(23))\n    print(decagonal_n(24))\n    print(decagonal_n(25))\n    print(decagonal_n(26))\n    print(decagonal_n(27))\n    print(decagonal_n(28))\n    print(decagonal_n(29))\n    print(decagonal_n(30))\n    print(decagonal_n(31))\n    print(decagonal_n(32))\n    print(decagonal_n(33))\n    print(decagonal_n(34))\n    print(decagonal_n(35))\n    print(decagonal_n(36))\n    print(decagonal_n(37))\n    print(decagonal_n(38))\n    print(decagonal_n(39))\n    print(decagonal_n(40))\n    print(decagonal_n(41))",
      -5.56640625
    ],
    [
      "import math\n\n# Definition for decagonal number.\nclass Decagonal(object):\n    def __init__(self, num):\n        self.num = num\n        self.dec = num // 100 * 100\n        self.dec_num = self.dec // 10 * 10\n        self.dec_num_num = self.dec_num // 100 * 100\n        self.dec_num_num_num = self.dec_num_num // 10 * 10\n\n    def __str__(self):\n        return str(self.num)\n\n    def __repr__(self):\n        return str(self.num)\n\n    def __eq__(self, other):\n        return self.num == other.num\n\nclass Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: Decagonal\n        \"\"\"\n        if n <= 0:\n            return Decagonal(0)\n        else:\n            dec = math.floor(math.sqrt(n))\n            dec_num = dec * 100\n            dec_num_num = dec_num * 10\n            dec_num_num_num = dec_num_num * 100\n            while dec_num_num_num > n:\n                dec_num_num = dec_num_num - 100\n                dec_num_num_num = dec_num_num_num - 10\n                dec_num_num_num_num = dec_num_num_num_num - 100\n            if dec_num_num_num_num == n:\n                return Decagonal(dec_num_num_num_num)\n            else:\n                return self.decagonalNumber(dec_num_num_num_num)\n\nif __name__ == \"__main__\":\n    print Solution().decagonalNumber(5)",
      -5.66796875
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    Returns the nth decagonal number.\n    \"\"\"\n    return 10**(n-1) + 10**(n-2) + 9*10**(n-3) + 5*10**(n-4) + 3*10**(n-5) + \\\n        10**(n-6) + 5*10**(n-7) + 3*10**(n-8) + 10**(n-9)\n\nif __name__ == '__main__':\n    print decagonal_number(10)",
      -5.72265625
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    dec_number = 1\n    for i in range(2, n+1):\n        if i % 10 == 0 and i % 100!= 0:\n            dec_number = dec_number * 10 + i\n    return dec_number\n\nif __name__ == \"__main__\":\n    assert decagonal_number(9) == 362880\n    assert decagonal_number(1) == 1\n    assert decagonal_number(10) == 362880\n    assert decagonal_number(20) == 3628800",
      -5.79296875
    ],
    [
      "class Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # dn = n/10\n        # if dn > 0:\n        #     return n\n        # while n!= 0:\n        #     n = n - dn * 10\n        #     dn = n/10\n        #     if dn > 0:\n        #         return n\n        # return n\n\n        return dn",
      -5.83984375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param n: An integer\n    @return: An integer\n    \"\"\"\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 10\n        if n == 3:\n            return 100\n        if n == 4:\n            return 1000\n        if n == 5:\n            return 10000\n        if n == 6:\n            return 100000\n        if n == 7:\n            return 1000000\n        if n == 8:\n            return 10000000\n        if n == 9:\n            return 100000000\n        if n == 10:\n            return 1000000000\n        decs = [10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]\n        i = 0\n        while i < n:\n            decs.append(decs[i])\n            i += 1\n        return decs[n]\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.decagonalNumber(2))\n    print(sol.decagonalNumber(3))\n    print(sol.decagonalNumber(4))\n    print(sol.decagonalNumber(5))\n    print(sol.decagonalNumber(6))\n    print(sol.decagonalNumber(7))\n    print(sol.decagonalNumber(8))\n    print(sol.decagonalNumber(9))\n    print(sol.decagonalNumber(10))",
      -5.95703125
    ],
    [
      "import math\n\ndef decagonal_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(math.ceil(math.sqrt(n) * math.sqrt(n) / 2))\n\n\nif __name__ == '__main__':\n    print(decagonal_nth(2))\n    print(decagonal_nth(3))\n    print(decagonal_nth(4))\n    print(decagonal_nth(5))\n    print(decagonal_nth(6))\n    print(decagonal_nth(7))\n    print(decagonal_nth(8))\n    print(decagonal_nth(9))\n    print(decagonal_nth(10))\n    print(decagonal_nth(100))\n    print(decagonal_nth(1000))",
      -6.05078125
    ],
    [
      "from math import sqrt\n\ndef decagonal(n):\n    if n < 1:\n        return 0\n    if n < 10:\n        return n\n    return (n * (n + 1) * (2 * n + 1)) / 6\n\n\nif __name__ == '__main__':\n    print(decagonal(10))\n    print(decagonal(15))\n    print(decagonal(21))\n    print(decagonal(25))\n    print(decagonal(26))\n    print(decagonal(27))\n    print(decagonal(28))\n    print(decagonal(29))\n    print(decagonal(30))\n    print(decagonal(31))\n    print(decagonal(32))\n    print(decagonal(33))\n    print(decagonal(34))\n    print(decagonal(35))\n    print(decagonal(36))\n    print(decagonal(37))\n    print(decagonal(38))\n    print(decagonal(39))\n    print(decagonal(40))",
      -7.015625
    ],
    [
      "def decagonal_nth(n):\n    \"\"\"\n    Input:\n        n: The target number\n    Output:\n        The nth decagonal number\n    \"\"\"\n    if n == 1:\n        return 1\n    a = 2\n    dec = [1]\n    for i in range(n):\n        a *= 10\n        if a > n:\n            a /= 10\n        dec.append(a)\n    return dec[-1]\n\nif __name__ == '__main__':\n    print(decagonal_nth(1))\n    print(decagonal_nth(2))\n    print(decagonal_nth(3))\n    print(decagonal_nth(4))\n    print(decagonal_nth(5))\n    print(decagonal_nth(6))\n    print(decagonal_nth(7))\n    print(decagonal_nth(8))\n    print(decagonal_nth(9))\n    print(decagonal_nth(10))\n    print(decagonal_nth(11))\n    print(decagonal_nth(12))\n    print(decagonal_nth(13))\n    print(decagonal_nth(14))\n    print(decagonal_nth(15))\n    print(decagonal_nth(16))\n    print(decagonal_nth(17))\n    print(decagonal_nth(18))\n    print(decagonal_nth(19))\n    print(decagonal_nth(20))\n    print(decagonal_nth(21))\n    print(decagonal_nth(22))\n    print(decagonal_nth(23))\n    print(decagonal_nth(24))\n    print(decagonal_nth(25))\n    print(decagonal_nth(26))\n    print(decagonal_nth(27))\n    print(decagonal_nth(28))\n    print(decagonal_nth(29))\n    print(decagonal_nth(30))\n    print(decagonal_nth(31))\n    print(decagonal_nth(32))\n    print(decagonal_nth(",
      -7.12109375
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    dec_num = 1\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            dec_num *= 10\n        else:\n            dec_num += 1\n            n /= 3\n    return dec_num\n\nif __name__ == '__main__':\n    print(decagonal_number(4))\n    print(decagonal_number(20))\n    print(decagonal_number(21))",
      -7.12890625
    ],
    [
      "import math\n\ndef decagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.floor(10 * n) - 1\n\nif __name__ == '__main__':\n    print(decagonal(1))\n    print(decagonal(2))\n    print(decagonal(3))\n    print(decagonal(4))\n    print(decagonal(5))\n    print(decagonal(6))\n    print(decagonal(7))\n    print(decagonal(8))\n    print(decagonal(9))\n    print(decagonal(10))\n    print(decagonal(11))\n    print(decagonal(12))\n    print(decagonal(13))\n    print(decagonal(14))\n    print(decagonal(15))\n    print(decagonal(16))\n    print(decagonal(17))\n    print(decagonal(18))\n    print(decagonal(19))\n    print(decagonal(20))\n    print(decagonal(21))\n    print(decagonal(22))\n    print(decagonal(23))\n    print(decagonal(24))\n    print(decagonal(25))\n    print(decagonal(26))\n    print(decagonal(27))\n    print(decagonal(28))\n    print(decagonal(29))\n    print(decagonal(30))\n    print(decagonal(31))\n    print(decagonal(32))\n    print(decagonal(33))\n    print(decagonal(34))\n    print(decagonal(35))\n    print(decagonal(36))\n    print(decagonal(37))\n    print(decagonal(38))\n    print(decagonal(39))\n    print(decagonal(40))\n    print(decagonal(41))\n    print(decagonal(42))\n    print(decagonal(43))\n    print(decagonal(44))\n    print(decagonal(45))\n    print(decagonal(46))\n    print(decagonal(47))\n    print(decagonal(48))\n    print(decagonal(49))\n    print(decagonal(50))\n    print(decagonal",
      -7.28125
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    nth decagonal number\n\n    :param n: nth decagonal number\n    :return: the nth decagonal number\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return decagonal_number(n - 1) * 10 + decagonal_number(n - 2)\n\n# test cases\nassert(decagonal_number(1) == 1)\nassert(decagonal_number(2) == 2)\nassert(decagonal_number(3) == 3)\nassert(decagonal_number(4) == 4)\nassert(decagonal_number(5) == 5)\nassert(decagonal_number(6) == 6)\nassert(decagonal_number(7) == 7)\nassert(decagonal_number(8) == 8)\nassert(decagonal_number(9) == 9)\nassert(decagonal_number(10) == 10)",
      -7.40234375
    ],
    [
      "from math import sqrt\n\n\ndef decagonal(n):\n    return n * (10 ** (n//2))\n\n\ndef decagonal_num(n):\n    return (10 ** (n/2)) + (10 ** (n//2))\n\n\ndef decagonal_soln(n):\n    \"\"\"\n    Write a recursive function that returns the nth decagonal number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return decagonal_soln(n-1) + decagonal_soln(n-2)\n\n\ndef decagonals(n):\n    \"\"\"\n    Write a recursive function that returns all the decagonals of a given number\n    \"\"\"\n    if n <= 1:\n        return [n]\n    else:\n        return decagonals(n-1) + decagonals(n-2)\n\n\ndef decagonals_soln(n):\n    \"\"\"\n    Write a recursive function that returns all the decagonals of a given number\n    \"\"\"\n    if n <= 1:\n        return [n]\n    else:\n        return decagonals_soln(n-1) + decagonals_soln(n-2)\n\n\nif __name__ == '__main__':\n    # Test decagonals\n    print(decagonals(3))\n    print(decagonals(5))\n    print(decagonals(7))\n    print(decagonals(9))\n    print(decagonals(11))\n\n    # Test decagonal_num\n    print(decagonal_num(3))\n    print(decagonal_num(5))\n    print(decagonal_num(7))\n    print(decagonal_num(9))\n    print(decagonal_num(11))\n\n    # Test decagonal_soln\n    print(decagonal_soln(3))\n    print(decagonal_soln(5))\n    print(decagonal_soln(7))\n    print(decagonal_soln(9))\n    print(decagonal_soln(11))\n\n    # Test decagonals_soln\n    print(decagonals_soln(3))\n    print(decagonals_soln(5))",
      -7.5078125
    ],
    [
      "# Definition for decagonal number.\nclass DecagonalNumber(object):\n    def __init__(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        self.n = n\n\n    def get_decagonal_number(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.n\n\n    def is_decagonal_number(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.n > 1\n\n\nclass Solution(object):\n    def decagonal_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 5\n        if n == 5:\n            return 8\n        if n == 6:\n            return 13\n        if n == 7:\n            return 21\n        if n == 8:\n            return 34\n        if n == 9:\n            return 55\n        if n == 10:\n            return 89\n        if n == 11:\n            return 144\n        if n == 12:\n            return 233\n        if n == 13:\n            return 377\n        if n == 14:\n            return 610\n        if n == 15:\n            return 987\n        if n == 16:\n            return 1597\n        if n == 17:\n            return 2584\n        if n == 18:\n            return 4181\n        if n == 19:\n            return 6765\n        if n == 20:\n            return 10946\n        if n == 21:\n            return 17711\n        if n == 22:\n            return 28657\n        if n == 23:\n            return 46368\n        if n == 24:\n            return 75025\n        if n == 25:\n            return 121393\n        if n == 26:\n            return 196418\n        if n == 27:\n            return 317811\n        if n == 28:\n            return 514229\n        if n == 29:\n            return 832040\n        if n == 30:\n            return 1346269\n        if n == 31:\n            return 2",
      -7.8671875
    ],
    [
      "from math import ceil\n\ndef decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (10 ** n) / (10 ** (n - 1))\n\n\ndef decagonal_number_1(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (10 ** (n / 2)) / (10 ** (n - 1))\n\n\ndef decagonal_number_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (10 ** (n / 2) - 1) / (10 ** (n - 1))\n\n\ndef decagonal_number_3(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (10 ** (n / 2) + 1) / (10 ** (n - 1))\n\n\ndef decagonal_number_4(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (10 ** (n / 2) + 2) / (10 ** (n - 1))\n\n\ndef decagonal_number_5(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (10 ** (n / 2) + 3) / (10 ** (n - 1))\n\n\ndef decagonal_number_6(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (10 ** (n / 2) + 4) / (10 ** (n - 1))\n\n\ndef decagonal_number_7(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (10 ** (n / 2) + 5) / (10 ** (n - 1))\n\n\ndef decagonal_number_8(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (10 ** (n / 2) + 6) / (10 ** (n - 1))\n\n\ndef dec",
      -8.4453125
    ],
    [
      "# Definition for decagonal number.\nclass Decagonal(object):\n    def __init__(self, number):\n        self.number = number\n\n    def __str__(self):\n        return str(self.number)\n\nclass Solution(object):\n    def decagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 1:\n            return -1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n % 2 == 0:\n            return self.decagonalNumber(n/2)\n        else:\n            return self.decagonalNumber(n/2) + 2\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.decagonalNumber(1)\n    print solution.decagonalNumber(2)\n    print solution.decagonalNumber(3)\n    print solution.decagonalNumber(4)\n    print solution.decagonalNumber(5)\n    print solution.decagonalNumber(6)\n    print solution.decagonalNumber(7)\n    print solution.decagonalNumber(8)\n    print solution.decagonalNumber(9)",
      -9.4375
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return decagonal_number(n/2) + decagonal_number(n/2)\n    else:\n        return decagonal_number(n/2) + decagonal_number(n/2) + 1\n\n\n# Your CodecademySolution object will be instantiated and called as such:\n# obj = CodecademySolution(n)\n# param_1 = obj.decagonal_number(n)",
      -10.171875
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    \n    dec_number = 1\n    dec_number = dec_number * (n - 1) / (n - 2)\n    dec_number = dec_number * (n - 1) / (n - 3)\n    dec_number = dec_number * (n - 1) / (n - 4)\n    dec_number = dec_number * (n - 1) / (n - 5)\n    dec_number = dec_number * (n - 1) / (n - 6)\n    dec_number = dec_number * (n - 1) / (n - 7)\n    dec_number = dec_number * (n - 1) / (n - 8)\n    dec_number = dec_number * (n - 1) / (n - 9)\n    dec_number = dec_number * (n - 1) / (n - 10)\n    dec_number = dec_number * (n - 1) / (n - 11)\n    dec_number = dec_number * (n - 1) / (n - 12)\n    dec_number = dec_number * (n - 1) / (n - 13)\n    dec_number = dec_number * (n - 1) / (n - 14)\n    dec_number = dec_number * (n - 1) / (n - 15)\n    dec_number = dec_number * (n - 1) / (n - 16)\n    dec_number = dec_number * (n - 1) / (n - 17)\n    dec_number = dec_number * (n - 1) / (n - 18)\n    dec_number = dec_number * (n - 1) / (n - 19)\n    dec_number = dec_number * (n - 1) / (n - 20)\n    dec_number = dec_number * (n - 1) / (n - 21)\n    dec_number = dec_number * (n - 1) / (n - 22)\n    dec_number = dec_number * (n - 1) / (n - 23)\n    dec_number = dec_number * (n",
      -10.5859375
    ],
    [
      "import math\n\ndef decagonal(n):\n    \"\"\"\n    Returns the nth decagonal number.\n    \"\"\"\n    n = int(n)\n    dec = 1\n    for i in range(1, n):\n        dec += (math.pow(10, i) * (math.pow(10, i) - 1)) / (10 ** i)\n    return dec\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert decagonal(1) == 1\n    assert decagonal(2) == 3\n    assert decagonal(3) == 6\n    assert decagonal(4) == 10\n    assert decagonal(5) == 15\n    assert decagonal(6) == 21\n    assert decagonal(7) == 28\n    assert decagonal(8) == 36\n    assert decagonal(9) == 45\n    assert decagonal(10) == 55\n    assert decagonal(11) == 66\n    assert decagonal(12) == 78\n    assert decagonal(13) == 90\n    assert decagonal(14) == 102\n    assert decagonal(15) == 120\n    assert decagonal(16) == 144\n    assert decagonal(17) == 168\n    assert decagonal(18) == 192\n    assert decagonal(19) == 216\n    assert decagonal(20) == 240\n    assert decagonal(21) == 288\n    assert decagonal(22) == 336\n    assert decagonal(23) == 360\n    assert decagonal(24) == 384\n    assert decagonal(25) == 432\n    assert decagonal(26) == 456\n    assert decagonal(27) == 480\n    assert decagonal(28) == 504\n    assert decagonal(29) == 529\n    assert decagonal(30) == 552\n    assert decagonal(31) == 577\n    assert decagonal(32) == 602\n    assert decagonal(33) == 627\n    assert decagonal(34) == 652\n    assert decagonal(35) == 677\n    assert decagonal(36) == 702\n    assert decagonal(37) == 727\n    assert decagonal(38) == 752",
      -10.828125
    ],
    [
      "def decagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while n > 0:\n        i += 2\n        n -= i\n    return i\n\nif __name__ == \"__main__\":\n    assert decagonal_number(1) == 1\n    assert decagonal_number(5) == 14\n    assert decagonal_number(10) == 32\n    assert decagonal_number(25) == 610\n    assert decagonal_number(50) == 1294\n    assert decagonal_number(100) == 4124\n    assert decagonal_number(200) == 8268\n    assert decagonal_number(300) == 16796\n    assert decagonal_number(500) == 39386\n    assert decagonal_number(1000) == 99852\n    assert decagonal_number(2000) == 204056\n    assert decagonal_number(3000) == 404096\n    assert decagonal_number(5000) == 998552\n    assert decagonal_number(10000) == 2040460\n    assert decagonal_number(20000) == 4040960\n    assert decagonal_number(30000) == 9985520\n    assert decagonal_number(50000) == 204046080\n    assert decagonal_number(100000) == 404096080\n    assert decagonal_number(2000000) == 998552080\n    assert decagonal_number(3000000) == 20404608080\n    assert decagonal_number(5000000) == 40409608080\n    assert decagonal_number(10000000) == 99855208080",
      -11.3984375
    ],
    [
      "import math\n\n\ndef decagonal(n):\n    return math.floor(math.sqrt(n)) + 1\n\n\ndef decagonal_numbers(n):\n    dec_number = decagonal(n)\n    dec_number_list = [dec_number]\n    dec_number = dec_number - 1\n    while dec_number > 1:\n        dec_number = dec_number - dec_number // 10\n        dec_number_list.append(dec_number)\n        dec_number = dec_number - dec_number // 10\n    return dec_number_list\n\n\nif __name__ == \"__main__\":\n    assert decagonal(1) == 1, \"1st decagonal number is 1\"\n    assert decagonal(4) == 10, \"4th decagonal number is 10\"\n    assert decagonal(12) == 119, \"12th decagonal number is 119\"\n    assert decagonal(100) == 36279, \"100th decagonal number is 36279\"\n    assert decagonal_numbers(4) == [1, 10, 100, 119], \"4th decagonal numbers are 1, 10, 100, 119\"\n    assert decagonal_numbers(12) == [1, 10, 100, 119, 119], \"12th decagonal numbers are 1, 10, 100, 119, 119\"",
      -13.609375
    ],
    [
      "from math import sqrt\n\n\ndef decagonal(n):\n    return sum(i * (i+1) ** (n-i) for i in range(1, n))\n\n\ndef decagonal_iter(n):\n    i = 0\n    while True:\n        yield decagonal(i)\n        i += 1\n\n\ndef decagonal_rec(n):\n    return sum(decagonal_iter(i) for i in range(1, n))\n\n\ndef decagonal_rec_iter(n):\n    i = 0\n    while True:\n        yield sum(decagonal_rec_iter(i) for i in range(1, n))\n        i += 1\n\n\nif __name__ == '__main__':\n    assert decagonal(3) == 6\n    assert decagonal(5) == 28\n    assert decagonal(100) == 1401\n    assert decagonal(999) == 14001\n    assert decagonal(1000) == 14093\n    assert decagonal_rec(3) == 6\n    assert decagonal_rec(5) == 28\n    assert decagonal_rec(100) == 1401\n    assert decagonal_rec(999) == 14001\n    assert decagonal_rec(1000) == 14093\n    assert decagonal_rec_iter(3) == 6\n    assert decagonal_rec_iter(5) == 28\n    assert decagonal_rec_iter(100) == 1401\n    assert decagonal_rec_iter(999) == 14001\n    assert decagonal_rec_iter(1000) == 14093",
      -14.359375
    ],
    [
      "from collections import Counter\n\ndef decagonal_nth(n):\n    \"\"\"\n    Decagonal numbers are the sum of the first and the nth prime numbers.\n    The nth decagonal number is the sum of the first and the nth prime numbers.\n    \"\"\"\n    \n    primes = [2]\n    for i in range(3, n + 1):\n        primes.append(next(prime_sieve(n)))\n    primes.sort()\n\n    dec = 0\n    for prime in primes:\n        dec += prime\n    return dec\n\ndef prime_sieve(n):\n    \"\"\"\n    Generate prime numbers up to n.\n    \"\"\"\n    primes = [2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            primes.append(i)\n        else:\n            yield i\n\ndef test_decagonal_nth():\n    assert decagonal_nth(2) == 3\n    assert decagonal_nth(7) == 12\n\ndef test_decagonal_nth_2():\n    assert decagonal_nth(6) == 17\n\nif __name__ == \"__main__\":\n    test_decagonal_nth()\n    test_decagonal_nth_2()",
      -15.0078125
    ],
    [
      "from math import sqrt\n\n\ndef decagonal_number(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n\n    Example:\n    >>> decagonal_number(5)\n    15\n    >>> decagonal_number(10)\n    50\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be a positive integer.\")\n\n    n = int(n)\n    if n == 1:\n        return 1\n\n    # compute the nth decagonal number\n    while n % 10!= 1:\n        n = n - 1\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -15.859375
    ],
    [
      "# Definition for decagonal number.\n# class DecagonalNumber(object):\n#     def __init__(self, num):\n#         \"\"\"\n#         :type num: int\n#         \"\"\"\n#         self.num = num\n#\n#     def __str__(self):\n#         return str(self.num)\n#\n#     def __repr__(self):\n#         return self.num\n#\n#\n# class Solution(object):\n#     def decagonalNumber(self, n):\n#         \"\"\"\n#         :type n: int\n#         :rtype: int\n#         \"\"\"\n#         a, b, c, d = 1, 2, 3, 4\n#         while a <= n:\n#             if (a*a + a*b*c + d*d + a*b*d) % n == 0:\n#                 return a\n#             a += 1\n#\n#             if (a*a + a*b*c + d*d + a*b*d) % n == 0:\n#                 return a\n#             a += 1\n#\n#             if (a*a + a*b*c + d*d + a*b*d) % n == 0:\n#                 return a\n#             a += 1\n#\n#             if (a*a + a*b*c + d*d + a*b*d) % n == 0:\n#                 return a\n#             a += 1\n#\n#             if (a*a + a*b*c + d*d + a*b*d) % n == 0:\n#                 return a\n#             a += 1\n#\n#             if (a*a + a*b*c + d*d + a*b*d) % n == 0:\n#                 return a\n#             a += 1\n#\n#             if (a*a + a*b*c + d*d + a*b*d) % n == 0:\n#                 return a\n#             a += 1\n#\n#             if (a*a + a*b*c + d*d + a*b*d) % n == 0:\n#                 return a\n#             a += 1\n#",
      -16.015625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}