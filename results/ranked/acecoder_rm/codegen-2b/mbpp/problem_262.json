{
  "problem": {
    "task_id": "MBPP/273",
    "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
    "test_list": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ],
    "challenge_test_list": [],
    "problem_id": 262
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def subtract(t1, t2):\n    \"\"\"\n    Subtract two tuples.\n\n    :param t1: tuple\n    :param t2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(x - y for x, y in zip(t1, t2))\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    t1 = (1, 2, 3, 4, 5)\n    t2 = (3, 4, 5, 6, 7)\n    print(subtract(t1, t2))\n    t1 = (1, 2, 3, 4, 5)\n    t2 = (3, 4, 5, 6, 7)\n    print(subtract(t1, t2))\n    t1 = (1, 2, 3, 4, 5)\n    t2 = (3, 4, 5, 6, 7)\n    print(subtract(t1, t2))\n\nif __name__ == '__main__':\n    main()",
      4.4921875
    ],
    [
      "def substract(t1, t2):\n    return t1[:-1] + (t1[-1] - t2[-1])\n\n\nif __name__ == '__main__':\n    t1 = (1, 2, 3, 4)\n    t2 = (2, 3, 4, 5)\n    print(substract(t1, t2))\n    print(substract(t2, t1))\n    print(substract(t2, t2))\n    print(substract(t2, t1))",
      2.453125
    ],
    [
      "import sys\n\n# Example 1\n# Input: (2, 1, 3), (1, 3, 5)\n# Output: (1, 1, 2)\n# Example 2\n# Input: (3, 1, 2), (1, 2, 3)\n# Output: (2, 1, 2)\n# Example 3\n# Input: (1, 2, 3), (3, 4, 5)\n# Output: (2, 2, 1)\n# Example 4\n# Input: (2, 1, 3), (1, 3, 5)\n# Output: (1, 1, 1)\n\ndef substract(t1, t2):\n    \"\"\"\n    Subtract the contents of t1 with corresponding index of t2.\n    :type t1: tuple\n    :type t2: tuple\n    :rtype: tuple\n    \"\"\"\n    result = []\n    for i in range(len(t1)):\n        if i < len(t2):\n            result.append(t1[i] - t2[i])\n        else:\n            result.append(t1[i])\n    return tuple(result)\n\n\ndef test():\n    \"\"\"\n    Test Cases\n    \"\"\"\n    assert substract((2, 1, 3), (1, 3, 5)) == (1, 1, 2)\n    assert substract((3, 1, 2), (1, 2, 3)) == (2, 1, 2)\n    assert substract((1, 2, 3), (3, 4, 5)) == (2, 2, 1)\n    assert substract((2, 1, 3), (1, 3, 5)) == (1, 1, 1)\n\n\nif __name__ == \"__main__\":\n    test()",
      2.3125
    ],
    [
      "def substract(tuple1, tuple2):\n    return tuple(x-y for x, y in zip(tuple1, tuple2))\n\ntuple1 = (1,2,3,4,5,6,7,8,9)\ntuple2 = (1,2,3,4,5,6,7,8,9)\nprint(substract(tuple1, tuple2))",
      2.06640625
    ],
    [
      "def substract_tuple(tuple1, tuple2):\n    \"\"\"\n    Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    :type tuple1: tuple\n    :type tuple2: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(map(lambda x, y: x - y, tuple1, tuple2))\n\n# print substract_tuple((1, 2, 3), (1, 4, 5))\n# print substract_tuple((1, 2, 3), (2, 4, 5))\n# print substract_tuple((1, 2, 3), (3, 4, 5))\n# print substract_tuple((1, 2, 3), (1, 2, 3))",
      2.017578125
    ],
    [
      "# https://oj.leetcode.com/problems/subtract-two-integers/\n\nclass Solution(object):\n    def sub(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in xrange(len(a)):\n            res.append(a[i] - b[i])\n        return res\n\nclass Solution2(object):\n    def sub(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in xrange(len(a)):\n            res.append(a[i] - b[i])\n        return res",
      1.8662109375
    ],
    [
      "def substract(t1, t2):\n    \"\"\"\n    :type t1: tuple\n    :type t2: tuple\n    :rtype: tuple\n    \"\"\"\n    res = []\n    for i in range(len(t1)):\n        res.append(t1[i] - t2[i])\n    return tuple(res)\n\n\ndef main():\n    t1 = (1, 2, 3)\n    t2 = (4, 5, 6)\n    print(substract(t1, t2))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.564453125
    ],
    [
      "def substract(x, y):\n    return x[1:] - y[1:]\n\nclass Solution:\n    def substract(self, x, y):\n        \"\"\"\n        :type x: tuple\n        :type y: tuple\n        :rtype: tuple\n        \"\"\"\n        return x[1:] - y[1:]\n\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.substract((1,2,3),(1,3,4))\n    print sol.substract((1,2,3),(4,5,6))\n    print sol.substract((1,2,3),(1,2,3))",
      0.2081298828125
    ],
    [
      "# https://www.hackerrank.com/challenges/subtract-tuple/problem\n\ndef substract(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(t1[i] - t2[i])\n    return tuple(result)\n\nif __name__ == '__main__':\n    t1 = (1, 2, 3)\n    t2 = (4, 5, 6)\n    result = substract(t1, t2)\n    print(result)",
      0.1890869140625
    ],
    [
      "# https://www.hackerrank.com/challenges/tuple-difference/problem\n\ndef tuple_difference(t1, t2):\n    \"\"\"\n    :type t1: tuple\n    :type t2: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(x-y for x, y in zip(t1, t2))",
      0.18701171875
    ],
    [
      "from collections import namedtuple\n\ndef substract(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(a[i] - b[i] for i in range(len(a)))\n\nt = namedtuple(\"t\", \"a b c\")\n\nt1 = t(1, 2, 3)\nt2 = t(4, 5, 6)\n\nprint(substract(t1, t2))",
      0.185546875
    ],
    [
      "def substract(t1, t2):\n\tsubtracted = []\n\tfor i, val in enumerate(t1):\n\t\tsubtracted.append(val - t2[i])\n\treturn subtracted\n\ndef main():\n\tt1 = (1, 2, 3)\n\tt2 = (3, 2, 1)\n\tresult = substract(t1, t2)\n\tprint(result)\n\nif __name__ == '__main__':\n\tmain()",
      0.13671875
    ],
    [
      "# https://www.hackerrank.com/challenges/subtract-tuple/problem\n\ndef subtract(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(x-y for x, y in zip(a, b))\n\nif __name__ == '__main__':\n    a = tuple(int(i) for i in input().split())\n    b = tuple(int(i) for i in input().split())\n    print(subtract(a, b))",
      0.1292724609375
    ],
    [
      "tuple1 = (1,2,3,4)\ntuple2 = (3,4,5,6)\n\ndef subtract(tuple1, tuple2):\n    \"\"\"\n    tuple1 and tuple2 are two tuples, each with four elements.\n\n    Return a new tuple, which is the difference of the two tuples.\n    \"\"\"\n    return tuple(map(lambda a,b: a-b, tuple1, tuple2))\n\nprint subtract((1,2,3,4),(3,4,5,6))",
      0.035980224609375
    ],
    [
      "def substract(t1, t2):\n\t\"\"\"\n\tArgs:\n\t\tt1: tuple of numbers\n\t\tt2: tuple of numbers\n\tReturns:\n\t\ttuple of numbers\n\t\"\"\"\n\treturn tuple(map(lambda x, y: x - y, t1, t2))\n\nprint(substract((1, 2, 3), (3, 4, 5)))\nprint(substract((1, 2, 3), (2, 2, 2)))\nprint(substract((1, 2, 3), (2, 2, 2)))\nprint(substract((1, 2, 3), (2, 2, 2)))\nprint(substract((1, 2, 3), (2, 2, 2)))\nprint(substract((1, 2, 3), (2, 2, 2)))\nprint(substract((1, 2, 3), (2, 2, 2)))",
      -0.304443359375
    ],
    [
      "# https://www.hackerrank.com/challenges/tuple-subtraction/problem\n# https://www.hackerrank.com/challenges/tuple-subtraction/submissions/code/2748984\n# https://www.hackerrank.com/challenges/tuple-subtraction/submissions/code/2748984\n\ndef substract(t1, t2):\n    t1_indices = []\n    t2_indices = []\n    for i in range(0, len(t1)):\n        t1_indices.append(t1[i])\n    for i in range(0, len(t2)):\n        t2_indices.append(t2[i])\n    return t1_indices, t2_indices\n\n# t1 is tuple and t2 is int\ndef substract_tuple(t1, t2):\n    t1_indices = []\n    for i in range(0, len(t1)):\n        t1_indices.append(t1[i])\n    return t1_indices\n\n# t1 is tuple and t2 is int\ndef substract_index(t1, t2):\n    t1_indices = []\n    for i in range(0, len(t1)):\n        t1_indices.append(t1[i])\n    return t1_indices\n\ndef substract_index_tuple(t1, t2):\n    t1_indices = []\n    for i in range(0, len(t1)):\n        t1_indices.append(t1[i])\n    return t1_indices\n\ndef substract_index_tuple_2(t1, t2):\n    t1_indices = []\n    for i in range(0, len(t1)):\n        t1_indices.append(t1[i])\n    return t1_indices\n\ndef substract_tuple_2(t1, t2):\n    t1_indices = []\n    for i in range(0, len(t1)):\n        t1_indices",
      -0.3330078125
    ],
    [
      "def substract(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\nt1 = (1, 2, 3)\nt2 = (4, 5, 6)\n\nprint(substract(t1, 0, t2, 1))\nprint(substract(t1, 1, t2, 0))\nprint(substract(t1, 1, t2, 2))\nprint(substract(t1, 2, t2, 0))",
      -0.437255859375
    ],
    [
      "import numpy as np\n\ndef substract(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] - tuple2[i]\n    return tuple1\n\ndef substract2(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] - tuple2[i]\n    return tuple1\n\ndef substract3(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] - tuple2[i]\n    return tuple1\n\ndef substract4(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] - tuple2[i]\n    return tuple1\n\ndef substract5(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] - tuple2[i]\n    return tuple1\n\ndef substract6(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] - tuple2[i]\n    return tuple1\n\ndef substract7(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] - tuple2[i]\n    return tuple1\n\ndef substract8(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] - tuple2[i]\n    return tuple1\n\ndef substract9(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        tuple1[i] = tuple1[i] - tuple2[i]\n    return tuple1\n\ndef substract10(tuple1, tuple2):\n    for i in range(len(tuple1)):",
      -0.52392578125
    ],
    [
      "import unittest\n\n\ndef subtract(t1, t2):\n    return t1[0] - t2[0], t1[1] - t2[1]\n\n\nclass TestSubtract(unittest.TestCase):\n\n    def test_subtract(self):\n        self.assertEqual(subtract((1, 2), (3, 4)), (2, 2))\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.62109375
    ],
    [
      "def subtract(a, b):\n    return a[0] - b[0], a[1] - b[1]\n\n\na = [1, 2]\nb = [3, 4]\n\nprint(subtract(a, b))\n\n# Output:\n# (1, 2) - (3, 4) = (2, 0)",
      -0.68359375
    ],
    [
      "def substract(tuple1, tuple2):\n    \"\"\"\n    :type tuple1: tuple\n    :type tuple2: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(x - y for x, y in zip(tuple1, tuple2))\n\nif __name__ == \"__main__\":\n    tuple1 = (1, 2, 3, 4, 5, 6, 7)\n    tuple2 = (10, 20, 30, 40, 50, 60)\n    print(substract(tuple1, tuple2))",
      -0.68505859375
    ],
    [
      "def substract(a, b):\n    \"\"\"\n    :type a: tuple\n    :type b: tuple\n    :rtype: tuple\n    \"\"\"\n    return a[0] - b[0], a[1] - b[1]\n\n\nif __name__ == \"__main__\":\n    print(substract((1, 2), (3, 4)))\n    print(substract((1, 2), (1, 2)))\n    print(substract((1, 2), (1, 3)))",
      -0.751953125
    ],
    [
      "def subtraction(tuple1, tuple2):\n    return tuple1[1:] - tuple2[1:]\n\nif __name__ == '__main__':\n    tuple1 = (1, 2, 3)\n    tuple2 = (2, 3, 4)\n    print subtraction(tuple1, tuple2)",
      -0.85693359375
    ],
    [
      "#!/usr/bin/env python\n\ndef substract(t1, t2):\n    return t1[0] - t2[0], t1[1] - t2[1]\n\ndef main():\n    t1 = (1, 2)\n    t2 = (3, 4)\n    print substract(t1, t2)\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def subtract(a, b):\n    return a[0] - b[0], a[1] - b[1]\n\nif __name__ == \"__main__\":\n    a = (1, 2)\n    b = (3, 4)\n    print(subtract(a, b))\n    print(subtract(b, a))",
      -0.85693359375
    ],
    [
      "def sub(t1, t2):\n    return (t1[0] - t2[0], t1[1] - t2[1])\n\n\ndef test_sub():\n    assert sub((1, 2), (3, 4)) == (0, 0)\n    assert sub((1, 2), (1, 4)) == (0, 2)\n    assert sub((1, 2), (2, 4)) == (2, 0)\n    assert sub((1, 2), (3, 3)) == (0, 1)\n\n\nif __name__ == '__main__':\n    test_sub()",
      -0.85693359375
    ],
    [
      "import unittest\n\n\nclass TestSubtractTuple(unittest.TestCase):\n    def test_subtract(self):\n        self.assertEqual(subtract_tuple((2, 3, 4)), (1, 2, 3))\n\n    def test_subtract_error(self):\n        with self.assertRaises(ValueError):\n            subtract_tuple((3, 4, 5))\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def subOfTuples(self, tuples, index):\n        \"\"\"\n        :type tuples: List[List[int]]\n        :type index: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for t in tuples:\n            res.append(t[index] - t[index-1])\n        return res",
      -0.85791015625
    ],
    [
      "tuple1 = (1,2,3)\ntuple2 = (3,2,1)\n\ndef substract(tuple1,tuple2):\n    return tuple1[0]-tuple2[0], tuple1[1]-tuple2[1], tuple1[2]-tuple2[2]\n\nprint substract(tuple1,tuple2)",
      -0.85791015625
    ],
    [
      "tuple1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\ntuple2 = (1, 3, 5, 7, 9)\n\ndef subtraction(tuple1, tuple2):\n    return tuple(x-y for x, y in zip(tuple1, tuple2))\n\n\ndef test():\n    assert subtraction(tuple1, tuple2) == (8, 10, 12, 14, 16, 18, 20, 22, 24, 26)\n\nif __name__ == '__main__':\n    test()",
      -0.8583984375
    ],
    [
      "import sys\n\ndef sub(t1, t2):\n    \"\"\"Subtract the contents of two tuples t1 and t2.\"\"\"\n    return tuple(map(lambda x, y: x - y, t1, t2))\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    print(sub(tuple(map(int, sys.argv[1:3])), tuple(map(int, sys.argv[3:5]))))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/subtract-tuple\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\ntuple_1 = (1, 2, 3)\ntuple_2 = (2, 4, 6)\ntuple_3 = (2, 4, 6)\n\ndef subtract(tuple_1, tuple_2):\n    return tuple(map(lambda x, y: x - y, tuple_1, tuple_2))\n\nprint(subtract(tuple_1, tuple_2))",
      -0.8583984375
    ],
    [
      "class Solution:\n    def sub(self, a, b):\n        \"\"\"\n        :type a: tuple\n        :type b: tuple\n        :rtype: tuple\n        \"\"\"\n        return tuple([a[i] - b[i] for i in range(len(a))])\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    a = (1,2,3,4,5)\n    b = (3,2,1,5,4)\n    print(sol.sub(a,b))",
      -0.8583984375
    ],
    [
      "import random\nfrom collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b')\n\ndef subtract(t1, t2):\n    return Tuple(t1.a - t2.a, t1.b - t2.b)\n\ndef random_tuple(n=10):\n    return Tuple(*map(lambda x: random.randint(1, 10), range(n)))\n\nif __name__ == '__main__':\n    t1 = random_tuple()\n    t2 = random_tuple()\n    print(subtract(t1, t2))",
      -0.8583984375
    ],
    [
      "import unittest\nfrom collections import namedtuple\n\ndef subtract_tuple(t1, t2):\n    \"\"\"\n    :type t1: namedtuple\n    :type t2: namedtuple\n    :rtype: namedtuple\n    \"\"\"\n    return t1._replace(**{k: v for k, v in t2._asdict().items() if k not in t1._fields})\n\nclass TestSubtractTuple(unittest.TestCase):\n\n    def test_subtract_tuple(self):\n        t1 = namedtuple('t1', ['a', 'b'])\n        t2 = namedtuple('t2', ['c', 'd'])\n        self.assertEqual(subtract_tuple(t1(1, 2), t2(3, 4)), t1(0, 0))\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.8583984375
    ],
    [
      "# https://oj.leetcode.com/problems/subtract-two-integers/\n\nclass Solution:\n    # @param A, B: Two integer\n    # @return: A new integer\n    def subtract(self, A, B):\n        # Write your code here\n        result = 0\n        for i in range(0, len(A)):\n            result += A[i] - B[i]\n        return result\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.subtract( [1,2], [3,4] )\n    print solution.subtract( [3,4], [3,4] )\n    print solution.subtract( [3,4], [1,2] )\n    print solution.subtract( [1,2], [3,4] )",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {List[T]} a\n    # @param {List[T]} b\n    # @return {Tuple[T]}\n    def subtract(self, a, b):\n        if len(a)!= len(b):\n            return None\n        res = []\n        for i in range(len(a)):\n            res.append(a[i] - b[i])\n        return tuple(res)",
      -0.8583984375
    ],
    [
      "def sub_tuple(x, y):\n    x_list = list(x)\n    y_list = list(y)\n\n    for i in range(len(y_list)):\n        x_list[i] -= y_list[i]\n    return tuple(x_list)\n\ndef main():\n    x = (1, 2, 3, 4)\n    y = (1, 1, 1, 1)\n\n    print(sub_tuple(x, y))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def difference(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # time limit exceeded\n        if len(nums1) > len(nums2):\n            return nums1\n        # write your code here\n        ret = []\n        for i in xrange(len(nums1)):\n            if nums1[i] == nums2[i]:\n                ret.append(nums1[i])\n            else:\n                ret.append(nums1[i]-nums2[i])\n        return ret",
      -0.8583984375
    ],
    [
      "def sub_tuple(a, b):\n    return (a[0] - b[0], a[1] - b[1])\n\ndef sub_tuple2(a, b):\n    return (a[0] - b[0], a[1] - b[1], a[2] - b[2])\n\n# Test cases:\n\nprint(sub_tuple((1,2,3), (1,2,3)))\nprint(sub_tuple2((1,2,3), (1,2,3)))",
      -0.8583984375
    ],
    [
      "def subtract(a, b):\n\tc = a[:]\n\tfor i in range(len(a)):\n\t\tc[i] -= b[i]\n\treturn c\n\nif __name__ == \"__main__\":\n\ta = (1, 2, 3)\n\tb = (3, 1, 1)\n\tprint(subtract(a, b))",
      -0.8583984375
    ],
    [
      "def sub(t1, t2):\n    return t1[0] - t2[0], t1[1] - t2[1], t1[2] - t2[2]\n\ndef test_sub():\n    assert sub((1, 2, 3), (2, 3, 4)) == (0, -1, -2)\n\ndef main():\n    test_sub()\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import collections\n\nclass Solution:\n    def subtract(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i, v in enumerate(nums1):\n            if i < len(nums2):\n                result.append(v - nums2[i])\n            else:\n                result.append(v)\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums1 = [1,2,3]\n    nums2 = [1,2,3,4]\n    print s.subtract(nums1, nums2)",
      -0.85888671875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def subtract(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return nums1\n        ret = [0] * len(nums1)\n        for i in range(len(nums1)):\n            ret[i] = nums1[i] - nums2[i]\n        return ret\n\n\nif __name__ == \"__main__\":\n    Solution().subtract([1, 2, 3], [2, 1, 3])",
      -0.85888671875
    ],
    [
      "# Example\n#\n# tuple1 = (1,2,3)\n# tuple2 = (1,2,4)\n#\n# result = (1,2,3)\n# result = (1,2,4)\n#\n# result = (1,2,0)\n# result = (1,2,5)\n#\n# result = (1,0,3)\n# result = (1,5,3)\n#\n# result = (1,0,0)\n# result = (1,5,5)\n\ntuple1 = (1,2,3)\ntuple2 = (1,2,4)\n\nresult = tuple1\nresult = tuple1\n\nresult = tuple1\nresult = tuple2\n\nresult = tuple1\nresult = tuple2\nresult = tuple2\n\nresult = tuple1\nresult = tuple2\nresult = tuple2\nresult = tuple2",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def difference(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        for i in range(len(nums1)):\n            ans.append(nums1[i] - nums2[i])\n        return ans\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.difference([1, 2, 3], [2, 3, 4])\n    print sol.difference([1], [2, 3, 4])\n    print sol.difference([1, 2, 3, 4], [])",
      -0.85888671875
    ],
    [
      "import collections\n\ndef subtract_tuple(t1, t2):\n    \"\"\"\n    :type t1: collections.namedtuple\n    :type t2: collections.namedtuple\n    :rtype: collections.namedtuple\n    \"\"\"\n    return t1._replace(**dict(zip(t1._fields, [a - b for a, b in zip(t1, t2)])))\n\nif __name__ == \"__main__\":\n    t1 = collections.namedtuple('t1', 'a b c')\n    t2 = collections.namedtuple('t2', 'd e f')\n    t3 = collections.namedtuple('t3', 'g h i')\n    print(subtract_tuple(t1(1, 2, 3), t2(4, 5, 6)))\n    print(subtract_tuple(t1(1, 2, 3), t3(4, 5, 6)))",
      -0.85888671875
    ],
    [
      "def subtract(x,y):\n    if len(x)!= len(y):\n        return\n    for i in range(len(x)):\n        if x[i]!= y[i]:\n            return\n    return x\n\ndef main():\n    x = (1,2,3)\n    y = (3,2,1)\n    print(subtract(x,y))\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "class Solution:\n    # @return a tuple\n    def subtract(self, num1, num2):\n        \"\"\"\n        :type num1: List[int]\n        :type num2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ret = []\n        for i in range(len(num1)):\n            ret.append(num1[i] - num2[i])\n        return ret\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.subtract([1, 2, 3], [1, 2, 3])",
      -0.89599609375
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def subarray(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [i - j for i, j in zip(arr1, arr2)]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/subtract-two-arrays/solution/\n\n# 1ms 100%\nclass Solution {\n    public int[] subarray(int[] nums1, int[] nums2) {\n        int[] result = new int[nums1.length];\n        int i = 0;\n        int j = 0;\n        while (i < nums1.length && j < nums2.length) {\n            result[i] = nums1[i] - nums2[j];\n            i++;\n            j++;\n        }\n        return result;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public int[] subarray(int[] nums1, int[] nums2) {\n        int[] result = new int[nums1.length];\n        int i = 0;\n        int j = 0;\n        while (i < nums1.length && j < nums2.length) {\n            result[i] = nums1[i] - nums2[j];\n            i++;\n            j++;\n        }\n        return result;\n    }\n}\n'''",
      -1.07421875
    ],
    [
      "class Solution(object):\n    def difference(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i in range(len(A)):\n            result.append(A[i] - B[i])\n        return result\n\nclass Solution2(object):\n    def difference(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i in range(len(A)):\n            if A[i] < B[i]:\n                result.append(A[i])\n            else:\n                result.append(B[i] - A[i])\n        return result",
      -1.1337890625
    ],
    [
      "import collections\n\n\ndef subtract(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_2(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_3(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_4(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_5(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_6(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_7(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_8(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_9(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_10(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get_tuple_subtraction_11(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n\ndef get",
      -1.2607421875
    ],
    [
      "# https://www.hackerrank.com/challenges/subtract-tuple/problem\n\ndef substract(t1, t2):\n    return t1[0] - t2[0], t1[1] - t2[1], t1[2] - t2[2]\n\n\nt1 = (1, 2, 3)\nt2 = (2, 3, 4)\n\nsubtracted = substract(t1, t2)\n\nprint(subtracted)",
      -1.310546875
    ],
    [
      "from collections import defaultdict\n\ndef substract(tuple1, tuple2):\n    \"\"\"\n    :type tuple1: tuple\n    :type tuple2: tuple\n    :rtype: tuple\n    \"\"\"\n    if len(tuple1)!= len(tuple2):\n        raise ValueError(\"tuple size mismatch\")\n    return tuple(i - j for i, j in zip(tuple1, tuple2))\n\ndef substract_dict(dict1, dict2):\n    \"\"\"\n    :type dict1: dict\n    :type dict2: dict\n    :rtype: dict\n    \"\"\"\n    result = defaultdict(int)\n    for key in dict1.keys():\n        result[key] = dict1[key] - dict2[key]\n    return result\n\ndef main():\n    tuple1 = (1, 2, 3, 4)\n    tuple2 = (5, 6, 7, 8)\n    print(substract(tuple1, tuple2))\n    print(substract_dict({1:2, 3:4}, {5:2, 7:4}))\n\nif __name__ == '__main__':\n    main()",
      -1.3994140625
    ],
    [
      "class Solution:\n    # @return a tuple\n    def subtract(self, nums1, nums2):\n        if not nums1:\n            return nums2\n        if not nums2:\n            return nums1\n        if len(nums1)!= len(nums2):\n            return nums1\n        res = []\n        for i in range(len(nums1)):\n            res.append(nums1[i] - nums2[i])\n        return res",
      -1.4833984375
    ],
    [
      "class Solution(object):\n    def getDifference(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = dp[i - 1][j] + nums1[i - 1] - nums2[j - 1]\n        return dp[n][m]\n\n\nif __name__ == \"__main__\":\n    assert Solution().getDifference([1, 2, 3], [2, 3, 4]) == 1",
      -1.515625
    ],
    [
      "class Solution(object):\n    def subtract(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if len(nums1)!= len(nums2):\n            return []\n\n        res = [0] * len(nums1)\n        for i in range(len(nums1)):\n            res[i] = nums1[i] - nums2[i]\n\n        return res",
      -1.5185546875
    ],
    [
      "# https://www.hackerrank.com/challenges/subtract-tuple-from-itself/problem\n\nimport unittest\n\ndef sub_tuple(tuple_1, tuple_2):\n    return tuple(map(lambda x: tuple_1[x] - tuple_2[x], range(0, len(tuple_1))))\n\ndef main():\n    tuple_1 = (1,2,3,4,5)\n    tuple_2 = (2,3,4,5,6)\n    result = sub_tuple(tuple_1, tuple_2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n    unittest.main()",
      -1.5693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/tuple-subtraction/problem\n\nimport unittest\n\n\ndef tuple_subtraction(t1, t2):\n    return tuple([x - y for x, y in zip(t1, t2)])\n\n\nclass TestTupleSubtraction(unittest.TestCase):\n    def test_tuple_subtraction(self):\n        t1 = (1, 2, 3)\n        t2 = (4, 5, 6)\n        self.assertEqual(tuple_subtraction(t1, t2), (3, 4, 5))\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -1.59765625
    ],
    [
      "class Solution(object):\n    def sub(self, t1, t2):\n        \"\"\"\n        :type t1: tuple\n        :type t2: tuple\n        :rtype: tuple\n        \"\"\"\n        return tuple([x-y for x, y in zip(t1, t2)])\n\nif __name__ == \"__main__\":\n    assert Solution().sub((1, 2, 3), (2, 3, 4)) == (0, 1, 2)\n    assert Solution().sub((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\n    assert Solution().sub((1, 2, 3), (1, 3, 4)) == (0, 1, 2)\n    assert Solution().sub((1, 2, 3), (2, 3, 4)) == (1, 2, 3)\n    assert Solution().sub((1, 2, 3), (3, 4, 5)) == (1, 2, 3)\n    assert Solution().sub((1, 2, 3), (3, 4, 5, 6)) == (1, 2, 3)",
      -1.76171875
    ],
    [
      "def substract_tuple(tuple1, tuple2):\n    return tuple1[:tuple1.index(tuple2)] + tuple1[tuple1.index(tuple2) + 1:]\n\n\ndef test_substract_tuple():\n    assert substract_tuple((1, 2, 3), (2, 3, 4)) == (1, 2)\n    assert substract_tuple((1, 2, 3), (2, 3, 5)) == (1, 2, 3)\n\n\n# Your substract_tuple function should also work for tuples of different size.",
      -1.8515625
    ],
    [
      "# https://leetcode.com/problems/subtract-two-numbers/discuss/1350/10-lines-python-implementation\n\nclass Solution(object):\n    def diff(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.diff([1,2,3,4,5], [3,4,5,6,7]))",
      -2.109375
    ],
    [
      "import unittest\nfrom pprint import pprint\n\nclass TestSubtract(unittest.TestCase):\n\n    def test_subtract(self):\n        self.assertEqual(subtract(('a', 1), ('b', 2)), ('a', 0))\n        self.assertEqual(subtract(('a', 1), ('a', 1)), ('a', 0))\n        self.assertEqual(subtract(('a', 1), ('b', 1)), ('a', -1))\n        self.assertEqual(subtract(('a', 1), ('a', 2)), ('a', -1))\n\ndef subtract(t1, t2):\n    \"\"\"Subtract the contents of one tuple with corresponding index of other tuple.\n    :param t1: tuple\n    :param t2: tuple\n    :return: tuple\n    \"\"\"\n    result = []\n    for i, (c1, c2) in enumerate(zip(t1, t2)):\n        result.append(c1 - c2)\n    return tuple(result)\n\nif __name__ == '__main__':\n    unittest.main()",
      -2.248046875
    ],
    [
      "class TupleSubtraction(object):\n    def __init__(self, tuple1, tuple2):\n        self.tuple1 = tuple1\n        self.tuple2 = tuple2\n\n    def get_subtracted_value(self):\n        for i in range(len(self.tuple1)):\n            if self.tuple1[i] == self.tuple2[i]:\n                continue\n            else:\n                return self.tuple1[i]\n        return None\n\n\nif __name__ == '__main__':\n    tuple1 = (1, 2, 3)\n    tuple2 = (1, 3, 4)\n    obj = TupleSubtraction(tuple1, tuple2)\n    print(obj.get_subtracted_value())",
      -2.32421875
    ],
    [
      "#!/usr/bin/env python\n\n# -*- coding: utf-8 -*-\n\n# Answered by Yu Xiang\n# Updated by Yu Xiang on 2/20/2016\n\nclass Solution(object):\n    def subtract(self, num1, num2):\n        \"\"\"\n        :type num1: List[int]\n        :type num2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [num1[i] - num2[i] for i in range(len(num1))]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.subtract([2,1,3,4,5,6,0], [1,2,3,4,5,6,0])",
      -2.619140625
    ],
    [
      "class Solution:\n    # @param {Tuple[]} tuples\n    # @return {Tuple[]}\n    def subtract(self, tuples):\n        res = []\n        for i in xrange(len(tuples)):\n            for j in xrange(len(tuples)):\n                if i!= j:\n                    res.append((tuples[i][0] - tuples[j][0], tuples[i][1] - tuples[j][1]))\n        return res",
      -2.7421875
    ],
    [
      "# https://oj.leetcode.com/problems/subtract-two-integers/\n\nclass Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @return {integer[]}\n    def subtract(self, nums1, nums2):\n        nums1.sort()\n        nums2.sort()\n        return self.subtract_helper(nums1, nums2)\n\n    def subtract_helper(self, nums1, nums2):\n        nums1.sort()\n        nums2.sort()\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    nums1 = [1,2,3]\n    nums2 = [1,2]\n    nums1 = [2,1,1,1]\n    nums2 = [1,2,1]\n    nums1 = [1,3,3]\n    nums2 = [1,3,3]\n    nums1 = [3,3,3,3]\n    nums2 = [3,3,3,3]\n    nums1 = [1,1,1,1,1,1,1,1,1]\n    nums2 = [1,1,1,1,1,1,1,1,1]\n    nums1 = [1,2,3,4,5,6,7,8,9]\n    nums2 = [1,2,3,4,5,6,7,8,9]\n    print(solution.subtract(nums1, nums2))",
      -3.17578125
    ],
    [
      "def sub(t1, t2):\n    for i in range(len(t1)):\n        t1[i] = t1[i] - t2[i]\n    return t1\n\n# test cases\n\nt1 = [1, 2, 3]\nt2 = [1, 1, 2]\nprint(sub(t1, t2))\nt1 = [1, 2, 3]\nt2 = [1, 2, 1]\nprint(sub(t1, t2))\nt1 = [1, 2, 3]\nt2 = [1, 1, 3]\nprint(sub(t1, t2))",
      -3.369140625
    ],
    [
      "def subtraction(tuple1, tuple2):\n    '''\n    tuple1 and tuple2 are two tuples,\n    return the new tuple containing the result of subtraction.\n    '''\n    return tuple(x-y for x, y in zip(tuple1, tuple2))\n\nif __name__ == '__main__':\n    tuple1 = (1, 2, 3)\n    tuple2 = (4, 5, 6)\n    print(subtraction(tuple1, tuple2))",
      -3.591796875
    ],
    [
      "# https://leetcode.com/problems/subtract-two-numbers/discuss/115072/Python-Python-Solution-using-C-with-nested-for-loops\n\nfrom collections import namedtuple\n\nTuple = namedtuple('Tuple', 'x y')\n\nclass Solution(object):\n    def subtract(self, tuple1, tuple2):\n        \"\"\"\n        :type tuple1: Tuple\n        :type tuple2: Tuple\n        :rtype: Tuple\n        \"\"\"\n        x = tuple1.x - tuple2.x\n        y = tuple1.y - tuple2.y\n        return Tuple(x, y)\n\n    def subtract2(self, tuple1, tuple2):\n        \"\"\"\n        :type tuple1: Tuple\n        :type tuple2: Tuple\n        :rtype: Tuple\n        \"\"\"\n        x = tuple1[0] - tuple2[0]\n        y = tuple1[1] - tuple2[1]\n        return Tuple(x, y)\n\n    def subtract3(self, tuple1, tuple2):\n        \"\"\"\n        :type tuple1: Tuple\n        :type tuple2: Tuple\n        :rtype: Tuple\n        \"\"\"\n        x = tuple1[0] - tuple2[0]\n        y = tuple1[1] - tuple2[1]\n        return Tuple(x, y)",
      -3.736328125
    ],
    [
      "def substract(a, b):\n    if a == None:\n        return b\n    else:\n        return (a[0] - b[0], a[1] - b[1])\n\nprint(substract((1, 2), (3, 4)))\n\n\"\"\"\nOutput:\n((1, 2), (3, 4))\n\"\"\"",
      -3.90234375
    ],
    [
      "t1 = (1,2,3)\nt2 = (2,3,4)\n\ndef sub(t1, t2):\n    return (t1[0]-t2[0], t1[1]-t2[1], t1[2]-t2[2])\n\nprint sub(t1, t2)\n\nt3 = (1,2,3)\nt4 = (2,3,4)\n\ndef sub2(t3, t4):\n    return (t3[0]-t4[0], t3[1]-t4[1], t3[2]-t4[2])\n\nprint sub2(t3, t4)\n\nt5 = (1,2,3)\nt6 = (2,3,4)\n\ndef sub3(t5, t6):\n    return (t5[0]-t6[0], t5[1]-t6[1], t5[2]-t6[2])\n\nprint sub3(t5, t6)\n\nt7 = (1,2,3)\nt8 = (2,3,4)\n\ndef sub4(t7, t8):\n    return (t7[0]-t8[0], t7[1]-t8[1], t7[2]-t8[2])\n\nprint sub4(t7, t8)",
      -4.28515625
    ],
    [
      "tuple_1 = (1, 2, 3)\ntuple_2 = (4, 5, 6)\n\ndef substract_tuple(tuple_1, tuple_2):\n    return tuple_1[:2] - tuple_2[:2]\n\nprint(substract_tuple(tuple_1, tuple_2))",
      -4.33203125
    ],
    [
      "class TupleSubtraction:\n    def __init__(self, tuple1, tuple2):\n        self.tuple1 = tuple1\n        self.tuple2 = tuple2\n\n    def get_subtraction(self):\n        subtraction = [0] * len(self.tuple2)\n        for i in range(len(self.tuple1)):\n            subtraction[self.tuple2[i]] = self.tuple1[i]\n        return subtraction\n\n    def get_tuple(self):\n        return self.tuple1\n\n    def get_tuple2(self):\n        return self.tuple2\n\n\nt1 = (1,2,3,4,5,6)\nt2 = (4,5,6,7,8,9)\n\nt1_subtraction = TupleSubtraction(t1,t2)\nprint(t1_subtraction.get_subtraction())\nprint(t1_subtraction.get_tuple())\nprint(t1_subtraction.get_tuple2())",
      -4.515625
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def getDifference(self, t1, t2):\n        \"\"\"\n        :type t1: tuple\n        :type t2: tuple\n        :rtype: tuple\n        \"\"\"\n        return tuple(map(lambda x: t1[x] - t2[x], range(len(t1))))\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/subtract-two-tuples/solution/\n\n# 1ms 100%\nclass Solution {\n    public int[] getDifference(int[] t1, int[] t2) {\n        int[] result = new int[t1.length];\n        for (int i = 0; i < t1.length; i++) {\n            result[i] = t1[i] - t2[i];\n        }\n        return result;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int[] getDifference(int[] t1, int[] t2) {\n        int[] result = new int[t1.length];\n        for (int i = 0; i < t1.length; i++) {\n            result[i] = t1[i] - t2[i];\n        }\n        return result;\n    }\n}\n'''",
      -4.5625
    ],
    [
      "import unittest\n\nclass TestSubtractTuple(unittest.TestCase):\n\n    def test_subtract_tuple(self):\n        self.assertEqual(subtract_tuple((1,2,3), (3,4,5)), (2,3))\n\n    def test_subtract_tuple_with_negative_index(self):\n        self.assertEqual(subtract_tuple((1,2,3), (3,4,5)), (1,2))\n\n    def test_subtract_tuple_with_index_out_of_bound(self):\n        self.assertEqual(subtract_tuple((1,2,3), (3,4,5)), (1,2))\n\n    def test_subtract_tuple_with_tuple_out_of_bound(self):\n        self.assertEqual(subtract_tuple((1,2,3), (3,4,5)), (1,2))\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -4.60546875
    ],
    [
      "import unittest\nimport timeit\n\nfrom solution import substract_tuple\n\n\nclass Test(unittest.TestCase):\n    def test_my_tests(self):\n        # self.assertEqual(substract_tuple([3, 4, 2, 1, 6]), [3, 4, 7, 6, 2])\n        self.assertEqual(substract_tuple([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n        self.assertEqual(substract_tuple([4, 2, 3, 1, 5]), [4, 2, 3, 4, 5])\n        self.assertEqual(substract_tuple([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n        self.assertEqual(substract_tuple([1, 2, 3, 4, 5, 6]), [1, 2, 3, 4, 5, 6])\n        self.assertEqual(substract_tuple([1, 2, 3, 4, 5, 6, 7]), [1, 2, 3, 4, 5, 6, 7])\n\n    def test_time_complexity(self):\n        self.assertEqual(substract_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,",
      -4.83984375
    ],
    [
      "# https://www.hackerrank.com/challenges/tuple-subtraction/problem\n# https://www.hackerrank.com/challenges/tuple-subtraction/submissions/code/8241085\n\ntuple1 = (1, 2, 3)\ntuple2 = (4, 5, 6)\n\ndef tuple_subtraction(tuple1, tuple2):\n    '''\n    tuple_subtraction(tuple1, tuple2) -> tuple\n    tuple_subtraction(tuple2, tuple1) -> tuple\n    '''\n    if not tuple1 or not tuple2:\n        return (0, 0, 0)\n    elif tuple1 == tuple2:\n        return tuple1\n    else:\n        return tuple1[0] - tuple2[0], tuple1[1] - tuple2[1], tuple1[2] - tuple2[2]",
      -5.28515625
    ],
    [
      "# https://www.hackerrank.com/challenges/subtract-tuples/problem\n\ndef subtraction(t1, t2):\n    \"\"\"\n    Args:\n        t1 (tuple): tuple to be subtracted\n        t2 (tuple): tuple to be subtracted\n    Returns:\n        tuple: tuple of the difference between t1 and t2\n    \"\"\"\n    return tuple(map(lambda a, b: a - b, t1, t2))\n\nif __name__ == '__main__':\n    t1, t2 = map(int, input().split())\n    print(subtraction(t1, t2))",
      -5.51171875
    ],
    [
      "# https://www.hackerrank.com/challenges/subtract-tuple/problem\n\n# I am using a list as the input, so I can do the two-dimensional indexing\n# I am also using a list as the output, so I can do two-dimensional indexing\n\n# I am not using a list as the input, but I am using a tuple, which is a list\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing\n\n# I am using a list as the output, so I can use two-dimensional indexing\n\n# I am using a list as the input, so I can do two-dimensional indexing",
      -5.859375
    ],
    [
      "from collections import namedtuple\n\n# Your solution here.\n\nclass Tuple(namedtuple('Tuple', 'a, b, c')):\n    def __add__(self, other):\n        return Tuple(self.a + other.a, self.b + other.b, self.c + other.c)\n\ndef sub_tuple(tuple1, tuple2):\n    return Tuple(tuple1.a - tuple2.a, tuple1.b - tuple2.b, tuple1.c - tuple2.c)\n\nif __name__ == \"__main__\":\n    t1 = Tuple(1, 2, 3)\n    t2 = Tuple(3, 2, 1)\n    print(sub_tuple(t1, t2))",
      -6.26171875
    ],
    [
      "import collections\n\n# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def tupleSubtraction(self, A, B):\n        \"\"\"\n        :type A: List[Tuple]\n        :type B: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        # Write your code here\n        def get_index(a, b):\n            if a == b:\n                return a\n            else:\n                return -1\n        res = []\n        for i in xrange(len(A)):\n            if get_index(A[i].x, B[i].x) == -1:\n                res.append(A[i])\n            else:\n                res.append(B[i])\n        return res\n\n\na = Tuple(1)\nb = Tuple(2)\nA = [a, b]\nB = [a, b]\nprint Solution().tupleSubtraction(A, B)",
      -6.34765625
    ],
    [
      "from collections import namedtuple\n\nfrom utils.misc import read_data\n\n\ndef sub_tuple(tuple1, tuple2):\n    \"\"\"\n    :type tuple1: tuple\n    :type tuple2: tuple\n    :rtype: tuple\n    \"\"\"\n    return tuple(x - y for x, y in zip(tuple1, tuple2))\n\n\ndef main():\n    \"\"\"\n    Main entry of this module\n    \"\"\"\n    tuple_data = read_data()\n    tuple_1 = namedtuple('tuple1', 'a b c')\n    tuple_2 = namedtuple('tuple2', 'd e f')\n    tuple_3 = namedtuple('tuple3', 'g h i')\n    tuple_4 = namedtuple('tuple4', 'j k l')\n    tuple_5 = namedtuple('tuple5','m n o')\n    tuple_6 = namedtuple('tuple6', 'p q r s')\n\n    print(tuple_data)\n    print(tuple_1)\n    print(tuple_2)\n    print(tuple_3)\n    print(tuple_4)\n    print(tuple_5)\n    print(tuple_6)\n\n    print(sub_tuple(tuple_data[0], tuple_data[1]))\n    print(sub_tuple(tuple_data[2], tuple_data[3]))\n    print(sub_tuple(tuple_data[4], tuple_data[5]))\n    print(sub_tuple(tuple_data[6], tuple_data[7]))\n    print(sub_tuple(tuple_data[8], tuple_data[9]))\n\n\nif __name__ == '__main__':\n    main()",
      -6.47265625
    ],
    [
      "# https://www.hackerrank.com/challenges/subtract-tuple/problem\n\nimport unittest\n\ndef sub_tuple(a, b):\n    return a[0] - b[0], a[1] - b[1]\n\nclass Solution(object):\n    def sub_tuple(self, a, b):\n        \"\"\"\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return a[0] - b[0], a[1] - b[1]\n\nclass Solution2(object):\n    def sub_tuple(self, a, b):\n        return a[0] - b[0], a[1] - b[1]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/subtract-tuple/solution/\n#\nApproach 1: Subtracting two tuples\n# https://leetcode.com/problems/subtract-tuple/discuss/241688/Java-1-line-solution-with-explanation\n#\n# The problem is a bit different from the problem that we discussed in the previous\n# exercise. We have two lists a and b. Each list contains two integers, a and b.\n# The problem is to subtract b from a.\n#\n# Example 1:\n#\n# Input: a = [1,2], b = [3,4]\n# Output: [1,0]\n# Explanation:\n# [1,2] - [3,4] = [1,0]\n#\n# Example 2:\n#\n# Input: a = [1,2], b = [1,2]\n# Output: [1,0]\n# Explanation:\n# [1,2] - [1,2] = [0,0]\n#\n# Note:\n#\n# 1 <= a.length <= 100",
      -6.48046875
    ],
    [
      "import unittest\n\nclass Solution:\n    def sub(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [x-y for x,y in zip(A,B)]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/subtract-two-arrays/solution/\n\n# Approach 1: Sort\n# Complexity Analysis\n# Time Complexity: O(|A| + |B|)\n# Space Complexity: O(|A| + |B|)\n# Auxiliary Space: O(1)\n\n# Approach 2: Sort\n# Complexity Analysis\n# Time Complexity: O(|A| + |B|)\n# Space Complexity: O(|A| + |B|)\n# Auxiliary Space: O(1)\n\n# Approach 3: Sort\n# Complexity Analysis\n# Time Complexity: O(|A| + |B|)\n# Space Complexity: O(|A| + |B|)\n# Auxiliary Space: O(1)\n\n# Approach 4: Sort\n# Complexity Analysis\n# Time Complexity: O(|A| + |B|)\n# Space Complexity: O(|A| + |B|)\n# Auxiliary Space: O(1)\n\n# Approach 5: Sort\n# Complexity Analysis\n# Time Complexity: O(|A| + |B|)\n# Space Complexity: O(|A| + |B|)\n# Auxiliary Space: O(1)\n\n# Approach 6: Sort\n# Complexity Analysis\n# Time Complexity: O(|A| + |B|)\n# Space Complexity: O(|A| + |B|)\n# Auxiliary Space: O(1)\n\n# Approach 7: Sort\n# Complexity Analysis\n# Time Complexity: O(|A| + |B|",
      -6.91015625
    ],
    [
      "def tuple_subtraction(t1, t2):\n    return (t1[0] - t2[0], t1[1] - t2[1])\n\ndef tuple_subtraction_with_index(t1, t2):\n    return (t1[0] - t2[0], t1[1] - t2[1], t1[2] - t2[2])\n\nt1 = (1, 2)\nt2 = (3, 4)\n\nprint tuple_subtraction(t1, t2)\nprint tuple_subtraction_with_index(t1, t2)",
      -7.13671875
    ],
    [
      "def substract(tuple1, tuple2):\n    return tuple1[1:] - tuple2[1:]\n\ndef substract_from_index(tuple1, index1, tuple2, index2):\n    return tuple1[index1] - tuple2[index2]\n\n#print substract((1,2,3,4), (2,3,4,5))\n#print substract_from_index((1,2,3,4), 1, (2,3,4,5), 2)\n\n\"\"\"\nWrite a function to substract the contents of two lists.\n\"\"\"\n\ndef substract_lists(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n#print substract_lists([1,2,3,4], [2,3,4,5])\n#print substract_lists([1,2,3,4], [2,3,4,5,6])\n\n\"\"\"\nWrite a function to substract the contents of two tuples.\n\"\"\"\n\ndef substract_tuples(tuple1, tuple2):\n    return tuple1[1:] - tuple2[1:]\n\n#print substract_tuples((1,2,3,4), (2,3,4,5))\n#print substract_tuples((1,2,3,4), (2,3,4,5,6))\n\n\"\"\"\nWrite a function to substract the contents of two lists of index.\n\"\"\"\n\ndef substract_lists_of_index(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n#print substract_lists_of_index([1,2,3,4], [2,3,4,5])\n#print substract_lists_of_index([1,2,3,4], [2,3,4,5,6])\n\n\"\"\"\nWrite a function to substract the contents of two tuples of index.\n\"\"\"\n\ndef substract_tuples_of_index(tuple1, tuple2):\n    return tuple1[1:] - tuple2[1:]\n\n#print substract_tuples_of_index((1",
      -7.36328125
    ],
    [
      "# Example\n# tuple1 = ('a', 'b', 'c')\n# tuple2 = ('a', 'b', 'c')\n# tuple3 = ('d', 'e', 'f')\n# tuple4 = ('a', 'b', 'c')\n# tuple5 = ('a', 'd', 'e')\n# tuple6 = ('a', 'e', 'f')\n# tuple7 = ('a', 'b', 'd')\n# tuple8 = ('a', 'b', 'c')\n# tuple9 = ('a', 'b', 'c')\n\n# tuple10 = ('a', 'b', 'c')\n# tuple11 = ('a', 'b', 'c')\n# tuple12 = ('a', 'b', 'c')\n# tuple13 = ('a', 'b', 'c')\n# tuple14 = ('a', 'b', 'c')\n# tuple15 = ('a', 'b', 'c')\n# tuple16 = ('a', 'b', 'c')\n# tuple17 = ('a', 'b', 'c')\n\ndef substract(tuple1, tuple2):\n    tuple1 = tuple(tuple1)\n    tuple2 = tuple(tuple2)\n    return tuple(x for x in tuple1 if x not in tuple2)\n\n\ndef substract2(tuple1, tuple2):\n    tuple1 = tuple(tuple1)\n    tuple2 = tuple(tuple2)\n    return tuple(x for x in tuple1 if x not in tuple2)\n\n\nif __name__ == '__main__':\n    tuple1 = ('a', 'b', 'c')\n    tuple2 = ('a', 'b', 'c')\n    tuple3 = ('d', 'e', 'f')\n    tuple4 = ('a', 'b', 'c')\n    tuple5 = ('a', 'd', 'e')\n    tuple6 = ('a', 'e', 'f')\n    tuple7 = ('a', 'b', 'd')\n    tuple8 = ('a', 'b', 'c')\n    tuple9 = ('a', 'b', 'c')\n\n    tuple10 = ('a', 'b',",
      -8.8828125
    ],
    [
      "# https://oj.leetcode.com/problems/subtract-two-integers/\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param l1, a list node\n    # @param l2, a list node\n    # @return a list node\n    def subtract(self, l1, l2):\n        dummy = ListNode(0)\n        dummy.next = l1\n        head = dummy\n        while l1 is not None and l2 is not None:\n            if l1.val < l2.val:\n                l1 = l1.next\n            elif l1.val > l2.val:\n                l2 = l2.next\n            else:\n                l1.val = l1.val - l2.val\n                l1 = l1.next\n                l2 = l2.next\n        if l1 is not None:\n            head.next = l1\n        else:\n            head.next = l2\n        return dummy.next",
      -9.5390625
    ],
    [
      "#!/usr/bin/env python\n\nimport random\nimport time\nimport sys\n\nif len(sys.argv) < 3:\n    print \"Usage: %s <tuple_1> <tuple_2>\" % sys.argv[0]\n    sys.exit(1)\n\n# tuple1 is the tuple to be subtracted\ntuple1 = tuple(map(int, sys.argv[1].split(',')))\n# tuple2 is the tuple to be subtracted from tuple1\ntuple2 = tuple(map(int, sys.argv[2].split(',')))\n\n# print tuple1\nprint \"tuple1:\", tuple1\n\n# print tuple2\nprint \"tuple2:\", tuple2\n\n# print tuple1 - tuple2\nfor i in range(len(tuple1)):\n    tuple1[i] -= tuple2[i]\nprint \"tuple1 - tuple2:\", tuple1\n\n# print tuple1 - tuple2\n# for i in range(len(tuple1)):\n#     tuple1[i] -= tuple2[i]\n# print tuple1\n\n# print tuple1 - tuple2\nfor i in range(len(tuple2)):\n    tuple1[i] -= tuple2[i]\nprint \"tuple1 - tuple2:\", tuple1\n\n# print tuple1 - tuple2\nfor i in range(len(tuple1)):\n    tuple1[i] -= tuple2[i]\nprint \"tuple1 - tuple2:\", tuple1\n\n# print tuple1 - tuple2\nfor i in range(len(tuple2)):\n    tuple1[i] -= tuple2[i]\nprint \"tuple1 - tuple2:\", tuple1\n\n# print tuple1 - tuple2\nfor i in range(len(tuple1)):\n    tuple1[i] -= tuple2[i]\nprint \"tuple1 - tuple2:\", tuple1\n\n# print tuple1 - tuple2\nfor i in range(len(tuple2)):\n    tuple1[i] -= tuple2[i]\nprint \"tuple1 - tuple2:\", tuple1\n\n# print tuple",
      -10.8828125
    ],
    [
      "from collections import namedtuple\n\ndef substract_tuple(a_tuple, b_tuple):\n    \"\"\"\n    :type a_tuple: namedtuple\n    :type b_tuple: tuple\n    :rtype: namedtuple\n    \"\"\"\n    return namedtuple('result', a_tuple._fields)\n\ndef main():\n    a_tuple = namedtuple('a_tuple', 'a b c')\n    b_tuple = namedtuple('b_tuple', 'a b c')\n    print(substract_tuple(a_tuple(1, 2, 3), b_tuple(1, 2, 3)))\n    print(substract_tuple(a_tuple(1, 2, 3), b_tuple(2, 3, 4)))\n\nif __name__ == '__main__':\n    main()",
      -10.9765625
    ],
    [
      "class TupleSubtraction(object):\n    def __init__(self):\n        self.tuple1 = ()\n        self.tuple2 = ()\n\n    def subtract(self, tuple1, tuple2):\n        \"\"\"\n        Subtract the contents of tuple1 with corresponding index of tuple2.\n        :rtype: tuple\n        \"\"\"\n        for i in range(0, len(tuple1)):\n            self.tuple1[i] -= tuple2[i]\n        return self.tuple1\n\n    def getTuple(self):\n        return self.tuple1\n\n\nif __name__ == '__main__':\n    t1 = TupleSubtraction()\n    t2 = TupleSubtraction()\n    t1.tuple1 = (1, 2, 3)\n    t2.tuple2 = (4, 5, 6)\n    t1.subtract(t1.tuple1, t2.tuple2)\n    print(t1.tuple1)\n    print(t2.tuple2)",
      -11.109375
    ],
    [
      "# Example 1:\n# Input:\n# t1 = (1, 2, 3), t2 = (3, 2, 1)\n# Output:\n# (2, 1, 3)\n# Example 2:\n# Input:\n# t1 = (1, 2, 3), t2 = (4, 5, 6)\n# Output:\n# (3, 2, 1)\n\nclass Solution(object):\n    def subArray(self, t1, t2):\n        \"\"\"\n        :type t1: List[int]\n        :type t2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not t1 or not t2:\n            return []\n        res = []\n        t1.sort()\n        t2.sort()\n        i = 0\n        j = 0\n        while i < len(t1) and j < len(t2):\n            if t1[i] == t2[j]:\n                res.append(t1[i])\n                i += 1\n                j += 1\n            elif t1[i] < t2[j]:\n                res.append(t1[i])\n                i += 1\n            else:\n                res.append(t2[j])\n                j += 1\n        return res",
      -11.328125
    ],
    [
      "from collections import namedtuple\n\n# Sample Input\n# ((1, 2, 3), (2, 3, 4))\n# ((3, 4, 5), (1, 2, 3))\n# Sample Output\n# ((2, 1, 4), (4, 3, 2))\n\ndef substract(first_tuple, second_tuple):\n    return namedtuple('substracted_tuple', first_tuple._fields + second_tuple._fields)(*(v1 - v2 for v1, v2 in zip(first_tuple, second_tuple)))\n\ntuple_1 = (1, 2, 3)\ntuple_2 = (2, 3, 4)\n\nsubtracted_tuple = substract(tuple_1, tuple_2)\nprint(subtracted_tuple)",
      -11.765625
    ],
    [
      "# https://www.hackerrank.com/challenges/subtract-two-tuples/problem\n\ntuple1 = (1,2,3)\ntuple2 = (4,5,6)\n\ntuple1_index = 0\ntuple2_index = 0\n\ntuple1_contents = tuple1[tuple1_index]\ntuple2_contents = tuple2[tuple2_index]\n\nprint(\"tuple1_contents\", tuple1_contents)\nprint(\"tuple2_contents\", tuple2_contents)\n\nwhile tuple1_index < len(tuple1) and tuple2_index < len(tuple2):\n    print(\"tuple1_contents\", tuple1_contents)\n    print(\"tuple2_contents\", tuple2_contents)\n    if tuple1_contents > tuple2_contents:\n        tuple1_contents -= tuple2_contents\n        tuple1_index += 1\n    else:\n        tuple2_contents -= tuple1_contents\n        tuple2_index += 1\n\nprint(\"tuple1_contents\", tuple1_contents)\nprint(\"tuple2_contents\", tuple2_contents)\nprint(\"tuple1_index\", tuple1_index)\nprint(\"tuple2_index\", tuple2_index)\n\nif tuple1_index < len(tuple1):\n    tuple1_contents = tuple1[tuple1_index]\n\nif tuple2_index < len(tuple2):\n    tuple2_contents = tuple2[tuple2_index]\n\nprint(\"tuple1_contents\", tuple1_contents)\nprint(\"tuple2_contents\", tuple2_contents)\n\nwhile tuple1_index < len(tuple1):\n    print(\"tuple1_contents\", tuple1_contents)\n    tuple1_contents -= tuple2_contents\n    tuple1_index += 1\n\nwhile tuple2_index < len(tuple2):\n    print(\"tuple2_contents\", tuple2_contents)\n    tuple2_contents -=",
      -11.9296875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def substract(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        d = {}\n        while l1:\n            d[l1.val] = l1.val\n            l1 = l1.next\n\n        while l2:\n            d[l2.val] = l2.val\n            l2 = l2.next\n\n        result = []\n        for i in d:\n            result.append(d[i])\n\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    l1 = ListNode(1)\n    l1.next = ListNode(2)\n    l1.next.next = ListNode(3)\n    l1.next.next.next = ListNode(4)\n\n    l2 = ListNode(4)\n    l2.next = ListNode(5)\n    l2.next.next = ListNode(6)\n    l2.next.next.next = ListNode(7)\n\n    print(sol.substract(l1, l2))",
      -13.6796875
    ],
    [
      "import copy\n\nclass Solution(object):\n    def update(self, src, dst, index):\n        \"\"\"\n        :type src: List[int]\n        :type dst: List[int]\n        :type index: int\n        :rtype: List[int]\n        \"\"\"\n        src_len = len(src)\n        dst_len = len(dst)\n        if src_len!= dst_len:\n            return None\n        \n        if src_len == 0:\n            return copy.copy(dst)\n        \n        src_index = 0\n        dst_index = 0\n        new_dst = []\n        while src_index < src_len and dst_index < dst_len:\n            if src[src_index] < dst[dst_index]:\n                new_dst.append(src[src_index])\n                src_index += 1\n            elif src[src_index] > dst[dst_index]:\n                dst_index += 1\n            else:\n                new_dst.append(dst[dst_index])\n                src_index += 1\n                dst_index += 1\n        \n        if src_index < src_len:\n            new_dst.extend(src[src_index:])\n        if dst_index < dst_len:\n            new_dst.extend(dst[dst_index:])\n        return new_dst",
      -14.25
    ],
    [
      "#!/bin/python\n\ndef sub(a,b):\n    if len(a)!= len(b):\n        return -1\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return -1\n        else:\n            return 0\n\nprint(sub([1,2,3,4,5], [1,2,3,4,5]))\nprint(sub([1,2,3,4,5], [1,2,3,4,6]))\nprint(sub([1,2,3,4,5], [1,2,3,4,7]))\nprint(sub([1,2,3,4,5], [1,2,3,4,8]))\nprint(sub([1,2,3,4,5], [1,2,3,4,9]))\nprint(sub([1,2,3,4,5], [1,2,3,4,10]))\nprint(sub([1,2,3,4,5], [1,2,3,4,11]))\nprint(sub([1,2,3,4,5], [1,2,3,4,12]))",
      -14.25
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __repr__(self):\n        return str(self.x)\n\n    def __eq__(self, other):\n        return self.x == other.x\n\n\nclass Solution(object):\n    def subTuple(self, t1, t2):\n        \"\"\"\n        :type t1: Tuple\n        :type t2: Tuple\n        :rtype: Tuple\n        \"\"\"\n        if t1.y!= t2.y:\n            return Tuple(0)\n        t1.y = t1.y - t2.y\n        return t1\n\nif __name__ == \"__main__\":\n    s = Solution()\n    t1 = Tuple(1)\n    t2 = Tuple(2)\n    t3 = Tuple(3)\n    t4 = Tuple(4)\n    t5 = Tuple(5)\n    t6 = Tuple(6)\n    print(s.subTuple(t1, t2))\n    print(s.subTuple(t1, t3))\n    print(s.subTuple(t1, t4))\n    print(s.subTuple(t1, t5))\n    print(s.subTuple(t1, t6))",
      -14.3359375
    ],
    [
      "# https://leetcode.com/problems/subtract-the-contents-of-two-tuples/\n# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __add__(self, other):\n        self.x += other.x\n        self.y += other.y\n        return self\n\n\nclass Solution(object):\n    def subtraction(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[Tuple]\n        :type nums2: List[Tuple]\n        :rtype: List[Tuple]\n        \"\"\"\n        dic = {}\n        for i in range(len(nums1)):\n            dic[nums1[i]] = i\n        for i in range(len(nums2)):\n            dic[nums2[i]] = i + len(nums1)\n\n        res = []\n        for i in nums1:\n            res.append(Tuple(i[0] - dic[i[1]]))\n        return res",
      -16.234375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}