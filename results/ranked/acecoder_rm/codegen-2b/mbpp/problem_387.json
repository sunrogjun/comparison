{
  "problem": {
    "task_id": "MBPP/398",
    "prompt": "Write a function to compute the sum of digits of each number of a given list.",
    "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
    "test_list": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ],
    "challenge_test_list": [],
    "problem_id": 387
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def sumDigits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for num in numbers:\n        result += num\n    return result",
      1.818359375
    ],
    [
      "import math\n\ndef sum_digits(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(len(nums)):\n        sum += int(math.ceil(math.log10(nums[i])))\n    return sum",
      1.134765625
    ],
    [
      "def sumDigits(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(map(int, map(str, lst)))\n\nif __name__ == '__main__':\n    assert sumDigits([3, 4, 5, 6, 7, 8, 9]) == 27\n    assert sumDigits([1, 1, 1, 1, 1]) == 1\n    assert sumDigits([1, 2, 3, 4]) == 6\n    assert sumDigits([1, 2, 3, 4, 5]) == 10\n    assert sumDigits([1, 2, 3, 4, 5, 6]) == 15\n    assert sumDigits([1, 2, 3, 4, 5, 6, 7]) == 21\n    assert sumDigits([1, 2, 3, 4, 5, 6, 7, 8]) == 28\n    assert sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 36\n    assert sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45\n    assert sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 55\n    assert sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 66\n    assert sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 78\n    assert sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 91\n    assert sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 106",
      0.884765625
    ],
    [
      "def digits_sum(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [sum(map(int, str(n))) for n in numbers]",
      0.133056640625
    ],
    [
      "from collections import Counter\n\ndef sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    counter = Counter()\n    for n in numbers:\n        counter.update(str(n))\n\n    return [int(i) for i in counter.values() if i > 0]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]\n    print(sum_digits(numbers))",
      -0.042755126953125
    ],
    [
      "# https://leetcode.com/problems/sum-of-digits/\n\nclass Solution(object):\n    def sumOfDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return sum([int(nums[i]) for i in xrange(len(nums)) if int(nums[i]) > 0])",
      -0.05859375
    ],
    [
      "import math\n\n\ndef sum_digits(num_list):\n    \"\"\"\n    :type num_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = 0\n    for num in num_list:\n        res += math.floor(num)\n    return res\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(sum_digits(nums))",
      -0.26171875
    ],
    [
      "# https://leetcode.com/problems/count-digits-of-a-number/\n# Given an integer n, return the number of digits of n.\n#\n# Example 1:\n# Input: n = 32\n# Output: 5\n# Explanation: 32 = 123\n# Example 2:\n# Input: n = 5\n# Output: 2\n# Explanation: 5 = 15\n# Example 3:\n# Input: n = 0\n# Output: 0\n# Example 4:\n# Input: n = -5\n# Output: -5\n# Example 5:\n# Input: n = 123\n# Output: 5\n\nclass Solution(object):\n    def countDigits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n < 0:\n            n = -n\n        if n < 10:\n            return 1\n        if n < 100:\n            return 2\n        if n < 1000:\n            return 3\n        if n < 10000:\n            return 4\n        if n < 100000:\n            return 5\n        if n < 1000000:\n            return 6\n        if n < 10000000:\n            return 7\n        if n < 100000000:\n            return 8\n        if n < 1000000000:\n            return 9\n        return 10",
      -0.5341796875
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    \n    result = []\n    \n    for number in numbers:\n        result.append(sum([int(digit) for digit in str(number)]))\n    \n    return result",
      -0.57373046875
    ],
    [
      "def sum_digits(nums):\n    sum = 0\n    for i in nums:\n        sum += int(i)\n    return sum\n\n# Your code here\nprint sum_digits([3, 4, 5, 6])\nprint sum_digits([2, 1])",
      -0.57373046875
    ],
    [
      "class Solution:\n    # @param {integer[]} digits\n    # @return {integer}\n    def sumDigits(self, digits):\n        # Write your code here\n        s = 0\n        for i in range(len(digits)):\n            s += int(digits[i])\n        return s\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.sumDigits([1,2,3,4]) == 7\n    assert s.sumDigits([-1,2,3,4]) == -7",
      -0.6171875
    ],
    [
      "def sum_digits(l):\n    return sum(map(int, list(str(x))))\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 18, \"1st example\"\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 21, \"2nd example\"\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 22, \"3rd example\"\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 23, \"4th example\"\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 24, \"5th example\"\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 25, \"6th example\"\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 26, \"7th example\"\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7",
      -0.849609375
    ],
    [
      "class Solution:\n    def sumDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # https://leetcode.com/problems/sum-of-digits/discuss/79430/Java-solution-with-iteration-and-while-loops-in-O(n)-time\n        nums = list(map(int, nums))\n        sum = 0\n        for n in nums:\n            sum += sum_digits(n)\n        return sum\n\n    def sum_digits(self, n):\n        return sum(map(int, str(n)))",
      -0.85693359375
    ],
    [
      "# @include\ndef sum_digits(nums):\n    s = 0\n    for num in nums:\n        s += sum(int(i) for i in str(num))\n    return s\n# @exclude\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6]\n    print(sum_digits(nums))\n    nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    print(sum_digits(nums))\n    nums = [0]\n    print(sum_digits(nums))\n    nums = []\n    print(sum_digits(nums))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def sumDigits(numbers):\n    result = 0\n    for n in numbers:\n        result += int(n)\n    return result\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print sumDigits(numbers)",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/sums-of-digits\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\ndef sumDigits(numbers):\n    sum = 0\n    for num in numbers:\n        sum = sum + int(num)\n    return sum\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(sumDigits(numbers))",
      -0.85791015625
    ],
    [
      "def sum_of_digits(numbers):\n    sum = 0\n    for number in numbers:\n        sum += int(str(number)[::-1].rjust(9, '0'))\n    return sum\n\nif __name__ == '__main__':\n    print(sum_of_digits([1,2,3,4]))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def sumOfDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        total = 0\n        for num in nums:\n            total += sum(map(int, str(num)))\n        return total\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumOfDigits([1,2,3,4,5]))\n    print(sol.sumOfDigits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(sol.sumOfDigits([1,2,3,4,5,6,7,8,9]))",
      -0.85791015625
    ],
    [
      "def sum_digits(numbers):\n    digits = 0\n    for num in numbers:\n        digits += num % 10\n    return digits",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def sumDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [sum(map(int, str(n))) for n in nums]",
      -0.85791015625
    ],
    [
      "# https://www.hackerearth.com/code-monk-algorithm-challenge/algorithm/sum-of-digits-of-each-number-in-a-given-list/\n\ndef sumDigits(lst):\n\tsum = 0\n\tfor i in lst:\n\t\tsum += i\n\treturn sum\n\n# Driver code\ntestList = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sumDigits(testList))",
      -0.85791015625
    ],
    [
      "# Your function should return a list.\n\n# Example:\n\n# Input: [2, 7, 6, 7, 0, 3, 1]\n# Output: [4, 6, 1, 3, 2, 1, 0]\n\ndef sum_digits(numbers):\n    return [sum(map(int, str(n))) for n in numbers]\n\nif __name__ == \"__main__\":\n    assert sum_digits([2, 7, 6, 7, 0, 3, 1]) == [4, 6, 1, 3, 2, 1, 0]",
      -0.85791015625
    ],
    [
      "def sum_digits(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(map(int, str(lst)))",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/digits-sum\n\nfrom collections import Counter\n\ndef sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(map(int, str(numbers[i])))\n\ndef main():\n    numbers = [4, 5, 6, 7]\n    print sum_digits(numbers)\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def sumDigits(numbers):\n\tsum = 0\n\tfor n in numbers:\n\t\tsum += int(str(n)[::-1])\n\treturn sum\n\nif __name__ == '__main__':\n\tnumbers = [1, 3, 4, 6]\n\tprint sumDigits(numbers)",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param numbers, a list of integer\n    # @return an integer\n    def sumOfDigits(self, numbers):\n        ret = 0\n        for number in numbers:\n            ret += sum(bin(number).count('1'))\n        return ret",
      -0.8583984375
    ],
    [
      "import math\n\ndef sum_digits(numbers):\n    sum = 0\n    for number in numbers:\n        sum += int(math.floor(math.log10(number)))\n    return sum\n\nif __name__ == \"__main__\":\n    numbers = [1, 10, 100, 1000, 10000, 100000, 1000000]\n    print sum_digits(numbers)",
      -0.8583984375
    ],
    [
      "def sum_digits(nums):\n    res = 0\n    for num in nums:\n        res += int(num)\n    return res\n\n\nif __name__ == '__main__':\n    nums = [2, 3, 5, 7, 9]\n    print(sum_digits(nums))",
      -0.8583984375
    ],
    [
      "def sum_digits(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n        total %= 10\n    return total\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print sum_digits(numbers)",
      -0.8583984375
    ],
    [
      "# Write your code here.\ndef sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [sum(map(int, str(n))) for n in numbers]",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer[]} digits\n    # @return {integer}\n    def sumDigits(self, digits):\n        return sum([int(digit) for digit in digits])",
      -0.8583984375
    ],
    [
      "# -*- coding: utf-8 -*-\n\nimport math\n\ndef digits_sum(numbers):\n    s = 0\n    for n in numbers:\n        s += int(math.floor(math.log10(n)))\n    return s\n\nif __name__ == \"__main__\":\n    print digits_sum([10, 100, 1000])",
      -0.8583984375
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for number in numbers:\n        sum += number % 10\n    return sum",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer[]} digits\n    # @return {integer}\n    def sumOfDigits(self, digits):\n        s = 0\n        for i in range(len(digits)):\n            s += digits[i]\n        return s",
      -0.8583984375
    ],
    [
      "def sum_digits(nums):\n    result = 0\n    for num in nums:\n        result += num\n    return result\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_digits([1, 0, 2]) == 3, \"1st example\"\n    assert sum_digits([-1, -2, -3]) == -4, \"2nd example\"\n    assert sum_digits([-1, -2, 3]) == 4, \"3rd example\"\n    assert sum_digits([2, 3, 4]) == 6, \"4th example\"\n    assert sum_digits([-2, -3, -4]) == 6, \"5th example\"\n    assert sum_digits([0, 1, 2, 3]) == 6, \"6th example\"\n    assert sum_digits([9, 9, 9, 9]) == 9, \"7th example\"\n    assert sum_digits([9, 9, 9, 9, 9]) == 19, \"8th example\"\n    assert sum_digits([9, 9, 9, 9, 9, 9]) == 29, \"9th example\"",
      -0.8583984375
    ],
    [
      "# The problem is to find the number of digits of a given number\n\n# Time: O(n)\n# Space: O(1)\n\nclass Solution:\n    # @param {integer[]} digits\n    # @return {integer}\n    def sumDigits(self, digits):\n        # Write your code here\n        s = 0\n        for i in range(len(digits)):\n            s += digits[i]\n        return s\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.sumDigits([0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(s.sumDigits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(s.sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(s.sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(s.sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(s.sumDigits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(s.sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.8583984375
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(map(int, map(str, numbers)))\n\nif __name__ == \"__main__\":\n    numbers = [3, 4, 5, 6, 0, 1, 2, 7, 8, 9]\n    print sum_digits(numbers)",
      -0.8583984375
    ],
    [
      "def sumDigits(numbers):\n    return sum([int(x) for x in str(numbers[0])])\n\ndef main():\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    print sumDigits(numbers)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += int(str(number))\n    return total\n\nif __name__ == \"__main__\":\n    numbers = [3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_digits(numbers))",
      -0.8583984375
    ],
    [
      "# https://leetcode.com/problems/sum-of-digits/\n\nclass Solution:\n    def sumOfDigits(self, nums: List[int]) -> int:\n        ans = 0\n        for n in nums:\n            ans += sum(map(int, str(n)))\n        return ans",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    sum_numbers = 0\n    for number in numbers:\n        sum_numbers += sum(map(int, str(number)))\n    return sum_numbers\n\n\ndef main():\n    numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_digits(numbers))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def digits_sum(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4]\n    print(digits_sum(numbers))",
      -0.8583984375
    ],
    [
      "def sumDigits(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [sum(map(int, str(i))) for i in l]\n\nif __name__ == \"__main__\":\n    assert sumDigits([1,2,3,4]) == [1,2,3,4]\n    assert sumDigits([1,2,3,4,5]) == [1,2,3,4,5]\n    assert sumDigits([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n    assert sumDigits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param numbers, a list of integer\n    # @return an integer\n    def sumDigits(self, numbers):\n        digits = [0] * 10\n        for number in numbers:\n            for i in xrange(len(str(number))):\n                digits[ord(str(number)[i]) - ord('0')] += 1\n        return sum(digits)",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/summation-of-digits/problem\n\ndef sumDigits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum([int(str(n)) for n in numbers])\n\nif __name__ == '__main__':\n    numbers = [1, 3, 5, 7]\n    print sumDigits(numbers)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def sumDigit(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        total = 0\n        for num in nums:\n            total += num\n            for _ in range(9):\n                total += num % 10\n                num /= 10\n        return total",
      -0.85888671875
    ],
    [
      "def sum_digits(numbers):\n    # write your code here\n    s = 0\n    for i in numbers:\n        s += sum(int(j) for j in str(i))\n    return s\n\nnumbers = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint sum_digits(numbers)",
      -0.85888671875
    ],
    [
      "def sum_digits(nums):\n    res = 0\n    for num in nums:\n        res += int(num)\n    return res\n\n\nif __name__ == \"__main__\":\n    print sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
      -0.85888671875
    ],
    [
      "def sum_digits(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum += num\n        sum %= 10\n    return sum\n\n\n# Your NumDigits solution should be one line.",
      -0.85888671875
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    digits = 0\n    for number in numbers:\n        digits += number % 10\n    return digits\n\nif __name__ == '__main__':\n    numbers = [1, 10, 100, 1000]\n    print sum_digits(numbers)",
      -0.85888671875
    ],
    [
      "#!/usr/bin/python\n\ndef sumDigits(numbers):\n    sum = 0\n    for number in numbers:\n        sum += int(number)\n    return sum\n\ndef sumDigits_2(numbers):\n    sum = 0\n    for number in numbers:\n        sum += int(str(number))\n    return sum\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print sumDigits(numbers)\n    print sumDigits_2(numbers)",
      -0.85888671875
    ],
    [
      "import math\n\n\ndef sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(len(numbers)):\n        sum += int(numbers[i])\n    return sum\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_digits(numbers))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for num in numbers:\n        result += int(num)\n    return result\n\nnumbers = [1, 3, 4, 5, 6, 9]\nprint(sum_digits(numbers))",
      -0.85888671875
    ],
    [
      "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        total = 0\n        for n in nums:\n            total += n\n            total += sum([int(digit) for digit in str(n)])\n        return total",
      -0.85888671875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        res = 0\n        self.helper(root, res)\n        return res\n\n    def helper(self, root, res):\n        if root is None:\n            return\n        res += root.val\n        self.helper(root.left, res)\n        self.helper(root.right, res)",
      -0.85888671875
    ],
    [
      "def sumDigits(numbers):\n    sum = 0\n    for number in numbers:\n        sum += int(str(number)[-1])\n    return sum\n\nif __name__ == '__main__':\n    numbers = [5, 4, 6, 3, 8]\n    print sumDigits(numbers)",
      -0.86083984375
    ],
    [
      "def sum_digits(numbers):\n    return sum(int(str(n)) for n in numbers)\n\n\ndef main():\n    numbers = [1, 2, 4, 8, 16]\n    print(sum_digits(numbers))\n\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "#!/usr/bin/env python\n\ndef sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum([int(str(n)) for n in numbers])\n\n\nif __name__ == \"__main__\":\n    numbers = [2, 5, 7, 9, 11]\n    print(sum_digits(numbers))",
      -0.86083984375
    ],
    [
      "def sumDigits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for n in numbers:\n        sum += n\n    return sum\n\n# Your NumDigits solution here.",
      -0.88525390625
    ],
    [
      "def sum_digits(numbers):\n    return sum(map(int, map(str, numbers)))\n\nnumbers = [10, 100, 1000, 10000]\nprint(sum_digits(numbers))",
      -1.05859375
    ],
    [
      "import timeit\nfrom random import randint\nfrom math import log10\n\nnumbers = [randint(0, 9) for _ in range(1000)]\n\ndef sum_digits(numbers):\n    return sum(int(n) for n in str(numbers))\n\nprint(timeit.timeit(sum_digits, setup=\"from __main__ import sum_digits\", number=1000))",
      -1.5888671875
    ],
    [
      "import unittest\n\nclass Solution:\n    def digitSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        sum = 0\n        for n in nums:\n            sum += n\n        return sum\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/digit-sum/solution/\n#\nApproach #1: Recursion [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the given array.\nSpace Complexity: O(n), no auxiliary space.\n\n# 4ms 99.71%\nclass Solution {\n    public int digitSum(int[] nums) {\n        int sum = 0;\n        for (int n : nums) {\n            sum += n;\n        }\n        return sum;\n    }\n}\n\n# 4ms 99.71%\nclass Solution {\n    public int digitSum(int[] nums) {\n        if (nums == null || nums.length == 0) return 0;\n        int sum = 0;\n        for (int n : nums) {\n            sum += n;\n        }\n        return sum;\n    }\n}\n\n# 4ms 99.71%\nclass Solution {\n    public int digitSum(int[] nums) {\n        int sum = 0;\n        for (int n : nums) {\n            sum += n;\n        }\n        return sum;\n    }\n}\n'''",
      -2.279296875
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def digitsSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        res = 0\n        for num in nums:\n            res += num\n            if res > 9:\n                res -= 10\n        return res\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/digits-sum/solution/\n\n# 2ms 100%\nclass Solution {\n    public int digitsSum(int[] nums) {\n        int[] sum = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            sum[i] = nums[i] - nums[i] % 10;\n        }\n        \n        int res = 0;\n        for (int i = 0; i < sum.length; i++) {\n            res += sum[i];\n            if (res > 9) res -= 10;\n        }\n        \n        return res;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public int digitsSum(int[] nums) {\n        int res = 0;\n        for (int num : nums) {\n            res += num;\n            if (res > 9) res -= 10;\n        }\n        return res;\n    }\n}\n'''",
      -2.513671875
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        res = 0\n        self.helper(root, res)\n        return res\n\n    def helper(self, root, res):\n        if root is None:\n            return\n        res += root.val\n        self.helper(root.left, res)\n        self.helper(root.right, res)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    n1 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n2 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n3 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n4 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n5 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n6 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n7 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n8 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n9 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n10 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))\n    n11 = TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(",
      -2.65625
    ],
    [
      "def sum_digits(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(map(int, str(nums)))\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(sum_digits(nums))",
      -2.67578125
    ],
    [
      "def sum_digits(numbers):\n    return sum(map(int, map(str, numbers)))\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]\n    print sum_digits(numbers)",
      -3.15625
    ],
    [
      "def sum_digits(numbers):\n    return sum([int(n) for n in numbers])\n\nif __name__ == \"__main__\":\n    numbers = [1, 5, 7, 8, 2, 9, 10, 0]\n    print(sum_digits(numbers))",
      -3.203125
    ],
    [
      "def sum_digits(numbers):\n    sum = 0\n    for i in numbers:\n        sum += int(i)\n    return sum\n\nif __name__ == \"__main__\":\n    numbers = [1, 10, 100, 1000]\n    print sum_digits(numbers)",
      -3.28125
    ],
    [
      "import math\n\n# Returns the sum of the digits of the numbers in the given list\ndef sum_digits(numbers):\n    digits = 0\n    for number in numbers:\n        digits += int(math.pow(10, len(str(number))))\n    return digits\n\n# Returns the sum of digits of the numbers in the given list\ndef sum_digits_list(numbers):\n    digits = 0\n    for number in numbers:\n        digits += int(math.pow(10, len(str(number))))\n    return digits\n\n# Returns the sum of digits of the numbers in the given list\ndef sum_digits_list2(numbers):\n    digits = 0\n    for number in numbers:\n        digits += int(math.pow(10, len(str(number))))\n    return digits\n\nif __name__ == \"__main__\":\n    numbers = [1,2,3,4,5,6,7,8,9,10,11]\n    print(sum_digits(numbers))\n    print(sum_digits_list(numbers))\n    print(sum_digits_list2(numbers))",
      -3.357421875
    ],
    [
      "# https://oj.leetcode.com/problems/count-digits/\n# Given a non-negative integer num. For every numbers i in the range 0 \u2264 i \u2264 num calculate the number of digits i has.\n#\n# Example 1:\n# Input: num = 28\n# Output: 7\n# Explanation: 28 has 7 digits: 00001011\n# Example 2:\n# Input: num = 2\n# Output: 2\n# Explanation: 2 has 2 digits: 00\n# Example 3:\n# Input: num = 10\n# Output: 3\n# Explanation: 10 has 3 digits: 000\n# Note:\n# 1 <= num <= 10^9\n#\n\nclass Solution(object):\n    def countDigit(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        while num > 0:\n            num, digit = divmod(num, 10)\n            result += digit\n        return result\n\nif __name__ == '__main__':\n    print Solution().countDigit(28)\n    print Solution().countDigit(2)\n    print Solution().countDigit(10)",
      -3.544921875
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for number in numbers:\n        sum += number % 10\n        number /= 10\n    return sum\n\nnumbers = [2, 5, 9, 8, 6, 4, 3, 7, 1]\nprint sum_digits(numbers)",
      -3.625
    ],
    [
      "# Definition for a digit.\nclass Digit(object):\n    def __init__(self, num):\n        \"\"\"\n        :type num: int\n        \"\"\"\n        self.num = num\n\n    def __eq__(self, other):\n        return self.num == other.num\n\n    def __lt__(self, other):\n        return self.num < other.num\n\n    def __str__(self):\n        return str(self.num)\n\n    def __repr__(self):\n        return \"Digit(\" + str(self.num) + \")\"\n\n\nclass Solution(object):\n    def sumDigits(self, numbers):\n        \"\"\"\n        :type numbers: List[Digit]\n        :rtype: int\n        \"\"\"\n        return sum([int(digit) for digit in str(sum(numbers))])\n\n\nif __name__ == \"__main__\":\n    # numbers = [Digit(num) for num in range(1, 100)]\n    # numbers = [Digit(num) for num in range(1, 20)]\n    # numbers = [Digit(num) for num in range(1, 10)]\n    numbers = [Digit(num) for num in range(1, 100)]\n    solution = Solution()\n    print solution.sumDigits(numbers)",
      -3.85546875
    ],
    [
      "def sum_digits(numbers):\n    return sum(int(i) for i in str(numbers))\n\nif __name__ == '__main__':\n    numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 10000]\n    print(sum_digits(numbers))",
      -3.91796875
    ],
    [
      "def sum_digits(numbers):\n    result = 0\n    for n in numbers:\n        result += n\n    return result\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(sum_digits(numbers))",
      -4.109375
    ],
    [
      "def sum_digits(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n        for digit in str(num):\n            sum += int(digit)\n    return sum\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(sum_digits(nums))\n    nums = [1, 3, 4, 5, 7]\n    print(sum_digits(nums))\n    nums = [1, 3, 4, 5, 6, 7, 8]\n    print(sum_digits(nums))\n    nums = [1, 3, 4, 5, 6, 7, 8, 9]\n    print(sum_digits(nums))\n    nums = [1, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_digits(nums))",
      -4.51171875
    ],
    [
      "#!/bin/python\n\n#!/bin/python\n\n# REF [site] >> https://leetcode.com/problems/sum-of-digits/\n\ndef sum_of_digits(nums):\n\treturn sum(int(x) for x in str(nums))\n\ndef sum_of_digits_test():\n\tassert sum_of_digits([1, 2, 3, 4, 5]) == 15\n\tassert sum_of_digits([1, 2, 3, 4, 5, 6]) == 24\n\tassert sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30\n\tassert sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 55\n\n\t#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t# Using built-in function.\n\tassert sum_of_digits([1, 2, 3, 4, 5]) == 15\n\tassert sum_of_digits([1, 2, 3, 4, 5, 6]) == 24\n\tassert sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30\n\tassert sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 55\n\n\t#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t# Using Python built-in function.\n\tassert sum_of_digits([1, 2, 3, 4, 5]) == 15\n\tassert sum_of_digits([1, 2, 3, 4, 5, 6]) ==",
      -4.62109375
    ],
    [
      "from math import ceil\nfrom collections import defaultdict\n\n\ndef sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    count = defaultdict(int)\n    for number in numbers:\n        count[int(str(number))] += 1\n    return sum([ceil(sum(map(int, str(number)))) for number in numbers])\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199",
      -4.6796875
    ],
    [
      "def sum_digits(numbers):\n    return sum(map(int, list(str(n))[::-1]))\n\nnumbers = [7, 2, 4, 5, 6, 3, 8, 9, 1]\nprint(sum_digits(numbers))",
      -4.68359375
    ],
    [
      "class Solution(object):\n    def sumDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum([int(str(n)) for n in nums])\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.sumDigits([1, 2, 3, 4]))\n    print(sol.sumDigits([-1, -2, -3, -4]))",
      -4.8125
    ],
    [
      "import unittest\n\ndef sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum([int(n) for n in str(numbers) if is_digit(n)])\n\ndef is_digit(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return n >= 0 and n <= 9\n\nclass TestSumDigits(unittest.TestCase):\n    def test_sum_digits(self):\n        self.assertEqual(sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 10)\n        self.assertEqual(sum_digits([9, 8, 7, 6, 5, 4, 3, 2, 1]), 10)\n        self.assertEqual(sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]), 10)\n        self.assertEqual(sum_digits([0]), 0)\n\nif __name__ == '__main__':\n    unittest.main()",
      -5.18359375
    ],
    [
      "#!/bin/python\n\n# http://www.geeksforgeeks.org/write-a-function-to-compute-the-sum-of-digits-of-each-number-of-a-given-list/\ndef sum_digits(numbers):\n    sum_digits = 0\n    for number in numbers:\n        sum_digits += int(str(number))\n    return sum_digits\n\n# test cases\nnumbers = [3, 1, 5, 10, 22]\nprint sum_digits(numbers)",
      -5.26953125
    ],
    [
      "def sum_digits(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return sum([int(num) for num in str(nums[0])])\n\nif __name__ == \"__main__\":\n    print(sum_digits([1, 2, 3, 4, 5, 6]))\n    print(sum_digits([1, 2, 3, 4, 5, 6, 7]))",
      -5.84765625
    ],
    [
      "# https://www.hackerrank.com/challenges/sum-of-digits\ndef sum_digits(nums):\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n\nnums = [2, 4, 6, 8, 1, 9]\nsum_of_digits = sum_digits(nums)\nprint(sum_of_digits)",
      -5.84765625
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for number in numbers:\n        result += number\n        result = result % 10\n    return result\n\nif __name__ == \"__main__\":\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 3\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 4\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 5\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 6\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 7\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 8\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 9\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 10\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ==",
      -6.01953125
    ],
    [
      "def sum_digits(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 0\n    assert sum_digits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 55",
      -6.5078125
    ],
    [
      "def sum_digits(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    nums_list = list(map(int, nums))\n    nums_list.sort()\n    s = 0\n    for i in range(len(nums_list)):\n        s += nums_list[i]\n    return [s]\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(sum_digits(nums))",
      -7.19140625
    ],
    [
      "# Approach:\n# We are going to write a function that takes a list of integers and returns\n# the sum of the digits of each integer in the list.\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# We are going to do the same thing as the previous exercise, but instead of\n# just summing the digits, we are going to also add the value of each number.\n# We can do this by iterating over the list and adding the value of each\n# number to the sum.\n\n# Hint:\n# We can use the built-in function sum() to do this, but what if we want to\n# sum the digits of each number, we can use the built-in function\n# sum() as well.\n\ndef sumDigits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    s = 0\n    for num in numbers:\n        s += num\n    return s\n\nif __name__ == \"__main__\":\n    numbers = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    print(sumDigits(numbers))",
      -7.2734375
    ],
    [
      "#!/usr/bin/env python\n\ndef sum_digit(numbers):\n    sum = 0\n    for i in numbers:\n        sum += i % 10\n    return sum\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print sum_digit(numbers)",
      -7.359375
    ],
    [
      "class Solution(object):\n    def sumDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        total = 0\n        for num in nums:\n            total += num\n            total += sum(map(int, str(num)))\n        return total\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.sumDigits([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(sol.sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(sol.sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(sol.sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(sol.sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))",
      -7.38671875
    ],
    [
      "from itertools import groupby\n\n\ndef sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(map(int, filter(None, map(str, numbers))))\n\n\ndef test_sum_digits():\n    assert sum_digits([1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30\n    assert sum_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert sum_digits([]) == 0\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n    assert sum_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 13\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 14\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 15\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 16\n    assert sum_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 17\n    assert sum_dig",
      -9.15625
    ],
    [
      "def digitsSum(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: List[int]\n    \"\"\"\n    sum = 0\n    for number in numbers:\n        sum += str(number)[-1]\n    return sum\n\nif __name__ == '__main__':\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217",
      -9.5
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for number in numbers:\n        sum += int(str(number))\n    return sum\n\ndef sum_digits_2(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for number in numbers:\n        sum += int(str(number))\n        sum += int(str(number)[::-1])\n    return sum\n\nif __name__ == \"__main__\":\n    numbers = [1,2,3,4,5,6,7,8,9]\n    print(sum_digits(numbers))\n    print(sum_digits_2(numbers))",
      -9.5625
    ],
    [
      "class Solution:\n    # @param {List[int]} nums\n    # @return {int}\n    def sumDigits(self, nums):\n        res = 0\n        for i in nums:\n            res += i\n            res %= 10\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [2, 3, 4, 5, 6, 7, 8, 9]\n    print(sol.sumDigits(nums))\n    nums = [1, 2, 3]\n    print(sol.sumDigits(nums))",
      -11.71875
    ],
    [
      "def sum_digits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in numbers:\n        sum += i\n        sum %= 10\n    return sum\n\nif __name__ == \"__main__\":\n    print sum_digits([12345, 23456, 23456])\n    print sum_digits([12345, 23456, 23456])\n    print sum_digits([12345, 23456, 23456])\n    print sum_digits([12345, 23456, 23456])\n    print sum_digits([12345, 23456, 23456])\n    print sum_digits([12345, 23456, 23456])\n    print sum_digits([12345, 23456, 23456])\n    print sum_digits([12345, 23456, 23456])\n    print sum_digits([12345, 23456, 23456])",
      -11.7578125
    ],
    [
      "# https://www.hackerrank.com/challenges/summation-of-digits\n\nimport unittest\n\n\nclass Solution(object):\n\n    def sumDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        result = 0\n        for num in nums:\n            result += int(str(num))\n        return result\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/summation-of-digits/solution/\n\nApproach #1: Dynamic Programming [Accepted]\nComplexity Analysis\nTime Complexity: O(n^2), where n is the length of the list.\nSpace Complexity: O(n)\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\n# 4ms 100%\nclass Solution {\n    public int sumDigits(ListNode head) {\n        if (head == null) return 0;\n        int[] digits = new int[32];\n        digits[0] = 1;\n        int carry = 0;\n        while (head!= null) {\n            int val = head.val;\n            int digit = val % 10;\n            head = head.next;\n            digits[digit] += carry;\n            carry = digits[digit] / 10;\n            digits[digit] %= 10;\n        }\n        return carry;\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public int sumDigits(ListNode head) {\n        int sum = 0;\n        while (head!= null) {\n            sum += head.val % 10;\n            head = head.next;\n        }\n        return sum;\n    }\n}\n'''",
      -11.8125
    ],
    [
      "def sum_digits(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(map(int, str(nums)))\n\nclass Solution:\n    # @param nums, a list of integers\n    # @return an integer\n    def sumOfDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        result = 0\n        for num in nums:\n            result += num\n        return result",
      -12.0859375
    ],
    [
      "# O(n^2)\ndef sumDigits(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] * (10 ** i)\n    return sum\n\n# O(n)\ndef sumDigits2(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n\n# O(n)\ndef sumDigits3(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] % 10\n    return sum\n\n# O(n)\ndef sumDigits4(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] / 10\n    return sum\n\n# O(n)\ndef sumDigits5(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] % 10 * (10 ** i)\n    return sum\n\n# O(n)\ndef sumDigits6(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] % 10 * (10 ** i) % 10\n    return sum\n\n# O(n)\ndef sumDigits7(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] % 10 * (10 ** i) % 10\n    return sum\n\n# O(n)\ndef sumDigits8(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] % 10 * (10 ** i) % 10\n    return sum\n\n# O(n)\ndef sumDigits9(nums):\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] % 10 * (10 ** i) % 10\n    return sum\n\n# O(n)\ndef sumDigits10(nums):\n    sum = 0",
      -13.75
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution:\n    # @return an integer\n    def getSumDigits(self, nums):\n        # write your code here\n        res = 0\n        for num in nums:\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res += num\n            res +=",
      -14.1015625
    ],
    [
      "import math\n\ndef sumDigits(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    \n    if not numbers:\n        return 0\n\n    sum = 0\n    for num in numbers:\n        sum += int(math.floor(num))\n    return sum\n\n\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(sumDigits(numbers))",
      -15.9375
    ],
    [
      "# https://leetcode.com/problems/sum-of-digits/\n\nclass Solution(object):\n    def sumOfDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        total = 0\n        for num in nums:\n            total += num\n            while total > 9:\n                total -= 9\n            while total < 0:\n                total += 9\n            total += num\n        return total\n\nif __name__ == \"__main__\":\n    print(Solution().sumOfDigits([2, 3, 4, 5, 6, 7, 8, 9]))",
      -18.578125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}