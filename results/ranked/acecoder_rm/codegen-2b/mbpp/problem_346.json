{
  "problem": {
    "task_id": "MBPP/357",
    "prompt": "Write a function to find the maximum element of all the given tuple records.",
    "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
    "test_list": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ],
    "challenge_test_list": [],
    "problem_id": 346
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import collections\n\nclass Tuple(collections.namedtuple('Tuple', 'a b c')):\n    \"\"\"\n    A tuple record.\n    \"\"\"\n\ndef max_tuple(records):\n    \"\"\"\n    :type records: List[Tuple]\n    :rtype: int\n    \"\"\"\n    max_a = None\n    max_b = None\n    max_c = None\n    for record in records:\n        a = record.a\n        b = record.b\n        c = record.c\n        if a is None:\n            a = 0\n        if b is None:\n            b = 0\n        if c is None:\n            c = 0\n        if max_a is None or a > max_a:\n            max_a = a\n        if max_b is None or b > max_b:\n            max_b = b\n        if max_c is None or c > max_c:\n            max_c = c\n    return max(max_a, max_b, max_c)",
      7.65234375
    ],
    [
      "class Solution(object):\n    def maxValue(self, records):\n        \"\"\"\n        :type records: List[List[int]]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for record in records:\n            res = max(res, max(record))\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    records = [[-1, 1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [2, 4], [3, 4, 5]]\n    print(sol.maxValue(records))\n    records = [[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 4], [3, 4, 5]]\n    print(sol.maxValue(records))",
      1.9638671875
    ],
    [
      "from collections import defaultdict\n\n__author__ = 'Daniel'\n\n\nclass TupleRecords:\n    def __init__(self, records):\n        self.records = records\n\n    def get_max_tuple_value(self):\n        max_value = -1\n        for record in self.records:\n            max_value = max(max_value, max(record))\n        return max_value\n\n\ndef main():\n    records = [\n        (1, 2, 3, 4),\n        (2, 1, 3, 4),\n        (3, 1, 2, 4),\n        (3, 2, 1, 4),\n        (4, 3, 1, 2),\n        (4, 3, 2, 1),\n        (4, 3, 2, 3),\n        (4, 3, 4, 1),\n        (4, 3, 4, 2),\n        (4, 3, 4, 3),\n        (4, 4, 3, 1),\n        (4, 4, 3, 2),\n        (4, 4, 3, 3),\n        (4, 4, 3, 4),\n        (4, 4, 4, 1),\n        (4, 4, 4, 2),\n        (4, 4, 4, 3),\n        (4, 4, 4, 4)\n    ]\n\n    tuple_records = TupleRecords(records)\n    print(tuple_records.get_max_tuple_value())\n\nif __name__ == '__main__':\n    main()",
      1.9423828125
    ],
    [
      "# -*- coding: utf-8 -*-\nfrom collections import defaultdict\n\n__author__ = 'Daniel'\n\n\nclass Solution:\n    \"\"\"\n    @param: nums: A list of integers\n    @param: k: An integer\n    @return: The maximum number\n    \"\"\"\n\n    def findMax(self, nums, k):\n        if k > len(nums):\n            return 0\n        if k == 0:\n            return nums[0]\n        res = nums[0]\n        max_num = nums[0]\n        max_index = 0\n        for i in xrange(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                if nums[i] > max_num:\n                    max_num = nums[i]\n                    max_index = i\n            else:\n                if nums[i] > max_num:\n                    max_num = nums[i]\n                    max_index = i\n        return max_num\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findMax( [1, 2, 3, 4, 5], 2)",
      1.2998046875
    ],
    [
      "class Solution:\n    # @param {List<List<Integer>>} data\n    # @return {Integer}\n    def max(self, data):\n        if len(data) == 0:\n            return 0\n        if len(data) == 1:\n            return data[0][0]\n\n        max_so_far = data[0][0]\n        for i in range(1, len(data)):\n            if data[i][0] > max_so_far:\n                max_so_far = data[i][0]\n\n        return max_so_far",
      1.158203125
    ],
    [
      "class Solution:\n    # @param nums: A list of integer\n    # @return: A integer\n    def maxValue(self, nums):\n        if not nums: return 0\n        max = nums[0]\n        for i in xrange(1, len(nums)):\n            max = max if nums[i] > max else nums[i]\n        return max",
      1.12890625
    ],
    [
      "import collections\n\nclass Solution:\n    \"\"\"\n    @param: nums: A list of integers\n    @return: An integer\n    \"\"\"\n    def max(self, nums):\n        # write your code here\n        if not nums:\n            return 0\n        \n        res = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > res:\n                res = nums[i]\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.max([1,2,3,4,5])",
      0.95849609375
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        max_val = nums[0]\n        for val in nums:\n            if val > max_val:\n                max_val = val\n        return max_val\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.max([1, 2, 3])\n    print s.max([-1, 2, -3])\n    print s.max([1, 2, 3, -4])\n    print s.max([-1, -2, -3])",
      0.64599609375
    ],
    [
      "import collections\n\nclass Solution:\n    \"\"\"\n    @param: a list of tuple(int, int)\n    @return: the maximum element of all the given tuple records\n    \"\"\"\n    def maxNumber(self, records):\n        if not records:\n            return 0\n        max_num = collections.defaultdict(int)\n        for record in records:\n            max_num[record[0]] = max(max_num[record[0]], record[1])\n        return max(max_num.values())\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxNumber([(1, 2), (3, 4), (2, 2), (5, 5)])\n    print s.maxNumber([(1, 2), (2, 2), (3, 4), (4, 4)])\n    print s.maxNumber([(1, 2), (2, 2), (3, 4), (5, 5)])\n    print s.maxNumber([(1, 2), (2, 2), (3, 4), (4, 4)])",
      0.63623046875
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = y\n\n\nclass Solution(object):\n    def findMax(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        ans = -sys.maxsize\n        for t in tuples:\n            ans = max(ans, t.x)\n        return ans",
      0.439208984375
    ],
    [
      "class Solution(object):\n    def maxNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        result = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > result:\n                result = nums[i]\n        return result\n\nif __name__ == '__main__':\n    so = Solution()\n    print so.maxNumber([1, 2, 3])\n    print so.maxNumber([1, 2, 2])\n    print so.maxNumber([1, 1, 2])\n    print so.maxNumber([1, 2, 3, 4, 5, 6])\n    print so.maxNumber([-1, -2, -3])",
      0.233154296875
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        max = nums[0]\n        for i in range(1, n):\n            max = max if nums[i] > max else nums[i]\n        return max",
      0.14501953125
    ],
    [
      "class TupleRecord:\n    def __init__(self, tuple_record):\n        self.tuple_record = tuple_record\n        self.max_element = -float(\"inf\")\n\n    def __lt__(self, other):\n        return self.tuple_record[0] < other.tuple_record[0]\n\n    def __eq__(self, other):\n        return self.tuple_record == other.tuple_record\n\n    def __gt__(self, other):\n        return self.tuple_record[0] > other.tuple_record[0]\n\n    def __le__(self, other):\n        return self.tuple_record[0] <= other.tuple_record[0]\n\n    def __ge__(self, other):\n        return self.tuple_record[0] >= other.tuple_record[0]\n\n    def __ne__(self, other):\n        return self.tuple_record!= other.tuple_record\n\nclass Solution:\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[TupleRecord]\n        :rtype: float\n        \"\"\"\n        max_element = -float(\"inf\")\n        for t in tuples:\n            max_element = max(max_element, t.tuple_record[0])\n\n        return max_element",
      0.118896484375
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_val = nums[0]\n        for num in nums:\n            if num > max_val:\n                max_val = num\n        return max_val",
      -0.039703369140625
    ],
    [
      "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b c')\n\ndef max_tuple(tuples: list) -> int:\n    \"\"\"\n    :param tuples: a list of tuples\n    :return: the maximum element\n    \"\"\"\n    max_tuple = Tuple(0, 0, 0)\n    for tuple in tuples:\n        max_tuple = max(max_tuple, tuple)\n    return max_tuple.a\n\nif __name__ == '__main__':\n    tuples = [\n        Tuple(1, 2, 3),\n        Tuple(1, 3, 4),\n        Tuple(2, 2, 3),\n        Tuple(2, 3, 4),\n        Tuple(3, 2, 3),\n        Tuple(3, 3, 4)\n    ]\n    print(max_tuple(tuples))",
      -0.32861328125
    ],
    [
      "class Solution(object):\n    def findMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_val = -1\n        for num in nums:\n            if max_val < num:\n                max_val = num\n        return max_val\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,3,4,5]\n    print(sol.findMax(nums))",
      -0.441650390625
    ],
    [
      "# Developer note:\n# You can use `max(tuple)` to find the maximum element of a tuple.\n# However, this is not efficient.\n# You can use `max(tuple, key=lambda x: x)` to find the maximum element of a tuple\n# with a key function to sort the tuple elements.\n\n# Example:\n# Input:\n# [[1,2,3], [3,2,1]]\n# Output:\n# 3\n# Example:\n# Input:\n# [[2,3,1], [1,2,3]]\n# Output:\n# 3\n# Note:\n# The given tuple is always sorted in non-descending order.\n# The tuple size is in the range of 1 ~ 100,000.\n# The tuple elements are always numbers.\n# The given tuple elements are always distinct.\n# The given tuple elements are all positive.\n# The given tuple elements are all in the range of -100,000 ~ 100,000.\n\n# time:O(n)\n# space:O(n)\n# score:49.53(5ms)\nclass Solution(object):\n    def maxTuple(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: int\n        \"\"\"\n        res = nums[0][0]\n        for i in xrange(1, len(nums)):\n            res = max(res, nums[i][0])\n            for j in xrange(1, len(nums[i])):\n                res = max(res, nums[i][j])\n        return res",
      -0.496826171875
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def maxTuple(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max_x = max(nums)\n        max_y = max(nums)\n        return max_x if max_x > max_y else max_y",
      -0.6513671875
    ],
    [
      "import collections\n\nclass Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def max_helper(x, y):\n            if x > y:\n                return x\n            return y\n\n        if not nums:\n            return 0\n        m = collections.Counter()\n        for num in nums:\n            m.update([num])\n        m = m.most_common(1)\n        return max_helper(m[0][0], 0)\n\n\nif __name__ == '__main__':\n    print(Solution().max([1, 2, 3, 1, 2, 3]))\n    print(Solution().max([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(Solution().max([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.81884765625
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n\nclass Solution(object):\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max_value = -sys.maxsize - 1\n        for t in tuples:\n            max_value = max(max_value, t.x)\n            max_value = max(max_value, t.y)\n        return max_value",
      -0.82080078125
    ],
    [
      "# https://oj.leetcode.com/problems/maximum-subarray/\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxSubArray(self, nums):\n        if not nums or len(nums) == 0:\n            return 0\n        max_sum = 0\n        max_end_sum = 0\n        max_end = 0\n        for i in range(len(nums)):\n            sum = nums[i]\n            if i == 0:\n                sum += nums[i]\n            else:\n                sum += nums[i] - nums[i-1]\n            max_sum = max(max_sum, sum)\n            max_end_sum = max(max_end_sum, sum + nums[i])\n            if i == len(nums)-1:\n                max_end = max(max_end, sum + nums[i])\n        return max(max_sum, max_end_sum)",
      -0.8291015625
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not tuples:\n            return 0\n        max_tuple = None\n        for t in tuples:\n            if not max_tuple or max_tuple.x < t.x:\n                max_tuple = t\n        return max_tuple.x\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert 1 == s.maxTuple([])\n    assert 1 == s.maxTuple([(1,2,3)])\n    assert 4 == s.maxTuple([(1,2,3),(3,1,2)])",
      -0.833984375
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_val = -1\n        for n in nums:\n            if n > max_val:\n                max_val = n\n        return max_val",
      -0.85693359375
    ],
    [
      "def max_tuple(records):\n    \"\"\"\n    :type records: List[Tuple[int, int, int]]\n    :rtype: int\n    \"\"\"\n    max_element = None\n    for record in records:\n        if max_element is None:\n            max_element = record[0]\n        else:\n            max_element = max(max_element, record[0])\n    return max_element",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def max(self, nums):\n        if not nums: return 0\n        max = nums[0]\n        for i in xrange(1, len(nums)):\n            max = max if nums[i] >= max else nums[i]\n        return max",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        \n        max_val = nums[0]\n        for num in nums[1:]:\n            if num > max_val:\n                max_val = num\n        return max_val",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param {List<List<Integer>>} records\n    # @return {int}\n    def findMaximum(self, records):\n        if not records:\n            return 0\n        max_val = -1\n        for record in records:\n            max_val = max(max_val, max(record))\n        return max_val",
      -0.85693359375
    ],
    [
      "class Solution:\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max = 0\n        for i in range(len(nums)):\n            max = max if max < nums[i] else nums[i]\n        return max",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def findMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_n = 0\n        for n in nums:\n            if n > max_n:\n                max_n = n\n        return max_n\n\n    def findMax2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_n = 0\n        for n in nums:\n            if n > max_n:\n                max_n = n\n            else:\n                return max_n\n        return max_n\n\nif __name__ == '__main__':\n    assert Solution().findMax(list(range(1, 5))) == 4\n    assert Solution().findMax(list(range(1, 5))) == 4\n    assert Solution().findMax(list(range(1, 5))) == 4",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_val = nums[0]\n        for i in range(1, len(nums)):\n            max_val = max(max_val, nums[i])\n        return max_val",
      -0.85693359375
    ],
    [
      "import collections\n\nclass Solution:\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.max_rec(nums, [])\n\n    def max_rec(self, nums, result):\n        if len(nums) == 0:\n            return 0\n\n        if len(nums) == 1:\n            return nums[0]\n\n        return max(self.max_rec(nums[1:], result), nums[0]) + result[0]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.max([1, 2, 3]))\n    print(sol.max([4, 5, 6, 7]))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_val = nums[0]\n        for val in nums:\n            if val > max_val:\n                max_val = val\n        return max_val\n\nif __name__ == \"__main__\":\n    assert Solution().max([3,2,1]) == 3\n    assert Solution().max([1,2,3]) == 3\n    assert Solution().max([-1,2,3]) == 3\n    assert Solution().max([3,-1,2]) == 3",
      -0.85693359375
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if len(tuples) == 0:\n            return 0\n        max_tuple = -float(\"inf\")\n        max_index = -1\n        for i in range(len(tuples)):\n            if tuples[i].x > max_tuple:\n                max_tuple = tuples[i].x\n                max_index = i\n        return max_index",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        max_so_far = nums[0]\n        for i in range(1, n):\n            if nums[i] > max_so_far:\n                max_so_far = nums[i]\n        return max_so_far\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.max([0, -2, 1, 3, -5]))\n    print(sol.max([1, 2]))",
      -0.85693359375
    ],
    [
      "from collections import defaultdict\n\ndef max_tuple(records):\n    \"\"\"\n    :type records: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    d = defaultdict(lambda: -1)\n    for r in records:\n        d[r[0]] = max(d[r[0]], r[1])\n    return max(d.values())",
      -0.85791015625
    ],
    [
      "# https://www.geeksforgeeks.org/write-a-function-to-find-the-maximum-element-of-all-the-given-tuple-records/\n\n\ndef max_tuple(record):\n    \"\"\"\n    :type record: List[int]\n    :rtype: int\n    \"\"\"\n    return max(record)\n\n\nif __name__ == '__main__':\n    assert max_tuple([-2, 1, 3, 5, -5]) == 5",
      -0.85791015625
    ],
    [
      "from collections import namedtuple\n\nRecord = namedtuple('Record', ['first','second', 'third'])\n\ndef max_tuple(records):\n    \"\"\"\n    :type records: List[Record]\n    :rtype: int\n    \"\"\"\n    return max(records, key=lambda record: (record.first, record.second, record.third))",
      -0.8583984375
    ],
    [
      "import collections\n\n\ndef max_records(records):\n    \"\"\"\n    :type records: List[List[int]]\n    :rtype: int\n    \"\"\"\n    def get_max(record):\n        return max(record)\n\n    return max(map(get_max, records))\n\n\nif __name__ == '__main__':\n    records = [\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5]\n    ]\n\n    print(max_records(records))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def findMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_val = nums[0]\n        max_idx = 0\n        for i in range(len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n                max_idx = i\n        return max_val",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def findMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_num = 0\n        for num in nums:\n            if num > max_num:\n                max_num = num\n        return max_num\n\n\nif __name__ == \"__main__\":\n    assert Solution().findMax([1,2,3]) == 3\n    assert Solution().findMax([1,2,3,4,5]) == 5\n    assert Solution().findMax([1,2,3,4]) == 4\n    assert Solution().findMax([1,2,3,4,5,6]) == 6\n    assert Solution().findMax([1,2,3,4,5,6,7]) == 7\n    assert Solution().findMax([1,2,3,4,5,6,7,8]) == 8\n    assert Solution().findMax([1,2,3,4,5,6,7,8,9]) == 9\n    assert Solution().findMax([1,2,3,4,5,6,7,8,9,10]) == 10",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def findMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_num = nums[0]\n        for num in nums:\n            max_num = max(max_num, num)\n        return max_num",
      -0.85888671875
    ],
    [
      "def max(t):\n    \"\"\"\n    :type t: List[int]\n    :rtype: int\n    \"\"\"\n    return max(t)",
      -0.85888671875
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n    def __lt__(self, other):\n        return self.x < other.x\n\nclass Solution(object):\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max_val = -1\n        for t in tuples:\n            max_val = max(max_val, max(t.x, t.y))\n        return max_val\n\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max_val = -1\n        for t in tuples:\n            if t.x > max_val:\n                max_val = t.x\n        return max_val",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxNumber(self, nums):\n        n = len(nums)\n        if n == 0:\n            return 0\n        max_ = nums[0]\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > max_:\n                max_ = nums[i]\n                max_index = i\n        return max_\n\nif __name__ == \"__main__\":\n    assert Solution().maxNumber([1, 2, 3, 4, 5]) == 5\n    assert Solution().maxNumber([5, 6, 1, 2, 3]) == 6\n    assert Solution().maxNumber([2, 3, 4, 5, 6]) == 6",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def max(self, nums):\n        max_value = -sys.maxsize\n        for num in nums:\n            if num > max_value:\n                max_value = num\n        return max_value\n\n    # @param {integer[]} nums\n    # @return {integer}\n    def max(self, nums):\n        if not nums:\n            return 0\n        max_value = nums[0]\n        for num in nums:\n            if num > max_value:\n                max_value = num\n        return max_value\n\n    # @param {integer[]} nums\n    # @return {integer}\n    def max(self, nums):\n        if not nums:\n            return 0\n        max_value = nums[0]\n        for num in nums:\n            if num > max_value:\n                max_value = num\n        return max_value",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        return nums[-1]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.max([1, 2, 3, 4, 5])\n    print s.max([1, 2, 3])\n    print s.max([1, 2, 3, 4])",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def max(self, nums):\n        if len(nums) == 0:\n            return 0\n        max = nums[0]\n        for num in nums:\n            if num > max:\n                max = num\n        return max\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1,2,3,4,5]\n    print(sol.max(nums))\n    nums = [1,2,3,4,5,6]\n    print(sol.max(nums))\n    nums = [1,2,3,4,5,6,7]\n    print(sol.max(nums))",
      -0.85888671875
    ],
    [
      "# https://leetcode.com/problems/find-maximum-of-all-subtotals/discuss/142933/Python-solution-with-explained-explanation-with-explanations\n\nclass Solution(object):\n    def findMax(self, a):\n        \"\"\"\n        :type a: List[List[int]]\n        :rtype: int\n        \"\"\"\n        max_val = -1\n        for nums in a:\n            max_val = max(max_val, max(nums))\n        return max_val\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findMax([[1,2,3], [4,5,6], [7,8,9]])\n    print s.findMax([[1,1,1], [1,1,1], [1,1,1]])\n    print s.findMax([[1,2,3], [4,5,6], [7,8,9]])",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        max_ = nums[0]\n        max_left = nums[0]\n        max_right = nums[0]\n        for i in range(1, n):\n            if nums[i] > max_:\n                max_ = nums[i]\n            if nums[i] > max_left:\n                max_left = nums[i]\n            if nums[i] > max_right:\n                max_right = nums[i]\n        return max_",
      -0.85888671875
    ],
    [
      "def max_tuple(arr):\n    \"\"\"\n    :type arr: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    max = arr[0][0]\n    for i in range(1, len(arr)):\n        if arr[i][0] > max:\n            max = arr[i][0]\n    return max\n\n\n# Your MaxTuple solution here",
      -0.86083984375
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n    def __repr__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def maxTuple(self, records):\n        \"\"\"\n        :type records: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max_ = -1\n        for record in records:\n            max_ = max(max_, record.x)\n        return max_\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    tuple1 = Tuple(1)\n    tuple2 = Tuple(2)\n    tuple3 = Tuple(3)\n    tuple4 = Tuple(4)\n    tuple5 = Tuple(5)\n    tuple6 = Tuple(6)\n    tuple7 = Tuple(7)\n    tuple8 = Tuple(8)\n    tuple9 = Tuple(9)\n    tuple10 = Tuple(10)\n    records = [tuple1, tuple2, tuple3, tuple4, tuple5, tuple6, tuple7, tuple8, tuple9, tuple10]\n    print sol.maxTuple(records)",
      -0.89306640625
    ],
    [
      "# https://leetcode.com/problems/maximum-element-of-a-tuple/\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#",
      -0.90087890625
    ],
    [
      "from collections import defaultdict\n\nclass Solution:\n    \"\"\"\n    @param records: The records come in no particular order\n    @return: The maximum number\n    \"\"\"\n    def findMax(self, records):\n        if not records:\n            return 0\n\n        max_val = 0\n        max_idx = 0\n        max_val = records[0][0]\n        max_idx = 0\n\n        for i in xrange(1, len(records)):\n            if max_val < records[i][0]:\n                max_val = records[i][0]\n                max_idx = i\n            elif max_val == records[i][0]:\n                if records[i][1] > records[max_idx][1]:\n                    max_idx = i\n        return max_val",
      -0.90625
    ],
    [
      "class Solution:\n    \"\"\"\n    @param: tuple_list: a list of tuple\n    @return: a integer\n    \"\"\"\n    def max(self, tuple_list):\n        if not tuple_list:\n            return None\n        res = tuple_list[0][0]\n        for t in tuple_list:\n            if t[0] > res:\n                res = t[0]\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.max(((1, 2), (1, 3), (3, 1))))",
      -1.2861328125
    ],
    [
      "def max(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not tuple_list:\n        return 0\n    \n    max_value = tuple_list[0][0]\n    \n    for i in range(1, len(tuple_list)):\n        if tuple_list[i][0] > max_value:\n            max_value = tuple_list[i][0]\n    \n    return max_value",
      -1.3349609375
    ],
    [
      "from collections import namedtuple\n\ndef max_tuple(records):\n    \"\"\"\n    :type records: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # Your code here\n\n    return max(records)\n\nif __name__ == \"__main__\":\n    records = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n    print(max_tuple(records))",
      -1.55078125
    ],
    [
      "import collections\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def maxElement(self, nums):\n        max_val = nums[0]\n        max_idx = 0\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n                max_idx = i\n        return max_val\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [3, 2, 1, 1, 5]\n    print(s.maxElement(nums))",
      -1.6142578125
    ],
    [
      "class Solution:\n    def findMax(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        max_val = -1\n        for i in xrange(len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n        return max_val",
      -1.63671875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_ = nums[0]\n        for i in range(1, len(nums)):\n            max_ = max(max_, nums[i])\n        return max_\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.max([1, 2, 3, 4]))\n    print(s.max([0, -1, -2, 0]))",
      -1.63671875
    ],
    [
      "import collections\n\n\ndef max_tuple(tuple_records):\n    \"\"\"\n    :type tuple_records: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_value = 0\n    max_tuple = collections.deque()\n    for i in range(len(tuple_records)):\n        for j in range(len(tuple_records[i])):\n            if tuple_records[i][j] > max_value:\n                max_value = tuple_records[i][j]\n                max_tuple.clear()\n                max_tuple.append(tuple_records[i][j])\n            elif tuple_records[i][j] == max_value:\n                max_tuple.append(tuple_records[i][j])\n    return max_value, max_tuple\n\n\nif __name__ == \"__main__\":\n    tuple_records = [[1, 1], [2, 2], [1, 2], [1, 3], [2, 4], [3, 5], [4, 6],\n                     [4, 7], [3, 8], [3, 9], [2, 10], [1, 10]]\n    print(max_tuple(tuple_records))",
      -1.658203125
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def max(self, nums):\n        # write your code here\n        if nums == None or len(nums) == 0:\n            return 0\n        max_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n        return max_val\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1,2,3,4,5,6]\n    print s.max(nums)\n    nums = [1,2,3,4,5]\n    print s.max(nums)\n    nums = [1,2,3,4,5,6,7]\n    print s.max(nums)\n    nums = [1,2,3,4,5,6,7,8]\n    print s.max(nums)",
      -1.71875
    ],
    [
      "from collections import namedtuple\n\ndef max_element(tuple_records):\n    \"\"\"\n    :type tuple_records: list[namedtuple]\n    :rtype: int\n    \"\"\"\n    max_element = 0\n    for record in tuple_records:\n        if record.value > max_element:\n            max_element = record.value\n    return max_element",
      -1.85546875
    ],
    [
      "class Solution(object):\n    def max(self, arr):\n        \"\"\"\n        :type arr: List[List[int]]\n        :rtype: int\n        \"\"\"\n        max = arr[0][0]\n        for i in xrange(len(arr)):\n            if arr[i][0] > max:\n                max = arr[i][0]\n            if arr[i][1] > max:\n                max = arr[i][1]\n        return max",
      -1.8564453125
    ],
    [
      "class Solution(object):\n    def max(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        if not arr:\n            return 0\n        max_arr = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > max_arr:\n                max_arr = arr[i]\n        return max_arr",
      -2.15234375
    ],
    [
      "import collections\nfrom collections import Counter\n\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\ndef find_max(tuple_list):\n    max_count = 0\n    max_val = 0\n    for tup in tuple_list:\n        if Counter(tup) > max_count:\n            max_count = Counter(tup)\n            max_val = tup.x\n    return max_val\n\ndef find_max_2(tuple_list):\n    tuple_list = list(tuple_list)\n    tuple_list.sort(reverse=True)\n    max_val = tuple_list[0]\n    for tup in tuple_list[1:]:\n        if tup > max_val:\n            max_val = tup\n    return max_val\n\ndef find_max_3(tuple_list):\n    max_val = tuple_list[0]\n    for tup in tuple_list[1:]:\n        if tup > max_val:\n            max_val = tup\n    return max_val\n\ndef find_max_4(tuple_list):\n    max_val = tuple_list[0]\n    for tup in tuple_list:\n        if tup > max_val:\n            max_val = tup\n    return max_val\n\ndef find_max_5(tuple_list):\n    max_val = tuple_list[0]\n    for tup in tuple_list:\n        if tup > max_val:\n            max_val = tup\n    return max_val\n\ndef find_max_6(tuple_list):\n    max_val = tuple_list[0]\n    for tup in tuple_list:\n        if tup > max_val:\n            max_val = tup\n    return max_val\n\ndef find_max_7(tuple_list):\n    max_val = tuple_list[0]\n    for tup in tuple_list:\n        if tup > max_val:\n            max_val = tup\n    return max_val\n\ndef find_max_8(t",
      -2.341796875
    ],
    [
      "class Tuple(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    def __str__(self):\n        return 'Tuple({0.x}, {0.y}, {0.z})'.format(self)\n\ndef max_tuple(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: int\n    \"\"\"\n    if len(tuple_list) == 0:\n        return None\n    if len(tuple_list) == 1:\n        return tuple_list[0]\n    mid = len(tuple_list) / 2\n    max_tuple_left = max_tuple(tuple_list[:mid])\n    max_tuple_right = max_tuple(tuple_list[mid:])\n    return max(max_tuple_left, max_tuple_right)",
      -2.4296875
    ],
    [
      "import collections\n\ndef find_max(tuple_records):\n    \"\"\"\n    :type tuple_records: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    max_val = collections.defaultdict(lambda: 0)\n    for val in tuple_records:\n        max_val[val[0]] = max(max_val[val[0]], val[1])\n    return max(max_val.values())\n\n\nif __name__ == '__main__':\n    assert find_max([(1, 2), (2, 1), (3, 3)]) == 3\n    assert find_max([(1, 2), (2, 1), (3, 3), (3, 1)]) == 3",
      -2.76171875
    ],
    [
      "# https://www.hackerrank.com/challenges/max-tuple/problem\n\ndef find_max_tuple(arr):\n    max_val = 0\n    max_tuple = []\n\n    for i in arr:\n        if i[0] > max_val:\n            max_val = i[0]\n            max_tuple = [i[1], i[2], i[3]]\n\n    return max_tuple\n\nif __name__ == '__main__':\n    arr = [\n        (1, 1, 2),\n        (2, 2, 1),\n        (3, 1, 2),\n        (2, 3, 1),\n        (1, 1, 2),\n        (2, 2, 1),\n        (3, 1, 2),\n        (2, 3, 1)\n    ]\n    print find_max_tuple(arr)",
      -2.80078125
    ],
    [
      "import sys\n\ndef max_tuple(tuple_records):\n    \"\"\"\n    :type tuple_records: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # write your code here\n    max_element = None\n    for i in range(len(tuple_records)):\n        for j in range(len(tuple_records[i])):\n            if tuple_records[i][j] > max_element:\n                max_element = tuple_records[i][j]\n    return max_element\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    if len(sys.argv) == 2:\n        tuple_records = []\n        with open(sys.argv[1]) as f:\n            for line in f:\n                tuple_records.append(list(map(int, line.split())))\n        print(max_tuple(tuple_records))\n    else:\n        print(\"Invalid number of arguments\")\n\nif __name__ == '__main__':\n    main()",
      -2.96875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def max(self, nums):\n        if len(nums) == 0:\n            return 0\n        else:\n            return max(nums)\n\n    def max(self, nums):\n        if len(nums) == 0:\n            return 0\n        else:\n            return max(nums)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.max([1, 2, 3]))\n    print(s.max([4, 3, 2]))\n    print(s.max([2, 1, 2]))\n    print(s.max([2, 3, 1]))\n    print(s.max([2, 3, 4]))\n    print(s.max([-1, -2, -3]))\n    print(s.max([-1, -2, -3, -4]))",
      -3.1015625
    ],
    [
      "import heapq\n\n\ndef find_max_element(records):\n    \"\"\"\n    :type records: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not records:\n        return 0\n\n    heap = []\n    for record in records:\n        heapq.heappush(heap, (record[1], record[0], record[2]))\n\n    return heap[0][2]\n\n\nif __name__ == '__main__':\n    records = [\n        (1, 2, 3),\n        (1, 2, 4),\n        (2, 3, 4),\n        (2, 3, 5),\n        (3, 4, 5),\n        (4, 5, 6)\n    ]\n\n    print(find_max_element(records))",
      -3.2578125
    ],
    [
      "from collections import namedtuple\n\n\ndef max_tuple_record(tuple_records):\n    \"\"\"\n    :type tuple_records: List[Tuple]\n    :rtype: int\n    \"\"\"\n    return max_tuple_record_helper(tuple_records)\n\n\ndef max_tuple_record_helper(tuple_records):\n    max_record = None\n    for tuple_record in tuple_records:\n        if max_record is None or tuple_record[0] > max_record[0]:\n            max_record = tuple_record\n    return max_record[0]\n\n\nif __name__ == '__main__':\n    tuple_records = [\n        (1, 2, 3),\n        (5, 7, 9),\n        (3, 5, 7),\n        (1, 2, 3, 4, 5),\n        (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    ]\n    print(max_tuple_record(tuple_records))",
      -3.49609375
    ],
    [
      "def max_tuple(tuple_records):\n    max_val = -1\n    for t in tuple_records:\n        if t[0] > max_val:\n            max_val = t[0]\n        if t[1] > max_val:\n            max_val = t[1]\n    return max_val\n\nif __name__ == '__main__':\n    t1 = [1,2,3,4,5,6,7,8,9,10]\n    print max_tuple(t1)\n    t2 = [(1,2),(3,4),(5,6)]\n    print max_tuple(t2)\n    t3 = [(1,2,3),(2,3,4),(3,4,5),(4,5,6)]\n    print max_tuple(t3)\n    t4 = [(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8),(6,7,8,9),(7,8,9,10)]\n    print max_tuple(t4)\n    t5 = [(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8),(6,7,8,9),(7,8,9,10),(8,9,10,11)]\n    print max_tuple(t5)\n    t6 = [(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8),(6,7,8,9),(7,8,9,10),(8,9,10,11),(9,10,11,12)]\n    print max_tuple(t6)\n    t7 = [(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5",
      -3.720703125
    ],
    [
      "from collections import namedtuple\n\ndef max_tuple(records):\n    \"\"\"\n    :type records: List[tuple]\n    :rtype: int\n    \"\"\"\n    def max_element(tuple_records):\n        return max(tuple_records, key=lambda x: x[1])[0]\n    return max(map(max_element, records))\n\nif __name__ == \"__main__\":\n    records = [\n        (1, 2),\n        (3, 2),\n        (3, 1),\n        (2, 1),\n        (2, 3),\n        (1, 5),\n        (1, 4),\n        (1, 3),\n        (5, 1),\n        (4, 1),\n        (5, 1),\n        (1, 2)\n    ]\n    print(max_tuple(records))",
      -3.732421875
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = y\n\n\n# Your Tuple object will be instantiated and called as such:\n# obj = Tuple(x,y)\n# param_1 = obj.x\n# param_2 = obj.y\n\nclass Solution(object):\n    def maxTuple(self, records):\n        \"\"\"\n        :type records: List[Tuple]\n        :rtype: int\n        \"\"\"\n        # max_y = -1\n        # for record in records:\n        #     max_y = max(max_y, record.y)\n        # return max_y\n        return max(records, key=lambda x:x.y)",
      -3.908203125
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef max_element(records):\n    max_value = -sys.maxsize\n    max_index = 0\n    for index, value in enumerate(records):\n        if value > max_value:\n            max_value = value\n            max_index = index\n    return max_index\n\nif __name__ == '__main__':\n    records = [\n        (1, 2, 3),\n        (4, 5, 6),\n        (7, 8, 9)\n    ]\n    print max_element(records)",
      -4.05078125
    ],
    [
      "# https://leetcode.com/problems/maximum-number-of-equals-in-a-string/\n# Time:  O(n)\n# Space: O(1)\n\nclass Solution(object):\n    def maxEquals(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_num = nums[0]\n        for num in nums:\n            if num == max_num:\n                max_num = max(max_num, num)\n            else:\n                max_num = max(max_num, num)\n        return max_num",
      -4.14453125
    ],
    [
      "import sys\n\n\nclass Solution(object):\n    def maxValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums = sorted(nums)\n        return nums[-1]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.maxValue([1, 2, 3]))\n    print(sol.maxValue([1, 2, 3, 4, 5]))\n    print(sol.maxValue([1, 2, 3, 4, 5, 6]))\n    print(sol.maxValue([1, 2, 3, 4, 5, 6, 7]))\n    print(sol.maxValue([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(sol.maxValue([-1, -2, -3, -4, -5, -6, -7, -8]))\n    print(sol.maxValue([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\n    print(sol.maxValue([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n    print(sol.maxValue([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]))\n    print(sol.maxValue([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]))\n    print(sol.maxValue([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]))\n    print(sol.maxValue([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]))\n    print(sol.maxValue([-",
      -4.2265625
    ],
    [
      "# The tuple is a list of integers, where each integer is a single number.\n# Example:\n# \ttuple = [(1, 3), (2, 1), (3, 2)]\n# \tmax_value = max(tuple)\n# \treturn max_value\n\ndef find_max(tuple):\n    max_value = tuple[0]\n    for i in tuple:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n# ------------------------------------------------------------\n\n# The tuple is a list of integers, where each integer is a single number.\n# Example:\n# \ttuple = [(1, 3), (2, 1), (3, 2)]\n# \tmax_value = max(tuple)\n# \treturn max_value\n\ndef find_max_all(tuple):\n    max_value = tuple[0]\n    for i in tuple:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n\n# ------------------------------------------------------------\n\n# The tuple is a list of integers, where each integer is a single number.\n# Example:\n# \ttuple = [(1, 3), (2, 1), (3, 2)]\n# \tmax_value = max(tuple)\n# \treturn max_value\n\ndef find_max_all_2(tuple):\n    max_value = tuple[0]\n    for i in tuple:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n# ------------------------------------------------------------\n\n# The tuple is a list of integers, where each integer is a single number.\n# Example:\n# \ttuple = [(1, 3), (2, 1), (3, 2)]\n# \tmax_value = max(tuple)\n# \treturn max_value\n\ndef find_max_all_3(tuple):\n    max_value = tuple[0]\n    for i in tuple:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n\n# ------------------------------------------------------------\n\n# The tuple is a list of integers, where each integer is a single number.",
      -4.265625
    ],
    [
      "class Solution:\n    \"\"\"\n    @param: [0, 2, 1, 3, 4, 5, 6, 7]\n    @return: 5\n    \"\"\"\n    def max(self, nums):\n        max_num = max(nums)\n        max_pos = 0\n        for i in range(len(nums)):\n            if nums[i] >= max_num:\n                max_num = nums[i]\n                max_pos = i\n        return max_num\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.max([0, 2, 1, 3, 4, 5, 6, 7])",
      -4.35546875
    ],
    [
      "# Your function should return the maximum value in the given array.\n# If the array is empty, return 0.\n# If the array is not a tuple, return -1.\n# If the array is a tuple, return the maximum value in the tuple.\n\ndef max_element(arr):\n    if not arr:\n        return 0\n    elif not isinstance(arr, tuple):\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_val = max(arr)\n        for val in arr:\n            if val > max_val:\n                max_val = val\n        return max_val\n\nprint(max_element([(1,2),(2,3),(2,4)]))\n#>>> 4\nprint(max_element([(1,2),(2,3)]))\n#>>> 2\nprint(max_element([(1,2),(2,3),(3,4)]))\n#>>> 4\nprint(max_element([(1,2),(2,3),(3,4),(4,5)]))\n#>>> 5",
      -4.4765625
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\n    def __repr__(self):\n        return '%s:%s' % (self.x, self.y)\n\nclass Solution(object):\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max = 0\n        for t in tuples:\n            max = max if t.x > max else max\n            max = max if t.y > max else max\n        return max\n\n# Note:\n# The solution above is not correct.\n# The solution below is correct.\n# https://leetcode.com/problems/maximum-tuple/discuss/243501/C%2B%2B-Python-Solution-Easy\nclass Solution2(object):\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max = 0\n        for t in tuples:\n            max = max if t.x > max else max\n            max = max if t.y > max else max\n        return max",
      -4.5390625
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = y\n\nclass Solution(object):\n    def maxTuple(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        dp = [0] * n\n        max_dp = 0\n        for i in range(n):\n            max_dp = max(max_dp, dp[i])\n            dp[i] = max(dp[i], nums[i].x) + nums[i].y\n        return max_dp",
      -4.65234375
    ],
    [
      "def max(tuple_records):\n    max_val = None\n    for record in tuple_records:\n        if max_val is None or record[0] > max_val:\n            max_val = record[0]\n    return max_val\n\nif __name__ == '__main__':\n    tuple_records = [\n        (1, 2, 3),\n        (4, 5, 6),\n        (7, 8, 9),\n        (10, 11, 12),\n        (13, 14, 15),\n        (16, 17, 18),\n        (19, 20, 21),\n        (22, 23, 24),\n        (25, 26, 27),\n        (28, 29, 30),\n        (31, 32, 33),\n        (34, 35, 36),\n        (37, 38, 39),\n        (40, 41, 42),\n        (43, 44, 45),\n        (46, 47, 48),\n        (49, 50, 51),\n        (52, 53, 54),\n        (55, 56, 57),\n        (58, 59, 60),\n        (61, 62, 63),\n        (64, 65, 66),\n        (67, 68, 69),\n        (70, 71, 72),\n        (73, 74, 75),\n        (76, 77, 78),\n        (79, 80, 81),\n        (82, 83, 84),\n        (85, 86, 87),\n        (88, 89, 90),\n        (91, 92, 93),\n        (94, 95, 96),\n        (97, 98, 99),\n        (100, 101, 102),\n        (103, 104, 105),\n        (106, 107, 108),\n        (109, 110, 111),\n        (112, 113, 114),\n        (115, 116, 117),\n        (118, 119, 120),\n        (121, 122, 123),\n        (124, 125, 126),\n        (127, 128, 129),\n        (130, 131, 132),\n        (133, 134, 135),\n        (136, 137, 138),\n        (139, 140, 141),\n        (142, 143,",
      -5.40234375
    ],
    [
      "# https://leetcode.com/problems/max-of-all-subtract-one-records-from-each-other/\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        max_so_far = nums[0]\n        max_so_far = nums[0]\n        for num in nums:\n            max_so_far = max(max_so_far, num)\n            max_so_far = max(max_so_far, num - 1)\n        return max_so_far\n\n    def maxSubArray_2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        max_so_far = nums[0]\n        max_so_far = nums[0]\n        for num in nums:\n            max_so_far = max(max_so_far, num)\n            max_so_far = max(max_so_far, num - nums[-1])\n        return max_so_far\n\nif __name__ == '__main__':\n    nums = [1, 1, -1, -3, -1, 1]\n    print(Solution().maxSubArray(nums))\n    nums = [1, 1, 1, 1]\n    print(Solution().maxSubArray(nums))\n    nums = [1, 1, 1, 1]\n    print(Solution().maxSubArray_2(nums))\n    nums = [1, 1, 1, 1]\n    print(Solution().maxSubArray_2(nums))",
      -5.46484375
    ],
    [
      "def max_element(tuple_records):\n    \"\"\"\n    Input: tuple records of the format (a, b, c), where a, b, c are integers\n    Output: the maximum element of the tuple records\n    \"\"\"\n    \n    # The following code is the brute force way of doing this\n    # The time complexity is O(n^2) where n is the number of tuple records\n    max_element = -sys.maxsize\n    for tuple_record in tuple_records:\n        max_element = max(max_element, tuple_record[0])\n        max_element = max(max_element, tuple_record[1])\n        max_element = max(max_element, tuple_record[2])\n    return max_element\n\n\nif __name__ == \"__main__\":\n    # Tests\n    tests = [\n        ([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 1),\n        ([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 3),\n        ([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 5),\n        ([(1, 2, 3), (2, 3, 4), (3, 4, 5)], sys.maxsize),\n        ([(1, 2, 3), (2, 3, 4), (3, 4, 5)], -sys.maxsize),\n        ([(1, 2, 3), (2, 3, 4), (3, 4, 5)], -1),\n        ([], 0),\n        ([(1, 2, 3), (2, 3, 4), (3, 4, 5)], -1),\n        ([(1, 2, 3), (2, 3, 4), (3, 4, 5)], -1),\n    ]\n    for test in tests:\n        assert max_element(test[0]) == test[1]",
      -5.68359375
    ],
    [
      "def max_tuple(records):\n    \"\"\"\n    :type records: List[tuple]\n    :rtype: int\n    \"\"\"\n    if not records:\n        return 0\n    max_value = records[0][0]\n    for record in records:\n        if record[0] > max_value:\n            max_value = record[0]\n    return max_value\n\n# test cases\nrecords = [\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2,3),\n    (1,2",
      -6.12109375
    ],
    [
      "class Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = y\n        self.z = z\n\nclass Solution(object):\n    def max(self, record):\n        \"\"\"\n        :type record: List[Tuple]\n        :rtype: int\n        \"\"\"\n        max_x = 0\n        max_y = 0\n        max_z = 0\n        for record_tuple in record:\n            max_x = max(max_x, record_tuple.x)\n            max_y = max(max_y, record_tuple.y)\n            max_z = max(max_z, record_tuple.z)\n        return max(max_x, max(max_y, max_z))",
      -6.2734375
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def max(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        return max(self.max(nums[1:]), self.max(nums[:-1]))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1,2,3,4,5,6,7]\n    print(s.max(nums))\n    nums = [1,2,3,4,5]\n    print(s.max(nums))\n    nums = [1]\n    print(s.max(nums))\n    nums = []\n    print(s.max(nums))\n    nums = [1,2,3,4]\n    print(s.max(nums))\n    nums = [1,2,3,4,5,6,7,8]\n    print(s.max(nums))",
      -6.37890625
    ],
    [
      "class Solution:\n    # @param {List<List<Integer>>} lists\n    # @return {Integer}\n    def max(self, lists):\n        if len(lists) == 0:\n            return None\n        if len(lists) == 1:\n            return lists[0][0]\n        max_value = lists[0][0]\n        for list in lists:\n            max_value = max(max_value, list[0])\n        return max_value\n\n    # @param {List<List<Integer>>} lists\n    # @return {Integer}\n    def max(self, lists):\n        if len(lists) == 0:\n            return None\n        max_value = lists[0][0]\n        for list in lists:\n            max_value = max(max_value, list[0])\n        return max_value",
      -6.45703125
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n\nclass Solution(object):\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: int\n        \"\"\"\n        if not tuples:\n            return 0\n        max_x = max_y = 0\n        for t in tuples:\n            max_x = max(max_x, t.x)\n            max_y = max(max_y, t.y)\n        return max(max_x, max_y)\n\nif __name__ == \"__main__\":\n    t = Tuple(-1, 1)\n    t2 = Tuple(2, -1)\n    t3 = Tuple(1, 1)\n    t4 = Tuple(1, -1)\n    t5 = Tuple(1, 1)\n    t6 = Tuple(-1, -1)\n    t7 = Tuple(1, -1)\n    t8 = Tuple(-1, 1)\n    t9 = Tuple(-1, -1)\n    t10 = Tuple(0, -1)\n    t11 = Tuple(0, 0)\n    t12 = Tuple(0, 0)\n    t13 = Tuple(0, 0)\n    t14 = Tuple(0, 0)\n    t15 = Tuple(0, 0)\n    t16 = Tuple(0, 0)\n    t17 = Tuple(0, 0)\n    t18 = Tuple(0, 0)\n    t19 = Tuple(0, 0)\n    t20 = Tuple(0, 0)\n    t21 = Tuple(0, 0)\n    t22 = Tuple(0, 0)\n    t23 = Tuple(0, 0)\n    t24 = Tuple(0, 0)\n    t25 = Tuple(0, 0)\n    t26 = Tuple(0, 0)\n    t27 = Tuple(0, 0)\n    t28 = Tuple(0, 0)",
      -6.74609375
    ],
    [
      "# https://leetcode.com/problems/maximum-of-all-numbers/discuss/115925/Python-Python-Recursion-with-list-of-tuples\n\nclass Solution:\n    def max(self, A):\n        if not A:\n            return 0\n\n        return max(self.max(A[:-1]), A[-1])\n\n    def maxRecur(self, A):\n        max_val = -float('inf')\n        for x in A:\n            max_val = max(max_val, x)\n        return max_val\n\n    def maxRecur2(self, A):\n        max_val = -float('inf')\n        for i in range(len(A)):\n            max_val = max(max_val, A[i])\n\n        return max_val\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.maxRecur2([1,2,3,4,5]))\n    print(s.maxRecur([1,2,3,4,5]))\n    print(s.maxRecur([[1,2],[3,4],[5,6]]))",
      -7.14453125
    ],
    [
      "import collections\n\ndef max_tuple(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: int\n    \"\"\"\n    max_val = None\n    max_index = None\n    for index, val in enumerate(tuple_list):\n        if max_val is None:\n            max_val = val\n            max_index = index\n        else:\n            if val > max_val:\n                max_val = val\n                max_index = index\n    return max_val, max_index\n\n\ndef max_tuple2(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: int\n    \"\"\"\n    def max_val(tuple_list, index):\n        max_val = None\n        for i, val in enumerate(tuple_list):\n            if max_val is None:\n                max_val = val\n                max_index = i\n            elif val > max_val:\n                max_val = val\n                max_index = i\n        return max_val, max_index\n\n    def max_val_rec(tuple_list, index):\n        max_val = None\n        for i, val in enumerate(tuple_list):\n            if max_val is None:\n                max_val = val\n                max_index = i\n            elif val > max_val:\n                max_val = val\n                max_index = i\n        return max_val, max_index\n\n    max_val_list, max_index_list = max_val(tuple_list, 0), 0\n    max_val_rec_list, max_index_rec_list = max_val_rec(tuple_list, 0), 0\n    for i in range(1, len(tuple_list)):\n        max_val_list, max_index_list = max_val(tuple_list, i), i\n        max_val_rec_list, max_index_rec_list = max_val_rec(tuple_list, i), i\n        if max_val_list is None or max_val_rec_list",
      -8.25
    ],
    [
      "class Tuple(object):\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\ndef max_tuple(tuples):\n    \"\"\"\n    :type tuples: List[Tuple]\n    :rtype: Tuple\n    \"\"\"\n    def max_tuple_rec(rec, max_tuple_rec):\n        if rec.a > max_tuple_rec.a:\n            max_tuple_rec.a = rec.a\n        if rec.b > max_tuple_rec.b:\n            max_tuple_rec.b = rec.b\n        if rec.c > max_tuple_rec.c:\n            max_tuple_rec.c = rec.c\n        return max_tuple_rec\n\n    max_tuple_rec = max_tuple_rec(tuples[0], max_tuple_rec(tuples[0], Tuple(0, 0, 0)))\n    for i in range(1, len(tuples)):\n        max_tuple_rec = max_tuple_rec(tuples[i], max_tuple_rec(tuples[i], Tuple(tuples[i].a, tuples[i].b, tuples[i].c)))\n    return max_tuple_rec\n\nclass Solution(object):\n    def maxTuple(self, tuples):\n        \"\"\"\n        :type tuples: List[Tuple]\n        :rtype: Tuple\n        \"\"\"\n        return max_tuple(tuples)",
      -8.546875
    ],
    [
      "# https://leetcode.com/problems/maximum-of-all-subtracts/discuss/82738/C-Python-Python-2-5-solution\n\nimport heapq\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_so_far = nums[0]\n        max_heap = []\n        heapq.heappush(max_heap, (0, nums[0]))\n        for num in nums[1:]:\n            curr_max = max(max_heap[0][1] - num, max_heap[0][1])\n            heapq.heappush(max_heap, (curr_max - num, curr_max))\n            max_so_far = max(max_so_far, curr_max)\n        return max_so_far\n\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_so_far = nums[0]\n        max_heap = []\n        heapq.heappush(max_heap, (0, nums[0]))\n        for num in nums[1:]:\n            curr_max = max(max_heap[0][1] - num, max_heap[0][1])\n            heapq.heappush(max_heap, (curr_max - num, curr_max))\n            max_so_far = max(max_so_far, curr_max)\n        return max_so_far\n\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_so_far = nums[0]\n        max_he",
      -9.1875
    ],
    [
      "from collections import defaultdict\n\nclass Solution:\n    # @param {integer[][]} nums\n    # @return {integer}\n    def max(self, nums):\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0][0]\n\n        # dp[i][j] is the maximum value of a tuple with length i and value j\n        # dp[i][0] is the maximum value of a tuple with length i\n        dp = defaultdict(lambda: defaultdict(lambda: 0))\n\n        for i in xrange(n):\n            for j in xrange(n):\n                # max(0, max(0, nums[i][j]))\n                max_val = max(0, dp[i][j])\n                max_val = max(max_val, dp[i][0])\n                max_val = max(max_val, nums[i][j])\n                dp[i][j] = max_val\n\n        return dp[0][0]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.max([[1, 2], [1, 1], [1, 1], [1, 1], [1, 2]])\n    print sol.max([[1, 2], [1, 1], [1, 1], [1, 1], [1, 2]])",
      -9.6796875
    ],
    [
      "import collections\n\nclass Solution:\n    def max(self, arr):\n        \"\"\"\n        :type arr: List[List[int]]\n        :rtype: int\n        \"\"\"\n        def find(arr, i):\n            if i < 0:\n                return 0\n            if arr[i][0] > arr[i][1]:\n                return arr[i][0]\n            return max(arr[i][0], arr[i][1])\n\n        max_val = -1\n        max_i = -1\n        for i in range(len(arr)):\n            max_val = max(max_val, find(arr, i))\n            if max_val > arr[i][0]:\n                max_i = i\n                max_val = arr[i][0]\n\n        return max_i\n\n\nif __name__ == '__main__':\n    arr = [[2,5,1,6],[1,2,1,5],[1,1,1,1,1,2,2],[1,2,3,4,5,1]]\n    arr = [[3,4,1,2],[2,3,4,1],[2,3,1,2]]\n    arr = [[1,2,3],[3,4,5,6],[1,2,3,4,5,6,7]]\n    arr = [[1,2,3,4],[2,3,4,5]]\n    arr = [[1,2,3,4],[1,2,3,4,5,6,7]]\n    arr = [[1,2,3,4,5],[2,3,4,5,6,7]]\n    arr = [[1,2,3,4,5],[2,3,4,5,6,7]]\n    arr = [[1,2,3,4,5],[2,3,4,5,6,7]]\n    arr = [[1,2,3,4,5],[2,3,4,5,6,7]]\n    arr = [[1,2,3,4,5],[2,3,4,5,6,7]]\n    arr = [[1,2,3,4,5],[2,3,4",
      -9.734375
    ],
    [
      "class Solution(object):\n    def max(self, records):\n        \"\"\"\n        :type records: List[List[int]]\n        :rtype: int\n        \"\"\"\n        return max(records, key=lambda x: max(x))[0]\n\nif __name__ == '__main__':\n    sol = Solution()\n    records = [[1,2,3],[1,2],[1,2,3]]\n    print(sol.max(records))\n    records = [[-1,-2,3],[-2,-3],[-3,-1,-2]]\n    print(sol.max(records))\n    records = [[1,2,3,4],[-1,-2,-3,4],[1,2,3,4]]\n    print(sol.max(records))\n    records = [[1,2,3,4],[-1,-2,-3,4],[1,2,3,4,5]]\n    print(sol.max(records))",
      -10.515625
    ],
    [
      "class Tuple(object):\n    def __init__(self, data):\n        self.data = data\n    def __str__(self):\n        return \"(\" + \",\".join(str(d) for d in self.data) + \")\"\n\nclass TupleRecords(object):\n    def __init__(self, records):\n        self.records = records\n    def __str__(self):\n        return \"(\" + \",\".join(str(r) for r in self.records) + \")\"\n\ndef max_element(tuples):\n    if not tuples:\n        return None\n    if len(tuples) == 1:\n        return tuples[0]\n    t = TupleRecords(tuples)\n    return max(map(lambda t: t.data, filter(lambda x: x!= None, map(lambda t: max(map(lambda x: x[0], x[1:])), enumerate(t.records))))).data\n\nif __name__ == \"__main__\":\n    tuples = [(1, (2, 3, 4)), (2, (3, 4, 5)), (3, (4, 5, 6)), (4, (5, 6, 7)), (5, (6, 7, 8)), (6, (7, 8, 9)), (7, (8, 9, 10)), (8, (9, 10, 11)), (9, (10, 11, 12)), (10, (11, 12, 13)), (11, (12, 13, 14)), (12, (13, 14, 15)), (13, (14, 15, 16)), (14, (15, 16, 17)), (15, (16, 17, 18)), (16, (17, 18, 19)), (17, (18, 19, 20)), (18, (19, 20, 21)), (19, (20, 21, 22)), (20, (21, 22, 23)), (21, (22, 23, 24)), (22, (23, 24, 25)), (23, (24, 25, 26)), (24, (25, 26, 27)), (25, (26, 27, 28)), (26, (27, 28, 29)), (27, (28",
      -11.1796875
    ],
    [
      "import collections\n\nclass Solution:\n    \"\"\"\n    @param: A list of ListNode\n    @return: A ListNode\n    \"\"\"\n    def findMaxNode(self, head):\n        if head is None or head.next is None:\n            return head\n        else:\n            # Create a dict to store the max value\n            dictMax = collections.defaultdict(lambda: -sys.maxsize)\n            # Create a list to store the max value\n            listMax = []\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n            # Create a list to store the max value\n            listMax.append(-sys.maxsize)\n\n            # Create a list to store the max value",
      -13.078125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}