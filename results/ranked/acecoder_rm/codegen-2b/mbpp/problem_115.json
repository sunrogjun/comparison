{
  "problem": {
    "task_id": "MBPP/126",
    "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
    "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
    "test_list": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ],
    "challenge_test_list": [],
    "problem_id": 115
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def find_sum_of_common_divisors(n1, n2):\n    '''\n    n1 and n2 are both positive integers.\n\n    Return the sum of common divisors of n1 and n2.\n\n    Example:\n\n    >>> find_sum_of_common_divisors(7, 9)\n    6\n    >>> find_sum_of_common_divisors(21, 25)\n    7\n    >>> find_sum_of_common_divisors(10, 15)\n    2\n    >>> find_sum_of_common_divisors(12, 17)\n    3\n\n    Note:\n    The sum of all common divisors of two numbers is equal to the number of all\n    the common factors of those numbers.\n    '''\n\n    return sum([i for i in range(1, min(n1, n2)+1) if n1 % i == 0 and n2 % i == 0])\n\nif __name__ == '__main__':\n    print(find_sum_of_common_divisors(7, 9))\n    print(find_sum_of_common_divisors(21, 25))\n    print(find_sum_of_common_divisors(10, 15))\n    print(find_sum_of_common_divisors(12, 17))",
      7.26171875
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    :param a: First number\n    :param b: Second number\n    :return: Sum of the common divisors of a and b\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a == b + 1:\n        return 2\n    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return sum_of_common_divisors(b, a / b)\n    else:\n        return sum_of_common_divisors(a - 1, b) + sum_of_common_divisors(a, b - 1)\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(sum_of_common_divisors(a, b))\n\nif __name__ == \"__main__\":\n    main()",
      3.0390625
    ],
    [
      "import math\n\ndef find_sum_of_common_divisors(n1, n2):\n    \"\"\"\n    n1 and n2 are integers.\n    Returns the sum of common divisors of n1 and n2.\n    \"\"\"\n    n = max(n1, n2)\n    result = 0\n    for i in range(1, n):\n        if n1 % i == 0 and n2 % i == 0:\n            result += i\n    return result\n\ndef test_find_sum_of_common_divisors():\n    assert(find_sum_of_common_divisors(4, 6) == 2)\n    assert(find_sum_of_common_divisors(6, 4) == 2)\n    assert(find_sum_of_common_divisors(4, 4) == 4)\n    assert(find_sum_of_common_divisors(8, 4) == 2)\n    assert(find_sum_of_common_divisors(6, 8) == 2)\n    assert(find_sum_of_common_divisors(6, 6) == 6)\n    assert(find_sum_of_common_divisors(5, 10) == 5)\n    assert(find_sum_of_common_divisors(5, 5) == 5)\n    assert(find_sum_of_common_divisors(15, 10) == 5)\n    assert(find_sum_of_common_divisors(15, 15) == 15)\n\ndef main():\n    test_find_sum_of_common_divisors()\n\nif __name__ == '__main__':\n    main()",
      2.521484375
    ],
    [
      "def sum_common_divisors(a, b):\n    if a == 0 or b == 0:\n        return 0\n\n    if a == b:\n        return a\n\n    if a < b:\n        return sum_common_divisors(b, a)\n\n    if a > b:\n        return sum_common_divisors(a, b)\n\n    # If a and b are same, then return a + b\n    return a + b\n\nprint(sum_common_divisors(3, 9))",
      2.306640625
    ],
    [
      "# https://www.hackerrank.com/challenges/sorting-divisors/problem\n\n# @author: daniel\n# @since: 27/08/17\n\nimport math\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    a: int\n    b: int\n    \"\"\"\n\n    # return sum([divisor for divisor in range(1, int(math.sqrt(max(a, b)) + 1)) if a % divisor == 0 and b % divisor == 0])\n\n    return sum([divisor for divisor in range(1, int(math.sqrt(max(a, b)) + 1)) if a % divisor == 0 or b % divisor == 0])\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(sum_common_divisors(a, b))",
      1.1552734375
    ],
    [
      "def sumOfCommonDivisors(a, b):\n    \"\"\"\n    sumOfCommonDivisors(a, b) -> int\n    a, b: integers\n    \"\"\"\n    result = 1\n    divisors = [1]\n    for i in range(2, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            result *= i\n            divisors.append(i)\n    return result\n\nprint sumOfCommonDivisors(5, 10)",
      0.908203125
    ],
    [
      "def sum_common_divisors(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return m\n    if m == 0:\n        return n\n    if m == 1:\n        return n\n    if n < m:\n        n, m = m, n\n    common_divisors = 0\n    for i in range(1, min(n, m) + 1):\n        if n % i == 0 and m % i == 0:\n            common_divisors += i\n    return common_divisors\n\n\nif __name__ == '__main__':\n    print sum_common_divisors(6, 7)\n    print sum_common_divisors(8, 9)\n    print sum_common_divisors(8, 12)\n    print sum_common_divisors(8, 13)",
      0.826171875
    ],
    [
      "def find_common_divisors(num1, num2):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    if num1 < num2:\n        return find_common_divisors(num2, num1)\n    if num1 == num2:\n        return num1\n    if num1 == 0 or num2 == 0:\n        return 0\n    if num1 < 0 or num2 < 0:\n        num1 = abs(num1)\n        num2 = abs(num2)\n    divisors = [1]\n    for i in range(1, num1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    print(find_common_divisors(2, 3))\n    print(find_common_divisors(4, 6))\n    print(find_common_divisors(5, 6))",
      0.7119140625
    ],
    [
      "#!/usr/bin/python\n\ndef sum_common_divisors(n, m):\n    \"\"\"\n    Sum of common divisors of two given numbers\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    return sum(divisors(n) & divisors(m))\n\ndef divisors(n):\n    \"\"\"\n    Divisors of given number\n    :param n:\n    :return:\n    \"\"\"\n    d = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            d.add(i)\n            d.add(n/i)\n    return d\n\nn = 100\nm = 10\nprint sum_common_divisors(n, m)",
      0.6640625
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    :param a: First number\n    :param b: Second number\n    :return: Sum of common divisors of a and b\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n\n    sum_of_divisors = 0\n    for i in range(1, min(a, b) + 1):\n        if (a % i) == 0 and (b % i) == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\n\ndef sum_of_common_divisors_2(a, b):\n    \"\"\"\n    :param a: First number\n    :param b: Second number\n    :return: Sum of common divisors of a and b\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n\n    sum_of_divisors = 0\n    for i in range(1, min(a, b) + 1):\n        if (a % i) == 0 and (b % i) == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\n\ndef sum_of_common_divisors_3(a, b):\n    \"\"\"\n    :param a: First number\n    :param b: Second number\n    :return: Sum of common divisors of a and b\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n\n    sum_of_divisors = 0\n    for i in range(1, min(a, b) + 1):\n        if (a % i) == 0 and (b % i) == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\n\ndef sum_of_common_divisors_4(a, b):\n    \"\"\"\n    :param a: First number\n    :param b: Second number\n    :return: Sum of common divisors of a and b\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n\n    sum_of_divisors = 0\n    for i in range(1, min(a,",
      0.465576171875
    ],
    [
      "def find_sum_of_common_divisors(n1, n2):\n    \"\"\"\n    >>> find_sum_of_common_divisors(12, 23)\n    3\n    >>> find_sum_of_common_divisors(1, 2)\n    2\n    >>> find_sum_of_common_divisors(12, 21)\n    3\n    >>> find_sum_of_common_divisors(1, 2)\n    2\n    >>> find_sum_of_common_divisors(12, 21)\n    3\n    \"\"\"\n    n1_divs = [i for i in range(1, n1+1) if n1 % i == 0]\n    n2_divs = [i for i in range(1, n2+1) if n2 % i == 0]\n    common_divisors = set(n1_divs).intersection(set(n2_divs))\n    return sum(common_divisors)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.447265625
    ],
    [
      "def get_sum_of_common_divisors(a, b):\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return sum(get_sum_of_common_divisors(a, b % a)) + \\\n            sum(get_sum_of_common_divisors(b, a % b))\n\nif __name__ == \"__main__\":\n    print(get_sum_of_common_divisors(4, 6))",
      0.438720703125
    ],
    [
      "def sumCommonDivisors(x, y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    sum = 0\n    while x!= 0 and y!= 0:\n        if x % y == 0:\n            sum += y\n            x = x / y\n            y = y / x\n    return sum\n\nif __name__ == '__main__':\n    print sumCommonDivisors(5, 10)",
      0.412841796875
    ],
    [
      "def common_divisors(a, b):\n    # base case\n    if a == 0 or b == 0:\n        return 0\n\n    # Recursive case\n    if a == 1 or b == 1:\n        return 1\n\n    # Recursive case\n    if a % 2 == 0 and b % 2 == 0:\n        return a + b\n    elif a % 2 == 0 and b % 2 == 1:\n        return a + b\n    elif a % 2 == 1 and b % 2 == 0:\n        return a + b\n    elif a % 2 == 1 and b % 2 == 1:\n        return a + b\n\n    return common_divisors(a - 1, b - 1) + common_divisors(a, b - 1)\n\n\n\na = input()\nb = input()\nprint(common_divisors(a, b))",
      0.3916015625
    ],
    [
      "def sum_of_common_divisors(number1, number2):\n    divisors = [1]\n    for i in range(1, int(number2)):\n        if number1 % i == 0:\n            divisors.append(i)\n            if number2 % i == 0:\n                divisors.append(i)\n    return sum(divisors)\n\nprint sum_of_common_divisors(6, 7)",
      0.096435546875
    ],
    [
      "def find_common_divisors(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a == b:\n        return 1\n    l = []\n    while a > 0:\n        if a % b == 0:\n            l.append(a / b)\n            a = a / b\n        else:\n            a = a - b\n    if a == 0:\n        return l\n    return l\n\n# Your code here",
      0.05023193359375
    ],
    [
      "# Calculate the sum of common divisors\ndef sumOfCommonDivisors(n, m):\n    # Base case\n    if n == 0 or m == 0:\n        return 0\n\n    # Base case\n    if n == 1 or m == 1:\n        return 1\n\n    # Recursive case\n    return sumOfCommonDivisors(n - 1, m) + sumOfCommonDivisors(n, m - 1)\n\n# Test cases\n#n = 2, m = 3\n#>>> sumOfCommonDivisors(n, m)\n#6\n#\n#n = 3, m = 3\n#>>> sumOfCommonDivisors(n, m)\n#9\n#\n#n = 2, m = 5\n#>>> sumOfCommonDivisors(n, m)\n#11\n#\n#n = 5, m = 5\n#>>> sumOfCommonDivisors(n, m)\n#25",
      0.02398681640625
    ],
    [
      "def sum_common_divisors(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    if n1 == n2:\n        return 0\n    if n1 < n2:\n        return sum_common_divisors(n2, n1)\n    if n1 == 1:\n        return 1\n    if n2 == 1:\n        return 1\n    if n1 == 2:\n        return 2\n    if n2 == 2:\n        return 2\n    if n1 == 3:\n        return 3\n    if n2 == 3:\n        return 3\n    divisors = [1]\n    for i in range(2, n1):\n        if n1 % i == 0 and n2 % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    print(sum_common_divisors(6, 9))",
      0.01544189453125
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    :param a: first number\n    :param b: second number\n    :return: sum of common divisors\n    \"\"\"\n    return sum(i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0)\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print sum_of_common_divisors(4, 6)\n\nif __name__ == \"__main__\":\n    main()",
      -0.04266357421875
    ],
    [
      "def find_sum_of_common_divisors(x, y):\n    \"\"\"\n    :param x: int\n    :param y: int\n    :return: int\n    \"\"\"\n    if x == y:\n        return x\n    if x % y == 0:\n        return y\n    if y % x == 0:\n        return x\n    return find_sum_of_common_divisors(x, y - x) + find_sum_of_common_divisors(y, x - y)\n\nprint find_sum_of_common_divisors(4, 6)",
      -0.26025390625
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    sum_of_common_divisors(a, b) -> int\n    sum_of_common_divisors(a, b) calculates the sum of all common divisors of a and b.\n    \"\"\"\n    return sum(divisors(a, b))\n\ndef divisors(n, p):\n    \"\"\"\n    divisors(n, p) -> list of int\n    divisors(n, p) returns a list of all divisors of n.\n    \"\"\"\n    divisors = []\n    if n < p:\n        return []\n    if n == p:\n        return [1]\n    if n == 1:\n        return []\n    if n % p == 0:\n        divisors.append(p)\n        return divisors\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.extend(divisors(n // i, p))\n    return divisors",
      -0.26318359375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nGiven two numbers n and m, find the sum of all common divisors of n and m.\n\"\"\"\n\ndef common_divisors(n, m):\n    if n == 0 or m == 0:\n        return 0\n    return sum(1 for i in range(1, min(n, m) + 1) if n % i == 0 and m % i == 0)\n\nprint common_divisors(2, 3)",
      -0.6171875
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return 1\n    if a > b:\n        return sum_of_common_divisors(b, a)\n    return sum(1 for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0)\n\nif __name__ == \"__main__\":\n    print(sum_of_common_divisors(2, 3))",
      -0.69873046875
    ],
    [
      "def sum_common_divisors(n1, n2):\n    sum = 0\n    for i in range(1, n1 + 1):\n        if n1 % i == 0 and n2 % i == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    n1 = int(input(\"Enter number 1: \"))\n    n2 = int(input(\"Enter number 2: \"))\n    print(\"The sum of the common divisors of {} and {} is {}.\".format(n1, n2, sum_common_divisors(n1, n2)))",
      -0.85595703125
    ],
    [
      "def sum_of_common_divisors(a, b):\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nprint(sum_of_common_divisors(6, 12))",
      -0.85595703125
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Input:\n        a, b - two given numbers\n    Output:\n        The sum of common divisors of a and b.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)",
      -0.85693359375
    ],
    [
      "def sum_of_common_divisors(n1, n2):\n    n = n1\n    sum = 0\n    while n!= 0:\n        while n % n1 == 0:\n            n /= n1\n            sum += 1\n        while n % n2 == 0:\n            n /= n2\n            sum += 1\n    return sum",
      -0.85693359375
    ],
    [
      "def get_common_divisors(a, b):\n\t\"\"\"\n\tFinds the common divisors of two numbers.\n\t\"\"\"\n\treturn [a,b]\n\n\ndef main():\n\ta = int(input())\n\tb = int(input())\n\n\tsum_of_divisors = 0\n\tfor c in get_common_divisors(a, b):\n\t\tsum_of_divisors += c\n\tprint(sum_of_divisors)\n\n\nif __name__ == '__main__':\n\tmain()",
      -0.85693359375
    ],
    [
      "def sum_of_common_divisors(num1, num2):\n    if num1 == 0 or num2 == 0:\n        return 0\n    if num1 == num2:\n        return num1\n    s = 0\n    for i in range(1, max(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            s += i\n    return s\n\nprint(sum_of_common_divisors(7, 3))\nprint(sum_of_common_divisors(14, 4))\nprint(sum_of_common_divisors(10, 6))",
      -0.85693359375
    ],
    [
      "from __future__ import print_function\n\ndef find_sum_of_common_divisors(n1, n2):\n    # your code here\n    if n1 == n2:\n        return n1\n    n1, n2 = max(n1, n2), min(n1, n2)\n    s = 0\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if i % j == 0 and i!= j:\n                s += j\n    return s\n\nif __name__ == \"__main__\":\n    print(find_sum_of_common_divisors(20, 40))",
      -0.85693359375
    ],
    [
      "def common_divisors(a, b):\n    \"\"\"\n    Calculate the sum of all the common divisors of both numbers.\n    \"\"\"\n    return sum(a if i % b == 0 else 0 for i in range(1, a + 1))\n\n\nif __name__ == \"__main__\":\n    print(common_divisors(5, 7))\n    print(common_divisors(5, 8))\n    print(common_divisors(5, 9))\n    print(common_divisors(5, 11))\n    print(common_divisors(5, 12))\n    print(common_divisors(5, 13))",
      -0.85791015625
    ],
    [
      "def find_sum_of_common_divisors(n, m):\n    \"\"\"\n    n and m are positive integers.\n    Return the sum of all common divisors of n and m.\n    \"\"\"\n    return sum(i for i in range(1, min(n, m)+1) if n % i == 0 and m % i == 0)\n\n\nprint(find_sum_of_common_divisors(10, 20))",
      -0.85791015625
    ],
    [
      "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    num1, num2 = abs(num1), abs(num2)\n    if num1 == num2:\n        return num1\n    if num1 % num2 == 0:\n        return num1 / num2\n    if num2 % num1 == 0:\n        return num2 / num1\n    if num1 > num2:\n        return sum_of_common_divisors(num2, num1)\n    return sum_of_common_divisors(num1, num2)\n\nprint(sum_of_common_divisors(15, 34))",
      -0.85791015625
    ],
    [
      "def common_divisors(a, b):\n    '''\n    Find the sum of common divisors of a and b.\n    '''\n    # Sum of all the possible divisors of a.\n    s = sum(a)\n    # Sum of all the possible divisors of b.\n    t = sum(b)\n    # Sum of all the possible divisors of a and b.\n    res = s + t - (a*b)\n    return res\n\nprint(common_divisors(2, 3))",
      -0.85791015625
    ],
    [
      "def sum_of_common_divisors(a, b):\n    # return 0 if a or b is not an integer\n    if a is None or b is None:\n        return None\n    # return the sum of all the common divisors of a and b\n    return sum(x for x in range(1, min(a, b)+1) if a % x == 0 and b % x == 0)\n\nif __name__ == '__main__':\n    print(sum_of_common_divisors(4, 6))\n    print(sum_of_common_divisors(10, 20))\n    print(sum_of_common_divisors(100, 200))",
      -0.85791015625
    ],
    [
      "def common_divisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    divisors = [1]\n    for i in range(1, min(a, b)):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
      -0.85791015625
    ],
    [
      "def sum_of_common_divisors(number1, number2):\n    # Your code here\n    return sum([i for i in range(1, number1 + 1) if number1 % i == 0 and number2 % i == 0])\n\n\nprint sum_of_common_divisors(17, 7)",
      -0.85791015625
    ],
    [
      "def find_sum_of_common_divisors(a, b):\n    \"\"\"\n    Input: a and b are both integers\n    Output: the sum of common divisors\n    \"\"\"\n    if a > b:\n        return 0\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return 1\n    if a == 2 or b == 2:\n        return 2\n    common_divisors = 0\n    for i in range(3, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors += i\n    return common_divisors",
      -0.85791015625
    ],
    [
      "def find_common_divisors(number_1, number_2):\n    \"\"\"\n    :type number_1: int\n    :type number_2: int\n    :rtype: int\n    \"\"\"\n    return sum(1 for i in range(1, number_1 + 1) if number_1 % i == 0 and number_2 % i == 0)\n\n\ndef main():\n    print(find_common_divisors(3, 4))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def find_sum_of_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of a and b.\n    :param a: the first number\n    :param b: the second number\n    :return: the sum of common divisors\n    \"\"\"\n    # write your code here\n    return sum(set(a) & set(b))",
      -0.8583984375
    ],
    [
      "def find_sum_of_common_divisors(num1, num2):\n    # Write your code here\n    # The number of common divisors of num1 and num2 should be equal to the sum of their\n    # common divisors.\n    sum_of_common_divisors = 0\n\n    for i in range(1, num1 + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            sum_of_common_divisors += i\n\n    return sum_of_common_divisors\n\nnum1 = int(input(\"Enter num1: \"))\nnum2 = int(input(\"Enter num2: \"))\n\nprint(find_sum_of_common_divisors(num1, num2))",
      -0.8583984375
    ],
    [
      "def sum_common_divisors(n1, n2):\n    '''\n    n1: The first number to be compared.\n    n2: The second number to be compared.\n    '''\n\n    if n1 == n2:\n        return 1\n\n    common_divisors = []\n\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if i % j == 0:\n                common_divisors.append(i * j)\n\n    return sum(common_divisors)\n\n\nif __name__ == '__main__':\n    print sum_common_divisors(10, 20)",
      -0.85888671875
    ],
    [
      "def sum_of_divisors(number):\n    return sum(x for x in range(1, number) if number % x == 0)\n\nif __name__ == '__main__':\n    print sum_of_divisors(5)\n    print sum_of_divisors(7)",
      -0.85888671875
    ],
    [
      "def sumCommonDivisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    divisor = 1\n    sum = 0\n    while divisor < a:\n        if (a % divisor) == 0:\n            if (b % divisor) == 0:\n                sum += divisor\n            else:\n                sum += divisor + b\n        divisor += 1\n    return sum\n\nif __name__ == \"__main__\":\n    print sumCommonDivisors(4, 6)",
      -0.85888671875
    ],
    [
      "def sum_of_common_divisors(x, y):\n    return sum(i for i in range(1, min(x, y)) if x % i == 0 and y % i == 0)\n\ndef main():\n    print(sum_of_common_divisors(24, 12))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def get_sum(n):\n    \"\"\"\n    Return the sum of common divisors of two given numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    for i in range(1, n):\n        if n % i == 0:\n            return n + i\n\n    return n\n\n\nif __name__ == '__main__':\n    print(get_sum(2))\n    print(get_sum(3))\n    print(get_sum(4))\n    print(get_sum(5))\n    print(get_sum(6))\n    print(get_sum(7))\n    print(get_sum(8))\n    print(get_sum(9))",
      -0.85888671875
    ],
    [
      "def find_common_divisors(a, b):\n    if a == 0:\n        return [0]\n    if b == 0:\n        return [0]\n    if a == 1:\n        return [1]\n    if b == 1:\n        return [1]\n    if a == b:\n        return [a]\n    if a < b:\n        return find_common_divisors(b, a)\n    return [x for x in range(1, a + 1) if a % x == 0 and b % x == 0]\n\n\nprint(find_common_divisors(2, 3))\nprint(find_common_divisors(4, 5))",
      -0.85888671875
    ],
    [
      "def find_sum(n, m):\n    \"\"\"\n    :param n: the first number\n    :param m: the second number\n    :return: the sum of common divisors\n    \"\"\"\n    # base case\n    if n == 0 or m == 0:\n        return 0\n\n    # base case\n    if n == 1 or m == 1:\n        return 1\n\n    # recursion\n    return find_sum(n - 1, m) + find_sum(n, m - 1)\n\n\nif __name__ == '__main__':\n    print(find_sum(4, 8))",
      -0.85888671875
    ],
    [
      "def sum_common_divisors(num1, num2):\n    if num1 == 0 or num2 == 0:\n        return 0\n    \n    common_divisors = 0\n    \n    for i in range(1, num1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors += i\n    \n    return common_divisors\n\n#num1 = 4\n#num2 = 6\n#print sum_common_divisors(num1, num2)\n\nnum1 = 12\nnum2 = 9\nprint sum_common_divisors(num1, num2)\n\nnum1 = 23\nnum2 = 19\nprint sum_common_divisors(num1, num2)\n\nnum1 = 8\nnum2 = 18\nprint sum_common_divisors(num1, num2)",
      -0.85888671875
    ],
    [
      "def sumOfCommonDivisors(a, b):\n    return sum(list(divisors(a)) & list(divisors(b)))\n\ndef divisors(n):\n    return set(range(1, int(n**0.5)+1))\n\ndef test():\n    assert sumOfCommonDivisors(2,3) == 3\n    assert sumOfCommonDivisors(5,3) == 2\n    assert sumOfCommonDivisors(5,10) == 5\n    assert sumOfCommonDivisors(5,20) == 10\n\nif __name__ == '__main__':\n    test()",
      -0.85888671875
    ],
    [
      "def sum_of_common_divisors(x, y):\n    \"\"\"\n    :type x: int\n    :type y: int\n    :rtype: int\n    \"\"\"\n    return sum([i for i in range(1, min(x, y) + 1) if x % i == 0 and y % i == 0])\n\nif __name__ == '__main__':\n    assert sum_of_common_divisors(3, 5) == 2\n    assert sum_of_common_divisors(10, 15) == 3\n    assert sum_of_common_divisors(5, 15) == 2",
      -0.85888671875
    ],
    [
      "import math\n\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    if a == b:\n        return 0\n\n    result = 0\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            result += i\n\n    return result\n\n\nif __name__ == '__main__':\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n\n    print(\"The sum of common divisors of {} and {} is {}\".format(a, b, sum_of_common_divisors(a, b)))",
      -0.85888671875
    ],
    [
      "from math import gcd\n\ndef common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    return common_divisors(gcd(a, b), a) + common_divisors(gcd(a, b), b)\n\nif __name__ == '__main__':\n    print(common_divisors(15, 30))",
      -0.85888671875
    ],
    [
      "def common_divisors(n1, n2):\n    \"\"\"\n    :param n1: int\n    :param n2: int\n    :return: int\n    \"\"\"\n    s = 0\n    for i in range(1, n1 + 1):\n        if n1 % i == 0 and n2 % i == 0:\n            s += i\n    return s\n\n\ndef test_common_divisors():\n    assert common_divisors(2, 3) == 1\n    assert common_divisors(5, 10) == 2\n    assert common_divisors(3, 8) == 2\n\n\nif __name__ == '__main__':\n    test_common_divisors()",
      -0.85888671875
    ],
    [
      "def sum_of_common_divisors(a, b):\n    # write your code here\n    return\n\n\nif __name__ == '__main__':\n    a = [2, 4, 6, 8]\n    b = [2, 4, 6, 8]\n    sum_of_common_divisors(a, b)",
      -0.86083984375
    ],
    [
      "def sum_of_common_divisors(a, b):\n    '''\n    :param a: integer\n    :param b: integer\n    :return: integer\n    '''\n    if a == 0:\n        return 0\n    if a == 1:\n        return 1\n    if b == 0:\n        return 0\n    if b == 1:\n        return 1\n    if a == b:\n        return 2\n    if a < b:\n        return sum_of_common_divisors(b, a)\n    else:\n        return sum_of_common_divisors(a, b)\n\n\na = int(input())\nb = int(input())\nprint(sum_of_common_divisors(a, b))",
      -1.861328125
    ],
    [
      "# https://www.hackerrank.com/challenges/common-divisors/problem\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    a - first number\n    b - second number\n    :param a:\n    :param b:\n    :return: sum of common divisors of a and b\n    \"\"\"\n    result = 0\n    while b > 0:\n        if a % b == 0:\n            a = a / b\n            result += b\n        else:\n            b -= 1\n    return result\n\n\n# https://www.hackerrank.com/challenges/common-divisors/submissions/code/296967\ndef sum_of_common_divisors2(a, b):\n    \"\"\"\n    a - first number\n    b - second number\n    :param a:\n    :param b:\n    :return: sum of common divisors of a and b\n    \"\"\"\n    result = 0\n    while b > 0:\n        if a % b == 0:\n            result += b\n        else:\n            b -= 1\n    return result\n\n\nif __name__ == '__main__':\n    a = int(input().strip())\n    b = int(input().strip())\n    print(sum_of_common_divisors2(a, b))",
      -2.46484375
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    :param a: a number\n    :param b: a number\n    :return: sum of common divisors\n    \"\"\"\n    # return a * b % a + b * a % b\n    return (a * b % a + b * a % b) % a\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a = int(input('Enter a: '))\n    b = int(input('Enter b: '))\n\n    print('Sum of common divisors of {0} and {1} is {2}'.format(a, b, sum_of_common_divisors(a, b)))\n\n\nif __name__ == '__main__':\n    main()",
      -3.029296875
    ],
    [
      "from utils import is_prime\n\n# sum of common divisors of two numbers\n# p1 = prime\n# p2 = prime\n# return sum of common divisors\ndef sum_of_common_divisors(p1, p2):\n    return 0\n\n# sum of common divisors of two numbers\n# p1 = prime\n# p2 = prime\n# return sum of common divisors\ndef sum_of_common_divisors(p1, p2):\n    if p1 == p2:\n        return p1\n    if p1 == p2 - 1:\n        return p1 + p2\n    if p1 > p2:\n        return sum_of_common_divisors(p2, p1)\n    if p2 > p1:\n        return sum_of_common_divisors(p1, p2)\n    if p1 % p2 == 0:\n        return p1 + p2\n    return sum_of_common_divisors(p1 + 1, p2)\n\n# sum of common divisors of two numbers\n# p1 = prime\n# p2 = prime\n# return sum of common divisors\ndef sum_of_common_divisors(p1, p2):\n    if p1 == p2:\n        return p1\n    if p1 == p2 - 1:\n        return p1 + p2\n    if p1 > p2:\n        return sum_of_common_divisors(p2, p1)\n    if p2 > p1:\n        return sum_of_common_divisors(p1, p2)\n    if p1 % p2 == 0:\n        return p1 + p2\n    return sum_of_common_divisors(p1 + 1, p2)\n\n# sum of common divisors of two numbers\n# p1 = prime\n# p2 = prime\n# return sum of common divisors\ndef sum_of_common_divisors(p1, p2):\n    if p1 == p2:\n        return p1\n    if p1 == p2 - 1:\n        return p1 + p2\n    if p1",
      -3.146484375
    ],
    [
      "def find_sum_of_common_divisors(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    divisors = [1, n1, n2]\n    for i in range(2, max(n1, n2) + 1):\n        if n1 % i == 0 and n2 % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nif __name__ == '__main__':\n    print(find_sum_of_common_divisors(17, 11))\n    print(find_sum_of_common_divisors(5, 5))\n    print(find_sum_of_common_divisors(4, 6))\n    print(find_sum_of_common_divisors(6, 2))\n    print(find_sum_of_common_divisors(13, 13))",
      -3.33984375
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while a!= 0 and b!= 0:\n        if a % b == 0:\n            result += b\n            a /= b\n        else:\n            b /= a\n    return result\n\nif __name__ == '__main__':\n    print(sum_of_common_divisors(1, 2))\n    print(sum_of_common_divisors(1, 3))\n    print(sum_of_common_divisors(2, 3))\n    print(sum_of_common_divisors(2, 7))\n    print(sum_of_common_divisors(3, 7))",
      -3.392578125
    ],
    [
      "def sum_of_common_divisors(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    if n1 == 0 or n2 == 0:\n        return 0\n\n    # We need to find the first common divisor that is a multiple of both n1 and n2.\n    while (n1 % n2) == 0:\n        n1, n2 = n2, n1 % n2\n\n    # We can now use the fact that n1 is a multiple of n2.\n    # We can also get the sum of the common divisors of n1 and n2 by using the fact that n1 + n2 = 2 * n1.\n    return n1 + n2\n\n\nprint(sum_of_common_divisors(1, 2))\nprint(sum_of_common_divisors(2, 3))\nprint(sum_of_common_divisors(3, 4))\nprint(sum_of_common_divisors(4, 5))",
      -4.44921875
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return 1\n    if a == 1 or b == 1:\n        return 2\n    if a % 2 == 0:\n        sum_of_common_divisors(a/2, b)\n    else:\n        sum_of_common_divisors(a/2, b-1)\n    if b % 2 == 0:\n        sum_of_common_divisors(a, b/2)\n    else:\n        sum_of_common_divisors(a, b/2-1)\n    return a + b\n\nif __name__ == \"__main__\":\n    print sum_of_common_divisors(10, 12)\n    print sum_of_common_divisors(14, 14)",
      -4.66015625
    ],
    [
      "def find_common_divisors(a, b):\n    common_divisors = 0\n    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    if a < 0 or b < 0:\n        return 0\n    if a == 1 or b == 1:\n        return 1\n    if a > b:\n        return find_common_divisors(b, a)\n    elif a < b:\n        return find_common_divisors(a, b)\n    elif a == b:\n        return 1\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors += i\n    return common_divisors\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(find_common_divisors(a, b))\n\nif __name__ == \"__main__\":\n    main()",
      -4.6953125
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Input:\n        a = number 1\n        b = number 2\n\n    Output:\n        sum_of_common_divisors(a, b) = sum_of_common_divisors(b, a)\n    \"\"\"\n    # Initialize the sum\n    sum = 0\n\n    # If a and b are same, then return 0\n    if a == b:\n        return sum\n\n    # If a is smaller than b, then return sum\n    if a < b:\n        return sum_of_common_divisors(b, a)\n\n    # If a is bigger than b, then return sum_of_common_divisors(a, b)\n    else:\n        return sum_of_common_divisors(a, b)\n\nprint(sum_of_common_divisors(6, 4))",
      -4.984375
    ],
    [
      "def sum_of_common_divisors(n, m):\n    \"\"\"\n    sum_of_common_divisors(n, m) -> Return the sum of common divisors of n and m.\n    \"\"\"\n    return sum(i for i in range(1, max(n, m) + 1) if n % i == 0 and m % i == 0)\n\n\ndef sum_of_common_divisors_recur(n, m):\n    \"\"\"\n    sum_of_common_divisors_recur(n, m) -> Return the sum of common divisors of n and m.\n    \"\"\"\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    return sum_of_common_divisors_recur(n//2, m//2) + sum_of_common_divisors_recur(n, m)\n\n\ndef sum_of_common_divisors_recur_2(n, m):\n    \"\"\"\n    sum_of_common_divisors_recur_2(n, m) -> Return the sum of common divisors of n and m.\n    \"\"\"\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    return sum_of_common_divisors_recur_2(n//2, m//2) + sum_of_common_divisors_recur_2(n, m)\n\n\ndef sum_of_common_divisors_recur_3(n, m):\n    \"\"\"\n    sum_of_common_divisors_recur_3(n, m) -> Return the sum of common divisors of n and m.\n    \"\"\"\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    return sum_of_common_divisors_recur_3(n//2, m//2) + sum_of_common_divisors_recur_3(n, m)\n\n\ndef sum_of_common_divisors_recur_4(n, m):\n    \"\"\"\n    sum_of_common_divisors_recur_",
      -5.1796875
    ],
    [
      "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    sum_of_common_divisors(num1, num2) -> int\n    :param num1: int\n    :param num2: int\n    :return: int\n    \"\"\"\n    if num1 == 0:\n        return num2\n    if num2 == 0:\n        return num1\n    if num1 < 0 or num2 < 0:\n        return 0\n    if num1 < num2:\n        num1, num2 = num2, num1\n    # get the first common divisor\n    cd = num1\n    # get the first common divisor of num1 and num2\n    while num1 % cd == 0 and num2 % cd == 0:\n        cd = cd // 2\n    # get the common divisors of num1 and num2\n    cd_list = [cd]\n    while num1 % cd!= 0 or num2 % cd!= 0:\n        cd = cd // 2\n        cd_list.append(cd)\n    # get the sum of the common divisors\n    sum_cd = 0\n    for cd in cd_list:\n        sum_cd += cd\n    return sum_cd\n\nif __name__ == '__main__':\n    print(sum_of_common_divisors(100, 200))",
      -5.3125
    ],
    [
      "def sumOfCommonDivisors(a, b):\n    return sum(1 for i in range(1, a + 1) if i % a == 0 and i % b == 0)\n\n\n\nif __name__ == \"__main__\":\n    assert sumOfCommonDivisors(7, 2) == 2\n    assert sumOfCommonDivisors(7, 3) == 2\n    assert sumOfCommonDivisors(7, 7) == 1\n    assert sumOfCommonDivisors(7, 13) == 2\n    assert sumOfCommonDivisors(7, 14) == 4\n    assert sumOfCommonDivisors(7, 15) == 4\n    assert sumOfCommonDivisors(7, 16) == 4\n    assert sumOfCommonDivisors(7, 17) == 8\n    assert sumOfCommonDivisors(7, 18) == 8\n    assert sumOfCommonDivisors(7, 19) == 8\n    assert sumOfCommonDivisors(7, 20) == 8\n    assert sumOfCommonDivisors(7, 21) == 8\n    assert sumOfCommonDivisors(7, 22) == 8\n    assert sumOfCommonDivisors(7, 23) == 8\n    assert sumOfCommonDivisors(7, 24) == 8\n    assert sumOfCommonDivisors(7, 25) == 8\n    assert sumOfCommonDivisors(7, 26) == 8\n    assert sumOfCommonDivisors(7, 27) == 8\n    assert sumOfCommonDivisors(7, 28) == 8\n    assert sumOfCommonDivisors(7, 29) == 8\n    assert sumOfCommonDivisors(7, 30) == 8\n    assert sumOfCommonDivisors(7, 31) == 8\n    assert sumOfCommonDivisors(7, 32) == 8\n    assert sumOfCommonDivisors(7, 33) == 8\n    assert sumOfCommonDivisors(7, 34) == 8\n    assert sumOfCommonDivisors(7, 35) == 8\n    assert sumOfCommonDivisors(7, 36) == 8\n    assert sumOfCommonDivisors(7, 37) == 8\n    assert sumOfCommonDivis",
      -5.48828125
    ],
    [
      "# Definition for a divisor\nclass Divisor(object):\n    def __init__(self, num):\n        self.num = num\n\n    def __lt__(self, other):\n        return self.num < other.num\n\n    def __repr__(self):\n        return str(self.num)\n\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    d = list(divisors(a))\n    d.extend(divisors(b))\n    return sum(d)\n\n\ndef divisors(n):\n    \"\"\"\n    :type n: int\n    :rtype: list[Divisor]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result.append(Divisor(i))\n    return result\n\n\nif __name__ == '__main__':\n    assert sum_common_divisors(6, 4) == 2\n    assert sum_common_divisors(4, 6) == 2\n    assert sum_common_divisors(4, 4) == 4\n    assert sum_common_divisors(2, 2) == 2\n    assert sum_common_divisors(3, 3) == 3\n    assert sum_common_divisors(2, 3) == 1\n    assert sum_common_divisors(3, 7) == 2\n    assert sum_common_divisors(7, 3) == 2\n    assert sum_common_divisors(6, 7) == 3\n    assert sum_common_divisors(3, 2) == 1\n    assert sum_common_divisors(6, 3) == 2",
      -5.578125
    ],
    [
      "# TODO:\n# - What if the numbers are not evenly divisible?\n# - Add a test case.\n\ndef common_divisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 and b == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == b:\n        return a\n    elif a < b:\n        return common_divisors(a, b % a) + common_divisors(a, b % a - a)\n    else:\n        return common_divisors(a, b % a) + common_divisors(a, b % a - a) + common_divisors(a, b % a - a - b)\n\n\nclass Solution:\n    # @param {integer} a\n    # @param {integer} b\n    # @return {integer}\n    def findCommonDivisors(self, a, b):\n        return common_divisors(a, b)",
      -5.71484375
    ],
    [
      "def sum_of_common_divisors(a, b):\n    '''\n    a and b are integers\n    '''\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a < b:\n        a, b = b, a\n    divisors = [1]\n    for i in range(2, min(a, b) + 1):\n        while b % i == 0:\n            divisors.append(i)\n            b //= i\n    return sum(divisors)\n\n\na = int(input())\nb = int(input())\nprint(sum_of_common_divisors(a, b))",
      -6.109375
    ],
    [
      "from math import gcd\n\n\ndef sum_of_common_divisors(a, b):\n    return sum(gcd(a, b) for a in range(1, a + 1) if a % b == 0)\n\n\nif __name__ == '__main__':\n    assert(sum_of_common_divisors(3, 7) == 2)\n    assert(sum_of_common_divisors(4, 6) == 1)\n    assert(sum_of_common_divisors(5, 10) == 5)\n    assert(sum_of_common_divisors(3, 3) == 1)",
      -6.96875
    ],
    [
      "from fractions import gcd\n\ndef sum_of_common_divisors(num1, num2):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :rtype: int\n    \"\"\"\n    if num1 < 0:\n        num1 = num1 * -1\n    if num2 < 0:\n        num2 = num2 * -1\n\n    # if one of the numbers is 0, then gcd returns 0\n    # hence return 0\n    if num1 == 0 or num2 == 0:\n        return 0\n\n    # if both of the numbers are not prime, then return 0\n    if not gcd(num1, num2) == 1:\n        return 0\n\n    # if one of the numbers is 1, then return 1\n    if num1 == 1 or num2 == 1:\n        return 1\n\n    # if both numbers are prime, then return the sum of the common divisors\n    return num1 + num2\n\n#print sum_of_common_divisors(10, 14)\nprint sum_of_common_divisors(10, 12)\nprint sum_of_common_divisors(12, 18)\nprint sum_of_common_divisors(1, 12)\nprint sum_of_common_divisors(1, 3)\nprint sum_of_common_divisors(2, 2)\nprint sum_of_common_divisors(2, 4)\nprint sum_of_common_divisors(2, 8)\nprint sum_of_common_divisors(3, 6)\nprint sum_of_common_divisors(5, 10)\nprint sum_of_common_divisors(5, 15)\nprint sum_of_common_divisors(5, 20)\nprint sum_of_common_divisors(5, 25)\nprint sum_of_common_divisors(5, 30)\nprint sum_of_common_divisors(5, 35)\nprint sum_of_common_divisors(5, 40)\nprint sum_of_common_divisors(5, 45)\nprint sum_of_common_divisors(5, 50)",
      -7.1015625
    ],
    [
      "def common_divisors(a, b):\n    \"\"\"\n    a and b are two integers.\n    Return the sum of all common divisors.\n    \"\"\"\n\n    if a == 0 or b == 0:\n        return 0\n\n    if a < b:\n        a, b = b, a\n\n    # The following is a binary search algorithm.\n    # Since a and b are small integers, we can do this\n    # without using an additional list.\n    # The list is guaranteed to be small enough that\n    # it will never overflow.\n\n    # Find the smallest index i such that a / (a + 1) < b / (b + 1).\n    # This is the index at which to start the binary search.\n    i = 1\n    while a / (a + 1) >= b / (b + 1):\n        i += 1\n\n    # This is the index at which the binary search will exit.\n    j = i + 1\n\n    # While i and j are both less than or equal to the total number of divisors,\n    # and a / (a + 1) < b / (b + 1), increment i or decrement j.\n    while i <= len(range(1, a + 1)) and j <= len(range(1, b + 1)):\n        if a / (a + 1) < b / (b + 1):\n            i += 1\n        else:\n            j += 1\n\n    # If i is equal to j, then the number of divisors is\n    # equal to the number of common divisors between a and b.\n    if i == j:\n        return i\n\n    # If i is not equal to j, then the number of common divisors\n    # between a and b is equal to the difference between i and j.\n    return j - i\n\n\nprint common_divisors(6, 4)\nprint common_divisors(6, 8)\nprint common_divisors(2, 7)\nprint common_divisors(4, 6)",
      -7.2578125
    ],
    [
      "def sumOfCommonDivisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    # sum of all divisors of a\n    # sum of all divisors of b\n    # sum of all divisors of a - sum of all divisors of b\n    # sum of all divisors of a + sum of all divisors of b\n    # sum of all divisors of a - sum of all divisors of b + sum of all divisors of a + sum of all divisors of b\n    # sum of all divisors of a + sum of all divisors of b - sum of all divisors of a - sum of all divisors of b\n    # sum of all divisors of a - sum of all divisors of b - sum of all divisors of a + sum of all divisors of b\n    # sum of all divisors of a + sum of all divisors of b + sum of all divisors of a - sum of all divisors of b\n    # sum of all divisors of a - sum of all divisors of b + sum of all divisors of a + sum of all divisors of b\n    # sum of all divisors of a + sum of all divisors of b - sum of all divisors of a - sum of all divisors of b\n    # sum of all divisors of a - sum of all divisors of b - sum of all divisors of a + sum of all divisors of b\n    # sum of all divisors of a + sum of all divisors of b + sum of all divisors of a - sum of all divisors of b\n    # sum of all divisors of a - sum of all divisors of b + sum of all divisors of a + sum of all divisors of b\n    # sum of all divisors of a + sum of all divisors of b - sum of all divisors of a - sum of all divisors of b\n    # sum of all divisors of a - sum of all divisors of b - sum of all divisors of a +",
      -7.28515625
    ],
    [
      "def sum_of_common_divisors(n1, n2):\n    \"\"\"\n    n1: the first number\n    n2: the second number\n    return: the sum of common divisors of the two numbers\n    \"\"\"\n\n    if n1 < 0 or n2 < 0:\n        return 0\n\n    if n1 == 0 or n2 == 0:\n        return 0\n\n    if n1 == n2:\n        return 1\n\n    if n1 % n2 == 0:\n        return n1 + n2\n\n    # n1 and n2 are not both divisible by 2\n    # sum the numbers that are divisible by both n1 and n2\n    n1 = int(n1)\n    n2 = int(n2)\n    return sum_of_common_divisors(n1, n2-1) + sum_of_common_divisors(n2, n1-1)\n\n\n# Test Cases\n# n1 = 4\n# n2 = 5\n# sum_of_common_divisors(n1, n2) == 4 + 5 = 9\n# n1 = 5\n# n2 = 3\n# sum_of_common_divisors(n1, n2) == 5 + 3 = 8\n# n1 = -2\n# n2 = -3\n# sum_of_common_divisors(n1, n2) == -2 + -3 = -5\n# n1 = -3\n# n2 = -3\n# sum_of_common_divisors(n1, n2) == -3 + -3 = 0\n# n1 = -5\n# n2 = -5\n# sum_of_common_divisors(n1, n2) == -5 + -5 = 0\n# n1 = -3\n# n2 = -4\n# sum_of_common_divisors(n1, n2) == -3 + -4 = -1\n# n1 = -3\n# n2 = -1\n# sum_of_common_divisors(n1, n2) == -3 + -1 = -2\n# n1 = -3\n# n2 = -2\n# sum_of",
      -7.34765625
    ],
    [
      "# https://www.hackerrank.com/challenges/common-divisors/problem\n# https://www.hackerrank.com/challenges/common-divisors/submissions/code/5695763\n\n# import math\n# import sys\n\n# def sum_of_common_divisors(x, y):\n    # common_divisors = []\n    # while x!= 0 or y!= 0:\n        # common_divisors.append(x % y)\n        # x = x // y\n        # y = y // x\n    # return sum(common_divisors)\n\n# if __name__ == \"__main__\":\n    # x = int(sys.stdin.readline())\n    # y = int(sys.stdin.readline())\n    # print(sum_of_common_divisors(x, y))",
      -7.47265625
    ],
    [
      "def sum_of_common_divisors(n1, n2):\n    \"\"\"\n    Given two numbers, n1 and n2, find the sum of all the common divisors.\n    \"\"\"\n\n    # Initialize a list of all the numbers\n    # a list of all the numbers.\n    # a list of all the numbers.\n    # a list of all the numbers.\n    # a list of all the numbers.\n    a = []\n    b = []\n    c = []\n    d = []\n\n    # Iterate through the range of n1 and n2\n    for i in range(n1, n2):\n        # If the number is not in the list, then add it\n        if i not in a:\n            a.append(i)\n\n    # Iterate through the range of n1 and n2\n    for i in range(n1, n2):\n        # If the number is not in the list, then add it\n        if i not in b:\n            b.append(i)\n\n    # Iterate through the range of n1 and n2\n    for i in range(n1, n2):\n        # If the number is not in the list, then add it\n        if i not in c:\n            c.append(i)\n\n    # Iterate through the range of n1 and n2\n    for i in range(n1, n2):\n        # If the number is not in the list, then add it\n        if i not in d:\n            d.append(i)\n\n    # Sum the common divisors\n    sum = 0\n\n    for i in a:\n        for j in b:\n            if i < j:\n                sum += j\n            else:\n                sum += i\n\n    for i in c:\n        for j in d:\n            if i < j:\n                sum += j\n            else:\n                sum += i\n\n    return sum\n\n\n# If n1 = 3 and n2 = 10, sum_of_common_divisors(n1, n2) returns 8\nprint(sum_of_common_divisors(3, 10))\n\n# If n1 = 3 and n2 = 5, sum_of_common_divisors(n",
      -7.765625
    ],
    [
      "# Problem Statement\n#\n# In mathematics, the sum of the factorials of n is given by the following formula:\n# n! = n * (n - 1) * (n - 2) *... * 1\n#\n# This sum is a very simple way to calculate the sum of all the factorials.\n#\n# For example, the sum of the factorials of 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 is\n# equal to:\n#\n# 0 * 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 =\n# (1 * 1) * (2 * 2) * (3 * 3) * (4 * 4) * (5 * 5) * (6 * 6) * (7 * 7) * (8 * 8) * (9 * 9) =\n# (1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9)\n#\n# Write a function that takes two numbers as input and returns the sum of all the\n# factorials of the numbers.\n#\n# Example\n#\n# For input numbers 1,2,3,4,5,6,7,8,9,10, the function should return:\n#\n# sum(1,2,3,4,5,6,7,8,9,10) = (1 * 1) + (2 * 2) + (3 * 3) + (4 * 4) + (5 * 5) + (6 * 6) + (7 * 7) + (8 * 8) + (9 * 9) + (10 * 10) =\n# (1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10)\n#\n# Input:\n#\n# The first line of the input contains two space-separated integers denoting the\n# first and second number.\n#\n# The second line of the input contains two space-separated integers denoting the\n# first and second number.\n#\n# Output:\n#\n# Print the sum of the factorials of the numbers on a new line.\n#\n# Sample Input:\n#\n# 1 2 3 4 5 6 7 8 9 10\n# Sample Output:\n#\n# (1 * 1) + (2",
      -8.1015625
    ],
    [
      "def sum_of_common_divisors(n1, n2):\n    \"\"\"\n    n1 and n2 are both positive integers.\n    :rtype: int\n    \"\"\"\n    if n1 == 0 or n2 == 0:\n        return 0\n    if n1 == n2:\n        return n1\n    if n1 > n2:\n        return sum_of_common_divisors(n2, n1)\n    if n2 % n1 == 0:\n        return n1\n    if n1 % n2 == 0:\n        return n2\n    else:\n        return sum_of_common_divisors(n1 % n2, n2 % n1)\n\nif __name__ == \"__main__\":\n    n1 = int(input(\"Enter first number: \"))\n    n2 = int(input(\"Enter second number: \"))\n    print(sum_of_common_divisors(n1, n2))",
      -8.1015625
    ],
    [
      "def sum_common_divisors(n1, n2):\n    # Write your code here\n    d = n1\n    while d!= 1:\n        if n1 % d == 0:\n            n1 = n1 / d\n        if n2 % d == 0:\n            n2 = n2 / d\n        d = d - 1\n    return n1 + n2\n\nif __name__ == '__main__':\n    assert sum_common_divisors(2, 3) == 2, \"2 + 3\"\n    assert sum_common_divisors(5, 15) == 3, \"5 + 15\"\n    assert sum_common_divisors(2, 4) == 2, \"2 + 4\"\n    assert sum_common_divisors(9, 25) == 3, \"9 + 25\"\n    assert sum_common_divisors(3, 7) == 3, \"3 + 7\"\n    assert sum_common_divisors(5, 6) == 5, \"5 + 6\"\n    assert sum_common_divisors(10, 20) == 5, \"10 + 20\"\n    assert sum_common_divisors(100, 400) == 25, \"100 + 400\"\n    assert sum_common_divisors(100, 200) == 25, \"100 + 200\"\n    assert sum_common_divisors(100, 400) == 25, \"100 + 400\"\n    assert sum_common_divisors(100, 500) == 25, \"100 + 500\"\n    assert sum_common_divisors(100, 600) == 25, \"100 + 600\"\n    assert sum_common_divisors(100, 700) == 25, \"100 + 700\"\n    assert sum_common_divisors(100, 800) == 25, \"100 + 800\"\n    assert sum_common_divisors(100, 900) == 25, \"100 + 900\"\n    assert sum_common_divisors(100, 1000) == 25, \"100 + 1000\"\n    assert sum_common_divisors(100, 2000) == 25, \"100 + 2000\"\n    assert sum_common_divisors(100, 3000) == 25, \"100",
      -8.171875
    ],
    [
      "def sumOfCommonDivisors(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    # This is a recursive function.\n    # This function will calculate the sum of common divisors of two numbers\n    # and then return the sum of those two numbers.\n    # If either of the numbers is zero, the return value will be zero.\n    # So if we call this function with two numbers, we will return 0 if both of\n    # the numbers are zero.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if either of the numbers is one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    # numbers if both of the numbers are greater than one.\n    # If we call this function with two numbers, we will return the sum of the\n    #",
      -8.2890625
    ],
    [
      "def get_s(n):\n    \"\"\"\n    Find the sum of the common divisors of two given numbers.\n    :param n:\n    :return:\n    \"\"\"\n    # print(n)\n    # print(n % 2)\n    # print(n % 3)\n    # print(n % 4)\n    # print(n % 5)\n    # print(n % 6)\n    # print(n % 7)\n    # print(n % 8)\n    # print(n % 9)\n    # print(n % 10)\n    # print(n % 11)\n    # print(n % 12)\n    # print(n % 13)\n    # print(n % 14)\n    # print(n % 15)\n    # print(n % 16)\n    # print(n % 17)\n    # print(n % 18)\n    # print(n % 19)\n    # print(n % 20)\n    # print(n % 21)\n    # print(n % 22)\n    # print(n % 23)\n    # print(n % 24)\n    # print(n % 25)\n    # print(n % 26)\n    # print(n % 27)\n    # print(n % 28)\n    # print(n % 29)\n    # print(n % 30)\n    # print(n % 31)\n    # print(n % 32)\n    # print(n % 33)\n    # print(n % 34)\n    # print(n % 35)\n    # print(n % 36)\n    # print(n % 37)\n    # print(n % 38)\n    # print(n % 39)\n    # print(n % 40)\n    # print(n % 41)\n    # print(n % 42)\n    # print(n % 43)\n    # print(n % 44)\n    # print(n % 45)\n    # print(n % 46)\n    # print(n % 47)\n    # print(n % 48)\n    # print(n % 49)\n    # print(n % 50)\n    # print(n % 51)\n    # print(n % 52)\n    # print(",
      -8.6953125
    ],
    [
      "def sum_of_common_divisors(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    return reduce(lambda x, y: x * y, range(1, min(n, m) + 1)) // (min(n, m) - 1)\n\nif __name__ == '__main__':\n    assert sum_of_common_divisors(7, 7) == 1\n    assert sum_of_common_divisors(7, 6) == 2\n    assert sum_of_common_divisors(7, 3) == 4\n    assert sum_of_common_divisors(7, 2) == 5\n    assert sum_of_common_divisors(7, 1) == 7\n    assert sum_of_common_divisors(7, 0) == 1\n    assert sum_of_common_divisors(0, 0) == 0\n    assert sum_of_common_divisors(1, 1) == 1\n    assert sum_of_common_divisors(2, 2) == 1\n    assert sum_of_common_divisors(3, 3) == 3\n    assert sum_of_common_divisors(4, 4) == 2\n    assert sum_of_common_divisors(5, 5) == 5\n    assert sum_of_common_divisors(6, 6) == 6\n    assert sum_of_common_divisors(7, 7) == 7",
      -8.734375
    ],
    [
      "#!/usr/bin/env python\n\ndef common_divisors(a, b):\n    '''\n    Function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    # if a is a multiple of b\n    if a % b == 0:\n        return common_divisors(a/b, b) + common_divisors(a/b, a/b)\n    # if a is a divisor of b\n    elif a % b == 0:\n        return common_divisors(a/b, b)\n    # if a is a multiple of any other divisor of b\n    else:\n        for i in range(1, b):\n            if a % i == 0:\n                return common_divisors(a/i, i) + common_divisors(a/i, a/i)\n    return 0\n\na = int(input())\nb = int(input())\nprint(common_divisors(a, b))",
      -9.03125
    ],
    [
      "#\n# @param: num1, num2: two numbers\n#\n# @return: the sum of common divisors\n#\ndef sum_of_common_divisors(num1, num2):\n    sum = 0\n    for i in range(1, num1 + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            sum += i\n    return sum\n\n#\n# @param: num: a number\n#\n# @return: the sum of all the divisors of num\n#\ndef sum_of_divisors(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            sum += i\n    return sum\n\n#\n# @param: num: a number\n#\n# @return: the sum of all the divisors of num\n#\ndef sum_of_divisors_recursive(num):\n    if num == 1:\n        return 1\n    return sum_of_divisors_recursive(num - 1) + sum_of_divisors_recursive(num - 2)\n\n#\n# @param: num: a number\n#\n# @return: the sum of all the divisors of num\n#\ndef sum_of_divisors_iterative(num):\n    return sum(1 for i in range(1, num + 1) if num % i == 0)\n\n#\n# @param: num: a number\n#\n# @return: the sum of all the divisors of num\n#\ndef sum_of_divisors_iterative_recursive(num):\n    if num == 1:\n        return 1\n    return sum_of_divisors_iterative_recursive(num - 1) + sum_of_divisors_iterative_recursive(num - 2)\n\n#\n# @param: num1, num2: two numbers\n#\n# @return: the sum of all the divisors of num1 + num2\n#\ndef sum_of_divisors_sum(num1, num2):\n    sum = 0\n    for i in range(1, num1 + 1):",
      -9.2421875
    ],
    [
      "def sum_common_divisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a % b == 0 or b % a == 0:\n        return sum_common_divisors(b, a)\n    return sum_common_divisors(a, b - a) + sum_common_divisors(b, a - b)\n\n\ndef test():\n    assert sum_common_divisors(3, 6) == 3\n    assert sum_common_divisors(8, 6) == 2\n    assert sum_common_divisors(8, 9) == 1\n    assert sum_common_divisors(3, 9) == 1\n    assert sum_common_divisors(5, 6) == 2\n    assert sum_common_divisors(5, 9) == 1\n    assert sum_common_divisors(5, 10) == 1\n    assert sum_common_divisors(5, 11) == 2\n    assert sum_common_divisors(7, 11) == 1\n    assert sum_common_divisors(7, 12) == 3\n    assert sum_common_divisors(7, 13) == 1\n    assert sum_common_divisors(7, 14) == 3\n    assert sum_common_divisors(7, 15) == 2\n    assert sum_common_divisors(7, 16) == 3\n    assert sum_common_divisors(7, 17) == 2\n    assert sum_common_divisors(7, 18) == 3\n    assert sum_common_divisors(7, 19) == 2\n    assert sum_common_divisors(7, 20) == 3\n    assert sum_common_divisors(7, 21) == 2\n    assert sum_common_divisors(7, 22) == 3\n    assert sum_common_divisors(7, 23) == 2\n    assert sum_common_divisors(7, 24) == 3\n    assert sum",
      -10.5234375
    ],
    [
      "def sum_common_divisors(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return a + b\n    if a == b:\n        return a\n    if a % b == 0 or b % a == 0:\n        return a + b\n    if a > b:\n        return sum_common_divisors(b, a) + sum_common_divisors(a, b)\n    return sum_common_divisors(a, b - 1) + sum_common_divisors(b, a - 1)\n\nif __name__ == \"__main__\":\n    assert sum_common_divisors(2, 3) == 3\n    assert sum_common_divisors(4, 6) == 12\n    assert sum_common_divisors(7, 8) == 14\n    assert sum_common_divisors(10, 13) == 25\n    assert sum_common_divisors(11, 22) == 23\n    assert sum_common_divisors(14, 30) == 42\n    assert sum_common_divisors(16, 38) == 50\n    assert sum_common_divisors(25, 50) == 100\n    assert sum_common_divisors(25, 100) == 200",
      -10.765625
    ],
    [
      "import unittest\n\n\ndef common_divisors(a, b):\n    \"\"\"\n    Find the sum of all common divisors of two numbers.\n\n    Time complexity: O(|a|+|b|)\n    Space complexity: O(1)\n    \"\"\"\n\n    if a == 0 or b == 0:\n        return 0\n\n    # Base cases\n    if a < 0 or b < 0:\n        return 0\n\n    if a == 1 or b == 1:\n        return 1\n\n    # Recursive case\n    if a % 2 == 0 or b % 2 == 0:\n        return a + b\n\n    # Base case\n    return common_divisors(a - 1, b - 1) + common_divisors(a, b - 1)\n\n\nclass TestFunctions(unittest.TestCase):\n    def test_common_divisors(self):\n        self.assertEqual(common_divisors(1, 1), 1)\n        self.assertEqual(common_divisors(2, 4), 3)\n        self.assertEqual(common_divisors(3, 6), 2)\n        self.assertEqual(common_divisors(4, 8), 4)\n        self.assertEqual(common_divisors(10, 20), 10)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -11.7421875
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef sumCommonDivisors(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return 1\n    if a == b:\n        return a\n    if a % b == 0:\n        return a + b + sumCommonDivisors(a/b, b)\n    if b % a == 0:\n        return b + a + sumCommonDivisors(b/a, a)\n    if a % b == 0:\n        return a + b + sumCommonDivisors(a/b, b)\n    return sumCommonDivisors(a, b/a) + sumCommonDivisors(b, a/b)\n\ndef main():\n    a = int(sys.argv[1])\n    b = int(sys.argv[2])\n    print sumCommonDivisors(a, b)\n\nif __name__ == '__main__':\n    main()",
      -12.1171875
    ],
    [
      "def sum_of_common_divisors(a, b):\n    \"\"\"\n    For a and b to be common divisors of each other, the product of a and b\n    must be a.\n\n    Input:\n        a = an integer\n        b = an integer\n\n    Output:\n        The sum of all the common divisors of a and b.\n    \"\"\"\n\n    # Iterate over all possible combinations of a and b\n    # (ie, all the possible combinations of a and b\n    # for which a*b is divisible by each value in the\n    # combination).\n    #\n    # For each combination, sum the common divisors.\n    #\n    # The total sum of all the common divisors\n    # for all combinations is equal to the\n    # product of all the common divisors.\n    #\n    # Hence, the total sum of all the common\n    # divisors for a and b is equal to the product\n    # of all the common divisors for a and b.\n    #\n    # Hence, the total sum of all the common\n    # divisors for a and b is equal to the product\n    # of all the common divisors for a and b.\n    #\n    # The product of all the common divisors for\n    # a and b is equal to the product of all\n    # the common divisors for b and a.\n    #\n    # Hence, the product of all the common\n    # divisors for a and b is equal to the\n    # product of all the common divisors for\n    # b and a.\n    #\n    # The product of all the common divisors for\n    # a and b is equal to the product of all\n    # the common divisors for b and a.\n    #\n    # Hence, the product of all the common\n    # divisors for a and b is equal to the\n    # product of all the common divisors for\n    # b and a.\n    #\n    # The product of all the common divisors for\n    # a and b is equal to the product of all\n    # the common divisors for b and a.\n    #\n    # Hence, the product of all the",
      -12.2109375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport math\n\n# def sum_of_common_divisors(a, b):\n#     if a == 0 or b == 0:\n#         return 0\n#     if a == b:\n#         return a\n#     c = a + b\n#     while a!= c:\n#         a = a - c\n#         c = c - a\n#     return c\n\ndef sum_of_common_divisors(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    c = a + b\n    while a!= c:\n        a = a - c\n        c = c - a\n    return c\n\n# print sum_of_common_divisors(15, 10)\nprint sum_of_common_divisors(15, 20)",
      -12.921875
    ],
    [
      "def get_sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \n    Example:\n    >>> get_sum_of_common_divisors(2, 6)\n    5\n    >>> get_sum_of_common_divisors(4, 6)\n    3\n    >>> get_sum_of_common_divisors(3, 6)\n    3\n    >>> get_sum_of_common_divisors(2, 8)\n    7\n    >>> get_sum_of_common_divisors(2, 12)\n    6\n    >>> get_sum_of_common_divisors(2, 18)\n    6\n    >>> get_sum_of_common_divisors(2, 22)\n    6\n    >>> get_sum_of_common_divisors(2, 32)\n    6\n    \"\"\"\n    # if a and b are both even, then the sum of their common divisors is 2\n    if a % 2 == 0 and b % 2 == 0:\n        return 2\n    # if a and b are both odd, then the sum of their common divisors is 1\n    elif a % 2!= 0 and b % 2!= 0:\n        return 1\n    # if a and b are both even and not both odd, then the sum of their common divisors is 0\n    elif a % 2 == 0 and b % 2 == 0:\n        return 0\n    # if a and b are both odd and not both odd, then the sum of their common divisors is 0\n    elif a % 2!= 0 and b % 2!= 0:\n        return 0\n    # if a is even and b is odd, then the sum of their common divisors is 2\n    elif a % 2 == 0 and b % 2 == 1:\n        return 2\n    # if a is odd and b is even, then the sum of their common divisors is 2\n    elif a % 2 == 1 and b % 2 == 0:\n        return 2\n    # if a is even and b is even and not both odd, then the sum of their common divisors",
      -13.0703125
    ],
    [
      "from math import gcd\n\ndef find_sum_of_common_divisors(a, b):\n    \"\"\"\n    Find the sum of the common divisors of a and b.\n    a and b are integers.\n    Return a tuple containing the sum of the common divisors and the list of all the divisors.\n    \"\"\"\n    # get the list of all the divisors of a and b\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            divisors.append(i)\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisors.append(i)\n    # get the sum of the common divisors\n    common_divisors = 0\n    for i in range(len(divisors)):\n        for j in range(len(divisors)):\n            if i!= j:\n                common_divisors += gcd(divisors[i], divisors[j])\n    # return the sum of the common divisors and the list of all the divisors\n    return common_divisors, divisors\n\nprint find_sum_of_common_divisors(2, 3)",
      -13.7890625
    ],
    [
      "def sumCommonDivisors(a,b):\n\t\"\"\"\n\tArguments:\n\ta = first number\n\tb = second number\n\tReturns:\n\tThe sum of all the common divisors of the two numbers.\n\t\"\"\"\n\tif a == 0 or b == 0:\n\t\treturn 0\n\tif a == 1 or b == 1:\n\t\treturn 1\n\td = a * b\n\td_s = sumCommonDivisors(a - 1,b - 1)\n\tif d_s == 0:\n\t\treturn 0\n\tif d % d_s!= 0:\n\t\treturn 0\n\telse:\n\t\treturn d / d_s\n\nprint(sumCommonDivisors(10, 10))\nprint(sumCommonDivisors(4, 4))\nprint(sumCommonDivisors(4, 6))\nprint(sumCommonDivisors(4, 7))\nprint(sumCommonDivisors(6, 4))\nprint(sumCommonDivisors(9, 9))\nprint(sumCommonDivisors(9, 10))\nprint(sumCommonDivisors(9, 11))\nprint(sumCommonDivisors(9, 12))\nprint(sumCommonDivisors(9, 13))\nprint(sumCommonDivisors(9, 14))\nprint(sumCommonDivisors(9, 15))\nprint(sumCommonDivisors(9, 16))\nprint(sumCommonDivisors(9, 17))\nprint(sumCommonDivisors(9, 18))\nprint(sumCommonDivisors(9, 19))\nprint(sumCommonDivisors(9, 20))\nprint(sumCommonDivisors(9, 21))\nprint(sumCommonDivisors(9, 22))\nprint(sumCommonDivisors(9, 23))\nprint(sumCommonDivisors(9, 24))\nprint(sumCommonDivisors(9, 25))\nprint(sumCommonDivisors(9, 26))\nprint(sumCommonDivisors(9, 27))\nprint(sumCommonDivisors(9, 28))\nprint(sumCommonDivisors(9, 29))\nprint(sumCommonDivisors(9, 30))\nprint(sumCommonDivisors",
      -13.8046875
    ],
    [
      "import math\n\ndef sum_of_common_divisors(x, y):\n    \"\"\"\n    Returns the sum of all common divisors of x and y.\n    \"\"\"\n    # This algorithm is based on the \"fractional part\" of the algorithm in\n    # \"Fractional Part: A Survey and Benchmark\" by H. J. Wu\n    # http://www.cs.tau.ac.il/~hjw/publications/fractional-part.pdf\n    #\n    # It is optimized for the case where x and y are small, which is\n    # generally the case in practice.\n    if x < y:\n        return sum_of_common_divisors(y, x)\n    if x == y:\n        return x\n    if x == 1:\n        return y\n    if y == 1:\n        return x\n    if x == 0:\n        return 0\n    if y == 0:\n        return 0\n\n    # Calculate the number of common divisors of x and y\n    common_divisors_of_x_and_y = 0\n    while x % y == 0:\n        common_divisors_of_x_and_y += 1\n        x = x // y\n    common_divisors_of_x_and_y += x\n\n    # Calculate the sum of all common divisors of x and y\n    # (this is the \"fractional part\" of the algorithm in the paper)\n    x_fractional_part = x\n    y_fractional_part = y\n    sum_of_common_divisors = common_divisors_of_x_and_y\n    while x_fractional_part!= 1 and y_fractional_part!= 1:\n        if x_fractional_part % y_fractional_part == 0:\n            sum_of_common_divisors += x_fractional_part\n            x_fractional_part = x_fractional_part // y_fractional_part\n        else:\n            sum_of_common_divisors += y_fractional_part\n            y_fractional_part = y_",
      -14.4296875
    ],
    [
      "def sum_of_common_divisors(num1, num2):\n    # This is a quick and dirty solution to the problem\n    # If we multiply the numbers, we can get the number of common\n    # divisors.\n    # I don't know if there is a better solution, but this one works\n    # for now.\n    result = 0\n    while num1 > 0:\n        if num1 % num2 == 0:\n            result += num1 / num2\n        num1 /= num2\n        num2 /= num2\n    return result\n\nprint sum_of_common_divisors(2,3)\nprint sum_of_common_divisors(2,4)\nprint sum_of_common_divisors(2,5)\nprint sum_of_common_divisors(2,6)\nprint sum_of_common_divisors(2,7)\nprint sum_of_common_divisors(2,8)\nprint sum_of_common_divisors(2,9)\nprint sum_of_common_divisors(2,10)\nprint sum_of_common_divisors(2,11)\nprint sum_of_common_divisors(2,12)\nprint sum_of_common_divisors(2,13)\nprint sum_of_common_divisors(2,14)\nprint sum_of_common_divisors(2,15)\nprint sum_of_common_divisors(2,16)\nprint sum_of_common_divisors(2,17)\nprint sum_of_common_divisors(2,18)\nprint sum_of_common_divisors(2,19)\nprint sum_of_common_divisors(2,20)",
      -15.5
    ],
    [
      "# Note:\n# The input number is a positive integer.\n\n# Example:\n# Input:\n#    3\n#    2\n#    5\n#    4\n#    7\n#    8\n#    6\n#    9\n# Output:\n#    6\n# Explanation:\n# The sum of all common divisors of 3, 2, 5, 4, 7, 8, 6, 9 is 6.\n\n# Definition for a number.\nclass Num(object):\n    def __init__(self, num):\n        self.num = num\n\n    def __add__(self, other):\n        return Num(self.num + other.num)\n\n    def __sub__(self, other):\n        return Num(self.num - other.num)\n\n    def __mul__(self, other):\n        return Num(self.num * other.num)\n\n    def __div__(self, other):\n        return Num(self.num / other.num)\n\n    def __str__(self):\n        return str(self.num)\n\n    def __eq__(self, other):\n        return self.num == other.num\n\n    def __lt__(self, other):\n        return self.num < other.num\n\n    def __le__(self, other):\n        return self.num <= other.num\n\n    def __gt__(self, other):\n        return self.num > other.num\n\n    def __ge__(self, other):\n        return self.num >= other.num\n\n\nclass Solution(object):\n    def getCommonDivisors(self, num1, num2):\n        \"\"\"\n        :type num1: Num\n        :type num2: Num\n        :rtype: int\n        \"\"\"\n        return len(self.getCommonDivisorsRecur(num1, num2))\n    def getCommonDivisorsRecur(self, num1, num2):\n        if num1 == 0 or num2 == 0:\n            return 0\n        if num1 < num2:\n            return self.getCommonDivisorsRecur(num2, num1)\n        if num1 == num2:\n            return 1\n        return self.getCommonDivisorsRecur",
      -15.734375
    ],
    [
      "def sum_common_divisors(n1, n2):\n    n1_prime = n1\n    n2_prime = n2\n    # n1_prime = n1 % n2\n    # n2_prime = n2 % n1\n\n    # n1_prime = n1 % (n2_prime - n1)\n    # n2_prime = n2 % (n1_prime - n2)\n\n    while (n1_prime > 0):\n        n1_prime = n1_prime - 1\n        n2_prime = n2_prime - 1\n        # n1_prime = n1_prime % n2_prime\n        # n2_prime = n2_prime % n1_prime\n\n        # n1_prime = n1_prime % (n2_prime - n1_prime)\n        # n2_prime = n2_prime % (n1_prime - n2_prime)\n\n        if (n1_prime == 0 and n2_prime == 0):\n            break\n    else:\n        return 0\n\n    # print (n1_prime, n2_prime)\n    # print (n1_prime - n2_prime)\n    # print (n1_prime - n2_prime) % n2_prime\n    # print (n1_prime - n2_prime) % (n1_prime - n2_prime)\n    # print (n1_prime - n2_prime) % (n1_prime - n2_prime) % n2_prime\n    # print (n1_prime - n2_prime) % (n1_prime - n2_prime) % (n1_prime - n2_prime)\n    # print (n1_prime - n2_prime) % (n1_prime - n2_prime) % (n1_prime - n2_prime) % n2_prime\n    # print (n1_prime - n2_prime) % (n1_prime - n2_prime) % (n1_prime - n2_prime) % (n1_prime - n2_prime) % n2_prime\n\n    return n1_prime + n2_prime\n\n# print",
      -16.234375
    ],
    [
      "def sum_of_common_divisors(n1, n2):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :rtype: int\n    \"\"\"\n    # get the list of all the divisors of n1\n    d1 = [i for i in range(1, n1+1)]\n    # get the list of all the divisors of n2\n    d2 = [i for i in range(1, n2+1)]\n    # get the list of the sum of the divisors of n1 and n2\n    s = [0] * (n2+1)\n    for i in range(0, n2+1):\n        for j in range(0, n1+1):\n            if i == n2:\n                s[i] = s[i] + d1[j]\n            else:\n                s[i] = s[i] + d1[j] * d2[i-j]\n    # sum the elements in the list\n    return sum(s)\n\n\ndef main():\n    n1 = int(input())\n    n2 = int(input())\n    print(sum_of_common_divisors(n1, n2))\n\nif __name__ == \"__main__\":\n    main()",
      -17.421875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}