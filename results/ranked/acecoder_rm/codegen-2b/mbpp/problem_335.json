{
  "problem": {
    "task_id": "MBPP/346",
    "prompt": "Write a function to find entringer number e(n, k).",
    "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
    "test_list": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ],
    "challenge_test_list": [],
    "problem_id": 335
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def getEntrance(self, n, k):\n        \"\"\"\n        Brute force\n        :param n: int\n        :param k: int\n        :return: int\n        \"\"\"\n        return sum(1 for i in range(k+1, n+1) if i % k == 0)\n\n    def getEntrance2(self, n, k):\n        \"\"\"\n        TLE\n        :param n: int\n        :param k: int\n        :return: int\n        \"\"\"\n        return sum(1 for i in range(1, k+1) if i % k == 0 and i % (k+1) == 0) + sum(1 for i in range(1, k+1) if i % k == 0 and i % (k+1)!= 0)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getEntrance(100, 4)\n    print s.getEntrance2(100, 4)",
      3.9296875
    ],
    [
      "def e(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n < k:\n        return e(n + 1, k)\n    if n == k:\n        return 1\n    if k == 1:\n        return n\n    if n % k == 0:\n        return e(n/k, k) + e(n/k, k-1)\n    else:\n        return e(n, k-1)",
      1.56640625
    ],
    [
      "def find_entering_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k > n/2:\n        return n - k + 1\n    if n % k == 0:\n        return n - k\n    return n - k + 1\n\nif __name__ == '__main__':\n    print(find_entering_number(6, 2))",
      1.4404296875
    ],
    [
      "from math import ceil\n\ndef e(n, k):\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) / 2\n    if k % 2 == 0:\n        return e(n, k / 2) * e(n - 1, k / 2)\n    else:\n        return e(n, k / 2) * e(n - 1, k / 2) * e(n - 2, k / 2)\n\ndef main():\n    print(e(100, 100))\n\nif __name__ == '__main__':\n    main()",
      1.0654296875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def findEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dp = [0] * (n + 1)\n        for i in range(n + 1):\n            for j in range(k + 1):\n                dp[i] += i if dp[i] < j else 0\n        return dp[n]",
      0.3251953125
    ],
    [
      "from math import sqrt\n\ndef e(n, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n % 2 == 0:\n        return e(n / 2, k - 1)\n    else:\n        return e(n * 3 + 1, k - 1)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(e(n, k))",
      0.1400146484375
    ],
    [
      "# https://www.youtube.com/watch?v=Rb5H_6z6ZWc\n# https://www.youtube.com/watch?v=CQT5QrMtIgY\n\ndef e(n, k):\n    res = 0\n    for i in range(n):\n        res = res + k - i\n    return res\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(e(n, k))",
      -0.03790283203125
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findLuckyNum(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        if k < 1 or k > n:\n            return -1\n        if k == 1:\n            result = n\n        else:\n            result = self.findLuckyNum(n, k - 1)\n        return result + self.findLuckyNum(n, k - 1)",
      -0.54736328125
    ],
    [
      "class Solution(object):\n    def findEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return n * (n + 1) / 2 - k * (k + 1) / 2\n\nif __name__ == '__main__':\n    print Solution().findEntringerNumber(7, 1)\n    print Solution().findEntringerNumber(7, 2)\n    print Solution().findEntringerNumber(7, 3)\n    print Solution().findEntringerNumber(7, 4)\n    print Solution().findEntringerNumber(7, 5)\n    print Solution().findEntringerNumber(7, 6)\n    print Solution().findEntringerNumber(7, 7)",
      -0.62109375
    ],
    [
      "class Solution(object):\n    def enter(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return (n - k + 1) * (n - k) // 2 + k - 1",
      -0.85595703125
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef find_entering_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # return n * (k - 1) - k * (k - 1) / 2\n    return n * (k * k - k) / 2\n\nif __name__ == \"__main__\":\n    n = int(sys.argv[1])\n    k = int(sys.argv[2])\n    print find_entering_number(n, k)",
      -0.85693359375
    ],
    [
      "# @include\ndef euler_entringer(n, k):\n    return sum(i * (n - k + i) for i in range(1, n + 1))\n# @exclude\n\n\ndef main():\n    # Output:\n    # 5\n    # 3\n    # 4\n    # 5\n    # 5\n    # 7\n    n = int(input())\n    k = int(input())\n    assert 1 <= n <= 100\n    assert 1 <= k <= n\n    assert euler_entringer(n, k) == 5\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def entry(n, k):\n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    elif n - k == 1:\n        return 1\n    else:\n        return entry(n-k, k) + entry(n-k, k-1)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(entry(n, k))",
      -0.85693359375
    ],
    [
      "def find_entering_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 1:\n        return 0\n\n    for i in range(1, n+1):\n        if k % i == 0:\n            return i\n\n    return n\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(find_entering_number(n, k))",
      -0.85693359375
    ],
    [
      "def get_en(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return sum(k * get_en(n - k, k) for k in range(1, n + 1))\n\nif __name__ == '__main__':\n    print get_en(3, 2)\n    print get_en(5, 3)\n    print get_en(5, 4)",
      -0.85693359375
    ],
    [
      "import math\n\ndef e_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 0\n    elif k == 1:\n        return n\n    elif k == 2:\n        return n * (n - 1) / 2\n    elif k % 2 == 0:\n        return e_number(n, k / 2) + e_number(n - k / 2, k / 2)\n    else:\n        return e_number(n, k / 2) + e_number(n - k / 2, k / 2) + e_number(n - k / 2, k - k / 2)\n\nif __name__ == '__main__':\n    print(e_number(3, 2))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def getEnteringNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if n < k:\n            return self.getEnteringNumber(n, k)\n        else:\n            return self.getEnteringNumber(n-k, k)",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def __init__(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        \"\"\"\n        self.n = n\n        self.k = k\n\n    def get_entering_number(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = self.n - 1\n        while i <= j:\n            m = (i + j) / 2\n            if self.k == m:\n                return m\n            elif self.k > m:\n                j = m - 1\n            else:\n                i = m + 1",
      -0.85791015625
    ],
    [
      "def e(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 1:\n        return n\n    elif k == 2:\n        return n * (n + 1) / 2\n    else:\n        return e(n, k - 1) + e(n, k - 2)\n\nif __name__ == '__main__':\n    print(e(100, 3))",
      -0.85791015625
    ],
    [
      "def e_number(n, k):\n    # Write your code here\n    ans = 0\n    for i in range(n):\n        ans = ans + k ** i\n    return ans\n\ndef main():\n    n = int(input())\n    k = int(input())\n    print(e_number(n, k))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def find_entering_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return n * (k + 1) / (k + 2) - n * (k + 1) / (k + 3)",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param n, an integer\n    # @param k, an integer\n    # @return an integer\n    def findEntringerNumber(self, n, k):\n        # write your code here\n        if k == 0:\n            return 0\n\n        # write your code here\n        numerator = 1\n        denominator = 1\n\n        for i in range(1, k + 1):\n            numerator *= n - k + i\n            denominator *= i\n\n        return numerator / denominator\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.findEntringerNumber(100, 10)\n    print s.findEntringerNumber(100, 5)\n    print s.findEntringerNumber(100, 20)\n    print s.findEntringerNumber(100, 25)",
      -0.85791015625
    ],
    [
      "def euler_numbers(n, k):\n    result = [0] * (n+1)\n    for i in range(2, n+1):\n        result[i] = (k+i-1) * (k+i-2) / 2\n    return result\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(euler_numbers(n, k))",
      -0.85791015625
    ],
    [
      "def euler(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return euler(n - 1, k) + euler(n - 1, k - 1)\n\n\nif __name__ == '__main__':\n    print euler(100, 5)",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param {integer} n\n    # @param {integer} k\n    # @return {integer}\n    def findEntringerNumber(self, n, k):\n        return sum(x * x for x in range(2, n + 1) if x ** 2 % k == 0) / 2\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findEntringerNumber(4, 7)\n    print s.findEntringerNumber(10, 13)\n    print s.findEntringerNumber(12, 13)\n    print s.findEntringerNumber(12, 14)\n    print s.findEntringerNumber(12, 15)\n    print s.findEntringerNumber(12, 16)\n    print s.findEntringerNumber(12, 17)\n    print s.findEntringerNumber(12, 18)\n    print s.findEntringerNumber(12, 19)\n    print s.findEntringerNumber(12, 20)",
      -0.85791015625
    ],
    [
      "def e(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 1:\n        return n\n    else:\n        return e(n - 1, k - 1) + e(n - 1, k)\n\nif __name__ == '__main__':\n    print e(100, 4)",
      -0.85791015625
    ],
    [
      "class Solution:\n    \"\"\"\n    @param n: An integer\n    @param k: An integer\n    @return: A string\n    \"\"\"\n    def getEnteringNumber(self, n, k):\n        \"\"\"\n        Get the entering number\n        \"\"\"\n        if k == 0 or n < k:\n            return \"\"\n        ans = []\n        for i in range(n, 0, -k):\n            ans.append(i)\n        ans.append(n)\n        return \"\".join(map(str, ans))\n\nif __name__ == \"__main__\":\n    assert Solution().getEnteringNumber(3, 1) == \"1\"\n    assert Solution().getEnteringNumber(3, 2) == \"21\"\n    assert Solution().getEnteringNumber(3, 3) == \"321\"\n    assert Solution().getEnteringNumber(3, 4) == \"3141\"\n    assert Solution().getEnteringNumber(3, 5) == \"314159\"\n    assert Solution().getEnteringNumber(3, 6) == \"31415927\"",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def entringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n <= k:\n            return n\n        if n % 2 == 0:\n            return self.entringerNumber(n/2, k)\n        else:\n            return self.entringerNumber(n-1, k)",
      -0.85791015625
    ],
    [
      "def find_entering_number(n, k):\n    # write your code here\n    if n < k:\n        return None\n    if k == 0:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return find_entering_number(n - 1, k) + find_entering_number(n - 2, k)\n    else:\n        return find_entering_number(n - 1, k)\n\n\nif __name__ == '__main__':\n    print(find_entering_number(12, 4))\n    print(find_entering_number(15, 7))\n    print(find_entering_number(12, 0))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def findEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # check input\n        if k == 0 or n == 0:\n            return -1\n        if k < 0 or k > n:\n            return -1\n        if k == 1:\n            return n\n        if n == 1:\n            return k\n        # get k-th number of n\n        num = 0\n        while num < k:\n            num += 1\n        num -= 1\n        # get k-th number of k-th number of n\n        while num < k:\n            num += 1\n        num -= 1\n        # calculate n-th number\n        num = n - k\n        # get k-th number of n-th number\n        while num < k:\n            num += 1\n        num -= 1\n        # calculate e(n, k)\n        return k * (n - k + 1) / 2 + num * k / 2",
      -0.8583984375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param n: An integer\n    @param k: An integer\n    @return: An integer\n    \"\"\"\n    def getEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # write your code here\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 5\n        else:\n            # find the number of the numbers which are greater than k\n            # and less than k + n - 1\n            # use the same algorithm as getEntringerNumber(n, k + 1)\n            count = 0\n            for i in range(1, k + 1):\n                if i < n:\n                    count += 1\n                elif i > n:\n                    count -= 1\n            return k + count",
      -0.8583984375
    ],
    [
      "def e_n_k(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return n\n    else:\n        return e_n_k(n-1, k-1) + e_n_k(n-1, k)\n\n\nif __name__ == '__main__':\n    print(e_n_k(10, 3))",
      -0.8583984375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param n, an integer\n    @param k, an integer\n    @return an integer\n    \"\"\"\n    def findEntringerNumber(self, n, k):\n        if n == k:\n            return 1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return self.findEntringerNumber(n - 1, k) + self.findEntringerNumber(n - 1, k - 1)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def findEntrance(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return n-k-1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findEntrance(10, 5)\n    print s.findEntrance(30, 5)\n    print s.findEntrance(15, 5)\n    print s.findEntrance(25, 5)\n    print s.findEntrance(10, 15)\n    print s.findEntrance(10, 0)\n    print s.findEntrance(10, 1)",
      -0.8583984375
    ],
    [
      "def num_entering(n, k):\n    if k > n:\n        return 0\n    elif k == n:\n        return 1\n    elif k == 1:\n        return n\n    elif k == 2:\n        return n * (n - 1) // 2\n    else:\n        return n * (n - 1) // 2 + num_entering(n - 1, k - 1)\n\n\nif __name__ == '__main__':\n    print(num_entering(6, 2))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def getEntranceNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        if k % 2 == 0:\n            return self.getEntranceNumber(n - 1, k / 2) + self.getEntranceNumber(n - 1, k / 2)\n        else:\n            return self.getEntranceNumber(n - 1, k - 1) + self.getEntranceNumber(n - 1, k - 1)",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef e_n_k(n, k):\n    if k == 0:\n        return 1\n    else:\n        return e_n_k(n - 1, k - 1) + e_n_k(n - 1, k)\n\n\ndef main():\n    print(e_n_k(20, 6))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def entryNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dp = [0 for i in range(n+1)]\n        dp[0] = 1\n        for i in range(1, n+1):\n            dp[i] = dp[i-1] + dp[i-1]\n        for i in range(1, k+1):\n            dp[i] += dp[i-1]\n        return dp[k]\n\n\nif __name__ == \"__main__\":\n    print Solution().entryNumber(2, 3)",
      -0.8583984375
    ],
    [
      "def euler_entering_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return (n + k) % (k + 1)\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(euler_entering_number(n, k))",
      -0.8583984375
    ],
    [
      "import math\n\ndef ent(n, k):\n    if n == 1:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return ent(n - 1, k - 1) + ent(n - 1, k)\n\n\nprint ent(100, 3)\nprint ent(100, 4)\nprint ent(100, 5)\nprint ent(100, 6)\nprint ent(100, 7)\nprint ent(100, 8)\nprint ent(100, 9)\nprint ent(100, 10)",
      -0.8583984375
    ],
    [
      "def ent_number(n, k):\n    \"\"\"\n    Write a function to find entringer number e(n, k).\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # check if n is even\n    if n % 2 == 0:\n        return 0\n    # check if n is odd\n    else:\n        return 1\n\n\nif __name__ == '__main__':\n    print(ent_number(7, 2))\n    print(ent_number(7, 3))\n    print(ent_number(7, 4))\n    print(ent_number(7, 5))\n    print(ent_number(7, 6))\n    print(ent_number(7, 7))\n    print(ent_number(7, 8))\n    print(ent_number(7, 9))\n    print(ent_number(7, 10))",
      -0.8583984375
    ],
    [
      "def euler_entering_number(n, k):\n    \"\"\"\n    n: an integer\n    k: an integer\n    return: the euler entering number\n    \"\"\"\n    # base case\n    if n < 1:\n        return 0\n    # recursion\n    return euler_entering_number(n - 1, k) + euler_entering_number(n - 1, k - 1)\n\n\n# Test cases\nprint(euler_entering_number(10, 3))\nprint(euler_entering_number(10, 10))\nprint(euler_entering_number(10, 100))",
      -0.8583984375
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def get_entering_number(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = int(n)\n        k = int(k)\n        return n * (k + 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(Solution().get_entering_number(2, 2))\n    print(Solution().get_entering_number(3, 2))",
      -0.8583984375
    ],
    [
      "def num_entringers(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        result = 0\n        for i in range(1, k):\n            result += num_entringers(n, i) * num_entringers(n - i, k - i)\n        return result\n\nclass Solution(object):\n    def numEntringers(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return num_entringers(n, k)",
      -0.8583984375
    ],
    [
      "from math import ceil\n\ndef e(n, k):\n    \"\"\"\n    Write a function to find entringer number e(n, k).\n    :param n: a positive integer\n    :param k: a positive integer\n    :return: an integer\n    \"\"\"\n    # write your code here\n    if k == 0:\n        return 0\n    else:\n        return (n + k - 1) // k\n\nif __name__ == '__main__':\n    print(e(6, 5))",
      -0.8583984375
    ],
    [
      "def entringer_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == n:\n        return 1\n    elif k < n:\n        return 2\n    else:\n        return n - k\n\nif __name__ == \"__main__\":\n    print(entringer_number(100, 10))",
      -0.85888671875
    ],
    [
      "# https://oj.leetcode.com/problems/find-the-entering-number/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # @param n, an integer\n    # @param k, an integer\n    # @return an integer\n    def findEnteringNumber(self, n, k):\n        # write your code here\n        if n <= k:\n            return n\n        if n % k == 0:\n            return n / k\n        if k % n == 0:\n            return n / k\n        return n / k - 1\n\n\nif __name__ == \"__main__\":\n    print Solution().findEnteringNumber(4, 3)",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/entering-numbers/problem\ndef entering_numbers(n, k):\n    sum = 0\n    for i in range(n):\n        sum += k\n        if sum > n:\n            sum -= k\n    return sum\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(entering_numbers(n, k))",
      -0.85888671875
    ],
    [
      "def find_enumber(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    elif k % 2 == 0:\n        return find_enumber(n, k/2) * find_enumber(n, k/2)\n    else:\n        return find_enumber(n, k/2) * find_enumber(n, k/2) * n\n\n\nif __name__ == '__main__':\n    print(find_enumber(7, 3))",
      -0.85888671875
    ],
    [
      "def e(n, k):\n    \"\"\"\n    n is an integer, k is an integer.\n    Return the e(n, k)\n    \"\"\"\n    # Base cases\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        # Recursive step\n        return e(n, k - 1) * (n + 1)\n\n\nif __name__ == \"__main__\":\n    print(e(5, 2))\n    print(e(5, 3))\n    print(e(5, 4))",
      -0.86083984375
    ],
    [
      "import time\nstart_time = time.time()\n\ndef get_entering_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # TODO\n    pass\n\nif __name__ == '__main__':\n    print(get_entering_number(100, 3))\n    print(time.time() - start_time)",
      -0.86083984375
    ],
    [
      "class Solution:\n    # @param {integer} n\n    # @param {integer} k\n    # @return {integer}\n    def findNumber(self, n, k):\n        if n < k:\n            return 0\n        elif n == k:\n            return 1\n        else:\n            left = self.findNumber(n-1, k)\n            right = self.findNumber(n-1, k-1)\n            return left+right\n\nif __name__ == '__main__':\n    Solution().findNumber(7, 2)",
      -0.86083984375
    ],
    [
      "import math\nimport time\n\n\ndef e(n, k):\n    \"\"\"\n    :param n: An integer\n    :param k: An integer\n    :return: The integer e(n, k)\n    \"\"\"\n    return math.factorial(n) / math.factorial(n - k)\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    print e(1, 1)\n    print time.time() - start_time",
      -1.3330078125
    ],
    [
      "import math\n\ndef enter_number(n, k):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n-k))\n\nif __name__ == '__main__':\n    assert(enter_number(4, 3) == 20)\n    assert(enter_number(4, 4) == 1)\n    assert(enter_number(5, 2) == 3)",
      -1.7333984375
    ],
    [
      "def e(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) / 2\n    if k == 3:\n        return n * (n - 1) * (n - 2) / 6\n    if k == 4:\n        return n * (n - 1) * (n - 2) * (n - 3) / 24\n    if k == 5:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) / 120\n    if k == 6:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) / 720\n    if k == 7:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) / 5040\n    if k == 8:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) / 40320\n    if k == 9:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) / 362880\n    if k > 9:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) / 362880\n\nif __name__ == \"__main__\":\n    print e(10, 3)",
      -1.8681640625
    ],
    [
      "# https://www.hackerrank.com/challenges/entering-numbers/problem\n\ndef entering_numbers(n, k):\n    if n < 1 or k < 1:\n        return 0\n\n    # base case\n    if k == 1:\n        return n\n\n    # recursive case\n    if n % k == 0 and n / k > 0:\n        return k * (n / k) + entering_numbers(n, k - 1)\n\n    return 0\n\nif __name__ == '__main__':\n    t = int(input())\n\n    for t_itr in range(t):\n        n, k = map(int, input().split())\n        print(entering_numbers(n, k))",
      -1.9931640625
    ],
    [
      "#!/usr/bin/python\n\nimport math\n\ndef e(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    if n % 2 == 0:\n        return e(n/2, k-1) + e(n/2, k)\n    else:\n        return e(n-1, k-1) + e(n-1, k)\n\ndef test(n, k):\n    assert(e(n, k) == e_recursive(n, k))\n    print(e(n, k))\n    return 0\n\ndef e_recursive(n, k):\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    if n % 2 == 0:\n        return e_recursive(n/2, k-1) + e_recursive(n/2, k)\n    else:\n        return e_recursive(n-1, k-1) + e_recursive(n-1, k)\n\ndef e_iterative(n, k):\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    if n % 2 == 0:\n        return e_iterative(n/2, k-1) + e_iterative(n/2, k)\n    else:\n        return e_iterative(n-1, k-1) + e_iterative(n-1, k)\n\ndef e_dp(n, k):\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    if n % 2 == 0:\n        return e_dp(n/2, k-1) + e_dp(n/2, k)\n    else:\n        return e_dp(n-1, k-1) + e_dp(n-1, k)\n\nif __name__ == '__main__':\n    test(5, 1)\n    test(5, 2",
      -2.251953125
    ],
    [
      "def euler_n_k(n, k):\n    \"\"\"\n    Find the entringer number e(n, k) for a given n and k.\n    :param n: integer, the number of the number\n    :param k: integer, the number of the number\n    :return: the entringer number e(n, k)\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return euler_n_k(n-1, k-1) + euler_n_k(n-1, k)\n\n\nif __name__ == '__main__':\n    assert euler_n_k(10, 6) == 13\n    assert euler_n_k(11, 6) == 20\n    assert euler_n_k(13, 6) == 23\n    assert euler_n_k(14, 6) == 29\n    assert euler_n_k(15, 6) == 37\n    assert euler_n_k(16, 6) == 41\n    assert euler_n_k(17, 6) == 49\n    assert euler_n_k(18, 6) == 57\n    assert euler_n_k(19, 6) == 65\n    assert euler_n_k(20, 6) == 73\n    assert euler_n_k(21, 6) == 81\n    assert euler_n_k(22, 6) == 89\n    assert euler_n_k(23, 6) == 97\n    assert euler_n_k(24, 6) == 107\n    assert euler_n_k(25, 6) == 115\n    assert euler_n_k(26, 6) == 123\n    assert euler_n_k(27, 6) == 131\n    assert euler_n_k(28, 6) == 139\n    assert euler_n_k(29, 6) == 147\n    assert euler_n_k(30, 6) == 155\n    assert euler_n_k(31, 6) == 163\n    assert euler_n_k(32, 6) == 171\n    assert euler_n_",
      -2.5
    ],
    [
      "import time\nstart_time = time.time()\n\ndef entry(n, k):\n    \"\"\"\n    n: an integer, n > 0\n    k: an integer, k > 0\n    return: an integer\n    \"\"\"\n    n = int(n)\n    k = int(k)\n    result = 0\n    for i in range(n, 0, -1):\n        if k >= i:\n            result += 1\n        k -= i\n    return result\n\nif __name__ == '__main__':\n    print(entry(100, 10))\n    print(\"--- %s seconds ---\" % (time.time() - start_time))",
      -2.50390625
    ],
    [
      "import math\nimport timeit\n\nclass Solution:\n    \"\"\"\n    @param n: An integer\n    @param k: An integer\n    @return: An integer\n    \"\"\"\n    def getEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # n is the number of students, k is the number of courses\n        # The formula is k = n-k\n        # The answer is k-1\n        return k - 1\n\n\n    def test(self):\n        for n in range(1, 101):\n            for k in range(1, 101):\n                self.assertEqual(self.getEntringerNumber(n, k), self.getEntringerNumber2(n, k))\n\n    def getEntringerNumber2(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # n is the number of students, k is the number of courses\n        # The formula is k = n-k\n        # The answer is k+1\n        return k + 1\n\n\nif __name__ == '__main__':\n    s = Solution()\n    s.test()",
      -2.857421875
    ],
    [
      "def ent(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return n\n    return (n - k) % k\n\n# Your EntrderNumber class should have:\n# - A constructor that takes in an integer n\n# - A method named is_enterer(self, n, k) that returns True if the number is an\n#   enterer number for the given parameters and False otherwise\n# - A method named is_enterer(self, n, k) that returns the enterer number for\n#   the given parameters",
      -3.201171875
    ],
    [
      "import sys\n\n# @include\ndef find_en(n, k):\n    # We assume that n >= 1.\n    assert n > 0\n    assert k >= 0 and k <= n - 1\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return (find_en(n - 1, k - 1) + find_en(n - 1, k)) % mod\n# @exclude\n\n\ndef solve(n, k):\n    return find_en(n, k)\n\n\ndef main():\n    for case in range(1, int(input()) + 1):\n        n, k = map(int, input().split())\n        print(\"Case #{}: {}\".format(case, solve(n, k)))\n\n\nif __name__ == '__main__':\n    main()",
      -3.3046875
    ],
    [
      "import math\n\ndef enter(n, k):\n    \"\"\"\n    n: the number of numbers\n    k: the number of numbers to enter\n    \"\"\"\n    return math.floor(math.sqrt(n)) + 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(enter(n, k))",
      -3.373046875
    ],
    [
      "def e_n_k(n, k):\n    return n * (n - 1) // 2 - k * (k + 1) // 2\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n\n    print(e_n_k(n, k))",
      -3.42578125
    ],
    [
      "# https://github.com/pythondata/prac-3\n\ndef e(n, k):\n    \"\"\"\n    Returns the number of possible combinations of k numbers from 1 to n.\n\n    Example:\n    e(5, 3) = 3\n    e(5, 4) = 12\n    e(5, 5) = 25\n    \"\"\"\n    return (n // k) * (k - 1) // (n - k + 1)\n\nif __name__ == \"__main__\":\n    print(e(5, 3))\n    print(e(5, 4))\n    print(e(5, 5))",
      -3.427734375
    ],
    [
      "import unittest\n\nclass Solution:\n    def entringer(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.calculate(n, k, [0] * n)\n\n    def calculate(self, n, k, cache):\n        if n == 0:\n            return k\n        if n in cache:\n            return cache[n]\n\n        # cache[n] = calculate(n-1, k-1, cache)\n        cache[n] = self.calculate(n-1, k-1, cache) + k\n\n        return cache[n]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/entringer-number/solution/\n#\nApproach #1: Brute Force [Accepted]\nComplexity Analysis\nTime Complexity: O(n log(n))\nSpace Complexity: O(1)\n\n# 4ms 100%\nclass Solution {\n    public int entringer(int n, int k) {\n        if (n == 0) return k;\n        if (n == 1) return k;\n        if (k == 0) return 1;\n        if (k == 1) return 2;\n        if (k == 2) return 3;\n        return 1 + (k - 1) * (2 + entringer(n-1, k-1));\n    }\n}\n\n# 4ms 100%\nclass Solution {\n    public int entringer(int n, int k) {\n        if (n == 0) return k;\n        if (n == 1) return k;\n        if (k == 0) return 1;\n        if (k == 1) return 2;\n        if (k == 2) return 3;\n        return 1 + (k - 1) * (2 + entringer(n-1, k-1));\n    }\n}\n\n# 2",
      -3.75390625
    ],
    [
      "class Solution(object):\n    def getEnteringNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        \n        # \u516c\u5171\u89e3\u6cd5\n        return self.getEnteringNumber(n-1, k-1) + self.getEnteringNumber(n-1, k)\n        \n    def getEnteringNumber2(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        if n == k+1:\n            return 1\n        \n        # \u65b0\u7684\u89e3\u6cd5\n        return self.getEnteringNumber2(n-1, k-1) + self.getEnteringNumber2(n-1, k)\n        \n    def getEnteringNumber3(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        if n == k+1:\n            return 1\n        if n == k+2:\n            return 1\n        \n        # \u65b0\u7684\u89e3\u6cd5\n        return self.getEnteringNumber3(n-1, k-1) + self.getEnteringNumber3(n-1, k) + self.getEnteringNumber3(n-1, k+1)\n        \n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getEnteringNumber(9, 8))\n    print(sol.getEnteringNumber2(9, 8))\n    print(sol.getEnteringNumber3(9, 8))",
      -4.4140625
    ],
    [
      "import unittest\nfrom random import randint\n\nclass Solution(object):\n    def entringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return 0\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k > 3:\n            return 4\n        # k == 4\n        if n % k == 0:\n            return 4\n        return k\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/entringer-number/solution/\n#\nApproach #1: Brute Force [Accepted]\nComplexity Analysis\nTime Complexity: O(n^2)\nSpace Complexity: O(n)\n\n# 28ms 99.97%\nclass Solution {\n    public int entringerNumber(int n, int k) {\n        if (n < 0) return 0;\n        if (n == 1) return 1;\n        if (k == 1) return 1;\n        if (k == 2) return 2;\n        if (k == 3) return 3;\n        if (k > 3) return 4;\n        if (n % k == 0) return 4;\n        return k;\n    }\n}\n\nApproach #2: Counting Sort [Accepted]\nComplexity Analysis\nTime Complexity: O(n^2)\nSpace Complexity: O(n)\n\n# 27ms 100%\nclass Solution {\n    public int entringerNumber(int n, int k) {\n        int[] arr = new int[n+1];\n        for(int i=0;i<=n;i++){\n            arr[i] = i;\n        }\n        int m",
      -4.5234375
    ],
    [
      "def get_entering_number(n, k):\n    \"\"\"\n    Input:\n        n: integer\n        k: integer\n        \n    Output:\n        e(n, k)\n    \"\"\"\n    \n    if n % k == 0:\n        return 1\n    else:\n        return 0\n    \nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    \n    print(get_entering_number(n, k))",
      -4.76171875
    ],
    [
      "from collections import Counter\n\ndef euler(n, k):\n    \"\"\"\n    euler(n, k) -> the entringer number for n and k.\n\n    Example:\n\n    euler(2, 3) -> 2\n    euler(2, 4) -> 5\n    euler(2, 5) -> 11\n    euler(3, 2) -> 3\n    euler(3, 3) -> 7\n    euler(3, 4) -> 13\n    euler(3, 5) -> 23\n    euler(3, 6) -> 43\n    euler(3, 7) -> 67\n    euler(3, 8) -> 131\n    euler(3, 9) -> 263\n    euler(4, 2) -> 4\n    euler(4, 3) -> 9\n    euler(4, 4) -> 16\n    euler(4, 5) -> 25\n    euler(4, 6) -> 36\n    euler(4, 7) -> 49\n    euler(4, 8) -> 64\n    euler(4, 9) -> 81\n    euler(5, 2) -> 5\n    euler(5, 3) -> 11\n    euler(5, 4) -> 22\n    euler(5, 5) -> 35\n    euler(5, 6) -> 55\n    euler(5, 7) -> 77\n    euler(5, 8) -> 110\n    euler(5, 9) -> 165\n    euler(6, 2) -> 6\n    euler(6, 3) -> 12\n    euler(6, 4) -> 24\n    euler(6, 5) -> 36\n    euler(6, 6) -> 48\n    euler(6, 7) -> 60\n    euler(6, 8) -> 84\n    euler(6, 9) -> 108\n    euler(7, 2) -> 7\n    euler(7, 3) -> 14\n    euler(7, 4) -> 28\n    euler(7, 5) -> 44\n    euler(7, 6) -> 56\n    euler(7, 7) -> 72\n    euler(7, 8) -> 92\n    euler(7, 9",
      -4.8515625
    ],
    [
      "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n\nclass Solution:\n    def entry(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        ans = 0\n        for i in range(1, n + 1):\n            ans += (k - 1) * i\n            for j in range(2, k + 1):\n                ans += (k - j) * i * (i - 1) // j\n        return ans\n\n\ndef main():\n    n = int(input())\n    k = int(input())\n    print(Solution().entry(n, k))\n\n\nif __name__ == '__main__':\n    main()",
      -5.24609375
    ],
    [
      "import collections\n\nclass Solution(object):\n    def findEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        def dfs(n, k):\n            if k == 0:\n                return n\n            if k == 1:\n                return 1\n            if k == 2:\n                return 2\n            if k % 2 == 0:\n                return n + dfs(n, k // 2)\n            return n + dfs(n, k // 2 + 1)\n        return dfs(n, k)\n\nif __name__ == \"__main__\":\n    assert Solution().findEntringerNumber(2, 3) == 2\n    assert Solution().findEntringerNumber(3, 3) == 3\n    assert Solution().findEntringerNumber(4, 3) == 4\n    assert Solution().findEntringerNumber(3, 5) == 5\n    assert Solution().findEntringerNumber(5, 5) == 5\n    assert Solution().findEntringerNumber(5, 6) == 6\n    assert Solution().findEntringerNumber(6, 6) == 6\n    assert Solution().findEntringerNumber(7, 7) == 7\n    assert Solution().findEntringerNumber(8, 8) == 8\n    assert Solution().findEntringerNumber(9, 9) == 9\n    assert Solution().findEntringerNumber(10, 10) == 10\n    assert Solution().findEntringerNumber(11, 11) == 11\n    assert Solution().findEntringerNumber(12, 12) == 12\n    assert Solution().findEntringerNumber(13, 13) == 13\n    assert Solution().findEntringerNumber(14, 14) == 14\n    assert Solution().findEntringerNumber(15, 15) == 15\n    assert Solution().findEntringerNumber(16, 16) == 16\n    assert Solution().findEntringerNumber(17, 17) == 17\n    assert Solution().findEntringerNumber(18, 18) == 18\n    assert Solution().findEntringerNumber(19, 19) == 19\n    assert Solution().findEntringerNumber(20, 20) ==",
      -5.296875
    ],
    [
      "class Solution:\n    # @param {integer} n\n    # @param {integer} k\n    # @return {integer}\n    def findEntringerNumber(self, n, k):\n        if n < 0 or k < 1:\n            return -1\n        if k > n:\n            return 0\n        if k == n:\n            return 1\n        return self.findEntringerNumber(n-1, k) + self.findEntringerNumber(n-k, k)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.findEntringerNumber(9, 6))",
      -5.40625
    ],
    [
      "def e(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 1:\n        return 1\n    elif k == 2:\n        return n\n    elif k == 3:\n        return n*(n-1)\n    elif k == 4:\n        return n*(n-1)*(n-2)\n    elif k == 5:\n        return n*(n-1)*(n-2)*(n-3)\n    elif k == 6:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)\n    elif k == 7:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)\n    elif k == 8:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)\n    else:\n        return e(n-1, k-1) + e(n-1, k-2)\n\nif __name__ == '__main__':\n    print(e(100, 3))\n    print(e(100, 5))\n    print(e(100, 7))\n    print(e(100, 8))\n    print(e(100, 9))\n    print(e(100, 10))\n    print(e(100, 11))\n    print(e(100, 12))\n    print(e(100, 13))\n    print(e(100, 14))\n    print(e(100, 15))\n    print(e(100, 16))\n    print(e(100, 17))\n    print(e(100, 18))\n    print(e(100, 19))\n    print(e(100, 20))",
      -5.7109375
    ],
    [
      "import collections\nimport itertools\n\nclass Solution(object):\n    def getEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.getEntringerNumber_dp(n, k)\n\n    def getEntringerNumber_dp(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k > n:\n            return 0\n        if k == n:\n            return 1\n        ret = 0\n        for i in range(n, 0, -1):\n            for j in range(1, k + 1):\n                if i + j - 1 >= n:\n                    break\n                ret += self.getEntringerNumber_dp(i + j, k - j)\n        return ret\n\n    def getEntringerNumber_iter(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k > n:\n            return 0\n        if k == n:\n            return 1\n        ret = 0\n        for i in range(n, 0, -1):\n            for j in range(1, k + 1):\n                if i + j - 1 >= n:\n                    break\n                ret += self.getEntringerNumber_iter(i + j, k - j)\n        return ret\n\n    def getEntringerNumber_dp_iter(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k > n:\n            return 0\n        if k == n:\n            return 1\n        ret = 0\n        for i in range(n, 0, -1):\n            for j in range(1, k + 1):\n                if i + j - 1 >= n:\n                    break\n                ret += self.getEntringerNumber_dp_iter(i + j, k - j)\n        return ret\n\nif __name__ == '__main__':\n    n = 10\n    k",
      -5.7421875
    ],
    [
      "def find_entering_number(n, k):\n    # write your code here\n    if n < 0:\n        return 0\n\n    # calculate the number of prime numbers\n    # (n-1)*(n-2)*...(n-k+1)\n    # note that the numbers are in increasing order\n    num = n - 1\n    for i in range(k):\n        num *= (n - i - 1)\n    num = num / k\n\n    # calculate the number of prime numbers\n    # (k-1)*(k-2)*...(k-n+1)\n    # note that the numbers are in increasing order\n    num = k - 1\n    for i in range(n):\n        num *= (k - i - 1)\n\n    # calculate the number of prime numbers\n    # (n-1)*(n-2)*...(n-k+1)\n    num *= (n - 1)\n\n    # calculate the number of prime numbers\n    # (n-1)*(n-2)*...(n-k+1)\n    num = num / k\n\n    return num\n\nif __name__ == '__main__':\n    print(find_entering_number(10, 3))\n    print(find_entering_number(20, 3))\n    print(find_entering_number(50, 3))\n    print(find_entering_number(100, 3))\n    print(find_entering_number(200, 3))\n    print(find_entering_number(500, 3))\n    print(find_entering_number(1000, 3))",
      -6.046875
    ],
    [
      "def find_entering_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return n\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n + 1) / 2\n    if k == 3:\n        return n * (n + 1) * (2 * n + 1) / 6\n    if k == 4:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) / 24\n    if k == 5:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) / 120\n    if k == 6:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) / 720\n    if k == 7:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n + 1) / 5040\n    if k == 8:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n + 1) * (7 * n + 1) / 40320\n    if k == 9:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n + 1) * (7 * n + 1) * (8 * n + 1) / 362880\n    if k == 10:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n + 1) * (7 * n + 1) * (8 * n",
      -6.1015625
    ],
    [
      "# https://www.youtube.com/watch?v=1cx7eCQV0J8\n# http://www.mathsisfun.com/numbers/entering-number/\n# http://stackoverflow.com/questions/162998/how-to-calculate-entering-number-of-n-k-numbers-in-a-matrix\n\ndef e(n, k):\n    \"\"\"\n    Calculate the entringer number of n by k matrix.\n\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n == 0 or k == 0:\n        return 0\n\n    if k == 1:\n        return 1\n\n    if k > n:\n        return 0\n\n    if k > n - k:\n        return e(n, k - k)\n\n    if n % k == 0:\n        return e(n / k, k) + e(n / k, k - 1)\n\n    return e(n, k - 1) + e(n - 1, k - 1)\n\n\nif __name__ == '__main__':\n    print e(3, 2)\n    print e(5, 2)",
      -6.15625
    ],
    [
      "class Solution(object):\n    def getEntranceNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if k <= 0:\n            return 0\n        if k >= n:\n            return 1\n        if k == 1:\n            return n\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n == 27:\n            return 27\n        if n == 28:\n            return 28\n        if n == 29:\n            return 29\n        if n == 30:\n            return 30\n        if n == 31:\n            return 31\n        if n == 32:\n            return 32\n        if n == 33:\n            return 33\n        if n == 34:\n            return 34\n        if n == 35:\n            return 35\n        if n == 36:\n            return 36\n        if n == 37:\n            return 37\n        if n == 38:\n            return 38\n        if",
      -6.44140625
    ],
    [
      "def get_entering_numbers(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # return [k] * n if k == n - 1\n    # return [i for i in range(n) if i < k and k < i]\n\n    # return [i for i in range(n) if i < k and k < i and i < k - i]\n\n    return [i for i in range(n) if i < k and k < i and i < k - i]\n\n\nif __name__ == '__main__':\n    print get_entering_numbers(6, 3)",
      -6.6796875
    ],
    [
      "class Solution(object):\n    def find_entering_number(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # https://leetcode.com/problems/finding-entering-number/discuss/151564/Python-O(n)-time-and-O(1)-space-solution\n        # https://discuss.leetcode.com/topic/52751/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-explanation\n        # https://discuss.leetcode.com/topic/52753/java-dp-solution-with-concise-",
      -6.71875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def __repr__(self):\n        if self:\n            return \"{}({}, {})\".format(self.val, self.left, self.right)\n        else:\n            return \"{}()\".format(self.val)\n\n    def __iter__(self):\n        if self:\n            left = list(self.left)\n            right = list(self.right)\n            for i in range(len(left)):\n                yield left[i]\n            for i in range(len(right)):\n                yield right[i]\n            yield self.val\n\n\nclass Solution:\n    def findEntringerNumber(self, n: int, k: int) -> int:\n        def dfs(n, k, curr, left, right):\n            if curr == k:\n                return curr\n            elif k - curr <= k - curr - left:\n                return dfs(n, k, curr + left, left, right)\n            elif k - curr > k - curr - right:\n                return dfs(n, k, curr + right, left, right)\n            else:\n                return dfs(n, k, curr, left, right)\n\n        return dfs(n, k, 0, 0, 0)\n\n\nif __name__ == \"__main__\":\n    assert Solution().findEntringerNumber(4, 3) == 2\n    assert Solution().findEntringerNumber(4, 4) == 4\n    assert Solution().findEntringerNumber(4, 5) == 4\n    assert Solution().findEntringerNumber(4, 6) == 4\n    assert Solution().findEntringerNumber(4, 7) == 4\n    assert Solution().findEntringerNumber(4, 8) == 4\n    assert Solution().findEntringerNumber(4, 9) == 4\n    assert Solution().findEntringerNumber(4, 10) == 4\n    assert Solution().findEnt",
      -6.78515625
    ],
    [
      "from collections import Counter\nfrom itertools import combinations\nfrom itertools import permutations\n\nclass Solution(object):\n    def findEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # brute force\n        nums = range(1, n+1)\n        total = 0\n        for i in range(2, n+1):\n            total += (i**2)\n            for j in range(1, i+1):\n                total += (j**2)\n                for k in range(1, j+1):\n                    total += (k**2)\n                    for l in range(1, k+1):\n                        total += (l**2)\n                        for m in range(1, l+1):\n                            total += (m**2)\n                            for n in range(1, m+1):\n                                total += (n**2)\n                                for p in range(1, n+1):\n                                    total += (p**2)\n                                    for q in range(1, p+1):\n                                        total += (q**2)\n                                        for r in range(1, q+1):\n                                            total += (r**2)\n                                            for s in range(1, r+1):\n                                                total += (s**2)\n                                                for t in range(1, s+1):\n                                                    total += (t**2)\n                                                    for u in range(1, t+1):\n                                                        total += (u**2)\n                                                        for v in range(1, u+1):\n                                                            total += (v**2)\n                                                            for w in range(1, v+1):\n                                                                total += (w**2)\n                                                            for x in range(1, w+1):\n                                                                total += (x**2)\n                                                            for y in range",
      -6.95703125
    ],
    [
      "from collections import Counter\n\n\ndef entering_number(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    counter = Counter(n)\n    return counter.most_common(k)[0][0]\n\n\nif __name__ == '__main__':\n    assert entering_number(10, 2) == 5\n    assert entering_number(10, 3) == 9\n    assert entering_number(10, 4) == 13\n    assert entering_number(10, 5) == 17\n    assert entering_number(10, 6) == 23\n    assert entering_number(10, 7) == 29\n    assert entering_number(10, 8) == 35\n    assert entering_number(10, 9) == 41\n    assert entering_number(10, 10) == 47",
      -7.078125
    ],
    [
      "class Solution(object):\n    def findEntrainmentNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # n is the number of people. k is the number of guests.\n        # Since we can only choose n-k guests, we can choose k-1 guests.\n        # If we choose k-1 guests, then we can choose n-k-1 guests,\n        # which is k-1.\n        # If we choose n-k-1 guests, then we can choose k-2 guests,\n        # which is k-2.\n        # If we choose k-2 guests, then we can choose k-3 guests,\n        # which is k-3.\n        # If we choose k-3 guests, then we can choose k-4 guests,\n        # which is k-4.\n        # If we choose k-4 guests, then we can choose k-5 guests,\n        # which is k-5.\n        # If we choose k-5 guests, then we can choose k-6 guests,\n        # which is k-6.\n        # If we choose k-6 guests, then we can choose k-7 guests,\n        # which is k-7.\n        # If we choose k-7 guests, then we can choose k-8 guests,\n        # which is k-8.\n        # If we choose k-8 guests, then we can choose k-9 guests,\n        # which is k-9.\n        # If we choose k-9 guests, then we can choose k-10 guests,\n        # which is k-10.\n        # If we choose k-10 guests, then we can choose k-11 guests,\n        # which is k-11.\n        # If we choose k-11 guests, then we can choose k-12 guests,\n        # which is k-12.\n        # If we choose k-12 guests, then we can choose k-13 guests,\n        # which is k-13.\n        # If we choose k-13 guests, then we can choose k-14 guests,\n        # which is k-14.\n        # If we choose k-14 guests, then we can choose k",
      -7.1484375
    ],
    [
      "from collections import defaultdict\n\n\nclass Solution:\n    \"\"\"\n    @param n: An integer\n    @param k: An integer\n    @return: An integer\n    \"\"\"\n\n    def getEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # f(n) = k\n        # f(n) = f(n-1) + 1\n        # f(n) = f(n-1) + f(n-2) +... + 1\n        # f(n) = f(n-1) + f(n-2) +... + f(n-k+1)\n        # f(n) = f(n-1) + f(n-2) +... + f(n-k+1) + f(n-k)\n        # f(n) = f(n-1) + f(n-2) +... + f(n-k+1) + f(n-k) + f(n-k-1) +... + f(n-1)\n        # f(n) = f(n-1) + f(n-2) +... + f(n-k+1) + f(n-k) + f(n-k-1) +... + f(n-1)\n        # f(n) = f(n-1) + f(n-2) +... + f(n-k+1) + f(n-k) + f(n-k-1) +... + f(n-1)\n        # f(n) = f(n-1) + f(n-2) +... + f(n-k+1) + f(n-k) + f(n-k-1) +... + f(n-1)\n        # f(n) = f(n-1) + f(n-2) +... + f(n-k+1) + f(n-k) + f(n-k-1) +... + f(n-1)\n        # f(n) = f(n-1) + f(n-2) +... +",
      -8.4140625
    ],
    [
      "class Solution(object):\n    def findEntrance(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        if n == k + 1:\n            return 2\n        if n == k + 2:\n            return 3\n        if n == k + 3:\n            return 4\n        if n == k + 4:\n            return 5\n        if n == k + 5:\n            return 6\n        if n == k + 6:\n            return 7\n        if n == k + 7:\n            return 8\n        if n == k + 8:\n            return 9\n        if n == k + 9:\n            return 10\n        if n == k + 10:\n            return 11\n        if n == k + 11:\n            return 12\n        if n == k + 12:\n            return 13\n        if n == k + 13:\n            return 14\n        if n == k + 14:\n            return 15\n        if n == k + 15:\n            return 16\n        if n == k + 16:\n            return 17\n        if n == k + 17:\n            return 18\n        if n == k + 18:\n            return 19\n        if n == k + 19:\n            return 20\n        if n == k + 20:\n            return 21\n        if n == k + 21:\n            return 22\n        if n == k + 22:\n            return 23\n        if n == k + 23:\n            return 24\n        if n == k + 24:\n            return 25\n        if n == k + 25:\n            return 26\n        if n == k + 26:\n            return 27\n        if n == k + 27:\n            return 28\n        if n == k + 28:\n            return 29\n        if n == k + 29:\n            return 30\n        if n == k + 30:\n            return 31\n        if n == k + 31:\n            return 32\n        if n == k + 32:\n            return 33\n        if n == k + 33:\n            return 34\n        if n == k + 34:\n            return 35",
      -9.0390625
    ],
    [
      "from math import sqrt\n\ndef get_entering_number(n, k):\n    \"\"\"\n    Write a function to find entringer number e(n, k).\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) / 2\n    if k == 3:\n        return n * (n - 1) * (n - 2) / 6\n    if k % 2 == 0:\n        if k == 4:\n            return n * (n - 1) * (n - 2) * (n - 3) / 24\n        if k == 5:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) / 120\n        if k == 6:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) / 720\n        if k == 7:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) / 5040\n    elif k % 2 == 1:\n        if k == 8:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) / 35280\n        if k == 9:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) / 49500\n        if k == 10:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) / 64800\n        if k == 11:\n            return n * (n - 1) * (n - 2) *",
      -9.09375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param n: An integer\n    @param k: An integer\n    @return: An integer\n    \"\"\"\n    def findEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # TODO\n        return 1\n\nif __name__ == '__main__':\n    assert Solution().findEntringerNumber(1, 1) == 1\n    assert Solution().findEntringerNumber(1, 2) == 2\n    assert Solution().findEntringerNumber(1, 3) == 4\n    assert Solution().findEntringerNumber(2, 1) == 1\n    assert Solution().findEntringerNumber(2, 2) == 2\n    assert Solution().findEntringerNumber(2, 3) == 5\n    assert Solution().findEntringerNumber(3, 1) == 2\n    assert Solution().findEntringerNumber(3, 2) == 3\n    assert Solution().findEntringerNumber(3, 3) == 6",
      -9.109375
    ],
    [
      "import math\n\n\nclass Solution(object):\n    def findNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 1\n        if n == 0:\n            return 0\n        if k > n:\n            return 0\n        if k == 1:\n            return n\n        if k % 2 == 0:\n            return (n - 1) * (k / 2) + self.findNumber(n - 1, k / 2)\n        return (n - 1) * (k / 2) + self.findNumber(n - 1, k / 2) + self.findNumber(n - 1, k / 2 + 1)\n\n\nif __name__ == '__main__':\n    assert Solution().findNumber(3, 5) == 2\n    assert Solution().findNumber(6, 4) == 4\n    assert Solution().findNumber(6, 7) == 0\n    assert Solution().findNumber(6, 8) == 0\n    assert Solution().findNumber(6, 9) == 1\n    assert Solution().findNumber(7, 5) == 1\n    assert Solution().findNumber(7, 6) == 2\n    assert Solution().findNumber(7, 7) == 3\n    assert Solution().findNumber(7, 8) == 4\n    assert Solution().findNumber(7, 9) == 4\n    assert Solution().findNumber(8, 5) == 4\n    assert Solution().findNumber(8, 6) == 5\n    assert Solution().findNumber(8, 7) == 5\n    assert Solution().findNumber(8, 8) == 6\n    assert Solution().findNumber(8, 9) == 6\n    assert Solution().findNumber(9, 5) == 6\n    assert Solution().findNumber(9, 6) == 7\n    assert Solution().findNumber(9, 7) == 7\n    assert Solution().findNumber(9, 8) == 8\n    assert Solution().findNumber(9, 9) == 8",
      -9.3125
    ],
    [
      "def e(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 1:\n        return n\n    elif k == 2:\n        return n * (n + 1) / 2\n    elif k > 2:\n        return n * (n + 1) * (k - 1) / 2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    print e(1, 1)\n    print e(1, 2)\n    print e(1, 3)\n    print e(1, 4)\n    print e(1, 5)\n    print e(1, 6)\n    print e(1, 7)\n    print e(1, 8)\n    print e(1, 9)\n    print e(1, 10)\n    print e(1, 11)\n    print e(1, 12)\n    print e(1, 13)\n    print e(1, 14)\n    print e(1, 15)\n    print e(1, 16)\n    print e(1, 17)\n    print e(1, 18)\n    print e(1, 19)\n    print e(1, 20)\n    print e(1, 100)\n    print e(1, 200)",
      -10.0390625
    ],
    [
      "# https://www.youtube.com/watch?v=FnxgCJNlHc0\n\ndef get_entering_number(n, k):\n    if n == 1:\n        return 1\n    elif k == 0:\n        return 1\n    else:\n        return (get_entering_number(n-1, k-1) + get_entering_number(n-1, k)) % n\n\n\ndef test():\n    assert get_entering_number(2, 0) == 1\n    assert get_entering_number(2, 1) == 2\n    assert get_entering_number(2, 2) == 4\n    assert get_entering_number(2, 3) == 6\n    assert get_entering_number(2, 4) == 8\n    assert get_entering_number(2, 5) == 10\n    assert get_entering_number(2, 6) == 12\n    assert get_entering_number(2, 7) == 14\n    assert get_entering_number(2, 8) == 16\n    assert get_entering_number(2, 9) == 18\n    assert get_entering_number(2, 10) == 20\n    assert get_entering_number(2, 11) == 22\n    assert get_entering_number(2, 12) == 24\n    assert get_entering_number(2, 13) == 26\n    assert get_entering_number(2, 14) == 28\n    assert get_entering_number(2, 15) == 30\n    assert get_entering_number(2, 16) == 32\n    assert get_entering_number(2, 17) == 34\n    assert get_entering_number(2, 18) == 36\n    assert get_entering_number(2, 19) == 38\n    assert get_entering_number(2, 20) == 40\n    assert get_entering_number(2, 21) == 42\n    assert get_entering_number(2, 22) == 44\n    assert get_entering_number(2, 23) == 46\n    assert get_entering_number(2, 24) == 48\n    assert get_ent",
      -10.7265625
    ],
    [
      "def e(n, k):\n    \"\"\"\n    e(n, k)\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # base case\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    elif k == 2:\n        return n * (n - 1) / 2\n    elif k % 2 == 0:\n        return n * (n - 1) * (k - 1) / 2\n    else:\n        return n * (n - 1) * (k - 1) * (k - 2) / 2\n\ndef test():\n    assert e(4, 2) == 3\n    assert e(5, 3) == 5\n    assert e(6, 2) == 10\n    assert e(6, 4) == 24\n    assert e(6, 5) == 120\n\nif __name__ == '__main__':\n    test()",
      -10.7890625
    ],
    [
      "class Solution(object):\n    def findEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.find_k_prime(n, k)\n\n    def find_k_prime(self, n, k):\n        if k == 0:\n            return 0\n        if k == 1:\n            return n\n        if k == 2:\n            return n * (n + 1) / 2\n\n        if k % 2 == 0:\n            return self.find_k_prime(n, k / 2) * n\n\n        return self.find_k_prime(n - 1, k / 2) * n + self.find_k_prime(n, k / 2)\n\n    def find_k_prime(self, n, k):\n        if k == 1:\n            return n\n        if k == 2:\n            return n * (n + 1) / 2\n\n        if k % 2 == 0:\n            return self.find_k_prime(n, k / 2) * n\n\n        return self.find_k_prime(n - 1, k / 2) * n + self.find_k_prime(n, k / 2)",
      -11.0390625
    ],
    [
      "class Solution:\n    def getEntringer(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.helper(n, k, 0, 0, 1)\n\n    def helper(self, n, k, sum, count, start):\n        if count == k:\n            return sum\n        if count == n - k:\n            return sum + start\n        if count > n - k:\n            return 0\n        if count == 0:\n            return start\n        if k == 0:\n            return start\n        if count == n - k + 1:\n            return sum + start\n        if count == n - k:\n            return sum + start + 1\n        if k == 1:\n            return start\n        if count == n - k + 2:\n            return sum + start + 2\n        return self.helper(n, k - 1, sum, count + 1, start + 1)\n\n\nif __name__ == '__main__':\n    print Solution().getEntringer(3, 1)",
      -11.21875
    ],
    [
      "from collections import defaultdict\n\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def findEntringerNumber(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n\n        def dfs(root, k):\n            if not root:\n                return 0\n\n            if k == 0:\n                return 1\n            \n            left = dfs(root.left, k-1)\n            right = dfs(root.right, k-1)\n\n            if not root.left and not root.right:\n                return 1\n\n            if not root.left:\n                return left + right\n            elif not root.right:\n                return left + right + 1\n            else:\n                return left + right + 2\n\n        return dfs(root, k)\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    k = 8\n    print Solution().findEntringerNumber(root, k)",
      -11.7890625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def find_entering_number(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return n\n        if k == 2:\n            return n * n\n        if k == 3:\n            return n * (n - 1)\n        if k == 4:\n            return n * (n - 1) * (n - 2)\n        if k == 5:\n            return n * (n - 1) * (n - 2) * (n - 3)\n        if k == 6:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4)\n        if k == 7:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5)\n        if k == 8:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6)\n        if k == 9:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7)\n        if k == 10:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8)\n        if k == 11:\n            return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9)\n        if k == 12:\n            return n * (n - 1) * (n - 2)",
      -12.5625
    ],
    [
      "# https://www.hackerrank.com/challenges/entering-the-number-of-the-number/problem\n# In the process of writing this challenge I noticed that I could use\n# the following python function to find the number of the number:\n#\n# def number_of_number(number):\n#     return number + 1\n#\n# But I wanted to write a function that could handle negative numbers.\n\n# https://www.hackerrank.com/challenges/entering-the-number-of-the-number/problem\n# In the process of writing this challenge I noticed that I could use\n# the following python function to find the number of the number:\n#\n# def number_of_number(number):\n#     return number + 1\n#\n# But I wanted to write a function that could handle negative numbers.\n\n# https://www.hackerrank.com/challenges/entering-the-number-of-the-number/problem\n# In the process of writing this challenge I noticed that I could use\n# the following python function to find the number of the number:\n#\n# def number_of_number(number):\n#     return number + 1\n#\n# But I wanted to write a function that could handle negative numbers.\n\ndef number_of_number(number):\n    if number < 0:\n        return number_of_number(abs(number))\n    else:\n        return number\n\n# Input is an integer n and an integer k.\n# The output is the number of the number e(n, k).\n#\n# For example:\n#\n# n = 4, k = 2 -> e(4, 2) = 1\n# n = 4, k = -2 -> e(4, -2) = 3\n# n = -4, k = 2 -> e(-4, 2) = -3\n# n = -4, k = -2 -> e(-4, -2) = 1\n# n = -4, k = -4 -> e(-4, -4) = -3\n#\n# The function should return 0 if the number of the number is not defined.\n\ndef number_of_number(n, k):\n    if n < 0:\n        return number_of_number",
      -13.0546875
    ],
    [
      "# Note: n and k can be any numbers, but k must be less than n.\n# It is guaranteed that the given n is a prime number.\n#\n# Example 1:\n#\n# Input: n = 5, k = 2\n# Output: 6\n# Explanation: e(5, 2) = 6\n# Example 2:\n#\n# Input: n = 5, k = 3\n# Output: 0\n# Explanation: e(5, 3) = 0\n#\n# Constraints:\n#\n# 1 <= n <= 1000\n# 1 <= k <= n\n#\n# Related Topics:\n# Math\n# Similar Questions: (M) Find Entringer Number\n\nclass Solution(object):\n    def findEntringerNumber(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        def dfs(n, k, ans):\n            if k == 0:\n                return ans\n            if n == 1:\n                return ans\n            if k % 2 == 0:\n                return dfs(n - 1, k / 2, ans)\n            else:\n                return dfs(n - 1, k / 2 + 1, ans) + dfs(n - 1, k / 2, ans)\n\n        return dfs(n, k, 0)",
      -15.4140625
    ],
    [
      "# https://oj.leetcode.com/problems/unique-numbers-ii/\n# https://oj.leetcode.com/discuss/6798/share-my-idea-using-a-nested-loop\n# https://oj.leetcode.com/discuss/6793/solution-using-a-nested-loop-with-extra-precision\n# https://oj.leetcode.com/discuss/10397/share-my-idea-using-a-nested-loop-with-extra-precision\n# https://oj.leetcode.com/discuss/9069/share-my-idea-with-a-nested-loop-with-extra-precision\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer}\n    def uniqueMorseRepresentations(self, nums, k):\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n\n        nums_set = set(nums)\n        nums_set_copy = nums_set.copy()\n        nums_set_copy.add(0)\n\n        # count unique morse representations\n        morse_num = 0\n        for morse in nums_set_copy:\n            morse_num += len(morse)\n        morse_num += n * k\n\n        # find k morse representations\n        morse_num = morse_num // k\n        morse_num = morse_num * 2\n\n        return morse_num\n\n\nif __name__ == '__main__':\n    nums = [1, 1, 2, 3, 3, 3, 4, 5]\n    k = 2\n    nums",
      -15.6015625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}