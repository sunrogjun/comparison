{
  "problem": {
    "task_id": "MBPP/140",
    "prompt": "Write a function to extract elements that occur singly in the given tuple list.",
    "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
    "test_list": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ],
    "challenge_test_list": [],
    "problem_id": 129
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i in range(len(nums)):\n            ret ^= nums[i]\n        return ret",
      2.30078125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def singleList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        prev = None\n        curr = head\n        while curr:\n            if curr.next:\n                if prev:\n                    prev.next = curr.next\n                curr.next = curr.next.next\n            else:\n                prev = curr\n            curr = curr.next\n        return head",
      1.5673828125
    ],
    [
      "import collections\n\ndef single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: List[tuple]\n    \"\"\"\n    if len(tuple_list) == 0:\n        return []\n\n    return [t for t in tuple_list if len(tuple_list) == 1 and t in tuple_list]\n\n\ndef main():\n    \"\"\"\n    Example:\n    >>> single_elements([1, 2, 3, 2, 3])\n    [(2, 3)]\n    >>> single_elements([1, 2, 3, 4])\n    []\n    >>> single_elements([1, 1, 1])\n    []\n    \"\"\"\n    tuple_list = [1, 2, 3, 2, 3]\n    print(single_elements(tuple_list))\n\n\nif __name__ == '__main__':\n    main()",
      1.4384765625
    ],
    [
      "from collections import defaultdict\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ret = defaultdict(int)\n        for num in nums:\n            ret[num] += 1\n        for num in ret.keys():\n            if ret[num] == 1:\n                return num\n        return None\n\n# Note:\n#     This is the same as the solution in the following problem.\n#     https://leetcode.com/problems/single-number-ii/",
      1.4228515625
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    Input: tuple list\n    Output: a list of elements that occur only once.\n    \"\"\"\n    elements = []\n    for element in tuple_list:\n        if element not in elements:\n            elements.append(element)\n    return elements\n\n\nif __name__ == '__main__':\n    tuple_list = [1,2,3,1,2,3]\n    elements = single_elements(tuple_list)\n    print elements",
      1.1337890625
    ],
    [
      "#!/usr/bin/env python\n# coding=utf-8\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(nums) & (~(sum(nums)))",
      0.9052734375
    ],
    [
      "def single(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    return [tuple_list[i][0] for i in range(len(tuple_list)) if len(tuple_list[i]) == 1]\n\n# Your SingleNumber solution should be written in the following style:\n# def single(tuple_list):\n#     return [tuple_list[i][0] for i in range(len(tuple_list)) if len(tuple_list[i]) == 1]",
      0.6787109375
    ],
    [
      "# https://leetcode.com/problems/single-number-ii/discuss/73930/Python-3-O(n)-Time-O(1)-Space-Solution\n# https://leetcode.com/problems/single-number-ii/discuss/73930/Python-3-O(n)-Time-O(1)-Space-Solution\n\n# 11.04.2016\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return reduce(lambda x, y: x ^ y, nums)",
      0.67236328125
    ],
    [
      "from collections import Counter\n\n\ndef single_element(t):\n    \"\"\"\n    :type t: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not t:\n        return []\n    counter = Counter(t)\n    if len(counter) == 1:\n        return [counter.most_common()[0][0]]\n    return []\n\n\ndef main():\n    \"\"\"\n    Example:\n        >>> single_element([1, 2, 3, 4, 5])\n        [1, 5]\n        >>> single_element([1, 2, 3, 4, 5, 6])\n        []\n        >>> single_element([1, 2, 3, 4, 5, 6, 7])\n        []\n    \"\"\"\n    print(single_element([1, 2, 3, 4, 5]))\n    print(single_element([1, 2, 3, 4, 5, 6]))\n    print(single_element([1, 2, 3, 4, 5, 6, 7]))\n\n\nif __name__ == '__main__':\n    main()",
      0.66943359375
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    Input: A tuple list with no duplicate elements.\n    Output: A list of elements that occur singly in the given tuple list.\n    \"\"\"\n    s = []\n    for x in tuple_list:\n        if x in s:\n            continue\n        s.append(x)\n    return s\n\ndef test_single_elements():\n    assert single_elements([1, 1, 2, 3]) == [1, 2, 3]\n    assert single_elements([1, 2, 3]) == [1, 2, 3]\n    assert single_elements([1, 1, 1]) == [1]\n    assert single_elements([1, 2, 3, 4]) == [1, 2, 3]\n    assert single_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef main():\n    test_single_elements()\n\nif __name__ == '__main__':\n    main()",
      0.436767578125
    ],
    [
      "def single_occurence(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    dic = {}\n    for t in tuple_list:\n        if t in dic:\n            dic[t] += 1\n        else:\n            dic[t] = 1\n    result = []\n    for t in dic:\n        if dic[t] == 1:\n            result.append(t)\n    return result\n\n# Your single_occurence function will be called like this:\n# single_occurence(tuple_list)",
      0.29833984375
    ],
    [
      "def single_elements(tuples):\n    \"\"\"\n    :type tuples: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for t in tuples:\n        if len(t) == 1:\n            result.append(t[0])\n    return result",
      0.238525390625
    ],
    [
      "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i in range(len(nums)):\n            ret ^= nums[i]\n        return ret\n\nif __name__ == \"__main__\":\n    assert Solution().singleNumber([1, 2, 3, 4]) == 0x9\n    assert Solution().singleNumber([1, 2, 3, 4, 5]) == 0x9\n    assert Solution().singleNumber([1, 2, 3, 4, 5, 6]) == 0x9\n    assert Solution().singleNumber([1, 2, 3, 4, 5, 6, 7]) == 0x9\n    assert Solution().singleNumber([1, 2, 3, 4, 5, 6, 7, 8]) == 0x9",
      0.197509765625
    ],
    [
      "#!/usr/bin/python\n\n# https://www.hackerrank.com/challenges/tutorial-sorting-tuple\n\ntuple_list = [\n    (1, 2, 3),\n    (1, 2, 3),\n    (1, 2, 3)\n]\n\ndef extract_singles(tuple_list):\n    \"\"\"\n    Args:\n        tuple_list: A tuple list\n    Returns:\n        A list of all the elements that occur singly in the given list\n    \"\"\"\n\n    single_list = []\n\n    for item in tuple_list:\n        if len(item) == 1:\n            single_list.append(item[0])\n\n    return single_list\n\nprint extract_singles(tuple_list)",
      0.0247650146484375
    ],
    [
      "from collections import Counter\n\n\ndef single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    counter = Counter(tuple_list)\n    single_elements = []\n    for key, value in counter.items():\n        if value == 1:\n            single_elements.append(key)\n    return single_elements\n\n\nif __name__ == '__main__':\n    assert single_elements([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]) == [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]",
      0.0178375244140625
    ],
    [
      "class Solution:\n    # @param A a list of integers\n    # @return a list of integers\n    def singleNumber(self, A):\n        d = {}\n        for i in A:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        \n        for i in d:\n            if d[i] == 1:\n                return i\n        \n        return 0",
      -0.038421630859375
    ],
    [
      "import collections\n\ndef extract_numbers(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple]\n    :rtype: List[int]\n    \"\"\"\n    # Write your code here\n    return [int(t) for t in tuple_list if int(t)]\n\nif __name__ == \"__main__\":\n    tuple_list = [(1, 2), (3, 4), (5, 6, 7)]\n    result = extract_numbers(tuple_list)\n    print(result)\n    assert result == [1, 3, 5]",
      -0.3134765625
    ],
    [
      "from collections import defaultdict\n\ndef single_elements(tuple_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    elements = set()\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            if tuple_list[i][j] in elements:\n                elements.remove(tuple_list[i][j])\n            else:\n                elements.add(tuple_list[i][j])\n    return list(elements)\n\nif __name__ == \"__main__\":\n    tuple_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 1, 1]]\n    print(single_elements(tuple_list))\n    tuple_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 1, 1], [1, 2, 3]]\n    print(single_elements(tuple_list))\n    tuple_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n    print(single_elements(tuple_list))\n    tuple_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 2, 3], [1, 2, 3]]\n    print(single_elements(tuple_list))\n    tuple_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 2, 3], [2, 3, 4]]\n    print(single_elements(tuple_list))",
      -0.349365234375
    ],
    [
      "def singly_occurring(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not tuple_list:\n        return []\n    occurring_list = []\n    for item in tuple_list:\n        if item in occurring_list:\n            occurring_list.remove(item)\n        else:\n            occurring_list.append(item)\n    return occurring_list",
      -0.62158203125
    ],
    [
      "def single_occurence(tuple_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    :type tuple_list: List[Tuple]\n    :rtype: List[Tuple]\n    \"\"\"\n    return [t for t in tuple_list if len(tuple_list) == 1]",
      -0.64990234375
    ],
    [
      "#!/bin/python\n\nclass Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def singleNumber(self, head):\n        dic = {}\n        n = 0\n        while head:\n            n ^= head.val\n            dic[n] = dic.get(n, 0) + 1\n            head = head.next\n        return dic.get(n)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(1)\n    head.next.next.next = ListNode(2)\n    head.next.next.next.next = ListNode(3)\n    head.next.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next.next = ListNode(5)\n    print(solution.singleNumber(head))",
      -0.6533203125
    ],
    [
      "def extract_elements(list_of_tuples):\n    return [tuple(i) for i in list_of_tuples if len(i) == 1]\n\nif __name__ == '__main__':\n    test_case = [(1, 2), (2, 3), (3, 4, 5), (4, 5, 6, 7)]\n    assert extract_elements(test_case) == [(1, 2), (2, 3), (3, 4)]",
      -0.67333984375
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in tuple_list if x not in set(tuple_list)]\n\ntuple_list = [1, 2, 1, 3, 4]\n\nprint(single_elements(tuple_list))",
      -0.83740234375
    ],
    [
      "# https://leetcode.com/problems/extract-unique-numbers-from-sorted-and-padded-list/\n\nclass Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def extractUnique(self, head):\n        # Write your code here\n        if head is None or head.next is None:\n            return head\n        \n        fast = head\n        slow = head\n        \n        while fast.next and fast.next.next:\n            fast = fast.next.next\n            slow = slow.next\n        \n        while fast:\n            slow = slow.next\n            fast = fast.next\n            \n        if slow is None:\n            return head\n        \n        slow = slow.next\n        \n        while slow:\n            fast = fast.next\n            slow = slow.next\n            \n        return fast",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        # Write your code here\n        res = 0\n        for i in nums:\n            res |= i\n        return res",
      -0.85693359375
    ],
    [
      "def single(l):\n    count = 0\n    for i in l:\n        if i == l[count]:\n            count += 1\n        else:\n            count = 0\n    return l[count:]\n\nif __name__ == \"__main__\":\n    assert single([1, 1, 2, 3, 3, 4, 5]) == [2, 3, 4, 5]",
      -0.85693359375
    ],
    [
      "def single_elements(tuple_list):\n    return [i for i in tuple_list if len(tuple_list) == 1 and i in tuple_list]\n\nif __name__ == '__main__':\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print single_elements(tuple_list)",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def extractSinglyLinkedList(self, head: ListNode) -> ListNode:\n        def single_link_list_helper(head):\n            if not head:\n                return None\n            if not head.next:\n                return head\n            single_link_list_helper(head.next)\n            head.next = head.next.next\n            return head\n\n        return single_link_list_helper(head)",
      -0.85693359375
    ],
    [
      "import collections\n\nclass Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums: return []\n        if len(nums) == 1: return [nums[0]]\n        res = collections.defaultdict(int)\n        for num in nums:\n            res[num] += 1\n        res = [(k,v) for k,v in res.items() if v == 1]\n        res = sorted(res, key=lambda t: t[0])\n        return [res[0][1]]",
      -0.85693359375
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for element in tuple_list:\n        if len(element) == 1:\n            result.append(element[0])\n    return result",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in xrange(len(nums)):\n            res ^= nums[i]\n        return res",
      -0.85791015625
    ],
    [
      "def single_elements(tuples):\n    return [elem for elem, count in Counter(tuples).items() if count == 1]\n\ndef main():\n    tuples = [\n        (1,),\n        (1, 2),\n        (1, 2, 3),\n        (1, 2, 3, 4),\n        (1, 2, 3, 4, 5),\n        (1, 2, 3, 4, 5, 6)\n    ]\n    print(single_elements(tuples))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param nums, a list of integer\n    # @return a list of lists of integer\n    def singleNumber(self, nums):\n        # write your code here\n        if not nums:\n            return []\n        nums.sort()\n        res = []\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                res.append([nums[i]])\n            else:\n                res.append([])\n        res = [x for x in res if x]\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.singleNumber([1, 2, 2, 3, 3, 3, 4])\n    print s.singleNumber([1, 1, 1, 1, 1, 1, 1])\n    print s.singleNumber([1, 2, 3, 4])\n    print s.singleNumber([1, 2, 3, 4, 5, 6])",
      -0.85791015625
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: List[int]\n    \"\"\"\n    return [x[0] for x in tuple_list if x[0] == x[1]]\n\nif __name__ == '__main__':\n    tuple_list = [(1,2),(1,1),(1,3),(1,2,3),(1,2,2)]\n    print single_elements(tuple_list)",
      -0.85791015625
    ],
    [
      "def single_elements(list):\n    return [x for x in list if list.count(x) == 1]\n\n\n# Your single_elements function will be called like this:\n# single_elements(my_list, my_list)",
      -0.85791015625
    ],
    [
      "# https://www.codewars.com/kata/6a9b9b7ddd6b5b4b0c09e0a3d5b3f9c\n# TODO: Implement the solution\ndef single_elements(list_of_tuples):\n    # Your code here\n    return",
      -0.85791015625
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for element in tuple_list:\n        if len(element) == 1:\n            result.append(element[0])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(single_elements([[1, 2, 3], [4, 5], [6, 7]]))\n    print(single_elements([[1, 2, 3], [4, 5], [6, 7], [1, 2]]))\n    print(single_elements([[1, 2, 3], [4, 5], [6, 7], [1, 2, 3]]))",
      -0.8583984375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def singleExist(self, root: TreeNode, nums: List[int]) -> bool:\n        if not root:\n            return False\n        \n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node.left is None and node.right is None:\n                if node.val in nums:\n                    return True\n            else:\n                if node.left:\n                    stack.append(node.left)\n                if node.right:\n                    stack.append(node.right)\n        return False",
      -0.8583984375
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(tuple_list) == 0:\n        return []\n    else:\n        return [x for x in tuple_list if x == tuple_list[0]]\n\nprint(single_elements([1, 2, 3, 4]))",
      -0.8583984375
    ],
    [
      "def extract_single_elements(tuple_list):\n    \"\"\"\n    tuple_list: list of tuples\n    return: list of elements that appear only once in the list\n    \"\"\"\n    single_element_list = []\n    for element in tuple_list:\n        if element in single_element_list:\n            continue\n        else:\n            single_element_list.append(element)\n    return single_element_list\n\nprint extract_single_elements([1, 2, 3])\nprint extract_single_elements([1, 2, 1, 3, 1, 4, 5])",
      -0.85888671875
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, t):\n        self.t = t\n        self.count = 1\n\n    def __repr__(self):\n        return str(self.t) + str(self.count)\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(nums)):\n            res ^= nums[i]\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.singleNumber([1, 2, 1, 3, 1, 5, 6, 7]))\n    print(sol.singleNumber([0, 1, 2, 3, 4, 5, 6, 7]))\n    print(sol.singleNumber([-1, -2, -1, -3, -1, -5, -6, -7]))",
      -0.85888671875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {TreeNode[]} nodes\n    # @return {TreeNode[]}\n    def singleNumber(self, nodes):\n        return [0]\n\n    # @param {TreeNode[]} nodes\n    # @return {TreeNode[]}\n    def singleNumber_2(self, nodes):\n        ret = []\n        for i in range(len(nodes)):\n            if i == 0:\n                if nodes[i].val!= 0:\n                    ret.append(nodes[i].val)\n            else:\n                if nodes[i].val == nodes[i - 1].val:\n                    ret.append(nodes[i].val)\n                else:\n                    ret.append(0)\n        return ret",
      -0.85888671875
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for t in tuple_list:\n        if t not in res:\n            res.append(t)\n    return res\n\n\nif __name__ == '__main__':\n    tuple_list = [[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n    print(single_elements(tuple_list))",
      -0.85888671875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n\tdef __init__(self, x):\n\t\tself.val = x\n\t\tself.next = None\n\n\tdef __repr__(self):\n\t\tif self:\n\t\t\treturn \"{} -> {}\".format(self.val, repr(self.next))\n\t\telse:\n\t\t\treturn \"Nil\"\n\nclass Solution:\n\t# @param head, a list node\n\t# @return a list node\n\tdef singleLinkedList(self, head):\n\t\tif head is None:\n\t\t\treturn None\n\t\tif head.next is None:\n\t\t\treturn head\n\t\t\n\t\tcurr = head\n\t\twhile curr.next is not None:\n\t\t\tcurr = curr.next\n\t\t\tif curr.next is None:\n\t\t\t\tbreak\n\t\t\n\t\tcurr.next = None\n\t\treturn head",
      -1.3125
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: List[int]\n    \"\"\"\n    return [e for e in tuple_list if len(tuple_list) == 1]\n\nif __name__ == \"__main__\":\n    tuple_list = [(1, 2), (1, 2), (2, 3), (2, 3), (2, 3)]\n    print single_elements(tuple_list)",
      -1.3330078125
    ],
    [
      "# https://leetcode.com/problems/extract-all-numbers-from-sorted-array/\n\nclass Solution:\n    # @param nums a list of integer\n    # @return a list of lists of integer\n    def extractIntegers(self, nums):\n        res = []\n        nums_len = len(nums)\n        if nums_len == 0:\n            return res\n        # for each element in nums\n        for i in range(nums_len):\n            # if the element is not in res, push the element to res\n            if not nums[i] in res:\n                res.append(nums[i])\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    res = s.extractIntegers([1,2,3,4,5,6,7,8,9])\n    print(res)\n    assert res == [[1,2,3,4,5,6,7,8,9]]\n\n    res = s.extractIntegers([1,2,3,4,5,6,7,8,9,10])\n    print(res)\n    assert res == [[1,2,3,4,5,6,7,8,9,10]]\n\n    res = s.extractIntegers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n    print(res)\n    assert res == [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]]\n\n    res = s.extractIntegers([-1,0,1,2,3,4,5,6,7,8,9,10])\n    print(res)\n    assert res == [[-1,0,1,2,3,4,5,6,7,8,9,10]]\n\n    res = s.extractIntegers([-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,",
      -1.380859375
    ],
    [
      "from collections import defaultdict\n\ndef single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: List[int]\n    \"\"\"\n    single_list = []\n    for t in tuple_list:\n        if t not in single_list:\n            single_list.append(t)\n    return single_list\n\ndef single_elements_2(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: List[int]\n    \"\"\"\n    return [t[0] for t in tuple_list if t[0] == t[1]]\n\nif __name__ == '__main__':\n    tuple_list = [\n        (1, 2),\n        (3, 4),\n        (5, 6),\n        (1, 2),\n        (3, 4)\n    ]\n    print(single_elements(tuple_list))\n    print(single_elements_2(tuple_list))",
      -1.431640625
    ],
    [
      "# https://www.hackerrank.com/challenges/extract-elements\n\n# This function takes an input tuple list and returns a list of all the elements that occur only once in the input tuple list.\n\n# Example 1:\n# Input: (1,2,1,3,2,5)\n# Output: [1,3,5]\n\n# Example 2:\n# Input: (7,7,7,8,8,10)\n# Output: [7,10]\n\n# Note:\n# The length of the given input list and output list will be in the range [1, 100].\n# The input list is already sorted in ascending order.\n# Elements in the input list are distinct.\n\nimport unittest\n\n\ndef singleton(list_):\n    \"\"\"\n    :type list_: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [i for i, elem in enumerate(list_) if list_.count(elem) == 1]\n\n\nclass Solution:\n    def singleton(self, list_):\n        return [i for i, elem in enumerate(list_) if list_.count(elem) == 1]\n\n\nclass SolutionTest:\n    def test_singleton(self):\n        \"\"\"\n        :type list_: List[int]\n        :rtype: List[int]\n        \"\"\"\n        self.assertEqual(singleton([1, 2, 1, 3, 2, 5]), [1, 3, 5])\n        self.assertEqual(singleton([7, 7, 7, 8, 8, 10]), [7, 10])\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -1.80078125
    ],
    [
      "def extract_single(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # Write your code here\n    return [i for i in tuple_list if i == tuple_list[0]]\n\nif __name__ == '__main__':\n    assert extract_single([1, 2, 3, 4]) == [1]\n    assert extract_single([1, 2, 2, 4]) == [2]\n    assert extract_single([1, 2, 3, 3, 4]) == [3, 3]\n    assert extract_single([1, 2, 3, 3, 4, 4]) == [4]\n    assert extract_single([1, 2, 3, 4, 4]) == []\n    assert extract_single([]) == []\n    assert extract_single([1]) == [1]",
      -1.8427734375
    ],
    [
      "def extract_single(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for t in tuple_list:\n        if len(t) == 1:\n            res.append(t[0])\n    return res\n\nif __name__ == '__main__':\n    t = [[1, 2, 3, 4], [2, 3], [1, 2], [1, 2, 3]]\n    print extract_single(t)",
      -1.8466796875
    ],
    [
      "def extract_singly(nums):\n    return [i for i in nums if nums.count(i) == 1]\n\nif __name__ == \"__main__\":\n    nums = (1, 2, 3, 4, 5, 6)\n    print(extract_singly(nums))\n    nums = (1, 2, 2, 3, 4, 4, 5, 6, 7, 8)\n    print(extract_singly(nums))\n    nums = (1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8)\n    print(extract_singly(nums))\n    nums = (1, 2, 3, 4, 5, 6, 7, 8)\n    print(extract_singly(nums))",
      -2.11328125
    ],
    [
      "def single_elements(tuple_list):\n    return [x for x in tuple_list if len(set(tuple_list)) == 1]\n\nif __name__ == '__main__':\n    assert single_elements([1, 2, 3, 4]) == [1]\n    assert single_elements([1, 2, 3, 4, 1]) == [1, 1]\n    assert single_elements([1, 2, 3, 4, 1, 5]) == [1, 5]\n    assert single_elements([1, 2, 3, 4, 1, 5, 1]) == [1, 5, 1]\n    assert single_elements([1, 2, 3, 4, 1, 5, 1, 6]) == [1, 5, 1, 6]\n    assert single_elements([1, 2, 3, 4, 1, 5, 1, 6, 1]) == [1, 5, 1, 6, 1]\n    assert single_elements([1, 2, 3, 4, 1, 5, 1, 6, 1, 7]) == [1, 5, 1, 6, 1, 7]\n    assert single_elements([1, 2, 3, 4, 1, 5, 1, 6, 1, 7, 1]) == [1, 5, 1, 6, 1, 7, 1]",
      -2.162109375
    ],
    [
      "def single_elements(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples.\n    :return: list of single elements.\n    \"\"\"\n    return [tup for tup in list_of_tuples if len(tup) == 1]\n\n\nif __name__ == '__main__':\n    assert single_elements([(1, 2), (2, 3), (3, 4)]) == [(2, 3)]\n    assert single_elements([(1, 2), (2, 3), (3, 4), (4, 5)]) == []\n    assert single_elements([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(2, 3)]\n    assert single_elements([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == []",
      -2.234375
    ],
    [
      "#!/usr/bin/env python\n\ndef single_elements(elements):\n    \"\"\"\n    >>> single_elements((1,2,3))\n    [1, 3]\n    >>> single_elements((1,2,3,4,5,6))\n    [1, 4, 6]\n    >>> single_elements((1,2,3,4,5,6,7))\n    [1, 4, 6, 7]\n    >>> single_elements((1,2,3,4,5,6,7,8,9))\n    [1, 4, 6, 8, 9]\n    >>> single_elements((1,2,3,4,5,6,7,8,9,10,11,12))\n    [1, 4, 6, 8, 9, 10, 11, 12]\n    \"\"\"\n    return [x for x in elements if x not in (x for x in elements if x!= x)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.326171875
    ],
    [
      "def get_elements_singly(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in tuple_list if x[0] == x[1]]\n\nclass Solution:\n    def getElementsSingly(self, tuple_list):\n        \"\"\"\n        :type tuple_list: List[Tuple[int, int]]\n        :rtype: List[int]\n        \"\"\"\n        return get_elements_singly(tuple_list)\n\n\nif __name__ == \"__main__\":\n    assert Solution().getElementsSingly([(1, 1), (2, 2), (3, 1), (4, 3)]) == [1, 2, 3]",
      -2.35546875
    ],
    [
      "def single_elements(numbers):\n    return [x for x in numbers if len(set([x])) == 1]\n\nif __name__ == '__main__':\n    assert single_elements([1, 2, 3, 4, 5]) == [1]\n    assert single_elements([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\n    assert single_elements([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7]\n    assert single_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert single_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
      -2.486328125
    ],
    [
      "from collections import defaultdict\n\nclass Solution:\n    # @param {ListNode[]} head\n    # @return {ListNode[]}\n    def singleNumber(self, head):\n        d = defaultdict(int)\n        while head:\n            d[head.val] += 1\n            head = head.next\n        \n        ans = []\n        for v in d:\n            if d[v] == 1:\n                ans.append(v)\n        return ans\n\n\nif __name__ == '__main__':\n    print(Solution().singleNumber([1,2,3,4,5,6,7,8,9]))\n    print(Solution().singleNumber([1,2,3,4,5,6,7,8,9,10]))\n    print(Solution().singleNumber([0,0,0,0,0,0,0,0,0,0]))\n    print(Solution().singleNumber([1,1,1,1,1,1,1,1,1,1]))\n    print(Solution().singleNumber([1,1,1,1,1,1,1,1,1,1,1]))",
      -2.595703125
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n        self.y = None\n    def __str__(self):\n        return str(self.x)\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return []\n        res = []\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i!= j:\n                    if (nums[i].x, nums[j].x) not in res:\n                        res.append((nums[i].x, nums[j].x))\n        return res",
      -2.77734375
    ],
    [
      "from collections import Counter\n\ndef single_elements(tuple_list):\n    \"\"\"\n    Extract elements that occur singly in the given tuple list.\n\n    :type tuple_list: List[Tuple]\n    :rtype: List[Tuple]\n    \"\"\"\n    # https://leetcode.com/problems/single-elements/discuss/29051/Python-DP-solution-using-two-lists\n    result = []\n    for elem in tuple_list:\n        if len(elem) == 1:\n            result.append(elem)\n    return result\n\nif __name__ == '__main__':\n    assert single_elements([(1,), (2,), (3,), (4,)]) == [(1,), (2,), (3,), (4,)]\n    assert single_elements([(1,), (2,), (3,), (4,)]) == [(1,), (2,), (3,), (4,)]\n    assert single_elements([(1,), (2,), (3,), (4,)]) == [(1,), (2,), (3,), (4,)]\n    assert single_elements([(1,), (2,), (3,), (4,)]) == [(1,), (2,), (3,), (4,)]\n    assert single_elements([(1,), (2,), (3,), (4,)]) == [(1,), (2,), (3,), (4,)]\n    assert single_elements([(1,), (2,), (3,), (4,)]) == [(1,), (2,), (3,), (4,)]\n    assert single_elements([(1,), (2,), (3,), (4,)]) == [(1,), (2,), (3,), (4,)]\n    assert single_elements([(1,), (2,), (3,), (4,)]) == [(1,), (2,), (3,), (4,)]",
      -3.35546875
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in tuple_list if len(tuple_list) == 1 and x == tuple_list[0]]\n\n\nif __name__ == \"__main__\":\n    tuple_list = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print(single_elements(tuple_list))",
      -3.6875
    ],
    [
      "def single_elements(tuple_list):\n    return [elem for elem, count in Counter(tuple_list).items() if count == 1]\n\n# Testing\nassert(single_elements([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)])) == []\nassert(single_elements([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)])) == [(1, 2)]\nassert(single_elements([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)])) == [(1, 2)]\nassert(single_elements([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)])) == [(1, 2)]\nassert(single_elements([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)])) == [(1, 2)]\nassert(single_elements([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)])) == [(1, 2)]",
      -3.80078125
    ],
    [
      "# https://www.hackerrank.com/challenges/single-elements/problem\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#",
      -4.0390625
    ],
    [
      "# https://leetcode.com/problems/find-repeated-substring/description/\n# Given a list of strings, return all groups of strings that occur only once.\n# For example, given: [\"abcabc\", \"bcdbcb\", \"acdbac\"],\n# Return: [\"abc\", \"bcd\", \"acd\"]\n# Note: The answer is already in sorted order.\n\n# Time:  O(N^2)\n# Space: O(N)\n\n# Definition for a string.\nclass String(object):\n    def __init__(self, s):\n        self.s = s\n    def __repr__(self):\n        return self.s\n\nclass Solution(object):\n    def findRepeatedDnaSequences(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: List[str]\n        \"\"\"\n        d = {}\n        for i in range(len(s)):\n            cur = s[i]\n            if cur in d:\n                d[cur] += 1\n            else:\n                d[cur] = 1\n        res = []\n        for i in range(len(s)):\n            cur = s[i]\n            if cur in d:\n                if d[cur] == 1:\n                    res.append(cur)\n                else:\n                    d[cur] -= 1\n        return res",
      -4.22265625
    ],
    [
      "import unittest\n\n# https://www.hackerrank.com/challenges/extracting-singly-occuring-elements\n\n\ndef single_occurence(tuple_list):\n    \"\"\"\n    Args:\n        tuple_list (List[Tuple[int]]): A list of tuples.\n\n    Returns:\n        List[Tuple[int]]: A list of tuples.\n    \"\"\"\n    result = []\n    for t in tuple_list:\n        if len(t) == 1:\n            result.append(t)\n    return result\n\n\nclass TestCode(unittest.TestCase):\n    def test_single_occurence(self):\n        tuple_list = [(1, 2, 3, 4), (5, 6, 7, 8), (1, 2, 3, 4), (1, 2, 3, 4)]\n        self.assertEqual(single_occurence(tuple_list), [(1, 2, 3, 4)])\n\nif __name__ == '__main__':\n    unittest.main()",
      -4.25
    ],
    [
      "def single_elements(list_of_tuples):\n\t\"\"\"\n\tArguments:\n\tlist_of_tuples: A list of tuples that contain the numbers of elements that are in single.\n\t\n\tReturn:\n\tA list of the numbers of elements in single.\n\t\"\"\"\n\t\n\tsingle_elements = []\n\tfor i in range(len(list_of_tuples)):\n\t\tif len(list_of_tuples[i]) == 1:\n\t\t\tsingle_elements.append(list_of_tuples[i][0])\n\treturn single_elements\n\nif __name__ == \"__main__\":\n\tprint single_elements([(1,2),(3,4),(5,6)])",
      -4.32421875
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    # @param {ListNode} head\n    # @return {ListNode}\n    def single1(self, head):\n        if not head:\n            return None\n        count = 0\n        prev = head\n        while prev:\n            prev = prev.next\n            count += 1\n        head = head.next\n        res = ListNode(0)\n        cur = res\n        while head:\n            cur.next = head\n            head = head.next\n            cur = cur.next\n        cur.next = None\n        return res.next",
      -4.5234375
    ],
    [
      "import collections\n\ndef single_elements(list_of_tuples):\n    \"\"\"\n    :type list_of_tuples: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    elements = collections.defaultdict(int)\n    for t in list_of_tuples:\n        for e in t:\n            elements[e] += 1\n\n    # print(elements)\n    # print(elements.items())\n\n    return [elements[e] for e in elements]\n\nif __name__ == \"__main__\":\n    list_of_tuples = [[1,2,3,4], [1,2,3,5], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4]]\n\n    print(single_elements(list_of_tuples))",
      -4.5234375
    ],
    [
      "def extract_singly(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [i for i in tuple_list if i == tuple_list[0]]\n\nif __name__ == '__main__':\n    assert(extract_singly([1, 2, 3, 4]) == [1, 2])\n    assert(extract_singly([1, 2, 3, 4, 5]) == [1, 2])\n    assert(extract_singly([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5])",
      -5.0
    ],
    [
      "#!/bin/python\n\ndef single(tuple_list):\n    return [i for i, x in enumerate(tuple_list) if x == tuple_list[i]]\n\nif __name__ == '__main__':\n    print single([1, 2, 2, 3, 4])\n    print single([1, 2, 2, 3, 4, 4])\n    print single([1, 2, 2, 3, 4, 5, 6])\n    print single([1, 2, 2, 3, 4, 5, 6, 7])",
      -5.046875
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, tup):\n        self.tup = tup\n\n    def __eq__(self, other):\n        return self.tup == other.tup\n\n    def __repr__(self):\n        return str(self.tup)\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: int\n        \"\"\"\n        l = len(nums)\n        result = 0\n        for i in range(l):\n            result ^= nums[i].tup\n        return result\n\ns = Solution()\n# [[1, 2, 3, 4], [3, 4, 1, 2], [2, 3, 4, 1]]\n# s.singleNumber([[1, 2, 3, 4], [3, 4, 1, 2], [2, 3, 4, 1]])\n# [3, 4, 1, 2]\n# s.singleNumber([1, 2, 3, 4])",
      -5.109375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param: A tuple list\n    @return: A list of indices of the elements that occur only once.\n    \"\"\"\n    def singleNumber(self, nums):\n        # write your code here\n        nums = list(set(nums))\n        return [i for i in range(len(nums)) if nums[i] in nums]\n\nif __name__ == \"__main__\":\n    #solution = Solution()\n    #print solution.singleNumber([1,2,3,4,5,6])\n    #print solution.singleNumber([1,2,3,3,3,4])\n    print Solution().singleNumber([1,2,3,3,3,4])",
      -5.1640625
    ],
    [
      "def extract_single_elements(lst):\n    return [elem for elem in lst if len(lst) == 1 and lst.count(elem) == 1]\n\n# Test cases\nlst = [1, 2, 3, 4]\nprint(extract_single_elements(lst))\n\nlst = [1, 2, 3, 4, 5]\nprint(extract_single_elements(lst))\n\nlst = [1, 2, 3, 4, 5, 6]\nprint(extract_single_elements(lst))\n\nlst = [1, 2, 3, 4, 5, 6, 7]\nprint(extract_single_elements(lst))",
      -5.63671875
    ],
    [
      "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, tup):\n        self.tup = tup\n\n    def __str__(self):\n        return str(self.tup)\n\n    def __eq__(self, other):\n        return self.tup == other.tup\n\n    def __hash__(self):\n        return hash(self.tup)\n\nclass Solution(object):\n    def singleNonDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[Tuple]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums = sorted(nums)\n        \n        p1 = None\n        p2 = None\n        \n        for i in range(len(nums)):\n            if p1 is not None and nums[i]!= p1:\n                p2 = p1\n                p1 = None\n                continue\n            if p2 is None:\n                p1 = nums[i]\n            else:\n                p2 = nums[i]\n        if p1 is not None:\n            return [p1]\n        else:\n            return [p2]",
      -5.85546875
    ],
    [
      "def single(tuple_list):\n    for i in range(len(tuple_list)):\n        if tuple_list[i] == tuple_list[i]:\n            return tuple_list[i]\n    return None\n\nif __name__ == \"__main__\":\n    assert(single((1, 2, 3, 4, 5)) == 1)\n    assert(single((1, 2, 3, 4, 5, 6, 7, 8, 9)) is None)\n    assert(single((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) is None)",
      -5.96875
    ],
    [
      "from collections import Counter\n\ndef extract_elements(tuple_list):\n    \"\"\"\n    Input: tuple list of size n,\n    n is the size of the list\n    Output: a list of elements that occur singly\n    \"\"\"\n    # Note: this is a greedy algorithm\n    elements = []\n    for element in tuple_list:\n        if element not in elements:\n            elements.append(element)\n    return elements\n\n# Note: This is not a good solution.\ndef extract_elements_greedy(tuple_list):\n    \"\"\"\n    Input: tuple list of size n,\n    n is the size of the list\n    Output: a list of elements that occur singly\n    \"\"\"\n    # Note: this is a greedy algorithm\n    elements = []\n    for element in tuple_list:\n        if element not in elements:\n            elements.append(element)\n            elements.remove(element)\n    return elements\n\n# Note: This is not a good solution.\ndef extract_elements_recursive(tuple_list):\n    \"\"\"\n    Input: tuple list of size n,\n    n is the size of the list\n    Output: a list of elements that occur singly\n    \"\"\"\n    # Note: this is a greedy algorithm\n    elements = []\n    for element in tuple_list:\n        if element not in elements:\n            elements.append(element)\n            elements.remove(element)\n    return elements\n\nif __name__ == '__main__':\n    tuple_list = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n    print extract_elements(tuple_list)\n    print extract_elements_greedy(tuple_list)\n    print extract_elements_recursive(tuple_list)",
      -6.4140625
    ],
    [
      "# https://leetcode.com/problems/extract-unique-numbers/discuss/56901/Python-O(N)-Time-O(1)-Space-Solution\n# O(N) time and O(1) space\n# [0,1,1,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [1,2,1,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [1,2,1,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [1,2,1,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [1,2,1,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [0,1,1,2,1,2,1]\n# [1,1,2,2,1,2,1]\n# [1,2,1,2,1,2,1]\n# [0,1,1,2,1,2",
      -6.44140625
    ],
    [
      "def single(list_of_tuples):\n    \"\"\"\n    Return a list of elements that occur only once in the given list of tuples.\n    \"\"\"\n\n    def single(tup):\n        return tup[0] in set(tup) and len(tup) == 1\n\n    return filter(single, list_of_tuples)\n\n# print single([(1, 2), (1, 3), (2, 3)])\n# print single([(1, 2), (1, 3), (2, 3), (1, 1)])\n# print single([(1, 2), (1, 3), (2, 3), (1, 1), (1, 2)])\n\ndef main():\n    assert single([(1, 2), (1, 3), (2, 3)]) == [(1, 2)]\n    assert single([(1, 2), (1, 3), (2, 3), (1, 1)]) == [(1, 2)]\n    assert single([(1, 2), (1, 3), (2, 3), (1, 1), (1, 2)]) == [(1, 2)]\n\nif __name__ == \"__main__\":\n    main()",
      -6.5
    ],
    [
      "# https://leetcode.com/problems/find-duplicates-in-sorted-array/\n# diff between t and t_1\n# t_1 is a sorted list\n# t is a tuple list\n# t[i] is the value of i-th element of t\n# t_1[i] is the value of i-th element of t_1\n# t[i] == t_1[i] if t[i] is the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t_1[i]\n# t[i] == t_1[i] if t[i] is the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t_1[i]\n# t[i] == t_1[i] if t[i] is the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t_1[i]\n# t[i] == t_1[i] if t[i] is the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t_1[i]\n# t[i] == t_1[i] if t[i] is the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t_1[i]\n# t[i]!= t_1[i] if t[i] is not the same as t",
      -7.2109375
    ],
    [
      "def single_occurrence(a_tuple):\n    \"\"\"\n    For a given list, return a list of elements that occur exactly once.\n\n    >>> single_occurrence([1, 2, 3, 4])\n    [1, 2, 3]\n    >>> single_occurrence([1, 2, 2, 2])\n    []\n    \"\"\"\n    for i in range(0, len(a_tuple)):\n        if a_tuple[i] in a_tuple:\n            if i == len(a_tuple) - 1:\n                return a_tuple[i:]\n            else:\n                return a_tuple[i:] + single_occurrence(a_tuple[i+1:])\n    return []",
      -7.46484375
    ],
    [
      "# https://oj.leetcode.com/problems/find-all-anagrams-in-a-string/\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nimport collections\n\n\nclass Solution(object):\n    def findAnagrams(self, strs, target):\n        \"\"\"\n        :type strs: List[str]\n        :type target: str\n        :rtype: List[str]\n        \"\"\"\n        anagram_dict = collections.defaultdict(set)\n        for s in strs:\n            for c in s:\n                anagram_dict[c].add(s)\n        anagram_list = []\n        for c in target:\n            if c in anagram_dict:\n                anagram_list.extend(anagram_dict[c])\n        return anagram_list\n\n\nif __name__ == '__main__':\n    s = Solution()\n    strs = [\"ab\", \"abc\", \"dab\", \"aac\", \"bbc\"]\n    target = \"abc\"\n    anagrams = s.findAnagrams(strs, target)\n    for i in anagrams:\n        print i",
      -7.5703125
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def singleExist(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        if root is None:\n            return False\n        if k == 1:\n            return True\n        if root.left is None and root.right is None:\n            return False\n        return self.singleExist(root.left, k-1) or self.singleExist(root.right, k-1)\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print Solution().singleExist(root, 3)\n    print Solution().singleExist(root, 4)",
      -7.7578125
    ],
    [
      "# Definition for a tuple.\nclass Tuple(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __eq__(self, other):\n        return self.x == other.x\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for num in nums:\n            ret ^= num\n        return ret\n\n    def singleNumber_2(self, nums):\n        \"\"\"\n        :type nums: List[Tuple[int, int]]\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for num in nums:\n            ret ^= num.x\n        return ret\n\n    def singleNumber_3(self, nums):\n        \"\"\"\n        :type nums: List[Tuple[int, int]]\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for num in nums:\n            ret ^= num.x\n        return ret",
      -7.8515625
    ],
    [
      "#!/usr/bin/env python\n\nimport time\nimport sys\nimport os\n\nstart_time = time.time()\n\ndef single_element(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(len(tuple_list)):\n        if tuple_list[i] == tuple_list[i]:\n            result.append(tuple_list[i])\n    return result\n\nif __name__ == '__main__':\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])\n    print single_element([1, 2, 3, 3, 3, 3, 3, 3, 3, 4])",
      -7.8828125
    ],
    [
      "def singletons(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    for tup in tuple_list:\n        if tup in res:\n            res.remove(tup)\n        else:\n            res.append(tup)\n    return res\n\nclass Solution(object):\n    def getSingles(self, list_):\n        \"\"\"\n        :type list_: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(len(list_)):\n            if list_[i] not in res:\n                res.append(list_[i])\n        return res\n\nif __name__ == \"__main__\":\n    assert Solution().getSingles([1, 2, 3]) == [1, 2, 3]",
      -7.90625
    ],
    [
      "def extract_one(tuple_list):\n    return [x for x in tuple_list if x == tuple_list[0]]\n\ndef extract_one_in_tuple(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0]]\n\ndef extract_one_in_list(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0][0]]\n\ndef extract_one_in_tuple_list(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0][0]]\n\ndef extract_one_in_list_list(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0][0][0]]\n\ndef extract_one_in_tuple_list_list(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0][0][0]]\n\ndef extract_one_in_tuple_tuple_tuple(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0][0][0][0]]\n\ndef extract_one_in_tuple_tuple_tuple_tuple(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0][0][0][0]]\n\ndef extract_one_in_tuple_tuple_tuple_list(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0][0][0][0]]\n\ndef extract_one_in_tuple_tuple_list_list(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0][0][0][0]]\n\ndef extract_one_in_tuple_tuple_list_list_list(tuple_list):\n    return [x for x in tuple_list if x[0] == tuple_list[0][",
      -8.0234375
    ],
    [
      "# https://www.hackerrank.com/challenges/extract-elements/problem\n# https://www.hackerrank.com/challenges/extract-elements-from-a-tuple/problem\n# https://www.hackerrank.com/challenges/extract-elements-from-a-list/problem\n# https://www.hackerrank.com/challenges/extract-elements-from-a-string/problem\n# https://www.hackerrank.com/challenges/extract-elements-from-a-nested-tuple/problem\n# https://www.hackerrank.com/challenges/extract-elements-from-a-tuple-with-a-predicate/problem\n\n# Complete the extractElements function below.\ndef extractElements(tupleList):\n    # Extract elements from a tuple list\n    # Input:\n    # tupleList = (('a', 'b'), ('c', 'd'), ('e', 'f'))\n    # Output:\n    # print('a', 'b', 'c', 'd', 'e', 'f')\n\n    # Extract elements from a list\n    # Input:\n    # tupleList = [('a', 'b'), ('c', 'd'), ('e', 'f'))\n    # Output:\n    # print('a', 'b', 'c', 'd', 'e', 'f')\n\n    # Extract elements from a string\n    # Input:\n    # tupleList = 'abcde'\n    # Output:\n    # print('a', 'b', 'c', 'd', 'e', 'f')\n\n    # Extract elements from a nested tuple\n    # Input:\n    # tupleList = ('a', ('b', ('c', 'd')), 'e')\n    # Output:\n    # print('a', 'b', 'c', 'd', 'e')\n\n    # Extract elements from a nested list\n    # Input:\n    # tupleList = [['a', 'b'], ['c', 'd'], ['e', 'f']]\n    # Output:\n    # print('a', 'b', 'c', 'd', 'e', 'f')\n\n    # Extract",
      -9.4453125
    ],
    [
      "# https://oj.leetcode.com/problems/single-number/\n\n\nclass Solution:\n    # @param nums: A list of integers\n    # @return: A list of integers includes the index of the first number and the index of the last number\n    def singleNumber(self, nums):\n        result = []\n        for i in range(len(nums)):\n            if i == 0:\n                continue\n            if nums[i] == nums[i-1]:\n                result.append(i)\n        return result\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.singleNumber([1,1,1,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,",
      -9.5390625
    ],
    [
      "import collections\n\ndef single(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [i for i in range(1, len(tuple_list)) if tuple_list[i-1] == tuple_list[i]]\n\ndef main():\n    tuple_list = [1, 2, 1, 3, 4, 5, 2, 1, 3]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 1, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n    tuple_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(single(tuple_list))\n\nif __name__ == '__main__':\n    main()",
      -9.953125
    ],
    [
      "# https://leetcode.com/problems/extract-unique-numbers-from-sorted-and-padded-array/\n# Write an efficient function to extract elements from sorted array without duplicates.\n\n# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def start_inc(self):\n        return self.start + 1\n\n    def end_dec(self):\n        return self.end - 1\n\nclass Solution:\n    def extractIntervals(self, intervals: List[Interval]) -> List[Interval]:\n        result = []\n        for i in range(len(intervals)):\n            if i > 0 and intervals[i].start == intervals[i-1].end:\n                continue\n            elif i == 0 or intervals[i].start > intervals[i-1].end:\n                result.append(intervals[i])\n            elif intervals[i-1].end >= intervals[i].start:\n                result[-1].end = max(result[-1].end, intervals[i].end)\n        return result",
      -10.0078125
    ],
    [
      "import collections\n\ndef single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    # sort the input list\n    tuple_list.sort()\n\n    # build a mapping of single elements\n    single_elements_map = collections.defaultdict(list)\n    for element in tuple_list:\n        single_elements_map[element[0]].append(element[1])\n\n    # return all the single elements\n    return [element for element in single_elements_map.values() if len(element) == 1]\n\n# test\ntuple_list = [(1, 2), (1, 2), (2, 3), (2, 3), (1, 2)]\nprint(single_elements(tuple_list))",
      -11.234375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for num in nums:\n            dic[num] = dic.get(num, 0) + 1\n        \n        res = 0\n        for num, cnt in dic.items():\n            res ^= num\n            res ^= cnt\n        return res\n\n\nif __name__ == '__main__':\n    nums = (1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
      -11.90625
    ],
    [
      "# https://leetcode.com/problems/single-number/discuss/24098/Python-solution-using-map-and-filter-with-nested-list\n# from the discussion in https://leetcode.com/problems/single-number/discuss/24098/Python-solution-using-map-and-filter-with-nested-list\n# https://discuss.leetcode.com/topic/59444/python-solution-with-explanation\n# https://discuss.leetcode.com/topic/59444/python-solution-with-explanation\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        nums.reverse()\n        return sum(nums)\n\n\n# https://leetcode.com/problems/single-number/discuss/2869/Java-solution-using-map-filter-with-nested-list\n# https://discuss.leetcode.com/topic/59444/python-solution-with-explanation\nclass Solution2(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        nums.reverse()\n        nums = [n for n in nums if n not in set(nums)]\n        return sum(nums)\n\n\n# https://leetcode.com/problems/single-number/discuss/2869/Java-solution-using-map-filter-with-nested-list\n# https://discuss.leetcode.com/topic/59444/python-solution-with-explanation\nclass Solution3(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        nums.reverse()\n        nums = [n for n in nums if n",
      -12.140625
    ],
    [
      "# https://leetcode.com/problems/extract-k-nth-element-from-sorted-list/\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def kthToTail(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if head is None or k == 1:\n            return head\n\n        l, r = head, None\n        while l and l.next:\n            l = l.next\n            r = r if r is not None else l\n        l, r = l.next, r.next\n\n        while k > 1:\n            l = l.next\n            r = r.next\n            k -= 1\n\n        if k == 1:\n            return r\n        else:\n            return l",
      -12.453125
    ],
    [
      "# https://leetcode.com/problems/extract-unique-numbers-from-sorted-array-ii/\n# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def findIntervals(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: List[Interval]\n        \"\"\"\n        if not intervals:\n            return []\n        ret = []\n        for i in xrange(len(intervals)):\n            if i == 0:\n                ret.append(intervals[i])\n            else:\n                ret.append(Interval(intervals[i].start, intervals[i-1].end))\n        return ret",
      -12.5859375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums_len = len(nums)\n        if nums_len == 0:\n            return 0\n        if nums_len == 1:\n            return nums[0]\n        \n        # build a list of nodes\n        num_nodes = [None] * nums_len\n        for i in range(nums_len):\n            node = ListNode(nums[i])\n            node.next = num_nodes[i]\n            num_nodes[i] = node\n        \n        # build a list of 1's\n        num_1s = [0] * nums_len\n        for i in range(nums_len):\n            if nums[i] == 1:\n                num_1s[i] = 1\n        \n        # iterate through all nodes\n        i = 0\n        while i < nums_len:\n            if num_1s[i] == 1:\n                # if next node is 1, remove the 1\n                if num_nodes[i].next:\n                    num_nodes[i].next = num_nodes[i].next.next\n                    num_1s[i] = 0\n                # if next node is 0, move to next\n                else:\n                    i += 1\n            else:\n                # if next node is 0, remove the 0\n                if num_nodes[i].next:\n                    num_nodes[i].next = num_nodes[i].next.next\n                    num_1s[i] = 1\n                # if next node is 1, move to next\n                else:\n                    i += 1\n        \n        # count the number of 1's\n        num_1s_count = 0\n        for i in range(nums_len):\n            if num_1s[i]:\n                num_1s_count",
      -12.796875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param x, an integer\n    # @return a ListNode\n    def singleListNode(self, head, x):\n        if not head:\n            return head\n        while head.next:\n            if head.next.val == x:\n                node = head.next\n                head.next = head.next.next\n                return node\n            head = head.next\n        return head\n\n    def extract(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        return self.singleListNode(head, head.val)",
      -13.203125
    ],
    [
      "# https://leetcode.com/problems/single-number-ii/description/\n# score:100(1ms)\n# time:O(n)\n# space:O(n)\n# BFS\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums = sorted(nums)\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i - 1]:\n                ans = nums[i]\n                break\n        for i in range(n):\n            if nums[i]!= ans:\n                break\n            ans = nums[i]\n        return ans\n\n\nif __name__ == '__main__':\n    print(Solution().singleNumber([1, 2, 2, 3, 3, 3, 4]))",
      -14.0625
    ],
    [
      "def single_elements(tuple_list):\n    \"\"\"\n    :type tuple_list: List[Tuple[int, int]]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in tuple_list if len(tuple_list) == 1]\n\n\nif __name__ == '__main__':\n    assert single_elements([(1, 2), (1, 3), (2, 3), (1, 4), (2, 5)]) == [1, 4]\n    assert single_elements([(1, 2), (1, 3), (2, 3), (1, 4), (2, 5)]) == [1, 3, 4]\n    assert single_elements([(1, 2), (1, 3), (2, 3), (1, 4), (2, 5)]) == [1, 2, 3, 4]\n    assert single_elements([(1, 2), (1, 3), (2, 3), (1, 4), (2, 5)]) == [1, 2, 3, 4]\n    assert single_elements([(1, 2), (1, 3), (2, 3), (1, 4), (2, 5)]) == [1, 2, 3, 4]\n    assert single_elements([(1, 2), (1, 3), (2, 3), (1, 4), (2, 5)]) == [1, 3, 4]\n    assert single_elements([(1, 2), (1, 3), (2, 3), (1, 4), (2, 5)]) == [1, 2, 3, 4]",
      -14.9921875
    ],
    [
      "# Definition for a tuple.\nclass Tuple:\n    def __init__(self, tup):\n        self.tup = tup\n    def __iter__(self):\n        for i in self.tup:\n            yield i\n\n# Your Solution\n\nclass Solution:\n    def singleNumber(self, nums):\n        return reduce(lambda x, y: x ^ y, nums)\n\n    def singleNumber1(self, nums):\n        return reduce(lambda x, y: x ^ y, nums) ^ reduce(lambda x, y: x | y, nums)\n\n    def singleNumber2(self, nums):\n        return reduce(lambda x, y: x ^ y, nums) ^ reduce(lambda x, y: x | y, nums) ^ reduce(lambda x, y: x & y, nums)\n\n    def singleNumber3(self, nums):\n        return reduce(lambda x, y: x ^ y, nums) ^ reduce(lambda x, y: x | y, nums) ^ reduce(lambda x, y: x & y, nums) ^ reduce(lambda x, y: x & y, nums)",
      -15.0625
    ],
    [
      "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.singleNumber1(nums)\n\n    def singleNumber1(self, nums):\n        return reduce(lambda x, y: x ^ y, nums)\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.singleNumber([1, 1, 2, 2, 2, 2])\n    print sol.singleNumber([1, 1, 2, 2, 3, 3, 3, 3])\n    print sol.singleNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print sol.singleNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
      -16.53125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}