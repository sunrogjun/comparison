{
  "problem": {
    "task_id": "MBPP/194",
    "prompt": "Write a python function to convert octal number to decimal number.",
    "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
    "test_list": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ],
    "challenge_test_list": [],
    "problem_id": 183
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import sys\n\ndef oct2dec(n):\n    \"\"\"\n    >>> oct2dec('07')\n    3\n    \"\"\"\n    return int(n, 8)\n\ndef main():\n    if len(sys.argv)!= 2:\n        print('Usage: oct2dec <n>')\n        sys.exit(1)\n    n = sys.argv[1]\n    print(oct2dec(n))\n\nif __name__ == '__main__':\n    main()",
      7.8828125
    ],
    [
      "def octalToDecimal(octal):\n    return int(octal, 8)\n\nprint octalToDecimal('0')\nprint octalToDecimal('1')\nprint octalToDecimal('2')\nprint octalToDecimal('3')\nprint octalToDecimal('4')\nprint octalToDecimal('5')\nprint octalToDecimal('6')\nprint octalToDecimal('7')\nprint octalToDecimal('8')\nprint octalToDecimal('9')\nprint octalToDecimal('10')\nprint octalToDecimal('11')\nprint octalToDecimal('12')\nprint octalToDecimal('13')\nprint octalToDecimal('14')\nprint octalToDecimal('15')\nprint octalToDecimal('16')\nprint octalToDecimal('17')\nprint octalToDecimal('18')\nprint octalToDecimal('19')\nprint octalToDecimal('20')\nprint octalToDecimal('21')\nprint octalToDecimal('22')\nprint octalToDecimal('23')\nprint octalToDecimal('24')\nprint octalToDecimal('25')\nprint octalToDecimal('26')\nprint octalToDecimal('27')\nprint octalToDecimal('28')\nprint octalToDecimal('29')\nprint octalToDecimal('30')\nprint octalToDecimal('31')\nprint octalToDecimal('32')\nprint octalToDecimal('33')\nprint octalToDecimal('34')\nprint octalToDecimal('35')\nprint octalToDecimal('36')\nprint octalToDecimal('37')\nprint octalToDecimal('38')\nprint octalToDecimal('39')\nprint octalToDecimal('40')\nprint octalToDecimal('41')\nprint octalToDecimal('42')\nprint octalToDecimal('43')\nprint octalToDecimal('44')\nprint octalToDecimal('45')\nprint octalToDecimal('46')\nprint octalToDecimal('47')\nprint octalToDecimal('48')",
      7.25
    ],
    [
      "def convert_to_decimal(octal_number):\n    \"\"\"\n    :param octal_number: A string in octal format.\n    :return: A decimal number.\n    \"\"\"\n    return int(octal_number, 8)\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert convert_to_decimal(\"0\") == 0, \"Example\"\n    assert convert_to_decimal(\"07\") == 7, \"Example\"\n    assert convert_to_decimal(\"00\") == 0, \"Example\"\n    assert convert_to_decimal(\"000\") == 0, \"Example\"\n    assert convert_to_decimal(\"0123\") == 123, \"Example\"\n    assert convert_to_decimal(\"12345\") == 12345, \"Example\"\n    assert convert_to_decimal(\"012345\") == 12345, \"Example\"\n    assert convert_to_decimal(\"01234567\") == 1234567, \"Example\"\n    assert convert_to_decimal(\"0123456789\") == 123456789, \"Example\"\n    assert convert_to_decimal(\"012345678901\") == 12345678901, \"Example\"",
      7.03515625
    ],
    [
      "def octal_to_decimal(number):\n    \"\"\"\n    :param number: a string representing an octal number\n    :return: a string representing a decimal number\n    \"\"\"\n    return str(int(number, 8))\n\nprint octal_to_decimal(\"0\")\nprint octal_to_decimal(\"1\")\nprint octal_to_decimal(\"1010\")\nprint octal_to_decimal(\"01010\")\nprint octal_to_decimal(\"010101010\")\nprint octal_to_decimal(\"0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
      3.12890625
    ],
    [
      "# Convert octal number to decimal number\n# input: string\n# output: integer\n# return:\n\ndef oct2dec(n):\n    return n\n\nprint oct2dec('0')\nprint oct2dec('10')\nprint oct2dec('01')\nprint oct2dec('100')\nprint oct2dec('010')\nprint oct2dec('1000')\nprint oct2dec('0000')",
      2.599609375
    ],
    [
      "# http://www.python-course.eu/convert_octal.php\n\ndef octal_to_decimal(octal_num):\n    decimal_num = 0\n    for octal_digit in octal_num:\n        decimal_num = decimal_num * 8 + octal_digit\n    return decimal_num\n\ndef main():\n    octal_num = input(\"Enter octal number: \")\n    decimal_num = octal_to_decimal(octal_num)\n    print(decimal_num)\n\nmain()",
      2.599609375
    ],
    [
      "def oct_to_dec(n):\n    \"\"\"\n    Convert octal number to decimal number.\n    \n    :param n: the octal number\n    :return: the decimal number\n    \"\"\"\n    return int(n, 8)\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert oct_to_dec(\"0\") == 0, \"Octal 0 -> Decimal 0\"\n    assert oct_to_dec(\"1\") == 1, \"Octal 1 -> Decimal 1\"\n    assert oct_to_dec(\"07\") == 7, \"Octal 7 -> Decimal 7\"\n    assert oct_to_dec(\"10\") == 8, \"Octal 10 -> Decimal 8\"\n    assert oct_to_dec(\"27\") == 27, \"Octal 27 -> Decimal 27\"\n    assert oct_to_dec(\"37\") == 37, \"Octal 37 -> Decimal 37\"\n    assert oct_to_dec(\"47\") == 47, \"Octal 47 -> Decimal 47\"\n    assert oct_to_dec(\"57\") == 57, \"Octal 57 -> Decimal 57\"\n    assert oct_to_dec(\"67\") == 67, \"Octal 67 -> Decimal 67\"\n    assert oct_to_dec(\"77\") == 77, \"Octal 77 -> Decimal 77\"\n    assert oct_to_dec(\"97\") == 97, \"Octal 97 -> Decimal 97\"\n    assert oct_to_dec(\"107\") == 107, \"Octal 107 -> Decimal 107\"\n    assert oct_to_dec(\"117\") == 117, \"Octal 117 -> Decimal 117\"\n    assert oct_to_dec(\"127\") == 127, \"Octal 127 -> Decimal 127\"\n    assert oct_to_dec(\"137\") == 137, \"Octal 137 -> Decimal 137\"\n    assert oct_to_dec(\"147\") == 147, \"Octal 147 -> Decimal 147\"\n    assert oct_to_dec(\"157\") == 157, \"Octal 157 -> Decimal 157\"\n    assert oct_to_dec(\"167\") == 167, \"Octal 167 -> Decimal 167\"\n    assert oct_to_dec(\"",
      1.6083984375
    ],
    [
      "#!/usr/bin/env python\n\ndef oct2dec(octal_number):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    >>> oct2dec('0')\n    0\n    >>> oct2dec('01')\n    2\n    >>> oct2dec('0b10')\n    4\n    >>> oct2dec('0x3')\n    3\n    >>> oct2dec('0o77')\n    77\n    >>> oct2dec('0')\n    0\n    >>> oct2dec('0b11')\n    4\n    >>> oct2dec('0x3')\n    3\n    >>> oct2dec('0o77')\n    77\n    >>> oct2dec('0')\n    0\n    >>> oct2dec('0b11')\n    4\n    >>> oct2dec('0x3')\n    3\n    >>> oct2dec('0o77')\n    77\n    >>> oct2dec('0')\n    0\n    >>> oct2dec('0b11')\n    4\n    >>> oct2dec('0x3')\n    3\n    >>> oct2dec('0o77')\n    77\n    >>> oct2dec('0')\n    0\n    \"\"\"\n    result = 0\n    for i in range(len(octal_number)):\n        result = result * 8\n        result += int(octal_number[i])\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.1103515625
    ],
    [
      "# Write your code here\n\ndef octal_to_decimal(octal_num):\n    if octal_num[0] == \"0\":\n        octal_num = octal_num[1:]\n    decimal_num = 0\n    for i in range(len(octal_num)):\n        decimal_num += octal_num[i] * (8 ** (len(octal_num) - i - 1))\n    return decimal_num\n\n\nif __name__ == \"__main__\":\n    assert octal_to_decimal(\"0\") == 0\n    assert octal_to_decimal(\"01\") == 1\n    assert octal_to_decimal(\"10\") == 8\n    assert octal_to_decimal(\"11\") == 9\n    assert octal_to_decimal(\"100\") == 256\n    assert octal_to_decimal(\"101\") == 257\n    assert octal_to_decimal(\"110\") == 258\n    assert octal_to_decimal(\"111\") == 259\n    assert octal_to_decimal(\"0100\") == 4096\n    assert octal_to_decimal(\"0101\") == 4097\n    assert octal_to_decimal(\"0110\") == 4098\n    assert octal_to_decimal(\"0111\") == 4099\n    assert octal_to_decimal(\"1000\") == 32768\n    assert octal_to_decimal(\"1001\") == 32769\n    assert octal_to_decimal(\"1010\") == 32770\n    assert octal_to_decimal(\"1011\") == 32771\n    assert octal_to_decimal(\"1100\") == 32772\n    assert octal_to_decimal(\"1101\") == 32773\n    assert octal_to_decimal(\"1110\") == 32774\n    assert octal_to_decimal(\"1111\") == 32775",
      0.7353515625
    ],
    [
      "def octal_to_decimal(num):\n    \"\"\"\n    Convert octal number to decimal number.\n    Input:\n        num: An integer in octal number.\n    Output:\n        An integer in decimal number.\n    \"\"\"\n    return num\n\nif __name__ == '__main__':\n    print octal_to_decimal(128)",
      0.71240234375
    ],
    [
      "def octal_to_decimal(octal_num):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    Input:\n    An integer represented by an octal number.\n\n    Output:\n    An integer represented by a decimal number.\n    \"\"\"\n\n    return int(octal_num, 8)\n\nif __name__ == \"__main__\":\n    assert octal_to_decimal(011101) == 7\n    assert octal_to_decimal(011110) == 8\n    assert octal_to_decimal(011111) == 9\n    assert octal_to_decimal(011110) == 8\n    assert octal_to_decimal(011000) == 8\n    assert octal_to_decimal(011000) == 8\n    assert octal_to_decimal(011010) == 9\n    assert octal_to_decimal(011011) == 10\n    assert octal_to_decimal(011011) == 10\n    assert octal_to_decimal(011010) == 9\n    assert octal_to_decimal(011010) == 9\n    assert octal_to_decimal(010101) == 7\n    assert octal_to_decimal(010111) == 8\n    assert octal_to_decimal(010111) == 8\n    assert octal_to_decimal(010110) == 8\n    assert octal_to_decimal(010110) == 8\n    assert octal_to_decimal(010110) == 8\n    assert octal_to_decimal(010111) == 8\n    assert octal_to_decimal(010111) == 8\n    assert octal_to_decimal(010110) == 8\n    assert octal_to_decimal(010110) == 8\n    assert octal_to_decimal(010101) == 7\n    assert octal_to_decimal(010101) == 7\n    assert octal_to_decimal(010101) == 7\n    assert octal_to_decimal(010101) == 7\n    assert octal",
      0.59814453125
    ],
    [
      "def octal_to_decimal(number):\n    return str(int(number, 8))\n\n\nif __name__ == '__main__':\n    assert octal_to_decimal('0') == '0', 'Incorrect octal number'\n    assert octal_to_decimal('01') == '1', 'Incorrect octal number'\n    assert octal_to_decimal('037') == '7', 'Incorrect octal number'\n    assert octal_to_decimal('0377') == '77', 'Incorrect octal number'\n    assert octal_to_decimal('0037') == '37', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert octal_to_decimal('0137') == '137', 'Incorrect octal number'\n    assert oct",
      0.386474609375
    ],
    [
      "def octalToDecimal(octalNum):\n    return int(octalNum, 8)\n\nif __name__ == \"__main__\":\n    print(octalToDecimal(0))\n    print(octalToDecimal(1))\n    print(octalToDecimal(2))\n    print(octalToDecimal(3))\n    print(octalToDecimal(4))\n    print(octalToDecimal(5))\n    print(octalToDecimal(6))\n    print(octalToDecimal(7))\n    print(octalToDecimal(8))\n    print(octalToDecimal(9))\n    print(octalToDecimal(10))\n    print(octalToDecimal(11))\n    print(octalToDecimal(12))\n    print(octalToDecimal(13))\n    print(octalToDecimal(14))\n    print(octalToDecimal(15))\n    print(octalToDecimal(16))\n    print(octalToDecimal(17))\n    print(octalToDecimal(18))\n    print(octalToDecimal(19))\n    print(octalToDecimal(20))\n    print(octalToDecimal(21))\n    print(octalToDecimal(22))\n    print(octalToDecimal(23))\n    print(octalToDecimal(24))\n    print(octalToDecimal(25))\n    print(octalToDecimal(26))\n    print(octalToDecimal(27))\n    print(octalToDecimal(28))\n    print(octalToDecimal(29))\n    print(octalToDecimal(30))\n    print(octalToDecimal(31))\n    print(octalToDecimal(32))\n    print(octalToDecimal(33))\n    print(octalToDecimal(34))\n    print(octalToDecimal(35))\n    print(octalToDecimal(36))\n    print(octalToDecimal(37))\n    print(octalToDecimal(38))\n    print(octalToDecimal",
      0.258056640625
    ],
    [
      "def oct_to_dec(oct):\n    result = 0\n    for i in range(len(oct)):\n        result += int(oct[i]) * (2**(len(oct)-i-1))\n    return result\n\ndef dec_to_oct(dec):\n    result = \"\"\n    while dec > 0:\n        result = str(dec % 10) + result\n        dec /= 10\n    return result\n\nif __name__ == '__main__':\n    # oct_to_dec(\"0\")\n    print(oct_to_dec(\"0\"))\n    # dec_to_oct(\"0\")\n    print(dec_to_oct(\"0\"))\n    # dec_to_oct(\"123\")\n    print(dec_to_oct(\"123\"))\n    # dec_to_oct(\"0\")\n    print(dec_to_oct(\"0\"))\n    # dec_to_oct(\"1\")\n    print(dec_to_oct(\"1\"))\n    # dec_to_oct(\"10\")\n    print(dec_to_oct(\"10\"))\n    # dec_to_oct(\"100\")\n    print(dec_to_oct(\"100\"))\n    # dec_to_oct(\"101\")\n    print(dec_to_oct(\"101\"))\n    # dec_to_oct(\"1001\")\n    print(dec_to_oct(\"1001\"))\n    # dec_to_oct(\"10001\")\n    print(dec_to_oct(\"10001\"))\n    # dec_to_oct(\"100011\")\n    print(dec_to_oct(\"100011\"))\n    # dec_to_oct(\"1000101\")\n    print(dec_to_oct(\"1000101\"))\n    # dec_to_oct(\"10001001\")\n    print(dec_to_oct(\"10001001\"))\n    # dec_to_oct(\"100010001\")\n    print(dec_to_oct(\"100010001\"))\n    # dec_to_oct(\"1000100001\")\n    print(dec_to_oct(\"1000100001\"))\n    # dec_to_oct(\"10001000001\")\n    print(dec_to_oct(\"10001000001\"))\n    # dec_",
      0.1580810546875
    ],
    [
      "def octal2decimal(octal_num):\n    '''\n    :type octal_num: str\n    :rtype: str\n    '''\n    return octal_num\n\nif __name__ == '__main__':\n    print octal2decimal('0')\n    print octal2decimal('01')\n    print octal2decimal('1')\n    print octal2decimal('00')",
      -0.259765625
    ],
    [
      "import unittest\n\n# Tests to run\nTESTS = [\n    (\"000\", 0),\n    (\"0123\", 123),\n    (\"012345\", 12345),\n    (\"01234567\", 1234567),\n    (\"0123456789\", 123456789),\n    (\"012345678901\", 12345678901),\n    (\"0123456789012\", 123456789012),\n    (\"01234567890123\", 1234567890123),\n    (\"012345678901234\", 12345678901234),\n    (\"0123456789012345\", 123456789012345),\n    (\"01234567890123456\", 1234567890123456),\n    (\"012345678901234567\", 12345678901234567),\n    (\"0123456789012345678\", 123456789012345678),\n    (\"01234567890123456789\", 1234567890123456789),\n    (\"012345678901234567890\", 12345678901234567890),\n    (\"0123456789012345678901\", 123456789012345678901),\n    (\"01234567890123456789012\", 1234567890123456789012),\n    (\"012345678901234567890123\", 12345678901234567890123),\n    (\"0123456789012345678901234\", 123456789012345678901234),\n    (\"01234567890123456789012345\", 1234567890123456789012345),\n    (\"012345678901234567890123456\", 12345678901234567890123456),\n    (\"0123456789012345678901234567\", 123456789012345678901234567),\n    (\"01234567890123456789012345678\", 1234567890123456789012345678),\n    (\"012345678901234567",
      -0.37646484375
    ],
    [
      "# Convert octal to decimal\n# Input: octal number\n# Output: decimal number\n# Example:\n# octal_number = 123\n# decimal_number = 10\ndef oct_to_dec(octal_number):\n    decimal_number = 0\n    while octal_number > 0:\n        decimal_number = decimal_number * 8 + (octal_number % 8)\n        octal_number = octal_number / 8\n    return decimal_number\n\n# Convert decimal to octal\n# Input: decimal number\n# Output: octal number\n# Example:\n# decimal_number = 10\n# octal_number = 3\ndef dec_to_oct(decimal_number):\n    octal_number = 0\n    while decimal_number > 0:\n        octal_number = octal_number * 8 + decimal_number % 8\n        decimal_number = decimal_number / 8\n    return octal_number\n\n# Test cases\n# oct_to_dec(123) = 10\n# dec_to_oct(10) = 3",
      -0.70947265625
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    Convert an octal number to decimal number.\n    :param octal_number:\n    :return:\n    \"\"\"\n    decimal_number = 0\n    while octal_number > 0:\n        decimal_number += octal_number % 8\n        octal_number = octal_number // 8\n    return decimal_number\n\n\nif __name__ == '__main__':\n    test_cases = [\n        (1, 1),\n        (3, 3),\n        (7, 7),\n        (27, 27),\n        (31, 31),\n        (4095, 4095),\n        (4096, 4096),\n        (4097, 4097),\n        (8191, 8191),\n        (8192, 8192),\n        (8193, 8193),\n        (16383, 16383),\n        (16384, 16384),\n        (16385, 16385),\n        (32767, 32767),\n        (32768, 32768),\n        (32769, 32769),\n        (2147483647, 2147483647),\n        (2147483648, 2147483648),\n        (2147483649, 2147483649),\n        (1073741824, 1073741824),\n        (1073741825, 1073741825),\n        (1073741826, 1073741826),\n        (1073741827, 1073741827),\n        (1073741828, 1073741828),\n        (1073741829, 1073741829),\n        (1073741830, 1073741830),\n        (1073741831, 1073741831),\n        (1073741832, 1073741832),\n        (1073741833, 1073741833),\n        (1073741834, 1073741834),\n        (1073741835, 1073741835),\n        (1073741836, 1073741836),\n        (1073741837, 1073741837),\n        (1073741838, 1073741838),\n        (1073741839, 1073741839),",
      -0.76220703125
    ],
    [
      "#!/usr/bin/env python\n\ndef octal_to_decimal(octal_number):\n    \"\"\"\n    :type octal_number: str\n    :rtype: str\n    \"\"\"\n    return",
      -0.85693359375
    ],
    [
      "def oct2dec(oct):\n    return oct - (oct % 8) + 10 ** (8 - oct % 8)\n\ndef main():\n    print oct2dec(int(input(\"Enter an octal number: \"), 8))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/python-convert-octal-number/problem\n\nimport sys\n\ndef convert_octal(octal_num):\n    \"\"\"\n    Convert a given number in octal to decimal.\n    :param octal_num: The number in octal.\n    :return: The number in decimal.\n    \"\"\"\n    if octal_num > 9:\n        return octal_num - 8\n    elif octal_num > 0:\n        return octal_num - 1\n    else:\n        return octal_num\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    for case in range(1, n+1):\n        print(\"Case #{}: {}\".format(case, convert_octal(case)))",
      -0.85791015625
    ],
    [
      "def octal_to_decimal(number):\n    \"\"\"\n    Args:\n        number: int\n\n    Returns:\n        int\n    \"\"\"\n    return int(number, 8)\n\nif __name__ == '__main__':\n    test_case = int(input())\n    for i in range(test_case):\n        print(octal_to_decimal(input()))",
      -0.85791015625
    ],
    [
      "def octal2decimal(n):\n    decimal = 0\n    while n > 0:\n        decimal += n % 8\n        n = n / 8\n    return decimal\n\nif __name__ == '__main__':\n    for i in range(1, 100):\n        print octal2decimal(i)",
      -0.85791015625
    ],
    [
      "def octal_to_decimal(num):\n    \"\"\"\n    Convert octal number to decimal number.\n    Input:\n    num -- an integer\n    Output:\n    a decimal number\n    \"\"\"\n    num = str(num)\n    return int(num, 8)\n\nif __name__ == \"__main__\":\n    # your code goes here\n    print(octal_to_decimal(10))\n    print(octal_to_decimal(3))\n    print(octal_to_decimal(3100))\n    print(octal_to_decimal(0))\n    print(octal_to_decimal(0xFF))\n    print(octal_to_decimal(0xFF00))",
      -0.85791015625
    ],
    [
      "def oct2dec(octal_number):\n    \"\"\"\n    :type octal_number: int\n    :rtype: int\n    \"\"\"\n    return octal_number\n\nif __name__ == \"__main__\":\n    print oct2dec(0)\n    print oct2dec(1)\n    print oct2dec(10)\n    print oct2dec(32768)\n    print oct2dec(255)\n    print oct2dec(16777215)\n    print oct2dec(16777216)\n    print oct2dec(16777217)",
      -0.85791015625
    ],
    [
      "def oct2dec(octal_num):\n    \"\"\"\n    Converts an octal number to decimal number.\n    \"\"\"\n    # Octal number is an integer\n    # Convert to decimal number\n    return octal_num * 8\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Input\n    # octal_num = int(input(\"Enter octal number: \"))\n    octal_num = int(input(\"Enter octal number: \"))\n    # Output\n    print(\"Converted to decimal:\", oct2dec(octal_num))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "import sys\n\n\ndef octal_to_decimal(octal_number):\n    \"\"\"\n    :type octal_number: str\n    :rtype: int\n    \"\"\"\n    if not isinstance(octal_number, str):\n        raise TypeError('octal_number must be string')\n\n    if len(octal_number) > 4:\n        raise ValueError('octal_number must be 4 digits')\n\n    return octal_number.count('0')\n\n\ndef main():\n    try:\n        octal_number = sys.argv[1]\n    except IndexError:\n        octal_number = input('Enter octal number: ')\n\n    print(octal_to_decimal(octal_number))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "# Complete the function below.\ndef oct2dec(octal):\n    return octal",
      -0.85791015625
    ],
    [
      "def octal_to_decimal(number):\n    \"\"\"\n    :param number: a string containing an octal number\n    :return: a string containing the decimal number\n    \"\"\"\n    if not isinstance(number, str):\n        raise TypeError(\"number should be a string\")\n    return number.lstrip(\"0o\")\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def oct2dec(num):\n    \"\"\"\n    Convert octal number to decimal number.\n    \"\"\"\n    return int(num, 8)\n\ndef main():\n    \"\"\"\n    Simple test program.\n    \"\"\"\n    print(oct2dec(0))\n    print(oct2dec(1))\n    print(oct2dec(10))\n    print(oct2dec(100))\n    print(oct2dec(1234))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "import sys\n\n\ndef octal_to_decimal(num):\n    \"\"\"\n    Converts the given octal number to decimal.\n\n    Args:\n        num (int): The number to be converted.\n\n    Returns:\n        int: The converted number.\n    \"\"\"\n\n    # Convert the octal number to decimal\n    return num - (num >> 3) * 8\n\n\ndef main():\n    \"\"\"\n    The main function to run the program.\n    \"\"\"\n\n    # Get the number\n    number = int(input('Please enter the number: '))\n\n    # Convert the number to decimal\n    result = octal_to_decimal(number)\n\n    # Print the result\n    print('The result is {}'.format(result))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    :type octal_number: str\n    :rtype: int\n    \"\"\"\n    if octal_number == '0':\n        return 0\n    else:\n        return int(octal_number, 8)\n\n\nif __name__ == '__main__':\n    print octal_to_decimal('01111011')\n    print octal_to_decimal('01111011')\n    print octal_to_decimal('01111011')\n    print octal_to_decimal('01111011')\n    print octal_to_decimal('01111011')",
      -0.85791015625
    ],
    [
      "def octal_to_decimal(n):\n    # write your code here\n    d = 0\n    while n:\n        d = d * 8 + n % 10\n        n //= 10\n    return d\n\nprint(octal_to_decimal(8))\nprint(octal_to_decimal(10))\nprint(octal_to_decimal(12))\nprint(octal_to_decimal(15))\nprint(octal_to_decimal(17))\nprint(octal_to_decimal(27))\nprint(octal_to_decimal(48))\nprint(octal_to_decimal(64))\nprint(octal_to_decimal(70))",
      -0.85791015625
    ],
    [
      "def oct_to_dec(octal):\n    \"\"\"\n    Convert octal number to decimal number.\n    \"\"\"\n    res = 0\n    for i in range(8):\n        res += octal >> (i * 3)\n    return res\n\n# Test cases\n#print oct_to_dec(2)\n#print oct_to_dec(3)\n#print oct_to_dec(5)\n#print oct_to_dec(7)\n#print oct_to_dec(15)\n#print oct_to_dec(31)\n#print oct_to_dec(64)\n#print oct_to_dec(80)",
      -0.85791015625
    ],
    [
      "def convert(n):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    Args:\n        n: An octal number.\n\n    Returns:\n        An integer.\n    \"\"\"\n    return int(n, 8)\n\n\nif __name__ == '__main__':\n    print convert(0777)\n    print convert(0777777)\n    print convert(0777777777)\n    print convert(07777777777777)",
      -0.85791015625
    ],
    [
      "def octalToDecimal(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return int(number, 8)\n\nif __name__ == '__main__':\n    print(octalToDecimal(255))",
      -0.85791015625
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    :param octal_number: An octal number\n    :return: A decimal number\n    \"\"\"\n    return octal_number * 8\n\n# Test Cases\n\nprint octal_to_decimal(0)\nprint octal_to_decimal(1)\nprint octal_to_decimal(3)\nprint octal_to_decimal(10)\nprint octal_to_decimal(300)\nprint octal_to_decimal(123456789)\nprint octal_to_decimal(0xffffffff)\nprint octal_to_decimal(0xffffffffffffffff)",
      -0.8583984375
    ],
    [
      "def oct2dec(octal):\n    \"\"\"\n    :type octal: str\n    :rtype: int\n    \"\"\"\n    return octal.count(\"0\")\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    with open(\"input.txt\", \"r\") as f:\n        for line in f.readlines():\n            print oct2dec(line)\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(octal_num):\n    \"\"\"\n    :type octal_num: int\n    :rtype: int\n    \"\"\"\n    return octal_num * 3\n\nif __name__ == '__main__':\n    print octal_to_decimal(0)\n    print octal_to_decimal(123)\n    print octal_to_decimal(0x7)\n    print octal_to_decimal(0x10)\n    print octal_to_decimal(0x2A)",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(octal_num):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    :param octal_num:\n    :return:\n    \"\"\"\n    result = 0\n    for i in range(len(octal_num)):\n        result += int(octal_num[i]) * (8 ** (len(octal_num) - i - 1))\n    return result\n\n\nif __name__ == '__main__':\n    # Test cases\n    print octal_to_decimal('101')\n    print octal_to_decimal('100')\n    print octal_to_decimal('011110101')\n    print octal_to_decimal('0')",
      -0.8583984375
    ],
    [
      "# https://www.python.org/dev/peps/pep-0479/#decimal-to-octal-conversion\n\ndef octal_to_decimal(octal_number):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    >>> octal_to_decimal(0)\n    0\n    >>> octal_to_decimal(1)\n    1\n    >>> octal_to_decimal(3)\n    3\n    >>> octal_to_decimal(10)\n    10\n    >>> octal_to_decimal(11)\n    10\n    >>> octal_to_decimal(12)\n    12\n    >>> octal_to_decimal(100)\n    100\n    >>> octal_to_decimal(1024)\n    1024\n    >>> octal_to_decimal(1234)\n    1234\n    >>> octal_to_decimal(1234)\n    1234\n    >>> octal_to_decimal(1234)\n    1234\n    >>> octal_to_decimal(1234)\n    1234\n    \"\"\"\n\n    return octal_to_decimal_recursive(octal_number)\n\n\ndef octal_to_decimal_recursive(octal_number):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    >>> octal_to_decimal_recursive(0)\n    0\n    >>> octal_to_decimal_recursive(1)\n    1\n    >>> octal_to_decimal_recursive(3)\n    3\n    >>> octal_to_decimal_recursive(10)\n    10\n    >>> octal_to_decimal_recursive(11)\n    10\n    >>> octal_to_decimal_recursive(12)\n    12\n    >>> octal_to_decimal_recursive(100)\n    100\n    >>> octal_to_decimal_recursive(1024)\n    1024\n    >>> octal_to_decimal_recursive(1234)\n    1234\n    >>> octal_to_decimal_recursive(1234)\n    1234",
      -0.8583984375
    ],
    [
      "import sys\n\ndef convert_octal_to_decimal(octal_number):\n    \"\"\"\n    Convert octal number to decimal number.\n    \"\"\"\n\n    # if octal_number is not an integer, raise error.\n    try:\n        octal_number = int(octal_number, 8)\n    except ValueError:\n        print(\"Invalid octal number.\")\n        sys.exit()\n\n    # convert to decimal\n    decimal = octal_number\n\n    return decimal\n\nif __name__ == \"__main__\":\n    octal_number = input(\"Enter octal number: \")\n    decimal_number = convert_octal_to_decimal(octal_number)\n    print(\"Decimal number = {}\".format(decimal_number))",
      -0.8583984375
    ],
    [
      "def convert_octal_to_decimal(num):\n    result = 0\n    for i in range(0, len(num)):\n        result += (num[i] - 48) * (2 ** (len(num) - i - 1))\n    return result\n\nif __name__ == '__main__':\n    print convert_octal_to_decimal('0123')",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * 8\n\n# Your OctalToDecimal function should return the same result as\n# the following code.\n\ndef octal_to_decimal_2(n):\n    return n * 8\n\nif __name__ == \"__main__\":\n    print octal_to_decimal(0)\n    print octal_to_decimal_2(0)\n    print octal_to_decimal_2(1)",
      -0.8583984375
    ],
    [
      "def oct2dec(oct):\n    return oct2dec_rec(oct, [0, 1, 2, 3, 4, 5, 6, 7], 0)\n\ndef oct2dec_rec(oct, prev, dec):\n    if oct == 0:\n        return dec\n    else:\n        return oct2dec_rec(oct - 1, prev, dec + prev[oct])\n\n# Test case\nprint oct2dec(\"1\")\nprint oct2dec(\"100\")\nprint oct2dec(\"101\")\nprint oct2dec(\"1011\")\nprint oct2dec(\"1010\")\nprint oct2dec(\"1011\")\nprint oct2dec(\"1010\")\nprint oct2dec(\"1010\")\nprint oct2dec(\"1010\")\nprint oct2dec(\"1010\")",
      -0.8583984375
    ],
    [
      "def oct2dec(octal_number):\n    \"\"\"\n    >>> oct2dec('077')\n    77\n    >>> oct2dec('077a')\n    77\n    \"\"\"\n    return octal_number\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    Converts octal number to decimal number.\n    \"\"\"\n    if octal_number == 0:\n        return 0\n    else:\n        return octal_number * 8\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    try:\n        octal_number = int(input('Enter octal number: '))\n    except:\n        print('Enter octal number')\n        exit(0)\n\n    print(octal_to_decimal(octal_number))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def oct_to_dec(oct):\n    # You can use the following python code to test your function\n    # print oct_to_dec(8)\n    return oct * 3\n\n\nif __name__ == '__main__':\n    oct_to_dec(8)\n    oct_to_dec(27)",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    Convert octal number to decimal.\n    \"\"\"\n    return octal_number - 8 * (octal_number / 8)\n\nif __name__ == '__main__':\n    print octal_to_decimal(16)",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\ndef octal_to_decimal(num):\n    \"\"\"\n    Convert an octal number to a decimal number.\n    Input:\n    num - an octal number, such as 0666.\n    Output:\n    decimal - a decimal number, such as 16.\n    \"\"\"\n    # Convert the octal number to decimal\n    decimal = 0\n    for i in range(0, len(num)):\n        if num[i] == '0':\n            decimal += 1\n        else:\n            decimal *= 8\n            decimal += int(num[i])\n    return decimal\n\nif __name__ == \"__main__\":\n    # Test case 1\n    print octal_to_decimal(\"0\")\n    # Test case 2\n    print octal_to_decimal(\"0666\")\n    # Test case 3\n    print octal_to_decimal(\"0666666\")",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    :param octal_number: An octal number\n    :return: An decimal number\n    \"\"\"\n    return oct(int(octal_number, 8))\n\nprint(octal_to_decimal(\"0011\"))",
      -0.8583984375
    ],
    [
      "def oct2dec(oct):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    :param oct: octal number\n    :type oct: str\n\n    :return: decimal number\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(0, len(oct)):\n        result += int(oct[i]) * (8 ** (len(oct) - i - 1))\n    return result\n\ndef test():\n    assert oct2dec('0123') == 123\n    assert oct2dec('00') == 0\n    assert oct2dec('0') == 0\n    assert oct2dec('0') == 0\n    assert oct2dec('1') == 1\n    assert oct2dec('01234567') == 1234567\n    assert oct2dec('0123456789') == 123456789\n    assert oct2dec('0123456789a') == 123456789\n    assert oct2dec('0123456789ab') == 123456789\n    assert oct2dec('0123456789abc') == 123456789\n    assert oct2dec('0123456789abcd') == 123456789\n\nif __name__ == '__main__':\n    test()",
      -0.8583984375
    ],
    [
      "def octalToDecimal(octal):\n    return int(octal, 8)\n\ndef main():\n    octal_num = input(\"Please enter an octal number: \")\n    decimal_num = octalToDecimal(octal_num)\n    print(\"The octal number is\", octal_num)\n    print(\"The decimal number is\", decimal_num)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(octal_num):\n    \"\"\"\n    >>> octal_to_decimal('0')\n    0\n    >>> octal_to_decimal('1')\n    1\n    >>> octal_to_decimal('0b10')\n    2\n    >>> octal_to_decimal('0o10')\n    10\n    >>> octal_to_decimal('0o12')\n    12\n    >>> octal_to_decimal('0o123')\n    123\n    \"\"\"\n    \n    # convert octal number to binary\n    binary_num = bin(int(octal_num, 8))[2:]\n\n    # convert binary number to decimal\n    decimal_num = 0\n    for i in binary_num:\n        if i == '1':\n            decimal_num += 1\n        else:\n            decimal_num += 0\n    return decimal_num\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def octal2decimal(octal):\n    \"\"\"\n    Converts the octal number to decimal number.\n    \"\"\"\n    if octal == 0:\n        return 0\n    else:\n        return octal + (octal * 3)\n\n# Test cases\nprint(octal2decimal(0))\nprint(octal2decimal(1))\nprint(octal2decimal(3))\nprint(octal2decimal(7))\nprint(octal2decimal(15))",
      -0.8583984375
    ],
    [
      "def oct2dec(n):\n    if n is None:\n        return None\n    if type(n) is not int:\n        return None\n    return int(n)",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(octal_num):\n    \"\"\"\n    Convert an octal number to decimal number.\n    \"\"\"\n    return int(octal_num, 8)\n\n\nif __name__ == \"__main__\":\n    print octal_to_decimal(0777)",
      -0.8583984375
    ],
    [
      "def oct_to_dec(num):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    :param num:\n    :return:\n    \"\"\"\n\n    dec = 0\n    for i in range(len(num)):\n        dec += num[i] * (10 ** (len(num) - i - 1))\n    return dec\n\nif __name__ == '__main__':\n    print oct_to_dec('0123')",
      -0.8583984375
    ],
    [
      "def octalToDecimal(octal):\n    \"\"\"\n    :type octal: str\n    :rtype: str\n    \"\"\"\n    result = ''\n    for i in range(len(octal)):\n        result += str(octal[i])\n        if i!= len(octal) - 1:\n            result += '.'\n    return result\n\n\nif __name__ == '__main__':\n    print(octalToDecimal('101010101'))",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return num*3 + num*2\n\ndef main():\n    num = 123\n    print octal_to_decimal(num)\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\ndef oct_to_dec(oct_num):\n    \"\"\"\n    Convert an octal number to decimal number.\n    \"\"\"\n    return oct(oct_num)\n\n\ndef main():\n    oct_num = \"1\"\n    print oct_to_dec(oct_num)\n    print \"-----\"\n    oct_num = \"12\"\n    print oct_to_dec(oct_num)\n    print \"-----\"\n    oct_num = \"01\"\n    print oct_to_dec(oct_num)\n    print \"-----\"\n    oct_num = \"1\"\n    print oct_to_dec(oct_num)\n    print \"-----\"\n    oct_num = \"0\"\n    print oct_to_dec(oct_num)\n    print \"-----\"\n    oct_num = \"0\"\n    print oct_to_dec(oct_num)\n    print \"-----\"\n    oct_num = \"001\"\n    print oct_to_dec(oct_num)\n    print \"-----\"\n    oct_num = \"0000\"\n    print oct_to_dec(oct_num)\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    Convert the given octal number to decimal number.\n    :param octal_number: The given octal number to convert.\n    :return: The decimal number.\n    \"\"\"\n    decimal_number = 0\n    for i in range(8):\n        if octal_number & 1 == 1:\n            decimal_number += 1\n        octal_number >>= 1\n    return decimal_number\n\n# Note:\n# This is the same as the previous question.\n# However, this time, we don't need to worry about the carry.\n\ndef octal_to_decimal_no_carry(octal_number):\n    \"\"\"\n    Convert the given octal number to decimal number.\n    :param octal_number: The given octal number to convert.\n    :return: The decimal number.\n    \"\"\"\n    decimal_number = 0\n    while octal_number > 0:\n        decimal_number += 1\n        octal_number >>= 1\n    return decimal_number\n\nif __name__ == '__main__':\n    octal_number = 123\n    print(octal_to_decimal(octal_number))\n    print(octal_to_decimal_no_carry(octal_number))",
      -0.8583984375
    ],
    [
      "import sys\n\ndef octal_to_decimal(octal):\n    \"\"\"\n    Convert octal number to decimal number\n    :param octal: octal number\n    :return: decimal number\n    \"\"\"\n    return int(octal, 8)\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    octal = input('Enter octal number: ')\n    decimal = octal_to_decimal(octal)\n    print(decimal)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def octal_to_decimal(n):\n    \"\"\"\n    n is an integer in octal.\n\n    Return decimal representation of n.\n    \"\"\"\n    return n\n\n\ndef main():\n    n = int(input(\"Enter an octal number to convert to decimal: \"))\n    print(octal_to_decimal(n))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "# Convert octal to decimal\ndef octal_to_decimal(octal_number):\n    # Convert octal to binary\n    binary_number = oct(octal_number)\n\n    # Convert binary to decimal\n    decimal_number = 0\n    for i in range(len(binary_number)):\n        if binary_number[i] == '1':\n            decimal_number += 2 ** (len(binary_number) - i - 1)\n    return decimal_number\n\n\n# Test\nprint(octal_to_decimal(6))\nprint(octal_to_decimal(4))\nprint(octal_to_decimal(3))\nprint(octal_to_decimal(7))\nprint(octal_to_decimal(2))\nprint(octal_to_decimal(1))\nprint(octal_to_decimal(0))",
      -0.8583984375
    ],
    [
      "def oct2dec(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    res = 0\n    while number > 0:\n        res = res * 8 + number % 10\n        number /= 10\n    return res\n\nif __name__ == '__main__':\n    for i in range(1, 101):\n        print oct2dec(i)",
      -0.85888671875
    ],
    [
      "def oct2dec(n):\n    return n - ((n & 0x7) << 3)\n\ndef dec2oct(n):\n    return (n & 0x7) + n\n\nif __name__ == '__main__':\n    print oct2dec(0x7)\n    print dec2oct(0x7)\n    print oct2dec(0x7)\n    print dec2oct(0x7)\n    print oct2dec(0x7)\n    print dec2oct(0x7)",
      -0.85888671875
    ],
    [
      "def oct_to_dec(octal_num):\n    if octal_num < 0:\n        raise ValueError('Negative number')\n    result = 0\n    for digit in octal_num:\n        result *= 8\n        result += int(digit)\n    return result\n\ndef main():\n    octal_num = int(input('Enter an octal number: '))\n    print(oct_to_dec(octal_num))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "# Write a function to convert a string to a number.\ndef convert(s):\n    if s[-1] == 'l':\n        return int(s[:-1], 8)\n    else:\n        return int(s, 8)\n\ndef main():\n    s = input()\n    n = convert(s)\n    print(n)\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "import math\n\ndef convert_to_decimal(octal_num):\n    \"\"\"\n    :param octal_num:\n    :return:\n    \"\"\"\n    return math.ceil(octal_num)\n\n\nif __name__ == \"__main__\":\n    print convert_to_decimal(\"0\")\n    print convert_to_decimal(\"3\")\n    print convert_to_decimal(\"123\")",
      -0.86083984375
    ],
    [
      "def octal_to_decimal(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return number\n\nif __name__ == '__main__':\n    print octal_to_decimal(12)",
      -0.86083984375
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    This function converts octal number to decimal number.\n\n    :param octal_number: A string containing octal number.\n\n    :return: A string containing decimal number.\n    \"\"\"\n\n    # To convert a string to decimal number, we use the following method:\n    # 1. If the string contains a leading zero, then we remove it.\n    # 2. If the string is empty, then we return 0.\n    # 3. If the string contains a trailing zero, then we remove it.\n    # 4. If the string is empty, then we return 0.\n    # 5. If the string contains a non-zero digit, then we add it to the result.\n    # 6. If the string contains two non-zero digits, then we add them to the result.\n    # 7. If the string contains a digit, then we add it to the result.\n    # 8. If the string contains a non-zero digit, then we add it to the result.\n\n    # If the string is empty, then return 0.\n    if len(octal_number) == 0:\n        return \"0\"\n\n    # If the string contains a leading zero, then we remove it.\n    if octal_number[0] == \"0\":\n        octal_number = octal_number[1:]\n\n    # If the string is empty, then return 0.\n    if len(octal_number) == 0:\n        return \"0\"\n\n    # If the string contains a trailing zero, then we remove it.\n    if octal_number[-1] == \"0\":\n        octal_number = octal_number[:-1]\n\n    # If the string is empty, then return 0.\n    if len(octal_number) == 0:\n        return \"0\"\n\n    # If the string contains a non-zero digit, then we add it to the result.\n    if octal_number[0]!= \"0\":\n        result = octal_number[0]\n        for i in range(1, len(octal_number)):\n            if octal_number[i]!= \"0\":\n                result = result + octal_number[i]",
      -1.08203125
    ],
    [
      "def oct2dec(octal):\n    \"\"\"\n    Convert an octal number to decimal number.\n    \n    >>> oct2dec('0011')\n    3\n    >>> oct2dec('1000')\n    4\n    >>> oct2dec('0')\n    0\n    >>> oct2dec
      -1.5126953125
    ],
    [
      "def oct2dec(octal):\n    decimal = 0\n    for i in range(8):\n        decimal += octal >> (i * 3)\n    return decimal\n\n\nif __name__ == '__main__':\n    print oct2dec(0o1)\n    print oct2dec(0o2)\n    print oct2dec(0o3)\n    print oct2dec(0o7)\n    print oct2dec(0o8)\n    print oct2dec(0o9)\n    print oct2dec(0o10)\n    print oct2dec(0o11)\n    print oct2dec(0o12)\n    print oct2dec(0o13)\n    print oct2dec(0o14)\n    print oct2dec(0o15)\n    print oct2dec(0o16)\n    print oct2dec(0o17)\n    print oct2dec(0o18)\n    print oct2dec(0o19)\n    print oct2dec(0o20)\n    print oct2dec(0o21)\n    print oct2dec(0o22)\n    print oct2dec(0o23)\n    print oct2dec(0o24)\n    print oct2dec(0o25)\n    print oct2dec(0o26)\n    print oct2dec(0o27)\n    print oct2dec(0o28)\n    print oct2dec(0o29)\n    print oct2dec(0o30)\n    print oct2dec(0o31)\n    print oct2dec(0o32)\n    print oct2dec(0o33)\n    print oct2dec(0o34)\n    print oct2dec(0o35)\n    print oct2dec(0o36)\n    print oct2dec(0o37)\n    print oct2dec(0o38)\n    print oct2dec(0o39)\n    print oct2dec(0o40)\n    print oct2dec(0o41)\n    print oct2dec(0o42)\n    print oct2dec(0o43)\n    print oct2dec(0o44)\n    print oct2dec(0",
      -1.58203125
    ],
    [
      "def oct_to_dec(num):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    Example:\n    oct_to_dec(101) => 3\n    oct_to_dec(1234) => 34\n    oct_to_dec(0x0) => 0\n    \"\"\"\n\n    # Convert hexadecimal to decimal\n    num = int(num, 16)\n\n    # Convert octal to decimal\n    # If number is less than 10, then it is just a decimal\n    if num < 10:\n        return num\n    else:\n        # If number is greater than 0x7, then it is a hexadecimal\n        # Convert it to decimal\n        if num > 0x7:\n            return int(num, 16)\n        else:\n            # If number is less than 0x8, then it is a hexadecimal\n            # Convert it to decimal\n            if num < 0x8:\n                return int(num, 8)\n            else:\n                # If number is less than 0x9, then it is a hexadecimal\n                # Convert it to decimal\n                if num < 0x9:\n                    return int(num, 16)\n                else:\n                    # If number is less than 0xA, then it is a hexadecimal\n                    # Convert it to decimal\n                    if num < 0xA:\n                        return int(num, 16)\n                    else:\n                        # If number is less than 0xB, then it is a hexadecimal\n                        # Convert it to decimal\n                        if num < 0xB:\n                            return int(num, 16)\n                        else:\n                            # If number is less than 0xC, then it is a hexadecimal\n                            # Convert it to decimal\n                            if num < 0xC:\n                                return int(num, 16)\n                            else:\n                                # If number is less than 0xD, then it is a hexadecimal\n                                # Convert it to decimal\n                                if num < 0xD:\n                                    return int(num, 16)\n                                else:\n                                    # If number is less than 0xE, then it is a hexadecimal\n                                    # Convert it to decimal\n                                    if num <",
      -1.650390625
    ],
    [
      "import sys\n\ndef octal_to_decimal(octal_number):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    :param octal_number: octal number\n    :return: decimal number\n    \"\"\"\n\n    decimal_number = 0\n\n    while octal_number > 0:\n        decimal_number += octal_number % 8\n\n        octal_number /= 8\n\n    return decimal_number\n\n\nif __name__ == '__main__':\n    if len(sys.argv) == 1:\n        octal_number = int(raw_input('Enter octal number: '))\n    else:\n        octal_number = int(sys.argv[1])\n\n    decimal_number = octal_to_decimal(octal_number)\n\n    print 'The decimal number is: %d' % decimal_number",
      -2.35546875
    ],
    [
      "#!/usr/bin/env python\n\n# Note: this is a solution to the below problem.\n# The below code has been modified to remove the need for the 'oct' and 'dec' functions.\n# The 'oct' function is not used.\n\n\ndef oct2dec(octal_number):\n    \"\"\"\n    Convert octal number to decimal number.\n    \"\"\"\n    # convert to integer\n    num = int(octal_number, 8)\n    # add integer and remove leading zeros\n    return num + (10 ** len(octal_number)) - (10 ** len(octal_number) - 1)\n\n\ndef dec2oct(decimal_number):\n    \"\"\"\n    Convert decimal number to octal number.\n    \"\"\"\n    # convert to integer\n    num = int(decimal_number)\n    # remove leading zeros\n    return str(num)\n\n\n# The below code is the original code.\n# oct2dec(octal_number)\n# dec2oct(decimal_number)\n\n# test\n# octal_number = '0'\n# decimal_number = '0'\n# print(oct2dec(octal_number))\n# print(dec2oct(decimal_number))\n\n# octal_number = '1'\n# decimal_number = '1'\n# print(oct2dec(octal_number))\n# print(dec2oct(decimal_number))\n\n# octal_number = '10'\n# decimal_number = '10'\n# print(oct2dec(octal_number))\n# print(dec2oct(decimal_number))\n\n# octal_number = '11'\n# decimal_number = '11'\n# print(oct2dec(octal_number))\n# print(dec2oct(decimal_number))\n\n# octal_number = '100'\n# decimal_number = '100'\n# print(oct2dec(octal_number))\n# print(dec2oct(decimal_number))\n\n# octal_number = '101'\n# decimal_number = '101'\n# print(oct2dec(octal_number))\n# print(dec2oct(dec",
      -2.5390625
    ],
    [
      "def to_decimal(octal_num):\n    \"\"\"\n    :type octal_num: int\n    :rtype: int\n    \"\"\"\n    decimal_num = 0\n    while octal_num > 0:\n        decimal_num += octal_num % 10 * (8 ** len(str(octal_num % 10)))\n        octal_num //= 10\n    return decimal_num\n\nif __name__ == '__main__':\n    assert to_decimal(0) == 0\n    assert to_decimal(1) == 1\n    assert to_decimal(3) == 3\n    assert to_decimal(8) == 8\n    assert to_decimal(9) == 9\n    assert to_decimal(27) == 27\n    assert to_decimal(100) == 100\n    assert to_decimal(101) == 102\n    assert to_decimal(1000) == 1000\n    assert to_decimal(1001) == 1001\n    assert to_decimal(10000) == 10000\n    assert to_decimal(10001) == 10001\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100001) == 100001\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_decimal(100000) == 100000\n    assert to_",
      -2.630859375
    ],
    [
      "def octal_to_decimal(octal_str):\n    \"\"\"\n    Convert octal number to decimal number.\n    >>> octal_to_decimal('00')\n    0\n    >>> octal_to_decimal('01')\n    1\n    >>> octal_to_decimal('1')\n    1\n    >>> octal_to_decimal('12')\n    2\n    >>> octal_to_decimal('123')\n    3\n    >>> octal_to_decimal('12345')\n    7\n    >>> octal_to_decimal('1234567')\n    11\n    >>> octal_to_decimal('123456789')\n    18\n    >>> octal_to_decimal('12345678901')\n    25\n    >>> octal_to_decimal('1234567890123')\n    34\n    >>> octal_to_decimal('123456789012345')\n    58\n    >>> octal_to_decimal('12345678901234567')\n    89\n    >>> octal_to_decimal('1234567890123456789')\n    123\n    \"\"\"\n    total = 0\n    for i in range(len(octal_str)):\n        total += int(octal_str[i]) * (2 ** (len(octal_str) - i - 1))\n    return total\n\ndef main():\n    print octal_to_decimal('0123456789')\n    print octal_to_decimal('012345678901')\n    print octal_to_decimal('01234567890123456789')\n\nif __name__ == '__main__':\n    main()",
      -2.697265625
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    :type octal_number: int\n    :rtype: int\n    \"\"\"\n    if octal_number < 0:\n        return -1\n    return octal_number\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert octal_to_decimal(0) == 0, \"0 => 0\"\n    assert octal_to_decimal(1) == 1, \"1 => 1\"\n    assert octal_to_decimal(7) == 7, \"7 => 7\"\n    assert octal_to_decimal(10) == 10, \"10 => 10\"\n    assert octal_to_decimal(27) == 27, \"27 => 27\"\n    assert octal_to_decimal(30) == 30, \"30 => 30\"\n    assert octal_to_decimal(33) == 33, \"33 => 33\"\n    assert octal_to_decimal(36) == 36, \"36 => 36\"\n    assert octal_to_decimal(39) == 39, \"39 => 39\"\n    assert octal_to_decimal(42) == 42, \"42 => 42\"\n    assert octal_to_decimal(43) == 43, \"43 => 43\"\n    assert octal_to_decimal(44) == 44, \"44 => 44\"\n    assert octal_to_decimal(45) == 45, \"45 => 45\"\n    assert octal_to_decimal(48) == 48, \"48 => 48\"\n    assert octal_to_decimal(49) == 49, \"49 => 49\"\n    assert octal_to_decimal(50) == 50, \"50 => 50\"\n    assert octal_to_decimal(51) == 51, \"51 => 51\"\n    assert octal_to_decimal(52) == 52, \"52 => 52\"\n    assert octal_to_decimal(53) == 53, \"53 => 53\"\n    assert octal_to_decimal(54) == 54, \"54 => 54",
      -3.01953125
    ],
    [
      "def oct_to_dec(octal):\n    \"\"\"\n    Convert an octal number to decimal number.\n    \n    >>> oct_to_dec(\"01110111\")\n    '13'\n    >>> oct_to_dec(\"01110111000001110111\")\n    '13'\n    >>> oct_to_dec
      -3.61328125
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    \"\"\"\n    >>> oct_to_decimal(0)\n    0\n    >>> oct_to_decimal(255)\n    3\n    >>> oct_to_decimal(257)\n    4\n    >>> oct_to_decimal(65535)\n    10\n    >>> oct_to_decimal(16777215)\n    31\n    >>> oct_to_decimal(8388607)\n    15\n    >>> oct_to_decimal(16777216)\n    16\n    >>> oct_to_decimal(16777217)\n    17\n    >>> oct_to_decimal(16777218)\n    18\n    >>> oct_to_decimal(16777219)\n    19\n    >>> oct_to_decimal(16777220)\n    20\n    >>> oct_to_decimal(16777221)\n    21\n    >>> oct_to_decimal(16777222)\n    22\n    >>> oct_to_decimal(16777223)\n    23\n    >>> oct_to_decimal(16777224)\n    24\n    >>> oct_to_decimal(16777225)\n    25\n    >>> oct_to_decimal(16777226)\n    26\n    >>> oct_to_decimal(16777227)\n    27\n    >>> oct_to_decimal(16777228)\n    28\n    >>> oct_to_decimal(16777229)\n    29\n    >>> oct_to_decimal(16777230)\n    30\n    >>> oct_to_decimal(16777231)\n    31\n    >>> oct_to_decimal(16777232)\n    32\n    >>> oct_to_decimal(16777233)\n    33\n    >>> oct_to_decimal(16777234)\n    34\n    >>> oct_to_decimal(16777235)\n    35\n    >>> oct_to_decimal(16777236)\n    36\n    >>> oct_to_decimal(16777237)\n    37\n    >>> oct_to_decimal(16777238",
      -4.03515625
    ],
    [
      "def octal_to_decimal(num):\n    \"\"\"\n    >>> octal_to_decimal(0)\n    0\n    >>> octal_to_decimal(1)\n    1\n    >>> octal_to_decimal(10)\n    10\n    >>> octal_to_decimal(99)\n    99\n    >>> octal_to_decimal(100)\n    100\n    >>> octal_to_decimal(101)\n    101\n    >>> octal_to_decimal(1000)\n    1000\n    >>> octal_to_decimal(9999)\n    9999\n    >>> octal_to_decimal(10000)\n    10000\n    >>> octal_to_decimal(10001)\n    10001\n    >>> octal_to_decimal(99999999)\n    99999999\n    >>> octal_to_decimal(1000000000)\n    1000000000\n    >>> octal_to_decimal(9999999999)\n    9999999999\n    >>> octal_to_decimal(10000000000)\n    10000000000\n    \"\"\"\n    num = int(num)\n    if num < 0:\n        return -1*num\n    if num == 0:\n        return 0\n    num_decimal = 0\n    while num > 0:\n        num_decimal = num_decimal + num % 10\n        num = int(num/10)\n    return num_decimal",
      -4.11328125
    ],
    [
      "def octal_to_decimal(octal_num):\n    \"\"\"\n    Convert octal number to decimal number.\n\n    :param octal_num: The octal number to be converted.\n\n    :return: The decimal number.\n    \"\"\"\n    return oct(int(octal_num, 8))\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (0, '0'),\n        (1, '1'),\n        (10, '10'),\n        (0o2, '2'),\n        (0o3, '3'),\n        (0o4, '4'),\n        (0o5, '5'),\n        (0o6, '6'),\n        (0o7, '7'),\n        (0o8, '8'),\n        (0o9, '9'),\n        (0o10, '10'),\n        (0o11, '11'),\n        (0o12, '12'),\n        (0o13, '13'),\n        (0o14, '14'),\n        (0o15, '15'),\n        (0o16, '16'),\n        (0o17, '17'),\n        (0o18, '18'),\n        (0o19, '19'),\n        (0o20, '20'),\n        (0o21, '21'),\n        (0o22, '22'),\n        (0o23, '23'),\n        (0o24, '24'),\n        (0o25, '25'),\n        (0o26, '26'),\n        (0o27, '27'),\n        (0o28, '28'),\n        (0o29, '29'),\n        (0o30, '30'),\n        (0o31, '31'),\n        (0o32, '32'),\n        (0o33, '33'),\n        (0o34, '34'),\n        (0o35, '35'),\n        (0o36, '36'),\n        (0o37, '37'),\n        (0o38, '38'),\n        (0o39, '39'),\n        (0o40, '40'),\n        (0o41,",
      -5.51171875
    ],
    [
      "def oct_to_dec(num):\n    \"\"\"\n    Convert a octal number to a decimal number.\n    Input: A string of length equal to or greater than 1.\n    Output: A string of length equal to or greater than 1.\n    \"\"\"\n    if len(num) < 1:\n        return \"0\"\n    \n    while len(num) < 2:\n        num = \"0\" + num\n    \n    return str(int(num, 8))\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"123\", \"12\"),\n        (\"a\", \"a\"),\n        (\"1\", \"1\"),\n        (\"01\", \"1\"),\n        (\"10\", \"10\"),\n        (\"11\", \"11\"),\n        (\"111\", \"111\"),\n        (\"1000\", \"1\"),\n        (\"1010\", \"10\"),\n        (\"10101010\", \"10101010\"),\n        (\"1010101010\", \"1010101010\"),\n        (\"10101010101010\", \"10101010101010\"),\n        (\"101010101010101010\", \"101010101010101010\"),\n        (\"1010101010101010101010\", \"1010101010101010101010\"),\n        (\"10101010101010101010101010\", \"10101010101010101010101010\"),\n        (\"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
      -5.66015625
    ],
    [
      "import sys\n\ndef octal_to_decimal(octal):\n    if octal == \"0\":\n        return 0\n    if octal == \"1\":\n        return 1\n    if octal == \"2\":\n        return 2\n    if octal == \"3\":\n        return 3\n    if octal == \"4\":\n        return 4\n    if octal == \"5\":\n        return 5\n    if octal == \"6\":\n        return 6\n    if octal == \"7\":\n        return 7\n    if octal == \"8\":\n        return 8\n    if octal == \"9\":\n        return 9\n    else:\n        print(\"ERROR: Invalid octal number\")\n        sys.exit(1)\n\ndef octal_to_decimal_with_leading_zero(octal):\n    if octal == \"0\":\n        return 0\n    if octal == \"1\":\n        return 1\n    if octal == \"2\":\n        return 2\n    if octal == \"3\":\n        return 3\n    if octal == \"4\":\n        return 4\n    if octal == \"5\":\n        return 5\n    if octal == \"6\":\n        return 6\n    if octal == \"7\":\n        return 7\n    if octal == \"8\":\n        return 8\n    if octal == \"9\":\n        return 9\n    else:\n        print(\"ERROR: Invalid octal number\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    octal = input(\"Please enter the octal number: \")\n    decimal = octal_to_decimal(octal)\n    print(\"The decimal number is:\", decimal)\n\n    octal_with_leading_zero = input(\"Please enter the octal number: \")\n    decimal_with_leading_zero = octal_to_decimal_with_leading_zero(octal_with_leading_zero)\n    print(\"The decimal number with leading zero is:\", decimal_with_leading_zero)",
      -5.8984375
    ],
    [
      "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n    def __repr__(self):\n        return \"{}-{}\".format(self.start, self.end)\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(x))\n\nclass Codec:\n\n    def __init__(self):\n        self.dict = {}\n\n    def encode(self, num):\n        return self.__encode(num)\n\n    def decode(self, s):\n        return self.__decode(s)\n\n    def __encode(self, num):\n        if num not in self.dict:\n            self.dict[num] = self.__encode(num / 10) + self.__encode(num % 10)\n        return self.dict[num]\n\n    def __decode(self, s):\n        res = 0\n        for i in range(len(s)):\n            res = res * 8 + s[i] - '0'\n        return res\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(x))\n\nclass Codec2:\n\n    def __init__(self):\n        self.dict = {}\n\n    def encode(self, num):\n        return self.__encode(num)\n\n    def decode(self, s):\n        return self.__decode(s)\n\n    def __encode(self, num):\n        if num not in self.dict:\n            self.dict[num] = self.__encode(num / 10) + self.__encode(num % 10)\n        return self.dict[num]\n\n    def __decode(self, s):\n        res = 0\n        for i in range(len(s)):\n            res = res * 8 + s[i] - '0'\n        return res\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(cod",
      -6.0546875
    ],
    [
      "#!/usr/bin/env python\n\ndef octal_to_decimal(octal_num):\n    \"\"\"\n    Convert an octal number to decimal number.\n    :param octal_num: The octal number.\n    :return: The decimal number.\n    \"\"\"\n    return oct(octal_num)\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert octal_to_decimal(0) == 0, \"Example\"\n    assert octal_to_decimal(1) == 1, \"Example\"\n    assert octal_to_decimal(3) == 3, \"Example\"\n    assert octal_to_decimal(7) == 7, \"Example\"\n    assert octal_to_decimal(27) == 27, \"Example\"\n    assert octal_to_decimal(30) == 30, \"Example\"\n    assert octal_to_decimal(37) == 37, \"Example\"\n    assert octal_to_decimal(128) == 128, \"Example\"\n    assert octal_to_decimal(255) == 255, \"Example\"\n    assert octal_to_decimal(256) == 256, \"Example\"\n    assert octal_to_decimal(511) == 511, \"Example\"\n    assert octal_to_decimal(512) == 512, \"Example\"\n    assert octal_to_decimal(1023) == 1023, \"Example\"\n    assert octal_to_decimal(1024) == 1024, \"Example\"\n    assert octal_to_decimal(32768) == 32768, \"Example\"\n    assert octal_to_decimal(32769) == 32769, \"Example\"\n    assert octal_to_decimal(2147483648) == 2147483648, \"Example\"\n    assert octal_to_decimal(2147483649) == 2147483649, \"Example\"\n    assert octal_to_decimal(4294967295) == 4294967295, \"Example\"\n    assert octal_to_decimal(42949",
      -6.2421875
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef octal_to_decimal(octal_number):\n    return octal_number - 8 * int(octal_number[1:])\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print \"usage: %s <octal_number>\" % sys.argv[0]\n        sys.exit(1)\n    print octal_to_decimal(sys.argv[1])",
      -6.29296875
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    Convert an octal number to a decimal number.\n    :param octal_number:\n    :return:\n    \"\"\"\n    if octal_number < 0:\n        raise ValueError('Octal number must be greater than zero')\n    if octal_number == 0:\n        return 0\n    return octal_number * 3 + (octal_number * 3) % 8 + (octal_number * 3) % 8\n\nif __name__ == '__main__':\n    print octal_to_decimal(0)\n    print octal_to_decimal(1)\n    print octal_to_decimal(2)\n    print octal_to_decimal(3)\n    print octal_to_decimal(4)\n    print octal_to_decimal(5)\n    print octal_to_decimal(6)\n    print octal_to_decimal(7)\n    print octal_to_decimal(8)\n    print octal_to_decimal(9)\n    print octal_to_decimal(10)\n    print octal_to_decimal(11)\n    print octal_to_decimal(12)\n    print octal_to_decimal(13)\n    print octal_to_decimal(14)\n    print octal_to_decimal(15)\n    print octal_to_decimal(16)\n    print octal_to_decimal(17)\n    print octal_to_decimal(18)\n    print octal_to_decimal(19)\n    print octal_to_decimal(20)\n    print octal_to_decimal(21)\n    print octal_to_decimal(22)\n    print octal_to_decimal(23)\n    print octal_to_decimal(24)\n    print octal_to_decimal(25)\n    print octal_to_decimal(26)\n    print octal_to_decimal(27)\n    print octal_to_decimal(28)\n    print octal",
      -6.3359375
    ],
    [
      "def octal_to_decimal(octal_num):\n    \"\"\"\n    :param octal_num:\n    :return:\n    \"\"\"\n    return octal_num / 8\n\ndef octal_to_decimal_2(octal_num):\n    \"\"\"\n    :param octal_num:\n    :return:\n    \"\"\"\n    return octal_num % 8\n\ndef octal_to_decimal_3(octal_num):\n    \"\"\"\n    :param octal_num:\n    :return:\n    \"\"\"\n    return octal_num * 2\n\nif __name__ == '__main__':\n    print octal_to_decimal(0)\n    print octal_to_decimal(1)\n    print octal_to_decimal(2)\n    print octal_to_decimal(3)\n    print octal_to_decimal(4)\n    print octal_to_decimal(5)\n    print octal_to_decimal(6)\n    print octal_to_decimal(7)\n    print octal_to_decimal(8)\n    print octal_to_decimal(9)\n    print octal_to_decimal(10)\n    print octal_to_decimal(11)\n    print octal_to_decimal(12)\n    print octal_to_decimal(13)\n    print octal_to_decimal(14)\n    print octal_to_decimal(15)\n    print octal_to_decimal(16)\n    print octal_to_decimal(17)\n    print octal_to_decimal(18)\n    print octal_to_decimal(19)\n    print octal_to_decimal(20)\n    print octal_to_decimal(21)\n    print octal_to_decimal(22)\n    print octal_to_decimal(23)\n    print octal_to_decimal(24)\n    print octal_to_decimal(25)\n    print octal_to_decimal(26)\n    print octal_to_decimal(",
      -6.4609375
    ],
    [
      "def convert_octal_to_decimal(octal_num):\n    \"\"\"\n    :param octal_num:\n    :return:\n    \"\"\"\n    return oct(octal_num)\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert convert_octal_to_decimal(0) == 0, \"0 -> 0\"\n    assert convert_octal_to_decimal(1) == 1, \"1 -> 1\"\n    assert convert_octal_to_decimal(7) == 7, \"7 -> 7\"\n    assert convert_octal_to_decimal(10) == 10, \"10 -> 10\"\n    assert convert_octal_to_decimal(37) == 37, \"37 -> 37\"\n    assert convert_octal_to_decimal(128) == 128, \"128 -> 128\"",
      -6.56640625
    ],
    [
      "def octal2decimal(octal):\n    \"\"\"\n    >>> octal2decimal(12)\n    12\n    >>> octal2decimal(255)\n    255\n    >>> octal2decimal(2147483647)\n    2147483647\n    \"\"\"\n    if octal == 0:\n        return 0\n    elif octal == 1:\n        return 1\n    elif octal == 2:\n        return 2\n    elif octal == 3:\n        return 3\n    elif octal == 4:\n        return 4\n    elif octal == 5:\n        return 5\n    elif octal == 6:\n        return 6\n    elif octal == 7:\n        return 7\n    elif octal == 8:\n        return 8\n    elif octal == 9:\n        return 9\n    elif octal == 10:\n        return 10\n    elif octal == 11:\n        return 11\n    elif octal == 12:\n        return 12\n    elif octal == 13:\n        return 13\n    elif octal == 14:\n        return 14\n    elif octal == 15:\n        return 15\n    elif octal == 16:\n        return 16\n    elif octal == 17:\n        return 17\n    elif octal == 18:\n        return 18\n    elif octal == 19:\n        return 19\n    elif octal == 20:\n        return 20\n    elif octal == 21:\n        return 21\n    elif octal == 22:\n        return 22\n    elif octal == 23:\n        return 23\n    elif octal == 24:\n        return 24\n    elif octal == 25:\n        return 25\n    elif octal == 26:\n        return 26\n    elif octal == 27:\n        return 27\n    elif octal == 28:\n        return 28\n    elif octal == 29:\n        return 29\n    elif octal == 30:\n        return 30\n    elif octal == 31:\n        return 31\n    elif octal == 32:\n        return 32\n    elif octal == 33:\n        return 33\n    elif",
      -8.0078125
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    :param octal_number:\n    :return:\n    \"\"\"\n    if octal_number.isdigit():\n        return octal_number\n    else:\n        if octal_number.find('.')!= -1:\n            return octal_number\n        else:\n            return '0' + octal_number\n\nif __name__ == '__main__':\n    print octal_to_decimal('0')\n    print octal_to_decimal('1')\n    print octal_to_decimal('12')\n    print octal_to_decimal('123')\n    print octal_to_decimal('1234')\n    print octal_to_decimal('12345')\n    print octal_to_decimal('123456')\n    print octal_to_decimal('1234567')\n    print octal_to_decimal('12345678')\n    print octal_to_decimal('123456789')\n    print octal_to_decimal('1234567891')\n    print octal_to_decimal('12345678912')\n    print octal_to_decimal('123456789123')\n    print octal_to_decimal('1234567891234')\n    print octal_to_decimal('12345678912345')\n    print octal_to_decimal('123456789123456')\n    print octal_to_decimal('1234567891234567')\n    print octal_to_decimal('12345678912345678')\n    print octal_to_decimal('123456789123456789')\n    print octal_to_decimal('1234567891234567891')\n    print octal_to_decimal('12345678912345678912')\n    print octal_to_decimal('123456789123456789123')\n    print octal_to_decimal('1234567891234567891234')\n    print octal_to_decimal('123456789123",
      -8.1328125
    ],
    [
      "def oct2dec(octal_number):\n    \"\"\"\n    Convert octal number to decimal number.\n    \"\"\"\n    return octal_number * 8\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print oct2dec(int('1', 8))\n\n\nif __name__ == '__main__':\n    main()",
      -8.1875
    ],
    [
      "import sys\n\n\ndef convert_oct(number):\n    \"\"\"\n    Convert octal number to decimal number.\n    \"\"\"\n    if number == \"0\":\n        return 0\n    if number == \"1\":\n        return 1\n    if number == \"2\":\n        return 2\n    if number == \"3\":\n        return 3\n    if number == \"4\":\n        return 4\n    if number == \"5\":\n        return 5\n    if number == \"6\":\n        return 6\n    if number == \"7\":\n        return 7\n    if number == \"8\":\n        return 8\n    if number == \"9\":\n        return 9\n    if number == \"10\":\n        return 10\n    if number == \"11\":\n        return 11\n    if number == \"12\":\n        return 12\n    if number == \"13\":\n        return 13\n    if number == \"14\":\n        return 14\n    if number == \"15\":\n        return 15\n    if number == \"16\":\n        return 16\n    if number == \"17\":\n        return 17\n    if number == \"18\":\n        return 18\n    if number == \"19\":\n        return 19\n    if number == \"20\":\n        return 20\n    if number == \"21\":\n        return 21\n    if number == \"22\":\n        return 22\n    if number == \"23\":\n        return 23\n    if number == \"24\":\n        return 24\n    if number == \"25\":\n        return 25\n    if number == \"26\":\n        return 26\n    if number == \"27\":\n        return 27\n    if number == \"28\":\n        return 28\n    if number == \"29\":\n        return 29\n    if number == \"30\":\n        return 30\n    if number == \"31\":\n        return 31\n    if number == \"32\":\n        return 32\n    if number == \"33\":\n        return 33\n    if number == \"34\":\n        return 34\n    if number == \"35\":\n        return 35\n    if number == \"36\":\n        return 36\n    if number == \"37\":\n        return 37\n    if number == \"38\":\n        return 38\n    if number == \"39\":\n        return 39\n    if",
      -8.765625
    ],
    [
      "# Write a function that takes an integer and converts it to a decimal number.\n# You can use the integer's ASCII value for the octal value.\n\ndef octal_to_decimal(n):\n    return n\n\n# Test your function by running the following from the command prompt:\n\n# octal_to_decimal(0)\n# octal_to_decimal(1)\n# octal_to_decimal(5)\n# octal_to_decimal(10)\n# octal_to_decimal(15)\n# octal_to_decimal(26)\n# octal_to_decimal(36)\n# octal_to_decimal(77)\n\n# Test your function by running the following from the command prompt:\n\n# octal_to_decimal(0)\n# octal_to_decimal(1)\n# octal_to_decimal(5)\n# octal_to_decimal(10)\n# octal_to_decimal(15)\n# octal_to_decimal(26)\n# octal_to_decimal(36)\n# octal_to_decimal(77)\n\n# Test your function by running the following from the command prompt:\n\n# octal_to_decimal(0)\n# octal_to_decimal(1)\n# octal_to_decimal(5)\n# octal_to_decimal(10)\n# octal_to_decimal(15)\n# octal_to_decimal(26)\n# octal_to_decimal(36)\n# octal_to_decimal(77)\n\n# Test your function by running the following from the command prompt:\n\n# octal_to_decimal(0)\n# octal_to_decimal(1)\n# octal_to_decimal(5)\n# octal_to_decimal(10)\n# octal_to_decimal(15)\n# octal_to_decimal(26)\n# octal_to_decimal(36)\n# octal_to_decimal(77)",
      -8.8359375
    ],
    [
      "# TODO: write a test to make sure the output is correct\n\ndef oct2dec(n):\n    return n\n\nif __name__ == '__main__':\n    print oct2dec(0)\n    print oct2dec(1)\n    print oct2dec(10)\n    print oct2dec(100)\n    print oct2dec(1000)\n    print oct2dec(10000)\n    print oct2dec(100000)\n    print oct2dec(1000000)\n    print oct2dec(10000000)\n    print oct2dec(100000000)\n    print oct2dec(1000000000)\n    print oct2dec(10000000000)\n    print oct2dec(100000000000)\n    print oct2dec(1000000000000)\n    print oct2dec(10000000000000)\n    print oct2dec(100000000000000)\n    print oct2dec(1000000000000000)\n    print oct2dec(10000000000000000)\n    print oct2dec(10000000000000000000)\n    print oct2dec(100000000000000000000)\n    print oct2dec(1000000000000000000000)\n    print oct2dec(10000000000000000000000)\n    print oct2dec(100000000000000000000000)\n    print oct2dec(1000000000000000000000000)\n    print oct2dec(10000000000000000000000000)\n    print oct2dec(100000000000000000000000000)\n    print oct2dec(1000000000000000000000000000)\n    print oct2dec(10000000000000000000000000000)\n    print oct2dec(100000000000000000000000000000)\n    print oct2dec(1000000000000000000000000000000)\n    print oct2dec(10000000000000000000000000000000)\n    print oct2dec(1000000000000000000000000000000000)\n    print oct2dec(100000000000000000000000000000000)\n    print oct2dec(100000000000000000000000000000000000)\n    print oct2dec(1000000000000000000000000000000000000)\n    print oct2dec(10000000000000000000000000000000000000)\n    print oct2dec(100000000000000000000000000000000000000)\n    print oct2dec(1000000000000000000000000000000000000000)\n    print oct2dec(10000000000000000000000000000000000000000)\n    print oct2dec(100000000000000000000000000000000000000000)\n    print oct2dec(1000000000000000000000000000000000000000000)\n    print oct2dec(10000000000000000000000000000000000000000000)\n    print oct2dec",
      -9.2578125
    ],
    [
      "import os\nimport sys\n\ndef convert_octal_to_decimal(num):\n    \"\"\"\n    Args:\n        num: a string that contains octal number\n    Returns:\n        a string that contains decimal number\n    \"\"\"\n    \n    # if num is not a number\n    if num == '':\n        return ''\n    \n    # if num is not octal number\n    if num[0]!= '0':\n        return ''\n    \n    # if num is a number\n    if num[1] == 'x':\n        return num[2:]\n    \n    return num\n\ndef main():\n    \"\"\"\n    main()\n    \"\"\"\n    \n    num = input()\n    \n    if len(num) > 1:\n        num = num[1:]\n    \n    num = convert_octal_to_decimal(num)\n    \n    if num!= '':\n        print(num)\n    else:\n        print('Error')\n\nif __name__ == '__main__':\n    main()",
      -13.21875
    ],
    [
      "def octal_to_decimal(octal_number):\n    \"\"\"\n    >>> octal_to_decimal(0)\n    0\n    >>> octal_to_decimal(1)\n    1\n    >>> octal_to_decimal(10)\n    10\n    >>> octal_to_decimal(99)\n    99\n    >>> octal_to_decimal(999)\n    999\n    >>> octal_to_decimal(1000)\n    1000\n    >>> octal_to_decimal(10000)\n    10000\n    >>> octal_to_decimal(100000)\n    100000\n    >>> octal_to_decimal(1000000)\n    1000000\n    >>> octal_to_decimal(10000000)\n    10000000\n    >>> octal_to_decimal(1000000000)\n    1000000000\n    >>> octal_to_decimal(10000000000)\n    10000000000\n    >>> octal_to_decimal(100000000000)\n    100000000000\n    >>> octal_to_decimal(1000000000000)\n    1000000000000\n    >>> octal_to_decimal(10000000000000)\n    10000000000000\n    >>> octal_to_decimal(100000000000000)\n    100000000000000\n    >>> octal_to_decimal(1000000000000000)\n    1000000000000000\n    >>> octal_to_decimal(100000000000000000)\n    100000000000000000\n    >>> octal_to_decimal(1000000000000000000)\n    1000000000000000000\n    >>> octal_to_decimal(10000000000000000000)\n    10000000000000000000\n    \"\"\"\n    return octal_number * 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -13.609375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}