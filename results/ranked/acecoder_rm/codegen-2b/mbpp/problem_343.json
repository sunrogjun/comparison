{
  "problem": {
    "task_id": "MBPP/354",
    "prompt": "Write a function to find t-nth term of arithemetic progression.",
    "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
    "test_list": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ],
    "challenge_test_list": [],
    "problem_id": 343
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from math import ceil\n\ndef find_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    return t * (n + 1) // 2\n\nif __name__ == '__main__':\n    print(find_term(3, 10))\n    print(find_term(4, 10))\n    print(find_term(5, 10))\n    print(find_term(6, 10))\n    print(find_term(7, 10))\n    print(find_term(8, 10))\n    print(find_term(9, 10))",
      2.453125
    ],
    [
      "# https://leetcode.com/problems/find-t-nth-term-of-arithmetic-progression/discuss/256896/Python-Cython-Solution\n\nclass Solution(object):\n    def findNthDigit(self, n, nums):\n        \"\"\"\n        :type n: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.findDigit(n, nums)\n\n    def findDigit(self, n, nums):\n        # base case\n        if n == 0:\n            return nums[0]\n        # recursive case\n        else:\n            if n < 0:\n                return self.findDigit(n, nums[n:])\n            else:\n                return self.findDigit(n-1, nums)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1,2,3,4,5]\n    print(s.findNthDigit(4, nums))\n    nums = [1,2,3,4,5,6,7]\n    print(s.findNthDigit(3, nums))\n    nums = [1,2,3,4,5,6,7,8]\n    print(s.findNthDigit(3, nums))",
      0.88623046875
    ],
    [
      "# https://oj.leetcode.com/problems/t-nth-term-of-arithmetic-progression/\n\nclass Solution(object):\n    def findNthTerm(self, n, x):\n        \"\"\"\n        :type n: int\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return x\n        if n == 2:\n            return x*x\n        if n == 3:\n            return x*x*x\n        if n == 4:\n            return x*x*x*x\n        if n == 5:\n            return x*x*x*x*x\n        if n == 6:\n            return x*x*x*x*x*x\n        if n == 7:\n            return x*x*x*x*x*x*x\n        if n == 8:\n            return x*x*x*x*x*x*x*x\n        if n == 9:\n            return x*x*x*x*x*x*x*x*x\n        if n == 10:\n            return x*x*x*x*x*x*x*x*x*x\n        if n == 11:\n            return x*x*x*x*x*x*x*x*x*x*x\n        if n == 12:\n            return x*x*x*x*x*x*x*x*x*x*x*x\n        if n == 13:\n            return x*x*x*x*x*x*x*x*x*x*x*x*x\n        if n == 14:\n            return x*x*x*x*x*x*x*x*x*x*x*x*x*x\n        if n == 15:\n            return x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\n        if n == 16:\n            return x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\n        if n == 17:\n            return x*x*x*x*",
      0.8330078125
    ],
    [
      "from __future__ import print_function\n\nclass Solution:\n    # @param {integer} n\n    # @param {integer} t\n    # @return {integer}\n    def getTerm(self, n, t):\n        ret = 0\n        for i in range(t):\n            ret += n // (t - i)\n            n //= (t - i)\n        return ret\n\n    def getTerm_dp(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        ret = 0\n        for i in range(t):\n            ret += n // (t - i)\n            n //= (t - i)\n        return ret",
      0.36767578125
    ],
    [
      "class Solution(object):\n    def getTerm(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        if t == 0:\n            return 1\n        if t == 1:\n            return n\n        if t % 2 == 0:\n            return self.getTerm(n, t/2) + self.getTerm(n, t/2)\n        else:\n            return self.getTerm(n, t/2) + self.getTerm(n, t/2 + 1)",
      0.2059326171875
    ],
    [
      "import math\n\n# https://leetcode.com/problems/t-nth-term-of-arithmetic-progression/discuss/83535/Python-solution-with-explanation\ndef tnth_term(t, n):\n    res = 1\n    for i in range(1, n+1):\n        res *= t\n        res += i\n    return res\n\nif __name__ == '__main__':\n    print(tnth_term(5, 10))",
      0.149169921875
    ],
    [
      "# https://leetcode.com/problems/t-nth-term-of-arithmetic-progression/discuss/242688/Python-Cython-Solution\n\n# https://leetcode.com/problems/t-nth-term-of-arithmetic-progression/discuss/257970/Python-Cython-Solution\n\n# https://leetcode.com/problems/t-nth-term-of-arithmetic-progression/discuss/257970/Python-Cython-Solution\n\n# https://leetcode.com/problems/t-nth-term-of-arithmetic-progression/discuss/257970/Python-Cython-Solution\n\n# https://leetcode.com/problems/t-nth-term-of-arithmetic-progression/discuss/257970/Python-Cython-Solution\n\n\nclass Solution(object):\n    def getTerm(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: str\n        \"\"\"\n        # t = t - 1\n        # n = n - 1\n\n        while n > 0:\n            if n % t == 0:\n                n /= t\n                t -= 1\n            else:\n                break\n        if n == 0:\n            return '1'\n        return str(n)\n\nif __name__ == '__main__':\n    print(Solution().getTerm(2, 4))",
      -0.00803375244140625
    ],
    [
      "# https://www.geeksforgeeks.org/t-nth-term-of-arithmetic-progression/\n\n# def find_term(n, t):\n#     if t == 1:\n#         return 1\n#     if t == 2:\n#         return 1 + n\n#     return find_term(n, t-1) + n\n\n\ndef find_term(n, t):\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1 + n\n    return find_term(n, t-1) + n\n\n\ndef find_term(n, t):\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1 + n\n    return find_term(n, t-1) + n\n\n\ndef find_term(n, t):\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1 + n\n    return find_term(n, t-1) + n\n\n\ndef find_term(n, t):\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1 + n\n    return find_term(n, t-1) + n\n\n\ndef find_term(n, t):\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1 + n\n    return find_term(n, t-1) + n\n\n\ndef find_term(n, t):\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1 + n\n    return find_term(n, t-1) + n\n\n\ndef find_term(n, t):\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1 + n\n    return find_term(n, t-1) + n\n\n\ndef find_term(n, t):\n    if t == 1:\n        return 1\n    if t == 2:\n        return 1 + n\n    return find_term(n, t-1) + n\n\n\ndef find_term(n, t):\n    if t == 1:\n        return 1\n    if t == 2",
      -0.10211181640625
    ],
    [
      "import time\nimport math\n\n\ndef get_t_n(n):\n    \"\"\"\n    Return the number of terms of the t-nth term of the arithemetic progression.\n    \"\"\"\n    return math.factorial(n) / math.factorial(n-1)\n\n\ndef get_t_n_time(n):\n    \"\"\"\n    Return the number of terms of the t-nth term of the arithemetic progression\n    using time.clock().\n    \"\"\"\n    start = time.clock()\n    return get_t_n(n)\n    end = time.clock()\n    return end - start\n\n\ndef get_t_n_prog(n):\n    \"\"\"\n    Return the number of terms of the t-nth term of the arithemetic progression\n    using the built-in math.factorial().\n    \"\"\"\n    return math.factorial(n) / math.factorial(n-1)\n\n\ndef main():\n    \"\"\"\n    Unit tests.\n    \"\"\"\n    n = 0\n    print('get_t_n() = %d' % get_t_n(n))\n    print('get_t_n_time() = %f' % get_t_n_time(n))\n    print('get_t_n_prog() = %f' % get_t_n_prog(n))\n\n\nif __name__ == '__main__':\n    main()",
      -0.4140625
    ],
    [
      "import math\n\ndef find_t_nth_term(n, t):\n    \"\"\"\n    n: the number of terms in the progression\n    t: the term number\n    \"\"\"\n\n    if t == 0:\n        return 0\n    elif t == 1:\n        return 1\n    else:\n        return find_t_nth_term(n - 1, t - 1) + find_t_nth_term(n - 1, t)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    t = int(input())\n    print(find_t_nth_term(n, t))",
      -0.85595703125
    ],
    [
      "#!/usr/bin/env python\n\ndef find_term(n, t):\n    if t < 0:\n        return None\n    if t == 0:\n        return 1\n    return t * find_term(n, t-1)\n\ndef main():\n    print find_term(10, 10)\n\nif __name__ == '__main__':\n    main()",
      -0.85595703125
    ],
    [
      "# Definition for an arithmetic progression.\nclass ArithmeticProgression:\n    def __init__(self, a, b, n):\n        self.a = a\n        self.b = b\n        self.n = n\n\n    def __str__(self):\n        return str(self.a) + \" \" + str(self.b) + \" \" + str(self.n)\n\n# Your ArithmeticProgression object will be instantiated and called as such:\n# obj = ArithmeticProgression(a,b,n)\n# param_1 = obj.a\n# param_2 = obj.b\n# param_3 = obj.n",
      -0.85595703125
    ],
    [
      "#!/usr/bin/env python\n\nfrom math import *\n\ndef t_nth_term(n, t):\n    \"\"\"\n    Input:\n    n - the number of terms to be generated\n    t - the term to be generated\n    Output:\n    a list of the terms\n    \"\"\"\n\n    a = [0]*n\n    for i in range(n):\n        a[i] = t*(1+a[i-1])\n\n    return a\n\nif __name__ == '__main__':\n    n = int(input())\n    t = float(input())\n    print(t_nth_term(n, t))",
      -0.85595703125
    ],
    [
      "def get_nth_term(arithmetic_progression, n):\n    \"\"\"\n    :type arithmetic_progression: list[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return arithmetic_progression[-n]",
      -0.85693359375
    ],
    [
      "# Definition for an arithmetic progression.\nclass ArithmeticProgression:\n    def __init__(self, start, end, step):\n        self.start = start\n        self.end = end\n        self.step = step\n\n    def __repr__(self):\n        return str(self.start) + \" \" + str(self.end) + \" \" + str(self.step)\n\n\ndef find_t_nth_term(start, end, step):\n    \"\"\"\n    :type start: int\n    :type end: int\n    :type step: int\n    :rtype: int\n    \"\"\"\n    n = end - start\n    for i in range(1, n+1):\n        if i % step == 0:\n            return i\n    return -1",
      -0.85693359375
    ],
    [
      "import math\n\ndef arith_progression(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    term = 0\n    for i in range(n):\n        term += 1.0 / (i + 1)\n    return term\n\nif __name__ == '__main__':\n    print arith_progression(100)",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def findTerm(self, t, n):\n        \"\"\"\n        :type t: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return t * (n + 1) / 2\n\nif __name__ == \"__main__\":\n    print Solution().findTerm(3, 4)",
      -0.85791015625
    ],
    [
      "def nth_term(n, p):\n    return p[n]\n\ndef main():\n    n = 0\n    p = [1]\n    while p[0] < 100000000:\n        n += 1\n        p.append(p[n - 1] + p[n - 2])\n    print(nth_term(n - 1, p))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef t_nth_term(n, t):\n    \"\"\"\n    :param n: integer\n    :param t: integer\n    :return: float\n    \"\"\"\n    return t_nth_term_recursive(n, t)\n\n\ndef t_nth_term_recursive(n, t):\n    if t == 0:\n        return 1\n    elif t == 1:\n        return n\n    else:\n        return t_nth_term_recursive(n, t - 1) * (n - 1) / (t - 1)\n\n\ndef t_nth_term_iterative(n, t):\n    if t == 0:\n        return 1\n    elif t == 1:\n        return n\n    else:\n        return t_nth_term_iterative(n, t - 1) * (n - 1) / (t - 1)\n\n\ndef main():\n    print(t_nth_term(100, 4))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "import math\n\ndef t_nth_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    return (t % n) * (t / n)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print t_nth_term(1, 1)\n    print t_nth_term(2, 3)\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "import time\ntStart=time.time()\n\ndef arith_prog_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    return n * (t + 1)\n\nprint(time.time() - tStart)",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\n# https://www.hackerrank.com/challenges/t-nth-term-of-arithmetic-progression\n\nimport sys\n\n\ndef solution(t, n):\n    # nth term of arithmetic progression\n    return t - n * (n + 1) / 2\n\n\nif __name__ == '__main__':\n    t, n = map(int, sys.stdin.readline().strip().split(' '))\n    print solution(t, n)",
      -0.85791015625
    ],
    [
      "def find_nth_term(arithmetic_progression, n):\n    \"\"\"\n    :type arithmetic_progression: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return arithmetic_progression[n - 1]\n\n\nif __name__ == \"__main__\":\n    print(find_nth_term([1, 2, 3, 4, 5], 4))",
      -0.85791015625
    ],
    [
      "def get_term(n, a, b):\n    return a * (n - 1) + b\n\nif __name__ == '__main__':\n    # your code goes here\n    n = int(input())\n    a = int(input())\n    b = int(input())\n    print(get_term(n, a, b))",
      -0.85791015625
    ],
    [
      "def tnth(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    if n < t:\n        return tnth(n, t)\n    elif n == t:\n        return 1\n    elif n > t:\n        return 0\n    else:\n        return tnth(n - 1, t) + tnth(t, t + 1)\n\nif __name__ == '__main__':\n    print tnth(2, 3)",
      -0.85791015625
    ],
    [
      "from math import factorial\n\ndef find_t_nth_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    return t * factorial(n + t - 1) / factorial(t)\n\nif __name__ == \"__main__\":\n    assert find_t_nth_term(3, 2) == 3\n    assert find_t_nth_term(5, 3) == 15\n    assert find_t_nth_term(5, 4) == 105\n    assert find_t_nth_term(5, 5) == 105",
      -0.85791015625
    ],
    [
      "import math\n\ndef nth_term(x, n):\n    \"\"\"\n    :type x: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n) / (math.factorial(n - x) * math.factorial(x))\n\n\nif __name__ == '__main__':\n    print nth_term(5, 2)",
      -0.85791015625
    ],
    [
      "def find_t_nth_term(n, t):\n    \"\"\"\n    Find the t-nth term of arithmetic progression\n    \n    Input:\n        n: the term of arithmetic progression\n        t: the number of terms\n    Output:\n        the t-nth term of arithmetic progression\n    \"\"\"\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return t\n    elif n == 3:\n        return t * t\n    else:\n        return find_t_nth_term(n-1, t) * t\n\nif __name__ == \"__main__\":\n    n = int(input())\n    t = int(input())\n    print(find_t_nth_term(n, t))",
      -0.85791015625
    ],
    [
      "from math import sqrt\n\ndef arith_pro(n, t):\n    a = 1\n    for i in range(1, t+1):\n        a *= (i + 1)\n    return a / (sqrt(n) * (t + 1))\n\nif __name__ == \"__main__\":\n    print(arith_pro(20, 15))",
      -0.85791015625
    ],
    [
      "import math\n\ndef get_term(t, n):\n    return pow(10, t) * math.factorial(n) / math.factorial(n + t)\n\ndef main():\n    print get_term(1, 4)\n    print get_term(3, 5)\n    print get_term(6, 8)\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef get_t_nth_term(t, n):\n    return math.factorial(n) / (math.factorial(t) * math.factorial(n - t))\n\n\nif __name__ == \"__main__\":\n    t, n = map(int, input().split())\n    print(get_t_nth_term(t, n))",
      -0.85791015625
    ],
    [
      "# Definition for an arithmetic progression.\n# class Progression:\n#     def __init__(self, a=0, b=0, n=0):\n#         self.a = a\n#         self.b = b\n#         self.n = n\n\nclass Solution(object):\n    def findTerm(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n < 3:\n            return self.findTerm(n - 1)\n        ans = 1\n        for i in range(3, n + 1):\n            ans = ans * i\n        return ans\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.findTerm(3))",
      -0.85791015625
    ],
    [
      "import time\nstart_time = time.time()\n\ndef t_nth(t, n):\n    \"\"\"\n    :type t: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    a, b = 1, 1\n    for i in range(t):\n        a *= (n + i + 1)\n        b *= i + 1\n    return a / b\n\nif __name__ == '__main__':\n    t = int(input())\n    n = int(input())\n    print(t_nth(t, n))\n    print(\"--- %s seconds ---\" % (time.time() - start_time))",
      -0.85791015625
    ],
    [
      "import numpy as np\nfrom math import sqrt\n\ndef tnth_term(a, n):\n    \"\"\"\n    Find t-nth term of arithmetic progression\n    \"\"\"\n    return a * (1 + sqrt(5)) ** n\n\n\ndef main():\n    print(tnth_term(1, 1))\n    print(tnth_term(1, 2))\n    print(tnth_term(1, 3))\n    print(tnth_term(1, 4))\n    print(tnth_term(1, 5))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param {integer} t\n    # @param {integer} n\n    # @return {integer}\n    def getTerm(self, t, n):\n        return int(t / n)",
      -0.85791015625
    ],
    [
      "import math\n\ndef nth_term(n, x):\n    term = 1\n    for i in range(2, n+1):\n        term *= x\n        x *= x\n        term /= i\n    return term\n\nif __name__ == '__main__':\n    for i in range(2, 20):\n        print(nth_term(i, 2))",
      -0.8583984375
    ],
    [
      "def term(n, t):\n    \"\"\"\n    :param n: integer\n    :param t: integer\n    :return: the t-th term of arithmetic progression.\n    \"\"\"\n    return (n * (t + 1) - t * n) / (t + 1)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(term(4, 3))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "# Definition for arithemetic progression.\nclass ArithmeticProgression(object):\n    def __init__(self, start, end, step):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :type step: int\n        \"\"\"\n        self.start = start\n        self.end = end\n        self.step = step\n    def get(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n        return self.start + self.step*t\n\n# Your ArithmeticProgression object will be instantiated and called as such:\nobj = ArithmeticProgression(start,end,step)\nprint obj.get(3)",
      -0.8583984375
    ],
    [
      "def get_t_nth_term(n, t):\n    \"\"\"\n    >>> get_t_nth_term(3, 1)\n    1\n    >>> get_t_nth_term(4, 1)\n    1\n    >>> get_t_nth_term(2, 1)\n    1\n    >>> get_t_nth_term(3, 2)\n    2\n    >>> get_t_nth_term(4, 2)\n    2\n    >>> get_t_nth_term(3, 3)\n    3\n    >>> get_t_nth_term(4, 3)\n    3\n    \"\"\"\n    return t - n",
      -0.8583984375
    ],
    [
      "from math import factorial\n\ndef tnth_term(n, t):\n    if n == 0:\n        return 1\n    else:\n        return tnth_term(n-1, t) + tnth_term(n-2, t)\n\ndef main():\n    print(tnth_term(6, 10))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def tnth_term(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    if t == 0:\n        return 1\n    elif t == 1:\n        return n\n    elif t % 2 == 0:\n        return tnth_term(n, t / 2) + tnth_term(n, t / 2)\n    else:\n        return tnth_term(n, t - 1) + tnth_term(n, t - 1)\n\nif __name__ == '__main__':\n    print(tnth_term(3, 8))",
      -0.8583984375
    ],
    [
      "def t_nth_term(arithmetic_progression, t):\n    \"\"\"\n    Input: arithmetic progression\n    Output: t-th term\n    \"\"\"\n    count = 0\n    for i in arithmetic_progression:\n        if count == t:\n            return i\n        count += 1\n\ndef main():\n    \"\"\"\n    Main\n    \"\"\"\n    print t_nth_term('1 2 3 4 5 6 7 8 9 10', 1)\n    print t_nth_term('1 2 3 4 5 6 7 8 9 10', 4)\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def t_nth(n, arith_progression):\n    \"\"\"\n    Input: n is the number of terms, and arith_progression is a list of terms\n    Output: the n-th term of the arithmetical progression.\n    \"\"\"\n    return sum(arith_progression[n-1::-1])\n\nif __name__ == '__main__':\n    print t_nth(3, [2, 3, 5, 7, 11, 13, 17])",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {integer} n\n    # @param {integer} t\n    # @return {integer}\n    def findTerm(self, n, t):\n        ans = 0\n        while n > 0:\n            ans = ans * 10 + n % 10\n            n //= 10\n        return ans % t\n\nif __name__ == \"__main__\":\n    print(Solution().findTerm(2, 3))\n    print(Solution().findTerm(3, 7))\n    print(Solution().findTerm(3, 4))\n    print(Solution().findTerm(6, 9))\n    print(Solution().findTerm(6, 10))\n    print(Solution().findTerm(6, 11))",
      -0.8583984375
    ],
    [
      "from functools import reduce\n\ndef tnth_term(t, n):\n    return reduce(lambda x, y: x*y, map(lambda x: x**(n-1), range(1, t+1)))\n\nif __name__ == \"__main__\":\n    print tnth_term(2, 5)",
      -0.8583984375
    ],
    [
      "from math import log10\n\ndef get_nth_term(n, x, base):\n    if n == 1:\n        return x\n    else:\n        return get_nth_term(n-1, x*base, base)\n\nif __name__ == '__main__':\n    print(get_nth_term(4, 100, 10))",
      -0.8583984375
    ],
    [
      "from math import log\n\ndef find_t(n, t):\n    \"\"\"\n    :type n: int\n    :type t: int\n    :rtype: int\n    \"\"\"\n    return int(log(1 + t) / log(2))\n\nif __name__ == '__main__':\n    print(find_t(4, 6))\n    print(find_t(5, 6))\n    print(find_t(6, 6))\n    print(find_t(7, 6))",
      -0.8583984375
    ],
    [
      "import math\n\ndef find_t_nth_term(start, end, t):\n    return math.factorial(end) / (math.factorial(end - start - 1) * math.factorial(t))\n\ndef main():\n    start = 0\n    end = 100\n    t = 3\n    print(find_t_nth_term(start, end, t))\n    start = 0\n    end = 100\n    t = 5\n    print(find_t_nth_term(start, end, t))\n    start = 0\n    end = 100\n    t = 7\n    print(find_t_nth_term(start, end, t))\n    start = 0\n    end = 100\n    t = 9\n    print(find_t_nth_term(start, end, t))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "import math\n\ndef find_term(t, n):\n    \"\"\"\n    :type t: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    return (find_term(t - 1, n - 1) + 1) * (n + 1) / (t + 1)\n\n\nif __name__ == '__main__':\n    print(find_term(4, 2))",
      -0.85888671875
    ],
    [
      "def term(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return ((n-1) * 2) + 1\n\ndef test():\n    assert term(1) == 1\n    assert term(2) == 2\n    assert term(3) == 4\n    assert term(4) == 7\n    assert term(5) == 13\n    assert term(6) == 21\n    assert term(7) == 34\n    assert term(8) == 55\n    assert term(9) == 89\n    assert term(10) == 144\n\nif __name__ == '__main__':\n    test()",
      -0.85888671875
    ],
    [
      "# Definition for an arithmetic progression.\n# class ArithmeticProgression(object):\n#     def __init__(self, a, b, n):\n#         \"\"\"\n#         :type a: int\n#         :type b: int\n#         :type n: int\n#         \"\"\"\n#         self.a = a\n#         self.b = b\n#         self.n = n\n\nclass Solution(object):\n    def findNthTerm(self, arithProg, n):\n        \"\"\"\n        :type arithProg: ArithmeticProgression\n        :type n: int\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = 0\n        while i < len(arithProg.a) - 1:\n            j = j + 1\n            if j > n:\n                return arithProg.a[i]\n            i = i + 1\n        return arithProg.a[i]",
      -0.85888671875
    ],
    [
      "from collections import Counter\n\ndef tnth_term(n, t):\n    return [sum(c)/float(c[0]) for c in Counter(list(str(n))).most_common(t)]\n\nif __name__ == \"__main__\":\n    n = int(input())\n    t = int(input())\n    print(tnth_term(n, t))",
      -0.85888671875
    ],
    [
      "from math import factorial\n\ndef tnth_term(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return factorial(n) / (factorial(n - 1) * factorial(n - 2))\n\nprint(tnth_term(5))",
      -0.85888671875
    ],
    [
      "def term(t, n):\n    if t == 1:\n        return 1\n    else:\n        return t * term(t-1, n)\n\nif __name__ == \"__main__\":\n    print term(3, 4)",
      -0.85888671875
    ],
    [
      "def tnth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return tnth(n-1) + tnth(n-2)",
      -0.85888671875
    ],
    [
      "import math\n\ndef tnth(n):\n    '''\n    :param n: the nth term to calculate\n    :return: the t-nth term of arithemetic progression\n    '''\n    return math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2))\n\nif __name__ == '__main__':\n    print(tnth(3))\n    print(tnth(4))\n    print(tnth(5))\n    print(tnth(6))",
      -0.91015625
    ],
    [
      "def tnth_term(n):\n    \"\"\"\n    :type n: int\n    :rtype: str\n    \"\"\"\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"1\"\n    if n == 4:\n        return \"2\"\n    if n == 5:\n        return \"3\"\n    if n == 6:\n        return \"4\"\n    if n == 7:\n        return \"5\"\n    if n == 8:\n        return \"6\"\n    if n == 9:\n        return \"7\"\n    if n == 10:\n        return \"8\"\n    if n == 11:\n        return \"9\"\n    if n == 12:\n        return \"10\"\n    if n == 13:\n        return \"11\"\n    if n == 14:\n        return \"12\"\n    if n == 15:\n        return \"13\"\n    if n == 16:\n        return \"14\"\n    if n == 17:\n        return \"15\"\n    if n == 18:\n        return \"16\"\n    if n == 19:\n        return \"17\"\n    if n == 20:\n        return \"18\"\n    if n == 21:\n        return \"19\"\n    if n == 22:\n        return \"20\"\n    if n == 23:\n        return \"21\"\n    if n == 24:\n        return \"22\"\n    if n == 25:\n        return \"23\"\n    if n == 26:\n        return \"24\"\n    if n == 27:\n        return \"25\"\n    if n == 28:\n        return \"26\"\n    if n == 29:\n        return \"27\"\n    if n == 30:\n        return \"28\"\n    if n == 31:\n        return \"29\"\n    if n == 32:\n        return \"30\"\n    if n == 33:\n        return \"31\"\n    if n == 34:\n        return \"32\"\n    if n == 35:\n        return \"33\"\n    if n == 36:\n        return \"34\"\n    if n == 37:\n        return \"35\"",
      -1.064453125
    ],
    [
      "# Problem #3\n# The series of terms are:\n# 1, 3, 5, 7, 9, 11, 13, 15, 17,...\n# Find the nth term of the series.\n\n# Problem #4\n# Given an integer n, find the smallest integer x such that 1/(2^x) is an integer.\n\n# Problem #5\n# Write a function to find the nth term of the Fibonacci sequence.\n\n# Problem #6\n# Given a positive integer n, find the least number of perfect square numbers\n# less than or equal to n.\n\n# Problem #7\n# Given a positive integer n, write a method to determine if n is an\n# integer square root.\n\n# Problem #8\n# Given a positive integer n, write a method to determine if n is an\n# integer cube root.\n\n# Problem #9\n# Given a positive integer n, write a method to determine if n is an\n# integer fourth root.\n\n# Problem #10\n# Given a positive integer n, write a method to determine if n is an\n# integer fifth root.\n\n# Problem #11\n# Given a positive integer n, write a method to determine if n is an\n# integer sixth root.\n\n# Problem #12\n# Given a positive integer n, write a method to determine if n is an\n# integer seventh root.\n\n# Problem #13\n# Given a positive integer n, write a method to determine if n is an\n# integer eighth root.\n\n# Problem #14\n# Given a positive integer n, write a method to determine if n is an\n# integer ninth root.\n\n# Problem #15\n# Given a positive integer n, write a method to determine if n is an\n# integer tenth root.\n\n# Problem #16\n# Given a positive integer n, write a method to determine if n is an\n# integer eleventh root.\n\n# Problem #17\n# Given a positive integer n, write a method to determine if n is an\n# integer twelveth root.\n\n# Problem #18\n# Given a positive integer n, write a method to determine if n is an\n# integer thirteenth root.\n\n# Problem #19\n# Given a positive integer n, write a method to determine if n is an\n# integer fourteenth root.",
      -1.236328125
    ],
    [
      "# Definition for an arithmetic progression.\n# class ArithmeticProgression(object):\n#     def __init__(self, a, b, n):\n#         \"\"\"\n#         :type a: int\n#         :type b: int\n#         :type n: int\n#         \"\"\"\n#         self.a = a\n#         self.b = b\n#         self.n = n\n\nclass Solution(object):\n    def findTerm(self, a, b, n):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if b == 0:\n            return 1\n        if a == b:\n            return 2\n        if a > b:\n            return self.findTerm(b, a-b, n-1)\n        return self.findTerm(b, a, n-1)",
      -1.4306640625
    ],
    [
      "def get_t_nth_term(n, t):\n    \"\"\"\n    n: the number of terms to be found\n    t: the term to be found\n    \"\"\"\n    if t == 0:\n        return 1\n    if t == 1:\n        return n\n    if t == 2:\n        return n*(n + 1)\n    if t == 3:\n        return n*(n + 1)*(n + 2)\n    if t == 4:\n        return n*(n + 1)*(n + 2)*(n + 3)\n    if t == 5:\n        return n*(n + 1)*(n + 2)*(n + 3)*(n + 4)\n    if t == 6:\n        return n*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)\n    if t == 7:\n        return n*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6)\n    if t == 8:\n        return n*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6)*(n + 7)\n    if t == 9:\n        return n*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6)*(n + 7)*(n + 8)\n    if t == 10:\n        return n*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6)*(n + 7)*(n + 8)*(n + 9)\n    if t == 11:\n        return n*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6)*(n + 7)*(n + 8)*(n + 9)*(n + 10)\n    if t == 12:\n        return n*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6)*(n + 7)*(n + 8)*(n",
      -1.9560546875
    ],
    [
      "import unittest\n\nclass Solution:\n    def get_t_nth_term(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if t == 0:\n            return 1\n        if n == 1:\n            return t\n        if t == 1:\n            return n\n        return self.get_t_nth_term(n - 1, t) + self.get_t_nth_term(n - 1, t - 1)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/t-nth-term-of-arithmetic-progression/solution/\n\n# 20ms 100%\n# 14ms 98.44%\nclass Solution {\n    public int getTnthTerm(int n, int t) {\n        if (n <= 0) return 0;\n        if (t == 0) return 1;\n        if (t == 1) return n;\n        return getTnthTerm(n - 1, t) + getTnthTerm(n - 1, t - 1);\n    }\n}\n\n# 2ms 100%\nclass Solution {\n    public int getTnthTerm(int n, int t) {\n        if (t == 0) return 1;\n        if (t == 1) return n;\n        if (t == 2) return n * (n + 1) / 2;\n        if (t == 3) return n * (n + 1) * (2 * n + 1) / 6;\n        int f = 1;\n        for (int i = 1; i < t; i++) {\n            f = f * (n + i) / i;\n        }\n        return f * (n + t) / (t + 1);\n    }\n}\n'''",
      -2.41015625
    ],
    [
      "def term(n, t):\n    if n == 0:\n        return 0\n    if t == 1:\n        return 1\n    if t == 2:\n        return n\n    if n == 0:\n        return 0\n    if t == 3:\n        return n * 2\n    if t == 4:\n        return n * 3\n    if n == 0:\n        return 0\n    if t == 5:\n        return n * 4\n    if t == 6:\n        return n * 5\n    if n == 0:\n        return 0\n    if t == 7:\n        return n * 6\n    if t == 8:\n        return n * 7\n    if n == 0:\n        return 0\n    if t == 9:\n        return n * 8\n    if t == 10:\n        return n * 9\n    if n == 0:\n        return 0\n    if t == 11:\n        return n * 10\n    if t == 12:\n        return n * 11\n    if n == 0:\n        return 0\n    if t == 13:\n        return n * 12\n    if t == 14:\n        return n * 13\n    if n == 0:\n        return 0\n    if t == 15:\n        return n * 14\n    if t == 16:\n        return n * 15\n    if n == 0:\n        return 0\n    if t == 17:\n        return n * 16\n    if t == 18:\n        return n * 17\n    if n == 0:\n        return 0\n    if t == 19:\n        return n * 18\n    if t == 20:\n        return n * 19\n    if n == 0:\n        return 0\n    if t == 21:\n        return n * 20\n    if t == 22:\n        return n * 21\n    if n == 0:\n        return 0\n    if t == 23:\n        return n * 22\n    if t == 24:\n        return n * 23\n    if n == 0:\n        return 0\n    if t == 25:\n        return n * 24\n    if t == 26:\n        return n * 25\n    if n == 0:\n        return 0\n    if t == 27:\n        return n * 26\n    if",
      -2.447265625
    ],
    [
      "from math import log10\n\n\nclass Solution(object):\n    def getTerm(self, t, n):\n        \"\"\"\n        :type t: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if t < 0 or n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if t == 0:\n            return 1\n        if n == 1:\n            return 1\n        if t == 1:\n            return 1\n        if n == 2:\n            return 1\n        if t == 2:\n            return 1\n        if n == 3:\n            return 1\n        if t == 3:\n            return 1\n        if n == 4:\n            return 1\n        if t == 4:\n            return 1\n        if n == 5:\n            return 1\n        if t == 5:\n            return 1\n        if n == 6:\n            return 1\n        if t == 6:\n            return 1\n        if n == 7:\n            return 1\n        if t == 7:\n            return 1\n        if n == 8:\n            return 1\n        if t == 8:\n            return 1\n        if n == 9:\n            return 1\n        if t == 9:\n            return 1\n        if n == 10:\n            return 1\n        if t == 10:\n            return 1\n        if n == 11:\n            return 1\n        if t == 11:\n            return 1\n        if n == 12:\n            return 1\n        if t == 12:\n            return 1\n        if n == 13:\n            return 1\n        if t == 13:\n            return 1\n        if n == 14:\n            return 1\n        if t == 14:\n            return 1\n        if n == 15:\n            return 1\n        if t == 15:\n            return 1\n        if n == 16:\n            return 1\n        if t == 16:\n            return 1\n        if n == 17:\n            return 1\n        if t == 17:\n            return 1\n        if n == 18:\n            return 1\n        if t == 18:\n            return 1\n        if n == 19:\n            return 1\n        if t == 19:\n            return 1\n        if n ==",
      -2.462890625
    ],
    [
      "def get_nth_term(n, arith):\n    if n == 0:\n        return 1\n    if n == 1:\n        return arith\n    if n == 2:\n        return arith * 2\n    if n == 3:\n        return arith * 3\n    if n == 4:\n        return arith * 4\n    if n == 5:\n        return arith * 5\n    if n == 6:\n        return arith * 6\n    if n == 7:\n        return arith * 7\n    if n == 8:\n        return arith * 8\n    if n == 9:\n        return arith * 9\n    if n == 10:\n        return arith * 10\n    if n == 11:\n        return arith * 11\n    if n == 12:\n        return arith * 12\n    if n == 13:\n        return arith * 13\n    if n == 14:\n        return arith * 14\n    if n == 15:\n        return arith * 15\n    if n == 16:\n        return arith * 16\n    if n == 17:\n        return arith * 17\n    if n == 18:\n        return arith * 18\n    if n == 19:\n        return arith * 19\n    if n == 20:\n        return arith * 20\n    if n == 21:\n        return arith * 21\n    if n == 22:\n        return arith * 22\n    if n == 23:\n        return arith * 23\n    if n == 24:\n        return arith * 24\n    if n == 25:\n        return arith * 25\n    if n == 26:\n        return arith * 26\n    if n == 27:\n        return arith * 27\n    if n == 28:\n        return arith * 28\n    if n == 29:\n        return arith * 29\n    if n == 30:\n        return arith * 30\n    if n == 31:\n        return arith * 31\n    if n == 32:\n        return arith * 32\n    if n == 33:\n        return arith * 33\n    if n == 34:\n        return arith * 34\n    if n == 35:\n        return arith *",
      -2.46875
    ],
    [
      "# https://www.hackerrank.com/challenges/t-nth-term-of-arithmetic-progression\ndef t_nth_term(t, n):\n    '''\n    :type t: int\n    :type n: int\n    :rtype: int\n    '''\n\n    # This function finds the nth term of the arithmetic progression\n    # which is t times bigger than the starting point\n    # and which is less than the ending point.\n    # We assume that the ending point is not greater than the starting point.\n\n    # The first term of the progression is always 1\n    # The second term of the progression is always t\n    # The third term of the progression is always t*(t+1)/2\n    # The nth term of the progression is always t*(t+1)*...*(t+n-1)\n\n    # The following method is used to compute the nth term of the progression\n    # which is t times bigger than the starting point\n    # and which is less than the ending point.\n    # We assume that the ending point is not greater than the starting point.\n    def term(t, n):\n        if n == 0:\n            return 1\n        return t * term(t+1, n-1)\n\n    return term(t, n)\n\n\nif __name__ == '__main__':\n    print(t_nth_term(3, 3))\n    print(t_nth_term(4, 3))\n    print(t_nth_term(5, 3))",
      -2.52734375
    ],
    [
      "def get_term(n):\n    return int(n*(n+1)/2)\n\ndef get_term_recursive(n):\n    if n <= 0:\n        return 0\n    return get_term_recursive(n-1) + get_term(n-1)\n\ndef get_term_iterative(n):\n    return sum(get_term_iterative(n-1) for x in xrange(n))\n\nif __name__ == '__main__':\n    print get_term(5)\n    print get_term_recursive(5)\n    print get_term_iterative(5)",
      -2.662109375
    ],
    [
      "def get_nth_term(n, p):\n    \"\"\"\n    :type n: int\n    :type p: int\n    :rtype: int\n    \"\"\"\n    # base cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    # recursive case\n    return get_nth_term(n-1, p*n) + get_nth_term(n-1, p)\n\n\nif __name__ == \"__main__\":\n    print(get_nth_term(5, 1))\n    print(get_nth_term(5, 2))\n    print(get_nth_term(5, 3))\n    print(get_nth_term(5, 4))\n    print(get_nth_term(5, 5))\n    print(get_nth_term(5, 6))\n    print(get_nth_term(5, 7))\n    print(get_nth_term(5, 8))\n    print(get_nth_term(5, 9))\n    print(get_nth_term(5, 10))\n    print(get_nth_term(5, 11))\n    print(get_nth_term(5, 12))\n    print(get_nth_term(5, 13))\n    print(get_nth_term(5, 14))\n    print(get_nth_term(5, 15))\n    print(get_nth_term(5, 16))\n    print(get_nth_term(5, 17))\n    print(get_nth_term(5, 18))\n    print(get_nth_term(5, 19))\n    print(get_nth_term(5, 20))",
      -2.859375
    ],
    [
      "# https://github.com/kcwu/algorithms/blob/master/problem.py\n\n# Definition for an arithmetic progression.\n# class Sequence(object):\n#     def __init__(self, a, b):\n#         self.a = a\n#         self.b = b\n\nclass Solution(object):\n    def getTerm(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        if n < 0:\n            return 0\n        if t < 0 or n == 0:\n            return 1\n        if t == 0:\n            return 1\n        if n == 1:\n            return 1\n        if t == n:\n            return 1\n        if t == n - 1:\n            return 1\n        if t == n - 2:\n            return 1\n        if t == n - 3:\n            return 1\n        if t == n - 4:\n            return 1\n        if t == n - 5:\n            return 1\n        if t == n - 6:\n            return 1\n        if t == n - 7:\n            return 1\n        if t == n - 8:\n            return 1\n        if t == n - 9:\n            return 1\n        if t == n - 10:\n            return 1\n        if t == n - 11:\n            return 1\n        if t == n - 12:\n            return 1\n        if t == n - 13:\n            return 1\n        if t == n - 14:\n            return 1\n        if t == n - 15:\n            return 1\n        if t == n - 16:\n            return 1\n        if t == n - 17:\n            return 1\n        if t == n - 18:\n            return 1\n        if t == n - 19:\n            return 1\n        if t == n - 20:\n            return 1\n        if t == n - 21:\n            return 1\n        if t == n - 22:\n            return 1\n        if t == n - 23:\n            return 1\n        if t == n - 24:\n            return 1\n        if t == n - 25:\n            return 1\n        if t == n - 26:\n            return",
      -2.94921875
    ],
    [
      "#!/usr/bin/env python\n\nimport math\n\ndef get_progression(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []\n    for i in range(1, n+1):\n        term_list.append(i)\n    return term_list\n\ndef get_progression_n(n):\n    term_list = []",
      -3.009765625
    ],
    [
      "def get_term(n):\n    return (n - 2) / (n - 1)\n\ndef get_term_2(n):\n    return (n - 1) / (n - 1)\n\ndef get_term_3(n):\n    return n / (n - 1)\n\ndef get_term_4(n):\n    return n / (n - 1) / (n - 1)\n\ndef get_term_5(n):\n    return n / (n - 1) / (n - 1) / (n - 1)\n\ndef get_term_6(n):\n    return n / (n - 1) / (n - 1) / (n - 1) / (n - 1)\n\ndef get_term_7(n):\n    return n / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1)\n\ndef get_term_8(n):\n    return n / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1)\n\ndef get_term_9(n):\n    return n / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1)\n\ndef get_term_10(n):\n    return n / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1)\n\ndef get_term_11(n):\n    return n / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1)\n\ndef get_term_12(n):\n    return n / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n - 1) / (n",
      -4.046875
    ],
    [
      "# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\ndef arith_prog(n):\n    \"\"\"\n    >>> arith_prog(1)\n    0.0\n    >>> arith_prog(2)\n    1.0\n    >>> arith_prog(3)\n    1.414\n    >>> arith_prog(4)\n    2.828\n    >>> arith_prog(5)\n    3.606\n    >>> arith_prog(6)\n    4.242\n    >>> arith_prog(7)\n    4.906\n    >>> arith_prog(8)\n    5.607\n    >>> arith_prog(9)\n    6.285\n    >>> arith_prog(10)\n    7.062\n    >>> arith_prog(11)\n    7.814\n    >>> arith_prog(12)\n    8.571\n    >>> arith_prog(13)\n    9.304\n    >>> arith_prog(14)\n    10.061\n    >>> arith_prog(15)\n    10.814\n    >>> arith_prog(16)\n    11.571\n    >>> arith_prog(17)\n    12.285\n    >>> arith_prog(18)\n    13.061\n    >>> arith_prog(19)\n    13.814\n    >>> arith_prog(20)\n    14.571\n    >>> arith_prog(21)\n    15.304\n    >>> arith_prog(22)\n    16.061\n    >>> arith_prog(23)\n    16.814\n    >>> arith_prog(24)\n    17.571\n    >>> arith_prog(25)\n    18.285\n    >>> arith_prog(26)\n    19.061\n    >>> arith_prog(27)\n    19.814\n    >>> arith_prog(28)\n    20.571\n    >>> arith_prog(29)\n    21.",
      -4.8671875
    ],
    [
      "import unittest\nimport timeit\n\nclass Solution(object):\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.nums = nums\n        self.result = 0\n        self.cache = {}\n\n    def tnth_term(self, t, n):\n        \"\"\"\n        :type t: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if t < 1:\n            return 0\n        if t > n:\n            return 0\n        if t == n:\n            return self.result\n        if t in self.cache:\n            return self.cache[t]\n        self.cache[t] = self.tnth_term(t-1, n) + self.tnth_term(t-1, n-self.nums[t-1])\n        return self.cache[t]\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/t-nth-term-of-arithmetic-progression/solution/\n\nApproach #1: Dynamic Programming [Accepted]\nComplexity Analysis\nTime Complexity: O(n), where n is the number of terms in the progression.\nSpace Complexity: O(n).\n\n# 7ms 100%\nclass Solution {\n    public int tnth_term(int t, int n) {\n        if (t < 1) return 0;\n        if (t > n) return 0;\n        if (t == n) return 1;\n        if (t in cache) return cache[t];\n        int term = tnth_term(t - 1, n);\n        int term2 = tnth_term(t - 1, n - nums[t - 1]);\n        cache[t] = term + term2;\n        return cache[t];\n    }\n}\n\nApproach #2: Two Pointers [Accepted]",
      -4.98828125
    ],
    [
      "# https://leetcode.com/problems/t-nth-term-of-arithmetic-progression/\n\n# Definition for an arithmetic progression.\nclass ArithmeticProgression:\n    def __init__(self, a, b, n):\n        self.start = a\n        self.end = b\n        self.n = n\n\n    def __str__(self):\n        return \"{} -> {}, {} terms\".format(self.start, self.end, self.n)\n\n    def __repr__(self):\n        return self.__str__()\n\n\nclass Solution:\n    def tnthArithProg(self, a: int, b: int, n: int) -> str:\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] * a + dp[i - 2] * b\n\n        return \"{}, {} terms\".format(dp[-1], n)\n\n\nif __name__ == '__main__':\n    assert Solution().tnthArithProg(3, 4, 3) == \"3, 2 terms\"\n    assert Solution().tnthArithProg(3, 4, 4) == \"3, 1 term\"\n    assert Solution().tnthArithProg(3, 4, 5) == \"3, 0 terms\"\n    assert Solution().tnthArithProg(3, 4, 6) == \"3, -1 terms\"\n    assert Solution().tnthArithProg(3, 4, 7) == \"3, -2 terms\"\n    assert Solution().tnthArithProg(3, 4, 8) == \"3, -3 terms\"\n    assert Solution().tnthArithProg(3, 4, 9) == \"3, -4 terms\"",
      -5.17578125
    ],
    [
      "def tnth(n, ar):\n    res = 0\n    for i in range(n):\n        res += ar[i]\n    return res\n\n# Test Cases\n\nprint(tnth(3, [1,2,3]))\nprint(tnth(4, [1,2,3,4]))\nprint(tnth(5, [1,2,3,4,5]))\nprint(tnth(6, [1,2,3,4,5,6]))\nprint(tnth(7, [1,2,3,4,5,6,7]))",
      -5.5
    ],
    [
      "import time\nstart_time = time.time()\n\ndef find_term(n, t):\n    \"\"\"\n    n is the number of terms, t is the term\n    return the term\n    \"\"\"\n    if t == 0:\n        return 1\n    elif t == 1:\n        return n\n    elif t % 2 == 0:\n        return find_term(n, t / 2) + find_term(n, t / 2)\n    else:\n        return find_term(n, t / 2) + find_term(n, t / 2 + 1)\n\ndef find_term_recursive(n, t):\n    \"\"\"\n    n is the number of terms, t is the term\n    return the term\n    \"\"\"\n    if t == 0:\n        return 1\n    elif t == 1:\n        return n\n    elif t % 2 == 0:\n        return find_term_recursive(n, t / 2) + find_term_recursive(n, t / 2)\n    else:\n        return find_term_recursive(n, t / 2) + find_term_recursive(n, t / 2 + 1)\n\ndef find_term_recursive2(n, t):\n    \"\"\"\n    n is the number of terms, t is the term\n    return the term\n    \"\"\"\n    if t == 0:\n        return 1\n    elif t == 1:\n        return n\n    elif t % 2 == 0:\n        return find_term_recursive2(n, t / 2) + find_term_recursive2(n, t / 2)\n    else:\n        return find_term_recursive2(n, t / 2) + find_term_recursive2(n, t / 2 + 1)\n\ndef find_term_recursive3(n, t):\n    \"\"\"\n    n is the number of terms, t is the term\n    return the term\n    \"\"\"\n    if t == 0:\n        return 1\n    elif t == 1:\n        return n\n    elif t % 2 == 0:\n        return find_term_recursive3(n, t / 2) + find_term_recursive3(n",
      -5.7109375
    ],
    [
      "def tnth(n):\n    s = 0\n    for i in range(1, n):\n        s += i\n    return s\n\nprint(tnth(3))\n#>>> 2\nprint(tnth(4))\n#>>> 3\nprint(tnth(5))\n#>>> 4\nprint(tnth(6))\n#>>> 5\nprint(tnth(7))\n#>>> 6\nprint(tnth(8))\n#>>> 7\nprint(tnth(9))\n#>>> 8\nprint(tnth(10))\n#>>> 9\nprint(tnth(11))\n#>>> 10\nprint(tnth(12))\n#>>> 11\nprint(tnth(13))\n#>>> 12\nprint(tnth(14))\n#>>> 13\nprint(tnth(15))\n#>>> 14\nprint(tnth(16))\n#>>> 15\nprint(tnth(17))\n#>>> 16\nprint(tnth(18))\n#>>> 17\nprint(tnth(19))\n#>>> 18\nprint(tnth(20))\n#>>> 19\nprint(tnth(21))\n#>>> 20\nprint(tnth(22))\n#>>> 21\nprint(tnth(23))\n#>>> 22\nprint(tnth(24))\n#>>> 23\nprint(tnth(25))\n#>>> 24\nprint(tnth(26))\n#>>> 25\nprint(tnth(27))\n#>>> 26\nprint(tnth(28))\n#>>> 27\nprint(tnth(29))\n#>>> 28\nprint(tnth(30))\n#>>> 29\nprint(tnth(31))\n#>>> 30\nprint(tnth(32))\n#>>> 31\nprint(tnth(33))\n#>>> 32\nprint(tnth(34))\n#>>> 33\nprint(tnth(35))\n#>>> 34\nprint(tnth(36))\n#>>> 35\nprint(tnth(37))\n#>>> 36\nprint(tnth(38))\n#>>> 37\nprint(tnth(39))\n#>>> 38\nprint(tnth(40))\n#>>> 39\nprint(tnth(41))\n#>>> 40\nprint(tnth(42))\n#",
      -5.9375
    ],
    [
      "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def getTerm(self, n):\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            return 1\n        if n == 23:\n            return 1\n        if n == 24:\n            return 1\n        if n == 25:\n            return 1\n        if n == 26:\n            return 1\n        if n == 27:\n            return 1\n        if n == 28:\n            return 1\n        if n == 29:\n            return 1\n        if n == 30:\n            return 1\n        if n == 31:\n            return 1\n        if n == 32:\n            return 1\n        if n == 33:\n            return 1\n        if n == 34:\n            return 1\n        if n == 35:\n            return 1\n        if n == 36:\n            return 1\n        if n == 37:\n            return 1\n        if n == 38:\n            return 1\n        if n == 39:\n            return 1\n        if n == 40:\n            return 1\n        if n == 41:\n            return 1\n        if n == 42:",
      -6.2109375
    ],
    [
      "# Definition for arithemetic progression.\nclass ArithmeticProgression(object):\n    def __init__(self, n, a, b):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :type b: int\n        \"\"\"\n        self.n = n\n        self.a = a\n        self.b = b\n\n    def __str__(self):\n        return \"Arithmetic progression of %d terms\" % (self.n)\n\nclass Solution(object):\n    def getArithProg(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: ArithmeticProgression\n        \"\"\"\n        if n <= 1:\n            return ArithmeticProgression(1, 1, 1)\n        res = ArithmeticProgression(1, 1, 1)\n        for i in range(2, n+1):\n            res = self.calculate(res, i)\n        return res\n\n    def calculate(self, a, b):\n        if a.n == 1:\n            return ArithmeticProgression(a.a, a.b, b)\n        if b.n == 1:\n            return ArithmeticProgression(a.a, a.b, b)\n        if a.b == b.a:\n            return ArithmeticProgression(a.a, a.b, b)\n        return ArithmeticProgression(a.a, a.b, b)\n\n\nif __name__ == \"__main__\":\n    n = 1\n    n = 2\n    n = 3\n    n = 4\n    n = 5\n    n = 6\n    n = 7\n    n = 8\n    n = 9\n    n = 10\n    n = 11\n    n = 12\n    n = 13\n    n = 14\n    n = 15\n    n = 16\n    n = 17\n    n = 18\n    n = 19\n    n = 20\n    n = 21\n    n = 22\n    n = 23\n    n = 24\n    n = 25\n    n = 26\n    n = 27\n    n = 28\n    n = 29\n    n = 30\n    n = 31\n    n = 32\n    n = 33\n    n = 34",
      -6.65625
    ],
    [
      "class Solution(object):\n    def calc(self, t, n):\n        \"\"\"\n        :type t: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if t <= 0 or n <= 0:\n            return 0\n        if t == 1:\n            return n\n        if n == 1:\n            return t\n        if n == 2:\n            return t * t\n        if n == 3:\n            return t * t * t\n        if n == 4:\n            return t * t * t * t\n        if n == 5:\n            return t * t * t * t * t\n        if n == 6:\n            return t * t * t * t * t * t\n        if n == 7:\n            return t * t * t * t * t * t * t\n        if n == 8:\n            return t * t * t * t * t * t * t * t\n        if n == 9:\n            return t * t * t * t * t * t * t * t * t\n        if n == 10:\n            return t * t * t * t * t * t * t * t * t * t\n        if n == 11:\n            return t * t * t * t * t * t * t * t * t * t * t\n        if n == 12:\n            return t * t * t * t * t * t * t * t * t * t * t * t\n        if n == 13:\n            return t * t * t * t * t * t * t * t * t * t * t * t * t\n        if n == 14:\n            return t * t * t * t * t * t * t * t * t * t * t * t * t * t\n        if n == 15:\n            return t * t * t * t * t * t * t * t * t * t * t * t * t * t * t\n        if n == 16:\n            return t * t * t * t * t * t * t * t * t * t * t * t * t * t * t * t\n        if n == 17:\n            return t * t * t * t * t * t * t * t *",
      -6.80078125
    ],
    [
      "# I/O\n# Input:\n# t, n: int\n# arith_prog: string\n# Output:\n# t-nth term of arithmetic progression.\n\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    # @param {integer} t\n    # @param {integer} n\n    # @param {string} arith_prog\n    # @return {integer}\n    def getTerm(self, t, n, arith_prog):\n        if t == 0 or n == 0:\n            return 0\n        if t == 1:\n            return arith_prog[n - 1]\n        if n == 1:\n            return arith_prog[t - 1]\n        if t % 2 == 0:\n            return self.getTerm(t, n - 1, arith_prog) + self.getTerm(t - 1, n, arith_prog)\n        else:\n            return self.getTerm(t - 1, n, arith_prog) + self.getTerm(t, n - 1, arith_prog)\n\n    # @param {integer} t\n    # @param {integer} n\n    # @param {string} arith_prog\n    # @return {integer}\n    def getTerm(self, t, n, arith_prog):\n        if t == 0 or n == 0:\n            return 0\n        if t == 1:\n            return arith_prog[n - 1]\n        if n == 1:\n            return arith_prog[t - 1]\n        if t % 2 == 0:\n            return self.getTerm(t, n - 1, arith_prog) + self.getTerm(t - 1, n, arith_prog)\n        else:\n            return self.getTerm(t - 1, n, arith_prog) + self.getTerm(t, n - 1, arith_prog)",
      -6.83203125
    ],
    [
      "import unittest\n\nclass TestProblem(unittest.TestCase):\n    def test_t_nth_term(self):\n        self.assertEqual(t_nth_term(5, 1), 5)\n        self.assertEqual(t_nth_term(10, 2), 10)\n        self.assertEqual(t_nth_term(15, 3), 15)\n        self.assertEqual(t_nth_term(30, 4), 30)\n        self.assertEqual(t_nth_term(50, 5), 50)\n        self.assertEqual(t_nth_term(70, 6), 70)\n        self.assertEqual(t_nth_term(90, 7), 90)\n        self.assertEqual(t_nth_term(100, 8), 100)\n        self.assertEqual(t_nth_term(500, 10), 500)\n        self.assertEqual(t_nth_term(1000, 11), 1000)\n        self.assertEqual(t_nth_term(1500, 12), 1500)\n        self.assertEqual(t_nth_term(2000, 13), 2000)\n        self.assertEqual(t_nth_term(5000, 14), 5000)\n        self.assertEqual(t_nth_term(10000, 15), 10000)\n        self.assertEqual(t_nth_term(50000, 16), 50000)\n        self.assertEqual(t_nth_term(100000, 17), 100000)\n        self.assertEqual(t_nth_term(500000, 18), 500000)\n        self.assertEqual(t_nth_term(1000000, 19), 1000000)\n        self.assertEqual(t_nth_term(5000000, 20), 5000000)\n        self.assertEqual(t_nth_term(10000000, 21), 10000000)\n        self.assertEqual(t_nth_term(50000000, 22), 5000000000)\n        self.assertEqual(t_nth_term(100000000, 23), 10000000000)",
      -6.91015625
    ],
    [
      "# https://www.hackerrank.com/challenges/t-nth-term-of-arithmetic-progression/problem\n# https://www.hackerrank.com/challenges/t-nth-term-of-arithmetic-progression/submissions/code/9146449\n\ndef t_nth_term(t, n):\n    \"\"\"\n    :type t: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    \n    if t == 1:\n        return 1\n    \n    if t == 2:\n        return n\n    \n    if t == 3:\n        return n*n\n    \n    if t == 4:\n        return n*n*n\n    \n    if t == 5:\n        return n*n*n*n\n    \n    if t == 6:\n        return n*n*n*n*n\n    \n    if t == 7:\n        return n*n*n*n*n*n\n    \n    if t == 8:\n        return n*n*n*n*n*n*n\n    \n    if t == 9:\n        return n*n*n*n*n*n*n*n\n    \n    if t == 10:\n        return n*n*n*n*n*n*n*n*n\n    \n    if t == 11:\n        return n*n*n*n*n*n*n*n*n*n\n    \n    if t == 12:\n        return n*n*n*n*n*n*n*n*n*n*n\n    \n    if t == 13:\n        return n*n*n*n*n*n*n*n*n*n*n*n\n    \n    if t == 14:\n        return n*n*n*n*n*n*n*n*n*n*n*n*n\n    \n    if t == 15:\n        return n*n*n*n*n*n*n*n*n*n*n*n*n*n\n    \n    if t == 16:\n        return n*n*n",
      -7.58203125
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef get_progression():\n    \"\"\"\n    input:\n    3\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4\n    3 5\n    5 2\n    5 3\n    4",
      -7.89453125
    ],
    [
      "import timeit\n\ndef find_nth_term(t, n):\n    \"\"\"\n    :type t: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return t\n    if n == 2:\n        return t * t\n    if n == 3:\n        return t * t * t\n    if n == 4:\n        return t * t * t * t\n    if n == 5:\n        return t * t * t * t * t\n    if n == 6:\n        return t * t * t * t * t * t\n    if n == 7:\n        return t * t * t * t * t * t * t\n    if n == 8:\n        return t * t * t * t * t * t * t * t\n    if n == 9:\n        return t * t * t * t * t * t * t * t * t\n    if n == 10:\n        return t * t * t * t * t * t * t * t * t * t\n    if n == 11:\n        return t * t * t * t * t * t * t * t * t * t * t\n    if n == 12:\n        return t * t * t * t * t * t * t * t * t * t * t * t\n    if n == 13:\n        return t * t * t * t * t * t * t * t * t * t * t * t * t\n    if n == 14:\n        return t * t * t * t * t * t * t * t * t * t * t * t * t * t\n    if n == 15:\n        return t * t * t * t * t * t * t * t * t * t * t * t * t * t * t\n    if n == 16:\n        return t * t * t * t * t * t * t * t * t * t * t * t * t * t * t * t\n    if n == 17:\n        return t * t * t * t * t * t * t * t * t * t * t * t * t * t * t *",
      -8.171875
    ],
    [
      "import sys\n\n\ndef arith_progression(n):\n    \"\"\"\n    n is the total number of terms in the arithmetical progression.\n    Return the nth term of arithmetical progression.\n    \"\"\"\n    return 1\n    # TODO:\n    # 1. Can we use a list instead of a map?\n    # 2. Can we use a generator?\n    # 3. What if the total number of terms is not an integer?\n    # 4. What if the total number of terms is zero?\n    # 5. What if the total number of terms is negative?\n    # 6. What if the total number of terms is greater than the number of terms in the arithmetical progression?\n    # 7. What if the total number of terms is less than the number of terms in the arithmetical progression?\n    # 8. What if the total number of terms is greater than the number of terms in the arithmetical progression?\n    # 9. What if the total number of terms is less than the number of terms in the arithmetical progression?\n    # 10. What if the total number of terms is greater than the number of terms in the arithmetical progression?\n    # 11. What if the total number of terms is less than the number of terms in the arithmetical progression?\n    # 12. What if the total number of terms is greater than the number of terms in the arithmetical progression?\n    # 13. What if the total number of terms is less than the number of terms in the arithmetical progression?\n    # 14. What if the total number of terms is greater than the number of terms in the arithmetical progression?\n    # 15. What if the total number of terms is less than the number of terms in the arithmetical progression?\n    # 16. What if the total number of terms is greater than the number of terms in the arithmetical progression?\n    # 17. What if the total number of terms is less than the number of terms in the arithmetical progression?\n    # 18. What if the total number of terms is greater than the number of terms in the arithmetical progression?\n    # 19. What if the total number of terms is less than the number of terms in the arithmetical progression?",
      -8.1796875
    ],
    [
      "def t_nth(n, p):\n    return (p**n) / (p-1)\n\nif __name__ == '__main__':\n    assert t_nth(1, 2) == 1\n    assert t_nth(2, 2) == 2\n    assert t_nth(3, 2) == 4\n    assert t_nth(4, 2) == 8\n    assert t_nth(5, 2) == 16\n    assert t_nth(6, 2) == 32\n    assert t_nth(7, 2) == 64\n    assert t_nth(8, 2) == 128\n    assert t_nth(9, 2) == 256\n    assert t_nth(10, 2) == 512\n    assert t_nth(11, 2) == 1024\n    assert t_nth(12, 2) == 2048\n    assert t_nth(13, 2) == 4096\n    assert t_nth(14, 2) == 8192\n    assert t_nth(15, 2) == 16384\n    assert t_nth(16, 2) == 32768\n    assert t_nth(17, 2) == 65536\n    assert t_nth(18, 2) == 131072\n    assert t_nth(19, 2) == 262144\n    assert t_nth(20, 2) == 524288\n    assert t_nth(21, 2) == 1048576\n    assert t_nth(22, 2) == 2097152\n    assert t_nth(23, 2) == 4194304\n    assert t_nth(24, 2) == 8388608\n    assert t_nth(25, 2) == 16777216\n    assert t_nth(26, 2) == 33554432\n    assert t_nth(27, 2) == 67108864\n    assert t_nth(28, 2) == 134217728\n    assert t_nth(29, 2) == 268435456\n    assert t_nth(30, 2) == 536870912\n    assert t_nth(31, 2) == 1073741824\n    assert",
      -8.5625
    ],
    [
      "def t_nth_term(arithmetic_progression, n):\n    \"\"\"\n    :type arithmetic_progression: list[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return arithmetic_progression[0]\n    if n == 1:\n        return arithmetic_progression[1]\n    if n == 2:\n        return arithmetic_progression[2]\n    if n == 3:\n        return arithmetic_progression[3]\n    if n == 4:\n        return arithmetic_progression[4]\n    if n == 5:\n        return arithmetic_progression[5]\n    if n == 6:\n        return arithmetic_progression[6]\n    if n == 7:\n        return arithmetic_progression[7]\n    if n == 8:\n        return arithmetic_progression[8]\n    if n == 9:\n        return arithmetic_progression[9]\n    if n == 10:\n        return arithmetic_progression[10]\n    if n == 11:\n        return arithmetic_progression[11]\n    if n == 12:\n        return arithmetic_progression[12]\n    if n == 13:\n        return arithmetic_progression[13]\n    if n == 14:\n        return arithmetic_progression[14]\n    if n == 15:\n        return arithmetic_progression[15]\n    if n == 16:\n        return arithmetic_progression[16]\n    if n == 17:\n        return arithmetic_progression[17]\n    if n == 18:\n        return arithmetic_progression[18]\n    if n == 19:\n        return arithmetic_progression[19]\n    if n == 20:\n        return arithmetic_progression[20]\n    if n == 21:\n        return arithmetic_progression[21]\n    if n == 22:\n        return arithmetic_progression[22]\n    if n == 23:\n        return arithmetic_progression[23]\n    if n == 24:\n        return arithmetic_progression[24]\n    if n == 25:\n        return arithmetic_progression[25]\n    if n == 26:\n        return arithmetic_progression[26]\n    if",
      -8.8828125
    ],
    [
      "# Definition for an arithmetic progression.\n# class ArithmeticProgression:\n#     def __init__(self, a=0, b=0, n=0):\n#         self.a = a\n#         self.b = b\n#         self.n = n\n\nclass Solution:\n    def getProgression(self, n: int) -> int:\n        # base case\n        if n == 0:\n            return 1\n        # recursion case\n        return self.getProgression(n-1) + self.getProgression(n-2)\n\n# TESTS\nfor n, expected in [\n    (1, 1),\n    (2, 1),\n    (3, 2),\n    (4, 3),\n    (5, 5),\n    (6, 8),\n    (7, 13),\n    (8, 21),\n    (9, 34),\n    (10, 55),\n    (11, 89),\n    (12, 144),\n    (13, 233),\n    (14, 377),\n    (15, 610),\n    (16, 987),\n    (17, 1597),\n    (18, 2584),\n    (19, 4181),\n    (20, 6765),\n    (21, 10946),\n    (22, 17711),\n    (23, 28657),\n    (24, 46368),\n    (25, 75025),\n    (26, 121393),\n    (27, 196418),\n    (28, 317811),\n    (29, 514229),\n    (30, 832040),\n    (31, 1346269),\n    (32, 2178309),\n    (33, 3524578),\n    (34, 5702887),\n    (35, 9227465),\n    (36, 14930352),\n    (37, 24157817),\n    (38, 39088169),\n    (39, 64234861),\n    (40, 102334155),\n    (41, 165580141),\n    (42, 267914296),\n    (43, 433494437),\n    (44, 701408733),\n    (45, 11349",
      -9.203125
    ],
    [
      "# https://oj.leetcode.com/problems/factorial-trailing-zeroes/\n# \u4ece\u53f3\u5f80\u5de6\u627e\u7b2ct-nth term\n# https://oj.leetcode.com/problems/factorial-trailing-zeroes/discuss/82601/C-Python-solution-in-O(log(n))-time-with-explanation-and-comments\n\n# \u7528\u4e8e\u8ba1\u7b97t-nth term\u7684\u51fd\u6570\ndef trailing_zeroes(n, t):\n    if n == 0:\n        return 0\n    return trailing_zeroes(n - 1, t) + (1 if n % 2 == 1 else 0) * trailing_zeroes(n - 2, t)\n\n# \u627e\u5230t-nth term\u7684\u51fd\u6570\ndef trailing_zeroes_solution(n, t):\n    if n == 0:\n        return 0\n    return trailing_zeroes_solution(n - 1, t) + (1 if n % 2 == 1 else 0)\n\n# \u627e\u5230t-nth term\u7684\u7b97\u6cd5\ndef trailing_zeroes_solution_algorithm(n, t):\n    if n == 0:\n        return 0\n    return trailing_zeroes_solution_algorithm(n - 1, t) + (1 if n % 2 == 1 else 0)\n\nif __name__ == '__main__':\n    print trailing_zeroes(6, 5)\n    print trailing_zeroes_solution(6, 5)\n    print trailing_zeroes_solution_algorithm(6, 5)",
      -9.2265625
    ],
    [
      "from math import log10\n\n\ndef find_nth_term(arithmetic_progression, n):\n    \"\"\"\n    :param arithmetic_progression: The arithmetic progression to be found.\n    :param n: The term to be found.\n    :return: The term to be found.\n    \"\"\"\n    # Assume arithmetic progression is a list of integers\n    arithmetic_progression = list(arithmetic_progression)\n\n    # Calculate the nth term\n    term = arithmetic_progression[n]\n\n    # Calculate the remainder\n    remainder = arithmetic_progression[n + 1] - term\n\n    # Calculate the logarithm of the remainder\n    log_remainder = log10(remainder)\n\n    # Calculate the logarithm of the term\n    log_term = log10(term)\n\n    # Calculate the logarithm of the remainder\n    log_remainder = log10(remainder)\n\n    # Calculate the term by adding the remainder to the term\n    term += remainder\n\n    # Calculate the remainder by subtracting the term from the remainder\n    remainder -= term\n\n    # Calculate the logarithm of the remainder\n    log_remainder = log10(remainder)\n\n    # Calculate the logarithm of the term\n    log_term = log10(term)\n\n    # Calculate the logarithm of the remainder\n    log_remainder = log10(remainder)\n\n    # Calculate the remainder by subtracting the term from the remainder\n    remainder -= term\n\n    # Calculate the logarithm of the remainder\n    log_remainder = log10(remainder)\n\n    # Calculate the logarithm of the term\n    log_term = log10(term)\n\n    # Calculate the logarithm of the remainder\n    log_remainder = log10(remainder)\n\n    # Calculate the term by adding the remainder to the term\n    term += remainder\n\n    # Calculate the remainder by subtracting the term from the remainder\n    remainder -= term\n\n    # Calculate the logarithm of the remainder\n    log_remainder = log10(remainder",
      -10.046875
    ],
    [
      "from math import ceil\nfrom itertools import count\n\ndef arith_progression(n, a, b):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(ceil(b ** n / a))\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert 1 == arith_progression(1, 1, 2), \"Example\"\n    assert 2 == arith_progression(2, 1, 2), \"Example\"\n    assert 3 == arith_progression(3, 1, 2), \"Example\"\n    assert 5 == arith_progression(3, 1, 2), \"Example\"\n    assert 7 == arith_progression(3, 1, 2), \"Example\"\n    assert 17 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13 == arith_progression(3, 1, 2), \"Example\"\n    assert 13",
      -10.1953125
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# https://oj.leetcode.com/problems/factorial-trailing-zeros/\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def __str__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def findNthDigit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        digits = [0] * (n+1)\n        for i in range(1, n+1):\n            digits[i] = int(str(i)[-1])\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                digits[j] = digits[j]*10 + digits[j-1]\n        return digits[n]\n\n    def findNthDigit_1(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        digits = [0] * (n+1)\n        for i in range(1, n+1):\n            digits[i] = int(str(i)[-1])\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                digits[j] = digits[j]*10 + digits[j-1]\n        return digits[n]\n\n    def findNthDigit_2(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # https://leetcode.com/discuss/39862/beautiful-code-understand-and-implementation-of-find-nth-digit-in-arithmetic-progression/\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2",
      -10.4765625
    ],
    [
      "def tnth(t, n):\n    if t == 0:\n        return 0\n    else:\n        return (t*tnth(t-1, n)) - (n*tnth(t-2, n))\n\nprint(tnth(1, 3))\nprint(tnth(2, 3))\nprint(tnth(3, 3))\nprint(tnth(4, 3))\nprint(tnth(5, 3))\nprint(tnth(6, 3))\nprint(tnth(7, 3))\nprint(tnth(8, 3))\nprint(tnth(9, 3))\nprint(tnth(10, 3))\nprint(tnth(11, 3))\nprint(tnth(12, 3))\nprint(tnth(13, 3))\nprint(tnth(14, 3))\nprint(tnth(15, 3))\nprint(tnth(16, 3))\nprint(tnth(17, 3))\nprint(tnth(18, 3))\nprint(tnth(19, 3))\nprint(tnth(20, 3))\nprint(tnth(21, 3))\nprint(tnth(22, 3))\nprint(tnth(23, 3))\nprint(tnth(24, 3))\nprint(tnth(25, 3))\nprint(tnth(26, 3))\nprint(tnth(27, 3))\nprint(tnth(28, 3))\nprint(tnth(29, 3))\nprint(tnth(30, 3))\nprint(tnth(31, 3))\nprint(tnth(32, 3))\nprint(tnth(33, 3))\nprint(tnth(34, 3))\nprint(tnth(35, 3))\nprint(tnth(36, 3))\nprint(tnth(37, 3))\nprint(tnth(38, 3))\nprint(tnth(39, 3))\nprint(tnth(40, 3))\nprint(tnth(41, 3))\nprint(tnth(42, 3))\nprint(tnth(43, 3))\nprint(tnth(44, 3))\nprint(tnth(45, 3))\nprint(tnth(46,",
      -10.671875
    ],
    [
      "def find_t_nth_term(n, arith_progression):\n    \"\"\"\n    :type n: int\n    :type arith_progression: list[int]\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += arith_progression[i]\n    return total\n\n\nif __name__ == '__main__':\n    assert find_t_nth_term(1, [3, 2, 1]) == 3\n    assert find_t_nth_term(2, [3, 2, 1]) == 6\n    assert find_t_nth_term(3, [3, 2, 1]) == 10\n    assert find_t_nth_term(4, [3, 2, 1]) == 15\n    assert find_t_nth_term(5, [3, 2, 1]) == 21\n    assert find_t_nth_term(6, [3, 2, 1]) == 28\n    assert find_t_nth_term(7, [3, 2, 1]) == 36",
      -11.40625
    ],
    [
      "from math import ceil\n\ndef get_terms(n, p):\n    if p == 1:\n        return [1]\n    if p == 2:\n        return [1, 1]\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    return get_terms(n - 1, p) + get_terms(n - 1, p - 1)\n\ndef get_terms(n, p):\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if p == 1:\n        return [1, 1, 1]\n    if p == 2:\n        return [1, 1, 1, 1]\n    return get_terms(n - 1, p) + get_terms(n - 1, p - 1) + get_terms(n - 1, p - 2)\n\ndef get_terms(n, p):\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if p == 1:\n        return [1, 1, 1]\n    if p == 2:\n        return [1, 1, 1, 1]\n    return get_terms(n - 1, p) + get_terms(n - 1, p - 1) + get_terms(n - 1, p - 2) + get_terms(n - 1, p - 3)\n\ndef get_terms(n, p):\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if p == 1:\n        return [1, 1, 1]\n    if p == 2:\n        return [1, 1, 1, 1]\n    return get_terms(n - 1, p) + get_terms(n - 1, p - 1) + get_terms(n - 1, p - 2) + get_terms(n - 1, p - 3) + get_terms(n - 1, p - 4)\n\ndef",
      -11.4609375
    ],
    [
      "def find_term(n, t, a):\n    if n == 1:\n        return a[0]\n    else:\n        return (find_term(n - 1, t, a) + find_term(n - 1, t - 1, a)) % a[0]\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [1, 3, 2],\n        [1, 4, 3],\n        [1, 5, 4],\n        [1, 6, 5],\n        [1, 7, 6],\n        [1, 8, 7],\n        [1, 9, 8],\n        [1, 10, 9],\n        [1, 11, 10],\n        [1, 12, 11],\n        [1, 13, 12],\n        [1, 14, 13],\n        [1, 15, 14],\n        [1, 16, 15],\n        [1, 17, 16],\n        [1, 18, 17],\n        [1, 19, 18],\n        [1, 20, 19],\n        [1, 21, 20],\n        [1, 22, 21],\n        [1, 23, 22],\n        [1, 24, 23],\n        [1, 25, 24],\n        [1, 26, 25],\n        [1, 27, 26],\n        [1, 28, 27],\n        [1, 29, 28],\n        [1, 30, 29],\n        [1, 31, 30],\n        [1, 32, 31],\n        [1, 33, 32],\n        [1, 34, 33],\n        [1, 35, 34],\n        [1, 36, 35],\n        [1, 37, 36],\n        [1, 38, 37],\n        [1, 39, 38],\n        [1, 40, 39],\n        [1, 41, 40],\n        [1, 42, 41],\n        [1, 43, 42],\n        [1, 44, 43],\n        [1, 45, 44],\n        [1, 46, 45],\n        [1, 47, 46],\n        [1, 48, 47],\n        [1, 49, 48],\n        [1",
      -12.0546875
    ],
    [
      "from math import log\n\ndef nth_term(n, ar):\n    \"\"\"\n    :type n: int\n    :type ar: float\n    :rtype: float\n    \"\"\"\n    return 1.0 / ar * log(1.0 / ar)\n\nif __name__ == '__main__':\n    assert nth_term(1, 1) == 0.0\n    assert nth_term(2, 1) == 0.5\n    assert nth_term(3, 1) == 0.3333333333333333\n    assert nth_term(4, 1) == 0.25\n    assert nth_term(5, 1) == 0.2\n    assert nth_term(6, 1) == 0.16666666666666666\n    assert nth_term(7, 1) == 0.14285714285714286\n    assert nth_term(8, 1) == 0.125\n    assert nth_term(9, 1) == 0.11111111111111111\n    assert nth_term(10, 1) == 0.1\n    assert nth_term(11, 1) == 0.090909090909090909\n    assert nth_term(12, 1) == 0.08333333333333333\n    assert nth_term(13, 1) == 0.07692307692307692\n    assert nth_term(14, 1) == 0.06666666666666667\n    assert nth_term(15, 1) == 0.05555555555555556\n    assert nth_term(16, 1) == 0.04761904761904762\n    assert nth_term(17, 1) == 0.03636363636363636\n    assert nth_term(18, 1) == 0.02828571428571428\n    assert nth_term(19, 1) == 0.022448979591836735\n    assert nth_term(20, 1) == 0.016878687868786878\n    assert nth_term(21, 1) == 0.01285714285714286\n    assert nth_term(22, 1) == 0",
      -12.0625
    ],
    [
      "def get_progression(n):\n    \"\"\"\n    Input: n = 3\n    Output: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...\n    \"\"\"\n    progression = [0] * (n + 1)\n    progression[1] = 1\n    progression[2] = 3\n    for i in range(3, n + 1):\n        progression[i] = progression[i - 1] + progression[i - 2]\n    return progression\n\n\ndef test_get_progression():\n    assert get_progression(3) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...]\n\n\nif __name__ == \"__main__\":\n    test_get_progression()",
      -12.9375
    ],
    [
      "import math\n\ndef tnth_term(a, t, n):\n    \"\"\"\n    :type a: int\n    :type t: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return tnth_term_recursive(a, t, n, 0)\n\n\ndef tnth_term_recursive(a, t, n, term):\n    if n == 0:\n        return term\n    else:\n        return tnth_term_recursive(a, t, n - 1, term * a)\n\n\ndef tnth_term_recursive2(a, t, n):\n    \"\"\"\n    :type a: int\n    :type t: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return tnth_term_recursive2(a, t, n - 1) + tnth_term_recursive2(a, t, n)\n\n\nif __name__ == '__main__':\n    print tnth_term(2, 4, 3)\n    print tnth_term(2, 4, 4)\n    print tnth_term(2, 4, 5)\n    print tnth_term(2, 4, 6)",
      -15.9609375
    ],
    [
      "# Definition for an arithmetic progression.\n# class Progression:\n#     def __init__(self, a, b):\n#         self.start, self.end = a, b\n#         self.prog = [a]\n#         self.pre = 1\n#         self.post = 1\n#         self.n = 1\n#\n#\n# class Solution:\n#     # @param {integer} n\n#     # @param {Progression} p\n#     # @return {integer}\n#     def getTerm(self, n, p):\n#         if p.n > n:\n#             return 0\n#         elif p.n == n:\n#             return p.prog[n]\n#         elif p.n < n:\n#             return p.post * self.getTerm(n, p.pre) + p.prog[n - p.n]\n#\n#\n# def getTerm(n, p):\n#     return p.post * self.getTerm(n, p.pre) + p.prog[n - p.n]\n\nif __name__ == '__main__':\n    print(Solution().getTerm(2, Progression(1, 3)))",
      -16.78125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}