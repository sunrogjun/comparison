{
  "problem": {
    "task_id": "MBPP/102",
    "prompt": "Write a function to convert snake case string to camel case string.",
    "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
    "test_list": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ],
    "challenge_test_list": [],
    "problem_id": 91
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        s = S[::-1]\n        i = 0\n        while i < len(s):\n            if s[i] == '_':\n                i += 1\n            else:\n                if i > 0:\n                    s = s[0:i] +'' + s[i:]\n                    i += 1\n                else:\n                    s ='' + s[i:]\n                    i += 1\n        return s\n\n    def test(self):\n        assert self.camelCase('snake_case') == 'SnakeCase'\n        assert self.camelCase('_snake_case') == '_Snake_Case'\n        assert self.camelCase('snake_case_') == 'SnakeCase'\n        assert self.camelCase('snake_case_1') == 'SnakeCase1'\n\nif __name__ == '__main__':\n    Solution().test()",
      2.3671875
    ],
    [
      "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        return ''.join(c for c in S.lower() if c not in '_0123456789')\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.toCamelCase('snake_case')",
      2.080078125
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        import re\n        res = []\n        for i in range(len(S)):\n            if i == 0 or S[i - 1] == '_':\n                res.append(S[i])\n            else:\n                res.append(S[i].upper())\n        return ''.join(res)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.camelCase('snake_case')\n    print solution.camelCase('Snake_Case')\n    print solution.camelCase('snakeCase')\n    print solution.camelCase('snake_case_')\n    print solution.camelCase('snake_Case')\n    print solution.camelCase('snake_case_')",
      1.826171875
    ],
    [
      "class Solution:\n    # @param {string} str\n    # @return {string}\n    def snakeCase(self, str):\n        if str == '':\n            return ''\n        l = len(str)\n        ret = ''\n        for i in range(0, l):\n            if i == 0 or str[i - 1] in '_0123456789':\n                if i + 1 == l or str[i + 1] in '_0123456789':\n                    ret += str[i]\n                else:\n                    ret += str[i] + '_'\n            else:\n                ret += str[i]\n        return ret\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.snakeCase('snake_case'))\n    print(sol.snakeCase('snake_case_'))",
      1.615234375
    ],
    [
      "class Solution(object):\n    def camelCase(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        strs = ''.join(strs)\n        strs = strs.replace('_', '')\n        strs = strs.replace('-', '')\n        strs = strs.lower()\n        strs = strs.strip(' ')\n        strs = strs.replace('.', '')\n        strs = strs.replace('-','')\n        strs = strs.replace(' ', '-')\n        strs = strs.title()\n        strs = strs.split('-')\n        strs = [x.capitalize() for x in strs]\n        return ''.join(strs)\n\n\nif __name__ == '__main__':\n    assert Solution().camelCase(['snake', 'case']) == 'SnakeCase'",
      1.560546875
    ],
    [
      "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        res = ''\n        for i, c in enumerate(S):\n            if c.isupper():\n                res += ''.join(i for i, c in enumerate(S) if c.islower())\n            else:\n                res += c\n        return res",
      1.5419921875
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        s = S.lower()\n        i = 0\n        while i < len(s):\n            if s[i] == '_':\n                i += 1\n            else:\n                if i:\n                    s = s[:i] + s[i:].upper()\n                i += 1\n        return s",
      1.3671875
    ],
    [
      "class Solution(object):\n    def snakeCaseToCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        res = ''\n        for c in S:\n            if c == '_':\n                res +=''\n            else:\n                res += c\n        return res.strip()",
      1.326171875
    ],
    [
      "class Solution(object):\n    def snake_case_to_camel_case(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        words = str.split('_')\n        return ''.join(x.title() for x in words)",
      0.9814453125
    ],
    [
      "class Solution(object):\n    def snake_case_to_camel_case(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        camel_case = \"\"\n        for c in str:\n            if c == '_':\n                camel_case += c\n            else:\n                camel_case += c.title()\n        return camel_case\n\n\nclass Solution2(object):\n    def snake_case_to_camel_case(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        camel_case = \"\"\n        for c in str:\n            if c == '_':\n                camel_case += c\n            else:\n                camel_case += c.title()\n        return camel_case\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snake_case_to_camel_case(\"snake_case\")\n    s = Solution2()\n    print s.snake_case_to_camel_case(\"snake_case\")",
      0.1451416015625
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        s = s.upper()\n        res = []\n        for i in range(0, len(s)):\n            if s[i] == '_':\n                res.append(' ')\n            elif s[i] == '-':\n                res.append(' ')\n            elif s[i] == '.':\n                res.append(' ')\n            elif s[i] =='':\n                res.append(' ')\n            elif s[i] == '.':\n                res.append(' ')\n            elif s[i] == '_':\n                res.append(' ')\n            else:\n                res.append(s[i])\n        return \"\".join(res).strip()\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.snakeToCamel(\"SnakeCase\"))\n    print(s.snakeToCamel(\"SnakeCase\"))",
      0.13916015625
    ],
    [
      "class Solution:\n    def snake2Camel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        R = S[0]\n        for i in range(1, len(S)):\n            if S[i] == '_':\n                R ='' + R\n            else:\n                R = R + S[i]\n        return R\n\nif __name__ == '__main__':\n    print(Solution().snake2Camel('snake_case'))",
      -0.146484375
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(['_'.join(x[::-1]).lower() for x in S.split('_')])\n\nif __name__ == '__main__':\n    assert Solution().snakeToCamel('snake_case') == 'Snake_case'",
      -0.2344970703125
    ],
    [
      "class Solution:\n    # @param {string} str\n    # @return {string}\n    def snakeToCamel(self, s):\n        output = ''\n        if s.find('_') == -1:\n            return s\n        for i in range(len(s)):\n            if i == 0 or s[i-1]!= '_':\n                output += s[i]\n            else:\n                output += s[i].lower()\n        return output\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snakeToCamel('_snake_case')\n    print s.snakeToCamel('snake_case')\n    print s.snakeToCamel('snake_case_')\n    print s.snakeToCamel('_snakeCase')\n    print s.snakeToCamel('_snake_case_')\n    print s.snakeToCamel('_snakeCase_')",
      -0.263916015625
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return \"\"\n        s = S[0].lower()\n        c = \"\"\n        for i in range(1, len(S)):\n            if S[i].isupper():\n                c += S[i].lower()\n            elif S[i] =='':\n                c += \" \"\n            else:\n                c += S[i]\n                s += c[:-1]\n                c = \"\"\n        return s",
      -0.311279296875
    ],
    [
      "class Solution(object):\n    def snake2Camel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n\n        s = S[0].upper()\n        if len(S) == 1:\n            return s\n\n        for i in range(1, len(S)):\n            if S[i-1] == '_':\n                s += S[i].upper()\n            else:\n                s += S[i].lower()\n        return s\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snake2Camel('snake_case')\n    print s.snake2Camel('snake_case_')\n    print s.snake2Camel('Snake_Case')\n    print s.snake2Camel('snake_case_')",
      -0.7861328125
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.replace('_','')\n        S = S.replace('-', '')\n        S = S.title()\n        S = S.replace(' ', '')\n        S = S.split(' ')\n        return''.join(S)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def snake_case_to_camel_case(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.replace('_','')\n        result = []\n        for i in range(len(s)):\n            if i == 0 or s[i-1] in ['a', 'e', 'i', 'o', 'u']:\n                result.append(s[i])\n            else:\n                result.append(s[i].upper())\n        return ''.join(result)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def snake_case_to_camel_case(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.upper()\n        words = s.split('_')\n        words[0] = words[0][0].upper() + words[0][1:]\n        words[-1] = words[-1][0].upper() + words[-1][1:]\n        return ''.join(words)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.snake_case_to_camel_case(\"snake_case_string\")",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param {string} str\n    # @return {string}\n    def snakeToCamel(self, str):\n        str = str.split('_')\n        str = str[0].lower() + str[1:]\n        str = str.split('-')\n        str = str[0].lower() + str[1:]\n        str = str.split('-')\n        str = str[0].lower() + str[1:]\n        str = str.split('-')\n        str = str[0].lower() + str[1:]\n        return ''.join(str)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([x.title() if x.isupper() else x.lower() for x in s])",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.lower()\n        if not S:\n            return ''\n        s = ''\n        for i in range(len(S)):\n            if S[i] == '_':\n                s +=''\n            elif S[i] =='':\n                s += '_'\n            else:\n                s += S[i]\n        return s",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(x.title() if x.isupper() else x.lower() for x in S.split('_'))\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.snakeToCamel(\"snake_case_string\")",
      -0.85791015625
    ],
    [
      "class Solution:\n    def snakeCaseToCamelCase(self, S: str) -> str:\n        s = \"\"\n        for i, c in enumerate(S):\n            if c.isupper() and i > 0 and S[i - 1]!= '_':\n                s += \" \"\n            s += c.lower()\n        return s",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(x.title() if x.isupper() else x for x in S.split('_'))\n\nif __name__ == '__main__':\n    assert Solution().camelCase(\"snake_case\") == \"SnakeCase\"",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def snake_to_camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        s = s.lower()\n        s = s.replace('_','')\n        s = s.replace('-','')\n        s = s.replace(' ', '')\n        s = s.split('-')\n        s = [x.capitalize() for x in s]\n        return ''.join(s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.snake_to_camel('snake_case'))\n    print(s.snake_to_camel('snakeCase'))\n    print(s.snake_to_camel('snake_case_'))\n    print(s.snake_to_camel('snakeCase'))",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {string} str\n    # @return {string}\n    def toUpperCamelCase(self, str):\n        # Write your code here\n        if not str:\n            return ''\n        if str[0] == '_':\n            return ''\n        str = str[0].upper() + str[1:]\n        return str[0].upper() + str[1:]\n\n\na = Solution()\nprint(a.toUpperCamelCase('Snake_case'))\nprint(a.toUpperCamelCase('snakeCase'))\nprint(a.toUpperCamelCase('snake_case'))",
      -0.8583984375
    ],
    [
      "class Solution:\n    def snake_case_to_camel_case(self, s: str) -> str:\n        def snake_to_camel(s: str):\n            s_len = len(s)\n            result = \"\"\n            for i in range(0, s_len):\n                if s[i] == '_':\n                    result += s[i + 1].upper()\n                    i += 1\n                elif i > 0 and s[i] =='':\n                    result += s[i].upper()\n                else:\n                    result += s[i]\n            return result\n\n        return snake_to_camel(s)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return str\n        res = \"\"\n        for c in str:\n            if c.isupper():\n                if res and not res[-1].isupper():\n                    res += \"_\"\n                res += c.lower()\n            else:\n                res += c\n        return res",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        s = s.lower()\n        s = s.replace('_', '-')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        return ''.join(x[0].upper() + x[1:] for x in s.split('-'))\n\n# test\ns = Solution()\nprint(s.snake2Camel('Snake_Case'))\nprint(s.snake2Camel('SnakeCase'))\nprint(s.snake2Camel('snake_case'))\nprint(s.snake2Camel('SnakeCase_'))\nprint(s.snake2Camel('snake_case_'))\nprint(s.snake2Camel('snake_case'))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def snake_to_camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(word for word in s.split('_') if word)\n\nclass Solution(object):\n    def snake_to_camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(word.capitalize() if word[0]!= '_' else word for word in s.split('_'))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        \n        S = S.lower()\n        \n        res = ''\n        \n        for i in range(len(S)):\n            if S[i] == '_':\n                continue\n            elif S[i] =='':\n                res +=''\n            elif S[i] == '-':\n                res += '-'\n            else:\n                res += S[i].upper()\n        \n        return res",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(\n            [(s[0] + s[1:i].upper()) if i > 1 else s[0] for i in range(len(s))])\n\n    def snake2Camel2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.strip()\n        s = ''.join(s.split('_'))\n        return s.title()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        \n        s = s.replace('_','')\n        s = s.replace('-','')\n        \n        return ''.join(c.title() for c in s.split(' '))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def snakeCaseToCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if S == \"\":\n            return \"\"\n        S = S.replace(\"_\", \" \")\n        S = S.replace(\"-\", \" \")\n        S = S.replace(\" \", \"\")\n        return \"\".join([x.title() for x in S.split(\"-\")]).lower()\n\n\nif __name__ == \"__main__\":\n    print Solution().snakeCaseToCamelCase(\"snake_case\")",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        L = S.split('_')\n        L = [x.title() for x in L]\n        return ''.join(L)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        s = str.title()\n        s = s.replace('_', '-')\n        s = s.replace(' ', '')\n        return s",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        s = S.lower()\n        s = s.replace('_','')\n        s = s.replace('-', '')\n        s = s.replace(' ', '')\n        s = s.replace('.', '')\n        s = s.replace('-', '')\n        s = s.replace('.', '')\n        s = s.replace('(', '')\n        s = s.replace(')', '')\n        s = s.replace(' ', '')\n        return s\n\n\nif __name__ == '__main__':\n    print Solution().snakeToCamel('snake_case')\n    print Solution().snakeToCamel('snakeCase')\n    print Solution().snakeToCamel('snake_case')",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        def camel_case(s):\n            if s == '':\n                return ''\n            return s[0].lower() + camel_case(s[1:])\n\n        return camel_case(s)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('snake_case_') == 'SnakeCase'\n    assert s.camelCase('snake_case_1') == 'SnakeCase1'",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(w.title() for w in S.split('_'))\n\n\nif __name__ == '__main__':\n    assert Solution().camelCase('snake_case') == 'SnakeCase'",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.title()\n        S = S.replace('_', '')\n        return ''.join([x[0].upper() + x[1:].lower() for x in S.split('-')])\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.camelCase('snake_case')",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        \n        S = S.lower()\n        \n        S = S.replace('_', '-')\n        S = S.replace(' ', '')\n        \n        S = S.split('-')\n        \n        return ''.join([x[0].upper()+x[1:] for x in S])\n\nif __name__ == '__main__':\n    print Solution().snakeToCamel('snake-case')\n    print Solution().snakeToCamel('snakeCase')\n    print Solution().snakeToCamel('snake_case')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def toCamelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n\n        s = s.lower()\n        s = s.replace('_', '')\n        s = s.replace('-', '')\n\n        i = 0\n        while i < len(s):\n            if s[i] == '.':\n                s = s[:i] +'' + s[i+1:]\n                break\n            if s[i]!='':\n                s = s[:i] + s[i].upper() + s[i+1:]\n                break\n            i += 1\n\n        return s\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.toCamelCase('snake_case')",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        words = s.split(\"_\")\n        words = [word.title() for word in words]\n        return \"\".join(words)\n\nif __name__ == \"__main__\":\n    assert Solution().camelCase(\"snake_case\") == \"SnakeCase\"\n    assert Solution().camelCase(\"snakeCase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"SnakeCase\") == \"SnakeCase\"\n    assert Solution().camelCase(\"\") == \"\"",
      -0.86083984375
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        def to_camel(s):\n            s = ''.join(x.capitalize() if x.isupper() else x.lower() for x in s)\n            s = re.sub('[A-Z]', lambda x: x.group(0).lower(), s)\n            s = re.sub('[^a-zA-Z]', lambda x: x.group(0).upper(), s)\n            return s\n\n        def camel_case(s):\n            if s[0] == '_':\n                s = s[1:]\n            return to_camel(s)\n\n        return ''.join(camel_case(x) for x in S.split('_'))\n\n\nif __name__ == '__main__':\n    assert Solution().camelCase('snake_case') == 'SnakeCase'\n    assert Solution().camelCase('snakeCase') == 'SnakeCase'\n    assert Solution().camelCase('snake_case_') == 'SnakeCase'\n    assert Solution().camelCase('snakeCase_') == 'SnakeCase'\n    assert Solution().camelCase('snake_case_1') == 'SnakeCase1'\n    assert Solution().camelCase('snakeCase_1') == 'SnakeCase1'\n    assert Solution().camelCase('snake_case_1_') == 'SnakeCase1'\n    assert Solution().camelCase('snakeCase_1_') == 'SnakeCase1'\n    assert Solution().camelCase('_snake_case') == '_Snake_Case'\n    assert Solution().camelCase('_snakeCase') == '_Snake_Case'\n    assert Solution().camelCase('_snake_case_') == '_Snake_Case'\n    assert Solution().camelCase('_snakeCase_') == '_Snake_Case'\n    assert Solution().camelCase('_snake_case_1') == '_Snake_Case1'\n    assert Solution().camelCase('_snakeCase_1') == '_Snake_Case1'",
      -1.25
    ],
    [
      "class Solution(object):\n    def snake_to_camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        if s == None or len(s) == 0:\n            return ''\n        \n        result = ''\n        for i in range(0, len(s)):\n            if s[i] == '_':\n                result += s[i+1].upper()\n            else:\n                result += s[i].upper()\n        return result",
      -1.3642578125
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.replace('_','')\n        S = S.replace('-','')\n        return ''.join(x.title() for x in S.split())\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.camelCase('snake_case'))\n    print(s.camelCase('SnakeCase'))\n    print(s.camelCase('snake case'))\n    print(s.camelCase('snake Case'))\n    print(s.camelCase('Snake Case'))\n    print(s.camelCase('Snake Case'))\n    print(s.camelCase('Snake Case'))\n    print(s.camelCase('Snake Case'))\n    print(s.camelCase('Snake Case'))",
      -1.3857421875
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.lower()\n        res = ''\n        for i in xrange(len(S)):\n            if S[i] =='':\n                res += '_'\n            else:\n                res += S[i]\n        return res\n\nif __name__ == '__main__':\n    print Solution().camelCase('snake_case')\n    print Solution().camelCase('snake_case_')\n    print Solution().camelCase('snake_case_')\n    print Solution().camelCase('snakeCase')\n    print Solution().camelCase('snakeCase')\n    print Solution().camelCase('snakeCase')\n    print Solution().camelCase('SnakeCase')\n    print Solution().camelCase('SnakeCase')\n    print Solution().camelCase('snake_case')\n    print Solution().camelCase('snake_case_')",
      -1.5556640625
    ],
    [
      "import re\n\n\ndef snake_case_to_camel_case(snake_case):\n    \"\"\"\n    Convert snake case string to camel case string.\n    :type snake_case: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r\"[_]([a-z])\", lambda x: x.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    assert snake_case_to_camel_case(\"snake_case\") == \"SnakeCase\"\n    assert snake_case_to_camel_case(\"snake_case_\") == \"SnakeCase\"\n    assert snake_case_to_camel_case(\"snake_Case\") == \"SnakeCase\"\n    assert snake_case_to_camel_case(\"_\") == \"_\"\n    assert snake_case_to_camel_case(\"\") == \"\"",
      -1.6015625
    ],
    [
      "class Solution(object):\n    def snake_to_camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        words = []\n        for word in s.split('_'):\n            if word:\n                words.append(word.title())\n            else:\n                words.append('')\n        return ''.join(words)\n\n\nif __name__ == '__main__':\n    assert Solution().snake_to_camel('snake_case') == 'Snake_Case'\n    assert Solution().snake_to_camel('snake_case_') == 'Snake_Case'\n    assert Solution().snake_to_camel('snake_case__') == 'Snake_Case'\n    assert Solution().snake_to_camel('snake_case_123') == 'Snake_Case123'\n    assert Solution().snake_to_camel('snake_case_123_') == 'Snake_Case123'\n    assert Solution().snake_to_camel('snake_case_123_') == 'Snake_Case123'\n    assert Solution().snake_to_camel('snake_case_123_') == 'Snake_Case123'\n    assert Solution().snake_to_camel('snake_case_123_') == 'Snake_Case123'\n    assert Solution().snake_to_camel('snake_case_123_') == 'Snake_Case123'",
      -1.6611328125
    ],
    [
      "class Solution(object):\n    def snakeCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        def camelCase(s):\n            return ''.join(w[0].upper() + w[1:] if w else w for w in s.split('_'))\n        return camelCase(S)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.snakeCase('snake_case'))\n    print(sol.snakeCase('snakeCase'))\n    print(sol.snakeCase('snake_case_'))",
      -2.10546875
    ],
    [
      "import re\n\n\nclass Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        result = ''\n        for word in re.split('[-_]', S):\n            result += word[0].upper() + word[1:]\n        return result\n\n\ndef main():\n    solution = Solution()\n    print solution.snakeToCamel('snake_case')\n    print solution.snakeToCamel('snake_case_')\n    print solution.snakeToCamel('SnakeCase')\n    print solution.snakeToCamel('SnakeCase_')\n    print solution.snakeToCamel('snake_case_1')\n    print solution.snakeToCamel('snake_case_1_')\n\n\nif __name__ == '__main__':\n    main()",
      -2.333984375
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if S is None or not S:\n            return ''\n\n        # the idea is to convert the first letter to lowercase and\n        # the rest to uppercase\n        first_letter = S[0].lower()\n        rest_letters = S[1:]\n\n        return first_letter + rest_letters.replace('_','').title()\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.camelCase(param_1)",
      -2.822265625
    ],
    [
      "class Solution(object):\n    def toUpperCamelCase(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        s = strs[0]\n        if len(s) == 1:\n            return s.upper()\n        for i, c in enumerate(s):\n            if c.isupper():\n                s = s[:i] + s[i].lower() + s[i+1:]\n        return s\n\n    def toLowerCamelCase(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        s = strs[0]\n        if len(s) == 1:\n            return s.lower()\n        for i, c in enumerate(s):\n            if c.islower():\n                s = s[:i] + c.upper() + s[i+1:]\n        return s\n\n    def toCamelCase(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        return ''.join(map(lambda s: s[0].upper() + s[1:].lower(), strs))",
      -3.27734375
    ],
    [
      "class Solution:\n    def snake2Camel(self, S: str) -> str:\n        n = len(S)\n        if n == 0:\n            return ''\n        c = 0\n        s = ''\n        for i in range(n):\n            if S[i] == '_':\n                c += 1\n            else:\n                s += S[i]\n                if c > 0:\n                    s += '_' * c\n                    c = 0\n        return s\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.snake2Camel('snake_case'))\n    print(sol.snake2Camel('snake_case_1'))\n    print(sol.snake2Camel('snake_case_2'))\n    print(sol.snake2Camel('snake_case_3'))\n    print(sol.snake2Camel('snake_case_4'))\n    print(sol.snake2Camel('snake_case_5'))",
      -3.341796875
    ],
    [
      "import re\n\n\ndef snake_to_camel(snake):\n    s1 = re.compile('[A-Z]+')\n    s2 = re.compile('[a-z]+')\n    s3 = re.compile('[0-9]+')\n    m = s1.match(snake)\n    if m is not None:\n        return s2.sub(lambda x: x.group(0).upper(), m.group(0))\n    else:\n        return snake\n\n\nif __name__ == '__main__':\n    snake = 'testString'\n    print snake_to_camel(snake)",
      -3.36328125
    ],
    [
      "class Solution(object):\n    def snake2Camel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        # http://www.programcreek.com/2012/12/leetcode-snake-case-to-camel-case-python/\n        return ''.join(x.title() if x.isupper() else x.lower() for x in S.split('_'))\n\n    def snake2Camel_2(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(x.title() if x.isupper() else x.lower() for x in S.split('_'))\n\n    def snake2Camel_3(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(x.title() if x.isupper() else x.lower() for x in S.split('_'))\n\n\nif __name__ == '__main__':\n    print Solution().snake2Camel('snake_case')",
      -3.544921875
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        L = S.split('_')\n        for i in range(len(L)):\n            if i > 0 and L[i][0] == '_':\n                L[i] ='' + L[i][1:]\n        return ''.join(L).title()\n\nif __name__ == '__main__':\n    print Solution().snakeToCamel('snake_case')\n    print Solution().snakeToCamel('Snake_case')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case_')\n    print Solution().snakeToCamel('snake_case",
      -3.611328125
    ],
    [
      "class Solution:\n    # @param {string} str\n    # @return {string}\n    def toUpperCamelCase(self, str):\n        if len(str) == 0:\n            return \"\"\n        if str[0] == '_':\n            return self.toUpperCamelCase(str[1:])\n        if str[0] == '-':\n            return self.toUpperCamelCase(str[1:])\n        if str[0] =='':\n            return self.toUpperCamelCase(str[1:])\n        if str[0] == '.':\n            return self.toUpperCamelCase(str[1:])\n        return str[0].upper() + self.toUpperCamelCase(str[1:])",
      -3.693359375
    ],
    [
      "class Solution:\n    def snakeCaseToCamelCase(self, S: str) -> str:\n        if not S:\n            return ''\n        S = S.lower()\n        if not S[0].isupper():\n            return ''.join(x.title() for x in S.split('_'))\n        return ''.join(x.title() for x in S.split('_'))\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.snakeCaseToCamelCase('snakeCase'))\n    print(s.snakeCaseToCamelCase('snake_case'))\n    print(s.snakeCaseToCamelCase('snake_case_'))\n    print(s.snakeCaseToCamelCase('snake_case__'))\n    print(s.snakeCaseToCamelCase('snake_case__'))\n    print(s.snakeCaseToCamelCase('snake_case_'))",
      -4.26953125
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return S\n        S = S.title()\n        res = []\n        for i in range(1, len(S)):\n            if S[i-1] == '_':\n                res.append(S[i])\n            else:\n                res.append(S[i-1] + S[i])\n        return \"\".join(res)\n\n\nif __name__ == \"__main__\":\n    assert Solution().camelCase(\"hello_world\") == \"HelloWorld\"\n    assert Solution().camelCase(\"_hello_world\") == \"HelloWorld\"\n    assert Solution().camelCase(\"_hello_world_\") == \"HelloWorld\"\n    assert Solution().camelCase(\"\") == \"\"\n    assert Solution().camelCase(\"_\") == \"_\"\n    assert Solution().camelCase(\"_hello\") == \"_Hello\"\n    assert Solution().camelCase(\"_hello_world\") == \"_HelloWorld\"\n    assert Solution().camelCase(\"hello_world\") == \"HelloWorld\"",
      -4.38671875
    ],
    [
      "class Solution:\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i, c in enumerate(S):\n            if i == 0:\n                res += c.upper()\n            else:\n                res += c.lower()\n        return res\n\nif __name__ == \"__main__\":\n    assert Solution().camelCase(\"hello_world\") == \"HelloWorld\"\n    assert Solution().camelCase(\"hello_world_\") == \"HelloWorld\"\n    assert Solution().camelCase(\"hello_world_1\") == \"HelloWorld\"\n    assert Solution().camelCase(\"hello_world_1_2\") == \"HelloWorld1\"\n    assert Solution().camelCase(\"hello_world_1_2_3\") == \"HelloWorld1\"\n    assert Solution().camelCase(\"hello_world_1_2_3_4\") == \"HelloWorld1\"\n    assert Solution().camelCase(\"hello_world_1_2_3_4_5\") == \"HelloWorld1\"\n    assert Solution().camelCase(\"hello_world_1_2_3_4_5_6\") == \"HelloWorld1\"\n    assert Solution().camelCase(\"hello_world_1_2_3_4_5_6_7\") == \"HelloWorld1\"\n    assert Solution().camelCase(\"hello_world_1_2_3_4_5_6_7_8\") == \"HelloWorld1\"\n    assert Solution().camelCase(\"hello_world_1_2_3_4_5_6_7_8_9\") == \"HelloWorld1\"\n    assert Solution().camelCase(\"hello_world_1_2_3_4_5_6_7_8_9_0\") == \"HelloWorld1\"",
      -4.48046875
    ],
    [
      "class Solution:\n    def snakeCaseToCamelCase(self, S: str) -> str:\n        if not S:\n            return ''\n        res = ''\n        i = 0\n        while i < len(S):\n            if S[i] == '_':\n                res +=''\n                i += 1\n                continue\n            if i > 0 and S[i-1] == '_':\n                res +=''\n            res += S[i]\n            i += 1\n        return res\n\nprint(Solution().snakeCaseToCamelCase('_snake_case'))\nprint(Solution().snakeCaseToCamelCase('_Snake_Case'))\nprint(Solution().snakeCaseToCamelCase('_Snake_Case_'))\nprint(Solution().snakeCaseToCamelCase('_Snake_Case'))\nprint(Solution().snakeCaseToCamelCase('_snake_case_'))\nprint(Solution().snakeCaseToCamelCase('_snake_case'))\nprint(Solution().snakeCaseToCamelCase('_snake_case_'))",
      -4.53125
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        for i in range(0, len(s)):\n            if i > 0 and s[i - 1] == '_':\n                result += s[i]\n            elif i < len(s) - 1 and s[i] == '_':\n                result += s[i + 1]\n            else:\n                result += s[i]\n        return result\n\n\nif __name__ == \"__main__\":\n    s = \"ThisIs_a_snake_case\"\n    print Solution().snakeToCamel(s)",
      -4.65625
    ],
    [
      "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return ''\n        \n        res = ''\n        prev_char = s[0]\n        for c in s[1:]:\n            if c.isupper() and prev_char.islower():\n                res += '_' + c.lower()\n            else:\n                res += c.lower()\n            prev_char = c\n        return res",
      -4.76953125
    ],
    [
      "class Solution:\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n\n        S = S.lower()\n        S = S.replace('_', '-')\n        S = S.replace(' ', '-')\n\n        out = []\n        for c in S:\n            if c.isupper():\n                out.append(c.lower())\n            else:\n                out.append(c)\n\n        return ''.join(out)\n\nif __name__ == '__main__':\n    assert Solution().snakeToCamel('snake-case') == 'SnakeCase'",
      -4.8359375
    ],
    [
      "class Solution(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return \"\"\n        s = list()\n        for i, c in enumerate(str):\n            if i == 0:\n                s.append(c.upper())\n            else:\n                s.append(c.lower())\n        return \"\".join(s)\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print solution.toUpperCamelCase(\"snake_case\")\n    print solution.toUpperCamelCase(\"Snake_Case\")\n    print solution.toUpperCamelCase(\"snake_case_\")\n    print solution.toUpperCamelCase(\"snake_case_\")\n    print solution.toUpperCamelCase(\"snake_case_\")\n    print solution.toUpperCamelCase(\"snake_case_\")\n    print solution.toUpperCamelCase(\"snake_case_\")\n    print solution.toUpperCamelCase(\"snake_case_\")",
      -4.875
    ],
    [
      "class Solution:\n    # @param {string} str\n    # @return {string}\n    def toUpperCamelCase(self, str):\n        if len(str) == 0:\n            return ''\n        result = ''\n        if str[0] == '_':\n            result +=''\n        for i, c in enumerate(str):\n            if c == '_':\n                result +=''\n            else:\n                result += c.upper()\n            if i == len(str) - 1:\n                result +=''\n        return result\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.toUpperCamelCase('_snake_case'))\n    print(s.toUpperCamelCase('snakeCase'))\n    print(s.toUpperCamelCase('snake_case'))",
      -5.0546875
    ],
    [
      "class Solution(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return str\n        if str[0] == '_':\n            return str[1:]\n        return self.toUpperCamelCase(str[0]) + str[1:]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.toUpperCamelCase('snake_case_string'))\n    print(s.toUpperCamelCase('snakeCaseString'))\n    print(s.toUpperCamelCase('snake_case_string_'))\n    print(s.toUpperCamelCase('Snake_Case_String'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print(s.toUpperCamelCase('_'))\n    print",
      -5.109375
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        s = \"\"\n        for c in S:\n            if c.isupper():\n                s += \" \" + c.lower()\n            else:\n                s += c\n        return s\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print sol.camelCase(\"snake_case\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"snake_case_\")\n    print sol.camelCase(\"sn",
      -5.11328125
    ],
    [
      "class Solution(object):\n    def snakeCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return ''.join(map(lambda x: x.title() if x.isupper() else x.lower(), S.split('_')))\n\n\nif __name__ == '__main__':\n    print Solution().snakeCase('snake_case')\n    print Solution().snakeCase('snakeCase')\n    print Solution().snakeCase('snakeCase_')\n    print Solution().snakeCase('snakeCase')\n    print Solution().snakeCase('snake_case_')\n    print Solution().snakeCase('snakeCase')\n    print Solution().snakeCase('snakeCase_')\n    print Solution().snakeCase('snakeCase')\n    print Solution().snakeCase('snakeCase_')\n    print Solution().snakeCase('snakeCase')",
      -5.15234375
    ],
    [
      "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        s = s.replace('_', '')\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        return ''.join(x[0].upper() + x[1:] for x in s.split('-'))",
      -5.19921875
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return \"\"\n\n        r = []\n        for c in S:\n            if c.isupper():\n                r.append(c.lower())\n            elif c.islower():\n                r.append(c.upper())\n            else:\n                r.append(c)\n        return \"\".join(r)\n\n\nif __name__ == \"__main__\":\n    assert Solution().snakeToCamel(\"snake_case\") == \"snakeCase\"\n    assert Solution().snakeToCamel(\"snake_case_\") == \"snakeCase\"\n    assert Solution().snakeToCamel(\"snakeCase\") == \"snakeCase\"",
      -5.20703125
    ],
    [
      "class Solution:\n    # @param {string} S\n    # @return {string}\n\n    def camelCase(self, S):\n        if len(S) == 0:\n            return ''\n        if S[0] == '_':\n            return ''\n        if len(S) == 1:\n            return S\n        if S[0] == '_':\n            return ''\n        res = []\n        for c in S:\n            if c.isupper():\n                res.append(c.lower())\n            else:\n                res.append(c)\n        return ''.join(res)\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.camelCase('_snake_case'))\n    print(s.camelCase('_snake_case_'))\n    print(s.camelCase('_snake_case_'))\n    print(s.camelCase('_snake_case'))\n    print(s.camelCase('snake_case'))\n    print(s.camelCase('snake_case_'))\n    print(s.camelCase('snake_case_'))\n    print(s.camelCase('snake_case'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('_'))\n    print(s.camelCase('",
      -5.26953125
    ],
    [
      "class Solution(object):\n    def snakeCase2CamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        result = ''\n        for i in range(0, len(S)):\n            if S[i] in ['_', '-']:\n                result += '-'\n            elif S[i].isupper():\n                result += S[i].lower()\n            else:\n                result += S[i].upper()\n        return result\n\n\nif __name__ == '__main__':\n    assert Solution().snakeCase2CamelCase('snake-case') == 'SnakeCase'\n    assert Solution().snakeCase2CamelCase('snakeCase') == 'SnakeCase'\n    assert Solution().snakeCase2CamelCase('snake_case') == 'SnakeCase'\n    assert Solution().snakeCase2CamelCase('snake-case-') == 'SnakeCase'\n    assert Solution().snakeCase2CamelCase('snake-case-') == 'SnakeCase'\n    assert Solution().snakeCase2CamelCase('_snake-case') == 'SnakeCase'\n    assert Solution().snakeCase2CamelCase('snake-case_') == 'SnakeCase'\n    assert Solution().snakeCase2CamelCase('snake_case') == 'SnakeCase'",
      -5.33203125
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        L = list(S)\n        for i in range(len(L)):\n            if L[i] == '_':\n                L[i] =''\n            elif L[i].isalpha():\n                L[i] = L[i].lower()\n        return ''.join(L)\n\n\nif __name__ == '__main__':\n    assert Solution().snakeToCamel('_snake_case') == 'SnakeCase'\n    assert Solution().snakeToCamel('snake_case') == 'SnakeCase'\n    assert Solution().snakeToCamel('snake_case_') == 'SnakeCase'\n    assert Solution().snakeToCamel('_snake_case') == 'SnakeCase'",
      -5.859375
    ],
    [
      "class Solution(object):\n    def snakeCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for c in s:\n            if c.isupper():\n                res += c.lower()\n            else:\n                res += c\n        return res\n\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for c in s:\n            if c.isupper():\n                res += c.lower()\n            else:\n                res += c.upper()\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.snakeCase('snakeCase') == 'SnakeCase'\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('snakeCase') == 'SnakeCase'\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('snakeCase') == 'SnakeCase'\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('snakeCase') == 'SnakeCase'\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('snakeCase') == 'SnakeCase'\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('snakeCase') == 'SnakeCase'\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('snakeCase') == 'SnakeCase'\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('snakeCase') == 'SnakeCase'\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('snakeCase') == 'SnakeCase'\n    assert s.camelCase('snake_case') == 'SnakeCase'\n    assert s.camelCase('sn",
      -6.3984375
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        \n        if not S:\n            return ''\n        \n        result = ''\n        for i in range(len(S)):\n            if S[i] in 'aAeEiIoOuU':\n                result += S[i]\n            else:\n                result += S[i].upper()\n                if i < len(S)-1 and S[i+1] in 'aAeEiIoOuU':\n                    result += S[i+1]\n                else:\n                    result += S[i+1].upper()\n        \n        return result",
      -6.54296875
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        S = S.lower()\n        result = ''\n        for i in xrange(len(S)):\n            if S[i] in [' ', '-']:\n                result += '-'\n                continue\n            if S[i] in ['.', '_']:\n                result += '-'\n            else:\n                result += S[i].upper()\n        return result\n\n\ndef main():\n    s = Solution()\n    print s.camelCase('snake_case')\n    print s.camelCase('snake case')\n    print s.camelCase('snake case_')\n    print s.camelCase('snake case_')\n    print s.camelCase('snake case_test')\n    print s.camelCase('snake case_test')\n    print s.camelCase('snake_Case')\n    print s.camelCase('snake_Case')\n    print s.camelCase('snake_case_')\n    print s.camelCase('snake_case_')\n    print s.camelCase('snake_case_test')\n    print s.camelCase('snake_case_test')\n    print s.camelCase('snake_case_test')\n    print s.camelCase('snake_Case_test')\n    print s.camelCase('snake_Case_test')\n    print s.camelCase('snake_case_test')\n    print s.camelCase('snake_case_test')\n    print s.camelCase('snake_Case_test')\n    print s.camelCase('snake_Case_test')\n    print s.camelCase('snake_case_test')\n    print s.camelCase('snake_case_test')\n    print s.camelCase('snake_case_test')\n    print s.camelCase('snake_case_test')\n    print s.camelCase('snake_case_test')",
      -7.21484375
    ],
    [
      "import re\n\n\ndef camelCase(snake_case):\n    \"\"\"\n    Convert snake_case to camelCase.\n    :param snake_case: A string in snake_case.\n    :return: A string in camelCase.\n    \"\"\"\n    words = snake_case.split('_')\n    words = [w.title() for w in words]\n    words = ''.join(words)\n    return words\n\n\ndef test_camelCase():\n    assert camelCase(\"test_camelCase\") == \"TestCamelCase\"\n    assert camelCase(\"test_camelCase_\") == \"TestCamelCase\"\n    assert camelCase(\"test_camel_case\") == \"TestCamelCase\"\n    assert camelCase(\"test_camelCase_with_underscore\") == \"TestCamelCaseWithUnderscore\"\n    assert camelCase(\"test_camelCase_with_multiple_underscore\") == \"TestCamelCaseWithMultipleUnderscore\"\n    assert camelCase(\"test_camelCase_with_underscore_and_multiple_dashes\") == \"TestCamelCaseWithUnderscoreAndMultipleDashes\"\n    assert camelCase(\"test_camelCase_with_underscore_and_multiple_dashes_\") == \"TestCamelCaseWithUnderscoreAndMultipleDashes\"\n    assert camelCase(\"test_camelCase_with_multiple_dashes_and_underscore\") == \"TestCamelCaseWithMultipleDashesAndUnderscore\"\n    assert camelCase(\"test_camelCase_with_multiple_dashes_and_underscore_\") == \"TestCamelCaseWithMultipleDashesAndUnderscore\"\n    assert camelCase(\"test_camelCase_with_multiple_dashes_and_underscore_and_multiple_underscores\") == \"TestCamelCaseWithMultipleDashesAndUnderscoreAndMultipleUnderscores\"\n    assert camelCase(\"test_camelCase_with_multiple_dashes_and_underscore_and_multiple_underscores_\") == \"TestCamelCaseWithMultipleDashesAndUnderscoreAndMultipleUnderscores\"\n    assert camelCase(\"test_camelCase_with_multiple_dashes_and_underscore",
      -7.3828125
    ],
    [
      "class Solution(object):\n    def toCamelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(len(S)):\n            if S[i] == '_':\n                if res == '':\n                    res += '_'\n                else:\n                    res +=''\n            else:\n                res += S[i]\n        return res.strip()\n\n\nif __name__ == \"__main__\":\n    assert Solution().toCamelCase('_a_b_c') == 'A_B_C'\n    assert Solution().toCamelCase('_aBc') == 'A_B_C'\n    assert Solution().toCamelCase('a_b_c') == 'A_B_C'\n    assert Solution().toCamelCase('a_b_c_d') == 'A_B_C_D'",
      -7.94921875
    ],
    [
      "class Solution(object):\n    def snakeCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return str\n\n        if str[0] == str[-1] and str[0] == '_':\n            return ''\n\n        res = ''\n        for i in range(len(str)):\n            if i > 0 and str[i] == '_':\n                res += '_'\n            elif i > 0 and str[i] =='':\n                res += '_'\n            else:\n                res += str[i]\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snakeCase('snake')\n    print s.snakeCase('snake_case')\n    print s.snakeCase('snake_case_')\n    print s.snakeCase('snake_case__')\n    print s.snakeCase('snake_case___')\n    print s.snakeCase('snake_case____')\n    print s.snakeCase('snake_case_____')\n    print s.snakeCase('snake_case______')\n    print s.snakeCase('snake_case_______')\n    print s.snakeCase('snake_case________')\n    print s.snakeCase('snake_case_________')",
      -8.1796875
    ],
    [
      "class Solution(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return ''\n        res = ''\n        for i in range(1, len(str)):\n            c = str[i]\n            if c in '0123456789':\n                res += str[i-1]\n            else:\n                if i > 1:\n                    res += str[i-2]\n                if c == '_':\n                    res += '_'\n                else:\n                    res += c.upper()\n        return res\n\nclass Solution2(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(1, len(str)):\n            c = str[i]\n            if c in '0123456789':\n                res += str[i-1]\n            else:\n                if i > 1:\n                    res += str[i-2]\n                if c == '_':\n                    res += '_'\n                else:\n                    res += c.upper()\n        return res\n\nclass Solution3(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = ''\n        for i in range(1, len(str)):\n            c = str[i]\n            if c in '0123456789':\n                res += str[i-1]\n            else:\n                if i > 1:\n                    res += str[i-2]\n                if c == '_':\n                    res += '_'\n                else:\n                    res += c.upper()\n        return res\n\nif __name__ == '__main__':\n    assert Solution().toUpperCamelCase('_snake_case') == 'SnakeCase'\n    assert Solution2().toUpperCamelCase('_snake_case') == 'SnakeCase'\n    assert Solution3().toUpperCamelCase('_snake",
      -8.578125
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        s = S[0]\n        for i in range(1, len(S)):\n            if s == '_':\n                s =''\n            elif s == '-':\n                s =''\n            elif s =='':\n                s =''\n            elif s == '.':\n                s =''\n            elif s == ',':\n                s =''\n            elif s == ';':\n                s =''\n            elif s == ':':\n                s =''\n            elif s == '\\\\':\n                s =''\n            elif s == '>':\n                s =''\n            elif s == '<':\n                s =''\n            elif s == '*':\n                s =''\n            elif s == '?':\n                s =''\n            elif s == '&':\n                s =''\n            elif s == '|':\n                s =''\n            elif s == '{':\n                s =''\n            elif s == '}':\n                s =''\n            elif s == '[':\n                s =''\n            elif s == ']':\n                s =''\n            elif s == '=':\n                s =''\n            elif s == '+':\n                s =''\n            elif s == '-':\n                s =''\n            elif s == ',':\n                s =''\n            elif s == '.':\n                s =''\n            elif s == ';':\n                s =''\n            elif s == ':':\n                s =''\n            elif s == '\\\\':\n                s =''\n            elif s == '>':\n                s =''\n            elif s == '<':\n                s =''\n            elif s == '*':\n                s =''\n            elif s == '?':",
      -8.71875
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.lower()\n        return \"\".join(x.capitalize() if x.isupper() else x.lower() for x in S.split(\"_\"))\n\n    def camelToSnake(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(x.capitalize() if not x.isupper() else x.lower() for x in S.split(\"_\"))\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case_\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase\"))\n    print(s.snakeToCamel(\"snake_case\"))\n    print(s.camelToSnake(\"snakeCase",
      -8.875
    ],
    [
      "import re\n\nclass Solution(object):\n    def snake_case_to_camel_case(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return re.sub('(.)([A-Z][a-z])', r'\\1_\\2', str).lower()\n\n\nif __name__ == '__main__':\n    assert Solution().snake_case_to_camel_case('snake_case') =='snakeCase'\n    assert Solution().snake_case_to_camel_case('snakeCase') =='snake_case'\n    assert Solution().snake_case_to_camel_case('SNAKE_CASE') =='snake_case'\n    assert Solution().snake_case_to_camel_case('snakeCase') =='snakeCase'\n    assert Solution().snake_case_to_camel_case('snake case') =='snake_case'\n    assert Solution().snake_case_to_camel_case('snake case') =='snake_case'\n    assert Solution().snake_case_to_camel_case('snake case_') =='snake_case_'\n    assert Solution().snake_case_to_camel_case('snake_case_') =='snake_case_'\n    assert Solution().snake_case_to_camel_case('snake_case_') =='snake_case_'",
      -9.21875
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if S == \"\":\n            return \"\"\n\n        result = \"\"\n        current = S[0]\n        for i in range(1, len(S)):\n            if current == \" \":\n                result += \" \"\n            elif current == \".\":\n                result += \" \"\n            elif current == \",\":\n                result += \" \"\n            elif current == \";\":\n                result += \" \"\n            elif current == \":\":\n                result += \" \"\n            elif current == \"!\":\n                result += \" \"\n            elif current == \"?\":\n                result += \" \"\n            elif current == \"\\\"\":\n                result += \" \"\n            elif current == \"'\":\n                result += \" \"\n            elif current == \"[\":\n                result += \" \"\n            elif current == \"]\":\n                result += \" \"\n            elif current == \"(\":\n                result += \" \"\n            elif current == \")\":\n                result += \" \"\n            elif current == \"*\":\n                result += \" \"\n            elif current == \"+\":\n                result += \" \"\n            elif current == \"-\":\n                result += \" \"\n            elif current == \">\":\n                result += \" \"\n            elif current == \"<\":\n                result += \" \"\n            elif current == \"=\":\n                result += \" \"\n            elif current == \",\":\n                result += \" \"\n            elif current == \":\":\n                result += \" \"\n            elif current == \"!\":\n                result += \" \"\n            elif current == \"?\":\n                result += \" \"\n            elif current == \"\\\"\":\n                result += \" \"\n            elif current == \"'\":\n                result += \" \"\n            elif current == \" \":\n                result += \" \"\n            else:\n                result += current\n                current = S[i]\n        return result\n\n\nif __name__ == '__main__':\n    assert Solution().camelCase(\"\") == \"\"\n    assert Solution().camelCase(\"a\")",
      -9.4375
    ],
    [
      "class Solution(object):\n    def snake2Camel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.lower()\n        s = s.replace(' ', '')\n        s = s.replace('_', '')\n        s = s.replace('-', '')\n        return ''.join([c.capitalize() for c in s.split('-')])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.snake2Camel('snake_case') == 'SnakeCase'\n    assert s.snake2Camel('snake_case_') == 'SnakeCase'\n    assert s.snake2Camel('snake_case_1') == 'SnakeCase1'\n    assert s.snake2Camel('snake_case_1_') == 'SnakeCase1'\n    assert s.snake2Camel('snake_case_1_2') == 'SnakeCase1_2'\n    assert s.snake2Camel('snake_case_1_2_') == 'SnakeCase1_2'\n    assert s.snake2Camel('snake_case_1_2_3') == 'SnakeCase1_2_3'\n    assert s.snake2Camel('snake_case_1_2_3_') == 'SnakeCase1_2_3'\n    assert s.snake2Camel('snake_case_1_2_3_4') == 'SnakeCase1_2_3_4'\n    assert s.snake2Camel('snake_case_1_2_3_4_') == 'SnakeCase1_2_3_4'\n    assert s.snake2Camel('snake_case_1_2_3_4_5') == 'SnakeCase1_2_3_4_5'\n    assert s.snake2Camel('snake_case_1_2_3_4_5_') == 'SnakeCase1_2_3_4_5'\n    assert s.snake2Camel('snake_case_1_2_3_4",
      -9.921875
    ],
    [
      "# https://discuss.leetcode.com/topic/16243/python-solution-camel-case-to-snake-case\n\nclass Solution:\n    # @param {string} str\n    # @return {string}\n\n    def camelCase(self, str):\n        return str.title().replace('_','')\n\nclass Solution2:\n    # @param {string} str\n    # @return {string}\n\n    def camelCase(self, str):\n        return ''.join(x.title() if x.isupper() else x for x in str.split('_'))\n\nclass Solution3:\n    # @param {string} str\n    # @return {string}\n\n    def camelCase(self, str):\n        return str.title().replace('_','').lower()\n\nif __name__ == '__main__':\n    print Solution().camelCase(\"Snake_Case\")\n    print Solution2().camelCase(\"Snake_Case\")\n    print Solution3().camelCase(\"Snake_Case\")",
      -9.9921875
    ],
    [
      "class Solution(object):\n    def snakeCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        if not str:\n            return ''\n        camel = ''\n        for i in range(len(str)):\n            if str[i] == '_':\n                camel += '-'\n            elif str[i] =='':\n                camel +=''\n            elif str[i] == '.':\n                camel += '.'\n            else:\n                camel += str[i].upper()\n        return camel\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.snakeCase('snake_case')\n    print s.snakeCase('snakeCase')\n    print s.snakeCase('SNAKE_CASE')\n    print s.snakeCase('SNAKE_CASE_')\n    print s.snakeCase('snake_case_')\n    print s.snakeCase('snake_case_')\n    print s.snakeCase('snake case')\n    print s.snakeCase('snake_case')\n    print s.snakeCase('snakeCase')\n    print s.snakeCase('snake_case')",
      -10.328125
    ],
    [
      "class Solution:\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        s = ''\n        for c in S:\n            if c.isalpha():\n                if s:\n                    if s[-1].isupper():\n                        s += c.upper()\n                    else:\n                        s += c\n                else:\n                    s += c.upper()\n            else:\n                s += c\n        return s",
      -10.8671875
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        # https://leetcode.com/problems/convert-words-to-capitalized-case/discuss/280124/Python-solution-with-extra-comments\n        result = []\n        for c in S:\n            if c.isupper() and c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c)\n        return ''.join(result)\n\nif __name__ == '__main__':\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snaCke') == 'SNAck'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase('snake') == 'Snake'\n    assert Solution().camelCase",
      -10.9453125
    ],
    [
      "class Solution(object):\n    def camelCase(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        S = S.lower()\n        if S.isupper():\n            return S\n        L = []\n        i = 0\n        while i < len(S):\n            if i > 0 and S[i] == '-':\n                L.append('-')\n            L.append(S[i])\n            i += 1\n        return ''.join(L)\n\n\n# test\nS = Solution()\nprint S.camelCase('snake-case')\nprint S.camelCase('snakeCase')\nprint S.camelCase('snakeCase_')\nprint S.camelCase('snakeCase_123')\nprint S.camelCase('snake_case')\nprint S.camelCase('snake_case_')\nprint S.camelCase('snake_case_123')\nprint S.camelCase('snakeCase123')\nprint S.camelCase('snake_case_123')",
      -11.3359375
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        res = ''\n        for i in range(len(S)):\n            if S[i] == '_':\n                res = res +''\n            elif S[i] == '-':\n                res = res + '-'\n            elif S[i] == '.':\n                res = res + '.'\n            else:\n                res = res + S[i].upper()\n        return res\n\n    def snakeToCamel2(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        res = ''\n        i = 0\n        while i < len(S):\n            if i > 0 and S[i] == '-' and S[i-1]!= '.':\n                res = res + '-'\n                i += 1\n            elif i > 0 and S[i] == '.' and S[i-1]!= '-':\n                res = res + '.'\n                i += 1\n            elif i > 0 and S[i] == '_' and S[i-1]!= '-':\n                res = res +''\n                i += 1\n            elif i > 0 and S[i] == '-' and S[i-1] == '.':\n                res = res + '-'\n                i += 1\n            elif i > 0 and S[i] == '.' and S[i-1] == '_':\n                res = res + '.'\n                i += 1\n            else:\n                res = res + S[i]\n                i += 1\n        return res\n\n\nif __name__ == '__main__':\n    print Solution().snakeToCamel(\"snake_case\")\n    print Solution().snakeToCamel(\"snakeCase\")\n    print Solution().snakeToCamel(\"snake_case_\")\n    print Solution().snakeToCamel(\"snake_case_\")\n    print Solution().snakeToCamel(\"",
      -11.3359375
    ],
    [
      "class Solution(object):\n    def snake2Camel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        L = S.lower()\n        L = L.replace('_', '')\n        L = L.replace('-', '')\n        L = L.replace(' ', '')\n        L = L.replace('.', '')\n        L = L.replace('=', '')\n        L = L.replace('[', '')\n        L = L.replace(']', '')\n        L = L.replace('{', '')\n        L = L.replace('}', '')\n        L = L.replace(';', '')\n        L = L.replace('+', '')\n        L = L.replace('*', '')\n        L = L.replace('/', '')\n        L = L.replace('&', '')\n        L = L.replace('|', '')\n        L = L.replace('?', '')\n        L = L.replace('(', '')\n        L = L.replace(')', '')\n        L = L.replace('<', '')\n        L = L.replace('>', '')\n        L = L.replace('#', '')\n        L = L.replace('$', '')\n        L = L.replace('@', '')\n        L = L.replace('%', '')\n        L = L.replace('\"', '')\n        L = L.replace(\"'\", '')\n        L = L.replace('~', '')\n        L = L.replace('`', '')\n        L = L.replace('\"', '')\n        L = L.replace(\"'\", '')\n        L = L.replace('\\\\', '')\n        L = L.replace('^', '')\n        L = L.replace('&', '')\n        L = L.replace('|', '')\n        L = L.replace('`', '')\n        L = L.replace('{', '')\n        L = L.replace('}', '')\n        L = L.replace('~', '')\n        L = L.replace('.', ''",
      -11.40625
    ],
    [
      "# https://leetcode.com/problems/snake-case-to-camel-case/discuss/83696/Python-solution-with-explanation\nclass Solution:\n    # @param {string} S\n    # @return {string}\n    def snakeCaseToCamelCase(self, S):\n        if not S:\n            return ''\n\n        def snake_to_upper(s):\n            return ''.join(['_' if c == '_' else c.upper() for c in s])\n\n        def camel_case_to_snake_case(s):\n            return ''.join(['_' if c == '_' else c.lower() for c in s])\n\n        def camel_case_to_upper(s):\n            return ''.join(['_' if c == '_' else c.upper() for c in s])\n\n        def is_lower(c):\n            return c.islower()\n\n        def is_upper(c):\n            return c.isupper()\n\n        def is_lower_or_upper(c):\n            return c.islower() or c.isupper()\n\n        def is_upper_or_lower(c):\n            return c.islower() or c.isupper()\n\n        def is_upper_or_lower_or_underscore(c):\n            return c.islower() or c.isupper() or c == '_'\n\n        def snake_case_to_camel_case(S):\n            return ''.join(['_' if c == '_' else snake_to_upper(c) for c in S])\n\n        def camel_case_to_snake_case(S):\n            return ''.join(['_' if c == '_' else camel_case_to_upper(c) for c in S])\n\n        def camel_case_to_upper(S):\n            return ''.join(['_' if c == '_' else camel_case_to_upper(c) for c in S])\n\n        def camel_case_to_lower(S):\n            return ''.join(['_' if c == '_' else camel_case_to_lower(c) for c",
      -11.578125
    ],
    [
      "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        c = ''\n        for i in range(0, len(s)):\n            if s[i] == '_':\n                continue\n            if i!= 0:\n                c += '_'\n            c += s[i].upper()\n        return c\n\nif __name__ == '__main__':\n    assert Solution().camelCase('snake_case') == 'SnakeCase'\n    assert Solution().camelCase('snake_case_') == 'SnakeCase'\n    assert Solution().camelCase('_snake_case') == 'SnakeCase'\n    assert Solution().camelCase('snake_case__') == 'SnakeCase'",
      -11.7578125
    ],
    [
      "class Solution(object):\n    def snake_to_camel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        S = S.lower()\n        L = []\n        for c in S:\n            if c.isupper():\n                if L and L[-1].islower():\n                    L[-1] = L[-1].upper()\n                else:\n                    L.append(c.upper())\n            else:\n                L.append(c)\n        return \"\".join(L)\n\n\n# Time:  O(n)\n# Space: O(n)\n# DP\nclass Solution2(object):\n    def snake_to_camel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return \"\"\n        n = len(S)\n        C = [False] * n\n        R = []\n        for i in range(n):\n            if C[i]:\n                continue\n            if S[i] == '_':\n                C[i] = True\n                R.append(S[i])\n            elif S[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                C[i] = True\n                R.append(S[i].upper())\n            else:\n                R.append(S[i])\n        return \"\".join(R)\n\n\nif __name__ == \"__main__\":\n    print(Solution().snake_to_camel(\"snake_case\"))\n    print(Solution().snake_to_camel(\"snakeCase\"))\n    print(Solution().snake_to_camel(\"snake_case_\"))\n    print(Solution().snake_to_camel(\"snakeCase\"))\n    print(Solution().snake_to_camel(\"snakeCase_\"))\n    print(Solution().snake_to_camel(\"_\"))\n    print(Solution().snake_to_camel(\"_\"))\n    print(Solution().snake_to_camel(\"\"))\n    print(Solution().snake_to_camel(\"\"))\n    print",
      -12.8359375
    ],
    [
      "# Definition for a snake case string.\nclass Solution(object):\n    def snake2Camel(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        if not S:\n            return ''\n        \n        s = list()\n        for i in range(1, len(S)):\n            if S[i-1] == '_':\n                s.append(S[i])\n            else:\n                s.append(S[i].upper())\n        return ''.join(s)",
      -13.3125
    ],
    [
      "class Solution(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        if not str:\n            return \"\"\n        for i in range(0, len(str)):\n            if str[i] == '_':\n                if i == 0 or str[i - 1]!= '_':\n                    res += '_'\n            else:\n                res += str[i].upper()\n        return res\n\nclass Solution2(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        if not str:\n            return \"\"\n        for i in range(0, len(str)):\n            if str[i] == '_':\n                if i == 0 or str[i - 1]!= '_':\n                    res += '_'\n            else:\n                res += str[i].upper()\n        return res\n\nclass Solution3(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        if not str:\n            return \"\"\n        for i in range(0, len(str)):\n            if str[i] == '_':\n                if i == 0 or str[i - 1]!= '_':\n                    res += '_'\n            else:\n                res += str[i].upper()\n        return res\n\nclass Solution4(object):\n    def toUpperCamelCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        if not str:\n            return \"\"\n        for i in range(0, len(str)):\n            if str[i] == '_':\n                if i == 0 or str[i - 1]!= '_':\n                    res += '_'\n            else:\n                res += str[i].upper()\n        return res\n\nif __name__ == '__main__':\n    print Solution().to",
      -13.578125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}