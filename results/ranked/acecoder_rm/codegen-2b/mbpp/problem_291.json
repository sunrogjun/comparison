{
  "problem": {
    "task_id": "MBPP/302",
    "prompt": "Write a python function to find the most significant bit number which is also a set bit.",
    "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
    "test_list": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ],
    "challenge_test_list": [],
    "problem_id": 291
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import unittest\n\ndef most_significant_bit(n):\n    \"\"\"\n    Returns the most significant bit number of the integer n.\n    :param n: An integer.\n    :return: The most significant bit number.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n\nclass TestMostSignificantBit(unittest.TestCase):\n    def test_most_significant_bit(self):\n        self.assertEqual(most_significant_bit(2), 0)\n        self.assertEqual(most_significant_bit(3), 1)\n        self.assertEqual(most_significant_bit(4), 2)\n        self.assertEqual(most_significant_bit(5), 3)\n        self.assertEqual(most_significant_bit(6), 4)\n        self.assertEqual(most_significant_bit(7), 5)\n        self.assertEqual(most_significant_bit(8), 6)\n        self.assertEqual(most_significant_bit(9), 7)\n        self.assertEqual(most_significant_bit(10), 8)\n        self.assertEqual(most_significant_bit(16), 15)\n        self.assertEqual(most_significant_bit(2048), 15)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      0.9091796875
    ],
    [
      "class Solution(object):\n    def mostSignificantBit(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        num = num & -num\n        num = num ^ num >> 1\n        num = num ^ num >> 2\n        num = num ^ num >> 4\n        num = num ^ num >> 8\n        num = num ^ num >> 16\n        return num & -num\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.mostSignificantBit(1)\n    print s.mostSignificantBit(2)\n    print s.mostSignificantBit(3)\n    print s.mostSignificantBit(4)\n    print s.mostSignificantBit(5)\n    print s.mostSignificantBit(6)\n    print s.mostSignificantBit(7)\n    print s.mostSignificantBit(8)\n    print s.mostSignificantBit(9)\n    print s.mostSignificantBit(10)\n    print s.mostSignificantBit(12)\n    print s.mostSignificantBit(16)\n    print s.mostSignificantBit(32)",
      0.7451171875
    ],
    [
      "# The number of set bits is 2^bits, where bits is the number of bits in the number.\n# For example, the number 123 has 3 set bits, and the number 12345 has 5 set bits.\n# The number 1 has 1 set bit, and the number 0 has 0 set bits.\n# The number -1 has -1 set bits.\n# The number -10 has -2 set bits.\n# The number -123 has -3 set bits.\n# The number -12345 has -5 set bits.\n# The number -1234567 has -7 set bits.\n# The number -123456789 has -9 set bits.\n\ndef find_msb(n):\n    msb = 0\n    while n & 1 == 0:\n        msb += 1\n        n >>= 1\n\n    while n!= 0:\n        if n & 1 == 1:\n            return msb\n        else:\n            msb += 1\n            n >>= 1\n    return 0\n\nif __name__ == '__main__':\n    for n in range(1, 10):\n        print(\"%d: %d\" % (n, find_msb(n)))",
      0.08441162109375
    ],
    [
      "from __future__ import print_function\n\ndef find_msb_set_bit(x):\n    \"\"\"\n    Find the most significant bit which is also a set bit.\n    :param x: integer\n    :return: the most significant bit number which is also a set bit\n    \"\"\"\n    return bit_number(x, x)\n\ndef bit_number(x, n):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n    :param x: integer\n    :param n: integer\n    :return: the most significant bit number which is also a set bit\n    \"\"\"\n    return x & (1 << (n-1))\n\nif __name__ == '__main__':\n    print(find_msb_set_bit(3))\n    print(find_msb_set_bit(7))\n    print(find_msb_set_bit(8))\n    print(find_msb_set_bit(0x80000000))\n    print(find_msb_set_bit(0x7FFFFFFF))\n    print(find_msb_set_bit(0x80000001))\n    print(find_msb_set_bit(0xFFFFFFFF))\n    print(find_msb_set_bit(0xFFFFFFFFFFFFFFFFL))\n    print(find_msb_set_bit(0xFFFFFFFFFFFFFFFF))",
      0.016510009765625
    ],
    [
      "def find_msb(num):\n    \"\"\"\n    >>> find_msb(0)\n    0\n    >>> find_msb(1)\n    0\n    >>> find_msb(2)\n    1\n    >>> find_msb(3)\n    2\n    >>> find_msb(4)\n    2\n    >>> find_msb(5)\n    2\n    >>> find_msb(6)\n    3\n    >>> find_msb(7)\n    3\n    >>> find_msb(8)\n    3\n    >>> find_msb(9)\n    3\n    >>> find_msb(10)\n    3\n    >>> find_msb(11)\n    3\n    >>> find_msb(12)\n    3\n    >>> find_msb(13)\n    3\n    >>> find_msb(14)\n    3\n    >>> find_msb(15)\n    3\n    >>> find_msb(16)\n    4\n    >>> find_msb(17)\n    4\n    >>> find_msb(18)\n    4\n    >>> find_msb(19)\n    4\n    >>> find_msb(20)\n    4\n    >>> find_msb(21)\n    4\n    >>> find_msb(22)\n    4\n    >>> find_msb(23)\n    4\n    >>> find_msb(24)\n    4\n    >>> find_msb(25)\n    4\n    >>> find_msb(26)\n    4\n    >>> find_msb(27)\n    4\n    >>> find_msb(28)\n    4\n    >>> find_msb(29)\n    4\n    >>> find_msb(30)\n    4\n    >>> find_msb(31)\n    4\n    >>> find_msb(32)\n    5\n    >>> find_msb(33)\n    5\n    >>> find_msb(34)\n    5\n    >>> find_msb(35)\n    5\n    >>> find_msb(36)\n    5\n    >>> find_msb(37)\n    5\n    >>> find_ms",
      -0.49853515625
    ],
    [
      "# You can use the function from this file to test your function.\n# Note that the result of your function should be an integer.\n\ndef find_msb_set_bit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # You need to write the function body here.\n    return 0\n\n\n# When you're finished, copy these classes and functions to your module\n# and uncomment the following lines.\n# class Solution:\n#     # def find_msb_set_bit(self, n):\n#     #     return 0\n\n\n# class Solution2:\n#     # def find_msb_set_bit(self, n):\n#     #     return 0",
      -0.85693359375
    ],
    [
      "def mostSignificantBit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n\n\nif __name__ == \"__main__\":\n    assert mostSignificantBit(0x7) == 1\n    assert mostSignificantBit(0x3fffffff) == 30\n    assert mostSignificantBit(0xffffffff) == 31\n    assert mostSignificantBit(0xffffffffffffffff) == 63\n    assert mostSignificantBit(0xffffffffffffffffffffffffffffffff) == 63\n    assert mostSignificantBit(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) == 63",
      -0.85693359375
    ],
    [
      "def find_msb(x):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n    \"\"\"\n    i = 0\n    while not x & 1:\n        i += 1\n        x >>= 1\n    return i\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(find_msb(0x7FFFFFFF))\n    print(find_msb(0xFFFFFFFE))\n    print(find_msb(0xFFFFFFFF))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "import operator\n\n\ndef find_msb(n):\n    \"\"\"\n    Find the most significant bit which is also a set bit.\n    :param n:\n    :return:\n    \"\"\"\n    return operator.xor(n, operator.rshift(n, 1))\n\n\nif __name__ == \"__main__\":\n    print(find_msb(0x00000000FFFFFFFF))\n    print(find_msb(0x0000000000000001))\n    print(find_msb(0x0000000000000101))\n    print(find_msb(0x0000000000000111))\n    print(find_msb(0x0000000000001111))\n    print(find_msb(0x0000000011111111))",
      -0.85791015625
    ],
    [
      "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef find_msb(number):\n    \"\"\"\n    Find the most significant bit number.\n    \"\"\"\n    if number == 0:\n        return 0\n    msb = 0\n    while number & (1 << msb) == 0:\n        msb += 1\n    return msb\n\nif __name__ == '__main__':\n    try:\n        num = int(sys.argv[1])\n        print find_msb(num)\n    except IndexError:\n        print 'usage: python find_msb.py number'",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def findSignificantBit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        l = 0\n        r = n\n        while l < r:\n            mid = (l + r) // 2\n            if (n & mid) == 0:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n\nif __name__ == '__main__':\n    print Solution().findSignificantBit(0b1011)",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\nif len(sys.argv)!= 2:\n    print \"usage: %s num\" % sys.argv[0]\n    sys.exit(1)\n\nnum = int(sys.argv[1])\n\n#print \"num: %d\" % num\n\n#print \"0b%d\" % bin(num)[2:]\n\nresult = 0\n\nwhile num > 0:\n    if num & 1 == 1:\n        result += 1\n    num >>= 1\n\nprint \"result: %d\" % result",
      -0.85791015625
    ],
    [
      "import sys\n\ndef most_significant_bit(n):\n    \"\"\"\n    Write a function that takes a number n and returns the most significant bit\n    number which is also a set bit.\n    \"\"\"\n    return n & ((n - 1) >> 1)\n\nif __name__ == \"__main__\":\n    for n in range(2, 100):\n        print n, most_significant_bit(n)",
      -0.85791015625
    ],
    [
      "# Returns the most significant bit number which is also a set bit\ndef find_msb_set_bit(x):\n    if x == 0:\n        return -1\n    for i in range(0, 32):\n        if x & (1 << i):\n            return i\n    return -1\n\ndef main():\n    print(find_msb_set_bit(1))\n    print(find_msb_set_bit(0x80000001))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "from math import log\nfrom math import ceil\nfrom math import pow\n\ndef find_most_significant_bit(x):\n    \"\"\"\n    :param x:\n    :return:\n    \"\"\"\n    return int(ceil(log(x, 2)))\n\n\nif __name__ == '__main__':\n    print find_most_significant_bit(2)\n    print find_most_significant_bit(3)\n    print find_most_significant_bit(4)\n    print find_most_significant_bit(16)\n    print find_most_significant_bit(128)",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\ndef get_msb(num):\n    #print num\n    if num == 0:\n        return 0\n    #print num & (num-1)\n    return num & (num-1)\n\ndef main():\n    test_cases = [1, 4, 15, 16, 17, 31, 32, 33, 63, 64, 65]\n    for i in test_cases:\n        print get_msb(i)\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def findMSB(n):\n    while n & 1 == 0:\n        n >>= 1\n    return n\n\n# The input is a number\ndef findMSB(n):\n    return n & -n",
      -0.85791015625
    ],
    [
      "def most_significant_bit(number):\n    \"\"\"\n    number: the number to be checked\n    return: the most significant bit number\n    \"\"\"\n    sign_bit_number = 0\n    while number & 1 == 0:\n        sign_bit_number += 1\n        number >>= 1\n    return sign_bit_number\n\nif __name__ == \"__main__\":\n    print most_significant_bit(2147483647)\n    print most_significant_bit(-2147483647)\n    print most_significant_bit(2147483647)\n    print most_significant_bit(-2147483647)\n    print most_significant_bit(2147483647)\n    print most_significant_bit(-2147483647)",
      -0.85791015625
    ],
    [
      "def most_significant_bit_number_of_set_bits(a):\n    \"\"\"\n    :param a: integer\n    :return: most significant bit number of set bits\n    \"\"\"\n    while a:\n        if a & 1:\n            return len(bin(a)) - 2\n        a = a >> 1\n    return 0\n\nprint(most_significant_bit_number_of_set_bits(0b1100010))\nprint(most_significant_bit_number_of_set_bits(0b1111111))",
      -0.85791015625
    ],
    [
      "def find_msb_set_bit(val):\n    msb = 0\n    while (val & (1 << msb)) == 0:\n        msb += 1\n    return msb\n\nif __name__ == \"__main__\":\n    print find_msb_set_bit(0b10010101)\n    print find_msb_set_bit(0b11111111)\n    print find_msb_set_bit(0b1111111111)",
      -0.85791015625
    ],
    [
      "import math\n\ndef find_most_significant_bit(number):\n    \"\"\"\n    number: int\n    return: int\n    \"\"\"\n    return int(math.log(number, 2))\n\nif __name__ == \"__main__\":\n    print(find_most_significant_bit(15))\n    print(find_most_significant_bit(16))\n    print(find_most_significant_bit(1587))\n    print(find_most_significant_bit(1234))\n    print(find_most_significant_bit(2147483647))\n    print(find_most_significant_bit(2147483648))\n    print(find_most_significant_bit(4294967295))\n    print(find_most_significant_bit(4294967296))",
      -0.85791015625
    ],
    [
      "import math\nimport sys\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    if len(sys.argv)!= 2:\n        print('Please input an integer')\n        sys.exit(1)\n    n = int(sys.argv[1])\n    if n < 0:\n        print('The number is not a positive integer')\n        sys.exit(1)\n    print(n)\n    print(most_significant_set_bit(n))\n    sys.exit(0)\n\ndef most_significant_set_bit(n):\n    \"\"\"\n    Given an integer, find the most significant set bit.\n    \"\"\"\n    if n == 0:\n        return 0\n    m = n\n    while m & 1 == 0:\n        m >>= 1\n    return m\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @return an integer\n    def findMSBSet(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return max(0, num & -num)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.findMSBSet(0b1)\n    print s.findMSBSet(0b11)\n    print s.findMSBSet(0b1101)\n    print s.findMSBSet(0b11011)\n    print s.findMSBSet(0b110111)\n    print s.findMSBSet(0b1101111)\n    print s.findMSBSet(0b1111)\n    print s.findMSBSet(0b111111111111)\n    print s.findMSBSet(0b111111111)",
      -0.8583984375
    ],
    [
      "def msb(n):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n    \"\"\"\n    while n > 0:\n        n >>= 1\n        if n & 1:\n            return len(bin(n)) - 2\n    return -1\n\nif __name__ == \"__main__\":\n    for n in range(0, 2**16):\n        print(\"{} --> {}\".format(n, msb(n)))",
      -0.8583984375
    ],
    [
      "def find_msb_set_bit(x):\n    \"\"\"\n    Find the most significant bit number which is also a set bit\n    \"\"\"\n    for i in range(0, 64):\n        if (x & (1 << i)):\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffe))\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xffffffffffffffff))",
      -0.8583984375
    ],
    [
      "def find_msb_set_bit(n):\n    \"\"\"\n    :param n: Integer\n    :return: The most significant bit number which is also a set bit\n    \"\"\"\n    return n - ((n >> 1) & ~(n >> 2))\n\n\n# Test Cases\ntest_cases = [\n    (2, 3),\n    (8, 16),\n    (0x100, 0x10000),\n    (0x10000000, 0x100000000)\n]\n\nfor test_case in test_cases:\n    print \"The most significant bit number which is also a set bit of {0} is {1}\".format(*test_case)\n    print \"Expected: {0}\".format(find_msb_set_bit(*test_case))\n    print \"Actual:   {0}\".format(find_msb_set_bit(*test_case))",
      -0.8583984375
    ],
    [
      "def get_msb_set_bit(n):\n    \"\"\"\n    Input:\n        n: an integer\n    Output:\n        the most significant bit number which is also a set bit\n    \"\"\"\n    return pow(2, len(bin(n)) - 2) - 1\n\nif __name__ == \"__main__\":\n    print get_msb_set_bit(1)\n    print get_msb_set_bit(2**16-1)\n    print get_msb_set_bit(2**32-1)\n    print get_msb_set_bit(2**64-1)",
      -0.8583984375
    ],
    [
      "def most_significant_bit(number):\n    \"\"\"\n    :param number:\n    :return:\n    \"\"\"\n    msb = 0\n    while number & 1 == 0:\n        msb += 1\n        number >>= 1\n    return msb\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def most_significant_bit(x):\n    \"\"\"\n    Write a python function to find the most significant bit number which is also a set bit.\n    x: the number to be analysed.\n    \"\"\"\n    x = int(x)\n    y = 1\n    while x > 0:\n        x = x >> 1\n        y = y << 1\n    return y\n\n\nprint(most_significant_bit(0))\nprint(most_significant_bit(1))\nprint(most_significant_bit(2))\nprint(most_significant_bit(3))\nprint(most_significant_bit(4))\nprint(most_significant_bit(5))\nprint(most_significant_bit(6))\nprint(most_significant_bit(7))\nprint(most_significant_bit(8))\nprint(most_significant_bit(9))\nprint(most_significant_bit(10))\nprint(most_significant_bit(11))\nprint(most_significant_bit(12))\nprint(most_significant_bit(13))\nprint(most_significant_bit(14))\nprint(most_significant_bit(15))\nprint(most_significant_bit(16))\nprint(most_significant_bit(17))\nprint(most_significant_bit(18))\nprint(most_significant_bit(19))\nprint(most_significant_bit(20))\nprint(most_significant_bit(21))\nprint(most_significant_bit(22))\nprint(most_significant_bit(23))\nprint(most_significant_bit(24))\nprint(most_significant_bit(25))\nprint(most_significant_bit(26))\nprint(most_significant_bit(27))\nprint(most_significant_bit(28))\nprint(most_significant_bit(29))\nprint(most_significant_bit(30))\nprint(most_significant_bit(31))\nprint(most_significant_bit(32))\nprint(most_significant_bit(33))\nprint(most_significant_bit(34))\nprint(most_significant_bit(35))\nprint(most_significant_bit(36))\nprint(most_significant_bit(37))\nprint(most_significant_bit(",
      -0.8583984375
    ],
    [
      "import operator\nimport unittest\n\nclass Solution(object):\n    def __init__(self, num):\n        self.num = num\n\n    def findMSB(self):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if self.num == 0:\n            return -1\n        return max(0, (len(bin(self.num))-2) - int(sum(bin(self.num)[2:]) == 0))\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/find-the-most-significant-bit-set-in-an-integer/solution/\n\n# 2ms 99.79%\nclass Solution {\n    public int findMSB(int num) {\n        return (num & (-num)) - 1;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int findMSB(int num) {\n        return 31 - Integer.numberOfLeadingZeros(num);\n    }\n}\n'''",
      -0.8583984375
    ],
    [
      "def find_most_significant_bit(x):\n    \"\"\"\n    Find the most significant bit of a number.\n    \"\"\"\n    return x & -x\n\n# Example\nprint find_most_significant_bit(0x00)\nprint find_most_significant_bit(0x80)\nprint find_most_significant_bit(0xFF)\nprint find_most_significant_bit(0x1FFFFFFF)",
      -0.8583984375
    ],
    [
      "import sys\nsys.setrecursionlimit(100000)\n\n\ndef is_set(n):\n    return any(n & 1 << i for i in range(8))\n\n\ndef main(args):\n    n = int(args[1])\n    print(is_set(n))\n\n\nif __name__ == '__main__':\n    main(sys.argv)",
      -0.8583984375
    ],
    [
      "def get_msb_set_bit(number):\n    \"\"\"\n    The number is a positive integer which has set bits.\n    Return the most significant bit number which is also a set bit.\n    \"\"\"\n    return (number & -number) + 1\n\nif __name__ == '__main__':\n    print get_msb_set_bit(2147483648)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param x, a long integer\n    # @return an integer\n    def findMSBSetBits(self, x):\n        if x == 0:\n            return 0\n        x = x - ((x >> 1) & 0x5555555555555555)\n        x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n        x = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f\n        x = x + (x >> 8)\n        x = x + (x >> 16)\n        x = x + (x >> 32)\n        return x & 0x7f\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.findMSBSetBits(0x55555555))\n    print(sol.findMSBSetBits(0xaaaaaaaa))\n    print(sol.findMSBSetBits(0xffffffff))\n    print(sol.findMSBSetBits(0x7fffffff))",
      -0.8583984375
    ],
    [
      "def most_significant_bit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    return 1 + most_significant_bit(n >> 1)\n\nif __name__ == '__main__':\n    n = 0x1234\n    print(most_significant_bit(n))",
      -0.8583984375
    ],
    [
      "import math\n\ndef msb(n):\n    \"\"\"\n    Returns the most significant bit number which is also a set bit.\n    \"\"\"\n    return math.log2(n)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(msb(2))\n    print(msb(3))\n    print(msb(10))\n    print(msb(100))\n    print(msb(1000))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import operator\n\ndef find_most_significant_bit(num):\n    \"\"\"\n    >>> find_most_significant_bit(0)\n    0\n    >>> find_most_significant_bit(1)\n    0\n    >>> find_most_significant_bit(2)\n    1\n    >>> find_most_significant_bit(3)\n    1\n    >>> find_most_significant_bit(4)\n    2\n    >>> find_most_significant_bit(5)\n    2\n    >>> find_most_significant_bit(6)\n    3\n    >>> find_most_significant_bit(7)\n    3\n    >>> find_most_significant_bit(8)\n    4\n    >>> find_most_significant_bit(9)\n    4\n    >>> find_most_significant_bit(10)\n    5\n    >>> find_most_significant_bit(11)\n    5\n    >>> find_most_significant_bit(12)\n    6\n    >>> find_most_significant_bit(13)\n    6\n    >>> find_most_significant_bit(14)\n    7\n    >>> find_most_significant_bit(15)\n    7\n    >>> find_most_significant_bit(16)\n    8\n    >>> find_most_significant_bit(17)\n    8\n    >>> find_most_significant_bit(18)\n    9\n    >>> find_most_significant_bit(19)\n    9\n    >>> find_most_significant_bit(20)\n    10\n    >>> find_most_significant_bit(21)\n    10\n    >>> find_most_significant_bit(22)\n    11\n    >>> find_most_significant_bit(23)\n    11\n    >>> find_most_significant_bit(24)\n    12\n    >>> find_most_significant_bit(25)\n    12\n    >>> find_most_significant_bit(26)\n    13\n    >>> find_most_significant_bit(27)\n    13\n    >>> find_most_significant_bit(28)\n    14\n    >>> find_most_significant_bit(29)\n    14\n    >>> find_most_significant_bit(30)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def getMaxBit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # use bitwise and to find the most significant bit\n        return int(n) & -(1 << n)\n\n        # use bitwise and to find the most significant bit\n        # return int(n) & -(1 << n) - 1\n\nif __name__ == \"__main__\":\n    print Solution().getMaxBit(0)\n    print Solution().getMaxBit(1)\n    print Solution().getMaxBit(2)\n    print Solution().getMaxBit(3)\n    print Solution().getMaxBit(4)\n    print Solution().getMaxBit(5)\n    print Solution().getMaxBit(6)\n    print Solution().getMaxBit(7)\n    print Solution().getMaxBit(8)\n    print Solution().getMaxBit(9)\n    print Solution().getMaxBit(10)\n    print Solution().getMaxBit(11)\n    print Solution().getMaxBit(12)\n    print Solution().getMaxBit(13)\n    print Solution().getMaxBit(14)\n    print Solution().getMaxBit(15)\n    print Solution().getMaxBit(16)\n    print Solution().getMaxBit(17)\n    print Solution().getMaxBit(18)\n    print Solution().getMaxBit(19)\n    print Solution().getMaxBit(20)\n    print Solution().getMaxBit(21)\n    print Solution().getMaxBit(22)\n    print Solution().getMaxBit(23)\n    print Solution().getMaxBit(24)\n    print Solution().getMaxBit(25)\n    print Solution().getMaxBit(26)\n    print Solution().getMaxBit(27)\n    print Solution().getMaxBit(28)\n    print Solution().getMaxBit(29)\n    print Solution().getMaxBit(30)\n    print Solution().getMaxBit(31)\n    print Solution().getMaxBit(32)\n    print Solution().getMaxBit(33)\n    print Solution().getMaxBit(34)\n    print Solution().getMaxBit(35)\n    print Solution().getMaxBit(36",
      -0.8583984375
    ],
    [
      "def find_most_significant_bit(x):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n    \"\"\"\n    return max(bin(x).find('1'), bin(x).find('0'))\n\n\nprint(find_most_significant_bit(0b11111111111111111111111111111111))\nprint(find_most_significant_bit(0b11111111111111111111111111111110))\nprint(find_most_significant_bit(0b11111111111111111111111111111101))\nprint(find_most_significant_bit(0b11111111111111111111111111111))",
      -0.8583984375
    ],
    [
      "def most_significant_bit_set(num):\n    \"\"\"\n    Find the most significant bit which is also a set bit.\n    \"\"\"\n    while num > 0:\n        num >>= 1\n        if num & 0x1 == 1:\n            return 31\n        num >>= 1\n    return 0\n\nif __name__ == '__main__':\n    num = 5\n    print(\"The number %d has %d set bits.\" % (num, most_significant_bit_set(num)))",
      -0.8583984375
    ],
    [
      "import operator\n\nclass Solution(object):\n    def findMSBSetBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMSBSetBits(2**31-1))\n    print(sol.findMSBSetBits(2**31-2))",
      -0.8583984375
    ],
    [
      "def find_msb_set(a):\n    for i in range(0,32):\n        if a & 1 == 1:\n            return i\n        a >>= 1\n\ndef main():\n    a = 0x01\n    print find_msb_set(a)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport unittest\n\nclass Solution(object):\n    def findMSBSet(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num <= 0:\n            return -1\n        elif num == 1:\n            return 0\n        elif num % 2 == 0:\n            return self.findMSBSet(num / 2)\n        else:\n            return self.findMSBSet(num - 1)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/find-the-most-significant-bit-number-that-is-also-a-set-bit/solution/\n\n# 11ms 100%\nclass Solution {\n    public int findMSBSet(int num) {\n        if (num <= 0) {\n            return -1;\n        }\n        int count = 0;\n        while (num!= 0) {\n            count++;\n            num = num & (num - 1);\n        }\n        return count;\n    }\n}\n\n# 11ms 100%\nclass Solution {\n    public int findMSBSet(int num) {\n        int count = 0;\n        while (num!= 0) {\n            count++;\n            num = num & (num - 1);\n        }\n        return count;\n    }\n}\n'''",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def __init__(self, num):\n        \"\"\"\n        :type num: int\n        \"\"\"\n        self.num = num\n        self.bit = 0\n\n    def getBit(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        while self.num:\n            self.bit += 1\n            self.num >>= 1\n        return self.bit\n\n\nif __name__ == '__main__':\n    solution = Solution(0b1111)\n    print solution.getBit()\n    print solution.getBit()\n    print solution.getBit()\n    print solution.getBit()",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/find-the-most-significant-bit-number-set-bit\n\ndef find_most_significant_bit(number):\n    # Check for the most significant bit\n    if number & 1 == 1:\n        return 1\n    elif number >> 1 == 0:\n        return 2\n    else:\n        return find_most_significant_bit(number >> 1) + 1\n\nif __name__ == '__main__':\n    input_num = int(input())\n    print(find_most_significant_bit(input_num))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def mostSignificantBit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n == 27:\n            return 27\n        if n == 28:\n            return 28\n        if n == 29:\n            return 29\n        if n == 30:\n            return 30\n        if n == 31:\n            return 31\n        if n == 32:\n            return 32\n        if n == 33:\n            return 33\n        if n == 34:\n            return 34\n        if n == 35:\n            return 35\n        if n == 36:\n            return 36\n        if n == 37:\n            return 37\n        if n == 38:\n            return 38\n        if n == 39:\n            return 39\n        if n == 40:\n            return 40\n        if n == 41:\n            return 41\n        if n == 42:\n            return 42",
      -0.8583984375
    ],
    [
      "def find_msb_set_bit(num):\n    \"\"\"\n    Write a python function to find the most significant bit number which is also a set bit.\n    \"\"\"\n    return num.bit_length() - 1 - int(num.bit_length() - 1 == num)\n\nif __name__ == '__main__':\n    print find_msb_set_bit(0x00000001)\n    print find_msb_set_bit(0x00000001)\n    print find_msb_set_bit(0xffffffff)\n    print find_msb_set_bit(0xffffffff)\n    print find_msb_set_bit(0xffffffff)\n    print find_msb_set_bit(0xffffffff)\n    print find_msb_set_bit(0xffffffff)\n    print find_msb_set_bit(0xffffffff)",
      -0.85888671875
    ],
    [
      "def findMSB(num):\n    \"\"\"\n    Input:\n        num = a number\n    Output:\n        the most significant bit number which is also a set bit\n    \"\"\"\n    if num == 0:\n        return -1\n    \n    msb = 0\n    while num & 1 == 0:\n        msb += 1\n        num >>= 1\n    return msb\n\nif __name__ == '__main__':\n    num = 0xAABBCCDD\n    print findMSB(num)",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def findMSBSetBit(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n\n        i = 0\n        while num & 1 == 0:\n            num >>= 1\n            i += 1\n        return i\n\n\nif __name__ == '__main__':\n    print Solution().findMSBSetBit(3)\n    print Solution().findMSBSetBit(5)",
      -0.85888671875
    ],
    [
      "def findMSBSetBit(n):\n    \"\"\"\n    n: int\n    return: int\n    \"\"\"\n    i = 0\n    while n:\n        n >>= 1\n        i += 1\n    return i - 1\n\n\nif __name__ == '__main__':\n    n = 2\n    print(findMSBSetBit(n))\n    n = 4\n    print(findMSBSetBit(n))\n    n = 5\n    print(findMSBSetBit(n))\n    n = 6\n    print(findMSBSetBit(n))",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def mostSignificantBit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        while n & 1 == 0:\n            n >>= 1\n        return n",
      -0.85888671875
    ],
    [
      "def find_msb_set_bit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return -1\n    msb = 0\n    while n & (1 << msb):\n        msb += 1\n    return msb",
      -0.85888671875
    ],
    [
      "import sys\n\ndef is_set(n):\n    return (n & (n-1)) == 0\n\ndef find_most_significant_bit(n):\n    for i in range(0,32):\n        if is_set(n):\n            return i\n        n >>= 1\n    return 0\n\nif __name__ == '__main__':\n    print find_most_significant_bit(int(sys.argv[1]))",
      -0.85888671875
    ],
    [
      "def find_msb(n):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n    n: the number.\n    \"\"\"\n    assert n >= 0\n    # Get the first non-zero bit\n    i = 0\n    while n & (1 << i):\n        i += 1\n    return i\n\ndef test_cases():\n    for i in range(10):\n        n = i\n        print(find_msb(n))\n\nif __name__ == '__main__':\n    test_cases()",
      -0.85888671875
    ],
    [
      "import math\n\ndef find_msb_set_bit(x):\n    return int(math.log(x, 2) + 1)\n\ndef main():\n    print find_msb_set_bit(3)\n    print find_msb_set_bit(1)\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def find_most_significant_bit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < 32:\n        if n & (1 << i):\n            return i\n        i += 1\n    return 0\n\nif __name__ == '__main__':\n    print find_most_significant_bit(2)\n    print find_most_significant_bit(1)\n    print find_most_significant_bit(0)",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @return an integer\n    def getMaxSignificantBit(self, num):\n        return self.getMaxSignificantBitRec(num, 0)\n\n    def getMaxSignificantBitRec(self, num, idx):\n        if num == 0:\n            return idx\n        if idx == len(bin(num)) - 2:\n            return idx\n        if num > 0:\n            return self.getMaxSignificantBitRec(num >> 1, idx + 1)\n        else:\n            return self.getMaxSignificantBitRec(num >> 1, idx)",
      -0.85888671875
    ],
    [
      "def most_significant_bit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    bits = 0\n    while n & 1 == 0:\n        bits += 1\n        n >>= 1\n    return bits",
      -0.85888671875
    ],
    [
      "from __future__ import print_function\n\ndef find_set_bit(num):\n    \"\"\"\n    Input:\n        num - an integer\n    Output:\n        A tuple of (set bit, bit number)\n    \"\"\"\n\n    # Bit number is the position of the 1st bit of num\n    bit_number = 0\n    while num:\n        num &= num - 1\n        bit_number += 1\n    return (num, bit_number)\n\n\nif __name__ == '__main__':\n    print(find_set_bit(10))\n    print(find_set_bit(0x5))\n    print(find_set_bit(0x6))\n    print(find_set_bit(0xffffffff))\n    print(find_set_bit(0x1fffff))\n    print(find_set_bit(0xffffffffffffffff))\n    print(find_set_bit(0xffffffffffffffffffffffffffffffff))\n    print(find_set_bit(0xfffffffffffffffffffffffffffffffffffe))\n    print(find_set_bit(0xffffffffffffffffffffffffffffffffffffffff))",
      -0.85888671875
    ],
    [
      "def most_significant_set_bit(x):\n    \"\"\"\n    :param x: integer\n    :return: the most significant bit number which is also a set bit\n    \"\"\"\n    if x == 0:\n        return 0\n    m = 1\n    while m < x:\n        m <<= 1\n    while m & x:\n        m >>= 1\n    return m\n\nif __name__ == '__main__':\n    assert most_significant_set_bit(0) == 0\n    assert most_significant_set_bit(1) == 0\n    assert most_significant_set_bit(2) == 2\n    assert most_significant_set_bit(3) == 2\n    assert most_significant_set_bit(4) == 2\n    assert most_significant_set_bit(5) == 2\n    assert most_significant_set_bit(6) == 3\n    assert most_significant_set_bit(7) == 3\n    assert most_significant_set_bit(8) == 3\n    assert most_significant_set_bit(9) == 3\n    assert most_significant_set_bit(10) == 3\n    assert most_significant_set_bit(12) == 4\n    assert most_significant_set_bit(13) == 4\n    assert most_significant_set_bit(14) == 4\n    assert most_significant_set_bit(15) == 4\n    assert most_significant_set_bit(16) == 4\n    assert most_significant_set_bit(17) == 4\n    assert most_significant_set_bit(32) == 32\n    assert most_significant_set_bit(33) == 32\n    assert most_significant_set_bit(34) == 32\n    assert most_significant_set_bit(35) == 32\n    assert most_significant_set_bit(36) == 32\n    assert most_significant_set_bit(37) == 32\n    assert most_significant_set_bit(128) == 128\n    assert most_significant_set_bit(129) == 128\n    assert most_significant_set_bit(130) == 128\n    assert most_significant_set_bit(131) == 128\n    assert most_significant_set",
      -1.1953125
    ],
    [
      "def most_significant_bit(x):\n  \"\"\"\n  :type x: int\n  :rtype: int\n  \"\"\"\n  \n  if x == 0:\n    return -1\n  if x & 1 == 1:\n    return 0\n  \n  bit = 0\n  while x & 1 == 0:\n    bit += 1\n    x >>= 1\n  \n  return bit\n\nprint(most_significant_bit(0))\nprint(most_significant_bit(1))\nprint(most_significant_bit(2))\nprint(most_significant_bit(3))\nprint(most_significant_bit(4))\nprint(most_significant_bit(5))\nprint(most_significant_bit(6))\nprint(most_significant_bit(7))\nprint(most_significant_bit(8))\nprint(most_significant_bit(9))\nprint(most_significant_bit(10))\nprint(most_significant_bit(11))\nprint(most_significant_bit(12))\nprint(most_significant_bit(13))\nprint(most_significant_bit(14))\nprint(most_significant_bit(15))\nprint(most_significant_bit(16))\nprint(most_significant_bit(17))\nprint(most_significant_bit(18))\nprint(most_significant_bit(19))\nprint(most_significant_bit(20))\nprint(most_significant_bit(21))\nprint(most_significant_bit(22))\nprint(most_significant_bit(23))\nprint(most_significant_bit(24))\nprint(most_significant_bit(25))\nprint(most_significant_bit(26))\nprint(most_significant_bit(27))\nprint(most_significant_bit(28))\nprint(most_significant_bit(29))\nprint(most_significant_bit(30))\nprint(most_significant_bit(31))\nprint(most_significant_bit(32))\nprint(most_significant_bit(33))\nprint(most_significant_bit(34))\nprint(most_significant_bit(35))\nprint(most_significant_bit(36))\nprint(most_significant_bit(37))\nprint(",
      -1.478515625
    ],
    [
      "# write your code here\ndef most_significant_bit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:",
      -1.6787109375
    ],
    [
      "def find_msb(num):\n    \"\"\"\n    num: integer\n    return: integer\n    \"\"\"\n    msb = 0\n    while num >> msb:\n        msb += 1\n    return msb\n\n\nif __name__ == '__main__':\n    print find_msb(0b111111101)\n    print find_msb(0b11111111)\n    print find_msb(0b1111111111111111)\n    print find_msb(0b
      -1.736328125
    ],
    [
      "def most_significant_bit(number):\n    \"\"\"\n    number: an integer\n    returns: the most significant bit number\n    \"\"\"\n    return number & -number\n\n\ndef test_most_significant_bit():\n    assert most_significant_bit(0) == 0\n    assert most_significant_bit(1) == 0\n    assert most_significant_bit(2) == 1\n    assert most_significant_bit(3) == 1\n    assert most_significant_bit(4) == 2\n    assert most_significant_bit(5) == 2\n    assert most_significant_bit(6) == 2\n    assert most_significant_bit(7) == 2\n    assert most_significant_bit(8) == 3\n    assert most_significant_bit(9) == 3\n    assert most_significant_bit(10) == 3\n    assert most_significant_bit(11) == 3\n    assert most_significant_bit(12) == 3\n    assert most_significant_bit(13) == 3\n    assert most_significant_bit(14) == 3\n    assert most_significant_bit(15) == 3\n    assert most_significant_bit(16) == 4\n    assert most_significant_bit(17) == 4\n    assert most_significant_bit(18) == 4\n    assert most_significant_bit(19) == 4\n    assert most_significant_bit(20) == 4\n    assert most_significant_bit(21) == 4\n    assert most_significant_bit(22) == 4\n    assert most_significant_bit(23) == 4\n    assert most_significant_bit(24) == 4\n    assert most_significant_bit(25) == 4\n    assert most_significant_bit(26) == 4\n    assert most_significant_bit(27) == 4\n    assert most_significant_bit(28) == 5\n    assert most_significant_bit(29) == 5\n    assert most_significant_bit(30) == 5\n    assert most_significant_bit(31) == 5\n    assert most_significant_bit(32) == 6\n    assert most_significant_bit(33) == 6\n    assert most_significant_bit(34) == 6\n    assert most_significant_",
      -1.7822265625
    ],
    [
      "def find_msb(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    while number > 0:\n        result += 1\n        number >>= 1\n    return result\n\ndef test_find_msb():\n    assert find_msb(1) == 0\n    assert find_msb(2) == 1\n    assert find_msb(4) == 2\n    assert find_msb(8) == 3\n    assert find_msb(16) == 4\n    assert find_msb(32) == 5\n    assert find_msb(64) == 6\n    assert find_msb(128) == 7\n    assert find_msb(256) == 8\n    assert find_msb(512) == 9\n    assert find_msb(1024) == 10\n    assert find_msb(2048) == 11\n    assert find_msb(4096) == 12\n    assert find_msb(8192) == 13\n    assert find_msb(16384) == 14\n    assert find_msb(32768) == 15\n    assert find_msb(65536) == 16\n    assert find_msb(131072) == 17\n    assert find_msb(262144) == 18\n    assert find_msb(524288) == 19\n    assert find_msb(1048576) == 20\n    assert find_msb(2097152) == 21\n    assert find_msb(4194304) == 22\n    assert find_msb(8388608) == 23\n    assert find_msb(16777216) == 24\n    assert find_msb(33554432) == 25\n    assert find_msb(67108864) == 26\n    assert find_msb(134217728) == 27\n    assert find_msb(268435456) == 28\n    assert find_msb(536870912) == 29\n    assert find_msb(1073741824) == 30\n    assert find_msb(2147483648) == 31\n    assert find_msb(4294967296) == 32\n    assert find",
      -1.845703125
    ],
    [
      "# write your code here\n\ndef most_significant_bit_set(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n\n\ndef test():\n    assert most_significant_bit_set(0) == 0\n    assert most_significant_bit_set(1) == 0\n    assert most_significant_bit_set(2) == 0\n    assert most_significant_bit_set(3) == 0\n    assert most_significant_bit_set(4) == 0\n    assert most_significant_bit_set(5) == 0\n    assert most_significant_bit_set(6) == 0\n    assert most_significant_bit_set(7) == 0\n    assert most_significant_bit_set(8) == 0\n    assert most_significant_bit_set(9) == 0\n    assert most_significant_bit_set(10) == 0\n    assert most_significant_bit_set(16) == 15\n    assert most_significant_bit_set(17) == 15\n    assert most_significant_bit_set(18) == 15\n    assert most_significant_bit_set(32) == 31\n    assert most_significant_bit_set(33) == 31\n    assert most_significant_bit_set(34) == 31\n    assert most_significant_bit_set(35) == 31\n    assert most_significant_bit_set(36) == 31\n    assert most_significant_bit_set(64) == 63\n    assert most_significant_bit_set(65) == 63\n    assert most_significant_bit_set(66) == 63\n    assert most_significant_bit_set(67) == 63\n    assert most_significant_bit_set(68) == 63\n    assert most_significant_bit_set(256) == 255\n    assert most_significant_bit_set(257) == 255\n    assert most_significant_bit_set(258) == 255\n    assert most_significant_bit_set(259) == 255\n    assert most_significant_bit_set(260) == 255\n    assert most_significant_bit_set(4096)",
      -2.294921875
    ],
    [
      "def findMSBSet(n):\n    \"\"\"\n    n: integer\n    return: an integer\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40",
      -2.431640625
    ],
    [
      "def get_msb(n):\n    \"\"\"\n    Returns the most significant bit number in n.\n    \"\"\"\n    return int(n) & -int(n)\n\n\ndef get_msb_set_bit(n):\n    \"\"\"\n    Returns the most significant bit set in n.\n    \"\"\"\n    return get_msb(n) - 1\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    assert(get_msb_set_bit(0) == 0)\n    assert(get_msb_set_bit(1) == 0)\n    assert(get_msb_set_bit(2) == 1)\n    assert(get_msb_set_bit(3) == 2)\n    assert(get_msb_set_bit(4) == 3)\n    assert(get_msb_set_bit(5) == 2)\n    assert(get_msb_set_bit(6) == 3)\n    assert(get_msb_set_bit(7) == 2)\n    assert(get_msb_set_bit(8) == 3)\n    assert(get_msb_set_bit(9) == 2)\n    assert(get_msb_set_bit(10) == 3)\n    assert(get_msb_set_bit(11) == 2)\n    assert(get_msb_set_bit(12) == 3)\n    assert(get_msb_set_bit(13) == 2)\n    assert(get_msb_set_bit(14) == 3)\n    assert(get_msb_set_bit(15) == 2)\n    assert(get_msb_set_bit(16) == 3)\n    assert(get_msb_set_bit(17) == 2)\n    assert(get_msb_set_bit(18) == 3)\n    assert(get_msb_set_bit(19) == 2)\n    assert(get_msb_set_bit(20) == 3)\n    assert(get_msb_set_bit(21) == 2)\n    assert(get_msb_set_bit(22) == 3)",
      -2.435546875
    ],
    [
      "def most_significant_bit(n):\n    \"\"\"\n    Input:\n        n - integer\n    Output:\n        the most significant bit number which is also a set bit\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 4:\n        return 2\n    elif n == 8:\n        return 3\n    elif n == 16:\n        return 4\n    elif n == 32:\n        return 5\n    elif n == 64:\n        return 6\n    elif n == 128:\n        return 7\n    else:\n        return -1\n\n# Test Cases\n# n = 0\n# print(most_significant_bit(n))\n\n# n = 1\n# print(most_significant_bit(n))\n\n# n = 2\n# print(most_significant_bit(n))\n\n# n = 4\n# print(most_significant_bit(n))\n\n# n = 8\n# print(most_significant_bit(n))\n\n# n = 16\n# print(most_significant_bit(n))\n\n# n = 32\n# print(most_significant_bit(n))\n\n# n = 64\n# print(most_significant_bit(n))\n\n# n = 128\n# print(most_significant_bit(n))\n\n# n = 511\n# print(most_significant_bit(n))\n\n# n = 512\n# print(most_significant_bit(n))\n\n# n = 1023\n# print(most_significant_bit(n))\n\n# n = 1024\n# print(most_significant_bit(n))\n\n# n = 65\n# print(most_significant_bit(n))\n\n# n = 4096\n# print(most_significant_bit(n))\n\n# n = 65535\n# print(most_significant_bit(n))\n\n# n = 65536\n# print(most_significant_bit(n))\n\n# n = 16777215\n# print(most_significant_bit(n))\n\n# n = 16777216\n# print(most_significant_bit(",
      -2.5234375
    ],
    [
      "def most_significant_bit(n):\n    \"\"\"\n    n is a number.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    bits = 0\n    while n!= 0:\n        n >>= 1\n        bits += 1\n\n    return bits\n\nprint most_significant_bit(0)\nprint most_significant_bit(1)\nprint most_significant_bit(2)\nprint most_significant_bit(3)\nprint most_significant_bit(4)\nprint most_significant_bit(5)\nprint most_significant_bit(6)\nprint most_significant_bit(7)\nprint most_significant_bit(8)\nprint most_significant_bit(9)\nprint most_significant_bit(10)\nprint most_significant_bit(11)\nprint most_significant_bit(12)\nprint most_significant_bit(13)\nprint most_significant_bit(14)\nprint most_significant_bit(15)\nprint most_significant_bit(16)\nprint most_significant_bit(17)\nprint most_significant_bit(18)\nprint most_significant_bit(19)\nprint most_significant_bit(20)\nprint most_significant_bit(21)\nprint most_significant_bit(22)\nprint most_significant_bit(23)\nprint most_significant_bit(24)\nprint most_significant_bit(25)\nprint most_significant_bit(26)\nprint most_significant_bit(27)\nprint most_significant_bit(28)\nprint most_significant_bit(29)\nprint most_significant_bit(30)\nprint most_significant_bit(31)\nprint most_significant_bit(32)\nprint most_significant_bit(33)\nprint most_significant_bit(34)\nprint most_significant_bit(35)\nprint most_significant_bit(36)\nprint most_significant_bit(37)\nprint most_significant_bit(38)\nprint most_significant_bit(39)\nprint most_significant_bit(40)\nprint most_significant_bit(41)\nprint most_significant_bit(42)\nprint most_significant_bit(43)\nprint most_significant_bit(44)",
      -2.73828125
    ],
    [
      "def find_msb_set_bit(n):\n    \"\"\"\n    :param n: an integer\n    :return: the most significant bit number which is also a set bit\n    \"\"\"\n    return 1 << (n - 1).bit_length()\n\nif __name__ == '__main__':\n    assert(find_msb_set_bit(2) == 1)\n    assert(find_msb_set_bit(5) == 3)\n    assert(find_msb_set_bit(10) == 5)\n    assert(find_msb_set_bit(15) == 7)\n    assert(find_msb_set_bit(16) == 8)\n    assert(find_msb_set_bit(31) == 15)\n    assert(find_msb_set_bit(32) == 16)\n    assert(find_msb_set_bit(33) == 18)\n    assert(find_msb_set_bit(63) == 24)\n    assert(find_msb_set_bit(64) == 25)\n    assert(find_msb_set_bit(127) == 30)\n    assert(find_msb_set_bit(128) == 31)\n    assert(find_msb_set_bit(255) == 31)\n    assert(find_msb_set_bit(256) == 32)\n    assert(find_msb_set_bit(511) == 31)\n    assert(find_msb_set_bit(512) == 32)\n    assert(find_msb_set_bit(1024) == 31)\n    assert(find_msb_set_bit(1025) == 32)\n    assert(find_msb_set_bit(2048) == 31)\n    assert(find_msb_set_bit(2049) == 32)\n    assert(find_msb_set_bit(4096) == 31)\n    assert(find_msb_set_bit(4097) == 32)\n    assert(find_msb_set_bit(8192) == 31)\n    assert(find_msb_set_bit(8193) == 32)\n    assert(",
      -2.78125
    ],
    [
      "def most_significant_bit_set(x):\n    \"\"\"\n    Return the number of the most significant bit which is also a set bit.\n    Input:\n        x: an integer\n    Output:\n        the number of the most significant bit which is also a set bit.\n    \"\"\"\n    if x == 0:\n        return 0\n    else:\n        return 1 + most_significant_bit_set(x & -x)\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert most_significant_bit_set(0) == 0, \"0\"\n    assert most_significant_bit_set(1) == 1, \"1\"\n    assert most_significant_bit_set(2) == 2, \"2\"\n    assert most_significant_bit_set(3) == 3, \"3\"\n    assert most_significant_bit_set(4) == 4, \"4\"\n    assert most_significant_bit_set(5) == 5, \"5\"\n    assert most_significant_bit_set(6) == 6, \"6\"\n    assert most_significant_bit_set(7) == 7, \"7\"\n    assert most_significant_bit_set(8) == 8, \"8\"\n    assert most_significant_bit_set(9) == 9, \"9\"\n    assert most_significant_bit_set(10) == 10, \"10\"\n    assert most_significant_bit_set(11) == 11, \"11\"\n    assert most_significant_bit_set(12) == 12, \"12\"\n    assert most_significant_bit_set(13) == 13, \"13\"\n    assert most_significant_bit_set(14) == 14, \"14\"\n    assert most_significant_bit_set(15) == 15, \"15\"\n    assert most_significant_bit_set(16) == 16, \"16\"\n    assert most_significant_bit_set(17) == 17, \"17\"\n    assert most_significant_bit_set(18) == 18, \"18\"\n    assert most_significant_bit_set(19) == 19, \"19\"",
      -3.03125
    ],
    [
      "#!/usr/bin/env python\n\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport re\n\nclass Solution(object):\n    \"\"\"\n    @param a: An integer\n    @return: An integer\n    \"\"\"\n    def maxSignificantBit(self, a):\n        if a <= 0:\n            return 0\n\n        # 1st: find the first bit\n        for i in range(32):\n            if (a & (1 << i))!= 0:\n                break\n        else:\n            return i\n\n        # 2nd: find the next most significant bit\n        for i in range(i + 1, 32):\n            if (a & (1 << i))!= 0:\n                return i\n\n        # 3rd: find the next most significant bit\n        for i in range(i + 1, 32):\n            if (a & (1 << i))!= 0:\n                return i\n\n        # 4th: find the next most significant bit\n        for i in range(i + 1, 32):\n            if (a & (1 << i))!= 0:\n                return i\n\n        return i\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxSignificantBit(16)\n    print s.maxSignificantBit(42)\n    print s.maxSignificantBit(-1)\n    print s.maxSignificantBit(0)\n    print s.maxSignificantBit(1)\n    print s.maxSignificantBit(2)\n    print s.maxSignificantBit(3)\n    print s.maxSignificantBit(4)\n    print s.maxSignificantBit(5)\n    print s.maxSignificantBit(6)\n    print s.maxSignificantBit(7)\n    print s.maxSignificantBit(8)\n    print s.maxSignificantBit(9)\n    print s.maxSignificantBit(10)\n    print s.maxSignificantBit(11)\n    print s.maxSignificantBit(12)\n    print s.maxSignificantBit(13)\n    print s.maxSignificantBit(14)\n    print s.maxSignificantBit(15)\n    print s",
      -3.21484375
    ],
    [
      "def find_msb(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    while n > 0:\n        n >>= 1\n        count += 1\n    return count - 1\n\nif __name__ == '__main__':\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111111111111111111)\n    print find_msb(0b1111111111111111111111111111111111111111111111111111",
      -3.341796875
    ],
    [
      "def find_msb(num):\n    \"\"\"\n    >>> find_msb(0b10101101)\n    7\n    >>> find_msb(0b
      -3.43359375
    ],
    [
      "# https://www.hackerrank.com/challenges/set-bits/problem\n\ndef find_set_bit(n):\n    \"\"\"\n    :param n: A positive integer\n    :return: The most significant bit number which is also a set bit\n    \"\"\"\n    # Using bitwise logic to find the most significant bit number which is also a set bit.\n    # The most significant bit number which is also a set bit is the number of bits which are set to 1.\n    # i.e. x = 0b0001 or x = 0b001\n    # If the number is 0b0 then the most significant bit number is 0.\n    # Otherwise the most significant bit number is the number of bits which are set to 1.\n    # i.e. x = 0b0101 or x = 0b1100\n    # The least significant bit number which is also a set bit is the number of bits which are set to 1.\n    # i.e. x = 0b1111 or x = 0b11111\n    # The most significant bit number which is also a set bit is the number of bits which are set to 1.\n    # i.e. x = 0b1111 or x = 0b11111\n    # The least significant bit number which is also a set bit is the number of bits which are set to 1.\n    # i.e. x = 0b11111 or x = 0b11111\n    # The most significant bit number which is also a set bit is the number of bits which are set to 1.\n    # i.e. x = 0b1111 or x = 0b11111\n    # The least significant bit number which is also a set bit is the number of bits which are set to 1.\n    # i.e. x = 0b11111 or x = 0b11111\n    # The most significant bit number which is also a set bit is the number of bits which are set to 1.\n    # i.e. x = 0b1111 or x = 0b11111\n    # The least significant bit number which is also a set bit is the number of bits which are set to 1.\n    # i.e. x = 0b11111 or x = 0b11111\n    # The most significant bit number which is also a set bit is the number",
      -3.634765625
    ],
    [
      "#!/usr/bin/python\n\nimport sys\n\n# Input\n# 3\n# 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1",
      -3.67578125
    ],
    [
      "import sys\n\nclass Solution(object):\n    \"\"\"\n    @param num: An integer\n    @return: An integer\n    \"\"\"\n    def getMSB(self, num):\n        return self.getMSB_python(num)\n\n    def getMSB_python(self, num):\n        res = 0\n        while num > 0:\n            res = num & -num\n            num = num >> 1\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.getMSB(2147483648)\n    print s.getMSB(2147483647)\n    print s.getMSB(2147483647)\n    print s.getMSB(2147483646)\n    print s.getMSB(2147483646)\n    print s.getMSB(2147483647)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.getMSB(2147483656)\n    print s.",
      -3.74609375
    ],
    [
      "def find_msb(num):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n\n    :param num: integer\n    :return: integer\n    \"\"\"\n    msb = 0\n    while(msb < 32 and num & (1 << msb) == 0):\n        msb += 1\n    return msb\n\nprint(find_msb(0b10101))\nprint(find_msb(0b11101))\nprint(find_msb(0b10111))\nprint(find_msb(0b1011101))\nprint(find_msb(0b10111010))\nprint(find_msb(0b101110110))\nprint(find_msb(0b1011101110))\nprint(find_msb(0b10111011111))\nprint(find_msb(0b101110111111))\nprint(find_msb(0b1011101111111))\nprint(find_msb(0b10111011111111))\nprint(find_msb(0b101110111111111))\nprint(find_msb(0b1011101111111111))\nprint(find_msb(0b10111011111111111))\nprint(find_msb(0b101110111111111111))\nprint(find_msb(0b1011101111111111111))\nprint(find_msb(0b10111011111111111111))\nprint(find_msb(0b101110111111111111111))",
      -3.84765625
    ],
    [
      "# Example 1\ndef most_significant_bit_number(n):\n    \"\"\"\n    n - number to be checked\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    elif n % 7 == 0:\n        return 7\n    else:\n        return -1\n\n# Example 2\ndef most_significant_bit_number_2(n):\n    \"\"\"\n    n - number to be checked\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    elif n % 7 == 0:\n        return 7\n    else:\n        return -1\n\n# Example 3\ndef most_significant_bit_number_3(n):\n    \"\"\"\n    n - number to be checked\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    elif n % 7 == 0:\n        return 7\n    else:\n        return -1\n\n# Example 4\ndef most_significant_bit_number_4(n):\n    \"\"\"\n    n - number to be checked\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    elif n % 7 == 0:\n        return 7\n    else:\n        return -1\n\n# Example 5\ndef most_significant_bit_number_5(n):\n    \"\"\"\n    n - number to be checked",
      -4.08984375
    ],
    [
      "# Function to find the most significant bit number which is also a set bit\ndef findMSB(n):\n    msb = 0\n    while n >> msb == 0:\n        msb += 1\n    return msb\n\n# Test Cases\nprint findMSB(0b1000000000000000000000000000000000000000000000000000000000000000)\nprint findMSB(0b11101111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMSB(0b1111111111111111111111111111111111111111111111111111111111111111)\nprint findMS",
      -4.140625
    ],
    [
      "import math\n\ndef most_significant_bit(n):\n    \"\"\"\n    For a positive integer, find the most significant bit which is also a set bit.\n    If there are multiple such bits, return the largest one.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # Find the most significant bit in n\n    msb = 1\n    while n & msb:\n        msb = msb << 1\n    # Find the set bit in msb\n    msb = msb - 1\n    while n & msb:\n        msb = msb >> 1\n    return msb\n\nif __name__ == \"__main__\":\n    assert most_significant_bit(0) == 0\n    assert most_significant_bit(1) == 0\n    assert most_significant_bit(2) == 1\n    assert most_significant_bit(3) == 1\n    assert most_significant_bit(4) == 2\n    assert most_significant_bit(5) == 2\n    assert most_significant_bit(6) == 3\n    assert most_significant_bit(7) == 3\n    assert most_significant_bit(8) == 3\n    assert most_significant_bit(9) == 3\n    assert most_significant_bit(10) == 4\n    assert most_significant_bit(11) == 4\n    assert most_significant_bit(12) == 4\n    assert most_significant_bit(13) == 4\n    assert most_significant_bit(14) == 4\n    assert most_significant_bit(15) == 4\n    assert most_significant_bit(16) == 4\n    assert most_significant_bit(17) == 4\n    assert most_significant_bit(18) == 4\n    assert most_significant_bit(19) == 4\n    assert most_significant_bit(20) == 4\n    assert most_significant_bit(21) == 4\n    assert most_significant_bit(22) == 4\n    assert most_significant_bit(23) == 4\n    assert most_significant_bit(24) == 4\n    assert most_significant_bit(25) == 4\n    assert most_significant_bit(26) == 4",
      -4.1875
    ],
    [
      "def get_most_significant_bit(value):\n    \"\"\"\n    Args:\n        value: integer\n    Returns:\n        The most significant bit number.\n    \"\"\"\n    for i in range(0, len(bin(value))-1):\n        if value & (1<<i)!= 0:\n            return i\n\n\nprint(get_most_significant_bit(0b11111111))\nprint(get_most_significant_bit(0b1111111111111111))\nprint(get_most_significant_bit(0b1010))\nprint(get_most_significant_bit(0b
      -4.5234375
    ],
    [
      "#!/usr/bin/env python\n\ndef find_msb_set_bit(n):\n    '''\n    n is an integer\n    return the most significant bit number which is also a set bit.\n    '''\n    # The formula to get the most significant bit number which is also a set bit is:\n    # (n & ~(n - 1)) == n\n    # The formula to get the least significant bit number which is also a set bit is:\n    # ~(n & (n - 1)) == ~n\n    # The formula to get the most significant bit number which is also a set bit is:\n    # (n & ~(n - 1)) == n - 1\n    # The formula to get the least significant bit number which is also a set bit is:\n    # ~(n & (n - 1)) == ~(n - 1)\n    # The formula to get the most significant bit number which is also a set bit is:\n    # (n & ~(n - 1)) == n\n    # The formula to get the least significant bit number which is also a set bit is:\n    # ~(n & (n - 1)) == ~(n - 1)\n    # The formula to get the most significant bit number which is also a set bit is:\n    # (n & ~(n - 1)) == n - 1\n    # The formula to get the least significant bit number which is also a set bit is:\n    # ~(n & (n - 1)) == ~(n - 1)\n    # The formula to get the most significant bit number which is also a set bit is:\n    # (n & ~(n - 1)) == n - 1\n    # The formula to get the least significant bit number which is also a set bit is:\n    # ~(n & (n - 1)) == ~(n - 1)\n    # The formula to get the most significant bit number which is also a set bit is:\n    # (n & ~(n - 1)) == n - 1\n    # The formula to get the least significant bit number which is also a set bit is:\n    # ~(n & (n - 1)) == ~(n - 1)\n    # The formula to get the most significant bit number which is also a set bit",
      -4.68359375
    ],
    [
      "def most_significant_bit(number):\n    \"\"\"\n    @param number: an integer\n    @return: the most significant bit number\n    \"\"\"\n    # write your code here\n    number = number & ~number\n    return number\n\ndef test_most_significant_bit():\n    assert most_significant_bit(0) == 0\n    assert most_significant_bit(1) == 1\n    assert most_significant_bit(2) == 2\n    assert most_significant_bit(3) == 3\n    assert most_significant_bit(4) == 4\n    assert most_significant_bit(5) == 5\n    assert most_significant_bit(6) == 6\n    assert most_significant_bit(7) == 7\n    assert most_significant_bit(8) == 8\n    assert most_significant_bit(9) == 9\n    assert most_significant_bit(10) == 10\n    assert most_significant_bit(11) == 11\n    assert most_significant_bit(12) == 12\n    assert most_significant_bit(13) == 13\n    assert most_significant_bit(14) == 14\n    assert most_significant_bit(15) == 15\n    assert most_significant_bit(16) == 16\n    assert most_significant_bit(17) == 17\n    assert most_significant_bit(18) == 18\n    assert most_significant_bit(19) == 19\n    assert most_significant_bit(20) == 20\n    assert most_significant_bit(21) == 21\n    assert most_significant_bit(22) == 22\n    assert most_significant_bit(23) == 23\n    assert most_significant_bit(24) == 24\n    assert most_significant_bit(25) == 25\n    assert most_significant_bit(26) == 26\n    assert most_significant_bit(27) == 27\n    assert most_significant_bit(28) == 28\n    assert most_significant_bit(29) == 29\n    assert most_significant_bit(30) == 30\n    assert most_significant_bit(31) == 31\n    assert most_significant_bit(32) == 32\n    assert most_significant_bit(33) == 33\n    assert most_significant",
      -4.734375
    ],
    [
      "def findMSB(x):\n    \"\"\"\n    Find the most significant bit in an integer.\n    \"\"\"\n    # return the index of the most significant bit in x\n    # x is the number of the bits we are interested in\n    # x is an integer, so it is not an array\n    # return the index of the first bit which is set\n    # we can do this by finding the position of the first bit which is set\n    # and then subtracting 1 to get the position of the first bit which is not set\n    # the result is the index of the first bit which is set\n    # the index of the first bit which is not set is the index of the most significant bit\n    # the index of the first bit which is set is the index of the first bit which is not set\n    # the index of the first bit which is not set is the index of the most significant bit\n    # the index of the first bit which is set is the index of the most significant bit\n    # the index of the most significant bit is the index of the first bit which is not set\n    # the index of the most significant bit is the index of the first bit which is set\n    # the index of the most significant bit is the index of the first bit which is set\n    # the index of the most significant bit is the index of the first bit which is not set\n    # the index of the most significant bit is the index of the first bit which is set\n    # the index of the most significant bit is the index of the first bit which is not set\n    # the index of the most significant bit is the index of the first bit which is set\n    # the index of the most significant bit is the index of the first bit which is set\n    # the index of the most significant bit is the index of the first bit which is not set\n    # the index of the most significant bit is the index of the first bit which is set\n    # the index of the most significant bit is the index of the first bit which is not set\n    # the index of the most significant bit is the index of the first bit which is set\n    # the index of the most significant bit is the index of the first bit which is set\n    # the index of the most significant bit is the index of the first bit which is not set\n    # the index of the most significant",
      -4.76953125
    ],
    [
      "def find_msb(n):\n    \"\"\"\n    n = 2147483648  ->  0\n    n = 2147483647  ->  1\n    n = 2147483646  ->  2\n    n = 2147483645  ->  3\n    n = 2147483644  ->  4\n    n = 2147483645  ->  5\n    n = 2147483643  ->  6\n    n = 2147483642  ->  7\n    n = 2147483641  ->  8\n    n = 2147483640  ->  9\n    n = 2147483639  ->  10\n    n = 2147483638  ->  11\n    n = 2147483637  ->  12\n    n = 2147483636  ->  13\n    n = 2147483635  ->  14\n    n = 2147483634  ->  15\n    n = 2147483633  ->  16\n    n = 2147483632  ->  17\n    n = 2147483631  ->  18\n    n = 2147483630  ->  19\n    n = 2147483629  ->  20\n    n = 2147483628  ->  21\n    n = 2147483627  ->  22\n    n = 2147483626  ->  23\n    n = 2147483625  ->  24\n    n = 2147483624  ->  25\n    n = 2147483623  ->  26\n    n = 2147483622  ->  27\n    n = 2147483621  ->  28\n    n = 2147483620  ->  29\n    n = 2147483619  ->  30\n    n = 2147483618  ->  31\n    n = 2147483617  ->  32\n    n = 2147483616  ->  33\n    n = 2147483615  ->  34\n    n = 2147483614  ->  35\n    n = 2147483613  ->  36\n    n = 2147483612  ->  37\n    n = 2147",
      -5.37890625
    ],
    [
      "import sys\n\n# input\na = int(sys.stdin.readline())\n\n# a is an integer\n# a is positive and no more than 32 bits\n# a is a set of 1s\n# a is a binary number\n# a is a string\n# a is a tuple\n# a is a list\n# a is a dictionary\n# a is a tuple of two integers\n# a is a list of integers\n# a is a list of strings\n# a is a list of dictionaries\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists\n# a is a list of lists",
      -5.4453125
    ],
    [
      "def find_msb(num):\n    \"\"\"\n    Find the most significant bit of a number\n    \"\"\"\n    if num == 0:\n        return 0\n    return 1 + find_msb(num >> 1)\n\n\ndef find_msb_set_bit(num):\n    \"\"\"\n    Find the most significant bit of a number which is also a set bit.\n    \"\"\"\n    if num == 0:\n        return 0\n    return 1 + find_msb_set_bit(num >> 1)\n\n\ndef main():\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffe))\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffd))\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffc))\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffb))\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffa))\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffc))\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffd))\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffe))\n    print(find_msb_set_bit(0xffffffffffffffff))\n    print(find_msb_set_bit(0xfffffffffffffffc))\n    print(find_msb_set_bit(0xffffffffffffffff))",
      -5.79296875
    ],
    [
      "def find_msb(number):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n    \"\"\"\n    return 1 + find_msb(number & (number-1))\n\n# ------------------------------------------------------------\n# Test Code\n# ------------------------------------------------------------\n\ndef test_find_msb():\n    assert find_msb(0x1) == 1\n    assert find_msb(0x2) == 2\n    assert find_msb(0x4) == 3\n    assert find_msb(0x8) == 4\n    assert find_msb(0x10) == 5\n    assert find_msb(0x20) == 6\n    assert find_msb(0x40) == 7\n    assert find_msb(0x80) == 8\n    assert find_msb(0x100) == 9\n    assert find_msb(0x200) == 10\n    assert find_msb(0x400) == 11\n    assert find_msb(0x800) == 12\n    assert find_msb(0x1000) == 13\n    assert find_msb(0x2000) == 14\n    assert find_msb(0x4000) == 15\n    assert find_msb(0x8000) == 16\n    assert find_msb(0x10000) == 17\n    assert find_msb(0x20000) == 18\n    assert find_msb(0x40000) == 19\n    assert find_msb(0x80000) == 20\n    assert find_msb(0x100000) == 21\n    assert find_msb(0x200000) == 22\n    assert find_msb(0x400000) == 23\n    assert find_msb(0x800000) == 24\n    assert find_msb(0x1000000) == 25\n    assert find_msb(0x2000000) == 26\n    assert find_msb(0x4000000) == 27\n    assert find_msb(0x8000000) == 28\n    assert find_msb(0x10000000) == 29\n    assert find_msb(0x20000000) == 30\n    assert find_msb(",
      -5.796875
    ],
    [
      "def most_significant_bit_number(n):\n    if n == 0:\n        return 0\n    else:\n        # n is a positive integer\n        n = n & -n\n        # n is now the smallest non-negative integer\n        # which is a power of 2\n        while n!= 0:\n            n = n >> 1\n            if n == 1:\n                return 1\n            else:\n                n = n >> 1\n    return 0\n\n\nif __name__ == '__main__':\n    assert most_significant_bit_number(0) == 0\n    assert most_significant_bit_number(1) == 0\n    assert most_significant_bit_number(2) == 1\n    assert most_significant_bit_number(3) == 1\n    assert most_significant_bit_number(4) == 2\n    assert most_significant_bit_number(5) == 2\n    assert most_significant_bit_number(6) == 3\n    assert most_significant_bit_number(7) == 3\n    assert most_significant_bit_number(8) == 4\n    assert most_significant_bit_number(9) == 4\n    assert most_significant_bit_number(10) == 5\n    assert most_significant_bit_number(11) == 5\n    assert most_significant_bit_number(12) == 6\n    assert most_significant_bit_number(13) == 6\n    assert most_significant_bit_number(14) == 7\n    assert most_significant_bit_number(15) == 7\n    assert most_significant_bit_number(16) == 8\n    assert most_significant_bit_number(17) == 8\n    assert most_significant_bit_number(18) == 9\n    assert most_significant_bit_number(19) == 9\n    assert most_significant_bit_number(20) == 10\n    assert most_significant_bit_number(21) == 10\n    assert most_significant_bit_number(22) == 11\n    assert most_significant_bit_number(23) == 11\n    assert most_significant_bit_number(24) == 12\n    assert most_significant_bit_number(25) == 12\n    assert most_significant",
      -6.1484375
    ],
    [
      "import sys\n\ndef get_most_significant_bit(n):\n    \"\"\"\n    Find the most significant bit number of n, which is also a set bit.\n\n    If n is negative, then the most significant bit number is the number of\n    bits which are set in n - 1.\n    \"\"\"\n\n    if n < 0:\n        return n + 1\n    else:\n        return n & -n\n\n\ndef test_get_most_significant_bit():\n    assert get_most_significant_bit(0) == 0\n    assert get_most_significant_bit(1) == 0\n    assert get_most_significant_bit(2) == 1\n    assert get_most_significant_bit(3) == 2\n    assert get_most_significant_bit(4) == 3\n    assert get_most_significant_bit(5) == 4\n    assert get_most_significant_bit(6) == 5\n    assert get_most_significant_bit(7) == 6\n    assert get_most_significant_bit(8) == 7\n    assert get_most_significant_bit(9) == 8\n    assert get_most_significant_bit(10) == 9\n    assert get_most_significant_bit(11) == 10\n    assert get_most_significant_bit(12) == 11\n    assert get_most_significant_bit(13) == 12\n    assert get_most_significant_bit(14) == 13\n    assert get_most_significant_bit(15) == 14\n    assert get_most_significant_bit(16) == 15\n    assert get_most_significant_bit(17) == 16\n    assert get_most_significant_bit(18) == 17\n    assert get_most_significant_bit(19) == 18\n    assert get_most_significant_bit(20) == 19\n    assert get_most_significant_bit(21) == 20\n    assert get_most_significant_bit(22) == 21\n    assert get_most_significant_bit(23) == 22\n    assert get_most_significant_bit(24) == 23\n    assert get_most_significant_bit(25) == 24\n    assert get_most_significant_bit(26) == 25",
      -6.1875
    ],
    [
      "def most_significant_bit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n & 1 == 0:\n        return 1\n    n >>= 1\n    while n!= 0:\n        n >>= 1\n        if n & 1 == 1:\n            return 1\n    return 0\n\n# Your most_significant_bit function should return the smallest possible index for the given number.\n# If the number is not a set bit, return -1.\n#\n# Examples:\n#   most_significant_bit(0) = 0\n#   most_significant_bit(1) = 0\n#   most_significant_bit(1) = 1\n#   most_significant_bit(2) = 2\n#   most_significant_bit(3) = -1\n#   most_significant_bit(4) = -1\n#   most_significant_bit(5) = -1\n#   most_significant_bit(6) = -1\n#   most_significant_bit(7) = -1\n#   most_significant_bit(8) = -1\n#   most_significant_bit(9) = -1\n#   most_significant_bit(10) = -1\n#   most_significant_bit(100) = -1",
      -6.328125
    ],
    [
      "import math\n\ndef findMSB(num):\n    \"\"\"\n    Find the most significant bit number.\n    \"\"\"\n    return math.ceil(math.log(num, 2))\n\nif __name__ == '__main__':\n    test_cases = [\n        (0, 0),\n        (1, 0),\n        (2, 1),\n        (3, 2),\n        (4, 2),\n        (5, 2),\n        (6, 3),\n        (7, 3),\n        (8, 3),\n        (9, 3),\n        (10, 4),\n        (11, 4),\n        (12, 4),\n        (13, 4),\n        (14, 4),\n        (15, 4),\n        (16, 4),\n        (17, 4),\n        (18, 4),\n        (19, 4),\n        (20, 4),\n        (21, 4),\n        (22, 4),\n        (23, 4),\n        (24, 4),\n        (25, 4),\n        (26, 4),\n        (27, 4),\n        (28, 4),\n        (29, 4),\n        (30, 4),\n        (31, 4),\n        (32, 4),\n        (33, 4),\n        (34, 4),\n        (35, 4),\n        (36, 4),\n        (37, 4),\n        (38, 4),\n        (39, 4),\n        (40, 4),\n        (41, 4),\n        (42, 4),\n        (43, 4),\n        (44, 4),\n        (45, 4),\n        (46, 4),\n        (47, 4),\n        (48, 4),\n        (49, 4),\n        (50, 4),\n        (51, 4),\n        (52, 4),\n        (53, 4),\n        (54, 4),\n        (55, 4),\n        (56, 4),\n        (57, 4),\n        (58, 4),\n        (59, 4),\n        (60, 4),\n        (61, 4),\n        (62, 4),\n        (63, 4),",
      -6.3515625
    ],
    [
      "def find_msb_set_bit(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return find_msb_set_bit(n >> 1) + 1\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_msb_set_bit(0) == 0, \"Test Case 1\"\n    assert find_msb_set_bit(1) == 1, \"Test Case 2\"\n    assert find_msb_set_bit(2) == 2, \"Test Case 3\"\n    assert find_msb_set_bit(3) == 3, \"Test Case 4\"\n    assert find_msb_set_bit(4) == 4, \"Test Case 5\"\n    assert find_msb_set_bit(5) == 5, \"Test Case 6\"\n    assert find_msb_set_bit(6) == 6, \"Test Case 7\"\n    assert find_msb_set_bit(7) == 7, \"Test Case 8\"\n    assert find_msb_set_bit(8) == 7, \"Test Case 9\"\n    assert find_msb_set_bit(9) == 6, \"Test Case 10\"\n    assert find_msb_set_bit(10) == 6, \"Test Case 11\"\n    assert find_msb_set_bit(11) == 5, \"Test Case 12\"\n    assert find_msb_set_bit(12) == 5, \"Test Case 13\"\n    assert find_msb_set_bit(13) == 4, \"Test Case 14\"\n    assert find_msb_set_bit(14) == 4, \"Test Case 15\"\n    assert find_msb_set_bit(15) == 3, \"Test Case 16\"\n    assert find_msb_set_bit(16) == 3, \"Test Case 17\"\n    assert find_msb_set_bit(17) == 2, \"Test Case 18\"",
      -7.328125
    ],
    [
      "def most_significant_bit(number):\n    if number & 0x1 == 1:\n        return number & 0xFFFFFFFE\n    else:\n        return number & 0xFFFFFFFC\n\n# Test Case\nprint(\"{0:b}\".format(0xFFFFFFFE))\nprint(\"{0:b}\".format(0xFFFFFFFC))\nprint(\"{0:b}\".format(0xFFFFFFFE1))\nprint(\"{0:b}\".format(0xFFFFFFFC1))\nprint(\"{0:b}\".format(0xFFFFFFFE0))\nprint(\"{0:b}\".format(0xFFFFFFFC0))\nprint(\"{0:b}\".format(0xFFFFFFFE1))\nprint(\"{0:b}\".format(0xFFFFFFFC1))\nprint(\"{0:b}\".format(0xFFFFFFFE0))\nprint(\"{0:b}\".format(0xFFFFFFFC0))\nprint(\"{0:b}\".format(0xFFFFFFFE1))\nprint(\"{0:b}\".format(0xFFFFFFFC1))\nprint(\"{0:b}\".format(0xFFFFFFFE0))\nprint(\"{0:b}\".format(0xFFFFFFFC0))\nprint(\"{0:b}\".format(0xFFFFFFFE1))\nprint(\"{0:b}\".format(0xFFFFFFFC1))\nprint(\"{0:b}\".format(0xFFFFFFFE0))\nprint(\"{0:b}\".format(0xFFFFFFFC0))\n\n# Output\n# 3\n# 0\n# 1\n# 0\n# 1\n# 1\n# 1\n# 0\n# 1\n# 0\n# 1\n# 0\n# 1\n# 1\n# 1\n# 1\n# 0\n# 1\n# 0\n# 1\n# 1\n# 1\n# 1\n# 1\n# 0\n# 1\n# 0\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1",
      -7.72265625
    ],
    [
      "# @include\ndef find_msb(n):\n    # Assumption:\n    # 1. The most significant bit is the bit which has the largest index.\n    # 2. The number of bits is always less than 2^32-1.\n    # 3. If the number is zero, return -1.\n    # 4. If the number is negative, return -1.\n    # 5. If the number is positive, return the index of the most significant bit.\n    if n == 0:\n        return -1\n    if n < 0:\n        return -1\n    # If n is a positive integer, return the index of the most significant bit.\n    if n > 0:\n        return (n & -n).bit_length() - 1\n    return -1\n# @exclude\n\n\ndef main():\n    assert find_msb(0) == -1\n    assert find_msb(1) == -1\n    assert find_msb(2) == -1\n    assert find_msb(3) == -1\n    assert find_msb(4) == -1\n    assert find_msb(5) == -1\n    assert find_msb(6) == -1\n    assert find_msb(7) == -1\n    assert find_msb(8) == -1\n    assert find_msb(9) == -1\n    assert find_msb(10) == -1\n    assert find_msb(11) == -1\n    assert find_msb(12) == -1\n    assert find_msb(13) == -1\n    assert find_msb(14) == -1\n    assert find_msb(15) == -1\n    assert find_msb(16) == -1\n    assert find_msb(17) == -1\n    assert find_msb(18) == -1\n    assert find_msb(19) == -1\n    assert find_msb(20) == -1\n    assert find_msb(21) == -1\n    assert find_msb(22) == -1\n    assert find_msb(23) == -1\n    assert find_msb(24) == -1",
      -9.0625
    ],
    [
      "class Solution(object):\n    def mostSignificantBit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # 0b0 is a set bit\n        # 0b1 is a set bit\n        # 0b10 is a set bit\n        # 0b11 is a set bit\n        # 0b100 is a set bit\n        # 0b101 is a set bit\n        # 0b110 is a set bit\n        # 0b111 is a set bit\n        # 0b1000 is a set bit\n        # 0b1001 is a set bit\n        # 0b1010 is a set bit\n        # 0b1011 is a set bit\n        # 0b1100 is a set bit\n        # 0b1101 is a set bit\n        # 0b1110 is a set bit\n        # 0b1111 is a set bit\n        # 0b111000 is a set bit\n        # 0b111001 is a set bit\n        # 0b111110 is a set bit\n        # 0b111111 is a set bit\n        # 0b1111111 is a set bit\n        # 0b11111111 is a set bit\n        # 0b111111111 is a set bit\n        # 0b111111111 is a set bit\n        # 0b11111111111 is a set bit\n        # 0b11111111111 is a set bit\n        # 0b1111111111111 is a set bit\n        # 0b111111111111111 is a set bit\n        # 0b1111111111111111 is a set bit\n        # 0b11111111111111111 is a set bit\n        # 0b111111111111111111 is a set bit\n        # 0b11111111111111111111 is a set bit\n        # 0b111111111111111111111 is a set bit\n        # 0b11111111111111111111111 is a set bit\n        # 0b111111111111111111111111 is a set bit\n        # 0b11111111111111111111111111 is a set bit\n        # 0b1111111111111111111111111111 is a set bit\n        # 0b11111111111111111111111111111 is a set bit\n        # 0b11111111111111111111111111111 is a set bit\n        # 0",
      -9.8515625
    ],
    [
      "def is_set_bit(n):\n    \"\"\"\n    Returns the most significant bit number which is also a set bit.\n    >>> is_set_bit(0b11111111111111111111111111111111)\n    0\n    >>> is_set_bit(0b11111111111111111111111111111110)\n    1\n    >>> is_set_bit(0b11111111111111111111111111111101)\n    2\n    >>> is_set_bit(0b11111111111111111111111111111101)\n    2\n    >>> is_set_bit(0b11111111111111111111111111111101)\n    2\n    >>> is_set_bit(0b11111111111111111111111111111101)\n    2\n    >>> is_set_bit(0b11111111111111111111111111111101)\n    2\n    >>> is_set_bit(0b11111111111111111111111111111101)\n    2\n    >>> is_set_bit(0b11111111111111111111111111111101)\n    2\n    >>> is_set_bit(0b11111111111111111111111111111101)\n    2\n    >>> is_set_bit(0b11111111111111111111111111111101)\n    2\n    \"\"\"\n    return bin(n).count('1') - 1\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -10.8515625
    ],
    [
      "class Solution(object):\n    def mostSignificantBit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # set_bit = lambda x: 1 if x else 0\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #     n >>= 1\n        # return 0\n        # n = n ^ (n - 1)\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #     n >>= 1\n        # return 0\n        # n = n ^ (n - 1)\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #     n >>= 1\n        # return 0\n        # n = n ^ (n - 1)\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #     n >>= 1\n        # return 0\n        # n = n ^ (n - 1)\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #     n >>= 1\n        # return 0\n        # n = n ^ (n - 1)\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #     n >>= 1\n        # return 0\n        # n = n ^ (n - 1)\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #     n >>= 1\n        # return 0\n        # n = n ^ (n - 1)\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #     n >>= 1\n        # return 0\n        # n = n ^ (n - 1)\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #     n >>= 1\n        # return 0\n        # n = n ^ (n - 1)\n        # while n:\n        #     if n & 1:\n        #         return n >> 1\n        #",
      -11.390625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}