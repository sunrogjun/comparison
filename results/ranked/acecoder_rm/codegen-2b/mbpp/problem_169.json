{
  "problem": {
    "task_id": "MBPP/180",
    "prompt": "Write a function to calculate distance between two points using latitude and longitude.",
    "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
    "test_list": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ],
    "challenge_test_list": [],
    "problem_id": 169
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import math\n\ndef get_distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    # convert latitude and longitude to radians\n    lat1 = math.radians(lat1)\n    lng1 = math.radians(lng1)\n    lat2 = math.radians(lat2)\n    lng2 = math.radians(lng2)\n    # haversine formula\n    d_lat = lat2 - lat1\n    d_lng = lng2 - lng1\n    a = math.sin(d_lat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(d_lng/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    distance = 6371 * c\n    return distance\n\n# Sample Input\n# lat1 = 0.0\n# lng1 = 0.0\n# lat2 = 0.0\n# lng2 = 0.0\n# Sample Output\n# Distance = 0.0\n\n# Input: 0.0, 0.0, 0.0, 0.0\n# Output: 0.0\n\n# Input: 0.0, 0.0, 0.0, 0.0\n# Output: 0.0\n\n# Input: 0.0, 0.0, 0.0, 0.0\n# Output: 0.0\n\n# Input: 0.0, 0.0, 0.0, 0.0\n# Output: 0.0\n\n# Input: 0.0, 0.0, 0.0, 0.0\n# Output: 0.0\n\n# Input: 0.0, 0.0, 0.0, 0.0\n# Output: 0.0\n\n# Input: 0.0, 0.0, 0.0, 0.0\n# Output: 0.0\n\n# Input: 0.0, 0.0, 0.0, 0.0\n# Output: 0.0",
      5.171875
    ],
    [
      "import math\n\nclass Point:\n    def __init__(self, latitude, longitude):\n        self.latitude = latitude\n        self.longitude = longitude\n\n    def distance(self, other):\n        \"\"\"\n        Returns the distance between two points.\n        :param other: Point\n        :return: float\n        \"\"\"\n        lat1 = self.latitude\n        lon1 = self.longitude\n        lat2 = other.latitude\n        lon2 = other.longitude\n        dLat = math.radians(lat2 - lat1)\n        dLon = math.radians(lon2 - lon1)\n        a = math.sin(dLat/2) * math.sin(dLat/2) + \\\n            math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * \\\n            math.sin(dLon/2) * math.sin(dLon/2)\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n        d = 6367 * c\n        return d\n\n\ndef main():\n    p1 = Point(37.4039, -122.0838)\n    p2 = Point(37.4167, -122.0838)\n    print(p1.distance(p2))\n\n\nif __name__ == '__main__':\n    main()",
      4.2421875
    ],
    [
      "import math\n\n\ndef distance_between_points(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    earth_radius = 6378.137  # Earth's radius, in km\n    dlat = math.radians(lat2 - lat1)\n    dlon = math.radians(lon2 - lon1)\n    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dlon/2) * math.sin(dlon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = earth_radius * c\n    return d\n\nif __name__ == \"__main__\":\n    print distance_between_points(40.7128, -74.0060, 40.7052, -73.9921)",
      4.12890625
    ],
    [
      "# https://www.hackerrank.com/challenges/distance-between-points/problem\n\nimport math\nimport sys\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Computes the distance between two points.\n\n    Args:\n        lat1 (float): Latitude of first point.\n        lon1 (float): Longitude of first point.\n        lat2 (float): Latitude of second point.\n        lon2 (float): Longitude of second point.\n\n    Returns:\n        float: Distance between the two points.\n    \"\"\"\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\n    return 6371 * c\n\nif __name__ == '__main__':\n    n = int(input())\n\n    for i in range(n):\n        lat1, lon1 = map(float, input().split())\n        lat2, lon2 = map(float, input().split())\n        print(distance(lat1, lon1, lat2, lon2))",
      4.09765625
    ],
    [
      "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    # convert to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # haversine formula\n    d = 6367 * math.acos(math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.cos(lon2 - lon1))\n\n    # convert to miles\n    return d * 0.621371192",
      3.998046875
    ],
    [
      "import math\n\n\ndef distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :param lat1: latitude of point 1\n    :param lng1: longitude of point 1\n    :param lat2: latitude of point 2\n    :param lng2: longitude of point 2\n    :return: distance between two points\n    \"\"\"\n    lat1 = float(lat1)\n    lng1 = float(lng1)\n    lat2 = float(lat2)\n    lng2 = float(lng2)\n\n    R = 6371000\n    dLat = math.radians(lat2 - lat1)\n    dLng = math.radians(lng2 - lng1)\n    a = math.sin(dLat/2)**2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLng/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    distance = R * c\n    return distance\n\n\nif __name__ == \"__main__\":\n    print(distance(51.0, -0.2, 51.3, 0.1))",
      3.96484375
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    Input:\n        lat1: First latitude\n        lon1: First longitude\n        lat2: Second latitude\n        lon2: Second longitude\n    Output:\n        Distance between two points\n    \"\"\"\n    # Convert to radians\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    lon1 = math.radians(lon1)\n    lon2 = math.radians(lon2)\n\n    # Calculate the great circle distance in radians\n    # Formula: arccos((sin lat1) * (sin lat2) + (cos lat1) * (cos lat2) * cos(lon2 - lon1))\n    distance = math.acos(\n        (math.sin(lat1)*math.sin(lat2)) +\n        (math.cos(lat1)*math.cos(lat2)*math.cos(lon2 - lon1))\n    )\n    distance = distance * 180.0 / math.pi\n\n    return distance\n\nif __name__ == '__main__':\n    print(distance(40.7143, -73.9624, 40.7143, -73.9624))",
      3.896484375
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: latitude of point 1\n    :param lon1: longitude of point 1\n    :param lat2: latitude of point 2\n    :param lon2: longitude of point 2\n    :return: distance between two points\n    \"\"\"\n    R = 6371 # Radius of the earth in km\n    dLat = math.radians(lat2-lat1)\n    dLon = math.radians(lon2-lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\nif __name__ == '__main__':\n    lat1 = float(input('Enter latitude of point 1: '))\n    lon1 = float(input('Enter longitude of point 1: '))\n    lat2 = float(input('Enter latitude of point 2: '))\n    lon2 = float(input('Enter longitude of point 2: '))\n    distance(lat1, lon1, lat2, lon2)",
      3.69140625
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    # get distance in km\n    a = 6378.137\n\n    # convert to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371 # Radius of earth in km\n    d = c * r\n    return d\n\ndef main():\n    print distance(41.973, -87.636, 40.738, -87.548)\n\nif __name__ == '__main__':\n    main()",
      3.537109375
    ],
    [
      "import math\n\ndef calculate_distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    earth_radius = 6371000\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    lng1 = math.radians(lng1)\n    lng2 = math.radians(lng2)\n    dLat = lat2 - lat1\n    dLon = lng2 - lng1\n    a = math.sin(dLat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dLon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    distance = earth_radius * c\n    return distance\n\nif __name__ == '__main__':\n    print calculate_distance(42.358, 1.570, 37.6, 1.876)",
      3.10546875
    ],
    [
      "import math\n\ndef calculate_distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :param lat1: latitude of point 1\n    :param lng1: longitude of point 1\n    :param lat2: latitude of point 2\n    :param lng2: longitude of point 2\n    :return: distance between two points\n    \"\"\"\n    lat1 = float(lat1)\n    lng1 = float(lng1)\n    lat2 = float(lat2)\n    lng2 = float(lng2)\n    R = 6371\n    d_lat = math.radians(lat2 - lat1)\n    d_lng = math.radians(lng2 - lng1)\n    a = math.sin(d_lat/2)**2 + math.cos(math.radians(lat1))*math.cos(math.radians(lat2))*math.sin(d_lng/2)**2\n    c = 2*math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R*c\n    return d\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert calculate_distance(46.948791, -71.091096, 45.373981, -73.935454) == 3.527774\n    assert calculate_distance(46.948791, -71.091096, 45.373981, -73.935454) == 3.527774\n    assert calculate_distance(46.948791, -71.091096, 45.373981, -73.935454) == 3.527774\n    assert calculate_distance(46.948791, -71.091096, 45.373981, -73.935454) == 3.527774",
      2.96875
    ],
    [
      "# https://www.tutorialspoint.com/python/python_geography.htm\n\nimport math\n\ndef calc_distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points\n    :param lat1: Latitude of first point\n    :param lon1: Longitude of first point\n    :param lat2: Latitude of second point\n    :param lon2: Longitude of second point\n    :return: Distance between two points\n    \"\"\"\n    # Calculate the distance\n    # https://en.wikipedia.org/wiki/Haversine_formula\n    R = 6371 # Radius of the earth in km\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    delta_lat = math.radians(lat2 - lat1)\n    delta_lon = math.radians(lon2 - lon1)\n    a = math.sin(delta_lat/2) * math.sin(delta_lat/2) + math.cos(lat1) * math.cos(lat2) * math.sin(delta_lon/2) * math.sin(delta_lon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\ndef main():\n    lat1 = 40.7128\n    lon1 = -74.0059\n    lat2 = 40.7126\n    lon2 = -74.0056\n    print(\"Distance between {} and {} is {}\".format(lat1, lon1, calc_distance(lat1, lon1, lat2, lon2)))\n\nif __name__ == '__main__':\n    main()",
      2.888671875
    ],
    [
      "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: latitude of point 1\n    :param lon1: longitude of point 1\n    :param lat2: latitude of point 2\n    :param lon2: longitude of point 2\n    :return: the distance between two points\n    \"\"\"\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    a = math.sin(dLat/2)**2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = 6371 * c\n    return d\n\n\nif __name__ == '__main__':\n    print(distance(46.928, -122.349, 46.924, -122.331))",
      2.71875
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    R = 6371 # Radius of the earth in km\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\nif __name__ == '__main__':\n    print(distance(40.7, -74.0, 40.7, -74.1))\n    print(distance(40.7, -74.0, 40.7, -74.0))",
      2.70703125
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points\n    \"\"\"\n    \n    # Convert latitude and longitude to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    \n    # Calculate the distance\n    dLat = lat2 - lat1\n    dLon = lon2 - lon1\n    a = math.sin(dLat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dLon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    distance = 6367 * c\n    return distance\n\n\n# Test Cases\n\nprint(distance(45.0, -122.0, 37.0, -122.1))",
      2.689453125
    ],
    [
      "import math\n\ndef calculate_distance(latitude1, longitude1, latitude2, longitude2):\n    \"\"\"\n    :type latitude1: float\n    :type longitude1: float\n    :type latitude2: float\n    :type longitude2: float\n    :rtype: float\n    \"\"\"\n    # Convert to radians\n    lat1 = latitude1 * math.pi / 180.0\n    long1 = longitude1 * math.pi / 180.0\n    lat2 = latitude2 * math.pi / 180.0\n    long2 = longitude2 * math.pi / 180.0\n\n    # Calculate the distance in radians\n    d_rad = math.acos((math.sin(lat1) * math.sin(lat2)) + (math.cos(lat1) * math.cos(lat2) * math.cos((long1 - long2) * math.pi / 180.0)))\n\n    # Calculate the distance in degrees\n    d_deg = d_rad * 180.0 / math.pi\n\n    return d_deg\n\nif __name__ == '__main__':\n    lat1 = 40.75\n    lng1 = -73.98\n    lat2 = 40.75\n    lng2 = -74.00\n\n    distance = calculate_distance(lat1, lng1, lat2, lng2)\n    print(distance)",
      2.6640625
    ],
    [
      "#!/usr/bin/env python\n\nimport math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"Calculate distance between two points using latitude and longitude.\n    lat1, lon1: the first point's latitude and longitude\n    lat2, lon2: the second point's latitude and longitude\n    \"\"\"\n    # Convert to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # Compute the great circle distance in radians\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n\n    # 6367 km is the radius of the Earth\n    return 6367 * c\n\n\nif __name__ == '__main__':\n    print(distance(55.788, 37.632, 55.788, 37.632))",
      2.6171875
    ],
    [
      "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    # Convert to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    # Calculate the distance\n    d_lon = lon2 - lon1\n    d_lat = lat2 - lat1\n    a = math.sin(d_lat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(d_lon / 2) ** 2\n    c = 2 * math.asin(math.sqrt(a))\n    return 6371 * c\n\n\nif __name__ == \"__main__\":\n    print(distance(41.9, -87.6, 41.8, -87.4))",
      2.16796875
    ],
    [
      "import math\n\ndef distance(lat1, long1, lat2, long2):\n    \"\"\"\n    :type lat1: float\n    :type long1: float\n    :type lat2: float\n    :type long2: float\n    :rtype: float\n    \"\"\"\n    radius = 6371000\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(long2 - long1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = radius * c\n    return d\n\ndef main():\n    print(distance(45.5, -122.7, 37.7, -122.4))\n\nif __name__ == '__main__':\n    main()",
      2.00390625
    ],
    [
      "# Importing libraries\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Function to calculate distance between two points using latitude and longitude\ndef distance(lat1, long1, lat2, long2):\n    # Calculate the distance between two points using latitude and longitude\n    earth_radius = 6378100\n    d_lat = lat2 - lat1\n    d_long = long2 - long1\n    a = (math.sin(d_lat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(d_long/2)**2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    distance = earth_radius * c\n    return distance\n\n# Main function\nif __name__ == \"__main__\":\n    lat1 = 45.5\n    long1 = -122.8\n    lat2 = 48.7\n    long2 = -122.3\n    distance = distance(lat1, long1, lat2, long2)\n    print(\"The distance between two points using latitude and longitude is: %f\" % distance)",
      1.65234375
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    R = 6371.0\n    dlat = math.radians(lat2 - lat1)\n    dlon = math.radians(lon2 - lon1)\n    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dlon/2) * math.sin(dlon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\nif __name__ == \"__main__\":\n    print(distance(48.1474, -120.7275, 48.1178, -120.7275))",
      1.6318359375
    ],
    [
      "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    # radius of earth in kilometers\n    # 6371 km\n    radius = 6371\n\n    # calculate the distance in radians\n    radLat1 = math.radians(lat1)\n    radLat2 = math.radians(lat2)\n    radLon1 = math.radians(lon1)\n    radLon2 = math.radians(lon2)\n\n    # haversine formula\n    dlon = math.fabs(radLon1 - radLon2)\n    a = math.sin(dlon) * math.sin(dlon) + math.cos(radLat1) * math.cos(radLat2) * math.sin(radLat1) * math.sin(radLat2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = radius * c\n\n    return d\n\n\nif __name__ == '__main__':\n    print(distance(41.9, -87.6, 41.8, -87.4))",
      1.611328125
    ],
    [
      "def distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    R = 6371000 # metres\n    # convert lat/lng to radians\n    lat1 = lat1 * math.pi / 180\n    lng1 = lng1 * math.pi / 180\n    lat2 = lat2 * math.pi / 180\n    lng2 = lng2 * math.pi / 180\n    # haversine formula\n    dlon = lng2 - lng1\n    dlat = lat2 - lat1\n    a = math.pow(math.sin(dlat / 2), 2) + math.cos(lat1) * math.cos(lat2) * math.pow(math.sin(dlon / 2), 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d",
      1.208984375
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n\n    Input:\n    lat1, lon1 = latitude and longitude of first point\n    lat2, lon2 = latitude and longitude of second point\n    Output:\n    distance = distance between two points\n    \"\"\"\n\n    # convert latitude and longitude to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # calculate distance\n    d_rad = math.acos(math.sin(lat1)*math.sin(lat2)+math.cos(lat1)*math.cos(lat2)*math.cos(lon2-lon1))\n    distance = 6371 * d_rad\n\n    return distance\n\nif __name__ == '__main__':\n    print(distance(35.689996, 139.735023, 35.689996, 139.743538))\n    print(distance(35.689996, 139.735023, 35.689996, 139.743538, 'K'))\n    print(distance(35.689996, 139.735023, 35.689996, 139.743538, 'M'))",
      1.1923828125
    ],
    [
      "def distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    return 6371 * acos(\n        (sin(radians(lat2)) * sin(radians(lat1)) + cos(radians(lat1)) * cos(radians(lat2)) * cos(radians(lon2 - lon1)))\n        / (2 * acos(sin(radians(lat1)) * sin(radians(lat2)) + cos(radians(lat1)) * cos(radians(lat2)) * cos(radians(lon2 - lon1))))\n    )\n\n# Your Distance object will be instantiated and called as such:\n# obj = Distance(lat1, lon1, lat2, lon2)\n# param_1 = obj.distance(lat1, lon1, lat2, lon2)",
      1.158203125
    ],
    [
      "import math\n\ndef getDistance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    R = 6371000\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lng2 - lng1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\n\nif __name__ == \"__main__\":\n    print getDistance(52.5, 11.5, 37.5, 12.5)\n    print getDistance(52.5, 11.5, 37.5, 12.5)",
      1.134765625
    ],
    [
      "import math\n\ndef distance_between_points(lat_1, lng_1, lat_2, lng_2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n\n    Inputs:\n    lat_1, lng_1 -- latitude and longitude of point 1\n    lat_2, lng_2 -- latitude and longitude of point 2\n\n    Returns:\n    distance -- distance between the two points\n    \"\"\"\n    # Convert lat and lng to radians\n    lat1 = math.radians(lat_1)\n    lng1 = math.radians(lng_1)\n    lat2 = math.radians(lat_2)\n    lng2 = math.radians(lng_2)\n\n    # Calculate the haversine formula\n    d_rad = 2 * math.asin(math.sqrt(math.pow((math.sin((lat2 - lat1) / 2)), 2) + math.cos(lat1) * math.cos(lat2) * math.pow((math.sin((lng2 - lng1) / 2)), 2)))\n\n    # Convert distance to meters\n    distance = 6371000 * d_rad\n\n    return distance\n\nif __name__ == \"__main__\":\n    print(distance_between_points(50.4812, -3.6870, 50.7114, -3.6762))",
      1.068359375
    ],
    [
      "import math\n\ndef getDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    :param lat1: latitude of point 1\n    :param lon1: longitude of point 1\n    :param lat2: latitude of point 2\n    :param lon2: longitude of point 2\n    :return: distance between points\n    \"\"\"\n    earthRadius = 6371000\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    a = math.sin(dLat/2)**2 + math.cos(math.radians(lat1))*math.cos(math.radians(lat2))*math.sin(dLon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = earthRadius * c\n    return d\n\n\nif __name__ == '__main__':\n    lat1 = 40.7128\n    lon1 = -73.9847\n    lat2 = 40.7128\n    lon2 = -73.9847\n    distance = getDistance(lat1, lon1, lat2, lon2)\n    print(\"Distance between two points using latitude and longitude:\", distance)",
      0.912109375
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Compute the distance between two points (lat1, lon1) and (lat2, lon2).\n    \"\"\"\n    R = 6378.1\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) * \\\n        math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\n# Test cases\n\n#print distance((37.7998, -122.3959), (37.8, -122.35), (37.7998, -122.3959), (37.8, -122.35))\n#print distance((37.8, -122.35), (37.8, -122.35), (37.8, -122.35), (37.8, -122.35))\n#print distance((37.8, -122.35), (37.8, -122.35), (37.8, -122.35), (37.8, -122.35))\n#print distance((37.8, -122.35), (37.8, -122.35), (37.8, -122.35), (37.8, -122.35))\n#print distance((37.8, -122.35), (37.8, -122.35), (37.8, -122.35), (37.8, -122.35))\n#print distance((37.8, -122.35), (37.8, -122.35), (37.8, -122.35), (37.8, -122.35))\n#print distance((37.8, -122.35), (37.8, -122.35), (37.8, -122.35),",
      0.90673828125
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    R = 6371 # km\n    a = math.pi * R\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    delta_lat = math.radians(lat2 - lat1)\n    delta_lon = math.radians(lon2 - lon1)\n    a = math.sin(delta_lat/2) * math.sin(delta_lat/2) + \\\n        math.cos(lat1) * math.cos(lat2) * math.sin(delta_lon/2) * math.sin(delta_lon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\nif __name__ == '__main__':\n    print(distance(52.5, 6.9, 52.7, 7.1))",
      0.90625
    ],
    [
      "#!/usr/bin/env python\n\nimport math\n\n# Write your code here\n\n\ndef getDistance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Returns the distance between two points (in meters)\n    using the haversine formula.\n    \"\"\"\n    \n    # Convert latitude and longitude to radians\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    lon1 = math.radians(lon1)\n    lon2 = math.radians(lon2)\n\n    # Calculate the haversine formula\n    delta_lat = lat2 - lat1\n    delta_lon = lon2 - lon1\n    a = math.sin(delta_lat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(delta_lon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    distance = 6371 * c\n    return distance\n\n\nif __name__ == '__main__':\n    print getDistance(50.082762, -2.334978, 50.082688, -2.334981)",
      0.83935546875
    ],
    [
      "# Import required packages\nimport math\nimport numpy as np\n\n# Constants\nR = 6371\n\n\ndef distance_point(lat1, lng1, lat2, lng2):\n    \"\"\"\n    Calculate the distance between two points on the earth using latitude and longitude\n    :param lat1: latitude of point 1\n    :param lng1: longitude of point 1\n    :param lat2: latitude of point 2\n    :param lng2: longitude of point 2\n    :return: distance in km\n    \"\"\"\n    # Convert lat and long to radians\n    radLat1 = math.radians(lat1)\n    radLat2 = math.radians(lat2)\n    radLng1 = math.radians(lng1)\n    radLng2 = math.radians(lng2)\n\n    # Calculate the great circle distance in radians\n    theta = radLng1 - radLng2\n    dist = 2 * math.asin(math.sqrt(math.pow(math.sin(theta / 2), 2) + math.cos(radLat1) * math.cos(radLat2) * math.pow(math.sin(theta / 2), 2)))\n    # Convert distance from radians to degrees\n    dist = math.degrees(dist)\n    # Convert distance to km\n    dist = dist * R\n    return dist",
      0.48388671875
    ],
    [
      "from math import cos, sin, asin, sqrt, radians, degrees\n\ndef calculate_distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :param lat1: latitude of first point\n    :param lng1: longitude of first point\n    :param lat2: latitude of second point\n    :param lng2: longitude of second point\n    :return: the distance between two points\n    \"\"\"\n    radius = 6371 #km\n    d_lat = radians(lat2 - lat1)\n    d_lng = radians(lng2 - lng1)\n    a = sin(d_lat/2)**2 + cos(lat1) * cos(lat2) * sin(d_lng/2)**2\n    c = 2 * asin(sqrt(a))\n    d = radius * c\n    return d\n\nif __name__ == '__main__':\n    print calculate_distance(45.0, -122.0, 40.0, -120.0)",
      0.46533203125
    ],
    [
      "from __future__ import print_function\n\ndef distance(lat1, lon1, lat2, lon2):\n    r = 6371 # Radius of the earth in km\n    dLat = math.radians(lat2-lat1)\n    dLon = math.radians(lon2-lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = r * c\n    return d\n\nif __name__ == '__main__':\n    print(distance(39.936,-142.192,39.935,-142.193))\n    print(distance(39.936,-142.192,39.934,-142.194))",
      0.438720703125
    ],
    [
      "# Complete the function below.\ndef distance(lat1, long1, lat2, long2):\n    \"\"\"\n    :param lat1: latitude of first point\n    :param long1: longitude of first point\n    :param lat2: latitude of second point\n    :param long2: longitude of second point\n    :return: distance between two points\n    \"\"\"\n    import math\n    lat1 = math.radians(lat1)\n    long1 = math.radians(long1)\n    lat2 = math.radians(lat2)\n    long2 = math.radians(long2)\n\n    d_lat = lat2 - lat1\n    d_long = long2 - long1\n\n    a = math.sin(d_lat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(d_long/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return 6371 * c\n\n\nif __name__ == \"__main__\":\n    print(distance(39.936, -98.460, 39.945, -98.450))",
      0.31591796875
    ],
    [
      "import math\n\nclass DistanceCalculator(object):\n    \"\"\"\n    Implementation of distance calculator class.\n    \"\"\"\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def calculate_distance(lat1, lon1, lat2, lon2):\n        \"\"\"\n        Calculate the distance between two points using latitude and longitude.\n        :param lat1: Latitude of first point\n        :param lon1: Longitude of first point\n        :param lat2: Latitude of second point\n        :param lon2: Longitude of second point\n        :return: Distance between two points\n        \"\"\"\n        # Convert latitude and longitude to radians\n        lat1 = math.radians(lat1)\n        lon1 = math.radians(lon1)\n        lat2 = math.radians(lat2)\n        lon2 = math.radians(lon2)\n        # Calculate distance\n        a = math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.cos(lon2 - lon1)\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n        distance = 6367 * c\n        return distance\n\nif __name__ == '__main__':\n    distance_calculator = DistanceCalculator()\n    print(distance_calculator.calculate_distance(40.74, -74.00, 40.70, -73.00))",
      0.285400390625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def distance(self, point1, point2):\n        \"\"\"\n        :type point1: tuple\n        :type point2: tuple\n        :rtype: float\n        \"\"\"\n        return (point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    N = int(f.readline().strip())\n\n    for _ in range(N):\n        point1 = tuple(map(int, f.readline().strip().split(' ')))\n        point2 = tuple(map(int, f.readline().strip().split(' ')))\n        print solution.distance(point1, point2)",
      0.2421875
    ],
    [
      "def distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    \"\"\"\n    from math import pi, sin, cos, asin, sqrt\n    \n    # convert decimal degrees to radians\n    lat1 = lat1 * pi / 180.0\n    lng1 = lng1 * pi / 180.0\n    lat2 = lat2 * pi / 180.0\n    lng2 = lng2 * pi / 180.0\n\n    # haversine formula\n    dlon = lng2 - lng1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    distance = 6367 * c\n    return distance\n\nif __name__ == \"__main__\":\n    print distance(38.897734, -77.036534, 38.898233, -77.014833)",
      0.1982421875
    ],
    [
      "# https://www.geeksforgeeks.org/distance-two-points/\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    radius = 6371\n    rad = (lat1 + lat2) / 2\n    rad1 = (lon1 + lon2) / 2\n    delta = math.radians(lat1 - lat2)\n    a = math.sin(delta / 2) * math.sin(delta / 2) + math.cos(rad) * math.cos(rad1) * math.sin(delta / 2) * math.sin(delta / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = radius * c\n    return d",
      0.1923828125
    ],
    [
      "import math\n\n\nclass Point:\n    \"\"\"\n    A point in the earth's surface.\n    \"\"\"\n\n    def __init__(self, latitude, longitude):\n        self.latitude = latitude\n        self.longitude = longitude\n\n    def __str__(self):\n        return \"Latitude: %s Longitude: %s\" % (self.latitude, self.longitude)\n\n    def distance(self, other_point):\n        \"\"\"\n        Calculate the distance between two points.\n        :param other_point: The point to calculate distance to.\n        :return: The distance between two points.\n        \"\"\"\n        delta_lat = other_point.latitude - self.latitude\n        delta_long = other_point.longitude - self.longitude\n        a = math.sin(delta_lat / 2) ** 2 + math.cos(self.latitude) * math.cos(other_point.latitude) * math.sin(delta_long / 2) ** 2\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n        return 6371 * c\n\n\ndef main():\n    p1 = Point(55.6724, 37.3527)\n    p2 = Point(55.6759, 37.3549)\n    print(\"Distance between points: %s and %s is: %s\" % (p1, p2, p1.distance(p2)))\n\n\nif __name__ == '__main__':\n    main()",
      0.1395263671875
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: latitude\n    :param lon1: longitude\n    :param lat2: latitude\n    :param lon2: longitude\n    :return: distance\n    \"\"\"\n    R = 6371  # Radius of the earth in km\n    dLat = math.radians(lat2-lat1)\n    dLon = math.radians(lon2-lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\nif __name__ == '__main__':\n    lat1 = input(\"Input latitude of point 1: \")\n    lon1 = input(\"Input longitude of point 1: \")\n    lat2 = input(\"Input latitude of point 2: \")\n    lon2 = input(\"Input longitude of point 2: \")\n    distance = distance(lat1, lon1, lat2, lon2)\n    print(distance)",
      0.01114654541015625
    ],
    [
      "from math import radians, cos, sin, asin, sqrt\n\ndef distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :param lat1: Latitude of first point\n    :param lng1: Longitude of first point\n    :param lat2: Latitude of second point\n    :param lng2: Longitude of second point\n    :return: Distance in meters\n    \"\"\"\n    delta_lat = radians(lat2 - lat1)\n    delta_lng = radians(lng2 - lng1)\n    a = sin(delta_lat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(delta_lng/2)**2\n    c = 2 * asin(sqrt(a))\n    return 6371 * c\n\nif __name__ == '__main__':\n    lat1 = radians(35.67)\n    lng1 = radians(-79.39)\n    lat2 = radians(36.36)\n    lng2 = radians(-77.03)\n\n    print distance(lat1, lng1, lat2, lng2)",
      -0.08355712890625
    ],
    [
      "# imports\nfrom math import radians, cos, asin, sin, atan2\n\n# function definition\ndef calculate_distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Returns distance between two points in km.\n    Input:\n    lat1: latitude of first point\n    lon1: longitude of first point\n    lat2: latitude of second point\n    lon2: longitude of second point\n    Returns:\n    distance: distance between two points in km\n    \"\"\"\n    # convert from decimal degrees to radians\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    lon1 = radians(lon1)\n    lon2 = radians(lon2)\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    distance = 6371 * c\n    return distance\n\n# test cases\nlat1 = 0\nlon1 = 0\nlat2 = 0\nlon2 = 0\ndistance = calculate_distance(lat1, lon1, lat2, lon2)\nprint(distance)\n\nlat1 = 0\nlon1 = 0\nlat2 = 0\nlon2 = 90\ndistance = calculate_distance(lat1, lon1, lat2, lon2)\nprint(distance)\n\nlat1 = 0\nlon1 = 0\nlat2 = 0\nlon2 = 180\ndistance = calculate_distance(lat1, lon1, lat2, lon2)\nprint(distance)\n\nlat1 = 0\nlon1 = 0\nlat2 = 0\nlon2 = 270\ndistance = calculate_distance(lat1, lon1, lat2, lon2)\nprint(distance)",
      -0.133056640625
    ],
    [
      "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: First latitude\n    :param lon1: First longitude\n    :param lat2: Second latitude\n    :param lon2: Second longitude\n    :return: Distance in km between two points\n    \"\"\"\n    delta_lat = math.radians(lat2 - lat1)\n    delta_lon = math.radians(lon2 - lon1)\n    a = math.sin(delta_lat / 2) ** 2 + math.cos(math.radians(lat1)) * \\\n        math.cos(math.radians(lat2)) * math.sin(delta_lon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = 6367 * c\n    return d\n\n\nif __name__ == '__main__':\n    print(distance(52.5, 13.36, 52.7, 13.38))",
      -0.33740234375
    ],
    [
      "#!/usr/bin/python\n\nclass Point:\n    def __init__(self, lat, lon):\n        self.lat = lat\n        self.lon = lon\n\n    def __str__(self):\n        return \"Point: Lat: %s, Lon: %s\" % (self.lat, self.lon)\n\ndef distance(p1, p2):\n    \"\"\"\n    Calculate the distance between two points using latitude and longitude.\n    \"\"\"\n    lat1, lon1 = p1.lat, p1.lon\n    lat2, lon2 = p2.lat, p2.lon\n    R = 6371 # Radius of the earth in km\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + \\\n        math.cos(math.radians(lat1)) * \\\n        math.cos(math.radians(lat2)) * \\\n        math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\ndef test():\n    p1 = Point(40.74, -73.99)\n    p2 = Point(40.73, -73.98)\n    print \"Distance between %s and %s is %s\" % (p1, p2, distance(p1, p2))\n\nif __name__ == '__main__':\n    test()",
      -0.397216796875
    ],
    [
      "class Solution(object):\n    def distance(self, x, y):\n        \"\"\"\n        :type x: str\n        :type y: str\n        :rtype: int\n        \"\"\"\n        return self.dist(x, y)\n\n    def dist(self, x, y):\n        x = float(x)\n        y = float(y)\n        lat1 = math.radians(int(x[0:2]))\n        lon1 = math.radians(int(x[2:4]))\n        lat2 = math.radians(int(y[0:2]))\n        lon2 = math.radians(int(y[2:4]))\n        dlat = lat2 - lat1\n        dlon = lon2 - lon1\n        a = math.sin(dlat / 2) * math.sin(dlat / 2) + \\\n            math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) * math.sin(dlon / 2)\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n        return 6371 * c\n\nif __name__ == '__main__':\n    assert Solution().distance(\"1.2\", \"1.3\") == 0.9772135054302761",
      -0.4287109375
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: The first latitude\n    :param lon1: The first longitude\n    :param lat2: The second latitude\n    :param lon2: The second longitude\n    :return: The distance between two points\n    \"\"\"\n    R = 6371 # km\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\nif __name__ == \"__main__\":\n    print(distance(46.767048, -122.392221, 46.767048, -122.392221))",
      -0.449462890625
    ],
    [
      "import math\n\n\nclass Point:\n    def __init__(self, lat, lng):\n        self.lat = lat\n        self.lng = lng\n\n    def distance(self, other):\n        rad = math.pi * self.lat / 180\n        rad2 = math.pi * other.lat / 180\n        a = rad * rad\n        c = math.cos(rad)\n        d = math.cos(rad2) * c\n        h = math.sin(rad) * math.sin(rad2) * c\n        x = self.lng - other.lng\n        y = self.lat - other.lat\n        return math.sqrt(a + d + h)\n\n\ndef distance(lat1, lng1, lat2, lng2):\n    return math.sqrt((lat1 - lat2) ** 2 + (lng1 - lng2) ** 2)\n\n\nif __name__ == '__main__':\n    print(distance(40.75, -73.95, 40.73, -73.99))",
      -0.52490234375
    ],
    [
      "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1:\n    :param lon1:\n    :param lat2:\n    :param lon2:\n    :return:\n    \"\"\"\n    d_lat = math.radians(lat2 - lat1)\n    d_lon = math.radians(lon2 - lon1)\n\n    a = math.sin(d_lat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(d_lon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = 6367 * c\n    return d",
      -0.7509765625
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Point(object):\n    \"\"\"\n    Define point class.\n    \"\"\"\n\n    def __init__(self, x, y):\n        \"\"\"\n        Initialize point.\n\n        :param x: x coordinate\n        :param y: y coordinate\n        \"\"\"\n\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        \"\"\"\n        Return string representation of point.\n\n        :return: string representation of point\n        \"\"\"\n\n        return \"({0}, {1})\".format(self.x, self.y)\n\n    def __eq__(self, other):\n        \"\"\"\n        Return true if two points are equal.\n\n        :param other: point to compare with\n        :return: True if points are equal, False otherwise\n        \"\"\"\n\n        return self.x == other.x and self.y == other.y\n\n    def __ne__(self, other):\n        \"\"\"\n        Return true if two points are not equal.\n\n        :param other: point to compare with\n        :return: True if points are not equal, False otherwise\n        \"\"\"\n\n        return self.x!= other.x or self.y!= other.y\n\n    def __add__(self, other):\n        \"\"\"\n        Return sum of two points.\n\n        :param other: point to add\n        :return: sum of points\n        \"\"\"\n\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        \"\"\"\n        Return difference between two points.\n\n        :param other: point to subtract\n        :return: difference between points\n        \"\"\"\n\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        \"\"\"\n        Return product of two points.\n\n        :param other: point to multiply\n        :return: product of points\n        \"\"\"\n\n        return Point(self.x * other.x, self.y * other.y)\n\n    def __truediv__(self, other):\n        \"\"\"\n        Return quotient of two points.\n\n        :param other: point to",
      -0.8212890625
    ],
    [
      "import math\n\n\ndef distance_to_point(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :param lat1:\n    :param lng1:\n    :param lat2:\n    :param lng2:\n    :return:\n    \"\"\"\n    lat1 = math.radians(lat1)\n    lng1 = math.radians(lng1)\n    lat2 = math.radians(lat2)\n    lng2 = math.radians(lng2)\n\n    d_lat = lat2 - lat1\n    d_lng = lng2 - lng1\n\n    a = math.sin(d_lat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(d_lng/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n\n    d = 6371 * c\n    return d",
      -0.85791015625
    ],
    [
      "from math import sin, cos, acos, sqrt\nfrom decimal import Decimal\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Returns the distance in kilometers between two points on the earth\n    (given in decimal degrees).\n    \"\"\"\n    r = 6371 # Radius of the earth in km\n    dlat = Decimal(lat2 - lat1)\n    dlon = Decimal(lon2 - lon1)\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    d = r * c\n    return d\n\n# Test cases\nprint(distance(52, 7, 52, 8))\nprint(distance(52, 7, 52, 8, 5))\nprint(distance(52, 7, 52, 8, 5, 10))",
      -0.85791015625
    ],
    [
      "import math\n\ndef distance_in_meters(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    R = 6371 # Radius of the earth in km\n    dLat = math.radians(lat2-lat1)\n    dLon = math.radians(lon2-lon1)\n    a = math.sin(dLat/2)**2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\nif __name__ == \"__main__\":\n    print(distance_in_meters(39.75, 116.43, 39.77, 116.43))\n    #print(distance_in_meters(39.75, 116.43, 39.75, 116.43))",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef distance(lat1, long1, lat2, long2):\n    \"\"\"\n    :type lat1: float\n    :type long1: float\n    :type lat2: float\n    :type long2: float\n    :rtype: float\n    \"\"\"\n    R = 6378.137  # Radius of the Earth\n\n    # Convert decimal degrees to radians\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n\n    # Calculate the delta longitude\n    delta_long = long2 - long1\n\n    # Calculate the delta angle\n    delta_lat = lat2 - lat1\n\n    # Calculate the distance\n    a = math.sin(delta_lat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(delta_long / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n\n    return d\n\n\nif __name__ == \"__main__\":\n    print(distance(38.5, -77.0, 38.7, -77.1))",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param {float} lat1\n    # @param {float} lng1\n    # @param {float} lat2\n    # @param {float} lng2\n    # @return {float}\n    def distance(self, lat1, lng1, lat2, lng2):\n        # Convert degrees to radians.\n        rad_lat1 = lat1 * math.pi / 180\n        rad_lat2 = lat2 * math.pi / 180\n        # Convert radians to miles.\n        a = 6371\n        # Calculate the distance between two points.\n        distance = (math.acos(math.sin(rad_lat1) * math.sin(rad_lat2) + math.cos(rad_lat1) * math.cos(rad_lat2) * math.cos((lng1 - lng2) * math.pi / 180)) * a)\n        return distance",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def distance(self, lat1, lon1, lat2, lon2):\n        \"\"\"\n        :type lat1: float\n        :type lon1: float\n        :type lat2: float\n        :type lon2: float\n        :rtype: float\n        \"\"\"\n        import math\n\n        lat1 = float(lat1)\n        lon1 = float(lon1)\n        lat2 = float(lat2)\n        lon2 = float(lon2)\n        \n        a = math.radians(lat1)\n        b = math.radians(lat2)\n        c = math.radians(lon2 - lon1)\n\n        d = math.acos(math.sin(a) * math.sin(b) + math.cos(a) * math.cos(b) * math.cos(c))\n        return d * 6371000\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.distance(40.7, -73.99, 40.7, -73.99)",
      -0.85791015625
    ],
    [
      "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, other):\n        return (self.x - other.x) ** 2 + (self.y - other.y) ** 2\n\ndef distance(lat1, long1, lat2, long2):\n    return (lat1 - lat2) ** 2 + (long1 - long2) ** 2\n\ndef main():\n    p1 = Point(40.7143, -74.0059)\n    p2 = Point(40.7083, -74.0118)\n    print(distance(p1, p2))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points on the Earth using\n    latitude and longitude.\n    \"\"\"\n\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    a = math.sin(dLat/2)**2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = 6371 * c\n    return d\n\n\ndef main():\n    print(distance(40.7143, -74.0059, 40.7349, -74.0081))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "from math import cos, radians, sin\n\ndef calcDistance(lat1, lon1, lat2, lon2):\n    d_lat = lat2 - lat1\n    d_lon = lon2 - lon1\n    a = sin(radians(d_lat/2))**2 + cos(radians(lat1))*cos(radians(lat2))*sin(radians(d_lon/2))**2\n    c = 2*asin(sqrt(a))\n    return c*6371\n\n\nif __name__ == '__main__':\n    print(calcDistance(38.5, -77.1, 38.6, -76.9))",
      -0.8583984375
    ],
    [
      "import math\nfrom math import pi\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    # convert to radians\n    lat1 = lat1 * pi / 180\n    lon1 = lon1 * pi / 180\n    lat2 = lat2 * pi / 180\n    lon2 = lon2 * pi / 180\n\n    # haversine formula\n    d = 6371  # radius of the earth in kilometers\n    a = math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.cos(lon1 - lon2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return d * c",
      -0.8583984375
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    # convert degree to radian\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    # calculate the distance\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    return 6371 * c\n\nif __name__ == '__main__':\n    print(distance(42.3528, -71.0563, 42.3477, -71.0661))",
      -0.8583984375
    ],
    [
      "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    Input: lat1, lon1, lat2, lon2\n    Output: Distance between two points in km\n    \"\"\"\n    radius = 6371 # Radius of the earth in km\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = radius * c\n    return d\n\nif __name__ == '__main__':\n    print(distance(41.89833, 12.4833, 41.9, 12.5))",
      -0.85888671875
    ],
    [
      "import math\n\n\nclass Solution:\n    # @param {number} x1\n    # @param {number} y1\n    # @param {number} x2\n    # @param {number} y2\n    # @return {number}\n    def distance(self, x1: float, y1: float, x2: float, y2: float) -> float:\n        return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n\nif __name__ == \"__main__\":\n    assert Solution().distance(1, 1, 2, 2) == 1.4142135623730951",
      -0.85888671875
    ],
    [
      "import math\n\nclass Point(object):\n    def __init__(self, lat, lng):\n        self.lat = lat\n        self.lng = lng\n        \n    def __str__(self):\n        return str(self.lat) + ','+ str(self.lng)\n        \n    def __repr__(self):\n        return str(self.lat) + ','+ str(self.lng)\n        \n    def __add__(self, other):\n        if isinstance(other, Point):\n            return Point(self.lat + other.lat, self.lng + other.lng)\n        else:\n            return NotImplemented\n\n    def __sub__(self, other):\n        if isinstance(other, Point):\n            return Point(self.lat - other.lat, self.lng - other.lng)\n        else:\n            return NotImplemented\n        \n    def __mul__(self, other):\n        if isinstance(other, Point):\n            return Point(self.lat * other.lat, self.lng * other.lng)\n        else:\n            return NotImplemented\n        \n    def __rmul__(self, other):\n        if isinstance(other, Point):\n            return Point(self.lat * other.lat, self.lng * other.lng)\n        else:\n            return NotImplemented\n    \n    def __div__(self, other):\n        if isinstance(other, Point):\n            return Point(self.lat / other.lat, self.lng / other.lng)\n        else:\n            return NotImplemented\n        \n    def __truediv__(self, other):\n        if isinstance(other, Point):\n            return Point(self.lat / other.lat, self.lng / other.lng)\n        else:\n            return NotImplemented\n        \n    def __neg__(self):\n        return Point(-self.lat, -self.lng)\n    \n    def __eq__(self, other):\n        if isinstance(other, Point):\n            return self.lat == other.lat and self.lng ==",
      -0.865234375
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def distance(self, point1, point2):\n        \"\"\"\n        :type point1: tuple\n        :type point2: tuple\n        :rtype: float\n        \"\"\"\n        x1, y1 = point1\n        x2, y2 = point2\n        return 111.13 * (x1 - x2) ** 2 + (y1 - y2) ** 2\n\n\nif __name__==\"__main__\":\n    print Solution().distance((1,1), (2,2))\n    print Solution().distance((1,1), (1,2))\n    print Solution().distance((1,1), (1,1))",
      -1.109375
    ],
    [
      "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    R = 6371 # Radius of the earth in km\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    delta_lat = math.radians(lat2-lat1)\n    delta_lon = math.radians(lon2-lon1)\n    a = math.sin(delta_lat/2) * math.sin(delta_lat/2) + math.cos(lat1) * math.cos(lat2) * math.sin(delta_lon/2) * math.sin(delta_lon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\n\nif __name__ == '__main__':\n    print(distance(40.7128, -73.9848, 40.7041, -73.9912))",
      -1.1650390625
    ],
    [
      "def distance_lat_long(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n\n    R = 6371  # Radius of the earth in km\n    # Convert latitude and longitude to\n    # spherical coordinates in radians.\n    degrees_to_radians = pi/180\n\n    # phi = 90 - latitude\n    phi1 = (90.0 - lat1)*degrees_to_radians\n    phi2 = (90.0 - lat2)*degrees_to_radians\n\n    # theta = longitude\n    theta1 = lon1*degrees_to_radians\n    theta2 = lon2*degrees_to_radians\n\n    # Compute spherical distance from spherical coordinates.\n\n    # For two locations in spherical coordinates\n    # (1, theta, phi) and (1, theta', phi')\n    # cosine( arc length ) =\n    #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'\n    # distance = rho * arc length\n\n    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + math.cos(phi1)*math.cos(phi2))\n    arc = math.acos(cos)\n\n    # Remember to multiply arc by the radius of the earth\n    # in your favorite set of units to get length.\n    return arc*R\n\n\nif __name__ == \"__main__\":\n    print(distance_lat_long(40.7143, -74.0059, 40.7349, -74.0088))\n    print(distance_lat_long(40.7143, -74.0059, 40.7349, -74.0088, units=\"mi\"))\n    print(distance_lat_long(40.7143, -74.0059, 40.7349, -74.0088, units=\"km\"))",
      -1.2490234375
    ],
    [
      "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    # Convert latitude and longitude to radians.\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # Calculate the great circle distance in radians.\n    dlon = lon2 - lon1\n    a = math.sin(dlon) * math.sin(dlon)\n    c = math.cos(lat1) * math.cos(lat2)\n    d = math.atan2(a, c)\n    return math.acos(d) * 6371\n\n\nif __name__ == \"__main__\":\n    lat1 = float(input(\"Latitude of point 1: \"))\n    lon1 = float(input(\"Longitude of point 1: \"))\n    lat2 = float(input(\"Latitude of point 2: \"))\n    lon2 = float(input(\"Longitude of point 2: \"))\n\n    print(\"The distance between point 1 and point 2 is %f km\" % distance(lat1, lon1, lat2, lon2))",
      -1.3212890625
    ],
    [
      "import math\n\n# def distance_from_lat_long(lat1, lon1, lat2, lon2):\n#     \"\"\"\n#     Calculate the distance between two points using latitude and longitude.\n#     \"\"\"\n#     # convert lat and lon to radians\n#     lat1 = math.radians(lat1)\n#     lon1 = math.radians(lon1)\n#     lat2 = math.radians(lat2)\n#     lon2 = math.radians(lon2)\n#     delta_lat = lat2 - lat1\n#     delta_lon = lon2 - lon1\n#     a = math.sin(delta_lat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(delta_lon/2)**2\n#     c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n#     d = 6371 * c\n#     return d\n\n# def distance_from_lat_long(lat1, lon1, lat2, lon2):\n#     \"\"\"\n#     Calculate the distance between two points using latitude and longitude.\n#     \"\"\"\n#     # convert lat and lon to radians\n#     lat1 = math.radians(lat1)\n#     lon1 = math.radians(lon1)\n#     lat2 = math.radians(lat2)\n#     lon2 = math.radians(lon2)\n#     delta_lat = lat2 - lat1\n#     delta_lon = lon2 - lon1\n#     a = math.sin(delta_lat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(delta_lon/2)**2\n#     c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n#     d = 6371 * c\n#     return d\n\n# def distance_from_lat_long(lat1, lon1, lat2, lon2):\n#     \"\"\"\n#     Calculate",
      -1.7568359375
    ],
    [
      "from math import radians, cos, sin, asin, sqrt, acos\n\ndef distance_between_points(lat1, long1, lat2, long2):\n    \"\"\"\n    :type lat1: float\n    :type long1: float\n    :type lat2: float\n    :type long2: float\n    :rtype: float\n    \"\"\"\n    R = 6371 # radius of the earth in km\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    long1 = radians(long1)\n    long2 = radians(long2)\n    delta_lat = lat2 - lat1\n    delta_long = long2 - long1\n    a = sin(delta_lat/2)**2 + cos(lat1)*cos(lat2)*sin(delta_long/2)**2\n    c = 2*asin(sqrt(a))\n    return R * c\n\nif __name__ == '__main__':\n    print(distance_between_points(48.858, 2.294, 41.878, 1.618))",
      -1.8505859375
    ],
    [
      "import math\n\nclass Solution(object):\n    def calculateDistance(self, pointA, pointB):\n        \"\"\"\n        :type pointA: tuple\n        :type pointB: tuple\n        :rtype: float\n        \"\"\"\n        latA = pointA[0]\n        lonA = pointA[1]\n        latB = pointB[0]\n        lonB = pointB[1]\n        lat1 = math.radians(latA)\n        lat2 = math.radians(latB)\n        delta_lat = lat2 - lat1\n        delta_lon = lonB - lonA\n        delta_lat = math.degrees(delta_lat)\n        delta_lon = math.degrees(delta_lon)\n        a = (math.sin(delta_lat/2) ** 2 + math.cos(lat1) * math.cos(lat2) * (math.sin(delta_lon/2) ** 2))\n        return 6371 * 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))",
      -2.009765625
    ],
    [
      "# https://www.geeksforgeeks.org/find-the-distance-between-two-points-given-latitude-and-longitude/\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Returns the distance between two points.\n\n    lat1 and lon1 are the latitude and longitude of first point.\n    lat2 and lon2 are the latitude and longitude of second point.\n    \"\"\"\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    d_rad = (lat1-lat2)*math.cos((lon2-lon1)/2)\n    d_deg = 180 * math.asin(math.sqrt(math.sin(d_rad/2)))\n\n    return d_deg * 6371\n\n\nif __name__ == '__main__':\n    print(distance(40.75, -74.00, 40.75, -73.00))",
      -2.06640625
    ],
    [
      "#!/usr/bin/env python\n\n# Calculate the distance between two points using latitude and longitude.\n# input:\n#   lat1, lon1 - latitude and longitude of the first point\n#   lat2, lon2 - latitude and longitude of the second point\n# output:\n#   distance - distance between two points\ndef distance(lat1, lon1, lat2, lon2):\n    r = 6371000\n    # Convert from decimal degrees to radians\n    lat1 = lat1 * math.pi / 180\n    lat2 = lat2 * math.pi / 180\n    # Calculate the angular distance in radians\n    d_rad = lat1 - lat2\n    d_rad = d_rad * math.pi / 180\n    d_rad = d_rad * 180 / math.pi\n    # Calculate the angular distance in meters\n    d_meters = d_rad * r\n    # Return the distance in meters\n    return d_meters",
      -2.26953125
    ],
    [
      "# Hints:\n# Use the Haversine formula\n\ndef distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :param lat1:\n    :param lng1:\n    :param lat2:\n    :param lng2:\n    :return:\n    \"\"\"\n    delta_lat = (lat2 - lat1)\n    delta_long = (lng2 - lng1)\n    a = 6378.140\n    b = 6356.755\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    d = 2 * math.asin(math.sqrt(math.pow(math.sin((delta_lat / 2)), 2) + math.cos(lat1) * math.cos(lat2) * math.pow(math.sin((delta_long / 2)), 2)))\n    return d * 6371\n\nif __name__ == \"__main__\":\n    print distance(45.0, -122.0, 37.0, -122.1)",
      -2.384765625
    ],
    [
      "import math\n\nclass Point:\n    def __init__(self, lat, lon):\n        self.lat = lat\n        self.lon = lon\n\n    def __repr__(self):\n        return \"Point(lat=%s, lon=%s)\" % (self.lat, self.lon)\n\n    def distance(self, other):\n        \"\"\"\n        Returns the distance in km between this point and the other.\n        \"\"\"\n        d_lat = math.radians(self.lat - other.lat)\n        d_lon = math.radians(self.lon - other.lon)\n        return math.sqrt(\n            (math.sin(d_lat/2))**2 +\n            (math.cos(self.lat)*math.cos(other.lat))*\n            (math.sin(d_lon/2))**2\n        )\n\ndef distance(p1, p2):\n    \"\"\"\n    Returns the distance in km between two points using latitude and longitude.\n    \"\"\"\n    return math.sqrt(\n        (math.sin(math.radians(p1.lat-p2.lat)/2))**2 +\n        (math.cos(math.radians(p1.lat))*math.cos(math.radians(p2.lat))*\n         math.sin(math.radians(p1.lon-p2.lon)/2))**2\n    )\n\nif __name__ == \"__main__\":\n    p1 = Point(40.7143, -73.9622)\n    p2 = Point(40.7143, -73.9622)\n    print(p1.distance(p2))\n    print(distance(p1, p2))",
      -2.560546875
    ],
    [
      "# import math\nimport numpy as np\n\n# def distance_between_two_points(lat1, lng1, lat2, lng2):\n#     \"\"\"\n#     :param lat1:\n#     :param lng1:\n#     :param lat2:\n#     :param lng2:\n#     :return:\n#     \"\"\"\n#     # Convert latitude and longitude to radians\n#     radLat1 = math.radians(lat1)\n#     radLat2 = math.radians(lat2)\n#     radLng1 = math.radians(lng1)\n#     radLng2 = math.radians(lng2)\n#     # Calculate the great circle distance between the two points\n#     dLat = radLat2 - radLat1\n#     dLng = radLng2 - radLng1\n#     a = math.sin(dLat/2)**2 + math.cos(radLat1) * math.cos(radLat2) * math.sin(dLng/2)**2\n#     c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n#     # 6367 km is the radius of the Earth\n#     # 6371 km is the radius of the WGS-84 ellipsoid\n#     # 6378 km is the radius of the WGS-72 ellipsoid\n#     # 6378.1 km is the radius of the WGS-84 ellipsoid\n#     # 6378.137 km is the radius of the WGS-84 ellipsoid\n#     # 6356.751 km is the radius of the WGS-72 ellipsoid\n#     # 6356.751 km is the radius of the WGS-84 ellipsoid\n#     # 6356.751 km is the radius of the WGS-72 ellipsoid\n#     # 6356.751 km is the radius of the WGS-84 ellipsoid\n#     # 6356.751 km is the radius of the WGS-72 ellipsoid\n#     # 6356.751 km is the radius of the WGS-84 ellipsoid\n#     # 6356.",
      -2.5859375
    ],
    [
      "from math import radians, cos, sin, asin, sqrt\nimport math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points using latitude and longitude.\n    \"\"\"\n    # convert from decimal degrees to radians\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n    # haversine formula\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    # 6367 km is the radius of the Earth\n    distance = 6367 * c\n    return distance\n\ndef main():\n    \"\"\"\n    Unit Test:\n    \"\"\"\n    lat1 = 40.7500\n    lon1 = -73.0000\n    lat2 = 40.7000\n    lon2 = -73.0000\n    distance = distance(lat1, lon1, lat2, lon2)\n    print \"Distance between {0} and {1} is {2}\".format(lat1, lon1, distance)\n\nif __name__ == \"__main__\":\n    main()",
      -3.18359375
    ],
    [
      "def distance(lat1, lon1, lat2, lon2):\n    radians = 3.1415926 * 180.0 / 180.0\n    delta_lat = radians * (lat2 - lat1)\n    delta_lon = radians * (lon2 - lon1)\n    a = math.sin(delta_lat / 2) * math.sin(delta_lat / 2) + math.cos(radians * lat1) * math.cos(radians * lat2) * math.sin(delta_lon / 2) * math.sin(delta_lon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return 6371 * c\n\nif __name__ == '__main__':\n    lat1 = float(raw_input('Enter latitude of point 1: '))\n    lon1 = float(raw_input('Enter longitude of point 1: '))\n    lat2 = float(raw_input('Enter latitude of point 2: '))\n    lon2 = float(raw_input('Enter longitude of point 2: '))\n    print distance(lat1, lon1, lat2, lon2)",
      -3.630859375
    ],
    [
      "import math\n\ndef calculate_distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: Latitude of point 1\n    :param lon1: Longitude of point 1\n    :param lat2: Latitude of point 2\n    :param lon2: Longitude of point 2\n    :return: distance in metres\n    \"\"\"\n    radius = 6371 # Radius of the earth in metres\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = radius * c\n    return d\n\nif __name__ == '__main__':\n    assert calculate_distance(45.0, -73.0, 45.0, -75.0) == 6378.8\n    assert calculate_distance(45.0, -73.0, 45.0, -73.0) == 0\n    assert calculate_distance(45.0, -73.0, 45.0, -73.0, -90) == 6378.8\n    assert calculate_distance(45.0, -73.0, 45.0, -73.0, -90, -180) == 6378.8\n    assert calculate_distance(45.0, -73.0, 45.0, -73.0, -90, -180, -360) == 6378.8\n    assert calculate_distance(45.0, -73.0, 45.0, -73.0, -90, -180, -360, 0) == 6378.8\n    assert calculate_distance(45.0, -73.0, 45.0, -73.0, -90, -180, -360, 0, -180) == 6378.8\n    assert calculate_distance",
      -3.947265625
    ],
    [
      "__author__ = 'Danyang'\n# Definition for a point.\nclass Point(object):\n    def __init__(self, a, b):\n        self.x = a\n        self.y = b\n\n    def __repr__(self):\n        return '[{}, {}]'.format(self.x, self.y)\n\nclass Solution(object):\n    def distance(self, p1, p2):\n        \"\"\"\n        :type p1: Point\n        :type p2: Point\n        :rtype: float\n        \"\"\"\n        return (p2.x-p1.x)*(p2.x-p1.x) + (p2.y-p1.y)*(p2.y-p1.y)\n\n\nif __name__==\"__main__\":\n    # Point p1 = Point(0,0)\n    # Point p2 = Point(1,1)\n    # print Solution().distance(p1,p2)\n    # print Solution().distance(Point(0,0),Point(1,1))\n    p1 = Point(0,0)\n    p2 = Point(1,1)\n    print Solution().distance(p1,p2)\n    print Solution().distance(Point(0,0),Point(1,1))",
      -4.0625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def distance(self, point_a, point_b):\n        \"\"\"\n        :type point_a: tuple\n        :type point_b: tuple\n        :rtype: float\n        \"\"\"\n        lon1, lat1 = point_a\n        lon2, lat2 = point_b\n        lat1, lon1 = lat1 * (180 / 3.1415926)\n        lat2, lon2 = lat2 * (180 / 3.1415926)\n        lat1 = math.radians(lat1)\n        lat2 = math.radians(lat2)\n        dlat = lat2 - lat1\n        dlon = lon2 - lon1\n        a = math.sin(dlat / 2) * math.sin(dlat / 2) + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) * math.sin(dlon / 2)\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n        return 6371 * c\n\n\nif __name__ == \"__main__\":\n    point_a = (30.26, 120.41)\n    point_b = (30.45, 120.58)\n    print Solution().distance(point_a, point_b)",
      -4.16796875
    ],
    [
      "# https://www.geeksforgeeks.org/dynamic-programming-set-12-distance-between-two-points-latitude-and-longitude/\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Function to calculate distance between two points using latitude and longitude.\n\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    # Initialize the distance matrix.\n    distance_matrix = [[0 for i in range(len(lat2))] for j in range(len(lat1))]\n    # Iterate through the distance matrix to calculate the distance between lat1 and lat2.\n    for i in range(len(lat1)):\n        for j in range(len(lat2)):\n            # Calculate the distance between lat1 and lat2.\n            distance_matrix[i][j] = (lat1[i] - lat2[j]) ** 2 + (lon1[i] - lon2[j]) ** 2\n    return distance_matrix[len(lat1) - 1][len(lat2) - 1]",
      -4.1875
    ],
    [
      "def distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    R = 6371\n    dlat = math.radians(lat2-lat1)\n    dlon = math.radians(lng2-lng1)\n    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dlon/2) * math.sin(dlon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert distance(51.500, -0.126, 51.510, -0.140) == 8.6, \"Test1\"\n    assert distance(51.500, -0.126, 52.984, -1.766) == 6.7, \"Test2\"\n    assert distance(51.500, -0.126, -10, -10) == 0, \"Test3\"\n    assert distance(51.500, -0.126, -10, -11) == 1.6, \"Test4\"",
      -4.203125
    ],
    [
      "from math import pi\n\nlat1 = float(input(\"Enter latitude of point 1: \"))\nlong1 = float(input(\"Enter longitude of point 1: \"))\nlat2 = float(input(\"Enter latitude of point 2: \"))\nlong2 = float(input(\"Enter longitude of point 2: \"))\n\n# Calculate distance\nd = ((lat2 - lat1) * pi) / 180.0\nd = d * d\nd = d + ((long2 - long1) * pi) / 180.0\nd = d * d\n\nprint(\"The distance between points (lat1, long1) and (lat2, long2) is: {}\".format(d))",
      -4.3828125
    ],
    [
      "#!/usr/bin/env python\n\nimport math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1:\n    :param lon1:\n    :param lat2:\n    :param lon2:\n    :return:\n    \"\"\"\n    # convert decimal degrees to radians\n    lat1 = lat1 * math.pi / 180.0\n    lon1 = lon1 * math.pi / 180.0\n    lat2 = lat2 * math.pi / 180.0\n    lon2 = lon2 * math.pi / 180.0\n\n    # haversine formula\n    d_rad = 6371.0\n    # distance in kilometers\n    d_km = d_rad * math.cos(lat1) * math.cos(lat2) * math.acos((math.sin(lon1 - lon2) +\n                                                                 math.sin(lat1) * math.sin(lat2)) / (math.sqrt(math.pow(math.sin(lat1 * math.pi / 180.0), 2) +\n                                                                                           math.cos(lat1) * math.cos(lat2) * math.pow(math.sin(lon1 * math.pi / 180.0 -\n                                                                                                                                                      lon2 * math.pi / 180.0), 2))\n    )\n\n    return d_km\n\ndef main():\n    lat1 = 43.5\n    lon1 = -79.9\n    lat2 = 37.5\n    lon2 = -122.2\n\n    print(distance(lat1, lon1, lat2, lon2))\n\nif __name__ == '__main__':\n    main()",
      -5.6875
    ],
    [
      "def distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    from math import sin, asin, cos, acos, sqrt, atan2\n    \n    lat1 = float(lat1)\n    lng1 = float(lng1)\n    lat2 = float(lat2)\n    lng2 = float(lng2)\n    \n    lat1 = lat1 * 57.2957795\n    lng1 = lng1 * 57.2957795\n    lat2 = lat2 * 57.2957795\n    lng2 = lng2 * 57.2957795\n    \n    sin_lat1 = sin(lat1)\n    cos_lat1 = cos(lat1)\n    sin_lat2 = sin(lat2)\n    cos_lat2 = cos(lat2)\n    \n    sin_lng1 = sin(lng1)\n    cos_lng1 = cos(lng1)\n    sin_lng2 = sin(lng2)\n    cos_lng2 = cos(lng2)\n    \n    d_lat = acos(sin_lat1*sin_lat2 + cos_lat1*cos_lat2*cos_lng2)\n    d_lng = atan2(sin_lng2*cos_lat1, cos_lng1*cos_lat2-sin_lng1*sin_lat2)\n    \n    return d_lat * 6371000 + d_lng * 6371000\n\nif __name__ == \"__main__\":\n    lat1 = \"45.634961\"\n    lng1 = \"-75.678933\"\n    lat2 = \"45.640984\"\n    lng2 = \"-75.673777\"\n    print(distance(lat1, lng1, lat2, lng2))",
      -5.70703125
    ],
    [
      "# https://www.tutorialspoint.com/python/python_geometry.htm\n# https://www.tutorialspoint.com/python/python_math.htm\n# https://stackoverflow.com/questions/23553900/how-to-calculate-the-distance-between-two-points-on-earth\n# https://www.tutorialspoint.com/python/python_math.htm\n# https://stackoverflow.com/questions/18062078/how-to-calculate-distance-between-two-points-on-earth\n# https://stackoverflow.com/questions/10302999/python-calculate-distance-between-two-points-on-earth\n# https://stackoverflow.com/questions/20405088/python-calculate-distance-between-two-points-on-earth\n\n# TODO:\n# 1. Use numpy for speed.\n# 2. Use scipy for accuracy.\n# 3. Use math.cos instead of cos.\n# 4. Use math.radians instead of degrees.\n# 5. Use math.degrees instead of radians.\n# 6. Use math.radians instead of radians.\n# 7. Use math.radians instead of radians.\n# 8. Use math.radians instead of radians.\n# 9. Use math.radians instead of radians.\n# 10. Use math.radians instead of radians.\n# 11. Use math.radians instead of radians.\n# 12. Use math.radians instead of radians.\n# 13. Use math.radians instead of radians.\n# 14. Use math.radians instead of radians.\n# 15. Use math.radians instead of radians.\n# 16. Use math.radians instead of radians.\n# 17. Use math.radians instead of radians.\n# 18. Use math.radians instead of radians.\n# 19. Use math.radians instead of radians.\n# 20. Use math.radians instead of radians.\n# 21. Use math.radians instead of radians.\n# 22. Use math.radians instead of radians.",
      -5.9453125
    ],
    [
      "from math import cos, sin, radians, degrees\n\n\nclass Point:\n    def __init__(self, lat, lon):\n        self.lat = lat\n        self.lon = lon\n\n    def distance(self, point):\n        d_lat = degrees(self.lat - point.lat)\n        d_lon = degrees(self.lon - point.lon)\n\n        return (d_lat ** 2 + d_lon ** 2) ** 0.5\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    d_lat = degrees(lat1 - lat2)\n    d_lon = degrees(lon1 - lon2)\n\n    return (d_lat ** 2 + d_lon ** 2) ** 0.5\n\n\ndef test():\n    assert distance(0, 0, 0, 0) == 0\n    assert distance(0, 0, 0, 180) == 0\n    assert distance(0, 0, 0, 90) == 0\n    assert distance(0, 0, 0, -90) == 0\n\n    assert distance(0, 0, 0, 10) == 10\n    assert distance(0, 0, 0, -10) == 10\n\n    assert distance(0, 0, 90, 0) == 90\n    assert distance(0, 0, 90, -90) == 90\n    assert distance(0, 0, 90, -180) == 90\n    assert distance(0, 0, 90, 180) == 90\n\n    assert distance(0, 0, -90, 0) == 90\n    assert distance(0, 0, -90, -90) == 90\n    assert distance(0, 0, -90, -180) == 90\n    assert distance(0, 0, -90, 180) == 90\n\n    assert distance(0, 0, 90, 10) == 10\n    assert distance(0, 0, 90, -10) == 10\n\n    assert distance(0, 0, 180, 0) == 180\n    assert distance(0, 0, 180, -180) == 180\n    assert distance(0, 0, 180, -90) == 180\n    assert distance(0, 0, 180, 90) == 180\n\n    assert distance(0, 0, -180, 0) == 180\n    assert",
      -6.171875
    ],
    [
      "import math\n\nclass Point:\n    def __init__(self, latitude, longitude):\n        self.latitude = latitude\n        self.longitude = longitude\n\n    def get_distance(self, other):\n        \"\"\"\n        :type self: Point\n        :type other: Point\n        :rtype: float\n        \"\"\"\n        a = self.latitude\n        b = other.latitude\n        c = self.longitude\n        d = other.longitude\n        \n        earth_radius = 6371\n        \n        ha = hae = hae_ = 0\n        \n        ha = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae_ = hae",
      -6.87109375
    ],
    [
      "def distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: latitude of point 1\n    :param lon1: longitude of point 1\n    :param lat2: latitude of point 2\n    :param lon2: longitude of point 2\n    :return: distance between two points\n    \"\"\"\n    # latitude = 90 - latitude\n    # longitude = 180 - longitude\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two points\n    # calculate the distance between two",
      -7.40234375
    ],
    [
      "import math\n\ndef distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    # distance in radians\n    rlat1 = math.radians(lat1)\n    rlat2 = math.radians(lat2)\n    rlon1 = math.radians(lng1)\n    rlon2 = math.radians(lng2)\n\n    # distance in degrees\n    dlat = math.degrees(math.asin(math.sin(rlat1) * math.cos(rlon2) + math.cos(rlat1) * math.sin(rlon2) * math.cos(rlon1 - rlon2)))\n    dlng = math.degrees(math.atan2(math.sin(rlon2 - rlon1) * math.cos(rlat2), math.cos(rlat1) * math.sin(rlat2) - math.sin(rlat1) * math.cos(rlat2) * math.cos(rlon2 - rlon1)))\n\n    # distance in meters\n    return 6371 * dlat * 1000 * math.cos(dlat / 2)\n\nif __name__ == \"__main__\":\n    # test case\n    lat1 = 41.9167\n    lng1 = -87.6501\n    lat2 = 41.9167\n    lng2 = -87.6501\n    print(distance(lat1, lng1, lat2, lng2))\n    \n    # python version\n    lat1 = 41.9167\n    lng1 = -87.6501\n    lat2 = 41.9167\n    lng2 = -87.6501\n    print(distance(lat1, lng1, lat2, lng2))",
      -9.953125
    ],
    [
      "class Point(object):\n    def __init__(self, latitude, longitude):\n        self.latitude = latitude\n        self.longitude = longitude\n\n    def __str__(self):\n        return '{},{}'.format(self.latitude, self.longitude)\n\n    def __eq__(self, other):\n        return (self.latitude == other.latitude and self.longitude == other.longitude)\n\nclass Distance(object):\n    def __init__(self, lat1, lon1, lat2, lon2):\n        self.lat1 = lat1\n        self.lon1 = lon1\n        self.lat2 = lat2\n        self.lon2 = lon2\n\n    def __str__(self):\n        return '{},{} -> {}'.format(self.lat1, self.lon1, self.lat2, self.lon2)\n\n    def __eq__(self, other):\n        return (self.lat1 == other.lat1 and self.lon1 == other.lon1 and self.lat2 == other.lat2 and self.lon2 == other.lon2)\n\n    def __ge__(self, other):\n        return (self.lat1 >= other.lat1 and self.lon1 >= other.lon1 and self.lat2 >= other.lat2 and self.lon2 >= other.lon2)\n\n    def __lt__(self, other):\n        return (self.lat1 < other.lat1 and self.lon1 < other.lon1 and self.lat2 < other.lat2 and self.lon2 < other.lon2)\n\n    def distance(self):\n        # https://en.wikipedia.org/wiki/Great-circle_distance\n        lat1 = math.radians(self.lat1)\n        lat2 = math.radians(self.lat2)\n        lon1 = math.radians(self.lon1)\n        lon2 = math.radians(self.lon2)\n\n        dLat = lat2 - lat1\n        dLon = lon2 - lon1\n\n        a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(",
      -11.796875
    ],
    [
      "import math\n\nclass Solution(object):\n    def distance(self, x1, y1, x2, y2):\n        \"\"\"\n        :type x1: float\n        :type y1: float\n        :type x2: float\n        :type y2: float\n        :rtype: float\n        \"\"\"\n        rad = math.radians(y1)\n        d_lat = math.radians(y2) - rad\n        d_lon = math.radians(x2) - math.radians(x1)\n        d_lon = d_lon if d_lon > 0 else 2 * math.pi + d_lon\n        d_lon = d_lon if d_lon < math.pi else math.pi + d_lon\n        return math.hypot(math.sin(d_lat/2)*math.cos(rad),\n                          math.cos(rad)*math.sin(d_lon/2)-math.sin(rad)*math.cos(d_lon/2))\n\n\nif __name__ == \"__main__\":\n    assert Solution().distance(0, 0, 1, 1) == 2\n    assert Solution().distance(0, 0, 0, 0) == 0\n    assert Solution().distance(0, 1, 0, 1) == 2\n    assert Solution().distance(1, 0, 0, 1) == 2\n    assert Solution().distance(1, 0, 1, 1) == 2\n    assert Solution().distance(0, 1, 1, 1) == 2\n    assert Solution().distance(1, 1, 1, 1) == 2",
      -12.21875
    ],
    [
      "# import the libraries\nimport math\nimport os\nimport sys\n\n# import the modules\nimport pylab as pl\n\n# import the functions\nfrom functions import *\n\n# the main function\ndef main():\n    \"\"\"\n    The main function to calculate distance between two points.\n    \"\"\"\n\n    # read the input file\n    with open(sys.argv[1]) as f:\n        lines = f.readlines()\n    \n    # split the lines\n    lines = [line.strip() for line in lines]\n\n    # check the number of lines\n    if len(lines)!= 3:\n        print \"Invalid number of lines\"\n        exit()\n\n    # split the lines\n    line_1 = lines[0].split()\n    line_2 = lines[1].split()\n    line_3 = lines[2].split()\n\n    # calculate the distance\n    distance = calculateDistance(line_1[0], line_1[1], line_2[0], line_2[1], line_3[0], line_3[1])\n\n    # print the distance\n    print distance\n\n    # plot the distance\n    pl.plot(line_1[0], line_1[1], line_2[0], line_2[1], line_3[0], line_3[1], label=\"Distance\", linestyle=\"-\")\n    pl.plot(line_1[0], line_1[1], line_2[0], line_2[1], line_3[0], line_3[1], label=\"Distance\", linestyle=\"--\")\n    pl.xlabel(\"Latitude\")\n    pl.ylabel(\"Longitude\")\n    pl.legend(loc=\"upper left\")\n    pl.show()\n\n# call the main function\nif __name__ == \"__main__\":\n    main()",
      -12.390625
    ],
    [
      "# https://www.geeksforgeeks.org/distance-two-points-polar-coordinates/\n\ndef get_distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    R = 6371  # Radius of the earth in km\n    dLat = math.radians(lat2-lat1)\n    dLon = math.radians(lng2-lng1)\n    a = math.sin(dLat/2)**2 + math.cos(math.radians(lat1))*math.cos(math.radians(lat2))*math.sin(dLon/2)**2\n    c = 2*math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R*c\n    return d\n\ndef get_distance_via_formula(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    return 6371 * 2 * math.acos(math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.cos(lng2-lng1))\n\nif __name__ == \"__main__\":\n    lat1 = 38.8\n    lng1 = -77.6\n    lat2 = 38.8\n    lng2 = -77.6\n\n    print(get_distance(lat1, lng1, lat2, lng2))\n    print(get_distance_via_formula(lat1, lng1, lat2, lng2))",
      -15.34375
    ],
    [
      "def distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    # convert to radians\n    lat1 = lat1 * math.pi / 180\n    lat2 = lat2 * math.pi / 180\n    lon1 = lon1 * math.pi / 180\n    lon2 = lon2 * math.pi / 180\n    # convert to miles\n    a = 6373.0\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    sindlat = math.sin(dlat / 2.0)\n    sindlon = math.sin(dlon / 2.0)\n    a = 6371.0 * math.acos(math.cos(lat1) * math.cos(lat2) * math.cos(dlon) + math.sin(lat1) * math.sin(lat2))\n    a = a * sindlon * sindlon + math.cos(lat1) * math.cos(lat2) * sindlat * sindlat\n    a = 2 * a * 6367.0 * 1000\n    return a\n\nif __name__ == \"__main__\":\n    assert distance(42.3, -71.0, 42.4, -71.1) == 14.5",
      -16.078125
    ],
    [
      "def distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    Input:\n    lat1, lng1: latitude and longitude of the first point\n    lat2, lng2: latitude and longitude of the second point\n    Output:\n    distance: distance between the two points\n    \"\"\"\n    radius = 6378.1\n    # Convert to radians\n    lat1 = lat1 * (np.pi / 180)\n    lat2 = lat2 * (np.pi / 180)\n    lng1 = lng1 * (np.pi / 180)\n    lng2 = lng2 * (np.pi / 180)\n\n    delta_lat = lat2 - lat1\n    delta_lng = lng2 - lng1\n\n    a = np.sin(delta_lat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(delta_lng/2)**2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    d = radius * c\n    return d\n\n\nif __name__ == '__main__':\n    assert distance(50, 0, 50, 10) == 50\n    assert distance(50, 0, 50, -10) == 50\n    assert distance(50, 0, 50, 180) == 50\n    assert distance(50, 0, 50, -180) == 50\n    assert distance(50, 0, 50, -90) == 50\n    assert distance(50, 0, 50, 90) == 50\n    assert distance(50, 0, 50, -180) == 50\n    assert distance(50, 0, 50, 180) == 50\n    assert distance(50, 0, 50, -90) == 50\n    assert distance(50, 0, 50, 90) == 50\n    assert distance(50, 0, 50, -180) == 50\n    assert distance(50, 0, 50, 180) == 50\n    assert distance(50, 0, 50, -90) == 50\n    assert distance(50, 0, 50, 90) == 50\n    assert distance(50, 0, 50, -180)",
      -16.25
    ],
    [
      "# TODO:\n# Write a function to calculate distance between two points using latitude and longitude.\n# Use the formula:\n#      lat1, lon1 = 36.0 * (x - 180.0) / 360.0\n#      lat2, lon2 = 36.0 * (y - 90.0) / 360.0\n#      return round(6371 * (math.sin(math.radians(lat2 - lat1))\n#                          + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2))\n#                          * math.sin(math.radians(lon2 - lon1))), 1)\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points.\n\n    :param lat1: Latitude of first point\n    :param lon1: Longitude of first point\n    :param lat2: Latitude of second point\n    :param lon2: Longitude of second point\n    :return: Distance between two points in kilometers\n    \"\"\"\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    return 6371 * math.acos(\n            math.sin(lat1) * math.sin(lat2) +\n            math.cos(lat1) * math.cos(lat2) * math.cos(lon2 - lon1))\n\nif __name__ == \"__main__\":\n    assert distance(0, 0, 45, 0) == 6371, \"Test failed\"\n    assert distance(0, 0, 45, 45) == 6371, \"Test failed\"\n    assert distance(0, 0, 0, 45) == 6371, \"Test failed\"\n    assert distance(0, 0, 90, 0) == 6371, \"Test failed\"\n    assert distance(0, 0, 90, 90) == 6371, \"Test failed\"\n    assert distance(0, 0, 180, 0) == 6371, \"Test failed\"\n    assert distance(0, 0, 180, 180)",
      -16.734375
    ],
    [
      "def distance(lat1, lng1, lat2, lng2):\n    \"\"\"\n    :type lat1: float\n    :type lng1: float\n    :type lat2: float\n    :type lng2: float\n    :rtype: float\n    \"\"\"\n    rad = math.radians(lat1)\n    delta_lng = math.radians(lng2 - lng1)\n    delta_lat = math.radians(lat2 - lat1)\n    a = math.sin(delta_lat/2)**2 + math.cos(rad) * math.cos(delta_lng/2) * math.sin(delta_lng/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = 6371000 * c\n    return d\n\nif __name__ == \"__main__\":\n    assert distance(0, 0, 0, 0) == 0\n    assert distance(0, 0, 1, 0) == 6371000\n    assert distance(0, 0, 1, 1) == 6378000\n    assert distance(0, 0, 1, 90) == 6371000\n    assert distance(0, 0, 1, 180) == 6371000\n    assert distance(0, 0, 1, 270) == 6371000\n    assert distance(0, 0, 1, 359) == 6371000\n    assert distance(0, 0, 0, 1) == 6371000\n    assert distance(0, 0, 1, 1.1) == 6371000\n    assert distance(0, 0, 1, -1.1) == 6371000\n    assert distance(0, 0, 1, 359.9) == 6371000\n    assert distance(0, 0, 1, -359.9) == 6371000",
      -17.078125
    ],
    [
      "def distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    return 3958.75 * (np.sin((lat2 - lat1) / 2) ** 2 +\n                      np.cos(lat1) * np.cos(lat2) * (np.sin((lon2 - lon1) / 2) ** 2))\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert distance(40.7233, -73.9932, 40.7708, -73.9559) == 0.0, \"Example\"\n    assert distance(40.7233, -73.9932, 40.7708, -73.9559) == distance(40.7233, -73.9932, 40.7708, -73.9559), \"Example\"\n    assert distance(40.7233, -73.9932, 40.7708, -73.9559) == distance(40.7233, -73.9932, 40.7708, -73.9559), \"Example\"",
      -17.078125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}