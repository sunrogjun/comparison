{
  "problem": {
    "task_id": "MBPP/32",
    "prompt": "Write a python function to find the largest prime factor of a given number.",
    "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
    "test_list": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ],
    "challenge_test_list": [],
    "problem_id": 21
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def largest_prime_factor(num):\n    \"\"\"\n    >>> largest_prime_factor(4)\n    2\n    >>> largest_prime_factor(6)\n    2\n    >>> largest_prime_factor(16)\n    3\n    >>> largest_prime_factor(25)\n    5\n    >>> largest_prime_factor(28)\n    7\n    \"\"\"\n    # Prime factors of a number are in range [2, sqrt(num)]\n    # Assume num is a number greater than 1\n    if num < 2:\n        return 0\n    sqrt_num = int(num ** 0.5)\n    # Find the smallest prime factor of num\n    # Assume num is a number greater than 1\n    for prime in range(2, sqrt_num + 1):\n        if num % prime == 0:\n            return prime\n    # If no prime factor is found, return 0\n    return 0\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.572265625
    ],
    [
      "from math import sqrt\n\ndef largestPrimeFactor(n):\n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n\n    :param n: the number\n    :type n: int\n\n    :rtype: int\n    \"\"\"\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            if n == 1:\n                return i\n    return n\n\nif __name__ == '__main__':\n    print(largestPrimeFactor(2147483647))\n    print(largestPrimeFactor(2))\n    print(largestPrimeFactor(4))\n    print(largestPrimeFactor(6))\n    print(largestPrimeFactor(10))\n    print(largestPrimeFactor(11))\n    print(largestPrimeFactor(14))\n    print(largestPrimeFactor(15))\n    print(largestPrimeFactor(16))\n    print(largestPrimeFactor(17))\n    print(largestPrimeFactor(21))\n    print(largestPrimeFactor(100))\n    print(largestPrimeFactor(101))",
      0.82763671875
    ],
    [
      "#!/usr/bin/env python\n\ndef largest_prime_factor(num):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \"\"\"\n    if num <= 1:\n        return num\n    elif num == 2:\n        return 2\n    elif num % 2 == 0:\n        return 2\n    else:\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return i\n    return num\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(largest_prime_factor(i))",
      0.7373046875
    ],
    [
      "def find_largest_prime_factor(n):\n    \"\"\"\n    Write a function that takes a positive integer as an argument and returns\n    the largest prime factor of that number.\n\n    Example:\n        >>> find_largest_prime_factor(6)\n        3\n        >>> find_largest_prime_factor(9)\n        3\n        >>> find_largest_prime_factor(24)\n        3\n        >>> find_largest_prime_factor(34)\n        5\n        >>> find_largest_prime_factor(123)\n        61\n        >>> find_largest_prime_factor(1337)\n        313\n        >>> find_largest_prime_factor(1234)\n        121\n    \"\"\"\n    n = int(n)\n    if n == 1:\n        return 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(find_largest_prime_factor(n))",
      0.6044921875
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    :param number:\n    :return:\n    \"\"\"\n\n    if number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    elif number % 2 == 0:\n        return largest_prime_factor(number / 2)\n    else:\n        return 3\n\n\nif __name__ == '__main__':\n    print(largest_prime_factor(1234))",
      0.1390380859375
    ],
    [
      "import math\n\ndef is_prime(n):\n    \"\"\"\n    Check whether a given number is prime.\n    :param n:\n    :return:\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_factors(n):\n    \"\"\"\n    Get prime factors of a given number.\n    :param n:\n    :return:\n    \"\"\"\n    factors = []\n    if n == 1:\n        return [1, 1]\n    if not is_prime(n):\n        return [n]\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\nif __name__ == \"__main__\":\n    n = 123\n    print get_prime_factors(n)",
      0.038909912109375
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    >>> largest_prime_factor(20)\n    20\n    >>> largest_prime_factor(28)\n    7\n    >>> largest_prime_factor(10)\n    5\n    >>> largest_prime_factor(16)\n    5\n    >>> largest_prime_factor(42)\n    7\n    >>> largest_prime_factor(8)\n    2\n    >>> largest_prime_factor(1)\n    1\n    >>> largest_prime_factor(0)\n    0\n    >>> largest_prime_factor(23)\n    23\n    \"\"\"\n    if n == 0:\n        return 0\n\n    # If n is even, return n\n    if n % 2 == 0:\n        return n\n\n    # If n is odd, return the largest prime factor of n\n    if n > 1:\n        return largest_prime_factor(n // 2)\n\n    # If n is even, return 1\n    return 1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.035919189453125
    ],
    [
      "import math\n\ndef largest_prime_factor(num):\n    \"\"\"\n    Find the largest prime factor of num.\n    \"\"\"\n    while num > 1:\n        if num % 2 == 0:\n            num /= 2\n        elif num % 3 == 0:\n            num /= 3\n        else:\n            num, remainder = divmod(num, 5)\n    return num\n\n\ndef main():\n    \"\"\"\n    Run largest_prime_factor() on the given number.\n    \"\"\"\n    num = int(raw_input('Enter a number: '))\n    print largest_prime_factor(num)\n\nif __name__ == '__main__':\n    main()",
      -0.03076171875
    ],
    [
      "def largest_prime_factor(num):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    num: the number to be factorized.\n    \"\"\"\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num < 2:\n        return num\n    else:\n        start = 2\n        end = num - 1\n        while start < end:\n            # print start\n            # print end\n            mid = (start + end) / 2\n            if num % mid == 0:\n                end = mid\n            else:\n                start = mid + 1\n        return end\n\n\nif __name__ == \"__main__\":\n    assert largest_prime_factor(123) == 23\n    assert largest_prime_factor(12345) == 23\n    assert largest_prime_factor(123456789) == 233\n    assert largest_prime_factor(12345678901) == 233\n    assert largest_prime_factor(1234567890123) == 233\n    assert largest_prime_factor(123456789012345) == 233\n    assert largest_prime_factor(12345678901234567) == 233",
      -0.1488037109375
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n //= i\n            if n == 1:\n                return i\n    return n\n\nif __name__ == \"__main__\":\n    print(largest_prime_factor(100))\n    print(largest_prime_factor(2))\n    print(largest_prime_factor(3))\n    print(largest_prime_factor(4))\n    print(largest_prime_factor(6))\n    print(largest_prime_factor(8))\n    print(largest_prime_factor(16))\n    print(largest_prime_factor(32))\n    print(largest_prime_factor(128))",
      -0.314697265625
    ],
    [
      "def largestPrimeFactor(num):\n    \"\"\"\n    >>> largestPrimeFactor(100)\n    3\n    >>> largestPrimeFactor(10)\n    5\n    >>> largestPrimeFactor(20)\n    5\n    >>> largestPrimeFactor(100)\n    7\n    >>> largestPrimeFactor(50)\n    5\n    >>> largestPrimeFactor(10)\n    5\n    >>> largestPrimeFactor(4)\n    1\n    >>> largestPrimeFactor(5)\n    5\n    >>> largestPrimeFactor(6)\n    1\n    >>> largestPrimeFactor(4)\n    1\n    \"\"\"\n    for i in range(2, num):\n        if num % i == 0:\n            while num % i == 0:\n                num /= i\n            if num == 1:\n                return i\n    return num\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.364013671875
    ],
    [
      "def largest_prime_factor(num):\n    \"\"\"\n    :param num: a positive integer\n    :return: the largest prime factor of num\n    \"\"\"\n\n    # create a dictionary of factors\n    factors = {}\n    for i in range(2, num):\n        if num % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n    return max(factors.keys())\n\n\nif __name__ == '__main__':\n    assert largest_prime_factor(2) == 2\n    assert largest_prime_factor(4) == 2\n    assert largest_prime_factor(5) == 5\n    assert largest_prime_factor(10) == 2\n    assert largest_prime_factor(100) == 2\n    assert largest_prime_factor(200) == 2\n    assert largest_prime_factor(500) == 5\n    assert largest_prime_factor(1000) == 3\n    assert largest_prime_factor(5000) == 5\n    assert largest_prime_factor(10000) == 5\n    assert largest_prime_factor(20000) == 5\n    assert largest_prime_factor(50000) == 5\n    assert largest_prime_factor(100000) == 10\n    assert largest_prime_factor(500000) == 5\n    assert largest_prime_factor(1000000) == 2",
      -0.59912109375
    ],
    [
      "def largestPrimeFactor(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number <= 1:\n        return 0\n\n    # Get all prime factors of number\n    factorSet = set(primeFactors(number))\n\n    # Get the largest prime factor\n    largestPrime = max(factorSet)\n\n    return largestPrime\n\ndef primeFactors(number):\n    \"\"\"\n    :type number: int\n    :rtype: set\n    \"\"\"\n    if number == 1:\n        return set([1])\n\n    primeSet = set()\n\n    for i in range(2, number):\n        if number % i == 0:\n            primeSet.add(i)\n            primeSet.add(number / i)\n\n    return primeSet\n\nif __name__ == \"__main__\":\n    print(largestPrimeFactor(12))\n    print(largestPrimeFactor(13))\n    print(largestPrimeFactor(25))\n    print(largestPrimeFactor(41))\n    print(largestPrimeFactor(42))\n    print(largestPrimeFactor(43))",
      -0.74853515625
    ],
    [
      "def largestPrimeFactor(n):\n    \"\"\"\n    >>> largestPrimeFactor(6)\n    3\n    >>> largestPrimeFactor(13)\n    5\n    >>> largestPrimeFactor(16)\n    3\n    >>> largestPrimeFactor(25)\n    5\n    >>> largestPrimeFactor(35)\n    7\n    >>> largestPrimeFactor(36)\n    5\n    >>> largestPrimeFactor(50)\n    11\n    \"\"\"\n    # TODO: Implement the function\n    return\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number <= 1:\n        return 1\n    if number % 2 == 0:\n        return 2\n    i = 3\n    while i < number:\n        if number % i == 0:\n            return i\n        i += 2\n    return i\n\n\nif __name__ == \"__main__\":\n    assert largest_prime_factor(10) == 2\n    assert largest_prime_factor(7) == 7\n    assert largest_prime_factor(6) == 3\n    assert largest_prime_factor(2) == 2\n    assert largest_prime_factor(1) == 1",
      -0.85693359375
    ],
    [
      "def largestPrimeFactor(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n    return n",
      -0.85693359375
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    Write a function to find the largest prime factor of a given number.\n\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 1:\n        while n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3\n    return n\n\n\nif __name__ == '__main__':\n    print(largest_prime_factor(20))\n    print(largest_prime_factor(123))",
      -0.85791015625
    ],
    [
      "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef largestPrimeFactor(num):\n  \"\"\"\n  Find the largest prime factor of a given number.\n  :param num: integer\n  :return: the largest prime factor of num\n  \"\"\"\n  if num == 0:\n    return 0\n  if num == 1:\n    return 1\n  if num % 2 == 0:\n    return 2\n  # Find the number of factors\n  factors = int(math.ceil(math.sqrt(num)))\n  for i in range(3, factors + 1):\n    if num % i == 0:\n      return i\n  return num",
      -0.85791015625
    ],
    [
      "def find_largest_prime_factor(n):\n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n\n    Input:\n    n = A number\n    Output:\n    n\n    \"\"\"\n    return 1\n\ndef main():\n    print(find_largest_prime_factor(200))\n    print(find_largest_prime_factor(1000))\n    print(find_largest_prime_factor(100))\n    print(find_largest_prime_factor(50))\n    print(find_largest_prime_factor(25))\n    print(find_largest_prime_factor(20))\n    print(find_largest_prime_factor(10))\n    print(find_largest_prime_factor(5))\n    print(find_largest_prime_factor(4))\n    print(find_largest_prime_factor(3))\n    print(find_largest_prime_factor(2))\n    print(find_largest_prime_factor(1))\n    print(find_largest_prime_factor(0))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def find_largest_prime_factor(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    \n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            number = number / i\n            return i\n    return number\n\n# Your function will be called like this:\n# num = find_largest_prime_factor(num)",
      -0.85791015625
    ],
    [
      "def get_prime_factors(n):\n    \"\"\"\n    Return a list of prime factors of the number n.\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            break\n    return factors\n\ndef get_largest_prime_factor(n):\n    \"\"\"\n    Return the largest prime factor of n.\n    \"\"\"\n    factors = get_prime_factors(n)\n    return max(factors) if factors else n\n\nif __name__ == '__main__':\n    print(get_largest_prime_factor(100))",
      -0.85791015625
    ],
    [
      "def find_largest_prime_factor(num):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    :param num: The number whose largest prime factor is to be found.\n    :returns: The largest prime factor of the number.\n    \"\"\"\n\n    num_list = []\n    for i in range(2, num):\n        while num % i == 0:\n            num_list.append(i)\n            num = num // i\n\n    if len(num_list) == 0:\n        return num\n    else:\n        return max(num_list)\n\nif __name__ == \"__main__\":\n    num = 100\n    print(\"The largest prime factor of \" + str(num) + \" is \" + str(find_largest_prime_factor(num)))",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef get_prime_factor(n):\n    \"\"\"\n    Return the largest prime factor of n.\n\n    >>> get_prime_factor(9)\n    3\n    >>> get_prime_factor(15)\n    5\n    >>> get_prime_factor(12)\n    2\n    \"\"\"\n    # Find the largest prime factor of n\n    largest_prime = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            largest_prime = max(largest_prime, i)\n            while n % i == 0:\n                n /= i\n    return n, largest_prime\n\n\nif __name__ == '__main__':\n    print(get_prime_factor(9))\n    print(get_prime_factor(15))\n    print(get_prime_factor(12))",
      -0.85791015625
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    The largest prime factor of a given number is the largest prime factor of\n    the number itself.\n    \"\"\"\n\n    def get_prime_factors(number):\n        \"\"\"\n        Get the prime factors of a given number.\n        \"\"\"\n\n        factors = []\n        for i in range(2, number):\n            if number % i == 0:\n                factors.append(i)\n                number = number / i\n        if number == 1:\n            factors.append(1)\n        return factors\n\n    return max(get_prime_factors(number))",
      -0.85791015625
    ],
    [
      "def largestPrimeFactor(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num <= 1:\n        return num\n    \n    i = 2\n    while i < num:\n        if num % i == 0:\n            num = num / i\n        else:\n            i += 1\n    return i\n\nif __name__ == '__main__':\n    print largestPrimeFactor(200)\n    print largestPrimeFactor(123)\n    print largestPrimeFactor(6)\n    print largestPrimeFactor(6)\n    print largestPrimeFactor(4)\n    print largestPrimeFactor(5)\n    print largestPrimeFactor(2)\n    print largestPrimeFactor(1)\n    print largestPrimeFactor(0)\n    print largestPrimeFactor(100)",
      -0.85791015625
    ],
    [
      "def largest_prime_factor(num):\n    \"\"\"\n    Write a function to find the largest prime factor of a given number.\n    :param num: The number to be checked.\n    :return: The largest prime factor of the number.\n    \"\"\"\n    num = int(num)\n    if num == 1:\n        return 1\n    for i in range(2, num):\n        if num % i == 0:\n            return i\n    return num\n\ndef main():\n    num = 10\n    print(largest_prime_factor(num))\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef find_largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of n.\n\n    :param n: a positive integer.\n    :return: the largest prime factor of n.\n    \"\"\"\n    result = n\n    while n % 2 == 0:\n        n //= 2\n        result = max(result, n)\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            n //= i\n            result = max(result, i)\n    return result\n\n\ndef main():\n    \"\"\"\n    Test cases.\n    \"\"\"\n    print(find_largest_prime_factor(12))\n    print(find_largest_prime_factor(13))\n    print(find_largest_prime_factor(15))\n    print(find_largest_prime_factor(30))\n    print(find_largest_prime_factor(100))\n    print(find_largest_prime_factor(500))\n    print(find_largest_prime_factor(1000))\n    print(find_largest_prime_factor(10000))\n    print(find_largest_prime_factor(100000))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    :param number: the number to find the largest prime factor of\n    :type number: int\n    :return: the largest prime factor of number\n    :rtype: int\n    \"\"\"\n    # if number is not a prime number, return number\n    if number % 2 == 0 or number % 3 == 0 or number % 5 == 0 or number % 7 == 0:\n        return number\n    # if number is not a perfect square, return number\n    if number % (number - 1)!= 0:\n        return number\n    # if number is a perfect square, return the square root\n    return int(number ** 0.5)\n\n# Test Cases\nprint(largest_prime_factor(1))\nprint(largest_prime_factor(2))\nprint(largest_prime_factor(3))\nprint(largest_prime_factor(4))\nprint(largest_prime_factor(5))\nprint(largest_prime_factor(6))\nprint(largest_prime_factor(7))\nprint(largest_prime_factor(8))\nprint(largest_prime_factor(9))\nprint(largest_prime_factor(10))\nprint(largest_prime_factor(100))\nprint(largest_prime_factor(1000))\nprint(largest_prime_factor(10000))",
      -0.8583984375
    ],
    [
      "def find_largest_prime_factor(num):\n    \"\"\"\n    Write a function to find the largest prime factor of a given number.\n\n    Example 1:\n\n    Input: 14\n    Output: 7\n    Explanation: 14 = 2^7 * 3^2\n    Example 2:\n\n    Input: 1\n    Output: 1\n    Explanation: 1 = 2^0\n    Example 3:\n\n    Input: 2\n    Output: 1\n    Explanation: 2 = 2^1\n\n    Note:\n\n    2^n is a prime number if and only if n is a positive integer and n is less\n    than the square root of 2.\n\n    The input number is guaranteed to be an integer and less than 10^9.\n    \"\"\"\n    if num == 1:\n        return 1\n\n    if num == 2:\n        return 2\n\n    if num == 3:\n        return 3\n\n    i = 2\n    while i <= num / i:\n        if num % i == 0:\n            return i\n        i += 1\n\n    return num\n\nif __name__ == \"__main__\":\n    print(find_largest_prime_factor(14))\n    print(find_largest_prime_factor(1))\n    print(find_largest_prime_factor(2))",
      -0.8583984375
    ],
    [
      "def get_largest_prime_factor(num):\n    \"\"\"\n    Return the largest prime factor of num.\n    \"\"\"\n    factors = []\n    # Find the first prime factor of num\n    for i in range(2, num):\n        if num % i == 0:\n            factors.append(i)\n            num //= i\n        else:\n            break\n    # Find the next prime factor\n    for i in range(3, num, 2):\n        if num % i == 0:\n            factors.append(i)\n            num //= i\n        else:\n            break\n    # If there are no factors, return num\n    if len(factors) == 0:\n        return num\n    # Return the largest prime factor\n    return max(factors)\n\nif __name__ == \"__main__\":\n    print(get_largest_prime_factor(12))\n    print(get_largest_prime_factor(24))\n    print(get_largest_prime_factor(32))\n    print(get_largest_prime_factor(36))\n    print(get_largest_prime_factor(40))",
      -0.8583984375
    ],
    [
      "def isPrime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef getLargestPrimeFactor(n):\n    if n < 2:\n        return 1\n    largest = 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            largest = i\n    return largest\n\ndef main():\n    print(getLargestPrimeFactor(9999))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import math\nfrom math import ceil, sqrt\n\n\ndef largest_prime_factor(number):\n    \"\"\"\n    Write a function to find the largest prime factor of a given number.\n\n    Arguments:\n    number -- the number for which to find the largest prime factor.\n\n    Returns:\n    The largest prime factor of the number.\n    \"\"\"\n\n    # Find the largest prime factor\n    prime_factors = []\n    for i in range(2, int(ceil(math.sqrt(number))) + 1):\n        while number % i == 0:\n            prime_factors.append(i)\n            number /= i\n\n    if number > 1:\n        prime_factors.append(number)\n\n    return max(prime_factors)\n\n\nif __name__ == '__main__':\n    print(largest_prime_factor(13))\n    print(largest_prime_factor(5))\n    print(largest_prime_factor(24))\n    print(largest_prime_factor(1))",
      -0.8583984375
    ],
    [
      "import math\n\ndef get_largest_prime_factor(number):\n    largest_prime_factor = 1\n    for i in range(2, int(math.ceil(math.sqrt(number))) + 1):\n        if number % i == 0:\n            if i > largest_prime_factor:\n                largest_prime_factor = i\n    return largest_prime_factor\n\nif __name__ == '__main__':\n    print(get_largest_prime_factor(1000000))\n    print(get_largest_prime_factor(1000))\n    print(get_largest_prime_factor(10000))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(10))\n    print(get_largest_prime_factor(1))",
      -0.8583984375
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    For a given number, find the largest prime factor.\n\n    :param n: The number to find the largest prime factor of.\n    :return: The largest prime factor of the given number.\n    \"\"\"\n    largest = 0\n    for i in range(2, n):\n        if n % i == 0:\n            if i > largest:\n                largest = i\n    return largest\n\nif __name__ == '__main__':\n    print largest_prime_factor(100)\n    print largest_prime_factor(200)\n    print largest_prime_factor(500)\n    print largest_prime_factor(100000)",
      -0.8583984375
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    :param number: The number to be checked for its largest prime factor\n    :return: The largest prime factor of the given number\n    \"\"\"\n    i = 2\n    while i * i <= number:\n        if number % i == 0:\n            number /= i\n            i += 1\n        else:\n            return i\n    return i\n\nif __name__ == '__main__':\n    assert largest_prime_factor(25) == 5\n    assert largest_prime_factor(25) == 5\n    assert largest_prime_factor(100) == 10\n    assert largest_prime_factor(500) == 25\n    assert largest_prime_factor(40000) == 2\n    assert largest_prime_factor(20000) == 4\n    assert largest_prime_factor(120000) == 3\n    assert largest_prime_factor(120000) == 3\n    assert largest_prime_factor(2000000) == 2\n    assert largest_prime_factor(2000000) == 2",
      -0.8583984375
    ],
    [
      "def is_prime(num):\n    \"\"\"\n    Check if num is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef largest_prime(num):\n    \"\"\"\n    Find the largest prime factor of num.\n    \"\"\"\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num % 2 == 0:\n        return largest_prime(num / 2)\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return largest_prime(num / i)\n    return num",
      -0.8583984375
    ],
    [
      "def get_largest_prime_factor(number):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \"\"\"\n    if number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    elif number == 3:\n        return 3\n    elif number == 4:\n        return 4\n    elif number == 5:\n        return 5\n    elif number == 6:\n        return 6\n    elif number == 7:\n        return 7\n    elif number == 8:\n        return 8\n    elif number == 9:\n        return 9\n    elif number == 10:\n        return 10\n    else:\n        largest_prime_factor = 1\n        for i in range(2, number + 1):\n            if number % i == 0:\n                if i > largest_prime_factor:\n                    largest_prime_factor = i\n        return largest_prime_factor\n\ndef main():\n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n    print(get_largest_prime_factor(12))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    >>> largest_prime_factor(3)\n    >>> largest_prime_factor(17)\n    \"\"\"\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            while number % i == 0:\n                number /= i\n            factors.append(i)\n    return max(factors)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    >>> largest_prime_factor(4)\n    2\n    >>> largest_prime_factor(5)\n    5\n    >>> largest_prime_factor(6)\n    3\n    >>> largest_prime_factor(7)\n    7\n    >>> largest_prime_factor(13)\n    5\n    >>> largest_prime_factor(200)\n    101\n    >>> largest_prime_factor(20000)\n    101\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return i\n    return n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def get_largest_prime_factor(num):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    :param num: The number to be checked\n    :return: The largest prime factor of a given number.\n    \"\"\"\n    if num < 2:\n        return 1\n\n    for i in range(2, num):\n        if num % i == 0:\n            return i\n    return num\n\nif __name__ == \"__main__\":\n    print get_largest_prime_factor(24)",
      -0.8583984375
    ],
    [
      "def find_largest_prime_factor(num):\n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    num: an integer number.\n    returns: the largest prime factor of num.\n    \"\"\"\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return i\n    return num\n\nprint(find_largest_prime_factor(100))",
      -0.8583984375
    ],
    [
      "def find_largest_prime(number):\n    \"\"\"\n    Find the largest prime factor of the given number.\n    \"\"\"\n    for i in range(2, int(math.sqrt(number) + 1)):\n        if number % i == 0:\n            if i == number:\n                return i\n            else:\n                return find_largest_prime(number / i)\n    return number\n\nif __name__ == '__main__':\n    print(find_largest_prime(1000000))",
      -0.85888671875
    ],
    [
      "def get_largest_prime_factor(number):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    :param number: The number to find the largest prime factor of.\n    :return: The largest prime factor of the number.\n    \"\"\"\n\n    largest_prime_factor = 1\n\n    for i in range(2, number):\n        if number % i == 0:\n            largest_prime_factor = max(largest_prime_factor, i)\n            number /= i\n\n    return largest_prime_factor\n\nif __name__ == '__main__':\n\n    print get_largest_prime_factor(2)\n    print get_largest_prime_factor(3)\n    print get_largest_prime_factor(4)\n    print get_largest_prime_factor(7)\n    print get_largest_prime_factor(13)\n    print get_largest_prime_factor(16)",
      -0.85888671875
    ],
    [
      "import math\nfrom math import sqrt\n\ndef largest_prime_factor(num):\n    \"\"\"\n    Function to find the largest prime factor of a given number.\n\n    :param num: the number for which the largest prime factor is to be found\n    :return: the largest prime factor of num\n    \"\"\"\n\n    max_prime_factor = 1\n    max_prime_factor_num = 1\n\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            if i > max_prime_factor:\n                max_prime_factor = i\n                max_prime_factor_num = num / i\n\n    return max_prime_factor_num",
      -0.85888671875
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        if number % i == 0:\n            return i\n    return number",
      -0.85888671875
    ],
    [
      "def is_prime(n):\n    if n == 2:\n        return True\n    elif n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_largest_prime_factor(n):\n    if is_prime(n):\n        return n\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return get_largest_prime_factor(n / 2)\n    else:\n        return get_largest_prime_factor(n - 1)\n\ndef main():\n    for i in range(1, 100):\n        print(get_largest_prime_factor(i))\n\nif __name__ == \"__main__\":\n    main()",
      -0.87255859375
    ],
    [
      "def find_largest_prime_factor(number):\n    \"\"\"\n    >>> find_largest_prime_factor(12)\n    3\n    >>> find_largest_prime_factor(16)\n    5\n    >>> find_largest_prime_factor(25)\n    5\n    >>> find_largest_prime_factor(32)\n    7\n    >>> find_largest_prime_factor(2501)\n    17\n    >>> find_largest_prime_factor(20000)\n    17\n    \"\"\"\n    if number < 2:\n        return number\n    if number % 2 == 0:\n        return 2\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        if number % i == 0:\n            return i\n    return number\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.5439453125
    ],
    [
      "from math import sqrt, ceil\n\ndef is_prime(number):\n    \"\"\"\n    Check if number is a prime number.\n    \"\"\"\n    for i in range(2, int(ceil(sqrt(number))) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(number):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \"\"\"\n    if is_prime(number):\n        return number\n    if number == 1:\n        return number\n    number_list = [number]\n    while number % 2 == 0:\n        number = number / 2\n        number_list.append(number)\n    while number % 3 == 0:\n        number = number / 3\n        number_list.append(number)\n    while number % 5 == 0:\n        number = number / 5\n        number_list.append(number)\n    while number % 7 == 0:\n        number = number / 7\n        number_list.append(number)\n    while number % 11 == 0:\n        number = number / 11\n        number_list.append(number)\n    while number % 13 == 0:\n        number = number / 13\n        number_list.append(number)\n    while number % 17 == 0:\n        number = number / 17\n        number_list.append(number)\n    while number % 19 == 0:\n        number = number / 19\n        number_list.append(number)\n    while number % 23 == 0:\n        number = number / 23\n        number_list.append(number)\n    while number % 29 == 0:\n        number = number / 29\n        number_list.append(number)\n    while number % 31 == 0:\n        number = number / 31\n        number_list.append(number)\n    while number % 37 == 0:\n        number = number / 37\n        number_list.append(number)\n    while number % 41 == 0:\n        number = number / 41\n        number_list.append(number)\n    while number % 43 == 0:\n        number = number / 43\n        number_list.append(number)\n    while number % 47 == 0:\n        number =",
      -1.5615234375
    ],
    [
      "# The largest prime factor of a number n is the largest prime factor of n/2,\n# and so on.\n\ndef find_largest_prime_factor(n):\n    if n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return find_largest_prime_factor(n/2)\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return i\n        return n\n\n#Test Cases\nprint find_largest_prime_factor(12)\nprint find_largest_prime_factor(1234)",
      -1.5869140625
    ],
    [
      "def find_largest_prime_factor(number):\n    \"\"\"\n    Find the largest prime factor of the given number.\n    \"\"\"\n    # This is a brute force approach.\n    # If the number is prime, then we know it is the largest prime factor\n    # If the number is not prime, then we have to check if it is a divisor of any prime\n    # If it is a divisor of any prime, then we know the number is prime\n    # Otherwise, we know that the number is not prime\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number % 2 == 0:\n        return number / 2\n    if number % 3 == 0:\n        return number / 3\n    if number % 5 == 0:\n        return number / 5\n    if number % 7 == 0:\n        return number / 7\n    if number % 11 == 0:\n        return number / 11\n    if number % 13 == 0:\n        return number / 13\n    if number % 17 == 0:\n        return number / 17\n    if number % 19 == 0:\n        return number / 19\n    if number % 23 == 0:\n        return number / 23\n    if number % 29 == 0:\n        return number / 29\n    if number % 31 == 0:\n        return number / 31\n    if number % 37 == 0:\n        return number / 37\n    if number % 41 == 0:\n        return number / 41\n    if number % 43 == 0:\n        return number / 43\n    if number % 47 == 0:\n        return number / 47\n    if number % 49 == 0:\n        return number / 49\n    if number % 53 == 0:\n        return number / 53\n    if number % 59 == 0:\n        return number / 59\n    if number % 61 == 0:\n        return number / 61\n    if number % 67 == 0:\n        return number / 67\n    if number % 71 == 0:\n        return number / 71\n    if number % 73 == 0:\n        return number / 73\n    if number % 79 == 0:\n        return number / 79\n    if number % 83 == 0:\n        return number / 83\n    if number % 89 == 0:\n        return number",
      -1.650390625
    ],
    [
      "from math import sqrt\n\n\ndef prime_factorization(num):\n    \"\"\"\n    Find the largest prime factor of num.\n    :param num: an integer\n    :return: a tuple of the form (prime, factors) where prime is the largest prime factor of num and factors is a list of all the other factors.\n    \"\"\"\n    if num == 1:\n        return (1, [1])\n    factors = []\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num / i)\n    if len(factors) == 1:\n        return (factors[0], [1])\n    else:\n        return (max(factors), factors)\n\n\nif __name__ == '__main__':\n    print(prime_factorization(5))\n    print(prime_factorization(6))\n    print(prime_factorization(10))\n    print(prime_factorization(12))\n    print(prime_factorization(20))\n    print(prime_factorization(28))\n    print(prime_factorization(30))\n    print(prime_factorization(48))\n    print(prime_factorization(60))\n    print(prime_factorization(78))\n    print(prime_factorization(144))",
      -1.6640625
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    n is a positive integer.\n    Return the largest prime factor of n.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\nif __name__ == '__main__':\n    print(largest_prime_factor(500))",
      -1.703125
    ],
    [
      "def find_largest_prime_factor(number):\n    '''\n    Finds the largest prime factor of a given number.\n    '''\n\n    if number == 1:\n        return 1\n\n    if number == 2:\n        return 2\n\n    if number % 2 == 0:\n        return number / 2\n\n    while number % 3 == 0:\n        number /= 3\n\n    while number % 5 == 0:\n        number /= 5\n\n    largest_prime_factor = number\n    while number % 7 == 0:\n        number /= 7\n\n    while number % 11 == 0:\n        number /= 11\n\n    while number % 13 == 0:\n        number /= 13\n\n    while number % 17 == 0:\n        number /= 17\n\n    while number % 19 == 0:\n        number /= 19\n\n    while number % 23 == 0:\n        number /= 23\n\n    while number % 29 == 0:\n        number /= 29\n\n    while number % 31 == 0:\n        number /= 31\n\n    while number % 37 == 0:\n        number /= 37\n\n    while number % 41 == 0:\n        number /= 41\n\n    while number % 43 == 0:\n        number /= 43\n\n    while number % 47 == 0:\n        number /= 47\n\n    while number % 49 == 0:\n        number /= 49\n\n    while number % 53 == 0:\n        number /= 53\n\n    while number % 59 == 0:\n        number /= 59\n\n    while number % 61 == 0:\n        number /= 61\n\n    while number % 67 == 0:\n        number /= 67\n\n    while number % 71 == 0:\n        number /= 71\n\n    while number % 73 == 0:\n        number /= 73\n\n    while number % 79 == 0:\n        number /= 79\n\n    while number % 83 == 0:\n        number /= 83\n\n    while number % 89 == 0:\n        number /= 89\n\n    while number % 97 == 0:\n        number /= 97\n\n    while number % 101 == 0:\n        number /= 101\n\n    while number % 103 == 0:\n        number /= 103\n\n    while number % 107 == 0:\n        number /= 107\n\n    while number % 109 == 0:\n        number /",
      -1.75390625
    ],
    [
      "def find_largest_prime_factor(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    max_factor = 2\n    while n % max_factor == 0:\n        max_factor = max_factor * 3\n    return max_factor\n\n# Test Cases\n\nprint(find_largest_prime_factor(7))\nprint(find_largest_prime_factor(23))\nprint(find_largest_prime_factor(36))\nprint(find_largest_prime_factor(9))\nprint(find_largest_prime_factor(25))\nprint(find_largest_prime_factor(79))\nprint(find_largest_prime_factor(101))\nprint(find_largest_prime_factor(14))",
      -1.818359375
    ],
    [
      "# The function is written in a manner that is similar to the\n# function written in the book \"Algorithms\" by Cormen, et al.\n\ndef find_largest_prime_factor(n):\n  if n == 1: return 1\n  if n == 2: return 2\n  i = 2\n  while i < n:\n    while n % i == 0:\n      n /= i\n      if n == 1: return i\n      i += 1\n  return i\n\ndef main():\n  print find_largest_prime_factor(5)\n  print find_largest_prime_factor(9)\n  print find_largest_prime_factor(26)\n  print find_largest_prime_factor(1234)\n  print find_largest_prime_factor(12345)\n  print find_largest_prime_factor(123456)\n  print find_largest_prime_factor(1234567)\n  print find_largest_prime_factor(12345678)\n  print find_largest_prime_factor(123456789)\n\nif __name__ == \"__main__\":\n  main()",
      -1.857421875
    ],
    [
      "def is_prime(n):\n    \"\"\"\n    Check whether n is a prime number.\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef get_largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n    i = 2\n    while i < n:\n        while n % i == 0:\n            n /= i\n        i += 1\n    return i\n\n\ndef main():\n    \"\"\"\n    Write a function that takes an integer n as input and returns the largest prime factor of n.\n    \"\"\"\n    print(get_largest_prime_factor(1000))\n\n\nif __name__ == '__main__':\n    main()",
      -2.015625
    ],
    [
      "import math\n\ndef get_prime(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n = n / i\n            while n % i == 0:\n                n = n / i\n        i += 1\n    return i\n\ndef get_prime_factors(n):\n    \"\"\"\n    Find the prime factors of a given number.\n    \n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.extend(get_prime_factors(n / i))\n    return factors\n\ndef get_largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \n    :type n: int\n    :rtype: int\n    \"\"\"\n    factors = get_prime_factors(n)\n    for f in factors:\n        if f > n:\n            return f\n    return n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(get_largest_prime_factor(30))\n\nif __name__ == '__main__':\n    main()",
      -2.546875
    ],
    [
      "import math\n\ndef get_largest_prime_factor(n):\n    \"\"\"\n    n: an integer\n    return: the largest prime factor of n\n    \"\"\"\n    if n == 1:\n        return n\n    if n < 2:\n        return n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n            while n % i == 0:\n                n /= i\n            return i\n        i += 1\n    return n\n\nif __name__ == '__main__':\n    print get_largest_prime_factor(100)",
      -2.671875
    ],
    [
      "def largest_prime_factor(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 1:\n        return 1\n    \n    if num == 2:\n        return 2\n    \n    if num == 3:\n        return 3\n    \n    if num % 2 == 0:\n        return 2\n    \n    if num % 3 == 0:\n        return 3\n    \n    if num % 5 == 0:\n        return 5\n    \n    if num % 7 == 0:\n        return 7\n    \n    if num % 11 == 0:\n        return 11\n    \n    if num % 13 == 0:\n        return 13\n    \n    if num % 17 == 0:\n        return 17\n    \n    if num % 19 == 0:\n        return 19\n    \n    if num % 23 == 0:\n        return 23\n    \n    if num % 29 == 0:\n        return 29\n    \n    if num % 31 == 0:\n        return 31\n    \n    if num % 37 == 0:\n        return 37\n    \n    if num % 41 == 0:\n        return 41\n    \n    if num % 43 == 0:\n        return 43\n    \n    if num % 47 == 0:\n        return 47\n    \n    if num % 53 == 0:\n        return 53\n    \n    if num % 59 == 0:\n        return 59\n    \n    if num % 61 == 0:\n        return 61\n    \n    if num % 67 == 0:\n        return 67\n    \n    if num % 71 == 0:\n        return 71\n    \n    if num % 73 == 0:\n        return 73\n    \n    if num % 79 == 0:\n        return 79\n    \n    if num % 83 == 0:\n        return 83\n    \n    if num % 89 == 0:\n        return 89\n    \n    if num % 97 == 0:\n        return 97\n    \n    if num % 101 == 0:\n        return 101\n    \n    if num % 103 == 0:\n        return 103\n    \n    if num % 107 == 0:\n        return 107\n    \n    if num % 109 == 0:\n        return 109\n    \n    if num % 113 == 0",
      -2.720703125
    ],
    [
      "def largestPrimeFactor(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 2:\n        return n\n\n    for i in range(2, n):\n        if n % i == 0:\n            if i > n / i:\n                return i\n            else:\n                return largestPrimeFactor(n / i)\n\n    return n\n\nif __name__ == \"__main__\":\n    print largestPrimeFactor(12)\n    print largestPrimeFactor(13)\n    print largestPrimeFactor(14)\n    print largestPrimeFactor(15)\n    print largestPrimeFactor(16)\n    print largestPrimeFactor(17)\n    print largestPrimeFactor(18)\n    print largestPrimeFactor(19)\n    print largestPrimeFactor(20)\n    print largestPrimeFactor(21)\n    print largestPrimeFactor(22)\n    print largestPrimeFactor(23)\n    print largestPrimeFactor(24)\n    print largestPrimeFactor(25)\n    print largestPrimeFactor(26)\n    print largestPrimeFactor(27)\n    print largestPrimeFactor(28)\n    print largestPrimeFactor(29)\n    print largestPrimeFactor(30)\n    print largestPrimeFactor(31)\n    print largestPrimeFactor(32)\n    print largestPrimeFactor(33)\n    print largestPrimeFactor(34)\n    print largestPrimeFactor(35)\n    print largestPrimeFactor(36)\n    print largestPrimeFactor(37)\n    print largestPrimeFactor(38)\n    print largestPrimeFactor(39)\n    print largestPrimeFactor(40)\n    print largestPrimeFactor(41)\n    print largestPrimeFactor(42)\n    print largestPrimeFactor(43)\n    print largestPrimeFactor(44)\n    print largestPrimeFactor(45)\n    print largestPrimeFactor(46)\n    print largestPrimeFactor(47)\n    print largestPrimeFactor(48)\n    print largestPrimeFactor(49)\n    print largestPrimeFactor(50)\n    print largestPrimeFactor(51)\n    print largestPrimeFactor(52)\n    print largestPrimeFactor(53)\n    print largestPrimeFactor(54)\n    print largestPrimeFactor(55)\n    print largestPrimeFactor(56)\n    print largest",
      -2.755859375
    ],
    [
      "def get_largest_prime_factor(num):\n    \"\"\"\n    :param num: The number to be checked\n    :return: Returns the largest prime factor of the given number.\n    \"\"\"\n    largest_prime_factor = 1\n    largest_prime_factor_num = 0\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            if i == num / i:\n                largest_prime_factor_num = i\n            else:\n                largest_prime_factor = i\n                largest_prime_factor_num = largest_prime_factor\n            break\n    if largest_prime_factor_num!= 0:\n        return largest_prime_factor_num\n    else:\n        return num\n\ndef main():\n    \"\"\"\n    :return: Returns the largest prime factor of a given number.\n    \"\"\"\n    print(get_largest_prime_factor(2))\n    print(get_largest_prime_factor(3))\n    print(get_largest_prime_factor(5))\n    print(get_largest_prime_factor(7))\n    print(get_largest_prime_factor(12))\n    print(get_largest_prime_factor(15))\n    print(get_largest_prime_factor(24))\n    print(get_largest_prime_factor(26))\n    print(get_largest_prime_factor(27))\n    print(get_largest_prime_factor(28))\n\nif __name__ == \"__main__\":\n    main()",
      -2.990234375
    ],
    [
      "from math import ceil, sqrt\nfrom itertools import groupby\n\n\ndef find_largest_prime_factor(number):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    :param number: The number for which we want to find the largest prime factor.\n    :return: The largest prime factor of the given number.\n    \"\"\"\n    largest_prime_factor = 1\n    largest_prime_factor_number = 0\n    for factor in prime_factors(number):\n        if factor > largest_prime_factor:\n            largest_prime_factor = factor\n        if factor * factor > largest_prime_factor:\n            largest_prime_factor = factor * factor\n        if factor * factor > largest_prime_factor:\n            largest_prime_factor = factor * factor\n        if factor * factor > largest_prime_factor:\n            largest_prime_factor = factor * factor\n        if factor * factor > largest_prime_factor:\n            largest_prime_factor = factor * factor\n\n        if factor * factor > largest_prime_factor:\n            largest_prime_factor = factor * factor\n\n    return largest_prime_factor\n\n\ndef prime_factors(number):\n    \"\"\"\n    Return the prime factors of a given number.\n\n    :param number: The number for which we want to find the prime factors.\n    :return: The prime factors of the given number.\n    \"\"\"\n    factors = []\n    for i in range(2, int(ceil(sqrt(number))) + 1):\n        if number % i == 0:\n            factors.append(i)\n            while number % i == 0:\n                number /= i\n            if number == 1:\n                return factors\n            factors.extend(prime_factors(number))\n    if number > 1:\n        factors.append(number)\n    return factors\n\n\nif __name__ == '__main__':\n    print(find_largest_prime_factor(2))\n    print(find_largest_prime_factor(3))\n    print(find_largest_prime_factor(4))\n    print(find_largest_prime_factor(5))\n    print(find_largest_prime_factor(7))\n    print(",
      -3.076171875
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \"\"\"\n    return factorize(number, 2)\n\ndef factorize(number, limit=2):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \"\"\"\n    if number <= 1:\n        return 1\n    elif number == 2:\n        return 2\n    elif number % 2 == 0:\n        return 2\n    elif number % 3 == 0:\n        return 3\n    elif number % 5 == 0:\n        return 5\n    elif number % 7 == 0:\n        return 7\n    else:\n        limit = limit\n        while number % limit == 0:\n            number = number / limit\n            limit += 2\n        return limit\n\nif __name__ == \"__main__\":\n    print largest_prime_factor(2)\n    print largest_prime_factor(3)\n    print largest_prime_factor(4)\n    print largest_prime_factor(5)\n    print largest_prime_factor(6)\n    print largest_prime_factor(7)\n    print largest_prime_factor(8)\n    print largest_prime_factor(9)\n    print largest_prime_factor(10)\n    print largest_prime_factor(11)\n    print largest_prime_factor(12)\n    print largest_prime_factor(13)\n    print largest_prime_factor(14)\n    print largest_prime_factor(15)\n    print largest_prime_factor(16)\n    print largest_prime_factor(17)\n    print largest_prime_factor(18)\n    print largest_prime_factor(19)\n    print largest_prime_factor(20)\n    print largest_prime_factor(21)\n    print largest_prime_factor(22)\n    print largest_prime_factor(23)\n    print largest_prime_factor(24)\n    print largest_prime_factor(25)\n    print largest_prime_factor(26)\n    print largest_prime_factor(27)\n    print largest_prime_factor(28)\n    print largest_prime_factor(29)\n    print largest_prime_factor(30)",
      -3.443359375
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    >>> largest_prime_factor(5)\n    2\n    >>> largest_prime_factor(13)\n    5\n    >>> largest_prime_factor(13*13)\n    13\n    >>> largest_prime_factor(123)\n    23\n    >>> largest_prime_factor(123*123)\n    123\n    >>> largest_prime_factor(123456789)\n    123456789\n    \"\"\"\n    n = number\n    p = 2\n    while n > 1:\n        while n % p == 0:\n            n = n / p\n        p = p + 1\n    return p\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.525390625
    ],
    [
      "from __future__ import print_function\n\nimport math\n\ndef largest_prime_factor(num):\n    \"\"\"\n    Write a function to find the largest prime factor of a given number.\n\n    Example:\n    >>> largest_prime_factor(16)\n    2\n    >>> largest_prime_factor(24)\n    3\n    >>> largest_prime_factor(100)\n    25\n    >>> largest_prime_factor(1)\n    1\n    >>> largest_prime_factor(0)\n    1\n    >>> largest_prime_factor(21)\n    3\n    >>> largest_prime_factor(32)\n    5\n    >>> largest_prime_factor(1000)\n    29\n    \"\"\"\n    if num == 0:\n        return 1\n    if num < 2:\n        return 1\n    if num == 2:\n        return 2\n    if num < 4:\n        return num\n    if num % 2 == 0:\n        return 2\n    if num % 3 == 0:\n        return 3\n    if num % 5 == 0:\n        return 5\n    if num % 7 == 0:\n        return 7\n    if num % 11 == 0:\n        return 11\n    if num % 13 == 0:\n        return 13\n    if num % 17 == 0:\n        return 17\n    if num % 19 == 0:\n        return 19\n    if num % 23 == 0:\n        return 23\n    if num % 29 == 0:\n        return 29\n    if num % 31 == 0:\n        return 31\n    if num % 37 == 0:\n        return 37\n    if num % 41 == 0:\n        return 41\n    if num % 43 == 0:\n        return 43\n    if num % 47 == 0:\n        return 47\n    if num % 53 == 0:\n        return 53\n    if num % 59 == 0:\n        return 59\n    if num % 61 == 0:\n        return 61\n    if num % 67 == 0:\n        return 67\n    if num % 71 == 0:\n        return 71\n    if num % 73 == 0:\n        return 73\n    if num % 79 == 0:\n        return 79\n    if num % 83 == 0:\n        return 83\n    if num % 89 ==",
      -3.75390625
    ],
    [
      "def largestPrimeFactor(num):\n    \"\"\"\n    num: The number to find the largest prime factor of.\n    Return the largest prime factor of num.\n    \"\"\"\n    if num < 2:\n        return 1\n\n    for i in range(2, num):\n        while num % i == 0:\n            num = num / i\n            if i == num:\n                return i\n    return num\n\nif __name__ == \"__main__\":\n    print largestPrimeFactor(123)\n    print largestPrimeFactor(12)\n    print largestPrimeFactor(1234)\n    print largestPrimeFactor(12345)\n    print largestPrimeFactor(1234567)\n    print largestPrimeFactor(123456789)\n    print largestPrimeFactor(1234567891)\n    print largestPrimeFactor(12345678912)\n    print largestPrimeFactor(123456789123)\n    print largestPrimeFactor(12345678912345)\n    print largestPrimeFactor(123456789123456)\n    print largestPrimeFactor(1234567891234567)\n    print largestPrimeFactor(12345678912345678)\n    print largestPrimeFactor(123456789123456789)\n    print largestPrimeFactor(1234567891234567891)\n    print largestPrimeFactor(12345678912345678912)\n    print largestPrimeFactor(123456789123456789123)\n    print largestPrimeFactor(12345678912345678912345)",
      -3.794921875
    ],
    [
      "def largest_prime_factor(num):\n    \"\"\"\n    Write a function to find the largest prime factor of a given number.\n\n    Input:\n    num - the number to find the largest prime factor of\n    Output:\n    the largest prime factor of num\n    \"\"\"\n\n    # check if num is a prime\n    if num < 2:\n        return num\n    # if num is even, then the largest prime factor is 2\n    elif num % 2 == 0:\n        return 2\n    # if num is odd, then the largest prime factor is 3\n    elif num % 3 == 0:\n        return 3\n    # check if num is divisible by 2 or 3\n    elif num % 2 == 0 or num % 3 == 0:\n        return largest_prime_factor(num // 2)\n    # otherwise, the largest prime factor is the largest prime factor of num\n    # minus 2 or 3\n    else:\n        return largest_prime_factor(num - 2) - 2\n\n\n# Test Cases\nprint(largest_prime_factor(3))\nprint(largest_prime_factor(4))\nprint(largest_prime_factor(6))\nprint(largest_prime_factor(27))\nprint(largest_prime_factor(100))\nprint(largest_prime_factor(1000))\nprint(largest_prime_factor(10000))\nprint(largest_prime_factor(2000000))",
      -3.91015625
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    max_factor = 1\n    for i in range(2, number/2):\n        while number % i == 0:\n            number = number / i\n            max_factor = max(max_factor, i)\n    return max_factor\n\n\nif __name__ == '__main__':\n    assert largest_prime_factor(17) == 2\n    assert largest_prime_factor(2) == 2\n    assert largest_prime_factor(6) == 2\n    assert largest_prime_factor(9) == 3\n    assert largest_prime_factor(13) == 3\n    assert largest_prime_factor(28) == 7\n    assert largest_prime_factor(123) == 7\n    assert largest_prime_factor(15) == 5\n    assert largest_prime_factor(99) == 3\n    assert largest_prime_factor(12345) == 5\n    assert largest_prime_factor(12) == 2\n    assert largest_prime_factor(0) == 1\n    assert largest_prime_factor(1) == 1\n    assert largest_prime_factor(2) == 2\n    assert largest_prime_factor(3) == 3\n    assert largest_prime_factor(4) == 2\n    assert largest_prime_factor(5) == 5\n    assert largest_prime_factor(6) == 2\n    assert largest_prime_factor(7) == 7\n    assert largest_prime_factor(8) == 2\n    assert largest_prime_factor(9) == 3\n    assert largest_prime_factor(10) == 10\n    assert largest_prime_factor(11) == 11\n    assert largest_prime_factor(12) == 2\n    assert largest_prime_factor(13) == 13\n    assert largest_prime_factor(14) == 14\n    assert largest_prime_factor(15) == 15\n    assert largest_prime_factor(16) == 16\n    assert largest_prime_factor(17) == 17\n    assert largest_prime_factor(18) == 18\n    assert largest_prime_factor(19) == 19\n    assert largest_prime_factor(20",
      -3.9296875
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    Returns the largest prime factor of a given number.\n\n    >>> largest_prime_factor(12)\n    3\n    >>> largest_prime_factor(2)\n    2\n    >>> largest_prime_factor(4)\n    2\n    >>> largest_prime_factor(9)\n    3\n    >>> largest_prime_factor(0)\n    0\n    \"\"\"\n    \n    if number == 0:\n        return 0\n\n    if number == 1:\n        return 1\n\n    if number % 2 == 0:\n        return 2\n\n    if number % 3 == 0:\n        return 3\n\n    if number % 5 == 0:\n        return 5\n\n    if number % 7 == 0:\n        return 7\n\n    if number % 11 == 0:\n        return 11\n\n    if number % 13 == 0:\n        return 13\n\n    if number % 17 == 0:\n        return 17\n\n    if number % 19 == 0:\n        return 19\n\n    if number % 23 == 0:\n        return 23\n\n    if number % 29 == 0:\n        return 29\n\n    if number % 31 == 0:\n        return 31\n\n    if number % 37 == 0:\n        return 37\n\n    if number % 41 == 0:\n        return 41\n\n    if number % 43 == 0:\n        return 43\n\n    if number % 47 == 0:\n        return 47\n\n    if number % 53 == 0:\n        return 53\n\n    if number % 59 == 0:\n        return 59\n\n    if number % 61 == 0:\n        return 61\n\n    if number % 67 == 0:\n        return 67\n\n    if number % 71 == 0:\n        return 71\n\n    if number % 73 == 0:\n        return 73\n\n    if number % 79 == 0:\n        return 79\n\n    if number % 83 == 0:\n        return 83\n\n    if number % 89 == 0:\n        return 89\n\n    if number % 97 == 0:\n        return 97\n\n    if number % 101 == 0:\n        return 101\n\n    if number % 103 == 0:\n        return 103\n\n    if number % 107 == 0:\n        return 107\n\n    if number % 109 == 0:\n        return 109\n\n    if number % 113 == 0:\n        return 113",
      -4.08203125
    ],
    [
      "def largest_prime_factor(num):\n    \"\"\"\n    >>> largest_prime_factor(5)\n    5\n    >>> largest_prime_factor(6)\n    5\n    >>> largest_prime_factor(9)\n    3\n    >>> largest_prime_factor(10)\n    10\n    >>> largest_prime_factor(11)\n    11\n    \"\"\"\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num % 2 == 0:\n        return 2\n    if num % 3 == 0:\n        return 3\n    if num % 5 == 0:\n        return 5\n    if num % 7 == 0:\n        return 7\n    if num % 11 == 0:\n        return 11\n    if num % 13 == 0:\n        return 13\n    if num % 17 == 0:\n        return 17\n    if num % 19 == 0:\n        return 19\n    if num % 23 == 0:\n        return 23\n    if num % 29 == 0:\n        return 29\n    if num % 31 == 0:\n        return 31\n    if num % 37 == 0:\n        return 37\n    if num % 41 == 0:\n        return 41\n    if num % 43 == 0:\n        return 43\n    if num % 47 == 0:\n        return 47\n    if num % 53 == 0:\n        return 53\n    if num % 59 == 0:\n        return 59\n    if num % 61 == 0:\n        return 61\n    if num % 67 == 0:\n        return 67\n    if num % 71 == 0:\n        return 71\n    if num % 73 == 0:\n        return 73\n    if num % 79 == 0:\n        return 79\n    if num % 83 == 0:\n        return 83\n    if num % 89 == 0:\n        return 89\n    if num % 97 == 0:\n        return 97\n    if num % 101 == 0:\n        return 101\n    if num % 103 == 0:\n        return 103\n    if num % 107 == 0:\n        return 107\n    if num % 109 == 0:\n        return 109\n    if num % 113 == 0:\n        return 113\n    if",
      -4.13671875
    ],
    [
      "import math\n\ndef find_largest_prime_factor(number):\n    if number == 1:\n        return number\n    for i in range(2, int(math.sqrt(number))+1):\n        if number % i == 0:\n            return i\n    return number\n\ndef main():\n    #Test 1\n    print find_largest_prime_factor(13)\n    print find_largest_prime_factor(4)\n    print find_largest_prime_factor(6)\n    print find_largest_prime_factor(7)\n    print find_largest_prime_factor(13)\n    print find_largest_prime_factor(9)\n    print find_largest_prime_factor(17)\n    print find_largest_prime_factor(37)\n    print find_largest_prime_factor(99)\n    print find_largest_prime_factor(1000)\n\n    #Test 2\n    print find_largest_prime_factor(3)\n    print find_largest_prime_factor(4)\n    print find_largest_prime_factor(5)\n    print find_largest_prime_factor(6)\n    print find_largest_prime_factor(7)\n    print find_largest_prime_factor(8)\n    print find_largest_prime_factor(9)\n    print find_largest_prime_factor(10)\n    print find_largest_prime_factor(11)\n    print find_largest_prime_factor(12)\n    print find_largest_prime_factor(13)\n    print find_largest_prime_factor(14)\n    print find_largest_prime_factor(15)\n    print find_largest_prime_factor(16)\n    print find_largest_prime_factor(17)\n    print find_largest_prime_factor(18)\n    print find_largest_prime_factor(19)\n    print find_largest_prime_factor(20)\n    print find_largest_prime_factor(21)\n    print find_largest_prime_factor(22)\n    print find_largest_prime_factor(23)\n    print find_largest_prime_factor(24)\n    print find_largest_prime_factor(25)\n    print",
      -4.66796875
    ],
    [
      "def largestPrimeFactor(num):\n    \"\"\"\n    >>> largestPrimeFactor(12)\n    4\n    >>> largestPrimeFactor(13)\n    5\n    >>> largestPrimeFactor(23)\n    11\n    >>> largestPrimeFactor(24)\n    23\n    >>> largestPrimeFactor(25)\n    25\n    >>> largestPrimeFactor(26)\n    25\n    >>> largestPrimeFactor(27)\n    27\n    >>> largestPrimeFactor(28)\n    29\n    \"\"\"\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num < 2:\n        return 1\n    if num % 2 == 0:\n        return 2\n    if num % 3 == 0:\n        return 3\n    if num % 5 == 0:\n        return 5\n    if num % 7 == 0:\n        return 7\n    if num % 11 == 0:\n        return 11\n    if num % 13 == 0:\n        return 13\n    if num % 17 == 0:\n        return 17\n    if num % 19 == 0:\n        return 19\n    if num % 23 == 0:\n        return 23\n    if num % 29 == 0:\n        return 29\n    if num % 31 == 0:\n        return 31\n    if num % 37 == 0:\n        return 37\n    if num % 41 == 0:\n        return 41\n    if num % 43 == 0:\n        return 43\n    if num % 47 == 0:\n        return 47\n    if num % 53 == 0:\n        return 53\n    if num % 59 == 0:\n        return 59\n    if num % 61 == 0:\n        return 61\n    if num % 67 == 0:\n        return 67\n    if num % 71 == 0:\n        return 71\n    if num % 73 == 0:\n        return 73\n    if num % 79 == 0:\n        return 79\n    if num % 83 == 0:\n        return 83\n    if num % 89 == 0:\n        return 89\n    if num % 97 == 0:\n        return 97\n    if num % 101 == 0:\n        return 101\n    if num % 103 == 0:\n        return 103\n    if num % 107 ==",
      -4.68359375
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    >>> largest_prime_factor(10)\n    5\n    >>> largest_prime_factor(100)\n    25\n    >>> largest_prime_factor(1)\n    1\n    >>> largest_prime_factor(0)\n    0\n    >>> largest_prime_factor(1)\n    1\n    >>> largest_prime_factor(4)\n    2\n    \"\"\"\n    n = int(n)\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    i = 5\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.6875
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    :param number: The number to find the largest prime factor of.\n    :return: The largest prime factor of the number.\n    \"\"\"\n    # If number is not an integer, return -1\n    if not isinstance(number, int):\n        return -1\n\n    # If number is not an even number, return -1\n    if number % 2!= 0:\n        return -1\n\n    # If number is not a positive integer, return -1\n    if number < 0:\n        return -1\n\n    # If number is not an odd integer, return -1\n    if number % 2 == 0:\n        return -1\n\n    # Get the factors of number and store them in a list\n    factors = []\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            factors.append(i)\n\n    # Return the largest factor\n    return max(factors)\n\nif __name__ == \"__main__\":\n    assert largest_prime_factor(1) == -1\n    assert largest_prime_factor(2) == 2\n    assert largest_prime_factor(3) == 3\n    assert largest_prime_factor(4) == 2\n    assert largest_prime_factor(5) == 5\n    assert largest_prime_factor(6) == 2\n    assert largest_prime_factor(7) == 7\n    assert largest_prime_factor(8) == 2\n    assert largest_prime_factor(9) == 3\n    assert largest_prime_factor(10) == 2\n    assert largest_prime_factor(11) == 11\n    assert largest_prime_factor(12) == 2\n    assert largest_prime_factor(13) == 13\n    assert largest_prime_factor(14) == 2\n    assert largest_prime_factor(15) == 3\n    assert largest_prime_factor(16) == 2\n    assert largest_prime_factor(17) == 17\n    assert largest_prime_factor(18) == 2\n    assert largest_prime_factor(19) == 19\n    assert largest_prime_factor(20",
      -4.7734375
    ],
    [
      "def get_largest_prime_factor(number):\n    \"\"\"\n    Write a function get_largest_prime_factor() to find the largest prime factor of a given number.\n    \"\"\"\n    # Assume number is a positive integer.\n    # If number is a prime number, return it.\n    # If number is not prime, return the largest prime factor.\n    # If number is not a prime or a prime number, return the largest prime factor.\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    # If number is not a prime number, return the largest prime factor.\n    for i in range(5, int(number ** 0.5) + 1, 2):\n        if number % i == 0:\n            return i\n    return number",
      -4.96484375
    ],
    [
      "def is_prime(n):\n    \"\"\"\n    Check if the given number is prime.\n    \"\"\"\n    if n == 1:\n        return False\n    if n < 2:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_slow(n):\n    \"\"\"\n    Check if the given number is prime.\n    \"\"\"\n    if n == 1:\n        return False\n    if n < 2:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_fast(n):\n    \"\"\"\n    Check if the given number is prime.\n    \"\"\"\n    if n == 1:\n        return False\n    if n < 2:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef is_prime_fast_rec(n):\n    \"\"\"\n    Check if the given number is prime.\n    \"\"\"\n    if n == 1:\n        return False\n    if n < 2:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\nif __name__ == \"__main__\":\n    n = 1000000\n    print(is_prime(n))\n    print(is_prime_fast(n))\n    print(is_prime_fast_rec(n))",
      -5.0
    ],
    [
      "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return n/2\n    elif n % 3 == 0:\n        return n/3\n    elif n % 5 == 0:\n        return n/5\n    elif n % 7 == 0:\n        return n/7\n    elif n % 11 == 0:\n        return n/11\n    elif n % 13 == 0:\n        return n/13\n    elif n % 17 == 0:\n        return n/17\n    elif n % 19 == 0:\n        return n/19\n    else:\n        return n\n\n# Test Cases\nprint(largest_prime_factor(1))\nprint(largest_prime_factor(2))\nprint(largest_prime_factor(3))\nprint(largest_prime_factor(4))\nprint(largest_prime_factor(5))\nprint(largest_prime_factor(6))\nprint(largest_prime_factor(7))\nprint(largest_prime_factor(8))\nprint(largest_prime_factor(9))\nprint(largest_prime_factor(10))\nprint(largest_prime_factor(11))\nprint(largest_prime_factor(12))\nprint(largest_prime_factor(13))\nprint(largest_prime_factor(14))\nprint(largest_prime_factor(15))\nprint(largest_prime_factor(16))\nprint(largest_prime_factor(17))\nprint(largest_prime_factor(18))\nprint(largest_prime_factor(19))\nprint(largest_prime_factor(20))",
      -5.03125
    ],
    [
      "# https://www.hackerrank.com/challenges/largest-prime-factor/problem\n\nimport math\n\ndef largest_prime_factor(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137",
      -5.0390625
    ],
    [
      "import math\nimport timeit\n\ndef find_largest_prime_factor(number):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \"\"\"\n    if number == 1:\n        return 1\n\n    largest_prime_factor = 2\n    largest_prime_factor_number = 2\n    for prime_factor in range(3, int(math.sqrt(number)) + 1, 2):\n        if number % prime_factor == 0:\n            if prime_factor > largest_prime_factor:\n                largest_prime_factor = prime_factor\n                largest_prime_factor_number = prime_factor\n\n    if largest_prime_factor_number!= number:\n        return largest_prime_factor_number\n\n    return largest_prime_factor\n\nif __name__ == '__main__':\n    start = timeit.default_timer()\n    print(find_largest_prime_factor(13))\n    print(timeit.default_timer() - start)",
      -5.1953125
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    Write a function that takes a number and returns the largest prime factor.\n\n    >>> largest_prime_factor(42)\n    7\n    >>> largest_prime_factor(12)\n    2\n    >>> largest_prime_factor(1)\n    Traceback (most recent call last):\n     ...\n    ValueError: number must be a positive integer\n    >>> largest_prime_factor(-42)\n    Traceback (most recent call last):\n     ...\n    ValueError: number must be a positive integer\n    >>> largest_prime_factor(0)\n    Traceback (most recent call last):\n     ...\n    ValueError: number must be a positive integer\n    >>> largest_prime_factor(1.0)\n    Traceback (most recent call last):\n     ...\n    ValueError: number must be a positive integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"number must be a positive integer\")\n\n    if n == 0:\n        raise ValueError(\"number must be a positive integer\")\n\n    if n < 2:\n        return 1\n\n    if n == 1:\n        return 1\n\n    largest_prime_factor_previous = 2\n    largest_prime_factor_current = 3\n\n    while largest_prime_factor_previous * largest_prime_factor_current <= n:\n        if n % largest_prime_factor_current == 0:\n            return largest_prime_factor_current\n        else:\n            largest_prime_factor_previous = largest_prime_factor_current\n            largest_prime_factor_current = largest_prime_factor_current * 2\n\n    return n\n\n\ndef main():\n    \"\"\"\n    Unit tests for largest_prime_factor.\n    \"\"\"\n    assert largest_prime_factor(42) == 7, \"42 is not the largest prime factor.\"\n    assert largest_prime_factor(12) == 2, \"12 is not the largest prime factor.\"\n    assert largest_prime_factor(1) == 1, \"1 is not the largest prime factor.\"\n    assert largest_prime_factor(-42) == -42, \"Negative number is not the largest prime factor.\"\n    assert largest_prime_factor",
      -5.46484375
    ],
    [
      "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    elif n % 7 == 0:\n        return 7\n    elif n % 11 == 0:\n        return 11\n    elif n % 13 == 0:\n        return 13\n    elif n % 17 == 0:\n        return 17\n    elif n % 19 == 0:\n        return 19\n    elif n % 23 == 0:\n        return 23\n    elif n % 29 == 0:\n        return 29\n    elif n % 31 == 0:\n        return 31\n    elif n % 37 == 0:\n        return 37\n    elif n % 41 == 0:\n        return 41\n    elif n % 43 == 0:\n        return 43\n    elif n % 47 == 0:\n        return 47\n    elif n % 49 == 0:\n        return 49\n    elif n % 53 == 0:\n        return 53\n    elif n % 59 == 0:\n        return 59\n    elif n % 61 == 0:\n        return 61\n    elif n % 67 == 0:\n        return 67\n    elif n % 71 == 0:\n        return 71\n    elif n % 73 == 0:\n        return 73\n    elif n % 79 == 0:\n        return 79\n    elif n % 83 == 0:\n        return 83\n    elif n % 89 == 0:\n        return 89\n    elif n % 97 == 0:\n        return 97\n    elif n % 101 == 0:\n        return 101\n    elif n % 103 == 0:\n        return 103\n    elif n % 107 == 0:\n        return 107\n    elif n % 109 == 0:\n        return 109\n    elif n % 113 == 0:\n        return 113\n    elif n % 127 == 0:\n        return 127\n    elif n % 131",
      -5.50390625
    ],
    [
      "def is_prime(n):\n    '''\n    Check whether n is a prime number.\n    '''\n    if n == 2:\n        return True\n    if n < 2:\n        return False\n    if n == 1 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5)+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n):\n    '''\n    Find the largest prime factor of n.\n    '''\n    if n == 1:\n        return 1\n    if is_prime(n):\n        return n\n    for i in range(2, int(n**0.5)+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return largest_prime_factor(n/i)\n    return n\n\nif __name__ == '__main__':\n    print(largest_prime_factor(10))",
      -5.84375
    ],
    [
      "def find_largest_prime_factor(num):\n    if num == 1:\n        return 1\n\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num == 4:\n        return 4\n    if num == 5:\n        return 5\n    if num == 6:\n        return 6\n    if num == 7:\n        return 7\n    if num == 8:\n        return 8\n    if num == 9:\n        return 9\n    if num == 10:\n        return 10\n    if num == 11:\n        return 11\n    if num == 12:\n        return 12\n    if num == 13:\n        return 13\n    if num == 14:\n        return 14\n    if num == 15:\n        return 15\n    if num == 16:\n        return 16\n    if num == 17:\n        return 17\n    if num == 18:\n        return 18\n    if num == 19:\n        return 19\n    if num == 20:\n        return 20\n    if num == 21:\n        return 21\n    if num == 22:\n        return 22\n    if num == 23:\n        return 23\n    if num == 24:\n        return 24\n    if num == 25:\n        return 25\n    if num == 26:\n        return 26\n    if num == 27:\n        return 27\n    if num == 28:\n        return 28\n    if num == 29:\n        return 29\n    if num == 30:\n        return 30\n    if num == 31:\n        return 31\n    if num == 32:\n        return 32\n    if num == 33:\n        return 33\n    if num == 34:\n        return 34\n    if num == 35:\n        return 35\n    if num == 36:\n        return 36\n    if num == 37:\n        return 37\n    if num == 38:\n        return 38\n    if num == 39:\n        return 39\n    if num == 40:\n        return 40\n    if num == 41:\n        return 41\n    if num == 42:\n        return 42\n    if num == 43:\n        return 43\n    if num == 44:\n        return 44\n    if num == 45:\n        return 45\n    if num ==",
      -6.0078125
    ],
    [
      "from math import ceil\nfrom itertools import count\nfrom operator import mul\n\n\ndef get_largest_prime_factor(n):\n    \"\"\"\n    Returns the largest prime factor of n.\n    \"\"\"\n    p = 2\n    while n % p == 0:\n        p += 1\n    return p\n\n\ndef get_largest_prime_factor_recursive(n):\n    \"\"\"\n    Returns the largest prime factor of n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        return get_largest_prime_factor_recursive(n // 2)\n\n\ndef get_largest_prime_factor_iterative(n):\n    \"\"\"\n    Returns the largest prime factor of n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        return get_largest_prime_factor_iterative(n // 2)\n\n\ndef get_largest_prime_factor_recursive_dp(n):\n    \"\"\"\n    Returns the largest prime factor of n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        return get_largest_prime_factor_recursive_dp(n // 2)\n\n\ndef get_largest_prime_factor_iterative_dp(n):\n    \"\"\"\n    Returns the largest prime factor of n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        return get_largest_prime_factor_iterative_dp(n // 2)\n\n\ndef get_largest_prime_factor_dp(n):\n    \"\"\"\n    Returns the largest prime factor of n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        return max(get_largest_prime_factor_dp(n // 2), get_largest_prime_factor_dp(n // 3))\n\n\ndef get_largest_prime_factor_dp_2(n):\n    \"\"\"\n    Returns the largest",
      -6.03125
    ],
    [
      "def largestPrimeFactor(number):\n    \"\"\"\n    Write a function named largestPrimeFactor that takes an integer as input.\n    It should return the largest prime factor of the input number.\n    \"\"\"\n    largestPrimeFactor = 1\n    for i in range(2, number):\n        if number % i == 0:\n            largestPrimeFactor = max(largestPrimeFactor, i)\n    return largestPrimeFactor\n\nlargestPrimeFactor(100)\nlargestPrimeFactor(25)\nlargestPrimeFactor(4)\nlargestPrimeFactor(6)\nlargestPrimeFactor(9)\nlargestPrimeFactor(11)\nlargestPrimeFactor(13)\nlargestPrimeFactor(17)\nlargestPrimeFactor(23)\nlargestPrimeFactor(29)\nlargestPrimeFactor(31)\nlargestPrimeFactor(37)\nlargestPrimeFactor(41)\nlargestPrimeFactor(43)\nlargestPrimeFactor(47)\nlargestPrimeFactor(53)\nlargestPrimeFactor(59)\nlargestPrimeFactor(61)\nlargestPrimeFactor(71)\nlargestPrimeFactor(73)\nlargestPrimeFactor(79)\nlargestPrimeFactor(83)\nlargestPrimeFactor(89)\nlargestPrimeFactor(97)\nlargestPrimeFactor(101)\nlargestPrimeFactor(103)\nlargestPrimeFactor(107)\nlargestPrimeFactor(109)\nlargestPrimeFactor(113)\nlargestPrimeFactor(127)\nlargestPrimeFactor(131)\nlargestPrimeFactor(137)\nlargestPrimeFactor(139)\nlargestPrimeFactor(149)\nlargestPrimeFactor(151)\nlargestPrimeFactor(157)\nlargestPrimeFactor(163)\nlargestPrimeFactor(167)\nlargestPrimeFactor(173)\nlargestPrimeFactor(179)\nlargestPrimeFactor(181)\nlargestPrimeFactor(191)\nlargestPrimeFactor(193)\nlargestPrimeFactor(197)\nlargestPrimeFactor(199)\nlargestPrimeFactor(211)\nlargestPrimeFactor(223)\nlargestPrimeFactor(227)\nlargestPrimeFactor(229)\nlargestPrimeFactor(233)\nlargestPrimeFactor(239)\nlargestPrimeFactor(241)\nlargestPrimeFactor(251)\nlargestPrimeFactor(257)\nlargestPrimeFactor(263)\nlargestPrimeFactor(269)\nlargestPrimeFactor(271)\nlargestPrimeFactor(277)\nlargestPrimeFactor(281)\nlargestPrimeFactor(283)",
      -6.05078125
    ],
    [
      "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            n = n / i\n            break\n    return n\n\ndef main():\n    \"\"\"\n    Write a function that takes an integer and returns the largest prime factor\n    of the number.\n    \"\"\"\n    return largest_prime_factor(10)\n\nif __name__ == \"__main__\":\n    print(main())",
      -6.0546875
    ],
    [
      "# Function to find the largest prime factor of a given number\ndef largest_prime_factor(number):\n    '''\n    Function to find the largest prime factor of a given number.\n\n    Arguments:\n    number -- The number for which the largest prime factor is to be found.\n\n    Returns:\n    The largest prime factor of the given number.\n    '''\n    # Make sure that the given number is a positive integer.\n    if number < 1:\n        raise ValueError('The number given should be a positive integer.')\n\n    # Initialize the list of prime numbers.\n    prime_list = []\n\n    # Make sure that the number is a positive integer.\n    if number < 2:\n        return number\n\n    # Check if the number is a prime number.\n    if number == 2:\n        return number\n\n    # Add the number to the list of prime numbers.\n    prime_list.append(number)\n\n    # Make sure that the number is a positive integer.\n    if number < 2:\n        raise ValueError('The number given should be a positive integer.')\n\n    # Get the square root of the number.\n    square_root = int(math.sqrt(number))\n\n    # Check if the square root is a prime number.\n    if square_root < 2:\n        return number\n\n    # Add the square root to the list of prime numbers.\n    prime_list.append(square_root)\n\n    # Go through the list of prime numbers and find the largest prime factor.\n    for i in range(2, square_root):\n        # Check if the number is a prime number.\n        if number % i == 0:\n            # Add the number to the list of prime numbers.\n            prime_list.append(i)\n\n            # Find the largest prime factor.\n            largest_prime = largest_prime_factor(number / i)\n\n            # Check if the largest prime factor is a prime number.\n            if largest_prime < square_root:\n                return largest_prime\n\n    return number\n\n\nif __name__ == '__main__':\n    '''\n    Test the function by checking if the largest prime factor of the number 1 is 1.\n    '''\n    print('The largest prime factor of 1 is 1.')\n    print(",
      -6.19921875
    ],
    [
      "def find_largest_prime_factor(number):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    :param number: integer\n    :return: int\n    \"\"\"\n    largest_prime_factor = 0\n    largest_prime_factor_index = 0\n    for i in range(2, number):\n        if number % i == 0:\n            if i > largest_prime_factor:\n                largest_prime_factor = i\n                largest_prime_factor_index = i\n    return largest_prime_factor\n\nif __name__ == \"__main__\":\n    print find_largest_prime_factor(10)\n    print find_largest_prime_factor(100)\n    print find_largest_prime_factor(1000)\n    print find_largest_prime_factor(10000)\n    print find_largest_prime_factor(100000)",
      -6.21484375
    ],
    [
      "import math\n\ndef largest_prime_factor(num):\n    \"\"\"\n    Returns the largest prime factor of num.\n\n    Args:\n        num (int): An integer\n    Returns:\n        int: The largest prime factor of num.\n    \"\"\"\n\n    largest_prime = 2\n    largest_factor = 2\n    num_factors = 1\n\n    while num_factors < num:\n        num_factors = 0\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            if num % i == 0:\n                num_factors += 1\n                if i == largest_factor:\n                    largest_prime = i\n                if i > largest_factor:\n                    largest_factor = i\n        if num_factors == 0:\n            break\n    return largest_prime\n\n\nif __name__ == '__main__':\n    print(largest_prime_factor(1234))",
      -6.94921875
    ],
    [
      "def find_largest_prime_factor(number):\n    '''\n    Finds the largest prime factor of a given number.\n\n    >>> find_largest_prime_factor(7)\n    3\n    >>> find_largest_prime_factor(12)\n    5\n    >>> find_largest_prime_factor(1)\n    1\n    >>> find_largest_prime_factor(0)\n    0\n    '''\n\n    if number == 0:\n        return 0\n\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            if i > number:\n                return i\n            else:\n                return i * find_largest_prime_factor(number / i)\n    return number\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.94921875
    ],
    [
      "# Write your code here\ndef largestPrimeFactor(number):\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 3\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 6\n    if number == 7:\n        return 7\n    if number == 8:\n        return 8\n    if number == 9:\n        return 9\n    if number == 10:\n        return 10\n    if number == 11:\n        return 11\n    if number == 12:\n        return 12\n    if number == 13:\n        return 13\n    if number == 14:\n        return 14\n    if number == 15:\n        return 15\n    if number == 16:\n        return 16\n    if number == 17:\n        return 17\n    if number == 18:\n        return 18\n    if number == 19:\n        return 19\n    if number == 20:\n        return 20\n    if number == 21:\n        return 21\n    if number == 22:\n        return 22\n    if number == 23:\n        return 23\n    if number == 24:\n        return 24\n    if number == 25:\n        return 25\n    if number == 26:\n        return 26\n    if number == 27:\n        return 27\n    if number == 28:\n        return 28\n    if number == 29:\n        return 29\n    if number == 30:\n        return 30\n    if number == 31:\n        return 31\n    if number == 32:\n        return 32\n    if number == 33:\n        return 33\n    if number == 34:\n        return 34\n    if number == 35:\n        return 35\n    if number == 36:\n        return 36\n    if number == 37:\n        return 37\n    if number == 38:\n        return 38\n    if number == 39:\n        return 39\n    if number == 40:\n        return 40\n    if number == 41:\n        return 41\n    if number == 42:\n        return 42\n    if number == 43:\n        return 43\n    if number == 44:\n        return 44\n    if number == 45:\n        return 45\n    if",
      -7.5859375
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    :param number: A positive integer\n    :return: A list of prime factors of the number\n    \"\"\"\n    if number <= 1:\n        return []\n    if number == 2:\n        return [2]\n    if number % 2 == 0:\n        return [2]\n    if number % 3 == 0:\n        return [3]\n    if number % 5 == 0:\n        return [5]\n    if number % 7 == 0:\n        return [7]\n    if number % 11 == 0:\n        return [11]\n    if number % 13 == 0:\n        return [13]\n    if number % 17 == 0:\n        return [17]\n    if number % 19 == 0:\n        return [19]\n    if number % 23 == 0:\n        return [23]\n    if number % 29 == 0:\n        return [29]\n    if number % 31 == 0:\n        return [31]\n    if number % 37 == 0:\n        return [37]\n    if number % 41 == 0:\n        return [41]\n    if number % 43 == 0:\n        return [43]\n    if number % 47 == 0:\n        return [47]\n    if number % 53 == 0:\n        return [53]\n    if number % 59 == 0:\n        return [59]\n    if number % 61 == 0:\n        return [61]\n    if number % 67 == 0:\n        return [67]\n    if number % 71 == 0:\n        return [71]\n    if number % 73 == 0:\n        return [73]\n    if number % 79 == 0:\n        return [79]\n    if number % 83 == 0:\n        return [83]\n    if number % 89 == 0:\n        return [89]\n    if number % 97 == 0:\n        return [97]\n    if number % 101 == 0:\n        return [101]\n    if number % 103 == 0:\n        return [103]\n    if number % 107 == 0:\n        return [107]\n    if number % 109 == 0:\n        return [109]\n    if number % 113 == 0:\n        return [113]",
      -8.03125
    ],
    [
      "import sys\nimport math\nfrom functools import reduce\n\n# TODO:\n# 1. Implement the function that finds the largest prime factor of a given number\n# 2. Test the function with different inputs\n\n# TODO:\n# 1. Implement a function to find the largest prime factor of a given number\n# 2. Test the function with different inputs\n\ndef largest_prime_factor(num):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    :param num: integer\n    :return: the largest prime factor of num\n    \"\"\"\n    factors = []\n    largest_factor = 1\n    largest_factor_index = 0\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            factors.append(i)\n            if i > largest_factor:\n                largest_factor = i\n                largest_factor_index = len(factors) - 1\n            if num / i == i:\n                factors.append(i)\n                if i > largest_factor:\n                    largest_factor = i\n                    largest_factor_index = len(factors) - 1\n    return factors, largest_factor, largest_factor_index\n\nif __name__ == \"__main__\":\n    num = int(sys.argv[1])\n    factors, largest_factor, largest_factor_index = largest_prime_factor(num)\n    print(\"The largest prime factor of {} is {}\".format(num, largest_factor))\n    print(\"The largest prime factor index of {} is {}\".format(num, largest_factor_index))\n    print(\"The largest prime factor of {} is {}\".format(factors, largest_factor))\n    print(\"The largest prime factor index of {} is {}\".format(factors, largest_factor_index))",
      -9.1015625
    ],
    [
      "from math import sqrt\n\n\ndef is_prime(n):\n    if n <= 2:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        if n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef get_largest_prime_factor(n):\n    if n == 1:\n        return 1\n    if is_prime(n):\n        return n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\n\ndef main():\n    print(get_largest_prime_factor(6))\n    print(get_largest_prime_factor(7))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(10))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(10))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest_prime_factor(100))\n    print(get_largest",
      -9.125
    ],
    [
      "# Function to find the largest prime factor of a number\ndef largestPrimeFactor(number):\n    '''\n    @param number: The number to be factored\n    @return: The largest prime factor of the given number\n    '''\n\n    # Check if the number is a prime\n    if number == 1:\n        return number\n    elif number == 2:\n        return 2\n    elif number % 2 == 0:\n        return number / 2\n    elif number % 3 == 0:\n        return number / 3\n    elif number % 5 == 0:\n        return number / 5\n    elif number % 7 == 0:\n        return number / 7\n    else:\n        # Get the list of factors\n        factors = []\n        for i in range(2, number):\n            if number % i == 0:\n                factors.append(i)\n        # Find the largest prime factor\n        largestFactor = 0\n        for factor in factors:\n            if factor > largestFactor:\n                largestFactor = factor\n        return largestFactor\n\n# Test Cases\nprint largestPrimeFactor(123)\nprint largestPrimeFactor(20)\nprint largestPrimeFactor(9)\nprint largestPrimeFactor(6)\nprint largestPrimeFactor(4)\nprint largestPrimeFactor(3)\nprint largestPrimeFactor(2)\nprint largestPrimeFactor(1)\nprint largestPrimeFactor(0)\nprint largestPrimeFactor(1)\nprint largestPrimeFactor(0)\nprint largestPrimeFactor(0)",
      -9.8515625
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of n.\n\n    :param n: The number to find the largest prime factor of\n    :return: The largest prime factor of n\n    \"\"\"\n    largest_prime_factors = 1\n    prime_factors = [2]\n    # Iterate through all the multiples of the current prime factor\n    for i in range(2, n // 2 + 1):\n        # If the current number is not a multiple of the current prime factor\n        if n % i!= 0:\n            # If the current prime factor is larger than the largest prime factor\n            if len(prime_factors) > len(largest_prime_factors):\n                # If the current prime factor is not a prime factor of the largest prime factor\n                if i not in largest_prime_factors:\n                    largest_prime_factors = prime_factors\n                else:\n                    # Add the current prime factor to the list of prime factors\n                    largest_prime_factors.append(i)\n            else:\n                # If the current prime factor is not a prime factor of the largest prime factor\n                if i not in largest_prime_factors:\n                    largest_prime_factors = prime_factors\n                else:\n                    # Add the current prime factor to the list of prime factors\n                    largest_prime_factors.append(i)\n            # Add the current prime factor to the list of prime factors\n            prime_factors.append(i)\n    # Return the largest prime factor of n\n    return largest_prime_factors[0]\n\n\n# Test Cases\nprint(largest_prime_factor(1))\nprint(largest_prime_factor(2))\nprint(largest_prime_factor(3))\nprint(largest_prime_factor(4))\nprint(largest_prime_factor(5))\nprint(largest_prime_factor(6))\nprint(largest_prime_factor(7))\nprint(largest_prime_factor(8))\nprint(largest_prime_factor(9))",
      -9.8671875
    ],
    [
      "def largest_prime_factor(num):\n    \"\"\"\n    Write a function that finds the largest prime factor of a given number.\n    :param num: The number for which to find the largest prime factor.\n    :return: The largest prime factor of num.\n    \"\"\"\n    # If num is a prime number, return num\n    if num == 2:\n        return 2\n    # If num is 1, return 1\n    elif num == 1:\n        return 1\n\n    # Iterate over the numbers 0 to num\n    for i in range(3, num):\n        # If num % i is 0, return i\n        if num % i == 0:\n            return i\n\n    # If none of the numbers above num are prime, return num\n    return num\n\nif __name__ == \"__main__\":\n    # Test case 1\n    assert largest_prime_factor(5) == 5\n    assert largest_prime_factor(10) == 10\n    assert largest_prime_factor(100) == 100\n    assert largest_prime_factor(1000) == 1000\n    assert largest_prime_factor(10000) == 10000\n    assert largest_prime_factor(100000) == 100000\n\n    # Test case 2\n    assert largest_prime_factor(2) == 2\n    assert largest_prime_factor(3) == 3\n    assert largest_prime_factor(4) == 2\n    assert largest_prime_factor(5) == 5\n    assert largest_prime_factor(6) == 2\n    assert largest_prime_factor(7) == 7\n    assert largest_prime_factor(8) == 2\n    assert largest_prime_factor(9) == 3\n    assert largest_prime_factor(10) == 2\n    assert largest_prime_factor(11) == 11\n    assert largest_prime_factor(12) == 2\n    assert largest_prime_factor(13) == 13\n    assert largest_prime_factor(14) == 14\n    assert largest_prime_factor(15) == 3\n    assert largest_prime_factor(16) == 2\n    assert largest_prime_factor(17) == 17\n    assert largest_prime_factor(18) == 2\n    assert largest_prime_factor(19) == 19",
      -10.34375
    ],
    [
      "#!/usr/bin/python\n\ndef largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of n.\n    \"\"\"\n    # A list to hold the prime factors of n\n    # The list is sorted in ascending order\n    prime_factors = []\n    # If n is a prime, add it to the list and return\n    if n == 1:\n        prime_factors.append(n)\n        return prime_factors\n    # If n is not a prime, recursively call this function\n    # to find the largest prime factor of n - 1\n    else:\n        # Get the next prime factor of n - 1\n        # This is done using the square root of n - 1\n        # The square root of n - 1 is always a prime\n        # If n is a prime, add it to the list and return\n        # If n is not a prime, recursively call this function\n        # to find the largest prime factor of n - 1\n        # This is done using the square root of n - 1\n        # The square root of n - 1 is always a prime\n        if n % 2 == 0:\n            prime_factors.append(n / 2)\n            prime_factors.append(n / 2)\n            return prime_factors\n        else:\n            # Get the next prime factor of n - 1\n            # This is done using the square root of n - 1\n            # The square root of n - 1 is always a prime\n            # If n is a prime, add it to the list and return\n            # If n is not a prime, recursively call this function\n            # to find the largest prime factor of n - 1\n            # This is done using the square root of n - 1\n            # The square root of n - 1 is always a prime\n            if n % 3 == 0:\n                prime_factors.append(n / 3)\n                prime_factors.append(n / 3)\n                return prime_factors\n            else:\n                # Get the next prime factor of n - 1\n                # This is done using the square root of n - 1\n                # The square root of n - 1 is always a prime\n                # If n is a prime, add it to the list and",
      -10.5546875
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    Given a positive integer, return the largest prime factor of it.\n    \"\"\"\n    # Create a dictionary to store the largest prime factor\n    # of the number n.\n    largest_prime_factor = {}\n    # Create a prime number list to store all prime numbers\n    # less than the number n.\n    prime_list = []\n    # Create a variable to store the largest prime factor.\n    # Start with 1, as there is no prime factor of 1.\n    largest_prime_factor[1] = 1\n    # Start with 2, as there is no prime factor of 2.\n    largest_prime_factor[2] = 2\n    # If the number is even, we just add it to the largest prime factor.\n    if n % 2 == 0:\n        largest_prime_factor[2] = 2\n        largest_prime_factor[n / 2] = 2\n        return largest_prime_factor\n\n    # If the number is odd, we need to find the largest prime factor.\n    while n!= 1:\n        # If the number is prime, add it to the list of prime numbers.\n        if n % 2 == 0:\n            prime_list.append(n)\n            # Add the number to the dictionary.\n            largest_prime_factor[n] = n\n            n = n / 2\n        else:\n            # If the number is not prime, find the next prime factor.\n            while n % 2 == 0:\n                # Add the number to the list of prime numbers.\n                prime_list.append(n)\n                # Add the number to the dictionary.\n                largest_prime_factor[n] = n\n                n = n / 2\n            n = n / 2\n    # Return the largest prime factor.\n    return largest_prime_factor\n\ndef main():\n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n    # Test cases\n    assert largest_prime_factor(1) == {1: 1}\n    assert largest_prime_factor(2) == {2: 2}\n    assert largest_prime_factor(3) == {3: 1}\n    assert largest_prime_factor(4) ==",
      -13.6015625
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number == 1:\n        return 1\n    elif number % 2 == 0:\n        return 2\n    elif number % 3 == 0:\n        return 3\n    elif number % 5 == 0:\n        return 5\n    else:\n        # The largest prime factor of a number greater than one is\n        # the largest prime factor of any number greater than one.\n        return largest_prime_factor(number / 2) * largest_prime_factor(number / 3) * largest_prime_factor(number / 5)\n\n\nif __name__ == '__main__':\n    print(largest_prime_factor(100))\n    print(largest_prime_factor(123))\n    print(largest_prime_factor(12345))\n    print(largest_prime_factor(123456789))",
      -15.1171875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}