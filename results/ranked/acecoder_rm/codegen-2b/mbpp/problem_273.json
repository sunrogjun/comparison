{
  "problem": {
    "task_id": "MBPP/284",
    "prompt": "Write a function to check whether all items of a list are equal to a given string.",
    "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
    "test_list": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ],
    "challenge_test_list": [],
    "problem_id": 273
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# https://www.hackerrank.com/challenges/equal-lists\n# https://www.hackerrank.com/challenges/equal-lists-ii\n# https://www.hackerrank.com/challenges/equal-lists-iii\n\n# Complete the function below.\ndef all_equal(items, target):\n    count = 0\n    for item in items:\n        if item!= target:\n            return False\n        count += 1\n    return count == len(items)\n\nif __name__ == '__main__':\n    string = input().strip()\n    string_list = list(map(str, input().strip().split()))\n    print(all_equal(string_list, string))",
      8.3828125
    ],
    [
      "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return True\n        s = s[::-1]\n        start = 0\n        for i in xrange(len(s)):\n            if s[i]!= s[start]:\n                start += 1\n                if start > i:\n                    return False\n            start += 1\n        return True",
      1.564453125
    ],
    [
      "def is_equal(items, str):\n    if str == '':\n        return True\n    for item in items:\n        if item!= str:\n            return False\n    return True\n\nif __name__ == '__main__':\n    assert is_equal(['a', 'b', 'c'], 'a')\n    assert is_equal(['a', 'b', 'c'], 'abc')\n    assert is_equal(['a', 'b', 'c'], 'abc')\n    assert is_equal(['a', 'b', 'c'], 'abc')\n    assert is_equal(['a', 'b', 'c'], 'a')\n    assert not is_equal(['a', 'b', 'c'], 'ab')\n    assert not is_equal(['a', 'b', 'c'], 'abc')\n    assert not is_equal(['a', 'b', 'c'], 'd')\n    assert not is_equal(['a', 'b', 'c'], '')",
      1.1611328125
    ],
    [
      "# https://www.hackerrank.com/challenges/equal-lists/problem\n\ndef all_equal(arr, target):\n    for i in range(0, len(arr)):\n        if arr[i]!= target:\n            return False\n    return True\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target = '4'\n    print(all_equal(arr, target))",
      1.0654296875
    ],
    [
      "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) <= 1:\n            return True\n        left, right = 0, len(s) - 1\n        while left <= right:\n            if s[left]!= s[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n\nif __name__ == '__main__':\n    print Solution().isPalindrome('bbb')",
      0.9951171875
    ],
    [
      "import re\n\ndef is_equal(l, s):\n    return all(re.match(s, x) for x in l)\n\n# Your code here\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s for x in l)\n\ndef is_equal(l, s):\n    return all(x == s",
      0.759765625
    ],
    [
      "def all_items_equal(lst, target):\n    \"\"\"\n    :type lst: List[str]\n    :type target: str\n    :rtype: bool\n    \"\"\"\n    for i in lst:\n        if i!= target:\n            return False\n    return True\n\ndef main():\n    lst = [\"A\", \"B\", \"C\", \"D\"]\n    target = \"B\"\n    print(all_items_equal(lst, target))\n\nif __name__ == \"__main__\":\n    main()",
      0.322509765625
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isPalindrome(self, head):\n        s = \"\"\n        while head is not None:\n            s += head.val\n            head = head.next\n        return s == s[::-1]\n\n# test\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(1)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(3)\n    head.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next.next = ListNode(9)\n    print Solution().isPalindrome(head, \"abac\")",
      0.30419921875
    ],
    [
      "#!/usr/bin/env python\n\nclass Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return s == s[::-1]\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isPalindrome('A man, a plan, a canal: Panama')\n    print s.isPalindrome('race a car')\n    print s.isPalindrome('A man, a plan, a canal: Panama')",
      0.129150390625
    ],
    [
      "# -*- coding: utf-8 -*-\n\n# https://www.hackerrank.com/challenges/equal-items\n\ndef all_equal(l, s):\n    for i in range(len(l)):\n        if l[i]!= s[i]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    s = \"12345\"\n    print(all_equal(l, s))",
      0.09405517578125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n        else:\n            return \"Nil\"\n\nclass Solution:\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head or not head.next:\n            return True\n        \n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        while slow and fast:\n            if slow.val!= fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        \n        return True",
      0.03363037109375
    ],
    [
      "#!/usr/bin/env python\n\n# write your code here\n\ndef all_items_equal_to_s(lst, s):\n    if len(lst) == 0:\n        return False\n    if lst[0] == s:\n        return all_items_equal_to_s(lst[1:], s)\n    else:\n        return False\n\nlst = ['hello', 'world', 'goodbye']\ns = 'goodbye'\n\nprint all_items_equal_to_s(lst, s)",
      0.018768310546875
    ],
    [
      "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n        s = s[::-1]\n        return s == s[::-1]\n\n    def isPalindrome2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n        s = s[::-1]\n        if s[0] == s[-1]:\n            return True\n        return s[0:len(s) // 2] == s[-len(s) // 2:]",
      -0.012054443359375
    ],
    [
      "class Solution(object):\n    def isListEquals(self, list, target):\n        \"\"\"\n        :type list: List[int]\n        :type target: str\n        :rtype: bool\n        \"\"\"\n        return all(map(lambda x: x == target, list))\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.isListEquals(list, target)",
      -0.265625
    ],
    [
      "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: str\n        :rtype: bool\n        \"\"\"\n        if len(x) < 2:\n            return True\n        left, right = 0, len(x) - 1\n        while left < right:\n            if x[left]!= x[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n\nif __name__ == \"__main__\":\n    assert Solution().isPalindrome(\"hello\")\n    assert Solution().isPalindrome(\"\")\n    assert Solution().isPalindrome(\"a\")\n    assert Solution().isPalindrome(\"aa\")\n    assert Solution().isPalindrome(\"aa\")\n    assert Solution().isPalindrome(\"aa\")\n    assert Solution().isPalindrome(\"abcd\")\n    assert Solution().isPalindrome(\"abcd\")\n    assert Solution().isPalindrome(\"abcd\")\n    assert Solution().isPalindrome(\"abbcd\")\n    assert Solution().isPalindrome(\"abbcd\")\n    assert Solution().isPalindrome(\"abbcd\")\n    assert Solution().isPalindrome(\"abbcd\")",
      -0.69140625
    ],
    [
      "class Solution(object):\n    def isListBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head or not head.next:\n            return True\n        if head.val > head.next.val:\n            head, head.next = head.next, head\n        \n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            if fast.val > head.val:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        \n        return slow.val == head.val",
      -0.85693359375
    ],
    [
      "# Definition for a  binary tree node\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSubtree(self, root: TreeNode, s: str) -> bool:\n        if root is None:\n            return False\n        if root.val == s:\n            return True\n        if self.isSubtree(root.left, s) and self.isSubtree(root.right, s):\n            return True\n        return False",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def isListBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        if not head.next:\n            return head.val == head.next.val\n        if head.val > head.next.val:\n            return self.isListBST(head.next)\n        else:\n            return self.isListBST(head.next.next) and self.isListBST(head)\n\n    def isBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        if not head.next:\n            return head.val == head.next.val\n        if head.val > head.next.val:\n            return self.isBST(head.next) and self.isBST(head)\n        else:\n            return self.isBST(head.next.next) and self.isBST(head) and self.isBST(head.next)",
      -0.85693359375
    ],
    [
      "# https://leetcode.com/problems/equal-string/discuss/2865/Very-easy-to-understand-and-very-hard-to-solve-solution\n# https://leetcode.com/problems/equal-string/discuss/2865/very-easy-to-understand-and-very-hard-to-solve-solution\n\nclass Solution(object):\n    def isEquals(self, str, nums):\n        \"\"\"\n        :type str: str\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(str) == len(nums) and str == str.lower()\n\nclass Solution2(object):\n    def isEquals(self, str, nums):\n        \"\"\"\n        :type str: str\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(str) == len(nums) and str.lower() == str",
      -0.85693359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            \n        if slow.val!= head.val:\n            return False\n            \n        prev = None\n        while head:\n            if prev and prev.val!= head.val:\n                return False\n            prev = head\n            head = head.next\n            \n        return True",
      -0.85693359375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)",
      -0.85693359375
    ],
    [
      "def equal(s, l):\n    for item in l:\n        if item!= s:\n            return False\n    return True\n\n# Example 1:\n\ns = \"eggs\"\nl = [\"spam\", \"eggs\", \"eggspam\"]\nprint(equal(s, l))\n\n# Example 2:\n\ns = \"spam\"\nl = [\"eggs\", \"spam\", \"spamspam\"]\nprint(equal(s, l))\n\n# Example 3:\n\ns = \"spam\"\nl = [\"eggs\", \"spam\", \"spamspam\", \"spamspamspam\"]\nprint(equal(s, l))\n\n# Notes:\n# - The input list may be empty.\n# - The input string may contain multiple words.",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/equal-items/problem\n\ndef is_equal(item, target):\n    return item == target\n\nif __name__ == '__main__':\n    s = input()\n    n = input()\n    s = list(map(is_equal, s.split(), s.split()))\n    if all(s):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def isSubstring(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s) < len(t):\n            return False\n        if len(s) == len(t):\n            return s == t\n        \n        for i in range(0, len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True\n\n    def isSubstring_2(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s) > len(t):\n            return False\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True",
      -0.85693359375
    ],
    [
      "def is_equal(lst, s):\n    \"\"\"\n    :type lst: List[int]\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return len(lst) == 0 or s in lst\n\n# Your Solution",
      -0.85693359375
    ],
    [
      "def is_equal(l, s):\n    for i in l:\n        if i!= s:\n            return False\n    return True\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(l,s)\n# param_1 = obj.is_equal(l,s)",
      -0.85791015625
    ],
    [
      "def all_equal(l, e):\n    for i in l:\n        if i!= e:\n            return False\n    return True\n\nprint all_equal([1, 2, 3, 4], \"123\")",
      -0.85791015625
    ],
    [
      "def equal_items(items, target):\n    \"\"\"\n    :type items: List[str]\n    :type target: str\n    :rtype: bool\n    \"\"\"\n    if not items:\n        return False\n    if items[0] == target:\n        return equal_items(items[1:], target)\n    return False\n\n\nprint(equal_items([\"a\", \"b\", \"c\", \"d\", \"e\"], \"e\"))\nprint(equal_items([\"a\", \"b\", \"c\", \"d\", \"e\"], \"d\"))\nprint(equal_items([\"a\", \"b\", \"c\", \"d\", \"e\"], \"e\"))\nprint(equal_items([\"a\", \"b\", \"c\", \"d\", \"e\"], \"a\"))",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/equal-lists\ndef is_equal(L, s):\n    if len(L)!= len(s):\n        return False\n\n    for i in range(len(L)):\n        if L[i]!= s[i]:\n            return False\n\n    return True\n\nif __name__ == \"__main__\":\n    s = input().split()\n    L = [int(i) for i in s]\n    print(is_equal(L, s))",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        # TODO\n        return True\n\ndef main():\n    s = Solution()\n    s.isPalindrome('aabbcc')\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def is_equal(list, str):\n    \"\"\"\n    :type list: List[str]\n    :type str: str\n    :rtype: bool\n    \"\"\"\n    if len(list)!= len(str):\n        return False\n    for i in range(len(list)):\n        if list[i]!= str[i]:\n            return False\n    return True",
      -0.85791015625
    ],
    [
      "def all_equal(items, str):\n    for item in items:\n        if item!= str:\n            return False\n    return True\n\n# Your all_equal solution should be written using only basic list operations.\n\n# Note:\n# You may assume all items are unique.",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isPalindrome(self, head):\n        if not head:\n            return True\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        return slow.val == s[::-1]",
      -0.85791015625
    ],
    [
      "def equal(items, string):\n    return all(item == string for item in items)\n\ndef main():\n    items = [1, 2, 3, \"a\", \"b\", \"c\"]\n    string = \"a\"\n    assert equal(items, string)\n    string = \"c\"\n    assert not equal(items, string)\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isPalindrome(self, head, s):\n        # Write your code here\n        if not head or not s:\n            return True\n        \n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        if not s:\n            return True\n        \n        while fast:\n            if fast.val!= s[slow.val - 1]:\n                return False\n            slow = slow.next\n            fast = fast.next\n        \n        return True",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        slow = head\n        fast = head\n        while slow and fast:\n            slow = slow.next\n            fast = fast.next.next\n        if not slow:\n            return False\n        slow = head\n        while slow and fast:\n            if slow.val!= fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        return True",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isPalindrome(self, head):\n        if not head:\n            return True\n        if not head.next:\n            return head.val == s\n        p = head\n        s = s[::-1]\n        while p:\n            if p.val!= s:\n                return False\n            p = p.next\n            s = s[::-1]\n        return True",
      -0.8583984375
    ],
    [
      "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param val, an integer\n    # @return a boolean\n    def isPalindrome(self, head, val):\n        if not head:\n            return True\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        while slow:\n            if slow.val!= val:\n                return False\n            slow = slow.next\n            \n        return True",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        while slow.next and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        while slow:\n            if slow.val!= fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        return True",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        slow = head\n        fast = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        if fast:\n            slow = slow.next\n        while fast:\n            if fast.val!= slow.val:\n                return False\n            fast = fast.next\n            slow = slow.next\n        return True",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        if len(s1) + len(s2)!= len(s3):\n            return False\n        if len(s1) == 0:\n            return s3 == s2\n        if len(s2) == 0:\n            return s3 == s1\n        if s1[0]!= s2[0]:\n            return False\n        return self.isInterleave(s1[1:], s2[1:], s3[1:]) and self.isInterleave(s1[1:], s3[1:], s2[1:])",
      -0.8583984375
    ],
    [
      "# Definition for a ListNode.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        p = head\n        n = head.next\n        while n:\n            p = n\n            n = n.next\n            p2 = head\n            while p2 and p2.val!= n.val:\n                p2 = p2.next\n            if p2 and p2.val!= n.val:\n                return False\n        return True",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/equal-items\n# Python 3.5.3\n\ndef equal_items(list_of_strings, string):\n    for item in list_of_strings:\n        if item!= string:\n            return False\n    return True\n\ndef check_equal_items(list_of_strings, string):\n    if not equal_items(list_of_strings, string):\n        return False\n    return True\n\nif __name__ == '__main__':\n    string = input()\n    string = string.strip()\n    list_of_strings = []\n    for line in input():\n        list_of_strings.append(line.strip())\n\n    print(check_equal_items(list_of_strings, string))",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isPalindrome(self, head):\n        if not head or not head.next:\n            return True\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if not slow or not fast:\n            return False\n        if slow.val!= fast.val:\n            return False\n        return self.isPalindrome(slow.next, fast.next.next)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isPalindrome(self, head):\n        if not head:\n            return True\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        while slow:\n            if slow.val!= fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        return True",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head or not head.next:\n            return True\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        while slow:\n            if slow.val!= fast.val:\n                return False\n            slow, fast = slow.next, fast.next\n        return True\n\n# Note:\n# 1. LinkedList\n# 2. Iterative\n# 3. Recursive",
      -1.154296875
    ],
    [
      "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: str\n        :rtype: bool\n        \"\"\"\n        if len(x) <= 1:\n            return True\n\n        left, right = 0, len(x) - 1\n        while left < right:\n            if x[left]!= x[right]:\n                return False\n            left += 1\n            right -= 1\n\n        return True\n\ns = Solution()\nprint s.isPalindrome(\"babad\")\nprint s.isPalindrome(\"a\")\nprint s.isPalindrome(\"ab\")\nprint s.isPalindrome(\"abc\")\nprint s.isPalindrome(\"aabc\")\nprint s.isPalindrome(\"ababc\")\nprint s.isPalindrome(\"aababc\")\nprint s.isPalindrome(\"abbc\")\nprint s.isPalindrome(\"abbbbc\")\nprint s.isPalindrome(\"abcabc\")\nprint s.isPalindrome(\"aabbbcc\")\nprint s.isPalindrome(\"aabbbbc\")\nprint s.isPalindrome(\"aaabbbbbcc\")\nprint s.isPalindrome(\"aabbbbbcc\")\nprint s.isPalindrome(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
      -1.2802734375
    ],
    [
      "# https://www.hackerrank.com/challenges/equal-lists/problem\n\n# Write a function to check whether all items of a list are equal to a given string.\n# The function should return true if and only if the list is equal to the string.\n#\n# Example\n# Given list a = [\"hello\", \"world\", \"hello\", \"world\"],\n# the function should return true.\n\n# Example\n# Given list a = [\"hello\", \"world\", \"hello\", \"world\"],\n# the function should return false.\n\n# Example\n# Given list a = [\"hello\", \"world\", \"hello\", \"world\"],\n# the function should return true.\n\n# Example\n# Given list a = [\"hello\", \"world\", \"hello\", \"world\"],\n# the function should return true.\n\n# Example\n# Given list a = [\"hello\", \"world\", \"hello\", \"world\"],\n# the function should return false.\n\ndef is_equal(a, x):\n    if len(a) == 0:\n        return False\n    if len(a) == 1:\n        return a[0] == x\n    else:\n        return a[0] == x and is_equal(a[1:], x)\n\na = list(input().split())\nprint(is_equal(a, \"hello\"))",
      -1.3330078125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        # write your code here\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        while head:\n            if head.val!= slow.val:\n                return False\n            slow = slow.next\n            head = head.next\n        return True",
      -2.125
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isListNodeEqual(self, head, s):\n        if head is None:\n            return False\n        \n        if head.val!= s:\n            return False\n        \n        return self.isListNodeEqual(head.next, s)",
      -2.140625
    ],
    [
      "# https://www.hackerrank.com/challenges/equal-items\n\ndef equal_items(items, target):\n    count = 0\n    for item in items:\n        if item == target:\n            count += 1\n    return count == len(items)\n\n# Tests\nassert equal_items([1, 2, 3, 4], \"2\")\nassert not equal_items([1, 2, 3, 4], \"1\")\nassert not equal_items([1, 2, 3, 4], \"a\")\nassert not equal_items([1, 2, 3, 4], \"1\")\nassert equal_items([1, 2, 3, 4], \"1\")\nassert equal_items([1, 2, 3, 4], \"2\")\nassert equal_items([1, 2, 3, 4], \"3\")\nassert equal_items([1, 2, 3, 4], \"4\")\nassert equal_items([1, 2, 3, 4], \"a\")\nassert equal_items([1, 2, 3, 4], \"b\")",
      -2.279296875
    ],
    [
      "# https://leetcode.com/problems/equal-lists/\nclass Solution(object):\n    def isEqual(self, head, s):\n        \"\"\"\n        :type head: ListNode\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if head == None or head.next == None:\n            return head.val == s\n        \n        curr = head\n        prev = None\n        while curr!= None:\n            if curr.val!= s:\n                return False\n            prev = curr\n            curr = curr.next\n        \n        return True",
      -2.771484375
    ],
    [
      "# https://leetcode.com/problems/equal-lists/discuss/27897/Python-with-explanation-of-the-algorithm\n# https://leetcode.com/problems/equal-lists/discuss/27891/Java-with-explanation-of-the-algorithm\n# https://leetcode.com/problems/equal-lists/discuss/27893/Java-with-explanation-of-the-algorithm\n\n\nclass Solution(object):\n    def isEqual(self, head, s):\n        \"\"\"\n        :type head: ListNode\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return False\n        if head.val!= s:\n            return False\n        slow = head\n        fast = head\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n            if slow.val!= s:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    assert Solution().isEqual(\n        [1, 2, 3, 4, 5], \"1\"\n    )\n    assert Solution().isEqual(\n        [1, 2, 3, 4, 5], \"1\"\n    )\n    assert not Solution().isEqual(\n        [1, 2, 3, 4, 5], \"2\"\n    )\n    assert not Solution().isEqual(\n        [1, 2, 3, 4, 5], \"1\"\n    )\n    assert Solution().isEqual(\n        [1, 2, 3, 4, 5], \"1\"\n    )",
      -2.80078125
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        # If p and q are both null, return true\n        if p is None and q is None:\n            return True\n\n        # If p is null, return false\n        if p is None:\n            return False\n\n        # If q is null, return false\n        if q is None:\n            return False\n\n        # If p and q are both not null, check their value\n        if p.val!= q.val:\n            return False\n\n        # If p and q are both not null, check their left and right\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n\n\n    def isSameTree1(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        # If p and q are both null, return true\n        if p is None and q is None:\n            return True\n\n        # If p is null, return false\n        if p is None:\n            return False\n\n        # If q is null, return false\n        if q is None:\n            return False\n\n        # If p and q are both not null, check their value\n        if p.val!= q.val:\n            return False\n\n        # If p and q are both not null, check their left and right\n        return self.isSameTree1(p.left, q.left) and self.isSameTree1(p.right, q.right)",
      -2.994140625
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isPalindrome(self, head, s):\n        slow = head\n        fast = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n\n        slow = head\n        while slow:\n            if slow.val!= s[slow.val - 'a']:\n                return False\n            slow = slow.next\n\n        return True",
      -3.009765625
    ],
    [
      "import unittest\n\n# Complete the function below.\ndef all_equal(l, s):\n    \"\"\"\n    :type l: List[str]\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return l == s\n\n\ndef all_equal_1(l, s):\n    \"\"\"\n    :type l: List[str]\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return all([l[i] == s for i in range(len(l))])\n\n\nclass UnitTest(unittest.TestCase):\n    def test_all_equal(self):\n        self.assertEqual(all_equal([\"a\", \"b\", \"c\"], \"a\"), True)\n\n    def test_all_equal_1(self):\n        self.assertEqual(all_equal_1([\"a\", \"b\", \"c\"], \"a\"), True)\n\n    def test_all_equal_2(self):\n        self.assertEqual(all_equal_1([\"a\", \"b\", \"c\"], \"a\"), True)\n\n    def test_all_equal_3(self):\n        self.assertEqual(all_equal_1([\"a\", \"b\", \"c\"], \"a\"), True)\n\n    def test_all_equal_4(self):\n        self.assertEqual(all_equal_1([\"a\", \"b\", \"c\"], \"a\"), True)\n\n    def test_all_equal_5(self):\n        self.assertEqual(all_equal_1([\"a\", \"b\", \"c\"], \"a\"), True)\n\n    def test_all_equal_6(self):\n        self.assertEqual(all_equal_1([\"a\", \"b\", \"c\"], \"a\"), True)\n\n    def test_all_equal_7(self):\n        self.assertEqual(all_equal_1([\"a\", \"b\", \"c\"], \"a\"), True)\n\n    def test_all_equal_8(self):\n        self.assertEqual(all_equal_1([\"a\", \"b\", \"c\"], \"a\"), True)\n\n    def test_all_equal_9(self",
      -3.068359375
    ],
    [
      "import unittest\n\n\nclass TestProblem1(unittest.TestCase):\n\n    def test_problem(self):\n        self.assertEqual(all_equal(['a', 'b', 'c', 'd'], 'c'), True)\n        self.assertEqual(all_equal(['a', 'b', 'c', 'd'], 'd'), True)\n        self.assertEqual(all_equal(['a', 'b', 'c', 'd'], 'e'), False)\n        self.assertEqual(all_equal(['a', 'b', 'c', 'd'], 'b'), True)\n        self.assertEqual(all_equal(['a', 'b', 'c', 'd'], 'c'), True)\n        self.assertEqual(all_equal(['a', 'b', 'c', 'd'], 'a'), True)\n        self.assertEqual(all_equal(['a', 'b', 'c', 'd'], 'd'), True)\n\n\ndef all_equal(lst, val):\n    return all(val == x for x in lst)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -3.130859375
    ],
    [
      "class Solution(object):\n    def isEqual(self, nums, s):\n        \"\"\"\n        :type nums: List[int]\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0:\n            return False\n        if len(s) == 0:\n            return True\n        if len(nums)!= len(s):\n            return False\n        for i in range(len(nums)):\n            if nums[i]!= s[i]:\n                return False\n        return True",
      -3.25
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        return self.isSameTreeRecur(p, q, set(), set())\n\n    def isSameTreeRecur(self, p, q, s, t):\n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n\n        if p.val!= q.val:\n            return False\n\n        s.add(p.val)\n        t.add(q.val)\n\n        if self.isSameTreeRecur(p.left, q.left, s, t):\n            if self.isSameTreeRecur(p.right, q.right, s, t):\n                return True\n            else:\n                return False\n\n        else:\n            return False",
      -3.447265625
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isPalindrome(self, head, s):\n        if head is None:\n            return True\n        \n        # traverse list\n        cur = head\n        while cur is not None:\n            # move to next\n            cur = cur.next\n            # check if current node is the same as s\n            if cur.val!= s[::-1]:\n                return False\n        return True",
      -3.5
    ],
    [
      "def is_equal(l, s):\n    for item in l:\n        if item!= s:\n            return False\n    return True\n\nif __name__ == '__main__':\n    l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n    print is_equal(l, 'a')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abcdefghi')\n    print is_equal(l, 'abcdefghij')\n    print is_equal(l, 'abcd')\n    print is_equal(l, 'abcd')\n    print is_equal(l, 'abcd')\n    print is_equal(l, 'abcd')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(l, 'abc')\n    print is_equal(",
      -3.599609375
    ],
    [
      "# Write your code below.\ndef is_equal(a, b):\n    return a == b\n\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'b'))\n# print(is_equal('b', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a'))\n# print(is_equal('a', 'a",
      -3.626953125
    ],
    [
      "# https://leetcode.com/problems/check-if-a-given-string-is-anagram-of-a-given-list/discuss/81301/Python-TLE-Solution\n\nclass Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s)!= len(t):\n            return False\n        s_dict = {}\n        for ch in s:\n            if ch not in s_dict:\n                s_dict[ch] = 1\n            else:\n                s_dict[ch] += 1\n        t_dict = {}\n        for ch in t:\n            if ch not in t_dict:\n                t_dict[ch] = 1\n            else:\n                t_dict[ch] += 1\n        return s_dict == t_dict",
      -3.845703125
    ],
    [
      "from collections import defaultdict\n\n\ndef equal_items(items, target):\n    \"\"\"\n    :type items: List[str]\n    :type target: str\n    :rtype: bool\n    \"\"\"\n    def dfs(items, target):\n        if len(items) == 0:\n            return True\n        if len(items) == 1:\n            return items[0] == target\n        if target in items:\n            return True\n        return any(dfs(sub_items, target) for sub_items in items)\n\n    return dfs(items, target)\n\n\ndef test():\n    assert equal_items(['a', 'b', 'c'], 'a')\n    assert equal_items(['a', 'b', 'c'], 'c')\n    assert not equal_items(['a', 'b', 'c'], 'd')\n    assert not equal_items([], 'a')\n    assert not equal_items([], '')\n    assert equal_items([], 'a')\n    assert equal_items([], 'a')\n    assert not equal_items([], '')\n\n\nif __name__ == '__main__':\n    test()",
      -4.1015625
    ],
    [
      "# Write your code here\ndef is_equal(lst, s):\n    for i in lst:\n        if i!= s:\n            return False\n    return True\n\n# Your function should return True if all items of the list are equal to the given string,\n# otherwise it should return False.\n\n# Example 1:\n\n# Input: lst = [1,2,3], s = \"123\"\n# Output: True\n# Explanation: All items are equal to \"123\".\n\n# Example 2:\n\n# Input: lst = [1,2,3], s = \"112\"\n# Output: False\n# Explanation: The first item is not equal to \"112\".\n\n# Example 3:\n\n# Input: lst = [1,2,3], s = \"1\"\n# Output: False\n# Explanation: The first item is not equal to \"1\".\n\n# Example 4:\n\n# Input: lst = [1,2,3], s = \"10\"\n# Output: False\n# Explanation: The first item is not equal to \"10\".\n\n# Note:\n\n# The length of s is in the range [1, 100].\n# The length of lst is in the range [1, 100].\n# The length of s and lst is in the range [1, 10^4].\n# All items in lst are strings and s is a string.\n\nclass Solution(object):\n    def isOneEditDistance(self, lst, s):\n        \"\"\"\n        :type lst: List[str]\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(lst)!= len(s):\n            return False\n        for i in range(len(s)):\n            if lst[i]!= s[i]:\n                if i == 0:\n                    return False\n                else:\n                    return (lst[i-1] == s[i-1]) and self.isOneEditDistance(lst[i-1:], s[i:])\n        return True",
      -4.41796875
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isPalindrome(self, head):\n        if head == None:\n            return True\n        slow = head\n        fast = head\n        while fast.next!= None and fast.next.next!= None:\n            fast = fast.next.next\n            slow = slow.next\n        if fast.data!= s[::-1]:\n            return False\n        slow = head\n        fast = head\n        while fast.next!= None and fast.next.next!= None:\n            if slow.data!= s[::-1]:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True",
      -4.421875
    ],
    [
      "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isEqual(self, root, s):\n        \"\"\"\n        :type root: TreeNode\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return s == \"\"\n        if root.val!= s:\n            return False\n        return self.isEqual(root.left, s) and self.isEqual(root.right, s)\n\n    # @param root, a tree node\n    # @param s, a string\n    # @return a boolean\n    def isEqual(self, root, s):\n        if not root:\n            return s == \"\"\n        if root.val!= s:\n            return False\n        if root.left:\n            if not self.isEqual(root.left, s):\n                return False\n        if root.right:\n            if not self.isEqual(root.right, s):\n                return False\n        return True",
      -4.5234375
    ],
    [
      "class Solution:\n    # @param A list of integers\n    # @param s the given string\n    # @return a boolean\n    def isOneBST(self, A, s):\n        if len(A) == 0:\n            return False\n        if len(A) == 1:\n            return A[0] == s\n        if A[0] > A[1]:\n            return self.isOneBST(A[1:], s)\n        else:\n            return self.isOneBST(A[:len(A)-1], s) or self.isOneBST(A[1:], s)\n\nif __name__ == '__main__':\n    s = Solution()\n    A = [1,2,3,4]\n    print s.isOneBST(A, '1')\n    print s.isOneBST(A, '2')\n    print s.isOneBST(A, '2')\n    print s.isOneBST(A, '3')\n    print s.isOneBST(A, '3')\n    print s.isOneBST(A, '4')\n    print s.isOneBST(A, '4')\n    print s.isOneBST(A, '4')\n    print s.isOneBST(A, '4')\n    print s.isOneBST(A, '4')\n    print s.isOneBST(A, '4')\n    print s.isOneBST(A, '4')",
      -4.6484375
    ],
    [
      "# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution(object):\n    def isEquivalentTo(self, root, s):\n        \"\"\"\n        :type root: TreeNode\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return s == \"\"\n        if root.val == s:\n            return True\n        if s == \"\":\n            return False\n        if root.val < s[0]:\n            return False\n        if root.val > s[0]:\n            return self.isEquivalentTo(root.left, s)\n        if root.val == s[0]:\n            return self.isEquivalentTo(root.right, s[1:])\n        return self.isEquivalentTo(root.right, s)",
      -4.703125
    ],
    [
      "class Solution(object):\n    def isEquivalent(self, l1, s1, l2, s2):\n        \"\"\"\n        :type l1: List[int]\n        :type s1: str\n        :type l2: List[int]\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        if len(s1)!= len(s2):\n            return False\n        for i in xrange(len(s1)):\n            if s1[i]!= s2[i]:\n                return False\n        return True",
      -4.79296875
    ],
    [
      "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) == 0:\n            return True\n        if len(s) == 1:\n            return s[0] == s[-1]\n        start = 0\n        end = len(s) - 1\n        while start < end:\n            if s[start]!= s[end]:\n                return False\n            start += 1\n            end -= 1\n        return True",
      -4.8984375
    ],
    [
      "def is_equal(items, target):\n    if target == '':\n        return True\n    for item in items:\n        if item!= target:\n            return False\n    return True\n\n\ndef is_equal_2(items, target):\n    if target == '':\n        return True\n    for item in items:\n        if item!= target:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    items = [1, 2, 3, 4]\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_equal(items, '3'))\n    print(is_",
      -5.09765625
    ],
    [
      "def is_equal(items, target):\n    if len(items) == len(target):\n        for i in range(len(items)):\n            if items[i]!= target[i]:\n                return False\n        return True\n    else:\n        return False\n\ndef is_equal_str(items, target):\n    if len(items) == len(target):\n        for i in range(len(items)):\n            if items[i]!= target[i]:\n                return False\n        return True\n    else:\n        return False\n\n\ndef test_is_equal():\n    assert is_equal(['a','b','c','d','e'], 'abc')\n    assert is_equal(['a','b','c','d','e'], 'a')\n    assert is_equal(['a','b','c','d','e'], 'a')\n    assert is_equal(['a','b','c','d','e'], 'abcd')\n    assert is_equal(['a','b','c','d','e'], 'abcde')\n    assert not is_equal(['a','b','c','d','e'], 'abcdz')\n    assert not is_equal(['a','b','c','d','e'], 'abcdez')\n    assert not is_equal(['a','b','c','d','e'], 'abcde')\n    assert not is_equal(['a','b','c','d','e'], 'abcde')\n\ndef test_is_equal_str():\n    assert is_equal_str(['a','b','c','d','e'], 'abc')\n    assert is_equal_str(['a','b','c','d','e'], 'a')\n    assert is_equal_str(['a','b','c','d','e'], 'a')\n    assert is_equal_str(['a','b','c','d','e'], 'abcd')\n    assert is_equal_str(['a','b','c','d','e'], 'abcde')\n    assert not is_equal_str(['a','b','c','d','e'], 'abcdz')\n    assert not is_",
      -5.16015625
    ],
    [
      "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return self.isPalindrome1(s) and self.isPalindrome2(s)\n\n    def isPalindrome1(self, s):\n        return s == s[::-1]\n\n    def isPalindrome2(self, s):\n        return s[0] == s[-1] and self.isPalindrome1(s[1:-1])\n\n\nif __name__ == \"__main__\":\n    print Solution().isPalindrome(\"aab\")\n    print Solution().isPalindrome(\"abccba\")",
      -5.1953125
    ],
    [
      "class Solution:\n    \"\"\"\n    @param a: List of integers\n    @param s: an integer\n    @return: True if s is a substring of a, otherwise False\n    \"\"\"\n    def isSubstring(self, a, s):\n        if not a:\n            return False\n        \n        start = 0\n        while start < len(a):\n            if a[start]!= s:\n                start += 1\n                continue\n            \n            end = start + 1\n            while end < len(a):\n                if a[end]!= s:\n                    end += 1\n                    continue\n                \n                if end - start!= len(s):\n                    return False\n                \n                start = end + 1\n                end = start + 1\n            \n            return True\n        \n        return False",
      -5.37890625
    ],
    [
      "def all_equal(list, s):\n    return all(x == s for x in list)\n\n# print(all_equal([1, 2, 3], 'abc'))\n# print(all_equal([1, 2, 3], '123'))\n# print(all_equal([1, 2, 3], '12'))\n# print(all_equal([1, 2, 3], '1'))\n\n\"\"\"\nApproach #1: Recursive\nComplexity Analysis\nTime Complexity: O(n^2), where n is the length of the input list.\nSpace Complexity: O(n)\n\nTime Complexity: O(n^2), where n is the length of the input list.\nSpace Complexity: O(n)\n\nApproach #2: Iterative\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the input list.\nSpace Complexity: O(1)\n\"\"\"\n\ndef all_equal_iterative(list, s):\n    if len(list) < 1:\n        return True\n\n    return all(x == s for x in list)\n\n\"\"\"\nApproach #2: Recursive\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the input list.\nSpace Complexity: O(n)\n\nTime Complexity: O(n), where n is the length of the input list.\nSpace Complexity: O(1)\n\"\"\"\n\ndef all_equal_recursive(list, s):\n    if len(list) < 1:\n        return True\n\n    if s not in list:\n        return False\n\n    return all(x == s for x in list)\n\n\"\"\"\nApproach #3: Dynamic Programming\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the input list.\nSpace Complexity: O(n)\n\nTime Complexity: O(n), where n is the length of the input list.\nSpace Complexity: O(1)\n\"\"\"\n\ndef all_equal_dynamic_programming(list, s):\n    if len(list) < 1:\n        return True\n\n    dp = [[False for x in range(len(list))] for x in range",
      -5.40234375
    ],
    [
      "class Solution:\n    def isListBST(self, head: List[int]) -> bool:\n        if not head:\n            return True\n\n        # Check whether all elements are greater or equal to the given element.\n        # If not, the list is not a BST.\n        # If yes, return true.\n        return self.checkBST(head, 0, len(head) - 1)\n\n    def checkBST(self, head, low, high):\n        if low == high:\n            return head[low] == 0\n        else:\n            mid = (low + high) / 2\n            return self.checkBST(head, low, mid) and self.checkBST(head, mid + 1, high)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n\n    head = [1, 2, 3, 4, 5]\n    print(sol.isListBST(head))\n\n    head = [3, 1, 4, 2, 5]\n    print(sol.isListBST(head))\n\n    head = [1]\n    print(sol.isListBST(head))\n\n    head = [1, 2]\n    print(sol.isListBST(head))",
      -5.5390625
    ],
    [
      "def equal(s):\n    if len(s)!= len(list):\n        return False\n    for i in range(len(s)):\n        if s[i]!= list[i]:\n            return False\n    return True\n\ndef check(list,s):\n    if len(list) == 0:\n        return False\n    if len(s) == 0:\n        return False\n    if equal(s):\n        return check(list[1:],s[1:])\n    else:\n        return check(list[1:],s[1:]) or check(list[:-1],s[:-1])\n\nprint check([1,2,3,4,5,6,7,8,9], \"9\")",
      -5.59765625
    ],
    [
      "# https://leetcode.com/problems/equal-list-items/discuss/71729/Python-Code-with-explanation\n\nclass Solution:\n    # @param head, a list node\n    # @param s, a string\n    # @return a boolean\n    def isEqualList(self, head, s):\n        if not head: return False\n        if head.val!= s: return False\n        return self.isEqualList(head.next, s)\n\n    def isEqualList(self, head, s):\n        if not head: return False\n        if head.val!= s: return False\n        return self.isEqualList(head.next, s) or self.isEqualList(head.next.next, s)\n\n    def isEqualList(self, head, s):\n        if not head: return False\n        if head.val!= s: return False\n        return self.isEqualList(head.next, s) or self.isEqualList(head.next.next, s) or self.isEqualList(head.next.next.next, s)",
      -5.7421875
    ],
    [
      "import sys\n\n# https://oj.leetcode.com/problems/check-if-a-linked-list-is-cyclic/discuss/94738/Python-DP-solution\nclass Solution(object):\n    def isCyclic(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head or not head.next:\n            return False\n\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        else:\n            return False\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow == fast\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.isCyclic(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(1)))))))))))\n    print s.isCyclic(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(1, ListNode(2))))))))))))\n    print s.isCyclic(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(1, ListNode(2, ListNode(3))))))))))))),\n    print s.isCyclic(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(1)))))))))))\n    print s.isCyclic(ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(",
      -6.52734375
    ],
    [
      "class Solution(object):\n    def isListEquals(self, head, s):\n        \"\"\"\n        :type head: ListNode\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n        if head.val!= s:\n            return False\n        res = False\n        while head is not None:\n            if head.val!= s:\n                return False\n            res = True\n            head = head.next\n        return res\n\n    def isListEquals2(self, head, s):\n        \"\"\"\n        :type head: ListNode\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n        if head.val!= s:\n            return False\n        res = False\n        cur = head\n        while cur is not None:\n            if cur.val!= s:\n                return False\n            res = True\n            cur = cur.next\n        return res",
      -6.765625
    ],
    [
      "import re\n\n# Your Solution here.\n\ndef is_sorted(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: bool\n    \"\"\"\n    return sorted(lst) == lst\n\ndef is_equal(lst, target):\n    \"\"\"\n    :type lst: List[int]\n    :type target: str\n    :rtype: bool\n    \"\"\"\n    return all(map(lambda x: x == target, lst))\n\nif __name__ == '__main__':\n    assert is_equal([1, 2, 3, 4, 5], '12345')\n    assert not is_equal([1, 2, 3, 4, 5], '12345')\n    assert is_equal([1, 2, 3, 4, 5], '12345')\n    assert not is_equal([1, 2, 3, 4, 5], '1234')\n    assert not is_equal([1, 2, 3, 4, 5], '1234')\n    assert not is_equal([1, 2, 3, 4, 5], '123')",
      -6.76953125
    ],
    [
      "class Solution:\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x % 10 == 0:\n            return self.isPalindrome(x // 10)\n        if x % 10 == 1:\n            return self.isPalindrome(x // 10) and x % 10 == x // 10\n        if x % 10 == 5:\n            return self.isPalindrome(x // 10) and x % 10 == x // 10 and self.isPalindrome(x // 10 + 1)\n        return self.isPalindrome(x // 10) and self.isPalindrome(x // 10 + 1)\n\n\nif __name__ == '__main__':\n    print(Solution().isPalindrome(-1))",
      -6.9921875
    ],
    [
      "# https://leetcode.com/problems/equal-strings/discuss/93370/Python-DP-O(N)\n\nclass Solution(object):\n    def isEqual(self, s, strs):\n        \"\"\"\n        :type s: str\n        :type strs: List[str]\n        :rtype: bool\n        \"\"\"\n        if len(s)!= len(strs):\n            return False\n        dp = [[False for _ in xrange(len(strs))] for _ in xrange(len(s))]\n        for i in xrange(len(s)):\n            if s[i] in strs:\n                for j in xrange(len(strs)):\n                    if s[i]!= strs[j]:\n                        dp[i][j] = False\n        return all(dp)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.isEqual('', [])\n    assert not s.isEqual('a', [])\n    assert s.isEqual('abc', ['abc', 'a', 'b', 'c'])\n    assert not s.isEqual('abc', ['a', 'b', 'c'])\n    assert not s.isEqual('abc', ['a', 'b', 'c', 'd'])\n    assert s.isEqual('abc', ['a', 'a', 'a'])\n    assert s.isEqual('a', ['a', 'a', 'a'])",
      -7.140625
    ],
    [
      "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        # Use a dummy head to store the result.\n        prev = None\n        # Loop through all the nodes.\n        while head:\n            # Move the head to the next node.\n            head = head.next\n            # If the next node is not None, then we have to move the head to the next node.\n            if head:\n                # Move the head to the next node.\n                head = head.next\n                # If the next node is not None, then we have to move the head to the next node.\n                if head:\n                    # Move the head to the next node.\n                    head = head.next\n                    # If the next node is not None, then we have to move the head to the next node.\n                    if head:\n                        # Move the head to the next node.\n                        head = head.next\n                        # If the next node is not None, then we have to move the head to the next node.\n                        if head:\n                            # Move the head to the next node.\n                            head = head.next\n                            # If the next node is not None, then we have to move the head to the next node.\n                            if head:\n                                # Move the head to the next node.\n                                head = head.next\n                                # If the next node is not None, then we have to move the head to the next node.\n                                if head:\n                                    # Move the head to the next node.\n                                    head = head.next\n                                    # If the next node is not None, then we have to move the head to the next node.\n                                    if head:\n                                        # Move the head to the next node.\n                                        head = head.next\n                                        # If the next node is not None, then we have to move the head to the next node.\n                                        if head:\n                                            # Move the head to the next node.",
      -7.52734375
    ],
    [
      "# Approach 1: Brute Force\n# Brute Force - Check if all the items in the list are equal to the given string\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef is_equal(a, b):\n    if a == b:\n        return True\n    else:\n        return False\n\n# Approach 2: Two pointers\n# Brute Force - Check if all the items in the list are equal to the given string\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef is_equal2(a, b):\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\n# Approach 3: Two pointers\n# Brute Force - Check if all the items in the list are equal to the given string\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef is_equal3(a, b):\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\n# Approach 4: Two pointers\n# Brute Force - Check if all the items in the list are equal to the given string\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef is_equal4(a, b):\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\n# Approach 5: Two pointers\n# Brute Force - Check if all the items in the list are equal to the given string\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef is_equal5(a, b):\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\n# Approach 6: Two pointers\n# Brute Force - Check if all the items in the list are equal to the given string\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef is_equal6(a, b):\n    for i in range(len(a)):\n        if a[i]!= b[i]:",
      -7.8125
    ],
    [
      "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if len(s) < 1:\n            return True\n\n        # reverse s\n        s = s[::-1]\n\n        # split into two parts, first part and last part\n        # if the last part is equal to s, it is palindrome\n        # if the last part is not equal to s, it is not palindrome\n        # if the first part is not equal to s, it is not palindrome\n        first_part = s[:len(s)/2]\n        last_part = s[len(s)/2:]\n\n        # reverse last part\n        last_part = last_part[::-1]\n\n        # check the first part\n        if first_part!= s:\n            return False\n\n        # check the last part\n        if last_part!= s:\n            return False\n\n        # check the middle part\n        return self.isPalindrome(s[len(s)/2:])\n\nif __name__ == '__main__':\n    assert Solution().isPalindrome('a') == True\n    assert Solution().isPalindrome('a') == True\n    assert Solution().isPalindrome('aa') == True\n    assert Solution().isPalindrome('aa') == True\n    assert Solution().isPalindrome('ab') == False\n    assert Solution().isPalindrome('abb') == True\n    assert Solution().isPalindrome('ababb') == False\n    assert Solution().isPalindrome('abbabb') == True",
      -8.15625
    ],
    [
      "def all_items_equal(str_to_check, list_to_check):\n    \"\"\"\n    Check whether all items of a list are equal to a given string.\n    :param str_to_check: the string to check against.\n    :param list_to_check: the list to check.\n    :return: True or False.\n    \"\"\"\n    if len(list_to_check)!= len(str_to_check):\n        return False\n    for i in range(len(list_to_check)):\n        if list_to_check[i]!= str_to_check[i]:\n            return False\n    return True\n\n# Test Cases\n\nprint all_items_equal('cat', ['cat', 'dog', 'cat', 'cat'])\nprint all_items_equal('cat', ['cat', 'dog'])\nprint all_items_equal('cat', ['cat', 'cat', 'cat'])\nprint all_items_equal('cat', ['cat', 'cat', 'cat', 'cat'])\nprint all_items_equal('cat', ['cat', 'cat', 'cat', 'dog'])\nprint all_items_equal('cat', ['cat', 'dog', 'cat'])\nprint all_items_equal('cat', ['cat', 'dog', 'cat', 'cat'])\nprint all_items_equal('cat', ['cat', 'dog', 'cat', 'dog'])\nprint all_items_equal('cat', ['cat', 'dog', 'cat', 'dog', 'cat'])\nprint all_items_equal('cat', ['cat', 'dog', 'cat', 'dog', 'dog'])\nprint all_items_equal('cat', ['cat', 'dog', 'cat', 'dog', 'dog', 'cat'])\nprint all_items_equal('cat', ['cat', 'dog', 'cat', 'dog', 'dog', 'dog', 'cat'])\nprint all_items_equal('cat', ['cat', 'dog', 'cat', 'dog', 'dog', 'dog', 'dog', 'cat'])\nprint all_items_equal('cat', ['cat', 'dog', 'cat', 'dog', 'dog', 'dog', 'dog', 'dog', 'cat",
      -8.234375
    ],
    [
      "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: str\n        :rtype: bool\n        \"\"\"\n        if len(x) == 0:\n            return True\n\n        x = x[::-1]\n        if x[0] == x[-1]:\n            return self.isPalindrome(x[1:-1])\n\n        return False\n\n\nif __name__ == \"__main__\":\n    assert Solution().isPalindrome(\"A man, a plan, a canal: Panama\") == False\n    assert Solution().isPalindrome(\"A man, a plan, a canal: Panama\") == True\n    assert Solution().isPalindrome(\"AB\") == True\n    assert Solution().isPalindrome(\"AB\") == True\n    assert Solution().isPalindrome(\"AB\") == True\n    assert Solution().isPalindrome(\"AB\") == True\n    assert Solution().isPalindrome(\"AB\") == True\n    assert Solution().isPalindrome(\"AB\") == True",
      -8.4296875
    ],
    [
      "# Time:  O(n)\n# Space: O(n)\n\nclass Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return True\n        s = s.lower()\n        s = [c for c in s if c!='']\n        s = [c for c in s if c!= '\\'']\n        s = [c for c in s if c!= ',']\n        s = [c for c in s if c!= '.']\n        s = [c for c in s if c!= ';']\n        s = [c for c in s if c!= ':']\n        s = [c for c in s if c!= '(']\n        s = [c for c in s if c!= ')']\n        s = [c for c in s if c!= '[']\n        s = [c for c in s if c!= ']']\n        s = [c for c in s if c!= '{' and c!= '}']\n        s = [c for c in s if c!= '<' and c!= '>']\n        s = [c for c in s if c!= '?']\n        s = [c for c in s if c!= '+' and c!= '-' and c!= '*' and c!= '/']\n        s = [c for c in s if c!= '%']\n        s = [c for c in s if c!= '&']\n        s = [c for c in s if c!= '|']\n        s = [c for c in s if c!= '^']\n        s = [c for c in s if c!= '~']\n        s = [c for c in s if c!= '!']\n        s = [c for c in s if c!= ',']\n        s = [c for c in s if c!= '(']\n        s = [c for c in s if c!= ')']\n        s = [c for c in s if c!= '*' and c!= '/']\n        s = [c for c in s if c!= ';']\n        s = [",
      -10.8515625
    ],
    [
      "# https://leetcode.com/problems/check-if-a-list-is-sorted/discuss/129517/Python-solution-using-only-one-pass-and-two-pass-sorting\n# https://leetcode.com/problems/check-if-a-list-is-sorted/discuss/129517/Python-solution-using-only-one-pass-and-two-pass-sorting\n\nclass Solution(object):\n    def is_sorted(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head or not head.next:\n            return True\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            if fast.val < slow.val:\n                slow = slow.next\n            fast = fast.next.next\n        return slow.val == head.val\n\n    def isSorted(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head or not head.next:\n            return True\n        if not self.is_sorted(head.next):\n            return False\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            if fast.val > slow.val:\n                slow = slow.next\n            fast = fast.next.next\n        return slow.val == head.val",
      -11.0703125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        slow = head\n        fast = head\n        while slow.next and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if not slow.next and not fast.next:\n            return True\n        if slow.val!= fast.val:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next\n            slow = slow.next\n            fast = fast.next\n        return slow.val == fast.val",
      -11.34375
    ],
    [
      "class Solution:\n    # @param {ListNode} head\n    # @param {string} s\n    # @return {boolean}\n    def isEqualList(self, head, s):\n        if not head:\n            return True\n        if head.val!= s:\n            return False\n        if not head.next:\n            return True\n        return self.isEqualList(head.next, s)\n\nif __name__ == '__main__':\n    n1 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9)))))))));\n    n2 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(10))))))))));\n    n3 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(10, ListNode(11)))))))))));\n    n4 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(10, ListNode(11, ListNode(12))))))))))));\n    n5 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(10, ListNode(11, ListNode(12, ListNode(13))))))))))));\n    n6 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5, ListNode(6, ListNode(7, ListNode(8, ListNode(9, ListNode(10, ListNode(11, ListNode(12, ListNode(13, ListNode(14))))))))))));\n    n7 = ListNode(1, ListNode",
      -11.359375
    ],
    [
      "#!/usr/bin/env python\n\n# https://oj.leetcode.com/problems/equal-linked-list-characters/\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return True\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next\n        while fast:\n            if fast.val!= slow.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        return True",
      -12.125
    ],
    [
      "# https://www.hackerrank.com/challenges/equal-lists/problem\n\n# Test Cases\n# [\"a\", \"b\", \"c\"]\n# [\"c\", \"a\", \"b\"]\n# [\"c\", \"c\", \"a\"]\n# [\"a\", \"b\", \"a\"]\n# [\"c\", \"b\", \"a\"]\n# [\"a\", \"a\", \"a\"]\n# [\"a\", \"b\", \"b\"]\n\n# Input\n# [\"a\", \"b\", \"c\"]\n# [\"c\", \"a\", \"b\"]\n# [\"c\", \"c\", \"a\"]\n# [\"a\", \"b\", \"a\"]\n# [\"c\", \"b\", \"a\"]\n# [\"a\", \"a\", \"a\"]\n# [\"a\", \"b\", \"b\"]\n\n# Output\n# true\n# false\n# false\n# true\n# false\n# false\n# true\n\n# Example\n# Input:\n# [\"a\", \"b\", \"c\"]\n# [\"c\", \"a\", \"b\"]\n# [\"c\", \"c\", \"a\"]\n# [\"a\", \"b\", \"a\"]\n# [\"c\", \"b\", \"a\"]\n# [\"a\", \"a\", \"a\"]\n# [\"a\", \"b\", \"b\"]\n\n# Output:\n# true\n# false\n# false\n# true\n# false\n# false\n# true\n\n# Note:\n# All the given lists will be sorted in non-decreasing order.\n\nimport sys\n\ndef is_equal(arr, s):\n    if len(arr)!= len(s):\n        return False\n    for i in range(len(arr)):\n        if arr[i]!= s[i]:\n            return False\n    return True\n\ndef equal_lists(arr, s):\n    if not arr or not s:\n        return False\n    if len(arr) == 1:\n        return is_equal(arr, s)\n    if len(arr) == 2:\n        return is_equal(arr, s) and is_equal(arr[1], s[1])\n    if arr[0] == s[0]:\n        return equal_lists(arr[1:], s[1:])",
      -12.390625
    ],
    [
      "# https://leetcode.com/problems/check-whether-a-string-is-anagram/discuss/264799/Python-solution-in-1-line-with-explanation\n# Using two pointers to iterate through the list.\ndef isAnagram(s, t):\n    s = list(s)\n    t = list(t)\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            return False\n    return True\n\n# https://leetcode.com/problems/check-whether-a-string-is-anagram/discuss/264799/Python-solution-in-2-lines-with-explanation\n# The solution is in-place.\n# https://leetcode.com/problems/check-whether-a-string-is-anagram/discuss/264799/Python-solution-in-2-lines-with-explanation\n# Using a separate list to hold the chars of the two strings.\ndef isAnagram2(s, t):\n    s = list(s)\n    t = list(t)\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return False\n    return True\n\n# https://leetcode.com/problems/check-whether-a-string-is-anagram/discuss/264799/Python-solution-in-1-line-with-explanation\n# The solution is a two-pass algorithm.\ndef isAnagram3(s, t):\n    s = list(s)\n    t = list(t)\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return False\n    return True",
      -12.8359375
    ],
    [
      "# https://leetcode.com/problems/check-if-all-elements-in-a-sorted-and-unique-array-are-equal/\n\n# Definition for a  binary tree node\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param {TreeNode} root\n    # @param {string} s\n    # @return {boolean}\n    def isSameTree(self, root, s):\n        if root is None:\n            return False\n        if root.val!= s[0]:\n            return False\n        return self.isSameTree(root.left, s[1:]) and self.isSameTree(root.right, s[1:])\n\nif __name__ == \"__main__\":\n    s = Solution()\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print s.isSameTree(root, \"abc\")\n    print s.isSameTree(root, \"aabbcc\")",
      -12.953125
    ],
    [
      "# -*- coding: utf-8 -*-\n# @Author: Gillett Hernandez\n# @Date:   2017-08-01 10:00:00\n# @Last Modified by:   Gillett Hernandez\n# @Last Modified time: 2017-08-01 10:01:00\n\n# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def isOneBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def helper(root):\n            if root is None:\n                return True\n            if root.left is None and root.right is None:\n                return root.val == 1\n            return helper(root.left) and helper(root.right)\n        return helper(root)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    # print(sol.isOneBST(None))\n    print(sol.isOneBST(TreeNode(1, None, None)))\n    print(sol.isOneBST(TreeNode(1, TreeNode(2, None, None), None)))\n    print(sol.isOneBST(TreeNode(1, TreeNode(2, TreeNode(3, None, None), None), None)))\n    print(sol.isOneBST(TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4, None, None), None), None), None)))\n    print(sol.isOneBST(TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4, TreeNode(5, None, None), None), None), None), None)))\n    print(sol.isOneBST(TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4, TreeNode(5, TreeNode(6, None, None), None), None), None), None), None)))\n    print(sol.isOneBST(TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4, TreeNode(5, TreeNode(6, TreeNode(7, None, None), None), None), None), None), None), None)))\n    print(sol.",
      -13.203125
    ],
    [
      "# Your Solution\n\nclass Solution:\n    # @param {string} s\n    # @param {ListNode} head\n    # @return {boolean}\n    def isPalindrome(self, s, head):\n        if not head:\n            return True\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if s == slow.val:\n            slow = head\n            while slow:\n                if slow.val!= s:\n                    return False\n                slow = slow.next\n            return True\n        else:\n            return self.isPalindrome(s, head)\n\n\nif __name__ == \"__main__\":\n    assert Solution().isPalindrome(\"abcd\", None) is True\n    assert Solution().isPalindrome(\"a\", None) is True\n    assert Solution().isPalindrome(\"aa\", None) is False\n    assert Solution().isPalindrome(\"aa\", None) is True\n    assert Solution().isPalindrome(\"aa\", None) is False\n    assert Solution().isPalindrome(\"aa\", None) is True\n    assert Solution().isPalindrome(\"aa\", None) is False",
      -14.84375
    ],
    [
      "# https://leetcode.com/problems/check-list-for-duplicates/\n# Use a hash table to keep track of the hash of each string\n# for each character in the string\n# if the hash is equal to the string, then the string is equal to the list\n# the hash table is used to check if a string is in the list\n# if so, return false\n\nclass Solution(object):\n    def isUnique(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if s == '':\n            return True\n        h = {}\n        for c in s:\n            h[c] = h.get(c, 0) + 1\n        for i in range(len(s)):\n            if h[s[i]]!= 1:\n                return False\n        return True\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.isUnique('abcabc')\n    print s.isUnique('aaabc')\n    print s.isUnique('aaabc')\n    print s.isUnique('abc')",
      -15.890625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}