{
  "problem": {
    "task_id": "MBPP/73",
    "prompt": "Write a function to split the given string with multiple delimiters by using regex.",
    "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
    "test_list": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ],
    "challenge_test_list": [],
    "problem_id": 62
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import re\nimport unittest\n\n\nclass Solution(object):\n    def split(self, s, re_pattern):\n        \"\"\"\n        :type s: str\n        :type re_pattern: str\n        :rtype: List[str]\n        \"\"\"\n        return re.split(re_pattern, s)\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\nThe following is the solution for the question.\n\n# 11ms 88.52%\nclass Solution {\n    public List<String> split(String s, String re) {\n        List<String> result = new ArrayList<>();\n        int start = 0;\n        while (start < s.length()) {\n            int end = s.indexOf(re, start);\n            if (end < 0) {\n                result.add(s.substring(start));\n                break;\n            }\n            result.add(s.substring(start, end));\n            start = end + 1;\n        }\n        return result;\n    }\n}\n'''",
      4.234375
    ],
    [
      "from collections import defaultdict\nimport re\n\n\ndef split_string(string, delimiters):\n    \"\"\"\n    Split a string by delimiters.\n    :param string: the string to be split\n    :param delimiters: the delimiters\n    :return: a list of strings\n    \"\"\"\n    pattern = re.compile('|'.join(delimiters))\n    return pattern.split(string)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    s = 'a,b,c,d,e'\n    delimiters = ','\n    print(split_string(s, delimiters))\n    s = 'a,b,c,d,e,'\n    delimiters = ','\n    print(split_string(s, delimiters))\n    s = 'a,b,c,d,e,'\n    delimiters = ','\n    print(split_string(s, delimiters))\n    s = 'a,b,c,d,e,'\n    delimiters = ','\n    print(split_string(s, delimiters))\n    s = 'a,b,c,d,e,'\n    delimiters = ','\n    print(split_string(s, delimiters))\n    s = 'a,b,c,d,e,'\n    delimiters = ','\n    print(split_string(s, delimiters))\n\n\nif __name__ == '__main__':\n    main()",
      2.908203125
    ],
    [
      "# https://www.hackerrank.com/challenges/regex-repetition/problem\n\nimport re\n\ndef split_string(s, delimiter_regex):\n    return re.split(delimiter_regex, s)\n\n# Complete the function below.\ndef split_string(s, delimiter_regex):\n    # Complete this function\n    return re.split(delimiter_regex, s)\n\n\nif __name__ == '__main__':\n    s = input()\n    delimiter_regex = re.compile(r'[\\s\\(\\),;:]')\n    print(split_string(s, delimiter_regex))",
      2.291015625
    ],
    [
      "import re\n\ndef split_string(s, delimiters):\n    \"\"\"\n    :type s: str\n    :type delimiters: str\n    :rtype: list[str]\n    \"\"\"\n    return re.split(delimiters, s)\n\n# Your SplitString solution here.\ndef split_string_test():\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert split_string(\"a,b,c\", \",\") ==",
      1.94921875
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiter):\n        \"\"\"\n        :type s: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        pattern = re.compile(r'(' + delimiter + '|' + delimiter + ')*')\n        return pattern.split(s)",
      1.443359375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def splitString(self, str: str, delimiter: str) -> List[str]:\n        \"\"\"\n        :type str: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        if not str:\n            return []\n\n        str = str.split(delimiter)\n        return [x for x in str if x]",
      1.2666015625
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        return re.split(delimiters, s)\n\n    def split2(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        return [x for x in s.split(delimiters) if x]\n\n# Note:\n#    use regex\n#    split with regex\n#    use split function",
      1.0673828125
    ],
    [
      "import re\n\ndef split_string(s, delimiters):\n    splits = re.split(delimiters, s)\n    return splits\n\ndef main():\n    s = 'abc,def,ghi,jkl,mno'\n    print split_string(s, ',')\n\nif __name__ == \"__main__\":\n    main()",
      0.7978515625
    ],
    [
      "class Solution(object):\n    def split(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        return [s[i:i + len(delim)] for i in range(0, len(s) - len(delim) + 1, len(delim))]",
      0.41650390625
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param delimiters, a string of delimiters\n    # @return a list of strings\n    def split(self, s, delimiters):\n        if not s or not delimiters:\n            return []\n        res = []\n        pre, cur = '', s\n        while cur:\n            m = re.search(delimiters, cur)\n            if m:\n                res.append(pre + cur[:m.start()])\n                pre, cur = cur[:m.start()], cur[m.end():]\n            else:\n                res.append(pre + cur)\n                pre, cur = '', ''\n        return res\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.split('a,b,c', ','))\n    print(s.split('a,b,c', ';'))\n    print(s.split('a,b,c', ';,'))",
      0.096923828125
    ],
    [
      "import re\n\n\ndef split_string(s, delimiter=\" \"):\n    pattern = re.compile(delimiter)\n    return pattern.split(s)\n\n\nif __name__ == '__main__':\n    print(split_string(\"abcd\"))\n    print(split_string(\"aabbcd\", \" \"))\n    print(split_string(\"aabbcd\", \"ab\"))",
      0.03521728515625
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @param {string} delimiters\n    # @return {string[]}\n    def split(self, s, delimiters):\n        if not delimiters:\n            return [s]\n        result = []\n        while s:\n            m = s.find(delimiters)\n            if m < 0:\n                result.append(s)\n                break\n            result.append(s[:m])\n            s = s[m + 1:]\n        return result",
      0.01116180419921875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param d, a string\n    # @return a list of strings\n    def split(self, s, d):\n        res = []\n        m = re.match(r'(.+?)' + d + '$', s)\n        if m:\n            res = m.groups()\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    s = 'hello world'\n    print s.split(s,'')",
      -0.1925048828125
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param d, a string\n    # @return a list of strings\n    def split(self, s, d):\n        r = []\n        p = 0\n        while p < len(s):\n            m = s.find(d, p)\n            if m < 0:\n                r.append(s[p:])\n                p = len(s)\n            else:\n                r.append(s[p:m])\n                p = m + 1\n        return r\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.split(\"a,b,c,d\", \",\"))\n    print(s.split(\"a,b,c,d\", \" \"))",
      -0.35595703125
    ],
    [
      "class Solution(object):\n    def splitByRegex(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        return [s.split(sep) for s in s.split(' ')]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.splitByRegex('hello world',''))\n    print(sol.splitByRegex('hello world',''))\n    print(sol.splitByRegex('hello world',''))",
      -0.5947265625
    ],
    [
      "# pylint: disable=missing-docstring\n\nimport re\n\n# Complete the splitRegex function below.\ndef splitRegex(s, delimiter):\n    # Write your code here.\n    return re.split(delimiter, s)\n\n\nif __name__ == \"__main__\":\n    s = \"hello, world! this is a test\"\n    print(splitRegex(s, \" \"))\n    print(splitRegex(s, \"!\"))",
      -0.65087890625
    ],
    [
      "import re\n\ndef split_string_with_multiple_delimiter(string, delimiter):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    :type string: str\n    :type delimiter: str\n    :rtype: List[str]\n    \"\"\"\n    regex = re.compile(r\"(\\w+)(\\W+)(\\w+)\")\n    return regex.findall(string)\n\nif __name__ == \"__main__\":\n    print split_string_with_multiple_delimiter(\"aabbccdd\", \"abc\")\n    print split_string_with_multiple_delimiter(\"aabbccdd\", \"a\")\n    print split_string_with_multiple_delimiter(\"aabbccdd\", \"aabb\")\n    print split_string_with_multiple_delimiter(\"aabbccdd\", \"aabbcc\")",
      -0.65478515625
    ],
    [
      "def split_string(str_to_split, split_delimiter):\n    return str_to_split.split(split_delimiter)\n\nif __name__ == \"__main__\":\n    test_input = \"Hello,World!\"\n    test_output = split_string(test_input, \" \")\n    assert test_output == ['Hello,', 'World!'], \"The given string is not splitted with multiple delimiters.\"\n\n    test_input = \"Hello,World!\"\n    test_output = split_string(test_input, \",\")\n    assert test_output == ['Hello,', 'World!'], \"The given string is not splitted with multiple delimiters.\"\n\n    test_input = \"Hello,World!\"\n    test_output = split_string(test_input, \"!\")\n    assert test_output == ['Hello,World!'], \"The given string is not splitted with multiple delimiters.\"\n\n    test_input = \"Hello,World!\"\n    test_output = split_string(test_input, \"!\")\n    assert test_output == ['Hello,World!'], \"The given string is not splitted with multiple delimiters.\"",
      -0.74267578125
    ],
    [
      "import re\n\ns = \"a,b,c\"\n\ndef split(s, delim):\n    return re.split(delim, s)\n\nprint(split(s, ', '))\nprint(split(s, ','))\nprint(split(s,''))\nprint(split(s, '\\s+'))\nprint(split(s, '\\t'))\nprint(split(s, '\\n'))\nprint(split(s, '\\r'))\nprint(split(s, '\\r\\n'))\nprint(split(s, '\\r\\n\\r\\n'))\nprint(split(s, '\\r\\n\\r\\n\\r\\n'))",
      -0.77880859375
    ],
    [
      "import re\n\ndef split_string(s, delimiter_re):\n    if isinstance(delimiter_re, str):\n        delimiter_re = re.compile(delimiter_re)\n    result = []\n    for i in range(0, len(s)):\n        if delimiter_re.match(s[i:]):\n            result.append(s[:i])\n            break\n    return result",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def split(self, s, sep):\n        if not sep:\n            return [s]\n        regex = re.compile(sep)\n        return regex.split(s)",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param d, a string\n    # @return a list of strings\n    def split(self, s, d):\n        return s.split(d)\n\nif __name__ == \"__main__\":\n    s = \"hello,world\"\n    d = \",\"\n    print Solution().split(s, d)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        return [x for x in s.split(delimiters) if x]\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.split('a,b,c', ',')\n    print sol.split('a,b,c', ',')\n    print sol.split('a,b,c', ',')\n    print sol.split('a,b,c', ',')\n    print sol.split('a,b,c', ',')",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def splitByRegex(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        regex = re.compile(sep)\n        return regex.split(s)",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiter):\n        \"\"\"\n        :type s: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        if not s: return []\n        return [item for item in s.split(delimiter) if item]",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def split(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i + len(delim)] for i in range(0, len(s), len(delim))]",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param delimiters, a string of delimiters\n    # @return a list of strings\n    def split(self, s, delimiters):\n        return [s[i:i + len(delimiters)] for i in range(0, len(s) - len(delimiters) + 1, len(delimiters))]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.split('a,b,c', ','))\n    print(s.split('a,b,c', ','))\n    print(s.split('a,b,c', ','))\n    print(s.split('a,b,c', ','))\n    print(s.split('a,b,c', ','))\n    print(s.split('a,b,c', ','))\n    print(s.split('a,b,c', ','))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def splitString(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        while s:\n            i = s.find(sep)\n            if i == -1:\n                res.append(s)\n                break\n            res.append(s[:i])\n            s = s[i + len(sep):]\n        return res",
      -0.85693359375
    ],
    [
      "def split_string_with_regex(s, delimiters):\n    \"\"\"\n    :type s: str\n    :type delimiters: str\n    :rtype: List[str]\n    \"\"\"\n    splitter = re.compile(delimiters)\n    return [s.strip() for s in splitter.split(s) if s.strip()]",
      -0.85693359375
    ],
    [
      "import re\n\ndef split_string(s):\n    splits = re.split('[^a-zA-Z0-9]+', s)\n    return splits\n\nprint split_string('hello world')\nprint split_string('hello world')\nprint split_string('hello world')",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        return [x for x in s.split(sep) if x]",
      -0.85791015625
    ],
    [
      "import re\n\n\ndef split_string(s, delimiters):\n    \"\"\"\n    :type s: str\n    :type delimiters: str\n    :rtype: List[str]\n    \"\"\"\n    splits = re.split(delimiters, s)\n    return splits\n\n\nclass Solution(object):\n    def split(self, s, delimiter):\n        \"\"\"\n        :type s: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        return split_string(s, delimiter)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.split('hello, world',''))",
      -0.85791015625
    ],
    [
      "import re\n\ndef split_string(s, delimiter):\n    return re.split(delimiter, s)\n\nif __name__ == '__main__':\n    print split_string('hello, world', ',')\n    print split_string('hello, world','')\n    print split_string('hello, world', '\\t')\n    print split_string('hello, world', '\\n')\n    print split_string('hello, world', '\\r')",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        sep_re = re.compile(sep)\n        return sep_re.split(s)\n\nif __name__ == \"__main__\":\n    print Solution().split('a,b,c', ',')",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def splitString(self, s, delimiter):\n        \"\"\"\n        :type s: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split(delimiter)",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i+len(sep)] for i in range(0, len(s), len(sep))]\n\n\nif __name__ == '__main__':\n    print Solution().split('a,b,c,d', ',')",
      -0.85791015625
    ],
    [
      "#!/usr/bin/python\nimport re\n\ndef split_by_regex(s, delimiter):\n    pattern = re.compile(delimiter)\n    return pattern.split(s)\n\nif __name__ == '__main__':\n    s = 'Hello, world! Hello, world!'\n    print split_by_regex(s,'')\n    print split_by_regex(s, ',')",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        s = s.lower()\n        delimiters = delimiters.lower()\n        if not delimiters:\n            return [s]\n        return [s[i:i+len(delimiters)] for i in range(0, len(s), len(delimiters))]",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        return re.split(delimiters, s)",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def split(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        delim_re = re.compile(delim)\n        return delim_re.split(s)",
      -0.8583984375
    ],
    [
      "# Definition for a string\nclass String:\n    def __init__(self, s):\n        self.str = s\n    def __str__(self):\n        return self.str\n\nclass Solution:\n    def splitString(self, s, delimiter):\n        \"\"\"\n        :type s: String\n        :type delimiter: str\n        :rtype: List[String]\n        \"\"\"\n        return [String(s.split(delimiter))]\n\n# test\ns = Solution()\nprint s.splitString(\"a,b,c,d\", \",\")",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiter=None):\n        \"\"\"\n        :type s: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        if delimiter is None:\n            return s.split()\n        else:\n            return s.split(delimiter)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.split('aabbcc')\n    print s.split('aabbcc', '.')",
      -0.8583984375
    ],
    [
      "import re\n\ndef split_by_regex(str, regex):\n    \"\"\"\n    Returns a list of strings after splitting the string by regex.\n    \"\"\"\n    return re.split(regex, str)\n\nif __name__ == '__main__':\n    str = \"A string with multiple delimiters\"\n    regex = r\"(?P<space>\\s+)\"\n    print(split_by_regex(str, regex))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def split(self, s, sep=''):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        sep = sep.encode('utf-8')\n        return [s[i:i + len(sep)] for i in range(0, len(s), len(sep))]",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        if not sep:\n            return [s]\n        return [s.split(sep) for s in s.split(sep)]",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def splitByRegex(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        return re.split(sep, s)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        s = s.strip()\n        if not s: return []\n        # split by delimiter\n        splits = s.split(delimiters)\n        # remove empty strings\n        splits = filter(lambda x: x, splits)\n        # return result\n        return splits",
      -0.8583984375
    ],
    [
      "import re\n\ndef split_string(s, delimiter):\n    \"\"\"\n    :type s: str\n    :type delimiter: str\n    :rtype: list[str]\n    \"\"\"\n    return re.split(delimiter, s)\n\n# Your Solution\n# @return a list of strings\ndef split_string(s, delimiter):\n    \"\"\"\n    :type s: str\n    :type delimiter: str\n    :rtype: list[str]\n    \"\"\"\n    return s.split(delimiter)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def splitByRegex(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        return [s[i:i+len(sep)] for i in range(0, len(s), len(sep))]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.splitByRegex('hello,world', ',;')\n    print s.splitByRegex('hello,world', ';')\n    print s.splitByRegex('hello,world', ',')\n    print s.splitByRegex('hello,world', ',')\n    print s.splitByRegex('hello,world', ',')",
      -0.8583984375
    ],
    [
      "import re\n\ndef split_string(s, delimiter_regex):\n    return re.split(delimiter_regex, s)\n\n# Your SplitString function should return:\n# (string, delimiter_string)\n\nif __name__ == '__main__':\n    s = \"hello, world\"\n    delimiter_regex = r\"\\s+\"\n    print split_string(s, delimiter_regex)\n    s = \"hello, world, hello, world\"\n    delimiter_regex = r\"\\s+\"\n    print split_string(s, delimiter_regex)\n    s = \"hello, world, hello, world\"\n    delimiter_regex = r\"\\s*,\\s*\"\n    print split_string(s, delimiter_regex)",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @param {string[]} d\n    # @return {string[]}\n    def split(self, s, d):\n        res = []\n        if not s or not d:\n            return res\n        pos = 0\n        while pos < len(s):\n            end = s.find(d[pos], pos)\n            if end == -1:\n                res.append(s[pos:])\n                break\n            res.append(s[pos:end])\n            pos = end + 1\n            if pos == len(s):\n                break\n        return res\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.split('a,b,c,d', ['(', ',')))\n    print(solution.split('a,b,c,d', ['(', ',', ')']))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        return list(re.split(delimiters, s))",
      -0.8583984375
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @param {string} delimiters\n    # @return {string[]}\n    def split(self, s, delimiters):\n        return re.split(delimiters, s)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def split(self, s, re):\n        return re.split(s)",
      -0.86083984375
    ],
    [
      "class Solution(object):\n    def split(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split(delim)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.split('a,b,c,d', ',')\n    print s.split('a,b,c,d','')\n    print s.split('a,b,c,d','')",
      -0.86083984375
    ],
    [
      "import re\ndef split(s, delimiters):\n    \"\"\"\n    :type s: str\n    :type delimiters: str\n    :rtype: List[str]\n    \"\"\"\n    pattern = re.compile(delimiters)\n    splits = pattern.split(s)\n    return splits\n\nif __name__ == \"__main__\":\n    s = \"Hello, world!\"\n    delimiters = \" \"\n    splits = split(s, delimiters)\n    print(splits)\n    splits = split(s, \"\")\n    print(splits)\n    splits = split(s, \"\")\n    print(splits)",
      -0.86083984375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param delimiters, a string of delimiters\n    # @return a string array\n    def split(self, s, delimiters):\n        if not s:\n            return []\n        if not delimiters:\n            return [s]\n        pattern = re.compile(r'(%s)' % re.escape(delimiters))\n        return pattern.split(s)",
      -0.8857421875
    ],
    [
      "class Solution(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        # if not sep:\n        #     return [s]\n\n        # if sep.find(s)!= -1:\n        #     return [s[:sep.find(s)]]\n        # else:\n        #     return [s]\n\n        return re.split(sep, s)\n\n\nif __name__ == \"__main__\":\n    print Solution().split(\"a,b,c\", \",\")",
      -0.89111328125
    ],
    [
      "# https://www.hackerrank.com/challenges/split-a-string-with-multiple-delimiters\ndef split(s, delimiter):\n    return s.split(delimiter)\n\nif __name__ == '__main__':\n    s = input().strip()\n    print(split(s,''))\n    print(split(s, '\\n'))\n    print(split(s, ','))\n    print(split(s, '\\t'))\n    print(split(s, '\\r'))",
      -1.119140625
    ],
    [
      "class Solution(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        p = 0\n        while True:\n            m = s.find(sep, p)\n            if m < 0:\n                break\n            ret.append(s[p:m])\n            p = m + len(sep)\n        ret.append(s[p:])\n        return ret\n\n\nif __name__ == \"__main__\":\n    assert Solution().split(\"\", \" \") == []\n    assert Solution().split(\"a\", \" \") == [\"a\"]\n    assert Solution().split(\"a b c\", \" \") == [\"a\", \"b\", \"c\"]\n    assert Solution().split(\"a b c\", \" \") == [\"a\", \"b\", \"c\"]\n    assert Solution().split(\"a b c\", \"\") == [\"a\", \"b\", \"c\"]",
      -1.26953125
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiter=''):\n        \"\"\"\n        :type s: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        for i in range(len(s)):\n            if s[i:i+len(delimiter)] == delimiter:\n                result.append(s[:i])\n                s = s[i+len(delimiter):]\n        result.append(s)\n        return result",
      -1.5419921875
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        def split_by_regex(s, delimiters):\n            return [word.strip() for word in s.split(delimiters) if word.strip()]\n\n        return split_by_regex(s, delimiters)\n\n\nif __name__ == '__main__':\n    assert Solution().split(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert Solution().split(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert Solution().split(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert Solution().split(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert Solution().split(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]\n    assert Solution().split(\"a,b,c\", \",\") == [\"a\", \"b\", \"c\"]",
      -1.5810546875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param d, a string\n    # @return a list of strings\n    def split(self, s, d):\n        # write your code here\n        l = s.split(d)\n        result = []\n        for i in l:\n            if i:\n                result.append(i)\n        return result",
      -1.7607421875
    ],
    [
      "# https://www.interviewbit.com/questions/15/how-to-split-a-string-with-multiple-delimiters-using-regex\n# https://www.interviewbit.com/questions/15/how-to-split-a-string-with-multiple-delimiters-using-regex\n\nimport re\n\ndef split(s, delimiter):\n    \"\"\"\n    :type s: str\n    :type delimiter: str\n    :rtype: list[str]\n    \"\"\"\n    return re.split(delimiter, s)\n\nif __name__ == '__main__':\n    s = 'Hello, world!'\n    print(split(s,''))\n    print(split(s, ','))\n    print(split(s, ';'))\n    print(split(s, '\\''))\n    print(split(s, '\\n'))\n    print(split(s, '\\r'))\n    print(split(s, '\\t'))",
      -1.87109375
    ],
    [
      "class Solution(object):\n    def splitByRegex(self, s, delimiter):\n        \"\"\"\n        :type s: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        if not s:\n            return []\n        if not delimiter:\n            return [s]\n\n        pattern = r\"\\s*\" + delimiter + r\"\\s*\"\n        splits = re.split(pattern, s)\n        return splits\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    s = \"hello world\"\n    print sol.splitByRegex(s, \" \")",
      -2.1875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param delimiters, a string of delimiters\n    # @return a list of strings\n    def split(self, s, delimiters):\n        res = []\n        if not s:\n            return res\n        if not delimiters:\n            return [s]\n\n        for i in range(0, len(s)):\n            if s[i] in delimiters:\n                res.append(s[:i])\n                s = s[i+1:]\n        res.append(s)\n        return res\n\nif __name__ == \"__main__\":\n    s = \"a;,b,;c;d,e\"\n    delimiters = \";\"\n    print Solution().split(s, delimiters)",
      -2.197265625
    ],
    [
      "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n    def __repr__(self):\n        return self.s\n\nclass Solution:\n    # @param s, a string\n    # @param delims, a string of delimiters\n    # @return a list of strings\n    def split(self, s, delims):\n        res = []\n        pos = 0\n        while pos < len(s):\n            if s[pos] in delims:\n                res.append(s[pos:pos+len(delims)])\n                pos = pos + len(delims)\n            else:\n                pos = pos + 1\n        return res\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = 'a b c d e f g h'\n    delims =''\n    res = sol.split(s, delims)\n    print(res)",
      -2.482421875
    ],
    [
      "class Solution(object):\n    def split(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        if s is None:\n            return []\n\n        if delim == '':\n            return [s]\n\n        if delim =='':\n            return [s.strip()]\n\n        if delim == ',':\n            return [x.strip() for x in s.split(',')]\n\n        if delim == ';':\n            return [x.strip() for x in s.split(';')]\n\n        return [x for x in s.split(delim) if x]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.split('a,b,c', ',')\n    print s.split('a,b,c', ',')\n    print s.split('a,b,c', ',')",
      -2.595703125
    ],
    [
      "class Solution(object):\n    def split(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        pattern = re.compile(r'\\s+')\n        result = []\n        for part in pattern.split(s):\n            if part:\n                result.append(part)\n        return result\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.split(s,delim)",
      -3.5546875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param d, a string\n    # @return a string\n    def split(self, s, d):\n        # write your code here\n        return s.split(d)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.split(\"a,b,c\", \",\")\n    print s.split(\"a,b,c\", \",\")\n    s.split(\"a,b,c\", \" \")\n    print s.split(\"a,b,c\", \" \")\n    s.split(\"a,b,c\", \",\")\n    print s.split(\"a,b,c\", \",\")",
      -3.79296875
    ],
    [
      "def split_by_delims(s, delims):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    :type s: str\n    :type delims: str\n    :rtype: list[str]\n    \"\"\"\n    return [re.split(re.compile(r'[' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r'][' + r",
      -4.0078125
    ],
    [
      "class Solution(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        sep_len = len(sep)\n        while sep_len:\n            s_len = len(s)\n            if s_len == 0:\n                break\n            i = 0\n            while i < s_len:\n                if s[i] == sep[0]:\n                    result.append(s[0:i])\n                    s = s[i + 1:]\n                    break\n                i += 1\n            sep_len -= 1\n        if s:\n            result.append(s)\n        return result\n\nclass Solution1(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        i = 0\n        while i < len(s):\n            if s[i] == sep[0]:\n                result.append(s[0:i])\n                s = s[i + 1:]\n            i += 1\n        result.append(s)\n        return result",
      -4.0546875
    ],
    [
      "# Write your code below!\n#\n# Sample Input:\n#\n# \"This is a test string\"\n#\n# Sample Output:\n#\n# This    is    a    test    string\n# This    is    a    test    string\n#\n#\n#\n#\n# Note:\n#\n# The string does not contain leading or trailing spaces.\n# The delimiter is a single character and can be either a string or a single character.\n# The delimiter is guaranteed to be unique.\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#",
      -4.0859375
    ],
    [
      "def split_string(s, delimiter):\n    return s.split(delimiter)\n\nclass Solution:\n    # @param s, a string\n    # @param delimiters, a string of delimiters\n    # @return a list of strings\n    def split(self, s, delimiters):\n        return s.split(delimiters)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    # print(s.split_string(\"This is a test\", \" \"))\n    # print(s.split_string(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print(s.split(\"This is a test\", \" \"))\n    print",
      -4.19921875
    ],
    [
      "import re\n\ndef split(text, delimiters):\n    # write your code here\n    result = []\n    while text:\n        index = text.find(delimiters)\n        if index == -1:\n            result.append(text)\n            break\n        else:\n            result.append(text[:index])\n            text = text[index+1:]\n    return result\n\n\n\ntext = 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'\n#print split(text, ',')\n#print split(text,'')\n#print split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ',')\nprint split(text, ','",
      -4.26171875
    ],
    [
      "class Solution(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        s = s.strip()\n        res = []\n        p = 0\n        while p < len(s):\n            p = s.find(sep, p)\n            if p == -1:\n                res.append(s[p:])\n                break\n            else:\n                res.append(s[p:p+len(sep)])\n            p += len(sep)\n        return res\n\nclass Solution2(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        p = 0\n        while p < len(s):\n            p = s.find(sep, p)\n            if p == -1:\n                res.append(s[p:])\n                break\n            else:\n                res.append(s[p:p+len(sep)])\n            p += len(sep)\n        return res",
      -4.28515625
    ],
    [
      "class Solution(object):\n    def split(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        if not delim:\n            return [s]\n        if len(delim) == 1:\n            return [s[:i] for i in range(len(s)) if s[i] == delim]\n\n        start = 0\n        ans = []\n        while start < len(s):\n            for i in range(len(delim)):\n                if s[start:start + len(delim)] == delim[i]:\n                    ans.append(s[start:start + len(delim)])\n                    start += len(delim)\n                    break\n            else:\n                ans.append(s[start:])\n                start += len(s)\n        return ans\n\nif __name__ == '__main__':\n    assert Solution().split(\"1,2,3,4,5\", \",\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    assert Solution().split(\"1,2,3,4,5\", \",\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    assert Solution().split(\"1,2,3,4,5\", \",\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    assert Solution().split(\"1,2,3,4,5\", \",\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]",
      -4.75
    ],
    [
      "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def splitByRegex(self, s, delimiter):\n        \"\"\"\n        :type s: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        return [x.strip() for x in s.split(delimiter)]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.splitByRegex('a,b,c', ',')\n    print s.splitByRegex('a,b,c','')\n    print s.splitByRegex('a,b,c','')\n    print s.splitByRegex('a,b,c', ',')\n    print s.splitByRegex('a,b,c', ';')",
      -4.83984375
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def split2(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        def _split(s, sep):\n            result = []\n            idx = 0\n            while idx < len(s):\n                if s[idx:idx + len(sep)] == sep:\n                    result.append(s[idx:idx + len(sep)])\n                    idx += len(sep)\n                else:\n                    result.append(s[idx])\n                    idx += 1\n            return result\n\n        # return _split(s, sep)\n\n        def _split_rec(s, sep):\n            result = []\n            if s[0]!= sep:\n                result.append(s[0])\n                s = s[1:]\n            for c in s:\n                if c == sep:\n                    result.append(sep)\n                    s = s[1:]\n                else:\n                    result.append(c)\n            return result\n\n        # return _split_rec(s, sep)\n\n        def _split_iter(s, sep):\n            result = []\n            while s:\n                if s[0] == sep:\n                    result.append(s[0])\n                    s = s[1:]\n                else:\n                    result.append(s[0])\n                    s = s[1:]\n            return result\n\n        return _split_iter(s, sep)\n\n\nif __name__ == \"__main__\":\n    print Solution().split2(\"a,b,c\", \",\")\n    print Solution().split2(\"a,b,c\", \",\")\n    print Solution().split2(\"a,b,c\", \",\")\n    print Solution().split2(\"a,b,c\", \",\")",
      -5.1875
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        splits = []\n        for delimiter in delimiters:\n            splits.append(re.split(delimiter, s))\n        return splits\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    s = 'abcdefg'\n    splits = solution.split(s, ',')\n    for split in splits:\n        print(split)",
      -5.62890625
    ],
    [
      "class Solution(object):\n    def split(self, s, delimiter=None):\n        \"\"\"\n        :type s: str\n        :type delimiter: str\n        :rtype: List[str]\n        \"\"\"\n        if delimiter == None:\n            return s.split()\n        else:\n            return s.split(delimiter)\n\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.split(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\")\n    print s.split(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,delimiter=,\")",
      -5.74609375
    ],
    [
      "import re\n\n# Your function should return a string array.\n# The string array should have the same length as the input string.\n# If the input string is not delimiter, the return string array will be empty.\n# If the input string is empty, the return string array will be empty.\n\n# Example 1:\n\n# Input: s = \"a,b,c\", delimiters = \", \"\n# Output: [\"a\", \"b\", \"c\"]\n\n# Example 2:\n\n# Input: s = \"a<b>c\", delimiters = \"<> \"\n# Output: [\"a\", \"<b>\", \"c\"]\n\n# Note:\n\n# The delimiters only affect the boundaries of delimiters,\n# and the text inside them does not change.\n# The given delimiters are all ASCII and valid.\n# The length of given string is in the range [1, 10000].\n# The length of delimiters is in the range [1, 200].\n\nclass Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        pos = 0\n        while pos < len(s):\n            m = re.search(r'(?:%s)%s(?:%s)' % (delimiters, delimiters, delimiters), s, re.I)\n            if m:\n                res.append(s[pos:m.start()])\n                pos = m.end()\n            else:\n                res.append(s[pos:])\n                pos = len(s)\n        return res\n\n\n# Note:\n\n# The delimiters only affect the boundaries of delimiters,\n# and the text inside them does not change.\n# The given delimiters are all ASCII and valid.\n# The length of given string is in the range [1, 10000].\n# The length of delimiters is in the range [1, 200].\n\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.split(s, delimiters)",
      -5.94140625
    ],
    [
      "# https://leetcode.com/problems/split-a-string-by-delimiter/discuss/146844/Python-O(n)-Regex\nclass Solution(object):\n    def splitByRegex(self, s, re):\n        \"\"\"\n        :type s: str\n        :type re: str\n        :rtype: List[str]\n        \"\"\"\n        return s.split(re)\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    s = \"hello,world!\"\n    re = ','\n    print(sol.splitByRegex(s, re))",
      -5.9453125
    ],
    [
      "from collections import namedtuple\nimport re\n\n# Split by multiple delimiters\n# Note:\n# 1. We use namedtuple to store the split result\n# 2. We can use namedtuple to represent the split result as a tuple.\n# 3. We can use namedtuple to store the split result as a dict.\n\nclass SplitResult(namedtuple('SplitResult', 'delimiter words')):\n    pass\n\ndef split_string(s, delimiter=\" \"):\n    # Note:\n    # 1. We can use namedtuple to represent the split result as a tuple.\n    # 2. We can use namedtuple to store the split result as a dict.\n    words = []\n    for w in re.split(delimiter, s):\n        if w:\n            words.append(w)\n    return SplitResult(delimiter, words)\n\nif __name__ == '__main__':\n    s = \"hello world\"\n    print(split_string(s))\n\n    s = \"hello, world\"\n    print(split_string(s, \",\"))\n\n    s = \"hello, world, hello, world\"\n    print(split_string(s, \",\"))\n\n    s = \"hello, world, hello, world, hello, world\"\n    print(split_string(s, \",\"))\n\n    s = \"hello, world, hello, world, hello, world, hello, world\"\n    print(split_string(s, \",\"))\n\n    s = \"hello, world, hello, world, hello, world, hello, world, hello, world\"\n    print(split_string(s, \",\"))\n\n    s = \"hello, world, hello, world, hello, world, hello, world, hello, world\"\n    print(split_string(s, \",\"))",
      -6.04296875
    ],
    [
      "# https://leetcode.com/problems/split-a-string-with-multiple-delimiters/discuss/81443/Python-Regex-Solution-with-Python-3\n\nclass Solution(object):\n    def split(self, s, delims):\n        \"\"\"\n        :type s: str\n        :type delims: str\n        :rtype: List[str]\n        \"\"\"\n        return [d for d in s.split(delims) if d]\n\n# def split(s, delims):\n#     return [d for d in s.split(delims) if d]\n\n# def split(s, delims):\n#     return [d for d in s.split(delims) if d]\n\n\nif __name__ == \"__main__\":\n    s = \"a,b,c\"\n    print(split(s, ','))\n    print(split(s,''))\n    print(split(s,''))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(s, ','))\n    print(split(",
      -6.53515625
    ],
    [
      "class Solution(object):\n    def split(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        return [s.split(delim) for s in s.split(delim)]\n\n    def split2(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        return [s.split(delim) for s in s.split(delim)]\n\n    def split3(self, s, delim):\n        \"\"\"\n        :type s: str\n        :type delim: str\n        :rtype: List[str]\n        \"\"\"\n        return [s.split(delim) for s in s.split(delim)]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.split('a,b,c', ','))\n    print(s.split2('a,b,c', ','))\n    print(s.split3('a,b,c', ','))",
      -6.66796875
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def splitByRegex(self, s, reList):\n        \"\"\"\n        :type s: str\n        :type reList: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        for re in reList:\n            m = re.search(s)\n            if m:\n                ret.extend(m.groups())\n        return ret\n\n    def splitByRegex_recursive(self, s, reList):\n        \"\"\"\n        :type s: str\n        :type reList: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        for re in reList:\n            m = re.search(s)\n            if m:\n                ret.extend(m.groups())\n        if len(s) > 0:\n            ret.extend(s)\n        return ret\n\n    def splitByRegex_recursive_with_stack(self, s, reList):\n        \"\"\"\n        :type s: str\n        :type reList: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        stack = []\n        for re in reList:\n            m = re.search(s)\n            if m:\n                ret.extend(m.groups())\n                stack.append(s[m.start():m.end()])\n            else:\n                stack.append(s)\n        return stack\n\n    def splitByRegex_recursive_with_stack_2(self, s, reList):\n        \"\"\"\n        :type s: str\n        :type reList: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        stack = []\n        for re in reList:\n            m = re.search(s)\n            if m:\n                ret.extend(m.groups())\n                stack.append(s[m.start():m.end()])\n            else:\n                stack.append(s)\n        return stack\n\n\nif __name__ == \"__main__\":\n    s = \"aaabbbcc",
      -7.0546875
    ],
    [
      "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\nclass Solution:\n    def split(self, s, delim):\n        \"\"\"\n        :type s: String\n        :type delim: String\n        :rtype: List[String]\n        \"\"\"\n        ret = []\n        for i in range(len(s.s)):\n            if s.s[i] == delim:\n                ret.append(s.s[:i])\n                s.s = s.s[i+1:]\n        if len(s.s) > 0:\n            ret.append(s.s)\n        return ret\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.split(s, delim)",
      -7.59765625
    ],
    [
      "from collections import defaultdict\nimport re\n\n\ndef split_string(s, delimiter_regex):\n    \"\"\"\n    Splits the given string by using regex.\n    :param s: the string to split\n    :param delimiter_regex: the regex to split the string by\n    :return: a list of strings\n    \"\"\"\n    result = []\n    for match in re.finditer(delimiter_regex, s):\n        result.append(s[match.start():match.end()])\n        s = s[match.end():]\n    if s:\n        result.append(s)\n    return result\n\n\ndef main():\n    s = 'abcd,efg,hij'\n    print(split_string(s, r'[,\\s]+(?=[^\\s]*$)'))\n    print(split_string(s, r'[^\\s]+(?=[^\\s]*$)'))\n    print(split_string(s, r'[^\\s]+(?=[^\\s]*$)'))\n    print(split_string(s, r'[^\\s]+(?=[^\\s]*$)'))\n    print(split_string(s, r'[^\\s]+(?=[^\\s]*$)'))\n    print(split_string(s, r'[^\\s]+(?=[^\\s]*$)'))\n    print(split_string(s, r'[^\\s]+(?=[^\\s]*$)'))\n    print(split_string(s, r'[^\\s]+(?=[^\\s]*$)'))\n\n\nif __name__ == '__main__':\n    main()",
      -7.6875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @param delims, a string of delimiters\n    # @return a list of strings\n    def split(self, s, delims):\n        res = []\n        for i in range(0, len(s)):\n            if s[i] in delims:\n                res.append(s[i:i+len(delims)])\n                s = s[i+len(delims):]\n            else:\n                res.append(s[i:i+1])\n                s = s[i+1:]\n        return res\n\n    # @param s, a string\n    # @param delims, a string of delimiters\n    # @return a list of strings\n    def splitWithSeparator(self, s, delims):\n        res = []\n        i = 0\n        while i < len(s):\n            if s[i] in delims:\n                res.append(s[i:i+len(delims)])\n                s = s[i+len(delims):]\n            else:\n                res.append(s[i:i+1])\n                s = s[i+1:]\n            i = i + 1\n        return res\n\n    # @param s, a string\n    # @param delims, a string of delimiters\n    # @return a list of strings\n    def splitByDelims(self, s, delims):\n        res = []\n        i = 0\n        while i < len(s):\n            if s[i] in delims:\n                res.append(s[i:i+len(delims)])\n                s = s[i+len(delims):]\n            else:\n                res.append(s[i:i+1])\n                s = s[i+1:]\n            i = i + 1\n        return res\n\n    # @param s, a string\n    # @param delims, a string of delimiters\n    # @return a list of strings\n    def splitByDelimsWithSeparator(self, s, delims):\n        res = []\n        i = 0\n        while i < len(s):\n            if",
      -8.0625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def split(self, s, delims):\n        \"\"\"\n        :param s: str\n        :param delims: str\n        :return: List[str]\n        \"\"\"\n        regex = r\"|\".join(delims)\n        return [s.split(regex) for s in s.split(\"|\")]\n\n\nif __name__ == \"__main__\":\n    assert Solution().split(\"|a|b|c|\", \"|\") == [\"a\", \"b\", \"c\"]\n    assert Solution().split(\"a|b|c|d\", \"|\") == [\"a\", \"b\", \"c\", \"d\"]\n    assert Solution().split(\"|a|b|c|\", \"|a|\") == [\"b\", \"c\"]\n    assert Solution().split(\"|a|b|c|\", \"|b|c|\") == [\"a\"]\n    assert Solution().split(\"|a|b|c|\", \"|a|b|c|d|\") == [\"a\", \"b\", \"c\", \"d\"]\n    assert Solution().split(\"|a|b|c|\", \"|a|b|c|d|e|\") == [\"a\", \"b\", \"c\", \"d\", \"e\"]",
      -10.140625
    ],
    [
      "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __repr__(self):\n        return self.s\n\n    def __str__(self):\n        return self.s\n\n\nclass Solution(object):\n    def splitString(self, s, delim):\n        \"\"\"\n        :type s: String\n        :type delim: str\n        :rtype: List[String]\n        \"\"\"\n        res = []\n        start = 0\n        while start < len(s):\n            if s[start] == delim:\n                res.append(s[start:])\n                start = start + len(delim)\n            else:\n                start += 1\n        return res\n\n# Note:\n#   - s is a string\n#   - delim is a string\n\ns = \"this is a test\"\ns = \"this is a test\\n\"\ns = \"this is a test\\n\\n\"\ns = \"this is a test\\n\\n\\n\"\n\nsol = Solution()\n\nprint sol.splitString(s, \"\\n\")",
      -10.7890625
    ],
    [
      "class Solution:\n    # @param str, a string\n    # @param delims, a string of delimiters\n    # @return a list of strings\n    def split(self, str, delims):\n        if str is None or delims is None:\n            return None\n        if not isinstance(str, str):\n            str = str.decode(\"utf-8\")\n        if not isinstance(delims, str):\n            delims = delims.decode(\"utf-8\")\n        if len(delims) == 1:\n            return [str]\n        result = []\n        for i in range(0, len(str)):\n            if str[i] == delims[0]:\n                result.append(str[:i])\n                str = str[i:]\n            elif str[i] == delims[-1]:\n                result.append(str[:i])\n                str = str[i + 1:]\n            else:\n                pass\n        result.append(str)\n        return result\n\n    def split2(self, str, delims):\n        if str is None or delims is None:\n            return None\n        if not isinstance(str, str):\n            str = str.decode(\"utf-8\")\n        if not isinstance(delims, str):\n            delims = delims.decode(\"utf-8\")\n        result = []\n        for i in range(0, len(str)):\n            if str[i] == delims[0]:\n                result.append(str[:i])\n                str = str[i:]\n            elif str[i] == delims[-1]:\n                result.append(str[:i])\n                str = str[i + 1:]\n            else:\n                pass\n        result.append(str)\n        return result\n\n    # @param str, a string\n    # @param delims, a string of delimiters\n    # @return a list of strings\n    def split(self, str, delims):\n        if str is None or delims is None:\n            return None\n        if not isinstance(str, str):\n            str = str.decode(\"utf-8\")\n        if not",
      -10.9609375
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def split(self, s, delimiters):\n        \"\"\"\n        :type s: str\n        :type delimiters: str\n        :rtype: List[str]\n        \"\"\"\n        if not delimiters:\n            return [s]\n        if not s:\n            return []\n        res = []\n        for i, c in enumerate(s):\n            if c in delimiters:\n                if i == 0:\n                    res.append(s[:i])\n                else:\n                    res.append(s[:i-1])\n                res.append(s[i:])\n                return res\n        return res\n\n\nif __name__ == \"__main__\":\n    print Solution().split(\"a,b,c\", \",\")\n    print Solution().split(\"a,b,c\", \",\")\n    print Solution().split(\"a,b,c\", \",\")",
      -12.546875
    ],
    [
      "# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass Solution:\n    def split(self, s, sep):\n        \"\"\"\n        :type s: String\n        :type sep: String\n        :rtype: List[String]\n        \"\"\"\n        # split the string by the sep\n        return [s[i:j] for i, j in zip(enumerate(s), enumerate(s) + [len(s)]) if sep in s[i:j]]\n\n\n# Test cases\ns = String(\"hello world\")\nprint(Solution().split(s, \" \"))\ns = String(\"hello world\")\nprint(Solution().split(s, \"o\"))\ns = String(\"hello world\")\nprint(Solution().split(s, \"w\"))\ns = String(\"hello world\")\nprint(Solution().split(s, \" \"))\ns = String(\"hello world\")\nprint(Solution().split(s, \" \"))\ns = String(\"hello world\")\nprint(Solution().split(s, \"o\"))\ns = String(\"hello world\")\nprint(Solution().split(s, \"w\"))\ns = String(\"hello world\")\nprint(Solution().split(s, \" \"))\ns = String(\"hello world\")\nprint(Solution().split(s, \" \"))\ns = String(\"hello world\")\nprint(Solution().split(s, \"o\"))\ns = String(\"hello world\")\nprint(Solution().split(s, \"w\"))\ns = String(\"hello world\")\nprint(Solution().split(s, \" \"))\ns = String(\"hello world\")\nprint(Solution().split(s, \" \"))\ns = String(\"hello world\")\nprint(Solution().split(s, \"o\"))\ns = String(\"hello world\")\nprint(Solution().split(s, \"w\"))\ns = String(\"hello world\")\nprint(Solution().split(s, \" \"))\ns = String(\"hello world\")\nprint(Solution().split(s, \" \"))\ns = String(\"hello world\")\nprint(Solution().split(s, \"o\"))\ns = String",
      -13.296875
    ],
    [
      "# Approach 1: String.split()\n# time complexity: O(n)\n# space complexity: O(n)\ndef split(s, delimiter):\n    return s.split(delimiter)\n\n# Approach 2: Regular Expression\n# time complexity: O(n)\n# space complexity: O(n)\ndef split_regex(s, delimiter):\n    pattern = re.compile(r\"(\\s*)(\" + delimiter + r\")\")\n    return pattern.split(s)\n\n# Approach 3: String.split()\n# time complexity: O(n)\n# space complexity: O(n)\ndef split_string(s, delimiter):\n    return s.split(delimiter)\n\n# Approach 4: String.split()\n# time complexity: O(n)\n# space complexity: O(1)\ndef split_string_n(s, delimiter, n):\n    result = []\n    for i in range(0, len(s)):\n        if i < n:\n            result.append(s[i:i + 1])\n        else:\n            result.append(s[i:])\n    return result\n\n# Approach 5: String.split()\n# time complexity: O(n)\n# space complexity: O(1)\ndef split_string_n_regex(s, delimiter, n):\n    result = []\n    for i in range(0, len(s)):\n        if i < n:\n            result.append(s[i:i + 1])\n        else:\n            result.append(s[i:])\n    return result\n\n# Approach 6: String.split()\n# time complexity: O(n)\n# space complexity: O(1)\ndef split_string_n_string(s, delimiter, n):\n    result = []\n    for i in range(0, len(s)):\n        if i < n:\n            result.append(s[i:i + 1])\n        else:\n            result.append(s[i:])\n    return result\n\n# Approach 7: String.split()\n# time complexity: O(n)\n# space complexity: O(1)\ndef split_string_",
      -14.375
    ],
    [
      "# https://oj.leetcode.com/problems/split-a-string-with-regex/\n# tag:easy\n\nclass Solution(object):\n    def splitByRegex(self, s, regex):\n        \"\"\"\n        :type s: str\n        :type regex: str\n        :rtype: List[str]\n        \"\"\"\n        pattern = re.compile(regex)\n        return [element for element in pattern.split(s) if element]\n\n    def splitByRegex2(self, s, regex):\n        \"\"\"\n        :type s: str\n        :type regex: str\n        :rtype: List[str]\n        \"\"\"\n        pattern = re.compile(regex)\n        return [element for element in pattern.split(s) if element]\n\n    def splitByRegex3(self, s, regex):\n        \"\"\"\n        :type s: str\n        :type regex: str\n        :rtype: List[str]\n        \"\"\"\n        pattern = re.compile(regex)\n        return [element for element in pattern.split(s) if element]\n\n\ndef main():\n    s = \"abcdefg\"\n    s = \"a\"\n    s = \"a,b,c,d,e\"\n    s = \"a,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,\"\n    s = \"a,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"\n    s = \"a,b,c,d,e,\"",
      -14.625
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @param {string} delimiters\n    # @return {string[]}\n    def split(self, s, delimiters):\n        if not s:\n            return []\n        return [s.split(re.escape(delimiters)) for i in range(0, len(s) + 1)]\n\n\nif __name__ == \"__main__\":\n    s = \"a,b,,c,d\"\n    print Solution().split(s, \",\")\n    s = \"a,b,c,d,\"\n    print Solution().split(s, \",\")\n    s = \"a,b,\"\n    print Solution().split(s, \",\")\n    s = \",\"\n    print Solution().split(s, \",\")",
      -15.2265625
    ],
    [
      "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def split(self, s, sep):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        def split_str(s, sep):\n            sep_len = len(sep)\n            return [s[i:i + sep_len] for i in range(0, len(s), sep_len)]\n\n        def split_str_re(s, sep):\n            re_sep = re.compile(sep)\n            return [re_sep.split(s)[i] for i in range(0, len(re_sep.split(s)), 1)]\n\n        def split_str_re_pos(s, sep):\n            sep_len = len(sep)\n            re_sep = re.compile(sep)\n            return [re_sep.split(s, i) for i in range(0, len(s), sep_len)]\n\n        def split_str_pos(s, sep):\n            sep_len = len(sep)\n            return [s[i:i + sep_len] for i in range(0, len(s), sep_len)]\n\n        def split_str_pos_re(s, sep):\n            re_sep = re.compile(sep)\n            return [re_sep.split(s, i) for i in range(0, len(re_sep.split(s)), 1)]\n\n        if sep == \" \":\n            return split_str(s, sep)\n        elif sep == \",\":\n            return split_str(s, sep)\n        elif sep == \".\":\n            return split_str(s, sep)\n        elif sep == \"!\":\n            return split_str(s, sep)\n        elif sep == \"|\":\n            return split_str(s, sep)\n        elif sep == \":\":\n            return split_str(s, sep)\n        elif sep == \";\":\n            return split_str(s, sep)\n        elif sep == \"&\":",
      -16.046875
    ],
    [
      "class Solution(object):\n    def split(self, s, sep=''):\n        \"\"\"\n        :type s: str\n        :type sep: str\n        :rtype: List[str]\n        \"\"\"\n        if not sep:\n            return [s]\n        r = re.compile(r'(%s)' % sep)\n        return [s for s in r.split(s) if s]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    s.split(\"a,b,c\")\n    s.split(\"a,b,c,\")\n    s.split(\"a,b,c,\", sep=\",\")\n    s.split(\"a,b,c,\", sep=\",\", keep_empty=False)\n    s.split(\"a,b,c,\", sep=\",\", keep_empty=True)\n    s.split(\"a,b,c,\", sep=\",\", keep_empty=True)\n    s.split(\"a,b,c,\", sep=\",\", keep_empty=True)\n    s.split(\"a,b,c,\", sep=\",\", keep_empty=True)\n    s.split(\"a,b,c,\", sep=\",\", keep_empty=True)",
      -17.484375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}