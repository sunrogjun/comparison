{
  "problem": {
    "task_id": "MBPP/86",
    "prompt": "Write a function to find nth centered hexagonal number.",
    "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
    "test_list": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ],
    "challenge_test_list": [],
    "problem_id": 75
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from __future__ import annotations\n\nimport collections\nimport math\n\nfrom typing import List\n\n# Definition for a hexagonal number.\nclass HexagonalNumber:\n    def __init__(self, num: int):\n        self.num = num\n\n    def __repr__(self):\n        return f\"HexagonalNumber({self.num})\"\n\n\nclass Solution:\n    def nthCenteredHexagonalNumber(self, n: int) -> HexagonalNumber:\n        def get_center(n):\n            return (n - math.floor(n / 2)) / 2\n\n        def get_hexagonal_numbers(n):\n            return list(map(HexagonalNumber, map(get_center, range(1, n + 1))))\n\n        if n == 1:\n            return get_hexagonal_numbers(n)[0]\n\n        return get_hexagonal_numbers(n)[n - 1]\n\n\ndef main():\n    sol = Solution()\n    print(sol.nthCenteredHexagonalNumber(1).num)\n    print(sol.nthCenteredHexagonalNumber(2).num)\n    print(sol.nthCenteredHexagonalNumber(3).num)\n    print(sol.nthCenteredHexagonalNumber(4).num)\n\n\nif __name__ == '__main__':\n    raise(SystemExit(main()))",
      0.8818359375
    ],
    [
      "def nth_center_hexagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # base case\n    if n == 1:\n        return 1\n    # recursion case\n    return (n * (n + 1) * (2 * n - 1) + n) / 6\n\ndef test_nth_center_hexagonal():\n    assert nth_center_hexagonal(1) == 1\n    assert nth_center_hexagonal(2) == 5\n    assert nth_center_hexagonal(3) == 15\n    assert nth_center_hexagonal(4) == 36\n    assert nth_center_hexagonal(5) == 225\n    assert nth_center_hexagonal(6) == 1296\n    assert nth_center_hexagonal(7) == 6480\n    assert nth_center_hexagonal(8) == 362880\n    assert nth_center_hexagonal(9) == 1843200\n\nif __name__ == \"__main__\":\n    test_nth_center_hexagonal()",
      0.8173828125
    ],
    [
      "from math import sqrt\n\ndef get_nth_hexagon_number(n):\n    \"\"\"\n    Write a function get_nth_hexagon_number(n) that takes an integer n and returns the nth\n    hexagonal number.\n    \"\"\"\n    # return the hexagonal number that is the nth in the sequence\n    return sqrt(n + 2) + sqrt(n + 3) - sqrt(n + 4)\n\n\ndef test_get_nth_hexagon_number():\n    assert get_nth_hexagon_number(1) == 3\n    assert get_nth_hexagon_number(2) == 5\n    assert get_nth_hexagon_number(3) == 7\n    assert get_nth_hexagon_number(4) == 9\n    assert get_nth_hexagon_number(5) == 11\n    assert get_nth_hexagon_number(6) == 13\n    assert get_nth_hexagon_number(7) == 15\n    assert get_nth_hexagon_number(8) == 17\n    assert get_nth_hexagon_number(9) == 19\n    assert get_nth_hexagon_number(10) == 23\n    assert get_nth_hexagon_number(11) == 29\n    assert get_nth_hexagon_number(12) == 31\n    assert get_nth_hexagon_number(13) == 37\n    assert get_nth_hexagon_number(14) == 41\n    assert get_nth_hexagon_number(15) == 43\n    assert get_nth_hexagon_number(16) == 47\n    assert get_nth_hexagon_number(17) == 53\n    assert get_nth_hexagon_number(18) == 59\n    assert get_nth_hexagon_number(19) == 61\n    assert get_nth_hexagon_number(20) == 67\n    assert get_nth_hexagon_number(21) == 73\n    assert get_nth_hexagon_number(22) == 79\n    assert get_nth_hexagon_number(23) == 83\n    assert get",
      0.136962890625
    ],
    [
      "# https://www.geeksforgeeks.org/nth-centered-hexagonal-number/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/find-nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/\n# https://www.geeksforgeeks.org/nth-centered-hexagonal-number-using-division/",
      0.07537841796875
    ],
    [
      "# Definition for hexagonal number.\nclass HexagonalNumber:\n    def __init__(self, n):\n        self.n = n\n        self.sum = 0\n\n    def add(self, x):\n        self.sum += x\n\n    def get_sum(self):\n        return self.sum\n\n# Your HexagonalNumber object will be instantiated and called as such:\n# hex = HexagonalNumber(n)\n# hex.add(x)\n# hex.get_sum()\n\ndef nth_centered_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: HexagonalNumber\n    \"\"\"\n    hex = HexagonalNumber(n)\n    for i in range(1, n + 1):\n        hex.add(i ** 2)\n\n    return hex\n\n# Note:\n# The problem is to find the nth centered hexagonal number.\n# For example, if n = 3, the sum of the hexagonal numbers is\n# (1 + 2 + 4 + 8 + 9 + 16 + 25 + 36 + 49 + 64 + 81) =\n# 81 * (1/3) + 81 * (1/5) + 81 * (1/7) + 81 * (1/9) + 81 * (1/11) =\n# 81 * (1/11)",
      -0.13330078125
    ],
    [
      "from math import ceil\n\ndef hexagonal_nth(n):\n    \"\"\"\n    nth centered hexagonal number\n    n = nth hexagonal number\n    \"\"\"\n    return (n+1) * (1 + ceil(n / 2.0))",
      -0.85693359375
    ],
    [
      "def get_hexagonal_number(n):\n    \"\"\"\n    Given a positive integer n, return nth centered hexagonal number.\n    \"\"\"\n    \n    return (n-1)*(n+1)/2 + n\n    \n    \nif __name__ == \"__main__\":\n    print get_hexagonal_number(5)",
      -0.85693359375
    ],
    [
      "from math import sqrt\n\n\ndef nth_hexagonal(n):\n    return (int(sqrt(3) * sqrt(n) / (2 * sqrt(n + 1))) + 1) ** 2\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal(5))\n    print(nth_hexagonal(10))",
      -0.85693359375
    ],
    [
      "def find_hexagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int((n-1)**.5)",
      -0.85693359375
    ],
    [
      "import math\n\n\ndef hexagon_number(n):\n    return (n * (n + 1) * (n - 1) // 6) % 1000000\n\n\ndef hexagon_nth_number(n):\n    return hexagon_number(n) // 100\n\n\ndef get_hexagon_nth_number(n):\n    return hexagon_number(n)\n\n\nif __name__ == \"__main__\":\n    print(hexagon_number(6))\n    print(hexagon_nth_number(5))\n    print(get_hexagon_nth_number(5))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def getHex(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return (n+1)*(n+1)//2 + (n+1)\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.getHex(1))\n    print(sol.getHex(2))\n    print(sol.getHex(3))\n    print(sol.getHex(4))\n    print(sol.getHex(5))\n    print(sol.getHex(6))\n    print(sol.getHex(7))\n    print(sol.getHex(8))\n    print(sol.getHex(9))",
      -0.85693359375
    ],
    [
      "from math import sqrt\n\n\ndef hex_nth_centered(n, h):\n    \"\"\"\n    :type n: int\n    :type h: int\n    :rtype: int\n    \"\"\"\n    # calculate the side length of the hexagon\n    side = sqrt(3) * (h - 1)\n\n    # calculate the center of the hexagon\n    center = side / 2\n\n    # calculate the distance from the center to the nth hexagon\n    # this distance is always a multiple of side\n    distance = center * (n - 1)\n\n    # calculate the position of the hexagon\n    pos = int(distance)\n\n    # return the hexagon number\n    return pos",
      -0.85693359375
    ],
    [
      "import math\n\ndef nth_centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return math.ceil(math.sqrt(6*n))\n\nif __name__ == \"__main__\":\n    print(nth_centered_hexagonal_number(2))\n    print(nth_centered_hexagonal_number(3))\n    print(nth_centered_hexagonal_number(4))\n    print(nth_centered_hexagonal_number(5))\n    print(nth_centered_hexagonal_number(6))\n    print(nth_centered_hexagonal_number(7))\n    print(nth_centered_hexagonal_number(8))\n    print(nth_centered_hexagonal_number(9))",
      -0.85791015625
    ],
    [
      "def nth_hexagon(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    h = nth_hexagon_recursive(n)\n    return h\n\ndef nth_hexagon_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    h = (nth_hexagon_recursive(n-1) + nth_hexagon_recursive(n-2)) * 2\n    return h\n\nif __name__ == '__main__':\n    print(nth_hexagon(10))",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef hexagon_number(n):\n    return math.sqrt(3) * math.pow(4, n)\n\n\ndef main():\n    print hexagon_number(7)\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def get_hexagon_number(n):\n    '''\n    :type n: int\n    :rtype: int\n    '''\n    return sum(get_hexagon_number_helper(n))\n\ndef get_hexagon_number_helper(n):\n    '''\n    :type n: int\n    :rtype: list[int]\n    '''\n    hexagon_number = 1\n    for i in range(1, n):\n        hexagon_number += hexagon_number / 6\n        hexagon_number += hexagon_number / 6\n    return hexagon_number\n\n\nif __name__ == '__main__':\n    print(get_hexagon_number(5))",
      -0.85791015625
    ],
    [
      "class Solution:\n    \"\"\"\n    @param n: An integer\n    @return: An integer\n    \"\"\"\n    def hexagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = n - 1\n        return (n+1) * (n+3) / 2",
      -0.85791015625
    ],
    [
      "from math import sqrt\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return nth_hexagonal_number_aux(n)\n\n\ndef nth_hexagonal_number_aux(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        # nth hexagonal number is the sum of the following\n        # two numbers:\n        # (1 + sqrt(5))/2 + (1 - sqrt(5))/2\n        # (1 + sqrt(5))/2 - (1 - sqrt(5))/2\n        return (1 + sqrt(5))/2 + (1 - sqrt(5))/2\n\n\nif __name__ == '__main__':\n    print(nth_hexagonal_number(2))\n    print(nth_hexagonal_number(3))\n    print(nth_hexagonal_number(4))",
      -0.85791015625
    ],
    [
      "import math\nimport time\n\ndef nth_centered_hexagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.ceil(n*(1+2*n))\n\nif __name__ == '__main__':\n    start_time = time.time()\n    print nth_centered_hexagonal(6)\n    print \"--- %s seconds ---\" % (time.time() - start_time)",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\nclass Solution:\n    \"\"\"\n    @param n: an integer\n    @return: an integer\n    \"\"\"\n    def hexagonalNumber(self, n):\n        numerator = n\n        denominator = n\n        while denominator < n:\n            numerator, denominator = denominator, (numerator + denominator)\n        return numerator\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.hexagonalNumber(1))\n    print(sol.hexagonalNumber(2))\n    print(sol.hexagonalNumber(3))\n    print(sol.hexagonalNumber(4))\n    print(sol.hexagonalNumber(5))\n    print(sol.hexagonalNumber(6))\n    print(sol.hexagonalNumber(7))\n    print(sol.hexagonalNumber(8))\n    print(sol.hexagonalNumber(9))\n    print(sol.hexagonalNumber(10))\n    print(sol.hexagonalNumber(11))\n    print(sol.hexagonalNumber(12))\n    print(sol.hexagonalNumber(13))\n    print(sol.hexagonalNumber(14))\n    print(sol.hexagonalNumber(15))",
      -0.8583984375
    ],
    [
      "import math\n\ndef nth_centered_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.factorial(n) / (math.factorial(n-1) * (n-1))\n\n\nif __name__ == \"__main__\":\n    print(nth_centered_hexagonal_number(4))\n    print(nth_centered_hexagonal_number(9))",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef get_nth_hexagon(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    hexagon_sum = (1 + math.sqrt(5)) * (n + 1)\n    return hexagon_sum % 10\n\n\nif __name__ == '__main__':\n    print(get_nth_hexagon(5))",
      -0.8583984375
    ],
    [
      "def nth_hexagon_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(n * (1 + sqrt(5)) / 2)",
      -0.8583984375
    ],
    [
      "# Definition for hexagonal number.\n# class Hexagon(object):\n#     def __init__(self, number):\n#         self.number = number\n#         self.side = int(math.sqrt(3) * number)\n#     def __str__(self):\n#         return str(self.number) +'' + str(self.side)\n\nclass Solution(object):\n    def nthCenteredHex(self, n, hex):\n        \"\"\"\n        :type n: int\n        :type hex: int\n        :rtype: int\n        \"\"\"\n        side = hex\n        for i in range(1, n):\n            side += hex\n        return side - hex",
      -0.8583984375
    ],
    [
      "import math\n\ndef hexagonal_nth_number(n):\n    return math.sqrt(3) * n + math.sqrt(3)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print hexagonal_nth_number(i)",
      -0.8583984375
    ],
    [
      "# https://www.hackerrank.com/challenges/hexagonal-nth-centered-number/problem\n\n# Iterative solution:\ndef nth_hexagonal_centered(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (n+1)\n    return sum\n\n# Recursive solution:\ndef nth_hexagonal_centered(n):\n    if n == 1:\n        return 1\n    return nth_hexagonal_centered(n-1) + nth_hexagonal_centered(n-2)\n\n# Test cases\nassert nth_hexagonal_centered(1) == 1\nassert nth_hexagonal_centered(2) == 3\nassert nth_hexagonal_centered(3) == 9\nassert nth_hexagonal_centered(4) == 27\nassert nth_hexagonal_centered(5) == 81\nassert nth_hexagonal_centered(6) == 243\nassert nth_hexagonal_centered(7) == 729\nassert nth_hexagonal_centered(8) == 2187\nassert nth_hexagonal_centered(9) == 6561",
      -0.8583984375
    ],
    [
      "import math\n\ndef get_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.sqrt(3) * (n + 1) * (2 * n + 1)\n\nif __name__ == '__main__':\n    print(get_hexagonal_number(0))\n    print(get_hexagonal_number(1))\n    print(get_hexagonal_number(2))\n    print(get_hexagonal_number(3))\n    print(get_hexagonal_number(4))",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef hexagonal_nth_number(n):\n    \"\"\"\n    For the given n, return the nth centered hexagonal number.\n    Hexagonal numbers are of the form\n    (6n + 1) * (6n + 3)/4\n    \"\"\"\n    result = 6 * math.floor(n / 6) + 1\n    result = result * result\n    result = result * (6 * (6 * n + 3) / 4)\n    return result\n\n\nif __name__ == \"__main__\":\n    print hexagonal_nth_number(5)",
      -0.8583984375
    ],
    [
      "import math\n\ndef hexagonal(n):\n    return int(math.sqrt(3)*(n+1)**2/2)\n\ndef hexagon_nth_number(n):\n    return hexagonal(n)*2-1\n\nif __name__ == \"__main__\":\n    print hexagon_nth_number(3)",
      -0.8583984375
    ],
    [
      "def nth_hex(n):\n    \"\"\"\n    nth hexagonal number is the sum of the first n terms of the sequence\n    H_n = sum_{i=1}^n (n + 2i)\n    \"\"\"\n    return sum(x * (n + 2 * i) for x, i in zip(range(1, n + 1), range(1, n + 1)))\n\n\nprint(nth_hex(1))\nprint(nth_hex(2))\nprint(nth_hex(3))\nprint(nth_hex(4))\nprint(nth_hex(5))",
      -0.8583984375
    ],
    [
      "import math\n\ndef hex_nth(n):\n    \"\"\"\n    Given n, find the nth hexagonal number.\n    \"\"\"\n    return int(math.sqrt(6*(n + 1)) + 1)\n\nif __name__ == \"__main__\":\n    print hex_nth(1)\n    print hex_nth(2)\n    print hex_nth(3)\n    print hex_nth(4)\n    print hex_nth(5)\n    print hex_nth(6)\n    print hex_nth(7)\n    print hex_nth(8)\n    print hex_nth(9)\n    print hex_nth(10)",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\nfrom math import sqrt\n\ndef nth_hex(n):\n    \"\"\"\n    nth hexagonal number\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return 1\n    if n < 0:\n        return -1\n    a = sqrt(3) * (n - 1) / 2.0\n    return a * a + (2.0 * n - 1) * sqrt(3) + 1\n\nif __name__ == '__main__':\n    for n in range(1, 1001):\n        print nth_hex(n)",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\n\ndef hexagon_nth(n):\n    \"\"\"\n    :param n: The hexagonal number to be computed.\n    :return: The nth hexagonal number.\n    \"\"\"\n    return (n * (n + 1) * sqrt(3)) // 2\n\n\nif __name__ == '__main__':\n    print(hexagon_nth(5))",
      -0.8583984375
    ],
    [
      "# https://oj.leetcode.com/problems/nth-centered-hexagonal-number/\n# Given n, return the nth centered hexagonal number.\n# For example, given n = 6, return 608.\n# Note:\n# A hexagonal number is a number whose digits are arranged in a hexagonal pattern.\n# For example, [1, 2, 3, 4, 5, 6, 7, 8, 9] is a hexagonal number, and the hexagonal number\n# is 6142857.\n\nclass Solution(object):\n    def nth_hexagonal_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        def is_hexagonal(n):\n            return n % (n + 2) == 0 or (n % (n + 1) == 0 and n % 3 == 0)\n\n        def get_hexagonal_number(n):\n            s = str(n)\n            return sum([int(s[i]) * int(s[i + 1]) for i in range(0, len(s) - 1, 2)])\n\n        if n == 1:\n            return get_hexagonal_number(n)\n\n        if is_hexagonal(n):\n            return get_hexagonal_number(n)\n\n        return self.nth_hexagonal_number(n - 1) + self.nth_hexagonal_number(n - 2)\n\n\nif __name__ == '__main__':\n    print(Solution().nth_hexagonal_number(2))",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\ndef nth_hexagonal(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \"\"\"\n    # nth centered hexagonal number is the sum of the following two\n    # terms.\n    return (sqrt(3) + sqrt(5)) * (n - 0.5) + sqrt(3) * (n - 0.5) + 1\n\nif __name__ == '__main__':\n    print nth_hexagonal(1)\n    print nth_hexagonal(2)\n    print nth_hexagonal(3)\n    print nth_hexagonal(4)\n    print nth_hexagonal(5)\n    print nth_hexagonal(6)",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param {integer} n\n    # @return {integer}\n    def getHex(self, n):\n        if n == 0:\n            return 0\n        l, r = 1, int(n**0.5) + 1\n        while l < r:\n            m = (l + r) / 2\n            if m**2 == n:\n                return m\n            elif m**2 > n:\n                r = m\n            else:\n                l = m + 1\n        return l - 1\n\n\nif __name__ == '__main__':\n    print Solution().getHex(100)\n    print Solution().getHex(200)\n    print Solution().getHex(300)\n    print Solution().getHex(400)\n    print Solution().getHex(500)",
      -0.85888671875
    ],
    [
      "# Definition for a hexagonal number.\nclass HexagonalNumber(object):\n    def __init__(self, num):\n        \"\"\"\n        :type num: int\n        \"\"\"\n        self.num = num\n\n    def __str__(self):\n        return str(self.num)\n\n    def __repr__(self):\n        return str(self.num)\n\n\nclass Solution(object):\n    def nthCenteredHexagonalNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: HexagonalNumber\n        \"\"\"\n        result = HexagonalNumber(0)\n        for i in range(1, n):\n            result = HexagonalNumber(\n                (int(str(result)[0]) + 1) * (int(str(result)[1]) + 1)\n            )\n        return result\n\n\nif __name__ == \"__main__\":\n    assert Solution().nthCenteredHexagonalNumber(2) == HexagonalNumber(2)\n    assert Solution().nthCenteredHexagonalNumber(3) == HexagonalNumber(6)\n    assert Solution().nthCenteredHexagonalNumber(4) == HexagonalNumber(12)",
      -0.85888671875
    ],
    [
      "def hexagonal_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    if n > 9:\n        return 0\n    if n == 0:\n        return 1\n    hex_number = 1\n    n -= 1\n    while n:\n        hex_number += n\n        n /= 3\n    return hex_number",
      -0.85888671875
    ],
    [
      "import math\n\ndef get_hexagonal_number(n):\n    \"\"\"\n    >>> get_hexagonal_number(1)\n    8\n    >>> get_hexagonal_number(5)\n    27\n    >>> get_hexagonal_number(10)\n    1075\n    >>> get_hexagonal_number(100)\n    1530\n    \"\"\"\n    return (n * (math.sqrt(5) + 1) / 2) * (math.sqrt(5) + 1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "from math import sqrt\n\ndef hexagonal_nth_centered_number(n):\n    return (sqrt(3) * (n + 1) * (n + 1)) / (n * (n + 1))\n\nif __name__ == \"__main__\":\n    print hexagonal_nth_centered_number(4)",
      -0.85888671875
    ],
    [
      "# https://www.hackerrank.com/challenges/hexagonal-nth-centered-number/problem\n# https://www.hackerrank.com/challenges/hexagonal-nth-centered-number/submissions/code/7646737\n\nimport math\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    :param n: the number\n    :return: the hexagonal number\n    \"\"\"\n    if n == 1:\n        return 1\n\n    a = (n-1)/2\n    b = math.sqrt(3*(n-1))/2\n    c = math.sqrt(6*(n-1))/2\n    d = math.sqrt(9*(n-1))/2\n\n    return a + b + c + d\n\n\nif __name__ == '__main__':\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    print(nth_hexagonal_number(int(input())))",
      -0.85888671875
    ],
    [
      "def hex(n):\n    return int(n*(0.5+sqrt(3)))/3\n\n# Complete the function below.\n\ndef nth_center_hex(n):\n    return hex(n)",
      -0.85888671875
    ],
    [
      "import math\n\ndef nth_centered_hexagonal_number(n):\n    \"\"\"\n    https://leetcode.com/problems/nth-centered-hexagonal-number/discuss/93743/Python-Solution-with-explanation\n    \"\"\"\n    return ((n-1) * (n+2) / 2) + (n * (n+1) / 2)\n\nif __name__ == '__main__':\n    print(nth_centered_hexagonal_number(1))\n    print(nth_centered_hexagonal_number(2))\n    print(nth_centered_hexagonal_number(3))\n    print(nth_centered_hexagonal_number(4))\n    print(nth_centered_hexagonal_number(5))\n    print(nth_centered_hexagonal_number(6))\n    print(nth_centered_hexagonal_number(7))\n    print(nth_centered_hexagonal_number(8))\n    print(nth_centered_hexagonal_number(9))\n    print(nth_centered_hexagonal_number(10))\n    print(nth_centered_hexagonal_number(11))\n    print(nth_centered_hexagonal_number(12))\n    print(nth_centered_hexagonal_number(13))\n    print(nth_centered_hexagonal_number(14))\n    print(nth_centered_hexagonal_number(15))\n    print(nth_centered_hexagonal_number(16))\n    print(nth_centered_hexagonal_number(17))\n    print(nth_centered_hexagonal_number(18))\n    print(nth_centered_hexagonal_number(19))\n    print(nth_centered_hexagonal_number(20))\n    print(nth_centered_hexagonal_number(21))\n    print(nth_centered_hexagonal_number(22))\n    print(nth_centered_hexagonal_number(23))\n    print(nth_centered_hexagonal_number(24))\n    print(nth_centered_hexagonal_number(25))\n    print(nth_centered",
      -1.025390625
    ],
    [
      "def nth_hexagonal_number(n):\n    \"\"\"\n    For example, the 6th hexagonal number is 6hexagonally adjacent to 1,\n    and the 10th hexagonal number is 10hexagonally adjacent to 1.\n    \"\"\"\n    return sum(map(lambda x: x ** 2 + x, range(1, n + 1))) ** 0.5\n\nif __name__ == '__main__':\n    print nth_hexagonal_number(6)\n    print nth_hexagonal_number(10)",
      -1.3310546875
    ],
    [
      "import time\nstart_time = time.time()\n\ndef get_hexagon_number(n):\n    \"\"\"\n    Return the nth centered hexagonal number.\n    \"\"\"\n    n = int(n)\n    return (1 + (n + 1) * (n + 2) / 2) / 2\n\nif __name__ == '__main__':\n    print(get_hexagon_number(10))\n    print(time.time() - start_time)",
      -1.4306640625
    ],
    [
      "import math\n\ndef hexagonal_nth_centered(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.floor(n * math.sqrt(3) / 2)\n\nif __name__ == '__main__':\n    print hexagonal_nth_centered(1)\n    print hexagonal_nth_centered(2)\n    print hexagonal_nth_centered(3)\n    print hexagonal_nth_centered(4)\n    print hexagonal_nth_centered(5)\n    print hexagonal_nth_centered(6)\n    print hexagonal_nth_centered(7)\n    print hexagonal_nth_centered(8)\n    print hexagonal_nth_centered(9)\n    print hexagonal_nth_centered(10)\n    print hexagonal_nth_centered(11)\n    print hexagonal_nth_centered(12)\n    print hexagonal_nth_centered(13)\n    print hexagonal_nth_centered(14)\n    print hexagonal_nth_centered(15)\n    print hexagonal_nth_centered(16)\n    print hexagonal_nth_centered(17)\n    print hexagonal_nth_centered(18)\n    print hexagonal_nth_centered(19)\n    print hexagonal_nth_centered(20)\n    print hexagonal_nth_centered(21)\n    print hexagonal_nth_centered(22)\n    print hexagonal_nth_centered(23)\n    print hexagonal_nth_centered(24)\n    print hexagonal_nth_centered(25)\n    print hexagonal_nth_centered(26)\n    print hexagonal_nth_centered(27)\n    print hexagonal_nth_centered(28)\n    print hexagonal_nth_centered(29)\n    print hexagonal_nth_centered(30)\n    print hexagonal_nth_centered(31)\n    print hexagonal_nth_centered(32)\n    print hexagonal_nth_centered(33)\n    print hexagonal_nth_centered(34)\n    print",
      -1.5029296875
    ],
    [
      "import math\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # nth hexagonal number is the sum of the nth and (n+1)th hexagonal number\n    return n * (n + 1) / 2\n\n\nif __name__ == \"__main__\":\n    assert nth_hexagonal_number(1) == 16, \"n = 1\"\n    assert nth_hexagonal_number(2) == 32, \"n = 2\"\n    assert nth_hexagonal_number(3) == 48, \"n = 3\"\n    assert nth_hexagonal_number(4) == 64, \"n = 4\"\n    assert nth_hexagonal_number(5) == 80, \"n = 5\"\n    assert nth_hexagonal_number(6) == 96, \"n = 6\"\n    assert nth_hexagonal_number(7) == 112, \"n = 7\"\n    assert nth_hexagonal_number(8) == 128, \"n = 8\"\n    assert nth_hexagonal_number(9) == 144, \"n = 9\"\n    assert nth_hexagonal_number(10) == 160, \"n = 10\"\n    assert nth_hexagonal_number(11) == 176, \"n = 11\"\n    assert nth_hexagonal_number(12) == 192, \"n = 12\"\n    assert nth_hexagonal_number(13) == 208, \"n = 13\"\n    assert nth_hexagonal_number(14) == 224, \"n = 14\"\n    assert nth_hexagonal_number(15) == 240, \"n = 15\"\n    assert nth_hexagonal_number(16) == 256, \"n = 16\"\n    assert nth_hexagonal_number(17) == 272, \"n = 17\"\n    assert nth_hexagonal_number(18) == 288, \"n = 18\"\n    assert nth_hexagonal_number(19) == 304, \"n = 19\"\n    assert nth_hexagonal_number(20) == 320, \"n = 20\"\n    assert nth_hexagonal",
      -1.62890625
    ],
    [
      "def find_nth_hexagonal_number(n):\n    \"\"\"\n    Input:\n        n (int)\n    Output:\n        The nth hexagonal number.\n    \"\"\"\n    return (n * (3 * n - 1) + 1) / (2 * n)\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_nth_hexagonal_number(1) == 1, \"1st hexagonal number is {}\".format(find_nth_hexagonal_number(1))\n    assert find_nth_hexagonal_number(2) == 6, \"2nd hexagonal number is {}\".format(find_nth_hexagonal_number(2))\n    assert find_nth_hexagonal_number(3) == 15, \"3rd hexagonal number is {}\".format(find_nth_hexagonal_number(3))\n    assert find_nth_hexagonal_number(4) == 36, \"4th hexagonal number is {}\".format(find_nth_hexagonal_number(4))\n    assert find_nth_hexagonal_number(5) == 105, \"5th hexagonal number is {}\".format(find_nth_hexagonal_number(5))\n    assert find_nth_hexagonal_number(6) == 236, \"6th hexagonal number is {}\".format(find_nth_hexagonal_number(6))\n    assert find_nth_hexagonal_number(7) == 477, \"7th hexagonal number is {}\".format(find_nth_hexagonal_number(7))\n    assert find_nth_hexagonal_number(8) == 1177, \"8th hexagonal number is {}\".format(find_nth_hexagonal_number(8))\n    assert find_nth_hexagonal_number(9) == 2836, \"9th hexagonal number is {}\".format(find_nth_hexagonal_number(9))\n    assert find_nth_hexagonal_number(10) == 6578, \"10th hexagonal number is {}\".format(find_nth_hexagonal_number(10))",
      -1.787109375
    ],
    [
      "import math\n\ndef nth_hex(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return math.ceil(n * (1 + math.sqrt(5)) / 2)\n\n\nif __name__ == '__main__':\n    print nth_hex(1)\n    print nth_hex(2)\n    print nth_hex(3)\n    print nth_hex(4)\n    print nth_hex(5)\n    print nth_hex(6)\n    print nth_hex(7)\n    print nth_hex(8)\n    print nth_hex(9)\n    print nth_hex(10)\n    print nth_hex(11)\n    print nth_hex(12)\n    print nth_hex(13)\n    print nth_hex(14)\n    print nth_hex(15)\n    print nth_hex(16)\n    print nth_hex(17)\n    print nth_hex(18)\n    print nth_hex(19)\n    print nth_hex(20)\n    print nth_hex(21)\n    print nth_hex(22)\n    print nth_hex(23)\n    print nth_hex(24)\n    print nth_hex(25)\n    print nth_hex(26)\n    print nth_hex(27)\n    print nth_hex(28)\n    print nth_hex(29)\n    print nth_hex(30)\n    print nth_hex(31)\n    print nth_hex(32)\n    print nth_hex(33)\n    print nth_hex(34)\n    print nth_hex(35)\n    print nth_hex(36)\n    print nth_hex(37)\n    print nth_hex(38)\n    print nth_hex(39)\n    print nth_hex(40)\n    print nth_hex(41)\n    print nth_hex(42)\n    print nth_hex(43)\n    print nth_hex(44)\n    print n",
      -2.189453125
    ],
    [
      "from utils.math_utils import is_prime\n\n\ndef hexagonal_nth_center_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    n = n // 2\n    n += n % 2\n    return n\n\n\nif __name__ == '__main__':\n    assert hexagonal_nth_center_number(0) == 0, \\\n        \"0th center number is {}\".format(hexagonal_nth_center_number(0))\n    assert hexagonal_nth_center_number(1) == 1, \\\n        \"1st center number is {}\".format(hexagonal_nth_center_number(1))\n    assert hexagonal_nth_center_number(2) == 2, \\\n        \"2nd center number is {}\".format(hexagonal_nth_center_number(2))\n    assert hexagonal_nth_center_number(3) == 3, \\\n        \"3rd center number is {}\".format(hexagonal_nth_center_number(3))\n    assert hexagonal_nth_center_number(4) == 4, \\\n        \"4th center number is {}\".format(hexagonal_nth_center_number(4))\n    assert hexagonal_nth_center_number(5) == 5, \\\n        \"5th center number is {}\".format(hexagonal_nth_center_number(5))\n    assert hexagonal_nth_center_number(6) == 6, \\\n        \"6th center number is {}\".format(hexagonal_nth_center_number(6))\n    assert hexagonal_nth_center_number(7) == 7, \\\n        \"7th center number is {}\".format(hexagonal_nth_center_number(7))\n    assert hexagonal_nth_center_number(8) == 8, \\\n        \"8th center number is {}\".format(hexagonal_nth_center_number(8))\n    assert hexagonal_nth_center_number(9) == 9, \\\n        \"9th center number is {}\".format(hexagonal_nth_",
      -2.3828125
    ],
    [
      "import math\nfrom math import sqrt\n\n\ndef get_hexagonal_nth_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    hexagonal_nth = 0\n    for i in range(1, n + 1):\n        hexagonal_nth += (i**2 - i + 1) * (sqrt(3) + 1)\n    return hexagonal_nth\n\n\ndef test_get_hexagonal_nth_number():\n    assert get_hexagonal_nth_number(3) == 13\n    assert get_hexagonal_nth_number(4) == 42\n    assert get_hexagonal_nth_number(10) == 908\n    assert get_hexagonal_nth_number(15) == 1775\n    assert get_hexagonal_nth_number(20) == 2575\n    assert get_hexagonal_nth_number(25) == 4133\n    assert get_hexagonal_nth_number(30) == 6175\n    assert get_hexagonal_nth_number(35) == 9353\n\n\nif __name__ == '__main__':\n    test_get_hexagonal_nth_number()",
      -2.537109375
    ],
    [
      "import math\n\n\ndef nth_hexagon(n, base=10):\n    \"\"\"\n    Given base, calculate nth hexagonal number.\n    \"\"\"\n    hexagon = 1\n    for i in range(n):\n        hexagon *= math.sqrt(base)\n        hexagon /= math.sqrt(math.sqrt(base))\n    return hexagon\n\n\ndef test_nth_hexagon():\n    assert nth_hexagon(1) == 3\n    assert nth_hexagon(2) == 7\n    assert nth_hexagon(3) == 11\n    assert nth_hexagon(4) == 15\n    assert nth_hexagon(5) == 19\n    assert nth_hexagon(6) == 23\n    assert nth_hexagon(7) == 29\n    assert nth_hexagon(8) == 35\n    assert nth_hexagon(9) == 43\n    assert nth_hexagon(10) == 51\n\n\nif __name__ == \"__main__\":\n    test_nth_hexagon()",
      -2.712890625
    ],
    [
      "from math import ceil, sqrt\n\ndef hexagon(n):\n    n = int(ceil(sqrt(n)))\n    return (n*(n+1)/2) + (n*(n+1)/2 - n)\n\nif __name__ == '__main__':\n    assert hexagon(1) == 1\n    assert hexagon(2) == 3\n    assert hexagon(3) == 6\n    assert hexagon(4) == 10\n    assert hexagon(5) == 15\n    assert hexagon(6) == 21\n    assert hexagon(7) == 28\n    assert hexagon(8) == 36\n    assert hexagon(9) == 45\n    assert hexagon(10) == 55\n    assert hexagon(11) == 66\n    assert hexagon(12) == 78\n    assert hexagon(13) == 91\n    assert hexagon(14) == 106\n    assert hexagon(15) == 121\n    assert hexagon(16) == 136\n    assert hexagon(17) == 151\n    assert hexagon(18) == 166\n    assert hexagon(19) == 181\n    assert hexagon(20) == 196\n    assert hexagon(21) == 201\n    assert hexagon(22) == 206\n    assert hexagon(23) == 211\n    assert hexagon(24) == 216\n    assert hexagon(25) == 221\n    assert hexagon(26) == 226\n    assert hexagon(27) == 231\n    assert hexagon(28) == 236\n    assert hexagon(29) == 241\n    assert hexagon(30) == 246\n    assert hexagon(31) == 251\n    assert hexagon(32) == 256\n    assert hexagon(33) == 261\n    assert hexagon(34) == 266\n    assert hexagon(35) == 271\n    assert hexagon(36) == 276\n    assert hexagon(37) == 281\n    assert hexagon(38) == 286\n    assert hexagon(39) == 291\n    assert hexagon(40) == 296\n    assert hexagon(41) == 301\n    assert hexagon(42) == 306\n    assert hexagon(43) == 311\n    assert hexagon(44) == 316\n    assert",
      -2.900390625
    ],
    [
      "from math import sqrt\n\n\ndef nth_hexagon(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 1\n    return sqrt(6 * (n - 1) / (3 * n + 1))\n\n\nif __name__ == '__main__':\n    assert nth_hexagon(2) == 1.4142135623730951\n    assert nth_hexagon(3) == 1.8183524277916272\n    assert nth_hexagon(4) == 2.23606797749979\n    assert nth_hexagon(5) == 2.6457513110645907\n    assert nth_hexagon(6) == 3.0317440777281893\n    assert nth_hexagon(7) == 3.3616832559682539\n    assert nth_hexagon(8) == 3.6153846153852014\n    assert nth_hexagon(9) == 4.0",
      -3.0625
    ],
    [
      "def nth_hexagonal(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    \n    # initialize\n    start = 1\n    end = 1000000\n    \n    # while start <= end\n    while start <= end:\n        # find the value of middle number\n        middle = (start + end) / 2\n        \n        # find the center\n        center = (start + end) / 2\n        \n        # find the value of the middle number\n        middle_value = (start * start - end * end) / (2 * center)\n        \n        # find the value of the middle number\n        middle_value = (start * start - end * end) / (2 * center)\n        \n        # check if the middle number is the nth\n        if middle_value == n:\n            # return the value\n            return middle\n        \n        # check if the middle number is greater than the nth\n        if middle_value > n:\n            end = middle - 1\n        \n        # check if the middle number is less than the nth\n        else:\n            start = middle + 1\n    \n    # return -1 if the number is not found\n    return -1\n    \n    \n# test\nn = 3\nprint nth_hexagonal(n)",
      -3.740234375
    ],
    [
      "def hexagonal_nth_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    if n > 100:\n        return 1\n    num = 0\n    for i in range(1, n):\n        num = (num + (i**2) + (n**2)) / (i + n)\n    return num\n\n\nif __name__ == '__main__':\n    print hexagonal_nth_number(1)\n    print hexagonal_nth_number(2)\n    print hexagonal_nth_number(3)\n    print hexagonal_nth_number(4)\n    print hexagonal_nth_number(5)\n    print hexagonal_nth_number(6)\n    print hexagonal_nth_number(7)\n    print hexagonal_nth_number(8)\n    print hexagonal_nth_number(9)\n    print hexagonal_nth_number(10)\n    print hexagonal_nth_number(11)\n    print hexagonal_nth_number(12)\n    print hexagonal_nth_number(13)\n    print hexagonal_nth_number(14)\n    print hexagonal_nth_number(15)\n    print hexagonal_nth_number(16)\n    print hexagonal_nth_number(17)\n    print hexagonal_nth_number(18)\n    print hexagonal_nth_number(19)\n    print hexagonal_nth_number(20)\n    print hexagonal_nth_number(21)\n    print hexagonal_nth_number(22)\n    print hexagonal_nth_number(23)\n    print hexagonal_nth_number(24)\n    print hexagonal_nth_number(25)\n    print hexagonal_nth_number(26)\n    print hexagonal_nth_number(27)\n    print hexagonal_nth_number(28)\n    print hexagonal_nth_number(29)\n    print hexagonal_nth_number(30)\n    print hexagonal_nth_number(31",
      -4.171875
    ],
    [
      "def hexagon_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n + 1) * (n + 2) / 2 - n * n / 2\n\nif __name__ == '__main__':\n    assert hexagon_nth(1) == 8\n    assert hexagon_nth(2) == 15\n    assert hexagon_nth(3) == 21\n    assert hexagon_nth(4) == 32\n    assert hexagon_nth(5) == 45\n    assert hexagon_nth(6) == 64\n    assert hexagon_nth(7) == 81\n    assert hexagon_nth(8) == 100\n    assert hexagon_nth(9) == 121\n    assert hexagon_nth(10) == 144\n    assert hexagon_nth(11) == 169\n    assert hexagon_nth(12) == 196\n    assert hexagon_nth(13) == 225\n    assert hexagon_nth(14) == 256\n    assert hexagon_nth(15) == 289\n    assert hexagon_nth(16) == 324\n    assert hexagon_nth(17) == 361\n    assert hexagon_nth(18) == 394\n    assert hexagon_nth(19) == 432\n    assert hexagon_nth(20) == 461\n    assert hexagon_nth(21) == 498\n    assert hexagon_nth(22) == 527\n    assert hexagon_nth(23) == 556\n    assert hexagon_nth(24) == 585\n    assert hexagon_nth(25) == 614\n    assert hexagon_nth(26) == 643\n    assert hexagon_nth(27) == 672\n    assert hexagon_nth(28) == 710\n    assert hexagon_nth(29) == 739\n    assert hexagon_nth(30) == 769\n    assert hexagon_nth(31) == 798\n    assert hexagon_nth(32) == 827\n    assert hexagon_nth(33) == 856\n    assert hex",
      -4.29296875
    ],
    [
      "from math import sqrt\n\ndef hexagon_nth(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n    return sum_of_squares\n\nif __name__ == '__main__':\n    print hexagon_nth(6)",
      -4.65625
    ],
    [
      "import math\n\ndef hexagonal_nth_centered_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # nth centered hexagonal number is nth hexagon number + nth hexagon number + (n - 1)th hexagon number\n    return (n * (n + 1) + n) / 2\n\n\n# Testing\nif __name__ == '__main__':\n    print hexagonal_nth_centered_number(2)\n    print hexagonal_nth_centered_number(3)\n    print hexagonal_nth_centered_number(4)\n    print hexagonal_nth_centered_number(5)",
      -5.23828125
    ],
    [
      "import math\n\ndef get_hexagonal_nth_number(n):\n    return (n * (n + 1)) / 6\n\ndef get_hexagonal_nth_number_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return (n * (n + 1)) / 6\n    else:\n        return (n * (n + 1)) / 6 + (n + 1) / 2\n\ndef get_hexagonal_nth_number_iterative(n):\n    return math.ceil(math.sqrt(n * (n + 1)) / 6)\n\nif __name__ == '__main__':\n    print(get_hexagonal_nth_number(1))\n    print(get_hexagonal_nth_number_recursive(1))\n    print(get_hexagonal_nth_number_iterative(1))",
      -5.46875
    ],
    [
      "# https://www.geeksforgeeks.org/nth-center-hexagonal-number/\n\n# Note:\n# the hexagonal number is not necessarily nth-center\n# for example: nth-center(1,10) = 12\n# nth-center(2,10) = 16\n# nth-center(3,10) = 20\n# nth-center(4,10) = 24\n# nth-center(5,10) = 28\n# nth-center(6,10) = 32\n# nth-center(7,10) = 36\n# nth-center(8,10) = 40\n# nth-center(9,10) = 44\n# nth-center(10,10) = 48\n# nth-center(11,10) = 52\n# nth-center(12,10) = 56\n# nth-center(13,10) = 60\n# nth-center(14,10) = 64\n# nth-center(15,10) = 68\n# nth-center(16,10) = 72\n# nth-center(17,10) = 76\n# nth-center(18,10) = 80\n# nth-center(19,10) = 84\n# nth-center(20,10) = 88\n# nth-center(21,10) = 92\n# nth-center(22,10) = 96\n# nth-center(23,10) = 100\n# nth-center(24,10) = 104\n# nth-center(25,10) = 108\n# nth-center(26,10) = 112\n# nth-center(27,10) = 116\n# nth-center(28,10) = 120\n# nth-center(29,10) = 124\n# nth-center(30,10) = 128\n# nth-center(31,10) = 132\n# nth-center(32,10) = 136\n# nth-center(33,10) = 140\n# nth-center(34,10) = 144\n# nth-center(35,10) = 148\n# nth-center(36,10) = 152",
      -5.67578125
    ],
    [
      "import math\n\ndef get_nth_hexagon_number(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    # https://en.wikipedia.org/wiki/Hexagonal_number\n    # The hexagonal numbers 1 to 6 are:\n    # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61\n    # 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62\n    # 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96\n    # 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97\n    # 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98\n    # 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99\n    # 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85",
      -5.70703125
    ],
    [
      "from math import sqrt, ceil, floor\n\ndef hexnth(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_1(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_2(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_3(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_4(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_5(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_6(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_7(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_8(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_9(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_10(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_11(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) % 6) - 1\n\ndef hexnth_12(n):\n    return (n * (n + 1) / 2) + (n * (n + 1) %",
      -5.90625
    ],
    [
      "def nth_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if n == 0:\n        return 1\n    if n == 1:\n        return 6\n    if n == 2:\n        return 15\n    if n == 3:\n        return 30\n    if n == 4:\n        return 60\n    if n == 5:\n        return 120\n    if n == 6:\n        return 200\n    if n == 7:\n        return 300\n    if n == 8:\n        return 400\n    if n == 9:\n        return 500\n    if n == 10:\n        return 600\n    if n == 11:\n        return 700\n    if n == 12:\n        return 800\n    if n == 13:\n        return 900\n    if n == 14:\n        return 1000\n    if n == 15:\n        return 1100\n    if n == 16:\n        return 1200\n    if n == 17:\n        return 1300\n    if n == 18:\n        return 1400\n    if n == 19:\n        return 1500\n    if n == 20:\n        return 1600\n    if n == 21:\n        return 1700\n    if n == 22:\n        return 1800\n    if n == 23:\n        return 1900\n    if n == 24:\n        return 2000\n    if n == 25:\n        return 2100\n    if n == 26:\n        return 2200\n    if n == 27:\n        return 2300\n    if n == 28:\n        return 2400\n    if n == 29:\n        return 2500\n    if n == 30:\n        return 2600\n    if n == 31:\n        return 2700\n    if n == 32:\n        return 2800\n    if n == 33:\n        return 2900\n    if n == 34:\n        return 3000\n    if n == 35:\n        return 3100\n    if n == 36:\n        return 3200\n    if n == 37:\n        return 3300\n    if n == 38:\n        return 3400\n    if n == 39:\n        return 3500\n    if n == 40:\n        return 3600\n    if n == 41:\n        return 37",
      -5.99609375
    ],
    [
      "def nth_hexagon(n):\n    \"\"\"\n    nth_hexagon(n) -> integer\n\n    Returns the nth hexagon number.\n    \"\"\"\n    hexagon_numbers = [\n        [1,2,3,4,5],\n        [1,2,3,6,5],\n        [1,3,4,6,5],\n        [1,3,5,6,5],\n        [2,3,4,6,5],\n        [2,3,5,6,5],\n        [2,4,5,6,5],\n        [2,4,6,6,5],\n        [3,4,5,6,5],\n        [3,4,6,6,5],\n        [3,5,6,6,5],\n        [3,5,6,7,5],\n        [4,5,6,7,5],\n        [4,5,7,7,5],\n        [5,6,7,7,5],\n        [5,6,7,8,5],\n        [6,7,7,8,5],\n        [6,7,8,8,5],\n        [7,8,8,8,5],\n        [7,8,9,8,5],\n        [8,9,8,8,5],\n        [8,9,9,8,5],\n        [9,10,8,8,5],\n        [9,10,9,8,5],\n        [10,10,10,8,5],\n        [10,10,10,9,5],\n        [11,10,10,10,5],\n        [11,10,11,10,5],\n        [11,10,11,11,5],\n        [11,11,11,11,5],\n        [11,11,12,11,5],\n        [11,12,12,12,5],\n        [12,12,12,12,5],\n        [12,12,13,12,5],\n        [13,12,13,13,5],\n        [13,12,13,14",
      -6.20703125
    ],
    [
      "import math\n\ndef find_hexagonal_nth(n):\n    \"\"\"\n    Given a number, return its hexagonal nth centered number.\n    \"\"\"\n    hexagonal_nth_center = math.floor(math.sqrt(math.pow(n, 3) / math.pow(n, 2)))\n    return hexagonal_nth_center * (n - hexagonal_nth_center)\n\n# Test Cases\nprint find_hexagonal_nth(1)\nprint find_hexagonal_nth(2)\nprint find_hexagonal_nth(3)\nprint find_hexagonal_nth(4)\nprint find_hexagonal_nth(5)\nprint find_hexagonal_nth(6)\nprint find_hexagonal_nth(7)\nprint find_hexagonal_nth(8)\nprint find_hexagonal_nth(9)\nprint find_hexagonal_nth(10)\nprint find_hexagonal_nth(11)\nprint find_hexagonal_nth(12)\nprint find_hexagonal_nth(13)\nprint find_hexagonal_nth(14)\nprint find_hexagonal_nth(15)\nprint find_hexagonal_nth(16)\nprint find_hexagonal_nth(17)\nprint find_hexagonal_nth(18)\nprint find_hexagonal_nth(19)\nprint find_hexagonal_nth(20)\nprint find_hexagonal_nth(21)\nprint find_hexagonal_nth(22)\nprint find_hexagonal_nth(23)\nprint find_hexagonal_nth(24)\nprint find_hexagonal_nth(25)\nprint find_hexagonal_nth(26)\nprint find_hexagonal_nth(27)\nprint find_hexagonal_nth(28)\nprint find_hexagonal_nth(29)\nprint find_hexagonal_nth(30)\nprint find_hexagonal_nth(31)\nprint find_hexagonal_nth(32)\nprint find_hexagonal_nth(33)\nprint find_hexagonal_nth(34)\nprint",
      -6.21484375
    ],
    [
      "import time\n\nstart_time = time.time()\n\n\ndef nth_center(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    # n is the number of hexagons\n    # H(n) = n(n+1)/2 - (n-1)(n-2)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-2)/2 + (n-1)(n-3)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-2)/2 + (n-1)(n-4)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-3)/2 + (n-1)(n-5)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-4)/2 + (n-1)(n-6)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-5)/2 + (n-1)(n-7)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-6)/2 + (n-1)(n-8)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-7)/2 + (n-1)(n-9)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-8)/2 + (n-1)(n-10)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-9)/2 + (n-1)(n-11)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-10)/2 + (n-1)(n-12)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-11)/2 + (n-1)(n-13)/2\n    # H(n) = n(n+1)/2 - (n-1)(n-12)/2 + (n",
      -6.37890625
    ],
    [
      "from math import sqrt, ceil\nfrom itertools import count\n\n\ndef hexagon_nth_centered_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    sqrt_n = int(ceil(sqrt(n)))\n    return ((n - 1) * sqrt_n * (sqrt_n + 1)) // 2\n\n\nif __name__ == '__main__':\n    print(hexagon_nth_centered_number(10))",
      -6.45703125
    ],
    [
      "import math\nfrom functools import reduce\n\ndef hexagonal_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n * (n + 1)) / 2\n\n\ndef hexagonal_nth_recursive(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return hexagonal_nth_recursive(n - 1) + hexagonal_nth_recursive(n - 2)\n\n\ndef hexagonal_nth_recursive_iter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return hexagonal_nth_recursive_iter(n - 1) + hexagonal_nth_recursive_iter(n - 2)\n\n\ndef hexagonal_nth_iter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return hexagonal_nth_iter(n - 1) + hexagonal_nth_iter(n - 2)\n\n\ndef hexagonal_nth_recursive_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(hexagonal_nth_recursive(n))\n\n\ndef hexagonal_nth_recursive_sum_iter(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(hexagonal_nth_recursive_iter(n))\n\n\ndef hexagonal_nth_iter_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(hexagonal_nth_iter(n))\n\n\ndef hexagonal_nth_recursive_sum_iter_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(hexagonal_nth_recursive_iter_sum(n))\n\n\ndef hexagonal_nth_recursive_",
      -6.57421875
    ],
    [
      "from math import sqrt\n\ndef nth_centered_hexagonal_number(n, k):\n    \"\"\"\n    Input:\n    n: number of hexagonal numbers to be calculated\n    k: number of hexagonal numbers to be calculated\n    Output:\n    the nth centered hexagonal number\n    \"\"\"\n    hexagonal_numbers = [i for i in range(1, n + 1)]\n    return hexagonal_numbers[k - 1] + sqrt(3) * (hexagonal_numbers[k - 1] - hexagonal_numbers[k - 2])\n\nif __name__ == '__main__':\n    assert nth_centered_hexagonal_number(10, 9) == 2160\n    assert nth_centered_hexagonal_number(10, 10) == 2160\n    assert nth_centered_hexagonal_number(10, 11) == 2280\n    assert nth_centered_hexagonal_number(10, 12) == 2440\n    assert nth_centered_hexagonal_number(10, 13) == 2880\n    assert nth_centered_hexagonal_number(10, 14) == 3240\n    assert nth_centered_hexagonal_number(10, 15) == 3720\n    assert nth_centered_hexagonal_number(10, 16) == 4280\n    assert nth_centered_hexagonal_number(10, 17) == 4720\n    assert nth_centered_hexagonal_number(10, 18) == 5040\n    assert nth_centered_hexagonal_number(10, 19) == 5600\n    assert nth_centered_hexagonal_number(10, 20) == 6240\n    assert nth_centered_hexagonal_number(10, 21) == 6880\n    assert nth_centered_hexagonal_number(10, 22) == 7360\n    assert nth_centered_hexagonal_number(10, 23) == 7840\n    assert nth_centered_hexagonal_number(10, 24) == 8320\n    assert nth_centered_hexagonal_number(10, 25) == 8880\n    assert nth_centered_hexagonal_number(10, 26) == 9440\n    assert nth_centered",
      -6.765625
    ],
    [
      "def find_nth(n):\n    \"\"\"\n    nth centered hexagonal number is the nth hexagonal number which is the sum of the squares of its\n    six hexagonal neighbors.\n    \"\"\"\n    return sum(sum(i**2 for i in neighbours(n)))\n\ndef neighbours(n):\n    \"\"\"\n    nth hexagonal number has six neighbors.\n    \"\"\"\n    return ((n+1, n-1), (n+2, n-2), (n+3, n-3), (n+4, n-4), (n+5, n-5), (n+6, n-6))\n\nif __name__ == '__main__':\n    print(find_nth(1))\n    print(find_nth(2))\n    print(find_nth(3))\n    print(find_nth(4))\n    print(find_nth(5))\n    print(find_nth(6))\n    print(find_nth(7))",
      -6.83984375
    ],
    [
      "import math\n\ndef hexagon_centered_number(n):\n    \"\"\"\n    nth centered hexagonal number\n    \"\"\"\n    s = math.sqrt(3)\n    return (n * s) + ((n - 1) * s) / 2\n\ndef test_hexagon_centered_number():\n    assert hexagon_centered_number(1) == hexagon_centered_number(2) == hexagon_centered_number(3) == hexagon_centered_number(4) == hexagon_centered_number(5) == hexagon_centered_number(6) == hexagon_centered_number(7) == hexagon_centered_number(8) == hexagon_centered_number(9) == hexagon_centered_number(10) == hexagon_centered_number(11) == hexagon_centered_number(12) == hexagon_centered_number(13) == hexagon_centered_number(14) == hexagon_centered_number(15) == hexagon_centered_number(16) == hexagon_centered_number(17) == hexagon_centered_number(18) == hexagon_centered_number(19) == hexagon_centered_number(20) == hexagon_centered_number(21) == hexagon_centered_number(22) == hexagon_centered_number(23) == hexagon_centered_number(24) == hexagon_centered_number(25) == hexagon_centered_number(26) == hexagon_centered_number(27) == hexagon_centered_number(28) == hexagon_centered_number(29) == hexagon_centered_number(30) == hexagon_centered_number(31) == hexagon_centered_number(32) == hexagon_centered_number(33) == hexagon_centered_number(34) == hexagon_centered_number(35) == hexagon_centered_number(36) == hexagon_centered_number(37) == hexagon_centered_number(38) == hexagon_centered_number(39) == hexagon_centered_number(40) == hexagon_centered_number(41) == hexagon_centered_number(42) == hexagon_centered_number(43) == hexagon_centered_number(44",
      -7.2890625
    ],
    [
      "from math import sqrt\n\n\ndef hex_nth_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n\n    :param n: Integer\n    :return: Hexagonal number\n    \"\"\"\n    return sqrt(3 ** 2 * (2 * n - 1) / 4 + 1)\n\n\nif __name__ == \"__main__\":\n    assert hex_nth_number(1) == hex_nth_number(3) == hex_nth_number(5) == hex_nth_number(7) == hex_nth_number(9) == hex_nth_number(11) == hex_nth_number(13) == hex_nth_number(15) == hex_nth_number(17) == hex_nth_number(19) == hex_nth_number(21) == hex_nth_number(23) == hex_nth_number(25) == hex_nth_number(27) == hex_nth_number(29) == hex_nth_number(31) == hex_nth_number(33) == hex_nth_number(35) == hex_nth_number(37) == hex_nth_number(39) == hex_nth_number(41) == hex_nth_number(43) == hex_nth_number(45) == hex_nth_number(47) == hex_nth_number(49) == hex_nth_number(51) == hex_nth_number(53) == hex_nth_number(55) == hex_nth_number(57) == hex_nth_number(59) == hex_nth_number(61) == hex_nth_number(63) == hex_nth_number(65) == hex_nth_number(67) == hex_nth_number(69) == hex_nth_number(71) == hex_nth_number(73) == hex_nth_number(75) == hex_nth_number(77) == hex_nth_number(79) == hex_nth_number(81) == hex_nth_number(83) == hex_nth_",
      -7.47265625
    ],
    [
      "import math\n\ndef get_hexagon_nth_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * (int(math.sqrt(3)) + 1) * (n - 1) / 2 + (n - 1) * (n - 1) / 2\n\n\ndef main():\n    print get_hexagon_nth_number(0)\n    print get_hexagon_nth_number(1)\n    print get_hexagon_nth_number(2)\n    print get_hexagon_nth_number(3)\n    print get_hexagon_nth_number(4)\n    print get_hexagon_nth_number(5)\n\nif __name__ == '__main__':\n    main()",
      -7.48828125
    ],
    [
      "def find_nth_centered_hexagonal_number(n):\n    \"\"\"\n    Find nth centered hexagonal number.\n    Input:\n        n: the number.\n    Output:\n        The nth centered hexagonal number.\n    \"\"\"\n    # write your code here\n    # n is an integer\n    # n <= 1000\n    # n is even\n    # n is odd\n\n    # calculate the nth centered hexagonal number\n    # n is even, calculate the number\n    # n is odd, calculate the number\n\n    # n is even, calculate the number\n    if n % 2 == 0:\n        return (n*(n+1) + (2*n+1)*n/6)\n\n    # n is odd, calculate the number\n    else:\n        return ((n*(n+1) + (2*n+1)*n/6) - (n/2))\n\n\nif __name__ == '__main__':\n    print(find_nth_centered_hexagonal_number(3))\n    print(find_nth_centered_hexagonal_number(5))\n    print(find_nth_centered_hexagonal_number(7))\n    print(find_nth_centered_hexagonal_number(9))\n    print(find_nth_centered_hexagonal_number(11))\n    print(find_nth_centered_hexagonal_number(13))\n    print(find_nth_centered_hexagonal_number(15))\n    print(find_nth_centered_hexagonal_number(17))\n    print(find_nth_centered_hexagonal_number(19))",
      -7.8046875
    ],
    [
      "import math\n\ndef nth_hex(n):\n    nth = int(math.floor(n / 2))\n    # if nth is even, it will be nth + 1\n    # if nth is odd, it will be nth + 2\n    return (nth * (1 + (n % 2))) + 1\n\nif __name__ == '__main__':\n    n = int(input())\n    print(nth_hex(n))",
      -8.015625
    ],
    [
      "def hexagonal_nth_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # The formula is the following:\n    # The nth number is the sum of the following numbers:\n    # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27\n    # except that the sum is bounded by 1 to n\n    # So we can just calculate the sum of the numbers that are\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum of the numbers less than the sum of the numbers\n    # less than the sum",
      -8.3359375
    ],
    [
      "def nth_center_hex(n):\n    \"\"\"\n    nth center hex number\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 6\n    if n == 2:\n        return 4\n    if n == 3:\n        return 5\n    if n == 4:\n        return 3\n    if n == 5:\n        return 7\n    if n == 6:\n        return 2\n    if n == 7:\n        return 8\n    if n == 8:\n        return 1\n    if n == 9:\n        return 6\n    if n == 10:\n        return 4\n    if n == 11:\n        return 5\n    if n == 12:\n        return 3\n    if n == 13:\n        return 7\n    if n == 14:\n        return 2\n    if n == 15:\n        return 8\n    if n == 16:\n        return 1\n    if n == 17:\n        return 6\n    if n == 18:\n        return 4\n    if n == 19:\n        return 5\n    if n == 20:\n        return 3\n    if n == 21:\n        return 7\n    if n == 22:\n        return 2\n    if n == 23:\n        return 8\n    if n == 24:\n        return 1\n    if n == 25:\n        return 6\n    if n == 26:\n        return 4\n    if n == 27:\n        return 5\n    if n == 28:\n        return 3\n    if n == 29:\n        return 7\n    if n == 30:\n        return 2\n    if n == 31:\n        return 8\n    if n == 32:\n        return 1\n    if n == 33:\n        return 6\n    if n == 34:\n        return 4\n    if n == 35:\n        return 5\n    if n == 36:\n        return 3\n    if n == 37:\n        return 7\n    if n == 38:\n        return 2\n    if n == 39:\n        return 8\n    if n == 40:\n        return 1\n    if n == 41:\n        return 6\n    if n == 42:\n        return 4\n    if n == 43:\n        return 5\n    if n",
      -8.390625
    ],
    [
      "def hexagon_nth(n):\n    \"\"\"\n    Given a positive integer n, return the nth centered hexagonal number.\n    \n    For example, given n = 5, return 662.\n    \n    Note:\n    It is possible to recursively solve this problem.\n    \n    \"\"\"\n    # write your code here\n    # Hint:\n    # 1. If n is even, the even number is the sum of two hexagonal numbers,\n    #    so return hexagon_sum(n/2) + hexagon_sum(n/2 - 1)\n    # 2. If n is odd, the odd number is the sum of three hexagonal numbers,\n    #    so return hexagon_sum(n/2) + hexagon_sum(n/2 - 1) + hexagon_sum(n/2 - 2)\n    return hexagon_sum(n)\n\n\ndef hexagon_sum(n):\n    # write your code here\n    # Hint:\n    # 1. If n is even, the even number is the sum of two hexagonal numbers,\n    #    so return hexagon_sum(n/2) + hexagon_sum(n/2 - 1)\n    # 2. If n is odd, the odd number is the sum of three hexagonal numbers,\n    #    so return hexagon_sum(n/2) + hexagon_sum(n/2 - 1) + hexagon_sum(n/2 - 2)\n    return hexagon_sum(n/2) + hexagon_sum(n/2 - 1) + hexagon_sum(n/2 - 2)\n\n\nif __name__ == '__main__':\n    n = 5\n    print hexagon_nth(n)\n    print hexagon_sum(n)",
      -8.390625
    ],
    [
      "import unittest\n\n# Definition for a hexagonal number\nclass HexagonalNumber:\n    def __init__(self, n):\n        self.n = n\n\n    def get_hexagon(self):\n        return self.n\n\n\nclass Solution(object):\n    def nth_centerhex(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: HexagonalNumber\n        \"\"\"\n        nth_centerhex = 0\n        for i in range(1, n + 1):\n            nth_centerhex += i ** 2\n        return HexagonalNumber(nth_centerhex / (n + 1))\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/nth-centerhexagonal-number/solution/\n#\nApproach 1: Recursive\nComplexity Analysis\nTime Complexity: O(log(n))\nSpace Complexity: O(1)\n\n# 1ms 100%\nclass HexagonalNumber {\n    public HexagonalNumber(int n) {\n        this.n = n;\n    }\n\n    public int get_hexagon() {\n        return n;\n    }\n\n    private int n;\n\n    public HexagonalNumber(int n) {\n        this.n = n;\n    }\n\n    public HexagonalNumber() {\n    }\n\n    public static HexagonalNumber getHexagon(int n) {\n        return new HexagonalNumber(n);\n    }\n\n    public static HexagonalNumber getHexagon(int n, int k) {\n        if (n == 0) return new HexagonalNumber();\n        if (n == 1) return new HexagonalNumber(2);\n        if (n == 2) return new HexagonalNumber(4);\n        if (n == 3) return new HexagonalNumber(8);\n        if (n == 4) return new HexagonalNumber(16);\n        return getHexagon(n - 1, k);\n    }\n\n    public static HexagonalNumber nth",
      -8.40625
    ],
    [
      "import math\n\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    For nth hexagonal number, the nth hexagonal number is the sum of the\n    nth prime number and n.\n\n    For example, the first hexagonal number is 1 + 6 + 20 + 40 + 80 + 160\n    + 320 + 640 + 1280 + 2560 + 4096 + 8192 + 16384 + 32768 + 65536.\n    The 10th hexagonal number is 1 + 6 + 20 + 40 + 80 + 160 + 320 + 640\n    + 1280 + 2560 + 4096 + 8192 + 16384 + 32768 + 65536 + 131072 + 262144\n    + 524288 + 1048576 + 2097152 + 4194304 + 8388608 + 16777216 + 33554432\n    + 67108864 + 134217728 + 268435456 + 536870912.\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 6\n    if n == 2:\n        return 20\n    if n == 3:\n        return 40\n    if n == 4:\n        return 80\n    if n == 5:\n        return 160\n    if n == 6:\n        return 320\n    if n == 7:\n        return 640\n    if n == 8:\n        return 1280\n    if n == 9:\n        return 2560\n    if n == 10:\n        return 4096\n    if n == 11:\n        return 8192\n    if n == 12:\n        return 16384\n    if n == 13:\n        return 32768\n    if n == 14:\n        return 65536\n    if n == 15:\n        return 131072\n    if n == 16:\n        return 262144\n    if n == 17:\n        return 524288\n    if n == 18:\n        return 1048576\n    if n == 19:\n        return 2097152\n    if n == 20:\n        return 4194304\n    if n == 21:\n        return 8388608\n    if n == 22:\n        return 16777216\n    if n == 23:\n        return 33554432\n    if n == 24:\n        return",
      -8.8984375
    ],
    [
      "def nth_centered_hexagon(n):\n    \"\"\"\n    Input:\n    n = 1\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 2\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 3\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 4\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 5\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 6\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 7\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 8\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 9\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 10\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 11\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 12\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 13\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 14\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 15\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 16\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 17\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 18\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 19\n    Output:\n    nth centered hexagonal number\n\n    Input:\n    n = 20\n    Output:\n    nth centered hexagonal number\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    el",
      -9.1875
    ],
    [
      "# https://oj.leetcode.com/problems/nth-centered-hexagonal-number/\n# Given an integer n, return the nth centered hexagonal number.\n# For example, the 4th centered hexagonal number is 664.\n# Note: 1 is the first centered hexagonal number.\n#       n must be less than 100,000.\n\n# Note:\n# The hexagonal number is the sum of the squares of its digits.\n# For example, the hexagonal number of 17 is 284.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684, 468.\n# The hexagonal number of 17 is 284, 284, 684",
      -9.1953125
    ],
    [
      "# https://oj.leetcode.com/problems/nth-centered-hexagonal-number/\n# Definition for a hexagonal number.\nclass HexagonalNumber(object):\n    def __init__(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        self.n = n\n        self.nth = []\n\n    def get_nth(self):\n        return self.nth\n\n    def get_hexagon(self):\n        return self.hexagon\n\n    def get_hexagon_str(self):\n        return self.hexagon_str\n\n    def get_nth_str(self):\n        return self.nth_str\n\n    def get_hexagon_str_str(self):\n        return self.hexagon_str_str\n\n    def get_hexagon_str_str_str(self):\n        return self.hexagon_str_str_str\n\n    def get_nth_str_str(self):\n        return self.nth_str_str\n\n    def get_hexagon_str_str_str_str(self):\n        return self.hexagon_str_str_str_str\n\n    def get_nth_str_str_str_str(self):\n        return self.nth_str_str_str_str\n\n    def get_hexagon_str_str_str_str_str(self):\n        return self.hexagon_str_str_str_str_str\n\n    def get_nth_str_str_str_str_str(self):\n        return self.nth_str_str_str_str_str\n\n    def __str__(self):\n        return str(self.n) + \"th centered hexagonal number is \" + self.hexagon_str\n\n\ndef get_nth_centered_hexagonal_number(n, hexagon_number):\n    hexagon_str = hexagon_number.get_hexagon_str()\n    hexagon_str_str = hexagon_number.get_hexagon_str_str()\n\n    if hexagon_str_str:\n        if hexagon_str_str[0] == '0':\n            return hexagon_number.get_nth",
      -9.5390625
    ],
    [
      "from math import sqrt\n\ndef hexagonal_nth_centered_n(n):\n    return sqrt(3.0) * (1 + sqrt(3.0)) * (n - 0.5)\n\n# TEST CASES\n# n = 1\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(1)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(2)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(3)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(4)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(5)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(6)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(7)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(8)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(9)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(10)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(11)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(12)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(13)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(14)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(15)\n# hexagonal_nth_centered_n(n) == hexagonal_nth_centered_n(16)\n# hexagonal_nth_centered_n(n) == hexagonal_n",
      -9.5625
    ],
    [
      "def hexagon_nth(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # nth hexagonal number\n    # (n+1)th hexagonal number = (n+1)(n+2)/2\n    # (n+1)(n+2)/2 = n(n+1) + n(n+2)/2\n    # n(n+1) + n(n+2)/2 = n(n+1) * (n+2) + n(n+2)/2\n    # (n+1) * (n+2) + n(n+2)/2 = n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2\n    # n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2 = n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2\n    # n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2 = n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2\n    # n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2 = n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2\n    # n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2 = n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2\n    # n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2 = n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2\n    # n(n+1) * (n+2) * (n+1)/2 + n(n+2)/2 = n(n+1) * (n+2) * (",
      -9.7578125
    ],
    [
      "def nth_centered_hexagonal_number(n):\n    \"\"\"\n    nth centered hexagonal number\n\n    https://leetcode.com/problems/nth-centered-hexagonal-number/\n    \"\"\"\n    # nth centered hexagonal number is nth centered hexagonal number\n    # for n in range(1, n):\n    #     nth centered hexagonal number = nth centered hexagonal number\n    #     + (n - 1) * (n + 1) / 2\n    #     - n * (n - 1)\n    #     + nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number\n    #     - nth centered hexagonal number\n    #     + nth centered hexagonal number",
      -10.21875
    ],
    [
      "class Solution(object):\n    def getHex(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a = n * (n + 1) / 2\n        b = n * (n + 1) / 2\n        return a + b\n\n# Note:\n# This is a bit tricky.  We need to find the nth hexagonal number.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.\n# The hexagonal numbers are nth centered.",
      -10.28125
    ],
    [
      "def nth_hex(n):\n    \"\"\"\n    nth hexagonal number is nth centered hexagonal number.\n\n    Hexagonal numbers are generated by the formula,\n    n = (n-1)(2n-1)/2.\n    Hexagonal numbers are also known as (p, q) pairs, where p is\n    the number of hexagonal numbers less than n, and q is the number\n    of hexagonal numbers greater than n.\n    \"\"\"\n\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number\n    # nth hexagonal number is nth centered hexagonal number",
      -10.546875
    ],
    [
      "def nth_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Note:\n    # For a hexagonal number, the hexagonal number is the sum of the two square numbers,\n    # each of which is the sum of the two adjacent numbers in the sequence.\n    # We can see that the sum of the squares of the numbers is the number itself,\n    # so we can simply count the number of numbers from 1 to n.\n    # The hexagonal number can be written as:\n    #    (2 * (n - 1) + 1) / 2 * (n - 1)\n    # In the above formula, (2 * (n - 1) + 1) is the sum of the squares of the\n    # numbers from 1 to n.\n    # The hexagonal number can be written as:\n    #    (2 * (n - 1) + 1) * (n - 1) / 2\n    # In the above formula, (2 * (n - 1) + 1) is the sum of the squares of the\n    # numbers from 1 to n.\n    # The hexagonal number can be written as:\n    #    (2 * (n - 1) + 1) * (n - 1) / 2 * (n - 1)\n    # In the above formula, (2 * (n - 1) + 1) is the sum of the squares of the\n    # numbers from 1 to n.\n    # The hexagonal number can be written as:\n    #    (2 * (n - 1) + 1) * (n - 1) / 2 * (n - 1) * (n - 2)\n    # In the above formula, (2 * (n - 1) + 1) is the sum of the squares of the\n    # numbers from 1 to n.\n    # The hexagonal number can be written as:\n    #    (2 * (n - 1) + 1) * (n - 1) / 2 * (n - 1) * (n - 2) * (n - 3)\n    # In the above formula, (2 * (n - 1) + 1) is the sum of the squares of the\n    # numbers from 1 to n.\n    # The hexagonal number",
      -11.0390625
    ],
    [
      "from math import sqrt\n\n\ndef hexagon(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # get the square root of n\n    sqrt_n = int(sqrt(n))\n\n    # get the sum of the squares of the first n-1 digits\n    sum_squares = sum([int(i) ** 2 for i in str(n)])\n\n    # get the sum of the squares of the first n digits\n    sum_squares_first_n = sum([int(i) ** 2 for i in str(sqrt_n)])\n\n    # get the sum of the squares of the last n-1 digits\n    sum_squares_last_n = sum([int(i) ** 2 for i in str(n-1)])\n\n    # get the sum of the squares of the last n digits\n    sum_squares_last_n = sum([int(i) ** 2 for i in str(n-1)])\n\n    # get the sum of the squares of the middle n-1 digits\n    sum_squares_middle_n_minus_1 = sum([int(i) ** 2 for i in str(n-2)])\n\n    # get the sum of the squares of the middle n digits\n    sum_squares_middle_n = sum([int(i) ** 2 for i in str(n-1)])\n\n    # get the sum of the squares of the middle n-1 digits\n    sum_squares_middle_n_minus_1 = sum([int(i) ** 2 for i in str(n-2)])\n\n    # get the sum of the squares of the middle n digits\n    sum_squares_middle_n = sum([int(i) ** 2 for i in str(n-1)])\n\n    # get the sum of the squares of the middle n-1 digits\n    sum_squares_middle_n_minus_1 = sum([int(i) ** 2 for i in str(n-2)])\n\n    # get the sum of the squares of the middle n digits\n    sum_squares_middle_n = sum([int(i) ** 2 for i in str(n-1)])\n\n    # get the sum of the",
      -11.15625
    ],
    [
      "# Definition for a hexagonal number.\n# class HexagonalNumber(object):\n#     def __init__(self, num):\n#         \"\"\"\n#         :type num: int\n#         \"\"\"\n#         self.num = num\n#\n#     def get_hexagonal_number(self):\n#         \"\"\"\n#         :rtype: int\n#         \"\"\"\n#         return self.num\n\nclass Solution(object):\n    def findNth(self, hexagonal, n):\n        \"\"\"\n        :type hexagonal: HexagonalNumber\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # find the number of hexagonal numbers less than n\n        num_hexagonal = 0\n        while hexagonal.get_hexagonal_number() <= n:\n            num_hexagonal += 1\n            hexagonal.num += 1\n        return num_hexagonal\n\nif __name__ == \"__main__\":\n    hexagonal = HexagonalNumber(20)\n    print Solution().findNth(hexagonal, 10)\n    print Solution().findNth(hexagonal, 20)",
      -12.046875
    ],
    [
      "class Solution(object):\n    def getHex(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        hex = 0\n        for i in range(n):\n            hex += (1 + (i/6) + (i/3)) * (i/3)\n        return hex\n\nif __name__ == '__main__':\n    assert Solution().getHex(1) == 1\n    assert Solution().getHex(2) == 6\n    assert Solution().getHex(3) == 15\n    assert Solution().getHex(4) == 52\n    assert Solution().getHex(5) == 203\n    assert Solution().getHex(6) == 548\n    assert Solution().getHex(7) == 1512\n    assert Solution().getHex(8) == 4304\n    assert Solution().getHex(9) == 10800\n    assert Solution().getHex(10) == 27000\n    assert Solution().getHex(11) == 55000\n    assert Solution().getHex(12) == 120000\n    assert Solution().getHex(13) == 260000\n    assert Solution().getHex(14) == 552000\n    assert Solution().getHex(15) == 1205000\n    assert Solution().getHex(16) == 2612000\n    assert Solution().getHex(17) == 55212000\n    assert Solution().getHex(18) == 120512000\n    assert Solution().getHex(19) == 261212000\n    assert Solution().getHex(20) == 5521212000\n    assert Solution().getHex(21) == 12051212000\n    assert Solution().getHex(22) == 26121212000\n    assert Solution().getHex(23) == 552121212000\n    assert Solution().getHex(24) == 1205121212000\n    assert Solution().getHex(25) == 2612121212000\n    assert Solution().getHex(26) == 55212121212000\n    assert Solution().getHex(27) == 120512121212000\n    assert Solution().getHex",
      -13.4453125
    ],
    [
      "from math import sqrt\n\ndef nth_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    c = 1\n    for i in range(1, n):\n        a = (a + sqrt(3)) % 6\n        b = (b + sqrt(5)) % 6\n        c = (c + sqrt(3)) % 6\n    return a * b * c\n\n\nif __name__ == \"__main__\":\n    assert nth_hexagonal_number(1) == 6, \"1st hexagonal number\"\n    assert nth_hexagonal_number(2) == 15, \"2nd hexagonal number\"\n    assert nth_hexagonal_number(3) == 31, \"3rd hexagonal number\"\n    assert nth_hexagonal_number(4) == 52, \"4th hexagonal number\"\n    assert nth_hexagonal_number(5) == 85, \"5th hexagonal number\"\n    assert nth_hexagonal_number(6) == 120, \"6th hexagonal number\"\n    assert nth_hexagonal_number(7) == 165, \"7th hexagonal number\"\n    assert nth_hexagonal_number(8) == 220, \"8th hexagonal number\"\n    assert nth_hexagonal_number(9) == 285, \"9th hexagonal number\"\n    assert nth_hexagonal_number(10) == 360, \"10th hexagonal number\"\n    assert nth_hexagonal_number(11) == 425, \"11th hexagonal number\"\n    assert nth_hexagonal_number(12) == 520, \"12th hexagonal number\"\n    assert nth_hexagonal_number(13) == 605, \"13th hexagonal number\"\n    assert nth_hexagonal_number(14) == 720, \"14th hexagonal number\"\n    assert nth_hexagonal_number(15) == 865, \"15th hexagonal number\"\n    assert nth_hexagonal_number(16) == 1000, \"16th hexagonal number\"",
      -13.6484375
    ],
    [
      "import math\n\ndef nth_hexagonal_number(n):\n    n = int(n)\n    a = (math.sqrt(3) + 1) / 2\n    b = math.sqrt(3)\n    c = (math.sqrt(3) - 1) / 2\n    d = 2 * math.sqrt(3) - 1\n    e = (math.sqrt(3) + 2) / 2\n    f = (math.sqrt(3) - 2) / 2\n    g = (math.sqrt(3) + 4) / 2\n    h = (math.sqrt(3) - 4) / 2\n    k = (math.sqrt(3) + 6) / 2\n    l = (math.sqrt(3) - 6) / 2\n    m = (math.sqrt(3) + 8) / 2\n    n = (math.sqrt(3) - 8) / 2\n    return nth_hexagonal_number(n)\n\nif __name__ == '__main__':\n    print nth_hexagonal_number(2)\n    print nth_hexagonal_number(3)\n    print nth_hexagonal_number(4)\n    print nth_hexagonal_number(5)\n    print nth_hexagonal_number(6)\n    print nth_hexagonal_number(7)\n    print nth_hexagonal_number(8)\n    print nth_hexagonal_number(9)\n    print nth_hexagonal_number(10)\n    print nth_hexagonal_number(11)\n    print nth_hexagonal_number(12)\n    print nth_hexagonal_number(13)\n    print nth_hexagonal_number(14)\n    print nth_hexagonal_number(15)\n    print nth_hexagonal_number(16)\n    print nth_hexagonal_number(17)\n    print nth_hexagonal_number(18)\n    print nth_hexagonal_number(19)\n    print nth_hexagonal_number(20)",
      -13.96875
    ],
    [
      "from math import sqrt\n\n# Returns the nth centered hexagonal number\ndef get_nth_hexagonal(n):\n    return (sqrt(5)*(n+1) + (n+1)/2)**2\n\n# Test Cases\nprint('Hexagonal numbers are:')\nprint('1: {}'.format(get_nth_hexagonal(1)))\nprint('2: {}'.format(get_nth_hexagonal(2)))\nprint('3: {}'.format(get_nth_hexagonal(3)))\nprint('4: {}'.format(get_nth_hexagonal(4)))\nprint('5: {}'.format(get_nth_hexagonal(5)))\nprint('6: {}'.format(get_nth_hexagonal(6)))\nprint('7: {}'.format(get_nth_hexagonal(7)))\nprint('8: {}'.format(get_nth_hexagonal(8)))\nprint('9: {}'.format(get_nth_hexagonal(9)))\nprint('10: {}'.format(get_nth_hexagonal(10)))\nprint('11: {}'.format(get_nth_hexagonal(11)))\nprint('12: {}'.format(get_nth_hexagonal(12)))\nprint('13: {}'.format(get_nth_hexagonal(13)))\nprint('14: {}'.format(get_nth_hexagonal(14)))\nprint('15: {}'.format(get_nth_hexagonal(15)))\nprint('16: {}'.format(get_nth_hexagonal(16)))\nprint('17: {}'.format(get_nth_hexagonal(17)))\nprint('18: {}'.format(get_nth_hexagonal(18)))\nprint('19: {}'.format(get_nth_hexagonal(19)))\nprint('20: {}'.format(get_nth_hexagonal(20)))\nprint('21: {}'.format(get_nth_hexagonal(21)))\nprint('22: {}'.format(get_nth_hexagonal(22)))\nprint('23: {}'.format(get_nth_hexagonal(23)))\nprint('24: {}'.format",
      -14.0078125
    ],
    [
      "def hexagon(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # First of all, we have to make sure that the number is an even number.\n    # We can also make sure that the number is less than 100.\n    # We can also make sure that the number is not 0, since 0 is not a valid number.\n    if not (n % 2 == 0 and n <= 100 and n!= 0):\n        return 0\n    # We can now start to calculate the sum of the squares of the digits.\n    sum = 0\n    for i in range(1, int(n/2) + 1):\n        sum += (i * i)\n    # We have to calculate the sum of the squares of the digits after the nth number.\n    # We can also make sure that the sum of the squares of the digits is not 0.\n    if (n % 2 == 0 and n <= 100 and n!= 0 and sum % 2 == 0):\n        return hexagon(sum)\n    else:\n        return 0",
      -14.328125
    ],
    [
      "def hexagonal_nth(n, hexagonal_numbers):\n    \"\"\"\n    :type n: int\n    :type hexagonal_numbers: List[int]\n    :rtype: int\n    \"\"\"\n    nth_hexagonal_number = hexagonal_numbers[-1]\n    for i in range(len(hexagonal_numbers) - 1):\n        nth_hexagonal_number += hexagonal_numbers[i] * hexagonal_numbers[i + 1]\n    return nth_hexagonal_number\n\ndef test_hexagonal_nth():\n    assert hexagonal_nth(1, [1]) == 1\n    assert hexagonal_nth(2, [1]) == 6\n    assert hexagonal_nth(3, [1]) == 15\n    assert hexagonal_nth(4, [1]) == 40\n    assert hexagonal_nth(5, [1]) == 120\n    assert hexagonal_nth(6, [1]) == 360\n    assert hexagonal_nth(7, [1]) == 1440\n    assert hexagonal_nth(8, [1]) == 4200\n    assert hexagonal_nth(9, [1]) == 12000\n    assert hexagonal_nth(10, [1]) == 36000\n    assert hexagonal_nth(11, [1]) == 144000\n    assert hexagonal_nth(12, [1]) == 497600\n    assert hexagonal_nth(13, [1]) == 1966080\n    assert hexagonal_nth(14, [1]) == 5795280\n    assert hexagonal_nth(15, [1]) == 25331640\n    assert hexagonal_nth(16, [1]) == 1025331640\n    assert hexagonal_nth(17, [1]) == 3125331640\n    assert hexagonal_nth(18, [1]) == 12500331640\n    assert hexagonal_nth(19, [1]) == 37500331640\n    assert hexagonal_nth(20, [1]) == 15000331640\n    assert hexagonal_nth(21, [1]) == 50001331640",
      -14.953125
    ],
    [
      "# Definition for a hexagonal number.\nclass HexagonalNumber:\n    def __init__(self, n):\n        self.n = n\n\n    def get_nth_hexagonal_number(self, n):\n        return hexagonal_numbers[n]\n\n\ndef hexagonal_numbers(n):\n    return [hexagonal_number(n) for hexagonal_number in hexagonal_numbers(n-1)]\n\nhexagonal_numbers = [\n    HexagonalNumber(0),\n    HexagonalNumber(1),\n    HexagonalNumber(2),\n    HexagonalNumber(3),\n    HexagonalNumber(4),\n    HexagonalNumber(5),\n    HexagonalNumber(6),\n    HexagonalNumber(7),\n    HexagonalNumber(8),\n    HexagonalNumber(9),\n    HexagonalNumber(10),\n    HexagonalNumber(11),\n    HexagonalNumber(12),\n    HexagonalNumber(13),\n    HexagonalNumber(14),\n    HexagonalNumber(15),\n    HexagonalNumber(16),\n    HexagonalNumber(17),\n    HexagonalNumber(18),\n    HexagonalNumber(19),\n    HexagonalNumber(20),\n    HexagonalNumber(21),\n    HexagonalNumber(22),\n    HexagonalNumber(23),\n    HexagonalNumber(24),\n    HexagonalNumber(25),\n    HexagonalNumber(26),\n    HexagonalNumber(27),\n    HexagonalNumber(28),\n    HexagonalNumber(29),\n    HexagonalNumber(30),\n    HexagonalNumber(31),\n    HexagonalNumber(32),\n    HexagonalNumber(33),\n    HexagonalNumber(34),\n    HexagonalNumber(35),\n    HexagonalNumber(36),\n    HexagonalNumber(37),\n    HexagonalNumber(38),\n    HexagonalNumber(39),\n    HexagonalNumber(40),\n    HexagonalNumber(41),\n    HexagonalNumber(42),\n    HexagonalNumber(43),\n    HexagonalNumber(44",
      -15.0859375
    ],
    [
      "from math import ceil, sqrt\n\n\ndef get_hexagonal_nth_number(n):\n    \"\"\"\n    Return the nth centered hexagonal number.\n    :type n: int\n    :rtype: int\n    \"\"\"\n    a = sqrt(1 + 8 * n)\n    b = ceil(a ** 2 / (4 * n))\n    return (a * b) ** 2\n\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_hexagonal_nth_number(1) == 15, \"1st hexagonal number is 15\"\n    assert get_hexagonal_nth_number(2) == 8, \"2nd hexagonal number is 8\"\n    assert get_hexagonal_nth_number(3) == 9, \"3rd hexagonal number is 9\"\n    assert get_hexagonal_nth_number(4) == 21, \"4th hexagonal number is 21\"\n    assert get_hexagonal_nth_number(5) == 55, \"5th hexagonal number is 55\"\n    assert get_hexagonal_nth_number(6) == 242, \"6th hexagonal number is 242\"\n    assert get_hexagonal_nth_number(7) == 907, \"7th hexagonal number is 907\"\n    assert get_hexagonal_nth_number(8) == 1555, \"8th hexagonal number is 1555\"\n    assert get_hexagonal_nth_number(9) == 9777, \"9th hexagonal number is 9777\"\n    assert get_hexagonal_nth_number(10) == 13333, \"10th hexagonal number is 13333\"\n    assert get_hexagonal_nth_number(11) == 21666, \"11th hexagonal number is 21666\"\n    assert get_hexagonal_nth_number(12) == 34457, \"12th hexagonal number is 34457\"\n    assert get_hexagonal_nth_number(13) == 98765, \"13th hexagonal number is 98765\"\n    assert get_hexagonal_nth_number(14) == 1728",
      -16.421875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}