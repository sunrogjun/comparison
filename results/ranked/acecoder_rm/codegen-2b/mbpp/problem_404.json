{
  "problem": {
    "task_id": "MBPP/415",
    "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
    "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
    "test_list": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ],
    "challenge_test_list": [],
    "problem_id": 404
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import numpy as np\n\ndef max_product(arr):\n    \"\"\"\n    Finds the pair with highest product from a given array of integers.\n    :param arr: An array of integers.\n    :return: A tuple of two integers. The first element is the first index, and the second is the second index.\n    \"\"\"\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                p = i\n                q = j\n    return (p, q)\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    p, q = max_product(arr)\n    print(\"p is: {}, q is: {}\".format(p, q))\n\nif __name__ == \"__main__\":\n    main()",
      3.423828125
    ],
    [
      "def highest_product(arr):\n    return max(arr)\n\nprint(highest_product([1, 2, 3, 4]))\nprint(highest_product([1, 2, 3, 4, 5]))\nprint(highest_product([1, 2, 3, 4, 5, 6]))",
      2.904296875
    ],
    [
      "def find_max_product(array):\n    max_product = 0\n    for i in range(0, len(array)):\n        for j in range(i+1, len(array)):\n            product = array[i] * array[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ndef test_find_max_product():\n    array = [1, 2, 3, 4, 5, 6]\n    assert find_max_product(array) == 120\n\nif __name__ == \"__main__\":\n    test_find_max_product()",
      2.763671875
    ],
    [
      "def maxProduct(numbers):\n    if not numbers:\n        return 0\n\n    max_product = 0\n    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] * numbers[j] > max_product:\n                max_product = numbers[i] * numbers[j]\n    return max_product\n\nprint(maxProduct([1, 2, 3]))\nprint(maxProduct([2, 4, 6]))\nprint(maxProduct([2, 3, 4, 5]))\nprint(maxProduct([2, 3, 4, 5, 6, 7]))",
      2.44921875
    ],
    [
      "def highest_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_index = i\n    return max_product, max_index\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(highest_product(arr))",
      1.6220703125
    ],
    [
      "def maxProduct(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    for i in xrange(len(arr)):\n        for j in xrange(i+1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5]\n    print(maxProduct(arr))\n    arr = [1,2,3,4,5,6]\n    print(maxProduct(arr))\n    arr = [1,2,3,4,5,6,7]\n    print(maxProduct(arr))",
      1.5029296875
    ],
    [
      "# Complete the findMaxProduct function below.\ndef findMaxProduct(nums):\n    maxProd = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] > maxProd:\n                maxProd = nums[i] * nums[j]\n    return maxProd\n\nif __name__ == '__main__':\n    print findMaxProduct([1, 2, 3, 4, 5])",
      1.1103515625
    ],
    [
      "def find_max_pair(nums):\n    \"\"\"\n    Input:\n    nums = [1, 2, 3, 4]\n\n    Output:\n    [(1, 4), (2, 3)]\n    \"\"\"\n    # write your code here\n    return max_pair(nums, 0, len(nums)-1)\n\ndef max_pair(nums, left, right):\n    \"\"\"\n    Input:\n    nums = [1, 2, 3, 4]\n    left = 0\n    right = len(nums)-1\n\n    Output:\n    [(1, 4), (2, 3)]\n    \"\"\"\n    if left == right:\n        return [nums[left], nums[right]]\n\n    max_left = max_right = 0\n    for i in range(left+1, right):\n        if nums[i] > max_left:\n            max_left = nums[i]\n        if nums[i] < max_right:\n            max_right = nums[i]\n\n    return [(nums[left], max_left), (nums[right], max_right)]\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4]\n    print find_max_pair(nums)",
      0.98291015625
    ],
    [
      "def maxProduct(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    if not a:\n        return 0\n    max_product = a[0]\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] * a[j] > max_product:\n                max_product = a[i] * a[j]\n    return max_product\n\nprint(maxProduct([1, 2, 3, 4, 5]))\nprint(maxProduct([1, 2, 3, 4, 5, 6]))\nprint(maxProduct([1, 2, 3, 4, 5, 6, 7]))\nprint(maxProduct([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(maxProduct([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      0.87548828125
    ],
    [
      "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    maxProd = nums[0]\n    for num in nums:\n        maxProd = max(maxProd, num * num)\n    return maxProd\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 6, 7, 8]\n    print(maxProduct(nums))",
      0.8701171875
    ],
    [
      "def findMaxProduct(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    maxProd = 0\n    maxIndex = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > maxProd:\n                maxProd = arr[i] * arr[j]\n                maxIndex = (i, j)\n\n    return maxIndex\n\n\nif __name__ == '__main__':\n    print(findMaxProduct([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(findMaxProduct([1, 2, 3, 4, 5, 6, 7, 8]))",
      0.828125
    ],
    [
      "import sys\nimport time\nfrom itertools import product\n\ndef find_max_product(nums):\n    max_product = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]*nums[j] > max_product:\n                max_product = nums[i]*nums[j]\n    return max_product\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5,6,7]\n    start_time = time.time()\n    print(find_max_product(nums))\n    print(\"--- %s seconds ---\" % (time.time() - start_time))\n    sys.exit(0)",
      0.80859375
    ],
    [
      "def find_pair(nums):\n    # Complete this function\n    if len(nums) <= 1:\n        return\n\n    product = 1\n    max_product = 1\n    max_index = 0\n    for i in range(len(nums)):\n        product = product * nums[i]\n        if product > max_product:\n            max_product = product\n            max_index = i\n\n    for j in range(len(nums)):\n        if j == max_index:\n            continue\n        product = product * nums[j]\n        if product > max_product:\n            max_product = product\n            max_index = j\n\n    return max_index, max_product\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print find_pair(nums)",
      0.39111328125
    ],
    [
      "def maxProduct(array):\n    if not array:\n        return 0\n    else:\n        max = 0\n        for i in range(len(array)):\n            max = maxProduct(array[:i] + array[i+1:]) if max > array[i] * array[i+1] else max\n        return max\n\nprint(maxProduct([1,2,3,4,5,6,7,8,9,10]))",
      -0.03790283203125
    ],
    [
      "def maxProduct(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    max_prod = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n    return max_prod\n\nif __name__ == \"__main__\":\n    assert maxProduct([2,3,4,5,6,7]) == 144\n    assert maxProduct([0,0,0,0,0,0]) == 0\n    assert maxProduct([-1,2,-3,4,-5,6]) == 6",
      -0.0931396484375
    ],
    [
      "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 1\n    max_p = 1\n    for i in range(1, len(nums)):\n        for j in range(i+1, len(nums)):\n            max_p = max(max_p, nums[i] * nums[j])\n    return max_p\n\nprint(maxProduct([1,2,3,4,5,6,7,8]))\nprint(maxProduct([1,2,3,4,5]))",
      -0.386474609375
    ],
    [
      "from itertools import product\n\ndef get_max_product(nums):\n    max_product = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            prod = nums[i] * nums[j]\n            if prod > max_product:\n                max_product = prod\n    return max_product\n\n\nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 2]\n    print get_max_product(nums)",
      -0.64013671875
    ],
    [
      "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n\n    if len(nums) == 1:\n        return nums[0]\n\n    nums.sort()\n    result = nums[0] * nums[1]\n    for i in range(2, len(nums)):\n        result = max(result, nums[i] * nums[i - 1])\n\n    return result\n\n# Your MaxProduct function will be called like this:\n# nums = [1,2,3,4,5]\n# maxProduct(nums)",
      -0.75048828125
    ],
    [
      "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max:\n                max = product\n    return max\n\nprint(maxProduct([4, 2, 3, 7, 6, 2, 6, 7, 3, 1]))",
      -0.85595703125
    ],
    [
      "def max_product(arr):\n\tmax_product = -1\n\tmax_product_pair = None\n\tfor i in range(0, len(arr)):\n\t\tfor j in range(0, len(arr)):\n\t\t\tproduct = arr[i] * arr[j]\n\t\t\tif product > max_product:\n\t\t\t\tmax_product = product\n\t\t\t\tmax_product_pair = (i, j)\n\treturn max_product_pair\n\nprint(max_product([1, 2, 3, 4, 5, 6]))\nprint(max_product([3, 2, 1, 4, 5, 6]))",
      -0.85595703125
    ],
    [
      "def find_max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            max_product = max(nums[i] * nums[j], max_product)\n    return max_product",
      -0.85693359375
    ],
    [
      "def product(arr):\n    if len(arr) == 0:\n        return 0\n\n    arr.sort()\n    product = arr[0]\n    i = 1\n    while i < len(arr):\n        product *= arr[i]\n        i += 1\n    return product\n\nprint(product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.85693359375
    ],
    [
      "def max_product(array):\n    max_product = array[0]\n    for i in range(1, len(array)):\n        max_product = max(max_product, array[i]*array[i-1])\n    return max_product\n\nprint max_product([2, 3, 1, 4, 1, 8, 9, 2, 6])",
      -0.85693359375
    ],
    [
      "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = -1\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\nif __name__ == '__main__':\n    nums = [3, 2, 4]\n    print(maxProduct(nums))",
      -0.85693359375
    ],
    [
      "def find_max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\nif __name__ == '__main__':\n    arr = [2, 3, 4, 1, 2, 3]\n    print(find_max_product(arr))",
      -0.85693359375
    ],
    [
      "def maxProduct(arr):\n    maxProduct = 0\n    for i in arr:\n        maxProduct = max(maxProduct, i * arr[i-1])\n    return maxProduct\n\nprint maxProduct([1,2,3,4,5])\nprint maxProduct([-1,2,-3,4,-5])",
      -0.85791015625
    ],
    [
      "def highest_product(num):\n    max_prod = 0\n    max_index = 0\n    for i in range(len(num)):\n        for j in range(i+1, len(num)):\n            prod = num[i] * num[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_index = (i,j)\n    return max_index\n\nprint(highest_product([1,2,3,4,5,6]))",
      -0.85791015625
    ],
    [
      "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod*arr[i], arr[i])\n    return max_prod\n\nif __name__ == \"__main__\":\n    print max_product([1,2,3,4,5])",
      -0.8583984375
    ],
    [
      "# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    # @param intervals, a list of Interval\n    # @return a tuple, (start, end), where start <= end\n    def maxProduct(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: Tuple[int, int]\n        \"\"\"\n        if not intervals:\n            return (0, 0)\n        max_start = 0\n        max_end = 0\n        for interval in intervals:\n            start, end = interval.start, interval.end\n            max_start = max(max_start, start)\n            max_end = max(max_end, end)\n        return (max_start, max_end)\n\n# Note:\n# The interval [1, n] is sorted\n# The interval [1, m] is not sorted\n# The interval [n, m] is not sorted",
      -0.8583984375
    ],
    [
      "def product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n\n    Input: arr = [1, 2, 3, 4, 5]\n    Output: (2, 3)\n    \"\"\"\n    arr.sort()\n    max_product = 0\n    for i in range(0, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i + 1])\n    return max_product\n\nif __name__ == \"__main__\":\n    print(product([1, 2, 3, 4, 5]))",
      -0.8583984375
    ],
    [
      "def find_max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    for i in range(len(nums)):\n        max_product = max(max_product, nums[i] * find_max_product(nums[i+1:]) )\n    return max_product\n\nif __name__ == '__main__':\n    assert find_max_product([2,3,1]) == 6\n    assert find_max_product([4,3,2,1]) == 24\n    assert find_max_product([1,2,3,4]) == 24",
      -0.8583984375
    ],
    [
      "def find_pair(a):\n    \"\"\"\n    :type a: list[int]\n    :rtype: tuple[int, int]\n    \"\"\"\n    max_product = 0\n    max_index = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            product = a[i] * a[j]\n            if product > max_product:\n                max_product = product\n                max_index = (i, j)\n    return max_index\n\nif __name__ == \"__main__\":\n    a = [2, 3, 4, 5, 6, 7]\n    print(find_pair(a))",
      -0.8583984375
    ],
    [
      "def find_max_product(numbers):\n    return max(map(lambda x: x*x, numbers))\n\nif __name__ == '__main__':\n    print find_max_product([1, 2, 3, 4, 5])\n    print find_max_product([1, 2, 3, 4])\n    print find_max_product([1, 2, 3])\n    print find_max_product([1, 2])\n    print find_max_product([1])\n    print find_max_product([])",
      -0.8583984375
    ],
    [
      "def maxProduct(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    max = 0\n    maxIndex = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i!= j:\n                product = a[i] * a[j]\n                if max < product:\n                    max = product\n                    maxIndex = (i, j)\n    return maxIndex[0], maxIndex[1]\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    print(maxProduct(a))",
      -0.8583984375
    ],
    [
      "#!/usr/bin/env python\n\ndef get_max_product(nums):\n    max_product = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] > max_product:\n                max_product = nums[i] * nums[j]\n    return max_product\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(get_max_product(nums))",
      -0.8583984375
    ],
    [
      "import timeit\n\n\ndef find_pair(nums):\n    # write your code here\n    if len(nums) < 2:\n        return -1\n    product = 1\n    for i in range(len(nums)):\n        product *= nums[i]\n    for i in range(len(nums)):\n        if product > nums[i]:\n            return i, product\n    return -1\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    start_time = timeit.default_timer()\n    print(find_pair(nums))\n    print(\"--- %s seconds ---\" % (timeit.default_timer() - start_time))",
      -0.8583984375
    ],
    [
      "def getMaxProduct(nums):\n    maxProduct = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] > maxProduct:\n                maxProduct = nums[i] * nums[j]\n    return maxProduct\n\ndef main():\n    nums = [1,2,3]\n    maxProduct = getMaxProduct(nums)\n    print maxProduct\n    nums = [1,2,3,4,5,6,7,8,9]\n    maxProduct = getMaxProduct(nums)\n    print maxProduct\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import numpy as np\n\ndef find_max_product(arr):\n    \"\"\"\n    Find the pair with the highest product\n    :param arr: array of integers\n    :return: pair of integers with highest product\n    \"\"\"\n    max_product = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result = (i, j)\n    return result\n\nif __name__ == \"__main__\":\n    arr = np.array([1, 2, 3, 4, 5])\n    result = find_max_product(arr)\n    print(result)",
      -0.8583984375
    ],
    [
      "def find_max_product(nums):\n    max_product = nums[0]\n    max_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] > max_product:\n            max_product = nums[i]\n            max_index = i\n    return max_product, max_index\n\nprint(find_max_product([1, 2, 3, 4, 5]))",
      -0.8583984375
    ],
    [
      "def max_product(nums):\n    if len(nums) == 0:\n        return 0\n    max_product = nums[0]\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i!= j:\n                product = nums[i] * nums[j]\n                if product > max_product:\n                    max_product = product\n    return max_product\n\n\ndef main():\n    nums = [2,3,4,5,6,7]\n    print max_product(nums)\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "import sys\n\n\ndef get_max_product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n    :param arr: array of integers\n    :return: pair with highest product\n    \"\"\"\n    max_product = 0\n    max_index = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_index = (i, j)\n    return max_index\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    max_index = get_max_product(arr)\n    print(max_index)\n    print(max_index[0])\n    print(max_index[1])\n    print(max_index[0] * max_index[1])",
      -0.85888671875
    ],
    [
      "def max_product(arr):\n    if not arr: return 0\n    \n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    \n    return max_product\n\nprint max_product([1, 2, 3, 4, 5, 6, 7])",
      -0.85888671875
    ],
    [
      "def max_product(numbers):\n    \"\"\"\n    numbers: a list of integer\n    returns: a tuple of (max_product, index)\n    \"\"\"\n    max_prod = -1\n    max_idx = 0\n    for idx, num in enumerate(numbers):\n        if max_prod < num * numbers[idx + 1]:\n            max_prod = num * numbers[idx + 1]\n            max_idx = idx + 1\n    return max_prod, max_idx\n\ndef main():\n    numbers = [1, 2, 3, 4, 5]\n    print max_product(numbers)\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max = -1\n    max_product = -1\n\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n\n            if max_product < product:\n                max_product = product\n                max = (i, j)\n    return max\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(maxProduct(nums))",
      -0.85888671875
    ],
    [
      "def find_pair(arr):\n    if not arr:\n        return None\n    pairs = []\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_pair:\n                max_pair = arr[i] * arr[j]\n                pairs = [i, j]\n    return max_pair, pairs\n\nprint find_pair([5, 2, 4, 3, 6, 7, 2, 1])",
      -0.85888671875
    ],
    [
      "def maxProduct(A):\n    max_prod = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            prod = A[i] * A[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\n#print maxProduct([1,2,3,4,5])\n\ndef main():\n    print maxProduct([1,2,3,4,5])\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "def highestProduct(array):\n    \"\"\"\n    Find the pair with the highest product of the array.\n    :param array: The array.\n    :return: The pair with the highest product.\n    \"\"\"\n    max_product = 0\n    max_index = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            product = array[i] * array[j]\n            if product > max_product:\n                max_product = product\n                max_index = (i, j)\n    return max_index\n\n\ndef main():\n    array = [1, 2, 3, 4, 5]\n    pair = highestProduct(array)\n    print(pair)\n\n\nif __name__ == '__main__':\n    main()",
      -0.90576171875
    ],
    [
      "# https://www.hackerrank.com/challenges/find-the-highest-product/problem\n\ndef find_highest(arr):\n    # Sort the array\n    sorted_arr = sorted(arr)\n    # Find the maximum product from the array\n    max_product = max(sorted_arr)\n    # Find the maximum product in the sorted array\n    max_product = max(sorted_arr)\n    # Find the index of the maximum product in the sorted array\n    index = sorted_arr.index(max_product)\n    # Return the index and the maximum product\n    return index, max_product\n\n# Your function should return the following:\n# index, max_product\n# For example:\n# index, max_product = find_highest([1, 2, 3, 4, 5, 6])\n# return (1, 10)\n\n# For now, you can leave the function un-implemented",
      -1.302734375
    ],
    [
      "from itertools import combinations\n\n\ndef max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    for pair in combinations(arr, 2):\n        product = 1\n        for num in pair:\n            product *= num\n        if product > max_product:\n            max_product = product\n    return max_product\n\n\nif __name__ == '__main__':\n    assert max_product([1, 2, 3, 4]) == 24\n    assert max_product([3, 1, 2, 4]) == 6\n    assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 720",
      -1.4033203125
    ],
    [
      "def max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) <= 1:\n        return 1\n\n    prod = arr[0]\n    for i in range(1, len(arr)):\n        prod = max(prod * arr[i], arr[i])\n\n    return prod",
      -1.5009765625
    ],
    [
      "def maxProduct(array):\n\t\"\"\"\n\t>>> maxProduct([1, 2, 3, 4, 5])\n\t6\n\t>>> maxProduct([1, 2, 3, 4, 5, 6])\n\t6\n\t>>> maxProduct([1, 2, 3, 4, 5, 6, 7])\n\t7\n\t\"\"\"\n\tmax = 0\n\tfor i in range(0, len(array)):\n\t\tfor j in range(i + 1, len(array)):\n\t\t\tproduct = array[i] * array[j]\n\t\t\tif product > max:\n\t\t\t\tmax = product\n\treturn max\n\nif __name__ == \"__main__\":\n\tprint(maxProduct([1, 2, 3, 4, 5, 6, 7]))",
      -1.548828125
    ],
    [
      "# Define a function to find a pair with highest product.\n# This function should return a tuple of (first element, second element) where both elements are integers.\n# The first element is the first element in the list, the second element is the second element in the list.\n# If no pair is found return None.\n\n# Example\n# >>> product([1, 2, 3, 4])\n# (2, 6)\n# >>> product([1, 2, 3, 4, 5, 6])\n# (6, 120)\n\ndef product(nums):\n    prod = 1\n    for i in nums:\n        prod *= i\n    return prod\n\n# Complete the function below.\ndef highest_product(nums):\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return max(nums)\n    else:\n        return max(nums[i] * highest_product(nums[i+1:]) for i in range(len(nums) - 1))",
      -1.5537109375
    ],
    [
      "def find_max_product(array):\n    max_product = 0\n    for i in range(0, len(array)):\n        for j in range(0, len(array)):\n            if i!= j:\n                product = array[i] * array[j]\n                if product > max_product:\n                    max_product = product\n    return max_product\n\nif __name__ == \"__main__\":\n    array = [3, 2, 4, 1, 3, 2, 8, 5, 6, 7]\n    print find_max_product(array)",
      -2.046875
    ],
    [
      "def maxProduct(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n    return max_product\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print maxProduct(arr)",
      -2.08984375
    ],
    [
      "def find_max_product(arr):\n    \"\"\"\n    :param arr: an array of integers\n    :return: the pair with highest product\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    max_product = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_index = i\n\n    return (arr[max_index], max_product)\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4]\n    print(find_max_product(arr))",
      -2.341796875
    ],
    [
      "def find_pair_product(arr):\n    \"\"\"\n    Input:\n        arr: an array of integers\n    Output:\n        a pair with highest product\n    \"\"\"\n    # Use a stack to keep track of the highest product\n    stack = []\n    # Use a list to store the current max product\n    max_product = -1\n    # Use a list to store the current max product index\n    max_product_index = -1\n    # Use a list to store the current min product index\n    min_product_index = -1\n    # Use a list to store the current min product\n    min_product = -1\n    # Use a list to store the current product\n    product = -1\n    # Use a list to store the current index of the current product\n    product_index = -1\n    # Use a list to store the current max product index\n    max_product_index = -1\n    # Use a list to store the current max product\n    max_product = -1\n    # Use a list to store the current min product index\n    min_product_index = -1\n    # Use a list to store the current min product\n    min_product = -1\n    # Use a list to store the current index of the current product\n    product_index = -1\n    # Use a list to store the current max product index\n    max_product_index = -1\n    # Use a list to store the current max product\n    max_product = -1\n    # Use a list to store the current min product index\n    min_product_index = -1\n    # Use a list to store the current min product\n    min_product = -1\n    # Use a list to store the current index of the current product\n    product_index = -1\n    # Use a list to store the current max product index\n    max_product_index = -1\n    # Use a list to store the current max product\n    max_product = -1\n    # Use a list to store the current min product index\n    min_product_index = -1\n    # Use a list to store the current min product\n    min_product = -1\n    # Use a list to store the current index of the current product\n    product_index = -1",
      -2.365234375
    ],
    [
      "def highestProduct(arr):\n\tmaxProduct = 0\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tproduct = arr[i] * arr[j]\n\t\t\tif product > maxProduct:\n\t\t\t\tmaxProduct = product\n\treturn maxProduct\n\n\nif __name__ == \"__main__\":\n\tarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tprint(highestProduct(arr))",
      -2.4140625
    ],
    [
      "def highestProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) < 2:\n        return nums[0]\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i]*nums[i+1] > nums[i+1]*nums[i]:\n            return nums[i]*nums[i+1]\n    return nums[-1]\n\nprint(highestProduct([1,2,3,4]))\nprint(highestProduct([1,2,3,4,5]))\nprint(highestProduct([1,2,3,4,5,6]))\nprint(highestProduct([1,2,3,4,5,6,7]))\nprint(highestProduct([1,2,3,4,5,6,7,8]))",
      -2.435546875
    ],
    [
      "def maxProduct(nums):\n    maxProduct = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] * nums[j]) > maxProduct:\n                maxProduct = nums[i] * nums[j]\n    return maxProduct\n\ndef main():\n    nums = [1, 2, 3, 4]\n    print(\"Max product = \", maxProduct(nums))\n\nif __name__ == '__main__':\n    main()",
      -2.560546875
    ],
    [
      "def find_max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = -1\n    max_idx = -1\n\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n                max_idx = [i, j]\n    return max_idx\n\nif __name__ == '__main__':\n    print(find_max_product([1, 2, 3, 4, 5, 6]))",
      -2.75
    ],
    [
      "def findPair(nums):\n    maxProd = 0\n    maxIndex = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            prod = nums[i] * nums[j]\n            if prod > maxProd:\n                maxProd = prod\n                maxIndex = [i, j]\n\n    return maxIndex\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6]\n    print(findPair(nums))",
      -2.822265625
    ],
    [
      "def maxProd(nums):\n    maxProd = 0\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            if j > i:\n                prod = nums[i] * nums[j]\n                if prod > maxProd:\n                    maxProd = prod\n    return maxProd\n\nprint(maxProd([1,2,3,4]))",
      -2.828125
    ],
    [
      "def find_pair(array):\n    if len(array) < 2:\n        return None\n\n    max_product = 0\n    max_index = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            product = array[i] * array[j]\n            if product > max_product:\n                max_product = product\n                max_index = [i, j]\n\n    return max_index\n\nif __name__ == '__main__':\n    array = [2, 3, 6, 7, 10, 11]\n    print(find_pair(array))\n\n    array = [1, 2, 3, 4, 5]\n    print(find_pair(array))",
      -2.83984375
    ],
    [
      "def maxProduct(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if len(array) < 2:\n        return 1\n\n    product = 1\n    max_product = 1\n    for i in range(2, len(array)):\n        product = array[i] * array[i-1]\n        if product > max_product:\n            max_product = product\n        elif product < max_product:\n            max_product = max_product\n\n    return max_product\n\nif __name__ == '__main__':\n    array = [2, 3, 6, 7, 8]\n    print(maxProduct(array))",
      -2.98046875
    ],
    [
      "def maxProduct(arr):\n\tif not arr:\n\t\treturn 0\n\tif len(arr) == 1:\n\t\treturn arr[0]\n\t\n\tmax = arr[0]\n\tmaxIndex = 0\n\tfor i in range(1, len(arr)):\n\t\tif arr[i] > max:\n\t\t\tmax = arr[i]\n\t\t\tmaxIndex = i\n\t\n\treturn max * arr[maxIndex]\n\t\ndef main():\n\tprint maxProduct([4, 2, 3, 4, 1, 2])\n\t\nif __name__ == '__main__':\n\tmain()",
      -3.0078125
    ],
    [
      "def maxProd(nums):\n    \"\"\"\n    nums: an array of integers\n    return: a pair of integers which is the highest product in the array\n    \"\"\"\n    if len(nums) == 0:\n        return None\n    max_prod = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_prod:\n            max_prod = nums[i]\n    return max_prod\n\nif __name__ == \"__main__\":\n    nums = [4, 3, 2, 7, 6, 5]\n    print(maxProd(nums))\n    nums = [1, 3, 2, 1]\n    print(maxProd(nums))\n    nums = [1, 1, 1]\n    print(maxProd(nums))",
      -3.0546875
    ],
    [
      "def find_max_product(nums):\n    max_product = 0\n    max_i = 0\n    max_j = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n                max_i = i\n                max_j = j\n    return max_i, max_j, max_product\n\ndef main():\n    nums = [1, 2, 3, 4, 5]\n    print find_max_product(nums)\n\nif __name__ == \"__main__\":\n    main()",
      -3.0859375
    ],
    [
      "def find_max_product(arr):\n    max_product = 0\n    max_pair = None\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (i, j)\n\n    return max_pair\n\nprint find_max_product([2, 3, 1, 3, 4, 2, 1, 1, 2, 1])",
      -3.287109375
    ],
    [
      "def maxProduct(arr):\n\t\"\"\"\n\t:type arr: List[int]\n\t:rtype: int\n\t\"\"\"\n\tif not arr:\n\t\treturn 0\n\tres = arr[0]\n\tfor i in range(1, len(arr)):\n\t\tres = max(res*arr[i], arr[i])\n\treturn res\n\nif __name__ == '__main__':\n\tarr = [1,2,3,4,5]\n\tprint(maxProduct(arr))\n\tarr = [3,2,1]\n\tprint(maxProduct(arr))\n\tarr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185",
      -3.681640625
    ],
    [
      "def find_max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    max_index = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n                max_index = (i, j)\n    return max_index",
      -3.853515625
    ],
    [
      "def find_pair(arr):\n    max_prod = 0\n    max_idx = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_idx = (i, j)\n    return max_idx\n\ndef test_find_pair():\n    arr = [1,2,3,4,5,6,7,8,9]\n    assert(find_pair(arr) == (1, 6))\n\nif __name__ == '__main__':\n    test_find_pair()",
      -3.953125
    ],
    [
      "def find_max_product(nums):\n    if nums:\n        max_product = nums[0] * nums[1]\n        for i in range(2, len(nums)):\n            max_product = max(max_product, nums[i] * nums[i - 1])\n        return max_product\n    else:\n        return 0\n\ndef main():\n    nums = [1,2,3,4,5,6]\n    print(find_max_product(nums))\n\nif __name__ == '__main__':\n    main()",
      -4.0234375
    ],
    [
      "def max_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_num = 0\n    max_num_index = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_num:\n                max_num = product\n                max_num_index = (i, j)\n    return max_num_index\n\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 5, 6]\n    print max_product(nums)\n\n    nums = [1, 2, 3, 4, 5, 6]\n    print max_product(nums)\n\n    nums = [1, 2, 3, 4, 5]\n    print max_product(nums)\n\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print max_product(nums)",
      -4.2109375
    ],
    [
      "def find_max_product(numbers):\n    \"\"\"\n    Returns a pair of numbers with highest product.\n    \"\"\"\n    max_product = 0\n    max_index = 0\n    for i in range(0, len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if product > max_product:\n                max_product = product\n                max_index = (i, j)\n\n    return max_index\n\nprint find_max_product([1, 2, 3, 4, 5])\nprint find_max_product([1, 2, 3, 4])",
      -4.6171875
    ],
    [
      "from collections import defaultdict\n\ndef find_max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    product_dic = defaultdict(int)\n    for i in arr:\n        product_dic[i] += 1\n    for i in range(len(product_dic)):\n        if product_dic[i] > max_product:\n            max_product = product_dic[i]\n    return max_product\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7]\n    print(find_max_product(arr))\n    arr = [1,2,3,4,5]\n    print(find_max_product(arr))",
      -4.6796875
    ],
    [
      "def find_pair(a):\n    # Sort the array\n    a.sort()\n\n    # Get the first element\n    first = a[0]\n    # Get the last element\n    last = a[-1]\n\n    # Get the first and last elements\n    first = a[0]\n    last = a[-1]\n\n    # Get the product\n    product = a[0] * a[1]\n\n    # Get the product of the first and last elements\n    product = a[0] * a[-1]\n\n    # Find the first element that is greater than the product\n    for i in range(0, len(a)):\n        if a[i] > product:\n            first = a[i]\n            break\n\n    # Find the last element that is greater than the product\n    for i in range(0, len(a)):\n        if a[i] > product:\n            last = a[i]\n            break\n\n    # Find the first and last elements that are greater than the product\n    for i in range(0, len(a)):\n        if a[i] > product:\n            first = a[i]\n        else:\n            last = a[i]\n\n    # Find the highest pair\n    for i in range(0, len(a)):\n        if a[i] * a[i+1] > product:\n            return a[i], a[i+1]\n    return None, None",
      -4.9765625
    ],
    [
      "def find_pair(nums):\n    max_prod = 0\n    max_index = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i!= j and nums[i] * nums[j] > max_prod:\n                max_prod = nums[i] * nums[j]\n                max_index = (i, j)\n    return max_index\n\n# Your code here\n\ndef test():\n    assert find_pair([1,2,3,4,5]) == (0,1)\n    assert find_pair([1,2,3,4,5,6]) == (1,2)\n    assert find_pair([1,2,3,4,5,6,7]) == (2,3)\n    assert find_pair([1,2,3,4,5,6,7,8]) == (3,4)\n    assert find_pair([1,2,3,4,5,6,7,8,9]) == (4,5)\n    assert find_pair([1,2,3,4,5,6,7,8,9,10]) == (5,6)\n    assert find_pair([1,2,3,4,5,6,7,8,9,10,11]) == (6,7)\n    assert find_pair([1,2,3,4,5,6,7,8,9,10,11,12]) == (7,8)\n    assert find_pair([1,2,3,4,5,6,7,8,9,10,11,12,13]) == (8,9)\n    assert find_pair([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == (9,10)\n    assert find_pair([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == (10,11)\n    assert find_pair([1,2,3,4,5,6,7,8,9,10,11,",
      -5.984375
    ],
    [
      "def find_max_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # find max product and return index of that max\n    max_product = 0\n    max_index = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_index = (i, j)\n    return max_index\n\n\nif __name__ == \"__main__\":\n    assert find_max_product([2, 3, 2, 4, 2, 4, 2, 4, 2]) == (2, 4)\n    assert find_max_product([1, 2, 3]) == (0, 1)\n    assert find_max_product([1]) == (0, 0)",
      -6.1484375
    ],
    [
      "import math\n\ndef get_max_product(nums):\n    max_product = nums[0]\n    max_index = 0\n\n    for i in range(1, len(nums)):\n        product = nums[i] * nums[i-1]\n        if product > max_product:\n            max_product = product\n            max_index = i\n\n    return max_index\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(get_max_product(nums))\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(get_max_product(nums))",
      -6.94921875
    ],
    [
      "def find_max_product(num):\n    \"\"\"\n    Input: num - a list of integers\n    Output: -1 if no pair is found, otherwise the index of the pair with highest product.\n    \"\"\"\n    max_product = 0\n    max_index = 0\n    for i in range(len(num)):\n        for j in range(i+1, len(num)):\n            product = num[i] * num[j]\n            if product > max_product:\n                max_index = i\n                max_product = product\n    return max_index\n\ndef test_find_max_product():\n    assert find_max_product([2,3,1]) == 0\n    assert find_max_product([2,3,4]) == 1\n    assert find_max_product([2,3,2]) == 1\n    assert find_max_product([2,2,2]) == 0\n    assert find_max_product([1,2,3]) == 2\n    assert find_max_product([4,4,4]) == 0\n\nif __name__ == \"__main__\":\n    test_find_max_product()",
      -7.15234375
    ],
    [
      "def find_pair(list_of_ints):\n    \"\"\"\n    This function is used to find a pair in a given list of integers.\n    :param list_of_ints: list of integers\n    :return: tuple of two integers\n    \"\"\"\n    # Find the first pair with product greater than or equal to 4\n    # Find the second pair with product greater than or equal to 4\n    # Find the third pair with product greater than or equal to 4\n    # Find the fourth pair with product greater than or equal to 4\n    # Find the fifth pair with product greater than or equal to 4\n    # Find the sixth pair with product greater than or equal to 4\n    # Find the seventh pair with product greater than or equal to 4\n    # Find the eighth pair with product greater than or equal to 4\n    # Find the ninth pair with product greater than or equal to 4\n    # Find the tenth pair with product greater than or equal to 4\n    # Find the eleventh pair with product greater than or equal to 4\n    # Find the twelfth pair with product greater than or equal to 4\n    # Find the thirteenth pair with product greater than or equal to 4\n    # Find the fourteenth pair with product greater than or equal to 4\n    # Find the fifteenth pair with product greater than or equal to 4\n    # Find the sixteenth pair with product greater than or equal to 4\n    # Find the seventeenth pair with product greater than or equal to 4\n    # Find the eighteenth pair with product greater than or equal to 4\n    # Find the nineteenth pair with product greater than or equal to 4\n    # Find the twentieth pair with product greater than or equal to 4\n    # Find the twenty-first pair with product greater than or equal to 4\n    # Find the twenty-second pair with product greater than or equal to 4\n    # Find the twenty-third pair with product greater than or equal to 4\n    # Find the twenty-fourth pair with product greater than or equal to 4\n    # Find the twenty-fifth pair with product greater than or equal to 4\n    # Find the twenty-sixth pair with product greater than or equal to 4\n    # Find the twenty-seventh pair with product greater than or equal to 4\n    # Find the twenty-eighth pair with product greater than or equal to 4\n    # Find the twenty-n",
      -7.58984375
    ],
    [
      "#!/usr/bin/env python\n\ndef maxProduct(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(arr[i], max_prod * arr[i])\n    return max_prod\n\n# Your code here\nprint(maxProduct([1, 2, 3]))\nprint(maxProduct([1, 3, 9]))\nprint(maxProduct([1, 5, 10]))\nprint(maxProduct([5, 10, 15]))\nprint(maxProduct([5, 15, 20]))",
      -7.640625
    ],
    [
      "def highest_product(nums):\n    \"\"\"\n    nums: an array of integers\n    returns: the pair with highest product\n    \"\"\"\n\n    if len(nums) < 2:\n        return (1, 1)\n\n    max_product = nums[0]\n    max_index = 0\n    for i in range(len(nums)):\n        product = nums[i] * nums[i + 1]\n        if product > max_product:\n            max_product = product\n            max_index = i\n\n    return (nums[max_index], max_product)\n\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7])\n# (6, 120)\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7, 8])\n# (120, 720)\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9])\n# (720, 5040)\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# (5040, 61440)\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n# (61440, 40320)\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n# (40320, 362880)\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n# (362880, 3579200)\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n# (3579200, 3579200)\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n# (3579200, 3579200)\n\nprint highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11",
      -7.6484375
    ],
    [
      "import sys\nimport operator\n\ndef find_max_product(nums):\n    max_product = -sys.maxsize\n    max_product_index = -1\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] > max_product:\n                max_product = nums[i] * nums[j]\n                max_product_index = (i, j)\n    return max_product_index\n\ndef main():\n    nums = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    max_product = find_max_product(nums)\n    print max_product\n\nif __name__ == '__main__':\n    main()",
      -8.1875
    ],
    [
      "# TODO:\n# 1) Add test cases\n# 2) Implement the \"find pair\" algorithm.\n\nimport numpy as np\n\ndef find_pair(a):\n    \"\"\"\n    Given an array of integers, find a pair with highest product.\n\n    :param a: an array of integers\n    :return: a pair with highest product\n    \"\"\"\n    if len(a) < 2:\n        return None\n\n    prod = a[0] * a[1]\n    for i in range(2, len(a)):\n        prod *= a[i]\n        if prod > a[0] * a[i]:\n            return (a[0], a[i])\n    return (a[0], a[1])\n\n\nif __name__ == \"__main__\":\n    a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(\"Highest product pair is {0} * {1}\".format(a[0], a[1]))\n    print(find_pair(a))\n    print(find_pair(np.array([1, 2, 3, 4, 5, 6])))",
      -9.171875
    ],
    [
      "# https://oj.leetcode.com/problems/product-of-array-except-self/\n# Given a set of n integers,\n# find the product of all elements except itself and return it.\n#\n# Example:\n# Input:\n# [2,3,4]\n#\n# Output:\n# 24\n#\n# Explanation:\n# Product of elements:\n# 2 * 3 * 4 = 24\n\n# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n#         if self.start > self.end:\n#             self.start, self.end = self.end, self.start\n\nclass Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return reduce(lambda x, y: x * y, map(lambda x: x * (x - 1) / 2, nums))\n\n# Note:\n# The original code has error, I fixed it.\n# 1. Use the first element as the start and end point of each interval.\n# 2. Reduce the result by calculating the product of elements in each interval.",
      -9.1953125
    ],
    [
      "def highestProduct(numbers):\n    \"\"\"\n    :param numbers: an array of integers\n    :return: a tuple containing the highest product and its index\n    \"\"\"\n    \n    # check if the array is empty\n    if not numbers:\n        return (0, 0)\n    \n    # get the max value\n    maxValue = max(numbers)\n    \n    # get the max value index\n    maxValueIndex = numbers.index(maxValue)\n    \n    # get the product of the max value index\n    maxProduct = numbers[maxValueIndex] * maxValue\n    \n    # get the product of the max value\n    maxProduct = numbers[maxValueIndex] * maxValue\n    \n    # return the highest product and its index\n    return (maxProduct, maxValueIndex)\n\ndef main():\n    \"\"\"\n    A test function to test the highestProduct function\n    \"\"\"\n    \n    # test the highestProduct function\n    assert highestProduct([2, 3, 4, 5]) == (120, 0)\n    assert highestProduct([1, 2, 3]) == (6, 1)\n    assert highestProduct([2, 3, 5, 7, 11, 13]) == (720, 2)\n\nif __name__ == '__main__':\n    main()",
      -9.828125
    ],
    [
      "def find_pair_with_highest_product(nums):\n    # write your code here\n    # return the pair with highest product\n    if len(nums) < 2:\n        return None\n    max_product = 0\n    max_index = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_index = i\n                max_product = product\n            elif product > max_product:\n                max_index = j\n                max_product = product\n    return (max_index, max_product)\n\ndef test():\n    assert find_pair_with_highest_product([1,2,3,4,5]) == (2, 25)\n    assert find_pair_with_highest_product([1,2,3,4,5,6]) == (2, 125)\n    assert find_pair_with_highest_product([1,2,3,4]) == (0, 6)\n    assert find_pair_with_highest_product([1,2,3,4,5,6,7,8,9,10]) == (3, 900)\n    assert find_pair_with_highest_product([1,2,3,4,5,6,7,8,9,10,11]) == (2, 3240)\n\nif __name__ == '__main__':\n    test()",
      -10.2890625
    ],
    [
      "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\n\nclass Solution:\n    def findPair(self, nums: List[int]) -> Interval:\n        ans = None\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] * nums[j] > ans.end * ans.end:\n                    ans = Interval(nums[i], nums[j])\n        return ans\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findPair([1, 2, 2]))\n    print(sol.findPair([2, 4, 3, 1]))\n    print(sol.findPair([1, 2, 4, 3, 1]))\n    print(sol.findPair([1, 2, 3, 4, 1]))\n    print(sol.findPair([1, 1, 1, 2]))",
      -10.6015625
    ],
    [
      "def maxProd(arr):\n    if len(arr) == 0:\n        return 0\n    arr = sorted(arr)\n    maxProd = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maxProd:\n            maxProd = arr[i]\n    return maxProd\n\nprint maxProd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint maxProd([2, 3, 4, 5, 6, 7, 8, 9, 10, 1])\nprint maxProd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186",
      -10.71875
    ],
    [
      "# @include\ndef find_pairs(arr):\n    product = 1\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product *= arr[i] * arr[j]\n    return (product, i, j)\n# @exclude\n\n\ndef main():\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    print(find_pairs(arr))\n\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n    print(find_pairs(arr))\n\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n    print(find_pairs(arr))\n\n\nif __name__ == '__main__':\n    main()",
      -11.6484375
    ],
    [
      "def product(numbers):\n    \"\"\"\n    Return the product of the given numbers\n    \"\"\"\n    product = 1\n    for number in numbers:\n        product *= number\n    return product\n\n\ndef max_product(numbers):\n    \"\"\"\n    Return the pair with highest product\n    \"\"\"\n    max_product = 0\n    max_index = 0\n    for i in range(0, len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product = product(numbers[i], numbers[j])\n            if product > max_product:\n                max_product = product\n                max_index = i\n    return (numbers[max_index], max_product)\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,",
      -11.7890625
    ],
    [
      "def highestProduct(arr):\n    if len(arr) <= 1:\n        return arr\n\n    max_product = arr[0]\n    max_index = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j] > max_product:\n                max_product = arr[j]\n                max_index = j\n    return max_index\n\nprint(highestProduct([1, 2, 3, 4, 5, 6, 7]))\nprint(highestProduct([2, 3, 4, 5, 6, 7, 8]))\nprint(highestProduct([4, 5, 6, 7, 8, 9]))\nprint(highestProduct([10, 20, 30, 40, 50, 60, 70, 80, 90]))\nprint(highestProduct([100, 200, 300, 400, 500, 600, 700, 800, 900]))",
      -11.953125
    ],
    [
      "def find_max_product(numbers):\n    \"\"\"\n    :param numbers: A list of integers.\n    :return: A pair of integers representing the highest product.\n    \"\"\"\n\n    def get_product(numbers):\n        \"\"\"\n        :param numbers: A list of integers.\n        :return: The product of all the numbers.\n        \"\"\"\n\n        product = 1\n        for num in numbers:\n            product *= num\n\n        return product\n\n    def get_product_of_first_two_numbers(numbers):\n        \"\"\"\n        :param numbers: A list of integers.\n        :return: The product of the first two numbers.\n        \"\"\"\n\n        product = 1\n        for num in numbers[:2]:\n            product *= num\n\n        return product\n\n    def get_product_of_all_numbers(numbers):\n        \"\"\"\n        :param numbers: A list of integers.\n        :return: The product of all the numbers.\n        \"\"\"\n\n        product = 1\n        for num in numbers:\n            product *= num\n\n        return product\n\n    def get_product_of_last_two_numbers(numbers):\n        \"\"\"\n        :param numbers: A list of integers.\n        :return: The product of the last two numbers.\n        \"\"\"\n\n        product = 1\n        for num in reversed(numbers[:-2]):\n            product *= num\n\n        return product\n\n    product = get_product(numbers)\n    product_of_first_two = get_product_of_first_two_numbers(numbers)\n    product_of_all = get_product_of_all_numbers(numbers)\n    product_of_last_two = get_product_of_last_two_numbers(numbers)\n\n    return (product, product_of_first_two, product_of_all, product_of_last_two)\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3]\n    print(find_max_product(numbers))",
      -12.625
    ],
    [
      "def find_max_product(nums):\n    if len(nums) <= 1:\n        return nums[0]\n    else:\n        return max(find_max_product(nums[:i]) + nums[i] for i in range(1, len(nums)))\n\n\ndef test():\n    assert find_max_product([1,2,3]) == 6\n    assert find_max_product([1,2,3,4]) == 24\n    assert find_max_product([1,2,3,4,5]) == 120\n    assert find_max_product([1,2,3,4,5,6]) == 720\n    assert find_max_product([1,2,3,4,5,6,7]) == 5040\n\nif __name__ == '__main__':\n    test()",
      -12.9765625
    ],
    [
      "# +++your code here+++\n# Write functions and modify main() to call them\n\ndef find_max_product(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat_2(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat_3(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat_4(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat_5(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat_6(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat_7(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat_8(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat_9(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_product_no_repeat_10(nums):\n    return max(x*y for x,y in zip(nums, repeat(1, len(nums))))\n\ndef find_max_",
      -12.984375
    ],
    [
      "import math\n\ndef highest_product_of_numbers(numbers):\n    \"\"\"\n    Args:\n        numbers (list of ints): the numbers to find the pair with highest product\n    Returns:\n        (int, int): the highest pair of numbers\n    \"\"\"\n    if len(numbers) < 2:\n        return 0, 0\n\n    return highest_product_of_numbers_recursive(numbers, 0, len(numbers))\n\n\ndef highest_product_of_numbers_recursive(numbers, start, end):\n    \"\"\"\n    Args:\n        numbers (list of ints): the numbers to find the pair with highest product\n        start (int): the start of the range to find the pair with highest product\n        end (int): the end of the range to find the pair with highest product\n    Returns:\n        (int, int): the highest pair of numbers\n    \"\"\"\n    if start >= end:\n        return 0, 0\n\n    mid = (start + end) / 2\n    left = highest_product_of_numbers_recursive(numbers, start, mid)\n    right = highest_product_of_numbers_recursive(numbers, mid, end)\n\n    return max(left, right), mid\n\n\nif __name__ == \"__main__\":\n    print(highest_product_of_numbers([2, 3, 5, 7]))\n    print(highest_product_of_numbers([3, 2, 3]))\n    print(highest_product_of_numbers([3, 2, 1]))\n    print(highest_product_of_numbers([3, 2, 4]))",
      -13.015625
    ],
    [
      "# import numpy as np\n# import pandas as pd\n# import math\n# import time\n\n\ndef max_product(array):\n    \"\"\"\n    Find the highest product from an array of integers.\n    \"\"\"\n    return max(product(array))\n\n\n# def product(array):\n#     \"\"\"\n#     Find the product of all numbers in the given array.\n#     \"\"\"\n#     product = 1\n#     for number in array:\n#         product *= number\n#     return product\n\ndef main():\n    \"\"\"\n    The main function to be run.\n    \"\"\"\n    # array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    start_time = time.time()\n    print(max_product(array))\n    print(\"Time taken: {}\".format(time.time() - start_time))\n\nif __name__ == '__main__':\n    main()",
      -13.4296875
    ],
    [
      "def find_highest_product(list_of_integers):\n    \"\"\"\n    >>> find_highest_product([1, 2, 3, 4, 5, 6])\n    (6, 10)\n    >>> find_highest_product([1, 2, 3, 4, 5, 6, 7])\n    (7, 30)\n    >>> find_highest_product([1, 2, 3, 4, 5, 6, 7, 8])\n    (8, 90)\n    \"\"\"\n    highest_product = 0\n    for i in list_of_integers:\n        product = 1\n        for j in list_of_integers:\n            if i * j > highest_product:\n                highest_product = i * j\n        if product > highest_product:\n            highest_product = product\n    return highest_product, list_of_integers[highest_product - 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -15.375
    ],
    [
      "def product_max(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    :param arr: An array of integers.\n    :return: A pair of integers.\n    \"\"\"\n\n    if not arr:\n        return None\n\n    max_product = arr[0]\n    max_index = 0\n    max_index_product = arr[0]\n    for i in range(1, len(arr)):\n        product = arr[i] * arr[i - 1]\n        if product > max_product:\n            max_product = product\n            max_index = i\n            max_index_product = product\n\n    return (max_index, max_product)",
      -16.390625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}