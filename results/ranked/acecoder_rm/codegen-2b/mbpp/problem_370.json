{
  "problem": {
    "task_id": "MBPP/381",
    "prompt": "Write a function to sort a list of lists by a given index of the inner list.",
    "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
    "test_list": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ],
    "challenge_test_list": [],
    "problem_id": 370
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def sort_lists(lists, index):\n    \"\"\"\n    >>> sort_lists([[1,2], [3,4], [5,6]], 1)\n    [[1, 2], [5, 6], [3, 4]]\n    >>> sort_lists([[1,2], [3,4], [5,6]], 2)\n    [[3, 4], [1, 2], [5, 6]]\n    >>> sort_lists([[1,2], [3,4], [5,6]], 3)\n    [[5, 6], [1, 2], [3, 4]]\n    >>> sort_lists([[1,2], [3,4], [5,6]], 4)\n    [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    for i in range(0, len(lists)):\n        lists[i].sort(key=lambda x: x[index])\n    return lists\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.638671875
    ],
    [
      "def sort_list_by_inner_list(ls, index):\n    \"\"\"\n    :type ls: List[List[int]]\n    :type index: int\n    :rtype: List[List[int]]\n    \"\"\"\n    return sorted(ls, key=lambda x: x[index])\n\n\ndef sort_list_by_inner_list_recursive(ls, index):\n    if len(ls) == 0:\n        return ls\n    elif len(ls) == 1:\n        return [ls[0]]\n    else:\n        return sort_list_by_inner_list_recursive(ls[:index] + ls[index + 1:], index) + ls[index]\n\ndef sort_list_by_inner_list_recursive_2(ls, index):\n    if len(ls) == 0:\n        return ls\n    elif len(ls) == 1:\n        return [ls[0]]\n    else:\n        return sort_list_by_inner_list_recursive_2(ls[:index] + ls[index + 1:], index) + ls[index]\n\n\nif __name__ == \"__main__\":\n    ls = [[1, 2, 3], [1, 2, 4], [1, 2, 3]]\n    print(sort_list_by_inner_list(ls, 1))\n    print(sort_list_by_inner_list_recursive(ls, 1))\n    print(sort_list_by_inner_list_recursive_2(ls, 1))",
      2.365234375
    ],
    [
      "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n        pivot = head\n        while pivot.next:\n            if pivot.next.next:\n                pivot = pivot.next\n            else:\n                pivot = pivot.next\n        pivot.next = None\n        \n        pivot = head\n        head = None\n        while pivot:\n            if pivot.next:\n                head = pivot\n                pivot = pivot.next\n                pivot.next = None\n            else:\n                pivot = None\n                \n        return head",
      0.6162109375
    ],
    [
      "def sort_by_inner_list(list_of_lists, index):\n    # Write your code here\n    return sorted(list_of_lists, key=lambda x: x[index])\n\nif __name__ == '__main__':\n    list_of_lists = [[1, 2, 3], [2, 1, 3], [3, 1, 2]]\n    print sort_by_inner_list(list_of_lists, 0)\n    print sort_by_inner_list(list_of_lists, 1)\n    print sort_by_inner_list(list_of_lists, 2)\n    print sort_by_inner_list(list_of_lists, 3)\n    print sort_by_inner_list(list_of_lists, 4)\n    print sort_by_inner_list(list_of_lists, 5)\n    print sort_by_inner_list(list_of_lists, 6)\n    print sort_by_inner_list(list_of_lists, 7)\n    print sort_by_inner_list(list_of_lists, 8)",
      0.5947265625
    ],
    [
      "# https://leetcode.com/problems/sort-list-with-index/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def sortListWithIndex(self, head: ListNode, index: int) -> ListNode:\n        if not head or not head.next:\n            return head\n\n        p = head\n        while p.next:\n            p = p.next\n            if p.val <= head.val:\n                head.next = p\n                p = head.next\n            else:\n                head = p\n\n        head.next = self.sortListWithIndex(head.next, index)\n        return head\n\n    def sortListWithIndex(self, head: ListNode, index: int) -> ListNode:\n        if not head or not head.next:\n            return head\n        \n        p = head\n        while p.next:\n            p = p.next\n            if p.val <= head.val:\n                head.next = p\n                p = head.next\n            else:\n                head = p\n        \n        head.next = self.sortListWithIndex(head.next, index)\n        return head",
      0.10198974609375
    ],
    [
      "# sort_list_by_index([[1,2], [3,4], [5,6]])\n# -> [[1, 2], [3, 4], [5, 6]]\n# sort_list_by_index([[1,2], [3,4], [5,6]])\n# -> [[1, 2], [5, 6], [3, 4]]\n\ndef sort_list_by_index(lst):\n    \"\"\"\n    :type lst: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    # sort by the second index of each inner list\n    return sorted(lst, key=lambda lst: lst[1])\n\ndef sort_list_by_index_recursive(lst):\n    \"\"\"\n    :type lst: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    if len(lst) == 0:\n        return lst\n    else:\n        # sort by the second index of each inner list\n        return [lst[0]] + sort_list_by_index_recursive(lst[1:])",
      0.03375244140625
    ],
    [
      "def sort_lists_by_index(l, index):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n    l: list of lists\n    index: index of the inner list\n\n    Returns:\n        sorted_list: sorted list\n    \"\"\"\n    sorted_list = []\n    for i in range(len(l)):\n        sorted_list.append([])\n        for j in range(len(l[i])):\n            sorted_list[i].append(l[i][j])\n    return sorted_list\n\n\nif __name__ == '__main__':\n    l = [[1, 2, 3], [1, 4, 5], [2, 4, 5], [2, 3, 4], [1, 3, 5], [3, 5, 6]]\n    print(sort_lists_by_index(l, 0))\n    l = [[1, 2, 3], [2, 4, 5], [2, 3, 4], [1, 3, 5], [3, 5, 6]]\n    print(sort_lists_by_index(l, 1))",
      -0.7431640625
    ],
    [
      "def sort_list_by_inner_list_index(lists, index):\n    \"\"\"\n    Input:\n        lists: a list of lists.\n        index: the index of the inner list.\n    Output:\n        sorted_lists: a sorted list of lists.\n    Examples:\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], 1)\n        [[1, 2], [3, 4]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], 0)\n        [[1, 2], [3, 4]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], 2)\n        [[1, 2], [3, 4]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], 3)\n        [[3, 4], [1, 2]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], 4)\n        [[1, 2], [3, 4]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], 5)\n        [[1, 2], [3, 4]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], -1)\n        [[1, 2], [3, 4]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], 0)\n        [[1, 2], [3, 4]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], -4)\n        [[1, 2], [3, 4]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], -5)\n        [[1, 2], [3, 4]]\n        >>> sort_list_by_inner_list_index([[1,2], [3,4]], -6)\n        [[1, 2], [3, 4]]",
      -0.7470703125
    ],
    [
      "# Example 1\n\ndef sort_lists_by_inner_list(my_list, my_index):\n  my_list = sorted(my_list, key=lambda x: x[my_index])\n  return my_list\n\n# Example 2\n\ndef sort_lists_by_inner_list2(my_list, my_index):\n  my_list = sorted(my_list, key=lambda x: x[my_index], reverse=True)\n  return my_list\n\n# Example 3\n\ndef sort_lists_by_inner_list3(my_list, my_index):\n  my_list = sorted(my_list, key=lambda x: x[my_index], reverse=True)\n  return my_list\n\n# Example 4\n\ndef sort_lists_by_inner_list4(my_list, my_index):\n  my_list = sorted(my_list, key=lambda x: x[my_index], reverse=True)\n  return my_list\n\n# Example 5\n\ndef sort_lists_by_inner_list5(my_list, my_index):\n  my_list = sorted(my_list, key=lambda x: x[my_index], reverse=True)\n  return my_list\n\n# Example 6\n\ndef sort_lists_by_inner_list6(my_list, my_index):\n  my_list = sorted(my_list, key=lambda x: x[my_index], reverse=True)\n  return my_list\n\n# Example 7\n\ndef sort_lists_by_inner_list7(my_list, my_index):\n  my_list = sorted(my_list, key=lambda x: x[my_index], reverse=True)\n  return my_list\n\n# Example 8\n\ndef sort_lists_by_inner_list8(my_list, my_index):\n  my_list = sorted(my_list, key=lambda x: x[my_index], reverse=True)\n  return my_list\n\n# Example 9\n\ndef sort_lists_by_inner_list9(my_list, my_index):\n  my_list = sorted(my_list",
      -0.77099609375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head == None or head.next == None:\n            return head\n        p = head\n        while p.next!= None:\n            q = p.next\n            while q!= None:\n                if q.next!= None:\n                    p = q\n                    q = q.next\n                else:\n                    break\n            if p == q:\n                break\n            tmp = q.next\n            p.next.next = q\n            q.next = p\n            p = p.next\n            q = tmp\n        p = head\n        while p.next!= None:\n            p = p.next\n        head.next = None\n        return p",
      -0.81201171875
    ],
    [
      "def sort_lists_by_inner_list(L):\n    for i in range(len(L)):\n        L[i] = sorted(L[i], key=lambda x: x[i])\n    return L",
      -0.85595703125
    ],
    [
      "def sort(lists, index):\n    \"\"\"\n    For each list in the given lists, if the list is empty, it is sorted into\n    the given index. Otherwise, sort the list by the given index.\n    \"\"\"\n    for i in range(len(lists)):\n        if len(lists[i]) == 0:\n            lists[i] = sort(lists[i], index)\n        else:\n            lists[i] = sort(lists[i], index)\n    return lists\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(lists)\n# param_1 = obj.sort(lists,index)",
      -0.85595703125
    ],
    [
      "#!/usr/bin/env python\n\ndef sort_lists(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_lists(lst, 0))\n    print(sort_lists(lst, 1))\n    print(sort_lists(lst, 2))\n    print(sort_lists(lst, 3))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def sort_inner(lists, index):\n    \"\"\"\n    Sort lists by a given index of the inner list.\n    :type lists: List[List[int]]\n    :type index: int\n    :rtype: None\n    \"\"\"\n    # Write your code here\n    for i in range(len(lists)):\n        lists[i].sort()\n        for j in range(len(lists[i])):\n            lists[i][j].sort()\n        lists[i][index].sort()\n\nif __name__ == '__main__':\n    print sort_inner([[3, 2, 1], [4, 5, 6], [8, 7, 9]], 1)",
      -0.85693359375
    ],
    [
      "def sort_inner(lst, ind):\n    # Complete this function\n    if ind == len(lst) - 1:\n        return lst\n    else:\n        return sort_inner(lst, ind + 1) + [lst[ind]] + sort_inner(lst[ind + 1:], ind)\n\nprint sort_inner([[1,2,3],[4,5,6]], 0)",
      -0.85693359375
    ],
    [
      "def sort_list_by_inner_list(lst, index):\n    \"\"\"\n    :type lst: List[List[int]]\n    :type index: int\n    :rtype: void Do not return anything, modify lst in-place instead.\n    \"\"\"\n    # write your code here\n    if len(lst) < 2:\n        return\n\n    lst_copy = lst[:]\n    for i in range(len(lst)):\n        if i == index:\n            lst_copy.insert(0, lst_copy.pop(i))\n        else:\n            lst_copy[i] = sorted(lst_copy[i], key=lambda x: x[index])\n    lst[:] = lst_copy[:]",
      -0.85791015625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        \n        slow, fast = head, head\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        \n        pivot = slow\n        \n        slow = head\n        fast = head.next\n        while fast:\n            if fast.next == pivot:\n                slow.next = fast\n                fast = fast.next\n                slow = slow.next\n            else:\n                slow.next = fast\n                fast = fast.next\n                slow = slow.next\n        \n        return head",
      -0.85791015625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n\n        pivot = head\n        prev = None\n        while pivot.next is not None:\n            prev = pivot\n            pivot = pivot.next\n            if pivot.next is not None:\n                pivot.next = pivot.next.next\n                pivot.next.next = prev\n\n        pivot = head\n        prev = None\n        while pivot is not None:\n            prev = pivot\n            pivot = pivot.next\n            if pivot is not None:\n                pivot.next = pivot.next.next\n                pivot.next.next = prev\n\n        return head",
      -0.85791015625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        temp = head\n        while temp.next:\n            temp = temp.next\n            while temp.next and temp.next.val < temp.val:\n                temp = temp.next\n            if temp.next:\n                temp.next = temp.next.next\n                temp = temp.next\n            else:\n                break\n        return head",
      -0.85791015625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        while dummy.next:\n            dummy = dummy.next\n            while dummy.next and dummy.next.next:\n                tmp = dummy.next\n                dummy.next = tmp.next\n                tmp.next = tmp.next.next\n            dummy.next = dummy.next.next\n        \n        dummy = dummy.next\n        prev = dummy\n        while dummy:\n            tmp = prev\n            prev = prev.next\n            prev.next = dummy.next\n            dummy.next = dummy.next.next\n            dummy.next = prev\n        \n        return dummy.next",
      -0.85791015625
    ],
    [
      "def sort_list_by_inner_list(l, index):\n    \"\"\"\n    :type l: List[List[int]]\n    :type index: int\n    :rtype: List[List[int]]\n    \"\"\"\n    return [l[i] for i in sorted(range(len(l)), key=lambda x: l[x][index])]\n\nif __name__ == '__main__':\n    l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    index = 1\n    print(sort_list_by_inner_list(l, index))",
      -0.85791015625
    ],
    [
      "# https://www.hackerrank.com/challenges/sorting-an-array-with-an-index/problem\n\n# First, let's define a function that will sort our list\n# We'll be passing in the index of the list to sort\ndef sort_list_by_index(index, list_to_sort):\n    # Let's first create a new list to sort our list into\n    new_list = []\n\n    # Then we'll iterate over our list and add the list to our new list\n    for i in range(len(list_to_sort)):\n        new_list.append(list_to_sort[i])\n\n    # Finally, we'll sort the list using our index\n    new_list.sort(key=lambda x: x[index])\n\n    # Finally, we'll print our new list\n    print(new_list)\n\n# Let's begin!\nlist_to_sort = [\n    [1,2,3],\n    [1,5,6],\n    [4,5,6]\n]\n\n# Let's sort our list by the second index\nsort_list_by_index(1, list_to_sort)",
      -0.85791015625
    ],
    [
      "from collections import namedtuple\n\nListNode = namedtuple('ListNode', ['val', 'next'])\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        lst = []\n        cur = head\n        while cur:\n            lst.append(cur.val)\n            cur = cur.next\n        \n        lst.sort()\n        \n        result = ListNode(0)\n        cur = result\n        for i in lst:\n            cur.next = ListNode(i)\n            cur = cur.next\n        \n        return result.next",
      -0.8583984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n        else:\n            return \"null\"\n\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        \"\"\"\n        Time: O(n)\n        Space: O(n)\n        \"\"\"\n        # TODO: write a recursive solution\n        if not head:\n            return head\n\n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n\n        slow.next = None\n        while fast:\n            slow.next = fast\n            fast = fast.next\n            slow = slow.next\n\n        return head\n\n    def sortList2(self, head: ListNode) -> ListNode:\n        \"\"\"\n        Time: O(n)\n        Space: O(1)\n        \"\"\"\n        if not head:\n            return head\n\n        head, slow = head, head\n        while head and head.next:\n            slow = slow.next\n            head = head.next\n\n        slow.next = head\n        return head",
      -0.8583984375
    ],
    [
      "def sort_inner(my_list, index):\n    my_list[index].sort()\n    return my_list\n\n# Test cases\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nprint(sort_inner(my_list, 0))\nprint(sort_inner(my_list, 1))\nprint(sort_inner(my_list, 2))",
      -0.8583984375
    ],
    [
      "# Definition for a ListNode\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n        # slow now points to the last node\n        # fast now points to the first node\n        # if slow and fast are different, sort\n        if slow!= fast:\n            slow.next = fast.next\n            fast.next = head\n            return self.sortList(slow.next)\n\n        return head",
      -0.8583984375
    ],
    [
      "def sort_inner_list(list_of_lists, index):\n    new_list = []\n    for list_of_lists in list_of_lists:\n        new_list.append(list_of_lists[index])\n    return new_list\n\ndef sort_list(list_of_lists):\n    new_list = []\n    for list_of_lists in list_of_lists:\n        new_list.append(sort_inner_list(list_of_lists, 0))\n    return new_list\n\ndef main():\n    list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_list(list_of_lists))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "from sys import argv\n\ndef sort_lists_by_inner_list(lst, index):\n    for i in range(len(lst)):\n        lst[i] = sorted(lst[i], key=lambda x: x[index])\n    return lst\n\nif __name__ == \"__main__\":\n    lst = [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\n    print(sort_lists_by_inner_list(lst, 1))\n    print(sort_lists_by_inner_list(lst, 2))",
      -0.8583984375
    ],
    [
      "def sort(lists, index):\n    \"\"\"\n    :type lists: List[List[int]]\n    :type index: int\n    :rtype: void Do not return anything, modify lists in-place instead.\n    \"\"\"\n    lists.sort(key=lambda x: x[index])\n    return\n\n\nif __name__ == '__main__':\n    lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    sort(lists, 0)\n    for i in lists:\n        print(i)",
      -0.8583984375
    ],
    [
      "def sort(arr, index):\n    # Your sorting function should return the sorted list.\n    return sorted(arr, key=lambda x: x[index])\n\nif __name__ == \"__main__\":\n    arr = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n    print(sort(arr, 2))\n    print(arr)",
      -0.8583984375
    ],
    [
      "import random\n\n\ndef sort_by_index(list_of_lists, index):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    :param list_of_lists: A list of lists.\n    :param index: The index of the inner list to sort.\n    :return: A new sorted list.\n    \"\"\"\n    sorted_lists = []\n    for list_item in list_of_lists:\n        sorted_lists.append(list_item[:index])\n        sorted_lists.append(list_item[index:])\n    return sorted_lists\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    list_of_lists = [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6]]\n    print(sort_by_index(list_of_lists, 1))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "# https://www.codeeval.com/open_challenges/116/\n# https://www.codeeval.com/open_challenges/117/\n\ndef sort_list_by_inner_list(L, index):\n    if len(L) == 0:\n        return []\n    if len(L) == 1:\n        return L\n    if index >= len(L[0]):\n        return L\n    if index < 0:\n        return L\n    return_list = []\n    for i in range(0, len(L)):\n        if i == index:\n            return_list.append(L[i])\n        else:\n            return_list.append(L[i][index])\n    return return_list",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def sortByIndex(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: void Do not return anything, modify lists in-place instead.\n        \"\"\"\n        for l in lists:\n            l.sort(key=lambda x: x[0])\n\n        for i in xrange(1, len(lists)):\n            for j in xrange(i):\n                if lists[j][0] > lists[j-1][0]:\n                    lists[j-1][0], lists[j][0] = lists[j][0], lists[j-1][0]\n                    lists[j-1][1], lists[j][1] = lists[j][1], lists[j-1][1]",
      -0.8583984375
    ],
    [
      "from collections import OrderedDict\n\nclass Solution(object):\n    def sortListsByIndex(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        # build a dictionary\n        d = OrderedDict()\n        for l in lists:\n            d[l[0]] = l\n        # sort\n        return OrderedDict(sorted(d.items(), key=lambda t: t[1][-1]))",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def __init__(self, l):\n        \"\"\"\n        @param l: a list of lists\n        \"\"\"\n        self.l = l\n\n    def sort(self):\n        \"\"\"\n        @return: nothing\n        \"\"\"\n        self.sort_inner(0)\n\n    def sort_inner(self, index):\n        if len(self.l) == 1:\n            return\n        if index >= len(self.l[0]):\n            return\n        if len(self.l) == 1:\n            self.l[0][index] = 0\n        else:\n            self.sort_inner(index + 1)\n            if self.l[0][index] < self.l[0][index + 1]:\n                self.l[0][index] = self.l[0][index + 1]\n            else:\n                self.l[0][index] = self.l[0][index + 1]\n                self.sort_inner(index + 1)\n        return",
      -0.85888671875
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param index, an integer\n    # @return a ListNode\n    def sortList(self, head, index):\n        if head is None:\n            return head\n        if head.next is None:\n            return head\n        \n        # move head to the end of the list\n        while head.next is not None:\n            head = head.next\n            \n        # split the list into two lists\n        pre = head\n        cur = head\n        head = head.next\n        \n        # sort the two lists\n        pre.next, cur.next = cur, None\n        pre, cur = self.sortList(pre, index - 1), self.sortList(cur, index)\n        \n        # return the sorted list\n        pre.next, cur.next = cur, None\n        return pre",
      -0.85888671875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        \n        p = head\n        while p:\n            q = p.next\n            p.next = None\n            p = q\n            p = p.next\n            \n        p = head\n        while p:\n            q = p.next\n            p.next = None\n            if q:\n                p.next = q\n                p = p.next\n            else:\n                p = p.next\n                \n        p = head\n        while p:\n            q = p.next\n            p.next = None\n            if not q:\n                break\n            p.next = q\n            p = p.next\n            p = p.next\n            \n        return head",
      -0.85888671875
    ],
    [
      "def sort_inner_lists(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: void Do not return anything, modify lists in-place instead.\n    \"\"\"\n    for i in range(len(lists)):\n        lists[i] = sorted(lists[i], key=lambda x: x[i])",
      -0.85888671875
    ],
    [
      "# Definition for a ListNode\nclass ListNode(object):\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next:\n            curr.next = curr.next.next\n            \n        curr = dummy\n        while curr.next:\n            tmp = curr.next\n            curr.next = tmp.next\n            tmp.next = tmp.next.next\n            \n            curr = curr.next\n            \n        return dummy.next",
      -0.85888671875
    ],
    [
      "def sort_list_by_index(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\ndef sort_list_by_index_recursive(lst, index):\n    if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return [lst[0], lst[1]]\n    else:\n        return sort_list_by_index_recursive(lst[1:], index) + [lst[0]] + sort_list_by_index_recursive(lst[:1], index)\n\nif __name__ == \"__main__\":\n    a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_list_by_index(a, 0))\n    print(sort_list_by_index_recursive(a, 0))",
      -0.92333984375
    ],
    [
      "# Definition for a ListNode.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        if head == None:\n            return head\n        fast, slow = head, head\n        while fast.next!= None:\n            fast = fast.next.next\n            if fast == None:\n                break\n            slow = slow.next\n        if fast == None:\n            return head\n        slow = self.sortList(slow)\n        head.next = self.merge(slow, head.next)\n        return head\n    \n    def merge(self, left: ListNode, right: ListNode) -> ListNode:\n        fast, slow = left, right\n        while fast!= None and slow!= None:\n            if fast.val < slow.val:\n                slow = slow.next\n            else:\n                fast = fast.next\n        if fast!= None:\n            slow.next = self.merge(slow.next, right)\n        return left",
      -0.92724609375
    ],
    [
      "def sort_inner_list(lists, index):\n    \"\"\"\n    :type lists: List[List[int]]\n    :type index: int\n    :rtype: List[List[int]]\n    \"\"\"\n    # sort_inner_list = lambda lists: sort_inner_list(lists, index)\n    return sort_inner_list(lists, index)\n\n\nif __name__ == '__main__':\n    lists = [[1, 2, 3], [2, 3, 4], [4, 5, 6], [5, 6, 7], [7, 8, 9]]\n    print(sort_inner_list(lists, 0))\n    print(sort_inner_list(lists, 1))\n    print(sort_inner_list(lists, 2))\n    print(sort_inner_list(lists, 3))\n    print(sort_inner_list(lists, 4))\n    print(sort_inner_list(lists, 5))\n    print(sort_inner_list(lists, 6))\n    print(sort_inner_list(lists, 7))\n    print(sort_inner_list(lists, 8))",
      -1.0341796875
    ],
    [
      "import timeit\n\n\ndef sort_list_by_inner_list(list_to_sort):\n    # +++your code here+++\n    # Write tests for the case that the list is empty.\n    if len(list_to_sort) == 0:\n        return list_to_sort\n\n    # Write tests for the case that the list is only one element.\n    if len(list_to_sort) == 1:\n        return list_to_sort\n\n    # Write tests for the case that the list is more than one element.\n    inner_list_to_sort = list_to_sort[0]\n    for i in range(1, len(list_to_sort)):\n        inner_list_to_sort = inner_list_to_sort + list_to_sort[i]\n\n    new_list_to_sort = []\n    for i in range(0, len(inner_list_to_sort)):\n        new_list_to_sort.append(inner_list_to_sort[i])\n\n    new_list_to_sort.sort()\n\n    return new_list_to_sort\n\n\nif __name__ == '__main__':\n    start = timeit.default_timer()\n    print \"List: \"\n    # list_to_sort = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]\n    list_to_sort = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print sort_list_by_inner_list(list_to_sort)\n    print \"Time:\", timeit.default_timer() - start",
      -1.107421875
    ],
    [
      "from random import randint\n\ndef sort_lists(lst, index):\n    if lst == []:\n        return []\n\n    result = []\n\n    for i in lst:\n        result.append(i[:index])\n        result.append(i[index:])\n\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1])\n\n    return result\n\ndef test():\n    lst = [[1,2,3],[4,5,6]]\n    lst2 = [[1,2],[4,5]]\n\n    print sort_lists(lst, 2)\n    print sort_lists(lst2, 1)\n\ntest()",
      -1.322265625
    ],
    [
      "import random\nimport sys\n\ndef sort_by_index(lst, index):\n    \"\"\"\n    >>> sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 1)\n    [[1,2,3], [4,5,6], [7,8,9]]\n    >>> sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 2)\n    [[1,2,3], [7,8,9], [4,5,6]]\n    >>> sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 3)\n    [[1,2,3], [7,8,9], [4,5,6]]\n    >>> sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 0)\n    [[1,2,3], [4,5,6], [7,8,9]]\n    >>> sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 5)\n    [[1,2,3], [4,5,6], [7,8,9]]\n    >>> sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 6)\n    [[1,2,3], [7,8,9], [4,5,6]]\n    >>> sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 7)\n    [[1,2,3], [7,8,9], [4,5,6]]\n    \"\"\"\n    if index < 0 or index > len(lst[0]) - 1:\n        raise IndexError(\"Invalid index\")\n    lst_sorted = []\n    for lst_item in lst:\n        lst_sorted.append(lst_item[:index])\n        lst_sorted.append(lst_item[index:])\n    return lst_sorted",
      -1.3349609375
    ],
    [
      "#!/usr/bin/env python\n\nfrom collections import namedtuple\n\n# Data structure\n# InnerList = namedtuple('InnerList', ['x', 'y'])\n\ndef sort_inner_list(lst, index):\n    \"\"\"\n    Sort the list lst by index.\n\n    :param lst: list of lists to sort\n    :param index: index of the inner list to sort\n    :return: sorted list\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    lst = [\n        [1, 2, 3],\n        [2, 4, 6],\n        [1, 5, 6],\n        [1, 2, 3],\n        [3, 4, 6],\n        [1, 2, 3],\n        [2, 4, 6],\n        [1, 5, 6],\n        [1, 2, 3],\n        [3, 4, 6],\n        [1, 2, 3],\n        [2, 4, 6],\n        [1, 5, 6],\n        [1, 2, 3],\n        [3, 4, 6],\n        [1, 2, 3],\n        [2, 4, 6],\n        [1, 5, 6],\n        [1, 2, 3],\n        [3, 4, 6],\n        [1, 2, 3],\n        [2, 4, 6],\n        [1, 5, 6],\n        [1, 2, 3],\n        [3, 4, 6],\n        [1, 2, 3],\n        [2, 4, 6],\n        [1, 5, 6],\n        [1, 2, 3],\n        [3, 4, 6],\n        [1, 2, 3],\n        [2, 4, 6],\n        [1, 5, 6],\n        [1, 2, 3],\n        [3, 4, 6],\n        [1, 2, 3],\n        [2, 4, 6],\n        [1, 5, 6],\n        [1, 2, 3],\n        [3, 4, 6],\n        [1, 2, 3],\n        [2",
      -1.5126953125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            fast = fast.next.next\n            slow = slow.next\n\n        if not fast:\n            return head\n\n        fast = head\n        while fast.next:\n            if fast.next.next:\n                fast = fast.next.next\n            else:\n                fast = fast.next\n\n        slow.next = fast.next\n        slow.next = self.sortList(slow.next)\n        return head",
      -1.5166015625
    ],
    [
      "#!/usr/bin/env python\n\n# http://www.geeksforgeeks.org/sort-list-of-lists-by-index-of-inner-list/\n\ndef sort_inner(lst, ind):\n    if ind == len(lst):\n        return lst\n    if ind < 0 or ind >= len(lst):\n        raise ValueError('Out of range')\n    \n    if ind == 0:\n        lst.sort()\n        return lst\n    \n    lst_new = []\n    for i in range(0, len(lst)):\n        if i == ind:\n            lst_new.append(lst[i])\n        else:\n            lst_new.append(lst[i])\n            \n    lst_new.sort()\n    lst_new.insert(ind, lst[ind])\n    lst[ind] = lst_new[ind]\n    return lst",
      -1.5556640625
    ],
    [
      "def sort_inner(arr, index):\n    sorted_list = []\n    for i in range(len(arr)):\n        sorted_list.append(arr[i][index])\n    sorted_list.sort()\n    return sorted_list\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sort_inner([[1,2], [3,4], [5,6]], 1) == [[1,2], [3,4], [5,6]]\n    assert sort_inner([[1,2], [3,4], [5,6]], 2) == [[1,2], [5,6], [3,4]]\n    assert sort_inner([[1,2], [3,4], [5,6]], 3) == [[1,2], [3,4], [5,6]]\n    assert sort_inner([[1,2], [3,4], [5,6]], 4) == [[3,4], [1,2], [5,6]]\n    assert sort_inner([[1,2], [3,4], [5,6]], 5) == [[3,4], [5,6], [1,2]]\n    assert sort_inner([[1,2], [3,4], [5,6]], 6) == [[5,6], [3,4], [1,2]]\n    assert sort_inner([[1,2], [3,4], [5,6]], 7) == [[5,6], [1,2], [3,4]]",
      -1.7763671875
    ],
    [
      "def sort_list_by_index(lst, index):\n    \"\"\"\n    >>> sort_list_by_index([[1, 2], [3, 4]], 0)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 1)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 2)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 3)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 4)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 5)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 6)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 7)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 8)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 9)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 10)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 11)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 12)\n    [[1, 2], [3, 4]]\n    >>> sort_list_by_index([[1, 2], [3, 4]], 13)",
      -2.171875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def __init__(self):\n        self.result = []\n\n    def sortByBinaryTree(self, node, index):\n        if not node:\n            return\n\n        self.sortByBinaryTree(node.left, index - 1)\n        self.sortByBinaryTree(node.right, index + 1)\n\n        # Now we have to do the actual sorting.\n        i = 0\n        while i < len(self.result):\n            if self.result[i].val == node.val:\n                # This is a leaf node.\n                self.result.insert(i, node)\n                i += 1\n                continue\n\n            if self.result[i].val > node.val:\n                # This is a node on the right side of the node.\n                i += 1\n                continue\n\n            # This is a node on the left side of the node.\n            self.result.insert(i, node)\n            i += 1\n            continue\n\n        # This is a leaf node.\n        self.result.append(node)\n\n    def sortBinaryTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: void Do not return anything, modify root in-place instead.\n        \"\"\"\n        if not root:\n            return\n\n        self.sortByBinaryTree(root, 0)",
      -2.611328125
    ],
    [
      "# https://www.hackerrank.com/challenges/sorting-lists/problem\n# https://www.hackerrank.com/challenges/sorting-lists/submissions/code/271496\n\ndef sort_by_inner_list(arr):\n    \"\"\"\n    :type arr: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    # Sort the inner lists\n    for i in range(len(arr)):\n        arr[i] = sorted(arr[i])\n    # Return the sorted list\n    return arr\n\nif __name__ == '__main__':\n    arr = [[6, 7, 8], [1, 2, 3], [4, 5, 6]]\n    print(sort_by_inner_list(arr))",
      -2.701171875
    ],
    [
      "def sort_inner(l, i):\n    l.sort(key=lambda x: x[i])\n\ndef sort_inner_reverse(l, i):\n    l.sort(key=lambda x: x[i], reverse=True)\n\ndef sort_inner_swap(l, i, j):\n    l.sort(key=lambda x: x[i], reverse=False)\n    l.sort(key=lambda x: x[j], reverse=True)\n\ndef sort_inner_swap_reverse(l, i, j):\n    l.sort(key=lambda x: x[i], reverse=False)\n    l.sort(key=lambda x: x[j], reverse=True)\n\ndef sort_inner_swap_reverse_swap(l, i, j):\n    l.sort(key=lambda x: x[i], reverse=False)\n    l.sort(key=lambda x: x[j], reverse=True)\n    l.sort(key=lambda x: x[i], reverse=True)\n\ndef sort_inner_swap_reverse_swap_reverse(l, i, j):\n    l.sort(key=lambda x: x[i], reverse=False)\n    l.sort(key=lambda x: x[j], reverse=True)\n    l.sort(key=lambda x: x[i], reverse=True)\n\ndef sort_inner_swap_reverse_swap_reverse_reverse(l, i, j):\n    l.sort(key=lambda x: x[i], reverse=False)\n    l.sort(key=lambda x: x[j], reverse=True)\n    l.sort(key=lambda x: x[i], reverse=True)\n    l.sort(key=lambda x: x[j], reverse=True)\n\ndef sort_inner_swap_reverse_swap_reverse_reverse_reverse(l, i, j):\n    l.sort(key=lambda x: x[i], reverse=False)\n    l.sort(key=lambda x: x[j], reverse=True)\n    l.sort(key=lambda x: x[i], reverse=True)",
      -3.169921875
    ],
    [
      "import random\nfrom collections import OrderedDict\n\ndef sort_by_inner_list(lst, index):\n    \"\"\"\n    Write a function to sort a list of lists by a given index of the inner list.\n\n    >>> sort_by_inner_list([[1,2,3],[4,5,6],[7,8,9]], 1)\n    [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\n    >>> sort_by_inner_list([[1,2,3],[4,5,6],[7,8,9]], 2)\n    [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\n    >>> sort_by_inner_list([[1,2,3],[4,5,6],[7,8,9]], 3)\n    [[4, 5, 6], [1, 2, 3], [7, 8, 9]]\n    >>> sort_by_inner_list([[1,2,3],[4,5,6],[7,8,9]], 4)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> sort_by_inner_list([[1,2,3],[4,5,6],[7,8,9]], 5)\n    [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\n    >>> sort_by_inner_list([[1,2,3],[4,5,6],[7,8,9]], 6)\n    [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\n    >>> sort_by_inner_list([[1,2,3],[4,5,6],[7,8,9]], 7)\n    [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\n    >>> sort_by_inner_list([[1,2,3],[4,5,6],[7,8,9]], 8)\n    [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\n    >>> sort_by_inner_list([[1,2",
      -3.240234375
    ],
    [
      "def sort_by_index(lst, index):\n    return [lst[i] for i in sorted(range(len(lst)), key=lambda i: lst[i][index])]\n\ndef test_sort_by_index():\n    assert sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 2) == [[1,2,3], [4,5,6], [7,8,9]]\n    assert sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 3) == [[4,5,6], [1,2,3], [7,8,9]]\n    assert sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 0) == [[1,2,3], [4,5,6], [7,8,9]]\n    assert sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 1) == [[1,2,3], [4,5,6], [7,8,9]]\n    assert sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 4) == [[7,8,9], [1,2,3], [4,5,6]]\n    assert sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 5) == [[7,8,9], [4,5,6], [1,2,3]]\n    assert sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 6) == [[4,5,6], [1,2,3], [7,8,9]]\n    assert sort_by_index([[1,2,3], [4,5,6], [7,8,9]], 7) == [[1,2,3], [4,5,6], [7,8,9]]\n    assert sort_by_index([[1,2,",
      -3.4609375
    ],
    [
      "# https://oj.leetcode.com/problems/sort-list-by-index/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param index, an integer\n    # @return a ListNode\n    def sortListByIndex(self, head, index):\n        # write your code here\n        if head == None or head.next == None:\n            return head\n        newHead = ListNode(0)\n        newHead.next = head\n        node = newHead\n        while node.next:\n            curNode = node.next\n            curNode.next = None\n            curNode = curNode.next\n            while curNode.next:\n                if curNode.next.next:\n                    curNode.next.next = curNode.next.next.next\n                else:\n                    curNode.next = curNode.next.next\n                curNode = curNode.next\n            node = node.next\n            node.next = curNode\n        temp = newHead.next\n        while temp:\n            temp = temp.next\n            if temp.next:\n                temp.next = temp.next.next\n            else:\n                temp.next = None\n        node = newHead\n        while node:\n            if index == 0:\n                temp = node.next\n                node.next = None\n                node = temp\n            else:\n                index -= 1\n                temp = node.next\n                node.next = None\n                node = temp\n        return newHead.next",
      -3.70703125
    ],
    [
      "# https://leetcode.com/problems/sort-list-with-index/discuss/127792/Python-solution\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution:\n    def sortListWithIndex(self, head: ListNode, index: int) -> ListNode:\n        if head is None or head.next is None:\n            return head\n        \n        p = head\n        q = head\n        while p.next is not None:\n            p = p.next\n            q = q.next\n            if p.val == q.val:\n                p.next = q.next\n                q.next = p\n            else:\n                if p.val > q.val:\n                    p.next = q\n                    q.next = p\n                else:\n                    p.next = q\n                    q.next = p\n\n        if index == 0:\n            return head\n\n        p = head\n        while p.next is not None:\n            p = p.next\n            if p.val == q.val:\n                p.next = q.next\n                q.next = p\n            else:\n                if p.val > q.val:\n                    p.next = q\n                    q.next = p\n                else:\n                    p.next = q\n                    q.next = p\n        return head",
      -3.861328125
    ],
    [
      "import random\nimport time\n\ndef sort(arr, index):\n    if len(arr) < 2:\n        return arr\n    mid = len(arr) / 2\n    left = sort(arr[:mid], index)\n    right = sort(arr[mid:], index)\n    return merge(left, right, index)\n\ndef merge(left, right, index):\n    l_left = []\n    l_right = []\n    for item in left:\n        if index < len(item):\n            l_left.append(item[index])\n        else:\n            l_left.append(item)\n    for item in right:\n        if index < len(item):\n            l_right.append(item[index])\n        else:\n            l_right.append(item)\n    return l_left + l_right\n\ndef main():\n    arr = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    start = time.time()\n    sorted_arr = sort(arr, 0)\n    end = time.time()\n    print \"Time elapsed: \" + str(end - start)\n    print sorted_arr\n\nif __name__ == '__main__':\n    main()",
      -4.484375
    ],
    [
      "from __future__ import print_function\nimport sys\nimport random\n\n__author__ = 'Daniel'\n\n\ndef sort_lists(lists, index):\n    \"\"\"\n    :type lists: List[List]\n    :type index: int\n    :rtype: None\n    \"\"\"\n    if len(lists) == 0:\n        return\n\n    if len(lists) == 1:\n        return\n\n    # if len(lists) > 1:\n    #     random.shuffle(lists)\n\n    if index == 0:\n        lists[0].sort()\n    elif index == 1:\n        for i in range(len(lists) - 1):\n            lists[i + 1].sort(key=lambda x: x[0])\n        lists[len(lists) - 1].sort(key=lambda x: x[1])\n    else:\n        for i in range(len(lists) - 1):\n            lists[i + 1].sort(key=lambda x: x[index])\n        lists[len(lists) - 1].sort(key=lambda x: x[index - 1])\n\n    for i in range(len(lists)):\n        lists[i].sort()\n\n\nif __name__ == '__main__':\n    if len(sys.argv) < 3:\n        print(\"Usage: {} <list of lists> <index of list to sort>\".format(sys.argv[0]))\n        sys.exit(1)\n\n    lists = []\n    for i in range(int(sys.argv[1])):\n        lists.append(random.sample(range(0, 10), 10))\n\n    sort_lists(lists, int(sys.argv[2]))\n    for i in range(len(lists)):\n        print(lists[i])",
      -4.71875
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param index, an integer\n    # @return a ListNode\n    def sortList(self, head, index):\n        # write your code here\n        if head == None or head.next == None:\n            return head\n        \n        current = head\n        previous = None\n        while current!= None:\n            next = current.next\n            current.next = previous\n            previous = current\n            current = next\n        \n        current = head\n        previous = None\n        while current!= None:\n            if index == 0:\n                previous.next = current.next\n                current.next = None\n                break\n            else:\n                current = current.next.next\n                previous.next = current\n                current = previous\n                previous = current.next\n        return previous",
      -4.74609375
    ],
    [
      "import numpy as np\n\ndef sort_lists(arr, index):\n    \"\"\"\n    Sort the lists by the given index of the inner list.\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return arr[0]\n    if index == 0:\n        return arr\n    if index == 1:\n        return sort_lists(arr[1:], 0)\n    if index == 2:\n        return sort_lists(arr[1:], 1)\n    if index == 3:\n        return sort_lists(arr[1:], 2)\n    return sort_lists(arr[1:], index - 1)\n\ndef test_cases():\n    \"\"\"\n    Test cases for the sort_lists function.\n    \"\"\"\n    arr = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8]\n    ]\n    print(sort_lists(arr, 0))\n    print(sort_lists(arr, 1))\n    print(sort_lists(arr, 2))\n    print(sort_lists(arr, 3))\n    print(sort_lists(arr, 4))\n    print(sort_lists(arr, 5))\n    print(sort_lists(arr, 6))\n    print(sort_lists(arr, 7))\n    print(sort_lists(arr, 8))\n\nif __name__ == '__main__':\n    test_cases()",
      -5.109375
    ],
    [
      "def sort_inner(lst, index):\n    \"\"\"\n    Input:\n        lst: list of lists, where each list is a list of numbers\n        index: index of the inner list\n    Output:\n        None\n    \"\"\"\n\n    # Sort the inner list\n    lst[index].sort()\n\n    # Sort the rest of the lists\n    for i in range(len(lst)):\n        if i!= index:\n            lst[i].sort()\n\ndef sort_list(lst):\n    \"\"\"\n    Input:\n        lst: list of lists, where each list is a list of numbers\n    Output:\n        None\n    \"\"\"\n\n    # Sort the inner list\n    lst[0].sort()\n\n    # Sort the rest of the lists\n    for i in range(1, len(lst)):\n        sort_inner(lst, i)\n\nif __name__ == '__main__':\n    lst = [ [2, 3, 4], [1, 2, 3], [4, 5, 6], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3] ]\n\n    sort_list(lst)\n    print(lst)\n\n    lst = [ [2, 3, 4], [1, 2, 3], [4, 5, 6], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3] ]\n\n    sort_list(lst)\n    print(lst)",
      -5.30078125
    ],
    [
      "import random\n\n# O(n*m) time complexity\ndef sort_by_index(arr, index):\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return arr[0]\n    mid = int(len(arr) / 2)\n    left = sort_by_index(arr[:mid], index)\n    right = sort_by_index(arr[mid:], index)\n    return merge(left, right)\n\n# O(n*m) time complexity\ndef merge(left, right):\n    res = []\n    cur = res\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            cur.append(left[i])\n            i += 1\n        else:\n            cur.append(right[j])\n            j += 1\n    cur += left[i:]\n    cur += right[j:]\n    return res\n\n# O(n*m) time complexity\ndef sort_by_index2(arr, index):\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return arr[0]\n    mid = int(len(arr) / 2)\n    left = sort_by_index2(arr[:mid], index)\n    right = sort_by_index2(arr[mid:], index)\n    return merge(left, right)\n\n# O(n*m) time complexity\ndef merge_by_index(arr, index):\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return arr[0]\n    mid = int(len(arr) / 2)\n    left = merge_by_index(arr[:mid], index)\n    right = merge_by_index(arr[mid:], index)\n    return merge(left, right)\n\n# O(n*m) time complexity\ndef merge_by_index2(arr, index):\n    if len(arr) == 0:\n        return arr\n    if len(arr) == 1:\n        return arr[0]",
      -5.47265625
    ],
    [
      "import sys\n\nif len(sys.argv) < 3:\n    print(\"Please enter a number of the index to sort by\")\n    exit(1)\n\ndef sort_lists(lists, index):\n    # create a list of lists\n    sorted_lists = []\n    for list in lists:\n        sorted_lists.append([])\n        for item in list:\n            sorted_lists[-1].append(item)\n    # sort the list of lists\n    sorted_lists.sort(key=lambda list: list[index])\n    return sorted_lists\n\n\nif __name__ == \"__main__\":\n    # test case\n    lists = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print(sort_lists(lists, 0))\n    print(sort_lists(lists, 1))\n    print(sort_lists(lists, 2))\n    print(sort_lists(lists, 3))\n\n    # test case\n    lists = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print(sort_lists(lists, 0))\n    print(sort_lists(lists, 1))\n    print(sort_lists(lists, 2))\n    print(sort_lists(lists, 3))",
      -5.515625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        \"\"\"\n        Pre:\n            * head is not None\n        Post:\n            * head is not None\n            * head.next is None\n        \"\"\"\n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while prev.next:\n            cur = prev.next\n            while cur.next:\n                if cur.next.next:\n                    cur.next = cur.next.next\n                else:\n                    prev.next = cur.next\n                    cur.next = None\n                    break\n            else:\n                prev.next = None\n                cur.next = None\n                prev = cur\n        return dummy.next\n\n\nif __name__ == \"__main__\":\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    head.next.next.next.next.next.next.next.next.next = ListNode(10)\n    head.next.next.next.next.next.next.next.next.next.next = ListNode(11)\n    head.next.next.next.next.next.next.next.next.next.next.next = ListNode(12)\n    head.next.next.next.next.next.next.next.next.next.",
      -5.6875
    ],
    [
      "import random\n\n\ndef sort_inner_lists(lists, index):\n    \"\"\"\n    :type lists: List[List[int]]\n    :type index: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    for i in range(len(lists)):\n        if lists[i][index]!= -1:\n            result.append(lists[i])\n            lists[i][index] = -1\n    for i in range(len(lists)):\n        if lists[i][index]!= -1:\n            lists[i].insert(index, -1)\n    return result\n\n\ndef sort_lists(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    for i in range(len(lists)):\n        lists[i] = sort_inner_lists(lists, i)\n    return lists\n\n\nif __name__ == '__main__':\n    lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]\n    sorted_lists = sort_lists(lists)\n    print(sorted_lists)",
      -5.91796875
    ],
    [
      "def sort_lists(lists):\n    \"\"\"\n    >>> sort_lists([[1, 2], [3, 4], [5, 6]])\n    [[1, 2], [3, 4], [5, 6]]\n    >>> sort_lists([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 2], [3, 4], [5, 6], [7, 8]]\n    >>> sort_lists([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n    >>> sort_lists([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]\n    >>> sort_lists([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]])\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]\n    >>> sort_lists([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]])\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]\n    \"\"\"\n    for i in range(len(lists)):\n        lists[i] = sorted(lists[i])\n    return lists\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.92578125
    ],
    [
      "# -*- coding: utf-8 -*-\n\nfrom utils import *\n\n__author__ = 'Libao Jin'\n__date__ = 'December 18, 2015'\n\nclass Solution:\n    def sortListByIndex(self, lists: List[List], index: int) -> None:\n        if not lists:\n            return\n\n        def sort_by_index(lists: List[List], index: int, start: int, end: int) -> None:\n            if start >= end:\n                return\n\n            mid = start + (end - start) / 2\n            sort_by_index(lists, index, start, mid)\n            sort_by_index(lists, index, mid, end)\n            merge(lists, index, start, mid, end)\n\n        sort_by_index(lists, index, 0, len(lists))\n\n    def merge(self, lists: List[List], index: int, start: int, mid: int, end: int) -> None:\n        result = []\n        i = start\n        j = mid + 1\n        k = start\n\n        while i < mid and j < end:\n            if lists[i][index] < lists[j][index]:\n                result.append(lists[i])\n                i += 1\n            else:\n                result.append(lists[j])\n                j += 1\n        while i < mid:\n            result.append(lists[i])\n            i += 1\n        while j < end:\n            result.append(lists[j])\n            j += 1\n\n        for i in range(start, end):\n            lists[i] = result[i - start]\n\n    def sortLists(self, lists: List[List]) -> None:\n        self.sortListByIndex(lists, 0)\n\n\nif __name__ == '__main__':\n    lists = [[1, 2], [1, 2, 3], [1, 2, 3, 4, 5]]\n    Solution().sortLists(lists)\n    for l in lists:\n        print(l)",
      -5.92578125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution:\n    def sortList(self, head: ListNode) -> None:\n        \"\"\"\n        Using a stack,\n        we need to traverse the list twice,\n        one for each part.\n        \"\"\"\n        if head is None:\n            return\n\n        # We need to traverse the list twice,\n        # one for the inner part, and the other for the outer part.\n        stack = []\n        curr = head\n        while curr:\n            stack.append(curr)\n            curr = curr.next\n        stack.append(None)\n\n        # Traverse the list twice.\n        # The first time, we traverse the inner part.\n        # The second time, we traverse the outer part.\n        # We can achieve the same result by using a single stack.\n        curr = head\n        while curr:\n            curr.next = stack.pop()\n            curr = curr.next\n\n        # Traverse the list by reversing the inner part.\n        curr = head\n        while curr:\n            curr.next = stack.pop()\n            curr = curr.next.next\n\n        # Traverse the list by reversing the outer part.\n        curr = head\n        while curr:\n            curr.next = stack.pop()\n            curr = curr.next.next",
      -5.9609375
    ],
    [
      "def sort_by_index(lst, index):\n    lst = sorted(lst, key=lambda x: x[index])\n    return lst\n\nif __name__ == '__main__':\n    test_cases = [\n        [[1, 2], 0],\n        [[2, 3], 1],\n        [[4, 5, 6], 2],\n        [[4, 5, 6], 1],\n        [[1, 2, 3], 2],\n        [[1, 2, 3], 0],\n        [[1, 2, 3], 3],\n        [[1, 2, 3], 2],\n        [[1, 2, 3], 1],\n        [[1, 2, 3], 2],\n        [[1, 2, 3], 3],\n        [[1, 2, 3], 4],\n        [[1, 2, 3], 5],\n        [[1, 2, 3], 6],\n        [[1, 2, 3], 7],\n        [[1, 2, 3], 8],\n        [[1, 2, 3], 9],\n        [[1, 2, 3], 10],\n        [[1, 2, 3], 11],\n        [[1, 2, 3], 12],\n        [[1, 2, 3], 13],\n        [[1, 2, 3], 14],\n        [[1, 2, 3], 15],\n        [[1, 2, 3], 16],\n        [[1, 2, 3], 17],\n        [[1, 2, 3], 18],\n        [[1, 2, 3], 19],\n        [[1, 2, 3], 20],\n        [[1, 2, 3], 21],\n        [[1, 2, 3], 22],\n        [[1, 2, 3], 23],\n        [[1, 2, 3], 24],\n        [[1, 2, 3], 25],\n        [[1, 2, 3], 26],\n        [[1, 2, 3], 27],\n        [[1, 2, 3], 28],\n        [[1, 2, 3], 29],\n        [[1, 2, 3], 30],\n        [[1, 2, 3], 31],\n        [[1, 2, 3], 32],\n        [[1, 2, 3], 33],\n        [[1, 2, 3],",
      -6.109375
    ],
    [
      "from collections import deque\n\ndef sort_list(lists, index):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n    Input:\n        lists: a list of lists.\n        index: index of the inner list to sort by.\n    Returns:\n        A new sorted list of lists.\n    \"\"\"\n    result = []\n    for list in lists:\n        result.append([i for i in list])\n    return sorted(result, key=lambda l: l[index])\n\ndef test_sort_list():\n    \"\"\"\n    Test sort_list().\n    \"\"\"\n    lists = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert sort_list(lists, 0) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert sort_list(lists, 1) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert sort_list(lists, 2) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert sort_list(lists, 3) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n\ndef test_sort_list_2():\n    \"\"\"\n    Test sort_list() with a given index that doesn't exist.\n    \"\"\"\n    lists = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    with pytest.raises(IndexError):\n        sort_list(lists, 4)",
      -6.1875
    ],
    [
      "from collections import defaultdict\n\ndef sort_lists_by_index(lists, index):\n    \"\"\"\n    Returns a list of lists sorted by the given index.\n    \"\"\"\n    result = []\n    for list_ in lists:\n        result.append(sorted(list_, key=lambda x: x[index]))\n\n    return result\n\ndef test_sort_lists_by_index():\n    lists = [[1, 3, 4], [1, 2, 3], [4, 5, 6]]\n    assert sort_lists_by_index(lists, 0) == [[1, 1, 4], [1, 2, 3], [4, 5, 6]]\n    assert sort_lists_by_index(lists, 1) == [[1, 1, 3], [1, 2, 4], [4, 5, 6]]\n    assert sort_lists_by_index(lists, 2) == [[1, 1, 3], [4, 5, 6], [1, 2, 4]]\n    assert sort_lists_by_index(lists, 3) == [[1, 1, 3], [1, 2, 3], [4, 5, 6]]\n    assert sort_lists_by_index(lists, 4) == [[1, 1, 3], [1, 2, 3], [4, 5, 6]]\n\n    # Make sure it works with a dictionary\n    lists = [[1, 3, 4], [1, 2, 3], [4, 5, 6]]\n    assert sort_lists_by_index(lists, 0) == [[1, 1, 4], [1, 2, 3], [4, 5, 6]]\n    assert sort_lists_by_index(lists, 1) == [[1, 1, 3], [1, 2, 4], [4, 5, 6]]\n    assert sort_lists_by_index(lists, 2) == [[1, 1, 3], [4, 5, 6], [1, 2, 4]]\n    assert sort_lists_by_index(lists, 3) == [[1, 1, 3], [1, 2, 3], [4, 5, 6]]\n    assert sort_lists_by_index(lists, 4) == [[1, 1, 3], [1, 2",
      -6.26953125
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def sortList(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: List[ListNode]\n        \"\"\"\n        if not lists:\n            return []\n        q = []\n        for l in lists:\n            q.append(l)\n        while q:\n            head = q.pop(0)\n            if head:\n                while head.next and head.next.val == head.val:\n                    head = head.next\n                q.append(head.next)\n                head.next = None\n            else:\n                head = q.pop(0)\n                q.append(head)\n        return q\n\n    def sortList2(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: List[ListNode]\n        \"\"\"\n        if not lists:\n            return []\n        if len(lists) == 1:\n            return lists\n        l = []\n        for lst in lists:\n            while lst:\n                l.append(lst.pop(0))\n            l.append(lst)\n        res = l[0]\n        for lst in l[1:]:\n            res = self.insert(res, lst)\n        return res\n\n    def insert(self, head, list):\n        while head:\n            if head.val < list.val:\n                head = head.next\n            else:\n                break\n        head.next = ListNode(list.val)\n        head.next.next = list\n        return head\n\n    def sortList3(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: List[ListNode]\n        \"\"\"\n        if not lists:\n            return []\n        l = []\n        for lst in lists:\n            while lst:\n                l.append(lst.pop(0))\n            l.append(lst)\n        res = l[0",
      -6.44140625
    ],
    [
      "def sort(arr, k):\n    if len(arr) == 1:\n        return arr\n    arr = sorted(arr, key=lambda x: x[k])\n    for i in range(len(arr) - 1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n\ndef sort_inner(arr, k):\n    if len(arr) == 1:\n        return arr\n    arr = sorted(arr, key=lambda x: x[k])\n    for i in range(len(arr) - 1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n\ndef sort_inner_2(arr, k):\n    if len(arr) == 1:\n        return arr\n    arr = sorted(arr, key=lambda x: x[k])\n    for i in range(len(arr) - 1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n\ndef sort_inner_3(arr, k):\n    if len(arr) == 1:\n        return arr\n    arr = sorted(arr, key=lambda x: x[k])\n    for i in range(len(arr) - 1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n\ndef sort_inner_4(arr, k):\n    if len(arr) == 1:\n        return arr\n    arr = sorted(arr, key=lambda x: x[k])\n    for i in range(len(arr) - 1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n\ndef sort_inner_5(arr, k):\n    if len(arr) == 1:\n        return arr\n    arr = sorted(arr, key=lambda x: x[k])\n    for i in range(len(arr) - 1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n\nif __name__ == \"__",
      -6.69140625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n\n        p1, p2 = head, head.next\n        while p2:\n            if p1.val > p2.val:\n                p1, p2 = p2, p2.next\n            else:\n                p2 = p2.next\n        p1.next = None\n        head = self.sortList(head)\n        return head\n\n\nif __name__ == \"__main__\":\n    head = ListNode(3)\n    head.next = ListNode(1)\n    head.next.next = ListNode(2)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    print Solution().sortList(head)\n    print Solution().sortList(head)",
      -6.734375
    ],
    [
      "def sort_by_index(list_of_lists, index):\n    sorted_list = []\n    for i in range(len(list_of_lists)):\n        sorted_list.append(list_of_lists[i][:index])\n    for i in range(len(list_of_lists)):\n        for j in range(index):\n            list_of_lists[i].insert(j, None)\n        list_of_lists[i].pop(index)\n        for j in range(len(list_of_lists[i])):\n            list_of_lists[i][j] = sorted_list[j]\n    return list_of_lists\n\nif __name__ == \"__main__\":\n    l = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [10, 11, 12],\n        [13, 14, 15],\n        [16, 17, 18],\n        [19, 20, 21],\n        [22, 23, 24],\n        [25, 26, 27],\n        [28, 29, 30]\n    ]\n    print(sort_by_index(l, 2))",
      -6.82421875
    ],
    [
      "# Approach 1: Recursion\n\ndef sort_recursion(lst, index):\n    if not lst or len(lst) == 1:\n        return lst\n    new_lst = []\n    for i in range(len(lst)):\n        if i == index:\n            new_lst.append(lst[i])\n            new_lst.extend(sort_recursion(lst[i + 1:], index + 1))\n        else:\n            new_lst.append(lst[i])\n    return new_lst\n\n# Approach 2: Iteration\n\ndef sort_iteration(lst, index):\n    new_lst = []\n    for i in range(len(lst)):\n        if i == index:\n            new_lst.append(lst[i])\n            new_lst.append(lst[i + 1:])\n        else:\n            new_lst.append(lst[i])\n    return new_lst\n\n# Approach 3: Iteration + Stack\n\ndef sort_iteration_stack(lst, index):\n    new_lst = []\n    stack = []\n    for i in range(len(lst)):\n        if i == index:\n            new_lst.append(lst[i])\n            stack.append(lst[i + 1:])\n        else:\n            new_lst.append(lst[i])\n            stack.append(lst[i + 1:])\n    return new_lst\n\n# Approach 4: Recursion + Stack\n\ndef sort_recursion_stack(lst, index):\n    new_lst = []\n    stack = []\n    for i in range(len(lst)):\n        if i == index:\n            new_lst.append(lst[i])\n            stack.append(lst[i + 1:])\n        else:\n            new_lst.append(lst[i])\n            stack.append(lst[i + 1:])\n    return new_lst\n\n# Approach 5: Recursion + Stack + Priority Queue\n\ndef sort_recursion_stack",
      -6.86328125
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def sortList(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n\n        head = None\n        curr = None\n        for l in lists:\n            curr = l\n            if not head:\n                head = l\n                continue\n            while curr.next:\n                if curr.next.val < head.val:\n                    curr.next, head = head, curr.next\n                else:\n                    curr = curr.next\n        return head\n\n\n\nsolution = Solution()\nprint solution.sortList([\n    [1, 3, 5, 7],\n    [2, 4, 6],\n    [0, 8],\n    [9]\n])",
      -6.93359375
    ],
    [
      "# https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/problem\n\ndef sort_lists_by_inner_list_index(list_of_lists):\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of lists\n    # Returns a sorted list of",
      -6.93359375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param index, an integer\n    # @return a ListNode\n    def sortList(self, head, index):\n        p = head\n        if head is None:\n            return head\n        while p:\n            next_p = p.next\n            p.next = None\n            p.val = head.val[index]\n            head.next = p\n            head = p\n            p = next_p\n        return head\n\n\nif __name__ == \"__main__\":\n    head = ListNode(2)\n    head.next = ListNode(1)\n    head.next.next = ListNode(5)\n    head.next.next.next = ListNode(3)\n    head.next.next.next.next = ListNode(4)\n    head.next.next.next.next.next = ListNode(6)\n    head.next.next.next.next.next.next = ListNode(7)\n    head.next.next.next.next.next.next.next = ListNode(8)\n    head.next.next.next.next.next.next.next.next = ListNode(9)\n    Solution().sortList(head, 2)\n    while head:\n        print(head.val)\n        head = head.next",
      -7.703125
    ],
    [
      "import sys\n\n__author__ = 'Daniel'\n\n\nclass Solution:\n    def sortListsByIndex(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not lists:\n            return lists\n\n        lists.sort(key=lambda x: x[0])\n        for i in range(len(lists) - 1):\n            for j in range(i + 1, len(lists)):\n                if lists[i][0] > lists[j][0]:\n                    lists[i], lists[j] = lists[j], lists[i]\n\n        return lists\n\n    def sortListsByIndex2(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not lists:\n            return lists\n\n        for i in range(len(lists)):\n            lists[i].sort(key=lambda x: x[0])\n\n        for i in range(len(lists) - 1):\n            for j in range(i + 1, len(lists)):\n                if lists[i][0] > lists[j][0]:\n                    lists[i], lists[j] = lists[j], lists[i]\n\n        return lists\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    lists = [[3, 2, 1], [1, 2], [1, 3], [1, 2, 3], [2, 3], [1, 2, 3, 4]]\n    print(sol.sortListsByIndex(lists))\n    print(sol.sortListsByIndex2(lists))",
      -7.78125
    ],
    [
      "# -*- coding: utf-8 -*-\n# @Author: Gillett Hernandez\n# @Date:   2016-08-01 17:04:37\n# @Last Modified by:   Gillett Hernandez\n# @Last Modified time: 2016-08-02 00:00:00\n\nimport random\n\ndef sort(a, i):\n    if i==len(a):\n        return a\n    else:\n        b = a[i]\n        a[i] = a[i-1]\n        a[i-1] = b\n        return sort(a, i-1)\n\ndef sort_list(a):\n    return sort(a, len(a)-1)\n\ndef main():\n    a = [ [1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21], [22,23,24], [25,26,27], [28,29,30], [31,32,33], [34,35,36], [37,38,39], [40,41,42], [43,44,45], [46,47,48], [49,50,51], [52,53,54], [55,56,57], [58,59,60], [61,62,63], [64,65,66], [67,68,69], [70,71,72], [73,74,75], [76,77,78], [79,80,81], [82,83,84], [85,86,87], [88,89,90], [91,92,93], [94,95,96], [97,98,99], [100,101,102], [103,104,105], [106,107,108], [109,110,111], [112,113,114], [115,116,117], [118,119,120], [121,122,123], [124,125,126], [127,128,129], [130,131,132], [133,134,135], [136,137,138], [139,140,141], [142,143,144], [145,146",
      -7.8359375
    ],
    [
      "from collections import defaultdict\nfrom itertools import permutations\n\ndef sort_by_index(lists, index):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    Example\n    >>> sort_by_index([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \"\"\"\n\n    def get_sublist_indices(lists):\n        \"\"\"\n        Returns a list of indices of sublists of lists.\n        \"\"\"\n        indices = []\n        for i in range(len(lists)):\n            if i > 0:\n                if lists[i]!= lists[i - 1]:\n                    indices.append(i)\n        return indices\n\n    def permute(lists, indices):\n        \"\"\"\n        Returns a list of lists of sorted sublists.\n        \"\"\"\n        sorted_lists = []\n        for i in range(len(lists)):\n            if i > 0:\n                if lists[i]!= lists[i - 1]:\n                    sorted_lists.append(lists[i])\n            else:\n                sorted_lists.append(lists[i])\n        for j in range(len(indices)):\n            sorted_lists.append(lists[indices[j]])\n        return sorted_lists\n\n    def sort_list(lists, index):\n        \"\"\"\n        Sorts a list of lists by a given index of the inner list.\n        \"\"\"\n        # Create a list of indices of sublists of lists.\n        indices = get_sublist_indices(lists)\n\n        # Sort the sublists of lists.\n        sorted_lists = permute(lists, indices)\n\n        # Return the sorted list of lists.\n        return sorted_lists\n\n    # Sort the given list of lists.\n    sorted_lists = sort_list(lists, index)\n\n    # Return the sorted list of lists.\n    return sorted_lists\n\nif __name__ == '__main__':\n    # Test cases.\n    lists = [[1, 2, 3], [4, 5, 6], [7, 8,",
      -8.59375
    ],
    [
      "def sort_list(lst, index):\n    # write your code here\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    \n    if index == 0:\n        return sort_list(lst[1:], 1) + [lst[0]]\n    if index == len(lst) - 1:\n        return sort_list(lst[:-1], index - 1) + [lst[-1]]\n    if index > len(lst) - 1:\n        return lst\n    \n    return sort_list(lst[1:index], 1) + [lst[0]] + sort_list(lst[:-1], index - 1) + [lst[-1]]\n\nif __name__ == \"__main__\":\n    lst = [[1,2,3],[4,5,6],[7,8,9]]\n    print(sort_list(lst, 1))\n    print(sort_list(lst, 2))\n    print(sort_list(lst, 3))\n    print(sort_list(lst, 4))\n    print(sort_list(lst, 5))\n    print(sort_list(lst, 6))\n    print(sort_list(lst, 7))\n    print(sort_list(lst, 8))\n    print(sort_list(lst, 9))",
      -9.0546875
    ],
    [
      "from random import randint\n\n\ndef sort_lists_by_inner_list_index(lists, index):\n    \"\"\"\n    :type lists: List[List[int]]\n    :type index: int\n    :rtype: void Do not return anything, modify lists in-place instead.\n    \"\"\"\n    # Write your code here\n    l = len(lists)\n    for i in range(l):\n        for j in range(l - 1):\n            if lists[i][index] < lists[j][index]:\n                lists[i], lists[j] = lists[j], lists[i]\n    return\n\n\ndef test_sort_lists_by_inner_list_index():\n    lists = [\n        [0, 1, 2, 3, 4, 5, 6, 7],\n        [8, 9, 10, 11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20, 21, 22, 23],\n        [24, 25, 26, 27, 28, 29, 30, 31],\n        [32, 33, 34, 35, 36, 37, 38, 39],\n        [40, 41, 42, 43, 44, 45, 46, 47],\n        [48, 49, 50, 51, 52, 53, 54, 55],\n        [56, 57, 58, 59, 60, 61, 62, 63],\n    ]\n    sort_lists_by_inner_list_index(lists, 3)\n    assert [list(t) for t in lists] == [\n        [24, 25, 26, 27, 28, 29, 30, 31],\n        [32, 33, 34, 35, 36, 37, 38, 39],\n        [40, 41, 42, 43, 44, 45, 46, 47],\n        [48, 49, 50, 51, 52, 53, 54, 55],\n        [56, 57, 58, 59, 60, 61, 62, 63],\n        [0, 1, 2, 3, 4, 5, 6, 7],\n        [8, 9, 10, 11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20, 21, 22, 23],\n        [24, 25, 26",
      -9.0703125
    ],
    [
      "class Solution:\n    def sortList(self, lists):\n        \"\"\"\n        :type lists: List[List[int]]\n        :rtype: void Do not return anything, modify lists in-place instead.\n        \"\"\"\n        if not lists:\n            return\n\n        lists.sort(key=lambda x: x[0])\n        for i in range(1, len(lists[0])):\n            lists[0][i] = lists[0][i] - lists[0][i - 1]\n\n        for i in range(1, len(lists)):\n            lists[i][i] = lists[i][i] - lists[i - 1][i]\n            for j in range(i + 1, len(lists[i])):\n                lists[i][j] = lists[i][j] - lists[i - 1][j]",
      -9.1640625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        \n        p = head\n        q = head\n        while q.next and q.next.next:\n            p = p.next\n            q = q.next.next\n        \n        n = p.next\n        p.next = None\n        \n        while q:\n            r = q.next\n            q.next = p\n            p = q\n            q = r\n        \n        return n\n\ndef main():\n    s = Solution()\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [6, 7, 8, 9, 10]\n    l3 = [11, 12, 13, 14, 15]\n    l4 = [16, 17, 18, 19, 20]\n    l5 = [21, 22, 23, 24, 25]\n    l6 = [26, 27, 28, 29, 30]\n    l7 = [31, 32, 33, 34, 35]\n    l8 = [36, 37, 38, 39, 40]\n    l9 = [41, 42, 43, 44, 45]\n    l10 = [46, 47, 48, 49, 50]\n    l11 = [51, 52, 53, 54, 55]\n    l12 = [56, 57, 58, 59, 60]\n    l13 = [61, 62, 63, 64, 65]\n    l14 = [66, 67, 68, 69, 70]\n    l15 = [71, 72, 73, 74, 75]\n    l16 = [76, 77, 78, 79, 80]\n    l17 = [81, 82, 83, 84, 85]\n    l18 = [86, 87, 88, 89, 90]\n    l19 = [91, 92, 93, 94, 95]\n    l20 = [96",
      -9.484375
    ],
    [
      "# https://leetcode.com/problems/sort-list-by-index/\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @param index, an integer\n    # @return a ListNode\n    def sortListByIndex(self, head, index):\n        if head == None or head.next == None:\n            return head\n        p = head\n        while p.next!= None:\n            p = p.next\n            if p.next == None:\n                break\n        q = head\n        while q!= p:\n            q = q.next\n            if q == p:\n                break\n        q = p\n        while q.next!= None and q.next.next!= None:\n            if index < 0:\n                q = q.next\n            else:\n                while index >= 0 and q.next!= None:\n                    index -= 1\n                    q = q.next\n            \n            if q.next!= None:\n                p = q.next\n                q.next = q.next.next\n                p.next = q\n            else:\n                break\n        return head",
      -10.5
    ],
    [
      "# https://www.hackerrank.com/challenges/sorting-a-list/problem\n\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        \n        # Sort the list using the inner list.\n        curr = head\n        prev = head\n        while curr:\n            curr = curr.next\n            prev.next = curr\n            prev = curr\n        \n        # Now sort the inner list.\n        curr = head\n        prev = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev.next = next\n            prev = curr\n            curr = next\n        \n        return head",
      -11.5078125
    ],
    [
      "# https://www.hackerrank.com/challenges/sorting-arrays/problem\n\ndef sort_by_inner_list(arr, index):\n    for i in range(len(arr)):\n        arr[i] = arr[i][index]\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i][index] > arr[j][index]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\nif __name__ == \"__main__\":\n    arr = [ [1,2,3], [4,5,6], [7,8,9] ]\n    print sort_by_inner_list(arr, 0)",
      -12.15625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __repr__(self):\n        return str(self.val)\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        pivot = head\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        pivot.next = None\n        new_head = head\n        while fast:\n            new_head = new_head.next\n            fast = fast.next\n        new_head.next = pivot\n        pivot = new_head\n        while pivot:\n            if pivot.next:\n                pivot = self.partition(pivot.next, pivot.next.next)\n            else:\n                pivot = None\n        return head\n    \n    def partition(self, head, pivot):\n        slow = pivot\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next\n        slow.next = None\n        new_head = head\n        while pivot:\n            new_head = new_head.next\n            pivot = pivot.next\n        new_head.next = pivot\n        pivot = new_head\n        while pivot:\n            if pivot.next:\n                pivot = self.partition(pivot.next, pivot.next.next)\n            else:\n                pivot = None\n        return head\n\nclass Solution1(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        pivot = head\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next\n        pivot.next = None",
      -12.59375
    ],
    [
      "# Definition for a ListNode.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return head\n        # if head.next is None:\n        #     return head\n        # p = head\n        # while p.next:\n        #     q = p.next\n        #     while q.next:\n        #         q.next = q.next.next\n        #         p = p.next\n        #         q = q.next\n        #     p.next = q.next\n        #     p = p.next\n        #     q.next = None\n        #     p.next = head\n        #     head = p\n        # return head\n        # print head\n        # p = head\n        # while p:\n        #     p = p.next\n        #     q = p.next\n        #     while q:\n        #         if q.val > p.val:\n        #             p.next = q.next\n        #             q.next = p\n        #             p = p.next\n        #             q = q.next\n        #         else:\n        #             p = p.next\n        #             q = q.next\n        #     p.next = q\n        #     p = p.next\n        # return head\n        # p = head\n        # while p:\n        #     p = p.next\n        #     q = p.next\n        #     while q:\n        #         if q.val > p.val:\n        #             p.next = q.next\n        #             q.next = p\n        #             p = p.next\n        #             q = q.next\n        #         else:\n        #             p = p.next\n        #             q = q.next\n        #     p.next = q\n        #     p = p.next\n        # return head\n        # p = head\n        # while p:",
      -12.671875
    ],
    [
      "from random import shuffle\n\ndef sort_by_inner(lst, index):\n    \"\"\"\n    Sort the elements of a list by the given index of the inner list.\n    Input:\n        lst: a list of lists.\n        index: the index of the inner list.\n    Output:\n        a list of lists sorted by the given index.\n    Example:\n        >>> lst = [\n       ...     [1, 2],\n       ...     [3, 4],\n       ...     [5, 6],\n       ...     [7, 8],\n       ...     [9, 10],\n       ...     [11, 12],\n       ...     [13, 14],\n       ...     [15, 16]\n       ... ]\n        >>> sort_by_inner(lst, 2)\n        [\n            [1, 2, 3, 4],\n            [5, 6, 7, 8],\n            [9, 10, 11, 12],\n            [13, 14, 15, 16]\n        ]\n    \"\"\"\n    sorted_list = []\n    for inner_list in lst:\n        sorted_list.append(inner_list[:index])\n        sorted_list.append(inner_list[index:])\n    return sorted_list\n\ndef test():\n    lst = [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n        [7, 8],\n        [9, 10],\n        [11, 12],\n        [13, 14],\n        [15, 16]\n    ]\n    assert sort_by_inner(lst, 2) == [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n    assert sort_by_inner(lst, 0) == [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n        [7, 8],\n        [9, 10],\n        [11, 12],\n        [13, 14],\n        [15, 16]\n    ]\n\nif __name__ == \"__main__\":",
      -12.8984375
    ],
    [
      "def sort_list_by_index(lists, index):\n    \"\"\"\n    :type lists: List[List[int]]\n    :type index: int\n    :rtype: None\n    \"\"\"\n    for i in range(len(lists)):\n        lists[i].sort(key=lambda x: lists[x][index])\n\n\nif __name__ == '__main__':\n    print(sort_list_by_index([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3]], 0))\n    print(sort_list_by_index([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3]], 1))\n    print(sort_list_by_index([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3]], 2))",
      -13.0625
    ],
    [
      "# https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/problem\n# https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/271823\n# https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/253785\n# https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/253785\n# https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/271823\n\ndef sort_inner_lists(lst):\n    # list of lists\n    for i in range(len(lst)):\n        lst[i] = sort_inner_lists(lst[i])\n        # list of lists\n    return lst\n\n\ndef main():\n    # https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/271823\n    # https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/271823\n    # https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/271823\n    # https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/271823\n    # https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/271823\n    # https://www.hackerrank.com/challenges/sorting-a-list-of-lists-by-an-index/submissions/code/271823\n    # https://www.",
      -13.5078125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def merge(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        if not lists:\n            return None\n\n        head = ListNode(0)\n        head.next = lists[0]\n\n        curr = head\n        for i in range(1, len(lists)):\n            curr.next = lists[i]\n            curr = curr.next\n\n        return head.next\n\n    def sort(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        if not lists:\n            return None\n\n        return self.merge(lists)\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [1, 2, 3],\n        [2, 3, 4],\n        [1, 5, 6],\n        [1, 5, 7],\n        [1, 5, 8]\n    ]\n    print Solution().sort(lists)",
      -13.53125
    ],
    [
      "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head == None or head.next == None:\n            return head\n        pre_node = ListNode(0)\n        pre_node.next = head\n        cur_node = pre_node\n        while cur_node.next!= None:\n            cur_node = cur_node.next\n            while cur_node.next!= None:\n                if cur_node.next.val < cur_node.next.next.val:\n                    cur_node.next = cur_node.next.next\n                else:\n                    cur_node.next = cur_node.next.next.next\n            cur_node.next = pre_node.next\n            pre_node.next = cur_node\n        return pre_node.next\n\nif __name__ == \"__main__\":\n    a = [1,3,2,4,5,6]\n    b = [1,2,3,4,5,6]\n    c = [1,2,3,4,5,6]\n    d = [1,2,3,4,5]\n    head = ListNode(0)\n    head.next = ListNode(0)\n    head.next.next = ListNode(0)\n    head.next.next.next = ListNode(0)\n    head.next.next.next.next = ListNode(0)\n    head.next.next.next.next.next = ListNode(0)\n    head.next.next.next.next.next.next = ListNode(0)\n    head.next.next.next.next.next.next.next = ListNode(0)\n    head.next.next.next.next.next.next.next.next = ListNode(0)\n    print Solution().sortList(head)\n    print Solution().sortList(a)\n    print Solution().sortList(",
      -14.609375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n    def __str__(self):\n        return str(self.val)\n\nclass Solution:\n    # @param head, a ListNode\n    # @param index, an integer\n    # @return a ListNode\n    def sortList(self, head, index):\n        if not head or not head.next:\n            return head\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        nums = []\n        while slow:\n            nums.append(slow.val)\n            slow = slow.next\n        nums.reverse()\n        head.val = nums[index]\n        head.next = self.sortList(head.next, index+1)\n        return head\n\nclass Solution2:\n    # @param head, a ListNode\n    # @param index, an integer\n    # @return a ListNode\n    def sortList(self, head, index):\n        if not head or not head.next:\n            return head\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        nums = []\n        while slow:\n            nums.append(slow.val)\n            slow = slow.next\n        nums.reverse()\n        head.val = nums[index]\n        head.next = self.sortList(head.next, index+1)\n        return head\n\nif __name__ == '__main__':\n    assert Solution().sortList([1,2,3], 0) == ListNode(1, ListNode(2, ListNode(3, None)))\n    assert Solution().sortList([1,2,3], 1) == ListNode(1, ListNode(3, ListNode(2, None)))\n    assert Solution().sortList([1,2,3], 2) == ListNode(3, ListNode(2, ListNode(1, None)))\n    assert Solution().sortList",
      -14.8046875
    ],
    [
      "def sort_by_index(lst, index):\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Example\n    =======\n\n    >>> lst = [[1, 2, 3], [1, 2, 4], [1, 2, 5]]\n    >>> sort_by_index(lst, 1)\n    [[1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 1, 5], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 2, 5]]\n    >>> sort_by_index(lst, 2)\n    [[1, 1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 1], [1, 3, 2], [1, 3, 3]]\n    \"\"\"\n    sorted_list = []\n    for lst_item in lst:\n        sorted_list.append(lst_item[:index])\n        sorted_list.append(lst_item[index:])\n    return sorted_list\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -15.890625
    ],
    [
      "class Solution:\n    # @param lists, a list of lists of integers\n    # @param index, a integer\n    # @return a list of lists\n    def sortListsByIndex(self, lists, index):\n        # write your code here\n        result = []\n        for i in range(len(lists)):\n            if index == len(lists[i]):\n                result.append(lists[i])\n                continue\n            else:\n                result.append(lists[index])\n                lists[index] = lists[i][index]\n                lists[i][index] = lists[i][len(lists[i])-1]\n                lists[i][len(lists[i])-1] = lists[i][len(lists[i])-2]\n                lists[i][len(lists[i])-2] = lists[i][index]\n        return result\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    lists = [[1, 2, 3], [2, 4, 5], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]\n    # [1, 2, 3, 4, 5, 6, 7]\n    # [1, 2, 3, 4, 5]\n    # [1, 2, 3, 4, 5, 6, 7]\n    # [1, 2, 3, 4, 5, 6, 7]\n    # [1, 2, 3, 4, 5, 6, 7, 8]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    index = 2\n    print Solution().sortListsByIndex(lists, index)\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
      -16.265625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}