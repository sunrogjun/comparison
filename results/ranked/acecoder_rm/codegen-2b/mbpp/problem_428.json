{
  "problem": {
    "task_id": "MBPP/439",
    "prompt": "Write a function to convert a list of multiple integers into a single integer.",
    "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
    "test_list": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ],
    "challenge_test_list": [],
    "problem_id": 428
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def multiple_int_to_int(multiple_ints):\n    \"\"\"\n    :type multiple_ints: List[int]\n    :rtype: int\n    \"\"\"\n    ret = 0\n    for i in multiple_ints:\n        ret = ret * 10 + i\n    return ret\n\nif __name__ == \"__main__\":\n    print multiple_int_to_int([1, 2, 3])\n    print multiple_int_to_int([1, 2, 3, 4])\n    print multiple_int_to_int([1, 2, 3, 4, 5])\n    print multiple_int_to_int([1, 2, 3, 4, 5, 6])",
      6.9609375
    ],
    [
      "def multiple_integer_to_single_integer(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n\n    ret = 0\n    for i in nums:\n        ret = ret * 10 + i\n    return ret\n\nif __name__ == '__main__':\n    print multiple_integer_to_single_integer([1,2,3,4,5,6])\n    print multiple_integer_to_single_integer([1,2,3,4,5,6,7,8])\n    print multiple_integer_to_single_integer([1,2,3,4,5,6,7,8,9])\n    print multiple_integer_to_single_integer([1,2,3,4,5,6,7,8,9,10])\n    print multiple_integer_to_single_integer([1,2,3,4,5,6,7,8,9,10,11])\n    print multiple_integer_to_single_integer([1,2,3,4,5,6,7,8,9,10,11,12])\n    print multiple_integer_to_single_integer([1,2,3,4,5,6,7,8,9,10,11,12,13])\n    print multiple_integer_to_single_integer([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n    print multiple_integer_to_single_integer([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
      5.4765625
    ],
    [
      "# https://leetcode.com/problems/convert-a-list-of-multiple-integers-into-a-single-integer/discuss/116325/Python-Solution-with-Python-2-7-and-LIS-and-SLIS\n\nclass Solution(object):\n    def convert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in xrange(len(nums)):\n            result += nums[i] * pow(10, target - i - 1)\n        return result",
      1.6826171875
    ],
    [
      "def sum_list(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(numbers)\n\nif __name__ == '__main__':\n    assert sum_list([1, 2, 3]) == 6, \"Solution failed\"\n    assert sum_list([3, 2, 1]) == 6, \"Solution failed\"\n    assert sum_list([1, 2, 3, 4, 5, 6]) == 15, \"Solution failed\"",
      1.5693359375
    ],
    [
      "class Solution(object):\n    def convert(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in range(n):\n            ans += nums[i] << i\n        return ans\n\n    def convert2(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in range(n):\n            ans += nums[i] << i\n        return ans\n\n    def convert3(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in range(n):\n            ans += nums[i] << i\n        return ans\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.convert([1,2,3,4], 4))\n    print(s.convert2([1,2,3,4], 4))\n    print(s.convert3([1,2,3,4], 4))",
      1.3466796875
    ],
    [
      "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        res = 0\n        num = self.sumNumbers(root.left)\n        res += num\n        num = self.sumNumbers(root.right)\n        res += num\n        num = root.val\n        res += num\n        return res",
      1.3154296875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        # Recursive solution\n        # if root == None: return 0\n        # return self.sumNumbers(root.left) + self.sumNumbers(root.right) + root.val\n        # Iterative solution\n        return self.sum(root, 0)\n        \n    def sum(self, node, sum):\n        if node == None: return sum\n        sum = self.sum(node.left, sum)\n        sum = self.sum(node.right, sum)\n        return sum + node.val",
      1.1376953125
    ],
    [
      "class Solution(object):\n    def convert(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        carry = 0\n        res = 0\n        for i in range(n):\n            res = res + nums[i]\n            carry = carry + nums[i]\n            if carry >= 10:\n                carry = carry - 10\n                res = res + 1\n        return res",
      0.9111328125
    ],
    [
      "def multi_int_to_int(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: int\n    \"\"\"\n    sum_of_numbers = 0\n    for number in list_of_numbers:\n        sum_of_numbers += number\n    return sum_of_numbers",
      0.80517578125
    ],
    [
      "def sum_list(lst):\n    return sum(lst)\n\nprint(sum_list([1,2,3,4]))\nprint(sum_list([1,2,3,4,5]))\nprint(sum_list([1,2,3,4,5,6]))",
      0.4365234375
    ],
    [
      "def multiple_int_to_single_int(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    print(multiple_int_to_single_int(nums))",
      0.1893310546875
    ],
    [
      "class Solution:\n    # @param A, a list of integers\n    # @return an integer\n    def convert(self, A):\n        if len(A) == 0:\n            return 0\n        if len(A) == 1:\n            return A[0]\n        \n        left = 0\n        right = 0\n        sum = 0\n        for a in A:\n            sum += a\n            right += a\n            \n        return sum + right",
      0.1474609375
    ],
    [
      "def sum(numbers):\n    return reduce(lambda x,y: x+y, numbers)\n\nif __name__ == \"__main__\":\n    print sum([2, 3, 4])\n    print sum([-2, -3, 4])",
      0.01543426513671875
    ],
    [
      "def sum(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for number in numbers:\n        result += number\n    return result\n\ndef main():\n    numbers = [2, 3, 4, 5, 6]\n    print(sum(numbers))\n    numbers = [3, 1, 2, 1, 5]\n    print(sum(numbers))\n\nif __name__ == '__main__':\n    main()",
      -0.042022705078125
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nclass Solution(object):\n    def multiply(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        nums.sort()\n        total = 0\n        for i in range(1, len(nums)):\n            total += nums[i] * nums[i-1]\n        return total",
      -0.0596923828125
    ],
    [
      "class Solution(object):\n    def multiply(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        ans = 1\n        for i in range(n-1):\n            ans *= nums[i]\n        return ans * nums[-1]\n\n\nif __name__ == \"__main__\":\n    print(Solution().multiply([1,2,3]))",
      -0.2626953125
    ],
    [
      "def convert(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    result = nums[0]\n    for num in nums[1:]:\n        result = result * 10 + num\n    return result\n\nif __name__ == '__main__':\n    print convert([1, 2, 3])\n    print convert([5, 6, 7, 8, 9])",
      -0.350830078125
    ],
    [
      "from collections import Counter\n\n\ndef convert(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(numbers) / Counter(numbers).values()\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7]\n    print(convert(numbers))",
      -0.62158203125
    ],
    [
      "# https://leetcode.com/problems/multiple-integers-to-single-integer/\n# Description:\n# Given a list of integers, convert it into a single number.\n# Example 1:\n# Input: [2, 5, 5]\n# Output: 25\n# Example 2:\n# Input: [-2, -3, 4]\n# Output: -1\n# Note:\n# The input list is always valid and non-empty.\n# The input list is always in increasing order.\n# You may assume the integer in each of the list is non-negative.\n# Follow up:\n# What if the input list is empty? What if the input list size is 1?\n# What if the input list size is 2?\n\nclass Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        ans = 0\n        for i in str:\n            ans = (ans << 1) + i - '0'\n        return ans",
      -0.63232421875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def __init__(self):\n        self.ans = 0\n\n    def convert(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        while head is not None:\n            self.ans += head.val\n            head = head.next\n        return self.ans\n\n\n# Note:\n# 1. The input list may have duplicated elements.\n# 2. The input list may be empty.",
      -0.85693359375
    ],
    [
      "def sum_list(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(lst)\n\nif __name__ == '__main__':\n    print(sum_list([-1, 1, -2, 3, -4, 5, -6]))\n    print(sum_list([1, 2, 3, 4, 5]))",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param {List<int>} nums\n    # @return {int}\n    def singleNumber(self, nums):\n        ret = 0\n        for num in nums:\n            ret = ret ^ num\n        return ret\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [1, 2, 1, 1, 1, 1, 2]\n    print sol.singleNumber(nums)\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print sol.singleNumber(nums)",
      -0.85693359375
    ],
    [
      "# https://oj.leetcode.com/problems/convert-a-number-to-hex/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import deque\n\nclass Solution:\n    # @param {integer[]} digits\n    # @return {integer}\n    def toHex(self, digits):\n        if len(digits) == 0:\n            return 0\n        \n        if len(digits) == 1:\n            return digits[0]\n\n        d = deque()\n        d.append(digits[0])\n        for i in xrange(1, len(digits)):\n            d.append(digits[i] + d.popleft())\n        return int(d.pop())",
      -0.85693359375
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def convert(self, root: TreeNode, target: int) -> int:\n        if not root:\n            return 0\n        if root.val >= target:\n            return self.convert(root.left, target)\n        else:\n            return self.convert(root.right, target) + 1\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print(Solution().convert(root, 5))",
      -0.85693359375
    ],
    [
      "def sum_list_of_integers(list_of_integers):\n    return sum(list_of_integers)\n\ndef test_sum_list_of_integers():\n    assert sum_list_of_integers([1, 2, 3, 4, 5]) == 15\n    assert sum_list_of_integers([]) == 0\n\nif __name__ == \"__main__\":\n    test_sum_list_of_integers()",
      -0.85693359375
    ],
    [
      "def multiple_integer_to_single_integer(multiple_integer_list):\n    \"\"\"\n    :type multiple_integer_list: List[int]\n    :rtype: int\n    \"\"\"\n    total = 0\n    for i in range(len(multiple_integer_list)):\n        total += multiple_integer_list[i]\n    return total\n\n# Your MultipleIntegerToSingleInteger function should return the same result as the test cases.\n\n# Discuss the code\n# Discuss the output",
      -0.85693359375
    ],
    [
      "def convert(nums):\n    return sum(nums)\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3]\n    print(convert(nums))",
      -0.85693359375
    ],
    [
      "#!/usr/bin/env python\n\nclass Solution(object):\n    def multiply(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return reduce(lambda x, y: x * y, nums)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.multiply([1, 2, 3])",
      -0.85791015625
    ],
    [
      "def add_one(lst):\n    return sum(lst) + 1\n\ndef sum_list(lst):\n    return sum(lst)\n\ndef print_result(lst):\n    print(sum_list(lst))\n\ndef main():\n    lst = [1, 2, 3, 4, 5]\n    print_result(lst)\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def convert(self, nums, num_of_digit):\n        \"\"\"\n        :type nums: List[int]\n        :type num_of_digit: int\n        :rtype: int\n        \"\"\"\n        if num_of_digit == 0:\n            return sum(nums)\n        elif num_of_digit == 1:\n            return sum(map(int, ''.join(map(str, nums))))\n        else:\n            result = 0\n            for n in nums:\n                result = result * 10 + n\n            return result",
      -0.85791015625
    ],
    [
      "import re\n\n\ndef int_list_to_int(l):\n    result = 0\n    for i in l:\n        result = result * 10 + i\n    return result\n\n\ndef main():\n    l = [1, 2, 3, 4]\n    print(int_list_to_int(l))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def sum_of_multiples(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for num in numbers:\n        result += num\n    return result\n\nif __name__ == \"__main__\":\n    numbers = [1, 3, 5, 7]\n    print(sum_of_multiples(numbers))",
      -0.85791015625
    ],
    [
      "def convert(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total\n\n\nif __name__ == \"__main__\":\n    print convert([1, 2, 3])\n    print convert([1, 2, 3, 4, 5])\n    print convert([3, 2, 1])\n    print convert([3, 2, 1, 1])\n    print convert([3, 1, 1, 1])\n    print convert([1, 2, 3, 4, 5, 6])",
      -0.85791015625
    ],
    [
      "def add_list(lst):\n    s = sum(lst)\n    return s\n\ndef main():\n    test_cases = [([1,2,3,4,5], 6),([1,2,3,4,5], 15)]\n    for t in test_cases:\n        print add_list(t[0])\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "# https://www.codewars.com/kata/56a6c2e8c9d3b8c0c4e1a8/train/python\n\ndef convert_list_to_single_int(input_list):\n    sum = 0\n    for i in input_list:\n        sum += i\n    return sum",
      -0.85791015625
    ],
    [
      "def convert(nums):\n\tif len(nums) == 1:\n\t\treturn nums[0]\n\telse:\n\t\treturn sum(convert(nums[i:i+2]) for i in range(0, len(nums), 2))\n\nnums = [1, 2, 3]\nprint(convert(nums))\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(convert(nums))",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def multiply(self, nums):\n        ret = 0\n        for i in range(len(nums)):\n            ret = ret * nums[i]\n        return ret\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.multiply([2,3,1])",
      -0.85791015625
    ],
    [
      "def list_to_single_int(l):\n    return sum(l)\n\nprint list_to_single_int([1,2,3])\n\n# https://www.hackerearth.com/code-monk-challenge/algorithm/list-to-single-integer/",
      -0.85791015625
    ],
    [
      "def convert(nums):\n    return sum(nums)\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(convert(nums))",
      -0.8583984375
    ],
    [
      "# https://www.codeeval.com/open_challenges/42/\n\nimport sys\n\ndef toInt(s):\n    if len(s) == 1:\n        return int(s[0])\n    elif len(s) == 2:\n        return int(s[0]) * int(s[1])\n    elif len(s) == 3:\n        return int(s[0]) * int(s[1]) * int(s[2])\n\ndef toList(s):\n    return [int(i) for i in s]\n\ndef main(argv):\n    for line in sys.stdin:\n        s = line.strip()\n        n = toInt(s)\n        l = toList(s)\n        print(str(n))\n        for i in range(len(l)):\n            print(str(n - l[i]))\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])",
      -0.8583984375
    ],
    [
      "# https://oj.leetcode.com/problems/convert-a-bst-to-integer/\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def bstToInt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        res = 0\n        while root:\n            res = res*10 + root.val\n            root = root.left\n        return res",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef convert(numbers):\n    # write your code here\n    # use the same algorithm as below\n    return sum(numbers)\n\n\nif __name__ == \"__main__\":\n    numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(convert(numbers))",
      -0.8583984375
    ],
    [
      "# Write your code below.\n\ndef single(nums):\n    return sum(nums)\n\nprint single([1, 2, 3, 4])",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return sum(xrange(n))\n        else:\n            return sum(self.combine(n - 1, k - 1) + self.combine(n - 1, k))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def convert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        return self.helper(nums, target, 0, len(nums)-1)\n\n    def helper(self, nums, target, start, end):\n        if start > end:\n            return 0\n        if nums[start] > target:\n            return self.helper(nums, target, start+1, end)\n        elif nums[end] < target:\n            return self.helper(nums, target, start, end-1)\n        else:\n            return nums[start] + nums[end]",
      -0.8583984375
    ],
    [
      "import sys\n\ndef convert(lst):\n    return sum(lst)\n\nif __name__ == '__main__':\n    lst = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(convert(lst))\n    lst = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(convert(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(convert(lst))",
      -0.8583984375
    ],
    [
      "# https://www.codewars.com/kata/convert-multiple-integers-to-a-single-integer/train/python\n\ndef convert(integers):\n    return sum(integers)",
      -0.8583984375
    ],
    [
      "def convert(numbers):\n    return sum(numbers)\n\nif __name__ == '__main__':\n    print convert([1,2,3,4,5])",
      -0.85888671875
    ],
    [
      "import sys\n\nclass Solution(object):\n    def convert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        result = 0\n        for i in range(len(nums)):\n            result = (result * 10 + nums[i]) % target\n        return result\n\n    def convert2(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        result = 0\n        for i in range(len(nums)):\n            result += nums[i] * (10 ** (len(nums) - i - 1))\n        return result % target\n\nif __name__ == '__main__':\n    nums = [2,3,4,1]\n    target = 5\n    print Solution().convert(nums, target)\n    print Solution().convert2(nums, target)",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def convert(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in xrange(n):\n            res = res * 10 + nums[i]\n        return res",
      -0.85888671875
    ],
    [
      "def sum_of_multiply(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n\nif __name__ == \"__main__\":\n    assert(sum_of_multiply([3,4,5,6]) == 21)\n    assert(sum_of_multiply([3,4,6]) == 12)\n    assert(sum_of_multiply([1,2,3,4,5]) == 120)\n    assert(sum_of_multiply([-1,2,-3,4,-5]) == -120)",
      -0.85888671875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    # @param root, a tree node\n    # @return an integer\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        sum = root.val\n        self.sumNumbers(root.left)\n        self.sumNumbers(root.right)\n        return sum",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def convert(self, nums):\n        return reduce(lambda x, y: x * 10 + y, nums)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.convert([2, 3, 4])",
      -0.85888671875
    ],
    [
      "def convert_list(list_of_numbers):\n    \"\"\"\n    >>> convert_list([1,2,3,4])\n    24\n    \"\"\"\n    return sum(list_of_numbers)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def convert(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return reduce(lambda x,y: x*y, nums)\n\n\nif __name__ == '__main__':\n    print convert([1,2,3,4,5])\n    print convert([1,2,3])",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def multiply(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        return reduce(lambda x, y: x * y, nums)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.multiply([1, 2, 3])\n    print solution.multiply([3, 2, 1])\n    print solution.multiply([-2, -3, -1])\n    print solution.multiply([1, 1, 1, 1])",
      -0.85888671875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def convertBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root: return 0\n        if not root.left and not root.right: return root.val\n        \n        # if there is a left subtree, convert it\n        if root.left:\n            return self.convertBST(root.left) + self.convertBST(root.right)\n        \n        # if there is a right subtree, convert it\n        if root.right:\n            return self.convertBST(root.right) + self.convertBST(root.left)\n        \n        # if there is no left or right subtree, it is a leaf, return the value\n        return root.val",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param num, a list of integers\n    # @return an integer\n    def multiply(self, num):\n        return reduce(lambda x,y: x*y, num)\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.multiply([1,2,3])",
      -1.29296875
    ],
    [
      "def convert(numbers, digits):\n    if len(numbers) == 0:\n        return 0\n    sum = 0\n    for i in numbers:\n        sum = sum * 10 + i\n    return sum % 10\n\nprint(convert([0, 2, 3], [1, 2, 3]))\nprint(convert([0, 2, 3, 4], [1, 2, 3, 4]))\nprint(convert([0, 2, 3, 4], [1, 2, 3, 4, 5]))\nprint(convert([0, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(convert([0, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))",
      -1.3310546875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def multiply(self, nums):\n        if len(nums) == 0:\n            return 0\n        res = 1\n        for i in range(len(nums) - 1):\n            res = res * nums[i]\n        return res * nums[len(nums) - 1]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.multiply([3,2,4,1,5,6]))",
      -1.4326171875
    ],
    [
      "# https://www.codewars.com/kata/567a0f7dbf8c9d1e8c4a0c/train/python\n\n\ndef sum_list(lst):\n    return sum(lst)\n\n\ndef sum_list_2(lst):\n    return sum(lst) + sum(lst)\n\n\ndef sum_list_3(lst):\n    return sum(lst) + sum(lst) + sum(lst)\n\n\ndef sum_list_4(lst):\n    return sum(lst) + sum(lst) + sum(lst) + sum(lst)\n\n\ndef sum_list_5(lst):\n    return sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst)\n\n\ndef sum_list_6(lst):\n    return sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst)\n\n\ndef sum_list_7(lst):\n    return sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst)\n\n\ndef sum_list_8(lst):\n    return sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst)\n\n\ndef sum_list_9(lst):\n    return sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst)\n\n\ndef sum_list_10(lst):\n    return sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst) + sum(lst)\n\n\ndef sum_",
      -1.7626953125
    ],
    [
      "class Solution:\n    # @return an integer\n    def convert(self, nums, n):\n        if n > len(nums):\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0]*10 + nums[1]\n        \n        ans = 0\n        for i in range(0, n):\n            ans = ans * 10 + nums[i]\n            \n        return ans\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [2,7,11,15]\n    n = 2\n    print s.convert(nums, n)\n    nums = [1,2,3,4,5]\n    n = 1\n    print s.convert(nums, n)\n    nums = [1,2,3,4,5,6,7,8,9]\n    n = 3\n    print s.convert(nums, n)\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    n = 4\n    print s.convert(nums, n)",
      -1.779296875
    ],
    [
      "class Solution:\n    # @param {List<int>} nums\n    # @return {int}\n    def multiply(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        res = 1\n        for i in range(len(nums)):\n            res *= nums[i]\n        return res",
      -2.435546875
    ],
    [
      "from collections import Counter\n\ndef convert(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    cnt = Counter(nums)\n    return sum(cnt.values())\n\nif __name__ == \"__main__\":\n    assert convert([1, 2, 3, 4]) == 6\n    assert convert([1, 2, 3, 4, 5]) == 15\n    assert convert([1, 2, 3]) == 6\n    assert convert([1, 2, 3, 4, 5, 6]) == 21",
      -2.6796875
    ],
    [
      "def sum_int_list(numbers):\n    return sum(numbers)\n\nif __name__ == '__main__':\n    assert sum_int_list([1,2,3]) == 6\n    assert sum_int_list([1,2,3,4]) == 10\n    assert sum_int_list([1,2,3,4,5]) == 15\n    assert sum_int_list([1,2,3,4,5,6]) == 21\n    assert sum_int_list([1,2,3,4,5,6,7]) == 28\n    assert sum_int_list([1,2,3,4,5,6,7,8]) == 36\n    assert sum_int_list([1,2,3,4,5,6,7,8,9]) == 45\n    assert sum_int_list([1,2,3,4,5,6,7,8,9,10]) == 55\n    assert sum_int_list([1,2,3,4,5,6,7,8,9,10,11]) == 66\n    assert sum_int_list([1,2,3,4,5,6,7,8,9,10,11,12]) == 77\n    assert sum_int_list([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 88\n    assert sum_int_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 99\n    assert sum_int_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 110\n    assert sum_int_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 121\n    assert sum_int_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 132\n    assert sum_int_list([1,2,3,4",
      -2.748046875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    # @param {integer[]} root\n    # @return {integer}\n    def sumNumbers(self, root):\n        return self.sum(root)\n\n    def sum(self, root):\n        if root is None:\n            return 0\n\n        return self.sum(root.left) + self.sum(root.right) + root.val",
      -3.32421875
    ],
    [
      "# Your function will take in a list of integers and return a single integer.\n#\n# Example 1:\n# Input: [2, 50, 3, 5, 6]\n# Output: 56\n# Example 2:\n# Input: [0]\n# Output: 0\n# Example 3:\n# Input: [1, 1, 1, 1, 1, 1, 1]\n# Output: 6\n#\n# Note:\n# The input list has at least one element.\n# The input list has no duplicate elements.\n# The input list has a length in the range [1, 100].\n# The integer represented by an element in the input list is always 32-bit signed.\n\n\n# 2019.04.06\nclass Solution:\n    # @param {List[int]} nums\n    # @return {int}\n    def multiply(self, nums):\n        res = 0\n        for i in range(len(nums) - 1):\n            res = res * nums[i] + nums[i + 1]\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.multiply([1, 2, 3, 4]))\n    print(sol.multiply([1, 2, 3]))\n    print(sol.multiply([1]))\n    print(sol.multiply([1, 2, 3, 4, 5]))",
      -3.48046875
    ],
    [
      "def to_int(l):\n    return sum(l)\n\nif __name__ == '__main__':\n    for l in [ [1,2,3], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ]:\n        print \"input:\", l\n        print \"output:\", to_int(l)",
      -3.53515625
    ],
    [
      "# Definition for an interval.\nclass Interval:\n    def __init__(self, s=0, e=0):\n        self.start = s\n        self.end = e\n\nclass Solution:\n    def multiply(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals: return 0\n        intervals.sort(key=lambda x: (x.end, x.start))\n        ans = 0\n        for i in intervals:\n            ans += i.end * i.start\n        return ans\n\n    def multiply(self, intervals):\n        \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n        if not intervals: return 0\n        ans = 0\n        for i in intervals:\n            ans += i.end * i.start\n        return ans\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.multiply([Interval(1, 10), Interval(2, 4), Interval(5, 20)])\n    print s.multiply([Interval(1, 10), Interval(2, 4), Interval(5, 20)])",
      -3.58203125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def multiply(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: int\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = l1\n        carry = 0\n        while l1 and l2:\n            x = l1.val * l2.val + carry\n            carry = x / 10\n            l1.val = x % 10\n            l1 = l1.next\n            l2 = l2.next\n        if l1:\n            carry = l1.val * l2.val + carry\n        return carry\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    l1 = ListNode(3)\n    l1.next = ListNode(4)\n    l1.next.next = ListNode(2)\n    l1.next.next.next = ListNode(1)\n    l2 = ListNode(3)\n    l2.next = ListNode(4)\n    l2.next.next = ListNode(2)\n    l2.next.next.next = ListNode(1)\n    print(sol.multiply(l1, l2))",
      -4.0390625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def convert(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        count = 0\n        while head:\n            count += head.val\n            head = head.next\n        return count",
      -4.16015625
    ],
    [
      "# https://oj.leetcode.com/problems/single-number/\n# \u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\u6709\u4e24\u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u90fd\u53ef\u4ee5\u88ab\u591a\u6b21\u51fa\u73b0\uff0c\u6bd4\u5982\uff1a\n# [3,2,3,2,1,4]\n# [4,5,4,1,4,5,4,4]\n# [3,2,3,2,1,4]\n# [4,5,4,1,4,5,4,4]\n# \u8fd4\u56de\u4e00\u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u90fd\u53ef\u4ee5\u51fa\u73b0\u7684\u6b21\u6570\u3002\n# \u4f8b\u5982\uff1a[3,2,3,2,1,4]\uff0c\u8fd4\u56de2\uff0c\n# \u5982\u679c\u662f[1,4,5,4,4,5,4,4]\uff0c\u8fd4\u56de3\u3002\n\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return reduce(lambda x, y: x ^ y, nums)\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.singleNumber([3, 2, 3, 2, 1, 4]))\n    print(s.singleNumber([4, 5, 4, 1, 4, 5, 4, 4]))\n    print(s.singleNumber([3, 2, 3, 2, 1, 4]))\n    print(s.singleNumber([4, 5, 4, 1, 4, 5, 4, 4]))",
      -4.2109375
    ],
    [
      "class Solution(object):\n    def convert(self, nums, nums_len):\n        \"\"\"\n        :type nums: List[int]\n        :type nums_len: int\n        :rtype: int\n        \"\"\"\n        if nums_len == 1:\n            return nums[0]\n        elif nums_len == 2:\n            return sum(nums)\n        else:\n            ans = 0\n            for i in xrange(nums_len - 1):\n                ans += nums[i]\n            ans += nums[nums_len - 1]\n            return ans\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print Solution().convert(nums, len(nums))",
      -4.89453125
    ],
    [
      "from collections import deque\n\ndef convert(numbers):\n    \"\"\"\n    :type numbers: List[int]\n    :rtype: int\n    \"\"\"\n    if not numbers:\n        return 0\n    result = numbers[0]\n    for num in numbers[1:]:\n        result = result * 10 + num\n    return result\n\ndef test():\n    assert convert([]) == 0\n    assert convert([-1]) == -1\n    assert convert([0]) == 0\n    assert convert([-1, -2]) == -3\n    assert convert([0, 1]) == 0\n    assert convert([-1, 0, 1]) == -3\n    assert convert([0, -1, 0, 1]) == -3\n    assert convert([-1, -2, 0, 1]) == -6\n    assert convert([0, -1, -2, 0, 1]) == -6\n    assert convert([-1, -2, 0, 1, 2]) == -6\n    assert convert([-1, -2, 0, 1, -2]) == -6\n    assert convert([0, -1, -2, 0, -1, -2]) == -6\n    assert convert([-1, -2, 0, 1, -2, 0, -1, -2]) == -12\n    assert convert([-1, -2, 0, 1, -2, 0, -1, -2, 0, -1, -2]) == -12\n    assert convert([-1, -2, 0, 1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1, -2, 0, -1,",
      -5.04296875
    ],
    [
      "# https://leetcode.com/problems/convert-a-number-to-hexadecimal/description/\n# I have a really good solution for this problem. I'm going to try\n# to figure out the problem and then write the solution.\n\nimport unittest\n\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def convertToHex(self, nums):\n        res = 0\n        for n in nums:\n            res = res * 16 + n\n        return res\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/convert-a-number-to-hexadecimal/solution/\n#\nApproach 1: Iterative\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the input array.\nSpace Complexity: O(1)\n\n# 8ms 91.47%\nclass Solution {\n    public int convertToHex(int[] nums) {\n        int res = 0;\n        for (int n : nums) res = res * 16 + n;\n        return res;\n    }\n}\n\nApproach 2: Recursive\nComplexity Analysis\nTime Complexity: O(n), where n is the length of the input array.\nSpace Complexity: O(n)\n\n# 10ms 100%\nclass Solution {\n    public int convertToHex(int[] nums) {\n        return convertToHex(nums, 0, nums.length);\n    }\n\n    public int convertToHex(int[] nums, int pos, int len) {\n        if (pos == len) return 0;\n        int res = nums[pos] * 16;\n        res += convertToHex(nums, pos + 1, len);\n        return res;\n    }\n}\n\nApproach 3: DP\nComplexity Analysis\nTime Complexity: O(n), where n is the length",
      -5.98046875
    ],
    [
      "class Solution(object):\n    def convert(self, nums, num_base):\n        \"\"\"\n        :type nums: List[int]\n        :type num_base: int\n        :rtype: int\n        \"\"\"\n        # print nums\n        # print num_base\n        # print nums[0]\n        # print nums[1]\n        # print nums[2]\n        # print nums[3]\n        # print nums[4]\n        # print nums[5]\n        # print nums[6]\n        # print nums[7]\n        # print nums[8]\n        # print nums[9]\n        # print nums[10]\n        # print nums[11]\n        # print nums[12]\n        # print nums[13]\n        # print nums[14]\n        # print nums[15]\n        # print nums[16]\n        # print nums[17]\n        # print nums[18]\n        # print nums[19]\n        # print nums[20]\n        # print nums[21]\n        # print nums[22]\n        # print nums[23]\n        # print nums[24]\n        # print nums[25]\n        # print nums[26]\n        # print nums[27]\n        # print nums[28]\n        # print nums[29]\n        # print nums[30]\n        # print nums[31]\n        # print nums[32]\n        # print nums[33]\n        # print nums[34]\n        # print nums[35]\n        # print nums[36]\n        # print nums[37]\n        # print nums[38]\n        # print nums[39]\n        # print nums[40]\n        # print nums[41]\n        # print nums[42]\n        # print nums[43]\n        # print nums[44]\n        # print nums[45]\n        # print nums[46]\n        # print nums[47]\n        # print nums[48]\n        # print num",
      -6.28125
    ],
    [
      "class Solution(object):\n    def convert(self, nums, numRows):\n        \"\"\"\n        :type nums: List[int]\n        :type numRows: int\n        :rtype: int\n        \"\"\"\n        if numRows == 0:\n            return 0\n        m = len(nums)\n        n = len(nums[0])\n        ans = 0\n        for i in range(numRows):\n            ans += nums[i][0]*(n-1-i)\n            ans += nums[i][n-1]*(i+1)\n        return ans\n\nclass Solution(object):\n    def convert(self, nums, numRows):\n        \"\"\"\n        :type nums: List[int]\n        :type numRows: int\n        :rtype: int\n        \"\"\"\n        if numRows == 0:\n            return 0\n        m = len(nums)\n        n = len(nums[0])\n        ans = 0\n        for i in range(numRows):\n            for j in range(n-1):\n                ans += nums[i][j]*(n-j-1)\n                ans += nums[i][j+1]*(j+1)\n        return ans",
      -6.83984375
    ],
    [
      "import os\nimport sys\nimport time\n\n# Your Codecademy solution here.\n\ndef main():\n    if len(sys.argv) < 2:\n        print('Usage: {} <file>'.format(sys.argv[0]))\n        return\n\n    with open(sys.argv[1]) as f:\n        data = [int(x) for x in f.read().split(' ')]\n    \n    # print(data)\n\n    ans = 0\n    for n in data:\n        if n == 0:\n            continue\n\n        ans += n\n        for _ in range(n):\n            ans += data[0]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()",
      -7.22265625
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.next = None\n\n    def __repr__(self):\n        if self:\n            return \"{} -> {}\".format(self.val, repr(self.next))\n        else:\n            return \"{}\"\n\n\nclass Solution:\n    def flatten(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n\n        # if head is not the last one, we should add a new node before it\n        if head.next:\n            new_node = ListNode(0)\n            new_node.next = head.next\n            head.next = new_node\n\n        previous = head\n        current = head.next\n\n        while current:\n            previous.next = current.next\n            previous = current\n            current = current.next\n\n        return previous.val\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    l1 = ListNode(1)\n    l2 = ListNode(2)\n    l3 = ListNode(3)\n    l4 = ListNode(4)\n    l5 = ListNode(5)\n    l1.next = l2\n    l2.next = l3\n    l3.next = l4\n    l4.next = l5\n\n    print(sol.flatten(l1))",
      -7.234375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param head, a ListNode\n    # @return an integer\n    def addLists(self, head):\n        if head is None:\n            return 0\n        if head.next is None:\n            return head.val\n        \n        current = head\n        previous = head\n        while current is not None:\n            previous = current\n            current = current.next\n        \n        current = head\n        sum = 0\n        while current is not None:\n            sum += current.val\n            current = current.next\n        \n        current = head\n        sum = 0\n        previous = head\n        while current is not None:\n            sum += current.val\n            previous = current\n            current = current.next\n            \n        return sum",
      -7.90625
    ],
    [
      "# Definition for an integer.\nclass Integer:\n    def __init__(self, x):\n        self.value = x\n\n    def __add__(self, other):\n        return Integer(self.value + other.value)\n\n    def __str__(self):\n        return str(self.value)\n\nclass Solution:\n    # @param {integer[]} digits\n    # @return {integer}\n    def atoi(self, digits):\n        if len(digits) == 0:\n            return 0\n        sum = 0\n        for d in digits:\n            sum += d\n        return sum\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.atoi([1, 2, 3])\n    print s.atoi([-3, -2, -1])\n    print s.atoi([-3, -2, -1, -2])\n    print s.atoi([1, -2, -3, -4])\n    print s.atoi([-1, -2, -3, -4])\n    print s.atoi([-1, -2, -3, -4, -5])\n    print s.atoi([-1, -2, -3, -4, -5, -6])\n    print s.atoi([-1, -2, -3, -4, -5, -6, -7])\n    print s.atoi([-1, -2, -3, -4, -5, -6, -7, -8])\n    print s.atoi([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n    print s.atoi([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])",
      -7.93359375
    ],
    [
      "def sum_of_numbers(numbers):\n    return sum(numbers)\n\n# Test Cases\n\n# sum_of_numbers([1, 2, 3]) -> 6\n# sum_of_numbers([3, 4, 5, 6]) -> 21\n# sum_of_numbers([1, 2, 3, 4, 5, 6]) -> 30\n# sum_of_numbers([1, 2, 3, 4, 5, 6, 7]) -> 42\n\ndef sum_of_numbers_recursive(numbers):\n    if len(numbers) == 0:\n        return 0\n    else:\n        return numbers[0] + sum_of_numbers_recursive(numbers[1:])\n\n# sum_of_numbers_recursive([1, 2, 3]) -> 6\n# sum_of_numbers_recursive([3, 4, 5, 6]) -> 21\n# sum_of_numbers_recursive([1, 2, 3, 4, 5, 6]) -> 30\n# sum_of_numbers_recursive([1, 2, 3, 4, 5, 6, 7]) -> 42\n\n# sum_of_numbers_iterative(numbers) -> 6\n# sum_of_numbers_iterative([3, 4, 5, 6]) -> 21\n# sum_of_numbers_iterative([1, 2, 3, 4, 5, 6]) -> 30\n# sum_of_numbers_iterative([1, 2, 3, 4, 5, 6, 7]) -> 42\n\ndef sum_of_numbers_iterative(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n\n# sum_of_numbers_iterative([1, 2, 3, 4, 5, 6, 7]) -> 42\n\n# sum_of_numbers_iterative([3, 4, 5, 6]) -> 21\n# sum_of_numbers_iterative([1, 2, 3, 4, 5, 6]) -> 30\n# sum_of_numbers_iterative([1, 2, 3, 4, 5, 6, 7]) -> 42\n\n# sum_of_numbers",
      -8.0625
    ],
    [
      "import unittest\n\n\nclass Solution(object):\n\n    def convert(self, nums, num_digit):\n        \"\"\"\n        :type nums: List[int]\n        :type num_digit: int\n        :rtype: int\n        \"\"\"\n        n = 0\n        for i in nums:\n            n = n * 10 + i % num_digit\n        return n\n\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought:\n\n# 11/21/2017\n# https://leetcode.com/problems/convert-a-list-of-multiple-integers-into-a-single-integer/discuss/109815/Java-Solution-with-O(N)-Time-and-Space-Complexity-with-Convert-List-of-Multiple-Integers-into-Single-Integer\n# 1. We start with the first digit of each element.\n# 2. We iterate through the elements, and we use the least number of digits to calculate the final value.\n# 3. We add the final value to the previous value, and repeat until we reach the final value.\n# 4. We then add the final value to the previous value, and repeat until we reach the final value.\n# 5. We then add the final value to the previous value, and repeat until we reach the final value.\n#\n# Time:  O(N)\n# Space: O(N)\n#\n\n# 9/15/2021\n# https://leetcode.com/problems/convert-a-list-of-multiple-integers-into-a-single-integer/discuss/109815/Java-Solution-with-O(N)-Time-and-Space-Complexity-with-Convert-List-of-Multiple-Integers-into-Single-Integer\n# 1. We start with the first digit of each element.\n# 2. We iterate through the elements, and we use the least number of digits to calculate the final value.\n# 3. We add the final",
      -8.1875
    ],
    [
      "import sys\n\n\ndef convert_list(my_list):\n    if my_list == []:\n        return 0\n    sum_ = 0\n    for i in my_list:\n        sum_ = sum_ + i\n    return sum_\n\n\ndef convert_list_recursive(my_list):\n    if my_list == []:\n        return 0\n    sum_ = 0\n    for i in my_list:\n        sum_ = sum_ + i\n        if i % 2 == 0:\n            sum_ = sum_ + my_list[i / 2]\n    return sum_\n\n\ndef convert_list_recursive2(my_list):\n    if my_list == []:\n        return 0\n    sum_ = 0\n    for i in my_list:\n        sum_ = sum_ + i\n        if i % 2 == 0:\n            sum_ = sum_ + my_list[i / 2]\n            if i % 4 == 0:\n                sum_ = sum_ + my_list[i / 4]\n            if i % 8 == 0:\n                sum_ = sum_ + my_list[i / 8]\n    return sum_\n\n\ndef convert_list_recursive3(my_list):\n    if my_list == []:\n        return 0\n    sum_ = 0\n    for i in my_list:\n        sum_ = sum_ + i\n        if i % 2 == 0:\n            sum_ = sum_ + my_list[i / 2]\n            if i % 4 == 0:\n                sum_ = sum_ + my_list[i / 4]\n            if i % 8 == 0:\n                sum_ = sum_ + my_list[i / 8]\n            if i % 16 == 0:\n                sum_ = sum_ + my_list[i / 16]\n    return sum_\n\n\ndef convert_list_recursive4(my_list):\n    if my_list == []:\n        return 0\n    sum_ = 0\n    for i in my_list:\n        sum_ = sum_ + i\n        if i % 2 == 0:\n            sum_ = sum_ + my_list[i / 2]\n            if i % 4 == 0:",
      -8.6015625
    ],
    [
      "class Solution(object):\n    def __init__(self):\n        self.cache = {}\n\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        if str in self.cache:\n            return self.cache[str]\n\n        ans = 0\n        cnt = 0\n        for i in str:\n            if cnt == 0:\n                ans = ans * 10 + int(i)\n                cnt += 1\n            else:\n                ans = ans * 10 + int(i)\n                cnt += 1\n                if ans > 2147483647:\n                    ans = ans - 2147483648\n        self.cache[str] = ans\n        return ans\n\n    def myAtoi2(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        if not str:\n            return 0\n        if str in self.cache:\n            return self.cache[str]\n\n        ans = 0\n        cnt = 0\n        for i in str:\n            if cnt == 0:\n                ans = ans * 10 + int(i)\n                cnt += 1\n            else:\n                ans = ans * 10 + int(i)\n                cnt += 1\n                if ans > 2147483647:\n                    ans = ans - 2147483648\n        self.cache[str] = ans\n        return ans\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.myAtoi('-2147483648')\n    print s.myAtoi('-2147483647')\n    print s.myAtoi('2147483647')\n    print s.myAtoi('-2147483647')\n    print s.myAtoi('-2147483648')\n    print s.myAtoi('2147483648')\n    print s.myAtoi('-2147483648')\n    print s.myAtoi('-2147483648')\n    print s.myAtoi('214748",
      -8.65625
    ],
    [
      "class Solution(object):\n    def combine(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        if n == 1:\n            return nums[0]\n        \n        # for i in range(n - 1):\n        #     target += nums[i]\n        #     if target >= target:\n        #         target -= target\n        # return target\n        \n        target = target % (n + 1)\n        for i in range(n - 1):\n            if target == 0:\n                return nums[i]\n            else:\n                target -= nums[i]\n        return nums[-1]\n        \n        \n\n# Note:\n# Have you met this question before?\n# This problem is the same as \"Product of Array Except Self\".\n# If you know the solution of \"Product of Array Except Self\",\n# please add it here, otherwise write your own solution.\n#\n# For example,\n# Given [2,3,1,2,4,3]\n# return 24\n#\n# Given [2,2,3,3,3,4,4,7]\n# return 272\n#\n# Company Tags: LinkedIn\n# Tags: Array, Hash Table, Hash Table\n# Similar Problems: (M) Product of Array Except Self, (E) Combination Sum II",
      -8.7265625
    ],
    [
      "from collections import Counter\n\nclass Solution(object):\n    def convert(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # Use the following technique to solve this problem:\n        # 1. Sort the numbers in ascending order.\n        # 2. For each number, if it is the last number, then add it to the result.\n        # 3. If it is not the last number, then subtract the last number from it.\n        # 4. If the result is 0, then the sum is the last number.\n        # 5. Otherwise, the sum is the sum of the previous two numbers.\n        sorted_nums = sorted(nums)\n        result = 0\n        for i in range(n):\n            if i == len(sorted_nums) - 1:\n                result += sorted_nums[i]\n            else:\n                result -= sorted_nums[i]\n        return result\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3]\n    n = 3\n    solution = Solution()\n    print solution.convert(nums, n)",
      -9.5234375
    ],
    [
      "# https://www.codewars.com/kata/543b6d4f8c6f6b08d/train/python\n\nimport math\n\n\ndef convert_to_int(my_list):\n    return reduce(lambda x, y: x * 10 + y, my_list)\n\n\nif __name__ == \"__main__\":\n    assert convert_to_int([1, 2, 3, 4, 5]) == 105\n\n    assert convert_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1090\n\n    assert convert_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 34891201\n\n    assert convert_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 858181204\n\n    assert convert_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1259803024\n\n    assert convert_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 2249409216\n\n    assert convert_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 478787872\n\n    assert convert_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 664883888\n\n    assert convert_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 9151515120\n\n    assert convert_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20",
      -9.6328125
    ],
    [
      "class Solution(object):\n    def combine(self, nums, target, result=0):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :type result: int\n        :rtype: int\n        \"\"\"\n        def rec(target, result, nums):\n            if len(nums) == 0:\n                return result\n            if nums[0] > target:\n                return rec(target, result, nums[1:])\n            return rec(target-nums[0], result+nums[0], nums[1:])\n\n        return rec(target, result, nums)\n\nclass Solution2(object):\n    def combine(self, nums, target, result=0):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :type result: int\n        :rtype: int\n        \"\"\"\n        def rec(target, result, nums):\n            if len(nums) == 0:\n                return result\n            if nums[0] > target:\n                return rec(target, result, nums[1:])\n            return rec(target-nums[0], result+nums[0], nums[1:])\n\n        return rec(target, result, nums)\n\nclass Solution3(object):\n    def combine(self, nums, target, result=0):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :type result: int\n        :rtype: int\n        \"\"\"\n        def rec(target, result, nums):\n            if len(nums) == 0:\n                return result\n            if nums[0] > target:\n                return rec(target, result, nums[1:])\n            return rec(target-nums[0], result+nums[0], nums[1:])\n\n        return rec(target, result, nums)\n\nif __name__ == '__main__':\n    print Solution().combine([2,3,6,7], 7)\n    print Solution().combine([2,3,6,7], 8)\n    print Solution().combine([2,",
      -9.65625
    ],
    [
      "class Solution(object):\n    def multiple(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return nums[0]*nums[1]\n        if k == 3:\n            return nums[0]*nums[1]*nums[2]\n        if k == 4:\n            return nums[0]*nums[1]*nums[2]*nums[3]\n        if k == 5:\n            return nums[0]*nums[1]*nums[2]*nums[3]*nums[4]\n        if k == 6:\n            return nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5]\n        if k == 7:\n            return nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5]*nums[6]\n        if k == 8:\n            return nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5]*nums[6]*nums[7]\n        if k == 9:\n            return nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5]*nums[6]*nums[7]*nums[8]\n        if k == 10:\n            return nums[0]*nums[1]*nums[2]*nums[3]*nums[4]*nums[5]*nums[6]*nums[7]*nums[8]*nums[9]\n        if k == 11:\n            return nums[0]*nums[1]*n",
      -10.3515625
    ],
    [
      "def convert_list(list_of_integers):\n    \"\"\"\n    >>> convert_list([2, 3, 4])\n    24\n    >>> convert_list([1, 2, 3, 4])\n    10\n    >>> convert_list([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    123\n    >>> convert_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    12345\n    \"\"\"\n    return sum(list_of_integers)\n\n#print convert_list([2, 3, 4])\n#print convert_list([1, 2, 3, 4])\n#print convert_list([1, 2, 3, 4, 5, 6, 7, 8, 9])\n#print convert_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
      -10.9296875
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: Kevin Su\n# @Date:   2017-08-24 16:57:43\n# @Last Modified by:   Kevin Su\n# @Last Modified time: 2017-08-24 16:59:59\n\n# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def convert(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        num = 0\n        while head:\n            num = num * 10 + head.val\n            head = head.next\n        return num\n\nif __name__ == '__main__':\n    s = Solution()\n    head = ListNode(1)\n    head.next = ListNode(2)\n    head.next.next = ListNode(3)\n    head.next.next.next = ListNode(4)\n    head.next.next.next.next = ListNode(5)\n    head.next.next.next.next.next = ListNode(6)\n    print s.convert(head)\n    print s.convert(None)\n    print s.convert(None)",
      -10.9765625
    ],
    [
      "import unittest\n\nclass Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def multiply(self, nums):\n        if not nums: return 0\n        if len(nums) == 1: return nums[0]\n        if len(nums) == 2: return nums[0] * nums[1]\n        \n        m = max(nums)\n        n = sum(nums)\n        result = 0\n        for i in range(2, m+1):\n            for j in range(2, n+1):\n                if j % i == 0:\n                    result += nums[j/i]\n        return result\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/multiply-of-array-integers/solution/\n\n/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\n\n# 1ms 100%\nclass Solution {\n    public int multiply(int[] nums) {\n        int n = nums.length;\n        if (n == 0) return 0;\n        if (n == 1) return nums[0];\n        if (n == 2) return nums[0] * nums[1];\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            result += nums[i] * i;\n        }\n        return result;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public int multiply(int[] nums) {\n        int n = nums.length;\n        if (n == 0) return 0;\n        if (n == 1) return nums[0];\n        if (",
      -11.3984375
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass Solution:\n    def flatten(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        curr = head\n        while curr.next:\n            curr = curr.next\n        head = curr\n        curr = head\n        while curr.next:\n            curr = curr.next\n            curr.next = curr.next.next\n        curr = head\n        ans = 0\n        while curr:\n            ans = ans * 10 + curr.val\n            curr = curr.next\n        return ans",
      -11.5625
    ],
    [
      "def merge(a, b):\n    return a[:0] + b[:0]\n\ndef merge_sort(l):\n    if len(l) < 2:\n        return l\n    mid = len(l) // 2\n    left = merge_sort(l[:mid])\n    right = merge_sort(l[mid:])\n    return merge(left, right)\n\ndef merge_sort_recursive(l):\n    if len(l) < 2:\n        return l\n    mid = len(l) // 2\n    left = merge_sort_recursive(l[:mid])\n    right = merge_sort_recursive(l[mid:])\n    return merge(left, right)\n\ndef merge_sort_iterative(l):\n    if len(l) < 2:\n        return l\n    mid = len(l) // 2\n    left = merge_sort_iterative(l[:mid])\n    right = merge_sort_iterative(l[mid:])\n    return merge(left, right)\n\ndef merge_sort_recursive_iterative(l):\n    if len(l) < 2:\n        return l\n    mid = len(l) // 2\n    left = merge_sort_recursive_iterative(l[:mid])\n    right = merge_sort_recursive_iterative(l[mid:])\n    return merge(left, right)\n\ndef merge_sort_iterative_recursive(l):\n    if len(l) < 2:\n        return l\n    mid = len(l) // 2\n    left = merge_sort_iterative_recursive(l[:mid])\n    right = merge_sort_iterative_recursive(l[mid:])\n    return merge(left, right)\n\ndef merge_sort_iterative_recursive_recursive(l):\n    if len(l) < 2:\n        return l\n    mid = len(l) // 2\n    left = merge_sort_iterative_recursive_recursive(l[:mid])\n    right = merge_sort_iterative_recursive_recursive(l[mid:])\n    return merge(left, right)",
      -11.9296875
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def flatten(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        if not head:\n            return 0\n        \n        i = 0\n        cur = head\n        while cur:\n            i += 1\n            cur = cur.next\n        \n        cur = head\n        res = 0\n        while cur:\n            res += cur.val\n            cur = cur.next\n        \n        return i * res",
      -12.8203125
    ],
    [
      "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution(object):\n    def multiply(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: int\n        \"\"\"\n        p = l1\n        q = l2\n        r = 0\n        while p and q:\n            r = p.val * q.val + r\n            p = p.next\n            q = q.next\n        while p:\n            r = p.val * r + r\n            p = p.next\n        while q:\n            r = q.val * r + r\n            q = q.next\n        return r",
      -13.1953125
    ],
    [
      "class Solution(object):\n    def multiply(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        if len(A) == 1:\n            return A[0] * self.multiply(A[1:])\n        n = len(A)\n        sum = 0\n        for i in range(n):\n            sum += A[i] * self.multiply(A[i+1:])\n        return sum\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.multiply([1,2,3]))\n    print(sol.multiply([1,2]))\n    print(sol.multiply([1]))\n    print(sol.multiply([1,2,3,4]))\n    print(sol.multiply([1,2,3,4,5]))\n    print(sol.multiply([1,2,3,4,5,6]))\n    print(sol.multiply([1,2,3,4,5,6,7]))",
      -13.5703125
    ],
    [
      "# https://www.youtube.com/watch?v=VZhH4P5Z5wc\n\ndef convert_list(lst):\n    return sum(lst)\n\nif __name__ == \"__main__\":\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert convert_list([1, 2, 3, 4, 5]) == 15, \"Example\"\n    assert convert_list([1, 2, 3, 4, 5, 6, 7]) == 42, \"Second Example\"\n    assert convert_list([]) == 0, \"Empty list\"\n    assert convert_list([-1]) == -1, \"Negative value\"\n    assert convert_list([1, 2, 3, 4, 5, 6, 7, 8]) == 12345, \"Problem\"",
      -13.890625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def convert(self, root, result):\n        if not root: return result\n        self.convert(root.left, result)\n        self.convert(root.right, result)\n        return result + root.val\n    \n    def convert2(self, root):\n        if not root: return 0\n        return self.convert2(root.left)+self.convert2(root.right)\n    \n    def convert3(self, root):\n        if not root: return 0\n        return root.val + self.convert3(root.left)+self.convert3(root.right)\n    \n    def convert4(self, root):\n        if not root: return 0\n        return root.val + self.convert4(root.left)+self.convert4(root.right)\n    \n    def convert5(self, root):\n        if not root: return 0\n        return root.val + self.convert5(root.left)+self.convert5(root.right)\n\n# Note:\n#\n# 1. A Binary Tree can be converted to a single integer by traversing the tree and\n#    counting the number of 1s in the binary representation.\n#\n# 2. A Binary Tree can be converted to a single integer by traversing the tree and\n#    counting the number of 1s in the binary representation.\n#\n# 3. A Binary Tree can be converted to a single integer by traversing the tree and\n#    counting the number of 1s in the binary representation.\n#\n# 4. A Binary Tree can be converted to a single integer by traversing the tree and\n#    counting the number of 1s in the binary representation.\n#\n# 5. A Binary Tree can be converted to a single integer by traversing the tree and\n#    counting the number of 1s in the binary representation.\n#\n# 6. A Binary Tree can be converted to a single integer by traversing the tree and\n#    counting the number of 1s in the",
      -14.8671875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}