{
  "problem": {
    "task_id": "MBPP/479",
    "prompt": "Write a python function to find the first digit of a given number.",
    "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
    "test_list": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ],
    "challenge_test_list": [],
    "problem_id": 468
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import re\n\ndef first_digit(number):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n\n    >>> first_digit(12345)\n    '1'\n    >>> first_digit(1234567)\n    '2'\n    >>> first_digit(12345678)\n    '3'\n    >>> first_digit(123456789)\n    '4'\n    >>> first_digit(1234567890)\n    '5'\n    >>> first_digit(12345678901)\n    '6'\n    >>> first_digit(123456789012)\n    '7'\n    >>> first_digit(1234567890123)\n    '8'\n    >>> first_digit(12345678901234)\n    '9'\n    >>> first_digit(123456789012345)\n    '0'\n    >>> first_digit(1234567890123456)\n    '1'\n    >>> first_digit(12345678901234567)\n    '2'\n    >>> first_digit(123456789012345678)\n    '3'\n    >>> first_digit(1234567890123456789)\n    '4'\n    >>> first_digit(12345678901234567890)\n    '5'\n    \"\"\"\n    if number < 1:\n        return None\n    return str(int(str(number)[0]))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      5.9765625
    ],
    [
      "def first_digit(n):\n    \"\"\"\n    >>> first_digit(1234)\n    3\n    >>> first_digit(123456789)\n    1\n    >>> first_digit(12345678901234567890)\n    1\n    >>> first_digit(123456789012345678901)\n    1\n    >>> first_digit(123456789012345678901234)\n    1\n    >>> first_digit(1234567890123456789012345)\n    1\n    >>> first_digit(12345678901234567890123456)\n    1\n    >>> first_digit(123456789012345678901234567)\n    1\n    >>> first_digit(1234567890123456789012345678)\n    1\n    >>> first_digit(12345678901234567890123456789)\n    1\n    >>> first_digit(123456789012345678901234567890)\n    1\n    >>> first_digit(1234567890123456789012345678901)\n    1\n    >>> first_digit(1234567890123456789012345678901234)\n    1\n    >>> first_digit(12345678901234567890123456789012345)\n    1\n    >>> first_digit(123456789012345678901234567890123456)\n    1\n    >>> first_digit(1234567890123456789012345678901234567)\n    1\n    >>> first_digit(12345678901234567890123456789012345678)\n    1\n    >>> first_digit(1234567890123456789012345678901234567890)\n    1\n    \"\"\"\n    return int(str(n)[0])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.74609375
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    Return the first digit of the given number.\n\n    >>> first_digit(1)\n    '1'\n    >>> first_digit(12)\n    '2'\n    >>> first_digit(123)\n    '3'\n    >>> first_digit(12345)\n    '4'\n    >>> first_digit(12345678)\n    '8'\n    >>> first_digit(123456789)\n    '9'\n    >>> first_digit(12345678901)\n    '0'\n    \"\"\"\n    return str(number)[0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.26953125
    ],
    [
      "def first_digit(number):\n    return int(number[0])\n\nif __name__ == '__main__':\n    print(first_digit(123))\n    print(first_digit(5))",
      3.212890625
    ],
    [
      "def firstDigit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 9:\n        n /= 10\n    return n % 10\n\n\nif __name__ == \"__main__\":\n    assert firstDigit(1234) == 1\n    assert firstDigit(123456789) == 1\n    assert firstDigit(12345678901234) == 1\n    assert firstDigit(1234567890123456789) == 1\n    assert firstDigit(123456789012345678901234) == 1\n    assert firstDigit(12345678901234567890123456789) == 1\n    assert firstDigit(1234567890123456789012345678901234) == 1\n    assert firstDigit(123456789012345678901234567890123456789) == 1\n    assert firstDigit(12345678901234567890123456789012345678901234) == 1\n    assert firstDigit(1234567890123456789012345678901234567890123456789) == 1\n    assert firstDigit(123456789012345678901234567890123456789012345678901234) == 1",
      2.818359375
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    Write a function to find the first digit of a given number.\n\n    Return the first digit of the number as an integer.\n    \"\"\"\n    return int(number) % 10\n\n\nprint(first_digit(12345))\nprint(first_digit(123))\nprint(first_digit(12))\nprint(first_digit(1))",
      2.302734375
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    Find the first digit of a number.\n    :param num: A number\n    :return: The first digit of a number\n    \"\"\"\n    return str(num)[0]\n\nprint(first_digit(123))\nprint(first_digit(12345))\nprint(first_digit(1234567))\nprint(first_digit(123456789))\nprint(first_digit(1234567890))",
      2.06640625
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    Write a function that returns the first digit of a given number.\n    \"\"\"\n    if type(number) == int:\n        return str(number)[0]\n    else:\n        return '0'\n\nnumber = int(input())\nprint(first_digit(number))",
      1.5615234375
    ],
    [
      "def first_digit(n):\n    \"\"\"\n    Find the first digit of a given number.\n    \n    n: a number\n    returns: the first digit of the number\n    \"\"\"\n    return int(str(n)[0])\n\n\n\nprint(first_digit(3))\n#>>> 1\n\nprint(first_digit(5))\n#>>> 2\n\nprint(first_digit(15))\n#>>> 3\n\nprint(first_digit(10))\n#>>> 0\n\nprint(first_digit(100))\n#>>> 1",
      1.4423828125
    ],
    [
      "def first_digit(n):\n    if n < 10:\n        return n\n    else:\n        return int(str(n)[0])\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    n = int(input())\n    print(first_digit(n))\n\nif __name__ == '__main__':\n    main()",
      1.412109375
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if number > 0:\n        return (number % 10)\n    else:\n        return 0\n\nprint(first_digit(123))",
      1.1904296875
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    :param number:\n    :return:\n    \"\"\"\n    return int(str(number)[0])\n\n\nif __name__ == '__main__':\n    assert first_digit(0) == 0\n    assert first_digit(1) == 0\n    assert first_digit(123) == 1\n    assert first_digit(123456789) == 1\n    assert first_digit(123456789101112) == 1\n    assert first_digit(12345678910111213141516171819) == 1\n    assert first_digit(1234567891011121314151617181901) == 0\n    assert first_digit(12345678910111213141516171819012) == 0\n    assert first_digit(123456789101112131415161718190123) == 0\n    assert first_digit(1234567891011121314151617181901234) == 0\n    assert first_digit(12345678910111213141516171819012345) == 0\n    assert first_digit(123456789101112131415161718190123456) == 0\n    assert first_digit(1234567891011121314151617181901234567) == 0\n    assert first_digit(12345678910111213141516171819012345678) == 0\n    assert first_digit(123456789101112131415161718190123456789) == 0\n    assert first_digit(1234567891011121314151617181901234567890) == 0\n    assert first_digit(12345678910111213141516171819012345678901) == 0\n    assert first_digit(123456789101112131415161718190123456789012) == 0\n    assert first_digit(1234567891011121314151617181901234567890123) == 0\n    assert first_digit(12345678910111213141516171819012345678901234) == 0",
      1.1318359375
    ],
    [
      "def first_digit(n):\n    return int(n[0])\n\n\nif __name__ == \"__main__\":\n    print(first_digit(123))\n    print(first_digit(123.4))\n    print(first_digit(123.45))",
      0.8134765625
    ],
    [
      "def first_digit(number):\n    return number % 10\n\n\nprint(first_digit(1234))",
      0.8115234375
    ],
    [
      "def first_digit(number):\n    return number % 10\n\n\nif __name__ == '__main__':\n    number = int(input())\n    print(first_digit(number))",
      0.320068359375
    ],
    [
      "def digit_first(n):\n    \"\"\"\n    >>> digit_first(123)\n    1\n    >>> digit_first(23)\n    2\n    >>> digit_first(2345)\n    3\n    \"\"\"\n    return int(n/10**(len(str(n))-1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.2415771484375
    ],
    [
      "import math\n\ndef first_digit(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return int(math.floor(number / math.pow(10, 1)))\n\nif __name__ == '__main__':\n    assert first_digit(0) == 0,'should be 0'\n    assert first_digit(1) == 1,'should be 1'\n    assert first_digit(10) == 1,'should be 1'\n    assert first_digit(100) == 2,'should be 2'\n    assert first_digit(1000) == 3,'should be 3'\n    assert first_digit(10000) == 4,'should be 4'\n    assert first_digit(100000) == 5,'should be 5'\n    assert first_digit(1000000) == 6,'should be 6'",
      0.1883544921875
    ],
    [
      "#!/usr/bin/env python\n\ndef firstDigit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    while n > 0:\n        n = n % 10\n        print n\n        \nif __name__ == '__main__':\n    firstDigit(123)",
      0.1531982421875
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return str(num)[0]\n\n\nif __name__ == '__main__':\n    print(first_digit(1))\n    print(first_digit(10))\n    print(first_digit(100))\n    print(first_digit(1000))",
      0.035247802734375
    ],
    [
      "def first_digit(n):\n    \"\"\"\n    Write a function first_digit that takes as input a number and returns\n    the first digit of that number.\n    \"\"\"\n    return int(n / 10 ** (len(str(n)) - 1))",
      0.016021728515625
    ],
    [
      "import sys\n\ndef digit_first(num):\n    return int(str(num)[0])\n\ndef main():\n    num = sys.argv[1]\n    result = digit_first(num)\n    print result\n\nif __name__ == '__main__':\n    main()",
      0.01029205322265625
    ],
    [
      "def first_digit(n):\n    return n % 10\n\nprint(first_digit(2))\nprint(first_digit(100))\nprint(first_digit(1000))",
      -0.379150390625
    ],
    [
      "def digit_first(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n\n    return int(num/10**(len(str(num))-1))\n\nif __name__ == '__main__':\n    assert digit_first(0) == 0\n    assert digit_first(1) == 1\n    assert digit_first(123) == 1\n    assert digit_first(1000) == 1\n    assert digit_first(12345) == 1\n    assert digit_first(1234567) == 2\n    assert digit_first(12345678) == 3\n    assert digit_first(123456789) == 3\n    assert digit_first(1234567890) == 3",
      -0.413818359375
    ],
    [
      "def get_digit(num):\n    return num % 10\n\ndef first_digit(num):\n    return get_digit(num)\n\nif __name__ == '__main__':\n    assert first_digit(123) == 1\n    assert first_digit(123) == 1\n    assert first_digit(1) == 1\n    assert first_digit(1) == 1\n    assert first_digit(0) == 0\n    assert first_digit(0) == 0\n    assert first_digit(-1) == 0\n    assert first_digit(-1) == 0\n    assert first_digit(-123) == 0\n    assert first_digit(-123) == 0\n    assert first_digit(-12345) == 0\n    assert first_digit(-12345) == 0\n    assert first_digit(-123456789) == 0\n    assert first_digit(-123456789) == 0\n    assert first_digit(-1234567890123) == 0\n    assert first_digit(-1234567890123) == 0\n    assert first_digit(-1234567890123456789) == 0\n    assert first_digit(-1234567890123456789) == 0\n    assert first_digit(-12345678901234567890123) == 0\n    assert first_digit(-12345678901234567890123) == 0\n    assert first_digit(-12345678901234567890123456789) == 0\n    assert first_digit(-12345678901234567890123456789) == 0",
      -0.74267578125
    ],
    [
      "def first_digit(number):\n    return number % 10\n\nif __name__ == '__main__':\n    print(first_digit(9))\n    print(first_digit(23))\n    print(first_digit(25))\n    print(first_digit(123))\n    print(first_digit(1000))",
      -0.85595703125
    ],
    [
      "def first_digit(n):\n    \"\"\"\n    Find the first digit of a given number.\n    :param n: a number\n    :return: the first digit of the number\n    \"\"\"\n    # Your code here\n    return n % 10\n\n\ndef test():\n    assert first_digit(15) == 5\n    assert first_digit(100) == 2\n    assert first_digit(101) == 1\n\nif __name__ == \"__main__\":\n    test()",
      -0.85595703125
    ],
    [
      "def first_digit(n):\n    \"\"\"\n    Return the first digit of a given number.\n    \"\"\"\n    return str(n)[0]\n\n\nif __name__ == \"__main__\":\n    print first_digit(123)\n    print first_digit(1000000)\n    print first_digit(1010)",
      -0.85595703125
    ],
    [
      "def find_digit(n):\n    return n % 10\n\nif __name__ == \"__main__\":\n    n = input(\"Enter a number: \")\n    first_digit = find_digit(n)\n    print(\"The first digit of %s is %s\" % (n, first_digit))",
      -0.85693359375
    ],
    [
      "# Function to get the first digit of a given number\ndef get_first_digit(num):\n    \"\"\"\n    Return the first digit of a given number.\n    \"\"\"\n    return num % 10\n\n\n# Test cases\nprint(\"Test case 1:\")\nprint(get_first_digit(9))\n\nprint(\"Test case 2:\")\nprint(get_first_digit(0))\n\nprint(\"Test case 3:\")\nprint(get_first_digit(1))\n\nprint(\"Test case 4:\")\nprint(get_first_digit(123))\n\nprint(\"Test case 5:\")\nprint(get_first_digit(12345))",
      -0.85693359375
    ],
    [
      "# https://www.hackerrank.com/challenges/first-digit\n\ndef first_digit(n):\n    return ord(str(n)[0]) - ord('0')\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    print(first_digit(n))",
      -0.85693359375
    ],
    [
      "def first_digit(n):\n    \"\"\"\n    Write a function first_digit that takes a number n and returns the\n    first digit of n.\n    \"\"\"\n    return n % 10\n\nprint(first_digit(123))\nprint(first_digit(1234567))\nprint(first_digit(12345678))\nprint(first_digit(123456789))\nprint(first_digit(1234567890))",
      -0.85693359375
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    Return the first digit of num.\n    \"\"\"\n    if num < 0:\n        return -1\n    return num % 10\n\ndef test_first_digit():\n    assert first_digit(123) == 1\n    assert first_digit(-123) == -1\n    assert first_digit(0) == 0\n    assert first_digit(-0) == 0\n\nif __name__ == '__main__':\n    test_first_digit()",
      -0.85693359375
    ],
    [
      "def first_digit(n):\n    return int(n/10**(len(str(n))-1))\n\nif __name__ == '__main__':\n    for n in range(10**6, 10**6+10):\n        print n, first_digit(n)",
      -0.85693359375
    ],
    [
      "#!/usr/bin/env python\n\nimport sys\n\ndef firstDigit(number):\n    return str(number)[0]\n\nif __name__ == \"__main__\":\n    try:\n        number = int(sys.argv[1])\n        print firstDigit(number)\n    except ValueError:\n        print \"Invalid input\"",
      -0.85693359375
    ],
    [
      "def first_digit(n):\n    return n % 10\n\nprint(first_digit(123))\nprint(first_digit(123456789))\nprint(first_digit(12345678901))",
      -0.85693359375
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return num % 10\n\nif __name__ == '__main__':\n    num = 0\n    print(first_digit(num))",
      -0.85693359375
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    >>> first_digit(1234)\n    '1'\n    >>> first_digit(12345)\n    '2'\n    >>> first_digit(123)\n    '3'\n    \"\"\"\n    return str(number)[:1]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def find_digit(number):\n    \"\"\"\n    Find the first digit of a given number.\n    \"\"\"\n    return str(number)[0]\n\nif __name__ == '__main__':\n    assert find_digit(9) == '0'\n    assert find_digit(5) == '5'\n    assert find_digit(15) == '1'",
      -0.85791015625
    ],
    [
      "def first_digit(num):\n    return str(num)[0]\n\nprint(first_digit(123))",
      -0.85791015625
    ],
    [
      "#!/usr/bin/env python\n\ndef first_digit(number):\n    return int(str(number)[0])\n\nnumber = int(input(\"Enter a number: \"))\nprint(\"The first digit of\", number, \"is\", first_digit(number))",
      -0.85791015625
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    return num % 10\n\n\nif __name__ == '__main__':\n    print(first_digit(12345))\n    print(first_digit(-12345))",
      -0.85791015625
    ],
    [
      "# This code is a direct translation of the C++ code.\n# The Python code is more readable.\n\ndef first_digit(number):\n    \"\"\"\n    :param number: A positive integer.\n    :return: The first digit of number.\n    \"\"\"\n    return int(str(number)[0])",
      -0.85791015625
    ],
    [
      "def first_digit(n):\n    if n < 10:\n        return n\n    else:\n        return first_digit(n % 10)\n\nif __name__ == '__main__':\n    n = 123\n    print(first_digit(n))",
      -0.85791015625
    ],
    [
      "def first_digit(num):\n    return num % 10\n\n\n# Your code should pass all the tests below.\n\nprint(first_digit(10))\nprint(first_digit(20))\nprint(first_digit(0))\nprint(first_digit(-10))\nprint(first_digit(-20))",
      -0.85791015625
    ],
    [
      "def first_digit(number):\n    return int(str(number)[0])\n\n\nprint(first_digit(123))\nprint(first_digit(99))\nprint(first_digit(45))\nprint(first_digit(0))\nprint(first_digit(1))",
      -0.85791015625
    ],
    [
      "def get_digit(number):\n    \"\"\"\n    Find the first digit of a given number.\n\n    Input:\n        number: a number\n\n    Output:\n        a digit of the number\n    \"\"\"\n    if number < 10:\n        return number\n    else:\n        return int(number % 10)\n\ndef get_digits(number):\n    \"\"\"\n    Find the digits of a given number.\n\n    Input:\n        number: a number\n\n    Output:\n        a list of the digits of the number\n    \"\"\"\n    return map(get_digit, range(number))\n\ndef main():\n    \"\"\"\n    Main program function.\n    \"\"\"\n    number = int(input('Enter a number: '))\n    digits = get_digits(number)\n    print(digits)\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def digit_first(number):\n    \"\"\"\n    digit_first(number) -> first digit of number\n    \n    Find the first digit of a given number.\n\n    >>> digit_first(123)\n    '1'\n    >>> digit_first(100)\n    '2'\n    >>> digit_first(0)\n    '0'\n    \"\"\"\n    \n    return str(number)[0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "# Import the module\nimport math\n\n# Define a function\ndef find_digit(num):\n    # Get the digits of the number\n    digits = str(num)\n\n    # Get the length of the digits\n    length = len(digits)\n\n    # If the length is 1, return the first digit\n    if length == 1:\n        return digits[0]\n\n    # Else, return the first digit and the next digit\n    else:\n        return digits[0], digits[1]\n\n# Call the function\nprint find_digit(100000000)\n\n# Call the function\nprint find_digit(3)\n\n# Call the function\nprint find_digit(3.4)\n\n# Call the function\nprint find_digit(3.45)",
      -0.8583984375
    ],
    [
      "def first_digit(number):\n    return number % 10\n\n\nprint(first_digit(123))\nprint(first_digit(456))\nprint(first_digit(9))\nprint(first_digit(0))\nprint(first_digit(5))",
      -0.8583984375
    ],
    [
      "def find_digit(number):\n    digit = 0\n    while number > 0:\n        digit += 1\n        number /= 10\n    return digit\n\ndef main():\n    number = 123456789\n    digit = find_digit(number)\n    print(digit)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "# Write your code here\ndef first_digit(num):\n    \"\"\"\n    :type num: int\n    :rtype: str\n    \"\"\"\n    return str(num)[0]",
      -0.8583984375
    ],
    [
      "def first_digit(num):\n    return int(str(num)[0])\n\n# Test Cases\nprint(first_digit(7))\nprint(first_digit(0))\nprint(first_digit(1))\nprint(first_digit(5))\nprint(first_digit(8))\nprint(first_digit(12))",
      -0.8583984375
    ],
    [
      "def firstDigit(num):\n    return num % 10\n\nprint(firstDigit(123))\nprint(firstDigit(12345))\nprint(firstDigit(12345678))",
      -0.8583984375
    ],
    [
      "def get_digit(number):\n    return str(number)[0]\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert get_digit(100) == \"1\", \"Example\"\n    assert get_digit(0) == \"0\", \"Example\"\n    assert get_digit(123) == \"3\", \"Example\"\n    assert get_digit(1234) == \"4\", \"Example\"\n    assert get_digit(12345) == \"5\", \"Example\"\n    assert get_digit(123456) == \"6\", \"Example\"\n    assert get_digit(1234567) == \"7\", \"Example\"\n    assert get_digit(12345678) == \"8\", \"Example\"\n    assert get_digit(123456789) == \"9\", \"Example\"\n    assert get_digit(1234567890) == \"0\", \"Example\"",
      -0.8583984375
    ],
    [
      "# Example 1:\n# Input: 3\n# Output: 1\n# Explanation: The number 3 has the first digit 1.\n# Example 2:\n# Input: 10\n# Output: 0\n# Explanation: The number 10 has the first digit 0.\n\n# Note:\n# The input will be a positive integer.\n\nimport math\n\n\nclass Solution(object):\n    def firstDigit(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return math.floor(num / 10) + 1\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.firstDigit(3))\n    print(sol.firstDigit(10))",
      -0.8583984375
    ],
    [
      "def first_digit(number):\n    return int(number) % 10\n\n\n\nprint(first_digit(123))",
      -0.8583984375
    ],
    [
      "def find_first_digit(n):\n    \"\"\"\n    Find the first digit of a number.\n    :param n:\n    :return:\n    \"\"\"\n    return str(n)[0]\n\ndef main():\n    \"\"\"\n    Main\n    :return:\n    \"\"\"\n    print(find_first_digit(5))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def digit_first(number):\n    \"\"\"\n    >>> digit_first(123)\n    '1'\n    >>> digit_first(12345)\n    '1'\n    >>> digit_first(123456789)\n    '1'\n    >>> digit_first(1234567890123456789)\n    '1'\n    >>> digit_first(12345678901234567890123456789)\n    '1'\n    \"\"\"\n    number = str(number)\n    return number[0]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    Args:\n        number (int): The number to find the first digit of.\n\n    Returns:\n        int: The first digit of the number.\n    \"\"\"\n    return str(number)[0]",
      -0.85888671875
    ],
    [
      "def digit(number):\n    if number == 0:\n        return 0\n    return number % 10\n\ndef first_digit(number):\n    return digit(number)\n\ndef main():\n    number = int(raw_input())\n    print first_digit(number)\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return num % 10\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    num = 1\n    while True:\n        print(num)\n        num = num * 10\n        if num == 1:\n            break\n    print(first_digit(num))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def firstDigit(num):\n    return int(num % 10)\n\n# Test cases\nprint(firstDigit(100))\nprint(firstDigit(1000))\nprint(firstDigit(10))\nprint(firstDigit(10 ** 10))",
      -0.85888671875
    ],
    [
      "#\n# Example 1:\n#\n# Input:\n# n = 123\n#\n# Output:\n# 1\n#\n# Explanation:\n# The first digit is 1.\n#\n# Example 2:\n#\n# Input:\n# n = 12345\n#\n# Output:\n# 6\n#\n# Explanation:\n# The first digit is 6.\n#\n# Example 3:\n#\n# Input:\n# n = 1234567\n#\n# Output:\n# 0\n#\n# Explanation:\n# The first digit is 0.\n#\n# Example 4:\n#\n# Input:\n# n = 12345678\n#\n# Output:\n# 0\n#\n# Explanation:\n# The first digit is 0.\n#\n# Example 5:\n#\n# Input:\n# n = 123456789\n#\n# Output:\n# 0\n#\n# Explanation:\n# The first digit is 0.\n#\n\ndef first_digit(n):\n    if n == 0:\n        return 0\n    i = 0\n    while n > 0:\n        i += 1\n        n /= 10\n    return i\n\n\n#\n# Note:\n# - 1 <= n <= 9999\n# - n is a positive integer\n#\n\n#\n# Note:\n# - The solution is trivial.\n# - n is a positive integer, the first digit of n is 1.\n# - n is a positive integer, the first digit of n is not 1.\n#",
      -0.85888671875
    ],
    [
      "def first_digit(n):\n    return int(n) % 10\n\nprint(first_digit(123))\nprint(first_digit(1))\nprint(first_digit(0))",
      -0.9091796875
    ],
    [
      "def first_digit(number):\n    return int(number) // 10\n\n\nif __name__ == '__main__':\n    print(first_digit(12345))\n    print(first_digit(123))\n    print(first_digit(123456789))\n    print(first_digit(12345678901))",
      -0.92041015625
    ],
    [
      "def find_digit(number):\n    return int(str(number)[0])\n\nprint(find_digit(1234567890))\nprint(find_digit(123456789))\nprint(find_digit(12345678901))\nprint(find_digit(123456789012))",
      -0.92041015625
    ],
    [
      "def firstDigit(n):\n    \"\"\"\n    @param n: Integer\n    @return: Integer\n    \"\"\"\n    return n % 10\n\nprint(firstDigit(123))",
      -1.3310546875
    ],
    [
      "def first_digit(n):\n    return n / 10 + 1\n\nprint(first_digit(123))\n#>>> 1",
      -1.5556640625
    ],
    [
      "def find_digit(num):\n    \"\"\"\n    Find the first digit of a given number.\n\n    @param num: A given number.\n    @type  num: int\n\n    @return: The first digit of the given number.\n    @rtype: int\n    \"\"\"\n    return int(num / 10**(len(str(num)) - 1))\n\n\nif __name__ == \"__main__\":\n    print find_digit(123)\n    print find_digit(12345)\n    print find_digit(12345678)\n    print find_digit(123456789)\n    print find_digit(1234567890)\n    print find_digit(12345678901)\n    print find_digit(123456789012)\n    print find_digit(1234567890123)\n    print find_digit(12345678901234)\n    print find_digit(123456789012345)\n    print find_digit(1234567890123456)\n    print find_digit(12345678901234567)\n    print find_digit(123456789012345678)\n    print find_digit(1234567890123456789)",
      -1.69140625
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    Write a function to find the first digit of a given number.\n\n    For example, given number = 2, return 1. Given number = 10, return 3.\n    Given number = 13, return 2.\n\n    Assume we are dealing with an infinite amount of money.\n    \"\"\"\n    if number == 0:\n        return 0\n    if number % 10 == 0:\n        return 10\n    return number % 10\n\n\nif __name__ == '__main__':\n    print(first_digit(2))\n    print(first_digit(10))\n    print(first_digit(13))",
      -1.8173828125
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \n    >>> first_digit(1234)\n    3\n    >>> first_digit(123)\n    1\n    >>> first_digit(0)\n    0\n    >>> first_digit(-123)\n    -1\n    \"\"\"\n    return int(number) % 10\n\nif __name__ == \"__main__\":\n    print(first_digit(1234))\n    print(first_digit(123))\n    print(first_digit(0))\n    print(first_digit(-123))",
      -2.564453125
    ],
    [
      "def first_digit(n):\n    return n % 10\n\n\nprint first_digit(123)\n\nprint first_digit(12345)\n\nprint first_digit(1234567)\n\nprint first_digit(123456789)\n\nprint first_digit(1234567890)\n\nprint first_digit(12345678901)\n\nprint first_digit(123456789012)\n\nprint first_digit(1234567890123)\n\nprint first_digit(12345678901234)\n\nprint first_digit(123456789012345)\n\nprint first_digit(1234567890123456)\n\nprint first_digit(12345678901234567)\n\nprint first_digit(123456789012345678)\n\nprint first_digit(1234567890123456789)\n\nprint first_digit(12345678901234567890)",
      -2.66796875
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return num % 10\n\n\ndef main():\n    print(first_digit(123))\n    print(first_digit(12345))\n    print(first_digit(1234))\n    print(first_digit(1234567))\n    print(first_digit(123456789))\n\nif __name__ == '__main__':\n    main()",
      -2.931640625
    ],
    [
      "def first_digit(n):\n    return int(n) % 10\n\n\nif __name__ == \"__main__\":\n    print(first_digit(123))\n    print(first_digit(1234))\n    print(first_digit(12345))\n    print(first_digit(123456))\n    print(first_digit(1234567))\n    print(first_digit(12345678))\n    print(first_digit(123456789))\n    print(first_digit(1234567891))\n    print(first_digit(12345678912))\n    print(first_digit(123456789123))\n    print(first_digit(1234567891234))\n    print(first_digit(12345678912345))",
      -3.373046875
    ],
    [
      "def get_digit(number):\n    return int(number / 10)\n\ndef get_first_digit(number):\n    return number % 10\n\n\ndef main():\n    for x in range(10):\n        print(get_digit(x), \":\", get_first_digit(x))\n\nif __name__ == '__main__':\n    main()",
      -4.21484375
    ],
    [
      "def first_digit(n):\n    return n / 10 + 1\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\n\ndef last_digit(n):\n    return n % 10\n\n\"\"\"\nWrite a python function to find the number of digits of a given number.\n\"\"\"\n\ndef number_of_digits(n):\n    return len(str(n)) - 1\n\n\"\"\"\nWrite a python function to find the smallest number of digits that is greater than or equal to n.\n\"\"\"\n\ndef smallest_number_of_digits_greater_than_n(n):\n    return str(n) + str(n)[-1]\n\n\"\"\"\nWrite a python function to find the largest number of digits that is less than or equal to n.\n\"\"\"\n\ndef largest_number_of_digits_less_than_n(n):\n    return str(n)[-1] + str(n)\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\n\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\n\ndef sum_of_digits_2(n):\n    return sum(map(int, str(n)))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\n\ndef sum_of_digits_3(n):\n    return sum(map(int, str(n)))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\n\ndef sum_of_digits_4(n):\n    return sum(map(int, str(n)))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\n\ndef sum_of_digits_5(n):\n    return sum(map(int, str(n)))\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\n\ndef sum_of_digits_6(n):\n    return sum(map(int, str(n)))",
      -4.67578125
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    :param num: number\n    :return: first digit\n    \"\"\"\n    return str(num)[0]\n\n# TODO: add test cases\nif __name__ == '__main__':\n    assert first_digit(12345) == '3'\n    assert first_digit(1) == '1'\n    assert first_digit(0) == '0'\n    assert first_digit(3) == '3'\n    assert first_digit(100) == '1'\n    assert first_digit(1234) == '1'\n    assert first_digit(123) == '1'\n    assert first_digit(12345) == '3'",
      -4.69140625
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    Args:\n        number (int): The number to find the first digit of\n    Returns:\n        int: The first digit of the number\n    \"\"\"\n    if number == 0:\n        return 0\n    else:\n        return number % 10\n\nif __name__ == '__main__':\n    print(first_digit(123))\n    print(first_digit(98765))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123456789))\n    print(first_digit(123",
      -5.05078125
    ],
    [
      "def first_digit(num):\n    return (num % 10)\n\n# Test Cases\nassert first_digit(9) == '0', \"Test Case 1: First digit of 9 is 0\"\nassert first_digit(10) == '1', \"Test Case 2: First digit of 10 is 1\"\nassert first_digit(1000) == '0', \"Test Case 3: First digit of 1000 is 0\"\nassert first_digit(1001) == '1', \"Test Case 4: First digit of 1001 is 1\"\nassert first_digit(123456789) == '1', \"Test Case 5: First digit of 123456789 is 1\"\nassert first_digit(123456790) == '0', \"Test Case 6: First digit of 123456790 is 0\"",
      -5.453125
    ],
    [
      "#!/usr/bin/env python\n\n# import the library\nimport math\n\n# calculate the first digit of a given number\ndef first_digit(number):\n    # convert the number to a string\n    number_str = str(number)\n\n    # if the number is not a string, return '0'\n    if not isinstance(number_str, str):\n        return '0'\n\n    # calculate the length of the number string\n    number_len = len(number_str)\n\n    # if the length of the number string is not 1, return '0'\n    if number_len!= 1:\n        return '0'\n\n    # calculate the first digit of the number\n    first_digit = int(number_str[0])\n\n    # return the first digit\n    return first_digit\n\n\n# calculate the first digit of a given number\ndef first_digit(number):\n    # convert the number to a string\n    number_str = str(number)\n\n    # if the number is not a string, return '0'\n    if not isinstance(number_str, str):\n        return '0'\n\n    # calculate the length of the number string\n    number_len = len(number_str)\n\n    # if the length of the number string is not 1, return '0'\n    if number_len!= 1:\n        return '0'\n\n    # calculate the first digit of the number\n    first_digit = int(number_str[0])\n\n    # return the first digit\n    return first_digit\n\n# calculate the first digit of a given number\ndef first_digit(number):\n    # convert the number to a string\n    number_str = str(number)\n\n    # if the number is not a string, return '0'\n    if not isinstance(number_str, str):\n        return '0'\n\n    # calculate the length of the number string\n    number_len = len(number_str)\n\n    # if the length of the number string is not 1, return '0'\n    if number_len!= 1:\n        return '0'\n\n    # calculate the first digit of the number\n    first_digit = int(number_str[0])\n\n    # return the first digit\n    return first_digit",
      -5.4609375
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    :param number: The number to be processed\n    :type number: int\n    :return: The first digit of the number\n    :rtype: int\n    \"\"\"\n    return (number // 10) + 1\n\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    assert first_digit(10) == 1, \"10 - 1\"\n    assert first_digit(100) == 2, \"100 - 2\"\n    assert first_digit(1000) == 3, \"1000 - 3\"\n    assert first_digit(10000) == 4, \"10000 - 4\"\n    assert first_digit(100000) == 5, \"100000 - 5\"\n    assert first_digit(12345) == 1, \"12345 - 1\"\n    assert first_digit(1234567890) == 2, \"1234567890 - 2\"",
      -6.109375
    ],
    [
      "def first_digit(num):\n    return int(num) % 10\n\n# Test cases\n\nassert first_digit(123) == 1\nassert first_digit(12345) == 5\nassert first_digit(123456789) == 9\nassert first_digit(1234567891) == 1\n\n# Your code\n\n\"\"\"\ndef first_digit(num):\n    return num % 10\n\"\"\"",
      -6.34765625
    ],
    [
      "def find_digit(num):\n    \"\"\"\n    Find the first digit of a given number.\n    \"\"\"\n    return int(num) % 10\n\nif __name__ == \"__main__\":\n    print find_digit(123)\n    print find_digit(0)\n    print find_digit(-1)\n    print find_digit(1)\n    print find_digit(123456789)\n    print find_digit(0.5)\n    print find_digit(0.51)\n    print find_digit(0.999)\n    print find_digit(123.12)\n    print find_digit(12.34)\n    print find_digit(123.1234)\n    print find_digit(1234)\n    print find_digit(123456789)\n    print find_digit(123456789.1234)\n    print find_digit(123456789.1234)\n    print find_digit(123456789.12345)\n    print find_digit(123456789.12345)\n    print find_digit(123456789.123456789)\n    print find_digit(123456789.123456789)\n    print find_digit(123456789.123456789)\n    print find_digit(123456789.123456789)\n    print find_digit(123456789.123456789)\n    print find_digit(123456789.123456789)",
      -6.50390625
    ],
    [
      "import math\n\ndef first_digit(n):\n    return int(math.floor(n))\n\nprint(first_digit(12))\nprint(first_digit(123))\nprint(first_digit(12345))\nprint(first_digit(123456))\nprint(first_digit(1234567))\nprint(first_digit(12345678))\nprint(first_digit(123456789))\nprint(first_digit(1234567890))\nprint(first_digit(12345678901))\nprint(first_digit(123456789012))",
      -6.8203125
    ],
    [
      "def first_digit(num):\n    if num > 9:\n        return num % 10\n    else:\n        return num\n\nprint(first_digit(11))\nprint(first_digit(12))\nprint(first_digit(13))\nprint(first_digit(14))\nprint(first_digit(15))\nprint(first_digit(16))\nprint(first_digit(17))\nprint(first_digit(18))\nprint(first_digit(19))\nprint(first_digit(20))\nprint(first_digit(21))\nprint(first_digit(22))\nprint(first_digit(23))\nprint(first_digit(24))\nprint(first_digit(25))\nprint(first_digit(26))\nprint(first_digit(27))\nprint(first_digit(28))\nprint(first_digit(29))\nprint(first_digit(30))\nprint(first_digit(31))\nprint(first_digit(32))\nprint(first_digit(33))\nprint(first_digit(34))\nprint(first_digit(35))\nprint(first_digit(36))\nprint(first_digit(37))\nprint(first_digit(38))\nprint(first_digit(39))\nprint(first_digit(40))\nprint(first_digit(41))\nprint(first_digit(42))\nprint(first_digit(43))\nprint(first_digit(44))\nprint(first_digit(45))\nprint(first_digit(46))\nprint(first_digit(47))\nprint(first_digit(48))\nprint(first_digit(49))\nprint(first_digit(50))\nprint(first_digit(51))\nprint(first_digit(52))\nprint(first_digit(53))\nprint(first_digit(54))\nprint(first_digit(55))\nprint(first_digit(56))\nprint(first_digit(57))\nprint(first_digit(58))\nprint(first_digit(59))\nprint(first_digit(60))\nprint(first_digit(61))\nprint(first_digit(62))\nprint(first_digit(63))\nprint(first_",
      -7.05859375
    ],
    [
      "def first_digit(num):\n  \"\"\"\n  Return the first digit of num.\n  \"\"\"\n  # Write code here\n  return num % 10\n\nprint first_digit(5)\n#>>> 2\nprint first_digit(12345)\n#>>> 4\nprint first_digit(123456789)\n#>>> 0",
      -7.390625
    ],
    [
      "def first_digit(n):\n    return n % 10\n\nprint first_digit(123)\n#>>> 2\n\nprint first_digit(123456789)\n#>>> 0\n\nprint first_digit(12345678901)\n#>>> 7\n\nprint first_digit
      -7.98828125
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    Find the first digit of the given number.\n    :param number: a given number.\n    :return: the first digit of the given number.\n    \"\"\"\n    return int(number / 10) + 1\n\ndef main():\n    \"\"\"\n    Call the first_digit function and print the result.\n    \"\"\"\n    print(first_digit(12345))\n\nif __name__ == '__main__':\n    main()",
      -8.125
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    Return the first digit of num.\n    \"\"\"\n    return num % 10\n\nif __name__ == '__main__':\n    assert first_digit(0) == 0\n    assert first_digit(1) == 1\n    assert first_digit(10) == 1\n    assert first_digit(100) == 2\n    assert first_digit(1000) == 3\n    assert first_digit(10000) == 4\n    assert first_digit(100000) == 5\n    assert first_digit(1000000) == 6\n    assert first_digit(10000000) == 7\n    assert first_digit(100000000) == 8\n    assert first_digit(1000000000) == 9",
      -8.21875
    ],
    [
      "# 1. write a python function named digit_of_num\n# 2. return the first digit of a number.\n# 3. return the first digit of 123456789.\n\ndef digit_of_num(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return num % 10\n\n\nif __name__ == '__main__':\n    assert digit_of_num(123456789) == 1\n    assert digit_of_num(1234567) == 0\n    assert digit_of_num(12345) == 0\n    assert digit_of_num(123) == 0\n    assert digit_of_num(12) == 0\n    assert digit_of_num(1) == 1\n    assert digit_of_num(0) == 0\n    assert digit_of_num(-1) == 0\n    assert digit_of_num(-12) == 0\n    assert digit_of_num(-123) == 0\n    assert digit_of_num(-12345) == 0\n    assert digit_of_num(-1234567) == 0\n    assert digit_of_num(-123456789) == 0\n    assert digit_of_num(123456789) == 1\n    assert digit_of_num(1234567) == 0\n    assert digit_of_num(12345) == 0\n    assert digit_of_num(123) == 0\n    assert digit_of_num(12) == 0\n    assert digit_of_num(1) == 1\n    assert digit_of_num(0) == 0\n    assert digit_of_num(-1) == 0\n    assert digit_of_num(-12) == 0\n    assert digit_of_num(-123) == 0\n    assert digit_of_num(-12345) == 0\n    assert digit_of_num(-1234567) == 0\n    assert digit_of_num(-123456789) == 0",
      -9.2265625
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    Given a number, return the first digit of that number.\n\n    >>> first_digit(12)\n    1\n    >>> first_digit(123)\n    1\n    >>> first_digit(12345)\n    2\n    >>> first_digit(1234567)\n    7\n    >>> first_digit(123456789)\n    8\n    \"\"\"\n    return num / 10\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -9.3125
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    >>> first_digit(12345)\n    1\n    >>> first_digit(123)\n    1\n    >>> first_digit(123456789)\n    5\n    >>> first_digit(1234567890)\n    1\n    \"\"\"\n    return int(number/10**1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -9.546875
    ],
    [
      "def first_digit(number):\n    \"\"\"\n    :param number: The number to check\n    :return: The first digit of the number\n    \"\"\"\n    return int(number) / int(number)\n\n\nif __name__ == '__main__':\n    assert first_digit(123) == 1\n    assert first_digit(12345) == 1\n    assert first_digit(1234567890) == 1\n    assert first_digit(123456789012345) == 1\n    assert first_digit(1234567890123456) == 1\n    assert first_digit(12345678901234567) == 1\n    assert first_digit(123456789012345678) == 1\n    assert first_digit(1234567890123456789) == 1",
      -9.6796875
    ],
    [
      "def first_digit(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return n % 10\n    return n % 9\n\nif __name__ == '__main__':\n    print(first_digit(123))\n    print(first_digit(-123))\n    print(first_digit(0))\n    print(first_digit(1))\n    print(first_digit(10))\n    print(first_digit(9))\n    print(first_digit(99))\n    print(first_digit(100))\n    print(first_digit(1000))\n    print(first_digit(1001))\n    print(first_digit(9999))\n    print(first_digit(9999999))\n    print(first_digit(99999999))\n    print(first_digit(999999999))\n    print(first_digit(9999999999))",
      -9.84375
    ],
    [
      "def firstDigit(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    return number / 10\n\n\nif __name__ == \"__main__\":\n    print(firstDigit(100))\n    print(firstDigit(101))\n    print(firstDigit(100000))\n    print(firstDigit(123456789))",
      -9.8671875
    ],
    [
      "def first_digit(number):\n    return int(number) % 10\n\ndef test():\n    assert first_digit(0) == 0\n    assert first_digit(123) == 1\n    assert first_digit(12345) == 2\n    assert first_digit(1234567) == 3\n    assert first_digit(12345678) == 4\n    assert first_digit(123456789) == 5\n    assert first_digit(1234567891) == 6\n    assert first_digit(12345678912) == 7\n    assert first_digit(123456789123) == 8\n    assert first_digit(12345678912345) == 9\n    assert first_digit(123456789123456) == 0\n    assert first_digit(1234567891234567) == 0\n    assert first_digit(12345678912345678) == 0\n    assert first_digit(123456789123456789) == 0\n\ntest()",
      -10.515625
    ],
    [
      "#!/usr/bin/env python\n\n# The first digit of a given number is the first digit of the number itself.\n# The second digit is the second digit of the number itself. The third digit is\n# the third digit of the number itself. The fourth digit is the fourth digit of\n# the number itself.\n#\n# The number of digits in the number is always even.\n#\n# Input:\n#   n = a number\n#\n# Output:\n#   the first digit of the number\n\ndef first_digit(n):\n    return n[0]\n\n# Test Cases\n\ntest_cases = [\n    [123, 1],\n    [12345, 2],\n    [1234567, 3],\n    [123456789, 4],\n    [12345678901, 5],\n    [1234567890123, 6],\n    [12345678901234, 7],\n    [123456789012345, 8],\n    [1234567890123456, 9],\n    [12345678901234567, 10],\n    [123456789012345678, 11],\n    [1234567890123456789, 12]\n]\n\nfor case in test_cases:\n    assert first_digit(case[0]) == case[1]",
      -10.96875
    ],
    [
      "def firstDigit(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    return num / 10\n\n\nif __name__ == '__main__':\n    print(firstDigit(123))\n    print(firstDigit(1234))\n    print(firstDigit(1234))\n    print(firstDigit(12345))",
      -11.109375
    ],
    [
      "def first_digit(num):\n    \"\"\"\n    Return the first digit of a given number.\n\n    >>> first_digit(123)\n    1\n    >>> first_digit(12345)\n    1\n    >>> first_digit(1234567)\n    7\n    >>> first_digit(123456789)\n    7\n    >>> first_digit(1234567890)\n    7\n    >>> first_digit(12345678901)\n    7\n    >>> first_digit(123456789012)\n    7\n    >>> first_digit(1234567890123)\n    7\n    >>> first_digit(12345678901234)\n    7\n    >>> first_digit(123456789012345)\n    7\n    >>> first_digit(1234567890123456)\n    7\n    >>> first_digit(12345678901234567)\n    7\n    >>> first_digit(123456789012345678)\n    7\n    >>> first_digit(1234567890123456789)\n    7\n    \"\"\"\n    return num % 10\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -11.1171875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def firstDigit(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if root.left:\n            return self.firstDigit(root.left)\n        if root.right:\n            return self.firstDigit(root.right)\n        return root.val % 10\n\n    def firstDigit_2(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if root.left:\n            return self.firstDigit(root.left)\n        if root.right:\n            return self.firstDigit(root.right)\n        return root.val / 10\n\nif __name__ == \"__main__\":\n    root = TreeNode(5)\n    root.left = TreeNode(4)\n    root.right = TreeNode(8)\n    root.left.left = TreeNode(3)\n    root.left.right = TreeNode(7)\n    root.left.left.left = TreeNode(2)\n    root.left.left.right = TreeNode(6)\n    root.left.right.left = TreeNode(9)\n    root.left.right.right = TreeNode(1)\n    root.right.left = TreeNode(0)\n    root.right.right = TreeNode(15)\n    root.right.left.left = TreeNode(13)\n    root.right.left.right = TreeNode(14)\n    root.right.right.left = TreeNode(12)\n    root.right.right.right = TreeNode(11)\n    print Solution().firstDigit(root)\n    print Solution().firstDigit_2(root)",
      -12.140625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}