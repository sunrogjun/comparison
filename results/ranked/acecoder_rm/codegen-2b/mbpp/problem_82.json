{
  "problem": {
    "task_id": "MBPP/93",
    "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
    "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
    "test_list": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ],
    "challenge_test_list": [],
    "problem_id": 82
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Example:\n    >>> power(2, 3)\n    8\n    >>> power(2, -3)\n    0.125\n    >>> power(2, 0)\n    1\n    >>> power(2, 1)\n    2\n    >>> power(2, -1)\n    0.5\n    >>> power(2, 5)\n    32\n    >>> power(2, -5)\n    0.25\n    >>> power(2, 10)\n    1024\n    >>> power(2, -10)\n    0.125\n    >>> power(2, 0)\n    1\n    >>> power(2, -1)\n    0.5\n    >>> power(2, -2)\n    0.25\n    \"\"\"\n    if b == 0:\n        return 1\n    if b < 0:\n        return a ** (-b)\n    else:\n        return a ** b\n\nif __name__ == \"__main__\":\n    assert power(2, 3) == 8, \"Failed\"\n    assert power(2, -3) == 0.125, \"Failed\"\n    assert power(2, 0) == 1, \"Failed\"\n    assert power(2, 1) == 2, \"Failed\"\n    assert power(2, -1) == 0.5, \"Failed\"\n    assert power(2, 5) == 32, \"Failed\"\n    assert power(2, -5) == 0.25, \"Failed\"\n    assert power(2, 10) == 1024, \"Failed\"\n    assert power(2, -10) == 0.125, \"Failed\"\n    assert power(2, 0) == 1, \"Failed\"\n    assert power(2, -1) == 0.5, \"Failed\"\n    assert power(2, -2) == 0.25, \"Failed\"",
      9.8671875
    ],
    [
      "def power(a, b):\n    \"\"\"\n    >>> power(2, 2)\n    4\n    >>> power(2, -2)\n    1\n    >>> power(2, 3)\n    8\n    >>> power(2, 0)\n    1\n    >>> power(2, -3)\n    1\n    >>> power(2, 3.5)\n    32.0625\n    >>> power(2, -3.5)\n    1\n    \"\"\"\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b < 0:\n        return 1 / power(a, -b)\n    return a ** b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      6.8671875
    ],
    [
      "def power(a, b):\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    return a ** b\n\n\n\nprint(power(3, 2))\n#>>> 9\nprint(power(3, -2))\n#>>> 3**-2\nprint(power(3, -1))\n#>>> 3\nprint(power(3, 0))\n#>>> 1\nprint(power(3, 1))\n#>>> 3\nprint(power(3, 2))\n#>>> 9\nprint(power(3, -2))\n#>>> 3**-2\nprint(power(3, -1))\n#>>> 3\nprint(power(3, 0))\n#>>> 1\nprint(power(3, 1))\n#>>> 3\nprint(power(3, 2))\n#>>> 9\nprint(power(3, -2))\n#>>> 3**-2\nprint(power(3, -1))\n#>>> 3\nprint(power(3, 0))\n#>>> 1\nprint(power(3, 1))\n#>>> 3\nprint(power(3, 2))\n#>>> 9\nprint(power(3, -2))\n#>>> 3**-2\nprint(power(3, -1))\n#>>> 3\nprint(power(3, 0))\n#>>> 1\nprint(power(3, 1))\n#>>> 3\nprint(power(3, 2))\n#>>> 9\nprint(power(3, -2))\n#>>> 3**-2\nprint(power(3, -1))\n#>>> 3\nprint(power(3, 0))\n#>>> 1\nprint(power(3, 1))\n#>>> 3\nprint(power(3, 2))\n#>>> 9\nprint(power(3, -2))\n#>>> 3**-2\nprint(power(3, -1))\n#>>> 3\nprint(power(3, 0))\n#>>> 1\nprint(power(3, 1))\n#>>> 3\nprint(power(3, 2))\n#>>> 9\nprint(power(3, -2))\n#>>> 3**-2\nprint(power(3, -1))\n#>>> 3\nprint(power(3, 0))",
      5.78515625
    ],
    [
      "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    return a ** b\n\n\ndef main():\n    \"\"\"\n    Write a program that prompts the user to enter two integers and returns the value of the first\n    integer to the power of the second integer.\n    \"\"\"\n    a = int(input('Enter the first integer: '))\n    b = int(input('Enter the second integer: '))\n    print('The value is: {}'.format(power(a, b)))\n\nif __name__ == '__main__':\n    main()",
      3.71484375
    ],
    [
      "class Solution:\n    # @param {integer} a\n    # @param {integer} b\n    # @return {integer}\n    def pow(self, a, b):\n        return int(a ** b)\n\n    # @param {integer} a\n    # @param {integer} b\n    # @return {integer}\n    def pow_2(self, a, b):\n        return int(a ** b)\n\n    # @param {integer} a\n    # @param {integer} b\n    # @return {integer}\n    def pow_3(self, a, b):\n        return int(a ** b)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.pow(2, 3))\n    print(s.pow_2(2, 3))\n    print(s.pow_3(2, 3))",
      3.16796875
    ],
    [
      "def power(a, b):\n    if a == 0:\n        return 1\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1 / power(a, -b)\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a * a, b // 2)\n    else:\n        return power(a * a, b - 1) / a\n\nif __name__ == '__main__':\n    print(power(2, 3))\n    print(power(2, -1))\n    print(power(2, 0))\n    print(power(2, 1))\n    print(power(2, 2))\n    print(power(2, 3))\n    print(power(2, 5))\n    print(power(2, 6))\n    print(power(2, 7))\n    print(power(2, 8))\n    print(power(2, 9))\n    print(power(2, 10))\n    print(power(2, -1))\n    print(power(2, -2))\n    print(power(2, -3))\n    print(power(2, -4))\n    print(power(2, -5))\n    print(power(2, -6))\n    print(power(2, -7))\n    print(power(2, -8))\n    print(power(2, -9))\n    print(power(2, -10))",
      2.66015625
    ],
    [
      "# Example 1:\n# Input:\n# a = 5, b = 2\n# Output: 25\n# Explanation:\n# To raise 5 to the 2: 5^2 = 25\n\n# Example 2:\n# Input:\n# a = 2, b = 3\n# Output: 8\n# Explanation:\n# To raise 2 to the 3: 2^3 = 8\n\n# Example 3:\n# Input:\n# a = 2, b = 0\n# Output: 1\n# Explanation:\n# To raise 2 to the 0: 2^0 = 1\n\n# Note:\n# - a is a non-negative integer, which won't exceed 10^9.\n# - b is a non-negative integer, which won't exceed 10^9.\n\n\nclass Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ans = 1\n        while b > 0:\n            ans *= a\n            b -= 1\n        return ans",
      2.484375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    For given a and b, return the result of 'a' to the power of 'b'.\n    \"\"\"\n    return a ** b\n\nif __name__ == \"__main__\":\n    print power(2, 3)\n    print power(2, -3)\n    print power(2, 0)\n    print power(2, 1)\n    print power(2, -1)\n    print power(2, -2)\n    print power(2, -3)\n    print power(2, -4)\n    print power(2, -5)\n    print power(2, -6)\n    print power(2, -7)\n    print power(2, -8)\n    print power(2, -9)\n    print power(2, -10)\n    print power(2, -11)\n    print power(2, -12)\n    print power(2, -13)\n    print power(2, -14)\n    print power(2, -15)\n    print power(2, -16)\n    print power(2, -17)\n    print power(2, -18)\n    print power(2, -19)\n    print power(2, -20)\n    print power(2, -21)\n    print power(2, -22)\n    print power(2, -23)\n    print power(2, -24)\n    print power(2, -25)\n    print power(2, -26)\n    print power(2, -27)\n    print power(2, -28)\n    print power(2, -29)\n    print power(2, -30)\n    print power(2, -31)\n    print power(2, -32)\n    print power(2, -33)\n    print power(2, -34)\n    print power(2, -35)\n    print power(2, -36)\n    print power(2, -37)\n    print power(2, -38)\n    print power(2, -39)\n    print power(2, -40)\n    print power(2, -41)\n    print power(2, -42)",
      2.416015625
    ],
    [
      "def power(a, b):\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a * a, b / 2)\n    else:\n        return a * power(a * a, (b - 1) / 2)\n\n#Test cases\nprint power(2, 2)\nprint power(2, 3)\nprint power(2, 4)\nprint power(2, 5)\nprint power(2, 6)\nprint power(2, 7)\nprint power(2, 8)\nprint power(2, 9)\nprint power(2, 10)\nprint power(2, 11)\nprint power(2, 12)\nprint power(2, 13)\nprint power(2, 14)\nprint power(2, 15)\nprint power(2, 16)\nprint power(2, 17)\nprint power(2, 18)\nprint power(2, 19)\nprint power(2, 20)\nprint power(2, 21)\nprint power(2, 22)\nprint power(2, 23)\nprint power(2, 24)\nprint power(2, 25)\nprint power(2, 26)\nprint power(2, 27)\nprint power(2, 28)\nprint power(2, 29)\nprint power(2, 30)\nprint power(2, 31)\nprint power(2, 32)\nprint power(2, 33)\nprint power(2, 34)\nprint power(2, 35)\nprint power(2, 36)\nprint power(2, 37)\nprint power(2, 38)\nprint power(2, 39)\nprint power(2, 40)\nprint power(2, 41)\nprint power(2, 42)\nprint power(2, 43)\nprint power(2, 44)\nprint power(2, 45)\nprint power(2, 46)\nprint power(2, 47)\nprint power(2, 48)\nprint power(2, 49)\nprint power(2, 50)\nprint power(2, 51)\nprint power(2, 52)\nprint power(2, 53)\nprint power(2, 54)\nprint power(2, 55)",
      2.056640625
    ],
    [
      "def pow(a, b):\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == 2:\n        return a * a\n    if b == 3:\n        return a * a * a\n    if b % 2 == 0:\n        return pow(a, b / 2) * pow(a, b / 2)\n    else:\n        return pow(a, (b - 1) / 2) * pow(a, (b - 1) / 2) * a\n\nprint(pow(3, 4))\nprint(pow(3, 3))\nprint(pow(3, 2))\nprint(pow(3, 1))\nprint(pow(3, 0))\nprint(pow(3, -1))\nprint(pow(3, -2))\nprint(pow(3, -3))\nprint(pow(3, -4))",
      2.02734375
    ],
    [
      "def power(a, b):\n    if b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a ** b\n\nprint(power(2, 2))\n#>>> 2\nprint(power(2, 3))\n#>>> 4\nprint(power(2, -1))\n#>>> 1\nprint(power(2, -2))\n#>>> 0.5\nprint(power(2, -3))\n#>>> 0.25\nprint(power(2, 0))\n#>>> 1\nprint(power(2, 0.5))\n#>>> 2\nprint(power(2, -0.5))\n#>>> 0.5\nprint(power(2, 0))\n#>>> 1\nprint(power(2, 0.5))\n#>>> 2\nprint(power(2, -0.5))\n#>>> 0.5",
      1.9423828125
    ],
    [
      "# from python cookbook\n\ndef pow(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1 / pow(-b, a)\n    ans = 1\n    while b:\n        if b & 1:\n            ans *= a\n        a *= a\n        b >>= 1\n    return ans\n\nif __name__ == '__main__':\n    print pow(2, 3)\n    print pow(3, 1)\n    print pow(3, -1)\n    print pow(3, 0)\n    print pow(3, 2)\n    print pow(3, -2)\n    print pow(3, -3)\n    print pow(3, 4)\n    print pow(3, -4)\n    print pow(3, 5)\n    print pow(3, -5)\n    print pow(3, 6)\n    print pow(3, -6)\n    print pow(3, 7)\n    print pow(3, -7)\n    print pow(3, 8)\n    print pow(3, -8)",
      1.8056640625
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    # 1.a^b = 1\n    if b == 0:\n        return 1\n    # 2.a^b = a\n    if b < 0:\n        return 1\n    # 3.a^b = a^(b-1)\n    if b == 1:\n        return a\n    # 4.a^b = a^b * a\n    return a ** b\n\nif __name__ == \"__main__\":\n    print(power(2, 1))\n    print(power(3, 1))\n    print(power(3, 2))\n    print(power(4, 1))\n    print(power(4, 2))\n    print(power(4, 3))\n    print(power(4, 4))\n    print(power(5, 1))\n    print(power(5, 2))\n    print(power(5, 3))\n    print(power(5, 4))\n    print(power(5, 5))\n    print(power(5, 6))\n    print(power(5, 7))\n    print(power(5, 8))\n    print(power(5, 9))\n    print(power(5, 10))",
      1.4365234375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)\n\nif __name__ == '__main__':\n    print(power(3, 2))\n    print(power(2, 3))",
      1.28125
    ],
    [
      "# Function to calculate 'a' to the power of 'b'\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b - 1)\n\n# Test Cases\n\n# Input\na = int(input())\nb = int(input())\n\n# Output\nprint(power(a, b))",
      1.16015625
    ],
    [
      "# https://www.hackerrank.com/challenges/power-of-a-number/problem\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a ** b\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n    print(power(a, b))",
      1.158203125
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    if b < 0:\n        a = 1 / a\n        b = -b\n    result = 1\n    while b:\n        if b % 2:\n            result *= a\n        a *= a\n        b /= 2\n    return result\n\n\nif __name__ == \"__main__\":\n    print(power(2, 3))\n    print(power(2, -3))",
      1.0576171875
    ],
    [
      "# https://www.hackerrank.com/challenges/power-of-two/problem\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a ** b\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = int(input())\n    b = int(input())\n    ans = power(a, b)\n    print(ans)",
      0.828125
    ],
    [
      "class Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        # TODO: the following method is not correct,\n        # since the input is an integer number\n        # instead of a float number, we should use a float number\n        # to avoid the overflow problem\n        return pow(a, b)\n\n\nif __name__ == '__main__':\n    print Solution().pow(2, 1)",
      0.439697265625
    ],
    [
      "# https://oj.leetcode.com/problems/power-of-two/\nclass Solution:\n    # @param {integer} n\n    # @return {integer}\n    def power(self, n):\n        # Write your code here\n        if n == 0:\n            return 1\n        elif n == 1:\n            return n\n        elif n == 2:\n            return n\n        elif n < 0:\n            return 1 / self.power(-n)\n        else:\n            return self.power(n / 2) * self.power(n / 2)\n\ns = Solution()\nprint(s.power(2))\nprint(s.power(3))",
      0.138671875
    ],
    [
      "def pow(a, b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == 2:\n        return a * a\n    else:\n        return pow(a, b - 1) * a\n\ndef test():\n    assert(pow(3, 2) == 9)\n    assert(pow(3, 3) == 27)\n    assert(pow(3, 4) == 243)\n    assert(pow(3, 5) == 3270)\n\nif __name__ == \"__main__\":\n    test()",
      0.1297607421875
    ],
    [
      "def power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b - 1)\n\ndef main():\n    print(\"Enter a and b: \")\n    a = int(input())\n    b = int(input())\n    print(\"The value of a to the power of b is: {}\".format(power(a, b)))\n\nif __name__ == \"__main__\":\n    main()",
      0.07684326171875
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1 / power(a, -b)\n    if b == 1:\n        return a\n    if b == 2:\n        return a * a\n    if b % 2 == 0:\n        return power(a, b / 2) * power(a, b / 2)\n    else:\n        return a * power(a, b / 2) * power(a, b / 2)\n\nif __name__ == '__main__':\n    print(power(2, 3))",
      0.01776123046875
    ],
    [
      "# Your function will be called like this:\n# num = power(a, b)\n# For example, if a is 1 and b is 2, your function should return 4.\n\ndef power(a, b):\n    # write your code here\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(power(a, b))",
      -0.09161376953125
    ],
    [
      "class Solution:\n    # @param a, a number\n    # @param b, a positive integer\n    # @return an integer\n    def pow(self, a, b):\n        if b == 0:\n            return 1\n        if b % 2 == 0:\n            return self.pow(a, b/2) * self.pow(a, b/2)\n        else:\n            return a * self.pow(a, b/2) * self.pow(a, b/2)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.pow(2, 3))\n    print(sol.pow(2, -3))\n    print(sol.pow(2, 0))",
      -0.2376708984375
    ],
    [
      "# https://www.hackerrank.com/challenges/power-calculator/problem\n\ndef power(a, b):\n    if a == 0:\n        return 0\n    if a == 1:\n        return 1\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == 2:\n        return a * a\n    if b == 3:\n        return a * a * a\n    if b == 4:\n        return a * a * a * a\n    if b == 5:\n        return a * a * a * a * a\n    if b == 6:\n        return a * a * a * a * a * a\n    if b == 7:\n        return a * a * a * a * a * a * a\n    if b == 8:\n        return a * a * a * a * a * a * a * a\n    if b == 9:\n        return a * a * a * a * a * a * a * a * a\n    if b == 10:\n        return a * a * a * a * a * a * a * a * a * a\n    return a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\n# Test cases\n\na = int(input())\nb = int(input())\nprint(power(a, b))",
      -0.2646484375
    ],
    [
      "# https://oj.leetcode.com/problems/power-of-n/\n\nclass Solution:\n    # @param a, a positive integer\n    # @param b, a positive integer\n    # @return an integer\n    def power(self, a, b):\n        if b < 0:\n            return 1\n        if b == 0:\n            return 1\n        if a == 0:\n            return 1\n        if b == 1:\n            return a\n        if b % 2 == 0:\n            return self.power(a, b / 2) * self.power(a, b / 2)\n        else:\n            return self.power(a, (b - 1) / 2) * self.power(a, (b - 1) / 2) * a\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.power(2, 2)\n    print s.power(3, 1)\n    print s.power(3, -1)\n    print s.power(3, -2)\n    print s.power(3, -3)\n    print s.power(3, -4)\n    print s.power(3, -5)\n    print s.power(3, -6)\n    print s.power(3, -7)",
      -0.53564453125
    ],
    [
      "from collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y'])\n\n\nclass Solution(object):\n    def pow(self, x, n):\n        \"\"\"\n        :type x: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n\n        if n < 0:\n            return 1 / self.pow(x, -n)\n\n        if n == 1:\n            return x\n\n        if n % 2 == 0:\n            return self.pow(x * x, n / 2)\n\n        return self.pow(x * x, n / 2) * x\n\n\nif __name__ == '__main__':\n    p = Solution()\n    print(p.pow(2, 3))",
      -0.6083984375
    ],
    [
      "import math\n\ndef pow(a, b):\n    return math.pow(a, b)\n\nprint pow(2, 3)",
      -0.85595703125
    ],
    [
      "class Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        return a ** b\n\ns = Solution()\nprint s.pow(2, 2)",
      -0.85595703125
    ],
    [
      "from math import sqrt\n\n\ndef power(a, b):\n    if b < 0:\n        return 1\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a * a, b / 2)\n    else:\n        return a * power(a * a, (b - 1) / 2)\n\n\nif __name__ == '__main__':\n    print(power(10, 2))\n    print(power(10, 3))",
      -0.85595703125
    ],
    [
      "from math import pow\n\n\ndef pow_to_value(a, b):\n    return pow(a, b)\n\n\nif __name__ == '__main__':\n    assert pow_to_value(2, 3) == 8\n    assert pow_to_value(2, -3) == 0.125",
      -0.85693359375
    ],
    [
      "import math\n\ndef power(a, b):\n    return math.pow(a, b)\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(power(a, b))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "import math\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    return math.pow(a, b)\n\nif __name__ == '__main__':\n    a = int(input('Enter a: '))\n    b = int(input('Enter b: '))\n    print(power(a, b))",
      -0.85693359375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result\n\nif __name__ == '__main__':\n    print power(2, 3)",
      -0.85693359375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a, b / 2) * a\n    else:\n        return a * power(a, (b - 1) / 2)\n\nif __name__ == '__main__':\n    print power(2, 7)",
      -0.85693359375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    return a ** b\n\nif __name__ == '__main__':\n    print(power(2, 3))",
      -0.85693359375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return a ** b",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ans = 1\n        while b > 0:\n            ans = ans * a\n            b -= 1\n        return ans\n\nif __name__ == \"__main__\":\n    print Solution().pow(2, 3)",
      -0.85791015625
    ],
    [
      "# Complete the function below.\ndef power(a, b):\n    return",
      -0.85791015625
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return pow(a, b)\n\nif __name__ == \"__main__\":\n    print(power(2, 3))",
      -0.85791015625
    ],
    [
      "# https://leetcode.com/problems/power-of-n/discuss/3654/Java-with-explanation-using-recursion\nclass Solution(object):\n    def power(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if b == 0:\n            return 1\n        if b == 1:\n            return a\n        return self.power(a * a, b - 1) * a\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.power(10, 6))",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0:\n            return 1\n        if b == 0:\n            return 1\n        if b % 2 == 0:\n            return self.pow(a, b / 2) * self.pow(a, b / 2)\n        else:\n            return self.pow(a, b / 2) * self.pow(a, b / 2 + 1)\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.pow(1, 2)\n    print s.pow(1, 3)",
      -0.85791015625
    ],
    [
      "def power(a, b):\n    # write your code here\n    result = 1\n    while b:\n        if b % 2 == 1:\n            result = result * a\n        b = b / 2\n        a = a * a\n    return result\n\n\ndef main():\n    print(power(2, 3))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a * a, b / 2)\n    else:\n        return power(a * a, b / 2) * a\n\nif __name__ == '__main__':\n    print(power(2, 4))\n    print(power(2, 0))\n    print(power(2, -4))\n    print(power(2, -5))\n    print(power(2, -6))\n    print(power(2, 7))\n    print(power(2, 8))\n    print(power(2, 9))",
      -0.85791015625
    ],
    [
      "def power(a, b):\n    return a ** b\n\nprint(power(3, 2))",
      -0.85791015625
    ],
    [
      "def power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a ** b\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    print(\"The result is: %d\" % power(a, b))",
      -0.85791015625
    ],
    [
      "def power(a, b):\n    return a ** b\n\nif __name__ == \"__main__\":\n    print(power(2, 3))",
      -0.85791015625
    ],
    [
      "def pow(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return pow(a, b/2) * pow(a, b/2)\n    return pow(a, b/2) * pow(a, b/2) * pow(a, (b-1)/2)\n\n# Your pow function will be called like this:\n# x = pow(2, 3)\n# y = pow(x, 5)",
      -0.85791015625
    ],
    [
      "# Write a function to calculate the value of 'a' to the power 'b'.\n\ndef power(a, b):\n    # Write your code here\n    return 1\n    \nif __name__ == '__main__':\n    print power(2, 3)",
      -0.85791015625
    ],
    [
      "# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# @param {number} a\n# @param {number} b\n# @return {number}\ndef pow(a, b):\n    if b == 0:\n        return 1\n\n    if b % 2 == 0:\n        return pow(a, b/2) * pow(a, b/2)\n    else:\n        return a * pow(a, b/2) * pow(a, (b-1)/2)\n\nif __name__ == '__main__':\n    print pow(3, 2)",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef pow(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    else:\n        return a * pow(a, b - 1)\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(pow(a, b))",
      -0.8583984375
    ],
    [
      "def pow(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a**b % 10\n\n\nif __name__ == \"__main__\":\n    print pow(2, 3)\n    print pow(2, -3)\n    print pow(10, 5)",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if b == 0:\n            return 1\n        if b == 1:\n            return a\n        if b % 2 == 0:\n            return self.pow(a, b/2) * self.pow(a, b/2)\n        else:\n            return a * self.pow(a, b/2) * self.pow(a, b/2) * self.pow(a, b/2)",
      -0.8583984375
    ],
    [
      "# TODO:\n# - add test cases\n# - write a better way to solve this problem\n\ndef pow(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    if b % 2 == 0:\n        return pow(a, b / 2) * pow(a, b / 2)\n    else:\n        return pow(a, b / 2) * pow(a, (b - 1) / 2) * a\n\n\ndef main():\n    print pow(2, 3)\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    return a ** b\n\nif __name__ == \"__main__\":\n    assert 3 ** 2 == 9\n    assert 2 ** 3 == 16\n    assert 2 ** 2 == 4\n    assert 5 ** 3 == 125\n    assert 5 ** 2 == 25\n    assert 7 ** 3 == 49\n    assert 7 ** 2 == 14\n    assert 9 ** 3 == 243\n    assert 9 ** 2 == 64",
      -0.8583984375
    ],
    [
      "def power(a, b):\n    return a ** b\n\n\nif __name__ == '__main__':\n    assert(power(2, 3) == 8)",
      -0.8583984375
    ],
    [
      "import math\n\ndef power(a, b):\n    return math.pow(a, b)\n\nprint(power(2, 3))",
      -0.8583984375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == 2:\n        return a*a\n    return power(a*a, b-2) + a*power(a, b-1)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(power(3, 2))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def pow(a, b):\n    return a ** b\n\n\ndef main():\n    print pow(3, 3)\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def power(a, b):\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        b = b - 1\n        a *= a\n    return result\n\ndef main():\n    a = int(input(\"Enter the number: \"))\n    b = int(input(\"Enter the exponent: \"))\n    print(power(a, b))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "from math import pow\n\n\ndef power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    return pow(a, b)\n\n\nif __name__ == '__main__':\n    print(power(3, 2))\n    print(power(3, 3))",
      -0.85888671875
    ],
    [
      "import math\n\ndef pow(a, b):\n    \"\"\"\n    Calculate the value of a to the power of b.\n\n    :param a: the base\n    :param b: the exponent\n    :return: the value\n    \"\"\"\n    return math.pow(a, b)\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    a = int(input(\"Enter the base: \"))\n    b = int(input(\"Enter the exponent: \"))\n    print(pow(a, b))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def power(a, b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a ** b\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(power(a, b))",
      -0.85888671875
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n\nprint power(2, 3)",
      -0.86083984375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    return power(a, b/2) * power(a, b%2)",
      -0.9912109375
    ],
    [
      "#!/usr/bin/env python\n\ndef pow(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a**b\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(pow(a, b))",
      -0.99169921875
    ],
    [
      "def power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a ** b\n\ndef main():\n    a = input(\"Enter the value of a: \")\n    b = input(\"Enter the value of b: \")\n    print(\"The result is: \", power(a, b))\n\nif __name__ == '__main__':\n    main()",
      -1.0859375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    >>> power(3, 2)\n    9\n    >>> power(3, -2)\n    1\n    >>> power(3, 0)\n    3\n    >>> power(3, 1)\n    3\n    >>> power(3, -1)\n    1\n    \"\"\"\n\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b < 0:\n        return 1 / a ** (-b)\n    return a ** b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.0869140625
    ],
    [
      "# from functools import reduce\n\ndef power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\nif __name__ == '__main__':\n    print(power(2, 3))\n    print(power(2, 3))\n    print(power(2, -3))\n    print(power(2, -3))\n    print(power(2, -1))\n    print(power(2, -1))\n    print(power(2, 1))\n    print(power(2, 1))\n    print(power(2, 0))\n    print(power(2, 0))\n    print(power(2, -1))\n    print(power(2, -1))\n    print(power(2, -2))\n    print(power(2, -2))\n    print(power(2, -3))\n    print(power(2, -3))\n    print(power(2, -4))\n    print(power(2, -4))\n    print(power(2, -5))\n    print(power(2, -5))\n    print(power(2, -6))\n    print(power(2, -6))\n    print(power(2, -7))\n    print(power(2, -7))\n    print(power(2, -8))\n    print(power(2, -8))\n    print(power(2, -9))\n    print(power(2, -9))\n    print(power(2, -10))\n    print(power(2, -10))\n    print(power(2, -11))\n    print(power(2, -11))\n    print(power(2, -12))\n    print(power(2, -12))\n    print(power(2, -13))\n    print(power(2, -13))\n    print(power(2, -14))\n    print(power(2, -14))\n    print(power(2, -15))\n    print(power(2, -15",
      -1.08984375
    ],
    [
      "import math\n\ndef pow(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n\n    Example:\n    Input: a = 5, b = 2\n    Output: 25\n    Explanation:\n    pow(5, 2) = 25\n    \"\"\"\n    if b == 0:\n        return 1\n    return a ** b\n\n# Your Pow function will be called like this:\n# def my_func(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n# def pow(a, b):\n#",
      -1.146484375
    ],
    [
      "# Calculate the value of a to the power of b\n# Input: a = 5, b = 3\n# Output: 5^3 = 125\n# Expected: 125\ndef power(a, b):\n    return a ** b\n\n# Test Cases:\n# a = 5, b = 3\n# Output: 125\n# Expected: 125\n# a = 5, b = -3\n# Output: 1\n# Expected: 1\n# a = 5, b = 0\n# Output: 1\n# Expected: 1\n# a = 5, b = -2\n# Output: 0\n# Expected: 0\n# a = 0, b = 2\n# Output: 0\n# Expected: 0\n# a = 1, b = 2\n# Output: 1\n# Expected: 1\n# a = 1, b = -2\n# Output: 0\n# Expected: 0\n# a = 2, b = 2\n# Output: 4\n# Expected: 4\n# a = 2, b = -2\n# Output: 0\n# Expected: 0\n# a = -2, b = 2\n# Output: -4\n# Expected: -4\n# a = -2, b = -2\n# Output: 0\n# Expected: 0\n# a = -2, b = 0\n# Output: 1\n# Expected: 1\n# a = -2, b = -2\n# Output: -1\n# Expected: -1\n# a = -2, b = -3\n# Output: 0\n# Expected: 0",
      -1.7314453125
    ],
    [
      "def power(a, b):\n    if b == 0:\n        return 1\n    return a ** b\n\nprint(power(2, 2))\n#>>> 4\nprint(power(3, 2))\n#>>> 9\nprint(power(2, 3))\n#>>> 8\nprint(power(2, -2))\n#>>> 1\nprint(power(2, -3))\n#>>> 4\nprint(power(2, -4))\n#>>> 1\nprint(power(2, -5))\n#>>> 1\nprint(power(2, -6))\n#>>> 1\nprint(power(2, -7))\n#>>> 1\nprint(power(2, -8))\n#>>> 1\nprint(power(2, -9))\n#>>> 1\nprint(power(2, -10))\n#>>> 1",
      -1.896484375
    ],
    [
      "import math\n\ndef power(a, b):\n    \"\"\"\n    For a = 1, b = 1, the result is 1.\n    For a = 1, b = 0, the result is 1.\n    For a = 2, b = 0, the result is 2.\n    For a = 2, b = 1, the result is 2.\n    For a = 2, b = -1, the result is 0.\n    For a = -1, b = 1, the result is 0.\n    For a = -1, b = -1, the result is -1.\n    For a = -1, b = 0, the result is -1.\n    For a = -1, b = 1, the result is -1.\n    For a = -1, b = -1, the result is -1.\n    For a = -2, b = 0, the result is -2.\n    For a = -2, b = 1, the result is -2.\n    For a = -2, b = -1, the result is -1.\n    For a = -2, b = 0, the result is -2.\n    For a = -2, b = 1, the result is -2.\n    For a = -2, b = -1, the result is -1.\n    For a = -2, b = 0, the result is -2.\n    For a = -2, b = 1, the result is -2.\n    For a = -2, b = -1, the result is -1.\n    For a = -2, b = 0, the result is -2.\n    For a = -2, b = 1, the result is -2.\n    For a = -2, b = -1, the result is -1.\n    For a = -2, b = 0, the result is -2.\n    For a = -2, b = 1, the result is -2.\n    For a = -2, b = -1, the result is -1.\n    For a = -2, b = 0, the result is -2.\n    For a = -2, b = 1, the result is -2.\n    For a = -2, b = -1, the",
      -1.921875
    ],
    [
      "# First, define the function.\ndef power(a, b):\n    '''\n    The value of a^b is calculated.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result = result * a\n        a = a * a\n        b = b - 1\n    return result\n\n# Test it.\nassert(power(2, 4) == 16)\nassert(power(2, 0) == 1)\nassert(power(2, -1) == 1)\nassert(power(2, -2) == 1)\nassert(power(2, -3) == 1)\nassert(power(2, -4) == 1)\nassert(power(2, -5) == 1)\nassert(power(2, -6) == 1)\nassert(power(2, -7) == 1)\nassert(power(2, -8) == 1)\nassert(power(2, -9) == 1)\nassert(power(2, -10) == 1)\nassert(power(2, -11) == 1)\nassert(power(2, -12) == 1)\nassert(power(2, -13) == 1)\nassert(power(2, -14) == 1)\nassert(power(2, -15) == 1)\nassert(power(2, -16) == 1)\nassert(power(2, -17) == 1)\nassert(power(2, -18) == 1)\nassert(power(2, -19) == 1)\nassert(power(2, -20) == 1)\nassert(power(2, -21) == 1)\nassert(power(2, -22) == 1)\nassert(power(2, -23) == 1)\nassert(power(2, -24) == 1)\nassert(power(2, -25) == 1)\nassert(power(2, -26) == 1)\nassert(power(2, -27) == 1)\nassert(power(2, -28) == 1)\nassert(power(2, -29) == 1)\nassert(power(2, -30) == 1)\nassert(power(2, -31) ==",
      -2.03125
    ],
    [
      "class Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if b == 0:\n            return 1\n        elif b == 1:\n            return a\n        elif b % 2 == 0:\n            return self.pow(a, b / 2) * self.pow(a, b / 2)\n        else:\n            return self.pow(a, b / 2) * self.pow(a, b / 2) * self.pow(a, b - 2)\n\n# Note:\n# 1. b is even, then a^b = a^(b/2) * a^(b/2)\n# 2. b is odd, then a^b = a^(b/2) * a^(b/2) * a^(b-2)",
      -2.04296875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def pow(self, root, exp):\n        \"\"\"\n        :type root: TreeNode\n        :type exp: int\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 1\n        if exp == 0:\n            return 1\n        if exp % 2 == 0:\n            return self.pow(root.left, exp/2) * self.pow(root.right, exp/2)\n        else:\n            return self.pow(root.left, exp/2) * self.pow(root.right, exp/2) * self.pow(root.left, exp%2) * self.pow(root.right, exp%2)\n\nif __name__ == \"__main__\":\n    root = TreeNode(val=1, left=TreeNode(val=2, left=None, right=TreeNode(val=3)), right=TreeNode(val=4))\n    s = Solution()\n    print(s.pow(root, 2))",
      -2.056640625
    ],
    [
      "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#\n# Written by Evan Jones, 2013\n#\n\n#\n# Problem\n#\n# Given two integers a and b, calculate the value of a^b.\n#\n#\n# Example\n#\n# Input: a = 2, b = 3\n# Output: 8\n#\n#\n#\n# Constraints\n#\n# 1 <= a <= 100\n# 1 <= b <= 100\n#\n#\n# Analysis\n#\n# Time complexity: O(log(a+b))\n# Space complexity: O(1)\n#\n#\n# Notes\n#\n# If a or b is 0, then the result is 1.\n#\n#\n# Follow up\n#\n# Could you solve it without using any loop or recursion?\n#\n#\n\nimport math\n\n#\n# My (slow) solution\n#\n# def pow(a, b):\n#   return math.pow(a, b)\n#\n#\n# Time complexity: O(log(a+b))\n# Space complexity: O(1)\n#\n#\n# Analysis\n#\n# Time complexity: O(log(a+b))\n# Space complexity: O(1)\n#\n#\n# My (slow) solution\n#\n# def pow(a, b):\n#   if a == 0:\n#     return 1\n#   return a ** b\n#\n#\n# Time complexity: O(log(a+b))\n# Space complexity: O(1)\n#\n#\n# Analysis\n#\n# Time complexity: O(log(a+b))\n# Space complexity: O(1)\n#\n#\n# My (fast) solution\n#\n# def pow(a, b):\n#   return math.pow(a, b)\n#\n#\n# Time complexity: O(log(a+b))\n# Space complexity: O(1)\n#\n#\n# Analysis\n#\n# Time complexity: O(log(a+b))\n# Space complexity: O(1)\n#\n#\n# My (fast) solution\n#\n# def pow(a, b):\n#   if a == 0:",
      -2.259765625
    ],
    [
      "# Note:\n# b = 0, a = 1, a^0 = 1\n# b = 1, a = 2, a^1 = 4\n# b = 2, a = 3, a^2 = 9\n# b = 3, a = 4, a^3 = 16\n# b = 4, a = 5, a^4 = 25\n# b = 5, a = 6, a^5 = 36\n# b = 6, a = 7, a^6 = 49\n# b = 7, a = 8, a^7 = 64\n# b = 8, a = 9, a^8 = 81\n\n# O(N^2)\n# O(N)\ndef pow(a, b):\n    if b == 0:\n        return 1\n    return a ** b\n\n# O(N^2)\n# O(N)\ndef pow_rec(a, b):\n    if b == 0:\n        return 1\n    return pow_rec(a, b - 1) * a\n\n# O(N^2)\n# O(N)\ndef pow_iter(a, b):\n    if b == 0:\n        return 1\n    return pow_iter(a, b - 1) * a\n\nif __name__ == \"__main__\":\n    a = int(input(\"Please enter a number: \"))\n    b = int(input(\"Please enter a number: \"))\n    print(\"The value of a^b is: \", pow_rec(a, b))\n    print(\"The value of a^b is: \", pow_iter(a, b))",
      -2.271484375
    ],
    [
      "# https://www.hackerrank.com/challenges/power-of-numbers/problem\n\ndef power(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if b == 0:\n        return 1\n    return a ** b\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (1, 1),\n        (2, 1),\n        (3, 2),\n        (4, 2),\n        (5, 3),\n        (6, 3),\n        (7, 4),\n        (8, 4),\n        (9, 5),\n        (10, 5),\n        (11, 6),\n        (12, 6),\n        (13, 7),\n        (14, 7),\n        (15, 8),\n        (16, 8),\n        (17, 9),\n        (18, 9),\n        (19, 10),\n        (20, 10),\n        (21, 11),\n        (22, 11),\n        (23, 12),\n        (24, 12),\n        (25, 13),\n        (26, 13),\n        (27, 14),\n        (28, 14),\n        (29, 15),\n        (30, 15),\n        (31, 16),\n        (32, 16),\n        (33, 17),\n        (34, 17),\n        (35, 18),\n        (36, 18),\n        (37, 19),\n        (38, 19),\n        (39, 20),\n        (40, 20),\n        (41, 21),\n        (42, 21),\n        (43, 22),\n        (44, 22),\n        (45, 23),\n        (46, 23),\n        (47, 24),\n        (48, 24),\n        (49, 25),\n        (50, 25),\n        (51, 26),\n        (52, 26),\n        (53, 27),\n        (54, 27),\n        (55, 28),\n        (56, 28),\n        (57, 29),\n        (58, 29),\n        (59, 30),\n        (60",
      -3.6015625
    ],
    [
      "# https://leetcode.com/problems/power-of-n/\n# https://leetcode.com/problems/power-of-n-ii/\n# https://leetcode.com/problems/power-of-n-iii/\n# https://leetcode.com/problems/power-of-n-iv/\n# https://leetcode.com/problems/power-of-n-v/\n# https://leetcode.com/problems/power-of-n-vi/\n# https://leetcode.com/problems/power-of-n-vii/\n# https://leetcode.com/problems/power-of-n-viii/\n# https://leetcode.com/problems/power-of-n-ix/\n# https://leetcode.com/problems/power-of-n-x/\n# https://leetcode.com/problems/power-of-n-xx/\n# https://leetcode.com/problems/power-of-n-xxx/\n# https://leetcode.com/problems/power-of-n-b-1/\n# https://leetcode.com/problems/power-of-n-b-2/\n# https://leetcode.com/problems/power-of-n-b-3/\n# https://leetcode.com/problems/power-of-n-b-4/\n# https://leetcode.com/problems/power-of-n-b-5/\n# https://leetcode.com/problems/power-of-n-b-6/\n# https://leetcode.com/problems/power-of-n-b-7/\n# https://leetcode.com/problems/power-of-n-b-8/\n# https://leetcode.com/problems/power-of-n-b-9/\n# https://leetcode.com/problems/power-of-n-b-10/\n# https://leetcode.com/problems/power-of-n-b-11/\n# https://leetcode",
      -4.0234375
    ],
    [
      "# https://www.hackerrank.com/challenges/power-calculator/problem\n\n# @param {integer} a\n# @param {integer} b\n# @return {integer}\ndef power(a, b):\n    # base case\n    if b == 0:\n        return 1\n\n    # recursive case\n    return power(a, b - 1) * a\n\nif __name__ == \"__main__\":\n    for i in range(int(raw_input())):\n        a = int(raw_input())\n        b = int(raw_input())\n        print power(a, b)",
      -4.18359375
    ],
    [
      "# https://www.hackerrank.com/challenges/power-of-numbers\n\ndef power(n, p):\n    return (n ** p) % 1000000007\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    n = int(input())\n    p = int(input())\n    if (p > n) or (p < 0):\n        print(\"0\")\n        return\n    print(power(n, p))\n\nif __name__ == \"__main__\":\n    main()",
      -4.265625
    ],
    [
      "import math\n\n\ndef power(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a ** b\n\n\nif __name__ == '__main__':\n    assert 4 == power(4, 2)\n    assert 4 == power(4, 3)\n    assert 4 == power(4, 0)\n    assert 1 == power(4, 0)\n    assert 0 == power(4, 0)\n    assert 1 == power(4, 1)\n    assert 1 == power(4, 2)\n    assert 1 == power(4, 3)\n    assert 1 == power(4, 4)\n    assert 1 == power(4, 5)\n    assert 1 == power(4, 6)\n    assert 1 == power(4, 7)\n    assert 1 == power(4, 8)\n    assert 1 == power(4, 9)\n    assert 1 == power(4, 10)\n    assert 1 == power(4, 11)\n    assert 1 == power(4, 12)\n    assert 1 == power(4, 13)\n    assert 1 == power(4, 14)\n    assert 1 == power(4, 15)\n    assert 1 == power(4, 16)\n    assert 1 == power(4, 17)\n    assert 1 == power(4, 18)\n    assert 1 == power(4, 19)\n    assert 1 == power(4, 20)\n    assert 1 == power(4, 21)\n    assert 1 == power(4, 22)\n    assert 1 == power(4, 23)\n    assert 1 == power(4, 24)\n    assert 1 == power(4, 25)\n    assert 1 == power(4, 26)\n    assert 1 == power(4, 27)\n    assert 1 == power(4, 28)\n    assert 1 == power(4, 29)\n    assert 1 == power(4, 30)\n    assert 1 == power(4, 31)\n    assert 1 == power(4, 32)\n    assert 1 == power(4, 33)\n    assert 1 == power(4, 34)",
      -4.390625
    ],
    [
      "# Example 1\n# Given a = 10, b = 3,\n# return 3^10 = 3^3 * 3^2 * 3^1 = 3^(3*2*1) = 3^6 = 36\n\n# Example 2\n# Given a = 10, b = 4,\n# return 4^10 = 4^4 * 4^3 * 4^2 * 4^1 = 4^(4*3*2*1) = 4^(4*2^1) = 4^(2^1) = 4\n\n# Example 3\n# Given a = 10, b = 5,\n# return 5^10 = 5^5 * 5^4 * 5^3 * 5^2 * 5^1 = 5^(5*4*3*2*1) = 5^(5*2^1) = 5^(2^1) = 5\n\ndef pow(a, b):\n    # return a**b\n    # return a ** b\n    return a ** b\n\nif __name__ == '__main__':\n    a = 10\n    b = 3\n    print pow(a, b)",
      -4.53515625
    ],
    [
      "# https://leetcode.com/problems/power-of-n/#/description\n# Given a non-negative integer 'n', return its to the power 'k',\n# where 'k' is a positive integer.\n\nclass Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\"\n        if n == 0:\n            return 1\n        if n < 0:\n            return 1 / self.myPow(x, -n)\n        if n == 1:\n            return x\n        if n == 2:\n            return x * x\n        if n == 3:\n            return x * x * x\n        if n % 2 == 0:\n            return self.myPow(x * self.myPow(x, n / 2), n / 2)\n        else:\n            return x * self.myPow(self.myPow(x, n / 2), n / 2)\n\nif __name__ == \"__main__\":\n    assert Solution().myPow(2, 4) == 16\n    assert Solution().myPow(2, -1) == 1\n    assert Solution().myPow(2, -2) == 4\n    assert Solution().myPow(2, -3) == 4\n    assert Solution().myPow(2, -4) == 1\n    assert Solution().myPow(2, -5) == 1\n    assert Solution().myPow(2, -6) == 4\n    assert Solution().myPow(2, -7) == 4\n    assert Solution().myPow(2, -8) == 16\n    assert Solution().myPow(2, -9) == 16\n    assert Solution().myPow(2, -10) == 1\n    assert Solution().myPow(2, -11) == 1\n    assert Solution().myPow(2, -12) == 4\n    assert Solution().myPow(2, -13) == 4\n    assert Solution().myPow(2, -14) == 16\n    assert Solution().myPow(2, -15) == 16\n    assert Solution().myP",
      -4.72265625
    ],
    [
      "# https://oj.leetcode.com/problems/power-of-a-number/\n\nclass Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        a = int(a)\n        b = int(b)\n        if b == 0:\n            return 1\n        if b % 2 == 0:\n            return self.pow(a, b / 2) * self.pow(a, b / 2)\n        return self.pow(a, b / 2) * self.pow(a, b % 2)\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.pow(2, 4))\n    print(s.pow(2, -4))\n    print(s.pow(2, -3))\n    print(s.pow(2, -1))\n    print(s.pow(2, 0))\n    print(s.pow(2, 1))\n    print(s.pow(2, 2))\n    print(s.pow(2, 3))\n    print(s.pow(2, 4))\n    print(s.pow(2, 5))\n    print(s.pow(2, 6))\n    print(s.pow(2, 7))\n    print(s.pow(2, 8))\n    print(s.pow(2, 9))\n    print(s.pow(2, 10))\n    print(s.pow(2, 11))\n    print(s.pow(2, 12))\n    print(s.pow(2, 13))\n    print(s.pow(2, 14))\n    print(s.pow(2, 15))\n    print(s.pow(2, 16))\n    print(s.pow(2, 17))\n    print(s.pow(2, 18))\n    print(s.pow(2, 19))\n    print(s.pow(2, 20))\n    print(s.pow(2",
      -5.0390625
    ],
    [
      "class Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a < 0:\n            return 1\n        if b == 0:\n            return 1\n        if b > 0:\n            res = 1\n            for i in range(b):\n                res = res * a\n            return res\n        else:\n            res = 1\n            for i in range(b):\n                res = res / a\n            return res",
      -5.08203125
    ],
    [
      "# http://www.geeksforgeeks.org/power-of-a-number-given-in-string-with-base-10-exponent/\n# http://www.geeksforgeeks.org/power-of-a-number-given-in-string-with-base-2/\n# http://www.geeksforgeeks.org/power-of-a-number-given-in-string-with-base-8/\n# http://www.geeksforgeeks.org/power-of-a-number-given-in-string-with-base-16/\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a, b/2) * power(a, b/2)\n    else:\n        return a * power(a, b/2) * power(a, b/2)\n\ndef main():\n    test_cases = [\n        ([10, '2'], 2),\n        ([10, '3'], 8),\n        ([10, '4'], 16),\n        ([10, '5'], 32),\n        ([10, '6'], 64),\n        ([10, '7'], 128),\n        ([10, '8'], 256),\n        ([10, '9'], 512),\n        ([10, '10'], 1024),\n    ]\n    for tc in test_cases:\n        print 'Case #{0}: {1}'.format(tc[0][0], tc[0][1], power(tc[0][1], tc[0][2]))\n\nif __name__ == '__main__':\n    main()",
      -5.34375
    ],
    [
      "from collections import namedtuple\n\nTuple = namedtuple('Tuple', 'a b')\n\n\nclass Solution(object):\n    def power(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0:\n            return 1\n        if b == 0:\n            return 1\n        if a < 0:\n            a = -a\n        if b < 0:\n            b = -b\n        ans = 1\n        while b > 0:\n            ans *= a\n            b -= 1\n        return ans\n\n\nif __name__ == '__main__':\n    assert Solution().power(2, 3) == 8\n    assert Solution().power(3, 3) == 27\n    assert Solution().power(3, 0) == 1\n    assert Solution().power(3, -3) == 27\n    assert Solution().power(0, 3) == 1\n    assert Solution().power(3, -3) == 27\n    assert Solution().power(-3, 3) == -27\n    assert Solution().power(-3, -3) == 1\n    assert Solution().power(0, -3) == 1",
      -5.43359375
    ],
    [
      "def power(a, b):\n    \"\"\"\n    :param a: number\n    :param b: number\n    :return: a^b\n    \"\"\"\n    return a ** b\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert power(2, 2) == 4, \"We've just done pow(2, 2) -> 4\"\n    assert power(2, 3) == 8, \"We've just done pow(2, 3) -> 8\"\n    assert power(3, 2) == 9, \"We've just done pow(3, 2) -> 9\"\n    assert power(4, 2) == 16, \"We've just done pow(4, 2) -> 16\"\n    assert power(4, 3) == 64, \"We've just done pow(4, 3) -> 64\"\n    assert power(5, 2) == 25, \"We've just done pow(5, 2) -> 25\"\n    assert power(6, 2) == 36, \"We've just done pow(6, 2) -> 36\"\n    assert power(2, 3) == 4, \"We've just done pow(2, 3) -> 4\"\n    assert power(2, 4) == 16, \"We've just done pow(2, 4) -> 16\"\n    assert power(3, 4) == 81, \"We've just done pow(3, 4) -> 81\"\n    assert power(3, 5) == 243, \"We've just done pow(3, 5) -> 243\"\n    assert power(4, 5) == 243, \"We've just done pow(4, 5) -> 243\"\n    assert power(5, 5) == 243, \"We've just done pow(5, 5) -> 243\"\n    assert power(5, 6) == 929, \"We've just done pow(5, 6) -> 929\"\n    assert power(5, 7) == 40960, \"We've just done pow(5, 7) -> 40960\"\n    assert power(5, 8) == 2555920, \"We've just done pow(5, 8) -> 2555920\"\n    assert power(5, 9) == 48858",
      -6.5
    ],
    [
      "class Solution:\n    # @return a double\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: float\n        \"\"\"\n        if b == 0:\n            return 1.0\n        if b == 1:\n            return a\n        if b % 2 == 0:\n            return self.pow(a, b / 2) * self.pow(a, b / 2)\n        else:\n            return self.pow(a, b / 2) * self.pow(a, b / 2 + 1) * self.pow(a, b / 2 - 1)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.pow(2, 3)\n    print s.pow(3, 4)\n    print s.pow(5, 6)",
      -6.78515625
    ],
    [
      "import unittest\n\nclass Solution:\n    # @param a, an integer\n    # @param b, an integer\n    # @return an integer\n    def pow(self, a, b):\n        if a == 0:\n            return 1\n        if b == 0:\n            return 1\n        result = 1\n        while b > 0:\n            if b % 2 == 1:\n                result = result * a\n            a = a * a\n            b = b >> 1\n        return result\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self._test(2, 3, 4, 10, 1)\n        self._test(2, 0, 4, 10, 1)\n        self._test(2, 1, 4, 10, 2)\n        self._test(2, 2, 4, 10, 4)\n        self._test(2, 3, 4, 0, 1)\n        self._test(2, 3, 4, 1, 2)\n        self._test(2, 3, 4, 2, 4)\n        self._test(2, 3, 4, 3, 8)\n        self._test(2, 3, 4, 4, 16)\n\n    def _test(self, a, b, expected, nums, expected_num):\n        actual = Solution().pow(a, b)\n        self.assertEqual(expected, actual)\n        self.assertEqual(expected_num, nums)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -7.1015625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    # @param root, a tree node\n    # @param b, a integer\n    # @return a tree node\n    def pow(self, root, b):\n        if not root:\n            return None\n\n        if not b:\n            return root\n        if b == 1:\n            return root\n\n        root = self.pow(root.left, b - 1)\n        root = self.pow(root, b - 2)\n        root.val = pow(root.val, b)\n        return root\n\n    # @param root, a tree node\n    # @param b, a integer\n    # @return a boolean\n    def isPowerOfTwo(self, root, b):\n        if not root:\n            return False\n\n        if b == 1:\n            return True\n\n        return self.isPowerOfTwo(root.left, b - 1) and self.isPowerOfTwo(root.right, b - 1) and root.val == pow(root.val, b)\n\n    # @param root, a tree node\n    # @param b, a integer\n    # @return a boolean\n    def isPowerOfTwo(self, root, b):\n        if not root:\n            return False\n\n        if not b:\n            return True\n\n        if b == 1:\n            return True\n\n        return self.isPowerOfTwo(root.left, b - 1) and self.isPowerOfTwo(root.right, b - 1) and root.val == pow(root.val, b)\n\n    # @param root, a tree node\n    # @param b, a integer\n    # @return a boolean\n    def isPowerOfTwo(self, root, b):\n        if not root:\n            return False\n\n        if not b:\n            return True\n\n        if b == 1:\n            return True\n\n        return self.isPowerOfTwo(root.left, b - 1) and self.isPowerOfTwo(root.right, b - 1) and",
      -11.2109375
    ],
    [
      "class Solution(object):\n    def pow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        a, b = abs(a), abs(b)\n        if a == 0:\n            return 1\n        if a > b:\n            return pow(a, b) ** b\n        return pow(a, b) / (pow(a, b - 1) * pow(a, b - 2))\n\nif __name__ == \"__main__\":\n    a = Solution()\n    print a.pow(2, 3)\n    print a.pow(2, -3)\n    print a.pow(2, -2)\n    print a.pow(2, -1)\n    print a.pow(2, 1)",
      -12.5390625
    ],
    [
      "# https://oj.leetcode.com/problems/power-of-n/\n# Given a non-negative integer represented as a string,\n# convert the integer to its english words equivalent.\n#\n# Some examples:\n#   \"0\" -> \"1\"\n#   \"1\" -> \"1\"\n#   \"10\" -> \"10\"\n#   \"100\" -> \"10\"\n#   \"1000\" -> \"100\"\n#   \"1000000\" -> \"100\"\n#   \"1000000000\" -> \"1000\"\n#   \"1000000000000\" -> \"10000000000000000\"\n#\n# Follow up:\n# Could you do it without converting the integer to string?\n\n# Example 1:\n# Input: \"0\"\n# Output: \"1\"\n# Example 2:\n# Input: \"1\"\n# Output: \"1\"\n# Example 3:\n# Input: \"10\"\n# Output: \"10\"\n# Example 4:\n# Input: \"100\"\n# Output: \"10\"\n# Example 5:\n# Input: \"1000\"\n# Output: \"100\"\n# Example 6:\n# Input: \"1000000\"\n# Output: \"10000000000000000\"\n# Example 7:\n# Input: \"1000000000000\"\n# Output: \"10000000000000000\"\n\nclass Solution:\n    # @param {string} num\n    # @return {string}\n    def toEnglish(self, num):\n        if num == '0':\n            return '1'\n        if num == '1':\n            return '1'\n        if num == '10':\n            return '10'\n        if num == '100':\n            return '10'\n        if num == '1000':\n            return '100'\n        if num == '1000000':\n            return '100'\n        if num == '1000000000':\n            return '1000'\n        if num == '1000000000000':\n            return '10000000000000000'\n        if num == '10000000000000000':\n            return '10000000000000000'\n        \n        # num_str = str(num)\n        # num_str = num_str.replace('0', 'a')\n        # num_str = num_str.replace('1', 'b')",
      -13.171875
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def pow(self, root, exp):\n        \"\"\"\n        :type root: TreeNode\n        :type exp: int\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 1\n        if exp == 0:\n            return 1\n        if exp == 1:\n            return root.val\n        if exp % 2 == 0:\n            return self.pow(root.left, exp / 2) * self.pow(root.right, exp / 2)\n        else:\n            return root.val ** (exp - 1) * self.pow(root.right, exp / 2)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(4)\n    root.left.left = TreeNode(3)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.left.left.left = TreeNode(9)\n    root.left.left.right = TreeNode(11)\n    root.right.right.left = TreeNode(13)\n    root.right.right.right = TreeNode(15)\n\n    print Solution().pow(root, 5)",
      -13.390625
    ],
    [
      "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution(object):\n    def pow(self, root, exp):\n        \"\"\"\n        :type root: TreeNode\n        :type exp: int\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 1\n        if exp == 0:\n            return 1\n        if exp == 1:\n            return root.val\n        if exp % 2 == 0:\n            return self.pow(root.left, exp // 2) * self.pow(root.right, exp // 2)\n        else:\n            return self.pow(root.left, exp) ** (exp - 1) * self.pow(root.right, exp - 1)",
      -14.375
    ],
    [
      "",
      -100.0
    ],
    [
      "",
      -100.0
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}