{
  "problem": {
    "task_id": "MBPP/202",
    "prompt": "Write a function to remove even characters in a string.",
    "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
    "test_list": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ],
    "challenge_test_list": [],
    "problem_id": 191
  },
  "model_name": "codegen-2b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# https://www.hackerrank.com/challenges/remove-evens\n\ndef remove_evens(s):\n    return ''.join(ch for ch in s if ch % 2!= 0)\n\nif __name__ == '__main__':\n    s = input()\n    print(remove_evens(s))",
      2.298828125
    ],
    [
      "class Solution(object):\n    def removeEvenChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(chr(ord(c) % 2) for c in s)",
      1.7880859375
    ],
    [
      "class Solution(object):\n    def removeEvenChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda x: x!= '0', s))",
      1.787109375
    ],
    [
      "class Solution(object):\n    def removeEvenChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[::2]",
      1.787109375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEvenChar(self, s):\n        if s == None or s == '':\n            return s\n        r = ''\n        for i in range(len(s)):\n            if s[i] % 2 == 0:\n                r += s[i]\n        return r\n\nif __name__ == '__main__':\n    s = Solution()\n    s = \"aabbccddee\"\n    s = \"aabbccddee\"\n    s = \"aabbccddee\"\n    s = \"aabbccddee\"\n    print s\n    print s.removeEvenChar(s)\n    print s",
      1.443359375
    ],
    [
      "class Solution(object):\n    def removeEvenChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([i for i in s if not i % 2])\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeEvenChar(\"aabbcc\")",
      1.4404296875
    ],
    [
      "def remove_evens(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if s is None:\n        return None\n    return ''.join(x for x in s if x!='' and x!= '\\t')\n\nif __name__ == '__main__':\n    s = \"A man, a plan, a canal: Panama\"\n    print(remove_evens(s))",
      1.1396484375
    ],
    [
      "# https://www.codeeval.com/open_challenges/108/\n\ndef remove_even_characters(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    return ''.join([i for i in text if i.isalpha() or i.isdigit()])\n\n\nif __name__ == '__main__':\n    test_cases = [\n        ('Aa', 'Aa'),\n        ('AaAaA', 'AaA'),\n        ('Aaa', 'Aaa'),\n        ('AaaA', 'Aaa'),\n        ('AaaAaAa', 'AaaA'),\n        ('AaaAaAaA', 'AaaA'),\n        ('AaaAaAaAa', 'AaaA'),\n        ('AaaAaAaAaA', 'AaaA'),\n        ('AaaAaAaAaAa', 'AaaA'),\n        ('AaaAaAaAaAaA', 'AaaA'),\n    ]\n\n    for test_case in test_cases:\n        result = remove_even_characters(test_case[0])\n        print('Case #{0}: {1}'.format(test_case[1], result))",
      1.1025390625
    ],
    [
      "def remove_even_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return \"\".join(c for c in s if c % 2 == 0)",
      0.98583984375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEvenChar(self, s):\n        return s.replace(\"0\", \"\")",
      0.9833984375
    ],
    [
      "class Solution(object):\n    def removeEvenChars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join([c for c in s if c.isalpha() or c.isdigit()])\n\nif __name__ == \"__main__\":\n    print Solution().removeEvenChars(\"aabbcc\")",
      0.85400390625
    ],
    [
      "def remove_even(string):\n    for i in range(0, len(string), 2):\n        if string[i] % 2 == 0:\n            string = string[:i] + string[i + 1:]\n    return string\n\nif __name__ == '__main__':\n    assert remove_even(\"A\") == \"A\", \"even\"\n    assert remove_even(\"AA\") == \"AA\", \"even\"\n    assert remove_even(\"AB\") == \"AB\", \"even\"\n    assert remove_even(\"ABC\") == \"ABC\", \"even\"\n    assert remove_even(\"ABCD\") == \"ABCD\", \"even\"\n    assert remove_even(\"ABCDE\") == \"ABCDE\", \"even\"\n    assert remove_even(\"ABCDEFG\") == \"ABCDEFG\", \"even\"\n    assert remove_even(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"even\"",
      0.80908203125
    ],
    [
      "# https://www.codeeval.com/open_challenges/26/\n\ndef remove_even_chars(s):\n    even_chars = 0\n    for i in range(0, len(s)):\n        if s[i] % 2 == 0:\n            even_chars += 1\n        else:\n            s[i] = s[i] - 1\n    return s\n\nif __name__ == \"__main__\":\n    s = \"aabbccdd\"\n    print(remove_even_chars(s))",
      0.79443359375
    ],
    [
      "class Solution(object):\n    def removeEven(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = ''.join(s)\n        odd = 0\n        for i in range(len(s)):\n            if s[i] % 2 == 1:\n                odd += 1\n            else:\n                s = s[:i] + s[i+1:]\n                odd = 0\n        return s\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeEven(\"ABABAB\")\n    print s.removeEven(\"ABCBCD\")\n    print s.removeEven(\"ABABCD\")\n    print s.removeEven(\"ABCBCD\")\n    print s.removeEven(\"ABCABCD\")\n    print s.removeEven(\"ABCBCD\")\n    print s.removeEven(\"ABCBCD\")\n    print s.removeEven(\"ABCBCD\")\n    print s.removeEven(\"ABCBCD\")\n    print s.removeEven(\"ABCBCD\")\n    print s.removeEven(\"ABCBCD\")",
      0.71826171875
    ],
    [
      "class Solution(object):\n    def removeEvenChars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([i for i in s if not i.isalpha() or i.isdigit() or i ==''])",
      0.64208984375
    ],
    [
      "def remove_evens(s):\n    # write your code here\n    if len(s) % 2 == 0:\n        return s[0:len(s) - 2]\n    else:\n        return s",
      0.50830078125
    ],
    [
      "def remove_even(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in string if c.isdigit() or c.isalpha())\n\n# Your RemoveEven solution here.",
      0.5068359375
    ],
    [
      "from string import ascii_lowercase\n\n\ndef remove_even_chars(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    return ''.join(ch for ch in text if ch not in ascii_lowercase)",
      0.342041015625
    ],
    [
      "def remove_evens(string):\n    if len(string) % 2 == 0:\n        return string[0::2]\n    else:\n        return string\n\n\n\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcd\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abc\")\n#print remove_evens(\"abc\")\n#print remove_evens(\"abcd\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")\n#print remove_evens(\"abcde\")",
      0.29345703125
    ],
    [
      "def remove_even(s):\n    '''\n    :type s: str\n    :rtype: str\n    '''\n    return ''.join(c for c in s if not c.isalpha() or c.isupper())",
      0.189453125
    ],
    [
      "def remove_evens(string):\n    return string[0::2]\n\n#Test cases\ntest_string = \"Even number\"\nprint(remove_evens(test_string))\ntest_string = \"Even number even number\"\nprint(remove_evens(test_string))\ntest_string = \"Even number number number\"\nprint(remove_evens(test_string))\ntest_string = \"Number number number number\"\nprint(remove_evens(test_string))\ntest_string = \"number number number number\"\nprint(remove_evens(test_string))\ntest_string = \"Number number number number\"\nprint(remove_evens(test_string))",
      0.095947265625
    ],
    [
      "def remove_even_characters(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s.replace('e','')\n\n# Your Remove Even Characters function should return the same string\n# that we have written.\n\nprint remove_even_characters('aabcde')",
      -0.127685546875
    ],
    [
      "class Solution(object):\n    def removeEven(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(filter(lambda c: c.isdigit() or c =='', s))",
      -0.151123046875
    ],
    [
      "def remove_even_chars(s):\n    return s.replace('e', '')\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"ac\", \"ac\"),\n        (\"aacb\", \"aac\"),\n        (\"aabbbc\", \"aabb\"),\n        (\"aabbbbc\", \"aabb\")\n    ]\n\n    for test_case in test_cases:\n        print(\"Case #{}: {}\".format(test_case[0], remove_even_chars(test_case[1])))",
      -0.22314453125
    ],
    [
      "def remove_even_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s[::2]\n\nif __name__ == '__main__':\n    s = 'abcde'\n    print s\n    print remove_even_chars(s)",
      -0.330078125
    ],
    [
      "# https://oj.leetcode.com/problems/remove-even-characters/\nclass Solution(object):\n    def removeEvenChars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([c for c in s if c.isalpha() or c.isdigit() or c ==''])\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeEvenChars('a')\n    print s.removeEvenChars('abcd')\n    print s.removeEvenChars('abcdxyz')\n    print s.removeEvenChars('abcde')",
      -0.5126953125
    ],
    [
      "def remove_even_chars(string):\n    return ''.join(i for i in string if i % 2 == 0)\n\nif __name__ == '__main__':\n    print remove_even_chars('aabbccddeeff')",
      -0.5908203125
    ],
    [
      "def remove_even(s):\n    if len(s) % 2 == 0:\n        return s[:-1]\n    return s\n\n\n# Your Remove Even Code here\n\ndef remove_even(s):\n    if len(s) % 2 == 0:\n        return s[:-1]\n    return s",
      -0.85693359375
    ],
    [
      "def remove_even_characters(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in string if c % 2 == 0)\n\n\nif __name__ == '__main__':\n    s = 'A man, a plan, a canal: Panama'\n    print(remove_even_characters(s))",
      -0.85693359375
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEvenChar(self, s):\n        return s.replace('0', '').replace('1', '')",
      -0.85693359375
    ],
    [
      "def remove_evens(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return \"\".join([i for i in s if i%2!= 0])\n\n\nif __name__ == \"__main__\":\n    assert remove_evens(\"ABAB\") == \"AB\"\n    assert remove_evens(\"ABCD\") == \"ABC\"\n    assert remove_evens(\"ABCDABCD\") == \"ABCD\"",
      -0.85693359375
    ],
    [
      "#!/usr/bin/env python\n\ndef remove_evens(s):\n    return s.replace(\"e\", \"\")\n\nprint remove_evens(\"eee\")",
      -0.85791015625
    ],
    [
      "def remove_evens(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join([i for i in s if i % 2 == 0])",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEven(self, s):\n        return ''.join([i for i in s if i % 2 == 0])\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.removeEven('abcde'))",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEvenChar(self, s):\n        return s[::-1].replace('e', '', 1)",
      -0.85791015625
    ],
    [
      "def remove_even_characters(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(i for i in s if i!= '0')\n\n\nif __name__ == '__main__':\n    print(remove_even_characters('ABCABCABC'))",
      -0.85791015625
    ],
    [
      "def remove_even(string):\n    return \"\".join(ch for ch in string if ch % 2 == 0)\n\nif __name__ == '__main__':\n    print remove_even('ABABAB')",
      -0.85791015625
    ],
    [
      "def remove_evens(s):\n    return ''.join(s.split('e'))\n\n\ndef test_remove_evens():\n    assert remove_evens(\"ae\") == \"a\"\n    assert remove_evens(\"e\") == \"\"\n    assert remove_evens(\"aaee\") == \"aa\"\n\nif __name__ == \"__main__\":\n    test_remove_evens()",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @return a string\n    def removeEven(self, s):\n        return \"\".join(filter(lambda x: x!= \"0\", s))\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeEven(\"1234\")",
      -0.85791015625
    ],
    [
      "def remove_even_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s[::2]\n\nif __name__ == '__main__':\n    assert remove_even_chars('abcd') == 'acde','remove even chars'\n    assert remove_even_chars('abcd') == 'acde','remove even chars'\n    assert remove_even_chars('abcd') == 'abcd','remove even chars'",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def removeEvenChars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = []\n        for i in range(len(s)):\n            if s[i] % 2 == 0:\n                res.append(s[i])\n        return ''.join(res)\n\n\nif __name__ == '__main__':\n    assert Solution().removeEvenChars(\"a\") == \"a\"\n    assert Solution().removeEvenChars(\"aa\") == \"aa\"\n    assert Solution().removeEvenChars(\"aaa\") == \"aa\"\n    assert Solution().removeEvenChars(\"abcd\") == \"cd\"",
      -0.85791015625
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEven(self, s):\n        return ''.join(c for c in s if c % 2!= 0)\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeEven(\"abcde\")",
      -0.85791015625
    ],
    [
      "def remove_even_characters(string):\n    return ''.join([i for i in string if not i.isalpha() and i.isnumeric()])\n\n\nif __name__ == '__main__':\n    s = 'abcd'\n    print remove_even_characters(s)\n    print '-'*80\n    s = 'pqrst'\n    print remove_even_characters(s)\n    print '-'*80\n    s = '1234'\n    print remove_even_characters(s)\n    print '-'*80\n    s = 'abcdef'\n    print remove_even_characters(s)\n    print '-'*80\n    s = '1234abcd'\n    print remove_even_characters(s)\n    print '-'*80\n    s = 'abcdefghij'\n    print remove_even_characters(s)\n    print '-'*80\n    s = '1234abcdefg'\n    print remove_even_characters(s)\n    print '-'*80\n    s = 'abcdefghijkl'\n    print remove_even_characters(s)\n    print '-'*80",
      -0.85791015625
    ],
    [
      "# https://leetcode.com/problems/remove-even-characters-in-a-string/\n# Time:  O(n)\n# Space: O(1)\n\n# Definition for a string.\nclass String:\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n    def remove_even(self):\n        # Write your code here\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([i for i in self.s if i!= '0'])\n\nclass Solution(object):\n    def remove_even(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join([i for i in s if i!= '0'])\n\nif __name__ == '__main__':\n    print Solution().remove_even(\"10001\")",
      -0.85791015625
    ],
    [
      "def remove_evens(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join([x for x in s if not x.is_even()])\n\n\nif __name__ == '__main__':\n    assert remove_evens('abc') == 'bc'\n    assert remove_evens('abbcc') == 'c'\n    assert remove_evens('aabbcc') == 'c'\n    assert remove_evens('abcde') == 'cde'",
      -0.8583984375
    ],
    [
      "def remove_evens(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    return str.replace('e', '')\n\nif __name__ == \"__main__\":\n    assert remove_evens(\"beep\") == \"bee\"\n    assert remove_evens(\"aabbccdd\") == \"abbdd\"",
      -0.8583984375
    ],
    [
      "def remove_evens(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join(i for i in string if i%2!= 0)\n\nif __name__ == '__main__':\n    print remove_evens('aabcccc')",
      -0.8583984375
    ],
    [
      "def remove_even_chars(s):\n    return s.replace('e','').replace('E','')\n\nif __name__ == '__main__':\n    assert remove_even_chars(\"a\") == \"a\", \"a\"\n    assert remove_even_chars(\"aa\") == \"aa\", \"aa\"\n    assert remove_even_chars(\"aaa\") == \"aaa\", \"aaa\"\n    assert remove_even_chars(\"aaaa\") == \"aaaa\", \"aaaa\"\n    assert remove_even_chars(\"aaaaa\") == \"aaaaa\", \"aaaaa\"\n    assert remove_even_chars(\"aaaaaaaaa\") == \"aaaaaaaaa\", \"aaaaaaaaa\"\n    assert remove_even_chars(\"aaaaaaaaaaaaaaaaa\") == \"aaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaa\"",
      -0.8583984375
    ],
    [
      "# Your function will be called as follows:\n# delete_even('A man, a plan, a canal, Panama!')\n# where 'A man, a plan, a canal, Panama!' is the string to be modified.\n#\n# See also: https://www.hackerrank.com/challenges/remove-even-characters/problem\n\n\ndef delete_even(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return ''.join([i for i in string if not i % 2])\n\nif __name__ == \"__main__\":\n    print delete_even(\"A man, a plan, a canal, Panama!\")",
      -0.8583984375
    ],
    [
      "# https://oj.leetcode.com/problems/remove-evens/\n# Given a string s, remove the even characters and return the new string.\n#\n# For example,\n# s = \"abc\", return \"aac\".\n# s = \"abcd\", return \"dc\".\n# s = \"abbc\", return \"b\".\n#\n# Note:\n# The string has length in range [1, 100].\n# All letters in the string is lowercase letters in ascii.\n\n\nclass Solution(object):\n    def removeEven(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        # https://leetcode.com/problems/remove-evens/discuss/3066/O(n)-time-and-O(1)-space-solution\n        return \"\".join(c for c in s if c.isdigit() or c!= '0')\n\n\nif __name__ == '__main__':\n    print Solution().removeEven(\"abbc\")",
      -0.85888671875
    ],
    [
      "def remove_even_chars(s):\n\treturn ''.join([i for i in s if i % 2!= 0])\n\ndef main():\n\ts = 'ABAB'\n\tprint 'Input: ', s\n\tprint 'Output: ', remove_even_chars(s)\n\nif __name__ == '__main__':\n\tmain()",
      -0.85888671875
    ],
    [
      "def remove_even_characters(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s.replace(\"a\", \"b\")\n\ndef main():\n    s = \"an even number of characters\"\n    print(remove_even_characters(s))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "# https://leetcode.com/problems/remove-evens-from-a-string/\n# O(n) time and O(1) space\nclass Solution(object):\n    def removeEven(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join([c for c in s if c.isdigit() or c.isalpha()])",
      -0.85888671875
    ],
    [
      "def remove_evens(string):\n    return string[0::2]\n\nprint(remove_evens(\"abcd\"))\nprint(remove_evens(\"abbabb\"))\nprint(remove_evens(\"ababb\"))\nprint(remove_evens(\"abb\"))\nprint(remove_evens(\"bb\"))",
      -0.86083984375
    ],
    [
      "import re\n\n\ndef remove_even_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'([A-Za-z]{2})', r'\\1', string)\n\n\nif __name__ == '__main__':\n    assert remove_even_chars('a') == 'a', 'a'\n    assert remove_even_chars('aabb') == 'aa', 'aabb'\n    assert remove_even_chars('abbcc') == 'abbcc', 'abbcc'",
      -0.86083984375
    ],
    [
      "def remove_even_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    #Write your code here\n    return ''.join([i for i in string if i not in 'abcd'])\n\nif __name__ == '__main__':\n    print remove_even_chars('abcdabcde')",
      -0.908203125
    ],
    [
      "def remove_even(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(ch for ch in s if ch % 2!= 0)\n\nif __name__ == '__main__':\n    s = 'aabbcc'\n    print(remove_even(s))",
      -1.330078125
    ],
    [
      "import unittest\n\nclass Solution(object):\n    def removeEvenChars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[::2]\n\nclass TestMethods(unittest.TestCase):\n    def test_Local(self):\n        self.assertEqual(1, 1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\nJava = '''\n# Thought: https://leetcode.com/problems/remove-even-characters-from-a-string/solution/\n\n# 1ms 100%\nclass Solution {\n    public String removeEvenChars(String s) {\n        int i = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) % 2 == 0) {\n                i++;\n            } else {\n                s = s.substring(0, i) + s.substring(i + 1);\n            }\n        }\n        return s;\n    }\n}\n\n# 1ms 100%\nclass Solution {\n    public String removeEvenChars(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] % 2 == 0) {\n                arr[i] = arr[i];\n            } else {\n                arr[i] = (char)(arr[i] - 1);\n            }\n        }\n        return new String(arr);\n    }\n}\n'''",
      -1.53125
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-evens/problem\n\n# import time\n# import collections\n# import os\n# import sys\n# from itertools import islice\n# from typing import List\n# from typing import Tuple\n# from typing import Union\n# from typing import Iterable\n# from typing import Iterator\n# from typing import Optional\n# from typing import Dict\n# from typing import Callable\n# from typing import Type\n# from typing import TYPE_CHECKING\n# from typing import NoReturn\n# from typing import overload\n# from collections import Counter\n# from collections import OrderedDict\n# from collections import deque\n# from collections import defaultdict\n# from collections import deque\n\n# if sys.version_info > (3, 0):\n#     from typing import Literal\n# else:\n#     from typing_extensions import Literal\n\n# HACKERRANK_TIMEOUT = 10\n\n# if TYPE_CHECKING:\n#     # pylint: disable=unused-import,ungrouped-imports\n#     from typing import Dict, List, Tuple\n#     from typing import Iterable\n#     from typing import Iterator\n#     from typing import NoReturn\n#     from typing import Type\n#     from typing import Union\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing import overload\n#     from typing",
      -1.6435546875
    ],
    [
      "def remove_evens(s):\n    return s.replace('e', '')\n\nif __name__ == '__main__':\n    assert remove_evens('abc') == 'bcd'\n    assert remove_evens('abcdef') == 'bdef'\n    assert remove_evens('abcdefg') == 'bdefg'",
      -2.134765625
    ],
    [
      "def remove_even_characters(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    even_characters = []\n    for i in range(0, len(string)):\n        if string[i] % 2 == 0:\n            even_characters.append(string[i])\n    return ''.join(even_characters)\n\n\nif __name__ == \"__main__\":\n    assert remove_even_characters(\"A\") == \"A\", \"Even characters\"\n    assert remove_even_characters(\"AA\") == \"AA\", \"Even characters\"\n    assert remove_even_characters(\"ABA\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABAB\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABABAC\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABABACDE\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABABACDEFA\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABABACDEFABC\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABABACDEFABCDE\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABABACDEFABCDEFA\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABABACDEFABCDEFABCDE\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABABACDEFABCDEFABCDEFA\") == \"AB\", \"Even characters\"\n    assert remove_even_characters(\"ABABACDEFABCDEFABCDEFABCDE\") == \"AB\", \"Even characters\"",
      -2.419921875
    ],
    [
      "from collections import Counter\n\ndef remove_even_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in s if c!='')\n\n\nif __name__ == '__main__':\n    s = 'Hello, world!'\n    print(remove_even_chars(s))",
      -3.296875
    ],
    [
      "def remove_evens(s):\n    return s.replace('e','')\n\nif __name__ == '__main__':\n    assert remove_evens('aeiou') == 'aoeiou'\n    assert remove_evens('aeiou') == 'aoeiou'\n    assert remove_evens('aeiou') == 'aoeiou'\n    assert remove_evens('aeiou') == 'aoeiou'",
      -3.716796875
    ],
    [
      "def remove_even_chars(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return s.replace('e', '')\n\n\nif __name__ == '__main__':\n    assert remove_even_chars('abcd') == 'abcd','should work'\n    assert remove_even_chars('abbbc') == 'abbbc','should work'\n    assert remove_even_chars('abbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even_chars('abbbbbc') == 'abbbbc','should work'\n    assert remove_even",
      -4.07421875
    ],
    [
      "# https://www.hackerrank.com/challenges/even-chars/problem\n# https://www.hackerrank.com/challenges/even-chars/hints/python-code\n\n\ndef remove_even_chars(s):\n    return s.replace('e', '')\n\n\nif __name__ == '__main__':\n    s = input().strip()\n    print(remove_even_chars(s))",
      -4.171875
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-evens-from-a-string/problem\n\ndef remove_evens(string):\n    return ''.join(c for c in string if c.isalpha() or c.isdigit())\n\nif __name__ == '__main__':\n    string = input().strip()\n    print(remove_evens(string))",
      -4.7265625
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-evens/problem\n\ndef remove_evens(s):\n    return s.replace('0','').replace('1','').replace('2','').replace('3','').replace('4','').replace('5','').replace('6','').replace('7','').replace('8','').replace('9','')\n\nif __name__ == '__main__':\n    s = input()\n    print remove_evens(s)",
      -4.86328125
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-evens\n\ndef remove_evens(s):\n    return ''.join([c if c % 2 == 0 else c for c in s])\n\nif __name__ == \"__main__\":\n    s = input().strip()\n    print(remove_evens(s))",
      -5.05078125
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEvenChar(self, s):\n        return ''.join([c if c.isdigit() else c for c in s])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeEvenChar('A')",
      -5.26953125
    ],
    [
      "def remove_even_chars(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] % 2 == 0:\n            string = string[0:i] + string[i+1:]\n    return string\n\n# Your Remove Even Chars solution here.",
      -5.4609375
    ],
    [
      "def remove_even_characters(string):\n    \"\"\"\n    string: a string\n    returns: a string without even characters\n    \"\"\"\n    return ''.join([i for i in string if i % 2!= 0])\n\nif __name__ == '__main__':\n    print remove_even_characters('abcdeeeefg')",
      -5.6640625
    ],
    [
      "def remove_evens(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(filter(lambda x: x!= '0', s))\n\nif __name__ == '__main__':\n    s = 'ABAB12345'\n    print(remove_evens(s))",
      -6.08984375
    ],
    [
      "#!/usr/bin/python\n\nclass Solution:\n    # @return a string\n    def removeEvenChar(self, s):\n        # write code here\n        return ''.join( [ x for x in s if x % 2!= 0 ] )\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeEvenChar(\"abbcccddd\")",
      -6.6171875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEven(self, s):\n        return ''.join([i for i in s if i % 2!= 0])\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeEven(\"4\")\n    print s.removeEven(\"123\")\n    print s.removeEven(\"abcdef\")",
      -6.9453125
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEvenChars(self, s):\n        if not s:\n            return s\n        result = []\n        for i in xrange(len(s)):\n            if s[i] % 2 == 0:\n                result.append(s[i])\n        return ''.join(result)\n\nif __name__ == '__main__':\n    print Solution().removeEvenChars(\"abbcccdd\")",
      -8.0625
    ],
    [
      "class Solution(object):\n    def removeEvenChars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(x for x in s if x.isalpha() or x.isdigit())",
      -8.3046875
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEven(self, s):\n        return s[::2] + s[1::2]\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeEven(\"cae\")\n    print s.removeEven(\"acb\")\n    print s.removeEven(\"dbc\")\n    print s.removeEven(\"bca\")\n    print s.removeEven(\"bac\")\n    print s.removeEven(\"dbc\")\n    print s.removeEven(\"bca\")\n    print s.removeEven(\"dbc\")\n    print s.removeEven(\"bca\")\n    print s.removeEven(\"dbc\")\n    print s.removeEven(\"bca\")",
      -8.7734375
    ],
    [
      "def remove_even_characters(s):\n    return \"\".join([c for c in s if not c.isalpha() or c.isupper()])\n\n#Test Cases\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A man, a plan, a canal: Panama\")\nprint remove_even_characters(\"A",
      -8.7890625
    ],
    [
      "def remove_even(string):\n    return ''.join(x for x in string if not x.is_even())\n\n# Test Cases\n# Test Case 1:\ntest_case1 = \"A man, a plan, a canal: Panama\"\nprint remove_even(test_case1)\n\n# Test Case 2:\ntest_case2 = \"A day without sunshine is like tomorrow without tomorrow.\"\nprint remove_even(test_case2)\n\n# Test Case 3:\ntest_case3 = \"If we could be happy with a world without men, we would be happy.\"\nprint remove_even(test_case3)\n\n# Test Case 4:\ntest_case4 = \"If we could be happy with a world without women, we would be happy.\"\nprint remove_even(test_case4)\n\n# Test Case 5:\ntest_case5 = \"There is no reason for the child to have a father.\"\nprint remove_even(test_case5)\n\n# Test Case 6:\ntest_case6 = \"There is no reason for the child to have a mother.\"\nprint remove_even(test_case6)\n\n# Test Case 7:\ntest_case7 = \"He was in the water. When he fell down, he was swimming.\"\nprint remove_even(test_case7)\n\n# Test Case 8:\ntest_case8 = \"The quick brown fox jumps over the lazy dog.\"\nprint remove_even(test_case8)\n\n# Test Case 9:\ntest_case9 = \"The quick brown fox jumps over the lazy dog.\"\nprint remove_even(test_case9)",
      -9.2421875
    ],
    [
      "def remove_even(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    string = string.strip()\n    if string.find('0')!= -1:\n        string = string[:-1]\n    return string",
      -9.328125
    ],
    [
      "def remove_even_characters(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if not string:\n        return string\n    s = ''.join(str(x) for x in range(len(string)))\n    return ''.join(x for x in s if x.isdigit() or x in string)\n\nif __name__ == '__main__':\n    s = 'abc'\n    print remove_even_characters(s)",
      -9.4609375
    ],
    [
      "class Solution(object):\n    def removeEvenChars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ''.join(c for c in s if c % 2 == 0)\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.removeEvenChars(\"a\") == \"a\"\n    assert s.removeEvenChars(\"ab\") == \"b\"\n    assert s.removeEvenChars(\"aa\") == \"a\"\n    assert s.removeEvenChars(\"aaa\") == \"a\"\n    assert s.removeEvenChars(\"abb\") == \"b\"\n    assert s.removeEvenChars(\"bbb\") == \"b\"\n    assert s.removeEvenChars(\"abbb\") == \"b\"\n    assert s.removeEvenChars(\"abbbb\") == \"b\"\n    assert s.removeEvenChars(\"abbbbb\") == \"b\"\n    assert s.removeEvenChars(\"abbbbbb\") == \"b\"\n    assert s.removeEvenChars(\"abbbbbbb\") == \"b\"\n    assert s.removeEvenChars(\"abbbbbbbb\") == \"b\"\n    assert s.removeEvenChars(\"abbbbbbbbb\") == \"b\"",
      -9.6015625
    ],
    [
      "def remove_even_chars(string):\n  return ''.join(i for i in string if i % 2 == 0)\n\nif __name__ == '__main__':\n  assert remove_even_chars('aabbccdd') == 'aaabbcc','should remove even chars'\n  assert remove_even_chars('aabbccdd') == 'aabbcc','should remove even chars'\n  assert remove_even_chars('aabbccdd') == 'aabbccdd','should not remove even chars'\n  assert remove_even_chars('aabbccdd') == 'aabbcc','should not remove even chars'\n  assert remove_even_chars('aabbccdd') == 'aabbccdd','should not remove even chars'\n  assert remove_even_chars('aabbccdd') == 'aabbcc','should not remove even chars'\n  assert remove_even_chars('aabbccdd') == 'aabbccdd','should not remove even chars'\n  assert remove_even_chars('aabbccdd') == 'aabbcc','should not remove even chars'\n  assert remove_even_chars('aabbccdd') == 'aabbccdd','should not remove even chars'",
      -9.6875
    ],
    [
      "def remove_evens(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(x for x in s if not x.isalpha() or x.isupper())\n\n# Time:  O(n)\n# Space: O(n)\n# DP\n# 1.\n# We have a string s.\n# If the character at index i is even, we will remove the character from s.\n# If the character at index i is odd, we will remove the character from s.\n# We will remove all the characters from s, except the last character.\n# We will call this function recursively on the last character of s.\n#\n# 2.\n# We have a string s.\n# We will remove the first character from s.\n# We will remove the character at index i from s.\n# We will remove all the characters from s, except the first character.\n# We will call this function recursively on the first character of s.\n#\n# 3.\n# We have a string s.\n# We will remove the first character from s.\n# We will remove the last character from s.\n# We will remove the character at index i from s.\n# We will remove all the characters from s, except the first character.\n# We will call this function recursively on the first character of s.\n#\n# 4.\n# We have a string s.\n# We will remove the first character from s.\n# We will remove the last character from s.\n# We will remove the character at index i from s.\n# We will remove all the characters from s, except the last character.\n# We will call this function recursively on the last character of s.\n#\n# 5.\n# We have a string s.\n# We will remove the first character from s.\n# We will remove the last character from s.\n# We will remove the character at index i from s.\n# We will remove all the characters from s, except the last character.\n# We will call this function recursively on the last character of s.\n#\n# 6.\n# We have a string s.\n# We will remove the first character from s.\n# We will remove the last character from s.",
      -9.734375
    ],
    [
      "def remove_even(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return \"\".join(ch for ch in string if ch % 2 == 0)\n\nif __name__ == \"__main__\":\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\") == \"aabbc\"\n    assert remove_even(\"aabbcc\")",
      -10.375
    ],
    [
      "# https://oj.leetcode.com/problems/remove-evens/\n\nclass Solution:\n    # @param s, a string\n    # @return a string\n    def removeEven(self, s):\n        ret = []\n        for i in range(len(s)):\n            if s[i] % 2 == 0:\n                ret.append(s[i])\n            else:\n                ret.append(s[i] - 1)\n        return ''.join(ret)\n\n    def removeEven2(self, s):\n        ret = []\n        for i in range(len(s)):\n            if s[i] % 2 == 0:\n                ret.append(s[i])\n        return ''.join(ret)\n\n\nif __name__ == '__main__':\n    print Solution().removeEven('abbbc')\n    print Solution().removeEven2('abbbc')",
      -10.578125
    ],
    [
      "def remove_evens(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(x for x in s if x.isdigit() or x =='')\n\n\nif __name__ == '__main__':\n    assert remove_evens('abc') == 'cde'\n    assert remove_evens('abc') == 'cde'\n    assert remove_evens('abcabcabc') == 'cde'\n    assert remove_evens('abcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabcabcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabcabcabcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabcabcabcabcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabcabcabcabcabcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabcabcabcabcabcabcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabcabcabcabcabcabcabcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') == 'cde'\n    assert remove_evens('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      -10.6015625
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-even-characters/problem\n\ndef remove_even_characters(str):\n    # Complete this function\n    count = 0\n    for i in range(len(str)):\n        if str[i] % 2 == 0:\n            count += 1\n        else:\n            str = str[:i] + str[i+1:]\n    return str\n\nif __name__ == '__main__':\n    str = 'Even'\n    print(remove_even_characters(str))",
      -10.65625
    ],
    [
      "class Solution:\n    # @param {string} s\n    # @return {string}\n    def removeEvenChar(self, s):\n        return \"\".join([i for i in s if i % 2!= 0])\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.removeEvenChar(\"ABABCD\")",
      -11.390625
    ],
    [
      "class Solution(object):\n    def removeEvenChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.replace('e', '')\n        \n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeEvenChar('bcdeee')\n    print s.removeEvenChar('bcdeee')\n    print s.removeEvenChar('abcde')\n    print s.removeEvenChar('abcde')\n    print s.removeEvenChar('abcdeabcde')\n    print s.removeEvenChar('abcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s.removeEvenChar('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde')\n    print s",
      -11.4921875
    ],
    [
      "# https://www.hackerrank.com/challenges/remove-even-characters/problem\n\ndef remove_even_characters(string):\n    return ''.join(x for x in string if x.isdigit() or x not in '0123456789')\n\n\n# test cases\n# strings
      -12.328125
    ],
    [
      "def remove_even(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(e for e in s if e not in 'e')\n\ndef test():\n    assert remove_even('a') == 'aa'\n    assert remove_even('ab') == 'a'\n    assert remove_even('abc') == 'abc'\n    assert remove_even('abbc') == 'bc'\n    assert remove_even('abcde') == 'cde'\n\nif __name__ == '__main__':\n    test()",
      -12.5390625
    ],
    [
      "def remove_evens(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(c for c in s if c.isalpha() or c.isdigit() or c =='')\n\ndef test_remove_evens():\n    assert remove_evens('A') == 'A'\n    assert remove_evens('A1') == 'A1'\n    assert remove_evens('A1A2') == 'A2'\n\nif __name__ == '__main__':\n    test_remove_evens()",
      -12.953125
    ],
    [
      "class Solution:\n    # @param s, a string\n    # @return a string\n    def removeEvenChar(self, s):\n        # write your code here\n        if len(s) <= 1:\n            return s\n        return ''.join(c for c in s if c not in ['0', '2'])\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeEvenChar('cbbd')",
      -12.9609375
    ],
    [
      "class Solution:\n    \"\"\"\n    @param s: A string\n    @return: The string after removal\n    \"\"\"\n    def removeEvenChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if s is None:\n            return None\n        s = s.upper()\n        if len(s) == 0:\n            return \"\"\n        odd_index = 0\n        for i in range(len(s)):\n            if s[i] % 2 == 1:\n                odd_index += 1\n                s = s[:i] + s[i+1:]\n        return s\n\nclass Solution1:\n    \"\"\"\n    @param s: A string\n    @return: The string after removal\n    \"\"\"\n    def removeEvenChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if s is None:\n            return None\n        s = s.upper()\n        if len(s) == 0:\n            return \"\"\n        odd_index = 0\n        for i in range(len(s)):\n            if s[i] % 2 == 1:\n                odd_index += 1\n                s = s[:i] + s[i+1:]\n        return s\n\nclass Solution2:\n    \"\"\"\n    @param s: A string\n    @return: The string after removal\n    \"\"\"\n    def removeEvenChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if s is None:\n            return None\n        s = s.upper()\n        if len(s) == 0:\n            return \"\"\n        odd_index = 0\n        for i in range(len(s)):\n            if s[i] % 2 == 1:\n                odd_index += 1\n                s = s[:i] + s[i+1:]\n        return s\n\nclass Solution3:\n    \"\"\"\n    @param s: A string\n    @return: The string after removal\n    \"\"\"\n    def removeEvenChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"",
      -13.0390625
    ],
    [
      "import sys\n\nclass Solution(object):\n    def removeEven(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        i = 0\n        j = 0\n        while j < len(s):\n            if s[j] % 2 == 0:\n                i += 1\n            j += 1\n            if i % 2 == 0:\n                s = s[:j] + s[j+1:]\n            else:\n                i = 0\n        return s\n\n    def removeEven_2(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n        odd = ''\n        for i in xrange(0, len(s)):\n            if s[i] % 2 == 0:\n                odd += s[i]\n        return odd\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.removeEven('abcde')\n    print s.removeEven_2('abcde')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.removeEven_2('abcd')\n    print s.",
      -14.1640625
    ],
    [
      "def remove_even(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    s = ''.join(c for c in s if c.isalpha())\n    return ''.join(c for c in s if c.isalpha() and (ord(c) % 2 == 0))\n\n\n# Your Remove Even Code\n\nif __name__ == '__main__':\n    assert remove_even(\"aabbcc\") == \"aabbc\"",
      -14.59375
    ],
    [
      "class Solution(object):\n    def removeEven(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        for i in range(len(s)):\n            if s[i] % 2 == 0:\n                s = s[:i] + s[i+1:]\n            else:\n                s = s[:i] + s[i+1:] + s[i+2:]\n\n        return s",
      -15.90625
    ],
    [
      "",
      -100.0
    ],
    [
      "",
      -100.0
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}