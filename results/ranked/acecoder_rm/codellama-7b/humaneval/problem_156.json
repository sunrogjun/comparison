{
  "problem": {
    "task_id": "HumanEval/156",
    "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
    "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "int_to_mini_roman",
    "docstring": "",
    "problem_id": 156
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "roman_numerals = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n    roman_string = \"\"\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_string += numeral\n            number -= value\n    return roman_string.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n    roman_string = \"\"\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_string += numeral\n            number -= value\n    return roman_string.lower()",
      9.3671875
    ],
    [
      "num = number\n    roman_dict = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm',\n    }\n    output = ''\n    for value, char in sorted(roman_dict.items(), reverse=True):\n        while num >= value:\n            num -= value\n            output += char\n    return output.lower()\n\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = number\n    roman_dict = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm',\n    }\n    output = ''\n    for value, char in sorted(roman_dict.items(), reverse=True):\n        while num >= value:\n            num -= value\n            output += char\n    return output.lower()\n\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'",
      7.0546875
    ],
    [
      "if number <= 0:\n        raise ValueError(\"Only positive integers are allowed\")\n    elif number > 1000:\n        raise ValueError(\"Only numbers up to 1000 are allowed\")\n\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_number = \"\"\n    for roman_value, roman_letter in roman_numerals.items():\n        while number >= roman_value:\n            roman_number += roman_letter\n            number -= roman_value\n    return roman_number.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLIV'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Only positive integers are allowed\")\n    elif number > 3999:\n        raise ValueError(\"Only numbers up to 3999 are allowed\")\n\n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }",
      4.796875
    ],
    [
      "roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    def get_roman_numeral(number, accumulator):\n        if number in roman_numerals:\n            return accumulator + roman_numerals[number]\n        else:\n            return get_roman_numeral(number // 10, accumulator + roman_numerals[10 * (number // 10)]) + get_roman_numeral(number % 10, '')\n\n    return get_roman_numeral(number, '').lower()",
      3.93359375
    ],
    [
      "if not 1 <= number <= 1000:\n        raise ValueError(\"number must be between 1 and 1000\")\n    number_map = [\n        (1000, \"m\"),\n        (500, \"d\"),\n        (100, \"c\"),\n        (50, \"l\"),\n        (10, \"x\"),\n        (5, \"v\"),\n        (1, \"i\"),\n    ]\n    roman = \"\"\n    for value, char in number_map:\n        num_chars = number // value\n        roman += char * num_chars\n        number %= value\n    return roman\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 3000:\n        raise ValueError(\"number must be between 1 and 3000\")\n    number_map = [\n        (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ]\n    roman = \"\"\n    for value, char in number_map:\n        num_chars = number // value\n        roman += char * num_chars\n        number %= value\n    return roman\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest",
      2.998046875
    ],
    [
      "int_to_roman = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    return_string = \"\"\n    for key in sorted(int_to_roman.keys(), reverse=True):\n        while number >= key:\n            return_string += int_to_roman[key]\n            number -= key\n\n    return return_string.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    int_to_roman = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    return_string = \"\"\n    for key in sorted(int_to_roman.keys(), reverse=True):\n        while number >= key:\n            return_string += int_to_roman[key]\n            number -= key\n\n    return return_string.lower()\n\n\ndef roman_to_int(roman_string):\n    \"\"\"",
      2.4765625
    ],
    [
      "if not isinstance(number, int):\n        raise TypeError('number must be an integer')\n    if number <= 0:\n        raise ValueError('number must be positive')\n    if number > 1000:\n        raise ValueError('number must be <= 1000')\n\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result",
      2.45703125
    ],
    [
      "roman_numerals = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n\n    roman_numeral = ''\n    for value, numeral in roman_numerals:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral\n\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n\n    roman_numeral = ''\n    for value, numeral in roman_numerals:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral\n\n\ndef int_to_mini_roman(number):",
      2.177734375
    ],
    [
      "int_to_roman = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n    roman = \"\"\n    for key in sorted(int_to_roman.keys(), reverse=True):\n        while number >= key:\n            roman += int_to_roman[key]\n            number -= key\n    return roman.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 10000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    >>> int_to_roman(4265) == 'mmcxli'\n    \"\"\"\n    int_to_roman = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n    roman = \"\"\n    for key in sorted(int_to_roman.keys(), reverse=True):\n        while number >= key:\n            roman += int_to_roman[key]\n            number -= key\n    return roman.lower()\n\n\ndef roman_to_int(roman):",
      1.6943359375
    ],
    [
      "int_to_roman = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n\n    roman_list = []\n    for digit, symbol in sorted(int_to_roman.items(), reverse=True):\n        while number >= digit:\n            roman_list.append(symbol)\n            number -= digit\n    return ''.join(roman_list)\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    int_to_roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n\n    roman_list = []\n    for digit, symbol in sorted(int_to_roman.items(), reverse=True):\n        while number >= digit:\n            roman_list.append(symbol)\n            number -= digit\n    return ''.join(roman_list)",
      1.6220703125
    ],
    [
      "int_to_roman = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm',\n    }\n    roman_numerals = []\n    while number > 0:\n        if number >= 1000:\n            roman_numerals.append('m')\n            number -= 1000\n        elif number >= 900:\n            roman_numerals.append('cm')\n            number -= 900\n        elif number >= 500:\n            roman_numerals.append('d')\n            number -= 500\n        elif number >= 400:\n            roman_numerals.append('cd')\n            number -= 400\n        elif number >= 100:\n            roman_numerals.append('c')\n            number -= 100\n        elif number >= 90:\n            roman_numerals.append('xc')\n            number -= 90\n        elif number >= 50:\n            roman_numerals.append('l')\n            number -= 50\n        elif number >= 40:\n            roman_numerals.append('xl')\n            number -= 40\n        elif number >= 10:\n            roman_numerals.append('x')\n            number -= 10\n        elif number >= 9:\n            roman_numerals.append('ix')\n            number -= 9\n        elif number >= 5:\n            roman_numerals.append('v')\n            number -= 5\n        elif number >= 4:\n            roman_numerals.append('iv')\n            number -= 4\n        elif number >= 1:\n            roman_numerals.append('i')\n            number -= 1\n\n    return ''.join(roman_numerals)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.5595703125
    ],
    [
      "numbers = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n\n    return \"\".join(numbers[n] for n in sorted(numbers.keys(), reverse=True) if number >= n)\n\n\ndef int_to_mini_roman_v2(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    numbers = [\n        (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ]\n\n    roman = []\n    for value, numeral in numbers:\n        while number >= value:\n            roman.append(numeral)\n            number -= value\n    return \"\".join(roman)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.103515625
    ],
    [
      "# Dictionary of roman numerals\n    roman_numerals = {\n        1000: \"m\",\n        500: \"d\",\n        100: \"c\",\n        50: \"l\",\n        10: \"x\",\n        5: \"v\",\n        1: \"i\",\n    }\n\n    # Initialize the string to an empty string\n    result = \"\"\n\n    # Get the roman numeral equivalent of the 1s place\n    ones = number % 10\n    if ones > 0:\n        result += roman_numerals[ones]\n\n    # Get the roman numeral equivalent of the 10s place\n    tens = (number % 100) // 10\n    if tens > 0:\n        result += roman_numerals[tens * 10]\n\n    # Get the roman numeral equivalent of the 100s place\n    hundreds = (number % 1000) // 100\n    if hundreds > 0:\n        result += roman_numerals[hundreds * 100]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.93408203125
    ],
    [
      "roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n\n    def int_to_roman(number):\n        for integer, numeral in sorted(roman_numerals.items(), reverse=True):\n            if number // integer:\n                return numeral + int_to_roman(number - integer)\n        return ''\n\n    return int_to_roman(number).lower()\n\n\ndef test_int_to_mini_roman():\n    assert int_to_mini_roman(19) == 'xix'\n    assert int_to_mini_roman(152) == 'clii'\n    assert int_to_mini_roman(426) == 'cdxxvi'\n    assert int_to_mini_roman(1) == 'i'\n    assert int_to_mini_roman(2) == 'ii'\n    assert int_to_mini_roman(3) == 'iii'\n    assert int_to_mini_roman(4) == 'iv'\n    assert int_to_mini_roman(5) == 'v'\n    assert int_to_mini_roman(6) == 'vi'\n    assert int_to_mini_roman(7) == 'vii'\n    assert int_to_mini_roman(8) == 'viii'\n    assert int_to_mini_roman(9) == 'ix'\n    assert int_to_mini_roman(10) == 'x'\n    assert int_to_mini_roman(11) == 'xi'\n    assert int_to_mini_roman(12) == 'xii'",
      0.87548828125
    ],
    [
      "# Your code here\n    roman_numeral_map = zip((1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1),\n                            ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'))\n    result = []\n    for integer, numeral in roman_numeral_map:\n        count = number / integer\n        result.append(numeral * count)\n        number -= integer * count\n    return ''.join(result)\n\n\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n    while number > 0:\n        for i in sorted(roman_dict.keys(), reverse=True):\n            while number >= i:\n                roman += roman_dict[i]\n                number -= i\n    return roman\n\n\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,",
      0.8505859375
    ],
    [
      "roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        if number >= value:\n            result += numeral * (number // value)\n            number = number % value\n    return result\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        if number >= value:\n            result += numeral * (number // value)\n            number = number % value\n    return result",
      0.57666015625
    ],
    [
      "roman = {1: \"i\", 5: \"v\", 10: \"x\", 50: \"l\", 100: \"c\", 500: \"d\", 1000: \"m\"}\n    if number > 1000:\n        return \"\"\n    if number < 1:\n        return \"\"\n    result = \"\"\n    for k in sorted(roman.keys(), reverse=True):\n        while number >= k:\n            result += roman[k]\n            number -= k\n    return result\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n    if number > 3000:\n        return \"\"\n    if number < 1:\n        return \"\"\n    result = \"\"\n    for k in sorted(roman.keys(), reverse=True):\n        while number >= k:\n            result += roman[k]\n            number -= k\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.5361328125
    ],
    [
      "# your code here\n    roman_numeral = ''\n\n    while number > 0:\n        if number >= 1000:\n            roman_numeral += 'm'\n            number -= 1000\n        elif number >= 900:\n            roman_numeral += 'cm'\n            number -= 900\n        elif number >= 500:\n            roman_numeral += 'd'\n            number -= 500\n        elif number >= 400:\n            roman_numeral += 'cd'\n            number -= 400\n        elif number >= 100:\n            roman_numeral += 'c'\n            number -= 100\n        elif number >= 90:\n            roman_numeral += 'xc'\n            number -= 90\n        elif number >= 50:\n            roman_numeral += 'l'\n            number -= 50\n        elif number >= 40:\n            roman_numeral += 'xl'\n            number -= 40\n        elif number >= 10:\n            roman_numeral += 'x'\n            number -= 10\n        elif number >= 9:\n            roman_numeral += 'ix'\n            number -= 9\n        elif number >= 5:\n            roman_numeral += 'v'\n            number -= 5\n        elif number >= 4:\n            roman_numeral += 'iv'\n            number -= 4\n        elif number >= 1:\n            roman_numeral += 'i'\n            number -= 1\n\n    return roman_numeral\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    >>> int_to_roman(1426) == 'mcd",
      0.478515625
    ],
    [
      "if number < 1 or number > 1000:\n        raise ValueError(\"number is out of range\")\n    if number == 1000:\n        return \"m\"\n    result = \"\"\n    while number > 0:\n        if number >= 1000:\n            result += \"m\"\n            number -= 1000\n        elif number >= 900:\n            result += \"cm\"\n            number -= 900\n        elif number >= 500:\n            result += \"d\"\n            number -= 500\n        elif number >= 400:\n            result += \"cd\"\n            number -= 400\n        elif number >= 100:\n            result += \"c\"\n            number -= 100\n        elif number >= 90:\n            result += \"xc\"\n            number -= 90\n        elif number >= 50:\n            result += \"l\"\n            number -= 50\n        elif number >= 40:\n            result += \"xl\"\n            number -= 40\n        elif number >= 10:\n            result += \"x\"\n            number -= 10\n        elif number >= 9:\n            result += \"ix\"\n            number -= 9\n        elif number >= 5:\n            result += \"v\"\n            number -= 5\n        elif number >= 4:\n            result += \"iv\"\n            number -= 4\n        else:\n            result += \"i\"\n            number -= 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.4326171875
    ],
    [
      "if not isinstance(number, int):\n        raise TypeError('number must be an integer')\n    if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000')\n\n    roman_numeral_map = zip(\n        (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1),\n        ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i')\n    )\n\n    def roman_num(num):\n        for integer, numeral in roman_numeral_map:\n            while num >= integer:\n                num -= integer\n                yield numeral\n\n    return ''.join(roman_num(number)).lower()\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.043212890625
    ],
    [
      "if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000')\n\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n\n    roman_numeral = ''\n\n    for (value, numeral) in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.03778076171875
    ],
    [
      "# Your code here\n    int_to_roman = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n    roman = \"\"\n    if number < 1 or number > 1000:\n        return \"Invalid input\"\n    else:\n        for num in int_to_roman.keys():\n            if number >= num:\n                roman += int_to_roman[num]\n                number -= num\n    return roman\n\n\nprint(int_to_mini_roman(19))\nprint(int_to_mini_roman(152))\nprint(int_to_mini_roman(426))",
      -0.042144775390625
    ],
    [
      "roman_dict = {1000:'m', 900:'cm', 500:'d', 400:'cd', 100:'c', 90:'xc', 50:'l', 40:'xl', 10:'x', 9:'ix', 5:'v', 4:'iv', 1:'i'}\n    roman_num = ''\n    while number > 0:\n        for key, value in roman_dict.items():\n            while number >= key:\n                roman_num += value\n                number -= key\n    return roman_num\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    >>> int_to_roman(1990) == 'mcmlx'\n    \"\"\"\n    roman_dict = {1000:'m', 900:'cm', 500:'d', 400:'cd', 100:'c', 90:'xc', 50:'l', 40:'xl', 10:'x', 9:'ix', 5:'v', 4:'iv', 1:'i'}\n    roman_num = ''\n    while number > 0:\n        for key, value in roman_dict.items():\n            while number >= key:\n                roman_num += value\n                number -= key\n    return roman_num",
      -0.2044677734375
    ],
    [
      "result = ''\n    if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000')\n    if number == 1000:\n        return 'm'\n    if number >= 900:\n        result += 'cm'\n        number -= 900\n    if number >= 500:\n        result += 'd'\n        number -= 500\n    if number >= 400:\n        result += 'cd'\n        number -= 400\n    if number >= 100:\n        result += 'c'\n        number -= 100\n    if number >= 90:\n        result += 'xc'\n        number -= 90\n    if number >= 50:\n        result += 'l'\n        number -= 50\n    if number >= 40:\n        result += 'xl'\n        number -= 40\n    if number >= 10:\n        result += 'x'\n        number -= 10\n    if number >= 9:\n        result += 'ix'\n        number -= 9\n    if number >= 5:\n        result += 'v'\n        number -= 5\n    if number >= 4:\n        result += 'iv'\n        number -= 4\n    if number >= 1:\n        result += 'i'\n        number -= 1\n    return result\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    if number < 1 or number > 3000:\n        raise ValueError('number must be between 1 and 3000')\n    if number == 1000:",
      -0.249267578125
    ],
    [
      "num = number\n    res = ''\n    while num > 0:\n        if num // 1000:\n            res += 'm' * (num // 1000)\n            num %= 1000\n        if num // 900:\n            res += 'cm' * (num // 900)\n            num %= 900\n        if num // 500:\n            res += 'd' * (num // 500)\n            num %= 500\n        if num // 400:\n            res += 'cd' * (num // 400)\n            num %= 400\n        if num // 100:\n            res += 'c' * (num // 100)\n            num %= 100\n        if num // 90:\n            res += 'xc' * (num // 90)\n            num %= 90\n        if num // 50:\n            res += 'l' * (num // 50)\n            num %= 50\n        if num // 40:\n            res += 'xl' * (num // 40)\n            num %= 40\n        if num // 10:\n            res += 'x' * (num // 10)\n            num %= 10\n        if num // 9:\n            res += 'ix' * (num // 9)\n            num %= 9\n        if num // 5:\n            res += 'v' * (num // 5)\n            num %= 5\n        if num // 4:\n            res += 'iv' * (num // 4)\n            num %= 4\n        if num // 1:\n            res += 'i' * (num // 1)\n            num %= 1\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.30859375
    ],
    [
      "# Your code here\n    return ''\n\n\ndef int_to_mini_roman_v2(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Your code here\n    return ''\n\n\ndef int_to_mini_roman_v3(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Your code here\n    return ''\n\n\ndef int_to_mini_roman_v4(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Your code here\n    return ''\n\n\ndef int_to_mini_roman_v5(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1",
      -0.45849609375
    ],
    [
      "# TODO: implement int_to_mini_roman\n    # raise NotImplementedError\n\n    # Roman numeral dictionary\n    roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n\n    # Roman numeral conversion\n    roman_num = ''\n    for k, v in roman_dict.items():\n        while number >= k:\n            roman_num += v\n            number -= k\n    return roman_num\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO: implement int_to_roman\n    # raise NotImplementedError\n    # Roman numeral dictionary\n    roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n\n    # Roman numeral conversion\n    roman_num = ''\n    for k, v in roman_dict.items():\n        while number >= k:\n            roman_num += v",
      -0.479248046875
    ],
    [
      "# Your code here\n    if number <= 0:\n        return ''\n    elif number >= 1000:\n        return ''\n    else:\n        if number >= 1000:\n            return ''\n        elif number >= 100:\n            return ''\n        elif number >= 10:\n            return ''\n        else:\n            return ''",
      -0.85693359375
    ],
    [
      "roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    roman_num_str = ''\n    for num, roman_num in roman_numerals.items():\n        roman_num_str += (number // num) * roman_num\n        number %= num\n    return roman_num_str\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# TODO: YOUR CODE HERE\n    raise NotImplementedError\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# Your code here\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    if number < 1 or number > 1000:\n        return 'Invalid input.'\n    else:\n        roman_num = ''\n        for key, value in roman_dict.items():\n            while number >= key:\n                roman_num += value\n                number -= key\n        return roman_num\n\n\nprint(int_to_mini_roman(19))\nprint(int_to_mini_roman(152))\nprint(int_to_mini_roman(426))",
      -0.85693359375
    ],
    [
      "# Convert the number into a string\n    number = str(number)\n\n    # Create a dictionary of roman numeral values\n    roman_values = {\n        '1': 'i',\n        '2': 'x',\n        '3': 'c',\n        '4': 'd',\n        '5': 'v',\n        '6': 'l',\n        '7': 'xi',\n        '8': 'ix',\n        '9': 'x'\n    }\n\n    # Create a list of roman numerals\n    roman_numerals = []\n\n    # Iterate over the string\n    for char in number:\n        # Add the roman numeral value to the list\n        roman_numerals.append(roman_values[char])\n\n    # Join the list of roman numerals into a string\n    roman_numeral = ''.join(roman_numerals)\n\n    # Return the string in lowercase\n    return roman_numeral.lower()",
      -0.85693359375
    ],
    [
      "roman_numerals = {1000: \"m\", 900: \"cm\", 500: \"d\", 400: \"cd\", 100: \"c\", 90: \"xc\", 50: \"l\", 40: \"xl\", 10: \"x\", 9: \"ix\", 5: \"v\", 4: \"iv\", 1: \"i\"}\n    roman_num = \"\"\n    for key in roman_numerals.keys():\n        while number >= key:\n            roman_num += roman_numerals[key]\n            number -= key\n    return roman_num\n\n\ndef main():\n    for i in range(1, 4000):\n        print(int_to_mini_roman(i))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "roman_numerals = {1000: \"m\", 900: \"cm\", 500: \"d\", 400: \"cd\", 100: \"c\", 90: \"xc\",\n                      50: \"l\", 40: \"xl\", 10: \"x\", 9: \"ix\", 5: \"v\", 4: \"iv\", 1: \"i\"}\n\n    result = \"\"\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        result += (number // key) * roman_numerals[key]\n        number %= key\n    return result.lower()\n\n\ndef main():\n    print(int_to_mini_roman(19))\n    print(int_to_mini_roman(152))\n    print(int_to_mini_roman(426))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',\n                      50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd',\n                      900: 'cm', 1000: 'm'}\n\n    roman_numeral = ''\n    for key, value in roman_numerals.items():\n        while number >= key:\n            roman_numeral += value\n            number -= key\n\n    return roman_numeral.lower()",
      -0.85693359375
    ],
    [
      "# your code here\n    d = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for key, value in d.items():\n        while number >= key:\n            number -= key\n            result += value\n\n    return result\n\n\nprint(int_to_mini_roman(19))\nprint(int_to_mini_roman(152))\nprint(int_to_mini_roman(426))",
      -0.85693359375
    ],
    [
      "int_to_roman = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n\n    roman_num = ''\n\n    for i in sorted(int_to_roman, reverse=True):\n        roman_num += int_to_roman[i] * (number // i)\n        number %= i\n\n    return roman_num\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "roman_numerals = [\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100),\n        ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9), ('V', 5),\n        ('IV', 4), ('I', 1)]\n    roman_number = ''\n    for numeral, value in roman_numerals:\n        while number >= value:\n            roman_number += numeral\n            number -= value\n    return roman_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# TODO: Your code here!\n    #pass\n    return ''\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if number > 1000 or number < 1:\n        raise ValueError(\"number must be between 1 and 1000\")\n    result = \"\"\n    for num, letter in [(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"), (100, \"c\"),\n                        (90, \"xc\"), (50, \"l\"), (40, \"xl\"), (10, \"x\"), (9, \"ix\"),\n                        (5, \"v\"), (4, \"iv\"), (1, \"i\")]:\n        while number >= num:\n            number -= num\n            result += letter\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if number == 0:\n        return ''\n\n    int_to_roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n\n    roman_number = ''\n    for int_value, roman_value in reversed(sorted(int_to_roman_dict.items())):\n        while number >= int_value:\n            roman_number += roman_value\n            number -= int_value\n\n    return roman_number",
      -0.85791015625
    ],
    [
      "# TODO: implement int_to_mini_roman\n    raise NotImplementedError()\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "int_to_roman = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_number = ''\n\n    for integer, roman in int_to_roman.items():\n        while number >= integer:\n            roman_number += roman\n            number -= integer\n\n    return roman_number\n\n\nprint(int_to_mini_roman(19))\nprint(int_to_mini_roman(152))\nprint(int_to_mini_roman(426))",
      -0.8583984375
    ],
    [
      "num = number\n    if num <= 0:\n        raise ValueError(\"Number must be positive\")\n    elif num > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n    roman_numerals = {1: \"i\", 5: \"v\", 10: \"x\", 50: \"l\", 100: \"c\", 500: \"d\", 1000: \"m\"}\n    roman_string = \"\"\n    for value in roman_numerals.values():\n        while num >= value:\n            roman_string += value\n            num -= value\n    return roman_string.lower()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "roman_numerals = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n\n    roman_number = \"\"\n\n    for digit in sorted(roman_numerals.keys()):\n        while number >= digit:\n            roman_number += roman_numerals[digit]\n            number -= digit\n\n    return roman_number.lower()",
      -0.8583984375
    ],
    [
      "if number < 1 or number > 1000:\n        raise ValueError(\"number must be between 1 and 1000\")\n    roman_numerals = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    ]\n    roman_numeral = ''\n    for (n, roman) in roman_numerals:\n        while number >= n:\n            roman_numeral += roman\n            number -= n\n    return roman_numeral",
      -0.8583984375
    ],
    [
      "# TODO: Check if number is an int and raise TypeError if not\n    # TODO: Check if number is positive and raise ValueError if not\n    # TODO: Check if number is in the range 1 <= number <= 1000\n    # TODO: Implement the function\n\n    # The following is a start.\n    # TODO: Remove the 'pass' statement and implement the function.\n    # TODO: You may want to define a helper function.\n    pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "int_to_roman = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n    return ''.join(int_to_roman[int(d)] for d in str(number)).lower()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "num_map = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i',\n    }\n    roman_number = ''\n    for num, roman in num_map.items():\n        while number >= num:\n            roman_number += roman\n            number -= num\n    return roman_number\n\n\nif __name__ == '__main__':\n    print(int_to_mini_roman(19))\n    print(int_to_mini_roman(152))\n    print(int_to_mini_roman(426))",
      -0.85888671875
    ],
    [
      "roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    if number <= 0:\n        raise ValueError('Input must be a positive integer.')\n\n    if number > 1000:\n        raise ValueError('Input must be less than 1000.')\n\n    roman_numeral = ''\n\n    for digit in roman_numerals:\n        if digit <= number:\n            roman_numeral += roman_numerals[digit]\n            number -= digit\n        if number == 0:\n            break\n\n    return roman_numeral.lower()\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    result = ''\n    for i in range(len(numbers)):\n        while number >= numbers[i]:\n            number -= numbers[i]\n            result += roman_numerals[i]\n    return result.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "if number == 1000:\n        return \"m\"\n\n    roman_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    }\n\n    roman_num = \"\"\n    for roman_num_value in roman_map:\n        roman_num_rep = roman_map[roman_num_value]\n        while number >= roman_num_value:\n            roman_num += roman_num_rep\n            number -= roman_num_value\n    return roman_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "int_to_roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n    roman_num = ''\n    for num in sorted(int_to_roman.keys(), reverse=True):\n        div, mod = divmod(number, num)\n        roman_num += int_to_roman[num] * div\n        number = mod\n    return roman_num.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "# Your code here\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm',\n    }\n\n    roman_numeral = ''\n\n    if number < 1 or number > 1000:\n        raise Exception('Input must be between 1 and 1000')\n\n    for digit in roman_numerals.keys():\n        while number >= digit:\n            roman_numeral += roman_numerals[digit]\n            number -= digit\n\n    return roman_numeral.lower()",
      -0.85888671875
    ],
    [
      "if number < 1 or number > 1000:\n        return \"Invalid number\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n    roman_numeral_list = []\n    for number, numeral in roman_numerals.items():\n        while number <= number:\n            roman_numeral_list.append(numeral)\n            number -= number\n    return ''.join(roman_numeral_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "roman_numerals = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n\n    roman_numeral = \"\"\n    for value in roman_numerals:\n        while number >= value:\n            roman_numeral += roman_numerals[value]\n            number -= value\n\n    return roman_numeral\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "# check that input is an integer\n    assert type(number) == int\n\n    # check that input is a positive integer\n    assert number >= 1\n\n    # check that input is not greater than 1000\n    assert number <= 1000\n\n    # check that input is not a zero\n    assert number != 0\n\n    # create the number dictionary\n    number_dictionary = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n\n    # initialise the string for the roman numeral\n    roman_numeral = \"\"\n\n    # loop over the dictionary and add the roman numeral equivalents to the string\n    for value in number_dictionary.keys():\n        while number >= value:\n            roman_numeral += number_dictionary[value]\n            number -= value\n\n    # return the roman numeral in lowercase\n    return roman_numeral.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    # check that input is an integer\n    assert type(number) == int\n\n    # check that input is a positive integer\n    assert number >= 1\n\n    # check that input is not greater than 1000\n    assert number <= 1000\n\n    # check that input is not a zero\n    assert number != 0\n\n    # create the number",
      -0.9150390625
    ],
    [
      "mini_roman_numerals = [\n        'm', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'\n    ]\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n\n    roman_numeral = ''\n    for i in range(len(values)):\n        while number >= values[i]:\n            roman_numeral += mini_roman_numerals[i]\n            number -= values[i]\n\n    return roman_numeral.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [\n        'm', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'\n    ]\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n\n    roman_numeral = ''\n    for i in range(len(values)):\n        while number >= values[i]:\n            roman_numeral += roman_numerals[i]\n            number -= values[i]\n\n    return roman_numeral.lower()\n\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a string, obtain its roman numeral equivalent as an integer, and\n    return",
      -0.9873046875
    ],
    [
      "# assert isinstance(number, int), 'number must be an integer'\n    # assert number >= 1, 'number must be greater than or equal to 1'\n    # assert number <= 1000, 'number must be less than or equal to 1000'\n    roman_numerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm',\n    }\n    roman_numeral_values = [1, 5, 10, 50, 100, 500, 1000]\n\n    roman_numeral_list = []\n    while number:\n        for roman_numeral in roman_numeral_values:\n            if number >= roman_numeral:\n                roman_numeral_list.append(roman_numerals[roman_numeral])\n                number -= roman_numeral\n                break\n\n    return ''.join(roman_numeral_list)\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    # assert isinstance(number, int), 'number must be an integer'\n    # assert number >= 1, 'number must be greater than or equal to 1'\n    # assert number <= 1000, 'number must be less than or equal to 1000'\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: '",
      -1.060546875
    ],
    [
      "int_to_roman = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xc',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cd',\n        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dccc',\n        900: 'cm',\n        1000: 'm',\n    }\n\n    roman = ''\n    while number > 0:\n        for num, roman_num in sorted(int_to_roman.items(), reverse=True):\n            if num <= number:\n                roman += roman_num\n                number -= num\n                break\n\n    return roman",
      -1.25
    ],
    [
      "# your code here\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm',\n    }\n    number = str(number)\n    result = \"\"\n    i = len(number) - 1\n    while i >= 0:\n        if i - 1 >= 0 and int(number[i] + number[i - 1]) < 4:\n            result += roman_numerals[int(number[i])] * (4 - int(number[i - 1]))\n            i -= 2\n        else:\n            result += roman_numerals[int(number[i])]\n            i -= 1\n    return result.lower()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.625
    ],
    [
      "# Roman numerals are written from left to right in descending order\n    # 1000 = M, 900 = CM, 500 = D, 400 = CD, 100 = C, 90 = XC, 50 = L, 40 = XL, 10 = X, 9 = IX, 5 = V, 4 = IV, 1 = I\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n\n    # We will use the roman_numerals dictionary to convert the number to a string of roman numerals\n    roman_number = ''\n    for value, numeral in roman_numerals.items():\n        # We will use integer division to get the number of times the numeral is used\n        while number >= value:\n            roman_number += numeral\n            number -= value\n    return roman_number.lower()\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Roman numerals are written from left to right in descending order\n    # 1000 = M, 900 = CM, 500 = D, 400 = CD, 100 = C, 90 = XC, 50 = L, 40 = XL, 10 = X, 9 = IX, 5 = V, 4 =",
      -1.828125
    ],
    [
      "# your code here\n\n    # The idea is to convert the number into a string, and then iterate through\n    # it. If the number is divisible by 1000, then we add the appropriate\n    # character to the string, and divide the number by 1000.\n    # If it is divisible by 100, then we add the appropriate character to the\n    # string, and divide the number by 100.\n    # If it is divisible by 10, then we add the appropriate character to the\n    # string, and divide the number by 10.\n    # If it is not divisible by 10, then we add the appropriate character to\n    # the string, and subtract 5 times the number from the original number.\n    roman = ''\n    if number < 1 or number > 1000:\n        raise ValueError('Please enter a number between 1 and 1000')\n    else:\n        while number > 0:\n            if number // 1000 == 1:\n                roman += 'm'\n                number = number - 1000\n            elif number // 1000 >= 2:\n                roman += 'm' * (number // 1000)\n                number = number - 1000 * (number // 1000)\n            if number // 100 == 1:\n                roman += 'c'\n                number = number - 100\n            elif number // 100 >= 2:\n                roman += 'c' * (number // 100)\n                number = number - 100 * (number // 100)\n            if number // 10 == 1:\n                roman += 'x'\n                number = number - 10\n            elif number // 10 >= 2:\n                roman += 'x' * (number // 10)\n                number = number - 10 * (number // 10)\n            if number >= 5:\n                roman += 'v'\n                number = number - 5\n            elif number == 4:\n                roman += 'iv'\n                number = number - 4",
      -1.9326171875
    ],
    [
      "roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n                      100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n                      10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    roman_number = ''\n    for value in roman_numerals:\n        while number >= value:\n            roman_number += roman_numerals[value]\n            number -= value\n    return roman_number\n\n\ndef int_to_mini_roman_v2(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n                      100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n                      10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    roman_number = ''\n    for value in roman_numerals:\n        roman_number += roman_numerals[value] * (number // value)\n        number %= value\n    return roman_number\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to",
      -2.048828125
    ],
    [
      "# Convert the integer to a string\n    num = str(number)\n\n    # Define the individual roman numeral characters\n    ones = ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix']\n    tens = ['', 'x', 'xx', 'xxx', 'l', 'lx', 'lxx', 'lxxx', 'xc']\n    hun = ['', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm']\n\n    # Build the roman numeral\n    result = ''\n    for i in range(len(num), 0, -1):\n        digit = num[i - 1]\n        if i == 4:\n            result = hun[int(digit)] + result\n        elif i == 3:\n            result = tens[int(digit)] + result\n        else:\n            result = ones[int(digit)] + result\n\n    return result\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(int_to_mini_roman(number))\n\n\nif __name__ == '__main__':\n    main()",
      -2.537109375
    ],
    [
      "roman_numeral_map = zip((1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1),\n                            ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'))\n\n    result = []\n    for denom, numeral in roman_numeral_map:\n        count = number / denom\n        result.append(numeral * count)\n        number -= denom * count\n\n    return ''.join(result)\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numeral_map = zip((1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1),\n                            ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'))\n\n    result = []\n    for denom, numeral in roman_numeral_map:\n        count = number // denom\n        result.append(numeral * count)\n        number -= denom * count\n\n    return ''.join(result)\n\n\ndef roman_to_int(number):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent and return it.\n    Restrictions: number.lower() in ['i', 'v', 'x', 'l', 'c',",
      -2.64453125
    ],
    [
      "roman = ''\n    roman_symbols = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n                     90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v',\n                     4: 'iv', 1: 'i'}\n\n    for roman_symbol, value in roman_symbols.items():\n        while number >= roman_symbol:\n            roman += value\n            number -= roman_symbol\n\n    return roman\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = ''\n    roman_symbols = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n                     90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v',\n                     4: 'iv', 1: 'i'}\n\n    for roman_symbol, value in roman_symbols.items():\n        while number >= roman_symbol:\n            roman += value\n            number -= roman_symbol\n\n    return roman\n\n\ndef roman_to_int(roman):\n    \"\"\"\n    Given a string representing a roman numeral, return its integer value.\n    Restrictions: roman string can only contain the characters:\n    'i' , 'v', 'x', 'l', 'c', 'd', 'm'\n    'i' represents 1\n    'v' represents",
      -2.779296875
    ],
    [
      "if number <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    if number > 1000:\n        raise ValueError(\"Input must be <= 1000\")\n\n    roman_numerals = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\",\n        9: \"ix\",\n        10: \"x\",\n        20: \"xx\",\n        30: \"xxx\",\n        40: \"xl\",\n        50: \"l\",\n        60: \"lx\",\n        70: \"lxx\",\n        80: \"lxxx\",\n        90: \"xc\",\n        100: \"c\",\n        200: \"cc\",\n        300: \"ccc\",\n        400: \"cd\",\n        500: \"d\",\n        600: \"dc\",\n        700: \"dcc\",\n        800: \"dccc\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n    # The roman numeral system has no zero, so we have to deal with each\n    # of the numbers 1, 2, ..., 1000 differently.\n    if number <= 10:\n        return roman_numerals[number]\n    elif number <= 100:\n        return roman_numerals[number // 10 * 10] + roman_numerals[number % 10]\n    elif number <= 1000:\n        return (\n            roman_numerals[number // 100]\n            + roman_numerals[100]\n            + roman_numerals[number % 100]\n        )\n    else:\n        raise ValueError(\"Input must be <= 1000\")",
      -2.8359375
    ],
    [
      "int_to_roman = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value in int_to_roman.keys():\n        while number >= value:\n            result += int_to_roman[value]\n            number -= value\n\n    return result.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    int_to_roman = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value in int_to_roman.keys():\n        while number >= value:\n            result += int_to_roman[value]\n            number -= value\n\n    return result.lower()\n\n\ndef roman_to_int(number):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent and return it.\n    Restrictions: 1 <= num <= 39",
      -2.84765625
    ],
    [
      "int_to_roman_dict = {\n        1000: 'm',\n        500: 'd',\n        100: 'c',\n        50: 'l',\n        10: 'x',\n        5: 'v',\n        1: 'i'\n    }\n\n    int_to_roman_dict_values = sorted(int_to_roman_dict.values(), reverse=True)\n    int_to_roman_dict_keys = sorted(int_to_roman_dict.keys(), reverse=True)\n\n    roman_numeral = ''\n    number_copy = number\n    i = 0\n    while number_copy > 0:\n        if number_copy - int_to_roman_dict_keys[i] >= 0:\n            roman_numeral += int_to_roman_dict_values[i]\n            number_copy -= int_to_roman_dict_keys[i]\n        else:\n            i += 1\n    return roman_numeral.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLIV'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    int_to_roman_dict = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    int_to_roman_dict_values = sorted(int_to_roman_dict.values",
      -3.0234375
    ],
    [
      "num_to_roman_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xc',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cd',\n        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dccc',\n        900: 'cm',\n        1000: 'm',\n    }\n\n    if number == 0:\n        return '0'\n\n    # build up the roman numeral from right to left\n    # by repeatedly dividing by 10\n    result = ''\n    while number > 0:\n        if number >= 1000:\n            result = 'm' + result\n            number -= 1000\n        elif number >= 900:\n            result = 'cm' + result\n            number -= 900\n        elif number >= 500:\n            result = 'd' + result\n            number -= 500\n        elif number >= 400:\n            result = 'cd' + result\n            number -= 400\n        elif number >= 100:\n            result = 'c' + result\n            number -= 100\n        elif number >= 90:\n            result = 'xc' + result\n            number -= 90\n        elif number >= 50:\n            result = 'l' + result\n            number -= 50\n        elif number >= 40:\n            result = 'xl' + result\n            number -= 40",
      -3.044921875
    ],
    [
      "# Check if input is not a number\n    try:\n        int(number)\n    except ValueError:\n        return \"Input is not a number\"\n\n    # Check if input is not a positive integer\n    if number < 1:\n        return \"Input is not a positive integer\"\n\n    # Check if input is not between 1 and 1000\n    if number > 1000:\n        return \"Input is not between 1 and 1000\"\n\n    # Check if input is 1000\n    if number == 1000:\n        return \"m\"\n\n    # Check if input is 900\n    if number == 900:\n        return \"cm\"\n\n    # Check if input is 500\n    if number == 500:\n        return \"d\"\n\n    # Check if input is 400\n    if number == 400:\n        return \"cd\"\n\n    # Check if input is 100\n    if number == 100:\n        return \"c\"\n\n    # Check if input is 90\n    if number == 90:\n        return \"xc\"\n\n    # Check if input is 50\n    if number == 50:\n        return \"l\"\n\n    # Check if input is 40\n    if number == 40:\n        return \"xl\"\n\n    # Check if input is 10\n    if number == 10:\n        return \"x\"\n\n    # Check if input is 9\n    if number == 9:\n        return \"ix\"\n\n    # Check if input is 5\n    if number == 5:\n        return \"v\"\n\n    # Check if input is 4\n    if number == 4:\n        return \"iv\"\n\n    # Check if input is 1\n    if number == 1:\n        return \"i\"\n\n    # Check if input is between 2 and 9\n    if 2 <= number <= 9:\n        return \"i\" * (number - 1)\n\n\nprint(int_to_mini_roman(19))\nprint",
      -3.236328125
    ],
    [
      "roman_dict = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_num = ''\n\n    for num in roman_dict:\n        while number >= num:\n            roman_num += roman_dict[num]\n            number -= num\n\n    return roman_num.lower()\n\ndef mini_roman_to_int(roman_num):\n    \"\"\"\n    Given a string of roman numerals in lowercase, obtain its integer value\n    and return it.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    roman_dict = {\n        'm': 1000,\n        'cm': 900,\n        'd': 500,\n        'cd': 400,\n        'c': 100,\n        'xc': 90,\n        'l': 50,\n        'xl': 40,\n        'x': 10,\n        'ix': 9,\n        'v': 5,\n        'iv': 4,\n        'i': 1\n    }\n\n    number = 0\n\n    for char in roman_num:\n        number += roman_dict[char]\n\n    return number\n\ndef roman_to_int(roman_num):\n    \"\"\"\n    Given a string of roman numerals in lowercase, obtain its integer value\n    and return it.\n    Restrictions: 1 <= num <= 3999",
      -3.375
    ],
    [
      "# your code here\n    d = {1:'i', 4:'iv', 5:'v', 9:'ix', 10:'x', 40:'xl', 50:'l', 90:'xc', 100:'c', 400:'cd', 500:'d', 900:'cm', 1000:'m'}\n    num = number\n    s = ''\n    for k in sorted(d.keys(), reverse=True):\n        while num >= k:\n            num -= k\n            s += d[k]\n    return s.lower()\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string.\n    Restrictions: 1 <= num <= 3000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    >>> int_to_roman(1426) == 'mcdxxvi'\n    >>> int_to_roman(3426) == 'mmcdxxvi'\n    >>> int_to_roman(1000) == 'm'\n    >>> int_to_roman(3000) == 'mmm'\n    \"\"\"\n    # your code here\n    d = {1000:'m', 900:'cm', 500:'d', 400:'cd', 100:'c', 90:'xc', 50:'l', 40:'xl', 10:'x', 9:'ix', 5:'v', 4:'iv', 1:'i'}\n    num = number\n    s = ''\n    for k in sorted(d.keys(), reverse=True):\n        while num >= k:\n            num -= k\n            s += d[k]\n    return s\n\ndef roman_to_int(roman_string):\n    \"\"\"\n    Given a string, obtain its integer equivalent.\n    Restrictions:",
      -3.48046875
    ],
    [
      "num = number\n    result = \"\"\n    while num > 0:\n        if num >= 1000:\n            result += \"m\"\n            num -= 1000\n        elif num >= 900:\n            result += \"cm\"\n            num -= 900\n        elif num >= 500:\n            result += \"d\"\n            num -= 500\n        elif num >= 400:\n            result += \"cd\"\n            num -= 400\n        elif num >= 100:\n            result += \"c\"\n            num -= 100\n        elif num >= 90:\n            result += \"xc\"\n            num -= 90\n        elif num >= 50:\n            result += \"l\"\n            num -= 50\n        elif num >= 40:\n            result += \"xl\"\n            num -= 40\n        elif num >= 10:\n            result += \"x\"\n            num -= 10\n        elif num >= 9:\n            result += \"ix\"\n            num -= 9\n        elif num >= 5:\n            result += \"v\"\n            num -= 5\n        elif num >= 4:\n            result += \"iv\"\n            num -= 4\n        elif num >= 1:\n            result += \"i\"\n            num -= 1\n    return result.lower()\n\n\ndef test_int_to_mini_roman():\n    assert int_to_mini_roman(19) == \"xix\"\n    assert int_to_mini_roman(152) == \"clii\"\n    assert int_to_mini_roman(426) == \"cdxxvi\"\n    assert int_to_mini_roman(1426) == \"mcdxxvi\"\n    assert int_to_mini_roman(1421) == \"mcdxxi\"\n    assert int_to_mini_roman(1400) == \"mcd\"\n    assert int_to_mini_roman(1900) == \"mc\"\n    assert int_to_min",
      -3.6484375
    ],
    [
      "# Your code here\n    roman_numeral_table = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000\n    }\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numeral_values = [\n        1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n    ]\n    result = \"\"\n    for numeral, value in zip(roman_numerals, roman_numeral_values):\n        while number >= value:\n            number -= value\n            result += numeral\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.1484375
    ],
    [
      "def roman_digit(n, base):\n        return 'ivx'[n // base] * (n % base > 3)\n\n    return ''.join(roman_digit(n, 10) + roman_digit(n, 5) + roman_digit(n, 1)\n                   for n in map(int, str(number)))\n\n\ndef roman_to_int(roman):\n    \"\"\"\n    Given a string of roman numerals, return its integer equivalent.\n    Restrictions:\n    * 1 <= roman.length <= 100\n    * roman contains only the characters I, V, X, L, C, D, and M.\n    * roman is well-formed.\n    \"\"\"\n\n    def roman_digit(roman, base):\n        return {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}[roman]\n\n    return sum(roman_digit(roman, 10 ** i) * (roman_digit(roman[-i - 1], 10 ** i) > roman_digit(roman[-i - 2], 10 ** i) and 1 or -1)\n               for i in range(len(roman) - 1, -1, -1))\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLIV'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n\n    def roman_digit(n, base):\n        return 'IVX'[n // base] * (n % base > 3)\n\n    return ''.join(roman_digit(n, 10) + roman_digit(n",
      -4.17578125
    ],
    [
      "roman_numerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n\n    def int_to_roman(number):\n        for i in range(len(roman_numerals) - 1, -1, -1):\n            if number >= list(roman_numerals.values())[i]:\n                number -= list(roman_numerals.values())[i]\n                return roman_numerals.get(list(roman_numerals.keys())[i]) + int_to_roman(number)\n        return ''\n    return int_to_roman(number).lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n\n    def int_to_roman(number):\n        for i in range(len(roman_numerals) - 1, -1, -1):\n            if number >= list(roman_numerals.values())[i]:\n                number -= list(roman_numerals.values())[i]\n                return roman_numerals.get(list(roman_numerals.keys())[i]) + int_to_roman(number)\n        return ''\n    return int_to_roman(number).lower()",
      -4.47265625
    ],
    [
      "# The first 3 letters of the alphabet\n    small_roman_letters = ['i', 'x', 'c']\n    # The second 3 letters of the alphabet\n    big_roman_letters = ['v', 'l', 'd']\n    # The third 3 letters of the alphabet\n    extra_roman_letters = ['m', 's', 'r']\n\n    # We will use this to store the roman numeral\n    roman_numeral = ''\n\n    # We will divide by 1000, 100, 10, and 1\n    # and add the roman numerals to the string\n    for division in [1000, 100, 10, 1]:\n        # Get the number of times we need to add the roman letter\n        number_of_letters = number // division\n\n        # Get the roman letter to add\n        letter = ''\n        if division == 1000:\n            letter = small_roman_letters[0]\n        elif division == 100:\n            letter = small_roman_letters[1]\n        elif division == 10:\n            letter = small_roman_letters[2]\n        else:\n            letter = big_roman_letters[0]\n\n        # Add the roman letter to the string\n        roman_numeral += letter * number_of_letters\n\n        # Subtract the number of letters we just added\n        number -= number_of_letters * division\n\n    # Return the roman numeral\n    return roman_numeral\n\n\ndef int_to_mini_roman_2(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"",
      -4.83203125
    ],
    [
      "num_to_roman = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm',\n    }\n\n    # This is the most efficient way to do this,\n    # because it takes advantage of the fact that\n    # the roman numerals are built up in order.\n    # It's O(n) time and O(1) space.\n    roman = ''\n    while number:\n        for n in sorted(num_to_roman.keys(), reverse=True):\n            if number >= n:\n                number -= n\n                roman += num_to_roman[n]\n                break\n    return roman\n\n\ndef roman_to_int(roman):\n    \"\"\"\n    Given a string representing a roman numeral,\n    return its integer value.\n    Restrictions:\n    -1 <= roman <= 3999\n    roman consists of only lowercase letters\n    \"\"\"\n    num_to_roman = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm',\n    }\n\n    roman_to_num = {v: k for k, v in num_to_roman.items()}\n\n    # This is the most efficient way to do this,\n    # because it takes advantage of the fact that\n    # the roman numerals are built up in order.\n    # It's O(n) time and O(1) space.\n    num = 0\n    while roman:\n        for n in sorted(roman_to_num.keys(), reverse=True):\n            if roman.startswith(num_to_roman[n]):\n                roman = roman[len(num_to_roman[n]):]\n                num += n\n                break\n    return num\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.test",
      -5.08984375
    ],
    [
      "# Dictionary mapping ints to roman numeral letters\n    int_to_roman_dict = {\n        1 : \"i\",\n        5 : \"v\",\n        10 : \"x\",\n        50 : \"l\",\n        100 : \"c\",\n        500 : \"d\",\n        1000 : \"m\"\n    }\n\n    # List of roman numeral letters\n    roman_numerals = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n\n    # Convert number to string\n    number_str = str(number)\n\n    # Initialize string for roman numeral\n    roman_numeral = \"\"\n\n    # Iterate over number string\n    for digit in number_str:\n        # Convert digit to int\n        digit = int(digit)\n\n        # If digit is 1, 2, or 3, just add roman numeral letter\n        if digit <= 3:\n            roman_numeral += int_to_roman_dict[1] * digit\n\n        # If digit is 4, 5, or 6, add roman numeral letter and subtract 1\n        elif digit <= 6:\n            roman_numeral += int_to_roman_dict[5]\n            roman_numeral += int_to_roman_dict[1] * (digit % 5)\n\n        # If digit is 7, 8, or 9, subtract roman numeral letter and add 1\n        elif digit <= 9:\n            roman_numeral += int_to_roman_dict[10]\n            roman_numeral += int_to_roman_dict[5] * (digit % 10)\n\n    # Return lowercase roman numeral\n    return roman_numeral.lower()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.30078125
    ],
    [
      "if number <= 0:\n        return ''\n    elif number < 10:\n        return chr(ord('i') + number - 1)\n    elif number < 100:\n        return int_to_mini_roman(number // 10) + int_to_mini_roman(number % 10)\n    elif number < 1000:\n        return (int_to_mini_roman(number // 100) + 'c' +\n                int_to_mini_roman(number % 100))\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral as a string, obtain its equivalent integer value.\n    Restrictions: roman.lower()\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if roman == '':\n        return 0\n    elif roman[-1] == 'i':\n        return ord(roman[-1]) - ord('i') + mini_roman_to_int(roman[:-1])\n    elif roman[-1] == 'x':\n        return 10 + mini_roman_to_int(roman[:-1])\n    elif roman[-1] == 'c':\n        return 100 + mini_roman_to_int(roman[:-1])\n    elif roman[-1] == 'm':\n        return 1000 + mini_roman_to_int(roman[:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.63671875
    ],
    [
      "# check the input\n    if not 1 <= number <= 1000:\n        raise ValueError('number must be in range [1, 1000]')\n\n    # the dictionary to convert the digits\n    roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm',\n    }\n\n    # start with the highest number, and keep subtracting the number from the\n    # highest number until it becomes less than the number. When this happens,\n    # we know that the current number is the one we are looking for.\n    roman = ''\n    current_number = 1000\n    while current_number >= number:\n        # check if the number is greater than 1000\n        if current_number == 1000:\n            if number >= 900:\n                roman += roman_dict[900]\n                number -= 900\n            elif number >= 500:\n                roman += roman_dict[500]\n                number -= 500\n            elif number >= 100:\n                roman += roman_dict[100]\n                number -= 100\n            elif number >= 90:\n                roman += roman_dict[90]\n                number -= 90\n            elif number >= 50:\n                roman += roman_dict[50]\n                number -= 50\n            elif number >= 10:\n                roman += roman_dict[10]\n                number -= 10\n            elif number >= 9:\n                roman += roman_dict[9]\n                number -= 9\n            elif number >= 5:\n                roman += roman_dict[5]\n                number -= 5\n            elif number >= 4:\n                roman += roman_dict[4]\n                number",
      -5.70703125
    ],
    [
      "if number < 1 or number > 1000:\n        raise ValueError(\"Only integers in range [1, 1000] are accepted\")\n    if number < 4:\n        return \"ivx\".index(\"ivx\".find(\"ivx\".find(\"ivx\".find(\"i\", number) - 1) - 1) - 1) * \"ivx\"[\n            \"ivx\".find(\"i\", number) - 1\n        ]\n    if number % 100 == 0:\n        return \"c\" * (number // 100) + \"m\"\n    if number % 100 < 50:\n        return \"c\" * (number // 100) + int_to_mini_roman(number % 100)\n    if number % 100 == 90:\n        return \"x\" * (number // 100) + \"c\"\n    if number % 10 == 0:\n        return \"x\" * (number // 10)\n    if number % 10 < 5:\n        return \"x\" * (number // 10) + \"v\" * (number % 10)\n    if number % 10 == 9:\n        return \"x\" * (number // 10) + \"i\"\n    return \"x\" * (number // 10) + int_to_mini_roman(number % 10)",
      -5.87109375
    ],
    [
      "if not 0 < number < 1000:\n        raise ValueError('number must be between 1 and 1000')\n\n    # The Roman numeral system uses seven symbols: I, V, X, L, C, D and M.\n    #\n    # The values of these symbols are as follows:\n    #     I = 1\n    #     V = 5\n    #     X = 10\n    #     L = 50\n    #     C = 100\n    #     D = 500\n    #     M = 1000\n    #\n    # Whenever a smaller number follows a larger number, the smaller number is\n    # subtracted from the larger number.\n    #\n    # For example, four is written as IV in Roman numeral, just two smaller\n    # numbers are subtracted from the larger number four.\n    #\n    # Nine is written as IX in Roman numeral, the same way as four is\n    # written as IV.\n    #\n    # Five is written as V in Roman numeral, which is five on its own.\n    # There is no need to make it from other numbers.\n    #\n    # Twenty seven is written as XXVII, which is twenty five plus 2 and\n    # seven minus 20.\n    #\n    # Eighty six is written as LXXXVI, which is eighty minus 80 plus 6.\n    #\n    # The rules of subtraction are:\n    #\n    #     I can be placed before V (5) and X (10) to make 4 and 9.\n    #     X can be placed before L (50) and C (100) to make 40 and 90.\n    #     C can be placed before D (500) and M (1000) to make 400 and 900.\n    #\n    # Example: 19 = XI + IX = 10 + 1 = 11\n    #\n    # Example: 152 = CL + LX = 500 + 100 + 20 + 2 = 602\n    #",
      -5.8984375
    ],
    [
      "num_str = str(number)\n    num_list = list(num_str)\n    num_list.reverse()\n    output = []\n    for i in range(len(num_list)):\n        if int(num_list[i]) == 1:\n            if i == len(num_list) - 1:\n                output.append('i')\n            else:\n                if int(num_list[i + 1]) == 0:\n                    output.append('i')\n                else:\n                    if int(num_list[i + 1]) == 1:\n                        output.append('x')\n                    elif int(num_list[i + 1]) == 2:\n                        output.append('xx')\n                    elif int(num_list[i + 1]) == 3:\n                        output.append('xxx')\n                    elif int(num_list[i + 1]) == 4:\n                        output.append('l')\n                    elif int(num_list[i + 1]) == 5:\n                        output.append('lx')\n                    elif int(num_list[i + 1]) == 6:\n                        output.append('lxx')\n                    elif int(num_list[i + 1]) == 7:\n                        output.append('lxxx')\n                    elif int(num_list[i + 1]) == 8:\n                        output.append('c')\n                    elif int(num_list[i + 1]) == 9:\n                        output.append('cx')\n        elif int(num_list[i]) == 2:\n            output.append('xx')\n        elif int(num_list[i]) == 3:\n            output.append('xxx')\n        elif int(num_list[i]) == 4:\n            output.append('l')\n        elif int(num_list[i]) == 5:\n            output.append('lx')\n        elif int(num_list[i]) == 6:\n            output.append('lxx')\n        elif int(num_list[i]) == 7:\n            output.append",
      -5.94921875
    ],
    [
      "if number <= 0:\n        raise ValueError(\"Only positive integers are accepted\")\n    if number > 1000:\n        raise ValueError(\"Only integers <= 1000 are accepted\")\n\n    # roman numerals are built from these\n    roman_numerals = {\n        1000: \"m\",\n        500: \"d\",\n        100: \"c\",\n        50: \"l\",\n        10: \"x\",\n        5: \"v\",\n        1: \"i\"\n    }\n\n    # keep track of how many of each numeral we need\n    roman_number = \"\"\n\n    # start with the largest possible value\n    for numeral, letter in roman_numerals.items():\n        # add the letter as many times as the value\n        for _ in range(number // numeral):\n            roman_number += letter\n\n        # remove the number of letters added\n        number -= numeral * (number // numeral)\n\n    return roman_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.984375
    ],
    [
      "# TODO: write your own code here\n    # Use the following mapping:\n    # 1000 = m\n    #  900 = cm\n    #  500 = d\n    #  400 = cd\n    #  100 = c\n    #   90 = xc\n    #   50 = l\n    #   40 = xl\n    #   10 = x\n    #    9 = ix\n    #    5 = v\n    #    4 = iv\n    #    1 = i\n    #    0 = nul\n    # https://www.mathsisfun.com/numbers/romans-numerals.html\n    int_to_roman = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n        0: 'nul',\n    }\n    roman_num = ''\n    for k, v in int_to_roman.items():\n        while number >= k:\n            roman_num += v\n            number -= k\n    return roman_num.lower()\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral as a string, return its integer equivalent as an int.\n    Restrictions: roman is in lowercase.\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    # TODO: write your own code here\n    # Use the following mapping:\n    # 1000 = m\n    #  900 = cm\n    #  500 = d\n    #  400 = cd\n    #",
      -6.25390625
    ],
    [
      "# YOUR CODE HERE\n    roman_numerals = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\",\n        9: \"ix\",\n        10: \"x\",\n        20: \"xx\",\n        30: \"xxx\",\n        40: \"xl\",\n        50: \"l\",\n        60: \"lx\",\n        70: \"lxx\",\n        80: \"lxxx\",\n        90: \"xc\",\n        100: \"c\",\n        200: \"cc\",\n        300: \"ccc\",\n        400: \"cd\",\n        500: \"d\",\n        600: \"dc\",\n        700: \"dcc\",\n        800: \"dccc\",\n        900: \"cm\",\n    }\n    return convert_to_mini_roman(number, roman_numerals)\n\n\ndef convert_to_mini_roman(num, roman_numerals):\n    if num < 1:\n        return \"\"\n    if num in roman_numerals:\n        return roman_numerals[num]\n    for i in roman_numerals:\n        if num // i > 0:\n            roman_numerals[num] = roman_numerals[i] * (num // i) + convert_to_mini_roman(\n                num - (i * (num // i)), roman_numerals\n            )\n            break\n    return roman_numerals[num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.6015625
    ],
    [
      "# your code here\n\n    if number == 1000:\n        return \"m\"\n\n    result = \"\"\n    if number >= 100:\n        if number // 100 == 9:\n            result += \"cm\"\n        elif number // 100 == 4:\n            result += \"cd\"\n        elif number // 100 == 5:\n            result += \"d\"\n        elif number // 100 == 6:\n            result += \"dc\"\n        elif number // 100 == 7:\n            result += \"dcc\"\n        elif number // 100 == 8:\n            result += \"dcc\"\n        elif number // 100 == 1:\n            result += \"c\"\n        else:\n            result += \"c\" * (number // 100)\n        number = number % 100\n\n    if number >= 10:\n        if number // 10 == 9:\n            result += \"x\"\n        elif number // 10 == 4:\n            result += \"x\"\n        elif number // 10 == 5:\n            result += \"l\"\n        elif number // 10 == 6:\n            result += \"lx\"\n        elif number // 10 == 7:\n            result += \"lxx\"\n        elif number // 10 == 8:\n            result += \"lxx\"\n        elif number // 10 == 1:\n            result += \"x\"\n        else:\n            result += \"x\" * (number // 10)\n        number = number % 10\n\n    if number >= 1:\n        if number == 9:\n            result += \"ix\"\n        elif number == 4:\n            result += \"iv\"\n        elif number == 5:\n            result += \"v\"\n        elif number == 6:\n            result += \"vi\"\n        elif number == 7:\n            result += \"vii\"\n        elif number == 8:\n            result += \"viii\"\n        elif number == 1:\n            result += \"i\"\n        else:\n            result += \"i\"",
      -6.77734375
    ],
    [
      "if number < 1 or number > 1000:\n        raise ValueError('number out of range')\n    roman_numerals = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    roman_numerals_in_order = [1000, 500, 100, 50, 10, 5, 1]\n    roman_numerals_in_order_descending = roman_numerals_in_order[::-1]\n    roman_numerals_in_order_descending.remove(1)\n    result = ''\n    for number in roman_numerals_in_order_descending:\n        if number in roman_numerals_in_order:\n            result += roman_numerals[number] * (number // 5)\n            number = number % 5\n        if number in roman_numerals:\n            result += roman_numerals[number]\n        number = number % 5\n    return result\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('number out of range')\n    roman_numerals = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    roman_numerals_in_order = [1000, 500, 100, 50, 10, 5,",
      -6.95703125
    ],
    [
      "# TODO: Your code here\n    roman_numeral_map = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"xl\",\n                         50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\", 1000: \"m\"}\n    roman_numeral_map_reverse = {v: k for k, v in roman_numeral_map.items()}\n    roman_numeral_map_reverse[\"iv\"] = 4\n    roman_numeral_map_reverse[\"ix\"] = 9\n    roman_numeral_map_reverse[\"vi\"] = 6\n    roman_numeral_map_reverse[\"vii\"] = 7\n    roman_numeral_map_reverse[\"viii\"] = 8\n    roman_numeral_map_reverse[\"ix\"] = 9\n    roman_numeral_map_reverse[\"x\"] = 10\n    roman_numeral_map_reverse[\"xi\"] = 11\n    roman_numeral_map_reverse[\"xii\"] = 12\n    roman_numeral_map_reverse[\"xiii\"] = 13\n    roman_numeral_map_reverse[\"xiv\"] = 14\n    roman_numeral_map_reverse[\"xv\"] = 15\n    roman_numeral_map_reverse[\"xvi\"] = 16\n    roman_numeral_map_reverse[\"xvii\"] = 17\n    roman_numeral_map_reverse[\"xviii\"] = 18\n    roman_numeral_map_reverse[\"xix\"] = 19\n    roman_numeral_map_reverse[\"xx\"] = 20\n    roman_numeral_map_reverse[\"xxi\"] = 21\n    roman_numeral_map_reverse[\"xxii\"] = 22\n    roman_numeral_map_reverse[\"xxiii\"] = 23\n    roman_numeral_map_reverse[\"xxiv\"] = 24\n    roman_numeral",
      -7.55078125
    ],
    [
      "assert 0 < number <= 1000\n    roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n    result = ''\n    for k, v in reversed(sorted(roman_numerals.items())):\n        while number >= k:\n            result += v\n            number -= k\n    return result\n\ndef roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, convert it to an integer.\n    Restrictions: roman.islower() == True\n\n    Examples:\n    >>> roman_to_int('xix') == 19\n    >>> roman_to_int('clii') == 152\n    >>> roman_to_int('cdxxvi') == 426\n    \"\"\"\n    assert roman.islower()\n    roman_numerals = {\n        'i': 1,\n        'iv': 4,\n        'v': 5,\n        'ix': 9,\n        'x': 10,\n        'xl': 40,\n        'l': 50,\n        'xc': 90,\n        'c': 100,\n        'cd': 400,\n        'd': 500,\n        'cm': 900,\n        'm': 1000\n    }\n    result = 0\n    for i in range(len(roman)):\n        if i < len(roman) - 1 and roman[i:i + 2] in roman_numerals:\n            result += roman_numerals[roman[i:i + 2]]\n            i += 1\n        else:\n            result += roman_numerals[roman[i]]\n    return result\n\ndef",
      -8.1015625
    ],
    [
      "roman = ''\n    # Base case\n    if number == 0:\n        return roman\n    # 1000\n    elif number % 1000 == 0:\n        roman += 'm' * (number // 1000)\n    # 900\n    elif number % 1000 == 900:\n        roman += 'cm'\n        number -= 900\n    # 500\n    elif number % 1000 == 500:\n        roman += 'd'\n        number -= 500\n    # 400\n    elif number % 1000 == 400:\n        roman += 'cd'\n        number -= 400\n    # 100\n    elif number % 100 == 100:\n        roman += 'c'\n        number -= 100\n    # 90\n    elif number % 100 == 90:\n        roman += 'xc'\n        number -= 90\n    # 50\n    elif number % 100 == 50:\n        roman += 'l'\n        number -= 50\n    # 40\n    elif number % 100 == 40:\n        roman += 'xl'\n        number -= 40\n    # 10\n    elif number % 100 == 10:\n        roman += 'x'\n        number -= 10\n    # 9\n    elif number % 100 == 9:\n        roman += 'ix'\n        number -= 9\n    # 5\n    elif number % 100 == 5:\n        roman += 'v'\n        number -= 5\n    # 4\n    elif number % 100 == 4:\n        roman += 'iv'\n        number -= 4\n    # 1\n    elif number % 100 == 1:\n        roman += 'i'\n        number -= 1\n    # 9\n    elif number % 10 == 9:\n        roman += 'ix'\n        number -= 9\n    # 5\n    elif number %",
      -8.1796875
    ],
    [
      "# Base case\n    if number == 0:\n        return ''\n\n    # Recursive case\n    # Divide by 10 and obtain the remainder\n    remainder = number % 10\n\n    # Divide by 10 and ignore the remainder\n    quotient = number // 10\n\n    # Convert the remainder to roman numeral\n    roman_numeral = remainder_to_mini_roman(remainder)\n\n    return int_to_mini_roman(quotient) + roman_numeral\n\n\ndef remainder_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 0 <= num < 10\n\n    Examples:\n    >>> remainder_to_mini_roman(1) == 'i'\n    >>> remainder_to_mini_roman(5) == 'v'\n    >>> remainder_to_mini_romal(9) == 'ix'\n    \"\"\"\n    # Base case\n    if number == 0:\n        return ''\n\n    # Recursive case\n    # Divide by 5 and obtain the remainder\n    remainder = number % 5\n\n    # Divide by 5 and ignore the remainder\n    quotient = number // 5\n\n    # Convert the remainder to roman numeral\n    roman_numeral = remainder_to_mini_roman(remainder)\n\n    return remainder_to_mini_roman_str(quotient) + roman_numeral\n\n\ndef remainder_to_mini_roman_str(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 0 <= num < 5\n\n    Examples:\n    >>> remainder_to_mini_roman_str(1) == 'x'\n    >>> remainder_to_mini_roman_str(4) == 'iv'\n    \"\"\"\n    # Base case\n    if number == 0:\n        return ''\n\n    # Recursive case\n    # Divide by",
      -8.4765625
    ],
    [
      "# your code here\n    roman = {\n        1: \"i\",\n        2: \"x\",\n        3: \"c\",\n        4: \"m\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"cd\",\n        50: \"c\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n    string = \"\"\n    for key in roman.keys():\n        while number >= key:\n            number -= key\n            string += roman[key]\n    return string\n\n\ndef mini_roman_to_int(roman_string):\n    \"\"\"\n    Given a roman numeral, return the equivalent integer.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    # your code here\n    roman = {\n        \"i\": 1,\n        \"x\": 10,\n        \"c\": 100,\n        \"m\": 1000,\n        \"v\": 5,\n        \"l\": 50,\n        \"d\": 500,\n        \"o\": 1000,\n        \"f\": 1000,\n        \"s\": 1000,\n        \"g\": 1000,\n        \"h\": 1000,\n        \"j\": 1000,\n        \"k\": 1000,\n        \"m\": 1000,\n        \"p\": 1000,\n        \"q\": 1000,\n        \"t\": 1000,\n        \"u\": 1000,\n        \"b\": 1000,\n        \"",
      -9.6328125
    ],
    [
      "# Your code here\n    # 1 10 100 1000\n    # I X L C\n    # 5 10 50 100\n    # V X L C\n    # 10 100 500 1000\n    # X C M\n    # 50 500 1000\n    # D\n\n    # 1. create a lookup table\n    # 2. check the first digit, then the second digit\n    # 3. if the digit is 1, then it is the same as the last digit\n    # 4. if the digit is 2, then it is the last digit twice\n    # 5. if the digit is 3, then it is the last digit 3 times\n    # 6. if the digit is 4, then it is the last digit + the digit before it\n    # 7. if the digit is 5, then it is the digit before it\n    # 8. if the digit is 6, then it is the digit before it + the digit before it\n    # 9. if the digit is 7, then it is the digit before it + the digit before it + the digit before it\n    # 10. if the digit is 8, then it is the digit before it + the digit before it + the digit before it + the digit before it\n    # 11. if the digit is 9, then it is the last digit + the digit before it\n\n    lookup_table = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"xl\", 50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\",\n                    500: \"d\", 900: \"cm\", 1000: \"m\"}\n    roman_num = \"\"\n    for i in range(len(str(number))):\n        num = int(str(number)[i])\n        if num == 0:\n            continue\n        elif num == 1:\n            roman_num += lookup_table[num]",
      -10.4375
    ],
    [
      "# The roman numeral equivalents of integers 1-9\n    roman_numerals = ['i', 'x', 'c', 'm', 'v', 'l', 'd', 'o', 's']\n    # The integer equivalents of roman numerals 1-9\n    integers = [1, 10, 100, 1000, 5, 50, 500, 1000, 10000]\n\n    # A list of tuples containing the roman numerals for 10, 100, 1000\n    three_digit_romans = [('x', 'c', 'm'), ('l', 'd', 'o'), ('s', 's', 's')]\n\n    # The roman numeral equivalents of the three digit numbers\n    three_digit_numerals = [('', 'c', 'c'), ('', 'd', 'd'), ('', 'o', 'o'),\n                            ('', 's', 's'), ('', '', 'v'), ('', '', 'v'),\n                            ('', '', 'v'), ('', '', 'v'), ('', '', 'v')]\n\n    # A list of tuples containing the roman numerals for 5, 50, 500\n    two_digit_romans = [('v', 'l', 'o'), ('', 's', 's')]\n\n    # The roman numeral equivalents of the two digit numbers\n    two_digit_numerals = [('', 'v', 'v'), ('', 'l', 'l'), ('', '', 'x'),\n                          ('', '', 'x'), ('', '', 'x'), ('', '', 'x'),\n                          ('', '', 'x'), ('', '', 'x'), ('', '', 'x')]\n\n    # A list of tuples containing the roman numerals for 1, 10, 100\n    one_digit_romans = [('i', 'x', 'c'), ('v', 'l', 'o'), ('i', 'x', 'c')]\n\n    # The roman numeral equivalents of the one digit numbers\n    one_digit_numerals = [('i', 'i', 'i",
      -11.0703125
    ],
    [
      "roman_numerals = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    # We will use a stack to keep track of roman numerals\n    # We will pop off the stack when we go down in value\n    # We will push off the stack when we go up in value\n    stack = []\n    for i in range(len(str(number))):\n        digit = int(number % 10)\n        if digit == 4 or digit == 9:\n            stack.append(roman_numerals[10**i])\n            stack.append(roman_numerals[digit])\n        elif digit == 0 or digit == 5:\n            stack.append(roman_numerals[10**i])\n        elif digit == 1 or digit == 2 or digit == 3:\n            if len(stack) > 0 and roman_numerals[digit] == stack[-1]:\n                stack.append(roman_numerals[digit * 5])\n            else:\n                stack.append(roman_numerals[digit])\n        elif digit == 6 or digit == 7 or digit == 8:\n            if len(stack) > 0 and roman_numerals[digit - 5] == stack[-1]:\n                stack.append(roman_numerals[digit - 5])\n                stack.append(roman_numerals[5])\n            else:\n                stack.append(roman_numerals[digit])\n        number //= 10\n    return ''.join(stack).lower()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -11.140625
    ],
    [
      "# 1000 is max number in roman numerals\n    # so we can safely assume that if the number is greater\n    # than 1000, we can divide it by 1000 and recursively call\n    # int_to_mini_roman() until the number is less than 1000\n    # then we can use a table to convert the last three digits\n    if number > 1000:\n        return int_to_mini_roman(number // 1000) + int_to_mini_roman(number % 1000)\n\n    # table of values\n    values = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n\n    # roman numerals are in descending order\n    # so we can safely assume that if the number is greater than 1000\n    # the number is equal to or greater than 1000 + 100 + 10 + 1\n    # so we can use the table to convert the last three digits\n    if number >= 1000:\n        # if the number is 1000 or greater\n        # the number is equal to or greater than 1000\n        # so we can just return 'm'\n        if number == 1000:\n            return 'm'\n        # if the number is less than 1000\n        # but greater than or equal to 900\n        # we can subtract 1000 from the number\n        # and return the roman numeral equivalent of the last three digits\n        # plus 'm'\n        elif number >= 900:\n            return int_to_mini_roman(number - 1000) + 'm'\n        # if the number is less than 900\n        # but greater than or equal to 500\n        # we can subtract 900 from the number\n        # and return the roman numeral equivalent of the last three digits",
      -11.3515625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}