{
  "problem": {
    "task_id": "HumanEval/27",
    "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
    "canonical_solution": "    return string.swapcase()\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n",
    "entry_point": "flip_case",
    "docstring": "",
    "problem_id": 27
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "new_string = ''\n    for letter in string:\n        if letter.isupper():\n            new_string += letter.lower()\n        elif letter.islower():\n            new_string += letter.upper()\n        else:\n            new_string += letter\n    return new_string",
      17.0625
    ],
    [
      "new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n\n\ndef main():\n    print(flip_case('Hello'))\n    print(flip_case('hey There'))\n\n\nif __name__ == \"__main__\":\n    main()",
      16.65625
    ],
    [
      "new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      14.7265625
    ],
    [
      "new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      14.7265625
    ],
    [
      "new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n\n\ndef flip_case2(string: str) -> str:\n    return string.swapcase()\n\n\ndef main():\n    assert flip_case('Hello') == 'hELLO', flip_case('Hello')\n    assert flip_case('hello') == 'HELLo', flip_case('hello')\n    assert flip_case('HELLO') == 'hELLo', flip_case('HELLO')\n    assert flip_case('HeLlo') == 'hEllO', flip_case('HeLlo')\n    assert flip_case('123') == '123', flip_case('123')\n    assert flip_case('$%^&') == '$%^&', flip_case('$%^&')\n    assert flip_case('') == '', flip_case('')\n    assert flip_case('a') == 'A', flip_case('a')\n\n\nif __name__ == '__main__':\n    main()",
      11.4296875
    ],
    [
      "# Step 1: Initialize an empty string, result, to collect the flipped characters.\n    result = \"\"\n\n    # Step 2: Loop over the characters in string.\n    for char in string:\n\n        # Step 3: Check if the character is lowercase.\n        if char.islower():\n\n            # Step 4: Append the uppercase version of the character to result.\n            result += char.upper()\n\n        # Step 5: Otherwise, the character must be uppercase.\n        else:\n\n            # Step 6: Append the lowercase version of the character to result.\n            result += char.lower()\n\n    # Step 7: Return result.\n    return result\n\n\nprint(flip_case(\"Hello\"))",
      11.2109375
    ],
    [
      "return string.swapcase()\n\nprint(flip_case('Hello'))\n\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))\n\n# print(flip_case('Hello'))",
      9.921875
    ],
    [
      "# return ''.join([x.lower() if x.isupper() else x.upper() for x in string])\n    return ''.join([x.upper() if x.islower() else x.lower() for x in string])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      8.3359375
    ],
    [
      "return string.swapcase()\n\n\ndef flip_case2(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case2('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef flip_case3(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case3('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef flip_case4(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case4('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef flip_case5(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case5('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef flip_case6(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case6('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef flip_case7(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case7('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef flip_case8(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case8('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef flip_case9(string: str) ->",
      6.25
    ],
    [
      "# return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      5.9609375
    ],
    [
      "# return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      5.9609375
    ],
    [
      "new_string = \"\"\n    for letter in string:\n        if letter.islower():\n            new_string += letter.upper()\n        else:\n            new_string += letter.lower()\n    return new_string\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if the given string is a palindrome. Otherwise, return False.\n    A palindrome is a string that reads the same forwards and backwards, ignoring punctuation, whitespace, and letter casing.\n    \"\"\"\n    new_string = \"\"\n    for letter in string:\n        if letter.isalpha():\n            new_string += letter\n    new_string = flip_case(new_string)\n    if new_string == new_string[::-1]:\n        return True\n    return False\n\ndef is_palindrome_two(string: str) -> bool:\n    \"\"\" Return True if the given string is a palindrome. Otherwise, return False.\n    A palindrome is a string that reads the same forwards and backwards, ignoring punctuation, whitespace, and letter casing.\n    \"\"\"\n    new_string = \"\"\n    for letter in string:\n        if letter.isalnum():\n            new_string += letter\n    new_string = flip_case(new_string)\n    if new_string == new_string[::-1]:\n        return True\n    return False\n\ndef is_palindrome_three(string: str) -> bool:\n    \"\"\" Return True if the given string is a palindrome. Otherwise, return False.\n    A palindrome is a string that reads the same forwards and backwards, ignoring punctuation, whitespace, and letter casing.\n    \"\"\"\n    new_string = \"\"\n    for letter in string:\n        if letter.isalnum():\n            new_string += letter\n    new_string = flip_case(new_string)\n    if new_string == new_string[::-1]:\n        return True\n    return False\n\n\nprint(is_palindrome(\"No, On\"))\nprint(is_palindrome_two(\"No, On\"))\nprint(is_palindrome_three(\"No, On",
      5.07421875
    ],
    [
      "return string.swapcase()\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, return True if the string is a palindrome. Otherwise return False.\n    >>> is_palindrome('noon')\n    True\n    \"\"\"\n    return string == string[::-1]\n\n\ndef has_more_vowels(string: str, n: int) -> bool:\n    \"\"\" For a given string, return True if the string has more vowels (a, e, i, o, u) than the value of n. Otherwise return False.\n    >>> has_more_vowels('super', 1)\n    False\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count > n\n\n\ndef is_valid_pin(pin: int) -> bool:\n    \"\"\" For a given integer, return True if the pin is valid. Otherwise return False.\n    >>> is_valid_pin(12345)\n    True\n    \"\"\"\n    return 10000 <= pin <= 99999\n\n\ndef is_vowel(char: str) -> bool:\n    \"\"\" For a given character, return True if the character is a vowel. Otherwise return False.\n    >>> is_vowel('a')\n    True\n    \"\"\"\n    return char in 'aeiou'\n\n\ndef is_consonant(char: str) -> bool:\n    \"\"\" For a given character, return True if the character is a consonant. Otherwise return False.\n    >>> is_consonant('b')\n    True\n    \"\"\"\n    return char in 'bcdfghjklmnpqrstvwxyz'\n\n\ndef is_lowercase(char: str) -> bool:\n    \"\"\" For a given character, return True if the character is lowercase. Otherwise return False.\n    >>> is_lowercase('a')\n    True\n    \"\"\"\n    return char in 'abcdefghijklmnopqrstuvwxyz'\n\n\ndef is_uppercase(char: str) -> bool:",
      5.00390625
    ],
    [
      "return string.swapcase()\n\n\ndef remove_duplicates(string: str) -> str:\n    \"\"\" Remove all duplicate characters within a given string.\n    >>> remove_duplicates('hello')\n    'helo'\n    \"\"\"\n    return ''.join(set(string))\n\n\ndef remove_duplicates_and_sort(string: str) -> str:\n    \"\"\" Remove all duplicate characters within a given string and sort the characters in alphabetical order.\n    >>> remove_duplicates_and_sort('pYTHON')\n    'htno'\n    \"\"\"\n    return ''.join(sorted(set(string)))\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Check if a given string is a palindrome (i.e. is the same forwards and backwards).\n    >>> is_palindrome('tacocat')\n    True\n    \"\"\"\n    return string == string[::-1]\n\n\ndef has_no_vowels(string: str) -> bool:\n    \"\"\" Check if a given string has any vowels (a, e, i, o, u).\n    >>> has_no_vowels('hello')\n    False\n    \"\"\"\n    vowels = 'aeiou'\n    return not any(v in string for v in vowels)\n\n\ndef has_no_numeric(string: str) -> bool:\n    \"\"\" Check if a given string has any numbers.\n    >>> has_no_numeric('hello')\n    True\n    \"\"\"\n    return not any(c.isdigit() for c in string)\n\n\ndef has_no_punctuation(string: str) -> bool:\n    \"\"\" Check if a given string has any punctuation.\n    >>> has_no_punctuation('hello')\n    True\n    \"\"\"\n    return not any(c in string for c in '!@#$%^&*()_+')\n\n\ndef has_no_whitespace(string: str) -> bool:\n    \"\"\" Check if a given string has any whitespace.\n    >>> has_no_whitespace('hello')\n    True\n    \"\"\"\n    return not any(c.isspace() for c in string)",
      4.93359375
    ],
    [
      "return ''.join([(c.upper() if c.islower() else c.lower()) for c in string])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      3.8125
    ],
    [
      "result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\nprint(flip_case('Hello'))",
      3.75
    ],
    [
      "return \"\".join(c.upper() if c.islower() else c.lower() for c in string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.71484375
    ],
    [
      "return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, determine if it is a palindrome. Assume that punctuation and whitespace\n    does not belong in a palindrome.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('raccoons')\n    False\n    \"\"\"\n    clean_string = ''.join([c for c in string if c.isalpha()])\n    return clean_string.lower() == clean_string[::-1].lower()\n\n\ndef has_unique_chars(string: str) -> bool:\n    \"\"\" For a given string, determine if all characters are unique.\n    >>> has_unique_chars('abc')\n    True\n    >>> has_unique_chars('aab')\n    False\n    \"\"\"\n    return len(set(string)) == len(string)\n\n\ndef is_permutation(string1: str, string2: str) -> bool:\n    \"\"\" For two given strings, determine if they are permutations of each other.\n    Assume the strings contain only ASCII letters.\n    >>> is_permutation('abcd', 'dcba')\n    True\n    >>> is_permutation('abcd', 'defg')\n    False\n    \"\"\"\n    return sorted(string1) == sorted(string2)\n\n\ndef urlify(string: str) -> str:\n    \"\"\" For a given string, replace all spaces with '%20'. Assume the maximum string length is 2000\n    characters.\n    >>> urlify('Mr John Smith    ')\n    'Mr%20John%20Smith'\n    \"\"\"\n    return string.strip().replace(' ', '%20')\n\n\ndef palindrome_permutation(string: str) -> bool:\n    \"\"\" For a given string, determine if it is a permutation of a palindrome. Assume the string\n    contains only lowercase letters.\n    >>> palindrome_permutation('tactcoa')\n    True\n    >>> palindrome_permutation('tactcod')",
      3.5625
    ],
    [
      "result = ''\n    for c in string:\n        if c.islower():\n            result += c.upper()\n        else:\n            result += c.lower()\n    return result",
      3.544921875
    ],
    [
      "# return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n    return ''.join(c.swapcase() for c in string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.53515625
    ],
    [
      "return string.swapcase()\n\n\ndef remove_punctuation(string: str) -> str:\n    \"\"\" For a given string, remove all punctuation.\n    >>> remove_punctuation('hello, world!')\n    'helloworld'\n    \"\"\"\n    return string.translate(str.maketrans('', '', string.punctuation))\n\n\ndef replace_word(string: str, old_word: str, new_word: str) -> str:\n    \"\"\" For a given string, replace the first occurrence of the old word with the new word.\n    >>> replace_word('hello world', 'hello', 'goodbye')\n    'goodbye world'\n    \"\"\"\n    return string.replace(old_word, new_word, 1)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, return whether the string is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_rotation(string1: str, string2: str) -> bool:\n    \"\"\" For a given pair of strings, return whether the first string is a left rotation of the second string.\n    >>> is_rotation('hello', 'hello')\n    True\n    \"\"\"\n    return string1 == string2[1:] + string2[0]\n\n\ndef with_spacing(string: str) -> str:\n    \"\"\" For a given string, return a string with spaces between each character.\n    >>> with_spacing('hello')\n    'h e l l o'\n    \"\"\"\n    return ' '.join(string)\n\n\ndef without_spacing(string: str) -> str:\n    \"\"\" For a given string, return a string without spaces between each character.\n    >>> without_spacing('h e l l o')\n    'hello'\n    \"\"\"\n    return ''.join(string.split())\n\n\ndef reverse(string: str) -> str:\n    \"\"\" For a given string, return a string with the characters in reverse order.\n    >>> reverse('hello')\n    'olleh'\n    \"\"\"\n    return string[::-1",
      3.365234375
    ],
    [
      "#return string.swapcase()\n    return string.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n\nprint(flip_case('Hello'))",
      3.208984375
    ],
    [
      "# flip the string\n    new_string = string.swapcase()\n\n    return new_string\n\n\ndef main():\n    string = input(\"Enter a string: \")\n\n    print(flip_case(string))\n\n\nif __name__ == '__main__':\n    main()",
      2.734375
    ],
    [
      "new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, return whether it is a palindrome.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('dented')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" For a given string, return whether it contains all the letters of the alphabet at least once.\n    >>> is_pangram('the quick brown fox jumps over the lazy dog')\n    True\n    >>> is_pangram('the_quick_brown_fox_jumps_over_the_lazy_dog')\n    True\n    >>> is_pangram('missing the letter e')\n    False\n    \"\"\"\n    return set(string.lower()) == set('abcdefghijklmnopqrstuvwxyz')\n\n\ndef sum_ascii(string: str) -> int:\n    \"\"\" For a given string, return the sum of the ASCII values for each character in the string.\n    >>> sum_ascii('mississippi')\n    2089\n    \"\"\"\n    return sum([ord(char) for char in string])\n\n\ndef count_vowels(string: str) -> int:\n    \"\"\" For a given string, return the number of vowels in the string.\n    >>> count_vowels('Hi there!')\n    3\n    >>> count_vowels('The quick brown fox jumped over the lazy dog.')\n    19\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in string:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\n\ndef is_permutation(string_1: str, string_2: str) -> bool:",
      2.689453125
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.208984375
    ],
    [
      "return string.swapcase()\n\n\ndef count_digits(string: str) -> int:\n    \"\"\" For a given string, count the number of digits in the string.\n    >>> count_digits('hello')\n    0\n    >>> count_digits('123')\n    3\n    \"\"\"\n    return sum(c.isdigit() for c in string)\n\n\ndef count_vowels(string: str) -> int:\n    \"\"\" For a given string, count the number of vowels in the string.\n    >>> count_vowels('hello')\n    2\n    >>> count_vowels('fatal')\n    3\n    \"\"\"\n    return sum(c in 'aeiou' for c in string)\n\n\ndef count_spaces(string: str) -> int:\n    \"\"\" For a given string, count the number of spaces in the string.\n    >>> count_spaces('hello')\n    0\n    >>> count_spaces('hi ')\n    1\n    \"\"\"\n    return sum(c.isspace() for c in string)\n\n\ndef count_punctuation(string: str) -> int:\n    \"\"\" For a given string, count the number of punctuation marks in the string.\n    >>> count_punctuation('hello')\n    0\n    >>> count_punctuation('hello!')\n    1\n    \"\"\"\n    return sum(c in string.punctuation for c in string)\n\n\ndef count_uppercase(string: str) -> int:\n    \"\"\" For a given string, count the number of uppercase characters in the string.\n    >>> count_uppercase('hello')\n    0\n    >>> count_uppercase('HELLO')\n    5\n    \"\"\"\n    return sum(c.isupper() for c in string)\n\n\ndef count_lowercase(string: str) -> int:\n    \"\"\" For a given string, count the number of lowercase characters in the string.\n    >>> count_lowercase('hello')\n    5\n    >>> count_lowercase('HELLO')\n    0\n    \"\"\"\n    return sum(c.islower() for c in string)\n\n\ndef is_palindrome(string: str) ->",
      2.091796875
    ],
    [
      "return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\n\ndef double_char(string: str) -> str:\n    \"\"\" For a given string, return a new string where each character is repeated twice.\n    >>> double_char('Hello')\n    'HHeelllloo'\n    \"\"\"\n    return ''.join([char*2 for char in string])\n\n\ndef remove_char(string: str) -> str:\n    \"\"\" For a given string, return a new string where all occurences of the char 'x' are removed.\n    >>> remove_char('xaxb')\n    'ab'\n    \"\"\"\n    return ''.join([char for char in string if char != 'x'])\n\n\ndef count_char(string: str, char: str) -> int:\n    \"\"\" For a given string and char, return the number of times the char occurs in the string.\n    >>> count_char('yxyx', 'x')\n    2\n    \"\"\"\n    return sum([1 for char in string if char == char])\n\n\ndef last_char(string: str) -> str:\n    \"\"\" For a given string, return the last character in the string.\n    >>> last_char('Hello')\n    'o'\n    \"\"\"\n    return string[-1]\n\n\ndef first_char(string: str) -> str:\n    \"\"\" For a given string, return the first character in the string.\n    >>> first_char('Hello')\n    'H'\n    \"\"\"\n    return string[0]\n\n\ndef middle_char(string: str) -> str:\n    \"\"\" For a given string, return the middle character(s) in the string.\n    >>> middle_char('Hello')\n    'ell'\n    \"\"\"\n    return string[1:-1]\n\n\ndef last_two(string: str) -> str:\n    \"\"\" For a given string, return the last two characters in the string.\n    >>> last_two('Hello')\n    'lo'\n    \"\"\"\n    return string[-2:]\n\n\ndef first_two(string: str) -> str:\n    \"\"\" For a given string, return the first two characters in the string.\n    >>> first",
      1.88671875
    ],
    [
      "return string.swapcase()\n\n\ndef capitalize_title(title: str) -> str:\n    \"\"\" Capitalize each word of a title, and return it as a string.\n    >>> capitalize_title('x-men: the last stand')\n    'X-Men: The Last Stand'\n    >>> capitalize_title('tron: legacy')\n    'Tron: Legacy'\n    >>> capitalize_title('avatar')\n    'Avatar'\n    \"\"\"\n\n    return title.title()\n\n\ndef check_sentence_ending(sentence: str) -> bool:\n    \"\"\" Return True if sentence ends with a period.\n    >>> check_sentence_ending('Python is awesome.')\n    True\n    >>> check_sentence_ending('Pink is nice.')\n    True\n    >>> check_sentence_ending('I love you!')\n    False\n    >>> check_sentence_ending('Who are you?')\n    False\n    \"\"\"\n\n    return sentence.endswith('.')\n\n\ndef remove_extra_spaces(string: str) -> str:\n    \"\"\" Remove all extra spaces from a string, and return a new string.\n    >>> remove_extra_spaces('     i like     spaces.     ')\n    'i like spaces.'\n    >>> remove_extra_spaces('i    love    spaces!')\n    'i love spaces!'\n    \"\"\"\n\n    return \" \".join(string.split())\n\n\ndef split_string(string: str, letter: str) -> list:\n    \"\"\" Return a list of all words that start with a given letter, from a string.\n    >>> split_string('i like cats', 'c')\n    ['cats']\n    >>> split_string('i like cats and dogs', 'c')\n    ['cats']\n    >>> split_string('i like cats and dogs', 'd')\n    ['dogs']\n    >>> split_string('i like cats and dogs', 'h')\n    []\n    \"\"\"\n\n    return [word for word in string.split() if word.startswith(letter)]\n\n\ndef count_letters(string: str, letter: str) -> int:\n    \"\"\" Count the number of occurrences",
      1.3291015625
    ],
    [
      "# return string.swapcase()\n    return string.upper() if string.islower() else string.lower()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.08203125
    ],
    [
      "return ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.939453125
    ],
    [
      "new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n\n\ndef flip_case_recursive(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    if len(string) == 0:\n        return string\n    if string[0].islower():\n        return string[0].upper() + flip_case_recursive(string[1:])\n    elif string[0].isupper():\n        return string[0].lower() + flip_case_recursive(string[1:])\n    else:\n        return string[0] + flip_case_recursive(string[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.92236328125
    ],
    [
      "new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n\n\ndef flip_case_2(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
      0.356201171875
    ],
    [
      "return ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return a boolean indicating whether given string is a palindrome.\n    A palindrome is defined as a string that's written the same forward and backward.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('dented')\n    False\n    \"\"\"\n    return string == flip_case(string)\n\n\ndef reverse(string: str) -> str:\n    \"\"\" Return a reversed version of given string.\n    >>> reverse('hello')\n    'olleh'\n    >>> reverse('a')\n    'a'\n    >>> reverse('abcd')\n    'dcba'\n    \"\"\"\n    return string[::-1]\n\n\ndef is_rotation(string: str, target: str) -> bool:\n    \"\"\" Return a boolean indicating whether given string is a rotation of given target.\n    A string is a rotation of a target if it can be rotated infinitely in any direction to create the target.\n    >>> is_rotation('hello', 'olleh')\n    True\n    >>> is_rotation('hello', 'hello')\n    True\n    >>> is_rotation('hello', 'hola')\n    False\n    \"\"\"\n    return string in (target + reverse(target))\n\n\ndef is_in(char: str, string: str) -> bool:\n    \"\"\" Return a boolean indicating whether given character is in given string.\n    >>> is_in('e', 'hello')\n    True\n    >>> is_in('e', 'hilo')\n    False\n    \"\"\"\n    return char in string\n\n\ndef is_unique(string: str) -> bool:\n    \"\"\" Return a boolean indicating whether given string has all unique characters.\n    >>> is_unique('hello')\n    False\n    >>> is_unique('abcd')\n    True\n    \"\"\"\n    return len(set(string)) == len(string)\n\n\ndef is_permutation(string: str, target: str) -> bool",
      0.30029296875
    ],
    [
      "return string.swapcase()\n\nprint(flip_case('Hello'))",
      0.1463623046875
    ],
    [
      "new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n\n\ndef flip_case_inplace(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_inplace('Hello')\n    'hELLO'\n    \"\"\"\n    for i in range(len(string)):\n        if string[i].islower():\n            string[i] = string[i].upper()\n        else:\n            string[i] = string[i].lower()\n    return string",
      0.032867431640625
    ],
    [
      "new_string = ''\n\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n\n    return new_string\n\n\ndef run_tests():\n    \"\"\" Tests the flip_case function \"\"\"\n    assert flip_case('Hello') == 'hELLO', \"First Test Failed!\"\n    assert flip_case('123aBc') == '123AbC', \"Second Test Failed!\"\n    assert flip_case('xyzXYZ') == 'XYzyx', \"Third Test Failed!\"\n    assert flip_case('abBA') == 'Abba', \"Fourth Test Failed!\"\n    assert flip_case('abc123') == 'Abc123', \"Fifth Test Failed!\"\n    print(\"All tests passed!\")\n\n\nif __name__ == '__main__':\n    run_tests()",
      -0.0380859375
    ],
    [
      "return string.swapcase()\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Returns True if the given string is a palindrome. Otherwise, returns False.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('dented')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" Returns True if the given string is a pangram. Otherwise, returns False.\n    >>> is_pangram('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> is_pangram('ABCD')\n    False\n    \"\"\"\n    return set(string.lower()) == set('abcdefghijklmnopqrstuvwxyz')\n\n\ndef has_no_vowels(string: str) -> bool:\n    \"\"\" Returns True if the given string contains no vowels. Otherwise, returns False.\n    >>> has_no_vowels('pqst')\n    True\n    >>> has_no_vowels('BCD')\n    False\n    \"\"\"\n    vowels = set('aeiou')\n    return set(string.lower()) & vowels == set()\n\n\ndef reverse(string: str) -> str:\n    \"\"\" Returns the reverse of a given string.\n    >>> reverse('Hello')\n    'olleH'\n    \"\"\"\n    return string[::-1]\n\n\ndef reverse_no_recursion(string: str) -> str:\n    \"\"\" Returns the reverse of a given string.\n    >>> reverse_no_recursion('Hello')\n    'olleH'\n    \"\"\"\n    return string[::-1]\n\n\ndef is_permutation(string_a: str, string_b: str) -> bool:\n    \"\"\" Returns True if the two given strings are permutations of each other.\n    >>> is_permutation('Hello', 'olleH')\n    True\n    >>> is_permutation('Hello', 'olle')\n    False\n    \"\"\"\n    return sorted",
      -0.120361328125
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.257568359375
    ],
    [
      "new_string = \"\"\n    for letter in string:\n        if letter.isupper():\n            new_string += letter.lower()\n        else:\n            new_string += letter.upper()\n    return new_string\n\n\ndef flip_case_1(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_1('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef flip_case_2(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_2('Hello')\n    'hELLO'\n    \"\"\"\n    return string.title()\n\n\ndef flip_case_3(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_3('Hello')\n    'hELLO'\n    \"\"\"\n    return string.casefold()\n\n\ndef flip_case_4(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_4('Hello')\n    'hELLO'\n    \"\"\"\n    return string.capitalize()\n\n\ndef flip_case_5(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_5('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n\n\ndef flip_case_6(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_6('Hello')\n    'hELLO'\n    \"\"\"\n    return string.upper().lower()\n\n\ndef flip_case_7(string: str) -> str:\n    \"\"\" For a given string, f",
      -0.359130859375
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.429443359375
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.429443359375
    ],
    [
      "# return string.swapcase()\n    # return string.translate(string.maketrans(string.ascii_lowercase, string.ascii_uppercase))\n    return string.upper() if string.islower() else string.lower()\n\n\ndef split_punctuation(string: str) -> list:\n    \"\"\" For a given string, split it into a list of words and punctuation.\n    >>> split_punctuation('This is a string.')\n    ['This', ' ', 'is', ' ', 'a', ' ', 'string', '.']\n    \"\"\"\n    return [char if char.isalpha() else \" \" + char for char in string]\n\n\ndef remove_punctuation(string: str) -> str:\n    \"\"\" For a given string, remove all punctuation.\n    >>> remove_punctuation('This is a string.')\n    'This is a string '\n    \"\"\"\n    return ''.join(char for char in string if char.isalpha() or char.isspace())\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, return True if the string is equal to the reverse of the string.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef anti_vowel(string: str) -> str:\n    \"\"\" For a given string, replace all vowels with the letter a.\n    >>> anti_vowel('Happy Birthday!')\n    'Happy B a a a a a a a!'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join('a' if char in vowels else char for char in string)\n\n\ndef no_punctuation(string: str) -> str:\n    \"\"\" For a given string, remove all punctuation.\n    >>> no_punctuation('This is a string.')\n    'This is a string '\n    \"\"\"\n    return ''.join(char for char in string if char.isalpha() or char.isspace())\n\n\ndef reverse_string(",
      -0.52099609375
    ],
    [
      "return string.swapcase()\n\nprint(flip_case(\"Hello\"))",
      -0.85595703125
    ],
    [
      "return ''.join(c.lower() if c.isupper() else c.upper() for c in string)",
      -0.85693359375
    ],
    [
      "# return ''.join([letter.upper() if letter.islower() else letter.lower() for letter in string])\n    # return ''.join(letter.upper() if letter.islower() else letter.lower() for letter in string)\n    return ''.join(map(lambda letter: letter.upper() if letter.islower() else letter.lower(), string))\n    # return ''.join([str.upper if str.islower else str.lower for str in string])\n\n\n\nprint(flip_case('Hello'))",
      -0.85693359375
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return string.swapcase()",
      -0.85693359375
    ],
    [
      "# Create an empty string to hold the flipped string\n    flipped = ''\n\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a lowercase letter,\n        if char.islower():\n            # Make it uppercase\n            char = char.upper()\n        # If it's uppercase,\n        elif char.isupper():\n            # Make it lowercase\n            char = char.lower()\n\n        # Add it to the flipped string\n        flipped += char\n\n    return flipped\n\n\ndef main():\n    print(flip_case('Hello'))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return \"\".join(\n        [char.upper() if char.islower() else char.lower() for char in string]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return string.swapcase()",
      -0.85693359375
    ],
    [
      "result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n\n\ndef main():\n    print(flip_case('Hello'))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "return ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return ''.join([i.lower() if i.isupper() else i.upper() for i in string])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "# return string.swapcase()\n    return string.upper()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return string.swapcase()\n\n\ndef flip_case_v2(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef flip_case_v3(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef main():\n    print(flip_case('Hello'))\n    print(flip_case_v2('Hello'))\n    print(flip_case_v3('Hello'))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "# your code here\n    return string.swapcase()\n\nif __name__ == \"__main__\":\n    s = 'Hello World'\n    print(flip_case(s))\n    print(flip_case(flip_case(s)))",
      -0.85791015625
    ],
    [
      "return ''.join(c.lower() if c.isupper() else c.upper() for c in string)",
      -0.85791015625
    ],
    [
      "# return ''.join([c.lower() if c.isupper() else c.upper() for c in string])\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return string.swapcase()",
      -0.85791015625
    ],
    [
      "# return ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n    return ''.join(c.swapcase() for c in string)\n\nprint(flip_case('Hello'))\nprint(flip_case('hELLO'))",
      -0.85791015625
    ],
    [
      "return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return string.swapcase()\n\n\ndef main():\n    with open('./data.txt') as f:\n        for line in f.readlines():\n            print(flip_case(line))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "flip = ''\n\n    for character in string:\n        if character.isupper():\n            flip += character.lower()\n        else:\n            flip += character.upper()\n\n    return flip\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return string.swapcase()\n\nprint(flip_case('Hello'))\nprint(flip_case('HELLO'))\nprint(flip_case('HeLLo'))\n\n\n# 1st attempt\n# def flip_case(string):\n#     new_string = ''\n#     for i in string:\n#         if i.isupper():\n#             new_string += i.lower()\n#         else:\n#             new_string += i.upper()\n#     return new_string\n\n\n# 2nd attempt\n# def flip_case(string):\n#     new_string = ''\n#     for i in string:\n#         if i.islower():\n#             new_string += i.upper()\n#         else:\n#             new_string += i.lower()\n#     return new_string",
      -0.8583984375
    ],
    [
      "return string.swapcase()\n\nprint(flip_case('Hello'))",
      -0.8583984375
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return string.swapcase()\n\n\ndef main():\n    \"\"\" This is called if the module is run from the command line \"\"\"\n    print(flip_case('Hello'))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return ''.join(\n        c.lower() if c.isupper() else c.upper()\n        for c in string\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return \"\".join(\n        [\n            char.upper() if char.islower() else char.lower()\n            for char in string\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "result = ''\n    for letter in string:\n        if letter.islower():\n            result += letter.upper()\n        else:\n            result += letter.lower()\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "new_string = \"\"\n    for letter in string:\n        if letter.isupper():\n            new_string += letter.lower()\n        elif letter.islower():\n            new_string += letter.upper()\n        else:\n            new_string += letter\n    return new_string\n\n\ndef flip_case_alt(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef main():\n    print(flip_case('Hello'))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "return string.swapcase()",
      -0.8583984375
    ],
    [
      "# return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    return ''.join(map(lambda char: char.lower() if char.isupper() else char.upper(), string))\n\n\nif __name__ == \"__main__\":\n    str = \"Hello\"\n    print(flip_case(str))",
      -0.8583984375
    ],
    [
      "return \"\".join(c.upper() if c.islower() else c.lower() for c in string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return \"\".join(\n        [\n            char.upper() if char.islower() else char.lower() for char in string\n        ]\n    )",
      -0.8583984375
    ],
    [
      "result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Flip lowercase to uppercase and uppercase to lowercase.\n    return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return ''.join([c.lower() if c.isupper() else c.upper() for c in string])\n\n\ndef main():\n    print(flip_case('Hello'))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "# return string.swapcase()\n    return string.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n\n\ndef flip_case_alt(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # return string.swapcase()\n    return string.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'))\n\n\ndef main():\n    print(flip_case('Hello'))\n    print(flip_case_alt('Hello'))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "return string.swapcase()",
      -0.9208984375
    ],
    [
      "return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.98974609375
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.330078125
    ],
    [
      "return string.swapcase()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.330078125
    ],
    [
      "return string.swapcase()\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.330078125
    ],
    [
      "return string.swapcase()\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, return whether the string is a palindrome or not.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('robert')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef has_more_vowels(word1: str, word2: str) -> bool:\n    \"\"\" Return whether word1 has more vowels (a, e, i, o, u) than word2.\n    >>> has_more_vowels('home', 'home')\n    True\n    >>> has_more_vowels('boat', 'home')\n    False\n    \"\"\"\n    return word1.count('a') + word1.count('e') + word1.count('i') + word1.count('o') + word1.count('u') > word2.count('a') + word2.count('e') + word2.count('i') + word2.count('o') + word2.count('u')\n\n\ndef with_vowels(string: str) -> str:\n    \"\"\" For a given string, return a string with only the vowels from the original string.\n    >>> with_vowels('hello')\n    'eooll'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char in vowels:\n            new_string += char\n    return new_string\n\n\ndef with_vowels_only(string: str) -> str:\n    \"\"\" For a given string, return a string with only the vowels from the original string.\n    >>> with_vowels_only('hello')\n    'aeiou'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char in vowels:\n            new_string += char\n    return new_string\n\n\ndef with_vowels_no_consonants(string: str) -> str:",
      -2.955078125
    ],
    [
      "return string.swapcase()\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if the given string is a palindrome. Otherwise return False.\n    Ignore the space and punctuation marks.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('rail')\n    False\n    \"\"\"\n    return string.replace(' ', '').replace('.', '').lower() == \\\n        string.replace(' ', '').replace('.', '').lower()[::-1]\n\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" Return True if the given string is a pangram. Otherwise return False.\n    A pangram is a string that contains every letter of the alphabet at least once.\n    >>> is_pangram('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> is_pangram('How many letters are there in this string?')\n    False\n    \"\"\"\n    return len(set(string.replace(' ', '').lower())) == 26\n\n\ndef is_rotation(string1: str, string2: str) -> bool:\n    \"\"\" Return True if the first string is a rotation of the second string. Otherwise return False.\n    >>> is_rotation('hello', 'hello world')\n    False\n    >>> is_rotation('hello', 'llohe')\n    True\n    \"\"\"\n    return string1 + string1 == string2 + string2\n\n\ndef is_mirror(string1: str, string2: str) -> bool:\n    \"\"\" Return True if the first string is a mirror of the second string. Otherwise return False.\n    >>> is_mirror('hello', 'olleh')\n    True\n    >>> is_mirror('hello', 'olle')\n    False\n    \"\"\"\n    return string1 == string2[::-1]\n\n\ndef is_isogram(string: str) -> bool:\n    \"\"\" Return True if the given string is an isogram. Otherwise return False.\n    An isogram (also known as a \"nonpattern word\") is a word or phrase without a repeating letter.\n    The blank space counts as a letter.",
      -2.98828125
    ],
    [
      "return ''.join([\n        char.upper() if char.islower() else char.lower()\n        for char in string\n    ])\n\n\ndef flip_case_alt(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef main():\n    \"\"\" This is called if the module is run from the command line \"\"\"\n\n    # Test our functions with doctests\n    doctest.testmod()\n\n    # If we call main directly (not from command line), call our functions here\n    print(flip_case(\"Hello\"))\n    print(flip_case_alt(\"Hello\"))\n\n\nif __name__ == '__main__':\n    main()",
      -3.857421875
    ],
    [
      "return ''.join(\n        [char.lower() if char.isupper() else char.upper() for char in string])\n\n\ndef flip_case_alt(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_alt('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, return whether or not it is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('testing')\n    False\n    \"\"\"\n    return string == flip_case_alt(string)\n\n\ndef is_palindrome_alt(string: str) -> bool:\n    \"\"\" For a given string, return whether or not it is a palindrome.\n    >>> is_palindrome_alt('racecar')\n    True\n    >>> is_palindrome_alt('testing')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" For a given string, return whether or not it contains all the letters of the alphabet at least once.\n    >>> is_pangram('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> is_pangram('The quick brown fox jumps over the lazy elk.')\n    False\n    \"\"\"\n    return set(string.lower()) == set(\n        'abcdefghijklmnopqrstuvwxyz')  # This works because the set operation removes duplicates\n\n\ndef is_pangram_alt(string: str) -> bool:\n    \"\"\" For a given string, return whether or not it contains all the letters of the alphabet at least once.\n    >>> is_pangram_alt('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> is_pangram_alt('The quick brown fox jumps over the lazy elk.')\n    False\n    \"\"\"\n    return len(string.lower())",
      -9.09375
    ],
    [
      "return string.swapcase()\n\n\ndef flip_case_alt(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_alt('Hello')\n    'hELLO'\n    \"\"\"\n    return string.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz'))",
      -9.2109375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}