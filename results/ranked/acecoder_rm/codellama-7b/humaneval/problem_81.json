{
  "problem": {
    "task_id": "HumanEval/81",
    "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
    "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "numerical_letter_grade",
    "docstring": "",
    "problem_id": 81
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "#return list(map(lambda x: 'A+', grades))\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\nif __name__ == '__main__':\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      9.96875
    ],
    [
      "# pass\n    # Write your code here\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    final_grade = []\n    for grade in grades:\n        if grade >= 4:\n            final_grade.append(letters[0])\n        elif grade >= 3.7:\n            final_grade.append(letters[1])\n        elif grade >= 3.3:\n            final_grade.append(letters[2])\n        elif grade >= 3:\n            final_grade.append(letters[3])\n        elif grade >= 2.7:\n            final_grade.append(letters[4])\n        elif grade >= 2.3:\n            final_grade.append(letters[5])\n        elif grade >= 2:\n            final_grade.append(letters[6])\n        elif grade >= 1.7:\n            final_grade.append(letters[7])\n        elif grade >= 1.3:\n            final_grade.append(letters[8])\n        elif grade >= 1:\n            final_grade.append(letters[9])\n        elif grade >= 0.7:\n            final_grade.append(letters[10])\n        elif grade >= 0.3:\n            final_grade.append(letters[11])\n        else:\n            final_grade.append(letters[12])\n    return final_grade\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      9.1796875
    ],
    [
      "letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
      8.9375
    ],
    [
      "letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      8.6015625
    ],
    [
      "return [grade_to_letter(grade) for grade in grades]\n\ndef grade_to_letter(grade):\n    if grade > 4.0:\n        return 'A+'\n    elif grade > 3.7:\n        return 'A'\n    elif grade > 3.3:\n        return 'A-'\n    elif grade > 3.0:\n        return 'B+'\n    elif grade > 2.7:\n        return 'B'\n    elif grade > 2.3:\n        return 'B-'\n    elif grade > 2.0:\n        return 'C+'\n    elif grade > 1.7:\n        return 'C'\n    elif grade > 1.3:\n        return 'C-'\n    elif grade > 1.0:\n        return 'D+'\n    elif grade > 0.7:\n        return 'D'\n    elif grade > 0.0:\n        return 'D-'\n    else:\n        return 'E'\n\ndef main():\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n    print(numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]))\n\nif __name__ == '__main__':\n    main()",
      8.53125
    ],
    [
      "# pass\n    return [grade_to_letter(grade) for grade in grades]\n\n\ndef grade_to_letter(grade):\n    if grade > 4:\n        return 'A+'\n    elif grade > 3.7:\n        return 'A'\n    elif grade > 3.3:\n        return 'A-'\n    elif grade > 3:\n        return 'B+'\n    elif grade > 2.7:\n        return 'B'\n    elif grade > 2.3:\n        return 'B-'\n    elif grade > 2:\n        return 'C+'\n    elif grade > 1.7:\n        return 'C'\n    elif grade > 1.3:\n        return 'C-'\n    elif grade > 1:\n        return 'D+'\n    elif grade > 0.7:\n        return 'D'\n    elif grade > 0.0:\n        return 'D-'\n    else:\n        return 'E'\n\n\n# grade_equation = numerical_letter_grade\n\nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-'], 'incorrect result'\nassert numerical_letter_grade([4.0, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0]) == ['A+', 'A', 'A-', 'B', 'B-', 'C', 'D+', 'D', 'D-', 'E', 'E', 'E'], 'incorrect result'",
      5.1328125
    ],
    [
      "#grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\nprint(numerical_letter_grade([4.1, 3, 1.7, 2, 3.5]))\nprint(numerical_letter_grade([4.0, 3.5, 1.7, 2, 3.5]))\nprint(numerical_letter_grade([4.0, 3.5, 1.7, 2.1, 3.5]))\nprint(numerical_letter_grade([4.0, 3.5, 1.7, 2.1, 3.5, 0]))",
      4.46875
    ],
    [
      "letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    gpa_list = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.3, 0.0]\n    grade_list = []\n    for i in grades:\n        if i >= 4.0:\n            grade_list.append(letters[0])\n        elif i >= 3.7:\n            grade_list.append(letters[1])\n        elif i >= 3.3:\n            grade_list.append(letters[2])\n        elif i >= 3.0:\n            grade_list.append(letters[3])\n        elif i >= 2.7:\n            grade_list.append(letters[4])\n        elif i >= 2.3:\n            grade_list.append(letters[5])\n        elif i >= 2.0:\n            grade_list.append(letters[6])\n        elif i >= 1.7:\n            grade_list.append(letters[7])\n        elif i >= 1.3:\n            grade_list.append(letters[8])\n        elif i >= 1.0:\n            grade_list.append(letters[9])\n        elif i >= 0.7:\n            grade_list.append(letters[10])\n        elif i >= 0.3:\n            grade_list.append(letters[11])\n        elif i <= 0.0:\n            grade_list.append(letters[12])\n    return grade_list",
      4.1171875
    ],
    [
      "result = []\n    for grade in grades:\n        if grade > 4:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\n\n#  def numerical_letter_grade(grades):\n#      \"\"\"It is the last week of the semester and the teacher has to give the grades\n#      to students. The teacher has been making her own algorithm for grading.\n#      The only problem is, she has lost the code she used for grading.\n#      She has given you a list of GPAs for some students and you have to write \n#      a function that can output a list of letter grades using the following table:\n#               GPA       |    Letter grade\n#                4.0                A+\n#              > 3.7                A \n#              > 3.3                A- \n#              > 3.0                B+\n#              > 2.7                B \n#              > 2.3                B-\n#              > 2.0                C+\n#              > 1.7                C\n#              > 1.3                C-\n#              > 1.0                D+ \n#              > 0.7                D \n#              > 0.0                D-\n#                0.0                E",
      3.673828125
    ],
    [
      "letter_grades = []\n    for gpa in grades:\n        if gpa > 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
      3.66796875
    ],
    [
      "if grades == []:\n        return []\n    else:\n        return [get_letter_grade(grade) for grade in grades]\n\ndef get_letter_grade(grade):\n    if grade >= 4.0:\n        return 'A+'\n    elif grade >= 3.7:\n        return 'A'\n    elif grade >= 3.3:\n        return 'A-'\n    elif grade >= 3.0:\n        return 'B+'\n    elif grade >= 2.7:\n        return 'B'\n    elif grade >= 2.3:\n        return 'B-'\n    elif grade >= 2.0:\n        return 'C+'\n    elif grade >= 1.7:\n        return 'C'\n    elif grade >= 1.3:\n        return 'C-'\n    elif grade >= 1.0:\n        return 'D+'\n    elif grade >= 0.7:\n        return 'D'\n    elif grade >= 0.0:\n        return 'D-'\n    else:\n        return 'E'\n\n\nif __name__ == \"__main__\":\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      3.591796875
    ],
    [
      "letter_grades = []\n    for gpa in grades:\n        if gpa > 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      3.1640625
    ],
    [
      "grades_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_list.append('A+')\n        elif grade >= 3.7:\n            grades_list.append('A')\n        elif grade >= 3.3:\n            grades_list.append('A-')\n        elif grade >= 3.0:\n            grades_list.append('B+')\n        elif grade >= 2.7:\n            grades_list.append('B')\n        elif grade >= 2.3:\n            grades_list.append('B-')\n        elif grade >= 2.0:\n            grades_list.append('C+')\n        elif grade >= 1.7:\n            grades_list.append('C')\n        elif grade >= 1.3:\n            grades_list.append('C-')\n        elif grade >= 1.0:\n            grades_list.append('D+')\n        elif grade >= 0.7:\n            grades_list.append('D')\n        elif grade >= 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list\n\nif __name__ == \"__main__\":\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n    print(numerical_letter_grade([1.0, 2.0, 3.0, 4.0]))\n    print(numerical_letter_grade([0.0, 1.0, 2.0, 3.0]))",
      3.16015625
    ],
    [
      "letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 0.0]))",
      2.931640625
    ],
    [
      "letter_grades = []\n    for grade in grades:\n        if grade >= 4:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.3:\n            letter_grades.append('D-')\n        elif grade >= 0:\n            letter_grades.append('E')\n    return letter_grades",
      2.900390625
    ],
    [
      "#grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\ndef test_numerical_letter_grade():\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    assert numerical_letter_grade(grades) == ['A+', 'B', 'C-', 'C', 'A-']",
      2.83984375
    ],
    [
      "# TODO: Write your solution here\n    list_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            list_grades.append('A+')\n        elif grade >= 3.7:\n            list_grades.append('A')\n        elif grade >= 3.3:\n            list_grades.append('A-')\n        elif grade >= 3.0:\n            list_grades.append('B+')\n        elif grade >= 2.7:\n            list_grades.append('B')\n        elif grade >= 2.3:\n            list_grades.append('B-')\n        elif grade >= 2.0:\n            list_grades.append('C+')\n        elif grade >= 1.7:\n            list_grades.append('C')\n        elif grade >= 1.3:\n            list_grades.append('C-')\n        elif grade >= 1.0:\n            list_grades.append('D+')\n        elif grade >= 0.7:\n            list_grades.append('D')\n        elif grade >= 0.3:\n            list_grades.append('D-')\n        else:\n            list_grades.append('E')\n    return list_grades\n\n\nif __name__ == \"__main__\":\n    # Do not edit this code\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    print(numerical_letter_grade(grades))",
      2.69921875
    ],
    [
      "grade_letter_list = []\n    for gpa in grades:\n        if gpa > 4.0:\n            grade_letter_list.append(\"A+\")\n        elif gpa > 3.7:\n            grade_letter_list.append(\"A\")\n        elif gpa > 3.3:\n            grade_letter_list.append(\"A-\")\n        elif gpa > 3.0:\n            grade_letter_list.append(\"B+\")\n        elif gpa > 2.7:\n            grade_letter_list.append(\"B\")\n        elif gpa > 2.3:\n            grade_letter_list.append(\"B-\")\n        elif gpa > 2.0:\n            grade_letter_list.append(\"C+\")\n        elif gpa > 1.7:\n            grade_letter_list.append(\"C\")\n        elif gpa > 1.3:\n            grade_letter_list.append(\"C-\")\n        elif gpa > 1.0:\n            grade_letter_list.append(\"D+\")\n        elif gpa > 0.7:\n            grade_letter_list.append(\"D\")\n        elif gpa > 0.0:\n            grade_letter_list.append(\"D-\")\n        else:\n            grade_letter_list.append(\"E\")\n\n    return grade_letter_list\n\nif __name__ == \"__main__\":\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      2.47265625
    ],
    [
      "gpas = []\n    for grade in grades:\n        if grade >= 4:\n            gpas.append('A+')\n        elif grade >= 3.7:\n            gpas.append('A')\n        elif grade >= 3.3:\n            gpas.append('A-')\n        elif grade >= 3:\n            gpas.append('B+')\n        elif grade >= 2.7:\n            gpas.append('B')\n        elif grade >= 2.3:\n            gpas.append('B-')\n        elif grade >= 2:\n            gpas.append('C+')\n        elif grade >= 1.7:\n            gpas.append('C')\n        elif grade >= 1.3:\n            gpas.append('C-')\n        elif grade >= 1:\n            gpas.append('D+')\n        elif grade >= 0.7:\n            gpas.append('D')\n        elif grade >= 0.0:\n            gpas.append('D-')\n        else:\n            gpas.append('E')\n    return gpas",
      2.42578125
    ],
    [
      "# YOUR CODE HERE\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n\n\nif __name__ == '__main__':\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      2.3515625
    ],
    [
      "#grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      1.7216796875
    ],
    [
      "# YOUR CODE HERE\n    letter_grade = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grade.append('A+')\n        elif grade >= 3.7:\n            letter_grade.append('A')\n        elif grade >= 3.3:\n            letter_grade.append('A-')\n        elif grade >= 3.0:\n            letter_grade.append('B+')\n        elif grade >= 2.7:\n            letter_grade.append('B')\n        elif grade >= 2.3:\n            letter_grade.append('B-')\n        elif grade >= 2.0:\n            letter_grade.append('C+')\n        elif grade >= 1.7:\n            letter_grade.append('C')\n        elif grade >= 1.3:\n            letter_grade.append('C-')\n        elif grade >= 1.0:\n            letter_grade.append('D+')\n        elif grade >= 0.7:\n            letter_grade.append('D')\n        elif grade >= 0.0:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade\n\n\nif __name__ == '__main__':\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      1.6943359375
    ],
    [
      "letter_grade = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grade.append('A+')\n        elif grade >= 3.7:\n            letter_grade.append('A')\n        elif grade >= 3.3:\n            letter_grade.append('A-')\n        elif grade >= 3.0:\n            letter_grade.append('B+')\n        elif grade >= 2.7:\n            letter_grade.append('B')\n        elif grade >= 2.3:\n            letter_grade.append('B-')\n        elif grade >= 2.0:\n            letter_grade.append('C+')\n        elif grade >= 1.7:\n            letter_grade.append('C')\n        elif grade >= 1.3:\n            letter_grade.append('C-')\n        elif grade >= 1.0:\n            letter_grade.append('D+')\n        elif grade >= 0.7:\n            letter_grade.append('D')\n        elif grade >= 0.3:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade\n\n\ndef main():\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.6396484375
    ],
    [
      "#code here\n    grade_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grade_list.append('A+')\n        elif grade >= 3.7:\n            grade_list.append('A')\n        elif grade >= 3.3:\n            grade_list.append('A-')\n        elif grade >= 3.0:\n            grade_list.append('B+')\n        elif grade >= 2.7:\n            grade_list.append('B')\n        elif grade >= 2.3:\n            grade_list.append('B-')\n        elif grade >= 2.0:\n            grade_list.append('C+')\n        elif grade >= 1.7:\n            grade_list.append('C')\n        elif grade >= 1.3:\n            grade_list.append('C-')\n        elif grade >= 1.0:\n            grade_list.append('D+')\n        elif grade >= 0.7:\n            grade_list.append('D')\n        elif grade >= 0.0:\n            grade_list.append('D-')\n        else:\n            grade_list.append('E')\n    return grade_list\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      1.5380859375
    ],
    [
      "letter_grade = []\n    for i in grades:\n        if i >= 4.0:\n            letter_grade.append('A+')\n        elif i >= 3.7:\n            letter_grade.append('A')\n        elif i >= 3.3:\n            letter_grade.append('A-')\n        elif i >= 3.0:\n            letter_grade.append('B+')\n        elif i >= 2.7:\n            letter_grade.append('B')\n        elif i >= 2.3:\n            letter_grade.append('B-')\n        elif i >= 2.0:\n            letter_grade.append('C+')\n        elif i >= 1.7:\n            letter_grade.append('C')\n        elif i >= 1.3:\n            letter_grade.append('C-')\n        elif i >= 1.0:\n            letter_grade.append('D+')\n        elif i >= 0.7:\n            letter_grade.append('D')\n        elif i >= 0.0:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade",
      1.513671875
    ],
    [
      "result = []\n    for grade in grades:\n        if grade >= 4:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.3:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result",
      1.4599609375
    ],
    [
      "result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 2.0, 1.0, 0.0]))",
      1.4375
    ],
    [
      "grades_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_list.append('A+')\n        elif grade >= 3.7:\n            grades_list.append('A')\n        elif grade >= 3.3:\n            grades_list.append('A-')\n        elif grade >= 3.0:\n            grades_list.append('B+')\n        elif grade >= 2.7:\n            grades_list.append('B')\n        elif grade >= 2.3:\n            grades_list.append('B-')\n        elif grade >= 2.0:\n            grades_list.append('C+')\n        elif grade >= 1.7:\n            grades_list.append('C')\n        elif grade >= 1.3:\n            grades_list.append('C-')\n        elif grade >= 1.0:\n            grades_list.append('D+')\n        elif grade >= 0.7:\n            grades_list.append('D')\n        elif grade >= 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      1.4287109375
    ],
    [
      "grades_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_list.append(\"A+\")\n        elif grade >= 3.7:\n            grades_list.append(\"A\")\n        elif grade >= 3.3:\n            grades_list.append(\"A-\")\n        elif grade >= 3.0:\n            grades_list.append(\"B+\")\n        elif grade >= 2.7:\n            grades_list.append(\"B\")\n        elif grade >= 2.3:\n            grades_list.append(\"B-\")\n        elif grade >= 2.0:\n            grades_list.append(\"C+\")\n        elif grade >= 1.7:\n            grades_list.append(\"C\")\n        elif grade >= 1.3:\n            grades_list.append(\"C-\")\n        elif grade >= 1.0:\n            grades_list.append(\"D+\")\n        elif grade >= 0.7:\n            grades_list.append(\"D\")\n        elif grade >= 0.0:\n            grades_list.append(\"D-\")\n        else:\n            grades_list.append(\"E\")\n    return grades_list\n\n\nif __name__ == '__main__':\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      1.3076171875
    ],
    [
      "letter_grade = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grade.append('A+')\n        elif gpa >= 3.7:\n            letter_grade.append('A')\n        elif gpa >= 3.3:\n            letter_grade.append('A-')\n        elif gpa >= 3.0:\n            letter_grade.append('B+')\n        elif gpa >= 2.7:\n            letter_grade.append('B')\n        elif gpa >= 2.3:\n            letter_grade.append('B-')\n        elif gpa >= 2.0:\n            letter_grade.append('C+')\n        elif gpa >= 1.7:\n            letter_grade.append('C')\n        elif gpa >= 1.3:\n            letter_grade.append('C-')\n        elif gpa >= 1.0:\n            letter_grade.append('D+')\n        elif gpa >= 0.7:\n            letter_grade.append('D')\n        elif gpa >= 0.0:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade\n\nif __name__ == \"__main__\":\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.9443359375
    ],
    [
      "grades_list = []\n    for i in grades:\n        if i >= 4.0:\n            grades_list.append('A+')\n        elif i >= 3.7:\n            grades_list.append('A')\n        elif i >= 3.3:\n            grades_list.append('A-')\n        elif i >= 3.0:\n            grades_list.append('B+')\n        elif i >= 2.7:\n            grades_list.append('B')\n        elif i >= 2.3:\n            grades_list.append('B-')\n        elif i >= 2.0:\n            grades_list.append('C+')\n        elif i >= 1.7:\n            grades_list.append('C')\n        elif i >= 1.3:\n            grades_list.append('C-')\n        elif i >= 1.0:\n            grades_list.append('D+')\n        elif i >= 0.7:\n            grades_list.append('D')\n        elif i >= 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.8623046875
    ],
    [
      "return [grade_to_letter(gpa) for gpa in grades]\n\n\ndef grade_to_letter(gpa):\n    if gpa >= 4.0:\n        return 'A+'\n    elif gpa >= 3.7:\n        return 'A'\n    elif gpa >= 3.3:\n        return 'A-'\n    elif gpa >= 3.0:\n        return 'B+'\n    elif gpa >= 2.7:\n        return 'B'\n    elif gpa >= 2.3:\n        return 'B-'\n    elif gpa >= 2.0:\n        return 'C+'\n    elif gpa >= 1.7:\n        return 'C'\n    elif gpa >= 1.3:\n        return 'C-'\n    elif gpa >= 1.0:\n        return 'D+'\n    elif gpa >= 0.7:\n        return 'D'\n    elif gpa >= 0.0:\n        return 'D-'\n    else:\n        return 'E'\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.8349609375
    ],
    [
      "letters = []\n    for grade in grades:\n        if grade >= 4.0:\n            letters.append('A+')\n        elif grade >= 3.7:\n            letters.append('A')\n        elif grade >= 3.3:\n            letters.append('A-')\n        elif grade >= 3.0:\n            letters.append('B+')\n        elif grade >= 2.7:\n            letters.append('B')\n        elif grade >= 2.3:\n            letters.append('B-')\n        elif grade >= 2.0:\n            letters.append('C+')\n        elif grade >= 1.7:\n            letters.append('C')\n        elif grade >= 1.3:\n            letters.append('C-')\n        elif grade >= 1.0:\n            letters.append('D+')\n        elif grade >= 0.7:\n            letters.append('D')\n        elif grade >= 0.0:\n            letters.append('D-')\n        else:\n            letters.append('E')\n    return letters",
      0.82763671875
    ],
    [
      "grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    return [letter_grades[grades.index(grade)] for grade in grades]\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.7509765625
    ],
    [
      "# Return statement\n    letter_grade = []\n    \n    # Main\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grade.append('A+')\n        elif gpa >= 3.7:\n            letter_grade.append('A')\n        elif gpa >= 3.3:\n            letter_grade.append('A-')\n        elif gpa >= 3.0:\n            letter_grade.append('B+')\n        elif gpa >= 2.7:\n            letter_grade.append('B')\n        elif gpa >= 2.3:\n            letter_grade.append('B-')\n        elif gpa >= 2.0:\n            letter_grade.append('C+')\n        elif gpa >= 1.7:\n            letter_grade.append('C')\n        elif gpa >= 1.3:\n            letter_grade.append('C-')\n        elif gpa >= 1.0:\n            letter_grade.append('D+')\n        elif gpa >= 0.7:\n            letter_grade.append('D')\n        elif gpa >= 0.3:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    \n    return letter_grade",
      0.71484375
    ],
    [
      "letter_grades = []\n    for grade in grades:\n        if grade > 4.0:\n            letter_grades.append(\"A+\")\n        elif grade > 3.7:\n            letter_grades.append(\"A\")\n        elif grade > 3.3:\n            letter_grades.append(\"A-\")\n        elif grade > 3.0:\n            letter_grades.append(\"B+\")\n        elif grade > 2.7:\n            letter_grades.append(\"B\")\n        elif grade > 2.3:\n            letter_grades.append(\"B-\")\n        elif grade > 2.0:\n            letter_grades.append(\"C+\")\n        elif grade > 1.7:\n            letter_grades.append(\"C\")\n        elif grade > 1.3:\n            letter_grades.append(\"C-\")\n        elif grade > 1.0:\n            letter_grades.append(\"D+\")\n        elif grade > 0.7:\n            letter_grades.append(\"D\")\n        elif grade > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n\n\ndef main():\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n    print(numerical_letter_grade([0, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0]))\n    print(numerical_letter_grade([4.0, 3.3, 2.7, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]))\n    print(numerical_letter_grade([3.9, 3.2, 2.5, 1.8, 1.2, 0.9, 0.6, 0.3, 0.0]))\n\n\nif __",
      0.6904296875
    ],
    [
      "# TODO: Write your solution here\n    a_plus = 4.0\n    a = 3.7\n    a_minus = 3.3\n    b_plus = 3.0\n    b = 2.7\n    b_minus = 2.3\n    c_plus = 2.0\n    c = 1.7\n    c_minus = 1.3\n    d_plus = 1.0\n    d = 0.7\n    d_minus = 0.0\n    e = 0.0\n    \n    letter_grades = []\n    for grade in grades:\n        if grade >= a_plus:\n            letter_grades.append(\"A+\")\n        elif grade >= a:\n            letter_grades.append(\"A\")\n        elif grade >= a_minus:\n            letter_grades.append(\"A-\")\n        elif grade >= b_plus:\n            letter_grades.append(\"B+\")\n        elif grade >= b:\n            letter_grades.append(\"B\")\n        elif grade >= b_minus:\n            letter_grades.append(\"B-\")\n        elif grade >= c_plus:\n            letter_grades.append(\"C+\")\n        elif grade >= c:\n            letter_grades.append(\"C\")\n        elif grade >= c_minus:\n            letter_grades.append(\"C-\")\n        elif grade >= d_plus:\n            letter_grades.append(\"D+\")\n        elif grade >= d:\n            letter_grades.append(\"D\")\n        elif grade >= d_minus:\n            letter_grades.append(\"D-\")\n        elif grade >= e:\n            letter_grades.append(\"E\")\n        else:\n            print(\"ERROR: GPA is out of range.\")\n    return letter_grades\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.60302734375
    ],
    [
      "#grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append(\"A+\")\n        elif grade > 3.3:\n            letter_grades.append(\"A\")\n        elif grade > 3.0:\n            letter_grades.append(\"A-\")\n        elif grade > 2.7:\n            letter_grades.append(\"B+\")\n        elif grade > 2.3:\n            letter_grades.append(\"B\")\n        elif grade > 2.0:\n            letter_grades.append(\"B-\")\n        elif grade > 1.7:\n            letter_grades.append(\"C+\")\n        elif grade > 1.3:\n            letter_grades.append(\"C\")\n        elif grade > 1.0:\n            letter_grades.append(\"C-\")\n        elif grade > 0.7:\n            letter_grades.append(\"D+\")\n        elif grade > 0.3:\n            letter_grades.append(\"D\")\n        elif grade > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.493896484375
    ],
    [
      "gpas = []\n    for gpa in grades:\n        if gpa >= 4:\n            gpas.append('A+')\n        elif gpa >= 3.7:\n            gpas.append('A')\n        elif gpa >= 3.3:\n            gpas.append('A-')\n        elif gpa >= 3:\n            gpas.append('B+')\n        elif gpa >= 2.7:\n            gpas.append('B')\n        elif gpa >= 2.3:\n            gpas.append('B-')\n        elif gpa >= 2:\n            gpas.append('C+')\n        elif gpa >= 1.7:\n            gpas.append('C')\n        elif gpa >= 1.3:\n            gpas.append('C-')\n        elif gpa >= 1:\n            gpas.append('D+')\n        elif gpa >= 0.7:\n            gpas.append('D')\n        elif gpa >= 0.3:\n            gpas.append('D-')\n        else:\n            gpas.append('E')\n    return gpas\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.435546875
    ],
    [
      "grades_letter = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_letter.append('A+')\n        elif grade >= 3.7:\n            grades_letter.append('A')\n        elif grade >= 3.3:\n            grades_letter.append('A-')\n        elif grade >= 3.0:\n            grades_letter.append('B+')\n        elif grade >= 2.7:\n            grades_letter.append('B')\n        elif grade >= 2.3:\n            grades_letter.append('B-')\n        elif grade >= 2.0:\n            grades_letter.append('C+')\n        elif grade >= 1.7:\n            grades_letter.append('C')\n        elif grade >= 1.3:\n            grades_letter.append('C-')\n        elif grade >= 1.0:\n            grades_letter.append('D+')\n        elif grade >= 0.7:\n            grades_letter.append('D')\n        elif grade >= 0.0:\n            grades_letter.append('D-')\n        else:\n            grades_letter.append('E')\n    return grades_letter\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.31884765625
    ],
    [
      "grades = sorted(grades, reverse=True)\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
      0.313232421875
    ],
    [
      "result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\n\nif __name__ == \"__main__\":\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    print(numerical_letter_grade(grades))",
      0.277587890625
    ],
    [
      "# Code the function\n    def get_grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        elif gpa >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    return [get_grade(gpa) for gpa in grades]\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.276123046875
    ],
    [
      "grades_list = []\n    for grade in grades:\n        if grade >= 4:\n            grades_list.append('A+')\n        elif grade >= 3.7:\n            grades_list.append('A')\n        elif grade >= 3.3:\n            grades_list.append('A-')\n        elif grade >= 3:\n            grades_list.append('B+')\n        elif grade >= 2.7:\n            grades_list.append('B')\n        elif grade >= 2.3:\n            grades_list.append('B-')\n        elif grade >= 2:\n            grades_list.append('C+')\n        elif grade >= 1.7:\n            grades_list.append('C')\n        elif grade >= 1.3:\n            grades_list.append('C-')\n        elif grade >= 1:\n            grades_list.append('D+')\n        elif grade >= 0.7:\n            grades_list.append('D')\n        elif grade >= 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list\n\nif __name__ == \"__main__\":\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.226318359375
    ],
    [
      "new_grades = []\n    for x in grades:\n        if x >= 4.0:\n            new_grades.append('A+')\n        elif x >= 3.7:\n            new_grades.append('A')\n        elif x >= 3.3:\n            new_grades.append('A-')\n        elif x >= 3.0:\n            new_grades.append('B+')\n        elif x >= 2.7:\n            new_grades.append('B')\n        elif x >= 2.3:\n            new_grades.append('B-')\n        elif x >= 2.0:\n            new_grades.append('C+')\n        elif x >= 1.7:\n            new_grades.append('C')\n        elif x >= 1.3:\n            new_grades.append('C-')\n        elif x >= 1.0:\n            new_grades.append('D+')\n        elif x >= 0.7:\n            new_grades.append('D')\n        elif x >= 0.0:\n            new_grades.append('D-')\n        else:\n            new_grades.append('E')\n    return new_grades\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      0.146240234375
    ],
    [
      "letter_grades = []\n    for grade in grades:\n        if grade >= 4:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.3:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n\n    return letter_grades\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -0.103271484375
    ],
    [
      "grade_equation = []\n    for i in grades:\n        if i == 4.0:\n            grade_equation.append('A+')\n        elif i > 3.7:\n            grade_equation.append('A')\n        elif i > 3.3:\n            grade_equation.append('A-')\n        elif i > 3.0:\n            grade_equation.append('B+')\n        elif i > 2.7:\n            grade_equation.append('B')\n        elif i > 2.3:\n            grade_equation.append('B-')\n        elif i > 2.0:\n            grade_equation.append('C+')\n        elif i > 1.7:\n            grade_equation.append('C')\n        elif i > 1.3:\n            grade_equation.append('C-')\n        elif i > 1.0:\n            grade_equation.append('D+')\n        elif i > 0.7:\n            grade_equation.append('D')\n        elif i > 0.0:\n            grade_equation.append('D-')\n        else:\n            grade_equation.append('E')\n    return grade_equation",
      -0.384033203125
    ],
    [
      "grades_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_list.append('A+')\n        elif grade >= 3.7:\n            grades_list.append('A')\n        elif grade >= 3.3:\n            grades_list.append('A-')\n        elif grade >= 3.0:\n            grades_list.append('B+')\n        elif grade >= 2.7:\n            grades_list.append('B')\n        elif grade >= 2.3:\n            grades_list.append('B-')\n        elif grade >= 2.0:\n            grades_list.append('C+')\n        elif grade >= 1.7:\n            grades_list.append('C')\n        elif grade >= 1.3:\n            grades_list.append('C-')\n        elif grade >= 1.0:\n            grades_list.append('D+')\n        elif grade >= 0.7:\n            grades_list.append('D')\n        elif grade >= 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list",
      -0.3876953125
    ],
    [
      "grades_list = []\n    for grade in grades:\n        if grade > 4:\n            grades_list.append('A+')\n        elif grade > 3.7:\n            grades_list.append('A')\n        elif grade > 3.3:\n            grades_list.append('A-')\n        elif grade > 3:\n            grades_list.append('B+')\n        elif grade > 2.7:\n            grades_list.append('B')\n        elif grade > 2.3:\n            grades_list.append('B-')\n        elif grade > 2:\n            grades_list.append('C+')\n        elif grade > 1.7:\n            grades_list.append('C')\n        elif grade > 1.3:\n            grades_list.append('C-')\n        elif grade > 1:\n            grades_list.append('D+')\n        elif grade > 0.7:\n            grades_list.append('D')\n        elif grade > 0.3:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list",
      -0.392578125
    ],
    [
      "letters = []\n    for grade in grades:\n        if grade > 4:\n            letters.append(\"A+\")\n        elif grade > 3.7:\n            letters.append(\"A\")\n        elif grade > 3.3:\n            letters.append(\"A-\")\n        elif grade > 3:\n            letters.append(\"B+\")\n        elif grade > 2.7:\n            letters.append(\"B\")\n        elif grade > 2.3:\n            letters.append(\"B-\")\n        elif grade > 2:\n            letters.append(\"C+\")\n        elif grade > 1.7:\n            letters.append(\"C\")\n        elif grade > 1.3:\n            letters.append(\"C-\")\n        elif grade > 1:\n            letters.append(\"D+\")\n        elif grade > 0.7:\n            letters.append(\"D\")\n        elif grade > 0.3:\n            letters.append(\"D-\")\n        elif grade > 0:\n            letters.append(\"E\")\n        else:\n            letters.append(\"F\")\n\n    return letters\n\n\ndef main():\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.40380859375
    ],
    [
      "# return [grade_letter(g) for g in grades]\n    # return list(map(grade_letter, grades))\n    return list(grade_letter(g) for g in grades)\n\n\ndef grade_letter(grade):\n    if 4.0 <= grade < 4.7:\n        return 'A+'\n    elif 3.7 <= grade < 4.0:\n        return 'A'\n    elif 3.3 <= grade < 3.7:\n        return 'A-'\n    elif 3.0 <= grade < 3.3:\n        return 'B+'\n    elif 2.7 <= grade < 3.0:\n        return 'B'\n    elif 2.3 <= grade < 2.7:\n        return 'B-'\n    elif 2.0 <= grade < 2.3:\n        return 'C+'\n    elif 1.7 <= grade < 2.0:\n        return 'C'\n    elif 1.3 <= grade < 1.7:\n        return 'C-'\n    elif 1.0 <= grade < 1.3:\n        return 'D+'\n    elif 0.7 <= grade < 1.0:\n        return 'D'\n    elif 0.0 <= grade < 0.7:\n        return 'D-'\n    else:\n        return 'E'\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -0.40625
    ],
    [
      "letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
      -0.4482421875
    ],
    [
      "letter_grade = []\n    for grade in grades:\n        if grade > 4.0:\n            letter_grade.append('A+')\n        elif grade > 3.7:\n            letter_grade.append('A')\n        elif grade > 3.3:\n            letter_grade.append('A-')\n        elif grade > 3.0:\n            letter_grade.append('B+')\n        elif grade > 2.7:\n            letter_grade.append('B')\n        elif grade > 2.3:\n            letter_grade.append('B-')\n        elif grade > 2.0:\n            letter_grade.append('C+')\n        elif grade > 1.7:\n            letter_grade.append('C')\n        elif grade > 1.3:\n            letter_grade.append('C-')\n        elif grade > 1.0:\n            letter_grade.append('D+')\n        elif grade > 0.7:\n            letter_grade.append('D')\n        elif grade > 0.0:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -0.48583984375
    ],
    [
      "letter_grade_list = []\n    for grade in grades:\n        if grade >= 4:\n            letter_grade_list.append('A+')\n        elif grade >= 3.7:\n            letter_grade_list.append('A')\n        elif grade >= 3.3:\n            letter_grade_list.append('A-')\n        elif grade >= 3:\n            letter_grade_list.append('B+')\n        elif grade >= 2.7:\n            letter_grade_list.append('B')\n        elif grade >= 2.3:\n            letter_grade_list.append('B-')\n        elif grade >= 2:\n            letter_grade_list.append('C+')\n        elif grade >= 1.7:\n            letter_grade_list.append('C')\n        elif grade >= 1.3:\n            letter_grade_list.append('C-')\n        elif grade >= 1:\n            letter_grade_list.append('D+')\n        elif grade >= 0.7:\n            letter_grade_list.append('D')\n        elif grade >= 0.3:\n            letter_grade_list.append('D-')\n        else:\n            letter_grade_list.append('E')\n\n    return letter_grade_list\n\ndef main():\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n\nif __name__ == \"__main__\":\n    main()",
      -0.64794921875
    ],
    [
      "grade_dict = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    for key, value in grade_dict.items():\n        print(key, value)\n\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -0.6494140625
    ],
    [
      "grade_list = []\n    for i in grades:\n        if i >= 4.0:\n            grade_list.append('A+')\n        elif i >= 3.7:\n            grade_list.append('A')\n        elif i >= 3.3:\n            grade_list.append('A-')\n        elif i >= 3.0:\n            grade_list.append('B+')\n        elif i >= 2.7:\n            grade_list.append('B')\n        elif i >= 2.3:\n            grade_list.append('B-')\n        elif i >= 2.0:\n            grade_list.append('C+')\n        elif i >= 1.7:\n            grade_list.append('C')\n        elif i >= 1.3:\n            grade_list.append('C-')\n        elif i >= 1.0:\n            grade_list.append('D+')\n        elif i >= 0.7:\n            grade_list.append('D')\n        elif i >= 0.0:\n            grade_list.append('D-')\n        else:\n            grade_list.append('E')\n    return grade_list\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -0.6640625
    ],
    [
      "result = []\n    for grade in grades:\n        if grade >= 4:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -0.67041015625
    ],
    [
      "pass\n\n\n\n# def test_numerical_letter_grade():\n#     assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n#     assert numerical_letter_grade([4.0, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0]) == ['A+', 'A', 'B', 'C', 'D', 'E', 'F', 'D-', 'C-', 'B-', 'C+', 'D+']\n\n\n# if __name__ == '__main__':\n#     test_numerical_letter_grade()\n\n\n\n\n# from numpy import nan\n\n# def test_numerical_letter_grade():\n#     assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n#     assert numerical_letter_grade([4.0, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0]) == ['A+', 'A', 'B', 'C', 'D', 'E', 'F', 'D-', 'C-', 'B-', 'C+', 'D+']\n\n\n# if __name__ == '__main__':\n#     test_numerical_letter_grade()",
      -0.7998046875
    ],
    [
      "letter_grade = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grade.append('A+')\n        elif gpa >= 3.7:\n            letter_grade.append('A')\n        elif gpa >= 3.3:\n            letter_grade.append('A-')\n        elif gpa >= 3.0:\n            letter_grade.append('B+')\n        elif gpa >= 2.7:\n            letter_grade.append('B')\n        elif gpa >= 2.3:\n            letter_grade.append('B-')\n        elif gpa >= 2.0:\n            letter_grade.append('C+')\n        elif gpa >= 1.7:\n            letter_grade.append('C')\n        elif gpa >= 1.3:\n            letter_grade.append('C-')\n        elif gpa >= 1.0:\n            letter_grade.append('D+')\n        elif gpa >= 0.7:\n            letter_grade.append('D')\n        elif gpa >= 0.0:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade\n\nif __name__ == '__main__':\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -0.81396484375
    ],
    [
      "pass",
      -0.85693359375
    ],
    [
      "return [\n        'A+' if grade >= 4.0 else\n        'A' if grade >= 3.7 else\n        'A-' if grade >= 3.3 else\n        'B+' if grade >= 3.0 else\n        'B' if grade >= 2.7 else\n        'B-' if grade >= 2.3 else\n        'C+' if grade >= 2.0 else\n        'C' if grade >= 1.7 else\n        'C-' if grade >= 1.3 else\n        'D+' if grade >= 1.0 else\n        'D' if grade >= 0.7 else\n        'D-' if grade >= 0.0 else\n        'E'\n        for grade in grades\n    ]",
      -0.85693359375
    ],
    [
      "pass",
      -0.85693359375
    ],
    [
      "gpas = {4: 'A+', 3.7: 'A', 3.3: 'A-', 3: 'B+', 2.7: 'B', 2.3: 'B-', 2: 'C+', 1.7: 'C', 1.3: 'C-', 1: 'D+', 0.7: 'D', 0: 'D-', -1: 'E'}\n    return [gpas[g] for g in grades]\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -0.85693359375
    ],
    [
      "gpas = [4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0]\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n    grades = [0 if g < 0 else 11 if g > 11 else int(g*10)//10 for g in grades]\n    return [letter_grades[i] for i in grades]",
      -0.85693359375
    ],
    [
      "pass",
      -0.85693359375
    ],
    [
      "pass",
      -0.8583984375
    ],
    [
      "gpas = {4.0:'A+', 3.7:'A', 3.3:'A-', 3:'B+', 2.7:'B', 2.3:'B-', 2:'C+', 1.7:'C', 1.3:'C-', 1.0:'D+', 0.7:'D', 0.0:'D-', 0:'E'}\n    return [gpas[x] for x in grades]\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -0.8583984375
    ],
    [
      "grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    letter_grade = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    grade_letter = {}\n    for i in range(len(grades)):\n        grade_letter[grades[i]] = letter_grade[i]\n    print(grade_letter)\n    print(grade_letter[4.0])\n    return grade_letter\n\n\nnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])",
      -0.8583984375
    ],
    [
      "grade_list = []\n    for grade in grades:\n        if grade >= 4:\n            grade_list.append('A+')\n        elif grade >= 3.7:\n            grade_list.append('A')\n        elif grade >= 3.3:\n            grade_list.append('A-')\n        elif grade >= 3:\n            grade_list.append('B+')\n        elif grade >= 2.7:\n            grade_list.append('B')\n        elif grade >= 2.3:\n            grade_list.append('B-')\n        elif grade >= 2:\n            grade_list.append('C+')\n        elif grade >= 1.7:\n            grade_list.append('C')\n        elif grade >= 1.3:\n            grade_list.append('C-')\n        elif grade >= 1:\n            grade_list.append('D+')\n        elif grade >= 0.7:\n            grade_list.append('D')\n        elif grade >= 0.0:\n            grade_list.append('D-')\n        else:\n            grade_list.append('E')\n    return grade_list",
      -0.8876953125
    ],
    [
      "letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n\n\ndef letter_grade_to_number(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of letter grades for some students and you have to write \n    a function that can output a list of GPA using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0",
      -0.90283203125
    ],
    [
      "letter_grades = []\n    for grade in grades:\n        if grade >= 4:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -1.009765625
    ],
    [
      "letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
      -1.376953125
    ],
    [
      "letter_grade = []\n    for i in grades:\n        if i>=4.0:\n            letter_grade.append('A+')\n        elif i>3.7:\n            letter_grade.append('A')\n        elif i>3.3:\n            letter_grade.append('A-')\n        elif i>3.0:\n            letter_grade.append('B+')\n        elif i>2.7:\n            letter_grade.append('B')\n        elif i>2.3:\n            letter_grade.append('B-')\n        elif i>2.0:\n            letter_grade.append('C+')\n        elif i>1.7:\n            letter_grade.append('C')\n        elif i>1.3:\n            letter_grade.append('C-')\n        elif i>1.0:\n            letter_grade.append('D+')\n        elif i>0.7:\n            letter_grade.append('D')\n        elif i>0.0:\n            letter_grade.append('D-')\n        elif i==0.0:\n            letter_grade.append('E')\n    return letter_grade\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -1.4130859375
    ],
    [
      "result = []\n    for grade in grades:\n        if grade >= 4:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.3:\n            result.append('D-')\n        elif grade >= 0:\n            result.append('E')\n    return result\n\n\n# print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n\n# TESTS:\n\n# Test 1\n# Data: [[4.0, 3, 1.7, 2, 3.5]]\n# Expected result: [['A+', 'B', 'C-', 'C', 'A-']]\n# Test result:\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n\n# Test 2\n# Data: [[4.0, 3, 1.7, 2, 3.5], [1.0, 3.7, 3.0, 2.5, 3.2]]\n# Expected result: [['A+', 'B', 'C-', 'C', 'A-'], ['D', 'A', 'B', 'C', 'A-']]\n# Test result:\nprint(numerical_letter_grade([1.0, 3.7, 3.0, 2.5,",
      -1.4287109375
    ],
    [
      "grades_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_list.append('A+')\n        elif grade >= 3.7:\n            grades_list.append('A')\n        elif grade >= 3.3:\n            grades_list.append('A-')\n        elif grade >= 3.0:\n            grades_list.append('B+')\n        elif grade >= 2.7:\n            grades_list.append('B')\n        elif grade >= 2.3:\n            grades_list.append('B-')\n        elif grade >= 2.0:\n            grades_list.append('C+')\n        elif grade >= 1.7:\n            grades_list.append('C')\n        elif grade >= 1.3:\n            grades_list.append('C-')\n        elif grade >= 1.0:\n            grades_list.append('D+')\n        elif grade >= 0.7:\n            grades_list.append('D')\n        elif grade >= 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list",
      -1.4443359375
    ],
    [
      "#grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    letter_grades = []\n    for i in grades:\n        if i >= 4.0:\n            letter_grades.append('A+')\n        elif i >= 3.7:\n            letter_grades.append('A')\n        elif i >= 3.3:\n            letter_grades.append('A-')\n        elif i >= 3.0:\n            letter_grades.append('B+')\n        elif i >= 2.7:\n            letter_grades.append('B')\n        elif i >= 2.3:\n            letter_grades.append('B-')\n        elif i >= 2.0:\n            letter_grades.append('C+')\n        elif i >= 1.7:\n            letter_grades.append('C')\n        elif i >= 1.3:\n            letter_grades.append('C-')\n        elif i >= 1.0:\n            letter_grades.append('D+')\n        elif i >= 0.7:\n            letter_grades.append('D')\n        elif i >= 0.0:\n            letter_grades.append('D-')\n        elif i >= 0.0:\n            letter_grades.append('E')\n    return letter_grades\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -1.560546875
    ],
    [
      "#grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.3:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n\ndef letter_grade_to_number(letter_grades):\n    \"\"\"Write a function that takes in a list of letter grades and returns the \n    list of corresponding numerical grades.\n    \n    Example:\n    letter_grade_to_number(['A+', 'B', 'C-', 'C', 'A-']) ==> [4.0, 3.0, 2.3, 2.0, 3.3]\n    \"\"\"\n    #letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    numerical_grades = []\n    for letter_grade in letter_grades:\n        if letter_grade == 'A+':\n            numerical_grades.append(4.0)\n        elif letter_grade == 'A':\n            numerical_grades.append(",
      -1.623046875
    ],
    [
      "# TODO: Write your function here\n    grades_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_list.append('A+')\n        elif grade >= 3.7:\n            grades_list.append('A')\n        elif grade >= 3.3:\n            grades_list.append('A-')\n        elif grade >= 3.0:\n            grades_list.append('B+')\n        elif grade >= 2.7:\n            grades_list.append('B')\n        elif grade >= 2.3:\n            grades_list.append('B-')\n        elif grade >= 2.0:\n            grades_list.append('C+')\n        elif grade >= 1.7:\n            grades_list.append('C')\n        elif grade >= 1.3:\n            grades_list.append('C-')\n        elif grade >= 1.0:\n            grades_list.append('D+')\n        elif grade >= 0.7:\n            grades_list.append('D')\n        elif grade >= 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list\n\n\nif __name__ == '__main__':\n    # Run your `grade_equation` function with examples from the question.\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n\n    # Print the numerical letter grade for these grades.\n    print(numerical_letter_grade([3.5, 3.3, 3.7, 4.0]))\n\n    # Print the numerical letter grade for these grades.\n    print(numerical_letter_grade([4.0, 3.3, 3.7, 3.0, 3.5]))\n\n    # Print the numerical letter grade for these grades.\n    print(numerical_letter_grade([3.7, 3.0, 3.3, 3.5, 4.0]))",
      -1.740234375
    ],
    [
      "grade_dict = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    return [grade_dict[gpa] for gpa in grades]\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -1.9169921875
    ],
    [
      "result = []\n    for grade in grades:\n        if grade > 4:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.3:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result",
      -2.13671875
    ],
    [
      "# TODO: Write your solution here\n    grades_list = []\n    for grade in grades:\n        if grade > 4:\n            grades_list.append('A+')\n        elif grade > 3.7:\n            grades_list.append('A')\n        elif grade > 3.3:\n            grades_list.append('A-')\n        elif grade > 3:\n            grades_list.append('B+')\n        elif grade > 2.7:\n            grades_list.append('B')\n        elif grade > 2.3:\n            grades_list.append('B-')\n        elif grade > 2:\n            grades_list.append('C+')\n        elif grade > 1.7:\n            grades_list.append('C')\n        elif grade > 1.3:\n            grades_list.append('C-')\n        elif grade > 1:\n            grades_list.append('D+')\n        elif grade > 0.7:\n            grades_list.append('D')\n        elif grade > 0.0:\n            grades_list.append('D-')\n        elif grade == 0.0:\n            grades_list.append('E')\n    return grades_list\n\n\n# print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n\n\ndef test_numerical_letter_grade():\n    \"\"\"\n    This function is to test the numerical_letter_grade function\n    \"\"\"\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n    assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 1.0]) == ['A+', 'B', 'C-', 'C', 'A-', 'E']\n    assert numerical_letter_",
      -2.263671875
    ],
    [
      "grade_list = []\n    for i in grades:\n        if i >= 4.0:\n            grade_list.append('A+')\n        elif i >= 3.7:\n            grade_list.append('A')\n        elif i >= 3.3:\n            grade_list.append('A-')\n        elif i >= 3.0:\n            grade_list.append('B+')\n        elif i >= 2.7:\n            grade_list.append('B')\n        elif i >= 2.3:\n            grade_list.append('B-')\n        elif i >= 2.0:\n            grade_list.append('C+')\n        elif i >= 1.7:\n            grade_list.append('C')\n        elif i >= 1.3:\n            grade_list.append('C-')\n        elif i >= 1.0:\n            grade_list.append('D+')\n        elif i >= 0.7:\n            grade_list.append('D')\n        elif i >= 0.0:\n            grade_list.append('D-')\n        else:\n            grade_list.append('E')\n    return grade_list",
      -2.30078125
    ],
    [
      "pass\n\n\nif __name__ == '__main__':\n    assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-'], \"Grade Equation Test 1\"\n    assert numerical_letter_grade([4.0, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B', 'B', 'C-', 'C', 'D', 'D', 'F', 'F', 'E'], \"Grade Equation Test 2\"\n    assert numerical_letter_grade([4.0]) == ['A+'], \"Grade Equation Test 3\"\n    assert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'D+', 'D', 'F', 'E'], \"Grade Equation Test 4\"\n    assert numerical_letter_grade([3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A-', 'B+', 'B', 'B-', 'C+', 'C', 'D+', 'D', 'F', 'E'], \"Grade Equation Test 5\"\n    assert numerical_letter_grade([3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['B+', 'B', 'B-', 'C+', 'C', 'D+', 'D', 'F', 'E'], \"Grade",
      -2.302734375
    ],
    [
      "#grades = [4.0, 3, 1.7, 2, 3.5]\n    grades_to_letter_grades = {\n        'A+': 4.0,\n        'A': 3.7,\n        'A-': 3.3,\n        'B+': 3.0,\n        'B': 2.7,\n        'B-': 2.3,\n        'C+': 2.0,\n        'C': 1.7,\n        'C-': 1.3,\n        'D+': 1.0,\n        'D': 0.7,\n        'D-': 0.0,\n        'E': 0.0,\n    }\n\n    letter_grades = []\n\n    for grade in grades:\n        for letter_grade, threshold in grades_to_letter_grades.items():\n            if grade >= threshold:\n                letter_grades.append(letter_grade)\n                break\n\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -2.353515625
    ],
    [
      "#grades = [4.0, 3, 1.7, 2, 3.5]\n    new_grades = []\n    for grade in grades:\n        if grade >= 4:\n            new_grades.append(\"A+\")\n        elif grade >= 3.7:\n            new_grades.append(\"A\")\n        elif grade >= 3.3:\n            new_grades.append(\"A-\")\n        elif grade >= 3:\n            new_grades.append(\"B+\")\n        elif grade >= 2.7:\n            new_grades.append(\"B\")\n        elif grade >= 2.3:\n            new_grades.append(\"B-\")\n        elif grade >= 2:\n            new_grades.append(\"C+\")\n        elif grade >= 1.7:\n            new_grades.append(\"C\")\n        elif grade >= 1.3:\n            new_grades.append(\"C-\")\n        elif grade >= 1:\n            new_grades.append(\"D+\")\n        elif grade >= 0.7:\n            new_grades.append(\"D\")\n        elif grade >= 0.0:\n            new_grades.append(\"D-\")\n        else:\n            new_grades.append(\"E\")\n    return new_grades\n\ndef test_numerical_letter_grade():\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    assert numerical_letter_grade(grades) == ['A+', 'B', 'C-', 'C', 'A-']\n    grades = [2.0, 3, 1.7, 2, 3.5]\n    assert numerical_letter_grade(grades) == ['C+', 'B', 'C-', 'C', 'A-']\n    grades = [2.0, 3, 1.7, 2, 3.5, 0.7]\n    assert numerical_letter_grade(grades) == ['C+', 'B', 'C-', 'C', 'A-', 'D']\n    grades =",
      -2.5078125
    ],
    [
      "# Write your code here\n\n\ndef letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Write your code here",
      -2.818359375
    ],
    [
      "gpa_grades = [('A+', 4.0), ('A', 3.7), ('A-', 3.3), ('B+', 3.0),\n                  ('B', 2.7), ('B-', 2.3), ('C+', 2.0), ('C', 1.7),\n                  ('C-', 1.3), ('D+', 1.0), ('D', 0.7), ('D-', 0.0), ('E', 0.0)]\n\n    gpa_grades_dict = dict(gpa_grades)\n    letter_grades = []\n\n    for grade in grades:\n        for letter, gpa in gpa_grades_dict.items():\n            if grade >= gpa:\n                letter_grades.append(letter)\n                break\n\n    return letter_grades\n\n\nif __name__ == \"__main__\":\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -2.818359375
    ],
    [
      "#grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-'], \"1st example\"\n    assert numerical_letter_grade([3.3, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['B-', 'C', 'D', 'D+', 'E', 'E'], \"2nd example\"\n    assert numerical_letter_grade([4.1, 3.5]) == ['A', 'A'], \"Only 2 examples\"\n    assert numerical_",
      -3.05859375
    ],
    [
      "# return the letter grade based on the gpa\n    # gpa = 4.0\n    # letter_grade = 'A+'\n    # gpa = 3.7\n    # letter_grade = 'A'\n    # gpa = 3.3\n    # letter_grade = 'A-'\n    # gpa = 3.0\n    # letter_grade = 'B+'\n    # gpa = 2.7\n    # letter_grade = 'B'\n    # gpa = 2.3\n    # letter_grade = 'B-'\n    # gpa = 2.0\n    # letter_grade = 'C+'\n    # gpa = 1.7\n    # letter_grade = 'C'\n    # gpa = 1.3\n    # letter_grade = 'C-'\n    # gpa = 1.0\n    # letter_grade = 'D+'\n    # gpa = 0.7\n    # letter_grade = 'D'\n    # gpa = 0.0\n    # letter_grade = 'D-'\n    # gpa = 0.0\n    # letter_grade = 'E'\n\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_",
      -3.15625
    ],
    [
      "grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n    letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    letter_grade = []\n    for g in grades:\n        for i in range(len(grades)):\n            if g >= grades[i]:\n                letter_grade.append(letter_grades[i])\n    return letter_grade",
      -3.359375
    ],
    [
      "#grades = [4.0, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0.3, 0]\n    #grades = [4.0, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0.3, 0]\n    #print(grades)\n    #print(len(grades))\n    #print(type(grades))\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.3:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n\n\n\ndef test_numerical_letter_grade():\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    assert numerical_letter_grade(grades) == ['A+', 'B', 'C-', 'C', '",
      -3.775390625
    ],
    [
      "# grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n\ndef letter_grade_to_grade(grades):\n    \"\"\"The teacher wants to give students some feedback on their grades.\n    She knows that if the grade is an A, then the student got at least a 90,\n    if the grade is a B, the student got at least a 80, if the grade is a C,\n    the student got at least a 70, and so on.\n    She also knows that if the grade is a D-, the student got at least a 50,\n    if the grade is a D, the student got at least a 40, and if the grade is\n    an E, the student got at least a 0.\n    Write a function that, given a list of letter grades,\n    returns a list of numerical grades.\n    \n    Example:",
      -5.109375
    ],
    [
      "pass\n\ndef test_numerical_letter_grade():\n    assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert numerical_letter_grade([0, 4, 3.7, 2.3, 3.5]) == ['E', 'A', 'A', 'B-', 'A-']\n    assert numerical_letter_grade([3.3, 2, 2.7, 1.3, 0.7]) == ['B-', 'C', 'B', 'D', 'E']\n    assert numerical_letter_grade([3.0, 3.3, 2.0, 1.7, 0]) == ['B+', 'B-', 'C+', 'A+', 'E']\n    assert numerical_letter_grade([3.7, 3.3, 2.7, 2.0, 1.7]) == ['A', 'B-', 'B', 'C', 'A-']\n    assert numerical_letter_grade([2.3, 3.0, 1.7, 4.0, 3.7]) == ['B+', 'C', 'A', 'A+', 'A']\n    assert numerical_letter_grade([2.7, 2.0, 1.7, 3.0, 4.0]) == ['B', 'C+', 'A-', 'B+', 'A']\n    assert numerical_letter_grade([2.0, 2.3, 3.0, 3.7, 4.0]) == ['C', 'B-', 'B', 'A+', 'A']\n    assert numerical_letter_grade([1.7, 2.7, 2.0, 3.7, 4.0]) == ['A-', 'B', 'C', 'A+', 'A']\n    assert numerical_letter_grade([1.3, 2.0, 3.0, 3.7, 4.0]) == ['D+', 'C', 'B', 'A+',",
      -6.05859375
    ],
    [
      "pass\n\ndef letter_grade_to_numeric(letter_grade):\n    \"\"\"\n    The teacher has given a different algorithm for grading. Now she wants to find\n    out the grades of her students. She has given you a list of letter grades\n    for some students and you have to write a function that can output a list of\n    GPA using the following table:\n             Letter grade       |    GPA\n                   A+               4.0\n                   A                3.7\n                   A-               3.3\n                   B+               3.0\n                   B                2.7\n                   B-               2.3\n                   C+               2.0\n                   C                1.7\n                   C-               1.3\n                   D+               1.0\n                   D                0.7\n                   D-               0.0\n                   E                0.0\n    \n\n    Example:\n    letter_grade_to_numeric(['A+', 'B', 'C-', 'C', 'A-']) ==> [4.0, 3, 1.7, 2, 3.5]\n    \"\"\"\n    pass\n\ndef numeric_letter_grade_converter(grades):\n    \"\"\"\n    The teacher has given a different algorithm for grading. Now she wants to find\n    out the grades of her students. She has given you a list of letter grades\n    for some students and you have to write a function that can output a list of\n    GPA using the following table:\n             Letter grade       |    GPA\n                   A+               4.0\n                   A                3.7\n                   A-               3.3\n                   B+               3.0\n                   B                2.7\n                   B-               2.3\n                   C+               2.0\n                   C                1.7\n                   C-               1.3\n                   D+               1.0\n                   D                0.7\n                   D-               0.0\n                   E                0.0\n    \n\n    Example:\n    letter_grade_to_numeric(['A+', 'B', 'C-', 'C', 'A-']) ==> [4.",
      -6.4375
    ],
    [
      "# write your code here\n\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A-']\n    # return ['A+', 'B', 'C-', 'C', 'A",
      -6.59375
    ],
    [
      "# Define a dictionary of grades\n    letter_grade = {\n        'A+': [4.0, 3.7, 3.3],\n        'A': [3.0, 2.7, 2.3],\n        'A-': [3.0, 2.3, 1.7],\n        'B+': [2.7, 2.0, 1.7],\n        'B': [2.0, 1.7, 1.3],\n        'B-': [2.0, 1.3, 1.0],\n        'C+': [1.7, 1.0, 1.0],\n        'C': [1.3, 1.0, 0.7],\n        'C-': [1.3, 0.7, 0.0],\n        'D+': [1.0, 0.7, 0.0],\n        'D': [0.7, 0.0, 0.0],\n        'D-': [0.0, 0.0, 0.0],\n        'E': [0.0, 0.0, 0.0]\n    }\n\n    # Define a list of grades\n    grades = [4.0, 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Loop through each grade in grades\n    for grade in grades:\n        # Loop through each key in letter_grade\n        for key, value in letter_grade.items():\n            # Append the letter grade to letter_grades if the grade is in value\n            if grade in value:\n                letter_grades.append(key)\n\n    return letter_grades\n\n\n# print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
      -6.84765625
    ],
    [
      "grade_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n\n    return [grade_map[grade] for grade in grades]\n\n\n# def numerical_letter_grade(grades):\n#     \"\"\"It is the last week of the semester and the teacher has to give the grades\n#     to students. The teacher has been making her own algorithm for grading.\n#     The only problem is, she has lost the code she used for grading.\n#     She has given you a list of GPAs for some students and you have to write \n#     a function that can output a list of letter grades using the following table:\n#              GPA       |    Letter grade\n#               4.0                A+\n#              > 3.7                A \n#              > 3.3                A- \n#              > 3.0                B+\n#              > 2.7                B \n#              > 2.3                B-\n#              > 2.0                C+\n#              > 1.7                C\n#              > 1.3                C-\n#              > 1.0                D+ \n#              > 0.7                D \n#              > 0.0                D-\n#                0.0                E\n    \n\n#     Example:\n#     grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n#     \"\"\"\n#     return [grade_map.get(grade, 'E') for grade in grades]",
      -7.64453125
    ],
    [
      "grade_table = {\n        'A+': [4.0, 3.7, 3.3],\n        'A': [3.0, 3.0, 2.7, 2.3],\n        'A-': [3.0, 2.7, 2.3, 2.0],\n        'B+': [2.7, 2.3, 2.0],\n        'B': [2.0, 1.7, 1.3],\n        'B-': [1.7, 1.3, 1.0],\n        'C+': [1.3, 1.0],\n        'C': [1.0, 0.7],\n        'C-': [0.7, 0.0],\n        'D+': [0.7, 0.0],\n        'D': [0.0, 0.0],\n        'D-': [0.0, 0.0],\n        'E': [0.0, 0.0],\n    }\n\n    letter_grades = []\n    for grade in grades:\n        for letter_grade, gpas in grade_table.items():\n            if grade in gpas:\n                letter_grades.append(letter_grade)\n    return letter_grades\n\n\n# def test_cases():\n#     grade_equation = numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\n#     print(grade_equation)\n#     # Expected output: ['A+', 'B', 'C-', 'C', 'A-']\n\n#     grade_equation = numerical_letter_grade([3.9, 3.0, 3.2, 2, 1.7])\n#     print(grade_equation)\n#     # Expected output: ['A', 'B+', 'B', 'C', 'D+']\n\n#     grade_equation = numerical_letter_grade([3.2, 2, 1, 1.2])\n#     print(grade_equation)\n#     # Expected output: ['B', 'C',",
      -8.390625
    ],
    [
      "# 1. Take a list of numbers\n    # 2. Create a list of letter grades\n    # 3. return the list\n    # 4. If the number is <= 4.0, return A+\n    # 5. If the number is > 4.0 and <= 3.7, return A\n    # 6. If the number is > 3.7 and <= 3.3, return A-\n    # 7. If the number is > 3.3 and <= 3.0, return B+\n    # 8. If the number is > 3.0 and <= 2.7, return B\n    # 9. If the number is > 2.7 and <= 2.3, return B-\n    # 10. If the number is > 2.3 and <= 2.0, return C+\n    # 11. If the number is > 2.0 and <= 1.7, return C\n    # 12. If the number is > 1.7 and <= 1.3, return C-\n    # 13. If the number is > 1.3 and <= 1.0, return D+\n    # 14. If the number is > 1.0 and <= 0.7, return D\n    # 15. If the number is > 0.7 and <= 0.0, return D-\n    # 16. If the number is <= 0.0, return E\n\n    # list of numerical grades\n    grades = [4.0, 3, 1.7, 2, 3.5]\n\n    # list of letter grades\n    letter_grades = []\n\n    # iterate through the list of numerical grades\n    for grade in grades:\n\n        # if the grade is greater than or equal to 4.0, return A+\n        if grade >= 4.0:\n            letter_grades.append('A+')\n\n        # if the grade is greater than 3.7 and less than 4.0, return A\n        elif grade > 3.7:\n            letter_grades.append('A')\n\n        # if",
      -11.359375
    ],
    [
      "# return [grade_to_letter_grade(gpa) for gpa in grades]\n    return [grade_to_letter_grade(gpa) for gpa in grades if gpa >= 4.0] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 4.0 and gpa >= 3.7] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 3.7 and gpa >= 3.3] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 3.3 and gpa >= 3.0] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 3.0 and gpa >= 2.7] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 2.7 and gpa >= 2.3] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 2.3 and gpa >= 2.0] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 2.0 and gpa >= 1.7] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 1.7 and gpa >= 1.3] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 1.3 and gpa >= 1.0] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 1.0 and gpa >= 0.7] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 0.7 and gpa >= 0.0] + \\\n           [grade_to_letter_grade(gpa) for gpa in grades if gpa < 0.0]",
      -12.1875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}