{
  "problem": {
    "task_id": "HumanEval/48",
    "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
    "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n",
    "entry_point": "is_palindrome",
    "docstring": "",
    "problem_id": 48
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_two(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_two('')\n    True\n    >>> is_palindrome_two('aba')\n    True\n    >>> is_palindrome_two('aaaaa')\n    True\n    >>> is_palindrome_two('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_three(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_three('')\n    True\n    >>> is_palindrome_three('aba')\n    True\n    >>> is_palindrome_three('aaaaa')\n    True\n    >>> is_palindrome_three('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_four(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_four('')\n    True\n    >>> is_palindrome_four('aba')\n    True\n    >>> is_palindrome_four('aaaaa')\n    True\n    >>> is_palindrome_four('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      14.6796875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_two(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_two('')\n    True\n    >>> is_palindrome_two('aba')\n    True\n    >>> is_palindrome_two('aaaaa')\n    True\n    >>> is_palindrome_two('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_three(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_three('')\n    True\n    >>> is_palindrome_three('aba')\n    True\n    >>> is_palindrome_three('aaaaa')\n    True\n    >>> is_palindrome_three('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      13.8671875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse('')\n    True\n    >>> is_palindrome_reverse('aba')\n    True\n    >>> is_palindrome_reverse('aaaaa')\n    True\n    >>> is_palindrome_reverse('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_reverse_inplace(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse_inplace('')\n    True\n    >>> is_palindrome_reverse_inplace('aba')\n    True\n    >>> is_palindrome_reverse_inplace('aaaaa')\n    True\n    >>> is_palindrome_reverse_inplace('zbcd')\n    False\n    \"\"\"\n    left = 0\n    right = len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n\ndef is_palindrome_two_pointers(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_two_pointers('')\n    True\n    >>> is_palindrome_two_pointers('aba')\n    True\n    >>> is_palindrome_two_pointers('aaaaa')\n    True\n    >>> is_palindrome_two_pointers('zbcd')\n    False\n    \"\"\"\n    left = 0\n    right = len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      13.8125
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome (recursive approach)\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome_rec(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      13.546875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_iterative(text: str):\n    \"\"\"\n    Checks if given string is a palindrome using iterative approach\n    >>> is_palindrome_iterative('')\n    True\n    >>> is_palindrome_iterative('aba')\n    True\n    >>> is_palindrome_iterative('aaaaa')\n    True\n    >>> is_palindrome_iterative('zbcd')\n    False\n    \"\"\"\n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start] != text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      13.4921875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    def is_palindrome_rec_helper(text, start, end):\n        if start >= end:\n            return True\n        if text[start] != text[end]:\n            return False\n        return is_palindrome_rec_helper(text, start + 1, end - 1)\n    return is_palindrome_rec_helper(text, 0, len(text) - 1)\n\n\ndef is_palindrome_iter(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_iter('')\n    True\n    >>> is_palindrome_iter('aba')\n    True\n    >>> is_palindrome_iter('aaaaa')\n    True\n    >>> is_palindrome_iter('zbcd')\n    False\n    \"\"\"\n    start, end = 0, len(text) - 1\n    while start < end:\n        if text[start] != text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      13.046875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_r(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_r('')\n    True\n    >>> is_palindrome_r('aba')\n    True\n    >>> is_palindrome_r('aaaaa')\n    True\n    >>> is_palindrome_r('zbcd')\n    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome_r(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      11.8046875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_optimized('')\n    True\n    >>> is_palindrome_optimized('aba')\n    True\n    >>> is_palindrome_optimized('aaaaa')\n    True\n    >>> is_palindrome_optimized('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome_optimized(text[1:-1])\n\n\ndef is_palindrome_recursive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n    True\n    >>> is_palindrome_recursive('aaaaa')\n    True\n    >>> is_palindrome_recursive('zbcd')\n    False\n    \"\"\"\n    return _is_palindrome_recursive(text, 0, len(text) - 1)\n\n\ndef _is_palindrome_recursive(text: str, left: int, right: int) -> bool:\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return _is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.5625
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_optimized('')\n    True\n    >>> is_palindrome_optimized('aba')\n    True\n    >>> is_palindrome_optimized('aaaaa')\n    True\n    >>> is_palindrome_optimized('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.1796875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome2('')\n    True\n    >>> is_palindrome2('aba')\n    True\n    >>> is_palindrome2('aaaaa')\n    True\n    >>> is_palindrome2('zbcd')\n    False\n    \"\"\"\n    text = text.lower()\n    for i in range(len(text) // 2):\n        if text[i] != text[-i - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      10.90625
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    return _is_palindrome_rec(text, 0, len(text) - 1)\n\n\ndef _is_palindrome_rec(text: str, left: int, right: int):\n    \"\"\"\n    Recursively checks if given string is a palindrome\n    >>> _is_palindrome_rec('', 0, 0)\n    True\n    >>> _is_palindrome_rec('aba', 0, 2)\n    True\n    >>> _is_palindrome_rec('aaaaa', 0, 4)\n    True\n    >>> _is_palindrome_rec('zbcd', 0, 4)\n    False\n    \"\"\"\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return _is_palindrome_rec(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.796875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_naive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_naive('')\n    True\n    >>> is_palindrome_naive('aba')\n    True\n    >>> is_palindrome_naive('aaaaa')\n    True\n    >>> is_palindrome_naive('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n\n    if text[0] != text[-1]:\n        return False\n\n    return is_palindrome_naive(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.640625
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - i - 1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      10.1796875
    ],
    [
      "text = text.lower()\n    return text == text[::-1]\n\n\ndef is_palindrome_pythonic(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_pythonic('')\n    True\n    >>> is_palindrome_pythonic('aba')\n    True\n    >>> is_palindrome_pythonic('aaaaa')\n    True\n    >>> is_palindrome_pythonic('zbcd')\n    False\n    \"\"\"\n    return text.lower() == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)",
      10.1171875
    ],
    [
      "if not isinstance(text, str):\n        return False\n    return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome (recursive)\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    return text[0] == text[-1] and is_palindrome_rec(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      9.8046875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n    for char in text:\n        if char != stack.pop():\n            return False\n    return True\n\n\ndef is_palindrome_with_stack_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack_reverse('')\n    True\n    >>> is_palindrome_with_stack_reverse('aba')\n    True\n    >>> is_palindrome_with_stack_reverse('aaaaa')\n    True\n    >>> is_palindrome_with_stack_reverse('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n    return text == ''.join(stack[::-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      7.8125
    ],
    [
      "if len(text) < 2:\n        return True\n\n    if text[0] != text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.3203125
    ],
    [
      "if len(text) <= 1:\n        return True\n\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\ndef is_palindrome_recursive(text: str, left: int, right: int):\n    \"\"\"\n    Checks if given string is a palindrome (recursive)\n    >>> is_palindrome_recursive('', 0, 0)\n    True\n    >>> is_palindrome_recursive('aba', 0, 2)\n    True\n    >>> is_palindrome_recursive('aaaaa', 0, 4)\n    True\n    >>> is_palindrome_recursive('zbcd', 0, 4)\n    False\n    \"\"\"\n    if left >= right:\n        return True\n\n    return text[left] == text[right] and is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      5.1484375
    ],
    [
      "if not text:\n        return True\n\n    if text[0] != text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.04296875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_v3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v3('')\n    True\n    >>> is_palindrome_v3('aba')\n    True\n    >>> is_palindrome_v3('aaaaa')\n    True\n    >>> is_palindrome_v3('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_v4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v4('')\n    True\n    >>> is_palindrome_v4('aba')\n    True\n    >>> is_palindrome_v4('aaaaa')\n    True\n    >>> is_palindrome_v4('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_v5(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v5('')\n    True\n    >>> is_palindrome_v5('aba')\n    True\n    >>> is_palindrome_v5('aaaaa')\n    True\n    >>> is_palindrome_v5('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_v6(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_pal",
      3.9453125
    ],
    [
      "if len(text) == 0:\n        return True\n\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.9296875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_2('')\n    True\n    >>> is_palindrome_2('aba')\n    True\n    >>> is_palindrome_2('aaaaa')\n    True\n    >>> is_palindrome_2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_3('')\n    True\n    >>> is_palindrome_3('aba')\n    True\n    >>> is_palindrome_3('aaaaa')\n    True\n    >>> is_palindrome_3('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_4('')\n    True\n    >>> is_palindrome_4('aba')\n    True\n    >>> is_palindrome_4('aaaaa')\n    True\n    >>> is_palindrome_4('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_5(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_5('')\n    True\n    >>> is_palindrome_5('aba')\n    True\n    >>> is_palindrome_5('aaaaa')\n    True\n    >>> is_palindrome_5('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_6(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_6('')\n    True\n    >>> is_palindrome_6('aba",
      2.84765625
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_recursive(text: str, start: int, end: int):\n    \"\"\"\n    Checks if given string is a palindrome using recursion\n    >>> is_palindrome_recursive('', 0, 0)\n    True\n    >>> is_palindrome_recursive('aba', 0, 2)\n    True\n    >>> is_palindrome_recursive('aaaaa', 0, 4)\n    True\n    >>> is_palindrome_recursive('zbcd', 0, 4)\n    False\n    \"\"\"\n    if start >= end:\n        return True\n    elif text[start] != text[end]:\n        return False\n    return is_palindrome_recursive(text, start + 1, end - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)",
      2.84375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.80078125
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.80078125
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_short(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_short('')\n    True\n    >>> is_palindrome_short('aba')\n    True\n    >>> is_palindrome_short('aaaaa')\n    True\n    >>> is_palindrome_short('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_shortest(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_shortest('')\n    True\n    >>> is_palindrome_shortest('aba')\n    True\n    >>> is_palindrome_shortest('aaaaa')\n    True\n    >>> is_palindrome_shortest('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.62890625
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome2('')\n    True\n    >>> is_palindrome2('aba')\n    True\n    >>> is_palindrome2('aaaaa')\n    True\n    >>> is_palindrome2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      2.54296875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n\n    while len(stack) > 1:\n        if stack.pop() != stack.pop():\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.24609375
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text) // 2):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.09375
    ],
    [
      "text = text.lower()\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.04296875
    ],
    [
      "text = text.lower()\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome (using recursion)\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    return is_palindrome_rec_inner(text, 0, len(text)-1)\n\n\ndef is_palindrome_rec_inner(text: str, left: int, right: int):\n    if left >= right:\n        return True\n\n    if text[left] != text[right]:\n        return False\n\n    return is_palindrome_rec_inner(text, left+1, right-1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.037109375
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome.\n    Uses recursion\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome_rec(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.705078125
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.37109375
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_optimized('')\n    True\n    >>> is_palindrome_optimized('aba')\n    True\n    >>> is_palindrome_optimized('aaaaa')\n    True\n    >>> is_palindrome_optimized('zbcd')\n    False\n    \"\"\"\n    if len(text) == 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome_optimized(text[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.2265625
    ],
    [
      "if len(text) <= 1:\n        return True\n\n    if text[0] != text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.828125
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_recursive(text: str, left: int, right: int):\n    \"\"\"\n    Recursive implementation of is_palindrome\n    >>> is_palindrome_recursive('', 0, 0)\n    True\n    >>> is_palindrome_recursive('aba', 0, 2)\n    True\n    >>> is_palindrome_recursive('aaaaa', 0, 4)\n    True\n    >>> is_palindrome_recursive('zbcd', 0, 4)\n    False\n    \"\"\"\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.80712890625
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_optimized('')\n    True\n    >>> is_palindrome_optimized('aba')\n    True\n    >>> is_palindrome_optimized('aaaaa')\n    True\n    >>> is_palindrome_optimized('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.662109375
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_recursive(text: str):\n    \"\"\"\n    Recursively checks if given string is a palindrome\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n    True\n    >>> is_palindrome_recursive('aaaaa')\n    True\n    >>> is_palindrome_recursive('zbcd')\n    False\n    \"\"\"\n    return _is_palindrome_recursive(text, 0, len(text) - 1)\n\n\ndef _is_palindrome_recursive(text: str, left: int, right: int) -> bool:\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return _is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
      0.45458984375
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.405517578125
    ],
    [
      "text = text.replace(' ', '')\n    text = text.lower()\n    return text == text[::-1]\n\n\ndef is_palindrome_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_2('')\n    True\n    >>> is_palindrome_2('aba')\n    True\n    >>> is_palindrome_2('aaaaa')\n    True\n    >>> is_palindrome_2('zbcd')\n    False\n    \"\"\"\n    text = text.replace(' ', '')\n    text = text.lower()\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.2442626953125
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    text = text.lower()\n    stack = []\n    for char in text:\n        if char.isalnum():\n            stack.append(char)\n\n    while len(stack) > 1 and stack[-1] == stack[0]:\n        stack.pop()\n        stack.pop(0)\n\n    return len(stack) <= 1\n\n\ndef is_palindrome_with_recursion(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_recursion('')\n    True\n    >>> is_palindrome_with_recursion('aba')\n    True\n    >>> is_palindrome_with_recursion('aaaaa')\n    True\n    >>> is_palindrome_with_recursion('zbcd')\n    False\n    \"\"\"\n    text = text.lower()\n    return is_palindrome_recursive(text, 0, len(text) - 1)\n\n\ndef is_palindrome_recursive(text: str, left: int, right: int):\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.08721923828125
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_with_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_reverse('')\n    True\n    >>> is_palindrome_with_reverse('aba')\n    True\n    >>> is_palindrome_with_reverse('aaaaa')\n    True\n    >>> is_palindrome_with_reverse('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_with_reversed(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_reversed('')\n    True\n    >>> is_palindrome_with_reversed('aba')\n    True\n    >>> is_palindrome_with_reversed('aaaaa')\n    True\n    >>> is_palindrome_with_reversed('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\ndef is_palindrome_with_reversed_with_slice(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_reversed_with_slice('')\n    True\n    >>> is_palindrome_with_reversed_with_slice('aba')\n    True\n    >>> is_palindrome_with_reversed_with_slice('aaaaa')\n    True\n    >>> is_palindrome_with_reversed_with_slice('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\ndef is_palindrome_with_reversed_with_reversed(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_reversed_with_reversed('')\n    True\n    >>> is_palindrome_with_",
      -0.019989013671875
    ],
    [
      "if len(text) == 1:\n        return True\n    if len(text) % 2 == 0:\n        return text[0:int(len(text) / 2)] == text[int(len(text) / 2):][::-1]\n    else:\n        return text[0:int((len(text) - 1) / 2)] == text[int((len(text) + 1) / 2):][::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.07012939453125
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    elif text[0] != text[-1]:\n        return False\n    return is_palindrome_rec(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.63623046875
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse('')\n    True\n    >>> is_palindrome_reverse('aba')\n    True\n    >>> is_palindrome_reverse('aaaaa')\n    True\n    >>> is_palindrome_reverse('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\ndef is_palindrome_reverse_inplace(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse_inplace('')\n    True\n    >>> is_palindrome_reverse_inplace('aba')\n    True\n    >>> is_palindrome_reverse_inplace('aaaaa')\n    True\n    >>> is_palindrome_reverse_inplace('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_recursive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n    True\n    >>> is_palindrome_recursive('aaaaa')\n    True\n    >>> is_palindrome_recursive('zbcd')\n    False\n    \"\"\"\n    return is_palindrome_recursive_aux(text, 0, len(text) - 1)\n\n\ndef is_palindrome_recursive_aux(text: str, left: int, right: int):\n    \"\"\"\n    Recursively checks if given string is a palindrome\n    >>> is_palindrome_recursive_aux('', 0, 0)\n    True\n    >>> is_palindrome_recursive_aux('aba', 0, 2)\n    True\n    >>> is_palindrome_recursive_aux('aaaaa', 0, 4)\n    True\n    >>>",
      -0.66943359375
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str, left: int, right: int):\n    \"\"\"\n    Recursive version of the palindrome checker.\n    >>> is_palindrome_rec('', 0, 0)\n    True\n    >>> is_palindrome_rec('aba', 0, 2)\n    True\n    >>> is_palindrome_rec('aaaaa', 0, 4)\n    True\n    >>> is_palindrome_rec('zbcd', 0, 3)\n    False\n    \"\"\"\n    if right - left <= 1:\n        return True\n\n    if text[left] != text[right]:\n        return False\n\n    return is_palindrome_rec(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.7392578125
    ],
    [
      "if text == text[::-1]:\n        return True\n    return False\n\n\ndef is_palindrome_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse('')\n    True\n    >>> is_palindrome_reverse('aba')\n    True\n    >>> is_palindrome_reverse('aaaaa')\n    True\n    >>> is_palindrome_reverse('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    if text == reversed_text:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "if not isinstance(text, str):\n        return False\n\n    if len(text) == 1:\n        return True\n\n    if len(text) == 2:\n        if text[0] == text[1]:\n            return True\n        return False\n\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    print(is_palindrome(''))\n    print(is_palindrome('aba'))\n    print(is_palindrome('aaaaa'))\n    print(is_palindrome('zbcd'))",
      -0.85595703125
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_alt(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_alt('')\n    True\n    >>> is_palindrome_alt('aba')\n    True\n    >>> is_palindrome_alt('aaaaa')\n    True\n    >>> is_palindrome_alt('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
      -0.85693359375
    ],
    [
      "if len(text) <= 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if len(text) < 2:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome2('')\n    True\n    >>> is_palindrome2('aba')\n    True\n    >>> is_palindrome2('aaaaa')\n    True\n    >>> is_palindrome2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if len(text) == 0 or len(text) == 1:\n        return True\n\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "text = text.lower()\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "text = text.replace(' ', '')\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "if text == text[::-1]:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    print(is_palindrome(input(\"Enter text: \")))",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    stack = []\n\n    for char in text:\n        stack.append(char)\n\n    for _ in range(len(stack)):\n        char = stack.pop()\n\n        if char != text[-1]:\n            return False\n\n        text = text[1:]\n\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_naive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_naive('')\n    True\n    >>> is_palindrome_naive('aba')\n    True\n    >>> is_palindrome_naive('aaaaa')\n    True\n    >>> is_palindrome_naive('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    print(is_palindrome(\"\"))\n    print(is_palindrome(\"aba\"))\n    print(is_palindrome(\"aaaaa\"))\n    print(is_palindrome(\"zbcd\"))",
      -0.85791015625
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if not isinstance(text, str):\n        raise TypeError('text must be of type string')\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_with_list(text: str):\n    \"\"\"\n    Checks if given string is a palindrome using a list\n    >>> is_palindrome_with_list('')\n    True\n    >>> is_palindrome_with_list('aba')\n    True\n    >>> is_palindrome_with_list('aaaaa')\n    True\n    >>> is_palindrome_with_list('zbcd')\n    False\n    \"\"\"\n    text_list = list(text)\n    text_list.reverse()\n    return text_list == list(text)\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome using a stack\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    text_stack = list(text)\n    while len(text_stack) > 1:\n        if text_stack.pop() != text_stack.pop():\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.5009765625
    ],
    [
      "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n    for char in text:\n        if stack.pop() != char:\n            return False\n    return True\n\n\ndef is_palindrome_with_stack_and_set(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack_and_set('')\n    True\n    >>> is_palindrome_with_stack_and_set('aba')\n    True\n    >>> is_palindrome_with_stack_and_set('aaaaa')\n    True\n    >>> is_palindrome_with_stack_and_set('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n    for char in text:\n        if stack.pop() != char:\n            return False\n    return True\n\n\ndef is_palindrome_with_stack_and_set_with_index(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack_and_set_with_index('')\n    True\n    >>> is_palindrome_with_stack_and_set_with_index('aba')\n    True\n    >>> is_palindrome_with_stack_and_set_with_index('aaaaa')\n    True\n    >>> is_palindrome_with_stack_and_set_with_index('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for index in range(len(text)):\n        stack.append((",
      -4.58203125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}