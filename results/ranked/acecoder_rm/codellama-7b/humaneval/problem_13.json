{
  "problem": {
    "task_id": "HumanEval/13",
    "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
    "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n",
    "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n",
    "entry_point": "greatest_common_divisor",
    "docstring": "",
    "problem_id": 13
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if a < 0 or b < 0:\n        raise ValueError('a and b must be non-negative')\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(2, 6)\n    6\n    >>> least_common_multiple(3, 6)\n    6\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError('a and b must be non-negative')\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()",
      13.4453125
    ],
    [
      "if a < 0 or b < 0:\n        raise ValueError(\"Only positive numbers are allowed\")\n\n    while b:\n        a, b = b, a % b\n\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"Only positive numbers are allowed\")\n\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    \"\"\" Main function\n    \"\"\"\n    print(\"The greatest common divisor of 3 and 5 is: \"\n          f\"{greatest_common_divisor(3, 5)}\")\n    print(\"The least common multiple of 3 and 5 is: \"\n          f\"{least_common_multiple(3, 5)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      12.8125
    ],
    [
      "if a < 0 or b < 0:\n        raise ValueError(\"Greatest Common Divisor works only for positive integers\")\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(5, 2)\n    10\n    >>> least_common_multiple(15, 12)\n    30\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"Least Common Multiple works only for positive integers\")\n    return a * b // greatest_common_divisor(a, b)",
      12.3359375
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n\n    return abs(a * b) // greatest_common_divisor(a, b)",
      12.0390625
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      11.9453125
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    print(greatest_common_divisor(15, 25))\n    print(least_common_multiple(15, 25))\n\n\nif __name__ == \"__main__\":\n    main()",
      10.1953125
    ],
    [
      "if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a < b:\n        return greatest_common_divisor(b, a)\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef lowest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a lowest common multiple of two integers a and b\n    >>> lowest_common_multiple(5, 20)\n    10\n    >>> lowest_common_multiple(15, 10)\n    30\n    \"\"\"\n    return abs(a * b) // greatest_common_divisor(a, b)",
      10.0
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      9.7578125
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    print(f\"LCM of {a} and {b} is {least_common_multiple(a, b)}\")\n    print(f\"GCD of {a} and {b} is {greatest_common_divisor(a, b)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      9.3046875
    ],
    [
      "if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      9.0859375
    ],
    [
      "if a < b:\n        a, b = b, a\n\n    if b == 0:\n        return a\n\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(least_common_multiple(a, b))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()",
      7.74609375
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(2, 3)\n    6\n    >>> least_common_multiple(15, 12)\n    60\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    print(greatest_common_divisor(15, 12))\n    print(least_common_multiple(15, 12))\n\n\nif __name__ == \"__main__\":\n    main()",
      7.1015625
    ],
    [
      "return a if not b else greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef extended_euclidean_algorithm(a: int, b: int) -> tuple[int, int, int]:\n    \"\"\" Return a triple of integers (r, s, t) where\n        r = gcd(a, b)\n        s * a + t * b = r\n    >>> extended_euclidean_algorithm(3, 5)\n    (1, -1, 1)\n    >>> extended_euclidean_algorithm(25, 15)\n    (5, 1, -1)\n    \"\"\"\n    s, old_s = 0, 1\n    t, old_t = 1, 0\n    r, old_r = b, a\n\n    while r:\n        q = old_r // r\n        old_r, r = r, old_r - q * r\n        old_s, s = s, old_s - q * s\n        old_t, t = t, old_t - q * t\n\n    return old_r, old_s, old_t\n\n\ndef modulo_inverse(a: int, m: int) -> int:\n    \"\"\" Return a modular inverse of a modulo m\n    >>> modulo_inverse(3, 11)\n    4\n    >>> modulo_inverse(8, 13)\n    10\n    \"\"\"\n    gcd, s, _ = extended_euclidean_algorithm(a, m)\n\n    if gcd != 1:\n        raise Exception('modular inverse does not exist')\n\n    return s % m",
      6.89453125
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n\n    if b == 0:\n        return a\n\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(5, 2)\n    10\n    >>> least_common_multiple(12, 20)\n    60\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return factorial of n\n    >>> factorial(5)\n    120\n    >>> factorial(6)\n    720\n    \"\"\"\n    if n == 0:\n        return 1\n\n    return n * factorial(n - 1)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True\n\n\ndef prime_numbers(n: int) -> list:\n    \"\"\" Return list of prime numbers from 2 to n\n    >>> prime_numbers(5)\n    [2, 3, 5]\n    >>> prime_numbers(10)\n    [2, 3, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n\n    primes = [2]\n\n    for i in range(3, n + 1, 2):\n        if is_prime(i):\n            primes.append(i)\n\n    return primes",
      6.50390625
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef extended_gcd(a: int, b: int) -> tuple:\n    \"\"\" Return a tuple (r, i, j) such that r = gcd(a, b) = ia + jb\n    >>> extended_gcd(3, 5)\n    (1, -1, 2)\n    >>> extended_gcd(25, 15)\n    (5, 2, -1)\n    \"\"\"\n    if a == 0:\n        return (b, 0, 1)\n    g, y, x = extended_gcd(b % a, a)\n    return g, x - (b // a) * y, y\n\n\ndef modular_inverse(a: int, n: int) -> int:\n    \"\"\" Return a number x such that (a * x) % n = 1\n    >>> modular_inverse(18, 23)\n    12\n    >>> modular_inverse(15, 23)\n    16\n    \"\"\"\n    g, x, _ = extended_gcd(a, n)\n    if g != 1:\n        raise Exception(\"gcd(a, n) must be 1\")\n    return x % n",
      6.35546875
    ],
    [
      "if a < b:\n        a, b = b, a\n    while a % b != 0:\n        a, b = b, a % b\n    return b\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      5.5625
    ],
    [
      "if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n\n    if a < b:\n        a, b = b, a\n\n    while b != 0:\n        temp = a % b\n        a = b\n        b = temp\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main() -> None:\n    \"\"\" Main function\n    >>> main()\n    GCD: 1\n    LCM: 15\n    \"\"\"\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(\"GCD:\", greatest_common_divisor(a, b))\n    print(\"LCM:\", least_common_multiple(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      5.265625
    ],
    [
      "if a < b:\n        a, b = b, a\n    while a % b != 0:\n        a, b = b, a % b\n    return b\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      4.0625
    ],
    [
      "if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(2, 3)\n    6\n    >>> least_common_multiple(15, 10)\n    30\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.9765625
    ],
    [
      "if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(greatest_common_divisor(25, 15))",
      3.654296875
    ],
    [
      "if a == b:\n        return a\n    if a < b:\n        return greatest_common_divisor(b, a)\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return (a / greatest_common_divisor(a, b)) * b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.37890625
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.82421875
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.349609375
    ],
    [
      "if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      2.33203125
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return abs(a * b) // greatest_common_divisor(a, b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if an integer n is prime\n    >>> is_prime(10)\n    False\n    >>> is_prime(17)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef get_primes_up_to(n: int) -> list:\n    \"\"\" Return a list of all primes up to n\n    >>> get_primes_up_to(10)\n    [2, 3, 5, 7]\n    >>> get_primes_up_to(17)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n    return [x for x in range(2, n + 1) if is_prime(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.716796875
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.685546875
    ],
    [
      "if a == b:\n        return a\n    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.6796875
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    if a < 0 or b < 0:\n        return greatest_common_divisor(abs(a), abs(b))\n    if a > b:\n        return greatest_common_divisor(b, a)\n    if a == b:\n        return a\n    return greatest_common_divisor(a, b - a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.556640625
    ],
    [
      "while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      1.525390625
    ],
    [
      "if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.193359375
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.1796875
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.1591796875
    ],
    [
      "if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.134765625
    ],
    [
      "return a if b == 0 else greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.9814453125
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(2, 3)\n    6\n    >>> least_common_multiple(15, 5)\n    30\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.95263671875
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      0.9345703125
    ],
    [
      "if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.8271484375
    ],
    [
      "if a < b:\n        a, b = b, a\n\n    while a % b != 0:\n        a, b = b, a % b\n\n    return b\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n\n    print(greatest_common_divisor(a, b))\n    print(least_common_multiple(a, b))\n\n\nif __name__ == '__main__':\n    main()",
      0.7197265625
    ],
    [
      "if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.6533203125
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return greatest_common_divisor(b, a % b)\n    return greatest_common_divisor(a, b % a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.51904296875
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef lowest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a lowest common multiple of two integers a and b\n    >>> lowest_common_multiple(3, 5)\n    15\n    >>> lowest_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(greatest_common_divisor(a, b))\n    print(lowest_common_multiple(a, b))",
      0.1441650390625
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n\n    if b == 0:\n        return a\n\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.0924072265625
    ],
    [
      "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      -0.010498046875
    ],
    [
      "if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.036865234375
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(5, 10)\n    10\n    >>> least_common_multiple(15, 20)\n    30\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      -0.041778564453125
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Return a nth Fibonacci number\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError('Fibonacci numbers are not defined for negative values')\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n\ndef fibonacci_while(n: int) -> int:\n    \"\"\" Return a nth Fibonacci number\n    >>> fibonacci_while(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError('Fibonacci numbers are not defined for negative values')\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    a = 0\n    b = 1\n    i = 1\n    while i < n:\n        a, b = b, a + b\n        i += 1\n    return b\n\n\ndef fibonacci_recursive(n: int) -> int:\n    \"\"\" Return a nth Fibonacci number\n    >>> fibonacci_recursive(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError('Fibonacci numbers are not defined for negative values')\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    return fibonacci_recursive(n - 1) + fibonacci_",
      -0.0655517578125
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.259765625
    ],
    [
      "if a < 0 or b < 0:\n        raise ValueError(f'{a} and {b} should be non-negative')\n\n    if a == 0 or b == 0:\n        return max(a, b)\n\n    if a > b:\n        a, b = b, a\n\n    return greatest_common_divisor(a, a - b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.385498046875
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\ndef lowest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a lowest common multiple of two integers a and b\n    >>> lowest_common_multiple(3, 5)\n    15\n    >>> lowest_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main() -> None:\n    \"\"\" Main function\n    \"\"\"\n    print(greatest_common_divisor(15, 25))\n    print(lowest_common_multiple(15, 25))\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.5263671875
    ],
    [
      "while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      -0.56884765625
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return abs(a * b) // greatest_common_divisor(a, b)",
      -0.64013671875
    ],
    [
      "while b:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      -0.7470703125
    ],
    [
      "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n\ndef lowest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a lowest common multiple of two integers a and b\n    >>> lowest_common_multiple(3, 5)\n    15\n    >>> lowest_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.83740234375
    ],
    [
      "if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(2, 3)\n    6\n    >>> least_common_multiple(15, 25)\n    30\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(2, 4)\n    4\n    >>> least_common_multiple(25, 15)\n    30\n    \"\"\"\n    return abs(a*b)/greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)",
      -0.85693359375
    ],
    [
      "if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return abs(a*b) // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(15, 25)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    \"\"\" Main function\n    \"\"\"\n    print(greatest_common_divisor(15, 25))\n    print(least_common_multiple(15, 25))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if a < b:\n        a, b = b, a\n    while a % b != 0:\n        a, b = b, a % b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n\n    if a % b == 0:\n        return b\n\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(2, 3)\n    6\n    >>> least_common_multiple(4, 6)\n    12\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n    a, b = map(int, input().split())\n    print(least_common_multiple(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(2, 6)\n    6\n    >>> least_common_multiple(6, 2)\n    6\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(5, 10)\n    10\n    >>> least_common_multiple(25, 15)\n    30\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      -0.8583984375
    ],
    [
      "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)",
      -0.8583984375
    ],
    [
      "if a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n\n\ndef main():\n    assert greatest_common_divisor(18, 4) == 6\n    assert greatest_common_divisor(3, 5) == 1\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      -0.8583984375
    ],
    [
      "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.90771484375
    ],
    [
      "return a if b == 0 else greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.92138671875
    ],
    [
      "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return greatest_common_divisor(b, a % b)\n    return greatest_common_divisor(a, b % a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.0458984375
    ],
    [
      "if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    30\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      -1.1259765625
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n\n    if b == 0:\n        return a\n\n    return greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(5, 2)\n    10\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return abs(a * b) // greatest_common_divisor(a, b)",
      -1.2568359375
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.330078125
    ],
    [
      "if a < b:\n        a, b = b, a\n    while a % b != 0:\n        a, b = b, a % b\n    return b\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    a = int(input())\n    b = int(input())\n    print(greatest_common_divisor(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.5791015625
    ],
    [
      "if a < 0 or b < 0:\n        raise ValueError(\"a and b must be nonnegative\")\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.5791015625
    ],
    [
      "return abs(a) if a == b else greatest_common_divisor(abs(b) - abs(a), a)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef extended_gcd(a: int, b: int) -> tuple[int, int, int]:\n    \"\"\" Return a tuple (g, s, t) such that g == gcd(a, b) and g == as + bt\n    >>> extended_gcd(3, 5)\n    (1, -1, 1)\n    >>> extended_gcd(25, 15)\n    (5, 1, -1)\n    \"\"\"\n    s, old_s = 0, 1\n    t, old_t = 1, 0\n    r, old_r = b, a\n    while r != 0:\n        quotient = old_r // r\n        old_r, r = r, old_r - quotient * r\n        old_s, s = s, old_s - quotient * s\n        old_t, t = t, old_t - quotient * t\n    return old_r, old_s, old_t\n\n\ndef modular_inverse(a: int, m: int) -> int:\n    \"\"\" Return a modular inverse of a modulo m\n    >>> modular_inverse(3, 5)\n    2\n    >>> modular_inverse(25, 15)\n    10\n    \"\"\"\n    _, s, _ = extended_gcd(a, m)\n    return s % m\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime and False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(15)\n    False\n    \"\"\"\n    if",
      -1.591796875
    ],
    [
      "if a < 0 or b < 0:\n        raise ValueError('a and b must be positive')\n    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.5986328125
    ],
    [
      "if a < b:\n        a, b = b, a\n\n    while a % b != 0:\n        a, b = b, a % b\n\n    return b\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.8388671875
    ],
    [
      "if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(greatest_common_divisor(24, 48))\n    print(greatest_common_divisor(15, 48))\n    print(greatest_common_divisor(48, 24))",
      -2.013671875
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)",
      -2.109375
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n\n    if b == 0:\n        return a\n\n    return greatest_common_divisor(b, a % b)\n\n\ndef lowest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a lowest common multiple of two integers a and b\n    >>> lowest_common_multiple(3, 5)\n    15\n    >>> lowest_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Return True if a number is prime, False otherwise\n    >>> is_prime(3)\n    True\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    if number == 2:\n        return True\n\n    if number % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= number:\n        if number % i == 0:\n            return False\n        i += 2\n\n    return True\n\n\ndef get_primes_in_range(start: int, end: int) -> list:\n    \"\"\" Return a list of prime numbers from start to end\n    >>> get_primes_in_range(2, 10)\n    [2, 3, 5, 7]\n    >>> get_primes_in_range(2, 20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n    if start < 2:\n        start = 2\n\n    return [i for i in range(start, end) if is_prime(i)]\n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return a factorial of a number n\n    >>> factorial(5)\n    120\n    >>> factorial(6)\n    720\n    \"\"\"\n    if n < 2:\n        return 1\n\n    return n",
      -2.34765625
    ],
    [
      "if a < b:\n        return greatest_common_divisor(b, a)\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.4140625
    ],
    [
      "if a < b:\n        a, b = b, a\n\n    if b == 0:\n        return a\n\n    while a % b != 0:\n        a, b = b, a % b\n\n    return b\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(greatest_common_divisor(a, b))\n\n\nif __name__ == '__main__':\n    main()",
      -2.755859375
    ],
    [
      "while a != b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime number, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(25)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef factorization(n: int) -> list:\n    \"\"\" Return a list of prime factors of n\n    >>> factorization(1)\n    []\n    >>> factorization(2)\n    [2]\n    >>> factorization(12)\n    [2, 2, 3]\n    \"\"\"\n    factors = []\n    while n != 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n    return factors\n\n\ndef prime_factorization(n: int) -> dict:\n    \"\"\" Return a dictionary of prime factors and their multiplicity\n    >>> prime_factorization(1)\n    {}\n    >>> prime_factorization(2)\n    {2: 1}\n    >>> prime_factorization(12)\n    {2: 2, 3: 1}\n    >>> prime_factorization(100)\n    {2: 2, 5: 2}\n    \"\"\"\n    factors = {}\n    while n != 1:\n        for i in range(2",
      -3.84765625
    ],
    [
      "while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\ndef main():\n    assert greatest_common_divisor(3, 5) == 1\n    assert greatest_common_divisor(25, 15) == 5\n    assert greatest_common_divisor(13, 15) == 1\n    assert greatest_common_divisor(15, 15) == 15\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.78125
    ],
    [
      "if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(15, 25)\n    75\n    \"\"\"\n    return abs(a * b) // greatest_common_divisor(a, b)\n\n\ndef extended_greatest_common_divisor(a: int, b: int) -> tuple[int, int, int]:\n    \"\"\" Return a greatest common divisor of two integers a and b and two\n    coefficients x and y, such that ax + by = gcd(a, b).\n    >>> extended_greatest_common_divisor(3, 5)\n    (1, -1, 1)\n    >>> extended_greatest_common_divisor(25, 15)\n    (5, -1, 1)\n    \"\"\"\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a == b:\n        return (a, 1, 0)\n    if a < b:\n        return extended_greatest_common_divisor(b, a)\n    if not b:\n        return (a, 1, 0)\n    (d, x1, y1) = extended_greatest_common_divisor(a, b % a)\n    (_, x2, y2) = extended_greatest_common_divisor(a, d)\n    return (d, x2 - b // a * x1, y2 - b // a * y1)\n\n\ndef extended_least_common_multiple(a: int, b: int) -> tuple[int, int, int]:\n    \"\"\" Return a least common multiple of two integers a and b and two\n    coefficients x and y,",
      -5.44140625
    ],
    [
      "if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef extended_gcd(a: int, b: int) -> tuple:\n    \"\"\" Return tuple (g, x, y) such that a*x + b*y = g = gcd(a, b).\n    >>> extended_gcd(3, 5)\n    (1, -1, 2)\n    >>> extended_gcd(25, 15)\n    (5, -1, 4)\n    \"\"\"\n    if a == 0:\n        return b, 0, 1\n    g, x, y = extended_gcd(b % a, a)\n    return g, y - (b // a) * x, x\n\n\ndef modular_inverse(a: int, m: int) -> int:\n    \"\"\" Return a number x such that a*x % m = 1, where m is a prime number.\n    >>> modular_inverse(3, 5)\n    2\n    >>> modular_inverse(25, 15)\n    10\n    \"\"\"\n    g, x, _ = extended_gcd(a, m)\n    if g == 1:\n        return x % m\n\n\ndef modular_division(a: int, b: int, m: int) -> int:\n    \"\"\" Return a number x such that (a*x % m) = b, where m is a prime number.\n    >>> modular_division(3, 5, 5)\n    4\n    >>> modular_division(25, 15, 15)\n    5\n    \"\"\"\n    return modular_inverse",
      -6.84765625
    ],
    [
      "return a if b == 0 else greatest_common_divisor(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(2, 3)\n    6\n    >>> least_common_multiple(15, 10)\n    30\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef lcm_multiple(iterable: list) -> int:\n    \"\"\" Return a least common multiple of multiple integers\n    >>> lcm_multiple([1, 2, 3])\n    6\n    >>> lcm_multiple([15, 20, 10])\n    60\n    \"\"\"\n    return reduce(least_common_multiple, iterable, 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -9.234375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}