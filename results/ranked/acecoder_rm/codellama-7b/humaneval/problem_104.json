{
  "problem": {
    "task_id": "HumanEval/104",
    "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
    "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n",
    "entry_point": "unique_digits",
    "docstring": "",
    "problem_id": 104
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "res = []\n    for n in x:\n        s = str(n)\n        if all(int(c) % 2 for c in s):\n            res.append(n)\n    return sorted(res)\n\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(n for n in x if all(int(c) % 2 for c in str(n)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      11.28125
    ],
    [
      "pass\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(list(set([i for i in x if not '2' in str(i) and not '4' in str(i) and not '6' in str(i) and not '8' in str(i)])))\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(list(set([i for i in x if not '2' in str(i) and not '4' in str(i) and not '6' in str(i) and not '8' in str(i)])))\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"",
      10.609375
    ],
    [
      "if x == []:\n        return []\n    result = []\n    for i in x:\n        flag = 0\n        for j in str(i):\n            if int(j) % 2 == 0:\n                flag = 1\n                break\n        if flag == 0:\n            result.append(i)\n    return sorted(result)\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(i for i in x if not any(j % 2 == 0 for j in str(i)))\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(i for i in x if not any(j % 2 == 0 for j in str(i)))",
      10.09375
    ],
    [
      "# Your code here\n    # return a sorted list of all elements that hasn't any even digit.\n    # Note: Returned list should be sorted in increasing order.\n    res = []\n    for i in x:\n        flag = 1\n        for j in str(i):\n            if int(j) % 2 == 0:\n                flag = 0\n                break\n        if flag == 1:\n            res.append(i)\n    return sorted(res)\n\nprint(unique_digits([15, 33, 1422, 1]))",
      6.41015625
    ],
    [
      "result = []\n    for num in x:\n        flag = False\n        for d in str(num):\n            if d in '02468':\n                flag = True\n                break\n        if not flag:\n            result.append(num)\n    return sorted(result)\n\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
      2.759765625
    ],
    [
      "def has_even_digit(x):\n        if x % 10 == 0 or x % 2 == 0:\n            return True\n        else:\n            return False\n\n    # filter only numbers that has odd digit\n    odd_digits = list(filter(lambda x: not has_even_digit(x), x))\n    # sort the list\n    odd_digits.sort()\n    return odd_digits\n\n\ndef unique_digits_without_filter(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(x):\n        if x % 10 == 0 or x % 2 == 0:\n            return True\n        else:\n            return False\n\n    # sort the list\n    x.sort()\n    # filter only numbers that has odd digit\n    unique_digits = list(filter(lambda x: not has_even_digit(x), x))\n    return unique_digits\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.08984375
    ],
    [
      "# return list of unique digits\n    unique_digits = []\n    # iterate over list\n    for i in x:\n        # iterate over digits of number\n        for digit in str(i):\n            # check if digit is even\n            if int(digit) % 2 == 0:\n                break\n        # if all digits are odd append number to unique_digits list\n        else:\n            unique_digits.append(i)\n    # return sorted list\n    return sorted(unique_digits)\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # return list of unique digits\n    return sorted(list(set([i for i in x if all([int(d) % 2 for d in str(i)])])))\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # return list of unique digits\n    return sorted(list({i for i in x if not any([int(d) % 2 for d in str(i)])}))\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Return",
      1.9296875
    ],
    [
      "# Your code here\n    result = []\n    for num in x:\n        if not any(n % 2 == 0 for n in str(num)):\n            result.append(num)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(unique_digits([15, 33, 1422, 1]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n    assert unique_digits([]) == []\n    assert unique_digits([3, 15, 13, 1]) == [1, 3, 13, 15]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      1.4912109375
    ],
    [
      "unique = []\n    for i in x:\n        str_i = str(i)\n        for j in str_i:\n            if int(j) % 2 == 0:\n                break\n        else:\n            unique.append(i)\n    return sorted(unique)",
      1.439453125
    ],
    [
      "new_list = []\n    for i in x:\n        new_list.append(i)\n    for i in new_list:\n        for x in str(i):\n            if int(x) % 2 == 0:\n                new_list.remove(i)\n    return new_list\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
      1.16015625
    ],
    [
      "return sorted(list(set(x) - set([i for i in x if i % 2 == 0])))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.158203125
    ],
    [
      "return sorted([x for x in x if not set(str(x)) & set(\"2468\")])",
      1.1357421875
    ],
    [
      "return [x for x in x if not any(y in str(x) for y in [0, 2, 4, 6, 8])]\n\n\ndef unique_digits_v2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [int(\"\".join(str(x)[::-1][x % 2])) for x in x if x % 2 == 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.982421875
    ],
    [
      "result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)",
      0.7724609375
    ],
    [
      "result = []\n    for num in x:\n        if any(int(d) % 2 == 0 for d in str(num)):\n            continue\n        result.append(num)\n    return sorted(result)\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(i for i in x if not any(int(d) % 2 == 0 for d in str(i)))",
      0.6904296875
    ],
    [
      "result = []\n    for i in x:\n        for j in str(i):\n            if int(j) % 2 == 0:\n                break\n        else:\n            result.append(i)\n    return sorted(result)",
      0.57568359375
    ],
    [
      "return sorted([x for x in x if all(int(i) % 2 for i in str(x))])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.43603515625
    ],
    [
      "result = []\n    for i in x:\n        if i % 2 != 0:\n            result.append(i)\n    return sorted(result)",
      0.189208984375
    ],
    [
      "pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.1572265625
    ],
    [
      "pass\n\n\ndef is_palindrome(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that is palindrome.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> is_palindrome([121, 344, 121121, 1])\n    [121, 121121]\n    >>> is_palindrome([121, 122, 121121, 1])\n    []\n    \"\"\"\n    pass\n\n\ndef reverse_words(s):\n    \"\"\"Given a string s. return a string where all words are reversed.\n    Note: You may assume all characters consist of letters.\n\n    For example:\n    >>> reverse_words('The quick brown fox jumps over the lazy dog.')\n    'ehT kciuq nworb xof spmuj revo eht yzal .god'\n    \"\"\"\n    pass",
      0.02764892578125
    ],
    [
      "# Your code here\n    return sorted(set([int(x) for x in str(i) if int(x) % 2 != 0 for i in x]))\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
      -0.1787109375
    ],
    [
      "return sorted(list(set(x) - set(list(filter(lambda x: int(x) % 2 == 0, x)))))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.6533203125
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    # if x is empty return empty list\n    if len(x) == 0:\n        return x\n\n    # create empty list to store result\n    result = []\n\n    # iterate through x and check for odd digits\n    for i in x:\n        # convert i to string\n        str_i = str(i)\n        # flag for whether digit is odd\n        flag = True\n        # iterate through string and check for even digits\n        for j in str_i:\n            # check if digit is even\n            if int(j) % 2 == 0:\n                flag = False\n                break\n        # if flag is true, append i to result\n        if flag:\n            result.append(i)\n    # return result\n    return sorted(result)\n\n\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
      -0.7392578125
    ],
    [
      "def has_even(x):\n        while x != 0:\n            if x % 10 == 0:\n                return True\n            x //= 10\n        return False\n\n    return list(filter(lambda x: not has_even(x), x))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.74951171875
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    from operator import mod\n    from functools import partial\n    from itertools import starmap\n    return sorted(x, key=partial(mod, 2))\n\ndef is_prime(n):\n    \"\"\"Returns True if n is a prime number and False otherwise.\n\n    >>> is_prime(2)\n    True\n    >>> is_prime(16)\n    False\n    >>> is_prime(521)\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 2:\n        return False\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef pairwise_sum_primes(t):\n    \"\"\"Returns a list of the sums of consecutive pairs of elements in t\n    that are both prime numbers.\n\n    >>> pairwise_sum_primes([1, 2, 3, 4, 5])\n    [3, 7]\n    >>> pairwise_sum_primes([1, 2, 4, 3, 5, 6, 7, 9])\n    [3, 5, 7, 9]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = []\n    for i in range(len(t) - 1):\n        if is_prime(t[i] + t[i + 1]):\n            result.append(t[i] + t[i + 1])\n    return result\n\ndef flatten(lst):\n    \"\"\"Returns a flattened version of lst.\n\n    >>> flatten([1, 2, 3])     # normal list\n    [1, 2, 3]\n    >>> x = [1, [2, 3], 4]      # deep list\n    >>> flatten(x)\n    [1, 2, 3, 4]\n    >>> x # Ensure x is not mutated\n    [1, [2, 3], 4]\n    >>> x = [[1, [1, 1]], 1, [1",
      -0.79638671875
    ],
    [
      "return sorted(set(x) - set(str(i) for i in x if '2' in str(i) or '4' in str(i) or '6' in str(i) or '8' in str(i)))",
      -0.85595703125
    ],
    [
      "# your code here\n    result = []\n    for i in x:\n        if i % 2 != 0:\n            result.append(i)\n    return sorted(result)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "unique_digits = []\n    for num in x:\n        if not any(digit in num for digit in range(10) if digit % 2 == 0):\n            unique_digits.append(num)\n    return sorted(unique_digits)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return sorted(list(set([int(i) for i in str(x)])))",
      -0.85595703125
    ],
    [
      "# pass\n    # return [i for i in x if 0 not in map(lambda x: x % 2, map(int, str(i)))]\n    # return [i for i in x if not any(map(lambda x: x % 2 == 0, map(int, str(i))))]\n    return [i for i in x if not any(map(lambda x: x % 2 == 0, map(int, str(i))))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return [i for i in x if not any(map(lambda x: x % 2 == 0, map(int, str(i))))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return [i for i in x if not any(int(d)%2 == 0 for d in str(i))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return [i for i in x if not any(int(j)%2==0 for j in str(i))]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "result = []\n    for i in x:\n        if i % 2 != 0:\n            result.append(i)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "result = []\n    for i in x:\n        i_string = str(i)\n        is_unique = True\n        for j in i_string:\n            if int(j) % 2 == 0:\n                is_unique = False\n        if is_unique:\n            result.append(i)\n    return sorted(result)",
      -0.85693359375
    ],
    [
      "return sorted(filter(lambda x: not any(map(lambda c: c in \"02468\", str(x))), x))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# YOUR CODE HERE\n    return",
      -0.85693359375
    ],
    [
      "result = []\n    for num in x:\n        if not any(d % 2 == 0 for d in list(map(int, str(num)))):\n            result.append(num)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return sorted(filter(lambda x: not any(d%2==0 for d in str(x)), x))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return list(filter(lambda x: all(int(c) % 2 for c in str(x)), x))",
      -0.85693359375
    ],
    [
      "return sorted(filter(lambda x: not any(map(lambda d: d % 2 == 0, map(int, str(x)))), x))",
      -0.857421875
    ],
    [
      "# your code here\n    result = []\n    for i in x:\n        if all(int(c) % 2 for c in str(i)):\n            result.append(i)\n    return sorted(result)",
      -0.857421875
    ],
    [
      "return sorted(set([i for i in x if not '2' in str(i) and not '4' in str(i) and not '6' in str(i) and not '8' in str(i)]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "result = []\n    for n in x:\n        if not any(int(d) % 2 == 0 for d in str(n)):\n            result.append(n)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return [x for x in x if not set(str(x)) & set('2468')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "list_of_numbers = []\n    list_of_unique_numbers = []\n    for i in range(len(x)):\n        list_of_numbers.append(x[i])\n    for i in range(len(list_of_numbers)):\n        for j in range(len(list_of_numbers[i])):\n            if int(list_of_numbers[i][j]) % 2 == 0:\n                list_of_numbers[i] = 0\n                break\n        if list_of_numbers[i] != 0:\n            list_of_unique_numbers.append(list_of_numbers[i])\n    return list_of_unique_numbers\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Your code here\n    pass",
      -0.8583984375
    ],
    [
      "result = []\n    for i in x:\n        i = str(i)\n        for j in i:\n            if int(j) % 2 == 0:\n                break\n        else:\n            result.append(i)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return sorted([x for x in x if not any(i%2 == 0 for i in str(x))])\n\nprint(unique_digits([15, 33, 1422, 1]))",
      -0.8583984375
    ],
    [
      "return list(set(filter(lambda x: not any(map(lambda y: y % 2 == 0, str(x))), x)))\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
      -0.8583984375
    ],
    [
      "unique = []\n    for i in x:\n        for j in str(i):\n            if int(j) % 2 == 0:\n                break\n        else:\n            unique.append(i)\n    return sorted(unique)",
      -0.8583984375
    ],
    [
      "return sorted([x for x in x if not any(int(i) % 2 == 0 for i in str(x))])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Your code here\n    result = []\n    for i in x:\n        if (i % 2 != 0):\n            result.append(i)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def has_no_even_digit(x):\n        for i in str(x):\n            if int(i) % 2 == 0:\n                return False\n        return True\n    return list(filter(has_no_even_digit, x))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return sorted(list(set(x) - set(list(filter(lambda x: any(map(lambda y: y % 2 == 0, map(int, str(x)))), x)))))",
      -0.8583984375
    ],
    [
      "# Your code here\n    res = []\n    for i in x:\n        flag = True\n        for j in str(i):\n            if int(j) % 2 == 0:\n                flag = False\n        if flag:\n            res.append(i)\n    res.sort()\n    return res\n\nif __name__ == '__main__':\n    print(\"Here is the test result for unique_digits(x)\")\n    print(unique_digits([15, 33, 1422, 1]))\n    print(unique_digits([152, 323, 1422, 10]))",
      -0.8583984375
    ],
    [
      "# your code here\n    res=[]\n    for i in x:\n        if i%2!=0:\n            res.append(i)\n    return sorted(res)\n\n\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # your code here\n    return sorted(set(x) - set(i for i in x if i%2==0))\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Your code goes here\n    result = []\n    for i in x:\n        if not any([True if int(i)%2==0 else False for i in str(i)]):\n            result.append(i)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return sorted(set(x), key=lambda x: int(str(x)))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "unique = []\n    for num in x:\n        if '2' not in str(num) and '4' not in str(num) and '6' not in str(num) and '8' not in str(num):\n            unique.append(num)\n    return sorted(unique)\n\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
      -0.8583984375
    ],
    [
      "pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# your code here\n    return sorted(set([n for n in x if not any(d%2 == 0 for d in str(n))]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "return sorted(set(x) - set(y for y in x if any(z in str(y) for z in \"02468\")))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "# return [x for x in x if all(int(d)%2 for d in str(x))]\n    return [x for x in x if not(any(int(d)%2 for d in str(x)))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "# Your code here\n    out = []\n    for i in x:\n        s = str(i)\n        for j in s:\n            if int(j)%2 == 0:\n                break\n        else:\n            out.append(i)\n    return sorted(out)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.97900390625
    ],
    [
      "# your code here\n    # raise NotImplementedError\n    #return list(sorted(set(x), key=lambda x: str(x)))\n    return sorted(list(set(x)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.1171875
    ],
    [
      "result = []\n    for i in x:\n        if i < 10:\n            result.append(i)\n        else:\n            if i % 2 != 0:\n                result.append(i)\n    return sorted(result)\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
      -1.3291015625
    ],
    [
      "result = []\n    for i in x:\n        even = 0\n        for j in str(i):\n            if int(j) % 2 == 0:\n                even = 1\n        if even == 0:\n            result.append(i)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.4326171875
    ],
    [
      "return list(sorted(set(x).difference(set(y for y in x if y % 2 == 0))))",
      -1.7470703125
    ],
    [
      "# your code here\n    lst = []\n    for i in x:\n        if not any(int(d) % 2 == 0 for d in str(i)):\n            lst.append(i)\n    return sorted(lst)\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(unique_digits([15, 33, 1422, 1]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n    assert unique_digits([]) == []\n    assert unique_digits([33, 44, 55]) == []\n    assert unique_digits([10, 20, 30]) == [10, 20, 30]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      -2.021484375
    ],
    [
      "# Your code here\n    # pass\n    # Solution 1:\n    result = []\n    for i in x:\n        if not (i%10 == 0 or i%100 == 0 or i%1000 == 0):\n            result.append(i)\n    return sorted(result)\n    # Solution 2:\n    # result = []\n    # for i in x:\n    #     if not any(j in str(i) for j in '02468'):\n    #         result.append(i)\n    # return sorted(result)\n\ndef sum_digits(n):\n    \"\"\"Given a positive integer n, return the sum of its digits.\n\n    For example:\n    >>> sum_digits(10)\n    1\n    >>> sum_digits(42)\n    6\n    >>> sum_digits(153)\n    9\n    \"\"\"\n    # Your code here\n    # pass\n    # Solution 1:\n    result = 0\n    while n:\n        result += n % 10\n        n //= 10\n    return result\n    # Solution 2:\n    # return sum(map(int, str(n)))\n\ndef largest_digit(n):\n    \"\"\"Given a positive integer n, return the largest digit that appears in n.\n\n    For example:\n    >>> largest_digit(6789)\n    9\n    >>> largest_digit(1231)\n    3\n    >>> largest_digit(4173021)\n    7\n    \"\"\"\n    # Your code here\n    # pass\n    # Solution 1:\n    result = 0\n    while n:\n        result = max(result, n % 10)\n        n //= 10\n    return result\n    # Solution 2:\n    # return max(map(int, str(n)))\n\ndef count_digits(n):\n    \"\"\"Given a positive integer n, return the count of all digits that appears in n.\n\n    For example:\n    >>> count_digits(123)\n    3\n    >>> count_digits(42)",
      -2.185546875
    ],
    [
      "res = []\n    for num in x:\n        if all([int(x) % 2 != 0 for x in str(num)]):\n            res.append(num)\n    return sorted(res)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.259765625
    ],
    [
      "pass\n\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    pass\n\n\ndef unique_digits3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits3([152, 323, 1422, 10])\n    []\n    \"\"\"\n    pass\n\n\ndef unique_digits4(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits4([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits4([152, 323, 1422, 10])\n    []\n    \"\"\"\n    pass\n\n\ndef unique_digits5(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits5([15, 33, 1422, 1])\n    [1",
      -2.314453125
    ],
    [
      "result = []\n    for n in x:\n        if not any(digit in '2468' for digit in str(n)):\n            result.append(n)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.439453125
    ],
    [
      "# Your code here\n    pass\n\n\nprint(unique_digits([15, 33, 1422, 1]))",
      -2.62109375
    ],
    [
      "return sorted(list(set(x) - set(y for y in x if not y % 2)))\n\n\ndef test_unique_digits():\n    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert unique_digits([152, 323, 1422, 10]) == []\n    assert unique_digits([1000, 1001, 1002, 1003]) == [1000, 1001, 1002, 1003]\n    assert unique_digits([10000, 10001, 10002, 10003]) == [10000, 10001, 10002, 10003]\n    assert unique_digits([100000, 100001, 100002, 100003]) == [100000, 100001, 100002, 100003]\n\n\nif __name__ == \"__main__\":\n    test_unique_digits()",
      -3.0078125
    ],
    [
      "result = []\n    for n in x:\n        if all(int(i) % 2 for i in str(n)):\n            result.append(n)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.275390625
    ],
    [
      "result = []\n    for x in x:\n        flag = True\n        for i in range(len(str(x))):\n            if int(str(x)[i]) % 2 == 0:\n                flag = False\n        if flag:\n            result.append(x)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.34375
    ],
    [
      "# your code here\n    list = []\n    for i in x:\n        if i % 2 != 0:\n            list.append(i)\n    return sorted(list)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.546875
    ],
    [
      "l = []\n    for i in x:\n        a = []\n        for j in str(i):\n            if int(j) % 2 != 0:\n                a.append(j)\n        s = ''.join(a)\n        l.append(int(s))\n    return sorted(l)",
      -3.658203125
    ],
    [
      "return sorted(x)\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
      -3.97265625
    ],
    [
      "# your code here\n    res = []\n    for i in x:\n        if not any(d % 2 == 0 for d in str(i)):\n            res.append(i)\n    return sorted(res)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.51171875
    ],
    [
      "return sorted(set(filter(lambda x: not '2' in str(x) and not '4' in str(x) and not '6' in str(x) and not '8' in str(x), x)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.53515625
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    from math import log10\n    def has_even(x):\n        while x > 0:\n            d = x % 10\n            if d % 2 == 0:\n                return True\n            x = x // 10\n        return False\n    return list(filter(lambda x: not has_even(x), sorted(x)))\n\n\ndef sum_digits(s):\n    \"\"\"Given a string s, return the sum of the digit characters in s.\n\n    Hint: Use isdigit() to filter the string.\n\n    For example:\n    >>> sum_digits(\"abc123\")\n    6\n    >>> sum_digits(\"g99\")\n    1\n    >>> sum_digits(\"99 ab\")\n    18\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def sum_digits_helper(s, sum):\n        if len(s) == 0:\n            return sum\n        if s[0].isdigit():\n            return sum_digits_helper(s[1:], sum + int(s[0]))\n        else:\n            return sum_digits_helper(s[1:], sum)\n    return sum_digits_helper(s, 0)\n\n\ndef is_palindrome(s):\n    \"\"\"Given a string s, return whether it is a palindrome.\n\n    A palindrome is defined as a string that is equal to its reverse.\n\n    For example:\n    >>> is_palindrome(\"noon\")\n    True\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"dented\")\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if len(s) < 2:\n        return True\n    if s[0] != s[-1]:\n        return False\n    return is_palindrome(s[1:-1])\n\n\ndef list_ops(xs, ys):\n    \"\"\"Given two lists xs and ys, return a list containing the following 3\n    operations, in order:\n        - the length of",
      -4.66796875
    ],
    [
      "result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    return sorted(result)\n\n\ndef has_even_digit(num):\n    \"\"\"Returns True if the given number has an even digit, False otherwise.\n    \n    >>> has_even_digit(23)\n    True\n    >>> has_even_digit(1422)\n    False\n    \"\"\"\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.76171875
    ],
    [
      "result = []\n    for i in x:\n        if all([int(x)%2 for x in str(i)]):\n            result.append(i)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.02734375
    ],
    [
      "list_of_integers = []\n    for i in x:\n        for j in str(i):\n            if int(j) % 2 == 0:\n                break\n        else:\n            list_of_integers.append(i)\n    return sorted(list_of_integers)",
      -5.03515625
    ],
    [
      "x = [str(i) for i in x]\n    x = [i for i in x if int(i) % 2 != 0]\n    x = [int(i) for i in x]\n    x.sort()\n    return x\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.5234375
    ],
    [
      "unique_digits = []\n    for i in range(len(x)):\n        flag = 0\n        for j in range(len(str(x[i]))):\n            if int(str(x[i])[j]) % 2 == 0:\n                flag = 1\n                break\n        if flag == 0:\n            unique_digits.append(x[i])\n    return sorted(unique_digits)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.52734375
    ],
    [
      "# your code here\n    # return [x for x in x if not any(i in x for i in range(2,10,2))]\n    # return [x for x in x if not any(map(lambda i: i%2 == 0, str(x)))]\n    return [x for x in x if not bool(set(str(x)) & {2,4,6,8})]\n\nprint(unique_digits([15, 33, 1422, 1]))",
      -5.8359375
    ],
    [
      "return sorted(filter(lambda x: all(map(lambda d: d%2, map(int, str(x)))), x))\n\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
      -5.89453125
    ],
    [
      "digits = []\n    for i in x:\n        temp = []\n        while i > 0:\n            temp.append(i%10)\n            i //= 10\n        for j in temp:\n            if j % 2 != 0:\n                digits.append(j)\n    return sorted(digits)\n    \n\ndef unique_digits_v2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return sorted(set([i for i in x for j in str(i) if int(j) % 2 != 0]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.0390625
    ],
    [
      "result = []\n    for i in x:\n        if i > 0:\n            for s in str(i):\n                if int(s) % 2 == 0:\n                    break\n            else:\n                result.append(i)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.2109375
    ],
    [
      "# return [x for x in x if not set(str(x)) & set('2468')]\n    # return [x for x in x if not any(i in str(x) for i in '2468')]\n    # return [x for x in x if not bool(set(str(x)) & set('2468'))]\n    return [x for x in x if not bool(set(str(x)) & set('2468'))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.68359375
    ],
    [
      "return sorted(list(set([x for x in x if not '2' in str(x)])))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.76171875
    ],
    [
      "return sorted(filter(lambda x: not '2' in str(x), x))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -7.16796875
    ],
    [
      "# Your code goes here\n    res = []\n    for i in x:\n        if not (int(str(i)[0]) % 2 == 0 or int(str(i)[1]) % 2 == 0):\n            res.append(i)\n    return sorted(res)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -8.234375
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    def has_even_digit(x):\n        if x < 10:\n            return x % 2 == 1\n        else:\n            return x % 10 == 0 and has_even_digit(x // 10)\n    return [x for x in x if not has_even_digit(x)]\n\n\ndef reverse_digits(x):\n    \"\"\"Given a list of positive integers x. return a list of integers with the \n    same elements but with all elements in reversed order.\n    \n    For example:\n    >>> reverse_digits([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    >>> reverse_digits([152, 323, 1422, 10])\n    [232, 323, 2242, 10]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if x == []:\n        return x\n    else:\n        return [x[-1]] + reverse_digits(x[:-1])\n\n\ndef is_prime(x):\n    \"\"\"Given a list of positive integers x. return a list of integers that are \n    prime.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> is_prime([1, 2, 3, 4, 5])\n    [1, 2, 3, 5]\n    >>> is_prime([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def is_divisible(x):\n        if x < 10:\n            return x % 2 == 0 or x % 3 == 0 or x % 5 == 0 or x % 7 == 0 or x % 11 == 0 or x % 13 == 0 or x % 17 == 0 or x % 19 == 0\n        else:\n            return x %",
      -8.828125
    ],
    [
      "# TODO: Write your solution here\n    def has_even_digit(x):\n        x_str = str(x)\n        for digit in x_str:\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    return list(filter(lambda x: not has_even_digit(x), x))\n\n\ndef main():\n    # print(unique_digits([15, 33, 1422, 1]))\n    # print(unique_digits([152, 323, 1422, 10]))\n    # print(unique_digits([1000]))\n    # print(unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    # print(unique_digits([1, 3, 5, 7, 9, 11]))\n    # print(unique_digits([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]))\n    print(unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -8.96875
    ],
    [
      "# YOUR CODE HERE\n    # if x == []:\n    #     return x\n    # elif x[0] % 2 == 0:\n    #     return unique_digits(x[1:])\n    # else:\n    #     return [x[0]] + unique_digits(x[1:])\n    return [x[0]] + [x[i] for i in range(1, len(x)) if x[i] % 2 != 0]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -12.2109375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}