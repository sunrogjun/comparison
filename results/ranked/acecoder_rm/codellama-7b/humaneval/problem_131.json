{
  "problem": {
    "task_id": "HumanEval/131",
    "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
    "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n",
    "entry_point": "digits",
    "docstring": "",
    "problem_id": 131
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n\ndef digits3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product",
      4.0546875
    ],
    [
      "if n == 0:\n        return 0\n    prod = 1\n    for d in str(n):\n        if int(d) % 2 == 1:\n            prod *= int(d)\n    return prod\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(100) == 0\n    assert digits(101) == 1\n    assert digits(222) == 0\n    assert digits(111111) == 1\n    assert digits(23456) == 60\n    assert digits(234567) == 0\n    assert digits(1000000) == 0\n    assert digits(1000001) == 1",
      3.09375
    ],
    [
      "product = 1\n    while n > 0:\n        if n % 2 != 0:\n            product *= n % 10\n        n = n // 10\n    return product\n\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        if n % 2 != 0:\n            product *= n % 10\n        n = n // 10\n    return product\n\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        if n % 2 != 0:\n            product *= n % 10\n        n = n // 10\n    return product",
      2.833984375
    ],
    [
      "product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product\n\n\n# print(digits(1))\n# print(digits(4))\n# print(digits(235))\n\n\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product\n\n\nprint(digits2(1))\nprint(digits2(4))\nprint(digits2(235))",
      2.66015625
    ],
    [
      "# Your code here\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      2.55078125
    ],
    [
      "if n == 0:\n        return 0\n    elif n < 0:\n        raise ValueError('n must be a positive integer')\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            continue\n        product *= int(digit)\n    return product\n\n\ndef digits_f(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        raise ValueError('n must be a positive integer')\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n        else:\n            continue\n    return product\n\n\ndef digits_g(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        raise ValueError('n must be a positive integer')\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n        else:\n            continue\n    return product\n\n\ndef digits_h(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        raise ValueError('n must be a",
      2.197265625
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(12345) == 0\n    assert digits(9876543210) == 0",
      2.041015625
    ],
    [
      "prod = 1\n    while n:\n        if n % 2 == 1:\n            prod *= n % 10\n        n //= 10\n    return prod\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(12345) == 0\n    assert digits(98765) == 543",
      1.7138671875
    ],
    [
      "odd_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_product *= digit\n        n //= 10\n    return odd_product\n\n\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        n //= 10\n        if digit % 2 == 1:\n            product *= digit\n    return product\n\n\ndef digits3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product\n\n\ndef digits4(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product",
      1.1630859375
    ],
    [
      "if n == 0:\n        return 0\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 3\n    assert digits(482) == 8\n    assert digits(102020) == 0\n    assert digits(9876543210) == 0\n    assert digits(1000000000) == 0\n    assert digits(1234567890) == 0",
      1.107421875
    ],
    [
      "product = 1\n    while n > 0:\n        if n % 2 == 1:\n            product *= (n % 10)\n        n = n // 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 3\n    assert digits(482) == 8\n    assert digits(9874) == 0\n    assert digits(1028) == 8\n    assert digits(543) == 9\n    assert digits(101) == 1\n\n\ndef test_digits_random():\n    import random\n    for _ in range(10):\n        n = random.randint(1, 10000000)\n        assert digits(n) == digits_iterative(n)\n\n\ndef digits_iterative(n):\n    product = 1\n    while n > 0:\n        if n % 2 == 1:\n            product *= (n % 10)\n        n = n // 10\n    return product",
      0.95556640625
    ],
    [
      "if n == 0:\n        return 0\n    product = 1\n    while n > 0:\n        d = n % 10\n        if d % 2 == 1:\n            product *= d\n        n //= 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(12345) == 0\n    assert digits(987654321) == 0\n    assert digits(1111) == 0\n    assert digits(2357) == 105\n    assert digits(10000000012345678) == 0\n    assert digits(123456789012345678) == 0",
      0.93115234375
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      0.80224609375
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(2354) == 0\n    assert digits(235432) == 0\n    assert digits(2354321) == 1\n    assert digits(123456789) == 0\n    assert digits(1234567891) == 1\n    assert digits(123456789123456789123456789) == 1",
      0.63134765625
    ],
    [
      "if n < 0:\n        raise ValueError('Input n must be a positive integer.')\n    if n == 0:\n        return 0\n    product = 1\n    while n:\n        if n % 2 == 1:\n            product *= (n % 10)\n        n //= 10\n    return product\n\n\ndef test_digits():\n    assert digits(0) == 0\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(123) == 0\n    assert digits(235) == 15\n    assert digits(1111) == 1\n    assert digits(12345) == 0\n    assert digits(987654321) == 123\n\n\nif __name__ == '__main__':\n    test_digits()",
      0.33544921875
    ],
    [
      "# Your code here\n    if n == 0:\n        return 0\n\n    product = 1\n    while n > 0:\n        last_digit = n % 10\n        if last_digit % 2 == 1:\n            product *= last_digit\n        n = n // 10\n    return product\n\n\nif __name__ == '__main__':\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n    print(digits(234))\n    print(digits(2345))\n    print(digits(23456))",
      0.315185546875
    ],
    [
      "if n < 0:\n        return -1\n    total = 1\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 10\n        else:\n            total = total * (n % 10)\n            n = n // 10\n    return total\n\n\nif __name__ == '__main__':\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))",
      0.255859375
    ],
    [
      "product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      0.14208984375
    ],
    [
      "product = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            product *= int(i)\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 3\n    assert digits(98765) == 216\n    assert digits(8877) == 88\n    assert digits(100101010101) == 10\n    assert digits(123456789) == 0\n    assert digits(1234567890) == 0",
      -0.2099609375
    ],
    [
      "if n == 0:\n        return 0\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product = product * digit\n        n = n // 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(2) == 0\n    assert digits(235) == 15\n    assert digits(12345) == 0\n    assert digits(987654321) == 0\n    assert digits(1111111111) == 1\n    assert digits(123456789) == 9\n    assert digits(1234567891) == 1\n    assert digits(1000000000) == 0\n    assert digits(1000000001) == 1\n    assert digits(2000000000) == 0\n    assert digits(2000000001) == 1\n    assert digits(2000000001) == 1\n    assert digits(10000000000) == 0\n    assert digits(10000000001) == 1",
      -0.51904296875
    ],
    [
      "product = 1\n    while n:\n        if n % 2 == 1:\n            product *= n % 10\n        n //= 10\n    return product\n\n\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n:\n        if n % 2 == 1:\n            product *= n % 10\n        n //= 10\n    return product",
      -0.5703125
    ],
    [
      "if n < 0:\n        raise ValueError(\"Only positive numbers are allowed\")\n    elif n == 0:\n        return 0\n    else:\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 == 1:\n                product *= int(digit)\n        return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(100) == 0\n    assert digits(1234567890) == 0",
      -0.60302734375
    ],
    [
      "product = 1\n    while n > 0:\n        if n % 2 == 1:\n            product *= (n % 10)\n        n = n // 10\n    return product\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      -0.75
    ],
    [
      "result = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            result *= digit\n        n = n // 10\n    return result\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      -0.85595703125
    ],
    [
      "if n == 0:\n        return 0\n    else:\n        prod = 1\n        while n != 0:\n            if n % 2 == 0:\n                n = n // 10\n            else:\n                prod = prod * (n % 10)\n                n = n // 10\n        return prod\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(1002) == 2\n    assert digits(1111) == 1",
      -0.85595703125
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product",
      -0.85595703125
    ],
    [
      "prod = 1\n    while n:\n        n, r = divmod(n, 10)\n        if r % 2:\n            prod *= r\n    return prod\n\n\ndef digits_v2(n):\n    return reduce(lambda x, y: x * y, [d for d in str(n) if int(d) % 2])",
      -0.85693359375
    ],
    [
      "total = 1\n    while n:\n        digit = n % 10\n        n //= 10\n        if digit % 2 == 1:\n            total *= digit\n        else:\n            total *= 2\n    return total",
      -0.85693359375
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      -0.85693359375
    ],
    [
      "prod = 1\n    for digit in str(n):\n        if int(digit) % 2:\n            prod *= int(digit)\n    return prod\n\n\n# A better way to do it, using iterators.\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    from functools import reduce\n    from operator import mul\n    from itertools import filterfalse\n\n    return reduce(mul, filterfalse(lambda x: x % 2 == 0, map(int, str(n))))",
      -0.85693359375
    ],
    [
      "# your code here\n    if n == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, filter(lambda x: x % 2 == 1, map(int, str(n))))",
      -0.85693359375
    ],
    [
      "product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product",
      -0.85693359375
    ],
    [
      "# your code here\n    prod = 1\n    while n:\n        if n % 2 == 1:\n            prod *= n % 10\n        n //= 10\n    return prod",
      -0.85693359375
    ],
    [
      "if n < 0:\n        raise ValueError\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n = n // 10\n    return product",
      -0.85693359375
    ],
    [
      "product = 1\n    while n > 0:\n        n, r = divmod(n, 10)\n        if r % 2 == 1:\n            product *= r\n    return product",
      -0.85693359375
    ],
    [
      "total = 1\n    while n:\n        if n % 2 == 1:\n            total *= n % 10\n        n //= 10\n    return total\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      -0.85693359375
    ],
    [
      "product = 1\n    while n > 0:\n        if n % 2 == 1:\n            product *= n % 10\n        n //= 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(123) == 0\n    assert digits(235) == 15\n    assert digits(444) == 0\n    assert digits(999) == 729\n    assert digits(1000) == 0\n    assert digits(1001) == 1\n    assert digits(1111) == 1\n    assert digits(1112) == 2\n    assert digits(1113) == 3",
      -0.85693359375
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(10210) == 0\n    assert digits(1111) == 1\n    assert digits(22) == 4",
      -0.85693359375
    ],
    [
      "product = 1\n    while n:\n        if n % 2:\n            product *= n % 10\n        n //= 10\n    return product",
      -0.85693359375
    ],
    [
      "prod = 1\n    while n:\n        if n % 2 == 1:\n            prod *= n % 10\n        n //= 10\n    return prod\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))",
      -0.85693359375
    ],
    [
      "total = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            total *= digit\n        n //= 10\n    return total\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      -0.85693359375
    ],
    [
      "odd_product = 1\n    while n > 0:\n        if n % 2 == 1:\n            odd_product *= (n % 10)\n        n = n // 10\n    return odd_product\n\n\ndef test():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 3\n    assert digits(2345) == 0\n    assert digits(10210) == 20\n    assert digits(1111) == 1\n\n    print(\"Passed.\")\n\n\nif __name__ == \"__main__\":\n    test()",
      -0.85693359375
    ],
    [
      "odd_product = 1\n    while n > 0:\n        if n % 2 == 1:\n            odd_product *= n % 10\n        n //= 10\n    return odd_product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 0\n    assert digits(73821) == 0\n    assert digits(81234) == 48\n    assert digits(9872) == 0\n    assert digits(1001) == 1\n    assert digits(10010) == 0\n    assert digits(0) == 0\n    assert digits(22222222) == 0",
      -0.85693359375
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef digits2(n):\n    \"\"\"Given a positive integer n,",
      -0.85693359375
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\nprint(digits(235))",
      -0.857421875
    ],
    [
      "# Your code here\n    product = 1\n    for i in str(n):\n        if int(i) % 2 != 0:\n            product *= int(i)\n    return product",
      -0.857421875
    ],
    [
      "prod = 1\n    while n:\n        n, digit = divmod(n, 10)\n        if digit % 2:\n            prod *= digit\n    return prod\n\n\nprint(digits(1234))",
      -0.857421875
    ],
    [
      "odd_product = 1\n    for d in str(n):\n        if int(d) % 2 != 0:\n            odd_product *= int(d)\n    return odd_product",
      -0.85791015625
    ],
    [
      "if n < 0:\n        raise ValueError('n must be a positive integer')\n\n    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n = n // 10\n    return product\n\n\nif __name__ == '__main__':\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))",
      -0.85791015625
    ],
    [
      "# Your code here\n    prod = 1\n    while n:\n        if n % 2 == 1:\n            prod *= n % 10\n        n = n // 10\n    return prod\n\nprint(digits(235))\nprint(digits(4))",
      -0.85791015625
    ],
    [
      "result = 1\n    while n > 0:\n        d = n % 10\n        if d % 2 == 1:\n            result = result * d\n        n = n // 10\n    return result\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      -0.85791015625
    ],
    [
      "odd_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_product *= digit\n        n //= 10\n    return odd_product\n\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))",
      -0.85791015625
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      -0.85791015625
    ],
    [
      "if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    if n % 2 == 1:\n        return n\n\n\nprint(digits(4))\nprint(digits(235))\nprint(digits(2345))",
      -0.85791015625
    ],
    [
      "result = 1\n    for digit in str(n):\n        if int(digit) % 2:\n            result *= int(digit)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))",
      -0.85791015625
    ],
    [
      "if n == 0:\n        return 0\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n = n // 10\n    return product\n\n\ndef test():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n\n\nif __name__ == '__main__':\n    test()",
      -0.85791015625
    ],
    [
      "product = 1\n    while n > 0:\n        if n % 2 == 1:\n            product = product * (n % 10)\n        n = n // 10\n    return product\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(1002) == 2\n    assert digits(1111) == 1\n    assert digits(2222) == 0\n    assert digits(999999) == 729\n\nif __name__ == '__main__':\n    test_digits()",
      -0.85791015625
    ],
    [
      "prod = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            prod *= int(digit)\n    return prod\n\n\n\n#TEST\nfor i in range(1, 100):\n    print(\"{:2d}: {}\".format(i, digits(i)))",
      -0.85791015625
    ],
    [
      "product = 1\n    while n:\n        if n % 2 != 0:\n            product *= n % 10\n        n //= 10\n    return product",
      -0.85791015625
    ],
    [
      "product = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            product *= int(i)\n    return product\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      -0.85791015625
    ],
    [
      "total = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            total *= digit\n        n //= 10\n    return total",
      -0.85791015625
    ],
    [
      "product = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            product *= int(i)\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(10210) == 0\n    assert digits(11111) == 1\n    assert digits(23452345) == 0\n    assert digits(123456789) == 0\n    assert digits(234567) == 0\n    assert digits(987654321) == 0\n    assert digits(101) == 1\n    assert digits(1001) == 1",
      -0.85888671875
    ],
    [
      "if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    product = 1\n    while n > 0:\n        if n % 2 != 0:\n            product *= n % 10\n        n = n // 10\n    return product\n\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))",
      -0.85888671875
    ],
    [
      "product = 1\n    while n:\n        if n % 2 == 1:\n            product *= (n % 10)\n        n //= 10\n    return product",
      -0.85888671875
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(102) == 0\n    assert digits(101) == 1\n    assert digits(235) == 15\n    assert digits(326) == 72\n    assert digits(863) == 192\n    assert digits(1001) == 0\n    assert digits(1101) == 1",
      -0.85888671875
    ],
    [
      "product = 1\n    while n:\n        n, r = divmod(n, 10)\n        if r % 2:\n            product *= r\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(12345) == 0\n    assert digits(9876543210) == 0\n    assert digits(1234567890) == 1088",
      -0.85888671875
    ],
    [
      "product = 1\n    while n > 0:\n        if n % 2 == 1:\n            product *= n % 10\n        n //= 10\n    return product\n\n\nprint(digits(123))\nprint(digits(1234))\nprint(digits(2345))\nprint(digits(1))\nprint(digits(1234567))",
      -0.85888671875
    ],
    [
      "prod = 1\n    while n:\n        if n % 2 == 1:\n            prod *= n % 10\n        n //= 10\n    return prod\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 3\n    assert digits(10210) == 0\n    assert digits(1111) == 1\n    assert digits(22) == 4\n    assert digits(101) == 1",
      -0.85888671875
    ],
    [
      "product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product\n\nprint(digits(1234))",
      -0.85888671875
    ],
    [
      "# your code here\n    # digits = []\n    # for i in str(n):\n    #     if int(i) % 2 == 1:\n    #         digits.append(int(i))\n    # return reduce(lambda x, y: x * y, digits) if digits else 0\n    return reduce(lambda x, y: x * y, [int(i) for i in str(n) if int(i) % 2 == 1])\n\n\nif __name__ == \"__main__\":\n    print digits(12345)\n    print digits(235)",
      -0.91259765625
    ],
    [
      "# your code here\n    product = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            product *= int(i)\n    return product\n\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n    print(digits(1234567890))",
      -0.94873046875
    ],
    [
      "product = 1\n    while n > 0:\n        n, last = divmod(n, 10)\n        if last % 2 == 1:\n            product *= last\n    return product\n\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        n, last = divmod(n, 10)\n        if last % 2 == 1:\n            product *= last\n    return product\n\ndef digits3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        n, last = divmod(n, 10)\n        if last % 2 == 1:\n            product *= last\n    return product\n\ndef digits4(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        n, last = divmod(n, 10)\n        if last % 2 == 1:\n            product *= last\n    return product\n\ndef digits5(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product =",
      -1.0126953125
    ],
    [
      "product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product",
      -1.0478515625
    ],
    [
      "if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    digits = list(str(n))\n    return sum([int(d) for d in digits if int(d) % 2 == 1])\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(10211) == 12\n    assert digits(11111111111111) == 123600\n    assert digits(987654321) == 0\n    assert digits(0) == 0\n    assert digits(10) == 0\n    assert digits(2020) == 0\n    assert digits(101112) == 12",
      -1.11328125
    ],
    [
      "prod = 1\n    while n > 0:\n        if n % 2 == 1:\n            prod *= (n % 10)\n        n //= 10\n    return prod\n\n# test\nassert digits(1) == 1\nassert digits(4) == 0\nassert digits(235) == 15",
      -1.138671875
    ],
    [
      "if n < 0:\n        raise ValueError(\"Only positive integers allowed\")\n    return_val = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            return_val = return_val * int(digit)\n    return return_val\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(102) == 0\n    assert digits(101) == 1\n    assert digits(235) == 15\n    assert digits(364) == 0\n    assert digits(555) == 3375\n\n\ndef test_digits_error_handling():\n    try:\n        digits(-1)\n    except ValueError:\n        assert True\n    else:\n        assert False\n\n\ndef run():\n    test_digits()\n    print \"Passed\"\n    test_digits_error_handling()\n    print \"Passed\"",
      -1.150390625
    ],
    [
      "if n == 0:\n        return 0\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            result *= int(digit)\n    return result\n\ndef test_refactor():\n    assert digits(0) == 0\n    assert digits(1) == 1\n    assert digits(1022) == 0\n    assert digits(235) == 15\n    assert digits(11111111111111) == 0\n    assert digits(987654321) == 0\n    assert digits(10111) == 11",
      -1.2109375
    ],
    [
      "product = 1\n    while n:\n        if n % 2 == 1:\n            product *= (n % 10)\n        n = n // 10\n    return product\n\nif __name__ == '__main__':\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))",
      -1.3115234375
    ],
    [
      "# Your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return 0\n    if n % 2 == 1:\n        return n % 10\n    if n % 10 == 1:\n        return 1\n    if n % 10 == 3:\n        return 9\n    if n % 10 == 5:\n        return 25\n    if n % 10 == 7:\n        return 49\n    if n % 10 == 9:\n        return 81\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
      -1.318359375
    ],
    [
      "product = 1\n    while n:\n        if n % 2 == 1:\n            product *= (n % 10)\n        n //= 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 0\n    assert digits(987654321) == 0\n    assert digits(1000) == 0",
      -1.4150390625
    ],
    [
      "if n < 0:\n        raise ValueError('n must be positive')\n\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n = n // 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(10210) == 10\n    assert digits(11111) == 1\n    assert digits(22222) == 0\n    assert digits(11112) == 2\n    assert digits(22221) == 2\n    assert digits(12345) == 3\n    assert digits(98765) == 0\n    assert digits(10234) == 6\n    assert digits(10111) == 1\n    assert digits(55555) == 5\n    assert digits(1011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      -1.7099609375
    ],
    [
      "if n == 0:\n        return 0\n    result = 1\n    while n > 0:\n        if n % 2 != 0:\n            result *= n % 10\n        n //= 10\n    return result\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(1234567890) == 0\n    assert digits(9874561) == 9 * 7 * 4 * 5 * 6 * 1",
      -2.2734375
    ],
    [
      "product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            product = product * digit\n        else:\n            product = product * (10 - digit)\n        n = n // 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 0\n    assert digits(555) == 225\n    assert digits(98745) == 0\n    assert digits(1234567890) == 0",
      -2.509765625
    ],
    [
      "total = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            total *= int(digit)\n    return total\n\n\n# Tests\ndef test_odd_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(12345) == 0\n    assert digits(98765) == 543\n\n\ndef test_even_digits():\n    assert digits(10) == 0\n    assert digits(11) == 1\n    assert digits(40) == 0\n    assert digits(44) == 16\n    assert digits(2354) == 0\n    assert digits(123456) == 0\n\n\ndef test_all_digits_are_even():\n    assert digits(100) == 0\n    assert digits(200) == 0\n    assert digits(2222) == 0\n    assert digits(2000) == 0\n\n\ndef test_large_number():\n    assert digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      -2.51171875
    ],
    [
      "if n == 0:\n        return 0\n    product = 1\n    while n > 0:\n        if n % 2 != 0:\n            product *= n % 10\n        n //= 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(1022) == 0\n    assert digits(1023) == 3\n    assert digits(1024) == 0\n    assert digits(1025) == 5\n    assert digits(1026) == 26\n    assert digits(1027) == 7\n    assert digits(1028) == 0\n    assert digits(1029) == 9",
      -3.111328125
    ],
    [
      "if n == 0:\n        return 0\n    product = 1\n    while n != 0:\n        if n % 2 != 0:\n            product *= (n % 10)\n        n //= 10\n    return product\n\n\ndef digits_v2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    product = 1\n    while n != 0:\n        if n % 2 != 0:\n            product *= (n % 10)\n        n //= 10\n    return product\n\n\ndef main():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(2345) == 30\n    assert digits(123456789) == 0\n    assert digits(23456789) == 120\n    assert digits(123456789) == 0\n    assert digits(23456789) == 120\n    assert digits(123456789) == 0\n    assert digits(123456789) == 0\n    assert digits(123456789) == 0\n    assert digits(123456789) == 0\n    assert digits(123456789) == 0\n    assert digits(123456789) == 0\n    assert digits(123456789) == 0\n    assert digits(123456789) == 0\n    assert digits(123456789) == 0\n    assert digits(123456789) == 0",
      -3.14453125
    ],
    [
      "product = 1\n    while n:\n        if n % 2 == 1:\n            product *= n % 10\n        n //= 10\n    return product\n\n\ndef test():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(1025) == 0\n    assert digits(2345) == 0\n    assert digits(1111) == 1\n    assert digits(23456) == 0\n    assert digits(12345) == 3\n    assert digits(1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      -3.302734375
    ],
    [
      "product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 3\n    assert digits(12345) == 0\n    assert digits(9876543210) == 0\n    assert digits(10000000011) == 11\n    assert digits(10000000012) == 24\n    assert digits(10000000013) == 39\n    assert digits(10000000014) == 56\n    assert digits(10000000015) == 73\n    assert digits(10000000016) == 91\n    assert digits(10000000017) == 108\n    assert digits(10000000018) == 127\n    assert digits(10000000019) == 150",
      -3.751953125
    ],
    [
      "total = 1\n    for i in str(n):\n        if int(i) % 2 != 0:\n            total *= int(i)\n    return total\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(10210) == 0\n    assert digits(1111) == 1\n    assert digits(22) == 4",
      -4.11328125
    ],
    [
      "prod = 1\n    while n:\n        if n % 2 == 1:\n            prod *= n % 10\n        n //= 10\n    return prod\n\n\ndef digits_v2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return n and (n % 10) * digits(n // 10) or 0\n\n\ndef digits_v3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return n and (n % 10) * digits(n // 10) or 0\n\n\ndef digits_v4(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return n and (n % 10) * digits(n // 10) or 0\n\n\ndef digits_v5(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return n and (n % 10) * digits(n // 10) or 0\n\n\ndef digits_v6(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  ==",
      -4.19140625
    ],
    [
      "total = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            total *= int(digit)\n    return total\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(100225) == 0\n    assert digits(86327) == 216\n    assert digits(91226171) == 126\n\nif __name__ == '__main__':\n    test_digits()",
      -4.41015625
    ],
    [
      "if n == 0:\n        return 0\n\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = result * (n % 10)\n        n //= 10\n\n    return result\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(123) == 0\n    assert digits(1234) == 0\n    assert digits(13579) == 157\n    assert digits(222) == 0\n    assert digits(10) == 0\n    assert digits(20) == 0\n    assert digits(100) == 0\n    assert digits(101) == 1\n    assert digits(221123) == 113",
      -4.74609375
    ],
    [
      "if n == 0:\n        return 0\n    return n % 10 if n % 2 else 0\n\n\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    return n % 10 if n % 2 else 0\n\n\ndef digits3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    return n % 10 if n % 2 else 0\n\n\ndef digits4(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    return n % 10 if n % 2 else 0\n\n\ndef digits5(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    return n % 10 if n % 2 else 0\n\n\ndef digits6(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits",
      -5.23046875
    ],
    [
      "return 1\n\n\ndef test(test, expected):\n    actual = digits(test)\n    if actual == expected:\n        print('PASSED: digits({}) returned {}'.format(test, actual))\n    else:\n        print('FAILED: digits({}) returned {}, expected {}'.format(\n              test, actual, expected))\n\n\ntest(1, 1)\ntest(4, 0)\ntest(235, 15)\ntest(123, 0)\ntest(10, 0)\ntest(2025, 5)\ntest(500, 0)\ntest(1111, 1)\ntest(505, 25)\ntest(220, 0)\ntest(11111, 1)\ntest(22222, 4)\ntest(1000222222, 0)\ntest(22222222222222222, 4)",
      -7.0390625
    ],
    [
      "result = 1\n    while n:\n        result *= (n % 10) ** (n % 2)\n        n //= 10\n    return result\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123) == 0\n    assert digits(4567) == 0\n    assert digits(10000) == 0",
      -7.37109375
    ],
    [
      "#return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #return 1\n    #",
      -7.765625
    ],
    [
      "if n == 0:\n        return 0\n    if n < 0:\n        n = -n\n    product = 1\n    while n > 0:\n        if n % 2 == 1:\n            product *= (n % 10)\n        n //= 10\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(102) == 0\n    assert digits(101) == 1\n    assert digits(235) == 15\n    assert digits(3421) == 34\n    assert digits(12345) == 0\n    assert digits(9876543210) == 0\n    assert digits(10000000000) == 0\n    assert digits(1234567890) == 3628800",
      -8.0390625
    ],
    [
      "if n == 0:\n        return 0\n    if n < 0:\n        n = -n\n    total = 1\n    while n > 0:\n        last_digit = n % 10\n        if last_digit % 2 == 1:\n            total = total * last_digit\n        n = n // 10\n    return total\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(102) == 0\n    assert digits(101) == 1\n    assert digits(235) == 15\n    assert digits(234) == 0\n    assert digits(100225) == 0\n    assert digits(110111) == 121\n\ndef test_digits_random():\n    from random import randint\n    for _ in range(10):\n        n = randint(0, 1000000)\n        assert digits(n) == sum(\n            d for d in str(n) if int(d) % 2 == 1\n        )",
      -8.3203125
    ],
    [
      "product = 1\n    for c in str(n):\n        if int(c) % 2 != 0:\n            product *= int(c)\n    return product\n\n\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for c in str(n):\n        if int(c) % 2 == 1:\n            product *= int(c)\n    return product\n\n\ndef digits3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return reduce(lambda x, y: x * y,\n                  [int(c) for c in str(n) if int(c) % 2 == 1], 1)\n\n\ndef digits4(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return reduce(lambda x, y: x * y,\n                  map(int, filter(lambda c: c % 2 == 1, str(n))), 1)\n\n\ndef digits5(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return reduce(lambda x, y: x * y,\n                  map(int, filter(lambda c: c % 2 ==",
      -9.609375
    ],
    [
      "# The product of the odd digits is equal to the product of the digits\n    # multiplied by 1 if the digit is odd, or zero if the digit is even.\n    # The product of the even digits is equal to the product of the digits\n    # multiplied by 0 if the digit is odd, or the digit itself if the digit\n    # is even.\n    #\n    # We can represent this using the following function:\n    #\n    #     def digits(n):\n    #         product = 1\n    #         for d in str(n):\n    #             product *= int(d)\n    #         return product\n    #\n    # We can simplify this to the following:\n    product = 1\n    for d in str(n):\n        product *= int(d)\n    return product\n\n\n# A more functional implementation\ndef digits2(n):\n    return reduce(lambda p, d: p * int(d), str(n), 1)",
      -13.546875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}