{
  "problem": {
    "task_id": "HumanEval/91",
    "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
    "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "is_bored",
    "docstring": "",
    "problem_id": 91
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# Your code here\n    count = 0\n    for s in S.split(\".\"):\n        if s.strip().startswith(\"I\"):\n            count += 1\n    return count\n\ndef is_bored_v2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Your code here\n    count = 0\n    for s in S.split(\".\"):\n        if s.strip().startswith(\"I\"):\n            count += 1\n    return count\n\ndef is_bored_v3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Your code here\n    count = 0\n    for s in S.split(\".\"):\n        if s.strip().startswith(\"I\"):\n            count += 1\n    return count\n\ndef is_bored_v4(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1",
      5.62890625
    ],
    [
      "# Your code here\n    return S.count(\"I\")\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n\n# 42 ms, 13.4 MB\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Your code here\n    return S.count(\"I\")\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n\n# 36 ms, 13.4 MB\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Your code here\n    return S.count(\"I\")\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n\n# 32 ms, 13.4 MB\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue",
      2.482421875
    ],
    [
      "return sum(1 for s in S.split(' ') if s == 'I' and S.startswith(s))\n\ndef is_bored_2(S):\n    return sum(s == 'I' for s in S.split(' ') if S.startswith(s + '.') or S.startswith(s + '?') or S.startswith(s + '!'))\n\ndef is_bored_3(S):\n    return sum(1 for s in S.split() if s == 'I' and S.startswith(s + '.') or S.startswith(s + '?') or S.startswith(s + '!'))\n\ndef is_bored_4(S):\n    return sum(1 for s in S.split() if s == 'I' and s + '.' in S or s + '?' in S or s + '!' in S)\n\ndef is_bored_5(S):\n    return sum(1 for s in S.split() if s == 'I' and any(s + c in S for c in '.?!'))",
      1.3408203125
    ],
    [
      "if S == \"\":\n        return 0\n    S = S.split(\".\")\n    S = S.split(\"?\")\n    S = S.split(\"!\")\n    return S.count(\"I\")\n\n\ndef is_bored2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    if S == \"\":\n        return 0\n    S = S.split(\".\")\n    S = S.split(\"?\")\n    S = S.split(\"!\")\n    return S.count(\"I\")\n\n\ndef is_bored3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    if S == \"\":\n        return 0\n    S = S.split(\".\")\n    S = S.split(\"?\")\n    S = S.split(\"!\")\n    return S.count(\"I\")\n\n\ndef is_bored4(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining",
      1.2177734375
    ],
    [
      "S = S.replace(\".\", \".\" + \" \")\n    S = S.replace(\"?\", \"?\" + \" \")\n    S = S.replace(\"!\", \"!\" + \" \")\n    S = S.split(\" \")\n    count = 0\n    for i in S:\n        if i == \"I\":\n            count += 1\n    return count\n\n\ndef is_bored_2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"I\"):\n            count += 1\n    return count",
      0.80908203125
    ],
    [
      "return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.80908203125
    ],
    [
      "# Your code here\n    return S.count('I')",
      0.7939453125
    ],
    [
      "# your code here\n    return len([x for x in S.split('.') if x.startswith('I')])\n\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\nprint(is_bored(\"The sky is blue. The sun is shining. My name is Boris\"))\nprint(is_bored(\"The sky is blue. The sun is shining. My name is Boris. I love this weather\"))",
      0.6875
    ],
    [
      "# your code here\n    # 1. Split the sentence into a list of words\n    # 2. Use enumerate to count the number of boredom\n    # 3. Use a boolean to check if the word is I\n    # 4. If the word is I, check if the next word is a punctuation\n    # 5. If the next word is a punctuation, count the boredom\n    # 6. If the next word is not a punctuation, return the count\n    # 7. If the word is not I, return 0\n    words = S.split()\n    count = 0\n    for i, word in enumerate(words):\n        if word == 'I':\n            try:\n                if words[i+1] in ['.','?','!']:\n                    count += 1\n            except IndexError:\n                continue\n    return count\n\n\n\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      0.47998046875
    ],
    [
      "# Your code here\n    return len([x for x in S.split('.') + S.split('?') + S.split('!') if x.strip().startswith('I')])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.28173828125
    ],
    [
      "# your code here\n    pass\n\n\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      0.2666015625
    ],
    [
      "# your code here\n    boredom = 0\n    for sentence in S.split(\".\"):\n        if sentence.strip().startswith(\"I\") and len(sentence) > 0:\n            boredom += 1\n    return boredom",
      0.1492919921875
    ],
    [
      "count = 0\n    for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count",
      0.0340576171875
    ],
    [
      "boredom = 0\n    i = 0\n    while i < len(S):\n        if S[i] == \"I\" and i + 2 < len(S) and S[i + 1] == \" \":\n            if S[i + 2] in \".!?\":\n                boredom += 1\n        i += 1\n    return boredom\n\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.09136962890625
    ],
    [
      "# your code here\n    boredom = 0\n    for i in S.split(\" \"):\n        if i == \"I\":\n            boredom += 1\n    return boredom\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.44970703125
    ],
    [
      "# your code here\n    count = 0\n    for i in S.split(\".\"):\n        if i.split()[0] == \"I\":\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.5380859375
    ],
    [
      "# your code here\n    count = 0\n    word = \"\"\n    for char in S:\n        if char == \" \":\n            if word == \"I\":\n                count += 1\n            word = \"\"\n        else:\n            word += char\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.5615234375
    ],
    [
      "bored = 0\n    for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n            bored += 1\n    return bored",
      -0.65380859375
    ],
    [
      "return S.count(\"I\")\n\n\ndef is_valid_IP(S):\n    \"\"\"\n    You'll be given an IP address. You have to tell us if the address is valid or not. IPv4 addresses are always in the format a.b.c.d, where a, b, c and d are numbers between 0 and 255.\n\n    For example:\n    >>> is_valid_IP(\"192.168.0.1\")\n    True\n    >>> is_valid_IP(\"10.12.113.256\")\n    False\n    \"\"\"\n    return all(0 <= int(n) <= 255 for n in S.split(\".\"))\n\n\ndef is_valid_IPv6(S):\n    \"\"\"\n    You'll be given an IP address. You have to tell us if the address is valid or not. IPv6 addresses are always in the format a:b:c:d:e:f:g:h, where a, b, c, d, e, f, g and h are numbers between 0 and 65536.\n\n    For example:\n    >>> is_valid_IPv6(\"1010:0:0:0:0:0:0:1\")\n    True\n    >>> is_valid_IPv6(\"2001:db8::1234:0:0\")\n    True\n    >>> is_valid_IPv6(\"12345:0:0:1:0:0:0:1\")\n    False\n    \"\"\"\n    return all(0 <= int(n, 16) <= 65535 for n in S.split(\":\"))\n\n\ndef is_valid_email(S):\n    \"\"\"\n    You'll be given an email address. You have to tell us if the address is valid or not.\n\n    The user's part of the email address will be only letters, numbers, dots or underscores.\n    The host's part will be only letters or numbers.\n\n    For example:\n    >>> is_valid_email(\"k@mail.ru\")\n    True\n    >>> is_valid_email(\"",
      -0.73779296875
    ],
    [
      "return len([i for i in S.split(\".\") if i.strip().startswith(\"I\")])",
      -0.85595703125
    ],
    [
      "# your code here\n    return len(list(filter(lambda x: x == \"I\", map(lambda x: x.split()[0], S.split(\".\")))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "# your code here\n    return S.count(\"I\")\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "# Your code here\n    count = 0\n    for sentence in S.split(\".\"):\n        if sentence[0:2] == \"I \":\n            count += 1\n    return count",
      -0.85693359375
    ],
    [
      "return 0\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.85693359375
    ],
    [
      "# your code here\n    count = 0\n    for word in S.split():\n        if word == \"I\":\n            count += 1\n    return count\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.85693359375
    ],
    [
      "pass",
      -0.85693359375
    ],
    [
      "bored_count = 0\n    sentence = \"\"\n    for c in S:\n        if c in [\".\", \"!\", \"?\"]:\n            if sentence.startswith(\"I\"):\n                bored_count += 1\n            sentence = \"\"\n        else:\n            sentence += c\n    return bored_count",
      -0.85693359375
    ],
    [
      "return S.count(\"I\")\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.85693359375
    ],
    [
      "# your code here\n    count = 0\n    for word in S.split(' '):\n        if word == 'I':\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# your code here\n    return S.count(\"I\")\n\n\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.857421875
    ],
    [
      "return S.count('I')",
      -0.857421875
    ],
    [
      "# Your code here\n    return S.count(\"I\")\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.85791015625
    ],
    [
      "return sum(x.startswith('I') for x in S.split('.'))",
      -0.85791015625
    ],
    [
      "return S.count(\"I\")",
      -0.85791015625
    ],
    [
      "boredom = 0\n    if S[0] == 'I':\n        boredom = 1\n    return boredom\n\n\ndef is_bored2(S):\n    return S[0] == 'I' if S.startswith('I') else 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return S.count(\"I\")\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.8583984375
    ],
    [
      "# your code here\n    return 1 if S.split(\".\")[0] == \"I\" else 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "boredom = 0\n    sentence = \"\"\n    for c in S:\n        if c == \".\":\n            if sentence[0:2] == \"I \":\n                boredom += 1\n            sentence = \"\"\n        elif c == \"?\":\n            if sentence[0:2] == \"I \":\n                boredom += 1\n            sentence = \"\"\n        elif c == \"!\":\n            if sentence[0:2] == \"I \":\n                boredom += 1\n            sentence = \"\"\n        else:\n            sentence += c\n    if sentence[0:2] == \"I \":\n        boredom += 1\n    return boredom\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "bored = 0\n    sentence = \"\"\n    for word in S.split():\n        sentence += word + \" \"\n        if sentence.endswith(\".\"):\n            bored += 1 if sentence.startswith(\"I\") else 0\n            sentence = \"\"\n        elif sentence.endswith(\"?\"):\n            bored += 1 if sentence.startswith(\"I\") else 0\n            sentence = \"\"\n        elif sentence.endswith(\"!\"):\n            bored += 1 if sentence.startswith(\"I\") else 0\n            sentence = \"\"\n    return bored",
      -0.8583984375
    ],
    [
      "return S.count('I')\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.8583984375
    ],
    [
      "# Your code here\n    return S.count(\"I\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return sum(1 for x in S.split('.') + S.split('?') + S.split('!')\n               if x.strip().startswith('I'))",
      -0.8583984375
    ],
    [
      "# Your code here\n    boredom = 0\n    sentence = S.split(\".\")\n    for i in range(len(sentence)):\n        if sentence[i].startswith(\"I\"):\n            boredom += 1\n    return boredom",
      -0.8583984375
    ],
    [
      "# your code here\n    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Your code here\n    bored = 0\n    sentence = 0\n    for char in S:\n        if char == '.':\n            sentence += 1\n        if sentence == 1:\n            bored += 1\n        if char == '?' or char == '!':\n            sentence = 0\n    return bored\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\nprint(is_bored(\"I love lasagna. My favorite food. Perhaps the best food. Surely above average\"))\nprint(is_bored(\"This test case is boring\"))",
      -0.8583984375
    ],
    [
      "# your code here\n    return 0",
      -0.8583984375
    ],
    [
      "count = 0\n    sentence = \"\"\n    for char in S:\n        if char.isalpha():\n            sentence += char.lower()\n        else:\n            if sentence.startswith(\"i\"):\n                count += 1\n            sentence = \"\"\n    return count",
      -0.8583984375
    ],
    [
      "return sum(1 for sentence in S.split(\".\") if sentence.strip().startswith(\"I\"))",
      -0.8583984375
    ],
    [
      "pass",
      -0.8583984375
    ],
    [
      "# your code here\n    count = 0\n    for i in S.split(\".\"):\n        if i.split()[0] == \"I\":\n            count += 1\n    return count",
      -0.8583984375
    ],
    [
      "return len(list(filter(lambda x: x.startswith('I'), S.split('.'))))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "bored = 0\n    for sentence in S.split('.'):\n        if sentence[0] == 'I' and sentence[-1] in '?.!':\n            bored += 1\n    return bored",
      -0.8583984375
    ],
    [
      "sentence_endings = {'.', '?', '!'}\n    boredom = 0\n    sentence_started = False\n    for c in S:\n        if c.isalpha():\n            sentence_started = True\n        elif c in sentence_endings and sentence_started:\n            sentence_started = False\n            if c == 'I':\n                boredom += 1\n    return boredom",
      -0.8583984375
    ],
    [
      "# your code here\n    count = 0\n    for i in S.split(\".\"):\n        i = i.strip()\n        if i.startswith(\"I\"):\n            count += 1\n    return count",
      -0.8583984375
    ],
    [
      "return sum(1 for i in S.split('.!?') if i.strip().startswith('I'))",
      -0.8583984375
    ],
    [
      "# your code here\n    # 1. Split the string into sentences\n    # 2. Find the number of boredoms\n    return len([sentence for sentence in S.split(\".\") if sentence.strip().startswith(\"I\")])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Your code here\n    return S.count('I')\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.8583984375
    ],
    [
      "boredom = 0\n    for word in S.split():\n        if word == \"I\":\n            boredom += 1\n    return boredom",
      -0.8583984375
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    count = 0\n    i = 0\n    while i < len(S):\n        if S[i:i+2] == \"I \" or S[i:i+2] == \"I.\" or S[i:i+2] == \"I?\" or S[i:i+2] == \"I!\":\n            count += 1\n        i += 1\n    return count\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -0.8583984375
    ],
    [
      "bored = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I '):\n            bored += 1\n    return bored\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# your code here\n    return S.count('I')\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "sentences = S.split(\" \")\n    count = 0\n    for sentence in sentences:\n        if sentence[0] == \"I\":\n            count += 1\n    return count",
      -0.8583984375
    ],
    [
      "# Your code here\n    pass",
      -0.8583984375
    ],
    [
      "# Your code here\n    return 0\n\n\n\n\n\ndef is_bored2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Your code here\n    return 0\n\n\n\n\n\ndef is_bored3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Your code here\n    return 0\n\n\n\n\n\ndef is_bored4(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Your code here\n    return 0\n\n\n\n\n\ndef is_bored5(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:",
      -0.95751953125
    ],
    [
      "# Your code here\n    bored = 0\n    if S[0:2] == 'I ':\n        bored += 1\n    if S[0:3] == 'I am':\n        bored += 1\n    if S[0:2] == 'I':\n        bored += 1\n\n    return bored\n\n\ndef is_funny(S):\n    \"\"\"\n    You'll be given a string of digits. You have to remove any digit such that\n    the remaining string is funny. A string S is funny if its letters sum\n    (where each letter is considered to be a digit) is divisible by 3.\n   \n    For example:\n    >>> is_funny(\"1123\")\n    False\n    >>> is_funny(\"12345\")\n    False\n    >>> is_funny(\"123456\")\n    True\n    \"\"\"\n    # Your code here\n    if int(S) % 3 == 0:\n        return True\n    else:\n        return False\n\n\ndef is_palindrome(S):\n    \"\"\"\n    You'll be given a string of lowercase characters. Check whether or not it\n   's a palindrome. A palindrome is a string that's read the same both ways.\n  \n    For example:\n    >>> is_palindrome(\"lol\")\n    True\n    >>> is_palindrome(\"hi\")\n    False\n    \"\"\"\n    # Your code here\n    if S[::-1] == S:\n        return True\n    else:\n        return False\n\n\ndef is_prime(N):\n    \"\"\"\n    You'll be given a number N. For this mission, let's call a number prime\n    if it has exactly two distinct divisors: 1 and N itself.\n  \n    For example:\n    >>> is_prime(2)\n    True\n    >>> is_prime(15)\n    False\n    \"\"\"\n    # Your code here\n    divisors = 0\n    for i in range(1, N + 1):\n        if N % i == 0:\n            divisors += 1\n\n    if divisors ==",
      -1.177734375
    ],
    [
      "# your code here\n    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -1.48828125
    ],
    [
      "pass\n\n\ndef get_digits(N):\n    \"\"\"\n    You'll be given a number and you have to return it as a string of digits.\n    \n    For example:\n    >>> get_digits(123)\n    \"123\"\n    >>> get_digits(1230)\n    \"1230\"\n    \"\"\"\n    pass\n\n\ndef is_palindrome(S):\n    \"\"\"\n    You'll be given a string of characters. You have to implement a function\n    that checks whether this string is a palindrome. Examples:\n    \n    is_palindrome(\"aba\") == True\n    is_palindrome(\"abb\") == False\n    is_palindrome(\"b\") == True\n    is_palindrome(\"bb\") == True\n    is_palindrome(\"ba\") == False\n    is_palindrome(\"baa\") == True\n    is_palindrome(\"abc\") == False\n    is_palindrome(\"abcba\") == True\n    is_palindrome(\"abcbaa\") == False\n    is_palindrome(\"abccba\") == True\n    is_palindrome(\"abccbca\") == False\n    \"\"\"\n    pass\n\n\ndef get_position(S, N):\n    \"\"\"\n    You'll be given a string S and a character C. You have to return the position\n    of the first character C in S.\n    \n    For example:\n    >>> get_position(\"supernovam\", \"n\")\n    5\n    >>> get_position(\"magic\", \"m\")\n    0\n    \"\"\"\n    pass\n\n\ndef is_pangram(S):\n    \"\"\"\n    You'll be given a string of characters S. You have to implement a function\n    that checks whether S is a pangram. A pangram is a sentence containing all\n    letters of the English alphabet at least once (case-insensitive).\n    \n    For example:\n    >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n    True\n    >>> is_pangram(\"ABCDEF\")\n    True\n    >>> is_pangram(\"ABCD\")",
      -1.7373046875
    ],
    [
      "count = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            count += 1\n    return count\n\n\ndef find_unique_words(text):\n    \"\"\"\n    You'll be given a string of words, and you have to return how many\n    different words there are in it.\n   \n    For example:\n    >>> find_unique_words(\"I like cats\")\n    2\n    >>> find_unique_words(\"There are 3 cats in my house\")\n    3\n    >>> find_unique_words(\"There are 3 cats in my house and 5 dogs in my kennel\")\n    5\n    \"\"\"\n    return len(set(text.split()))\n\n\ndef find_longest_word(text):\n    \"\"\"\n    You'll be given a string of words, and you have to return the longest\n    word in it.\n   \n    For example:\n    >>> find_longest_word(\"I like cats\")\n    'cats'\n    >>> find_longest_word(\"The sunset was beautiful\")\n    'beautiful'\n    >>> find_longest_word(\"I like cats and dogs\")\n    'cats'\n    \"\"\"\n    return max(text.split(), key=len)\n\n\ndef find_shortest_word(text):\n    \"\"\"\n    You'll be given a string of words, and you have to return the shortest\n    word in it.\n   \n    For example:\n    >>> find_shortest_word(\"I like cats\")\n    'I'\n    >>> find_shortest_word(\"The sunset was beautiful\")\n    'The'\n    >>> find_shortest_word(\"I like cats and dogs\")\n    'and'\n    \"\"\"\n    return min(text.split(), key=len)\n\n\ndef count_vowels(text):\n    \"\"\"\n    Count the number of vowels in a string of text.\n   \n    For example:\n    >>> count_vowels(\"Hello world!\")\n    3\n    >>> count_vowels(\"The quick brown fox jumps over the lazy dog\")\n    15\n    \"\"\"",
      -1.8427734375
    ],
    [
      "# Your code here\n    count = 0\n    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\n    for sentence in sentences:\n        if sentence.strip().lower().startswith(\"i\"):\n            count += 1\n    return count\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -2.458984375
    ],
    [
      "# Your code here\n    #\n    # The idea is to use a loop and check if each word in the input\n    # string starts with \"I\". If so, we count it as a boredom.\n    # We keep track of the number of boredom using a variable.\n    #\n    # The code below shows a basic implementation of this idea:\n    \n    boredom_count = 0\n    for word in S.split(\" \"):\n        if word.startswith(\"I\"):\n            boredom_count += 1\n\n    return boredom_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.501953125
    ],
    [
      "# your code here\n    count = 0\n    for x in S.split(\".\"):\n        if x.startswith(\"I\"):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.51953125
    ],
    [
      "# your code here\n    count = 0\n    temp = \"\"\n    for i in S:\n        if i == \".\" or i == \"!\" or i == \"?\":\n            if temp.startswith(\"I\"):\n                count += 1\n            temp = \"\"\n        else:\n            temp += i\n    return count\n\ndef is_bored_2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # your code here\n    count = 0\n    temp = \"\"\n    for i in S:\n        if i == \".\" or i == \"!\" or i == \"?\":\n            if temp.startswith(\"I\"):\n                count += 1\n            temp = \"\"\n        else:\n            temp += i\n    return count\n\ndef is_bored_3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # your code here\n    count = 0\n    temp = \"\"\n    for i in S:\n        if i == \".\" or i == \"!\" or i == \"?\":\n            if temp.startswith(\"I\"):\n                count += 1\n            temp = \"\"\n        else:\n            temp += i\n    return count\n\ndef is_bored_4(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to",
      -2.578125
    ],
    [
      "# your code here\n    count = 0\n    for i in S.split('.'):\n        if i.startswith('I'):\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.69140625
    ],
    [
      "count = 0\n    start = 0\n    for i in range(len(S)):\n        if S[i] in ['.', '?', '!']:\n            for j in range(start, i+1):\n                if S[j] == 'I':\n                    count += 1\n            start = i+1\n    return count",
      -2.876953125
    ],
    [
      "bored = 0\n    for sentence in S.split('.'):\n        if sentence[0] == 'I':\n            bored += 1\n    return bored\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.044921875
    ],
    [
      "# Your code here\n    sentences = S.split(\". \")\n    return sum([1 for sentence in sentences if sentence.startswith(\"I\")])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.087890625
    ],
    [
      "# Your code here\n    return len(list(filter(lambda x: x.startswith('I'), S.split('.'))))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -3.177734375
    ],
    [
      "result = 0\n    for i in range(len(S)):\n        if S[i] == \"I\" and S[i+1] == \" \":\n            result += 1\n    return result\n\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -3.3046875
    ],
    [
      "# your code here\n    return S.count('I')\n\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -3.3046875
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    boredom_count = 0\n    for sentence in S.split(\".\"):\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count\n\ndef is_even(n):\n    \"\"\"Return whether or not the given integer n is even.\n\n    >>> is_even(2)\n    True\n    >>> is_even(3)\n    False\n    >>> is_even(250)\n    True\n    >>> is_even(11)\n    False\n    >>> is_even(-2)\n    True\n    >>> is_even(-3)\n    False\n    >>> is_even(250)\n    True\n    >>> is_even(11)\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n\ndef is_palindrome(s):\n    \"\"\"Return whether string s is a palindrome.\n\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('dented') # nondescriptive test\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def is_palindrome_helper(s, low, high):\n        if low >= high:\n            return True\n        elif s[low] == s[high]:\n            return is_palindrome_helper(s, low + 1, high - 1)\n        else:\n            return False\n    return is_palindrome_helper(s, 0, len(s) - 1)\n\ndef dot_product(xs, ys):\n    \"\"\"Return the dot product of two vectors, represented as lists of equal length.\n\n    >>> dot_product([2, 3, 4], [1, 5, -9])\n    39\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    assert len(xs) == len(ys)\n    dot_product = 0\n    for",
      -3.38671875
    ],
    [
      "bored = 0\n    sentence = \"\"\n    for i in S:\n        if i == \".\":\n            sentence += i\n            if sentence.startswith(\"I\"):\n                bored += 1\n            sentence = \"\"\n        elif i == \"?\":\n            sentence += i\n            if sentence.startswith(\"I\"):\n                bored += 1\n            sentence = \"\"\n        elif i == \"!\":\n            sentence += i\n            if sentence.startswith(\"I\"):\n                bored += 1\n            sentence = \"\"\n        elif i != \" \":\n            sentence += i\n    return bored\n\n\ndef is_bored2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len([i for i in S.split(\".\") if i.startswith(\"I\")])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.5703125
    ],
    [
      "sentence_delimiters = {\".\", \"?\", \"!\"}\n    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count",
      -3.765625
    ],
    [
      "# your code here\n    count = 0\n    i = 0\n    while i < len(S):\n        if S[i:i+2] == \"I \" and (S[i+2] == '?' or S[i+2] == '.' or S[i+2] == '!'):\n            count += 1\n        i += 1\n    return count\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -4.0703125
    ],
    [
      "bored = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n            bored += 1\n    return bored",
      -4.09375
    ],
    [
      "boredom = 0\n    for sentence in S.split(\".\"):\n        if sentence.strip().startswith(\"I\"):\n            boredom += 1\n    return boredom\n\n\ndef is_bored2(S):\n    return sum(1 for sentence in S.split(\".\") if sentence.strip().startswith(\"I\"))\n\n\ndef is_bored3(S):\n    return len([sentence for sentence in S.split(\".\") if sentence.strip().startswith(\"I\")])\n\n\ndef is_bored4(S):\n    return sum(sentence.strip().startswith(\"I\") for sentence in S.split(\".\"))\n\n\ndef is_bored5(S):\n    return S.count(\"I\")\n\n\ndef is_bored6(S):\n    return S.count(\"I\") * S.count(\".\")\n\n\ndef is_bored7(S):\n    return sum(1 for sentence in S.split(\".\") if sentence.strip().startswith(\"I\"))\n\n\ndef is_bored8(S):\n    return sum(1 for sentence in S.split(\".\") if sentence.strip().startswith(\"I\"))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.12890625
    ],
    [
      "# your code here\n    # 1. split string by ., ? or !\n    # 2. count words that start with I\n    # 3. return count\n    # 4. edge case: what if there is no ., ? or ! in the string?\n    # 5. edge case: what if string is empty?\n    # 6. edge case: what if string is one word?\n    \n    count = 0\n    words = S.split(\" \")\n    for word in words:\n        if word[0] == \"I\":\n            count += 1\n    \n    return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.296875
    ],
    [
      "S = S.replace(\".\", \".\" + \"\\n\").replace(\"?\", \"?\" + \"\\n\").replace(\"!\", \"!\" + \"\\n\")\n    S = S.split(\"\\n\")\n    counter = 0\n    for i in range(len(S)):\n        if S[i] == \"I\" and S[i+1][0] != \"I\":\n            counter += 1\n    return counter\n\ndef is_bored2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored2(\"Hello world\")\n    0\n    >>> is_bored2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    counter = 0\n    for s in S.split(\".\"):\n        if s.strip().startswith(\"I\"):\n            counter += 1\n    return counter\n\ndef is_bored3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored3(\"Hello world\")\n    0\n    >>> is_bored3(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    counter = 0\n    for s in S.split(\".\"):\n        if s.strip().startswith(\"I\"):\n            counter += 1\n    return counter\n\ndef is_bored4(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_",
      -4.31640625
    ],
    [
      "# Your code here\n    counter = 0\n    for i in range(0, len(S)):\n        if S[i] == 'I':\n            if i != 0:\n                if S[i-1] == ' ':\n                    if i != len(S) - 1:\n                        if S[i+1] == ' ':\n                            counter += 1\n    return counter\n\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\nprint(is_bored(\"I love this weather. The sun is shining.\"))\nprint(is_bored(\"The sky is blue. I love this weather. The sun is shining.\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather!\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather. I hate this weather\"))\nprint(is_bored(\"I love this weather. The sun is shining. I love this weather. I hate this weather\"))\nprint(is_bored(\"The sky is blue. I love this weather. I hate this weather\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather. I hate this weather\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather. I hate this weather!\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather. I hate this weather. I love this weather\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather. I hate this weather. I love this weather!\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather. I hate this weather. I love this weather. I hate this weather\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather. I hate this weather. I love this weather. I hate this weather!\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather. I hate this weather. I love this weather",
      -4.33984375
    ],
    [
      "bored = 0\n    for sentence in S.split(\".\"):\n        if sentence.strip().startswith(\"I\"):\n            bored += 1\n    return bored\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.33984375
    ],
    [
      "if S[0] != \"I\":\n        return 0\n    else:\n        return 1 + is_bored(S[S.find(\".\")+1:])\n\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -4.3515625
    ],
    [
      "result = 0\n    bored = \"I\"\n    sentence_delimiters = [\".\", \"?\", \"!\"]\n    for word in S.split():\n        if word == bored:\n            result += 1\n        if word in sentence_delimiters:\n            result = 0\n    return result",
      -4.46484375
    ],
    [
      "bored = 0\n    sentence = \"\"\n    for char in S:\n        if char != \" \" and char != \".\":\n            sentence += char\n        elif char == \".\":\n            if sentence.startswith(\"I\"):\n                bored += 1\n            sentence = \"\"\n    return bored\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.15625
    ],
    [
      "# your code here\n    # import re\n    # return len(re.findall(r'^I', S))\n    return sum(1 for w in S.split('.') if w.startswith('I '))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.38671875
    ],
    [
      "# Your code here\n    #print(S)\n    counter = 0\n    if len(S) == 0:\n        return 0\n    if S[0] != 'I':\n        return 0\n    for i in range(len(S)):\n        if S[i] == '.' or S[i] == '?' or S[i] == '!':\n            counter += 1\n            if len(S) > i+1:\n                if S[i+1] != 'I':\n                    return counter\n            else:\n                return counter\n    return 0\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -5.40625
    ],
    [
      "result = 0\n    sentence = \"\"\n    for c in S:\n        if c.isalpha():\n            sentence += c\n        else:\n            if sentence.startswith(\"I\"):\n                result += 1\n            sentence = \"\"\n    return result\n\n\n\ndef count_words(S):\n    \"\"\"\n    You'll be given a string of words. You should count the number of appearences\n    of each word in the string and return a dictionary with words as keys and\n    counts as values.\n   \n    For example:\n    >>> count_words(\"Once upon a time in a forest there was a beautiful princess\")\n    {'Once': 1, 'upon': 1, 'a': 1, 'time': 1, 'in': 1, 'a': 1, 'forest': 1, 'there': 1, 'was': 1, 'beautiful': 1, 'princess': 1}\n    \"\"\"\n    result = {}\n    for word in S.split():\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n\n\n\ndef is_pangram(S):\n    \"\"\"\n    You'll be given a sentence and you have to tell if it is a pangram, considering\n    the latin alphabet.\n   \n    For example:\n    >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n    True\n    >>> is_pangram(\"abcdefghijklmnopqrstuvwxyz\")\n    True\n    >>> is_pangram(\"How many letters are there in the alphabet? Hint: pangrams have 26\")\n    False\n    \"\"\"\n    return len(set(S)) == 26\n\n\n\ndef is_palindrome(S):\n    \"\"\"\n    You'll be given a string of words, and you have to tell if its letters when\n    written backwards form the original string.\n   \n    For example:\n    >>> is_palindrome(\"abcdcba\")\n    True\n    >>> is_palindrome(\"abcdxyz\")\n    False\n    \"\"\"\n    return S",
      -5.53515625
    ],
    [
      "bored = 0\n    for sentence in S.split('.'):\n        words = sentence.split(' ')\n        if words[0] == 'I':\n            bored += 1\n    return bored\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -6.07421875
    ],
    [
      "# your code here\n    counter = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            counter += 1\n            for j in range(i + 1, len(S)):\n                if S[j] in '.?!':\n                    break\n\n    return counter\n\n\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))",
      -6.171875
    ],
    [
      "# Your code here\n    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\n    return sum(1 for s in sentences if s.strip().startswith(\"I\"))\n\n\ndef count_words(S):\n    \"\"\"\n    You'll be given a string of words. You should count the number of words\n    that are equal to their index in the string and return it.\n   \n    For example:\n    >>> count_words(\"The first word is the word number 1. The second word is\n    the word number 2\")\n    2\n    >>> count_words(\"We found a few words that are words\")\n    2\n    \"\"\"\n    # Your code here\n    words = S.split()\n    return sum(1 for i, word in enumerate(words) if i == word)\n\n\ndef count_upper(S):\n    \"\"\"\n    You'll be given a string of words. Count the number of words that have\n    at least one uppercase letter.\n   \n    For example:\n    >>> count_upper(\"This is a sentence with some caps\")\n    3\n    >>> count_upper(\"Welcome to New York\")\n    4\n    \"\"\"\n    # Your code here\n    words = S.split()\n    return sum(1 for word in words if any(c.isupper() for c in word))\n\n\ndef count_punctuation(S):\n    \"\"\"\n    You'll be given a string of words. Count the number of words that have\n    at least one punctuation mark.\n   \n    For example:\n    >>> count_punctuation(\"This sentence has no punctuation\")\n    0\n    >>> count_punctuation(\"This one has a period\")\n    1\n    \"\"\"\n    # Your code here\n    words = S.split()\n    return sum(1 for word in words if any(c in \".,;\" for c in word))\n\n\ndef count_sentences(S):\n    \"\"\"\n    You'll be given a string of words. Count the number of sentences that\n    start with a capital letter.\n   \n    For example:\n    >>> count_sentences(\"This sentence is good\")\n    1\n    >>> count_",
      -6.56640625
    ],
    [
      "# your code here\n    #print(S)\n    #print(S.split(\".\"))\n    #print(S.split(\".\").split(\"?\"))\n    #print(S.split(\".\").split(\"?\"))\n    #print(S.split(\".\").split(\"?\").split(\"!\"))\n    #print(S.split(\".\").split(\"?\").split(\"!\")[0])\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1])\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4])\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I \")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love\")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love this\")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love this weather\")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love this weather!\")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love this weather! \")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love this weather!  \")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love this weather!  \")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love this weather!  \")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love this weather!  \")\n    #print(S.split(\".\").split(\"?\").split(\"!\")[1][0:4] == \"I love this weather!  \")",
      -8.15625
    ],
    [
      "result = 0\n    sentence = []\n    for i in range(len(S)):\n        if S[i] == \".\" or S[i] == \"?\" or S[i] == \"!\":\n            sentence.append(S[i])\n            if sentence[0] == \"I\":\n                result += 1\n            sentence = []\n        else:\n            sentence.append(S[i])\n    return result\n\ndef is_bored2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef is_bored3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(S[i] == \"I\" for i in range(0, len(S), 3))\n\ndef is_bored4(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return S.count",
      -11.1484375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}