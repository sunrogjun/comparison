{
  "problem": {
    "task_id": "HumanEval/146",
    "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
    "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n",
    "entry_point": "specialFilter",
    "docstring": "",
    "problem_id": 146
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# Your code here\n    odds = [1, 3, 5, 7, 9]\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in odds and num // 10 in odds:\n                count += 1\n    return count\n\n\ndef specialFilter1(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Your code here\n    odds = [1, 3, 5, 7, 9]\n    count = 0\n    for num in nums:\n        if num > 10:\n            if (num % 10 in odds) and (num // 10 in odds):\n                count += 1\n    return count\n\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # Your code here\n    odds = [1, 3, 5, 7, 9]\n    count = 0\n    for num in nums:\n        if num > 10:\n            if (num % 10) in odds and (num // 10) in odds:\n                count += 1",
      12.3125
    ],
    [
      "return len([num for num in nums if (num > 10 and (num % 10) * (num // 10) % 2 == 1)])\n\ndef specialFilter2(nums):\n    return sum(1 for num in nums if num > 10 and (num % 10) * (num // 10) % 2 == 1)\n\ndef specialFilter3(nums):\n    return sum(num > 10 and (num % 10) * (num // 10) % 2 == 1 for num in nums)\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\nprint(specialFilter2([15, -73, 14, -15]))\nprint(specialFilter2([33, -2, -3, 45, 21, 109]))\nprint(specialFilter3([15, -73, 14, -15]))\nprint(specialFilter3([33, -2, -3, 45, 21, 109]))",
      11.2265625
    ],
    [
      "# Your code here\n    #count = 0\n    #for num in nums:\n    #    if num > 10 and num % 10 in (1,3,5,7,9) and num // 10 % 2 == 1:\n    #        count += 1\n    #return count\n    #return len([num for num in nums if num > 10 and num % 10 in (1,3,5,7,9) and num // 10 % 2 == 1])\n    return len([num for num in nums if num > 10 and num % 10 in (1, 3, 5, 7, 9) and num // 10 % 2 == 1])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      9.34375
    ],
    [
      "odd_nums = []\n    odd_elems = 0\n\n    for num in nums:\n        if num > 10:\n            odd_nums.append(num)\n\n    for num in odd_nums:\n        if num % 10 % 2 != 0 and num % 100 // 10 % 2 != 0:\n            odd_elems += 1\n\n    return odd_elems\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\nprint(specialFilter([10, 15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21]))\n\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    specialFilter([10, 15, -73, 14, -15]) => 0\n    specialFilter([33, -2, -3, 45, 21]) => 0\n    \"\"\"\n    count = 0\n\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 != 0 and num % 100 // 10 % 2 != 0:\n                count += 1\n\n    return count\n\n\nprint(specialFilter2([15, -73, 14, -15]))\nprint(specialFilter2([33, -2, -3, 45, 21, 109]))",
      9.2109375
    ],
    [
      "counter = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 not in [0, 2, 4, 6, 8]:\n                if num // 10 not in [0, 2, 4, 6, 8]:\n                    counter += 1\n    return counter\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n\n# def specialFilter(nums):\n#     \"\"\"Write a function that takes an array of numbers as input and returns \n#     the number of elements in the array that are greater than 10 and both \n#     first and last digits of a number are odd (1, 3, 5, 7, 9).\n#     For example:\n#     specialFilter([15, -73, 14, -15]) => 1 \n#     specialFilter([33, -2, -3, 45, 21, 109]) => 2\n#     \"\"\"\n#     counter = 0\n#     for num in nums:\n#         if num > 10:\n#             if num % 10 not in [0, 2, 4, 6, 8]:\n#                 if num // 10 not in [0, 2, 4, 6, 8]:\n#                     counter += 1\n#     return counter",
      8.3515625
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and num%10 in [1,3,5,7,9] and num//10%2 == 1:\n            count += 1\n    return count\n\ndef specialFilter(nums):\n    return len([num for num in nums if num > 10 and num%10 in [1,3,5,7,9] and num//10%2 == 1])\n\ndef specialFilter(nums):\n    return sum(num > 10 and num%10 in [1,3,5,7,9] and num//10%2 == 1 for num in nums)\n\ndef specialFilter(nums):\n    return sum(num > 10 and num%10 in [1,3,5,7,9] and num//10%2 == 1 for num in nums)\n\ndef specialFilter(nums):\n    return sum(map(lambda num: num > 10 and num%10 in [1,3,5,7,9] and num//10%2 == 1, nums))\n\ndef specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and num%10 in [1,3,5,7,9] and num//10%2 == 1)\n\ndef specialFilter(nums):\n    return sum(map(lambda num: 1 if num > 10 and num%10 in [1,3,5,7,9] and num//10%2 == 1 else 0, nums))\n\ndef specialFilter(nums):\n    return sum(map(lambda num: 1 if num > 10 and num%10 in [1,3,5,7,9] and num//10%2 == 1 else 0, nums))\n\ndef specialFilter(nums):\n    return sum(map(lambda num: 1 if num > 10 and num%10 in [1,3,5,7,9] and num//10%2 == 1 else 0, nums))\n\ndef",
      7.73046875
    ],
    [
      "# 1. check if nums is empty\n    # 2. check if nums is not empty\n    # 3. check if first and last digit of a number are odd\n    # 4. check if a number is greater than 10\n    # 5. return result\n    \n    if not nums:\n        return 0\n    \n    result = 0\n    for num in nums:\n        if num > 10:\n            if (num % 10) % 2 == 1:\n                if (num // 10) % 2 == 1:\n                    result += 1\n    return result\n\ndef main():\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))\n\nif __name__ == \"__main__\":\n    main()",
      6.3359375
    ],
    [
      "return len([x for x in nums if x > 10 and (x % 10) % 2 and x // 10 % 2])\n\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([x for x in nums if x > 10 and x % 2 and x // 10 % 2])\n\n\ndef specialFilter3(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([x for x in nums if x > 10 and x % 2 == 1 and x // 10 % 2 == 1])\n\n\ndef specialFilter4(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"",
      5.3359375
    ],
    [
      "# return len([x for x in nums if x > 10 and (x%10 in [1, 3, 5, 7, 9]) and (x//10 in [1, 3, 5, 7, 9])])\n    return len([x for x in nums if x > 10 and x%2 != 0])\n\ndef main():\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))\n    print(specialFilter([-5, -2, -3, -45, -21, -109]))\n\nif __name__ == \"__main__\":\n    main()",
      3.669921875
    ],
    [
      "odd = lambda x: x%2 != 0\n    odd_and_greater_than_10 = lambda x: x>10 and odd(x/10) and odd(x%10)\n    return len(list(filter(odd_and_greater_than_10, nums)))\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    odd = lambda x: x%2 != 0\n    odd_and_greater_than_10 = lambda x: x>10 and odd(x/10) and odd(x%10)\n    return len(list(filter(odd_and_greater_than_10, nums)))\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2",
      3.65625
    ],
    [
      "# filter = lambda x: x > 10 and (x % 10 == 1 or x % 10 == 9)\n    # result = filter(nums)\n    result = []\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 9):\n            result.append(num)\n    return len(result)\n\n\ndef testSpecialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\n\ndef main():\n    testSpecialFilter()\n\n\nif __name__ == \"__main__\":\n    main()",
      2.798828125
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1:\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1:\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109",
      2.6484375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))",
      1.5126953125
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9]:\n                if num // 10 % 10 in [1, 3, 5, 7, 9]:\n                    count += 1\n    return count\n\n\ndef specialFilter2(nums):\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 10 in [1, 3, 5, 7, 9]])\n\n\ndef specialFilter3(nums):\n    return sum(1 for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 10 in [1, 3, 5, 7, 9])\n\n\ndef specialFilter4(nums):\n    return sum(1 for num in nums if num > 10 and (num % 10 in [1, 3, 5, 7, 9] and num // 10 % 10 in [1, 3, 5, 7, 9]))\n\n\ndef specialFilter5(nums):\n    return sum(1 for num in nums if 10 <= num <= 99 and (num % 10 in [1, 3, 5, 7, 9] and num // 10 % 10 in [1, 3, 5, 7, 9]))\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\nprint(specialFilter2([15, -73, 14, -15]))\nprint(specialFilter2([33, -2, -3, 45, 21, 109]))\nprint(specialFilter3([15, -73,",
      1.42578125
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and num%10 in [1,3,5,7,9]:\n            if num%100 // 10 in [1,3,5,7,9]:\n                count += 1\n    return count\n\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num%10 in [1,3,5,7,9] and num%100 // 10 in [1,3,5,7,9]:\n            count += 1\n    return count\n\n\ndef specialFilter3(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num%10 in [1,3,5,7,9] and num%100 // 10 in [1,3,5,7,9]:\n                count += 1\n    return count\n\n\ndef specialFilter4(nums):\n    \"\"\"Write a function that takes an array of numbers as input",
      0.8115234375
    ],
    [
      "result = 0\n    for num in nums:\n        if num > 10:\n            if (int(str(num)[0]) % 2 == 1) and (int(str(num)[-1]) % 2 == 1):\n                result += 1\n    return result\n\n\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2\nprint(specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) # 1\nprint(specialFilter([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) # 0\nprint(specialFilter([1, 3, 5, 7, 9, 11, 13, 15])) # 8\nprint(specialFilter([12, 15, -73, 14, -15])) # 1",
      0.724609375
    ],
    [
      "odd_digit_nums = []\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9]:\n                if num // 10 % 2 == 1:\n                    odd_digit_nums.append(num)\n    return len(odd_digit_nums)\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      0.371826171875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]])\n\ndef specialFilter3(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([num for num in nums if num > 10 and (num % 10 in [1, 3, 5, 7, 9]) and (num // 10 in [1, 3, 5, 7, 9])])\n\ndef specialFilter4(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and",
      0.1817626953125
    ],
    [
      "return len([x for x in nums if x > 10 and (x % 10 in (1, 3, 5, 7, 9)) and x > 10])\n\n\ndef specialFilter2(nums):\n    return sum([1 for x in nums if x > 10 and (x % 10 in (1, 3, 5, 7, 9)) and x > 10])\n\n\ndef specialFilter3(nums):\n    return len([x for x in nums if x > 10 and (x % 10 in (1, 3, 5, 7, 9)) and x > 10])",
      0.166748046875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1:\n                count += 1\n    return count",
      0.14697265625
    ],
    [
      "odds = [1, 3, 5, 7, 9]\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) in odds and int(str(num)[-1]) in odds:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))",
      0.033477783203125
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9]:\n                if num // 10 % 2 != 0:\n                    count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n\n# def specialFilter(nums):\n#     return len([num for num in nums if num > 10 and str(num)[0] + str(num)[-1] in [\"11\", \"13\", \"15\", \"17\", \"19\"]])\n\n# print(specialFilter([15, -73, 14, -15]))\n# print(specialFilter([33, -2, -3, 45, 21, 109]))",
      0.032073974609375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1:\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    nums = [15, -73, 14, -15]\n    print(specialFilter(nums))\n    nums = [33, -2, -3, 45, 21, 109]\n    print(specialFilter(nums))",
      -0.00814056396484375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num%10 in [1, 3, 5, 7, 9]:\n                if num//10 % 2 == 1:\n                    count += 1\n    return count",
      -0.054840087890625
    ],
    [
      "odd_numbers = [1,3,5,7,9]\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in odd_numbers and num // 10 in odd_numbers:\n            count += 1\n    return count",
      -0.1624755859375
    ],
    [
      "odd = lambda x: x % 2 != 0\n    is_greater_than_10 = lambda x: x > 10\n    is_odd = lambda x: odd(x[0]) and odd(x[-1])\n    return len([x for x in nums if is_greater_than_10(x) and is_odd(str(x))])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.179931640625
    ],
    [
      "return len([num for num in nums if num > 10 and (int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1)])\n\ndef main():\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))\n\nif __name__ == \"__main__\":\n    main()",
      -0.2176513671875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 != 0:\n                if num // 10 % 2 != 0:\n                    count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2",
      -0.352783203125
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if (int(str(num)[0]) % 2 == 1) and (int(str(num)[-1]) % 2 == 1):\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.5263671875
    ],
    [
      "filtered = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 != 0 and num % 100 % 2 != 0:\n                filtered += 1\n    return filtered\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\nprint(specialFilter([11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\nprint(specialFilter([121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131]))",
      -0.53857421875
    ],
    [
      "# Your code here\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 == 1 or num % 10 == 9:\n                if num // 10 == 1 or num // 10 == 9:\n                    count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.54296875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9]:\n                if num // 10 % 10 in [1, 3, 5, 7, 9]:\n                    count += 1\n    return count",
      -0.7509765625
    ],
    [
      "count = 0\n    for n in nums:\n        if n > 10:\n            if n % 10 in [1, 3, 5, 7, 9] and n // 10 % 2 != 0:\n                count += 1\n    return count\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\nprint(specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(specialFilter([11, 22, 33, 44, 55, 66, 77, 88, 99]))",
      -0.84814453125
    ],
    [
      "odd_digits = set([1, 3, 5, 7, 9])\n    result = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in odd_digits and num // 10 in odd_digits:\n                result += 1\n    return result\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85595703125
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85595703125
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 != 0 and num // 10 % 2 != 0:\n            count += 1\n    return count\n\n\n# print(specialFilter([15, -73, 14, -15]))\n# print(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85595703125
    ],
    [
      "odd_digit = lambda x: x%2\n    greater_than_10 = lambda x: x>10\n    def check_first_last_odd(num):\n        if odd_digit(num%10) and odd_digit(num//10):\n            return True\n        return False\n    return len([x for x in nums if greater_than_10(x) and check_first_last_odd(x)])\n    \nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 == 1) and (int(str(num)[-1]) % 2 == 1):\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "result = []\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 == 1 and num // 10 % 2 == 1:\n                result.append(num)\n    return len(result)\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 not in [0, 2, 4, 6, 8] and num // 10 not in [0, 2, 4, 6, 8]:\n                count += 1\n    return count",
      -0.85693359375
    ],
    [
      "# First solution:\n    # return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1])\n\n    # Second solution:\n    return len([num for num in nums if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "#filtered = [x for x in nums if x > 10 and (int(str(x)[0]) % 2 == 1) and (int(str(x)[-1]) % 2 == 1)]\n    filtered = []\n    for x in nums:\n        if x > 10 and (int(str(x)[0]) % 2 == 1) and (int(str(x)[-1]) % 2 == 1):\n            filtered.append(x)\n    return len(filtered)\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "count = 0\n    for num in nums:\n        # First digit is odd\n        if num % 10 % 2 != 0:\n            # Last digit is odd\n            if num % 100 % 2 != 0:\n                # Greater than 10\n                if num > 10:\n                    count += 1\n    return count",
      -0.85693359375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 == 1 and num // 10 % 2 == 1:\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "counter = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 != 0 and num % 100 / 10 % 2 != 0:\n                counter += 1\n    return counter\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2",
      -0.85693359375
    ],
    [
      "# Your code here\n    return len([i for i in nums if i > 10 and i % 10 in [1, 3, 5, 7, 9] and i // 10 % 2 == 1])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "#return len([x for x in nums if x > 10 and (x % 10) * (x // 10) % 2 != 0])\n    #return len([x for x in nums if x > 10 and not (x // 10 % 2 == 0 or x % 10 % 2 == 0)])\n    return len([x for x in nums if x > 10 and (x % 10) * (x // 10) % 2 != 0 and not (x // 10 % 2 == 0 or x % 10 % 2 == 0)])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "counter = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 != 0 and num // 10 % 2 != 0:\n                counter += 1\n    return counter\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in (1, 3, 5, 7, 9):\n                if num // 10 % 10 in (1, 3, 5, 7, 9):\n                    count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85693359375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 != 0 and num // 10 % 2 != 0:\n                count += 1\n    return count",
      -0.85791015625
    ],
    [
      "return len([i for i in nums if i > 10 and int(str(i)[0]) % 2 and int(str(i)[-1]) % 2])\n\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85791015625
    ],
    [
      "counter = 0\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n                counter += 1\n    return counter\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85791015625
    ],
    [
      "counter = 0\n    for i in range(len(nums)):\n        if nums[i] > 10:\n            if nums[i] % 2 != 0:\n                if nums[i] % 10 % 2 != 0:\n                    counter += 1\n    return counter\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "odd_nums = [1, 3, 5, 7, 9]\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in odd_nums and num // 10 in odd_nums:\n            count += 1\n    return count\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "odd_filter = lambda x: int(x[-1]) % 2 and int(x[0]) % 2\n    large_filter = lambda x: x > 10\n    return len(list(filter(lambda x: odd_filter(str(x)) and large_filter(x), nums)))\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "counter = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9]:\n                if num // 10 % 2 == 1:\n                    counter += 1\n    return counter\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            last_digit = num % 10\n            first_digit = num // 10\n            if (last_digit % 2) != 0 and (first_digit % 2) != 0:\n                count += 1\n    return count\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if (num % 10) % 2 == 1 and (num / 10) % 2 == 1:\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "# Your code here\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 != 0:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num % 10\n            last_digit = num // 10\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n\n\n\"\"\"\n1) Create an array of all the numbers greater than 10\n2) Create an array of all the numbers that have odd first and last digit\n3) Return the length of the intersection of both the arrays\n\"\"\"",
      -0.85888671875
    ],
    [
      "# Filter out odd numbers\n    oddNums = list(filter(lambda x: x % 2 == 1, nums))\n\n    # Filter out numbers greater than 10\n    gt10 = list(filter(lambda x: x > 10, oddNums))\n\n    return len(gt10)\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "count = 0\n    for num in nums:\n        # Check if number is greater than 10\n        if num > 10:\n            # Check if first and last digit is odd\n            if num % 10 in [1, 3, 5, 7, 9]:\n                if num // 10 in [1, 3, 5, 7, 9]:\n                    count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2\n\n# Time complexity is O(N) since we have to iterate over the entire array\n# Space complexity is O(1) since we are not using any additional memory",
      -0.85888671875
    ],
    [
      "return len([n for n in nums if n > 10 and n % 10 in [1, 3, 5, 7, 9] and n // 10 % 2 == 1])",
      -0.85888671875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "odds = [1, 3, 5, 7, 9]\n    filtered = [num for num in nums if num > 10 and (num % 10) in odds and (num // 10) in odds]\n    return len(filtered)\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2",
      -0.85888671875
    ],
    [
      "result = []\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            result.append(num)\n    return len(result)\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.85888671875
    ],
    [
      "# Your code here\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 != 0 and num % 100 // 10 % 2 != 0:\n                count += 1\n    return count\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.86083984375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 not in [0, 2, 4, 6, 8]:\n                if num // 10 not in [0, 2, 4, 6, 8]:\n                    count += 1\n    return count\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.86083984375
    ],
    [
      "odd = lambda x: x % 2\n    greater = lambda x: x > 10\n    last_first_odd = lambda x: odd(x % 10) and odd(x / 10)\n\n    return len([num for num in nums if greater(num) and last_first_odd(num)])\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.86083984375
    ],
    [
      "# Your code here\n    count = 0\n    for i in nums:\n        if i > 10:\n            if (int(str(i)[0]) % 2 != 0) and (int(str(i)[-1]) % 2 != 0):\n                count += 1\n    return count\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.86083984375
    ],
    [
      "# Your code here\n    return len([x for x in nums if x > 10 and int(str(x)[0])%2 == 1 and int(str(x)[-1])%2 == 1])\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -0.86083984375
    ],
    [
      "count = 0\n    for i in nums:\n        if i > 10:\n            if i % 10 in [1, 3, 5, 7, 9]:\n                if i // 10 % 2 == 1:\n                    count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # => 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # => 2",
      -0.97705078125
    ],
    [
      "return len([x for x in nums if (x > 10 and x % 10 in [1, 3, 5, 7, 9])])\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -1.0703125
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9]:\n            if num % 100 // 10 % 2 == 1:\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2",
      -1.4189453125
    ],
    [
      "odd = lambda num: num % 2\n    ten = lambda num: num > 10\n    first_last_odd = lambda num: odd(num % 100 % 10)\n    return sum([num for num in nums if ten(num) and first_last_odd(num)])\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2",
      -1.4306640625
    ],
    [
      "odd_nums = []\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n                odd_nums.append(num)\n    return len(odd_nums)\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -1.443359375
    ],
    [
      "result = 0\n    for num in nums:\n        if num > 10:\n            if num%10%2 != 0 and num//10%2 != 0:\n                result += 1\n    return result\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -1.4912109375
    ],
    [
      "count = 0\n    for i in nums:\n        if i > 10 and int(str(i)[0]) % 2 == 1 and int(str(i)[-1]) % 2 == 1:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -1.6396484375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -1.6396484375
    ],
    [
      "counter = 0\n    for i in nums:\n        if i > 10 and (i % 10) % 2 != 0 and (int(i / 10) % 2 != 0):\n            counter += 1\n    return counter\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -1.646484375
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1 and num // 10 % 2 == 1:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -1.7568359375
    ],
    [
      "# return len([num for num in nums if num > 10 and (num % 10) == 1 and (num // 10) == 1])\n    # return len([num for num in nums if num > 10 and (num % 10) == 1 and (num // 10) == 1])\n    # return len([num for num in nums if num > 10 and num % 10 == 1 and num // 10 == 1])\n    # return len([num for num in nums if num > 10 and (num % 10) == 1 and (num // 10) == 1])\n    return len([num for num in nums if num > 10 and num % 10 == 1 and num // 10 == 1])\n\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2\nprint(specialFilter([12, 10, 15, -73, 14, -15, 105])) # 3\nprint(specialFilter([])) # 0\nprint(specialFilter([12, 10, 15, -73, 14, -15])) # 0",
      -1.775390625
    ],
    [
      "result = 0\n    for number in nums:\n        if number > 10 and number % 10 in [1, 3, 5, 7, 9] and number // 10 in [1, 3, 5, 7, 9]:\n            result += 1\n    return result\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -2.08984375
    ],
    [
      "# Your code here\n\n    return 1\n\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\nprint(specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(specialFilter([11, 22, 33, 44, 55, 66, 77, 88, 99]))\nprint(specialFilter([111, 222, 333, 444, 555, 666, 777, 888, 999]))\nprint(specialFilter([1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999]))",
      -2.12109375
    ],
    [
      "return len([i for i in nums if i > 10 and i%10%2==1 and i//10%2==1])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -2.19140625
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 % 2 == 1:\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -2.2421875
    ],
    [
      "# Your code here\n    oddCount = 0\n    oddEndCount = 0\n    for i in nums:\n        if i > 10:\n            if (i % 10) % 2 != 0 and (i % 100) / 10 % 2 != 0:\n                oddCount += 1\n                if i % 10 == i % 100:\n                    oddEndCount += 1\n\n    return oddCount - oddEndCount\n\nprint(specialFilter([15, -73, 14, -15])) # 1 \nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2\nprint(specialFilter([5, 10, 12, 13, 15])) # 0\nprint(specialFilter([1, 1, 2, 3, 5])) # 3\nprint(specialFilter([555, 55, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559])) # 3\nprint(specialFilter([9, 99, 999, 9999, 99999])) # 0\nprint(specialFilter([10, 100, 1000, 10000, 100000])) # 0",
      -2.36328125
    ],
    [
      "odd = lambda x: x % 2 != 0\n    greaterThanTen = lambda x: x > 10\n    firstLastOdd = lambda x: odd(x[0]) and odd(x[len(x) - 1])\n    return len([num for num in nums if greaterThanTen(num) and firstLastOdd(str(num))])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -2.51953125
    ],
    [
      "odd = lambda x: x % 2 != 0\n    return sum([1 for num in nums if num > 10 and odd(num % 100 // 10)])\n\n\nif __name__ == \"__main__\":\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))",
      -2.546875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 in [1, 3, 5, 7, 9]:\n                if num // 10 in [1, 3, 5, 7, 9]:\n                    count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2\nprint(specialFilter([32, -2, -3, 45, 21, 109])) # 0\nprint(specialFilter([15, -73, 14, -15, 12, 13, 109])) # 2\nprint(specialFilter([15, -73, 14, -15, 12, 13, 109, 16, 17, 18])) # 3\nprint(specialFilter([15, -73, 14, -15, 12, 13, 109, 16, 17, 18, 19, 20])) # 3",
      -2.69921875
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 == 1 or num % 10 == 9:\n                if num // 10 == 1 or num // 10 == 9:\n                    count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -2.986328125
    ],
    [
      "count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 % 2 == 1 and num % 100 % 10 % 2 == 1:\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -2.9921875
    ],
    [
      "count = 0\n    for n in nums:\n        if n > 10 and n % 10 in [1, 3, 5, 7, 9] and n // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))",
      -3.00390625
    ],
    [
      "# Initialize the counter\n    counter = 0\n    # Loop over the elements in the array\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Check if the first and last digits are odd\n            if num % 10 and num // 10 % 10:\n                # If so, increment the counter\n                counter += 1\n    return counter\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
      -3.166015625
    ],
    [
      "odd_nums = [1, 3, 5, 7, 9]\n    nums_count = 0\n    for num in nums:\n        if num > 10 and num % 10 in odd_nums and num // 10 in odd_nums:\n            nums_count += 1\n    return nums_count\n\ndef test_special_filter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n    assert specialFilter([4, 9, 1, 2, 4, 19, 8, 13, 7, 10, 10, 10, 10, 10, 10]) == 1\n    assert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n    assert specialFilter([11, 22, 33, 44, 55, 66, 77, 88, 99, 100]) == 0\n    assert specialFilter([111, 112, 113, 114, 115, 116, 117, 118, 119, 120]) == 1\n    assert specialFilter([1, 11, 21, 31, 41, 51, 61, 71, 81, 91, 101]) == 1\n    assert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 22, 33, 44, 55, 66, 77, 88, 99, 100]) == 2\n\nif __name__ == '__main__':\n    test_special_filter()",
      -3.85546875
    ],
    [
      "# 1. Loop through the array\n    # 2. Check if the number is greater than 10\n    # 3. Check if the first and last digits are odd\n    # 4. If the condition is met, append it to a new array\n    # 5. Return the length of that new array\n    odd_nums = []\n    for num in nums:\n        if num > 10 and num % 10 in [1,3,5,7,9]:\n            odd_nums.append(num)\n    return len(odd_nums)\n\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # 1. Loop through the array\n    # 2. Check if the number is greater than 10\n    # 3. Check if the first and last digits are odd\n    # 4. If the condition is met, append it to a new array\n    # 5. Return the length of that new array\n    odd_nums = []\n    for num in nums:\n        if num > 10 and num % 10 in [1,3,5,7,9]:\n            odd_nums.append(num)\n    return len(odd_nums)\n\n\ndef specialFilter3(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([3",
      -4.77734375
    ],
    [
      "# filter() function returns the filter object, which is an iterator\n    # that produces a sequence of those elements of the original iterable\n    # for which the filter function returns true.\n    #\n    # The filter function takes two arguments, a function and an iterable.\n    #\n    # The filter function returns the elements of the iterable for which the\n    # function returns true.\n\n    # The map() function returns a map object, which is an iterator that\n    # produces a sequence of the results obtained from applying the \n    # function to the items of the iterable.\n    #\n    # The map function takes two arguments, a function and an iterable.\n    #\n    # The map function returns the elements of the iterable for which the\n    # function returns true.\n\n    # The lambda function is an anonymous function. It can be used for \n    # simple, single-expression functions.\n\n    # The any() function returns True if any element of the iterable is true.\n    # Otherwise, if every element is false, it returns False.\n\n    # The all() function returns True if all of the elements of the iterable\n    # are true (or if the iterable is empty).\n    # Otherwise, if any element is false, it returns False.\n\n    # The enumerate() function, used in conjunction with the for statement,\n    # allows the iterator to keep track of its current position within the\n    # iterable, and to return that information in each iteration.\n    #\n    # The enumerate() function takes one argument, the iterable, and returns\n    # an iterator that produces pairs containing a count (from zero) and a\n    # value yielded by the iterable.\n\n    # The zip() function takes a number of iterables as arguments, and \n    # returns an iterator that aggregates them element-wise. \n    # The iterator stops when the shortest input iterable is exhausted.\n    #\n    # The zip function takes two arguments, an iterable and an iterator.\n    #\n    # The zip function returns the elements of the iterable for which the\n    # function returns true.\n\n    # The filter() function takes two arguments, a function and an iterable.\n    #\n    # The filter function returns the elements of",
      -8.1875
    ],
    [
      "# [15, -73, 14, -15]\n    # 15 > 10 and first and last digits are odd\n    # -73 > 10 and first and last digits are odd\n    # 14 > 10 and first and last digits are odd\n    # -15 > 10 and first and last digits are odd\n    # \n    # [33, -2, -3, 45, 21, 109]\n    # 33 > 10 and first and last digits are odd\n    # -2 > 10 and first and last digits are odd\n    # -3 > 10 and first and last digits are odd\n    # 45 > 10 and first and last digits are odd\n    # 21 > 10 and first and last digits are odd\n    # 109 > 10 and first and last digits are odd\n    # \n    # [15, -73, 14, -15]\n    # 2\n    # \n    # [33, -2, -3, 45, 21, 109]\n    # 5\n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    #",
      -9.0859375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}