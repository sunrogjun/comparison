{
  "problem": {
    "task_id": "HumanEval/108",
    "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
    "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n",
    "entry_point": "count_nums",
    "docstring": "",
    "problem_id": 108
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "\"*** YOUR CODE HERE ***\"\n    def sum_of_digits(num):\n        sum = 0\n        while num != 0:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    def signed_digits(num):\n        if num < 0:\n            return -num\n        else:\n            return num\n\n    def digit_sum(num):\n        return sum_of_digits(signed_digits(num))\n\n    count = 0\n    for num in arr:\n        if digit_sum(num) > 0:\n            count += 1\n    return count\n\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def sum_of_digits(num):\n        sum = 0\n        while num != 0:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    def signed_digits(num):\n        if num < 0:\n            return -num\n        else:\n            return num\n\n    def digit_sum(num):\n        return sum_of_digits(signed_digits(num))\n\n    count = 0\n    for num in arr:\n        if digit_sum(num) > 0:\n            count += 1\n    return count",
      11.0546875
    ],
    [
      "# your code here\n    count = 0\n    for i in arr:\n        if sum(map(int, str(abs(i)))) > 0:\n            count += 1\n    return count\n\ndef count_nums_v2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # your code here\n    count = 0\n    for i in arr:\n        if sum(map(int, str(abs(i)))) > 0:\n            count += 1\n    return count\n\ndef count_nums_v3(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # your code here\n    count = 0\n    for i in arr:\n        if sum(map(int, str(abs(i)))) > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      7.97265625
    ],
    [
      "# Your code here\n    # O(n*log(n)) solution\n    # sorted_arr = sorted(arr, key=lambda x: str(abs(x))[::-1])\n    # counter = 0\n    # for i in range(len(sorted_arr)):\n    #     if sum(map(int, str(abs(sorted_arr[i])))) > 0:\n    #         counter += 1\n    # return counter\n\n    # O(n) solution\n    # counter = 0\n    # for num in arr:\n    #     if sum(map(int, str(abs(num)))) > 0:\n    #         counter += 1\n    # return counter\n\n    # O(n) solution\n    # counter = 0\n    # for num in arr:\n    #     if num < 0:\n    #         if sum(map(int, str(abs(num))[1:])) > 0:\n    #             counter += 1\n    #     else:\n    #         if sum(map(int, str(num))) > 0:\n    #             counter += 1\n    # return counter\n\n    # O(n) solution\n    counter = 0\n    for num in arr:\n        if num < 0:\n            if sum(map(int, str(abs(num))[1:])) > 0:\n                counter += 1\n        else:\n            if sum(map(int, str(num))) > 0:\n                counter += 1\n    return counter\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      6.5234375
    ],
    [
      "return sum(1 for x in arr if sum(map(abs, map(int, str(x)))) > 0)\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([x for x in arr if sum(map(abs, map(int, str(x)))) > 0])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      5.21875
    ],
    [
      "return sum(sum_digits(n) > 0 for n in arr)\n\ndef sum_digits(n):\n    if n < 0:\n        return -sum_digits(-n)\n    if n < 10:\n        return n\n    return n%10 + sum_digits(n//10)\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(sum_digits(n) > 0 for n in arr)\n\ndef sum_digits(n):\n    if n < 0:\n        return -sum_digits(-n)\n    if n < 10:\n        return n\n    return n%10 + sum_digits(n//10)",
      5.16015625
    ],
    [
      "def get_sign(num):\n        if num < 0:\n            return -1\n        return 1\n\n    def get_sum(num):\n        sum = 0\n        while num != 0:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    result = 0\n    for num in arr:\n        if get_sign(num) * get_sum(num) > 0:\n            result += 1\n    return result\n\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def get_sign(num):\n        if num < 0:\n            return -1\n        return 1\n\n    def get_sum(num):\n        sum = 0\n        while num != 0:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    result = 0\n    for num in arr:\n        if get_sign(num) * get_sum(num) > 0:\n            result += 1\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      4.3125
    ],
    [
      "# your code here\n    count = 0\n    for i in arr:\n        sum = 0\n        for j in str(i):\n            sum += int(j)\n        if sum > 0:\n            count += 1\n    return count\n\ndef count_nums_2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # your code here\n    return len([i for i in arr if sum(int(j) for j in str(i)) > 0])\n\ndef count_nums_3(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # your code here\n    return sum(sum(int(j) for j in str(i)) > 0 for i in arr)",
      3.775390625
    ],
    [
      "# return len([x for x in arr if sum(map(abs, map(int, str(x)))) > 0])\n    return len([x for x in arr if sum(map(int, str(abs(x)))) > 0])\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    assert count_nums([0, 0, 0, 0]) == 0\n    assert count_nums([-123, 123, -23, 23]) == 4\n    assert count_nums([100, -100, -1, 1, 2, 2]) == 5\n    assert count_nums([10, -10, 100, 200, 2000]) == 3\n    assert count_nums([100, -100, 1000, -1000, 10000, -10000]) == 3\n\n\nif __name__ == '__main__':\n    test_count_nums()",
      3.705078125
    ],
    [
      "# Your code here\n    def count_nums_helper(arr, num_nums):\n        if len(arr) == 0:\n            return num_nums\n        elif sum(map(lambda x: int(x), str(abs(arr[0])))) > 0:\n            return count_nums_helper(arr[1:], num_nums + 1)\n        else:\n            return count_nums_helper(arr[1:], num_nums)\n\n    return count_nums_helper(arr, 0)\n\n\ndef count_nums_2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # Your code here\n    def count_nums_helper(arr, num_nums):\n        if len(arr) == 0:\n            return num_nums\n        elif sum(map(lambda x: int(x), str(abs(arr[0])))) > 0:\n            return count_nums_helper(arr[1:], num_nums + 1)\n        else:\n            return count_nums_helper(arr[1:], num_nums)\n\n    return count_nums_helper(arr, 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      3.494140625
    ],
    [
      "# Your code here\n    return sum([1 for x in arr if sum([int(y) for y in str(abs(x))]) > 0])\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # Your code here\n    return sum([1 for x in arr if sum([int(y) for y in str(abs(x))]) > 0])\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # Your code here\n    return sum([1 for x in arr if sum([int(y) for y in str(abs(x))]) > 0])\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) ==",
      2.33203125
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        elif num < 0:\n            num_str = str(num)\n            num_str = num_str[1:]\n            num = int(num_str)\n            if num > 0:\n                count += 1\n    return count\n\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([x for x in arr if sum([int(i) for i in str(x)]) > 0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.08203125
    ],
    [
      "return 0\n\ndef count_nums_slow(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return 0\n\ndef count_nums_fast(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.08203125
    ],
    [
      "return len([x for x in arr if sum([int(i) for i in str(abs(x))]) > 0])\n\nprint(count_nums([1, 1, 2]))",
      0.8271484375
    ],
    [
      "# your code here\n    result = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            result += 1\n    return result\n\ndef sum_of_digits(num):\n    \"\"\"\n    Write a function sum_of_digits which takes an integer and returns\n    the sum of the absolute value of each digit in the integer.\n    >>> sum_of_digits(10) # 1 + 0 = 1\n    1\n    >>> sum_of_digits(-35) # same as sum_of_digits(35)\n    8\n    >>> sum_of_digits(123456)\n    17\n    \"\"\"\n    # your code here\n    result = 0\n    for digit in str(abs(num)):\n        result += int(digit)\n    return result",
      0.751953125
    ],
    [
      "# your code here\n    # return 0\n    # if not arr:\n    #     return 0\n    # count = 0\n    # for i in range(len(arr)):\n    #     total = 0\n    #     for j in str(arr[i]):\n    #         total += int(j)\n    #     if total > 0:\n    #         count += 1\n    # return count\n    # pass\n    return len([x for x in arr if sum([int(d) for d in str(abs(x))]) > 0])\n\n\n\ndef count_nums_v2(arr):\n    # your code here\n    # return 0\n    # if not arr:\n    #     return 0\n    # count = 0\n    # for i in range(len(arr)):\n    #     total = 0\n    #     for j in str(arr[i]):\n    #         total += int(j)\n    #     if total > 0:\n    #         count += 1\n    # return count\n    # pass\n    return len([x for x in arr if sum([int(d) for d in str(x)]) > 0])",
      0.258056640625
    ],
    [
      "def num_sum(n):\n        if n < 0:\n            return -n\n        return n\n    def sum_digits(n):\n        if n < 0:\n            n = -n\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total\n    def count_nums(arr):\n        count = 0\n        for n in arr:\n            if sum_digits(num_sum(n)) > 0:\n                count += 1\n        return count\n    return count_nums(arr)",
      0.2349853515625
    ],
    [
      "return sum(sum([int(digit) for digit in str(num)]) > 0 for num in arr)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.190673828125
    ],
    [
      "# Your code here\n    # count = 0\n    # for num in arr:\n    #     if num < 0:\n    #         num = -num\n    #     sum = 0\n    #     for digit in str(num):\n    #         sum += int(digit)\n    #     if sum > 0:\n    #         count += 1\n    # return count\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        if sum > 0:\n            count += 1\n    return count\n\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # Your code here\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        if sum > 0:\n            count += 1\n    return count\n\n\ndef count_nums3(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) ==",
      -0.08184814453125
    ],
    [
      "# your code here\n    total = 0\n    for num in arr:\n        if num > 0:\n            total += 1\n        else:\n            num = abs(num)\n            while num > 0:\n                total += num % 10\n                num = num // 10\n    return total\n\n\nprint(count_nums([-123, 123, 120]))",
      -0.1903076171875
    ],
    [
      "def is_positive(num):\n        if num < 0:\n            return False\n        return True\n\n    def sum_num(num):\n        return sum([int(i) for i in str(num)])\n\n    result = 0\n    for num in arr:\n        if is_positive(num) and sum_num(num) > 0:\n            result += 1\n    return result\n\nprint(count_nums([1, 1, 2]))\nprint(count_nums([-1, 11, -11]))\nprint(count_nums([]))",
      -0.418212890625
    ],
    [
      "return sum(\n        num > 0 and sum(map(int, str(abs(num)))) > 0\n        for num in arr\n    )\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(\n        0 < sum(map(int, str(num))) < num\n        for num in arr\n    )\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(\n        sum(map(int, str(abs(num)))) > 0\n        for num in arr\n    )\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1",
      -0.429931640625
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    def sum_of_num(num):\n        sum = 0\n        for i in str(abs(num)):\n            sum += int(i)\n        return sum\n    count = 0\n    for i in arr:\n        if sum_of_num(i) > 0:\n            count += 1\n    return count\n\ndef add_trees(a, b):\n    \"\"\"\n    Write a function add_trees which takes two binary trees of integers\n    and returns a new binary tree containing the sum of the values from\n    the two trees.\n    >>> add_trees(Tree(1, [Tree(2, [Tree(3)])]), Tree(4, [Tree(5)]))\n    Tree(5, [Tree(7, [Tree(3)])])\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def sum_of_tree(tree):\n        sum = 0\n        for i in tree:\n            sum += i\n        return sum\n    return Tree(sum_of_tree(a) + sum_of_tree(b))\n\ndef balanced_parentheses_v1(s):\n    \"\"\"\n    Write a function balanced_parentheses which takes a string of\n    parentheses, and determines if the string of parentheses is balanced.\n    By a balanced string of parentheses we mean that every opening parenthesis\n    has a corresponding closing parenthesis in the correct spot.\n    Ignore all spaces and new lines.\n    Return True if the string of parentheses is balanced, and False\n    otherwise.\n    >>> balanced_parentheses_v1('((((((f))))))')\n    True\n    >>> balanced_parentheses_v1('(((((f)))))')\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def check_balanced(s):\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append('(')\n            elif i == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        if len(stack) ==",
      -0.447509765625
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    def count_nums_helper(arr, sum):\n        if len(arr) == 0:\n            return sum\n        if sum > 0:\n            return count_nums_helper(arr[1:], sum)\n        else:\n            return count_nums_helper(arr[1:], sum + arr[0])\n    return count_nums_helper(arr, 0)\n\n\ndef flatten(lst):\n    \"\"\"\n    Write a function flatten which takes a list of lists and returns a single\n    flattened list.\n    >>> flatten([[1, 2], [3, 4]])\n    [1, 2, 3, 4]\n    >>> flatten([[[1, 1], [2, 2]], [3, 3], [4, 4]])\n    [1, 1, 2, 2, 3, 3, 4, 4]\n    >>> flatten([[[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]], [5, 5], [6, 6]])\n    [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def flatten_helper(lst, flattened_lst):\n        if len(lst) == 0:\n            return flattened_lst\n        if isinstance(lst[0], list):\n            return flatten_helper(lst[0], flatten_helper(lst[1:], flattened_lst))\n        else:\n            return flatten_helper(lst[1:], flattened_lst + [lst[0]])\n    return flatten_helper(lst, [])\n\n\ndef product(lst):\n    \"\"\"\n    Write a function product which takes a list of numbers and returns the\n    product of the numbers.\n    >>> product([1, 2, 3,",
      -0.56298828125
    ],
    [
      "#your code here\n    count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return count\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    #your code here\n    count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return count\n\n\ndef count_nums3(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    #your code here\n    count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return count\n\n\ndef count_nums4(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1,",
      -0.6005859375
    ],
    [
      "return count_positive_nums(arr) - count_negative_nums(arr)\n\n\ndef count_positive_nums(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            count += 1\n    return count\n\n\ndef count_negative_nums(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.61767578125
    ],
    [
      "return sum(1 for num in arr if sum_digits_positive(num))\n\n\ndef sum_digits_positive(num):\n    \"\"\"\n    Write a function sum_digits_positive which takes a number and returns\n    True if the sum of its digits is positive, False otherwise.\n    >>> sum_digits_positive(123)\n    True\n    >>> sum_digits_positive(0)\n    False\n    \"\"\"\n    return sum(int(x) for x in str(abs(num))) > 0\n\n\ndef count_nums_s(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return len([num for num in arr if sum_digits_positive(num)])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.83251953125
    ],
    [
      "count = 0\n    for i in arr:\n        if sum(map(int, str(i))) > 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "return sum([sum_of_digits(i) > 0 for i in arr])\n\n\ndef sum_of_digits(n):\n    if n < 0:\n        n = -n\n    result = 0\n    while n > 0:\n        result += n % 10\n        n //= 10\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "def sum_digits(num):\n        if num == 0:\n            return 0\n        else:\n            return sum_digits(num // 10) + num % 10\n\n    return len([x for x in arr if sum_digits(x) > 0])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "# Your code here\n\n    pass",
      -0.85595703125
    ],
    [
      "if not arr:\n        return 0\n    result = 0\n    for i in arr:\n        if sum([int(x) for x in str(abs(i))]) > 0:\n            result += 1\n    return result\n\n\nprint(count_nums([1, 1, 2]))",
      -0.85595703125
    ],
    [
      "pass\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n\n\nif __name__ == '__main__':\n    test_count_nums()",
      -0.85595703125
    ],
    [
      "return 0\n\ndef count_nums(arr):\n    return 0\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "# Your code here\n    count = 0\n    for i in arr:\n        if sum(map(abs, str(i))) > 0:\n            count += 1\n    return count\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n\n\nif __name__ == \"__main__\":\n    test_count_nums()",
      -0.85693359375
    ],
    [
      "return len([i for i in arr if sum([int(x) for x in str(i)]) > 0])\n\n\nprint(count_nums([-1, 11, -11]))\nprint(count_nums([1, 1, 2]))\nprint(count_nums([]))",
      -0.85693359375
    ],
    [
      "pass\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums2([]) == 0\n    >>> count_nums2([-1, 11, -11]) == 1\n    >>> count_nums2([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# Your code here\n    return sum([1 for x in arr if sum([int(y) for y in str(abs(x))]) > 0])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "result = 0\n    for i in arr:\n        count = 0\n        for j in str(i):\n            count += int(j)\n        if count > 0:\n            result += 1\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return sum(1 for num in arr if sum(map(int, str(num))) > 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return 0\n\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return 0",
      -0.85693359375
    ],
    [
      "return sum(\n        1\n        for num in arr\n        if sum(map(abs, map(int, str(num)))) > 0\n    )",
      -0.85693359375
    ],
    [
      "return count_nums_helper(arr, 0)\n\ndef count_nums_helper(arr, count):\n    if len(arr) == 0:\n        return count\n    if arr[0] > 0:\n        count += 1\n        return count_nums_helper(arr[1:], count)\n    if arr[0] < 0:\n        return count_nums_helper(arr[1:], count)\n    if arr[0] == 0:\n        return count_nums_helper(arr[1:], count)\n\n\nprint(count_nums([-1, -11, 11]))",
      -0.85693359375
    ],
    [
      "pass\n\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    pass",
      -0.85693359375
    ],
    [
      "return count_nums_rec(arr, 0)\n\ndef count_nums_rec(arr, count):\n    if len(arr) == 0:\n        return count\n    elif sum_digits(arr[0]) > 0:\n        return count_nums_rec(arr[1:], count + 1)\n    else:\n        return count_nums_rec(arr[1:], count)\n\ndef sum_digits(n):\n    if n < 0:\n        n = -n\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "pass\n\n\ndef count_nums_v2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return sum(1 for x in arr if sum(map(int, str(x))) > 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "count = 0\n    for i in arr:\n        if sum(map(int, str(abs(i)))) > 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def num_sum(n):\n        if n < 0:\n            return -n\n        return n\n    return len([x for x in arr if sum([num_sum(int(i)) for i in str(x)]) > 0])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "count = 0\n    for i in arr:\n        if sum(map(int, str(abs(i)))) > 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "# your code here\n    if len(arr) == 0:\n        return 0\n    if arr[0] < 0:\n        return count_nums(arr[1:])\n    else:\n        return 1 + count_nums(arr[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return count_nums_helper(arr, 0)\n\n\ndef count_nums_helper(arr, count):\n    if len(arr) == 0:\n        return count\n    if sum_digits(arr[0]) > 0:\n        count += 1\n    return count_nums_helper(arr[1:], count)\n\n\ndef sum_digits(n):\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)",
      -0.85693359375
    ],
    [
      "# your code here\n\n    # my solution\n    # return sum(1 for x in arr if sum(int(i) for i in str(x)) > 0)\n\n    # better solution\n    return sum(1 for x in arr if sum(int(i) for i in str(abs(x))) > 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def sum_digits(n):\n        if n < 0:\n            return -sum_digits(-n)\n        if n < 10:\n            return n\n        return sum_digits(n // 10) + (n % 10)\n\n    return sum(sum_digits(n) > 0 for n in arr)\n\n\ndef count_nums2(arr):\n    \"\"\"\n    >>> count_nums2([]) == 0\n    >>> count_nums2([-1, 11, -11]) == 1\n    >>> count_nums2([1, 1, 2]) == 3\n    \"\"\"\n    def sum_digits(n):\n        if n < 0:\n            return -sum_digits(-n)\n        if n < 10:\n            return n\n        return sum_digits(n // 10) + (n % 10)\n\n    return sum(sum_digits(n) > 0 for n in arr)",
      -0.85693359375
    ],
    [
      "def sum_digits(n):\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total\n\n    def signed_digits(n):\n        sign = n < 0\n        total = 0\n        while n != 0:\n            total += n % 10\n            n //= -10 if sign else 10\n        return total\n\n    def count_nums(arr):\n        return sum(1 for n in arr if sum_digits(signed_digits(n)) > 0)\n    return count_nums(arr)",
      -0.85693359375
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "return sum([int(str(num)[i]) for i in range(len(str(num))) for num in arr])",
      -0.85693359375
    ],
    [
      "pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "count = 0\n    for i in arr:\n        num = 0\n        for j in str(i):\n            num += int(j)\n        if num > 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def sum_digits(n):\n        if n == 0:\n            return 0\n        else:\n            return n % 10 + sum_digits(n // 10)\n\n    return len([x for x in arr if sum_digits(x) > 0])\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n\n\nif __name__ == '__main__':\n    test_count_nums()",
      -0.85791015625
    ],
    [
      "# return len([n for n in arr if sum([int(i) for i in str(abs(n))]) > 0])\n    count = 0\n    for n in arr:\n        if sum([int(i) for i in str(abs(n))]) > 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def count_nums_helper(arr, result):\n        if not arr:\n            return result\n        if sum(map(abs, arr[0])) > 0:\n            result += 1\n        return count_nums_helper(arr[1:], result)\n    return count_nums_helper(arr, 0)",
      -0.85791015625
    ],
    [
      "num_greater_than_zero = 0\n    for i in arr:\n        total = 0\n        number = i\n        while number > 0:\n            total += number % 10\n            number = number // 10\n        if total > 0:\n            num_greater_than_zero += 1\n    return num_greater_than_zero\n\n\nprint(count_nums([1, 1, 2, -123, 45]))",
      -0.85791015625
    ],
    [
      "total = 0\n    for i in arr:\n        total += 1 if i > 0 else 0\n    return total\n\n\n\nprint(count_nums([-1, 11, -11]))\nprint(count_nums([1, 1, 2]))\nprint(count_nums([]))\nprint(count_nums([0, 0, 0]))\nprint(count_nums([-1, -1, -1]))",
      -0.85791015625
    ],
    [
      "pass",
      -0.8583984375
    ],
    [
      "return sum(sum([int(i) for i in str(abs(x))]) > 0 for x in arr)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# your code here\n\n    def sum_of_digits(num):\n        sum_ = 0\n        for digit in str(abs(num)):\n            sum_ += int(digit)\n        return sum_\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n\n    return count\n\n\nprint(count_nums([-1, 11, -11]))",
      -0.8583984375
    ],
    [
      "# Your code here\n    pass",
      -0.8583984375
    ],
    [
      "# your code here\n    count = 0\n    for num in arr:\n        count += has_digit_sum(num)\n    return count\n\ndef has_digit_sum(num):\n    total = 0\n    num = abs(num)\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total > 0\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Your code here\n    count = 0\n    for i in arr:\n        if sum([int(j) for j in str(i)]) > 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "# Your code here\n    def digit_sum(n):\n        if n < 0:\n            n = -n\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total\n\n    return len(list(filter(lambda x: digit_sum(x) > 0, arr)))\n\n\ndef count_nums(arr):\n    def digit_sum(n):\n        if n < 0:\n            n = -n\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total\n\n    return len(list(filter(lambda x: digit_sum(x) > 0, arr)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "pass\n\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums2([]) == 0\n    >>> count_nums2([-1, 11, -11]) == 1\n    >>> count_nums2([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\n\ndef count_nums3(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums3([]) == 0\n    >>> count_nums3([-1, 11, -11]) == 1\n    >>> count_nums3([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\n\ndef count_nums4(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums4([]) == 0\n    >>> count_nums4([-1, 11, -11]) == 1\n    >>> count_nums4([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\n\ndef count_nums5(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed",
      -0.9365234375
    ],
    [
      "if len(arr) == 0:\n        return 0\n    else:\n        return count_nums_helper(arr, 0, 0)\n\ndef count_nums_helper(arr, index, total):\n    if index == len(arr):\n        if total > 0:\n            return 1\n        else:\n            return 0\n    else:\n        return count_nums_helper(arr, index + 1, total + arr[index]) + count_nums_helper(arr, index + 1, total)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.9453125
    ],
    [
      "return sum(\n        sum([int(d) for d in str(n)]) > 0\n        for n in arr\n    )\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    assert count_nums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) == 12\n    assert count_nums([1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000]) == 12\n    assert count_nums([-1000, -2000, -3000, -4000, -5000, -6000, -7000, -8000, -9000, -10000, -11000, -12000]) == 0\n\n\nif __name__ == '__main__':\n    test_count_nums()",
      -0.9462890625
    ],
    [
      "pass\n\n\ndef sum_nums(arr):\n    \"\"\"\n    Write a function sum_nums which takes an array of integers and returns\n    the sum of all the numbers which have a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> sum_nums([]) == 0\n    >>> sum_nums([-1, 11, -11]) == 1\n    >>> sum_nums([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\n\ndef sum_nums2(arr):\n    \"\"\"\n    Write a function sum_nums2 which takes an array of integers and returns\n    the sum of all the numbers which have a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> sum_nums2([]) == 0\n    >>> sum_nums2([-1, 11, -11]) == 1\n    >>> sum_nums2([1, 1, 2]) == 3\n    \"\"\"\n    pass",
      -1.2939453125
    ],
    [
      "# your code here\n    # return count_nums_helper(arr, 0)\n    return count_nums_helper_recursive(arr, 0)\n\ndef count_nums_helper(arr, sum):\n    if len(arr) == 0:\n        return sum\n    num = arr.pop()\n    if num > 0:\n        sum += 1\n    return count_nums_helper(arr, sum)\n\ndef count_nums_helper_recursive(arr, sum):\n    if len(arr) == 0:\n        return sum\n    num = arr.pop()\n    if num > 0:\n        sum += 1\n    return count_nums_helper_recursive(arr, sum)\n\ndef count_nums_helper_recursive_2(arr, sum):\n    if len(arr) == 0:\n        return sum\n    num = arr.pop()\n    if num > 0:\n        sum += 1\n    return count_nums_helper_recursive_2(arr, sum)\n\ndef count_nums_helper_recursive_3(arr, sum):\n    if len(arr) == 0:\n        return sum\n    num = arr.pop()\n    if num > 0:\n        sum += 1\n    return count_nums_helper_recursive_2(arr, sum)\n\ndef count_nums_helper_recursive_4(arr, sum):\n    if len(arr) == 0:\n        return sum\n    num = arr.pop()\n    if num > 0:\n        sum += 1\n    return count_nums_helper_recursive_2(arr, sum)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.3447265625
    ],
    [
      "count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\n\ndef count_nums_v2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(x) for x in str(num)) > 0:\n            count += 1\n    return count\n\n\nprint(count_nums([1, 1, 2]))\nprint(count_nums([-1, 11, -11]))\nprint(count_nums([1, 1, 2, -1, 11, -11, 123]))\n\nprint(count_nums_v2([1, 1, 2]))\nprint(count_nums_v2([-1, 11, -11]))\nprint(count_nums_v2([1, 1, 2, -1, 11, -11, 123]))",
      -1.5341796875
    ],
    [
      "pass\n\n\ndef count_nums_no_div(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_no_div([]) == 0\n    >>> count_nums_no_div([-1, 11, -11]) == 1\n    >>> count_nums_no_div([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\n\ndef count_nums_no_loops(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_no_loops([]) == 0\n    >>> count_nums_no_loops([-1, 11, -11]) == 1\n    >>> count_nums_no_loops([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\n\ndef count_nums_no_loops_no_div(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_no_loops_no_div([]) == 0\n    >>> count_nums_no_loops_no_div([-1, 11, -11]) == 1\n    >>> count_nums_no_loops_no_div([1, 1, 2]) == 3\n    \"\"\"\n    pass",
      -1.6240234375
    ],
    [
      "def has_positive_sum(n):\n        total = 0\n        for digit in str(n):\n            total += int(digit)\n        return total > 0\n\n    return len(list(filter(has_positive_sum, arr)))\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3",
      -1.728515625
    ],
    [
      "pass\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\ndef count_nums3(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\ndef count_nums4(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\ndef count_nums5(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -1",
      -1.9453125
    ],
    [
      "return sum(sum(map(int, str(abs(x)))) > 0 for x in arr)\n\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(sum(map(int, str(x))) > 0 for x in arr)",
      -2.142578125
    ],
    [
      "#your code here\n    count = 0\n    for i in arr:\n        if sum_digits(i) > 0:\n            count += 1\n    return count\n\ndef sum_digits(n):\n    if n < 0:\n        n = -n\n    if n < 10:\n        return n\n    return n%10 + sum_digits(n//10)\n\nprint(sum_digits(123456789))\n\n# if __name__ == \"__main__\":\n#     import doctest\n#     doctest.testmod()",
      -2.181640625
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n\n\ndef reverse_num(x):\n    \"\"\"\n    Write a function reverse_num which takes an integer x and returns its\n    reverse. For example:\n    >>> reverse_num(123)\n    321\n    >>> reverse_num(-456)\n    -654\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef reverse_digits(x):\n    \"\"\"\n    Write a function reverse_digits which takes an integer x and returns its\n    reverse. But this time, if the sum of the digits of x is odd, then the\n    sign of the number is negative. Otherwise, the sign is positive.\n    For example:\n    >>> reverse_digits(123) == 321\n    >>> reverse_digits(-456) == -654\n    >>> reverse_digits(7) == -7\n    >>> reverse_digits(-8) == 8\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef sum_digits(x):\n    \"\"\"\n    Write a function sum_digits which takes an integer x and returns the sum of\n    its digits.\n    >>> sum_digits(100)\n    1\n    >>> sum_digits(42)\n    6\n    >>> sum_digits(420)\n    6\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(-456)\n    -6\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef count_vowels(s):\n    \"\"\"\n    Write a function count_vowels which takes a string s and returns the number\n    of vowels in s.\n    >>> count_vowels(\"Hello, world!\")\n    3\n    >>> count_vowels(\"Algebra is a beautiful field of study.\")\n    8\n    >>> count_vowels(\"These are so many vowels in this one sentence!\")\n    18\n    >>> count_vowels(\"A is for apple. B is for banana.\")\n    6\n    >>> count_vowels(\"A",
      -2.22265625
    ],
    [
      "return _count_nums(arr, 0)\n\n\ndef _count_nums(arr, count):\n    if not arr:\n        return count\n\n    head = arr[0]\n    tail = arr[1:]\n\n    if head < 0:\n        return _count_nums(tail, count)\n\n    num_digits = get_num_digits(head)\n\n    if num_digits > 1:\n        return _count_nums(tail, count + 1)\n\n    return _count_nums(tail, count)\n\n\ndef get_num_digits(num):\n    count = 0\n    while num:\n        count += 1\n        num //= 10\n    return count\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n\n\nif __name__ == '__main__':\n    test_count_nums()",
      -2.248046875
    ],
    [
      "if len(arr) == 0:\n        return 0\n    else:\n        return count_nums_helper(arr, 0, 0)\n\ndef count_nums_helper(arr, index, count):\n    if index == len(arr):\n        return count\n    else:\n        if sum_digit(arr[index]) > 0:\n            count += 1\n        return count_nums_helper(arr, index + 1, count)\n\ndef sum_digit(num):\n    if num < 0:\n        return sum_digit(abs(num))\n    if num < 10:\n        return num\n    else:\n        return sum_digit(num // 10) + num % 10",
      -2.52734375
    ],
    [
      "count = 0\n    for i in range(len(arr)):\n        if sum(list(map(int, str(abs(arr[i]))))) > 0:\n            count += 1\n    return count\n\n\ndef count_nums_2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(sum(list(map(int, str(abs(num))))) > 0 for num in arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.685546875
    ],
    [
      "# return len([x for x in arr if sum(map(int, str(abs(x)))) > 0])\n    # return len(list(filter(lambda x: sum(map(int, str(abs(x)))) > 0, arr)))\n    # return len([x for x in arr if sum(map(int, str(abs(x)))) > 0])\n    return len([x for x in arr if sum(map(int, str(abs(x)))) > 0])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.791015625
    ],
    [
      "num_of_numbers = 0\n    for i in arr:\n        number = abs(i)\n        sum_of_digits = 0\n        while number > 0:\n            sum_of_digits += number % 10\n            number = number // 10\n        if sum_of_digits > 0:\n            num_of_numbers += 1\n    return num_of_numbers\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    assert count_nums([42, 42, 42]) == 3\n    assert count_nums([1, 2, 3, 4, 5, 6]) == 6\n    assert count_nums([-123, -456, 123, 456]) == 4",
      -3.451171875
    ],
    [
      "# Your code here\n    total_count = 0\n    for num in arr:\n        if sum(map(int, str(num))) > 0:\n            total_count += 1\n    return total_count\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    assert count_nums([0, 0, 0]) == 0\n    assert count_nums([-12345, -23456, 12345, 23456]) == 3\n    assert count_nums([123, 234, 345, 456, 567, 678, 789, 890, 901, 1234, 2345, 3456, 4567, 5678, 6789, 7890, 8901, 9012, 12345, 23456, 34567, 45678, 56789, 67890, 78901, 89012, 90123, 0]) == 28\n\nif __name__ == '__main__':\n    test_count_nums()",
      -3.66796875
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    def is_positive(num):\n        if num == 0:\n            return True\n        elif num < 0:\n            return False\n        else:\n            return True\n\n    def count_nums_rec(arr):\n        if len(arr) == 0:\n            return 0\n        if is_positive(sum([int(i) for i in str(arr[0])])):\n            return 1 + count_nums_rec(arr[1:])\n        else:\n            return count_nums_rec(arr[1:])\n\n    return count_nums_rec(arr)\n\n\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def is_positive(num):\n        if num == 0:\n            return True\n        elif num < 0:\n            return False\n        else:\n            return True\n\n    def count_nums_rec(arr):\n        if len(arr) == 0:\n            return 0\n        if is_positive(sum([int(i) for i in str(arr[0])])):\n            return 1 + count_nums_rec(arr[1:])\n        else:\n            return count_nums_rec(arr[1:])\n\n    return count_nums_rec(arr)\n\n\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number",
      -3.677734375
    ],
    [
      "# return len([x for x in arr if sum([int(i) for i in str(x)]) > 0])\n    count = 0\n    for i in arr:\n        total = 0\n        for j in str(i):\n            total += int(j)\n        if total > 0:\n            count += 1\n    return count\n\n\ndef test_function():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    assert count_nums([4, -5, 4, -5]) == 0\n    assert count_nums([10, 9, -10, 2, 2, -1, -2]) == 3\n    assert count_nums([-123, 100]) == 1\n    assert count_nums([555, 901, -555]) == 3",
      -3.888671875
    ],
    [
      "# [1, 1, 2]\n    # 1, 1, 2\n    # 1, 2\n    # 1, 2, 2\n    # 2, 2\n    # 2\n    # 2, 2, 2\n    # 2, 2, 2, 2\n    # 2, 2, 2, 2, 2\n    # 2, 2, 2, 2, 2, 2\n    # 2, 2, 2, 2, 2, 2, 2\n\n    def count_digits(num):\n        \"\"\"\n        Write a function count_digits which takes a number and returns\n        the number of digits of the number.\n        >>> count_digits(123)\n        3\n        >>> count_digits(12)\n        2\n        >>> count_digits(1)\n        1\n        \"\"\"\n        if num == 0:\n            return 1\n        return 1 + count_digits(num // 10)\n\n    def count_positive_digits(num):\n        \"\"\"\n        Write a function count_positive_digits which takes a number and returns\n        the number of positive digits of the number.\n        >>> count_positive_digits(123)\n        3\n        >>> count_positive_digits(12)\n        2\n        >>> count_positive_digits(1)\n        1\n        >>> count_positive_digits(-1)\n        0\n        \"\"\"\n        if num == 0:\n            return 1\n        elif num > 0:\n            return 1 + count_positive_digits(num // 10)\n        else:\n            return 0 + count_positive_digits(num // 10)\n\n    def count_nums_helper(arr, num, pos_digits):\n        if len(arr) == 0:\n            return num\n        if count_positive_digits(arr[0]) > pos_digits:\n            return 1 + count_nums_helper(arr[1:], num + 1",
      -3.978515625
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    count = 0\n    for i in arr:\n        if sum([int(i) for i in str(abs(i))]) > 0:\n            count += 1\n    return count\n\ndef count_nums_iter(arr):\n    \"\"\"\n    Write a function count_nums_iter which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_iter([]) == 0\n    >>> count_nums_iter([-1, 11, -11]) == 1\n    >>> count_nums_iter([1, 1, 2]) == 3\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for i in arr:\n        if sum([int(i) for i in str(abs(i))]) > 0:\n            count += 1\n    return count",
      -4.09765625
    ],
    [
      "return count_nums_helper(arr, 0)\n\ndef count_nums_helper(arr, count):\n    if len(arr) == 0:\n        return count\n    else:\n        if sum_digits(arr[0]) > 0:\n            count += 1\n        return count_nums_helper(arr[1:], count)\n\ndef sum_digits(num):\n    \"\"\"\n    Write a function sum_digits which takes an integer and returns the sum of its\n    digits.\n    >>> sum_digits(10) # 1 + 0 = 1\n    1\n    >>> sum_digits(42) # 4 + 2 = 6\n    6\n    >>> sum_digits(1337) # 1 + 3 + 3 + 7 = 12\n    12\n    \"\"\"\n    if num < 10:\n        return num\n    else:\n        return sum_digits(num % 10) + sum_digits(num // 10)\n\nprint(count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -5.359375
    ],
    [
      "pass\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    assert count_nums([1, -1, 2, -2]) == 2\n    assert count_nums([0, -1, 1, 0, 0, 0, 0]) == 4\n    assert count_nums([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 5\n    assert count_nums([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == 0\n    assert count_nums([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == 0\n    assert count_nums([-2, -2, -2, -2, -2, -2, -2, -2, -2]) == 0\n\n\nif __name__ == '__main__':\n    test_count_nums()",
      -5.53125
    ],
    [
      "def count_nums_helper(arr, num_so_far):\n        if not arr:\n            return 0 if num_so_far < 0 else 1\n        count = 0\n        num = arr[0]\n        if num > 0:\n            count += count_nums_helper(arr[1:], num_so_far + num)\n        count += count_nums_helper(arr[1:], num_so_far)\n        return count\n    return count_nums_helper(arr, 0)\n\n\ndef test_count_nums():\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3",
      -5.6015625
    ],
    [
      "# Your code here\n    # if not arr:\n    #     return 0\n    # else:\n    #     return len(arr)\n    # return len([x for x in arr if sum([int(d) for d in str(abs(x))]) > 0])\n    # return len(arr) - sum([x for x in arr if sum([int(d) for d in str(abs(x))]) <= 0])\n    # return sum([x for x in arr if sum([int(d) for d in str(abs(x))]) > 0])\n    return sum([x for x in arr if sum([int(d) for d in str(abs(x))]) > 0])\n\nprint(count_nums([1, 1, 2]))\nprint(count_nums([1, 1, 2, -1]))\nprint(count_nums([1, 1, 2, -1, 2]))\nprint(count_nums([1, 1, 2, -1, 2, 11]))\nprint(count_nums([1, 1, 2, -1, 2, 11, 111]))",
      -5.984375
    ],
    [
      "pass\n\n\ndef count_nums_in_range(arr, range):\n    \"\"\"\n    Write a function count_nums_in_range which takes an array of integers and\n    a range and returns the number of elements which has a sum of digits\n    in the range. If a number is negative, then its first signed digit will\n    be negative: e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_in_range([], 2, 4) == 0\n    >>> count_nums_in_range([-1, 11, -11], 2, 4) == 1\n    >>> count_nums_in_range([1, 1, 2], 2, 4) == 2\n    \"\"\"\n    pass\n\n\ndef count_nums_with_digit_sum(arr, digit_sum):\n    \"\"\"\n    Write a function count_nums_with_digit_sum which takes an array of integers\n    and a digit sum and returns the number of elements which has a sum of digits\n    equals to the given sum. If a number is negative, then its first signed digit\n    will be negative: e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_with_digit_sum([], 2) == 0\n    >>> count_nums_with_digit_sum([-1, 11, -11], 2) == 1\n    >>> count_nums_with_digit_sum([1, 1, 2], 2) == 2\n    \"\"\"\n    pass\n\n\ndef count_nums_with_digit_sum_in_range(arr, range):\n    \"\"\"\n    Write a function count_nums_with_digit_sum_in_range which takes an array of\n    integers and a range and returns the number of elements which has a sum of\n    digits in the range. If a number is negative, then its first signed digit\n    will be negative: e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_with_digit_sum_",
      -7.37890625
    ],
    [
      "def count_digits(num):\n        \"\"\"\n        Write a function count_digits which takes an integer and returns\n        the number of digits in it.\n        If a number is negative, then its first signed digit will be negative:\n        e.g. -123 has signed digits -1, 2, and 3.\n        \"\"\"\n        if num == 0:\n            return 1\n        else:\n            return 1 + count_digits(abs(num) // 10)\n\n    def sum_digits(num):\n        \"\"\"\n        Write a function sum_digits which takes an integer and returns\n        the sum of its digits.\n        If a number is negative, then its first signed digit will be negative:\n        e.g. -123 has signed digits -1, 2, and 3.\n        \"\"\"\n        if num == 0:\n            return 0\n        else:\n            return num % 10 + sum_digits(abs(num) // 10)\n\n    return sum([1 for num in arr if sum_digits(num) > 0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -7.5078125
    ],
    [
      "# your code here\n    # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # -10 -9 -8 -7 -6 -5 -4 -3 -2 -1\n    # 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n    # 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n    # -10, -9, -8, -7, -6, -5, -4, -3, -2, -1\n    # 100, 99, 98, 97, 96, 95, 94, 93, 92, 91\n    # -100, -99, -98, -97, -96, -95, -94, -93, -92, -91\n    # 1000, 999, 998, 997, 996, 995, 994, 993, 992, 991\n    # -1000, -999, -998, -997, -996, -995, -994, -993, -992, -991\n    # 10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991\n    # -10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991\n\n    # 1, 11, 111, 1111, 11111\n    # 10",
      -7.53515625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}