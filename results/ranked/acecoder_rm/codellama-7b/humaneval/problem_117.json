{
  "problem": {
    "task_id": "HumanEval/117",
    "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
    "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
    "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n",
    "entry_point": "select_words",
    "docstring": "",
    "problem_id": 117
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def is_consonant(c):\n        return not c in \"aeiouAEIOU\"\n\n    return [word for word in s.split() if sum(map(is_consonant, word)) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\n\ndef select_words2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def is_consonant(c):\n        return not c in \"aeiouAEIOU\"\n\n    return [word for word in s.split() if sum(map(is_consonant, word)) == n]\n\n\nprint(select_words2(\"Mary had a little lamb\", 4))\nprint(select_words2(\"Mary had a little lamb\", 3))\nprint(select_words2(\"simple white space\", 2))\nprint(select_words2(\"Hello world\", 4))\nprint(select_words2(\"Uncle sam\", 3))",
      16.21875
    ],
    [
      "if s == \"\":\n        return []\n    s = s.split()\n    n = int(n)\n    return [word for word in s if len(set(word) - set(\"aeiou\")) == n]\n\n\ndef select_words_v2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if s == \"\":\n        return []\n    s = s.split()\n    n = int(n)\n    return [word for word in s if len(set(word) - set(\"aeiou\")) == n]\n\n\nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))\n    print(select_words_v2(\"Mary had a little lamb\", 4))\n    print(select_words_v2(\"Mary had a little lamb\", 3))\n    print(select_words_v2(\"simple white space\", 2))\n    print(select_words_v2(\"Hello world\", 4))\n    print(select_words_v2(\"Uncle sam\", 3))",
      11.75
    ],
    [
      "# create a dictionary of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    # create a list of words\n    words = s.split()\n    # create a list to hold the results\n    results = []\n    # iterate through the list of words\n    for word in words:\n        # create a list to hold the consonants\n        consonants = []\n        # iterate through the letters in the word\n        for letter in word:\n            # if the letter is not in the vowels list\n            if letter not in vowels:\n                # append the consonant to the consonants list\n                consonants.append(letter)\n        # if the length of the consonants list is equal to the n parameter\n        if len(consonants) == n:\n            # append the word to the results list\n            results.append(word)\n    return results\n\n\nprint(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))  # ==> []\nprint(select_words(\"Hello world\", 4))  # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3))  # ==> [\"Uncle\"]",
      9.4765625
    ],
    [
      "# return [word for word in s.split() if len(word) == n and all(char not in \"aeiou\" for char in word)]\n    # return [word for word in s.split() if len(word) == n and not any(char in \"aeiou\" for char in word)]\n    return [word for word in s.split() if len(word) == n and not word.lower().startswith(\"a\") and not word.lower().startswith(\"e\") and not word.lower().startswith(\"i\") and not word.lower().startswith(\"o\") and not word.lower().startswith(\"u\")]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      8.0625
    ],
    [
      "# s = s.split()\n    # for i in range(len(s)):\n    #     if len(s[i]) == n:\n    #         return s[i]\n    # return []\n\n    result = []\n    for word in s.split():\n        if len(word) == n:\n            result.append(word)\n    return result\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      2.75
    ],
    [
      "# your code here\n    # raise NotImplementedError\n    l = s.split()\n    result = []\n    for word in l:\n        if len(word) == n:\n            result.append(word)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
      2.25
    ],
    [
      "# code goes here\n    #split the string into a list of words\n    word_list = s.split()\n    #list of vowels\n    vowels = \"aeiou\"\n    #list of consonants\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    #create a list of words with exactly n consonants\n    result = []\n    for word in word_list:\n        #count the number of consonants in each word\n        consonant_count = 0\n        for char in word:\n            if char in consonants:\n                consonant_count += 1\n        #add the word to the result list if it has exactly n consonants\n        if consonant_count == n:\n            result.append(word)\n    return result\n    \n#select_words(\"Mary had a little lamb\", 4) # ==> [\"little\"]\n#select_words(\"Mary had a little lamb\", 3) # ==> [\"Mary\", \"lamb\"]\n#select_words(\"simple white space\", 2) # ==> []\n#select_words(\"Hello world\", 4) # ==> [\"world\"]\n#select_words(\"Uncle sam\", 3) # ==> [\"Uncle\"]\n#select_words(\"Mary had a little lamb\", 2) # ==> [\"Mary\", \"little\", \"lamb\"]\n#select_words(\"Mary had a little lamb\", 1) # ==> [\"Mary\", \"little\", \"lamb\", \"a\"]",
      1.208984375
    ],
    [
      "# First, create a list with all the words in s\n    words = s.split()\n    # Now, for each word, check how many consonants it has\n    consonants = [word for word in words if count_consonants(word) == n]\n    return consonants\n\ndef count_consonants(word):\n    \"\"\"Given a word, return the number of consonants in it.\"\"\"\n    # First, create a list with all the letters in word\n    letters = list(word)\n    # Now, count the consonants in word\n    consonants = [letter for letter in letters if letter not in \"aeiou\"]\n    return len(consonants)\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      1.1591796875
    ],
    [
      "# Return a list of words in s with exactly n consonants\n    return [word for word in s.split() if is_consonant(word, n)]\n\ndef is_consonant(word, n):\n    \"\"\"Given a string word and a natural number n, you have been tasked to implement \n    a function that returns True if the word contains exactly n consonants, and False otherwise.\n    Note: you may assume the input word contains only letters.\n    Examples:\n    is_consonant(\"Mary\", 1) ==> True\n    is_consonant(\"little\", 4) ==> False\n    is_consonant(\"little\", 3) ==> True\n    is_consonant(\"\", 3) ==> False\n    is_consonant(\"Hey!\", 1) ==> False\n    is_consonant(\"Hey!\", 3) ==> False\n    is_consonant(\"He\", 1) ==> True\n    is_consonant(\"He\", 2) ==> False\n    is_consonant(\"He\", 0) ==> True\n    \"\"\"\n    # Return whether the word contains exactly n consonants\n    vowels = set(\"aeiou\")\n    return sum(letter not in vowels for letter in word) == n\n\ndef test_is_consonant():\n    assert is_consonant(\"Mary\", 1) == True\n    assert is_consonant(\"little\", 4) == False\n    assert is_consonant(\"little\", 3) == True\n    assert is_consonant(\"\", 3) == False\n    assert is_consonant(\"Hey!\", 1) == False\n    assert is_consonant(\"Hey!\", 3) == False\n    assert is_consonant(\"He\", 1) == True\n    assert is_consonant(\"He\", 2) == False\n    assert is_consonant(\"He\", 0) == True\n\ndef test_select_words():\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) ==",
      1.0556640625
    ],
    [
      "s = s.split()\n    result = []\n    for word in s:\n        if len(list(filter(str.isalpha, word))) == n:\n            result.append(word)\n    return result\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.split()\n    result = []\n    for word in s:\n        if len(list(filter(str.isalpha, word))) == n:\n            result.append(word)\n    return result\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      1.0517578125
    ],
    [
      "# return [w for w in s.split() if len([c for c in w if c.lower() in 'bcdfghjklmnpqrstvwxz']) == n]\n    # return [w for w in s.split() if len([c for c in w if c.lower() not in 'aeiou']) == n]\n    # return [w for w in s.split() if len([c for c in w if c.lower() not in 'aeiou']) == n]\n    # return [w for w in s.split() if len([c for c in w if c.lower() not in 'aeiou']) == n]\n    # return [w for w in s.split() if len([c for c in w if c.lower() not in 'aeiou']) == n]\n    return [w for w in s.split() if len([c for c in w if c.isupper()]) == n]",
      0.80712890625
    ],
    [
      "# your code here\n    # my solution\n    # return [i for i in s.split() if len(i) == n and i.lower().isalpha() and not i.lower().startswith(('a','e','i','o','u'))]\n    \n    # better solution\n    # return [i for i in s.split() if len(i) == n and not i[0].lower() in ('a','e','i','o','u')]\n    \n    # best solution\n    # return [i for i in s.split() if len(i) == n and i[0].isupper()]\n    \n    \n    \nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      0.72998046875
    ],
    [
      "# code goes here\n    # split the string into words\n    words = s.split()\n    # create an empty list to store the words\n    result = []\n    # for each word in the list\n    for word in words:\n        # check if the word has the right number of consonants\n        if count_consonants(word) == n:\n            # add the word to the list\n            result.append(word)\n    # return the list\n    return result\n\n\ndef count_consonants(word):\n    # count the number of consonants in the word\n    count = 0\n    # for each letter in the word\n    for letter in word:\n        # check if the letter is a consonant\n        if letter not in \"aeiouAEIOU\":\n            # if it is then increment the counter\n            count += 1\n    # return the number of consonants\n    return count\n\n\n# _*_ coding: utf-8 _*_\n\n# def select_words(s, n):\n#     \"\"\"Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.\n#     If the string s is empty then the function should return an empty list.\n#     Note: you may assume the input string contains only letters and spaces.\n#     Examples:\n#     select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n#     select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n#     select_words(\"simple white space\", 2) ==> []\n#     select_words(\"Hello world\", 4) ==> [\"world\"]\n#     select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#     \"\"\"\n\n#     # code goes here\n#     # split the string into words\n#     words = s.split()\n#     # create an empty list to store the words\n#     result = []\n#     # for each word in the list\n#     for word in words:\n#         # check if the word has the right",
      0.6767578125
    ],
    [
      "# create a list of all the words in the string s\n    word_list = s.split()\n    # create an empty list to hold the words that have n consonants\n    consonant_list = []\n    # iterate over the words in word_list\n    for word in word_list:\n        # create a counter to count the number of consonants in the word\n        consonant_count = 0\n        # iterate over the letters in the word\n        for letter in word:\n            # check if the letter is a consonant\n            if letter.lower() not in \"aeiou\":\n                # if it is a consonant, add it to the counter\n                consonant_count += 1\n        # if the word has n consonants, add it to the consonant_list\n        if consonant_count == n:\n            consonant_list.append(word)\n    # return the consonant_list\n    return consonant_list\n\n# tests\n\n# >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\n# >>> select_words(\"Mary had a little lamb\", 5)\n# []\n# >>> select_words(\"\", 4)\n# []",
      0.60400390625
    ],
    [
      "# first we split the string into words\n    words = s.split()\n    # then we loop over the words and count the consonants\n    return [w for w in words if len([c for c in w if c not in 'aeiou']) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      0.5419921875
    ],
    [
      "# Your code here\n    # first we need to split the string into words\n    # we can do that by using the split() function\n    # if the string is empty, we return an empty list\n    if s == '':\n        return []\n    # if the string is not empty, we split the string into words\n    # we can do that by using the split() function\n    # we then need to check if each word has exactly n consonants\n    # we can do that by using the len() function\n    # if the word has exactly n consonants, we append it to a list\n    # we then return the list\n    word_list = []\n    for word in s.split():\n        if len(word) == n:\n            word_list.append(word)\n    return word_list\n\n\n# print(select_words(\"Mary had a little lamb\", 4))\n# print(select_words(\"Mary had a little lamb\", 3))\n# print(select_words(\"simple white space\", 2))\n# print(select_words(\"Hello world\", 4))\n# print(select_words(\"Uncle sam\", 3))\n# print(select_words(\"\", 4))",
      0.352783203125
    ],
    [
      "# print(\"In select_words s =\", s)\n    # print(\"In select_words n =\", n)\n    vowels = ['a','e','i','o','u']\n    word_list = s.split()\n    # print(\"In select_words word_list =\", word_list)\n    # print(\"In select_words len(word_list) =\", len(word_list))\n    selected_list = []\n    for word in word_list:\n        # print(\"In select_words word =\", word)\n        if len(word) == n:\n            # print(\"In select_words word =\", word)\n            for letter in word:\n                # print(\"In select_words letter =\", letter)\n                if letter in vowels:\n                    # print(\"In select_words letter =\", letter)\n                    break\n            else:\n                # print(\"In select_words word =\", word)\n                selected_list.append(word)\n    return selected_list\n\n\ndef test_select_words():\n\n    input_string = \"Mary had a little lamb\"\n    expected_result = [\"little\"]\n    assert select_words(input_string, 4) == expected_result, \"Error in select_words\"\n\n    input_string = \"Mary had a little lamb\"\n    expected_result = [\"Mary\", \"lamb\"]\n    assert select_words(input_string, 3) == expected_result, \"Error in select_words\"\n\n    input_string = \"simple white space\"\n    expected_result = []\n    assert select_words(input_string, 2) == expected_result, \"Error in select_words\"\n\n    input_string = \"Hello world\"\n    expected_result = [\"world\"]\n    assert select_words(input_string, 4) == expected_result, \"Error in select_words\"\n\n    input_string = \"Uncle sam\"\n    expected_result = [\"Uncle\"]\n    assert select_words(input_string, 3) == expected_result, \"Error in select_words\"\n\n    print(\"Test passed.\")\n\n\ntest_select_words()",
      0.204833984375
    ],
    [
      "# return [i for i in s.split() if len(i) == n]\n    return [i for i in s.split() if len(i) == n and i[0] not in \"aeiou\"]\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(select_words(\"Mary had a little lamb\", 4))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      0.193359375
    ],
    [
      "#return [w for w in s.split() if len(w) == n and w.isalpha() and not w.islower()]\n    #return [w for w in s.split() if len(w) == n and w.isalpha() and w.isupper()]\n    return [w for w in s.split() if len(w) == n and w.isalpha() and w.isupper()]\n    #return [w for w in s.split() if len(w) == n and w.isalpha() and w.istitle()]\n    #return [w for w in s.split() if len(w) == n and w.isalpha() and w.isupper() and w.istitle()]\n    #return [w for w in s.split() if len(w) == n and w.isalpha() and w.isupper() and w.islower()]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return [w for w in s.split() if len(w) ==",
      0.1336669921875
    ],
    [
      "# Step 1: initialize variables\n    result = []\n    # Step 2: traverse the string s\n    for i in range(len(s)):\n        word = \"\"\n        for j in range(i, len(s)):\n            if s[j] == \" \":\n                break\n            if s[j].isalpha():\n                word += s[j]\n        # Step 3: if the length of the word is equal to n, then append the word to the result\n        if len(word) == n:\n            result.append(word)\n    # Step 4: return the result\n    return result\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      0.0156707763671875
    ],
    [
      "if n > len(s) or s == '':\n        return []\n    else:\n        return [word for word in s.split() if len(word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.1982421875
    ],
    [
      "#code here\n    if s == \"\":\n        return []\n    else:\n        #s = s.lower()\n        l = s.split()\n        res = []\n        for i in range(len(l)):\n            count = 0\n            for j in range(len(l[i])):\n                if l[i][j] == \"a\" or l[i][j] == \"e\" or l[i][j] == \"i\" or l[i][j] == \"o\" or l[i][j] == \"u\":\n                    continue\n                else:\n                    count += 1\n            if count == n:\n                res.append(l[i])\n        return res\n\n\n\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"MBTI personality type\"\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"MBTI personality type\"\n    assert select_words(\"simple white space\", 2) == [], \"MBTI personality type\"\n    assert select_words(\"Hello world\", 4) == [\"world\"], \"MBTI personality type\"\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"MBTI personality type\"",
      -0.273681640625
    ],
    [
      "# Your code here\n    s = s.split()\n    s_new = [i for i in s if len(i) == n]\n    return s_new\n\ndef select_words_2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    s = s.split()\n    s_new = [i for i in s if len(i) == n]\n    return s_new\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.49169921875
    ],
    [
      "# your code here\n    # break the string into a list of words\n    s_list = s.split()\n    # initialize a new list to hold the words with n consonants\n    n_consonant_words = []\n    # iterate through the list of words\n    for word in s_list:\n        # initialize a counter to keep track of the number of consonants in each word\n        consonant_count = 0\n        # iterate through the word and check if each character is a consonant\n        for char in word:\n            if char not in 'aeiou':\n                consonant_count += 1\n            # if the word has n consonants, append the word to the new list\n            if consonant_count == n:\n                n_consonant_words.append(word)\n    return n_consonant_words\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.50927734375
    ],
    [
      "# s = s.split(\" \")\n    # n = int(n)\n    # arr = []\n    # for word in s:\n    #     if len(word) == n:\n    #         arr.append(word)\n    # return arr\n    if s == \"\":\n        return []\n    s = s.split(\" \")\n    n = int(n)\n    arr = []\n    for word in s:\n        if len([i for i in word if i in \"aeiou\"]) == n:\n            arr.append(word)\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
      -0.50927734375
    ],
    [
      "# s = s.split()\n    # n_list = []\n    # for word in s:\n    #     if len(word) == n:\n    #         n_list.append(word)\n    # return n_list\n\n    # return [word for word in s.split() if len(word) == n]\n\n    return [word for word in s.split() if len(word) == n]\n\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.51708984375
    ],
    [
      "words = s.split()\n    return [word for word in words if len(word) == n and word.lower().isalpha()]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.65283203125
    ],
    [
      "if len(s) == 0:\n        return []\n    \n    s = s.split(\" \")\n    result = []\n    for word in s:\n        vowels = 'aeiou'\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        counter = 0\n        for c in word:\n            if c in consonants:\n                counter += 1\n            if counter == n:\n                result.append(word)\n                break\n    return result\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.85693359375
    ],
    [
      "return [s for s in s.split(\" \") if len(s) == n and s[0] not in \"aeiou\"]",
      -0.85693359375
    ],
    [
      "words = s.split(\" \")\n    result = []\n    for word in words:\n        if len([c for c in word if c.lower() not in \"aeiou\"]) == n:\n            result.append(word)\n    return result",
      -0.85693359375
    ],
    [
      "# write your code here\n    list_of_words = s.split(\" \")\n    list_of_words_with_n_consonants = []\n    for word in list_of_words:\n        consonant_count = 0\n        for letter in word:\n            if letter != \"a\" and letter != \"e\" and letter != \"i\" and letter != \"o\" and letter != \"u\":\n                consonant_count += 1\n\n        if consonant_count == n:\n            list_of_words_with_n_consonants.append(word)\n\n    return list_of_words_with_n_consonants\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.85693359375
    ],
    [
      "if s == \"\":\n        return []\n    else:\n        new_list = s.split()\n        return [i for i in new_list if len(i) == n and i[0] not in \"aeiou\"]\n\n\nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
      -0.85693359375
    ],
    [
      "# your code here\n    # split the string into words\n    words = s.split()\n    # create an empty list to store the selected words\n    selected_words = []\n    # loop over the words\n    for word in words:\n        # get the number of consonants in the word\n        num_consonants = len([letter for letter in word if letter not in 'aeiou'])\n        # if the number of consonants equals the number passed in, add the word to the list\n        if num_consonants == n:\n            selected_words.append(word)\n    # return the list of selected words\n    return selected_words",
      -0.85693359375
    ],
    [
      "# Your code here\n    # check for empty string\n    if s == \"\":\n        return []\n\n    # split string into a list of words\n    s = s.split()\n\n    # check if the word contains n consonants\n    # if yes, append the word to the list\n    # else, do nothing\n    l = []\n    for word in s:\n        if len(word) == n:\n            l.append(word)\n\n    return l\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.85693359375
    ],
    [
      "if not s:\n        return []\n    return [w for w in s.split() if len([c for c in w if c.lower() in \"bcdfghjklmnpqrstvwxyz\"]) == n]\n\n\nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
      -0.85693359375
    ],
    [
      "# My solution\n    lst = []\n    for i in s.split():\n        if len(i) == n and i.isalpha():\n            lst.append(i)\n    return lst\n\n    # Clever solution\n    # return [w for w in s.split() if len(w) == n and w.isalpha()]",
      -0.85693359375
    ],
    [
      "# code goes here\n    # check for edge cases\n    if n <= 0:\n        return []\n    if s == '':\n        return []\n    # split string into list of words\n    words = s.split()\n    # create empty list to store output\n    output = []\n    # loop through words and check if length of word is n\n    for word in words:\n        if len(word) == n:\n            output.append(word)\n    return output\n\n# Alternative solutions\n# def select_words(s, n):\n#     return [w for w in s.split() if len(w) == n]\n\n# def select_words(s, n):\n#     return filter(lambda x: len(x) == n, s.split())",
      -0.85693359375
    ],
    [
      "return [w for w in s.split() if len(w) == n and w == \"\".join([c for c in w if c not in \"aeiou\"])]\n\n\ndef select_words2(s, n):\n    return [w for w in s.split() if len(w) == n and not any(c in \"aeiou\" for c in w)]\n\n\ndef select_words3(s, n):\n    return [w for w in s.split() if len(w) == n and not any(c.lower() in \"aeiou\" for c in w)]",
      -0.85693359375
    ],
    [
      "if s == '':\n        return []\n    else:\n        return [i for i in s.split() if len(i) == n and i.isalpha()]",
      -0.85693359375
    ],
    [
      "s = s.split()\n    res = []\n    for i in s:\n        count = 0\n        for j in i:\n            if j.isalpha() and j not in \"aeiouAEIOU\":\n                count += 1\n        if count == n:\n            res.append(i)\n    return res\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.85791015625
    ],
    [
      "# Your code here\n    s = s.split()\n    res = []\n    for word in s:\n        if word.isalpha() and len(word) == n:\n            res.append(word)\n    return res\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.85791015625
    ],
    [
      "if s == \"\":\n        return []\n\n    s = s.split(\" \")\n    # print(s)\n    lst = []\n\n    for i in s:\n        count = 0\n        for j in i:\n            if j in \"aeiou\":\n                count += 1\n            if count == n:\n                lst.append(i)\n                break\n    return lst\n\n\nprint(select_words(\"Mary had a little lamb\", 4))",
      -0.85791015625
    ],
    [
      "# code goes here\n    new_string = s.split()\n    new_string = list(filter(lambda x: len(x) == n, new_string))\n    return new_string\n\n\n# select_words(\"Mary had a little lamb\", 4)\n# select_words(\"Mary had a little lamb\", 3)\n# select_words(\"simple white space\", 2)\n# select_words(\"Hello world\", 4)\n# select_words(\"Uncle sam\", 3)\n\n# Explanation:\n# The first line splits the string into a list of words.\n# The second line filters out the words that have a number of letters equal to n.\n# The last line joins the filtered words into a single string.",
      -0.85791015625
    ],
    [
      "if n == 0:\n        return []\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        vowels = 'aeiou'\n        if len([c for c in word if c not in vowels]) == n:\n            result.append(word)\n\n    return result",
      -0.85791015625
    ],
    [
      "pass",
      -0.85791015625
    ],
    [
      "if s == \"\":\n        return []\n    s_split = s.split()\n    word_list = []\n    for word in s_split:\n        if len(word) == n:\n            word_list.append(word)\n    return word_list",
      -0.85791015625
    ],
    [
      "# s.split() returns a list of words in s, separated by spaces\n    word_list = s.split()\n\n    # list comprehension to filter for words with n consonants\n    filtered_list = [word for word in word_list if word.count(\"a\") + word.count(\"e\") + word.count(\"i\") + word.count(\"o\") + word.count(\"u\") == n]\n\n    return filtered_list",
      -0.8583984375
    ],
    [
      "#s = s.split(\" \")\n    count = 0\n    lst = []\n    for i in s.split(\" \"):\n        if len(i) == n:\n            lst.append(i)\n    return lst\n\n\ndef select_words(s, n):\n    return [word for word in s.split() if len(word) == n]",
      -0.8583984375
    ],
    [
      "# TODO: Write your solution here\n    return list(filter(lambda x: len(list(filter(lambda y: y in \"aeiou\", x))) == n, s.split(\" \")))\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.8583984375
    ],
    [
      "# return [word for word in s.split() if len([c for c in word if c.lower() not in 'aeiou']) == n]\n    # return [word for word in s.split() if len(word) - len([c for c in word if c.lower() in 'aeiou']) == n]\n    return [word for word in s.split() if sum(c.isalpha() and c.lower() not in 'aeiou' for c in word) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.8583984375
    ],
    [
      "s = s.split()\n    count = []\n    for word in s:\n        consonant_count = 0\n        for letter in word:\n            if letter.isalpha() and letter != \"a\" and letter != \"e\" and letter != \"i\" and letter != \"o\" and letter != \"u\" and letter != \"y\":\n                consonant_count += 1\n        count.append(consonant_count)\n    count = [i for i, x in enumerate(count) if x == n]\n    return [s[i] for i in count]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.8583984375
    ],
    [
      "if s == \"\":\n        return []\n    else:\n        s = s.split()\n        x = []\n        for word in s:\n            if len(word) == n:\n                x.append(word)\n        return x",
      -0.8583984375
    ],
    [
      "# TODO: Write your solution here\n    # return []\n    # word_list = []\n    # for word in s.split(\" \"):\n    #     if word.isalpha() and len(word) == n:\n    #         word_list.append(word)\n    # return word_list\n    return [word for word in s.split(\" \") if word.isalpha() and len(word) == n]\n\nif __name__ == '__main__':\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
      -0.8583984375
    ],
    [
      "# return [i for i in s.split() if len(i) == n and not i[0] in \"aeiouAEIOU\"]\n    # return [i for i in s.split() if len([j for j in i if not j in \"aeiouAEIOU\"]) == n]\n    return [i for i in s.split() if sum(1 for c in i if c in \"aeiouAEIOU\") == n]",
      -0.8583984375
    ],
    [
      "words = s.split()\n    selected_words = []\n    for word in words:\n        if len(word) == n:\n            selected_words.append(word)\n    return selected_words\n\ndef test_select_words():\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    print(\"All test cases passed.\")\n\nif __name__ == '__main__':\n    test_select_words()",
      -0.8583984375
    ],
    [
      "# your code here\n\n    # s = s.split()\n    # l = []\n    # for i in s:\n    #     if len(i) == n:\n    #         l.append(i)\n    # return l\n\n    # s = s.split()\n    # return [word for word in s if len(word) == n]\n\n    s = s.split()\n    return [word for word in s if len(word) == n]",
      -0.8583984375
    ],
    [
      "if s == '':\n        return []\n    else:\n        return [word for word in s.split() if len(word) == n and word[0].lower() not in 'aeiou']\n\ndef select_words2(s, n):\n    return [word for word in s.split() if len(word) == n and word[0].lower() not in 'aeiou']",
      -0.8583984375
    ],
    [
      "if not s:\n        return []\n    return [word for word in s.split() if len(word) == n]\n\n\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 4))\n\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"Mary had a little lamb\", 3))\n\n# select_words(\"simple white space\", 2) ==> []\nprint(select_words(\"simple white space\", 2))\n\n# select_words(\"Hello world\", 4) ==> [\"world\"]\nprint(select_words(\"Hello world\", 4))\n\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nprint(select_words(\"Uncle sam\", 3))",
      -0.8583984375
    ],
    [
      "if s == \"\":\n        return []\n    else:\n        return [word for word in s.split() if len(word) == n and word[0] not in \"aeiou\"]\n\n\ndef test_select_words():\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    assert select_words(\"Hello world\", 5) == []\n    assert select_words(\"\", 4) == []",
      -0.8583984375
    ],
    [
      "s = s.split()\n    return [word for word in s if len([c for c in word if c.lower() not in 'aeiou']) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.8583984375
    ],
    [
      "if s == \"\":\n        return []\n    if n > len(s) - 1:\n        return []\n    if n == 0:\n        return [\"\"]\n    if n == 1:\n        return [s]\n    if n == len(s):\n        return [s]\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        if len(word) == n:\n            result.append(word)\n    \n    return result\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.8583984375
    ],
    [
      "# your code here\n    string_list = s.split()\n    print(string_list)\n    return_list = []\n    for string in string_list:\n        if len(string) == n:\n            return_list.append(string)\n    return return_list\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.85888671875
    ],
    [
      "# print(s)\n    # print(n)\n    if s == \"\":\n        return []\n    if n == 0:\n        return [s]\n    else:\n        s = s.split(\" \")\n        # print(s)\n        new_list = []\n        for word in s:\n            if len(word) == n:\n                new_list.append(word)\n        return new_list\n\n\nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
      -0.85888671875
    ],
    [
      "result = []\n    for word in s.split():\n        if len(set(word) & set(\"aeiou\")) == n:\n            result.append(word)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
      -0.85888671875
    ],
    [
      "pass",
      -0.86083984375
    ],
    [
      "if len(s) == 0:\n        return []\n    s = s.split()\n    s_list = []\n    for i in s:\n        if len(i) == n:\n            s_list.append(i)\n    return s_list\n\n\n# Alternative Solutions\ndef select_words(s, n):\n    return [word for word in s.split() if len(word) == n]\n\n\ndef select_words(s, n):\n    return filter(lambda word: len(word) == n, s.split())",
      -0.86083984375
    ],
    [
      "# TODO: Write your solution here\n    # check for empty string\n    if len(s) == 0:\n        return []\n    # split string into list of words\n    words = s.split()\n    # create list of words with correct number of consonants\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    correct_words = []\n    for word in words:\n        if len(word) == len(set(word) & set(consonants)):\n            correct_words.append(word)\n    # return list of words with correct number of consonants\n    return correct_words\n\nprint(select_words(\"Mary had a little lamb\", 4)) # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3)) # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2)) # ==> []\nprint(select_words(\"Hello world\", 4)) # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3)) # ==> [\"Uncle\"]",
      -0.8916015625
    ],
    [
      "# Create a list of all words in s\n    words = s.split()\n    # Create a list of all words in s that have exactly n consonants\n    result = []\n    for word in words:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        # Count the number of consonants in each word\n        consonant_count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                consonant_count += 1\n        # If the number of consonants in the word is exactly n, add the word to the result\n        if consonant_count == n:\n            result.append(word)\n    return result\n\n\ndef test_select_words():\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
      -0.92822265625
    ],
    [
      "if s == \"\":\n        return []\n    # split string into list of words\n    words = s.split()\n    # list of words with n consonants\n    output_words = []\n    # loop through each word in the list\n    for word in words:\n        # count number of consonants in the word\n        consonants = 0\n        for char in word:\n            # if the char is not a vowel, add to consonant count\n            if char not in \"aeiou\":\n                consonants += 1\n        # if the word has exactly n consonants, add to output\n        if consonants == n:\n            output_words.append(word)\n    return output_words\n\n\nprint(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))  # ==> []\nprint(select_words(\"Hello world\", 4))  # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3))  # ==> [\"Uncle\"]",
      -0.95458984375
    ],
    [
      "# 1. determine the words that are of the correct length\n    # 2. determine the consonants in the word\n    # 3. return the words that match the consonant count\n\n    # 1. determine the words that are of the correct length\n    words = s.split(\" \")\n\n    # 2. determine the consonants in the word\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    correct_word_list = []\n\n    for word in words:\n        if len(word) == n:\n            correct_word_list.append(word)\n\n    # 3. return the words that match the consonant count\n    return [word for word in correct_word_list if all(c in consonants for c in word)]\n\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -0.99658203125
    ],
    [
      "if s == \"\":\n        return []\n    else:\n        s = s.split()\n        word_list = []\n        for i in s:\n            vowels = \"aeiou\"\n            count = 0\n            for j in i:\n                if j.lower() in vowels:\n                    count += 1\n            if count == n:\n                word_list.append(i)\n        return word_list\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -1.0546875
    ],
    [
      "if s == \"\":\n        return []\n    words = s.split()\n    words_with_n_consonants = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.lower() not in \"aeiou\":\n                consonants += 1\n            if consonants == n:\n                words_with_n_consonants.append(word)\n                break\n    return words_with_n_consonants",
      -1.05859375
    ],
    [
      "# Your code here\n    word_list = s.split()\n    return [word for word in word_list if word.lower().isalpha() and len(word) == n]\n\n\ndef select_words_v2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    word_list = s.split()\n    return [word for word in word_list if len(filter_letters(word.lower())) == n]\n\n\ndef filter_letters(word):\n    \"\"\"Helper function to filter out the consonants from a word.\n    >>> filter_letters(\"Mary\")\n    ['M', 'y']\n    >>> filter_letters(\"little\")\n    ['l', 't', 'l']\n    >>> filter_letters(\"white\")\n    ['w', 'h', 'e']\n    >>> filter_letters(\"\")\n    []\n    \"\"\"\n    vowels = \"aeiou\"\n    return [letter for letter in word if letter.lower() not in vowels]\n\n\ndef select_words_v3(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function",
      -1.1826171875
    ],
    [
      "# split the string into words\n    words = s.split()\n\n    # filter the words based on number of consonants\n    return [word for word in words if len(word) - len(word.replace(\"a\",\"\").replace(\"e\",\"\").replace(\"i\",\"\").replace(\"o\",\"\").replace(\"u\",\"\").replace(\"y\",\"\")) == n]\n\n\ndef select_words2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # split the string into words\n    words = s.split()\n\n    # filter the words based on number of consonants\n    return [word for word in words if len(word) - len(word.replace(\"a\",\"\").replace(\"e\",\"\").replace(\"i\",\"\").replace(\"o\",\"\").replace(\"u\",\"\").replace(\"y\",\"\")) == n]\n\n\ndef select_words3(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little",
      -1.28125
    ],
    [
      "# s = s.replace(' ', '')\n    # s = s.split()\n    # # print(s)\n    # result = []\n    # for word in s:\n    #     if len(word) == n:\n    #         result.append(word)\n    # return result\n\n    # return [word for word in s.split() if len(word) == n]\n\n    # return [word for word in s.split() if len(word) == n]\n    # return list(filter(lambda word: len(word) == n, s.split()))\n\n    return [word for word in s.split() if len(word) == n]",
      -1.3583984375
    ],
    [
      "def is_vowel(letter):\n        \"\"\"\n        >>> is_vowel('a')\n        True\n        >>> is_vowel('e')\n        True\n        >>> is_vowel('i')\n        True\n        >>> is_vowel('o')\n        True\n        >>> is_vowel('u')\n        True\n        >>> is_vowel('y')\n        True\n        >>> is_vowel('A')\n        True\n        >>> is_vowel('E')\n        True\n        >>> is_vowel('I')\n        True\n        >>> is_vowel('O')\n        True\n        >>> is_vowel('U')\n        True\n        >>> is_vowel('Y')\n        True\n        >>> is_vowel('c')\n        False\n        >>> is_vowel('z')\n        False\n        >>> is_vowel(' ')\n        False\n        \"\"\"\n        return letter.lower() in \"aeiouy\"\n\n    if not s:\n        return []\n    if not n:\n        return [s]\n\n    result = []\n    for word in s.split():\n        if len(list(filter(is_vowel, word))) == n:\n            result.append(word)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.513671875
    ],
    [
      "# 1) Create a list of consonants\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    # 2) Create a list of words\n    word_list = s.split()\n    # 3) Create an empty list for selected words\n    selected_words = []\n    # 4) Iterate through each word in word_list\n    for word in word_list:\n        # 5) Iterate through each letter in the word\n        for letter in word:\n            # 6) If the letter is not in consonants, add the word to the selected words\n            if letter.lower() in consonants:\n                continue\n            else:\n                selected_words.append(word)\n                break\n    # 7) Return the list of selected words\n    return selected_words\n\ndef select_words_2(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxz'\n    return [w for w in s.split() if len(set(w.lower()) - set(consonants)) == n]",
      -1.6572265625
    ],
    [
      "if s == \"\":\n        return []\n    else:\n        word_list = s.split()\n        result = []\n        for word in word_list:\n            count = 0\n            for letter in word:\n                if letter.lower() in \"aeiou\":\n                    count += 1\n            if count == n:\n                result.append(word)\n        return result\n\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -1.71484375
    ],
    [
      "# my solution\n    def is_vowel(letter):\n        return letter in ['a', 'e', 'i', 'o', 'u']\n    words = s.split()\n    consonants = [word for word in words if len([l for l in word if not is_vowel(l)]) == n]\n    return consonants\n\n    # Tips:\n    # If you need to check if a character is a vowel, you can use is_vowel(l)\n    # You can use a list comprehension to check if all the letters in a word are vowels\n    # You can use a list comprehension to check if all the letters in a word are consonants\n    # You can use a list comprehension to check if any of the letters in a word are vowels\n    # You can use a list comprehension to check if any of the letters in a word are consonants\n    # You can use a list comprehension to check if any of the letters in a word are a certain letter\n\n    # Good solution\n    def is_vowel(letter):\n        return letter in ['a', 'e', 'i', 'o', 'u']\n\n    def has_consonants(word, n):\n        return n == len([l for l in word if not is_vowel(l)])\n\n    def select_words(s, n):\n        words = s.split()\n        return [word for word in words if has_consonants(word, n)]\n\n    # Good solution\n    def is_vowel(letter):\n        return letter in ['a', 'e', 'i', 'o', 'u']\n\n    def has_consonants(word, n):\n        return n == len([l for l in word if not is_vowel(l)])\n\n    def select_words(s, n):\n        words = s.split()\n        return [word for word in words if has_consonants(word, n)]\n\n    # Best solution\n    def is_vowel(letter):\n        return letter in ['a', 'e', 'i', 'o', 'u']\n\n    def select_words(s, n):\n        words = s.split()",
      -1.791015625
    ],
    [
      "# result = []\n    # # 1. Remove all spaces from the string\n    # s = s.replace(\" \", \"\")\n    # # 2. Find all words in the string\n    # words = s.split()\n    # # 3. Loop through the words and count the consonants in each\n    # for word in words:\n    #     count = 0\n    #     for letter in word:\n    #         if letter.lower() not in \"aeiou\":\n    #             count += 1\n    #     # 4. If the consonant count is correct, add it to the result list\n    #     if count == n:\n    #         result.append(word)\n    # return result\n    \n    # return list(filter(lambda word: sum(1 for letter in word if letter.lower() not in \"aeiou\") == n, s.replace(\" \", \"\").split()))\n    return list(filter(lambda word: sum(1 for letter in word if letter.lower() not in \"aeiou\") == n, s.split()))\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -1.990234375
    ],
    [
      "# TODO: Write your solution here\n    # print(\"s:\", s)\n    # print(\"n:\", n)\n\n    # split s into a list of strings\n    # print(s.split())\n    word_list = s.split()\n    # print(\"word_list:\", word_list)\n\n    # return a list of words in word_list that have exactly n consonants\n    return [word for word in word_list if word_has_n_consonants(word, n)]\n\ndef word_has_n_consonants(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns True if the string s has exactly n consonants, \n    False otherwise.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    word_has_n_consonants(\"little\", 4) ==> False\n    word_has_n_consonants(\"little\", 3) ==> True\n    word_has_n_consonants(\"Mary\", 3) ==> True\n    word_has_n_consonants(\"simple white space\", 2) ==> False\n    \"\"\"\n    # TODO: Write your solution here\n    # print(\"s:\", s)\n    # print(\"n:\", n)\n\n    # split s into a list of letters\n    # print(\"s.split():\", s.split())\n    # print(\"list(s):\", list(s))\n\n    # return True if the string s has exactly n consonants, False otherwise\n    return n == len([letter for letter in list(s) if letter not in \"aeiou\"])\n\n\ndef test_select_words():\n    print(\"test_select_words() results:\")\n    print(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\n    print(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\n    print(select_words(\"simple white space\", 2))  # ==> []\n    print(select_words(\"Hello world\", 4))  # ==>",
      -2.01953125
    ],
    [
      "# Implement your function here.\n    # if s == \"\":\n    #     return []\n    # elif len(s.split()) == 0:\n    #     return []\n    # else:\n    #     # s = s.lower()\n    #     # l = []\n    #     # for i in s.split():\n    #     #     if len(i) == n:\n    #     #         l.append(i)\n    #     # return l\n    # return [i for i in s.split() if len(i) == n]\n    return [i for i in s.split() if len(i) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -2.2109375
    ],
    [
      "# your code here\n    # check for empty string\n    if not s:\n        return []\n\n    # split the string into a list of words\n    words = s.split()\n\n    # initialize a counter variable\n    counter = 0\n\n    # initialize an empty list\n    result = []\n\n    # loop through each word\n    for word in words:\n\n        # check for vowels in the word\n        if \"a\" not in word and \"e\" not in word and \"i\" not in word and \"o\" not in word and \"u\" not in word:\n            # increment the counter\n            counter += 1\n            # append the word to the list\n            result.append(word)\n            # check if the counter is equal to the number\n            if counter == n:\n                # break out of the loop\n                break\n\n    # return the result\n    return result\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -2.228515625
    ],
    [
      "# create list of words\n    words = s.split()\n    # create list of consonants\n    consonants = ['q','w','r','t','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m']\n    # create list of vowels\n    vowels = ['a','e','i','o','u']\n    # create empty list to store consonants\n    consonant_list = []\n    # create empty list to store words containing 3 consonants\n    word_list = []\n    # loop through words\n    for word in words:\n        # loop through letters in word\n        for letter in word:\n            # if letter is not a vowel and not a space, append to consonant list\n            if letter not in vowels and letter not in consonants:\n                consonant_list.append(letter)\n        # if length of consonant list = n, append word to word list\n        if len(consonant_list) == n:\n            word_list.append(word)\n        # clear consonant list for next word\n        consonant_list = []\n    return word_list\n\n# print(select_words(\"Mary had a little lamb\", 4))\n# print(select_words(\"Mary had a little lamb\", 3))\n# print(select_words(\"simple white space\", 2))\n# print(select_words(\"Hello world\", 4))\n# print(select_words(\"Uncle sam\", 3))",
      -2.75390625
    ],
    [
      "#create a list of all the words in the sentence\n    word_list = s.split()\n\n    #create a list to store the words with correct number of letters\n    words_with_correct_num_letters = []\n\n    #loop through the words in the list and check if they have the correct number of letters\n    for word in word_list:\n        num_consonants = 0\n        for letter in word:\n            if letter not in 'aeiou':\n                num_consonants += 1\n        if num_consonants == n:\n            words_with_correct_num_letters.append(word)\n\n    return words_with_correct_num_letters\n\ndef select_words2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    #create a list of all the words in the sentence\n    word_list = s.split()\n\n    #create a list to store the words with correct number of letters\n    words_with_correct_num_letters = []\n\n    #loop through the words in the list and check if they have the correct number of letters\n    for word in word_list:\n        num_consonants = 0\n        for letter in word:\n            if letter not in 'aeiou':\n                num_consonants += 1\n        if num_consonants == n:\n            words_with_correct_num_let",
      -2.93359375
    ],
    [
      "# 1) Clean up the string\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n\n    # 2) Split the string into a list of words\n    words = s.split()\n\n    # 3) Create a list of words that have the correct number of consonants\n    result = []\n    for word in words:\n        if len(word) == n and word.lower().count(\"a\") == 0 and word.lower().count(\"e\") == 0 and word.lower().count(\"i\") == 0 and word.lower().count(\"o\") == 0 and word.lower().count(\"u\") == 0:\n            result.append(word)\n\n    return result\n\n\n# TESTS\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\nassert select_words(\"A is for apple\", 1) == [\"A\", \"a\", \"is\"]",
      -3.501953125
    ],
    [
      "if s == \"\":\n        return []\n    if n < 0:\n        return []\n    if n == 0:\n        return [\"\"]\n    if s.count(\" \") == 0:\n        return []\n    if s.count(\" \") == 1:\n        return []\n    if n == 1:\n        return [s.split()[0]]\n    if n == 2:\n        return [s.split()[1]]\n    return [s.split()[i] for i in range(len(s.split())) if len(s.split()[i]) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -3.794921875
    ],
    [
      "# Your code here\n    if n == 0:\n        return []\n    elif n == 1:\n        return list(filter(lambda x: x[-1] != 'a' and x[-1] != 'e' and x[-1] != 'i' and x[-1] != 'o' and x[-1] != 'u', s.split(' ')))\n    else:\n        return list(filter(lambda x: x[-1] != 'a' and x[-1] != 'e' and x[-1] != 'i' and x[-1] != 'o' and x[-1] != 'u' and x[0] != 'a' and x[0] != 'e' and x[0] != 'i' and x[0] != 'o' and x[0] != 'u', s.split(' ')))\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -3.82421875
    ],
    [
      "# your code here\n    return [word for word in s.split() if len(word) == n and word.lower().isalpha() and word.islower()]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # your code here\n    return [word for word in s.split() if len(word) == n and word.lower().isalpha() and word.islower()]\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
      -3.912109375
    ],
    [
      "# s = s.replace(' ', '')\n    # words = s.split()\n    # consonants = ['q', 'w', 'r', 't', 'p', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm']\n    # list_of_words = []\n    # for word in words:\n    #     counter = 0\n    #     for letter in word:\n    #         if letter in consonants:\n    #             counter += 1\n    #         if counter == n:\n    #             list_of_words.append(word)\n    # return list_of_words\n    #\n    # s = s.replace(' ', '')\n    # words = s.split()\n    # consonants = ['q', 'w', 'r', 't', 'p', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm']\n    # list_of_words = []\n    # for word in words:\n    #     counter = 0\n    #     for letter in word:\n    #         if letter in consonants:\n    #             counter += 1\n    #         if counter == n:\n    #             list_of_words.append(word)\n    # return list_of_words\n\n    s = s.replace(' ', '')\n    words = s.split()\n    consonants = ['q', 'w', 'r', 't', 'p', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm']\n    list_of_words = []\n    for word in words:\n        counter = 0\n        for letter in word:\n            if letter in consonants:\n                counter += 1\n        if counter == n:\n            list_of_words.append(word)\n    return list_of_words\n\n\ndef test_select_",
      -4.125
    ],
    [
      "# Your code here\n    import re\n    words = re.findall(r'[A-Za-z]+', s)\n    result = []\n    for word in words:\n        if len(re.findall(r'[aeiou]', word)) == n:\n            result.append(word)\n    return result\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    import re\n    words = re.findall(r'[A-Za-z]+', s)\n    result = []\n    for word in words:\n        if len(re.findall(r'[aeiou]', word)) == n:\n            result.append(word)\n    return result\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary",
      -4.640625
    ],
    [
      "if n == 0:\n        return []\n    if n == 1:\n        return [\"\"]\n    if n == 2:\n        return [\"\"]\n    if n == 3:\n        return [\"\"]\n    if n == 4:\n        return [\"\"]\n    if n == 5:\n        return [\"\"]\n    if n == 6:\n        return [\"\"]\n    if n == 7:\n        return [\"\"]\n    if n == 8:\n        return [\"\"]\n    if n == 9:\n        return [\"\"]\n    if n == 10:\n        return [\"\"]\n    if n == 11:\n        return [\"\"]\n    if n == 12:\n        return [\"\"]\n    if n == 13:\n        return [\"\"]\n    if n == 14:\n        return [\"\"]\n    if n == 15:\n        return [\"\"]\n    if n == 16:\n        return [\"\"]\n    if n == 17:\n        return [\"\"]\n    if n == 18:\n        return [\"\"]\n    if n == 19:\n        return [\"\"]\n    if n == 20:\n        return [\"\"]\n    if n == 21:\n        return [\"\"]\n    if n == 22:\n        return [\"\"]\n    if n == 23:\n        return [\"\"]\n    if n == 24:\n        return [\"\"]\n    if n == 25:\n        return [\"\"]\n    if n == 26:\n        return [\"\"]\n    if n == 27:\n        return [\"\"]\n    if n == 28:\n        return [\"\"]\n    if n == 29:\n        return [\"\"]\n    if n == 30:\n        return [\"\"]\n    if n == 31:\n        return [\"\"]\n    if n == 32:\n        return [\"\"]\n    if n == 33:\n        return [\"\"]\n    if n == 34:\n        return [\"\"]\n    if n == 35:\n        return [\"\"]\n    if n == 36:\n        return [\"\"]\n    if n ==",
      -4.80078125
    ],
    [
      "# Your code here\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    words = s.split()\n    count = 0\n    res = []\n    for word in words:\n        if word[0] in \"aeiou\":\n            continue\n        else:\n            count += 1\n            if count == n:\n                res.append(word)\n                count = 0\n    return res\n\n\n# print(select_words(\"Mary had a little lamb\", 4))\n# print(select_words(\"Mary had a little lamb\", 3))\n# print(select_words(\"simple white space\", 2))\n# print(select_words(\"Hello world\", 4))\n# print(select_words(\"Uncle sam\", 3))",
      -5.2734375
    ],
    [
      "# create a dictionary of letters\n    # 'a', 'b', 'c', ..., 'z'\n    letters = {}\n    for i in range(ord('a'), ord('z') + 1):\n        letters[chr(i)] = 0\n    \n    # loop through the string, counting each consonant\n    for c in s:\n        if c not in letters:\n            letters[c] += 1\n    \n    # loop through the dictionary, finding words with the correct number of consonants\n    result = []\n    for word in s.split(' '):\n        count = 0\n        for c in word:\n            if c not in letters:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n\n#print(select_words(\"Mary had a little lamb\", 4))\n#print(select_words(\"Mary had a little lamb\", 3))\n#print(select_words(\"simple white space\", 2))\n#print(select_words(\"Hello world\", 4))\n#print(select_words(\"Uncle sam\", 3))",
      -5.421875
    ],
    [
      "s = s.split()\n    if len(s) == 0:\n        return []\n    else:\n        count = 0\n        for i in s:\n            for j in i:\n                if j not in \"aeiou\":\n                    count += 1\n            if count == n:\n                return [i]\n            count = 0\n        return []\n\n\ndef select_words_v2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.split()\n    if len(s) == 0:\n        return []\n    else:\n        count = 0\n        for i in s:\n            count = 0\n            for j in i:\n                if j not in \"aeiou\":\n                    count += 1\n            if count == n:\n                return [i]\n        return []\n\n\ndef select_words_v3(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4)",
      -5.7578125
    ],
    [
      "# s = s.split()\n    # print(s)\n    # print(s[0])\n    # if len(s) == 0:\n    #     return []\n    # elif len(s[0]) == n:\n    #     return [s[0]]\n    # else:\n    #     return select_words(s[1:], n)\n    # s = s.split()\n    # return [s[0] for s in s if len(s) == n]\n\n    if len(s) == 0:\n        return []\n    elif len(s.split()[0]) == n:\n        return [s.split()[0]]\n    else:\n        return select_words(s[1:], n)\n\n    # s = s.split()\n    # return [s[0] for s in s if len(s) == n]\n\n    # if len(s) == 0:\n    #     return []\n    # elif len(s.split()[0]) == n:\n    #     return [s.split()[0]]\n    # else:\n    #     return select_words(s[1:], n)\n\n    # s = s.split()\n    # return [s[0] for s in s if len(s) == n]\n\n    # if len(s) == 0:\n    #     return []\n    # elif len(s.split()[0]) == n:\n    #     return [s.split()[0]]\n    # else:\n    #     return select_words(s[1:], n)\n\n    # s = s.split()\n    # return [s[0] for s in s if len(s) == n]\n\n    # if len(s) == 0:\n    #     return []\n    # elif len(s.split()[0]) == n:\n    #     return [s.split()[0]]\n    # else:\n    #     return select_words(s[1:], n)\n\n    # if len(s) == 0:\n    #     return []\n    # elif len(s.split()[0]) == n:",
      -6.5625
    ],
    [
      "# if len(s) == 0:\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s == \" \":\n    #     return []\n    # if s",
      -6.7734375
    ],
    [
      "# s = s.split()\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)\n    # print(len(s))\n    # print(s)",
      -7.94140625
    ],
    [
      "# s = s.split(\" \")\n    # print(s)\n    # print(s[0])\n    # print(s[0][0])\n    # print(s[0][1])\n    # print(s[0][2])\n    # print(s[0][3])\n    # print(s[0][4])\n    # print(s[0][5])\n    # print(s[0][6])\n\n    # print(s[0][1:5])\n\n    # if len(s[0]) == n:\n    #     return s[0]\n    # else:\n    #     return []\n    # print(s[0])\n    # print(s[0][0])\n    # print(s[0][1])\n    # print(s[0][2])\n    # print(s[0][3])\n    # print(s[0][4])\n    # print(s[0][5])\n    # print(s[0][6])\n\n    # print(s[0][1:5])\n\n    # if len(s[0]) == n:\n    #     return s[0]\n    # else:\n    #     return []\n    # print(s[0])\n    # print(s[0][0])\n    # print(s[0][1])\n    # print(s[0][2])\n    # print(s[0][3])\n    # print(s[0][4])\n    # print(s[0][5])\n    # print(s[0][6])\n\n    # print(s[0][1:5])\n\n    # if len(s[0]) == n:\n    #     return s[0]\n    # else:\n    #     return []\n\n    # print(s[0])\n    # print(s[0][0])\n    # print(s[0][1])\n    # print(s[0][2])\n    # print(s[0][3])\n    # print(s[0][4])\n    # print(s[0][5])\n    # print(s[0][6])\n\n    # print(s",
      -9.90625
    ],
    [
      "# s = s.lower()\n    # lst = s.split()\n    # lst = [x for x in lst if len(x) == n]\n    # lst = [x for x in lst if x.isalpha()]\n    # lst = [x for x in lst if len(re.findall('[aeiou]', x)) == 0]\n    # return lst\n    # lst = []\n    # for word in s.split():\n    #     if len(word) == n and len(re.findall('[aeiou]', word)) == 0:\n    #         lst.append(word)\n    # return lst\n    lst = []\n    for word in s.split():\n        if len(word) == n and len(re.findall('[aeiou]', word)) == 0:\n            lst.append(word)\n    return lst\n\n\n# print(select_words(\"Mary had a little lamb\", 4))\n# print(select_words(\"Mary had a little lamb\", 3))\n# print(select_words(\"simple white space\", 2))\n# print(select_words(\"Hello world\", 4))\n# print(select_words(\"Uncle sam\", 3))\n# print(select_words(\"A\", 1))\n# print(select_words(\"A\", 2))\n\n\n# print(select_words(\"A\", 2))\n# print(select_words(\"\", 1))\n# print(select_words(\"\", 2))\n# print(select_words(\"Mary had a little lamb\", 4))\n# print(select_words(\"Mary had a little lamb\", 3))\n# print(select_words(\"simple white space\", 2))\n# print(select_words(\"Hello world\", 4))\n# print(select_words(\"Uncle sam\", 3))\n\n\n# def select_words(s, n):\n#     \"\"\"Given a string s and a natural number n, you have been tasked to implement \n#     a function that returns a list of all words from string s that contain exactly \n#     n consonants, in order these words appear in the string s.",
      -10.9140625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}