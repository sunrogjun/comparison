{
  "problem": {
    "task_id": "HumanEval/55",
    "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
    "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n",
    "entry_point": "fib",
    "docstring": "",
    "problem_id": 55
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "if n < 1:\n        return 0\n    if n < 3:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_seq(n: int):\n    \"\"\"Return Fibonacci sequence up to n.\n    >>> fib_seq(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_seq(1)\n    [0, 1]\n    >>> fib_seq(8)\n    [0, 1, 1, 2, 3, 5, 8]\n    >>> fib_seq(0)\n    []\n    \"\"\"\n    if n < 1:\n        return []\n    seq = [0, 1]\n    for i in range(2, n + 1):\n        seq.append(seq[i - 1] + seq[i - 2])\n    return seq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      12.1796875
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\ndef fib_fast(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fast(10)\n    55\n    >>> fib_fast(1)\n    1\n    >>> fib_fast(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      11.8984375
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      10.6171875
    ],
    [
      "if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib_rec(n - 1) + fib_rec(n - 2)\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n    print(\"fib(10) = {}\".format(fib(10)))\n    print(\"fib_rec(10) = {}\".format(fib_rec(10)))\n    print(\"fib_iter(10) = {}\".format(fib_iter(10)))\n\n\nif __name__ == \"__main__\":\n    main()",
      10.5703125
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 2) + fib(n - 1)\n\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      9.9375
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_non_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_non_recursive(10)\n    55\n    >>> fib_non_recursive(1)\n    1\n    >>> fib_non_recursive(8)\n    21\n    \"\"\"\n    # Base case\n    if n <= 1:\n        return n\n\n    # Initialize our two base cases\n    previous = 0\n    current = 1\n\n    # The current Fibonacci number is the sum of the previous two\n    for _ in range(n - 1):\n        previous, current = current, previous + current\n\n    return current\n\n\ndef factorial(n: int):\n    \"\"\"Return n-th Factorial number.\n    >>> factorial(6)\n    720\n    >>> factorial(1)\n    1\n    >>> factorial(8)\n    40320\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef factorial_non_recursive(n: int):\n    \"\"\"Return n-th Factorial number.\n    >>> factorial_non_recursive(6)\n    720\n    >>> factorial_non_recursive(1)\n    1\n    >>> factorial_non_recursive(8)\n    40320\n    \"\"\"\n    # Base case\n    if n <= 1:\n        return 1\n\n    # Multiply n by factorial(n - 1)\n    product = 1\n    for i in range(2, n + 1):\n        product *= i\n    return product\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      9.7421875
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_slow(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_slow(10)\n    55\n    >>> fib_slow(1)\n    1\n    >>> fib_slow(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib_slow(n - 1) + fib_slow(n - 2)\n\n\ndef fib_fast(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fast(10)\n    55\n    >>> fib_fast(1)\n    1\n    >>> fib_fast(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n\ndef fib_fastest(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fastest(10)\n    55\n    >>> fib_fastest(1)\n    1\n    >>> fib_fastest(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    while n > 1:\n        a, b = b, a + b\n        n -= 1\n    return b",
      9.59375
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_memo(n: int, memo: dict = {}):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_memo(10)\n    55\n    >>> fib_memo(1)\n    1\n    >>> fib_memo(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n in memo:\n        return memo[n]\n    memo[n] = fib_memo(n - 1, memo) + fib_memo(n - 2, memo)\n    return memo[n]\n\n\ndef fib_tab(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_tab(10)\n    55\n    >>> fib_tab(1)\n    1\n    >>> fib_tab(8)\n    21\n    \"\"\"\n    table = [0, 1]\n    for i in range(2, n + 1):\n        table.append(table[i - 1] + table[i - 2])\n    return table[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.5625
    ],
    [
      "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    a, b = 1, 1\n    for _ in range(n-2):\n        a, b = b, a+b\n    return b\n\n\ndef fib3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    1\n    >>> fib3(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib3(n-1) + fib3(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      8.7265625
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\ndef fib_seq(n: int):\n    \"\"\"Return Fibonacci sequence up to n.\n    >>> fib_seq(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    >>> fib_seq(1)\n    [0, 1]\n    >>> fib_seq(8)\n    [0, 1, 1, 2, 3, 5, 8]\n    \"\"\"\n    return [fib(i) for i in range(n + 1)]\n\n\ndef test_fib_seq():\n    assert fib_seq(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    assert fib_seq(1) == [0, 1]\n    assert fib_seq(8) == [0, 1, 1, 2, 3, 5, 8]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      8.328125
    ],
    [
      "if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fib_fast(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fast(10)\n    55\n    >>> fib_fast(1)\n    1\n    >>> fib_fast(8)\n    21\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib_fast(n-1) + fib_fast(n-2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      8.3046875
    ],
    [
      "a = 0\n    b = 1\n    if n == 1:\n        return b\n    for i in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    print(\"fib({}) = {}\".format(n, fib(n)))\n\n\nif __name__ == \"__main__\":\n    main()",
      7.5078125
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      7.02734375
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.9140625
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_fast(n: int, cur_fib: int = 0, prev_fib: int = 1):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fast(10)\n    55\n    >>> fib_fast(1)\n    1\n    >>> fib_fast(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    return fib_fast(n - 1, prev_fib, cur_fib + prev_fib)\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      6.8828125
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    >>> fib2(100)\n    354224848179261915075\n    >>> fib2(200)\n    2805711729925101400376103960677\n    \"\"\"\n    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\ndef fib3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    1\n    >>> fib3(8)\n    21\n    >>> fib3(100)\n    354224848179261915075\n    >>> fib3(200)\n    2805711729925101400376103960677\n    \"\"\"\n    if n == 0:\n        return 0\n    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(fib3(int(input().strip())))",
      6.875
    ],
    [
      "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      6.8515625
    ],
    [
      "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      6.79296875
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.26171875
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      6.20703125
    ],
    [
      "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.13671875
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      5.05859375
    ],
    [
      "if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.01171875
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_fast(n: int, a=0, b=1):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fast(10)\n    55\n    >>> fib_fast(1)\n    1\n    >>> fib_fast(8)\n    21\n    >>> fib_fast(100)\n    354224848179261915075\n    \"\"\"\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        return fib_fast(n - 1, a=b, b=a + b)\n\n\ndef fib_fastest(n: int, a=0, b=1):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fastest(10)\n    55\n    >>> fib_fastest(1)\n    1\n    >>> fib_fastest(8)\n    21\n    >>> fib_fastest(100)\n    354224848179261915075\n    \"\"\"\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        return fib_fastest(n - 1, a + b, a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.83984375
    ],
    [
      "if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_recursive(n - 1) + fib_recursive(n - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      4.6953125
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      4.09765625
    ],
    [
      "if n <= 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.05859375
    ],
    [
      "if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fib_fast(n: int, cache: dict):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fast(10, {})\n    55\n    >>> fib_fast(1, {})\n    1\n    >>> fib_fast(8, {})\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    elif n in cache:\n        return cache[n]\n    else:\n        cache[n] = fib_fast(n-1, cache) + fib_fast(n-2, cache)\n        return cache[n]\n\n\ndef main():\n    n = int(input(\"n = \"))\n    print(\"fib_fast({}) = {}\".format(n, fib_fast(n, {})))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.986328125
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\ndef factorial(n: int):\n    \"\"\"Return n!\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.94140625
    ],
    [
      "a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      3.94140625
    ],
    [
      "if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.783203125
    ],
    [
      "if n < 2:\n        return n\n\n    return fib(n - 2) + fib(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.1328125
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_memo(n: int, memo: dict):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_memo(10, {})\n    55\n    >>> fib_memo(1, {})\n    1\n    >>> fib_memo(8, {})\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    if n - 1 not in memo:\n        memo[n - 1] = fib_memo(n - 1, memo)\n    if n - 2 not in memo:\n        memo[n - 2] = fib_memo(n - 2, memo)\n    return memo[n - 1] + memo[n - 2]\n\n\ndef fib_tab(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_tab(10)\n    55\n    >>> fib_tab(1)\n    1\n    >>> fib_tab(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    t = [0] * (n + 1)\n    t[1] = 1\n    for i in range(2, n + 1):\n        t[i] = t[i - 1] + t[i - 2]\n    return t[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.095703125
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
      2.673828125
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
      2.44921875
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_seq(n: int):\n    \"\"\"Return a list of the first n Fibonacci numbers.\n    >>> fib_seq(5)\n    [0, 1, 1, 2, 3]\n    >>> fib_seq(1)\n    [0, 1]\n    >>> fib_seq(8)\n    [0, 1, 1, 2, 3, 5, 8, 13]\n    \"\"\"\n    result = []\n    for i in range(n):\n        result.append(fib(i))\n    return result\n\n\ndef fib_seq_iter(n: int):\n    \"\"\"Return a list of the first n Fibonacci numbers.\n    >>> fib_seq(5)\n    [0, 1, 1, 2, 3]\n    >>> fib_seq(1)\n    [0, 1]\n    >>> fib_seq(8)\n    [0, 1, 1, 2, 3, 5, 8, 13]\n    \"\"\"\n    result = []\n    a, b = 0, 1\n    for i in range(n):\n        result.append(a)\n        a, b = b, a + b\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.142578125
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)",
      1.9794921875
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)",
      1.9765625
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_seq(n: int):\n    \"\"\"Return the first n Fibonacci numbers.\n    >>> fib_seq(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_seq(5)\n    [0, 1, 1, 2, 3]\n    >>> fib_seq(8)\n    [0, 1, 1, 2, 3, 5, 8, 13]\n    \"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    else:\n        seq = fib_seq(n - 1)\n        seq.append(seq[-1] + seq[-2])\n        return seq\n\n\ndef fib_number(seq: int):\n    \"\"\"Return the n-th Fibonacci number.\n    >>> fib_number(10)\n    55\n    >>> fib_number(1)\n    1\n    >>> fib_number(8)\n    21\n    \"\"\"\n    if seq <= 1:\n        return seq\n    else:\n        return fib_number(seq - 1) + fib_number(seq - 2)\n\n\ndef fib_seq_recursive(n: int):\n    \"\"\"Return the first n Fibonacci numbers.\n    >>> fib_seq_recursive(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_seq_recursive(5)\n    [0, 1, 1, 2, 3]\n    >>> fib_seq_recursive(8)\n    [0, 1, 1, 2, 3, 5, 8, 13]\n    \"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:",
      1.5029296875
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n\n\ndef fib_memo(n: int, memo: dict = {1: 1, 2: 1}):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_memo(10)\n    55\n    >>> fib_memo(1)\n    1\n    >>> fib_memo(8)\n    21\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    memo[n] = fib_memo(n - 2, memo) + fib_memo(n - 1, memo)\n    return memo[n]\n\n\ndef fib_tab(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_tab(10)\n    55\n    >>> fib_tab(1)\n    1\n    >>> fib_tab(8)\n    21\n    \"\"\"\n    tab = [1, 1]\n    for i in range(2, n + 1):\n        tab.append(tab[i - 2] + tab[i - 1])\n    return tab[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.4873046875
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()",
      1.4609375
    ],
    [
      "if n < 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n    def loop(n: int, a: int, b: int) -> int:\n        if n == 0:\n            return a\n        elif n == 1:\n            return b\n        else:\n            return loop(n - 1, b, a + b)\n    return loop(n, 0, 1)\n\n\ndef fib_rec2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n    if n < 2:\n        return 1\n    else:\n        return fib_rec2(n - 1) + fib_rec2(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.4140625
    ],
    [
      "a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\ndef factorial(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> factorial(10)\n    3628800\n    >>> factorial(1)\n    1\n    >>> factorial(8)\n    40320\n    \"\"\"\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\n\n\ndef fib_recursive(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_recursive(n - 2) + fib_recursive(n - 1)\n\n\ndef factorial_recursive(n: int):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.1669921875
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.8134765625
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.79541015625
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_rec_memo(n: int, memo: dict = {}) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_memo(10)\n    55\n    >>> fib_rec_memo(1)\n    1\n    >>> fib_rec_memo(8)\n    21\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        memo[n] = fib_rec_memo(n - 1, memo) + fib_rec_memo(n - 2, memo)\n        return memo[n]\n\n\ndef fib_rec_tab(n: int, tab: list = [0, 1]) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tab(10)\n    55\n    >>> fib_rec_tab(1)\n    1\n    >>> fib_rec_tab(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n - 1):\n            tab.append(tab[-1] + tab[-2])\n        return tab[-1]\n\n\ndef fib_rec_tab_opt(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec_tab_opt(10)\n    55\n    >>> fib_rec_tab_opt(1)\n    1\n    >>> fib_rec_tab_opt(8)\n    21\n    \"\"\"\n    tab = [0, 1]\n    i = 1\n    while i < n:\n        tab.append(tab[-1] + tab[-2])\n        i += 1",
      0.67333984375
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.4970703125
    ],
    [
      "if n == 0 or n == 1:\n        return n\n\n    return fib(n - 1) + fib(n - 2)",
      0.219482421875
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()",
      -0.85595703125
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if n <= 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "if n < 2:\n        return n\n\n    a = 1\n    b = 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n\n    return b",
      -0.857421875
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)",
      -0.857421875
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n - 2) + fib(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.857421875
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()",
      -0.85791015625
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)",
      -0.85791015625
    ],
    [
      "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n <= 1:\n        return n\n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "a = 0\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a",
      -0.85791015625
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "return _fib_iterative(n)\n\n\ndef _fib_iterative(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef _fib_recursive(n: int):\n    if n < 2:\n        return n\n    return _fib_recursive(n - 1) + _fib_recursive(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_seq(n: int):\n    \"\"\"Return a list containing the first n Fibonacci numbers.\n    >>> fib_seq(5)\n    [0, 1, 1, 2, 3]\n    >>> fib_seq(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    \"\"\"\n    fibs = [0, 1]\n    for i in range(2, n + 1):\n        fibs.append(fibs[i - 1] + fibs[i - 2])\n    return fibs",
      -0.85791015625
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_non_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_non_rec(10)\n    55\n    >>> fib_non_rec(1)\n    1\n    >>> fib_non_rec(8)\n    21\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "return fib_rec(n, 1, 1, 0)\n\n\ndef fib_rec(n, a, b, c):\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    elif n == 2:\n        return c\n    else:\n        return fib_rec(n - 1, b, c, a + b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n\n\ndef fib_non_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_non_recursive(10)\n    55\n    >>> fib_non_recursive(1)\n    1\n    >>> fib_non_recursive(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    current = 1\n    previous = 0\n    for i in range(1, n):\n        current, previous = current + previous, current\n    return current\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
      -0.8583984375
    ],
    [
      "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "a = 1\n    b = 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    else:\n        return fib_rec(n - 1) + fib_rec(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "a, b = 1, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return a\n\n\ndef fib_recursive(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib_recursive(n-1) + fib_recursive(n-2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
      -0.8583984375
    ],
    [
      "if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -0.86083984375
    ],
    [
      "if n < 2:\n        return 1\n    return fib(n-2) + fib(n-1)\n\n\ndef fib_list(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_list(10)\n    55\n    >>> fib_list(1)\n    1\n    >>> fib_list(8)\n    21\n    \"\"\"\n    if n < 2:\n        return 1\n    return fib_list(n-2) + fib_list(n-1)",
      -0.98583984375
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_fast(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fast(10)\n    55\n    >>> fib_fast(1)\n    1\n    >>> fib_fast(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    fib_n_minus_1 = 0\n    fib_n_minus_2 = 1\n    for _ in range(2, n + 1):\n        fib_n = fib_n_minus_1 + fib_n_minus_2\n        fib_n_minus_2 = fib_n_minus_1\n        fib_n_minus_1 = fib_n\n    return fib_n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.0146484375
    ],
    [
      "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fib_seq(n: int):\n    \"\"\"Return Fibonacci sequence up to n.\n    >>> fib_seq(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    >>> fib_seq(1)\n    [0, 1]\n    >>> fib_seq(8)\n    [0, 1, 1, 2, 3, 5, 8]\n    \"\"\"\n    result = []\n    if n == 0:\n        return result\n    else:\n        result.append(0)\n    if n == 1:\n        return result\n    else:\n        result.append(1)\n    for i in range(2, n):\n        result.append(result[i-1] + result[i-2])\n    return result\n\n\ndef main():\n    n = int(input(\"Enter number: \"))\n    print(fib(n))\n    print(fib_seq(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.1669921875
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n\n\ndef fib_seq(n: int):\n    \"\"\"Return a list of the first n Fibonacci numbers.\n    >>> fib_seq(5)\n    [1, 1, 2, 3, 5]\n    >>> fib_seq(8)\n    [1, 1, 2, 3, 5, 8, 13, 21]\n    \"\"\"\n    result = [1]\n    i = 2\n    while i <= n:\n        result.append(result[-1] + result[-2])\n        i += 1\n    return result\n\n\ndef fib_seq_r(n: int):\n    \"\"\"Return a list of the first n Fibonacci numbers.\n    >>> fib_seq_r(5)\n    [1, 1, 2, 3, 5]\n    >>> fib_seq_r(8)\n    [1, 1, 2, 3, 5, 8, 13, 21]\n    \"\"\"\n    if n < 2:\n        return [n]\n    else:\n        return fib_seq_r(n-2) + fib_seq_r(n-1)\n\n\ndef fib_seq_t(n: int):\n    \"\"\"Return a list of the first n Fibonacci numbers.\n    >>> fib_seq_t(5)\n    [1, 1, 2, 3, 5]\n    >>> fib_seq_t(8)\n    [1, 1, 2, 3, 5, 8, 13, 21]\n    \"\"\"\n    def fib_seq_t_h(n: int, acc: list):\n        if n < 2:\n            return acc + [n]\n        else:\n            return fib_seq_t_h(n-2, acc + [acc[-1] + acc[-2]])\n    return fib_seq_t_h(n, [])\n\n\nif __name__ == \"__main__\":\n    import doctest",
      -1.5048828125
    ],
    [
      "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_fast(n: int, a=0, b=1):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fast(10)\n    55\n    >>> fib_fast(1)\n    1\n    >>> fib_fast(8)\n    21\n    \"\"\"\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        return fib_fast(n - 1, b, a + b)\n\n\ndef fib_fastest(n: int, a=0, b=1):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_fastest(10)\n    55\n    >>> fib_fastest(1)\n    1\n    >>> fib_fastest(8)\n    21\n    \"\"\"\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        c = a + b\n        return fib_fastest(n - 1, b, c)",
      -2.09765625
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fib_memo(n: int, memo: dict = {}) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_memo(10)\n    55\n    >>> fib_memo(1)\n    1\n    >>> fib_memo(8)\n    21\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    else:\n        result = fib_memo(n-1, memo) + fib_memo(n-2, memo)\n        memo[n] = result\n        return result\n\n\ndef fib_tab(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_tab(10)\n    55\n    >>> fib_tab(1)\n    1\n    >>> fib_tab(8)\n    21\n    \"\"\"\n    table = [0] * (n+1)\n    table[1] = 1\n    for i in range(2, n+1):\n        table[i] = table[i-1] + table[i-2]\n    return table[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.5234375
    ],
    [
      "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\ndef factorial(n: int):\n    \"\"\"Return n-th factorial number.\n    >>> factorial(10)\n    3628800\n    >>> factorial(1)\n    1\n    >>> factorial(8)\n    40320\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\n\ndef sum_of_powers(n: int, p: int):\n    \"\"\"Return sum of n-th powers.\n    >>> sum_of_powers(10, 3)\n    364\n    >>> sum_of_powers(10, 2)\n    285\n    >>> sum_of_powers(10, 1)\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    return sum_of_powers(n-1, p) + pow(n, p)\n\n\ndef sum_of_powers_2(n: int, p: int):\n    \"\"\"Return sum of n-th powers.\n    >>> sum_of_powers_2(10, 3)\n    364\n    >>> sum_of_powers_2(10, 2)\n    285\n    >>> sum_of_powers_2(10, 1)\n    55\n    \"\"\"\n    if n == 0:\n        return 0\n    return n + sum_of_powers_2(n-1, p)\n\n\ndef sum_of_powers_3(n: int, p: int):\n    \"\"\"Return sum of n-th powers.\n    >>> sum_of_powers_3(10, 3)\n    364\n    >>> sum_of_powers_3(10, 2)\n    285\n    >>> sum_of_powers_3(10, 1)\n    55\n    \"\"\"\n    if n == 0",
      -2.73046875
    ],
    [
      "if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\n\ndef fib_d(n: int, d: dict):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_d(10, {1: 1, 2: 1})\n    55\n    >>> fib_d(1, {1: 1, 2: 1})\n    1\n    >>> fib_d(8, {1: 1, 2: 1})\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    if n in d:\n        return d[n]\n    d[n] = fib_d(n-1, d) + fib_d(n-2, d)\n    return d[n]\n\n\ndef fib_r(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_r(10)\n    55\n    >>> fib_r(1)\n    1\n    >>> fib_r(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    a = 1\n    b = 1\n    for i in range(2, n):\n        c = a + b\n        a = b\n        b = c\n    return b\n\n\ndef fib_f(n: int, f: dict):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_f(10, {1: 1, 2: 1})\n    55\n    >>> fib_f(1, {1: 1, 2: 1})\n    1\n    >>> fib_f(8, {1: 1, 2: 1})\n    21\n    \"\"\"\n    if n in f:\n        return f[n]\n    f[n] = fib_f(n-1, f) + fib_f(n-2, f)\n    return f[n]",
      -3.369140625
    ],
    [
      "if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_recursion(n: int, memo: dict):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recursion(10, {})\n    55\n    >>> fib_recursion(1, {})\n    1\n    >>> fib_recursion(8, {})\n    21\n    >>> fib_recursion(10, {1: 1, 2: 1})\n    55\n    >>> fib_recursion(1, {1: 1, 2: 1})\n    1\n    >>> fib_recursion(8, {1: 1, 2: 1})\n    21\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    else:\n        result = fib_recursion(n - 1, memo) + fib_recursion(n - 2, memo)\n        memo[n] = result\n        return result\n\n\ndef fib_recursion_2(n: int, memo: dict):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recursion(10, {})\n    55\n    >>> fib_recursion(1, {})\n    1\n    >>> fib_recursion(8, {})\n    21\n    >>> fib_recursion(10, {1: 1, 2: 1})\n    55\n    >>> fib_recursion(1, {1: 1, 2: 1})\n    1\n    >>> fib_recursion(8, {1: 1, 2: 1})\n    21\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    else:\n        if n == 1:\n            result = 1\n        elif n == 2:\n            result = 1\n        else:\n            result = fib_recursion_2(n - 1, memo) + fib_recurs",
      -4.9765625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}