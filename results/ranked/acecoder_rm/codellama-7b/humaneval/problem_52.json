{
  "problem": {
    "task_id": "HumanEval/52",
    "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
    "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
    "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n",
    "entry_point": "below_threshold",
    "docstring": "",
    "problem_id": 52
  },
  "model_name": "codellama-7b",
  "dataset": "humaneval",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "# 1. for each number in l, if number is not below threshold t, return False\n    # 2. if all numbers are below threshold t, return True\n    for number in l:\n        if number >= t:\n            return False\n    return True\n\n\ndef only_odd_numbers(l: list):\n    \"\"\"Return True if all numbers in the list l are odd.\n    >>> only_odd_numbers([1, 3, 5, 7])\n    True\n    >>> only_odd_numbers([1, 3, 5, 7, 10])\n    False\n    \"\"\"\n\n    # 1. for each number in l, if number is even, return False\n    # 2. if all numbers are even, return True\n    for number in l:\n        if number % 2 == 0:\n            return False\n    return True\n\n\ndef all_same_length(l: list):\n    \"\"\"Return True if all of the strings in the list l are the same length.\n    >>> all_same_length(['abc', 'de', 'f'])\n    False\n    >>> all_same_length(['aa', 'bb', 'cc'])\n    True\n    \"\"\"\n\n    # 1. initialize a variable to the length of the first string\n    # 2. for each string in l, if the length of the string is not equal to the variable, return False\n    # 3. if all strings are the same length, return True\n    length = len(l[0])\n    for string in l:\n        if len(string) != length:\n            return False\n    return True\n\n\ndef only_uppercase_words(l: list):\n    \"\"\"Return True if all of the words in the list l are all uppercase.\n    >>> only_uppercase_words(['DOG', 'CAT'])\n    True\n    >>> only_uppercase_words(['dog', 'cat'])\n    False\n    \"\"\"\n\n    # 1. for each word in l, if the word is not all uppercase, return False\n    # 2. if all words are all uppercase, return True\n    for word in l:\n        if not word.isupper():\n            return False\n    return True",
      5.48828125
    ],
    [
      "for item in l:\n        if item > t:\n            return False\n    return True\n\n\ndef only_odd_numbers(l: list):\n    \"\"\"Return True if all numbers in the list l are odd.\n    >>> only_odd_numbers([1, 3, 5])\n    True\n    >>> only_odd_numbers([1, 2, 4])\n    False\n    \"\"\"\n    for item in l:\n        if item % 2 == 0:\n            return False\n    return True\n\n\ndef sum_digits(s: str):\n    \"\"\"Return the sum of the digits of string s.\n    >>> sum_digits('88')\n    16\n    >>> sum_digits('123')\n    6\n    >>> sum_digits('4321')\n    10\n    \"\"\"\n    total = 0\n    for char in s:\n        total += int(char)\n    return total\n\n\ndef has_no_e(word: str):\n    \"\"\"Return True if word contains no 'e' or 'E' letters.\n    >>> has_no_e('testing')\n    True\n    >>> has_no_e('Emily')\n    False\n    \"\"\"\n    for char in word:\n        if char == 'e' or char == 'E':\n            return False\n    return True\n\n\ndef has_no_x(word: str):\n    \"\"\"Return True if word contains no 'x' or 'X' letters.\n    >>> has_no_x('testing')\n    True\n    >>> has_no_x('EXITS')\n    False\n    \"\"\"\n    for char in word:\n        if char == 'x' or char == 'X':\n            return False\n    return True\n\n\ndef count_evens(nums: list):\n    \"\"\"Return the number of even numbers in the list nums.\n    >>> count_evens([2, 1, 2, 3, 4])\n    3\n    >>> count_evens([2, 2, 0])\n    3\n    >>> count_evens([1, 3, 5])\n    0\n    \"\"\"\n    count = 0\n    for item",
      5.1171875
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef is_palindrome(w: str):\n    \"\"\"Return True if w is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('not a palindrome')\n    False\n    \"\"\"\n    return w == w[::-1]\n\n\ndef has_no_e(w: str):\n    \"\"\"Return True if the word w does not contain the letter 'e' or 'E'.\n    >>> has_no_e('tomato')\n    True\n    >>> has_no_e('elephant')\n    False\n    \"\"\"\n    for c in w:\n        if c == 'e' or c == 'E':\n            return False\n    return True\n\n\ndef is_sandwich(w: str):\n    \"\"\"Return True if the word w is a sandwich word.\n    >>> is_sandwich('tomato')\n    False\n    >>> is_sandwich('rots'\n    True\n    \"\"\"\n    if len(w) < 4:\n        return False\n    return w[0] == w[-1] and w[1] == w[-2]\n\n\ndef has_no_x(w: str):\n    \"\"\"Return True if the word w does not contain the letter 'x' or 'X'.\n    >>> has_no_x('computer')\n    True\n    >>> has_no_x('xray')\n    False\n    \"\"\"\n    for c in w:\n        if c == 'x' or c == 'X':\n            return False\n    return True\n\n\ndef is_not_pybrain(w: str):\n    \"\"\"Return True if the word w is not the word pybrain.\n    >>> is_not_pybrain('pybrain')\n    False\n    >>> is_not_pybrain('octopus')\n    True\n    \"\"\"\n    return w != 'pybrain'\n\n\ndef is_not_pybrain_alt(w: str):\n    return w == 'pybrain'\n\n\ndef is_not_pybrain_alt2",
      5.02734375
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n\n    return True\n\n\ndef only_strings(L):\n    \"\"\"Returns True if the list contains only strings.\n    >>> only_strings(['a', 'b', 'c'])\n    True\n    >>> only_strings([1, 2, 3])\n    False\n    >>> only_strings([])\n    True\n    \"\"\"\n\n    for x in L:\n        if not isinstance(x, str):\n            return False\n\n    return True\n\n\ndef common_end(list1, list2):\n    \"\"\"Returns True if the lists have the same first element or the same last\n    element.\n    >>> common_end([1, 2, 3], [7, 3])\n    True\n    >>> common_end([1, 2, 3], [7, 3, 2])\n    False\n    \"\"\"\n\n    return list1[0] == list2[0] or list1[-1] == list2[-1]\n\n\ndef reverse(lst):\n    \"\"\"Reverses a given list.\n    >>> reverse([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n\n    return lst[::-1]\n\n\ndef is_reverse(lst1, lst2):\n    \"\"\"Returns True if lst1 is the reverse of lst2.\n    >>> is_reverse([1, 2, 3, 4], [4, 3, 2, 1])\n    True\n    >>> is_reverse([1, 2, 3, 4], [4, 3, 2])\n    False\n    \"\"\"\n\n    return lst1 == reverse(lst2)\n\n\ndef has_duplicates(lst):\n    \"\"\"Returns True if the list has any duplicate elements.\n    >>> has_duplicates([1, 2, 3, 4])\n    False\n    >>> has_duplicates([1, 2, 2, 3])\n    True\n    \"\"\"\n\n    for x in lst:\n        if lst.count(x) > 1:\n            return True\n\n    return False",
      4.5078125
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef odd(n):\n    \"\"\"Returns True if n is odd.\n    >>> odd(3)\n    True\n    >>> odd(17)\n    False\n    >>> odd(0)\n    False\n    >>> odd(7)\n    True\n    \"\"\"\n    return n % 2 == 1\n\n\ndef is_two(n):\n    \"\"\"Returns True if n is 2.\n    >>> is_two(2)\n    True\n    >>> is_two(3)\n    False\n    >>> is_two(0)\n    False\n    >>> is_two(1)\n    False\n    \"\"\"\n    return n == 2\n\n\ndef is_three(n):\n    \"\"\"Returns True if n is 3.\n    >>> is_three(3)\n    True\n    >>> is_three(2)\n    False\n    >>> is_three(0)\n    False\n    >>> is_three(1)\n    False\n    \"\"\"\n    return n == 3\n\n\ndef is_five(n):\n    \"\"\"Returns True if n is 5.\n    >>> is_five(3)\n    False\n    >>> is_five(2)\n    False\n    >>> is_five(0)\n    False\n    >>> is_five(5)\n    True\n    \"\"\"\n    return n == 5\n\n\ndef is_seven(n):\n    \"\"\"Returns True if n is 7.\n    >>> is_seven(3)\n    False\n    >>> is_seven(2)\n    False\n    >>> is_seven(0)\n    False\n    >>> is_seven(7)\n    True\n    \"\"\"\n    return n == 7\n\n\ndef is_eleven(n):\n    \"\"\"Returns True if n is 11.\n    >>> is_eleven(3)\n    False\n    >>> is_eleven(2)\n    False\n    >>> is_eleven(0)\n    False\n    >>> is_eleven(11)\n    True\n    \"\"\"\n    return n == 11\n\n\ndef is",
      4.015625
    ],
    [
      "for n in l:\n        if n >= t:\n            return False\n    return True\n\n\ndef only_ints(l: list):\n    \"\"\"Return a new list with only the integers from l.\n    >>> only_ints([1, 2.5, 3, 4])\n    [1, 3]\n    >>> only_ints([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> only_ints([])\n    []\n    \"\"\"\n    return [n for n in l if isinstance(n, int)]\n\n\ndef sum_nearby(num1: int, num2: int) -> int:\n    \"\"\"Return the sum of num1 and num2, but with a twist. If num1 and num2\n    are adjacent, then instead of adding them together, you must subtract\n    one. If num1 and num2 are not adjacent, then you just add them together.\n    >>> sum_nearby(1, 2)\n    1\n    >>> sum_nearby(1, 3)\n    2\n    >>> sum_nearby(2, 1)\n    1\n    >>> sum_nearby(2, 3)\n    5\n    \"\"\"\n    if num1 == num2 - 1 or num1 == num2 + 1:\n        return num1 + num2 - 2\n    else:\n        return num1 + num2\n\n\ndef same_first_last(l: list) -> bool:\n    \"\"\"Return True if the first item in l is the same as the last item in l.\n    >>> same_first_last([1, 2, 3])\n    False\n    >>> same_first_last([1, 2, 1])\n    True\n    \"\"\"\n    return l[0] == l[-1]\n\n\ndef has_23(num: int) -> bool:\n    \"\"\"Return True if num contains a 2 or a 3.\n    >>> has_23(223)\n    True\n    >>> has_23(212)\n    False\n    \"\"\"\n    return '2' in str(num) or '3' in str(num)",
      3.576171875
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef long_enough(s: str, n: int):\n    \"\"\"Return True if the length of string s is longer than or equal to n.\n    >>> long_enough('1234567890', 5)\n    True\n    >>> long_enough('12345', 6)\n    False\n    \"\"\"\n    return len(s) >= n\n\n\ndef has_no_e(s: str, n: int):\n    \"\"\"Return True if the string s contains no 'e' characters.\n    >>> has_no_e('abc', 1)\n    True\n    >>> has_no_e('abe', 1)\n    False\n    \"\"\"\n    for i in range(0, n):\n        if s[i] == 'e':\n            return False\n    return True\n\n\ndef has_no_x(s: str, n: int):\n    \"\"\"Return True if the string s contains no 'x' characters.\n    >>> has_no_x('abc', 1)\n    True\n    >>> has_no_x('abe', 1)\n    True\n    \"\"\"\n    for i in range(0, n):\n        if s[i] == 'x':\n            return False\n    return True\n\n\ndef has_no_a(s: str, n: int):\n    \"\"\"Return True if the string s contains no 'a' characters.\n    >>> has_no_a('abc', 1)\n    False\n    >>> has_no_a('abe', 1)\n    True\n    \"\"\"\n    for i in range(0, n):\n        if s[i] == 'a':\n            return False\n    return True\n\n\ndef has_no_o(s: str, n: int):\n    \"\"\"Return True if the string s contains no 'o' characters.\n    >>> has_no_o('abc', 1)\n    True\n    >>> has_no_o('abe', 1)\n    False\n    \"\"\"\n    for i in range(0, n):\n        if s[i] == 'o':",
      3.080078125
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n\ndef same_first_two_elements(L: list, M: list):\n    \"\"\"Returns True if the first two elements of L are the same as the first\n    two elements of M.\n    >>> same_first_two_elements([1, 2, 3], [1, 2, 3])\n    True\n    >>> same_first_two_elements([1, 2, 3], [2, 2, 3])\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef all_above_threshold(L: list, threshold: int):\n    \"\"\"Returns True if all elements of L are at least the value of threshold.\n    >>> all_above_threshold([1, 2, 3], 2)\n    True\n    >>> all_above_threshold([1, 2, 3], 100)\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n\ndef all_below_threshold(L: list, threshold: int):\n    \"\"\"Returns True if all elements of L are at most the value of threshold.\n    >>> all_below_threshold([1, 2, 3], 100)\n    True\n    >>> all_below_threshold([1, 2, 3], 2)\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n\ndef count_below_threshold(L: list, threshold: int):\n    \"\"\"Returns the number of elements of L that are below the threshold.\n    >>> count_below_threshold([1, 2, 3], 2)\n    2\n    >>> count_below_threshold([1, 2, 3], 100)\n    3\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n\ndef count_strings_with_no_newlines(L: list):\n    \"\"\"Returns the number of strings in L with no newlines.\n    >>> count_strings_with_no_newlines([])\n    0\n    >>> count_strings_with_no_newlines([\"a",
      2.080078125
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef only_odd_numbers(l: list):\n    \"\"\"Return True if all numbers in the list l are odd.\n    >>> only_odd_numbers([1, 3, 5, 7])\n    True\n    >>> only_odd_numbers([1, 2, 4, 10])\n    False\n    \"\"\"\n    for num in l:\n        if num % 2 == 0:\n            return False\n    return True\n\n\ndef sum_is_evenly_divisible_by_3(l: list):\n    \"\"\"Return True if the sum of the numbers in the list l is evenly divisible by 3.\n    >>> sum_is_evenly_divisible_by_3([1, 3, 5, 7])\n    True\n    >>> sum_is_evenly_divisible_by_3([1, 3, 5, 8])\n    False\n    \"\"\"\n    s = 0\n    for num in l:\n        s += num\n    if s % 3 == 0:\n        return True\n    return False\n\n\ndef all_below_threshold(l1: list, l2: list, t: int):\n    \"\"\"Return True if all numbers in lists l1 and l2 are below threshold t.\n    >>> all_below_threshold([1, 2, 3], [3, 2, 1], 4)\n    True\n    >>> all_below_threshold([1, 2, 3], [3, 2, 1], 2)\n    False\n    \"\"\"\n    for num in l1 + l2:\n        if num >= t:\n            return False\n    return True\n\n\ndef sum_of_items(l: list):\n    \"\"\"Return the sum of the items in l.\n    >>> sum_of_items([1, 2, 3])\n    6\n    >>> sum_of_items([1, 2, 3, 4])\n    10\n    \"\"\"\n    s = 0\n    for num in l:\n        s += num\n    return s",
      2.072265625
    ],
    [
      "for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef odd_sum(n: int):\n    \"\"\"Return the sum of the odd numbers from 1 to n.\n    >>> odd_sum(5)\n    15\n    >>> odd_sum(11)\n    55\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            total += i\n    return total\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(16)\n    False\n    >>> is_prime(521)\n    True\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_2(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime_2(2)\n    True\n    >>> is_prime_2(16)\n    False\n    >>> is_prime_2(521)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_digits(n: int):\n    \"\"\"Return the sum of the digits of n.\n    >>> sum_digits(10) # 1 + 0 = 1\n    1\n    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n\n\ndef factorial(n: int):\n    \"\"\"Return n! = 1 * 2 * 3 * ... * n.\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n    1\n    >>> factorial(1)",
      1.751953125
    ],
    [
      "for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef fib(n: int):\n    \"\"\"Return the nth Fibonacci number.\n\n    >>> fib(10)\n    89\n    >>> fib(1)\n    1\n    >>> fib(2)\n    2\n    >>> fib(3)\n    3\n    >>> fib(4)\n    5\n    >>> fib(20)\n    1597\n    >>> fib(30)\n    122075\n    \"\"\"\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef factorial(n: int):\n    \"\"\"Return the factorial of n.\n\n    >>> factorial(5)\n    120\n    >>> factorial(4)\n    24\n    >>> factorial(3)\n    6\n    >>> factorial(2)\n    2\n    >>> factorial(1)\n    1\n    >>> factorial(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef reverse(s: str):\n    \"\"\"Return the reverse of the given string.\n\n    >>> reverse('abc')\n    'cba'\n    >>> reverse('ab')\n    'ba'\n    >>> reverse('abcdef')\n    'fedcba'\n    \"\"\"\n    return s[::-1]\n\n\ndef is_palindrome(s: str):\n    \"\"\"Returns True if s is a palindrome.\n\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('dented')\n    False\n    >>> is_palindrome('madam')\n    True\n    \"\"\"\n    return s == reverse(s)\n\n\ndef has_no_e(s: str):\n    \"\"\"Returns True if s contains no 'e' letter.\n\n    >>> has_no_e('super')\n    False\n    >>> has",
      1.7392578125
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef sum_of_items(s):\n    \"\"\"Returns the sum of the elements in the given sequence.\n    >>> sum_of_items([1, 2, 4])\n    7\n    >>> sum_of_items([20, 20, 20])\n    60\n    >>> sum_of_items([])\n    0\n    \"\"\"\n    sum = 0\n    for i in s:\n        sum += i\n    return sum\n\n\ndef sum_of_items_v2(s):\n    \"\"\"Returns the sum of the elements in the given sequence.\n    >>> sum_of_items([1, 2, 4])\n    7\n    >>> sum_of_items([20, 20, 20])\n    60\n    >>> sum_of_items([])\n    0\n    \"\"\"\n    sum = 0\n    for i in s:\n        sum += i\n    return sum\n\n\ndef sum_of_items_v3(s):\n    \"\"\"Returns the sum of the elements in the given sequence.\n    >>> sum_of_items([1, 2, 4])\n    7\n    >>> sum_of_items([20, 20, 20])\n    60\n    >>> sum_of_items([])\n    0\n    \"\"\"\n    return sum(s)\n\n\ndef sum_of_items_v4(s):\n    \"\"\"Returns the sum of the elements in the given sequence.\n    >>> sum_of_items([1, 2, 4])\n    7\n    >>> sum_of_items([20, 20, 20])\n    60\n    >>> sum_of_items([])\n    0\n    \"\"\"\n    return sum(s, 0)\n\n\ndef sum_of_items_v5(s):\n    \"\"\"Returns the sum of the elements in the given sequence.\n    >>> sum_of_items([1, 2, 4])\n    7\n    >>> sum_of_items([20, 20, 20])\n    6",
      1.4833984375
    ],
    [
      "for n in l:\n        if n >= t:\n            return False\n    return True\n\n\ndef same_first_and_last(l: list):\n    \"\"\"Return True if the first and last elements in the list are the same.\n    >>> same_first_and_last(['yes', 'no', 'maybe', 'yes'])\n    True\n    >>> same_first_and_last(['maybe', 'no', 'yes', 'maybe'])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    return l[0] == l[-1]\n\n\ndef all_same(l: list):\n    \"\"\"Return True if all the elements in the list are the same.\n    >>> all_same([1, 1, 1])\n    True\n    >>> all_same([1, 2, 1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] != l[0]:\n            return False\n    return True\n\n\ndef has_size(l: list, n: int):\n    \"\"\"Return True if the list has size n.\n    >>> has_size([1, 2, 3], 3)\n    True\n    >>> has_size([1, 2, 3], 4)\n    False\n    \"\"\"\n    return len(l) == n\n\n\ndef sum_up_to(n: int):\n    \"\"\"Return the sum of the integers 1 to n.\n    >>> sum_up_to(4)\n    10\n    >>> sum_up_to(6)\n    15\n    \"\"\"\n    s = 0\n    for i in range(n):\n        s += i + 1\n    return s\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(15)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3",
      1.3046875
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef sum_of_square_of_remainders(n: int, m: int) -> int:\n    \"\"\"Return the sum of the squares of the remainders of the integers\n    from 1 to n, when divided by m.\n    >>> sum_of_square_of_remainders(20, 7)\n    226\n    >>> sum_of_square_of_remainders(20, 20)\n    825\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i % m)**2\n    return sum\n\n\ndef factorial(n: int) -> int:\n    \"\"\"Return n factorial.\n    >>> factorial(5)\n    120\n    >>> factorial(1)\n    1\n    >>> factorial(0)\n    1\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 1:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef count_divisors(n: int) -> int:\n    \"\"\"Return the number of divisors of n.\n    >>> count_divisors(20)\n    6\n    >>> count_divisors(24)\n    8\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
      0.771484375
    ],
    [
      "for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef only_odd_numbers(l: list):\n    \"\"\"Return True if all numbers in the list l are odd.\n    >>> only_odd_numbers([1, 3, 5, 7])\n    True\n    >>> only_odd_numbers([1, 2, 4])\n    False\n    \"\"\"\n    for i in l:\n        if i % 2 == 0:\n            return False\n    return True\n\n\ndef sum_is_multiple_of_three(l: list, m: int):\n    \"\"\"Return True if the sum of the numbers in l is a multiple of m.\n    >>> sum_is_multiple_of_three([1, 2, 3], 3)\n    True\n    >>> sum_is_multiple_of_three([1, 2, 3], 4)\n    False\n    \"\"\"\n    s = 0\n    for i in l:\n        s += i\n    return s % m == 0\n\n\ndef sum_is_multiple_of_three_v2(l: list, m: int):\n    \"\"\"Return True if the sum of the numbers in l is a multiple of m.\n    >>> sum_is_multiple_of_three_v2([1, 2, 3], 3)\n    True\n    >>> sum_is_multiple_of_three_v2([1, 2, 3], 4)\n    False\n    \"\"\"\n    return sum(l) % m == 0\n\n\ndef all_in_range(l: list, a: int, b: int):\n    \"\"\"Return True if all numbers in the list l are in the range [a, b].\n    >>> all_in_range([1, 2, 3], 1, 3)\n    True\n    >>> all_in_range([1, 5, 3], 1, 3)\n    False\n    \"\"\"\n    for i in l:\n        if i < a or i > b:\n            return False\n    return True\n\n\ndef all_in_range_v2(l: list, a: int,",
      0.75048828125
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Count the number of items in the list l that are below the threshold t.\n    >>> count_below_threshold([1, 2, 4, 10], 100)\n    4\n    >>> count_below_threshold([1, 20, 4, 10], 5)\n    2\n    \"\"\"\n    count = 0\n    for i in l:\n        if i < t:\n            count += 1\n    return count\n\n\ndef count_string_matches(l: list, s: str):\n    \"\"\"Count the number of items in the list l that match the string s.\n    >>> count_string_matches(['abc', 'abcd', 'abcde', 'ab'], 'abc')\n    2\n    >>> count_string_matches(['abc', 'abcd', 'abcde', 'ab'], 'de')\n    1\n    \"\"\"\n    count = 0\n    for i in l:\n        if i == s:\n            count += 1\n    return count\n\n\ndef count_substring_matches(l: list, s: str):\n    \"\"\"Count the number of times the string s appears in the list l.\n    >>> count_substring_matches(['abc', 'abcd', 'abcde', 'ab'], 'abc')\n    2\n    >>> count_substring_matches(['abc', 'abcd', 'abcde', 'ab'], 'bc')\n    3\n    \"\"\"\n    count = 0\n    for i in l:\n        if s in i:\n            count += 1\n    return count\n\n\ndef get_elements_above_threshold(l: list, t: int):\n    \"\"\"Return a list of numbers in the list l that are above the threshold t.\n    >>> get_elements_above_threshold([1, 2, 4, 10], 100)\n    [10]\n    >>> get_elements_above_threshold([1, 20, 4, 10], 5)\n    [20, 10",
      0.470947265625
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\n\ndef remove_smallest(numbers: list):\n    \"\"\"Return a new list with the smallest value from the original removed.\n    >>> remove_smallest([1, 2, 3])\n    [2, 3]\n    >>> remove_smallest([3, 2, 1])\n    [3, 2]\n    \"\"\"\n    new_list = []\n    smallest = float(\"inf\")\n    for i in numbers:\n        if i < smallest:\n            smallest = i\n    for i in numbers:\n        if i != smallest:\n            new_list.append(i)\n    return new_list\n\n\ndef is_prime(x: int):\n    \"\"\"Return True if x is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(15)\n    False\n    \"\"\"\n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True\n\n\ndef sum_multiples(limit: int, low: int, high: int):\n    \"\"\"Calculates the sum of all multiples of low and high below limit.\n    >>> sum_multiples(6, 3, 5)\n    30\n    >>> sum_multiples(6, 4, 5)\n    20\n    >>> sum_multiples(6, 4, 7)\n    21\n    \"\"\"\n    sum = 0\n    for i in range(1, limit):\n        if i % low == 0 or i % high == 0:\n            sum += i\n    return sum\n\n\ndef find_divisors(x: int):\n    \"\"\"Return a list of the divisors of integer x, not including 1 and x.\n    >>> find_divisors(12)\n    [2, 3, 4, 6]\n    >>> find_divisors(20)\n    [2, 4, 5, 10]\n    \"\"\"\n    divisors = []\n    for i in range(2, x):\n        if x % i == 0:",
      0.283203125
    ],
    [
      "for i in range(len(l)):\n        if l[i] >= t:\n            return False\n    return True\n\n\ndef long_enough(s: str, n: int):\n    \"\"\"Return True if string s is longer than or equal to n characters.\n    >>> long_enough('1234567890', 5)\n    True\n    >>> long_enough('12345', 6)\n    False\n    \"\"\"\n    return len(s) >= n\n\n\ndef has_no_e(s: str):\n    \"\"\"Return True if string s does not contain the letter 'e' or 'E'.\n    >>> has_no_e('hello')\n    True\n    >>> has_no_e('hi, e')\n    False\n    \"\"\"\n    return 'e' not in s and 'E' not in s\n\n\ndef has_no_x(s: str):\n    \"\"\"Return True if string s does not contain the letter 'x' or 'X'.\n    >>> has_no_x('hello')\n    True\n    >>> has_no_x('hi, x')\n    False\n    \"\"\"\n    return 'x' not in s and 'X' not in s\n\n\ndef has_all_numbers(s: str):\n    \"\"\"Return True if string s contains each of the numbers 0, 1, ..., 9.\n    >>> has_all_numbers('1234567890')\n    True\n    >>> has_all_numbers('123xy4567890')\n    False\n    \"\"\"\n    for i in range(10):\n        if str(i) not in s:\n            return False\n    return True\n\n\ndef only_lower(s: str):\n    \"\"\"Return True if string s contains only lowercase letters.\n    >>> only_lower('hello')\n    True\n    >>> only_lower('HELLO')\n    False\n    \"\"\"\n    for i in range(len(s)):\n        if s[i].isupper():\n            return False\n    return True\n\n\ndef no_repeats(s: str):\n    \"\"\"Return True if string s contains only lowercase",
      0.1419677734375
    ],
    [
      "for n in l:\n        if n >= t:\n            return False\n    return True\n\n\ndef only_odd_numbers(l: list):\n    \"\"\"Return True if all numbers in the list l are odd numbers.\n    >>> only_odd_numbers([1, 3, 5, 7])\n    True\n    >>> only_odd_numbers([1, 2, 4, 10])\n    False\n    \"\"\"\n    for n in l:\n        if n % 2 == 0:\n            return False\n    return True\n\n\ndef sum_up_to_20(l: list):\n    \"\"\"Return True if the sum of the numbers in the list l is less than or equal to 20.\n    >>> sum_up_to_20([1, 2, 4, 10])\n    False\n    >>> sum_up_to_20([1, 2, 3, 4])\n    True\n    \"\"\"\n    total = 0\n    for n in l:\n        total += n\n    return total <= 20\n\n\ndef sum_up_to_20_v2(l: list):\n    \"\"\"Return True if the sum of the numbers in the list l is less than or equal to 20.\n    >>> sum_up_to_20([1, 2, 4, 10])\n    False\n    >>> sum_up_to_20([1, 2, 3, 4])\n    True\n    \"\"\"\n    return sum(l) <= 20\n\n\ndef product_up_to_20(l: list):\n    \"\"\"Return True if the product of the numbers in the list l is less than or equal to 20.\n    >>> product_up_to_20([1, 2, 4, 10])\n    False\n    >>> product_up_to_20([1, 2, 3, 4])\n    True\n    \"\"\"\n    total = 1\n    for n in l:\n        total *= n\n    return total <= 20\n\n\ndef product_up_to_20_v2(l: list):\n    \"\"\"Return",
      -0.0311279296875
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef below_threshold2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef below_threshold3(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.04058837890625
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef fibonnaci(n: int):\n    \"\"\"Return the nth Fibonacci number.\n    >>> fibonnaci(10)\n    55\n    >>> fibonnaci(20)\n    6765\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fibonnaci(n - 1) + fibonnaci(n - 2)\n\n\ndef even(n: int):\n    \"\"\"Return the nth even number.\n    >>> even(10)\n    22\n    >>> even(20)\n    44\n    \"\"\"\n    if n == 0:\n        return n\n    return even(n - 1) + 2\n\n\ndef sum_of_squares(n: int):\n    \"\"\"Return the sum of squares from 1 to n.\n    >>> sum_of_squares(5)\n    55\n    >>> sum_of_squares(10)\n    385\n    \"\"\"\n    if n == 0:\n        return n\n    return sum_of_squares(n - 1) + n * n\n\n\ndef sum_of_cubes(n: int):\n    \"\"\"Return the sum of cubes from 1 to n.\n    >>> sum_of_cubes(5)\n    225\n    >>> sum_of_cubes(10)\n    3025\n    \"\"\"\n    if n == 0:\n        return n\n    return sum_of_cubes(n - 1) + n * n * n\n\n\ndef sum_of_even_cubes(n: int):\n    \"\"\"Return the sum of cubes of even numbers from 1 to n.\n    >>> sum_of_even_cubes(5)\n    52\n    >>> sum_of_even_cubes(10)\n    230\n    \"\"\"\n    if n == 0:\n        return n\n    if n % 2 == 0:\n        return sum_of_even_cubes(n - 1",
      -0.09326171875
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef sum_nearby(a: list, b: list):\n    \"\"\"Return the sum of the numbers that are in the same position in both lists.\n    >>> sum_nearby([1, 2, 3, 4], [5, 6, 7, 8])\n    13\n    >>> sum_nearby([1, 2, 3], [5, 6, 7, 8])\n    12\n    \"\"\"\n    sum = 0\n    for i in range(min(len(a), len(b))):\n        sum += a[i] + b[i]\n    return sum\n\n\ndef common_end(a: list, b: list):\n    \"\"\"Return True if both lists have the same first element or the same last\n    element.\n    >>> common_end([1, 2, 3], [7, 3])\n    True\n    >>> common_end([1, 2, 3], [7])\n    False\n    \"\"\"\n    if a[0] == b[0] or a[-1] == b[-1]:\n        return True\n    return False\n\n\ndef reverse(a: list):\n    \"\"\"Return a reversed list.\n    >>> reverse([1, 2, 3])\n    [3, 2, 1]\n    \"\"\"\n    return a[::-1]\n\n\ndef reverse_end(a: list):\n    \"\"\"Reverse the end of a list.\n    >>> reverse_end([1, 2, 3])\n    [1, 2, 3]\n    >>> reverse_end([1, 2, 3, 4, 5])\n    [1, 2, 4, 3, 5]\n    \"\"\"\n    return a[:-2] + reverse(a[-2:])\n\n\ndef max_val(a: list):\n    \"\"\"Return the maximum value in a list.\n    >>> max_val([1, 2, 3, 4])\n    4\n    >>> max_val([1, 2, 3, 4, 5])\n    5",
      -0.16015625
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef largest_factor(n: int) -> int:\n    \"\"\"Return the largest factor of n that is smaller than n.\n    >>> largest_factor(15) # factors are 1, 3, 5\n    5\n    >>> largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40\n    40\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    factor = 1\n    while factor < n:\n        if n % factor == 0:\n            n = n // factor\n        else:\n            factor += 1\n    return factor\n\n\ndef hailstone(n: int) -> None:\n    \"\"\"Print the hailstone sequence starting at n and ending at 1.\n    >>> a = hailstone(10)\n    10\n    5\n    16\n    8\n    4\n    2\n    1\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        print(n)\n\n\ndef dot_product(s: list, t: list) -> int:\n    \"\"\"Return the dot product of s and t.\n\n    >>> dot_product([1, 2, 3], [4, 5, 6])\n    32\n    >>> dot_product([7, 7, 7], [-2, 0, 2])\n    0\n    >>> dot_product([1, 2, 3, 4], [4, 5, 6])\n    Traceback (most recent call last):\n    ValueError: different lengths\n    \"\"\"\n    assert len(s) == len(t), \"different lengths\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    for i in range(len(s)):\n        total += s[i] *",
      -0.207275390625
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef is_multiple_of_three(num: int):\n    \"\"\"Return True if num is a multiple of 3.\n    >>> is_multiple_of_three(6)\n    True\n    >>> is_multiple_of_three(8)\n    False\n    \"\"\"\n    return num % 3 == 0\n\n\ndef is_multiple_of_five(num: int):\n    \"\"\"Return True if num is a multiple of 5.\n    >>> is_multiple_of_five(10)\n    True\n    >>> is_multiple_of_five(30)\n    False\n    \"\"\"\n    return num % 5 == 0\n\n\ndef is_multiple_of_five_or_three(num: int):\n    \"\"\"Return True if num is a multiple of 3 or 5.\n    >>> is_multiple_of_five_or_three(15)\n    True\n    >>> is_multiple_of_five_or_three(12)\n    False\n    \"\"\"\n    return is_multiple_of_three(num) or is_multiple_of_five(num)\n\n\ndef count_multiples_of_three_or_five(n: int) -> int:\n    \"\"\"Return the number of integers from 0 to n, that are a multiple of 3 or 5.\n    >>> count_multiples_of_three_or_five(3)\n    0\n    >>> count_multiples_of_three_or_five(4)\n    1\n    >>> count_multiples_of_three_or_five(10)\n    23\n    >>> count_multiples_of_three_or_five(100)\n    2318\n    \"\"\"\n    total = 0\n    for i in range(n):\n        if is_multiple_of_five_or_three(i):\n            total += 1\n    return total\n\n\ndef sum_multiples_of_three_or_five(n: int) -> int:\n    \"\"\"Return the sum of the integers from 0 to n, that are a multiple of 3 or",
      -0.265625
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef largest_number(l: list):\n    \"\"\"Return the largest number in the list l.\n    >>> largest_number([1, 2, 4, 10])\n    10\n    >>> largest_number([4, 2, 1])\n    4\n    \"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n\n\ndef second_largest(l: list):\n    \"\"\"Return the second largest number in the list l.\n    >>> second_largest([1, 2, 4, 10])\n    4\n    >>> second_largest([4, 2, 1])\n    2\n    \"\"\"\n    max_num = l[0]\n    second_max_num = l[1]\n    for num in l:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif num > second_max_num and num != max_num:\n            second_max_num = num\n    return second_max_num\n\n\ndef median(l: list):\n    \"\"\"Return the median of the list l.\n    >>> median([1, 2, 4, 10])\n    4\n    >>> median([1, 2, 4])\n    2.5\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[int(len(l)/2)]\n    else:\n        return (l[int(len(l)/2)] + l[int(len(l)/2) - 1])/2\n\n\ndef average(l: list):\n    \"\"\"Return the average of the list l.\n    >>> average([1, 2, 4, 10])\n    4.75\n    \"\"\"\n    sum_num = 0\n    for num in l:\n        sum_num += num\n    return sum_num/len(l)\n\n\ndef even_length(l: list):",
      -0.284912109375
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef below_threshold_v2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)\n\n\ndef below_threshold_v3(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return not any(num >= t for num in l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.296630859375
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n\n\ndef cliffs_delta(lst1, lst2, delta: float):\n    \"\"\"Returns whether the two lists are within a delta of each other.\n    The statement below states that if two elements are both below threshold,\n    or both above threshold, they do not violate the delta.\n\n    >>> cliffs_delta([1, 2, 3, 4], [1, 2, 3, 4], 0.1)\n    True\n\n    If a single element violates the threshold, the whole statement is false.\n\n    >>> cliffs_delta([1, 2, 3, 5], [1, 2, 3, 4], 0.1)\n    False\n\n    If more than a single element violates the threshold, the whole statement is false.\n\n    >>> cliffs_delta([1, 2, 10, 5], [1, 2, 3, 4], 0.1)\n    False\n\n    If the two lists have a different number of elements, the whole statement is false.\n\n    >>> cliffs_delta([1, 2, 3, 4], [1, 2, 3, 4, 5], 0.1)\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef weather_type(day: dict):\n    \"\"\"Returns the type of the day depending on the weather conditions.\n    >>> weather_type({'temp': 70, 'rain': 0, 'sun': 1000})\n    'hot'\n    >>> weather_type({'temp': 40, 'rain': 0, 'sun': 1000})\n    'cold'\n    >>> weather_type({'temp': 70, 'rain': 1.9, 'sun': 1000})\n    'hot and rainy'\n    >>> weather_type({'temp': 70, 'rain': 0, 'sun': 500})\n    'hot and overcast'\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"",
      -0.401123046875
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef single_list_comprehension(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n\ndef double_list_comprehension(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.42626953125
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef single_list_merge(l1: list, l2: list):\n    \"\"\"Merge two lists alternately.\n    >>> single_list_merge([1, 2, 3], [4, 5, 6])\n    [1, 4, 2, 5, 3, 6]\n    \"\"\"\n    l = []\n    for i in range(min(len(l1), len(l2))):\n        l.append(l1[i])\n        l.append(l2[i])\n    if len(l1) > len(l2):\n        l.extend(l1[len(l2):])\n    if len(l2) > len(l1):\n        l.extend(l2[len(l1):])\n    return l\n\n\ndef double_list_merge(l1: list, l2: list):\n    \"\"\"Merge two lists alternately.\n    >>> double_list_merge([1, 2, 3], [4, 5, 6])\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    l = []\n    for i in range(min(len(l1), len(l2))):\n        l.append([l1[i], l2[i]])\n    if len(l1) > len(l2):\n        l.extend([l1[len(l2) + i] for i in range(len(l1) - len(l2))])\n    if len(l2) > len(l1):\n        l.extend([l2[len(l1) + i] for i in range(len(l2) - len(l1))])\n    return l\n\n\ndef rotate_list(l: list, n: int):\n    \"\"\"Rotate a list n positions.\n    >>> rotate_list([1, 2, 3, 4, 5], 2)\n    [4, 5, 1, 2, 3]\n    \"\"\"\n    if n == 0:\n        return l",
      -0.53662109375
    ],
    [
      "for item in l:\n        if item >= t:\n            return False\n    return True\n\n\ndef is_reverse(w1: str, w2: str) -> bool:\n    \"\"\"Return True if the letters in w1 are the reverse of w2.\n    >>> is_reverse('god', 'dog')\n    True\n    >>> is_reverse('cat', 'tca')\n    True\n    >>> is_reverse('dog', 'cat')\n    False\n    >>> is_reverse('dog', 'odg')\n    False\n    \"\"\"\n    if len(w1) != len(w2):\n        return False\n    i = 0\n    j = len(w2) - 1\n    while i <= j:\n        if w1[i] != w2[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n\ndef without_vowels(s: str) -> str:\n    \"\"\"Return a string that does not contain any vowels, per the rules above.\n    >>> without_vowels('Hey, How are you?')\n    'Hy, Hw r y?'\n    \"\"\"\n    vowels = 'aeiou'\n    result = ''\n    for c in s:\n        if c.lower() in vowels:\n            continue\n        result += c\n    return result\n\n\ndef double_char(s: str) -> str:\n    \"\"\"Return a string where each character (case-sensitive) that\n    appears in the string more than once is replaced with two copies\n    of that character.\n    >>> double_char('Mississippi')\n    'MisissisIssIssippi'\n    >>> double_char('Hello')\n    'HellHellello'\n    \"\"\"\n    result = ''\n    for c in s:\n        if c not in result:\n            result += c\n        else:\n            result += c * 2\n    return result\n\n\ndef count_code(s: str) -> int:\n    \"\"\"Return the number of non-overlapping instances of the\n    string 'code' in the string s.\n    >>> count_code('aaaacodeeecabc')",
      -0.65771484375
    ],
    [
      "for num in l:\n        if num > t:\n            return False\n    return True\n\n\ndef long_enough(words: list, min_length: int):\n    \"\"\"Return a list of words that are at least min_length characters long.\n    >>> long_enough(['cat', 'dog', 'rabbit', 'feet', 'pig'], 3)\n    ['cat', 'dog', 'rabbit']\n    \"\"\"\n    return [word for word in words if len(word) >= min_length]\n\n\ndef has_no_e(word: str):\n    \"\"\"Return True if the given word doesn't have the letter 'e' in it.\n    >>> has_no_e('super')\n    True\n    >>> has_no_e('exuberant')\n    False\n    \"\"\"\n    for letter in word:\n        if letter == 'e':\n            return False\n    return True\n\n\ndef make_tags(tag, words):\n    \"\"\"Return a new list containing each of the words, but each word is\n    preceded (not followed) by the given tag.\n    >>> make_tags('<3', ['such', 'very', 'much', 'love'])\n    ['<3such', '<3very', '<3much', '<3love']\n    \"\"\"\n    return [f'{tag}{word}' for word in words]\n\n\ndef every_other(list):\n    \"\"\"Returns a new list containing every other element of the input list,\n    starting with the first one.\n    >>> every_other([1, 2, 3, 4, 5, 6, 7, 8])\n    [1, 3, 5, 7]\n    \"\"\"\n    return [list[i] for i in range(len(list)) if i % 2 == 0]\n\n\ndef has_no_long_words(sentence, max_len):\n    \"\"\"Return True if the given sentence has no word longer than max_len.\n    has_no_long_words('i am a mouse', 4)\n    False\n    \"\"\"\n    for word in sentence.split():\n        if len(word) > max_len:\n            return",
      -0.8232421875
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True",
      -0.85693359375
    ],
    [
      "for num in l:\n        if num > t:\n            return False\n    return True\n\n\ndef below_threshold_v2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num <= t for num in l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef long_enough(s: str, n: int):\n    \"\"\"Return True if the string s is longer than n characters.\n    >>> long_enough('1234567890', 5)\n    True\n    >>> long_enough('12345', 6)\n    False\n    \"\"\"\n    return len(s) >= n",
      -0.85693359375
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n    return True",
      -0.85693359375
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    _test()",
      -0.85693359375
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    _test()",
      -0.85693359375
    ],
    [
      "return all(i < t for i in l)\n\n\nprint(below_threshold([1, 2, 4, 10], 100))\nprint(below_threshold([1, 20, 4, 10], 5))",
      -0.85693359375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for n in l:\n        if n > t:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for item in l:\n        if item >= t:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    _test()",
      -0.85693359375
    ],
    [
      "return all(i < t for i in l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True",
      -0.85693359375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    _test()",
      -0.85693359375
    ],
    [
      "for n in l:\n        if n >= t:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for i in l:\n        if i >= t:\n            return False\n    return True",
      -0.85693359375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    import python_ta\n    python_ta.check_all(config={\n        'max-line-length': 100,\n        'disable': ['E1136'],\n        'extra-imports': ['python_ta.contracts', 'random']\n    })\n\n    # Uncomment the line below to take a trial run of your program\n    # with python_ta.ct.doctest_trial() in place of python_ta.check_all().\n    # python_ta.ct.doctest_trial()",
      -0.85693359375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    print(below_threshold([1, 2, 4, 10], 100))\n    print(below_threshold([1, 20, 4, 10], 5))\n    print(below_threshold([1, 20, 4, 10], 15))",
      -0.85693359375
    ],
    [
      "return all(i < t for i in l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n    return True\n\n\n\ndef fibonacci(n: int):\n    \"\"\"Return the nth Fibonacci number.\n    >>> fibonacci(100)\n    354224848179261915075\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(30)\n    102334155\n    >>> fibonacci(31)\n    1073741824\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
      -0.8583984375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n\n\ndef right_floored_sqrt(n: int):\n    \"\"\"Return the right floored square root of n.\n    >>> right_floored_sqrt(9)\n    3\n    >>> right_floored_sqrt(16)\n    4\n    >>> right_floored_sqrt(26)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef prod(l: list):\n    \"\"\"Return the product of the numbers in list l.\n    >>> prod([1, 2, 4, 10])\n    100\n    >>> prod([1, 2, 4, 0])\n    0\n    >>> prod([])\n    Traceback (most recent call last):\n    ...\n    ValueError: list is empty\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"",
      -0.8583984375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True",
      -0.8583984375
    ],
    [
      "for number in l:\n        if number >= t:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "for n in l:\n        if n > t:\n            return False\n    return True",
      -0.8583984375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True",
      -0.8583984375
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef find_approximate_median(l: list):\n    \"\"\"Return the approximate median of l.\n    >>> find_approximate_median([1, 2, 4, 10, 11, 12])\n    7\n    \"\"\"\n    n = len(l)\n    t = n // 2\n    if below_threshold(l, t):\n        return t\n    return t - 1\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n    l = [1, 2, 4, 10, 11, 12]\n    print(find_approximate_median(l))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True",
      -0.85888671875
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef linear_search(l: list, t: int):\n    \"\"\"Returns the index of the first occurence of t in l, or None if not found.\n    >>> linear_search([1, 2, 4, 10, 20, 50], 10)\n    3\n    >>> linear_search([1, 2, 4, 10, 20, 50], 50)\n    5\n    >>> linear_search([1, 2, 4, 10, 20, 50], 21)\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] == t:\n            return i\n    return None\n\n\ndef binary_search(l: list, t: int):\n    \"\"\"Returns the index of the first occurence of t in l, or None if not found.\n    >>> binary_search([1, 2, 4, 10, 20, 50], 10)\n    3\n    >>> binary_search([1, 2, 4, 10, 20, 50], 50)\n    5\n    >>> binary_search([1, 2, 4, 10, 20, 50], 21)\n    \"\"\"\n    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i <= j:\n        m = (i + j) // 2\n        if l[m] == t:\n            return m\n        elif l[m] < t:\n            i = m + 1\n        else:\n            j = m - 1\n    return None\n\n\ndef binary_search_recursive(l: list, t: int, i: int, j: int):\n    \"\"\"Returns the index of the first occurence of t in l, or None if not found.\n    >>> binary_search_recursive([1, 2, 4, 10, 20, 50], 10, 0, 5)",
      -0.95263671875
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n\n\ndef max_in_list(l: list):\n    \"\"\"Return the maximum value from the given list.\n    >>> max_in_list([1, 2, 4, 10])\n    10\n    >>> max_in_list([100, 20, 4, 10])\n    100\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return max(l)\n\n\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of elements in the given list that are below the given threshold.\n    >>> count_below_threshold([1, 2, 4, 10], 100)\n    4\n    >>> count_below_threshold([100, 20, 4, 10], 5)\n    2\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for i in l:\n        if i < t:\n            count += 1\n    return count\n\n\n\ndef count_below_threshold_in_list(l1: list, l2: list, t: int):\n    \"\"\"Return the number of elements in the first list that are below the given threshold and occur in the second list.\n    >>> count_below_threshold_in_list([1, 2, 4, 10], [100, 20, 4], 5)\n    1\n    >>> count_below_threshold_in_list([100, 20, 4, 10], [100, 20, 4], 5)\n    2\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for i in l1:\n        if i < t and i in l2:\n            count += 1\n    return count\n\n\n\ndef count_below_threshold_in_list_with_duplicates(l1: list, l2: list, t: int",
      -1.03125
    ],
    [
      "for n in l:\n        if n >= t:\n            return False\n    return True\n\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of elements in the list l that are below threshold t.\n    >>> count_below_threshold([1, 2, 4, 10], 100)\n    4\n    >>> count_below_threshold([1, 20, 4, 10], 5)\n    3\n    \"\"\"\n    c = 0\n    for n in l:\n        if n < t:\n            c += 1\n    return c\n\n\ndef index_of_smallest(l: list):\n    \"\"\"Return the index of the smallest element of list l.\n    >>> index_of_smallest([1, 2, 4, 10, 15, 20])\n    3\n    \"\"\"\n    # The following list comprehension is equivalent to:\n    # index = len(l)\n    # smallest = l[0]\n    # for i in range(1, len(l)):\n    #     if l[i] < smallest:\n    #         index = i\n    #         smallest = l[i]\n    # return index\n    index = [i for i, n in enumerate(l) if n == min(l)]\n    return index[0]\n\n\ndef index_of_largest(l: list):\n    \"\"\"Return the index of the largest element of list l.\n    >>> index_of_largest([1, 2, 4, 10, 15, 20])\n    5\n    \"\"\"\n    # The following list comprehension is equivalent to:\n    # index = len(l)\n    # largest = l[0]\n    # for i in range(1, len(l)):\n    #     if l[i] > largest:\n    #         index = i\n    #         largest = l[i]\n    # return index\n    index = [i for i, n in enumerate(l) if n == max(l)]\n    return index[0]\n\n\ndef index_of_median(l: list):\n    \"\"\"",
      -1.126953125
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef long_enough(words: list, min_length: int):\n    \"\"\"Return a list of words that are at least min_length characters long.\n    >>> long_enough(['cat', 'dog', 'rabbit', 'fish'], 3)\n    ['cat', 'dog', 'fish']\n    \"\"\"\n    l = []\n    for i in words:\n        if len(i) >= min_length:\n            l.append(i)\n    return l\n\n\ndef has_no_e(word: str):\n    \"\"\"Return True if word contains no 'e' letter.\n    >>> has_no_e('python')\n    True\n    >>> has_no_e('ruby')\n    False\n    \"\"\"\n    for i in word:\n        if i == 'e':\n            return False\n    return True\n\n\ndef has_no_x(word: str):\n    \"\"\"Return True if word contains no 'x' letter.\n    >>> has_no_x('python')\n    False\n    >>> has_no_x('ruby')\n    True\n    \"\"\"\n    for i in word:\n        if i == 'x':\n            return False\n    return True\n\n\ndef has_all(word: str, letters: str):\n    \"\"\"Return True if word contains all letters.\n    Precondition: letters has no duplicates.\n    >>> has_all('apple', 'ppla')\n    True\n    >>> has_all('apple', 'pla')\n    False\n    \"\"\"\n    for i in letters:\n        if i not in word:\n            return False\n    return True\n\n\ndef is_reverse(w1: str, w2: str):\n    \"\"\"Return True if the letters of w1 are the reverse of w2.\n    >>> is_reverse('step', 'pests')\n    True\n    >>> is_reverse('step', 'pest')\n    False\n    \"\"\"\n    if len(w1) != len(w2):\n        return False\n    return w1 == w2[::-1]\n\n\ndef string_times(word: str, n: int):\n    \"\"\"Return",
      -1.302734375
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return a list with all numbers in l that are above or equal to threshold t.\n    >>> above_threshold([1, 2, 4, 10], 4)\n    [4, 10]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    l1 = []\n    for i in l:\n        if i >= t:\n            l1.append(i)\n    return l1\n\n\ndef length_gt_2(l: list):\n    \"\"\"Return a list with all elements of l that are lists with a length > 2.\n    >>> length_gt_2([1, 2, 3, [3, 4, 5], [[1, 2], 3, 4], 5])\n    [[3, 4, 5], [[1, 2], 3, 4]]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    l1 = []\n    for i in l:\n        if isinstance(i, list) and len(i) > 2:\n            l1.append(i)\n    return l1\n\n\ndef length_eq_2(l: list):\n    \"\"\"Return a list with all elements of l that are lists with a length == 2.\n    >>> length_eq_2([1, 2, 3, [3, 4, 5], [[1, 2], 3, 4], 5])\n    [[3, 4, 5]]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    l1 = []\n    for i in l:\n        if isinstance(i, list) and len(i) == 2:\n            l1.append(i)\n    return l1\n\n\ndef length_lt_2(l: list):\n    \"\"\"Return a list with all elements of l that are lists with a length < 2.\n    >>> length_lt_2([1, 2, 3, [",
      -1.3525390625
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef long_enough(s: str, n: int):\n    \"\"\"Return True if the length of the string s is greater than or equal to n.\n    >>> long_enough('word', 3)\n    True\n    >>> long_enough('word', 8)\n    False\n    \"\"\"\n    return len(s) >= n\n\n\ndef has_no_e(s: str):\n    \"\"\"Return True if the given string contains no 'e' characters.\n    >>> has_no_e('hello')\n    False\n    >>> has_no_e('hi')\n    True\n    >>> has_no_e('tee')\n    False\n    \"\"\"\n    return 'e' not in s\n\n\ndef has_no_x(s: str):\n    \"\"\"Return True if the given string contains no 'x' characters.\n    >>> has_no_x('hello')\n    True\n    >>> has_no_x('hi')\n    True\n    >>> has_no_x('tee')\n    False\n    \"\"\"\n    return 'x' not in s\n\n\ndef only_lower(s: str):\n    \"\"\"Return True if the given string contains only lowercase characters.\n    >>> only_lower('hello')\n    True\n    >>> only_lower('HELLO')\n    False\n    >>> only_lower('heLLo')\n    False\n    \"\"\"\n    for c in s:\n        if c.isupper():\n            return False\n    return True\n\n\ndef only_upper(s: str):\n    \"\"\"Return True if the given string contains only uppercase characters.\n    >>> only_upper('HELLO')\n    True\n    >>> only_upper('heLLo')\n    False\n    \"\"\"\n    for c in s:\n        if c.islower():\n            return False\n    return True\n\n\ndef has23(n: int):\n    \"\"\"Return True if the given integer contains a 2 or 3.\n    >>> has23(12)\n    True\n    >>> has23(7)\n    False\n    \"\"\"\n    return n % 10 ==",
      -1.3876953125
    ],
    [
      "for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef first_over_threshold(l: list, t: int):\n    \"\"\"Return the first element in l that is over threshold t.\n    >>> first_over_threshold([1, 2, 4, 10], 4)\n    4\n    >>> first_over_threshold([1, 20, 4, 10], 17)\n    20\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return i\n\n\ndef length_of_run(l: list, t: int):\n    \"\"\"Return the length of the longest run of elements below threshold t.\n    >>> length_of_run([1, 4, 2, 3], 5)\n    1\n    >>> length_of_run([4, 3, 2, 5, 7], 4)\n    3\n    \"\"\"\n    count = 0\n    max_count = 0\n    for i in l:\n        if i < t:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count",
      -1.40625
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef middle(t: tuple):\n    \"\"\"Return the middle element of a tuple t.\n    >>> middle((1, 2, 3))\n    2\n    >>> middle((1, 3, 2))\n    2\n    >>> middle((3, 2, 1))\n    2\n    \"\"\"\n    return t[len(t) // 2]\n\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if string s is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('nurses run')\n    False\n    >>> is_palindrome('aabbcc')\n    False\n    >>> is_palindrome(' ')\n    True\n    >>> is_palindrome('a')\n    True\n    \"\"\"\n    if len(s) < 2:\n        return True\n    if s[0] != s[-1]:\n        return False\n    return is_palindrome(s[1:-1])\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(27883)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef dot(v: list, w: list):\n    \"\"\"Return the dot product of v and w.\n    >>> dot([1, 2, 3], [4, 5, 6])\n    32\n    >>> dot([7, 7, 7], [-2, 0, 2])\n    0\n    >>> dot([1, 0, 0, 0], [1, 1, 1, 1])\n    0\n    \"\"\"\n    return sum(x * y for x, y in zip(v, w))\n\n\ndef zeroes(m",
      -1.4873046875
    ],
    [
      "for n in l:\n        if n >= t:\n            return False\n    return True\n\n\ndef sum_nearby_numbers(l: list, t: int):\n    \"\"\"Return the sum of the numbers in l which are within threshold t\n    of any number in l.\n    >>> sum_nearby_numbers([1, 2, 3, 4], 0)\n    0\n    >>> sum_nearby_numbers([1, 2, 3, 4], 1)\n    6\n    >>> sum_nearby_numbers([1, 2, 3, 4], 2)\n    9\n    \"\"\"\n    total = 0\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if abs(l[i] - l[j]) <= t:\n                total += l[i]\n    return total\n\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of numbers in l that are below threshold t.\n    >>> count_below_threshold([1, 2, 3, 4], 0)\n    0\n    >>> count_below_threshold([1, 2, 3, 4], 1)\n    3\n    >>> count_below_threshold([1, 2, 3, 4], 2)\n    6\n    \"\"\"\n    total = 0\n    for n in l:\n        if n < t:\n            total += 1\n    return total\n\n\ndef count_range(l: list, a: int, b: int):\n    \"\"\"Return the number of numbers in l that are within the range [a, b]\n    (inclusive).\n    >>> count_range([1, 2, 3, 4], 1, 3)\n    3\n    >>> count_range([1, 2, 3, 4], 1, 2)\n    2\n    >>> count_range([1, 2, 3, 4], 2, 3)\n    1\n    >>> count_range([1, 2, 3, 4], 3, 4)\n    0\n    \"\"\"",
      -1.6826171875
    ],
    [
      "for n in l:\n        if n >= t:\n            return False\n    return True\n\n\ndef only_numbers(l: list):\n    \"\"\"Return a new list that contains each number in l that is only a number.\n    >>> only_numbers([1, 2, 4, 'a', 10, 15])\n    [1, 2, 4, 10, 15]\n    \"\"\"\n    new_list = []\n    for n in l:\n        if type(n) == int:\n            new_list.append(n)\n    return new_list\n\n\ndef multiples_3_5(l: list):\n    \"\"\"Return a new list that contains each number in l that is a multiple\n    of 3 or 5, but not both.\n    >>> multiples_3_5([3, 5, 6, 9, 10, 12, 15, 18, 21, 24])\n    [6, 9, 12, 18, 21]\n    \"\"\"\n    new_list = []\n    for n in l:\n        if n % 3 == 0 or n % 5 == 0:\n            new_list.append(n)\n    return new_list\n\n\ndef count_multiples_3_5(l: list):\n    \"\"\"Return the number of integers in l that are a multiple of 3 or 5, but\n    not both.\n    >>> count_multiples_3_5([3, 5, 6, 9, 10, 12, 15, 18, 21, 24])\n    5\n    \"\"\"\n    count = 0\n    for n in l:\n        if n % 3 == 0 or n % 5 == 0:\n            count += 1\n    return count\n\n\ndef count_letters(s: str):\n    \"\"\"Return a dictionary of all the letters in s, and their frequencies.\n    >>> count_letters('aaabbc')\n    {'a': 3, 'b': 2, 'c': 1}\n    \"\"\"\n    result = {}",
      -1.7412109375
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef long_enough(words: list, min_length: int):\n    \"\"\"Return a list of words from the given list that are at least min_length\n    characters long.\n    >>> long_enough(['cat', 'dog', 'rabbit', 'food'], 3)\n    ['cat', 'dog', 'food']\n    \"\"\"\n    return [word for word in words if len(word) >= min_length]\n\n\ndef has_no_e(word: str):\n    \"\"\"Return True if the given word contains no 'e' letter.\n    >>> has_no_e('apple')\n    True\n    >>> has_no_e('peach')\n    False\n    \"\"\"\n    return 'e' not in word\n\n\ndef every_other(words: list):\n    \"\"\"Return a list of every other word in the given list.\n    >>> every_other(['I', 'like', 'cheese', 'cake'])\n    ['cake']\n    \"\"\"\n    return [words[i] for i in range(0, len(words), 2)]\n\n\ndef has_no_x(words: list):\n    \"\"\"Return a list of words that do not have the letter 'x' in them.\n    >>> has_no_x(['xenon', 'radon', 'francium'])\n    ['radon', 'francium']\n    \"\"\"\n    return [word for word in words if 'x' not in word]\n\n\ndef has_no_double_letters(words: list):\n    \"\"\"Return a list of words that do not contain two of the same letter next\n    to each other, appearing in the same word.\n    >>> has_no_double_letters(['hello', 'world', 'python'])\n    ['hello']\n    \"\"\"\n    return [word for word in words if len(set(word)) == len(word)]\n\n\ndef has_no_a(words: list):\n    \"\"\"Return a list of words that do not have the letter 'a' in them.\n    >>> has_no_a(['apple', 'bear', 'cheese'])\n    ['b",
      -1.7978515625
    ],
    [
      "for num in l:\n        if num > t:\n            return False\n    return True\n\n\ndef has_size(l: list, n: int):\n    \"\"\"Returns True if list l has size n.\n    >>> has_size([1, 2, 3, 4, 5], 5)\n    True\n    >>> has_size([1, 2, 3, 4, 5], 10)\n    False\n    \"\"\"\n    if len(l) == n:\n        return True\n    return False\n\n\ndef sum_multiples(l: list, n: int):\n    \"\"\"Returns the sum of all elements of l that are multiples of n.\n    >>> sum_multiples([4, 9, 10, 24, 3, 5], 3)\n    27\n    >>> sum_multiples([4, 9, 10, 24, 3, 5], 5)\n    45\n    \"\"\"\n    total = 0\n    for num in l:\n        if num % n == 0:\n            total += num\n    return total\n\n\ndef is_prime(n: int):\n    \"\"\"Returns True if n is a prime number.\n    >>> is_prime(561)\n    False\n    >>> is_prime(11)\n    True\n    \"\"\"\n    # if n < 2, it is not prime\n    if n < 2:\n        return False\n    # check for factors\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_sum(n: int):\n    \"\"\"Returns the sum of all prime numbers below n.\n    >>> prime_sum(10)\n    17\n    >>> prime_sum(500)\n    1229\n    \"\"\"\n    total = 0\n    for num in range(2, n):\n        if is_prime(num):\n            total += num\n    return total\n\n\ndef is_palindrome(n: int):\n    \"\"\"Returns True if n is a palindrome.\n    >>> is_palindrome(",
      -1.9638671875
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef same_first_last(L: list):\n    \"\"\"Return True if the first element in L is the same as the last element in L.\n    >>> same_first_last([1, 2, 3])\n    False\n    >>> same_first_last([1, 2, 3, 1])\n    True\n    \"\"\"\n    return L[0] == L[-1]\n\n\ndef make_pairs(L: list):\n    \"\"\"Modify the given list by replacing each element by a list containing\n    that element's pair in a cycle. If the length of the list is odd, the\n    missing element is appended to the end.\n    >>> make_pairs([1, 2, 3, 4, 5, 6])\n    [[2, 3], [4, 5], [6, 1]]\n    >>> make_pairs([3, 8, 1, 2])\n    [[8, 1], [2, 3]]\n    \"\"\"\n    if len(L) % 2 == 1:\n        L.append(L[0])\n    for i in range(len(L)):\n        L[i] = [L[i], L[i+1]]\n\n\ndef reverse(L: list):\n    \"\"\"Reverse the given list in place by modifying it.\n    >>> L = ['a', 'b', 'c']\n    >>> reverse(L)\n    >>> L\n    ['c', 'b', 'a']\n    \"\"\"\n    for i in range(len(L)//2):\n        L[i], L[-i-1] = L[-i-1], L[i]\n\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if the given string is a palindrome.\n    >>> is_palindrome('tacocat')\n    True\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('robert')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef compress(s: str):\n    \"\"\"Com",
      -1.990234375
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef only_odd_numbers(l: list):\n    \"\"\"Return True if all numbers in the list l are odd.\n    >>> only_odd_numbers([1, 3, 5, 7])\n    True\n    >>> only_odd_numbers([1, 3, 5, 8])\n    False\n    \"\"\"\n    for num in l:\n        if num % 2 == 0:\n            return False\n    return True\n\n\ndef sum_nearby_numbers(l: list, t: int):\n    \"\"\"Return the sum of all numbers in the list l that are within threshold t\n    of any other number in the list.\n    >>> sum_nearby_numbers([8, 10, 12, 14], 2)\n    40\n    >>> sum_nearby_numbers([8, 10, 12, 14], 4)\n    36\n    \"\"\"\n    total = 0\n    for num1 in l:\n        for num2 in l:\n            if abs(num1 - num2) <= t:\n                total += num1\n                total += num2\n    return total\n\n\ndef has_two_odds(l: list):\n    \"\"\"Return True if the list l contains at least two odd numbers.\n    >>> has_two_odds([1, 3, 5, 7])\n    True\n    >>> has_two_odds([1, 2, 4, 6])\n    False\n    \"\"\"\n    odd_counter = 0\n    for num in l:\n        if num % 2 == 1:\n            odd_counter += 1\n        if odd_counter == 2:\n            return True\n    return False",
      -2.01953125
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef fastest_unsorted_slice_index(l: list, t: int):\n    \"\"\"Return the index of the first element in l that is above the threshold t.\n    >>> fastest_unsorted_slice_index([1, 2, 4, 10], 5)\n    2\n    >>> fastest_unsorted_slice_index([1, 20, 4, 10], 15)\n    1\n    \"\"\"\n    i = 0\n    while i < len(l) and below_threshold(l[:i], t):\n        i += 1\n    return i\n\n\ndef fastest_sorted_slice_index(l: list, t: int):\n    \"\"\"Return the index of the first element in l that is above the threshold t.\n    >>> fastest_sorted_slice_index([1, 2, 4, 10], 5)\n    0\n    >>> fastest_sorted_slice_index([1, 20, 4, 10], 15)\n    2\n    \"\"\"\n    low = 0\n    high = len(l) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if l[mid] < t:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.2109375
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\ndef cliff_walking(cliff: list, n: int):\n    \"\"\"\n    >>> cliff_walking([[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 1]], 3)\n    2\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    for i in range(n):\n        for j in range(len(cliff[i])):\n            if j + 1 <= len(cliff[i]) - 1 and cliff[i][j] == 0 and cliff[i][j + 1] == 1:\n                cliff[i][j] = 1\n            if i + 1 <= len(cliff) - 1 and cliff[i][j] == 0 and cliff[i + 1][j] == 1:\n                cliff[i][j] = 1\n    return len(cliff) - sum(cliff)\n\ndef closest_power_of_two(x: float):\n    \"\"\"Return the closest power of two to x.\n\n    >>> closest_power_of_two(10)\n    16\n    >>> closest_power_of_two(16)\n    16\n    >>> closest_power_of_two(256)\n    256\n    >>> closest_power_of_two(257)\n    512\n    >>> closest_power_of_two(258)\n    512\n    >>> closest_power_of_two(300)\n    512\n    >>> closest_power_of_two(1)\n    2\n    >>> closest_power_of_two(2)\n    2\n    >>> closest_power_of_two(3)\n    4\n    >>> closest_power_of_two(4)\n    4\n    >>> closest_power_of_two(5)\n    8\n    >>> closest_power_of_two(6)\n    8\n    >>> closest",
      -2.2421875
    ],
    [
      "for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(101)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % 5 == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_prime_v2(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime_v2(101)\n    True\n    >>> is_prime_v2(12)\n    False\n    >>> is_prime_v2(4)\n    False\n    >>> is_prime_v2(1)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef prime_sum(n: int):\n    \"\"\"Return the sum of all prime numbers less than n.\n    >>> prime_sum(10)\n    17\n    >>> prime_sum(50)\n    101\n    >>> prime_sum(100)\n    229\n    \"\"\"\n    sum = 0\n    for i in range(2, n):\n        if is_prime(i):\n            sum += i\n    return sum\n\n\ndef prime_sum_v2(n: int):\n    \"\"\"Return the sum",
      -2.267578125
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef only_odd_numbers(l: list):\n    \"\"\"Return True if all numbers in the list l are odd.\n    >>> only_odd_numbers([1, 3, 5, 7])\n    True\n    >>> only_odd_numbers([1, 3, 5, 7, 9])\n    False\n    \"\"\"\n    for x in l:\n        if x % 2 == 0:\n            return False\n    return True\n\n\ndef all_same_sign(l: list):\n    \"\"\"Return True if all numbers in the list l have the same sign.\n    >>> all_same_sign([1, 3, -5, -7])\n    True\n    >>> all_same_sign([1, 3, -5, 7])\n    False\n    \"\"\"\n    for x in l:\n        if x < 0:\n            return False\n    return True\n\n\ndef sum_digits(n: int):\n    \"\"\"Return the sum of the digits of positive integer n.\n    >>> sum_digits(10) # 1 + 0 = 1\n    1\n    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n\n\ndef count_evens(l: list):\n    \"\"\"Return the number of even numbers in the list l.\n    >>> count_evens([2, 1, 2, 3, 4])\n    3\n    >>> count_evens([2, 2, 0])\n    3\n    >>> count_evens([1, 3, 5])\n    0\n    \"\"\"\n    count = 0\n    for x in l:\n        if x % 2 == 0:\n            count += 1\n    return count\n\n\ndef product(l: list):\n    \"\"\"Return the product of the numbers in the list l.\n    >>> product([1,",
      -2.291015625
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef sum_digits(s: str):\n    \"\"\"Sum the digits of the integer represented by s.\n    >>> sum_digits('100')\n    1\n    >>> sum_digits('999')\n    27\n    \"\"\"\n    return int(s)\n\n\ndef count_even_digits(s: str):\n    \"\"\"Count the number of even digits in s.\n    >>> count_even_digits('123')\n    1\n    >>> count_even_digits('222')\n    3\n    \"\"\"\n    return 0\n\n\ndef get_hundreds_digit(s: str):\n    \"\"\"Return the hundreds digit of s.\n    >>> get_hundreds_digit('72')\n    7\n    >>> get_hundreds_digit('017')\n    0\n    \"\"\"\n    return int(s[0])\n\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if the letters in s form a palindrome.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('dented')\n    False\n    \"\"\"\n    return True\n\n\ndef has_more_seven(s: str):\n    \"\"\"Return whether the string s contains more occurrences of '7' than '6'.\n    >>> has_more_seven('666')\n    False\n    >>> has_more_seven('767676')\n    True\n    >>> has_more_seven('77777777')\n    True\n    \"\"\"\n    return False\n\n\ndef is_prime(n: int):\n    \"\"\"Return whether or not n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(16)\n    False\n    >>> is_prime(521)\n    True\n    \"\"\"\n    return False\n\n\ndef is_square(n: int):\n    \"\"\"Return whether n is the square of any integer.\n    >>>",
      -2.458984375
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of elements in l that are below threshold t.\n    >>> count_below_threshold([1, 2, 4, 10], 100)\n    4\n    >>> count_below_threshold([1, 20, 4, 10], 5)\n    2\n    \"\"\"\n    count = 0\n    for num in l:\n        if num < t:\n            count += 1\n    return count\n\n\ndef index_of_smallest(l: list):\n    \"\"\"Return the index of the smallest element of l.\n    >>> index_of_smallest([20, 3, -6, 100])\n    1\n    \"\"\"\n    smallest = l[0]\n    smallest_index = 0\n    for i in range(len(l)):\n        if l[i] < smallest:\n            smallest = l[i]\n            smallest_index = i\n    return smallest_index\n\n\ndef index_of_largest(l: list):\n    \"\"\"Return the index of the largest element of l.\n    >>> index_of_largest([20, 3, -6, 100])\n    3\n    \"\"\"\n    largest = l[0]\n    largest_index = 0\n    for i in range(len(l)):\n        if l[i] > largest:\n            largest = l[i]\n            largest_index = i\n    return largest_index\n\n\ndef index_of_smallest_fast(l: list):\n    \"\"\"Return the index of the smallest element of l.\n    >>> index_of_smallest_fast([20, 3, -6, 100])\n    1\n    \"\"\"\n    smallest = l[0]\n    smallest_index = 0\n    smallest_index_fast = 0\n    for i in range(len(l)):\n        if l[i] < smallest:\n            smallest = l[i]\n            smallest_index = i\n        if l[i] <",
      -3.064453125
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef long_enough(s: str, n: int):\n    \"\"\"Return True if the string s is longer than n characters.\n    >>> long_enough('1234567890', 5)\n    True\n    >>> long_enough('12345', 6)\n    False\n    \"\"\"\n    return len(s) > n\n\n\ndef has_no_e(s: str):\n    \"\"\"Return True if the given string contains no 'e' letter.\n    >>> has_no_e('abc')\n    True\n    >>> has_no_e('abcde')\n    False\n    \"\"\"\n    for i in s:\n        if i == 'e':\n            return False\n    return True\n\n\ndef only_lower(s: str):\n    \"\"\"Return True if the given string contains only lowercase letters.\n    >>> only_lower('abcd')\n    True\n    >>> only_lower('abCd')\n    False\n    \"\"\"\n    for i in s:\n        if i.isupper():\n            return False\n    return True\n\n\ndef has23(n: int):\n    \"\"\"Return True if the given integer has both 2 and 3 as its digits.\n    >>> has23(123)\n    True\n    >>> has23(12)\n    False\n    >>> has23(130)\n    True\n    \"\"\"\n    if n % 10 == 2 or n % 10 == 3:\n        if n // 10 % 10 == 2 or n // 10 % 10 == 3:\n            return True\n    return False\n\n\ndef f(x: float):\n    \"\"\"Returns x if x is positive, 0 otherwise.\n    >>> f(1)\n    1\n    >>> f(0)\n    0\n    >>> f(-1)\n    0\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return 0\n\n\ndef g(s: str):\n    \"\"\"Returns s if s is non-empty, the",
      -3.07421875
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef long_enough(words: list, min_length: int):\n    \"\"\"Return the words that are at least of length min_length.\n    >>> long_enough(['cat', 'dog', 'rabbit', 'horse'], 4)\n    ['cat', 'dog', 'horse']\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) >= min_length:\n            result.append(word)\n    return result\n\n\ndef sum_multiples(low: int, high: int, factors: list):\n    \"\"\"Return the sum of all numbers in the range [low, high] that are\n    multiples of the numbers in factors.\n    >>> sum_multiples(4, 10, [3])\n    30\n    \"\"\"\n    result = 0\n    for i in range(low, high + 1):\n        for j in factors:\n            if i % j == 0:\n                result += i\n    return result\n\n\ndef is_valid_move(board: list, r: int, c: int, direction: str):\n    \"\"\"Return whether a knight can move from (row, column) to (row + r,\n    column + c) in direction d.\n    >>> is_valid_move([[\".\", \".\", \".\"], [\".\", \".\", \".\"], [\".\", \".\", \".\"]], 2, 0, \"ne\")\n    True\n    \"\"\"\n    return (0 <= r < len(board)) and (0 <= c < len(board)) and (board[r][c] == \".\")\n\n\ndef print_board(board: list):\n    \"\"\"Print the board.\n    >>> print_board([[\"*\", \"*\", \"*\", \"*\", \"*\"], [\".\", \"*\", \"*\", \"*\", \"*\"], [\".\", \".\", \"*\", \"*\", \"*\"]])\n    * * * * *\n    . * * * *\n    . . * * *\n    \"\"\"\n    for row in board:\n        print(\" \".join(row))\n\n\ndef print_move(board: list, r: int, c: int, direction",
      -3.13671875
    ],
    [
      "for item in l:\n        if item >= t:\n            return False\n    return True\n\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of items in l that are below threshold t.\n    >>> count_below_threshold([1, 2, 4, 10], 100)\n    4\n    >>> count_below_threshold([1, 20, 4, 10], 5)\n    2\n    \"\"\"\n    count = 0\n    for item in l:\n        if item < t:\n            count += 1\n    return count\n\n\ndef index_of_smallest(l: list):\n    \"\"\"Return the index of the smallest item in l.\n    >>> index_of_smallest([1, 2, 4, 10])\n    3\n    \"\"\"\n    return l.index(min(l))\n\n\ndef smallest(l: list):\n    \"\"\"Return the smallest item in l.\n    >>> smallest([1, 2, 4, 10])\n    10\n    \"\"\"\n    return min(l)\n\n\ndef index_of_largest(l: list):\n    \"\"\"Return the index of the largest item in l.\n    >>> index_of_largest([1, 2, 4, 10])\n    0\n    \"\"\"\n    return l.index(max(l))\n\n\ndef largest(l: list):\n    \"\"\"Return the largest item in l.\n    >>> largest([1, 2, 4, 10])\n    10\n    \"\"\"\n    return max(l)\n\n\ndef all_same(l: list):\n    \"\"\"Return True if all items in l are the same.\n    >>> all_same([1, 1, 1])\n    True\n    >>> all_same([1, 2, 1])\n    False\n    \"\"\"\n    for item in l:\n        if item != l[0]:\n            return False\n    return True\n\n\ndef accumulate_all(l: list):\n    \"\"\"Return a list of accumulated items in l.\n    >>> accumulate_all([1, 2,",
      -3.146484375
    ],
    [
      "\"*** YOUR CODE HERE ***\"\n\n\ndef correct_signature(word: str, signature: str):\n    \"\"\"Return True if the two arguments have the same length and the same\n    characters in the same relative positions; but the characters in the\n    signature may appear in a different order from their counterparts in the\n    word.\n    >>> correct_signature('abcccddde', 'cadb')\n    True\n    >>> correct_signature('abc', 'abc')\n    True\n    >>> correct_signature('abc', 'abcde')\n    False\n    >>> correct_signature('abc', 'ab')\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef make_array(size: int):\n    \"\"\"Return a list of length size containing the first size elements of\n    the sequence of Fibonacci numbers.\n    >>> make_array(5)\n    [0, 1, 1, 2, 3]\n    >>> make_array(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef reverse(lst: list):\n    \"\"\"Return a list containing the same elements as the argument lst, but\n    in reverse order.\n    >>> reverse([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    >>> reverse([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    >>> x = [1, 2, 3, 4, 5]\n    >>> reverse(reverse(x)) is x\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef remove_all(link: Link):\n    \"\"\"Remove all of the data stored in the linked list.\n    >>> link = Link(1, Link(2, Link(3, Link(4))))\n    >>> remove_all(link)\n    >>> link\n    Link()\n    >>> link2 = Link(1, Link(2, Link",
      -3.328125
    ],
    [
      "for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of elements in l that are below threshold t.\n    >>> count_below_threshold([1, 2, 4, 10], 100)\n    4\n    >>> count_below_threshold([1, 20, 4, 10], 5)\n    2\n    \"\"\"\n    count = 0\n    for i in l:\n        if i < t:\n            count += 1\n    return count\n\n\ndef index_of_smallest(l: list):\n    \"\"\"Return the index of the smallest element of list l.\n    >>> index_of_smallest([1, 2, 4, 10, 5])\n    3\n    >>> index_of_smallest([5, 2, 4, 10, 1])\n    0\n    \"\"\"\n    count = 0\n    smallest = l[0]\n    smallest_index = 0\n    for i in l:\n        if i < smallest:\n            smallest = i\n            smallest_index = count\n        count += 1\n    return smallest_index\n\n\ndef index_of_largest(l: list):\n    \"\"\"Return the index of the largest element of list l.\n    >>> index_of_largest([1, 2, 4, 10, 5])\n    3\n    >>> index_of_largest([5, 2, 4, 10, 1])\n    4\n    \"\"\"\n    count = 0\n    largest = l[0]\n    largest_index = 0\n    for i in l:\n        if i > largest:\n            largest = i\n            largest_index = count\n        count += 1\n    return largest_index\n\n\ndef index_of_median(l: list):\n    \"\"\"Return the index of the median element of list l.\n    >>> index_of_median([1, 2, 4, 10, 5])\n    2\n    >>> index_of_median([5",
      -3.47265625
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef fibonnaci(n: int):\n    \"\"\"Return the nth Fibonnaci number.\n    >>> fibonnaci(10)\n    55\n    >>> fibonnaci(5)\n    5\n    >>> fibonnaci(1)\n    1\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonnaci(n - 1) + fibonnaci(n - 2)\n\n\ndef is_palindrome(s: str):\n    \"\"\"Returns True if string s is a palindrome.\n    >>> is_palindrome(\"noon\")\n    True\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"dented\")\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef is_valid_email(email: str):\n    \"\"\"Returns True if email is a valid email.\n    >>> is_valid_email(\"john@example.com\")\n    True\n    >>> is_valid_email(\"john@example.net\")\n    True\n    >>> is_valid_email(\"john@example.museum\")\n    True\n    >>> is_valid_email(\"john@example.com.net\")\n    False\n    >>> is_valid_email(\"john@example.com.net.\")\n    False\n    >>> is_valid_email(\"john@example.com.\")\n    True\n    \"\"\"\n    return email.count(\"@\") == 1 and email.count(\".\") == 1 and email.count(\".\") > email.count(\"@\") and len(email) > 7\n\n\ndef is_valid_password(password: str):\n    \"\"\"Returns True if password is a valid password.\n    >>> is_valid_password(\"helloworld\")\n    True\n    >>> is_valid_password(\"helloworld9\")\n    True\n    >>> is_valid_password(\"helloworld9!\")\n    True\n    >>> is_valid_password(\"helloworld9!3\")\n    True\n    >>> is_valid_password",
      -4.09375
    ],
    [
      "return all(x < t for x in l)\n\n\ndef same_first_and_last(lists: list):\n    \"\"\"Return a list of the indices of lists that have the same value for\n    their first and last element.\n    >>> same_first_and_last([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [3, 1, 2], [3, 2, 1]])\n    [0, 1, 2, 3]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return [i for i in range(len(lists)) if lists[i][0] == lists[i][-1]]\n\n\n\ndef linear_search(l: list, e: object):\n    \"\"\"Return the index of the first occurrence of e in l, or None if e is not\n    in l.\n    >>> linear_search([2, 3, 5, 2], 2)\n    0\n    >>> linear_search([2, 3, 5, 2], 7)\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        if l[i] == e:\n            return i\n    return None\n\n\n\ndef recursive_max(t: list):\n    \"\"\"Return a number that is the maximum of the numbers in t.\n    Assume that t is nonempty.\n    >>> recursive_max([1, 2, 3, 4])\n    4\n    >>> recursive_max([55, 3, 4, 5, 6])\n    55\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if len(t) == 1:\n        return t[0]\n    if t[0] > t[1]:\n        return recursive_max(t[1:])\n    else:\n        return recursive_max(t[1:])\n\n\n\ndef recursive_reverse(t: list):\n    \"\"\"Return a reversed copy of t.\n    >>> recursive_reverse([1, 2, 3, 4])\n    [4",
      -4.22265625
    ],
    [
      "for x in l:\n        if x >= t:\n            return False\n    return True\n\n\ndef sum_within_range(l: list, a: int, b: int):\n    \"\"\"Return the sum of all numbers in l between a and b, inclusive.\n    >>> sum_within_range([1, 2, 4, 10, 3], 2, 4)\n    11\n    \"\"\"\n    total = 0\n    for x in l:\n        if a <= x <= b:\n            total += x\n    return total\n\n\ndef count_within_range(l: list, a: int, b: int):\n    \"\"\"Return the number of elements in l between a and b, inclusive.\n    >>> count_within_range([1, 2, 4, 10, 3], 2, 4)\n    3\n    \"\"\"\n    count = 0\n    for x in l:\n        if a <= x <= b:\n            count += 1\n    return count\n\n\ndef sum_across(lol: list):\n    \"\"\"Return a list of the sum of each row of lol.\n    >>> sum_across([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [15, 15]\n    \"\"\"\n    total = 0\n    sums = []\n    for l in lol:\n        for x in l:\n            total += x\n        sums.append(total)\n        total = 0\n    return sums\n\n\ndef longest_increasing_subsequence(l: list):\n    \"\"\"Return the longest increasing subsequence in l.\n    >>> longest_increasing_subsequence([3, 4, -1, 5, -100, 6])\n    [3, 4, 5, 6]\n    \"\"\"\n    if l == []:\n        return []\n    else:\n        max_len = 1\n        max_subseq = [l[0]]\n        for i in range(1, len(l)):\n            cur = l[i]\n            cur_len = 1\n            cur_sub",
      -4.453125
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\ndef sum_below_threshold(l: list, t: int):\n    \"\"\"Return the sum of all numbers in l that are below threshold t.\n    >>> sum_below_threshold([1, 2, 4, 10, 12], 100)\n    16\n    >>> sum_below_threshold([1, 20, 4, 10, 12], 10)\n    16\n    \"\"\"\n    total = 0\n    for num in l:\n        if num < t:\n            total += num\n    return total\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of numbers in l that are below threshold t.\n    >>> count_below_threshold([1, 2, 4, 10, 12], 100)\n    3\n    >>> count_below_threshold([1, 20, 4, 10, 12], 10)\n    3\n    \"\"\"\n    count = 0\n    for num in l:\n        if num < t:\n            count += 1\n    return count\n\ndef average_below_threshold(l: list, t: int):\n    \"\"\"Return the average of all numbers in l that are below threshold t.\n    >>> average_below_threshold([1, 2, 4, 10, 12], 100)\n    3.2\n    >>> average_below_threshold([1, 20, 4, 10, 12], 10)\n    3.2\n    \"\"\"\n    total = 0\n    count = 0\n    for num in l:\n        if num < t:\n            total += num\n            count += 1\n    return total/count\n\ndef main():\n    l = [1, 2, 4, 10, 12]\n    print(below_threshold(l, 100))\n    print(sum_below_threshold(l, 100))\n    print(count_",
      -4.54296875
    ],
    [
      "for num in l:\n        if num > t:\n            return False\n    return True\n\n\ndef only_evens(l: list):\n    \"\"\"Return a new list with only the even numbers from l.\n    >>> only_evens([1, 2, 4, 10])\n    [2, 4]\n    >>> only_evens([2, 4, 10])\n    [2, 4]\n    \"\"\"\n    return [num for num in l if num % 2 == 0]\n\n\ndef only_odds(l: list):\n    \"\"\"Return a new list with only the odd numbers from l.\n    >>> only_odds([1, 2, 4, 10])\n    [1, 10]\n    >>> only_odds([2, 4, 10])\n    []\n    \"\"\"\n    return [num for num in l if num % 2 == 1]\n\n\ndef sum_multiples(l: list, n: int):\n    \"\"\"Return the sum of all the numbers in l that are multiples of n.\n    >>> sum_multiples([4, 10, 16], 4)\n    24\n    >>> sum_multiples([4, 10, 16, 20], 5)\n    25\n    \"\"\"\n    return sum([num for num in l if num % n == 0])\n\n\ndef middle_element(l: list):\n    \"\"\"Return the middle element of list l.\n    >>> middle_element([1, 2, 3])\n    2\n    >>> middle_element([4, 5, 6, 7])\n    6\n    \"\"\"\n    return l[len(l) // 2]\n\n\ndef has_three_odds(l: list):\n    \"\"\"Return True if list l has exactly three odd numbers in it.\n    >>> has_three_odds([1, 2, 3])\n    False\n    >>> has_three_odds([1, 2, 3, 4, 5])\n    False\n    >>> has_three_odds([1, 2, 3, 4, 5",
      -4.9453125
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef largest_number(l: list):\n    \"\"\"Return the largest number in the list l.\n    >>> largest_number([1, 2, 4, 10])\n    10\n    >>> largest_number([10, 20, 4, 10])\n    20\n    \"\"\"\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n\n\ndef is_sorted(l: list):\n    \"\"\"Return True if l is sorted in increasing order.\n    >>> is_sorted([1, 2, 4, 10])\n    True\n    >>> is_sorted([10, 20, 4, 1])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\n\ndef is_anagram(s1: str, s2: str):\n    \"\"\"Return True if s1 and s2 are anagrams.\n    >>> is_anagram('abcd3', 'dcba3')\n    True\n    >>> is_anagram('abcd3', 'defg')\n    False\n    \"\"\"\n    if len(s1) != len(s2):\n        return False\n    for i in s1:\n        if i not in s2:\n            return False\n        else:\n            s2 = s2.replace(i, '', 1)\n    return True\n\n\ndef is_isogram(s: str):\n    \"\"\"Return True if s is an isogram.\n    >>> is_isogram('isogram')\n    True\n    >>> is_isogram('eleven')\n    False\n    >>> is_isogram('subdermatoglyphic')\n    True\n    >>> is_isogram('Alphabet')\n    False\n    >>> is_isogram('alpha')\n    False\n    >>> is_isogram('')\n    True\n    \"\"\"\n    if len(s) == 0:\n        return True\n    for i in s",
      -4.953125
    ],
    [
      "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\ndef unique(lst: list):\n    \"\"\"Returns True if all numbers in list are unique.\n\n    >>> unique([1, 2, 3, 4])\n    True\n    >>> unique([1, 2, 3, 4, 1])\n    False\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return False\n    return True\n\n\ndef sum_nearby_elements(lst: list, k: int):\n    \"\"\"Return the sum of elements with k nearby elements in list.\n\n    >>> sum_nearby_elements([1, 2, 3, 4], 0)\n    10\n    >>> sum_nearby_elements([1, 2, 3, 4], 1)\n    18\n    >>> sum_nearby_elements([1, 2, 3, 4], 2)\n    14\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        for j in range(i, i+k+1):\n            if j < len(lst):\n                total += lst[j]\n    return total\n\n\ndef sum_nearby_elements_ii(lst: list, k: int):\n    \"\"\"Return the sum of elements with k nearby elements in list.\n\n    >>> sum_nearby_elements([1, 2, 3, 4], 0)\n    10\n    >>> sum_nearby_elements([1, 2, 3, 4], 1)\n    18\n    >>> sum_nearby_elements([1, 2, 3, 4], 2)\n    14\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        total += sum(lst[i:i+k+1])\n    return total\n\n\ndef sum_nearby_elements_iii(lst: list, k: int):\n    \"\"\"Return the sum of elements with k nearby elements in list.\n\n    >>>",
      -5.13671875
    ],
    [
      "for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef only_ints(l: list):\n    \"\"\"Returns True if the list l contains only integers.\n    >>> only_ints([1, 2, 3, 4])\n    True\n    >>> only_ints([1, 2, 3, '4'])\n    False\n    \"\"\"\n    for i in l:\n        if not isinstance(i, int):\n            return False\n    return True\n\n\ndef sum_near_parity(l: list):\n    \"\"\"Returns the sum of all integers in l with even and odd parity.\n    >>> sum_near_parity([2, 3, 4, 5, 6])\n    14\n    >>> sum_near_parity([2, 3, 4, 5, 6, 7])\n    16\n    \"\"\"\n    odd_sum = 0\n    even_sum = 0\n    for i in l:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum + odd_sum\n\n\ndef count_below_ten(l: list):\n    \"\"\"Returns the number of elements in l that are less than 10.\n    >>> count_below_ten([1, 2, 3, 4, 5])\n    5\n    >>> count_below_ten([1, 2, 3, 4, 5, 6])\n    5\n    \"\"\"\n    count = 0\n    for i in l:\n        if i < 10:\n            count += 1\n    return count\n\n\ndef only_doubles(l: list):\n    \"\"\"Returns True if the list l contains only even integers.\n    >>> only_doubles([2, 4, 3, 6])\n    True\n    >>> only_doubles([2, 4, 3, 5])\n    False\n    \"\"\"\n    for i in l:\n        if i % 2 != 0:\n            return False\n    return True\n\n\ndef largest_odd_element",
      -5.484375
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef is_triple_double(word: str):\n    \"\"\"Return True if the letters of the word are repeated 3 or more times.\n    >>> is_triple_double('gogogad')\n    True\n    >>> is_triple_double('abc')\n    False\n    >>> is_triple_double('aabbc')\n    True\n    >>> is_triple_double('aabbcc')\n    False\n    \"\"\"\n    for i in range(len(word)):\n        if word[i] in word[i + 1:]:\n            return True\n    return False\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(16)\n    False\n    >>> is_prime(521)\n    True\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i ** 2 <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_square(n: int):\n    \"\"\"Return True if n is a square number.\n    >>> is_square(9)\n    True\n    >>> is_square(10)\n    False\n    >>> is_square(25)\n    True\n    \"\"\"\n    i = 0\n    while i * i < n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n\n\ndef get_divisors(n: int):\n    \"\"\"Return a list of all positive divisors of n.\n    >>> get_divisors(26)\n    [1, 2, 13, 26]\n    >>> get_divisors(25)\n    [1, 5, 25]\n    \"\"\"\n    i",
      -6.4140625
    ],
    [
      "for i in l:\n        if i > t:\n            return False\n    return True\n\n\ndef first_over_threshold(l: list, t: int):\n    \"\"\"Return the first element of l that is over threshold t or None if there is None.\n    >>> first_over_threshold([1, 20, 4, 10], 5)\n    20\n    \"\"\"\n    for i in l:\n        if i > t:\n            return i\n    return None\n\n\ndef length_above_threshold(l: list, t: int):\n    \"\"\"Return the number of elements of l that are above or equal to threshold t.\n    >>> length_above_threshold([1, 2, 4, 10, 20, 30], 10)\n    4\n    \"\"\"\n    count = 0\n    for i in l:\n        if i >= t:\n            count += 1\n    return count\n\n\ndef max_above_threshold(l: list, t: int):\n    \"\"\"Return the maximum element of l that is above or equal to threshold t.\n    >>> max_above_threshold([1, 2, 4, 10, 20, 30], 10)\n    20\n    \"\"\"\n    max = None\n    for i in l:\n        if i >= t:\n            if max == None:\n                max = i\n            else:\n                if i > max:\n                    max = i\n    return max\n\n\ndef min_above_threshold(l: list, t: int):\n    \"\"\"Return the minimum element of l that is above or equal to threshold t.\n    >>> min_above_threshold([1, 2, 4, 10, 20, 30], 10)\n    10\n    \"\"\"\n    min = None\n    for i in l:\n        if i >= t:\n            if min == None:\n                min = i\n            else:\n                if i < min:\n                    min = i\n    return min\n\n\ndef scale(l: list, t: int):\n    \"\"\"Return a new list with elements of l multiplied by",
      -6.42578125
    ],
    [
      "for e in l:\n        if e >= t:\n            return False\n    return True\n\n\ndef unique(l: list):\n    \"\"\"Returns True if all elements in l are unique to each other.\n    >>> unique([1, 2, 3, 4])\n    True\n    >>> unique([1, 2, 3, 1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] == l[j]:\n                return False\n    return True\n\n\ndef all_diff(l: list):\n    \"\"\"Return True if all adjacent elements in l are different.\n    >>> all_diff([1, 2, 3, 4])\n    True\n    >>> all_diff([1, 1, 3, 4])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            return False\n    return True\n\n\ndef buddy(l: list, i: int, j: int):\n    \"\"\"Returns True if the elements at indices i and j in l are buddies.\n    >>> l = [1, 2, 3, 4, 5, 6, 7]\n    >>> buddy(l, 1, 3)\n    True\n    >>> buddy(l, 1, 5)\n    False\n    \"\"\"\n    return abs(i - j) == 1 and l[i] == l[j]\n\n\ndef row_wise_buddies(l: list):\n    \"\"\"Returns True if all elements in l that are in the same row are buddies.\n    >>> row_wise_buddies([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> row_wise_buddies([1, 2, 3, 4, 5, 6, 8])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] // 10 != l[i + 1",
      -6.50390625
    ],
    [
      "for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef only_ints(l: list):\n    \"\"\"Returns True if the list contains only integers.\n    >>> only_ints([1, 2, 3, 4, 5])\n    True\n    >>> only_ints([1, 2, 3, 4, 5.0])\n    False\n    >>> only_ints([1, 2, 3, 4, 5, \"hello\"])\n    False\n    \"\"\"\n    for i in l:\n        if type(i) != int:\n            return False\n    return True\n\n\ndef sum_near_equal(l: list, target: int):\n    \"\"\"Returns True if the sum of the numbers in the list is within\n    0.001 of the target.\n    >>> sum_near_equal([1, 2, 3], 6)\n    True\n    >>> sum_near_equal([1, 2, 1e-50], 3)\n    True\n    >>> sum_near_equal([1, 2, 1e-200], 3)\n    False\n    \"\"\"\n    return abs(sum(l) - target) <= 0.001 * target\n\n\ndef product_near_equal(l: list, target: int):\n    \"\"\"Returns True if the product of the numbers in the list is within\n    0.001 of the target.\n    >>> product_near_equal([1, 2, 3], 6)\n    True\n    >>> product_near_equal([1, 2, 1e-50], 3)\n    True\n    >>> product_near_equal([1, 2, 1e-200], 3)\n    False\n    \"\"\"\n    return abs(reduce(lambda x, y: x * y, l) - target) <= 0.001 * target\n\n\ndef mean_near_equal(l: list, target: int):\n    \"\"\"Returns True if the mean of the numbers in the list is within\n    0.001 of the target.\n    >>> mean_near_equal([1",
      -8.7265625
    ],
    [
      "for item in l:\n        if item >= t:\n            return False\n    return True\n\n\ndef fib(n: int):\n    \"\"\"Return the nth Fibonacci number, computed by matrix exponentiation.\n    >>> fib(20)\n    6765\n    >>> fib(30)\n    832040\n    >>> fib(35)\n    9227465\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    matrix_fib = [[1, 1],\n                  [1, 0]]\n    matrix_exp = [[1, 0],\n                  [0, 1]]\n    matrix_square = [[0, 0],\n                     [0, 0]]\n    matrix_prod = [[0, 0],\n                   [0, 0]]\n    matrix_prod = matrix_multiply(matrix_fib, matrix_fib)\n    while below_threshold(matrix_prod, n):\n        matrix_prod = matrix_multiply(matrix_prod, matrix_fib)\n    matrix_square = matrix_multiply(matrix_exp, matrix_prod)\n    return matrix_square[0][1]\n\n\ndef fib_fast(n: int, table: list):\n    \"\"\"Table is a list of two lists, where table[0] is the list of Fib(0),\n    Fib(1), ..., Fib(n) and table[1] is the list of Fib(1), Fib(2), ...,\n    Fib(n+1).\n    >>> table = [[1, 1], [1, 0]]\n    >>> fib_fast(3, table)\n    2\n    >>> table = [[1, 1], [1, 0]]\n    >>> fib_fast(4, table)\n    3\n    >>> table = [[1, 1], [1, 0]]\n    >>> fib_fast(20, table)\n    10946\n    >>> table = [[1, 1], [1, 0]]\n    >>>",
      -14.234375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}