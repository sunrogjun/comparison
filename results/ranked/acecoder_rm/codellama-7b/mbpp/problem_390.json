{
  "problem": {
    "task_id": "MBPP/401",
    "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
    "test_list": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ],
    "challenge_test_list": [],
    "problem_id": 390
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List, Tuple\n\n\ndef nested_tuple_addition(first_tuple: Tuple[Tuple[int, ...], ...], second_tuple: Tuple[Tuple[int, ...], ...]) -> List[Tuple[int, ...]]:\n    \"\"\"Returns the result of index wise addition of two nested tuples.\n\n    Args:\n        first_tuple (Tuple[Tuple[int, ...], ...]): The first nested tuple.\n        second_tuple (Tuple[Tuple[int, ...], ...]): The second nested tuple.\n\n    Examples:\n        >>> assert nested_tuple_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == [(8, 10, 12), (14, 16, 18)]\n    \"\"\"\n    return [tuple(map(sum, zip(first_tuple[i], second_tuple[i]))) for i in range(len(first_tuple))]\n\n\nif __name__ == \"__main__\":\n    print(nested_tuple_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      14.609375
    ],
    [
      "from typing import List, Tuple\n\n\ndef index_wise_addition(t1: Tuple[Tuple[int, ...], ...], t2: Tuple[Tuple[int, ...], ...]) -> List[Tuple[int, ...]]:\n    \"\"\"\n    >>> index_wise_addition(((1, 2), (3, 4)), ((10, 20), (30, 40)))\n    [(11, 22), (33, 44)]\n    \"\"\"\n    return [tuple(x + y for x, y in zip(a, b)) for a, b in zip(t1, t2)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      13.859375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_nested_tuples(tup1: Tuple[Tuple[int]], tup2: Tuple[Tuple[int]]) -> List[Tuple[int]]:\n    \"\"\"Adds each index of two tuples\n\n    Args:\n        tup1 (Tuple[Tuple[int]]): First tuple\n        tup2 (Tuple[Tuple[int]]): Second tuple\n\n    Returns:\n        List[Tuple[int]]: List of tuples with each index added\n    \"\"\"\n    return [tuple(a+b for a, b in zip(t1, t2)) for t1, t2 in zip(tup1, tup2)]\n\n\nif __name__ == \"__main__\":\n    print(add_nested_tuples(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      6.91015625
    ],
    [
      "from typing import List, Tuple\n\n\ndef index_wise_addition(t1: Tuple[Tuple[int], ...], t2: Tuple[Tuple[int], ...]) -> List[Tuple[int]]:\n    \"\"\"Returns index wise addition of tuple elements in given two nested tuples.\n\n    Args:\n        t1 (Tuple[Tuple[int], ...]): First nested tuple\n        t2 (Tuple[Tuple[int], ...]): Second nested tuple\n\n    Returns:\n        List[Tuple[int]]: Index wise addition of tuple elements in given two nested tuples\n    \"\"\"\n    return [tuple(map(sum, zip(t1[i], t2[i]))) for i in range(len(t1))]\n\n\nif __name__ == \"__main__\":\n    t1 = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12))\n    t2 = ((13, 14, 15, 16), (17, 18, 19, 20), (21, 22, 23, 24))\n    print(index_wise_addition(t1, t2))",
      6.2578125
    ],
    [
      "from typing import Tuple\n\n\ndef index_wise_addition(\n    nested_tuple1: Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]],\n    nested_tuple2: Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]]\n) -> Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]]:\n    \"\"\"Adds the elements at each index of two nested tuples.\n\n    Args:\n        nested_tuple1 (Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]]):\n        The first nested tuple.\n\n        nested_tuple2 (Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]]):\n        The second nested tuple.\n\n    Returns:\n        Tuple[Tuple[int, int, int], Tuple[int, int, int], Tuple[int, int, int]]: The resultant nested tuple.\n\n    Raises:\n        ValueError: If the two nested tuples are not of same size.\n\n    Examples:\n        >>> index_wise_addition(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((10, 11, 12), (13, 14, 15), (16, 17, 18)))\n        ((11, 13, 15), (17, 19, 21), (23, 25, 27))\n    \"\"\"\n    if len(nested_tuple1) != len(nested_tuple2):\n        raise ValueError(\"The two nested tuples must have same number of elements.\")\n\n    return tuple(\n        tuple(map(sum, zip(t1, t2))) for t1, t2 in zip(nested_tuple1, nested_tuple2)\n    )\n\n\nif __name__",
      5.53125
    ],
    [
      "from typing import List, Optional, Tuple\n\n\ndef add_indexwise(\n    nested_tuple_1: Tuple[Tuple[int, ...], ...],\n    nested_tuple_2: Tuple[Tuple[int, ...], ...],\n) -> Optional[Tuple[Tuple[int, ...], ...]]:\n    if len(nested_tuple_1) != len(nested_tuple_2):\n        return None\n    return tuple(\n        tuple(elem1 + elem2 for elem1, elem2 in zip(nested_tuple_1_row, nested_tuple_2_row))\n        for nested_tuple_1_row, nested_tuple_2_row in zip(nested_tuple_1, nested_tuple_2)\n    )\n\n\nif __name__ == \"__main__\":\n    print(add_indexwise(((1, 2), (3, 4)), ((5, 6), (7, 8))))\n    print(add_indexwise(((1, 2), (3, 4)), ((5, 6), (7, 8, 9))))\n    print(add_indexwise(((1, 2), (3, 4)), ((5,), (7, 8))))\n    print(add_indexwise(((1, 2), (3, 4)), ((5,), (7,))))\n    print(add_indexwise(((1, 2), (3, 4)), ((5,), ())))",
      4.16015625
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuple_elements(\n    tup_1: Tuple[Tuple[int, int], Tuple[int, int]], tup_2: Tuple[Tuple[int, int], Tuple[int, int]]\n) -> List[Tuple[int, int]]:\n    \"\"\"Adds the corresponding elements of two nested tuples.\n\n    Args:\n        tup_1: The first nested tuple.\n        tup_2: The second nested tuple.\n\n    Returns:\n        The resultant nested tuple.\n\n    Raises:\n        ValueError: If the two tuples are not of same length.\n\n    Examples:\n        >>> add_tuple_elements(((1, 1), (1, 1)), ((1, 1), (1, 1)))\n        [(2, 2), (2, 2)]\n    \"\"\"\n    if len(tup_1) != len(tup_2):\n        raise ValueError(\"The two tuples are not of same length\")\n\n    return [tuple(map(sum, zip(tup_1[i], tup_2[i]))) for i in range(len(tup_1))]\n\n\nif __name__ == \"__main__\":\n    print(add_tuple_elements(((1, 1), (1, 1)), ((1, 1), (1, 1))))",
      3.669921875
    ],
    [
      "from itertools import zip_longest\n\n\ndef add_tuples(tup1, tup2):\n    \"\"\"\n    >>> add_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8)))\n    ((6, 8), (10, 12))\n    \"\"\"\n    return tuple(\n        tuple(sum(items) for items in zip_longest(tup1_row, tup2_row, fillvalue=0))\n        for tup1_row, tup2_row in zip(tup1, tup2)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.546875
    ],
    [
      "from typing import List, Tuple\n\n\ndef index_wise_tuple_sum(a: Tuple[Tuple[int, ...], ...], b: Tuple[Tuple[int, ...], ...]) -> List[Tuple[int, ...]]:\n    \"\"\"\n    >>> index_wise_tuple_sum(((1, 2), (3, 4)), ((5, 6), (7, 8)))\n    [(6, 8), (10, 12)]\n\n    >>> index_wise_tuple_sum(((1, 2), (3, 4)), ((5, 6), (7, 8, 9)))\n    Traceback (most recent call last):\n        ...\n    ValueError: Both tuples must have same length\n\n    >>> index_wise_tuple_sum(((1, 2), (3, 4)), ((5, 6), (7, 8, 9), (10, 11)))\n    Traceback (most recent call last):\n        ...\n    ValueError: Both tuples must have same length\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Both tuples must have same length\")\n\n    return [tuple(map(sum, zip(a_tup, b_tup))) for a_tup, b_tup in zip(a, b)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.513671875
    ],
    [
      "from itertools import zip_longest\n\n\ndef add_tuple_elementwise(t1, t2):\n    \"\"\"Adds the tuple elements index wise.\"\"\"\n    return tuple(sum(x) for x in zip_longest(t1, t2, fillvalue=0))\n\n\nif __name__ == \"__main__\":\n    TUPLE_1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    TUPLE_2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(add_tuple_elementwise(TUPLE_1, TUPLE_2))",
      2.525390625
    ],
    [
      "from typing import List, Tuple\n\n\ndef index_wise_addition(tup_1: Tuple[List, ...], tup_2: Tuple[List, ...]) -> Tuple[List, ...]:\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    return tuple(list(x + y for x, y in zip(tup_1, tup_2)))\n\n\nif __name__ == \"__main__\":\n    assert index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
      1.044921875
    ],
    [
      "from itertools import zip_longest\n\n\ndef sum_tuples(t1, t2):\n    return tuple(map(sum, zip_longest(t1, t2, fillvalue=0)))\n\n\ndef main():\n    t1 = ((1, 2, 3, 4), (5, 6, 7, 8))\n    t2 = ((10, 20, 30, 40), (50, 60, 70, 80))\n    print(sum_tuples(t1, t2))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.8251953125
    ],
    [
      "from functools import reduce\n\n\ndef nested_tuple_sum(tup_1, tup_2):\n    return tuple(tuple(map(sum, zip(*tup_1[i]))) for i in range(len(tup_1)))\n\n\ndef main():\n    tup_1 = (\n        (1, 2, 3, 4),\n        (5, 6, 7, 8),\n        (9, 10, 11, 12),\n    )\n    tup_2 = (\n        (13, 14, 15, 16),\n        (17, 18, 19, 20),\n        (21, 22, 23, 24),\n    )\n    print(\"Tuple 1: \", tup_1)\n    print(\"Tuple 2: \", tup_2)\n    print(\"Sum of the tuples index wise: \")\n    print(nested_tuple_sum(tup_1, tup_2))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.52099609375
    ],
    [
      "def nested_tuple_sum(tup1, tup2):\n    return tuple(tuple(sum(x) for x in zip(i, j)) for i, j in zip(tup1, tup2))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(nested_tuple_sum(tup1, tup2))",
      0.50537109375
    ],
    [
      "from typing import List, Tuple\n\n\ndef index_wise_addition(\n    nested_tuple_1: Tuple[Tuple[int, int], Tuple[int, int]],\n    nested_tuple_2: Tuple[Tuple[int, int], Tuple[int, int]],\n) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    \"\"\"Returns index wise addition of tuple elements in the given two nested tuples.\n\n    Examples:\n        >>> index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8)))\n        ((6, 8), (10, 12))\n    \"\"\"\n    return tuple(tuple(map(sum, zip(nested_tuple_1[i], nested_tuple_2[i]))) for i in range(len(nested_tuple_1)))\n\n\ndef index_wise_addition_list(\n    nested_tuple_1: Tuple[Tuple[int, int], Tuple[int, int]],\n    nested_tuple_2: Tuple[Tuple[int, int], Tuple[int, int]],\n) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    \"\"\"Returns index wise addition of tuple elements in the given two nested tuples.\n\n    Examples:\n        >>> index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8)))\n        ((6, 8), (10, 12))\n    \"\"\"\n    return tuple(tuple(map(sum, zip(nested_tuple_1[i], nested_tuple_2[i]))) for i in range(len(nested_tuple_1)))\n\n\nif __name__ == \"__main__\":\n    print(index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8))))",
      0.443115234375
    ],
    [
      "from itertools import zip_longest\n\n\ndef nested_tuples_sum(tup1, tup2):\n    return tuple(tuple(a + b for a, b in zip(a1, b1)) for a1, b1 in zip_longest(tup1, tup2, fillvalue=()))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6))\n    tup2 = ((1, 2, 3), (4, 5, 6))\n    print(nested_tuples_sum(tup1, tup2))",
      0.435546875
    ],
    [
      "from itertools import zip_longest\n\n\ndef tuple_addition(tup1, tup2):\n    return tuple(map(lambda x: x[0] + x[1], zip_longest(tup1, tup2, fillvalue=0)))\n\n\nprint(tuple_addition(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((10, 11, 12), (13, 14, 15), (16, 17, 18))))",
      0.28759765625
    ],
    [
      "from itertools import zip_longest\n\n\ndef add_index_wise(t1: tuple, t2: tuple) -> tuple:\n    \"\"\"Returns the index wise addition of the given two nested tuples.\"\"\"\n    return tuple(tuple(a + b for a, b in zip_longest(a1, a2, fillvalue=0)) for a1, a2 in zip_longest(t1, t2, fillvalue=()))\n\n\nif __name__ == \"__main__\":\n    print(add_index_wise(((1, 2, 3), (2, 3, 4)), ((3, 3, 3), (4, 4, 4))))",
      0.2841796875
    ],
    [
      "from functools import reduce\n\n\ndef index_wise_addition(tup1, tup2):\n    return tuple(map(lambda x, y: x + y, tup1, tup2))\n\n\ndef index_wise_addition_reduce(tup1, tup2):\n    return tuple(reduce(lambda x, y: x + y, tup1))\n\n\nif __name__ == \"__main__\":\n    tup1 = (1, (2, 3, 4))\n    tup2 = (5, (6, 7, 8))\n    print(index_wise_addition(tup1, tup2))\n    print(index_wise_addition_reduce(tup1, tup2))",
      0.151123046875
    ],
    [
      "from itertools import chain\nfrom functools import reduce\n\n\ndef tuple_addition(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef main():\n    print(\"tuple_addition:\")\n    print(tuple_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.1455078125
    ],
    [
      "from functools import reduce\n\n\ndef nested_tuple_sum(t1, t2):\n    return tuple(map(sum, zip(*t1)))\n\n\ndef main():\n    print(\"Index wise addition of tuple elements in the given two nested tuples\")\n    t1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    t2 = ((10, 11, 12), (13, 14, 15), (16, 17, 18))\n    print(nested_tuple_sum(t1, t2))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.08941650390625
    ],
    [
      "from itertools import zip_longest\n\n\ndef tuple_addition(tup1, tup2):\n    return tuple(map(sum, zip_longest(tup1, tup2, fillvalue=0)))\n\n\nif __name__ == \"__main__\":\n    print(tuple_addition((1, 2, 3), (4, 5, 6)))\n    print(tuple_addition((1, 2, 3), (4, 5, 6, 7, 8)))\n    print(tuple_addition((1, 2, 3, 4), (4, 5, 6)))\n    print(tuple_addition((1, 2, 3, 4, 5), (4, 5, 6)))",
      0.04193115234375
    ],
    [
      "from itertools import chain\n\n\ndef add_index_wise(t1, t2):\n    \"\"\"\n    Adds the two given nested tuples element wise.\n    :param t1: nested tuple\n    :param t2: nested tuple\n    :return: nested tuple\n    \"\"\"\n    return tuple(chain(*zip(t1, t2)))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2), (3, 4))\n    tup2 = ((1, 2), (3, 4))\n    print(add_index_wise(tup1, tup2))",
      0.0189056396484375
    ],
    [
      "from itertools import zip_longest\n\n\ndef add(a, b):\n    return tuple(x + y for x, y in zip_longest(a, b, fillvalue=0))\n\n\ndef main():\n    a = ((1, 2, 3), (4, 5, 6))\n    b = ((7, 8, 9), (10, 11, 12))\n    print(add(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.150390625
    ],
    [
      "from typing import List, Tuple\n\n\ndef index_wise_addition(tup_1: Tuple[Tuple[int, ...]], tup_2: Tuple[Tuple[int, ...]]) -> List[Tuple[int, ...]]:\n    \"\"\"Adds two nested tuples element-wise.\n\n    Args:\n        tup_1: The first nested tuple.\n        tup_2: The second nested tuple.\n\n    Returns:\n        The nested tuple containing the addition of the elements of the two nested tuples.\n    \"\"\"\n    return list(map(lambda x, y: x + y, tup_1, tup_2))\n\n\nif __name__ == \"__main__\":\n    assert index_wise_addition(((1, 2, 3), (4, 5, 6)), ((1, 2, 3), (4, 5, 6))) == [(2, 4, 6), (8, 10, 12)]",
      -0.262451171875
    ],
    [
      "from itertools import zip_longest\nfrom typing import List\n\n\n# With zip\ndef add(a: List[List[int]], b: List[List[int]]) -> List[List[int]]:\n    return [list(map(sum, zip(a_row, b_row))) for a_row, b_row in zip(a, b)]\n\n\n# With zip_longest\ndef add_zip_longest(a: List[List[int]], b: List[List[int]]) -> List[List[int]]:\n    return [list(map(sum, zip_longest(a_row, b_row, fillvalue=0))) for a_row, b_row in zip(a, b)]\n\n\nif __name__ == \"__main__\":\n    assert add([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[2, 4, 6], [8, 10, 12], [14, 16, 18]]\n    assert add_zip_longest([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[2, 4, 6], [8, 10, 12], [14, 16, 18]]",
      -0.4033203125
    ],
    [
      "from typing import Tuple, List\n\n\ndef nested_tuple_addition(t1: Tuple[Tuple, ...], t2: Tuple[Tuple, ...]) -> Tuple[Tuple, ...]:\n    \"\"\"Returns the sum of the nested tuples indexed-wise.\n\n    Args:\n        t1 (Tuple[Tuple, ...]): Nested tuples of arbitrary depth\n        t2 (Tuple[Tuple, ...]): Nested tuples of arbitrary depth\n\n    Returns:\n        Tuple[Tuple, ...]: Nested tuples of arbitrary depth\n    \"\"\"\n    return tuple(tuple(map(sum, zip(*t))) for t in zip(t1, t2))\n\n\ndef main():\n    t1 = ((1, 2, 3), (4, 5, 6))\n    t2 = ((-1, -2, -3), (-4, -5, -6))\n    res: Tuple[Tuple, ...] = nested_tuple_addition(t1, t2)\n    print(res)\n\n\nif __name__ == '__main__':\n    main()",
      -0.415771484375
    ],
    [
      "from itertools import chain\nfrom collections import deque\nfrom functools import reduce\nfrom operator import add\n\n\ndef tuple_add(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef tuple_add_2(tup1, tup2):\n    return tuple(x + y for x, y in zip(tup1, tup2))\n\n\ndef tuple_add_3(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_4(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_5(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_6(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_7(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_8(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_9(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_10(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_11(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_12(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_add_13(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef",
      -0.4423828125
    ],
    [
      "from itertools import zip_longest\n\n\ndef tuple_add(tup1, tup2):\n    result = tuple(map(lambda x, y: x + y, tup1, tup2))\n    return result\n\n\ndef tuple_add_zip(tup1, tup2):\n    return tuple(map(lambda x, y: x + y, zip_longest(tup1, tup2, fillvalue=0)))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6))\n    tup2 = ((7, 8, 9), (10, 11, 12))\n    print(tuple_add(tup1, tup2))\n    print(tuple_add_zip(tup1, tup2))",
      -0.4873046875
    ],
    [
      "from itertools import chain\n\n\ndef nested_tuple_addition(t1: tuple, t2: tuple):\n    return tuple(map(sum, zip(*chain(t1, t2))))\n\n\nif __name__ == \"__main__\":\n    print(nested_tuple_addition(((1, 2, 3), (4, 5, 6)), ((6, 5, 4), (3, 2, 1))))",
      -0.70654296875
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef tuple_add(a, b):\n    return tuple(map(add, a, b))\n\n\ndef tuple_add_reduce(a, b):\n    return reduce(tuple_add, a, b)\n\n\ndef main():\n    a = ((1, 2, 3), (4, 5, 6))\n    b = ((7, 8, 9), (10, 11, 12))\n    print(tuple_add(a, b))\n    print(tuple_add_reduce(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "from itertools import zip_longest\n\n\ndef add_index_wise(t1, t2):\n    return tuple(map(sum, zip_longest(t1, t2, fillvalue=0)))\n\n\nprint(add_index_wise(((1, 2), (3, 4)), ((5, 6), (7, 8))))",
      -0.85693359375
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef index_wise_addition(tup1, tup2):\n    return tuple(reduce(add, zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6))\n    tup2 = ((7, 8, 9), (10, 11, 12))\n    print(index_wise_addition(tup1, tup2))",
      -0.85693359375
    ],
    [
      "def sum_tuple_index_wise(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\nprint(sum_tuple_index_wise((1, 2, 3), (4, 5, 6)))\nprint(sum_tuple_index_wise((1, 2, 3), (4, 5, 6, 7, 8)))",
      -0.85791015625
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef sum_of_nested_tuples(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef sum_of_nested_tuples_reduce(tup1, tup2):\n    return tuple(reduce(add, zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(sum_of_nested_tuples(tup1, tup2))\n    print(sum_of_nested_tuples_reduce(tup1, tup2))",
      -0.85791015625
    ],
    [
      "from itertools import chain\nfrom operator import add\n\n\ndef tuple_add(tup1, tup2):\n    return tuple(map(add, *zip(*tup1)))\n\n\ndef tuple_add_2(tup1, tup2):\n    return tuple(chain.from_iterable(map(add, *zip(*tup1))))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(tuple_add(tup1, tup2))\n    print(tuple_add_2(tup1, tup2))",
      -0.85791015625
    ],
    [
      "from itertools import chain\n\n\ndef nested_tuple_addition(t1, t2):\n    return tuple(map(sum, zip(*chain(t1, t2))))\n\n\nif __name__ == \"__main__\":\n    print(nested_tuple_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      -0.85791015625
    ],
    [
      "from itertools import chain\n\n\ndef add_nested_tuples(x: tuple, y: tuple):\n    \"\"\"\n    >>> add_nested_tuples(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12)))\n    ((8, 10, 12), (14, 16, 18))\n    \"\"\"\n    return tuple(map(sum, chain(*zip(x, y))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "from itertools import zip_longest\n\n\ndef add_tuples(tup1, tup2):\n    result = tuple(sum(tup) for tup in zip_longest(tup1, tup2, fillvalue=0))\n    return result\n\n\nprint(add_tuples(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      -0.85791015625
    ],
    [
      "from itertools import chain\n\n\ndef index_wise_addition(tup1, tup2):\n    return tuple(chain(*zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    print(index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8))))",
      -0.85791015625
    ],
    [
      "from itertools import zip_longest\n\n\ndef add_tuple(t1, t2):\n    return tuple(map(sum, zip_longest(t1, t2, fillvalue=0)))\n\n\ndef main():\n    t1 = ((1, 2, 3), (4, 5, 6))\n    t2 = ((7, 8, 9), (10, 11, 12))\n    print(\"Tuple 1:\", t1)\n    print(\"Tuple 2:\", t2)\n    print(\"Sum of corresponding elements at each index:\")\n    print(add_tuple(t1, t2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "from itertools import chain\n\n\ndef tuple_sum(tup1, tup2):\n    return tuple(chain.from_iterable(map(sum, zip(tup1, tup2))))\n\n\nif __name__ == \"__main__\":\n    print(tuple_sum(((1, 2), (3, 4)), ((5, 6), (7, 8))))",
      -0.8583984375
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef index_wise_addition(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef index_wise_addition_reduce(tup1, tup2):\n    return tuple(reduce(add, tup1, tup2))\n\n\nif __name__ == \"__main__\":\n    t1 = (1, 2, 3, 4, 5)\n    t2 = (6, 7, 8, 9, 10)\n    print(index_wise_addition(t1, t2))\n    print(index_wise_addition_reduce(t1, t2))",
      -0.8583984375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add(tup1: Tuple[Tuple[int, ...], ...], tup2: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple(tuple(a + b for a, b in zip(tup1[i], tup2[i])) for i in range(len(tup1)))\n\n\nif __name__ == \"__main__\":\n    print(add(((1, 2, 3), (4, 5, 6)), ((1, 2, 3), (4, 5, 6))))",
      -0.8583984375
    ],
    [
      "from itertools import zip_longest\n\n\ndef nested_tuple_sum(tup_1, tup_2):\n    result = []\n    for t1, t2 in zip_longest(tup_1, tup_2):\n        result.append((t1, t2))\n    return tuple(result)\n\n\nif __name__ == \"__main__\":\n    tup_1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    tup_2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(nested_tuple_sum(tup_1, tup_2))",
      -0.8583984375
    ],
    [
      "from functools import reduce\n\n\ndef index_wise_addition(t1, t2):\n    return tuple(reduce(lambda x, y: x + y, t1[i] + t2[i]) for i in range(len(t1)))\n\n\nif __name__ == \"__main__\":\n    t1 = ((1, 2), (3, 4))\n    t2 = ((5, 6), (7, 8))\n    print(index_wise_addition(t1, t2))",
      -0.8583984375
    ],
    [
      "from functools import reduce\nfrom itertools import accumulate\n\n\ndef nested_tuple_addition(nested_tuple1, nested_tuple2):\n    return tuple(tuple(a + b for a, b in zip(row1, row2)) for row1, row2 in zip(nested_tuple1, nested_tuple2))\n\n\ndef nested_tuple_addition_accumulate(nested_tuple1, nested_tuple2):\n    return tuple(accumulate(zip(row1, row2), lambda x, y: tuple(x + y for x, y in zip(x, y))))\n\n\ndef nested_tuple_addition_reduce(nested_tuple1, nested_tuple2):\n    return tuple(reduce(lambda x, y: tuple(x + y for x, y in zip(x, y)), zip(row1, row2)) for row1, row2 in zip(nested_tuple1, nested_tuple2))\n\n\nif __name__ == \"__main__\":\n    print(nested_tuple_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))\n    print(nested_tuple_addition_accumulate(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))\n    print(nested_tuple_addition_reduce(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      -0.87841796875
    ],
    [
      "from itertools import islice\n\n\ndef tuple_addition(tup1, tup2):\n    return tuple(islice(zip(tup1, tup2), len(tup1)))\n\n\nif __name__ == \"__main__\":\n    print(tuple_addition((1, 2, 3), (4, 5, 6)))",
      -0.890625
    ],
    [
      "from itertools import zip_longest\n\n\ndef tuple_addition(t1, t2):\n    return tuple(map(sum, zip_longest(t1, t2, fillvalue=0)))\n\n\nprint(tuple_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      -0.90185546875
    ],
    [
      "from typing import Tuple, List\n\n\ndef index_wise_addition(tup1: Tuple[Tuple[int, int], Tuple[int, int]],\n                        tup2: Tuple[Tuple[int, int], Tuple[int, int]]) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    \"\"\"Returns a new tuple with the index wise addition of the given two tuples.\n\n    Args:\n        tup1 (Tuple[Tuple[int, int], Tuple[int, int]]): The first tuple.\n        tup2 (Tuple[Tuple[int, int], Tuple[int, int]]): The second tuple.\n\n    Returns:\n        Tuple[Tuple[int, int], Tuple[int, int]]: The new tuple with index wise addition of the given two tuples.\n    \"\"\"\n    tup1 = list(tup1)\n    tup2 = list(tup2)\n    for i in range(len(tup1)):\n        for j in range(len(tup1[i])):\n            tup1[i][j] += tup2[i][j]\n    return tuple(tup1)\n\n\nif __name__ == \"__main__\":\n    tup1: Tuple[Tuple[int, int], Tuple[int, int]] = ((1, 2), (3, 4))\n    tup2: Tuple[Tuple[int, int], Tuple[int, int]] = ((5, 6), (7, 8))\n    print(index_wise_addition(tup1, tup2))",
      -1.037109375
    ],
    [
      "from itertools import zip_longest\n\n\ndef nested_tuple_add(t1, t2):\n    result = []\n    for x, y in zip_longest(t1, t2):\n        if x is None:\n            x = 0\n        if y is None:\n            y = 0\n        result.append((x, y))\n    return tuple(result)\n\n\nprint(nested_tuple_add(((1, 2), (3, 4)), ((5, 6), (7, 8))))",
      -1.2197265625
    ],
    [
      "def index_wise_addition(tup_1, tup_2):\n    return tuple([tuple([x+y for x, y in zip(a, b)]) for a, b in zip(tup_1, tup_2)])\n\n\nif __name__ == \"__main__\":\n    X = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    Y = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(index_wise_addition(X, Y))",
      -1.318359375
    ],
    [
      "from itertools import zip_longest\n\n\ndef index_wise_addition(t1, t2):\n    return tuple(sum(x) for x in zip_longest(t1, t2))\n\n\nif __name__ == \"__main__\":\n    print(index_wise_addition(((1, 2, 3), (4, 5, 6), (7, 8, 9)),\n                              ((8, 7, 4), (5, 4, 1), (2, 3, 7))))",
      -1.3310546875
    ],
    [
      "from itertools import zip_longest\n\n\ndef nested_tuples_addition(t1, t2):\n    result = []\n\n    for x, y in zip_longest(t1, t2):\n        result.append(tuple(map(lambda x, y: x + y, x, y)))\n\n    return tuple(result)\n\n\nif __name__ == \"__main__\":\n    print(nested_tuples_addition(((1, 2), (3, 4)), ((5, 6), (7, 8))))\n    print(nested_tuples_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      -1.40234375
    ],
    [
      "from itertools import zip_longest\n\n\ndef nested_tuple_addition(tup_1, tup_2):\n    return tuple(tuple(x + y for x, y in zip_longest(a, b, fillvalue=0)) for a, b in zip(tup_1, tup_2))\n\n\nif __name__ == \"__main__\":\n    print(nested_tuple_addition(((1, 2, 3), (4, 5, 6)), ((-1, 2, 3), (4, 5, 6))))\n    print(nested_tuple_addition(((1, 2, 3), (4, 5, 6)), ((-1, 2, 3), (4, 5, 6), (4, 5, 6))))",
      -1.404296875
    ],
    [
      "from typing import List, Tuple\n\n\ndef index_wise_addition(nested_tuple1: Tuple[Tuple, ...], nested_tuple2: Tuple[Tuple, ...]) -> List[Tuple]:\n    return list(map(lambda x, y: x + y, nested_tuple1, nested_tuple2))\n\n\nif __name__ == \"__main__\":\n    print(index_wise_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      -1.45703125
    ],
    [
      "from itertools import zip_longest\n\n\ndef index_wise_addition(t1, t2):\n    result = tuple(map(sum, zip_longest(t1, t2)))\n    return result\n\n\nif __name__ == \"__main__\":\n    t1 = ((1, 2), (3, 4))\n    t2 = ((5, 6), (7, 8))\n    print(index_wise_addition(t1, t2))",
      -1.6240234375
    ],
    [
      "from itertools import chain\n\n\ndef index_wise_add(tup1, tup2):\n    \"\"\"\n    >>> index_wise_add(((1,2,3),(4,5,6)),((7,8,9),(10,11,12)))\n    ((8, 10, 12), (14, 16, 18))\n    \"\"\"\n    return tuple(tuple(x + y for x, y in zip(a, b)) for a, b in zip(tup1, tup2))\n\n\ndef index_wise_add_itertools(tup1, tup2):\n    \"\"\"\n    >>> index_wise_add_itertools(((1,2,3),(4,5,6)),((7,8,9),(10,11,12)))\n    ((8, 10, 12), (14, 16, 18))\n    \"\"\"\n    return tuple(map(sum, zip(chain(*tup1), chain(*tup2))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.69921875
    ],
    [
      "from itertools import zip_longest\n\n\ndef tuple_addition(a, b):\n    return tuple(map(sum, zip_longest(a, b, fillvalue=0)))\n\n\nif __name__ == \"__main__\":\n    print(tuple_addition(((1, 2), (3, 4)), ((5, 6), (7, 8))))",
      -1.8447265625
    ],
    [
      "def add(t1, t2):\n    return tuple(map(sum, zip(*t1, *t2)))\n\n\nif __name__ == \"__main__\":\n    t1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    t2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(add(t1, t2))",
      -1.8515625
    ],
    [
      "from itertools import zip_longest\n\n\ndef add_tuples(tup_1, tup_2):\n    return tuple(map(sum, zip_longest(tup_1, tup_2, fillvalue=0)))\n\n\nif __name__ == \"__main__\":\n    tup_1 = ((1, 2, 3), (4, 5, 6))\n    tup_2 = ((7, 8, 9), (10, 11, 12))\n    print(add_tuples(tup_1, tup_2))",
      -2.025390625
    ],
    [
      "from itertools import zip_longest\n\n\ndef tuple_add(tup1, tup2):\n    tup1 = list(tup1)\n    tup2 = list(tup2)\n    for i in range(len(tup1)):\n        tup1[i] = list(tup1[i])\n    for i in range(len(tup2)):\n        tup2[i] = list(tup2[i])\n    for i in range(len(tup1)):\n        for j in range(len(tup1[i])):\n            tup1[i][j] = tup1[i][j] + tup2[i][j]\n    return tuple(tuple(tup1[i]) for i in range(len(tup1)))\n\n\ndef main():\n    tuple1 = ((1, 2, 3), (4, 5, 6))\n    tuple2 = ((1, 2, 3), (4, 5, 6))\n    print(tuple_add(tuple1, tuple2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.02734375
    ],
    [
      "from typing import List, Tuple\n\n\ndef index_wise_addition(tup_1: Tuple[List[int]], tup_2: Tuple[List[int]]) -> List[Tuple[int]]:\n    return [(tup_1[i][j] + tup_2[i][j]) for i in range(len(tup_1)) for j in range(len(tup_1[i]))]\n\n\nif __name__ == \"__main__\":\n    print(index_wise_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      -2.03125
    ],
    [
      "from itertools import chain\nfrom functools import reduce\n\n\ndef add_tuples(t1, t2):\n    \"\"\"\n    Adds two tuples.\n    >>> add_tuples((1, 2, 3, 4), (4, 5, 6, 7))\n    (5, 7, 9, 11)\n    >>> add_tuples((1, 2, 3, 4), (4, 5, 6))\n    (5, 7, 9, 4)\n    \"\"\"\n    return tuple(map(sum, zip(t1, t2)))\n\n\ndef add_tuples_iter(t1, t2):\n    \"\"\"\n    Adds two tuples.\n    >>> add_tuples_iter((1, 2, 3, 4), (4, 5, 6, 7))\n    (5, 7, 9, 11)\n    >>> add_tuples_iter((1, 2, 3, 4), (4, 5, 6))\n    (5, 7, 9, 4)\n    \"\"\"\n    return tuple(map(sum, zip(*[t1, t2])))\n\n\ndef add_tuples_reduce(t1, t2):\n    \"\"\"\n    Adds two tuples.\n    >>> add_tuples_reduce((1, 2, 3, 4), (4, 5, 6, 7))\n    (5, 7, 9, 11)\n    >>> add_tuples_reduce((1, 2, 3, 4), (4, 5, 6))\n    (5, 7, 9, 4)\n    \"\"\"\n    return tuple(reduce(lambda x, y: x + y, zip(t1, t2)))\n\n\ndef add_tuples_itertools(t1, t2):\n    \"\"\"\n    Adds two tuples.\n    >>> add_tuples_itertools((1, 2, 3, 4), (4, 5, 6, 7))\n    (5, 7, 9, 11",
      -2.0703125
    ],
    [
      "from itertools import zip_longest\n\n\ndef index_wise_addition(tup1, tup2):\n    return tuple(map(sum, zip_longest(tup1, tup2, fillvalue=0)))\n\n\nprint(index_wise_addition(((1, 2), (3, 4), (5, 6)), ((7, 8), (9, 10), (11, 12))))",
      -2.095703125
    ],
    [
      "from itertools import zip_longest\n\n\ndef nested_tuple_addition(tup1, tup2):\n    return tuple(map(lambda x, y: x + y, tup1, tup2))\n\n\ndef nested_tuple_addition_zip(tup1, tup2):\n    return tuple(zip_longest(tup1, tup2, fillvalue=0))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6))\n    tup2 = ((7, 8, 9), (10, 11, 12))\n    print(nested_tuple_addition(tup1, tup2))\n    print(nested_tuple_addition_zip(tup1, tup2))",
      -2.193359375
    ],
    [
      "from typing import List, Tuple, Any\n\n\ndef nested_tuple_addition(nested_tuple_1: Tuple[Any, ...], nested_tuple_2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(map(sum, zip(nested_tuple_1, nested_tuple_2)))\n\n\nif __name__ == \"__main__\":\n    print(nested_tuple_addition((1, 2, 3), (4, 5, 6)))",
      -2.29296875
    ],
    [
      "from itertools import chain\nfrom functools import reduce\n\n\ndef tuple_sum(t1, t2):\n    return tuple(reduce(lambda x, y: x + y, chain(t1, t2)))\n\n\nif __name__ == \"__main__\":\n    print(tuple_sum(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      -2.48046875
    ],
    [
      "from typing import List, Tuple, Any\n\n\ndef nested_tuple_sum(t1: Tuple[Tuple, ...], t2: Tuple[Tuple, ...]) -> List[Tuple[Tuple, ...]]:\n    \"\"\"Returns a list of index wise sum of elements in the given two tuples.\"\"\"\n    return list(map(sum, zip(t1, t2)))\n\n\nif __name__ == \"__main__\":\n    print(nested_tuple_sum(((1, 2), (3, 4)), ((1, 1), (1, 1))))\n    print(nested_tuple_sum(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((1, 1, 1), (2, 2, 2), (3, 3, 3))))",
      -2.48828125
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef index_wise_addition(tup1: tuple, tup2: tuple) -> tuple:\n    return tuple(map(add, tup1, tup2))\n\n\nif __name__ == \"__main__\":\n    print(index_wise_addition(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))))",
      -2.767578125
    ],
    [
      "from typing import List, Tuple, Union\n\n\ndef tuple_addition(tup1: Tuple, tup2: Tuple) -> Union[List, Tuple]:\n    \"\"\"Returns the index wise addition of tuple elements.\n\n    Args:\n        tup1 (Tuple): First tuple\n        tup2 (Tuple): Second tuple\n\n    Returns:\n        Union[List, Tuple]: Returns the index wise addition of tuple elements.\n\n    Raises:\n        ValueError: If the length of both tuples is not equal.\n\n    >>> tuple_addition(((1, 2), (3, 4)), ((5, 6), (7, 8)))\n    [[6, 8], [10, 12]]\n    \"\"\"\n    if len(tup1) != len(tup2):\n        raise ValueError(\"Both tuples should have same length\")\n\n    return list(map(sum, zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.8203125
    ],
    [
      "from itertools import chain\n\n\ndef index_wise_addition(t1, t2):\n    return tuple(map(sum, zip(t1, t2)))\n\n\nif __name__ == \"__main__\":\n    t1 = ((1, 2, 3), (4, 5, 6))\n    t2 = ((7, 8, 9), (10, 11, 12))\n    print(index_wise_addition(t1, t2))",
      -2.9921875
    ],
    [
      "from typing import List, Tuple\n\n\ndef nested_tuple_addition(\n    nested_tuple_1: Tuple[List[int], List[int], List[int]],\n    nested_tuple_2: Tuple[List[int], List[int], List[int]]\n) -> Tuple[List[int], List[int], List[int]]:\n    \"\"\"Returns a nested tuple of the addition of index wise elements in the given two nested tuples.\n\n    Args:\n        nested_tuple_1 (Tuple[List[int], List[int], List[int]]): The first nested tuple.\n        nested_tuple_2 (Tuple[List[int], List[int], List[int]]): The second nested tuple.\n\n    Returns:\n        Tuple[List[int], List[int], List[int]]: The nested tuple of the addition of index wise elements.\n    \"\"\"\n    return tuple(\n        tuple(map(sum, zip(x, y))) for x, y in zip(nested_tuple_1, nested_tuple_2)\n    )\n\n\nif __name__ == \"__main__\":\n    print(nested_tuple_addition(\n        ((1, 2, 3), (4, 5, 6), (7, 8, 9)),\n        ((1, 2, 3), (4, 5, 6), (7, 8, 9)),\n    ))",
      -3.21484375
    ],
    [
      "from functools import reduce\n\n\ndef index_wise_addition(a: tuple, b: tuple) -> tuple:\n    \"\"\"\n    >>> index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8)))\n    ((6, 8), (10, 12))\n\n    >>> index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8, 9)))\n    ((6, 8), (10, 12))\n\n    >>> index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8, 9, 10)))\n    ((6, 8), (10, 12))\n\n    >>> index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8, 9, 10, 11)))\n    ((6, 8), (10, 12))\n    \"\"\"\n    return tuple(\n        tuple(reduce(lambda x, y: x + y, (a_row[i], b_row[i])) for i in range(len(a_row)))\n        for a_row, b_row in zip(a, b)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.216796875
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef nested_tuples_addition(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef nested_tuples_addition_reduce(tup1, tup2):\n    return tuple(reduce(add, zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    print(nested_tuples_addition(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((1, 2, 3), (4, 5, 6), (7, 8, 9))))\n    print(nested_tuples_addition_reduce(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((1, 2, 3), (4, 5, 6), (7, 8, 9))))",
      -3.220703125
    ],
    [
      "from functools import reduce\n\n\ndef sum_tuple(t1, t2):\n    return tuple(map(lambda x, y: x + y, t1, t2))\n\n\ndef main():\n    t1 = ((1, 2, 3), (4, 5, 6))\n    t2 = ((7, 8, 9), (10, 11, 12))\n    print(sum_tuple(t1, t2))\n    t1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    t2 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    print(sum_tuple(t1, t2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.26171875
    ],
    [
      "from itertools import chain\nfrom functools import reduce\n\n\ndef nested_tuples_addition(tup1, tup2):\n    return tuple(reduce(lambda x, y: x+y, chain(*tup1)))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6))\n    tup2 = ((7, 8, 9), (10, 11, 12))\n    print(nested_tuples_addition(tup1, tup2))",
      -3.63671875
    ],
    [
      "from itertools import zip_longest\n\n\ndef nested_tuple_addition(tup1, tup2):\n    return tuple(\n        tuple(x + y for x, y in zip_longest(sublist1, sublist2, fillvalue=0))\n        for sublist1, sublist2 in zip_longest(tup1, tup2, fillvalue=())\n    )\n\n\ndef main():\n    t1 = ((1, 2, 3), (4, 5, 6))\n    t2 = ((1, 2, 3), (4, 5, 6))\n    print(nested_tuple_addition(t1, t2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.775390625
    ],
    [
      "from itertools import chain\nfrom functools import reduce\n\n\ndef tuple_addition(tup_1, tup_2):\n    \"\"\"\n    Adds two tuples elementwise\n    :param tup_1: tuple\n    :param tup_2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(map(sum, zip(tup_1, tup_2)))\n\n\ndef tuple_addition_v2(tup_1, tup_2):\n    \"\"\"\n    Adds two tuples elementwise\n    :param tup_1: tuple\n    :param tup_2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(map(lambda x, y: x + y, tup_1, tup_2))\n\n\ndef tuple_addition_v3(tup_1, tup_2):\n    \"\"\"\n    Adds two tuples elementwise\n    :param tup_1: tuple\n    :param tup_2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(map(lambda x: x[0] + x[1], zip(tup_1, tup_2)))\n\n\ndef tuple_addition_v4(tup_1, tup_2):\n    \"\"\"\n    Adds two tuples elementwise\n    :param tup_1: tuple\n    :param tup_2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(map(lambda x: x + y, chain(tup_1, tup_2)))\n\n\ndef tuple_addition_v5(tup_1, tup_2):\n    \"\"\"\n    Adds two tuples elementwise\n    :param tup_1: tuple\n    :param tup_2: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(map(lambda x: x[0] + x[1], zip(tup_1, tup_2)))\n\n\ndef tuple_addition_v6(tup_1, tup_2):\n    \"\"\"\n    Adds two tuples elementwise\n    :param tup_1: tuple\n    :param tup_2:",
      -3.90234375
    ],
    [
      "from functools import reduce\n\n\ndef index_wise_addition(tup1: tuple, tup2: tuple) -> tuple:\n    return tuple(map(lambda x, y: x + y, tup1, tup2))\n\n\ndef index_wise_addition_recursive(tup1: tuple, tup2: tuple) -> tuple:\n    if len(tup1) == 0:\n        return tup1\n    return (tup1[0] + tup2[0],) + index_wise_addition_recursive(tup1[1:], tup2[1:])\n\n\ndef index_wise_addition_reduce(tup1: tuple, tup2: tuple) -> tuple:\n    return tuple(reduce(lambda x, y: x + y, tup1))\n\n\nif __name__ == \"__main__\":\n    print(index_wise_addition((1, 2, 3), (4, 5, 6)))\n    print(index_wise_addition_recursive((1, 2, 3), (4, 5, 6)))\n    print(index_wise_addition_reduce((1, 2, 3), (4, 5, 6)))",
      -3.953125
    ],
    [
      "from typing import List, Tuple\n\n\ndef index_wise_addition(first_tuple: Tuple[List[int]], second_tuple: Tuple[List[int]]) -> Tuple[List[int]]:\n    \"\"\"Returns the index wise addition of two given nested tuples.\n\n    Examples:\n        >>> assert index_wise_addition(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\n    \"\"\"\n    return tuple(tuple(sum(x) for x in zip(*sub_tuples)) for sub_tuples in zip(first_tuple, second_tuple))\n\n\ndef index_wise_addition_with_list_comprehension(\n        first_tuple: Tuple[List[int]], second_tuple: Tuple[List[int]]\n) -> Tuple[List[int]]:\n    \"\"\"Returns the index wise addition of two given nested tuples.\n\n    Examples:\n        >>> assert index_wise_addition_with_list_comprehension(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\n    \"\"\"\n    return tuple(\n        [sum(x) for x in zip(*sub_tuples)]\n        for sub_tuples in zip(first_tuple, second_tuple)\n    )\n\n\ndef index_wise_addition_with_map(\n        first_tuple: Tuple[List[int]], second_tuple: Tuple[List[int]]\n) -> Tuple[List[int]]:\n    \"\"\"Returns the index wise addition of two given nested tuples.\n\n    Examples:\n        >>> assert index_wise_addition_with_map(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\n    \"\"\"\n    return tuple(\n        map(sum, zip(*sub_tuples))\n        for sub_tuples in zip(first_tuple, second_tuple)\n    )",
      -4.00390625
    ],
    [
      "def tuple_addition(t1, t2):\n    t_result = []\n    for i in range(len(t1)):\n        t_result.append(t1[i]+t2[i])\n    return tuple(t_result)\n\n\nt1 = ((1, 2), (3, 4), (5, 6))\nt2 = ((7, 8), (9, 10), (11, 12))\nprint(tuple_addition(t1, t2))",
      -4.41796875
    ],
    [
      "from itertools import zip_longest\n\n\ndef index_wise_addition(t1, t2):\n    result = tuple(\n        tuple(map(sum, zip_longest(t1[i], t2[i], fillvalue=0)))\n        for i in range(len(t1))\n    )\n    return result\n\n\ndef main():\n    t1 = ((1, 2, 3), (4, 5, 6))\n    t2 = ((7, 8, 9), (10, 11, 12))\n    result = index_wise_addition(t1, t2)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.52734375
    ],
    [
      "from itertools import chain\nfrom functools import reduce\n\n\ndef nested_tuple_sum(tup1, tup2):\n    return tuple(map(sum, zip(*tup1, *tup2)))\n\n\ndef nested_tuple_sum_v2(tup1, tup2):\n    return tuple(reduce(lambda x, y: x + y, chain(*tup1, *tup2)))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6))\n    tup2 = ((7, 8, 9), (10, 11, 12))\n    print(nested_tuple_sum(tup1, tup2))\n    print(nested_tuple_sum_v2(tup1, tup2))",
      -4.6015625
    ],
    [
      "from functools import reduce\n\n\ndef add(a, b):\n    return a + b\n\n\ndef add_nested_tuples(a, b):\n    return tuple(reduce(add, zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    a = ((1, 2, 3), (4, 5, 6))\n    b = ((7, 8, 9), (10, 11, 12))\n    print(add_nested_tuples(a, b))",
      -4.8046875
    ],
    [
      "from itertools import chain\n\n\ndef index_wise_addition(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef index_wise_addition_with_list_comprehension(tup1, tup2):\n    return tuple([tup1[i] + tup2[i] for i in range(len(tup1))])\n\n\ndef index_wise_addition_with_chain(tup1, tup2):\n    return tuple(chain(*zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2), (3, 4))\n    tup2 = ((5, 6), (7, 8))\n    print(index_wise_addition(tup1, tup2))\n    print(index_wise_addition_with_list_comprehension(tup1, tup2))\n    print(index_wise_addition_with_chain(tup1, tup2))",
      -4.85546875
    ],
    [
      "from itertools import chain\nfrom typing import List\n\n\ndef sum_tuples(a: tuple, b: tuple) -> tuple:\n    \"\"\"Returns a tuple of added elements at each index.\n\n    Args:\n        a (tuple): First nested tuple.\n        b (tuple): Second nested tuple.\n\n    Examples:\n        >>> assert sum_tuples( ((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12)) ) == ((8, 10, 12), (14, 16, 18))\n        >>> assert sum_tuples( ((1, 2), (3, 4)), ((5, 6), (7, 8)) ) == ((6, 8), (10, 12))\n    \"\"\"\n    return tuple(\n        map(\n            lambda x: tuple(chain(*x)),\n            zip(a, b),\n        )\n    )\n\n\ndef sum_tuples_list(a: List[tuple], b: List[tuple]) -> List[tuple]:\n    \"\"\"Returns a list of added elements at each index.\n\n    Args:\n        a (List[tuple]): First nested tuple.\n        b (List[tuple]): Second nested tuple.\n\n    Examples:\n        >>> assert sum_tuples_list( [(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)] ) == [(8, 10, 12), (14, 16, 18)]\n        >>> assert sum_tuples_list( [(1, 2), (3, 4)], [(5, 6), (7, 8)] ) == [(6, 8), (10, 12)]\n    \"\"\"\n    return [sum_tuples(i, j) for i, j in zip(a, b)]\n\n\nif __name__ == \"__main__\":\n    print(sum_tuples(((1, 2, 3), (4, 5, 6)), ((7",
      -4.9609375
    ],
    [
      "from itertools import chain\n\n\ndef add_nested_tuples(t1, t2):\n    return tuple(map(sum, zip(*t1, *t2)))\n\n\nif __name__ == \"__main__\":\n    t1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    t2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(add_nested_tuples(t1, t2))",
      -5.05859375
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef nested_tuples_addition(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef nested_tuples_addition_reduce(tup1, tup2):\n    return tuple(reduce(add, zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6))\n    tup2 = ((7, 8, 9), (10, 11, 12))\n    print(nested_tuples_addition(tup1, tup2))\n    print(nested_tuples_addition_reduce(tup1, tup2))",
      -5.3203125
    ],
    [
      "from itertools import zip_longest\n\n\ndef index_wise_addition(tup_1, tup_2):\n    result = tuple(map(lambda x, y: x + y, tup_1, tup_2))\n    return result\n\n\ndef index_wise_addition_zip(tup_1, tup_2):\n    result = tuple(zip_longest(tup_1, tup_2, fillvalue=0))\n    result = tuple(map(lambda x, y: x + y, result[0], result[1]))\n    return result\n\n\nif __name__ == \"__main__\":\n    tup_1 = ((1, 2, 3), (4, 5, 6))\n    tup_2 = ((10, 20, 30), (40, 50, 60))\n    print(index_wise_addition(tup_1, tup_2))\n    print(index_wise_addition_zip(tup_1, tup_2))",
      -5.875
    ],
    [
      "from functools import reduce\n\n\ndef nested_tuple_addition(nested_tup1, nested_tup2):\n    return tuple(\n        tuple(map(sum, zip(x, y))) for x, y in zip(nested_tup1, nested_tup2)\n    )\n\n\ndef nested_tuple_addition_reduce(nested_tup1, nested_tup2):\n    return tuple(\n        tuple(reduce(lambda x, y: x + y, i))\n        for i in zip(nested_tup1, nested_tup2)\n    )\n\n\nif __name__ == \"__main__\":\n    inp_arr1 = (\n        ((1, 2, 3, 4), (4, 5, 6, 7)),\n        ((8, 9, 10, 11), (12, 13, 14, 15)),\n        ((16, 17, 18, 19), (20, 21, 22, 23)),\n    )\n    inp_arr2 = (\n        ((2, 4, 6, 8), (10, 12, 14, 16)),\n        ((18, 20, 22, 24), (26, 28, 30, 32)),\n        ((34, 36, 38, 40), (42, 44, 46, 48)),\n    )\n    op = nested_tuple_addition(inp_arr1, inp_arr2)\n    print(op)\n    op = nested_tuple_addition_reduce(inp_arr1, inp_arr2)\n    print(op)",
      -6.1875
    ],
    [
      "from functools import reduce\n\n\ndef tuple_addition(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef tuple_addition2(tup1, tup2):\n    return tuple(map(lambda x: x[0] + x[1], zip(tup1, tup2)))\n\n\ndef tuple_addition3(tup1, tup2):\n    return tuple(map(lambda x, y: x + y, tup1, tup2))\n\n\ndef tuple_addition4(tup1, tup2):\n    return tuple(map(lambda x, y: x + y, *tup1, *tup2))\n\n\ndef tuple_addition5(tup1, tup2):\n    return tuple(map(lambda x: x[0] + x[1], zip(*tup1, *tup2)))\n\n\ndef tuple_addition6(tup1, tup2):\n    return reduce(lambda x, y: x + y, zip(tup1, tup2))\n\n\ndef tuple_addition7(tup1, tup2):\n    return reduce(lambda x, y: x + y, zip(*tup1, *tup2))\n\n\ndef tuple_addition8(tup1, tup2):\n    return tuple(map(sum, zip(*tup1, *tup2)))\n\n\ndef tuple_addition9(tup1, tup2):\n    return tuple(map(sum, zip(*tup1, *tup2)))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2), (3, 4), (5, 6))\n    tup2 = ((-1, -2), (3, 4), (5, 6))\n    print(tuple_addition(tup1, tup2))\n    print(tuple_addition2(tup1, tup2))\n    print(tuple_addition3(tup1, tup2))\n    print(tuple_addition4(tup1",
      -6.29296875
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef nested_tuples_addition(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef nested_tuples_addition_v2(tup1, tup2):\n    return tuple(map(reduce, add, tup1, tup2))\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(nested_tuples_addition(tup1, tup2))\n    print(nested_tuples_addition_v2(tup1, tup2))",
      -6.47265625
    ],
    [
      "from itertools import zip_longest\n\ndef nested_tuple_add(tuple1, tuple2):\n    return tuple(map(lambda x, y: x + y, tuple1, tuple2))\n\ndef main():\n    tuple1 = ((1, 2, 3), (4, 5, 6))\n    tuple2 = ((10, 20, 30), (40, 50, 60))\n    print(\"Tuple 1: \" + str(tuple1))\n    print(\"Tuple 2: \" + str(tuple2))\n    print(\"Index wise addition: \" + str(nested_tuple_add(tuple1, tuple2)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.64453125
    ],
    [
      "from itertools import chain\nfrom collections import defaultdict\n\n\ndef nested_tuple_sum(tup1, tup2):\n    d = defaultdict(int)\n    for i in chain(tup1, tup2):\n        for j in i:\n            d[j] += 1\n    return tuple(d.keys()), tuple(d.values())\n\n\nif __name__ == \"__main__\":\n    tup1 = ((1, 2, 3), (4, 5, 6))\n    tup2 = ((7, 8, 9), (10, 11, 12))\n    print(nested_tuple_sum(tup1, tup2))",
      -6.9375
    ],
    [
      "from itertools import chain\nfrom functools import reduce\n\n\ndef nested_tuple_addition(t1, t2):\n    return tuple(map(sum, zip(*t1)))\n\n\ndef nested_tuple_addition_2(t1, t2):\n    return tuple(map(sum, zip(t1, t2)))\n\n\ndef nested_tuple_addition_3(t1, t2):\n    return tuple(map(lambda x, y: x + y, t1, t2))\n\n\ndef nested_tuple_addition_4(t1, t2):\n    return tuple(map(lambda x, y: x + y, chain.from_iterable(zip(t1, t2))))\n\n\ndef nested_tuple_addition_5(t1, t2):\n    return tuple(map(lambda x, y: x + y, chain.from_iterable(zip_longest(t1, t2, fillvalue=0))))\n\n\ndef nested_tuple_addition_6(t1, t2):\n    return tuple(map(lambda x, y: x + y, chain.from_iterable(zip_longest(t1, t2, fillvalue=0))))\n\n\ndef nested_tuple_addition_7(t1, t2):\n    return tuple(map(lambda x, y: x + y, chain.from_iterable(zip_longest(t1, t2, fillvalue=0))))\n\n\ndef nested_tuple_addition_8(t1, t2):\n    return tuple(map(lambda x, y: x + y, chain.from_iterable(zip_longest(t1, t2, fillvalue=0))))\n\n\ndef nested_tuple_addition_9(t1, t2):\n    return tuple(map(lambda x, y: x + y, chain.from_iterable(zip_longest(t1, t2, fillvalue=0))))\n\n\ndef nested_tuple_addition_10(t1, t2):\n    return tuple(map(lambda x, y: x + y, chain.from_iterable(zip_longest(t1, t",
      -6.9921875
    ],
    [
      "from functools import reduce\n\n\ndef add_tuples(tuple1, tuple2):\n    return tuple(map(lambda x, y: x + y, tuple1, tuple2))\n\n\ndef add_tuples_reduce(tuple1, tuple2):\n    return tuple(reduce(lambda x, y: x + y, zip(tuple1, tuple2)))\n\n\ndef add_tuples_zip(tuple1, tuple2):\n    return tuple(zip(*zip(tuple1, tuple2)))\n\n\nif __name__ == '__main__':\n    t1 = ((1, 2, 3), (4, 5, 6))\n    t2 = ((2, 3, 4), (5, 6, 7))\n    print(add_tuples(t1, t2))\n    print(add_tuples_reduce(t1, t2))\n    print(add_tuples_zip(t1, t2))",
      -8.046875
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef nested_tuples_addition(tup_1, tup_2):\n    return tuple(map(add, tup_1, tup_2))\n\n\ndef nested_tuples_addition_functools(tup_1, tup_2):\n    return tuple(map(reduce, add, tup_1, tup_2))\n\n\nif __name__ == \"__main__\":\n    tup_1 = ((1, 2, 3), (4, 5, 6))\n    tup_2 = ((7, 8, 9), (10, 11, 12))\n    print(nested_tuples_addition(tup_1, tup_2))\n    print(nested_tuples_addition_functools(tup_1, tup_2))",
      -8.5078125
    ],
    [
      "from itertools import chain\nfrom functools import reduce\n\n\ndef add_tuple_elements(input_tuple_1, input_tuple_2):\n    return tuple(map(sum, zip(*input_tuple_1)))\n\n\ndef add_tuple_elements_v2(input_tuple_1, input_tuple_2):\n    return tuple(map(sum, zip(input_tuple_1, input_tuple_2)))\n\n\ndef add_tuple_elements_v3(input_tuple_1, input_tuple_2):\n    return tuple(map(lambda x, y: x + y, input_tuple_1, input_tuple_2))\n\n\ndef add_tuple_elements_v4(input_tuple_1, input_tuple_2):\n    return tuple(map(lambda x: x[0] + x[1], zip(input_tuple_1, input_tuple_2)))\n\n\ndef add_tuple_elements_v5(input_tuple_1, input_tuple_2):\n    return tuple(map(lambda x, y: x + y, *zip(input_tuple_1, input_tuple_2)))\n\n\ndef add_tuple_elements_v6(input_tuple_1, input_tuple_2):\n    return tuple(map(sum, chain(input_tuple_1, input_tuple_2)))\n\n\ndef add_tuple_elements_v7(input_tuple_1, input_tuple_2):\n    return tuple(reduce(lambda x, y: x + y, zip(input_tuple_1, input_tuple_2)))\n\n\ndef add_tuple_elements_v8(input_tuple_1, input_tuple_2):\n    return tuple(reduce(lambda x, y: x + y, chain(input_tuple_1, input_tuple_2)))\n\n\ndef add_tuple_elements_v9(input_tuple_1, input_tuple_2):\n    return tuple(sum(zip(input_tuple_1, input_tuple_2), ()))\n\n\ndef add_tuple_elements_v10(input_tuple_1, input_tuple_2):\n    return tuple(sum(zip(input_tuple_1",
      -9.3203125
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef nested_tuple_addition(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef nested_tuple_addition_reduce(tup1, tup2):\n    return tuple(reduce(add, tup1))\n\n\nif __name__ == \"__main__\":\n    A = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    B = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\n    print(nested_tuple_addition(A, B))\n    print(nested_tuple_addition_reduce(A, B))",
      -10.9765625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}