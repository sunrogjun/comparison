{
  "problem": {
    "task_id": "MBPP/282",
    "prompt": "Write a function to substaract two lists using map and lambda function.",
    "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
    "test_list": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ],
    "challenge_test_list": [],
    "problem_id": 271
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def subtract(lst1, lst2):\n    return list(map(lambda x: x[0] - x[1], zip(lst1, lst2)))\n\n\ndef subtract_2(lst1, lst2):\n    return [a - b for a, b in zip(lst1, lst2)]\n\n\nprint(subtract([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))\nprint(subtract_2([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))",
      14.8046875
    ],
    [
      "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef substract_2(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4, 5]\n    print(substract(list1, list2))\n    print(substract_2(list1, list2))",
      14.4453125
    ],
    [
      "def substract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    l1 = [2, 3, 4, 5]\n    l2 = [1, 2, 3, 4]\n    print(substract(l1, l2))",
      13.265625
    ],
    [
      "# def sub(a, b):\n#     return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n# def sub(a, b):\n#     return [x - y for x, y in zip(a, b)]\n\ndef sub(a, b):\n    return [x - y for x, y in zip(a, b)]\n\n\ndef sub_2(a, b):\n    return [a[i] - b[i] for i in range(len(a))]\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [1, 2, 3, 4, 5]\n    print(sub(a, b))\n    print(sub_2(a, b))",
      11.6484375
    ],
    [
      "def substract(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\nif __name__ == '__main__':\n    list1 = [2, 3, 5, 6, 8, 10]\n    list2 = [1, 2, 3, 4, 5, 6]\n    print(substract(list1, list2))",
      11.609375
    ],
    [
      "def substract(l1, l2):\n    return list(map(lambda x, y: x - y, l1, l2))\n\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [2, 4, 6, 8, 10]\n    print(substract(l1, l2))",
      9.546875
    ],
    [
      "# Function to subtract two lists using map and lambda\ndef subtractLists(list1, list2):\n    # Using map() to iterate through the lists\n    result = list(map(lambda x, y: x - y, list1, list2))\n    return result\n\n# Taking inputs from user\nlist1 = list(map(int, input(\"Enter first list: \").split()))\nlist2 = list(map(int, input(\"Enter second list: \").split()))\n\n# Printing the result\nprint(subtractLists(list1, list2))",
      9.15625
    ],
    [
      "def subtraction(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(subtraction([1, 2, 3, 4, 5], [1, 2, 3, 4, 1]))",
      8.875
    ],
    [
      "def list_subtraction(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [2, 3, 4, 5]\n    print(list_subtraction(list1, list2))",
      8.546875
    ],
    [
      "def sub(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [2, 3, 4, 5, 6, 7, 8]\n\nprint(sub(list1, list2))",
      8.421875
    ],
    [
      "def substract(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\nif __name__ == '__main__':\n    list_a = [1, 2, 3, 4, 5, 6, 7]\n    list_b = [5, 6, 7, 8, 9, 10, 11]\n    print(substract(list_a, list_b))",
      8.2578125
    ],
    [
      "def subtract_list(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef subtract_list_1(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_2(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_3(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_4(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_5(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_6(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_7(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_8(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_9(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_10(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_11(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_12(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_13(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]",
      7.8125
    ],
    [
      "def list_subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef main():\n    list1 = [2, 3, 1, 4, 5]\n    list2 = [1, 2, 3, 4, 5]\n    print(list_subtract(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()",
      7.76171875
    ],
    [
      "def substract_lists(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\nprint(substract_lists([1, 2, 3], [3, 2, 1]))\nprint(substract_lists([1, 2, 3], [3, 2]))\nprint(substract_lists([1, 2], [3, 2, 1]))",
      7.6328125
    ],
    [
      "def substract_list(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(substract_list([1, 2, 3], [1, 2, 3]))\nprint(substract_list([1, 2, 3], [2, 4, 6]))\nprint(substract_list([1, 2, 3], [3, 6, 9]))",
      7.47265625
    ],
    [
      "def substract_list(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6]\n    b = [3, 5, 2, 1, 6, 7]\n    print(substract_list(a, b))",
      7.14453125
    ],
    [
      "# Using map\ndef subtract(list1, list2):\n    return list(map(lambda x: x[0]-x[1], zip(list1, list2)))\n\n# Using list comprehension\ndef subtract(list1, list2):\n    return [x[0]-x[1] for x in zip(list1, list2)]\n\n# Using for loop\ndef subtract(list1, list2):\n    res = []\n    for x, y in zip(list1, list2):\n        res.append(x-y)\n    return res\n\n# Using reduce\nfrom functools import reduce\ndef subtract(list1, list2):\n    return reduce(lambda x, y: x+y, [x-y for x, y in zip(list1, list2)])\n\n# Using numpy\nimport numpy as np\ndef subtract(list1, list2):\n    return np.subtract(list1, list2)\n\nprint(subtract([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(subtract([1, 2, 3, 4], [2, 4, 6, 8]))",
      6.93359375
    ],
    [
      "def subtract(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\n\nprint(subtract([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(subtract([1, 2, 3, 4], [1, 2, 3]))\nprint(subtract([1, 2, 3], [1, 2, 3, 4]))\nprint(subtract([1, 2, 3], [1, 2, 3]))",
      6.8359375
    ],
    [
      "# Solution\n\ndef subtract(x, y):\n    return list(map(lambda i: i[0] - i[1], zip(x, y)))\n\n# Tests\nprint(\"Pass\" if (subtract([1, 2, 3], [1, 2, 3]) == [0, 0, 0]) else \"Fail\")\nprint(\"Pass\" if (subtract([1, 2, 3], [3, 2, 1]) == [-2, 0, 2]) else \"Fail\")\nprint(\"Pass\" if (subtract([1, 2, 3], [1, 1, 1]) == [0, 1, 2]) else \"Fail\")\nprint(\"Pass\" if (subtract([1, 1, 1], [1, 2, 3]) == [-1, -1, -1]) else \"Fail\")",
      6.73828125
    ],
    [
      "def list_substract(lst1, lst2):\n    \"\"\"Substract lst2 from lst1.\"\"\"\n    return list(map(lambda x: x[0] - x[1], zip(lst1, lst2)))\n\nif __name__ == '__main__':\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [1, 2, 3, 4, 5]\n    print(list_substract(lst1, lst2))",
      6.42578125
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef test_subtract():\n    assert subtract([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == [-1, -2, -3, -4, -5]",
      5.7265625
    ],
    [
      "# Solution\n\n\ndef list_subtraction(list_1, list_2):\n    return list(map(lambda x: x[0] - x[1], zip(list_1, list_2)))\n\n\n# Tests\nprint(list_subtraction([1, 2, 3], [1, 2, 3]))  # [0, 0, 0]\nprint(list_subtraction([1, 2, 3], [2, 4, 6]))  # [-1, -2, -3]\nprint(list_subtraction([1, 2, 3], [3, 2, 1]))  # [0, 0, 0]\nprint(list_subtraction([1, 2, 3], [1, 2, 3, 4]))  # [0, 0, 0, -1]\nprint(list_subtraction([1, 2, 3, 4], [1, 2, 3]))  # [0, 0, 0, 1]\nprint(list_subtraction([1, 2, 3, 4], [5, 6, 7]))  # [-4, -4, -4, -4]",
      5.546875
    ],
    [
      "def subtract_list(list1, list2):\n    result = list(map(lambda x, y: x - y, list1, list2))\n    return result\n\nprint(subtract_list([1, 2, 3], [2, 2, 2]))\nprint(subtract_list([1, 2, 3], [2, 2]))\nprint(subtract_list([1, 2, 3], [2, 2, 2, 2]))",
      5.53125
    ],
    [
      "def list_subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef main():\n    print(\"list1: \", list1)\n    print(\"list2: \", list2)\n    print(\"list_subtract: \", list_subtract(list1, list2))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    main()",
      5.09375
    ],
    [
      "def subtract_list(list1, list2):\n    result = map(lambda x, y: x - y, list1, list2)\n    return list(result)\n\n\nprint(subtract_list([1, 2, 3, 4, 5], [1, 2, 3]))",
      4.76171875
    ],
    [
      "def subtract_list(first, second):\n    return list(map(lambda x, y: x - y, first, second))\n\n\nif __name__ == '__main__':\n    first_list = [1, 2, 3, 4, 5]\n    second_list = [1, 1, 1, 1, 1]\n    print(subtract_list(first_list, second_list))",
      4.71875
    ],
    [
      "def sub(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(sub([1, 2, 3, 4], [1, 2, 3, 4]))",
      4.30859375
    ],
    [
      "def subtract_list(l1, l2):\n    return list(map(lambda x: x[0]-x[1], zip(l1, l2)))\n\nprint(subtract_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      3.931640625
    ],
    [
      "def substract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(substract([1, 2, 3, 4, 5, 6], [1, 2, 3, 4]))",
      3.85546875
    ],
    [
      "def subtract_list(list1, list2):\n    return list(map(lambda x,y: x-y, list1, list2))\n\nprint(subtract_list([1,2,3,4,5], [1,2,3,4,5]))",
      3.755859375
    ],
    [
      "def substract_list(list_1, list_2):\n    return list(map(lambda x, y: x - y, list_1, list_2))\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5]\n    list_2 = [5, 4, 3, 2, 1]\n    print(substract_list(list_1, list_2))",
      3.501953125
    ],
    [
      "# Write a function to substaract two lists using map and lambda function.\n\n# def subtract(list1, list2):\n#     return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n#     # return list(map(lambda x, y: x - y, list1, list2))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n# def subtract(list1, list2):\n#     return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n# def subtract(list1, list2):\n#     return list(map(lambda x, y: x - y, list1, list2))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n# def subtract(list1, list2):\n#     return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n# def subtract(list1, list2):\n#     return list(map(lambda x, y: x - y, list1, list2))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n\ndef subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1,",
      3.390625
    ],
    [
      "def subtract(l1, l2):\n    return list(map(lambda x: x[0] - x[1], zip(l1, l2)))\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [5, 4, 3, 2, 1]\n    print(subtract(l1, l2))",
      2.884765625
    ],
    [
      "def subtract(l1, l2):\n    return list(map(lambda x: x[0] - x[1], zip(l1, l2)))\n\nl1 = [1, 2, 3, 4, 5]\nl2 = [1, 2, 3, 4, 5]\n\nprint(subtract(l1, l2))",
      2.7734375
    ],
    [
      "def substract(list1, list2):\n    return list(map(lambda x,y: x-y, list1, list2))\n\nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4,5]\n\nprint(substract(list1, list2))",
      2.736328125
    ],
    [
      "def substract_lists(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [2, 4, 6]\n    print(substract_lists(list1, list2))",
      2.703125
    ],
    [
      "def subtract_lists(list_1, list_2):\n    return list(map(lambda x: x[0] - x[1], zip(list_1, list_2)))\n\n\ndef subtract_lists_zip(list_1, list_2):\n    return list(zip(list_1, list_2))\n\n\nlist_1 = [1, 2, 3, 4, 5]\nlist_2 = [1, 2, 3, 4, 5]\n\nprint(subtract_lists(list_1, list_2))\nprint(subtract_lists_zip(list_1, list_2))",
      2.419921875
    ],
    [
      "def list_subtraction(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8, 9]\n\nprint(list_subtraction(list1, list2))",
      2.224609375
    ],
    [
      "def sub_lists(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nlist1 = [1, 2, 3]\nlist2 = [4, 2, 5]\nprint(sub_lists(list1, list2))",
      2.0546875
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == \"__main__\":\n    print(subtract([1, 2, 3, 4], [1, 2, 3, 4]))",
      1.9248046875
    ],
    [
      "def substract_list(list_1, list_2):\n    return list(map(lambda x,y: x-y, list_1, list_2))\n\nlist_1 = [1,2,3,4,5]\nlist_2 = [3,5,7,9,11]\n\nprint(substract_list(list_1, list_2))",
      1.80078125
    ],
    [
      "def subtract(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\n\nprint(subtract([1, 2, 3, 4], [2, 4, 6, 8]))",
      1.79296875
    ],
    [
      "def sub(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\na = [2, 4, 5, 6, 7, 9]\nb = [3, 4, 6, 6, 7, 8]\nprint(sub(a, b))",
      1.75390625
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nprint(subtract([1, 2, 3, 4], [2, 4, 6, 8]))",
      1.7099609375
    ],
    [
      "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\n\nprint(substract(list1, list2))",
      1.654296875
    ],
    [
      "def substract(list_1, list_2):\n    return list(map(lambda x, y: x - y, list_1, list_2))\n\ndef substract_lambda(list_1, list_2):\n    return list(map(lambda x, y: x - y, list_1, list_2))\n\nprint(substract([1, 2, 3], [1, 1, 1]))\nprint(substract_lambda([1, 2, 3], [1, 1, 1]))",
      1.6142578125
    ],
    [
      "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(substract([1, 2, 3, 4, 5], [1, 2, 3, 4]))",
      1.4921875
    ],
    [
      "def sub_list(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\nprint(sub_list(list1, list2))",
      1.3828125
    ],
    [
      "def subtraction(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4]\n    print(subtraction(list1, list2))",
      1.376953125
    ],
    [
      "def subtract_lists(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\n\nprint(subtract_lists(list1, list2))",
      1.314453125
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x,y: x-y, list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\n\nprint(subtract(list1, list2))\n\n# Time Complexity O(n)\n# Space Complexity O(n)",
      1.2646484375
    ],
    [
      "def substract_list(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\n\ndef test_substract_list():\n    assert substract_list([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\n\n\nif __name__ == \"__main__\":\n    test_substract_list()",
      1.26171875
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nlist1 = [1, 2, 3]\nlist2 = [1, 1, 1]\nprint(subtract(list1, list2))",
      1.24609375
    ],
    [
      "def substract_list(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 4]\n    print(substract_list(a, b))",
      0.96044921875
    ],
    [
      "def subtract_lists(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2, 3, 4]\nprint(subtract_lists(list1, list2))",
      0.86279296875
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(subtract([1, 2, 3, 4], [2, 4, 6, 8]))",
      0.7919921875
    ],
    [
      "def subtract_list(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\n\nprint(subtract_list([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]))",
      0.7685546875
    ],
    [
      "def substract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6]\n    b = [3, 2, 6, 7, 4, 5]\n    print(substract(a, b))",
      0.72021484375
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [1, 2, 3]\n    print(subtract(list1, list2))",
      0.57861328125
    ],
    [
      "def substract_lists(list1, list2):\n    return list(map(lambda x: x[0]-x[1], zip(list1, list2)))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\n\nprint(substract_lists(list1, list2))",
      0.497314453125
    ],
    [
      "def list_subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [3, 4, 5, 6, 7]\n    result = list_subtract(list1, list2)\n    print(result)",
      0.396728515625
    ],
    [
      "def sub(list_a, list_b):\n    return list(map(lambda x, y: x - y, list_a, list_b))\n\n\nprint(sub([1, 2, 3, 4], [1, 2, 3, 4]))",
      0.264892578125
    ],
    [
      "def sub_lists(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nprint(sub_lists([1,2,3,4,5], [1,2,3,4,5]))",
      0.10284423828125
    ],
    [
      "def list_substraction(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(list_substraction([1, 2, 3, 4], [1, 2, 3, 4]))",
      0.08038330078125
    ],
    [
      "def substract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nprint(substract([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))",
      0.04241943359375
    ],
    [
      "def subtract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3]\n    print(subtract(a, b))",
      0.0194854736328125
    ],
    [
      "def list_subtraction(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef main():\n    list1 = [1, 2, 3, 4]\n    list2 = [1, 2, 3, 4]\n    print(list_subtraction(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.06219482421875
    ],
    [
      "def substract_lists(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [1, 2, 3, 4]\n    print(substract_lists(list1, list2))",
      -0.096435546875
    ],
    [
      "def sub(a, b):\n    return list(map(lambda x,y: x-y, a, b))\n\nprint(sub([1, 2, 3], [2, 4, 5]))",
      -0.1075439453125
    ],
    [
      "def subtract(a, b):\n    return list(map(lambda x: x[0]-x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 4]\n    print(subtract(a, b))",
      -0.1370849609375
    ],
    [
      "def subtract(a, b):\n    return list(map(lambda x, y: x - y, a, b))\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [5, 4, 3, 2, 1]\n    print(subtract(a, b))",
      -0.177978515625
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nassert(subtract([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == [-1, -2, -3, -4, -5])",
      -0.75048828125
    ],
    [
      "def subtract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nprint(subtract([1, 2, 3, 4], [2, 2, 2, 2]))",
      -0.79931640625
    ],
    [
      "def substract(l1, l2):\n    return list(map(lambda x: x[0] - x[1], zip(l1, l2)))\n\n\ndef main():\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [5, 4, 3, 2, 1]\n    print(substract(l1, l2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.81396484375
    ],
    [
      "def substract_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 2, 2, 2, 2]\nprint(substract_list(list1, list2))",
      -0.85693359375
    ],
    [
      "def sub(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(sub([1, 2, 3], [1, 2, 3]))",
      -0.85693359375
    ],
    [
      "def subtract_lists(lst1, lst2):\n    return list(map(lambda x: x[0] - x[1], zip(lst1, lst2)))\n\n\ndef main():\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    print(subtract_lists(list1, list2))  # [\u22123, \u22123, \u22123]\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef subtract_2(list1, list2):\n    return [list1[i] - list2[i] for i in range(len(list1))]",
      -0.85693359375
    ],
    [
      "def subtraction(a, b):\n    return list(map(lambda x, y: x - y, a, b))\n\n\ndef main():\n    a = [2, 4, 6, 8]\n    b = [1, 3, 5, 7]\n    print(subtraction(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "list1 = [1,2,3,4,5]\nlist2 = [6,7,8,9,10]\n\ndef substract_list(list1,list2):\n    result = list(map(lambda x,y: x-y, list1,list2))\n    return result\n\nprint(substract_list(list1,list2))",
      -0.85693359375
    ],
    [
      "def substract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\na = [1, 2, 3, 4]\nb = [3, 2, 1, 0]\nprint(substract(a, b))",
      -0.85693359375
    ],
    [
      "def subtract_list(list_a, list_b):\n    return list(map(lambda x, y: x - y, list_a, list_b))\n\nprint(subtract_list([1, 2, 3, 4, 5], [1, 2, 3, 4]))",
      -0.85791015625
    ],
    [
      "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4, 5]\n    print(substract(list1, list2))",
      -0.85791015625
    ],
    [
      "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [5, 4, 3, 2, 1]\n    print(substract(list1, list2))",
      -0.8583984375
    ],
    [
      "def subtract(list_1, list_2):\n    return list(map(lambda x: x[0] - x[1], zip(list_1, list_2)))\n\n\ndef subtract_2(list_1, list_2):\n    return [x-y for x, y in zip(list_1, list_2)]\n\nlist_1 = [1, 2, 3, 4, 5]\nlist_2 = [1, 2, 3, 4, 5]\nprint(subtract(list_1, list_2))\nprint(subtract_2(list_1, list_2))",
      -0.8583984375
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(subtract([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))",
      -0.88037109375
    ],
    [
      "def sub(a, b):\n    return list(map(lambda x, y: x - y, a, b))\n\nprint(sub([1, 2, 3], [1, 2, 3]))",
      -0.95654296875
    ],
    [
      "def subtract(x, y):\n    return list(map(lambda n: n[0] - n[1], zip(x, y)))\n\n\nx = [2, 5, 10]\ny = [1, 2, 3]\n\nprint(subtract(x, y))  # [1, 3, 7]",
      -0.97900390625
    ],
    [
      "def subtract_list(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\nprint(subtract_list([1, 2, 3, 4], [1, 2, 3, 4]))",
      -1.021484375
    ],
    [
      "def subtract_lists(l1, l2):\n    return list(map(lambda x: x[0] - x[1], zip(l1, l2)))\n\n\nprint(subtract_lists([1, 2, 3], [1, 2, 3]))\nprint(subtract_lists([1, 2, 3], [3, 2, 1]))",
      -1.14453125
    ],
    [
      "def substract(a, b):\n    return list(map(lambda x: x[0]-x[1], zip(a, b)))\n\n\nprint(substract([1, 2, 3], [1, 2, 3]))",
      -1.3310546875
    ],
    [
      "def subtract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\na = [1, 2, 3, 4, 5]\nb = [4, 3, 2, 1, 0]\n\nprint(subtract(a, b))",
      -1.8818359375
    ],
    [
      "def subtract_two_lists(list1, list2):\n    # check if both lists are of same length\n    if len(list1) != len(list2):\n        return None\n    # apply map function\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [6, 5, 4, 3, 2]\n    print(subtract_two_lists(list1, list2))",
      -2.0546875
    ],
    [
      "def sub(a,b):\n    return list(map(lambda x:x[0]-x[1], zip(a,b)))\n\na = [1,2,3,4,5]\nb = [4,5,6,7,8]\nprint(sub(a,b))",
      -2.505859375
    ],
    [
      "def sub_list(list_a, list_b):\n    return list(map(lambda x, y: x-y, list_a, list_b))\n\nlist_a = [1,2,3,4,5,6,7,8,9]\nlist_b = [1,2,3,4,5,6,7,8,9]\n\nprint(sub_list(list_a, list_b))",
      -2.763671875
    ],
    [
      "def sub_list(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\nlist1 = [2, 4, 6, 8]\nlist2 = [1, 3, 5, 7]\n\nprint(sub_list(list1, list2))",
      -2.87890625
    ],
    [
      "# The first argument is a list of numbers, and the second argument is a list of numbers.\n# The function should return a list of numbers, where each element in the returned list is the subtraction of the corresponding elements in the two lists.\n# The two lists should be of the same length.\n\n\n# def subtract(list1, list2):\n#     return list(map(lambda x, y: x - y, list1, list2))\n\ndef subtract(list1, list2):\n    return [list1[i] - list2[i] for i in range(len(list1))]\n\n\ndef main():\n    print(subtract([1, 1, 1], [1, 5, 2]))\n    print(subtract([1, 2, 3], [3, 2, 1]))\n    print(subtract([5, 5, 5], [2, 2, 2]))\n    print(subtract([1, 2, 3], [3, 2, 1, 4]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.962890625
    ],
    [
      "def subtract(a, b):\n    return list(map(lambda x: x[0]-x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [5, 4, 3, 2, 1]\n    print(\"a = {}\\nb = {}\\n\".format(a, b))\n    print(\"a - b = {}\".format(subtract(a, b)))",
      -3.02734375
    ],
    [
      "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(subtract([1, 2, 3, 4], [1, 2, 3, 4]))",
      -3.998046875
    ],
    [
      "def subtraction(*args):\n    return list(map(lambda x: x[0] - x[1], zip(*args)))\n\n\nprint(subtraction([1, 2, 3, 4], [2, 4, 6, 8]))",
      -4.8515625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}