{
  "problem": {
    "task_id": "MBPP/306",
    "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
    "test_list": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ],
    "challenge_test_list": [],
    "problem_id": 295
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\ndef max_sub_sequence(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n\n    Parameters\n    ----------\n    nums : List[int]\n        list of numbers\n\n    Returns\n    -------\n    int\n        maximum sum of increasing subsequence\n\n    >>> max_sub_sequence([1, 2, 3, 4])\n    10\n    >>> max_sub_sequence([1, 2, 3, 4, 5])\n    15\n    >>> max_sub_sequence([1, 2, 3, 4, 5, 10])\n    25\n    >>> max_sub_sequence([1, 2, 3, 4, 5, 10, 12])\n    32\n    >>> max_sub_sequence([1, 2, 3, 4, 5, 10, 12, 15])\n    39\n    >>> max_sub_sequence([1, 2, 3, 4, 5, 10, 12, 15, 20])\n    50\n    \"\"\"\n\n    length = len(nums)\n    max_sum = nums[0]\n    dp = [0] * length\n    dp[0] = nums[0]\n\n    for i in range(1, length):\n        dp[i] = nums[i]\n\n        for j in range(0, i):\n            if nums[j] < nums[i] and dp[j] + nums[i] > dp[i]:\n                dp[i] = dp[j] + nums[i]\n\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.5
    ],
    [
      "def find_max_sum(arr, k):\n    prefix_sums = [0] * (len(arr) + 1)\n    for i in range(1, len(arr) + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1]\n\n    max_sum = 0\n    for i in range(k + 1, len(arr) + 1):\n        max_sum = max(max_sum, prefix_sums[i] - prefix_sums[i - k - 1])\n\n    return max_sum\n\n\ndef main():\n    arr = [1, 4, 3, 5, 7, 8, 10, 2, 10]\n    k = 3\n    print(find_max_sum(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
      2.45703125
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    dp = [0] * len(nums)\n    max_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        max_sum_increasing_subsequence_i = 0\n        for j in range(i):\n            if nums[i] > nums[j]:\n                max_sum_increasing_subsequence_i = max(\n                    max_sum_increasing_subsequence_i, dp[j]\n                )\n        dp[i] = max_sum_increasing_subsequence_i + nums[i]\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([1, 101, 10, 4, 100, 1000]) == 104\n    assert max_sum_increasing_subsequence([1, 101, 10, 4, 100, 1000, 9]) == 109",
      1.431640625
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(k)\n    \"\"\"\n    n = len(arr)\n\n    dp = [0] * n\n\n    for i in range(k):\n        dp[i] = arr[i]\n\n    for i in range(k, n):\n        curr_max = float(\"-inf\")\n\n        for j in range(k, i + 1):\n            curr_max = max(curr_max, dp[j - 1] + arr[j])\n\n        dp[i] = curr_max\n\n    return dp[-1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([1, 101, 10, 2, 3, 100, 4], 3) == 113",
      0.9833984375
    ],
    [
      "def find_max_sum_increasing_subsequence(arr, k):\n    max_sum = 0\n    dp = [0] * len(arr)\n    for i in range(len(arr)):\n        max_sum_i = 0\n        for j in range(i):\n            if arr[i] > arr[j] and dp[j] > max_sum_i:\n                max_sum_i = dp[j]\n        dp[i] = max_sum_i + arr[i]\n        if i >= k:\n            max_sum = max(max_sum, dp[i] - dp[i - k])\n    return max_sum\n\n\ndef main():\n    arr = [3, 5, 2, 7, 1, 3, 9, 2, 8, 6]\n    k = 3\n    print(find_max_sum_increasing_subsequence(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
      0.1888427734375
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n\n    for i in range(k):\n        max_sum += nums[i]\n\n    max_sum_ending_at_i = max_sum\n\n    for i in range(k, len(nums)):\n        max_sum_ending_at_i = max(max_sum_ending_at_i, nums[i] + nums[i - k])\n        max_sum = max(max_sum, max_sum_ending_at_i)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([10, 20, 30, 50, 100, 110], 2) == 110\n    assert max_sum_increasing_subsequence([10, 20, 30, 50, 100, 110], 3) == 150",
      -0.352783203125
    ],
    [
      "def max_subsequence(arr, i, k):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n\n    return dp[k]\n\n\nprint(max_subsequence([1, 101, 10, 4, 100, 1000], 4, 5))",
      -0.55810546875
    ],
    [
      "def max_sum_subsequence(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if k >= n:\n        return 0\n\n    dp = [0] * n\n    dp[0] = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = max_ending_here + arr[i]\n        else:\n            dp[i] = arr[i]\n\n        max_ending_here = max(max_ending_here, dp[i])\n\n    max_sum = dp[k]\n    for i in range(k + 1, n):\n        if arr[i] > arr[k]:\n            max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n\ndef main():\n    arr = [5, 4, 7, 10, 1, 8, 8, 1]\n    k = 4\n    ans = max_sum_subsequence(arr, k)\n    print(ans)\n\n\nmain()",
      -0.6962890625
    ],
    [
      "def max_sum_subseq(arr, n, k):\n    dp = [0 for _ in range(n)]\n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        dp[i] = max(arr[i], arr[i] + dp[i - 1])\n\n    max_sum = -1000000\n\n    for i in range(k, n):\n        max_sum = max(max_sum, dp[i] + dp[i - k])\n\n    return max_sum\n\n\narr = [1, 101, 10, 2, 3, 100, 4]\nk = 4\nn = len(arr)\nprint(max_sum_subseq(arr, n, k))",
      -0.85693359375
    ],
    [
      "def max_sum_subsequence(arr, n, k):\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[j] < arr[i] and k > i:\n                arr[i] += arr[j]\n    return max(arr)\n\nif __name__ == \"__main__\":\n    arr = [1, 101, 10, 2, 3, 100, 4]\n    n = len(arr)\n    k = 4\n    print(max_sum_subsequence(arr, n, k))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(array: List[int], i: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n    for j in range(i + 1, k + 1):\n        if array[j] > array[i]:\n            max_sum += array[j] - array[i]\n        else:\n            max_sum += array[i] - array[i]\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80], 3, 5) == 100",
      -0.85693359375
    ],
    [
      "def max_subsequence(arr, k):\n    # code here\n    if k < 0:\n        return -1\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return dp[k]\n\nif __name__ == '__main__':\n    arr = [1, 101, 10, 2, 3, 100, 4]\n    k = 3\n    print(max_subsequence(arr, k))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef max_sub_seq_sum(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            arr[i] += arr[i - 1]\n\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sub_seq_sum([1, 101, 10, 4, 100, 1000], 3) == 111",
      -0.8583984375
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_sum_subseq(arr, i, k):\n    if i == k - 1:\n        return arr[i]\n\n    if i == k:\n        return 0\n\n    return max(arr[i], arr[i] + max_sum_subseq(arr, i + 1, k))\n\n\ndef max_sum_subseq_including(arr, k):\n    if k < 1:\n        return 0\n\n    return max_sum_subseq(arr, 0, k)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_subseq_including([1, 101, 10, 4, 50, 3], 4))",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef max_sub_sum(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    \"\"\"\n    n = len(arr)\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    for i in range(n - 1):\n        dp[i][i + 1] = max(arr[i], arr[i + 1])\n\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    ans = -1 * float(\"inf\")\n    for i in range(n):\n        if k > i:\n            ans = max(ans, dp[i][k] - arr[i])\n\n    return ans\n\n\nif __name__ == \"__main__\":\n    assert max_sub_sum([10, 20, 30, 5, 10, 50], 4) == 80",
      -1.1181640625
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = -float(\"inf\")\n    prefix_sum = 0\n\n    for i in range(k):\n        prefix_sum += arr[i]\n\n    for i in range(k, len(arr)):\n        max_sum = max(max_sum, prefix_sum)\n        prefix_sum = max(prefix_sum + arr[i], 0)\n\n    max_sum = max(max_sum, prefix_sum)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([2, 3, 1, 5, 2, 4, 1, 6, 8, 2], 5) == 18\n    assert max_sum_subsequence([2, 3, 1, 5, 2, 4, 1, 6, 8, 2], 6) == 20",
      -1.181640625
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n\n    :param nums: List[int]\n    :return: int\n    \"\"\"\n    length = len(nums)\n\n    if length == 0:\n        return 0\n\n    dp = [0] * length\n\n    dp[0] = nums[0]\n\n    for i in range(1, length):\n        dp[i] = nums[i]\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + nums[i])\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([5, 4, 10, 1, 8, 2]) == 18\n    assert max_sum_increasing_subsequence([5, 4, 10, 1, 8, 2, 14, 3, 7, 100]) == 107\n    assert max_sum_increasing_subsequence([5, 4, 10, 1, 8, 2, 14, 3, 7, 100, 200]) == 207\n    assert max_sum_increasing_subsequence([5, 4, 10, 1, 8, 2, 14, 3, 7, 100, 200, 300]) == 307\n    assert max_sum_increasing_subsequence([5, 4, 10, 1, 8, 2, 14, 3, 7, 100, 200, 300, 1000]) == 1107\n    assert max_sum_increasing_subsequence([5, 4,",
      -1.2294921875
    ],
    [
      "from typing import List\n\n\ndef max_increasing_subsequence(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    length = len(nums)\n\n    if length < 2:\n        return 0\n\n    dp = [nums[i] for i in range(length)]\n\n    for i in range(1, length):\n        for j in range(i):\n            if nums[j] < nums[i] and dp[i] < dp[j] + nums[i]:\n                dp[i] = dp[j] + nums[i]\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert max_increasing_subsequence([1, 101, 10, 4, 100, 1000], 3) == 104",
      -1.33203125
    ],
    [
      "from typing import List\n\n\ndef find_max_sum(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    prefix_sum: List[int] = [nums[0]]\n\n    for i in range(1, len(nums)):\n        prefix_sum.append(nums[i] + prefix_sum[i - 1])\n\n    max_sum: int = 0\n\n    for i in range(len(prefix_sum)):\n        max_sum = max(max_sum, prefix_sum[i])\n\n        if i < k - 1:\n            continue\n\n        max_sum = max(max_sum, prefix_sum[i] - prefix_sum[i - (k - 1)])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert find_max_sum([-2, 3, 1, 4, -2, 5, -1, 3], 3) == 8",
      -1.4755859375
    ],
    [
      "def max_sum_increasing_subsequence(arr, n, k):\n    max_sum = 0\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n\n    for i in range(n):\n        if i > k:\n            max_sum = max(max_sum, dp[i])\n        else:\n            max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, 101, 10, 4, 100, 1000]\n    n = len(arr)\n    k = 4\n    print(max_sum_increasing_subsequence(arr, n, k))",
      -1.490234375
    ],
    [
      "from typing import List\n\n\ndef max_sum_sub_sequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    \"\"\"\n    n = len(arr)\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n + 1):\n            if i == j - 1:\n                dp[i][j] = arr[i]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                if arr[i] > arr[j - 1]:\n                    dp[i][j] = max(dp[i][j], arr[i] + dp[i + 1][j])\n\n    return dp[0][k]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_sub_sequence([10, 20, 30, 5, 10, 50], 4) == 80",
      -1.6171875
    ],
    [
      "def max_sum_subarray(arr, k):\n    n = len(arr)\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n\n    print(dp)\n    return max(dp)\n\n\ndef main():\n    arr = [1, 101, 10, 2, 3, 100, 4]\n    k = 4\n    ans = max_sum_subarray(arr, k)\n    print(ans)\n\n\nmain()",
      -1.73828125
    ],
    [
      "def max_sum_subsequence(arr, k):\n    n = len(arr)\n    dp = [0] * n\n\n    # Initialize\n    dp[0] = arr[0]\n\n    # Fill table in bottom-up manner\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], dp[i - 1] + arr[i])\n\n    # Find the maximum sum till ith index\n    max_till_i = max(dp)\n\n    # Find the maximum sum including kth element\n    for i in range(k, n):\n        if arr[i] > arr[k - 1]:\n            max_till_i = max(max_till_i, dp[i - 1] + arr[i])\n\n    return max_till_i\n\n\ndef main():\n    arr = [1, 101, 10, 2, 3, 100, 4]\n    k = 4\n    ans = max_sum_subsequence(arr, k)\n    print(ans)\n\n\nmain()",
      -1.7451171875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    prefix_sum = [arr[0]]\n\n    for i in range(1, len(arr)):\n        prefix_sum.append(prefix_sum[i - 1] + arr[i])\n\n    ans = float(\"-inf\")\n    for i in range(k, len(arr)):\n        ans = max(ans, prefix_sum[i] - prefix_sum[i - k])\n\n    return ans\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([10, 20, 30, 5, 10, 50], 2) == 80\n    assert max_sum_subsequence([3, 2, 6, 4, 9, 56], 2) == 64",
      -1.8330078125
    ],
    [
      "from typing import List\n\n\ndef max_increasing_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[j] > arr[i]:\n                dp[i][j] = dp[i][j - 1] + arr[j]\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    max_sum = -1\n\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 < k:\n                max_sum = max(max_sum, dp[i][j])\n            elif j - i + 1 == k:\n                max_sum = max(max_sum, dp[i][j])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_increasing_subsequence([3, 4, 5, 10, 11, 12], 3) == 42",
      -1.955078125
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if k < 0:\n        raise ValueError(\"k cannot be negative\")\n\n    if not array or len(array) < k:\n        return 0\n\n    n = len(array)\n    dp = [[0] * n for _ in range(k)]\n\n    for i in range(k):\n        dp[i][i] = array[i]\n\n    for i in range(k, n):\n        for j in range(i):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j] + array[i])\n\n    return max(dp[n - 1])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([1, 101, 10, 2, 3, 100, 4], 4) == 111\n    assert max_sum_increasing_subsequence([1, 2, 3, 4, 10, 2, 3], 3) == 15\n    assert max_sum_increasing_subsequence([1, 2, 3, 4, 10, 2, 3], 5) == 15",
      -2.078125
    ],
    [
      "from typing import List\n\n\ndef max_subsequence(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    length = len(nums)\n\n    if length == 1:\n        return nums[0]\n\n    dp = [0 for _ in range(length)]\n    dp[0] = nums[0]\n    dp[1] = max(nums[0], nums[1])\n\n    for i in range(2, length):\n        dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n\n    max_sum = 0\n    for i in range(k, length):\n        max_sum = max(max_sum, dp[i] + nums[k])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence([10, 20, 30, 5, 10, 50], 4) == 80\n    assert max_subsequence([10, 20, 30, 5, 10, 50], 5) == 100",
      -2.21875
    ],
    [
      "def max_sum_increasing_subsequence(arr, k):\n    n = len(arr)\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n\n    return dp[k]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 101, 10, 2, 3, 100, 4]\n    k = 4\n    assert max_sum_increasing_subsequence(arr, k) == 103",
      -2.3828125
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(nums)\n\n    dp = [nums[i] for i in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], dp[j] + nums[i])\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_increasing_subsequence([1, 101, 10, 4, 100, 1000], 3))",
      -2.541015625
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            arr[i] += arr[i - 1]\n\n    max_sum = arr[k - 1]\n\n    for i in range(k):\n        max_sum = max(max_sum, arr[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([1, 101, 10, 2, 3, 100, 4], 4) == 113\n    assert max_sum_subsequence([4, 8, 9, 5, 3], 3) == 16\n    assert max_sum_subsequence([5, 4, 3, 2, 1], 3) == 9",
      -2.552734375
    ],
    [
      "from typing import List\n\n\ndef max_increasing_subsequence(arr: List, n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [arr[i] for i in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 101, 10, 2, 3, 100, 4]\n    k = 3\n    n = len(arr)\n    print(max_increasing_subsequence(arr, n, k))",
      -2.55859375
    ],
    [
      "from typing import List\n\n\ndef max_sum_inc_subseq(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(array)\n\n    # dp[i] will store the maximum sum of increasing subsequence till ith index\n    dp = [0] * n\n\n    # dp[0] is the maximum sum of increasing subsequence till 0th index\n    dp[0] = array[0]\n\n    # dp[i] = max(dp[i - 1] + array[i], array[i])\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + array[i], array[i])\n\n    # maximum sum of increasing subsequence till last index\n    max_sum = dp[n - 1]\n\n    # maximum sum of increasing subsequence till ith index including a given kth element\n    for i in range(k):\n        max_sum = max(max_sum, dp[i] + array[k])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_inc_subseq([1, 2, 3, 10, 4, 5, 7], 3) == 17",
      -2.57421875
    ],
    [
      "from typing import List\n\n\ndef max_sum_sub_seq(array: List[int], i: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    sum_array = [0] * (len(array) + 1)\n    sum_array[0] = 0\n\n    for index, num in enumerate(array):\n        if index == 0:\n            sum_array[index + 1] = num\n            continue\n        if num > array[index - 1]:\n            sum_array[index + 1] = sum_array[index] + num\n        else:\n            sum_array[index + 1] = max(sum_array[index], num)\n\n    return sum_array[k] - sum_array[i]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_sub_seq([1, 101, 10, 2, 3, 100, 4], 3, 5) == 217",
      -2.58984375
    ],
    [
      "from typing import List\n\n\ndef max_sum_subseq_from_to(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    length = len(nums)\n\n    dp = [0] * length\n    dp[0] = nums[0]\n\n    for i in range(1, length):\n        dp[i] = max(dp[i - 1], 0) + nums[i]\n\n    maximum = max(dp)\n\n    for i in range(k - 1, length - 1):\n        maximum = max(\n            maximum,\n            dp[i] + nums[k],\n        )\n\n    return maximum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subseq_from_to([1, 101, 10, 4, 100, 1000], 4) == 104\n    assert max_sum_subseq_from_to([1, 101, 10, 4, 100, 1000], 5) == 104\n    assert max_sum_subseq_from_to([1, 101, 10, 4, 100, 1000], 6) == 110",
      -2.623046875
    ],
    [
      "def max_sum_subarray(a):\n    n = len(a)\n    max_sum = a[0]\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        dp[i] = max(a[i], dp[i-1] + a[i])\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n\ndef max_sum_subarray_dp(a):\n    n = len(a)\n    max_sum = a[0]\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        dp[i] = max(a[i], dp[i-1] + a[i])\n        max_sum = max(max_sum, dp[i])\n\n    for i in range(1, n):\n        dp[i] = max(dp[i], dp[i-1])\n\n    return max_sum\n\n\ndef max_sum_subarray_dp2(a):\n    n = len(a)\n    max_sum = a[0]\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        dp[i] = max(a[i], dp[i-1] + a[i])\n        max_sum = max(max_sum, dp[i])\n\n    for i in range(1, n):\n        dp[i] = max(dp[i], dp[i-1])\n\n    return max_sum\n\n\ndef main():\n    a = [5, 4, 7, 10, 1, 3]\n    a = [3, 4, 5, 10, 1, 3, 2, 1]\n    a = [3, 4, 5, 10, 1, 3, 2, 1, 7, 8, 9]",
      -2.693359375
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_sum_subseq(arr, i, k):\n    if i == k:\n        return arr[i]\n\n    if i > k:\n        return float(\"-inf\")\n\n    if i == k - 1:\n        return arr[i]\n\n    return max(arr[i], arr[i] + max_sum_subseq(arr, i + 1, k))\n\n\ndef max_sum_subseq_2(arr, k):\n    n = len(arr)\n    if k >= n:\n        return float(\"-inf\")\n\n    max_sum = -1\n    for i in range(k):\n        max_sum = max(max_sum, max_sum_subseq(arr, i, k))\n\n    return max_sum\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    k = 3\n    print(max_sum_subseq_2(arr, k))\n\n\nmain()",
      -2.794921875
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    size = len(arr)\n    if size == 0 or k < 0 or k > size:\n        return -1\n\n    max_sum = arr[0]\n    max_sum_prev = arr[0]\n\n    for i in range(1, size):\n        max_sum_prev = max(max_sum_prev, arr[i - 1])\n        max_sum = max(max_sum, max_sum_prev + arr[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([1, 101, 10, 2, 3, 100, 4], 4) == 207",
      -2.91015625
    ],
    [
      "from typing import List\n\n\ndef max_subsequence(arr: List, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param arr: input array\n    :param k: kth element to be included in the subsequence\n    :return: maximum sum of increasing subsequence\n    \"\"\"\n\n    # dp[i] is maximum sum of increasing subsequence till ith index\n    # dp[i] includes arr[i] and arr[i - 1]\n    dp = [0] * len(arr)\n\n    # initialise dp[0] as arr[0]\n    dp[0] = arr[0]\n\n    # initialise dp[1] as arr[0] + arr[1]\n    dp[1] = arr[0] + arr[1]\n\n    # loop through the array\n    for i in range(2, len(arr)):\n        # if arr[i] is greater than arr[i - 1], then arr[i] can be included in the subsequence\n        if arr[i] > arr[i - 1]:\n            # dp[i] will be max of arr[i] + dp[i - 2] and arr[i] + dp[i - 1]\n            dp[i] = max(arr[i] + dp[i - 2], arr[i] + dp[i - 1])\n        else:\n            # dp[i] will be dp[i - 1]\n            dp[i] = dp[i - 1]\n\n    # maximum sum will be dp[k - 1]\n    return dp[k - 1]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 10, 4, 7, 8, 9, 5, 6]\n    k = 10\n\n    print(max_subsequence(arr, k))",
      -3.015625
    ],
    [
      "from typing import List\n\n\ndef max_sum_subseq(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    \"\"\"\n    length = len(nums)\n\n    # Handle edge case\n    if length == 0:\n        return 0\n\n    # Initialize the dp array\n    dp = [[0 for _ in range(length)] for _ in range(length)]\n\n    # Loop through each element in array\n    for i in range(length):\n        # Loop from i to k\n        for j in range(i, k + 1):\n            # Base case\n            if i == j:\n                dp[i][j] = nums[i]\n            # Recursive case\n            else:\n                dp[i][j] = max(nums[i], nums[i] + dp[i + 1][j])\n\n    return dp[0][k]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subseq([10, 70, 20, 30, 50, 11, 30], 5) == 160",
      -3.021484375
    ],
    [
      "from bisect import bisect_left\nfrom typing import List\n\n\ndef max_sum_inc_subsequence(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n    if k < 1:\n        return 0\n\n    prefix_sums = [0]\n    for value in array:\n        prefix_sums.append(prefix_sums[-1] + value)\n\n    sorted_prefix_sums = sorted(prefix_sums)\n\n    max_sum = 0\n\n    for i, value in enumerate(array):\n        index = bisect_left(sorted_prefix_sums, prefix_sums[i + 1] - value)\n\n        if index < len(array) and array[index] == value:\n            max_sum = max(max_sum, sorted_prefix_sums[index] - prefix_sums[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_inc_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80], 5) == 137\n    assert max_sum_inc_subsequence([4, 8, 15, 16, 23, 42], 3) == 57",
      -3.126953125
    ],
    [
      "from typing import List\n\n\ndef max_increasing_subsequence(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    size = len(numbers)\n    dp = [0 for _ in range(size)]\n\n    dp[0] = numbers[0]\n\n    for i in range(1, size):\n        dp[i] = max(dp[i - 1], numbers[i])\n\n    max_sum = dp[0]\n\n    for i in range(1, size):\n        for j in range(i):\n            if numbers[j] <= numbers[i]:\n                dp[i] = max(dp[i], dp[j] + numbers[i])\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_increasing_subsequence([1, 101, 10, 4, 100, 1000]) == 104",
      -3.1484375
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n\n    for i in range(1, n):\n        dp[i] = nums[i]\n\n        for j in range(i):\n            if nums[j] < nums[i] and dp[i] < dp[j] + nums[i]:\n                dp[i] = dp[j] + nums[i]\n\n    res = max(dp)\n\n    for i in range(n - 1, -1, -1):\n        if i - k >= 0 and nums[i] > nums[i - k]:\n            res = max(res, dp[i - 1] + nums[i])\n\n    return res\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([1, 101, 10, 4, 100, 1000], 2) == 104",
      -3.34765625
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n * k)\n    \"\"\"\n    if not nums:\n        return 0\n\n    n = len(nums)\n    if n < k:\n        raise ValueError(\"k must be less than the length of the array\")\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if nums[i - 1] < nums[j - 1]:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] + nums[j - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([1, 101, 10, 4, 100, 1000], 3) == 104",
      -3.455078125
    ],
    [
      "from typing import List\n\n\ndef max_sum_sub_seq(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_sum = array[0]\n\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            max_sum = max(max_sum, array[i] + array[i - 1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_sub_seq([3, 4, 5, 10, 2, 1, 3], 4) == 14",
      -3.486328125
    ],
    [
      "from typing import List\n\n\ndef max_sum_inc_subsequence(arr: List[int], n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    prefix_sum: List[int] = [arr[0]]\n\n    for i in range(1, n):\n        prefix_sum.append(prefix_sum[-1] + arr[i])\n\n    max_sum: int = -float(\"inf\")\n\n    for i in range(n):\n        if k < i:\n            break\n\n        if arr[k] < arr[i]:\n            max_sum = max(max_sum, prefix_sum[k] - prefix_sum[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_inc_subsequence([1, 101, 10, 4, 10, 8, 100], 7, 3) == 109\n    assert max_sum_inc_subsequence([1, 101, 10, 4, 10, 8, 100], 7, 4) == 117",
      -3.564453125
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_sum(arr, i, k):\n    if i == k:\n        return arr[i]\n    elif i < k:\n        return max(arr[i], max_sum(arr, i + 1, k) + arr[i])\n    else:\n        return -float(\"inf\")\n\n\ndef max_sum_increasing_subsequence(arr, k):\n    return max_sum(arr, 0, k)\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([1, 101, 10, 2, 3, 100, 4], 4) == 103\n    assert max_sum_increasing_subsequence([4, 8, 9, 5, 7, 10, 11, 13, 3], 5) == 32",
      -3.568359375
    ],
    [
      "def max_sum_increasing_subsequence(arr, k):\n    if k == 0:\n        return -1\n\n    if k == 1:\n        return max(arr)\n\n    n = len(arr)\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_increasing_subsequence([4, 10, 3, 5, 1], 2))",
      -3.6640625
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    n = len(array)\n\n    if n == 0:\n        return 0\n\n    max_sum_so_far = array[0]\n    max_sum_ending_at_i = array[0]\n\n    for i in range(1, n):\n        max_sum_ending_at_i = max(array[i], array[i] + max_sum_ending_at_i)\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_at_i)\n\n    if k < n:\n        max_sum_ending_at_k = array[k]\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_at_k)\n\n    return max_sum_so_far\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([2, 1, 5, 1, 3, 2], 4) == 10",
      -3.802734375
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    n = len(arr)\n\n    if n == 0:\n        return 0\n\n    dp = [0] * n\n\n    for i in range(n):\n        if i == 0:\n            dp[i] = arr[i]\n        else:\n            dp[i] = max(dp[i - 1], arr[i] + (dp[k - 1] if k > 0 else 0))\n\n    return dp[-1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([10, 20, 30, 5, 10, 50], 4) == 80",
      -3.869140625
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    length = len(array)\n    max_sum = 0\n\n    sums = [0] * length\n    sums[0] = array[0]\n\n    for i in range(1, length):\n        sums[i] = max(sums[i - 1] + array[i], array[i])\n\n    for i in range(k, length):\n        max_sum = max(sums[i - k] + array[i], max_sum)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([10, 20, 30, 5, 10, 50], 2) == 80\n    assert max_sum_increasing_subsequence([4, 8, 7, 5, 9, 15, 12, 10, 11, 13], 2) == 49\n    assert max_sum_increasing_subsequence([1, 2, 3, 4, 5, 10, 6, 7, 8, 9], 3) == 31",
      -4.171875
    ],
    [
      "from bisect import bisect_left\n\n\ndef max_sum_sub_sequence(arr, k):\n    result = [0] * len(arr)\n    result[0] = arr[0]\n    for i in range(1, len(arr)):\n        result[i] = max(result[i - 1], result[i - 1] + arr[i])\n\n    sorted_result = sorted(result)\n    index = bisect_left(sorted_result, k)\n    return sorted_result[index]\n\n\ndef main():\n    arr = [1, 101, 10, 2, 3, 100, 4]\n    k = 110\n    print(max_sum_sub_sequence(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
      -4.19921875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], k: int) -> int:\n    n = len(arr)\n\n    if k >= n:\n        return -1\n\n    max_sum = arr[k]\n    curr_sum = arr[k]\n\n    for i in range(k - 1, -1, -1):\n        if arr[i] < arr[i + 1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum = arr[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([4, 10, 3, 5, 1], 2) == 14\n    assert max_sum_subsequence([4, 10, 3, 5, 1], 3) == 15\n    assert max_sum_subsequence([4, 10, 3, 5, 1], 4) == 15\n    assert max_sum_subsequence([4, 10, 3, 5, 1], 5) == -1",
      -4.2109375
    ],
    [
      "from typing import List\n\n\ndef max_sum_subseq(arr: List[int], i: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n\n    max_sum = -float(\"inf\")\n\n    for j in range(i, k + 1):\n        curr_sum = 0\n        for elem in arr[i : j + 1]:\n            curr_sum += elem\n        max_sum = max(curr_sum, max_sum)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, 101, 10, 4, 1, 3, 2, 2, 2, 2, 3, 1, 1, 100, 100]\n    assert max_sum_subseq(arr, 0, 10) == 214\n    assert max_sum_subseq(arr, 0, 11) == 220\n    assert max_sum_subseq(arr, 1, 12) == 220",
      -4.21875
    ],
    [
      "from functools import lru_cache\n\n\ndef max_sub_seq_sum(array, k):\n    @lru_cache(maxsize=None)\n    def dp(i, j):\n        if i == j:\n            return 0\n        elif j == i + 1:\n            return array[i]\n        else:\n            return max(\n                array[i] + dp(i + 1, j),\n                dp(i + 1, j)\n            )\n    return dp(0, k)\n\n\ndef main():\n    array = [2, 1, 5, 1, 3, 2]\n    k = 4\n    print(f\"Maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i is {max_sub_seq_sum(array, k)}\")\n\n\nif __name__ == '__main__':\n    main()",
      -4.2890625
    ],
    [
      "from typing import List\n\n\ndef max_sum_inc_subseq(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(arr)\n\n    dp = [arr[0]]\n\n    for i in range(1, n):\n        dp.append(max(dp[i - 1], arr[i] + dp[i - 1]))\n\n    max_sum = dp[-1]\n\n    for i in range(k - 1, n):\n        for j in range(i - 1, -1, -1):\n            if arr[j] < arr[i]:\n                max_sum = max(max_sum, dp[j] + arr[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_inc_subseq([10, 20, 30, 5, 10, 50], 4) == 80",
      -4.296875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [0] * len(array)\n    dp[0] = array[0]\n\n    for i in range(1, len(array)):\n        dp[i] = max(array[i], array[i] + dp[i - 1])\n\n    max_sum = dp[k - 1]\n\n    for i in range(k, len(array)):\n        max_sum = max(max_sum, array[i] + dp[i - k])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([1, 101, 10, 2, 3, 100, 8, 9], 4) == 199",
      -4.4375
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not array or k < 1 or k > len(array):\n        raise ValueError(\"Invalid input\")\n\n    max_sum = array[0]\n    for i in range(1, len(array)):\n        max_sum = max(max_sum, max_sum + array[i])\n\n    if k == 1:\n        return max_sum\n\n    # for k > 1,\n    # the max_sum_increasing_subsequence(array[0:k-1]) is not required\n    # as it is already calculated in previous iteration\n\n    max_sum_from_index_0_to_k = max_sum\n    max_sum_from_index_0_to_k_minus_1 = array[0]\n\n    for i in range(1, k):\n        max_sum_from_index_0_to_k = max(\n            max_sum_from_index_0_to_k, max_sum_from_index_0_to_k_minus_1 + array[i]\n        )\n        max_sum_from_index_0_to_k_minus_1 = max(\n            max_sum_from_index_0_to_k_minus_1, array[i]\n        )\n\n    return max_sum_from_index_0_to_k\n\n\nif __name__ == \"__main__\":\n    print(max_sum_increasing_subsequence([1, 101, 10, 2, 3, 100, 4], 4))",
      -4.5546875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], k: int) -> int:\n    n = len(arr)\n\n    # Edge case\n    if k <= 0 or k > n or n == 0:\n        return 0\n\n    # dp[i] contains the maximum sum of increasing subsequence which ends with arr[i]\n    dp = [arr[0]] * n\n\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], arr[i])\n\n    # To store the maximum sum of increasing subsequence\n    # ending with arr[k]\n    max_sum = dp[k - 1]\n\n    # Find the maximum sum of increasing subsequence\n    # from 0th index till i-th index including the kth index\n    for i in range(0, k):\n        # If arr[i] < arr[k], it means arr[i] is smaller than arr[k]\n        # and we can add arr[k] to dp[i] to make a new increasing\n        # subsequence\n        if arr[i] < arr[k]:\n            max_sum = max(max_sum, arr[i] + dp[k - 1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([1, 101, 10, 2, 3, 100, 4], 4) == 113",
      -4.76953125
    ],
    [
      "from functools import lru_cache\n\n\ndef max_sum_subsequence(arr, k):\n    n = len(arr)\n    # Initialize the dp array\n    dp = [0] * n\n    # Initialize the ans\n    ans = -1 * float('inf')\n\n    for i in range(n):\n        # If i is 0, then the maximum sum is the number itself\n        if i == 0:\n            dp[i] = arr[i]\n        # Else if the kth element is not included in the sequence\n        elif k <= i:\n            dp[i] = max(arr[i] + dp[i - 1], arr[i])\n        # If the kth element is included in the sequence\n        else:\n            dp[i] = max(arr[i] + dp[i - 1], arr[i], arr[k])\n        # Update the ans\n        ans = max(ans, dp[i])\n\n    return ans\n\n\ndef max_sum_subsequence_k_included(arr, k):\n    n = len(arr)\n    # Initialize the dp array\n    dp = [0] * n\n    # Initialize the ans\n    ans = -1 * float('inf')\n\n    for i in range(n):\n        # If i is 0, then the maximum sum is the number itself\n        if i == 0:\n            dp[i] = arr[i]\n        # Else if the kth element is not included in the sequence\n        elif k <= i:\n            dp[i] = max(arr[i] + dp[i - 1], arr[i])\n        # If the kth element is included in the sequence\n        else:\n            dp[i] = max(arr[i] + dp[i - 1], arr[i], arr[k])\n        # Update the ans\n        ans = max(ans, dp[i])\n\n    return ans\n\n\n@lru_cache\ndef max_sum_subsequence_k_included_lcach(arr, k):\n    n = len(arr)\n    # Initialize the dp array",
      -4.77734375
    ],
    [
      "from typing import List\n\n\ndef max_subsequence(nums: List[int], k: int) -> int:\n    n = len(nums)\n\n    # base case\n    if k >= n:\n        return 0\n\n    # dp[i] = max sum of increasing subsequence till ith index\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = nums[i]\n\n        for j in range(i - 1, -1, -1):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], dp[j] + nums[i])\n\n    # to store the max value till ith index including the kth element\n    max_val = -float(\"inf\")\n\n    for i in range(k, n):\n        max_val = max(max_val, dp[i])\n\n    return max_val\n\n\nif __name__ == \"__main__\":\n    nums = [1, 101, 10, 2, 3, 100, 4]\n    k = 3\n    print(max_subsequence(nums, k))",
      -4.8203125
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(nums)\n\n    # dp[i] is the maximum sum of increasing subsequence of prefix till i-th index\n    dp = [0] * n\n\n    # dp[i] is the maximum sum of increasing subsequence of prefix till i-th index\n    # including k-th element\n    dp_inc_k = [0] * n\n\n    # maximum sum of increasing subsequence till prefix\n    max_sum = 0\n\n    # maximum sum of increasing subsequence till prefix including k-th element\n    max_sum_inc_k = 0\n\n    for i in range(n - 1, -1, -1):\n        if i + k < n:\n            max_sum_inc_k = max(nums[i], nums[i + k], max_sum_inc_k + nums[i])\n            dp_inc_k[i] = max_sum_inc_k\n\n        max_sum = max(max_sum, dp_inc_k[i])\n        dp[i] = max_sum\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([10, 20, 30, 5, 10, 50], 3) == 70",
      -4.95703125
    ],
    [
      "from typing import List\n\n\ndef max_sub_seq_inc(A: List[int], i: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n\n    n = len(A)\n\n    if i < 0 or i >= n or k < 0 or k >= n:\n        return -1\n\n    max_sum = float(\"-inf\")\n\n    for j in range(i + 1, n):\n        if j < k:\n            continue\n        if A[j] < A[i]:\n            continue\n        max_sum = max(max_sum, max_sub_seq_inc(A, i, j) + A[j] - A[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    A = [1, 101, 10, 2, 3, 100, 4]\n    k = 5\n    print(max_sub_seq_inc(A, 0, k))",
      -4.98046875
    ],
    [
      "from functools import lru_cache\n\ndef max_sum_subsequence(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    @lru_cache(maxsize=None)\n    def helper(i, k):\n        if i == n or k == n:\n            return 0\n\n        if k == i:\n            return arr[i]\n\n        if k > i:\n            return max(arr[i] + helper(i+1, k+1), helper(i+1, k))\n\n        return max(arr[i] + helper(i+1, k), helper(i+1, k+1))\n\n    return helper(0, k)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_subsequence([1, 101, 2, 3, 100, 4, 5], 4))\n    print(max_sum_subsequence([4, 8, 9, 5, 7, 10, 2, 3, 1, 1], 5))\n    print(max_sum_subsequence([1, 2, 3, 4, 5], 3))\n    print(max_sum_subsequence([1, 2, 3, 4, 5], 5))\n    print(max_sum_subsequence([1, 2, 3, 4, 5], 6))\n    print(max_sum_subsequence([1, 2, 3, 4, 5], 0))\n    print(max_sum_subsequence([1, 2, 3, 4, 5], 1))",
      -5.07421875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(nums)\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = nums[i]\n        for j in range(i - 1, -1, -1):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], dp[j] + nums[i])\n\n    max_sum = -float(\"inf\")\n\n    for i in range(k, n):\n        max_sum = max(max_sum, dp[i] + dp[i - k])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([10, 20, 30, 5, 10, 50], 3) == 80\n    assert max_sum_subsequence([1, 2, 3, 4, 5], 2) == 13\n    assert max_sum_subsequence([1, 2, 3, 4, 5], 3) == 13\n    assert max_sum_subsequence([1, 2, 3, 4, 5], 4) == 14\n    assert max_sum_subsequence([1, 2, 3, 4, 5], 5) == 15\n    assert max_sum_subsequence([1, 2, 3, 4, 5], 6) == 15\n    assert max_sum_subsequence([1, 2, 3, 4, 5, 6, 7, 8], 3) == 30\n    assert max_sum_subsequence([1, 2, 3, 4, 5, 6, 7, 8], 4) == 30\n    assert max_sum_subsequence([1,",
      -5.15234375
    ],
    [
      "def max_sum_subsequence(array, k):\n    n = len(array)\n    if n == 0 or k > n:\n        return -1\n\n    dp = [0] * n\n    dp[0] = array[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], dp[i - 1] + array[i])\n\n    max_sum = dp[k - 1]\n    max_sum_up_to_k = -1\n\n    for i in range(k - 1, -1, -1):\n        if array[i] > array[k - 1]:\n            max_sum_up_to_k = max(max_sum_up_to_k, array[i] + dp[k - 1])\n\n    return max(max_sum, max_sum_up_to_k)\n\n\ndef main():\n    array = [1, 101, 10, 2, 3, 100, 4]\n    k = 4\n    print(max_sum_subsequence(array, k))\n\n\nmain()",
      -5.29296875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    \"\"\"\n    if k <= 0:\n        return -1\n\n    prefix_sum = [arr[0]]\n\n    for i in range(1, n):\n        prefix_sum.append(prefix_sum[-1] + arr[i])\n\n    max_sum = 0\n\n    for i in range(k):\n        max_sum = max(max_sum, prefix_sum[i])\n\n    for i in range(k, n):\n        max_sum = max(max_sum, prefix_sum[i] - prefix_sum[i - k])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([1, 101, 2, 3, 100, 4, 5], 7, 3) == 106",
      -5.3203125
    ],
    [
      "from typing import List\n\n\ndef max_subsequence(arr: List[int], n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    \"\"\"\n    max_sum = 0\n\n    for i in range(n):\n        max_sum_till_i = 0\n\n        for j in range(i, n):\n            if arr[j] >= arr[k - 1]:\n                max_sum_till_i += arr[j]\n            else:\n                break\n\n        if max_sum_till_i > max_sum:\n            max_sum = max_sum_till_i\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence([1, 101, 10, 4, 100, 1000], 6, 4) == 142\n    assert max_subsequence([1, 101, 10, 4, 100, 1000], 6, 5) == 142\n    assert max_subsequence([1, 101, 10, 4, 100, 1000], 6, 1) == 101\n    assert max_subsequence([1, 101, 10, 4, 100, 1000], 6, 2) == 104\n    assert max_subsequence([1, 101, 10, 4, 100, 1000], 6, 3) == 142\n    assert max_subsequence([1, 101, 10, 4, 100, 1000], 6, 6) == 1000",
      -5.37109375
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence_increasing(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    size = len(nums)\n    if size < 2:\n        return 0\n\n    dp = [0 for _ in range(size)]\n    dp[0] = nums[0]\n    dp[1] = max(nums[0], nums[1])\n\n    for i in range(2, size):\n        dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n\n    max_sum = dp[-1]\n\n    for i in range(k - 1):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence_increasing([4, 10, 3, 5, 1], 2) == 16\n    assert max_sum_subsequence_increasing([4, 10, 3, 5, 1], 1) == 14\n    assert max_sum_subsequence_increasing([4, 10, 3, 5, 1], 3) == 16",
      -5.38671875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param array: input array\n    :param k: kth element after which the sum will be calculated\n    :return: maximum sum\n    \"\"\"\n\n    n = len(array)\n\n    # dp[i] = max sum including ith element\n    dp: List[int] = [0 for _ in range(n)]\n\n    # sum including ith element\n    for i in range(n):\n        dp[i] = array[i]\n\n    # maximum sum including ith element\n    max_sum: int = max(dp)\n\n    # for each element, check if it can be included in increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if array[j] < array[i]:\n                dp[i] = max(dp[i], dp[j] + array[i])\n\n        max_sum = max(max_sum, dp[i])\n\n    # if kth element is given, check if it can be included in increasing subsequence\n    if k < n:\n        for i in range(n - 1, k - 2, -1):\n            if array[i] < array[k]:\n                max_sum = max(max_sum, dp[k] + array[i])\n                break\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([1, 101, 10, 4, 100, 1000], 3) == 104\n    assert max_sum_subsequence([4, 8, 9, 5, 7, 10, 2, 1, 3], 3) == 25\n    assert max_sum_subsequence([1, 2, 3, 10, 4, 7], 3) == 14",
      -5.44921875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence_with_k(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [0] * len(arr)\n\n    dp[0] = arr[0]\n\n    for i in range(1, len(arr)):\n        dp[i] = max(dp[i - 1], 0) + arr[i]\n\n    max_sum = dp[-1]\n\n    for i in range(len(arr) - k):\n        max_sum = max(max_sum, dp[i] + dp[i + k])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence_with_k([1, 101, 10, 4, 100, 1000], 3) == 104\n    assert max_sum_subsequence_with_k([1, 2, 3, 10, 4, 100, 1000], 3) == 103\n    assert max_sum_subsequence_with_k([1, 2, 3, 10, 4, 100, 1000], 1) == 1000",
      -5.46875
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def max_sum_increasing_subsequence_recursive(\n        array: List[int], k: int, index: int, max_sum: int\n    ) -> int:\n        if index == k:\n            return max_sum\n\n        for i in range(index + 1, len(array)):\n            if array[i] > array[index]:\n                max_sum = max(\n                    max_sum,\n                    max_sum_increasing_subsequence_recursive(\n                        array, k, i, max_sum + array[i]\n                    ),\n                )\n\n        return max_sum\n\n    return max_sum_increasing_subsequence_recursive(array, k, 0, 0)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_increasing_subsequence([1, 101, 10, 4, 12, 11, 13, 8], 4))",
      -5.53515625
    ],
    [
      "def max_sum_inc_subseq(arr, k):\n    dp = [0] * (len(arr) + 1)\n    for i in range(1, len(arr) + 1):\n        dp[i] = max(arr[i - 1] + dp[i - 1], dp[i - 1])\n\n    max_val = max(dp)\n    for i in range(k - 1, len(arr)):\n        max_val = max(max_val, arr[i] + dp[i - k + 1])\n\n    return max_val\n\n\ndef main():\n    arr = [10, 40, 30, 50, 20]\n    k = 2\n    print(f\"Max sum of increasing subsequence is {max_sum_inc_subseq(arr, k)}\")\n\n\nmain()",
      -5.55859375
    ],
    [
      "def max_sum_subsequence(arr, n, k):\n    if n == 0:\n        return 0\n    if k < n:\n        arr[k] = -1 * (10**9)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    max_sum = -1 * (10**9)\n    for i in range(k, n):\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n\n\ndef main():\n    arr = [1, 101, 10, 2, 3, 100, 4]\n    n = len(arr)\n    k = 5\n    print(max_sum_subsequence(arr, n, k))\n\n\nmain()",
      -5.671875
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if k < 0 or k >= len(arr):\n        raise ValueError(\"k must be between 0 and len(arr) - 1\")\n\n    max_sum = 0\n    length = len(arr)\n\n    for i in range(length):\n        for j in range(i, length):\n            if arr[j] > arr[i]:\n                max_sum = max(max_sum, sum(arr[i : j + 1]))\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([10, 50, 30, 10, 20, 5], 2) == 80\n    assert max_sum_increasing_subsequence([10, 50, 30, 10, 20, 5], 3) == 100\n    assert max_sum_increasing_subsequence([10, 50, 30, 10, 20, 5], 4) == 130\n    assert max_sum_increasing_subsequence([10, 50, 30, 10, 20, 5], 5) == 150\n    assert max_sum_increasing_subsequence([10, 50, 30, 10, 20, 5], 6) == 160",
      -5.6875
    ],
    [
      "def max_sum_subsequence(array, k):\n    n = len(array)\n    max_sum = 0\n    max_sum_till_i = 0\n    max_sum_till_i_include_k = 0\n    for i in range(n):\n        if i == k:\n            max_sum_till_i_include_k = max_sum_till_i\n        if array[i] > max_sum_till_i:\n            max_sum_till_i = array[i]\n        max_sum_till_i += array[i]\n        max_sum = max(max_sum, max_sum_till_i, max_sum_till_i_include_k)\n\n    return max_sum\n\n\ndef main():\n    array = [10, 20, 30, 5, 10, 50]\n    k = 4\n    print(max_sum_subsequence(array, k))\n\n\nmain()",
      -5.875
    ],
    [
      "from typing import List\n\n\ndef max_sub_sum(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n\n    for i in range(len(nums) - 1):\n        if i >= k:\n            break\n        if nums[i] < nums[i + 1]:\n            max_sum += nums[i]\n\n    for i in range(i + 1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            max_sum += nums[i]\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sub_sum([10, 20, 30, 5, 10, 50], 4) == 70\n    assert max_sub_sum([10, 20, 30, 5, 10, 50], 5) == 110\n    assert max_sub_sum([10, 20, 30, 5, 10, 50], 6) == 110",
      -6.03125
    ],
    [
      "def max_sum_increasing_subsequence(arr, i, k):\n    # arr is the given array, i is the index of the element which is after the increasing subsequence, k is the kth element after the increasing subsequence\n    # we'll use a table to store the maximum sum of increasing subsequence from prefix till ith index\n    table = [0 for _ in range(len(arr))]\n    table[0] = arr[0]\n    for i in range(1, len(arr)):\n        table[i] = max(table[i-1], arr[i])\n    # now we'll check for the max sum of increasing subsequence from prefix till ith index including kth element\n    max_sum = 0\n    for i in range(k+1):\n        max_sum = max(max_sum, table[i] + arr[k] - table[i-1])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(max_sum_increasing_subsequence(arr, 2, 3))\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(max_sum_increasing_subsequence(arr, 3, 5))\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(max_sum_increasing_subsequence(arr, 4, 6))",
      -6.3671875
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    length = len(nums)\n\n    dp = [nums[i] for i in range(length)]\n\n    for i in range(1, length):\n        for j in range(0, i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + nums[i])\n\n    max_sum = 0\n\n    for i in range(length):\n        if i >= k:\n            max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([4, 10, 3, 5, 1], 2) == 16\n    assert max_sum_increasing_subsequence([4, 10, 3, 5, 1], 3) == 21",
      -6.4296875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n\n    :param arr: List[int]\n    :param k: int\n    :return: int\n    \"\"\"\n    n = len(arr)\n\n    # dp[i][j] stores the max sum of subsequence ending at arr[i] and having kth element at jth index\n    dp = [[0] * (n + 1) for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i][j - 1], dp[i][j - 1] + arr[j])\n\n    # max_sum stores the max sum of subsequence ending at i-th index and having kth element at kth index\n    max_sum = 0\n\n    for i in range(n):\n        if k > i:\n            max_sum = max(max_sum, dp[i][k - 1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([10, 20, 30, 5, 10, 50], 4) == 80\n    assert max_sum_subsequence([10, 20, 30, 5, 10, 50], 5) == 110",
      -6.73046875
    ],
    [
      "from bisect import bisect_left\n\n\ndef max_increasing_subsequence(arr, k):\n    n = len(arr)\n    max_sum = 0\n\n    # table[i] contains the maximum sum of increasing\n    # subsequence with length i+1\n    table = [0] * (n + 1)\n\n    # Pick all elements one by one and\n    # keep track of current maximum sum\n    for i in range(n):\n        if arr[i] > arr[k - 1]:\n            table[i + 1] = table[i] + arr[i]\n            max_sum = max(max_sum, table[i + 1])\n        else:\n            # Find the smallest element greater than\n            # arr[i] in table[0..i]\n            # (Use binary search for speedup)\n            idx = bisect_left(table[:i + 1], arr[i], lo=0, hi=i)\n\n            # If no greater element is found, then\n            # subsequence ends with arr[i]\n            if idx == i + 1:\n                table[i + 1] = table[i]\n            else:\n                # Else update table[i+1]\n                table[i + 1] = table[idx] + arr[i]\n                max_sum = max(max_sum, table[i + 1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, 101, 10, 2, 3, 100, 4]\n    k = 4\n    print(max_increasing_subsequence(arr, k))",
      -6.828125
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence_kth(array: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    n = len(array)\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = array[i]\n\n    for i in range(n - 1):\n        dp[i][i + 1] = array[i] + array[i + 1]\n\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    max_sum = dp[0][k]\n\n    for i in range(1, n):\n        for j in range(i, n):\n            if j == k:\n                break\n            max_sum = max(max_sum, dp[i][j])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence_kth([1, 101, 10, 2, 3, 100, 4], 3) == 113",
      -7.09375
    ],
    [
      "from typing import List\n\n\ndef max_sum_inc_sub(arr: List, n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n*k)\n    \"\"\"\n\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            if i == j:\n                dp[i][j] = arr[i]\n            else:\n                dp[i][j] = max(arr[i], arr[i] + dp[i + 1][j])\n\n    max_sum = -float(\"inf\")\n\n    for i in range(k, n + 1):\n        max_sum = max(max_sum, dp[0][i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, 101, 2, 3, 100, 4, 5]\n    k = 4\n    print(max_sum_inc_sub(arr, len(arr), k))",
      -7.09375
    ],
    [
      "from typing import List\n\n\ndef max_sum_subarray_from_it_to_k(nums: List[int], i: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n\n    n = len(nums)\n\n    # If k is greater than the length of the array,\n    # return the max sum of the whole array\n    if k >= n:\n        return sum(nums)\n\n    # If i is greater than k, it doesn't make sense\n    if i > k:\n        return -float(\"inf\")\n\n    # If i is greater than n, return 0\n    if i >= n:\n        return 0\n\n    # If k is 0, return 0\n    if k == 0:\n        return 0\n\n    # We need to find the max sum of increasing subsequence till ith index\n    # and also including a given kth element\n    # We will use a dp array to store the max sum of increasing subsequence\n    # ending at each index\n    dp = [0] * n\n\n    # Base case for sum of increasing subsequence till ith index\n    dp[i] = nums[i]\n\n    # We will iterate from ith index to kth index\n    for j in range(i + 1, k + 1):\n        # We will iterate over all the previous elements\n        for i in range(j - 1, -1, -1):\n            # If the current element is greater than the previous element\n            # we will include the current element in the increasing subsequence\n            if nums[j] > nums[i]:\n                # We will find the max sum of increasing subsequence ending at index i\n                # and adding the current element\n                dp[j] = max(dp[j], nums[j] + dp[i])\n\n    return dp[k]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subarray_from_it_to_k([10, 20, 30, 5, 10, 50",
      -7.10546875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subseq_k_th(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not nums:\n        return 0\n\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], nums[i])\n\n    max_sum = dp[k - 1]\n\n    for i in range(k - 2, -1, -1):\n        max_sum = max(max_sum, nums[i] + dp[k - 1 - (k - i - 1)])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subseq_k_th([4, 10, 3, 5, 11, 2], 3) == 23\n    assert max_sum_subseq_k_th([4, 10, 3, 5, 11, 2], 4) == 27\n    assert max_sum_subseq_k_th([1, 10, 3, 5, 11, 2], 3) == 14",
      -7.1328125
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_increasing_subsequence(arr, i, k):\n    if i == 0:\n        return 0\n    if i == k:\n        return arr[i]\n    if arr[i] > arr[k]:\n        return max_increasing_subsequence(arr, i - 1, k)\n\n    return max(max_increasing_subsequence(arr, i - 1, k), arr[i] + max_increasing_subsequence(arr, i - 1, k - 1))\n\n\ndef main():\n    arr = [10, 20, 30, 5, 10, 50]\n    k = 4\n    print(max_increasing_subsequence(arr, len(arr) - 1, k))\n\n\nif __name__ == '__main__':\n    main()",
      -7.1484375
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence_include(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n\n    :param arr: list of numbers\n    :param k: index to check\n    :return: sum of increasing subsequence\n    \"\"\"\n    # handle edge case\n    if k < 0 or k >= len(arr):\n        return -1\n\n    # dp[i] - sum of increasing subsequence from prefix till ith index\n    dp: List[int] = [arr[i] for i in range(len(arr))]\n\n    # dp[i] - sum of increasing subsequence from prefix till ith index including a given kth element which is after i, i.e., k > i\n    dp_incl: List[int] = [arr[i] for i in range(len(arr))]\n\n    # iterate over each index\n    for i in range(1, len(arr)):\n        # iterate from 0 to i-1\n        for j in range(i):\n            # if jth element is smaller than ith element\n            if arr[j] < arr[i]:\n                # update dp[i]\n                dp[i] = max(dp[i], arr[i] + dp[j])\n                # update dp_incl[i]\n                if i < k:\n                    dp_incl[i] = max(dp_incl[i], arr[i] + dp_incl[j])\n                else:\n                    dp_incl[i] = max(dp_incl[i], arr[i] + dp_incl[j], arr[k] + dp_incl[j])\n\n    return max(dp_incl[k], dp[k])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence_include([10, 5, 2, 7, 8, 7], 3) == 17\n    assert max_sum_subsequence_include([1, 2,",
      -7.21484375
    ],
    [
      "def max_sum_subseq(arr, n, k):\n  \"\"\"\n  Time Complexity: O(n*k)\n  Space Complexity: O(k)\n  \"\"\"\n  dp = [0] * (k+1)\n  dp[0] = arr[0]\n  for i in range(1, n):\n    for j in range(1, k+1):\n      if j > i:\n        break\n      dp[j] = max(dp[j], dp[j-1] + arr[i])\n  return dp[-1]\n\n\ndef max_sum_subseq2(arr, n, k):\n  \"\"\"\n  Time Complexity: O(n*k)\n  Space Complexity: O(k)\n  \"\"\"\n  dp = [0] * (k+1)\n  for i in range(1, n):\n    for j in range(k, 0, -1):\n      if j > i:\n        dp[j] = max(dp[j], dp[j-1] + arr[i])\n  return dp[-1]\n\n\ndef max_sum_subseq3(arr, n, k):\n  \"\"\"\n  Time Complexity: O(n*k)\n  Space Complexity: O(k)\n  \"\"\"\n  dp = [0] * (k+1)\n  for i in range(1, n):\n    for j in range(k, 0, -1):\n      if j > i:\n        dp[j] = max(dp[j], dp[j-1] + arr[i])\n  return dp[-1]\n\n\ndef main():\n  arr = [1, 101, 10, 2, 3, 100, 4]\n  k = 4\n  print(max_sum_subseq(arr, len(arr), k))\n  print(max_sum_subseq2(arr, len(arr), k))\n  print(max_sum_subseq3(arr, len(arr), k))\n\n\nmain()\n\n\n\"\"\"\nInput:\n[1, 10",
      -7.4921875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subarray(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def get_max_sum_subarray_up_to(i: int) -> int:\n        nonlocal arr\n        max_sum = arr[i]\n        curr_sum = arr[i]\n        for j in range(i - 1, -1, -1):\n            curr_sum += arr[j]\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = max(curr_sum, 0)\n        return max_sum\n\n    max_sum = 0\n    for i in range(len(arr)):\n        if i >= k:\n            max_sum = max(max_sum, get_max_sum_subarray_up_to(i) + arr[k - 1])\n        else:\n            max_sum = max(max_sum, get_max_sum_subarray_up_to(i))\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subarray([1, 101, 10, 4, 12, 100, 1000], 4) == 114\n    assert max_sum_subarray([4, 8, 12, 16], 2) == 20",
      -7.62109375
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_sum_inc_subsequence(arr, i, k):\n    if i == len(arr) - 1:\n        return arr[i]\n    if i == k - 1:\n        return arr[i]\n    if arr[i] > arr[k - 1]:\n        return arr[i] + max_sum_inc_subsequence(arr, i + 1, k)\n    return max_sum_inc_subsequence(arr, i + 1, k)\n\n\ndef max_sum_inc_subsequence_util(arr, k):\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum, max_sum_inc_subsequence(arr, i, k))\n    return max_sum\n\n\ndef main():\n    arr = [10, 20, 30, 5, 10, 15]\n    k = 4\n    print(max_sum_inc_subsequence_util(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
      -7.7421875
    ],
    [
      "from typing import List\n\n\ndef max_sum_sub_seq(nums: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param nums: list of numbers\n    :param k: position of element\n    :return: maximum sum of increasing subsequence\n    \"\"\"\n    dp = [0 for _ in range(len(nums))]\n\n    for i in range(k, len(nums)):\n        max_sum = float(\"-inf\")\n\n        for j in range(i):\n            if nums[j] < nums[i]:\n                max_sum = max(max_sum, dp[j] + nums[i])\n\n        dp[i] = max_sum\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert max_sum_sub_seq([10, 20, 30, 5, 10, 50], 4) == 65\n    assert max_sum_sub_seq([1, 101, 10, 4, 100, 1000], 2) == 102",
      -8.0625
    ],
    [
      "def increasing_subsequence(nums, k):\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = nums[i]\n\n    for i in range(n-1):\n        dp[i][i+1] = nums[i] + nums[i+1]\n\n    for i in range(2, n):\n        for j in range(i+1, n):\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    result = dp[0][k-1]\n    for i in range(1, n):\n        for j in range(i, n):\n            if nums[i] <= nums[j]:\n                result = max(result, dp[i][j])\n    return result\n\n\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\nk = 4\nprint(increasing_subsequence(nums, k))",
      -9.015625
    ],
    [
      "from typing import List\n\n\ndef max_sum_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def find_max_sum_subsequence(arr: List[int], i: int) -> int:\n        \"\"\"\n        Time Complexity: O(n)\n        Space Complexity: O(n)\n        \"\"\"\n        max_sum = 0\n        max_sum_ending_at_i = 0\n        max_sum_ending_before_i = 0\n        for j in range(i, len(arr)):\n            max_sum_ending_at_i += arr[j]\n            if max_sum_ending_before_i < max_sum_ending_at_i:\n                max_sum_ending_before_i = max_sum_ending_at_i\n            if max_sum < max_sum_ending_before_i:\n                max_sum = max_sum_ending_before_i\n        return max_sum\n\n    max_sum = 0\n    for i in range(len(arr)):\n        if i == k:\n            return max_sum\n        max_sum += find_max_sum_subsequence(arr, i)\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subsequence([1, 101, 10, 2, 3, 100, 4], 4) == 117",
      -9.40625
    ],
    [
      "from typing import List\n\ndef max_sum_subsequence_with_kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_sum_ending_at_ith_index = 0\n    max_sum_ending_at_ith_index_including_kth_element = 0\n    max_sum_ending_at_ith_index_including_kth_element_ending_at_ith_index = 0\n\n    for i in range(len(arr)):\n        max_sum_ending_at_ith_index = max(0, max_sum_ending_at_ith_index + arr[i])\n        max_sum_ending_at_ith_index_including_kth_element = max(0, max_sum_ending_at_ith_index_including_kth_element + arr[i])\n\n        if i < k:\n            max_sum_ending_at_ith_index_including_kth_element_ending_at_ith_index = max(max_sum_ending_at_ith_index_including_kth_element_ending_at_ith_index, max_sum_ending_at_ith_index_including_kth_element)\n\n        else:\n            max_sum_ending_at_ith_index_including_kth_element = max(max_sum_ending_at_ith_index_including_kth_element_ending_at_ith_index, max_sum_ending_at_ith_index_including_kth_element)\n\n    return max(max_sum_ending_at_ith_index_including_kth_element, max_sum_ending_at_ith_index_including_kth_element_ending_at_ith_index)\n\n\n\nif __name__ == \"__main__\":\n    print(max_sum_subsequence_with_kth_element([1, 101, 10, 2, 3, 100, 4], 4))\n    print(max_sum_subsequence_with_kth",
      -9.5390625
    ],
    [
      "from typing import List\n\n\ndef max_sum_inc_subsequence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(arr)\n\n    if k >= n:\n        raise ValueError(\"k should be less than n\")\n\n    dp = [0] * n\n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n\n    return dp[k]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_inc_subsequence([10, 20, 30, 40, 50, 60, 70], 4) == 170\n    assert max_sum_inc_subsequence([1, 101, 10, 100, 1000], 3) == 1111\n    assert max_sum_inc_subsequence([1, 101, 10, 100, 1000], 1) == 1100\n    assert max_sum_inc_subsequence([1, 101, 10, 100, 1000], 2) == 1111\n    assert max_sum_inc_subsequence([1, 101, 10, 100, 1000], 0) == 100",
      -9.6796875
    ],
    [
      "from typing import List\n\n\ndef max_sum_increasing_subsequence(arr: List[int], n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    \"\"\"\n\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            if arr[i - 1] < arr[j - 1]:\n                dp[i] = max(dp[i], dp[j])\n\n        if i < k:\n            dp[i] += prefix_sum[i]\n        else:\n            dp[i] += prefix_sum[k] - prefix_sum[i]\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert max_sum_increasing_subsequence([1, 101, 10, 4, 10, 8, 9], 7, 4) == 224",
      -9.859375
    ],
    [
      "def max_sum_subsequence(arr, k):\n    \"\"\"\n    :param: arr - input array\n    :param: k - index\n    return - maximum sum of subsequence including kth element\n    TODO: complete this function and return the maximum sum of subsequence including kth element\n    Do not use global variables\n    \"\"\"\n    # A: init max_sum to be negative infinity\n    max_sum = float('-inf')\n\n    # B: init a dict with index as key and arr[index] as value\n    # C: loop through the dict and compute max_sum\n    # D: return max_sum\n    pass\n\n\n# ## Unit Test\n\n# In[2]:\n\n\nget_ipython().run_cell_magic('writefile', 'test_max_sum_subsequence.py', \"import unittest\\n\\n\\nclass TestMaxSumSubsequence(unittest.TestCase):\\n\\n    def test_max_sum_subsequence(self, func):\\n        self.assertEqual(func([1, 101, 10, 2, 3, 100, 4], 4), 110)\\n        self.assertEqual(func([4, 8, 9, 5, 7, 10, 6, 3], 3), 27)\\n        self.assertEqual(func([1, 2, 3, 4, 5], 3), 15)\\n        self.assertEqual(func([2, 5, 1, 8, 7, 3], 4), 16)\\n        self.assertEqual(func([1, 2, 3, 4, 5, 10, 6, 7, 8, 9], 6), 30)\\n        print('Success: max_sum_subsequence')\\n\\n\\ndef main():\\n    test = TestMaxSumSubsequence()\\n    test.test_max_sum_subsequence(max_sum_subsequence)\\n\\n\\nif __name__ == '__main__':\\n    main()\")\n\n\n# In[3]:\n\n\nget_",
      -11.875
    ],
    [
      "from typing import List\n\n\ndef max_sum_subarray(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param arr: list of numbers\n    :param k: index of number after which maximum sum is to be calculated\n    :return: maximum sum of subarray\n    \"\"\"\n    length: int = len(arr)\n\n    # edge case\n    if k == length:\n        return 0\n\n    # initialize dp to store maximum sum of subsequence ending at i\n    dp: List[int] = [0] * length\n\n    # initialize max_sum to store maximum sum of subsequence ending at i\n    max_sum: int = 0\n\n    # initialize max_sum_ending_at_i to store maximum sum of subsequence ending at i\n    max_sum_ending_at_i: int = 0\n\n    # iterate over all elements of array\n    for i in range(length):\n        # if first element, set maximum sum to that element\n        if i == 0:\n            max_sum = arr[i]\n\n        # if current element is greater than maximum ending at i\n        if arr[i] > max_sum_ending_at_i + arr[i]:\n            # set maximum sum to current element\n            max_sum = arr[i]\n\n        # else add current element to maximum ending at i\n        else:\n            max_sum_ending_at_i += arr[i]\n\n        # if i is greater than k, i.e., kth element, then add maximum sum to dp[i]\n        if i >= k:\n            dp[i] += max_sum\n\n    # return maximum sum of subsequence ending at last element\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subarray([1, 101, 10, 4, 1, 3, 23, 5, 2], 3) == 101\n    assert max_sum_subarray([1, 2, 3, 4, 5, 1",
      -12.0078125
    ],
    [
      "from functools import lru_cache\n\n\ndef max_sum_inc_subseq(arr, i, k):\n    if i == k - 1:\n        return arr[i]\n\n    # if k is greater than the length of the array, return 0\n    if k > len(arr):\n        return 0\n\n    # if k is less than i, return 0\n    if k < i:\n        return 0\n\n    # if k is equal to i, return the element at kth position\n    if k == i:\n        return arr[k]\n\n    # if k is between i and len(arr), find the maximum sum of increasing subsequence from i to k\n    sum_inc_subseq = max_sum_inc_subseq(arr, i, k - 1) + arr[k]\n    # if k is greater than i, find the maximum sum of increasing subsequence from 0 to i\n    sum_inc_subseq_prev = max_sum_inc_subseq(arr, i - 1, k)\n\n    return max(sum_inc_subseq, sum_inc_subseq_prev)\n\n\n@lru_cache(maxsize=None)\ndef max_sum_inc_subseq_bottom_up(arr, n):\n    \"\"\"\n    Time Complexity: O(n^2)\n    \"\"\"\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + arr[i]\n\n    return dp[0][-1]\n\n\ndef main():\n    arr = [2, 1, 5, 7, 6, 4, 8]\n    k = 4\n    print(max_sum_inc_subseq(arr, 0, k))\n    print(max_sum_",
      -12.5703125
    ],
    [
      "from icecream import ic\n\n\ndef max_sum_subseq(arr, k):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    ic(dp)\n    ans = 0\n    for i in range(n):\n        if i <= k:\n            ans = max(ans, dp[i])\n    return ans\n\n\ndef max_sum_subseq_efficient(arr, k):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n    for i in range(1, n):\n        dp[i] = max(dp[i], dp[i - 1] + arr[i])\n    ans = 0\n    for i in range(n):\n        if i <= k:\n            ans = max(ans, dp[i])\n    return ans\n\n\ndef max_sum_subseq_efficient_efficient(arr, k):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n    for i in range(1, n):\n        dp[i] = max(dp[i], dp[i - 1] + arr[i])\n    ans = 0\n    for i in range(k, n):\n        ans = max(ans, dp[i])\n    return ans\n\n\ndef main():\n    arr = [10, 20, 30, 40, 50, 60, 70]\n    k = 4\n    ans = max_sum_subseq(arr, k)\n    ans = max_sum_subseq_efficient(arr, k)\n    ans = max_sum_subseq_",
      -12.640625
    ],
    [
      "from typing import List\n\n\ndef max_increasing_subsequence(arr: List[int], i: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    \"\"\"\n    # Base case\n    if i >= len(arr) or k < i:\n        return 0\n\n    if k <= i:\n        return arr[k]\n\n    # Recursive Cases\n    # Maximum sum of subsequence upto i-th index\n    max_sum_i: int = max_increasing_subsequence(arr, i + 1, k)\n\n    # Maximum sum of subsequence from 0th index to i-th index\n    max_sum_0_to_i: int = max_increasing_subsequence(arr, i + 1, i)\n\n    # Maximum sum of subsequence from 0th index to i-th index including kth index\n    max_sum_0_to_i_including_k: int = max_increasing_subsequence(arr, i + 1, i + k - i - 1)\n\n    # Maximum sum of subsequence including kth index\n    max_sum_including_k: int = max_increasing_subsequence(arr, i + 1, k - 1)\n\n    # Maximum sum of subsequence including kth index and kth index\n    max_sum_including_k_and_k: int = max_increasing_subsequence(arr, i + 1, k)\n\n    # Maximum sum of subsequence including kth index and kth index\n    max_sum_including_k_and_k_plus_1: int = max_increasing_subsequence(arr, i + 1, k + 1)\n\n    # Maximum sum of subsequence including kth index and kth index\n    max_sum_including_k_and_k_plus_2: int = max_increasing_subsequence(arr, i + 1, k + 2)\n\n    return max(max_sum_i, max_sum_0_to_i, max_sum_0_to_i_including_",
      -16.59375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}