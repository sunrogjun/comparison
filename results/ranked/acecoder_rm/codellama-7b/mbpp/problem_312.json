{
  "problem": {
    "task_id": "MBPP/323",
    "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
    "test_list": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ],
    "challenge_test_list": [],
    "problem_id": 312
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    O(n) and O(1)\n    \"\"\"\n    result = []\n\n    for i in range(0, len(arr), 2):\n        result.append(arr[i])\n\n    for i in range(1, len(arr), 2):\n        result.append(arr[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([3, -4, 1, 5, -6]) == [-4, 3, -6, 1, 5]",
      1.8193359375
    ],
    [
      "from typing import List\n\n\ndef re_arrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] < 0:\n            left += 1\n        elif arr[right] >= 0:\n            right -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert re_arrange_array([1, 2, 3, -4, -1, -6]) == [-4, 1, -1, 2, -6, 3]",
      1.1337890625
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(N)\n# Space Complexity: O(1)\ndef rearrange_alternating(arr: List[int]) -> List[int]:\n    neg_pointer, pos_pointer = 0, len(arr) - 1\n\n    while neg_pointer < pos_pointer:\n        if arr[neg_pointer] < 0:\n            arr[neg_pointer], arr[pos_pointer] = arr[pos_pointer], arr[neg_pointer]\n            neg_pointer += 1\n            pos_pointer -= 1\n        elif arr[neg_pointer] > 0:\n            neg_pointer += 1\n        else:\n            neg_pointer += 1\n            pos_pointer -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_alternating([1, 2, 3, -4, 5, 6, -7, 8, 9]))",
      0.99169921875
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n\n    pos_elements = []\n    neg_elements = []\n    for item in arr:\n        if item > 0:\n            pos_elements.append(item)\n        else:\n            neg_elements.append(item)\n\n    result = []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            result.append(pos_elements[i // 2])\n        else:\n            result.append(neg_elements[i // 2])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([]) == []\n    assert rearrange_array([1, 2, 3, 4, 5]) == [1, -2, 3, -4, 5]\n    assert rearrange_array([1, -2, 3, -4, 5]) == [1, -2, 3, -4, 5]\n    assert rearrange_array([1, -2, 3, 4, 5]) == [1, -2, 3, 4, 5]\n    assert rearrange_array([1, -2, 3, -4, 5, 6, 7, 8, 9, 10]) == [\n        1,\n        -2,\n        3,\n        4,\n        5,\n        -6,\n        7,\n        8,\n        9,\n        10,\n    ]",
      0.95263671875
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating_positive_and_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    negative_index = 0\n    positive_index = 1\n\n    while negative_index < len(arr) and positive_index < len(arr):\n        if arr[positive_index] < 0:\n            arr[negative_index], arr[positive_index] = arr[positive_index], arr[negative_index]\n            negative_index += 2\n            positive_index += 1\n        else:\n            negative_index += 1\n            positive_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert arrange_alternating_positive_and_negative([1, 2, 3, -4, -1, -6, 8, 9]) == [-4, 1, -1, 2, 3, -6, 8, 9]",
      0.88525390625
    ],
    [
      "from typing import List\n\n\ndef alternating_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"Alternating positive and negative numbers in an array\n\n    Args:\n        arr (List[int]): array of numbers\n\n    Examples:\n        >>> assert alternating_pos_neg([1, 2, 3, 4, 5]) == [1, -2, 3, -4, 5]\n        >>> assert alternating_pos_neg([1, 2, 3, 4, 5, 6]) == [1, -2, 3, -4, 5, -6]\n    \"\"\"\n    return [\n        x if i % 2 == 0 else -x for i, x in enumerate(arr)\n    ]\n\n\nif __name__ == \"__main__\":\n    print(alternating_pos_neg([1, 2, 3, 4, 5]))",
      0.8095703125
    ],
    [
      "from typing import List\n\n\ndef rearrange_positive_negative(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    i = 0\n    j = len(nums) - 1\n\n    while i < j:\n        if nums[i] < 0 and nums[j] < 0:\n            i += 1\n        elif nums[i] > 0 and nums[j] > 0:\n            j -= 1\n        else:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative([1, 2, 3, -4, -1, -5, 6, -7, 8]) == [-4, 1, -1, 3, -7, 2, 6, 8, -5]",
      0.8095703125
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    positive = []\n    negative = []\n\n    for num in arr:\n        if num >= 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n\n    for i in range(len(positive)):\n        arr[i * 2] = positive[i]\n        if i * 2 + 1 < len(positive):\n            arr[i * 2 + 1] = negative[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, -1, -6]) == [-4, 1, -1, 2, 3, -6]",
      0.650390625
    ],
    [
      "from typing import List\n\n\ndef rearrange_alternating_positive_negative(input_arr: List[int]) -> List[int]:\n    \"\"\"Split the list in two, one with positive and other with negative numbers.\n    Sort both separately.\n    Join the lists.\n\n    Time Complexity: O(N log N)\n    Space Complexity: O(N)\n    \"\"\"\n\n    positive = []\n    negative = []\n\n    for num in input_arr:\n        if num >= 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n\n    positive.sort()\n    negative.sort(reverse=True)\n\n    return positive + negative\n\n\nif __name__ == \"__main__\":\n    assert rearrange_alternating_positive_negative([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]",
      0.5693359375
    ],
    [
      "from typing import List\n\n\n# O(n) time | O(1) space\ndef alternating_positive_and_negative(nums: List[int]) -> List[int]:\n    start = 0\n    end = len(nums) - 1\n\n    while start < end:\n        if nums[start] < 0 and nums[end] > 0:\n            nums[start], nums[end] = nums[end], nums[start]\n\n        if nums[start] > 0:\n            start += 1\n\n        if nums[end] < 0:\n            end -= 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    print(alternating_positive_and_negative([3, -2, -3, 1, 2]))",
      0.23828125
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"Returns a new list with alternating positive and negative items.\n\n    Args:\n        arr (List[int]): a given array\n\n    Examples:\n        >>> assert rearrange_pos_neg([1, 2, -3, 4, -5, 6]) == [-5, 1, -3, 2, 6, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: x < 0)\n\n\nif __name__ == \"__main__\":\n    print(rearrange_pos_neg([1, 2, -3, 4, -5, 6]))",
      0.137451171875
    ],
    [
      "def rearrange_pos_neg(arr):\n    n = len(arr)\n    pos = 0\n    neg = n - 1\n\n    while pos < neg:\n        if arr[pos] >= 0 and arr[neg] < 0:\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            pos += 1\n            neg -= 1\n        elif arr[pos] < 0:\n            neg -= 1\n        elif arr[neg] >= 0:\n            pos += 1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, -3, 4, 5, 6, -7, 8, 9]\n    rearrange_pos_neg(arr)\n    print(arr)",
      0.1357421875
    ],
    [
      "from typing import List\n\n\n# O(n) time | O(1) space\ndef arrange_alternating_positive_and_negative_items(nums: List[int]) -> List[int]:\n    i = 0\n    j = len(nums) - 1\n\n    while i < j:\n        if nums[i] < 0 and nums[j] > 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n        elif nums[i] < 0:\n            j -= 1\n        elif nums[j] > 0:\n            i += 1\n    return nums\n\n\ndef main():\n    print(arrange_alternating_positive_and_negative_items([3, -1, -2, 4, 1]))\n    print(arrange_alternating_positive_and_negative_items([3, -1, -2, -4, -1]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.027862548828125
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] >= 0:\n            left += 1\n        elif arr[right] <= 0:\n            right -= 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_pos_neg([1, 2, 3, -4, 5]) == [-4, 1, 5, 2, 3]",
      -0.42529296875
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(input_arr: List[int]) -> List[int]:\n    output_arr = []\n\n    for i in range(len(input_arr)):\n        if i % 2 == 0:\n            output_arr.append(input_arr[i])\n        else:\n            output_arr.append(-input_arr[i])\n\n    return output_arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, 3, -4, -1, -6]))",
      -0.85595703125
    ],
    [
      "def rearrange_array(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            arr[i] = -arr[i]\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, -4, -1, 4]\n    print(rearrange_array(arr))",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\nclass Solution:\n    def re_arrange(self, nums: List[int]) -> List[int]:\n        i, j = 0, len(nums)-1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n            if nums[i] < 0:\n                i += 1\n            if nums[j] > 0:\n                j -= 1\n        return nums",
      -0.85595703125
    ],
    [
      "def arrange_alternating(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] * arr[i - 1] < 0:\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(arrange_alternating([-1, 2, -3, 4, -5]))",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if not arr:\n        return []\n\n    pos_arr = []\n    neg_arr = []\n\n    for num in arr:\n        if num >= 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n\n    return pos_arr + neg_arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, -1, -6]) == [1, -1, 2, -4, 3, -6]",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\n# O(n) time | O(1) space\ndef arrange_alternating(nums: List[int]) -> List[int]:\n    left, right = 0, len(nums) - 1\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n        if left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n\n    return nums\n\n\nprint(arrange_alternating([1, 2, 3, 4, -1, -2, -3, -4]))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef rearrange_array(arr: List[int]) -> List[int]:\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] >= 0:\n            i += 1\n        elif arr[j] < 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([-1, -2, -3, -4, -5, 6, 7, 8, 9, 10]))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    arr.sort()\n    return arr[::2] + arr[1::2]\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 3, 2, 4]",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] < 0:\n            left += 1\n        elif arr[right] >= 0:\n            right -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_pos_neg([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\n# O(n) time | O(1) space - where n is the length of the input array\nclass Solution:\n    def alternatingPosNeg(self, nums: List[int]) -> List[int]:\n        if len(nums) < 2:\n            return nums\n        if len(nums) == 2:\n            return nums if nums[0] < nums[1] else nums[::-1]\n        result = [nums[0]]\n        for i in range(1, len(nums)):\n            if nums[i] * result[-1] < 0:\n                result.append(nums[i])\n            else:\n                result = result + [nums[i]]\n        return result",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef rearrange_positive_negative_items(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    pos_index, neg_index = 0, len(arr) - 1\n\n    while pos_index < neg_index:\n        if arr[pos_index] < 0:\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n            neg_index -= 1\n        else:\n            pos_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative_items([1, 2, -3, -4, 5]) == [-4, 1, -3, 2, 5]",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"Rearrange positive and negative numbers.\n\n    Args:\n        arr (List[int]): input array\n\n    Returns:\n        List[int]: output array\n    \"\"\"\n    arr.sort()\n    pos = 0\n    neg = len(arr) - 1\n    while pos < neg:\n        arr[pos], arr[neg] = arr[neg], arr[pos]\n        pos += 2\n        neg -= 2\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_pos_neg([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef rearrange_alternating(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    negative_indices = []\n\n    for index, value in enumerate(arr):\n        if value < 0:\n            negative_indices.append(index)\n\n    for index in range(len(negative_indices)):\n        arr[index], arr[negative_indices[index]] = arr[negative_indices[index]], arr[index]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_alternating([1, 2, 3, -4, -1, -6]) == [-4, 1, -1, 2, 3, -6]",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef rearrange_alternating_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        if arr[left] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        else:\n            left += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_alternating_pos_neg([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(nums: List[int]) -> List[int]:\n    \"\"\"Returns a new list containing alternating positive and negative elements.\n\n    Args:\n        nums (List[int]): a list of integers\n\n    Examples:\n        >>> assert rearrange_array([1, 2, 3, -4, -1]) == [-4, 1, -1, 2, 3]\n    \"\"\"\n    return nums[len(nums)::2] + nums[1:len(nums):2]\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, 3, -4, -1]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef alternate(nums: List[int]) -> List[int]:\n    nums.sort()\n    pos = 0\n    neg = 1\n    while pos < len(nums) and neg < len(nums):\n        nums[pos], nums[neg] = nums[neg], nums[pos]\n        pos += 2\n        neg += 2\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    print(alternate([1, 2, 3, -4, -1, -6, 5, 7, -8]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    pos = 0\n    neg = 0\n\n    while pos < len(arr) and neg < len(arr):\n        if arr[pos] >= 0:\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            pos += 1\n            neg += 1\n        else:\n            pos += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating(arr: List[int]) -> List[int]:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    arr.sort()\n    for i in range(1, len(arr), 2):\n        arr[i] *= -1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert arrange_alternating([1, 2, 3, -4, -1, -6]) == [-6, 1, -4, 3, 2, -1]",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef re_arrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] < 0:\n            left += 1\n        else:\n            right -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert re_arrange_array([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]\n    assert re_arrange_array([1, 2, 3, 4, 5]) == [1, -1, 2, -2, 3, -3, 4, -4, 5]",
      -0.88037109375
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n\n    pos = 0\n    neg = 0\n\n    while pos < len(arr) and neg < len(arr):\n        if arr[pos] < 0:\n            result.append(arr[neg])\n            neg += 1\n        else:\n            result.append(arr[pos])\n            pos += 1\n\n    while pos < len(arr):\n        result.append(arr[pos])\n        pos += 1\n\n    while neg < len(arr):\n        result.append(arr[neg])\n        neg += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]",
      -0.96337890625
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def find_negatives(arr: List[int]) -> List[int]:\n        \"\"\"\n        Return a list of negative numbers from the given list\n        \"\"\"\n        return [num for num in arr if num < 0]\n\n    def find_positives(arr: List[int]) -> List[int]:\n        \"\"\"\n        Return a list of positive numbers from the given list\n        \"\"\"\n        return [num for num in arr if num >= 0]\n\n    def merge(arr1: List[int], arr2: List[int]) -> List[int]:\n        \"\"\"\n        Merge two arrays alternatively\n        \"\"\"\n        result = []\n\n        while arr1 and arr2:\n            result.append(arr1.pop(0))\n            result.append(arr2.pop(0))\n\n        if arr1:\n            result.extend(arr1)\n        elif arr2:\n            result.extend(arr2)\n\n        return result\n\n    if len(arr) == 0:\n        return arr\n\n    negatives = find_negatives(arr)\n    positives = find_positives(arr)\n\n    return merge(negatives, positives)\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, -1, -6]) == [-4, 1, -1, 2, 3, -6]\n    assert rearrange_array([]) == []\n    assert rearrange_array([1, -1]) == [-1, 1]\n    assert rearrange_array([-1, -2]) == [-2, -1]",
      -0.998046875
    ],
    [
      "def arrange_alternating(arr):\n    arr.sort()\n    j = 0\n    while j < len(arr):\n        if arr[j] < 0:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            j += 2\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(arrange_alternating([-1, -2, -3, -4, -5, 6, 5, 4, 3, 2, 1]))",
      -1.138671875
    ],
    [
      "from typing import List\n\n\ndef re_arrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n\n    n = len(arr)\n\n    # Find index of first negative number\n    negative_index = 0\n    for i in range(n):\n        if arr[i] < 0:\n            negative_index = i\n            break\n\n    # Swap negative and positive numbers\n    for i in range(n):\n        if i % 2 == 0:\n            arr[i], arr[negative_index] = arr[negative_index], arr[i]\n            negative_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert re_arrange_array([1, 2, 3, 4, -1, -2, -3, -4]) == [-1, 1, -2, 2, -3, 3, -4, 4]",
      -1.3984375
    ],
    [
      "from typing import List\n\n\ndef rearrange_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Return a new array with alternating positive and negative items.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    pos_idx, neg_idx = 0, len(arr) - 1\n\n    while pos_idx < neg_idx:\n        if arr[pos_idx] < 0:\n            arr[pos_idx], arr[neg_idx] = arr[neg_idx], arr[pos_idx]\n            pos_idx += 1\n            neg_idx -= 1\n        else:\n            pos_idx += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == [\n        9, -8, 7, -7, 5, -6, 3, -4, 1, -2\n    ]",
      -1.44140625
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(nums: List[int]) -> List[int]:\n    \"\"\"Returns a list of alternating positive and negative numbers.\n\n    Args:\n        nums (List[int]): input list of numbers\n\n    Examples:\n        >>> assert rearrange_array([1, 2, 3, -4, -1]) == [-4, 1, -1, 2, 3]\n    \"\"\"\n    return [\n        num\n        for index, num in enumerate(nums)\n        if index % 2 == (num >= 0)\n    ]\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, 3, -4, -1]))",
      -1.5205078125
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    n = len(arr)\n    i = 0\n    while i < n:\n        if arr[i] >= 0:\n            left, right = i, i + 1\n            while left >= 0 and right < n and arr[left] >= 0 and arr[right] < 0:\n                arr[left], arr[right] = arr[right], arr[left]\n                left -= 1\n                right += 1\n            if left >= 0 and right < n:\n                arr[left], arr[right] = arr[right], arr[left]\n            i += 1\n        else:\n            left, right = i, i - 1\n            while left >= 0 and right >= 0 and arr[left] < 0 and arr[right] >= 0:\n                arr[left], arr[right] = arr[right], arr[left]\n                left -= 1\n                right -= 1\n            if left >= 0 and right >= 0:\n                arr[left], arr[right] = arr[right], arr[left]\n            i += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert arrange_alternating_positive_negative([1, -2, 3, -4, 5, -6, 7]) == [-2, 1, -4, 3, -6, 5, -7, 7]",
      -1.6259765625
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    pos = []\n    neg = []\n\n    for num in arr:\n        if num >= 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n\n    return [\n        *[num for num in pos if num >= 0],\n        *[num for num in neg if num < 0],\n    ]\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, 5]) == [-4, 1, 2, 3, 5]",
      -1.8076171875
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    pos = []\n    neg = []\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n\n    pos_idx, neg_idx = 0, 0\n\n    for i in range(len(arr)):\n        if pos_idx >= len(pos):\n            arr[i] = neg[neg_idx]\n            neg_idx += 1\n        elif neg_idx >= len(neg):\n            arr[i] = pos[pos_idx]\n            pos_idx += 1\n        else:\n            arr[i] = pos[pos_idx] if i % 2 == 0 else neg[neg_idx]\n            pos_idx += 1\n            neg_idx += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]",
      -1.81640625
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(input_arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if not input_arr:\n        return []\n\n    if len(input_arr) == 1:\n        return input_arr\n\n    if len(input_arr) == 2:\n        if input_arr[0] >= 0:\n            return input_arr\n        return [input_arr[1], input_arr[0]]\n\n    left, right = 0, len(input_arr) - 1\n    while left < right:\n        if input_arr[left] >= 0 and input_arr[right] >= 0:\n            left += 1\n        elif input_arr[left] < 0 and input_arr[right] < 0:\n            right -= 1\n        else:\n            input_arr[left], input_arr[right] = input_arr[right], input_arr[left]\n\n    return input_arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([]) == []\n    assert rearrange_array([1]) == [1]\n    assert rearrange_array([1, -1]) == [-1, 1]\n    assert rearrange_array([1, 2, 3, 4, 5, 6, 7, 8]) == [1, -2, 3, -4, 5, -6, 7, -8]\n    assert rearrange_array([-1, -2, -3, -4, -5, -6, -7, -8]) == [-1, 2, -3, 4, -5, 6, -7, 8]",
      -1.9287109375
    ],
    [
      "from math import ceil\n\n\ndef rearrange_array(arr):\n    \"\"\"\n    Return a list of alternating positive and negative items.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    pos_arr = []\n    neg_arr = []\n\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n\n    pos_arr.extend(neg_arr)\n    return pos_arr\n\n\ndef rearrange_array_2(arr):\n    \"\"\"\n    Return a list of alternating positive and negative items.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    pos_arr = []\n    neg_arr = []\n\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n\n    pos_arr.extend(neg_arr)\n    return pos_arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array_2([-1, -2, -3, -4, -5]))",
      -2.087890625
    ],
    [
      "def rearrange_array(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n\n        if arr[left] < 0 and arr[right] >= 0:\n            left += 1\n            right -= 1\n        else:\n            left += 1\n\n    return arr\n\n\ndef test_rearrange_array():\n    assert rearrange_array([1, 2, 3, -4, 5]) == [-4, 1, 2, 3, 5]\n    assert rearrange_array([1, -2, 3, 4, 5]) == [1, -2, 4, 3, 5]\n    assert rearrange_array([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\n    assert rearrange_array([]) == []\n    assert rearrange_array([1]) == [1]\n    assert rearrange_array([1, -1]) == [-1, 1]\n    assert rearrange_array([1, 2, 3, -4, -5, 6, 7, 8, 9, 10]) == [-4, 1, 2, 3, -5, 6, 7, 8, 9, 10]",
      -2.11328125
    ],
    [
      "def alternating_pos_neg(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    arr.sort()\n    neg_index = 0\n    pos_index = len(arr) - 1\n    while neg_index < pos_index:\n        arr[neg_index], arr[pos_index] = arr[pos_index], arr[neg_index]\n        neg_index += 1\n        pos_index -= 1\n    return arr\n\n\ndef main():\n    print(\"Alternating Positive and Negative numbers: \" +\n          str(alternating_pos_neg([1, 2, 3, -4, 5, 6, -7, 8, -9])))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.119140625
    ],
    [
      "from typing import List\n\n\ndef re_arrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    length = len(arr)\n    if length <= 1:\n        return arr\n\n    pos_index, neg_index = 0, 1\n\n    while neg_index < length:\n        if arr[pos_index] < 0:\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n            pos_index += 2\n            neg_index += 2\n        else:\n            pos_index += 1\n            neg_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert re_arrange_array([-1, -2, -3, -4, -5]) == [-1, -2, -5, -3, -4]\n    assert re_arrange_array([-1, -2, -3, -4, -5, -6]) == [-1, -2, -6, -3, -4, -5]\n    assert re_arrange_array([-1, -2, -3, -4, -5, -6, -7]) == [-1, -2, -7, -3, -4, -6, -5]",
      -2.2578125
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    i = 0\n    j = len(nums) - 1\n\n    while i < j:\n        nums[i], nums[j] = nums[j], nums[i]\n\n        if nums[i] < 0:\n            i += 1\n        elif nums[j] > 0:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_pos_neg([1, -2, 3, -4, 5, -6, 7, 8, -9]) == [-1, 2, -3, 4, -5, 6, -7, 8, -9]",
      -2.267578125
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        if arr[left] >= 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] < 0:\n            left += 1\n        elif arr[right] >= 0:\n            right -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, 5]) == [-4, 1, 5, 2, 3]",
      -2.369140625
    ],
    [
      "def rearrange_array(arr):\n    \"\"\"\n    :param: arr - input array\n    return modified array\n\n    >>> rearrange_array([1, 2, 3, -4, -1])\n    [-4, 1, -1, 2, 3]\n\n    >>> rearrange_array([1, 2, 3, 4, -1])\n    [4, 1, -1, 2, 3]\n\n    >>> rearrange_array([-1, -2])\n    [-1, -2]\n\n    >>> rearrange_array([])\n    []\n    \"\"\"\n    new_arr = []\n    if len(arr) % 2 == 0:\n        for i in range(0, len(arr), 2):\n            new_arr.append(arr[i])\n            new_arr.append(arr[i + 1])\n        return new_arr\n    else:\n        for i in range(1, len(arr), 2):\n            new_arr.append(arr[i])\n            new_arr.append(arr[i - 1])\n        new_arr.append(arr[-1])\n        return new_arr\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.4609375
    ],
    [
      "from typing import List\n\n\ndef rearrange_alternating(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    start, end = 0, len(arr) - 1\n\n    while start < end:\n        if arr[start] < 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            end -= 1\n        start += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_alternating([1, 2, 3, -4, -1, -6]) == [-4, 1, -6, 2, -1, 3]",
      -2.4609375
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    length = len(arr)\n\n    if length <= 1:\n        return arr\n\n    pos_index, neg_index = 0, 1\n\n    while neg_index < length:\n        if arr[neg_index] >= 0:\n            pos_index, neg_index = neg_index, pos_index\n        else:\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n            pos_index += 1\n            neg_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([]) == []\n    assert rearrange_array([1, 2, 3, 4, 5]) == [1, -2, 3, -4, 5]\n    assert rearrange_array([1, -2, 3, -4, 5]) == [1, -2, 3, -4, 5]\n    assert rearrange_array([1, -2, 3, -4, -5]) == [-1, 2, -3, 4, -5]\n    assert rearrange_array([-1, 2, -3, 4, -5]) == [-1, 2, -3, 4, -5]",
      -2.51953125
    ],
    [
      "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rearrange_array(numbers: List[int]) -> List[int]:\n    \"\"\"\n    :param numbers: list of integers\n    :return: re-arranged list\n    >>> rearrange_array([1, 2, 3, -4, 5])\n    [-4, 1, 5, 2, 3]\n    >>> rearrange_array([-1, -2, -3, 4, 5])\n    [4, -1, 5, -2, -3]\n    \"\"\"\n    start, end = 0, len(numbers) - 1\n    while start < end:\n        numbers[start], numbers[end] = numbers[end], numbers[start]\n        start += 1\n        end -= 1\n    return numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.5546875
    ],
    [
      "from array import array\nfrom typing import List\n\n\ndef re_arrange_alternating_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"Alternating positive and negative elements in array.\n\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    Args:\n        arr: list of integers\n\n    Returns:\n        re-arranged list\n    \"\"\"\n    if not arr:\n        return arr\n\n    pos_arr: List[int] = []\n    neg_arr: List[int] = []\n\n    for num in arr:\n        if num > 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n\n    return [*pos_arr, *neg_arr]\n\n\nif __name__ == \"__main__\":\n    arr: List[int] = [-1, -2, -3, -4, -5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(re_arrange_alternating_pos_neg(arr))\n\n    arr = array(\"i\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    print(re_arrange_alternating_pos_neg(arr))",
      -2.66015625
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not nums:\n        return nums\n\n    left, right = 0, len(nums) - 1\n\n    while left < right:\n        if nums[left] < 0 and nums[right] < 0:\n            left += 1\n        elif nums[left] > 0 and nums[right] > 0:\n            right -= 1\n        else:\n            nums[left], nums[right] = nums[right], nums[left]\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([-1, -2, -3, -4, -5, 6, 7, 8, 9, 10, 11, 12]) == [\n        -1, 6, -2, 7, -3, 8, -4, 9, -5, 10, 11, 12\n    ]\n    assert rearrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [\n        1, 6, 2, 7, 3, 8, 4, 9, 5, 10, 11, 12\n    ]\n    assert rearrange_array([-1, -2, -3, -4, -5, 6, 7, 8, 9, 10, 11, 12, 13]) == [\n        -1, 6, -2, 7, -3, 8, -4, 9, -5, 10, 11, 12, 13\n    ]\n    assert rearrange_array([-1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 1",
      -2.876953125
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating(arr: List[int]) -> List[int]:\n    \"\"\"\n    Arrange alternating positive and negative numbers in-place.\n    :param arr: List[int] - input array\n    :return: List[int] - sorted array\n    >>> arrange_alternating([1, 2, 3, -4, 5, 6, -7, 8])\n    [-4, 1, -7, 2, 5, -4, 3, 6, 8]\n    \"\"\"\n    # Your code here\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n\n    pos_index = 0\n    neg_index = 1\n\n    while pos_index < len(arr) and neg_index < len(arr):\n        if arr[pos_index] < 0:\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n            pos_index += 2\n            neg_index += 2\n        elif arr[pos_index] >= 0:\n            pos_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.97265625
    ],
    [
      "from typing import List\n\n\n# O(n) time | O(1) space\ndef alternatingPositiveAndNegative(nums: List[int]) -> List[int]:\n    i = 0\n    while i < len(nums):\n        if nums[i] < 0:\n            nums.append(nums.pop(i))\n        i += 1\n    return nums\n\n\n# O(n) time | O(n) space\ndef alternatingPositiveAndNegative2(nums: List[int]) -> List[int]:\n    # if the first element is positive, then we can start from index 0\n    # otherwise, we have to start from index 1\n    start = 0 if nums[0] > 0 else 1\n\n    # i will point to the left and j to the right\n    i, j = start, len(nums) - 1\n\n    # keep going until i and j meet in the middle\n    while i < j:\n        # swap the elements\n        nums[i], nums[j] = nums[j], nums[i]\n\n        # move both pointers\n        i += 2\n        j -= 2\n    return nums\n\n\nprint(alternatingPositiveAndNegative2([1, 2, -3, -4, 5]))",
      -3.154296875
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    pos_count, neg_count = 0, 0\n\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    pos_end_index, neg_end_index = pos_count - 1, neg_count - 1\n\n    while pos_end_index >= 0 and neg_end_index >= 0:\n        nums[pos_end_index], nums[neg_end_index] = nums[neg_end_index], nums[pos_end_index]\n        pos_end_index -= 2\n        neg_end_index -= 2\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, 5]) == [-4, 1, 2, 3, 5]",
      -3.294921875
    ],
    [
      "def rearrange_pos_neg(arr):\n    \"\"\"\n    :param: arr - input array\n    return modified array with alternating positive and negative items\n    \"\"\"\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            if (arr[i] < 0):\n                arr.insert(0, arr.pop(i))\n\n    return arr\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = rearrange_pos_neg(arr)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [-1, -2, -3, -4, -5]\nsolution = [-1, -2, 3, 4, 5]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nsolution = [1, -2, 3, -4, 5]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, -5]\nsolution = [1, -2, 3, -4, 5]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, -2, 3, -4, -5]\nsolution = [1, -2, 3, -4, 5]\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [-1, -2, -3, -4, -5]\nsolution = [-1, -2, 3, 4, 5]\ntest_case = [arr, solution]\ntest_function(test_case)",
      -3.373046875
    ],
    [
      "from array import array\n\n\ndef rearrange_alternating_pos_neg(arr: array) -> array:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n\n    new_arr = array(arr.typecode, [])\n\n    for i in range(0, len(arr), 2):\n        new_arr.append(arr[i])\n        if i + 1 < len(arr):\n            new_arr.append(arr[i + 1])\n\n    for i in range(1, len(arr), 2):\n        new_arr.append(arr[i])\n        if i + 1 < len(arr):\n            new_arr.append(arr[i + 1])\n\n    return new_arr\n\n\nif __name__ == \"__main__\":\n    arr: array = array(\"i\", [1, 2, 3, 4, 5])\n    print(rearrange_alternating_pos_neg(arr))\n    arr: array = array(\"i\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(rearrange_alternating_pos_neg(arr))",
      -3.427734375
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(input_arr: List[int]) -> List[int]:\n    \"\"\"\n    This function uses a simple brute force technique to rearrange the array.\n    It iterates over the array and adds each element to the end of the output array.\n    If the element is positive, it adds it to the end of the output array.\n    If the element is negative, it adds it to the start of the output array.\n    \"\"\"\n    output_arr = []\n    for elem in input_arr:\n        output_arr.append(elem)\n        if elem < 0:\n            output_arr.insert(0, elem)\n    return output_arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, 3, -4, -1, -6]))",
      -3.43359375
    ],
    [
      "from typing import List\n\n\ndef rearrange_alternating(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            continue\n        if arr[i] < 0:\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_alternating([1, 2, 3, -4, 5]) == [-4, 1, 5, 2, 3]",
      -3.4921875
    ],
    [
      "from typing import List\n\n\ndef rearrange_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    pos_idx, neg_idx = 0, len(arr) - 1\n\n    while pos_idx < neg_idx:\n        if arr[pos_idx] < 0:\n            arr[pos_idx], arr[neg_idx] = arr[neg_idx], arr[pos_idx]\n            neg_idx -= 1\n        else:\n            pos_idx += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative([1, 2, 3, -4, 5]) == [-4, 1, 5, 2, 3]",
      -3.51171875
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating_positive_and_negative_items(input_array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    output_array: List[int] = []\n\n    for i in range(len(input_array)):\n        if i % 2 == 0:\n            output_array.append(input_array[i])\n        else:\n            output_array.insert(0, input_array[i])\n\n    return output_array\n\n\nif __name__ == \"__main__\":\n    assert arrange_alternating_positive_and_negative_items([1, 2, 3, -4, -1, -6, 5, -3, -2]) == [-4, 1, -1, 3, 2, -3, 5, -2, 6]",
      -3.58203125
    ],
    [
      "from typing import List\n\n\ndef rearrange_alternating_positive_and_negative(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(nums) == 1:\n        return nums\n\n    left, right = 0, len(nums) - 1\n\n    while left < right:\n        if nums[left] < 0:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        else:\n            left += 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_alternating_positive_and_negative([1, 2, 3, 4, 5]) == [1, -5, 2, -4, 3]",
      -3.703125
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] >= 0:\n            i += 1\n        if arr[j] < 0:\n            j -= 1\n\n        arr[i], arr[j] = arr[j], arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_pos_neg([1, 2, 3, -4, 5]) == [-4, 1, 2, 3, 5]\n    assert rearrange_pos_neg([-1, -2, -3, 4, -5]) == [4, -1, -2, -3, -5]",
      -3.828125
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    left, right = 0, len(arr) - 1\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 2\n        right -= 2\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_pos_neg([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]",
      -4.2265625
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([-1, -2, -3, -4, -5]) == [-1, 5, -2, 4, -3]\n    assert rearrange_array([1, 2, 3, 4, 5]) == [1, -2, 3, -4, 5]\n    assert rearrange_array([-1, 2, -3, 4, -5]) == [-1, 4, -3, 2, -5]",
      -4.3125
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"Rearrange array in alternating positive and negative items.\n\n    Args:\n        arr (List[int]): input array\n\n    Examples:\n        >>> rearrange_array([1, 2, 3, -4, -1])\n        [-4, 1, -1, 2, 3]\n        >>> rearrange_array([1, 2, 3, 4, 5])\n        [1, -1, 2, -2, 3, -3, 4, -4, 5]\n        >>> rearrange_array([-1, -2, -3, -4, -5])\n        [-1, 1, -2, 2, -3, 3, -4, 4, -5]\n    \"\"\"\n    if not arr:\n        return arr\n\n    result: List[int] = []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            result.append(arr[i])\n        else:\n            result.append(-arr[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, 3, -4, -1]))\n    print(rearrange_array([1, 2, 3, 4, 5]))\n    print(rearrange_array([-1, -2, -3, -4, -5]))",
      -4.37890625
    ],
    [
      "def rearrange_positive_negative(input_array):\n    \"\"\"\n    >>> rearrange_positive_negative([1, 2, 3, -4, 5, -6, -7, 8])\n    [-4, -6, -7, 1, 3, 5, 8, 2]\n\n    >>> rearrange_positive_negative([1, -1])\n    [1, -1]\n\n    >>> rearrange_positive_negative([1, 2, 3, 4, -4, -3, -2, -1])\n    [1, -4, 2, -3, 3, -2, 4, -1]\n\n    >>> rearrange_positive_negative([])\n    []\n    \"\"\"\n    n = len(input_array)\n\n    # base case\n    if n < 2:\n        return input_array\n\n    # initialize left and right pointers\n    left, right = 0, n - 1\n\n    # run while left < right\n    while left < right:\n        # if left element is positive, skip\n        if input_array[left] > 0:\n            left += 1\n\n        # if right element is negative, skip\n        if input_array[right] < 0:\n            right -= 1\n\n        # swap the left and right elements\n        input_array[left], input_array[right] = (\n            input_array[right],\n            input_array[left],\n        )\n\n    return input_array\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.50390625
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating(arr: List[int]) -> List[int]:\n    \"\"\"Returns the list of integers in alternating positive and negative order.\n\n    Args:\n        arr (List[int]): input list\n\n    Examples:\n        >>> arrange_alternating([1, 2, 3, -4, -5])\n        [-4, 1, -5, 2, 3]\n        >>> arrange_alternating([1, 2, 3, 4, 5])\n        [1, -1, 2, -2, 3, -3, 4, -4, 5]\n        >>> arrange_alternating([-1, -2, -3, -4, -5])\n        [-1, 1, -2, 2, -3, 3, -4, 4, -5]\n        >>> arrange_alternating([1, -2, 3, -4, 5])\n        [1, -2, 3, -4, 5]\n    \"\"\"\n    pos_index, neg_index = 0, len(arr) - 1\n\n    while pos_index < neg_index:\n        if arr[pos_index] < 0:\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n            neg_index -= 1\n        else:\n            pos_index += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(arrange_alternating([1, 2, 3, -4, -5]))\n    print(arrange_alternating([1, 2, 3, 4, 5]))\n    print(arrange_alternating([-1, -2, -3, -4, -5]))\n    print(arrange_alternating([1, -2, 3, -4, 5]))",
      -4.67578125
    ],
    [
      "from typing import List\n\n\ndef rearrange_alternating(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    neg_index = 0\n    pos_index = 1\n\n    while pos_index < len(arr):\n        if arr[neg_index] >= 0 and arr[pos_index] < 0:\n            arr[neg_index], arr[pos_index] = arr[pos_index], arr[neg_index]\n            neg_index += 2\n            pos_index += 2\n        elif arr[neg_index] < 0 and arr[pos_index] >= 0:\n            neg_index += 1\n            pos_index += 1\n        elif arr[neg_index] < 0 and arr[pos_index] < 0:\n            neg_index += 1\n        elif arr[neg_index] >= 0 and arr[pos_index] >= 0:\n            pos_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_alternating([1, 2, 3, -1, -2, -3, 4, 5]) == [-1, 1, -2, 2, -3, 3, 5, 4]\n    assert rearrange_alternating([-1, -2, -3, 4, 5, 6, 7, 8]) == [-1, 4, -2, 5, -3, 6, 7, 8]\n    assert rearrange_alternating([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 4, 2, 5, 3, 6, 7, 8]",
      -4.9296875
    ],
    [
      "from typing import List\n\n\ndef rearrange_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return arr\n\n    pos_index = 0\n    neg_index = 1\n    arr.sort()\n\n    while neg_index < len(arr):\n        if arr[pos_index] < 0 and arr[neg_index] < 0:\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n            pos_index += 2\n            neg_index += 2\n        elif arr[pos_index] < 0 and arr[neg_index] > 0:\n            pos_index += 1\n            neg_index += 1\n        else:\n            break\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_positive_negative([]) == []\n    assert rearrange_positive_negative([1, -2, 3, -4, 5]) == [1, -2, 5, 3, -4]\n    assert rearrange_positive_negative([1, 2, 3, 4, 5]) == [1, -2, 3, -4, 5]",
      -4.96484375
    ],
    [
      "from typing import List\n\n\ndef re_arrange_array(input_arr: List[int]) -> List[int]:\n    if len(input_arr) <= 1:\n        return input_arr\n\n    positive_index = 0\n    negative_index = 1\n\n    while negative_index < len(input_arr):\n        if negative_index > positive_index:\n            input_arr[positive_index], input_arr[negative_index] = input_arr[negative_index], input_arr[positive_index]\n            positive_index += 2\n            negative_index += 2\n        else:\n            negative_index += 1\n\n    return input_arr\n\n\nif __name__ == \"__main__\":\n    assert re_arrange_array([1, 2, 3, -4, 5]) == [-4, 1, 5, 2, 3]\n    assert re_arrange_array([1, -2, 3, 4, -5]) == [-5, 1, 4, -2, 3]",
      -5.3359375
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"Alternate positive and negative numbers.\n\n    Args:\n        arr (List[int]): array of numbers\n\n    Returns:\n        List[int]: re-arranged array\n    \"\"\"\n    pos_items = []\n    neg_items = []\n\n    for item in arr:\n        if item > 0:\n            pos_items.append(item)\n        elif item < 0:\n            neg_items.append(item)\n\n    return pos_items + neg_items\n\n\nif __name__ == \"__main__\":\n    arr_1 = [-1, -2, -3, -4, -5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    arr_2 = [-1, -2, -3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    print(rearrange_pos_neg(arr_1))\n    print(rearrange_pos_neg(arr_2))",
      -5.42578125
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    i = 0\n    n = len(arr)\n\n    while i < n:\n        if arr[i] < 0:\n            j = i + 1\n            while j < n and arr[j] < 0:\n                j += 1\n            arr[i], arr[j - 1] = arr[j - 1], arr[i]\n            i = j\n        else:\n            j = i + 1\n            while j < n and arr[j] >= 0:\n                j += 1\n            arr[i], arr[j - 1] = arr[j - 1], arr[i]\n            i = j\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert arrange_alternating_positive_negative([3, -4, 5, -6, 7, -8, 9]) == [-4, 3, -6, 5, -8, 7, -9, 9]",
      -5.46484375
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not nums:\n        return []\n\n    left, right = 0, len(nums) - 1\n\n    while left <= right:\n        if nums[left] < 0 and nums[right] > 0:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        elif nums[left] > 0:\n            right -= 1\n        elif nums[right] < 0:\n            left += 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([]) == []\n    assert rearrange_array([1, -2, 3, -4, 5, -6, 7]) == [1, -2, 5, -4, 3, -6, 7]",
      -5.6640625
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    neg_indices = [i for i, num in enumerate(arr) if num < 0]\n    pos_indices = [i for i, num in enumerate(arr) if num >= 0]\n\n    for i in range(0, len(arr), 2):\n        if i < len(neg_indices):\n            arr[i], arr[neg_indices[i]] = arr[neg_indices[i]], arr[i]\n\n        if i < len(pos_indices):\n            arr[i + 1], arr[pos_indices[i]] = arr[pos_indices[i]], arr[i + 1]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_pos_neg([1, 2, 3, -4, -1, 4]) == [-4, 1, -1, 2, 3, 4]\n    assert rearrange_pos_neg([-1, -2, 3, 4, 5]) == [4, -2, 5, -1, 3]\n    assert rearrange_pos_neg([1, -1, 1, -1]) == [-1, 1, -1, 1]",
      -5.78125
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating_positive_and_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        if arr[start] < 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            end -= 1\n        else:\n            start += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert arrange_alternating_positive_and_negative([-5, -2, -1, 0, 5, 6, 7, 8, 9, 10]) == [\n        0,\n        5,\n        -2,\n        1,\n        6,\n        -1,\n        7,\n        8,\n        9,\n        10,\n    ]",
      -5.90625
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating_positive_and_negative_items(nums: List[int]) -> List[int]:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    left, right = 0, len(nums) - 1\n    while left < right:\n        if nums[left] < 0 < nums[right]:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        elif nums[left] > 0 > nums[right]:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert arrange_alternating_positive_and_negative_items([]) == []\n    assert arrange_alternating_positive_and_negative_items([1]) == [1]\n    assert arrange_alternating_positive_and_negative_items([-1, 1]) == [1, -1]\n    assert arrange_alternating_positive_and_negative_items([1, -1, 2, -2]) == [1, -1, 2, -2]\n    assert arrange_alternating_positive_and_negative_items([1, -1, 2, 3, -3, -2]) == [1, -1, 2, -2, 3, -3]\n    assert arrange_alternating_positive_and_negative_items([1, 2, -2, 3, -3, -4, 4]) == [1, 2, -2, 3, -3, -4, 4]",
      -5.953125
    ],
    [
      "def rearrange_array(arr):\n    \"\"\"\n    :param: arr - input array\n    return - output array with alternated positive and negative numbers\n    \"\"\"\n    return [item for pair in zip(arr[::2], arr[1::2][::-1]) for item in pair]\n\n\ndef test_cases():\n    assert rearrange_array([1, 2, 3, -4, -1, -6]) == [-4, 1, -6, 2, -1, 3]\n    assert rearrange_array([]) == []\n    assert rearrange_array([1]) == [1]\n    assert rearrange_array([1, -1]) == [-1, 1]\n    assert rearrange_array([-1, 1]) == [1, -1]\n    assert rearrange_array([1, 2, -1, -2]) == [-2, 1, -1, 2]\n\n\ntest_cases()",
      -5.96484375
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(nums) == 0:\n        return []\n\n    negative_index = 0\n    positive_index = 1\n\n    while positive_index < len(nums):\n        if nums[positive_index] >= 0 and nums[negative_index] < 0:\n            nums[negative_index], nums[positive_index] = nums[positive_index], nums[negative_index]\n\n        negative_index += 1\n        positive_index += 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([]) == []\n    assert rearrange_array([1]) == [1]\n    assert rearrange_array([1, -2, 3, -4, 5, -6, 7, -8]) == [-2, 1, -4, 3, -6, 5, -8, 7]\n    assert rearrange_array([-1, -2, -3, -4, -5, -6, -7, -8]) == [-1, -2, -3, -4, -5, -6, -7, -8]\n    assert rearrange_array([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8]) == [\n        -1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8\n    ]",
      -5.96875
    ],
    [
      "from array import array\nfrom typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    length = len(arr)\n\n    for i in range(length - 1):\n        if arr[i] >= 0 and arr[i + 1] < 0:\n            continue\n        if arr[i] < 0 and arr[i + 1] >= 0:\n            continue\n\n        arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\n    return arr\n\n\ndef test():\n    \"\"\"run test cases\"\"\"\n    test_cases = (\n        ([3, -4, 0, 9, -1, -1, 2], [3, -1, -1, 0, 9, 2, -4]),\n        ([5, 2, -2, 4, 3, -1, -5], [5, 4, 3, 2, -2, -1, -5]),\n    )\n\n    for arg, expected in test_cases:\n        assert rearrange_array(arg) == expected\n\n\nif __name__ == \"__main__\":\n    test()",
      -5.97265625
    ],
    [
      "from array import array\n\n\ndef rearrange_array(arr: array) -> array:\n    \"\"\"Rearrange array in alternating positive and negative items.\n\n    Args:\n        arr (array): given array.\n\n    Returns:\n        array: array in alternating positive and negative items.\n    \"\"\"\n\n    if not arr:\n        return arr\n\n    pos_index, neg_index = 0, len(arr) - 1\n\n    while pos_index < neg_index:\n        if arr[pos_index] >= 0:\n            pos_index += 1\n            continue\n\n        if arr[neg_index] <= 0:\n            neg_index -= 1\n            continue\n\n        arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n\n        pos_index += 1\n        neg_index -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array(array(\"I\", [1, 2, 3, -4, 5])) == array(\"I\", [-4, 1, 5, 2, 3])\n    assert rearrange_array(array(\"I\", [1, 2, -3, 4, 5])) == array(\"I\", [-3, 1, 5, 2, 4])\n    assert rearrange_array(array(\"I\", [1, -2, 3, -4, 5])) == array(\"I\", [-4, 1, 5, -2, 3])\n    assert rearrange_array(array(\"I\", [1, -2, 3, 4, -5])) == array(\"I\", [4, -5, 1, -2, 3])\n    assert rearrange_array(array(\"I\", [1, -2])) == array(\"I\", [-2, 1])",
      -6.51953125
    ],
    [
      "from array import array\nfrom typing import List\n\n\ndef rearrange_alternating_positive_and_negative(nums: List[int]) -> List[int]:\n    \"\"\"\n    :param nums: input array\n    :return: rearrange array alternating positive and negative\n    >>> nums = [1, 2, 3, -4, 5, -6]\n    >>> rearrange_alternating_positive_and_negative(nums)\n    [-4, 1, -6, 2, 5, 3]\n    \"\"\"\n    negative_items = array(\"i\", [])\n    positive_items = array(\"i\", [])\n\n    for item in nums:\n        if item < 0:\n            negative_items.append(item)\n        else:\n            positive_items.append(item)\n\n    return list(negative_items + positive_items)\n\n\ndef test_arrange_alternating_positive_and_negative():\n    \"\"\"\n    >>> test_arrange_alternating_positive_and_negative()\n    \"\"\"\n    assert rearrange_alternating_positive_and_negative([1, 2, 3, -4, 5, -6]) == [-4, 1, -6, 2, 5, 3]\n    assert rearrange_alternating_positive_and_negative([-1, -2, -3, 4, -5, 6]) == [4, -1, 6, -2, -5, -3]\n    assert rearrange_alternating_positive_and_negative([]) == []\n    assert rearrange_alternating_positive_and_negative([-1]) == [-1]\n    assert rearrange_alternating_positive_and_negative([-1, 1]) == [-1, 1]\n    assert rearrange_alternating_positive_and_negative([-1, 1, 0]) == [-1, 0, 1]\n    assert rearrange_alternating_positive_and_negative([-1, 1, 0, -2, 2]) == [-2, -1, 0, 2, 1]",
      -6.875
    ],
    [
      "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rearrange_array(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n\n    i = 0\n    while i < len(nums):\n        if i % 2 == 0 and nums[i] >= 0:\n            j = i + 1\n            while j < len(nums) and nums[j] >= 0:\n                j += 1\n            nums[i], nums[j - 1] = nums[j - 1], nums[i]\n        i += 1\n\n    return nums\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rearrange_array2(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n\n    i = 0\n    while i < len(nums):\n        if i % 2 == 0 and nums[i] >= 0:\n            j = i + 1\n            while j < len(nums) and nums[j] >= 0:\n                j += 1\n            nums[i], nums[j - 1] = nums[j - 1], nums[i]\n        i += 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    # Test 1\n    print(rearrange_array([1, 2, 3, -4, 5]))\n    print(rearrange_array2([1, 2, 3, -4, 5]))\n\n    # Test 2\n    print(rearrange_array([-1, -2, -3, 4, 5]))\n    print(rearrange_array2([-1, -2, -3, 4, 5]))\n\n    # Test 3\n    print(rearrange_array([]))\n    print(rearrange_array2([]))\n\n    # Test 4\n    print(rearrange_array([1, 2, 3,",
      -7.5625
    ],
    [
      "from array import array\nfrom typing import List\n\n\ndef rearrange_alternating_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def _find_index(arr: List[int], start: int, end: int) -> int:\n        if start > end:\n            return -1\n\n        mid = (start + end) // 2\n\n        if mid == 0:\n            return mid\n\n        if arr[mid] < 0:\n            return _find_index(arr, mid + 1, end)\n        else:\n            return _find_index(arr, start, mid - 1)\n\n    def _swap(arr: List[int], start: int, end: int):\n        arr[start], arr[end] = arr[end], arr[start]\n\n    size = len(arr)\n\n    if size == 0:\n        return arr\n\n    if size == 1:\n        return [arr[0]]\n\n    if size == 2:\n        return [arr[1], arr[0]]\n\n    index = _find_index(arr, 0, size - 1)\n\n    if index == -1:\n        return arr\n\n    _swap(arr, 0, index)\n\n    if index == 0:\n        return [arr[0], arr[1], *arr[2:]]\n\n    return [*arr[1:index + 1], arr[0], *arr[index + 1:]]\n\n\nif __name__ == \"__main__\":\n    assert rearrange_alternating_positive_negative([1, -2, 3, -4, 5, -6, 7, -8]) == [-2, 1, -4, 3, -6, 5, -8, 7]\n    assert rearrange_alternating_positive_negative([-1, 2, -3, 4, -5, 6, -7, 8]) == [-1, 2, -3, 4, -5, 6, -7,",
      -7.6640625
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    First, find the index of the first positive element.\n    Then, find the index of the first negative element.\n    Now, swap the elements at these indexes.\n    Repeat this until all negative elements are at the right of the positive elements.\n    \"\"\"\n    if not arr:\n        return []\n\n    pos_index = 0\n    neg_index = 1\n\n    while neg_index < len(arr):\n        if arr[pos_index] < 0 and arr[neg_index] > 0:\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n            pos_index += 2\n            neg_index += 2\n        elif arr[pos_index] < 0:\n            pos_index += 1\n        elif arr[neg_index] > 0:\n            neg_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([]) == []\n    assert rearrange_array([1, -2, 3, -4, 5]) == [-2, 1, -4, 3, 5]\n    assert rearrange_array([-1, 2, -3, 4, -5]) == [2, -1, 4, -3, -5]\n    assert rearrange_array([-5, -3, -1, 1, 3, 5]) == [-3, -1, 1, 3, -5, 5]\n    assert rearrange_array([1, -2, 3, 4, 5, -6, -7, 8, 9, 10, -11, 12, -13, 14]) == [\n        -2,\n        1,\n        3,\n        4,\n        5,\n        -6,\n        -11,\n        8,\n        9,\n        10,\n        12,\n        14,\n        -7,\n        -13,\n    ]",
      -7.8515625
    ],
    [
      "from typing import List\n\n\ndef rearrange_pos_neg(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def partition(arr: List[int], start: int, end: int) -> int:\n        pivot = start\n        while start < end:\n            if arr[start] < 0:\n                arr[start], arr[pivot] = arr[pivot], arr[start]\n                pivot += 1\n            start += 1\n        return pivot\n\n    def quick_sort(arr: List[int], start: int, end: int) -> None:\n        if start >= end:\n            return\n        pivot = partition(arr, start, end)\n        quick_sort(arr, start, pivot - 1)\n        quick_sort(arr, pivot, end)\n\n    quick_sort(arr, 0, len(arr) - 1)\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_pos_neg([1, 2, -3, 4, -5]) == [-5, 1, -3, 4, 2]",
      -8.1484375
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating_positive_negative(array: List[int]) -> List[int]:\n    \"\"\"Alternating positive and negative integers.\n\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n\n    length = len(array)\n\n    if length < 2:\n        return array\n\n    # Use two pointers to swap the items\n    # Use two pointers to swap the items\n    i, j = 0, length - 1\n\n    while i < j:\n        if array[i] < 0 < array[j]:\n            array[i], array[j] = array[j], array[i]\n\n        if array[i] >= 0:\n            i += 1\n\n        if array[j] <= 0:\n            j -= 1\n\n    return array\n\n\nif __name__ == \"__main__\":\n    assert arrange_alternating_positive_negative([1, 2, 3, -4, -1, -5, 6, -7]) == [-7, 1, -5, 6, 3, -4, -1, 2]",
      -9.015625
    ],
    [
      "from typing import List\n\n\ndef arrange_alternating_positive_negative(arr: List[int]) -> List[int]:\n    \"\"\"Find the index of the first positive number, then append all negative numbers\n    before the first positive and vice versa.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    length = len(arr)\n\n    if length < 2:\n        return arr\n\n    # Find the index of the first positive number\n    pos_index = 0\n    for i in range(length):\n        if arr[i] > 0:\n            pos_index = i\n            break\n\n    # Arrange the array\n    pos_index += 1\n    neg_index = 0\n    while pos_index < length and neg_index < length:\n        if arr[pos_index] < 0 and arr[neg_index] > 0:\n            arr[pos_index], arr[neg_index] = arr[neg_index], arr[pos_index]\n\n        if arr[pos_index] > 0:\n            pos_index += 1\n        elif arr[neg_index] < 0:\n            neg_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert arrange_alternating_positive_negative([1, -2, 3, -4, 5, -6, 7]) == [-2, 1, -4, 3, -6, 5, -7]",
      -9.078125
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    i: int = 0\n    j: int = len(arr) - 1\n\n    while i < j:\n        if arr[i] >= 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0:\n            i += 1\n        else:\n            j -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([3, -4, 1, 5, -6, 2]) == [-4, 3, -6, 1, 5, 2]",
      -9.2578125
    ],
    [
      "def rearrange_array(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        else:\n            i += 1\n\n    return arr\n\n\ndef test(input_data, expected_answer):\n    answer = rearrange_array(input_data)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Wrong answer {answer}. Expected answer was {expected_answer}.\"\n        )\n\n\nif __name__ == \"__main__\":\n    test([1, 2, 3, -4, -1, -6, 8, 9], [-4, 3, -1, 2, 9, 8, -6, 1])\n    test([1, 2, 3, 4, 5, 6], [1, -2, 3, -4, 5, -6])\n    test([-1, -2, -3, -4, -5, -6], [-1, 2, -3, 4, -5, 6])\n    print(\"All tests passed!\")",
      -9.8046875
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n\n        if arr[left] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, 5]) == [-4, 1, 5, 2, 3]\n    assert rearrange_array([1, 2, -3, 4, 5]) == [-3, 1, 5, 2, 4]\n    assert rearrange_array([-1, -2, 3, 4, 5]) == [4, -2, 5, -1, 3]",
      -10.421875
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"Re-arrange the given array in alternating positive and negative items.\n\n    Args:\n        arr (List[int]): Input array.\n\n    Examples:\n        >>> rearrange_array([1, 2, 3, 4, -1, -2, -3, -4])\n        [-1, 1, -2, 2, -3, 3, -4, 4]\n        >>> rearrange_array([1, -1, 2, -2, 3, -3, 4, -4])\n        [-1, 1, -2, 2, -3, 3, -4, 4]\n        >>> rearrange_array([1, 2, -2, 2, -1, 0])\n        [-1, 1, -2, 2, 0, 2]\n    \"\"\"\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] >= 0:\n            i += 1\n        if arr[j] <= 0:\n            j -= 1\n\n        arr[i], arr[j] = arr[j], arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rearrange_array([1, 2, 3, 4, -1, -2, -3, -4]))\n    print(rearrange_array([1, -1, 2, -2, 3, -3, 4, -4]))\n    print(rearrange_array([1, 2, -2, 2, -1, 0]))",
      -11.015625
    ],
    [
      "from typing import List\n\n\ndef rearrange_alternating_positive_negative(input_list: List) -> List:\n    \"\"\"\n    Re-arrange alternating positive and negative items.\n    :param input_list: list of integers\n    :return: list of integers\n    >>> input_list = [1, 2, 3, -4, -1, 4]\n    >>> rearrange_alternating_positive_negative(input_list) == [-4, 1, -1, 2, 3, 4]\n    True\n    >>> input_list = [1, 2, 3, 4, 5]\n    >>> rearrange_alternating_positive_negative(input_list) == [1, -1, 2, -2, 3, -3, 4, -4, 5]\n    True\n    >>> input_list = [-1, -2, -3, -4, -5]\n    >>> rearrange_alternating_positive_negative(input_list) == [-1, 1, -2, 2, -3, 3, -4, 4, -5]\n    True\n    >>> input_list = [1, -2, 3, -4, -1, 4]\n    >>> rearrange_alternating_positive_negative(input_list) == [-2, 1, -1, 3, 2, 4]\n    True\n    >>> input_list = [-1, 2, -3, 4, -5]\n    >>> rearrange_alternating_positive_negative(input_list) == [-1, -3, 2, 4, -5]\n    True\n    >>> input_list = [1, 2, 3, 4, 5, 6]\n    >>> rearrange_alternating_positive_negative(input_list) == [-1, 2, -3, 4, -5, 6]\n    True\n    >>> input_list = [1, 2, 3, 4, 5, 6, 7]\n    >>> rearrange_alternating_positive_negative(input_list) == [-1, 2,",
      -11.1875
    ],
    [
      "def arrange_alternating_positive_and_negative(array):\n    \"\"\"\n    >>> arrange_alternating_positive_and_negative([-4, 2, -3, 5, -2])\n    [-4, 5, 2, -3, -2]\n    >>> arrange_alternating_positive_and_negative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\n    >>> arrange_alternating_positive_and_negative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [1, -2, 3, -4, 5, -6, 7, -8, -9]\n    \"\"\"\n    n = len(array)\n    if n == 1:\n        return array\n\n    if n % 2 == 0:\n        for i in range(0, n, 2):\n            array[i], array[i + 1] = array[i + 1], array[i]\n    else:\n        for i in range(0, n - 1, 2):\n            array[i], array[i + 1] = array[i + 1], array[i]\n\n    return array\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -12.0234375
    ],
    [
      "from typing import List\n\n\ndef rearrange_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    length = len(arr)\n\n    if length < 2:\n        return arr\n\n    pos_start = 0\n    neg_start = length - 1\n\n    while pos_start < neg_start:\n        if arr[pos_start] >= 0 and arr[neg_start] < 0:\n            arr[pos_start], arr[neg_start] = arr[neg_start], arr[pos_start]\n        elif arr[pos_start] < 0:\n            pos_start += 1\n        elif arr[neg_start] >= 0:\n            neg_start -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert rearrange_array([1, 2, 3, -4, -1]) == [-4, 1, -1, 2, 3]\n    assert rearrange_array([]) == []\n    assert rearrange_array([1]) == [1]\n    assert rearrange_array([-1, -2, -3, -4]) == [-4, -3, -2, -1]\n    assert rearrange_array([1, 2, -3, -4]) == [-4, 1, -3, 2]\n    assert rearrange_array([1, 2, 3, 4]) == [1, -4, 2, -3, 3, 4]",
      -12.1328125
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef arrange_alternating(nums: List[int]) -> List[int]:\n    \"\"\"\n    :param nums: given array\n    :return: re-arranged array\n    >>> arrange_alternating([1, 2, 3, -4, -1, -6])\n    [-4, 1, -1, 2, 3, -6]\n    >>> arrange_alternating([1, -1])\n    [1, -1]\n    >>> arrange_alternating([-1, 1])\n    [-1, 1]\n    >>> arrange_alternating([-4, 2, 3, 1, -1, 6])\n    [-4, 2, 1, -1, 3, 6]\n    \"\"\"\n    if len(nums) <= 1:\n        return nums\n\n    # find the pivot index\n    pivot_index = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            pivot_index = i\n            break\n\n    # use 2 pointers to swap the positive and negative items\n    # negative_index = i, positive_index = i - 1\n    negative_index, positive_index = pivot_index, pivot_index - 1\n    while negative_index >= 0 and positive_index < len(nums):\n        nums[negative_index], nums[positive_index] = nums[positive_index], nums[negative_index]\n        negative_index -= 1\n        positive_index += 1\n\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -13.8828125
    ],
    [
      "from typing import List\n\n\ndef rearrange_alternating_positive_and_negative_items(nums: List[int]) -> List[int]:\n    \"\"\"\n    Re-arrange the given array in alternating positive and negative items.\n    :param nums: List[int]\n    :return: List[int]\n    >>> nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    >>> rearrange_alternating_positive_and_negative_items(nums)\n    [1, -2, 3, -4, 5, -6, 7, -8]\n    >>> nums = [1, -2, 3, 4, -5, 6, -7, 8]\n    >>> rearrange_alternating_positive_and_negative_items(nums)\n    [1, -2, 3, -4, 5, -6, 7, -8]\n    >>> nums = [0, 0, 0, 0]\n    >>> rearrange_alternating_positive_and_negative_items(nums)\n    [0, 0, 0, 0]\n    >>> nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> rearrange_alternating_positive_and_negative_items(nums)\n    [1, -2, 3, -4, 5, -6, 7, -8, 9]\n    \"\"\"\n    i, j = 0, len(nums) - 1\n    while i < j:\n        nums[i], nums[j] = nums[j], nums[i]\n        i += 2\n        j -= 2\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -16.0625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}