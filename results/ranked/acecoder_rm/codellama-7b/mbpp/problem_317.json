{
  "problem": {
    "task_id": "MBPP/328",
    "prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
    "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
    "test_list": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ],
    "challenge_test_list": [],
    "problem_id": 317
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def left_rotate(nums, k):\n    \"\"\"\n    >>> left_rotate([1,2,3,4,5], 2)\n    [4, 5, 1, 2, 3]\n\n    >>> left_rotate([1,2,3,4,5], 3)\n    [3, 4, 5, 1, 2]\n\n    >>> left_rotate([1,2,3,4,5], 0)\n    [1, 2, 3, 4, 5]\n\n    >>> left_rotate([1,2,3,4,5], 10)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    k %= len(nums)\n    return nums[k:] + nums[:k]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.3828125
    ],
    [
      "def rotate_left(lst, num):\n    \"\"\"\n    :param lst: list of items\n    :param num: number of items to rotate\n    :return: rotated list\n    \"\"\"\n    return lst[num:] + lst[:num]\n\n\ndef test_function(test_case):\n    output = rotate_left(test_case[0], test_case[1])\n    print(output)\n    if output == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\nlist_of_cases = [[[1, 2, 3, 4, 5], 2, [4, 5, 1, 2, 3]],\n                 [[1, 2, 3, 4, 5], 3, [3, 4, 5, 1, 2]],\n                 [[1, 2, 3, 4, 5], 5, [1, 2, 3, 4, 5]],\n                 [[1, 2, 3, 4, 5], 6, [1, 2, 3, 4, 5]],\n                 [[1, 2, 3, 4, 5], 0, [1, 2, 3, 4, 5]],\n                 [[], 1, []],\n                 [[], 0, []],\n                 [[1], 0, [1]],\n                 [[1], 1, [1]]]\n\nfor test_case in list_of_cases:\n    test_function(test_case)",
      9.75
    ],
    [
      "from typing import List\n\n\ndef rotate_left(lst: List, num: int) -> List:\n    \"\"\"\n    >>> lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> rotate_left(lst, 3)\n    [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\n    >>> rotate_left(lst, 10)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> rotate_left(lst, 15)\n    [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n    >>> rotate_left(lst, 100)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> rotate_left(lst, 0)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    if not lst:\n        return []\n    return lst[num:] + lst[:num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.328125
    ],
    [
      "def rotate(a_list, num):\n    if not a_list or num == 0:\n        return a_list\n\n    if num < 0:\n        num = num % len(a_list)\n\n    return a_list[num:] + a_list[:num]\n\n\ndef main():\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 3))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], -2))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 0))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 7))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 8))\n    print(rotate(None, 7))\n\n\nif __name__ == '__main__':\n    main()",
      8.9296875
    ],
    [
      "from typing import List\n\n\ndef left_rotate_list(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return []\n\n    n = len(arr)\n    k %= n\n\n    for i in range(k):\n        temp = arr[0]\n\n        for j in range(n - 1):\n            arr[j] = arr[j + 1]\n\n        arr[-1] = temp\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert left_rotate_list([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\n    assert left_rotate_list([1, 2, 3, 4, 5], 4) == [3, 4, 5, 1, 2]\n    assert left_rotate_list([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\n    assert left_rotate_list([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n    assert left_rotate_list([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
      8.5546875
    ],
    [
      "def rotate_list(input_list, num):\n    return input_list[num:] + input_list[:num]\n\n\ndef main():\n    print(\"The list of numbers is : \" + str(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)))\n\n\nif __name__ == \"__main__\":\n    main()",
      7.4140625
    ],
    [
      "from typing import List\n\n\ndef rotate_list(lst: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(lst) == 0 or k <= 0:\n        return lst\n\n    k = k % len(lst)\n\n    return lst[k:] + lst[:k]\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5], 3))\n    print(rotate_list([1, 2, 3, 4, 5], 0))\n    print(rotate_list([1, 2, 3, 4, 5], 4))\n    print(rotate_list([1, 2, 3, 4, 5], 5))\n    print(rotate_list([1, 2, 3, 4, 5], 6))\n    print(rotate_list([1, 2, 3, 4, 5], 7))",
      6.6328125
    ],
    [
      "from typing import List\n\n\ndef left_rotate(lst: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    length = len(lst)\n    if length == 0:\n        return []\n\n    k = k % length\n    if k == 0:\n        return lst\n\n    return lst[k:] + lst[:k]\n\n\nif __name__ == \"__main__\":\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 3) == [5, 6, 7, 1, 2, 3, 4]\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 0) == [1, 2, 3, 4, 5, 6, 7]\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 1) == [2, 3, 4, 5, 6, 7, 1]\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 2) == [3, 4, 5, 6, 7, 1, 2]\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 7) == [1, 2, 3, 4, 5, 6, 7]\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 8) == [1, 2, 3, 4, 5, 6, 7]",
      6.62109375
    ],
    [
      "def left_rotate(list, rotations):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    length = len(list)\n    rotations = rotations % length\n\n    while rotations > 0:\n        list.append(list.pop(0))\n        rotations -= 1\n\n    return list\n\n\ndef test_left_rotate():\n    \"\"\"Test for left_rotate function.\"\"\"\n    assert left_rotate([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\n    assert left_rotate([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n    assert left_rotate([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n\n\nif __name__ == '__main__':\n    test_left_rotate()",
      6.38671875
    ],
    [
      "def rotate_left(arr, n):\n    \"\"\"\n    Rotate an array by n positions to the left\n    \"\"\"\n    n = n % len(arr)\n    if n == 0:\n        return arr\n    return arr[n:] + arr[:n]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert rotate_left(arr, 0) == arr\n    assert rotate_left(arr, 1) == [2, 3, 4, 5, 6, 7, 8, 9, 1]\n    assert rotate_left(arr, 9) == [9, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert rotate_left(arr, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert rotate_left(arr, 8) == [8, 9, 1, 2, 3, 4, 5, 6, 7]\n    assert rotate_left(arr, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert rotate_left(arr, 20) == [9, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert rotate_left(arr, 12) == [3, 4, 5, 6, 7, 8, 9, 1, 2]\n    assert rotate_left(arr, 2) == [3, 4, 5, 6, 7, 8, 9, 1, 2]",
      5.86328125
    ],
    [
      "def rotate_list(list_to_rotate, number_of_items_to_rotate):\n    \"\"\"\n    >>> rotate_list([1,2,3,4,5,6,7], 2)\n    [3, 4, 5, 6, 7, 1, 2]\n    >>> rotate_list([1,2,3,4,5,6,7], 3)\n    [4, 5, 6, 7, 1, 2, 3]\n    >>> rotate_list([1,2,3,4,5,6,7], 4)\n    [5, 6, 7, 1, 2, 3, 4]\n    >>> rotate_list([1,2,3,4,5,6,7], 5)\n    [6, 7, 1, 2, 3, 4, 5]\n    >>> rotate_list([1,2,3,4,5,6,7], 6)\n    [7, 1, 2, 3, 4, 5, 6]\n    >>> rotate_list([1,2,3,4,5,6,7], 7)\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> rotate_list([1,2,3,4,5,6,7], 8)\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> rotate_list([1,2,3,4,5,6,7], 0)\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> rotate_list([1,2,3,4,5,6,7], -1)\n    [1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    return list_to_rotate[number_of_items_to_rotate:] + list_to_rotate[:number_of_items_to_rotate]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.",
      5.796875
    ],
    [
      "from array import array\nfrom typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rotate_list_by_n_left(input_list: List[int], n: int) -> List[int]:\n    if len(input_list) == 0 or n == 0:\n        return input_list\n\n    n = n % len(input_list)\n    if n == 0:\n        return input_list\n\n    left = input_list[:-n]\n    right = input_list[-n:]\n\n    return right + left\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rotate_list_by_n_right(input_list: List[int], n: int) -> List[int]:\n    if len(input_list) == 0 or n == 0:\n        return input_list\n\n    n = n % len(input_list)\n    if n == 0:\n        return input_list\n\n    return input_list[-n:] + input_list[:-n]\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef rotate_list_by_n_left_inplace(input_list: List[int], n: int) -> List[int]:\n    if len(input_list) == 0 or n == 0:\n        return input_list\n\n    n = n % len(input_list)\n    if n == 0:\n        return input_list\n\n    return input_list[n:] + input_list[:n]\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef rotate_list_by_n_right_inplace(input_list: List[int], n: int) -> List[int]:\n    if len(input_list) == 0 or n == 0:\n        return input_list\n\n    n = n % len(input_list)\n    if n == 0:\n        return input_list\n\n    input_list.extend(input_list[:-n])\n    del input_list[:-n]\n\n    return input_list",
      5.31640625
    ],
    [
      "from typing import List\n\n\ndef rotate_left(arr: List[int], num: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    n = len(arr)\n    num = num % n\n    if num == 0:\n        return arr\n\n    return arr[n - num :] + arr[: n - num]\n\n\nif __name__ == \"__main__\":\n    arr: List[int] = []\n    num: int = 0\n    print(rotate_left(arr, num))\n\n    arr = [1, 2, 3, 4, 5]\n    num = 2\n    print(rotate_left(arr, num))\n\n    arr = [1, 2, 3, 4, 5]\n    num = 5\n    print(rotate_left(arr, num))",
      5.296875
    ],
    [
      "def rotate_list(lst, k):\n    \"\"\"\n    Rotate a list by k items to the left.\n    \"\"\"\n    if k == 0:\n        return lst\n    if k > len(lst):\n        k = k % len(lst)\n    return lst[k:] + lst[:k]\n\ndef test_rotate_list():\n    \"\"\"\n    >>> test_rotate_list()\n    \"\"\"\n    assert rotate_list([1,2,3,4,5,6,7,8,9], 3) == [4,5,6,7,8,9,1,2,3]\n    assert rotate_list([1,2,3,4,5,6,7,8,9], 10) == [9,1,2,3,4,5,6,7,8]\n    assert rotate_list([1,2,3,4,5,6,7,8,9], 0) == [1,2,3,4,5,6,7,8,9]\n    assert rotate_list([1,2,3,4,5,6,7,8,9], 9) == [9,1,2,3,4,5,6,7,8]\n    assert rotate_list([1,2,3,4,5,6,7,8,9], 10) == [1,2,3,4,5,6,7,8,9]\n\nif __name__ == '__main__':\n    test_rotate_list()",
      5.26953125
    ],
    [
      "def left_rotate(arr, n):\n    \"\"\"\n    :param: arr - list of integers\n    :param: n - number of items to be rotated\n    return - updated list after rotating\n    \"\"\"\n    if not arr:\n        return None\n\n    n = n % len(arr)\n    return arr[n:] + arr[:n]\n\n\ndef test_function(test_case):\n    output = left_rotate(test_case[0], test_case[1])\n    print(output)\n    if output == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [[1, 2, 3, 4, 5], 2, [4, 5, 1, 2, 3]]\ntest_function(test_case_1)\n\ntest_case_2 = [[], 2, None]\ntest_function(test_case_2)\n\ntest_case_3 = [[1, 2, 3, 4, 5], 6, [1, 2, 3, 4, 5]]\ntest_function(test_case_3)",
      4.46875
    ],
    [
      "from timeit import default_timer as timer\n\n\ndef rotate(lst: list, n: int) -> list:\n    return lst[n:] + lst[:n]\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    assert rotate([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\n    assert rotate([1, 2, 3, 4, 5], 4) == [3, 4, 5, 1, 2]\n    assert rotate([1, 2, 3, 4, 5], 10) == [5, 1, 2, 3, 4]\n    assert rotate([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n    assert rotate([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]\n    assert rotate([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n    assert rotate([1, 2, 3, 4, 5], -2) == [4, 5, 1, 2, 3]\n    assert rotate([1, 2, 3, 4, 5], -4) == [3, 4, 5, 1, 2]\n    assert rotate([1, 2, 3, 4, 5], -10) == [5, 1, 2, 3, 4]\n    print(f\"Time: {timer() - start}\")",
      4.2109375
    ],
    [
      "from typing import List\n\n\ndef left_rotate(lst: List, k: int) -> List:\n    \"\"\"\n    Time Complexity: O(k)\n    Space Complexity: O(k)\n    \"\"\"\n    if not lst:\n        return lst\n\n    if len(lst) == 1:\n        return lst\n\n    if k == 0:\n        return lst\n\n    k = k % len(lst)\n\n    return lst[k:] + lst[:k]\n\n\nif __name__ == \"__main__\":\n    print(left_rotate([1, 2, 3, 4, 5, 6, 7], 2))\n    print(left_rotate([1, 2, 3, 4, 5, 6, 7], 4))\n    print(left_rotate([1, 2, 3, 4, 5, 6, 7], 7))\n    print(left_rotate([1, 2, 3, 4, 5, 6, 7], 0))\n    print(left_rotate([1, 2, 3, 4, 5, 6, 7], 1))\n    print(left_rotate([1, 2, 3, 4, 5, 6, 7], 3))",
      3.974609375
    ],
    [
      "def rotate_list(arr, num):\n    if len(arr) == 0:\n        return arr\n    if num >= len(arr):\n        num = num % len(arr)\n    if num == 0:\n        return arr\n\n    return arr[num:] + arr[:num]\n\n\nprint(rotate_list([1, 2, 3, 4, 5], 1))\nprint(rotate_list([1, 2, 3, 4, 5], 10))\nprint(rotate_list([1, 2, 3, 4, 5], 5))\nprint(rotate_list([1, 2, 3, 4, 5], 20))\nprint(rotate_list([1, 2, 3, 4, 5], 0))\nprint(rotate_list([1, 2, 3, 4, 5], 100))",
      3.89453125
    ],
    [
      "from typing import List\n\n\ndef left_rotate(arr: List[int], num: int) -> List[int]:\n    if num < 0 or len(arr) == 0:\n        return arr\n\n    for _ in range(num):\n        arr.append(arr[0])\n        del arr[0]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(left_rotate([1, 2, 3, 4, 5], 2))\n    print(left_rotate([1, 2, 3, 4, 5], 3))\n    print(left_rotate([1, 2, 3, 4, 5], 0))\n    print(left_rotate([1, 2, 3, 4, 5], 1))\n    print(left_rotate([1, 2, 3, 4, 5], 5))",
      3.654296875
    ],
    [
      "def left_rotate(array, num):\n    if num == 0:\n        return array\n\n    # rotate all items to the left\n    return array[num:] + array[:num]\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6]\n    print(left_rotate(nums, 2))",
      3.208984375
    ],
    [
      "from array import array\n\n\ndef rotate_list(lst: array, n: int) -> array:\n    \"\"\"\n    rotate list by specified number of items to the left direction.\n    :param lst: list of items\n    :param n: number of items to rotate\n    :return: rotated list\n    >>> rotate_list(array('I', [1, 2, 3, 4, 5, 6, 7]), 2)\n    array('I', [3, 4, 5, 6, 7, 1, 2])\n    >>> rotate_list(array('I', [1, 2, 3, 4, 5, 6, 7]), 5)\n    array('I', [6, 7, 1, 2, 3, 4, 5])\n    >>> rotate_list(array('I', [1, 2, 3, 4, 5, 6, 7]), 7)\n    array('I', [4, 5, 6, 7, 1, 2, 3])\n    >>> rotate_list(array('I', [1, 2, 3, 4, 5, 6, 7]), 0)\n    array('I', [1, 2, 3, 4, 5, 6, 7])\n    \"\"\"\n    if not lst or n == 0:\n        return lst\n\n    n = n % len(lst)\n\n    return lst[n:] + lst[:n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.673828125
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef left_rotation(lst: List[int], num: int) -> List[int]:\n    if num == 0 or num >= len(lst):\n        return lst\n\n    return lst[num:] + lst[:num]\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef left_rotation_2(lst: List[int], num: int) -> List[int]:\n    if num == 0 or num >= len(lst):\n        return lst\n\n    return lst[num:] + lst[:num]\n\n\nif __name__ == \"__main__\":\n    print(left_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(left_rotation_2([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
      2.623046875
    ],
    [
      "from typing import List\n\n\ndef rotate_list(arr: List, num: int) -> List:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if num == 0:\n        return arr\n\n    n = len(arr)\n\n    if num < 0:\n        num = n + num\n\n    return arr[num:] + arr[:num]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    assert rotate_list(arr, 0) == arr\n    assert rotate_list(arr, 1) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\n    assert rotate_list(arr, 2) == [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    assert rotate_list(arr, 3) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\n    assert rotate_list(arr, 4) == [5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert rotate_list(arr, 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n    assert rotate_list(arr, 6) == [7, 8, 9, 10, 1, 2, 3, 4, 5, 6]\n    assert rotate_list(arr, 7) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert rotate_list(arr, 8) == [9, 10, 1, 2, 3, 4, 5, 6, 7,",
      2.033203125
    ],
    [
      "from typing import List\n\n\ndef left_rotate(arr: List[int], num: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(arr)\n    num = num % n\n    return arr[num:] + arr[:num]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    num = 2\n    print(left_rotate(arr, num))\n\n    arr = [1, 2, 3, 4, 5]\n    num = 0\n    print(left_rotate(arr, num))\n\n    arr = [1, 2, 3, 4, 5]\n    num = 5\n    print(left_rotate(arr, num))\n\n    arr = [1, 2, 3, 4, 5]\n    num = 10\n    print(left_rotate(arr, num))",
      2.0234375
    ],
    [
      "def left_rotation(lst, rotations):\n    \"\"\"\n    >>> left_rotation([1, 2, 3, 4, 5], 2)\n    [4, 5, 1, 2, 3]\n\n    >>> left_rotation([1, 2, 3, 4, 5], 4)\n    [3, 4, 5, 1, 2]\n\n    >>> left_rotation([1, 2, 3, 4, 5], 10)\n    [5, 1, 2, 3, 4]\n    \"\"\"\n    if len(lst) == 1:\n        return lst\n\n    return lst[rotations:] + lst[:rotations]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.953125
    ],
    [
      "from typing import List\n\n\ndef rotate_left(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    >>> rotate_left([1,2,3,4,5], 2)\n    [4, 5, 1, 2, 3]\n    \"\"\"\n    n = len(nums)\n    k = k % n\n    return nums[-k:] + nums[:-k]\n\n\ndef rotate_left_eff(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    >>> rotate_left_eff([1,2,3,4,5], 2)\n    [4, 5, 1, 2, 3]\n    \"\"\"\n    n = len(nums)\n    k = k % n\n    return nums[-k:] + nums[:-k][::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.90625
    ],
    [
      "from typing import List\n\n\ndef left_rotate(arr: List[int], num: int) -> List[int]:\n    \"\"\"\n    Inplace left rotation of array.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr or len(arr) == 0:\n        return []\n\n    n = len(arr)\n    num %= n\n\n    while num > 0:\n        temp = arr[n - 1]\n        for i in range(n - 2, -1, -1):\n            arr[i + 1] = arr[i]\n        arr[0] = temp\n        num -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7, 8], 3) == [5, 6, 7, 8, 1, 2, 3, 4]",
      1.705078125
    ],
    [
      "def rotate_list(l, k):\n    if k == 0:\n        return l\n\n    n = len(l)\n    k = k % n\n\n    return l[k:] + l[:k]\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 3))",
      1.4404296875
    ],
    [
      "def rotate_list(lst, k):\n    return lst[k:] + lst[:k]\n\n\nprint(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\nprint(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\nprint(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0))",
      1.23828125
    ],
    [
      "from typing import List\n\n\ndef rotate(lst: List, k: int) -> List:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param lst: list to rotate\n    :param k: number of items to rotate\n    :return: rotated list\n    \"\"\"\n\n    def rotate_left(lst: List, k: int) -> List:\n        return lst[k:] + lst[:k]\n\n    return rotate_left(lst, k % len(lst))\n\n\nif __name__ == \"__main__\":\n    print(rotate([1, 2, 3, 4, 5], 1))",
      1.2021484375
    ],
    [
      "from typing import List\n\n\ndef rotate_list(lst: List, num_items: int) -> List:\n    \"\"\"Rotates a list by `num_items` to the left.\n\n    Args:\n        lst: list to rotate\n        num_items: number of items to rotate the list\n\n    Returns:\n        rotated list\n    \"\"\"\n    # check if list is empty\n    if not lst:\n        return lst\n\n    # check if number of items is greater than length of list\n    if num_items > len(lst):\n        num_items = num_items % len(lst)\n\n    # check if number of items to rotate is less than zero\n    if num_items < 0:\n        return lst\n\n    # rotate the list\n    return lst[num_items:] + lst[:num_items]\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    num_items = 2\n\n    print(rotate_list(lst, num_items))",
      0.9970703125
    ],
    [
      "def rotate_list(list_of_items, number_of_rotations):\n    \"\"\"\n    >>> rotate_list([1,2,3,4,5,6,7,8,9], 2)\n    [3, 4, 5, 6, 7, 8, 9, 1, 2]\n    \"\"\"\n    return list_of_items[number_of_rotations:] + list_of_items[:number_of_rotations]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.97802734375
    ],
    [
      "def rotate(l, n):\n    \"\"\"\n    >>> rotate([1,2,3,4,5,6,7,8,9,10], 2)\n    [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    \"\"\"\n    if not n:\n        return l\n    if len(l) < n:\n        return l[n:] + l[:n]\n    return l[n:] + l[:n]\n\n\ndef rotate_inplace(l, n):\n    \"\"\"\n    >>> rotate_inplace([1,2,3,4,5,6,7,8,9,10], 2)\n    [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    \"\"\"\n    if not n:\n        return l\n    if len(l) < n:\n        return l[n:] + l[:n]\n    n = n % len(l)\n    l[:] = l[n:] + l[:n]\n    return l\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.8544921875
    ],
    [
      "from typing import List\n\n\ndef rotate_list(input_list: List, rotate_by: int) -> List:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    n = length of list\n    \"\"\"\n    if not input_list or len(input_list) == 0:\n        return input_list\n\n    if rotate_by == 0 or rotate_by == len(input_list):\n        return input_list\n\n    if rotate_by > 0:\n        return input_list[rotate_by:] + input_list[:rotate_by]\n\n    return input_list[len(input_list) + rotate_by:] + input_list[:len(input_list) + rotate_by]\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -1))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -10))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))",
      0.77685546875
    ],
    [
      "def rotate_left(arr, k):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    k = k % len(arr)\n    left = arr[:-k]\n    right = arr[-k:]\n    return right + left\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(rotate_left(arr, 3))\n\n\nif __name__ == '__main__':\n    main()",
      0.64111328125
    ],
    [
      "from copy import deepcopy\n\n\ndef left_rotation(lst, k):\n    if k == 0:\n        return lst\n    k = k % len(lst)\n    rotated = deepcopy(lst)\n    for i in range(len(lst)):\n        rotated[(i + k) % len(lst)] = lst[i]\n    return rotated\n\n\nif __name__ == \"__main__\":\n    assert left_rotation([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\n    assert left_rotation([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n    assert left_rotation([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\n    assert left_rotation([1, 2, 3, 4, 5], 4) == [5, 1, 2, 3, 4]",
      0.529296875
    ],
    [
      "def left_rotate_list(arr, k):\n    # first reverse the list\n    reverse_list(arr, 0, len(arr) - 1)\n\n    # reverse the first k elements\n    reverse_list(arr, 0, k - 1)\n\n    # reverse the rest of the elements\n    reverse_list(arr, k, len(arr) - 1)\n\n    return arr\n\n\ndef reverse_list(arr, start, end):\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n\n\nprint(left_rotate_list([1, 2, 3, 4, 5], 2))",
      0.1776123046875
    ],
    [
      "from typing import List\n\n\ndef left_rotate(l: List[int], n: int) -> List[int]:\n    \"\"\"Rotates list by n items to the left.\n\n    Args:\n        l (List[int]): list to rotate\n        n (int): number of items to rotate\n\n    Returns:\n        List[int]: rotated list\n    \"\"\"\n    return l[n:] + l[:n]\n\n\nif __name__ == \"__main__\":\n    print(left_rotate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))",
      0.1343994140625
    ],
    [
      "def rotate_list(list_input, num_rotations):\n    # Reverse the whole list\n    list_input.reverse()\n\n    # Reverse the first n items.\n    # n is the length of the list minus number of rotations\n    for i in range(len(list_input) - num_rotations):\n        list_input[i].reverse()\n\n    # Reverse the whole list again.\n    # This will reverse the first n items and rotate the rest of the items.\n    list_input.reverse()\n\n    return list_input\n\n\ndef main():\n    list_input = [1, 2, 3, 4, 5, 6, 7]\n    print(\"Input List: \" + str(list_input))\n    rotations = 2\n    print(\"Number of Rotations: \" + str(rotations))\n    print(\"Rotated List: \" + str(rotate_list(list_input, rotations)))\n\n\nif __name__ == '__main__':\n    main()",
      0.1300048828125
    ],
    [
      "def left_rotate(lst, n):\n    \"\"\"\n    Take a list and rotate it to the left by n items.\n    \"\"\"\n    # if n == 0, do nothing\n    if n == 0:\n        return lst\n\n    # if n is greater than the length of the list, rotate by the remainder\n    if n >= len(lst):\n        n = n % len(lst)\n\n    # if n is less than the length of the list, rotate by the number\n    return lst[n:] + lst[:n]\n\n\ndef test_rotate():\n    \"\"\"\n    >>> test_rotate()\n    \"\"\"\n    assert left_rotate([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\n    assert left_rotate([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n    assert left_rotate([1, 2, 3, 4, 5], 4) == [2, 3, 4, 5, 1]\n    assert left_rotate([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n    assert left_rotate([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]\n    assert left_rotate([1, 2, 3, 4, 5], 7) == [1, 2, 3, 4, 5]\n    assert left_rotate([1, 2, 3, 4, 5], 8) == [1, 2, 3, 4, 5]\n    assert left_rotate([1, 2, 3, 4, 5], 9) == [1, 2, 3, 4, 5]\n    assert left_rotate([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5]\n    assert left_rotate([",
      -0.07415771484375
    ],
    [
      "from typing import List\n\n\ndef left_rotate(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    n = len(arr)\n    k %= n\n\n    # reverse first k elements\n    left_reverse(arr, 0, k - 1)\n    # reverse last n - k elements\n    left_reverse(arr, k, n - 1)\n    # reverse first n - k elements\n    left_reverse(arr, 0, n - 1)\n\n    return arr\n\n\ndef left_reverse(arr: List[int], start: int, end: int) -> None:\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(left_rotate(arr, 3))\n    print(left_rotate(arr, 4))\n    print(left_rotate(arr, 5))\n    print(left_rotate(arr, 6))\n    print(left_rotate(arr, 7))",
      -0.120361328125
    ],
    [
      "from array import array\n\n\ndef left_rotate(items, k):\n    \"\"\"\n    :param items: List - list of items to rotate\n    :param k: integer - number of items to rotate\n    :return: List - list of items that have been rotated\n    \"\"\"\n    if not items:\n        return items\n\n    k = k % len(items)\n\n    return items[k:] + items[:k]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = left_rotate(test_input[0], test_input[1])\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([1, 2, 3, 4, 5], 2,))\ntest_function(([1, 2, 3, 4, 5], 3,))\ntest_function(([1, 2, 3, 4, 5], 5,))\ntest_function(([1, 2, 3, 4, 5], 6,))\ntest_function(([1, 2, 3, 4, 5], 7,))\ntest_function(([1, 2, 3, 4, 5], 10,))\ntest_function(([1, 2, 3, 4, 5], 0,))\ntest_function(([], 4,))\ntest_function(([1], 0,))\ntest_function(([], 100,))\ntest_function(([1], 100,))",
      -0.132568359375
    ],
    [
      "from array import array\n\n\ndef left_rotate(arr, n):\n    \"\"\"\n    Function to left rotate a list by n items.\n    :param arr: list of items\n    :param n: number of items to rotate by\n    :return: new rotated list\n    \"\"\"\n\n    if n == 0 or n == len(arr):\n        return arr\n\n    if n > 0:\n        return arr[n:] + arr[:n]\n    else:\n        return arr[len(arr) + n:] + arr[:len(arr) + n]\n\n\ndef left_rotate_array(arr, n):\n    \"\"\"\n    Function to left rotate a list by n items.\n    :param arr: list of items\n    :param n: number of items to rotate by\n    :return: new rotated list\n    \"\"\"\n\n    if n == 0 or n == len(arr):\n        return arr\n\n    if n > 0:\n        return array('i', arr[n:] + arr[:n])\n    else:\n        return array('i', arr[len(arr) + n:] + arr[:len(arr) + n])\n\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(left_rotate(array, 2))\n    print(left_rotate_array(array, 2))",
      -0.464111328125
    ],
    [
      "from typing import List\n\n\ndef rotate_left(arr: List[int], num_rotate: int) -> List[int]:\n    \"\"\"Rotate a list to the left by `num_rotate` items.\n\n    Args:\n        arr: List of items to rotate.\n        num_rotate: Number of items to rotate.\n\n    Examples:\n        >>> assert rotate_left([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\n        >>> assert rotate_left([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]\n        >>> assert rotate_left([1, 2, 3, 4, 5], 4) == [2, 3, 4, 5, 1]\n        >>> assert rotate_left([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n        >>> assert rotate_left([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]\n    \"\"\"\n    return arr[num_rotate:] + arr[:num_rotate]\n\n\nif __name__ == \"__main__\":\n    print(rotate_left([1, 2, 3, 4, 5], 2))",
      -0.6708984375
    ],
    [
      "def left_rotate(arr, k):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(arr)\n    k = k % n\n    print(\"Left rotating {} by {} positions:\".format(arr, k))\n    print(\"Before Rotation:\", arr)\n\n    for i in range(k):\n        temp = arr[0]\n        for j in range(n - 1):\n            arr[j] = arr[j + 1]\n        arr[n - 1] = temp\n\n    print(\"After Rotation:\", arr)\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    left_rotate(arr, 3)\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    left_rotate(arr, 2)\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    left_rotate(arr, 4)\n\n\nmain()",
      -0.70263671875
    ],
    [
      "from array import array\n\n\ndef left_rotate(arr, k):\n    \"\"\"\n    >>> left_rotate([1, 2, 3, 4, 5, 6, 7, 8], 3)\n    [5, 6, 7, 8, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    k = k % n\n    return arr[k:] + arr[:k]\n\n\ndef left_rotate_array(arr, k):\n    \"\"\"\n    >>> left_rotate_array([1, 2, 3, 4, 5, 6, 7, 8], 3)\n    [5, 6, 7, 8, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr)\n    k = k % n\n    i = 0\n    temp = array(\"i\", arr)\n    while i < n - k:\n        temp[i] = arr[i + k]\n        i += 1\n\n    i = 0\n    while i < k:\n        temp[i] = arr[i]\n        i += 1\n\n    i = 0\n    while i < n:\n        arr[i] = temp[i]\n        i += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.76806640625
    ],
    [
      "def rotate_list(my_list, num):\n    return my_list[num:] + my_list[:num]\n\n\ndef main():\n    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(rotate_list(my_list, 3))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85595703125
    ],
    [
      "from timeit import timeit\n\n\ndef rotate_list(list_a, rotates):\n    return list_a[rotates:] + list_a[:rotates]\n\n\ndef main():\n    list_a = [i for i in range(10000)]\n    rotates = 3\n\n    print(timeit('rotate_list(list_a, rotates)', 'from __main__ import rotate_list, list_a, rotates'))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85595703125
    ],
    [
      "def rotate_list(lst, num):\n    return lst[num:] + lst[:num]\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5, 6], 2))\n    print(rotate_list([1, 2, 3, 4, 5, 6], 4))",
      -0.85595703125
    ],
    [
      "def rotate_list(arr, n):\n    return arr[n:] + arr[:n]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    n = 2\n    print(rotate_list(arr, n))",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\ndef rotate_list(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    k = k % len(nums)\n    left_rotation_list = nums[len(nums) - k :]\n    right_rotation_list = nums[: len(nums) - k]\n\n    return left_rotation_list + right_rotation_list\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 3\n    print(rotate_list(nums, k))",
      -0.85693359375
    ],
    [
      "def rotate_list(lst, num):\n    return lst[num:] + lst[:num]\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))",
      -0.85693359375
    ],
    [
      "def rotate_list(arr, num_rotations):\n    if len(arr) <= 1 or num_rotations == 0:\n        return arr\n\n    return arr[num_rotations:] + arr[:num_rotations]\n\n\ndef main():\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 2))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 4))\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 7))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def left_rotate(arr, num):\n    return arr[num:] + arr[:num]\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(left_rotate(arr, 3))",
      -0.85693359375
    ],
    [
      "def rotate_list(l, n):\n    n = n % len(l)\n    return l[n:] + l[:n]\n\nif __name__ == '__main__':\n    print(rotate_list([1, 2, 3, 4, 5], 2))",
      -0.85693359375
    ],
    [
      "def rotate_list(l, num):\n    return l[num:] + l[:num]\n\n\ndef main():\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def rotate_list(lst, shift):\n    shift_list = lst[shift:]\n    lst = lst[:shift]\n    lst.extend(shift_list)\n    return lst\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5], 2))",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef left_rotate(lst: List, k: int) -> List:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(lst)\n    k %= n\n\n    for _ in range(k):\n        lst.append(lst.pop(0))\n\n    return lst\n\n\nif __name__ == \"__main__\":\n    print(left_rotate([1, 2, 3, 4, 5], 2))\n    print(left_rotate([1, 2, 3, 4, 5], 10))",
      -0.85791015625
    ],
    [
      "def left_rotation(lst, k):\n    # 1) move the last k items to the front\n    # 2) rotate the list\n    # 3) move the last k items to the back\n    return lst[k:] + lst[:k]\n\n\nprint(left_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))",
      -0.85791015625
    ],
    [
      "def rotate(arr, k):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    k %= len(arr)\n    for _ in range(k):\n        arr.append(arr.pop(0))\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rotate([1, 2, 3, 4, 5], 3))",
      -0.85791015625
    ],
    [
      "def rotate_list(lst, k):\n    k = k % len(lst)\n    return lst[k:] + lst[:k]\n\n\ndef main():\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7], 3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def rotate(list, n):\n    if n <= 0:\n        return list\n    return list[-n:] + list[:-n]\n\n\nif __name__ == \"__main__\":\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 3))",
      -0.85791015625
    ],
    [
      "def rotate_list(l, n):\n    return l[n:] + l[:n]\n\n\nprint(rotate_list([1, 2, 3, 4, 5, 6, 7], 2))",
      -0.85791015625
    ],
    [
      "def rotate_left(arr, k):\n    if k > len(arr):\n        k = k % len(arr)\n    if len(arr) == 0:\n        return arr\n    return arr[k:] + arr[:k]\n\n\ndef main():\n    print(\"Rotate list to left by 2 items\")\n    print(rotate_left([1, 2, 3, 4, 5, 6, 7], 2))\n    print(rotate_left([1, 2, 3, 4, 5, 6, 7, 8], 2))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def left_rotate(lst, k):\n    return lst[k:] + lst[:k]\n\nif __name__ == '__main__':\n    print(left_rotate([1,2,3,4,5], 2))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef rotate_left(lst: List, n: int) -> List:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n == 0:\n        return lst\n\n    return lst[n:] + lst[:n]\n\n\nif __name__ == \"__main__\":\n    print(rotate_left([1, 2, 3, 4, 5, 6], 3))",
      -0.8583984375
    ],
    [
      "def rotate_list(list_of_items, number_of_items):\n    return list_of_items[number_of_items:] + list_of_items[:number_of_items]\n\n\nif __name__ == '__main__':\n    print(rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
      -0.8583984375
    ],
    [
      "def left_rotation(l, k):\n    return l[k:] + l[:k]\n\n\ndef main():\n    print(\"Left rotation: \" + str(left_rotation([1, 2, 3, 4, 5, 6, 7], 3)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def rotate(arr, num):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    temp = []\n    for i in range(num):\n        temp.append(arr[0])\n        arr.pop(0)\n    for i in range(len(temp)):\n        arr.append(temp[i])\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rotate([1, 2, 3, 4, 5], 2))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef left_rotate(lst: List, num: int) -> List:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    num = num % len(lst)\n    left_rotated_lst = lst[num:] + lst[:num]\n\n    return left_rotated_lst\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5]\n    assert left_rotate(lst, 3) == [3, 4, 5, 1, 2]\n    assert left_rotate(lst, 5) == [2, 3, 4, 5, 1]",
      -0.8583984375
    ],
    [
      "def rotate_list(list_in: list, number: int) -> list:\n    \"\"\"\n    >>> rotate_list([1, 2, 3, 4, 5], 2)\n    [4, 5, 1, 2, 3]\n    \"\"\"\n    if number == 0:\n        return list_in\n    return list_in[number:] + list_in[:number]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def rotate_left(list, number):\n    for i in range(number):\n        temp = list[0]\n        list.pop(0)\n        list.append(temp)\n\n    return list\n\n\ndef main():\n    list = [1, 2, 3, 4, 5]\n    print(rotate_left(list, 2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def rotate_list(lst, num_rotate):\n    return lst[num_rotate:] + lst[:num_rotate]\n\n\nprint(rotate_list([1, 2, 3, 4, 5, 6, 7], 2))",
      -0.8583984375
    ],
    [
      "def rotate(items, k):\n    for i in range(k):\n        item = items.pop(0)\n        items.append(item)\n    return items\n\n\ndef test_rotate():\n    assert rotate([1, 2, 3, 4, 5, 6], 2) == [5, 6, 1, 2, 3, 4]\n    assert rotate([1, 2, 3, 4, 5, 6], 3) == [4, 5, 6, 1, 2, 3]\n    assert rotate([1, 2, 3, 4, 5, 6], 6) == [6, 1, 2, 3, 4, 5]\n    assert rotate([1, 2, 3, 4, 5, 6], 7) == [6, 1, 2, 3, 4, 5]",
      -0.85888671875
    ],
    [
      "def rotate_list(list, num):\n    if num >= len(list):\n        num = num % len(list)\n\n    return list[num:] + list[:num]\n\n\nprint(rotate_list([1, 2, 3, 4, 5], 2))\nprint(rotate_list([1, 2, 3, 4, 5], 5))\nprint(rotate_list([1, 2, 3, 4, 5], 6))\nprint(rotate_list([1, 2, 3, 4, 5], 0))",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef left_rotate(lst: List[int], num: int) -> List[int]:\n    \"\"\"Rotates list by `num` items to left.\n\n    Args:\n        lst: list to be rotated.\n        num: number of items to be rotated.\n\n    Examples:\n        >>> left_rotate([1, 2, 3, 4, 5], 2)\n        [4, 5, 1, 2, 3]\n    \"\"\"\n    return lst[num:] + lst[:num]\n\n\nif __name__ == \"__main__\":\n    print(left_rotate([1, 2, 3, 4, 5], 2))",
      -0.85888671875
    ],
    [
      "def rotate_left(items, k):\n    if items is None:\n        return []\n\n    k = k % len(items)\n\n    return items[k:] + items[:k]\n\n\n\nif __name__ == '__main__': \n    items = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 3\n    print(rotate_left(items, k))",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef rotate_list(array: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(array)\n\n    if n < 2:\n        return array\n\n    if k >= n:\n        k = k % n\n\n    for _ in range(k):\n        last = array[-1]\n\n        for index in range(n - 2, -1, -1):\n            array[index + 1] = array[index]\n\n        array[0] = last\n\n    return array\n\n\nif __name__ == \"__main__\":\n    assert rotate_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [6, 7, 8, 9, 1, 2, 3, 4, 5]",
      -0.85888671875
    ],
    [
      "def rotate_left(lst, k):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k < 0:\n        return lst\n\n    return lst[k:] + lst[:k]\n\n\nif __name__ == \"__main__\":\n    print(rotate_left([1, 2, 3, 4, 5], 2))",
      -0.85888671875
    ],
    [
      "def rotate_list(arr, num):\n    return arr[num:] + arr[:num]\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5, 6], 2))",
      -0.85888671875
    ],
    [
      "def rotate_list(arr, n):\n    if n == 0:\n        return arr\n\n    n = n % len(arr)\n    return arr[-n:] + arr[:-n]\n\n\nprint(rotate_list([1, 2, 3, 4, 5, 6], 2))\nprint(rotate_list([1, 2, 3, 4, 5, 6], 3))\nprint(rotate_list([1, 2, 3, 4, 5, 6], 4))\nprint(rotate_list([1, 2, 3, 4, 5, 6], 5))\nprint(rotate_list([1, 2, 3, 4, 5, 6], 6))\nprint(rotate_list([1, 2, 3, 4, 5, 6], 7))",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef rotate_list(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    k = k % len(arr)\n\n    for _ in range(k):\n        arr.insert(0, arr.pop())\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5], 2))",
      -0.85888671875
    ],
    [
      "def rotate_list(arr, n):\n    \"\"\"\n    Rotate a list by specified number of items to the left direction.\n    :param arr: list\n    :param n: int\n    :return: list\n    \"\"\"\n    if n <= 0:\n        return arr\n    n = n % len(arr)\n    return arr[n:] + arr[:n]\n\n\nprint(rotate_list([1, 2, 3, 4, 5, 6, 7, 8], 3))",
      -0.85888671875
    ],
    [
      "def rotate(arr, n):\n    \"\"\"\n    :param arr: list\n    :param n: int\n    :return: list\n    \"\"\"\n    for _ in range(n):\n        arr.append(arr[0])\n        del arr[0]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(rotate([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))",
      -0.86083984375
    ],
    [
      "from typing import List\n\n\ndef left_rotate(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    k %= len(nums)\n\n    # 1. Reverse the first k elements\n    nums[:k] = reversed(nums[:k])\n\n    # 2. Reverse the rest of the list\n    nums[k:] = reversed(nums[k:])\n\n    # 3. Reverse the whole list\n    nums = reversed(nums)\n\n    return list(nums)\n\n\nif __name__ == \"__main__\":\n    print(left_rotate([1, 2, 3, 4, 5, 6, 7], 3))",
      -0.88671875
    ],
    [
      "def left_rotate(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n == 0:\n        return arr\n    return arr[n:] + arr[:n]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(left_rotate(arr, 0))\n    print(left_rotate(arr, 3))\n    print(left_rotate(arr, 8))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.92236328125
    ],
    [
      "from typing import List\n\n\ndef rotate_left(array: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    k = k % len(array)\n    return array[k:] + array[:k]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    k = 2\n\n    print(rotate_left(arr, k))",
      -1.2216796875
    ],
    [
      "from array import array\n\ndef left_rotate(array, num):\n    if num == 0:\n        return\n    if len(array) == 0 or len(array) == 1:\n        return\n    if num >= len(array):\n        num = num % len(array)\n    return array[num:] + array[:num]\n\n\nif __name__ == \"__main__\":\n    print(left_rotate([1, 2, 3, 4, 5], 2))\n    print(left_rotate([1, 2, 3, 4, 5], 1))\n    print(left_rotate([1, 2, 3, 4, 5], 5))\n    print(left_rotate([1, 2, 3, 4, 5], 6))\n    print(left_rotate([1, 2, 3, 4, 5], 0))\n    print(left_rotate([], 0))\n    print(left_rotate([], 1))\n    print(left_rotate([1], 1))\n    print(left_rotate([1, 2, 3, 4, 5], 4))\n    print(left_rotate(array('I', [1, 2, 3, 4, 5]), 2))",
      -2.123046875
    ],
    [
      "from timeit import timeit\n\n\ndef left_rotate_recursive(input_list, number_of_items):\n    \"\"\"\n    :param input_list: list of integers\n    :param number_of_items: integer\n    :return: list of integers\n\n    >>> left_rotate_recursive([1, 2, 3, 4, 5, 6], 2)\n    [5, 6, 1, 2, 3, 4]\n    >>> left_rotate_recursive([1, 2, 3, 4, 5, 6], 3)\n    [4, 5, 6, 1, 2, 3]\n    >>> left_rotate_recursive([1, 2, 3, 4, 5, 6], 1)\n    [2, 3, 4, 5, 6, 1]\n    >>> left_rotate_recursive([1, 2, 3, 4, 5, 6], 0)\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    if number_of_items == 0:\n        return input_list\n\n    return left_rotate_recursive(input_list[number_of_items:], number_of_items) + input_list[:number_of_items]\n\n\ndef left_rotate_iterative(input_list, number_of_items):\n    \"\"\"\n    :param input_list: list of integers\n    :param number_of_items: integer\n    :return: list of integers\n\n    >>> left_rotate_iterative([1, 2, 3, 4, 5, 6], 2)\n    [5, 6, 1, 2, 3, 4]\n    >>> left_rotate_iterative([1, 2, 3, 4, 5, 6], 3)\n    [4, 5, 6, 1, 2, 3]\n    >>> left_rotate_iterative([1, 2, 3, 4, 5, 6], 1)\n    [2,",
      -2.599609375
    ],
    [
      "def rotate_list(arr: list, k: int) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    n = len(arr)\n\n    if n == 0:\n        return []\n\n    if n == 1:\n        return arr\n\n    if k == 0:\n        return arr\n\n    if k >= n:\n        k = k % n\n\n    return arr[k:] + arr[:k]\n\n\nif __name__ == \"__main__\":\n    print(rotate_list([1, 2, 3, 4, 5, 6], 2))\n    print(rotate_list([1, 2, 3, 4, 5, 6], 4))\n    print(rotate_list([1, 2, 3, 4, 5, 6], 6))\n    print(rotate_list([1, 2, 3, 4, 5, 6], 7))\n    print(rotate_list([1, 2, 3, 4, 5, 6], 0))\n    print(rotate_list([1, 2, 3, 4, 5, 6], 1))",
      -2.76171875
    ],
    [
      "def rotate(nums: list, k: int) -> list:\n    \"\"\"\n    First, reverse the list. Then, reverse the first k items. Finally, reverse the\n    remaining items.\n    \"\"\"\n\n    # Reverse the list.\n    reverse(nums, 0, len(nums) - 1)\n\n    # Reverse the first k items.\n    reverse(nums, 0, k - 1)\n\n    # Reverse the remaining items.\n    reverse(nums, k, len(nums) - 1)\n\n    return nums\n\ndef reverse(nums: list, start: int, end: int) -> None:\n    \"\"\"\n    Reverse the elements in the given range.\n    \"\"\"\n\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n\nif __name__ == \"__main__\":\n\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 3))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 4))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 5))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 6))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 7))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 8))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 9))\n    print(rotate([1, 2, 3, 4, 5, 6, 7], 10))\n\n    print(rotate([1, 2, 3, 4, 5, 6, 7, 8], 3))\n    print(rotate([1, 2, 3, 4,",
      -2.826171875
    ],
    [
      "def rotate_left(lst, n):\n    # First reverse the whole list\n    lst.reverse()\n\n    # Now reverse the first n elements\n    lst[:n] = lst[:n][::-1]\n\n    # Reverse the rest of the list\n    lst[n:] = lst[n:][::-1]\n\n    return lst\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(rotate_left(lst, 2))\n\n    lst = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    print(rotate_left(lst, 3))",
      -3.0859375
    ],
    [
      "from typing import List\n\n\ndef left_rotate_list(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(arr)\n    k = k % n\n\n    left_rotate_list_helper(arr, 0, n, k)\n\n    return arr\n\n\ndef left_rotate_list_helper(arr: List[int], start: int, end: int, k: int) -> None:\n    if end - start <= 1:\n        return\n\n    mid = (start + end) // 2\n\n    left_rotate_list_helper(arr, start, mid, k)\n    left_rotate_list_helper(arr, mid, end, k)\n\n    left, right = start, end - 1\n\n    while left < right:\n        if left - start + end - right >= k:\n            break\n        left += 1\n\n    if left == right:\n        return\n\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n\n    left_rotate_list_helper(arr, start, mid, k)\n    left_rotate_list_helper(arr, mid, end, k)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    k = 2\n    print(left_rotate_list(arr, k))",
      -3.140625
    ],
    [
      "from typing import List\n\n\ndef left_rotate(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(arr)\n    k %= n\n\n    # reverse the first k elements\n    i = 0\n    j = k - 1\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n\n    # reverse the remaining elements\n    i = k\n    j = n - 1\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 2) == [3, 4, 5, 6, 7, 1, 2]\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 3) == [4, 5, 6, 7, 1, 2, 3]\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 4) == [5, 6, 7, 1, 2, 3, 4]\n    assert left_rotate([1, 2, 3, 4, 5, 6, 7], 7) == [1, 2, 3, 4, 5, 6, 7]",
      -3.451171875
    ],
    [
      "from typing import List\n\n\ndef rotate_left(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    n: size of the list\n    k: number of items to rotate\n\n    If k is more than n, we need to rotate k % n items to the left.\n\n    Example:\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 3\n\n    We can rotate the list in 3 steps.\n\n    Step 1: Rotate the first 3 items to the right.\n        [1, 2, 3, 4, 5, 6, 7] -> [4, 5, 6, 7, 1, 2, 3]\n\n    Step 2: Rotate the first 4 items to the right.\n        [4, 5, 6, 7, 1, 2, 3] -> [7, 1, 2, 3, 4, 5, 6]\n\n    Step 3: Rotate the first 7 items to the right.\n        [7, 1, 2, 3, 4, 5, 6] -> [3, 4, 5, 6, 7, 1, 2]\n\n    :param nums: list of numbers\n    :param k: number of items to rotate\n    :return: rotated list\n    \"\"\"\n\n    def rotate_to_right(nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        Rotate the list by k to the right direction.\n\n        Time Complexity: O(n)\n        Space Complexity: O(n)\n        \"\"\"\n        k %= len(nums)\n\n        if k == 0:\n            return nums\n\n        return nums[-k:] + nums[:-k]\n\n    return rotate_to_right(nums, len(nums) - k)\n\n\nif __name__ == \"__main__\":\n    nums = [1,",
      -4.2109375
    ],
    [
      "from array import array\n\n\ndef left_rotate(arr: array, num: int) -> array:\n    \"\"\"\n    The idea is to reverse the first n elements,\n    reverse the remaining elements and then reverse\n    the first n elements again.\n    \"\"\"\n    if num == 0:\n        return arr\n\n    n = len(arr)\n    if n < 1:\n        return arr\n\n    # reverse first n elements\n    i = 0\n    j = i + num - 1\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n\n    # reverse remaining elements\n    i = num\n    j = n - 1\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n\n    # reverse first n elements again\n    i = 0\n    j = i + num - 1\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert left_rotate(array(\"B\", [1, 2, 3, 4, 5]), 1) == array(\"B\", [5, 1, 2, 3, 4])\n    assert left_rotate(array(\"B\", [1, 2, 3, 4, 5]), 2) == array(\"B\", [4, 5, 1, 2, 3])\n    assert left_rotate(array(\"B\", [1, 2, 3, 4, 5]), 3) == array(\"B\", [3, 4, 5, 1, 2])\n    assert left_rotate(array(\"B\", [1, 2, 3, 4, 5]), 4) == array(\"B\", [2, 3, 4, 5, 1])\n    assert left_rotate(array(\"B\", [1, 2, 3, 4,",
      -5.54296875
    ],
    [
      "from array import array\n\n\ndef rotate(arr: array, k: int) -> array:\n    \"\"\"\n    Rotates the array by k elements to the left.\n    >>> rotate(array('I', [1, 2, 3, 4, 5, 6, 7]), 2)\n    array('I', [3, 4, 5, 6, 7, 1, 2])\n    >>> rotate(array('I', [1, 2, 3, 4, 5, 6, 7]), 0)\n    array('I', [1, 2, 3, 4, 5, 6, 7])\n    >>> rotate(array('I', [1, 2, 3, 4, 5, 6, 7]), 6)\n    array('I', [4, 5, 6, 7, 1, 2, 3])\n    >>> rotate(array('I', [1, 2, 3, 4, 5, 6, 7]), 7)\n    array('I', [4, 5, 6, 7, 1, 2, 3])\n    >>> rotate(array('I', [1, 2, 3, 4, 5, 6, 7]), 8)\n    array('I', [4, 5, 6, 7, 1, 2, 3])\n    >>> rotate(array('I', [1, 2, 3, 4, 5, 6, 7]), -2)\n    array('I', [3, 4, 5, 6, 7, 1, 2])\n    >>> rotate(array('I', [1, 2, 3, 4, 5, 6, 7]), -8)\n    array('I', [3, 4, 5, 6, 7, 1, 2])\n    >>> rotate(array('I', [1, 2, 3, 4, 5, 6, 7]), -9)\n    array('I', [4, 5, 6, 7, 1,",
      -5.90625
    ],
    [
      "from array import array\n\n\ndef rotate_list(arr: array, num: int) -> array:\n    \"\"\"\n    The idea is to first reverse the array, then reverse the first `num` elements and the\n    rest of the array.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if num < 0:\n        num = len(arr) + num\n\n    # Reverse the list.\n    i, j = 0, len(arr) - 1\n\n    while i < j:\n        i_val, j_val = arr[i], arr[j]\n        arr[i], arr[j] = j_val, i_val\n        i += 1\n        j -= 1\n\n    # Reverse the first `num` elements.\n    i, j = 0, num - 1\n\n    while i < j:\n        i_val, j_val = arr[i], arr[j]\n        arr[i], arr[j] = j_val, i_val\n        i += 1\n        j -= 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    print(rotate_list(arr, 3))\n    arr = array(\"I\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    print(rotate_list(arr, -3))",
      -7.8671875
    ],
    [
      "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rotate_list(list: List[int], k: int) -> List[int]:\n    n = len(list)\n\n    if k > n:\n        k = k % n\n\n    # reverse the first n - k elements\n    reverse_list(list, 0, n - k - 1)\n\n    # reverse the last k elements\n    reverse_list(list, n - k, n - 1)\n\n    # reverse the entire list\n    reverse_list(list, 0, n - 1)\n\n    return list\n\n\ndef reverse_list(list: List[int], start: int, end: int) -> None:\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rotate_list_2(list: List[int], k: int) -> List[int]:\n    n = len(list)\n\n    if k > n:\n        k = k % n\n\n    # reverse the first n - k elements\n    reverse_list(list, 0, n - k - 1)\n    # reverse the last k elements\n    reverse_list(list, n - k, n - 1)\n    # reverse the entire list\n    reverse_list(list, 0, n - 1)\n\n    return list\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef rotate_list_3(list: List[int], k: int) -> List[int]:\n    n = len(list)\n\n    if k > n:\n        k = k % n\n\n    # reverse the first n - k elements\n    reverse_list(list, 0, n - k - 1)\n    # reverse the last k elements\n    reverse_list(list, n - k, n - 1)\n    # reverse the first n - k elements again\n    reverse_list(list, 0, n - k - 1)",
      -8.6484375
    ],
    [
      "from typing import List\n\n\ndef rotate_list(lst: List[int], rotate_by: int) -> List[int]:\n    \"\"\"Rotate a list by specified number of items to the left direction.\n\n    Args:\n        lst (List[int]): list to rotate\n        rotate_by (int): number of items to rotate by\n\n    Returns:\n        List[int]: rotated list\n    \"\"\"\n\n    # get the length of the list\n    length = len(lst)\n\n    # check if the rotation is possible\n    if rotate_by > length:\n        raise ValueError(\"Rotation is not possible\")\n\n    # get the last index of the list\n    last_index = length - 1\n\n    # get the first index of the list\n    first_index = 0\n\n    # get the second index of the list\n    second_index = 1\n\n    # loop through the list until the first index is greater than the last index\n    while first_index <= last_index:\n        # get the index of the first item\n        first_item_index = first_index\n\n        # get the index of the last item\n        last_item_index = last_index\n\n        # get the index of the second item\n        second_item_index = second_index\n\n        # increment the second index by the rotation number\n        second_index += rotate_by\n\n        # get the last index by the last index\n        last_index = first_index - 1\n\n        # get the first index by the first index\n        first_index = second_index\n\n        # get the second index by the second index\n        second_index = second_item_index\n\n        # get the first item by the list at the first item index\n        first_item = lst[first_item_index]\n\n        # get the second item by the list at the second item index\n        second_item = lst[second_item_index]\n\n        # get the last item by the list at the last item index\n        last_item = lst[last_item_index]\n\n        # set the list at the first item index to the second item\n        lst[first_item_index] = second_item\n\n        # set the",
      -11.1953125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}