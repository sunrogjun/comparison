{
  "problem": {
    "task_id": "MBPP/160",
    "prompt": "Write a function to find x and y that satisfies ax + by = n.",
    "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
    "test_list": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ],
    "challenge_test_list": [],
    "problem_id": 149
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef ax_plus_by_equals_n(a, b, n):\n    g = gcd(a, b)\n    x = (b / g) * (n / a)\n    y = (a / g) * (n / b)\n    return x, y\n\n\nif __name__ == \"__main__\":\n    print(ax_plus_by_equals_n(3, 5, 10))\n    print(ax_plus_by_equals_n(1, 1, 1))\n    print(ax_plus_by_equals_n(3, 5, 11))",
      2.771484375
    ],
    [
      "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n\ndef find_xy(a, b, n):\n    if a == 0 or b == 0:\n        return False\n    g = gcd(a, b)\n    if n % g != 0:\n        return False\n    x = n // g\n    y = b // g\n    return (x, y)\n\n\ndef main():\n    print(find_xy(1, 2, 1))\n    print(find_xy(2, 1, 1))\n    print(find_xy(2, 3, 4))\n    print(find_xy(1, 3, 3))\n    print(find_xy(2, 5, 10))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.7265625
    ],
    [
      "# Time Complexity: O(1)\n# Space Complexity: O(1)\ndef get_x_y(a, b, n):\n    x, y = 1, 0\n\n    if a == 0:\n        return 0, n\n\n    while a * x + b * y != n:\n        x, y = x, y\n        x += a\n        y += b\n    return x, y\n\n\nprint(get_x_y(1, 0, 0))\nprint(get_x_y(2, 3, 5))\nprint(get_x_y(0, 1, 2))",
      1.68359375
    ],
    [
      "from typing import List, Optional\n\n\ndef gcd(a: int, b: int) -> int:\n    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef solve(a: int, b: int, n: int) -> Optional[List[int]]:\n    g = gcd(a, b)\n    if n % g != 0:\n        return None\n    x = n // g\n    y = a * x // a\n    return [x, y]\n\n\nif __name__ == \"__main__\":\n    assert solve(3, 5, 15) == [1, 2]\n    assert solve(3, 5, 14) == [2, 1]\n    assert solve(3, 5, 16) is None\n    assert solve(3, 5, 17) is None",
      1.1474609375
    ],
    [
      "class Solution(object):\n    def getFactors(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if n < 2:\n            return []\n        factors = []\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors.append([i, n/i])\n        return factors",
      0.908203125
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef get_xy(a, b, n):\n    g = gcd(a, b)\n    return (n // g) % (a // g), (n // g) % (b // g)\n\n\nprint(get_xy(4, 6, 12))\nprint(get_xy(7, 6, 12))",
      0.79541015625
    ],
    [
      "from typing import Tuple\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two numbers.\n    \"\"\"\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\ndef ax_plus_by_equals_n(a: int, b: int, n: int) -> Tuple[int, int]:\n    \"\"\"\n    Find x and y that satisfies ax + by = n.\n    \"\"\"\n    if a == 0:\n        return 0, n / b\n    if b == 0:\n        return n / a, 0\n\n    gcd_ab = gcd(a, b)\n\n    x = n / a // gcd_ab\n    y = n / b // gcd_ab\n\n    return x, y",
      0.533203125
    ],
    [
      "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n\ndef x_y(a, b, n):\n    if n == 0:\n        return (0, 0)\n    g = gcd(a, b)\n    q = n / g\n    r = n % g\n    if r == 0:\n        return (q, 0)\n    for i in range(1, g):\n        if i * b + (g - i) * a == n:\n            return (i, g - i)\n    return (-1, -1)\n\n\nif __name__ == \"__main__\":\n    assert x_y(2, 4, 12) == (3, 1)",
      0.53271484375
    ],
    [
      "def gcd(a, b):\n    while b != 0:\n        t = b\n        b = a % b\n        a = t\n    return a\n\n\ndef get_x_and_y(a, b, n):\n    g = gcd(a, b)\n    x = (n * b) // (g * a)\n    y = (n * a) // (g * b)\n    return x, y\n\n\ndef test_get_x_and_y():\n    assert get_x_and_y(3, 4, 12) == (2, 3)\n\n\nif __name__ == '__main__':\n    test_get_x_and_y()",
      0.3701171875
    ],
    [
      "from typing import List, Optional\n\n\ndef x_and_y(n: int, a: int, b: int) -> Optional[List[int]]:\n    if n % a == 0:\n        return [n // a, 0]\n    if n % b == 0:\n        return [0, n // b]\n\n    x_y_diff = b - a\n    x_y_sum = a + b\n    gcd = __gcd(x_y_diff, x_y_sum)\n\n    x_y_diff = x_y_diff // gcd\n    x_y_sum = x_y_sum // gcd\n\n    x = n // x_y_sum\n    y = n // x_y_diff\n\n    return [x, y]\n\n\ndef __gcd(x: int, y: int) -> int:\n    if y == 0:\n        return x\n    return __gcd(y, x % y)",
      0.308837890625
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of a and b.\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    \"\"\"\n    Find the lowest common multiple of a and b.\n    \"\"\"\n    return a * b / gcd(a, b)\n\ndef find_solutions(a, b, n):\n    \"\"\"\n    Find the solutions to ax + by = n.\n    \"\"\"\n    l = lcm(a, b)\n    for x in range(l):\n        y = n * x / l\n        if y % 1 == 0:\n            yield (x, int(y))\n\ndef test():\n    \"\"\"\n    >>> find_solutions(3, 5, 6)\n    [(0, 1), (1, 2), (2, 3)]\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    test()",
      0.1876220703125
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Euclid's algorithm\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef x_and_y(a, b, n):\n    \"\"\"\n    Find x and y that satisfies ax + by = n.\n    \"\"\"\n    g = gcd(a, b)\n    if g != 1:\n        return (0, 0)\n    else:\n        return (n // a, n // b)\n\n\nif __name__ == \"__main__\":\n    print(x_and_y(11, 25, 111))\n    print(x_and_y(12, 15, 121))\n    print(x_and_y(13, 17, 131))",
      0.135986328125
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef x_y(a, b, n):\n    g = gcd(a, b)\n    x = n // g\n    y = n // g\n    if n % g == 0:\n        return x, y\n    else:\n        return None\n\n\ndef test_x_y():\n    assert x_y(2, 4, 12) == (2, 3)\n    assert x_y(12, 4, 12) == (3, 3)\n    assert x_y(2, 4, 11) is None\n    assert x_y(2, 4, 2) is None\n\n\nif __name__ == '__main__':\n    test_x_y()",
      0.0360107421875
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef solution(a, b, n):\n    \"\"\"Return x and y that satisfies ax + by = n.\n\n    >>> solution(2, 3, 5)\n    (2, 1)\n    >>> solution(3, 5, 7)\n    (0, 1)\n    >>> solution(1, 3, 10)\n    (1, 3)\n    >>> solution(1, 2, 2)\n    (1, 0)\n    \"\"\"\n    if a == 0 and b == 0:\n        return (0, 0)\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    x0 = n // a\n    y0 = n // b\n    while True:\n        g = gcd(a, b)\n        if g == 1:\n            return x0, y0\n        a = a // g\n        b = b // g\n        x0 = x0 * a // g\n        y0 = y0 * b // g",
      -0.150146484375
    ],
    [
      "def find_xy(a, b, n):\n    \"\"\"\n    >>> find_xy(1, 2, 3)\n    (3, 1)\n    >>> find_xy(1, 0, 3)\n    (3, 1)\n    >>> find_xy(1, 3, 2)\n    (1, 2)\n    >>> find_xy(0, 3, 2)\n    (1, 2)\n    >>> find_xy(0, 0, 2)\n    (1, 1)\n    \"\"\"\n    if a == 0 and b == 0:\n        return (1, 1)\n    if a == 0:\n        return (n / b, 1)\n    if b == 0:\n        return (n / a, 1)\n    if a < 0:\n        a, b, n = -a, -b, -n\n    gcd = gcd_euclid(a, b)\n    a //= gcd\n    b //= gcd\n    if a > 0:\n        x = n // a\n        y = n - x * a\n    else:\n        x = -(n // -a)\n        y = -n - x * a\n    return (x, y)\n\ndef gcd_euclid(a, b):\n    \"\"\"\n    >>> gcd_euclid(10, 15)\n    5\n    >>> gcd_euclid(10, 16)\n    2\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd_euclid(b, a % b)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.316162109375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef get_x_and_y(a, b, n):\n    if a == 0 and b == 0:\n        raise ValueError('Invalid values')\n\n    if a == 0:\n        return 0, n / b\n\n    if b == 0:\n        return n / a, 0\n\n    d = gcd(a, b)\n    a = a // d\n    b = b // d\n\n    if n % d != 0:\n        return None, None\n\n    n = n // d\n\n    if a % 2 == 0:\n        return get_x_and_y(b, a, n)\n\n    if n % 2 == 0:\n        return None, None\n\n    x, y = get_x_and_y(b, a, n)\n    return y, x\n\n\nif __name__ == '__main__':\n    print(get_x_and_y(3, 4, 12))",
      -0.421630859375
    ],
    [
      "class Solution:\n    def getXORSum(self, n: int) -> int:\n        s = bin(n)[2:]\n        x = 0\n        y = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                x += 2 ** i\n            elif s[i] == '1':\n                y += 2 ** i\n        return x ^ y\n\n\nif __name__ == \"__main__\":\n    n = 3\n    out = 2\n    res = Solution().getXORSum(n)\n    assert res == out, (res, out)\n\n    n = 6\n    out = 3\n    res = Solution().getXORSum(n)\n    assert res == out, (res, out)\n\n    n = 8\n    out = 0\n    res = Solution().getXORSum(n)\n    assert res == out, (res, out)",
      -0.74609375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef solution(n):\n    \"\"\"Return a list of integers x and y that satisfies ax + by = n.\n\n    >>> solution(10)\n    [2, 5]\n    >>> solution(15)\n    [3, 5]\n    \"\"\"\n    for a in range(1, n + 1):\n        if n % a == 0:\n            b = n // a\n            if gcd(a, b) == 1:\n                return [a, b]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.7509765625
    ],
    [
      "def find_x_y(a, b, n):\n    \"\"\"\n    >>> find_x_y(1, 1, 1)\n    (1, 1)\n    >>> find_x_y(1, 1, 2)\n    >>> find_x_y(1, 1, 3)\n    \"\"\"\n    for x in range(n + 1):\n        y = n - a * x\n        if b * x % y == 0:\n            return x, y // b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8427734375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef find_xy(a, b, n):\n    # Find gcd\n    g = gcd(a, b)\n    # Find x and y\n    x = n // b\n    y = n // a - x\n    return x, y\n\nif __name__ == '__main__':\n    a = 13\n    b = 17\n    n = 31\n    print(find_xy(a, b, n))",
      -0.85595703125
    ],
    [
      "def solve_ab(n, a, b):\n    \"\"\"\n    Solve the equation ax + by = n\n\n    :param n: the number to solve for\n    :param a: the first coefficient\n    :param b: the second coefficient\n    :return: a tuple containing x and y\n    \"\"\"\n    assert a != 0, \"The first coefficient cannot be zero\"\n\n    x = n // a\n    y = n - (x * a) // b\n\n    return x, y",
      -0.85693359375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    GCD\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    \"\"\"\n    LCM\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef xy_finder(a, b, n):\n    \"\"\"\n    Return x and y\n    \"\"\"\n    lcm_ = lcm(a, b)\n    x = n / lcm_ * a\n    y = n / lcm_ * b\n    return int(x), int(y)\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    n = int(input(\"Enter n: \"))\n    print(\"x:\", xy_finder(a, b, n)[0])\n    print(\"y:\", xy_finder(a, b, n)[1])\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef solve_linear_equations(a, b, n):\n    g = gcd(a, b)\n    return n // g, (n % g) // b\n\n\ndef test_solve_linear_equations():\n    assert solve_linear_equations(4, 6, 24) == (3, 8)\n\n\nif __name__ == '__main__':\n    test_solve_linear_equations()",
      -0.85693359375
    ],
    [
      "def find_solution(a, b, n):\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return x, y\n\n\nif __name__ == \"__main__\":\n    print(find_solution(2, 3, 7))",
      -0.85693359375
    ],
    [
      "import unittest\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef get_xy(a, b, n):\n    x = (n * b) // gcd(a, b)\n    y = (n * a) // gcd(a, b)\n    return x, y\n\n\nclass TestGetXY(unittest.TestCase):\n\n    def test_get_xy(self):\n        self.assertEqual(get_xy(3, 4, 12), (3, 4))\n        self.assertEqual(get_xy(6, 9, 27), (2, 3))\n        self.assertEqual(get_xy(12, 15, 30), (3, 4))\n        self.assertEqual(get_xy(13, 15, 30), (4, 3))\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -0.85693359375
    ],
    [
      "import math\n\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b != 0:\n        r = a % b\n        a = b\n        b = r\n\n    return a\n\n\ndef get_x_and_y(a, b, n):\n    g = math.gcd(a, b)\n    x = (n * b) // (a * g)\n    y = (n * a) // (b * g)\n    return x, y\n\n\n# Tests\nassert get_x_and_y(2, 3, 6) == (1, 1)",
      -0.85693359375
    ],
    [
      "def x_y(a, b, n):\n    x = 0\n    y = n\n    while y > 0:\n        q = x // y\n        r = x % y\n        x = y\n        y = r\n    k = n // x\n    x *= k\n    y *= k\n    return x, y\n\n\nassert x_y(1, 1, 2) == (2, 1)\nassert x_y(1, 2, 5) == (1, 4)\nassert x_y(2, 1, 3) == (3, 1)\nassert x_y(2, 3, 7) == (1, 6)\nassert x_y(3, 2, 7) == (6, 1)",
      -0.85791015625
    ],
    [
      "def find_xy(a, b, n):\n    if a == 0:\n        return 0, n // b\n    elif b == 0:\n        return n // a, 0\n    else:\n        x, y = 1, 1\n        while (a * x + b * y) != n:\n            if (a * x + b * y) > n:\n                x -= 1\n            elif (a * x + b * y) < n:\n                y -= 1\n        return x, y\n\nif __name__ == \"__main__\":\n    print(find_xy(1, 2, 4))",
      -0.85791015625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef x_y_finder(a, b, n):\n    g = gcd(a, b)\n    return n // g, (a // g) // (n // g)\n\n\nif __name__ == \"__main__\":\n    print(x_y_finder(12, 6, 18))",
      -0.85791015625
    ],
    [
      "def find_x_y(a, b, n):\n    if a == 0 and b == 0:\n        return None\n\n    if a == 0:\n        return 0, n / b\n\n    if b == 0:\n        return n / a, 0\n\n    x = n / a\n    y = n / b\n\n    while x > 0 and y > 0:\n        if x * b + y * a == n:\n            return x, y\n\n        if x * b < n:\n            x -= 1\n        else:\n            y -= 1\n\n    return None",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def get_xy(self, n, a, b):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :type b: int\n        :rtype: List[int]\n        \"\"\"\n        if a == 0:\n            return [0, n / b]\n        if b == 0:\n            return [n / a, 0]\n        if n == 0:\n            return [0, 0]\n\n        x = 0\n        y = 0\n        while x < n:\n            y = (n - a * x) / b\n            if y > 0 and y.is_integer():\n                break\n            x += 1\n        return [x, y]",
      -0.8583984375
    ],
    [
      "def find_x_y(a, b, n):\n    \"\"\"\n    This function finds the x and y that satisfies ax + by = n.\n\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: tuple\n    \"\"\"\n    x, y = 0, 0\n    while y < n:\n        y += a\n        x += 1\n    return x, y - a\n\n\nif __name__ == \"__main__\":\n    assert find_x_y(3, 4, 12) == (3, 9)\n    assert find_x_y(1, 1, 2) == (2, 1)",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef find_x_and_y(a, b, n):\n    if n % gcd(a, b) != 0:\n        return -1, -1\n    else:\n        tmp = n / gcd(a, b)\n        x = tmp * b\n        y = tmp * a\n        return x, y\n\n\nprint(find_x_and_y(5, 3, 15))",
      -0.8583984375
    ],
    [
      "def gcd(x, y):\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\ndef get_xy_for_n(a, b, n):\n    # x and y are the desired values\n    # n is the parameter\n    # a and b are the variables\n    # ax + by = n\n    # a and b are coprime\n    # gcd(a, b) = 1\n    if gcd(a, b) != 1:\n        return None\n    if n % a == 0 and n % b == 0:\n        return (n / a, n / b)\n    else:\n        return None",
      -0.8583984375
    ],
    [
      "def gcd(x, y):\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef solution(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    if a == 0 or b == 0:\n        return [0, n // max(a, b)]\n    if a == b:\n        return [n // a, n // a]\n    if n == 0:\n        return [0, 0]\n    g = gcd(a, b)\n    a, b = a // g, b // g\n    x = n // a\n    y = (n - a * x) // b\n    return [x, y]",
      -0.8583984375
    ],
    [
      "import unittest\nfrom functools import reduce\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef x_y(a, b, n):\n    g = gcd(a, b)\n    if n % g:\n        return None\n    else:\n        return a // g, b // g\n\n\nclass Test(unittest.TestCase):\n    def test_x_y(self):\n        self.assertEqual(x_y(10, 15, 25), (1, 2))\n        self.assertEqual(x_y(2, 4, 8), (1, 2))\n        self.assertEqual(x_y(1, 2, 3), None)\n        self.assertEqual(x_y(5, 1, 3), None)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.8583984375
    ],
    [
      "def find_x_and_y(a, b, n):\n    # 1. Check if the equation has a solution.\n    # 2. If a and b are relatively prime\n    # 3. Find the smallest positive integer x that satisfies x = n / b.\n    # 4. Find the smallest positive integer y that satisfies y = (n - ax) / b.\n    # 5. Return x and y.\n    pass",
      -0.8583984375
    ],
    [
      "def find_xy(a, b, n):\n    if a == 0:\n        return 0, n / b\n    else:\n        x = find_xy(b, a, n)[1]\n        y = n - a * x\n        return x, y\n\n\nprint(find_xy(2, 3, 6))\nprint(find_xy(3, 2, 6))\nprint(find_xy(1, 1, 1))\nprint(find_xy(1, 1, 2))\nprint(find_xy(1, 1, 3))\nprint(find_xy(1, 1, 4))\nprint(find_xy(1, 1, 5))",
      -0.8583984375
    ],
    [
      "# O(sqrt(n))\ndef x_and_y(a, b, n):\n    for i in range(n + 1):\n        if a * i + b * (n - i) == n:\n            return i, n - i\n    return None\n\n\n# O(sqrt(n))\ndef x_and_y_2(a, b, n):\n    for i in range(n + 1):\n        if a * i + b * (n - i) == n:\n            return i, n - i\n    return None\n\n\nprint(x_and_y(1, 2, 5))\nprint(x_and_y(1, 2, 6))",
      -0.8583984375
    ],
    [
      "def find_x_and_y(a, b, n):\n    \"\"\"\n    Find x and y that satisfies ax + by = n.\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: x, y\n    \"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return 0, n / b\n    if b == 0:\n        return n / a, 0\n    if a * b < 0:\n        return -n / b, -n / a\n    if abs(a) > abs(b):\n        return -n / (a - b), 1\n    else:\n        return 1, -n / (b - a)\n\n\nif __name__ == \"__main__\":\n    a = 2\n    b = 3\n    n = 5\n    print(find_x_and_y(a, b, n))",
      -0.85888671875
    ],
    [
      "def find_xy(a, b, n):\n    # Generate a list of factors of n\n    factors = [1]\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    # Check if x and y exist\n    for x in factors:\n        y = n // a // x - b * x\n        if y >= 0 and y % b == 0:\n            return x, y // b\n    return None\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    n = int(input(\"Enter n: \"))\n    print(find_xy(a, b, n))",
      -0.85888671875
    ],
    [
      "class Solution:\n    def get_xy(self, a, b, n):\n        x = 0\n        y = 0\n        for i in range(1, n):\n            if a * i + b * x > n:\n                x += 1\n                y += 1\n            else:\n                y += 1\n\n        return x, y\n\n\nif __name__ == \"__main__\":\n    a = 1\n    b = 1\n    n = 12\n    s = Solution()\n    print(s.get_xy(a, b, n))",
      -0.85888671875
    ],
    [
      "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef get_xy(a, b, n):\n    \"\"\"\n    :param a:\n    :param b:\n    :param n:\n    :return: x, y\n    \"\"\"\n    g = gcd(a, b)\n    x = n / g\n    y = n / g\n    return int(x), int(y)\n\n\nif __name__ == '__main__':\n    a = 3\n    b = 5\n    n = 15\n    x, y = get_xy(a, b, n)\n    print(x, y)",
      -0.8916015625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef get_gcd(a, b):\n    return gcd(max(a, b), min(a, b))\n\n\ndef get_lcm(a, b):\n    return a * b // get_gcd(a, b)\n\n\ndef get_xy(a, b, n):\n    lcm = get_lcm(a, b)\n    x = lcm // a\n    y = lcm // b\n    if x * a + y * b == n:\n        return x, y\n    return -1, -1\n\n\nassert get_xy(4, 6, 24) == (3, 2)\nassert get_xy(4, 6, 25) == (-1, -1)",
      -1.009765625
    ],
    [
      "from itertools import product\n\n\ndef get_x_y(a, b, n):\n    \"\"\"\n    Finds the x and y that satisfies ax + by = n.\n    >>> get_x_y(1, 2, 4)\n    (2, 1)\n    >>> get_x_y(2, 3, 10)\n    (1, 2)\n    \"\"\"\n    x, y = 0, 0\n    for x, y in product(range(n + 1), repeat=2):\n        if a * x + b * y == n:\n            return x, y\n    return x, y\n\n\ndef test_get_x_y():\n    assert get_x_y(1, 2, 4) == (2, 1)\n    assert get_x_y(2, 3, 10) == (1, 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -1.2724609375
    ],
    [
      "def find_x_y(a, b, n):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: list of int\n    \"\"\"\n    if a == 0 and b == 0:\n        return []\n\n    if a == 0:\n        return [0, n // b]\n\n    if b == 0:\n        return [n // a, 0]\n\n    if a * b > 0:\n        if a > 0 and b > 0:\n            return [n // a, 0]\n        elif a < 0 and b > 0:\n            return [n // a, 0]\n        elif a < 0 and b < 0:\n            return [0, n // b]\n        elif a > 0 and b < 0:\n            return [0, n // b]\n    else:\n        if a > 0 and b < 0:\n            return [n // a, 0]\n        elif a < 0 and b > 0:\n            return [0, n // b]\n        elif a < 0 and b < 0:\n            return [n // a, 0]\n        elif a > 0 and b > 0:\n            return [0, n // b]\n\n\n\nprint(find_x_y(1, 1, 2))\nprint(find_x_y(1, 0, 1))\nprint(find_x_y(1, 1, 3))\nprint(find_x_y(1, 1, 1))\nprint(find_x_y(0, 1, 1))\nprint(find_x_y(1, 0, 0))\nprint(find_x_y(0, 1, 0))\nprint(find_x_y(0, 0, 0))\nprint(find_x_y(1, 0, 0))\nprint(find_x_y(0, 1, 0))\nprint(find_x_y(0, 0, 0))\nprint(find_x_y(1, 0,",
      -1.33203125
    ],
    [
      "from typing import Tuple\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return greatest common divisor of a and b\"\"\"\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef x_y(a: int, b: int, n: int) -> Tuple[int, int]:\n    \"\"\"Return x and y that satisfies ax + by = n\"\"\"\n    g = gcd(a, b)\n    if n % g != 0:\n        return (-1, -1)\n    x, y = a // g, b // g\n    for i in range(g):\n        if n * x + i * y == n * (a // g):\n            return (x, i)\n    return (-1, -1)\n\n\nif __name__ == \"__main__\":\n    assert x_y(5, 3, 15) == (1, 2)",
      -1.5078125
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Greatest common divisor\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    \"\"\"\n    Least common multiple\n    \"\"\"\n    return a * b / gcd(a, b)\n\n\ndef get_x_y(a, b, n):\n    \"\"\"\n    a, b: positive integers\n    n: positive integer\n    return: a pair of integers (x, y) that satisfy ax + by = n\n    \"\"\"\n    if n == 0:\n        return 0, 0\n    if a == 0 or b == 0:\n        return 0, 0\n    if a == b:\n        return 0, 1\n\n    lcm_ab = lcm(a, b)\n    x = lcm_ab / a\n    y = lcm_ab / b\n    return x, y",
      -1.6904296875
    ],
    [
      "def find_xy(n, a, b):\n    x, y = 0, 0\n    while n > 0:\n        if n % a == 0:\n            x += 1\n            n //= a\n        elif n % b == 0:\n            y += 1\n            n //= b\n        else:\n            return -1\n    return x, y\n\n\ndef test_find_xy():\n    assert find_xy(10, 2, 3) == (1, 2)\n    assert find_xy(20, 2, 3) == (2, 3)\n    assert find_xy(100, 2, 3) == (10, 15)\n    assert find_xy(100, 3, 2) == (10, 15)\n    assert find_xy(100, 10, 15) == (1, 2)\n\n\nif __name__ == '__main__':\n    test_find_xy()",
      -2.193359375
    ],
    [
      "import unittest\n\n\ndef solution(a, b, n):\n    if a == 0 and b == 0:\n        return []\n    if a == 0:\n        return [0, n // b]\n    if b == 0:\n        return [n // a, 0]\n    if a == b:\n        return [n // a, n // a]\n    if a < 0:\n        a, b, n = -a, -b, -n\n\n    for x in range(n + 1):\n        y = (n - x) // a\n        if x + y == n:\n            return [x, y]\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(3, 4, 6), [1, 2])\n        self.assertEqual(solution(1, 1, 2), [2, 0])\n        self.assertEqual(solution(1, 1, 1), [1, 0])\n        self.assertEqual(solution(1, -1, 2), [1, 1])\n        self.assertEqual(solution(-1, -1, -2), [1, 1])\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -2.2578125
    ],
    [
      "# O(n^2) time | O(1) space\ndef solution_1(a, b, n):\n    # write your code here\n    if a == 0 and b == 0:\n        return False\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return [x, y]\n    return False\n\n\n# O(n) time | O(1) space\ndef solution_2(a, b, n):\n    # write your code here\n    if a == 0 and b == 0:\n        return False\n    x = 0\n    y = n\n    while a * x + b * y != n:\n        x += 1\n        y -= 1\n    return [x, y]",
      -2.302734375
    ],
    [
      "def find_xy(n: int, a: int, b: int) -> tuple[int, int]:\n    \"\"\"\n    This function finds the x and y that satisfies ax + by = n.\n    >>> find_xy(2, 1, 1)\n    (2, 1)\n    >>> find_xy(0, 1, 1)\n    (0, 0)\n    >>> find_xy(1, 1, 1)\n    (1, 1)\n    >>> find_xy(3, 2, 1)\n    (1, 1)\n    >>> find_xy(3, 1, 2)\n    (1, 1)\n    >>> find_xy(5, 2, 3)\n    (1, 2)\n    >>> find_xy(5, 1, 3)\n    (2, 1)\n    >>> find_xy(5, 3, 2)\n    (2, 1)\n    >>> find_xy(10, 3, 5)\n    (2, 1)\n    \"\"\"\n    if n == 0:\n        return 0, 0\n\n    for x in range(n + 1):\n        y = (n - a * x) * 1.0 / b\n        if y % 1 == 0:\n            return x, int(y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.3203125
    ],
    [
      "def gcd(x, y):\n    while y != 0:\n        t = x\n        x = y\n        y = t % y\n    return x\n\n\ndef solve(a, b, n):\n    \"\"\"\n    Find x and y that satisfies ax + by = n.\n\n    >>> solve(1, 1, 2)\n    (1, 1)\n    >>> solve(3, 5, 8)\n    (2, 1)\n    >>> solve(3, 5, 7)\n    >>> solve(5, 3, 12)\n    (2, 3)\n    >>> solve(7, 3, 13)\n    (2, 1)\n    >>> solve(3, 7, 13)\n    (1, 2)\n    \"\"\"\n    assert a != 0 and b != 0\n    assert n % gcd(a, b) == 0\n    x0, y0, x, y = 0, 1, 1, 0\n    while n:\n        q = n // b\n        r = n - q * b\n        m = a * x - b * y\n        x, y = x0 - q * x0, y0 - q * y0\n        x0, y0 = x, y\n        n = r\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.40234375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Calculates the GCD of a and b\n    \"\"\"\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\n\ndef gcd2(a, b):\n    while b != 0:\n        temp = a % b\n        a = b\n        b = temp\n    return a\n\ndef find_xy(a, b, n):\n    \"\"\"\n    Returns x and y that satisfy ax + by = n\n    \"\"\"\n    assert n >= 0\n    assert a >= 0\n    assert b >= 0\n    if n == 0:\n        return (0, 0)\n    if a == 0:\n        return (0, n)\n    if b == 0:\n        return (n, 0)\n    if a < b:\n        a, b = b, a\n    g = gcd(a, b)\n    return (n // g, n // g)\n\ndef find_xy2(a, b, n):\n    \"\"\"\n    Returns x and y that satisfy ax + by = n\n    \"\"\"\n    assert n >= 0\n    assert a >= 0\n    assert b >= 0\n    if n == 0:\n        return (0, 0)\n    if a == 0:\n        return (0, n)\n    if b == 0:\n        return (n, 0)\n    if a < b:\n        a, b = b, a\n    g = gcd2(a, b)\n    return (n // g, n // g)",
      -2.53125
    ],
    [
      "def find_x_y(a, b, n):\n    \"\"\"\n    :param a:\n    :param b:\n    :param n:\n    :return:\n    \"\"\"\n    x, y = 0, n\n    while y >= 0:\n        q = x // a\n        r = y - b * q\n        if r < 0:\n            break\n        x, y = r, q\n    if y < 0:\n        return -1, -1\n    return x, y\n\n\nassert find_x_y(1, 1, 1) == (1, 0)\nassert find_x_y(1, 1, 0) == (0, 0)\nassert find_x_y(1, 2, 3) == (0, 1)\nassert find_x_y(2, 1, 3) == (1, 1)\nassert find_x_y(1337, 1024, 1000000) == (10, 999)",
      -2.970703125
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Calculate the Greatest Common Divisor of a and b.\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef xy_gcd(a, b, n):\n    \"\"\"\n    Calculate x and y that satisfies ax + by = n.\n    \"\"\"\n    if gcd(a, b) != 1:\n        return None\n    else:\n        return n % a, n % b\n\n\nif __name__ == \"__main__\":\n    assert xy_gcd(3, 5, 12) == (2, 0)\n    assert xy_gcd(3, 5, 13) == None\n    assert xy_gcd(3, 5, 14) == None",
      -3.158203125
    ],
    [
      "import unittest\n\n\ndef get_x_y(a, b, n):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: x, y\n    \"\"\"\n    for i in range(n + 1):\n        if a * i + b * (n - i) == n:\n            return i, n - i\n    return None, None\n\n\nclass TestGetXandY(unittest.TestCase):\n    def test_get_x_y(self):\n        self.assertEqual(get_x_y(1, 2, 3), (1, 2))\n        self.assertEqual(get_x_y(2, 1, 3), (1, 2))\n        self.assertEqual(get_x_y(2, 1, 4), (2, 1))\n        self.assertEqual(get_x_y(3, 2, 4), (1, 2))\n        self.assertEqual(get_x_y(4, 3, 5), (1, 2))\n        self.assertEqual(get_x_y(1, 1, 1), (1, 0))\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -3.17578125
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef xy(a, b, n):\n    \"\"\"Returns a tuple (x, y) that satisfies ax + by = n.\n\n    >>> xy(2, 4, 12)\n    (3, 2)\n    >>> xy(1, 2, 5)\n    (2, 1)\n    >>> xy(1, 1, 1)\n    (1, 0)\n    >>> xy(2, 3, 5)\n    (1, 1)\n    >>> xy(7, 3, 12)\n    (2, 1)\n    >>> xy(5, 7, 12)\n    (2, 3)\n    >>> xy(3, 5, 12)\n    (1, 2)\n    >>> xy(2, 7, 12)\n    (1, 3)\n    \"\"\"\n    # Euclidean algorithm\n    x, y = 0, 1\n    r0, r1 = a, b\n    q = r0 // r1\n    while r1 != 0:\n        q = r0 // r1\n        r0, r1 = r1, r0 - q * r1\n        x, y = y, x - q * y\n    return x, y\n\ndef xy_v2(a, b, n):\n    \"\"\"Returns a tuple (x, y) that satisfies ax + by = n.\n\n    >>> xy_v2(2, 4, 12)\n    (3, 2)\n    >>> xy_v2(1, 2, 5)\n    (2, 1)\n    >>> xy_v2(1, 1, 1)\n    (1, 0)\n    >>> xy_v2(2, 3, 5)\n    (1, 1)\n    >>> xy_v2(7, 3, 12)\n    (2, 1)\n    >>> xy_v",
      -3.275390625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef solve_ax_plus_by_n(a, b, n):\n    if a == 0:\n        return b, n // b\n    elif b == 0:\n        return a, n // a\n    else:\n        d = gcd(a, b)\n        return a // d, b // d, n // d\n\nprint(solve_ax_plus_by_n(4, 7, 13))\nprint(solve_ax_plus_by_n(10, 15, 27))\nprint(solve_ax_plus_by_n(5, 12, 12))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))\nprint(solve_ax_plus_by_n(7, 2, 11))",
      -3.31640625
    ],
    [
      "def find_x_y(a, b, n):\n    if a == 0:\n        return 0, n\n    if b == 0:\n        return n, 0\n    if a * b < 0:\n        if a < 0:\n            if n % b == 0:\n                return n / b, 0\n            else:\n                return None\n        else:\n            if n % a == 0:\n                return 0, n / a\n            else:\n                return None\n    if a > 0:\n        if n % a == 0:\n            return n / a, 0\n        else:\n            return None\n    else:\n        if n % b == 0:\n            return 0, n / b\n        else:\n            return None",
      -3.396484375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef solution(a, b, n):\n    \"\"\"Returns the solution x and y to the equation ax + by = n.\n\n    >>> solution(1, 1, 1)\n    (1, 1)\n    >>> solution(1, 2, 3)\n    (3, -1)\n    >>> solution(2, 4, 2)\n    (2, 1)\n    >>> solution(2, 6, 4)\n    (2, 2)\n    >>> solution(4, 1, 10)\n    (5, -1)\n    >>> solution(6, 1, 20)\n    (10, -2)\n    \"\"\"\n\n    g = gcd(a, b)\n    if n % g != 0:\n        return None\n    else:\n        x = (n / g) * (b / g)\n        y = (n / g) * (-a / g)\n        return (x, y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.50390625
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef find_solutions(a: int, b: int, n: int) -> list[tuple[int, int]]:\n    \"\"\"Return a list of tuples (x, y) that satisfy ax + by = n.\n\n    >>> find_solutions(1, 1, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 2, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 3, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 4, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 5, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 6, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 7, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 8, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 9, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 10, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 11, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 12, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 13, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 14, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 15, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 16, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 17, 0)\n    [(0, 0)]\n    >>> find_solutions(1, 18, 0)\n    [(0",
      -3.580078125
    ],
    [
      "import unittest\n\n\ndef solution(a, b, n):\n    x = 0\n    y = 0\n    while x * a + y * b < n:\n        if x * a + y * b == n:\n            break\n        else:\n            x += 1\n            y += 1\n    return (x, y)\n\n\nclass Tests(unittest.TestCase):\n    \"\"\"Tests for solution.\"\"\"\n\n    def test_basic(self):\n        self.assertEqual(solution(1, 1, 2), (1, 1))\n        self.assertEqual(solution(1, 2, 5), (1, 2))\n        self.assertEqual(solution(2, 1, 5), (2, 1))\n        self.assertEqual(solution(2, 2, 5), (1, 1))\n        self.assertEqual(solution(3, 4, 5), (1, 1))\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -3.787109375
    ],
    [
      "from typing import List, Tuple\n\n\ndef gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef get_x_y(a: int, b: int, n: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    This is a brute-force approach. It is not efficient.\n    \"\"\"\n    if n == 0:\n        return [(0, 0)]\n\n    if gcd(a, b) != 1:\n        return []\n\n    x = 0\n    y = 0\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if x * a + y * b == n:\n                return [(x, y)]\n    return []\n\n\nif __name__ == \"__main__\":\n    assert get_x_y(3, 4, 2) == [(1, 1)]\n    assert get_x_y(1, 1, 2) == [(2, 0), (1, 1)]\n    assert get_x_y(1, 1, 3) == [(3, 0), (2, 1), (1, 2)]\n    assert get_x_y(2, 1, 1) == [(0, 0)]\n    assert get_x_y(3, 2, 1) == [(0, 0)]\n    assert get_x_y(3, 4, 3) == [(1, 0), (1, 2)]",
      -3.849609375
    ],
    [
      "def gcd(a, b):\n    \"\"\"\n    Euclidean Algorithm.\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef xy_satisfying_ax_bx(a, b, n):\n    \"\"\"\n    ax + by = n\n    gcd(a, b) = 1\n    \"\"\"\n    if gcd(a, b) != 1:\n        return False\n    if n % a == 0 and n % b == 0:\n        return (n // a, n // b)\n    return False\n\n\nif __name__ == \"__main__\":\n    assert xy_satisfying_ax_bx(2, 4, 12) == (3, 4)\n    assert xy_satisfying_ax_bx(2, 4, 13) is False\n    assert xy_satisfying_ax_bx(2, 4, 14) == (7, 2)",
      -4.11328125
    ],
    [
      "def solution(n: int) -> tuple:\n    \"\"\"\n    :param n: number\n    :return: tuple of x and y\n    >>> solution(10)\n    (1, 1)\n    >>> solution(24)\n    (2, 3)\n    >>> solution(1)\n    (1, 0)\n    >>> solution(15)\n    (3, 5)\n    \"\"\"\n    if n == 0:\n        return 0, 0\n    x = 0\n    y = 1\n    z = 1\n    while z < n:\n        z += (x + y)\n        if z == n:\n            break\n        y += 1\n    return x, y - y + x\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.3359375
    ],
    [
      "import unittest\n\n\ndef find_xy(a, b, n):\n    \"\"\"\n    find x and y that satisfies ax + by = n\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: list of x and y\n    \"\"\"\n    if a == 0:\n        return [0, n // b]\n    elif b == 0:\n        return [n // a, 0]\n    elif a * n < b * n:\n        x = find_xy(a, b - a, n)\n        return [x[0], x[1] + 1]\n    else:\n        x = find_xy(a - b, b, n - a)\n        return [x[0] + 1, x[1]]\n\n\nclass TestSuite(unittest.TestCase):\n\n    def setUp(self):\n        self.test_cases = [\n            ([3, 4, 6], [2, 3]),\n            ([3, 4, 6], [3, 2]),\n            ([3, 4, 6], [2, 4]),\n            ([3, 4, 6], [4, 2]),\n            ([3, 4, 6], [4, 3]),\n            ([3, 4, 6], [3, 4]),\n            ([3, 4, 6], [4, 4]),\n        ]\n        self.expected_values = [\n            [2, 3],\n            [3, 2],\n            [2, 4],\n            [4, 2],\n            [4, 3],\n            [3, 4],\n            [4, 4],\n        ]\n\n    def test_function(self):\n        for i, test_case in enumerate(self.test_cases):\n            param, expected = test_case, self.expected_values[i]\n            with self.subTest(f\"Test {i} with input {param}\"):\n                self.assertEqual(find_xy(*param), expected)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -4.3671875
    ],
    [
      "class Solution:\n    def getX_bruteforce(self, a: int, b: int, n: int) -> int:\n        \"\"\"\n        Time: O(n)\n        Space: O(1)\n\n        :param a:\n        :param b:\n        :param n:\n        :return:\n        \"\"\"\n        for x in range(n + 1):\n            y = n / a - x / b\n            if x.is_integer() and y.is_integer():\n                return x, y\n        return -1, -1\n\n    def getX_math(self, a: int, b: int, n: int) -> int:\n        \"\"\"\n        Time: O(1)\n        Space: O(1)\n\n        :param a:\n        :param b:\n        :param n:\n        :return:\n        \"\"\"\n\n        if a == 0:\n            return n / b\n        if n % a == 0:\n            return 0\n\n        x = (n % a) / gcd(a, n % a)\n        y = (n // a) / gcd(a, n % a)\n        return x, y\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
      -4.640625
    ],
    [
      "import unittest\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef xy_satisfying_equation(a, b, n):\n    if a == 0:\n        return (0, n)\n    if b == 0:\n        return (n, 0)\n\n    gcd_value = gcd(a, b)\n    a = a // gcd_value\n    b = b // gcd_value\n    if a > 0:\n        x = n // a\n        y = (n - a * x) // b\n    else:\n        y = n // b\n        x = (n - b * y) // a\n    return (x, y)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(xy_satisfying_equation(1, 1, 0), (0, 0))\n        self.assertEqual(xy_satisfying_equation(1, 1, 1), (1, 0))\n        self.assertEqual(xy_satisfying_equation(1, 1, 2), (2, 0))\n        self.assertEqual(xy_satisfying_equation(1, 1, 3), (3, 0))\n        self.assertEqual(xy_satisfying_equation(1, 1, 4), (4, 0))\n        self.assertEqual(xy_satisfying_equation(1, 1, 5), (5, 0))\n        self.assertEqual(xy_satisfying_equation(1, 1, 6), (6, 0))\n        self.assertEqual(xy_satisfying_equation(1, 1, 7), (7, 0))\n        self.assertEqual(xy_satisfying_equation(1, 1, 8), (8, 0))\n        self.assertEqual(xy_satisfying_equation(1, 1, 9), (9, 0))\n\n        self.assertEqual(xy_satisfying_equation(1, 2,",
      -4.64453125
    ],
    [
      "def solve_linear_congruence(a, b, n):\n    \"\"\"\n    Solve a*x + b*y = n\n    \"\"\"\n    # This is a trivial solution\n    if n == 0:\n        return (0, 0)\n\n    # Solve the equation ax + by = gcd(a, b)\n    # To find x and y, we need to solve the equation\n    # gcd(a, b)*x + 0*y = gcd(a, b)\n    # Let x = gcd(a, b)/a and y = gcd(a, b)/b\n    # Then we have\n    # gcd(a, b) = a*x + b*y = a*gcd(a, b)/a + b*gcd(a, b)/b = gcd(a, b)\n    gcd = find_gcd(a, b)\n    x = gcd / a\n    y = gcd / b\n\n    # Now, let's solve the equation\n    # gcd(a, b)*x + n*y = n\n    # We have\n    # gcd(a, b)*x = n - n*y\n    # Let x' = x - (n*y)/gcd(a, b)\n    # We have\n    # gcd(a, b)*x' = n - n*y\n    # x' = x - (n*y)/gcd(a, b)\n    x_prime = x - (n * y) / gcd\n\n    # Now, we need to find y\n    # Since\n    # gcd(a, b)*x' = n - n*y\n    # We have\n    # n - n*y = gcd(a, b)*x'\n    # n = gcd(a, b)*x' + n*y\n    # y = (n - gcd(a, b)*x')/n\n    y = (n - gcd * x_prime) / n\n\n    return (x_prime, y)\n\n\ndef find_gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of a and b\n    \"\"\"",
      -5.09765625
    ],
    [
      "def find_x_and_y(a, b, n):\n    if n == 0:\n        return 0, 0\n    if a == 0:\n        return 0, n\n    if n == 0:\n        return 0, n\n    if b == 0:\n        return n, 0\n    if b < 0:\n        return find_x_and_y(-a, -b, -n)\n    x, y = find_x_and_y(a, b, -n)\n    return -y, -x\n\n\ndef main():\n    print(find_x_and_y(3, 2, 1))\n    print(find_x_and_y(3, 2, 0))\n    print(find_x_and_y(3, 2, -1))\n    print(find_x_and_y(0, 2, -1))\n    print(find_x_and_y(2, 0, -1))\n    print(find_x_and_y(2, 0, 1))\n\n\nif __name__ == '__main__':\n    main()",
      -5.2421875
    ],
    [
      "from typing import List, Tuple\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor of a and b.\n\n    >>> gcd(12, 16)\n    4\n    >>> gcd(12, 15)\n    1\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef solution(a: int, b: int, n: int) -> List[Tuple[int, int]]:\n    \"\"\"Return a list of all solutions that satisfy ax + by = n.\n\n    >>> solution(12, 16, 24)\n    [(1, 2)]\n    >>> solution(12, 15, 24)\n    []\n    \"\"\"\n    if a == 0 or b == 0 or n == 0:\n        return []\n\n    if n < 0:\n        n = -n\n\n    g = gcd(a, b)\n    if n % g != 0:\n        return []\n\n    x = n // g\n    return [(x, n // a // x)]\n\n\ndef main():\n    print(solution(12, 16, 24))\n    print(solution(12, 15, 24))\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.53125
    ],
    [
      "def find_xy(a: int, b: int, n: int):\n    \"\"\"\n    >>> find_xy(1, 2, 1)\n    (1, 0)\n    >>> find_xy(1, 2, 2)\n    (0, 1)\n    >>> find_xy(1, 2, 3)\n    (1, 1)\n    >>> find_xy(1, 2, 4)\n    (2, 1)\n    >>> find_xy(1, 2, 5)\n    (1, 2)\n    >>> find_xy(1, 2, 6)\n    (0, 2)\n    >>> find_xy(1, 2, 7)\n    (1, 3)\n    >>> find_xy(1, 2, 8)\n    (2, 2)\n    >>> find_xy(1, 2, 9)\n    (1, 4)\n    >>> find_xy(1, 2, 10)\n    (0, 4)\n    \"\"\"\n    if n == 0:\n        return 0, 0\n    if a == 0:\n        return 0, n // b\n    if b == 0:\n        return n // a, 0\n    if n < 0:\n        return -find_xy(-a, -b, -n)\n    x, y = 0, n // b\n    while x < y:\n        if a * x + b * y == n:\n            return x, y\n        elif a * x + b * y < n:\n            x += 1\n        else:\n            y -= 1\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.671875
    ],
    [
      "def solution(a: int, b: int, n: int) -> tuple:\n    \"\"\"Returns the solution to ax + by = n.\n\n    >>> solution(1, 1, 2)\n    (2, 1)\n    >>> solution(1, 2, 3)\n    (1, 1)\n    >>> solution(2, 3, 5)\n    (1, 1)\n    >>> solution(4, 1, 4)\n    (1, 0)\n    >>> solution(1, 4, 4)\n    (0, 1)\n    >>> solution(1, 1, 1)\n    (1, 0)\n    >>> solution(1, 1, 0)\n    (0, 0)\n    \"\"\"\n    if n == 0:\n        return (0, 0)\n    if a == 0 and b == 0:\n        return (0, 0)\n    if a == 0:\n        return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    x, y = 1, n // a\n    while y * b != n - x * a:\n        x += 1\n        y = n // a - x\n    return (x, y)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    n = int(input(\"Enter n: \"))\n    print(f\"Solution: {solution(a, b, n)}\")",
      -5.9140625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef x_and_y(a, b, n):\n    if n % a == 0 and n % b == 0:\n        return [n / a, 0]\n    else:\n        gcd_ab = gcd(a, b)\n        if n % gcd_ab == 0:\n            x = n / gcd_ab\n            for y in range(gcd_ab + 1):\n                if y * a + b * x == n:\n                    return [x, y]\n        else:\n            return None\n\n\ndef test_x_and_y():\n    assert x_and_y(2, 1, 4) == [2, 1]\n    assert x_and_y(2, 1, 5) == None\n    assert x_and_y(5, 3, 15) == [3, 5]\n    assert x_and_y(5, 3, 17) == None\n    assert x_and_y(5, 3, 18) == [3, 6]\n    assert x_and_y(5, 3, 20) == [4, 5]\n    assert x_and_y(5, 3, 21) == None\n    assert x_and_y(5, 3, 22) == [4, 7]\n    assert x_and_y(5, 3, 23) == None\n    assert x_and_y(5, 3, 24) == [4, 8]\n\n\nif __name__ == '__main__':\n    test_x_and_y()",
      -6.046875
    ],
    [
      "def get_x_y(a, b, n):\n    if a == 0:\n        return 0, n / b\n    elif b == 0:\n        return n / a, 0\n    else:\n        x = (n * b) / a\n        y = (n * a) / b\n        if x % 1 == 0:\n            return x, 0\n        elif y % 1 == 0:\n            return 0, y\n        else:\n            return 0, 0\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    n = int(input(\"Enter n: \"))\n    x, y = get_x_y(a, b, n)\n    print(\"x: \", x)\n    print(\"y: \", y)",
      -6.296875
    ],
    [
      "def find_x_and_y(a, b, n):\n    # Write your code here\n    if n == 0:\n        return (0, 0)\n    if a == 0:\n        return (0, n)\n    if b == 0:\n        return (n, 0)\n    if a == b:\n        return (n//a, n//a)\n    x = 0\n    y = n\n    while y % a != 0:\n        x += 1\n        y -= b\n    return (x, y//a)\n\n\nprint(find_x_and_y(3, 5, 6))\nprint(find_x_and_y(2, 4, 10))\nprint(find_x_and_y(2, 4, 11))\nprint(find_x_and_y(1, 2, 1))\nprint(find_x_and_y(1, 2, 3))\nprint(find_x_and_y(1, 2, 5))\nprint(find_x_and_y(1, 2, 7))\nprint(find_x_and_y(1, 2, 11))\nprint(find_x_and_y(1, 2, 13))\nprint(find_x_and_y(1, 2, 15))\nprint(find_x_and_y(1, 2, 17))\nprint(find_x_and_y(1, 2, 19))\nprint(find_x_and_y(1, 2, 20))\nprint(find_x_and_y(1, 2, 21))\nprint(find_x_and_y(1, 2, 22))\nprint(find_x_and_y(1, 2, 23))\nprint(find_x_and_y(1, 2, 25))\nprint(find_x_and_y(1, 2, 27))\nprint(find_x_and_y(1, 2, 29))",
      -6.3046875
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef find_xy(a, b, n):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if a == 0 and b == 0:\n        return []\n\n    if a == 0:\n        return [0, n // b]\n\n    if b == 0:\n        return [n // a, 0]\n\n    g = gcd(a, b)\n    if a < 0:\n        a, b = -a, -b\n\n    x, y = 1, n // a\n    while y % b != n % b:\n        x, y = y, (y * n - y * a * x) // b\n\n    gx, gy = x // g, y // g\n    return [gx, gy]\n\n\ndef test_find_xy():\n    assert find_xy(0, 0, 0) == []\n    assert find_xy(1, 1, 1) == [1, 1]\n    assert find_xy(1, 1, 2) == [2, 1]\n    assert find_xy(1, 2, 3) == [3, 1]\n    assert find_xy(2, 1, 3) == [1, 3]\n    assert find_xy(2, 3, 5) == [1, 1]\n    assert find_xy(3, 2, 5) == [1, 1]\n    assert find_xy(1, 2, 5) == [3, 1]\n    assert find_xy(2, 1, 5) == [1, 3]\n    assert find_xy(2, -1, 5) == [-3, -1]\n\n\nif __name__ == '__main__':\n    test_find_xy()",
      -6.52734375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef get_xy(a, b, n):\n    \"\"\"\n    a, b, n are all positive integers.\n    \"\"\"\n    d = gcd(a, b)\n    x = (b / d)\n    y = (a / d)\n    return (x, y)\n\ndef test_get_xy():\n    assert get_xy(2, 1, 2) == (1, 2)\n    assert get_xy(1, 2, 2) == (2, 1)\n    assert get_xy(1, 1, 1) == (1, 1)\n    assert get_xy(1, 2, 3) == (3, 1)\n    assert get_xy(2, 1, 3) == (1, 3)\n    assert get_xy(2, 3, 4) == (2, 1)\n    assert get_xy(3, 2, 4) == (1, 2)\n    assert get_xy(3, 4, 6) == (2, 1)\n    assert get_xy(4, 3, 6) == (1, 2)\n    assert get_xy(4, 6, 12) == (3, 2)\n    assert get_xy(6, 4, 12) == (2, 3)\n\nif __name__ == '__main__':\n    test_get_xy()",
      -6.7265625
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef x_and_y(a, b, n):\n    \"\"\"\n    Solve the equation ax + by = n\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: tuple(x, y)\n    \"\"\"\n    if n == 0:\n        return 0, 0\n    if n < 0:\n        n = -n\n        a = -a\n        b = -b\n    gcd = gcd(a, b)\n    if gcd != 1:\n        return None, None\n    x = n * b\n    y = -n * a\n    x /= gcd\n    y /= gcd\n    return int(x), int(y)\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (2, 3, 4),\n        (7, 10, 13),\n        (7, 10, 14),\n        (7, 10, -14),\n        (0, 1, 0),\n        (-7, -10, -13),\n        (-7, -10, -14),\n        (-7, -10, 14),\n        (-7, -10, 13),\n        (-7, -10, 0),\n        (0, 0, 0),\n    ]\n    for test_case in test_cases:\n        print(\n            \"{} + {} * {} = {}\".format(\n                test_case[0], test_case[1], test_case[2], test_case[0] * test_case[1] + test_case[2]\n            )\n        )\n        print(\"X: {}\".format(x_and_y(test_case[0], test_case[1], test_case[2])))",
      -6.95703125
    ],
    [
      "def solve(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return (0, n / b)\n    if b == 0:\n        return (n / a, 0)\n    if a < 0:\n        a, b, n = -a, -b, -n\n    if a < b:\n        a, b = b, a\n        n = -n\n    if a % b == 0:\n        return (0, n / a)\n    x0, y0 = 0, 1\n    x1, y1 = 1, 0\n    aInverse = a ** (b - 1)\n    while True:\n        q = (x0 * b - x1 * a) // a\n        xNew = x0 - q * x1\n        yNew = y0 - q * y1\n        if xNew == 0:\n            return (xNew, n // b)\n        if yNew == 0:\n            return (n // a, xNew)\n        x0, x1 = x1, xNew\n        y0, y1 = y1, yNew\n\n\nfor i in range(1, 11):\n    for j in range(1, 11):\n        for k in range(1, 11):\n            print(i, j, k, solve(i, j, k))",
      -7.265625
    ],
    [
      "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n\n    if a % b == 0:\n        return b\n\n    return gcd(b, a % b)\n\n\ndef get_x_y(a, b, n):\n    # a, b, n are all positive\n    # a > b\n    # a, b, n are all integers\n    # a * x + b * y = n\n    # gcd(a, b) | n\n    # x = n // gcd(a, b) * x'\n    # y = n // gcd(a, b) * y'\n\n    g = gcd(a, b)\n    x_prime = n // g\n    y_prime = 0\n\n    if g == a:\n        y_prime = b // g * x_prime\n    elif g == b:\n        y_prime = a // g * x_prime\n\n    return x_prime, y_prime\n\n\nif __name__ == '__main__':\n    a = 5\n    b = 3\n    n = 12\n    print(get_x_y(a, b, n))",
      -7.59375
    ],
    [
      "from typing import List, Tuple\n\n\ndef gcd(a: int, b: int) -> int:\n    if a < b:\n        a, b = b, a\n\n    if a % b == 0:\n        return b\n\n    return gcd(b, a % b)\n\n\ndef get_xy(a: int, b: int, n: int) -> Tuple[int, int]:\n    \"\"\"\n    Calculate x and y given a, b and n.\n    \"\"\"\n    g = gcd(a, b)\n    a, b = a // g, b // g\n\n    x = 0\n    y = n // a\n\n    while True:\n        q = n // (a * y + b * x)\n        x = x + b * q\n        y = y + a * q\n        if x >= 0 and y >= 0 and n // (a * x + b * y) == 1:\n            break\n\n    return x, y\n\n\nif __name__ == \"__main__\":\n    for a, b, n in [\n        (13, 11, 10),\n        (3, 5, 7),\n        (7, 5, 10),\n        (13, 11, 10),\n        (13, 11, 11),\n        (13, 11, 12),\n        (13, 11, 13),\n        (13, 11, 14),\n    ]:\n        print(f\"{a} * x + {b} * y = {n}\")\n        x, y = get_xy(a, b, n)\n        print(f\"x = {x}, y = {y}\")",
      -7.67578125
    ],
    [
      "import time\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd2(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef checkio(a, b, n):\n    if a == 0 and b == 0:\n        return [0, 0]\n    if a == 0:\n        return [0, n // b]\n    if b == 0:\n        return [n // a, 0]\n\n    x = 0\n    y = 0\n    g = gcd2(a, b)\n    a = a // g\n    b = b // g\n    if a == 1:\n        x = n // b\n        y = 0\n    elif b == 1:\n        x = 0\n        y = n // a\n    else:\n        x = n // b\n        y = n % b\n        while x > 0 and y > 0 and y < b:\n            x -= 1\n            y += a\n            y %= b\n    return [x, y]\n\n\ndef test_function():\n    assert checkio(3, 6, 9) == [1, 2], \"3x + 6y = 9\"\n    assert checkio(1, 1, 0) == [0, 0], \"1x + 1y = 0\"\n    assert checkio(1, 1, 2) == [2, 1], \"1x + 1y = 2\"\n    assert checkio(3, 5, 8) == [0, 2], \"3x + 5y = 8\"\n    assert checkio(10, 3, 30) == [1, 0], \"10x + 3y = 30\"\n    assert checkio(10, 3, 31) == [1, 1], \"10x + 3y = 31\"\n    assert checkio(10, 3, 32) == [2",
      -7.75
    ],
    [
      "from typing import List, Tuple\n\n\ndef gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef get_x_and_y(a: int, b: int, n: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    >>> get_x_and_y(1, 2, 4)\n    [(2, 1)]\n    >>> get_x_and_y(2, 3, 10)\n    [(3, 1)]\n    >>> get_x_and_y(3, 5, 15)\n    [(5, 1), (1, 5)]\n    >>> get_x_and_y(1, 3, 4)\n    []\n    >>> get_x_and_y(1, 2, 6)\n    []\n    >>> get_x_and_y(3, 4, 6)\n    []\n    \"\"\"\n    if n % gcd(a, b) != 0:\n        return []\n\n    x = n // gcd(a, b)\n    y = b * x // a\n\n    return [(x, y)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.91796875
    ],
    [
      "def find_xy(a, b, n):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: x, y or None, None\n    \"\"\"\n    if a == 0 and b == 0:\n        return None, None\n    if (a == 0 and n % b == 0) or (b == 0 and n % a == 0):\n        return n // a, n // b\n    if a * b == 0:\n        return n // abs(a), 0\n    x, y = find_xy(b, a, n)\n    if x is None:\n        return y, x\n    return x, y\n\n\nif __name__ == '__main__':\n    for a in range(-10, 11):\n        for b in range(-10, 11):\n            for n in range(-100, 100):\n                print(f'a: {a}, b: {b}, n: {n}, x: {find_xy(a, b, n)}')",
      -8.203125
    ],
    [
      "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n\ndef solve_linear_congruence(a, b, n):\n    if a == 0:\n        return (n / b, 0)\n    g = gcd(a, b)\n    a = a / g\n    b = b / g\n    if a == 1:\n        return (n / b, 0)\n    else:\n        for i in range(0, b):\n            if (a * i) % b == 1:\n                return (n / b, i)\n\n\ndef test_solve_linear_congruence():\n    assert solve_linear_congruence(1, 1, 1) == (1, 0)\n    assert solve_linear_congruence(1, 2, 1) == (1, 0)\n    assert solve_linear_congruence(2, 1, 1) == (1, 0)\n    assert solve_linear_congruence(1, 3, 3) == (1, 1)\n    assert solve_linear_congruence(2, 3, 3) == (1, 1)\n    assert solve_linear_congruence(3, 2, 3) == (1, 1)\n    assert solve_linear_congruence(1, 5, 5) == (1, 2)\n    assert solve_linear_congruence(2, 5, 5) == (1, 2)\n    assert solve_linear_congruence(5, 2, 5) == (1, 2)\n    assert solve_linear_congruence(1, 7, 7) == (1, 3)\n    assert solve_linear_congruence(2, 7, 7) == (1, 3)\n    assert solve_linear_congruence(7, 2, 7) == (1, 3)\n    assert solve_linear_congruence(1, 11, 11) == (1, 4",
      -8.4609375
    ],
    [
      "def solve(a, b, n):\n    if n == 0:\n        return 0, 0\n\n    if a == 0:\n        return 0, n // b\n    if b == 0:\n        return n // a, 0\n\n    x = 0\n    y = n\n    while y >= 0:\n        cur = y * a\n        x = (n - y) // b\n        if cur == n:\n            return x, y\n        elif cur > n:\n            y -= 1\n        else:\n            y -= 1\n            x += 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(solve(1, 1, 2))\n    print(solve(1, 0, 2))\n    print(solve(0, 1, 2))\n    print(solve(1, 2, 2))\n    print(solve(3, 4, 2))\n    print(solve(1, 2, 3))",
      -8.6640625
    ],
    [
      "class Solution(object):\n    def getXY(self, n, a, b):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :type b: int\n        :rtype: List[int]\n        \"\"\"\n        if a == 0 and b == 0:\n            return []\n        if a == 0:\n            return [0, n / b]\n        if b == 0:\n            return [n / a, 0]\n        if a == b:\n            return []\n        if a * b < 0:\n            return [0, n / -a]\n        if a < 0:\n            a, b = -a, -b\n        if b < 0:\n            return [0, n / a]\n        if n % a != 0:\n            return []\n        return [n / a, 0]\n\n\ns = Solution()\nprint(s.getXY(1, 2, 1))\nprint(s.getXY(1, 2, 3))\nprint(s.getXY(2, 1, 1))\nprint(s.getXY(2, 1, 3))\nprint(s.getXY(3, 1, 2))\nprint(s.getXY(3, 1, 3))\nprint(s.getXY(1, 2, 4))\nprint(s.getXY(1, 2, 5))\nprint(s.getXY(2, 1, 4))\nprint(s.getXY(2, 1, 5))\nprint(s.getXY(3, 1, 4))\nprint(s.getXY(3, 1, 5))\nprint(s.getXY(4, 1, 2))\nprint(s.getXY(4, 1, 3))\nprint(s.getXY(5, 1, 2))\nprint(s.getXY(5, 1, 3))",
      -8.7578125
    ],
    [
      "import unittest\n\n\ndef gcd(a, b):\n    \"\"\"Calculate the greatest common divisor of a and b\n\n    Args:\n        a: an integer\n        b: an integer\n\n    Returns:\n        the greatest common divisor of a and b\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef get_xy(a, b, n):\n    \"\"\"Calculate x and y that satisfies ax + by = n\n\n    Args:\n        a: an integer\n        b: an integer\n        n: an integer\n\n    Returns:\n        a list of x and y that satisfies ax + by = n\n    \"\"\"\n    g = gcd(a, b)\n    if g == 1:\n        return [0, 0]\n    else:\n        g_a = a // g\n        g_b = b // g\n        x = n // g_b\n        y = x * g_a - n\n        return [x, y]\n\n\nclass TestGetXY(unittest.TestCase):\n    def test_get_xy(self):\n        self.assertEqual(get_xy(3, 5, 8), [0, 1])\n        self.assertEqual(get_xy(10, 20, 4), [0, 0])\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -9.1171875
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef solution(a, b, n):\n    \"\"\"Returns the tuple x, y, that satisfy ax + by = n.\n\n    >>> solution(2, 3, 5)\n    (1, 1)\n    >>> solution(1, 2, 5)\n    (2, 1)\n    >>> solution(3, 4, 6)\n    (1, 1)\n    >>> solution(1, 2, 6)\n    (1, 2)\n    >>> solution(2, 3, 7)\n    (1, 1)\n    >>> solution(1, 2, 10)\n    (1, 2)\n    >>> solution(1, 2, 12)\n    (1, 3)\n    >>> solution(1, 2, 13)\n    (1, 3)\n    \"\"\"\n    if a == 0 and b == 0:\n        return None\n    if a == 0:\n        return None\n    if b == 0:\n        return None\n    if n == 0:\n        return (0, 0)\n\n    if n < 0:\n        return solution(-a, -b, -n)\n\n    if a < 0:\n        return solution(-a, -b, -n)\n\n    if b < 0:\n        return solution(a, -b, -n)\n\n    if a == 1:\n        return (n, 0)\n\n    if b == 1:\n        return (0, n)\n\n    if n == 1:\n        return (1, 1)\n\n    if a == b:\n        return (1, a)\n\n    if n % gcd(a, b) != 0:\n        return None\n\n    x = n * (b // gcd(a, b))\n    y = a * (x // n)\n\n    return (x, y)\n\n\nif __name__ == \"__main__\":\n    import doctest",
      -9.1171875
    ],
    [
      "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef x_and_y(a, b, n):\n    if n % lcm(a, b) != 0:\n        return []\n    else:\n        x = n // lcm(a, b)\n        y = n // lcd(a, b) * gcd(a, b)\n        return [x, y]\n\n\nprint(x_and_y(1, 2, 12))\nprint(x_and_y(3, 4, 12))\nprint(x_and_y(1, 2, 3))",
      -9.28125
    ],
    [
      "def find_x_and_y(a, b, n):\n    \"\"\"\n    Find the x and y that satisfy ax + by = n.\n    \"\"\"\n    # check if a and b are coprime\n    if gcd(a, b) != 1:\n        raise Exception(\"a and b should be coprime\")\n    # check if n is a multiple of a or b\n    if n % a == 0 or n % b == 0:\n        raise Exception(\"n should not be a multiple of a or b\")\n\n    x = 0\n    y = 0\n    while x < n:\n        x += a\n        y += b\n        if x % a == 0 and x % b == 0:\n            break\n    return x // a, x // b\n\n\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of a and b.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a",
      -9.4375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef solution(a, b, n):\n    \"\"\"Returns the x and y that satisfy ax + by = n.\n\n    >>> solution(2, 3, 5)\n    (1, 2)\n    >>> solution(1, 1, 1)\n    (1, 0)\n    >>> solution(1, 1, 2)\n    (2, 0)\n    >>> solution(1, 2, 4)\n    (1, 2)\n    \"\"\"\n    if n == 0:\n        return (0, 0)\n    if n < 0:\n        return solution(a, b, -n)\n    if a == 0 and b == 0:\n        return (0, 0)\n    if a == 0 or b == 0:\n        return (n, 0) if a == 0 else (0, n)\n    if a < 0 or b < 0:\n        return solution(-a, -b, -n)\n\n    g = gcd(a, b)\n    x = 0\n    y = n\n    while y % b != n % b:\n        q = y // b\n        x += q * a\n        y -= q * b\n    return (x, y // g)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -9.8359375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef get_x_and_y(a, b, n):\n    # assume a > 0, b > 0, n > 0\n    if a == b:\n        return 1, n / a\n    else:\n        g = gcd(a, b)\n        x = (n % g) / a\n        y = b / g\n        return x, y\n\nprint(get_x_and_y(1, 2, 2))\nprint(get_x_and_y(1, 2, 3))\nprint(get_x_and_y(1, 2, 4))\nprint(get_x_and_y(1, 2, 5))\nprint(get_x_and_y(1, 2, 6))\nprint(get_x_and_y(1, 2, 7))\nprint(get_x_and_y(1, 2, 8))\nprint(get_x_and_y(1, 2, 9))\nprint(get_x_and_y(1, 2, 10))\nprint(get_x_and_y(1, 2, 11))\nprint(get_x_and_y(1, 2, 12))\nprint(get_x_and_y(1, 2, 13))\nprint(get_x_and_y(1, 2, 14))\nprint(get_x_and_y(1, 2, 15))\nprint(get_x_and_y(1, 2, 16))\nprint(get_x_and_y(1, 2, 17))\nprint(get_x_and_y(1, 2, 18))\nprint(get_x_and_y(1, 2, 19))\nprint(get_x_and_y(1, 2, 20))\nprint(get_x_and_y(1",
      -10.4140625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef solution(a, b, n):\n    for x in range(n+1):\n        y = (n * b) // a - x\n        if gcd(a, b) * y == b:\n            return [x, y]\n    return []\n\n\ndef test(expect, output):\n    print(f'expect: {expect} | output: {output}')\n\n\nif __name__ == '__main__':\n    # Example 1:\n    # Input: a = 3, b = 1, n = 5\n    # Output: [-1, 2]\n    test([-1, 2], solution(3, 1, 5))\n\n    # Example 2:\n    # Input: a = 2, b = 1, n = 3\n    # Output: [0, 1]\n    test([0, 1], solution(2, 1, 3))\n\n    # Example 3:\n    # Input: a = 1, b = -1, n = -3\n    # Output: [0, -1]\n    test([0, -1], solution(1, -1, -3))\n\n    # Example 4:\n    # Input: a = -19, b = -15, n = -24\n    # Output: [1, -2]\n    test([1, -2], solution(-19, -15, -24))",
      -10.8125
    ],
    [
      "# O(1)\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef solve_ax_plus_by(a, b, n):\n    x, y = 0, 0\n    g = gcd(a, b)\n    a, b, n = a // g, b // g, n // g\n    if a == 1:\n        x = n\n    elif a == -1:\n        x = -n\n    elif a % 2 == 0:\n        x = solve_ax_plus_by(a // 2, b, n)\n    else:\n        x = -solve_ax_plus_by(-a, b, -n)\n    if b == 1:\n        y = x\n    elif b == -1:\n        y = -x\n    elif b % 2 == 0:\n        y = solve_ax_plus_by(a, b // 2, n)\n    else:\n        y = -solve_ax_plus_by(a, -b, -n)\n    return x, y\n\n\nassert solve_ax_plus_by(1, 1, 1) == (1, 1)\nassert solve_ax_plus_by(1, 2, 1) == (1, 0)\nassert solve_ax_plus_by(2, 1, 1) == (0, 1)\nassert solve_ax_plus_by(3, 5, 1) == (1, 1)\nassert solve_ax_plus_by(5, 3, 1) == (1, 1)\nassert solve_ax_plus_by(5, 3, 2) == (2, 1)\nassert solve_ax_plus_by(3, 5, 2) == (1, 2)",
      -10.8515625
    ],
    [
      "from itertools import combinations\nfrom math import gcd\n\n\ndef find_xy(a, b, n):\n    \"\"\"\n    Find x and y that satisfies ax + by = n.\n    \"\"\"\n    if n == 0:\n        return 0, 0\n\n    for x, y in combinations(range(abs(n) + 1), 2):\n        if a * x + b * y == n:\n            return x, y\n\n    return None\n\n\ndef find_xy_gcd(a, b, n):\n    \"\"\"\n    Find x and y that satisfies ax + by = n.\n    \"\"\"\n    if n == 0:\n        return 0, 0\n\n    x, y, g = 0, 0, gcd(a, b)\n    while n:\n        x, y = y, (a * y - b * x) // g\n        n, r = divmod(g * n, b)\n        if r != 0:\n            return None\n\n    return x, y",
      -11.2890625
    ],
    [
      "import unittest\n\n\ndef gcd(x: int, y: int) -> int:\n    \"\"\"Returns the greatest common divisor of x and y.\"\"\"\n    if x < y:\n        x, y = y, x\n\n    while y != 0:\n        r = x % y\n        x = y\n        y = r\n\n    return x\n\n\ndef ax_plus_by_equals_n(a: int, b: int, n: int) -> list[int]:\n    \"\"\"Returns a list of x and y that satisfies ax + by = n.\"\"\"\n    x = 0\n    y = 1\n    q = n // gcd(a, b)\n\n    while True:\n        x = q * x + a\n        y = q * y + b\n\n        if x - a < 0:\n            x = x - a + b\n            y = y - 1\n\n        if x - a > 0:\n            x = x - a - b\n            y = y - 1\n\n        if y - b < 0:\n            x = x - 1\n            y = y - b + a\n\n        if y - b > 0:\n            x = x - 1\n            y = y - b - a\n\n        if x == n:\n            return [x, y]\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        result = ax_plus_by_equals_n(3, 4, 12)\n        self.assertEqual(result, [3, 5])\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -12.96875
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_list(numbers):\n    return reduce(gcd, numbers)\n\n\ndef find_xy(numbers):\n    if len(numbers) % 2 == 0:\n        return None\n\n    x = numbers[len(numbers) / 2]\n    y = numbers[~len(numbers) / 2]\n    for i in numbers:\n        if i % x != 0 or i % y != 0:\n            return None\n\n    gcd_value = gcd_list(numbers)\n    if gcd_value == 1:\n        return numbers[len(numbers) / 2], numbers[~len(numbers) / 2]\n\n    return find_xy(\n        [i / gcd_value for i in numbers]\n    )\n\n\ndef test_find_xy():\n    assert find_xy([1, 2, 3, 4]) == (1, 2)\n    assert find_xy([6, 9, 12, 18]) == (2, 3)\n    assert find_xy([10, 12, 15, 20]) == (2, 5)\n    assert find_xy([11, 17, 23, 33]) == (2, 13)\n    assert find_xy([11, 17, 23, 33, 44]) == (2, 13)\n    assert find_xy([11, 17, 23, 33, 44, 55]) is None\n\n\nif __name__ == '__main__':\n    test_find_xy()",
      -14.9375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}