{
  "problem": {
    "task_id": "MBPP/47",
    "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
    "test_list": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ],
    "challenge_test_list": [
      "assert compute_Last_Digit(3,7) == 0",
      "assert compute_Last_Digit(20,23) == 6",
      "assert compute_Last_Digit(1021,1024) == 4"
    ],
    "problem_id": 36
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef last_digit(a, b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    return fact_a // fact_b\n\n\nprint(last_digit(13, 10))\nprint(last_digit(100, 25))",
      2.45703125
    ],
    [
      "def last_digit(a, b):\n    a = a - 1\n    b = b - 1\n\n    while a > 0:\n        b = b % a\n        a = a - 1\n\n    return b % 10\n\n\nprint(last_digit(10, 100))",
      2.451171875
    ],
    [
      "def find_last_digit(a, b):\n    \"\"\"\n    >>> find_last_digit(2, 12)\n    8\n    >>> find_last_digit(3, 5)\n    6\n    \"\"\"\n\n    if a > b:\n        a, b = b, a\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n\n    return (factorial(b) // factorial(a)) % 10\n\n\ndef main():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    print(f\"The last digit of {a}! divided by {b}! is {find_last_digit(a, b)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      2.232421875
    ],
    [
      "def is_divisible(n1, n2):\n    return n1 % n2 == 0\n\n\ndef last_digit(n1, n2):\n    if is_divisible(factorial(n1), factorial(n2)):\n        return n2\n    return -1",
      1.4365234375
    ],
    [
      "def last_digit_divide(a, b):\n    \"\"\"\n    :param a: int - number to be divided\n    :param b: int - number to divide\n    :return: int - last digit of a/b\n    \"\"\"\n    return str(factorial(a) // factorial(b))[-1]\n\n\ndef factorial(n):\n    if n < 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(last_digit_divide(19, 24))\nprint(last_digit_divide(24, 19))\nprint(last_digit_divide(20, 24))",
      1.2119140625
    ],
    [
      "def last_digit(a, b):\n    factorial_a = 1\n    factorial_b = 1\n    for i in range(1, a+1):\n        factorial_a = factorial_a*i\n\n    for i in range(1, b+1):\n        factorial_b = factorial_b*i\n\n    if factorial_a % factorial_b == 0:\n        return factorial_a % 10\n    return -1\n\n\nprint(last_digit(4, 5))\nprint(last_digit(5, 4))\nprint(last_digit(4, 4))",
      0.6630859375
    ],
    [
      "def find_last_digit(a, b):\n    factorial_a = factorial(a)\n    factorial_b = factorial(b)\n\n    while factorial_a > 0:\n        factorial_a, last_digit_a = factorial_a // 10, factorial_a % 10\n\n    while factorial_b > 0:\n        factorial_b, last_digit_b = factorial_b // 10, factorial_b % 10\n\n    if last_digit_a == last_digit_b:\n        return last_digit_a\n\n    return 0\n\n\ndef factorial(n):\n    if n < 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
      0.18896484375
    ],
    [
      "def last_digit(a, b):\n    if a == 1:\n        return b\n\n    if a > b:\n        return last_digit(b, a)\n\n    if b % a == 0:\n        return last_digit(a, b // a)\n    else:\n        return last_digit(a, b % a)\n\n\nprint(last_digit(12, 30))",
      0.1580810546875
    ],
    [
      "def lastDigit(a, b):\n\treturn (a//b)%10\n\nprint(lastDigit(10, 2))\nprint(lastDigit(3999, 39))\nprint(lastDigit(145, 31))",
      0.1396484375
    ],
    [
      "def lastDigit(a, b):\n    if a == 0 or b == 0:\n        return 1\n    else:\n        factA = factorial(a)\n        factB = factorial(b)\n        if factA % factB == 0:\n            return factA // factB\n        else:\n            return 0",
      0.130126953125
    ],
    [
      "from math import factorial\n\ndef last_digit(a, b):\n    return str((factorial(a) % factorial(b)) % 10)\n\nprint(last_digit(3, 5))\nprint(last_digit(23, 15))\nprint(last_digit(4, 5))",
      -0.260009765625
    ],
    [
      "def last_digit(a, b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    if fact_b % fact_a != 0:\n        return -1\n    else:\n        return fact_b // fact_a % 10\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(last_digit(10, 20))\nprint(last_digit(20, 30))\nprint(last_digit(30, 40))",
      -0.345947265625
    ],
    [
      "def last_digit(a,b):\n    # your code goes here\n    fact_a = 1\n    fact_b = 1\n    for i in range(1,a+1):\n        fact_a = fact_a*i\n    for i in range(1,b+1):\n        fact_b = fact_b*i\n    return fact_b%fact_a\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    result = last_digit(a, b)\n    print(result)",
      -0.6083984375
    ],
    [
      "def last_digit(a,b):\n    fact_a = 1\n    fact_b = 1\n    for i in range(1,a+1):\n        fact_a = fact_a*i\n    for i in range(1,b+1):\n        fact_b = fact_b*i\n    return fact_a%fact_b\n\nprint(last_digit(20,200))",
      -0.62744140625
    ],
    [
      "def last_digit_factorial(a, b):\n    fa = fact(a)\n    fb = fact(b)\n    return fa % fb\n\n\ndef fact(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * fact(n - 1)\n\n\nprint(last_digit_factorial(10, 20))",
      -0.65625
    ],
    [
      "def last_digit(a, b):\n    return str(factorial(a)//factorial(b))[-1]\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(last_digit(10, 5))\nprint(last_digit(20, 6))\nprint(last_digit(30, 10))\nprint(last_digit(40, 7))",
      -0.69384765625
    ],
    [
      "def last_digit(a, b):\n    fact_a = 1\n    fact_b = 1\n    while a != 0:\n        fact_a = fact_a * a\n        a -= 1\n    while b != 0:\n        fact_b = fact_b * b\n        b -= 1\n    if fact_a % fact_b == 0:\n        return fact_a // fact_b\n    else:\n        return -1\n\n\nprint(last_digit(5, 2))\nprint(last_digit(10, 2))\nprint(last_digit(100, 100))",
      -0.7314453125
    ],
    [
      "def last_digit_factorial(a, b):\n    fact_a = 1\n    fact_b = 1\n    for i in range(1, a+1):\n        fact_a = fact_a*i\n    for i in range(1, b+1):\n        fact_b = fact_b*i\n    if fact_b%fact_a == 0:\n        return fact_b//fact_a\n    else:\n        return fact_b%fact_a\n\nprint(last_digit_factorial(5, 3))\nprint(last_digit_factorial(10, 10))\nprint(last_digit_factorial(30, 30))",
      -0.779296875
    ],
    [
      "def last_digit(a, b):\n    f1 = factorial(a)\n    f2 = factorial(b)\n    print(f1, f2)\n    return f1 % f2\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(last_digit(10, 15))",
      -0.8544921875
    ],
    [
      "def last_digit(a, b):\n    if a < b:\n        return -1\n    factorial_a = 1\n    factorial_b = 1\n\n    while a >= 1:\n        factorial_a *= a\n        a -= 1\n    while b >= 1:\n        factorial_b *= b\n        b -= 1\n    if factorial_a % factorial_b == 0:\n        return factorial_a // factorial_b\n    else:\n        return -1\n\n\nprint(last_digit(2, 5))",
      -0.85693359375
    ],
    [
      "def last_digit(a, b):\n    fact_a = 1\n    fact_b = 1\n    while a > 0:\n        fact_a = fact_a * a\n        a -= 1\n    while b > 0:\n        fact_b = fact_b * b\n        b -= 1\n    if fact_a % fact_b == 0:\n        return fact_b % 10\n\n\nprint(last_digit(12, 3))\nprint(last_digit(13, 4))\nprint(last_digit(14, 5))\nprint(last_digit(15, 6))",
      -0.85693359375
    ],
    [
      "def last_digit_div(a, b):\n    factorial_a = factorial(a)\n    factorial_b = factorial(b)\n    if factorial_a % factorial_b == 0:\n        return factorial_a // factorial_b\n    return factorial_a // factorial_b + 1\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    a, b = 5, 3\n    print(last_digit_div(a, b))",
      -0.85693359375
    ],
    [
      "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef last_digit_of_factorial(a, b):\n    a_factorial = factorial(a)\n    b_factorial = factorial(b)\n    return a_factorial % b_factorial\n\n\nif __name__ == \"__main__\":\n    print(last_digit_of_factorial(24, 100))",
      -0.85693359375
    ],
    [
      "def lastDigit(a,b):\n    factorial_a = factorial(a)\n    factorial_b = factorial(b)\n    if factorial_a%factorial_b == 0:\n        return factorial_a/factorial_b\n    else:\n        return -1",
      -0.85693359375
    ],
    [
      "def last_digit(a, b):\n    \"\"\"\n    >>> last_digit(13, 10)\n    4\n    >>> last_digit(10, 13)\n    4\n    >>> last_digit(5, 2)\n    2\n    >>> last_digit(100, 20)\n    0\n    >>> last_digit(20, 100)\n    0\n    \"\"\"\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n    return (factorial(a) // factorial(b)) % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def last_digit_factorial(a,b):\n    if a==1 or b==1:\n        return 1\n    if a==b:\n        return 1\n    if a>b:\n        a,b=b,a\n    if a%b==0:\n        return last_digit_factorial(a//b,b)\n    else:\n        return last_digit_factorial(a//b,b)*last_digit_factorial(a%b,b)\n\n\nif __name__==\"__main__\":\n    a=int(input(\"Enter the first number: \"))\n    b=int(input(\"Enter the second number: \"))\n    print(\"The last digit of a! divided by b! is: \",last_digit_factorial(a,b))",
      -0.85693359375
    ],
    [
      "def factorial(num):\n    fact = 1\n    while num > 0:\n        fact *= num\n        num -= 1\n    return fact\n\n\ndef last_digit(num1, num2):\n    if num1 > num2:\n        return 0\n\n    fact1 = factorial(num1)\n    fact2 = factorial(num2)\n\n    fact1 = str(fact1)\n    fact2 = str(fact2)\n\n    if fact1[-1] == fact2[-1]:\n        return 1\n\n    return 0\n\n\nprint(last_digit(20, 25))\nprint(last_digit(5, 25))\nprint(last_digit(12, 25))",
      -0.85693359375
    ],
    [
      "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef last_digit(a, b):\n    return (factorial(a) % 10) * ((factorial(b) % 10) ** -1) % 10\n\n\nprint(last_digit(4, 6))",
      -0.85693359375
    ],
    [
      "def last_digit(a, b):\n    if a == b:\n        return 1\n    elif a < b:\n        return 0\n    elif a > b:\n        if a % b == 0:\n            return last_digit(a // b, b)\n        else:\n            return last_digit(a // b, b) * last_digit(a % b, b)\n\n\nprint(last_digit(25, 4))",
      -0.85693359375
    ],
    [
      "def last_digit(a, b):\n    if a == b:\n        return a\n\n    if a < b:\n        return last_digit(b, a)\n\n    if b == 1:\n        return a % 10\n\n    return last_digit((a // b) * (b % 10), b)\n\n\nif __name__ == \"__main__\":\n    print(last_digit(10, 20))",
      -0.85693359375
    ],
    [
      "from math import factorial\n\n\ndef last_digit(a, b):\n    return factorial(a) % factorial(b)\n\n\nprint(last_digit(3, 5))",
      -0.857421875
    ],
    [
      "def find_last_digit(a, b):\n    if a == 1:\n        return 0\n    a_factorial = factorial(a)\n    b_factorial = factorial(b)\n    if b_factorial % a_factorial == 0:\n        return b_factorial / a_factorial\n    else:\n        return b_factorial % a_factorial\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(find_last_digit(2, 5))",
      -0.85791015625
    ],
    [
      "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact\n\n\ndef last_digit(a, b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    return fact_a % fact_b\n\n\nprint(last_digit(5, 2))\nprint(last_digit(10, 20))",
      -0.85791015625
    ],
    [
      "def find_last_digit(a, b):\n    \"\"\"\n    >>> find_last_digit(5, 2)\n    5\n    >>> find_last_digit(10, 5)\n    5\n    >>> find_last_digit(20, 10)\n    0\n    \"\"\"\n    if a < b:\n        return -1\n    if a == b:\n        return a % 10\n\n    while a > b:\n        a //= 10\n        a %= 10\n        a *= 10\n        a += 1\n\n    return a % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def last_digit_div(a, b):\n    def factorial(num):\n        result = 1\n        for i in range(1, num+1):\n            result *= i\n        return result\n    return last_digit(factorial(a) // factorial(b))\n\n\ndef last_digit(num):\n    return num % 10\n\n\nprint(last_digit_div(13, 10))",
      -0.8583984375
    ],
    [
      "def last_digit(a, b):\n    fact_a = 1\n    fact_b = 1\n\n    while a > 0:\n        fact_a = fact_a * a\n        a -= 1\n\n    while b > 0:\n        fact_b = fact_b * b\n        b -= 1\n\n    return fact_a % fact_b\n\n\nprint(last_digit(13, 10))\nprint(last_digit(20, 20))\nprint(last_digit(39, 18))\nprint(last_digit(25, 100))",
      -0.8583984375
    ],
    [
      "def last_digit(a, b):\n    \"\"\"\n    >>> last_digit(13, 10)\n    3\n    >>> last_digit(3, 2)\n    3\n    >>> last_digit(4, 3)\n    -1\n    \"\"\"\n    fact_a = 1\n    fact_b = 1\n\n    while a > 0:\n        fact_a = fact_a * a\n        a -= 1\n\n    while b > 0:\n        fact_b = fact_b * b\n        b -= 1\n\n    if fact_a % fact_b == 0:\n        return fact_a % 10\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def find_last_digit(a, b):\n    if a == 0 or b == 0:\n        return 1\n\n    a_factorial = 1\n    while a > 0:\n        a_factorial *= a\n        a -= 1\n\n    b_factorial = 1\n    while b > 0:\n        b_factorial *= b\n        b -= 1\n\n    return a_factorial % b_factorial\n\n\nprint(find_last_digit(12, 15))\nprint(find_last_digit(13, 10))\nprint(find_last_digit(5, 2))\nprint(find_last_digit(3, 4))",
      -0.8583984375
    ],
    [
      "def last_digit(a, b):\n    return (a // b) % 10\n\n\na, b = 39, 18\nprint(last_digit(a, b))",
      -0.8583984375
    ],
    [
      "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\ndef last_digit(a, b):\n    return factorial(a) % factorial(b)\n\n\nprint(last_digit(100, 15))",
      -0.8583984375
    ],
    [
      "def last_digit(a, b):\n    # Calculating factorial of a and b\n    fact_a = 1\n    fact_b = 1\n    for i in range(1, a+1):\n        fact_a *= i\n    for i in range(1, b+1):\n        fact_b *= i\n\n    # Finding the last digit of the product of factorials\n    product = fact_a * fact_b\n    return product % 10\n\n\nprint(last_digit(5, 2))\nprint(last_digit(10, 15))\nprint(last_digit(20, 21))",
      -0.85888671875
    ],
    [
      "def find_last_digit(a, b):\n    while a > 1:\n        a = a // 5\n        a = a % 5\n        b = b // 5\n        b = b % 5\n    return a == b\n\n\nprint(find_last_digit(12, 12))\nprint(find_last_digit(12, 120))\nprint(find_last_digit(12, 121))\nprint(find_last_digit(12, 123))",
      -0.85888671875
    ],
    [
      "def last_digit(a, b):\n    return str(factorial(a) // factorial(b))[-1]\n\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(last_digit(5, 2))",
      -0.85888671875
    ],
    [
      "def last_digit(a, b):\n    if a == 1 or b == 1:\n        return 1\n    if a > b:\n        a, b = b, a\n    return last_digit(a - 1, b)\n\n\ndef last_digit_eff(a, b):\n    if a == 1 or b == 1:\n        return 1\n    if a > b:\n        a, b = b, a\n    return last_digit_eff(a - 1, b)",
      -0.85888671875
    ],
    [
      "def last_digit(a,b):\n    if a==0:\n        return 0\n    elif a==1:\n        return 1\n    elif a==2:\n        return 2\n    elif a==3:\n        return 3\n    elif a==4:\n        return 4\n    elif a==5:\n        return 5\n    elif a==6:\n        return 6\n    elif a==7:\n        return 7\n    elif a==8:\n        return 8\n    elif a==9:\n        return 9\n\n    fact_a=1\n    fact_b=1\n    while fact_a*b>=fact_b*a:\n        fact_a=fact_a*a\n        fact_b=fact_b*b\n\n    return fact_a%10\n\n\nprint(last_digit(10,100))",
      -0.85888671875
    ],
    [
      "def last_digit(a, b):\n    fact_a = 1\n    fact_b = 1\n\n    for i in range(1, a+1):\n        fact_a = fact_a * i\n\n    for i in range(1, b+1):\n        fact_b = fact_b * i\n\n    return fact_a % fact_b\n\n\nprint(last_digit(2, 3))\nprint(last_digit(10, 100))\nprint(last_digit(15, 30))\nprint(last_digit(15, 20))",
      -0.87353515625
    ],
    [
      "def last_digit(a, b):\n    if a == 0 or b == 0:\n        return 1\n\n    factorial_a = 1\n    factorial_b = 1\n\n    while a > 0:\n        factorial_a = factorial_a * a\n        a -= 1\n\n    while b > 0:\n        factorial_b = factorial_b * b\n        b -= 1\n\n    if factorial_a % factorial_b == 0:\n        return factorial_b % 10\n\n    return -1\n\n\nprint(last_digit(5, 2))\nprint(last_digit(5, 5))\nprint(last_digit(5, 10))\nprint(last_digit(5, 11))\nprint(last_digit(5, 12))",
      -0.98095703125
    ],
    [
      "def find_last_digit(a, b):\n    a_factorial = 1\n    b_factorial = 1\n    for i in range(1, a + 1):\n        a_factorial = a_factorial * i\n\n    for i in range(1, b + 1):\n        b_factorial = b_factorial * i\n\n    return b_factorial % a_factorial\n\n\nprint(find_last_digit(4, 13))",
      -1.0107421875
    ],
    [
      "def check_divisible(num1, num2):\n    def factorial(num):\n        fact = 1\n        for i in range(2, num+1):\n            fact *= i\n        return fact\n\n    fact1 = factorial(num1)\n    fact2 = factorial(num2)\n    last_digit = fact2 % fact1\n\n    return last_digit\n\nprint(check_divisible(6, 9))",
      -1.0517578125
    ],
    [
      "from math import factorial\n\n\ndef last_digit(a, b):\n    return (factorial(a) % 10) * (factorial(b) % 10) % 10\n\n\nprint(last_digit(5, 9))\nprint(last_digit(5, 10))",
      -1.134765625
    ],
    [
      "def last_digit(a, b):\n    fact_a = fact_b = 1\n    for i in range(1, a+1):\n        fact_a = fact_a * i\n\n    for j in range(1, b+1):\n        fact_b = fact_b * j\n\n    if fact_a % fact_b == 0:\n        return fact_a % 10\n    return -1\n\n\nprint(last_digit(2, 3))\nprint(last_digit(3, 2))\nprint(last_digit(2, 5))\nprint(last_digit(10, 100))",
      -1.2109375
    ],
    [
      "def last_digit(a, b):\n    return str(factorial(a) // factorial(b))[-1]\n\n\ndef factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n\n\nprint(last_digit(20, 20))\nprint(last_digit(20, 10))\nprint(last_digit(20, 2))",
      -1.376953125
    ],
    [
      "def last_digit(a,b):\n    if a==0 or b==0:\n        return 1\n    elif a==1 or b==1:\n        return 1\n    elif a==b:\n        return 1\n    else:\n        return last_digit(a-1,b)\n\nprint(last_digit(3,5))\nprint(last_digit(5,3))\nprint(last_digit(10,15))\nprint(last_digit(15,10))\nprint(last_digit(3,15))\nprint(last_digit(15,3))\nprint(last_digit(10,10))\nprint(last_digit(15,15))\nprint(last_digit(3,3))",
      -1.4658203125
    ],
    [
      "def last_digit(a, b):\n    a_factorial = 1\n    b_factorial = 1\n    for i in range(1, a + 1):\n        a_factorial = a_factorial * i\n    for j in range(1, b + 1):\n        b_factorial = b_factorial * j\n    return a_factorial % b_factorial\n\n\nprint(last_digit(5, 2))\nprint(last_digit(10, 5))\nprint(last_digit(20, 4))\nprint(last_digit(20, 100))",
      -1.4833984375
    ],
    [
      "def last_digit(a, b):\n    \"\"\"\n    >>> last_digit(5, 25)\n    5\n    >>> last_digit(5, 35)\n    5\n    >>> last_digit(5, 45)\n    5\n    >>> last_digit(5, 55)\n    5\n    >>> last_digit(5, 65)\n    5\n    >>> last_digit(5, 75)\n    5\n    >>> last_digit(5, 85)\n    5\n    >>> last_digit(5, 95)\n    5\n    >>> last_digit(5, 105)\n    5\n    >>> last_digit(5, 115)\n    5\n    >>> last_digit(5, 125)\n    5\n    >>> last_digit(5, 135)\n    5\n    >>> last_digit(5, 145)\n    5\n    >>> last_digit(5, 155)\n    5\n    >>> last_digit(5, 165)\n    5\n    >>> last_digit(5, 175)\n    5\n    >>> last_digit(5, 185)\n    5\n    >>> last_digit(5, 195)\n    5\n    >>> last_digit(5, 205)\n    5\n    >>> last_digit(5, 215)\n    5\n    >>> last_digit(5, 225)\n    5\n    >>> last_digit(5, 235)\n    5\n    >>> last_digit(5, 245)\n    5\n    >>> last_digit(5, 255)\n    5\n    >>> last_digit(5, 265)\n    5\n    >>> last_digit(5, 275)\n    5\n    >>> last_digit(5, 285)\n    5\n    >>> last_digit(5, 295)\n    5\n    >>> last_digit(5, 305)\n    5\n    >>> last_digit(5, 315",
      -1.513671875
    ],
    [
      "def find_last_digit(a, b):\n    \"\"\"\n    >>> find_last_digit(4, 10)\n    4\n    >>> find_last_digit(10, 100)\n    0\n    >>> find_last_digit(100, 200)\n    4\n    >>> find_last_digit(1000, 10000)\n    6\n    >>> find_last_digit(10000, 100000)\n    2\n    >>> find_last_digit(100000, 1000000)\n    4\n    >>> find_last_digit(1000000, 10000000)\n    2\n    \"\"\"\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n    if fact_a % fact_b == 0:\n        return int(str(fact_a)[-1])\n    else:\n        return int(str(fact_b)[-1])\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef main():\n    a = int(input(\"Enter the value of a: \"))\n    b = int(input(\"Enter the value of b: \"))\n    print(f\"The last digit of {a}! and {b}! is {find_last_digit(a, b)}\")\n\nif __name__ == \"__main__\":\n    main()",
      -1.77734375
    ],
    [
      "def factorial_divide(a, b):\n    fact_a = 1\n    fact_b = 1\n\n    for i in range(1, a+1):\n        fact_a *= i\n\n    for i in range(1, b+1):\n        fact_b *= i\n\n    return fact_a // fact_b\n\nprint(factorial_divide(5, 2))",
      -1.833984375
    ],
    [
      "def last_digit(a, b):\n    \"\"\"\n    :param a: int - number to be compared\n    :param b: int - number to be compared\n    :return: int - the last digit of (a! / b!)\n    \"\"\"\n    return (a // b) % 10\n\n\nif __name__ == \"__main__\":\n    print(last_digit(5, 3))",
      -1.8359375
    ],
    [
      "from math import factorial\n\n\ndef last_digit(a, b):\n    if a == 0 or b == 0:\n        return 1\n\n    a_fact = factorial(a)\n    b_fact = factorial(b)\n\n    if b_fact % a_fact == 0:\n        return b_fact // a_fact % 10\n    else:\n        return -1\n\n\ndef main():\n    a = int(input(\"Enter the value of a: \"))\n    b = int(input(\"Enter the value of b: \"))\n    print(last_digit(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.8994140625
    ],
    [
      "from math import factorial\n\n\ndef find_last_digit(a, b):\n    fa = factorial(a)\n    fb = factorial(b)\n\n    if fa % 10 == fb % 10:\n        return True\n    return False\n\n\ndef main():\n    assert find_last_digit(3, 5) is True\n    assert find_last_digit(1, 1) is True\n    assert find_last_digit(10, 100) is True\n    assert find_last_digit(5, 100) is False\n    assert find_last_digit(10, 10) is False\n    assert find_last_digit(10, 20) is False\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.9296875
    ],
    [
      "def find_last_digit(a, b):\n    factorial_a = 1\n    factorial_b = 1\n\n    for i in range(1, a + 1):\n        factorial_a = factorial_a * i\n\n    for j in range(1, b + 1):\n        factorial_b = factorial_b * j\n\n    return factorial_b / factorial_a\n\n\nprint(find_last_digit(2, 3))",
      -2.369140625
    ],
    [
      "def find_last_digit(a, b):\n    fact_a = 1\n    fact_b = 1\n    while a > 0:\n        fact_a = fact_a * a\n        a -= 1\n    while b > 0:\n        fact_b = fact_b * b\n        b -= 1\n    return fact_a % fact_b\n\n\nprint(find_last_digit(5, 2))",
      -2.369140625
    ],
    [
      "def last_digit(a,b):\n    fact_a = 1\n    fact_b = 1\n    for i in range(1,a+1):\n        fact_a = fact_a*i\n        if fact_a > 10:\n            fact_a = fact_a%10\n    for i in range(1,b+1):\n        fact_b = fact_b*i\n        if fact_b > 10:\n            fact_b = fact_b%10\n    if fact_a%fact_b == 0:\n        return fact_b\n    else:\n        return -1\n\nprint(last_digit(2,3))\nprint(last_digit(5,3))\nprint(last_digit(5,7))\nprint(last_digit(6,7))\nprint(last_digit(7,8))",
      -2.51953125
    ],
    [
      "def find_last_digit(a, b):\n    fact_a = 1\n    fact_b = 1\n    while a > 0:\n        fact_a = fact_a * a\n        a -= 1\n    while b > 0:\n        fact_b = fact_b * b\n        b -= 1\n    return fact_a % fact_b\n\n\na = 3\nb = 5\nprint(find_last_digit(a, b))",
      -2.5625
    ],
    [
      "def last_digit(a, b):\n    fact_a = 1\n    fact_b = 1\n\n    while a > 0:\n        fact_a = fact_a * a\n        a -= 1\n\n    while b > 0:\n        fact_b = fact_b * b\n        b -= 1\n\n    return fact_a % fact_b\n\n\nprint(last_digit(15, 21))",
      -2.65625
    ],
    [
      "def is_last_digit_same(a, b):\n    return (a // 10) % 10 == (b // 10) % 10\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    if is_last_digit_same(a, b):\n        print(\"The last digit of a and b are same\")\n    else:\n        print(\"The last digit of a and b are not same\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.89453125
    ],
    [
      "def last_digit_factorial(a, b):\n    \"\"\"\n    >>> last_digit_factorial(1,2)\n    2\n    >>> last_digit_factorial(2,5)\n    2\n    >>> last_digit_factorial(3,5)\n    6\n    >>> last_digit_factorial(4,6)\n    6\n    \"\"\"\n    if a < b:\n        raise ValueError(\"a must be greater than b\")\n\n    # get factorial of a and b\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n\n    # get the last digit of both factorials\n    last_digit_a = fact_a % 10\n    last_digit_b = fact_b % 10\n\n    # check if last digit of a is a multiple of last digit of b\n    if last_digit_a % last_digit_b == 0:\n        return last_digit_b\n    else:\n        return -1\n\n\ndef factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(\"Last digit of a! and b! is: \", last_digit_factorial(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.927734375
    ],
    [
      "def find_last_digit(a, b):\n    f_a = factorial(a)\n    f_b = factorial(b)\n\n    return f_a // f_b % 10\n\n\ndef factorial(n):\n    fact = 1\n    while n > 0:\n        fact = fact * n\n        n -= 1\n    return fact\n\n\nprint(find_last_digit(5, 2))\nprint(find_last_digit(5, 3))\nprint(find_last_digit(5, 4))\nprint(find_last_digit(5, 5))\nprint(find_last_digit(5, 6))\n\n# test = find_last_digit(5, 2)\n# print(test)\n# print(factorial(5))",
      -3.142578125
    ],
    [
      "def factorial_last_digit(a, b):\n    if a < 0 or b < 0:\n        return -1\n    a_fact = 1\n    b_fact = 1\n    while a > 0:\n        a_fact *= a\n        a -= 1\n    while b > 0:\n        b_fact *= b\n        b -= 1\n    return b_fact % a_fact\n\n\nprint(factorial_last_digit(5, 6))\nprint(factorial_last_digit(10, 20))\nprint(factorial_last_digit(12, 30))\nprint(factorial_last_digit(25, 45))\nprint(factorial_last_digit(30, 60))",
      -3.1953125
    ],
    [
      "def last_digit(a, b):\n    if b < a:\n        return 0\n\n    if b == 1:\n        return 0\n\n    fact_a = 1\n    fact_b = 1\n    for i in range(1, a+1):\n        fact_a = fact_a * i\n\n    for i in range(1, b+1):\n        fact_b = fact_b * i\n\n    return fact_a % fact_b\n\n\nif __name__ == \"__main__\":\n    print(last_digit(2, 3))\n    print(last_digit(10, 100))\n    print(last_digit(100, 1000))\n    print(last_digit(1000, 10000))",
      -3.341796875
    ],
    [
      "def last_digit(a, b):\n    if a == 0:\n        return 1\n\n    if b % a == 0:\n        return last_digit(a, b // a)\n\n    return last_digit(a, b % a)\n\n\ndef main():\n    a = int(input(\"Enter a number: \"))\n    b = int(input(\"Enter another number: \"))\n    last = last_digit(a, b)\n    print(f\"The last digit of {a}! and {b}! is {last}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.474609375
    ],
    [
      "def last_digit(a, b):\n    if a <= 0 or b <= 0:\n        return None\n    elif a == b:\n        return a % 10\n    else:\n        factorial_a = 1\n        factorial_b = 1\n        while a > 0:\n            factorial_a = factorial_a * a\n            a -= 1\n        while b > 0:\n            factorial_b = factorial_b * b\n            b -= 1\n        return factorial_a % 10\n\n\nprint(last_digit(2, 2))\nprint(last_digit(2, 3))\nprint(last_digit(3, 3))\nprint(last_digit(5, 3))\nprint(last_digit(5, 6))\nprint(last_digit(7, 7))\nprint(last_digit(10, 10))\nprint(last_digit(10, 20))\nprint(last_digit(20, 20))\nprint(last_digit(20, 30))\nprint(last_digit(30, 30))\nprint(last_digit(30, 40))\nprint(last_digit(40, 40))\nprint(last_digit(40, 50))\nprint(last_digit(50, 50))\nprint(last_digit(50, 60))\nprint(last_digit(60, 60))\nprint(last_digit(60, 70))\nprint(last_digit(70, 70))\nprint(last_digit(70, 80))\nprint(last_digit(80, 80))\nprint(last_digit(80, 90))\nprint(last_digit(90, 90))\nprint(last_digit(90, 100))\nprint(last_digit(100, 100))\nprint(last_digit(100, 200))\nprint(last_digit(200, 200))\nprint(last_digit(2",
      -3.556640625
    ],
    [
      "def last_digit(a, b):\n    \"\"\"\n    >>> last_digit(12, 24)\n    4\n    >>> last_digit(35, 55)\n    5\n    >>> last_digit(123, 12)\n    0\n    >>> last_digit(123, 123)\n    0\n    >>> last_digit(12, 2)\n    2\n    >>> last_digit(12, 120)\n    0\n    >>> last_digit(12, 121)\n    2\n    >>> last_digit(12, 122)\n    8\n    >>> last_digit(12, 123)\n    8\n    >>> last_digit(12, 124)\n    4\n    >>> last_digit(12, 125)\n    4\n    >>> last_digit(12, 126)\n    2\n    \"\"\"\n    fact_a = 1\n    fact_b = 1\n    while a > 0:\n        fact_a = fact_a * a\n        a -= 1\n    while b > 0:\n        fact_b = fact_b * b\n        b -= 1\n    return fact_a % fact_b\n\n\ndef last_digit_eff(a, b):\n    \"\"\"\n    >>> last_digit_eff(12, 24)\n    4\n    >>> last_digit_eff(35, 55)\n    5\n    >>> last_digit_eff(123, 12)\n    0\n    >>> last_digit_eff(123, 123)\n    0\n    >>> last_digit_eff(12, 2)\n    2\n    >>> last_digit_eff(12, 120)\n    0\n    >>> last_digit_eff(12, 121)\n    2\n    >>> last_digit_eff(12, 122)\n    8\n    >>> last_digit_eff(12, 123)\n    8\n    >>> last_digit_eff(12,",
      -3.6484375
    ],
    [
      "def last_digit(a, b):\n    if a == 0:\n        return 1\n    if b == 0:\n        return 1\n    if a < b:\n        return 0\n\n    return last_digit(a - 1, b // 10)\n\n\ndef main():\n    print(last_digit(1, 2))\n    print(last_digit(1, 3))\n    print(last_digit(2, 3))\n    print(last_digit(3, 3))\n    print(last_digit(4, 3))\n    print(last_digit(5, 3))\n    print(last_digit(10, 3))\n    print(last_digit(20, 3))\n    print(last_digit(30, 3))\n    print(last_digit(40, 3))\n    print(last_digit(50, 3))\n\n\nmain()",
      -3.671875
    ],
    [
      "def last_digit_division(a, b):\n    \"\"\"\n    >>> last_digit_division(5, 3)\n    5\n    >>> last_digit_division(10, 3)\n    0\n    >>> last_digit_division(35, 10)\n    5\n    \"\"\"\n    fact_a = 1\n    fact_b = 1\n\n    while a > 0:\n        fact_a = fact_a * a\n        a -= 1\n\n    while b > 0:\n        fact_b = fact_b * b\n        b -= 1\n\n    return fact_a % fact_b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.701171875
    ],
    [
      "def last_digit(a, b):\n    factorial_a = 1\n    factorial_b = 1\n    while a >= 1:\n        factorial_a = factorial_a * a\n        a = a - 1\n    while b >= 1:\n        factorial_b = factorial_b * b\n        b = b - 1\n    if factorial_a % factorial_b == 0:\n        return int(factorial_a / factorial_b) % 10\n    else:\n        return -1\n\n\nprint(last_digit(12, 10))",
      -3.826171875
    ],
    [
      "def last_digit_of_factorial(a, b):\n    fact_a = 1\n    fact_b = 1\n\n    for i in range(1, a + 1):\n        fact_a = fact_a * i\n    for i in range(1, b + 1):\n        fact_b = fact_b * i\n\n    fact_a = fact_a % 10\n    fact_b = fact_b % 10\n\n    return fact_a % fact_b\n\n\nprint(last_digit_of_factorial(5, 3))\nprint(last_digit_of_factorial(10, 17))",
      -3.8828125
    ],
    [
      "def last_digit_factorial(a, b):\n    if a == b:\n        return 0\n    fact_a = 1\n    fact_b = 1\n    for i in range(1, a+1):\n        fact_a = fact_a * i\n    for j in range(1, b+1):\n        fact_b = fact_b * j\n    if fact_b % fact_a == 0:\n        return fact_b // fact_a\n    else:\n        return -1\n\n\nprint(last_digit_factorial(13, 15))",
      -4.01171875
    ],
    [
      "def lastDigit(a, b):\n    fact_a = factorial(a)\n    fact_b = factorial(b)\n\n    if fact_a % 10 == fact_b % 10:\n        return True\n    else:\n        return False\n\ndef factorial(n):\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact",
      -4.15625
    ],
    [
      "def last_digit(a, b):\n    fact_a = 1\n    fact_b = 1\n    for i in range(1, a+1):\n        fact_a = fact_a * i\n    for j in range(1, b+1):\n        fact_b = fact_b * j\n    return fact_b % fact_a\n\n\nprint(last_digit(5, 15))",
      -4.49609375
    ],
    [
      "def last_digit(a, b):\n    f_a = 1\n    f_b = 1\n\n    while a > 0:\n        f_a = f_a * a\n        a -= 1\n\n    while b > 0:\n        f_b = f_b * b\n        b -= 1\n\n    if f_a % f_b == 0:\n        return int(f_a/f_b) % 10\n    else:\n        return -1\n\n\nprint(last_digit(3, 20))\nprint(last_digit(5, 25))\nprint(last_digit(12, 35))",
      -4.5625
    ],
    [
      "def last_digit_of_factorial(a: int, b: int) -> int:\n    \"\"\"\n    >>> last_digit_of_factorial(1, 2)\n    1\n    >>> last_digit_of_factorial(1, 3)\n    1\n    >>> last_digit_of_factorial(1, 4)\n    3\n    >>> last_digit_of_factorial(1, 5)\n    3\n    >>> last_digit_of_factorial(1, 6)\n    3\n    >>> last_digit_of_factorial(1, 7)\n    1\n    >>> last_digit_of_factorial(1, 8)\n    7\n    >>> last_digit_of_factorial(1, 9)\n    7\n    >>> last_digit_of_factorial(1, 10)\n    7\n    >>> last_digit_of_factorial(2, 6)\n    6\n    >>> last_digit_of_factorial(3, 7)\n    3\n    >>> last_digit_of_factorial(4, 8)\n    8\n    >>> last_digit_of_factorial(5, 9)\n    1\n    >>> last_digit_of_factorial(6, 10)\n    6\n    >>> last_digit_of_factorial(7, 11)\n    7\n    >>> last_digit_of_factorial(8, 12)\n    4\n    >>> last_digit_of_factorial(9, 13)\n    9\n    >>> last_digit_of_factorial(10, 14)\n    4\n    >>> last_digit_of_factorial(11, 15)\n    4\n    >>> last_digit_of_factorial(12, 16)\n    6\n    >>> last_digit_of_factorial(13, 17)\n    1\n    >>> last_digit_of_factorial(14, 18)\n    6\n    >>> last_digit_of_factorial(15, 19)\n    6\n    >>> last_digit_of_",
      -4.77734375
    ],
    [
      "def last_digit(a, b):\n    \"\"\"\n    >>> last_digit(3,4)\n    False\n    >>> last_digit(25,50)\n    5\n    >>> last_digit(3,10)\n    3\n    >>> last_digit(4,13)\n    1\n    >>> last_digit(2,6)\n    False\n    >>> last_digit(10,12)\n    0\n    >>> last_digit(10,13)\n    False\n    >>> last_digit(13,26)\n    7\n    >>> last_digit(13,27)\n    False\n    >>> last_digit(5,24)\n    5\n    \"\"\"\n    from math import factorial\n\n    return str(factorial(a))[-1] if factorial(b) % factorial(a) else False\n\n\ndef last_digit_opt(a, b):\n    \"\"\"\n    >>> last_digit_opt(3,4)\n    False\n    >>> last_digit_opt(25,50)\n    5\n    >>> last_digit_opt(3,10)\n    3\n    >>> last_digit_opt(4,13)\n    1\n    >>> last_digit_opt(2,6)\n    False\n    >>> last_digit_opt(10,12)\n    0\n    >>> last_digit_opt(10,13)\n    False\n    >>> last_digit_opt(13,26)\n    7\n    >>> last_digit_opt(13,27)\n    False\n    >>> last_digit_opt(5,24)\n    5\n    \"\"\"\n    from math import factorial\n\n    a_factorial = factorial(a)\n    b_factorial = factorial(b)\n    if b_factorial % a_factorial:\n        return False\n    return str(b_factorial // a_factorial)[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.0546875
    ],
    [
      "def last_digit(a, b):\n    a = str(factorial(a))\n    b = str(factorial(b))\n    if b[-1] == \"0\":\n        return \"0\"\n    else:\n        for i in range(len(b) - 1, -1, -1):\n            if b[:i + 1] in a:\n                return a[-1]\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(last_digit(2, 5))\nprint(last_digit(3, 4))\nprint(last_digit(5, 6))\nprint(last_digit(7, 10))",
      -5.078125
    ],
    [
      "def find_last_digit(a, b):\n    \"\"\"\n    >>> find_last_digit(4, 20)\n    4\n    >>> find_last_digit(35, 6)\n    3\n    >>> find_last_digit(45, 6)\n    5\n    \"\"\"\n    def factorial(n):\n        if n == 1 or n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    if factorial(a) % factorial(b) == 0:\n        return int(str(factorial(a))[-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.16796875
    ],
    [
      "def last_digit_factorial(a, b):\n    if a > b:\n        a, b = b, a\n    if a == 1:\n        return 1\n    while b % a != 0:\n        b //= 10\n    return a\n\n\ndef main():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    result = last_digit_factorial(a, b)\n    print(f\"The last digit of {a}! is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.94921875
    ],
    [
      "def last_digit_factorial(a, b):\n    fact_a = 1\n    fact_b = 1\n    for i in range(1, a+1):\n        fact_a = fact_a * i\n        if fact_a % 10 == 0:\n            fact_a = fact_a // 10\n\n    for j in range(1, b+1):\n        fact_b = fact_b * j\n        if fact_b % 10 == 0:\n            fact_b = fact_b // 10\n    print(fact_a)\n    print(fact_b)\n\n    return fact_a % fact_b\n\n\nprint(last_digit_factorial(100, 100))\nprint(last_digit_factorial(10, 100))\nprint(last_digit_factorial(10, 1000))\nprint(last_digit_factorial(10, 10000))",
      -6.4921875
    ],
    [
      "def last_digit(a, b):\n    if a > b:\n        a, b = b, a\n    if a == 0 or b == 0:\n        return 1\n    else:\n        if b % a == 0:\n            return last_digit(a, b // a)\n        else:\n            return last_digit(a, b // a) * last_digit(a, b % a)\n\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nprint(last_digit(a, b))",
      -7.18359375
    ],
    [
      "def find_last_digit(a, b):\n    \"\"\"\n    Find the last digit of a! / b!\n\n    >>> find_last_digit(13, 5)\n    6\n    >>> find_last_digit(20, 4)\n    6\n    >>> find_last_digit(15, 2)\n    3\n    >>> find_last_digit(17, 4)\n    1\n    >>> find_last_digit(18, 2)\n    6\n    >>> find_last_digit(21, 3)\n    7\n    >>> find_last_digit(24, 2)\n    4\n    >>> find_last_digit(34, 3)\n    4\n    >>> find_last_digit(45, 3)\n    0\n    >>> find_last_digit(48, 3)\n    2\n    >>> find_last_digit(55, 2)\n    4\n    >>> find_last_digit(63, 2)\n    6\n    >>> find_last_digit(69, 2)\n    8\n    >>> find_last_digit(78, 2)\n    4\n    >>> find_last_digit(87, 2)\n    6\n    >>> find_last_digit(92, 2)\n    8\n    \"\"\"\n    a_fact = 1\n    b_fact = 1\n\n    while a > 0:\n        if a % 2 == 1:\n            a_fact *= a\n        a = a // 2\n\n    while b > 0:\n        if b % 2 == 1:\n            b_fact *= b\n        b = b // 2\n\n    if b_fact == 0:\n        return 0\n    else:\n        return a_fact // b_fact\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.3828125
    ],
    [
      "def last_digit(a, b):\n    if a == 1:\n        return b\n    if b == 1:\n        return a\n    if b == 0:\n        return 0\n    if a == 0:\n        return 1\n    if b % a == 0:\n        return last_digit(a, b//a)\n    else:\n        return last_digit(a, b%a)\n\n\nprint(last_digit(5, 2))\nprint(last_digit(5, 20))\nprint(last_digit(5, 200))\nprint(last_digit(5, 2000))\nprint(last_digit(5, 20000))\nprint(last_digit(5, 200000))\nprint(last_digit(5, 2000000))\nprint(last_digit(5, 20000000))\nprint(last_digit(5, 200000000))\nprint(last_digit(5, 2000000000))\nprint(last_digit(5, 20000000000))\nprint(last_digit(5, 200000000000))\nprint(last_digit(5, 2000000000000))\nprint(last_digit(5, 20000000000000))\nprint(last_digit(5, 200000000000000))\nprint(last_digit(5, 2000000000000000))",
      -7.7890625
    ],
    [
      "def last_digit(a, b):\n    if a == 0:\n        return 1\n    if b == 0:\n        return 1\n    if a < b:\n        return 0\n\n    a_factorial = a\n    b_factorial = b\n\n    while a_factorial % 10 == 0:\n        a_factorial = a_factorial // 10\n\n    while b_factorial % 10 == 0:\n        b_factorial = b_factorial // 10\n\n    while a_factorial % 10 == 0:\n        a_factorial = a_factorial // 10\n\n    while b_factorial % 10 == 0:\n        b_factorial = b_factorial // 10\n\n    while a_factorial % 10 == 0:\n        a_factorial = a_factorial // 10\n\n    while b_factorial % 10 == 0:\n        b_factorial = b_factorial // 10\n\n    while a_factorial % 10 == 0:\n        a_factorial = a_factorial // 10\n\n    while b_factorial % 10 == 0:\n        b_factorial = b_factorial // 10\n\n    while a_factorial % 10 == 0:\n        a_factorial = a_factorial // 10\n\n    while b_factorial % 10 == 0:\n        b_factorial = b_factorial // 10\n\n    while a_factorial % 10 == 0:\n        a_factorial = a_factorial // 10\n\n    while b_factorial % 10 == 0:\n        b_factorial = b_factorial // 10\n\n    while a_factorial % 10 == 0:\n        a_factorial = a_factorial // 10\n\n    while b_factorial % 10 == 0:\n        b_factorial = b_factorial // 10\n\n    while a_factorial % 10",
      -7.80859375
    ],
    [
      "def last_digit_divisible(a, b):\n    \"\"\"\n    >>> last_digit_divisible(3, 2)\n    3\n    >>> last_digit_divisible(5, 2)\n    5\n    >>> last_digit_divisible(6, 2)\n    6\n    >>> last_digit_divisible(7, 2)\n    7\n    >>> last_digit_divisible(10, 2)\n    0\n    >>> last_digit_divisible(8, 2)\n    2\n    >>> last_digit_divisible(12, 2)\n    0\n    >>> last_digit_divisible(9, 3)\n    9\n    >>> last_digit_divisible(18, 6)\n    6\n    >>> last_digit_divisible(19, 6)\n    1\n    \"\"\"\n    return (a / b) % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -8.8515625
    ],
    [
      "def last_digit(a, b):\n    while a > 0:\n        a //= 10\n        b //= 10\n    while b > 0:\n        if a % b == 0:\n            return b\n        b //= 10\n    return 0\n\n\nprint(last_digit(123456789, 987654321))\nprint(last_digit(123456789, 9876543210))\nprint(last_digit(123456789, 98765432100))\nprint(last_digit(123456789, 987654321000))",
      -9.203125
    ],
    [
      "def last_digit(a, b):\n    \"\"\"\n    >>> last_digit(5, 25)\n    True\n    >>> last_digit(10, 50)\n    False\n    >>> last_digit(100, 500)\n    True\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    if a == 0:\n        return True\n    if b % a == 0:\n        return True\n    return last_digit(a, b // 10)\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -9.21875
    ],
    [
      "def last_digit(a, b):\n    if a > b:\n        return None\n\n    a_factorial = a\n    b_factorial = b\n\n    while a_factorial <= b_factorial:\n        a_factorial = a_factorial * (a + 1)\n        b_factorial = b_factorial * (b + 1)\n\n    while a_factorial % 10 == 0:\n        a_factorial = a_factorial / 10\n\n    while b_factorial % 10 == 0:\n        b_factorial = b_factorial / 10\n\n    return a_factorial % 10 == b_factorial % 10\n\n\nprint(last_digit(3, 9))\nprint(last_digit(3, 10))\nprint(last_digit(10, 10))\nprint(last_digit(12, 11))",
      -9.796875
    ],
    [
      "def last_digit_divides(a, b):\n    if a == 0 or b == 0:\n        return 0\n    elif a == b:\n        return 1\n    else:\n        return last_digit_divides(a - 1, b) * (last_digit_divides(b, a % b))\n\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\ndef factorial_divides(a, b):\n    return last_digit_divides(factorial(a), factorial(b))\n\nprint(factorial_divides(10, 15))\nprint(factorial_divides(15, 10))\nprint(factorial_divides(10, 10))",
      -10.0390625
    ],
    [
      "def find_last_digit(a, b):\n    \"\"\"\n    The function takes two integers a and b as input and returns the last digit of a!/(b!).\n    >>> find_last_digit(12, 5)\n    6\n    >>> find_last_digit(25, 15)\n    6\n    >>> find_last_digit(100, 25)\n    0\n    >>> find_last_digit(35, 5)\n    5\n    >>> find_last_digit(15, 5)\n    0\n    >>> find_last_digit(5, 15)\n    5\n    \"\"\"\n    # Code here\n    if a < b:\n        return 0\n    else:\n        a = a // 10 * 10 + a % 10\n        b = b // 10 * 10 + b % 10\n        if a % b == 0:\n            return a % 10\n        else:\n            return find_last_digit(a // b, b)\n\n\ndef main():\n    \"\"\"\n    Let us calculate the last digit of the factorial of 12/(5!).\n    Since 12 is not a multiple of 5, the first step is to reduce 12 to lowest terms.\n    This is 12 = 2 * 6, so we replace 12 with 2 and 6 with 5.\n    Next, we replace 25 with 5, because 5 is the highest power of 5 in 25.\n    We now have 25 = 5 * 5, so we replace 25 with 5.\n    The last step is to divide 25 by 5 to get 5.\n    The last digit of 5! is 5, so the answer is 5.\n    >>> main()\n    \"\"\"\n    a, b = [int(input(\"Enter two integers: \")), int(input())]\n    print(find_last_digit(a, b))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
      -12.390625
    ],
    [
      "from math import factorial\n\n\ndef last_digit(a, b):\n    \"\"\"\n    >>> last_digit(3, 11)\n    3\n    >>> last_digit(2, 17)\n    2\n    >>> last_digit(1, 24)\n    2\n    \"\"\"\n    if a == 0 or b == 0:\n        raise ValueError\n    if a > b:\n        a, b = b, a\n    if a < b:\n        return 0\n    if a == b:\n        return 1\n    a_factorial = factorial(a)\n    b_factorial = factorial(b)\n    return b_factorial % a_factorial\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -12.671875
    ],
    [
      "def last_digit(a, b):\n    if a > b:\n        a, b = b, a\n    return last_digit_helper(1, a, b)\n\n\ndef last_digit_helper(last, a, b):\n    if a == b:\n        return last\n    a = a * (a + 1) // 2\n    if a > b:\n        a = a % b\n    return last_digit_helper(a % 10, a // 10, b // 10)\n\n\nprint(last_digit(3, 2))\nprint(last_digit(10, 5))\nprint(last_digit(5, 5))\nprint(last_digit(20, 10))\nprint(last_digit(10, 20))",
      -14.5
    ],
    [
      "def last_digit_divisible(a, b):\n    \"\"\"\n    >>> last_digit_divisible(3, 2)\n    9\n    >>> last_digit_divisible(3, 3)\n    9\n    >>> last_digit_divisible(3, 4)\n    1\n    >>> last_digit_divisible(4, 3)\n    1\n    \"\"\"\n    if a == 1 or b == 1:\n        return 1\n    elif a == b:\n        return 1\n    elif a > b:\n        return last_digit_divisible(b, a)\n    return last_digit_divisible(a - 1, b // 10)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -15.1953125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}