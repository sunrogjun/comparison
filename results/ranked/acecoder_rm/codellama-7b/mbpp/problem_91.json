{
  "problem": {
    "task_id": "MBPP/102",
    "prompt": "Write a function to convert snake case string to camel case string.",
    "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
    "test_list": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ],
    "challenge_test_list": [],
    "problem_id": 91
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def snake_to_camel(snake):\n\n    snake_list = snake.split(\"_\")\n\n    return snake_list[0] + \"\".join(word.title() for word in snake_list[1:])\n\n\ndef test_snake_to_camel():\n\n    assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n    assert snake_to_camel(\"my_name_is_aurelius\") == \"myNameIsAurelius\"\n    assert snake_to_camel(\"my_favorite_number\") == \"myFavoriteNumber\"\n    assert snake_to_camel(\"my_favorite_number_is_12\") == \"myFavoriteNumberIs12\"\n    assert snake_to_camel(\"my_favorite_number_is_12_too\") == \"myFavoriteNumberIs12Too\"\n\n\nif __name__ == '__main__':\n    test_snake_to_camel()",
      9.28125
    ],
    [
      "def to_camel_case(snake_case):\n    words = snake_case.split('_')\n    return words[0] + ''.join(w.capitalize() for w in words[1:])\n\n\nassert to_camel_case('hello_world') == 'helloWorld'\nassert to_camel_case('hello_world_camel_case') == 'helloWorldCamelCase'\nassert to_camel_case('test_http_request') == 'testHttpRequest'\nassert to_camel_case('test_http_request_') == 'testHttpRequest'",
      6.69921875
    ],
    [
      "def snake_to_camel_case(snake_case):\n    return snake_case.replace(\"_\", \" \").title().replace(\" \", \"\")\n\n\ndef test_snake_to_camel_case():\n    assert snake_to_camel_case(\"snake_case\") == \"SnakeCase\"\n\n\nif __name__ == \"__main__\":\n    test_snake_to_camel_case()",
      4.99609375
    ],
    [
      "def snake_to_camel(snake_str):\n    if not snake_str: return snake_str\n    snake_str_split = snake_str.split('_')\n    return snake_str_split[0] + ''.join(word.title() for word in snake_str_split[1:])\n\n\nif __name__ == '__main__':\n    snake_str = \"my_favorite_language\"\n    print(snake_to_camel(snake_str))",
      4.16015625
    ],
    [
      "import re\n\n\ndef to_camel_case(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n\n\ndef test_to_camel_case():\n    assert to_camel_case('snake_case') == 'snakeCase'\n    assert to_camel_case('snake_case_two') == 'snakeCaseTwo'\n    assert to_camel_case('snake_case_two_words') == 'snakeCaseTwoWords'\n\n\nif __name__ == '__main__':\n    test_to_camel_case()",
      3.951171875
    ],
    [
      "def to_camel_case(snake_string):\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_string: snake case string\n    Returns:\n        camel case string\n    \"\"\"\n    return snake_string.title().replace('_', '')",
      3.833984375
    ],
    [
      "def snake_to_camel_case(snake_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"snake_case\")\n    'snakeCase'\n    >>> snake_to_camel_case(\"snake_case_string\")\n    'snakeCaseString'\n    \"\"\"\n    return snake_str[0].lower() + snake_str[1:] if snake_str else snake_str\n\n\ndef snake_to_camel_case_alt(snake_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case_alt(\"snake_case\")\n    'snakeCase'\n    >>> snake_to_camel_case_alt(\"snake_case_string\")\n    'snakeCaseString'\n    \"\"\"\n    return snake_str.capitalize() if snake_str else snake_str\n\n\ndef snake_to_camel_case_alt2(snake_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case_alt2(\"snake_case\")\n    'snakeCase'\n    >>> snake_to_camel_case_alt2(\"snake_case_string\")\n    'snakeCaseString'\n    \"\"\"\n    return snake_str.title() if snake_str else snake_str\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      3.771484375
    ],
    [
      "def to_camel_case(snake_case_string):\n    words = snake_case_string.split('_')\n    camel_case_string = words[0]\n    for word in words[1:]:\n        camel_case_string += word.capitalize()\n    return camel_case_string\n\n\nif __name__ == '__main__':\n    assert to_camel_case(\"hello_world\") == \"helloWorld\"\n    assert to_camel_case(\"hello_world_to_the_world\") == \"helloWorldToTheWorld\"\n    assert to_camel_case(\"hello_world_to_the_world_to_the_world\") == \"helloWorldToTheWorldToTheWorld\"",
      3.181640625
    ],
    [
      "from typing import List\n\n\ndef snake_to_camel(snake: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake (str): snake case string.\n\n    Returns:\n        str: camel case string.\n    \"\"\"\n\n    return \"\".join([x.capitalize() for x in snake.split(\"_\")])\n\n\ndef snake_to_camel_list(snake: List[str]) -> List[str]:\n    \"\"\"Convert snake case list of string to camel case list of string.\n\n    Args:\n        snake (List[str]): snake case list of string.\n\n    Returns:\n        List[str]: camel case list of string.\n    \"\"\"\n    return [snake_to_camel(x) for x in snake]\n\n\nif __name__ == \"__main__\":\n    assert snake_to_camel(\"snake_case\") == \"snakeCase\"\n    assert snake_to_camel(\"Snake_Case\") == \"snakeCase\"\n    assert snake_to_camel(\"snake_case_string\") == \"snakeCaseString\"\n    assert snake_to_camel(\"Snake_case_string\") == \"snakeCaseString\"\n    assert snake_to_camel(\"snake_case_string_123\") == \"snakeCaseString123\"\n    assert snake_to_camel(\"Snake_case_string_123\") == \"snakeCaseString123\"\n\n    assert snake_to_camel_list([\"snake_case\", \"Snake_Case\", \"snake_case_string\", \"Snake_case_string\", \"snake_case_string_123\", \"Snake_case_string_123\"]) == [\"snakeCase\", \"snakeCase\", \"snakeCaseString\", \"snakeCaseString\", \"snakeCaseString123\", \"snakeCaseString123\"]",
      3.181640625
    ],
    [
      "def to_camel_case(snake_case):\n    \"\"\"\n    >>> to_camel_case(\"snake_case\")\n    'snakeCase'\n    >>> to_camel_case(\"_snake_case_\")\n    'snakeCase'\n    >>> to_camel_case(\"Snake_Case\")\n    'snakeCase'\n    >>> to_camel_case(\"snake-case\")\n    'snakeCase'\n    >>> to_camel_case(\"SnakeCase\")\n    'snakeCase'\n    \"\"\"\n    camel_case = \"\"\n    for word in snake_case.split('_'):\n        camel_case += word.capitalize()\n    return camel_case\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      2.791015625
    ],
    [
      "def snake_to_camel(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if s == '':\n        return s\n    return s[0] + snake_to_camel(s[1:])[0].upper() + snake_to_camel(s[1:])[1:]\n\n\nif __name__ == '__main__':\n    print(snake_to_camel('snake_case_string'))",
      2.359375
    ],
    [
      "def convert_to_camel_case(snake_str):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not snake_str or snake_str == \"_\":\n        return snake_str\n\n    camel_str = snake_str[0].lower()\n\n    for i in range(1, len(snake_str)):\n        if snake_str[i] == \"_\":\n            camel_str += snake_str[i + 1].upper()\n        else:\n            camel_str += snake_str[i]\n\n    return camel_str\n\n\ndef main():\n    snake_str = \"test_string\"\n    print(convert_to_camel_case(snake_str))\n\n    snake_str = \"Test_String\"\n    print(convert_to_camel_case(snake_str))\n\n    snake_str = \"test_string_\"\n    print(convert_to_camel_case(snake_str))\n\n    snake_str = \"test_string_2\"\n    print(convert_to_camel_case(snake_str))\n\n    snake_str = \"testString2\"\n    print(convert_to_camel_case(snake_str))\n\n    snake_str = \"test\"\n    print(convert_to_camel_case(snake_str))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.142578125
    ],
    [
      "def snake_to_camel_case(snake_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"snake_case\")\n    'snakeCase'\n    >>> snake_to_camel_case(\"_snake_case\")\n    'SnakeCase'\n    >>> snake_to_camel_case(\"__snake_case\")\n    'SnakeCase'\n    >>> snake_to_camel_case(\"snake_case_\")\n    'snakeCase'\n    >>> snake_to_camel_case(\"snake_case__\")\n    'snakeCase'\n    \"\"\"\n    camel_str = \"\"\n    for index, char in enumerate(snake_str):\n        if char == \"_\" and index != 0:\n            camel_str += char.replace(char, \"\")\n        elif char == \"_\" and index == 0:\n            camel_str += char.replace(char, \"\")\n        else:\n            camel_str += char\n    return camel_str\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.0859375
    ],
    [
      "def to_camel_case(snake_str):\n    words = snake_str.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
      2.080078125
    ],
    [
      "def snake_to_camel_case(snake_str):\n    \"\"\"\n    :param snake_str: snake_case_string\n    :return: camelCaseString\n    \"\"\"\n    words = snake_str.split(\"_\")\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"a_snake_case_string\"))",
      2.0078125
    ],
    [
      "def snake_to_camel(snake_str):\n    return snake_str.replace(\"_\", \" \").title().replace(\" \", \"\")\n\n\ndef test_snake_to_camel():\n    \"\"\"Test for snake_to_camel function.\"\"\"\n    assert snake_to_camel(\"hello_world\") == \"HelloWorld\"\n    assert snake_to_camel(\"hello_world_programmer\") == \"HelloWorldProgrammer\"\n    assert snake_to_camel(\"hello_world_programmer_s\") == \"HelloWorldProgrammerS\"\n\n\nif __name__ == \"__main__\":\n    test_snake_to_camel()",
      1.958984375
    ],
    [
      "def to_camel_case(snake_case):\n    # Split string into words\n    words = snake_case.split(\"_\")\n\n    # Convert first word to camel case\n    words[0] = words[0][0].lower() + words[0][1:]\n\n    # Convert remaining words to camel case\n    for i in range(1, len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n\n    # Join words to form camel case\n    return \"\".join(words)\n\nprint(to_camel_case(\"my_variable_name\"))\nprint(to_camel_case(\"my_function_name\"))\nprint(to_camel_case(\"thisIsATest\"))",
      1.896484375
    ],
    [
      "def snake_to_camel(snake_str):\n    return snake_str.replace(\"_\", \" \").title().replace(\" \", \"\")\n\n\ndef test_snake_to_camel():\n    \"\"\"Test for snake_to_camel function.\"\"\"\n    assert snake_to_camel('snake_to_camel') == 'snakeToCamel'\n    assert snake_to_camel('snake_case_string') == 'snakeCaseString'\n    assert snake_to_camel('snake__case__string') == 'snakeCaseString'\n    assert snake_to_camel('snake case string') == 'snakeCaseString'\n    assert snake_to_camel('snake_case') == 'snakeCase'\n    assert snake_to_camel('snake') == 'snake'\n    assert snake_to_camel('snake2camel') == 'snake2camel'",
      1.5654296875
    ],
    [
      "from typing import Optional\n\n\ndef to_camel_case(snake_str: str) -> str:\n    \"\"\"Return snake_str in camel case.\n\n    Args:\n        snake_str (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    if not snake_str:\n        return snake_str\n    return snake_str[0] + \"\".join(\n        [word.capitalize() for word in snake_str.split(\"_\")]\n    )\n\n\nif __name__ == \"__main__\":\n    assert to_camel_case(\"\") == \"\"\n    assert to_camel_case(\"snake_case\") == \"snakeCase\"\n    assert to_camel_case(\"snake_case_string\") == \"snakeCaseString\"\n    assert to_camel_case(\"get_response\") == \"getResponse\"\n    assert to_camel_case(\"get-response\") == \"getResponse\"",
      1.4189453125
    ],
    [
      "def to_camel_case(snake_str):\n    \"\"\"\n    :param snake_str: str, snake case string\n    :return: str, camel case string\n    \"\"\"\n    if len(snake_str) == 0:\n        return snake_str\n\n    # split the string into words\n    words = snake_str.split(\"_\")\n\n    # make first letter uppercase\n    words[0] = words[0].lower()\n\n    # capitalize the letters after first letter\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n\n    return \"\".join(words)\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"snake_case\"))\n    print(to_camel_case(\"snake_case_with_multiple_words\"))\n    print(to_camel_case(\"snake_case_with_multiple_words_to_convert\"))",
      1.388671875
    ],
    [
      "def to_camel_case(snake_str):\n    words = snake_str.split('_')\n    camel_case = ''\n    for word in words:\n        camel_case += word.capitalize()\n    return camel_case\n\n\nif __name__ == '__main__':\n    print(to_camel_case('this_is_snake_case'))\n    print(to_camel_case('this_is_camel_case'))",
      1.2822265625
    ],
    [
      "def convert_snake_to_camel(snake: str) -> str:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    snake = snake.split(\"_\")\n    camel = snake[0]\n    for word in snake[1:]:\n        camel += word.capitalize()\n    return camel\n\n\nif __name__ == \"__main__\":\n    assert convert_snake_to_camel(\"hello_world\") == \"helloWorld\"",
      1.201171875
    ],
    [
      "def to_camel_case(snake_case: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_case (str): snake case string.\n\n    Examples:\n        >>> to_camel_case('snake_case')\n        'snakeCase'\n        >>> to_camel_case('snake_case_123')\n        'snakeCase123'\n        >>> to_camel_case('_snake_case_')\n        'SnakeCase'\n        >>> to_camel_case('snake_case_with_spaces')\n        'snakeCaseWithSpaces'\n        >>> to_camel_case('snake_case_with_many_spaces')\n        'snakeCaseWithManySpaces'\n\n    \"\"\"\n    camel_case = snake_case.replace(\"_\", \" \")\n    words = camel_case.split(\" \")\n    new_words = []\n    for word in words:\n        new_words.append(word.capitalize())\n    return \"\".join(new_words)\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"snake_case\"))\n    print(to_camel_case(\"snake_case_123\"))\n    print(to_camel_case(\"_snake_case_\"))\n    print(to_camel_case(\"snake_case_with_spaces\"))\n    print(to_camel_case(\"snake_case_with_many_spaces\"))",
      0.9697265625
    ],
    [
      "def snake_to_camel(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    camel = []\n    for word in string.split('_'):\n        camel.append(word.capitalize())\n    return ''.join(camel)\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel('hello_world') == 'helloWorld'\n    assert snake_to_camel('hello_world_camel_case') == 'helloWorldCamelCase'\n\n\nif __name__ == '__main__':\n    test_snake_to_camel()",
      0.73779296875
    ],
    [
      "def snake_to_camel_case(snake_string: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"snake_case\")\n    'snakeCase'\n    >>> snake_to_camel_case(\"snake_case_string\")\n    'snakeCaseString'\n    >>> snake_to_camel_case(\"snake_case_string_with_numbers123\")\n    'snakeCaseStringWithNumbers123'\n    \"\"\"\n    words = snake_string.split(\"_\")\n\n    return words[0] + \"\".join(word.capitalize() for word in words[1:])\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      0.64892578125
    ],
    [
      "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def toCamelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return s\n\n        ret = \"\"\n        s = s.split(\"_\")\n        for i, v in enumerate(s):\n            if i == 0:\n                ret += v\n            else:\n                ret += v.capitalize()\n\n        return ret\n\n\nif __name__ == \"__main__\":\n    assert Solution().toCamelCase(\"\") == \"\"\n    assert Solution().toCamelCase(\"test\") == \"test\"\n    assert Solution().toCamelCase(\"test_camel\") == \"testCamel\"\n    assert Solution().toCamelCase(\"test_camel_case\") == \"testCamelCase\"\n    assert Solution().toCamelCase(\"test_camel_case_\") == \"testCamelCase\"",
      0.55029296875
    ],
    [
      "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def toCamelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ret = \"\"\n        for i, v in enumerate(s):\n            if v == \"_\":\n                ret += s[i+1].upper()\n            else:\n                ret += v\n\n        return ret\n\n\nif __name__ == \"__main__\":\n    assert Solution().toCamelCase(\"\") == \"\"\n    assert Solution().toCamelCase(\"hello\") == \"hello\"\n    assert Solution().toCamelCase(\"hello_world\") == \"helloWorld\"\n    assert Solution().toCamelCase(\"hello_world_camel\") == \"helloWorldCamel\"\n    assert Solution().toCamelCase(\"hello_good\") == \"helloGood\"\n    assert Solution().toCamelCase(\"_hello_good\") == \"HelloGood\"",
      0.44140625
    ],
    [
      "def to_camel_case(string):\n\n    if not string:\n        return \"\"\n\n    if len(string) == 1:\n        return string\n\n    result = list()\n\n    result.append(string[0])\n\n    for i in range(1, len(string)):\n        if string[i] == \"_\":\n            result.append(string[i + 1].upper())\n        else:\n            result.append(string[i])\n\n    return \"\".join(result)\n\n\ndef main():\n    print(to_camel_case(\"my_name_is_sandy\"))  # => myNameIsSandy\n    print(to_camel_case(\"my_name_is_sandy_chakraborty\"))  # => myNameIsSandyChakraborty\n    print(to_camel_case(\"my_name_is_sandy_chakraborty_das\"))  # => myNameIsSandyChakrabortyDas\n\n\nif __name__ == '__main__':\n    main()",
      0.41357421875
    ],
    [
      "def to_camel_case(snake_string):\n    \"\"\"\n    :param snake_string: string in snake case\n    :return: string in camel case\n    \"\"\"\n    if snake_string:\n        camel_case = snake_string.split('_')\n        camel_case[0] = camel_case[0].lower()\n        for i in range(1, len(camel_case)):\n            camel_case[i] = camel_case[i].capitalize()\n        return \"\".join(camel_case)\n    return \"\"",
      0.1395263671875
    ],
    [
      "def snake_to_camel(string):\n    return string.split('_')[0] + \"\".join(x.capitalize() or \"_\" for x in string.split('_')[1:])\n\n\nif __name__ == \"__main__\":\n    assert snake_to_camel(\"snake_case\") == \"snakeCase\"\n    assert snake_to_camel(\"snake_case_string\") == \"snakeCaseString\"\n    assert snake_to_camel(\"snake_case_string_to_camel_case\") == \"snakeCaseStringToCamelCase\"\n    assert snake_to_camel(\"snake_case_string_to_camel_case_string\") == \"snakeCaseStringToCamelCaseString\"",
      -0.152587890625
    ],
    [
      "from string import ascii_lowercase\n\n\ndef snake_to_camel(string: str) -> str:\n    \"\"\"\n    :param string: snake case string\n    :return: camel case string\n    >>> snake_to_camel('a_b_c')\n    'aBC'\n    >>> snake_to_camel('a_b_c_d_e')\n    'aBCDE'\n    >>> snake_to_camel('a_b_c_d_e_f')\n    'aBCDEF'\n    >>> snake_to_camel('a_b_c_d_e_f_g')\n    'aBCDEFG'\n    >>> snake_to_camel('a_b_c_d_e_f_g_h')\n    'aBCDEFGH'\n    >>> snake_to_camel('a_b_c_d_e_f_g_h_i')\n    'aBCDEFGHI'\n    >>> snake_to_camel('a_b_c_d_e_f_g_h_i_j')\n    'aBCDEFGHIJ'\n    >>> snake_to_camel('a_b_c_d_e_f_g_h_i_j_k')\n    'aBCDEFGHIJK'\n    >>> snake_to_camel('a_b_c_d_e_f_g_h_i_j_k_l')\n    'aBCDEFGHIJKL'\n    >>> snake_to_camel('a_b_c_d_e_f_g_h_i_j_k_l_m')\n    'aBCDEFGHIJKLM'\n    >>> snake_to_camel('a_b_c_d_e_f_g_h_i_j_k_l_m_n')\n    'aBCDEFGHIJKLMN'\n    >>> snake_to_camel('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o')",
      -0.28466796875
    ],
    [
      "def snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str: string\n    :return: string\n    \"\"\"\n    if snake_str is None:\n        return None\n\n    # split the string into words\n    words = snake_str.split('_')\n    # join the first word with the rest, lowercase the first word\n    return words[0].lower() + ''.join(w.title() for w in words[1:])\n\n\ndef test_snake_to_camel():\n    \"\"\"Test for snake_to_camel function.\"\"\"\n    assert snake_to_camel('') == ''\n    assert snake_to_camel('snake_case') == 'snakeCase'\n    assert snake_to_camel('snake_case_string') == 'snakeCaseString'\n    assert snake_to_camel('get_longer_string') == 'getLongerString'\n    assert snake_to_camel('get_longer_string_123') == 'getLongerString123'\n    assert snake_to_camel('get2_longer_string') == 'get2LongerString'\n    assert snake_to_camel('get_2_longer_string') == 'get2LongerString'\n    assert snake_to_camel('get_2_longer_string_123') == 'get2LongerString123'\n    assert snake_to_camel('snake') == 'snake'\n    assert snake_to_camel('snake2') == 'snake2'\n    assert snake_to_camel('snake_') == 'snake'\n    assert snake_to_camel('snake__') == 'snake'\n    assert snake_to_camel('snake2_') == 'snake2'\n    assert snake_to_camel('snake2__') == 'snake2'\n    assert snake_to_camel('_snake') == 'Snake'\n    assert snake_to_camel('__snake') ==",
      -0.30126953125
    ],
    [
      "import re\n\n\ndef to_camel_case(string):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), string)\n\n\nif __name__ == '__main__':\n    test_cases = [\n        ('snake_case', 'snakeCase'),\n        ('camel_case', 'camelCase'),\n        ('Camel_Case', 'camelCase'),\n        ('camel_case_string', 'camelCaseString'),\n        ('get_http_response_code', 'getHttpResponseCode'),\n        ('get_response_code', 'getResponseCode'),\n        ('getHTTPResponseCode', 'getHTTPResponseCode'),\n    ]\n\n    for string, expected in test_cases:\n        assert to_camel_case(string) == expected",
      -0.62109375
    ],
    [
      "def snake_to_camel(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if not s:\n        return s\n    if s[0].islower():\n        s = s[0].upper() + s[1:]\n    return ''.join(s[i].upper() if s[i - 1] == '_' else s[i] for i in range(len(s)))\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel('') == ''\n    assert snake_to_camel('hello') == 'hello'\n    assert snake_to_camel('hello_world') == 'helloWorld'\n    assert snake_to_camel('hello_world_camel_case') == 'helloWorldCamelCase'\n    assert snake_to_camel('hello_world_camel_case_2') == 'helloWorldCamelCase2'\n    assert snake_to_camel('hello_world_camel_case_2_2') == 'helloWorldCamelCase22'",
      -0.7880859375
    ],
    [
      "from string import ascii_lowercase\n\n\ndef to_camel_case(snake_case):\n\n    if not snake_case:\n        return snake_case\n\n    res = []\n    for word in snake_case.split(\"_\"):\n        res.append(word.capitalize())\n\n    return \"\".join(res)\n\n\nif __name__ == \"__main__\":\n    assert to_camel_case(\"\") == \"\"\n    assert to_camel_case(\"hello_world\") == \"HelloWorld\"\n    assert to_camel_case(\"my_favorite_book\") == \"MyFavoriteBook\"",
      -0.85595703125
    ],
    [
      "def convert_to_camel_case(string):\n\n    string = string.split('_')\n    string = [s.capitalize() for s in string]\n\n    return \"\".join(string)\n\n\nif __name__ == '__main__':\n    print(convert_to_camel_case(\"this_is_snake_case\"))",
      -0.85595703125
    ],
    [
      "def snake_to_camel_case(snake_str):\n    \"\"\"\n    :param snake_str: string\n    :return: string\n\n    >>> snake_to_camel_case(\"snake_case_string\")\n    'snakeCaseString'\n    \"\"\"\n    if not snake_str:\n        return snake_str\n\n    camel_str = snake_str.split(\"_\")[0]\n    for word in snake_str.split(\"_\")[1:]:\n        camel_str += word.title()\n\n    return camel_str\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)",
      -0.85595703125
    ],
    [
      "def to_camel_case(snake_str):\n    words = snake_str.split(\"_\")\n    return words[0] + \"\".join(w.capitalize() for w in words[1:])\n\n\nif __name__ == '__main__':\n    print(to_camel_case(\"my_program\"))\n    print(to_camel_case(\"my_function\"))\n    print(to_camel_case(\"i_like_camel_case\"))\n    print(to_camel_case(\"thisFunctionIsEmpty\"))",
      -0.85595703125
    ],
    [
      "def snake_to_camel_case(string):\n    return ''.join(x.capitalize() for x in string.split('_'))\n\nprint(snake_to_camel_case('my_test_string'))",
      -0.85693359375
    ],
    [
      "def to_camel_case(snake_str):\n    words = snake_str.split(\"_\")\n    camel_case_str = words[0]\n    for word in words[1:]:\n        camel_case_str += word.capitalize()\n    return camel_case_str\n\n\ndef test_to_camel_case():\n    snake_str = \"hello_world\"\n    assert to_camel_case(snake_str) == \"helloWorld\"",
      -0.85693359375
    ],
    [
      "from unittest import TestCase\n\n\ndef snake_to_camel_case(snake_str):\n    if not snake_str or \"_\" not in snake_str:\n        return snake_str\n    components = snake_str.split(\"_\")\n    return components[0] + \"\".join(x.title() for x in components[1:])\n\n\nclass TestSnakeToCamelCase(TestCase):\n    def test_snake_to_camel_case(self):\n        self.assertEqual(\"camelCase\", snake_to_camel_case(\"camel_case\"))\n        self.assertEqual(\"camelCase\", snake_to_camel_case(\"camelCase\"))\n        self.assertEqual(\"camelCase\", snake_to_camel_case(\"camelcase\"))\n        self.assertEqual(\"\", snake_to_camel_case(\"\"))\n        self.assertEqual(\"\", snake_to_camel_case(\"_\"))\n        self.assertEqual(\"a\", snake_to_camel_case(\"a\"))\n        self.assertEqual(\"\", snake_to_camel_case(\"\"))\n        self.assertEqual(\"\", snake_to_camel_case(\"_\"))",
      -0.85693359375
    ],
    [
      "def to_camel_case(snake_case):\n    \"\"\"\n    :param snake_case: str\n    :return: str\n    >>> to_camel_case(\"hello_world\")\n    'helloWorld'\n    >>> to_camel_case(\"\")\n    ''\n    >>> to_camel_case(\"_\")\n    '_'\n    >>> to_camel_case(\"a\")\n    'a'\n    >>> to_camel_case(\"a_b\")\n    'aB'\n    >>> to_camel_case(\"a_b_c\")\n    'aBC'\n    \"\"\"\n    camel_case = \"\"\n    for i, char in enumerate(snake_case):\n        if char == \"_\":\n            camel_case += char\n        elif i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.upper()\n    return camel_case\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def convert_to_camel_case(snake_str):\n    words = snake_str.split('_')\n    camel_case = words[0]\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case\n\n\ndef main():\n    print(convert_to_camel_case('test_string'))\n    print(convert_to_camel_case('test_string_2'))\n    print(convert_to_camel_case('test_string_2_is_better'))\n    print(convert_to_camel_case('test_string_2_is_better_than_test_string'))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def to_camel_case(string):\n    \"\"\"\n    >>> to_camel_case('a_b_c_d')\n    'aBCD'\n    \"\"\"\n    return string.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def snake_to_camel(snake_str):\n    camel_str = \"\"\n    snake_str_list = snake_str.split(\"_\")\n    for i in snake_str_list:\n        camel_str = camel_str + i[0].upper() + i[1:]\n    return camel_str\n\ndef test_function(test_case):\n    snake_str = test_case[0]\n    solution = test_case[1]\n    output = snake_to_camel(snake_str)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nsnake_str = \"snake_case\"\nsolution = \"snakeCase\"\ntest_case = [snake_str, solution]\ntest_function(test_case)",
      -0.85693359375
    ],
    [
      "def to_camel_case(snake_str):\n    return snake_str.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"this_is_snake_case\"))\n    print(to_camel_case(\"this_is_camel_case\"))",
      -0.85693359375
    ],
    [
      "def snake_to_camel_case(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n\n\nif __name__ == '__main__':\n    print(snake_to_camel_case(\"snake_case\"))",
      -0.85693359375
    ],
    [
      "def snake_to_camel(snake_string):\n    camel_string = ''\n    for word in snake_string.split('_'):\n        camel_string += word[0].upper()\n        camel_string += word[1:]\n    return camel_string\n\n\nif __name__ == '__main__':\n    print(snake_to_camel('snake_case'))",
      -0.85693359375
    ],
    [
      "def convert_snake_to_camel(snake_string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_string (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    return snake_string.title().replace(\"_\", \"\")",
      -0.85693359375
    ],
    [
      "def snake_to_camel(string):\n    return ''.join(map(str.capitalize, string.split('_')))\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel('hello_world') == 'HelloWorld'",
      -0.857421875
    ],
    [
      "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def toCamelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s.title().replace(\"_\", \"\")\n\nif __name__ == \"__main__\":\n    assert Solution().toCamelCase(\"\") == \"\"",
      -0.85791015625
    ],
    [
      "def snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    return words[0] + \"\".join(word.capitalize() for word in words[1:])\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake_case\"))",
      -0.85791015625
    ],
    [
      "def to_camel_case(snake_str):\n    camel_str = \"\"\n    for word in snake_str.split(\"_\"):\n        camel_str += word.capitalize()\n    return camel_str",
      -0.85791015625
    ],
    [
      "def convert(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    s = s.split('_')\n    s[0] = s[0].lower()\n    for i in range(1, len(s)):\n        s[i] = s[i].capitalize()\n    return ''.join(s)\n\n\nif __name__ == '__main__':\n    print(convert('test_string'))",
      -0.85791015625
    ],
    [
      "def to_camel_case(snake_string):\n    snake_string = snake_string.split('_')\n    return snake_string[0] + ''.join(s.capitalize() for s in snake_string[1:])\n\n\nif __name__ == \"__main__\":\n    snake_string = \"hello_world\"\n    print(to_camel_case(snake_string))",
      -0.85791015625
    ],
    [
      "def snake_to_camel(string):\n    return ''.join(word.capitalize() for word in string.split('_'))\n\n\nif __name__ == '__main__':\n    print(snake_to_camel(\"snake_case\"))",
      -0.85791015625
    ],
    [
      "def snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str: string\n    :return: string\n    \"\"\"\n    snake_str = snake_str.split(\"_\")\n    camel_str = snake_str[0]\n    for s in snake_str[1:]:\n        camel_str += s.capitalize()\n    return camel_str\n\n\nif __name__ == '__main__':\n    print(snake_to_camel(\"hello_world\"))\n    print(snake_to_camel(\"_hello_world\"))\n    print(snake_to_camel(\"hello_world_\"))\n    print(snake_to_camel(\"hello_world_2020\"))\n    print(snake_to_camel(\"h_e_l_l_o_w_o_r_l_d\"))",
      -0.8583984375
    ],
    [
      "def snake_to_camel(string):\n\n    new_string = string.split('_')\n    new_string[0] = new_string[0].lower()\n\n    for i in range(1, len(new_string)):\n        new_string[i] = new_string[i].capitalize()\n\n    return ''.join(new_string)\n\n\ndef test_snake_to_camel():\n    \"\"\"Test for snake_to_camel function.\"\"\"\n    assert snake_to_camel('camel_case') == 'camelCase'\n    assert snake_to_camel('snake_case') == 'snakeCase'\n    assert snake_to_camel('snake_case_string') == 'snakeCaseString'\n    assert snake_to_camel('snake_case_string_case') == 'snakeCaseStringCase'",
      -0.8583984375
    ],
    [
      "def snake_to_camel(s):\n    return s.replace('_', ' ').title().replace(' ', '')\n\n\ndef main():\n    print(snake_to_camel('hello_world'))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def to_camel_case(snake_str: str) -> str:\n    words = snake_str.split(\"_\")\n    return words[0] + \"\".join(word.capitalize() for word in words[1:])\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"hello_world\"))\n    print(to_camel_case(\"_hello_world\"))\n    print(to_camel_case(\"hello_world_\"))\n    print(to_camel_case(\"hello\"))\n    print(to_camel_case(\"\"))\n    print(to_camel_case(\"    \"))",
      -0.86083984375
    ],
    [
      "def to_camel_case(snake_str):\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_str(str): Snake case string.\n\n    Returns:\n        str: Camel case string.\n\n    Raises:\n        TypeError: If snake_str is not a string.\n\n    >>> to_camel_case('')\n    ''\n    >>> to_camel_case('snake_case')\n    'snakeCase'\n    >>> to_camel_case('snake_case_string')\n    'snakeCaseString'\n    \"\"\"\n    if not isinstance(snake_str, str):\n        raise TypeError(\"snake_str must be a string.\")\n\n    snake_str = snake_str.split(\"_\")\n    camel_case_str = snake_str[0]\n    for i in snake_str[1:]:\n        camel_case_str += i.capitalize()\n\n    return camel_case_str\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.88916015625
    ],
    [
      "def to_camel_case(snake_case_string):\n    if len(snake_case_string) == 0:\n        return snake_case_string\n\n    if \"_\" not in snake_case_string:\n        return snake_case_string\n\n    camel_case_string = \"\"\n    for word in snake_case_string.split(\"_\"):\n        camel_case_string += word.capitalize()\n\n    return camel_case_string\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"\"))\n    print(to_camel_case(\"snake_case\"))\n    print(to_camel_case(\"snake_case_string\"))\n    print(to_camel_case(\"snake_case_string_to_camel_case\"))\n    print(to_camel_case(\"snake_case_string_to_camel_case_string\"))",
      -0.9091796875
    ],
    [
      "def snake_to_camel(snake_string: str) -> str:\n    camel_string = \"\"\n    for s in snake_string.split(\"_\"):\n        camel_string += s.capitalize()\n    return camel_string\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel(\"test_case\") == \"TestCase\"\n    assert snake_to_camel(\"test_case_2\") == \"TestCase2\"\n    assert snake_to_camel(\"_test_case_\") == \"TestCase\"\n    assert snake_to_camel(\"_test_case_2\") == \"TestCase2\"\n    assert snake_to_camel(\"test_case_1_2_3\") == \"TestCase123\"\n    assert snake_to_camel(\"test_case_1_2_3_\") == \"TestCase123\"\n    assert snake_to_camel(\"_test_case_1_2_3_\") == \"TestCase123\"",
      -0.98974609375
    ],
    [
      "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def toCamelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ret = []\n        for w in s.split(\"_\"):\n            ret.append(w[0].lower() + w[1:])\n\n        return \"\".join(ret)\n\n\nif __name__ == \"__main__\":\n    assert Solution().toCamelCase(\"aaa_bbb\") == \"aaaBbb\"",
      -1.056640625
    ],
    [
      "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def toCamelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        lst = s.split(\"_\")\n        return lst[0] + \"\".join(lst[i][0].upper()+lst[i][1:] for i in xrange(1, len(lst)))\n\n    def toCamelCaseError(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ret = \"\"\n        for i in xrange(len(s)):\n            if s[i] == \"_\":\n                ret += s[i+1].upper()\n            else:\n                ret += s[i]\n\n        return ret\n\nif __name__ == \"__main__\":\n    assert Solution().toCamelCase(\"a\") == \"a\"\n    assert Solution().toCamelCase(\"a_b\") == \"aB\"\n    assert Solution().toCamelCase(\"a_b_c_d\") == \"aBCd\"",
      -1.0947265625
    ],
    [
      "def to_camel_case(snake_case: str) -> str:\n    words = snake_case.split(\"_\")\n    return words[0] + \"\".join(word.capitalize() for word in words[1:])\n\n\nif __name__ == \"__main__\":\n    assert to_camel_case(\"snake_case\") == \"snakeCase\"\n    assert to_camel_case(\"_snake_case_\") == \"snakeCase\"\n    assert to_camel_case(\"__snake_case__\") == \"snakeCase\"\n    assert to_camel_case(\"snake_case_\") == \"snakeCase\"\n    assert to_camel_case(\"snake_case__\") == \"snakeCase\"\n    assert to_camel_case(\"snake_case_snake_case\") == \"snakeCaseSnakeCase\"\n    assert to_camel_case(\"snake_case_snake_case_\") == \"snakeCaseSnakeCase\"\n    assert to_camel_case(\"snake_case_snake_case__\") == \"snakeCaseSnakeCase\"",
      -1.095703125
    ],
    [
      "from typing import AnyStr\n\n\ndef to_camel_case(snake_str: AnyStr) -> AnyStr:\n    \"\"\"Convert snake_case string to camelCase string.\n\n    Args:\n        snake_str (AnyStr): snake_case string to convert.\n\n    Examples:\n        >>> assert to_camel_case(\"hello_world\") == \"helloWorld\"\n        >>> assert to_camel_case(\"_hello_world\") == \"helloWorld\"\n        >>> assert to_camel_case(\"__hello_world\") == \"helloWorld\"\n        >>> assert to_camel_case(\"__hello__world\") == \"helloWorld\"\n        >>> assert to_camel_case(\"hello__world\") == \"helloWorld\"\n        >>> assert to_camel_case(\"hello_world__\") == \"helloWorld\"\n        >>> assert to_camel_case(\"hello\") == \"hello\"\n        >>> assert to_camel_case(\"HELLO_WORLD\") == \"helloWorld\"\n        >>> assert to_camel_case(\"h_e_l_l_o_w_o_r_l_d\") == \"hELLOWorld\"\n        >>> assert to_camel_case(\"\") == \"\"\n    \"\"\"\n    snake_str = snake_str.strip(\"_\")\n    if not snake_str:\n        return snake_str\n\n    components = snake_str.split(\"_\")\n    return components[0] + \"\".join(x.title() for x in components[1:])\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"hello_world\"))",
      -1.25
    ],
    [
      "from string import ascii_lowercase\n\n\ndef to_camel_case(snake_case: str) -> str:\n    \"\"\"\n    >>> to_camel_case(\"snake_case\")\n    'snakeCase'\n    >>> to_camel_case(\"snake_case_to_camel_case\")\n    'snakeCaseToCamelCase'\n    >>> to_camel_case(\"_snake_case_\")\n    'SnakeCase'\n    \"\"\"\n    if not snake_case:\n        return snake_case\n\n    snake_case = snake_case.strip(\"_\")\n\n    if len(snake_case) == 1:\n        return snake_case.capitalize()\n\n    camel_case = []\n    for i, char in enumerate(snake_case):\n        if char == \"_\":\n            if i != 0 and i != len(snake_case) - 1:\n                camel_case.append(snake_case[i + 1].capitalize())\n        else:\n            camel_case.append(char)\n\n    return \"\".join(camel_case)\n\n\ndef to_camel_case_2(snake_case: str) -> str:\n    \"\"\"\n    >>> to_camel_case_2(\"snake_case\")\n    'snakeCase'\n    >>> to_camel_case_2(\"snake_case_to_camel_case\")\n    'snakeCaseToCamelCase'\n    >>> to_camel_case_2(\"_snake_case_\")\n    'SnakeCase'\n    \"\"\"\n    if not snake_case:\n        return snake_case\n\n    snake_case = snake_case.strip(\"_\")\n\n    if len(snake_case) == 1:\n        return snake_case.capitalize()\n\n    camel_case = []\n    for i, char in enumerate(snake_case):\n        if char == \"_\":\n            if i != 0 and i != len(snake_case) - 1:\n                camel_case.append(snake",
      -1.4013671875
    ],
    [
      "def snake_to_camel(s: str) -> str:\n    \"\"\"\n    >>> snake_to_camel('snake_case')\n    'snakeCase'\n    >>> snake_to_camel('snake_case123')\n    'snakeCase123'\n    >>> snake_to_camel('snake_case_123')\n    'snakeCase123'\n    >>> snake_to_camel('snake_case_123_456')\n    'snakeCase123456'\n    \"\"\"\n    return s[0] + \"\".join(\n        word.capitalize() if word else \"\" for word in s.split(\"_\")\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.4287109375
    ],
    [
      "def to_camel_case(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if string == \"\":\n        return \"\"\n    if string.isupper():\n        return string.lower()\n    return string[0].lower() + string[1:]\n\n\ndef to_camel_case_2(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if string == \"\":\n        return \"\"\n    return string[0].lower() + string[1:]\n\n\ndef to_camel_case_3(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if string == \"\":\n        return \"\"\n    return string.capitalize()",
      -1.455078125
    ],
    [
      "def snake_to_camel_case(snake: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case('hello_world')\n    'helloWorld'\n    >>> snake_to_camel_case('_hello_world')\n    'helloWorld'\n    >>> snake_to_camel_case('hello_world_')\n    'helloWorld'\n    >>> snake_to_camel_case('hello_world__')\n    'helloWorld'\n    >>> snake_to_camel_case('_hello_world__')\n    'helloWorld'\n    \"\"\"\n    return \"\".join(\n        [x.capitalize() for x in snake.replace(\"_\", \" \").strip().split(\" \")]\n    )\n\n\n\"\"\"\nTime Complexity: O(N)\nSpace Complexity: O(N)\n\"\"\"",
      -1.4814453125
    ],
    [
      "from string import ascii_lowercase\n\ndef to_camel_case(snake_case_str):\n    \"\"\"\n    :param snake_case_str: str - snake case string to convert\n    :return: str - camel case string\n    \"\"\"\n    camel_case_str = snake_case_str.strip()\n    for i in range(len(camel_case_str)):\n        if camel_case_str[i] == '_':\n            camel_case_str = camel_case_str[:i] + camel_case_str[i + 1].upper() + camel_case_str[i + 2:]\n    return camel_case_str\n\n\ndef to_snake_case(camel_case_str):\n    \"\"\"\n    :param camel_case_str: str - camel case string to convert\n    :return: str - snake case string\n    \"\"\"\n    snake_case_str = camel_case_str.strip()\n    for i in range(len(snake_case_str)):\n        if snake_case_str[i].isupper():\n            snake_case_str = snake_case_str[:i] + '_' + snake_case_str[i].lower() + snake_case_str[i + 1:]\n    return snake_case_str\n\n\nif __name__ == '__main__':\n    print(\"Camel Case: \" + to_camel_case(\"this_is_snake_case_string\"))\n    print(\"Snake Case: \" + to_snake_case(\"This_Is_Camel_Case_String\"))",
      -1.6162109375
    ],
    [
      "def to_camel_case(snake_case: str) -> str:\n    \"\"\"\n    >>> to_camel_case(\"\")\n    ''\n    >>> to_camel_case(\"hello_world\")\n    'helloWorld'\n    >>> to_camel_case(\"hello_world_its_me\")\n    'helloWorldItsMe'\n    >>> to_camel_case(\"_hello_world_\")\n    'helloWorld'\n    >>> to_camel_case(\"_hello_world___\")\n    'helloWorld'\n    \"\"\"\n    words = snake_case.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.041015625
    ],
    [
      "def to_camel_case(string):\n    \"\"\"\n    :param string: snake case string\n    :return: camel case string\n    \"\"\"\n    return ''.join([w[0].upper() + w[1:] for w in string.split('_')])\n\n\nprint(to_camel_case(\"_hello_world\"))\nprint(to_camel_case(\"_hello_world_\"))\nprint(to_camel_case(\"hello_world\"))\nprint(to_camel_case(\"hello_world_\"))\nprint(to_camel_case(\"hello_\"))\nprint(to_camel_case(\"_hello\"))\nprint(to_camel_case(\"\"))",
      -2.203125
    ],
    [
      "def snake_to_camel(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if s == '':\n        return ''\n    if len(s.split('_')) == 1:\n        return s\n    else:\n        s = s.split('_')\n        res = ''\n        for i in s:\n            if i == s[0]:\n                res += i\n            else:\n                res += i[0].upper() + i[1:]\n        return res\n\nif __name__ == '__main__':\n    print(snake_to_camel('hello_world'))",
      -2.259765625
    ],
    [
      "from typing import Optional\n\n\ndef camel_case(snake_case_string: str) -> str:\n    \"\"\"Returns camel case string from snake case string.\n\n    Args:\n        snake_case_string (str): snake case string\n\n    Examples:\n        >>> camel_case('snake_case')\n        'snakeCase'\n    \"\"\"\n    if not isinstance(snake_case_string, str):\n        raise TypeError(\"snake_case_string must be a str.\")\n\n    words = snake_case_string.split(\"_\")\n\n    return \"\".join(word.title() for word in words)\n\n\ndef main():\n    \"\"\"Print camel case string from snake case string.\"\"\"\n    camel_string = camel_case(\"snake_case\")\n    print(camel_string)\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.533203125
    ],
    [
      "from string import ascii_lowercase as lowercase\n\n\ndef to_camel_case(snake_case):\n\n    words = snake_case.split('_')\n\n    camel_case = ''\n\n    for word in words:\n        camel_case += word[0].upper() + word[1:]\n\n    return camel_case\n\n\nif __name__ == '__main__':\n    print(to_camel_case('snake_case'))\n    print(to_camel_case('snake_case_to_camel_case'))",
      -2.953125
    ],
    [
      "from string import ascii_lowercase\n\n\ndef snake_to_camel_case(snake_case_string: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"_hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"hello_world_\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"hello_world_world\")\n    'helloWorldWorld'\n    >>> snake_to_camel_case(\"hello_world_world_\")\n    'helloWorldWorld'\n    >>> snake_to_camel_case(\"\")\n    ''\n    >>> snake_to_camel_case(\"__hello_world\")\n    'helloWorld'\n    \"\"\"\n    if not snake_case_string:\n        return \"\"\n\n    words = snake_case_string.split(\"_\")\n    words[0] = words[0].lower()\n\n    for index in range(1, len(words)):\n        words[index] = words[index].capitalize()\n\n    return \"\".join(words)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.125
    ],
    [
      "def snake_to_camel_case(snake_case_string):\n    # return snake_case_string.title().replace('_', '')\n    return ''.join(word.capitalize() for word in snake_case_string.split('_'))\n\n\ndef test_snake_to_camel_case():\n    \"\"\"\n    >>> snake_to_camel_case('hello_world')\n    'helloWorld'\n    >>> snake_to_camel_case('my_favorite_book_is_the_hobbit')\n    'myFavoriteBookIsTheHobbit'\n    >>> snake_to_camel_case('I_love_python')\n    'I Love Python'\n    >>> snake_to_camel_case('I_love_programming_and_python')\n    'I Love Programming And Python'\n    >>> snake_to_camel_case('python_is_awesome')\n    'pythonIsAwesome'\n    >>> snake_to_camel_case('python_is_awesome_programming_language')\n    'pythonIsAwesomeProgrammingLanguage'\n    >>> snake_to_camel_case('I_am_learning_python')\n    'I Am Learning Python'\n    >>> snake_to_camel_case('I_am_learning_python_programming')\n    'I Am Learning PythonProgramming'\n    >>> snake_to_camel_case('python_programming_is_fun')\n    'pythonProgrammingIsFun'\n    >>> snake_to_camel_case('I_am_learning_programming')\n    'I Am Learning Programming'\n    >>> snake_to_camel_case('I_am_learning_programming_language')\n    'I Am Learning ProgrammingLanguage'\n    >>> snake_to_camel_case('I_am_learning_programming_language_python')\n    'I Am Learning ProgrammingLanguagePython'\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.271484375
    ],
    [
      "def snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"a_b_c_d\")\n    'ABCD'\n    >>> snake_to_camel_case(\"_a_b_c_d\")\n    '_ABCD'\n    >>> snake_to_camel_case(\"__a_b_c_d\")\n    '__ABCD'\n    >>> snake_to_camel_case(\"a_b_c_d_\")\n    'ABCD_'\n    >>> snake_to_camel_case(\"a_bc\")\n    'ABc'\n    >>> snake_to_camel_case(\"a_bc_d\")\n    'ABcD'\n    >>> snake_to_camel_case(\"a\")\n    'A'\n    >>> snake_to_camel_case(\"a_\")\n    'A_'\n    >>> snake_to_camel_case(\"\")\n    ''\n    \"\"\"\n\n    if not snake_case:\n        return snake_case\n\n    camel_case = snake_case[0]\n    for character in snake_case[1:]:\n        if character == \"_\":\n            camel_case += character\n        else:\n            camel_case += character.upper()\n    return camel_case\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -3.279296875
    ],
    [
      "def to_camel_case(snake_case_string):\n    # snake_case_string = snake_case_string.replace(\"_\", \" \")\n    # words = snake_case_string.split(\" \")\n    # words = [word.lower() for word in words]\n    # return \"\".join(words[0].lower() + word.capitalize() for word in words[1:])\n    return \"\".join(word.capitalize() for word in snake_case_string.split(\"_\"))\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"a_b_c\"))",
      -3.279296875
    ],
    [
      "def snake_to_camel(string):\n    return string.replace(\"_\", \" \").title().replace(\" \", \"\")\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"snake_case\", \"snakeCase\"),\n        (\"snake_case1\", \"snakeCase1\"),\n        (\"snake_case123\", \"snakeCase123\"),\n        (\"snake_case_123\", \"snakeCase123\"),\n        (\"snake_case_1234\", \"snakeCase1234\"),\n        (\"snake_case_123_456\", \"snakeCase123456\"),\n        (\"_snake_case_123_456\", \"snakeCase123456\"),\n        (\"__snake_case_123_456\", \"snakeCase123456\"),\n        (\"snake_case__123_456\", \"snakeCase123456\"),\n        (\"snake_case_123_456_\", \"snakeCase123456\"),\n        (\"snake_case_123_456_789\", \"snakeCase123456789\"),\n        (\"snake_case_123_456_789_\", \"snakeCase123456789\"),\n        (\"snake_case_123_456_789_1011\", \"snakeCase1234567891011\"),\n        (\"snake_case_123_456_789_1011_\", \"snakeCase1234567891011\"),\n        (\"snake_case_123_456_789_1011_1213\", \"snakeCase12345678910111213\"),\n        (\"snake_case_123_456_789_1011_12",
      -3.498046875
    ],
    [
      "def snake_to_camel(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    words = string.split('_')\n    camel = ''\n    for word in words:\n        camel += word[0].upper() + word[1:]\n    return camel\n\n\ndef snake_to_camel2(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return string.title().replace('_', '')\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel('snake_case') == 'snakeCase'\n    assert snake_to_camel('snake_case_string') == 'snakeCaseString'\n\n\ndef test_snake_to_camel2():\n    assert snake_to_camel2('snake_case') == 'SnakeCase'\n    assert snake_to_camel2('snake_case_string') == 'SnakeCaseString'\n\n\nif __name__ == '__main__':\n    test_snake_to_camel()\n    test_snake_to_camel2()",
      -3.501953125
    ],
    [
      "from typing import List\n\n\ndef snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_case (str): snake case string.\n\n    Examples:\n        >>> snake_to_camel_case(\"snake_case\")\n        'snakeCase'\n        >>> snake_to_camel_case(\"_snake_case\")\n        'snakeCase'\n        >>> snake_to_camel_case(\"_snake_case_\")\n        'snakeCase'\n        >>> snake_to_camel_case(\"__snake_case__\")\n        'snakeCase'\n        >>> snake_to_camel_case(\"__snake__case__\")\n        'snakeCase'\n        >>> snake_to_camel_case(\"__snake_case\")\n        'snakeCase'\n        >>> snake_to_camel_case(\"snake_case__\")\n        'snakeCase'\n        >>> snake_to_camel_case(\"snake_case__\")\n        'snakeCase'\n        >>> snake_to_camel_case(\"snake_case_case__\")\n        'snakeCaseCase'\n    \"\"\"\n    camel_case: List[str] = []\n    snake_case_list: List[str] = snake_case.split(\"_\")\n\n    for snake_case in snake_case_list:\n        if not snake_case:\n            continue\n        camel_case.append(snake_case[0].upper())\n        camel_case.append(snake_case[1:])\n\n    return \"\".join(camel_case)\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"snake_case\"))\n    print(snake_to_camel_case(\"_snake_case\"))\n    print(snake_to_camel_case(\"_snake_case_\"))\n    print(snake_to_camel_case(\"__snake",
      -3.685546875
    ],
    [
      "def to_camel_case(string):\n    if string is None or len(string) == 0:\n        return string\n\n    camel = ''\n    for idx, char in enumerate(string):\n        if char.isupper():\n            camel += char\n        else:\n            if idx > 0:\n                camel += char.upper()\n            else:\n                camel += char\n\n    return camel\n\n\ndef test_to_camel_case():\n    assert to_camel_case('') == ''\n    assert to_camel_case('a') == 'A'\n    assert to_camel_case('a_b_c') == 'ABC'\n    assert to_camel_case('a_b_c_d') == 'ABCD'\n    assert to_camel_case('a_bc') == 'ABc'\n    assert to_camel_case('a_bc_d') == 'ABcD'\n    assert to_camel_case('a_bc_de') == 'ABcDe'\n    assert to_camel_case('a_b_c_d_e') == 'ABCDe'\n    assert to_camel_case('a_b_c_d_e_f') == 'ABCDEF'\n    assert to_camel_case('a_b_c_d_e_f_g') == 'ABCDEFG'\n    assert to_camel_case('a_b_c_d_e_f_g_h') == 'ABCDEFGH'\n    assert to_camel_case('a_b_c_d_e_f_g_h_i') == 'ABCDEFGHI'\n    assert to_camel_case('a_b_c_d_e_f_g_h_i_j') == 'ABCDEFGHIJ'\n\n\nif __name__ == '__main__':\n    test_to_camel_case()",
      -4.00390625
    ],
    [
      "def snake_to_camel_case(snake_string):\n    \"\"\"\n    Given a string in snake case, convert it to camel case.\n    \"\"\"\n    camel_string = snake_string\n    if snake_string[0] == \"_\":\n        camel_string = snake_string[1:]\n\n    camel_string = camel_string.title()\n    camel_string = camel_string.replace(\"_\", \"\")\n\n    return camel_string\n\n\ndef test_snake_to_camel_case():\n    \"\"\"\n    >>> test_snake_to_camel_case()\n    \"\"\"\n    assert snake_to_camel_case(\"hello_world\") == \"helloWorld\"\n    assert snake_to_camel_case(\"_hello_world\") == \"helloWorld\"\n    assert snake_to_camel_case(\"hello\") == \"hello\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.16015625
    ],
    [
      "def to_camel_case(string):\n    \"\"\"\n    :param string: str - snake case string\n    :return: str - camel case string\n    \"\"\"\n    if string == \"\":\n        return \"\"\n    else:\n        return string[0].lower() + string.title().replace('_', '')[1:]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(to_camel_case(''))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert to_camel_case('') == ''\n    assert to_camel_case('snake_case') == 'snakeCase'\n    assert to_camel_case('this_function_is_empty') == 'thisFunctionIsEmpty'\n    assert to_camel_case('name') == 'name'\n    assert to_camel_case('first_name') == 'firstName'\n    assert to_camel_case('this_is_a_function') == 'thisIsAFunction'\n    assert to_camel_case('function_call') == 'functionCall'\n    assert to_camel_case('function_call1') == 'functionCall1'\n    assert to_camel_case('list_of_functions') == 'listOfFunctions'\n    assert to_camel_case('github_username') == 'githubUsername'\n    assert to_camel_case('github2_username') == 'github2Username'\n    assert to_camel_case('github3_username') == 'github3Username'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      -4.328125
    ],
    [
      "def to_camel_case(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return string[0].lower() + string[1:].replace(\"_\", \" \")\n\n\ndef to_camel_case_2(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return \"\".join([\n        word.capitalize() if idx > 0 else word\n        for idx, word in enumerate(string.split(\"_\"))\n    ])\n\n\nprint(to_camel_case(\"test_case\"))\nprint(to_camel_case_2(\"test_case\"))",
      -4.33203125
    ],
    [
      "def snake_to_camel(snake_case: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_case (str): snake case string.\n\n    Examples:\n        >>> snake_to_camel('snake_to_camel')\n        'snakeToCamel'\n        >>> snake_to_camel('_snake_to_camel')\n        'snakeToCamel'\n        >>> snake_to_camel('__snake_to_camel__')\n        'snakeToCamel'\n        >>> snake_to_camel('snake_to_camel_case')\n        'snakeToCamelCase'\n        >>> snake_to_camel('snake__to_camel_case')\n        'snakeToCamelCase'\n        >>> snake_to_camel('snake_to_camel_case_2')\n        'snakeToCamelCase2'\n        >>> snake_to_camel('snake__to_camel_case_2')\n        'snakeToCamelCase2'\n\n    \"\"\"\n    return snake_case.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake_to_camel\"))\n    print(snake_to_camel(\"_snake_to_camel\"))\n    print(snake_to_camel(\"__snake_to_camel__\"))\n    print(snake_to_camel(\"snake_to_camel_case\"))\n    print(snake_to_camel(\"snake__to_camel_case\"))\n    print(snake_to_camel(\"snake_to_camel_case_2\"))\n    print(snake_to_camel(\"snake__to_camel_case_2\"))",
      -4.3515625
    ],
    [
      "from functools import reduce\nfrom string import ascii_letters\n\n\ndef to_camel_case(string):\n\n    def _to_camel_case(string, sep):\n        return string[0] + reduce(\n            lambda acc, e: acc + e if e in ascii_letters else acc + e.upper(),\n            string[1:].split(sep),\n            \"\",\n        )\n\n    return string if \"_\" not in string else _to_camel_case(string, \"_\")\n\n\nif __name__ == \"__main__\":\n    assert to_camel_case(\"\") == \"\"\n    assert to_camel_case(\"foo_bar\") == \"fooBar\"\n    assert to_camel_case(\"foo_bar_baz\") == \"fooBarBaz\"\n    assert to_camel_case(\"foo_bar_baz_boo\") == \"fooBarBazBoo\"\n    assert to_camel_case(\"foo_bar_baz_boo_far\") == \"fooBarBazBooFar\"\n    assert to_camel_case(\"foo_bar_baz_boo_far_boo\") == \"fooBarBazBooFarBoo\"\n    assert to_camel_case(\"foo_bar_baz_boo_far_boo_foo\") == \"fooBarBazBooFarBooFoo\"\n    assert to_camel_case(\"foo_bar_baz_boo_far_boo_foo_bar\") == \"fooBarBazBooFarBooFooBar\"\n    assert to_camel_case(\"foo_bar_baz_boo_far_boo_foo_bar_baz\") == \"fooBarBazBooFarBooFooBarBaz\"\n    assert to_camel_case(\"foo_bar_baz_boo_far_boo_foo_bar_baz_boo\") == \"fooBarBazBooFarBooFooBarBazBoo\"\n    assert to_camel_case(\"foo_bar_baz_boo_far_boo_foo_bar_baz_boo_far\") == \"fooBarBazBooFar",
      -4.625
    ],
    [
      "def snake_to_camel(snake_case: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_case (str): Snake case string.\n\n    Returns:\n        str: Camel case string.\n    \"\"\"\n    return snake_case.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake_case_string\"))",
      -4.95703125
    ],
    [
      "from typing import AnyStr\n\n\ndef to_camel_case(string: AnyStr) -> AnyStr:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        string (AnyStr): snake case string to be converted\n\n    Examples:\n        >>> to_camel_case(\"a_b_c\")\n        'aBC'\n        >>> to_camel_case(\"a\")\n        'a'\n        >>> to_camel_case(\"a_bc_d\")\n        'aBCD'\n        >>> to_camel_case(\"_a_b_c_d_\")\n        'ABCD'\n    \"\"\"\n    if not string:\n        return string\n    elif string.isupper():\n        return string\n\n    new_string = []\n    first_word = True\n\n    for word in string.split(\"_\"):\n        if not first_word:\n            new_string.append(word.capitalize())\n        else:\n            new_string.append(word)\n            first_word = False\n\n    return \"\".join(new_string)\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"a_b_c\"))\n    print(to_camel_case(\"a\"))\n    print(to_camel_case(\"a_bc_d\"))\n    print(to_camel_case(\"_a_b_c_d_\"))",
      -5.8828125
    ],
    [
      "from string import ascii_lowercase\n\n\ndef convert_snake_to_camel(snake_case_string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    >>> convert_snake_to_camel(\"snake_case_string\")\n    'snakeCaseString'\n    >>> convert_snake_to_camel(\"Snake_case_string\")\n    'snakeCaseString'\n    >>> convert_snake_to_camel(\"Snake_case_string_with_multiple_words\")\n    'snakeCaseStringWithMultipleWords'\n    >>> convert_snake_to_camel(\"snake_case_string_with_multiple_words\")\n    'snakeCaseStringWithMultipleWords'\n    >>> convert_snake_to_camel(\"_snake_case_string_with_multiple_words_\")\n    'snakeCaseStringWithMultipleWords'\n    >>> convert_snake_to_camel(\"\")\n    ''\n    \"\"\"\n    if not snake_case_string:\n        return snake_case_string\n\n    snake_case_string = snake_case_string.lower()\n    snake_case_string = snake_case_string.replace(\"-\", \"_\")\n    snake_case_string = snake_case_string.replace(\" \", \"_\")\n\n    return snake_case_string[0] + \"\".join(\n        word.title() for word in snake_case_string.split(\"_\")[1:]\n    )\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -6.19140625
    ],
    [
      "def convert_to_camelcase(snake_case_string: str) -> str:\n    \"\"\"\n    >>> convert_to_camelcase(\"snake_case_string\")\n    'snakeCaseString'\n    \"\"\"\n    return snake_case_string[0] + \"\".join(\n        [word.capitalize() for word in snake_case_string.split(\"_\")][1:]\n    )\n\n\ndef convert_to_camelcase_v2(snake_case_string: str) -> str:\n    \"\"\"\n    >>> convert_to_camelcase_v2(\"snake_case_string\")\n    'snakeCaseString'\n    \"\"\"\n    return snake_case_string.capitalize().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -6.43359375
    ],
    [
      "from string import ascii_lowercase\n\ndef snake_to_camel(string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        string (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    return \"\".join(x.capitalize() or \"_\" for x in string.split(\"_\"))\n\n\ndef snake_to_camel_pythonic(string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        string (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    return string.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake_to_camel\"))\n    print(snake_to_camel_pythonic(\"snake_to_camel\"))",
      -6.5703125
    ],
    [
      "from string import ascii_lowercase as lowercase\n\n\ndef to_camel_case(string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        string (str): snake case string\n\n    Returns:\n        str: camel case string\n\n    Examples:\n        >>> to_camel_case('snake_case_string')\n        'snakeCaseString'\n        >>> to_camel_case('snake_case_string_with_multiple_underscores')\n        'snakeCaseStringWithMultipleUnderscores'\n    \"\"\"\n    if not string:\n        return string\n    return (\n        string[0]\n        if not string.startswith(\"_\")\n        else string.replace(\"_\", \"\", 1)\n    ) + \"\".join(\n        word.capitalize() if word.startswith(\"_\") else word\n        for word in string.split(\"_\")\n    )\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -6.94921875
    ],
    [
      "from string import ascii_lowercase\n\n\ndef snake_to_camel_case(snake_case_string):\n    \"\"\"\n    >>> snake_to_camel_case(\"snake_case_string\")\n    'snakeCaseString'\n    >>> snake_to_camel_case(\"_snake_case_string\")\n    '_snakeCaseString'\n    >>> snake_to_camel_case(\"snake_case_string_\")\n    'snakeCaseString_'\n    >>> snake_to_camel_case(\"__snake_case_string_\")\n    '__snakeCaseString_'\n    >>> snake_to_camel_case(\"snake_case_string_snake_case_string\")\n    'snakeCaseStringSnakeCaseString'\n    >>> snake_to_camel_case(\"__snake_case_string_snake_case_string\")\n    '__snakeCaseStringSnakeCaseString'\n    >>> snake_to_camel_case(\"snake_case_string__snake_case_string\")\n    'snakeCaseString__snakeCaseString'\n    >>> snake_to_camel_case(\"__snake_case_string__snake_case_string\")\n    '__snakeCaseString__snakeCaseString'\n    \"\"\"\n    if not snake_case_string:\n        return snake_case_string\n\n    if snake_case_string[0] == \"_\":\n        return snake_case_string[0] + snake_to_camel_case(snake_case_string[1:])\n\n    if snake_case_string[-1] == \"_\":\n        return snake_to_camel_case(snake_case_string[:-1]) + snake_case_string[-1]\n\n    return (\n        snake_case_string[0]\n        + \"\".join(\n            [\n                letter\n                for letter in snake_case_string[1:]\n                if letter in ascii_lowercase or letter == \"_\"\n            ]\n        ).title()\n    )\n\n\nif __name__ == \"",
      -7.1796875
    ],
    [
      "from string import ascii_lowercase\n\n\ndef to_camel_case(string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    >>> to_camel_case('snake_case')\n    'snakeCase'\n    \"\"\"\n    words = string.split(\"_\")\n    first_word = words[0]\n    return first_word + \"\".join(word.title() for word in words[1:])\n\n\ndef to_camel_case_pythonic(string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    >>> to_camel_case_pythonic('snake_case')\n    'snakeCase'\n    \"\"\"\n    return string.title().replace(\"_\", \"\")\n\n\ndef to_camel_case_with_ascii_lowercase(string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    >>> to_camel_case_with_ascii_lowercase('snake_case')\n    'snakeCase'\n    \"\"\"\n    words = string.split(\"_\")\n    first_word = words[0]\n    return first_word + \"\".join(\n        ascii_lowercase[i] for i in range(len(words[1:]))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.453125
    ],
    [
      "def snake_to_camel_case(snake_str):\n    \"\"\"\n    Convert snake case string to camel case string.\n\n    Args:\n        snake_str(str): snake case string.\n\n    Returns:\n        str: camel case string.\n\n    Raises:\n        AssertionError: If `snake_str` is not a string.\n\n    >>> snake_to_camel_case('a_b_c')\n    'aBC'\n    >>> snake_to_camel_case('a')\n    'a'\n    >>> snake_to_camel_case('a_bc')\n    'aBc'\n    >>> snake_to_camel_case('_a_bc')\n    'ABc'\n    >>> snake_to_camel_case('a__bc')\n    'aBc'\n    >>> snake_to_camel_case('a__bc__')\n    'aBc'\n    >>> snake_to_camel_case('__a__bc__')\n    'ABc'\n    >>> snake_to_camel_case('_a_bc_d')\n    'aBcD'\n    >>> snake_to_camel_case('_a__bc_d')\n    'aBcD'\n    >>> snake_to_camel_case('_a_bc__d')\n    'aBcD'\n    >>> snake_to_camel_case('a_bc_d')\n    'aBcD'\n    >>> snake_to_camel_case('a_bc')\n    'aBc'\n    >>> snake_to_camel_case('a_bc__d')\n    'aBcD'\n    >>> snake_to_camel_case('a_bc_d__')\n    'aBcD'\n    \"\"\"\n    assert isinstance(snake_str, str), \"snake_str must be a string.\"\n    camel_case_str = snake_str.replace(\"_\", \" \")\n    camel_case_list = [\n        word.cap",
      -8.2265625
    ],
    [
      "def snake_to_camel_case(snake_str):\n    \"\"\"\n    :param snake_str: string\n    :return: string\n    \"\"\"\n    if not snake_str:\n        return snake_str\n\n    return snake_str[0] + snake_str[1:].replace('_', '')\n\n\nif __name__ == '__main__':\n    snake_str = 'my_favorite_language'\n    print(snake_to_camel_case(snake_str))",
      -8.9921875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}