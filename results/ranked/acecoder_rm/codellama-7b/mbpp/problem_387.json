{
  "problem": {
    "task_id": "MBPP/398",
    "prompt": "Write a function to compute the sum of digits of each number of a given list.",
    "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
    "test_list": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ],
    "challenge_test_list": [],
    "problem_id": 387
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def sum_of_digits(numbers):\n    \"\"\"\n    >>> sum_of_digits([12, 13, 15, 16])\n    [3, 4, 6, 7]\n    >>> sum_of_digits([])\n    []\n    \"\"\"\n    if not numbers:\n        return []\n\n    sum_of_digits = []\n\n    for number in numbers:\n        sum_of_digits.append(sum(int(digit) for digit in str(number)))\n\n    return sum_of_digits\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      19.96875
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> List[int]:\n    \"\"\"Calculates the sum of digits of each number of a given list.\n\n    Args:\n        numbers (List[int]): list of numbers to calculate the sum of digits\n\n    Returns:\n        List[int]: list of the sums of digits of the numbers in the given list\n    \"\"\"\n\n    return [sum(int(digit) for digit in str(number)) for number in numbers]\n\n\ndef main():\n    numbers = [123, 4567, 891011]\n    sums_of_digits = sum_of_digits(numbers)\n    print(sums_of_digits)\n\n\nif __name__ == \"__main__\":\n    main()",
      17.5
    ],
    [
      "def sum_of_digits(lst):\n    return [sum(int(digit) for digit in str(num)) for num in lst]\n\n\ndef test_sum_of_digits():\n    assert sum_of_digits([]) == []\n    assert sum_of_digits([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert sum_of_digits([123, 456, 789]) == [6, 15, 24]\n    assert sum_of_digits([123456, 789012]) == [21, 21]\n\n\nif __name__ == '__main__':\n    test_sum_of_digits()",
      16.453125
    ],
    [
      "# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(num_list):\n    result = []\n    for num in num_list:\n        result.append(sum(int(digit) for digit in str(num)))\n    return result\n\n\n# Tests\ndef test_sum_of_digits():\n    assert sum_of_digits([10, 20, 30]) == [1, 2, 3]\n    assert sum_of_digits([11, 22, 33]) == [2, 4, 6]\n    assert sum_of_digits([101, 202, 303]) == [2, 4, 6]\n\n\nif __name__ == '__main__':\n    test_sum_of_digits()",
      14.375
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> List[int]:\n    \"\"\"Sums digits of each number in a list.\n\n    Args:\n        numbers (List[int]): list of numbers.\n\n    Examples:\n        >>> assert sum_of_digits([12, 23, 34, 45]) == [3, 5, 7, 9]\n    \"\"\"\n    return [\n        reduce(lambda x, y: x + y, [int(i) for i in str(num)]) for num in numbers\n    ]\n\n\ndef sum_of_digits_pythonic(numbers: List[int]) -> List[int]:\n    \"\"\"Sums digits of each number in a list.\n\n    Args:\n        numbers (List[int]): list of numbers.\n\n    Examples:\n        >>> assert sum_of_digits_pythonic([12, 23, 34, 45]) == [3, 5, 7, 9]\n    \"\"\"\n    return [sum(int(i) for i in str(num)) for num in numbers]\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([12, 23, 34, 45]))",
      13.3046875
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    sums = []\n\n    for num in nums:\n        s = 0\n        for digit in str(num):\n            s += int(digit)\n\n        sums.append(s)\n\n    return sums\n\n\nif __name__ == \"__main__\":\n    assert sum_of_digits([123, 456, 789]) == [6, 15, 18]",
      12.765625
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(lst: List[int]) -> List[int]:\n    \"\"\"Sums the digits of the numbers in a list.\n\n    Args:\n        lst (List[int]): list of numbers\n\n    Returns:\n        List[int]: list of sums of digits\n    \"\"\"\n    result = []\n\n    for i in lst:\n        total = 0\n        for n in str(i):\n            total += int(n)\n        result.append(total)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([123, 456]))\n    print(sum_of_digits([123, 456, 789]))",
      12.5390625
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits(nums):\n    return [reduce(lambda x, y: x + y, [int(i) for i in str(num)]) for num in nums]\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits2(nums):\n    result = []\n    for num in nums:\n        temp = 0\n        while num != 0:\n            temp += num % 10\n            num = num // 10\n        result.append(temp)\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef sum_of_digits3(nums):\n    return [sum(map(int, str(num))) for num in nums]",
      11.0390625
    ],
    [
      "# O(n) time | O(1) space\ndef sum_of_digits(number):\n    sum = 0\n    while number > 0:\n        sum += number % 10\n        number = number // 10\n    return sum\n\n\ndef sum_of_digits_using_divmod(number):\n    return sum([int(digit) for digit in str(number)])\n\n\n# O(n) time | O(n) space\ndef sum_of_digits_using_divmod_2(number):\n    return sum(int(digit) for digit in str(number))\n\n\nprint(sum_of_digits(1234))\nprint(sum_of_digits_using_divmod(1234))\nprint(sum_of_digits_using_divmod_2(1234))",
      9.265625
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\n# Time complexity: O(n) where n is the number of digits in the largest number\n# Space complexity: O(1)\ndef sum_of_digits(numbers: List[int]) -> int:\n    return reduce(lambda x, y: x + y, map(lambda x: sum(map(int, str(x))), numbers))\n\n\n# Time complexity: O(n) where n is the number of digits in the largest number\n# Space complexity: O(1)\ndef sum_of_digits_2(numbers: List[int]) -> int:\n    result = 0\n    for number in numbers:\n        while number > 0:\n            result += number % 10\n            number //= 10\n    return result\n\n\n# Time complexity: O(n) where n is the number of digits in the largest number\n# Space complexity: O(1)\ndef sum_of_digits_3(numbers: List[int]) -> int:\n    return sum(map(lambda x: sum(map(int, str(x))), numbers))\n\n\n# Time complexity: O(n) where n is the number of digits in the largest number\n# Space complexity: O(1)\ndef sum_of_digits_4(numbers: List[int]) -> int:\n    return sum(map(lambda x: sum(map(int, str(x))), numbers), 0)\n\n\nprint(sum_of_digits([123, 45]))\nprint(sum_of_digits_2([123, 45]))\nprint(sum_of_digits_3([123, 45]))\nprint(sum_of_digits_4([123, 45]))",
      7.7265625
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits(nums):\n    total = 0\n    for num in nums:\n        while num:\n            total += num % 10\n            num //= 10\n\n    return total\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_rec(nums):\n    return reduce(lambda x, y: x + y, map(lambda x: sum(int(d) for d in str(x)), nums))\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef sum_of_digits_list(nums):\n    return list(map(lambda x: sum(int(d) for d in str(x)), nums))\n\n\nprint(sum_of_digits([123, 456]))\nprint(sum_of_digits_rec([123, 456]))\nprint(sum_of_digits_list([123, 456]))",
      7.22265625
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n    \"\"\"Sums of digits of all numbers in a list.\n\n    Args:\n        nums (List[int]): list of numbers\n\n    Returns:\n        int: sum of all numbers' digits\n    \"\"\"\n    return reduce(lambda x, y: x + y, map(sum_digits, nums))\n\n\ndef sum_digits(num: int) -> int:\n    \"\"\"Sums of digits of a number.\n\n    Args:\n        num (int): number\n\n    Returns:\n        int: sum of all digits\n    \"\"\"\n    return sum([int(digit) for digit in str(num)])",
      7.1328125
    ],
    [
      "# 2018 Solution\n\ndef sum_of_digits(n):\n    return sum([int(digit) for digit in str(n)])\n\n\ndef sum_of_digits_of_all_numbers(numbers):\n    return sum([sum_of_digits(n) for n in numbers])\n\n\n# Example:\nnumbers = [123, 456, 789]\nprint(sum_of_digits_of_all_numbers(numbers))\n\n\n# 2015 Solution\n\ndef sum_of_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n /= 10\n    return sum\n\n\ndef sum_of_digits_of_all_numbers(numbers):\n    sum = 0\n    for n in numbers:\n        sum += sum_of_digits(n)\n    return sum\n\n\n# Example:\nnumbers = [123, 456, 789]\nprint(sum_of_digits_of_all_numbers(numbers))",
      6.5390625
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits(nums):\n    result = 0\n\n    for num in nums:\n        while num > 0:\n            result += num % 10\n            num //= 10\n\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_2(nums):\n    return reduce(lambda x, y: x + y, map(lambda x: sum(map(int, str(x))), nums))\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_3(nums):\n    return sum(map(lambda x: sum(map(int, str(x))), nums))\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_4(nums):\n    return sum(map(lambda x: sum(map(int, str(x))), nums))\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_5(nums):\n    return sum(map(lambda x: sum(map(int, str(x))), nums))\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_6(nums):\n    return sum(map(lambda x: sum(map(int, str(x))), nums))\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_7(nums):\n    return sum(map(lambda x: sum(map(int, str(x))), nums))",
      6.4375
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> List[int]:\n    \"\"\"Returns a list of the sum of digits of the input list.\n\n    Args:\n        numbers (List[int]): The list of numbers to process.\n\n    Examples:\n        >>> sum_of_digits([123, 456, 789])\n        [6, 15, 24]\n    \"\"\"\n    return [sum(int(digit) for digit in str(number)) for number in numbers]\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([123, 456, 789]))",
      6.26171875
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    \"\"\"Computes the sum of digits of each number of a given list.\n\n    Args:\n        numbers (List[int]): List of numbers.\n\n    Examples:\n        >>> assert sum_of_digits([123, 45]) == 17\n    \"\"\"\n    return sum([sum([int(i) for i in str(number)]) for number in numbers])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([123, 45]))",
      5.8671875
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    \"\"\"Sums the digits of each number in a list.\n\n    Args:\n        numbers (List[int]): a list of numbers\n\n    Examples:\n        >>> assert sum_of_digits([123, 456, 789]) == 28\n    \"\"\"\n    return sum([sum([int(digit) for digit in str(number)]) for number in numbers])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([123, 456, 789]))",
      5.85546875
    ],
    [
      "def sum_of_digits(numbers: list) -> int:\n    \"\"\"\n    >>> sum_of_digits([123, 456, 789])\n    36\n    \"\"\"\n    result = 0\n    for num in numbers:\n        while num:\n            result += num % 10\n            num = num // 10\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.546875
    ],
    [
      "def sum_of_digits(arr):\n    if len(arr) == 0:\n        return 0\n    sum_of_all = 0\n    for num in arr:\n        sum_of_all += sum_of_digits_of_number(num)\n    return sum_of_all\n\n\ndef sum_of_digits_of_number(num):\n    sum_of_digits_of_number = 0\n    while num > 0:\n        sum_of_digits_of_number += num % 10\n        num = num // 10\n    return sum_of_digits_of_number\n\n\n# test\nassert sum_of_digits([]) == 0\nassert sum_of_digits([1, 2, 3, 4]) == 10\nassert sum_of_digits([10, 2, 3, 4]) == 10\nassert sum_of_digits([100, 2, 3, 4]) == 10\nassert sum_of_digits([1000, 2, 3, 4]) == 10\nassert sum_of_digits([10000, 2, 3, 4]) == 10\nassert sum_of_digits([12345]) == 15",
      5.53515625
    ],
    [
      "from functools import reduce\nfrom operator import iadd\nfrom typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digit(numbers: List[int]) -> int:\n    return reduce(iadd, numbers, 0)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digit(numbers: List[int]) -> int:\n    result = 0\n\n    for n in numbers:\n        while n > 0:\n            result += n % 10\n            n //= 10\n\n    return result\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digit(numbers: List[int]) -> int:\n    return sum(sum(map(int, str(n))) for n in numbers)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digit(numbers: List[int]) -> int:\n    result = 0\n\n    for n in numbers:\n        while n:\n            result += n % 10\n            n //= 10\n\n    return result",
      5.41015625
    ],
    [
      "def sum_digits(number: int) -> int:\n    \"\"\"\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(-1)\n    1\n    >>> sum_digits(-12345)\n    15\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        number = -number\n    if number < 10:\n        return number\n    else:\n        return number % 10 + sum_digits(number // 10)\n\n\ndef sum_digits_list(numbers: list) -> list:\n    \"\"\"\n    >>> sum_digits_list([123, 456, 789])\n    [6, 15, 16]\n    >>> sum_digits_list([0, 0])\n    [0, 0]\n    >>> sum_digits_list([-1, -12345])\n    [1, 15]\n    \"\"\"\n    return [sum_digits(number) for number in numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.22265625
    ],
    [
      "def sum_of_digits(number):\n    \"\"\"Return the sum of digits of a number.\n\n    >>> sum_of_digits(1234)\n    10\n    >>> sum_of_digits(0)\n    0\n    >>> sum_of_digits(12345)\n    15\n    >>> sum_of_digits(1234567890)\n    45\n    >>> sum_of_digits(12345678901234567890)\n    45\n    >>> sum_of_digits(1234567890123456789012345678901234567890)\n    45\n    >>> sum_of_digits(123456789012345678901234567890123456789012345678901234567890)\n    45\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Input cannot be negative\")\n    if number == 0:\n        return 0\n\n    result = 0\n    while number > 0:\n        result += number % 10\n        number //= 10\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.09375
    ],
    [
      "from typing import List\n\n\n# O(N) time | O(N) space\ndef sum_of_digits(numbers: List[int]) -> int:\n    return sum(map(sum_of_digits_of_number, numbers))\n\n\ndef sum_of_digits_of_number(number: int) -> int:\n    if number < 0:\n        return -1\n\n    digits_sum = 0\n    while number > 0:\n        digits_sum += number % 10\n        number //= 10\n\n    return digits_sum\n\n\n\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\n\nfrom typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    return sum(map(sum_of_digits_of_number, numbers))\n\n\ndef sum_of_digits_of_number(number: int) -> int:\n    digits_sum = 0\n    while number > 0:\n        digits_sum += number % 10\n        number //= 10\n\n    return digits_sum\n\n\n\"\"\"\nSum of digits of each number in a list.\n\nInput:\n    numbers: The list of numbers\n\nOutput:\n    The sum of digits of each number\n\nExample:\n    >>> sum_of_digits([123, 45])\n    15\n\"\"\"",
      4.78515625
    ],
    [
      "def sum_of_digits(numbers):\n    \"\"\"\n    >>> sum_of_digits([123, 45])\n    [6, 9]\n    >>> sum_of_digits([123, 45, 67])\n    [6, 9, 13]\n    \"\"\"\n    return [sum(int(i) for i in str(number)) for number in numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      4.39453125
    ],
    [
      "def sum_of_digits(lst):\n    \"\"\"\n    >>> sum_of_digits([123, 234, 345])\n    [6, 9, 12]\n    >>> sum_of_digits([1234567890])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 1]\n    \"\"\"\n    return [sum(int(i) for i in str(num)) for num in lst]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.33984375
    ],
    [
      "def sum_of_digits(numbers):\n    \"\"\"\n    Computes the sum of digits of each number of a given list\n    :param numbers: List[int]\n    :return: int\n    \"\"\"\n    sum_of_digits = 0\n    for i in numbers:\n        while i:\n            sum_of_digits += i % 10\n            i //= 10\n    return sum_of_digits\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([123, 456, 789]))",
      4.21484375
    ],
    [
      "def sum_of_digits(n):\n    return sum(int(c) for c in str(n))\n\n\ndef sum_of_digits_of_list(nums):\n    return [sum_of_digits(n) for n in nums]\n\n\nif __name__ == \"__main__\":\n    nums = [123, 456, 789]\n    print(sum_of_digits_of_list(nums))",
      4.03125
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    \"\"\"Sums digits of each number of a list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert sum_of_digits([12, 123]) == 6\n    \"\"\"\n    return sum([sum([int(digit) for digit in str(number)]) for number in numbers])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([12, 123]))",
      3.056640625
    ],
    [
      "def sum_digits(number):\n    \"\"\"\n    >>> sum_digits(1234)\n    10\n    \"\"\"\n    return sum([int(i) for i in str(number)])\n\n\ndef sum_digits_list(numbers):\n    \"\"\"\n    >>> sum_digits_list([1234, 5678])\n    [10, 21]\n    \"\"\"\n    return [sum_digits(number) for number in numbers]\n\n\ndef sum_digits_list_recursive(numbers):\n    \"\"\"\n    >>> sum_digits_list_recursive([1234, 5678])\n    [10, 21]\n    \"\"\"\n    if len(numbers) == 1:\n        return [sum_digits(numbers[0])]\n    else:\n        return [sum_digits(numbers[0])] + sum_digits_list_recursive(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.564453125
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n    \"\"\"Compute sum of digits of each number of a given list.\n\n    Args:\n        nums (List[int]): list of numbers\n\n    Returns:\n        int: sum of digits\n    \"\"\"\n    return sum([sum([int(char) for char in str(num)]) for num in nums])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([2, 4, 6, 8, 10]))",
      1.98046875
    ],
    [
      "from functools import reduce\n\n\n# def sum_digits(n):\n#     s = 0\n#     while n:\n#         s += n % 10\n#         n //= 10\n#     return s\n\n\ndef sum_digits(n):\n    return reduce(lambda x, y: x + y, [int(i) for i in str(n)])\n\n\ndef sum_digits_of_numbers(numbers):\n    return [sum_digits(n) for n in numbers]\n\n\ndef test_sum_digits():\n    assert sum_digits(1234) == 10\n    assert sum_digits(123456789) == 45\n\n\ndef test_sum_digits_of_numbers():\n    assert sum_digits_of_numbers([123, 456, 789]) == [6, 15, 27]",
      1.517578125
    ],
    [
      "def sum_of_digits(lst):\n    \"\"\"\n    >>> sum_of_digits([])\n    0\n    >>> sum_of_digits([1])\n    1\n    >>> sum_of_digits([1, 2, 3, 4, 5])\n    15\n    >>> sum_of_digits([111, 2, 3, 4, 5])\n    7\n    \"\"\"\n    return sum(sum(map(int, str(n))) for n in lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.0595703125
    ],
    [
      "def sum_of_digits(arr):\n    result = 0\n    for num in arr:\n        result += sum(int(digit) for digit in str(num))\n    return result\n\n\ndef test_sum_of_digits():\n    assert sum_of_digits([12, 13, 14]) == 6\n    assert sum_of_digits([123, 456]) == 15\n    assert sum_of_digits([123456789, 987654321]) == 96\n\n\nif __name__ == \"__main__\":\n    test_sum_of_digits()",
      0.86669921875
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits(numbers: List[int]) -> int:\n    return reduce(lambda acc, number: acc + sum([int(i) for i in str(number)]), numbers, 0)\n\n\nprint(sum_of_digits([123, 45]))\nprint(sum_of_digits([123, 45, 12345]))",
      0.826171875
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(lst: List[int]) -> List[int]:\n    \"\"\"Return a list with sum of digits of each number.\n\n    >>> sum_of_digits([123, 456])\n    [6, 15]\n    \"\"\"\n    return [sum(int(i) for i in str(num)) for num in lst]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.62646484375
    ],
    [
      "from functools import reduce\n\n\ndef sum_of_digits(num):\n    return reduce(lambda x, y: x + y, map(int, list(str(num))))\n\n\ndef sum_of_digits_in_list(num_list):\n    return reduce(lambda x, y: x + y, map(sum_of_digits, num_list))\n\n\nprint(sum_of_digits(123))\nprint(sum_of_digits(12345))\nprint(sum_of_digits(1234567))\nprint(sum_of_digits(123456789))\nprint(sum_of_digits(1234567890))\nprint(sum_of_digits_in_list([123, 12345, 1234567, 123456789, 1234567890]))",
      0.615234375
    ],
    [
      "def sum_of_digits(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: list of integers\n    \"\"\"\n    return [sum(int(i) for i in str(num)) for num in nums]\n\n\nprint(sum_of_digits([123, 456, 789]))\n\n\ndef sum_of_digits_2(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: list of integers\n    \"\"\"\n    return [sum(int(i) for i in str(num)) for num in nums]\n\n\nprint(sum_of_digits_2([123, 456, 789]))",
      0.546875
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n) where n is the number of elements in the list\n# Space complexity: O(1)\ndef sum_of_digits(num_list):\n    if len(num_list) == 0:\n        return 0\n    return reduce(lambda x, y: x + y, map(lambda x: sum(map(int, str(x))), num_list))\n\n\n# Time complexity: O(n) where n is the number of elements in the list\n# Space complexity: O(1)\ndef sum_of_digits_2(num_list):\n    if len(num_list) == 0:\n        return 0\n    return sum([sum(map(int, str(x))) for x in num_list])\n\n\nprint(sum_of_digits([1, 2, 3]))\nprint(sum_of_digits([1, 2, 3, 4, 5, 6]))\nprint(sum_of_digits_2([1, 2, 3]))\nprint(sum_of_digits_2([1, 2, 3, 4, 5, 6]))",
      0.4736328125
    ],
    [
      "def sum_of_digits(arr):\n    total = 0\n\n    for num in arr:\n        total += sum([int(digit) for digit in str(num)])\n\n    return total\n\n\ndef main():\n    print(sum_of_digits([123, 456]))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.43212890625
    ],
    [
      "def sum_of_digits(nums):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum\n\n\ndef sum_of_digits_1(nums):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        while num:\n            total_sum += num % 10\n            num = num // 10\n    return total_sum\n\n\ndef sum_of_digits_2(nums):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        total_sum += num % 10\n        num //= 10\n    return total_sum\n\n\ndef sum_of_digits_3(nums):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        while num:\n            total_sum += num % 10\n            num = num // 10\n    return total_sum\n\n\nif __name__ == \"__main__\":\n    nums = [123, 456, 789]\n    print(sum_of_digits(nums))\n    print(sum_of_digits_1(nums))\n    print(sum_of_digits_2(nums))\n    print(sum_of_digits_3(nums))",
      0.413818359375
    ],
    [
      "def sum_of_digits(numbers):\n    \"\"\"\n    >>> sum_of_digits([123, 456])\n    [6, 15]\n    >>> sum_of_digits([12, 13, 14])\n    [3, 4, 5]\n    >>> sum_of_digits([1000])\n    [1]\n    \"\"\"\n    return [sum(int(c) for c in str(n)) for n in numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.3046875
    ],
    [
      "from typing import List\n\n\n# O(n) time | O(n) space\ndef sum_of_digits(nums: List[int]) -> List[int]:\n    sums = []\n\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        sums.append(sum)\n\n    return sums\n\n\n# O(n) time | O(n) space\ndef sum_of_digits_2(nums: List[int]) -> List[int]:\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n\n# O(n) time | O(n) space\ndef sum_of_digits_3(nums: List[int]) -> List[int]:\n    return [sum(map(int, str(num))) for num in nums]\n\n\nprint(sum_of_digits([123, 456]))\nprint(sum_of_digits_2([123, 456]))\nprint(sum_of_digits_3([123, 456]))",
      0.253662109375
    ],
    [
      "from functools import reduce\nfrom tools.decorators import time_this\n\n\n@time_this\ndef sum_of_digits(numbers):\n    return [reduce(lambda x, y: x + y, [int(i) for i in str(num)]) for num in numbers]\n\n\n@time_this\ndef sum_of_digits_pythonic(numbers):\n    return [sum(int(i) for i in str(num)) for num in numbers]\n\n\nif __name__ == \"__main__\":\n    numbers = [12, 123, 1234, 12345]\n    print(sum_of_digits(numbers))\n    print(sum_of_digits_pythonic(numbers))",
      0.229248046875
    ],
    [
      "def sum_of_digits(num):\n    digits = [int(digit) for digit in str(num)]\n    return sum(digits)\n\n\ndef sum_of_digits_in_list(num_list):\n    return [sum_of_digits(num) for num in num_list]\n\n\nprint(sum_of_digits_in_list([123, 456, 789]))",
      0.1904296875
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits(numbers):\n    if len(numbers) == 0:\n        return 0\n\n    return reduce(add, map(sum_of_number, numbers))\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_number(number):\n    sum = 0\n\n    while number != 0:\n        sum += number % 10\n        number //= 10\n\n    return sum\n\n\nprint(sum_of_digits([123456789, 234, 1234, 5678]))",
      0.1297607421875
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef sum_of_digits(arr):\n    return [reduce(lambda x, y: x + y, str(i)) for i in arr]\n\n\nprint(sum_of_digits([123, 456]))",
      0.0352783203125
    ],
    [
      "def sum_of_digits(list_of_numbers):\n    sum = 0\n    for num in list_of_numbers:\n        sum += sum_of_digit(num)\n    return sum\n\ndef sum_of_digit(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum\n\nif __name__ == '__main__':\n    print(sum_of_digits([123, 456, 789]))",
      -0.10870361328125
    ],
    [
      "def sum_of_digits(number):\n    return sum(map(int, list(str(number))))\n\n\ndef sum_of_digits_list(lst):\n    return sum(map(sum_of_digits, lst))\n\n\ndef main():\n    print(sum_of_digits_list([12, 23, 34, 45]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.1610107421875
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    \"\"\"Sums the digits of each number in a list.\n\n    Args:\n        numbers (List[int]): List of integers.\n\n    Examples:\n        >>> assert sum_of_digits([12, 13, 14]) == 6\n        >>> assert sum_of_digits([123, 124]) == 6\n    \"\"\"\n    return sum(sum(int(digit) for digit in str(number)) for number in numbers)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([12, 13, 14]))",
      -0.260498046875
    ],
    [
      "from typing import List\n\n\n# O(nk) time | O(n) space\ndef sum_of_digits(numbers: List[int]) -> List[int]:\n    total_sums = []\n    for num in numbers:\n        total_sum = 0\n        while num > 0:\n            total_sum += num % 10\n            num //= 10\n        total_sums.append(total_sum)\n    return total_sums\n\n\n\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"\n\n\ndef sum_of_digits(numbers: List[int]) -> List[int]:\n    return [sum([int(digit) for digit in str(num)]) for num in numbers]\n\n\n\"\"\"\nsum_of_digits([123, 456]) \u2192 [6, 15]\nsum_of_digits([1230, 4560]) \u2192 [6, 15]\nsum_of_digits([12, 456789]) \u2192 [3, 19]\n\"\"\"",
      -0.429931640625
    ],
    [
      "def sum_of_digits(nums):\n    total = 0\n    for i in nums:\n        while i > 0:\n            total += i % 10\n            i //= 10\n    return total\n\nif __name__ == '__main__':\n    print(sum_of_digits([12, 123, 1234]))",
      -0.45458984375
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\n# Time complexity O(n) where n is the length of the list\n# Space complexity O(1)\ndef sum_digits(nums):\n    return [reduce(add, map(int, str(x))) for x in nums]\n\n\n# Time complexity O(n) where n is the length of the list\n# Space complexity O(n)\ndef sum_digits2(nums):\n    return [sum(int(d) for d in str(x)) for x in nums]\n\n\n# Time complexity O(n) where n is the length of the list\n# Space complexity O(n)\ndef sum_digits3(nums):\n    return [sum(map(int, str(x))) for x in nums]\n\n\n# Time complexity O(n) where n is the length of the list\n# Space complexity O(n)\ndef sum_digits4(nums):\n    return [sum(int(digit) for digit in str(x)) for x in nums]\n\n\n# Time complexity O(n) where n is the length of the list\n# Space complexity O(n)\ndef sum_digits5(nums):\n    return [sum(int(digit) for digit in str(x)) for x in nums]\n\n\n# Time complexity O(n) where n is the length of the list\n# Space complexity O(n)\ndef sum_digits6(nums):\n    return [sum(map(int, str(x))) for x in nums]\n\n\n# Time complexity O(n) where n is the length of the list\n# Space complexity O(n)\ndef sum_digits7(nums):\n    return [sum(int(digit) for digit in str(x)) for x in nums]\n\n\n# Time complexity O(n) where n is the length of the list\n# Space complexity O(n)\ndef sum_digits8(nums):\n    return [sum(int(digit) for digit in str(x)) for x in nums]\n\n\n# Time complexity O(n) where n is the length of the list\n# Space complexity O(n)\ndef sum",
      -0.5458984375
    ],
    [
      "def sum_of_digits(numbers):\n    \"\"\"\n    Computes the sum of digits of each number of a given list.\n\n    Args:\n        numbers (list): list of numbers\n\n    Returns:\n        int: sum of digits of each number in a list\n    \"\"\"\n    return sum([sum([int(digit) for digit in str(number)]) for number in numbers])\n\n\ndef main():\n    print(sum_of_digits([12, 23, 34, 45, 56]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.5751953125
    ],
    [
      "from typing import List\n\n\n# O(n)\ndef sum_of_digits(lst: List[int]) -> int:\n    if lst is None or len(lst) == 0:\n        return 0\n    return sum([sum([int(i) for i in str(i)]) for i in lst])\n\n\n# O(n)\ndef sum_of_digits_2(lst: List[int]) -> int:\n    if lst is None or len(lst) == 0:\n        return 0\n    return sum(map(lambda i: sum([int(i) for i in str(i)]), lst))\n\n\n# O(n)\ndef sum_of_digits_3(lst: List[int]) -> int:\n    if lst is None or len(lst) == 0:\n        return 0\n    return sum([i for i in map(lambda x: int(x), map(str, lst))])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([1, 23, 456]))\n    print(sum_of_digits_2([1, 23, 456]))\n    print(sum_of_digits_3([1, 23, 456]))",
      -0.61328125
    ],
    [
      "def sum_of_digits(list):\n    sum = 0\n    for i in list:\n        sum += sum_of_number(i)\n    return sum\n\ndef sum_of_number(num):\n    sum = 0\n    while num:\n        sum += num % 10\n        num //= 10\n    return sum\n\nif __name__ == '__main__':\n    print(sum_of_digits([1234, 23455]))",
      -0.69482421875
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# def sum_of_digits(numbers: List[int]) -> int:\n#     return sum(sum(map(int, str(num))) for num in numbers)\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef sum_of_digits(numbers: List[int]) -> int:\n    return sum(num // 10 + num % 10 for num in numbers)",
      -0.7431640625
    ],
    [
      "def sum_of_digits(numbers: list) -> list:\n    \"\"\"\n    >>> sum_of_digits([123, 45, 100])\n    [6, 9, 1]\n    \"\"\"\n    return [sum(int(digit) for digit in str(number)) for number in numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return sum(map(lambda x: sum(int(i) for i in str(x)), nums))\n\n\nif __name__ == \"__main__\":\n    assert sum_of_digits([123, 456, 789]) == 26",
      -0.85595703125
    ],
    [
      "from functools import reduce\n\n\n# Time complexity is O(n) where n is the number of digits in the maximum number of the list.\ndef sum_digits(nums):\n    return reduce(lambda x, y: x + sum(map(int, str(y))), nums, 0)\n\n\nprint(sum_digits([1234, 234, 34]))\nprint(sum_digits([123, 234, 345, 456, 567, 678, 789]))",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return sum([sum([int(i) for i in str(num)]) for num in nums])\n\n\nif __name__ == \"__main__\":\n    assert sum_of_digits([12, 345, 99]) == 12",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n\n    for number in numbers:\n        result += sum(int(digit) for digit in str(number))\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert sum_of_digits([12, 45, 123]) == 24",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(lst: List[int]) -> List[int]:\n    \"\"\"Sums all digits of each number in a list.\n\n    Args:\n        lst (List[int]): list of numbers\n\n    Returns:\n        List[int]: list of sums of digits\n    \"\"\"\n    return [sum(int(digit) for digit in str(num)) for num in lst]\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([123, 456, 789]))",
      -0.85595703125
    ],
    [
      "from functools import reduce\nfrom tools.decorators import function_details\n\n\n@function_details\ndef sum_of_digits(num_list):\n    \"\"\"Return the sum of digits of each number of a given list\"\"\"\n    return [reduce(lambda x, y: int(x) + int(y), str(i)) for i in num_list]",
      -0.85595703125
    ],
    [
      "\"\"\"Question:\nWrite a function to compute the sum of digits of each number of a given list.\nExample:\nInput: [12,13,14]\nOutput: 3\n\"\"\"\n\nclass Solution(object):\n    def sumDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum([sum(map(int, str(num))) for num in nums])",
      -0.85791015625
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\ndef sum_of_digits(num: int) -> int:\n    return reduce(lambda x, y: x + y, [int(i) for i in str(num)])\n\n\ndef sum_of_digits_of_numbers(nums: List[int]) -> int:\n    return reduce(lambda x, y: x + y, [sum_of_digits(num) for num in nums])\n\n\nif __name__ == \"__main__\":\n    assert sum_of_digits(123) == 6\n    assert sum_of_digits(987) == 24\n    assert sum_of_digits_of_numbers([123, 987]) == 30",
      -0.85791015625
    ],
    [
      "def sum_of_digits(nums):\n    return [sum(int(i) for i in str(num)) for num in nums]\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([12, 23, 34]))",
      -0.85791015625
    ],
    [
      "def sum_of_digits(lst):\n    return [sum(int(digit) for digit in str(number)) for number in lst]\n\n\nif __name__ == '__main__':\n    print(sum_of_digits([1, 23, 456]))",
      -0.85791015625
    ],
    [
      "def sum_of_digits(arr):\n    return sum([sum([int(i) for i in str(x)]) for x in arr])\n\n\n# Tests\nprint(sum_of_digits([123, 45]))",
      -0.85791015625
    ],
    [
      "def sum_of_digits(input_list):\n    \"\"\"\n    >>> sum_of_digits([123, 456])\n    [6, 15]\n    \"\"\"\n    return [sum(int(d) for d in str(n)) for n in input_list]\n\n\ndef sum_of_digits_loop(input_list):\n    \"\"\"\n    >>> sum_of_digits_loop([123, 456])\n    [6, 15]\n    \"\"\"\n    result = []\n    for n in input_list:\n        sum_ = 0\n        while n:\n            sum_ += n % 10\n            n = n // 10\n        result.append(sum_)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(lst: List[int]) -> int:\n    \"\"\"Compute the sum of digits of each number of a given list.\n\n    Args:\n        lst (List[int]): list of numbers\n\n    Examples:\n        >>> assert sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 45\n    \"\"\"\n    return sum(map(lambda x: sum(map(int, str(x))), lst))\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))",
      -0.8583984375
    ],
    [
      "def sum_digits(number):\n    return sum(int(digit) for digit in str(number))\n\n\ndef sum_of_digits(numbers):\n    return sum(sum_digits(number) for number in numbers)\n\n\ndef main():\n    print(sum_of_digits([12, 1234, 123456]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def sum_of_digits(number):\n    \"\"\"\n    Sum the digits of each number in a given list.\n\n    >>> sum_of_digits([123, 456])\n    [6, 15]\n    \"\"\"\n    return [sum(int(x) for x in str(n)) for n in number]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from functools import reduce\n\n\ndef sum_of_digits(nums):\n    \"\"\"Sums the digits of the numbers in a list\"\"\"\n    return [reduce(lambda x, y: x + y, [int(i) for i in str(num)]) for num in nums]\n\n\nprint(sum_of_digits([123, 456]))",
      -0.8583984375
    ],
    [
      "def sum_of_digits(lst):\n    return [sum([int(x) for x in str(num)]) for num in lst]\n\n\nprint(sum_of_digits([123, 456, 789]))",
      -0.86083984375
    ],
    [
      "from typing import List\n\n\n# O(n)\ndef sum_of_digits(numbers: List[int]) -> List[int]:\n    \"\"\"\n    >>> sum_of_digits([1, 12, 123])\n    [1, 3, 6]\n    \"\"\"\n    return [sum(int(digit) for digit in str(number)) for number in numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "def sum_of_digits(numbers):\n    \"\"\"\n    Return the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += sum(int(digit) for digit in str(number))\n    return total",
      -0.86083984375
    ],
    [
      "def sum_of_digits(lst):\n    return [sum(int(c) for c in str(num)) for num in lst]\n\nprint(sum_of_digits([123, 45]))\nprint(sum_of_digits([123456, 7890]))",
      -0.9091796875
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [sum(map(int, str(num))) for num in nums]\n\n\nif __name__ == \"__main__\":\n    assert sum_of_digits([12, 13]) == [3, 4]",
      -0.90966796875
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    \"\"\"Sums the sum of digits of each number of a given list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert sum_of_digits([123, 456, 789]) == 29\n    \"\"\"\n    return reduce(lambda x, y: x + y, map(lambda x: sum(int(i) for i in str(x)), numbers))\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([123, 456, 789]))",
      -0.99609375
    ],
    [
      "def sum_of_digits(lst):\n    total = 0\n    for i in lst:\n        while i > 0:\n            total += i % 10\n            i = i // 10\n    return total\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([2, 5, 11, 100]))",
      -1.0283203125
    ],
    [
      "def sum_of_digits(num):\n    \"\"\"Sums all digits in num.\"\"\"\n    return sum([int(i) for i in str(num)])\n\n\ndef sum_of_digits_in_list(num_list):\n    \"\"\"Sums all digits in each number of num_list.\"\"\"\n    return [sum_of_digits(num) for num in num_list]\n\n\ndef main():\n    \"\"\"Print sum_of_digits_in_list.\"\"\"\n    print(sum_of_digits_in_list([100, 200, 300]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.142578125
    ],
    [
      "def sum_of_digits(lst):\n    \"\"\"\n    >>> sum_of_digits([12, 23, 34])\n    6\n    \"\"\"\n    if lst == []:\n        return 0\n\n    return sum([int(i) for i in str(sum(lst))])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.3759765625
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def sum_digits(num: int) -> int:\n        return sum(int(x) for x in str(num))\n\n    return [sum_digits(num) for num in nums]\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([12, 23, 34, 45]))",
      -1.4306640625
    ],
    [
      "from typing import List\n\n\n# O(n) where n is number of elements in list\n# O(n) where n is number of digits in largest number\ndef sum_digits_in_list(lst: List[int]) -> int:\n    total = 0\n\n    for num in lst:\n        total += sum_digits(num)\n\n    return total\n\n\n# O(n) where n is number of digits in num\ndef sum_digits(num: int) -> int:\n    total = 0\n\n    while num != 0:\n        total += num % 10\n        num //= 10\n\n    return total\n\n\nprint(sum_digits_in_list([12, 15, 33, 44, 99]))\nprint(sum_digits_in_list([1, 2, 3, 4]))\nprint(sum_digits_in_list([123, 456, 789]))",
      -1.552734375
    ],
    [
      "def sum_of_digits(nums):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    if not nums:\n        return 0\n\n    total_sum = 0\n    for num in nums:\n        total_sum += sum([int(digit) for digit in str(num)])\n\n    return total_sum\n\n\nprint(sum_of_digits([1, 2, 3, 4, 5]))\nprint(sum_of_digits([100, 200, 300]))\nprint(sum_of_digits([100, 200, 300, 4000, 50000]))",
      -1.7001953125
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits(numbers: List[int]) -> int:\n    return reduce(lambda sum, num: sum + sum_of_digit(num), numbers, 0)\n\n\ndef sum_of_digit(number: int) -> int:\n    if number < 10:\n        return number\n    return number % 10 + sum_of_digit(number // 10)\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef sum_of_digits2(numbers: List[int]) -> int:\n    return reduce(lambda sum, num: sum + sum_of_digit(num), numbers, 0)\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef sum_of_digits3(numbers: List[int]) -> int:\n    return reduce(lambda sum, num: sum + sum_of_digit(num), numbers, 0)\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef sum_of_digits4(numbers: List[int]) -> int:\n    return reduce(lambda sum, num: sum + sum_of_digit(num), numbers, 0)\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef sum_of_digits5(numbers: List[int]) -> int:\n    return reduce(lambda sum, num: sum + sum_of_digit(num), numbers, 0)\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef sum_of_digits6(numbers: List[int]) -> int:\n    return reduce(lambda sum, num: sum + sum_of_digit(num), numbers, 0)\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef sum_of_digits7(numbers: List[int]) -> int:\n    return reduce(lambda sum, num: sum + sum_of_digit(num), numbers, 0)",
      -1.7880859375
    ],
    [
      "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return sum([sum(int(i) for i in str(num)) for num in nums])\n\n\nif __name__ == \"__main__\":\n    assert sum_of_digits([12, 15, 10]) == 37",
      -1.9638671875
    ],
    [
      "from typing import List\n\n\n# O(n)\ndef sum_of_digits(arr: List[int]) -> int:\n    \"\"\"Computes the sum of digits of each number of a given list.\"\"\"\n    return sum(map(lambda x: sum(map(int, str(x))), arr))\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([123, 456, 789]))",
      -1.98828125
    ],
    [
      "from functools import reduce\nfrom toolkit import sum_digits\n\n\ndef sum_of_digits(numbers):\n    \"\"\"Sums the digits of each number in a list.\"\"\"\n    return list(map(sum_digits, numbers))\n\n\ndef sum_of_digits_reduce(numbers):\n    \"\"\"Sums the digits of each number in a list using reduce.\"\"\"\n    return list(reduce(lambda x, y: x + y, map(sum_digits, numbers)))",
      -2.044921875
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\ndef sum_of_digits(lst: List[int]) -> int:\n    \"\"\"Sums up all the digits in a list.\n\n    Args:\n        lst (List[int]): a list of integers\n\n    Returns:\n        int: the sum of all the digits\n    \"\"\"\n    return reduce(lambda x, y: x + y, [sum_of_int(x) for x in lst])\n\n\ndef sum_of_int(integer: int) -> int:\n    \"\"\"Sums up all the digits of an integer.\n\n    Args:\n        integer (int): an integer\n\n    Returns:\n        int: the sum of all the digits\n    \"\"\"\n    return reduce(lambda x, y: x + y, [int(i) for i in str(integer)])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([1, 2, 3, 4, 5]))",
      -2.2109375
    ],
    [
      "from functools import reduce\n\n\n# Time complexity O(n)\n# Space complexity O(1)\ndef sum_of_digits(nums):\n    return reduce(lambda x, y: x + y, map(lambda x: sum(int(i) for i in str(x)), nums))\n\n\nprint(sum_of_digits([12, 23, 45]))",
      -2.3828125
    ],
    [
      "# O(nk) time | O(n) space\ndef sum_of_digits(numbers):\n    return [sum_of_digits_helper(n) for n in numbers]\n\n\ndef sum_of_digits_helper(number):\n    sum = 0\n    while number > 0:\n        sum += number % 10\n        number //= 10\n    return sum\n\n\n\"\"\"\nThe key here is to notice that the sum of digits of a number is the sum of the last digit and the sum of digits of the\nnumber without the last digit.\n\nThis is a classic recursive problem. We have a base case that when the number is 0, the sum of digits is 0. Otherwise,\nthe sum of digits is the last digit plus the sum of digits of the number without the last digit.\n\nThe time and space complexities of this solution are O(nk), where n is the number of numbers in the list and k is the\nlargest number in the list.\n\"\"\"",
      -2.41015625
    ],
    [
      "def sum_of_digits(num):\n    \"\"\"\n    Computes the sum of digits of each number of a given list.\n\n    Args:\n       num(list): List of integers whose sum of digits is to be computed\n    Returns:\n       (int): Sum of digits of each number in the list\n    \"\"\"\n    return sum(map(lambda x: sum(map(int, str(x))), num))\n\n\nprint(sum_of_digits([123, 456]))",
      -2.4296875
    ],
    [
      "from functools import reduce\nfrom tools.decorators import function_details_printer\n\n\ndef sum_of_digits(list_of_nums):\n    \"\"\"\n    Compute the sum of digits of each number of a given list.\n    >>> sum_of_digits([12, 13, 14, 15])\n    [3, 4, 5, 6]\n    >>> sum_of_digits([])\n    []\n    >>> sum_of_digits([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> sum_of_digits([1, 10, 100, 1000])\n    [1, 1, 1, 1]\n    \"\"\"\n    return [\n        reduce(lambda x, y: x + y, map(int, str(num))) if num else num\n        for num in list_of_nums\n    ]\n\n\nif __name__ == \"__main__\":\n    function_details_printer(sum_of_digits)",
      -2.55859375
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits(nums):\n    total = 0\n\n    for num in nums:\n        while num > 0:\n            total += num % 10\n            num //= 10\n\n    return total\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_using_reduce(nums):\n    return reduce(lambda total, num: total + sum(map(int, str(num))), nums, 0)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_using_reduce_2(nums):\n    return reduce(lambda total, num: total + sum(map(int, str(num))), nums)",
      -2.955078125
    ],
    [
      "# def sum_of_digits(arr):\n#     total = 0\n#     for i in arr:\n#         total += sum(int(d) for d in str(i))\n#     return total\n\n\ndef sum_of_digits(arr):\n    return sum(sum(int(d) for d in str(i)) for i in arr)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_digits([123, 456, 789]))",
      -3.125
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits(nums):\n    if not nums:\n        return 0\n\n    return reduce(lambda x, y: x + y, map(lambda x: sum(int(i) for i in str(x)), nums))\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_digits_2(nums):\n    if not nums:\n        return 0\n\n    return reduce(lambda x, y: x + y, map(lambda x: x % 10 + x // 10, nums))",
      -3.8984375
    ],
    [
      "from functools import reduce\n\n\n# Time complexity is O(n) where n is the number of elements in the list\n# Space complexity is O(1)\ndef sum_of_digits(list_of_numbers):\n    total = 0\n    for num in list_of_numbers:\n        total += sum(int(digit) for digit in str(num))\n    return total\n\n\n# Time complexity is O(n) where n is the number of elements in the list\n# Space complexity is O(1)\ndef sum_of_digits_reduce(list_of_numbers):\n    return reduce(lambda x, y: x + sum(int(digit) for digit in str(y)), list_of_numbers, 0)\n\n\n# Time complexity is O(n) where n is the number of elements in the list\n# Space complexity is O(n)\ndef sum_of_digits_loop(list_of_numbers):\n    total = 0\n    for num in list_of_numbers:\n        while num > 0:\n            total += num % 10\n            num //= 10\n    return total\n\n\n# Time complexity is O(n) where n is the number of elements in the list\n# Space complexity is O(n)\ndef sum_of_digits_list_comprehension(list_of_numbers):\n    return sum([sum(int(digit) for digit in str(num)) for num in list_of_numbers])\n\n\n# Time complexity is O(n) where n is the number of elements in the list\n# Space complexity is O(n)\ndef sum_of_digits_map_reduce(list_of_numbers):\n    return sum(map(lambda x: sum(int(digit) for digit in str(x)), list_of_numbers))\n\n\n# Time complexity is O(n) where n is the number of elements in the list\n# Space complexity is O(n)\ndef sum_of_digits_list_comprehension_map(list_of_numbers):\n    return sum([sum(int(digit) for digit in str(num)) for num in map(lambda x: sum(int(digit) for digit in str(x",
      -4.50390625
    ],
    [
      "\"\"\"Question:\nWrite a function to compute the sum of digits of each number of a given list.\nExample:\nInput: [12, 15, 18]\nOutput: [3, 6, 9]\nSolution:\n\"\"\"\n\n\n# def sum_of_digits(nums):\n#     res = []\n#     for num in nums:\n#         res.append(sum(int(i) for i in str(num)))\n#     return res\n\ndef sum_of_digits(nums):\n    res = []\n    for num in nums:\n        while num:\n            res.append(num % 10)\n            num //= 10\n    return res",
      -6.85546875
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n) where n is the length of the list\n# Space complexity: O(n)\ndef sum_of_digits(nums):\n    def sum_helper(total, num):\n        return total + sum(map(int, str(num)))\n    return list(map(lambda num: reduce(sum_helper, str(num), 0), nums))\n\n\nprint(sum_of_digits([123, 456, 789]))",
      -8.109375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}