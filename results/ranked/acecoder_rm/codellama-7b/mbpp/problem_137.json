{
  "problem": {
    "task_id": "MBPP/148",
    "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
    "test_list": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ],
    "challenge_test_list": [],
    "problem_id": 137
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from itertools import combinations\nfrom functools import reduce\n\n\ndef max_sum(n):\n    \"\"\"\n    The idea is to find all possible combinations of digits from 1 to n-1 and then for each\n    combination find the maximum sum by adding the combination to the last digit.\n\n    Time Complexity: O(n^2*2^n)\n    Space Complexity: O(n*2^n)\n\n    :param n: Number to split.\n    :return: Maximum sum of the digits.\n    :rtype: int\n    \"\"\"\n    all_digits = range(1, n)\n\n    def sum_digits(digits):\n        return reduce(lambda x, y: x + y, digits)\n\n    def max_digits(digits):\n        return max(map(sum_digits, combinations(digits, len(digits) // 2)))\n\n    return max(map(max_digits, combinations(all_digits, len(all_digits) - 1)))\n\n\nif __name__ == \"__main__\":\n    assert max_sum(136) == 36",
      1.4423828125
    ],
    [
      "def max_sum_divide(n):\n    # A: split number into digits\n    digits = [int(digit) for digit in str(n)]\n\n    # B: find the maximum sum of two digits\n    max_sum = 0\n    for i in range(len(digits)):\n        for j in range(i + 1, len(digits)):\n            if digits[i] + digits[j] > max_sum:\n                max_sum = digits[i] + digits[j]\n\n    # C: return max sum of two digits\n    return max_sum\n\n\"\"\"\nWrite a program to check if a number is a palindrome or not.\n\"\"\"\n\ndef is_palindrome(n):\n    # A: split number into digits\n    digits = [int(digit) for digit in str(n)]\n\n    # B: compare digits from beginning and end\n    for i in range(len(digits) // 2):\n        if digits[i] != digits[-1 - i]:\n            return False\n\n    # C: if all digits match, return True\n    return True\n\n\"\"\"\nWrite a program to find the number of trailing zeros in the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n    # A: check if n is a negative number\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # B: check if n is 0\n    if n == 0:\n        return 1\n\n    # C: return n!\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef trailing_zeros(n):\n    # A: check if n is a negative number\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # B: check if n is 0\n    if n == 0:\n        return 0\n\n    # C: return number of trailing zeros in n!\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count",
      0.75048828125
    ],
    [
      "def divide_number(n):\n    if n <= 0:\n        return 0, 0\n    max_sum = 0\n    max_left = 0\n    max_right = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            sum_left = sum_digits(i)\n            sum_right = sum_digits(n // i)\n            if sum_left + sum_right > max_sum:\n                max_sum = sum_left + sum_right\n                max_left = i\n                max_right = n // i\n    return max_left, max_right\n\n\ndef sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n\n\nif __name__ == \"__main__\":\n    assert divide_number(13) == (1, 3)\n    assert divide_number(25) == (5, 5)\n    assert divide_number(90) == (9, 0)\n    assert divide_number(195) == (95, 19)",
      0.58935546875
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef get_max_sum(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if num == 0:\n        return 0\n\n    max_sum = 0\n    max_sum += get_max_sum(num // 10)\n    max_sum += num % 10\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    num = 123456789\n    assert get_max_sum(num) == 45",
      0.2420654296875
    ],
    [
      "def solution(n):\n    \"\"\"\n    Divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n    if n <= 9:\n        return [n]\n\n    n = str(n)\n    n_len = len(n)\n\n    # iterate over the string\n    for i in range(n_len-1):\n        part_1 = n[:i+1]\n        part_2 = n[i+1:]\n\n        part_1_sum = sum([int(d) for d in part_1])\n        part_2_sum = sum([int(d) for d in part_2])\n\n        if part_1_sum > part_2_sum:\n            return [int(part_1), int(part_2)]\n        elif part_1_sum == part_2_sum:\n            return [int(part_1), int(part_2)]\n\n    return None",
      0.14794921875
    ],
    [
      "def max_sum_digits(n):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(log(n))\n    \"\"\"\n    if n == 0:\n        return 0, 0\n\n    max_sum = 0\n    max_num = 0\n\n    for i in range(1, n + 1):\n        curr_sum = sum_digits(i)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_num = i\n\n    return max_sum, max_num\n\n\ndef sum_digits(n):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    sum_ = 0\n\n    while n > 0:\n        sum_ += n % 10\n        n //= 10\n\n    return sum_\n\n\nif __name__ == \"__main__\":\n    assert max_sum_digits(1234) == (10, 72)\n    assert max_sum_digits(5512) == (12, 551)\n    assert max_sum_digits(123456789) == (10, 987654321)",
      -0.68603515625
    ],
    [
      "def find_max_sum(num):\n    n = str(num)\n    if len(n) == 1:\n        return num, 0\n    elif len(n) == 2:\n        return max(int(n[0]), int(n[1])), min(int(n[0]), int(n[1]))\n    else:\n        return max(int(n[0]), find_max_sum(int(n[1:]))[1]), min(int(n[0]), find_max_sum(int(n[1:]))[1])\n\n\nprint(find_max_sum(1234))",
      -0.85595703125
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_sum(n, k):\n    if n < k:\n        return n\n    if n < 10:\n        return n\n    if k == 1:\n        return n - 1\n    return max((n - 1) % 10 + 1, max_sum(n - 1, k - 1))\n\n\ndef max_digit_sum(n):\n    return max_sum(n, 2)\n\n\nif __name__ == \"__main__\":\n    print(max_digit_sum(199))",
      -0.85693359375
    ],
    [
      "def max_sum(n):\n    if n < 10:\n        return n\n    else:\n        return max(max_sum(n // 10), max_sum(n % 10)) + n % 10\n\n\ndef main():\n    print(max_sum(12345))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def max_sum_digits(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log10(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_sum = 0\n\n    while n:\n        max_sum = max_sum * 10 + n % 10\n        n //= 10\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_digits(102) == 102",
      -0.85693359375
    ],
    [
      "def max_digit_sum(n):\n    n_str = str(n)\n    l = len(n_str)\n    if l == 1:\n        return 0, n\n    left_sum = 0\n    for i in range(l // 2):\n        left_sum += int(n_str[i])\n    right_sum = 0\n    for j in range(l // 2, l):\n        right_sum += int(n_str[j])\n    if left_sum > right_sum:\n        return left_sum, int(n_str[l // 2:])\n    return right_sum, int(n_str[:l // 2])\n\n\nif __name__ == \"__main__\":\n    print(max_digit_sum(123456789))",
      -0.85693359375
    ],
    [
      "def max_digits(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(log(n))\n    \"\"\"\n    if number < 10:\n        return number\n\n    first_half = number // 10\n    second_half = number - first_half * 10\n\n    return max(first_half + second_half, max_digits(first_half), max_digits(second_half))\n\n\nif __name__ == \"__main__\":\n    assert max_digits(132) == 32",
      -0.85693359375
    ],
    [
      "def max_digit_sum(n):\n    digits = [int(x) for x in str(n)]\n    if len(digits) == 1:\n        return digits[0], 0\n    if len(digits) == 2:\n        return max(digits), min(digits)\n\n    max_sum = 0\n    max_d1, max_d2 = 0, 0\n\n    for i in range(len(digits) - 1):\n        for j in range(i + 1, len(digits)):\n            sum_ = digits[i] + digits[j]\n            if sum_ > max_sum:\n                max_sum = sum_\n                max_d1 = digits[i]\n                max_d2 = digits[j]\n\n    return max_d1, max_d2\n\n\nprint(max_digit_sum(12))\nprint(max_digit_sum(123))\nprint(max_digit_sum(1234))",
      -0.85693359375
    ],
    [
      "def get_max_digit_sum(number):\n    digits = [int(digit) for digit in str(number)]\n    max_digit_sum = sum(digits)\n    max_number = number\n    for i in range(1, len(digits)):\n        for j in range(len(digits)-i):\n            current_sum = sum(digits[j:j+i])\n            if current_sum > max_digit_sum:\n                max_digit_sum = current_sum\n                max_number = int(\"\".join(str(digit) for digit in digits[j:j+i]))\n    return max_number\n\n\nif __name__ == \"__main__\":\n    print(get_max_digit_sum(12345))",
      -0.85693359375
    ],
    [
      "def max_digits(num):\n    num_str = str(num)\n    if len(num_str) == 1:\n        return num, 0\n    else:\n        return max(\n            (\n                max_digits(int(num_str[:len(num_str) // 2])) +\n                max_digits(int(num_str[len(num_str) // 2:]))\n            ),\n            (\n                max_digits(int(num_str[:len(num_str) // 2 - 1])) +\n                max_digits(int(num_str[len(num_str) // 2:]))\n            )\n        )\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(max_digits(num))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def max_digits(num):\n\t\"\"\"\n\t:param num: int\n\t:return: int, int\n\t\"\"\"\n\tpass\n\n\ndef main():\n\tprint(max_digits(132))\n\nif __name__ == '__main__':\n\tmain()",
      -0.85693359375
    ],
    [
      "def max_sum_divide(n):\n    max_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            max_sum = max(max_sum, i + n // i)\n    return max_sum\n\n\nprint(max_sum_divide(22))\nprint(max_sum_divide(23))",
      -0.85693359375
    ],
    [
      "def max_digit_sum(n):\n    \"\"\"\n    n: int\n\n    return: int\n    \"\"\"\n    # Your code here\n    pass\n\nprint(max_digit_sum(1234))",
      -0.85693359375
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef maximum_sum(num):\n    if num <= 9:\n        return num\n\n    max_sum = 0\n\n    for i in range(len(str(num)) - 1):\n        max_sum = max(max_sum, maximum_sum(int(str(num)[0:i + 1])) + maximum_sum(int(str(num)[i + 1:])))\n\n    return max_sum\n\n\nprint(maximum_sum(123456789))",
      -0.85791015625
    ],
    [
      "from functools import reduce\n\n\ndef max_sum(n):\n    if n < 10:\n        return n, 0\n\n    n_str = str(n)\n    max_sum = 0\n    max_digit = 0\n    for i in range(len(n_str)):\n        for j in range(i+1, len(n_str)+1):\n            part_sum = reduce(lambda x, y: int(x) + int(y), n_str[i:j])\n            if part_sum > max_sum:\n                max_sum = part_sum\n                max_digit = int(n_str[i:j])\n    return max_digit, n - max_digit\n\n\nprint(max_sum(123456789))\nprint(max_sum(123456))\nprint(max_sum(1234))\nprint(max_sum(123))\nprint(max_sum(12))\nprint(max_sum(1))\nprint(max_sum(0))",
      -0.85791015625
    ],
    [
      "from functools import reduce\n\n\n# def max_digits(n):\n#     \"\"\"\n#     Time Complexity: O(n)\n#     Space Complexity: O(1)\n#     \"\"\"\n#     if n < 10:\n#         return n\n#\n#     digits = []\n#     while n > 0:\n#         digits.append(n % 10)\n#         n = n // 10\n#\n#     return max(digits) * 10 + reduce(lambda x, y: x + y, digits[1:])\n\n\ndef max_digits(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 10:\n        return n\n\n    max_digits = 0\n    while n > 0:\n        n, digit = divmod(n, 10)\n        max_digits = max(max_digits, digit)\n\n    return max_digits * 10 + n\n\n\nprint(max_digits(23))",
      -0.85791015625
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef get_maximum_sum_of_digits(n: int) -> int:\n    if n < 10:\n        return n\n\n    return max(n % 10 + get_maximum_sum_of_digits(n // 10), get_maximum_sum_of_digits(n // 10))\n\n\nif __name__ == \"__main__\":\n    assert get_maximum_sum_of_digits(123) == 4\n    assert get_maximum_sum_of_digits(12345) == 12",
      -0.85791015625
    ],
    [
      "def max_sum_divide(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if num < 10:\n        return num\n\n    max_sum, max_part = 0, 0\n\n    while num:\n        if num % 10 > max_sum:\n            max_sum = num % 10\n            max_part = num // 10\n\n        num //= 10\n\n    return max_part\n\n\nif __name__ == \"__main__\":\n    assert max_sum_divide(987654321) == 98765432",
      -0.85791015625
    ],
    [
      "def max_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param n: input number\n    :return: the maximum sum\n    \"\"\"\n\n    def _sum(n: int) -> int:\n        if n < 10:\n            return n\n        return n % 10 + _sum(n // 10)\n\n    if n < 10:\n        return n\n\n    n_sum = _sum(n)\n    if n_sum == n:\n        return n\n    else:\n        return max(n_sum, n - n_sum)\n\n\nif __name__ == \"__main__\":\n    assert max_sum(13251324) == 1324",
      -0.8583984375
    ],
    [
      "def max_sum_divided(num):\n    max_sum = 0\n    max_num = 0\n    for i in range(len(str(num))):\n        first_num = int(str(num)[:i+1])\n        second_num = int(str(num)[i+1:])\n        if first_num + second_num > max_sum:\n            max_sum = first_num + second_num\n            max_num = first_num * 10 + second_num\n    return max_num\n\n\nprint(max_sum_divided(12345))",
      -0.8583984375
    ],
    [
      "def max_sum_divide(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    def digits(number: int) -> int:\n        digits = 0\n        while number:\n            digits += 1\n            number //= 10\n        return digits\n\n    if number < 10:\n        return number\n\n    max_sum = 0\n    max_number = 0\n    for i in range(10, number + 1):\n        if max_sum < i + number // i:\n            max_sum = i + number // i\n            max_number = i\n\n    return max_number\n\n\nif __name__ == \"__main__\":\n    print(max_sum_divide(12345))",
      -0.8583984375
    ],
    [
      "def max_sum_divided(n):\n    \"\"\"\n    :param n: int - a number\n    :return: a tuple - max sum, and two numbers\n    \"\"\"\n    # Your code here\n    string = str(n)\n    sum = 0\n    for i in range(0, len(string)):\n        sum += int(string[i])\n    return sum, n, 0\n\nif __name__ == '__main__':\n    # Use the main function here to test your implementation\n    print(max_sum_divided(25))\n    print(max_sum_divided(36))\n    print(max_sum_divided(2345))\n    print(max_sum_divided(99999))",
      -0.8583984375
    ],
    [
      "def max_sum(n):\n    n_str = str(n)\n    max_sum = 0\n\n    for i in range(len(n_str)):\n        for j in range(i+1, len(n_str)+1):\n            left = n_str[:i]\n            right = n_str[i:j]\n            sum_left = sum([int(x) for x in left])\n            sum_right = sum([int(x) for x in right])\n\n            if sum_left + sum_right > max_sum:\n                max_sum = sum_left + sum_right\n\n    return max_sum\n\nprint(max_sum(123456789))",
      -0.8583984375
    ],
    [
      "def divide_max(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n    max_number = 0\n\n    while number > 0:\n        last_digit = number % 10\n        max_sum += last_digit\n        number = number // 10\n        if max_sum > max_number:\n            max_number = max_sum\n\n    return max_number\n\n\nif __name__ == \"__main__\":\n    assert divide_max(1325) == 5321",
      -0.8583984375
    ],
    [
      "def max_sum(n: int) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    return n % 10 * 10 + n // 10\n\n\nif __name__ == \"__main__\":\n    print(max_sum(19))",
      -0.86083984375
    ],
    [
      "def max_digit_sum(num):\n    str_num = str(num)\n    sum_1 = sum(int(d) for d in str_num[:len(str_num) // 2])\n    sum_2 = sum(int(d) for d in str_num[len(str_num) // 2:])\n\n    if sum_1 >= sum_2:\n        return sum_1\n    else:\n        return sum_2\n\n\nprint(max_digit_sum(123456))",
      -0.86083984375
    ],
    [
      "def max_sum(n):\n    digits = [int(x) for x in str(n)]\n    max_sum = 0\n\n    for i in range(len(digits)):\n        for j in range(i + 1, len(digits)):\n            max_sum = max(max_sum, sum(digits[i:j + 1]))\n\n    return max_sum\n\n\nprint(max_sum(123))\nprint(max_sum(99))\nprint(max_sum(999))\nprint(max_sum(1234))",
      -0.86083984375
    ],
    [
      "def max_digit_sum(number):\n    \"\"\"\n    >>> max_digit_sum(2342)\n    3242\n    >>> max_digit_sum(9999)\n    9999\n    >>> max_digit_sum(231111)\n    311112\n    \"\"\"\n    if number < 10:\n        return number\n    n1 = number // 10\n    n2 = number - n1 * 10\n    n1 = max_digit_sum(n1)\n    n2 = max_digit_sum(n2)\n    return n1 if n1 > n2 else n2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.99267578125
    ],
    [
      "def max_sum_of_digits(n: int) -> int:\n    \"\"\"\n    >>> max_sum_of_digits(1234)\n    12\n    >>> max_sum_of_digits(1000)\n    10\n    >>> max_sum_of_digits(1010)\n    10\n    \"\"\"\n    if n < 10:\n        return n\n\n    last_digit = n % 10\n    quotient = n // 10\n    max_sum = last_digit + max_sum_of_digits(quotient)\n    reversed_quotient = reversed(str(quotient))\n    reversed_quotient_string = \"\".join(reversed_quotient)\n    reversed_quotient_int = int(reversed_quotient_string)\n    min_sum = last_digit + max_sum_of_digits(reversed_quotient_int)\n\n    return max(max_sum, min_sum)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.0654296875
    ],
    [
      "from itertools import accumulate\nfrom functools import reduce\n\n\n# Time complexity: O(N)\n# Space complexity: O(1)\ndef max_digit_sum(n: int) -> int:\n    if n < 0:\n        n *= -1\n\n    digit_sum = 0\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n\n    return digit_sum\n\n\n# Time complexity: O(N)\n# Space complexity: O(N)\ndef max_digit_sum_2(n: int) -> int:\n    if n < 0:\n        n *= -1\n\n    digits = []\n    while n > 0:\n        digit = n % 10\n        n //= 10\n        digits.append(digit)\n\n    return reduce(lambda x, y: x + y, digits)\n\n\n# Time complexity: O(N)\n# Space complexity: O(N)\ndef max_digit_sum_3(n: int) -> int:\n    if n < 0:\n        n *= -1\n\n    digits = []\n    while n > 0:\n        digit = n % 10\n        n //= 10\n        digits.append(digit)\n\n    return reduce(lambda x, y: x + y, digits)\n\n\n# Time complexity: O(N)\n# Space complexity: O(1)\ndef max_digit_sum_4(n: int) -> int:\n    if n < 0:\n        n *= -1\n\n    return sum(accumulate(map(int, str(n))))\n\n\n# Time complexity: O(N)\n# Space complexity: O(1)\ndef max_digit_sum_5(n: int) -> int:\n    if n < 0:\n        n *= -1\n\n    return sum(map(int, str(n)))\n\n\n# Time complexity: O(N)\n# Space complexity: O(1)\ndef max_digit_sum_6(n: int) -> int:\n    if n < 0:\n        n *= -1",
      -1.271484375
    ],
    [
      "from itertools import permutations\n\n\ndef maximize_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    n: int - input number\n    return: int - maximum sum of digits\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    max_sum = -1\n\n    for perm in permutations(digits):\n        perm_sum = sum(perm)\n        if perm_sum > max_sum:\n            max_sum = perm_sum\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert maximize_sum(12345) == 12345\n    assert maximize_sum(123) == 321",
      -1.3505859375
    ],
    [
      "from itertools import permutations\n\n\ndef max_digit_sum(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(n!)\n    Space Complexity: O(n)\n    \"\"\"\n    if number == 0:\n        return 0\n\n    num_digits = len(str(number))\n    max_sum = 0\n\n    for permutation in permutations(str(number)):\n        permutation = int(\"\".join(permutation))\n        if permutation > max_sum:\n            max_sum = permutation\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_digit_sum(1234) == 12",
      -1.3642578125
    ],
    [
      "def max_sum_divide(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def sum_digits(num: int) -> int:\n        if num < 10:\n            return num\n        return num % 10 + sum_digits(num // 10)\n\n    return max(num % 10 + num // 10, sum_digits(num // 2))\n\n\nif __name__ == \"__main__\":\n    print(max_sum_divide(21))",
      -1.474609375
    ],
    [
      "def max_sum_divided(n):\n    digits = [int(x) for x in str(n)]\n    max_sum = 0\n    for i in range(1, len(digits)):\n        first = int(''.join(map(str, digits[:i])))\n        second = int(''.join(map(str, digits[i:])))\n        max_sum = max(max_sum, first + second)\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_divided(123456789))",
      -1.490234375
    ],
    [
      "def max_sum_divide(num):\n    \"\"\"\n    >>> max_sum_divide(12)\n    (1, 2)\n    >>> max_sum_divide(19)\n    (9, 1)\n    >>> max_sum_divide(100)\n    (1, 0)\n    \"\"\"\n    max_sum = 0\n    max_sum_num = 0\n    for i in range(1, num // 2 + 1):\n        sum_of_digits = sum(int(digit) for digit in str(i))\n        sum_of_digits_num = sum(int(digit) for digit in str(num - i))\n        if sum_of_digits + sum_of_digits_num > max_sum:\n            max_sum = sum_of_digits + sum_of_digits_num\n            max_sum_num = i\n    return max_sum_num, num - max_sum_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.603515625
    ],
    [
      "def find_max_sum(num):\n    \"\"\"\n    :param num: int - a number (greater than 0)\n    :return: a tuple - max digit sum, and the two parts of the number\n    \"\"\"\n    str_num = str(num)\n    if len(str_num) == 1:\n        return (int(str_num), int(str_num), num)\n    else:\n        max_digit_sum = 0\n        max_sum_parts = []\n        for i in range(len(str_num)):\n            for j in range(i + 1, len(str_num) + 1):\n                part_one = int(str_num[i:j])\n                part_two = num - part_one\n                digit_sum = sum(list(map(int, str(part_one)))) + sum(list(map(int, str(part_two))))\n                if digit_sum > max_digit_sum:\n                    max_digit_sum = digit_sum\n                    max_sum_parts = [part_one, part_two]\n        return (max_digit_sum, max_sum_parts[0], max_sum_parts[1])\n\nif __name__ == '__main__':\n    print(find_max_sum(10000000))\n    print(find_max_sum(1234))\n    print(find_max_sum(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
      -1.8173828125
    ],
    [
      "from functools import cache\n\n\n@cache\ndef sum_of_digits(number: int) -> int:\n    \"\"\"\n    >>> sum_of_digits(123)\n    6\n    >>> sum_of_digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      -1.908203125
    ],
    [
      "from functools import lru_cache\n\n\ndef max_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if n == 0:\n        return 0\n\n    @lru_cache(maxsize=None)\n    def helper(n: int) -> int:\n        if n < 10:\n            return n\n\n        max_sum = 0\n        for i in range(9, 0, -1):\n            if n // i < 10:\n                break\n            max_sum = max(max_sum, helper(n - i * (n // i)) + i * (n // i))\n\n        return max_sum\n\n    return helper(n)\n\n\nif __name__ == \"__main__\":\n    assert max_sum(10) == 18\n    assert max_sum(11) == 18\n    assert max_sum(12345) == 12348",
      -1.96875
    ],
    [
      "def max_digit_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    digits = []\n\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n\n    max_sum = 0\n\n    for i in range(len(digits) - 1):\n        for j in range(i + 1, len(digits)):\n            max_sum = max(max_sum, digits[i] + digits[j])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_digit_sum(12345) == 9\n    assert max_digit_sum(123456) == 12\n    assert max_digit_sum(123456789) == 27",
      -1.9951171875
    ],
    [
      "def maximum_sum_divisor(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_num = 0\n\n    while num > 0:\n        digit = num % 10\n        max_num = max_num * 10 + digit\n        num //= 10\n\n    return max_num\n\n\nif __name__ == \"__main__\":\n    assert maximum_sum_divisor(199) == 991",
      -2.09765625
    ],
    [
      "def max_sum_divide(num: int) -> int:\n    \"\"\"\n    The function takes a number as input and returns the maximum sum of digits.\n    >>> max_sum_divide(1234)\n    12\n    >>> max_sum_divide(123456)\n    56\n    >>> max_sum_divide(123456789)\n    98\n    >>> max_sum_divide(-123456789)\n    -98\n    >>> max_sum_divide(123)\n    12\n    >>> max_sum_divide(0)\n    0\n    >>> max_sum_divide(1230)\n    12\n    >>> max_sum_divide(12300)\n    12\n    >>> max_sum_divide(-12300)\n    -12\n    >>> max_sum_divide(-123000)\n    12\n    >>> max_sum_divide(123000)\n    12\n    >>> max_sum_divide(120000)\n    12\n    >>> max_sum_divide(-120000)\n    -12\n    >>> max_sum_divide(1)\n    1\n    \"\"\"\n    if num < 10:\n        return num\n\n    max_sum = 0\n    temp_num = abs(num)\n\n    while temp_num > 0:\n        max_sum = max_sum * 10 + temp_num % 10\n        temp_num //= 10\n\n    return max_sum if num >= 0 else -max_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.173828125
    ],
    [
      "def max_digits_sum(n):\n    \"\"\"\n    >>> max_digits_sum(12345)\n    2345\n    >>> max_digits_sum(123)\n    23\n    >>> max_digits_sum(1234)\n    234\n    >>> max_digits_sum(123456)\n    3456\n    \"\"\"\n    if n < 10:\n        return n\n    return max_digits_sum(n // 10) + n % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.173828125
    ],
    [
      "def max_sum(n):\n    n = str(n)\n    n_len = len(n)\n    max_sum = 0\n    for i in range(n_len):\n        for j in range(i+1, n_len):\n            if int(n[i:j]) + int(n[j:n_len]) > max_sum:\n                max_sum = int(n[i:j]) + int(n[j:n_len])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum(12345678))",
      -2.365234375
    ],
    [
      "from itertools import permutations\n\n\ndef find_max_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n!)\n    Space Complexity: O(n!)\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n\n    def find_sum(digits: list) -> int:\n        return sum(digits)\n\n    def find_all_sum(digits: list) -> list:\n        return [find_sum(perm) for perm in permutations(digits)]\n\n    all_sums = find_all_sum(digits)\n    return max(all_sums)\n\n\nif __name__ == \"__main__\":\n    assert find_max_sum(987) == 98\n    assert find_max_sum(999) == 99\n    assert find_max_sum(100) == 1\n    assert find_max_sum(1234) == 12\n    assert find_max_sum(12345) == 123\n    assert find_max_sum(123456) == 123\n    assert find_max_sum(1234567) == 123\n    assert find_max_sum(12345678) == 123\n    assert find_max_sum(123456789) == 123\n    assert find_max_sum(1234567890) == 123",
      -2.431640625
    ],
    [
      "def divide_number(num):\n    digits = list(map(int, str(num)))\n    max_sum = 0\n    for i in range(len(digits)):\n        for j in range(i + 1, len(digits) + 1):\n            if sum(digits[i:j]) > max_sum:\n                max_sum = sum(digits[i:j])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(divide_number(123))",
      -2.439453125
    ],
    [
      "def max_divide(num):\n    if num == 0:\n        return 0, 0\n    if num == 1:\n        return 1, 0\n    max_num = 0\n    max_sum = 0\n    for i in range(1, num):\n        if i == 1:\n            num1 = 1\n            num2 = 0\n            temp_sum = sum(map(int, str(num1)))\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_num = num1\n        else:\n            num1 = num - i\n            num2 = i\n            temp_sum = sum(map(int, str(num1))) + sum(map(int, str(num2)))\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_num = num1\n    return max_num, max_num\n\n\nnum = 14\nprint(max_divide(num))",
      -2.44140625
    ],
    [
      "def max_sum(number: int) -> int:\n    \"\"\"\n    >>> max_sum(1234)\n    3214\n    >>> max_sum(9999)\n    9999\n    >>> max_sum(1)\n    1\n    >>> max_sum(99)\n    99\n    \"\"\"\n    digits = [int(digit) for digit in str(number)]\n\n    if len(digits) == 1:\n        return number\n\n    def _max_sum(digits: list) -> int:\n        if len(digits) == 1:\n            return digits[0]\n\n        max_sum_so_far = -1\n\n        for i in range(len(digits)):\n            part_a = digits[:i]\n            part_b = digits[i:]\n\n            sum_a = _max_sum(part_a)\n            sum_b = _max_sum(part_b)\n\n            max_sum_so_far = max(\n                max_sum_so_far,\n                sum_a + sum_b,\n                sum_a,\n                sum_b\n            )\n\n        return max_sum_so_far\n\n    return _max_sum(digits)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.52734375
    ],
    [
      "def maximum_sum(n):\n    \"\"\"\n    :param n: input number\n    :return: maximum sum of digits\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return max(n % 10 + maximum_sum(n // 10), maximum_sum(n // 10))\n\n\nif __name__ == \"__main__\":\n    assert maximum_sum(12345) == 5342",
      -2.5546875
    ],
    [
      "def max_sum(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_sum = 0\n\n    num_str = str(num)\n    len_num = len(num_str)\n\n    for i in range(1, len_num):\n        sum_1 = sum(map(int, num_str[:i]))\n        sum_2 = sum(map(int, num_str[i:]))\n        max_sum = max(max_sum, sum_1 + sum_2)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum(102) == 21\n    assert max_sum(1020) == 102",
      -2.654296875
    ],
    [
      "def max_digit_sum(num):\n    \"\"\"\n    :param: num - number\n    return: number\n    \"\"\"\n    if num < 10:\n        return num\n\n    return max(max_digit_sum(num // 10), (num % 10) + max_digit_sum(num // 10))\n\n\ndef test_function(test_case):\n    num = test_case[0]\n    solution = test_case[1]\n    output = max_digit_sum(num)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nnum = 13251324\nsolution = 51324\ntest_case = [num, solution]\ntest_function(test_case)",
      -2.654296875
    ],
    [
      "def max_sum(num):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(log(n))\n    \"\"\"\n    if num < 10:\n        return num\n\n    mid = num // 2\n\n    left = max_sum(mid)\n    right = max_sum(num - mid)\n\n    return max(left, right) + mid if left + right == num else max(left, right)\n\n\nif __name__ == '__main__':\n    print(max_sum(222222222))",
      -2.693359375
    ],
    [
      "def max_sum(n):\n    # convert n to string\n    s = str(n)\n\n    # find the maximum sum of digits\n    max_sum = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            max_sum = max(max_sum, sum([int(x) for x in s[i:j]]))\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum(1001))",
      -2.76171875
    ],
    [
      "def maximum_digit_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n\n    while n:\n        n, digit = divmod(n, 10)\n        max_sum = max(max_sum, digit)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert maximum_digit_sum(199) == 9",
      -2.974609375
    ],
    [
      "def max_sum(number):\n    \"\"\"\n    This function returns the max sum of digits of a number\n    >>> max_sum(1024)\n    12\n    >>> max_sum(100)\n    1\n    >>> max_sum(1010)\n    11\n    >>> max_sum(1234)\n    12\n    >>> max_sum(123)\n    23\n    >>> max_sum(1230)\n    23\n    >>> max_sum(1000)\n    1\n    >>> max_sum(1001)\n    10\n    \"\"\"\n    number_list = [int(i) for i in str(number)]\n    number_list.sort(reverse=True)\n    return int(\"\".join(map(str, number_list)))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.068359375
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef digit_sum(n):\n    if n < 10:\n        return n\n    return n % 10 + digit_sum(n // 10)\n\n\ndef max_digit_sum(n):\n    if n < 10:\n        return n\n    max_val = 0\n    for i in range(1, len(str(n)) + 1):\n        max_val = max(max_val, digit_sum(n // (10 ** i) + n % (10 ** i)))\n    return max_val\n\n\nif __name__ == \"__main__\":\n    print(max_digit_sum(12345))",
      -3.091796875
    ],
    [
      "def maximum_sum_division(n):\n    def get_sum(n):\n        return sum(map(int, str(n)))\n\n    def get_max_sum(n):\n        if n < 10:\n            return n, 0\n        max_sum = 0\n        max_num = 0\n        max_digits = 0\n        for i in range(len(str(n))):\n            if max_sum >= n:\n                break\n            max_sum += n % 10\n            max_num += n % 10 * 10 ** i\n            max_digits += 1\n            n //= 10\n        return max_num, max_digits\n\n    max_num, max_digits = get_max_sum(n)\n    rest_digits = max_digits - 1\n    if rest_digits <= 0:\n        return max_num\n    rest_num = n // 10 ** rest_digits\n    max_sum = get_sum(max_num)\n    rest_sum = get_sum(rest_num)\n    if max_sum >= rest_sum:\n        return max_num\n    return rest_num\n\n\nif __name__ == '__main__':\n    assert maximum_sum_division(1325) == 135\n    assert maximum_sum_division(12345) == 345\n    assert maximum_sum_division(123456) == 3456\n    assert maximum_sum_division(1234567) == 3457\n    assert maximum_sum_division(12345678) == 3458\n    assert maximum_sum_division(123456789) == 3459\n    assert maximum_sum_division(1234567891) == 34591\n    assert maximum_sum_division(12345678912) == 345912",
      -3.224609375
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef divide_number(n: int) -> int:\n    \"\"\"\n    This function divides a number into two parts.\n    :param n: number to be divided.\n    :return: maximum sum of digits.\n    >>> divide_number(9)\n    6\n    >>> divide_number(199)\n    190\n    >>> divide_number(1234)\n    1324\n    >>> divide_number(12345)\n    12345\n    >>> divide_number(123456)\n    123456\n    >>> divide_number(1234567)\n    1234567\n    >>> divide_number(12345678)\n    12345678\n    \"\"\"\n    if n < 10:\n        return n\n    mid = n // 2\n    a = divide_number(n - mid)\n    b = divide_number(mid)\n    return max(a + b, n)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -3.40234375
    ],
    [
      "def maximum_sum_digits(n):\n    num_str = str(n)\n    max_sum = 0\n    for i in range(len(num_str)//2):\n        sum1 = sum(int(i) for i in num_str[:i+1])\n        sum2 = sum(int(i) for i in num_str[i+1:])\n        max_sum = max(max_sum, sum1, sum2)\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert maximum_sum_digits(9876) == 89",
      -3.560546875
    ],
    [
      "def max_sum(num: int) -> int:\n    \"\"\"\n    >>> max_sum(199)\n    991\n    >>> max_sum(99)\n    99\n    >>> max_sum(11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      -3.572265625
    ],
    [
      "def divide_number(number: int) -> int:\n    \"\"\"\n    >>> divide_number(1234)\n    12\n    >>> divide_number(12345)\n    123\n    >>> divide_number(123456)\n    1234\n    \"\"\"\n    string_number = str(number)\n    for i in range(len(string_number)):\n        result = int(string_number[:i + 1])\n        if sum(int(x) for x in str(result)) >= sum(int(x) for x in str(int(string_number) - result)):\n            return result\n    return int(string_number)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.15625
    ],
    [
      "from functools import lru_cache\n\n\ndef max_sum_divided_number(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if num < 10:\n        return num\n\n    @lru_cache(maxsize=None)\n    def _max_sum_divided_number(num: int) -> int:\n        if num < 10:\n            return num\n\n        max_sum = 0\n        for i in range(1, num // 2 + 1):\n            max_sum = max(max_sum, i + _max_sum_divided_number(num - i))\n\n        return max_sum\n\n    return _max_sum_divided_number(num)\n\n\nif __name__ == \"__main__\":\n    assert max_sum_divided_number(19) == 9\n    assert max_sum_divided_number(100) == 19\n    assert max_sum_divided_number(99) == 99\n    assert max_sum_divided_number(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
      -4.21875
    ],
    [
      "def max_sum_divide(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(log(n))\n    \"\"\"\n\n    def recursive_sum(number: int, digits: int) -> int:\n        if digits == 1:\n            return number\n\n        return recursive_sum(number % 10, digits - 1) + recursive_sum(number // 10, digits - 1)\n\n    return recursive_sum(number, len(str(number)))\n\n\nif __name__ == \"__main__\":\n    assert max_sum_divide(99) == 9\n    assert max_sum_divide(100) == 10\n    assert max_sum_divide(999) == 99\n    assert max_sum_divide(1000) == 100",
      -4.390625
    ],
    [
      "def maximum_sum(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def sum_of_digits(number: int) -> int:\n        result = 0\n        while number > 0:\n            result += number % 10\n            number //= 10\n        return result\n\n    maximum = 0\n    for i in range(1, number):\n        if sum_of_digits(number - i) > maximum:\n            maximum = sum_of_digits(number - i)\n    return maximum\n\n\nif __name__ == \"__main__\":\n    assert maximum_sum(1234) == 4\n    assert maximum_sum(1234567) == 12\n    assert maximum_sum(1000) == 1",
      -4.578125
    ],
    [
      "def max_sum_divided_num(num):\n    n = len(str(num))\n    for i in range(1, n):\n        # get the two parts\n        part1 = int(str(num)[:i])\n        part2 = int(str(num)[i:])\n        # get the sum of digits of each part\n        sum1 = sum_digits(part1)\n        sum2 = sum_digits(part2)\n        # return the bigger sum\n        if sum1 >= sum2:\n            return part1, part2\n        else:\n            return part2, part1\n\n\ndef sum_digits(num):\n    \"\"\"\n    Return the sum of the digits of a number.\n    \"\"\"\n    return sum([int(x) for x in str(num)])\n\n\ndef test_max_sum_divided_num():\n    assert max_sum_divided_num(132) == (13, 2)\n    assert max_sum_divided_num(1324) == (132, 4)\n    assert max_sum_divided_num(13245) == (132, 45)\n    assert max_sum_divided_num(132456) == (132, 456)\n    assert max_sum_divided_num(1324567) == (1324, 567)\n\n\nif __name__ == '__main__':\n    test_max_sum_divided_num()",
      -4.765625
    ],
    [
      "def maximum_digit_sum(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    string_num = str(number)\n    digits = [int(digit) for digit in string_num]\n    digits.reverse()\n\n    max_sum = 0\n    for i in range(1, len(digits)):\n        max_sum = max(max_sum, sum(digits[:i]))\n\n    return number - max_sum\n\n\nif __name__ == \"__main__\":\n    assert maximum_digit_sum(1234) == 234\n    assert maximum_digit_sum(12345) == 345\n    assert maximum_digit_sum(123456) == 3456\n    assert maximum_digit_sum(1234567) == 34567",
      -5.16796875
    ],
    [
      "from functools import reduce\n\n\n# O(n) time | O(1) space - where n is the number of digits of the number\ndef maximum_sum_divisible(number):\n    number_as_list = [int(x) for x in str(number)]\n    left_sum = reduce(lambda acc, num: acc + num, number_as_list[:len(number_as_list) // 2])\n    right_sum = reduce(lambda acc, num: acc + num, number_as_list[len(number_as_list) // 2:])\n    return max(number_as_list, key=lambda x: x * left_sum + right_sum)",
      -5.1875
    ],
    [
      "def max_sum_digit(number: int) -> int:\n    \"\"\"\n    Return the maximum sum of digits of the number.\n    >>> max_sum_digit(1325)\n    13\n    >>> max_sum_digit(321)\n    6\n    \"\"\"\n    number_str = str(number)\n    number_str_len = len(number_str)\n    if number_str_len == 1:\n        return number\n    else:\n        return max(max_sum_digit(int(number_str[: number_str_len // 2])), max_sum_digit(int(number_str[number_str_len // 2 :])))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.35546875
    ],
    [
      "def max_sum_of_digits(number):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n    while number > 0:\n        last_digit = number % 10\n        max_sum = max(max_sum, last_digit)\n        number = number // 10\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_of_digits(123) == 3\n    assert max_sum_of_digits(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
      -6.4453125
    ],
    [
      "def max_digit_sum(n):\n    \"\"\"\n    :param n: int - a number\n    :return: a tuple - max digits sum, the split point\n\n    >>> max_digit_sum(102)\n    (3, 2)\n    >>> max_digit_sum(123456)\n    (23, 345)\n    >>> max_digit_sum(10)\n    (1, 0)\n    >>> max_digit_sum(17546)\n    (23, 754)\n    \"\"\"\n    if n < 10:\n        return (n, 0)\n    else:\n        half = n // 2\n        left, right = max_digit_sum(half)\n        if left + right > half:\n            return (left + right, half)\n        else:\n            return max_digit_sum(half + 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.4765625
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache\ndef max_sum(n, l):\n    if l == 1:\n        return [n]\n    if n == 0:\n        return [0, 0]\n    result = []\n    for i in range(n, -1, -1):\n        if i > 0:\n            res = max_sum(n - i, l - 1)\n            res[0] += i\n            result.append(res)\n    return max(result, key=lambda x: sum(map(int, str(x))))\n\n\ndef max_digits(n):\n    return max_sum(n, 2)\n\n\nif __name__ == \"__main__\":\n    print(max_digits(24))",
      -6.4765625
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_digit_sum(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num % 10 == 0:\n        return num\n    else:\n        return max(num, num % 10 + max_digit_sum(num // 10))\n\n\nif __name__ == \"__main__\":\n    assert max_digit_sum(12345) == 54213\n    assert max_digit_sum(123456) == 642135\n    assert max_digit_sum(1234567) == 7642135\n    assert max_digit_sum(12345678) == 87642135\n    assert max_digit_sum(123456789) == 987642135\n    assert max_digit_sum(1234567891) == 1987642135",
      -6.61328125
    ],
    [
      "def max_sum_divide(num):\n    num_str = str(num)\n    n = len(num_str)\n    max_sum = 0\n    max_num = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum = sum_digits(int(num_str[i:j+1]))\n            if sum > max_sum:\n                max_sum = sum\n                max_num = int(num_str[i:j+1])\n    return max_num\n\ndef sum_digits(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num = num // 10\n    return sum\n\nprint(max_sum_divide(123))",
      -7.08203125
    ],
    [
      "def max_digit_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_sum = -1\n\n    for i in range(1, n + 1):\n        if i % 10 != 0:\n            max_sum = max(max_sum, i + int(str(n - i)[::-1]))\n        else:\n            max_sum = max(max_sum, i + int(str(n - i)[1:][::-1]))\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_digit_sum(102) == 12\n    assert max_digit_sum(19) == 19",
      -7.18359375
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_sum(n):\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    max_sum = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            max_sum = max(max_sum, max_sum_rec(n // i) + max_sum_rec(i))\n    return max_sum\n\n\n@lru_cache(maxsize=None)\ndef max_sum_rec(n):\n    if n < 10:\n        return n\n    max_sum = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            max_sum = max(max_sum, max_sum_rec(n // i) + max_sum_rec(i))\n    return max_sum\n\n\ndef main():\n    print(\"Maximum sum: \" + str(max_sum(1994)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -7.19140625
    ],
    [
      "def max_digit_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param n: The number to split.\n    :return: The maximum sum of digits.\n    \"\"\"\n\n    def max_digit_sum_helper(n: int) -> int:\n        if n <= 9:\n            return n\n\n        n_str = str(n)\n        n_len = len(n_str)\n\n        if n_len == 1:\n            return n\n\n        for i in range(n_len):\n            if int(n_str[i]) % 2 == 0:\n                n_str = n_str[:i] + n_str[i + 1:]\n                break\n\n        return max(n, int(n_str[:n_len // 2]) + int(n_str[n_len // 2:]))\n\n    if n <= 9:\n        return n\n\n    n_str = str(n)\n    n_len = len(n_str)\n\n    if n_len == 1:\n        return n\n\n    for i in range(n_len):\n        if int(n_str[i]) % 2 == 0:\n            n_str = n_str[:i] + n_str[i + 1:]\n            break\n\n    return max(n, int(n_str[:n_len // 2]) + int(n_str[n_len // 2:]))\n\n\nif __name__ == \"__main__\":\n    assert max_digit_sum(12345) == 12345\n    assert max_digit_sum(12355) == 12355\n    assert max_digit_sum(12556) == 12556\n    assert max_digit_sum(125564) == 12556\n    assert max_digit_sum(1255643) == 1255643",
      -7.52734375
    ],
    [
      "# 1. Brute Force:\ndef get_max_sum(num):\n    max_sum = 0\n    max_num = 0\n    for i in range(num):\n        for j in range(num):\n            if i + j == num and i < j:\n                if sum(int(i) for i in str(i)) + sum(int(j) for j in str(j)) > max_sum:\n                    max_sum = sum(int(i) for i in str(i)) + sum(int(j) for j in str(j))\n                    max_num = i * 10 + j\n    return max_num\n\n# 2. Maths:\ndef get_max_sum_math(num):\n    return (num // 2) * (num // 2 + 1) * (num + 1) // 2\n\n# 3. Backtracking:\ndef get_max_sum_backtrack(num):\n    max_sum = 0\n    max_num = 0\n    backtrack_helper(num, max_sum, max_num)\n    return max_num\n\ndef backtrack_helper(num, max_sum, max_num):\n    if num < 0:\n        return\n    if num == 0:\n        if max_sum == 0:\n            max_sum = sum(int(i) for i in str(max_num))\n        else:\n            if sum(int(i) for i in str(max_sum)) < sum(int(i) for i in str(max_num)):\n                max_sum = max_num\n        return\n    backtrack_helper(num - 1, max_sum, max_num)\n    max_num = max_num * 10 + num\n    max_sum = max_sum * 10 + num\n    backtrack_helper(num - 1, max_sum, max_num)\n\nprint(get_max_sum_backtrack(199))",
      -7.53125
    ],
    [
      "def max_sum(n):\n    if n < 10:\n        return n\n\n    max_so_far = -1\n    max_left = -1\n    max_right = -1\n\n    while n > 0:\n        last_digit = n % 10\n        n //= 10\n        max_so_far = max(max_so_far, last_digit)\n\n        if n == 0:\n            max_left = max(max_left, max_so_far)\n            max_right = max(max_right, max_so_far)\n        else:\n            max_left = max(max_left, max_so_far * 10 + n % 10)\n            n //= 10\n            max_right = max(max_right, max_so_far * 10 + n % 10)\n\n    return max(max_left, max_right)\n\n\nif __name__ == \"__main__\":\n    assert max_sum(9876) == 98\n    assert max_sum(987) == 98\n    assert max_sum(98) == 9\n    assert max_sum(11) == 1\n    assert max_sum(101) == 10\n    assert max_sum(199) == 99",
      -7.90625
    ],
    [
      "def max_digits(n):\n    if n == 0:\n        return 0, 0\n    if n < 10:\n        return n, 0\n    max_num = 0\n    max_res = 0\n    max_l = 0\n    max_r = 0\n    for i in range(n//2, -1, -1):\n        if i == 0:\n            l = 0\n        else:\n            l = i\n        r = n - i\n        if l + r > max_num:\n            max_num = l + r\n            max_res = l * 10 + r\n            max_l = l\n            max_r = r\n    return max_l, max_r\n\n\nprint(max_digits(10))\nprint(max_digits(11))\nprint(max_digits(20))\nprint(max_digits(21))\nprint(max_digits(30))\nprint(max_digits(31))\nprint(max_digits(32))\nprint(max_digits(33))\nprint(max_digits(34))\nprint(max_digits(35))\nprint(max_digits(36))\nprint(max_digits(37))\nprint(max_digits(38))\nprint(max_digits(39))\nprint(max_digits(40))\nprint(max_digits(41))\nprint(max_digits(42))\nprint(max_digits(43))\nprint(max_digits(44))\nprint(max_digits(45))\nprint(max_digits(46))\nprint(max_digits(47))\nprint(max_digits(48))\nprint(max_digits(49))\nprint(max_digits(50))\nprint(max_digits(51))\nprint(max_digits(52))\nprint(max_digits(53))\nprint(max_digits(54))\nprint(max_digits(55))\nprint(",
      -8.3515625
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_sum_digits(n: int) -> int:\n    \"\"\"\n    n: int - number to divide\n    return: int - maximum sum of digits of number divided into two parts\n\n    >>> max_sum_digits(1234)\n    1234\n    >>> max_sum_digits(123456789)\n    123456789\n    >>> max_sum_digits(1234567890)\n    1234567890\n    >>> max_sum_digits(12345678901)\n    1234567890\n    >>> max_sum_digits(123456789012)\n    1234567890\n    >>> max_sum_digits(1234567890123)\n    1234567890\n    >>> max_sum_digits(12345678901234)\n    1234567890\n    >>> max_sum_digits(123456789012345)\n    1234567890\n    >>> max_sum_digits(1234567890123456)\n    1234567890\n    >>> max_sum_digits(12345678901234567)\n    1234567890\n    \"\"\"\n    if n < 10:\n        return n\n\n    # first digit is the maximum sum of digits\n    max_sum = int(str(n)[0])\n    # check for the rest of the digits\n    for i in range(1, len(str(n))):\n        max_sum = max(max_sum, int(str(n)[i]) + max_sum_digits(int(str",
      -8.5859375
    ],
    [
      "def max_digits(number):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if number < 10:\n        return [number]\n\n    half = number // 2\n    right_part = max_digits(half)\n    left_part = max_digits(number - half)\n    right_sum = sum(right_part)\n    left_sum = sum(left_part)\n\n    if right_sum + left_sum > number:\n        return right_part + left_part\n    elif right_sum + left_sum == number:\n        return [half] + left_part if half > max(left_part) else left_part + [half]\n    else:\n        return [number]\n\n\nif __name__ == \"__main__\":\n    print(max_digits(12345))",
      -8.6328125
    ],
    [
      "def find_max_sum_divide(n):\n    \"\"\"\n    Divide the number into two parts.\n    Find the sum of digits of each part.\n    Return the maximum sum.\n    \"\"\"\n    # Find the sum of digits of a number\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Find the max sum\n    def find_max_sum(num):\n        if num < 10:\n            return num\n        else:\n            return max(find_max_sum(num // 10), num % 10) + find_max_sum(num // 100)\n\n    # Divide the number into two parts\n    def divide_number(num):\n        # Find the maximum sum\n        max_sum = find_max_sum(num)\n        # Find the sum of digits of the maximum sum\n        max_sum_digits = sum_digits(max_sum)\n        # Find the sum of digits of the rest\n        rest_digits = sum_digits(num - max_sum)\n        # Find the maximum sum of digits of the parts\n        max_sum_of_parts = max(max_sum_digits, rest_digits)\n        # Divide the number into two parts\n        if max_sum_of_parts == max_sum_digits:\n            return max_sum, num - max_sum\n        else:\n            return num - max_sum, max_sum\n\n    return divide_number(n)\n\nif __name__ == \"__main__\":\n    print(find_max_sum_divide(10000))\n    print(find_max_sum_divide(12345))",
      -8.75
    ],
    [
      "def divide_into_two_parts_max_sum(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    total = 0\n    for digit in str(number):\n        total += int(digit)\n\n    if total % 2 == 0:\n        return number // 2\n\n    return (number // 2) + 1\n\n\nif __name__ == \"__main__\":\n    assert divide_into_two_parts_max_sum(45) == 14\n    assert divide_into_two_parts_max_sum(99) == 91",
      -8.953125
    ],
    [
      "def divide_number(number):\n    if number < 10:\n        return number, 0\n    else:\n        first_part, second_part = divide_number(number // 10)\n        remainder = number % 10\n        return max((first_part + remainder), (second_part + remainder)), min((first_part + remainder), (second_part + remainder))\n\n\ndef test_divide_number():\n    assert divide_number(13) == (1, 3)\n    assert divide_number(19) == (1, 9)\n    assert divide_number(100) == (1, 0)\n    assert divide_number(101) == (1, 1)\n    assert divide_number(199) == (1, 99)\n    assert divide_number(1000) == (1, 0)\n    assert divide_number(1001) == (1, 1)\n    assert divide_number(1009) == (1, 9)\n    assert divide_number(1010) == (1, 10)\n    assert divide_number(1019) == (1, 19)\n    assert divide_number(1090) == (1, 90)\n    assert divide_number(1099) == (1, 99)\n    assert divide_number(1900) == (1, 0)\n    assert divide_number(1901) == (1, 1)\n    assert divide_number(1990) == (1, 99)\n    assert divide_number(1999) == (1, 99)\n    assert divide_number(9999) == (1, 999)\n\n\nif __name__ == '__main__':\n    test_divide_number()",
      -9.078125
    ],
    [
      "def solution(num):\n    \"\"\"Returns the maximum sum of digits of a number.\n\n    >>> solution(136)\n    13\n    >>> solution(151)\n    51\n    >>> solution(251)\n    25\n    >>> solution(236)\n    23\n    \"\"\"\n\n    if num < 10:\n        return num\n\n    max_sum, max_left, max_right = 0, 0, 0\n\n    for left in range(1, len(str(num)) // 2 + 1):\n        right = len(str(num)) - left\n        if num // (10 ** left) > max_right:\n            max_sum = max(num % (10 ** left), num // (10 ** left))\n            max_left = left\n            max_right = num // (10 ** left)\n        else:\n            break\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -9.1171875
    ],
    [
      "def max_digits(n: int) -> int:\n    \"\"\"\n    Divide a number into two parts such that the sum of digits is maximum.\n    @param n: number to divide\n    @return: maximum sum of digits\n    >>> max_digits(9876)\n    9876\n    >>> max_digits(1234)\n    7842\n    >>> max_digits(12345)\n    65432\n    >>> max_digits(100000)\n    99990\n    >>> max_digits(1000000)\n    999999\n    \"\"\"\n    return int(str(n)[: len(str(n)) // 2] + str(n)[len(str(n)) // 2 :])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -9.796875
    ],
    [
      "def max_sum_digit(n):\n    \"\"\"\n    :param n: int - a number\n    :return: a tuple - max sum of two numbers and the numbers themselves (max_sum, left_num, right_num)\n    \"\"\"\n    left_num = 0\n    right_num = 0\n    max_sum = 0\n    left_str = str(n)\n    for i in left_str:\n        left_num += int(i)\n    while n > 0:\n        right_num += n % 10\n        n //= 10\n    if left_num + right_num > max_sum:\n        max_sum = left_num + right_num\n    return max_sum, left_num, right_num\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = max_sum_digit(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((132513243213242343, (96, 32513243, 213242343)))\ntest_function((99, (18, 9, 9)))\ntest_function((12345, (15, 1234, 0)))\ntest_function((1024, (22, 10, 4)))",
      -9.84375
    ],
    [
      "from functools import partial\nfrom itertools import permutations\n\n\ndef max_sum(num):\n    if num <= 9:\n        return num\n\n    digits = [int(d) for d in str(num)]\n    max_digit = max(digits)\n    if max_digit == num:\n        return digits\n\n    max_sum = 0\n    for i in range(len(digits)):\n        if digits[i] == max_digit:\n            continue\n\n        for comb in permutations(digits[:i]):\n            if sum(comb) + max_digit <= num:\n                continue\n\n            if sum(comb) + max_digit == num:\n                max_sum = num\n                break\n\n            if sum(comb) + max_digit > max_sum:\n                max_sum = sum(comb) + max_digit\n\n    return max_sum\n\n\ndef main():\n    print(max_sum(129))\n    print(max_sum(9))\n    print(max_sum(109))\n\n\nif __name__ == '__main__':\n    main()",
      -10.09375
    ],
    [
      "def max_digits(num):\n    if num == 0:\n        return 0, 0\n    if num == 1:\n        return 1, 0\n    if num == 2:\n        return 2, 0\n\n    max_sum = num\n    max_left = 0\n    max_right = 0\n\n    for i in range(9, 0, -1):\n        for j in range(9, 0, -1):\n            if i * j < num:\n                continue\n            if i + j > max_sum:\n                continue\n            if i + j == num:\n                max_left = i\n                max_right = j\n                return max_left, max_right\n\n    return max_left, max_right\n\n\nprint(max_digits(123))\nprint(max_digits(12345))\nprint(max_digits(1234567))\nprint(max_digits(123456789))",
      -10.8671875
    ],
    [
      "from functools import lru_cache\n\n\ndef max_sum(n):\n    if n == 0:\n        return 0, 0\n\n    max_sum = 0\n    max_num = 0\n\n    for i in range(1, n + 1):\n        if max_sum >= i:\n            break\n\n        if n - i < i:\n            num = n - i\n            sum_ = i + num\n        else:\n            num = i\n            sum_ = n - i\n\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_num = num\n\n    return max_num, max_sum\n\n\n@lru_cache(maxsize=None)\ndef max_sum_dp(n):\n    if n == 0:\n        return 0, 0\n\n    max_sum = 0\n    max_num = 0\n\n    for i in range(1, n + 1):\n        if max_sum >= i:\n            break\n\n        if n - i < i:\n            num = n - i\n            sum_ = i + num\n        else:\n            num = i\n            sum_ = n - i\n\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_num = num\n\n    return max_num, max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum(10))\n    print(max_sum_dp(10))",
      -11.109375
    ],
    [
      "def max_digit(n):\n    return int(max(str(n)))\n\n\ndef max_digit_divider(n):\n    max_d = max_digit(n)\n    while n > 0:\n        if n % 10 == max_d:\n            return n, n // 10\n        n = n // 10\n    return n, 0\n\n\ndef max_digit_divider_rec(n):\n    if n < 10:\n        return n, 0\n    else:\n        m, k = max_digit_divider(n // 10)\n        m = max(m, max_digit(n))\n        return m, n // 10\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    m, k = max_digit_divider_rec(n)\n    print(f\"{n} = {k} + {m}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -11.6484375
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_digit_sum(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if number == 0:\n        return 0\n\n    if number < 10:\n        return number\n\n    return max(\n        (number % 10),\n        (number - (number % 10)) / 10 + max_digit_sum(number - (number % 10))\n    )\n\n\nif __name__ == \"__main__\":\n    assert max_digit_sum(123) == 3\n    assert max_digit_sum(12345) == 5 + max_digit_sum(45)",
      -11.7734375
    ],
    [
      "def max_digit_sum(n):\n    \"\"\"\n    :param n: int - a number\n    :returns: a tuple - max digit sum, and the two parts of number\n    \"\"\"\n    if n <= 0:\n        return 0, 0, 0\n    a = n // 10\n    b = n - a * 10\n    if n < 10:\n        return n, 0, 0\n    if a + b > n:\n        return a + b, a, b\n    else:\n        a, b, c = max_digit_sum(a)\n        b += a\n        c, d, e = max_digit_sum(b)\n        e += c\n        if e > c:\n            return e, d, e\n        else:\n            return c, d, e\n\nif __name__ == '__main__':\n    print(max_digit_sum(12345))",
      -12.1015625
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef sum_digits(num):\n    if num < 10:\n        return num\n    return sum_digits(num // 10) + num % 10\n\n\ndef max_sum_divide(num):\n    if num < 10:\n        return num, 0\n    max_sum = 0\n    ans = 0\n    for i in range(9, 0, -1):\n        if num % i == 0:\n            a = i\n            b = num // i\n            if a + b > max_sum:\n                ans = a\n                max_sum = a + b\n    return ans, max_sum\n\n\ndef max_sum_divide_2(num):\n    if num < 10:\n        return num, 0\n    max_sum = 0\n    ans = 0\n    for i in range(9, 0, -1):\n        a = i\n        b = num // i\n        if a + b > max_sum:\n            ans = a\n            max_sum = a + b\n    return ans, max_sum\n\n\ndef main():\n    print(max_sum_divide(235))\n    print(max_sum_divide(123))\n    print(max_sum_divide(1234))\n    print(max_sum_divide(12345))\n    print(max_sum_divide(123456))\n    print(max_sum_divide(1234567))\n\n\nif __name__ == '__main__':\n    main()",
      -12.9140625
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache\ndef max_sum(n):\n    if n < 10:\n        return n\n    max_sum = 0\n    for i in range(1, len(str(n))):\n        a = int(str(n)[:i])\n        b = int(str(n)[i:])\n        max_sum = max(max_sum, max_sum(a) + max_sum(b))\n    return max_sum\n\n\ndef max_divide(n):\n    a = 0\n    b = n\n    max_sum = 0\n    while a < b:\n        if max_sum < max_sum(a) + max_sum(b):\n            max_sum = max_sum(a) + max_sum(b)\n            a, b = a + 10, b - 10\n        else:\n            a += 1\n    return a\n\n\nif __name__ == \"__main__\":\n    num = int(input().strip())\n    print(max_divide(num))",
      -16.640625
    ],
    [
      "def max_sum_divided_number(num: int) -> int:\n    \"\"\"\n    >>> max_sum_divided_number(12)\n    7\n    >>> max_sum_divided_number(13)\n    8\n    >>> max_sum_divided_number(100)\n    9\n    >>> max_sum_divided_number(101)\n    9\n    \"\"\"\n    num_str = str(num)\n    length = len(num_str)\n\n    if length == 1:\n        return num\n\n    max_sum = 0\n\n    for i in range(length):\n        part_1 = int(num_str[:i + 1])\n        part_2 = int(num_str[i + 1 :])\n        sum_of_parts = part_1 + part_2\n\n        if sum_of_parts > max_sum:\n            max_sum = sum_of_parts\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -18.1875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}