{
  "problem": {
    "task_id": "MBPP/35",
    "prompt": "Write a function to find the n-th rectangular number.",
    "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) ",
    "test_list": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ],
    "challenge_test_list": [],
    "problem_id": 24
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def nth_rectangular_number(n):\n    return n * (n + 1) // 2\n\ndef test_cases():\n    assert nth_rectangular_number(1) == 1\n    assert nth_rectangular_number(2) == 3\n    assert nth_rectangular_number(3) == 6\n    assert nth_rectangular_number(4) == 10\n    assert nth_rectangular_number(5) == 15\n    assert nth_rectangular_number(6) == 21\n    assert nth_rectangular_number(7) == 28\n    assert nth_rectangular_number(8) == 36\n    assert nth_rectangular_number(9) == 45\n    assert nth_rectangular_number(10) == 55\n    assert nth_rectangular_number(11) == 66\n    assert nth_rectangular_number(12) == 78\n    assert nth_rectangular_number(13) == 91\n    assert nth_rectangular_number(14) == 105\n    assert nth_rectangular_number(15) == 120\n    assert nth_rectangular_number(16) == 136\n    assert nth_rectangular_number(17) == 153\n    assert nth_rectangular_number(18) == 171\n    assert nth_rectangular_number(19) == 190\n    assert nth_rectangular_number(20) == 210\n\nif __name__ == \"__main__\":\n    test_cases()",
      10.328125
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    The nth rectangular number is the product of the first n natural numbers.\n\n    >>> nth_rectangular_number(1)\n    1\n    >>> nth_rectangular_number(4)\n    6\n    >>> nth_rectangular_number(10)\n    3628800\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.9296875
    ],
    [
      "def rectangular_number(n):\n    index = 0\n    value = 0\n    while index < n:\n        index += 1\n        value += (index*index)\n    return value",
      3.927734375
    ],
    [
      "def find_n_th_rectangular_number(n: int) -> int:\n    \"\"\"\n    Returns the n-th rectangular number\n    >>> find_n_th_rectangular_number(1)\n    1\n    >>> find_n_th_rectangular_number(3)\n    3\n    >>> find_n_th_rectangular_number(6)\n    10\n    >>> find_n_th_rectangular_number(10)\n    36\n    \"\"\"\n    return (n * (n + 1) // 2) ** 2\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      2.869140625
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    >>> nth_rectangular_number(1)\n    1\n    >>> nth_rectangular_number(2)\n    2\n    >>> nth_rectangular_number(3)\n    3\n    >>> nth_rectangular_number(4)\n    5\n    >>> nth_rectangular_number(5)\n    7\n    >>> nth_rectangular_number(6)\n    9\n    >>> nth_rectangular_number(7)\n    11\n    >>> nth_rectangular_number(8)\n    13\n    >>> nth_rectangular_number(9)\n    15\n    >>> nth_rectangular_number(10)\n    17\n    >>> nth_rectangular_number(11)\n    19\n    >>> nth_rectangular_number(12)\n    21\n    >>> nth_rectangular_number(13)\n    23\n    >>> nth_rectangular_number(14)\n    25\n    >>> nth_rectangular_number(15)\n    27\n    >>> nth_rectangular_number(16)\n    29\n    >>> nth_rectangular_number(17)\n    31\n    >>> nth_rectangular_number(18)\n    33\n    >>> nth_rectangular_number(19)\n    35\n    >>> nth_rectangular_number(20)\n    37\n    >>> nth_rectangular_number(21)\n    39\n    >>> nth_rectangular_number(22)\n    41\n    >>> nth_rectangular_number(23)\n    43\n    >>> nth_rectangular_number(24)\n    45\n    >>> nth_rectangular_number(25)\n    47\n    >>> nth_rectangular_number(26)\n    49\n    >>> nth_rectangular_number(27)\n    51\n    >>> nth_rectangular_number(28)\n    53\n    >>> nth_rect",
      1.654296875
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n\n    :param n:\n    :return:\n    \"\"\"\n    return n * (n + 1) / 2",
      1.3740234375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: int - the n-th rectangular number\n    \"\"\"\n    if n < 1:\n        return 0\n    return n * (n + 1) // 2\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = nth_rectangular_number(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((1, 1))\ntest_function((2, 2))\ntest_function((3, 3))\ntest_function((4, 5))\ntest_function((5, 9))\ntest_function((6, 12))\ntest_function((7, 15))\ntest_function((8, 20))\ntest_function((9, 25))\ntest_function((10, 30))",
      1.021484375
    ],
    [
      "def rectangular_number(n):\n    \"\"\"\n    Calculates the nth rectangular number\n\n    Args:\n        n: An int representing the nth rectangular number to find\n\n    Returns:\n        The nth rectangular number\n    \"\"\"\n\n    return n * (n + 1) / 2\n\n\nif __name__ == '__main__':\n    n = int(input('Enter the nth number: '))\n    print(f'The {n}th rectangular number is {rectangular_number(n)}')",
      0.283447265625
    ],
    [
      "def nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(1))\n    print(nth_rectangular_number(2))\n    print(nth_rectangular_number(3))\n    print(nth_rectangular_number(4))\n    print(nth_rectangular_number(5))\n    print(nth_rectangular_number(6))\n    print(nth_rectangular_number(7))\n    print(nth_rectangular_number(8))\n    print(nth_rectangular_number(9))",
      0.189697265625
    ],
    [
      "def find_nth_rectangular(n):\n    \"\"\"\n    This function finds the n-th rectangular number.\n    It does so by iterating over possible values for a and b and checking if the result is equal to n.\n    \"\"\"\n    a = 1\n    while True:\n        b = n - a\n        if b < 0:\n            break\n        if a * a + b * b == n * n:\n            return a * b\n        a += 1\n\n    return -1\n\nif __name__ == '__main__':\n    print(find_nth_rectangular(2))\n    print(find_nth_rectangular(3))\n    print(find_nth_rectangular(5))\n    print(find_nth_rectangular(12))\n    print(find_nth_rectangular(13))",
      0.18798828125
    ],
    [
      "def rectangular_number(n):\n    \"\"\"\n    >>> rectangular_number(2)\n    2\n    >>> rectangular_number(3)\n    3\n    >>> rectangular_number(5)\n    6\n    >>> rectangular_number(9)\n    15\n    >>> rectangular_number(10)\n    16\n    \"\"\"\n    if n <= 0:\n        return 0\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.1724853515625
    ],
    [
      "def find_nth_rectangular_number(n):\n    \"\"\"\n    Take in a number and return the n-th rectangular number.\n    A rectangular number is the product of its width and height.\n    So, for example, the 5th rectangular number is 225.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n\n    for i in range(1, n):\n        n = i * (i + 1) / 2\n\n    return n",
      0.1380615234375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 1:\n        return 0\n\n    i = 1\n    while True:\n        rect = i * (i + 1) / 2\n        if rect > n:\n            return rect - n\n\n        i += 1\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \").strip())\n    print(f\"{n}-th rectangular number is {nth_rectangular_number(n)}\")",
      0.12939453125
    ],
    [
      "def rectangular_number(n: int) -> int:\n    \"\"\"\n    O(n) time and space\n    \"\"\"\n    if n == 1:\n        return 1\n\n    index = 2\n    result = 1\n\n    while index < n:\n        result += index\n        index += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert rectangular_number(1) == 1\n    assert rectangular_number(2) == 2\n    assert rectangular_number(3) == 3\n    assert rectangular_number(4) == 4\n    assert rectangular_number(5) == 5\n    assert rectangular_number(6) == 6\n    assert rectangular_number(7) == 8\n    assert rectangular_number(8) == 10\n    assert rectangular_number(9) == 12\n    assert rectangular_number(10) == 15\n    assert rectangular_number(11) == 16\n    assert rectangular_number(12) == 18\n    assert rectangular_number(13) == 20",
      0.11700439453125
    ],
    [
      "def nth_rectangular_number(n):\n    return n * (n + 1) / 2\n\n\nif __name__ == '__main__':\n    for i in range(1, 100):\n        print nth_rectangular_number(i)",
      0.09906005859375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    :param n: integer\n    :return: integer\n    \"\"\"\n    return n * (n + 1) * (2 * n - 1) / 6\n\n\ndef test_nth_rectangular_number():\n    assert nth_rectangular_number(1) == 1\n    assert nth_rectangular_number(2) == 5\n    assert nth_rectangular_number(3) == 10\n    assert nth_rectangular_number(4) == 15\n    assert nth_rectangular_number(5) == 20\n    assert nth_rectangular_number(6) == 25\n    assert nth_rectangular_number(7) == 30\n    assert nth_rectangular_number(8) == 35\n    assert nth_rectangular_number(9) == 40\n    assert nth_rectangular_number(10) == 45\n\n\nif __name__ == '__main__':\n    test_nth_rectangular_number()",
      0.006137847900390625
    ],
    [
      "class Solution(object):\n    def nthUglyNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        ugly_numbers = [1]\n        index2, index3, index5 = 0, 0, 0\n        for i in range(1, n):\n            ugly_num = min(ugly_numbers[index2] * 2,\n                           ugly_numbers[index3] * 3,\n                           ugly_numbers[index5] * 5)\n            ugly_numbers.append(ugly_num)\n            if ugly_num == ugly_numbers[index2] * 2:\n                index2 += 1\n            if ugly_num == ugly_numbers[index3] * 3:\n                index3 += 1\n            if ugly_num == ugly_numbers[index5] * 5:\n                index5 += 1\n        return ugly_numbers[-1]\n\n\nsolution = Solution()\nprint solution.nthUglyNumber(10)",
      -0.1895751953125
    ],
    [
      "def rectangular_number(n):\n    \"\"\"\n    Finds the nth rectangular number\n    :param n: Number of rectangular number to find\n    :return: nth rectangular number\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    i = 1\n    while n > i * (i + 1) / 2:\n        i += 1\n    return i * (i + 1) / 2 + n - i * i / 2 - 1\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(rectangular_number(i))",
      -0.328369140625
    ],
    [
      "import math\n\ndef rectangular_number(n):\n    return n * (n + 1) * (2 * n - 1) / 6\n\ndef test(n, expected_answer):\n    answer = rectangular_number(n)\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\nif __name__ == '__main__':\n    test(1, 1)\n    test(2, 5)\n    test(3, 10)\n    test(4, 15)\n    test(5, 20)\n    print(\"All tests passed!\")",
      -0.501953125
    ],
    [
      "def get_rectangular_number(n):\n    \"\"\"\n    Time complexity: O(logn)\n    Space complexity: O(1)\n    \"\"\"\n    res = 0\n\n    # Find the number of rectangulars that are smaller than n\n    while res < n:\n        res += 1 + (res + 1) * (res + 1)\n\n    return res\n\n\ndef main():\n    n = 100\n    print(get_rectangular_number(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85595703125
    ],
    [
      "def nth_rectangular_number(n):\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(i, nth_rectangular_number(i))",
      -0.85595703125
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        count += i * (i + 1) / 2\n        i += 1\n\n    return i - 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(f\"Nth Rectangular Number: {i} = {nth_rectangular_number(i)}\")",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    This solution works, but is inefficient.\n    O(n^2) time complexity.\n    \"\"\"\n    num = 1\n    count = 0\n    while count < n:\n        count += num\n        num += 1\n    return num - 1\n\n\ndef nth_rectangular_number_efficient(n):\n    \"\"\"\n    This solution works in O(n) time.\n    \"\"\"\n    count = 0\n    a = 1\n    b = 1\n    while count < n:\n        count += a\n        a += 1\n        b += a\n    return b - a + 1\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(10))\n    print(nth_rectangular_number_efficient(10))",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    for i in range(10):\n        print(f\"{i}th rectangular number: {nth_rectangular_number(i)}\")",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    This function uses the formula for the nth triangular number\n    to find the nth rectangular number.\n    \"\"\"\n\n    if n <= 0:\n        return None\n\n    triangular_number = n * (n + 1) / 2\n    return n * triangular_number",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    The n-th rectangular number is the n-th triangle number,\n    which is the sum of the first n natural numbers.\n    \"\"\"\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    for i in range(10):\n        print(nth_rectangular_number(i))",
      -0.85693359375
    ],
    [
      "def rectangular_number(n):\n    for i in range(1, n + 1):\n        yield i * i\n\nfor i, rect in enumerate(rectangular_number(100)):\n    print(i, rect)",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: an int representing the nth rectangular number\n    \"\"\"\n    return n * (n + 1) // 2\n\n\nif __name__ == '__main__':\n    print(nth_rectangular_number(4))",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(2))",
      -0.85693359375
    ],
    [
      "from math import ceil\n\n\ndef nth_rectangular_number(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n\n    :param n: int - Index of the rectangular number\n    :return: int - The n-th rectangular number\n    \"\"\"\n    return ceil(n * (n + 1) / 2)",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    The nth rectangular number is the product of the first n natural numbers.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(5))",
      -0.85693359375
    ],
    [
      "def rectangular_number(n):\n    if n == 1:\n        return 1\n    return (2 * n - 1) * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    print(rectangular_number(1))\n    print(rectangular_number(2))\n    print(rectangular_number(3))\n    print(rectangular_number(4))",
      -0.85693359375
    ],
    [
      "def nth_rectangular_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while True:\n        if n * i * (i + 1) // 2 == n:\n            return n * i * (i + 1) // 2\n        if n * i * (i + 1) // 2 > n:\n            return n * i * (i + 1) // 2 - 1\n        i += 1\n\nprint(nth_rectangular_num(3))\nprint(nth_rectangular_num(2))\nprint(nth_rectangular_num(1))\nprint(nth_rectangular_num(0))",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    Return the n-th rectangular number\n    \"\"\"\n    return (n * (n + 1)) / 2",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total * total\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(1))\n    print(nth_rectangular_number(2))\n    print(nth_rectangular_number(3))\n    print(nth_rectangular_number(4))\n    print(nth_rectangular_number(5))\n    print(nth_rectangular_number(6))",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n):\n    if n == 1:\n        return 1\n    return n * (n + 1) // 2\n\n\nprint(nth_rectangular_number(1))\nprint(nth_rectangular_number(2))\nprint(nth_rectangular_number(3))\nprint(nth_rectangular_number(4))",
      -0.85693359375
    ],
    [
      "from math import floor\n\n\ndef nth_rectangular(n):\n    return floor(n * (n + 1) / 2)\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular(5))",
      -0.85693359375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: an integer\n    \"\"\"\n    return n * (n + 1) // 2\n\n\nprint(nth_rectangular_number(3))",
      -0.85693359375
    ],
    [
      "def rectangular_number(n):\n    return n * (n + 1) * (n - 1)\n\nif __name__ == '__main__':\n    for i in range(10):\n        print(rectangular_number(i))",
      -0.85693359375
    ],
    [
      "def rectangular_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: int - the nth rectangular number\n\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) / 6\n\n\nprint(rectangular_number(12))",
      -0.85693359375
    ],
    [
      "def nth_rectangular(n):\n    \"\"\"\n    Return the nth rectangular number.\n    \"\"\"\n    return n * (n + 1) // 2",
      -0.857421875
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    >>> nth_rectangular_number(1)\n    1\n    >>> nth_rectangular_number(2)\n    2\n    >>> nth_rectangular_number(3)\n    3\n    >>> nth_rectangular_number(4)\n    4\n    >>> nth_rectangular_number(5)\n    6\n    >>> nth_rectangular_number(6)\n    8\n    >>> nth_rectangular_number(7)\n    10\n    \"\"\"\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: int - the nth rectangular number\n    \"\"\"\n    return n * (n + 1) / 2\n\n\nif __name__ == '__main__':\n    print(nth_rectangular_number(1))\n    print(nth_rectangular_number(5))\n    print(nth_rectangular_number(10))",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return int((math.sqrt(8 * n + 1) - 1) / 2)\n\n\nif __name__ == \"__main__\":\n    assert nth_rectangular_number(2) == 1\n    assert nth_rectangular_number(10) == 8\n    assert nth_rectangular_number(20) == 13",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef rectangular_number(n):\n    i = 1\n    while True:\n        if i * (i + 1) / 2 >= n:\n            return i * (i + 1) / 2\n        i += 1\n\n\ndef test_rectangular_number():\n    \"\"\"\n    >>> rectangular_number(1)\n    1\n    >>> rectangular_number(2)\n    2\n    >>> rectangular_number(3)\n    3\n    >>> rectangular_number(4)\n    4\n    >>> rectangular_number(10)\n    10\n    >>> rectangular_number(20)\n    21\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    i = 1\n    while True:\n        if i * (i + 1) / 2 > n:\n            break\n        i += 1\n\n    return (i - 1) * i // 2 + n\n\n\nif __name__ == \"__main__\":\n    for i in range(10):\n        print(nth_rectangular_number(i))",
      -0.8583984375
    ],
    [
      "def nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    TC: O(log(n))\n    SC: O(1)\n    \"\"\"\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    n = 3\n    print(nth_rectangular_number(n))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def find_nth_rectangular(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return -1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        i = 3\n        while i < n:\n            i += 1\n            i += self.find_nth_rectangular(i - 1)\n        return i\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.find_nth_rectangular(10)",
      -0.8583984375
    ],
    [
      "def nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    assert nth_rectangular_number(1) == 1\n    assert nth_rectangular_number(2) == 3\n    assert nth_rectangular_number(3) == 6\n    assert nth_rectangular_number(4) == 10\n    assert nth_rectangular_number(5) == 15\n    assert nth_rectangular_number(6) == 21\n    assert nth_rectangular_number(7) == 28",
      -0.8583984375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    >>> nth_rectangular_number(1)\n    1\n    >>> nth_rectangular_number(2)\n    2\n    >>> nth_rectangular_number(3)\n    3\n    >>> nth_rectangular_number(4)\n    5\n    >>> nth_rectangular_number(5)\n    7\n    >>> nth_rectangular_number(6)\n    10\n    >>> nth_rectangular_number(7)\n    12\n    \"\"\"\n    if n == 1:\n        return 1\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from math import factorial\n\ndef rectangular_number(n):\n    \"\"\"Find the n-th rectangular number.\"\"\"\n    return factorial(n) * (2 * n - 1)",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\n\ndef nth_rectangular_number(n):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (n + 1) // 2\n\n\ndef nth_rectangular_number_2(n):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    k = 1\n    while nth_rectangular_number(k) <= n:\n        k += 1\n    return nth_rectangular_number(k - 1)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        assert nth_rectangular_number(i) == i * (i + 1) // 2",
      -0.8583984375
    ],
    [
      "def rectangular_number(n):\n    \"\"\"\n    >>> rectangular_number(1)\n    1\n    >>> rectangular_number(2)\n    2\n    >>> rectangular_number(3)\n    3\n    >>> rectangular_number(4)\n    5\n    >>> rectangular_number(5)\n    6\n    >>> rectangular_number(6)\n    8\n    >>> rectangular_number(7)\n    10\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    :param n: number of rectangular number\n    :return: nth rectangular number\n    >>> nth_rectangular_number(10)\n    285\n    >>> nth_rectangular_number(5)\n    140\n    \"\"\"\n    return n * (n + 1) // 2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def rectangularNumbers(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        i = 1\n        while True:\n            a = i * (i + 1) / 2\n            if a > n:\n                return n\n            elif a == n:\n                return a\n            else:\n                i += 1",
      -0.8583984375
    ],
    [
      "def nth_rectangular(n):\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular(4))",
      -0.8583984375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: an integer\n    \"\"\"\n    return n * (n + 1) // 2\n\n\nprint(nth_rectangular_number(4))",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    The nth rectangular number is the nth number in the sequence:\n    1, 4, 9, 16, 25, 36, ...\n    \"\"\"\n    if n < 1:\n        return 0\n\n    return n * n\n\n\nif __name__ == \"__main__\":\n    assert nth_rectangular_number(0) == 0\n    assert nth_rectangular_number(1) == 1\n    assert nth_rectangular_number(2) == 4\n    assert nth_rectangular_number(3) == 9\n    assert nth_rectangular_number(4) == 16\n    assert nth_rectangular_number(5) == 25\n    assert nth_rectangular_number(6) == 36\n    assert nth_rectangular_number(10) == 100\n    assert nth_rectangular_number(20) == 400",
      -0.85888671875
    ],
    [
      "import math\n\ndef nth_rectangular_number(n):\n    return int(n * (n + 1) / 2)\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"The n-th rectangular number is: {}\".format(nth_rectangular_number(n)))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def nth_rectangular_number(n):\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the nth rectangular number: \"))\n    print(f\"The {n}th rectangular number is {nth_rectangular_number(n)}\")",
      -0.85888671875
    ],
    [
      "def rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n\n    # First number is 1\n    num = 1\n    i = 1\n\n    while i < n:\n        num += 1\n        i += num\n\n    return num\n\n\nif __name__ == \"__main__\":\n    n = 10\n    print(rectangular_number(n))",
      -0.86083984375
    ],
    [
      "def rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    x = 1\n    while n > x:\n        x += 1\n\n    return x * (x + 1) // 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 101):\n        print(rectangular_number(i))",
      -0.86083984375
    ],
    [
      "def rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    x = 0\n    i = 1\n    while x <= n:\n        x += i * (i + 1) / 2\n        i += 1\n    return i - 2\n\n\nif __name__ == \"__main__\":\n    print(rectangular_number(1))",
      -0.88330078125
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: - int representing the nth rectangular number\n    \"\"\"\n    return n * (n + 1) / 2\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = nth_rectangular_number(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((1, 1))\ntest_function((2, 2))\ntest_function((3, 3))\ntest_function((5, 6))\ntest_function((10, 12))",
      -0.9892578125
    ],
    [
      "def nth_rectangular_number(n):\n    i = 1\n    while i * (i + 1) / 2 < n:\n        i += 1\n    return i * (i + 1) / 2 - i * (i - 1) / 2\n\nprint(nth_rectangular_number(10))",
      -1.021484375
    ],
    [
      "def rectangular_number(n: int) -> int:\n    \"\"\"\n    For the nth number, find the dimensions such that\n    n = a * b = a * a\n\n    Since a * b = a * a, b = a\n\n    So, n = a * a\n    We can find the values of a such that a * a = n\n\n    @see https://oeis.org/A000221\n    @see https://oeis.org/A000222\n    \"\"\"\n    return int(n ** 0.5) ** 2\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 101):\n        print(rectangular_number(n))",
      -1.083984375
    ],
    [
      "import math\n\n\ndef nth_rectangular_number(n):\n    \"\"\"\n    :param n: int - nth rectangular number\n    :return: int - nth rectangular number\n\n    >>> nth_rectangular_number(1)\n    1\n    >>> nth_rectangular_number(2)\n    2\n    >>> nth_rectangular_number(5)\n    8\n    >>> nth_rectangular_number(12)\n    100\n    >>> nth_rectangular_number(20)\n    1729\n    >>> nth_rectangular_number(200)\n    172900\n    \"\"\"\n    return n * (n + 1) // 2\n\n\ndef nth_rectangular_number_math(n):\n    \"\"\"\n    :param n: int - nth rectangular number\n    :return: int - nth rectangular number\n\n    >>> nth_rectangular_number_math(1)\n    1\n    >>> nth_rectangular_number_math(2)\n    2\n    >>> nth_rectangular_number_math(5)\n    8\n    >>> nth_rectangular_number_math(12)\n    100\n    >>> nth_rectangular_number_math(20)\n    1729\n    >>> nth_rectangular_number_math(200)\n    172900\n    \"\"\"\n    return int(math.factorial(n + 1) / math.factorial(2) / math.factorial(n))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.490234375
    ],
    [
      "from math import floor\n\n\ndef nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    O(1) time and space\n    \"\"\"\n    return floor(n * (n + 1) / 2)\n\n\nif __name__ == \"__main__\":\n    assert nth_rectangular_number(1) == 1\n    assert nth_rectangular_number(2) == 2\n    assert nth_rectangular_number(3) == 3\n    assert nth_rectangular_number(4) == 4\n    assert nth_rectangular_number(5) == 5",
      -1.62890625
    ],
    [
      "def rectangular_number(n: int) -> int:\n    \"\"\"\n    Return the n-th rectangular number.\n    >>> rectangular_number(1)\n    1\n    >>> rectangular_number(5)\n    25\n    >>> rectangular_number(12)\n    231\n    >>> rectangular_number(15)\n    364\n    >>> rectangular_number(25)\n    715\n    \"\"\"\n\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.708984375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    i = 1\n    num = 1\n    while num < n:\n        num += i * (i + 1) / 2\n        i += 1\n\n    return num\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(10))",
      -2.013671875
    ],
    [
      "def nth_rectangular_number(n):\n    if n <= 0:\n        return 0\n    i = 1\n    while True:\n        if i * i > n:\n            return i * (n - i + 1)\n        n -= i * i\n        i += 1\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(1))\n    print(nth_rectangular_number(2))\n    print(nth_rectangular_number(3))\n    print(nth_rectangular_number(4))\n    print(nth_rectangular_number(5))\n    print(nth_rectangular_number(6))\n    print(nth_rectangular_number(11))\n    print(nth_rectangular_number(12))\n    print(nth_rectangular_number(13))\n    print(nth_rectangular_number(14))\n    print(nth_rectangular_number(15))\n    print(nth_rectangular_number(16))\n    print(nth_rectangular_number(21))\n    print(nth_rectangular_number(22))\n    print(nth_rectangular_number(23))\n    print(nth_rectangular_number(24))\n    print(nth_rectangular_number(25))\n    print(nth_rectangular_number(26))\n    print(nth_rectangular_number(101))\n    print(nth_rectangular_number(102))\n    print(nth_rectangular_number(103))\n    print(nth_rectangular_number(104))\n    print(nth_rectangular_number(105))\n    print(nth_rectangular_number(106))\n    print(nth_rectangular_number(111))\n    print(nth_rectangular_number(112))\n    print(nth_rectangular_number(113))\n    print(nth_rectangular_number(114))\n    print(nth_rectangular_number(115))\n    print(nth_rectangular_number(116))",
      -2.09375
    ],
    [
      "from math import sqrt\n\n\ndef nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Return nth rectangular number.\n    >>> nth_rectangular_number(1)\n    1\n    >>> nth_rectangular_number(2)\n    2\n    >>> nth_rectangular_number(3)\n    3\n    >>> nth_rectangular_number(4)\n    4\n    >>> nth_rectangular_number(5)\n    6\n    >>> nth_rectangular_number(6)\n    8\n    >>> nth_rectangular_number(7)\n    10\n    >>> nth_rectangular_number(8)\n    12\n    >>> nth_rectangular_number(9)\n    15\n    >>> nth_rectangular_number(10)\n    20\n    >>> nth_rectangular_number(11)\n    24\n    >>> nth_rectangular_number(12)\n    28\n    >>> nth_rectangular_number(13)\n    32\n    >>> nth_rectangular_number(14)\n    36\n    >>> nth_rectangular_number(15)\n    40\n    >>> nth_rectangular_number(16)\n    45\n    >>> nth_rectangular_number(17)\n    49\n    >>> nth_rectangular_number(18)\n    54\n    >>> nth_rectangular_number(19)\n    59\n    >>> nth_rectangular_number(20)\n    64\n    >>> nth_rectangular_number(21)\n    70\n    >>> nth_rectangular_number(22)\n    76\n    >>> nth_rectangular_number(23)\n    82\n    >>> nth_rectangular_number(24)\n    88\n    >>> nth_rectangular_number(25)\n    94\n    >>> nth_rectangular_number(26)\n    100\n    >>> nth_rectangular_number(27)\n    106\n    >>>",
      -2.177734375
    ],
    [
      "def nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 1:\n        return 0\n\n    left = 1\n    right = n\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if mid ** 2 < n:\n            left = mid + 1\n        elif mid ** 2 > n:\n            right = mid - 1\n        else:\n            return mid ** 2\n\n    return right ** 2\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(5))\n    print(nth_rectangular_number(12))",
      -2.865234375
    ],
    [
      "import math\n\ndef nth_rectangular_number(n):\n    \"\"\"\n    Return the nth rectangular number.\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be positive.\")\n\n    return int(math.ceil(math.sqrt(n) * (n + 1)))\n\ndef test_nth_rectangular_number():\n    \"\"\"\n    Tests the nth_rectangular_number function.\n    \"\"\"\n\n    assert nth_rectangular_number(1) == 1\n    assert nth_rectangular_number(2) == 2\n    assert nth_rectangular_number(3) == 3\n    assert nth_rectangular_number(4) == 4\n    assert nth_rectangular_number(5) == 6\n    assert nth_rectangular_number(6) == 6\n    assert nth_rectangular_number(7) == 8\n    assert nth_rectangular_number(8) == 8\n    assert nth_rectangular_number(9) == 9\n    assert nth_rectangular_number(10) == 10\n\nif __name__ == '__main__':\n    test_nth_rectangular_number()",
      -3.185546875
    ],
    [
      "def find_nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    i = 1\n    while True:\n        if n <= i * (i + 1) // 2:\n            break\n        i += 1\n\n    return i * (i + 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(find_nth_rectangular_number(0))\n    print(find_nth_rectangular_number(1))\n    print(find_nth_rectangular_number(2))\n    print(find_nth_rectangular_number(3))\n    print(find_nth_rectangular_number(4))\n    print(find_nth_rectangular_number(5))\n    print(find_nth_rectangular_number(6))\n    print(find_nth_rectangular_number(7))",
      -3.29296875
    ],
    [
      "import math\n\n\ndef nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    T(n) = O(1)\n    S(n) = O(1)\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be greater than or equal to zero.\")\n    return math.floor((math.sqrt(8 * n + 1) - 1) / 2)\n\n\nif __name__ == \"__main__\":\n    assert nth_rectangular_number(0) == 0\n    assert nth_rectangular_number(1) == 1\n    assert nth_rectangular_number(2) == 2\n    assert nth_rectangular_number(3) == 3\n    assert nth_rectangular_number(4) == 4\n    assert nth_rectangular_number(5) == 5\n    assert nth_rectangular_number(6) == 6\n    assert nth_rectangular_number(7) == 7\n    assert nth_rectangular_number(8) == 8\n    assert nth_rectangular_number(9) == 9\n    assert nth_rectangular_number(10) == 10\n    assert nth_rectangular_number(11) == 11\n    assert nth_rectangular_number(12) == 12\n    assert nth_rectangular_number(13) == 13\n    assert nth_rectangular_number(14) == 14\n    assert nth_rectangular_number(15) == 15\n    assert nth_rectangular_number(16) == 16\n    assert nth_rectangular_number(17) == 17\n    assert nth_rectangular_number(18) == 18\n    assert nth_rectangular_number(19) == 19\n    assert nth_rectangular_number(20) == 20\n    assert nth_rectangular_number(21) == 21\n    assert nth_rectangular_number(22) == 22\n    assert nth_",
      -3.294921875
    ],
    [
      "def rectangular_number(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 1\n    num = 1\n    while n > num:\n        num += (2 * i - 1) * (2 * i) // 2\n        i += 1\n    return num",
      -3.646484375
    ],
    [
      "from math import sqrt\n\n\ndef nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Finds the n-th rectangular number by using the formula:\n    n^2 + (n-1)^2 + (n-2)^2 + ... + 1\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\ndef nth_rectangular_number_sum(n: int) -> int:\n    \"\"\"\n    Finds the n-th rectangular number by using the formula:\n    n^2 + (n-1)^2 + (n-2)^2 + ... + 1\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) // 6\n\n\ndef nth_rectangular_number_sqrt(n: int) -> int:\n    \"\"\"\n    Finds the n-th rectangular number by using the formula:\n    n^2 + (n-1)^2 + (n-2)^2 + ... + 1\n    \"\"\"\n    return int((sqrt(8 * n + 1) - 1) / 2)\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(10))",
      -4.4453125
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    :param n: int - number of rectangular numbers to return\n    :return: int or None\n    \"\"\"\n    if n < 1:\n        return None\n\n    number = 1\n    for i in range(1, n):\n        number += i\n\n    return number\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = nth_rectangular_number(n)\n\n    if output == solution:\n        return True\n    else:\n        return False\n\n\ndef test_cases():\n    test_case_1 = [2, 3]\n    test_case_2 = [4, 8]\n    test_case_3 = [1, 1]\n    test_case_4 = [3, None]\n\n    test_cases = [test_case_1, test_case_2, test_case_3, test_case_4]\n\n    for test_case in test_cases:\n        result = test_function(test_case)\n\n        if result is True:\n            print(\"Pass\")\n        else:\n            print(\"Fail\")\n\n\ntest_cases()",
      -4.51171875
    ],
    [
      "def rectangular_number(n):\n    \"\"\"\n    >>> rectangular_number(1)\n    1\n    >>> rectangular_number(2)\n    2\n    >>> rectangular_number(3)\n    3\n    >>> rectangular_number(4)\n    5\n    >>> rectangular_number(5)\n    6\n    >>> rectangular_number(6)\n    8\n    >>> rectangular_number(7)\n    10\n    >>> rectangular_number(8)\n    12\n    >>> rectangular_number(9)\n    15\n    >>> rectangular_number(10)\n    16\n    >>> rectangular_number(11)\n    20\n    >>> rectangular_number(12)\n    24\n    >>> rectangular_number(13)\n    27\n    >>> rectangular_number(14)\n    30\n    >>> rectangular_number(15)\n    36\n    >>> rectangular_number(16)\n    40\n    >>> rectangular_number(17)\n    45\n    >>> rectangular_number(18)\n    48\n    >>> rectangular_number(19)\n    55\n    >>> rectangular_number(20)\n    60\n    >>> rectangular_number(21)\n    64\n    >>> rectangular_number(22)\n    70\n    >>> rectangular_number(23)\n    75\n    >>> rectangular_number(24)\n    80\n    >>> rectangular_number(25)\n    85\n    >>> rectangular_number(26)\n    90\n    >>> rectangular_number(27)\n    96\n    >>> rectangular_number(28)\n    100\n    >>> rectangular_number(29)\n    105\n    >>> rectangular_number(30)\n    110\n    >>> rectangular_number(31)\n    115\n    >>> rectangular_number(32)\n    120\n    >>> rectangular_number(33)\n    126\n    >>> rectangular_number(34)\n    1",
      -4.84765625
    ],
    [
      "import math\n\n\ndef rectangular_number(n):\n    # Count of rectangles\n    count = 0\n    # Count of squares\n    square_count = 0\n    # Count of rectangles\n    rectangular_count = 0\n    # Maximum number of squares\n    max_square_count = int(math.sqrt(n))\n\n    for i in range(1, max_square_count):\n        square_count += i\n\n        if square_count * (square_count + 1) / 2 <= n:\n            count += square_count\n        else:\n            # If count is not enough\n            if n <= count + (square_count - i) * i:\n                return n - count\n            else:\n                return count + (n - count - (square_count - i) * i) * i\n\n\nn = 1\nfor i in range(1, 101):\n    print(rectangular_number(i))",
      -4.90625
    ],
    [
      "from math import sqrt\n\n\ndef nth_rectangular_number(n):\n    \"\"\"\n    Returns the n-th rectangular number.\n    :param n: int\n    :return: int\n    \"\"\"\n    i = 1\n    while True:\n        if i * (i + 1) // 2 == n:\n            return i * (i + 1) // 2\n        i += 1\n\n\ndef nth_rectangular_number_v2(n):\n    \"\"\"\n    Returns the n-th rectangular number.\n    :param n: int\n    :return: int\n    \"\"\"\n    i = 1\n    while True:\n        if i * (i + 1) // 2 > n:\n            return i * (i + 1) // 2 - 1\n        i += 1\n\n\ndef nth_rectangular_number_v3(n):\n    \"\"\"\n    Returns the n-th rectangular number.\n    :param n: int\n    :return: int\n    \"\"\"\n    i = 1\n    while True:\n        if n > i * (i + 1) // 2:\n            n -= i * (i + 1) // 2\n            i += 1\n        else:\n            return i * (i + 1) // 2 - n\n\n\ndef nth_rectangular_number_v4(n):\n    \"\"\"\n    Returns the n-th rectangular number.\n    :param n: int\n    :return: int\n    \"\"\"\n    i = 1\n    while True:\n        if n > i * (i + 1) // 2:\n            n -= i * (i + 1) // 2\n        else:\n            return i * (i + 1) // 2 - n\n        i += 1\n\n\ndef nth_rectangular_number_v5(n):\n    \"\"\"\n    Returns the n-th rectangular number.\n    :param n: int\n    :return: int\n    \"\"\"\n    i = 1\n    while True:\n        if n > i * (i + 1) // 2:\n            n -= i * (i +",
      -5.09375
    ],
    [
      "from math import ceil\n\n\ndef nth_rectangular_number(n):\n    \"\"\"\n    Return nth rectangular number.\n    >>> nth_rectangular_number(1)\n    1\n    >>> nth_rectangular_number(2)\n    2\n    >>> nth_rectangular_number(3)\n    3\n    >>> nth_rectangular_number(4)\n    4\n    >>> nth_rectangular_number(5)\n    6\n    >>> nth_rectangular_number(6)\n    8\n    >>> nth_rectangular_number(7)\n    10\n    >>> nth_rectangular_number(8)\n    12\n    >>> nth_rectangular_number(9)\n    15\n    >>> nth_rectangular_number(10)\n    20\n    >>> nth_rectangular_number(11)\n    24\n    >>> nth_rectangular_number(12)\n    28\n    >>> nth_rectangular_number(13)\n    35\n    >>> nth_rectangular_number(14)\n    42\n    >>> nth_rectangular_number(15)\n    49\n    >>> nth_rectangular_number(16)\n    56\n    >>> nth_rectangular_number(17)\n    65\n    >>> nth_rectangular_number(18)\n    76\n    >>> nth_rectangular_number(19)\n    91\n    >>> nth_rectangular_number(20)\n    106\n    \"\"\"\n    return int(ceil((n ** 2) * 0.5))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.31640625
    ],
    [
      "from typing import List\n\n\ndef nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if n == 1:\n        return 1\n\n    i = 2\n    while True:\n        if n < i * (i + 1) / 2:\n            return i * (i - 1) / 2\n\n        if n == i * (i + 1) / 2:\n            return i * i\n\n        i += 1\n\n\nif __name__ == \"__main__\":\n    assert nth_rectangular_number(1) == 1\n    assert nth_rectangular_number(2) == 2\n    assert nth_rectangular_number(3) == 3\n    assert nth_rectangular_number(4) == 4\n    assert nth_rectangular_number(5) == 5\n    assert nth_rectangular_number(6) == 6\n    assert nth_rectangular_number(7) == 8\n    assert nth_rectangular_number(8) == 9\n    assert nth_rectangular_number(9) == 10\n    assert nth_rectangular_number(10) == 12",
      -5.3515625
    ],
    [
      "class Solution:\n    def rectangular_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 1:\n            return 0\n        for i in range(1, n):\n            if i * (i + 1) / 2 >= n:\n                return i * (i + 1) / 2\n\n\nif __name__ == \"__main__\":\n    n = 13\n    solution = Solution()\n    print(solution.rectangular_number(n))",
      -5.453125
    ],
    [
      "def find_rectangular_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    for i in range(1, n):\n        for j in range(1, i):\n            if j * i == n:\n                return j * i\n            if j * i > n:\n                break\n        else:\n            continue\n        break\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert find_rectangular_number(1) == 1\n    assert find_rectangular_number(15) == 12\n    assert find_rectangular_number(30) == 9",
      -6.32421875
    ],
    [
      "class Solution(object):\n    def find_rectangular_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 2:\n            return n\n        i = 2\n        while True:\n            i += 1\n            num = i * i\n            if num > n:\n                return i * (n - i + 1)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.find_rectangular_number(2))\n    print(solution.find_rectangular_number(3))\n    print(solution.find_rectangular_number(4))\n    print(solution.find_rectangular_number(5))\n    print(solution.find_rectangular_number(6))",
      -6.453125
    ],
    [
      "def find_rectangular_number(n):\n    \"\"\"\n    Find the n-th rectangular number\n    :param n: int - a number\n    :return: int - n-th rectangular number\n    \"\"\"\n    if n <= 0:\n        return n\n\n    result = 0\n    i = 1\n    while True:\n        result += i\n        if result >= n:\n            break\n        i += 1\n    return result\n\n\ndef test_find_rectangular_number():\n    assert find_rectangular_number(1) == 1\n    assert find_rectangular_number(2) == 2\n    assert find_rectangular_number(3) == 3\n    assert find_rectangular_number(10) == 10\n    assert find_rectangular_number(15) == 12\n    assert find_rectangular_number(100) == 100\n    assert find_rectangular_number(200) == 200\n    assert find_rectangular_number(1000) == 1000\n    assert find_rectangular_number(2000) == 2000\n    assert find_rectangular_number(5000) == 5000\n    assert find_rectangular_number(10000) == 10000\n    assert find_rectangular_number(10001) == 10200\n    assert find_rectangular_number(20000) == 20400\n    assert find_rectangular_number(50000) == 50600\n    assert find_rectangular_number(100000) == 101200\n    assert find_rectangular_number(100001) == 102400\n    assert find_rectangular_number(10000000) == 10012000\n\n\nif __name__ == \"__main__\":\n    test_find_rectangular_number()",
      -6.5078125
    ],
    [
      "def find_nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    This is a brute force approach. It is not efficient.\n    \"\"\"\n\n    i = 1\n    while True:\n        rect = i * (i + 1) / 2\n        if rect == n:\n            return i * (i + 1)\n        elif rect > n:\n            return -1\n        i += 1\n\n\nif __name__ == \"__main__\":\n    assert find_nth_rectangular_number(1) == 1\n    assert find_nth_rectangular_number(2) == 2\n    assert find_nth_rectangular_number(3) == 3\n    assert find_nth_rectangular_number(5) == 6\n    assert find_nth_rectangular_number(10) == 10\n    assert find_nth_rectangular_number(11) == 12\n    assert find_nth_rectangular_number(12) == 12\n    assert find_nth_rectangular_number(15) == 15\n    assert find_nth_rectangular_number(16) == 16\n    assert find_nth_rectangular_number(17) == 18\n    assert find_nth_rectangular_number(18) == 18\n    assert find_nth_rectangular_number(20) == 20\n    assert find_nth_rectangular_number(21) == 22\n    assert find_nth_rectangular_number(22) == 22\n    assert find_nth_rectangular_number(23) == 24\n    assert find_nth_rectangular_number(24) == 24\n    assert find_nth_rectangular_number(25) == 25\n    assert find_nth_rectangular_number(26) == 28\n    assert find_nth_rectangular_number(27) == 29\n    assert find_nth_rectangular_number(28) == 28\n    assert find_nth_rectangular_number(29) == 29\n    assert find_",
      -6.8984375
    ],
    [
      "import math\n\n\ndef nth_rectangular_number(n: int) -> int:\n    \"\"\"Returns the n-th rectangular number\n\n    Args:\n        n (int): nth rectangular number to find\n\n    Examples:\n        >>> nth_rectangular_number(1)\n        1\n        >>> nth_rectangular_number(3)\n        3\n        >>> nth_rectangular_number(10)\n        100\n        >>> nth_rectangular_number(20)\n        2000\n    \"\"\"\n    return int(n * (n + 1) / 2)\n\n\ndef nth_rectangular_number_math(n: int) -> int:\n    \"\"\"Returns the n-th rectangular number\n\n    Args:\n        n (int): nth rectangular number to find\n\n    Examples:\n        >>> nth_rectangular_number_math(1)\n        1\n        >>> nth_rectangular_number_math(3)\n        3\n        >>> nth_rectangular_number_math(10)\n        100\n        >>> nth_rectangular_number_math(20)\n        2000\n    \"\"\"\n    return int(math.factorial(n) / math.sqrt(math.factorial(2 * n)))\n\n\nif __name__ == \"__main__\":\n    print(nth_rectangular_number(1))\n    print(nth_rectangular_number(3))\n    print(nth_rectangular_number(10))\n    print(nth_rectangular_number(20))\n\n    print(nth_rectangular_number_math(1))\n    print(nth_rectangular_number_math(3))\n    print(nth_rectangular_number_math(10))\n    print(nth_rectangular_number_math(20))",
      -6.90234375
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    n: positive int\n\n    returns: n-th rectangular number\n    \"\"\"\n    # Your code here\n    number = 0\n    i = 1\n    while number < n:\n        number = i * (i + 1) / 2\n        i += 1\n    return number\n\nprint(nth_rectangular_number(1))\nprint(nth_rectangular_number(2))\nprint(nth_rectangular_number(3))\nprint(nth_rectangular_number(4))\nprint(nth_rectangular_number(5))\nprint(nth_rectangular_number(6))\nprint(nth_rectangular_number(7))\nprint(nth_rectangular_number(8))\nprint(nth_rectangular_number(9))\nprint(nth_rectangular_number(10))\nprint(nth_rectangular_number(11))\nprint(nth_rectangular_number(12))\nprint(nth_rectangular_number(13))\nprint(nth_rectangular_number(14))\nprint(nth_rectangular_number(15))",
      -6.93359375
    ],
    [
      "def rectangular_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    # Find a way to count the number of rectangular numbers\n    # with perimeter less than or equal to n\n    # This is a form of counting inversions\n    return n * (n + 1) * (n + 2) // 6\n\n\ndef test_rectangular_number():\n    assert rectangular_number(0) == 0\n    assert rectangular_number(1) == 1\n    assert rectangular_number(2) == 5\n    assert rectangular_number(3) == 10\n    assert rectangular_number(4) == 15\n    assert rectangular_number(5) == 22\n    assert rectangular_number(100) == 10100\n\n\nif __name__ == '__main__':\n    test_rectangular_number()",
      -7.140625
    ],
    [
      "def nth_rectangular_number(n):\n    \"\"\"\n    Let's start by defining a rectangular number as the product of an\n    increasing sequence of integers.\n\n    An increasing sequence of integers is a sequence of integers that are\n    greater than or equal to 1 and are in increasing order.\n\n    For example, the sequence [1, 3, 4, 5] is an increasing sequence of\n    integers.\n\n    So, the first rectangular number is 1 x 3 = 3.\n\n    The second rectangular number is 2 x 4 = 8.\n\n    The third rectangular number is 3 x 5 = 15.\n\n    And so on.\n\n    So, the first 5 rectangular numbers are:\n    1, 3, 8, 15, 20\n\n    Write a function that takes in an integer n and returns the nth\n    rectangular number.\n    \"\"\"\n    if n < 0:\n        return None\n\n    if n == 0:\n        return 0\n\n    # Initialize the sequence\n    sequence = [1]\n\n    # Iterate through the sequence until we reach the nth element\n    # The i-th element is the product of the sequence up to and including\n    # the i-th element\n    for i in range(1, n):\n        sequence.append(sequence[i - 1] * (i + 1))\n\n    return sequence[n - 1]",
      -8.9609375
    ],
    [
      "from math import sqrt\n\n\ndef nth_rectangular_number(n):\n    \"\"\"\n    Return nth rectangular number.\n    \"\"\"\n    if n < 1:\n        raise ValueError('n must be >= 1')\n    return n * (n + 1) // 2\n\n\ndef nth_rectangular_number_naive(n):\n    \"\"\"\n    Return nth rectangular number.\n    \"\"\"\n    if n < 1:\n        raise ValueError('n must be >= 1')\n    return n * (n + 1) * (2 * n + 1) ** .5\n\n\ndef nth_rectangular_number_fast(n):\n    \"\"\"\n    Return nth rectangular number.\n    \"\"\"\n    if n < 1:\n        raise ValueError('n must be >= 1')\n    return n * (n + 1) * (2 * n + 1) ** .5 / (n + 1)",
      -9.1015625
    ],
    [
      "def find_nth_rectangular_number(n):\n    # find the nth number\n    # nth number is a square number\n    # nth number is also a rectangular number\n    #\n    # nth number = a^2\n    # a = sqrt(n)\n    #\n    # if a is not an integer, then it is not a square number\n    #\n    # a = sqrt(n)\n    #\n    # 1 4 9 16\n    #\n    # 1 2 3 4 5\n    #\n    # 1 2 3 4 5 6 7 8 9 10\n    #\n    # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n\n    a = int(n ** 0.5)\n\n    if a * a == n:\n        return a\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    assert find_nth_rectangular_number(1) == 1\n    assert find_nth_rectangular_number(4) == 2\n    assert find_nth_rectangular_number(9) == 3\n    assert find_nth_rectangular_number(16) == 4\n    assert find_nth_rectangular_number(25) == None",
      -9.8671875
    ],
    [
      "from math import sqrt\n\n\ndef rectangular_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: int - the n-th rectangular number\n\n    A rectangular number is a number which can be expressed as the product of 2 equal integers, i.e. n = a * a.\n\n    Return the n-th rectangular number or -1 if there is no such number\n\n    Example:\n    n = 3, return 3;\n    n = 11, return 12 (11 * 11);\n    n = 12, return -1.\n\n    n is always positive\n    \"\"\"\n    if n <= 0:\n        return -1\n    else:\n        for i in range(2, n + 1):\n            if sqrt(i) == int(sqrt(i)):\n                return i\n        return -1\n\n\ndef test_rectangular_number():\n    assert rectangular_number(3) == 3\n    assert rectangular_number(11) == 12\n    assert rectangular_number(12) == -1\n    assert rectangular_number(0) == -1\n    assert rectangular_number(1) == 1\n\n\nif __name__ == '__main__':\n    test_rectangular_number()",
      -10.03125
    ],
    [
      "class Solution(object):\n    def getRectangularNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # \u8fd9\u4e2a\u9898\u76ee\u53ef\u4ee5\u770b\u4f5c\u662f 10000 \u4e2a\u77e9\u5f62\u6846\u4e2d\u627e\u7b2c n \u5927\u7684\u77e9\u5f62\u6846\n        # 1 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u662f 1 \u4e2a 1\n        # 2 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u662f 2 * 1 = 2\n        # 3 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u662f 3 * 1 = 3\n        # 4 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u662f 4 * 1 = 4\n        # 5 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u662f 5 * 1 = 5\n        # ...\n        # 10000 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u662f 10000 * 1 = 10000\n        # 10001 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u662f 10001 * 1 = 10001\n        # \u4f46\u662f 10002 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u4e0d\u662f 10002 * 1 = 10002\n        # \u56e0\u4e3a 10002 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u662f 2 * 10001 = 20002\n        # \u6240\u4ee5 10002 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u5e94\u8be5\u662f\u7b2c 20002 \u4e2a\n        # \u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u5230 20002 \u4e2a 1 \u7684\u77e9\u5f62\u6846\n        # 20002 \u4e2a 1 \u7684\u77e9\u5f62\u6846\u662f 20002 * 1 = 20002\n        # 20003 \u4e2a 1 \u7684\u77e9",
      -10.3125
    ],
    [
      "import math\nfrom typing import Optional\n\n\ndef nth_rectangular_number(n: int) -> Optional[int]:\n    \"\"\"\n    Find the n-th rectangular number.\n    >>> nth_rectangular_number(1)\n    1\n    >>> nth_rectangular_number(2)\n    2\n    >>> nth_rectangular_number(3)\n    3\n    >>> nth_rectangular_number(4)\n    5\n    >>> nth_rectangular_number(5)\n    6\n    >>> nth_rectangular_number(10)\n    100\n    >>> nth_rectangular_number(100)\n    5050\n    >>> nth_rectangular_number(1000)\n    100000\n    >>> nth_rectangular_number(-1)\n    >>> nth_rectangular_number(0)\n    \"\"\"\n    if n < 1:\n        return None\n    return int((math.sqrt(8 * n + 1) - 1) // 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -11.8984375
    ],
    [
      "def nth_rectangular_num(n):\n    \"\"\"\n    Time complexity: O(logn).\n    Space complexity: O(1).\n    \"\"\"\n    \n    # Prove that nth rectangular number is O(n^1/2).\n    # 1 + 2 + 3 + ... + n = n * (n + 1) / 2\n    # n^1/2 + 2n^1/2 + ... + n^1/2 = n * (n + 1) / 2\n    # n^1/2(1 + 2 + ... + n) = n * (n + 1) / 2\n    # n^1/2(n * (n + 1) / 2) = n * (n + 1) / 2\n    # n^1/2(n * n + n) = n * (n + 1) / 2\n    # n^1/2(2n^2 + n) = n * (n + 1) / 2\n    # n^1/2(2n^2 + 2n + 1) = n * (n + 1) / 2\n    # 2n^2 + 2n + 1 = n * (n + 1) / 2\n    # 2n^2 + 2n - n * (n + 1) / 2 = 1\n    # 2n^2 + 2n - n(n + 1) / 2 = 1\n    # 2n^2 + 2n - n(n + 1) = 2\n    # 2n^2 + 2n - n(n + 1) - 2 = 0\n    # 2(n^2 + n) - 2n(n + 1) = -2\n    # (2n + 1)(n + 1) = -2\n    # n^2 + n = -1/2\n    # n^2 + n - 1/2 = 0\n    # n^2 + n - 1/2 = 0\n    # n^2 + n - sqrt(1/4 + 1/4) =",
      -12.5078125
    ],
    [
      "import math\n\n\ndef rectangular_number(n):\n    \"\"\"\n    time complexity: O(logn)\n    space complexity: O(1)\n    \"\"\"\n    # a rectangular number is a number which is product of two integers (a, b)\n    # and a is less than or equal to b\n    # for example:\n    # 12 = 3 * 4\n    # 144 = 12 * 12\n    # 40320 = 5 * 7 * 7\n\n    # start with 1, which is the first rectangular number\n    # increase the number until we find the nth number\n    curr = 1\n    while n > 0:\n        # increase the number to the next rectangular number\n        curr += math.floor((1 + 8 * curr) / 2)\n        n -= 1\n    return curr\n\n\nprint(rectangular_number(1))\nprint(rectangular_number(2))\nprint(rectangular_number(10))",
      -13.5390625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}