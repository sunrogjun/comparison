{
  "problem": {
    "task_id": "MBPP/123",
    "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
    "test_list": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ],
    "challenge_test_list": [],
    "problem_id": 112
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def sum_of_amicable_numbers(limit: int) -> int:\n    \"\"\"Sums all amicable numbers from 1 to a specified number.\n\n    Parameters\n    ----------\n    limit : int\n        The upper limit of the range.\n\n    Returns\n    -------\n    int\n        The sum of all amicable numbers in the range.\n    \"\"\"\n    total = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            total += num\n    return total\n\n\ndef is_amicable(num: int) -> bool:\n    \"\"\"Checks if a number is an amicable number.\n\n    An amicable number is a number which is equal to the sum of factors\n    of the other number which is equal to the sum of the factors of the\n    given number.\n\n    Parameters\n    ----------\n    num : int\n        The number to check.\n\n    Returns\n    -------\n    bool\n        True if the number is amicable, False otherwise.\n    \"\"\"\n    sum_of_factors = sum_of_proper_divisors(num)\n    return sum_of_factors != num and num == sum_of_proper_divisors(sum_of_factors)\n\n\ndef sum_of_proper_divisors(num: int) -> int:\n    \"\"\"Sums all proper divisors of a number.\n\n    Parameters\n    ----------\n    num : int\n        The number to sum the divisors of.\n\n    Returns\n    -------\n    int\n        The sum of all proper divisors of the given number.\n    \"\"\"\n    total = 0\n    for divisor in range(1, num // 2 + 1):\n        if num % divisor == 0:\n            total += divisor\n    return total",
      10.6328125
    ],
    [
      "def sum_of_amicable_numbers(max_number):\n    \"\"\"\n    >>> sum_of_amicable_numbers(10)\n    170\n    >>> sum_of_amicable_numbers(20)\n    210\n    >>> sum_of_amicable_numbers(100)\n    31622\n    >>> sum_of_amicable_numbers(1000)\n    33162\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, max_number + 1):\n        if i in amicable_numbers:\n            continue\n        divisor_sum = sum(get_divisors(i))\n        if i != divisor_sum and sum(get_divisors(divisor_sum)) == i:\n            amicable_numbers.extend([i, divisor_sum])\n    return sum(amicable_numbers)\n\n\ndef get_divisors(n):\n    \"\"\"\n    >>> get_divisors(3)\n    []\n    >>> get_divisors(28)\n    [1, 2, 4, 7, 14]\n    >>> get_divisors(220)\n    [1, 2, 4, 5, 8, 10, 11, 16, 20, 22, 35, 44, 55, 70, 88, 110]\n    \"\"\"\n    divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.extend([i, n // i])\n    return sorted(list(set(divisors)))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    print(sum_of_amicable_numbers(1000))",
      8.078125
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10000)\n    31626\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if is_amicable(i):\n            total += i\n    return total\n\n\ndef sum_proper_divisors(n):\n    \"\"\"\n    >>> sum_proper_divisors(220)\n    284\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total\n\n\ndef is_amicable(n):\n    \"\"\"\n    >>> is_amicable(220)\n    True\n    >>> is_amicable(284)\n    False\n    \"\"\"\n    return sum_proper_divisors(sum_proper_divisors(n)) == n and sum_proper_divisors(n) != n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.42578125
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10000)\n    31626\n    >>> sum_amicable_numbers(5000)\n    19091\n    >>> sum_amicable_numbers(1000)\n    17604\n    >>> sum_amicable_numbers(100)\n    1382\n    >>> sum_amicable_numbers(50)\n    1040\n    >>> sum_amicable_numbers(10)\n    30\n    >>> sum_amicable_numbers(5)\n    22\n    >>> sum_amicable_numbers(2)\n    4\n    >>> sum_amicable_numbers(1)\n    0\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        if i % 1000 == 0:\n            print(i)\n        s1 = sum_divisors(i)\n        s2 = sum_divisors(s1)\n        if i == s2 and i != s1:\n            result += i\n    return result\n\ndef sum_divisors(n):\n    \"\"\"\n    >>> sum_divisors(6)\n    12\n    >>> sum_divisors(28)\n    56\n    >>> sum_divisors(200)\n    284\n    >>> sum_divisors(1000)\n    500\n    \"\"\"\n    result = 0\n    for i in range(1, n):\n        if n % i == 0:\n            result += i\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.6513671875
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicables = 0\n\n    for i in range(1, n + 1):\n        if i not in (4, 6, 8, 9, 10):\n            sum_amicables += sum_divisors(i)\n\n    return sum_amicables\n\n\ndef sum_divisors(n):\n    \"\"\"\n    Sum all divisors of a given number.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    total = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n\n    return total\n\n\ndef test_amicable_numbers():\n    \"\"\"Test for amicable numbers.\"\"\"\n    assert sum_amicable_numbers(100) == 504",
      1.5673828125
    ],
    [
      "def sum_amicable_numbers(n: int) -> int:\n    \"\"\"\n    >>> sum_amicable_numbers(10000)\n    31626\n    >>> sum_amicable_numbers(5000)\n    17604\n    >>> sum_amicable_numbers(1000)\n    504\n    >>> sum_amicable_numbers(100)\n    385\n    >>> sum_amicable_numbers(50)\n    220\n    >>> sum_amicable_numbers(10)\n    170\n    >>> sum_amicable_numbers(5)\n    10\n    >>> sum_amicable_numbers(4)\n    0\n    \"\"\"\n    def get_sum_of_divisors(n: int) -> int:\n        sum_divisors = 0\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                sum_divisors += i\n        return sum_divisors\n\n    amicable_nums = []\n    for i in range(1, n + 1):\n        sum_i = get_sum_of_divisors(i)\n        sum_sum_i = get_sum_of_divisors(sum_i)\n        if sum_sum_i == i and sum_i != i:\n            amicable_nums.append(i)\n    return sum(amicable_nums)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.4853515625
    ],
    [
      "from math import sqrt\nfrom typing import Callable\n\n\ndef sum_of_proper_divisors(n: int) -> int:\n    \"\"\"\n    Return the sum of proper divisors of a number.\n    \"\"\"\n    if n == 1:\n        return 0\n    total = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i != n:\n                total += i\n            else:\n                total += i // 2\n    return total\n\n\ndef amicable_numbers(n: int) -> int:\n    \"\"\"\n    Return the sum of amicable numbers between 1 and n.\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        if i == sum_of_proper_divisors(i) and sum_of_proper_divisors(i) != i:\n            if i != sum_of_proper_divisors(sum_of_proper_divisors(i)):\n                total += i\n    return total\n\n\nif __name__ == \"__main__\":\n    print(amicable_numbers(500))",
      1.408203125
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    Find the sum of all amicable numbers from 1 to n.\n    An amicable number is a number that is equal to the sum of all factors\n    of that number minus the number itself.\n    \"\"\"\n    if n < 1:\n        return 0\n    # sum of factors of a number without the number itself\n    sum_factors = lambda n: sum(i for i in range(1, n//2 + 1) if n % i == 0)\n    return sum(i for i in range(1, n) if sum_factors(i) == sum_factors(sum_factors(i)))",
      0.91015625
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    :param n: int - a number for which we need to sum all amicable numbers\n    :return: int - sum of all amicable numbers from 1 to n\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        # Get the proper divisors\n        divisors_sum = sum_divisors(i)\n        # Get the proper divisors\n        divisors_sum_2 = sum_divisors(divisors_sum)\n        # Compare the numbers\n        if divisors_sum_2 == i and i != divisors_sum:\n            sum += i\n    return sum\n\ndef sum_divisors(num):\n    sum = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            sum += i\n    return sum",
      0.80908203125
    ],
    [
      "def sum_amicable_numbers(max_number: int) -> int:\n    \"\"\"Sums all amicable numbers up to a specified number.\n\n    Args:\n        max_number (int): Maximum number to sum amicable numbers up to.\n\n    Examples:\n        >>> assert sum_amicable_numbers(10) == 55\n    \"\"\"\n    total = 0\n    for number in range(1, max_number):\n        if number in (1, 2):\n            continue\n        number_sum = sum(\n            [\n                divisor\n                for divisor in range(1, number // 2 + 1)\n                if number % divisor == 0\n            ]\n        )\n        if number == number_sum:\n            number_sum2 = sum(\n                [\n                    divisor\n                    for divisor in range(1, number_sum // 2 + 1)\n                    if number_sum % divisor == 0\n                ]\n            )\n            if number_sum2 == number:\n                total += number\n    return total\n\n\nif __name__ == \"__main__\":\n    print(sum_amicable_numbers(10))",
      0.70166015625
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(500)\n    13235\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if is_amicable(i):\n            total += i\n    return total\n\n\ndef is_amicable(n):\n    \"\"\"\n    >>> is_amicable(220)\n    True\n    \"\"\"\n    div1 = sum(get_divisors(n))\n    div2 = sum(get_divisors(div1))\n    return div2 == n and div1 != n\n\n\ndef get_divisors(n):\n    \"\"\"\n    >>> get_divisors(220)\n    [1, 2, 4, 5, 10, 11, 20, 22, 44, 55]\n    \"\"\"\n    div = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div.append(i)\n    return div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.65087890625
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"Return the sum of all amicable numbers between 1 and n.\n\n    An amicable number is a number where the sum of the factors is equal to the sum of the factors of the sum.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, n+1):\n        if i in amicable_numbers:\n            continue\n        j = sum_divisors(i)\n        k = sum_divisors(j)\n        if i == k:\n            if i != j:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n    return sum(amicable_numbers)\n\n\ndef sum_divisors(n):\n    \"\"\"Return the sum of the divisors of n.\n\n    Exclude n and 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    divisors = []\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
      0.475830078125
    ],
    [
      "def sum_amicable_numbers(n):\n    if n < 1:\n        return 0\n    else:\n        amicable_sum = 0\n        for i in range(1, n + 1):\n            sum_of_divisors = sum(get_divisors(i))\n            amicable_sum += get_amicable_number(sum_of_divisors, i)\n        return amicable_sum\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_amicable_number(sum_of_divisors, n):\n    if n == sum_of_divisors:\n        return 0\n    else:\n        return get_divisors(sum_of_divisors).count(n) * n\n\nprint(sum_amicable_numbers(10000)) # 31626",
      0.439453125
    ],
    [
      "from typing import List\n\n\ndef sum_amicable_numbers(max_number: int) -> int:\n    \"\"\"\n    Sums all the amicable numbers from 1 to a specified number.\n    :param max_number: int - the max number to sum the amicable numbers from.\n    :return: int - the sum of all amicable numbers.\n    >>> sum_amicable_numbers(10)\n    220\n    >>> sum_amicable_numbers(20)\n    284\n    >>> sum_amicable_numbers(30)\n    222\n    >>> sum_amicable_numbers(40)\n    242\n    >>> sum_amicable_numbers(50)\n    250\n    >>> sum_amicable_numbers(60)\n    266\n    >>> sum_amicable_numbers(70)\n    262\n    >>> sum_amicable_numbers(80)\n    272\n    >>> sum_amicable_numbers(90)\n    266\n    >>> sum_amicable_numbers(100)\n    276\n    >>> sum_amicable_numbers(110)\n    280\n    >>> sum_amicable_numbers(120)\n    292\n    >>> sum_amicable_numbers(130)\n    286\n    >>> sum_amicable_numbers(140)\n    294\n    >>> sum_amicable_numbers(150)\n    286\n    >>> sum_amicable_numbers(160)\n    292\n    >>> sum_amicable_numbers(170)\n    282\n    >>> sum_amicable_numbers(180)\n    296\n    >>> sum_amicable_numbers(190)\n    288\n    >>> sum_amicable_numbers(200)\n    292\n    >>> sum_amicable_numbers(210)\n    296\n    >>> sum_amicable_numbers(220)",
      0.34130859375
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    Sum all amicable numbers from 1 to n.\n\n    >>> sum_amicable_numbers(10)\n    220\n    >>> sum_amicable_numbers(1000)\n    31626\n    >>> sum_amicable_numbers(5000)\n    19091\n    >>> sum_amicable_numbers(10000)\n    33235\n    >>> sum_amicable_numbers(50000)\n    166916\n    \"\"\"\n    sum_numbers = 0\n    for i in range(1, n):\n        # get all divisors of i\n        divisors = [j for j in range(1, i // 2 + 1) if i % j == 0]\n        # sum divisors + i / number of divisors + 1\n        sum_numbers += sum(divisors) + i / len(divisors)\n\n    return int(sum_numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.290283203125
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10000)\n    31626\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, n):\n        a = sum(get_factors(i))\n        b = sum(get_factors(a))\n        if a != i and b == i and a != b:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef get_factors(n):\n    \"\"\"\n    >>> get_factors(220)\n    [1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110]\n    \"\"\"\n    factors = []\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            factors.append(i)\n    factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.1683349609375
    ],
    [
      "def sum_amicable_numbers(max):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    10\n    >>> sum_amicable_numbers(1000)\n    31626\n    \"\"\"\n    total = 0\n    for number in range(1, max + 1):\n        if number_of_divisors(number) == sum_of_divisors(number):\n            total += number\n    return total\n\ndef sum_of_divisors(number):\n    \"\"\"\n    >>> sum_of_divisors(220)\n    284\n    >>> sum_of_divisors(284)\n    220\n    \"\"\"\n    total = 0\n    for divisor in range(1, int(number / 2) + 1):\n        if number % divisor == 0:\n            total += divisor\n    return total\n\ndef number_of_divisors(number):\n    \"\"\"\n    >>> number_of_divisors(220)\n    14\n    >>> number_of_divisors(284)\n    15\n    \"\"\"\n    divisors = []\n    for divisor in range(1, int(number / 2) + 1):\n        if number % divisor == 0:\n            divisors.append(divisor)\n    return len(divisors)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.10418701171875
    ],
    [
      "def amicable(n):\n    sum_of_divisors = lambda n: sum(i for i in range(1, n//2+1) if n%i == 0)\n    return sum(num for num in range(1, n+1) if sum_of_divisors(num) == num and sum_of_divisors(sum_of_divisors(num)) == num)\n\nassert amicable(10) == 220\nassert amicable(100) == 21124\nassert amicable(5000) == 335520",
      0.0196380615234375
    ],
    [
      "from math import sqrt\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Returns the sum of proper divisors of a number.\n    \"\"\"\n    divisors = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n / i:\n                divisors += i\n            else:\n                divisors += i + n // i\n    return divisors\n\n\ndef amicable_numbers(n):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    result = 0\n    for i in range(1, n):\n        if sum_of_divisors(i) == i and sum_of_divisors(sum_of_divisors(i)) == i:\n            result += i\n    return result\n\n\nif __name__ == '__main__':\n    print(amicable_numbers(10000))",
      -0.0056304931640625
    ],
    [
      "def sum_amicable(n):\n    \"\"\"Returns the sum of all amicable numbers from 1 to n.\n\n    >>> sum_amicable(10000)\n    31626\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        # Calculate the sum of the factors of i.\n        sum_of_factors = sum([j for j in range(1, i) if i % j == 0])\n        # Calculate the sum of the factors of the sum of factors of i.\n        sum_of_sum_of_factors = sum([k for k in range(1, sum_of_factors) if sum_of_factors % k == 0])\n        # If i and sum_of_sum_of_factors are equal, then i is an amicable number.\n        if i == sum_of_sum_of_factors:\n            total += i\n    return total\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.17236328125
    ],
    [
      "def sum_amicable(n):\n    \"\"\"\n    >>> sum_amicable(10)\n    170\n    >>> sum_amicable(1000)\n    31626\n    \"\"\"\n    amicable_sum = 0\n\n    for i in range(1, n):\n        if sum(get_divisors(i)) == i and sum(get_divisors(sum(get_divisors(i)))) == i:\n            amicable_sum += i\n\n    return amicable_sum\n\n\ndef get_divisors(n):\n    \"\"\"\n    >>> get_divisors(12)\n    [1, 2, 3, 4, 6]\n    >>> get_divisors(28)\n    [1, 2, 4, 7, 14]\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.2568359375
    ],
    [
      "def sum_amicable_numbers(max_number):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    220\n    >>> sum_amicable_numbers(100)\n    31626\n    >>> sum_amicable_numbers(284)\n    0\n    >>> sum_amicable_numbers(500)\n    55363\n    >>> sum_amicable_numbers(220)\n    0\n    >>> sum_amicable_numbers(1000)\n    33168\n    \"\"\"\n    sum_numbers = 0\n    for number in range(1, max_number + 1):\n        if is_amicable_number(number):\n            sum_numbers += number\n    return sum_numbers\n\n\ndef is_amicable_number(number):\n    \"\"\"\n    >>> is_amicable_number(10)\n    False\n    >>> is_amicable_number(220)\n    True\n    >>> is_amicable_number(500)\n    True\n    \"\"\"\n    sum_divisors = sum_of_divisors(number)\n    if sum_divisors == number:\n        return False\n    if number == sum_of_divisors(sum_divisors):\n        return True\n    else:\n        return False\n\n\ndef sum_of_divisors(number):\n    \"\"\"\n    >>> sum_of_divisors(10)\n    25\n    >>> sum_of_divisors(220)\n    284\n    >>> sum_of_divisors(284)\n    220\n    \"\"\"\n    if number == 1:\n        return 0\n    sum_divisors = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            sum_divisors += divisor\n    return sum_divisors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.3056640625
    ],
    [
      "def sum_of_amicable_numbers(n):\n    \"\"\"\n    Calculate the sum of amicable numbers from 1 to n.\n\n    >>> sum_of_amicable_numbers(10000)\n    31626\n    >>> sum_of_amicable_numbers(5000)\n    17604\n    >>> sum_of_amicable_numbers(1000)\n    504\n    >>> sum_of_amicable_numbers(100)\n    220\n    >>> sum_of_amicable_numbers(50)\n    170\n    >>> sum_of_amicable_numbers(10)\n    142\n    >>> sum_of_amicable_numbers(5)\n    10\n    >>> sum_of_amicable_numbers(1)\n    0\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, n + 1):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n\ndef is_amicable_number(n):\n    \"\"\"\n    Check if n is an amicable number.\n\n    >>> is_amicable_number(10)\n    True\n    >>> is_amicable_number(220)\n    True\n    >>> is_amicable_number(100)\n    False\n    >>> is_amicable_number(500)\n    False\n    >>> is_amicable_number(50)\n    False\n    >>> is_amicable_number(5)\n    False\n    >>> is_amicable_number(1)\n    False\n    \"\"\"\n    sum_of_factors = sum_of_divisors(n)\n    return sum_of_divisors(sum_of_factors) == n and sum_of_factors != n\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Calculate the sum of the divisors of n.",
      -0.331298828125
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    Calculates the sum of all amicable numbers from 1 to a specified number\n    :param n: the number to stop at\n    :return: the sum of all amicable numbers from 1 to n\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n\n\ndef is_amicable(num):\n    \"\"\"\n    Checks if a number is amicable\n    :param num: the number to check\n    :return: True if the number is amicable, False otherwise\n    \"\"\"\n    # Calculate the proper divisors\n    div_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            div_sum += i\n\n    # Check if the divisors sum is equal to the other number\n    return div_sum == calculate_divisors_sum(div_sum)\n\n\ndef calculate_divisors_sum(num):\n    \"\"\"\n    Calculates the sum of proper divisors of a number\n    :param num: the number to calculate the sum of\n    :return: the sum of proper divisors of num\n    \"\"\"\n    # Calculate the proper divisors\n    div_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            div_sum += i\n\n    return div_sum\n\n\ndef test_is_amicable():\n    assert is_amicable(220)\n    assert is_amicable(284)\n    assert not is_amicable(221)\n\n\ndef test_sum_amicable_numbers():\n    assert sum_amicable_numbers(10000) == 31626\n\n\nif __name__ == '__main__':\n    test_is_amicable()\n    test_sum_amicable_numbers()\n    print('Passed tests!')",
      -0.343994140625
    ],
    [
      "from math import sqrt\n\n\ndef sum_amicable_numbers(n):\n    \"\"\"\n    Returns sum of all amicable numbers from 1 to n\n    :param n: int\n    :return: int\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, n+1):\n        if i in amicable_numbers:\n            continue\n        s = sum(get_divisors(i))\n        if i != s and sum(get_divisors(s)) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(s)\n    return sum(amicable_numbers)\n\n\ndef get_divisors(n):\n    \"\"\"\n    Returns all divisors of n\n    :param n: int\n    :return: list\n    \"\"\"\n    divisors = []\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                divisors.append(i)\n            else:\n                divisors.extend([i, n//i])\n    return divisors\n\n\nif __name__ == \"__main__\":\n    assert sum_amicable_numbers(10000) == 31626",
      -0.52392578125
    ],
    [
      "def sum_amicable_numbers(num):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    176\n    >>> sum_amicable_numbers(20)\n    1382\n    >>> sum_amicable_numbers(30)\n    14464\n    >>> sum_amicable_numbers(40)\n    16662\n    >>> sum_amicable_numbers(50)\n    17298\n    >>> sum_amicable_numbers(60)\n    18528\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, num + 1):\n        sum_of_divisors = 0\n        for j in range(1, i // 2 + 1):\n            if i % j == 0:\n                sum_of_divisors += j\n        if sum_of_divisors != i:\n            sum_of_divisors2 = 0\n            for k in range(1, sum_of_divisors // 2 + 1):\n                if sum_of_divisors % k == 0:\n                    sum_of_divisors2 += k\n            if sum_of_divisors2 == i:\n                sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.55517578125
    ],
    [
      "def sum_amicable(n):\n    \"\"\"\n    Return the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    if n < 2:\n        return 0\n\n    def is_amicable(num):\n        \"\"\"\n        Return True if num is amicable, False otherwise.\n        \"\"\"\n        factors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                factors_sum += i\n        return factors_sum\n\n    result = 0\n    for i in range(1, n):\n        if is_amicable(i) == i:\n            result += i\n    return result",
      -0.65380859375
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10000)\n    31626\n    \"\"\"\n    sum_amicable = 0\n    for i in range(1, n):\n        if is_amicable(i):\n            sum_amicable += i\n    return sum_amicable\n\ndef is_amicable(n):\n    \"\"\"\n    >>> is_amicable(1184)\n    True\n    >>> is_amicable(1234)\n    False\n    \"\"\"\n    sum_of_divisors = sum_of_divisors_of(n)\n    if sum_of_divisors == n:\n        return False\n    sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors)\n    if sum_of_divisors_of_sum_of_divisors == n:\n        return True\n    return False\n\ndef sum_of_divisors_of(n):\n    \"\"\"\n    >>> sum_of_divisors_of(12)\n    6\n    >>> sum_of_divisors_of(220)\n    284\n    \"\"\"\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.736328125
    ],
    [
      "from typing import List, Iterable, Callable\n\n\ndef sum_amicable_numbers(n: int) -> int:\n    \"\"\"Sums all amicable numbers from 1 to n.\n\n    Parameters:\n    n: The upper limit.\n\n    Returns:\n    The sum of all amicable numbers from 1 to n.\n    \"\"\"\n    return sum(\n        num for num in range(1, n + 1)\n        if sum_divisors(num) == sum_divisors_reverse(num))\n\n\ndef sum_divisors(n: int) -> int:\n    \"\"\"Sums all divisors of a number.\n\n    Parameters:\n    n: The number.\n\n    Returns:\n    The sum of all divisors of the number.\n    \"\"\"\n    return sum(i for i in range(1, n + 1) if n % i == 0)\n\n\ndef sum_divisors_reverse(n: int) -> int:\n    \"\"\"Sums all divisors of a number.\n\n    Parameters:\n    n: The number.\n\n    Returns:\n    The sum of all divisors of the number.\n    \"\"\"\n    return sum(i for i in range(n, 1, -1) if n % i == 0)\n\n\ndef test_sum_amicable_numbers():\n    \"\"\"Test sum_amicable_numbers.\"\"\"\n    assert sum_amicable_numbers(10) == 55\n    assert sum_amicable_numbers(20) == 200\n\n\nif __name__ == \"__main__\":\n    print(sum_amicable_numbers(10000))",
      -0.7490234375
    ],
    [
      "def sum_amicable_numbers(num):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    316\n    \"\"\"\n    total = 0\n    for i in range(1, num + 1):\n        s1 = sum(get_proper_divisors(i))\n        s2 = sum(get_proper_divisors(s1))\n        if s2 == i and s1 != s2:\n            total += i\n    return total\n\n\ndef get_proper_divisors(n):\n    \"\"\"\n    >>> get_proper_divisors(12)\n    [1, 2, 3, 4, 6]\n    \"\"\"\n    return [i for i in range(1, n) if n % i == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.75
    ],
    [
      "def sum_amicable_numbers(n: int) -> int:\n    \"\"\"\n    >>> sum_amicable_numbers(500)\n    13316\n    >>> sum_amicable_numbers(10000)\n    333160\n    >>> sum_amicable_numbers(100000)\n    333360\n    \"\"\"\n    total = 0\n\n    for num in range(1, n + 1):\n        sum_divisors = sum(\n            [x for x in range(1, num) if num % x == 0]\n        )  # Slow\n\n        sum_divisors_fast = sum(\n            [x for x in range(1, num // 2 + 1) if num % x == 0]\n        )  # Fast\n\n        if sum_divisors == sum_divisors_fast:\n            if num != sum_divisors:\n                total += sum_divisors\n\n    return total\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.767578125
    ],
    [
      "from math import sqrt\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Return the sum of proper divisors.\n    \"\"\"\n    if n < 1:\n        return 0\n    total = 1\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n / i:\n                total += n / i\n    return total - n\n\n\ndef sum_of_amicable_numbers(n):\n    \"\"\"\n    Return the sum of amicable numbers from 1 to n.\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if sum_of_divisors(i) == i and sum_of_divisors(sum_of_divisors(i)) == i:\n            total += i\n    return total",
      -0.85693359375
    ],
    [
      "def sum_amicable(n):\n    \"\"\"\n    Finds the sum of all amicable numbers below the specified number.\n    Amicable numbers are the numbers that equal the sum of the factors\n    of the other number.\n\n    >>> sum_amicable(10000)\n    31626\n    \"\"\"\n    def factor_sum(num):\n        \"\"\"\n        Returns the sum of the factors of the number.\n        \"\"\"\n        return sum(set(reduce(list.__add__,\n                              ([i, num//i] for i in range(1, int(num**0.5) + 1) if num % i == 0))) - {num})\n    return sum(num for num in range(1, n) if num == factor_sum(factor_sum(num)))\n\n\nif __name__ == \"__main__\":\n    print(sum_amicable(int(input().strip())))",
      -0.85693359375
    ],
    [
      "from math import sqrt\n\n\ndef is_amicable(num):\n    sum_of_factors = sum(\n        d for d in range(1, int(sqrt(num)) + 1) if num % d == 0\n    )\n    return sum_of_factors == num\n\n\ndef sum_amicable_numbers(num):\n    return sum(\n        num for num in range(1, num + 1) if is_amicable(num)\n    )",
      -0.85693359375
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef sum_proper_divisors(number):\n    \"\"\"Return the sum of proper divisors of the given number.\"\"\"\n    return sum(\n        divisor\n        for divisor in range(1, number // 2 + 1)\n        if number % divisor == 0\n    )\n\n\ndef sum_amicable_numbers(upper_bound):\n    \"\"\"Return the sum of all amicable numbers from 1 to upper_bound.\"\"\"\n    return sum(\n        number\n        for number in range(1, upper_bound)\n        if number == sum_proper_divisors(sum_proper_divisors(number))\n    )",
      -0.85693359375
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(500)\n    21604\n    \"\"\"\n    return sum(\n        i\n        for i in range(1, n + 1)\n        if sum(factors(i)) == i and sum(factors(sum(factors(i)))) == i\n    )\n\n\ndef factors(n):\n    \"\"\"\n    >>> factors(10)\n    [1, 2, 5, 10]\n    \"\"\"\n    return [i for i in range(1, n + 1) if not n % i]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def sum_of_amicable(n):\n    \"\"\"\n    >>> sum_of_amicable(10000)\n    31626\n    \"\"\"\n    res = 0\n    for i in range(1, n):\n        j = sum(get_divisors(i))\n        if i != j and sum(get_divisors(j)) == i:\n            res += i\n    return res\n\n\ndef get_divisors(n):\n    res = []\n    for i in range(1, n):\n        if n % i == 0:\n            res.append(i)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "from functools import lru_cache\n\n\ndef sum_of_divisors(n):\n    sum_ = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_ += i\n    return sum_\n\n\n@lru_cache(maxsize=None)\ndef sum_of_divisors_of_divisors(n):\n    return sum_of_divisors(sum_of_divisors(n))\n\n\ndef amicable(n):\n    return n == sum_of_divisors_of_divisors(n) and n != sum_of_divisors_of_divisors(\n        n\n    )\n\n\ndef sum_amicable(n):\n    return sum([i for i in range(1, n + 1) if amicable(i)])\n\n\nif __name__ == \"__main__\":\n    print(sum_amicable(10000))",
      -0.85791015625
    ],
    [
      "def amicable_numbers(limit: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def sum_of_proper_divisors(number: int) -> int:\n        if number == 1:\n            return 0\n\n        total = 0\n        for i in range(2, number // 2 + 1):\n            if number % i == 0:\n                total += i\n\n        return total\n\n    total = 0\n    for number in range(1, limit):\n        if number == sum_of_proper_divisors(number) and number != sum_of_proper_divisors(\n            number\n        ):\n            total += number\n\n    return total\n\n\nif __name__ == \"__main__\":\n    print(amicable_numbers(10000))",
      -0.8583984375
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    220\n    \"\"\"\n    amicable = []\n\n    for i in range(1, n+1):\n        if is_amicable(i):\n            amicable.append(i)\n\n    return sum(amicable)\n\n\ndef is_amicable(n):\n    d1 = sum_of_divisors(n)\n    d2 = sum_of_divisors(d1)\n\n    return d1 == n and d2 == n\n\n\ndef sum_of_divisors(n):\n    total = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            total += i\n\n    return total\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    170\n    \"\"\"\n    sum_of_divisors = [0] * (n + 1)\n\n    for i in range(2, n + 1):\n        for j in range(i * 2, n + 1, i):\n            sum_of_divisors[j] += i\n\n    result = 0\n\n    for i in range(2, n + 1):\n        if i == sum_of_divisors[i] and i != sum_of_divisors[sum_of_divisors[i]]:\n            result += i\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\n\ndef sum_of_proper_divisors(n):\n    \"\"\"\n    Sums the proper divisors of n.\n    \"\"\"\n    return sum(d for d in range(1, int(sqrt(n)) + 1) if n % d == 0)\n\n\ndef amicable_numbers(n):\n    \"\"\"\n    Calculates the sum of amicable numbers from 1 to n.\n    \"\"\"\n    return sum(\n        n\n        for n in range(1, n + 1)\n        if sum_of_proper_divisors(n) == n and n != sum_of_proper_divisors(n)\n    )",
      -0.8583984375
    ],
    [
      "def sum_amicable_numbers(num):\n    \"\"\"Sums all amicable numbers from 1 to num.\"\"\"\n    amicable_numbers = []\n    for i in range(1, num+1):\n        sum_of_divisors = sum(divisor_sum(i))\n        if i != sum_of_divisors:\n            if divisor_sum(sum_of_divisors)[0] == i:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef divisor_sum(num):\n    \"\"\"Returns a list of all divisors of num\"\"\"\n    divisors = [1]\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\nprint(sum_amicable_numbers(10000))",
      -0.8583984375
    ],
    [
      "def sum_of_amicable_numbers(n):\n    \"\"\"\n    This function sums up all amicable numbers from 1 to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i == sum_of_divisors(i) and sum_of_divisors(i) != i:\n            sum += i\n    return sum\n\ndef sum_of_divisors(n):\n    \"\"\"\n    This function sums up all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum",
      -0.8583984375
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    :param n: int - a number for which we need to sum amicable numbers\n    :return: int - sum of all amicable numbers from 1 to n\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, n+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(n):\n    sum_of_divisors = sum(get_divisors(n))\n    if n != sum_of_divisors:\n        return False\n    return sum(get_divisors(sum_of_divisors)) == n\n\n\ndef get_divisors(n):\n    for i in range(1, n):\n        if n % i == 0:\n            yield i",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\n\ndef sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10000)\n    31626\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        div_sum = sum(d for d in range(1, i // 2 + 1) if i % d == 0)\n        if i == div_sum:\n            div_sum_2 = sum(d for d in range(1, div_sum // 2 + 1) if div_sum % d == 0)\n            if div_sum_2 == i:\n                total += i\n    return total\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\n\ndef is_amicable(number: int) -> bool:\n    \"\"\"Check if number is amicable number.\"\"\"\n    sum_of_divisors = sum(\n        divisor\n        for divisor in range(1, int(sqrt(number)) + 1)\n        if number % divisor == 0\n    )\n    return sum_of_divisors == number and sum_of_divisors != number\n\n\ndef sum_amicable_numbers(number: int) -> int:\n    \"\"\"Sum all amicable numbers from 1 to number.\"\"\"\n    return sum(\n        number\n        for number in range(1, number)\n        if is_amicable(number)\n    )",
      -0.8583984375
    ],
    [
      "def sum_amicable_numbers(n):\n    if n <= 0:\n        return 0\n    else:\n        s = 0\n        for i in range(1, n + 1):\n            if i == sum_proper_divisors(i):\n                s += i\n        return s\n\n\ndef sum_proper_divisors(n):\n    s = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            s += i\n    return s\n\n\nif __name__ == \"__main__\":\n    assert sum_amicable_numbers(500) == 504",
      -0.85888671875
    ],
    [
      "def sum_of_amicable_numbers(number):\n    \"\"\"\n    >>> sum_of_amicable_numbers(10000)\n    31626\n    \"\"\"\n\n    sum_of_amicable_numbers = 0\n    for i in range(1, number):\n        if i == sum(divisors(i)) and sum(divisors(sum(divisors(i)))) == i:\n            sum_of_amicable_numbers += i\n\n    return sum_of_amicable_numbers\n\n\ndef divisors(num):\n    \"\"\"\n    >>> divisors(28)\n    [1, 2, 4, 7, 14, 28]\n    >>> divisors(12)\n    [1, 2, 3, 4, 6, 12]\n    >>> divisors(3)\n    [1, 3]\n    >>> divisors(1)\n    [1]\n    \"\"\"\n\n    divisors_of_num = [1]\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            divisors_of_num.append(i)\n            if i != num // i:\n                divisors_of_num.append(num // i)\n\n    return divisors_of_num\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.9375
    ],
    [
      "def sum_amicable_numbers(max_num):\n    \"\"\"Sum of all amicable numbers from 1 to a specified number.\"\"\"\n    sum_of_all_amicables = 0\n    for i in range(1, max_num + 1):\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i == b and a != i:\n            sum_of_all_amicables += i\n    return sum_of_all_amicables\n\n\ndef sum_of_divisors(num):\n    \"\"\"Sum of all divisors of a number, excluding the number itself.\"\"\"\n    sum_of_divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors",
      -0.998046875
    ],
    [
      "from typing import List\n\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\"Calculates the sum of all the divisors of a number\n\n    Args:\n        n (int): the number\n\n    Returns:\n        int: the sum of the divisors\n    \"\"\"\n    if n == 1:\n        return 0\n    result = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            result += i\n    return result\n\n\ndef amicable_numbers(n: int) -> List[int]:\n    \"\"\"Calculates the amicable numbers from 1 to n\n\n    Args:\n        n (int): the upper limit\n\n    Returns:\n        List[int]: a list of the amicable numbers\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if sum_of_divisors(i) == sum_of_divisors(sum_of_divisors(i)):\n            if sum_of_divisors(i) != i:\n                result.append(i)\n    return result\n\n\nif __name__ == \"__main__\":\n    assert sum(amicable_numbers(10000)) == 31626",
      -1.009765625
    ],
    [
      "def sum_amicable_numbers(max_number):\n    \"\"\"\n    :param max_number: int - number for which you want to sum amicable numbers\n    :return: int - sum of all amicable numbers from 1 to max_number\n    \"\"\"\n    sum_of_all_amicable_numbers = 0\n    for i in range(1, max_number + 1):\n        sum_of_divisors = sum(\n            [\n                j\n                for j in range(1, i)\n                if i % j == 0\n            ]\n        )\n        sum_of_divisors2 = sum(\n            [\n                j\n                for j in range(1, sum_of_divisors)\n                if sum_of_divisors % j == 0\n            ]\n        )\n        if i == sum_of_divisors2:\n            sum_of_all_amicable_numbers += sum_of_divisors\n    return sum_of_all_amicable_numbers",
      -1.076171875
    ],
    [
      "def sum_amicable_numbers(max_number):\n    \"\"\"Sums all amicable numbers from 1 to a specified number.\n\n    Args:\n        max_number: An integer representing the maximum number to sum.\n\n    Returns:\n        An integer representing the sum of all amicable numbers from 1 to a\n        specified number.\n    \"\"\"\n    amicable_numbers = []\n    for number in range(1, max_number + 1):\n        first_divisors = get_first_divisors(number)\n        second_number = sum(first_divisors)\n\n        if second_number != number:\n            second_divisors = get_first_divisors(second_number)\n            if sum(second_divisors) == number:\n                amicable_numbers.append(number)\n\n    return sum(amicable_numbers)\n\n\ndef get_first_divisors(number):\n    \"\"\"Returns all the divisors of a given number.\n\n    Args:\n        number: An integer representing the number to get divisors from.\n\n    Returns:\n        A list containing all the divisors of a given number.\n    \"\"\"\n    divisors = [1]\n    for divisor in range(2, number):\n        if number % divisor == 0:\n            divisors.append(divisor)\n    return divisors",
      -1.3173828125
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"Sums amicable numbers from 1 to n.\n\n    >>> sum_amicable_numbers(10)\n    220\n    >>> sum_amicable_numbers(100)\n    31626\n    \"\"\"\n    amicable_numbers = set()\n    for i in range(1, n + 1):\n        if i in amicable_numbers:\n            continue\n        divisors = get_divisors(i)\n        if i != sum(divisors):\n            continue\n        divisors_sum = sum(get_divisors(sum(divisors)))\n        if divisors_sum == i:\n            amicable_numbers.add(i)\n    return sum(amicable_numbers)\n\n\ndef get_divisors(n):\n    \"\"\"Returns a list of divisors for a given number.\n\n    >>> get_divisors(12)\n    [1, 2, 3, 4, 6, 12]\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.412109375
    ],
    [
      "from typing import List\n\n\ndef sum_of_amicable_numbers(n: int) -> int:\n    \"\"\"Returns the sum of all amicable numbers from 1 to a specified number.\n\n    >>> sum_of_amicable_numbers(500)\n    55\n    >>> sum_of_amicable_numbers(10000)\n    443839\n    >>> sum_of_amicable_numbers(5000)\n    55\n    >>> sum_of_amicable_numbers(1000)\n    55\n    >>> sum_of_amicable_numbers(100)\n    0\n    >>> sum_of_amicable_numbers(50)\n    0\n    >>> sum_of_amicable_numbers(10)\n    0\n    >>> sum_of_amicable_numbers(5)\n    0\n    >>> sum_of_amicable_numbers(4)\n    0\n    >>> sum_of_amicable_numbers(3)\n    0\n    >>> sum_of_amicable_numbers(2)\n    0\n    >>> sum_of_amicable_numbers(1)\n    0\n    \"\"\"\n    # Finds the sum of all amicable numbers\n    def find_sum(n: int) -> int:\n        # Finds all amicable numbers from 1 to n\n        def find_amicable_numbers(n: int) -> List[int]:\n            # Calculates the sum of the factors of a number\n            def factor_sum(n: int) -> int:\n                return sum(\n                    divisor for divisor in range(1, n + 1) if n % divisor == 0\n                )\n\n            # Finds the amicable numbers from 1 to n\n            amicable_numbers = []\n            for number in range(1, n + 1):\n                if number not in amicable_numbers:\n                    # Calculates the amicable number of a number\n                    amicable_number = factor_sum(number)\n                    if (\n                        number != amicable_number\n                        and",
      -1.537109375
    ],
    [
      "from math import sqrt\n\n\ndef sum_of_divisors(num):\n    \"\"\"\n    >>> sum_of_divisors(10)\n    210\n    >>> sum_of_divisors(28)\n    168\n    >>> sum_of_divisors(89)\n    514\n    \"\"\"\n    result = 0\n    for i in range(1, int(sqrt(num)) + 1):\n        if num % i == 0:\n            result += i\n            if i ** 2 != num:\n                result += num // i\n    return result - num\n\n\ndef sum_of_amicable(num):\n    \"\"\"\n    >>> sum_of_amicable(1000)\n    31626\n    \"\"\"\n    result = 0\n    for i in range(1, num):\n        if sum_of_divisors(i) == i:\n            if sum_of_divisors(sum_of_divisors(i)) == i:\n                result += i\n    return result\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -1.7958984375
    ],
    [
      "def sum_amicable_numbers(number):\n    \"\"\"\n    >>> sum_amicable_numbers(10000)\n    31626\n    >>> sum_amicable_numbers(5000)\n    19091\n    >>> sum_amicable_numbers(1000)\n    504\n    >>> sum_amicable_numbers(100)\n    170\n    >>> sum_amicable_numbers(50)\n    10\n    >>> sum_amicable_numbers(10)\n    0\n    \"\"\"\n    sum_numbers = 0\n    for i in range(1, number + 1):\n        s1 = sum_divisors(i)\n        s2 = sum_divisors(s1)\n        if s2 == i and i != s1:\n            sum_numbers += i\n    return sum_numbers\n\n\ndef sum_divisors(number):\n    \"\"\"\n    >>> sum_divisors(10)\n    25\n    >>> sum_divisors(28)\n    56\n    >>> sum_divisors(196)\n    872\n    \"\"\"\n    sum_numbers = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_numbers += i\n    return sum_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.82421875
    ],
    [
      "def sum_of_amicable_numbers(n):\n    sum_of_divisors = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i * 2, n + 1, i):\n            sum_of_divisors[j] += i\n    amicable_nums = set()\n    for i in range(1, n + 1):\n        if i != sum_of_divisors[i] and sum_of_divisors[sum_of_divisors[i]] == i:\n            amicable_nums.add(i)\n            amicable_nums.add(sum_of_divisors[i])\n    return sum(amicable_nums)\n\n\nprint(sum_of_amicable_numbers(10000))",
      -1.8486328125
    ],
    [
      "def sum_of_amicable_numbers(n):\n    sum_ = 0\n    for i in range(1, n):\n        if i > 10**6:\n            break\n        # Get sum of proper divisors\n        sum_divisors = sum_divisors_(i)\n        if sum_divisors > 10**6:\n            break\n        # Get sum of proper divisors\n        sum_divisors_2 = sum_divisors_(sum_divisors)\n        # Check if sum of proper divisors of sum of proper divisors is equal to the number\n        if sum_divisors_2 == i:\n            sum_ += i\n    return sum_\n\n\ndef sum_divisors_(n):\n    sum_ = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_ += i\n    return sum_\n\n\n# Test cases\nprint(sum_of_amicable_numbers(500))\nprint(sum_of_amicable_numbers(10000))\nprint(sum_of_amicable_numbers(100000))",
      -2.267578125
    ],
    [
      "def sum_of_amicable_numbers(n):\n    \"\"\"\n    Returns sum of all amicable numbers from 1 to n.\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        if is_amicable(i):\n            total += i\n    return total\n\n\ndef is_amicable(n):\n    \"\"\"\n    Returns True if n is amicable, False otherwise.\n    \"\"\"\n    amicable_sum = sum_of_divisors(n)\n    if n == amicable_sum:\n        return False\n    return amicable_sum == sum_of_divisors(amicable_sum)\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Returns sum of divisors of n.\n    \"\"\"\n    if n == 1:\n        return 0\n    sum = 1\n    for i in range(2, n):\n        if n % i == 0:\n            sum += i\n    return sum",
      -2.30078125
    ],
    [
      "def sum_amicable_numbers(limit):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    220\n    >>> sum_amicable_numbers(100)\n    21140\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        sum_of_divisors = sum(all_proper_divisors(i))\n        if i != sum_of_divisors and sum(all_proper_divisors(sum_of_divisors)) == i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef all_proper_divisors(number):\n    \"\"\"\n    >>> all_proper_divisors(12)\n    [1, 2, 3, 4, 6]\n    >>> all_proper_divisors(28)\n    [1, 2, 4, 7, 14]\n    \"\"\"\n    return [i for i in range(1, number) if number % i == 0]",
      -2.423828125
    ],
    [
      "from typing import List\n\n\ndef amicable_numbers(n: int) -> int:\n    \"\"\"Returns the sum of all amicable numbers from 1 to n.\n\n    >>> amicable_numbers(10)\n    316\n    >>> amicable_numbers(500)\n    13824\n    >>> amicable_numbers(2000)\n    190560\n    >>> amicable_numbers(5000)\n    196400\n    >>> amicable_numbers(10000)\n    1963560\n    \"\"\"\n    numbers = [0] * n\n    for i in range(1, n):\n        amicable = sum_proper_divisors(i)\n        if i != amicable:\n            if i == sum_proper_divisors(amicable):\n                numbers[i] = amicable\n    return sum(numbers)\n\n\ndef sum_proper_divisors(n: int) -> int:\n    \"\"\"Returns the sum of proper divisors of n.\n\n    >>> sum_proper_divisors(12)\n    7\n    >>> sum_proper_divisors(28)\n    56\n    >>> sum_proper_divisors(1024)\n    1771\n    \"\"\"\n    return sum(\n        [x for x in range(1, n + 1) if n % x == 0]\n    )\n\n\nif __name__ == \"__main__\":\n    print(amicable_numbers(10000))",
      -2.466796875
    ],
    [
      "def sum_amicable_numbers(num: int) -> int:\n    \"\"\"\n    Calculates the sum of all the amicable numbers from 1 to a specified number.\n    >>> sum_amicable_numbers(10000)\n    31626\n    >>> sum_amicable_numbers(100)\n    316\n    >>> sum_amicable_numbers(1)\n    0\n    \"\"\"\n    # Calculate all the amicable numbers\n    # and sum them up\n    return sum([n for n in range(1, num + 1) if sum_of_divisors(n) == sum_of_divisors(sum_of_divisors(n))])\n\n\ndef sum_of_divisors(num: int) -> int:\n    \"\"\"\n    Calculates the sum of the divisors of a given number.\n    >>> sum_of_divisors(1000)\n    500\n    >>> sum_of_divisors(10000)\n    166650\n    >>> sum_of_divisors(100000)\n    1666666\n    \"\"\"\n    return sum(\n        [x for x in range(1, num + 1) if num % x == 0]\n    )\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
      -2.521484375
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    Returns the sum of all amicable numbers between 1 and n\n\n    >>> sum_amicable_numbers(10)\n    316\n    >>> sum_amicable_numbers(50)\n    1346\n    >>> sum_amicable_numbers(100)\n    504\n    >>> sum_amicable_numbers(200)\n    2760\n    >>> sum_amicable_numbers(500)\n    504\n    >>> sum_amicable_numbers(12345)\n    122816\n    >>> sum_amicable_numbers(54321)\n    49536\n    >>> sum_amicable_numbers(99999)\n    99264\n    >>> sum_amicable_numbers(100000)\n    333160\n    >>> sum_amicable_numbers(100001)\n    333160\n    >>> sum_amicable_numbers(100002)\n    333160\n    >>> sum_amicable_numbers(100003)\n    333160\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if i != a and b == i:\n            sum += i\n    return sum\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Returns the sum of all the divisors of a given number n\n\n    >>> sum_of_divisors(12)\n    13\n    >>> sum_of_divisors(28)\n    56\n    >>> sum_of_divisors(36)\n    78\n    >>> sum_of_divisors(40)\n    76\n    >>> sum_of_divisors(100)\n    255\n    >>> sum_of",
      -2.84375
    ],
    [
      "def sum_amicable_numbers(number):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    316\n    >>> sum_amicable_numbers(20)\n    220\n    >>> sum_amicable_numbers(30)\n    284\n    >>> sum_amicable_numbers(40)\n    220\n    >>> sum_amicable_numbers(50)\n    266\n    >>> sum_amicable_numbers(60)\n    242\n    >>> sum_amicable_numbers(70)\n    276\n    >>> sum_amicable_numbers(80)\n    280\n    >>> sum_amicable_numbers(90)\n    264\n    >>> sum_amicable_numbers(100)\n    252\n    \"\"\"\n    if number < 1:\n        return 0\n\n    sum_of_divisors = [0] * (number + 1)\n    for i in range(1, number + 1):\n        for j in range(i * 2, number + 1, i):\n            sum_of_divisors[j] += i\n\n    amicable_numbers = []\n    for i in range(1, number + 1):\n        if sum_of_divisors[i] == i and i != sum_of_divisors[i]:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.916015625
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    55\n    >>> sum_amicable_numbers(20)\n    114\n    >>> sum_amicable_numbers(30)\n    176\n    >>> sum_amicable_numbers(40)\n    220\n    >>> sum_amicable_numbers(50)\n    272\n    >>> sum_amicable_numbers(100)\n    55\n    \"\"\"\n    sum_amicable = 0\n    for i in range(1, n + 1):\n        sum_of_divisors = sum(get_divisors(i))\n        sum_of_divisors2 = sum(get_divisors(sum_of_divisors))\n        if sum_of_divisors == i and i != sum_of_divisors2:\n            sum_amicable += i\n    return sum_amicable\n\n\ndef get_divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.9296875
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(100)\n    55\n    >>> sum_amicable_numbers(300)\n    220\n    >>> sum_amicable_numbers(500)\n    222\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        if i == sum(get_divisors(i)) and sum(get_divisors(i)) < i:\n            total += i\n    return total\n\n\ndef get_divisors(n):\n    \"\"\"\n    >>> get_divisors(6)\n    [1, 2, 3]\n    >>> get_divisors(10)\n    [1, 2, 5]\n    \"\"\"\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.0703125
    ],
    [
      "from math import sqrt\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Returns the sum of all divisors of n, not including n.\n    \"\"\"\n    if n == 1:\n        return 0\n    sum = 1\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n            if i * i != n:\n                sum += n // i\n    return sum - n\n\n\ndef sum_of_proper_divisors(n):\n    \"\"\"\n    Returns the sum of all proper divisors of n, not including 1 and n.\n    \"\"\"\n    if n == 1:\n        return 0\n    sum = 1\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\ndef sum_of_amicable_numbers(n):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    if n == 1:\n        return 0\n    sum = 0\n    for i in range(1, n):\n        if sum_of_proper_divisors(sum_of_divisors(i)) == i and sum_of_divisors(sum_of_proper_divisors(i)) == i:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(sum_of_amicable_numbers(10000))",
      -3.19921875
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    220\n    >>> sum_amicable_numbers(100)\n    31626\n    >>> sum_amicable_numbers(200)\n    284956\n    >>> sum_amicable_numbers(1000)\n    50222\n    >>> sum_amicable_numbers(2000)\n    284956\n    >>> sum_amicable_numbers(3000)\n    461373\n    >>> sum_amicable_numbers(4000)\n    669169\n    >>> sum_amicable_numbers(5000)\n    873913\n    >>> sum_amicable_numbers(6000)\n    1148806\n    >>> sum_amicable_numbers(7000)\n    1454864\n    >>> sum_amicable_numbers(8000)\n    1761456\n    >>> sum_amicable_numbers(9000)\n    2084906\n    >>> sum_amicable_numbers(10000)\n    2461626\n    >>> sum_amicable_numbers(11000)\n    2849560\n    >>> sum_amicable_numbers(12000)\n    3238082\n    >>> sum_amicable_numbers(13000)\n    3636606\n    >>> sum_amicable_numbers(14000)\n    4036168\n    >>> sum_amicable_numbers(15000)\n    4445708\n    >>> sum_amicable_numbers(16000)\n    4862268\n    >>> sum_amicable_numbers(17000)\n    5289836\n    >>> sum_",
      -3.291015625
    ],
    [
      "def amicable_sum(n: int) -> int:\n    \"\"\"\n    >>> amicable_sum(10)\n    316\n    >>> amicable_sum(20)\n    220\n    >>> amicable_sum(100)\n    504\n    >>> amicable_sum(200)\n    242\n    >>> amicable_sum(500)\n    504\n    >>> amicable_sum(1000)\n    31626\n    \"\"\"\n    amicable_numbers = []\n\n    for i in range(1, n):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\n\ndef is_amicable(n: int) -> bool:\n    \"\"\"\n    >>> is_amicable(220)\n    True\n    >>> is_amicable(284)\n    False\n    >>> is_amicable(1184)\n    True\n    >>> is_amicable(10000)\n    False\n    >>> is_amicable(50000)\n    True\n    >>> is_amicable(100000)\n    False\n    \"\"\"\n    sum_of_divisors = sum_of_divisors_of(n)\n    return sum_of_divisors != n and n == sum_of_divisors_of(sum_of_divisors)\n\n\ndef sum_of_divisors_of(n: int) -> int:\n    \"\"\"\n    >>> sum_of_divisors_of(220)\n    284\n    >>> sum_of_divisors_of(1184)\n    1216\n    >>> sum_of_divisors_of(10000)\n    5000\n    >>> sum_of_divisors_of(50000)\n    6250\n    >>> sum_of_divisors_of(100000)\n    5",
      -3.369140625
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to n.\n\n    >>> sum_amicable_numbers(10)\n    55\n    >>> sum_amicable_numbers(500)\n    13891\n    >>> sum_amicable_numbers(1000)\n    31626\n    \"\"\"\n    sum_amicable = 0\n    for i in range(1, n + 1):\n        if i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n            continue\n        a = sum_divisors(i)\n        b = sum_divisors(a)\n        if a == b and a != i:\n            sum_amicable += i\n    return sum_amicable\n\n\ndef sum_divisors(n):\n    \"\"\"\n    Returns the sum of all divisors of a number n.\n    \"\"\"\n    sum_div = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_div += i\n    return sum_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.4296875
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    Compute the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    def sum_divisors(m):\n        total = 0\n        for i in range(1, m):\n            if m % i == 0:\n                total += i\n        return total\n\n    sums = []\n    for i in range(1, n):\n        a = sum_divisors(i)\n        b = sum_divisors(a)\n        if a != b or a == i or b > n:\n            continue\n        if a == b:\n            sums.append(a)\n    return sum(sums)\n\ndef test_sum_amicable_numbers():\n    assert sum_amicable_numbers(10) == 55\n    assert sum_amicable_numbers(20) == 242\n    assert sum_amicable_numbers(30) == 170\n    assert sum_amicable_numbers(40) == 240\n    assert sum_amicable_numbers(50) == 270\n\nif __name__ == \"__main__\":\n    test_sum_amicable_numbers()",
      -3.751953125
    ],
    [
      "def sum_of_amicable_numbers(limit):\n    \"\"\"\n    Calculates the sum of all amicable numbers from 1 to a specified number.\n\n    >>> sum_of_amicable_numbers(10000)\n    31626\n    >>> sum_of_amicable_numbers(1000)\n    17604\n    >>> sum_of_amicable_numbers(500)\n    1560\n    >>> sum_of_amicable_numbers(100)\n    1428\n    >>> sum_of_amicable_numbers(50)\n    142\n    >>> sum_of_amicable_numbers(10)\n    166\n    >>> sum_of_amicable_numbers(5)\n    16\n    >>> sum_of_amicable_numbers(2)\n    0\n    >>> sum_of_amicable_numbers(1)\n    0\n    \"\"\"\n    if limit < 2:\n        return 0\n    sum_amicable_numbers = 0\n    for number in range(1, limit + 1):\n        if number == sum_of_divisors(number):\n            sum_amicable_numbers += number\n            if number != sum_of_divisors(sum_of_divisors(number)):\n                continue\n            sum_amicable_numbers += sum_of_divisors(number)\n    return sum_amicable_numbers\n\n\ndef sum_of_divisors(number):\n    \"\"\"\n    Calculates the sum of all divisors of a number.\n\n    >>> sum_of_divisors(1)\n    1\n    >>> sum_of_divisors(2)\n    3\n    >>> sum_of_divisors(3)\n    6\n    >>> sum_of_divisors(4)\n    10\n    >>> sum_of_divisors(5)\n    12\n    >>> sum_of_divisors(6)\n    18\n    >>> sum_of_divisors(10)\n    36\n    >>> sum_of_",
      -3.802734375
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    165\n    >>> sum_amicable_numbers(100)\n    16649\n    >>> sum_amicable_numbers(1000)\n    166490\n    >>> sum_amicable_numbers(10000)\n    1664900\n    >>> sum_amicable_numbers(100000)\n    16649000\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n + 1):\n        if i in _amicable_numbers(i):\n            sum_ += i\n    return sum_\n\ndef _amicable_numbers(n):\n    \"\"\"\n    >>> _amicable_numbers(10)\n    [20]\n    >>> _amicable_numbers(100)\n    [220, 284]\n    >>> _amicable_numbers(1000)\n    [1184, 1210, 220, 284, 1224, 1456]\n    >>> _amicable_numbers(10000)\n    [1216, 1456, 2220, 2840, 2884, 5020, 5564, 6284]\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, n + 1):\n        amicable_numbers.append(sum(divisors(i)) - i)\n    return set(filter(lambda x: x <= n and x != 0, amicable_numbers))\n\ndef divisors(n):\n    \"\"\"\n    >>> divisors(10)\n    [1, 2, 5, 10]\n    >>> divisors(100)\n    [1, 2, 4, 5, 10, 20, 25, 50, 100]",
      -3.833984375
    ],
    [
      "def sum_of_divisors(n):\n    \"\"\"\n    Return the sum of all divisors of n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\n\ndef sum_of_proper_divisors(n):\n    \"\"\"\n    Return the sum of all proper divisors of n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    sum_of_proper_divisors = 0\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            sum_of_proper_divisors += i\n    return sum_of_proper_divisors\n\n\ndef is_amicable(n):\n    \"\"\"\n    Return whether or not n is amicable.\n    \"\"\"\n    if n <= 0:\n        return False\n    return sum_of_divisors(sum_of_proper_divisors(n)) == n and sum_of_divisors(sum_of_proper_divisors(sum_of_divisors(n))) == n\n\n\ndef sum_of_amicable_numbers(n):\n    \"\"\"\n    Return the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    sum_of_amicable_numbers = 0\n    for i in range(1, n + 1):\n        if is_amicable(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers",
      -4.48046875
    ],
    [
      "from math import sqrt\n\n\ndef amicable_sum(n):\n    \"\"\"Sums all amicable numbers from 1 to a specified number.\n\n    >>> amicable_sum(100)\n    504\n    >>> amicable_sum(10000)\n    33162\n    >>> amicable_sum(100000)\n    333160\n    >>> amicable_sum(1000000)\n    333166\n    >>> amicable_sum(10000000)\n    333366\n    \"\"\"\n    sum_amicable = 0\n    for i in range(1, n + 1):\n        sum_divisors = sum(\n            j\n            for j in range(i * 2, i // 2, -1)\n            if i % j == 0\n        )\n        sum_divisors_2 = sum(\n            k\n            for k in range(i + 1, int(sqrt(i)) + 1)\n            if i % k == 0\n        )\n        if sum_divisors == sum_divisors_2 and sum_divisors != i:\n            sum_amicable += i\n    return sum_amicable\n\n\nif __name__ == \"__main__\":\n    print(amicable_sum(int(input().strip())))",
      -4.578125
    ],
    [
      "def sum_of_amicable_numbers(max_number):\n    \"\"\"\n    This function sums all amicable numbers from 1 to a specified number.\n    :param max_number: The maximum number to sum up to.\n    :return: The sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize the sum\n    sum = 0\n\n    # iterate through all numbers\n    for num in range(1, max_number):\n        # calculate the amicable number of the current number\n        amicable_number = sum_of_divisors(num)\n\n        # check if the current number is the amicable number of the current number\n        if num == sum_of_divisors(amicable_number):\n            # add the current number to the sum\n            sum += num\n\n    # return the sum\n    return sum\n\n\ndef sum_of_divisors(num):\n    \"\"\"\n    This function calculates the sum of the divisors of a number.\n    :param num: The number to calculate the sum of the divisors of.\n    :return: The sum of the divisors of a number.\n    \"\"\"\n    # initialize the sum\n    sum = 0\n\n    # iterate through all numbers\n    for i in range(1, num):\n        # check if the current number is a divisor of the number\n        if num % i == 0:\n            # add the current number to the sum\n            sum += i\n\n    # return the sum\n    return sum",
      -4.6640625
    ],
    [
      "from math import sqrt\nfrom typing import Callable\n\n\ndef is_amicable(number: int) -> bool:\n    \"\"\"Determine whether or not a number is an amicable number.\"\"\"\n    if number == 1:\n        return False\n    divisors = [1]\n    for index in range(2, int(sqrt(number)) + 1):\n        if number % index == 0:\n            divisors.append(index)\n            divisors.append(number // index)\n    divisors.sort()\n    if divisors[-1] * divisors[-2] == number:\n        return True\n    return False\n\n\ndef sum_amicable_numbers(\n    max_number: int,\n    is_amicable_number: Callable = is_amicable,\n) -> int:\n    \"\"\"\n    Return the sum of all amicable numbers up to a specified number.\n    \"\"\"\n    return sum(\n        number\n        for number in range(1, max_number + 1)\n        if is_amicable_number(number)\n    )\n\n\ndef sum_amicable_numbers_optimized(max_number: int) -> int:\n    \"\"\"\n    Return the sum of all amicable numbers up to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n    for number in range(1, max_number + 1):\n        if number in amicable_numbers:\n            continue\n        divisors = [1]\n        for index in range(2, int(sqrt(number)) + 1):\n            if number % index == 0:\n                divisors.append(index)\n                divisors.append(number // index)\n        divisors.sort()\n        if divisors[-1] * divisors[-2] == number:\n            amicable_numbers.update(divisors)\n    return sum(amicable_numbers)\n\n\nif __name__ == \"__main__\":\n    print(sum_amicable_numbers(10000))\n    print(sum_amicable_numbers_optimized(10000))",
      -4.87109375
    ],
    [
      "def sum_amicable(n: int) -> int:\n    \"\"\"\n    >>> sum_amicable(10)\n    220\n    >>> sum_amicable(100)\n    31626\n    >>> sum_amicable(1000)\n    33168\n    >>> sum_amicable(10000)\n    33386\n    >>> sum_amicable(100000)\n    33488\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if i == sum_of_divisors(i) and sum_of_divisors(i) != i:\n            total += i\n    return total\n\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\"\n    >>> sum_of_divisors(10)\n    25\n    >>> sum_of_divisors(100)\n    5050\n    >>> sum_of_divisors(1000)\n    5005\n    \"\"\"\n    total = 0\n    for i in range(1, int(n / 2) + 1):\n        if n % i == 0:\n            total += i\n    return total\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -4.9765625
    ],
    [
      "from math import sqrt\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Returns the sum of proper divisors of a number n.\n    \"\"\"\n    sum_of_divisors = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\n\ndef sum_of_proper_divisors(n):\n    \"\"\"\n    Returns the sum of proper divisors of a number n.\n    \"\"\"\n    sum_of_proper_divisors = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            sum_of_proper_divisors += i\n    return sum_of_proper_divisors + int(sqrt(n))\n\n\ndef is_amicable_number(n):\n    \"\"\"\n    Returns True if n is an amicable number.\n    \"\"\"\n    sum_of_divisors_of_n = sum_of_divisors(n)\n    return sum_of_divisors(sum_of_divisors_of_n) == n and sum_of_divisors_of_n != n\n\n\ndef sum_of_amicable_numbers(n):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, n + 1):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n\ndef sum_of_amicable_numbers_optimized(n):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, n + 1):\n        sum_of_divisors_of_i = sum_of_divisors(i)",
      -5.21875
    ],
    [
      "from math import sqrt\n\n\ndef sum_amicable_numbers(n):\n    \"\"\"\n    Calculate all amicable numbers up to n.\n    An amicable number is a number that is equal to the sum of the factors of a different number.\n    \"\"\"\n\n    # Calculate the sum of the factors of n\n    def sum_factors(n):\n        n_factors = 1\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                n_factors += i\n                if i * i != n:\n                    n_factors += n // i\n        return n_factors\n\n    # Calculate the sum of the factors of n\n    def sum_factors_of_sum(n):\n        n_factors = 0\n        for i in range(1, int(sqrt(n)) + 1):\n            if n % i == 0:\n                n_factors += i\n                if i * i != n:\n                    n_factors += n // i\n        return n_factors\n\n    sum_of_amicable_numbers = 0\n    for i in range(1, n):\n        # Skip numbers that are not amicable numbers\n        if sum_factors(i) != sum_factors_of_sum(sum_factors(i)):\n            continue\n\n        sum_of_amicable_numbers += sum_factors(i)\n\n    return sum_of_amicable_numbers",
      -5.26171875
    ],
    [
      "import time\n\n\ndef is_amicable_number(num):\n    \"\"\"Check if a number is amicable.\"\"\"\n    # Get sum of proper divisors\n    sum_of_proper_divisors = 0\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            sum_of_proper_divisors += i\n    # Get sum of reciprocal of proper divisors\n    sum_of_reciprocal_of_proper_divisors = 0\n    for j in range(1, int(sum_of_proper_divisors ** 0.5) + 1):\n        if sum_of_proper_divisors % j == 0:\n            sum_of_reciprocal_of_proper_divisors += 1 / j\n    # Get sum of reciprocal of proper divisors\n    sum_of_reciprocal_of_proper_divisors += 1 / sum_of_proper_divisors\n    # Check if the sum of proper divisors of num is the sum of reciprocal of proper divisors of sum of proper divisors\n    if int(sum_of_proper_divisors) == int(sum_of_reciprocal_of_proper_divisors):\n        return True\n    else:\n        return False\n\n\ndef sum_amicable_numbers(num):\n    \"\"\"Sum all amicable numbers from 1 to num.\"\"\"\n    sum_of_amicable_numbers = 0\n    for i in range(1, num + 1):\n        if is_amicable_number(i):\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    print(sum_amicable_numbers(10000))\n    print(\"--- %s seconds ---\" % (time.time() - start_time))",
      -5.3203125
    ],
    [
      "from math import sqrt\nfrom typing import Iterable\n\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\"Returns the sum of the proper divisors of a number.\n\n    Parameters:\n    n: int\n\n    Returns:\n    int\n\n    Examples:\n    >>> sum_of_divisors(28)\n    56\n    >>> sum_of_divisors(100)\n    5050\n    >>> sum_of_divisors(101)\n    101\n    \"\"\"\n    sum_div = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            sum_div += i\n            if i != n // i:\n                sum_div += n // i\n    return sum_div\n\n\ndef sum_of_proper_divisors(n: int) -> int:\n    \"\"\"Returns the sum of the proper divisors of a number.\n\n    Parameters:\n    n: int\n\n    Returns:\n    int\n\n    Examples:\n    >>> sum_of_proper_divisors(28)\n    31\n    >>> sum_of_proper_divisors(100)\n    5050\n    >>> sum_of_proper_divisors(101)\n    101\n    \"\"\"\n    return sum_of_divisors(n) - n\n\n\ndef amicable_numbers(n: int) -> Iterable[int]:\n    \"\"\"Returns amicable numbers from 1 to n.\n\n    Parameters:\n    n: int\n\n    Returns:\n    Iterable[int]\n\n    Examples:\n    >>> list(amicable_numbers(10))\n    [220, 284, 1184, 1210, 2620, 2924]\n    >>> list(amicable_numbers(100))\n    [220, 284, 1184, 1210, 2620, 2",
      -5.6328125
    ],
    [
      "def amicable_numbers(n):\n    \"\"\"\n    Calculates the sum of amicable numbers from 1 to n.\n\n    >>> amicable_numbers(50)\n    1320\n    >>> amicable_numbers(100)\n    31626\n    >>> amicable_numbers(200)\n    33162\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        a = sum_of_divisors(i)\n        b = sum_of_divisors(a)\n        if (\n            b == i\n            and a != i\n            and i < b\n            and a != sum_of_divisors(b)\n            and sum_of_divisors(b) != i\n        ):\n            amicable_sum += i\n    return amicable_sum\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Calculates the sum of all divisors of n.\n\n    >>> sum_of_divisors(100)\n    5050\n    >>> sum_of_divisors(50)\n    164\n    >>> sum_of_divisors(10)\n    21\n    \"\"\"\n    sum = 1\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -6.05859375
    ],
    [
      "def sum_amicable_numbers(max_num):\n    \"\"\"\n    Return the sum of all amicable numbers from 1 to max_num.\n\n    >>> sum_amicable_numbers(10)\n    316\n    >>> sum_amicable_numbers(100)\n    31626\n    >>> sum_amicable_numbers(1000)\n    331626\n    >>> sum_amicable_numbers(10000)\n    33316626\n    \"\"\"\n    amicable_numbers = set()\n    for num in range(1, max_num + 1):\n        if is_amicable_number(num):\n            amicable_numbers.add(num)\n    return sum(amicable_numbers)\n\n\ndef is_amicable_number(num):\n    \"\"\"\n    Return True if num is an amicable number, False otherwise.\n\n    >>> is_amicable_number(220)\n    True\n    >>> is_amicable_number(284)\n    True\n    >>> is_amicable_number(1184)\n    True\n    >>> is_amicable_number(1210)\n    True\n    >>> is_amicable_number(2200)\n    False\n    >>> is_amicable_number(285)\n    False\n    \"\"\"\n    num_sum = sum(get_proper_divisors(num))\n    if num == num_sum:\n        return False\n    if num == get_proper_divisors(num_sum):\n        return True\n    return False\n\n\ndef get_proper_divisors(num):\n    \"\"\"\n    Return the list of proper divisors of num.\n\n    >>> get_proper_divisors(220)\n    {1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110}\n    >>> get_proper_divisors(284)\n    {1,",
      -6.375
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    :param n: int - a number for which we check if it is amicable number\n    :return: int - sum of all amicable numbers from 1 to n\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n    if n < 1:\n        raise ValueError('n must be a positive number')\n\n    amicable_numbers = []\n    for i in range(1, n+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\n\ndef is_amicable(n):\n    \"\"\"\n    :param n: int - a number for which we check if it is amicable number\n    :return: bool - if n is amicable number\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n    if n < 1:\n        raise ValueError('n must be a positive number')\n\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors == sum_divisors(sum_of_divisors) and sum_of_divisors != n\n\n\ndef sum_divisors(n):\n    \"\"\"\n    :param n: int - a number for which we sum all its divisors\n    :return: int - sum of all divisors of n\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n    if n < 1:\n        raise ValueError('n must be a positive number')\n\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors\n\n\ndef _test_function(test_case):\n    n = test_case[0",
      -6.51171875
    ],
    [
      "from typing import List\n\n\ndef sum_amicable_numbers(max_num: int) -> int:\n    \"\"\"Sums all amicable numbers from 1 to a specified number.\n\n    Args:\n        max_num (int): The number to sum to.\n\n    Returns:\n        int: The sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n\n    for i in range(1, max_num + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num: int) -> bool:\n    \"\"\"Checks if a number is amicable.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is amicable, False otherwise.\n    \"\"\"\n    num_1 = sum_divisors(num)\n    num_2 = sum_divisors(num_1)\n\n    return num_2 == num and num_1 != num_2\n\n\ndef sum_divisors(num: int) -> int:\n    \"\"\"Sums all divisors of a number.\n\n    Args:\n        num (int): The number to sum the divisors of.\n\n    Returns:\n        int: The sum of all divisors of a number.\n    \"\"\"\n    if num == 1:\n        return 0\n\n    divisors = []\n\n    for i in range(1, int(num / 2) + 1):\n        if num % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n\n\ndef sum_amicable_numbers_efficient(max_num: int) -> int:\n    \"\"\"Sums all amicable numbers from 1 to a specified number.\n\n    Args:\n        max_num (int): The number to sum to.\n\n    Returns:\n        int: The sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []",
      -6.96484375
    ],
    [
      "from math import sqrt\n\n\ndef sum_of_proper_divisors(n: int) -> int:\n    \"\"\"Calculate sum of proper divisors of number n.\n\n    >>> sum_of_proper_divisors(284)\n    0\n    >>> sum_of_proper_divisors(220)\n    284\n    >>> sum_of_proper_divisors(1184)\n    1249\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    s = 1\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            s += i\n            if i * i != n:\n                s += n // i\n    return s - n\n\n\ndef sum_amicable_numbers(n: int) -> int:\n    \"\"\"Calculate sum of amicable numbers from 1 to n.\n\n    >>> sum_amicable_numbers(10)\n    0\n    >>> sum_amicable_numbers(220)\n    284\n    >>> sum_amicable_numbers(1000)\n    31626\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    s = 0\n    for i in range(1, n + 1):\n        if sum_of_proper_divisors(i) == i and sum_of_proper_divisors(sum_of_proper_divisors(i)) == i:\n            s += i\n    return s\n\n\nif __name__ == \"__main__\":\n    print(sum_amicable_numbers(int(input().strip())))",
      -7.03125
    ],
    [
      "def sum_amicable_numbers(end: int) -> int:\n    \"\"\"\n    >>> sum_amicable_numbers(10)\n    220\n    >>> sum_amicable_numbers(20)\n    284\n    >>> sum_amicable_numbers(30)\n    342\n    >>> sum_amicable_numbers(1000)\n    176_444\n    >>> sum_amicable_numbers(2000)\n    332_852\n    >>> sum_amicable_numbers(3000)\n    514_870\n    \"\"\"\n    sum_amicable_numbers_ = 0\n\n    for i in range(1, end + 1):\n        if i == sum(factorize(i)):\n            if i == sum(factorize(sum(factorize(i)))):\n                sum_amicable_numbers_ += i\n\n    return sum_amicable_numbers_\n\n\ndef factorize(num: int) -> list[int]:\n    \"\"\"\n    >>> factorize(1)\n    []\n    >>> factorize(2)\n    [1, 2]\n    >>> factorize(3)\n    [1, 3]\n    >>> factorize(4)\n    [1, 2, 4]\n    >>> factorize(10)\n    [1, 2, 5, 10]\n    >>> factorize(15)\n    [1, 3, 5, 15]\n    >>> factorize(20)\n    [1, 2, 4, 5, 10, 20]\n    \"\"\"\n    factors = []\n\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.append(i)\n\n    return factors\n\n\ndef sum_amicable_numbers_slow(end: int) -> int:\n    \"\"\"\n    This is a slow version of the algorithm.\n\n    >>> sum_amicable_numbers_slow(10)\n    220\n    >>> sum_amicable_numbers_",
      -7.0546875
    ],
    [
      "def sum_amicable_numbers(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # pylint: disable=invalid-name\n    sums = []\n    for i in range(1, limit):\n        # The sum of the factors of a number, minus that number, divided by two.\n        sum_a = sum(divisor_sum(i))\n        if sum_a == i:\n            continue\n        # The sum of the factors of a number, minus that number, divided by two.\n        sum_b = sum(divisor_sum(sum_a))\n        if sum_b == i:\n            sums.append(i)\n    return sum(sums)\n\ndef divisor_sum(num):\n    \"\"\"\n    Sum of all divisors of a number, minus the number itself.\n    \"\"\"\n    sum_divisors = 1\n    for i in range(2, num):\n        if num % i == 0:\n            sum_divisors += i\n    return sum_divisors",
      -7.1171875
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"Sums all amicable numbers from 1 to n.\n\n    An amicable number is a number that is equal to the sum of the factors of a number,\n    minus the number itself.\n\n    Args:\n        n: The upper limit of the amicable numbers to sum.\n\n    Returns:\n        The sum of all amicable numbers from 1 to n.\n    \"\"\"\n    # We don't need to sum anything above sqrt(n) because the sum of the\n    # factors of n is less than n.\n    max_factor = int(n ** 0.5) + 1\n\n    # We can precompute the sum of the factors of each number in the range\n    # [1, n].\n    factor_sums = [0] * (n + 1)\n    for i in range(1, max_factor):\n        for j in range(i * 2, n + 1, i):\n            factor_sums[j] += i\n\n    # We can check if the sum of the factors of a number is equal to the number\n    # itself. If so, the number is an amicable number.\n    sum_amicable_numbers = 0\n    for i in range(1, n + 1):\n        if i == factor_sums[i] - i:\n            sum_amicable_numbers += i\n\n    return sum_amicable_numbers",
      -7.20703125
    ],
    [
      "def sum_of_amicable_numbers(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    total = 0\n\n    for num in range(1, number + 1):\n        if num == 1:\n            continue\n        if num == 2:\n            total += 1\n            continue\n        if num == 3:\n            total += 2\n            continue\n\n        sum_of_divisors = sum(\n            divisor\n            for divisor in range(1, num + 1)\n            if num % divisor == 0\n        )\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:\n            continue\n\n        if sum_of_divisors == num:",
      -7.4609375
    ],
    [
      "def sum_amicable_numbers(max_num: int) -> int:\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to max_num.\n    >>> sum_amicable_numbers(10)\n    316\n    >>> sum_amicable_numbers(100)\n    31626\n    >>> sum_amicable_numbers(1000)\n    331626\n    >>> sum_amicable_numbers(10000)\n    33316626\n    >>> sum_amicable_numbers(100000)\n    33333166626\n    \"\"\"\n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55\n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 = 765\n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 = 966\n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 = 1177\n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 = 1488\n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 = 1899\n    # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 +",
      -7.5
    ],
    [
      "from math import sqrt\n\n\ndef sum_amicable_numbers(n):\n    \"\"\"Sums all amicable numbers from 1 to a specified number.\n\n    Args:\n        n: The upper limit of the range to search for amicable numbers.\n\n    Returns:\n        The sum of all amicable numbers.\n    \"\"\"\n    # Amicable numbers are equal to the sum of the factors minus the number itself.\n    # So, to calculate the sum of amicable numbers, we need to calculate the sum\n    # of all numbers and the sum of their factors.\n\n    # To avoid double counting, we'll sum the numbers and their factors in two\n    # separate loops.\n    #\n    # We need two separate loops because we need to sum the numbers and their\n    # factors separately.\n\n    # We'll calculate the sum of all numbers from 1 to n by iterating from 1 to n\n    # and adding each number to our running sum.\n    #\n    # We'll calculate the sum of all numbers from 1 to n by iterating from 1 to n\n    # and adding the sum of all the factors of each number to our running sum.\n\n    # We'll calculate the sum of all factors of a number by iterating from 1 to\n    # the square root of the number and adding each factor to our running sum.\n\n    # We'll calculate the sum of all factors of a number by iterating from 1 to\n    # the square root of the number and adding each factor to our running sum.\n    #\n    # We can use the formula for the sum of all factors of a number:\n    # n * (n + 1) / 2\n    #\n    # We can use the formula for the sum of all factors of a number:\n    # n * (n + 1) / 2\n\n    # We'll need a set to keep track of numbers we've already calculated.\n    #\n    # We'll need a list to keep track of all numbers and their factors.\n\n    # We'll need a set to keep track of numbers we've already calculated.\n    calculated_numbers = set()\n\n    # We'll need a list to keep track of all numbers",
      -7.6953125
    ],
    [
      "from math import sqrt\n\n\ndef sum_amicable(n):\n    \"\"\"Sums all amicable numbers from 1 to n.\n\n    >>> sum_amicable(10000)\n    31626\n    >>> sum_amicable(5000)\n    1762\n    >>> sum_amicable(2000)\n    1762\n    >>> sum_amicable(1000)\n    1762\n    >>> sum_amicable(500)\n    1762\n    >>> sum_amicable(200)\n    1762\n    >>> sum_amicable(100)\n    1762\n    >>> sum_amicable(50)\n    1762\n    >>> sum_amicable(20)\n    1762\n    >>> sum_amicable(10)\n    1762\n    >>> sum_amicable(5)\n    1762\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += _amicable(i)\n    return sum\n\n\ndef _amicable(n):\n    \"\"\"Checks if n is amicable.\n\n    >>> _amicable(10)\n    220\n    >>> _amicable(20)\n    284\n    >>> _amicable(30)\n    335\n    >>> _amicable(40)\n    262\n    >>> _amicable(50)\n    292\n    >>> _amicable(60)\n    292\n    >>> _amicable(70)\n    262\n    >>> _amicable(80)\n    220\n    >>> _amicable(90)\n    284\n    >>> _amicable(100)\n    284\n    >>> _amicable(110)\n    262\n    >>> _amicable(120)\n    220\n    >>> _amicable(130",
      -8.6953125
    ],
    [
      "def sum_amicable(n):\n    sum_of_amicable = 0\n    for i in range(1, n + 1):\n        if i in amicable_numbers:\n            sum_of_amicable += i\n    return sum_of_amicable\n\n\ndef get_proper_divisors(n):\n    \"\"\"\n    The proper divisors of a number are all the divisors excluding the number itself.\n    For example, the proper divisors of 28 are 1, 2, 4, 7, and 14.\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n\ndef get_amicable_numbers(n):\n    \"\"\"\n    An amicable number is a number where the sum of the proper divisors equals the number itself.\n    \"\"\"\n    proper_divisors = get_proper_divisors(n)\n    amicable_numbers = []\n    for proper_divisor in proper_divisors:\n        if n == sum_of_proper_divisors(proper_divisor):\n            amicable_numbers.append(n)\n    return amicable_numbers\n\n\ndef sum_of_proper_divisors(n):\n    proper_divisors = get_proper_divisors(n)\n    return sum(proper_divisors)\n\n\namicable_numbers = get_amicable_numbers(500)\nprint(sum_amicable(500))",
      -8.875
    ],
    [
      "from math import sqrt\n\ndef is_amicable(num):\n    \"\"\"Returns True if num is an amicable number.\n\n    :param num: int\n    :return: bool\n    \"\"\"\n\n    # Get the sum of the proper divisors of num.\n    sigma = sum(i for i in range(1, num//2+1) if num % i == 0)\n\n    # Get the sum of the proper divisors of the proper divisors of num.\n    sigma_sigma = sum(i for i in range(1, sigma//2+1) if sigma % i == 0)\n\n    # Check if num and sigma_sigma are equal and sigma is not equal to num.\n    return sigma_sigma == num and sigma != num\n\ndef sum_amicable_numbers(max_num):\n    \"\"\"Returns the sum of all amicable numbers from 1 to max_num.\n\n    :param max_num: int\n    :return: int\n    \"\"\"\n\n    total = 0\n\n    for num in range(1, max_num+1):\n        if is_amicable(num):\n            total += num\n\n    return total\n\ndef sum_amicable_numbers_optimized(max_num):\n    \"\"\"Returns the sum of all amicable numbers from 1 to max_num.\n\n    :param max_num: int\n    :return: int\n    \"\"\"\n\n    total = 0\n\n    for num in range(1, max_num+1):\n        # Get the sum of the proper divisors of num.\n        sigma = sum(i for i in range(1, num//2+1) if num % i == 0)\n\n        # Get the sum of the proper divisors of the proper divisors of num.\n        sigma_sigma = sum(i for i in range(1, sigma//2+1) if sigma % i == 0)\n\n        # Check if num and sigma_sigma are equal and sigma is not equal to num.\n        if sigma_sigma == num and sigma != num:\n            total += num\n\n    return total\n\n# -----------------",
      -9.5390625
    ],
    [
      "def sum_amicable_numbers(n):\n    \"\"\"\n    Sum all amicable numbers from 1 to n.\n    \"\"\"\n    # Create a dictionary of divisors for each number\n    # from 1 to n\n    divisors = {i: sum(k for k in range(i, n+1) if i % k == 0)\n                for i in range(1, n+1)}\n\n    # Create a dictionary of amicable numbers from 1 to n\n    # For each number, the amicable number is the sum of the divisors\n    # of the divisors.\n    amicable_numbers = {}\n    for i in range(1, n+1):\n        amicable_numbers[divisors[divisors[i]]] = i\n\n    # Sum all amicable numbers from 1 to n\n    sum_amicable_numbers = 0\n    for i in range(1, n+1):\n        if i in amicable_numbers:\n            sum_amicable_numbers += i\n\n    return sum_amicable_numbers",
      -10.9296875
    ],
    [
      "def sum_of_divisors(n: int) -> int:\n    \"\"\"\n    Calculates the sum of proper divisors of a number.\n    >>> sum_of_divisors(1)\n    1\n    >>> sum_of_divisors(220)\n    284\n    \"\"\"\n    return sum(\n        i\n        for i in range(1, int(n ** 0.5) + 1)\n        if n % i == 0\n    ) + 1\n\n\ndef sum_of_divisors_2(n: int) -> int:\n    \"\"\"\n    Calculates the sum of proper divisors of a number.\n    >>> sum_of_divisors_2(1)\n    1\n    >>> sum_of_divisors_2(220)\n    284\n    \"\"\"\n    return sum(\n        i\n        for i in range(1, n // 2 + 1)\n        if n % i == 0\n    )\n\n\ndef amicable_numbers(n: int) -> int:\n    \"\"\"\n    Calculates the sum of all amicable numbers from 1 to n.\n    >>> amicable_numbers(1)\n    0\n    >>> amicable_numbers(220)\n    316\n    \"\"\"\n    return sum(\n        i\n        for i in range(1, n + 1)\n        if i != sum_of_divisors(i) and sum_of_divisors(i) == i\n    )\n\n\nif __name__ == \"__main__\":\n    print(amicable_numbers(10000))",
      -12.9921875
    ],
    [
      "from math import sqrt\n\n\ndef is_prime(n):\n    \"\"\"Determine if the given number is prime.\"\"\"\n    if n <= 3:\n        return n > 1\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i ** 2 <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_amicable(n):\n    \"\"\"Determine if the given number is amicable.\"\"\"\n    amicable_sum = 0\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            amicable_sum += i\n    return amicable_sum == n\n\n\ndef sum_amicable(n):\n    \"\"\"Sum all amicable numbers from 1 to n.\"\"\"\n    if n < 2:\n        return 0\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        if i < 2:\n            continue\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n\n\ndef sum_amicable_optimized(n):\n    \"\"\"Sum all amicable numbers from 1 to n, using an optimized version.\"\"\"\n    if n < 2:\n        return 0\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        if i < 2:\n            continue\n        if is_prime(i):\n            continue\n        j = sum(range(2, i))\n        if j > i:\n            break\n        if is_prime(j):\n            continue\n        if j == i:\n            continue\n        if j < i:\n            amicable_sum += i\n    return amicable_sum\n\n\nif __name__ == \"__main__\":\n    n = 10000\n    print(sum_amicable(n))\n    print",
      -14.4296875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}