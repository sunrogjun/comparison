{
  "problem": {
    "task_id": "MBPP/153",
    "prompt": "Write a function to find the vertex of a parabola.",
    "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
    "test_list": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ],
    "challenge_test_list": [],
    "problem_id": 142
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from __future__ import annotations\n\nimport math\nfrom typing import Union\n\n\ndef parabola_vertex(a: float, b: float, c: float) -> tuple[float, float]:\n    \"\"\"\n    Calculate the coordinates of the vertex of a parabola.\n\n    :param a: Parabola coefficient.\n    :param b: Parabola coefficient.\n    :param c: Parabola coefficient.\n    :return: Coordinates of the vertex of a parabola.\n    :raises ValueError: When the parabola is vertical.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The parabola is vertical\")\n\n    x = -b / (2 * a)\n    y = a * x ** 2 + b * x + c\n\n    return x, y\n\n\nif __name__ == \"__main__\":\n    print(\n        f\"The vertex of the parabola is: {parabola_vertex(2, 3, -1)}\",\n        f\"The vertex of the parabola is: {parabola_vertex(-0.5, 0.5, 1)}\",\n        f\"The vertex of the parabola is: {parabola_vertex(2, 0, 0)}\",\n        sep=\"\\n\",\n    )",
      4.375
    ],
    [
      "def find_vertex(p1, p2, p3):\n    \"\"\"Find the vertex of a parabola given three points\n\n    Args:\n        p1: First point\n        p2: Second point\n        p3: Third point\n    Returns:\n        vertex: Vertex of parabola\n    \"\"\"\n    p2_x, p2_y = p2\n    p3_x, p3_y = p3\n    # a = (p3.y - p2.y) / (p3.x - p2.x)\n    a = (p3_y - p2_y) / (p3_x - p2_x)\n    # b = p3.y - a * p3.x\n    b = p3_y - a * p3_x\n    # vertex = (-b / a, -1 / 2a)\n    vertex = (-b / a, -1 / (2 * a))\n    return vertex",
      3.9296875
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    a = 3\n    b = 2\n    c = 1\n    \"\"\"\n    if a == 0:\n        return \"not a parabola\"\n    else:\n        vertex_x = -b / (2*a)\n        vertex_y = (b ** 2) / (4 * a) - c\n        return vertex_x, vertex_y\n\na = 3\nb = 2\nc = 1\nprint(parabola_vertex(a, b, c))",
      2.453125
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    Finds the vertex of a parabola.\n\n    Args:\n        a: Coefficient of x^2.\n        b: Coefficient of x.\n        c: Constant.\n\n    Returns:\n        The vertex of the parabola.\n    \"\"\"\n    from math import sqrt\n    return (2*b)/a, -(b**2)/(4*a) + (sqrt(b**2 - 4*a*c))/(2*a)\n\n\nif __name__ == \"__main__\":\n    print(parabola_vertex(1, 2, 3))",
      2.453125
    ],
    [
      "def vertex_parabola(a, b, c):\n    \"\"\"\n    :param a: coefficient a in the equation y = ax^2 + bx + c\n    :param b: coefficient b in the equation y = ax^2 + bx + c\n    :param c: coefficient c in the equation y = ax^2 + bx + c\n    :return: x value of vertex of parabola\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The coefficient a cannot be 0.\")\n    x = -b / (2 * a)\n    return x\n\n\ndef main():\n    a = int(input(\"Enter the coefficient a: \"))\n    b = int(input(\"Enter the coefficient b: \"))\n    c = int(input(\"Enter the coefficient c: \"))\n\n    x = vertex_parabola(a, b, c)\n    print(\"The vertex of parabola is at x =\", x)\n\n\nif __name__ == \"__main__\":\n    main()",
      1.568359375
    ],
    [
      "import math\nfrom typing import List, Tuple\n\n\ndef vertex(a: float, b: float, c: float) -> Tuple[float, float]:\n    \"\"\"Return vertex coordinates for a parabola.\n\n    :param a: a coefficient of the parabola equation\n    :param b: b coefficient of the parabola equation\n    :param c: c coefficient of the parabola equation\n    :return: vertex coordinates\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a should not be equal to zero\")\n\n    vertex_x = -b / (2 * a)\n    vertex_y = a * vertex_x ** 2 + b * vertex_x + c\n\n    return vertex_x, vertex_y\n\n\ndef main():\n    a = float(input(\"Enter a coefficient of the parabola equation: \"))\n    b = float(input(\"Enter b coefficient of the parabola equation: \"))\n    c = float(input(\"Enter c coefficient of the parabola equation: \"))\n\n    vertex_x, vertex_y = vertex(a, b, c)\n\n    print(f\"Vertex coordinates: ({vertex_x}, {vertex_y})\")\n\n\nif __name__ == \"__main__\":\n    main()",
      1.1015625
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    return (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n\n\ndef test_parabola_vertex():\n    \"\"\"\n    Tests for parabola_vertex\n    \"\"\"\n    assert parabola_vertex(1, -3, 2) == 1\n    assert parabola_vertex(1, 2, 1) == 0\n    assert parabola_vertex(1, 4, 4) == 2",
      1.0439453125
    ],
    [
      "import math\n\n\ndef parabola_vertex(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    Args:\n        p1 (tuple): (x, y) coordinates of point 1\n        p2 (tuple): (x, y) coordinates of point 2\n        p3 (tuple): (x, y) coordinates of point 3\n\n    Returns:\n        tuple: (x, y) coordinates of the vertex\n    \"\"\"\n    # Calculate the x coordinate of the vertex\n    x = (p1[1] * (p2[0] - p3[0]) + p2[1] * (p3[0] - p1[0]) + p3[1] * (p1[0] - p2[0])) / (\n        p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1])\n    )\n\n    # Calculate the y coordinate of the vertex\n    y = (p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1])) / (\n        p1[1] * (p2[0] - p3[0]) + p2[1] * (p3[0] - p1[0]) + p3[1] * (p1[0] - p2[0])\n    )\n\n    return x, y\n\n\n# Vertex of the parabola\np1 = (3, 7)\np2 = (3, 8)\np3 = (3, 6)\nprint(parabola_vertex(p1, p2, p3))\n\n# Vertex of the parabola\np1 = (0, 0)\np2 = (3, 4)\np3 = (6, 0)\nprint(parabola_vertex(p1, p2, p3))",
      0.97607421875
    ],
    [
      "from math import sqrt\n\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Calculate the coordinates of the vertex of a parabola.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be equal to 0\")\n\n    # x-coordinate of the vertex\n    x = -b / (2 * a)\n    # y-coordinate of the vertex\n    y = (-b ** 2 / (4 * a * c)) - b / (2 * a)\n\n    return (x, y)\n\n\ndef main():\n    a = float(input(\"Please enter the coefficient a: \"))\n    b = float(input(\"Please enter the coefficient b: \"))\n    c = float(input(\"Please enter the coefficient c: \"))\n\n    try:\n        vertex = parabola_vertex(a, b, c)\n        print(f\"The vertex of the parabola is at {vertex}\")\n    except ValueError as error:\n        print(error)\n    except ZeroDivisionError as error:\n        print(error)\n\n\nif __name__ == \"__main__\":\n    main()",
      0.43994140625
    ],
    [
      "def vertex(p1, p2, p3):\n    \"\"\"\n    >>> vertex((0, 0), (5, 10), (10, 15))\n    (5.0, -1.5)\n    >>> vertex((0, 0), (5, -10), (10, 15))\n    (5.0, -1.5)\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    dx = x2 - x1\n    dy = y2 - y1\n    d = dx * dx + dy * dy\n\n    a = (y3 - y1) * dy - (x3 - x1) * dx\n    b = (y3 - y2) * dy - (x3 - x2) * dx\n    c = a * dx + b * dy\n\n    if d == 0:\n        return -1\n\n    x = -(b * b - a * c) / (a * a - d * d)\n    y = -(a * a - b * b + c * 2) / (2 * d)\n\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.27197265625
    ],
    [
      "def parabola_vertex(p1, p2, p3):\n    \"\"\"\n    Return the vertex of a parabola.\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    a = (y2 - y1) / (x2 - x1)\n    b = y1 - (a * x1)\n    x = (b * 2) / (-a - a**2)\n    y = a * x + b\n    return (x, y)",
      0.134033203125
    ],
    [
      "def parabola(a, b, c):\n    if a == 0:\n        return False\n\n    vertex = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    return vertex\n\n\ndef test_parabola():\n    assert parabola(1, 0, 0) == 0\n    assert parabola(1, 1, 0) == 1\n    assert parabola(1, 1, 1) == 0\n    assert parabola(1, 2, 1) == 1\n    assert parabola(1, 2, 3) == 1",
      0.09808349609375
    ],
    [
      "from math import sqrt\n\n\ndef parabola_vertex(p1, p2, p3):\n    \"\"\"Find the vertex of a parabola.\"\"\"\n    # Get the 2-norm of each point\n    n1 = sqrt(p1[0] ** 2 + p1[1] ** 2)\n    n2 = sqrt(p2[0] ** 2 + p2[1] ** 2)\n    n3 = sqrt(p3[0] ** 2 + p3[1] ** 2)\n\n    # Calculate the area of the triangle\n    a = n1 + n2 + n3\n\n    # Calculate the coordinates of the vertex\n    x = (n1 * p2[0] + n2 * p3[0] + n3 * p1[0]) / a\n    y = (n1 * p2[1] + n2 * p3[1] + n3 * p1[1]) / a\n\n    # Return the vertex\n    return x, y",
      0.0175018310546875
    ],
    [
      "from math import sqrt\n\n\ndef parabola_vertex(p1, p2, p3):\n    \"\"\"\n    Finds the vertex of a parabola.\n    :param p1: Point 1\n    :param p2: Point 2\n    :param p3: Point 3\n    :return: Vertex point\n    \"\"\"\n\n    # Find the slope of the lines\n    m1 = (p2[1] - p1[1]) / (p2[0] - p1[0])\n    m2 = (p3[1] - p2[1]) / (p3[0] - p2[0])\n\n    # Find the vertex\n    x = (m1 * m2 * (p1[1] - p3[1]) + m2 * (p1[0] + p2[0]) - m1 * (p2[0] + p3[0])) / (2 * (m2 - m1))\n    y = (m1 * m2 * (p1[0] - p3[0]) + m2 * (p1[1] + p2[1]) - m1 * (p2[1] + p3[1])) / (2 * (m2 - m1))\n\n    return (x, y)\n\n\nif __name__ == '__main__':\n    print(parabola_vertex((1, 1), (2, 4), (3, 9)))\n    print(parabola_vertex((2, 2), (1, 2), (4, 5)))",
      -0.1435546875
    ],
    [
      "def find_vertex(a, b, c):\n    # a = 0\n    # b = 0\n    # c = 0\n    # d = 0\n    if a == 0:\n        return None\n    x = -b / (2 * a)\n    y = calc_y(a, b, c, x)\n    return [x, y]\n\n\ndef calc_y(a, b, c, x):\n    return a * x ** 2 + b * x + c\n\n\nprint(find_vertex(0, 0, 0))",
      -0.325439453125
    ],
    [
      "from math import sqrt\n\n\ndef parabola_vertex(p1, p2, p3):\n    \"\"\"\n    Return the coordinates of the vertex of a parabola.\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    dx1 = x2 - x1\n    dx2 = x3 - x1\n    dy1 = y2 - y1\n    dy2 = y3 - y1\n\n    a = dx1 * dx1 + dy1 * dy1\n    b = dx1 * dx2 + dy1 * dy2\n    c = dx2 * dx2 + dy2 * dy2\n\n    denom = (a * c - b * b)\n    if denom == 0:\n        raise ValueError('The parabola does not exist')\n\n    x_num = a * (x1 * dx2 + y1 * dy2) + b * (x2 * dx2 + y2 * dy2) + c * (x3 * dx1 + y3 * dy1)\n    y_num = a * (y1 * dx2 + y1 * dy2) + b * (y2 * dx2 + y2 * dy2) + c * (y3 * dx1 + y3 * dy1)\n\n    x = x_num / denom\n    y = y_num / denom\n\n    return x, y\n\n\nif __name__ == '__main__':\n    print(parabola_vertex((1, 1), (2, 2), (3, 3)))\n    print(parabola_vertex((1, 1), (2, 3), (3, 1)))\n    try:\n        print(parabola_vertex((1, 1), (2, 1), (3, 1)))\n    except ValueError as error:\n        print(error)",
      -0.70947265625
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: float\n    Find the vertex of a parabola.\n    \"\"\"\n    vertex = (-b / (2*a))\n    return vertex",
      -0.85595703125
    ],
    [
      "def parabola_vertex(focus, directrix):\n    \"\"\"Find the vertex of a parabola.\n\n    Params:\n        focus: A tuple of (x, y) coordinates for the focus.\n        directrix: A number representing the directrix.\n\n    Returns:\n        A tuple of (x, y) coordinates for the vertex.\n    \"\"\"\n    x, y = focus\n    return (x, directrix - y)",
      -0.85595703125
    ],
    [
      "import math\n\n\ndef vertex(focus, directrix):\n    \"\"\"\n    Return vertex of a parabola.\n    \"\"\"\n    x, y = focus\n    return (x - y * (y + 1) / (directrix + 1), -y)\n\n\ndef test():\n    \"\"\"\n    >>> vertex((0, 0), 1)\n    (0, -1)\n    >>> vertex((0, 1), 0)\n    (0, 1)\n    >>> vertex((1, -1), 1)\n    (2.0, -2.0)\n    >>> vertex((-1, -1), 0)\n    (-2.0, -2.0)\n    >>> vertex((-1, 1), 0)\n    (-2.0, 2.0)\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def parabola(a, b, c):\n    # y = ax^2 + bx + c\n    # (a/b)^2 = -1\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n    else:\n        return (-b / (2 * a), -c / a)\n\n\nprint(parabola(1, 0, 1))\nprint(parabola(0, 1, 1))\nprint(parabola(1, 1, 1))",
      -0.85693359375
    ],
    [
      "from sympy import Symbol, solve\n\n\ndef find_vertex(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    x = Symbol('x')\n    y = Symbol('y')\n    A = solve(x**2 - (p1 + p2 + p3) * x + p1 * p2 * p3, x)\n    return A[0], p1 * A[0]**2 + p2 * A[0] + p3",
      -0.85693359375
    ],
    [
      "def parabola_vertex(p1, p2):\n    \"\"\"\n    Given two points on a parabola, find the vertex.\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    a = (y2 - y1) / (x2 - x1)\n    b = y2 - a * x2\n    x = -b / a\n    y = a * x + b\n    return (x, y)",
      -0.85693359375
    ],
    [
      "def parabola_vertex(focus, directrix):\n    \"\"\"\n    This function takes in the focus and directrix of a parabola and returns\n    the coordinates of the vertex of the parabola.\n    \"\"\"\n    return (focus[0], directrix)",
      -0.85693359375
    ],
    [
      "def parabola(a, b, c):\n    \"\"\"\n    This function finds the vertex of a parabola using the following equation:\n    ax^2 + bx + c = 0\n    \"\"\"\n\n    # check if a = 0\n    if a == 0:\n        return \"a cannot be equal to zero.\"\n\n    # calculate the vertex of the parabola\n    vertex_x = -b / (2 * a)\n    vertex_y = (-1 * b**2 + 4 * a * c) / (4 * a)\n\n    return vertex_x, vertex_y\n\n\nif __name__ == '__main__':\n    # test case\n    print(parabola(2, 1, 2))",
      -0.85693359375
    ],
    [
      "def find_vertex(focus, directrix):\n    \"\"\"\n    focus: (x, y)\n    directrix: y = kx\n    \"\"\"\n    return focus[0], directrix - focus[1]\n\nif __name__ == '__main__':\n    focus = (2, 2)\n    directrix = 1\n    print(find_vertex(focus, directrix))",
      -0.85693359375
    ],
    [
      "import math\nfrom typing import List\n\n\ndef parabola_vertex(a: float, b: float, c: float) -> List[float]:\n    \"\"\"Finds the vertex of a parabola.\n\n    Arguments:\n        a: The coefficient of x^2 in the parabola's equation.\n        b: The coefficient of x in the parabola's equation.\n        c: The constant in the parabola's equation.\n\n    Returns:\n        A list containing the coordinates of the parabola's vertex.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The parabola's equation is not of the form y = ax^2 + bx + c.\")\n    return [-b / (2 * a), -math.pow(b, 2) / (4 * a * c)]",
      -0.85693359375
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    Return the vertex of a parabola.\n    \"\"\"\n    return (0, -b/2*a)\n\n\ndef test_parabola_vertex():\n    \"\"\"\n    >>> test_parabola_vertex()\n    \"\"\"\n    assert parabola_vertex(1, 2, 1) == (0, -1)\n    assert parabola_vertex(1, 2, 3) == (0, -3)\n    assert parabola_vertex(1, 0, 0) == (0, 0)",
      -0.85693359375
    ],
    [
      "def parabola_vertex(a, b, c):\n    x = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return x, y",
      -0.85791015625
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    >>> parabola_vertex(1, 2, 1)\n    (0.5, 0.0)\n    \"\"\"\n    x = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def parabola(a, b, c):\n    return (-b + ((b**2 - 4 * a * c)**0.5)) / (2 * a)\n\n\nif __name__ == \"__main__\":\n    print(parabola(1, 4, 1))",
      -0.85791015625
    ],
    [
      "import math\n\ndef parabola_vertex(a, b, c):\n    if a == 0:\n        return None\n    return (-b / a, -math.pow(b, 2) / (4 * a * c))\n\nprint(parabola_vertex(3, 4, 5))\nprint(parabola_vertex(0, 4, 5))\nprint(parabola_vertex(1, 2, 3))",
      -0.85791015625
    ],
    [
      "def vertex(p1, p2):\n    \"\"\"\n    Return the vertex of a parabola.\n\n    The parabola is defined by two points on its directrix.\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    a = (y2 - y1) / (x2 - x1)\n    b = y1 - a * x1\n    x = -b / a\n    y = a * x + b\n    return x, y",
      -0.8583984375
    ],
    [
      "def vertex(p1, p2):\n    \"\"\"\n    p1: vertex point\n    p2: focus point\n    \"\"\"\n    return (p1[1] - p2[1]) / (p1[0] - p2[0])\n\n\nprint(vertex((-1, 1), (0, 0)))",
      -0.8583984375
    ],
    [
      "def find_vertex(a, b, c):\n    x = (b**2) - (4*a*c)\n    if x >= 0:\n        y = -b + (x**0.5)\n        return (y/2*a)\n    else:\n        return False\n\ndef main():\n    a = float(input(\"Enter a: \"))\n    b = float(input(\"Enter b: \"))\n    c = float(input(\"Enter c: \"))\n    print(find_vertex(a, b, c))\n\nmain()",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef vertex(a, b, c):\n    if a == 0:\n        print(\"a cannot be equal to zero\")\n    else:\n        return (-b / a)\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"a = \"))\n    b = float(input(\"b = \"))\n    c = float(input(\"c = \"))\n\n    print(f\"Vertex is at {vertex(a, b, c)}\")",
      -0.8583984375
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    Finds the vertex of a parabola.\n    a: coefficient of x^2\n    b: coefficient of x\n    c: coefficient of y\n    \"\"\"\n    if a == 0:\n        return None\n    x = -b / (2 * a)\n    y = c - b ** 2 / (4 * a)\n    return x, y\n\n\nif __name__ == '__main__':\n    a, b, c = 2, -6, 4\n    print(parabola_vertex(a, b, c))",
      -0.8583984375
    ],
    [
      "def find_vertex(focus, directrix):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    >>> find_vertex(focus=4, directrix=2)\n    1\n    >>> find_vertex(focus=5, directrix=5)\n    -1\n    >>> find_vertex(focus=10, directrix=20)\n    -2\n    \"\"\"\n    if focus > directrix:\n        return -1\n    return focus - directrix\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef vertex(p1, p2, p3):\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    return (\n        (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) /\n        (x1 * (y2 - y3) + x2 * (y3 - y1))\n    )\n\n\nif __name__ == '__main__':\n    p1 = (0, 1)\n    p2 = (1, 2)\n    p3 = (2, 3)\n    print(vertex(p1, p2, p3))",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\ndef parabola_vertex(a, b, c):\n    return (-b / (2 * a))\n\na = float(input(\"a: \"))\nb = float(input(\"b: \"))\nc = float(input(\"c: \"))\n\nprint(parabola_vertex(a, b, c))",
      -0.85888671875
    ],
    [
      "import math\n\ndef parabola_vertex(a,b,c):\n    \"\"\"\n    :param a: int or float\n    :param b: int or float\n    :param c: int or float\n    :return: a tuple of the x and y coordinates of the vertex\n    \"\"\"\n    x = -1 * b / (2*a)\n    y = -1 * (b**2 / (4*a) - c)\n    return (x, y)\n\n\ndef main():\n    print(parabola_vertex(1, 2, 1))\n    print(parabola_vertex(1, -6, 11))\n    print(parabola_vertex(1, 0, 1))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "from __future__ import annotations\n\n\ndef vertex(a: int, b: int, c: int) -> tuple[float, float]:\n    \"\"\"\n    >>> vertex(2, 1, -10)\n    (5.0, 0.0)\n    >>> vertex(1, 2, -10)\n    (0.0, -10.0)\n    >>> vertex(2, 1, -10)\n    (5.0, 0.0)\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n\n    x = -b / (2 * a)\n    y = (-1 / (2 * a)) * (b ** 2 / (4 * a) - c)\n\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "import math\n\n\ndef vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be zero\")\n\n    if b == 0:\n        raise ValueError(\"b cannot be zero\")\n\n    x = -c / b\n    y = (a * x ** 2) / 2 + b * x / 2\n\n    return x, y\n\n\ndef main():\n    try:\n        a, b, c = [float(x) for x in input(\"Enter a, b, c: \").split(\",\")]\n    except ValueError:\n        print(\"Invalid input.\")\n        return\n\n    print(\"Vertex is\", vertex(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "import math\n\ndef find_vertex(a, b, c):\n    if a == 0:\n        return False\n    else:\n        x = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n        y = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n        return (x, y)\n\na = float(input(\"Enter a: \"))\nb = float(input(\"Enter b: \"))\nc = float(input(\"Enter c: \"))\nprint(find_vertex(a, b, c))",
      -0.85888671875
    ],
    [
      "def find_vertex(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola\n    :param p1: Point 1\n    :param p2: Point 2\n    :param p3: Point 3\n    :return:\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    # Check if the parabola is vertical\n    if x1 == x2 and x2 == x3:\n        return x1, 0\n\n    # Calculate the vertex\n    vertex_x = (x2 ** 2 - x1 ** 2 + y1 ** 2 - y2 ** 2) / (2 * (x2 - x1))\n    vertex_y = -1 * ((vertex_x - x1) ** 2 + y1 ** 2) / (2 * y1)\n\n    return vertex_x, vertex_y",
      -0.85888671875
    ],
    [
      "from typing import Tuple\n\n\ndef parabola_vertex(focus: Tuple[float, float], directrix: float) -> Tuple[float, float]:\n    \"\"\"\n    >>> parabola_vertex((0, 0), 1)\n    (-1, 1)\n    >>> parabola_vertex((1, 1), -2)\n    (3, 3)\n    \"\"\"\n    x, y = focus\n    return (x, directrix - y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "def parabola_vertex(a, b, c):\n    return (\n        (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a),\n        (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a),\n    )\n\n\nif __name__ == \"__main__\":\n    print(parabola_vertex(1, 2, 1))",
      -0.86083984375
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    return (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n\n\ndef test_parabola_vertex():\n    \"\"\"\n    Tests for parabola_vertex.\n    \"\"\"\n    assert parabola_vertex(1, -3, 2) == 2.0\n    assert parabola_vertex(1, -3, 1) == 1.0\n    assert parabola_vertex(1, -3, 0) == -1.0\n    assert parabola_vertex(1, -3, -1) == -2.0\n    assert parabola_vertex(1, -3, -2) == -3.0\n    assert parabola_vertex(1, 0, 0) == 0.0\n\n\nif __name__ == '__main__':\n    test_parabola_vertex()",
      -0.9208984375
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    Solve quadratic equation for x value.\n    \"\"\"\n    x = (-b + ((b ** 2) - (4 * a * c)) ** (1/2)) / (2 * a)\n    y = (-b - ((b ** 2) - (4 * a * c)) ** (1/2)) / (2 * a)\n\n    return x, y\n\nprint(parabola_vertex(2, 1, -3))",
      -0.9921875
    ],
    [
      "def parabola_vertex(focus, directrix):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    :param focus: The focus of the parabola.\n    :type focus: list\n    :param directrix: The directrix of the parabola.\n    :type directrix: list\n    :return: The vertex of the parabola.\n    :rtype: list\n    \"\"\"\n    return [(focus[0] + directrix[0]) / 2, (focus[1] + directrix[1]) / 2]\n\n\n# We can also use this function to find the vertex of a circle.\n\n\nprint(parabola_vertex([0, 0], [1, 0]))",
      -1.0234375
    ],
    [
      "import math\nfrom typing import List\n\n\ndef vertex(x: List[int], y: List[int]) -> List[float]:\n    \"\"\"Find the vertex of a parabola from its points.\n\n    Parameters:\n        x (List[int]): The x coordinates of the points.\n        y (List[int]): The y coordinates of the points.\n\n    Returns:\n        List[float]: The x and y coordinates of the vertex.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"The lists must be of equal length\")\n\n    if len(x) < 3:\n        raise ValueError(\"There must be at least 3 points\")\n\n    a = 0\n    b = 0\n    c = 0\n\n    for i in range(len(x)):\n        a += x[i] ** 2\n        b += x[i]\n        c += y[i]\n\n    a *= -1\n    b *= -2\n    c *= -1\n\n    # Solving the quadratic equation\n    d = b ** 2 - 4 * a * c\n\n    if d < 0:\n        raise ValueError(\"The points do not form a parabola\")\n\n    x_vertex = (-b + math.sqrt(d)) / (2 * a)\n    y_vertex = (c - a * x_vertex ** 2) / 2\n\n    return [x_vertex, y_vertex]\n\n\nif __name__ == \"__main__\":\n    x = [1, 2, 3, 4]\n    y = [1, 2, 3, 4]\n\n    print(vertex(x, y))",
      -1.103515625
    ],
    [
      "def find_vertex(p1, p2):\n    \"\"\"\n    :param p1: a tuple of two points\n    :param p2: a tuple of two points\n    :return: a tuple of two points\n    \"\"\"\n    # calculate the slope of the line\n    m = (p2[1] - p1[1]) / (p2[0] - p1[0])\n    # calculate the vertex\n    x = (m**2 * p1[0] - m * p1[1] - p1[0] + p2[0]) / (m**2 + 1)\n    y = m * (x - p1[0]) + p1[1]\n\n    return x, y",
      -1.3359375
    ],
    [
      "import math\nimport unittest\n\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n    :param a: coefficient of x^2\n    :param b: coefficient of x\n    :param c: coefficient of constant term\n    :return: tuple of vertex coordinates\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Invalid parabola\")\n\n    vertex_x = -b / (2 * a)\n    vertex_y = parabola_equation(vertex_x, a, b, c)\n    return vertex_x, vertex_y\n\n\ndef parabola_equation(x, a, b, c):\n    \"\"\"\n    Parabola equation is: a * x^2 + b * x + c\n    :param x: x coordinate\n    :param a: coefficient of x^2\n    :param b: coefficient of x\n    :param c: coefficient of constant term\n    :return: y coordinate\n    \"\"\"\n    return a * x ** 2 + b * x + c\n\n\nclass TestParabolaVertex(unittest.TestCase):\n\n    def test_parabola_vertex(self):\n        self.assertEqual(parabola_vertex(1, 1, 1), (0, 1))\n        self.assertEqual(parabola_vertex(1, 0, 1), (1, 0))\n        self.assertEqual(parabola_vertex(1, 0, -1), (-1, 0))\n        self.assertEqual(parabola_vertex(1, 0, 0), (0, 0))\n        self.assertEqual(parabola_vertex(1, 0, -3), (-3, 0))\n        self.assertEqual(parabola_vertex(1, -3, -3), (-3, -3))\n        self.assertEqual(parabola_vertex(1, 1, -1), (0, -1))\n        self.assertEqual(parabola_vertex(1, 2, -1), (1.5, -1))\n        self.assertEqual",
      -1.35546875
    ],
    [
      "from math import sqrt\n\n\ndef parabola(a, b, c):\n    \"\"\"\n    Solve the quadratic equation to find the vertex.\n    \"\"\"\n    discriminant = b**2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -b / (2 * a)\n        return x\n    else:\n        x1 = (-b + sqrt(discriminant)) / (2 * a)\n        x2 = (-b - sqrt(discriminant)) / (2 * a)\n        return x1, x2\n\n\ndef main():\n    a = float(input('Enter a: '))\n    b = float(input('Enter b: '))\n    c = float(input('Enter c: '))\n    print(parabola(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.5556640625
    ],
    [
      "from __future__ import annotations\n\nimport math\nfrom typing import Optional\n\n\ndef vertex(a: float, b: float, c: float) -> Optional[list[float]]:\n    \"\"\"Finds the vertex of a parabola given its coefficients.\n\n    Args:\n        a (float): The coefficient of x^2.\n        b (float): The coefficient of x.\n        c (float): The coefficient of the constant term.\n\n    Returns:\n        list[float] | None: The coordinates of the vertex.\n    \"\"\"\n\n    if a == 0:\n        return None\n\n    # The x-coordinate of the vertex\n    x = -b / (2 * a)\n\n    # The y-coordinate of the vertex\n    y = (b ** 2) / (4 * a) - c\n\n    return [x, y]\n\n\ndef main() -> None:\n    a = float(input(\"Enter the coefficient of x^2: \"))\n    b = float(input(\"Enter the coefficient of x: \"))\n    c = float(input(\"Enter the coefficient of the constant term: \"))\n\n    if a == 0:\n        print(\"This is not a parabola.\")\n        return\n\n    vertex_coordinates = vertex(a, b, c)\n\n    if vertex_coordinates is None:\n        print(\"This is not a parabola.\")\n        return\n\n    print(f\"The vertex is at ({vertex_coordinates[0]}, {vertex_coordinates[1]})\")\n\n    if a == 1:\n        print(\"This is a parabola with a vertex at (0, 0).\")\n        return\n\n    # The y-intercept of the parabola\n    y_int = c - b ** 2 / (4 * a)\n\n    # The slope of the parabola\n    slope = -b / (2 * a)\n\n    # The focus of the parabola\n    focus = [slope, y_int]\n\n    # The eccentricity of the parabola\n    eccentricity = math.sqrt(1 - (b / (2 * a)) ** 2)\n\n    if",
      -1.7783203125
    ],
    [
      "def find_vertex(p1, p2, p3):\n    \"\"\"Find vertex of parabola.\n\n    Args:\n        p1 (tuple): x, y of point.\n        p2 (tuple): x, y of point.\n        p3 (tuple): x, y of point.\n\n    Returns:\n        tuple: x, y of vertex.\n    \"\"\"\n    # find vertex\n    a = (p1[1] - p2[1]) * (p3[1] - p2[1])\n    b = (p1[0] - p2[0]) * (p3[1] - p2[1])\n    c = (p1[0] - p2[0]) * (p3[0] - p2[0])\n    d = (p1[0] - p2[0]) * (p3[1] - p2[1])\n    e = (p1[1] - p2[1]) * (p3[0] - p2[0])\n    f = p1[0] * p2[1] - p1[1] * p2[0]\n    g = p3[0] * p2[1] - p3[1] * p2[0]\n    h = p3[0] * p1[1] - p3[1] * p1[0]\n    x = (d * f - c * g) / (a * 2 * (d ** 2 - c * e))\n    y = (b * g - a * h) / (c * 2 * (d ** 2 - c * e))\n    return x, y\n\n\ndef main():\n    \"\"\"Print vertex.\"\"\"\n    p1 = (0, 0)\n    p2 = (1, 1)\n    p3 = (2, 4)\n    print(find_vertex(p1, p2, p3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.8427734375
    ],
    [
      "def vertex(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3 are three points (x,y)\n    \"\"\"\n    # write your code here\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    \n    a1 = (y2 - y1) * (x3 - x2) - (x2 - x1) * (y3 - y2)\n    a2 = (y3 - y1) * (x2 - x1) - (x3 - x1) * (y2 - y1)\n    \n    if a1 == 0 and a2 == 0:\n        return \"Parabola is straight line\"\n    elif a1 == 0 and a2 != 0:\n        return \"Parabola is a circle\"\n    elif a1 != 0 and a2 == 0:\n        return \"Parabola is a line\"\n    else:\n        x = (a1 * x1 - a2 * x2) / (a1 - a2)\n        y = (a1 * y1 - a2 * y2) / (a1 - a2)\n        return (x, y)\n\n\nif __name__ == '__main__':\n    print(vertex((1, 1), (2, 2), (3, 3)))\n    print(vertex((1, 1), (2, 2), (3, 4)))\n    print(vertex((1, 1), (1, 1), (3, 3)))\n    print(vertex((1, 1), (2, 2), (3, 2)))\n    print(vertex((1, 1), (2, 2), (2, 2)))",
      -1.9208984375
    ],
    [
      "import math\nfrom typing import List\n\n\ndef parabola_vertex(x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> List[float]:\n    \"\"\"\n    Calculate the vertex of a parabola using the equation:\n    y = a(x - h) ^ 2 + k\n    :param x1: x coordinate of the first point\n    :param y1: y coordinate of the first point\n    :param x2: x coordinate of the second point\n    :param y2: y coordinate of the second point\n    :param x3: x coordinate of the third point\n    :param y3: y coordinate of the third point\n    :return: the vertex of a parabola\n    >>> parabola_vertex(1, 1, 2, 4, 3, 9)\n    [2.0, 3.0]\n    >>> parabola_vertex(0, 0, 1, 1, 2, 2)\n    [1.0, 0.0]\n    >>> parabola_vertex(0, 0, 1, 1, 0, 1)\n    [0.0, 1.0]\n    \"\"\"\n    # find the equation of the parabola\n    x1, x2, x3 = x1 - 1, x2 - 1, x3 - 1\n    y1, y2, y3 = y1 - 1, y2 - 1, y3 - 1\n    a = (y2 - y1) / (x2 - x1)\n    h = x2\n    k = y2\n    return [h, k]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.0
    ],
    [
      "import math\n\n\ndef vertex(a, b, c):\n    \"\"\"Find vertex of parabola with roots (-b / 2*a, -c / 2*a).\"\"\"\n    if a == 0:\n        raise ValueError('The parabola is not defined.')\n    else:\n        x = -b / (2 * a)\n        y = -c / (2 * a)\n        return (x, y)\n\n\ndef test_vertex():\n    \"\"\"Test for vertex function.\"\"\"\n    assert vertex(0, 0, 0) == (0, 0)\n    assert vertex(1, 2, 1) == (-1, -1)\n    assert vertex(2, 4, 4) == (-2, -2)\n    assert vertex(1, 1, 1) == (-1, -1)\n    assert vertex(1, 0, 1) == (-1, -1)\n    assert vertex(0, 1, 1) == (0, 1)\n\n\nif __name__ == '__main__':\n    test_vertex()",
      -2.06640625
    ],
    [
      "def vertex(p1, p2, p3):\n    \"\"\"\n    :param p1: first point (x, y)\n    :param p2: second point (x, y)\n    :param p3: third point (x, y)\n    :return: the vertex of the parabola (x, y)\n    \"\"\"\n    # TODO: your code here\n    return (0, 0)\n\nif __name__ == '__main__':\n    # Run your `vertex` function with points in each of the following\n    # categories and print the results to the terminal\n\n    # Same slope, same x-intercept\n    print(vertex((0, 0), (4, 0), (9, -3)))\n\n    # Same slope, different x-intercept\n    print(vertex((0, 0), (4, 0), (9, -12)))\n\n    # Different slopes, same x-intercept\n    print(vertex((0, 0), (4, 3), (9, -12)))\n\n    # Different slopes, different x-intercept\n    print(vertex((0, 0), (4, 3), (9, -24)))",
      -2.181640625
    ],
    [
      "from typing import List\n\n\ndef parabola_vertex(p1: List[float], p2: List[float], p3: List[float]) -> List[float]:\n    \"\"\"\n    Uses the focus-directrix formula to find the vertex of a parabola.\n    :param p1: x and y coordinates of the first point\n    :param p2: x and y coordinates of the second point\n    :param p3: x and y coordinates of the third point\n    :return: x and y coordinates of the parabola's vertex\n    >>> parabola_vertex([1, 1], [2, 2], [3, 3])\n    [2.0, 2.0]\n    >>> parabola_vertex([0, 0], [1, 1], [2, 2])\n    [1.0, 1.0]\n    >>> parabola_vertex([1, 1], [2, 2], [3, 4])\n    [3.0, 3.5]\n    >>> parabola_vertex([1, 1], [2, 2], [3, 2])\n    [3.0, 2.0]\n    \"\"\"\n\n    def _cross_product(u: List[float], v: List[float]) -> float:\n        \"\"\"\n        Calculates the cross product of two vectors\n        :param u: first vector\n        :param v: second vector\n        :return: cross product\n        >>> _cross_product([1, 0, 0], [0, 1, 0])\n        -1\n        >>> _cross_product([1, 0, 0], [0, 0, 1])\n        0\n        >>> _cross_product([1, 0, 0], [1, 0, 0])\n        0\n        \"\"\"\n        return u[0] * v[1] - u[1] * v[0]\n\n    def _dot_product(u: List[float], v: List[float]) -> float:\n        \"\"\"\n        Calculates the dot product of two vectors\n        :param u: first vector\n        :param v: second vector\n        :",
      -2.36328125
    ],
    [
      "from __future__ import annotations\n\nfrom functools import cache\nfrom typing import List\n\n\ndef parabola_vertex(\n    focus: tuple[int, int],\n    directrix: int,\n    *,\n    num_vertices: int = 1,\n    start: float = 0.0,\n    end: float = 100.0,\n) -> List[tuple[float, float]]:\n    \"\"\"\n    Find the vertex of a parabola.\n\n    >>> parabola_vertex((0, 0), 1)\n    [(0.0, 0.0)]\n    >>> parabola_vertex((0, 0), 2, num_vertices=2)\n    [(0.0, 0.0), (0.0, 2.0)]\n    >>> parabola_vertex((0, 0), 2, num_vertices=3)\n    [(0.0, 0.0), (0.0, 2.0), (0.0, 4.0)]\n    >>> parabola_vertex((0, 0), 2, num_vertices=1)\n    [(0.0, 0.0)]\n    >>> parabola_vertex((0, 0), 2, num_vertices=0)\n    []\n    >>> parabola_vertex((0, 0), 2, num_vertices=10)\n    [(0.0, 0.0), (0.0, 2.0), (0.0, 4.0), (0.0, 6.0), (0.0, 8.0), (0.0, 10.0), (0.0, 12.0), (0.0, 14.0), (0.0, 16.0), (0.0, 18.0)]\n    >>> parabola_vertex((0, 0), 2, num_vertices=1, start=1)\n    [(0.0, 2.0)]\n    >>> parabola_vertex((0, 0), 2, num_vertices=1",
      -2.39453125
    ],
    [
      "import math\n\ndef parabola_vertex(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n\n    # find the vertex using the focus-directrix definition\n    # of parabola\n    focus = ((p1[0] + p2[0] + p3[0]) / 3, (p1[1] + p2[1] + p3[1]) / 3)\n    directrix = focus[1] + math.sqrt(focus[1] ** 2 - focus[0])\n    vertex = (focus[0], directrix)\n\n    return vertex",
      -2.771484375
    ],
    [
      "import math\nfrom typing import List\n\n\ndef find_vertex(a: int, b: int, c: int) -> List[int]:\n    \"\"\"\n    Given the equation of a parabola:\n    ax^2 + bx + c = 0,\n    Find the vertex of the parabola.\n    \"\"\"\n    if not (a and b and c):\n        return []\n\n    if a == 0:\n        if b == 0:\n            return []\n        return [-c / b]\n\n    if b == 0:\n        return []\n\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return []\n\n    if discriminant == 0:\n        return [-b / (2 * a)]\n\n    return [\n        (-b + math.sqrt(discriminant)) / (2 * a),\n        (-b - math.sqrt(discriminant)) / (2 * a),\n    ]",
      -3.087890625
    ],
    [
      "from __future__ import annotations\n\n\ndef vertex(a: float, b: float, c: float) -> tuple[float, float]:\n    \"\"\"Find the vertex of a parabola.\n\n    Return a tuple of the vertex coordinates.\n\n    >>> vertex(1, 0, 0)\n    (0, 0)\n    >>> vertex(0, 1, 0)\n    (0, 0)\n    >>> vertex(1, 0, 1)\n    (1, -1)\n    >>> vertex(1, 1, 1)\n    (-1, 0)\n    >>> vertex(1, 1, 1) == vertex(-1, -1, -1)\n    True\n    >>> vertex(0, 1, 1)\n    (1, 0)\n    >>> vertex(1, 1, 0)\n    (0, 1)\n    \"\"\"\n    if a == 0:\n        return 0, 0\n    if b == 0:\n        return 0, 0\n    if c == 0:\n        return 0, 0\n    if a != 0 and b != 0 and c != 0:\n        return (\n            -b / (2 * a),\n            -c / (2 * a) - b ** 2 / (4 * a),\n        )",
      -3.37109375
    ],
    [
      "def parabola_vertex(p1, p2, p3):\n    # Write your code here\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    D = (x1 - x2) * (y2 - y3) - (y1 - y2) * (x2 - x3)\n    if D == 0:\n        return -1\n\n    x = (x1 * (y2 - y3) - (y1 - y2) * x2 + (y1 - y2) * x3) / D\n    y = (y1 * (x2 - x3) - (x1 - x2) * y2 + (x1 - x2) * y3) / D\n\n    return [x, y]\n\n\nprint(parabola_vertex((3, 0), (1, 4), (3, 10)))\nprint(parabola_vertex((3, 0), (1, 4), (4, 10)))",
      -3.69921875
    ],
    [
      "def vertex(p1, p2, p3):\n    # p1, p2 and p3 are the points of the parabola\n    # x1, y1, x2, y2 and x3, y3 are the coordinates of the points\n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    x3 = p3[0]\n    y3 = p3[1]\n\n    # a, b and c are the coefficients of the parabola\n    a = (y2 - y1) / (x2 - x1)\n    b = y1 - (a * x1)\n\n    # vertex is the intersection of the parabola and the x-axis\n    # vertex_x = (-b + sqrt(b*b - 4*a*c)) / (2*a)\n    vertex_x = (-b - (b * b - 4 * a * (y3 - y2)) ** 0.5) / (2 * a)\n\n    # vertex_y is the y-coordinate of the vertex\n    vertex_y = a * vertex_x + b\n\n    return vertex_x, vertex_y\n\n\nprint(vertex((3, 2), (5, 1), (1, 1)))",
      -4.140625
    ],
    [
      "import math\n\n\ndef vertex(focus, directrix):\n    \"\"\"\n    Finds the vertex of a parabola.\n\n    Args:\n        focus: the focus of the parabola\n        directrix: the directrix of the parabola\n    Returns:\n        The coordinates of the vertex\n    \"\"\"\n    if directrix == focus[1]:\n        return None\n    x = focus[0]\n    y = focus[1]\n    a = -(directrix + y) / (directrix - y)\n    vertex = [x, (a * focus[1] + y) / a]\n    return vertex\n\n\ndef main():\n    focus = [4, -5]\n    directrix = 0\n    print(vertex(focus, directrix))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.37109375
    ],
    [
      "def find_vertex(focus, directrix):\n    \"\"\"\n    Finds the vertex of a parabola\n    :param focus: focus of the parabola\n    :param directrix: directrix of the parabola\n    :return: vertex of the parabola\n    \"\"\"\n    # x_f and y_f are the coordinates of the focus\n    x_f = focus[0]\n    y_f = focus[1]\n\n    # x_d and y_d are the coordinates of the directrix\n    x_d = directrix[0]\n    y_d = directrix[1]\n\n    # the vertex of a parabola with focus (x_f, y_f) and directrix (x_d, y_d)\n    # is at coordinates (x_v, y_v) where\n    # x_v = (x_f - x_d)/(y_d - y_f)\n    # y_v = (y_f + y_d)/(y_d - y_f)\n    x_v = (x_f - x_d) / (y_d - y_f)\n    y_v = (y_f + y_d) / (y_d - y_f)\n\n    return x_v, y_v\n\n\ndef main():\n    focus = [0, 0]\n    directrix = [5, 1]\n\n    vertex = find_vertex(focus, directrix)\n    print(\"Vertex of the parabola with focus at ({},{}) and directrix at ({},{}) is at ({},{})\".format(\n        focus[0], focus[1], directrix[0], directrix[1], vertex[0], vertex[1]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.421875
    ],
    [
      "import math\nfrom typing import Optional, Tuple\n\n\ndef parabola_vertex(\n    x: float, y: float, x1: float, y1: float, x2: float, y2: float\n) -> Optional[Tuple[float, float]]:\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    a, b, c = get_abc(x, y, x1, y1, x2, y2)\n    if a == 0:\n        return None\n\n    x_v = -b / (2 * a)\n    y_v = get_y(a, b, c, x_v)\n    return x_v, y_v\n\n\ndef get_abc(x, y, x1, y1, x2, y2):\n    \"\"\"\n    Get the coefficients of the parabola.\n    \"\"\"\n    d = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    if d == 0:\n        return None\n\n    a = (y2 - y1) / d\n    b = (x1 - x2) / d\n    c = (x2 * y1 - x1 * y2) / d\n    return a, b, c\n\n\ndef get_y(a, b, c, x):\n    \"\"\"\n    Get the y-coordinate of the parabola at x.\n    \"\"\"\n    return a * x ** 2 + b * x + c\n\n\ndef main():\n    x, y = float(input()), float(input())\n    x1, y1 = float(input()), float(input())\n    x2, y2 = float(input()), float(input())\n    x_v, y_v = parabola_vertex(x, y, x1, y1, x2, y2)\n    if x_v is None:\n        print(\"No vertex\")\n    else:\n        print(\"Vertex: ({:.2f}, {:.2f})\".format(x_v, y_v))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.515625
    ],
    [
      "def vertex(focus, directrix):\n    \"\"\"\n    Return vertex of a parabola.\n\n    >>> vertex((0, 0), 0)\n    (0.0, 0.0)\n    >>> vertex((3, 4), 1)\n    (1.5, 0.0)\n    >>> vertex((0, 0), 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: focus and directrix must be on the same side of the y-axis.\n    >>> vertex((0, 0), -2)\n    Traceback (most recent call last):\n        ...\n    ValueError: focus and directrix must be on the same side of the y-axis.\n    \"\"\"\n    if focus[1] >= 0 and directrix <= 0:\n        return (0, 0)\n    if focus[1] < 0 and directrix >= 0:\n        return (0, 0)\n    if focus[1] > 0 and directrix > 0:\n        return (focus[0] - directrix, 0)\n    if focus[1] < 0 and directrix < 0:\n        return (focus[0] - directrix, 0)\n    return (0, 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.62890625
    ],
    [
      "import math\n\ndef vertex(focus, directrix):\n    \"\"\"\n    :param focus: focus of parabola (x, y)\n    :param directrix: y-value of directrix\n    :return: vertex (x, y)\n    \"\"\"\n    x_f, y_f = focus\n    x_v = x_f + (directrix - y_f) * 1/2\n    y_v = directrix\n    return x_v, y_v\n\ndef test_vertex():\n    \"\"\"\n    >>> vertex((0, 0), 0)\n    (0.0, 0.0)\n    >>> vertex((0, 0), 1)\n    (0.0, 1.0)\n    >>> vertex((0, 0), -1)\n    (0.0, -1.0)\n    >>> vertex((1, 0), 0)\n    (1.0, 0.0)\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.6640625
    ],
    [
      "from math import sqrt\n\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Returns the vertex of a parabola.\n\n    >>> parabola_vertex(3, 4, 5)\n    (3.0, -0.25)\n    >>> parabola_vertex(1, -1, 0)\n    (1.0, 0.0)\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n\n    vertex_x = -b / (2 * a)\n    vertex_y = (4 * a * c - b * b) / (4 * a)\n    return (vertex_x, vertex_y)\n\n\ndef parabola_vertex_alt(a, b, c):\n    \"\"\"\n    Returns the vertex of a parabola.\n\n    >>> parabola_vertex_alt(3, 4, 5)\n    (3.0, -0.25)\n    >>> parabola_vertex_alt(1, -1, 0)\n    (1.0, 0.0)\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n\n    vertex_x = -b / (2 * a)\n    vertex_y = sqrt(b * b - 4 * a * c) / (2 * a)\n    return (vertex_x, vertex_y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.0859375
    ],
    [
      "def find_vertex(focus, directrix):\n    \"\"\"\n    Find the vertex of a parabola given the focus and directrix.\n\n    Args:\n     focus: a tuple of (x, y) representing the focus of the parabola\n     directrix: a tuple of (x, y) representing the directrix of the parabola\n\n    Returns:\n     a tuple of (x, y) representing the vertex of the parabola\n    \"\"\"\n    if focus[1] == directrix[1]:\n        return focus\n\n    x = (focus[1] - directrix[1]) / (directrix[0] - focus[0])\n    y = focus[1] - 2 * (focus[1] - directrix[1]) / (directrix[0] - focus[0])\n\n    return x, y\n\ndef main():\n    print find_vertex((1, 1), (1, 0))\n    print find_vertex((1, 1), (3, 0))\n\nif __name__ == '__main__':\n    main()",
      -5.40234375
    ],
    [
      "def parabola_vertex(a, b, c):\n    \"\"\"\n    >>> parabola_vertex(1, 2, 3)\n    (3.0, 1.0)\n    >>> parabola_vertex(-1, 2, 3)\n    (3.0, -1.0)\n    \"\"\"\n    # y = ax^2 + bx + c\n    # x = (b - \u221a(b^2 - 4ac)) / 2a\n    # y = a(x^2 + bx + c)\n    # y = a(x + d)^2 + e\n    # d = (2a^2 + b) / 2a\n    # e = (b^2 - 4ac) / 4a\n    d = (2 * a ** 2 + b) / (2 * a)\n    e = (b ** 2 - 4 * a * c) / (4 * a)\n    return d, e\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.40625
    ],
    [
      "import math\nfrom typing import List\n\n\ndef parabola_vertex(p1: List[float], p2: List[float], p3: List[float]) -> List[float]:\n    \"\"\"\n    Calculate the vertex of a parabola.\n    :param p1: coordinates of first point\n    :param p2: coordinates of second point\n    :param p3: coordinates of third point\n    :return: coordinates of parabola vertex\n    \"\"\"\n    # calculate the matrix\n    a = (p2[1] - p1[1])**2 + (p2[2] - p1[2])**2\n    b = 2 * ((p2[0] - p1[0]) * (p2[1] - p1[1]) + (p2[2] - p1[2]) * (p2[1] - p1[1]))\n    c = (p2[0] - p1[0])**2 + (p2[1] - p1[1])**2\n\n    # calculate the determinant\n    det = b**2 - 4 * a * c\n\n    # return None if no vertex\n    if det < 0:\n        return None\n\n    # calculate the vertex\n    x = (-b + math.sqrt(det)) / (2 * a)\n    y = (p2[0] - p1[0]) * x + (p2[1] - p1[1])\n\n    return [x, y]",
      -5.54296875
    ],
    [
      "from __future__ import annotations\n\nfrom math import sqrt\nfrom typing import Optional\n\n\ndef vertex_of_parabola(\n    a: float,\n    b: float,\n    c: float,\n    is_y_axis_positive: bool = True,\n) -> Optional[tuple[float, float]]:\n    \"\"\"\n    Returns the vertex of the parabola.\n    >>> vertex_of_parabola(1, 2, 1)\n    (0.0, 0.0)\n    >>> vertex_of_parabola(2, 1, -3)\n    (0.0, 0.0)\n    >>> vertex_of_parabola(2, 2, -2)\n    (-1.0, 0.0)\n    >>> vertex_of_parabola(2, 2, -2, False)\n    (1.0, 0.0)\n    \"\"\"\n    if a == 0:\n        return None\n    elif a == 1:\n        return (0, 0)\n\n    vertex_x = -b / (2 * a)\n    vertex_y = -c / (2 * a)\n    if is_y_axis_positive:\n        return (vertex_x, vertex_y)\n    else:\n        return (-vertex_x, -vertex_y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    import python_ta\n\n    python_ta.check_all(config={\"extra-imports\": [\"math\"], \"max-line-length\": 100})",
      -5.57421875
    ],
    [
      "def parabola_vertex(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    :param p1: tuple\n    :param p2: tuple\n    :param p3: tuple\n    :return: tuple\n    \"\"\"\n    # Find the vertex of a parabola.\n    # a(x-h)**2 + k\n    # h = x - (b/2a)\n    # k = (y - ax**2)/2a\n    a = (p1[1] - p2[1]) / (p1[0] - p2[0])\n    b = p1[0]\n    h = b / (2 * a)\n    k = (p1[1] - (a * b**2)) / (2 * a)\n    return h, k\n\n\nif __name__ == '__main__':\n    print(parabola_vertex((1, 1), (1, 2), (1, 4)))",
      -5.6328125
    ],
    [
      "from typing import Tuple\n\n\ndef parabola_vertex(\n    x1: float, y1: float, x2: float, y2: float, x3: float, y3: float\n) -> Tuple[float, float]:\n    \"\"\"Find the vertex of a parabola.\n\n    :param x1: x coordinate of the first point\n    :param y1: y coordinate of the first point\n    :param x2: x coordinate of the second point\n    :param y2: y coordinate of the second point\n    :param x3: x coordinate of the third point\n    :param y3: y coordinate of the third point\n    :return: x and y coordinates of the parabola's vertex\n    \"\"\"\n    # pylint: disable=invalid-name\n    A = [\n        [\n            x1 ** 2,\n            x1,\n            1,\n        ],\n        [\n            x2 ** 2,\n            x2,\n            1,\n        ],\n        [\n            x3 ** 2,\n            x3,\n            1,\n        ],\n    ]\n    B = [\n        y1,\n        y2,\n        y3,\n    ]\n    A = [\n        [\n            A[0][0],\n            A[0][1],\n            A[0][2],\n        ],\n        [\n            A[1][0],\n            A[1][1],\n            A[1][2],\n        ],\n        [\n            A[2][0],\n            A[2][1],\n            A[2][2],\n        ],\n    ]\n    B = [\n        B[0],\n        B[1],\n        B[2],\n    ]\n    return (\n        -1 * A[0][2] / A[0][0],\n        -1 * A[0][1] / A[0][0]\n        + A[0][0] * (-1 * A[0][2] / A[0][0]) / A[0][0],\n    )\n\n\nif __name__ == \"__main__\":\n    X1 = 1\n    Y1 = 1\n    X2 =",
      -5.93359375
    ],
    [
      "import math\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    a is the coefficient of x^2\n    b is the coefficient of x\n    c is the coefficient of y\n    \"\"\"\n    x = ((b * c) - (a * c)) / (a * b)\n    y = a * x ** 2 + b * x + c\n    return (x, y)\n\nassert parabola_vertex(1, 2, 3) == (1, 1)\nassert parabola_vertex(1, 0, 0) == (-0.5, 0)\nassert parabola_vertex(1, -1, 0) == (0, 0)\nassert parabola_vertex(1, -1, 1) == (0, 1)\n\n# To test with random values\nimport random\n\ndef parabola_vertex_random():\n    a = random.randint(1, 100)\n    b = random.randint(-100, 100)\n    c = random.randint(-100, 100)\n    return parabola_vertex(a, b, c)\n\nfor i in range(10):\n    print(parabola_vertex_random())\n\n# To test with equation\nimport re\n\ndef parabola_vertex_equation(equation):\n    \"\"\"\n    Equation should be in the form of: y = a * x^2 + b * x + c\n    \"\"\"\n    equation = equation.replace(\" \", \"\")\n    equation = equation.replace(\"=\", \"\")\n    equation = equation.replace(\"y\", \"1\")\n    equation = equation.replace(\"x\", \"x\")\n\n    a, b, c = map(int, re.split(\"\\+|-|\\*\", equation))\n    return parabola_vertex(a, b, c)\n\nassert parabola_vertex_equation(\"y = 1 * x^2 + 0 * x + 0\") == (0, 0)\nassert parabola_vertex_equation(\"y = 1 * x^2 + 0 * x +",
      -6.03515625
    ],
    [
      "from __future__ import annotations\n\nfrom math import sqrt\nfrom typing import Optional\n\n\ndef find_vertex(\n    x_coordinate: float,\n    y_coordinate: float,\n    focus: tuple[float, float],\n    directrix: float,\n) -> Optional[tuple[float, float]]:\n    \"\"\"\n    >>> find_vertex(1, 4, (0, 0), 0)\n    (1, 4)\n    >>> find_vertex(0, 0, (0, 0), 0)\n    (0, 0)\n    >>> find_vertex(-1, 4, (0, 0), 0) is None\n    True\n    >>> find_vertex(1, 4, (0, 0), -1) is None\n    True\n    \"\"\"\n    x_focus, y_focus = focus\n\n    if x_focus == 0 and y_focus == 0:\n        return (x_coordinate, y_coordinate)\n\n    if x_focus != 0 and y_focus != 0:\n        if x_focus >= 0:\n            x_focus = abs(x_focus)\n        else:\n            x_focus = -x_focus\n        if y_focus >= 0:\n            y_focus = abs(y_focus)\n        else:\n            y_focus = -y_focus\n\n    if x_coordinate == x_focus:\n        if x_focus == 0:\n            return (x_coordinate, y_coordinate)\n        else:\n            return None\n\n    if y_coordinate == y_focus:\n        return (x_coordinate, y_coordinate)\n\n    if directrix > 0:\n        if x_focus == 0:\n            x_coordinate = 0\n        else:\n            x_coordinate = -y_coordinate / (y_focus - y_coordinate) * x_focus\n        return (x_coordinate, y_coordinate)\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.1171875
    ],
    [
      "def vertex_parabola(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    :param p1: vertex of the parabola\n    :param p2: one focus of the parabola\n    :param p3: other focus of the parabola\n    :type p1: Point\n    :type p2: Point\n    :type p3: Point\n    :return: vertex of the parabola\n    :rtype: Point\n    \"\"\"\n    x_p1, y_p1 = p1.get_coordinate()\n    x_p2, y_p2 = p2.get_coordinate()\n    x_p3, y_p3 = p3.get_coordinate()\n\n    if x_p1 == x_p2 and x_p1 == x_p3:\n        raise ValueError('The points are collinear')\n\n    elif x_p1 != x_p2 and x_p1 != x_p3:\n        raise ValueError('The points are not on the same line')\n\n    else:\n        # y = a(x-h)^2 + k\n        # (y-k) = a(x-h)^2\n        # y = a(x-h)^2 + k\n        # a = (y-k)/(x-h)^2\n        if x_p1 != x_p2:\n            a = (y_p1 - y_p3) / ((x_p1 - x_p2) ** 2)\n            h = x_p1\n            k = y_p1 - a * (x_p1 - h) ** 2\n\n        else:\n            a = (y_p1 - y_p3) / ((x_p1 - x_p3) ** 2)\n            h = x_p1\n            k = y_p1 - a * (x_p1 - h) ** 2\n\n        return Point(h, k)",
      -6.4609375
    ],
    [
      "def vertex_of_parabola(focus, directrix):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    >>> vertex_of_parabola(0, 0)\n    Traceback (most recent call last):\n    ...\n    ValueError: Focus cannot be at the origin\n\n    >>> vertex_of_parabola(0, 2)\n    Traceback (most recent call last):\n    ...\n    ValueError: Directrix cannot be parallel to the x-axis\n\n    >>> vertex_of_parabola(2, 0)\n    (0, 0)\n\n    >>> vertex_of_parabola(2, 1)\n    (0, 1)\n\n    >>> vertex_of_parabola(2, 3)\n    (-1, 0)\n\n    >>> vertex_of_parabola(2, 5)\n    (-1, 1)\n\n    >>> vertex_of_parabola(2, 7)\n    (-1, 2)\n\n    >>> vertex_of_parabola(2, 9)\n    (-1, 3)\n\n    >>> vertex_of_parabola(2, 11)\n    (-1, 4)\n\n    >>> vertex_of_parabola(3, 11)\n    (-2, 4)\n    \"\"\"\n    if focus == (0, 0):\n        raise ValueError(\"Focus cannot be at the origin\")\n    if directrix == 0:\n        raise ValueError(\"Directrix cannot be parallel to the x-axis\")\n\n    # Directrix is the x-axis\n    if focus[1] == 0:\n        return (0, 0)\n\n    # Directrix is the y-axis\n    if focus[0] == 0:\n        return (0, directrix)\n\n    # Directrix is neither the x-axis nor the y-axis\n    # Find the vertex\n    slope = (focus[1] - directrix) / (focus[0] + directrix)\n    return (-directrix / slope, directrix)",
      -6.66796875
    ],
    [
      "from math import sqrt\n\n\ndef parabola(a, b, c):\n    \"\"\"\n    >>> parabola(1, 2, 3)\n    (3.0, 1.0)\n    \"\"\"\n    # Calculate the vertex of the parabola\n    if a == 0:\n        raise ValueError(\"a cannot be 0\")\n    vertex_x = -b / (2 * a)\n    vertex_y = -4 * a * vertex_x + b ** 2 / (4 * a)\n\n    # Calculate the focus of the parabola\n    focus_x = -b / (2 * a)\n    focus_y = vertex_y + c\n\n    # Calculate the directrix of the parabola\n    directrix_y = vertex_y + c\n    directrix_x = sqrt((directrix_y - b ** 2 / (4 * a)) ** 2 - vertex_x ** 2)\n\n    return vertex_x, vertex_y, focus_x, focus_y, directrix_x, directrix_y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.79296875
    ],
    [
      "import math\n\n\ndef parabola_vertex(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola given three points.\n\n    :param p1: Point 1\n    :type p1: list\n    :param p2: Point 2\n    :type p2: list\n    :param p3: Point 3\n    :type p3: list\n    :return: x, y\n    :rtype: tuple\n    \"\"\"\n    a = (p1[1] - p2[1]) ** 2 - (p1[0] - p2[0]) ** 2\n    b = 2 * (p2[0] ** 2 - p2[0] * p2[1] + p2[1] ** 2 - p1[0] ** 2 + p1[0] * p1[1] - p1[1] ** 2 - p3[0] ** 2 + p3[0] * p3[1] - p3[1] ** 2)\n    c = p1[0] ** 2 - 2 * p1[0] * p1[1] + p1[1] ** 2 - p2[0] ** 2 + 2 * p2[0] * p2[1] - p2[1] ** 2\n    x = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    y = ((p1[1] - p2[1]) ** 2 / (p1[0] - p2[0]) ** 2 * (x - p1[0]) + p1[1])\n    return x, y\n\n\nif __name__ == \"__main__\":\n    p1 = (1, 1)\n    p2 = (4, 2)\n    p3 = (7, 4)\n    print(parabola_vertex(p1, p2, p3))",
      -6.8984375
    ],
    [
      "from math import sqrt\nfrom decimal import Decimal\n\n\ndef parabola_vertex(p1, p2, p3):\n    \"\"\"\n    :param p1: point 1\n    :param p2: point 2\n    :param p3: point 3\n    :return: vertex\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x = (x1*y2*y3 - x2*y1*y3 - x3*y1*y2 + x2*y3**2 + x3*y1**2 + x1*y2**2) / (y1**2*y2 - y1**2*y2**2 - y2**2*y1**2 - y1*y2*y2**2)\n    y = -1 * (y1**2 + y2**2 + y3**2 - x**2) / (2 * (y1 + y2 + y3))\n    return x, y\n\n\ndef parabola_vertex_v2(p1, p2, p3):\n    \"\"\"\n    :param p1: point 1\n    :param p2: point 2\n    :param p3: point 3\n    :return: vertex\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x = Decimal((x1*y2*y3 - x2*y1*y3 - x3*y1*y2 + x2*y3**2 + x3*y1**2 + x1*y2**2) / (y1**2*y2 - y1**2*y2**2 - y2**2*y1**2 - y1*y2*y2**2))\n    y = Decimal(-1 * (y1**2 + y2**2 + y3**2 - x**2) / (2 * (y1 + y2 + y3)))\n    return x, y\n\n\ndef parabola_vertex_v3(p1, p2, p",
      -7.29296875
    ],
    [
      "from __future__ import annotations\n\nfrom math import sqrt\n\n\ndef parabola_vertex(p1: tuple[float, float], p2: tuple[float, float], p3: tuple[float, float]) -> tuple[float, float]:\n    \"\"\"\n    >>> parabola_vertex((1, 2), (3, 4), (5, 6))\n    Traceback (most recent call last):\n        ...\n    ValueError: The points do not form a parabola.\n    >>> parabola_vertex((0, 0), (0, 1), (0, 2))\n    (0.0, 0.0)\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    if x1 == x2 and x2 == x3:\n        raise ValueError(\"The points do not form a parabola.\")\n\n    # Find the a, b, c coefficients of the parabola equation\n    # a(x - h)^2 + k = 0\n    a = (y2 - y1) * (x3 - x2) - (x2 - x1) * (y3 - y2)\n    b = (y2 - y1) * (x3 - x1) - (x2 - x1) * (y3 - y1)\n    c = (x2 - x1) * (y1 - y2) - (y2 - y1) * (x1 - x2)\n\n    # Find the vertex\n    h = -b / (2 * a)\n    k = c - b ** 2 / (4 * a)\n\n    return h, k\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.30078125
    ],
    [
      "def vertex(p1, p2, p3):\n    \"\"\"\n    >>> vertex((1, 1), (2, 4), (3, 9))\n    (1, 1)\n    \"\"\"\n    A = (p1[1] - p2[1]) ** 2 - (p1[0] - p2[0]) ** 2\n    B = 2 * ((p2[1] - p1[1]) * (p1[0] - p2[0]) - (p2[0] - p1[0]) * (p1[1] - p2[1]))\n    C = (p1[1] - p2[1]) ** 2 * (p1[0] - p2[0]) ** 2 - (p1[0] - p2[0]) ** 2 * (p1[1] - p2[1]) ** 2\n\n    if A == 0:\n        return None\n\n    x = -B / (2 * A)\n    y = ((C - B ** 2 / (4 * A)) / A)\n\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -7.5625
    ],
    [
      "from __future__ import annotations\n\nfrom math import sqrt\n\n\ndef vertex(a: float, b: float, c: float) -> tuple[float, float]:\n    \"\"\"Return the vertex of a parabola.\n\n    >>> vertex(1, 0, 0)\n    (0.0, 0.0)\n    >>> vertex(1, 2, 3)\n    (1.5, -0.25)\n    >>> vertex(1, -2, -3)\n    (1.5, -0.25)\n    >>> vertex(0, 0, 0)\n    (nan, nan)\n    >>> vertex(1, 0, 1)\n    (1.0, 1.0)\n    >>> vertex(1, 0, -1)\n    (1.0, -1.0)\n    >>> vertex(1, 1, 0)\n    (0.5, 0.5)\n    >>> vertex(1, -1, 0)\n    (0.5, -0.5)\n    \"\"\"\n    if a == 0:\n        return (0, 0)\n\n    b2a2 = b ** 2 - 4 * a * c\n    if b2a2 < 0:\n        return (float(\"nan\"), float(\"nan\"))\n\n    x = (b + sqrt(b2a2)) / (2 * a)\n    y = -c / (a * x)\n    return (x, y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.73828125
    ],
    [
      "from math import sqrt\n\n\ndef vertex(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola.\n    :param p1: the coordinates of the first point\n    :param p2: the coordinates of the second point\n    :param p3: the coordinates of the third point\n    :return: a tuple with the coordinates of the vertex\n\n    >>> vertex((1, 1), (2, 3), (3, 6))\n    (1.5, -1.5)\n    \"\"\"\n    a = p1[1] - 2 * p2[1] + p3[1]\n    b = 2 * p2[0] - 4 * p2[1] + 2 * p3[0] - 2 * p3[1]\n    c = p2[0] - 2 * p2[1] + p3[0] + p3[1]\n    d = 2 * p2[1] - p3[1]\n\n    x = (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    y = d / a + (x - p2[0]) / (p2[1] - p1[1]) * (p1[1] - p3[1])\n\n    return x, y\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.8828125
    ],
    [
      "def parabola_vertex(p1, p2, p3):\n    \"\"\"\n    :param p1: 2d point\n    :param p2: 2d point\n    :param p3: 2d point\n    :return: vertex of parabola\n    \"\"\"\n    # First we find the equation of the parabola\n    a1 = p1[1] - p2[1]\n    a2 = p2[1] - p3[1]\n    a3 = p3[1] - p1[1]\n    b1 = p1[0] - p2[0]\n    b2 = p2[0] - p3[0]\n    b3 = p3[0] - p1[0]\n    a = a1 * b2 - a2 * b1\n    b = a3 * b1 - a1 * b3\n    c = a2 * b3 - a3 * b2\n\n    # Then we find the vertex\n    x = (b * b - 4 * a * c) / (4 * a * a)\n    y = (-b - (b * b - 4 * a * c) ** 0.5) / (2 * a)\n\n    return (x, y)",
      -8.109375
    ],
    [
      "from math import isclose\n\ndef find_vertex(p1, p2, p3):\n    \"\"\"\n    p1, p2, p3 are points of a parabola.\n    Find the vertex of the parabola.\n    \"\"\"\n    # Calculate the coordinates of the vertex\n    a = (p2[1] - p1[1])**2 - (p2[0] - p1[0])**2\n    b = 2 * (p2[0] - p1[0]) * (p3[1] - p1[1]) - 2 * (p2[1] - p1[1]) * (p3[0] - p1[0])\n    c = (p3[1] - p1[1])**2 - (p3[0] - p1[0])**2\n\n    if a == 0:\n        # p1, p2, p3 are collinear\n        if b == 0:\n            # p1, p2, p3 are all the same point\n            return p1\n        else:\n            # p1 is the vertex\n            return p1\n\n    vertex_x = -b / (2 * a)\n    vertex_y = (c - b**2 / (4 * a)) / a\n    return (vertex_x, vertex_y)\n\ndef main():\n    p1 = (0, 0)\n    p2 = (1, 4)\n    p3 = (2, 4)\n    vertex = find_vertex(p1, p2, p3)\n    print(vertex)\n\n    p1 = (0, 0)\n    p2 = (1, 0)\n    p3 = (2, -4)\n    vertex = find_vertex(p1, p2, p3)\n    print(vertex)\n\n    p1 = (0, 0)\n    p2 = (1, 0)\n    p3 = (2, 4)\n    vertex = find_vertex(p1, p2, p3)\n    print(vertex)\n\n    p1 = (0, 0)\n    p2 = (1",
      -8.125
    ],
    [
      "from __future__ import annotations\n\nfrom math import isclose\n\n\ndef parabola_vertex(\n    focus: tuple[float, float],\n    directrix: float,\n) -> tuple[float, float]:\n    \"\"\"\n    Calculate the vertex of a parabola.\n\n    >>> parabola_vertex((0, 0), 0)\n    (0, 0)\n    >>> parabola_vertex((0, 0), 1)\n    (0, 1)\n    >>> parabola_vertex((0, 0), -1)\n    (0, -1)\n    >>> parabola_vertex((0, 0), 2)\n    (-2, 0)\n    >>> parabola_vertex((0, 0), -2)\n    (-2, 0)\n    >>> parabola_vertex((0, 0), 3)\n    (-3, 0)\n    >>> parabola_vertex((0, 0), 4)\n    (-4, 0)\n    >>> parabola_vertex((0, 0), 5)\n    (-5, 0)\n    >>> parabola_vertex((1, 1), 0)\n    (1, 2)\n    >>> parabola_vertex((2, 1), 0)\n    (2, 3)\n    >>> parabola_vertex((-1, 1), 0)\n    (-1, 2)\n    >>> parabola_vertex((-2, 1), 0)\n    (-2, 3)\n    \"\"\"\n    if isclose(focus[1], 0):\n        return focus[0], 0\n    if focus[1] > 0:\n        return focus[0], focus[1] + directrix\n    return focus[0], focus[1] - directrix\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    focus = tuple(map(float, input(\"Enter focus: \").split()))\n    directrix = float(input(\"Enter directrix: \"))\n    print(",
      -8.84375
    ],
    [
      "from math import sqrt\n\n\ndef vertex(p1, p2, p3):\n    \"\"\"\n    :param p1: First point\n    :param p2: Mid point\n    :param p3: Second point\n    :return: Vertex of parabola\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    if y1 == y2 == y3:\n        return None\n    if x1 == x2 == x3:\n        return (x1, y1)\n    if y1 == y2:\n        return (x1, y1)\n    if x1 == x2:\n        return (x1, y1)\n    if y1 == y3:\n        return (x1, y1)\n    if x1 == x3:\n        return (x1, y1)\n    if y2 == y3:\n        return (x2, y2)\n    if x2 == x3:\n        return (x2, y2)\n    return (\n        (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / (\n            (y2 - y3) * (x1 - x2) + (y3 - y1) * (x2 - x3) + (y1 - y2) * (x3 - x1)\n        ),\n        (\n            (y2 - y3) * sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) + (y3 - y1) * sqrt(\n                (x2 - x3) ** 2 + (y2 - y3) ** 2) + (y1 - y2) * sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2)\n        ) / (\n            (y2 - y3) * (x1 - x2) + (y3 - y1) * (x2 - x3) + (y1 - y2) * (x3 - x1)\n        )\n    )\n\n\nif __name__",
      -9.3203125
    ],
    [
      "from math import sqrt\nfrom typing import List, Tuple\n\n\ndef parabola_vertex(p1: Tuple[float, float], p2: Tuple[float, float], p3: Tuple[float, float]) -> List[float]:\n    \"\"\"\n    Calculate the vertex of a parabola given 3 points.\n    >>> parabola_vertex((0, 0), (1, 1), (2, 2))\n    [1.0, 1.0]\n    >>> parabola_vertex((1, 1), (0, 0), (2, 2))\n    [1.0, 1.0]\n    >>> parabola_vertex((0, 0), (2, 2), (1, 1))\n    [1.0, 1.0]\n    \"\"\"\n    a = (p1[1] - p2[1]) ** 2\n    b = (p2[0] - p3[0]) * (p1[1] - p2[1])\n    c = (p2[0] - p3[0]) ** 2\n    d = (p1[0] - p2[0]) * (p2[1] - p3[1])\n    e = (p1[0] - p2[0]) ** 2\n\n    if a != 0:\n        x = (b ** 2 - 4 * a * c) / (4 * a ** 2)\n        y = (d - b * x) / a\n        return [x, y]\n    elif b != 0:\n        y = (d ** 2 - 4 * b * e) / (4 * b ** 2)\n        x = (d - b * y) / e\n        return [x, y]\n    else:\n        return []\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -9.5
    ],
    [
      "def find_vertex(p1, p2, p3):\n    \"\"\"\n    :param p1, p2, p3: Parabola vertex points.\n    :return: The vertex point.\n    \"\"\"\n    a1, b1, c1 = p1[0], p1[1], p1[2]\n    a2, b2, c2 = p2[0], p2[1], p2[2]\n    a3, b3, c3 = p3[0], p3[1], p3[2]\n    a, b, c = 0, 0, 0\n\n    a = a1 - a2\n    b = b1 - b2\n    c = c1 - c2\n    d = a * a1 + b * b1 + c * c1\n\n    x = (b * c2 - b2 * c) / (a * b2 - b * a2)\n    y = (a * c2 - a2 * c) / (b * a2 - a * b2)\n    z = (a * b2 * d - a2 * b * c + a * b * c3 - a2 * b3 * c + b2 * c * d - b * c2 * d) / (a * b2 - b * a2)\n    return x, y, z\n\nif __name__ == \"__main__\":\n    p1, p2, p3 = [0, 0, 0], [1, 2, 3], [3, 2, 1]\n    print(find_vertex(p1, p2, p3))",
      -10.0
    ],
    [
      "def parabola_vertex(focus, directrix):\n    \"\"\"\n    :param focus: (x,y) tuple\n    :param directrix: y = kx\n    :return: (x,y) tuple\n    \"\"\"\n    x_focus, y_focus = focus\n    x_directrix, y_directrix = directrix\n\n    if x_focus == x_directrix:\n        return None\n    else:\n        k = (y_directrix - y_focus) / (x_directrix - x_focus)\n        x = (y_focus - k * x_focus) / (k ** 2 - 1)\n        y = k * x + y_focus - k * x_focus\n        return x, y\n\n\nif __name__ == '__main__':\n    print(parabola_vertex((0, 0), (1, 0)))\n    print(parabola_vertex((1, 0), (0, 1)))\n    print(parabola_vertex((1, 0), (1, 1)))\n    print(parabola_vertex((0, 1), (0, 0)))\n    print(parabola_vertex((-1, 0), (-1, 1)))\n    print(parabola_vertex((0, 1), (1, 1)))",
      -10.6640625
    ],
    [
      "import math\n\n\ndef parabola_vertex(p1, p2, p3):\n    \"\"\"\n    Return the vertex of a parabola given 3 points on it.\n    \"\"\"\n    a = p1[0]\n    b = p1[1]\n    c = p2[0]\n    d = p2[1]\n    e = p3[0]\n    f = p3[1]\n    g = a**2 - 2 * a * c + c**2 + b**2 - 2 * b * d + d**2\n    h = 2 * (a**2 - 2 * a * e + e**2 + b**2 - 2 * b * f + f**2)\n    i = a**2 - 2 * a * e + e**2 + b**2 - 2 * b * f + f**2 - g**2\n    j = 2 * (a**2 - 2 * a * g + g**2 + b**2 - 2 * b * h + h**2)\n    k = a**2 - 2 * a * g + g**2 + b**2 - 2 * b * h + h**2 - i**2\n    x = (j + k) / (2 * math.sqrt((j - k)**2 + 4 * i**2))\n    y = (-2 * i + math.sqrt((j - k)**2 + 4 * i**2)) / (2 * (j - k))\n    return x, y\n\n\nif __name__ == \"__main__\":\n    points = [(1, 2), (3, 4), (5, 6)]\n    print(parabola_vertex(points[0], points[1], points[2]))",
      -10.9921875
    ],
    [
      "def vertex(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    # p1, p2, p3 are 3 points on a parabola\n    # the vertex is the midpoint of the chord between p1 and p3\n\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    # slope of chord is 0\n    # y = mx + b\n    # (y1 - y2)x + (x2 - x1)y = 0\n    # (y1 - y2)x + (x2 - x1)y + (x2^2 - x1^2 + y1 - y2) = 0\n    # x = (-(y1 - y2) +/- sqrt((y1 - y2)^2 - 4(x2 - x1)(y1 - y2))) / (2(x2 - x1))\n\n    # x = (-(y1 - y2) + sqrt((y1 - y2)^2 - 4(x2 - x1)(y1 - y2))) / (2(x2 - x1))\n    # x = (-(y1 - y2) + sqrt(y1^2 - 2y1y2 + y2^2 + x1^2 - 2x1x2 + x2^2 - y1^2 + 2y1y2 - x1^2 + 2x1x2 - x2^2)) / (2(x2 - x1))\n    # x = (-(y1 - y2) + sqrt(4y1^2 - 8y1y2 + 4y2^2 + 4x1^2 - 8x1x2 + 4x2^2)) / (2(x2 - x1))\n    # x = (-(y1 - y2) + sqrt(4(y1 - y2)^2 + 4(x1 - x2)^2)) / (2(x2 - x1))\n    # x = (-(y1 - y2) + sqrt(4(",
      -11.6953125
    ],
    [
      "import math\n\ndef parabola_vertex(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    if x1 == x2 and x2 == x3 and y1 == y2 and y2 == y3:\n        return x1, y1\n\n    # y = a(x - h)^2 + k\n    # (y1 - y2) = a(x1 - x2)(x1 - x3)\n    # (y2 - y3) = a(x2 - x3)(x2 - x1)\n    # (y1 - y2) / (y2 - y3) = (x1 - x2)(x1 - x3) / (x2 - x3)(x2 - x1)\n    # (x2 - x1) / (x1 - x2) = (y2 - y3) / (y1 - y2)\n    # a = (x2 - x1) / (y1 - y2)\n    # (x1 - x2)(x1 - x3) / (x2 - x3)(x2 - x1) = a\n    # (x1 - x2) / (x2 - x3) = a / (x2 - x1)\n    # (x1 - x2)(x2 - x3) = a(x2 - x1)(x1 - x3)\n    # (x1 - x2)(x2^2 - x1x3 - x2x3 + x1x3) = a(x2 - x1)(x1^2 - x3x1 - x1x2 + x3x1)\n    # (x1 - x2)(x2^2 - x3x1 - x1x2 + x3x1) = a(x1^2 - x3x1 - x1x2 + x3x1)(x2 - x1)\n    # (x1 - x2)(x2^2 - x3x1 - x1x2 + x3x1 - x1^2 + x3x1 - x1x2 + x3x1) = a(x1",
      -11.765625
    ],
    [
      "import math\n\n\ndef find_vertex(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    :param p1: first point\n    :param p2: second point\n    :param p3: third point\n    :return: vertex\n    \"\"\"\n    p1x, p1y = p1\n    p2x, p2y = p2\n    p3x, p3y = p3\n    a = (p1x + p2x + p3x) / 3\n    b = (p1y + p2y + p3y) / 3\n    c = (((p1x - a) ** 2) / 4 + (p1y - b) ** 2) + (((p2x - a) ** 2) / 4 + (p2y - b) ** 2) + (((p3x - a) ** 2) / 4 + (p3y - b) ** 2)\n    x = -(b ** 2 - c) / (2 * a - 2 * b)\n    y = (a ** 2 - c) / (4 * a - 4 * b)\n    return x, y\n\n\ndef find_vertex_math(p1, p2, p3):\n    \"\"\"\n    Find the vertex of a parabola using math library.\n\n    :param p1: first point\n    :param p2: second point\n    :param p3: third point\n    :return: vertex\n    \"\"\"\n    return math.pow(p1[0] * p2[0] * p3[0] + p1[1] * p2[1] * p3[1] + p1[0] * p2[1] * p3[1] + p1[1] * p2[0] * p3[0] - p1[0] * p2[0] * p3[1] - p1[1] * p2[1] * p3[0] - p1[0] * p2[1] * p3[0] - p1[1] * p2[0] * p3[1], 2",
      -12.0546875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}