{
  "problem": {
    "task_id": "MBPP/50",
    "prompt": "Write a function to find the list with minimum length using lambda function.",
    "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
    "test_list": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ],
    "challenge_test_list": [],
    "problem_id": 39
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\ndef min_len_list(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"Find the list with minimum length using lambda function.\n\n    Args:\n        list_of_lists (List[List[int]]): List of lists.\n\n    Examples:\n        >>> min_len_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14]])\n        [4, 5]\n        >>> min_len_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n        [1, 2, 3]\n    \"\"\"\n    return min(list_of_lists, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(min_len_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14]]))\n    print(min_len_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]))",
      14.2421875
    ],
    [
      "from typing import List\n\n\ndef find_min_list(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns the list with minimum length.\n\n    Args:\n        list_of_lists (List[List[int]]): The list of lists.\n\n    Examples:\n        >>> assert find_min_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == [4, 5]\n    \"\"\"\n    return min(list_of_lists, key=lambda list_: len(list_))\n\n\nif __name__ == \"__main__\":\n    print(find_min_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]))",
      13.4609375
    ],
    [
      "from typing import List\n\n\ndef find_min_list(lists: List[list]) -> list:\n    \"\"\"Finds the list with minimum length.\n\n    Args:\n        lists (List[list]): list of lists\n\n    Returns:\n        list: list with minimum length\n    \"\"\"\n    return min(lists, key=len)\n\n\ndef main():\n    lists = [\n        [1, 2, 3, 4],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3],\n    ]\n    print(find_min_list(lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      12.3359375
    ],
    [
      "from typing import List\n\n\ndef min_length_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns the list with minimum length.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Examples:\n        >>> min_length_list([[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]])\n        [1]\n        >>> min_length_list([[1, 2, 3], [1, 2], [1], [1, 2, 3, 4]])\n        [1]\n    \"\"\"\n    return min(lists, key=len)\n\n\ndef min_length_list_lambda(lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns the list with minimum length.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Examples:\n        >>> min_length_list_lambda([[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]])\n        [1]\n        >>> min_length_list_lambda([[1, 2, 3], [1, 2], [1], [1, 2, 3, 4]])\n        [1]\n    \"\"\"\n    return min(lists, key=(lambda x: len(x)))\n\n\nif __name__ == \"__main__\":\n    print(min_length_list([[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]))\n    print(min_length_list([[1, 2, 3], [1, 2], [1], [1, 2, 3, 4]]))",
      12.2734375
    ],
    [
      "from typing import List\n\n\ndef find_min_length(lst: List) -> int:\n    \"\"\"Returns the length of the list with minimum length.\n\n    Args:\n        lst: list of lists\n\n    Examples:\n        >>> assert find_min_length([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == 2\n    \"\"\"\n    return min(map(lambda x: len(x), lst))\n\n\nif __name__ == \"__main__\":\n    print(find_min_length([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]))",
      9.03125
    ],
    [
      "from typing import List\n\n\ndef min_length_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"Return the list with minimum length.\n\n    Args:\n        lists (List[List[int]]): list of list of integers\n\n    Examples:\n        >>> min_length_list([[1, 2], [3, 4, 5], [6], [7, 8, 9, 10]])\n        [6]\n    \"\"\"\n    return min(lists, key=len)\n\n\nif __name__ == \"__main__\":\n    list_ = [[1, 2], [3, 4, 5], [6], [7, 8, 9, 10]]\n    print(min_length_list(list_))",
      8.765625
    ],
    [
      "from functools import reduce\n\n\ndef min_length_list(arr):\n    \"\"\"Returns the list with minimum length.\"\"\"\n    return reduce(lambda x, y: x if len(x) < len(y) else y, arr)\n\n\nif __name__ == \"__main__\":\n    assert min_length_list([[1, 2, 3], [1, 2], [1, 2, 3, 4]]) == [1, 2]\n    assert min_length_list([[1, 2], [1, 2, 3, 4]]) == [1, 2]\n    assert min_length_list([[1, 2, 3, 4], [1, 2]]) == [1, 2]",
      6.8203125
    ],
    [
      "from functools import reduce\n\n\ndef min_len(arr):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, arr)\n\n\nprint(min_len([[1, 2, 3, 4], [1, 2], [1, 2, 3, 4, 5, 6]]))\nprint(min_len([\"Python\", \"JavaScript\", \"Java\", \"C\", \"C++\", \"C#\", \"PHP\"]))\nprint(min_len([[1, 2], [1], [1, 2, 3, 4, 5, 6]]))\nprint(min_len([\"Python\", \"JavaScript\", \"Java\"]))",
      6.03125
    ],
    [
      "def find_min(arr):\n    return min(arr, key=lambda x: len(x))\n\n\ndef main():\n    arr = [\n        [\"Hello\", \"World\"],\n        [\"Hello\", \"World\", \"HackerRank\"],\n        [\"Hello\", \"World\", \"HackerRank\", \"is\", \"my\", \"favourite\", \"platform\"],\n        [\"H\", \"e\", \"l\", \"l\", \"o\", \",\", \"W\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n    ]\n    print(find_min(arr))\n\n\nif __name__ == '__main__':\n    main()",
      5.83984375
    ],
    [
      "from typing import List\n\n\ndef get_min_list_length(lists: List[list]) -> int:\n    \"\"\"Return the length of the list with the minimum length.\n\n    >>> get_min_list_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n    2\n    >>> get_min_list_length([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    3\n    \"\"\"\n    # Your code goes here\n    return min(map(len, lists))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.3359375
    ],
    [
      "from typing import List\n\n\ndef get_min_list(lists: List[list]) -> list:\n    \"\"\"Returns list with minimum length.\n\n    Args:\n        lists (List[list]): list of lists\n\n    Examples:\n        >>> assert get_min_list([[1, 2], [3, 4]]) == [1, 2]\n    \"\"\"\n    return min(lists, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(get_min_list([[1, 2], [3, 4]]))",
      4.9140625
    ],
    [
      "from functools import reduce\n\n\ndef min_length(list_of_lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, list_of_lists)\n\n\nif __name__ == \"__main__\":\n    print(min_length([[1, 2], [1, 2, 3], [1, 2, 3, 4]]))\n    print(min_length([[1, 2], [1, 2, 3, 4], [1, 2, 3]]))\n    print(min_length([[1, 2], [1, 2, 3]]))",
      4.5859375
    ],
    [
      "# Solution\n\n\ndef min_len(lst):\n    return min(lst, key=lambda x: len(x))\n\n\n# Tests\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    actual = min_len(test_input)\n    if actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([[1, 2], [3, 4]], [1, 2]))\ntest_function(([[1, 2], [3, 4], [1, 2, 3]], [1, 2]))\ntest_function(([[1, 2], [3, 4], [1, 2, 3, 4]], [1, 2]))\ntest_function(([[1, 2], [3, 4], [1, 2, 3, 4, 5]], [1, 2]))\ntest_function(([[1, 2], [3, 4], [1, 2, 3, 4, 5, 6]], [1, 2]))\ntest_function(([[1, 2], [3, 4], [1, 2, 3, 4, 5, 6, 7]], [1, 2]))\ntest_function(([[1, 2], [3, 4], [1, 2, 3, 4, 5, 6, 7, 8]], [1, 2]))\ntest_function(([[1, 2], [3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [1, 2]))",
      4.3515625
    ],
    [
      "def min_length(arr):\n    return min(arr, key=len)\n\n\nprint(min_length([[1, 2, 3], [4, 5, 6], [7], [8, 9]]))",
      3.9296875
    ],
    [
      "from functools import reduce\n\ndef min_length(l):\n    return reduce(lambda a,b: a if len(a) < len(b) else b, l)\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3]\n    list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(min_length([list1, list2, list3, list4]))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.83203125
    ],
    [
      "def find_min(list_of_lists):\n    return min(list_of_lists, key=len)\n\n\nif __name__ == '__main__':\n    print(find_min([[1], [1, 2, 3], [1, 2], [1, 2, 3, 4]]))",
      3.748046875
    ],
    [
      "from functools import reduce\n\n\ndef min_length(list_of_list):\n    \"\"\"Returns a list with minimum length\"\"\"\n    return reduce(lambda x, y: x if len(x) < len(y) else y, list_of_list)\n\n\ndef main():\n    list_of_list = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13, 14, 15]]\n    print(min_length(list_of_list))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.498046875
    ],
    [
      "from typing import List\n\n\ndef min_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"Finds the list with minimum length using lambda function.\n\n    Args:\n        lists (List[List[int]]): List of lists.\n\n    Examples:\n        >>> min_list([[1, 2], [3, 4], [5]])\n        [1, 2]\n        >>> min_list([[1, 2], [3, 4], [5, 6, 7]])\n        [5, 6, 7]\n    \"\"\"\n    return min(lists, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(min_list([[1, 2], [3, 4], [5]]))",
      3.419921875
    ],
    [
      "from functools import reduce\n\n\ndef min_len(lst):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lst)\n\n\nif __name__ == \"__main__\":\n    print(\"Minimum length list:\", min_len([[1, 2, 3], [3, 4], [1, 2]]))",
      2.62890625
    ],
    [
      "from functools import reduce\n\n\ndef min_length(arr):\n    return reduce(lambda a, b: a if len(a) < len(b) else b, arr)\n\n\ndef test_min_length():\n    assert min_length([[1], [1, 2], [1, 2, 3]]) == [1]\n    assert min_length([[1, 2], [1, 2, 3]]) == [1, 2]\n    assert min_length([[1, 2, 3]]) == [1, 2, 3]",
      2.5546875
    ],
    [
      "from typing import List\n\n\ndef min_length(lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns list with minimum length.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Examples:\n        >>> min_length([[1, 2], [3, 4], [5, 6, 7], [8], [9, 10]])\n        [5, 6, 7]\n    \"\"\"\n    return min(lists, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(min_length([[1, 2], [3, 4], [5, 6, 7], [8], [9, 10]]))",
      2.26953125
    ],
    [
      "from typing import List\n\n\ndef min_length_list(arr: List[List[int]]) -> List[int]:\n    \"\"\"Returns the list with minimum length from a list of lists.\"\"\"\n    return list(min(arr, key=len))\n\n\nif __name__ == \"__main__\":\n    print(min_length_list([[1, 2, 3], [3, 4], [2, 3, 4, 5]]))",
      2.263671875
    ],
    [
      "from functools import reduce\n\n\ndef min_length(ls):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, ls)\n\n\ndef test(ls):\n    print(min_length(ls))\n\n\nif __name__ == \"__main__\":\n    test([[1, 2], [3, 4], [5, 6, 7], [8, 9, 10, 11]])",
      2.1015625
    ],
    [
      "from functools import reduce\n\n\ndef minimum_length(list_of_lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, list_of_lists)\n\n\nprint(minimum_length([[1, 2], [3, 4, 5]]))\nprint(minimum_length([[1, 2], [3, 4, 5], [6, 7]]))\nprint(minimum_length([[1, 2], [3, 4, 5], [6, 7], [8, 9, 10]]))",
      2.078125
    ],
    [
      "from functools import reduce\n\ndef min_list_len(lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lists)\n\nlists = [\n    [1, 2, 3, 4],\n    [5, 6, 7],\n    [8, 9],\n    [10, 11, 12, 13, 14]\n]\n\nprint(min_list_len(lists))",
      1.82421875
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\ndef min_length(lists: List[List]) -> List:\n    \"\"\"Returns the list with minimum length.\n\n    Args:\n        lists (List[List]): The list of lists.\n\n    Examples:\n        >>> min_length([[1, 2, 3], [4, 5], [6], [7, 8]])\n        [6]\n    \"\"\"\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lists)\n\n\nif __name__ == \"__main__\":\n    print(min_length([[1, 2, 3], [4, 5], [6], [7, 8]]))",
      1.669921875
    ],
    [
      "def min_length(list1, list2, list3):\n    return list1 if len(list1) < len(list2) and len(list1) < len(list3) else list2 if len(list2) < len(list1) and len(list2) < len(list3) else list3\n\n\nprint(min_length([1, 2, 3], [1, 2], [1]))",
      1.642578125
    ],
    [
      "from functools import reduce\n\n\ndef min_list_len(lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lists)\n\n\ndef main():\n    lists = [[1, 2, 3], [4, 5, 6], [7, 8], [9]]\n    print(min_list_len(lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.5810546875
    ],
    [
      "from functools import reduce\n\n\ndef min_list_len(arr):\n    \"\"\"\n    This function returns the list with minimum length.\n    >>> min_list_len([[1], [1, 2], [1, 2, 3]])\n    [1]\n    >>> min_list_len([[1], [1, 2], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]])\n    [1]\n    >>> min_list_len([[1, 2], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]])\n    [1, 2]\n    >>> min_list_len([[1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]])\n    [1, 2, 3]\n    \"\"\"\n    return reduce(\n        lambda x, y: x if len(x) <= len(y) else y,\n        arr\n    )\n\n\ndef min_list_len_using_lambda(arr):\n    \"\"\"\n    This function returns the list with minimum length.\n    >>> min_list_len_using_lambda([[1], [1, 2], [1, 2, 3]])\n    [1]\n    >>> min_list_len_using_lambda([[1], [1, 2], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]])\n    [1]\n    >>> min_list_len_using_lambda([[1, 2], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]])\n    [1, 2]\n    >>> min_list_len_using_lambda([[1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8,",
      1.5771484375
    ],
    [
      "def min_length(list1, list2):\n    return list1 if len(list1) < len(list2) else list2\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [6, 7, 8]\n    list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(f\"{list1} and {list2}: {min_length(list1, list2)}\")\n    print(f\"{list3} and {list4}: {min_length(list3, list4)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      1.4384765625
    ],
    [
      "from typing import List\n\n\ndef min_list_lambda(lists: List[list]) -> list:\n    \"\"\"\n    Return the list with minimum length from a list of lists.\n    >>> min_list_lambda([[1, 2, 3], [5, 6], [7], [8, 9, 10]])\n    [7]\n    >>> min_list_lambda([[1], [2, 3, 4], [5, 6, 7, 8], [9, 10], [11, 12, 13, 14]])\n    [2, 3, 4]\n    \"\"\"\n\n    return min(lists, key=lambda l: len(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.4384765625
    ],
    [
      "def find_min_list(arr):\n    min_len = min([len(i) for i in arr])\n    return list(filter(lambda x: len(x) == min_len, arr))\n\n\nif __name__ == \"__main__\":\n    print(find_min_list([[1, 2, 3], [4], [5, 6, 7, 8], [9, 10]]))",
      1.43359375
    ],
    [
      "def find_min_length(l):\n    return min(l, key=len)\n\nif __name__ == '__main__':\n    print(\"List with minimum length is:\", find_min_length(l = [ [1, 2, 3], [1], [1, 2, 3, 4, 5], [1, 2], [1, 2, 3, 4] ]))",
      1.17578125
    ],
    [
      "def min_list(l1, l2, l3):\n    return (lambda x, y, z: x if len(x) < len(y) else y if len(y) < len(z) else z)(l1, l2, l3)\n\n\ndef main():\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    list3 = [7, 8, 9, 10]\n    print(min_list(list1, list2, list3))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.068359375
    ],
    [
      "# Solution\ndef min_list(l):\n    return min(l, key=len)\n\n\n# Tests\ndef min_list_test():\n    input = [[1, 2], [3], [1, 2, 3], [1, 2, 3, 4]]\n    output = [1, 3]\n    return min_list(input) == output, len(min_list(input)) == len(output)\n\n\ndef min_list_test1():\n    input = [[1, 2, 3], [1, 2, 3]]\n    output = [1, 2, 3]\n    return min_list(input) == output, len(min_list(input)) == len(output)\n\n\ndef min_list_test2():\n    input = [[1, 2, 3], [1, 2, 3], [1, 2, 3, 4]]\n    output = [1, 2, 3]\n    return min_list(input) == output, len(min_list(input)) == len(output)\n\n\ndef min_list_test3():\n    input = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\n    output = [1, 2, 3]\n    return min_list(input) == output, len(min_list(input)) == len(output)\n\n\nprint(min_list_test())\nprint(min_list_test1())\nprint(min_list_test2())\nprint(min_list_test3())\n\n\n\"\"\"\n# Alternative\ndef min_list(l):\n    return min(l, key=len)\n\"\"\"",
      1.0322265625
    ],
    [
      "from functools import reduce\n\n\ndef min_length_list(lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lists)\n\n\ndef main():\n    lists = [\n        [1, 2, 3, 4],\n        [1, 2, 3],\n        [1, 2],\n    ]\n    assert min_length_list(lists) == [1, 2]\n\n\nif __name__ == '__main__':\n    main()",
      0.96142578125
    ],
    [
      "from functools import reduce\n\n\ndef min_list_length(lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lists)\n\n\nlists = [\n    [1, 2, 3],\n    [3, 4, 5, 6],\n    [5, 6, 7, 8, 9],\n]\nprint(min_list_length(lists))",
      0.94580078125
    ],
    [
      "from typing import List\n\n\ndef min_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns a list with minimum length.\n\n    Args:\n        lists (List[List[int]]): list of lists of integers.\n\n    Returns:\n        List[int]: a list with minimum length.\n    \"\"\"\n    return min(lists, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(min_list([[1], [1, 2], [1, 2, 3]]))\n    print(min_list([[1], [1, 2], [1, 2, 3, 4]]))",
      0.923828125
    ],
    [
      "def min_len(lst):\n    return min(lst, key=len)\n\nlst = [['a', 'b', 'c'], ['1', '2', '3', '4'], ['hi', 'hello']]\n\nprint(min_len(lst))\n\n# OR\n\nlst = [['a', 'b', 'c'], ['1', '2', '3', '4'], ['hi', 'hello']]\n\nprint(min(lst, key=len))",
      0.8134765625
    ],
    [
      "def min_len(list_of_lists):\n    return min(list_of_lists, key=len)\n\n\nif __name__ == '__main__':\n    print(min_len([[1], [3, 4], [7], [1, 2, 3, 4]]))",
      0.80859375
    ],
    [
      "from typing import List\n\n\ndef min_list_length(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"Finds the list with minimum length from a list of lists.\n\n    Args:\n        list_of_lists (List[List[int]]): list of lists\n\n    Returns:\n        List[int]: list with minimum length\n    \"\"\"\n    return min(list_of_lists, key=len)\n\n\nif __name__ == \"__main__\":\n    print(min_list_length([[1, 2], [3, 4, 5, 6], [5, 6], [7, 8]]))",
      0.7333984375
    ],
    [
      "from typing import List\n\n\ndef min_len(lst: List) -> int:\n    \"\"\"Returns the minimum length of the list.\n\n    Args:\n        lst (List): list of lists\n\n    Examples:\n        >>> assert min_len([[1, 2, 3], [3, 4], [2, 3]]) == 2\n    \"\"\"\n    return min(map(len, lst))\n\n\nif __name__ == \"__main__\":\n    print(min_len([[1, 2, 3], [3, 4], [2, 3]]))",
      0.572265625
    ],
    [
      "def minimum_length(list1, list2, list3):\n    return sorted([list1, list2, list3], key=lambda x: len(x))[0]\n\n\nprint(minimum_length([1, 2, 3], [1, 2, 3, 4, 5], [1, 2]))",
      0.450927734375
    ],
    [
      "from functools import reduce\n\n\ndef min_length(l):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, l)\n\n\nprint(min_length([[1, 2, 3], [5, 6, 7], [9, 10]]))",
      0.447265625
    ],
    [
      "def min_list(list1, list2, list3):\n    return (lambda a, b, c: a if len(a) < len(b) else b if len(b) < len(c) else c)(list1, list2, list3)\n\n\nprint(min_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7]))",
      0.36474609375
    ],
    [
      "def min_length(list1, list2, list3):\n    min_length_list = list(filter(lambda x: len(x) == min([len(list1), len(list2), len(list3)]), [list1, list2, list3]))\n    return min_length_list[0]\n\n\nprint(min_length([1, 2, 3], [4, 5, 6, 7], [3, 6, 7]))\nprint(min_length([1, 2, 3], [4, 5, 6, 7], [3, 6, 7, 9]))\nprint(min_length([1, 2, 3], [4, 5, 6, 7], [3, 6, 7, 9, 10]))",
      0.20654296875
    ],
    [
      "def min_length(list1, list2, list3):\n    return min(list1, list2, list3, key=len)\n\nprint(min_length([1,2,3,4], [2,3,4], [1]))",
      0.19140625
    ],
    [
      "from functools import reduce\n\n\ndef find_min_length(list_of_list):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, list_of_list)\n\n\nif __name__ == \"__main__\":\n    print(find_min_length([[1, 2, 3], [2, 3, 4, 5], [1, 3, 4], [2, 4, 5, 6, 7]]))",
      0.1279296875
    ],
    [
      "from functools import reduce\n\n\ndef min_len(arr):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, arr)\n\n\nprint(min_len([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))",
      0.09857177734375
    ],
    [
      "from functools import reduce\n\n\ndef min_len(a, b):\n    return a if len(a) < len(b) else b\n\n\ndef min_len_lambda(a, b):\n    return lambda x, y: x if len(x) < len(y) else y\n\n\ndef min_len_reduce(a, b):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, [a, b])\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [5, 6, 7]\n    print(min_len(a, b))\n    print(min_len_lambda(a, b)(a, b))\n    print(min_len_reduce(a, b))",
      0.0521240234375
    ],
    [
      "def min_list_length(lst):\n    return min(lst, key=lambda x: len(x))\n\n\ndef main():\n    print(min_list_length([[1, 2, 3], [4], [5, 6], [7, 8]]))\n    print(min_list_length([[1], [4], [5, 6], [7, 8]]))\n    print(min_list_length([[1, 2, 3], [4], [5, 6], [7, 8], [1, 2, 3, 4, 5]]))\n    print(min_list_length([[1, 2, 3], [4], [5, 6], [7, 8], [1, 2, 3, 4, 5, 6, 7]]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.096923828125
    ],
    [
      "def min_length(list_of_lists):\n    return min(list_of_lists, key=len)\n\n\nlist_of_lists = [[1, 2, 3], [3, 2, 1], [1, 2], [1, 2, 3, 4]]\nprint(min_length(list_of_lists))",
      -0.2044677734375
    ],
    [
      "from functools import reduce\n\n\ndef min_length_list(list_of_lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, list_of_lists)\n\n\ndef test_min_length_list():\n    \"\"\"Test for min_length_list function.\"\"\"\n    list_of_lists = [[1], [2, 3, 4], [5, 6, 7, 8], [9, 10], [11, 12, 13, 14, 15]]\n    assert min_length_list(list_of_lists) == [1]\n\n    list_of_lists = [[1], [2, 3, 4], [5, 6, 7, 8], [9, 10], [11, 12, 13, 14, 15], [16, 17, 18]]\n    assert min_length_list(list_of_lists) == [1]\n\n    list_of_lists = [[1], [2, 3, 4], [5, 6, 7, 8], [9, 10], [11, 12, 13, 14, 15], [16, 17, 18], [19]]\n    assert min_length_list(list_of_lists) == [1]\n\n    list_of_lists = [[1], [2, 3, 4], [5, 6, 7, 8], [9, 10], [11, 12, 13, 14, 15], [16, 17, 18], [19], [20]]\n    assert min_length_list(list_of_lists) == [1]\n\n    list_of_lists = [[1], [2, 3, 4], [5, 6, 7, 8], [9, 10], [11, 12, 13, 14, 15], [16, 17, 18],",
      -0.27001953125
    ],
    [
      "from functools import reduce\n\n\ndef find_min_length(list_of_lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, list_of_lists)\n\n\ndef test_find_min_length():\n    \"\"\"Test for find_min_length function.\"\"\"\n    list_of_lists = [[1, 2], [3, 4], [5, 6, 7]]\n    assert find_min_length(list_of_lists) == [5, 6, 7]\n\n\nif __name__ == \"__main__\":\n    print(\"Minimum length list is: \", find_min_length(eval(input())))",
      -0.280517578125
    ],
    [
      "from functools import reduce\n\n\ndef min_length_list(lst):\n    \"\"\"Returns the list with minimum length.\n\n    :param lst: list of lists\n    :type lst: list\n    :return: list\n    :rtype: list\n    \"\"\"\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lst)\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2], [3, 4], [5, 6, 7]]\n    assert min_length_list(lst) == [1, 2]",
      -0.33154296875
    ],
    [
      "from functools import reduce\n\n\ndef min_length_list(lst):\n    return reduce(lambda x, y: x if len(x) <= len(y) else y, lst)\n\n\nif __name__ == \"__main__\":\n    print(min_length_list([[1, 2, 3], [4, 5], [6, 7], [8, 9], [10]]))",
      -0.3740234375
    ],
    [
      "def min_list(list1, list2, list3):\n    return list1 if len(list1) <= len(list2) and len(list1) <= len(list3) else list2 if len(list2) <= len(list1) and len(list2) <= len(list3) else list3\n\nprint(min_list([1, 2, 3], [4, 5, 6], [7, 8, 9, 10]))\n\nmin_len_list = lambda list1, list2, list3: list1 if len(list1) <= len(list2) and len(list1) <= len(list3) else list2 if len(list2) <= len(list1) and len(list2) <= len(list3) else list3\n\nprint(min_len_list([1, 2, 3], [4, 5, 6], [7, 8, 9, 10]))",
      -0.381591796875
    ],
    [
      "def min_list(list1, list2, list3):\n    return list1 if len(list1)<len(list2) and len(list1)<len(list3) else list2 if len(list2)<len(list1) and len(list2)<len(list3) else list3\n\nprint(min_list([1, 2, 3], [1, 2, 3, 4], [1, 2]))",
      -0.433837890625
    ],
    [
      "from functools import reduce\n\ndef min_length(l):\n    return reduce(lambda x,y: x if len(x)<len(y) else y, l)\n\nif __name__ == \"__main__\":\n    print(min_length([[1, 2], [1, 2, 3], [1, 2, 3, 4]]))",
      -0.6103515625
    ],
    [
      "def min_length(lists):\n    return min(lists, key=len)\n\n\nif __name__ == \"__main__\":\n    print(min_length([[1, 2, 3], [1, 2], [1, 2, 3, 4]]))",
      -0.736328125
    ],
    [
      "def find_min_length(l):\n    return min(l, key = lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(find_min_length([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]))\n    print(find_min_length([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]))",
      -0.85595703125
    ],
    [
      "def min_length(list_1, list_2):\n    return len(list_1) < len(list_2)\n\n\ndef main():\n    list_1 = [1, 2, 3, 4]\n    list_2 = [1, 2, 3, 4, 5]\n    list_3 = [1, 2, 3, 4, 5, 6]\n\n    print(min_length(list_1, list_2))\n    print(min_length(list_2, list_3))\n    print(min_length(list_1, list_3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "from functools import reduce\nfrom operator import length_hint\n\n\ndef min_length(lst: list) -> int:\n    \"\"\"Returns minimum length of list.\n\n    Args:\n        lst (list): list of lists.\n\n    Examples:\n        >>> min_length([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]])\n        1\n    \"\"\"\n    return reduce(lambda x, y: x if length_hint(x) < length_hint(y) else y, lst)\n\n\nif __name__ == \"__main__\":\n    print(min_length([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]))",
      -0.85693359375
    ],
    [
      "def find_min_length(list_of_list):\n    return min(list_of_list, key=len)\n\n\ndef main():\n    list_of_list = [\n        [1, 2, 3, 4],\n        [2, 3, 4, 5],\n        [1, 2, 3, 4, 5],\n        [2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n    ]\n\n    result = find_min_length(list_of_list)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def min_len(a, b, c):\n    return sorted([len(a), len(b), len(c)], key=lambda x: x[0])[0]\n\nprint(min_len(\"apple\", \"orange\", \"pineapple\"))\nprint(min_len(\"apple\", \"orange\", \"banana\"))\nprint(min_len(\"apple\", \"banana\", \"pineapple\"))\nprint(min_len(\"banana\", \"orange\", \"pineapple\"))",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\n\ndef min_len(lst):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lst)\n\n\ndef test(l):\n    return min_len(l)\n\n\nif __name__ == '__main__':\n    print(test([[1], [1, 2], [1, 2, 3]]))",
      -0.85693359375
    ],
    [
      "def min_len(list1, list2, list3):\n    return min(list1, list2, list3, key=len)\n\n\nif __name__ == '__main__':\n    print(min_len([1, 2, 3], [1, 2], [1, 2, 3, 4, 5, 6]))",
      -0.85693359375
    ],
    [
      "def min_length(arr):\n    return min(arr, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(min_length([\"abc\", \"abcd\", \"abcdef\", \"abcdefg\"]))",
      -0.85693359375
    ],
    [
      "def min_length(l1, l2):\n    return l1 if len(l1) <= len(l2) else l2\n\n\ndef main():\n    print(min_length([1, 2, 3], [2, 3, 4, 5]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def get_list_with_minimum_length(l):\n    return min(l, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    l = [[1, 2, 3], [5, 6, 7], [9, 10], [1, 2, 3, 4, 5, 6]]\n    print(get_list_with_minimum_length(l))",
      -0.85693359375
    ],
    [
      "def find_min_list_length(lists):\n    return min(lists, key=len)\n\n\nprint(find_min_list_length([[1, 2], [3, 4], [5, 6, 7], [8, 9]]))\nprint(find_min_list_length([[1, 2], [3, 4], [5, 6, 7, 8, 9]]))\nprint(find_min_list_length([[1, 2, 3], [4, 5, 6, 7], [8, 9]]))\nprint(find_min_list_length([[1, 2, 3, 4, 5], [6, 7, 8], [9]]))",
      -0.85693359375
    ],
    [
      "def min_len(arr):\n    return min(arr, key=len)\n\narr = [[1,2,3],[4],[5,6,7,8]]\n\nprint(min_len(arr))",
      -0.857421875
    ],
    [
      "def min_len(lst):\n    return min(lst, key=len)\n\n\nprint(min_len([[], [1], [1, 2, 3], [1, 2], [1, 2, 3, 4]]))",
      -0.85791015625
    ],
    [
      "from functools import reduce\n\n\ndef min_list_len(lst):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lst)\n\n\nif __name__ == \"__main__\":\n    print(min_list_len([[1, 2, 3], [1], [1, 2]]))",
      -0.85791015625
    ],
    [
      "def min_length(lst):\n    return min(lst, key=len)\n\n\nprint(min_length([[1, 2], [3, 4], [5, 6, 7]]))",
      -0.85791015625
    ],
    [
      "def min_list(list_a, list_b):\n    return list_a if len(list_a) < len(list_b) else list_b\n\n\nif __name__ == '__main__':\n    print(min_list([1, 2, 3], [1, 2]))",
      -0.85791015625
    ],
    [
      "def min_len(l1, l2):\n    return min(len(l1), len(l2))\n\n\nprint(min_len([1, 2, 3], [4, 5, 6]))",
      -0.85791015625
    ],
    [
      "def find_min_length(arr):\n    return min(arr, key=len)\n\n\ndef main():\n    print(find_min_length([\"abc\", \"de\", \"fgh\", \"i\", \"jklm\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8740234375
    ],
    [
      "from functools import reduce\n\ndef min_length(lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, lists)\n\nif __name__ == \"__main__\":\n    print(min_length([[1, 2], [3, 4], [5, 6, 7]]))\n    print(min_length([[1, 2, 3], [3, 4], [5, 6, 7]]))\n    print(min_length([[1, 2, 3], [3, 4], [5, 6, 7], [1, 1, 1, 1]]))",
      -0.92236328125
    ],
    [
      "def min_length(arr):\n    return min(arr, key=len)\n\ndef main():\n    arr = [\n        [\"1\", \"2\", \"3\", \"4\", \"5\"],\n        [\"1\", \"2\", \"3\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\n    ]\n\n    print(min_length(arr))\n\nif __name__ == '__main__':\n    main()",
      -1.005859375
    ],
    [
      "def get_min_len(lst):\n    return lambda l: min(map(len, l))\n\nif __name__ == \"__main__\":\n    lst = [[\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\", \"d\"]]\n    print(get_min_len(lst)(lst))",
      -1.095703125
    ],
    [
      "#!/usr/bin/env python\n\ndef min_length(list1, list2, list3):\n    return list(filter(lambda x: len(x) < len(x), [list1, list2, list3]))\n\nlist1 = [1, 2, 3]\nlist2 = [1, 2]\nlist3 = [1, 2, 3, 4, 5]\n\nprint(min_length(list1, list2, list3))",
      -1.23046875
    ],
    [
      "from itertools import chain\n\ndef min_length(list1, list2, list3):\n    return min(list1, list2, list3, key=len)\n\ndef min_length_lambda(list1, list2, list3):\n    return min(list1, list2, list3, key=lambda x: len(x))\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    list3 = [7, 8, 9]\n    print(min_length(list1, list2, list3))\n    print(min_length_lambda(list1, list2, list3))",
      -1.3232421875
    ],
    [
      "def find_min_length(arr):\n    return min(arr, key=len)\n\n\ndef main():\n    print(find_min_length([\"abc\", \"c\", \"ab\", \"a\"]))\n    print(find_min_length([\"abc\", \"c\", \"ab\", \"abc\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.361328125
    ],
    [
      "from typing import List\n\n\ndef min_length(lists: List[List[int]]) -> List[int]:\n    \"\"\"Returns list with minimum length.\"\"\"\n    return min(lists, key=len)\n\n\nif __name__ == \"__main__\":\n    LISTS = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14]]\n    print(min_length(LISTS))",
      -1.392578125
    ],
    [
      "from typing import List\n\n\ndef min_length(arr: List) -> int:\n    \"\"\"Returns the minimum length of list.\n\n    Args:\n        arr: list of lists\n\n    Returns:\n        int: minimum length\n    \"\"\"\n    return min(len(i) for i in arr)\n\n\nif __name__ == \"__main__\":\n    print(min_length([[1], [1, 2], [1, 2, 3]]))\n    print(min_length([[1, 2], [1, 2, 3]]))",
      -1.5185546875
    ],
    [
      "from functools import reduce\n\ndef min_list_len(arr):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, arr)\n\nprint(min_list_len([[1, 2], [3, 4], [5, 6]]))",
      -1.5576171875
    ],
    [
      "from functools import reduce\nfrom pprint import pprint\n\n\ndef min_len(lst):\n    return reduce(lambda a, b: a if len(a) < len(b) else b, lst)\n\n\nif __name__ == \"__main__\":\n    lst = [\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4],\n        [1, 2, 3],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2],\n    ]\n    pprint(min_len(lst))",
      -1.6591796875
    ],
    [
      "from functools import reduce\n\n\ndef min_length(arr):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, arr)\n\n\ndef main():\n    print(\"Minimum length list:\")\n    print(min_length([\"1\", \"2\", \"3\", \"4\"]))\n    print(min_length([\"1\", \"2\", \"3\"]))\n    print(min_length([\"1\", \"2\"]))\n    print(min_length([\"1\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.927734375
    ],
    [
      "# Solution\ndef find_min(lst):\n    return min(lst, key=len)\n\n# Test Cases\nprint(find_min([[1, 2, 3], [1], [1, 2], [1, 2, 3, 4], [1, 2, 3, 4, 5]]))\nprint(find_min([[\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]))\nprint(find_min([[], [1], [1, 2], [1, 2, 3]]))",
      -2.083984375
    ],
    [
      "from typing import List\n\n\ndef min_list_length(lst: List) -> int:\n    \"\"\"Returns the minimum length of the list.\"\"\"\n    return min(len(lst), *list(map(len, lst)))\n\n\nif __name__ == \"__main__\":\n    print(min_list_length([[1, 2, 3], [4, 5, 6, 7], [8, 9], [10]]))",
      -2.4921875
    ],
    [
      "def find_minimum(list_of_lists):\n    return min(list_of_lists, key=lambda x: len(x))\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(find_minimum([[1, 1], [1, 2, 2], [1, 2, 3, 3], [1, 2, 3, 4, 4]]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert find_minimum([[1, 1], [1, 2, 2], [1, 2, 3, 3], [1, 2, 3, 4, 4]]) == [1, 2, 3, 4, 4]\n    assert find_minimum([[1, 2, 3], [1], [1, 2]]) == [1]\n    assert find_minimum([[1, 2, 3], [1], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8]]) == [1, 2]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      -2.802734375
    ],
    [
      "from functools import reduce\n\n\ndef min_length(list_of_lists):\n    return reduce(lambda x, y: x if len(x) < len(y) else y, list_of_lists)\n\n\ndef test_min_length():\n    \"\"\"\"Test for min_length function.\"\"\"\n    assert min_length([[1, 2], [3, 4], [5, 6, 7]]) == [5, 6, 7]\n    assert min_length([[1, 2, 3], [4, 5], [6, 7]]) == [4, 5]\n    assert min_length([[1, 2, 3], [4], [6, 7]]) == [4]\n    assert min_length([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == [8, 9]\n    assert min_length([[1, 2, 3], [4, 5, 6, 7], [8], [9]]) == [8]\n    assert min_length([[1, 2, 3], [4, 5, 6, 7], [8], [9], [10]]) == [10]\n    print('Passed')\n\n\nif __name__ == \"__main__\":\n    test_min_length()",
      -3.150390625
    ],
    [
      "def min_length(lst):\n    return min(lst, key=len)\n\n\ndef min_length_lambda(lst):\n    return min(lst, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    list_1 = [\"a\", \"b\", \"c\"]\n    list_2 = [\"a\", \"b\", \"c\", \"d\"]\n    list_3 = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n    list_4 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    print(min_length(list_1))\n    print(min_length_lambda(list_2))\n    print(min_length(list_3))\n    print(min_length_lambda(list_4))",
      -3.595703125
    ],
    [
      "def min_length(lst):\n    return lambda lst: min(lst, key=len)\n\n\ndef main():\n    print(\"Minimum Length List:\")\n    print(min_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]])([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.798828125
    ],
    [
      "def lambda_function(list1, list2, list3):\n    \"\"\"\n    This function finds the list with minimum length.\n    :param list1:\n    :param list2:\n    :param list3:\n    :return:\n    \"\"\"\n    return min(list(map(lambda x: len(x), [list1, list2, list3])))\n\n\nif __name__ == '__main__':\n    print(lambda_function([1, 2, 3], [4, 5, 6], [7, 8]))",
      -4.0078125
    ],
    [
      "def min_length(list1, list2):\n    return list1 if len(list1) <= len(list2) else list2\n\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nprint(min_length(list1, list2))",
      -4.05859375
    ],
    [
      "def find_min(list1, list2):\n    return list1 if len(list1) < len(list2) else list2\n\n\ndef find_min_lambda(list1, list2):\n    return lambda l1, l2: l1 if len(l1) < len(l2) else l2\n\n\nprint(find_min_lambda(list1=[1, 2, 3], list2=[4, 5, 6, 7]))",
      -4.20703125
    ],
    [
      "def find_min_list(list1, list2, list3):\n    return lambda a, b, c: min(len(a), len(b), len(c))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [4, 5, 6]\n    list3 = [1, 2, 3, 4, 5]\n    print(find_min_list(list1, list2, list3)(list1, list2, list3))",
      -4.54296875
    ],
    [
      "def min_len(a, b, c):\n    return min(len(a), len(b), len(c))\n\nif __name__ == '__main__':\n    a = 'ram'\n    b = 'sham'\n    c = 'gam'\n\n    print(min_len(a, b, c))\n\n    print(min(len(a), len(b), len(c)))\n\n    print(min(map(lambda x: len(x), [a, b, c])))",
      -7.234375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}