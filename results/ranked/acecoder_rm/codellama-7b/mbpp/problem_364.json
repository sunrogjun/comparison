{
  "problem": {
    "task_id": "MBPP/375",
    "prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
    "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
    "test_list": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ],
    "challenge_test_list": [],
    "problem_id": 364
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def round_to_multiple(number, multiple):\n    \"\"\"\n    >>> round_to_multiple(10, 3)\n    9\n    >>> round_to_multiple(13, 5)\n    15\n    >>> round_to_multiple(15, 5)\n    15\n    >>> round_to_multiple(13, 4)\n    12\n    \"\"\"\n    return multiple * round(number / multiple)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      18.265625
    ],
    [
      "def round_to_multiple(number: int, multiple: int) -> int:\n    \"\"\"Rounds the given number to the nearest multiple of a specific number.\n\n    Args:\n        number (int): number to round.\n        multiple (int): multiple of the number.\n\n    Examples:\n        >>> round_to_multiple(11, 3)\n        12\n        >>> round_to_multiple(12, 3)\n        12\n        >>> round_to_multiple(13, 3)\n        15\n        >>> round_to_multiple(14, 3)\n        15\n        >>> round_to_multiple(15, 3)\n        15\n        >>> round_to_multiple(16, 3)\n        18\n        >>> round_to_multiple(17, 3)\n        18\n        >>> round_to_multiple(18, 3)\n        18\n    \"\"\"\n    return multiple * round(number / multiple)\n\n\nif __name__ == \"__main__\":\n    print(round_to_multiple(11, 3))\n    print(round_to_multiple(12, 3))\n    print(round_to_multiple(13, 3))\n    print(round_to_multiple(14, 3))\n    print(round_to_multiple(15, 3))\n    print(round_to_multiple(16, 3))\n    print(round_to_multiple(17, 3))\n    print(round_to_multiple(18, 3))",
      16.6875
    ],
    [
      "def round_number(number, base):\n    \"\"\"Round the given number to the nearest multiple of a specific number.\n\n    Args:\n        number (int): The number to round.\n        base (int): The number to use as a base.\n\n    Returns:\n        int: The rounded number.\n    \"\"\"\n    return base * round(number / base)\n\n\nif __name__ == \"__main__\":\n    print(round_number(6, 3))\n    print(round_number(10, 3))\n    print(round_number(100, 10))\n    print(round_number(1000, 10))",
      11.34375
    ],
    [
      "from functools import wraps\n\n\ndef nearest_multiple(num, multiple_of):\n    \"\"\"Rounds the given number to the nearest multiple of a specific number.\"\"\"\n    return int(round(num / multiple_of) * multiple_of)\n\n\n@wraps(nearest_multiple)\ndef nearest_multiple_of_three(num):\n    \"\"\"Rounds the given number to the nearest multiple of 3.\"\"\"\n    return nearest_multiple(num, 3)\n\n\n@wraps(nearest_multiple)\ndef nearest_multiple_of_five(num):\n    \"\"\"Rounds the given number to the nearest multiple of 5.\"\"\"\n    return nearest_multiple(num, 5)",
      5.9609375
    ],
    [
      "from math import floor, ceil\n\n\n# my implementation\ndef round_to_nearest(number, multiple):\n    if number % multiple == 0:\n        return number\n    elif number % multiple > multiple / 2:\n        return ceil(number / multiple) * multiple\n    else:\n        return floor(number / multiple) * multiple\n\n\n# python implementation\ndef round_to_nearest_python(number, multiple):\n    return round(number / multiple) * multiple\n\n\n# test cases\nprint(round_to_nearest(35, 10) == round_to_nearest_python(35, 10))\nprint(round_to_nearest(35, 5) == round_to_nearest_python(35, 5))\nprint(round_to_nearest(35, 2) == round_to_nearest_python(35, 2))\nprint(round_to_nearest(35, 3) == round_to_nearest_python(35, 3))\nprint(round_to_nearest(35, 4) == round_to_nearest_python(35, 4))\nprint(round_to_nearest(35, 1) == round_to_nearest_python(35, 1))\nprint(round_to_nearest(35, 0) == round_to_nearest_python(35, 0))\nprint(round_to_nearest(35, 0.1) == round_to_nearest_python(35, 0.1))\nprint(round_to_nearest(35, 0.5) == round_to_nearest_python(35, 0.5))\nprint(round_to_nearest(35, 0.25) == round_to_nearest_python(35, 0.25))",
      4.8828125
    ],
    [
      "from typing import List\n\n\ndef round_to_multiple(number: int, multiple: int) -> int:\n    \"\"\"Round the given number to the nearest multiple of a specific number.\n\n    Args:\n        number: The number to round.\n        multiple: The multiple to round to.\n\n    Examples:\n        >>> assert round_to_multiple(5, 2) == 6\n        >>> assert round_to_multiple(6, 2) == 6\n        >>> assert round_to_multiple(7, 2) == 8\n        >>> assert round_to_multiple(12, 5) == 15\n        >>> assert round_to_multiple(11, 5) == 10\n        >>> assert round_to_multiple(16, 5) == 20\n        >>> assert round_to_multiple(11, 3) == 12\n        >>> assert round_to_multiple(12, 3) == 12\n        >>> assert round_to_multiple(13, 3) == 15\n        >>> assert round_to_multiple(14, 3) == 15\n    \"\"\"\n    return multiple * round(number / multiple)\n\n\ndef round_to_multiple_naive(number: int, multiple: int) -> int:\n    \"\"\"Round the given number to the nearest multiple of a specific number.\n\n    Args:\n        number: The number to round.\n        multiple: The multiple to round to.\n\n    Examples:\n        >>> assert round_to_multiple_naive(5, 2) == 6\n        >>> assert round_to_multiple_naive(6, 2) == 6\n        >>> assert round_to_multiple_naive(7, 2) == 8\n        >>> assert round_to_multiple_naive(12, 5) == 15\n        >>> assert round_to_multiple_naive(11, 5) == 10\n        >>> assert round_to_multiple_naive(16, 5) == 20\n        >>> assert round_to_multiple_naive(11, 3) == 12\n        >>> assert",
      4.52734375
    ],
    [
      "from functools import reduce\n\n\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# [1, 2, 3, 4, 5, 6, 7, 8]\n# [1, 2, 3, 4, 5, 6, 7]\n# [1, 2, 3, 4, 5, 6]\n# [1, 2, 3, 4, 5]\n# [1, 2, 3, 4]\n# [1, 2, 3]\n# [1, 2]\n# [1]\n# [1]\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef round_up(number, multiple):\n    \"\"\"\n    Round up the number to the nearest multiple of a specific number.\n    \"\"\"\n    if number % multiple == 0:\n        return number\n\n    return number + (multiple - (number % multiple))\n\n\ndef round_down(number, multiple):\n    \"\"\"\n    Round down the number to the nearest multiple of a specific number.\n    \"\"\"\n    if number % multiple == 0:\n        return number\n\n    return number - (number % multiple)\n\n\ndef round_to_nearest_multiple(number, multiple):\n    \"\"\"\n    Round the number to the nearest multiple of a specific number.\n    \"\"\"\n    return min(\n        [round_up(number, multiple), round_down(number, multiple)], key=lambda x: abs(x - number)\n    )\n\n\n# round_to_nearest_multiple(10, 2)\n# round_to_nearest_multiple(10, 3)\n# round_to_nearest_multiple(10, 4)\n# round_to_nearest_multiple(10, 5)\n# round_to_nearest_multiple(10,",
      4.3671875
    ],
    [
      "def round_to_nearest_multiple(number, multiple):\n    \"\"\"\n    >>> round_to_nearest_multiple(10, 5)\n    10\n    >>> round_to_nearest_multiple(13, 5)\n    15\n    >>> round_to_nearest_multiple(15, 5)\n    15\n    >>> round_to_nearest_multiple(16, 5)\n    20\n    >>> round_to_nearest_multiple(23, 5)\n    25\n    >>> round_to_nearest_multiple(30, 5)\n    30\n    >>> round_to_nearest_multiple(31, 5)\n    35\n    >>> round_to_nearest_multiple(45, 5)\n    50\n    >>> round_to_nearest_multiple(51, 5)\n    55\n    >>> round_to_nearest_multiple(70, 5)\n    70\n    >>> round_to_nearest_multiple(71, 5)\n    75\n    >>> round_to_nearest_multiple(85, 5)\n    90\n    \"\"\"\n    return (int(number / multiple) + (number % multiple > multiple / 2)) * multiple\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.8828125
    ],
    [
      "# def round_nearest_multiple(number, multiple):\n#     \"\"\"\n#     >>> round_nearest_multiple(10, 5)\n#     10\n#     >>> round_nearest_multiple(11, 5)\n#     15\n#     >>> round_nearest_multiple(15, 5)\n#     20\n#     >>> round_nearest_multiple(16, 5)\n#     20\n#     >>> round_nearest_multiple(17, 5)\n#     20\n#     >>> round_nearest_multiple(20, 5)\n#     20\n#     >>> round_nearest_multiple(21, 5)\n#     25\n#     >>> round_nearest_multiple(25, 5)\n#     25\n#     \"\"\"\n#     if number % multiple == 0:\n#         return number\n#     else:\n#         return (number // multiple + 1) * multiple\n\n\ndef round_nearest_multiple(number, multiple):\n    \"\"\"\n    >>> round_nearest_multiple(10, 5)\n    10\n    >>> round_nearest_multiple(11, 5)\n    15\n    >>> round_nearest_multiple(15, 5)\n    20\n    >>> round_nearest_multiple(16, 5)\n    20\n    >>> round_nearest_multiple(17, 5)\n    20\n    >>> round_nearest_multiple(20, 5)\n    20\n    >>> round_nearest_multiple(21, 5)\n    25\n    >>> round_nearest_multiple(25, 5)\n    25\n    \"\"\"\n    return (number + multiple // 2) // multiple * multiple\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.828125
    ],
    [
      "def round_nearest_multiple(number, multiple):\n    return multiple * round(number / multiple)\n\n\nif __name__ == \"__main__\":\n    print(round_nearest_multiple(11, 5))\n    print(round_nearest_multiple(11, 4))",
      3.025390625
    ],
    [
      "def round_nearest(number, base):\n    \"\"\"\n    >>> round_nearest(1, 2)\n    2\n    >>> round_nearest(5, 2)\n    6\n    >>> round_nearest(11, 2)\n    12\n    >>> round_nearest(11, 5)\n    15\n    >>> round_nearest(12, 5)\n    15\n    >>> round_nearest(12, 2)\n    12\n    >>> round_nearest(13, 2)\n    14\n    >>> round_nearest(13, 5)\n    15\n    >>> round_nearest(14, 2)\n    14\n    >>> round_nearest(14, 5)\n    15\n    >>> round_nearest(15, 2)\n    16\n    >>> round_nearest(15, 5)\n    15\n    >>> round_nearest(16, 2)\n    16\n    >>> round_nearest(16, 5)\n    20\n    >>> round_nearest(17, 2)\n    18\n    >>> round_nearest(17, 5)\n    20\n    >>> round_nearest(18, 2)\n    18\n    >>> round_nearest(18, 5)\n    20\n    >>> round_nearest(19, 2)\n    20\n    >>> round_nearest(19, 5)\n    20\n    >>> round_nearest(20, 2)\n    20\n    >>> round_nearest(20, 5)\n    20\n    >>> round_nearest(21, 2)\n    22\n    >>> round_nearest(21, 5)\n    25\n    >>> round_nearest(22, 2)\n    22\n    >>> round_nearest(22, 5)\n    25\n    >>> round_nearest(23, 2)\n    24\n    >>> round_nearest(23, 5)",
      2.98046875
    ],
    [
      "from math import floor\n\n\ndef nearest_multiple(n, multiple):\n    \"\"\"Returns the nearest multiple of a specific number.\n\n    Args:\n        n: the given number\n        multiple: the specific number\n\n    Returns:\n        the nearest multiple of a specific number\n    \"\"\"\n    return multiple * round(n / multiple)\n\n\nprint(nearest_multiple(56, 10))\nprint(nearest_multiple(56, 5))\nprint(nearest_multiple(56, 2))\nprint(nearest_multiple(56, 3))",
      2.59375
    ],
    [
      "def round_to_multiple(n, m):\n    return m * round(n/m)\n\n\nif __name__ == '__main__':\n    print(round_to_multiple(10, 5))",
      2.45703125
    ],
    [
      "def round_nearest_multiple(number, multiple):\n    return (round(number / multiple) * multiple)\n\nprint(round_nearest_multiple(14, 4))\nprint(round_nearest_multiple(15, 5))\nprint(round_nearest_multiple(32, 8))\nprint(round_nearest_multiple(11, 5))\nprint(round_nearest_multiple(15, 4))\nprint(round_nearest_multiple(14, 2))\nprint(round_nearest_multiple(15, 3))\nprint(round_nearest_multiple(10, 2))\nprint(round_nearest_multiple(11, 2))\nprint(round_nearest_multiple(12, 2))\nprint(round_nearest_multiple(13, 2))\nprint(round_nearest_multiple(14, 2))\nprint(round_nearest_multiple(15, 2))\nprint(round_nearest_multiple(16, 2))\nprint(round_nearest_multiple(17, 2))\nprint(round_nearest_multiple(18, 2))\nprint(round_nearest_multiple(19, 2))\nprint(round_nearest_multiple(20, 2))\nprint(round_nearest_multiple(21, 2))\nprint(round_nearest_multiple(22, 2))\nprint(round_nearest_multiple(23, 2))\nprint(round_nearest_multiple(24, 2))\nprint(round_nearest_multiple(25, 2))\nprint(round_nearest_multiple(26, 2))\nprint(round_nearest_multiple(27, 2))\nprint(round_nearest_multiple(28, 2))\nprint(round_nearest_multiple(29, 2))\nprint(round_nearest_multiple(30, 2))\nprint(round_nearest_multiple(31, 2))\nprint(round_nearest_multiple(32, 2))\nprint(round_",
      2.3671875
    ],
    [
      "from math import ceil, floor\n\n\ndef round_to_multiple(number: int, base: int) -> int:\n    \"\"\"Returns the nearest multiple of a specific number.\n\n    Args:\n        number: the number to round.\n        base: the base number.\n\n    Examples:\n        >>> assert round_to_multiple(5, 2) == 4\n        >>> assert round_to_multiple(10, 5) == 10\n        >>> assert round_to_multiple(11, 10) == 10\n        >>> assert round_to_multiple(12, 10) == 10\n        >>> assert round_to_multiple(13, 10) == 10\n        >>> assert round_to_multiple(14, 10) == 10\n        >>> assert round_to_multiple(15, 10) == 10\n        >>> assert round_to_multiple(16, 10) == 20\n        >>> assert round_to_multiple(17, 10) == 20\n        >>> assert round_to_multiple(18, 10) == 20\n        >>> assert round_to_multiple(19, 10) == 20\n        >>> assert round_to_multiple(20, 10) == 20\n        >>> assert round_to_multiple(21, 10) == 30\n        >>> assert round_to_multiple(22, 10) == 30\n        >>> assert round_to_multiple(23, 10) == 30\n        >>> assert round_to_multiple(24, 10) == 30\n        >>> assert round_to_multiple(25, 10) == 30\n        >>> assert round_to_multiple(26, 10) == 30\n        >>> assert round_to_multiple(27, 10) == 30\n        >>> assert round_to_multiple(28, 10) == 30\n        >>> assert round_to_multiple(29, 10) == 30\n        >>> assert",
      2.037109375
    ],
    [
      "def round_to_multiple(number: int, multiple: int) -> int:\n    \"\"\"Round the given number to the nearest multiple of a specific number.\n\n    Args:\n        number (int): the number to round.\n        multiple (int): the multiple.\n\n    Examples:\n        >>> round_to_multiple(10, 5)\n        10\n        >>> round_to_multiple(11, 5)\n        15\n        >>> round_to_multiple(11, 3)\n        12\n        >>> round_to_multiple(100, 10)\n        100\n    \"\"\"\n    return multiple * round(number / multiple)\n\n\nif __name__ == \"__main__\":\n    print(round_to_multiple(10, 5))\n    print(round_to_multiple(11, 5))\n    print(round_to_multiple(11, 3))\n    print(round_to_multiple(100, 10))",
      1.994140625
    ],
    [
      "def round_to_multiple(number: int, multiple: int) -> int:\n    return multiple * round(number / multiple)\n\n\nif __name__ == \"__main__\":\n    print(round_to_multiple(10, 3))\n    print(round_to_multiple(15, 3))\n    print(round_to_multiple(21, 5))\n    print(round_to_multiple(21, 10))\n    print(round_to_multiple(21, 100))\n    print(round_to_multiple(1234, 1000))",
      1.9091796875
    ],
    [
      "def round_nearest_multiple(num: int, multiple: int) -> int:\n    \"\"\"Rounds the given number to the nearest multiple of a specific number.\n\n    Args:\n        num (int): The number to round.\n        multiple (int): The multiple to round to.\n\n    Examples:\n        >>> round_nearest_multiple(32, 8)\n        32\n        >>> round_nearest_multiple(31, 8)\n        32\n        >>> round_nearest_multiple(31, 5)\n        35\n        >>> round_nearest_multiple(31, 10)\n        30\n        >>> round_nearest_multiple(33, 10)\n        40\n        >>> round_nearest_multiple(31, -10)\n        -40\n    \"\"\"\n    return (num // multiple + (num % multiple != 0)) * multiple\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.83984375
    ],
    [
      "def round_nearest(number, multiple):\n    return multiple * round(number/multiple)\n\ndef main():\n    print(round_nearest(10, 3))\n    print(round_nearest(10, 6))\n    print(round_nearest(10, 10))\n    print(round_nearest(10, 12))\n\nif __name__ == \"__main__\":\n    main()",
      1.6953125
    ],
    [
      "def round_nearest(n, m):\n    return round(n / m) * m\n\n\nif __name__ == \"__main__\":\n    print(round_nearest(4, 5))\n    print(round_nearest(5, 5))\n    print(round_nearest(6, 5))\n    print(round_nearest(15, 5))\n    print(round_nearest(25, 5))\n    print(round_nearest(100, 10))\n    print(round_nearest(101, 10))\n    print(round_nearest(102, 10))",
      1.5634765625
    ],
    [
      "def round_number(num, base):\n    return base * round(num / base)\n\n\nprint(round_number(13, 3))\nprint(round_number(13, 5))\nprint(round_number(13, 8))",
      1.4423828125
    ],
    [
      "import math\n\n\ndef nearest_multiple(n: int, base: int) -> int:\n    \"\"\"Return the nearest multiple of base for n.\n\n    Args:\n        n: the number to be rounded.\n        base: the base of the nearest multiple.\n    \"\"\"\n    return round(n / base) * base\n\n\nif __name__ == \"__main__\":\n    assert nearest_multiple(13, 4) == 12\n    assert nearest_multiple(14, 4) == 16\n    assert nearest_multiple(15, 4) == 16\n    assert nearest_multiple(16, 4) == 16\n    assert nearest_multiple(17, 4) == 20\n    assert nearest_multiple(18, 4) == 20\n    assert nearest_multiple(19, 4) == 20\n    assert nearest_multiple(20, 4) == 20\n    assert nearest_multiple(21, 4) == 24\n    assert nearest_multiple(22, 4) == 24\n    assert nearest_multiple(23, 4) == 24\n    assert nearest_multiple(24, 4) == 24\n    assert nearest_multiple(25, 4) == 28\n    assert nearest_multiple(26, 4) == 28\n    assert nearest_multiple(27, 4) == 28\n    assert nearest_multiple(28, 4) == 28\n    assert nearest_multiple(29, 4) == 32\n    assert nearest_multiple(30, 4) == 32\n    assert nearest_multiple(31, 4) == 32\n    assert nearest_multiple(32, 4) == 32\n    assert nearest_multiple(33, 4) == 36\n    assert nearest_multiple(34, 4) == 36\n    assert nearest_multiple(35, 4) == 36\n    assert nearest_multiple(36, 4) == 36\n    assert nearest_multiple(37, 4) == 4",
      1.283203125
    ],
    [
      "from functools import partial\n\n\ndef nearest_multiple(number, multiple):\n    return round(number / multiple) * multiple\n\n\nprint(nearest_multiple(16, 5))  # 20\nprint(nearest_multiple(16, 6))  # 16\nprint(nearest_multiple(16, 7))  # 18\n\n# Using partial\nnearest_multiple_partial = partial(nearest_multiple, multiple=5)\nprint(nearest_multiple_partial(16))  # 20\nprint(nearest_multiple_partial(17))  # 20",
      1.125
    ],
    [
      "def round_to_nearest_multiple(number, multiple):\n    return (number + (multiple / 2)) // multiple * multiple\n\nif __name__ == '__main__':\n    print(\"Round to nearest multiple:\")\n    while True:\n        try:\n            number = int(input(\"Enter the number: \"))\n            multiple = int(input(\"Enter the multiple: \"))\n            result = round_to_nearest_multiple(number, multiple)\n            print(\"Rounded number: {}\".format(result))\n            break\n        except ValueError:\n            print(\"Please enter an integer.\")",
      0.82958984375
    ],
    [
      "from typing import Tuple\n\n\ndef round_nearest_multiple(number: int, multiple: int) -> int:\n    \"\"\"Rounds a number to the nearest multiple of a specific number.\n\n    Args:\n        number (int): the number to round.\n        multiple (int): the multiple to round to.\n\n    Examples:\n        >>> round_nearest_multiple(10, 3)\n        9\n        >>> round_nearest_multiple(11, 3)\n        12\n        >>> round_nearest_multiple(12, 3)\n        12\n        >>> round_nearest_multiple(13, 3)\n        12\n        >>> round_nearest_multiple(14, 3)\n        15\n        >>> round_nearest_multiple(15, 3)\n        15\n        >>> round_nearest_multiple(16, 3)\n        15\n        >>> round_nearest_multiple(17, 3)\n        18\n        >>> round_nearest_multiple(18, 3)\n        18\n        >>> round_nearest_multiple(19, 3)\n        18\n        >>> round_nearest_multiple(20, 3)\n        20\n        >>> round_nearest_multiple(21, 3)\n        20\n        >>> round_nearest_multiple(22, 3)\n        20\n        >>> round_nearest_multiple(23, 3)\n        20\n        >>> round_nearest_multiple(24, 3)\n        24\n        >>> round_nearest_multiple(25, 3)\n        24\n        >>> round_nearest_multiple(26, 3)\n        24\n        >>> round_nearest_multiple(27, 3)\n        27\n        >>> round_nearest_multiple(28, 3)\n        27\n        >>> round_nearest_multiple(29, 3)\n        27\n        >>> round_nearest_multiple(30, 3)\n        30\n        >>> round_nearest_multiple(31, 3",
      0.798828125
    ],
    [
      "from typing import List\n\n\ndef round_to_multiple(num: int, multiple: int) -> int:\n    \"\"\"Rounds a number to the nearest multiple of another number.\n\n    Args:\n        num (int): The number to round.\n        multiple (int): The number to round to.\n\n    Examples:\n        >>> assert round_to_multiple(10, 2) == 12\n        >>> assert round_to_multiple(11, 2) == 12\n        >>> assert round_to_multiple(12, 2) == 12\n        >>> assert round_to_multiple(13, 2) == 14\n        >>> assert round_to_multiple(14, 2) == 14\n        >>> assert round_to_multiple(15, 2) == 16\n        >>> assert round_to_multiple(16, 2) == 16\n        >>> assert round_to_multiple(17, 2) == 18\n        >>> assert round_to_multiple(18, 2) == 18\n        >>> assert round_to_multiple(19, 2) == 20\n        >>> assert round_to_multiple(20, 2) == 20\n        >>> assert round_to_multiple(21, 2) == 22\n        >>> assert round_to_multiple(22, 2) == 22\n        >>> assert round_to_multiple(23, 2) == 24\n        >>> assert round_to_multiple(24, 2) == 24\n        >>> assert round_to_multiple(25, 2) == 26\n        >>> assert round_to_multiple(26, 2) == 26\n        >>> assert round_to_multiple(27, 2) == 28\n        >>> assert round_to_multiple(28, 2) == 28\n        >>> assert round_to_multiple(29, 2) == 30\n        >>> assert round_to_multiple(30, 2) == 30\n        >>> assert round_to_multiple(31, 2) ==",
      0.5068359375
    ],
    [
      "from math import ceil, floor\n\n\ndef nearest_multiple(number, multiple):\n    if number < 0:\n        return -1 * nearest_multiple(-number, multiple)\n\n    quotient, remainder = divmod(number, multiple)\n    if remainder == 0:\n        return number\n    elif remainder >= multiple / 2:\n        return multiple * ceil(number / multiple)\n    else:\n        return multiple * floor(number / multiple)\n\n\nif __name__ == \"__main__\":\n    print(nearest_multiple(2.7, 0.3))\n    print(nearest_multiple(2.8, 0.3))\n    print(nearest_multiple(2.9, 0.3))\n    print(nearest_multiple(3.1, 0.3))\n    print(nearest_multiple(3.2, 0.3))\n    print(nearest_multiple(3.3, 0.3))\n    print(nearest_multiple(3.4, 0.3))\n    print(nearest_multiple(3.5, 0.3))\n    print(nearest_multiple(3.6, 0.3))\n    print(nearest_multiple(3.7, 0.3))\n    print(nearest_multiple(3.8, 0.3))\n    print(nearest_multiple(3.9, 0.3))\n    print(nearest_multiple(4.0, 0.3))\n    print(nearest_multiple(4.1, 0.3))\n    print(nearest_multiple(4.2, 0.3))\n    print(nearest_multiple(4.3, 0.3))\n    print(nearest_multiple(4.4, 0.3))\n    print(nearest_multiple(4.5, 0.3))\n    print(nearest_multiple(4.6, 0.3))\n    print(nearest_multiple(4.7, 0.3))\n    print(nearest_multiple(4.8, 0.3))\n    print(nearest_multiple(4.9, 0.",
      0.406005859375
    ],
    [
      "from functools import wraps\n\n\ndef round_to_nearest(func):\n    @wraps(func)\n    def wrapper(num, nearest):\n        return nearest * round(num / nearest)\n\n    return wrapper\n\n\n@round_to_nearest\ndef round_to_nearest_of_5(num, nearest):\n    pass\n\n\ndef main():\n    print(round_to_nearest_of_5(3, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.239013671875
    ],
    [
      "from functools import partial\n\n\ndef round_to_multiple(number: int, multiple: int) -> int:\n    \"\"\"Round the given number to the nearest multiple of a specific number.\n\n    Args:\n        number (int): Number to round.\n        multiple (int): Multiple to round to.\n\n    Examples:\n        >>> round_to_multiple(11, 5)\n        10\n        >>> round_to_multiple(12, 5)\n        15\n        >>> round_to_multiple(13, 5)\n        15\n        >>> round_to_multiple(14, 5)\n        15\n        >>> round_to_multiple(15, 5)\n        15\n        >>> round_to_multiple(16, 5)\n        20\n        >>> round_to_multiple(17, 5)\n        20\n        >>> round_to_multiple(18, 5)\n        20\n        >>> round_to_multiple(19, 5)\n        20\n    \"\"\"\n    return multiple * round(number / multiple)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)",
      -0.2403564453125
    ],
    [
      "import math\n\n\ndef round_number(number, multiple):\n    return math.ceil(number / multiple) * multiple\n\n\nif __name__ == '__main__':\n    print(round_number(34, 5))\n    print(round_number(4, 4))\n    print(round_number(5, 2))",
      -0.463623046875
    ],
    [
      "from functools import partial\n\n\ndef nearest_multiple(number, multiple):\n    if number % multiple == 0:\n        return number\n    else:\n        return multiple * (round(number / multiple))\n\n\nprint(nearest_multiple(47, 5))\nprint(nearest_multiple(3, 5))\nprint(nearest_multiple(13, 5))\nprint(nearest_multiple(123, 5))\nprint(nearest_multiple(124, 5))\nprint(nearest_multiple(125, 5))\nprint(nearest_multiple(126, 5))\nprint(nearest_multiple(127, 5))\nprint(nearest_multiple(128, 5))\nprint(nearest_multiple(129, 5))\n\n# using partial\nnearest_multiple_partial = partial(nearest_multiple, multiple=5)\nprint(nearest_multiple_partial(47))\nprint(nearest_multiple_partial(3))\nprint(nearest_multiple_partial(13))\nprint(nearest_multiple_partial(123))\nprint(nearest_multiple_partial(124))\nprint(nearest_multiple_partial(125))\nprint(nearest_multiple_partial(126))\nprint(nearest_multiple_partial(127))\nprint(nearest_multiple_partial(128))\nprint(nearest_multiple_partial(129))",
      -0.56103515625
    ],
    [
      "def round_number(number, multiple):\n    return int((number + (multiple / 2)) / multiple) * multiple\n\n\ndef main():\n    print(round_number(11, 5))\n\n\nif __name__ == '__main__':\n    main()",
      -0.61669921875
    ],
    [
      "def round_nearest_multiple(num, nearest):\n    return ((num + (nearest / 2)) // nearest) * nearest\n\n\nif __name__ == \"__main__\":\n    print(round_nearest_multiple(20, 10))\n    print(round_nearest_multiple(30, 10))\n    print(round_nearest_multiple(40, 10))\n    print(round_nearest_multiple(50, 10))\n    print(round_nearest_multiple(60, 10))",
      -0.85595703125
    ],
    [
      "from functools import partial\n\n\ndef round_to_multiple(number, multiple):\n    return (\n        (number + (multiple / 2))\n        // multiple\n        * multiple\n    )\n\n\nround_to_multiple_partial = partial(round_to_multiple, multiple=10)\nprint(round_to_multiple_partial(32))",
      -0.85595703125
    ],
    [
      "def round_nearest_multiple(number, multiple):\n    return multiple * round(number / multiple)\n\n\nif __name__ == \"__main__\":\n    print(round_nearest_multiple(22, 5))",
      -0.85595703125
    ],
    [
      "def round_nearest_multiple(number, multiple):\n    return multiple * round(number / multiple)\n\n\nif __name__ == '__main__':\n    print(round_nearest_multiple(13, 5))",
      -0.85595703125
    ],
    [
      "import math\n\n\ndef round_to_multiple(n, m):\n    return m * round(n / m)\n\n\nif __name__ == \"__main__\":\n    print(round_to_multiple(11, 5))\n    print(round_to_multiple(10, 5))\n    print(round_to_multiple(11.1, 0.5))\n    print(round_to_multiple(11.1, 0.5))\n    print(round_to_multiple(11.1, 0.1))\n    print(round_to_multiple(11.1, 0.1))",
      -0.85595703125
    ],
    [
      "def round_number(number, multiple):\n    return multiple * round(number/multiple)\n\nif __name__ == '__main__':\n    print(\"Rounded Number:\", round_number(10.123, 0.05))\n    print(\"Rounded Number:\", round_number(10.123, 0.1))\n    print(\"Rounded Number:\", round_number(10.123, 10))",
      -0.85595703125
    ],
    [
      "def nearest_multiple(number, multiple):\n    \"\"\"\n    :param number: int\n    :param multiple: int\n    :return: int\n    \"\"\"\n    return round(number / multiple) * multiple\n\n\nif __name__ == '__main__':\n    print(nearest_multiple(17, 5))\n    print(nearest_multiple(14, 5))\n    print(nearest_multiple(21, 5))",
      -0.85595703125
    ],
    [
      "def round_to_nearest_multiple(number, multiple):\n    return (multiple * round(number / multiple))\n\n\nif __name__ == \"__main__\":\n    print(round_to_nearest_multiple(15, 5))\n    print(round_to_nearest_multiple(14, 5))\n    print(round_to_nearest_multiple(17, 5))",
      -0.85693359375
    ],
    [
      "def round_to_multiple(number, multiple):\n    return multiple * round(number / multiple)",
      -0.85693359375
    ],
    [
      "def nearest_multiple(num, base):\n    return base * round(num / base)\n\n\ndef test_nearest_multiple():\n    \"\"\"\n    >>> nearest_multiple(10, 2)\n    12\n    >>> nearest_multiple(14, 5)\n    15\n    >>> nearest_multiple(35, 5)\n    40\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def round_to_multiple(num, multiple):\n    return multiple * round(num / multiple)\n\n\nif __name__ == \"__main__\":\n    print(round_to_multiple(4.2, 0.1))\n    print(round_to_multiple(4.2, 0.5))\n    print(round_to_multiple(4.2, 1))\n    print(round_to_multiple(4.2, 2))\n    print(round_to_multiple(4.2, 5))\n    print(round_to_multiple(4.2, 10))\n    print(round_to_multiple(4.2, 100))",
      -0.85693359375
    ],
    [
      "def round_nearest_multiple(number, multiple):\n    \"\"\"\n    Rounds number to the nearest multiple of a specific number.\n    \"\"\"\n    return round((number + multiple/2) / multiple) * multiple\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def nearest_multiple(number, multiple):\n    return multiple * round(number / multiple)\n\n\nif __name__ == \"__main__\":\n    print(nearest_multiple(15, 5))",
      -0.85693359375
    ],
    [
      "from math import ceil\n\n\ndef round_to_multiple(number, multiple):\n    return multiple * ceil(number / multiple)\n\n\nif __name__ == \"__main__\":\n    print(round_to_multiple(4, 5))",
      -0.85693359375
    ],
    [
      "def round_number(number, multiple):\n    return multiple * round(number / multiple)\n\n\nprint(round_number(45, 10))\nprint(round_number(100, 5))\nprint(round_number(100, 25))\nprint(round_number(100, 100))",
      -0.85693359375
    ],
    [
      "from functools import partial\n\n\ndef round_nearest(number, multiple):\n    return round(number / multiple) * multiple\n\n\nround_nearest_5 = partial(round_nearest, multiple=5)\nround_nearest_10 = partial(round_nearest, multiple=10)\nround_nearest_20 = partial(round_nearest, multiple=20)\nround_nearest_50 = partial(round_nearest, multiple=50)\nround_nearest_100 = partial(round_nearest, multiple=100)",
      -0.85693359375
    ],
    [
      "def round_nearest_multiple(number, multiple):\n    return multiple * round(number / multiple)\n\n\nprint(round_nearest_multiple(17, 3))\nprint(round_nearest_multiple(18, 3))\nprint(round_nearest_multiple(19, 3))",
      -0.85693359375
    ],
    [
      "from functools import partial\n\n\ndef round_nearest(number, multiple):\n    return multiple * round(number / multiple)\n\n\ndef round_nearest_partial(number, multiple):\n    return partial(round_nearest, number, multiple)\n\n\ndef round_nearest_lambda(number, multiple):\n    return lambda: multiple * round(number / multiple)",
      -0.85693359375
    ],
    [
      "from math import ceil\n\n\ndef nearest_multiple(number: int, multiple: int) -> int:\n    \"\"\"Rounds the given number to the nearest multiple of a specific number.\n\n    Args:\n        number: the number to round\n        multiple: the number to round to\n\n    Examples:\n        >>> assert nearest_multiple(12, 5) == 10\n    \"\"\"\n    return ceil(number / multiple) * multiple\n\n\nif __name__ == \"__main__\":\n    print(nearest_multiple(12, 5))",
      -0.85693359375
    ],
    [
      "def round_nearest_multiple(number, multiple):\n    return (number + multiple // 2) // multiple * multiple\n\n\nprint(round_nearest_multiple(12, 5))\nprint(round_nearest_multiple(12, 3))\nprint(round_nearest_multiple(12, 2))\nprint(round_nearest_multiple(12, 1))\nprint(round_nearest_multiple(12, 6))\nprint(round_nearest_multiple(12, 7))",
      -0.85693359375
    ],
    [
      "def round_to_multiple(number, multiple):\n    return multiple * round(float(number) / multiple)\n\n\nprint(round_to_multiple(15, 5))\nprint(round_to_multiple(10, 5))\nprint(round_to_multiple(16, 5))",
      -0.85693359375
    ],
    [
      "def round_to_multiple(number, multiple):\n    return multiple * round(number/multiple)\n\nif __name__ == '__main__':\n    print(round_to_multiple(14, 5))",
      -0.85693359375
    ],
    [
      "def round_to_nearest_multiple(n, multiple):\n    return int(n - (n % multiple) + ((n % multiple) >= (multiple / 2) and multiple or 0))",
      -0.85693359375
    ],
    [
      "from math import ceil\n\n\ndef round_to_multiple(number, multiple):\n    return multiple * ceil(number / multiple)\n\n\nprint(round_to_multiple(5.5, 2))\nprint(round_to_multiple(5.2, 2))\nprint(round_to_multiple(5.7, 2))\nprint(round_to_multiple(5.7, 3))\nprint(round_to_multiple(1.2, 0.2))",
      -0.85791015625
    ],
    [
      "from unittest import TestCase\n\n\ndef round_to_multiple(number, multiple):\n    return multiple * round(number / multiple)\n\n\nclass TestRoundToMultiple(TestCase):\n    def test_round_to_multiple(self):\n        assert round_to_multiple(13, 5) == 15\n        assert round_to_multiple(17, 5) == 20\n        assert round_to_multiple(19, 5) == 20\n        assert round_to_multiple(16, 5) == 20\n        assert round_to_multiple(15, 5) == 15\n        assert round_to_multiple(14, 5) == 10\n        assert round_to_multiple(12, 5) == 10",
      -0.85791015625
    ],
    [
      "def nearest_multiple(num, multiple):\n    \"\"\"\n    :param num: int\n    :param multiple: int\n    :return: int\n    \"\"\"\n    return num - (num % multiple)\n\n\nif __name__ == '__main__':\n    print(nearest_multiple(11, 5))\n    print(nearest_multiple(21, 5))\n    print(nearest_multiple(24, 5))\n    print(nearest_multiple(25, 5))\n    print(nearest_multiple(26, 5))\n    print(nearest_multiple(27, 5))",
      -0.85791015625
    ],
    [
      "from math import floor\n\n\ndef round_to_multiple(number, multiple):\n    return multiple * floor(number / multiple)\n\n\nif __name__ == \"__main__\":\n    assert round_to_multiple(10.1, 2) == 12\n    assert round_to_multiple(10.1, 3) == 9\n    assert round_to_multiple(10.1, 5) == 10",
      -0.85791015625
    ],
    [
      "def round_nearest_multiple(number, multiple):\n    return (number // multiple + (number % multiple > 0)) * multiple\n\n\nif __name__ == \"__main__\":\n    print(round_nearest_multiple(11, 5))",
      -0.85791015625
    ],
    [
      "from functools import partial\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Union\n\n\ndef nearest_multiple(number: float, multiple: int) -> int:\n    \"\"\"Returns the nearest multiple of a number.\n\n    Args:\n        number (float): number to be rounded\n        multiple (int): the multiple to round to\n\n    Returns:\n        int: rounded number\n    \"\"\"\n    return round(number / multiple) * multiple\n\n\nif __name__ == \"__main__\":\n    print(nearest_multiple(10, 5))\n    print(nearest_multiple(10, 3))\n    print(nearest_multiple(10.5, 3))",
      -0.8583984375
    ],
    [
      "from functools import partial\n\n\ndef round_to_multiple(number, multiple):\n    return multiple * round(number / multiple)\n\n\ndef round_to_multiple_of_2(number):\n    return round_to_multiple(number, 2)\n\n\ndef round_to_multiple_of_5(number):\n    return round_to_multiple(number, 5)\n\n\ndef main():\n    print(round_to_multiple(10, 3))\n    print(round_to_multiple(10, 5))\n\n    print(round_to_multiple_of_2(10))\n    print(round_to_multiple_of_5(10))\n\n    round_to_multiple_of_3 = partial(round_to_multiple, multiple=3)\n    print(round_to_multiple_of_3(10))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def round_nearest(number, multiple):\n    return (number + (multiple / 2)) // multiple * multiple\n\n\nprint(round_nearest(10, 5))\nprint(round_nearest(10.5, 5))\nprint(round_nearest(10.7, 5))\nprint(round_nearest(10.5, 2))\nprint(round_nearest(10.5, 3))\nprint(round_nearest(10.5, 6))\nprint(round_nearest(10.5, 10))",
      -0.8583984375
    ],
    [
      "def round_number(number, multiple):\n    return (multiple * round(float(number) / multiple))\n\n\nprint(round_number(10.2, 10))\nprint(round_number(10.3, 10))\nprint(round_number(10.5, 10))\nprint(round_number(10.6, 10))\nprint(round_number(10.7, 10))\nprint(round_number(10.8, 10))\nprint(round_number(10.9, 10))",
      -0.8583984375
    ],
    [
      "def round_number(num, multiple):\n    return (int(num / multiple) + (num % multiple > 0)) * multiple\n\n\nprint(round_number(25, 5))\nprint(round_number(14, 5))\nprint(round_number(27, 5))\nprint(round_number(26, 5))\nprint(round_number(21, 5))\nprint(round_number(22, 5))\nprint(round_number(23, 5))\nprint(round_number(24, 5))",
      -0.8583984375
    ],
    [
      "def round_to_multiple(number, multiple):\n    return round(number / multiple) * multiple\n\nif __name__ == '__main__':\n    print(round_to_multiple(12, 5))",
      -0.8583984375
    ],
    [
      "from math import floor\n\n\ndef round_to_multiple(num, multiple):\n    return multiple * floor(num / multiple)\n\n\nprint(round_to_multiple(10, 2))\nprint(round_to_multiple(11, 2))\nprint(round_to_multiple(10, 5))\nprint(round_to_multiple(11, 5))",
      -0.8583984375
    ],
    [
      "from math import ceil\n\n\ndef round_nearest_multiple(number, multiple):\n    return int(ceil(number / multiple)) * multiple\n\n\nif __name__ == \"__main__\":\n    print(round_nearest_multiple(10, 5))",
      -0.8583984375
    ],
    [
      "def nearest_multiple(number: int, multiple: int) -> int:\n    \"\"\"Rounds the given number to the nearest multiple of a specific number.\n\n    Args:\n        number (int): number to round.\n        multiple (int): number to round to.\n\n    Examples:\n        >>> nearest_multiple(145, 23)\n        162\n        >>> nearest_multiple(145, 13)\n        144\n    \"\"\"\n    return multiple * round(number / multiple)\n\n\nif __name__ == \"__main__\":\n    print(nearest_multiple(145, 23))\n    print(nearest_multiple(145, 13))",
      -0.8583984375
    ],
    [
      "from typing import Union\n\n\ndef nearest_multiple(n: Union[int, float], multiple: int) -> int:\n    \"\"\"Rounds the given number to the nearest multiple of a specific number.\n\n    Args:\n        n: the number to round.\n        multiple: the multiple to round to.\n\n    Returns:\n        The number rounded to the nearest multiple.\n\n    Examples:\n        >>> nearest_multiple(11, 5)\n        10\n        >>> nearest_multiple(12, 5)\n        15\n        >>> nearest_multiple(17, 5)\n        20\n        >>> nearest_multiple(18, 5)\n        20\n    \"\"\"\n    if n == 0:\n        return 0\n\n    return int(multiple * round(n / multiple))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def round_to_nearest(number, multiple):\n    return (number + (multiple/2)) // multiple * multiple\n\ndef main():\n    print(round_to_nearest(2, 3))\n    print(round_to_nearest(3, 3))\n    print(round_to_nearest(4, 3))\n    print(round_to_nearest(5, 3))\n    print(round_to_nearest(6, 3))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def round_number(number, multiple):\n    return multiple * round(number / multiple)\n\nif __name__ == '__main__':\n    print(round_number(15, 5))",
      -0.85888671875
    ],
    [
      "from math import floor, ceil\n\n\ndef round_to_nearest(num, multiple):\n    return multiple * round(num / multiple)\n\n\ndef round_to_nearest_math(num, multiple):\n    return floor(num / multiple + 0.5) * multiple\n\n\ndef round_to_nearest_pythonic(num, multiple):\n    return multiple * round(num / multiple)\n\n\nprint(round_to_nearest(12.34, 0.5))\nprint(round_to_nearest_math(12.34, 0.5))\nprint(round_to_nearest_pythonic(12.34, 0.5))",
      -0.85888671875
    ],
    [
      "def round_number(num, multiple):\n    return (int(num/multiple) * multiple)\n\nprint(round_number(10, 3))",
      -0.85888671875
    ],
    [
      "def round_nearest(num, multiple):\n    return multiple * round(num / multiple)\n\n\ndef main():\n    print(round_nearest(18.5, 5))\n    print(round_nearest(18.5, 2))\n    print(round_nearest(18.5, 3))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def round_to_nearest_multiple(number, multiple):\n    \"\"\"Round the given number to the nearest multiple of a specific number.\"\"\"\n    return multiple * round(number/multiple)",
      -0.85888671875
    ],
    [
      "def round_nearest_multiple(num, multiple):\n    \"\"\"\n    >>> round_nearest_multiple(10, 5)\n    10\n    >>> round_nearest_multiple(13, 5)\n    15\n    >>> round_nearest_multiple(17, 5)\n    20\n    >>> round_nearest_multiple(17, 6)\n    24\n    >>> round_nearest_multiple(17, 7)\n    17\n    >>> round_nearest_multiple(17, 17)\n    17\n    \"\"\"\n    return (num // multiple + (num % multiple >= multiple // 2)) * multiple\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def round_to_multiple(number, multiple):\n    \"\"\"\n    >>> round_to_multiple(15, 5)\n    20\n    >>> round_to_multiple(11, 5)\n    10\n    >>> round_to_multiple(4, 5)\n    0\n    >>> round_to_multiple(17, 5)\n    20\n    \"\"\"\n    return (number // multiple) * multiple\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def round_to_multiple(number, multiple):\n    \"\"\"\n    >>> round_to_multiple(10, 3)\n    9\n    >>> round_to_multiple(10, 2)\n    10\n    >>> round_to_multiple(11, 2)\n    12\n    >>> round_to_multiple(11, 3)\n    12\n    \"\"\"\n    return multiple * round(number / multiple)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "def round_nearest(num: int, multiple: int):\n    return int(multiple * round(float(num) / multiple))\n\n\ndef main():\n    print(round_nearest(12, 5))\n    print(round_nearest(12, 10))\n\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "def round_nearest(number, multiple):\n    return (multiple * round(float(number) / multiple))\n\n\nprint(round_nearest(15, 5))\nprint(round_nearest(15, 10))\nprint(round_nearest(16, 10))\nprint(round_nearest(16, 100))\nprint(round_nearest(16, 1000))\nprint(round_nearest(17, 1000))\nprint(round_nearest(17, 10000))\nprint(round_nearest(18, 10000))\nprint(round_nearest(18, 100000))\nprint(round_nearest(19, 100000))\nprint(round_nearest(20, 100000))\nprint(round_nearest(21, 100000))\nprint(round_nearest(22, 100000))\nprint(round_nearest(23, 100000))\nprint(round_nearest(24, 100000))\nprint(round_nearest(25, 100000))\nprint(round_nearest(26, 100000))\nprint(round_nearest(27, 100000))\nprint(round_nearest(28, 100000))\nprint(round_nearest(29, 100000))\nprint(round_nearest(30, 100000))",
      -0.88525390625
    ],
    [
      "def round_number(number, multiple):\n    \"\"\"\n    >>> round_number(10, 5)\n    10\n    >>> round_number(14, 5)\n    15\n    >>> round_number(19, 5)\n    20\n    >>> round_number(21, 5)\n    20\n    >>> round_number(30, 5)\n    30\n    >>> round_number(35, 5)\n    40\n    >>> round_number(39, 5)\n    40\n    >>> round_number(40, 5)\n    40\n    >>> round_number(45, 5)\n    50\n    >>> round_number(49, 5)\n    50\n    >>> round_number(50, 5)\n    50\n    \"\"\"\n    return number + (multiple - (number % multiple)) % multiple\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8955078125
    ],
    [
      "from math import ceil\n\n\ndef round_to_nearest_multiple(number, multiple):\n    if multiple == 0:\n        raise ValueError('Multiple must be greater than 0')\n    return ceil(number / multiple) * multiple\n\n\nif __name__ == '__main__':\n    print(round_to_nearest_multiple(10, 5))\n    print(round_to_nearest_multiple(11, 5))\n    print(round_to_nearest_multiple(12, 5))\n    print(round_to_nearest_multiple(13, 5))\n    print(round_to_nearest_multiple(14, 5))\n    print(round_to_nearest_multiple(15, 5))",
      -0.99462890625
    ],
    [
      "def round_to_multiple(number, multiple):\n    return (number + (multiple/2)) // multiple * multiple\n\n\nif __name__ == '__main__':\n    print(round_to_multiple(2.5, 2))\n    print(round_to_multiple(3.5, 2))\n    print(round_to_multiple(4.5, 2))\n    print(round_to_multiple(5.5, 2))\n    print(round_to_multiple(6.5, 2))\n    print(round_to_multiple(7.5, 2))\n    print(round_to_multiple(8.5, 2))\n    print(round_to_multiple(9.5, 2))\n    print(round_to_multiple(10.5, 2))\n    print(round_to_multiple(11.5, 2))\n    print(round_to_multiple(12.5, 2))\n    print(round_to_multiple(13.5, 2))",
      -0.99609375
    ],
    [
      "def round_to_nearest(number, base):\n    if number % base == 0:\n        return number\n\n    return (number + base / 2) // base * base\n\n\nif __name__ == \"__main__\":\n    assert round_to_nearest(4, 2) == 4\n    assert round_to_nearest(5, 2) == 6\n    assert round_to_nearest(6, 2) == 6\n    assert round_to_nearest(7, 2) == 8\n    assert round_to_nearest(8, 2) == 8",
      -1.142578125
    ],
    [
      "from math import ceil\n\n\ndef round_nearest_multiple(number: int, base: int) -> int:\n    \"\"\"Round the given number to the nearest multiple of a specific number.\n\n    Args:\n        number (int): Given number to round\n        base (int): Specific number\n\n    Examples:\n        >>> assert round_nearest_multiple(10, 2) == 12\n        >>> assert round_nearest_multiple(12, 2) == 12\n        >>> assert round_nearest_multiple(14, 2) == 16\n        >>> assert round_nearest_multiple(15, 2) == 16\n        >>> assert round_nearest_multiple(16, 2) == 16\n        >>> assert round_nearest_multiple(17, 2) == 18\n        >>> assert round_nearest_multiple(18, 2) == 18\n        >>> assert round_nearest_multiple(20, 2) == 20\n        >>> assert round_nearest_multiple(21, 2) == 24\n        >>> assert round_nearest_multiple(22, 2) == 24\n        >>> assert round_nearest_multiple(23, 2) == 24\n        >>> assert round_nearest_multiple(24, 2) == 24\n        >>> assert round_nearest_multiple(25, 2) == 28\n        >>> assert round_nearest_multiple(26, 2) == 28\n        >>> assert round_nearest_multiple(27, 2) == 28\n        >>> assert round_nearest_multiple(28, 2) == 28\n        >>> assert round_nearest_multiple(29, 2) == 32\n        >>> assert round_nearest_multiple(30, 2) == 32\n        >>> assert round_nearest_multiple(31, 2) == 32\n        >>> assert round_nearest_multiple(32, 2) == 32\n        >>> assert round_nearest_multiple(33, 2) ==",
      -1.265625
    ],
    [
      "def round_to_nearest_multiple(number, multiple):\n    return round(number / multiple) * multiple\n\n\nif __name__ == \"__main__\":\n    print(round_to_nearest_multiple(12, 5))\n    print(round_to_nearest_multiple(13, 5))\n    print(round_to_nearest_multiple(123, 10))",
      -1.392578125
    ],
    [
      "def round_nearest(n, d):\n    if n > 0:\n        return ((n // d) * d) + min((n % d), ((n % d) + d) // 2)\n    return ((n // d) * d) - min((abs(n) % d), ((abs(n) % d) + d) // 2)\n\n\nif __name__ == '__main__':\n    print(round_nearest(10, 5))\n    print(round_nearest(-10, 5))\n    print(round_nearest(10, 4))\n    print(round_nearest(-10, 4))\n    print(round_nearest(10, 3))\n    print(round_nearest(-10, 3))\n    print(round_nearest(10, 2))\n    print(round_nearest(-10, 2))\n    print(round_nearest(10, 1))\n    print(round_nearest(-10, 1))\n    print(round_nearest(10, 0))\n    print(round_nearest(-10, 0))\n    print(round_nearest(10, -1))\n    print(round_nearest(-10, -1))\n    print(round_nearest(10, -2))\n    print(round_nearest(-10, -2))\n    print(round_nearest(10, -3))\n    print(round_nearest(-10, -3))\n    print(round_nearest(10, -4))\n    print(round_nearest(-10, -4))",
      -1.79296875
    ],
    [
      "from typing import List\n\n\ndef nearest_multiple(number: int, multiple: int) -> int:\n    \"\"\"Rounds the given number to the nearest multiple of a specific number.\n\n    Args:\n        number (int): the given number to round\n        multiple (int): the multiple of which to round the given number\n\n    Examples:\n        >>> nearest_multiple(15, 10)\n        20\n        >>> nearest_multiple(17, 5)\n        20\n        >>> nearest_multiple(19, 10)\n        20\n    \"\"\"\n    return number - number % multiple + (multiple if number % multiple > multiple // 2 else 0)\n\n\ndef main(number: int, multiple: int) -> List[int]:\n    result = []\n    for number in range(number):\n        result.append(nearest_multiple(number, multiple))\n    return result\n\n\nif __name__ == \"__main__\":\n    print(main(15, 10))\n    print(main(17, 5))\n    print(main(19, 10))",
      -1.9306640625
    ],
    [
      "from functools import partial\n\n\ndef nearest_multiple(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_2(number, multiple):\n    return partial(round, number, multiple)\n\n\ndef nearest_multiple_3(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_4(number, multiple):\n    return (number // multiple + 1) * multiple\n\n\ndef nearest_multiple_5(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_6(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_7(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_8(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_9(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_10(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_11(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_12(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_13(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple / 2 else 0)\n\n\ndef nearest_multiple_14(number, multiple):\n    return number - number % multiple + (multiple if number % multiple >= multiple /",
      -2.494140625
    ],
    [
      "def round_to_multiple(num, multiple):\n    return (num + multiple/2) // multiple * multiple\n\nprint(round_to_multiple(16, 10))\nprint(round_to_multiple(17, 10))\nprint(round_to_multiple(18, 10))\nprint(round_to_multiple(19, 10))\nprint(round_to_multiple(20, 10))\nprint(round_to_multiple(21, 10))\nprint(round_to_multiple(22, 10))\nprint(round_to_multiple(23, 10))\nprint(round_to_multiple(24, 10))\nprint(round_to_multiple(25, 10))\nprint(round_to_multiple(26, 10))\nprint(round_to_multiple(27, 10))\nprint(round_to_multiple(28, 10))\nprint(round_to_multiple(29, 10))\nprint(round_to_multiple(30, 10))\nprint(round_to_multiple(31, 10))\nprint(round_to_multiple(32, 10))\nprint(round_to_multiple(33, 10))\nprint(round_to_multiple(34, 10))\nprint(round_to_multiple(35, 10))\nprint(round_to_multiple(36, 10))\nprint(round_to_multiple(37, 10))\nprint(round_to_multiple(38, 10))\nprint(round_to_multiple(39, 10))\nprint(round_to_multiple(40, 10))\nprint(round_to_multiple(41, 10))\nprint(round_to_multiple(42, 10))\nprint(round_to_multiple(43, 10))\nprint(round_to_multiple(44, 10))\nprint(round_to_multiple(45, 10))\nprint(round_",
      -2.60546875
    ],
    [
      "from math import floor\n\ndef round_to_multiple(number, multiple):\n    \"\"\"\n    >>> round_to_multiple(10, 5)\n    10\n    >>> round_to_multiple(11, 5)\n    15\n    >>> round_to_multiple(12, 5)\n    15\n    >>> round_to_multiple(13, 5)\n    15\n    >>> round_to_multiple(14, 5)\n    15\n    >>> round_to_multiple(15, 5)\n    15\n    >>> round_to_multiple(16, 5)\n    20\n    \"\"\"\n    return number + (multiple - number % multiple) % multiple\n\n\ndef round_to_multiple_2(number, multiple):\n    \"\"\"\n    >>> round_to_multiple_2(10, 5)\n    10\n    >>> round_to_multiple_2(11, 5)\n    15\n    >>> round_to_multiple_2(12, 5)\n    15\n    >>> round_to_multiple_2(13, 5)\n    15\n    >>> round_to_multiple_2(14, 5)\n    15\n    >>> round_to_multiple_2(15, 5)\n    15\n    >>> round_to_multiple_2(16, 5)\n    20\n    \"\"\"\n    return multiple * floor(number / multiple)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.763671875
    ],
    [
      "from functools import partial\n\n\ndef round_to_nearest(number, multiple):\n    return multiple * round(number / multiple)\n\n\ndef round_to_nearest_lambda(number, multiple):\n    return multiple * round(number / multiple)\n\n\ndef round_to_nearest_partial(number, multiple):\n    return partial(round, number, multiple)\n\n\nif __name__ == \"__main__\":\n    print(round_to_nearest(20, 5))\n    print(round_to_nearest_lambda(20, 5))\n    print(round_to_nearest_partial(20, 5))",
      -3.59375
    ],
    [
      "def round_to_multiple(number, multiple):\n    return (number // multiple) * multiple\n\n\nprint(round_to_multiple(14, 5))\nprint(round_to_multiple(27, 5))\nprint(round_to_multiple(28, 5))\nprint(round_to_multiple(29, 5))\nprint(round_to_multiple(30, 5))\nprint(round_to_multiple(31, 5))\nprint(round_to_multiple(32, 5))\nprint(round_to_multiple(33, 5))\nprint(round_to_multiple(34, 5))\nprint(round_to_multiple(35, 5))\nprint(round_to_multiple(36, 5))\nprint(round_to_multiple(37, 5))\nprint(round_to_multiple(38, 5))\nprint(round_to_multiple(39, 5))\nprint(round_to_multiple(40, 5))\nprint(round_to_multiple(41, 5))\nprint(round_to_multiple(42, 5))\nprint(round_to_multiple(43, 5))\nprint(round_to_multiple(44, 5))\nprint(round_to_multiple(45, 5))\nprint(round_to_multiple(46, 5))\nprint(round_to_multiple(47, 5))\nprint(round_to_multiple(48, 5))\nprint(round_to_multiple(49, 5))\nprint(round_to_multiple(50, 5))\nprint(round_to_multiple(51, 5))\nprint(round_to_multiple(52, 5))\nprint(round_to_multiple(53, 5))\nprint(round_to_multiple(54, 5))\nprint(round_to_multiple(55, 5))\nprint(round_to_multiple(56, 5))\nprint(round_to_multiple(57, 5))\nprint(round_to_multiple",
      -4.3125
    ],
    [
      "from functools import reduce\nfrom math import floor\n\n\ndef round_number(number, multiple):\n    \"\"\"Round a number to the nearest multiple.\n\n    Args:\n        number (int): Number to round.\n        multiple (int): Multiple to round to.\n\n    Returns:\n        int: The rounded number.\n    \"\"\"\n    return number if number % multiple == 0 else (\n        multiple * (floor((number - 1) / multiple) + 1)\n    )\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (11, 2, 12),\n        (12, 2, 12),\n        (13, 2, 14),\n        (14, 2, 14),\n        (15, 2, 16),\n        (16, 2, 16),\n        (17, 2, 18),\n        (18, 2, 18),\n        (19, 2, 20),\n        (20, 2, 20),\n        (21, 2, 22),\n        (22, 2, 22),\n        (23, 2, 24),\n        (24, 2, 24),\n        (25, 2, 26),\n        (26, 2, 26),\n        (27, 2, 28),\n        (28, 2, 28),\n        (29, 2, 30),\n        (30, 2, 30),\n        (11, 3, 12),\n        (12, 3, 12),\n        (13, 3, 15),\n        (14, 3, 15),\n        (15, 3, 15),\n        (16, 3, 18),\n        (17, 3, 18),\n        (18, 3, 18),\n        (19, 3, 21),",
      -4.64453125
    ],
    [
      "from functools import partial\n\n\ndef round_to_multiple(num, multiple):\n    \"\"\"Rounds the given number to the nearest multiple of a specific number.\n\n    Args:\n        num: int, float. The number to round.\n        multiple: int, float. The multiple to round to.\n\n    Returns:\n        int, float. The rounded number.\n    \"\"\"\n    return (num + multiple / 2) // multiple * multiple\n\n\ndef main():\n    round_to_multiple_20 = partial(round_to_multiple, multiple=20)\n\n    print(round_to_multiple_20(10))\n    print(round_to_multiple_20(19))\n    print(round_to_multiple_20(20))\n    print(round_to_multiple_20(21))\n    print(round_to_multiple_20(23))\n    print(round_to_multiple_20(25))\n    print(round_to_multiple_20(26))\n    print(round_to_multiple_20(31))\n    print(round_to_multiple_20(32))\n    print(round_to_multiple_20(33))\n    print(round_to_multiple_20(39))\n    print(round_to_multiple_20(40))\n    print(round_to_multiple_20(41))\n    print(round_to_multiple_20(43))\n    print(round_to_multiple_20(44))\n    print(round_to_multiple_20(45))\n    print(round_to_multiple_20(49))\n    print(round_to_multiple_20(50))\n    print(round_to_multiple_20(51))\n    print(round_to_multiple_20(54))\n    print(round_to_multiple_20(55))\n    print(round_to_multiple_20(59))\n    print(round_to_multiple_20(60))\n    print(round_to_multiple_",
      -5.5078125
    ],
    [
      "from math import floor\n\n\ndef round_nearest_multiple(n, k):\n    \"\"\"\n    :param n: given number\n    :param k: specific number\n    :return: the nearest multiple of a specific number\n    >>> round_nearest_multiple(10, 4)\n    12\n    >>> round_nearest_multiple(35, 5)\n    40\n    >>> round_nearest_multiple(32, 16)\n    32\n    >>> round_nearest_multiple(32, 17)\n    32\n    \"\"\"\n    return (floor(n / k) + 1) * k\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.41015625
    ],
    [
      "def round_nearest(num, multiple):\n    if num % multiple == 0:\n        return num\n    else:\n        return int(num/multiple)*multiple + int(multiple/2)\n\n\nif __name__ == '__main__':\n    print(round_nearest(6, 5))\n    print(round_nearest(6, 10))\n    print(round_nearest(4, 5))\n    print(round_nearest(4, 10))\n    print(round_nearest(12, 10))",
      -7.44921875
    ],
    [
      "from math import floor, ceil\n\n\ndef round_to_multiple(number, multiple_of):\n    \"\"\"Round a number to the nearest multiple of a specific number.\n\n    Args:\n        number (int): number to round\n        multiple_of (int): multiple number\n\n    Returns:\n        int: rounded number\n    \"\"\"\n    return multiple_of * ceil(number / multiple_of)\n\n\nif __name__ == \"__main__\":\n    assert round_to_multiple(5, 3) == 6\n    assert round_to_multiple(10, 5) == 10\n    assert round_to_multiple(10, 10) == 10\n    assert round_to_multiple(10, 20) == 20\n    assert round_to_multiple(10, 50) == 50\n    assert round_to_multiple(10, 100) == 100\n    assert round_to_multiple(10, 300) == 300\n    assert round_to_multiple(10, 500) == 500\n    assert round_to_multiple(10, 1000) == 1000",
      -9.25
    ],
    [
      "from math import floor\n\n\ndef nearest_multiple(number: float, multiple: float) -> float:\n    \"\"\"\n    Return the nearest multiple of a specific number.\n    >>> nearest_multiple(10.4, 5)\n    10\n    >>> nearest_multiple(10.6, 5)\n    15\n    >>> nearest_multiple(10.1, 5)\n    10\n    >>> nearest_multiple(10.1, 1)\n    10\n    >>> nearest_multiple(10.1, 0.5)\n    10\n    >>> nearest_multiple(10.1, 0.1)\n    10\n    >>> nearest_multiple(10.1, 2)\n    10\n    >>> nearest_multiple(10.1, 10)\n    10\n    >>> nearest_multiple(10.1, 0)\n    10\n    >>> nearest_multiple(10.1, -1)\n    10\n    >>> nearest_multiple(10.1, -2)\n    10\n    >>> nearest_multiple(10.1, -10)\n    10\n    >>> nearest_multiple(-10.1, 10)\n    -10\n    >>> nearest_multiple(-10.1, -10)\n    -10\n    >>> nearest_multiple(-10.1, 0)\n    -10\n    >>> nearest_multiple(-10.1, -1)\n    -10\n    >>> nearest_multiple(-10.1, -2)\n    -10\n    >>> nearest_multiple(-10.1, 1)\n    -10\n    >>> nearest_multiple(-10.1, 0.5)\n    -10\n    >>> nearest_multiple(-10.1, 0.1)\n    -10\n    >>> nearest_multiple(-10.1, 2)\n    -10\n    >>> nearest_multiple(-10.1, 5)\n    -10\n    \"\"\"\n    return number + multiple * floor(number / multiple)\n\n\nif __name__ == \"__main__\":\n    import doctest",
      -13.109375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}