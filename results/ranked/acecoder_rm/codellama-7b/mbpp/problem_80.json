{
  "problem": {
    "task_id": "MBPP/91",
    "prompt": "Write a function to check if a substring is present in a given list of string values.",
    "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
    "test_list": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ],
    "challenge_test_list": [],
    "problem_id": 80
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\ndef is_substring(lst: List[str], substring: str) -> bool:\n    \"\"\"Returns if substring is present in the given list of strings.\n\n    Args:\n        lst (List[str]): List of strings.\n        substring (str): Substring to be searched.\n\n    Returns:\n        bool: True if substring is present in the list of strings.\n\n    Examples:\n        >>> is_substring([\"apple\", \"banana\", \"kiwi\"], \"app\")\n        True\n        >>> is_substring([\"apple\", \"banana\", \"kiwi\"], \"mango\")\n        False\n    \"\"\"\n    for i in lst:\n        if substring in i:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_substring([\"apple\", \"banana\", \"kiwi\"], \"app\"))\n    print(is_substring([\"apple\", \"banana\", \"kiwi\"], \"mango\"))",
      21.9375
    ],
    [
      "from typing import List\n\n\ndef is_substring_in_list(substring: str, values: List[str]) -> bool:\n    \"\"\"\n    Check if a substring is present in a list of string values.\n\n    Args:\n        substring: The substring to check.\n        values: The list of string values to check.\n\n    Returns:\n        True if the substring is present in the list of string values. False otherwise.\n    \"\"\"\n    for value in values:\n        if substring in value:\n            return True\n\n    return False\n\n\ndef main():\n    print(is_substring_in_list(\"abc\", [\"abc\", \"xyz\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      18.265625
    ],
    [
      "from typing import List\n\n\ndef check_substring(lst: List[str], substr: str) -> bool:\n    \"\"\"Check if a substring is present in a given list of string values.\n\n    Args:\n        lst (List[str]): List of string values.\n        substr (str): Substring to check.\n\n    Returns:\n        bool: True if the substring is present, False otherwise.\n\n    Examples:\n        >>> assert check_substring([\"abc\", \"bcd\", \"efg\"], \"abc\")\n        >>> assert not check_substring([\"abc\", \"bcd\", \"efg\"], \"a\")\n        >>> assert not check_substring([\"abc\", \"bcd\", \"efg\"], \"abcd\")\n    \"\"\"\n    return any(substr in i for i in lst)\n\n\nif __name__ == \"__main__\":\n    print(check_substring([\"abc\", \"bcd\", \"efg\"], \"abc\"))\n    print(check_substring([\"abc\", \"bcd\", \"efg\"], \"a\"))\n    print(check_substring([\"abc\", \"bcd\", \"efg\"], \"abcd\"))",
      17.75
    ],
    [
      "from typing import List\n\n\ndef check_substring(input_list: List[str], substring: str) -> bool:\n    \"\"\"\n    >>> check_substring(['abc', 'cde', 'efg', 'hij'], 'ij')\n    True\n    >>> check_substring(['abc', 'cde', 'efg', 'hij'], 'abc')\n    True\n    >>> check_substring(['abc', 'cde', 'efg', 'hij'], 'xyz')\n    False\n    >>> check_substring(['abc', 'cde', 'efg', 'hij'], '123')\n    False\n    \"\"\"\n    for string in input_list:\n        if substring in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      17.53125
    ],
    [
      "from typing import List\n\n\ndef is_substring(lst: List[str], substr: str) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for string in lst:\n        if substr in string:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_substring([\"abc\", \"bc\", \"c\"], \"c\") is True\n    assert is_substring([\"abc\", \"bc\", \"c\"], \"bc\") is True\n    assert is_substring([\"abc\", \"bc\", \"c\"], \"d\") is False",
      17.34375
    ],
    [
      "def check_string(strings: list, substring: str):\n    \"\"\"\n    Check if a substring is present in a given list of string values.\n\n    Args:\n        strings (list): List of strings to check.\n        substring (str): Substring to check.\n\n    Returns:\n        bool: True if substring is present in list of strings, False otherwise.\n\n    Examples:\n        >>> check_string([\"apple\", \"banana\", \"pineapple\"], \"app\")\n        True\n        >>> check_string([\"apple\", \"banana\", \"pineapple\"], \"mango\")\n        False\n    \"\"\"\n    for string in strings:\n        if substring in string:\n            return True\n    return False\n\n\ndef main():\n    print(check_string([\"apple\", \"banana\", \"pineapple\"], \"app\"))\n    print(check_string([\"apple\", \"banana\", \"pineapple\"], \"mango\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      17.234375
    ],
    [
      "def check_substring(arr, sub_string):\n    for i in range(len(arr)):\n        if sub_string in arr[i]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    test_cases = [\n        ([\"abcd\", \"xyz\", \"bcad\", \"cabd\"], 'bcd', True),\n        ([\"abcd\", \"xyz\", \"bcad\", \"cabd\"], 'bcf', False),\n        ([\"abcd\", \"xyz\", \"bcad\", \"cabd\"], 'abcd', True),\n    ]\n\n    for test_case in test_cases:\n        result = check_substring(test_case[0], test_case[1])\n        assert result == test_case[2]",
      16.65625
    ],
    [
      "def check_if_substring_in_list(list_str: list[str], substr: str) -> bool:\n    \"\"\"\n    >>> check_if_substring_in_list([\"abc\", \"xyz\", \"abcde\"], \"abc\")\n    True\n    >>> check_if_substring_in_list([\"abc\", \"xyz\", \"abcde\"], \"xyz\")\n    True\n    >>> check_if_substring_in_list([\"abc\", \"xyz\", \"abcde\"], \"def\")\n    False\n    \"\"\"\n    return any(substr in s for s in list_str)\n\n\ndef check_if_substring_in_list_optimized(list_str: list[str], substr: str) -> bool:\n    \"\"\"\n    >>> check_if_substring_in_list_optimized([\"abc\", \"xyz\", \"abcde\"], \"abc\")\n    True\n    >>> check_if_substring_in_list_optimized([\"abc\", \"xyz\", \"abcde\"], \"xyz\")\n    True\n    >>> check_if_substring_in_list_optimized([\"abc\", \"xyz\", \"abcde\"], \"def\")\n    False\n    \"\"\"\n    return any(substr in s for s in list_str)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      16.484375
    ],
    [
      "from typing import List\n\n\ndef check_substring(list_of_strings: List[str], substring: str) -> bool:\n    \"\"\"Check if a substring is present in a given list of string values.\n\n    Args:\n        list_of_strings (List[str]): list of strings to be checked\n        substring (str): substring to be checked\n\n    Returns:\n        bool: True if substring is present in list_of_strings, False otherwise\n    \"\"\"\n    return any(substring in item for item in list_of_strings)\n\n\nif __name__ == \"__main__\":\n    print(check_substring([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"], \"k\"))\n    print(check_substring([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"], \"xyz\"))\n    print(check_substring([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"], \"jkl\"))",
      16.359375
    ],
    [
      "from typing import List\n\n\ndef find_substring(data: List[str], substring: str) -> bool:\n    \"\"\"Returns True if a substring is present in a given list of string values.\n\n    Args:\n        data (List[str]): list of string values\n        substring (str): substring to search\n\n    Examples:\n        >>> assert find_substring([\"abcd\", \"bcd\", \"cd\"], \"cd\")\n        >>> assert find_substring([\"abcd\", \"bcd\", \"cd\"], \"xyz\") == False\n    \"\"\"\n    return any(substring in d for d in data)\n\n\nif __name__ == \"__main__\":\n    print(find_substring([\"abcd\", \"bcd\", \"cd\"], \"cd\"))",
      15.65625
    ],
    [
      "def check_if_substring_in_list(substring, list_of_strings):\n    \"\"\"\n    >>> check_if_substring_in_list('test', ['test', 'tet', 't'])\n    True\n    >>> check_if_substring_in_list('test', ['test', 'tet', 't', 'test'])\n    True\n    >>> check_if_substring_in_list('test', ['test', 'tet', 't', 'testing'])\n    False\n    \"\"\"\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n\ndef check_if_substring_in_list_eff(substring, list_of_strings):\n    \"\"\"\n    >>> check_if_substring_in_list_eff('test', ['test', 'tet', 't'])\n    True\n    >>> check_if_substring_in_list_eff('test', ['test', 'tet', 't', 'test'])\n    True\n    >>> check_if_substring_in_list_eff('test', ['test', 'tet', 't', 'testing'])\n    False\n    \"\"\"\n    return any(substring in string for string in list_of_strings)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      15.1015625
    ],
    [
      "def is_substring(values, substring):\n    for value in values:\n        if value.find(substring) != -1:\n            return True\n    return False\n\n\ndef main():\n    print(is_substring([\"Hello\", \"Hi\", \"Hola\"], \"o\"))\n    print(is_substring([\"Hello\", \"Hi\", \"Hola\"], \"O\"))\n    print(is_substring([\"Hello\", \"Hi\", \"Hola\"], \"Ola\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      14.2890625
    ],
    [
      "from typing import List\n\n\ndef check_substring(substr: str, arr: List[str]) -> bool:\n    \"\"\"\n    Check if a substring is present in a list of string values.\n    >>> check_substring(\"abc\", [\"abc\", \"xyz\"])\n    True\n    >>> check_substring(\"abc\", [\"abc\", \"abcd\", \"xyz\"])\n    True\n    >>> check_substring(\"abc\", [\"abc\", \"xyz\"])\n    True\n    >>> check_substring(\"abc\", [\"xyz\", \"abcd\"])\n    False\n    \"\"\"\n\n    for element in arr:\n        if element.find(substr) != -1:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      14.171875
    ],
    [
      "def check_if_substring_exists(str_list, substring):\n    \"\"\"\n    Returns a boolean value indicating if a substring is present in a given list of string values.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if not str_list:\n        return False\n\n    for s in str_list:\n        if s.find(substring) != -1:\n            return True\n\n    return False\n\n\ndef main():\n    str_list = ['abc', 'bca', 'cba']\n    substring = 'a'\n    print('str_list: {}'.format(str_list))\n    print('substring: {}'.format(substring))\n    print('Check if substring exists: {}'.format(check_if_substring_exists(str_list, substring)))\n\n    str_list = ['abc', 'bca', 'cba']\n    substring = 'bc'\n    print('str_list: {}'.format(str_list))\n    print('substring: {}'.format(substring))\n    print('Check if substring exists: {}'.format(check_if_substring_exists(str_list, substring)))\n\n\nif __name__ == '__main__':\n    main()",
      13.890625
    ],
    [
      "def check_substring(str_list, substring):\n    for string in str_list:\n        if substring in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    str_list = [\"abc\", \"bc\", \"c\", \"d\"]\n    print(check_substring(str_list, \"bc\"))",
      13.4140625
    ],
    [
      "def substring_in_list(sub_string, list_of_string):\n    \"\"\"\n    >>> substring_in_list('in', ['in', 'out'])\n    True\n    >>> substring_in_list('in', ['out', 'in'])\n    True\n    >>> substring_in_list('in', ['in', 'out', 'in'])\n    True\n    >>> substring_in_list('in', ['in', 'out', 'out'])\n    False\n    \"\"\"\n    return any(sub_string in x for x in list_of_string)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      13.1015625
    ],
    [
      "from typing import List\n\n\ndef check_substring(string: str, values: List[str]) -> bool:\n    for value in values:\n        if string in value:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_substring(\"ab\", [\"abc\", \"bc\", \"c\"]) is True\n    assert check_substring(\"abc\", [\"abc\", \"bc\", \"c\"]) is True\n    assert check_substring(\"c\", [\"abc\", \"bc\", \"c\"]) is True\n    assert check_substring(\"bc\", [\"abc\", \"bc\", \"c\"]) is True\n    assert check_substring(\"cba\", [\"abc\", \"bc\", \"c\"]) is False\n    assert check_substring(\"abc\", [\"abc\", \"bc\", \"c\"]) is True\n    assert check_substring(\"\", [\"abc\", \"bc\", \"c\"]) is False",
      13.0234375
    ],
    [
      "from typing import List\n\n\ndef find_substring(strings: List[str], substring: str) -> bool:\n    \"\"\"Returns True if a substring is present in a given list of string values.\n\n    Args:\n        strings (List[str]): List of string values.\n        substring (str): Substring to be found.\n\n    Returns:\n        bool: True if substring is present in strings, False otherwise.\n\n    Examples:\n        >>> find_substring([\"abc\", \"bca\", \"cab\"], \"ab\")\n        True\n        >>> find_substring([\"abc\", \"bca\", \"cab\"], \"bc\")\n        True\n        >>> find_substring([\"abc\", \"bca\", \"cab\"], \"bcab\")\n        True\n        >>> find_substring([\"abc\", \"bca\", \"cab\"], \"cba\")\n        False\n    \"\"\"\n    return any(substring in string for string in strings)\n\n\nif __name__ == \"__main__\":\n    print(find_substring([\"abc\", \"bca\", \"cab\"], \"ab\"))\n    print(find_substring([\"abc\", \"bca\", \"cab\"], \"bc\"))\n    print(find_substring([\"abc\", \"bca\", \"cab\"], \"bcab\"))\n    print(find_substring([\"abc\", \"bca\", \"cab\"], \"cba\"))",
      11.8203125
    ],
    [
      "def check_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_substring([\"abc\", \"def\", \"abcde\"], \"abc\")\n    assert not check_substring([\"abc\", \"def\", \"abcde\"], \"xyz\")",
      10.9765625
    ],
    [
      "def substring_in_list(substring: str, list_of_strings: list) -> bool:\n    \"\"\"\n    >>> substring_in_list('abc', ['abc', 'bcd', 'cde'])\n    True\n    >>> substring_in_list('abc', ['bc', 'cd', 'de'])\n    False\n    >>> substring_in_list('abc', ['abc', 'bc', 'cd'])\n    True\n    >>> substring_in_list('abc', ['abc', 'bc', 'cde'])\n    True\n    \"\"\"\n    return any(substring in string for string in list_of_strings)\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n\n    substring = input(\"Enter a substring to check: \")\n    list_of_strings = input(\"Enter a list of strings to check: \").split()\n\n    result = substring_in_list(substring, list_of_strings)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      9.6875
    ],
    [
      "def check_substring(arr, substr):\n    for s in arr:\n        if substr in s:\n            return True\n    return False\n\n\nprint(check_substring([\"abc\", \"def\", \"ghi\"], \"abc\"))\nprint(check_substring([\"abc\", \"def\", \"ghi\"], \"abe\"))\nprint(check_substring([\"abc\", \"def\", \"ghi\"], \"ghi\"))\nprint(check_substring([\"abc\", \"def\", \"ghi\"], \"abcd\"))",
      9.6640625
    ],
    [
      "def is_substring(string_list: list[str], substring: str) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)  # n=len(string_list), m=len(substring)\n    Space Complexity: O(n)\n    \"\"\"\n\n    for string in string_list:\n        if substring in string:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_substring([\"abc\", \"abd\", \"abf\", \"abcd\"], \"abc\")\n    assert is_substring([\"abc\", \"abd\", \"abf\", \"abcd\"], \"abcd\")\n    assert not is_substring([\"abc\", \"abd\", \"abf\", \"abcd\"], \"a\")",
      9.2265625
    ],
    [
      "from typing import List\n\n\ndef check_substring(array: List[str], substring: str) -> bool:\n    \"\"\"\n    Checks if a substring is present in a given list of string values.\n    >>> check_substring([\"abc\", \"bcd\", \"cde\"], \"c\")\n    True\n    >>> check_substring([\"abc\", \"bcd\", \"cde\"], \"cde\")\n    True\n    >>> check_substring([\"abc\", \"bcd\", \"cde\"], \"xyz\")\n    False\n    >>> check_substring([\"abc\", \"bcd\", \"cde\"], \"abc\")\n    True\n    >>> check_substring([\"abc\", \"bcd\", \"cde\"], \"abcde\")\n    False\n    \"\"\"\n    for element in array:\n        if substring in element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.7578125
    ],
    [
      "from typing import List\n\n\ndef check_substring(lst: List[str], substr: str) -> bool:\n    \"\"\"Check if a substring is present in a given list of string values.\n\n    Args:\n        lst (List[str]): List of string values\n        substr (str): Substring to search for\n\n    Returns:\n        bool: Whether the substring was found or not.\n\n    Examples:\n        >>> check_substring([\"abc\", \"bcd\", \"cde\"], \"bc\")\n        True\n        >>> check_substring([\"abc\", \"bcd\", \"cde\"], \"xyz\")\n        False\n    \"\"\"\n    return any(substr in x for x in lst)\n\n\nif __name__ == \"__main__\":\n    print(check_substring([\"abc\", \"bcd\", \"cde\"], \"bc\"))\n    print(check_substring([\"abc\", \"bcd\", \"cde\"], \"xyz\"))",
      7.83203125
    ],
    [
      "from typing import List\n\n\ndef check_substring(words: List[str], substring: str) -> bool:\n    for word in words:\n        if substring in word:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_substring([\"abc\", \"abcd\", \"abcde\"], \"abc\") is True\n    assert check_substring([\"abc\", \"abcd\", \"abcde\"], \"cde\") is False",
      7.71875
    ],
    [
      "def check_substring(str_list, substring):\n    for s in str_list:\n        if substring in s:\n            return True\n    return False\n\n\ndef main():\n    str_list = [\"abc\", \"abcd\", \"abcde\"]\n    substring = \"abc\"\n    result = check_substring(str_list, substring)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      7.1328125
    ],
    [
      "def check_if_substring_exists(input_list, substring):\n    \"\"\"\n    :param input_list: list of strings\n    :param substring: string\n    :return: True if the substring is present in any of the strings in the input_list\n    \"\"\"\n    for element in input_list:\n        if substring in element:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    test_list = [\"abc\", \"def\", \"ghi\", \"jkl\"]\n    test_substring = \"hi\"\n    print(check_if_substring_exists(test_list, test_substring))",
      6.7421875
    ],
    [
      "def check_substring_in_list(substring, string_list):\n    for string in string_list:\n        if substring in string:\n            return True\n\n    return False\n\n\ndef main():\n    result = check_substring_in_list('1', ['123', '456'])\n    print(result)\n\n\nif __name__ == '__main__':\n    main()",
      4.71875
    ],
    [
      "from typing import List\n\n\ndef check_substring(strings: List[str], substring: str) -> bool:\n    \"\"\"Check if a substring is present in a given list of string values.\n\n    Args:\n        strings (List[str]): list of strings to check in\n        substring (str): substring to check for\n\n    Returns:\n        bool: True if substring is present, False otherwise\n    \"\"\"\n\n    for string in strings:\n        if substring in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_substring(\n        [\"test\", \"string\", \"with\", \"substring\"], \"substring\"\n    )",
      4.64453125
    ],
    [
      "def is_substring(list_of_str, substring):\n    for i in range(len(list_of_str)):\n        if substring in list_of_str[i]:\n            return True\n    return False\n\n\ndef main():\n    list_of_str = [\"apple\", \"ball\", \"cat\", \"dog\", \"elephant\"]\n    print(is_substring(list_of_str, \"ll\"))\n    print(is_substring(list_of_str, \"zz\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      4.5234375
    ],
    [
      "from typing import List\n\n\ndef substring_exists(str_list: List[str], substring: str) -> bool:\n    \"\"\"\n    >>> substring_exists(['abc', 'abcd', 'abcde'], 'abc')\n    True\n    >>> substring_exists(['abc', 'abcd', 'abcde'], 'abcde')\n    True\n    >>> substring_exists(['abc', 'abcd', 'abcde'], 'abd')\n    False\n    \"\"\"\n    return any(substring in s for s in str_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.1953125
    ],
    [
      "def check_substring(str_list, sub_str):\n    \"\"\"\n    :param str_list: list of string values\n    :param sub_str: substring to check\n    :return: True if sub_str present in str_list else False\n    \"\"\"\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    str_list = [\"abc\", \"bcd\", \"cde\", \"dea\"]\n    sub_str = \"cd\"\n    print(check_substring(str_list, sub_str))",
      4.1171875
    ],
    [
      "from collections import Counter\n\n\ndef check_substring(input_list, substring):\n    substring_length = len(substring)\n\n    for i in range(len(input_list) - substring_length + 1):\n        if input_list[i:i + substring_length] == substring:\n            return True\n\n    return False\n\n\ndef check_substring_with_counter(input_list, substring):\n    substring_length = len(substring)\n\n    for i in range(len(input_list) - substring_length + 1):\n        if Counter(input_list[i:i + substring_length]) == Counter(substring):\n            return True\n\n    return False\n\n\nif __name__ == '__main__':\n    print(check_substring(['abc', 'bcd', 'cde', 'efg'], 'cde'))\n    print(check_substring_with_counter(['abc', 'bcd', 'cde', 'efg'], 'cde'))",
      4.08203125
    ],
    [
      "def check_substring(string_list: list, substring: str) -> bool:\n    \"\"\"Check if substring is present in string list.\n\n    Args:\n        string_list (list): List of strings.\n        substring (str): Substring to check.\n\n    Returns:\n        bool: True if substring is present in string list.\n    \"\"\"\n    return any(substring in string for string in string_list)\n\n\nif __name__ == \"__main__\":\n    print(check_substring([\"test\", \"tset\", \"stet\"], \"tet\"))\n    print(check_substring([\"test\", \"tset\", \"stet\"], \"est\"))",
      3.201171875
    ],
    [
      "def check_substring(input_list: list, substring: str) -> bool:\n    for string in input_list:\n        if substring in string:\n            return True\n    return False\n\n\ndef main():\n    input_list = [\"abc\", \"cde\", \"xyz\"]\n    print(check_substring(input_list, \"abc\"))\n    print(check_substring(input_list, \"xyz\"))\n    print(check_substring(input_list, \"cde\"))\n    print(check_substring(input_list, \"abcd\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.16796875
    ],
    [
      "def substring_check(string, list_of_strings):\n    \"\"\"\n    >>> substring_check('a', ['a', 'b', 'c'])\n    True\n    >>> substring_check('b', ['a', 'b', 'c'])\n    True\n    >>> substring_check('c', ['a', 'b', 'c'])\n    True\n    >>> substring_check('d', ['a', 'b', 'c'])\n    False\n    \"\"\"\n    return any(substring in string for substring in list_of_strings)\n\n\ndef substring_check_pythonic(string, list_of_strings):\n    \"\"\"\n    >>> substring_check_pythonic('a', ['a', 'b', 'c'])\n    True\n    >>> substring_check_pythonic('b', ['a', 'b', 'c'])\n    True\n    >>> substring_check_pythonic('c', ['a', 'b', 'c'])\n    True\n    >>> substring_check_pythonic('d', ['a', 'b', 'c'])\n    False\n    \"\"\"\n    return any(substring in string for substring in list_of_strings)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.654296875
    ],
    [
      "def check_substring(substring, list_of_string):\n    \"\"\"\n    :param substring: str\n    :param list_of_string: list\n    :return: bool\n    \"\"\"\n\n    return any(substring in item for item in list_of_string)\n\n\ndef main():\n    print(check_substring(\"test\", [\"abc\", \"test\", \"foo\"]))\n    print(check_substring(\"test\", [\"abc\", \"test1\", \"foo\"]))\n    print(check_substring(\"test\", [\"abc\", \"test\", \"test1\"]))\n\n\nif __name__ == '__main__':\n    main()",
      2.58984375
    ],
    [
      "from typing import List\n\n\ndef check_if_substring_exists(string: str, list_of_strings: List[str]) -> bool:\n    \"\"\"\n    :param string: the substring to check\n    :param list_of_strings: the list of strings to check\n    :return: True if the substring exists in the list of strings\n    \"\"\"\n    for s in list_of_strings:\n        if string in s:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_if_substring_exists(\"abc\", [\"abc\", \"ab\", \"bc\"]) is True\n    assert check_if_substring_exists(\"abc\", [\"cba\", \"ba\", \"c\"]) is False",
      2.564453125
    ],
    [
      "def substring_in_list(substring, lst):\n    for s in lst:\n        if substring in s:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [\"abc\", \"bcd\", \"abcd\", \"bcde\", \"cdef\"]\n    assert substring_in_list(\"c\", lst) is True\n    assert substring_in_list(\"cde\", lst) is True\n    assert substring_in_list(\"d\", lst) is False\n    assert substring_in_list(\"def\", lst) is False\n    assert substring_in_list(\"abc\", lst) is True\n    assert substring_in_list(\"bcde\", lst) is True",
      2.50390625
    ],
    [
      "def check_substring(string_list: list, substring: str) -> bool:\n    \"\"\"\n    Check if a substring is present in a given list of string values.\n\n    :param string_list: List of string values.\n    :param substring: Substring to check.\n    :return: True if substring is present, False otherwise.\n    \"\"\"\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n\n\ndef main():\n    print(check_substring([\"abc\", \"bac\", \"bca\"], \"bca\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.462890625
    ],
    [
      "from collections import defaultdict\n\n\ndef check_substring(words, substring):\n    \"\"\"Check if a substring is present in a given list of string values.\n\n    Args:\n        words(list): List of string values.\n        substring(str): Substring to check.\n\n    Returns:\n        bool: True if substring is present in words, False otherwise.\n\n    \"\"\"\n    # Check for null values\n    if not words or not substring:\n        return False\n\n    # Create a dictionary to store the frequency of words\n    word_dict = defaultdict(int)\n\n    # Populate the dictionary\n    for word in words:\n        word_dict[word] += 1\n\n    # Check if the substring is present in the dictionary\n    return substring in word_dict\n\n\nif __name__ == \"__main__\":\n    print(check_substring([\"abc\", \"def\", \"ghi\"], \"abc\"))\n    print(check_substring([\"abc\", \"def\", \"ghi\"], \"ghi\"))\n    print(check_substring([\"abc\", \"def\", \"ghi\"], \"xyz\"))\n    print(check_substring([\"abc\", \"def\", \"ghi\"], \"\"))",
      2.37109375
    ],
    [
      "def find_substring(values: list, substring: str) -> bool:\n    \"\"\"\n    Return True if substring is present in any of the list of values.\n\n    >>> find_substring([\"abcd\", \"efgh\", \"ijkl\", \"mnop\"], \"efg\")\n    True\n    >>> find_substring([\"abcd\", \"efgh\", \"ijkl\", \"mnop\"], \"xyz\")\n    False\n    >>> find_substring([\"abcd\", \"efgh\", \"ijkl\", \"mnop\"], \"mn\")\n    True\n    >>> find_substring([\"abcd\", \"efgh\", \"ijkl\", \"mnop\"], \"op\")\n    True\n    \"\"\"\n    return any(substring in value for value in values)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.857421875
    ],
    [
      "from typing import List\n\n\ndef is_substring(string: str, words: List[str]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n    for word in words:\n        if word in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_substring(\"abc\", [\"abc\", \"def\"])\n    assert is_substring(\"abc\", [\"def\", \"ghi\"]) is False",
      1.8271484375
    ],
    [
      "def is_present(sub, main):\n    for s in main:\n        if sub in s:\n            return True\n    return False\n\nprint(is_present('s', ['s', 'e', 't']))\nprint(is_present('x', ['s', 'e', 't']))",
      1.6865234375
    ],
    [
      "from typing import List\n\n\ndef substring_exists(lst: List[str], substr: str) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for item in lst:\n        if substr in item:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [\"abc\", \"def\", \"abcdef\"]\n    assert substring_exists(lst, \"abc\")\n    assert substring_exists(lst, \"def\")\n    assert substring_exists(lst, \"abcdef\")\n    assert not substring_exists(lst, \"xyz\")",
      1.4560546875
    ],
    [
      "def check_substring(string_list, substring):\n    \"\"\"\n    Check if a substring is present in a given list of string values.\n\n    Args:\n       string_list(list): list of string values\n       substring(str): substring to check for\n\n    Returns:\n       bool: True if substring is present else False\n    \"\"\"\n    return any(substring in s for s in string_list)\n\n\ndef main():\n    \"\"\"\n    Driver Function\n    \"\"\"\n    print(check_substring([\"abc\", \"abcd\", \"abcded\"], \"abc\"))\n    print(check_substring([\"abc\", \"abcd\", \"abcded\"], \"xyz\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.2099609375
    ],
    [
      "def is_substring(str, arr):\n    for i in arr:\n        if str in i:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    print(is_substring(\"abc\", [\"abcde\", \"bacd\"]))\n    print(is_substring(\"abc\", [\"abcde\", \"bacd\", \"efg\"]))\n    print(is_substring(\"abc\", [\"abcde\", \"bacd\", \"efg\", \"ab\"]))",
      1.158203125
    ],
    [
      "def check_if_substring_is_present(string_values, substring):\n    for string_value in string_values:\n        if substring in string_value:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(\"String Values:\")\n    string_values = [\"abc\",\"def\",\"ghi\",\"jkl\"]\n    print(string_values)\n\n    print(\"Substring to check:\")\n    substring = \"abc\"\n    print(substring)\n\n    result = check_if_substring_is_present(string_values, substring)\n    print(\"Is substring present: \", result)",
      1.0654296875
    ],
    [
      "def string_search(input_list, substring):\n    \"\"\"\n    input_list: list of strings to search for substring\n    substring: string to search for in input_list\n    return: boolean value for whether substring is in input_list\n    \"\"\"\n    for word in input_list:\n        if substring in word:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    input_list = ['cat', 'dog', 'mouse', 'fish']\n    print(string_search(input_list, 'cat'))\n    print(string_search(input_list, 'dog'))\n    print(string_search(input_list, 'fish'))\n    print(string_search(input_list, 'mouse'))\n    print(string_search(input_list, 'catfish'))\n    print(string_search(input_list, 'caterpillar'))",
      1.05078125
    ],
    [
      "def substring_exists(strings, substring):\n    \"\"\"\n    >>> assert substring_exists(['abc', 'def', 'ghi'], 'c')\n    >>> assert not substring_exists(['abc', 'def', 'ghi'], 'x')\n    >>> assert substring_exists(['abc', 'def', 'ghi'], 'def')\n    >>> assert not substring_exists(['abc', 'def', 'ghi'], 'abcdef')\n    >>> assert not substring_exists([], 'abc')\n    \"\"\"\n    return any(substring in string for string in strings)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.9208984375
    ],
    [
      "from collections import defaultdict\n\n\ndef substring_in_list(string, strings):\n    \"\"\"\n    >>> substring_in_list('abc', ['abc', 'bcd', 'cde'])\n    True\n    >>> substring_in_list('abc', ['bcd', 'cde'])\n    False\n    \"\"\"\n    string_dict = defaultdict(int)\n    for s in strings:\n        for c in s:\n            string_dict[c] += 1\n\n    for c in string:\n        if c not in string_dict or string_dict[c] == 0:\n            return False\n        string_dict[c] -= 1\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.82958984375
    ],
    [
      "def search_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False\n\nprint(search_substring([\"abcd\", \"bcde\", \"cdef\"], \"bcd\"))\nprint(search_substring([\"abcd\", \"bcde\", \"cdef\"], \"b\"))",
      0.72900390625
    ],
    [
      "def search(array, substring):\n    return substring in array\n\n\nprint(search([\"apple\", \"banana\", \"cherry\"], \"an\"))\nprint(search([\"apple\", \"banana\", \"cherry\"], \"cherry\"))\nprint(search([\"apple\", \"banana\", \"cherry\"], \"banan\"))\nprint(search([\"apple\", \"banana\", \"cherry\"], \"banana\"))\nprint(search([\"apple\", \"banana\", \"cherry\"], \"banana\"))",
      0.56591796875
    ],
    [
      "def find_string(arr, sub):\n    for i in range(len(arr)):\n        if sub in arr[i]:\n            return True\n    return False\n\nprint(find_string([\"abc\",\"bcd\",\"efg\"], \"bc\"))",
      0.45654296875
    ],
    [
      "from typing import List\n\n\ndef search_substring(string_list: List[str], substring: str) -> bool:\n    \"\"\"Check if a substring is present in a given list of string values.\n\n    Args:\n        string_list: List of string values.\n        substring: Substring to be searched.\n\n    Returns:\n        True if substring is present in string_list else False.\n\n    Examples:\n        >>> assert search_substring([\"abc\", \"bcd\", \"cde\"], \"bc\")\n    \"\"\"\n    return any(substring in s for s in string_list)\n\n\nif __name__ == \"__main__\":\n    print(search_substring([\"abc\", \"bcd\", \"cde\"], \"bc\"))",
      0.453125
    ],
    [
      "def find_substring(list_of_strings, substring):\n    for i in list_of_strings:\n        if substring in i:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    test_list = [\"abc\", \"abcd\", \"abcde\"]\n    print(find_substring(test_list, \"abc\"))",
      0.451904296875
    ],
    [
      "def check_substring(lst, sub_string):\n    return any(sub_string in item for item in lst)\n\n\ndef main():\n    lst = [\"apple\", \"banana\", \"cherry\"]\n    sub_string = \"an\"\n    print(check_substring(lst, sub_string))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.437744140625
    ],
    [
      "def check_sub_str(list_str, substr):\n    \"\"\"\n    >>> check_sub_str([\"abc\", \"def\", \"ghi\"], \"abc\")\n    True\n    >>> check_sub_str([\"abc\", \"def\", \"ghi\"], \"abcd\")\n    False\n    \"\"\"\n\n    for str_ in list_str:\n        if substr in str_:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.3173828125
    ],
    [
      "def check_substring(list_of_strings, substring):\n    \"\"\"\n    list_of_strings: list of string\n    substring: string\n    return: boolean\n    \"\"\"\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False",
      0.2386474609375
    ],
    [
      "def check_substring(string_list, substring):\n    return any(substring in s for s in string_list)\n\n\nif __name__ == \"__main__\":\n    string_list = [\"abc\", \"abcd\", \"abcde\"]\n    print(check_substring(string_list, \"abc\"))\n    print(check_substring(string_list, \"xyz\"))\n    print(check_substring(string_list, \"de\"))\n    print(check_substring(string_list, \"abcde\"))",
      0.226806640625
    ],
    [
      "def find_sub_string(text, sub_string):\n    for i in range(len(text)):\n        if text[i: i + len(sub_string)] == sub_string:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    text = ['abc', 'abcd', 'abcde', 'abcdef']\n    sub_string = 'abc'\n    print(find_sub_string(text, sub_string))",
      0.017364501953125
    ],
    [
      "def check_substring_in_list(substring, list_of_strings):\n    \"\"\"\n    >>> check_substring_in_list(\"abc\", [\"abc\", \"xyz\"])\n    0\n    >>> check_substring_in_list(\"abc\", [\"xyz\", \"abc\"])\n    1\n    \"\"\"\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.012664794921875
    ],
    [
      "def string_in_list(string: str, arr: list) -> bool:\n    for item in arr:\n        if string in item:\n            return True\n    return False\n\ndef test_string_in_list():\n    assert string_in_list(\"abc\", [\"abc\", \"xyz\", \"cba\"])\n    assert not string_in_list(\"abc\", [\"xyz\", \"cba\"])",
      -0.0819091796875
    ],
    [
      "from typing import List\n\n\ndef check_substring_present(sub_str: str, lst: List[str]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    for string in lst:\n        if sub_str in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(check_substring_present(\"ab\", [\"abc\", \"dea\"]))",
      -0.1605224609375
    ],
    [
      "def check_if_substring_present(str_list, substr):\n    \"\"\"\n    :param: str_list - list of strings\n    :param: substr - substring to be searched\n    return: list of strings with substring present\n    \"\"\"\n    return [s for s in str_list if substr in s]\n\ndef main():\n    \"\"\"\n    :return: void\n    \"\"\"\n    print(check_if_substring_present(['abc', 'abcd', 'abcde'], 'ab'))\n\nif __name__ == '__main__':\n    main()",
      -0.19921875
    ],
    [
      "from typing import List\n\n\ndef check_substring_in_list(string: str, list_of_strings: List[str]) -> bool:\n    \"\"\"Check if a substring is present in a given list of string values.\n\n    Args:\n        string: str\n        list_of_strings: list of strings\n\n    Returns:\n        bool\n\n    Raises:\n        AssertionError: if list_of_strings is not a list\n    \"\"\"\n    assert isinstance(list_of_strings, list), \"list_of_strings must be a list\"\n    for i in range(len(list_of_strings)):\n        if string in list_of_strings[i]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(check_substring_in_list(\"abc\", [\"abc\", \"xyz\"]))\n    print(check_substring_in_list(\"abc\", [\"xyz\"]))",
      -0.2139892578125
    ],
    [
      "def check_substring(strings, substring):\n    for s in strings:\n        if s.find(substring) != -1:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_substring([\"abc\", \"abcde\", \"abcde\", \"abcde\"], \"abc\") == True\n    assert check_substring([\"abc\", \"abcde\", \"abcde\", \"abcde\"], \"xyz\") == False\n    assert check_substring([\"abc\", \"abcde\", \"abcde\", \"abcde\"], \"abcd\") == False\n    assert check_substring([\"abc\", \"abcde\", \"abcde\", \"abcde\"], \"abcde\") == True",
      -0.2340087890625
    ],
    [
      "def check_if_substring_in_list(string, list):\n    for element in list:\n        if element in string:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(check_if_substring_in_list(\"abc\", [\"abc\", \"abcde\"]))\n    print(check_if_substring_in_list(\"abc\", [\"abcde\", \"xyz\"]))",
      -0.28662109375
    ],
    [
      "def check_if_substring_in_list(substr, lst):\n    for word in lst:\n        if substr in word:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(check_if_substring_in_list(\"hi\", [\"hello\", \"hi\", \"hii\"]))\n    print(check_if_substring_in_list(\"hi\", [\"hello\", \"hi\", \"hii\", \"hey\"]))",
      -0.310791015625
    ],
    [
      "def is_present(substring, values):\n    \"\"\"\n    >>> is_present('s', ['s', 'ss', 'sss'])\n    True\n    >>> is_present('s', ['s', 'ss', 'ssss'])\n    False\n    >>> is_present('s', ['s', 'ss', 'ssss'])\n    False\n    >>> is_present('s', ['s', 'ss', 'ssss'])\n    False\n    \"\"\"\n    return any(substring in value for value in values)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.33056640625
    ],
    [
      "def check_substring(arr, substr):\n    return any(substr in s for s in arr)\n\nprint(check_substring([\"abc\",\"bcd\",\"efg\",\"abcd\"], \"abc\"))\nprint(check_substring([\"abc\",\"bcd\",\"efg\",\"abcd\"], \"xyz\"))\n\n\"\"\"\n1. Take input of list of string and substring\n2. Use any built-in function to check if any value in list contains substring\n3. Return result\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\"",
      -0.351806640625
    ],
    [
      "def check_substring(word, list_of_words):\n    for w in list_of_words:\n        if w.find(word) != -1:\n            return True\n    return False\n\n\nprint(check_substring(\"abc\", [\"abc\", \"xyz\", \"abcx\"]))\nprint(check_substring(\"abc\", [\"xyz\", \"abcx\"]))",
      -0.353515625
    ],
    [
      "from typing import List\n\n\ndef substring_present(sub_str: str, str_list: List[str]) -> bool:\n    \"\"\"\n\n    Args:\n       sub_str(str): substring to check\n       str_list(str): list of strings to check\n\n    Returns:\n       bool: True if substring present in list of strings\n\n    \"\"\"\n    return sub_str in str_list\n\n\ndef main(argv):\n    print(substring_present(argv[1], argv[0].split(\", \")))\n\n\nif __name__ == \"__main__\":\n    input_string_list = input(\"Enter comma separated list of strings: \").strip()\n    input_substring = input(\"Enter substring to check: \").strip()\n    main([input_string_list, input_substring])",
      -0.375244140625
    ],
    [
      "from typing import List\n\n\ndef check_substring(strings: List[str], substring: str) -> bool:\n    \"\"\"\n    >>> check_substring(['hello', 'hi', 'hey'], 'hey')\n    True\n    >>> check_substring(['hello', 'hi', 'hey'], 'bye')\n    False\n    \"\"\"\n    return any(substring in string for string in strings)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.42578125
    ],
    [
      "def is_substring(string: str, substring: str) -> bool:\n    for word in string:\n        if substring in word:\n            return True\n    return False\n\n\ndef main():\n    print(is_substring([\"abc\", \"bcd\", \"cde\"], \"c\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.43603515625
    ],
    [
      "def is_substring(string_list, substring):\n    \"\"\"\n    >>> is_substring([\"abc\", \"bac\"], \"bc\")\n    True\n    >>> is_substring([\"abc\", \"bac\"], \"d\")\n    False\n    \"\"\"\n    return any(substring in string for string in string_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.654296875
    ],
    [
      "def check_substring(string_list, substring):\n    for i in string_list:\n        if substring in i:\n            return True\n    return False\n\n\nprint(check_substring([\"abc\", \"abcd\", \"abcde\", \"xyz\"], \"abc\"))\nprint(check_substring([\"abc\", \"abcd\", \"abcde\", \"xyz\"], \"xyz\"))",
      -0.85693359375
    ],
    [
      "def check_substring(string, substring):\n    for i in string:\n        if substring in i:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(check_substring(['abc', 'bac', 'cba'], 'b'))",
      -0.85693359375
    ],
    [
      "def check_substring(string, array):\n    for item in array:\n        if string in item:\n            return True\n    return False\n\nprint(check_substring(\"a\", [\"b\",\"a\"]))\nprint(check_substring(\"a\", [\"b\",\"c\"]))",
      -0.85693359375
    ],
    [
      "def substring_in_list(lst, substr):\n    return any(substr in s for s in lst)\n\n\ndef test_substring_in_list():\n    lst = ['abc', 'def', 'ghi']\n    assert substring_in_list(lst, 'ab')\n    assert not substring_in_list(lst, 'xy')\n\n\nif __name__ == '__main__':\n    test_substring_in_list()",
      -0.85693359375
    ],
    [
      "def check_substring(arr, substring):\n    \"\"\"\n    >>> check_substring(['abc', 'bcd', 'cde'], 'bcd')\n    True\n    \"\"\"\n    for string in arr:\n        if substring in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def find_substring(str_list, substring):\n    for str in str_list:\n        if substring in str:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(find_substring([\"test\", \"tester\", \"tester1\"], \"test\"))",
      -0.85693359375
    ],
    [
      "def check_substring(values, substring):\n    # Write your code here.\n    for value in values:\n        if substring in value:\n            return True\n    return False\n\nif __name__ == '__main__':\n    values = ['apple', 'orange', 'banana', 'pineapple']\n    substring = 'banana'\n    print(check_substring(values, substring))",
      -0.85791015625
    ],
    [
      "def find_substring(string_list, substring):\n    return any(substring in x for x in string_list)\n\n\nif __name__ == '__main__':\n    print(find_substring([\"test\", \"abc\", \"def\"], \"abc\"))",
      -0.85791015625
    ],
    [
      "from collections import Counter\n\n\ndef check_substring_in_list(string, list_of_strings):\n    \"\"\"Check if a substring is present in a given list of string values.\"\"\"\n    counter = Counter(list_of_strings)\n    for word in counter:\n        if string in word:\n            return True\n    return False",
      -0.85791015625
    ],
    [
      "def check_substring(str_values, substring):\n    return any(substring in s for s in str_values)\n\ndef main():\n    print(\"String Values: \" + str([\"apple\", \"banana\", \"cat\", \"dog\"]))\n    print(\"Substring: \" + \"an\")\n    print(\"Result: \" + str(check_substring([\"apple\", \"banana\", \"cat\", \"dog\"], \"an\")))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def check_string(sub_string, string_list):\n    return sub_string in string_list\n\n\ndef main():\n    print(check_string(\"abc\", [\"abc\", \"xyz\"]))\n    print(check_string(\"abc\", [\"xyz\", \"abc\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def check_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    string_list = [\"cat\", \"dog\", \"fish\"]\n    print(check_substring(string_list, \"og\"))\n    print(check_substring(string_list, \"fish\"))\n    print(check_substring(string_list, \"car\"))",
      -0.85791015625
    ],
    [
      "def find_substring(string, substring):\n    \"\"\"\n    >>> find_substring('abcde', 'bc')\n    True\n    >>> find_substring('abcde', 'cde')\n    True\n    >>> find_substring('abcde', 'cdf')\n    False\n    \"\"\"\n    return any(substring in s for s in string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def check_sub_str(sub_str, list_str):\n    for str in list_str:\n        if sub_str in str:\n            return True\n    return False\n\n\ndef main():\n    sub_str = \"abc\"\n    list_str = [\"abc\", \"xyz\", \"def\"]\n    print(check_sub_str(sub_str, list_str))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def find_substring(string, list):\n    \"\"\"\n    >>> find_substring('c', ['cat', 'dog', 'god', 'godc'])\n    True\n    >>> find_substring('g', ['cat', 'dog', 'god', 'godc'])\n    True\n    >>> find_substring('d', ['cat', 'dog', 'god', 'godc'])\n    False\n    \"\"\"\n    for i in list:\n        if string in i:\n            return True\n    return False\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.119140625
    ],
    [
      "def check_sub_str(arr, sub):\n    for i in range(len(arr)):\n        if sub in arr[i]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [\"abc\", \"xyz\", \"abcde\"]\n    sub = \"ab\"\n    print(check_sub_str(arr, sub))",
      -1.1669921875
    ],
    [
      "def is_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n\n\nprint(is_substring([\"abc\", \"bcd\", \"cde\"], \"cd\"))",
      -1.328125
    ],
    [
      "def string_list_check(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(string_list_check(['test', 'tester', 'testing'], 'test'))\n    print(string_list_check(['test', 'tester', 'testing'], 'tester'))",
      -1.4326171875
    ],
    [
      "def check_substring(strings, substring):\n    return any(substring in s for s in strings)\n\n\nprint(check_substring([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"], \"abc\"))\nprint(check_substring([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"], \"xyz\"))\nprint(check_substring([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"], \"def\"))",
      -1.5458984375
    ],
    [
      "from collections import defaultdict\n\n\ndef check_substring(list_str, substring):\n    \"\"\"\n    :param list_str: list of strings\n    :param substring: substring to check\n    :return: boolean\n    \"\"\"\n    count = defaultdict(int)\n    for string in list_str:\n        for char in string:\n            count[char] += 1\n\n    for char in substring:\n        if count[char] == 0:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert check_substring([\"abc\", \"def\", \"ghi\", \"xyz\"], \"abc\") is True\n    assert check_substring([\"abc\", \"def\", \"ghi\", \"xyz\"], \"axc\") is False\n    assert check_substring([\"abc\", \"def\", \"ghi\", \"xyz\"], \"axcz\") is False",
      -1.8154296875
    ],
    [
      "from collections import Counter\n\n\ndef is_substring_present(string: str, list_of_strings: list[str]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not string or not list_of_strings:\n        return False\n\n    counter = Counter(string)\n    for item in list_of_strings:\n        if counter == Counter(item):\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_substring_present(\"abc\", [\"abc\", \"bcd\", \"efg\"]) == True\n    assert is_substring_present(\"abc\", [\"x\", \"y\", \"z\"]) == False",
      -2.34765625
    ],
    [
      "from collections import defaultdict\nfrom typing import List\n\n\ndef find_substring_in_list(list_of_strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Idea is to use a hash map to count the number of times a character is used in the substring.\n    Then use the same hash map to count the number of times a character is used in each of the strings in the list.\n    Then, for each string, if the number of times a character is used in the substring and in the string are the same,\n    then we have found a match.\n    \"\"\"\n    substring_counts = defaultdict(int)\n    for char in substring:\n        substring_counts[char] += 1\n\n    matches = []\n    for string in list_of_strings:\n        if substring_counts.get(string[0]) == 0:\n            continue\n\n        string_counts = defaultdict(int)\n        for char in string:\n            string_counts[char] += 1\n\n        if substring_counts == string_counts:\n            matches.append(string)\n\n    return matches\n\n\nif __name__ == \"__main__\":\n    assert find_substring_in_list([\"abc\", \"abcd\", \"abcde\"], \"abc\") == [\"abc\", \"abcd\"]",
      -2.970703125
    ],
    [
      "from functools import reduce\nfrom operator import and_\nfrom typing import List, Optional\n\n\ndef sub_string_in_list(string: str, list_of_strings: List[str]) -> Optional[bool]:\n    \"\"\"Check if a substring is present in a given list of string values.\n\n    Args:\n        string (str): A string value\n        list_of_strings (List[str]): A list of strings\n\n    Returns:\n        Optional[bool]: Return True if substring is present in the list.\n    \"\"\"\n\n    return reduce(and_, (sub in string for sub in list_of_strings), True)\n\n\nif __name__ == \"__main__\":\n    print(sub_string_in_list(\"\", [\"a\"]))\n    print(sub_string_in_list(\"a\", [\"a\"]))\n    print(sub_string_in_list(\"ab\", [\"a\", \"b\"]))\n    print(sub_string_in_list(\"abc\", [\"a\", \"b\"]))\n    print(sub_string_in_list(\"abc\", [\"a\", \"b\", \"c\"]))",
      -4.578125
    ],
    [
      "def is_substring(string: str, string_list: list) -> bool:\n    \"\"\"\n    >>> is_substring(\"in\", [\"pin\", \"in\", \"sing\"])\n    True\n    >>> is_substring(\"in\", [\"pin\", \"ping\", \"sing\"])\n    False\n    >>> is_substring(\"in\", [\"pin\", \"pin\", \"pin\"])\n    True\n    >>> is_substring(\"in\", [\"pin\", \"pin\", \"ping\"])\n    False\n    >>> is_substring(\"in\", [\"pin\", \"pin\", \"ping\", \"pin\"])\n    True\n    \"\"\"\n    return any(sub in string for sub in string_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.77734375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}