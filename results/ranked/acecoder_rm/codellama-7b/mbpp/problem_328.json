{
  "problem": {
    "task_id": "MBPP/339",
    "prompt": "Write a python function to find the maximum occuring divisor in an interval.",
    "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
    "test_list": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ],
    "challenge_test_list": [],
    "problem_id": 328
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def max_occuring_divisor(a,b):\n    # find all the divisors in the range\n    divisors = []\n    for i in range(a,b+1):\n        for j in range(1,i+1):\n            if i%j == 0:\n                divisors.append(j)\n    # find the most occuring divisor\n    max_divisor = divisors[0]\n    max_count = divisors.count(max_divisor)\n    for i in divisors:\n        count = divisors.count(i)\n        if count > max_count:\n            max_count = count\n            max_divisor = i\n    return max_divisor\n\na,b = [int(i) for i in input(\"Enter the values for a & b: \").split()]\nprint(\"Maximum occuring divisor is:\",max_occuring_divisor(a,b))",
      5.3515625
    ],
    [
      "def maximum_occuring_divisor(num1, num2):\n    \"\"\"\n    >>> maximum_occuring_divisor(2, 10)\n    5\n    >>> maximum_occuring_divisor(1, 10)\n    1\n    >>> maximum_occuring_divisor(2, 3)\n    -1\n    >>> maximum_occuring_divisor(2, 12)\n    6\n    \"\"\"\n    divisors = []\n    for i in range(num1, num2 + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                divisors.append(j)\n    if not divisors:\n        return -1\n    return max(set(divisors), key=divisors.count)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      3.3671875
    ],
    [
      "def max_divisor(a, b):\n    max_div = 0\n    for i in range(a, b+1):\n        for j in range(a, i+1):\n            if i % j == 0:\n                max_div = max(max_div, i)\n    return max_div\n\n\nprint(max_divisor(1, 20))",
      3.208984375
    ],
    [
      "def find_max_divisor(num_list):\n    \"\"\"\n    Finds the maximum occuring divisor in a given list of numbers.\n\n    >>> find_max_divisor([25, 15, 40, 20, 5, 25, 10])\n    25\n    >>> find_max_divisor([3, 1, 2, 3, 4, 5, 2, 1])\n    3\n    >>> find_max_divisor([10, 20, 15, 25, 30, 15, 10, 15])\n    15\n    \"\"\"\n    divisors = {}\n    for num in num_list:\n        for i in range(1, num + 1):\n            if num % i == 0:\n                if i in divisors:\n                    divisors[i] += 1\n                else:\n                    divisors[i] = 1\n\n    return max(divisors, key=divisors.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.0546875
    ],
    [
      "def maximum_occuring_divisor(num1, num2):\n    \"\"\"\n    :param num1: int\n    :param num2: int\n    :return: int\n    \"\"\"\n    max_divisor = 0\n    for i in range(num1, num2):\n        for j in range(num1, i):\n            if i % j == 0:\n                max_divisor = max(max_divisor, j)\n    return max_divisor\n\nif __name__ == '__main__':\n    print(maximum_occuring_divisor(1, 10))",
      1.197265625
    ],
    [
      "def max_divisor(n, m):\n    \"\"\"\n    >>> max_divisor(15, 10)\n    5\n    >>> max_divisor(10, 10)\n    1\n    >>> max_divisor(12, 10)\n    2\n    \"\"\"\n    divisors = {}\n    for i in range(n, m+1):\n        for j in range(1, i):\n            if i % j == 0:\n                if j not in divisors:\n                    divisors[j] = 1\n                else:\n                    divisors[j] += 1\n    max_div = None\n    for key, value in divisors.items():\n        if max_div is None or max_div < value:\n            max_div = key\n    return max_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.130859375
    ],
    [
      "def find_divisor(start, end):\n    count = {}\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            if i % j == 0:\n                if j not in count:\n                    count[j] = 1\n                else:\n                    count[j] += 1\n    m = 0\n    for k, v in count.items():\n        if v > m:\n            m = k\n    return m\n\n\ndef main():\n    start = int(input(\"Enter the start number: \"))\n    end = int(input(\"Enter the end number: \"))\n    max_div = find_divisor(start, end)\n    print(f\"Maximum occuring divisor is: {max_div}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      1.0703125
    ],
    [
      "def max_occuring_divisor(num1, num2):\n    if num1 <= 0 or num2 <= 0:\n        return \"invalid input\"\n    else:\n        divisor = []\n        for i in range(num1, num2 + 1):\n            for j in range(1, i + 1):\n                if i % j == 0:\n                    divisor.append(j)\n        return max(divisor)\n\n\nprint(max_occuring_divisor(1, 300))",
      1.0693359375
    ],
    [
      "def maximum_occurring_divisor(a, b):\n    max_divisor = 0\n    for i in range(a, b + 1):\n        if i % max_divisor == 0:\n            continue\n        for j in range(a, b + 1):\n            if i % j == 0:\n                max_divisor = j\n    return max_divisor\n\n\na, b = map(int, input().split())\nprint(maximum_occurring_divisor(a, b))",
      0.908203125
    ],
    [
      "def max_divisor(l, r):\n    if l > r:\n        return 0\n    # find the divisors of l\n    l_divisors = []\n    for i in range(1, l + 1):\n        if l % i == 0:\n            l_divisors.append(i)\n    # find the divisors of r\n    r_divisors = []\n    for i in range(1, r + 1):\n        if r % i == 0:\n            r_divisors.append(i)\n    # find the divisors that are present in both l_divisors and r_divisors\n    divisors = []\n    for i in l_divisors:\n        if i in r_divisors:\n            divisors.append(i)\n    # return the maximum occuring divisor\n    return max(divisors)\n\n\nprint(max_divisor(12, 10))\nprint(max_divisor(24, 24))\nprint(max_divisor(1, 1))",
      0.76953125
    ],
    [
      "def max_occuring_divisor(a, b):\n    if b < a:\n        return None\n    divisors = {}\n    for i in range(a, b+1):\n        for j in range(1, i):\n            if i % j == 0:\n                if j not in divisors:\n                    divisors[j] = 1\n                else:\n                    divisors[j] += 1\n    return max(divisors, key=divisors.get)\n\n\ndef main():\n    a, b = list(map(int, input(\"Enter the range: \").split()))\n    print(max_occuring_divisor(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.56103515625
    ],
    [
      "def max_divisor(n):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    Parameters\n    ----------\n    n: int\n        The number to find the maximum occuring divisor.\n\n    Returns\n    -------\n    int\n        The maximum occuring divisor.\n\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors[len(divisors) // 2]",
      0.241943359375
    ],
    [
      "def max_divisor(n, m):\n    # initialize the max_divisor\n    max_divisor = 0\n    # find the max_divisor\n    for i in range(n, m+1):\n        for j in range(n, i+1):\n            if i % j == 0:\n                max_divisor = max(max_divisor, j)\n    return max_divisor\n\n\nprint(max_divisor(1, 10))",
      0.1494140625
    ],
    [
      "def max_divisor(start, end):\n    \"\"\"\n    >>> max_divisor(1, 100)\n    25\n    >>> max_divisor(5, 15)\n    5\n    >>> max_divisor(10, 30)\n    15\n    >>> max_divisor(100, 1000)\n    316\n    \"\"\"\n    # your code goes here\n    mx_div = 0\n    for i in range(start, end+1):\n        for j in range(start, end+1):\n            if i%j == 0:\n                mx_div = max(mx_div, j)\n    return mx_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.1461181640625
    ],
    [
      "from collections import Counter\n\n\ndef max_occuring_divisor(start, end):\n    \"\"\"\n    >>> max_occuring_divisor(1, 100)\n    25\n    \"\"\"\n    divisors = []\n\n    for i in range(start, end + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                divisors.append(j)\n\n    return Counter(divisors).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.1297607421875
    ],
    [
      "import math\nfrom collections import Counter\n\n\ndef maximum_divisor(l, r):\n    divisors = []\n\n    for i in range(l, r + 1):\n        for j in range(1, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                divisors.append(j)\n                if i / j != j:\n                    divisors.append(i // j)\n\n    c = Counter(divisors)\n    return c.most_common(1)[0][0]\n\n\nprint(maximum_divisor(1, 20))\nprint(maximum_divisor(21, 100))",
      -0.06488037109375
    ],
    [
      "def max_occuring_divisor(start, end):\n    divisors = []\n    for num in range(start, end+1):\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n    return max(divisors)\n\n\nif __name__ == \"__main__\":\n    print(max_occuring_divisor(1, 10))",
      -0.1717529296875
    ],
    [
      "def maximum_occurring_divisor(a, b):\n    divisors = []\n    for i in range(a, b+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                divisors.append(j)\n\n    return max(divisors)\n\n\nprint(maximum_occurring_divisor(1, 10))\nprint(maximum_occurring_divisor(1, 100))",
      -0.30419921875
    ],
    [
      "def max_divisor(start, end):\n    if start > end:\n        return \"Invalid interval\"\n    else:\n        divisors = [x for x in range(start, end+1) if start % x == 0 and end % x == 0]\n        return max(divisors)",
      -0.457275390625
    ],
    [
      "def max_occ_divisor(a, b):\n    \"\"\"\n    >>> max_occ_divisor(1, 20)\n    5\n    >>> max_occ_divisor(1, 100)\n    10\n    >>> max_occ_divisor(1, 101)\n    11\n    >>> max_occ_divisor(1, 200)\n    10\n    \"\"\"\n    max_div = 0\n\n    for i in range(a, b + 1):\n        for j in range(a, i):\n            if i % j == 0:\n                max_div = max(max_div, j)\n\n    return max_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.491455078125
    ],
    [
      "def find_max_divisor(lower_limit, upper_limit):\n    \"\"\"\n    Takes two numbers and returns the divisor with highest number of occurence.\n    \"\"\"\n    return max(set(range(lower_limit, upper_limit + 1, i)\n                   for i in range(1, upper_limit + 1)), key=len)",
      -0.55908203125
    ],
    [
      "from collections import Counter\n\n\ndef max_occuring_divisor(l, r):\n    \"\"\"\n    >>> max_occuring_divisor(1, 10)\n    [2, 5]\n    >>> max_occuring_divisor(1, 13)\n    [3, 5]\n    >>> max_occuring_divisor(1, 14)\n    [2, 7]\n    >>> max_occuring_divisor(1, 15)\n    [2, 3, 5]\n    >>> max_occuring_divisor(1, 16)\n    [2, 7]\n    \"\"\"\n    lcm = l * r // gcd(l, r)\n    count = Counter([lcm // i for i in range(1, lcm)])\n    max_count = max(count.values())\n    return [i for i in count.keys() if count[i] == max_count]\n\n\ndef gcd(a, b):\n    \"\"\"\n    >>> gcd(10, 20)\n    10\n    >>> gcd(10, 24)\n    4\n    \"\"\"\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef test():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    test()",
      -0.61865234375
    ],
    [
      "def max_occurring_divisor(l, r):\n    m = {}\n    for i in range(l, r+1):\n        for j in range(i, r+1):\n            if i % j == 0:\n                if j in m:\n                    m[j] += 1\n                else:\n                    m[j] = 1\n    return max(m.items(), key=lambda x: x[1])\n\n\nprint(max_occurring_divisor(1, 20))\nprint(max_occurring_divisor(10, 20))\nprint(max_occurring_divisor(5, 20))\nprint(max_occurring_divisor(1, 100))\nprint(max_occurring_divisor(10, 100))\nprint(max_occurring_divisor(5, 100))\nprint(max_occurring_divisor(1, 1000))\nprint(max_occurring_divisor(10, 1000))\nprint(max_occurring_divisor(5, 1000))",
      -0.79443359375
    ],
    [
      "def max_occuring_divisor(a, b):\n    if a > b:\n        a, b = b, a\n\n    divisors = {}\n    for i in range(a, b+1):\n        for j in range(a, i):\n            if i%j == 0:\n                if j in divisors:\n                    divisors[j] += 1\n                else:\n                    divisors[j] = 1\n\n    return max(divisors, key=divisors.get)\n\nif __name__ == \"__main__\":\n    print(max_occuring_divisor(1, 100))",
      -0.85595703125
    ],
    [
      "def max_divisor(start, end):\n    divisors = []\n    for i in range(start, end+1):\n        for j in range(start, i+1):\n            if i % j == 0:\n                divisors.append(j)\n    return max(divisors)\n\n\nprint(max_divisor(1, 10))\nprint(max_divisor(1, 100))",
      -0.85595703125
    ],
    [
      "def maximum_occuring_divisor(l, r):\n    d = {}\n    for i in range(l, r):\n        for j in range(l, i):\n            if i % j == 0:\n                if j not in d:\n                    d[j] = 1\n                else:\n                    d[j] += 1\n    if len(d) == 0:\n        return -1\n    return max(d, key=d.get)\n\n\nprint(maximum_occuring_divisor(1, 100))",
      -0.85693359375
    ],
    [
      "def max_divisor(a,b):\n    divisors = []\n    for i in range(a,b+1):\n        for j in range(1,i+1):\n            if i%j == 0:\n                divisors.append(j)\n    return max(divisors)\n\nprint(max_divisor(1,10))",
      -0.85693359375
    ],
    [
      "def max_divisor(start, end):\n    divisors = []\n    for i in range(start, end + 1):\n        for j in range(start, i):\n            if i % j == 0:\n                divisors.append(j)\n    return max(set(divisors), key=divisors.count)\n\n\nif __name__ == \"__main__\":\n    print(max_divisor(5, 15))",
      -0.85693359375
    ],
    [
      "def max_divisor(a,b):\n    \"\"\"\n    max_divisor takes two positive integers a and b as arguments and returns the maximum\n    occuring integer divisor of all integers in the interval [a,b]\n    \"\"\"\n    divisors = {}\n    for num in range(a,b+1):\n        for i in range(1,num+1):\n            if num % i == 0:\n                if i in divisors:\n                    divisors[i] += 1\n                else:\n                    divisors[i] = 1\n    return max(divisors, key=divisors.get)",
      -0.85693359375
    ],
    [
      "def max_occuring_divisor(a, b):\n    max_div = 0\n    for i in range(a, b+1):\n        for j in range(1, i):\n            if i%j == 0:\n                max_div = max(max_div, j)\n    return max_div\nprint(max_occuring_divisor(1, 100))",
      -0.85693359375
    ],
    [
      "def max_occurring_divisor(number1, number2):\n    \"\"\"\n    :param number1: int - a number\n    :param number2: int - a number\n    :return: int - maximum occuring number\n    \"\"\"\n    list1 = []\n    for i in range(number1, number2 + 1):\n        for j in range(number1, number2 + 1):\n            if i % j == 0:\n                list1.append(j)\n    return max(set(list1), key=list1.count)\n\n\nif __name__ == '__main__':\n    print(max_occurring_divisor(1, 27))",
      -0.85791015625
    ],
    [
      "from collections import defaultdict\n\n\ndef max_divisor(l, r):\n    divisors = defaultdict(int)\n    for i in range(l, r + 1):\n        for j in range(1, i // 2 + 1):\n            if i % j == 0:\n                divisors[j] += 1\n    return max(divisors, key=divisors.get)\n\n\ndef main():\n    print(max_divisor(12, 100))\n    print(max_divisor(3, 3))\n    print(max_divisor(3, 10))\n    print(max_divisor(12, 21))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "from collections import defaultdict\n\n\ndef max_occurring_divisor(n):\n    \"\"\"\n    >>> max_occurring_divisor(100)\n    25\n    \"\"\"\n    divisors = defaultdict(int)\n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors[i] += 1\n            divisors[n // i] += 1\n\n    return max(divisors, key=divisors.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def max_divisor(number, interval):\n    \"\"\"\n    Return the maximum occuring divisor in the interval.\n    \"\"\"\n    divisors = []\n    for num in range(interval[0], interval[1]+1):\n        if number % num == 0:\n            divisors.append(num)\n\n    return max(divisors)",
      -0.85791015625
    ],
    [
      "def max_divisor(n, m):\n    divisors = []\n    for i in range(n, m + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                divisors.append(j)\n    return max(divisors)\n\n\nprint(max_divisor(12, 100))",
      -0.85791015625
    ],
    [
      "def max_divisor(num):\n    max_div = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            max_div = i\n    return max_div\n\n\nprint(max_divisor(12))\nprint(max_divisor(24))",
      -0.85791015625
    ],
    [
      "from collections import defaultdict\n\n\ndef max_occuring_divisor(first, last):\n    divisor_dict = defaultdict(int)\n    for num in range(first, last + 1):\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisor_dict[i] += 1\n    return max(divisor_dict, key=divisor_dict.get)\n\n\nfirst = int(input(\"Enter the first number: \"))\nlast = int(input(\"Enter the last number: \"))\nprint(\"Max occuring divisor is: \", max_occuring_divisor(first, last))",
      -0.8583984375
    ],
    [
      "from math import gcd\n\n\ndef max_divisor(a, b):\n    divisors = []\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            divisors.append(gcd(i, j))\n    return max(set(divisors), key=divisors.count)\n\n\na = 1\nb = 10\nprint(max_divisor(a, b))",
      -0.8583984375
    ],
    [
      "def max_divisor(num1, num2):\n    dict_ = {}\n    for i in range(num1, num2+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                if j in dict_:\n                    dict_[j] += 1\n                else:\n                    dict_[j] = 1\n\n    max_div = None\n    for k, v in dict_.items():\n        if max_div is None:\n            max_div = (k, v)\n        elif v > max_div[1]:\n            max_div = (k, v)\n    return max_div\n\n\nprint(max_divisor(1, 5))\nprint(max_divisor(1, 10))\nprint(max_divisor(1, 100))",
      -0.8583984375
    ],
    [
      "def max_divisor(a, b):\n    divisors = []\n    for i in range(a, b+1):\n        for j in range(1, i):\n            if i % j == 0:\n                divisors.append(j)\n    return max(divisors)\n\nprint(max_divisor(1, 2))\nprint(max_divisor(1, 10))\nprint(max_divisor(1, 100))\nprint(max_divisor(1, 1000))",
      -0.8583984375
    ],
    [
      "def max_occuring_divisor(a, b):\n    result = []\n    for i in range(a, b + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                result.append(j)\n\n    return max(result)\n\n\ndef main():\n    assert max_occuring_divisor(1, 10) == 5\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def max_divisor(number, interval):\n    divisor = 0\n    for i in range(interval[0], interval[1] + 1):\n        if number % i == 0:\n            divisor = i\n\n    return divisor",
      -0.8583984375
    ],
    [
      "def maximum_occurring_divisor(x,y):\n    divisors = []\n    for i in range(x, y + 1):\n        for j in range(x, i):\n            if i % j == 0:\n                divisors.append(j)\n    return max(divisors)\n\nprint(maximum_occurring_divisor(1, 5))",
      -0.8583984375
    ],
    [
      "def max_occuring_divisor(start, end):\n    max_div = 0\n    for i in range(start, end):\n        for j in range(i, end + 1):\n            if i % j == 0:\n                max_div = max(max_div, i)\n    return max_div\n\n\nprint(max_occuring_divisor(1, 10))",
      -0.86083984375
    ],
    [
      "def max_divisor(n):\n    max_count = 0\n    max_divisor = 0\n\n    for i in range(1, n + 1):\n        count = 0\n        for j in range(1, n + 1):\n            if j % i == 0:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_divisor = i\n    return max_divisor\n\n\nn = 10\nprint(max_divisor(n))",
      -0.86083984375
    ],
    [
      "def max_divisor(n, m):\n    max_div = 0\n    for i in range(n, m + 1):\n        for j in range(n, i + 1):\n            if i % j == 0:\n                max_div = max(max_div, j)\n    return max_div\n\n\nprint(max_divisor(2, 20))",
      -0.86083984375
    ],
    [
      "def find_max_divisor(n, m):\n    res = 0\n    for i in range(n, m + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                res += 1\n    return res\n\n\nprint(find_max_divisor(1, 10))\nprint(find_max_divisor(1, 20))\nprint(find_max_divisor(1, 30))",
      -0.86083984375
    ],
    [
      "def find_max_divisor(num1, num2):\n    divisors = set()\n    for i in range(num1, num2+1):\n        for j in range(1, i//2+1):\n            if i % j == 0:\n                divisors.add(j)\n    print(max(divisors))\n\n\nfind_max_divisor(12, 18)",
      -0.8896484375
    ],
    [
      "def max_occuring_divisor(l, r):\n    \"\"\"\n    >>> max_occuring_divisor(1, 10)\n    3\n    >>> max_occuring_divisor(10, 100)\n    25\n    >>> max_occuring_divisor(100, 1000)\n    250\n    >>> max_occuring_divisor(1000, 10000)\n    2500\n    >>> max_occuring_divisor(10000, 100000)\n    25000\n    \"\"\"\n    count = {}\n    for i in range(l, r + 1):\n        for j in range(l, r + 1):\n            if i % j == 0:\n                if j not in count:\n                    count[j] = 1\n                else:\n                    count[j] += 1\n    return max(count, key=count.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.96337890625
    ],
    [
      "def max_divisor(a, b):\n    max_divisor = 0\n    for i in range(a, b + 1):\n        for j in range(a, i):\n            if i % j == 0:\n                max_divisor = max(max_divisor, j)\n    return max_divisor\n\n\na = int(input(\"Enter the start of the interval: \"))\nb = int(input(\"Enter the end of the interval: \"))\nprint(max_divisor(a, b))",
      -0.99462890625
    ],
    [
      "def max_occurring_divisor(a, b):\n    \"\"\"\n    >>> max_occurring_divisor(2, 5)\n    3\n    >>> max_occurring_divisor(3, 6)\n    3\n    >>> max_occurring_divisor(5, 12)\n    5\n    >>> max_occurring_divisor(1, 10)\n    1\n    >>> max_occurring_divisor(2, 12)\n    2\n    \"\"\"\n    res = 0\n    for i in range(a, b + 1):\n        for j in range(a, i):\n            if i % j == 0:\n                res += 1\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.0380859375
    ],
    [
      "def max_divisor(n, m):\n    max_d, d_freq = 0, 0\n    for d in range(n, m+1):\n        freq = 0\n        for i in range(n, m+1):\n            if i % d == 0:\n                freq += 1\n        if freq > d_freq:\n            d_freq = freq\n            max_d = d\n    return max_d\n\n\nprint(max_divisor(1, 2))\nprint(max_divisor(1, 3))\nprint(max_divisor(2, 5))",
      -1.09765625
    ],
    [
      "def find_max_divisor(start, end):\n    \"\"\"\n    :param start: starting interval\n    :param end: ending interval\n    :return: max divisor\n    \"\"\"\n    if start > end:\n        raise ValueError(\"starting interval cannot be greater than ending interval\")\n\n    divisors = {}\n    for i in range(start, end + 1):\n        for j in range(start, i + 1):\n            if i % j == 0:\n                if j in divisors:\n                    divisors[j] += 1\n                else:\n                    divisors[j] = 1\n    max_div = 0\n    max_div_count = 0\n    for key, value in divisors.items():\n        if value > max_div_count:\n            max_div_count = value\n            max_div = key\n    return max_div\n\n\nif __name__ == \"__main__\":\n    print(find_max_divisor(1, 2))",
      -1.1640625
    ],
    [
      "def maximum_occuring_divisor(start, end):\n    divisors = []\n    for i in range(start, end):\n        for j in range(start, i):\n            if i % j == 0:\n                divisors.append(j)\n\n    return max(divisors)\n\n\nprint(maximum_occuring_divisor(1, 10))",
      -1.4140625
    ],
    [
      "def max_occuring_divisor(n):\n    \"\"\"\n    Time complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    divisors = {}\n\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                if j in divisors:\n                    divisors[j] += 1\n                else:\n                    divisors[j] = 1\n\n    return max(divisors.items(), key=lambda x: x[1])\n\n\ndef max_occuring_divisor_efficient(n):\n    \"\"\"\n    Time complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_divisor = 0\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                count += 1\n                if count > max_divisor:\n                    max_divisor = count\n                    divisor = j\n\n    return divisor\n\n\nprint(max_occuring_divisor_efficient(12))",
      -1.4775390625
    ],
    [
      "def maxDivisor(n, m):\n    divisor = 1\n    result = 0\n    for i in range(n, m+1):\n        if i%divisor == 0:\n            result = i\n            divisor = i\n        else:\n            divisor = divisor + 1\n    return result\n\n\nif __name__ == \"__main__\":\n    print(maxDivisor(12, 15))",
      -1.6416015625
    ],
    [
      "import math\n\n\ndef max_occuring_divisor(num1: int, num2: int) -> int:\n    \"\"\"\n    >>> max_occuring_divisor(1, 20)\n    5\n    >>> max_occuring_divisor(2, 20)\n    5\n    >>> max_occuring_divisor(1, 30)\n    10\n    >>> max_occuring_divisor(2, 30)\n    15\n    >>> max_occuring_divisor(1, 100)\n    25\n    >>> max_occuring_divisor(2, 100)\n    25\n    \"\"\"\n    # Find the max number\n    max_num: int = max(num1, num2)\n    # Find the min number\n    min_num: int = min(num1, num2)\n    # Find the divisors\n    divisors: list[int] = []\n\n    for i in range(1, int(math.sqrt(max_num)) + 1):\n        if max_num % i == 0:\n            divisors.append(i)\n            if i != max_num // i:\n                divisors.append(max_num // i)\n\n    # Find the divisors that are present in the interval\n    divisors_in_interval: list[int] = []\n    for i in divisors:\n        if min_num <= i <= max_num:\n            divisors_in_interval.append(i)\n\n    # Find the maximum occuring divisor\n    max_divisor: int = max(divisors_in_interval)\n\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.6767578125
    ],
    [
      "def max_divisor(start, end):\n    max_divisor = 0\n\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            if i % j == 0:\n                max_divisor = max(max_divisor, j)\n\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    print(max_divisor(1, 2))\n    print(max_divisor(1, 3))\n    print(max_divisor(1, 10))",
      -1.6767578125
    ],
    [
      "def maximum_occuring_divisor(low, high):\n    max_divisor = 0\n    for i in range(low, high + 1):\n        for j in range(low, high + 1):\n            if i % j == 0 and j > max_divisor:\n                max_divisor = j\n\n    return max_divisor\n\nprint(maximum_occuring_divisor(2, 12))\nprint(maximum_occuring_divisor(6, 12))\nprint(maximum_occuring_divisor(6, 13))",
      -1.85546875
    ],
    [
      "from math import floor\n\ndef max_occurring_divisor(n):\n    max_divisor = 0\n    for i in range(1, floor(n / 2) + 1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n\nprint(max_occurring_divisor(12))\nprint(max_occurring_divisor(36))\nprint(max_occurring_divisor(50))\nprint(max_occurring_divisor(100))\nprint(max_occurring_divisor(13))\nprint(max_occurring_divisor(20))",
      -1.90625
    ],
    [
      "def find_max_occurring_divisor(a, b):\n    divisors = []\n    for i in range(a, b+1):\n        for j in range(1, i):\n            if i % j == 0:\n                divisors.append(j)\n    return max(divisors)\n\n\na = int(input(\"Enter starting point: \"))\nb = int(input(\"Enter ending point: \"))\nprint(find_max_occurring_divisor(a, b))",
      -2.30078125
    ],
    [
      "def max_occuring_divisor(l, r):\n    \"\"\"\n    Takes in a list of two numbers and returns the maximum occuring divisor in the range\n    \"\"\"\n    # Find the maximum divisor\n    max_div = max(l, r)\n    # Find the minimum divisor\n    min_div = min(l, r)\n    # Find the maximum occuring divisor in the range\n    max_occ_div = 0\n    for i in range(min_div, max_div+1):\n        if l%i == 0 and r%i == 0:\n            max_occ_div = i\n    return max_occ_div\n\nif __name__ == \"__main__\":\n    l = 2\n    r = 12\n    print(max_occuring_divisor(l, r))",
      -2.314453125
    ],
    [
      "def max_occuring_divisor(n):\n    \"\"\"\n    max_occuring_divisor will return the maximum occuring divisor\n    in an interval\n    \"\"\"\n    count = 0\n    max_divisor = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n            max_divisor = i\n        if count > 1:\n            break\n    return max_divisor",
      -2.396484375
    ],
    [
      "def max_divisor(num1: int, num2: int) -> int:\n    \"\"\"\n    >>> max_divisor(6,9)\n    3\n    >>> max_divisor(6,12)\n    6\n    >>> max_divisor(12,18)\n    6\n    >>> max_divisor(12,24)\n    12\n    \"\"\"\n    divisor = 0\n    max_count = 0\n\n    for i in range(num1, num2 + 1):\n        count = 0\n\n        for j in range(1, i + 1):\n            if i % j == 0:\n                count += 1\n\n        if count > max_count:\n            max_count = count\n            divisor = i\n\n    return divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.5
    ],
    [
      "def max_divisor(n, m):\n    divisors = []\n    for i in range(n, m+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                divisors.append(j)\n    return max(divisors)\n\nprint(max_divisor(1, 100))\nprint(max_divisor(1, 101))\nprint(max_divisor(1, 10))\nprint(max_divisor(1, 2))\nprint(max_divisor(1, 1))\nprint(max_divisor(1, 0))",
      -2.591796875
    ],
    [
      "def max_occurring_divisor(n):\n    \"\"\"\n    Finds the maximum occuring divisor in an interval.\n\n    Args:\n       n(int): Number\n    Returns:\n       int: Maximum occuring divisor in an interval\n    \"\"\"\n    max_divisor = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_divisor = i\n\n    return max_divisor\n\nprint(max_occurring_divisor(12))\nprint(max_occurring_divisor(100))",
      -2.724609375
    ],
    [
      "def max_divisor(n: int, m: int) -> int:\n    \"\"\"\n    >>> max_divisor(12, 4)\n    3\n    >>> max_divisor(12, 6)\n    2\n    >>> max_divisor(12, 10)\n    1\n    >>> max_divisor(10, 12)\n    1\n    \"\"\"\n    res = 0\n    for i in range(n, m + 1):\n        if m % i == 0 and res < i:\n            res = i\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.73828125
    ],
    [
      "def max_divisor(n):\n    # n = int(input(\"Enter a number: \"))\n    m = 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            m = i\n    return m\n\n\nprint(max_divisor(10))",
      -2.80078125
    ],
    [
      "def max_divisor(number: int, start: int, end: int) -> int:\n    \"\"\"\n    >>> max_divisor(25, 1, 13)\n    5\n    >>> max_divisor(15, 5, 10)\n    3\n    >>> max_divisor(10, 1, 10)\n    1\n    \"\"\"\n    # your code goes here\n    max_div = 0\n\n    for i in range(start, end + 1):\n        if number % i == 0:\n            max_div = i\n\n    return max_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.130859375
    ],
    [
      "def max_occuring_divisor(n1, n2):\n    max_divisor = 0\n    for i in range(n1, n2 + 1):\n        for j in range(n1, i):\n            if i % j == 0:\n                if j > max_divisor:\n                    max_divisor = j\n    return max_divisor\n\n\nprint(max_occuring_divisor(1, 100))\nprint(max_occuring_divisor(1, 200))\nprint(max_occuring_divisor(1, 300))",
      -3.154296875
    ],
    [
      "def maximum_occuring_divisor(a, b):\n    \"\"\"\n    >>> maximum_occuring_divisor(6, 12)\n    2\n    >>> maximum_occuring_divisor(24, 36)\n    4\n    >>> maximum_occuring_divisor(36, 48)\n    6\n    \"\"\"\n    divisor = 1\n    max_divisor = 1\n    for i in range(1, a):\n        if a % i == 0 and b % i == 0:\n            divisor = i\n            max_divisor = divisor\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.1875
    ],
    [
      "from math import ceil, sqrt\n\n\ndef max_occuring_divisor(n, m):\n    max_divisor = 0\n    for i in range(ceil(sqrt(n)), ceil(sqrt(m)) + 1):\n        if n % i == 0 and m % i == 0:\n            max_divisor = max(i, max_divisor)\n    return max_divisor\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    m = int(input(\"Enter m: \"))\n    print(f\"Maximum occuring divisor is {max_occuring_divisor(n, m)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.4140625
    ],
    [
      "def max_divisor(start, end):\n    \"\"\"Returns the maximum occuring divisor between start and end.\"\"\"\n    if start > end:\n        return None\n\n    divisor = start\n    max_div = start\n    while divisor <= end:\n        if end % divisor == 0 and divisor > max_div:\n            max_div = divisor\n        divisor += 1\n    return max_div\n\n\nif __name__ == \"__main__\":\n    print(max_divisor(10, 20))\n    print(max_divisor(10, 21))\n    print(max_divisor(10, 10))",
      -3.48828125
    ],
    [
      "def max_occuring_divisor(x, y):\n    \"\"\"\n    >>> max_occuring_divisor(10, 100)\n    10\n    >>> max_occuring_divisor(10, 1000)\n    10\n    >>> max_occuring_divisor(10, 10000)\n    10\n    >>> max_occuring_divisor(10, 100000)\n    10\n    >>> max_occuring_divisor(10, 1000000)\n    10\n    >>> max_occuring_divisor(10, 10000000)\n    10\n    >>> max_occuring_divisor(10, 100000000)\n    10\n    \"\"\"\n    max_div = 0\n    for i in range(x, y + 1):\n        if y % i == 0 and x % i == 0:\n            max_div = i\n    return max_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.505859375
    ],
    [
      "from collections import Counter\n\n\ndef find_max_occuring_divisor(start, end):\n    \"\"\"\n    >>> find_max_occuring_divisor(1, 5)\n    (3, 2)\n    >>> find_max_occuring_divisor(3, 6)\n    (3, 2)\n    >>> find_max_occuring_divisor(2, 4)\n    (2, 2)\n    >>> find_max_occuring_divisor(1, 10)\n    (1, 4)\n    >>> find_max_occuring_divisor(1, 12)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 20)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 24)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 30)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 32)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 36)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 40)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 44)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 48)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 52)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 56)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 60)\n    (2, 4)\n    >>> find_max_occuring_divisor(1, 64)",
      -3.615234375
    ],
    [
      "def max_divisor(number: int, interval: list):\n    \"\"\"\n    >>> max_divisor(12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    3\n    >>> max_divisor(12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    4\n    >>> max_divisor(12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    6\n    \"\"\"\n    divisor = 0\n    for i in range(number, 1, -1):\n        for j in interval:\n            if j % i == 0:\n                divisor = i\n                break\n        if divisor:\n            break\n    return divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.62109375
    ],
    [
      "def max_divisor(a, b):\n    \"\"\"\n    Find the maximum occuring divisor in an interval.\n\n    >>> max_divisor(1, 10)\n    3\n    >>> max_divisor(10, 100)\n    25\n    >>> max_divisor(2, 7)\n    2\n    >>> max_divisor(15, 17)\n    15\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    divisors = set()\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if j % i == 0:\n                divisors.add(i)\n    return max(divisors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.623046875
    ],
    [
      "def max_occuring_divisor(interval: list):\n    divisor = 1\n    max_div = 0\n    for i in range(interval[0], interval[1] + 1):\n        count = 0\n        for j in range(2, i + 1):\n            if i % j == 0:\n                count += 1\n        if count > max_div:\n            max_div = count\n            divisor = i\n    return divisor\n\n\nprint(max_occuring_divisor([1, 100]))",
      -3.982421875
    ],
    [
      "def max_divisor(interval):\n    \"\"\"\n    Takes in an interval and returns the maximum divisor\n\n    >>> max_divisor([2, 5])\n    [2, 2]\n\n    >>> max_divisor([12, 15])\n    [3, 3]\n\n    >>> max_divisor([1, 5])\n    [1, 1]\n\n    >>> max_divisor([5, 5])\n    [5, 5]\n\n    >>> max_divisor([3, 3])\n    [3, 3]\n\n    >>> max_divisor([4, 4])\n    [2, 2]\n\n    >>> max_divisor([5, 1])\n    [1, 1]\n\n    >>> max_divisor([10, 10])\n    [5, 5]\n\n    >>> max_divisor([12, 12])\n    [3, 3]\n\n    >>> max_divisor([10, 15])\n    [3, 3]\n\n    >>> max_divisor([15, 12])\n    [3, 3]\n\n    >>> max_divisor([15, 15])\n    [3, 3]\n\n    >>> max_divisor([12, 12])\n    [3, 3]\n\n    >>> max_divisor([15, 15])\n    [3, 3]\n\n    >>> max_divisor([15, 15])\n    [3, 3]\n\n    >>> max_divisor([15, 15])\n    [3, 3]\n\n    >>> max_divisor([15, 15])\n    [3, 3]\n\n    >>> max_divisor([15, 15])\n    [3, 3]\n\n    >>> max_divisor([15, 15])\n    [3, 3]\n\n    >>> max_divisor([15, 15])\n    [3,",
      -4.01953125
    ],
    [
      "def max_occurring_divisor(n):\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            count = 0\n            while n % divisor == 0:\n                n = n / divisor\n                count += 1\n            if count > max_count:\n                max_count = count\n                max_divisor = divisor\n        divisor += 1\n    if n > 1:\n        if max_count < 2:\n            return n\n        else:\n            return max_divisor\n\n\nprint(max_occurring_divisor(12))",
      -4.22265625
    ],
    [
      "def max_occurring_divisor(number1: int, number2: int) -> int:\n    \"\"\"\n    >>> max_occurring_divisor(12, 15)\n    3\n    >>> max_occurring_divisor(100, 200)\n    2\n    >>> max_occurring_divisor(12, 12)\n    1\n    \"\"\"\n    divisor_count = [0] * (number2 + 1)\n    for i in range(number1, number2 + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                divisor_count[j] += 1\n    max_divisor = 0\n    for i in range(1, len(divisor_count)):\n        if max_divisor < divisor_count[i]:\n            max_divisor = i\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.44140625
    ],
    [
      "def max_occuring_divisor(interval):\n    \"\"\"\n    >>> max_occuring_divisor(interval=[1, 6])\n    3\n    >>> max_occuring_divisor(interval=[1, 10])\n    5\n    >>> max_occuring_divisor(interval=[1, 20])\n    10\n    >>> max_occuring_divisor(interval=[1, 15])\n    5\n    >>> max_occuring_divisor(interval=[1, 100])\n    25\n    >>> max_occuring_divisor(interval=[1, 150])\n    50\n    >>> max_occuring_divisor(interval=[1, 200])\n    100\n    >>> max_occuring_divisor(interval=[1, 250])\n    25\n    >>> max_occuring_divisor(interval=[1, 250])\n    25\n    >>> max_occuring_divisor(interval=[1, 300])\n    50\n    \"\"\"\n    if interval[0] % 2 == 0:\n        divisor = 2\n    else:\n        divisor = 1\n    while interval[0] <= interval[1]:\n        if interval[0] % divisor == 0 and interval[1] % divisor == 0:\n            return divisor\n        divisor += 1\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.65234375
    ],
    [
      "def max_divisor(n, m):\n    if n <= 0 or m <= 0:\n        return\n\n    max_divisor = 0\n    for i in range(m, n + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                max_divisor = max(max_divisor, j)\n\n    return max_divisor\n\nprint(max_divisor(20, 20))\nprint(max_divisor(10, 10))\nprint(max_divisor(100, 20))\nprint(max_divisor(100, 30))\nprint(max_divisor(100, 40))\nprint(max_divisor(100, 50))\nprint(max_divisor(100, 60))\nprint(max_divisor(100, 70))\nprint(max_divisor(100, 80))\nprint(max_divisor(100, 90))\nprint(max_divisor(100, 100))",
      -5.109375
    ],
    [
      "def max_divisor(start, end):\n    max_d = 0\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            if i % j == 0:\n                max_d = max(max_d, j)\n    return max_d\n\nif __name__ == \"__main__\":\n    print(max_divisor(2, 12))",
      -5.1171875
    ],
    [
      "def max_occuring_divisor(interval):\n    \"\"\"\n    >>> max_occuring_divisor((1, 13))\n    4\n    >>> max_occuring_divisor((1, 21))\n    7\n    >>> max_occuring_divisor((1, 34))\n    17\n    \"\"\"\n    max_divisor = 0\n\n    for i in range(interval[0], interval[1] + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                max_divisor = max(max_divisor, j)\n\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.13671875
    ],
    [
      "def max_divisor(n, m):\n    \"\"\"\n    Find the maximum divisor in an interval.\n\n    Args:\n        n(int): Interval's starting point\n        m(int): Interval's end point\n    Returns:\n        (int): Maximum occuring divisor\n    \"\"\"\n    max_div = 0\n    for i in range(n, m+1):\n        if i % 2 == 0:\n            max_div = max(max_div, i)\n        if i % 3 == 0:\n            max_div = max(max_div, i)\n        if i % 5 == 0:\n            max_div = max(max_div, i)\n        if i % 7 == 0:\n            max_div = max(max_div, i)\n    return max_div\n\n\nprint(max_divisor(12, 30))\nprint(max_divisor(0, 100))\nprint(max_divisor(1, 2))",
      -5.2109375
    ],
    [
      "def find_max_divisor(n1, n2):\n    if n1 > n2:\n        return -1\n    if n1 < 1 or n2 < 1:\n        return -1\n    max_divisor = 0\n    for i in range(n1, n2 + 1):\n        if i % 2 == 0:\n            max_divisor = 2\n        else:\n            max_divisor = 1\n        for j in range(3, i + 1, 2):\n            if i % j == 0:\n                max_divisor = j\n        print(max_divisor)\n    return max_divisor\n\n\ndef main():\n    n1 = int(input(\"Enter a number: \"))\n    n2 = int(input(\"Enter a number: \"))\n    print(find_max_divisor(n1, n2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.25
    ],
    [
      "def max_divisor(a, b):\n    \"\"\"\n    >>> max_divisor(1, 100)\n    25\n    >>> max_divisor(1, 2)\n    1\n    \"\"\"\n    res = 0\n    for i in range(a, b+1):\n        for j in range(a, b+1):\n            if i%j == 0:\n                res = max(res, j)\n    return res\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.65625
    ],
    [
      "def max_occuring_divisor(divisor, interval):\n    \"\"\"\n    :param divisor: int\n    :param interval: list\n    :return: int\n    \"\"\"\n    max_divisor = 0\n    count = 0\n    for i in interval:\n        if i % divisor == 0:\n            count += 1\n        if count > max_divisor:\n            max_divisor = count\n            count = 0\n    return max_divisor\n\n\ndef test_function(test_case):\n    divisor = test_case[0]\n    interval = test_case[1]\n    solution = test_case[2]\n    output = max_occuring_divisor(divisor, interval)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ndivisor = 3\ninterval = [12, 36, 48, 60, 72, 96]\nsolution = 4\ntest_case = [divisor, interval, solution]\ntest_function(test_case)",
      -5.72265625
    ],
    [
      "from math import floor, ceil\n\n\ndef max_occ_divisor(a, b):\n    \"\"\"\n    >>> max_occ_divisor(1, 10)\n    3\n    >>> max_occ_divisor(2, 20)\n    5\n    >>> max_occ_divisor(1, 3)\n    1\n    \"\"\"\n    max_div = -1\n    for num in range(a, b + 1):\n        for i in range(a, b + 1):\n            if num % i == 0:\n                max_div = max(max_div, i)\n\n    return max_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.83984375
    ],
    [
      "def max_divisor(start, end):\n    max_divisor = 0\n    for num in range(start, end + 1):\n        for i in range(start, end + 1):\n            if num % i == 0:\n                max_divisor += 1\n        if max_divisor > end - start:\n            return num\n        max_divisor = 0\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    print(max_divisor(12, 12))",
      -6.9921875
    ],
    [
      "def max_divisor(num1, num2):\n    \"\"\"\n    Find the maximum occuring divisor in an interval\n\n    Args:\n       num1(int): Interval  start point\n       num2(int): Interval  end point\n    Returns:\n       int: Maximum occuring divisor\n    \"\"\"\n    # TODO: Write your solution here\n    max_div = 0\n    for num in range(num1, num2 + 1):\n        for i in range(num1, num2 + 1):\n            if num % i == 0:\n                max_div = i\n    return max_div\n\n# Test case 1\nprint(\"Test case 1 is {0}\".format(max_divisor(1, 2) == 2))\n\n# Test case 2\nprint(\"Test case 2 is {0}\".format(max_divisor(5, 6) == 3))\n\n# Test case 3\nprint(\"Test case 3 is {0}\".format(max_divisor(6, 10) == 5))\n\n# Test case 4\nprint(\"Test case 4 is {0}\".format(max_divisor(10, 12) == 10))",
      -7.55859375
    ],
    [
      "def max_occuring_divisor(l, r):\n    max_div = 0\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if j % i == 0:\n                max_div = max(max_div, j)\n    return max_div\n\n\nprint(max_occuring_divisor(1, 100))\nprint(max_occuring_divisor(2, 100))\nprint(max_occuring_divisor(3, 100))\nprint(max_occuring_divisor(4, 100))\nprint(max_occuring_divisor(5, 100))\nprint(max_occuring_divisor(6, 100))\nprint(max_occuring_divisor(7, 100))\nprint(max_occuring_divisor(8, 100))\nprint(max_occuring_divisor(9, 100))\nprint(max_occuring_divisor(10, 100))\nprint(max_occuring_divisor(11, 100))\nprint(max_occuring_divisor(12, 100))\nprint(max_occuring_divisor(13, 100))\nprint(max_occuring_divisor(14, 100))\nprint(max_occuring_divisor(15, 100))\nprint(max_occuring_divisor(16, 100))\nprint(max_occuring_divisor(17, 100))\nprint(max_occuring_divisor(18, 100))\nprint(max_occuring_divisor(19, 100))\nprint(max_occuring_divisor(20, 100))\nprint(max_occuring_divisor(21,",
      -7.5625
    ],
    [
      "from collections import Counter\nfrom math import gcd\n\n\ndef max_occuring_divisor(interval: list) -> int:\n    \"\"\"\n    Time Complexity: O(N*log(N))\n    Space Complexity: O(N)\n    \"\"\"\n    count = Counter()\n\n    for num in range(interval[0], interval[1] + 1):\n        for i in range(2, num):\n            if num % i == 0:\n                count[i] += 1\n\n    return max(count, key=count.get)\n\n\ndef max_occuring_divisor_eff(interval: list) -> int:\n    \"\"\"\n    Time Complexity: O(N*log(log(N)))\n    Space Complexity: O(1)\n    \"\"\"\n    max_divisor = -1\n    max_count = -1\n\n    for num in range(interval[0], interval[1] + 1):\n        count = 0\n        for i in range(2, num):\n            if num % i == 0:\n                count += 1\n                max_divisor = gcd(max_divisor, i)\n\n        if count > max_count:\n            max_count = count\n\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    print(max_occuring_divisor([1, 100]))\n    print(max_occuring_divisor_eff([1, 100]))",
      -7.58203125
    ],
    [
      "def max_occuring_divisor(n: int, m: int) -> int:\n    \"\"\"\n    >>> max_occuring_divisor(1,100)\n    1\n    >>> max_occuring_divisor(2,100)\n    2\n    >>> max_occuring_divisor(3,100)\n    3\n    >>> max_occuring_divisor(4,100)\n    4\n    >>> max_occuring_divisor(5,100)\n    5\n    >>> max_occuring_divisor(6,100)\n    3\n    >>> max_occuring_divisor(7,100)\n    7\n    >>> max_occuring_divisor(8,100)\n    2\n    >>> max_occuring_divisor(9,100)\n    9\n    >>> max_occuring_divisor(10,100)\n    10\n    \"\"\"\n    max_count = 0\n    max_divisor = 0\n    for i in range(n, m + 1):\n        count = 0\n        for j in range(1, i + 1):\n            if i % j == 0:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_divisor = i\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.625
    ],
    [
      "from math import floor\nfrom collections import defaultdict\nfrom typing import DefaultDict\n\n\ndef max_occuring_divisor(a: int, b: int) -> DefaultDict:\n    \"\"\"\n    Return the maximum occuring divisor in an interval.\n    >>> max_occuring_divisor(1, 10)\n    defaultdict(<class 'int'>, {2: 3, 5: 2})\n    \"\"\"\n    # find the divisors\n    divisors: DefaultDict = defaultdict(int)\n    for i in range(a, b + 1):\n        for j in range(1, floor(i / 2) + 1):\n            if i % j == 0:\n                divisors[j] += 1\n\n    # find the maximum occuring divisor\n    max_divisor: int = -1\n    for key, value in divisors.items():\n        if value > max_divisor:\n            max_divisor = key\n\n    return divisors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(max_occuring_divisor(1, 10))",
      -7.65625
    ],
    [
      "def max_occurring_divisor(interval: list) -> int:\n    \"\"\"\n    This function takes a list of integers as an interval and returns the\n    maximum occuring divisor in that interval.\n    >>> max_occurring_divisor([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    3\n    >>> max_occurring_divisor([1, 2, 3, 4, 5, 6, 7, 8, 9, 11])\n    1\n    >>> max_occurring_divisor([1, 2, 3, 4, 5, 6, 7, 8, 9, 12])\n    4\n    >>> max_occurring_divisor([1, 2, 3, 4, 5, 6, 7, 8, 10, 11])\n    2\n    \"\"\"\n    # Get the maximum and minimum of the interval\n    maximum = max(interval)\n    minimum = min(interval)\n\n    # Get the maximum divisor\n    divisor = maximum // minimum\n\n    # Get the number of occurence of divisor\n    count = 0\n    for i in range(minimum, maximum + 1):\n        if i % divisor == 0:\n            count += 1\n\n    # Return the divisor if it is the maximum occuring divisor\n    if count == divisor:\n        return divisor\n    else:\n        return 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -8.6640625
    ],
    [
      "def maximum_occuring_divisor(n):\n    \"\"\"\n    >>> maximum_occuring_divisor(6)\n    3\n    >>> maximum_occuring_divisor(10)\n    5\n    >>> maximum_occuring_divisor(35)\n    17\n    >>> maximum_occuring_divisor(24)\n    8\n    >>> maximum_occuring_divisor(30)\n    15\n    \"\"\"\n    return n // find_max_divisor(n)\n\n\ndef find_max_divisor(n):\n    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -9.1640625
    ],
    [
      "def max_occuring_divisor(n):\n    \"\"\"\n    Returns maximum occuring divisor in an interval.\n\n    >>> max_occuring_divisor(2)\n    2\n    >>> max_occuring_divisor(10)\n    5\n    >>> max_occuring_divisor(30)\n    15\n    >>> max_occuring_divisor(100)\n    25\n    >>> max_occuring_divisor(101)\n    25\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    if n == 1:\n        return 1\n\n    max_divisor = 1\n    max_count = 0\n    for i in range(2, n + 1):\n        count = 0\n        for j in range(i, n + 1, i):\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_divisor = i\n\n    return max_divisor\n\n\ndef max_occuring_divisor_eff(n):\n    \"\"\"\n    Returns maximum occuring divisor in an interval.\n\n    >>> max_occuring_divisor_eff(2)\n    2\n    >>> max_occuring_divisor_eff(10)\n    5\n    >>> max_occuring_divisor_eff(30)\n    15\n    >>> max_occuring_divisor_eff(100)\n    25\n    >>> max_occuring_divisor_eff(101)\n    25\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    if n == 1:\n        return 1\n\n    max_divisor = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            count = 0\n            for j in range(i, n + 1, i):\n                count += 1\n            if",
      -9.96875
    ],
    [
      "def max_occuring_divisor(start, end):\n    \"\"\"\n    :param start: int - first number in the interval\n    :param end: int - second number in the interval\n    :return: int\n    \"\"\"\n    # raise NotImplementedError(\"TODO: remove this when you implement this function\")\n    # check if start and end are valid\n    if start < 0 or end < 0:\n        return \"Please use only positive numbers\"\n    # check if start and end are valid\n    if start > end:\n        return \"Start should be smaller than end\"\n    # check if start and end are valid\n    if start == end:\n        return start\n\n    # initialize a list to store the divisors\n    divisors = []\n    # loop through the numbers between start and end\n    for i in range(start, end + 1):\n        # loop through the numbers between 1 and i\n        for j in range(1, i + 1):\n            # check if i is divisible by j\n            if i % j == 0:\n                # add j to the list\n                divisors.append(j)\n    # count the occurrences of each element in the list\n    counter = Counter(divisors)\n    # return the maximum occuring divisor\n    return counter.most_common()[0][0]\n\n\nif __name__ == \"__main__\":\n    print(max_occuring_divisor(1, 13))",
      -15.1484375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}