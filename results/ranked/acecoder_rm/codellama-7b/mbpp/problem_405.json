{
  "problem": {
    "task_id": "MBPP/416",
    "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
    "test_list": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ],
    "challenge_test_list": [],
    "problem_id": 405
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def max_sum(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n\n    return max(max_sum(n - 3) + 3, max_sum(n - 2) + 2, max_sum(n - 1) + 1)\n\n\ndef max_sum_dp(n):\n    dp = [0] * (n + 1)\n\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 4\n\n    for i in range(4, n + 1):\n        dp[i] = max(dp[i - 3] + 3, dp[i - 2] + 2, dp[i - 1] + 1)\n\n    return dp[n]\n\n\nprint(max_sum(10))\nprint(max_sum_dp(10))",
      8.9765625
    ],
    [
      "def max_sum(n):\n    if n <= 2:\n        return n\n    return max(n, max_sum(n-3) + max_sum(n-2), max_sum(n-1))\n\n\nprint(max_sum(4))",
      0.8115234375
    ],
    [
      "def max_sum(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    elif num == 3:\n        return 2\n    else:\n        return max(max_sum(num - 3) + 3, max_sum(num - 2) + 2, max_sum(num - 1) + 1)\n\n\nprint(max_sum(10))\n\n\"\"\"\nWrite a function to find the maximum sum of a subarray in a given array recursively.\n\"\"\"\n\ndef max_subarray(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(max_subarray(arr[1:]) + arr[0], max_subarray(arr[1:]))\n\n\nprint(max_subarray([1,2,-3,4,5,6,-7]))\n\n\"\"\"\nWrite a function to find the minimum sum of a subarray in a given array recursively.\n\"\"\"\n\ndef min_subarray(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return min(min_subarray(arr[1:]) + arr[0], min_subarray(arr[1:]))\n\n\nprint(min_subarray([1,2,-3,4,5,6,-7]))\n\n\"\"\"\nWrite a function to find the maximum product of a subarray in a given array recursively.\n\"\"\"\n\ndef max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(max_product(arr[1:]) * arr[0], max_product(arr[1:]), min_subarray(arr[1:]) * arr[0], min_subarray(arr[1:]))\n\n\nprint(max_product([1,2,-3,4,5,6,-7]))\n\n\"\"\"\nWrite a function to find the maximum and minimum sum of a subarray in a given array recursively.\n\"\"\"\n\ndef",
      0.1961669921875
    ],
    [
      "def maximum_sum(num):\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return num + maximum_sum(num - 1) + maximum_sum(num - 2) + maximum_sum(num - 3)\n\n\nprint(maximum_sum(5))",
      0.18603515625
    ],
    [
      "def max_sum(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n\n    max_sum_1 = max_sum(num-3)\n    max_sum_2 = max_sum(num-2)\n    max_sum_3 = max_sum(num-1)\n\n    return max(max_sum_1, max_sum_2, max_sum_3) + num\n\n\nif __name__ == \"__main__\":\n    print(max_sum(3))",
      0.131103515625
    ],
    [
      "def max_sum(num):\n    # Base condition\n    if num <= 2:\n        return num\n\n    # Recursive function\n    max_sum = -1\n    for i in range(1, num):\n        max_sum = max(max_sum, (i * max_sum_helper(i, num - i)) + max_sum_helper(i, i))\n\n    return max_sum\n\ndef max_sum_helper(num1, num2):\n    if num1 <= 2:\n        return num1\n\n    max_sum = -1\n    for i in range(1, num1):\n        max_sum = max(max_sum, (i * max_sum_helper(i, num1 - i)) + max_sum_helper(i, i))\n\n    return max_sum\n\nprint(max_sum(10))\nprint(max_sum(3))\nprint(max_sum(5))\nprint(max_sum(6))",
      0.121826171875
    ],
    [
      "def maximumSumRecursion(number):\n    # Base Case\n    if number == 0:\n        return 0\n\n    # Recursive Case\n    return max(number, number%3 + maximumSumRecursion(number//3), number%2 + maximumSumRecursion(number//2))\n\n\ndef maximumSumIteration(number):\n    # Base Case\n    if number == 0:\n        return 0\n\n    # Initialize variables\n    maximum = 0\n    sum = 0\n\n    # Loop through all possible combinations\n    for i in range(0, number+1):\n        for j in range(0, number-i+1):\n            k = number - i - j\n            sum = i + (j//2) + (k//3)\n            if sum > maximum:\n                maximum = sum\n\n    return maximum\n\n\nif __name__ == '__main__':\n    number = 10\n    print(maximumSumRecursion(number))\n    print(maximumSumIteration(number))",
      0.09991455078125
    ],
    [
      "def max_sum(n):\n    if n < 4:\n        return n\n\n    return max(n % 3, (n - n % 3) // 3 + max_sum(n - n % 3), (n - 2 * (n % 3)) // 3 + max_sum(n - 2 * (n % 3)))\n\n\ndef max_sum_dp(n):\n    if n < 4:\n        return n\n\n    dp = [0] * (n + 1)\n\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n\n    for i in range(4, n + 1):\n        dp[i] = max(i % 3, (i - i % 3) // 3 + dp[i - i % 3], (i - 2 * (i % 3)) // 3 + dp[i - 2 * (i % 3)])\n\n    return dp[n]\n\n\nprint(max_sum_dp(10))",
      -0.320556640625
    ],
    [
      "def max_sum_three(number):\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 4\n\n    return max(max_sum_three(number - 3) + 3, max_sum_three(number - 2) + 2, max_sum_three(number - 1) + 1)\n\nprint(max_sum_three(27))",
      -0.6533203125
    ],
    [
      "def maximum_sum(number):\n    if number <= 0:\n        return 0\n    if number == 1:\n        return number\n    if number == 2:\n        return number\n    if number == 3:\n        return 6\n    if number == 4:\n        return 8\n    if number == 5:\n        return 10\n    if number == 6:\n        return 12\n    if number == 7:\n        return 14\n    if number == 8:\n        return 16\n    if number == 9:\n        return 18\n    if number == 10:\n        return 20\n\n    if number % 3 == 0:\n        return number\n    if number % 3 == 1:\n        return maximum_sum(number - 1)\n    if number % 3 == 2:\n        return maximum_sum(number - 2)\n\nprint(maximum_sum(10))",
      -0.662109375
    ],
    [
      "def max_sum(number):\n    if number < 0:\n        return 0\n\n    if number == 0:\n        return 0\n\n    if number == 1:\n        return 1\n\n    if number == 2:\n        return 2\n\n    if number == 3:\n        return 4\n\n    if number == 4:\n        return 6\n\n    if number == 5:\n        return 7\n\n    if number == 6:\n        return 9\n\n    if number == 7:\n        return 12\n\n    if number == 8:\n        return 14\n\n    if number == 9:\n        return 17\n\n    if number == 10:\n        return 20\n\n    if number == 11:\n        return 23\n\n    if number == 12:\n        return 26\n\n    if number == 13:\n        return 29\n\n    if number == 14:\n        return 32\n\n    if number == 15:\n        return 36\n\n    if number == 16:\n        return 39\n\n    if number == 17:\n        return 42\n\n    if number == 18:\n        return 45\n\n    if number == 19:\n        return 48\n\n    if number == 20:\n        return 51\n\n    if number == 21:\n        return 55\n\n    if number == 22:\n        return 58\n\n    if number == 23:\n        return 62\n\n    if number == 24:\n        return 66\n\n    if number == 25:\n        return 70\n\n    if number == 26:\n        return 75\n\n    if number == 27:\n        return 80\n\n    if number == 28:\n        return 85\n\n    if number == 29:\n        return 91\n\n    if number == 30:\n        return 97\n\n    if number == 31:",
      -0.69873046875
    ],
    [
      "def max_sum(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    return max(n, n % 3 + max_sum(n // 3), n % 3 + max_sum(n // 3 - n % 3))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(10))",
      -0.85595703125
    ],
    [
      "def max_sum(number):\n    if number < 0:\n        return 0\n    elif number == 0:\n        return number\n\n    return number % 3 == 0 and number / 3 or max(number % 3 + max_sum(number - number % 3), max_sum(number - (number % 3)))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(1))",
      -0.85595703125
    ],
    [
      "def max_sum(n):\n    if n < 3:\n        return 0\n    return max(max_sum(n - 1), max_sum(n - 2), max_sum(n - 3) + n)\n\n\nif __name__ == \"__main__\":\n    print(max_sum(4))",
      -0.85791015625
    ],
    [
      "def max_sum_three(number):\n    if number < 0:\n        return 0\n    elif number < 3:\n        return number\n    elif number % 3 == 0:\n        return number\n    else:\n        return max(number, (number % 3) * (number // 3) + max_sum_three(number // 3))\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(f\"Maximum sum we can make by dividing the number in three parts recursively: {max_sum_three(number)}\")\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def max_sum(n):\n    if n <= 3:\n        return n\n    if n == 4:\n        return 6\n    if n == 5:\n        return 10\n\n    return max(max_sum(n-3)+3, max_sum(n-2)+2, max_sum(n-1)+1)\n\n\nprint(max_sum(10))",
      -0.85791015625
    ],
    [
      "def max_sum(n):\n    if n < 3:\n        return 0\n\n    if n == 3:\n        return 3\n\n    return max(n, max_sum(n - 3) + 3, max_sum(n - 2) + 2, max_sum(n - 1) + 1)\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(max_sum(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def max_sum(n):\n    if n < 0:\n        return 0\n    if n <= 2:\n        return n\n    return max(n, max_sum(n-3) + max_sum(n-6))\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(max_sum(n))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def maximum_sum(number):\n    if number < 4:\n        return number\n    else:\n        return number % 3\n\n\ndef maximum_sum_recursive(number):\n    if number < 4:\n        return number\n    else:\n        return number % 3\n\n\nif __name__ == '__main__':\n    print maximum_sum(15)\n    print maximum_sum_recursive(15)",
      -0.85791015625
    ],
    [
      "def max_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n\n    return max(max_sum(n-3) + 3, max_sum(n-2) + 2, max_sum(n-1) + 1)\n\n\nprint(max_sum(3))\nprint(max_sum(4))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))",
      -0.85791015625
    ],
    [
      "def max_sum(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return n\n\n    max_sum = n\n    for i in range(1, n):\n        max_sum = max(max_sum, i + max_sum - i)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum(10))\n    print(max_sum(4))",
      -0.8583984375
    ],
    [
      "def max_sum(n):\n    if n < 4:\n        return n\n\n    return max(max_sum(n-3)+3, max_sum(n-2)+2, max_sum(n-1)+1)\n\n\nif __name__ == \"__main__\":\n    print(max_sum(5))\n    print(max_sum(9))",
      -0.8583984375
    ],
    [
      "def max_sum_of_three(num):\n    # Base case\n    if num <= 0:\n        return 0\n    if num == 1:\n        return 1\n\n    # Recursion\n    return max(num, num % 3 + max_sum_of_three(num // 3), num % 3 + max_sum_of_three(num // 3 + num % 3))\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_three(20))\n    print(max_sum_of_three(10))\n    print(max_sum_of_three(13))",
      -0.8583984375
    ],
    [
      "def max_sum(num):\n    if num < 0:\n        return 0\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n\n    return max(num, num%3+max_sum(num//3), num%3+max_sum(num//3)%3+max_sum(num//3//3))\n\n\n\nprint(max_sum(4))\nprint(max_sum(10))\nprint(max_sum(3))",
      -0.8583984375
    ],
    [
      "def max_sum_divide(n):\n    if n < 3:\n        return n\n\n    return max(\n        max_sum_divide(n - 1) + n,\n        max_sum_divide(n - 2) + 2 * n,\n        max_sum_divide(n - 3) + 3 * n\n    )\n\n\nprint(max_sum_divide(7))",
      -0.85888671875
    ],
    [
      "def max_sum(num):\n    if num < 3:\n        return 0\n    return max(num, max_sum(num - 3) + num, max_sum(num - 2) + max_sum(num - 2) + 2)\n\n\nif __name__ == \"__main__\":\n    print(max_sum(10))",
      -0.85888671875
    ],
    [
      "def max_sum(number):\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 4\n    return max(max_sum(number - 3) + 3, max_sum(number - 2) + 2, max_sum(number - 1) + 1)\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(max_sum(number))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def maximumSum(a,n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[0] + a[1]\n    if n == 3:\n        return a[0] + a[1] + a[2]\n    if n > 3:\n        if a[n-1] > a[n-2] + a[n-3]:\n            return a[n-1] + maximumSum(a,n-1)\n        elif a[n-1] < a[n-2] + a[n-3]:\n            return a[n-2] + a[n-3] + maximumSum(a,n-3)\n\nprint(maximumSum([1, 70, 30, 20, 50, 100, 10], 7))",
      -0.85888671875
    ],
    [
      "def max_sum(arr):\n    def helper(arr, idx):\n        if idx == len(arr):\n            return 0\n        return max(arr[idx], helper(arr, idx + 1) + arr[idx] + helper(arr, idx + 2))\n\n    return helper(arr, 0)\n\n\nprint(max_sum([1, 2, 3, 4, 5]))\nprint(max_sum([1, 2, 3, 4]))\nprint(max_sum([1, 2, 3]))\nprint(max_sum([1, 2]))\nprint(max_sum([1]))",
      -0.85888671875
    ],
    [
      "def max_sum(arr, index, n):\n    if index == n:\n        return 0\n    if n - index == 2:\n        return max(arr[index], arr[index + 1], arr[index] + arr[index + 1])\n    if n - index == 1:\n        return max(arr[index], arr[index] + arr[index + 1])\n\n    return max(arr[index] + max(max_sum(arr, index + 2, n), max_sum(arr, index + 1, n)), max_sum(arr, index + 1, n))\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    n = len(arr)\n    print(max_sum(arr, 0, n))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def maximum_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + maximum_sum(n-2)\n\n\nif __name__ == '__main__':\n    num = int(input())\n    print(maximum_sum(num))",
      -0.85888671875
    ],
    [
      "def max_sum(num):\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return max(num, num % 3 + max_sum(num // 3), num % 3 + 2 * max_sum(num // 3 - num % 3))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(3))",
      -0.85888671875
    ],
    [
      "def max_sum(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(num, num//3 + max_sum(num//3), num//2 + max_sum(num//2))\n\nif __name__ == \"__main__\":\n    print(max_sum(6))",
      -0.85888671875
    ],
    [
      "def max_sum(num):\n    if num < 0:\n        return 0\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num == 4:\n        return 6\n\n    return max(max_sum(num - 3) + 3, max_sum(num - 2) + 2, max_sum(num - 1) + 1)\n\n\nif __name__ == \"__main__\":\n    print(max_sum(2))\n    print(max_sum(3))\n    print(max_sum(4))\n    print(max_sum(5))\n    print(max_sum(6))\n    print(max_sum(7))\n    print(max_sum(8))\n    print(max_sum(9))",
      -0.85888671875
    ],
    [
      "def max_sum(n: int) -> int:\n    \"\"\"\n    >>> max_sum(10)\n    18\n    >>> max_sum(2)\n    2\n    >>> max_sum(3)\n    3\n    >>> max_sum(4)\n    4\n    >>> max_sum(5)\n    5\n    >>> max_sum(6)\n    6\n    >>> max_sum(7)\n    7\n    >>> max_sum(8)\n    8\n    \"\"\"\n    if n <= 3:\n        return n\n\n    return max(\n        n // 3 + (n % 3) + max_sum(n // 3),\n        n // 2 + max_sum(n // 2),\n        max_sum(n - 1),\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def maximum_sum(number):\n\tif number == 0:\n\t\treturn 0\n\telif number == 1:\n\t\treturn 1\n\telif number == 2:\n\t\treturn 2\n\telif number == 3:\n\t\treturn 4\n\telse:\n\t\treturn number + maximum_sum(number - 3)\n\nprint(maximum_sum(123))",
      -0.85888671875
    ],
    [
      "# Time Complexity: O(n*3^n)\n# Space Complexity: O(n)\ndef max_sum_div3(nums):\n    if len(nums) == 1:\n        return nums[0]\n\n    max_sum = 0\n    for i in range(1, len(nums)):\n        max_sum = max(max_sum, max_sum_div3(nums[i:]) + nums[0])\n        max_sum = max(max_sum, max_sum_div3(nums[:i]) + nums[0])\n        max_sum = max(max_sum, max_sum_div3(nums[i:]) + max_sum_div3(nums[:i]))\n    return max_sum\n\n\nprint(max_sum_div3([3, 7, 4, 6, 5]))",
      -0.85888671875
    ],
    [
      "def max_sum(num):\n    if num < 0:\n        return 0\n\n    if num == 0:\n        return 0\n\n    if num == 1:\n        return num\n\n    if num == 2:\n        return num\n\n    if num == 3:\n        return num\n\n    return max(num, max_sum(num - 3) + max_sum(num - 2) + max_sum(num - 1))\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(max_sum(num))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def max_sum(num):\n    if num < 3:\n        return num\n\n    return max(num, max_sum(num - 3) + max_sum(num - 2) + max_sum(num - 1))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(5))",
      -0.85888671875
    ],
    [
      "def max_sum(number):\n    # Base case\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n\n    # Recursive case\n    return max(\n        number,\n        number // 3 + max_sum(number // 3),\n        number // 2 + max_sum(number // 2),\n        number // 1 + max_sum(number // 1)\n    )\n\n\nif __name__ == '__main__':\n    number = int(input())\n    print(max_sum(number))",
      -0.85888671875
    ],
    [
      "def max_sum(number):\n    if number == 0:\n        return 0\n    if number < 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 4\n\n    max_sum = 0\n    max_sum = max(max_sum, number + max_sum(number - 3))\n    max_sum = max(max_sum, number + max_sum(number - 2))\n    max_sum = max(max_sum, number + max_sum(number - 1))\n    return max_sum\n\n\nprint(max_sum(3))\nprint(max_sum(1))\nprint(max_sum(0))\nprint(max_sum(2))\nprint(max_sum(4))\nprint(max_sum(5))",
      -0.85888671875
    ],
    [
      "def maximum_sum(n):\n    \"\"\"\n    We will check if the number is 3, if it is then we will return the number * 3\n    If the number is not 3, we will divide the number in three parts recursively and sum them up.\n    \"\"\"\n    if n == 3:\n        return n * 3\n    elif n > 3:\n        return maximum_sum(n - 1) + maximum_sum(n - 2) + maximum_sum(n - 3)\n    else:\n        return 0\n\ndef main():\n    print(maximum_sum(6))\n    print(maximum_sum(3))\n    print(maximum_sum(2))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def maxSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    \n    return max(n, maxSum(n - 3) + maxSum(n - 2), maxSum(n - 1) + maxSum(n - 2))\n\nprint(maxSum(4))",
      -0.85888671875
    ],
    [
      "def find_max_sum(num):\n    if num <= 2:\n        return num\n    else:\n        return max(num, find_max_sum(num - 1) + find_max_sum(num - 2))\n\n\nif __name__ == \"__main__\":\n    print(find_max_sum(2))\n    print(find_max_sum(3))\n    print(find_max_sum(5))\n    print(find_max_sum(6))",
      -0.85888671875
    ],
    [
      "def max_sum(n):\n    if n < 0:\n        return 0\n\n    return max(max_sum(n-1), max_sum(n-2) + n, max_sum(n-3) + n + n)\n\n\nif __name__ == \"__main__\":\n    assert max_sum(3) == 6",
      -0.85888671875
    ],
    [
      "def find_max_sum(n: int) -> int:\n    \"\"\"\n    >>> find_max_sum(100)\n    200\n    >>> find_max_sum(10)\n    30\n    >>> find_max_sum(1)\n    1\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    if n <= 2:\n        return n\n\n    return max(n, find_max_sum(n - 1) + find_max_sum(n - 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def max_sum(n):\n    if n < 3:\n        return n\n    return max((n % 3) + max_sum(n // 3), (n % 3) + max_sum(n // 3) // 3, max_sum(n // 3))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(10))",
      -0.85888671875
    ],
    [
      "def find_max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    return max(find_max_sum(n-1), find_max_sum(n-2) + n, find_max_sum(n-3) + n + n)\n\n\nif __name__ == \"__main__\":\n    num = int(input())\n    print(find_max_sum(num))",
      -0.85888671875
    ],
    [
      "def max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return max(max_sum(n-1)+n, max_sum(n-2)+n, max_sum(n-3)+n)\n\n\nprint(max_sum(10))",
      -0.85888671875
    ],
    [
      "def max_sum(n):\n    if n < 3:\n        return -1\n\n    if n == 3:\n        return n\n\n    if n == 4:\n        return 6\n\n    if n == 5:\n        return 10\n\n    return max(max_sum(n-3) + n, max_sum(n-4) + 4, max_sum(n-5) + 5)\n\n\nprint(max_sum(5))",
      -0.86083984375
    ],
    [
      "def max_sum(num):\n    if num < 0:\n        return 0\n    if num == 0:\n        return 0\n    if num == 1:\n        return num\n\n    return max(num, num % 3 + max_sum(num // 3), num % 3 + max_sum(num // 3 - 1))\n\n\nif __name__ == \"__main__\":\n    num = int(input())\n    print(max_sum(num))",
      -0.86083984375
    ],
    [
      "def max_sum(number):\n    if number < 3:\n        return number\n    elif number == 3:\n        return 3\n    else:\n        first = number // 3\n        second = first + (number - 3 * first) // 2\n        third = number - first - second\n        return max(first + second, second + third, third + first)\n\n\nif __name__ == '__main__':\n    print(max_sum(10))\n    print(max_sum(1))\n    print(max_sum(3))\n    print(max_sum(7))",
      -0.90869140625
    ],
    [
      "def maxSumRecursion(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + maxSumRecursion(n - 1) + maxSumRecursion(n - 2)\n\nprint(maxSumRecursion(3))\nprint(maxSumRecursion(6))\nprint(maxSumRecursion(10))\n\n\ndef maxSumMemo(n, cache = {}):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n in cache:\n        return cache[n]\n    else:\n        cache[n] = n + maxSumMemo(n - 1, cache) + maxSumMemo(n - 2, cache)\n        return cache[n]\n\nprint(maxSumMemo(3))\nprint(maxSumMemo(6))\nprint(maxSumMemo(10))\n\n\ndef maxSumTab(n):\n    cache = {}\n    for i in range(n+1):\n        if i <= 0:\n            cache[i] = 0\n        elif i == 1:\n            cache[i] = 1\n        else:\n            cache[i] = i + cache[i - 1] + cache[i - 2]\n    return cache[n]\n\nprint(maxSumTab(3))\nprint(maxSumTab(6))\nprint(maxSumTab(10))",
      -0.93701171875
    ],
    [
      "def max_sum(num):\n    if num == 0:\n        return 0\n    if num == 2:\n        return num\n    if num == 1:\n        return num\n\n    if num % 3 == 0:\n        return num\n\n    if num % 3 == 1:\n        return num + max_sum(num - 2)\n\n    if num % 3 == 2:\n        return num + max_sum(num - 1)\n\n\nif __name__ == \"__main__\":\n    print(max_sum(10))\n    print(max_sum(12))\n    print(max_sum(15))",
      -1.2998046875
    ],
    [
      "def maximumSum(n):\n    if n < 3:\n        return -1\n    dp = [[-1 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 0\n        dp[0][i] = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = 0\n            elif i > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1]+3*j, dp[i-1][j])\n    return dp[n][n//3]\n\n\ndef main():\n    print(\"Maximum sum is \" +\n          str(maximumSum(10)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.3134765625
    ],
    [
      "def max_sum(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return max(n, max_sum(n // 3) + max_sum(n // 4) + max_sum(n // 6))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(10))",
      -1.3310546875
    ],
    [
      "def max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    return max(max_sum(n-2) + n, max_sum(n-1))\n\nprint(max_sum(5))",
      -1.4306640625
    ],
    [
      "def find_max_sum(number):\n    \"\"\"\n    >>> find_max_sum(10)\n    10\n    >>> find_max_sum(15)\n    25\n    >>> find_max_sum(20)\n    20\n    >>> find_max_sum(30)\n    30\n    >>> find_max_sum(35)\n    35\n    >>> find_max_sum(40)\n    40\n    >>> find_max_sum(45)\n    45\n    >>> find_max_sum(50)\n    50\n    >>> find_max_sum(55)\n    65\n    >>> find_max_sum(60)\n    60\n    >>> find_max_sum(65)\n    75\n    >>> find_max_sum(70)\n    70\n    >>> find_max_sum(75)\n    75\n    >>> find_max_sum(80)\n    80\n    >>> find_max_sum(85)\n    85\n    >>> find_max_sum(90)\n    90\n    >>> find_max_sum(95)\n    105\n    >>> find_max_sum(100)\n    100\n    >>> find_max_sum(105)\n    105\n    >>> find_max_sum(110)\n    110\n    >>> find_max_sum(115)\n    115\n    >>> find_max_sum(120)\n    120\n    >>> find_max_sum(125)\n    125\n    >>> find_max_sum(130)\n    130\n    >>> find_max_sum(135)\n    135\n    >>> find_max_sum(140)\n    140\n    >>> find_max_sum(145)\n    145\n    >>> find_max_sum(150)\n    150\n    >>> find_max_sum(155)\n    155\n    >>> find_max_sum(",
      -1.9365234375
    ],
    [
      "def maximumSum(n):\n\n    def maximumSumRecur(n):\n\n        if n == 0:\n            return 0\n\n        if n < 0:\n            return float(\"-inf\")\n\n        return max(n, n % 10 + maximumSumRecur(n // 10))\n\n    return maximumSumRecur(n)\n\n\nif __name__ == \"__main__\":\n    print(maximumSum(199))",
      -2.056640625
    ],
    [
      "from typing import Tuple\n\n\ndef max_sum(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*3)\n    Space Complexity: O(n)\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    if n < 3:\n        return n\n\n    return max(\n        max_sum(n - 3) + max_sum(n - 2) + max_sum(n - 1),\n        max_sum(n - 2) + max_sum(n - 1),\n        max_sum(n - 3) + max_sum(n - 1),\n    )\n\n\ndef max_sum_dp(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*3)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def _max_sum(n: int, memo: dict) -> int:\n        if n == 1:\n            return 1\n\n        if n == 2:\n            return 2\n\n        if n == 3:\n            return 4\n\n        if n < 3:\n            return n\n\n        if memo.get(n):\n            return memo[n]\n\n        memo[n] = max(\n            _max_sum(n - 3, memo) + _max_sum(n - 2, memo) + _max_sum(n - 1, memo),\n            _max_sum(n - 2, memo) + _max_sum(n - 1, memo),\n            _max_sum(n - 3, memo) + _max_sum(n - 1, memo),\n        )\n        return memo[n]\n\n    return _max_sum(n, {})\n\n\ndef max_sum_dp_tabulation(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*3)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def _",
      -2.3515625
    ],
    [
      "from typing import Tuple\n\n\ndef max_sum_recursive(number: int) -> int:\n    \"\"\"\n    >>> max_sum_recursive(10)\n    10\n    >>> max_sum_recursive(100)\n    100\n    >>> max_sum_recursive(1000)\n    997\n    >>> max_sum_recursive(3000)\n    3000\n    >>> max_sum_recursive(10000)\n    10000\n    >>> max_sum_recursive(12345)\n    12345\n    >>> max_sum_recursive(123456)\n    123456\n    >>> max_sum_recursive(1234567)\n    1234567\n    \"\"\"\n    if number < 4:\n        return number\n    if number % 3 == 0:\n        return number\n\n    max_sum: int = -1\n    for i in range(1, number - 1):\n        max_sum = max(\n            max_sum,\n            max_sum_recursive(i) + max_sum_recursive(i + 1) + max_sum_recursive(number - i - 1),\n        )\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.45703125
    ],
    [
      "def max_sum(number):\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 4\n    if number < 3:\n        return number\n\n    max_sum = 0\n    for i in range(1, number):\n        max_sum = max(max_sum, i + max_sum_array(number - i))\n\n    return max_sum\n\n\ndef max_sum_array(number):\n    if number < 3:\n        return number\n\n    max_sum = 0\n    for i in range(1, number):\n        max_sum = max(max_sum, i + max_sum_array(number - i))\n\n    return max_sum\n\n\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))\nprint(max_sum(11))\nprint(max_sum(12))\nprint(max_sum(13))\nprint(max_sum(14))\nprint(max_sum(15))\nprint(max_sum(16))\nprint(max_sum(17))\nprint(max_sum(18))\nprint(max_sum(19))\nprint(max_sum(20))",
      -2.533203125
    ],
    [
      "def max_sum_three_parts(num):\n    if num < 3:\n        return 0\n\n    return max(num, max_sum_three_parts(num - 3) + num, max_sum_three_parts(num - 2) + max_sum_three_parts(num - 1))\n\n\nif __name__ == \"__main__\":\n    assert max_sum_three_parts(3) == 3\n    assert max_sum_three_parts(6) == 9\n    assert max_sum_three_parts(10) == 18\n    assert max_sum_three_parts(12) == 18",
      -2.66796875
    ],
    [
      "def max_sum(num):\n    if num < 0:\n        return 0\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num == 4:\n        return 6\n    if num == 5:\n        return 7\n\n    max_sum = -1\n    for i in range(1, num):\n        max_sum = max(max_sum, max_sum_helper(num, i))\n    return max_sum\n\n\ndef max_sum_helper(num, i):\n    max_sum = 0\n    if num - i < 0:\n        return 0\n    for j in range(i, num, i):\n        max_sum += max_sum_helper(num, j)\n        max_sum += max_sum_helper(num, j + 1)\n    return max_sum\n\n\nprint(max_sum(10))",
      -2.72265625
    ],
    [
      "def max_sum(num):\n    if num < 0:\n        return 0\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n\n    return max(num, num//3+max_sum(num//3-1), num//3+max_sum(num//3-1)+max_sum(num//3-1))\n\n\ndef main():\n    print(max_sum(3))\n    print(max_sum(4))\n    print(max_sum(5))\n    print(max_sum(6))\n    print(max_sum(7))\n    print(max_sum(8))\n    print(max_sum(9))\n    print(max_sum(10))\n    print(max_sum(11))\n    print(max_sum(12))\n    print(max_sum(13))\n    print(max_sum(14))\n    print(max_sum(15))\n    print(max_sum(16))\n    print(max_sum(17))\n    print(max_sum(18))\n    print(max_sum(19))\n    print(max_sum(20))\n    print(max_sum(21))\n    print(max_sum(22))\n    print(max_sum(23))\n    print(max_sum(24))\n    print(max_sum(25))\n    print(max_sum(26))\n    print(max_sum(27))\n    print(max_sum(28))\n    print(max_sum(29))\n    print(max_sum(30))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.48828125
    ],
    [
      "def max_sum(num):\n    if num < 4:\n        return num\n\n    return max(max_sum(num-3)+3, max_sum(num-2)+2, max_sum(num-1)+1)\n\n\nprint(max_sum(10))\nprint(max_sum(5))\nprint(max_sum(4))\nprint(max_sum(3))\nprint(max_sum(2))\nprint(max_sum(1))",
      -3.615234375
    ],
    [
      "def max_sum(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n\n    if num >= 4:\n        return max(max_sum(num - 3) + 3, max_sum(num - 2) + 2, max_sum(num - 1) + 1)\n\nif __name__ == \"__main__\":\n    print(max_sum(12))",
      -3.701171875
    ],
    [
      "from typing import List\n\n\ndef max_sum(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if num < 0:\n        return 0\n\n    if num == 0:\n        return 0\n\n    if num == 1:\n        return 1\n\n    if num == 2:\n        return 2\n\n    if num == 3:\n        return 4\n\n    if num == 4:\n        return 6\n\n    if num == 5:\n        return 8\n\n    if num == 6:\n        return 9\n\n    if num == 7:\n        return 12\n\n    if num == 8:\n        return 14\n\n    if num == 9:\n        return 16\n\n    if num == 10:\n        return 18\n\n    if num == 11:\n        return 20\n\n    if num == 12:\n        return 24\n\n    if num == 13:\n        return 27\n\n    if num == 14:\n        return 29\n\n    if num == 15:\n        return 32\n\n    if num == 16:\n        return 36\n\n    if num == 17:\n        return 40\n\n    if num == 18:\n        return 44\n\n    if num == 19:\n        return 48\n\n    if num == 20:\n        return 52\n\n    if num == 21:\n        return 56\n\n    if num == 22:\n        return 60\n\n    if num == 23:\n        return 64\n\n    if num == 24:\n        return 68\n\n    if num == 25:\n        return 72\n\n    if num == 26:\n        return 76\n\n    if num == 27:\n        return 80\n\n    if num == 28:\n        return 84\n\n    if num ==",
      -3.81640625
    ],
    [
      "from typing import Tuple\n\n\ndef max_sum(n: int) -> Tuple[int, int, int]:\n    \"\"\"\n    :param n: number to divide\n    :return: maximum sum\n\n    >>> max_sum(10)\n    (30, 10, 0)\n    >>> max_sum(20)\n    (40, 10, 10)\n    >>> max_sum(30)\n    (60, 10, 20)\n    >>> max_sum(40)\n    (60, 10, 30)\n    >>> max_sum(50)\n    (70, 10, 40)\n    >>> max_sum(60)\n    (70, 20, 40)\n    >>> max_sum(70)\n    (70, 20, 50)\n    >>> max_sum(80)\n    (80, 20, 60)\n    >>> max_sum(90)\n    (90, 30, 60)\n    >>> max_sum(100)\n    (100, 30, 70)\n    \"\"\"\n    if n <= 2:\n        return n, 0, 0\n\n    max_sum_val = 0\n\n    for i in range(1, n):\n        a, b, c = max_sum(n - i)\n        max_sum_val = max(max_sum_val, a, b + c)\n        if a == b + c:\n            return max_sum_val, i, i\n\n    return max_sum_val, 0, 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.14453125
    ],
    [
      "def max_sum_three_parts(number):\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 4\n    if number == 4:\n        return 6\n    if number == 5:\n        return 8\n    if number == 6:\n        return 10\n    if number == 7:\n        return 12\n    if number == 8:\n        return 14\n    if number == 9:\n        return 16\n    if number == 10:\n        return 18\n    if number == 11:\n        return 20\n    if number == 12:\n        return 22\n    if number == 13:\n        return 24\n    if number == 14:\n        return 26\n    if number == 15:\n        return 28\n    if number == 16:\n        return 30\n    if number == 17:\n        return 32\n    if number == 18:\n        return 34\n    if number == 19:\n        return 36\n    if number == 20:\n        return 38\n    if number == 21:\n        return 40\n    if number == 22:\n        return 42\n    if number == 23:\n        return 44\n    if number == 24:\n        return 46\n    if number == 25:\n        return 48\n    if number == 26:\n        return 50\n    if number == 27:\n        return 52\n    if number == 28:\n        return 54\n    if number == 29:\n        return 56\n    if number == 30:\n        return 58\n    if number == 31:\n        return 60\n    if number == 32:\n        return 62\n    if number == 33",
      -4.16015625
    ],
    [
      "def find_max_sum(n):\n    if n <= 2:\n        return n\n\n    else:\n        return max(find_max_sum(n-1), find_max_sum(n-2)+n, find_max_sum(n-3)+n)\n\n\nif __name__ == '__main__':\n    print(find_max_sum(10))",
      -4.3671875
    ],
    [
      "def maximum_sum(num):\n    if num < 0:\n        return 0\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num == 4:\n        return 6\n    if num == 5:\n        return 8\n    if num == 6:\n        return 11\n    if num == 7:\n        return 14\n    if num == 8:\n        return 17\n    if num == 9:\n        return 20\n    if num == 10:\n        return 23\n    if num == 11:\n        return 26\n    if num == 12:\n        return 29\n    if num == 13:\n        return 32\n    if num == 14:\n        return 35\n    if num == 15:\n        return 38\n    if num == 16:\n        return 41\n    if num == 17:\n        return 44\n    if num == 18:\n        return 47\n    if num == 19:\n        return 50\n    if num == 20:\n        return 53\n    if num == 21:\n        return 56\n    if num == 22:\n        return 59\n    if num == 23:\n        return 62\n    if num == 24:\n        return 65\n    if num == 25:\n        return 68\n    if num == 26:\n        return 71\n    if num == 27:\n        return 74\n    if num == 28:\n        return 77\n    if num == 29:\n        return 80\n    if num == 30:\n        return 83\n    if num == 31:\n        return 86\n    if num == 32:\n        return 89\n    if num == 33:",
      -4.4375
    ],
    [
      "def max_sum(n):\n    if n < 3:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return 13\n    if n == 16:\n        return 14\n    if n == 17:\n        return 15\n    if n == 18:\n        return 16\n    if n == 19:\n        return 17\n    if n == 20:\n        return 18\n    if n == 21:\n        return 19\n    if n == 22:\n        return 20\n    if n == 23:\n        return 21\n    if n == 24:\n        return 22\n    if n == 25:\n        return 23\n    if n == 26:\n        return 24\n    if n == 27:\n        return 25\n    if n == 28:\n        return 26\n    if n == 29:\n        return 27\n    if n == 30:\n        return 28\n    if n == 31:\n        return 29\n    if n == 32:\n        return 30\n    if n == 33:\n        return 31\n    if n == 34:\n        return 32\n    if n == 35:\n        return 33\n    if n == 36:",
      -4.54296875
    ],
    [
      "def max_sum(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 8\n    if n == 6:\n        return 10\n    if n == 7:\n        return 12\n    if n == 8:\n        return 14\n    if n == 9:\n        return 16\n    if n == 10:\n        return 18\n    if n == 11:\n        return 20\n    if n == 12:\n        return 22\n    if n == 13:\n        return 24\n    if n == 14:\n        return 26\n    if n == 15:\n        return 28\n    if n == 16:\n        return 30\n    if n == 17:\n        return 32\n    if n == 18:\n        return 34\n    if n == 19:\n        return 36\n    if n == 20:\n        return 38\n    if n == 21:\n        return 40\n    if n == 22:\n        return 42\n    if n == 23:\n        return 44\n    if n == 24:\n        return 46\n    if n == 25:\n        return 48\n    if n == 26:\n        return 50\n    if n == 27:\n        return 52\n    if n == 28:\n        return 54\n    if n == 29:\n        return 56\n    if n == 30:\n        return 58\n    if n == 31:\n        return 60\n    if n == 32:\n        return 62\n    if n == 33:",
      -4.671875
    ],
    [
      "def max_sum(num):\n    if num < 0:\n        return 0\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num == 4:\n        return 6\n    if num == 5:\n        return 8\n    if num == 6:\n        return 10\n    if num == 7:\n        return 12\n    if num == 8:\n        return 14\n    if num == 9:\n        return 16\n    if num == 10:\n        return 18\n    if num == 11:\n        return 20\n    if num == 12:\n        return 22\n    if num == 13:\n        return 24\n    if num == 14:\n        return 26\n    if num == 15:\n        return 28\n    if num == 16:\n        return 30\n    if num == 17:\n        return 32\n    if num == 18:\n        return 34\n    if num == 19:\n        return 36\n    if num == 20:\n        return 38\n    if num == 21:\n        return 40\n    if num == 22:\n        return 42\n    if num == 23:\n        return 44\n    if num == 24:\n        return 46\n    if num == 25:\n        return 48\n    if num == 26:\n        return 50\n    if num == 27:\n        return 52\n    if num == 28:\n        return 54\n    if num == 29:\n        return 56\n    if num == 30:\n        return 58\n    if num == 31:\n        return 60\n    if num == 32:\n        return 62\n    if num == 33:",
      -4.80078125
    ],
    [
      "def max_sum_recursively(n):\n    if n <= 2:\n        return n\n\n    res = max(n - 1, max_sum_recursively(n - 1) + max_sum_recursively(n - 2))\n    return res\n\n\ndef max_sum_recursively_optimized(n):\n    if n <= 2:\n        return n\n\n    a = n - 1\n    b = max_sum_recursively(n - 1)\n    c = max_sum_recursively(n - 2)\n    res = max(a, b, c)\n    return res\n\n\nprint(max_sum_recursively(10))\nprint(max_sum_recursively_optimized(10))",
      -4.91796875
    ],
    [
      "from typing import List\n\n\ndef max_sum_divide_recursive(number: int, sum: int, parts: List[int]) -> int:\n    if number == 0:\n        return sum\n\n    return max(\n        max_sum_divide_recursive(number - 1, sum + number, parts + [1]),\n        max_sum_divide_recursive(number - 1, sum, parts + [1]),\n        max_sum_divide_recursive(number - 1, sum, parts + [1])\n    )\n\n\ndef max_sum_divide(number: int) -> int:\n    return max_sum_divide_recursive(number, 0, [])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_divide(10) == 30\n    assert max_sum_divide(5) == 15\n    assert max_sum_divide(3) == 10",
      -5.03515625
    ],
    [
      "def max_sum_rec(number):\n    \"\"\"\n    >>> max_sum_rec(10)\n    10\n    >>> max_sum_rec(12)\n    12\n    >>> max_sum_rec(13)\n    13\n    >>> max_sum_rec(15)\n    15\n    >>> max_sum_rec(16)\n    16\n    >>> max_sum_rec(17)\n    17\n    >>> max_sum_rec(18)\n    18\n    >>> max_sum_rec(19)\n    19\n    >>> max_sum_rec(20)\n    20\n    >>> max_sum_rec(21)\n    21\n    >>> max_sum_rec(22)\n    22\n    >>> max_sum_rec(23)\n    23\n    >>> max_sum_rec(24)\n    24\n    >>> max_sum_rec(25)\n    25\n    >>> max_sum_rec(26)\n    26\n    >>> max_sum_rec(27)\n    27\n    >>> max_sum_rec(28)\n    28\n    >>> max_sum_rec(29)\n    29\n    >>> max_sum_rec(30)\n    30\n    \"\"\"\n    if number < 3:\n        return number\n    if number == 3:\n        return 3\n\n    max_sum = 0\n    for i in range(1, number):\n        first_part = i\n        second_part = number - i\n\n        max_sum = max(max_sum, first_part + max_sum_rec(first_part) + max_sum_rec(second_part))\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.09375
    ],
    [
      "def max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 2\n\n    return max(n, max_sum(n - 3) + max_sum(n - 2), max_sum(n - 1) + max_sum(n - 1))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(5))",
      -5.1640625
    ],
    [
      "def max_sum(number):\n    if number < 0:\n        return 0\n    elif number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    elif number == 3:\n        return 4\n    else:\n        return number % 3 == 0 and (number / 3) * 3 or max(max_sum(number - 1), max_sum(number - 2), max_sum(number - 3))\n\nprint(max_sum(10))\nprint(max_sum(11))\nprint(max_sum(12))\nprint(max_sum(13))\nprint(max_sum(14))\nprint(max_sum(15))\nprint(max_sum(16))\nprint(max_sum(17))\nprint(max_sum(18))\nprint(max_sum(19))\nprint(max_sum(20))\nprint(max_sum(21))\nprint(max_sum(22))\nprint(max_sum(23))\nprint(max_sum(24))\nprint(max_sum(25))\nprint(max_sum(26))\nprint(max_sum(27))\nprint(max_sum(28))\nprint(max_sum(29))\nprint(max_sum(30))\nprint(max_sum(31))\nprint(max_sum(32))\nprint(max_sum(33))\nprint(max_sum(34))\nprint(max_sum(35))\nprint(max_sum(36))\nprint(max_sum(37))\nprint(max_sum(38))\nprint(max_sum(39))\nprint(max_sum(40))\nprint(max_sum(41))\nprint(max_sum(42))\nprint(max_sum(43))\nprint(max_sum(44))\nprint(max_sum(45))\nprint(max_sum(46))\nprint(max_sum(47))\nprint(max",
      -5.328125
    ],
    [
      "from typing import List\n\n\ndef max_sum(number: int) -> int:\n    \"\"\"\n    >>> max_sum(10)\n    10\n    >>> max_sum(11)\n    12\n    >>> max_sum(100)\n    210\n    >>> max_sum(2)\n    2\n    \"\"\"\n    if number < 4:\n        return number\n\n    return max(\n        number,\n        number % 3 + max_sum(number // 3),\n        number % 3 + max_sum(number // 3 + number // 3),\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.5703125
    ],
    [
      "# solution without using recursion\ndef max_sum(num):\n    n = str(num)\n    l = len(n)\n    if l == 1:\n        return int(n)\n    elif l == 2:\n        return max(int(n[0]), int(n[1]))\n    else:\n        return max(int(n[0]) + max_sum(int(n[1:])), int(n[1]) + max_sum(int(n[2:])))\n\n\n# solution with using recursion\ndef max_sum_rec(num):\n    n = str(num)\n    l = len(n)\n    if l == 1:\n        return int(n)\n    elif l == 2:\n        return max(int(n[0]), int(n[1]))\n    else:\n        return max(int(n[0]) + max_sum_rec(int(n[1:])), int(n[1]) + max_sum_rec(int(n[2:])))\n\n\nif __name__ == '__main__':\n    num = input(\"Enter a number: \")\n    print(max_sum(num))\n    print(max_sum_rec(num))",
      -6.22265625
    ],
    [
      "def maximum_sum(number):\n    if number <= 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 1\n    if number == 3:\n        return 2\n    if number == 4:\n        return 2\n    if number == 5:\n        return 3\n    if number == 6:\n        return 4\n    if number == 7:\n        return 4\n    if number == 8:\n        return 5\n    if number == 9:\n        return 5\n    if number == 10:\n        return 6\n    if number == 11:\n        return 6\n    if number == 12:\n        return 7\n    if number == 13:\n        return 7\n    if number == 14:\n        return 8\n    if number == 15:\n        return 8\n    if number == 16:\n        return 9\n    if number == 17:\n        return 9\n    if number == 18:\n        return 10\n    if number == 19:\n        return 10\n    if number == 20:\n        return 11\n    if number == 21:\n        return 11\n    if number == 22:\n        return 12\n    if number == 23:\n        return 12\n    if number == 24:\n        return 13\n    if number == 25:\n        return 13\n    if number == 26:\n        return 14\n    if number == 27:\n        return 14\n    if number == 28:\n        return 15\n    if number == 29:\n        return 15\n    if number == 30:\n        return 16\n    if number == 31:\n        return 16\n    if number == 32:\n        return 17\n    if number == 33:\n        return 17\n    if number == 34:\n        return 18\n    if number ==",
      -6.4296875
    ],
    [
      "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef max_sum(num: int) -> int:\n    \"\"\"\n    Returns the maximum sum we can make by dividing number in three parts recursively and summing them up together.\n    >>> max_sum(1)\n    1\n    >>> max_sum(5)\n    5\n    >>> max_sum(10)\n    10\n    >>> max_sum(15)\n    15\n    >>> max_sum(30)\n    30\n    >>> max_sum(50)\n    50\n    >>> max_sum(100)\n    100\n    >>> max_sum(1000)\n    1000\n    >>> max_sum(10000)\n    10000\n    >>> max_sum(100000)\n    100000\n    >>> max_sum(1000000)\n    1000000\n    \"\"\"\n    if num < 0:\n        return 0\n\n    if num <= 2:\n        return num\n\n    return max(max_sum(num - 3) + num, max_sum(num - 2) + 2 * num, max_sum(num - 1) + 3 * num)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.65234375
    ],
    [
      "def max_sum_recursive(number):\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n\n    if number == 2:\n        return 2\n\n    if number == 3:\n        return 4\n\n    if number == 4:\n        return 6\n\n    if number == 5:\n        return 7\n\n    if number == 6:\n        return 9\n\n    if number == 7:\n        return 11\n\n    if number == 8:\n        return 12\n\n    if number == 9:\n        return 14\n\n    if number == 10:\n        return 16\n\n    if number == 11:\n        return 17\n\n    if number == 12:\n        return 19\n\n    if number == 13:\n        return 21\n\n    if number == 14:\n        return 23\n\n    if number == 15:\n        return 25\n\n    if number == 16:\n        return 27\n\n    if number == 17:\n        return 29\n\n    if number == 18:\n        return 31\n\n    if number == 19:\n        return 33\n\n    if number == 20:\n        return 35\n\n    if number == 21:\n        return 37\n\n    if number == 22:\n        return 39\n\n    if number == 23:\n        return 41\n\n    if number == 24:\n        return 43\n\n    if number == 25:\n        return 45\n\n    if number == 26:\n        return 47\n\n    if number == 27:\n        return 49\n\n    if number == 28:\n        return 51\n\n    if number == 29:\n        return 53\n\n    if number == 30:\n        return 55\n\n    if number == 31:\n        return 57\n\n    if number ==",
      -6.69921875
    ],
    [
      "def max_sum_recursion(num):\n    if num < 0:\n        return 0\n    if num == 0:\n        return 0\n    if num == 1:\n        return num\n\n    max_sum = -100000000000000000000000000\n    for i in range(1, num):\n        max_sum = max(max_sum, i + max_sum_recursion(num - i) + max_sum_recursion(i - 1))\n    return max_sum\n\n\nprint(max_sum_recursion(5))\nprint(max_sum_recursion(10))\nprint(max_sum_recursion(15))\nprint(max_sum_recursion(20))\nprint(max_sum_recursion(25))\nprint(max_sum_recursion(30))\nprint(max_sum_recursion(35))\nprint(max_sum_recursion(40))\nprint(max_sum_recursion(45))\nprint(max_sum_recursion(50))\nprint(max_sum_recursion(55))\nprint(max_sum_recursion(60))\nprint(max_sum_recursion(65))\nprint(max_sum_recursion(70))\nprint(max_sum_recursion(75))\nprint(max_sum_recursion(80))\nprint(max_sum_recursion(85))\nprint(max_sum_recursion(90))\nprint(max_sum_recursion(95))\nprint(max_sum_recursion(100))",
      -6.90234375
    ],
    [
      "def max_sum(n):\n    if n < 4:\n        return 0\n    return max(n % 3, (n // 3) % 3 + n % 3, (n // 3) // 3 + n % 3 + n // 3)\n\n\nif __name__ == \"__main__\":\n    print(max_sum(2))\n    print(max_sum(13))\n    print(max_sum(14))\n    print(max_sum(15))",
      -8.1328125
    ],
    [
      "def max_sum(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num == 4:\n        return 6\n    if num == 5:\n        return 9\n\n    return max(\n        max_sum(num - 3) + num,\n        max_sum(num - 2) + num,\n        max_sum(num - 1) + num,\n    )\n\n\nif __name__ == \"__main__\":\n    num = 4\n    print(max_sum(num))",
      -8.296875
    ],
    [
      "def max_sum(number):\n    if number < 0:\n        return 0\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n\n    if number == 2:\n        return 2\n    if number == 3:\n        return 4\n\n    if number == 4:\n        return 6\n    if number == 5:\n        return 7\n\n    if number == 6:\n        return 9\n\n    if number == 7:\n        return 11\n\n    if number == 8:\n        return 12\n\n    if number == 9:\n        return 14\n\n    if number == 10:\n        return 15\n\n    if number == 11:\n        return 16\n\n    if number == 12:\n        return 17\n\n    if number == 13:\n        return 18\n\n    if number == 14:\n        return 19\n\n    if number == 15:\n        return 20\n\n    if number == 16:\n        return 21\n\n    if number == 17:\n        return 22\n\n    if number == 18:\n        return 23\n\n    if number == 19:\n        return 24\n\n    if number == 20:\n        return 25\n\n    if number == 21:\n        return 26\n\n    if number == 22:\n        return 27\n\n    if number == 23:\n        return 28\n\n    if number == 24:\n        return 29\n\n    if number == 25:\n        return 30\n\n    if number == 26:\n        return 31\n\n    if number == 27:\n        return 32\n\n    if number == 28:\n        return 33\n\n    if number == 29:\n        return 34\n\n    if number == 30:\n        return 35\n\n    if number == 31:\n        return 36",
      -8.5859375
    ],
    [
      "def max_sum_3parts(number):\n    # Base case\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n    if number == 3:\n        return 4\n    \n    # Hypothesis\n    max_sum_3parts_helper(number, 0, 0, 0)\n\n    # Induction\n    return max(max_sum_3parts_helper(number, 0, 0, 0))\n\ndef max_sum_3parts_helper(number, a, b, c):\n    if a == number:\n        return 0\n    if a + b == number:\n        return 0\n    if a + b + c == number:\n        return a + b + c\n    \n    max_sum = max(max_sum_3parts_helper(number, a+1, b, c), max_sum_3parts_helper(number, a, b+1, c), max_sum_3parts_helper(number, a, b, c+1))\n    return max_sum\n\nprint(max_sum_3parts(1))\nprint(max_sum_3parts(2))\nprint(max_sum_3parts(3))\nprint(max_sum_3parts(4))\nprint(max_sum_3parts(5))\nprint(max_sum_3parts(6))\nprint(max_sum_3parts(7))\nprint(max_sum_3parts(8))\nprint(max_sum_3parts(9))\nprint(max_sum_3parts(10))\nprint(max_sum_3parts(11))\nprint(max_sum_3parts(12))\nprint(max_sum_3parts(13))\nprint(max_sum_3parts(14))\nprint(max_sum_3parts(15))\nprint(max_sum_3parts(16))\nprint(max_sum_3parts(17))\nprint(max_sum_3parts(18))\nprint(max_sum_3parts(19))\nprint(max_",
      -8.953125
    ],
    [
      "# This is the function which will be called recursively\ndef maximumSum(a, i, n):\n    if (i == n):\n        return 0\n    if (i == n - 1):\n        return a[i]\n\n    # If we divide the number in three parts and sum them up\n    maximum = max(a[i] + a[i + 1] + a[i + 2], maximumSum(a, i + 1, n))\n    maximum = max(maximum, maximumSum(a, i + 2, n))\n    maximum = max(maximum, maximumSum(a, i + 1, n))\n    return maximum\n\n\ndef main():\n    a = [1, 2, 3, 4, 5]\n    n = len(a)\n    print(\"Maximum Sum is \", maximumSum(a, 0, n))\n\n\nif __name__ == '__main__':\n    main()",
      -9.0234375
    ],
    [
      "def maximumSum(n):\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 2\n\n    if n == 4:\n        return 4\n\n    if n == 5:\n        return 4\n\n    if n == 6:\n        return 5\n\n    if n == 7:\n        return 6\n\n    if n == 8:\n        return 6\n\n    if n == 9:\n        return 8\n\n    if n == 10:\n        return 8\n\n    if n == 11:\n        return 8\n\n    if n == 12:\n        return 9\n\n    if n == 13:\n        return 9\n\n    if n == 14:\n        return 10\n\n    if n == 15:\n        return 10\n\n    if n == 16:\n        return 11\n\n    if n == 17:\n        return 11\n\n    if n == 18:\n        return 12\n\n    if n == 19:\n        return 12\n\n    if n == 20:\n        return 13\n\n    if n == 21:\n        return 13\n\n    if n == 22:\n        return 14\n\n    if n == 23:\n        return 14\n\n    if n == 24:\n        return 15\n\n    if n == 25:\n        return 15\n\n    if n == 26:\n        return 15\n\n    if n == 27:\n        return 16\n\n    if n == 28:\n        return 16\n\n    if n == 29:\n        return 16\n\n    if n == 30:\n        return 16\n\n    if n == 31:\n        return 17\n\n    if n == 32:\n        return 17",
      -9.078125
    ],
    [
      "def max_sum(n):\n    if n < 3:\n        return 0\n\n    max_sum = -10000000\n    for i in range(1, n - 1):\n        l = max_sum_helper(n, i)\n        if l > max_sum:\n            max_sum = l\n\n    return max_sum\n\n\ndef max_sum_helper(n, i):\n    if n < 3:\n        return 0\n\n    max_sum = -10000000\n    max_sum = max(max_sum, max_sum_helper(n - i, i))\n    max_sum = max(max_sum, max_sum_helper(i, n - i))\n    max_sum = max(max_sum, i * (n - i - i))\n\n    return max_sum\n\n\nprint(max_sum(10))",
      -9.828125
    ],
    [
      "# This is the function to find the maximum sum\ndef maxSum(n, part1, part2, part3):\n\n    # Base condition\n    if part1 == 0:\n        return 0\n\n    # If the given number is less than 3, then the maximum sum is the given number\n    if part1 == 1:\n        return part1\n\n    # If the given number is less than 2, then the maximum sum is the given number\n    if part1 == 2:\n        return part1\n\n    # If the given number is less than 1, then the maximum sum is the given number\n    if part1 == 3:\n        return part1\n\n    # If the given number is less than 4, then the maximum sum is the given number\n    if part1 == 4:\n        return part1\n\n    # If the given number is less than 5, then the maximum sum is the given number\n    if part1 == 5:\n        return part1\n\n    # If the given number is less than 6, then the maximum sum is the given number\n    if part1 == 6:\n        return part1\n\n    # If the given number is less than 7, then the maximum sum is the given number\n    if part1 == 7:\n        return part1\n\n    # If the given number is less than 8, then the maximum sum is the given number\n    if part1 == 8:\n        return part1\n\n    # If the given number is less than 9, then the maximum sum is the given number\n    if part1 == 9:\n        return part1\n\n    # If the given number is less than 10, then the maximum sum is the given number\n    if part1 == 10:\n        return part1\n\n    # If the given number is less than 11, then the maximum sum is the given number\n    if part1 == 11:\n        return part1\n\n    # If the given number is less than 12, then the maximum sum is the given number\n    if part1 == 12:\n        return part1\n\n    # If the given number is less than 13, then the maximum sum is the given number\n    if",
      -10.3671875
    ],
    [
      "def max_sum_recursive(number, first=0, second=0, third=0):\n    if number == 0:\n        return first, second, third\n    if number < 0:\n        return 0, 0, 0\n    if number == 1:\n        return number, 0, 0\n    if number == 2:\n        return number, 0, 0\n    if number == 3:\n        return number, 0, 0\n    if number == 4:\n        return number, 0, 0\n    if number == 5:\n        return number, 0, 0\n    if number == 6:\n        return number, 0, 0\n    if number == 7:\n        return number, 0, 0\n    if number == 8:\n        return number, 0, 0\n    if number == 9:\n        return number, 0, 0\n    if number == 10:\n        return number, 0, 0\n\n    first_part = max_sum_recursive(number - 3, first + number, second, third)\n    second_part = max_sum_recursive(number - 2, first, second + number, third)\n    third_part = max_sum_recursive(number - 1, first, second, third + number)\n    first_part_sum = first_part[0] + first_part[1] + first_part[2]\n    second_part_sum = second_part[0] + second_part[1] + second_part[2]\n    third_part_sum = third_part[0] + third_part[1] + third_part[2]\n    return max(first_part_sum, second_part_sum, third_part_sum), first_part_sum, second_part_sum, third_part_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_recursive(10))",
      -10.421875
    ],
    [
      "from typing import Tuple\n\n\ndef max_sum_parts(n: int) -> Tuple[int, int, int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def _max_sum_parts(n: int) -> Tuple[int, int, int]:\n        if n <= 1:\n            return 0, 0, n\n\n        if n == 2:\n            return 0, n, 0\n\n        if n == 3:\n            return n, 0, 0\n\n        if n == 4:\n            return n, 0, 0\n\n        if n == 5:\n            return n, 0, 0\n\n        if n == 6:\n            return n, 0, 0\n\n        if n == 7:\n            return n, 0, 0\n\n        if n == 8:\n            return n, 0, 0\n\n        if n == 9:\n            return n, 0, 0\n\n        if n == 10:\n            return n, 0, 0\n\n        if n == 11:\n            return n, 0, 0\n\n        if n == 12:\n            return n, 0, 0\n\n        if n == 13:\n            return n, 0, 0\n\n        if n == 14:\n            return n, 0, 0\n\n        if n == 15:\n            return n, 0, 0\n\n        if n == 16:\n            return n, 0, 0\n\n        if n == 17:\n            return n, 0, 0\n\n        if n == 18:\n            return n, 0, 0\n\n        if n == 19:\n            return n, 0, 0\n\n        if n == 20:\n            return n, 0, 0\n\n        if n == 21:\n            return n, 0, 0\n\n        if n == 22:\n            return n, 0, 0",
      -11.0703125
    ],
    [
      "def maximum_sum(number):\n    if number < 4:\n        return 0\n    if number == 4:\n        return 4\n    if number == 5:\n        return 5\n    if number == 6:\n        return 10\n    if number == 7:\n        return 10\n    if number == 8:\n        return 13\n    if number == 9:\n        return 15\n    if number == 10:\n        return 17\n    if number == 11:\n        return 19\n\n    return maximum_sum(number - 3) + number\n\n\nprint(maximum_sum(10))",
      -11.3984375
    ],
    [
      "# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\nclass NestedInteger(object):\n   def isInteger(self):\n       \"\"\"\n       @return True if this NestedInteger holds a single integer, rather than a nested list.\n       :rtype bool\n       \"\"\"\n\n   def getInteger(self):\n       \"\"\"\n       @return the single integer that this NestedInteger holds, if it holds a single integer\n       Return None if this NestedInteger holds a nested list\n       :rtype int\n       \"\"\"\n\n   def getList(self):\n       \"\"\"\n       @return the nested list that this NestedInteger holds, if it holds a nested list\n       Return None if this NestedInteger holds a single integer\n       :rtype List[NestedInteger]\n       \"\"\"\n\n\ndef divide_number(num):\n    if num < 10:\n        return num\n    else:\n        first_num = num % 10\n        second_num = num // 10\n        third_num = second_num % 10\n        second_num = second_num // 10\n        return [first_num, second_num, third_num]\n\n\ndef max_sum_recursive(num, result, current):\n    if num == 0:\n        result[0] = max(result[0], current)\n    else:\n        for i in range(10):\n            current = current * 10 + i\n            max_sum_recursive(num - 1, result, current)\n            current = current // 10\n\n\nclass Solution(object):\n    def depthSum(self, nestedList):\n        \"\"\"\n        :type nestedList: List[NestedInteger]\n        :rtype: int\n        \"\"\"\n        result = [0]\n        max_sum_recursive(len(nestedList), result, 0)\n        return result[0]\n\n\ns = Solution()\nprint(s.depthSum([1, [4, [6]]]))",
      -12.9296875
    ],
    [
      "def max_sum(number):\n    if number <= 3:\n        return number\n\n    max_sum = 0\n    for i in range(1, number - 1):\n        max_sum = max(max_sum, number - i * 2, max_sum + max(max_sum_recursive(i), max_sum_recursive(number - i * 2)))\n    return max_sum\n\n\ndef max_sum_recursive(number):\n    if number <= 3:\n        return number\n\n    max_sum = 0\n    for i in range(1, number - 1):\n        max_sum = max(max_sum, number - i * 2, max_sum + max_sum_recursive(i) + max_sum_recursive(number - i * 2))\n    return max_sum\n\n\ndef max_sum_memoization(number, memo={}):\n    if number <= 3:\n        return number\n\n    if number in memo:\n        return memo[number]\n\n    max_sum = 0\n    for i in range(1, number - 1):\n        max_sum = max(max_sum, number - i * 2, max_sum + max_sum_memoization(i) + max_sum_memoization(number - i * 2))\n    memo[number] = max_sum\n    return max_sum\n\n\ndef max_sum_tabulation(number):\n    if number <= 3:\n        return number\n\n    tabulation = [[0 for _ in range(number)] for _ in range(number)]\n\n    for i in range(number):\n        tabulation[i][i] = number - i * 2\n        tabulation[i][number - 1] = number - i * 2\n\n    for i in range(number):\n        for j in range(number):\n            if i == 0 or j == 0 or j == number - 1:\n                continue\n            tabulation[i][j] = max(number - i * 2, tabulation[i][j - 1] + tabulation[i][j])\n\n    return max",
      -13.5078125
    ],
    [
      "def max_sum(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n\n    max_sum_1 = max_sum(arr[1:])\n    max_sum_2 = max_sum(arr[2:])\n    max_sum_3 = max_sum(arr[:2])\n    max_sum_4 = max_sum(arr[:3])\n\n    return max(max_sum_1 + max_sum_2, max_sum_3 + max_sum_4, max_sum_3, max_sum_4)\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(max_sum(arr))\n\n    arr = [1, 2, 3, 4]\n    print(max_sum(arr))",
      -14.0078125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}