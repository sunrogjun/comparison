{
  "problem": {
    "task_id": "MBPP/171",
    "prompt": "Write a function to find the perimeter of a pentagon.",
    "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
    "test_list": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ],
    "challenge_test_list": [],
    "problem_id": 160
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def find_perimeter(side: int) -> int:\n    \"\"\"\n    >>> find_perimeter(10)\n    50\n    \"\"\"\n    return 5 * side\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      17.234375
    ],
    [
      "def find_perimeter(side1, side2, side3, side4, side5):\n    return side1 + side2 + side3 + side4 + side5\n\n\nprint(find_perimeter(1, 2, 3, 4, 5))",
      16.8125
    ],
    [
      "def perimeter(side):\n    return side * 5\n\nassert perimeter(1) == 5, \"Test 1 should return 5\"\nassert perimeter(2) == 10, \"Test 2 should return 10\"\nassert perimeter(3) == 15, \"Test 3 should return 15\"\nassert perimeter(4) == 20, \"Test 4 should return 20\"\nassert perimeter(5) == 25, \"Test 5 should return 25\"\n\nprint(\"All tests passed!\")",
      15.546875
    ],
    [
      "def perimeter_of_pentagon(side1, side2, side3, side4, side5):\n    return side1 + side2 + side3 + side4 + side5\n\nif __name__ == '__main__':\n    assert perimeter_of_pentagon(3, 4, 5, 6, 7) == 23\n    print(\"The perimeter of a pentagon with side lengths 3, 4, 5, 6, 7 is {}\".format(perimeter_of_pentagon(3, 4, 5, 6, 7)))",
      14.6015625
    ],
    [
      "def perimeter_of_pentagon(side_length):\n    return side_length * 5\n\n\ndef test_perimeter_of_pentagon():\n    \"\"\"Input/Output\"\"\"\n    assert perimeter_of_pentagon(10) == 50\n    assert perimeter_of_pentagon(20) == 100\n\n\ndef main():\n    print(perimeter_of_pentagon(10))\n\n\nif __name__ == \"__main__\":\n    main()",
      13.453125
    ],
    [
      "def perimeter_of_pentagon(side):\n    return 5 * side\n\nif __name__ == '__main__':\n    print(perimeter_of_pentagon(20))",
      11.0625
    ],
    [
      "def perimeter(side):\n    \"\"\"\n    >>> perimeter(1)\n    5\n    >>> perimeter(2)\n    12\n    \"\"\"\n    return 5 * side\n\ndef test_perimeter():\n    \"\"\"\n    >>> test_perimeter()\n    \"\"\"\n    import doctest\n    doctest.testmod(verbose=True)\n\nif __name__ == \"__main__\":\n    test_perimeter()",
      10.9765625
    ],
    [
      "def perimeter_of_pentagon(side: int) -> int:\n    \"\"\"\n    >>> perimeter_of_pentagon(1)\n    5\n    >>> perimeter_of_pentagon(2)\n    12\n    \"\"\"\n    return 5 * side\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.6796875
    ],
    [
      "def find_perimeter(sides):\n    return sum(sides)\n\nif __name__ == '__main__':\n    print(find_perimeter([5, 5, 5, 5, 5]))",
      7.84375
    ],
    [
      "def perimeter(side1, side2, side3, side4, side5):\n    return side1 + side2 + side3 + side4 + side5",
      4.640625
    ],
    [
      "def perimeter_of_pentagon(side_length):\n    return 5 * side_length\n\nassert perimeter_of_pentagon(10) == 50, \"The perimeter is 50\"\nassert perimeter_of_pentagon(3) == 15, \"The perimeter is 15\"",
      4.04296875
    ],
    [
      "def find_pentagon_perimeter(side):\n    \"\"\"\n    >>> find_pentagon_perimeter(1)\n    5\n    >>> find_pentagon_perimeter(2)\n    12\n    >>> find_pentagon_perimeter(3)\n    22\n    >>> find_pentagon_perimeter(4)\n    32\n    >>> find_pentagon_perimeter(5)\n    42\n    >>> find_pentagon_perimeter(6)\n    52\n    >>> find_pentagon_perimeter(7)\n    62\n    >>> find_pentagon_perimeter(8)\n    72\n    \"\"\"\n    return (5 * side) - (3 * (side ** 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.9296875
    ],
    [
      "def perimeter(side_length):\n    return 5 * side_length",
      3.927734375
    ],
    [
      "def perimeter_pentagon(side):\n    return 5 * side\n\n\nprint(perimeter_pentagon(5))",
      3.36328125
    ],
    [
      "def perimeter(length):\n    return 5 * length\n\nprint(perimeter(10))\n\n# def perimeter(length):\n#     return 5 * length\n#\n# print(perimeter(10))",
      3.359375
    ],
    [
      "def find_perimeter(side_length):\n    return 5 * side_length",
      3.212890625
    ],
    [
      "def find_perimeter(side_length):\n    return 5 * side_length\n\n\nif __name__ == '__main__':\n    print(find_perimeter(20))",
      3.20703125
    ],
    [
      "def get_perimeter(side):\n    return 5 * side\n\ndef test_get_perimeter():\n    assert get_perimeter(1) == 5\n    assert get_perimeter(2) == 10\n    assert get_perimeter(3) == 15",
      1.560546875
    ],
    [
      "def find_perimeter(length):\n    return (length * 5) - (3 * length)\n\n\nprint(find_perimeter(10))",
      1.4404296875
    ],
    [
      "def perimeter(length):\n    \"\"\"\n    >>> perimeter(10)\n    50\n    \"\"\"\n    return 5 * length",
      1.41015625
    ],
    [
      "def find_pentagon_perimeter(side):\n    return (5 * side) - (3 * (side ** 2))\n\n\nif __name__ == '__main__':\n    print(find_pentagon_perimeter(10))",
      1.158203125
    ],
    [
      "def find_perimeter(side: int) -> int:\n    \"\"\"\n    >>> find_perimeter(1)\n    5\n    >>> find_perimeter(2)\n    10\n    >>> find_perimeter(3)\n    15\n    \"\"\"\n    return 5 * side - 4\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.9990234375
    ],
    [
      "import math\n\ndef perimeter_pentagon(side):\n    return 5*side\n\ndef test_perimeter_pentagon():\n    assert perimeter_pentagon(1) == 5\n    assert perimeter_pentagon(2) == 10\n    assert perimeter_pentagon(3) == 15\n    assert perimeter_pentagon(4) == 20\n    assert perimeter_pentagon(5) == 25\n\ndef main():\n    print(perimeter_pentagon(3))\n\nif __name__ == '__main__':\n    main()",
      0.84228515625
    ],
    [
      "def find_perimeter(length):\n    return 5 * length\n\n\nif __name__ == '__main__':\n    print(find_perimeter(5))",
      0.81005859375
    ],
    [
      "def perimeter_of_pentagon(side_length):\n    return 5 * side_length",
      0.7958984375
    ],
    [
      "def find_perimeter(a: int) -> int:\n    \"\"\"\n    >>> find_perimeter(1)\n    5\n    >>> find_perimeter(2)\n    12\n    >>> find_perimeter(3)\n    17\n    >>> find_perimeter(4)\n    22\n    \"\"\"\n    return 5 * a - 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.68310546875
    ],
    [
      "def get_perimeter(length):\n    return 5 * length\n\n\nif __name__ == '__main__':\n    print(get_perimeter(10))",
      0.54541015625
    ],
    [
      "def find_perimeter(length):\n    return (5 * length) - (3 * (length ** 2))\n\n\nif __name__ == '__main__':\n    print(find_perimeter(2))",
      0.41357421875
    ],
    [
      "def find_perimeter(side):\n    return 5 * side\n\nassert find_perimeter(1) == 5, \"Should be 5\"\nassert find_perimeter(2) == 10, \"Should be 10\"\nassert find_perimeter(3) == 15, \"Should be 15\"\nassert find_perimeter(4) == 20, \"Should be 20\"\nassert find_perimeter(5) == 25, \"Should be 25\"",
      0.31787109375
    ],
    [
      "def find_perimeter(s):\n    return 5*s",
      0.1885986328125
    ],
    [
      "def perimeter_pentagon(side: int) -> int:\n    return 5 * side",
      0.1292724609375
    ],
    [
      "def perimeter_pentagon(side_a):\n    return 5 * side_a\n\nif __name__ == '__main__':\n    side_a = int(input())\n    print(perimeter_pentagon(side_a))",
      0.0186920166015625
    ],
    [
      "def find_perimeter(sides):\n    \"\"\"\n    :param sides: list - The length of each side of a pentagon.\n    :return: int - The perimeter of the pentagon.\n    \"\"\"\n    # Your code goes here!\n\n    return sum(sides)\n\nprint(find_perimeter([3, 4, 6, 7, 5]))",
      0.007633209228515625
    ],
    [
      "def perimeter(length):\n    return length * 5",
      -0.26318359375
    ],
    [
      "def perimeter(side):\n    return 5 * side",
      -0.26318359375
    ],
    [
      "def find_perimeter(side):\n    return 5*side\n\nif __name__ == '__main__':\n    print(find_perimeter(2))",
      -0.29541015625
    ],
    [
      "def perimeter(length):\n    return 5 * length\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14159265359 * radius * radius",
      -0.409423828125
    ],
    [
      "def perimeter(side):\n    return (5 * side)\n\nif __name__ == '__main__':\n    print(\"perimeter(3) = \", perimeter(3))",
      -0.6181640625
    ],
    [
      "def perimeter_pentagon(side1):\n    return (5 * side1)\n\nprint(perimeter_pentagon(10))",
      -0.6513671875
    ],
    [
      "def find_pentagon_perimeter(side: int):\n    return (5 * side) - (3 * (side ** 2))\n\n\nif __name__ == \"__main__\":\n    print(find_pentagon_perimeter(3))",
      -0.6533203125
    ],
    [
      "def find_perimeter(side_length):\n    return 5 * side_length",
      -0.85595703125
    ],
    [
      "def perimeter(side):\n    return side * 5\n\n\nprint(perimeter(10))",
      -0.85595703125
    ],
    [
      "def perimeter_of_pentagon(side_length):\n    return 5 * side_length",
      -0.85595703125
    ],
    [
      "def get_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a pentagon.\n\n    >>> get_perimeter(1)\n    5\n    >>> get_perimeter(2)\n    12\n    >>> get_perimeter(3)\n    17\n    \"\"\"\n    return 5 * side_length - 4",
      -0.85693359375
    ],
    [
      "def perimeter(side_length):\n    return 5 * side_length\n\nassert perimeter(10) == 50, \"The perimeter of a regular pentagon with side length 10 is 50\"",
      -0.85693359375
    ],
    [
      "def find_perimeter(side_length):\n    return 5 * side_length\n\n\nif __name__ == '__main__':\n    print(find_perimeter(2))",
      -0.85693359375
    ],
    [
      "def find_perimeter(side):\n    return side * 5",
      -0.857421875
    ],
    [
      "def perimeter(side):\n    return 5 * side",
      -0.857421875
    ],
    [
      "def perimeter(a):\n    return 5 * a",
      -0.857421875
    ],
    [
      "def perimeter(side):\n    return (5 * side)",
      -0.857421875
    ],
    [
      "def find_perimeter(side):\n    return side * 5",
      -0.857421875
    ],
    [
      "def perimeter(side):\n    return 5 * side",
      -0.857421875
    ],
    [
      "def perimeter(a):\n    return (a * 5) / 2\n\nprint(perimeter(10))",
      -0.857421875
    ],
    [
      "def perimeter(s):\n    return (5 * s) - (3 * (s**2))\n\nprint(perimeter(4))\nprint(perimeter(5))",
      -0.857421875
    ],
    [
      "def find_perimeter(side_length):\n    \"\"\"\n    This function returns the perimeter of a pentagon.\n    \"\"\"\n    return 5 * side_length",
      -0.857421875
    ],
    [
      "def perimeter_pentagon(side):\n    return (5 * side)",
      -0.857421875
    ],
    [
      "def find_perimeter(length):\n    return length * 5\n\n\nprint(find_perimeter(20))",
      -0.857421875
    ],
    [
      "def find_perimeter(side_length):\n    return 5 * side_length",
      -0.857421875
    ],
    [
      "def find_perimeter(side_length):\n    return side_length * 5\n\n\nif __name__ == '__main__':\n    print(find_perimeter(10))",
      -0.857421875
    ],
    [
      "def find_perimeter(side_length):\n    return 5 * side_length\n\n\nprint(find_perimeter(10))",
      -0.857421875
    ],
    [
      "def perimeter_of_pentagon(side_length):\n    return 5 * side_length\n\nprint(perimeter_of_pentagon(4))",
      -0.857421875
    ],
    [
      "def perimeter(side_length):\n    return 5 * side_length",
      -0.857421875
    ],
    [
      "def perimeter(sides):\n    return sum(sides)\n\nprint(perimeter([1,1,1,1,1]))",
      -0.857421875
    ],
    [
      "def find_perimeter(side):\n    return side * 5",
      -0.857421875
    ],
    [
      "def perimeter(side):\n    return 5 * side\n\n\ndef test_perimeter():\n    assert perimeter(3) == 15\n    assert perimeter(4) == 20\n    assert perimeter(5) == 25",
      -0.85791015625
    ],
    [
      "def perimeter(s):\n    return (5 * s) - (3 * (s ** 2))\n\n\ndef test_perimeter():\n    assert perimeter(1) == 5\n    assert perimeter(2) == 18\n    assert perimeter(3) == 32",
      -0.85791015625
    ],
    [
      "def perimeter(s):\n    return 5 * s",
      -0.85791015625
    ],
    [
      "def perimeter(side):\n    return 5 * side\n\nif __name__ == '__main__':\n    print(perimeter(2))",
      -0.8583984375
    ],
    [
      "def perimeter(length):\n    return length * 5\n\n\nprint(perimeter(10))",
      -0.8583984375
    ],
    [
      "def perimeter_of_pentagon(side_length):\n    return 5 * side_length",
      -0.8583984375
    ],
    [
      "def find_perimeter(side1, side2, side3, side4, side5):\n    \"\"\"\n    >>> find_perimeter(3, 4, 5, 6, 7)\n    18.0\n    \"\"\"\n    return side1 + side2 + side3 + side4 + side5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def find_perimeter(side_length):\n    return 5 * side_length\n\n\nif __name__ == '__main__':\n    print(find_perimeter(10))",
      -0.8583984375
    ],
    [
      "def perimeter(side_length):\n    return side_length * 5\n\nif __name__ == '__main__':\n    print(perimeter(3))",
      -0.88671875
    ],
    [
      "def perimeter(side):\n    return 5 * side\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14 * radius * radius",
      -0.8876953125
    ],
    [
      "def perimeter(length):\n    return 5 * length",
      -0.908203125
    ],
    [
      "def perimeter(side_length):\n    return 5 * side_length\n\n\"\"\"\nWrite a function that returns the average of a list of numbers.\n\"\"\"\n\ndef average(list):\n    return sum(list) / len(list)\n\n\"\"\"\nWrite a function that takes two arguments and returns True if the first argument is less than the second argument.\n\"\"\"\n\ndef less(first, second):\n    return first < second\n\n\"\"\"\nWrite a function that takes three arguments and returns True if the first argument is greater than the second argument and the second argument is greater than the third argument.\n\"\"\"\n\ndef greater_all(first, second, third):\n    return first > second and second > third\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the numbers.\n\"\"\"\n\ndef sum_list(list):\n    return sum(list)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the maximum number in the list.\n\"\"\"\n\ndef max_list(list):\n    return max(list)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the minimum number in the list.\n\"\"\"\n\ndef min_list(list):\n    return min(list)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the maximum and minimum numbers in the list.\n\"\"\"\n\ndef max_min(list):\n    return max(list), min(list)\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the even numbers in the list.\n\"\"\"\n\ndef sum_even(list):\n    return sum([i for i in list if i % 2 == 0])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the odd numbers in the list.\n\"\"\"\n\ndef sum_odd(list):\n    return sum([i for i in list if i % 2 != 0])\n\n\"\"\"\nWrite a function that takes a list of numbers and returns the sum of the even-numbered elements of the list.\n\"\"\"\n\ndef sum_even_index(list):\n    return sum([i for i in list if i % 2 == 0",
      -1.15625
    ],
    [
      "def get_perimeter(side_length):\n    return 5 * side_length",
      -1.3330078125
    ],
    [
      "def perimeter(side):\n    return 5 * side\n\nif __name__ == '__main__':\n    print(perimeter(10))",
      -1.3349609375
    ],
    [
      "import math\n\n\ndef perimeter(length):\n    return 5 * length\n\n\ndef perimeter_math(length):\n    return 5 * math.sqrt(2 * (length ** 2))\n\n\nif __name__ == '__main__':\n    print(perimeter(3))\n    print(perimeter_math(3))",
      -1.9072265625
    ],
    [
      "from math import sqrt\n\n\ndef perimeter_pentagon(side_length: int) -> int:\n    \"\"\"\n    >>> perimeter_pentagon(10)\n    50\n    \"\"\"\n    return 5 * side_length\n\n\ndef perimeter_pentagon_math(side_length: int) -> int:\n    \"\"\"\n    >>> perimeter_pentagon_math(10)\n    50\n    \"\"\"\n    return 5 * side_length - 2 * sqrt(5 * (5 - 2 * side_length))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.138671875
    ],
    [
      "def get_perimeter(side):\n    return 5 * side",
      -2.169921875
    ],
    [
      "def find_perimeter(side):\n    return 5 * side",
      -2.169921875
    ],
    [
      "import math\n\ndef find_perimeter(side_length):\n    return (5 * side_length) - (math.sqrt(25 + (20 * side_length)))\n\nprint(find_perimeter(5))\nprint(find_perimeter(10))",
      -2.498046875
    ],
    [
      "def perimeter(sides):\n    return sum(sides) * 2\n\nif __name__ == '__main__':\n    print(perimeter([3, 4, 5, 6, 7]))",
      -2.845703125
    ],
    [
      "import math\n\ndef perimeter_pentagon(side_length):\n    return 5 * side_length\n\ndef perimeter_pentagon_2(side_length):\n    return math.pi * side_length\n\ndef perimeter_pentagon_3(side_length):\n    return 2 * (side_length + side_length / (2 * math.tan(math.pi / 5)))\n\n\nif __name__ == '__main__':\n    print(perimeter_pentagon(10))\n    print(perimeter_pentagon_2(10))\n    print(perimeter_pentagon_3(10))",
      -3.005859375
    ],
    [
      "def perimeter_pentagon(side):\n    \"\"\"\n    >>> perimeter_pentagon(1)\n    5.0\n    >>> perimeter_pentagon(2)\n    12.0\n    \"\"\"\n    return 5 * side\n\ndef perimeter_pentagon2(side):\n    \"\"\"\n    >>> perimeter_pentagon2(1)\n    5.0\n    >>> perimeter_pentagon2(2)\n    12.0\n    \"\"\"\n    return 5 * side + 10\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.1875
    ],
    [
      "def perimeter(side):\n    return 5 * side\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14 * (radius ** 2)\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14 * (radius ** 2)\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14 * (radius ** 2)\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14 * (radius ** 2)\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14 * (radius ** 2)\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14 * (radius ** 2)\n\n\"\"\"\nWrite a function",
      -4.3125
    ],
    [
      "def perimeter_of_pentagon(side_length):\n    return 5 * side_length\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\n\ndef area_of_pentagon(side_length):\n    return (3 * side_length * side_length) / 2\n\n\"\"\"\nWrite a function to find the perimeter of a hexagon.\n\"\"\"\n\ndef perimeter_of_hexagon(side_length):\n    return 6 * side_length\n\n\"\"\"\nWrite a function to find the area of a hexagon.\n\"\"\"\n\ndef area_of_hexagon(side_length):\n    return (3 * side_length * side_length) / 2\n\n\"\"\"\nWrite a function to find the perimeter of a heptagon.\n\"\"\"\n\ndef perimeter_of_heptagon(side_length):\n    return 7 * side_length\n\n\"\"\"\nWrite a function to find the area of a heptagon.\n\"\"\"\n\ndef area_of_heptagon(side_length):\n    return (5 * side_length * side_length) / 2\n\n\"\"\"\nWrite a function to find the perimeter of an octagon.\n\"\"\"\n\ndef perimeter_of_octagon(side_length):\n    return 8 * side_length\n\n\"\"\"\nWrite a function to find the area of an octagon.\n\"\"\"\n\ndef area_of_octagon(side_length):\n    return (7 * side_length * side_length) / 2\n\n\"\"\"\nWrite a function to find the perimeter of a nonagon.\n\"\"\"\n\ndef perimeter_of_nonagon(side_length):\n    return 9 * side_length\n\n\"\"\"\nWrite a function to find the area of a nonagon.\n\"\"\"\n\ndef area_of_nonagon(side_length):\n    return (5 * side_length * side_length) / 2\n\n\"\"\"\nWrite a function to find the perimeter of a decagon.\n\"\"\"\n\ndef perimeter_of_decagon(side_length):\n    return 10 * side_length\n\n\"\"\"",
      -4.5859375
    ],
    [
      "def find_pentagon_perimeter(side_length: int) -> int:\n    \"\"\"\n    >>> find_pentagon_perimeter(1)\n    5\n    >>> find_pentagon_perimeter(2)\n    12\n    >>> find_pentagon_perimeter(3)\n    17\n    >>> find_pentagon_perimeter(4)\n    22\n    >>> find_pentagon_perimeter(5)\n    27\n    \"\"\"\n    return 5 * side_length - 4\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.5
    ],
    [
      "def find_perimeter(length):\n    return (length * 5) - (3 * length)\n\n\ndef test_find_perimeter():\n    \"\"\"\n    >>> find_perimeter(4)\n    14\n    >>> find_perimeter(10)\n    50\n    >>> find_perimeter(1)\n    5\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.546875
    ],
    [
      "def find_pentagon_perimeter(a):\n    return (5 * a) - ((1 + (5 ** 0.5)) * (1 - (5 ** 0.5)))\n\n\ndef test_perimeter():\n    \"\"\"\n    >>> find_pentagon_perimeter(3)\n    10.8\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    test_perimeter()",
      -6.65234375
    ],
    [
      "def find_pentagon_perimeter(n: int) -> int:\n    \"\"\"\n    >>> find_pentagon_perimeter(1)\n    5\n    >>> find_pentagon_perimeter(2)\n    17\n    >>> find_pentagon_perimeter(3)\n    29\n    >>> find_pentagon_perimeter(4)\n    39\n    >>> find_pentagon_perimeter(5)\n    55\n    \"\"\"\n    return 5 * n + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.83203125
    ],
    [
      "def perimeter(side_length: int) -> int:\n    \"\"\"\n    >>> perimeter(2)\n    10\n    >>> perimeter(1)\n    5\n    >>> perimeter(3)\n    14\n    >>> perimeter(100)\n    500\n    \"\"\"\n\n    return 5 * side_length - 4\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.02734375
    ],
    [
      "def perimeter(a):\n    return a * 5\n\n\"\"\"\nWrite a function to find the area of a pentagon.\n\"\"\"\n\ndef area(a):\n    return a * (3 * a - a / 2)\n\n\"\"\"\nWrite a function to find the diagonal length of a regular pentagon.\n\"\"\"\n\ndef diagonal(a):\n    return a * (2 * (3**0.5) - 1)\n\n\"\"\"\nWrite a function to find the side length of a regular pentagon, given the length of the diagonal.\n\"\"\"\n\ndef diagonal_to_side(a):\n    return a * (2 * (3**0.5) - 1)\n\n\"\"\"\nWrite a function to find the side length of a regular pentagon, given the area.\n\"\"\"\n\ndef area_to_side(a):\n    return a * (3 * a - a / 2)\n\n\"\"\"\nWrite a function to find the area of a regular pentagon, given the length of the diagonal.\n\"\"\"\n\ndef diagonal_to_area(a):\n    return a * (3 * a - a / 2)\n\n\"\"\"\nWrite a function to find the length of a regular pentagon's diagonal, given the side length.\n\"\"\"\n\ndef side_to_diagonal(a):\n    return a * (2 * (3**0.5) - 1)",
      -7.34375
    ],
    [
      "def perimeter(side: int) -> int:\n    \"\"\"\n    >>> perimeter(1)\n    5\n    >>> perimeter(2)\n    12\n    >>> perimeter(3)\n    17\n    \"\"\"\n    return 5 * side - 4\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.49609375
    ],
    [
      "from math import sqrt\n\n\ndef find_pentagon_perimeter(side_length):\n    \"\"\"\n    >>> find_pentagon_perimeter(1)\n    5\n    >>> find_pentagon_perimeter(2)\n    12\n    >>> find_pentagon_perimeter(3)\n    16\n    \"\"\"\n    return 5 * side_length + (2 * side_length * sqrt(24 + 10 * side_length ** 2)) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -9.1328125
    ],
    [
      "from math import sqrt\n\n\ndef is_pentagon(n):\n    return (sqrt(24 * n + 1) + 1) % 6 == 0\n\n\ndef find_pentagon_perimeter(n):\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if is_pentagon(i + j) and is_pentagon(i - j):\n                return 2 * (i + j)\n\n\nif __name__ == \"__main__\":\n    print(find_pentagon_perimeter(1000))",
      -10.484375
    ],
    [
      "def find_pentagon_perimeter(side_length):\n    return (5 * side_length) - (3 * ((side_length ** 2)) / (2 * (side_length + side_length ** 2)))\n\n\nprint(find_pentagon_perimeter(5))",
      -10.671875
    ],
    [
      "def perimeter(a):\n    return (5 * a) - (3 * (a ** 2))\n\nprint(perimeter(3))\nprint(perimeter(4))\nprint(perimeter(5))\nprint(perimeter(6))\nprint(perimeter(7))",
      -13.53125
    ],
    [
      "def perimeter(length: int) -> int:\n    \"\"\"\n    Return the perimeter of a pentagon.\n\n    >>> perimeter(1)\n    5\n    >>> perimeter(2)\n    10\n    >>> perimeter(3)\n    15\n    >>> perimeter(4)\n    21\n    >>> perimeter(5)\n    26\n    \"\"\"\n\n    return (5 * length) - (3 * (length ** 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -13.734375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}