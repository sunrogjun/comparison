{
  "problem": {
    "task_id": "MBPP/181",
    "prompt": "Write a function to find the longest common prefix in the given set of strings.",
    "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
    "test_list": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ],
    "challenge_test_list": [],
    "problem_id": 170
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    return shortest\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([]) == \"\"\n    assert longest_common_prefix([\"aa\", \"a\"]) == \"a\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      11.3125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while not strs[i].startswith(prefix):\n                prefix = prefix[:-1]\n                if not prefix:\n                    return \"\"\n        return prefix\n\n\nsol = Solution()\nprint(sol.longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\nprint(sol.longestCommonPrefix([\"dog\", \"racecar\", \"car\"]))\nprint(sol.longestCommonPrefix([\"\"]))",
      10.3359375
    ],
    [
      "def longest_common_prefix(list_of_strings):\n    \"\"\"\n    :param list_of_strings: list of strings\n    :return: longest common prefix\n    :rtype: str\n    \"\"\"\n    if len(list_of_strings) == 0:\n        return \"\"\n    if len(list_of_strings) == 1:\n        return list_of_strings[0]\n    prefix = list_of_strings[0]\n    for i in range(1, len(list_of_strings)):\n        if len(list_of_strings[i]) > len(prefix):\n            prefix = list_of_strings[i]\n        while prefix != list_of_strings[i][:len(prefix)]:\n            prefix = prefix[:-1]\n            if len(prefix) == 0:\n                return \"\"\n    return prefix\n\n\ndef main():\n    list_of_strings = [\"abcdefg\", \"abcdefhi\", \"abcdef\", \"abcdefghijklmnop\"]\n    print(longest_common_prefix(list_of_strings))\n    list_of_strings = [\"abcdefghijklmnop\", \"abcdefghijklmnopqrst\", \"abcdefghijklmnopqrstuvwxyz\"]\n    print(longest_common_prefix(list_of_strings))\n    list_of_strings = [\"abc\", \"abcd\", \"abcdefg\"]\n    print(longest_common_prefix(list_of_strings))\n    list_of_strings = []\n    print(longest_common_prefix(list_of_strings))\n    list_of_strings = [\"\"]\n    print(longest_common_prefix(list_of_strings))\n    list_of_strings = [\"a\"]\n    print(longest_common_prefix(list_of_strings))\n    list_of_strings = [\"abc\", \"abc\", \"abc\"]\n    print(longest_common_prefix(list_of_strings))\n\n\nif __name__ == '__main__':\n    main()",
      10.1015625
    ],
    [
      "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1]\n                if prefix == \"\":\n                    return \"\"\n        return prefix\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))",
      9.703125
    ],
    [
      "def longest_common_prefix(s):\n    \"\"\"\n    >>> longest_common_prefix(['abcd', 'abc', 'ab'])\n    'ab'\n    >>> longest_common_prefix(['abc', 'ab'])\n    'ab'\n    >>> longest_common_prefix(['abc', 'bc'])\n    ''\n    >>> longest_common_prefix(['abcd', 'abc', 'abcd'])\n    'abcd'\n    \"\"\"\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s[0]\n    i = 0\n    while i < len(s[0]):\n        for word in s[1:]:\n            if i >= len(word):\n                return s[0][:i]\n            if word[i] != s[0][i]:\n                return s[0][:i]\n        i += 1\n    return s[0][:i]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.5625
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i == len(string) or strs[0][i] != string[i]:\n                return strs[0][:i]\n    return strs[0]\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"hello\", \"heaven\", \"heavy\"]) == \"he\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([\"c\", \"c\", \"c\"]) == \"c\"\n    assert longest_common_prefix([\"ab\", \"a\"]) == \"a\"\n    assert longest_common_prefix([\"a\", \"b\"]) == \"\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      8.671875
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        prefix = ''\n        for i in range(len(strs[0])):\n            c = strs[0][i]\n            for s in strs:\n                if i == len(s) or s[i] != c:\n                    return prefix\n            prefix += c\n        return prefix\n\n\na = Solution()\nprint(a.longestCommonPrefix(['12121', '1212', '121']) == '121')\nprint(a.longestCommonPrefix(['12121', '1212', '12']) == '12')\nprint(a.longestCommonPrefix(['12121', '1212', '1']) == '1')\nprint(a.longestCommonPrefix(['12121', '1212', '']) == '')\nprint(a.longestCommonPrefix(['', '1212', '']) == '')\nprint(a.longestCommonPrefix(['', '1212', '1212']) == '')",
      8.2734375
    ],
    [
      "class Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n\n        for i in range(len(strs[0])):\n            for s in strs[1:]:\n                if i >= len(s) or s[i] != strs[0][i]:\n                    return strs[0][:i]\n\n        return strs[0]\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\n    print(solution.longestCommonPrefix([\"dog\", \"racecar\", \"car\"]))\n    print(solution.longestCommonPrefix([\"a\", \"b\"]))\n    print(solution.longestCommonPrefix([\"\"]))\n    print(solution.longestCommonPrefix([\"ab\", \"a\"]))",
      7.35546875
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n\n    return strs[0]\n\n\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))\nprint(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))\nprint(longest_common_prefix([\"\", \"b\"]))\nprint(longest_common_prefix([]))",
      7.328125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        strs.sort()\n        prefix = \"\"\n        for i in range(len(strs[0])):\n            if strs[0][i] == strs[-1][i]:\n                prefix += strs[0][i]\n            else:\n                break\n        return prefix\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.longestCommonPrefix([\"dog\", \"racecar\", \"car\"]))\n    print(s.longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\n    print(s.longestCommonPrefix([\"\"]))\n    print(s.longestCommonPrefix([]))\n    print(s.longestCommonPrefix([\"aa\", \"a\"]))\n    print(s.longestCommonPrefix([\"dog\", \"racecar\", \"car\", \"\"]))",
      7.203125
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    return shortest\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))\n    print(longest_common_prefix([\"dog\", \"race\", \"car\"]))\n    print(longest_common_prefix([]))\n    print(longest_common_prefix([\"\"]))",
      6.73828125
    ],
    [
      "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if char != other[i]:\n                return shortest[:i]\n\n    return shortest\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"hello\", \"heaven\", \"heat\", \"hero\"]))\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))\n    print(longest_common_prefix([\"\"]))\n    print(longest_common_prefix([\"hello\", \"heaven\", \"racecar\"]))\n    print(longest_common_prefix([\"\"]))",
      6.50390625
    ],
    [
      "def longest_common_prefix(strs: list[str]) -> str:\n    \"\"\"\n    >>> longest_common_prefix([])\n    ''\n    >>> longest_common_prefix(['a', 'b', 'c'])\n    ''\n    >>> longest_common_prefix(['aa', 'a', 'aaa'])\n    'a'\n    >>> longest_common_prefix(['aa', 'a', 'ab'])\n    'a'\n    >>> longest_common_prefix(['ab', 'a', 'ab'])\n    'a'\n    >>> longest_common_prefix(['ab', 'a', 'ac'])\n    ''\n    >>> longest_common_prefix(['a', 'b', 'c'])\n    ''\n    >>> longest_common_prefix(['ab', 'a', 'ac'])\n    ''\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    shortest = min(strs, key=len)\n\n    for i, char in enumerate(shortest):\n        for string in strs:\n            if string[i] != char:\n                return shortest[:i]\n\n    return shortest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.7109375
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        shortest = min(strs, key=len)\n        for i, ch in enumerate(shortest):\n            for other in strs:\n                if other[i] != ch:\n                    return shortest[:i]\n        return shortest\n\n\nsol = Solution()\nstrs = [\"dog\", \"race\", \"car\"]\nprint(sol.longestCommonPrefix(strs))",
      5.7109375
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return self.longestCommonPrefix2(strs[0], strs[1])\n        prefix = self.longestCommonPrefix(strs[:2])\n        if not prefix:\n            return \"\"\n        for i in range(2, len(strs)):\n            if not self.longestCommonPrefix2(prefix, strs[i]):\n                return \"\"\n        return prefix\n\n    def longestCommonPrefix2(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        if len(str1) == 0 or len(str2) == 0:\n            return \"\"\n        if len(str1) > len(str2):\n            return self.longestCommonPrefix2(str2, str1)\n        for i in range(len(str1)):\n            if str1[i] != str2[i]:\n                return str1[:i]\n        return str1\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]\n    print(Solution().longestCommonPrefix(strs))",
      5.44921875
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\ndef longest_common_prefix2(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    min_length = min(map(len, strs))\n    for i in range(min_length):\n        char = strs[0][i]\n        for string in strs[1:]:\n            if string[i] != char:\n                return strs[0][:i]\n    return strs[0][:min_length]",
      5.34375
    ],
    [
      "def longest_common_prefix(strings):\n    \"\"\"\n    :param strings: List[str]\n    :return: str\n    \"\"\"\n    if not strings:\n        return \"\"\n    shortest_string = min(strings, key=len)\n    for i, char in enumerate(shortest_string):\n        for string in strings:\n            if string[i] != char:\n                return shortest_string[:i]\n    return shortest_string\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"hello\", \"heaven\", \"heavy\"]))\n    print(longest_common_prefix([\"hello\", \"heaven\", \"heavy\", \"\"]))\n    print(longest_common_prefix([]))\n    print(longest_common_prefix([\"\", \"heaven\", \"heavy\", \"\"]))\n    print(longest_common_prefix([\"\", \"\"]))\n    print(longest_common_prefix([\"a\", \"b\"]))\n    print(longest_common_prefix([\"aa\", \"aa\"]))\n    print(longest_common_prefix([\"aa\", \"a\"]))",
      5.16015625
    ],
    [
      "# O(n * m) time | O(1) space\ndef longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    shortestString = min(strs, key=len)\n    for i in range(len(shortestString)):\n        char = shortestString[i]\n        for string in strs:\n            if string[i] != char:\n                return shortestString[:i]\n    return shortestString\n\n\n\"\"\"\nTime complexity: O(n*m)\nSpace complexity: O(1)\n\"\"\"\n\n\n# O(n * m) time | O(n) space\ndef longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    shortestString = min(strs, key=len)\n    for i in range(len(shortestString)):\n        char = shortestString[i]\n        for string in strs:\n            if i == len(string) or string[i] != char:\n                return shortestString[:i]\n    return shortestString",
      4.5
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while not strs[i].startswith(prefix):\n                prefix = prefix[:len(prefix) - 1]\n                if len(prefix) == 0:\n                    return \"\"\n        return prefix\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.longestCommonPrefix([\"dog\", \"race\", \"car\"])",
      4.43359375
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n    prefix = strs[0]\n    for i in range(len(prefix)):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[:i]\n    return prefix\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      4.375
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        min_length = min(len(s) for s in strs)\n        for i in range(min_length):\n            c = strs[0][i]\n            for j in range(1, len(strs)):\n                if strs[j][i] != c:\n                    return strs[0][:i]\n        return strs[0][:min_length]\n\n\nif __name__ == \"__main__\":\n    print(Solution().longestCommonPrefix([]))\n    print(Solution().longestCommonPrefix([\"a\"]))\n    print(Solution().longestCommonPrefix([\"a\", \"a\"]))\n    print(Solution().longestCommonPrefix([\"a\", \"ab\"]))\n    print(Solution().longestCommonPrefix([\"ab\", \"a\"]))\n    print(Solution().longestCommonPrefix([\"a\", \"b\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"a\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"aa\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"aab\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"aab\", \"a\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"aab\", \"ab\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"aab\", \"abc\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"aab\", \"abcd\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"aab\", \"acb\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"aab\", \"ac\"]))\n    print(Solution().longestCommonPrefix([\"aa\", \"aab\", \"ab\", \"a\"]))",
      4.34765625
    ],
    [
      "from typing import List\n\n\ndef longest_common_prefix(strings: List[str]) -> str:\n    \"\"\"\n    Time Complexity: O(n*k)\n    \"\"\"\n    if not strings:\n        return \"\"\n\n    for i in range(len(strings[0])):\n        char = strings[0][i]\n\n        for string in strings[1:]:\n            if i == len(string) or string[i] != char:\n                return strings[0][:i]\n\n    return strings[0]\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([]))\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))\n    print(longest_common_prefix([\"dog\", \"race\", \"car\"]))\n    print(longest_common_prefix([\"\"]))",
      4.15625
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    # Runtime: 32 ms\n    # Memory: 13.2 MB\n    if len(strs) == 0:\n        return \"\"\n    min_length = min(len(s) for s in strs)\n    for idx in range(min_length):\n        c = strs[0][idx]\n        for s in strs[1:]:\n            if s[idx] != c:\n                return strs[0][:idx]\n    return strs[0][:min_length]\n\n\ndef longest_common_prefix2(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    # Runtime: 36 ms\n    # Memory: 13.2 MB\n    if len(strs) == 0:\n        return \"\"\n    min_length = min(len(s) for s in strs)\n    for idx, s in enumerate(zip(*strs)):\n        if len(set(s)) != 1:\n            return strs[0][:idx]\n    return strs[0][:min_length]\n\n\nif __name__ == \"__main__\":\n    import timeit\n    print(timeit.timeit('longest_common_prefix([\"flower\",\"flow\",\"flight\"])', setup=\"from __main__ import longest_common_prefix\"))\n    print(timeit.timeit('longest_common_prefix2([\"flower\",\"flow\",\"flight\"])', setup=\"from __main__ import longest_common_prefix2\"))",
      4.046875
    ],
    [
      "# O(m*n) time | O(m) space\ndef longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n\n    shortestString = min(strs, key=len)\n    for i, char in enumerate(shortestString):\n        for otherStr in strs:\n            if otherStr[i] != char:\n                return shortestString[:i]\n\n    return shortestString\n\n\n# O(n) time | O(m) space\ndef longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n\n    firstString = strs[0]\n    for i, char in enumerate(firstString):\n        for otherStr in strs[1:]:\n            if i == len(otherStr) or otherStr[i] != char:\n                return firstString[:i]\n\n    return firstString",
      4.0234375
    ],
    [
      "from typing import List\n\n\ndef longest_common_prefix(strs: List[str]) -> str:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not strs:\n        return \"\"\n\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i == len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\nif __name__ == \"__main__\":\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"",
      4.015625
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    for i in range(len(strs[0])):\n        for string in strs:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n\n    return strs[0]\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([\"a\", \"b\", \"a\"]) == \"a\"\n    assert longest_common_prefix([\"a\", \"a\", \"a\"]) == \"a\"\n    assert longest_common_prefix([\"aa\", \"aa\", \"aa\"]) == \"aa\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      3.986328125
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return ''\n    for i in range(len(strs[0])):\n        for j in range(len(strs)):\n            if i == len(strs[j]) or strs[j][i] != strs[0][i]:\n                return strs[0][0:i]\n    return strs[0]\n\n\nif __name__ == '__main__':\n    print(longest_common_prefix([\"flower\",\"flow\",\"flight\"]))",
      3.9375
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        while strs[i].find(prefix) != 0:\n            prefix = prefix[:-1]\n    return prefix\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))\n    print(longest_common_prefix([\"\"]))",
      3.705078125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        elif len(strs) == 1:\n            return strs[0]\n        else:\n            prefix = strs[0]\n            for i in range(1, len(strs)):\n                while strs[i].find(prefix) != 0:\n                    prefix = prefix[:-1]\n            return prefix\n\n\na = Solution()\nprint a.longestCommonPrefix([\"\", \"a\", \"b\", \"c\"])",
      3.65625
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for string in strs:\n            if string[i] != char:\n                return shortest[:i]\n    return shortest",
      3.048828125
    ],
    [
      "# O(mn) time | O(1) space\ndef longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    shortestString = min(strs, key=len)\n    for i in range(len(shortestString)):\n        currentChar = shortestString[i]\n        for string in strs:\n            if string[i] != currentChar:\n                return shortestString[:i]\n    return shortestString\n\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
      2.947265625
    ],
    [
      "class Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1]\n                if prefix == \"\":\n                    return \"\"\n        return prefix\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))\n    print(s.longestCommonPrefix([\"dog\", \"racecar\", \"car\"]))\n    print(s.longestCommonPrefix([\"aa\", \"a\"]))",
      2.869140625
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        # O(n)\n        min_len = min(map(len, strs))\n        for i in range(min_len):\n            # O(n)\n            if len(set(s[i] for s in strs)) == 1:\n                continue\n            else:\n                return strs[0][:i]\n        return strs[0][:min_len]\n\n\na = Solution()\nassert \"fl\" == a.longestCommonPrefix([\"flower\", \"flow\", \"flight\"])\nassert \"\" == a.longestCommonPrefix([\"dog\", \"racecar\", \"car\"])\nassert \"\" == a.longestCommonPrefix([\"aa\", \"a\"])",
      2.72265625
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n\n    for i in range(len(strs[0])):\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[j][i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\",\"racecar\",\"car\"]) == \"\"\n    assert longest_common_prefix([\"a\",\"a\",\"aa\"]) == \"a\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      2.62890625
    ],
    [
      "def longest_common_prefix(strs: list) -> str:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(1)\n\n    @param strs: list[str]\n    @return: str\n    \"\"\"\n\n    if not strs:\n        return \"\"\n\n    for i in range(len(strs[0])):\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[j][i] != strs[j - 1][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]\n    print(longest_common_prefix(strs))",
      2.53125
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    elif len(strs) == 2:\n        return common_prefix(strs[0], strs[1])\n    else:\n        return longest_common_prefix([longest_common_prefix(strs[:2])] + strs[2:])\n\n\ndef common_prefix(a, b):\n    \"\"\"\n    :type a: str\n    :type b: str\n    :rtype: str\n    \"\"\"\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i] == b[i]:\n            i += 1\n        else:\n            break\n    return a[:i]\n\n\nif __name__ == '__main__':\n    print longest_common_prefix([\"abcdefgh\", \"abcdefghi\", \"abcdefghij\"])\n    print longest_common_prefix([\"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijklmnop\"])\n    print longest_common_prefix([\"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijklmnop\", \"abcdefghijklmop\"])\n    print longest_common_prefix([\"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijklmnop\", \"abcdefghijklmop\", \"abcdefghijklmnopq\"])\n    print longest_common_prefix([\"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijklmnop\", \"abcdefghijklmop\", \"abcdefghijklmnopq\", \"abcdefghijklmnopqr\"])",
      2.349609375
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        shortest = min(strs, key=len)\n        for i, ch in enumerate(shortest):\n            for other in strs:\n                if other[i] != ch:\n                    return shortest[:i]\n        return shortest\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.longestCommonPrefix([\"hello\", \"heaven\", \"helloworld\"])",
      2.29296875
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    prefix = strs[0]\n    for i in range(len(prefix)):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[:i]\n    return prefix\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"",
      2.26953125
    ],
    [
      "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while not prefix.startswith(strs[i]):\n                prefix = prefix[:-1]\n        return prefix\n\n\nprint(longest_common_prefix([\"c\", \"c\", \"c\"]))\nprint(longest_common_prefix([\"ab\", \"a\"]))\nprint(longest_common_prefix([\"a\", \"b\"]))\nprint(longest_common_prefix([\"a\", \"b\", \"c\"]))\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))",
      2.25
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if len(strs) == 0:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    else:\n        strs.sort()\n        if strs[0] == \"\":\n            return \"\"\n        for i in range(len(strs[0])):\n            if strs[0][i] != strs[len(strs)-1][i]:\n                return strs[0][:i]\n        return strs[0]\n\n\nif __name__ == '__main__':\n    print longest_common_prefix([\"abc\", \"abd\", \"ab\"])\n    print longest_common_prefix([\"flower\",\"flow\",\"flight\"])\n    print longest_common_prefix([\"dog\",\"racecar\",\"car\"])\n    print longest_common_prefix([\"dog\",\"doge\",\"dog\"])\n    print longest_common_prefix([\"dog\",\"dog\",\"dog\"])\n    print longest_common_prefix([\"dog\",\"dogg\",\"dog\"])",
      2.23828125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        min_str = min(strs, key=len)\n        for i, c in enumerate(min_str):\n            for s in strs:\n                if s[i] != c:\n                    return min_str[:i]\n        return min_str\n\n\nif __name__ == \"__main__\":\n    print(Solution().longestCommonPrefix([\"ab\", \"a\"]))",
      2.08984375
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    shortest = min(strs, key=len)\n\n    for i, ch in enumerate(shortest):\n        for other in strs:\n            if other[i] != ch:\n                return shortest[:i]\n\n    return shortest",
      2.08203125
    ],
    [
      "def longestCommonPrefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    # check for empty list\n    if not strs:\n        return \"\"\n\n    # find the shortest string length\n    shortest = min(strs, key=len)\n\n    for i, char in enumerate(shortest):\n        for string in strs:\n            if string[i] != char:\n                return shortest[:i]\n\n    return shortest\n\n\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
      2.029296875
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    strs.sort()\n    return strs[0][:len(longest_common_prefix(strs[1:])) + 1]\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      1.8916015625
    ],
    [
      "from collections import Counter\n\n\ndef longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    counter = Counter(strs)\n    char_count = counter.most_common()[0][1]\n    for i in range(char_count):\n        if counter.most_common()[0][1] != counter.least_common()[0][1]:\n            return strs[0][:i]\n    return strs[0][:char_count]\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      1.68359375
    ],
    [
      "def longest_common_prefix(strs: list[str]) -> str:\n    \"\"\"\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_common_prefix(['dog', 'racecar', 'car'])\n    ''\n    >>> longest_common_prefix(['aa', 'a'])\n    'a'\n    \"\"\"\n    if not strs:\n        return \"\"\n    min_str = min(strs)\n    max_str = max(strs)\n    for i, char in enumerate(min_str):\n        if char != max_str[i]:\n            return min_str[:i]\n    return min_str\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.62109375
    ],
    [
      "from typing import List\n\n\ndef longest_common_prefix(strs: List[str]) -> str:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(k)\n    \"\"\"\n\n    if not strs:\n        return \"\"\n\n    prefix = strs[0]\n    for string in strs[1:]:\n        for i in range(len(prefix)):\n            if prefix[i] != string[i]:\n                prefix = prefix[:i]\n                break\n\n    return prefix\n\n\nif __name__ == \"__main__\":\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([\"dog\", \"dog\", \"dog\"]) == \"dog\"",
      1.2470703125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        if len(strs) == 1:\n            return strs[0]\n        # find the shortest string in the list\n        shortest = min(strs, key=len)\n        # check for every character in the shortest string\n        for i, char in enumerate(shortest):\n            for string in strs:\n                if string[i] != char:\n                    return shortest[:i]\n        return shortest\n\n\na = Solution()\nassert a.longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\nassert a.longestCommonPrefix([\"dog\",\"racecar\",\"car\"]) == \"\"\nassert a.longestCommonPrefix([\"a\",\"b\"]) == \"a\"\nassert a.longestCommonPrefix([\"a\"]) == \"a\"\nassert a.longestCommonPrefix([\"aa\",\"a\"]) == \"a\"",
      1.2158203125
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    strs.sort()\n    first = strs[0]\n    last = strs[-1]\n    for i, c in enumerate(first):\n        if c != last[i]:\n            return first[:i]\n    return first\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))",
      1.21484375
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, ch in enumerate(shortest):\n        for other in strs:\n            if other[i] != ch:\n                return shortest[:i]\n    return shortest\n\n\nif __name__ == \"__main__\":\n    print(longest_common_prefix([\"hello\", \"heaven\", \"heat\", \"hello world\"]))",
      1.1611328125
    ],
    [
      "def longest_common_prefix(strings):\n    \"\"\"\n    :param strings: list[str]\n    :return: str\n    \"\"\"\n    if not strings:\n        return \"\"\n\n    if len(strings) == 1:\n        return strings[0]\n\n    min_length = len(min(strings, key=len))\n\n    for i in range(min_length):\n        for string in strings:\n            if string[i] != strings[0][i]:\n                return string[:i]\n\n    return strings[0][:min_length]",
      1.16015625
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        min_length = min(len(s) for s in strs)\n        for i in range(min_length):\n            current = strs[0][i]\n            for s in strs:\n                if s[i] != current:\n                    return strs[0][:i]\n        return strs[0][:min_length]\n\n\nclass Solution2(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs[1:]:\n            while s.find(prefix) != 0:\n                prefix = prefix[:-1]\n        return prefix",
      1.0908203125
    ],
    [
      "def longest_common_prefix(strings):\n    \"\"\"\n    >>> longest_common_prefix([''])\n    ''\n    >>> longest_common_prefix(['a', 'b'])\n    ''\n    >>> longest_common_prefix(['a', 'a'])\n    'a'\n    >>> longest_common_prefix(['a', 'ab'])\n    'a'\n    >>> longest_common_prefix(['ab', 'abc'])\n    'ab'\n    >>> longest_common_prefix(['ab', 'ac'])\n    ''\n    >>> longest_common_prefix(['abc', 'abc'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return \"\"\n\n    min_length = min(len(string) for string in strings)\n    for i in range(min_length):\n        if len(set(string[i] for string in strings)) > 1:\n            return strings[0][:i]\n    return strings[0][:min_length]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.05859375
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs[1:]:\n            while s.find(prefix) != 0:\n                prefix = prefix[:-1]\n                if not prefix:\n                    return \"\"\n        return prefix\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.longestCommonPrefix([\"abc\", \"ab\", \"abcd\"]))\n    print(solution.longestCommonPrefix([\"abc\", \"abcd\"]))",
      1.048828125
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, ch in enumerate(shortest):\n        for other in strs:\n            if other[i] != ch:\n                return shortest[:i]\n    return shortest",
      0.9521484375
    ],
    [
      "def longest_common_prefix(strings):\n    \"\"\"\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_common_prefix(['dog', 'racecar', 'car'])\n    ''\n    >>> longest_common_prefix([''])\n    ''\n    \"\"\"\n    if not strings:\n        return \"\"\n\n    shortest = min(strings, key=len)\n\n    for i, char in enumerate(shortest):\n        for string in strings:\n            if string[i] != char:\n                return shortest[:i]\n\n    return shortest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.79052734375
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    for i in range(len(strs[0])):\n        curr = strs[0][:i + 1]\n        for s in strs[1:]:\n            if not s.startswith(curr):\n                return curr[:-1]\n    return strs[0]\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\",\"racecar\",\"car\"]) == \"\"\n    assert longest_common_prefix([\"a\",\"a\",\"a\"]) == \"a\"\n    assert longest_common_prefix([\"aa\",\"a\"]) == \"a\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      0.75048828125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        min_len = min([len(s) for s in strs])\n        for i in range(min_len):\n            check_char = strs[0][i]\n            for j in range(1, len(strs)):\n                if strs[j][i] != check_char:\n                    return strs[0][:i]\n        return strs[0][:min_len]\n\n\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]\n    obj = Solution()\n    print(obj.longestCommonPrefix(strs))",
      0.7421875
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return ''\n    shortest = min(strs, key=len)\n    for i, ch in enumerate(shortest):\n        for other in strs:\n            if other[i] != ch:\n                return shortest[:i]\n    return shortest\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"",
      0.7373046875
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    shortest = min(strs, key=len)\n\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n\n    return shortest\n\n\nif __name__ == '__main__':\n    print longest_common_prefix([\"abcdefgh\", \"abcefgh\"])",
      0.5244140625
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    strs.sort()\n    smallest = strs[0]\n    largest = strs[-1]\n    for i, c in enumerate(smallest):\n        if c != largest[i]:\n            return largest[:i]\n    return smallest\n\n\ndef test_case(strs, solution, test_func=longest_common_prefix):\n    output = test_func(strs)\n    if output == solution:\n        print(\"Congratulations!\")\n    else:\n        print(f\"'{output}' != '{solution}'\")\n\n\nif __name__ == \"__main__\":\n    test_case([\"flower\", \"flow\", \"flight\"], \"fl\")\n    test_case([\"dog\", \"racecar\", \"car\"], \"\")\n    test_case([\"\"], \"\")",
      0.48193359375
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    return shortest",
      0.48046875
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    min_length = min(map(len, strs))\n    for i in range(min_length):\n        chars = set(map(lambda x: x[i], strs))\n        if len(chars) != 1:\n            return strs[0][:i]\n    return strs[0][:min_length]\n\n\nif __name__ == '__main__':\n    print(longest_common_prefix([\"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]))",
      0.463623046875
    ],
    [
      "from functools import reduce\n\n\ndef longest_common_prefix(strs):\n    return reduce(lambda x, y: x[:len(y)], strs, strs[0])\n\n\nprint(longest_common_prefix([\"hello\", \"heaven\", \"hell\"]))\nprint(longest_common_prefix([\"hello\", \"heaven\", \"he\"]))",
      0.189208984375
    ],
    [
      "def longest_common_prefix(s):\n    \"\"\"\n    >>> longest_common_prefix([\"flower\", \"flow\", \"flight\"])\n    'fl'\n    >>> longest_common_prefix([\"dog\", \"racecar\", \"car\"])\n    ''\n    \"\"\"\n    if not s:\n        return \"\"\n    shortest = min(s, key=len)\n    for i, char in enumerate(shortest):\n        for word in s:\n            if word[i] != char:\n                return shortest[:i]\n    return shortest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.1468505859375
    ],
    [
      "def longest_common_prefix(strings):\n    \"\"\"\n    :param strings: list[str]\n    :return: str\n    \"\"\"\n    if not strings:\n        return \"\"\n    for i in range(len(strings[0])):\n        for string in strings[1:]:\n            if i == len(string) or string[i] != strings[0][i]:\n                return strings[0][:i]\n    return strings[0]\n\n\ndef test_function(test_case):\n    strings = test_case[0]\n    solution = test_case[1]\n    output = longest_common_prefix(strings)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nstrings = ['helloworld','hello','heaven']\nsolution = 'hello'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['dogcatdog','dogcat']\nsolution = 'dogcat'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['dogcatdog','catdog']\nsolution = ''\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['hello','heaven','he']\nsolution = 'he'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['hello','heaven','hel']\nsolution = ''\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['hello','heaven','']\nsolution = ''\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['hello','heaven','hell']\nsolution = 'hell'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['hello','heaven','h']\nsolution = 'h'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['hello','heaven','hi']\nsolution = ''\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['",
      0.01387786865234375
    ],
    [
      "def longest_common_prefix(list_of_strings):\n    \"\"\"\n    :param list_of_strings: list of strings\n    :return: longest common prefix\n    :rtype: str\n    \"\"\"\n    if not list_of_strings:\n        return \"\"\n\n    # get the shortest string in the list\n    shortest_string = min(list_of_strings, key=len)\n\n    for i, char in enumerate(shortest_string):\n        for other_string in list_of_strings:\n            if other_string[i] != char:\n                return shortest_string[:i]\n\n    return shortest_string\n\n\nif __name__ == \"__main__\":\n\n    test_case_1 = [\"flower\", \"flow\", \"flight\"]\n    print longest_common_prefix(test_case_1)\n\n    test_case_2 = [\"dog\", \"racecar\", \"car\"]\n    print longest_common_prefix(test_case_2)\n\n    test_case_3 = []\n    print longest_common_prefix(test_case_3)\n\n    test_case_4 = [\"a\"]\n    print longest_common_prefix(test_case_4)\n\n    test_case_5 = [\"flower\", \"flow\", \"flight\", \"flowing\"]\n    print longest_common_prefix(test_case_5)\n\n    test_case_6 = [\"dog\", \"racecar\", \"car\", \"\"]\n    print longest_common_prefix(test_case_6)\n\n    test_case_7 = [\"a\", \"a\"]\n    print longest_common_prefix(test_case_7)\n\n    test_case_8 = [\"flower\", \"flow\", \"flight\", \"flowing\", \"flow\"]\n    print longest_common_prefix(test_case_8)\n\n    test_case_9 = [\"flower\", \"flow\", \"flight\", \"flowing\", \"flow\", \"\"]\n    print longest_common_prefix(test_case_9)\n\n    test_case_10 = [\"dog\", \"racecar\", \"car\", \"\", \"\"]\n    print longest_common_prefix(test_case_",
      -0.06280517578125
    ],
    [
      "def longest_common_prefix(strings: list[str]) -> str:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n)\n\n    :param strings: list[str] - list of strings\n    :return: str - longest common prefix\n    \"\"\"\n\n    if not strings:\n        return \"\"\n\n    # Get the minimum length of all strings\n    min_length = min(strings, key=len)\n\n    # Start with the first character and check if it matches all the strings\n    # Keep doing this until the first character doesn't match\n    for i in range(len(min_length)):\n        for string in strings:\n            if string[i] != min_length[i]:\n                return min_length[:i]\n\n    return min_length\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"flower\", \"flow\", \"flight\"], \"fl\"),\n        ([\"dog\", \"racecar\", \"car\"], \"\"),\n        ([\"a\", \"a\", \"a\"], \"a\"),\n        ([\"\", \"b\"], \"\"),\n        ([\"c\"], \"c\"),\n        ([], \"\"),\n        ([\"flower\", \"flow\", \"flight\", \"flowering\"], \"flow\"),\n    ]\n\n    for test_case, expected_result in test_cases:\n        assert longest_common_prefix(test_case) == expected_result",
      -0.2384033203125
    ],
    [
      "from typing import List\n\n\ndef longest_common_prefix(strs: List[str]) -> str:\n    \"\"\"\n    >>> longest_common_prefix(['abc', 'abd', 'ab'])\n    'ab'\n\n    >>> longest_common_prefix(['ab', 'abc'])\n    'ab'\n\n    >>> longest_common_prefix(['abc', 'abc'])\n    'abc'\n\n    >>> longest_common_prefix([''])\n    ''\n\n    >>> longest_common_prefix([])\n    ''\n\n    >>> longest_common_prefix(['ab', 'a'])\n    'a'\n\n    >>> longest_common_prefix(['a', 'ab'])\n    ''\n\n    >>> longest_common_prefix(['a', 'b', 'c', 'd'])\n    ''\n    \"\"\"\n\n    if not strs:\n        return \"\"\n\n    min_length = min(len(string) for string in strs)\n\n    for i in range(min_length):\n        if len({string[i] for string in strs}) != 1:\n            return strs[0][: i]\n\n    return strs[0][:min_length]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.26220703125
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    return shortest\n\ndef test_function(test_case):\n    strings = test_case[0]\n    solution = test_case[1]\n    output = longest_common_prefix(strings)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nstrings = ['abcd', 'ab', 'abcef']\nsolution = 'ab'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['', 'ab', 'abcef']\nsolution = ''\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['', '']\nsolution = ''\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['aa', 'a']\nsolution = 'a'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['flower', 'flow', 'flight']\nsolution = 'fl'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['dog', 'racecar', 'car']\nsolution = ''\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['']\nsolution = ''\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['']\nsolution = ''\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['a', 'a', 'a']\nsolution = 'a'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['b']\nsolution = 'b'\ntest_case = [strings, solution]\ntest_function(test_case)\n\nstrings = ['aa', '",
      -0.30126953125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        min_len = min([len(s) for s in strs])\n        for i in range(min_len):\n            c = strs[0][i]\n            for j in range(1, len(strs)):\n                if strs[j][i] != c:\n                    return strs[0][:i]\n        return strs[0][:min_len]\n\n\nif __name__ == '__main__':\n    print(Solution().longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
      -0.3173828125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        strs.sort()\n        if len(strs) == 1:\n            return strs[0]\n        for i in range(len(strs[0])):\n            if strs[0][i] != strs[-1][i]:\n                return strs[0][:i]\n        return strs[0]",
      -0.3251953125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        min_len = min(map(len, strs))\n        for i in range(min_len):\n            c = strs[0][i]\n            for j in range(1, len(strs)):\n                if strs[j][i] != c:\n                    return strs[0][:i]\n        return strs[0][:min_len]",
      -0.471923828125
    ],
    [
      "# O(N * M)\ndef longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        while strs[i].find(prefix) != 0:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\n\n# O(N * logN)\ndef longest_common_prefix_2(strs):\n    if not strs:\n        return \"\"\n\n    min_str = min(strs)\n    max_str = max(strs)\n    for i in range(len(min_str)):\n        if min_str[i] != max_str[i]:\n            return min_str[:i]\n    return min_str",
      -0.517578125
    ],
    [
      "def longest_common_prefix(s):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not s:\n        return \"\"\n    for i in range(len(s[0])):\n        for j in range(len(s)):\n            if i == len(s[j]) or s[j][i] != s[0][i]:\n                return s[0][:i]\n    return s[0]\n\ndef test_longest_common_prefix():\n    s = [\"flower\",\"flow\",\"flight\"]\n    assert longest_common_prefix(s) == \"fl\"\n\n    s = [\"dog\",\"racecar\",\"car\"]\n    assert longest_common_prefix(s) == \"\"\n\n    s = []\n    assert longest_common_prefix(s) == \"\"\n\n    s = [\"aa\",\"a\"]\n    assert longest_common_prefix(s) == \"a\"\n\n    s = [\"aa\",\"aa\"]\n    assert longest_common_prefix(s) == \"aa\"\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      -0.53564453125
    ],
    [
      "def longest_common_prefix(strs: list[str]) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not strs:\n        return \"\"\n\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i == len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\nif __name__ == \"__main__\":\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\",\"racecar\",\"car\"]) == \"\"\n    assert longest_common_prefix([\"a\",\"a\",\"a\"]) == \"a\"\n    assert longest_common_prefix([\"\",\"\"]) == \"\"\n    assert longest_common_prefix([\"\",\"a\"]) == \"\"",
      -0.55908203125
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return ''\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i == len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]",
      -0.65380859375
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    min_len = min([len(s) for s in strs])\n    for i in range(min_len):\n        if len(set([s[i] for s in strs])) > 1:\n            return strs[0][:i]\n    return strs[0][:min_len]\n\n\nprint(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))\nprint(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))\nprint(longest_common_prefix([]))\nprint(longest_common_prefix([\"a\"]))\nprint(longest_common_prefix([\"aa\", \"aa\", \"aa\"]))",
      -0.66162109375
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i == len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\nprint(longest_common_prefix([\"hello\", \"heaven\", \"heavy\", \"heat\"]))\nprint(longest_common_prefix([\"dog\", \"race\", \"dogs\"]))",
      -0.7041015625
    ],
    [
      "def longest_common_prefix(strings):\n    \"\"\"\n    >>> longest_common_prefix([\"hello\", \"heaven\", \"heat\"])\n    'he'\n    >>> longest_common_prefix([\"dog\", \"racecar\", \"car\"])\n    ''\n    \"\"\"\n    if not strings:\n        return \"\"\n    shortest = min(strings, key=len)\n    for i, letter in enumerate(shortest):\n        for other in strings:\n            if other[i] != letter:\n                return shortest[:i]\n    return shortest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "# O(N * M) time | O(1) space\ndef longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n    shortestStr = min(strs, key=len)\n    for i in range(len(shortestStr)):\n        char = shortestStr[i]\n        for otherStr in strs:\n            if otherStr[i] != char:\n                return shortestStr[:i]\n    return shortestStr",
      -0.85595703125
    ],
    [
      "def longest_common_prefix(strings):\n    if not strings:\n        return \"\"\n\n    # find length of shortest string\n    min_len = len(min(strings, key=len))\n\n    for i in range(min_len):\n        # if there is a mismatch at ith index, return prefix until that index\n        if len({string[i] for string in strings}) != 1:\n            return strings[0][:i]\n\n    return strings[0][:min_len]",
      -0.85595703125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while not strs[i].startswith(prefix):\n                prefix = prefix[:-1]\n        return prefix\n\n\nif __name__ == \"__main__\":\n    print(Solution().longestCommonPrefix([\"\", \"\"]))",
      -0.85791015625
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs[1:]:\n            while s.find(prefix) != 0:\n                prefix = prefix[:-1]\n        return prefix\n\n\nif __name__ == \"__main__\":\n    print(Solution().longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))",
      -0.85791015625
    ],
    [
      "def longest_common_prefix(strs):\n    if len(strs) == 0:\n        return \"\"\n    else:\n        strs.sort()\n        return strs[0][:len(strs[0]) - len(strs[0]) // 2]\n\n\nprint(longest_common_prefix([\"abcdefgh\", \"abcdefghi\", \"abcdefghi1\"]))",
      -0.85791015625
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    min_len = min(len(s) for s in strs)\n    for i in range(min_len):\n        c = strs[0][i]\n        for s in strs:\n            if s[i] != c:\n                return strs[0][:i]\n    return strs[0][:min_len]\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([\"a\"]) == \"a\"",
      -0.8583984375
    ],
    [
      "def longest_common_prefix(strings):\n    \"\"\"\n    :type strings: List[str]\n    :rtype: str\n    \"\"\"\n    if not strings:\n        return \"\"\n    for i in range(len(strings[0])):\n        for string in strings:\n            if i >= len(string) or strings[0][i] != string[i]:\n                return strings[0][:i]\n    return strings[0]\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"dog\",\"racecar\",\"car\"]) == \"car\"\n    assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        prefix = strs[0]\n        for s in strs[1:]:\n            while s.find(prefix) != 0:\n                prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n        return prefix\n\n\na = Solution()\nassert \"fl\" == a.longestCommonPrefix([\"flower\", \"flow\", \"flight\"])\nassert \"\" == a.longestCommonPrefix([\"dog\", \"racecar\", \"car\"])",
      -0.8583984375
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if char != other[i]:\n                return shortest[:i]\n    return shortest",
      -0.8583984375
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    return shortest\n\n\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"",
      -0.86083984375
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        result = \"\"\n        for i in range(len(strs[0])):\n            char = strs[0][i]\n            for j in range(1, len(strs)):\n                if i == len(strs[j]) or strs[j][i] != char:\n                    return result\n            result += char\n        return result",
      -1.0673828125
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    shortest_str = min(strs, key=len)\n    for i, char in enumerate(shortest_str):\n        for other in strs:\n            if other[i] != char:\n                return shortest_str[:i]\n    return shortest_str",
      -1.09375
    ],
    [
      "def longest_common_prefix(list_of_strings):\n    \"\"\"\n    >>> longest_common_prefix(['']*100)\n    ''\n    >>> longest_common_prefix(['a']*100)\n    'a'\n    >>> longest_common_prefix(['', 'a', 'aa', 'b'])\n    ''\n    >>> longest_common_prefix(['aa', 'aa', 'aa'])\n    'aa'\n    >>> longest_common_prefix(['aa', 'a', 'aa'])\n    'a'\n    >>> longest_common_prefix(['aa', 'a', 'ab'])\n    'a'\n    \"\"\"\n    if not list_of_strings:\n        return ''\n    for index, letter in enumerate(list_of_strings[0]):\n        for string in list_of_strings[1:]:\n            if index >= len(string) or string[index] != letter:\n                return string[:index]\n    return list_of_strings[0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.236328125
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return ''\n        elif len(strs) == 1:\n            return strs[0]\n        else:\n            for i in range(len(strs[0])):\n                for string in strs[1:]:\n                    if i >= len(string) or strs[0][i] != string[i]:\n                        return strs[0][:i]\n            return strs[0]\n\n\na = Solution()\nprint(a.longestCommonPrefix([\"abc\", \"ab\", \"abcd\"]))",
      -1.4296875
    ],
    [
      "def longest_common_prefix(strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n\n    return strs[0]\n\n\ndef test_longest_common_prefix():\n    s = [\"flower\", \"flow\", \"flight\"]\n    assert longest_common_prefix(s) == \"fl\"\n\n\nif __name__ == '__main__':\n    test_longest_common_prefix()",
      -1.431640625
    ],
    [
      "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        for i in range(len(strs[0])):\n            c = strs[0][i]\n            for j in range(1, len(strs)):\n                if i == len(strs[j]) or c != strs[j][i]:\n                    return strs[0][:i]\n        return strs[0]\n\n\nif __name__ == '__main__':\n    print Solution().longestCommonPrefix([\"hello\", \"heaven\", \"heavy\"])",
      -1.5361328125
    ],
    [
      "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    for i in range(len(strs[0])):\n        for string in strs[1:]:\n            if i == len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [\"hello\", \"heaven\", \"heat\", \"hero\"],\n        [\"hello\", \"heaven\", \"heat\", \"heros\"],\n        [\"hello\", \"world\"],\n        [\"hello\", \"world\", \"hello\"],\n    ]\n    for test_case in test_cases:\n        print(longest_common_prefix(test_case))",
      -2.037109375
    ],
    [
      "from collections import Counter\n\ndef longest_common_prefix(strings):\n    if not strings:\n        return \"\"\n\n    for i in range(len(strings[0])):\n        current_char = strings[0][i]\n        for string in strings[1:]:\n            if i == len(string) or string[i] != current_char:\n                return strings[0][:i]\n\n    return strings[0]\n\ndef longest_common_prefix_v2(strings):\n    if not strings:\n        return \"\"\n\n    counter = Counter(char for string in strings for char in string)\n    common_chars = [char for char, count in counter.items() if count == len(strings)]\n\n    return \"\".join(common_chars)\n\ndef main():\n    print(\"Common prefix: \" + longest_common_prefix([\"hello\", \"heaven\", \"heavy\"]))\n    print(\"Common prefix: \" + longest_common_prefix([\"dog\", \"race\", \"car\"]))\n    print(\"Common prefix: \" + longest_common_prefix([\"flower\", \"flow\", \"flight\"]))\n\n    print(\"Common prefix: \" + longest_common_prefix_v2([\"hello\", \"heaven\", \"heavy\"]))\n    print(\"Common prefix: \" + longest_common_prefix_v2([\"dog\", \"race\", \"car\"]))\n    print(\"Common prefix: \" + longest_common_prefix_v2([\"flower\", \"flow\", \"flight\"]))\n\n\nif __name__ == '__main__':\n    main()",
      -3.833984375
    ],
    [
      "from collections import Counter\n\n\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n\n    count = Counter(strs)\n    max_char = count.most_common(1)[0][0]\n\n    for i, char in enumerate(max_char):\n        if count[char] != len(strs):\n            return max_char[:i]\n\n    return max_char\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"flower\", \"flow\", \"flight\"], \"fl\"),\n        ([\"dog\", \"racecar\", \"car\"], \"\"),\n        ([\"a\", \"a\", \"a\"], \"a\"),\n        ([\"\", \"b\"], \"\"),\n        ([\"\"], \"\"),\n    ]\n\n    for strs, expected in test_cases:\n        assert longest_common_prefix(strs) == expected",
      -4.0
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}