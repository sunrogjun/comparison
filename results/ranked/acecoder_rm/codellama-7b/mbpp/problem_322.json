{
  "problem": {
    "task_id": "MBPP/333",
    "prompt": "Write a python function to sort a list according to the second element in sublist.",
    "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
    "test_list": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ],
    "challenge_test_list": [],
    "problem_id": 322
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def sort_by_second_element(list1):\n    return sorted(list1, key=lambda x: x[1])\n\n\ndef main():\n    list1 = [[1, 3], [2, 1], [3, 2]]\n    print(\"Original list:\")\n    print(list1)\n    print(\"Sorted list:\")\n    print(sort_by_second_element(list1))\n\n\nif __name__ == \"__main__\":\n    main()",
      14.0234375
    ],
    [
      "def sort_by_second(arr):\n    \"\"\"\n    This function takes a list of sublists as an argument and returns the same list sorted by the second element in each sublist.\n\n    >>> sort_by_second([[1, 2], [3, 4], [6, 5], [7, 8]])\n    [[3, 4], [1, 2], [7, 8], [6, 5]]\n\n    >>> sort_by_second([[1, 2], [3, 4], [6, 5], [5, 8]])\n    [[3, 4], [1, 2], [5, 8], [6, 5]]\n\n    >>> sort_by_second([[1, 2], [3, 4], [6, 5], [7, 8], [5, 2]])\n    [[3, 4], [1, 2], [7, 8], [6, 5], [5, 2]]\n\n    >>> sort_by_second([[1, 2], [3, 4], [6, 5], [7, 8], [5, 2], [2, 1]])\n    [[3, 4], [1, 2], [7, 8], [6, 5], [5, 2], [2, 1]]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      11.2734375
    ],
    [
      "def sort_list(list_in: list) -> list:\n    \"\"\"\n    Sort a list according to the second element in sublist.\n    \"\"\"\n    return sorted(list_in, key=lambda x: x[1])\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = sort_list(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([[1, 2], [3, 4], [0, 5]], [[0, 5], [1, 2], [3, 4]]))\ntest_function(([[1, 1], [3, 3], [0, 0]], [[0, 0], [1, 1], [3, 3]]))\ntest_function(([[3, 2], [1, 0], [5, 4]], [[1, 0], [3, 2], [5, 4]]))",
      11.0859375
    ],
    [
      "def sort_list(list1):\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i][1] > list1[j][1]:\n                temp = list1[i]\n                list1[i] = list1[j]\n                list1[j] = temp\n    return list1\n\n\nprint(sort_list([['a', 4], ['b', 5], ['c', 3], ['d', 6]]))",
      10.9140625
    ],
    [
      "def sort_by_second(list_of_lists):\n    \"\"\"\n    Return a list of lists sorted by the second element.\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\ndef test_sort_by_second():\n    \"\"\"\n    Test to ensure that the list is sorted by the second element.\n    \"\"\"\n    assert sort_by_second([[1, 3], [1, 1], [1, 2]]) == [[1, 1], [1, 2], [1, 3]]\n    assert sort_by_second([[1, 3], [1, 1], [1, 2], [1, 3]]) == [\n        [1, 1],\n        [1, 2],\n        [1, 3],\n        [1, 3],\n    ]",
      9.6953125
    ],
    [
      "def second_element_sort(list_a):\n    return sorted(list_a, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    list_a = [[1, 2], [2, 4], [3, 1]]\n    print(second_element_sort(list_a))",
      9.6953125
    ],
    [
      "def second_element_sort(list_of_list):\n    \"\"\"\n    Sort the list of list according to the second element in sublist\n\n    :param list_of_list: list of list\n    :return: sorted list of list\n    \"\"\"\n    return sorted(list_of_list, key=lambda x: x[1])\n\n\ndef test_second_element_sort():\n    \"\"\"\n    Test for second_element_sort function.\n    \"\"\"\n    assert second_element_sort([[2, 2], [3, 3], [1, 1]]) == [[1, 1], [2, 2], [3, 3]]\n\n\nif __name__ == \"__main__\":\n    print(\"Second element sort\")\n    print(second_element_sort([[2, 2], [3, 3], [1, 1]]))",
      9.4765625
    ],
    [
      "def sort_by_second_element(list_of_lists):\n    \"\"\"\n    Sorts a list of lists according to the second element in sublist.\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[1])\n\nprint(sort_by_second_element([[1,2],[3,4],[2,3],[3,1]]))",
      9.4296875
    ],
    [
      "def sort_by_second_element(list_of_sublists):\n    return sorted(list_of_sublists, key=lambda x: x[1])\n\n\ndef test_sort_by_second_element():\n    list_of_sublists = [\n        [1, 3, 2],\n        [1, 2, 2],\n        [1, 1, 1]\n    ]\n\n    assert sort_by_second_element(list_of_sublists) == [\n        [1, 1, 1],\n        [1, 2, 2],\n        [1, 3, 2]\n    ]",
      8.6796875
    ],
    [
      "def sort_by_second(l):\n    \"\"\"\n    >>> sort_by_second([(1, 2), (3, 1), (2, 3)])\n    [(3, 1), (2, 3), (1, 2)]\n    \"\"\"\n    return sorted(l, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      8.359375
    ],
    [
      "from operator import itemgetter\n\n\ndef sort_by_second_element(list_of_lists):\n    \"\"\"\n    Sort a list by the second element of its sublist\n    \"\"\"\n    return sorted(list_of_lists, key=itemgetter(1))\n\n\ndef test_sort_by_second_element():\n    \"\"\"Test for sort_by_second_element function.\"\"\"\n    assert sort_by_second_element([[1, 2], [1, 3], [1, 1]]) == [[1, 1], [1, 2], [1, 3]]\n    assert sort_by_second_element([[1, 3], [1, 1], [1, 2]]) == [[1, 1], [1, 2], [1, 3]]\n    assert sort_by_second_element([[1, 1], [1, 2], [1, 3]]) == [[1, 1], [1, 2], [1, 3]]",
      7.50390625
    ],
    [
      "def sort_list(list1):\n    # Sort the list according to the second element in sublist\n    list1.sort(key=lambda x: x[1])\n    return list1\n\n\ndef main():\n    list1 = [[1, 2], [3, 4], [7, 8], [9, 10], [4, 5]]\n    new_list = sort_list(list1)\n    print(new_list)\n\n\nif __name__ == \"__main__\":\n    main()",
      7.43359375
    ],
    [
      "def sort_list(list_1):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n\n    >>> sort_list([[1, 2], [3, 4], [5, 1]])\n    [[5, 1], [3, 4], [1, 2]]\n    \"\"\"\n    return sorted(list_1, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      6.74609375
    ],
    [
      "from operator import itemgetter\n\n\ndef second_element_sort(list_of_list):\n    return sorted(list_of_list, key=itemgetter(1))\n\n\ndef main():\n    list_of_list = [[1, 2], [3, 4], [4, 3], [2, 1], [5, 6], [6, 5]]\n    print(\"Original list:\")\n    print(list_of_list)\n    print(\"Second element sort:\")\n    print(second_element_sort(list_of_list))\n\n\nif __name__ == '__main__':\n    main()",
      6.19140625
    ],
    [
      "def sort_list_by_second_element(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [\n        [\"John\", 20, 10],\n        [\"Bob\", 25, 9],\n        [\"James\", 23, 8],\n        [\"Paul\", 23, 10],\n    ]\n    print(sort_list_by_second_element(list_of_lists))",
      5.8671875
    ],
    [
      "def second_element_sort(list):\n    \"\"\"\n    >>> second_element_sort([[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9]])\n    [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9]]\n    >>> second_element_sort([[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[9,0]])\n    [[9, 0], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9]]\n    >>> second_element_sort([[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[9,0],[2,2]])\n    [[9, 0], [2, 2], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9]]\n    >>> second_element_sort([[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[9,0],[2,2],[2,3]])\n    [[9, 0], [2, 2], [2, 3], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9]]\n    \"\"\"\n    list.sort(key=lambda x: x[1])\n    return list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.80859375
    ],
    [
      "def sort_list(list1):\n    \"\"\"\n    >>> sort_list([(1, 2), (3, 4), (5, 6), (7, 8)])\n    [(3, 4), (1, 2), (5, 6), (7, 8)]\n    >>> sort_list([(2, 3), (1, 2), (5, 6), (7, 8)])\n    [(1, 2), (2, 3), (5, 6), (7, 8)]\n    >>> sort_list([(3, 4), (1, 2), (5, 6), (7, 8)])\n    [(1, 2), (3, 4), (5, 6), (7, 8)]\n    >>> sort_list([(2, 3), (1, 2), (5, 6), (7, 8)])\n    [(1, 2), (2, 3), (5, 6), (7, 8)]\n    >>> sort_list([(3, 4), (1, 2), (5, 6), (7, 8)])\n    [(1, 2), (3, 4), (5, 6), (7, 8)]\n    >>> sort_list([(2, 3), (1, 2), (5, 6), (7, 8)])\n    [(1, 2), (2, 3), (5, 6), (7, 8)]\n    >>> sort_list([(3, 4), (1, 2), (5, 6), (7, 8)])\n    [(1, 2), (3, 4), (5, 6), (7, 8)]\n    >>> sort_list([(2, 3), (1, 2), (5, 6), (7, 8)])\n    [(1, 2), (2, 3), (5, 6), (7, 8)]\n    \"\"\"\n    return sorted(list1, key=lambda x: x[1])\n\nif __name__ == \"__main__\":\n    import do",
      4.65234375
    ],
    [
      "from operator import itemgetter\n\ndef sort_list(list_of_lists):\n    return sorted(list_of_lists, key=itemgetter(1))\n\nif __name__ == \"__main__\":\n    test_list = [\n        [1, 2],\n        [2, 1],\n        [2, 3],\n        [3, 4],\n        [1, 3],\n        [2, 5],\n    ]\n    print(sort_list(test_list))",
      4.0625
    ],
    [
      "def sort_by_second(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    list_of_lists = [[1, 3], [1, 1], [1, 2], [1, 4], [1, 5]]\n    print(sort_by_second(list_of_lists))",
      3.65625
    ],
    [
      "from random import randint\n\n\ndef second_element(lst):\n    \"\"\"Sort the list according to the second element in sublist.\"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\n\ndef main():\n    \"\"\"Call second_element function.\"\"\"\n    lst = []\n    for _ in range(10):\n        lst.append([randint(1, 10), randint(1, 10)])\n    print(lst)\n    print(second_element(lst))\n\n\nif __name__ == '__main__':\n    main()",
      3.484375
    ],
    [
      "from random import randint\n\n\ndef get_sorted_list(list_: list) -> list:\n    return sorted(list_, key=lambda x: x[1])\n\n\ndef main():\n    list_ = [[randint(0, 100), randint(0, 100)] for i in range(10)]\n    print(list_)\n    print(get_sorted_list(list_))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.2109375
    ],
    [
      "from operator import itemgetter\n\n\ndef sort_list(arr):\n    return sorted(arr, key=itemgetter(1))\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = sort_list(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [[1, 2], [4, 3], [9, 5], [6, 7]]\nsolution = [[4, 3], [1, 2], [9, 5], [6, 7]]\ntest_case = [arr, solution]\ntest_function(test_case)",
      2.703125
    ],
    [
      "def sort_list(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\n\ndef main():\n    lst = [\n        [2, 12],\n        [5, 7],\n        [4, 15],\n        [6, 2],\n        [7, 4],\n        [5, 1],\n        [2, 3],\n        [6, 1],\n    ]\n    print(sort_list(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.6796875
    ],
    [
      "def sort_list(list_of_list):\n    list_of_list.sort(key=lambda x: x[1])\n    return list_of_list\n\n\nif __name__ == \"__main__\":\n    list_of_list = [[2, 3], [3, 1], [1, 2]]\n    print(sort_list(list_of_list))",
      2.49609375
    ],
    [
      "def sort_list(arr):\n    arr.sort(key=lambda x: x[1])\n    return arr\n\n\ndef main():\n    arr = [(1, 3), (2, 2), (3, 1)]\n    arr = sort_list(arr)\n    print(arr)\n\n\nif __name__ == \"__main__\":\n    main()",
      2.453125
    ],
    [
      "def sort_list(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    list_of_lists = [[1, 3], [2, 2], [3, 1]]\n    print(sort_list(list_of_lists))",
      2.181640625
    ],
    [
      "def sort_by_second_element(list_of_lists):\n    \"\"\"\n    >>> sort_by_second_element([[1, 2], [4, 3], [9, 9], [0, 4]])\n    [[9, 9], [0, 4], [4, 3], [1, 2]]\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.072265625
    ],
    [
      "def sort_by_second_element(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    lst = [(1, 2), (3, 1), (4, 3), (5, 5)]\n    print(sort_by_second_element(lst))",
      1.9541015625
    ],
    [
      "def sort_list(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\nprint(sort_list([[1, 2], [2, 1], [3, 4]]))",
      1.744140625
    ],
    [
      "def sort_by_sec_element(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 3], [2, 4], [3, 2], [4, 1]]\n    print(sort_by_sec_element(lst))",
      1.3330078125
    ],
    [
      "def sort_list(arr):\n    return sorted(arr, key=lambda x: x[1])\n\n\nprint(sort_list([(2, 4), (3, 5), (4, 6)]))",
      1.166015625
    ],
    [
      "def second_element_sort(list):\n    return sorted(list, key=lambda x: x[1])\n\nif __name__ == '__main__':\n    list = [[1, 2], [2, 1], [1, 3], [2, 3], [1, 5]]\n    print(second_element_sort(list))",
      1.060546875
    ],
    [
      "from operator import itemgetter\n\n\ndef second_element(lst):\n    lst.sort(key=itemgetter(1))\n    return lst\n\n\ndef main():\n    lst = [[1, 4], [2, 6], [3, 2], [4, 1], [5, 3]]\n    print(lst)\n    print(second_element(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.97412109375
    ],
    [
      "from operator import itemgetter\n\n\ndef sort_list_by_second_element(list_of_sublists):\n    return sorted(list_of_sublists, key=itemgetter(1))\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = sort_list_by_second_element(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([[1, 2], [4, 3], [9, 9]], [[4, 3], [1, 2], [9, 9]]))\ntest_function(([[1, 2], [4, 3], [9, 9]], [[4, 3], [1, 2], [9, 9]]))\ntest_function(([[1, 2], [4, 3], [9, 9]], [[4, 3], [1, 2], [9, 9]]))\ntest_function(([[1, 2], [4, 3], [9, 9]], [[4, 3], [1, 2], [9, 9]]))\ntest_function(([[1, 2], [4, 3], [9, 9]], [[4, 3], [1, 2], [9, 9]]))\ntest_function(([[1, 2], [4, 3], [9, 9]], [[4, 3], [1, 2], [9, 9]]))\ntest_function(([[1, 2], [4, 3], [9, 9]], [[4, 3], [1, 2], [9, 9]]))\ntest_function(([[1, 2], [4, 3], [9, 9]], [[4, 3], [1, 2], [9, 9]]))\ntest_function(([[1, 2], [4, 3], [9, 9]], [[4, 3], [1, 2], [9, 9]]))\ntest_function(([[1, 2], [4",
      0.9697265625
    ],
    [
      "def sort_by_second_element(l):\n    return sorted(l, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    l = [(1, 2), (1, 3), (1, 1), (1, 5)]\n    print(sort_by_second_element(l))",
      0.9384765625
    ],
    [
      "def second_element_sort(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(second_element_sort([[1, 4], [2, 5], [3, 3]]))",
      0.86865234375
    ],
    [
      "def sort_by_second(list_a):\n    return sorted(list_a, key=lambda x: x[1])\n\n\nprint(sort_by_second([[1, 2], [3, 4], [2, 1]]))",
      0.8271484375
    ],
    [
      "def sort_by_second_element(l):\n    return sorted(l, key=lambda x: x[1])\n\n\nprint(sort_by_second_element([[1, 2], [1, 1], [1, 3], [1, 4]]))",
      0.80322265625
    ],
    [
      "def sort_by_second_element(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\ndef main():\n    list_of_lists = [[1, 10], [2, 30], [3, 20], [4, 50], [5, 60]]\n    print(sort_by_second_element(list_of_lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.7529296875
    ],
    [
      "def sort_by_second(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i][1] < l[j][1]:\n                l[i], l[j] = l[j], l[i]\n    return l\n\ndef main():\n    l = [(1, 4), (2, 3), (3, 2), (4, 1)]\n    print(l)\n    print(sort_by_second(l))\n\nif __name__ == \"__main__\":\n    main()",
      0.6494140625
    ],
    [
      "def second_element_sort(list1):\n    return sorted(list1, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    list1 = [[1, 3], [5, 1], [1, 6], [3, 2], [2, 1]]\n    print(second_element_sort(list1))",
      0.609375
    ],
    [
      "def sort_list(a):\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i][1] > a[j][1]:\n                a[i], a[j] = a[j], a[i]\n    return a\n\n\nl = [[1, 3], [2, 2], [3, 1]]\nprint(sort_list(l))",
      0.5009765625
    ],
    [
      "def sort_second(vals):\n    return sorted(vals, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_second([(1, 3), (2, 2), (3, 1)]))\n    print(sort_second([(1, 3), (2, 2), (3, 1), (4, 1)]))",
      0.4794921875
    ],
    [
      "def sort_list_according_to_second_element(alist):\n    alist.sort(key=lambda x: x[1])\n    return alist\n\n\nif __name__ == \"__main__\":\n    alist = [[1, 5], [2, 3], [4, 1]]\n    print(sort_list_according_to_second_element(alist))",
      0.366455078125
    ],
    [
      "def sort_list(list1):\n    return sorted(list1, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    l1 = [(3, 1), (1, 2), (2, 3)]\n    print(sort_list(l1))",
      0.2279052734375
    ],
    [
      "from operator import itemgetter\n\ndef sort_second_element(li):\n    return sorted(li, key=itemgetter(1))\n\nli = [[1, 3], [2, 1], [3, 2]]\nprint(sort_second_element(li))",
      0.08502197265625
    ],
    [
      "def sort_second(alist):\n    alist.sort(key=lambda x: x[1])\n    return alist\n\nalist = [[1, 2], [5, 1], [7, 3]]\nprint(sort_second(alist))",
      0.083740234375
    ],
    [
      "def custom_sort(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    list_of_tuples = [(1, 2), (3, 4), (4, 3), (2, 1), (5, 5)]\n    print(custom_sort(list_of_tuples))",
      0.03778076171875
    ],
    [
      "def second(e):\n    return e[1]\n\ndef sort_second(lst):\n    lst.sort(key=second)\n    return lst\n\n\nprint(sort_second([[1,3],[0,2],[2,1]]))",
      0.0049285888671875
    ],
    [
      "def sort_by_second(list_of_tuples):\n    \"\"\"Sort list by second element in tuple.\"\"\"\n    return sorted(list_of_tuples, key=lambda x: x[1])\n\n\ndef test_sort_by_second():\n    \"\"\"Test for sort_by_second function.\"\"\"\n    assert sort_by_second([(1, 2), (2, 1), (4, 3), (3, 2)]) == [\n        (2, 1), (3, 2), (1, 2), (4, 3)\n    ]",
      -0.05462646484375
    ],
    [
      "from operator import itemgetter\n\n\ndef sort_second(li):\n    li.sort(key=itemgetter(1))\n    return li\n\n\nli = [[1, 2], [2, 1], [1, 1], [2, 2]]\nprint(sort_second(li))",
      -0.08770751953125
    ],
    [
      "def sort_by_second_element(list_of_sublist):\n    return sorted(list_of_sublist, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    list_of_sublist = [[1, 2], [3, 1], [5, 3], [8, 1], [9, 0]]\n    print(sort_by_second_element(list_of_sublist))",
      -0.1666259765625
    ],
    [
      "def second_element(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\ndef test_second_element():\n    assert second_element([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == [[7, 8], [5, 6], [3, 4], [1, 2], [9, 10]]\n\n\nif __name__ == \"__main__\":\n    test_second_element()",
      -0.2132568359375
    ],
    [
      "def second_element_sort(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\ndef main():\n    lst = [[1, 10], [2, 20], [3, 30], [4, 40], [5, 50]]\n    print(second_element_sort(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.378173828125
    ],
    [
      "from operator import itemgetter\n\ndef sort_second(li):\n    li.sort(key=itemgetter(1))\n\nli = [[1,2,3],[4,3,6],[7,2,4],[8,4,2]]\nsort_second(li)\nprint(li)",
      -0.39404296875
    ],
    [
      "def sort_list(l):\n    return sorted(l, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    l = [[2, 1], [4, 5], [9, 8], [5, 7]]\n    print(sort_list(l))",
      -0.4541015625
    ],
    [
      "def sort_list_second_element(list):\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if list[i][1] < list[j][1]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\n\nprint(sort_list_second_element([[1, 2], [2, 1], [4, 3], [3, 4]]))",
      -0.48681640625
    ],
    [
      "def sort_second_element(l):\n    return sorted(l, key=lambda x: x[1])\n\n\nprint(sort_second_element([[2, 3], [1, 2], [3, 1]]))",
      -0.84033203125
    ],
    [
      "def sort_by_second_element(l):\n    l.sort(key=lambda x: x[1])\n\nl = [[1, 3], [4, 5], [6, 1]]\nsort_by_second_element(l)\nprint(l)",
      -0.8427734375
    ],
    [
      "def sort_list(input_list):\n    return sorted(input_list, key=lambda x: x[1])\n\n\ninput_list = [[1, 2], [3, 4], [6, 5], [2, 3], [1, 3], [3, 6]]\n\nprint(sort_list(input_list))",
      -0.85595703125
    ],
    [
      "def sort_list(my_list):\n    return sorted(my_list, key=lambda x: x[1])\n\n\nmy_list = [[1, 2], [2, 3], [3, 4], [4, 5]]\nprint(sort_list(my_list))",
      -0.85595703125
    ],
    [
      "def second_element_sort(list_of_tuples):\n    \"\"\"\n    >>> second_element_sort([(1, 2), (5, 1), (6, 2)])\n    [(5, 1), (6, 2), (1, 2)]\n    \"\"\"\n    return sorted(list_of_tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "def sort_second(arr):\n    return sorted(arr, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    arr = [[1, 2], [3, 4], [4, 3], [5, 1]]\n    print(sort_second(arr))",
      -0.85693359375
    ],
    [
      "from itertools import chain\n\n\ndef sort_by_second(my_list):\n    return sorted(my_list, key=lambda x: x[1])\n\n\ndef sort_by_second_itertools(my_list):\n    return list(chain(*sorted(my_list, key=lambda x: x[1])))\n\n\nif __name__ == '__main__':\n    my_list = [[1, 2], [2, 1], [3, 5], [4, 6], [5, 4]]\n    print(sort_by_second(my_list))\n    print(sort_by_second_itertools(my_list))",
      -0.85693359375
    ],
    [
      "from operator import itemgetter\n\n\ndef sort_by_second(lists):\n    return sorted(lists, key=itemgetter(1))\n\n\ndef main():\n    l1 = [('a', 3), ('b', 1), ('c', 2)]\n    print(sort_by_second(l1))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def sort_by_second_element(list_of_sublist):\n    return sorted(list_of_sublist, key=lambda x: x[1])\n\n\nprint(sort_by_second_element([[4, 5], [2, 1], [5, 6], [5, 1]]))",
      -0.85693359375
    ],
    [
      "def sort_list(list_to_sort):\n    return sorted(list_to_sort, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_list([(1, 2), (1, 4), (3, 1), (3, 3)]))",
      -0.85693359375
    ],
    [
      "def custom_sort(list):\n    list.sort(key=lambda x: x[1])\n    return list\n\n\nif __name__ == \"__main__\":\n    print(custom_sort([(1, 10), (2, 20), (3, 30), (4, 40)]))",
      -0.85693359375
    ],
    [
      "def sort_list(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2], [5, 1], [7, 3], [2, 5], [4, 6]]\n    print(sort_list(lst))",
      -0.85693359375
    ],
    [
      "def sort_second(arr):\n    arr.sort(key=lambda x: x[1])\n    return arr\n\n\ndef main():\n    arr = [[1, 3], [4, 5], [6, 2], [2, 1]]\n    print(sort_second(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def sort_list(list):\n    return sorted(list, key=lambda x: x[1])\n\n\nprint(sort_list([(1, 2), (2, 1), (3, 4), (4, 3)]))",
      -0.85693359375
    ],
    [
      "from operator import itemgetter\n\n\ndef sort_by_second_element(a):\n    a.sort(key=itemgetter(1))\n    return a\n\n\nprint(sort_by_second_element([(1, 3), (2, 2), (3, 1)]))",
      -0.85791015625
    ],
    [
      "def second_element_sort(list_of_lists):\n    list_of_lists.sort(key=lambda x: x[1])\n    return list_of_lists\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 3, 5], [2, 4, 6], [3, 1, 7], [4, 2, 8]]\n    print(second_element_sort(list_of_lists))",
      -0.85888671875
    ],
    [
      "def sort_second(a):\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if a[i][1] < a[j][1]:\n                a[i],a[j] = a[j],a[i]\n    return a\n\na = [[1, 2], [3, 4], [4, 3], [3, 1]]\nprint(sort_second(a))",
      -0.85888671875
    ],
    [
      "def sort_second_element(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\nprint(sort_second_element([[1, 3], [2, 1], [4, 3], [1, 1]]))",
      -0.85888671875
    ],
    [
      "def sort_by_second(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\ndef main():\n    list_of_lists = [\n        [1, 2, 3],\n        [5, 6, 7],\n        [9, 0, 1],\n        [6, 2, 9],\n        [1, 4, 6],\n        [8, 6, 1],\n        [6, 1, 9],\n    ]\n    print(sort_by_second(list_of_lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def sort_list_2nd_element(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\ndef main():\n    lst = [(2, 3), (1, 2), (4, 5), (3, 1), (5, 4)]\n    print(\"Original list:\")\n    print(lst)\n    print(\"Sorted list:\")\n    print(sort_list_2nd_element(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def second_element_sort(li):\n    return sorted(li, key=lambda x: x[1])\n\n\nprint(second_element_sort([[1, 5], [2, 3], [3, 1]]))",
      -0.85888671875
    ],
    [
      "def sort_by_second_element(list_of_lists):\n    \"\"\"Sort a list of lists by the second element in the sublist.\"\"\"\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\ndef main():\n    \"\"\"Print out the sorted list.\"\"\"\n    list_of_lists = [\n        [1, 2],\n        [3, 4],\n        [1, 1],\n        [3, 3],\n        [4, 2],\n        [4, 4],\n        [4, 1]\n    ]\n    print sort_by_second_element(list_of_lists)\n\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "from operator import itemgetter\n\ndef second_element(li):\n    return sorted(li, key=itemgetter(1))\n\nif __name__ == '__main__':\n    li = [[1, 2, 3], [1, 5, 6], [1, 2, 8], [1, 4, 7]]\n    print(second_element(li))",
      -0.85888671875
    ],
    [
      "def sort_by_sec(list_of_list):\n    \"\"\"\n    Sort a list of lists according to the second element in sublist\n    \"\"\"\n    return sorted(list_of_list, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    list_of_list = [[1, 2], [3, 4], [5, 6]]\n    print(sort_by_sec(list_of_list))",
      -0.85888671875
    ],
    [
      "def sort_second(vals):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n\n    Args:\n       vals(list of lists): list of lists\n    Returns:\n       list: A list of lists\n    \"\"\"\n    return sorted(vals, key=lambda x: x[1])\n\n\nprint(sort_second([[1, 3], [5, 2], [7, 1]]))",
      -0.9208984375
    ],
    [
      "def second(a):\n    return a[1]\n\ndef sort_second(tuples):\n    tuples.sort(key=second)\n    return tuples\n\nt = [(2,2), (3,1), (1,1), (4,4)]\nprint(sort_second(t))",
      -1.1162109375
    ],
    [
      "def sort_second_element(l1):\n    return sorted(l1, key=lambda x: x[1])\n\n\nl = [[1, 3], [2, 1], [4, 5], [6, 2]]\nprint(sort_second_element(l))",
      -1.150390625
    ],
    [
      "def second_sort(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\nprint(second_sort([[3, 2], [1, 2], [2, 1]]))",
      -1.1767578125
    ],
    [
      "def sort_by_second(l):\n    return sorted(l, key=lambda x: x[1])\n\n\nprint(sort_by_second([[1, 2], [3, 4], [5, 6]]))",
      -1.1767578125
    ],
    [
      "def sort_list_2(my_list):\n    return sorted(my_list, key=lambda x: x[1])\n\n\nprint(sort_list_2([(1, 2), (2, 1), (3, 3)]))",
      -1.408203125
    ],
    [
      "def sort_by_second(list):\n    return sorted(list, key=lambda x: x[1])\n\n\ndef main():\n    list = [[1, 3], [2, 3], [3, 4], [4, 5], [5, 6]]\n    print(\"Given list is: \", list)\n    print(\"Sorted list is: \", sort_by_second(list))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.462890625
    ],
    [
      "def second_element(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2], [2, 1], [3, 4], [2, 3], [1, 3]]\n    print(second_element(lst))",
      -1.5341796875
    ],
    [
      "def sort_list(list1):\n    return sorted(list1, key=lambda x: x[1])\n\n\nprint(sort_list([[1, 3], [4, 5], [6, 2]]))",
      -1.5546875
    ],
    [
      "from operator import itemgetter\n\n\ndef sort_list_by_second_element(list_of_sublists):\n    return sorted(list_of_sublists, key=itemgetter(1))\n\n\ndef main():\n    list_of_sublists = [[1, 2], [3, 4], [4, 3], [5, 6]]\n    print(sort_list_by_second_element(list_of_sublists))\n\n\nif __name__ == '__main__':\n    main()",
      -1.6943359375
    ],
    [
      "def sort_list_according_to_second_element(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    list_of_tuples = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\n    print(sort_list_according_to_second_element(list_of_tuples))",
      -1.8408203125
    ],
    [
      "from operator import itemgetter\n\n\ndef sort_by_second(list_of_tuples):\n    list_of_tuples.sort(key=itemgetter(1))\n    return list_of_tuples\n\n\nprint(sort_by_second([(1, 2), (3, 4), (5, 6), (7, 8)]))",
      -1.8564453125
    ],
    [
      "def sort_second(tuples):\n    \"\"\"Sort a list of tuples according to the second element in sublist.\"\"\"\n    tuples.sort(key=lambda tup: tup[1])\n    return tuples\n\n\ndef main():\n    \"\"\"Call the main function.\"\"\"\n    list_of_tuples = [(1, 3), (3, 1), (2, 2)]\n    print(sort_second(list_of_tuples))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.12890625
    ],
    [
      "def sort_list(list_1):\n    list_1.sort(key=lambda x: x[1])\n    return list_1\n\n\nprint(sort_list([[1, 4], [5, 2], [0, 1]]))",
      -2.169921875
    ],
    [
      "def sort_list_by_second_element(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: x[1])\n\n\ndef main():\n    list_of_lists = [\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1, 1],\n        [1, 2, 3],\n        [2, 1",
      -2.33984375
    ],
    [
      "def sort_by_second(lst):\n    lst.sort(key = lambda x: x[1])\n    return lst\n\nlst = [(1, 2), (3, 4), (5, 1)]\n\nprint(sort_by_second(lst))",
      -2.37109375
    ],
    [
      "def sort_list(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    lst = [\n        [1, 2],\n        [2, 1],\n        [3, 1],\n        [4, 3],\n        [5, 3],\n        [6, 3],\n    ]\n    print(sort_list(lst))",
      -2.69921875
    ],
    [
      "def sort_list_by_second_element(list):\n    return sorted(list, key=lambda x: x[1])\n\n\nprint(sort_list_by_second_element([[1, 2], [1, 3], [1, 20]]))",
      -2.86328125
    ],
    [
      "def bubble_sort_by(arr, key=None):\n    \"\"\"\n    >>> bubble_sort_by([[1, 3], [2, 2], [3, 1]])\n    [[3, 1], [2, 2], [1, 3]]\n    >>> bubble_sort_by([[1, 3], [2, 2], [3, 1]], key=lambda x: x[1])\n    [[1, 3], [2, 2], [3, 1]]\n    \"\"\"\n    if not arr:\n        return []\n    if key is None:\n        key = lambda x: x[0]\n\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if key(arr[j]) > key(arr[j+1]):\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.96484375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}