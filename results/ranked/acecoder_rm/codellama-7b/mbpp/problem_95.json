{
  "problem": {
    "task_id": "MBPP/106",
    "prompt": "Write a function to add the given list to the given tuples.",
    "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
    "test_list": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ],
    "challenge_test_list": [],
    "problem_id": 95
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(\n    lst: List[int], tuples: Tuple[int, ...]\n) -> Tuple[int, ...]:\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        lst (List[int]): list of integers to add to the tuples.\n        tuples (Tuple[int, ...]): tuple of integers to add to the list.\n\n    Examples:\n        >>> assert add_list_to_tuples([1, 2, 3], (1, 2)) == (1, 2, 1, 2, 3)\n    \"\"\"\n    return tuples + tuple(lst)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([1, 2, 3], (1, 2)))",
      10.3671875
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): tuples to add list to\n        list (List[int]): list to add to tuples\n\n    Returns:\n        List[Tuple[int, int]]: list of tuples\n    \"\"\"\n    return [(x, y) for x, y in zip(tuples, list)]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2, 3), [4, 5, 6]))",
      9.953125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(my_list: List, my_tuple: Tuple) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        my_list (List): list to be added to the tuple\n        my_tuple (Tuple): tuple to which the list will be added\n\n    Returns:\n        Tuple: tuple with the added list\n    \"\"\"\n    return my_tuple + tuple(my_list)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([1, 2, 3], (4, 5, 6)))\n    print(add_list_to_tuple([\"a\", \"b\", \"c\"], (\"d\", \"e\", \"f\")))",
      8.328125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tup: Tuple[int], lis: List[int]) -> List[Tuple[int]]:\n    \"\"\"Returns a list of tuples with elements from tuple and list.\n\n    Args:\n        tup (Tuple[int]): tuple of integers\n        lis (List[int]): list of integers\n\n    Examples:\n        >>> assert add_list_to_tuple((1, 2, 3, 4, 5), [6, 7, 8, 9, 10]) == [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10)]\n    \"\"\"\n    return list(zip(tup, lis))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((1, 2, 3, 4, 5), [6, 7, 8, 9, 10]))",
      8.1484375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tup: Tuple[int, ...], lst: List[int]) -> List[int]:\n    \"\"\"Returns a list with the given tuple and list added together.\n\n    Args:\n        tup (Tuple[int, ...]): tuple to add to list\n        lst (List[int]): list to add to tuple\n\n    Examples:\n        >>> add_list_to_tuple((1, 2, 3), [4, 5, 6])\n        [1, 2, 3, 4, 5, 6]\n        >>> add_list_to_tuple((1, 2, 3), [4, 5, 6, 7, 8, 9])\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    return list(tup) + lst\n\n\ndef add_list_to_tuple_compact(tup: Tuple[int, ...], lst: List[int]) -> List[int]:\n    \"\"\"Returns a list with the given tuple and list added together.\n\n    Args:\n        tup (Tuple[int, ...]): tuple to add to list\n        lst (List[int]): list to add to tuple\n\n    Examples:\n        >>> add_list_to_tuple_compact((1, 2, 3), [4, 5, 6])\n        [1, 2, 3, 4, 5, 6]\n        >>> add_list_to_tuple_compact((1, 2, 3), [4, 5, 6, 7, 8, 9])\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    return list(tup) + lst\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((1, 2, 3), [4, 5, 6]))\n    print(add_list_to_tuple_compact",
      6.29296875
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple, list_: List) -> Tuple:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple): given tuples.\n        list_ (List): given list.\n\n    Examples:\n        >>> add_list_to_tuples(((1, 2), (3, 4)), [5, 6])\n        ((1, 2, 5, 6), (3, 4, 5, 6))\n    \"\"\"\n    return tuple(tuple(list(i) + list_) for i in tuples)\n\n\ndef add_list_to_tuples_opt(tuples: Tuple, list_: List) -> Tuple:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple): given tuples.\n        list_ (List): given list.\n\n    Examples:\n        >>> add_list_to_tuples_opt(((1, 2), (3, 4)), [5, 6])\n        ((1, 2, 5, 6), (3, 4, 5, 6))\n    \"\"\"\n    return tuple(i + tuple(list_) for i in tuples)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples(((1, 2), (3, 4)), [5, 6]))\n    print(add_list_to_tuples_opt(((1, 2), (3, 4)), [5, 6]))",
      5.515625
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(list_: List, tuples_: Tuple) -> Tuple:\n    \"\"\"Add given list to given tuples.\n\n    Args:\n        list_ (List): list of integers\n        tuples_ (Tuple): tuple of integers\n\n    Returns:\n        Tuple: list + tuple\n\n    Examples:\n        >>> add_list_to_tuples([1, 2, 3], (4, 5, 6))\n        (1, 2, 3, 4, 5, 6)\n        >>> add_list_to_tuples([1, 2], (4, 5, 6))\n        (1, 2, 4, 5, 6)\n        >>> add_list_to_tuples([4, 5], (1, 2, 3))\n        (1, 2, 3, 4, 5)\n    \"\"\"\n    return (*list_, *tuples_)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([1, 2, 3], (4, 5, 6)))\n    print(add_list_to_tuples([1, 2], (4, 5, 6)))\n    print(add_list_to_tuples([4, 5], (1, 2, 3)))",
      5.359375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(list1: List[int], tuple1: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"\n    >>> add_list_to_tuple([1, 2, 3], (1, 2))\n    (1, 2, 3, 1, 2)\n    \"\"\"\n    return tuple(list(tuple1) + list1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.05859375
    ],
    [
      "def tuple_add(tup, lst):\n    return tup + (tuple(lst),)\n\ntup = (1, 2, 3)\nlst = [4, 5, 6]\nprint(tuple_add(tup, lst))",
      3.927734375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int, ...], list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Return a list of tuples with first element from tuples and second from list.\n\n    Examples:\n        >>> assert add_tuples((1, 2, 3), [4, 5, 6]) == [(1, 4), (2, 5), (3, 6)]\n    \"\"\"\n    return list(zip(tuples, list))\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), [4, 5, 6]))",
      3.16796875
    ],
    [
      "from typing import Tuple\n\n\ndef add_list_to_tuple(tuple_of_lists: Tuple[list, ...], list_to_add: list) -> Tuple[list, ...]:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tuple_of_lists (Tuple[list, ...]): tuple of lists to add list_to_add to\n        list_to_add (list): list to add to tuple_of_lists\n\n    Returns:\n        Tuple[list, ...]: tuple of lists with list_to_add added\n    \"\"\"\n    return tuple(map(lambda x: x + list_to_add, tuple_of_lists))\n\n\ndef main():\n    print(add_list_to_tuple(([1, 2], [3, 4]), [5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.97265625
    ],
    [
      "def add_list_to_tuple(a, b):\n    \"\"\"\n    >>> add_list_to_tuple([1, 2, 3], (4, 5, 6))\n    [1, 2, 3, 4, 5, 6]\n    >>> add_list_to_tuple([1, 2], (4, 5, 6, 7))\n    [1, 2, 4, 5, 6, 7]\n    \"\"\"\n    return list(a) + list(b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.9296875
    ],
    [
      "def list_to_tuples(list1, tuples):\n    \"\"\"\n    >>> list_to_tuples([1, 2, 3], ((1, 2), (3, 4)))\n    ((1, 2, 3), (3, 4))\n    \"\"\"\n    result = []\n    for t in tuples:\n        result.append(tuple(list(t) + list1))\n    return tuple(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.451171875
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tup: Tuple, list_: List) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple): given tuple\n        list_ (List): given list\n\n    Examples:\n        >>> add_list_to_tuple((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n    \"\"\"\n    return tup + tuple(list_)\n\n\ndef add_list_to_tuple_opt_1(tup: Tuple, list_: List) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple): given tuple\n        list_ (List): given list\n\n    Examples:\n        >>> add_list_to_tuple_opt_1((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n    \"\"\"\n    return tuple(list(tup) + list_)\n\n\ndef add_list_to_tuple_opt_2(tup: Tuple, list_: List) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple): given tuple\n        list_ (List): given list\n\n    Examples:\n        >>> add_list_to_tuple_opt_2((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n    \"\"\"\n    return tup + tuple(list_)\n\n\ndef add_list_to_tuple_opt_3(tup: Tuple, list_: List) -> Tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple): given tuple\n        list_ (List): given list\n\n    Examples:\n        >>> add_list_to_tuple_opt",
      2.095703125
    ],
    [
      "def add_lists(tup: tuple, lst: list) -> tuple:\n    \"\"\"Return a new tuple with the given list added to the given tuple.\n\n    >>> add_lists((1, 2, 3), [4, 5, 6])\n    (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    return tuple(tup) + tuple(lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.0078125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(list: List, tuple: Tuple) -> Tuple:\n    \"\"\"Add the given list to the given tuple.\n\n    Args:\n        list (List): The list to add.\n        tuple (Tuple): The tuple to add to.\n\n    Returns:\n        Tuple: The tuple with the list added.\n    \"\"\"\n    return tuple + (list,)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([\"a\", \"b\", \"c\"], (\"d\", \"e\")))\n    print(add_list_to_tuple([\"a\", \"b\", \"c\"], (\"d\",)))\n    print(add_list_to_tuple([\"a\", \"b\", \"c\"], ()))",
      1.98828125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_lists(tuples: Tuple[int, ...], list: List[int]) -> List[int]:\n    \"\"\"Adds a list to a tuple.\n\n    Args:\n        tuples (Tuple[int, ...]): the tuple\n        list (List[int]): the list\n\n    Returns:\n        List[int]: the list\n    \"\"\"\n    return list + list(tuples)\n\n\nif __name__ == \"__main__\":\n    print(add_lists((1, 2, 3, 4), [5, 6, 7]))",
      1.171875
    ],
    [
      "def add_tuples(tuples, list):\n    return [x + (y,) for x in tuples for y in list]\n\n\nprint(add_tuples([(1, 2), (3, 4)], [1, 2]))",
      1.158203125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): list of tuples\n        list (List[int]): list of integers\n\n    Returns:\n        List[Tuple[int, int]]: list of tuples\n    \"\"\"\n    return [(x, y) for x, y in zip(tuples, list)]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2, 3), [4, 5, 6]))",
      0.9658203125
    ],
    [
      "from typing import Tuple, List\n\n\ndef add_list_to_tuple(tup: Tuple[int, ...], lst: List[int]) -> Tuple[int, ...]:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (Tuple[int, ...]): given tuple\n        lst (List[int]): given list\n\n    Returns:\n        Tuple[int, ...]: a new tuple with given list added to the given tuple\n    \"\"\"\n    return tuple(x + y for x, y in zip(tup, lst))\n\n\ndef main():\n    print(add_list_to_tuple((1, 2, 3), [1, 2, 3]))\n    print(add_list_to_tuple((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.92431640625
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple, lst: List) -> Tuple:\n    \"\"\"Add a list to a tuple.\n\n    Args:\n        tuples (Tuple): tuple to add the list to\n        lst (List): list to add to the tuple\n\n    Returns:\n        Tuple: tuple with the list added\n    \"\"\"\n    return tuples + (tuple(lst),)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((\"a\", \"b\"), [1, 2, 3]))",
      0.8330078125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(\n    my_list: List[int], my_tuple: Tuple[int, int, int]\n) -> List[int]:\n    \"\"\"Returns a list with the sum of list and tuple.\n\n    Args:\n        my_list (List[int]): list of integers\n        my_tuple (Tuple[int, int, int]): tuple of integers\n\n    Returns:\n        List[int]: list of integers\n    \"\"\"\n    return [i + j for i, j in zip(my_list, my_tuple)]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([1, 2, 3], (4, 5, 6)))",
      0.2646484375
    ],
    [
      "def add_tuples(a, b):\n    return a + b\n\n\na = [1, 2, 3]\nb = (4, 5, 6)\nprint(add_tuples(a, b))",
      0.1324462890625
    ],
    [
      "def add(a, b):\n    return a+b\n\n\nif __name__ == '__main__':\n    print(add((1, 2, 3), (4, 5, 6)))",
      -0.04156494140625
    ],
    [
      "from typing import Tuple\n\n\ndef add_tuples(tup_a: Tuple, tup_b: Tuple) -> Tuple:\n    \"\"\"Add two tuples.\n\n    Args:\n        tup_a (Tuple): first tuple\n        tup_b (Tuple): second tuple\n\n    Returns:\n        Tuple: the result of the addition\n    \"\"\"\n    return tup_a + tup_b\n\n\ndef main():\n    print(add_tuples((1, 2, 3), (4, 5, 6)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.1380615234375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list_: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): the given tuples.\n        list_ (List[int]): the given list.\n\n    Returns:\n        List[Tuple[int, int]]: the resulting tuples.\n    \"\"\"\n    result = []\n\n    for i in range(len(list_)):\n        result.append((tuples[i], list_[i]))\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2, 3, 4), [5, 6, 7, 8]))",
      -0.1947021484375
    ],
    [
      "from typing import Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[Tuple[int, ...]], list_: Tuple[int, ...]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\"Add a list to a tuple of tuples.\n\n    Args:\n        tuples (Tuple[Tuple[int, ...]]): a tuple of tuples to add the list to\n        list_ (Tuple[int, ...]): a tuple of integers to add to the tuples\n\n    Returns:\n        Tuple[Tuple[int, ...], ...]: a tuple of tuples with the list added to them\n    \"\"\"\n    return tuple(tuple(x + y for x, y in zip(tup, list_)) for tup in tuples)\n\n\nif __name__ == '__main__':\n    print(add_list_to_tuples(((1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)), (100, 200, 300, 400, 500)))",
      -0.2467041015625
    ],
    [
      "from typing import List\n\n\ndef add_list_to_tuples(tuples: List[tuple], list: List[int]) -> List[tuple]:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n        list (List[int]): list of integers\n\n    Returns:\n        List[tuple]: list of tuples\n    \"\"\"\n    result = []\n\n    for tup in tuples:\n        result.append(tuple(x + y for x, y in zip(tup, list)))\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [10, 20, 30]))",
      -0.53076171875
    ],
    [
      "from typing import Tuple, List\n\n\ndef add_tuples(tuples: Tuple[int, ...], list: List[int]) -> Tuple[int, ...]:\n    \"\"\"\n    Add the given list to the given tuples.\n    \"\"\"\n    return tuples + tuple(list)\n\n\ndef main():\n    print(add_tuples((1, 2, 3), [4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.6513671875
    ],
    [
      "def add_list_to_tuples(tuples, list):\n    \"\"\"Add list to tuples.\"\"\"\n    return tuples + (tuple(list), )",
      -0.85595703125
    ],
    [
      "def add_list_to_tuples(tuples, list):\n    return [tuple(i) + tuple(j) for i in tuples for j in list]",
      -0.85693359375
    ],
    [
      "def add_tuples(tuples, list):\n    return list(map(lambda x: x + tuple(list), tuples))\n\n\nprint(add_tuples([(1, 2, 3), (4, 5, 6)], [7, 8]))",
      -0.85693359375
    ],
    [
      "def add_lists(tuples, list_):\n    return list(map(lambda x: x + list_, tuples))",
      -0.85693359375
    ],
    [
      "def list_to_tuples(list, tuples):\n    return tuples + tuple(list)\n\n\nprint(list_to_tuples([1, 2, 3], (1, 2)))\nprint(list_to_tuples([1, 2, 3], (1, 2)))\nprint(list_to_tuples([1, 2, 3], (1, 2)))",
      -0.85693359375
    ],
    [
      "def add_tuples(tup: tuple, list_: list):\n    return tup + (tuple(list_),)\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), [4, 5, 6]))",
      -0.85791015625
    ],
    [
      "def add_list_to_tuple(list_in, tuple_in):\n    return tuple_in + tuple(list_in)\n\n\nprint(add_list_to_tuple([1, 2, 3, 4, 5], (10, 20, 30)))",
      -0.85791015625
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tuples: Tuple, list: List) -> Tuple:\n    \"\"\"Add list to tuple.\n\n    Args:\n        tuples (Tuple): given tuple\n        list (List): given list\n\n    Returns:\n        Tuple: tuple with list\n    \"\"\"\n    return tuple(list) + tuples\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((1, 2, 3), [4, 5, 6]))",
      -0.85791015625
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_lists(tup: Tuple, lst: List) -> List:\n    return [i + j for i, j in zip(tup, lst)]\n\n\nif __name__ == \"__main__\":\n    print(add_lists(tup=(1, 2, 3), lst=[4, 5, 6]))",
      -0.85791015625
    ],
    [
      "def add(tup, list):\n    return tup + (list,)\n\nprint(add((1, 2, 3), [4, 5, 6]))",
      -0.85791015625
    ],
    [
      "def add_tuples(a, b):\n    return a + b\n\n\nprint(add_tuples((1, 2, 3), (4, 5, 6)))",
      -0.8583984375
    ],
    [
      "def add_list_to_tuples(a_list, a_tuple):\n    return a_tuple + (a_list,)\n\n\ndef test_add_list_to_tuples():\n    \"\"\"Test for add_list_to_tuples function.\"\"\"\n    assert add_list_to_tuples([1, 2], (3, 4)) == (3, 4, [1, 2])\n    assert add_list_to_tuples([1, 2], (3,)) == (3, [1, 2])\n    assert add_list_to_tuples([1, 2], (3, 4, 5)) == (3, 4, 5, [1, 2])",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef add_list_to_tuples(tuples: List[tuple], list: List[int]) -> List[tuple]:\n    \"\"\"Returns a list of tuples with the given list appended to each tuple.\n\n    Args:\n        tuples (List[tuple]): List of tuples\n        list (List[int]): List of integers\n\n    Returns:\n        List[tuple]: List of tuples with the given list appended to each tuple\n    \"\"\"\n    return [tuple(list) + tuple for tuple in tuples]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2]))",
      -0.8583984375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(list: List, tuple: Tuple) -> List[Tuple]:\n    \"\"\"Adds list to tuple.\"\"\"\n    return [(item, *list) for item in tuple]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([1, 2, 3], (4, 5, 6)))",
      -0.8583984375
    ],
    [
      "def add_tuples(tuples, lst):\n    return tuple(sum(pair) for pair in zip(tuples, lst))\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3, 4), (1, 2, 3, 4)))",
      -0.8583984375
    ],
    [
      "def add_tuples(tuples, list):\n    # tuples.append(list)\n    return tuple(list + i for i in tuples)\n\ntuples = [(1, 2), (3, 4)]\nlist = [5, 6]\nprint(add_tuples(tuples, list))",
      -0.8583984375
    ],
    [
      "def add_list_to_tuples(tup: tuple, list: list) -> tuple:\n    \"\"\"\n    >>> add_list_to_tuples((1, 2, 3), [4, 5, 6])\n    (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    return tuple(list) + tup\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_lists(tuples: Tuple[int, ...], list: List[int]) -> Tuple[int, ...]:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): the tuples\n        list (List[int]): the list\n\n    Returns:\n        Tuple[int, ...]: the resulting tuples\n    \"\"\"\n    return tuples + tuple(list)\n\n\nif __name__ == \"__main__\":\n    print(add_lists(tuples=(1, 2, 3), list=[4, 5, 6]))",
      -0.8583984375
    ],
    [
      "def add_tuples(tup, lis):\n    return tuple(map(sum, zip(tup, lis)))\n\ntup = (1, 2, 3)\nlis = [4, 5, 6]\nprint(add_tuples(tup, lis))",
      -0.86083984375
    ],
    [
      "def add_tuples(tuples, list):\n    return [i + j for i, j in zip(tuples, list)]",
      -0.86083984375
    ],
    [
      "def add_tuples(tuples, lst):\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tuples: A list of tuples.\n        lst: A list.\n\n    Returns:\n        A list of tuples.\n    \"\"\"\n    return [t + (l,) for t, l in zip(tuples, lst)]",
      -0.86083984375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(a_tuple: Tuple, a_list: List) -> Tuple:\n    \"\"\"Add a list to a tuple.\n\n    Args:\n        a_tuple (Tuple): a tuple to add list to\n        a_list (List): list to add to tuple\n\n    Returns:\n        Tuple: a tuple with list added to it\n    \"\"\"\n    return a_tuple + a_list\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((\"a\", \"b\", \"c\"), [\"d\", \"e\", \"f\"]))",
      -1.00390625
    ],
    [
      "def add_list_to_tuples(tuples, list):\n    \"\"\"\n    >>> add_list_to_tuples(((1, 2), (3, 4)), [5, 6])\n    ((1, 2, 5, 6), (3, 4, 5, 6))\n    \"\"\"\n    return tuple(tuple(i + list for i in t) for t in tuples)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.0048828125
    ],
    [
      "from typing import List\n\n\ndef add_tuples(tuples: List[tuple], list_to_add: List[int]):\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n        list_to_add (List[int]): list of integers\n\n    Returns:\n        List[tuple]: list of tuples\n    \"\"\"\n    return [tuple(x + y for x, y in zip(list(tup), list_to_add)) for tup in tuples]\n\n\nif __name__ == \"__main__\":\n    print(add_tuples([(1, 2, 3, 4), (5, 6, 7, 8)], [1, 2, 3, 4]))",
      -1.1708984375
    ],
    [
      "def add_list_to_tuples(tuples, list):\n    new_tuples = []\n    for i in range(len(tuples)):\n        new_tuples.append(tuples[i] + (list[i],))\n    return new_tuples\n\nif __name__ == '__main__':\n    tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    list = [10, 11, 12]\n    print(add_list_to_tuples(tuples, list))",
      -1.3251953125
    ],
    [
      "def add_list_to_tuple(tup, lst):\n    return tup + (lst,)\n\n\ndef main():\n    print(add_list_to_tuple((\"a\", \"b\", \"c\"), [1, 2, 3]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.33203125
    ],
    [
      "def add_tuples(tuples, list):\n    return tuple(sum(x) for x in zip(tuples, list))",
      -1.3330078125
    ],
    [
      "from typing import Tuple, List\n\n\ndef add_list_to_tuples(list: List, tuples: Tuple) -> Tuple:\n    \"\"\"Add list to tuples.\n\n    Args:\n        list (List): list to add\n        tuples (Tuple): tuple to add to\n\n    Returns:\n        Tuple: new tuple with list added\n    \"\"\"\n    return tuple(list) + tuples\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([1, 2, 3], (4, 5, 6)))",
      -1.4501953125
    ],
    [
      "def add_tuples(tuples, list_vals):\n    return tuple(x + y for x, y in zip(tuples, list_vals))\n\nprint(add_tuples((1, 2, 3), [4, 5, 6]))",
      -1.509765625
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuples(tup: Tuple, lst: List) -> Tuple:\n    return tuple(map(sum, zip(tup, lst)))\n\n\nif __name__ == \"__main__\":\n    tup = (1, 2, 3, 4)\n    lst = [1, 2, 3, 4]\n    print(add_tuples(tup, lst))",
      -1.529296875
    ],
    [
      "def list_to_tuple(list_of_tuples, list_of_values):\n    \"\"\"\n    >>> list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n    >>> list_of_values = [7, 8, 9]\n    >>> list_to_tuple(list_of_tuples, list_of_values)\n    [(1, 2, 7), (3, 4, 8), (5, 6, 9)]\n    >>> list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n    >>> list_of_values = [7]\n    >>> list_to_tuple(list_of_tuples, list_of_values)\n    [(1, 2, 7), (3, 4, 7), (5, 6, 7)]\n    \"\"\"\n    new_list = []\n    for i in range(len(list_of_tuples)):\n        new_list.append(list_of_tuples[i] + (list_of_values[i],))\n    return new_list\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.54296875
    ],
    [
      "def add_tuples(tuples, list_):\n    return [tuple(x + y for x, y in zip(list_, t)) for t in tuples]\n\n\ndef main():\n    print(add_tuples([(1, 2), (3, 4)], [10, 20]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.556640625
    ],
    [
      "def add_tuples(tup, lst):\n    \"\"\"\n    tup: tuple of ints\n    lst: list of ints\n    \"\"\"\n    new_tuple = ()\n    for i in range(len(tup)):\n        new_tuple += (tup[i] + lst[i],)\n    return new_tuple\n\n\nprint(add_tuples((1, 2, 3, 4), [1, 2, 3, 4]))\nprint(add_tuples((1, 2, 3), [4, 5, 6]))\nprint(add_tuples((1, 2), [3, 4, 5, 6]))",
      -1.5576171875
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list: List[int]) -> Tuple[int, ...]:\n    \"\"\"Add a list to a tuple.\n\n    Args:\n        tuples (Tuple[int, ...]): list of tuples\n        list (List[int]): list of integers\n\n    Returns:\n        Tuple[int, ...]: new tuple with list added\n    \"\"\"\n    return tuple(map(sum, zip(tuples, list)))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2, 3), [4, 5, 6]))",
      -1.591796875
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(list_of_tuples: List[Tuple[int, int]],\n                       list_of_numbers: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"Adds list of numbers to every tuple in list of tuples.\n\n    Args:\n        list_of_tuples (List[Tuple[int, int]]): list of tuples\n        list_of_numbers (List[int]): list of numbers\n\n    Returns:\n        List[Tuple[int, int]]: list of tuples with added numbers\n    \"\"\"\n    return [tuple(map(sum, zip(list_of_numbers, tpl))) for tpl in list_of_tuples]\n\n\nif __name__ == '__main__':\n    list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n    list_of_numbers = [1, 2, 3]\n    print(add_list_to_tuples(list_of_tuples, list_of_numbers))",
      -1.6845703125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int, ...], list1: List[int]) -> Tuple[int, ...]:\n    \"\"\"Return the addition of the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): given tuple\n        list1 (List[int]): given list\n\n    Examples:\n        >>> add_tuples((1, 2, 3), [1, 2, 3])\n        (2, 4, 6)\n    \"\"\"\n    return tuple(map(sum, zip(tuples, list1)))\n\n\ndef add_tuples2(tuples: Tuple[int, ...], list1: List[int]) -> Tuple[int, ...]:\n    \"\"\"Return the addition of the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): given tuple\n        list1 (List[int]): given list\n\n    Examples:\n        >>> add_tuples2((1, 2, 3), [1, 2, 3])\n        (2, 4, 6)\n    \"\"\"\n    return tuples + tuple(list1)\n\n\ndef add_tuples3(tuples: Tuple[int, ...], list1: List[int]) -> Tuple[int, ...]:\n    \"\"\"Return the addition of the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): given tuple\n        list1 (List[int]): given list\n\n    Examples:\n        >>> add_tuples3((1, 2, 3), [1, 2, 3])\n        (2, 4, 6)\n    \"\"\"\n    return tuple(map(sum, zip(tuples, list1)))\n\n\ndef add_tuples4(tuples: Tuple[int, ...], list1: List[int]) -> Tuple[int, ...]:\n    \"\"\"Return the addition of the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): given tuple",
      -1.7568359375
    ],
    [
      "from typing import List\n\n\ndef add_list_to_tuples(tuples: List[tuple], list_to_add: List[int]) -> List[tuple]:\n    \"\"\"Adds list to tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n        list_to_add (List[int]): list of integers\n\n    Returns:\n        List[tuple]: list of tuples\n    \"\"\"\n    return [*map(lambda x: (x[0] + list_to_add[x[1]], x[1]), enumerate(tuples))]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2]))",
      -1.9111328125
    ],
    [
      "from typing import List\n\n\ndef add_list_to_tuple(tup: tuple, lst: List):\n    \"\"\"Adds the given list to the given tuple.\n\n    Args:\n        tup (tuple): given tuple\n        lst (List): given list\n\n    Returns:\n        tuple: new tuple\n    \"\"\"\n    return tuple(map(sum, zip(tup, lst)))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple((1, 2, 3), [3, 4, 5]))",
      -2.0625
    ],
    [
      "from typing import List\n\n\ndef add_list_to_tuples(tuples: tuple, list: List) -> tuple:\n    \"\"\"Returns a new tuple which combines the given tuple and list.\n\n    Args:\n        tuples (tuple): Tuple to be combined.\n        list (List): List to be combined.\n\n    Examples:\n        >>> add_list_to_tuples((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n        >>> add_list_to_tuples((\"x\", \"y\", \"z\"), [4, 5, 6])\n        ('x', 'y', 'z', 4, 5, 6)\n    \"\"\"\n    return tuples + tuple(list)\n\n\ndef add_list_to_tuples_opt(tuples: tuple, list: List) -> tuple:\n    \"\"\"Returns a new tuple which combines the given tuple and list.\n\n    Args:\n        tuples (tuple): Tuple to be combined.\n        list (List): List to be combined.\n\n    Examples:\n        >>> add_list_to_tuples_opt((\"a\", \"b\", \"c\"), [1, 2, 3])\n        ('a', 'b', 'c', 1, 2, 3)\n        >>> add_list_to_tuples_opt((\"x\", \"y\", \"z\"), [4, 5, 6])\n        ('x', 'y', 'z', 4, 5, 6)\n    \"\"\"\n    return tuple(list) + tuples\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((\"a\", \"b\", \"c\"), [1, 2, 3]))\n    print(add_list_to_tuples_opt((\"a\", \"b\", \"c\"), [1, 2, 3]))",
      -2.087890625
    ],
    [
      "def add_tuples(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\ndef main():\n    print(\"Sum of two tuples:\")\n    print(add_tuples((20, 30, 40, 50), (10, 20, 30, 40)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.10546875
    ],
    [
      "def add_list_to_tuples(tuples, list):\n    return list + tuples\n\n\ndef main():\n    tuples = (1, 2, 3)\n    list = [4, 5, 6]\n    print(add_list_to_tuples(tuples, list))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.1640625
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int, ...], lst: List[int]) -> List[Tuple[int, ...]]:\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): list of tuples\n        lst (List[int]): list of integers\n\n    Returns:\n        List[Tuple[int, ...]]: list of tuples with the list added\n    \"\"\"\n    return [tuple(x + y for x, y in zip(t, lst)) for t in tuples]\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), [10, 20, 30]))",
      -2.265625
    ],
    [
      "from typing import List\n\n\ndef add_list_to_tuples(tup: tuple, list_: List) -> tuple:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tup (tuple): given tuple\n        list_ (List): given list\n\n    Returns:\n        tuple: return the result\n    \"\"\"\n    return tuple(tup + (list_,))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((\"a\", \"b\", \"c\"), [1, 2, 3]))",
      -2.36328125
    ],
    [
      "def add_list_to_tuple(tuple_1, list_1):\n    return tuple_1 + (list_1,)\n\n\nif __name__ == '__main__':\n    print(add_list_to_tuple((1, 2, 3, 4), [5, 6, 7, 8]))",
      -2.376953125
    ],
    [
      "def add(list, *tuples):\n    result = []\n    for i in range(len(tuples[0])):\n        temp = list[i]\n        for j in range(len(tuples)):\n            temp += tuples[j][i]\n        result.append(temp)\n    return tuple(result)\n\nprint(add([1, 2, 3], (4, 5, 6), (7, 8, 9), (10, 11, 12)))",
      -2.751953125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(list1: List, tuple1: Tuple) -> Tuple:\n    \"\"\"Returns the sum of a list and a tuple.\n\n    Args:\n        list1 (List): The list to add.\n        tuple1 (Tuple): The tuple to add.\n\n    Examples:\n        >>> add_list_to_tuple([1, 2, 3], (4, 5, 6))\n        (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    return tuple(list1 + list(tuple1))\n\n\ndef main():\n    print(add_list_to_tuple([1, 2, 3], (4, 5, 6)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.2734375
    ],
    [
      "def add_list_to_tuple(list, tuple):\n    \"\"\"Add the given list to the given tuple.\"\"\"\n    return tuple + tuple(list)\n\n\ndef test_add_list_to_tuple():\n    \"\"\"Test add_list_to_tuple.\"\"\"\n    assert add_list_to_tuple([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3)",
      -3.353515625
    ],
    [
      "def add_tuples(tuples, list):\n    \"\"\"\n    >>> add_tuples((1,2,3), [4,5,6])\n    (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    return tuple(list) + tuples\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -3.4375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(lst: List, tpl: Tuple) -> List:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        lst (List): list to add\n        tpl (Tuple): tuple to add to\n\n    Returns:\n        List: resulting list\n    \"\"\"\n    return list(map(sum, zip(tpl, lst)))\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([1, 2, 3], (1, 2, 3)))",
      -3.466796875
    ],
    [
      "def add_tuples(tup1, tup2):\n    return tuple(a+b for a,b in zip(tup1, tup2))\n\ndef add_tuples_2(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))\n\nprint(add_tuples((1,2,3), (4,5,6)))\nprint(add_tuples_2((1,2,3), (4,5,6)))",
      -3.740234375
    ],
    [
      "from typing import List\n\n\ndef list_to_tuples(list_to_add: List[int], tuple_to_add: tuple) -> tuple:\n    \"\"\"Returns a tuple with the given list added to the given tuple.\n\n    Args:\n        list_to_add (List[int]): list to add to the tuple\n        tuple_to_add (tuple): tuple to add to\n\n    Examples:\n        >>> assert list_to_tuples([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3)\n    \"\"\"\n    return tuple(list_to_add) + tuple(tuple_to_add)\n\n\nif __name__ == \"__main__\":\n    print(list_to_tuples([1, 2, 3], (4, 5, 6)))",
      -3.814453125
    ],
    [
      "def add_tuples(tup, lst):\n    return tuple(map(sum, zip(tup, lst)))\n\n\ndef test_add_tuples():\n    assert add_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), (4, 5, 6)))",
      -3.876953125
    ],
    [
      "def addTuple(tup, list):\n    return tuple(tup) + tuple(list)\n\nprint(addTuple((\"a\", \"b\"), [1, 2]))",
      -3.880859375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tuples: Tuple, lst: List) -> Tuple:\n    \"\"\"\n    >>> add_list_to_tuple((), [1, 2, 3])\n    (1, 2, 3)\n    >>> add_list_to_tuple((1, 2, 3), [4, 5, 6])\n    (1, 2, 3, 4, 5, 6)\n    >>> add_list_to_tuple((1, 2, 3), [4, 5, 6, 7])\n    Traceback (most recent call last):\n        ...\n    ValueError: list length and tuple length must be equal\n    \"\"\"\n    if len(lst) != len(tuples):\n        raise ValueError(\"list length and tuple length must be equal\")\n\n    return tuples + tuple(lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.1484375
    ],
    [
      "from typing import List\n\n\ndef add_tuples(list_1: List, tuple_1: tuple) -> List:\n    \"\"\"Returns a list of tuples.\n\n    Args:\n        list_1 (List): list of values to add to tuples\n        tuple_1 (tuple): tuple of values\n\n    Returns:\n        List: list of tuples\n    \"\"\"\n    list_1 = list_1 + list(tuple_1)\n    return list_1\n\n\ndef main():\n    print(add_tuples([1, 2, 3], (4, 5, 6)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.3125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(a_list: List, a_tuple: Tuple) -> List:\n    \"\"\"Return a list containing the sum of the two given lists.\"\"\"\n    return list(map(sum, zip(a_list, a_tuple)))\n\n\ndef test_add_list_to_tuple():\n    \"\"\"Test for add_list_to_tuple.\"\"\"\n    assert add_list_to_tuple([1, 2, 3], (3, 4, 5)) == [4, 6, 8]",
      -4.54296875
    ],
    [
      "from typing import List\n\n\ndef add_list_to_tuple(tuples: List[tuple], list: List[int]) -> tuple:\n    \"\"\"Add a list to a tuple.\n\n    Args:\n        tuples (List[tuple]): A list of tuples.\n        list (List[int]): A list of integers.\n\n    Returns:\n        tuple: A tuple of lists.\n    \"\"\"\n    return tuple(list(tuple_) + tuple(list) for tuple_ in tuples)\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuple([(1, 2), (3, 4)], [1, 2]))",
      -5.07421875
    ],
    [
      "def add_list_to_tuples(tup1, tup2):\n    \"\"\"\n    >>> add_list_to_tuples((1, 2, 3), (4, 5, 6))\n    [(1, 2, 3, 4, 5, 6)]\n    \"\"\"\n    # list(tup1) + list(tup2)\n    # tup1 + tup2\n    return [tup1 + tup2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.51953125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuple(tuples: Tuple[int], lst: List[int]) -> List[Tuple[int]]:\n    \"\"\"Return a list of tuples with list elements added to tuples.\n\n    :param tuples: tuple of integers\n    :type tuples: tuple\n    :param lst: list of integers\n    :type lst: list\n    :return: list of tuples\n    :rtype: list\n    \"\"\"\n    return [(a, b, c, d, e) for a, b, c, d, e in zip(tuples, lst)]\n\n\ndef main():\n    print(add_list_to_tuple((1, 2, 3, 4, 5), [10, 20, 30, 40, 50]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.6640625
    ],
    [
      "def add_list_to_tuples(list_a, tuple_a):\n    \"\"\"\n    >>> add_list_to_tuples([1, 2, 3], (1, 2))\n    (1, 2, 3, 1, 2)\n    >>> add_list_to_tuples([1, 2], (1, 2, 3))\n    (1, 2, 1, 2, 3)\n    \"\"\"\n    return tuple(list_a) + tuple(tuple_a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.78515625
    ],
    [
      "def add_tuples(tup1, tup2):\n    return tuple(sum(tup) for tup in zip(tup1, tup2))\n\n\n# Test\nassert add_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
      -5.80078125
    ],
    [
      "def add_list(tuples, list):\n    for i in range(len(tuples)):\n        tuples[i] += (list[i],)\n    return tuples\n\ntuples = [(1,2,3), (4,5,6), (7,8,9)]\nlist = [10, 11, 12]\nprint(add_list(tuples, list))",
      -5.93359375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_list_to_tuples(tuples: Tuple[int, ...], list: List[int]) -> List[Tuple[int, ...]]:\n    \"\"\"Add list to tuples.\n\n    Args:\n        tuples (Tuple[int, ...]): tuples to add to\n        list (List[int]): list to add\n\n    Returns:\n        List[Tuple[int, ...]]: new tuples\n\n    Examples:\n        >>> assert add_list_to_tuples((1, 2), [3, 4]) == [(1, 2, 3, 4)]\n    \"\"\"\n    return [\n        tuple(list[i : i + len(tuples)])\n        for i in range(0, len(list), len(tuples))\n        if len(list[i : i + len(tuples)]) == len(tuples)\n    ]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples((1, 2), [3, 4]))",
      -6.11328125
    ],
    [
      "def add_tuples(tuples, list):\n    # + operator is overloaded for tuples and lists\n    return tuples + (list,)\n\nprint(add_tuples((1, 2, 3), [4, 5, 6]))",
      -6.12109375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int], numbers: List[int]) -> List[Tuple[int]]:\n    \"\"\"Return a new list of tuples by adding given list to given tuples.\n\n    :param tuples: given tuples.\n    :type tuples: Tuple[int]\n    :param numbers: given list.\n    :type numbers: List[int]\n    :return: new list of tuples by adding given list to given tuples.\n    :rtype: List[Tuple[int]]\n    \"\"\"\n    return [x + y for x, y in zip(tuples, numbers)]\n\n\ndef main():\n    print(add_tuples((1, 2, 3), [4, 5, 6]))\n\n\nif __name__ == '__main__':\n    main()",
      -6.34375
    ],
    [
      "def add_tuples(tuples, list):\n    \"\"\"\n    >>> add_tuples(((1, 2), (3, 4)), [5, 6])\n    ((1, 2, 5, 6), (3, 4, 5, 6))\n    \"\"\"\n    return tuple(tuple(x + y for x, y in zip(list, tuple)) for tuple in tuples)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -6.41796875
    ],
    [
      "def list_to_tuples(tuples, list):\n    \"\"\"\n    >>> list_to_tuples((), [1, 2, 3])\n    ((1, 2, 3),)\n    >>> list_to_tuples(((1, 2),), [3, 4, 5])\n    ((1, 2, 3, 4, 5),)\n    \"\"\"\n    if len(tuples) == 0:\n        return tuple(list)\n    return tuple(tuples[0] + list) + list_to_tuples(tuples[1:], list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.65625
    ],
    [
      "def add_list(a, b):\n    c = []\n    for i in range(len(b)):\n        c.append(a[i] + b[i])\n    return tuple(c)\n\n\nif __name__ == '__main__':\n    print(add_list([1, 2, 3], (1, 2, 3)))\n    print(add_list([1, 2, 3, 4], (1, 2, 3)))",
      -6.7890625
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuples(tuples: Tuple[int], list: List[int]) -> List[Tuple[int]]:\n    \"\"\"\n    Add a given list to the given tuples.\n    >>> add_tuples((1, 2, 3), [1, 2])\n    [(2, 2, 3), (1, 3, 3)]\n    >>> add_tuples((1, 2, 3), [1, 2, 3])\n    [(2, 3, 3), (1, 4, 3)]\n    >>> add_tuples((1, 2, 3), [1, 2, 3, 4])\n    [(2, 3, 3), (1, 4, 3), (1, 5, 4)]\n    \"\"\"\n    new_tuples = []\n    for tuple in tuples:\n        for i in range(len(list)):\n            new_tuples.append(tuple[0:i] + (tuple[i] + list[i],) + tuple[i + 1 :])\n    return new_tuples\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.52734375
    ],
    [
      "from typing import List\n\n\ndef add_list_to_tuples(tuples: List[tuple], list: List) -> List[tuple]:\n    \"\"\"Add the given list to the given tuples.\n\n    Args:\n        tuples (List[tuple]): given tuples\n        list (List): given list\n\n    Examples:\n        >>> assert add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2, 3]) == [(1, 2, 3, 1, 2, 3), (4, 5, 6, 1, 2, 3)]\n        >>> assert add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2, 3, 4]) == [(1, 2, 3, 1, 2, 3, 4), (4, 5, 6, 1, 2, 3, 4)]\n    \"\"\"\n    return [tuple(list) + t for t in tuples]\n\n\nif __name__ == \"__main__\":\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2, 3]))\n    print(add_list_to_tuples([(1, 2, 3), (4, 5, 6)], [1, 2, 3, 4]))",
      -7.53515625
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuples(tup: Tuple[int], lst: List[int]) -> List[List[int]]:\n    \"\"\"Adds the given list to the given tuples.\n\n    Args:\n        tup (Tuple[int]): given tuple\n        lst (List[int]): given list\n\n    Examples:\n        >>> assert add_tuples((1, 2, 3), [1, 2]) == [[2, 4, 3], [2, 3, 4]]\n\n    Returns:\n        List[List[int]]: list of added tuples\n    \"\"\"\n    return [\n        [sum(tup_el, lst_el) for tup_el, lst_el in zip(tup, lst)]\n        for lst_el in lst\n    ]\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), [1, 2]))",
      -14.3828125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}