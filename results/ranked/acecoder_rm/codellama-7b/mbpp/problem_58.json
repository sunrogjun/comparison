{
  "problem": {
    "task_id": "MBPP/69",
    "prompt": "Write a function to check whether a list contains the given sublist or not.",
    "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
    "test_list": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ],
    "challenge_test_list": [],
    "problem_id": 58
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List, sub_list: List) -> bool:\n    \"\"\"\n    Check if sublist is present in the main list.\n\n    >>> check_sublist([1, 2, 3, 4], [1, 2])\n    True\n    >>> check_sublist([1, 2, 3, 4], [2, 3])\n    True\n    >>> check_sublist([1, 2, 3, 4], [1, 5])\n    False\n    >>> check_sublist([1, 2, 3, 4], [5, 1])\n    False\n    \"\"\"\n    if len(sub_list) > len(main_list):\n        return False\n    # Iterate through the main list\n    for i in range(len(main_list)):\n        # Compare the elements of the main list with the elements of the sub list\n        # and check if they match\n        if main_list[i] == sub_list[0]:\n            # Check if the sublist is present in the main list\n            if main_list[i : i + len(sub_list)] == sub_list:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      13.9765625
    ],
    [
      "from timeit import timeit\n\n\ndef contains_sublist(lst, sublist):\n    \"\"\"Checks if list contains sublist\"\"\"\n    if len(lst) == 0 or len(sublist) == 0:\n        return False\n    if len(lst) < len(sublist):\n        return False\n    for i in range(len(lst)):\n        for j in range(len(sublist)):\n            if i + j >= len(lst) or lst[i + j] != sublist[j]:\n                break\n        else:\n            return True\n    return False\n\n\ndef contains_sublist_with_sliding_window(lst, sublist):\n    if len(lst) == 0 or len(sublist) == 0:\n        return False\n    if len(lst) < len(sublist):\n        return False\n    for i in range(len(lst) - len(sublist) + 1):\n        for j in range(len(sublist)):\n            if lst[i + j] != sublist[j]:\n                break\n        else:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    sublist = [2, 3, 4]\n\n    print(contains_sublist(lst, sublist))\n    print(contains_sublist_with_sliding_window(lst, sublist))\n\n    print(timeit(lambda: contains_sublist(lst, sublist), number=10000))\n    print(\n        timeit(lambda: contains_sublist_with_sliding_window(lst, sublist), number=10000)\n    )",
      11.7890625
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(lst: List, sublist: List) -> bool:\n    \"\"\"\n    Checks if a sublist is present in a given list.\n\n    :param lst: list of elements\n    :param sublist: sublist to check\n    :return: true if sublist is in lst\n\n    >>> contains_sublist([1, 2, 3, 4], [2, 3])\n    True\n    >>> contains_sublist([1, 2, 3, 4], [2, 4])\n    False\n    >>> contains_sublist([1, 2, 3, 4], [2, 3, 4])\n    True\n    >>> contains_sublist([1, 2, 3, 4], [2, 3, 5])\n    False\n    >>> contains_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5])\n    False\n    >>> contains_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n    False\n    >>> contains_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n    False\n    \"\"\"\n    if not lst:\n        return False\n\n    for i in range(len(lst)):\n        if lst[i] == sublist[0]:\n            if lst[i : i + len(sublist)] == sublist:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      10.578125
    ],
    [
      "from typing import List\n\n\ndef sublist_check(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"Checks if sublist is contained in main list.\n\n    Args:\n        main_list (List[int]): main list.\n        sublist (List[int]): sublist to check.\n\n    Examples:\n        >>> sublist_check([1, 2, 3, 4, 5], [1, 2, 3])\n        True\n        >>> sublist_check([1, 2, 3, 4, 5], [1, 3, 5])\n        False\n    \"\"\"\n    sublist_len = len(sublist)\n    for idx in range(len(main_list) - sublist_len + 1):\n        if main_list[idx : idx + sublist_len] == sublist:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      7.83203125
    ],
    [
      "def check_sublist(sublist, list_):\n    \"\"\"\n    Checks if a sublist is in a list.\n    :param sublist: list\n    :param list_: list\n    :return: bool\n    >>> check_sublist([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])\n    True\n    >>> check_sublist([1, 2, 3], [5, 4, 3, 2, 1])\n    True\n    >>> check_sublist([1, 2, 3], [1, 2, 3, 4, 5])\n    True\n    >>> check_sublist([1, 2, 3], [4, 5, 6, 7, 8])\n    False\n    \"\"\"\n    if len(sublist) > len(list_):\n        return False\n    for i in range(len(list_) - len(sublist) + 1):\n        for j in range(len(sublist)):\n            if list_[i + j] != sublist[j]:\n                break\n        else:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      7.36328125
    ],
    [
      "from timeit import timeit\n\n\ndef check_sublist(l1: list, l2: list) -> bool:\n    if len(l2) > len(l1):\n        return False\n\n    for i in range(len(l1) - len(l2) + 1):\n        for j in range(len(l2)):\n            if l2[j] != l1[i + j]:\n                break\n        else:\n            return True\n    return False\n\n\ndef check_sublist_2(l1: list, l2: list) -> bool:\n    if len(l2) > len(l1):\n        return False\n\n    for i in range(len(l1) - len(l2) + 1):\n        for j in range(len(l2)):\n            if l2[j] != l1[i + j]:\n                break\n        else:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3]\n    l3 = [1, 2, 3, 4, 5, 6]\n    l4 = [2, 3, 4]\n\n    print(check_sublist(l1, l2))\n    print(check_sublist(l1, l3))\n    print(check_sublist(l1, l4))\n\n    print(timeit(lambda: check_sublist(l1, l2), number=10000))\n    print(timeit(lambda: check_sublist_2(l1, l2), number=10000))",
      7.30078125
    ],
    [
      "from timeit import timeit\n\n\ndef check_sublist(sublist, list_):\n    if len(sublist) > len(list_):\n        return False\n    for i in range(len(list_) - len(sublist) + 1):\n        if sublist == list_[i:i + len(sublist)]:\n            return True\n    return False\n\n\ndef check_sublist_optimized(sublist, list_):\n    if len(sublist) > len(list_):\n        return False\n    return any(list_[i:i + len(sublist)] == sublist\n               for i in range(len(list_) - len(sublist) + 1))\n\n\ndef check_sublist_optimized_2(sublist, list_):\n    return any(sublist == list_[i:i + len(sublist)]\n               for i in range(len(list_) - len(sublist) + 1))\n\n\nif __name__ == \"__main__\":\n    print(check_sublist([2, 1, 2], [1, 2, 1, 2]))\n    print(check_sublist_optimized([2, 1, 2], [1, 2, 1, 2]))\n    print(check_sublist_optimized_2([2, 1, 2], [1, 2, 1, 2]))\n    print(timeit(\"check_sublist([2, 1, 2], [1, 2, 1, 2])\",\n                 setup=\"from __main__ import check_sublist\"))\n    print(timeit(\"check_sublist_optimized([2, 1, 2], [1, 2, 1, 2])\",\n                 setup=\"from __main__ import check_sublist_optimized\"))\n    print(timeit(\"check_sublist_optimized_2([2, 1, 2], [1, 2, 1, 2])\",\n                 setup=\"from __main__ import check_sublist_optimized_2\"))",
      6.75390625
    ],
    [
      "from typing import List\n\n\ndef check_sublist(list1: List[int], sublist: List[int]) -> bool:\n    \"\"\"Checks if sublist is present in list1.\n\n    Args:\n        list1 (List[int]): The list in which the sublist is to be searched.\n        sublist (List[int]): The sublist to be searched in list1.\n\n    Returns:\n        bool: True if sublist is present in list1, False otherwise.\n    \"\"\"\n\n    if len(list1) < len(sublist):\n        return False\n\n    for i in range(len(list1) - len(sublist) + 1):\n        for j in range(len(sublist)):\n            if list1[i + j] != sublist[j]:\n                break\n        else:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(check_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3]))\n    print(check_sublist([1, 2, 3, 4, 5, 6], [1, 2, 4]))\n    print(check_sublist([1, 2, 3, 4, 5, 6], [1, 2, 5]))\n    print(check_sublist([1, 2, 3, 4, 5, 6], [1, 2, 6]))\n    print(check_sublist([1, 2, 3, 4, 5, 6], [1, 2]))\n    print(check_sublist([1, 2, 3, 4, 5, 6], [2, 3]))\n    print(check_sublist([1, 2, 3, 4, 5, 6], [2, 4]))\n    print(check_sublist([1, 2, 3, 4, 5, 6], [3, 4]))",
      6.40234375
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    sublist_len = len(sublist)\n\n    for i in range(len(main_list) - sublist_len + 1):\n        for j in range(sublist_len):\n            if main_list[i + j] != sublist[j]:\n                break\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 6]) == True\n    assert contains_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 7]) == True\n    assert contains_sublist([1, 2, 3, 4, 5, 6, 7], [1, 2, 3]) == True\n    assert contains_sublist([1, 2, 3, 4, 5, 6, 7], [1, 2, 7]) == True\n    assert contains_sublist([1, 2, 3, 4, 5, 6, 7], [1, 2, 8]) == False\n    assert contains_sublist([1, 2, 3, 4, 5, 6, 7], [4, 5, 8]) == False\n    assert contains_sublist([1, 2, 3, 4, 5, 6, 7], [4, 6, 8]) == False",
      6.26953125
    ],
    [
      "from typing import List\n\n\ndef is_sublist(l: List[int], sub_list: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    if not l or not sub_list:\n        return False\n\n    sub_list_size = len(sub_list)\n    for i in range(len(l)):\n        if l[i : i + sub_list_size] == sub_list:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_sublist([1, 2, 3, 4], [2, 3]) == True\n    assert is_sublist([1, 2, 3, 4], [2, 3, 4]) == True\n    assert is_sublist([1, 2, 3, 4], [2, 4]) == True\n    assert is_sublist([1, 2, 3, 4], [3, 4]) == True\n    assert is_sublist([1, 2, 3, 4], [4]) == True\n    assert is_sublist([1, 2, 3, 4], [1, 2, 3, 4]) == True\n    assert is_sublist([1, 2, 3, 4], [1, 2, 3]) == True\n    assert is_sublist([1, 2, 3, 4], [1, 2]) == True\n    assert is_sublist([1, 2, 3, 4], [1]) == True\n\n    assert is_sublist([1, 2, 3, 4], [5, 6]) == False\n    assert is_sublist([1, 2, 3, 4], [3, 5]) == False\n    assert is_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5]) == False\n    assert is_sublist([1, 2, 3, 4], [4, 3]) == False",
      4.9453125
    ],
    [
      "def contains_sublist(lst, sublst):\n    \"\"\"\n    Checks if lst contains sublst.\n\n    >>> contains_sublist([1, 2, 3, 4], [1, 2, 3])\n    True\n    >>> contains_sublist([1, 2, 3, 4], [1, 3, 2])\n    True\n    >>> contains_sublist([1, 2, 3, 4], [2, 3])\n    True\n    >>> contains_sublist([1, 2, 3, 4], [1, 2, 3, 5])\n    False\n    >>> contains_sublist([1, 2, 3, 4], [3, 2, 1])\n    False\n    >>> contains_sublist([1, 2, 3, 4], [2, 3, 5])\n    False\n    \"\"\"\n    if len(lst) < len(sublst):\n        return False\n    if len(lst) == len(sublst):\n        return lst == sublst\n\n    sub_index = 0\n    for i in range(len(lst)):\n        if lst[i] == sublst[sub_index]:\n            sub_index += 1\n            if sub_index == len(sublst):\n                return True\n        else:\n            sub_index = 0\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.875
    ],
    [
      "from typing import List\n\n\ndef is_sublist(list_: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(sublist) > len(list_):\n        return False\n\n    for i in range(len(list_) - len(sublist) + 1):\n        for j in range(len(sublist)):\n            if list_[i + j] != sublist[j]:\n                break\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_sublist([1, 2, 3, 4, 5], [2, 3, 4]) == True\n    assert is_sublist([1, 2, 3, 4, 5], [4, 5, 6]) == False",
      4.8515625
    ],
    [
      "from typing import List\n\n\ndef check_sublist(lst: List, sublst: List) -> bool:\n    \"\"\"Check if a list contains the given sublist.\n\n    Args:\n        lst (List): The list to check.\n        sublst (List): The sublist to check.\n\n    Returns:\n        bool: Whether the list contains the sublist.\n    \"\"\"\n    sublst_len = len(sublst)\n\n    for idx, elem in enumerate(lst):\n        if elem == sublst[0]:\n            if idx + sublst_len > len(lst):\n                return False\n\n            for j in range(sublst_len):\n                if lst[idx + j] != sublst[j]:\n                    break\n            else:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sublst = [1, 2, 3]\n    assert check_sublist(lst, sublst) is True",
      3.6640625
    ],
    [
      "def is_sublist(l1, l2):\n    if len(l1) > len(l2):\n        return False\n\n    l1_len = len(l1)\n    l2_len = len(l2)\n\n    for i in range(0, l2_len - l1_len + 1):\n        if l1 == l2[i : i + l1_len]:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3]\n    print(is_sublist(l1, l2))",
      3.634765625
    ],
    [
      "from typing import List\n\n\ndef is_sublist_recursive(main: List[int], sub: List[int]) -> bool:\n    if not main or not sub:\n        return False\n\n    if len(main) < len(sub):\n        return False\n\n    if len(main) == len(sub) and main == sub:\n        return True\n\n    for i in range(len(main)):\n        for j in range(len(sub)):\n            if main[i + j] != sub[j]:\n                break\n        else:\n            return True\n    return False\n\n\ndef is_sublist(main: List[int], sub: List[int]) -> bool:\n    if not main or not sub:\n        return False\n\n    if len(main) < len(sub):\n        return False\n\n    if len(main) == len(sub) and main == sub:\n        return True\n\n    for i in range(len(main)):\n        for j in range(len(sub)):\n            if main[i + j] != sub[j]:\n                break\n        else:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_sublist([1, 2, 3], [1, 2]))\n    print(is_sublist([1, 2, 3, 4], [2, 3]))\n    print(is_sublist([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(is_sublist([1, 2, 3, 4], [1, 2, 3]))\n    print(is_sublist([1, 2, 3, 4], [1, 2, 3, 5]))\n    print(is_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5]))\n    print(is_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]))",
      3.54296875
    ],
    [
      "from typing import List\n\n\ndef check_sublist(lst: List[int], sublst: List[int]) -> bool:\n    \"\"\"Check if the list contains the given sublist.\n\n    Args:\n        lst (List[int]): List to check.\n        sublst (List[int]): Sublist to check.\n\n    Returns:\n        bool: True if the list contains the sublist.\n    \"\"\"\n    if len(lst) < len(sublst):\n        return False\n    for i in range(len(lst)):\n        for j in range(len(sublst)):\n            if lst[i + j] != sublst[j]:\n                break\n        else:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(check_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4]))\n    print(check_sublist([1, 2, 3, 4, 5], [2, 3, 4, 5]))\n    print(check_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(check_sublist([1, 2, 3, 4, 5], [1, 2, 3]))\n    print(check_sublist([1, 2, 3, 4, 5], [3, 4, 5]))",
      2.822265625
    ],
    [
      "from timeit import timeit\n\n\ndef check_sublist(lst: list, sublst: list) -> bool:\n    \"\"\"Checks whether a list contains the given sublist or not.\n\n    Args:\n        lst (list): List of numbers.\n        sublst (list): Sublist of numbers.\n\n    Returns:\n        bool: True if sublist is present in lst, False otherwise.\n    \"\"\"\n    if not lst or not sublst:\n        return False\n    if len(sublst) > len(lst):\n        return False\n    sublst_size = len(sublst)\n    for i in range(len(lst) - sublst_size + 1):\n        if lst[i : i + sublst_size] == sublst:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(\n        timeit(\n            \"check_sublist([1, 2, 3, 4, 5], [2, 3])\",\n            setup=\"from __main__ import check_sublist\",\n        )\n    )\n    print(\n        timeit(\n            \"check_sublist([1, 2, 3, 4, 5], [1, 2, 3])\",\n            setup=\"from __main__ import check_sublist\",\n        )\n    )\n    print(\n        timeit(\n            \"check_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4])\",\n            setup=\"from __main__ import check_sublist\",\n        )\n    )\n    print(\n        timeit(\n            \"check_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\",\n            setup=\"from __main__ import check_sublist\",\n        )\n    )\n    print(\n        timeit(\n            \"check_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\",\n            setup=\"from __main__ import check_sublist\",",
      2.744140625
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not sublist:\n        return True\n\n    if len(sublist) > len(main_list):\n        return False\n\n    for i in range(len(main_list) - len(sublist) + 1):\n        for j in range(len(sublist)):\n            if main_list[i + j] != sublist[j]:\n                break\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_sublist([1, 2, 3, 4], [2, 3]) == True\n    assert check_sublist([1, 2, 3, 4], [2, 4]) == True\n    assert check_sublist([1, 2, 3, 4], [2, 5]) == False\n    assert check_sublist([1, 2, 3, 4], [1, 2, 3, 4]) == True",
      2.6796875
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"Check if sublist is contained in main list.\n\n    Args:\n        main_list (List): Main list\n        sublist (List): Sublist\n\n    Returns:\n        bool: True if sublist is contained in main list.\n    \"\"\"\n    if not main_list or not sublist:\n        return False\n\n    # If length of sublist is greater than main list, it cannot be contained.\n    if len(sublist) > len(main_list):\n        return False\n\n    # If length of sublist is equal to main list, it must be contained.\n    if len(sublist) == len(main_list):\n        return main_list == sublist\n\n    # If length of sublist is less than main list, traverse main list.\n    for i in range(len(main_list)):\n        if main_list[i] == sublist[0]:\n            for j in range(len(sublist)):\n                if main_list[i + j] != sublist[j]:\n                    break\n                if j == len(sublist) - 1:\n                    return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_sublist([], []) == False\n    assert check_sublist([], [1, 2, 3]) == False\n    assert check_sublist([1, 2, 3], []) == True\n    assert check_sublist([1, 2, 3], [1, 2, 3]) == True\n    assert check_sublist([1, 2, 3], [2, 3]) == True\n    assert check_sublist([1, 2, 3], [3, 4]) == False\n    assert check_sublist([1, 2, 3, 4], [3, 4]) == True\n    assert check_sublist([1, 2, 3, 4, 5], [3, 4]) == True\n    assert check_sublist([1, 2, 3, 4, 5], [3",
      2.298828125
    ],
    [
      "from typing import List\n\n\ndef is_sublist(list1: List, list2: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not list1 or not list2:\n        return False\n\n    list1_length, list2_length = len(list1), len(list2)\n    list1_index = 0\n\n    while list1_index < list1_length:\n        if list1[list1_index] == list2[0]:\n            sublist_index = 1\n            while sublist_index < list2_length:\n                if list1[list1_index + sublist_index] != list2[sublist_index]:\n                    break\n                sublist_index += 1\n\n            if sublist_index == list2_length:\n                return True\n        list1_index += 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_sublist([], []) == False\n    assert is_sublist([1], []) == False\n    assert is_sublist([1, 2, 3], [1, 2, 3]) == True\n    assert is_sublist([1, 2, 3], [2, 3]) == True\n    assert is_sublist([1, 2, 3], [2, 3, 4]) == False\n    assert is_sublist([1, 2, 3], [1, 2, 3, 4]) == False",
      1.59375
    ],
    [
      "def contains_sublist(lst, sublist):\n    if len(sublist) == 0:\n        return True\n    for i in range(len(lst) - len(sublist) + 1):\n        for j in range(len(sublist)):\n            if lst[i+j] != sublist[j]:\n                break\n        else:\n            return True\n    return False\n\n\nprint(contains_sublist([1, 2, 3, 4, 5, 6], [4, 5]))\nprint(contains_sublist([1, 2, 3, 4, 5, 6], [4, 5, 6, 7]))\nprint(contains_sublist([1, 2, 3, 4, 5, 6], [4, 5, 6]))\nprint(contains_sublist([1, 2, 3, 4, 5, 6], [4, 5, 7]))\nprint(contains_sublist([1, 2, 3, 4, 5, 6], []))\nprint(contains_sublist([1, 2, 3, 4, 5, 6], [4, 5, 7, 8]))\nprint(contains_sublist([1, 2, 3, 4, 5, 6], [4, 5, 7, 8, 9]))\nprint(contains_sublist([1, 2, 3, 4, 5, 6], [7, 8, 9]))\nprint(contains_sublist([1, 2, 3, 4, 5, 6], [7, 8, 9, 10]))",
      1.5615234375
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(m)\n    \"\"\"\n    if not main_list or not sublist:\n        return False\n\n    for i in range(len(main_list)):\n        if main_list[i] == sublist[0]:\n            if main_list[i : i + len(sublist)] == sublist:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_sublist([1, 2, 3, 4], [1, 2]) == True\n    assert check_sublist([1, 2, 3, 4], [2, 3]) == True\n    assert check_sublist([1, 2, 3, 4], [1, 6]) == False\n    assert check_sublist([1, 2, 3, 4], [1, 2, 3, 4]) == True\n    assert check_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5]) == False",
      1.54296875
    ],
    [
      "from collections import defaultdict\n\n\ndef sublist_in_list(list1, list2):\n    \"\"\"Checks if sublist is in list\"\"\"\n    if not list2:\n        return True\n    if not list1:\n        return False\n\n    list1_dict = defaultdict(int)\n    list2_dict = defaultdict(int)\n\n    for elem in list1:\n        list1_dict[elem] += 1\n\n    for elem in list2:\n        list2_dict[elem] += 1\n\n    for key, value in list2_dict.items():\n        if key not in list1_dict:\n            return False\n        if list1_dict[key] < value:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(sublist_in_list([1, 2, 3], [1, 2]))\n    print(sublist_in_list([1, 2, 3], [1, 3]))\n    print(sublist_in_list([1, 2, 3], [1, 4]))\n    print(sublist_in_list([1, 2, 3], [2, 3]))\n    print(sublist_in_list([1, 2, 3], [2, 3, 4]))\n    print(sublist_in_list([1, 2, 3], []))",
      1.4384765625
    ],
    [
      "def is_sublist(list1, list2):\n    for i in range(len(list1)):\n        if list1[i:i+len(list2)] == list2:\n            return True\n    return False\n\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3]))\nprint(is_sublist([1, 2, 3, 4, 5], [2, 3, 4]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]))",
      0.8818359375
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"Checks whether a list contains the given sublist or not.\n\n    Args:\n        main_list (List): The main list.\n        sublist (List): The sublist.\n\n    Returns:\n        bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    if len(main_list) == 0 and len(sublist) == 0:\n        return True\n    elif len(main_list) < len(sublist):\n        return False\n\n    for i in range(len(main_list)):\n        for j in range(i, len(main_list) - len(sublist) + 1):\n            if main_list[j : j + len(sublist)] == sublist:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_sublist([1, 2, 3, 4], [1, 2]) == True\n    assert check_sublist([1, 2, 3, 4], [2, 3]) == True\n    assert check_sublist([1, 2, 3, 4], [1, 6]) == False\n    assert check_sublist([1, 2, 3, 4], [5, 6]) == False",
      0.693359375
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List[int], sub_list: List[int]) -> bool:\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    if not main_list or not sub_list:\n        return False\n\n    if len(main_list) < len(sub_list):\n        return False\n\n    for i in range(len(main_list) - len(sub_list) + 1):\n        for j in range(len(sub_list)):\n            if main_list[i + j] != sub_list[j]:\n                break\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_sublist([1, 2, 3, 4], [1, 2]) is True\n    assert check_sublist([1, 2, 3, 4], [1, 6]) is False\n    assert check_sublist([1, 2, 3, 4], [4, 1]) is True\n    assert check_sublist([1, 2, 3, 4], [2, 1, 2]) is True\n    assert check_sublist([1, 2, 3, 4], [2, 1, 3]) is False",
      0.68017578125
    ],
    [
      "from typing import List\n\n\ndef check_sublist(lst: List, sublist: List) -> bool:\n    \"\"\"Checks if sublist is contained in lst.\n\n    Args:\n        lst (List): list of integers\n        sublist (List): sublist of integers\n\n    Returns:\n        bool: whether sublist is contained in lst\n    \"\"\"\n\n    # Create a set of the sublist\n    sublist_set = set(sublist)\n\n    # Iterate over the list\n    for item in lst:\n        if item in sublist_set:\n            sublist_set.remove(item)\n        if not sublist_set:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6]\n    sublist = [2, 4, 6]\n    print(check_sublist(lst, sublist))",
      0.57568359375
    ],
    [
      "from copy import deepcopy\n\n\ndef is_sublist(arr: list, sublist: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not sublist:\n        return True\n\n    sublist_len = len(sublist)\n    for i in range(len(arr)):\n        if arr[i] == sublist[0]:\n            if arr[i:i + sublist_len] == sublist:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    sublist = [1, 2, 3]\n    print(is_sublist(arr, sublist))\n\n    arr = [1, 2, 3, 4, 5]\n    sublist = [1, 2, 3, 4, 5]\n    print(is_sublist(arr, sublist))\n\n    arr = [1, 2, 3, 4, 5]\n    sublist = [1, 2, 3, 4, 5, 6]\n    print(is_sublist(arr, sublist))",
      0.57421875
    ],
    [
      "def isSublist(mainList, subList):\n    # TODO: Write your code here\n    if len(subList) > len(mainList):\n        return False\n    for i in range(len(mainList)):\n        for j in range(i, len(mainList)):\n            if j - i + 1 == len(subList):\n                flag = True\n                for k in range(len(subList)):\n                    if mainList[i + k] != subList[k]:\n                        flag = False\n                        break\n                if flag:\n                    return True\n            else:\n                continue\n    return False\n\nif __name__ == \"__main__\":\n    mainList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    subList = [1, 2, 3]\n    print(isSublist(mainList, subList))",
      0.456298828125
    ],
    [
      "from typing import List\n\n\ndef check_sub_list(lst: List[int], sub: List[int]) -> bool:\n    \"\"\"\n\n    :param lst: List of integers\n    :param sub: Sublist of integers\n    :return: True if sublist is present in list else False\n\n    >>> check_sub_list([1, 2, 3, 4, 5], [1, 2, 3])\n    True\n    >>> check_sub_list([1, 2, 3, 4, 5], [2, 3, 4])\n    True\n    >>> check_sub_list([1, 2, 3, 4, 5], [1, 3, 4])\n    False\n    >>> check_sub_list([1, 2, 3, 4, 5], [1, 2, 4])\n    False\n    >>> check_sub_list([1, 2, 3, 4, 5], [1, 6, 2])\n    False\n    >>> check_sub_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n    True\n    >>> check_sub_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n    False\n    >>> check_sub_list([1, 2, 3, 4, 5], [])\n    True\n    \"\"\"\n    if not lst or not sub:\n        return True\n\n    if len(sub) > len(lst):\n        return False\n\n    for i in range(len(lst)):\n        for j in range(len(sub)):\n            if lst[i + j] != sub[j]:\n                break\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      0.415283203125
    ],
    [
      "def is_sublist(list1, list2):\n    if len(list2) > len(list1):\n        return False\n    for i in range(len(list1) - len(list2) + 1):\n        for j in range(len(list2)):\n            if list1[i + j] != list2[j]:\n                break\n        else:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    print(is_sublist([1,2,3,4,5,6], [3,4,5]))\n    print(is_sublist([1,2,3,4,5,6], [3,4,5,6]))\n    print(is_sublist([1,2,3,4,5,6], [3,4,5,6,7]))\n    print(is_sublist([1,2,3,4,5,6], [1,2,3,4]))\n    print(is_sublist([1,2,3,4,5,6], [1,2,3,4,5]))\n    print(is_sublist([1,2,3,4,5,6], [1,2,3,4,5,6]))\n    print(is_sublist([1,2,3,4,5,6], [1,2,3,4,5,6,7]))",
      0.38916015625
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(l: List, sublist: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if len(sublist) == 0:\n        return True\n\n    if len(l) == 0:\n        return False\n\n    if len(l) < len(sublist):\n        return False\n\n    for i in range(len(l)):\n        if l[i] == sublist[0]:\n            if l[i : i + len(sublist)] == sublist:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_sublist([1, 2, 3, 4, 5, 6, 7], [2, 4, 6]))\n    print(contains_sublist([1, 2, 3, 4, 5, 6, 7], [2, 4, 7]))\n    print(contains_sublist([1, 2, 3, 4, 5, 6, 7], [2, 4, 7, 8]))\n    print(contains_sublist([1, 2, 3, 4, 5, 6, 7], []))",
      0.302978515625
    ],
    [
      "def check_sublist(main_list, sublist):\n    main_list_copy = main_list.copy()\n    sublist_copy = sublist.copy()\n    sublist_copy.reverse()\n    for element in main_list_copy:\n        if element == sublist_copy[0]:\n            if main_list_copy[main_list_copy.index(element):] == sublist_copy:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    assert check_sublist([1, 2, 3, 4, 5], [2, 3, 4]) == True\n    assert check_sublist([1, 2, 3, 4, 5], [2, 4, 3]) == False\n    assert check_sublist([1, 2, 3, 4, 5], [2, 4]) == False\n    assert check_sublist([1, 2, 3, 4, 5], [3, 4, 5]) == True\n    assert check_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True",
      0.302490234375
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List[int], sub_list: List[int]) -> bool:\n    \"\"\"\n    Using sliding window approach.\n    Complexity: O(m + n)\n    \"\"\"\n    n = len(main_list)\n    m = len(sub_list)\n\n    if m > n:\n        return False\n\n    for i in range(n - m + 1):\n        for j in range(m):\n            if main_list[i + j] != sub_list[j]:\n                break\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_sublist([1, 2, 3, 4, 5, 6], [2, 3]) == True\n    assert check_sublist([1, 2, 3, 4, 5, 6], [2, 4]) == False\n    assert check_sublist([1, 2, 3, 4, 5, 6], [1, 3]) == True\n    assert check_sublist([1, 2, 3, 4, 5, 6], [1, 4]) == True",
      0.281982421875
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(lst: List, sublist: List) -> bool:\n    \"\"\"\n    >>> contains_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3])\n    True\n    >>> contains_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4])\n    True\n    >>> contains_sublist([1, 2, 3, 4, 5, 6], [1, 3, 5])\n    True\n    >>> contains_sublist([1, 2, 3, 4, 5, 6], [1, 7, 3])\n    False\n    >>> contains_sublist([1, 2, 3, 4, 5, 6], [7, 3, 5])\n    False\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i : i + len(sublist)] == sublist:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.2027587890625
    ],
    [
      "from typing import List\n\n\ndef is_sublist(lst: List, sublst: List) -> bool:\n    \"\"\"\n    Checks if sublist is present in the list\n    >>> is_sublist([1, 2, 3, 4, 5], [2, 3])\n    True\n    >>> is_sublist([1, 2, 3, 4, 5], [5, 6])\n    False\n    >>> is_sublist([1, 2, 3, 4, 5], [6, 7])\n    False\n    \"\"\"\n    if not lst or not sublst:\n        return False\n\n    for i in range(len(lst)):\n        if lst[i] == sublst[0]:\n            for j in range(len(sublst)):\n                if lst[i + j] != sublst[j]:\n                    break\n            else:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.1939697265625
    ],
    [
      "from typing import List\n\n\ndef sublist(list_a: List[int], list_b: List[int]) -> bool:\n    \"\"\"\n    >>> sublist([1, 2, 3, 4], [1, 2, 3, 4])\n    True\n    >>> sublist([1, 2, 3, 4], [2, 3])\n    True\n    >>> sublist([1, 2, 3, 4], [1, 2, 3, 4, 5])\n    False\n    >>> sublist([1, 2, 3, 4], [2, 3, 5])\n    False\n    >>> sublist([1, 2, 3, 4], [2, 3, 5, 6])\n    False\n    \"\"\"\n    if not list_a or not list_b:\n        return False\n\n    i = 0\n    j = 0\n    while i < len(list_a) and j < len(list_b):\n        if list_a[i] == list_b[j]:\n            i += 1\n            j += 1\n\n        if j == len(list_b):\n            return True\n\n        i = i - j + 1\n        j = 0\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.13916015625
    ],
    [
      "from typing import List\n\n\ndef sublist_in_list(sublist: List[int], list_: List[int]) -> bool:\n    \"\"\"\n\n    :param sublist:\n    :param list_:\n    :return:\n    \"\"\"\n    if len(sublist) > len(list_):\n        return False\n\n    for index in range(len(list_)):\n        if list_[index] == sublist[0]:\n            for j in range(len(sublist)):\n                if index + j >= len(list_) or list_[index + j] != sublist[j]:\n                    break\n            else:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sublist_in_list([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    assert sublist_in_list([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    assert not sublist_in_list([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11])\n    assert not sublist_in_list([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert sublist_in_list([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])",
      0.0977783203125
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"Check if a sublist is present in a main list.\n\n    Args:\n        main_list (List): Main list.\n        sublist (List): Sublist to check.\n\n    Returns:\n        bool: Whether sublist is present in main list or not.\n\n    Examples:\n        >>> check_sublist([1, 2, 3, 4], [2, 3])\n        True\n        >>> check_sublist([1, 2, 3, 4], [2, 6])\n        False\n    \"\"\"\n    return check_sublist_recursive(main_list, sublist)\n\n\ndef check_sublist_recursive(main_list: List, sublist: List) -> bool:\n    \"\"\"Check if a sublist is present in a main list (recursive).\n\n    Args:\n        main_list (List): Main list.\n        sublist (List): Sublist to check.\n\n    Returns:\n        bool: Whether sublist is present in main list or not.\n\n    Examples:\n        >>> check_sublist_recursive([1, 2, 3, 4], [2, 3])\n        True\n        >>> check_sublist_recursive([1, 2, 3, 4], [2, 6])\n        False\n    \"\"\"\n    if len(sublist) == 0:\n        return True\n    if len(main_list) == 0:\n        return False\n\n    return (\n        main_list[0] == sublist[0]\n        and check_sublist_recursive(main_list[1:], sublist[1:])\n        or check_sublist_recursive(main_list[1:], sublist)\n    )\n\n\ndef check_sublist_dp(main_list: List, sublist: List) -> bool:\n    \"\"\"Check if a sublist is present in a main list (Dynamic Programming).\n\n    Args:\n        main_list (List): Main list.\n        sublist (List): Sublist to check.",
      0.0218048095703125
    ],
    [
      "from copy import deepcopy\n\n\ndef check_sublist(lst, sublst):\n    if len(lst) < len(sublst):\n        return False\n\n    for i in range(len(lst)):\n        for j in range(len(sublst)):\n            if lst[i + j] != sublst[j]:\n                break\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sublst = [2, 3, 4]\n    assert check_sublist(deepcopy(lst), deepcopy(sublst)) is True\n\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sublst = [2, 3, 5]\n    assert check_sublist(deepcopy(lst), deepcopy(sublst)) is False\n\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sublst = [2, 3, 4, 5]\n    assert check_sublist(deepcopy(lst), deepcopy(sublst)) is True\n\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sublst = [2, 3, 4, 5, 6]\n    assert check_sublist(deepcopy(lst), deepcopy(sublst)) is False\n\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sublst = [2, 3, 4, 5, 6, 7]\n    assert check_sublist(deepcopy(lst), deepcopy(sublst)) is False",
      0.0145416259765625
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(lst: List, sublist: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not lst or not sublist:\n        return False\n\n    n = len(lst)\n    m = len(sublist)\n\n    for i in range(n - m + 1):\n        for j in range(m):\n            if lst[i + j] != sublist[j]:\n                break\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_sublist([1, 2, 3, 4], [2, 3])\n    assert contains_sublist([1, 2, 3, 4], [2, 5]) is False",
      -0.041107177734375
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"Checks if the main list contains the sublist.\n\n    Args:\n        main_list (List): The main list.\n        sublist (List): The sublist.\n\n    Examples:\n        >>> assert check_sublist([1, 2, 3, 4, 5], [2, 3])\n        >>> assert not check_sublist([1, 2, 3, 4, 5], [6, 7])\n    \"\"\"\n    if len(main_list) == 0:\n        return False\n\n    if len(sublist) == 0:\n        return True\n\n    for i in range(len(main_list)):\n        if main_list[i] == sublist[0]:\n            j = 1\n            while j < len(sublist) and i + j < len(main_list):\n                if main_list[i + j] != sublist[j]:\n                    break\n                j += 1\n\n            if j == len(sublist):\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(check_sublist([1, 2, 3, 4, 5], [2, 3]))\n    print(check_sublist([1, 2, 3, 4, 5], [6, 7]))",
      -0.10467529296875
    ],
    [
      "from typing import List\n\n\ndef sublist(sub: List[int], lst: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not sub:\n        return True\n    if not lst:\n        return False\n\n    if sub[0] in lst:\n        i = lst.index(sub[0])\n        if sub[1:] == lst[i + 1 :]:\n            return True\n        return sublist(sub[1:], lst[i + 1 :])\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sublist([1, 2], [1, 2, 3, 4])\n    assert sublist([1, 2, 3], [1, 2, 3, 4])\n    assert sublist([1, 2, 3, 4], [1, 2, 3, 4])\n    assert sublist([2, 3], [1, 2, 3, 4])\n    assert sublist([1, 3], [1, 2, 3, 4])\n    assert not sublist([2, 3], [1, 2, 3])\n    assert not sublist([2, 3], [1, 2, 3, 4, 5])\n    assert not sublist([2, 3, 4], [1, 2, 3, 4, 5])",
      -0.1976318359375
    ],
    [
      "from typing import List\n\n\ndef check_sub_list(main_list: List, sub_list: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not main_list or not sub_list:\n        return False\n\n    window_size = len(sub_list)\n\n    for i in range(len(main_list) - window_size + 1):\n        if main_list[i : i + window_size] == sub_list:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_sub_list([1, 2, 3, 4], [1, 2]) == True\n    assert check_sub_list([1, 2, 3, 4], [2, 3]) == True\n    assert check_sub_list([1, 2, 3, 4], [1, 6]) == False",
      -0.260498046875
    ],
    [
      "def check_sublist(l, sublist):\n    \"\"\"\n    >>> check_sublist([1, 2, 3, 4, 5], [2, 3])\n    True\n    >>> check_sublist([1, 2, 3, 4, 5], [2, 6])\n    False\n    >>> check_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n    True\n    \"\"\"\n    if len(sublist) > len(l):\n        return False\n    if not sublist:\n        return True\n    for i in range(len(l)):\n        if l[i] == sublist[0]:\n            if l[i: i + len(sublist)] == sublist:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.2646484375
    ],
    [
      "from typing import List\n\n\ndef check_sublist(arr: List[int], sub_list: List[int]) -> bool:\n    \"\"\"Check if sublist is present in list.\n\n    Args:\n        arr: List of integers.\n        sub_list: List of integers.\n\n    Examples:\n        >>> assert check_sublist([1, 2, 3, 4, 5], [1, 2, 3])\n        >>> assert not check_sublist([1, 2, 3, 4, 5], [1, 4, 5])\n    \"\"\"\n    if not arr or not sub_list:\n        return False\n\n    window_start = 0\n    window_end = 0\n    for char in sub_list:\n        while window_start <= window_end and arr[window_end] != char:\n            window_end += 1\n\n        if window_end >= len(arr):\n            return False\n\n        window_end += 1\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(check_sublist([1, 2, 3, 4, 5], [1, 2, 3]))\n    print(check_sublist([1, 2, 3, 4, 5], [1, 4, 5]))\n    print(check_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      -0.31298828125
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    if not main_list or not sublist:\n        return False\n\n    sublist_size = len(sublist)\n\n    for i in range(len(main_list) - sublist_size + 1):\n        if main_list[i : i + sublist_size] == sublist:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_sublist([1, 2, 3, 4], [1, 2]) is True\n    assert contains_sublist([1, 2, 3, 4], [1, 5]) is False\n    assert contains_sublist([1, 2, 3, 4], [1, 2, 3, 4]) is True",
      -0.337646484375
    ],
    [
      "from typing import List\n\n\ndef is_sublist(lst: List, sublist: List) -> bool:\n    \"\"\"Checks if a sublist is present in a list\n\n    Args:\n        lst: the list in which to search for sublist\n        sublist: the sublist to search for\n\n    Returns:\n        bool: True if the sublist is present in lst, else False\n    \"\"\"\n    if len(lst) == 0:\n        return False\n    if len(lst) == 1:\n        return lst[0] == sublist[0]\n    if len(lst) < len(sublist):\n        return False\n    for i in range(len(lst)):\n        if lst[i] == sublist[0]:\n            for j in range(len(sublist)):\n                if lst[i + j] != sublist[j]:\n                    break\n            else:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sublst = [4, 5]\n    print(is_sublist(lst, sublst))",
      -0.386962890625
    ],
    [
      "from typing import List\n\n\ndef check_sublist(lst: List, sublist: List) -> bool:\n    \"\"\"\n    If the sublist is a subset of the list, we can use a simple set difference\n    to check if it's present or not.\n    \"\"\"\n    return len(set(sublist).difference(set(lst))) == 0\n\n\nif __name__ == \"__main__\":\n    assert check_sublist([1, 2, 3], [1, 2]) == True\n    assert check_sublist([1, 2, 3], [2, 3]) == True\n    assert check_sublist([1, 2, 3], [1, 3]) == True\n    assert check_sublist([1, 2, 3], [1, 4]) == False\n    assert check_sublist([1, 2, 3], [2, 4]) == False\n    assert check_sublist([1, 2, 3], [3, 4]) == False",
      -0.43701171875
    ],
    [
      "from copy import deepcopy\n\n\ndef contains_sublist(l1: list, l2: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(l2) == 0:\n        return True\n\n    if len(l1) == 0:\n        return False\n\n    if len(l2) > len(l1):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] == l2[0]:\n            if l1[i : i + len(l2)] == l2:\n                return True\n\n    return False\n\n\ndef contains_sublist_optimized(l1: list, l2: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(l2) == 0:\n        return True\n\n    if len(l1) == 0:\n        return False\n\n    if len(l2) > len(l1):\n        return False\n\n    l1_copy = deepcopy(l1)\n    for i in range(len(l1)):\n        if l1[i] == l2[0]:\n            if l1[i : i + len(l2)] == l2:\n                return True\n\n        l1_copy.pop(0)\n        l1_copy.append(l1[i])\n\n    return False\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3]\n    assert contains_sublist(l1, l2) == True\n\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [2, 3]\n    assert contains_sublist(l1, l2) == True\n\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [5, 6]\n    assert contains_sublist(",
      -0.50732421875
    ],
    [
      "from typing import List\n\n\ndef sublist(lst: List, sublst: List) -> bool:\n    \"\"\"\n    Complexity: O(n^2)\n    \"\"\"\n    if lst == sublst:\n        return True\n\n    if len(sublst) > len(lst):\n        return False\n\n    for i in range(len(lst)):\n        if lst[i : i + len(sublst)] == sublst:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert sublist([1, 2, 3, 4, 5], [1, 2, 3]) == True\n    assert sublist([1, 2, 3, 4, 5], [2, 3]) == True\n    assert sublist([1, 2, 3, 4, 5], [3, 4]) == True\n    assert sublist([1, 2, 3, 4, 5], [4, 5]) == True\n    assert sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n    assert sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == False\n    assert sublist([1, 2, 3, 4, 5], [1, 3, 5]) == False\n    assert sublist([1, 2, 3, 4, 5], [2, 4]) == False\n    assert sublist([1, 2, 3, 4, 5], [1, 2, 3, 5]) == False",
      -0.54248046875
    ],
    [
      "def contains_sublist(lst, sub):\n    # 1st solution: O(n^2)\n    for i in range(len(lst)):\n        for j in range(len(sub)):\n            if lst[i+j] != sub[j]:\n                break\n        else:\n            return True\n    return False\n\n\ndef contains_sublist_optimized(lst, sub):\n    # 2nd solution: O(n)\n    if not lst or not sub:\n        return False\n\n    for i in range(len(lst) - len(sub) + 1):\n        for j in range(len(sub)):\n            if lst[i+j] != sub[j]:\n                break\n        else:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_sublist([1, 2, 3, 4], [1, 2]))\n    print(contains_sublist([1, 2, 3, 4], [2, 3]))\n    print(contains_sublist([1, 2, 3, 4], [1, 2, 3]))\n    print(contains_sublist([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(contains_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5]))\n    print(contains_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4]))",
      -0.5537109375
    ],
    [
      "def sublist_in_list(sublist, list_):\n    if not sublist:\n        return True\n    if not list_:\n        return False\n\n    if len(sublist) > len(list_):\n        return False\n\n    sublist_len = len(sublist)\n    for index in range(len(list_)):\n        if sublist == list_[index:index+sublist_len]:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sublist_in_list([], []))\n    print(sublist_in_list([1], []))\n    print(sublist_in_list([1], [1]))\n    print(sublist_in_list([1, 2], [1, 2]))\n    print(sublist_in_list([1, 2], [1, 2, 3]))\n    print(sublist_in_list([1, 2], [3, 4, 5, 6, 7, 8, 9, 10]))\n    print(sublist_in_list([1, 2, 3], [3, 4, 5, 6, 7, 8, 9, 10]))\n    print(sublist_in_list([1, 2, 3], [3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3]))\n    print(sublist_in_list([1, 2, 3], [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]))",
      -0.72021484375
    ],
    [
      "def check_sublist(arr, sub):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr) - len(sub) + 1):\n        for j in range(len(sub)):\n            if arr[i + j] != sub[j]:\n                break\n        else:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    sub = [1, 2, 3]\n    print(check_sublist(arr, sub))\n\n    arr = [1, 2, 3, 4, 5, 6]\n    sub = [4, 5, 6]\n    print(check_sublist(arr, sub))\n\n    arr = [1, 2, 3, 4, 5, 6]\n    sub = [4, 5]\n    print(check_sublist(arr, sub))\n\n    arr = [1, 2, 3, 4, 5, 6]\n    sub = [5, 6]\n    print(check_sublist(arr, sub))\n\n    arr = [1, 2, 3, 4, 5, 6]\n    sub = [1, 2, 3, 4, 5, 6]\n    print(check_sublist(arr, sub))\n\n    arr = [1, 2, 3, 4, 5, 6]\n    sub = [1, 2, 3, 4, 5, 6, 7]\n    print(check_sublist(arr, sub))",
      -0.76171875
    ],
    [
      "from typing import List\n\n\ndef check_sublist(lst: List[int], sublist: List[int]) -> bool:\n    \"\"\"Checks if a given sublist is present in the given list.\n\n    Args:\n        lst (List[int]): The list to check the sublist in.\n        sublist (List[int]): The sublist to check for.\n\n    Returns:\n        bool: True if the sublist is present in the list, False otherwise.\n    \"\"\"\n    if len(lst) < len(sublist):\n        return False\n\n    # For each element in the list, check if the rest of the list contains the sublist\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i] == sublist[0] and lst[i : i + len(sublist)] == sublist:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sublist = [1, 2, 3]\n    print(check_sublist(lst, sublist))",
      -0.8095703125
    ],
    [
      "def check_sublist(lst, sublst):\n    for i in range(len(lst)):\n        if sublst == lst[i : i + len(sublst)]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5]\n    sublst = [2, 3]\n    print(check_sublist(lst, sublst))",
      -0.85693359375
    ],
    [
      "def sublist(lst, sub):\n    if len(lst) < len(sub):\n        return False\n\n    for i in range(len(lst)):\n        if lst[i] == sub[0]:\n            if lst[i:i+len(sub)] == sub:\n                return True\n\n    return False\n\n\nif __name__ == '__main__':\n    print(sublist([1, 2, 3, 4, 5], [1, 2, 3]))\n    print(sublist([1, 2, 3, 4, 5], [1, 2, 4]))\n    print(sublist([1, 2, 3, 4, 5], [1, 5, 6]))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(lst: List[int], sublst: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(lst)\n    m = len(sublst)\n    for i in range(n):\n        j = 0\n        while j < m and lst[i + j] == sublst[j]:\n            j += 1\n        if j == m:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_sublist([1, 2, 3, 4, 5], [1, 2, 3]))\n    print(contains_sublist([1, 2, 3, 4, 5], [2, 3, 4]))",
      -0.85693359375
    ],
    [
      "def check_sublist(l, sublist):\n    sublist_len = len(sublist)\n    for i in range(len(l)):\n        if l[i:i+sublist_len] == sublist:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sublist = [1, 2, 3, 4, 5]\n    print(check_sublist(l, sublist))",
      -0.85693359375
    ],
    [
      "def check_sublist(main_list, sublist):\n    for i in range(len(main_list) - len(sublist) + 1):\n        for j in range(len(sublist)):\n            if main_list[i + j] != sublist[j]:\n                break\n        else:\n            return True\n    return False\n\n\nmain_list = [1, 2, 3, 4, 5]\nsublist = [3, 4]\nprint(check_sublist(main_list, sublist))",
      -0.85693359375
    ],
    [
      "def is_sublist(main_list, sublist):\n    sub_length = len(sublist)\n    for index in range(len(main_list)):\n        if main_list[index:index + sub_length] == sublist:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    main_list = [1, 2, 3, 4, 5]\n    sublist = [1, 2, 3]\n    print(is_sublist(main_list, sublist))",
      -0.85693359375
    ],
    [
      "def check_sublist(list_a, list_b):\n    for i in range(len(list_a) - len(list_b) + 1):\n        if list_a[i: i + len(list_b)] == list_b:\n            return True\n    return False\n\n\nprint(check_sublist([1, 2, 3, 4], [1, 2]))\nprint(check_sublist([1, 2, 3, 4], [2, 3]))\nprint(check_sublist([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(check_sublist([1, 2, 3, 4], [5, 6]))",
      -0.85693359375
    ],
    [
      "def is_sublist(big_list, small_list):\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    if small_list == []:\n        return True\n\n    for index in range(len(big_list)):\n        for sub_index in range(len(small_list)):\n            if small_list[sub_index] != big_list[index + sub_index]:\n                break\n\n            if sub_index == len(small_list) - 1:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    big_list = [1, 2, 3, 4, 5, 6]\n    small_list = [4, 5, 6]\n    print(is_sublist(big_list, small_list))",
      -0.85791015625
    ],
    [
      "def check_sublist(list1, list2):\n    return list1 == list2\n\nprint(check_sublist([1,2,3,4],[1,2,3,4]))",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(sublist) > len(main_list):\n        return False\n\n    for i in range(len(main_list)):\n        for j in range(len(sublist)):\n            if main_list[i + j] != sublist[j]:\n                break\n\n        if j == len(sublist) - 1:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_sublist([1, 2, 3, 4, 5], [2, 3]) == True\n    assert contains_sublist([1, 2, 3, 4, 5], [5, 6]) == False",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef is_sublist(lst: List, sublst: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i : i + len(sublst)] == sublst:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_sublist([1, 2, 3, 4, 5], [1, 2, 3]) is True\n    assert is_sublist([1, 2, 3, 4, 5], [1, 2, 6]) is False",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"\n    Time Complexity: O(m*n)\n    \"\"\"\n    for i in range(len(main_list) - len(sublist) + 1):\n        if main_list[i:i + len(sublist)] == sublist:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_sublist([1, 2, 3, 4], [1, 2])\n    assert contains_sublist([1, 2, 3, 4], [2, 3])\n    assert not contains_sublist([1, 2, 3, 4], [3, 2])",
      -0.8583984375
    ],
    [
      "from timeit import timeit\n\n\ndef contains_sublist(lst, sublst):\n    for i in range(len(lst) - len(sublst) + 1):\n        for j in range(len(sublst)):\n            if lst[i + j] != sublst[j]:\n                break\n        else:\n            return True\n    return False\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    sublst = [1, 2, 3, 4]\n    print(contains_sublist(lst, sublst))\n\n\nif __name__ == '__main__':\n    print(timeit(lambda: main(), number=10000))",
      -0.8583984375
    ],
    [
      "def contains(main_list, sub_list):\n    \"\"\"\n    This function takes in a list and a sub list and checks whether\n    the sub list is present in the main list or not.\n    \"\"\"\n    for i in range(len(main_list) - len(sub_list) + 1):\n        for j in range(len(sub_list)):\n            if main_list[i + j] != sub_list[j]:\n                break\n        else:\n            return True\n    return False\n\n\ndef main():\n    \"\"\"\n    The main function to execute with inputs as list and sub list.\n    \"\"\"\n    main_list = [1, 2, 3, 4, 5, 6, 7, 8]\n    sub_list = [1, 2, 3]\n    if contains(main_list, sub_list):\n        print(\"Sub list found in the given main list.\")\n    else:\n        print(\"Sub list not found in the given main list.\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "from timeit import timeit\n\n\ndef check_sublist(arr, sub):\n    if not arr and not sub:\n        return True\n    if not arr or not sub:\n        return False\n    if len(arr) < len(sub):\n        return False\n    arr_index = 0\n    sub_index = 0\n    while arr_index < len(arr) and sub_index < len(sub):\n        if arr[arr_index] == sub[sub_index]:\n            sub_index += 1\n        arr_index += 1\n    if sub_index == len(sub):\n        return True\n    return False\n\n\ndef check_sublist_optimized(arr, sub):\n    if not arr and not sub:\n        return True\n    if not arr or not sub:\n        return False\n    if len(arr) < len(sub):\n        return False\n    for i in range(len(arr)):\n        if arr[i] == sub[0]:\n            if arr[i:i + len(sub)] == sub:\n                return True\n    return False\n\n\nprint(timeit(lambda: check_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3]), number=10000))  # 0.001559526000070301\nprint(timeit(lambda: check_sublist_optimized([1, 2, 3, 4, 5, 6], [1, 2, 3]), number=10000))  # 0.0006179380000039954",
      -0.86376953125
    ],
    [
      "from timeit import timeit\n\n\ndef check_sublist(sublist, lst):\n    sub_set = set(sublist)\n    for i in range(len(lst) - len(sublist) + 1):\n        if sub_set == set(lst[i : i + len(sublist)]):\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    sublist = [1, 2, 3]\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\n    print(timeit(lambda: check_sublist(sublist, lst), number=10000))",
      -0.984375
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"Check if sublist is a sublist of main_list.\n\n    Args:\n        main_list (List): main list\n        sublist (List): sublist\n\n    Returns:\n        bool: if sublist is sublist of main_list\n\n    Examples:\n        >>> check_sublist([1, 2, 3, 4], [1, 2, 3])\n        True\n        >>> check_sublist([1, 2, 3, 4], [1, 2, 3, 5])\n        False\n    \"\"\"\n    if len(sublist) > len(main_list):\n        return False\n    for i in range(len(main_list) - len(sublist) + 1):\n        for j in range(len(sublist)):\n            if main_list[i + j] != sublist[j]:\n                break\n        else:\n            return True\n    return False\n\n\ndef main():\n    print(check_sublist([1, 2, 3, 4], [1, 2, 3]))\n    print(check_sublist([1, 2, 3, 4], [1, 2, 3, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.048828125
    ],
    [
      "from typing import List\n\n\ndef check_sublist(arr: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Using sliding window technique.\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    arr_len = len(arr)\n    sub_len = len(sublist)\n\n    if sub_len > arr_len:\n        return False\n\n    for start in range(arr_len - sub_len + 1):\n        if arr[start] == sublist[0]:\n            for i in range(sub_len):\n                if arr[start + i] != sublist[i]:\n                    break\n            else:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_sublist([1, 2, 3, 4, 5], [1, 2]) is True\n    assert check_sublist([1, 2, 3, 4, 5], [1, 7]) is False\n    assert check_sublist([1, 2, 3, 4, 5], [2, 3]) is True",
      -1.31640625
    ],
    [
      "from typing import List\n\n\ndef is_sublist(list_one: List[int], list_two: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n)\n    \"\"\"\n    if not list_two:\n        return True\n\n    for index, value in enumerate(list_one):\n        if value == list_two[0]:\n            if list_one[index : index + len(list_two)] == list_two:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_sublist([1, 2, 3, 4], [1, 2, 3]))\n    print(is_sublist([1, 2, 3, 4], [1, 2, 4]))\n    print(is_sublist([1, 2, 3, 4], [2, 3]))\n    print(is_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5]))",
      -1.328125
    ],
    [
      "from typing import List\n\n\ndef sublist_checker(list_a: List[int], list_b: List[int]) -> bool:\n    \"\"\"Checks whether a list contains the given sublist or not.\n\n    Args:\n        list_a (List[int]): The list that contains the sublist\n        list_b (List[int]): The sublist to search\n\n    Returns:\n        bool: True if list_a contains list_b, False otherwise\n    \"\"\"\n\n    if len(list_a) == 0:\n        return len(list_b) == 0\n    if len(list_b) == 0:\n        return True\n\n    if list_a[0] == list_b[0]:\n        return list_a[1:] == list_b[1:] or sublist_checker(list_a[1:], list_b[1:])\n\n    return sublist_checker(list_a[1:], list_b)\n\n\nif __name__ == \"__main__\":\n    assert sublist_checker([1, 2, 3, 4], [1, 2, 3]) == True\n    assert sublist_checker([1, 2, 3, 4], [1, 2, 3, 4]) == True\n    assert sublist_checker([1, 2, 3, 4], [2, 3, 4]) == True\n    assert sublist_checker([1, 2, 3, 4], [1, 3, 4]) == True\n    assert sublist_checker([1, 2, 3, 4], [1, 2, 4]) == True\n    assert sublist_checker([1, 2, 3, 4], [1, 3]) == True\n    assert sublist_checker([1, 2, 3, 4], [2, 4]) == True\n    assert sublist_checker([1, 2, 3, 4], [1, 4]) == True\n    assert sublist_checker([1, 2, 3, 4], [3, 4])",
      -1.4833984375
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(arr: List, sub_list: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr or not sub_list:\n        return False\n\n    # create a hash set of sub list\n    sub_list_set = set(sub_list)\n\n    # create a hash set of elements in sub list\n    sub_list_hash = {}\n\n    # iterate over sub list\n    for i, val in enumerate(sub_list):\n        # check if the element is present in hash set\n        if val not in sub_list_hash:\n            sub_list_hash[val] = 1\n        else:\n            sub_list_hash[val] += 1\n\n        # check if the element is present in arr\n        if val not in arr:\n            continue\n\n        # iterate over arr and check if the element is present\n        # in sub list hash\n        for j in range(i, len(arr)):\n            if arr[j] in sub_list_hash and sub_list_hash[arr[j]] > 0:\n                sub_list_hash[arr[j]] -= 1\n            else:\n                break\n\n        if sub_list_hash[arr[j]] == 0:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    sub_list = [1, 2, 3]\n    assert contains_sublist(arr, sub_list)\n    assert not contains_sublist(arr, [1, 2, 3, 4, 5, 6, 7])\n    assert contains_sublist([1, 2, 3, 4, 5, 6, 7], [1, 2, 3])\n    assert contains_sublist([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7])",
      -1.5078125
    ],
    [
      "from typing import List\n\n\ndef is_sublist(lst: List, sublst: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    n = len(lst)\n    m = len(sublst)\n\n    for i in range(n - m + 1):\n        for j in range(m):\n            if lst[i + j] != sublst[j]:\n                break\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_sublist([1, 2, 3, 4], [2, 3]))\n    print(is_sublist([1, 2, 3, 4], [2, 4]))\n    print(is_sublist([1, 2, 3, 4], [2, 5]))\n    print(is_sublist([1, 2, 3, 4], [2, 3, 4]))",
      -1.54296875
    ],
    [
      "def sublist_in_list(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] != list2[0]:\n            continue\n        for j in range(len(list1)):\n            if list1[i+j] != list2[j]:\n                break\n        else:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(sublist_in_list([1, 2, 3, 4], [1, 2, 3]))\n    print(sublist_in_list([1, 2, 3, 4], [1, 2]))\n    print(sublist_in_list([1, 2, 3, 4], [2, 3]))\n    print(sublist_in_list([1, 2, 3, 4], [2, 3, 4]))\n    print(sublist_in_list([1, 2, 3, 4], [3, 4]))\n    print(sublist_in_list([1, 2, 3, 4], [4, 5]))\n    print(sublist_in_list([1, 2, 3, 4], [5, 6]))\n    print(sublist_in_list([1, 2, 3, 4], [5, 6, 7]))\n    print(sublist_in_list([1, 2, 3, 4], [1, 2, 3, 4]))",
      -1.5546875
    ],
    [
      "from typing import List\n\n\ndef is_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n\n    :param main_list:\n    :param sublist:\n    :return:\n    >>> is_sublist([1, 2, 3, 4], [2, 3])\n    True\n    >>> is_sublist([1, 2, 3, 4], [1, 3])\n    True\n    >>> is_sublist([1, 2, 3, 4], [1, 3, 4])\n    True\n    >>> is_sublist([1, 2, 3, 4], [2, 4])\n    False\n    \"\"\"\n    sublist_len = len(sublist)\n    for i in range(len(main_list)):\n        if main_list[i] == sublist[0]:\n            if main_list[i : i + sublist_len] == sublist:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.5634765625
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(list_: List[int], sublist: List[int]) -> bool:\n    \"\"\"Checks if list contains the given sublist.\n\n    Args:\n        list_ (List[int]): List of integers.\n        sublist (List[int]): Sublist of integers.\n\n    Returns:\n        bool: True if sublist is found in list_, False otherwise.\n    \"\"\"\n\n    list_length, sublist_length = len(list_), len(sublist)\n\n    if sublist_length > list_length:\n        return False\n\n    sublist_index = 0\n\n    for index in range(list_length):\n        if list_[index] == sublist[sublist_index]:\n            sublist_index += 1\n\n        if sublist_index == sublist_length:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3])\n    assert not contains_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n    assert contains_sublist([1, 2, 3, 4, 5, 6], [4, 5, 6])\n    assert not contains_sublist([1, 2, 3, 4, 5, 6], [4, 6])\n    assert not contains_sublist([1, 2, 3, 4, 5, 6], [7, 8])",
      -1.62890625
    ],
    [
      "from timeit import timeit\n\n\ndef contains_sublist(arr, subarr):\n    for i in range(len(arr) - len(subarr) + 1):\n        for j in range(len(subarr)):\n            if arr[i + j] != subarr[j]:\n                break\n        else:\n            return i, i + len(subarr)\n    return False\n\n\ndef contains_sublist_optimized(arr, subarr):\n    for i in range(len(arr) - len(subarr) + 1):\n        for j in range(len(subarr)):\n            if arr[i + j] != subarr[j]:\n                break\n        else:\n            return i, i + len(subarr)\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    subarr = [2, 3, 4, 5]\n    print(contains_sublist(arr, subarr))\n    print(contains_sublist_optimized(arr, subarr))\n\n    print(timeit(\"contains_sublist(arr, subarr)\", globals=globals()))\n    print(timeit(\"contains_sublist_optimized(arr, subarr)\", globals=globals()))",
      -1.6865234375
    ],
    [
      "from typing import List\n\n\ndef sublist_exists(sublist: List, list_: List) -> bool:\n    \"\"\"Checks if sublist exists in list_.\n\n    Args:\n        sublist (List): Sublist to check for.\n        list_ (List): List to check in.\n\n    Returns:\n        bool: True if sublist exists in list_.\n    \"\"\"\n    return _sublist_exists_helper(sublist, list_, 0, 0)\n\n\ndef _sublist_exists_helper(sublist: List, list_: List, sublist_index: int, list_index: int) -> bool:\n    if sublist_index == len(sublist):\n        return True\n    if list_index == len(list_):\n        return False\n    if sublist[sublist_index] == list_[list_index]:\n        return _sublist_exists_helper(sublist, list_, sublist_index + 1, list_index + 1)\n    else:\n        return _sublist_exists_helper(sublist, list_, sublist_index, list_index + 1)\n\n\nif __name__ == \"__main__\":\n    assert sublist_exists([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n    assert sublist_exists([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) == False\n    assert sublist_exists([1, 2, 3, 4, 5], [1, 2, 3, 4]) == True\n    assert sublist_exists([1, 2, 3, 4, 5], [2, 3, 4]) == True\n    assert sublist_exists([1, 2, 3, 4, 5], [3, 4, 5]) == True\n    assert sublist_exists([1, 2, 3, 4, 5], [5, 4, 3]) == False\n    assert sublist_exists([1, 2, 3, 4, 5],",
      -1.7587890625
    ],
    [
      "from typing import List\n\n\ndef is_sublist(lst: List[int], sublst: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    if len(lst) < len(sublst):\n        return False\n\n    for i in range(len(lst) - len(sublst) + 1):\n        for j in range(len(sublst)):\n            if lst[i + j] != sublst[j]:\n                break\n        else:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_sublist([1, 2, 3, 4], [1, 2, 3]) is True\n    assert is_sublist([1, 2, 3, 4], [1, 2, 4]) is False\n    assert is_sublist([1, 2, 3, 4], [1, 2, 3, 4]) is True\n    assert is_sublist([1, 2, 3, 4], [1, 2, 3, 5]) is False",
      -1.8154296875
    ],
    [
      "from typing import List\n\n\ndef check_sublist(sublist: List, list_: List) -> bool:\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    >>> check_sublist([1, 2, 3], [1, 2, 3, 4])\n    True\n    >>> check_sublist([1, 2, 3], [1, 2, 3, 4, 5])\n    True\n    >>> check_sublist([1, 2, 3], [1, 2, 4, 5])\n    False\n    >>> check_sublist([1, 2, 3], [1, 2, 3])\n    True\n    >>> check_sublist([1, 2, 3], [1, 2, 3, 3])\n    True\n    >>> check_sublist([1, 2, 3], [1, 2])\n    False\n    >>> check_sublist([1, 2, 3], [1, 2, 3, 3, 3])\n    True\n    >>> check_sublist([1, 2, 3], [1, 2, 3, 3, 3, 3])\n    True\n    >>> check_sublist([1, 2, 3], [1, 2, 3, 3, 3, 3, 3])\n    False\n    \"\"\"\n    if not sublist:\n        return False\n    if not list_:\n        return False\n    for i in range(len(list_)):\n        if list_[i] == sublist[0]:\n            if list_[i : i + len(sublist)] == sublist:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.18359375
    ],
    [
      "from typing import List\n\n\ndef is_sublist(main: List, sub: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not main or not sub:\n        return False\n\n    # find the length of the sublist\n    sub_len = len(sub)\n\n    # iterate over the main list\n    for i in range(len(main)):\n        if main[i] == sub[0]:\n            # check if the sublist is at the current index\n            if main[i : i + sub_len] == sub:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_sublist([1, 2, 3], [1, 2]) is True\n    assert is_sublist([1, 2, 3], [2, 3]) is True\n    assert is_sublist([1, 2, 3], [1, 4]) is False\n    assert is_sublist([1, 2, 3], [4, 5]) is False",
      -2.2734375
    ],
    [
      "from typing import List\n\n\ndef is_sublist(lst: List[int], sublst: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if not lst:\n        return False\n\n    sub_len = len(sublst)\n    lst_len = len(lst)\n\n    for i in range(lst_len):\n        if lst[i] == sublst[0]:\n            if i + sub_len > lst_len:\n                return False\n            j = 1\n            while j < sub_len:\n                if lst[i + j] != sublst[j]:\n                    break\n                j += 1\n            if j == sub_len:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6]\n    sublst = [2, 3, 4]\n    assert is_sublist(lst, sublst) is True\n    sublst = [2, 3, 5]\n    assert is_sublist(lst, sublst) is False",
      -2.3125
    ],
    [
      "from typing import List\n\n\ndef is_sublist(lst: List, sublst: List) -> bool:\n    \"\"\"\n    >>> is_sublist([1, 2, 3, 4], [3, 4])\n    True\n    >>> is_sublist([1, 2, 3, 4], [5, 6])\n    False\n    >>> is_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n    True\n    >>> is_sublist([1, 2, 3, 4], [2, 3, 4, 5, 6])\n    False\n    >>> is_sublist([1, 2, 3, 4], [1, 2, 3])\n    True\n    >>> is_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5])\n    False\n    >>> is_sublist([1, 2, 3, 4], [])\n    True\n    \"\"\"\n    i = 0\n    j = 0\n    n = len(sublst)\n\n    while i < len(lst):\n        if lst[i] == sublst[j]:\n            j += 1\n\n            if j == n:\n                return True\n        else:\n            i += 1\n            j = 0\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.3828125
    ],
    [
      "from typing import List\n\n\ndef check_sublist(main_list: List[int], sub_list: List[int]) -> bool:\n    \"\"\"Check whether a list contains the given sublist or not.\n\n    Args:\n        main_list (List[int]): The main list.\n        sub_list (List[int]): The sub list.\n\n    Returns:\n        bool: Whether a list contains the given sublist or not.\n\n    Examples:\n        >>> check_sublist([1, 2, 3, 4], [1, 2])\n        True\n        >>> check_sublist([1, 2, 3, 4], [1, 7])\n        False\n        >>> check_sublist([1, 2, 3, 4], [1, 2, 5])\n        False\n        >>> check_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5])\n        False\n    \"\"\"\n    if not main_list or not sub_list:\n        return False\n\n    main_list_size, sub_list_size = len(main_list), len(sub_list)\n    if main_list_size < sub_list_size:\n        return False\n\n    for i in range(main_list_size - sub_list_size + 1):\n        if main_list[i : i + sub_list_size] == sub_list:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -2.5
    ],
    [
      "from timeit import timeit\n\n\ndef is_sublist(l: list, sub: list) -> bool:\n    return all(item in l for item in sub)\n\n\ndef is_sublist_optimized(l: list, sub: list) -> bool:\n    if len(sub) > len(l):\n        return False\n    sub_set = set(sub)\n    l_set = set(l)\n    return sub_set <= l_set\n\n\ndef is_sublist_optimized_2(l: list, sub: list) -> bool:\n    if len(sub) > len(l):\n        return False\n    sub_set = set(sub)\n    l_set = set(l)\n    return len(l_set) >= len(sub_set) and sub_set <= l_set\n\n\nif __name__ == \"__main__\":\n    print(is_sublist_optimized([1, 2, 3, 4, 5], [1, 2, 3]))\n    print(is_sublist_optimized([1, 2, 3, 4, 5], [2, 3]))\n    print(is_sublist_optimized([1, 2, 3, 4, 5], [4, 5]))\n    print(is_sublist_optimized([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_sublist_optimized([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))\n    print(is_sublist_optimized([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\n    print(is_sublist_optimized([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 1]))\n    print(is_sublist_optimized([1, 2, 3, 4, 5], [1, 2, 3, 4",
      -3.22265625
    ],
    [
      "def sublist_exists(sublist, lst):\n    \"\"\"\n    sublist_exists\n    \"\"\"\n    if len(sublist) > len(lst):\n        return False\n    sublist_index = 0\n    lst_index = 0\n    while sublist_index < len(sublist) and lst_index < len(lst):\n        if sublist[sublist_index] == lst[lst_index]:\n            sublist_index += 1\n        lst_index += 1\n    if sublist_index == len(sublist):\n        return True\n    return False\n\n\ndef main():\n    \"\"\"\n    Main\n    \"\"\"\n    print(sublist_exists([1, 2, 3, 4], [2, 3, 4]))\n    print(sublist_exists([1, 2, 3, 4], [1, 2, 3]))\n    print(sublist_exists([1, 2, 3, 4], [4, 2, 3]))\n    print(sublist_exists([1, 2, 3, 4], [1, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.40625
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(lst: List[int], sublst: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not lst or not sublst:\n        return False\n\n    sublist_size = len(sublst)\n    sublist_index = 0\n    window_start = 0\n\n    while window_start < len(lst) - sublist_size + 1:\n        if lst[window_start] == sublst[sublist_index]:\n            if sublist_index == 0:\n                return True\n            sublist_index += 1\n            window_start += 1\n        else:\n            if sublist_index != 0:\n                sublist_index = 0\n            window_start += 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_sublist([1, 2, 3, 4], [1, 2]) is True\n    assert contains_sublist([1, 2, 3, 4], [2, 3]) is True\n    assert contains_sublist([1, 2, 3, 4], [1, 6]) is False\n    assert contains_sublist([1, 2, 3, 4], [1, 1]) is False",
      -3.7734375
    ],
    [
      "def check_sublist(list1, list2):\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    for i in range(len(list1)):\n        if list1[i] == list2[0]:\n            break\n    for j in range(len(list2)):\n        if list1[i+j] != list2[j]:\n            return False\n    return True\n\n\nprint(check_sublist([1, 2, 3, 4], [2, 3]))\nprint(check_sublist([1, 2, 3, 4], [2, 3, 4]))\nprint(check_sublist([1, 2, 3, 4], [2, 3, 5]))\nprint(check_sublist([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(check_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5]))",
      -3.94140625
    ],
    [
      "from copy import deepcopy\n\n\ndef sublist_check(main_list, sublist):\n    \"\"\"\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [1, 2, 3])\n    True\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [2, 3, 4])\n    True\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n    True\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6])\n    True\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7])\n    False\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8])\n    False\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    False\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    False\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    False\n    >>> sublist_check([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7,",
      -3.9609375
    ],
    [
      "from typing import List\n\n\ndef contains_sublist(lst: List, sublst: List) -> bool:\n    \"\"\"Check whether a list contains the given sublist or not.\n\n    Args:\n        lst (List): The list to check.\n        sublst (List): The sublist to check.\n\n    Returns:\n        bool: True if list contains the given sublist, False otherwise.\n\n    Examples:\n        >>> assert contains_sublist([1, 2, 3, 4], [1, 2])\n        >>> assert not contains_sublist([1, 2, 3, 4], [5, 6])\n        >>> assert contains_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4])\n    \"\"\"\n    return _contains_sublist(lst, sublst, 0)\n\n\ndef _contains_sublist(lst: List, sublst: List, index: int) -> bool:\n    if not sublst:\n        return True\n\n    if not lst:\n        return False\n\n    if lst[index] == sublst[0]:\n        return _contains_sublist(lst, sublst[1:], index + 1)\n\n    return _contains_sublist(lst, sublst, index + 1)\n\n\nif __name__ == \"__main__\":\n    print(contains_sublist([1, 2, 3, 4], [1, 2]))\n    print(contains_sublist([1, 2, 3, 4], [5, 6]))\n    print(contains_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4]))",
      -4.04296875
    ],
    [
      "from collections import deque\n\n\ndef contains_sublist(list1: list, list2: list) -> bool:\n    \"\"\"\n    Using sliding window.\n    Complexity -> O(n)\n    \"\"\"\n    if not list1 or not list2:\n        return False\n\n    # find the length of the sublist\n    sublist_len = len(list2)\n\n    # iterate over the list\n    for i in range(len(list1)):\n        # check if the sliding window size is greater than the sublist\n        if i + sublist_len > len(list1):\n            break\n\n        # check if the sublist is found in the sliding window\n        if list1[i:i + sublist_len] == list2:\n            return True\n\n    return False\n\n\ndef contains_sublist_queue(list1: list, list2: list) -> bool:\n    \"\"\"\n    Using queue.\n    Complexity -> O(n)\n    \"\"\"\n    if not list1 or not list2:\n        return False\n\n    # find the length of the sublist\n    sublist_len = len(list2)\n\n    # iterate over the list\n    for i in range(len(list1)):\n        # check if the sliding window size is greater than the sublist\n        if i + sublist_len > len(list1):\n            break\n\n        # check if the sublist is found in the sliding window\n        if list1[i:i + sublist_len] == list2:\n            return True\n\n    return False\n\n\ndef contains_sublist_stack(list1: list, list2: list) -> bool:\n    \"\"\"\n    Using stack.\n    Complexity -> O(n)\n    \"\"\"\n    if not list1 or not list2:\n        return False\n\n    # find the length of the sublist\n    sublist_len = len(list2)\n\n    # iterate over the list\n    for i in range(len(list1)):\n        # check if the sliding window size is greater than the sublist\n        if i + sublist_len > len(list1):\n            break\n\n        # check if the sublist is found",
      -4.3515625
    ],
    [
      "from timeit import timeit\n\n\ndef sublist(list_1, list_2):\n    if list_1 == list_2:\n        return True\n    if len(list_1) < len(list_2):\n        return False\n\n    for i in range(len(list_1)):\n        for j in range(i, len(list_1)):\n            if list_1[i:j+1] == list_2:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    sublist_1 = [1, 2, 3, 4, 5, 6]\n    sublist_2 = [1, 2, 3, 4]\n    sublist_3 = [1, 2, 3, 4, 5, 6, 7, 8]\n    sublist_4 = [1, 2, 3, 4, 5, 6, 7]\n    sublist_5 = [1, 2, 3]\n    sublist_6 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    print(f\"Sublist 1: {sublist_1}\")\n    print(f\"Sublist 2: {sublist_2}\")\n    print(f\"Sublist 3: {sublist_3}\")\n    print(f\"Sublist 4: {sublist_4}\")\n    print(f\"Sublist 5: {sublist_5}\")\n    print(f\"Sublist 6: {sublist_6}\")\n\n    print(f\"Sublist 1: {sublist(sublist_1, sublist_2)}\")\n    print(f\"Sublist 2: {sublist(sublist_1, sublist_3)}\")\n    print(f\"Sublist 3: {sublist(sublist_1, sublist_4)}\")\n    print(f\"Sublist 4: {sublist(sublist_1, sublist_5)}\")\n    print(f\"Sublist 5: {sublist(sublist_1, sublist_6)}\")",
      -4.46875
    ],
    [
      "from typing import List\n\n\ndef is_sublist(l1: List, l2: List) -> bool:\n    \"\"\"\n    This solution is not efficient as it runs in O(n*m) time.\n\n    :param l1: main list\n    :param l2: sublist to check\n    :return: true if sublist is a sublist of main list else false\n    >>> is_sublist([1, 2, 3, 4], [1, 2])\n    True\n    >>> is_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5])\n    False\n    >>> is_sublist([1, 2, 3, 4], [3, 4])\n    True\n    \"\"\"\n    if l1 == l2:\n        return True\n\n    for i in range(len(l1)):\n        if l1[i] == l2[0]:\n            if l1[i : i + len(l2)] == l2:\n                return True\n    return False\n\n\ndef is_sublist_efficient(l1: List, l2: List) -> bool:\n    \"\"\"\n    This solution runs in O(n) time.\n\n    :param l1: main list\n    :param l2: sublist to check\n    :return: true if sublist is a sublist of main list else false\n    >>> is_sublist_efficient([1, 2, 3, 4], [1, 2])\n    True\n    >>> is_sublist_efficient([1, 2, 3, 4], [1, 2, 3, 4, 5])\n    False\n    >>> is_sublist_efficient([1, 2, 3, 4], [3, 4])\n    True\n    \"\"\"\n    if l1 == l2:\n        return True\n\n    l1_ptr, l2_ptr = 0, 0\n\n    while l1_ptr < len(l1) and l2_ptr < len(l2):\n        if l1[l1_ptr] == l2[l2_ptr]:\n            l1_ptr",
      -4.46875
    ],
    [
      "from copy import deepcopy\n\n\ndef is_sublist(lst, sublst):\n    lst_copy = deepcopy(lst)\n    sublst_copy = deepcopy(sublst)\n\n    while sublst_copy:\n        try:\n            sublst_copy.remove(sublst_copy[0])\n        except ValueError:\n            return False\n\n    while lst_copy:\n        lst_copy.remove(lst_copy[0])\n\n        if lst_copy == sublst_copy:\n            return True\n\n        lst_copy.append(lst_copy.pop(0))\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 6, 8]))\n    print(is_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 6, 8, 10]))\n    print(is_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 6, 10]))\n    print(is_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 10]))\n    print(is_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 9]))\n    print(is_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 9, 10]))",
      -5.984375
    ],
    [
      "from timeit import timeit\n\n\ndef is_sublist(list_1, list_2):\n    if len(list_1) > len(list_2):\n        return False\n    for i in range(len(list_1)):\n        if list_1[i] != list_2[i]:\n            return False\n    return True\n\n\ndef is_sublist_optimized(list_1, list_2):\n    if len(list_1) > len(list_2):\n        return False\n    for i in range(len(list_2)):\n        if list_2[i] == list_1[0]:\n            if list_2[i:i + len(list_1)] == list_1:\n                return True\n    return False\n\n\ndef is_sublist_inbuilt(list_1, list_2):\n    return list_1 in list_2\n\n\ndef main():\n    list_1 = [1, 2, 3]\n    list_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"Is sublist:\")\n    print(\"Normal:\", is_sublist(list_1, list_2))\n    print(\"Optimized:\", is_sublist_optimized(list_1, list_2))\n    print(\"Inbuilt:\", is_sublist_inbuilt(list_1, list_2))\n\n    list_1 = [2, 3]\n    list_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"\\nIs sublist:\")\n    print(\"Normal:\", is_sublist(list_1, list_2))\n    print(\"Optimized:\", is_sublist_optimized(list_1, list_2))\n    print(\"Inbuilt:\", is_sublist_inbuilt(list_1, list_2))\n\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
      -7.91015625
    ],
    [
      "def sublist_checker(sublist, list):\n    return sublist in list\n\n\ndef sublist_checker_2(sublist, list):\n    # Iteratively check if the sublist is in the list\n    sublist_index = 0\n    list_index = 0\n    while list_index < len(list):\n        if list[list_index] == sublist[sublist_index]:\n            # Check if the sublist is over\n            if sublist_index == len(sublist) - 1:\n                return True\n            sublist_index += 1\n        list_index += 1\n    return False\n\n\ndef sublist_checker_3(sublist, list):\n    # Iteratively check if the sublist is in the list\n    sublist_index = 0\n    list_index = 0\n    while list_index < len(list):\n        if list[list_index] == sublist[sublist_index]:\n            # Check if the sublist is over\n            if sublist_index == len(sublist) - 1:\n                return True\n            sublist_index += 1\n        elif sublist_index > 0:\n            # If it doesn't match, reset the sublist index to check again\n            sublist_index = 0\n        list_index += 1\n    return False\n\n\ndef sublist_checker_4(sublist, list):\n    # Iteratively check if the sublist is in the list\n    sublist_index = 0\n    list_index = 0\n    while list_index < len(list):\n        if list[list_index] == sublist[sublist_index]:\n            # Check if the sublist is over\n            if sublist_index == len(sublist) - 1:\n                return True\n            sublist_index += 1\n        elif sublist_index > 0:\n            # If it doesn't match, reset the sublist index to check again\n            sublist_index = 0\n        list_index += 1\n    return False\n\n\ndef sublist_checker_5(sublist, list):\n    # Iteratively check if the sublist is",
      -8.7734375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}