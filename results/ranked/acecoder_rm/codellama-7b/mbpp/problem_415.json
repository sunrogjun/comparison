{
  "problem": {
    "task_id": "MBPP/426",
    "prompt": "Write a function to filter odd numbers using lambda function.",
    "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
    "test_list": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ],
    "challenge_test_list": [],
    "problem_id": 415
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def filter_odd(lst):\n    return list(filter(lambda x: x % 2 != 0, lst))\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_odd(lst))\n\n\nif __name__ == '__main__':\n    main()",
      20.125
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_odd(arr))\n\nif __name__ == \"__main__\":\n    main()",
      20.109375
    ],
    [
      "def filter_odd(lst):\n    return list(filter(lambda x: x%2 != 0, lst))\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(filter_odd([1, 2, 3, 4, 5]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert filter_odd([1, 2, 3, 4, 5]) == [1, 3, 5]\n    assert filter_odd([11, 12, 13, 14, 15]) == [11, 13, 15]\n    assert filter_odd([21, 22, 23, 24, 25]) == [21, 23, 25]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      19.90625
    ],
    [
      "def lambda_filter_odd_numbers(numbers):\n    return list(filter(lambda x: x % 2 == 1, numbers))\n\n\ndef main():\n    print(\"[1, 2, 3, 4, 5, 6, 7, 8, 9] -> {}\".format(lambda_filter_odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n\n\nif __name__ == '__main__':\n    main()",
      18.484375
    ],
    [
      "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# # Without Lambda Function\n# def odd_filter(numbers):\n#     odd_number = []\n#     for number in numbers:\n#         if number % 2 == 1:\n#             odd_number.append(number)\n#     return odd_number\n\n# print(odd_filter(numbers))\n\n# With Lambda Function\nodd_numbers = list(filter(lambda x: x % 2 == 1, numbers))\nprint(odd_numbers)",
      15.953125
    ],
    [
      "from functools import reduce\n\n\ndef filter_odd(lst):\n    return list(filter(lambda x: x % 2 == 1, lst))\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = filter_odd(lst)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      15.9453125
    ],
    [
      "from functools import reduce\n\n\ndef filter_odd(list_of_numbers: list):\n    return list(filter(lambda x: x % 2 != 0, list_of_numbers))\n\n\ndef main():\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = filter_odd(list_of_numbers)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      15.71875
    ],
    [
      "from functools import reduce\n\n\ndef filter_odds(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = filter_odds(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      15.453125
    ],
    [
      "def filter_odd(lst):\n    return list(filter(lambda x: x%2 != 0, lst))\n\ndef main():\n    # print(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(list(filter(lambda x: x%2 != 0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))\n\nif __name__ == \"__main__\":\n    main()",
      14.9609375
    ],
    [
      "# Solution\ndef odd_num_filter(nums):\n    return list(filter(lambda num: num % 2 == 1, nums))\n\n\n# Tests\ndef test(nums, expected):\n    filtered = odd_num_filter(nums)\n    if filtered == expected:\n        print(\"Congratulations! You got it right.\")\n    else:\n        print(\"No, that's incorrect.\")\n\n\nprint(\"Odd numbers in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] are:\")\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 9])\n\nprint(\"Odd numbers in [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] are:\")\ntest([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [])\n\nprint(\"Odd numbers in [1, 3, 5, 7, 9] are:\")\ntest([1, 3, 5, 7, 9], [1, 3, 5, 7, 9])\n\nprint(\"Odd numbers in [2, 4, 6, 8] are:\")\ntest([2, 4, 6, 8], [])\n\nprint(\"Odd numbers in [1, 100, 3, 4, 5, 6, 7, 8, 9, 10] are:\")\ntest([1, 100, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 9])",
      13.3046875
    ],
    [
      "def odd(num):\n    if num % 2 == 1:\n        return True\n    else:\n        return False\n\ndef main():\n    my_list = [1,2,3,4,5,6,7,8,9,10]\n    my_list_odd = list(filter(lambda num: num % 2 == 1, my_list))\n    print(my_list_odd)\n\n\nif __name__ == '__main__':\n    main()",
      12.8359375
    ],
    [
      "# Solution\ndef odd_num_filter(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Tests\ndef test(nums, expected):\n    actual = odd_num_filter(nums)\n    if actual == expected:\n        print(\"Congratulations! Your functions are working correctly.\")\n    else:\n        print(\"Oops! Something is wrong.\")\n        print(actual)\n\ntest([1, 2, 3, 4, 5], [1, 3, 5])\ntest([1, 3, 5], [1, 3, 5])\ntest([2, 4, 6], [])\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 9])",
      11.53125
    ],
    [
      "# Solution\ndef odd_filter(list_of_numbers):\n    return list(filter(lambda x: x % 2 != 0, list_of_numbers))\n\n# Tests\ndef test(list_of_numbers, target):\n    actual = odd_filter(list_of_numbers)\n    if actual == target:\n        print(\"Congratulations! You got it right.\")\n    else:\n        print(\"Oops! That's not correct.\")\n\ntest([1, 2, 3, 4, 5], [1, 3, 5])",
      11.515625
    ],
    [
      "def odd_numbers_filter(number):\n    return number % 2 == 1\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    odd_numbers = list(filter(odd_numbers_filter, numbers))\n    print(odd_numbers)\n\n\nif __name__ == '__main__':\n    main()",
      9.3671875
    ],
    [
      "def odd(x):\n    return x%2 != 0\n\ndef main():\n    list = [1,2,3,4,5,6,7,8,9,10]\n    odds = list(filter(lambda x: x%2 != 0, list))\n    print(odds)\n\n\nif __name__ == \"__main__\":\n    main()",
      8.9765625
    ],
    [
      "def odd_filter(nums):\n    return list(filter(lambda num: num % 2 != 0, nums))\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(odd_filter(nums))",
      8.9375
    ],
    [
      "def filter_odd(input_list):\n    return list(filter(lambda x: x%2!=0, input_list))\n\nprint(filter_odd([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to apply map on a list using lambda function.\n\"\"\"\n\ndef map_list(input_list):\n    return list(map(lambda x: x*x, input_list))\n\nprint(map_list([1,2,3,4,5,6,7,8,9]))\n\n\"\"\"\nWrite a function to find sum of digits of a number using lambda function.\n\"\"\"\n\ndef sum_of_digits(input_number):\n    return sum(list(map(lambda x: int(x), str(input_number))))\n\nprint(sum_of_digits(12345))",
      8.3125
    ],
    [
      "def filter_odd(list_of_numbers):\n    return list(filter(lambda x: x % 2 != 0, list_of_numbers))\n\n\ndef main():\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = filter_odd(list_of_numbers)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()",
      7.64453125
    ],
    [
      "def filter_odd_using_lambda(nums):\n    return list(filter(lambda num: num % 2 != 0, nums))\n\n\nif __name__ == \"__main__\":\n    print(filter_odd_using_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      7.35546875
    ],
    [
      "def odd_filter(list_of_nums):\n    return list(filter(lambda x: x % 2 == 1, list_of_nums))\n\n\nif __name__ == '__main__':\n    print(odd_filter([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      6.9765625
    ],
    [
      "from functools import reduce\n\n\ndef odd_num_filter(list_of_num):\n    return reduce(\n        lambda num_list, num: num_list + [num] if num % 2 != 0 else num_list,\n        list_of_num,\n        [],\n    )\n\n\ndef main():\n    list_of_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(f\"List of numbers before filtering: {list_of_num}\")\n    print(f\"List of odd numbers after filtering: {odd_num_filter(list_of_num)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      6.875
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_odd(arr))",
      6.64453125
    ],
    [
      "def filter_odd(lst):\n    return list(filter(lambda x: x % 2 != 0, lst))\n\n\nprint(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      5.64453125
    ],
    [
      "# Solution\ndef filter_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\n# Tests\ndef test(expect, test):\n    print(f'expected: {expect} | got: {test}')\n\ntest([], filter_odd([]))\ntest([1, 3, 5, 7], filter_odd([1, 2, 3, 4, 5, 6, 7]))\ntest([1, 3, 5, 7], filter_odd([1, 3, 5, 7]))\ntest([1, 3, 5, 7], filter_odd([1, 3, 5, 7, 8]))\ntest([1, 3, 5, 7], filter_odd([1, 3, 5, 7, 8, 10]))\ntest([1, 3, 5, 7, 9], filter_odd([1, 3, 5, 7, 9, 10]))\ntest([1, 3, 5, 7, 9], filter_odd([1, 3, 5, 7, 9]))",
      5.58984375
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x%2==1, arr))\n\nif __name__ == '__main__':\n    print(filter_odd([1,2,3,4,5,6,7,8,9,10]))",
      5.546875
    ],
    [
      "def filter_odd(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\nprint(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      5.46484375
    ],
    [
      "def filter_odd(list):\n    return list(filter(lambda x: x%2!=0, list))\n\ndef main():\n    list = [1,2,3,4,5,6,7,8,9,10]\n    print(filter_odd(list))\n\nif __name__ == \"__main__\":\n    main()",
      5.24609375
    ],
    [
      "def odd_numbers(numbers):\n    \"\"\"Filter odd numbers using lambda function\"\"\"\n    return list(filter(lambda number: number % 2 == 1, numbers))\n\ndef test(condition):\n    \"\"\"Print pass / fail results\"\"\"\n    if condition():\n        print('Pass')\n    else:\n        print('Fail')\n\n\ndef test_function():\n    \"\"\"Run test functions in this file\"\"\"\n    test(lambda: odd_numbers([1, 2, 3, 4, 5]) == [1, 3, 5])\n    test(lambda: odd_numbers([11, 12, 13]) == [11, 13])\n    test(lambda: odd_numbers([0, -1, -2, 5, 6, -3]) == [0, -1, -3])\n\n\nif __name__ == '__main__':\n    test_function()",
      5.16796875
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_odd(arr))\n\n\nif __name__ == '__main__':\n    main()",
      5.0703125
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 == 1, arr))\n\n\nprint(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      4.93359375
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\nif __name__ == \"__main__\":\n    print(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      4.69921875
    ],
    [
      "def filter_odd_num(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\ndef main():\n    print(filter_odd_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\nif __name__ == '__main__':\n    main()",
      4.57421875
    ],
    [
      "def filter_odd(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_odd(nums))",
      4.5625
    ],
    [
      "\"\"\"Question:\nWrite a function to filter odd numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\"",
      4.52734375
    ],
    [
      "def filter_odd_numbers(seq):\n    return filter(lambda x: x%2 != 0, seq)\n\nif __name__ == '__main__':\n    print(list(filter_odd_numbers([1,2,3,4,5,6,7])))",
      4.09375
    ],
    [
      "def filter_odd(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n\ndef main():\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_odd(list_of_numbers))\n\n\nif __name__ == '__main__':\n    main()",
      3.9609375
    ],
    [
      "def filter_odd(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_odd(nums))",
      3.810546875
    ],
    [
      "def filter_odd_num(nums):\n    return list(filter(lambda x: x % 2 == 1, nums))\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_odd_num(numbers))",
      3.71875
    ],
    [
      "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# 1. Using filter()\nodd_numbers = list(filter(lambda x: x % 2 != 0, numbers))\nprint(\"Odd Numbers using filter() : \")\nprint(odd_numbers)\n\n# 2. Using list comprehension\nodd_numbers = [x for x in numbers if x % 2 != 0]\nprint(\"Odd Numbers using list comprehension : \")\nprint(odd_numbers)\n\n# 3. Using map()\nodd_numbers = list(map(lambda x: x if x % 2 != 0 else None, numbers))\nprint(\"Odd Numbers using map() : \")\nprint(odd_numbers)",
      3.71484375
    ],
    [
      "def filter_odd(lst):\n    return list(filter(lambda x: x % 2 != 0, lst))\n\n\nif __name__ == \"__main__\":\n    print(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      3.681640625
    ],
    [
      "def filter_odd(nums):\n    return list(filter(lambda x: x%2==1, nums))\n\n\ndef main():\n    print(filter_odd([1,2,3,4,5,6,7,8,9]))\n\n\nif __name__ == '__main__':\n    main()",
      3.60546875
    ],
    [
      "def filter_odd(nums):\n    \"\"\"Returns the list of odd numbers.\"\"\"\n    return list(filter(lambda x: x % 2 != 0, nums))\n\nif __name__ == '__main__':\n    print(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      3.572265625
    ],
    [
      "def filter_odd(li):\n    return list(filter(lambda x: x%2!=0, li))\n\nif __name__ == '__main__':\n    print(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      3.544921875
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 == 1, arr))\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(filter_odd([1, 2, 3, 4, 5]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert filter_odd([1, 2, 3, 4, 5]) == [1, 3, 5]\n    assert filter_odd([11, 12, 13, 14, 15]) == [11, 13, 15]\n    assert filter_odd([0, 2, 4, 6]) == [2, 4, 6]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      3.39453125
    ],
    [
      "def filter_odd(arr):\n    return filter(lambda x: x%2!=0, arr)\n\nif __name__ == '__main__':\n    arr = list(map(int, input(\"Enter numbers: \").split()))\n    print(list(filter_odd(arr)))",
      3.296875
    ],
    [
      "def filter_odd(lst):\n    return list(filter(lambda x: x%2 != 0, lst))\n\n# Using filter() + lambda\n\ndef filter_odd_lambda(lst):\n    return list(filter(lambda x: x%2 != 0, lst))\n\ndef main():\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_odd_lambda(list_))\n\n\nif __name__ == '__main__':\n    main()",
      3.2109375
    ],
    [
      "def filter_odd(nums):\n    # Your code goes here\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(\"Original list:\")\n    print(nums)\n    print(\"Filtered list:\")\n    print(filter_odd(nums))\n\n\nif __name__ == '__main__':\n    main()",
      2.896484375
    ],
    [
      "def odd_num_filter(nums):\n    return list(filter(lambda num: num % 2 != 0, nums))\n\n\nif __name__ == \"__main__\":\n    print(odd_num_filter([1,2,3,4,5,6,7,8,9,10]))",
      2.82421875
    ],
    [
      "def filter_odd(list_of_num):\n    return list(filter(lambda x: x % 2 != 0, list_of_num))\n\n\ndef main():\n    list_of_num = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_odd(list_of_num))\n\n\nif __name__ == '__main__':\n    main()",
      2.75390625
    ],
    [
      "def filter_odd(input_list):\n    return list(filter(lambda x: x%2!=0, input_list))\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_odd(list_1))\n\nif __name__ == \"__main__\":\n    main()",
      2.73828125
    ],
    [
      "def filter_odd_nums(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\ndef main():\n    print(filter_odd_nums([1, 2, 3, 4, 5, 6, 7]))\n\nif __name__ == \"__main__\":\n    main()",
      2.64453125
    ],
    [
      "from functools import reduce\n\n\ndef lambda_filter(lst, lm):\n    return reduce(lambda x, y: x+[y] if lm(y) else x, lst, [])\n\n\ndef main():\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    lambda_filter(list_, lambda x: x % 2 != 0)\n\n\nif __name__ == \"__main__\":\n    main()",
      2.50390625
    ],
    [
      "# Solution\ndef filter_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\n\n# Test\nprint(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      2.376953125
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x%2!=0, arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(filter_odd(arr))",
      2.26953125
    ],
    [
      "def filter_odd(number):\n    return number % 2 == 0\n\nprint(list(filter(lambda number: number % 2 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))\n\n\"\"\"\nWrite a function to filter even numbers using lambda function.\n\"\"\"\n\nprint(list(filter(lambda number: number % 2 == 1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))\n\n\"\"\"\nWrite a function to filter numbers less than 5 using lambda function.\n\"\"\"\n\nprint(list(filter(lambda number: number < 5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))\n\n\"\"\"\nWrite a function to filter numbers greater than 5 using lambda function.\n\"\"\"\n\nprint(list(filter(lambda number: number > 5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))\n\n\"\"\"\nWrite a function to filter numbers between 3 and 7 using lambda function.\n\"\"\"\n\nprint(list(filter(lambda number: 3 <= number <= 7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))\n\n\"\"\"\nWrite a function to filter numbers not between 3 and 7 using lambda function.\n\"\"\"\n\nprint(list(filter(lambda number: not(3 <= number <= 7), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))\n\n\"\"\"\nWrite a function to filter vowels from string using lambda function.\n\"\"\"\n\nprint(list(filter(lambda letter: letter in 'aeiou', 'Python')))\n\n\"\"\"\nWrite a function to filter consonants from string using lambda function.\n\"\"\"\n\nprint(list(filter(lambda letter: letter not in '",
      2.166015625
    ],
    [
      "def filter_odd_numbers(list):\n    return list(filter(lambda x: x % 2 == 1, list))\n\n\nif __name__ == \"__main__\":\n    print(\"List of odd numbers are:\", filter_odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      2.15234375
    ],
    [
      "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef odd_filter(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\nprint(odd_filter(numbers))",
      2.033203125
    ],
    [
      "def odd_filter(lst):\n    return list(filter(lambda x: x % 2 != 0, lst))\n\n\ndef test(condition):\n    if condition():\n        print('OK')\n    else:\n        print('FAILED')\n\n\ndef main():\n    test(lambda: odd_filter([1, 2, 3, 4, 5]) == [1, 3, 5])\n    test(lambda: odd_filter([1, 2, 3]) == [1, 3])\n    test(lambda: odd_filter([2, 4, 6]) == [])\n\n\nif __name__ == '__main__':\n    main()",
      1.853515625
    ],
    [
      "# Solution\n\ndef odd_lambda(a):\n    return list(filter(lambda x: x % 2 != 0, a))\n\n# Test\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(\"Original list: \" + str(a))\nprint(\"Even numbers: \" + str(odd_lambda(a)))",
      1.6328125
    ],
    [
      "def odd_numbers(arr):\n    return list(filter(lambda x: x%2!=0, arr))\n\n\nif __name__ == '__main__':\n    print(\"Enter the list of numbers: \")\n    arr = [int(x) for x in input().split()]\n    print(\"List of odd numbers: \")\n    print(odd_numbers(arr))",
      1.5341796875
    ],
    [
      "\"\"\"Question:\nWrite a function to filter odd numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\"\ndef odd(n):\n\treturn n%2!=0\nprint filter(lambda x:x%2!=0, range(1,11))",
      1.3359375
    ],
    [
      "def odd(n):\n    return n % 2 != 0\n\ndef main():\n    lst = list(range(10))\n    print(list(filter(lambda n: n % 2 != 0, lst)))\n\nif __name__ == \"__main__\":\n    main()",
      1.0673828125
    ],
    [
      "# Solution\ndef odd_num_filter(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\n# Test\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(odd_num_filter(nums))",
      0.8720703125
    ],
    [
      "def odd_numbers(n):\n    return lambda x: x % n != 0\n\n\nif __name__ == '__main__':\n    print(list(filter(odd_numbers(3), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))",
      0.84619140625
    ],
    [
      "def odd_num(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\ndef main():\n    n = int(input(\"Enter number of elements: \"))\n    nums = []\n    print(\"Enter elements: \")\n\n    for i in range(n):\n        nums.append(int(input()))\n\n    print(\"Odd numbers: \")\n    print(odd_num(nums))\n\nif __name__ == \"__main__\":\n    main()",
      0.8291015625
    ],
    [
      "\"\"\"Question:\nWrite a function to filter odd numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\"",
      0.8125
    ],
    [
      "def odd_numbers(nums):\n    return list(filter(lambda num: num%2!=0, nums))\n\ndef test(nums):\n    assert(odd_numbers(nums) == [1, 3, 5, 7, 9])\n\ndef main():\n    test([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    print(\"Simple tests pass.\")\n\nif __name__ == '__main__':\n    main()",
      0.72265625
    ],
    [
      "def filter_odd(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\nif __name__ == \"__main__\":\n    print(\"Enter a list of numbers: \", end=\"\")\n    nums = list(map(int, input().split()))\n    print(\"Original list:\", nums)\n    print(\"Filtered list:\", filter_odd(nums))",
      0.611328125
    ],
    [
      "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef is_even(x):\n    return x % 2 == 0\n\n\n# print(list(filter(is_even, numbers)))\n\n\nfiltered_nums = list(filter(lambda x: x % 2 == 0, numbers))\nprint(filtered_nums)",
      0.4384765625
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\n\ndef main():\n    print(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\nif __name__ == '__main__':\n    main()",
      0.437744140625
    ],
    [
      "def odd_filter(list_of_num):\n    return list(filter(lambda x: x % 2 != 0, list_of_num))\n\n\nif __name__ == \"__main__\":\n    print(odd_filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      0.275390625
    ],
    [
      "\"\"\"Question:\nWrite a function to filter odd numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to define anonymous functions.\n\n\"\"\"\ndef odd(n):\n    return n % 2 != 0\nL = map(odd, range(1, 20))\nprint L",
      0.2025146484375
    ],
    [
      "\"\"\"Question:\nWrite a function to filter odd numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\"",
      0.1304931640625
    ],
    [
      "from functools import reduce\n\n\ndef filter_odd(lst: list) -> list:\n    return list(filter(lambda x: x % 2 == 1, lst))\n\n\ndef main():\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = filter_odd(list_)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      0.1259765625
    ],
    [
      "def filter_odd(list_of_nums):\n    return list(filter(lambda x: x%2 != 0, list_of_nums))\n\n\nprint(filter_odd([1,2,3,4,5,6,7,8,9,10]))",
      0.09906005859375
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\narr = [1,2,3,4,5,6,7,8,9,10]\nprint(filter_odd(arr))",
      -0.50634765625
    ],
    [
      "def lambda_filter(list):\n    return list(filter(lambda x: (x % 2 != 0), list))\n\n\nprint(lambda_filter([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.50732421875
    ],
    [
      "from functools import reduce\n\n\ndef main():\n    # Using map\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    odd_nums = list(map(lambda x: x * 2, nums))\n    print(odd_nums)\n\n    # Using filter\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    odd_nums = list(filter(lambda x: x % 2 == 1, nums))\n    print(odd_nums)\n\n    # Using reduce\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    odd_nums = reduce(lambda x, y: x + y, nums)\n    print(odd_nums)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.646484375
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 == 1, arr))\n\nif __name__ == '__main__':\n    print(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.85693359375
    ],
    [
      "def filter_odd_numbers(lst):\n    return list(filter(lambda x: x%2!=0, lst))\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_odd_numbers(lst))",
      -0.85693359375
    ],
    [
      "def filter_odd(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\nprint(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.85693359375
    ],
    [
      "def filter_odd(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n\n\nprint(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.85693359375
    ],
    [
      "def filter_odd(lst):\n    return list(filter(lambda x: x%2!=0, lst))\n\nprint(filter_odd([1,2,3,4,5,6,7,8,9]))",
      -0.857421875
    ],
    [
      "\"\"\"Question:\nWrite a function to filter odd numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to define anonymous functions.\n\n\"\"\"",
      -0.85791015625
    ],
    [
      "\"\"\"Question:\nWrite a function to filter odd numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to define anonymous functions.\n\n\"\"\"\ndef odd(n):\n    return n%2==0\nprint filter(lambda x: x%2==0, [1,2,3,4,5,6,7,8,9,10])",
      -0.85791015625
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 != 0, arr))\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_odd(arr))",
      -0.85791015625
    ],
    [
      "# Using Lambda Function\ndef filter_odd(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\ndef main():\n    print(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def lambda_filter(number):\n    return number % 2 == 0\n\nprint(list(filter(lambda_filter, range(1, 20))))",
      -0.85791015625
    ],
    [
      "def filter_odd(nums):\n    \"\"\"\n    >>> filter_odd([1, 2, 3, 4, 5])\n    [1, 3, 5]\n    \"\"\"\n    return list(filter(lambda x: x % 2 != 0, nums))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "# Solution\n\ndef odd_filter(nums):\n    return list(filter(lambda num: num % 2 != 0, nums))\n\n# Test\nodd_filter([1,2,3,4,5,6,7,8,9,10])",
      -0.85791015625
    ],
    [
      "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Using Lambda Function\nprint(list(filter(lambda x: x % 2 != 0, numbers)))\n\n# Using Lambda Function With Map\nprint(list(map(lambda x: x * 2, filter(lambda x: x % 2 != 0, numbers))))",
      -0.85791015625
    ],
    [
      "def odd_filter(list):\n    return list(filter(lambda x: x%2!=0, list))\n\nprint(odd_filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.8583984375
    ],
    [
      "\"\"\"Question:\nWrite a function to filter odd numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\"",
      -0.8583984375
    ],
    [
      "# Solution\ndef filter_odd(arr):\n    return list(filter(lambda x: x%2 == 1, arr))\n\n# Test\nfilter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
      -0.8583984375
    ],
    [
      "def odd_numbers(lst):\n    return list(filter(lambda x: x % 2 != 0, lst))\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(odd_numbers(lst))",
      -0.8583984375
    ],
    [
      "def filter_odd(arr):\n    return list(filter(lambda x: x % 2 == 1, arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(filter_odd(arr))",
      -0.8583984375
    ],
    [
      "def filter_odd(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n\n\nprint(filter_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.8583984375
    ],
    [
      "# Solution\ndef filter_odd(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\n# Tests\ndef test_function(test_case):\n    output = filter_odd(test_case[0])\n    for index, num in enumerate(output):\n        if num != test_case[1][index]:\n            print(f\"Fail with {test_case[0]}, expected {test_case[1]} but got {output}\")\n            return\n    print(f\"Pass with {test_case[0]}\")\n\n\ntest_function([[1, 2, 3, 4, 5], [1, 3, 5]])\ntest_function([[1, 2, 4, 6, 8], [1, 4, 6, 8]])\ntest_function([[1, 3, 5, 7], [1, 3, 5, 7]])\ntest_function([[1, 2, 4, 6], [1, 2, 4, 6]])\ntest_function([[], []])\ntest_function([[2, 4, 6], []])\ntest_function([[1, 2], []])",
      -2.712890625
    ],
    [
      "\"\"\"Question:\nWrite a function to filter odd numbers using lambda function.\nHints:\nUse lambda to create anonymous functions.\nUse filter() to filter values from a list.\n\n\"\"\"\ndef odd(x):\n    return x % 2 != 0\nl1 = [1,2,3,4,5,6,7,8,9,10]\nl2 = filter(odd, l1)\nprint l2",
      -3.375
    ],
    [
      "from functools import reduce\n\n\ndef odd_filter(data):\n    return list(filter(lambda x: x % 2 != 0, data))\n\n\ndef main():\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = reduce(lambda x, y: x + y, map(lambda x: x * 2, data))\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.64453125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}