{
  "problem": {
    "task_id": "MBPP/318",
    "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
    "test_list": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ],
    "challenge_test_list": [],
    "problem_id": 307
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def max_cuboid(a, b, c):\n    return (a * b * c) // max(a, b, c)\n\n\nif __name__ == \"__main__\":\n    print(max_cuboid(2, 2, 2))",
      1.5712890625
    ],
    [
      "def max_cuboid_volume(sides):\n    \"\"\"\n    :param: sides - list of integer values\n    return: int - maximum volume of a cuboid\n    TODO: complete this function and return the maximum volume\n    \"\"\"\n    # write your code here\n\n    # sort the list\n    sides.sort()\n\n    # get the length of the list\n    length = len(sides)\n\n    # initialize the max_volume\n    max_volume = 0\n\n    # iterate over the list\n    for i in range(length - 2):\n        for j in range(i + 1, length - 1):\n            for k in range(j + 1, length):\n                # get the volume\n                volume = sides[i] * sides[j] * sides[k]\n\n                # update the max_volume\n                max_volume = max(max_volume, volume)\n\n    return max_volume\n\n\nprint(max_cuboid_volume([2, 3, 3, 4]))\nprint(max_cuboid_volume([5, 5, 3, 3, 4]))\nprint(max_cuboid_volume([1, 2, 3, 4, 5]))",
      1.5234375
    ],
    [
      "def max_cuboid(a, b, c):\n    return (a*b*c)//3\n\n\nprint(max_cuboid(3, 2, 3))",
      1.4443359375
    ],
    [
      "def find_max_volume(s1, s2, s3):\n    s1, s2, s3 = sorted([s1, s2, s3])\n    return (s1 * s2 * s3) / 3\n\n\ndef main():\n    s1, s2, s3 = list(map(int, input(\"Enter three sides of a cuboid: \").split()))\n    print(find_max_volume(s1, s2, s3))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.4423828125
    ],
    [
      "def max_volume(a, b, c):\n    return a*b*c/(2*max(a, b, c))\n\n\ndef main():\n    a = int(input(\"Enter the first side: \"))\n    b = int(input(\"Enter the second side: \"))\n    c = int(input(\"Enter the third side: \"))\n    print(f\"The maximum volume is {max_volume(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      1.16015625
    ],
    [
      "def max_vol(a,b,c):\n    return (a*b*c)/max(a,b,c)\n\n\ndef main():\n    a,b,c = map(int,input().split())\n    print(max_vol(a,b,c))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.1591796875
    ],
    [
      "def max_vol(a, b, c):\n    return ((a * b * c) // max(max(a, b), c))\n\n\na, b, c = [int(x) for x in input().split()]\nprint(max_vol(a, b, c))",
      0.90966796875
    ],
    [
      "def max_cuboid(a, b, c):\n    return (a*b*c)//max(a, b, c)\n\n\na, b, c = list(map(int, input(\"Enter three sides of a cuboid: \").split()))\nprint(max_cuboid(a, b, c))",
      0.80859375
    ],
    [
      "def max_volume(a, b, c):\n    return ((a * b) * (a + b + c) // 3)\n\n\ndef main():\n    print(max_volume(3, 4, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.484619140625
    ],
    [
      "def max_volume(a, b, c):\n    return (a * b) * (a * b) / c\n\n\ndef max_vol(a, b, c):\n    return (a * b) * (a * b) / c\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the value of first side: \"))\n    b = int(input(\"Enter the value of second side: \"))\n    c = int(input(\"Enter the value of third side: \"))\n    print(max_volume(a, b, c))",
      0.2763671875
    ],
    [
      "def max_cuboid_volume(a, b, c):\n    return (a * b * c) // max(a, b, c)\n\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(max_cuboid_volume(a, b, c))",
      0.2403564453125
    ],
    [
      "def max_volume(a, b, c):\n    return a * b * min(a, b, c)\n\n\ndef main():\n    print(max_volume(4, 5, 1))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.1907958984375
    ],
    [
      "def find_max_vol(a, b, c):\n    return a*b*c\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(find_max_vol(a, b, c))",
      0.18994140625
    ],
    [
      "def max_cuboid(a, b, c):\n    return a * b * c / max(a, b, c)\n\n\ndef max_cuboid_by_sum(a, b, c):\n    return max(a, b, c) * max(a, b, c) * a\n\n\nif __name__ == '__main__':\n    print(max_cuboid(2, 2, 2))\n    print(max_cuboid_by_sum(2, 2, 2))",
      0.09716796875
    ],
    [
      "def max_volume(s1, s2, s3):\n    return (s1 * s2 * s3) / max(s1, s2, s3)\n\n\ndef main():\n    s1, s2, s3 = list(map(int, input(\"Enter three sides of a cuboid: \").split()))\n    print(f\"Maximum volume of a cuboid with sides {s1}, {s2} and {s3} is {max_volume(s1, s2, s3)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      0.07855224609375
    ],
    [
      "from math import sqrt\n\n\ndef max_volume(s1, s2, s3):\n    if s1 <= 0 or s2 <= 0 or s3 <= 0:\n        return 0\n\n    s = sorted([s1, s2, s3])\n\n    return (s[0] * s[1] * s[2])\n\n\ndef max_volume2(s1, s2, s3):\n    if s1 <= 0 or s2 <= 0 or s3 <= 0:\n        return 0\n\n    s = sorted([s1, s2, s3])\n\n    return (s[0] * s[1] * s[2])\n\n\ndef max_volume3(s1, s2, s3):\n    if s1 <= 0 or s2 <= 0 or s3 <= 0:\n        return 0\n\n    s = sorted([s1, s2, s3])\n\n    return (s[0] * s[1] * s[2])\n\n\ndef max_volume4(s1, s2, s3):\n    if s1 <= 0 or s2 <= 0 or s3 <= 0:\n        return 0\n\n    s = sorted([s1, s2, s3])\n\n    return (s[0] * s[1] * s[2])\n\n\ndef max_volume5(s1, s2, s3):\n    if s1 <= 0 or s2 <= 0 or s3 <= 0:\n        return 0\n\n    s = sorted([s1, s2, s3])\n\n    return (s[0] * s[1] * s[2])\n\n\ndef max_volume6(s1, s2, s3):\n    if s1 <= 0 or s2 <= 0 or s3 <= 0:\n        return 0\n\n    s = sorted([s1, s2, s3])\n\n    return (s[0] * s[1] * s[2])\n\n\ndef max_volume7(s1, s2, s3):\n    if s1 <= 0 or s2 <= 0 or s",
      -0.11676025390625
    ],
    [
      "def max_cuboid(sides):\n    sides = sorted(sides)\n    length = sides[-1]\n    width = sides[-2]\n    height = sides[-3]\n    return length * width * height\n\n\ndef main():\n    print(max_cuboid([2, 4, 5, 6]))\n    print(max_cuboid([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.302734375
    ],
    [
      "def max_cuboid_volume(s1, s2, s3):\n    return (1/2) * (s1 * s2 + s2 * s3 + s3 * s1)\n\n\nprint(max_cuboid_volume(2, 2, 2))",
      -0.55126953125
    ],
    [
      "def max_cuboid_volume(sum_of_sides):\n    \"\"\"\n    This function takes the sum of sides as an input and returns the maximum volume of a cuboid with that sum of sides.\n\n    >>> max_cuboid_volume(10)\n    1\n    >>> max_cuboid_volume(11)\n    2\n    >>> max_cuboid_volume(15)\n    3\n    >>> max_cuboid_volume(16)\n    4\n    >>> max_cuboid_volume(20)\n    5\n    >>> max_cuboid_volume(21)\n    6\n    >>> max_cuboid_volume(25)\n    7\n    >>> max_cuboid_volume(26)\n    8\n    >>> max_cuboid_volume(30)\n    9\n    >>> max_cuboid_volume(31)\n    10\n    >>> max_cuboid_volume(35)\n    11\n    >>> max_cuboid_volume(36)\n    12\n    >>> max_cuboid_volume(40)\n    13\n    >>> max_cuboid_volume(41)\n    14\n    >>> max_cuboid_volume(45)\n    15\n    >>> max_cuboid_volume(46)\n    16\n    >>> max_cuboid_volume(50)\n    17\n    >>> max_cuboid_volume(51)\n    18\n    >>> max_cuboid_volume(55)\n    19\n    >>> max_cuboid_volume(56)\n    20\n    >>> max_cuboid_volume(60)\n    21\n    >>> max_cuboid_volume(61)\n    22\n    >>> max_cuboid_volume(65)\n    23\n    >>> max_cuboid_volume(66)\n    24\n    >>> max_cuboid_volume(70)\n    25\n    >>> max_cuboid_volume(71)\n    26\n    >>> max",
      -0.57763671875
    ],
    [
      "def max_volume(x, y, z):\n    return x * y * (z - min(x, y, z)) / 3\n\n\ndef main():\n    x, y, z = list(map(int, input(\"Enter three sides: \").split()))\n    print(max_volume(x, y, z))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.65185546875
    ],
    [
      "def max_volume(a, b, c):\n    return (a * b * c) // max(a, b, c)\n\n\ndef main():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    print(f\"Maximum volume is {max_volume(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def max_cuboid_volume(a, b, c):\n    return (a * b * c) // max(a, b, c)\n\n\ndef main():\n    a = int(input(\"Enter first side : \"))\n    b = int(input(\"Enter second side : \"))\n    c = int(input(\"Enter third side : \"))\n\n    print(f\"Maximum volume of cuboid is {max_cuboid_volume(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def max_volume(a, b, c):\n    \"\"\"\n    >>> max_volume(2, 2, 2)\n    8\n    >>> max_volume(1, 2, 3)\n    6\n    \"\"\"\n    return (a * b * c) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def maximum_cuboid_volume(a, b, c):\n    return a * b * c // max(a, b, c)\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(maximum_cuboid_volume(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "# Solution\ndef find_max_cuboid_volume(sides):\n    if len(sides) != 3:\n        return -1\n    sides.sort()\n    return sides[0] * sides[1] * sides[2]\n\n\n# Test cases\nprint(find_max_cuboid_volume([1, 2, 3]))\nprint(find_max_cuboid_volume([1, 2, 1]))\nprint(find_max_cuboid_volume([3, 2, 1]))\nprint(find_max_cuboid_volume([1, 3, 2]))\nprint(find_max_cuboid_volume([1, 1, 1]))\nprint(find_max_cuboid_volume([1, 2]))\nprint(find_max_cuboid_volume([1, 3]))\nprint(find_max_cuboid_volume([2, 3]))\nprint(find_max_cuboid_volume([1, 3, 3, 4]))",
      -0.85693359375
    ],
    [
      "def find_max_volume(sides):\n    l = len(sides)\n    if l == 3:\n        return sides[0] * sides[1] * sides[2]\n    else:\n        return max(find_max_volume([sides[0], sides[1], sides[2]]),\n                   find_max_volume([sides[0], sides[2], sides[3]]),\n                   find_max_volume([sides[1], sides[2], sides[3]]))\n\n\nif __name__ == \"__main__\":\n    sides = [3, 2, 5, 4, 1]\n    print(find_max_volume(sides))",
      -0.85693359375
    ],
    [
      "def find_max_vol(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\n\nif __name__ == \"__main__\":\n    print(find_max_vol(3, 2, 4))",
      -0.85693359375
    ],
    [
      "def max_volume(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter side 1 : \"))\n    b = int(input(\"Enter side 2 : \"))\n    c = int(input(\"Enter side 3 : \"))\n    print(f\"Max volume is {max_volume(a, b, c)}\")",
      -0.85693359375
    ],
    [
      "def max_volume(a, b, c):\n    return a * b * min(a, b, c)\n\n\na = int(input(\"Enter the side 1: \"))\nb = int(input(\"Enter the side 2: \"))\nc = int(input(\"Enter the side 3: \"))\n\nprint(\"The maximum volume is \", max_volume(a, b, c))",
      -0.85693359375
    ],
    [
      "def max_volume(a, b, c):\n    \"\"\"\n    >>> max_volume(6, 8, 9)\n    136\n    >>> max_volume(6, 8, 7)\n    128\n    >>> max_volume(6, 8, 6)\n    128\n    \"\"\"\n    return a * b * c // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def max_volume(a, b, c):\n    return a*b*c\n\n\ndef max_volume_sum(a, b, c):\n    return max(a, b, c) * max(a, b, c) * min(a, b, c)\n\n\nprint(max_volume_sum(5, 5, 5))",
      -0.85693359375
    ],
    [
      "def max_vol(n):\n    n.sort()\n    return n[0] * n[1] * n[2]\n\n\nprint(max_vol([2, 2, 2, 2]))",
      -0.85693359375
    ],
    [
      "def maximum_volume(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\n\nprint(maximum_volume(1, 2, 2))",
      -0.85693359375
    ],
    [
      "def max_cuboid_volume(a, b, c):\n    return (a * b) * c // 3\n\n\na, b, c = [int(x) for x in input(\"Enter the length, breadth and height of the cuboid : \").split()]\nprint(max_cuboid_volume(a, b, c))",
      -0.85791015625
    ],
    [
      "def max_volume(sides):\n    max_side = 0\n    for side in sides:\n        if side > max_side:\n            max_side = side\n    return (max_side ** 3) / 3\n\n\nprint(max_volume([1, 2, 3, 4, 5]))",
      -0.85791015625
    ],
    [
      "def max_vol(a, b, c):\n    return (a * b * c) // max((a, b, c))\n\n\ndef max_sum_vol(a, b, c):\n    return max_vol(a, b, c)\n\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    print(f\"Maximum volume of cuboid with sides {a}, {b} and {c} is {max_sum_vol(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def maximum_volume(sides: list[int]) -> int:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n\n    sides.sort()\n\n    return (sides[0] * sides[1] * sides[2])\n\n\nif __name__ == \"__main__\":\n    print(maximum_volume([5, 4, 3]))",
      -0.85888671875
    ],
    [
      "def max_vol(s1, s2, s3):\n    return (s1 * s2 * s3) / 3\n\n\nprint(max_vol(1, 2, 3))",
      -0.85888671875
    ],
    [
      "def max_vol(a, b, c):\n    return (a*b*c) / max(a, b, c)\n\n\na = int(input())\nb = int(input())\nc = int(input())\n\nprint(max_vol(a, b, c))",
      -0.85888671875
    ],
    [
      "def max_volume(a,b,c):\n    if a>b:\n        a,b = b,a\n    if a>c:\n        a,c = c,a\n    if b>c:\n        b,c = c,b\n    if a<=0 or b<=0 or c<=0:\n        return 0\n    return (a*b*c)\nprint(max_volume(5, 6, 7))\nprint(max_volume(1, 2, 3))\nprint(max_volume(5, 4, 1))\nprint(max_volume(1, 2, 3))",
      -0.85888671875
    ],
    [
      "def max_volume(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\n\ndef max_volume_2(a, b, c):\n    return (a * b * c) / (a + b + c)",
      -0.85888671875
    ],
    [
      "def max_volume(a, b, c):\n    return (a * b * c) // 3\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(max_volume(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.86083984375
    ],
    [
      "def max_vol(a, b, c):\n    return a * b * c / max(a, b, c)\n\n\ndef max_vol_sum(a, b, c):\n    return a + b + c - max(a, b, c)\n\n\ndef max_cuboid(a, b, c):\n    return a * b * c / max_vol_sum(a, b, c)\n\n\na, b, c = [int(x) for x in input().split()]\nprint(max_cuboid(a, b, c))",
      -0.86083984375
    ],
    [
      "def max_volume(a, b, c):\n    \"\"\"\n    >>> max_volume(2, 3, 4)\n    8\n    >>> max_volume(1, 2, 3)\n    4\n    >>> max_volume(1, 2, 4)\n    6\n    \"\"\"\n    return max(a * b, a * c, b * c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "def find_max_volume(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\ndef main():\n    a = int(input(\"Enter side a: \"))\n    b = int(input(\"Enter side b: \"))\n    c = int(input(\"Enter side c: \"))\n\n    print(f\"Maximum volume is {find_max_volume(a, b, c)}\")\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "# Solution\ndef max_volume(a, b, c):\n    return (a*b*c) // max(a, b, c)\n\n\n# Test cases\nprint(max_volume(3, 2, 2))\nprint(max_volume(2, 2, 3))\nprint(max_volume(2, 3, 2))",
      -0.86083984375
    ],
    [
      "def max_volume_of_cuboid(s1, s2, s3):\n    return (s1 * s2 * s3) / 3\n\n\ndef main():\n    s1, s2, s3 = [int(num) for num in input(\"Enter three numbers: \").split()]\n    print(max_volume_of_cuboid(s1, s2, s3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.287109375
    ],
    [
      "def max_volume(x, y, z):\n    return (x * y * z) // max(x, y, z)\n\n\ndef main():\n    x = int(input(\"Enter the length: \"))\n    y = int(input(\"Enter the breadth: \"))\n    z = int(input(\"Enter the height: \"))\n    print(f\"Maximum volume of cuboid is {max_volume(x, y, z)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.4296875
    ],
    [
      "def get_max_volume(a, b, c):\n    \"\"\"\n    >>> get_max_volume(2, 4, 6)\n    8\n    >>> get_max_volume(1, 2, 4)\n    4\n    >>> get_max_volume(1, 2, 5)\n    4\n    >>> get_max_volume(1, 2, 10)\n    8\n    \"\"\"\n    return (a * b * c) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.5546875
    ],
    [
      "def max_volume(a, b, c):\n    \"\"\"\n    >>> max_volume(4, 4, 4)\n    48\n    >>> max_volume(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Not possible to find the maximum volume\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Not possible to find the maximum volume\")\n    return max(a*b, b*c, a*c)",
      -2.048828125
    ],
    [
      "from itertools import combinations\n\n\ndef get_max_volume(sides):\n    \"\"\"Return maximum volume of cuboid with given sides.\n\n    >>> get_max_volume([2, 3, 4, 5, 6, 7])\n    45\n    \"\"\"\n    max_volume = 0\n    for a, b, c in combinations(sides, 3):\n        volume = a * b * c\n        if volume > max_volume:\n            max_volume = volume\n    return max_volume\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.419921875
    ],
    [
      "def max_cuboid(sides):\n    sides = sorted(sides, reverse=True)\n    a = sides[0]\n    b = sides[1]\n    c = sides[2]\n    return a*b*c\n\n\nprint(max_cuboid([1, 2, 3]))\nprint(max_cuboid([3, 2, 1]))\nprint(max_cuboid([3, 1, 2]))",
      -2.9296875
    ],
    [
      "def get_max_volume(a, b, c):\n    \"\"\"\n    >>> get_max_volume(1, 2, 3)\n    2\n    >>> get_max_volume(1, 2, 4)\n    2\n    >>> get_max_volume(1, 3, 3)\n    1\n    \"\"\"\n    return min(a, b, c) * min(a, b, c) * max(a, b, c)\n\n\ndef find_max_volume(a, b, c):\n    \"\"\"\n    >>> find_max_volume(1, 2, 3)\n    2\n    >>> find_max_volume(1, 2, 4)\n    2\n    >>> find_max_volume(1, 3, 3)\n    1\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return get_max_volume(a, b, c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.994140625
    ],
    [
      "def find_max_volume(length, breadth, height):\n    return length * breadth * height\n\n\ndef find_max_volume_with_sum(sides):\n    if len(sides) < 3:\n        return 0\n\n    sides.sort()\n    length = sides[-1]\n    breadth = sides[-2]\n    height = sides[-3]\n\n    return find_max_volume(length, breadth, height)\n\n\ndef main():\n    print(find_max_volume_with_sum([3, 4, 5, 2, 6]))\n    print(find_max_volume_with_sum([1, 2, 3]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.421875
    ],
    [
      "def get_volume(a, b, c):\n    return a * b * c\n\ndef get_max_cuboid_volume(a, b, c):\n    return max(get_volume(a, b, c), get_volume(b, c, a), get_volume(c, a, b))\n\nprint(get_max_cuboid_volume(1, 2, 3))\nprint(get_max_cuboid_volume(1, 2, 4))",
      -3.98046875
    ],
    [
      "def find_max_volume(s):\n    s.sort()\n    n = len(s)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return s[0] * s[1] * s[2]\n    else:\n        max_volume = 0\n        for i in range(n):\n            for j in range(i+1, n-1):\n                for k in range(j+1, n):\n                    max_volume = max(max_volume, s[i] * s[j] * s[k])\n        return max_volume\n\n\ndef main():\n    s = [3, 2, 1, 5, 4]\n    max_volume = find_max_volume(s)\n    print(max_volume)\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.08203125
    ],
    [
      "def max_cuboid(a, b, c):\n    return (a * b * c) // max(a, b, c)\n\n\na, b, c = [int(i) for i in input(\"Enter three sides of a cuboid: \").split()]\nprint(\"Maximum volume:\", max_cuboid(a, b, c))",
      -4.1015625
    ],
    [
      "def max_volume(a, b, c):\n    \"\"\"\n    >>> max_volume(3, 2, 2)\n    2\n    >>> max_volume(2, 2, 3)\n    2\n    >>> max_volume(2, 3, 2)\n    2\n    >>> max_volume(3, 2, 3)\n    2\n    >>> max_volume(3, 3, 2)\n    2\n    >>> max_volume(2, 3, 3)\n    2\n    \"\"\"\n    return (a * b * c) // max(a, b, c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -4.2734375
    ],
    [
      "from math import sqrt\n\n\ndef max_volume(a, b, c):\n    return a * b * c / max(sqrt(a ** 2 + b ** 2), sqrt(a ** 2 + c ** 2), sqrt(b ** 2 + c ** 2))\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(f\"Max volume is {max_volume(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.48046875
    ],
    [
      "def cuboid(a, b, c):\n    return a * b * c\n\n\ndef maximumVolume(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return 0\n    if a * b * c > cuboid(a, b, c):\n        return cuboid(a, b, c)\n    else:\n        return 0\n\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    print(maximumVolume(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.578125
    ],
    [
      "def max_cuboid(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\n\ndef max_cuboid_2(a, b, c):\n    return a * b * c / max(a, b, c)\n\n\ndef max_cuboid_3(a, b, c):\n    return max(a * b * c, a * max(b, c), max(b, c) * a)\n\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    print(f\"Maximum volume is {max_cuboid(a, b, c)}\")\n    print(f\"Maximum volume is {max_cuboid_2(a, b, c)}\")\n    print(f\"Maximum volume is {max_cuboid_3(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.58203125
    ],
    [
      "def max_cuboid(a, b, c):\n    return a * b * c\n\n\ndef max_cuboid_2(a, b, c):\n    return max(a * b, b * c, a * c)\n\n\ndef max_cuboid_3(a, b, c):\n    return max([a * b, b * c, a * c])\n\n\nprint(max_cuboid(1, 2, 3))\nprint(max_cuboid_2(1, 2, 3))\nprint(max_cuboid_3(1, 2, 3))",
      -4.7734375
    ],
    [
      "def max_cuboid(a, b, c):\n    \"\"\"\n    >>> max_cuboid(1, 2, 3)\n    3\n    >>> max_cuboid(2, 2, 3)\n    6\n    >>> max_cuboid(2, 2, 2)\n    8\n    \"\"\"\n    return a * b * c\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.81640625
    ],
    [
      "from math import sqrt\n\n\ndef max_cuboid(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\n\ndef max_cuboid_2(a, b, c):\n    return (a * b * c) / min(a, b, c)\n\n\ndef max_cuboid_3(a, b, c):\n    return (a * b * c) / (a + b + c)\n\n\ndef max_cuboid_4(a, b, c):\n    return sqrt(a * b * c)\n\n\nif __name__ == \"__main__\":\n    assert max_cuboid(3, 4, 5) == 108\n    assert max_cuboid_2(3, 4, 5) == 4\n    assert max_cuboid_3(3, 4, 5) == 12\n    assert max_cuboid_4(3, 4, 5) == 12",
      -4.9453125
    ],
    [
      "def get_max_volume(a, b, c):\n    \"\"\"\n    >>> get_max_volume(1, 2, 3)\n    2\n    >>> get_max_volume(1, 2, 4)\n    2\n    >>> get_max_volume(1, 3, 4)\n    1\n    \"\"\"\n    return a * b * min(a, b, c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.07421875
    ],
    [
      "def max_volume_finder(a, b, c):\n    \"\"\"\n    >>> max_volume_finder(1, 2, 3)\n    2\n    >>> max_volume_finder(2, 2, 3)\n    3\n    >>> max_volume_finder(2, 2, 4)\n    6\n    \"\"\"\n    if a <= b <= c:\n        return (a * b * c)\n    if a <= c <= b:\n        return (a * c * c)\n    if b <= a <= c:\n        return (b * b * c)\n    if b <= c <= a:\n        return (b * c * c)\n    if c <= a <= b:\n        return (c * c * a)\n    if c <= b <= a:\n        return (c * c * b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.25
    ],
    [
      "def get_max_volume(side_sum):\n    \"\"\"\n    :param: side_sum - integer representing the sum of the three sides of a cuboid\n    TODO: Write a function to find the maximum volume of a cuboid with a given sum of its three sides.\n    The function should return an integer representing the maximum volume.\n    If no such cuboid can be formed, it should return -1.\n    :return: integer representing the maximum volume\n    \"\"\"\n    # TODO: Write your code here\n    if side_sum < 4:\n        return -1\n    elif side_sum % 4 != 0:\n        return -1\n    else:\n        return (side_sum // 4) ** 3\n\n\ndef main():\n    print(\"Maximum volume: \" + str(get_max_volume(14)))  # 14\n    print(\"Maximum volume: \" + str(get_max_volume(15)))  # -1\n    print(\"Maximum volume: \" + str(get_max_volume(27)))  # 125\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.30859375
    ],
    [
      "def max_volume(s1, s2, s3):\n    \"\"\"\n    >>> max_volume(5, 6, 7)\n    125\n    >>> max_volume(1, 2, 3)\n    0\n    >>> max_volume(10, 20, 30)\n    5000\n    \"\"\"\n    if s1 + s2 < s3 or s1 + s3 < s2 or s2 + s3 < s1:\n        return 0\n    else:\n        return max(s1 * s2, s1 * s3, s2 * s3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.4296875
    ],
    [
      "def max_vol(a, b, c):\n    \"\"\"\n    >>> max_vol(2, 2, 2)\n    8\n    >>> max_vol(1, 2, 3)\n    6\n    \"\"\"\n    return (a * b * c) if (a <= b <= c) else (b * c * a) if (b <= a <= c) else (c * a * b)\n\n\ndef max_vol_eff(a, b, c):\n    \"\"\"\n    >>> max_vol_eff(2, 2, 2)\n    8\n    >>> max_vol_eff(1, 2, 3)\n    6\n    \"\"\"\n    if a <= b <= c:\n        return a * b * c\n    if b <= a <= c:\n        return a * b * c\n    if c <= a <= b:\n        return a * b * c\n\n\ndef max_vol_eff_eff(a, b, c):\n    \"\"\"\n    >>> max_vol_eff_eff(2, 2, 2)\n    8\n    >>> max_vol_eff_eff(1, 2, 3)\n    6\n    \"\"\"\n    if a <= b <= c:\n        return a * b * c\n    if a <= c <= b:\n        return a * c * c\n    if b <= a <= c:\n        return b * a * c\n    if b <= c <= a:\n        return b * c * a\n    if c <= a <= b:\n        return c * a * b\n    if c <= b <= a:\n        return c * b * a",
      -5.9921875
    ],
    [
      "from itertools import combinations\n\n\ndef max_cuboid(sides):\n    \"\"\"\n    >>> max_cuboid([1, 2, 3, 4])\n    (9, [1, 2, 3])\n    >>> max_cuboid([2, 2, 3, 4, 5])\n    (22, [2, 2, 3])\n    >>> max_cuboid([1, 2, 3, 4, 5, 6])\n    (24, [2, 2, 3])\n    >>> max_cuboid([1, 2, 3, 4, 5, 6, 7])\n    (24, [2, 2, 3])\n    \"\"\"\n    max_vol = 0\n    for a, b, c in combinations(sides, 3):\n        if a + b > c and a + c > b and b + c > a:\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n                max_sides = [a, b, c]\n    return max_vol, max_sides\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.0
    ],
    [
      "def maximum_volume(a, b, c):\n    \"\"\"\n    >>> maximum_volume(1, 2, 3)\n    1\n    >>> maximum_volume(2, 3, 4)\n    1\n    >>> maximum_volume(3, 2, 1)\n    1\n    >>> maximum_volume(4, 3, 2)\n    1\n    >>> maximum_volume(5, 4, 3)\n    1\n    >>> maximum_volume(6, 5, 4)\n    1\n    >>> maximum_volume(7, 6, 5)\n    1\n    >>> maximum_volume(8, 7, 6)\n    1\n    \"\"\"\n    if a >= b >= c:\n        if a ** 3 >= b * c:\n            return 1\n        else:\n            return 0\n    elif b >= a >= c:\n        if b ** 3 >= a * c:\n            return 1\n        else:\n            return 0\n    elif c >= a >= b:\n        if c ** 3 >= a * b:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.26171875
    ],
    [
      "def max_vol(n, m, k):\n    l = 1\n    while n * l <= m:\n        h = m // n\n        if n * l * h <= k:\n            return n * l * h\n        if n * l * h >= k:\n            return k\n        l += 1\n    return -1\n\n\nn, m, k = map(int, input().split())\nprint(max_vol(n, m, k))",
      -6.3125
    ],
    [
      "def max_volume(a, b, c):\n    if a < b and b < c:\n        return a * b * c\n    elif a < b and c < b:\n        return a * b * c\n    elif b < a and a < c:\n        return a * b * c\n    elif b < a and c < a:\n        return a * b * c\n    elif c < a and a < b:\n        return a * b * c\n    elif c < a and b < a:\n        return a * b * c\n    else:\n        return 0\n\n\nprint(max_volume(5, 12, 13))",
      -6.4921875
    ],
    [
      "def max_cuboid(a, b, c):\n    return (a * b * c) / 3\n\n\ndef max_cuboid_with_sum(s):\n    a = int(s / 3)\n    b = int(s / 2)\n    c = s\n    return max_cuboid(a, b, c)\n\n\nprint(max_cuboid_with_sum(10))",
      -6.50390625
    ],
    [
      "def find_max_volume(a, b, c):\n    return (a * b * c) // 3\n\n\ndef max_volume(s):\n    return find_max_volume(s[0], s[1], s[2])\n\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    print(max_volume([a, b, c]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.80859375
    ],
    [
      "def cuboid_volume(a, b, c):\n    return a * b * c\n\n\ndef max_cuboid_volume(a, b, c):\n    return max(cuboid_volume(a, b, c), cuboid_volume(a, c, b), cuboid_volume(b, a, c))\n\n\ndef max_cuboid_sum(a, b, c):\n    return max(a + b + c, a + c + b, b + c + a)\n\n\ndef max_cuboid_volume_with_sum(a, b, c):\n    return max_cuboid_volume(*sorted(a, b, c, reverse=True))\n\n\nif __name__ == \"__main__\":\n    print(max_cuboid_volume_with_sum(4, 5, 6))",
      -6.83203125
    ],
    [
      "def max_volume(a, b, c):\n    return a * b * c\n\n\ndef max_cuboid_volume(s):\n    a, b, c = sorted(s)\n    return max_volume(a, b, c)\n\n\ndef main():\n    print(\"Maximum volume of cuboid with sum of sides equal to 20 is\")\n    print(max_cuboid_volume([1, 2, 20 - 1 - 2]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.92578125
    ],
    [
      "def max_volume(a, b, c, x, y, z):\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides\n\n    >>> max_volume(1, 2, 3, 1, 2, 3)\n    1.0\n    >>> max_volume(1, 2, 3, 2, 3, 4)\n    1.0\n    >>> max_volume(1, 2, 3, 3, 4, 5)\n    1.0\n    >>> max_volume(1, 2, 3, 4, 5, 6)\n    1.0\n    >>> max_volume(1, 2, 3, 4, 5, 7)\n    1.0\n    >>> max_volume(1, 2, 3, 5, 6, 7)\n    1.0\n    \"\"\"\n    return (a * b * c) / (x + y + z)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.3828125
    ],
    [
      "def cuboid(a, b, c):\n    return a * b * c\n\n\ndef max_volume(a, b, c):\n    return max(cuboid(a, b, c), cuboid(b, c, a), cuboid(c, a, b))\n\n\ndef max_volume_sum(a, b, c):\n    return max(max_volume(a, b, c), max_volume(a, c, b), max_volume(b, a, c))",
      -7.51171875
    ],
    [
      "def max_volume(a, b, c):\n    return a * b * c / max(a, b, c)\n\n\ndef max_volume_gcd(a, b, c):\n    return a * b * c / gcd(a, max(b, c))\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    print(f\"The volume of the cuboid with sides {a}, {b}, {c} is {max_volume(a, b, c)}\")\n    print(f\"The volume of the cuboid with sides {a}, {b}, {c} is {max_volume_gcd(a, b, c)}\")",
      -7.81640625
    ],
    [
      "from math import sqrt\n\n\ndef max_volume(sides):\n    \"\"\"\n    >>> max_volume([1, 2, 3])\n    2.0\n    >>> max_volume([1, 2, 3, 4])\n    3.0\n    \"\"\"\n    sides.sort()\n    return (sides[0] * sides[1] * sides[2]) / sqrt(\n        (sides[0] ** 2 + sides[1] ** 2 + sides[2] ** 2) / 2)\n\n\ndef main():\n    \"\"\"\n    >>> max_volume([1, 2, 3])\n    2.0\n    >>> max_volume([1, 2, 3, 4])\n    3.0\n    \"\"\"\n    sides = [int(x) for x in input(\"Enter the sides: \").split()]\n    print(f\"Max volume of cuboid with given sum of sides is {max_volume(sides)}\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()",
      -7.99609375
    ],
    [
      "def max_cuboid(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(f\"Maximum volume of cuboid: {max_cuboid(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -8.0703125
    ],
    [
      "from unittest import TestCase\n\n\ndef max_volume(a, b, c):\n    return min(a, b, c) * min(a, b, c) * max(a, b, c)\n\n\nclass TestMaxVolume(TestCase):\n\n    def test_max_volume(self):\n        assert max_volume(1, 2, 3) == 6\n        assert max_volume(1, 2, 4) == 8\n        assert max_volume(1, 2, 5) == 10\n        assert max_volume(1, 2, 6) == 12\n        assert max_volume(1, 2, 7) == 14\n        assert max_volume(1, 2, 8) == 16",
      -8.328125
    ],
    [
      "def max_volume(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\n\na, b, c = [int(i) for i in input(\"Enter three sides of a cuboid: \").split()]\nprint(f\"Maximum volume of a cuboid with given sides: {max_volume(a, b, c)}\")",
      -8.6015625
    ],
    [
      "def max_vol(s1: int, s2: int, s3: int) -> int:\n    \"\"\"\n    Return maximum volume of cuboid\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    >>> max_vol(1, 2, 3)\n    2\n    \"\"\"\n    if s1 <= 0 or s2 <= 0 or s3 <= 0:\n        return 0\n    if s1 == s2 and s2 == s3:\n        return s1 * s2 * s3\n    if s1 > s2 and s1 > s3:\n        return s2 * s3\n    if s2 > s1 and s2 > s3:\n        return s1 * s3\n    if s3 > s1 and s3 > s2:\n        return s1 * s2\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    do",
      -9.0
    ],
    [
      "def get_max_volume(a, b, c):\n    return (a * b) * c\n\n\ndef get_max_volume_with_given_sum(a, b, c, s):\n    if a + b + c != s:\n        return \"Can't form a valid cuboid\"\n    return get_max_volume(a, b, c)\n\n\ndef main():\n    a = int(input(\"Enter side a: \"))\n    b = int(input(\"Enter side b: \"))\n    c = int(input(\"Enter side c: \"))\n    s = a + b + c\n    print(f\"Max volume is {get_max_volume_with_given_sum(a, b, c, s)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -9.6875
    ],
    [
      "def find_max_volume(a, b, c):\n    return ((a * b) * c) / 3\n\n\ndef max_volume(a, b, c):\n    if a > b and a > c:\n        return find_max_volume(a, b, c)\n    elif b > a and b > c:\n        return find_max_volume(b, a, c)\n    elif c > a and c > b:\n        return find_max_volume(c, a, b)\n\n\nif __name__ == \"__main__\":\n    a, b, c = [int(x) for x in input().split()]\n    print(max_volume(a, b, c))",
      -10.375
    ],
    [
      "from collections import defaultdict\n\n\ndef max_volume(sides: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not sides:\n        return 0\n\n    side_sums = defaultdict(int)\n    for side in sides:\n        side_sums[side] += 1\n\n    return max(side * side_sums[side] for side in side_sums)\n\n\nif __name__ == \"__main__\":\n    print(max_volume([5, 5, 5]))\n    print(max_volume([2, 4, 4, 2]))",
      -10.3984375
    ],
    [
      "def max_volume(a, b, c):\n    return a * b * c // max(a, b, c)\n\n\ndef find_max_volume(s):\n    s.sort()\n    return max_volume(s[0], s[1], s[2])\n\n\ndef main():\n    print(find_max_volume([1, 2, 3]))\n    print(find_max_volume([2, 3, 1]))\n    print(find_max_volume([1, 3, 2]))\n    print(find_max_volume([3, 2, 1]))\n    print(find_max_volume([1, 1, 1]))\n    print(find_max_volume([1, 2, 1]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -10.40625
    ],
    [
      "def max_vol(a, b, c):\n    return (a * b * c) // 2\n\n\ndef find_max(a, b, c):\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n\n    return max_vol(a, b, c)\n\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(find_max(a, b, c))",
      -10.71875
    ],
    [
      "from math import sqrt\n\n\ndef max_volume(a, b, c):\n    return a * b * c / max(a, b, c)\n\n\ndef find_max_volume(a, b, c):\n    a = a if a >= b and a >= c else max(a, c)\n    b = b if b >= a and b >= c else max(a, c)\n    c = c if c >= a and c >= b else max(a, b)\n    return max_volume(a, b, c)\n\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    print(f\"Maximum volume of a cuboid with given sides is {find_max_volume(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -11.140625
    ],
    [
      "def max_volume(a, b, c):\n    return a * b * c / max(a, b, c)\n\n\ndef max_volume_sum(a, b, c):\n    return max_volume(a, b, c) * 2\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(\"Maximum volume: \", max_volume(a, b, c))\n    print(\"Maximum volume sum: \", max_volume_sum(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()",
      -11.3046875
    ],
    [
      "def max_vol(a, b, c):\n    \"\"\"\n    >>> max_vol(1,2,3)\n    2\n    >>> max_vol(1,2,4)\n    3\n    >>> max_vol(1,3,4)\n    3\n    \"\"\"\n    return (a * b * c) // max(a, b, c)\n\n\ndef max_vol2(a, b, c):\n    \"\"\"\n    >>> max_vol2(1,2,3)\n    2\n    >>> max_vol2(1,2,4)\n    3\n    >>> max_vol2(1,3,4)\n    3\n    \"\"\"\n    return a * b * c // max(a + b, a + c, b + c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -11.4453125
    ],
    [
      "def cuboid_volume(a, b, c):\n    return a * b * c\n\n\ndef find_max_volume(a, b, c):\n    if a < b and a < c:\n        a, b = b, a\n    elif b < a and b < c:\n        b, a = a, b\n    elif c < a and c < b:\n        a, c = c, a\n    else:\n        pass\n    min_side = a\n    a, b = b, a\n    min_side_volume = cuboid_volume(a, b, c)\n    return min_side, min_side_volume\n\n\ndef find_max_cuboid_volume(a, b, c):\n    a, b = find_max_volume(a, b, c)\n    return cuboid_volume(a, b, c)\n\n\nprint(find_max_cuboid_volume(5, 6, 7))\nprint(find_max_cuboid_volume(5, 7, 6))\nprint(find_max_cuboid_volume(7, 5, 6))",
      -11.8984375
    ],
    [
      "def max_volume(a, b, c):\n    return (a * b * c) / max(a, b, c)\n\n\ndef max_volume_1(a, b, c):\n    return (a * b * c) / (a + b + c)\n\n\ndef main():\n    a = int(input(\"Enter the first side of the cuboid: \"))\n    b = int(input(\"Enter the second side of the cuboid: \"))\n    c = int(input(\"Enter the third side of the cuboid: \"))\n    print(f\"The max volume of the cuboid is {max_volume(a, b, c)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -11.9140625
    ],
    [
      "def max_vol(side_sum):\n    \"\"\"\n    Finds the maximum volume of a cuboid with given sum of sides.\n\n    >>> max_vol(24)\n    27\n    >>> max_vol(18)\n    27\n    >>> max_vol(15)\n    18\n    >>> max_vol(16)\n    21\n    >>> max_vol(13)\n    18\n    >>> max_vol(12)\n    15\n    >>> max_vol(11)\n    12\n    >>> max_vol(10)\n    9\n    >>> max_vol(9)\n    8\n    >>> max_vol(8)\n    6\n    >>> max_vol(7)\n    5\n    >>> max_vol(6)\n    4\n    >>> max_vol(5)\n    3\n    >>> max_vol(4)\n    2\n    >>> max_vol(3)\n    1\n    >>> max_vol(2)\n    0\n    >>> max_vol(1)\n    0\n    >>> max_vol(0)\n    0\n    \"\"\"\n    if side_sum < 3:\n        return 0\n    else:\n        return side_sum * side_sum * (side_sum - 1) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -12.109375
    ],
    [
      "from math import sqrt\n\n\ndef find_max_volume(a, b, c):\n    \"\"\"Returns the maximum volume of a cuboid with given sum of sides.\"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return \"Negative values not allowed.\"\n    elif a > b and a > c:\n        return (b * c) / 2\n    elif b > a and b > c:\n        return (a * c) / 2\n    elif c > a and c > b:\n        return (a * b) / 2\n    else:\n        return \"A and B cannot be equal.\"\n\n\ndef find_max_volume_using_sqrt(a, b, c):\n    \"\"\"Returns the maximum volume of a cuboid with given sum of sides.\"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return \"Negative values not allowed.\"\n    else:\n        return (sqrt(a * b * c) * 3) / 2\n\n\nprint(find_max_volume(4, 4, 4))\nprint(find_max_volume(2, 3, 4))\nprint(find_max_volume(2, 4, 3))\nprint(find_max_volume(3, 2, 4))\nprint(find_max_volume(3, 4, 2))\nprint(find_max_volume(4, 2, 3))\nprint(find_max_volume(4, 3, 2))\nprint(find_max_volume(2, 4, 2))\nprint(find_max_volume(3, 3, 3))\nprint(find_max_volume(4, 4, 4))",
      -14.703125
    ],
    [
      "def max_volume(a, b, c):\n    \"\"\"\n    >>> max_volume(1, 2, 3)\n    2\n    >>> max_volume(2, 3, 4)\n    8\n    \"\"\"\n    return (a * b * c) // 2 if (a + b + c) % 2 == 0 else 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -15.1328125
    ],
    [
      "# This is the function which will return the answer\ndef max_volume(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return 0\n    return (a * b * c)\n\n\n# This is the main program\nif __name__ == \"__main__\":\n    # taking input as sum of sides\n    a, b, c = list(map(int, input(\"Enter the sum of sides of cuboid: \").split()))\n    # finding the maximum volume of cuboid\n    ans = max_volume(a, b, c)\n    print(ans)\n\n\"\"\"\nTime Complexity: O(1)\nSpace Complexity: O(1)\n\nExample 1:\nInput:\nEnter the sum of sides of cuboid: 5 5 5\nOutput:\n15\n\nExample 2:\nInput:\nEnter the sum of sides of cuboid: 3 4 5\nOutput:\n0\n\"\"\"",
      -15.8671875
    ],
    [
      "def find_max_volume(a, b, c):\n    \"\"\"\n    >>> find_max_volume(2, 3, 5)\n    [2, 3, 5]\n    >>> find_max_volume(3, 4, 5)\n    [4, 3, 4]\n    >>> find_max_volume(3, 5, 4)\n    [4, 4, 3]\n    \"\"\"\n    arr = []\n    max_volume = -1\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            for k in range(j, b + 1):\n                if i + j + k == a + b + c:\n                    arr.append([i, j, k])\n                    max_volume = max(max_volume, i * j * k)\n\n    return arr, max_volume\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -16.203125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}