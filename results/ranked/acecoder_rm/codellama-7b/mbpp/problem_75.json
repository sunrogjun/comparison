{
  "problem": {
    "task_id": "MBPP/86",
    "prompt": "Write a function to find nth centered hexagonal number.",
    "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
    "test_list": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ],
    "challenge_test_list": [],
    "problem_id": 75
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def nth_centered_hexagon_number(n: int) -> int:\n    \"\"\"\n    n = 1, 2, 3, 4, 5, ...\n\n    nth_centered_hexagon_number(n) = 1 + 4 * (n - 1)\n    \"\"\"\n    return 1 + 4 * (n - 1)\n\n\nif __name__ == \"__main__\":\n    assert nth_centered_hexagon_number(1) == 1, nth_centered_hexagon_number(1)\n    assert nth_centered_hexagon_number(2) == 6, nth_centered_hexagon_number(2)\n    assert nth_centered_hexagon_number(3) == 15, nth_centered_hexagon_number(3)\n    assert nth_centered_hexagon_number(4) == 28, nth_centered_hexagon_number(4)\n    assert nth_centered_hexagon_number(5) == 45, nth_centered_hexagon_number(5)",
      9.6640625
    ],
    [
      "def find_nth_centered_hexagonal(n):\n    \"\"\"\n    :param n: position of centered hexagonal number\n    :return: nth centered hexagonal number\n    >>> find_nth_centered_hexagonal(1)\n    1\n    >>> find_nth_centered_hexagonal(6)\n    19\n    >>> find_nth_centered_hexagonal(15)\n    76\n    >>> find_nth_centered_hexagonal(20)\n    153\n    \"\"\"\n    if n < 1:\n        return -1\n    return (((3 * n**2 - n) // 2) + 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      6.3984375
    ],
    [
      "from typing import Tuple\n\n\ndef find_nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: the number of the hexagonal number to find\n    :return: the nth centered hexagonal number\n    >>> find_nth_centered_hexagonal_number(1)\n    1\n    >>> find_nth_centered_hexagonal_number(2)\n    7\n    >>> find_nth_centered_hexagonal_number(3)\n    16\n    >>> find_nth_centered_hexagonal_number(4)\n    25\n    >>> find_nth_centered_hexagonal_number(5)\n    34\n    >>> find_nth_centered_hexagonal_number(6)\n    43\n    >>> find_nth_centered_hexagonal_number(7)\n    52\n    >>> find_nth_centered_hexagonal_number(8)\n    61\n    >>> find_nth_centered_hexagonal_number(9)\n    70\n    >>> find_nth_centered_hexagonal_number(10)\n    79\n    >>> find_nth_centered_hexagonal_number(11)\n    88\n    >>> find_nth_centered_hexagonal_number(12)\n    97\n    >>> find_nth_centered_hexagonal_number(13)\n    106\n    >>> find_nth_centered_hexagonal_number(14)\n    115\n    >>> find_nth_centered_hexagonal_number(15)\n    124\n    >>> find_nth_centered_hexagonal_number(16)\n    133\n    >>> find_nth_centered_hexagonal_number(17)\n    142\n    >>> find_nth_centered_hexagonal_number(18)\n    151\n    >>> find_nth_centered_hexagonal_number(19)\n    160\n    >>> find_nth_centered_hexagonal_number(20",
      3.771484375
    ],
    [
      "def find_nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * ((2 * n) - 1)\n\n\nif __name__ == \"__main__\":\n    assert find_nth_centered_hexagonal_number(1) == 1\n    assert find_nth_centered_hexagonal_number(6) == 15\n    assert find_nth_centered_hexagonal_number(10) == 25",
      3.69921875
    ],
    [
      "def hex_num(n: int) -> int:\n    \"\"\"\n    Returns nth centered hexagonal number.\n    >>> hex_num(0)\n    1\n    >>> hex_num(1)\n    6\n    >>> hex_num(2)\n    15\n    >>> hex_num(3)\n    28\n    >>> hex_num(4)\n    45\n    >>> hex_num(5)\n    66\n    >>> hex_num(6)\n    87\n    \"\"\"\n    if n == 0:\n        return 1\n\n    return (3 * (2 * n ** 2 - n)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.189453125
    ],
    [
      "from math import sqrt\n\n\n# Nth centered hexagonal number = (3 * n^2 - n) / 2\ndef find_nth_centered_hexagonal_number(n):\n    return (3 * n * n - n) / 2\n\n\ndef test_find_nth_centered_hexagonal_number():\n    \"\"\"\n    >>> find_nth_centered_hexagonal_number(1)\n    1\n    >>> find_nth_centered_hexagonal_number(2)\n    4\n    >>> find_nth_centered_hexagonal_number(3)\n    6\n    >>> find_nth_centered_hexagonal_number(4)\n    10\n    >>> find_nth_centered_hexagonal_number(5)\n    13\n    >>> find_nth_centered_hexagonal_number(6)\n    15\n    >>> find_nth_centered_hexagonal_number(7)\n    18\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.2734375
    ],
    [
      "def centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return 4 * ((2 * n) - 1) + 1\n\n\ndef test_centered_hexagonal_number():\n    \"\"\"\n    Tests the centered_hexagonal_number(n) function.\n    \"\"\"\n    assert centered_hexagonal_number(0) == 0\n    assert centered_hexagonal_number(1) == 1\n    assert centered_hexagonal_number(2) == 6\n    assert centered_hexagonal_number(3) == 15\n    assert centered_hexagonal_number(4) == 28\n    assert centered_hexagonal_number(5) == 45\n    assert centered_hexagonal_number(6) == 66\n\n    if __name__ == \"__main__\":\n        test_centered_hexagonal_number()",
      1.685546875
    ],
    [
      "import math\n\n\ndef centered_hexagon(n):\n    \"\"\"\n    Return nth centered hexagon number.\n    \"\"\"\n    if n <= 0:\n        return None\n\n    return round(math.pow(3, n) / 2)\n\n\nif __name__ == \"__main__\":\n    print(centered_hexagon(1))\n    print(centered_hexagon(2))\n    print(centered_hexagon(3))\n    print(centered_hexagon(4))\n    print(centered_hexagon(5))\n    print(centered_hexagon(6))",
      1.478515625
    ],
    [
      "def centered_hexagonal(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n    :param n: integer\n    :return: integer\n    >>> centered_hexagonal(1)\n    1\n    >>> centered_hexagonal(2)\n    6\n    >>> centered_hexagonal(3)\n    15\n    >>> centered_hexagonal(4)\n    28\n    \"\"\"\n    return n * ((2 * n) - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.4501953125
    ],
    [
      "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    >>> centered_hexagonal_number(1)\n    1\n    >>> centered_hexagonal_number(2)\n    6\n    >>> centered_hexagonal_number(3)\n    15\n    >>> centered_hexagonal_number(4)\n    28\n    >>> centered_hexagonal_number(5)\n    41\n    >>> centered_hexagonal_number(6)\n    56\n    >>> centered_hexagonal_number(7)\n    70\n    >>> centered_hexagonal_number(8)\n    86\n    >>> centered_hexagonal_number(9)\n    103\n    >>> centered_hexagonal_number(10)\n    120\n    >>> centered_hexagonal_number(11)\n    136\n    >>> centered_hexagonal_number(12)\n    153\n    >>> centered_hexagonal_number(13)\n    171\n    >>> centered_hexagonal_number(14)\n    189\n    >>> centered_hexagonal_number(15)\n    207\n    >>> centered_hexagonal_number(16)\n    226\n    >>> centered_hexagonal_number(17)\n    245\n    >>> centered_hexagonal_number(18)\n    265\n    >>> centered_hexagonal_number(19)\n    286\n    >>> centered_hexagonal_number(20)\n    307\n    >>> centered_hexagonal_number(21)\n    329\n    >>> centered_hexagonal_number(22)\n    351\n    >>> centered_hexagonal_number(23)\n    374\n    >>> centered_hexagonal_number(24)\n    398\n    >>> centered_hexagonal_number(25)\n    423\n    >>> centered_hexagonal_number(26)\n    449\n    >>> centered_hexagonal_number(27)",
      1.4033203125
    ],
    [
      "def nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    It is the sum of the first n odd numbers.\n    The first centered hexagonal number is 1.\n\n    >>> nth_centered_hexagonal_number(1)\n    1\n    >>> nth_centered_hexagonal_number(2)\n    3\n    >>> nth_centered_hexagonal_number(3)\n    6\n    >>> nth_centered_hexagonal_number(4)\n    10\n    >>> nth_centered_hexagonal_number(5)\n    15\n    >>> nth_centered_hexagonal_number(6)\n    21\n    >>> nth_centered_hexagonal_number(7)\n    28\n    >>> nth_centered_hexagonal_number(8)\n    36\n    >>> nth_centered_hexagonal_number(9)\n    45\n    >>> nth_centered_hexagonal_number(10)\n    55\n    >>> nth_centered_hexagonal_number(11)\n    66\n    >>> nth_centered_hexagonal_number(12)\n    78\n    >>> nth_centered_hexagonal_number(13)\n    91\n    >>> nth_centered_hexagonal_number(14)\n    105\n    >>> nth_centered_hexagonal_number(15)\n    120\n    >>> nth_centered_hexagonal_number(16)\n    136\n    >>> nth_centered_hexagonal_number(17)\n    153\n    >>> nth_centered_hexagonal_number(18)\n    171\n    >>> nth_centered_hexagonal_number(19)\n    190\n    >>> nth_centered_hexagonal_number(20)\n    210\n    >>> nth_centered_hexagonal_number(21)\n    231",
      1.28515625
    ],
    [
      "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: position of the number\n    :return: nth centered hexagonal number\n\n    >>> centered_hexagonal_number(1)\n    1\n    >>> centered_hexagonal_number(6)\n    19\n    >>> centered_hexagonal_number(20)\n    153\n    >>> centered_hexagonal_number(0)\n    0\n    >>> centered_hexagonal_number(22)\n    273\n    >>> centered_hexagonal_number(23)\n    292\n    >>> centered_hexagonal_number(24)\n    331\n    >>> centered_hexagonal_number(25)\n    385\n    >>> centered_hexagonal_number(100)\n    6080\n    \"\"\"\n    if n == 0:\n        return 0\n\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.265625
    ],
    [
      "def centered_hexagonal(n: int):\n    \"\"\"\n    :param n: number of the hexagon\n    :return: nth centered hexagonal number\n    \"\"\"\n    return int(((3 * (n ** 2)) - (3 * n) + 1) / 2)\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    print(f\"Nth centered hexagonal number: {centered_hexagonal(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      1.130859375
    ],
    [
      "import math\n\n\ndef nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: Nth centered hexagonal number.\n    :return: The nth centered hexagonal number.\n    >>> nth_centered_hexagonal_number(1)\n    1\n    >>> nth_centered_hexagonal_number(6)\n    15\n    >>> nth_centered_hexagonal_number(20)\n    113\n    >>> nth_centered_hexagonal_number(30)\n    193\n    >>> nth_centered_hexagonal_number(40)\n    261\n    >>> nth_centered_hexagonal_number(50)\n    311\n    \"\"\"\n    return int(\n        (math.sqrt(8 * n - 7) + 1) / 4\n    )  # using the identity: 2n - 1 = 8n - 7\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.09375
    ],
    [
      "from math import sqrt\n\n\ndef nth_centered_hexagonal_number(n):\n    \"\"\"\n    :param n: int - number of the centered hexagonal number\n    :return: nth centered hexagonal number\n    \"\"\"\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == '__main__':\n    print(nth_centered_hexagonal_number(1))\n    print(nth_centered_hexagonal_number(6))\n    print(nth_centered_hexagonal_number(15))",
      0.8271484375
    ],
    [
      "def centered_hexagon_number(n: int) -> int:\n    \"\"\"\n    The nth centered hexagon number is given by\n    `n * (3 * n - 1) // 2`.\n\n    :param n: The number of the hexagon.\n    :return: The nth centered hexagon number.\n    \"\"\"\n    return n * (3 * n - 1) // 2\n\n\nif __name__ == \"__main__\":\n    assert centered_hexagon_number(1) == 1\n    assert centered_hexagon_number(2) == 6\n    assert centered_hexagon_number(3) == 15\n    assert centered_hexagon_number(4) == 28\n    assert centered_hexagon_number(5) == 45\n    assert centered_hexagon_number(6) == 66\n    assert centered_hexagon_number(7) == 81\n    assert centered_hexagon_number(8) == 98\n    assert centered_hexagon_number(9) == 115\n    assert centered_hexagon_number(10) == 136\n    assert centered_hexagon_number(11) == 159\n    assert centered_hexagon_number(12) == 182\n    assert centered_hexagon_number(13) == 207\n    assert centered_hexagon_number(14) == 234\n    assert centered_hexagon_number(15) == 262\n    assert centered_hexagon_number(16) == 291\n    assert centered_hexagon_number(17) == 320\n    assert centered_hexagon_number(18) == 351\n    assert centered_hexagon_number(19) == 383\n    assert centered_hexagon_number(20) == 416\n    assert centered_hexagon_number(21) == 451\n    assert centered_hexagon_number(22) == 490\n    assert centered_hexagon_number(23) == 527\n    assert centered_hexagon_number",
      0.2666015625
    ],
    [
      "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    It is the sum of n * (2n - 1)\n    :param n: the nth hexagonal number\n    :return: the nth centered hexagonal number\n\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(2)\n    6\n    >>> nth_hexagonal_number(3)\n    15\n    >>> nth_hexagonal_number(4)\n    28\n    >>> nth_hexagonal_number(5)\n    45\n    >>> nth_hexagonal_number(6)\n    66\n    >>> nth_hexagonal_number(7)\n    87\n    >>> nth_hexagonal_number(8)\n    110\n    >>> nth_hexagonal_number(9)\n    135\n    >>> nth_hexagonal_number(10)\n    162\n    >>> nth_hexagonal_number(11)\n    191\n    >>> nth_hexagonal_number(12)\n    226\n    >>> nth_hexagonal_number(13)\n    267\n    >>> nth_hexagonal_number(14)\n    310\n    >>> nth_hexagonal_number(15)\n    356\n    >>> nth_hexagonal_number(16)\n    406\n    >>> nth_hexagonal_number(17)\n    462\n    >>> nth_hexagonal_number(18)\n    522\n    >>> nth_hexagonal_number(19)\n    587\n    >>> nth_hexagonal_number(20)\n    656\n    >>> nth_hexagonal_number(21)\n    729\n    >>> nth_hexagonal_number(22)\n    808\n    >>> nth_hexagonal_number(23)\n    893\n    >>> nth",
      0.161376953125
    ],
    [
      "def nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    nth_hexagonal_number takes an integer n and returns the nth centered hexagonal number.\n    >>> nth_hexagonal_number(1)\n    1\n    >>> nth_hexagonal_number(6)\n    15\n    >>> nth_hexagonal_number(10)\n    60\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    n -= 1  # To account for 1-indexing\n    counter = 0\n    hex_num = 1\n\n    while counter < n:\n        hex_num += 4 * (hex_num - 1)\n        counter += 1\n\n    return hex_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.1463623046875
    ],
    [
      "def nth_centered_hexagonal(n: int) -> int:\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    n = n - 1\n    first = 1\n    second = 2\n    while n > 1:\n        first, second = second, 6 * first + second\n        n = n - 1\n\n    return second\n\n\nif __name__ == \"__main__\":\n    assert nth_centered_hexagonal(1) == 1\n    assert nth_centered_hexagonal(2) == 3\n    assert nth_centered_hexagonal(3) == 7\n    assert nth_centered_hexagonal(4) == 15\n    assert nth_centered_hexagonal(5) == 23\n    assert nth_centered_hexagonal(6) == 31\n    assert nth_centered_hexagonal(7) == 45\n    assert nth_centered_hexagonal(8) == 63\n    assert nth_centered_hexagonal(9) == 87",
      0.033599853515625
    ],
    [
      "class Solution:\n    def hexagonal(self, n):\n        return n * (2 * n - 1)\n\n    def find_nth_hexagonal_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return self.hexagonal(n / 2)\n        else:\n            return self.hexagonal((n - 1) / 2 + 1)\n\n\nif __name__ == \"__main__\":\n    n = 10\n    expected = 16\n    assert Solution().find_nth_hexagonal_number(n) == expected",
      0.0304107666015625
    ],
    [
      "from typing import List\n\n\ndef get_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    number_list: List[int] = [1, 3, 7, 13, 21, 34, 51, 77]\n    if n <= 7:\n        return number_list[n - 1]\n\n    index: int = 7\n    current_number: int = 77\n    while index < n:\n        current_number += 4 * (index - 6)\n        index += 1\n\n    return current_number\n\n\nif __name__ == \"__main__\":\n    assert get_centered_hexagonal_number(1) == 1\n    assert get_centered_hexagonal_number(7) == 77\n    assert get_centered_hexagonal_number(8) == 169",
      -0.007053375244140625
    ],
    [
      "def hexagonal(n: int) -> int:\n    \"\"\"\n    Return the nth centered hexagonal number.\n    >>> hexagonal(1)\n    1\n    >>> hexagonal(6)\n    15\n    >>> hexagonal(20)\n    93\n    >>> hexagonal(100)\n    34299\n    \"\"\"\n    return int(((3 * n * n - n) * 0.5) + 0.5)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.040985107421875
    ],
    [
      "def nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: number\n    :return: nth centered hexagonal number\n    >>> nth_centered_hexagonal_number(1)\n    1\n    >>> nth_centered_hexagonal_number(2)\n    4\n    >>> nth_centered_hexagonal_number(3)\n    7\n    >>> nth_centered_hexagonal_number(4)\n    12\n    >>> nth_centered_hexagonal_number(5)\n    15\n    >>> nth_centered_hexagonal_number(6)\n    19\n    >>> nth_centered_hexagonal_number(7)\n    22\n    >>> nth_centered_hexagonal_number(8)\n    27\n    >>> nth_centered_hexagonal_number(9)\n    30\n    >>> nth_centered_hexagonal_number(10)\n    33\n    >>> nth_centered_hexagonal_number(11)\n    36\n    >>> nth_centered_hexagonal_number(12)\n    39\n    >>> nth_centered_hexagonal_number(13)\n    42\n    >>> nth_centered_hexagonal_number(14)\n    45\n    >>> nth_centered_hexagonal_number(15)\n    48\n    >>> nth_centered_hexagonal_number(16)\n    51\n    >>> nth_centered_hexagonal_number(17)\n    54\n    >>> nth_centered_hexagonal_number(18)\n    57\n    >>> nth_centered_hexagonal_number(19)\n    60\n    >>> nth_centered_hexagonal_number(20)\n    63\n    >>> nth_centered_hexagonal_number(21)\n    66\n    >>> nth_centered_hexagonal_number(22)",
      -0.041900634765625
    ],
    [
      "import math\n\n\ndef find_centered_hexagonal(n):\n    \"\"\"\n    :param n: int - number of the centered hexagonal number to find\n    :return: int - nth centered hexagonal number\n    \"\"\"\n    # Your code here\n    if n < 0:\n        raise ValueError(\"n must be a positive number\")\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return (3 * math.pow(n, 2) - 3 * n + 2) // 2\n    return (3 * math.pow(n, 2) - n + 1) // 2\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = find_centered_hexagonal(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((1, 1))\ntest_function((2, 4))\ntest_function((3, 10))\ntest_function((4, 19))\ntest_function((5, 28))\ntest_function((6, 37))\ntest_function((10, 142))\ntest_function((20, 751))\ntest_function((50, 17726))\ntest_function((100, 35902))",
      -0.2236328125
    ],
    [
      "import math\n\n\ndef nth_hexagonal(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return int((math.sqrt(8 * n + 1) - 1) / 2)\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal(4))",
      -0.25537109375
    ],
    [
      "def hex_number(n):\n    \"\"\"\n    Find nth centered hexagonal number.\n    :param n:\n    :return:\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef test_hex_number():\n    \"\"\"\n    Tests the hex_number function.\n    :return:\n    \"\"\"\n    assert hex_number(1) == 1\n    assert hex_number(2) == 6\n    assert hex_number(3) == 15\n    assert hex_number(4) == 28\n    assert hex_number(5) == 45\n    assert hex_number(6) == 66\n    assert hex_number(7) == 91\n\n\nif __name__ == \"__main__\":\n    test_hex_number()",
      -0.61572265625
    ],
    [
      "def find_nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    The nth centered hexagonal number can be found by the following formula:\n        nth centered hexagonal number = (n ** 2) - n\n    >>> find_nth_hexagonal_number(2)\n    6\n    >>> find_nth_hexagonal_number(10)\n    153\n    >>> find_nth_hexagonal_number(1)\n    1\n    >>> find_nth_hexagonal_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: nth hexagonal number for n <= 0 is undefined\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"nth hexagonal number for n <= 0 is undefined\")\n    return (n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.65576171875
    ],
    [
      "def nth_centered_hexagonal_number(n):\n    \"\"\"\n    :param: - n - integer\n    :return: - nth centered hexagonal number\n    \"\"\"\n    if n < 1:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return 4 * (n // 2) ** 2 - 1\n\n    return 4 * (n // 2) ** 2\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = nth_centered_hexagonal_number(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((1, 1))\ntest_function((2, 2))\ntest_function((3, 4))\ntest_function((4, 10))\ntest_function((5, 22))\ntest_function((6, 42))\ntest_function((7, 64))",
      -0.72900390625
    ],
    [
      "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    The nth centered hexagonal number is 1 + 4n * (2n - 1)\n    \"\"\"\n    return 1 + 4 * n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    print(centered_hexagonal_number(1))\n    print(centered_hexagonal_number(2))\n    print(centered_hexagonal_number(3))\n    print(centered_hexagonal_number(4))",
      -0.85595703125
    ],
    [
      "from math import sqrt\n\n\ndef centered_hexagonal(n: int) -> int:\n    \"\"\"Returns nth centered hexagonal number.\n\n    >>> centered_hexagonal(1)\n    1\n    >>> centered_hexagonal(6)\n    15\n    >>> centered_hexagonal(10)\n    42\n    >>> centered_hexagonal(20)\n    133\n    \"\"\"\n    return (sqrt(8 * n - 3) + 1) // 4\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "def centered_hexagonal_number(n):\n    \"\"\"\n    :param n: int - number of the centered hexagonal number.\n    :return: int - nth centered hexagonal number.\n    \"\"\"\n    return int(((2*n - 1)**2 + 3*(2*n - 1)) / 6)\n\n\nif __name__ == '__main__':\n    print(centered_hexagonal_number(1))",
      -0.85693359375
    ],
    [
      "def centered_hexagonal(n):\n    \"\"\"\n    :param n: int - number of hexagon\n    :return: int - nth centered hexagonal number\n    \"\"\"\n    # your code here\n    n = n - 1\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == '__main__':\n    print(centered_hexagonal(1))\n    print(centered_hexagonal(6))\n    print(centered_hexagonal(15))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef nth_centered_hexagonal(n: int) -> int:\n    \"\"\"\n    Return nth centered hexagonal number.\n    >>> nth_centered_hexagonal(1)\n    1\n    >>> nth_centered_hexagonal(6)\n    15\n    >>> nth_centered_hexagonal(25)\n    153\n    \"\"\"\n    hexagon: List[int] = [1]\n\n    if n == 1:\n        return hexagon[0]\n\n    while len(hexagon) < n:\n        hexagon.append(hexagon[-1] + 4 * (len(hexagon) - 1))\n    return hexagon[n - 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "class Solution:\n    def hexagonal(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        n = n - 1\n        return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    # Use the main function here to test your implementation\n    sol = Solution()\n    print(sol.hexagonal(4))\n    print(sol.hexagonal(6))\n    print(sol.hexagonal(8))\n    print(sol.hexagonal(10))",
      -0.85693359375
    ],
    [
      "def hex_num(n):\n    return ((3 * n ** 2 - n) // 2) + 1\n\n\ndef main():\n    n = int(input(\"Enter the number: \"))\n    print(f\"{n}th centered hexagonal number is: {hex_num(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def nth_centered_hexagonal(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return (3 * n ** 2 - n) / 2\n\n\nif __name__ == \"__main__\":\n    assert nth_centered_hexagonal(1) == 1\n    assert nth_centered_hexagonal(6) == 15",
      -0.85693359375
    ],
    [
      "class Solution:\n    def centered_Hexagonal(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 6\n\n        count = 2\n        i = 4\n        while count < n:\n            i += 4\n            count += 1\n\n        return i\n\n\nif __name__ == \"__main__\":\n    n = 10\n    s = Solution()\n    print(s.centered_Hexagonal(n))",
      -0.85693359375
    ],
    [
      "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes n as argument and returns nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    return (3 * n**2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    print(centered_hexagonal_number(1))\n    print(centered_hexagonal_number(5))",
      -0.85693359375
    ],
    [
      "\"\"\"Question:\nWrite a function to find nth centered hexagonal number.\nHints:\nUse math.floor() to find floor function.\n\n\"\"\"\nimport math\ndef nth_centered_hexagonal_number(num):\n    return int(((2*num-1)*(2*num-1)-(2*num-5))/6)\n\t\nprint nth_centered_hexagonal_number(10)",
      -0.85791015625
    ],
    [
      "def nth_hexagonal(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    print(nth_hexagonal(1))\n    print(nth_hexagonal(6))\n    print(nth_hexagonal(15))",
      -0.85791015625
    ],
    [
      "from math import floor\n\n\ndef nth_centered_hexagonal_number(n):\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    print(nth_centered_hexagonal_number(1))\n    print(nth_centered_hexagonal_number(6))\n    print(nth_centered_hexagonal_number(15))",
      -0.85791015625
    ],
    [
      "def nth_hexagonal_number(n):\n    return n * (2 * n - 1)\n\n\ndef find_centered_hexagonal_number(n):\n    i = 1\n    while nth_hexagonal_number(i) < n:\n        i += 1\n    return nth_hexagonal_number(i)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(find_centered_hexagonal_number(i))",
      -0.85791015625
    ],
    [
      "def nth_centered_hexagonal_number(n):\n    return (3 * n**2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_centered_hexagonal_number(i))",
      -0.85791015625
    ],
    [
      "import math\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef nth_centered_hexagonal_number(n: int) -> int:\n    if n <= 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    n = n - 1\n    index = math.ceil((math.sqrt(8 * n + 1) - 1) / 3)\n    return (index - 1) * (3 * index - 1) // 2 + index",
      -0.85791015625
    ],
    [
      "import math\n\n\n# Returns nth centered hexagonal number\ndef nth_centered_hexagonal_number(n):\n    return round((math.sqrt(8 * n + 1) - 1) / 2)\n\n\nif __name__ == \"__main__\":\n    print(nth_centered_hexagonal_number(1))\n    print(nth_centered_hexagonal_number(6))\n    print(nth_centered_hexagonal_number(15))",
      -0.85791015625
    ],
    [
      "def nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    The nth centered hexagonal number is (n * (n * 2 - 1)) / 2.\n    \"\"\"\n    return n * (n * 2 - 1) // 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(f\"The {i}th centered hexagonal number is {nth_centered_hexagonal_number(i)}\")",
      -0.85791015625
    ],
    [
      "def find_nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    assert find_nth_centered_hexagonal_number(1) == 1\n    assert find_nth_centered_hexagonal_number(6) == 15",
      -0.85791015625
    ],
    [
      "from math import sqrt\n\n\ndef centered_hexagonal(n):\n    \"\"\"Return nth centered hexagonal number\"\"\"\n    return int(((sqrt(8 * n - 7) - 1) / 2) + 1)",
      -0.85791015625
    ],
    [
      "def centered_hexagon(n):\n    return ((3 * n - 1) ** 2 - 3 * (n - 1)) // 4\n\n\nif __name__ == \"__main__\":\n    print(centered_hexagon(10))",
      -0.85791015625
    ],
    [
      "def nth_hexagonal_number(n):\n    return (n * (2 * n - 1))\n\nprint(nth_hexagonal_number(1))\nprint(nth_hexagonal_number(6))\nprint(nth_hexagonal_number(15))",
      -0.85791015625
    ],
    [
      "def centered_hexagonal(n: int) -> int:\n    \"\"\"\n    :param n: nth centered hexagonal number to find.\n    :return: nth centered hexagonal number.\n    >>> centered_hexagonal(1)\n    1\n    >>> centered_hexagonal(2)\n    6\n    >>> centered_hexagonal(3)\n    15\n    >>> centered_hexagonal(4)\n    28\n    \"\"\"\n    return (3 * (n ** 2) - n) // 2\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef hex_number(n: int) -> int:\n    \"\"\"\n    The nth centered hexagonal number is given by a formula:\n    nth hex = (2*n2 - n - 1) * (3 ** 0.5) / 2\n    \"\"\"\n    return int((2 * n ** 2 - n - 1) * (3 ** 0.5) / 2)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(i, hex_number(i))",
      -0.8583984375
    ],
    [
      "def nth_centered_hexagonal_number(n):\n    return (3 * n * n - n) // 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_centered_hexagonal_number(i))",
      -0.8583984375
    ],
    [
      "from math import sqrt\n\n\ndef find_nth_centered_hexagonal_number(n):\n    return int(((2*n*n - 3)*sqrt(3))/6)\n\n\nif __name__ == \"__main__\":\n    print(find_nth_centered_hexagonal_number(1))\n    print(find_nth_centered_hexagonal_number(6))",
      -0.8583984375
    ],
    [
      "def centered_hexagonal(n):\n    \"\"\"\n    :param: - n - the index of the hexagonal number\n    Should return the nth centered hexagonal number\n    centered_hexagonal(1) --> 1\n    centered_hexagonal(2) --> 6\n    centered_hexagonal(3) --> 16\n    \"\"\"\n    # Write your code here.\n    if n == 1:\n        return 1\n\n    return 4 * ((n - 1) ** 2 - (n - 2) ** 2) + 1\n\n\nif __name__ == '__main__':\n    print(centered_hexagonal(1))\n    print(centered_hexagonal(2))\n    print(centered_hexagonal(3))",
      -0.8583984375
    ],
    [
      "def centered_hexagonal_number(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \n    :param n: int - an integer\n    :return: int - the nth centered hexagonal number\n    \"\"\"\n    return ((2*n)**2 - 1)//3\n\n\ndef main():\n    n = int(input(\"Enter an integer: \"))\n    result = centered_hexagonal_number(n)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def find_nth_centered_hexagonal_number(n):\n    \"\"\"\n    Find nth centered hexagonal number.\n\n    Args:\n        n: integer - nth position.\n\n    Returns:\n        integer - nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return -1\n\n    counter = 1\n    hexagonal_number = 1\n    while counter < n:\n        counter += 1\n        hexagonal_number += 4\n\n    return hexagonal_number",
      -0.8583984375
    ],
    [
      "def nth_centered_hexagonal(n):\n    \"\"\"\n    :param n: int - nth number of the centered hexagonal number\n    :return: int - nth centered hexagonal number\n    \"\"\"\n    # return ((4 * n**2 - 3 * n) * n) // 6\n    return ((4 * n**2 - 3 * n) * n) // 6\n\n\nif __name__ == '__main__':\n    print(nth_centered_hexagonal(1))",
      -0.8583984375
    ],
    [
      "def nth_centered_hexagonal_number(n):\n    \"\"\"\n    :param n: int - The number of the centered hexagonal number to return.\n    :return: int - the nth centered hexagonal number.\n    \"\"\"\n    # Centered hexagonal number is n * (2n - 1)\n    return n * (2 * n - 1)\n\n\nif __name__ == '__main__':\n    print(nth_centered_hexagonal_number(2))",
      -0.8583984375
    ],
    [
      "def find_nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return int(((2 * n - 1) * (2 * n - 1) - (n - 1)) / 12)\n\n\nif __name__ == \"__main__\":\n    print(find_nth_centered_hexagonal_number(4))",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    :param n: nth number\n    :return: nth centered hexagonal number\n    \"\"\"\n    n = n - 1\n    return int(((2 * n) ** 2 - 3 * n + 1) / 6)\n\n\nif __name__ == \"__main__\":\n    print(centered_hexagonal_number(1))\n    print(centered_hexagonal_number(2))\n    print(centered_hexagonal_number(3))\n    print(centered_hexagonal_number(100))",
      -0.8583984375
    ],
    [
      "def find_nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    This can be done in O(1).\n    \"\"\"\n    return (3 * n * n - n) // 2\n\n\nif __name__ == \"__main__\":\n    print(find_nth_centered_hexagonal_number(1))\n    print(find_nth_centered_hexagonal_number(6))\n    print(find_nth_centered_hexagonal_number(15))\n    print(find_nth_centered_hexagonal_number(28))",
      -0.8583984375
    ],
    [
      "import math\n\ndef nth_centered_hexagon(n):\n    return (n * ((2 * n) - 1)) ** 0.5\n\ndef nth_centered_hexagon_number(n):\n    return round(nth_centered_hexagon(n) + 0.5) ** 2\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(i, nth_centered_hexagon_number(i))",
      -0.8583984375
    ],
    [
      "def centered_hexagonal(n):\n    \"\"\"\n    >>> centered_hexagonal(1)\n    1\n    >>> centered_hexagonal(6)\n    19\n    >>> centered_hexagonal(10)\n    44\n    >>> centered_hexagonal(20)\n    92\n    \"\"\"\n    if n == 1:\n        return 1\n\n    n = n - 1  # as the number starts from 1\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -0.8583984375
    ],
    [
      "def find_nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    if n == 1:\n        return 1\n\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(find_nth_centered_hexagonal_number(i))",
      -0.8583984375
    ],
    [
      "def find_nth_hexagonal_number(n):\n    \"\"\"\n    Using formula:\n    (2 * n * n - 1) / 3\n    \"\"\"\n    return (2 * n * n - 1) // 3\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(find_nth_hexagonal_number(i))",
      -0.85888671875
    ],
    [
      "def nth_centered_hexagonal_number(n):\n    return (((2*n)**2 - 7*n) // 6)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_centered_hexagonal_number(i))",
      -0.85888671875
    ],
    [
      "def nth_centered_hexagonal_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return ((2 * n) ** 2 - 7 * n) // 6\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_centered_hexagonal_number(i))",
      -0.85888671875
    ],
    [
      "import math\n\n\ndef nth_centered_hexagonal(n: int) -> int:\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    print(nth_centered_hexagonal(1))\n    print(nth_centered_hexagonal(6))\n    print(nth_centered_hexagonal(15))",
      -0.85888671875
    ],
    [
      "import math\n\n\ndef nth_centered_hexagonal_number(n):\n    return (3 * n * n - n) // 2\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_centered_hexagonal_number(n))\n\n    for n in range(1, 11):\n        print(math.floor(math.sqrt(24 * n * n - 3 * n + 2) + 1) // 4)",
      -0.85888671875
    ],
    [
      "def find_nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    The nth hexagonal number is the sum of n and the number of\n    hexagonal numbers that are less than n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 1\n    i = 1\n    num = 2\n    while i < n:\n        num += 6 * (i - 1)\n        i += 1\n    return num\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(find_nth_hexagonal_number(i))",
      -1.2255859375
    ],
    [
      "def centered_hexagonal(n):\n    return ((2*n)**2 - 7*n)//6\n\n\nif __name__ == '__main__':\n    print(centered_hexagonal(1))\n    print(centered_hexagonal(2))\n    print(centered_hexagonal(3))\n    print(centered_hexagonal(4))\n    print(centered_hexagonal(5))\n    print(centered_hexagonal(6))\n    print(centered_hexagonal(7))\n    print(centered_hexagonal(8))\n    print(centered_hexagonal(9))\n    print(centered_hexagonal(10))",
      -1.30078125
    ],
    [
      "def centered_hexagon(n: int) -> int:\n    \"\"\"\n    The nth centered hexagonal number is given by:\n        n**2 * (3 - 4 * n)\n\n    >>> centered_hexagon(1)\n    1\n    >>> centered_hexagon(6)\n    19\n    >>> centered_hexagon(25)\n    153\n    >>> centered_hexagon(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n should be greater than 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n\n    return n ** 2 * (3 - 4 * n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.556640625
    ],
    [
      "def hexagon(n):\n\treturn ((3*(n**2) - n)/2)\n\nif __name__ == '__main__':\n    print(hexagon(1))\n    print(hexagon(2))\n    print(hexagon(3))\n    print(hexagon(4))\n    print(hexagon(5))\n    print(hexagon(6))\n    print(hexagon(7))\n    print(hexagon(8))\n    print(hexagon(9))\n    print(hexagon(10))\n    print(hexagon(11))\n    print(hexagon(12))\n    print(hexagon(13))\n    print(hexagon(14))\n    print(hexagon(15))\n    print(hexagon(16))\n    print(hexagon(17))\n    print(hexagon(18))\n    print(hexagon(19))\n    print(hexagon(20))\n    print(hexagon(21))\n    print(hexagon(22))\n    print(hexagon(23))\n    print(hexagon(24))\n    print(hexagon(25))\n    print(hexagon(26))\n    print(hexagon(27))\n    print(hexagon(28))\n    print(hexagon(29))\n    print(hexagon(30))\n    print(hexagon(31))\n    print(hexagon(32))\n    print(hexagon(33))\n    print(hexagon(34))\n    print(hexagon(35))\n    print(hexagon(36))\n    print(hexagon(37))\n    print(hexagon(38))\n    print(hexagon(39))\n    print(hexagon(40))\n    print(hexagon(41))\n    print(hexagon(42))\n    print(hexagon(43))\n    print(hexagon(44))\n    print(hexagon(45))\n    print(hexagon(46))\n    print(hexagon(47))\n    print(hexagon(48))\n    print(hexagon(",
      -1.56640625
    ],
    [
      "from typing import Optional\n\n\ndef find_nth_hexagonal_number(n: int) -> Optional[int]:\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return (3 * ((n - 2) ** 2) + 4 * (n - 1)) // 6\n\n    return (3 * ((n - 1) ** 2) + 4 * n) // 6\n\n\nif __name__ == \"__main__\":\n    assert find_nth_hexagonal_number(1) == 1\n    assert find_nth_hexagonal_number(5) == 15\n    assert find_nth_hexagonal_number(10) == 34\n    assert find_nth_hexagonal_number(20) == 75\n    assert find_nth_hexagonal_number(100) == 5022\n    assert find_nth_hexagonal_number(-1) is None\n    assert find_nth_hexagonal_number(0) is None",
      -2.05859375
    ],
    [
      "import math\n\n\ndef find_centered_hexagonal_number(n):\n    \"\"\"\n    A centered hexagonal number is a number that is the sum of its distance from the center of the hexagon to its\n    adjacent vertices.\n    :param n: int\n    :return: int\n\n    >>> find_centered_hexagonal_number(1)\n    1\n    >>> find_centered_hexagonal_number(2)\n    4\n    >>> find_centered_hexagonal_number(3)\n    10\n    >>> find_centered_hexagonal_number(4)\n    13\n    >>> find_centered_hexagonal_number(5)\n    19\n    >>> find_centered_hexagonal_number(10)\n    76\n    \"\"\"\n    return math.floor(\n        (math.sqrt(8 * n + 1) - 1) / 4\n    )  # The sum of the distances from the center of the hexagon to its adjacent vertices\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.15234375
    ],
    [
      "class Solution(object):\n    def find_nth_hexagonal_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n % 4 == 1:\n            return 1 + 4 * n ** 2\n        else:\n            return 1 - 4 * n ** 2\n\n\nsol = Solution()\nprint(sol.find_nth_hexagonal_number(1))\nprint(sol.find_nth_hexagonal_number(3))\nprint(sol.find_nth_hexagonal_number(6))\nprint(sol.find_nth_hexagonal_number(24))",
      -2.728515625
    ],
    [
      "from math import sqrt\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    return int(((3 * n * n - n) / 2) + (3 * n) / 2)\n\n\ndef centered_hexagonal_number_optimized(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    return int(n * (2 * n - 1))\n\n\ndef nth_centered_hexagonal_number(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    return int((n * (n * 2 + 1) + 1) / 6)\n\n\ndef nth_centered_hexagonal_number_optimized(n):\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\ndef is_hexagonal_number(n):\n    \"\"\"\n    Return True if n is hexagonal number.\n    \"\"\"\n    sqrt_n = sqrt(n)\n    return int(sqrt_n + 0.5) ** 2 == n\n\n\ndef is_centered_hexagonal_number(n):\n    \"\"\"\n    Return True if n is centered hexagonal number.\n    \"\"\"\n    if not is_hexagonal_number(n):\n        return False\n\n    sqrt_n = sqrt(n)\n    return int(sqrt_n + 0.5) ** 2 == n\n\n\nif __name__ == \"__main__\":\n    print(centered_hexagonal_number(1))\n    print(centered_hexagonal_number(2))\n    print(centered_hexagonal_number(3))\n    print(centered_hexagonal_number(4))\n    print(centered_hexagonal_number(5))\n    print(centered_hexagonal_number(6))\n    print(centered_hexagonal_number(7))\n    print(centered_hexagonal_number(",
      -2.736328125
    ],
    [
      "def centered_hexagonal_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 != 0:\n        return 3 * (2 * (n // 2) - 1) + 1\n    else:\n        return 4 * (n // 2) ** 2 - 3 * (n // 2) + 1\n\n\nif __name__ == '__main__':\n    print(centered_hexagonal_number(1))\n    print(centered_hexagonal_number(5))\n    print(centered_hexagonal_number(12))",
      -2.7421875
    ],
    [
      "import math\n\n\ndef centered_hexagonal(n):\n    if n == 1:\n        return 1\n\n    # nth hexagonal number is given by n^2 + (n - 1)\n    # nth centered hexagonal number is given by n^2 - n + 2\n    return int((n * n - n + 2) / 4)\n\n\ndef test(n):\n    print(centered_hexagonal(n))\n\n\ndef main():\n    test(int(input().strip()))\n\n\nif __name__ == '__main__':\n    main()",
      -2.75390625
    ],
    [
      "def nth_hexagonal_number(n):\n    \"\"\"Returns nth hexagonal number.\"\"\"\n    return n * (2*n - 1)\n\ndef centered_hexagonal_number(n):\n    \"\"\"Returns the nth centered hexagonal number.\"\"\"\n    return (1 + 8 * n * n - 8 * n) // 2\n\ndef test_centered_hexagonal_number():\n    \"\"\"Tests for centered_hexagonal_number function.\"\"\"\n    assert centered_hexagonal_number(1) == 1\n    assert centered_hexagonal_number(2) == 6\n    assert centered_hexagonal_number(3) == 15\n    assert centered_hexagonal_number(4) == 28\n    assert centered_hexagonal_number(5) == 45\n    assert centered_hexagonal_number(6) == 66\n    assert centered_hexagonal_number(7) == 91\n    assert centered_hexagonal_number(8) == 120\n    assert centered_hexagonal_number(9) == 155\n    assert centered_hexagonal_number(10) == 196\n    assert centered_hexagonal_number(11) == 241\n    assert centered_hexagonal_number(12) == 296\n    assert centered_hexagonal_number(13) == 351\n    assert centered_hexagonal_number(14) == 412\n    assert centered_hexagonal_number(15) == 475\n    assert centered_hexagonal_number(16) == 540\n    assert centered_hexagonal_number(17) == 611\n    assert centered_hexagonal_number(18) == 686\n    assert centered_hexagonal_number(19) == 772\n    assert centered_hexagonal_number(20) == 861\n\ndef main():\n    \"\"\"Main function for the program.\"\"\"\n    test_centered_hexagonal_number()\n\nif __name",
      -2.896484375
    ],
    [
      "def nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    >>> nth_centered_hexagonal_number(1)\n    1\n    >>> nth_centered_hexagonal_number(6)\n    15\n    >>> nth_centered_hexagonal_number(10)\n    32\n    >>> nth_centered_hexagonal_number(0)\n    0\n    >>> nth_centered_hexagonal_number(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: nth hexagonal number cannot be negative\n    >>> nth_centered_hexagonal_number(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: nth hexagonal number must be a positive integer\n    >>> nth_centered_hexagonal_number(1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: nth hexagonal number must be a positive integer\n    >>> nth_centered_hexagonal_number([])\n    Traceback (most recent call last):\n        ...\n    ValueError: nth hexagonal number must be a positive integer\n    \"\"\"\n    if n < 0 or not isinstance(n, int):\n        raise ValueError(\"nth hexagonal number must be a positive integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n > 1:\n        return (((3 * n * n) - 3 * n + 1) // 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.904296875
    ],
    [
      "def find_centered_hexagonal_number(n):\n    \"\"\"\n    We can easily find nth centered hexagonal number by adding the number of hexagonals before it and the number of hexagonals after it.\n    The number of hexagonals before it is n - 1, and the number of hexagonals after it is n - 2.\n    \"\"\"\n    return (n - 1) + (n - 2)\n\n\nif __name__ == \"__main__\":\n    print(find_centered_hexagonal_number(1))\n    print(find_centered_hexagonal_number(2))\n    print(find_centered_hexagonal_number(3))\n    print(find_centered_hexagonal_number(4))\n    print(find_centered_hexagonal_number(5))\n    print(find_centered_hexagonal_number(6))\n    print(find_centered_hexagonal_number(7))\n    print(find_centered_hexagonal_number(8))",
      -3.3203125
    ],
    [
      "from typing import Tuple\n\n\ndef nth_hexagonal_number(n: int) -> int:\n    \"\"\"Returns the nth hexagonal number.\n\n    Args:\n        n (int): The nth hexagonal number.\n\n    Examples:\n        >>> nth_hexagonal_number(1)\n        1\n        >>> nth_hexagonal_number(6)\n        15\n    \"\"\"\n    return int(((2 * n - 1) * n) / 2)\n\n\ndef nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"Returns the nth centered hexagonal number.\n\n    Args:\n        n (int): The nth hexagonal number.\n\n    Examples:\n        >>> nth_centered_hexagonal_number(1)\n        1\n        >>> nth_centered_hexagonal_number(6)\n        14\n    \"\"\"\n    return nth_hexagonal_number(n) - n + 1\n\n\ndef nth_centered_hexagonal_number_using_sequence(n: int) -> int:\n    \"\"\"Returns the nth centered hexagonal number using the hexagonal sequence.\n\n    Args:\n        n (int): The nth hexagonal number.\n\n    Examples:\n        >>> nth_centered_hexagonal_number_using_sequence(1)\n        1\n        >>> nth_centered_hexagonal_number_using_sequence(6)\n        14\n    \"\"\"\n    return int((((3 * n - 1) ** 3 - (3 * n - 7) ** 3) / 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.490234375
    ],
    [
      "from math import floor\n\n\ndef find_nth_centered_hexagonal_number(n):\n    \"\"\"\n    :param n: integer\n    :return: integer\n    >>> find_nth_centered_hexagonal_number(1)\n    1\n    >>> find_nth_centered_hexagonal_number(6)\n    15\n    >>> find_nth_centered_hexagonal_number(20)\n    195\n    \"\"\"\n    return int(((floor(floor((1 + 2 * n) ** 0.5) - 1) * (floor(floor((1 + 2 * n) ** 0.5) - 1) + 1)) / 2) + n)\n\n\nif __name__ == \"__main__\":\n    print(find_nth_centered_hexagonal_number(1))",
      -4.03515625
    ],
    [
      "import math\n\n\ndef centered_hexagonal(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 1:\n        return 0\n    return int(((3 * n * n) - 3 * n + 2) / 2)\n\n\ndef centered_hexagonal_pattern(n):\n    \"\"\"\n    :param n: int\n    :return: list\n    \"\"\"\n    if n < 1:\n        return []\n    nth_centered_hexagon_number = centered_hexagonal(n)\n    result = []\n    for i in range(1, nth_centered_hexagon_number + 1):\n        result.append(i)\n    for i in range(1, nth_centered_hexagon_number):\n        result.append(nth_centered_hexagon_number - i)\n    return result\n\n\ndef centered_hexagonal_numbers(n):\n    \"\"\"\n    :param n: int\n    :return: list\n    \"\"\"\n    if n < 1:\n        return []\n    nth_centered_hexagon_number = centered_hexagonal(n)\n    result = []\n    for i in range(1, nth_centered_hexagon_number + 1):\n        result.append(i)\n    for i in range(1, nth_centered_hexagon_number):\n        result.append(nth_centered_hexagon_number - i)\n    return result\n\n\ndef centered_hexagonal_number_pattern(n):\n    \"\"\"\n    :param n: int\n    :return: list\n    \"\"\"\n    if n < 1:\n        return []\n    nth_centered_hexagon_number = centered_hexagonal(n)\n    result = []\n    for i in range(1, nth_centered_hexagon_number + 1):\n        result.append(i)\n    for i in range(1, nth_centered_hexagon_number):\n        result.append(nth_centered_hexagon_number - i)\n    return result\n\n\ndef centered_hex",
      -4.60546875
    ],
    [
      "import math\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef find_nth_hexagonal_number(n: int) -> int:\n    if n < 1:\n        return 0\n\n    # n = 1, 3, 7, 13, ...\n    if n % 2 == 0:\n        return (2 * n - 1) * (2 * n - 1 - 1) // 2\n\n    # n = 2, 4, 6, 8, ...\n    return (2 * n - 1) * (2 * n - 1 + 1) // 2\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef find_nth_hexagonal_number_2(n: int) -> int:\n    if n < 1:\n        return 0\n\n    # n = 1, 3, 7, 13, ...\n    if n % 2 == 0:\n        return (2 * n - 1) ** 2\n\n    # n = 2, 4, 6, 8, ...\n    return (2 * n - 1) ** 2 - 1\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef find_nth_hexagonal_number_3(n: int) -> int:\n    if n < 1:\n        return 0\n\n    # n = 1, 3, 7, 13, ...\n    if n % 2 == 0:\n        return n * (2 * n - 1)\n\n    # n = 2, 4, 6, 8, ...\n    return (n - 1) * (2 * n - 1)\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef find_nth_hexagonal_number_4(n: int) -> int:\n    if n < 1:\n        return 0\n\n    # n = 1, 3, 7, 13, ...\n    if n % 2",
      -5.05859375
    ],
    [
      "from typing import Optional\n\n\ndef hexagonal(n: int) -> int:\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n < 0:\n        return 0\n    return n * ((2 * n) - 1)\n\n\ndef nth_hexagonal_number(n: int) -> Optional[int]:\n    \"\"\"\n    Return nth centered hexagonal number.\n    \"\"\"\n    if n < 0:\n        return None\n    return hexagonal(n // 2)\n\n\nif __name__ == \"__main__\":\n    assert nth_hexagonal_number(1) == 1\n    assert nth_hexagonal_number(2) == 6\n    assert nth_hexagonal_number(3) == 15\n    assert nth_hexagonal_number(4) == 28\n    assert nth_hexagonal_number(5) == 45\n    assert nth_hexagonal_number(6) == 66\n    assert nth_hexagonal_number(7) == 91\n    assert nth_hexagonal_number(8) == 120\n    assert nth_hexagonal_number(9) == 155\n    assert nth_hexagonal_number(10) == 196\n    assert nth_hexagonal_number(11) == 241\n    assert nth_hexagonal_number(12) == 296\n    assert nth_hexagonal_number(13) == 361\n    assert nth_hexagonal_number(14) == 436\n    assert nth_hexagonal_number(15) == 521\n    assert nth_hexagonal_number(16) == 620\n    assert nth_hexagonal_number(17) == 729\n    assert nth_hexagonal_number(18) == 854\n    assert nth_hexagonal_number(19) == 1001\n    assert nth_hexagonal_",
      -7.52734375
    ],
    [
      "import math\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    :param: - n - integer\n    Should return nth centered hexagonal number\n    \"\"\"\n    if n < 1:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n % 2 == 1:\n        return (math.pow(3, n) - math.pow(2, n)) // 3\n\n    return (math.pow(3, n) + math.pow(2, n)) // 3\n\n\ndef centered_hexagonal_number_alt(n):\n    \"\"\"\n    :param: - n - integer\n    Should return nth centered hexagonal number\n    \"\"\"\n    if n < 1:\n        return 0\n\n    return n ** 2 - n\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert centered_hexagonal_number(1) == 1, \"1st example\"\n    assert centered_hexagonal_number(2) == 4, \"2nd example\"\n    assert centered_hexagonal_number(3) == 5, \"3rd example\"\n    assert centered_hexagonal_number(4) == 7, \"4th example\"\n    assert centered_hexagonal_number(5) == 9, \"5th example\"\n    assert centered_hexagonal_number(6) == 11, \"6th example\"\n    assert centered_hexagonal_number(7) == 13, \"7th example\"\n    assert centered_hexagonal_number(8) == 15, \"8th example\"\n    assert centered_hexagonal_number(9) == 16, \"9th example\"\n    assert centered_hexagonal_number(10) == 18, \"10th example\"\n    assert centered_hexagonal_number(20) == 32768, \"20th example\"\n\n    assert centered_hexagonal_number_alt(1) == 1, \"1st example\"\n    assert centered_hexagonal",
      -7.55859375
    ],
    [
      "def hexagonal_number(n):\n    return n * (2 * n - 1)\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    :param: `n` - an integer\n    Return the nth centered hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # find the smallest hexagonal number\n    # greater than or equal to n\n    i = 0\n    while hexagonal_number(i) < n:\n        i += 1\n\n    # compute the difference\n    diff = hexagonal_number(i) - hexagonal_number(i - 1)\n\n    # compute the nth centered hexagonal number\n    return hexagonal_number(i) - (diff // 2) * (diff - 1)\n\n\ndef test_centered_hexagonal_number():\n    assert centered_hexagonal_number(1) == 1\n    assert centered_hexagonal_number(2) == 6\n    assert centered_hexagonal_number(3) == 15\n    assert centered_hexagonal_number(4) == 28\n    assert centered_hexagonal_number(5) == 45\n    assert centered_hexagonal_number(6) == 66\n    assert centered_hexagonal_number(7) == 91\n    assert centered_hexagonal_number(8) == 120\n    assert centered_hexagonal_number(9) == 155\n    assert centered_hexagonal_number(10) == 192\n    assert centered_hexagonal_number(11) == 235\n    assert centered_hexagonal_number(12) == 282\n    assert centered_hexagonal_number(13) == 331\n    assert centered_hexagonal_number(14) == 384\n    assert centered_hexagonal_number(15) == 441\n    assert centered_hexagonal_number(16) == 504\n    assert centered_hexagonal_number(17) ==",
      -7.69921875
    ],
    [
      "from typing import List\n\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    For nth centered hexagonal number,\n    n must be odd.\n    The first centered hexagonal number is 1.\n    The formula for nth centered hexagonal number is n * (3 * n - 1) / 2.\n    \"\"\"\n    if n % 2 == 0:\n        raise ValueError(\"n must be odd\")\n    return n * (3 * n - 1) // 2\n\n\ndef find_nth_hexagonal_number(n: int) -> int:\n    \"\"\"\n    For nth hexagonal number,\n    the formula for nth hexagonal number is n * (2n - 1).\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef centered_hexagonal_number_list(n: int) -> List[int]:\n    \"\"\"\n    For nth centered hexagonal number,\n    the formula for nth hexagonal number is n * (2n - 1).\n    \"\"\"\n    if n % 2 == 0:\n        raise ValueError(\"n must be odd\")\n    hexagonal_number_list = []\n    for i in range(1, n + 1):\n        hexagonal_number_list.append(i * (2 * i - 1))\n    return hexagonal_number_list",
      -7.73046875
    ],
    [
      "from typing import Optional\n\n\nclass Solution:\n    def get_nth_hex_number(self, n: int) -> Optional[int]:\n        \"\"\"\n        Hexagonal number is the sum of (n * (2 * n - 1)).\n        A centered hexagonal number is a hexagonal number which is a sum of two consecutive hexagonal numbers.\n        We can find a centered hexagonal number by subtracting one hexagonal number from another.\n        For example:\n            10 is a centered hexagonal number, because:\n                10 = (5 * (2 * 5 - 1)) - (4 * (2 * 4 - 1))\n        \"\"\"\n        if n < 1:\n            return None\n        if n == 1:\n            return 1\n\n        # Find a hexagonal number which is greater than or equal to n\n        i = 1\n        while True:\n            i += 1\n            if i * (2 * i - 1) >= n:\n                break\n\n        # Find a previous hexagonal number\n        prev = i - 1\n        prev_value = prev * (2 * prev - 1)\n\n        # Subtract previous hexagonal number from the current one\n        return (i * (2 * i - 1)) - prev_value\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.get_nth_hex_number(1) == 1\n    assert s.get_nth_hex_number(2) == 6\n    assert s.get_nth_hex_number(3) == 15\n    assert s.get_nth_hex_number(4) == 28\n    assert s.get_nth_hex_number(5) == 45\n    assert s.get_nth_hex_number(10) == 106",
      -7.76953125
    ],
    [
      "def hex_num(n):\n    \"\"\"\n    :param n: int - number of hexagonal number\n    :return: int - nth hexagonal number\n    \"\"\"\n    # first hexagonal number is 1\n    if n == 1:\n        return 1\n    # i is the number of rows\n    i = 1\n    # count is the number of hexagonal numbers\n    count = 1\n    # row_count is the number of hexagonal numbers in a row\n    row_count = 1\n    # while the count is less than the nth hexagonal number\n    while count < n:\n        # if the count is less than the row_count then it is the nth hexagonal number\n        if count < row_count:\n            return count\n        # i increases by 1\n        i += 1\n        # row_count increases by 6 * i\n        row_count += 6 * i\n        # count increases by 1\n        count += 1\n\n\ndef test_cases():\n    \"\"\"\n    Some examples to test the function\n    \"\"\"\n    assert hex_num(1) == 1\n    assert hex_num(6) == 6\n    assert hex_num(11) == 16\n    assert hex_num(32) == 51\n\n\ntest_cases()",
      -8.640625
    ],
    [
      "class Solution(object):\n    def centeredHexagonNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n        # Method 1: (Using nth row of Pascal's Triangle)\n        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n        \"\"\"\n        # 1\n        # 1 2\n        # 1 3 4\n        # 1 4 7 8\n        # 1 5 10 13 14\n        # 1 6 15 21 28 29\n        # 1 7 21 35 50 56 57\n        # 1 8 28 50 75 106 115 116\n        # 1 9 36 75 120 195 220 221 222\n        # 1 10 45 90 165 285 410 511 512 513\n        # 1 11 55 120 231 425 705 1075 1490 1511 1512 1513\n        # 1 12 66 147 276 513 1010 1965 3310 5263 7652 9861 9862 9863\n        # 1 13 81 196 441 1096 2865 6581 15056",
      -8.953125
    ],
    [
      "from math import floor\n\n\ndef find_nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: the index of the hexagonal number to find\n    :return: the nth centered hexagonal number\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef find_nth_centered_hexagonal_number_alt(n: int) -> int:\n    \"\"\"\n    :param n: the index of the hexagonal number to find\n    :return: the nth centered hexagonal number\n    \"\"\"\n    return n * (2 * n - 1) + floor(((1 + 8 * n) * (1 + 4 * n)) / 6)\n\n\nif __name__ == \"__main__\":\n    print(find_nth_centered_hexagonal_number(1))\n    print(find_nth_centered_hexagonal_number(2))\n    print(find_nth_centered_hexagonal_number(3))\n    print(find_nth_centered_hexagonal_number(4))\n    print(find_nth_centered_hexagonal_number(5))\n    print(find_nth_centered_hexagonal_number(6))\n    print(find_nth_centered_hexagonal_number(7))\n    print(find_nth_centered_hexagonal_number(8))\n    print(find_nth_centered_hexagonal_number(9))\n    print(find_nth_centered_hexagonal_number(10))\n\n    print(find_nth_centered_hexagonal_number_alt(1))\n    print(find_nth_centered_hexagonal_number_alt(2))\n    print(find_nth_centered_hexagonal_number_alt(3))\n    print(find_nth_centered_hexagonal_number_alt(4))\n    print(find_nth_centered_hexagonal_number_alt(5))\n    print(find_nth_centered_hexagonal_number_alt(6))\n    print(find_nth",
      -9.6484375
    ],
    [
      "import math\n\n\ndef find_nth_hexagonal_number(n):\n    return int(n * ((2 * n - 1) ** 0.5) + 0.5)\n\n\ndef find_nth_hexagonal_number_without_math(n):\n    h = 1\n    while n > 1:\n        h += 2 * h - 1\n        n -= 1\n    return h\n\n\nif __name__ == \"__main__\":\n    print(find_nth_hexagonal_number(1))\n    print(find_nth_hexagonal_number(6))\n    print(find_nth_hexagonal_number(15))\n    print(find_nth_hexagonal_number(23))\n    print(find_nth_hexagonal_number(100))\n    print(find_nth_hexagonal_number(200))\n\n    print(find_nth_hexagonal_number_without_math(1))\n    print(find_nth_hexagonal_number_without_math(6))\n    print(find_nth_hexagonal_number_without_math(15))\n    print(find_nth_hexagonal_number_without_math(23))\n    print(find_nth_hexagonal_number_without_math(100))\n    print(find_nth_hexagonal_number_without_math(200))",
      -9.7578125
    ],
    [
      "class Solution:\n    def hexagonal(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return (2 * n - 1) * (2 * n - 1) - n\n\n    def find_nth_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        l, r = 0, 4 * n\n        while l <= r:\n            mid = (l + r) // 2\n            if self.hexagonal(mid) == n:\n                return mid\n            elif self.hexagonal(mid) > n:\n                r = mid - 1\n            else:\n                l = mid + 1\n\n\nif __name__ == \"__main__\":\n    n = 13\n    print(Solution().hexagonal(n))\n    print(Solution().find_nth_number(n))",
      -10.6640625
    ],
    [
      "def find_nth_hexagonal(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    # find the nth row\n    row_num = (n - 1) // 4 + 1\n    # find the nth position\n    pos_num = n - 4 * (row_num - 1)\n    # find the number of the row\n    num = (row_num ** 2 - row_num) // 2\n    if pos_num == 1:\n        return num\n    elif pos_num % 2 == 1:\n        return num + (pos_num - 1)\n    else:\n        return num - (pos_num - 1)\n\n\nif __name__ == \"__main__\":\n    print(find_nth_hexagonal(1))\n    print(find_nth_hexagonal(6))\n    print(find_nth_hexagonal(13))",
      -10.9921875
    ],
    [
      "def nth_centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate nth centered hexagonal number.\n    >>> nth_centered_hexagonal_number(1)\n    1\n    >>> nth_centered_hexagonal_number(6)\n    15\n    >>> nth_centered_hexagonal_number(25)\n    255\n    >>> nth_centered_hexagonal_number(3)\n    7\n    >>> nth_centered_hexagonal_number(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be greater than 0\n    >>> nth_centered_hexagonal_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be greater than 0\n    >>> nth_centered_hexagonal_number(26)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be less than 26\n    >>> nth_centered_hexagonal_number([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be an integer\n    >>> nth_centered_hexagonal_number(\"asdasd\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be an integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input number must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input number must be greater than 0\")\n    if n > 25:\n        raise ValueError(\"Input number must be less than 26\")\n    if n <= 6:\n        return n\n    return 4 * n ** 2 - 4 * n + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -11.2265625
    ],
    [
      "def hex_number(n):\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    # 1, 6, 15, 28, 41, 56, 73, 91, 108, 127, ...\n    if n == 1:\n        return 1\n    if n == 2:\n        return 6\n    if n % 2 == 0:\n        return 1 + 4 * (n // 2 - 1)\n    else:\n        return 6",
      -14.6953125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}