{
  "problem": {
    "task_id": "MBPP/154",
    "prompt": "Write a function to extract every specified element from a given two dimensional list.",
    "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
    "test_list": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ],
    "challenge_test_list": [],
    "problem_id": 143
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List, Tuple\n\n\ndef get_element(matrix: List[List[int]], index: int) -> List[int]:\n    \"\"\"Returns a list of elements with specified index from a given matrix.\n\n    Args:\n        matrix: Two dimensional list of numbers.\n        index: Index of an element in a matrix.\n\n    Examples:\n        >>> assert get_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n    \"\"\"\n    return [row[index] for row in matrix]\n\n\ndef get_element_tuple(matrix: List[List[int]], index: int) -> Tuple[int, ...]:\n    \"\"\"Returns a tuple of elements with specified index from a given matrix.\n\n    Args:\n        matrix: Two dimensional list of numbers.\n        index: Index of an element in a matrix.\n\n    Examples:\n        >>> assert get_element_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == (2, 5, 8)\n    \"\"\"\n    return tuple(row[index] for row in matrix)\n\n\ndef main():\n    print(get_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\n    print(get_element_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\n\n\nif __name__ == \"__main__\":\n    main()",
      16.421875
    ],
    [
      "from typing import List\n\n\ndef get_element_from_2d_list(matrix: List[List[int]], index: int) -> List[int]:\n    \"\"\"Returns list of element in given index.\n\n    Args:\n        matrix (List[List[int]]): 2d list of integers.\n        index (int): index of element to extract.\n\n    Returns:\n        List[int]: list of integers.\n    \"\"\"\n    return [row[index] for row in matrix]\n\n\nif __name__ == \"__main__\":\n    assert get_element_from_2d_list([[1, 2, 3], [4, 5, 6]], 0) == [1, 4]\n    assert get_element_from_2d_list([[1, 2, 3], [4, 5, 6]], 1) == [2, 5]\n    assert get_element_from_2d_list([[1, 2, 3], [4, 5, 6]], 2) == [3, 6]",
      15.5703125
    ],
    [
      "from typing import List, Optional\n\n\ndef extract_elements_from_list(\n        matrix: List[List[int]],\n        index: Optional[int] = 0,\n) -> List[int]:\n    \"\"\"Extracts every specified element from a given two dimensional list.\n\n    Args:\n        matrix (List[List[int]]): Two dimensional list.\n        index (Optional[int]): Index from where to extract elements.\n\n    Returns:\n        List[int]: List of extracted elements.\n\n    Examples:\n        >>> extract_elements_from_list(\n        ...     matrix=[\n        ...         [1, 2, 3, 4],\n        ...         [5, 6, 7, 8],\n        ...         [9, 10, 11, 12],\n        ...         [13, 14, 15, 16],\n        ...     ],\n        ...     index=1,\n        ... )\n        [2, 6, 10, 14]\n    \"\"\"\n    return [\n        row[index]\n        for row in matrix\n    ]\n\n\nif __name__ == '__main__':\n    print(extract_elements_from_list(\n        matrix=[\n            [1, 2, 3, 4],\n            [5, 6, 7, 8],\n            [9, 10, 11, 12],\n            [13, 14, 15, 16],\n        ],\n        index=1,\n    ))",
      12.765625
    ],
    [
      "from typing import List\n\n\ndef extract_elements(arr: List[List[int]], num: int) -> List[int]:\n    \"\"\"Returns all the elements at the given index from each sublist in the given list.\n\n    Args:\n        arr (List[List[int]]): the list of lists to extract elements from.\n        num (int): the index to extract elements from.\n\n    Returns:\n        List[int]: the list of extracted elements.\n    \"\"\"\n    if not arr:\n        return []\n\n    return [arr[i][num] for i in range(len(arr))]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      9.3671875
    ],
    [
      "from typing import List\n\n\ndef extract_elements_from_list(lst: List, extract_elem: int) -> List:\n    \"\"\"Extracts every element from a given two dimensional list.\n\n    Args:\n        lst (List): list to extract element from\n        extract_elem (int): element to extract\n\n    Returns:\n        List: extracted elements from the list\n    \"\"\"\n    return [row[extract_elem] for row in lst]\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements_from_list(lst, 1))",
      7.34765625
    ],
    [
      "from itertools import chain\n\n\ndef extract_elements(input_list: list, extract_elements_index: list) -> list:\n    \"\"\"Extracts every specified element from a given two dimensional list.\n\n    Args:\n        input_list (list): two dimensional list to extract elements from.\n        extract_elements_index (list): list of indices to extract elements from.\n\n    Returns:\n        list: list of extracted elements.\n    \"\"\"\n    return list(chain.from_iterable([row[i] for i in extract_elements_index] for row in input_list))\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [0, 2]))\n    print(extract_elements([[\"python\", \"is\", \"awesome\"], [\"ruby\", \"is\", \"great\"]], [0, 2]))",
      7.2890625
    ],
    [
      "def extract_elements(arr: list, elements: list) -> list:\n    return [[element for element in row if element in elements] for row in arr]\n\n\nif __name__ == \"__main__\":\n    assert extract_elements([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]], [1, 2, 6, 7, 11, 16]) == [[1, 2], [6, 7], [11], [16]]\n    assert extract_elements([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]], [1, 2, 6, 7, 11, 16, 19]) == [[1, 2], [6, 7], [11], [16], [19]]\n    assert extract_elements([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]], [2, 6, 7, 11, 16, 19]) == [[2], [6, 7], [11], [16], [19]]",
      6.609375
    ],
    [
      "from itertools import chain\nfrom typing import List, Any\n\n\ndef extract_from_2d_list(data: List[List[Any]], index: int) -> List[Any]:\n    \"\"\"Extract every specified element from a given two dimensional list.\n\n    Args:\n        data (List[List[Any]]): 2D list of elements to extract from.\n        index (int): Index of the element to extract.\n\n    Returns:\n        List[Any]: Extracted elements.\n\n    Examples:\n        >>> extract_from_2d_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n        [2, 5, 8]\n    \"\"\"\n    return list(chain(*(d[index] for d in data)))\n\n\nif __name__ == \"__main__\":\n    print(extract_from_2d_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      6.45703125
    ],
    [
      "from typing import List\n\n\ndef extract_elements(given_list: List, num: int) -> List:\n    \"\"\"Extracts every specified element from a given two dimensional list.\n\n    Args:\n        given_list (List): 2 dimensional list\n        num (int): number of elements to extract\n\n    Returns:\n        List: extracted elements\n    \"\"\"\n    return [given_list[i][j] for i in range(len(given_list)) for j in range(len(given_list[i])) if j % num == 0]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], 2))",
      6.4375
    ],
    [
      "def extract_element(matrix, row, col):\n    result = []\n    for r in range(len(matrix)):\n        result.append(matrix[r][col])\n    return result\n\n\nprint(extract_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 2))\nprint(extract_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0, 2))\nprint(extract_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 0))\nprint(extract_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 1))",
      5.38671875
    ],
    [
      "from typing import List\n\n\ndef extract_every_nth(\n    lst: List[List[int]], n_rows: int, n_columns: int\n) -> List[int]:\n    \"\"\"Extracts every nth element from a given two dimensional list.\n\n    Args:\n        lst (List[List[int]]): two dimensional list\n        n_rows (int): number of rows to extract\n        n_columns (int): number of columns to extract\n\n    Returns:\n        List[int]: list of extracted elements\n    \"\"\"\n    return [\n        lst[row][column]\n        for row in range(0, len(lst), n_rows)\n        for column in range(0, len(lst[0]), n_columns)\n    ]\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    assert extract_every_nth(lst, 2, 2) == [1, 3, 5, 7, 9, 11, 13, 15]\n    assert extract_every_nth(lst, 1, 2) == [2, 4, 6, 8, 10, 12, 14, 16]\n    assert extract_every_nth(lst, 1, 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
      4.6875
    ],
    [
      "def extract_elements(lst, idx):\n    result = []\n    for sublist in lst:\n        result.append(sublist[idx])\n    return result\n\n\nif __name__ == '__main__':\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      4.41796875
    ],
    [
      "from copy import deepcopy\n\n\ndef extract_from_2d_list(list_2d, index):\n    \"\"\"Extract every specified element from a given two dimensional list.\n\n    Args:\n        list_2d: two dimensional list\n        index: index of the element to extract\n\n    Returns:\n        list: list with extracted elements\n    \"\"\"\n\n    if not list_2d or not index:\n        return []\n\n    if not isinstance(list_2d, list):\n        raise TypeError(\"list_2d should be list.\")\n\n    if not isinstance(index, int):\n        raise TypeError(\"index should be int.\")\n\n    if index < 0 or index >= len(list_2d[0]):\n        raise IndexError(\"index is out of range.\")\n\n    result = []\n\n    for sublist in list_2d:\n        if not isinstance(sublist, list):\n            raise TypeError(\"sublist should be list.\")\n        result.append(deepcopy(sublist[index]))\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert extract_from_2d_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n    assert extract_from_2d_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [3, 6, 9]\n    assert extract_from_2d_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n    assert extract_from_2d_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -1) == [3, 6, 9]\n    assert extract_from_2d_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == []\n    assert",
      4.33203125
    ],
    [
      "from typing import List\n\n\ndef extract_elements(lst: List[List[int]], index: int) -> List[int]:\n    \"\"\"Extracts every specified element from a given two dimensional list.\n\n    Args:\n        lst (List[List[int]]): a two dimensional list.\n        index (int): index to be extracted.\n\n    Returns:\n        List[int]: a list containing every specified element.\n    \"\"\"\n    return [lst[i][index] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(lst, 0))\n    print(extract_elements(lst, 1))\n    print(extract_elements(lst, 2))",
      4.15625
    ],
    [
      "from typing import List\n\n\ndef extract_elements(input_list: List[List[int]], n: int) -> List[int]:\n    \"\"\"Returns a list of every nth element of every sublist in the input_list.\n\n    Args:\n        input_list (List[List[int]]): a two dimensional list of integers\n        n (int): the index of the element to extract\n\n    Examples:\n        >>> extract_elements([[1, 2, 3], [4, 5, 6]], 2)\n        [3, 6]\n    \"\"\"\n    return [sublist[n] for sublist in input_list]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6]], 2))",
      3.6171875
    ],
    [
      "def extract_elements(array, index):\n    result = []\n    for item in array:\n        result.append(item[index])\n    return result\n\n\ndef main():\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.2109375
    ],
    [
      "from typing import List, Tuple, Callable\n\n\ndef extract_elements(data: List[List[int]], func: Callable) -> List[int]:\n    \"\"\"Extracts every element from a given two dimensional list.\n\n    Args:\n        data (List[List[int]]): input data\n        func (Callable): extract function\n\n    Returns:\n        List[int]: list of extracted elements\n    \"\"\"\n    return [item for row in data for item in func(row)]\n\n\ndef main():\n    data = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n    ]\n    func = lambda row: [row[0], row[-1]]\n    result = extract_elements(data, func)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      2.8515625
    ],
    [
      "from typing import List\n\n\ndef extract_every_nth(matrix: List[List[int]], n: int) -> List[int]:\n    \"\"\"Extracts every nth element from a two dimensional list.\n\n    Args:\n        matrix: a two dimensional list\n        n: extract every nth element\n\n    Returns:\n        a one dimensional list with every nth element\n\n    Examples:\n        >>> extract_every_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n        [2, 6, 8]\n        >>> extract_every_nth([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2)\n        [2, 6, 10]\n    \"\"\"\n    return [row[n - 1] for row in matrix]\n\n\nif __name__ == \"__main__\":\n    print(extract_every_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))\n    print(extract_every_nth([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2))",
      2.68359375
    ],
    [
      "def extract_every_nth(list_2d, n):\n    \"\"\"Returns every nth element from a two dimensional list.\n\n    Args:\n        list_2d: A two dimensional list of integers.\n        n: An integer representing the frequency of elements to be extracted.\n\n    Returns:\n        A one dimensional list of integers with every nth element of the input\n        list.\n    \"\"\"\n    one_d = []\n    for sublist in list_2d:\n        for i in range(len(sublist)):\n            if i % n == 0:\n                one_d.append(sublist[i])\n    return one_d\n\n\ndef test_extract_every_nth():\n    \"\"\"Test for extract_every_nth function.\"\"\"\n    list_2d = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    assert extract_every_nth(list_2d, 2) == [1, 3, 5, 7, 9, 11]\n    assert extract_every_nth(list_2d, 3) == [2, 4, 6, 8, 10, 12]\n    assert extract_every_nth(list_2d, 4) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    assert extract_every_nth([[1, 2, 3], [4, 5, 6]], 2) == [1, 3, 5]\n\n\nif __name__ == \"__main__\":\n    test_extract_every_nth()",
      2.3359375
    ],
    [
      "from itertools import islice\nfrom typing import Any, List\n\n\ndef extract_from_2d_list(list_2d: List[List[Any]], index: int) -> List[Any]:\n    \"\"\"Extract every specified element from a given two dimensional list.\n\n    Args:\n        list_2d (List[List[Any]]): list of lists to extract from\n        index (int): index to extract from\n\n    Returns:\n        List[Any]: list of extracted elements\n    \"\"\"\n\n    return [element for row in list_2d for element in islice(row, index, index + 1)]\n\n\nif __name__ == \"__main__\":\n    list_2d = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]\n    print(extract_from_2d_list(list_2d, 1))",
      1.91796875
    ],
    [
      "def extract_elements(arr, index):\n    return [x[index] for x in arr]\n\n\nif __name__ == '__main__':\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]",
      1.9140625
    ],
    [
      "def extract_every_nth(lst, n):\n    result = []\n    for i in range(len(lst)):\n        result.extend(lst[i][::n])\n    return result\n\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    assert extract_every_nth(lst, 2) == [1, 3, 5, 7, 9]\n    print(\"OK\")\n\n\nif __name__ == \"__main__\":\n    main()",
      1.6865234375
    ],
    [
      "def extract_every_nth(list_2d, n):\n    \"\"\"\n    >>> extract_every_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n    [[1, 3], [4, 6], [7, 9]]\n    \"\"\"\n    return [list(item) for index, item in enumerate(list_2d) if index % n == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.576171875
    ],
    [
      "from typing import List\n\n\ndef get_elements_from_matrix(matrix: List[List[int]], index: int) -> List[int]:\n    \"\"\"Returns the elements from the given matrix with the given index.\n\n    Args:\n        matrix (List[List[int]]): the given matrix.\n        index (int): the index of the element to extract.\n\n    Returns:\n        List[int]: the list of extracted elements.\n    \"\"\"\n    return [row[index] for row in matrix]\n\n\nif __name__ == \"__main__\":\n    print(get_elements_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      1.3759765625
    ],
    [
      "from typing import List\n\n\ndef extract_elements(lst: List[List[int]], index: int) -> List[int]:\n    \"\"\"Extract every specified element from a given two dimensional list.\n\n    Args:\n        lst (List[List[int]]): input two dimensional list\n        index (int): index of list\n\n    Returns:\n        List[int]: output list\n    \"\"\"\n    if not lst:\n        return []\n\n    if len(lst) == 1:\n        return lst[0]\n\n    return lst[0][index] + extract_elements(lst[1:], index)\n\n\nif __name__ == \"__main__\":\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [3, 6, 9]",
      1.2470703125
    ],
    [
      "from typing import List\n\n\ndef extract_elements(data: List[List[int]], index: int) -> List[int]:\n    \"\"\"Extract every specified element from a given two dimensional list.\n\n    Args:\n        data (List[List[int]]): list of list of integers\n        index (int): index of the element to be extracted\n\n    Returns:\n        List[int]: list of integers\n    \"\"\"\n\n    if not data or index < 0:\n        return []\n\n    result = []\n\n    for row in data:\n        result.append(row[index])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2], [3, 4]], 0))",
      1.142578125
    ],
    [
      "def extract_elements(input_list, element):\n    return [x[element] for x in input_list]\n\n\ndef test_extract_elements():\n    \"\"\"\n    >>> test_extract_elements()\n    \"\"\"\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [3, 6, 9]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.0244140625
    ],
    [
      "def extract_elements(lst, index):\n    return [lst[i][index] for i in range(len(lst))]\n\n# Tests\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      0.9833984375
    ],
    [
      "def extract(array, index):\n    \"\"\"Extract every specified element from a given two dimensional list.\n\n    Args:\n        array (list): Two dimensional list.\n        index (int): Index to extract.\n\n    Returns:\n        list: The extracted list.\n    \"\"\"\n    return [row[index] for row in array]",
      0.90771484375
    ],
    [
      "def extract_elements(matrix, row, col):\n    result = []\n    for i in range(len(matrix)):\n        result.append(matrix[i][col])\n    return result\n\n\ndef test_extract_elements():\n    matrix = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n    assert extract_elements(matrix, 0, 1) == [2, 6, 10, 14]\n    assert extract_elements(matrix, 2, 2) == [11, 16]",
      0.65478515625
    ],
    [
      "def extract_elements(lst, idx):\n    new_list = []\n    for sub_list in lst:\n        new_list.append(sub_list[idx])\n    return new_list\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(lst, 2))",
      0.447265625
    ],
    [
      "from typing import List\n\n\ndef extract_elements_from_list(lst: List[List], index: int) -> List:\n    \"\"\"Extracts elements from a given list at the specified index\n\n    Args:\n        lst (List[List]): 2D list\n        index (int): index of the inner list\n\n    Returns:\n        List: extracted elements\n    \"\"\"\n    result = []\n    for sub_list in lst:\n        result.append(sub_list[index])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    print(extract_elements_from_list(lst, 1))",
      0.3916015625
    ],
    [
      "def extract_elements(lst: list, row_index: int, col_index: int) -> list:\n    \"\"\"Return the specified elements from a given two dimensional list.\n\n    Args:\n        lst (list): the list to extract elements from.\n        row_index (int): the row index to extract from.\n        col_index (int): the column index to extract from.\n\n    Examples:\n        >>> assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 2) == [5]\n        >>> assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == [9]\n        >>> assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0, 1) == [2]\n        >>> assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 0) == [7]\n    \"\"\"\n    return [row[col_index] for row in lst[row_index::row_index + 1]]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 2))",
      0.257568359375
    ],
    [
      "from typing import List\n\n\ndef extract_elements(array: List[List[int]], element: int) -> List[int]:\n    \"\"\"\n    >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n    [3, 6, 9]\n    \"\"\"\n    return [element for row in array for element in row if element == element]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.230712890625
    ],
    [
      "from typing import List\n\n\ndef extract(lst: List[List[int]], elements: List[int]):\n    \"\"\"Extracts the specified elements from a given two dimensional list.\n\n    Args:\n        lst (List[List[int]]): the two dimensional list\n        elements (List[int]): the elements to extract\n\n    Returns:\n        List[int]: the extracted elements\n    \"\"\"\n\n    return [element for row in lst for element in row if element in elements]\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    elements = [1, 5, 9]\n    print(extract(lst, elements))",
      0.1322021484375
    ],
    [
      "from itertools import chain\n\n\ndef extract_every(lst, index):\n    return list(chain(*[row[index] for row in lst]))\n\n\nif __name__ == \"__main__\":\n    lst = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    print(extract_every(lst, 1))",
      0.12841796875
    ],
    [
      "def extract_every_nth(input_list, n):\n    if len(input_list) == 0 or n < 1:\n        return []\n    return [input_list[i][::n] for i in range(len(input_list))]\n\n\ndef main():\n    print(\"Please input 2D list:\")\n    input_list = []\n    for i in range(int(input())):\n        input_list.append(input().split())\n    print(extract_every_nth(input_list, 2))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.09979248046875
    ],
    [
      "def extract_elements(matrix, element):\n    return [[el for el in row if el == element] for row in matrix]\n\n\nif __name__ == \"__main__\":\n    mat = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    print(extract_elements(mat, 11))",
      0.06011962890625
    ],
    [
      "def extract_elements(lst, element):\n    return [ele for ele in lst for i in ele if i == element]\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    element = 6\n    print(extract_elements(lst, element))",
      0.0178985595703125
    ],
    [
      "def extract_elements(lst, elements):\n    result = []\n    for sub_list in lst:\n        for element in elements:\n            if element in sub_list:\n                result.append(element)\n    return result\n\n\nif __name__ == '__main__':\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 3, 5, 7]) == [1, 3, 5, 7]\n    assert extract_elements([['python', 'java'], ['c++', 'c#']], ['python', 'java', 'c++']) == ['python', 'java', 'c++']\n    assert extract_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], [1, 2, 5, 6, 9, 10]) == [1, 2, 5, 6, 9, 10]",
      -0.0171051025390625
    ],
    [
      "from itertools import chain\nfrom typing import List, Any\n\n\ndef extract_elements(arr: List[List[Any]], element: Any) -> List[Any]:\n    \"\"\"Extracts every specified element from a given two dimensional list.\n\n    Args:\n        arr (List[List[Any]]): the two dimensional list\n        element (Any): the specified element to extract\n\n    Returns:\n        List[Any]: the list with every specified element\n    \"\"\"\n    return list(chain.from_iterable([sublist for sublist in arr if element in sublist]))\n\n\nif __name__ == \"__main__\":\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(arr, 5))",
      -0.2412109375
    ],
    [
      "def extract_element(lst, element):\n    return [item for sublist in lst for item in sublist if item == element]\n\n\ndef main():\n    print(\"Extracted: \" + str(extract_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5)))\n    print(\"Extracted: \" + str(extract_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)))\n    print(\"Extracted: \" + str(extract_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)))\n    print(\"Extracted: \" + str(extract_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.2462158203125
    ],
    [
      "def extract_elements(list_2d: list, element: str) -> list:\n    \"\"\"\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '2')\n    ['2', '2', '2']\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '8')\n    ['8']\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '5')\n    ['5']\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '1')\n    ['1']\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '9')\n    ['9']\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '7')\n    ['7']\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '6')\n    ['6']\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '4')\n    ['4']\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '3')\n    ['3']\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '10')\n    []\n    >>> extract_elements([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '11')\n    []\n    \"\"\"\n\n    result = []",
      -0.66162109375
    ],
    [
      "from typing import List\n\n\ndef extract_elements(data: List[List[int]], indexes: List[int]) -> List[int]:\n    \"\"\"Returns extracted elements from the given list.\n\n    Args:\n        data (List[List[int]]): given two dimensional list\n        indexes (List[int]): given indexes\n\n    Examples:\n        >>> extract_elements([[1, 2], [3, 4]], [0, 1])\n        [1, 4]\n    \"\"\"\n    return [data[i][j] for i, j in enumerate(indexes)]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2], [3, 4]], [0, 1]))",
      -0.7392578125
    ],
    [
      "from unittest import TestCase\n\n\ndef extract_list(input_list, position):\n    result = []\n    for sublist in input_list:\n        result.append(sublist[position])\n    return result\n\n\nclass TestExtractList(TestCase):\n\n    data = (\n        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, [2, 5, 8]),\n        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, [3, 6, 9]),\n    )\n\n    def test_extract_list(self):\n        for input_list, position, result in self.data:\n            self.assertEqual(extract_list(input_list, position), result)",
      -0.82568359375
    ],
    [
      "def extract_elements(lst, idx):\n    for i in range(len(lst)):\n        if i % idx == 0:\n            yield lst[i]\n\n\nif __name__ == '__main__':\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\n    for i in extract_elements(lst, 2):\n        print(i)",
      -0.85595703125
    ],
    [
      "def extract_every_other(arr):\n    # your code here\n    return [item for sublist in arr for index, item in enumerate(sublist) if index % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    print(extract_every_other([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))",
      -0.85595703125
    ],
    [
      "def extract_elements_from_2d_list(elements: list, list_of_elements: list) -> list:\n    \"\"\"\n    >>> extract_elements_from_2d_list([1,2,3,4], [1,3])\n    [[1, 3], [1, 3], [1, 3], [1, 3]]\n    \"\"\"\n    return [\n        [element for element in sub_list if element in list_of_elements]\n        for sub_list in elements\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "def extract_every_element(lst, element):\n    new_lst = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == element:\n                new_lst.append(lst[i][j])\n    return new_lst\n\n\nprint(extract_every_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8))",
      -0.85595703125
    ],
    [
      "def extract_elements(lst, index):\n    return [row[index] for row in lst]\n\n\nif __name__ == '__main__':\n    lst = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [10, 11, 12]\n    ]\n    print(extract_elements(lst, 2))",
      -0.85595703125
    ],
    [
      "def extract_elements(lst, num):\n    \"\"\"\n    >>> lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> extract_elements(lst, 2)\n    [[3, 6, 9]]\n    >>> extract_elements(lst, 0)\n    [[1, 4, 7]]\n    \"\"\"\n    return [[item[num] for item in lst]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\ndef extract_elements(lst: List[List[int]], index: int) -> List[int]:\n    \"\"\"Returns a list of elements from a given list of lists.\n\n    Args:\n        lst: the list of lists\n        index: the index of the list to extract elements from\n\n    Returns:\n        the list of elements\n    \"\"\"\n    return [row[index] for row in lst]\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(lst, 1))",
      -0.85595703125
    ],
    [
      "def extract_every_second(lst):\n    return [sub_lst[::2] for sub_lst in lst]",
      -0.85693359375
    ],
    [
      "def extract_elements(list, index):\n    return [x[index] for x in list]\n\n#test\nlist = [[1,2,3],[4,5,6],[7,8,9]]\nindex = 1\nprint(extract_elements(list, index))",
      -0.85693359375
    ],
    [
      "def extract_elements(lst, n):\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(lst[i][n])\n\n    return new_list\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(lst, 1))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef extract_elements(matrix: List[List[int]], idx: int) -> List[int]:\n    \"\"\"Returns a list of specified elements from a given 2D matrix.\n\n    Args:\n        matrix (List[List[int]]): input matrix\n        idx (int): index of the element to extract\n\n    Returns:\n        List[int]: list of specified elements\n    \"\"\"\n    return [row[idx] for row in matrix]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      -0.85693359375
    ],
    [
      "def extract_elements(lst, k):\n    \"\"\"\n    >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n    [3, 6]\n    \"\"\"\n    return [lst[i][k - 1] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def extract_elements(lst, elements):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] in elements:\n                result.append(lst[i][j])\n    return result\n\ndef extract_elements_v2(lst, elements):\n    return [item for sublist in lst for item in sublist if item in elements]\n\nprint(extract_elements([[1, 2, 3], [4, 5, 6]], [1, 4]))\nprint(extract_elements_v2([[1, 2, 3], [4, 5, 6]], [1, 4]))",
      -0.85693359375
    ],
    [
      "def extract_elements(list_of_lists, element):\n    return [[item for item in sublist if item == element] for sublist in list_of_lists]\n\n\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8))",
      -0.85693359375
    ],
    [
      "def extract_elem(lst, n):\n    result = []\n    for sublist in lst:\n        result.append(sublist[n])\n    return result\n\n\nprint(extract_elem([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\nprint(extract_elem([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\nprint(extract_elem([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      -0.85693359375
    ],
    [
      "def extract_elements_from_matrix(matrix, row, col):\n    result = []\n    for i in range(len(matrix)):\n        result.append(matrix[i][col])\n    return result\n\n\nprint(extract_elements_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 1))",
      -0.85693359375
    ],
    [
      "def extract_element(matrix, element):\n    return [sublist[element] for sublist in matrix]\n\n\nprint(extract_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))",
      -0.85693359375
    ],
    [
      "def extract_elements(matrix: list, element: int) -> list:\n    \"\"\"Extracts every specified element from a given two dimensional list.\n\n    Args:\n        matrix (list): 2D list to extract elements from\n        element (int): element to extract from matrix\n\n    Returns:\n        list: list with extracted elements\n    \"\"\"\n    if matrix is None or element is None:\n        return []\n\n    return [element for sublist in matrix for element in sublist if element == element]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6]], 3))",
      -0.85693359375
    ],
    [
      "def extract_elements(lst, element):\n    \"\"\"Extract every specified element from a given two dimensional list.\"\"\"\n    result = []\n    for row in lst:\n        for item in row:\n            if item == element:\n                result.append(item)\n    return result\n\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(lst, 8))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def extract_every_nth(list_of_lists, index, n):\n    return [sublist[index::n] for sublist in list_of_lists]\n\n\nif __name__ == '__main__':\n    print(extract_every_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0, 2))",
      -0.85791015625
    ],
    [
      "def extract_elements(lst, index):\n    return [lst[i][index] for i in range(len(lst))]\n\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))",
      -0.85791015625
    ],
    [
      "def extract_elements_from_list(list_to_extract, elements):\n    for item in list_to_extract:\n        for elem in elements:\n            print(item[elem])\n\n\nextract_elements_from_list(\n    [[\"John\", \"Doe\", \"jdoe@example.com\"], [\"Jane\", \"Doe\", \"jdoe@example.com\"]], [0, 1]\n)",
      -0.85791015625
    ],
    [
      "def extract_elements(lst, elem):\n    \"\"\"\n    >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n    [[3], [6], [9]]\n    >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5)\n    [[5]]\n    \"\"\"\n    return [[x[elem]] for x in lst if x[elem]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def extract_elements(lst, row, col):\n    return lst[row][col]\n\n\nprint(extract_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 0, 1))",
      -0.85888671875
    ],
    [
      "def extract_elements(input_list, index):\n    return [x[index] for x in input_list]\n\n\nif __name__ == '__main__':\n    input_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n    print(extract_elements(input_list, 1))",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef extract_every_nth(input_list: List, n: int) -> List:\n    \"\"\"Extract every nth element from a given list.\n\n    Args:\n        input_list (List): List of lists.\n        n (int): Nth element.\n\n    Returns:\n        List: List of nth elements.\n    \"\"\"\n    result = []\n\n    for sublist in input_list:\n        for i in range(0, len(sublist), n):\n            result.append(sublist[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(extract_every_nth([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]], 2))",
      -0.85888671875
    ],
    [
      "def extract_every_nth(list_2d, index, n):\n    return [item[index] for item in list_2d[::n]]\n\n\nif __name__ == '__main__':\n    list_2d = [[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9],\n               [10, 11, 12],\n               [13, 14, 15]]\n\n    print(extract_every_nth(list_2d, 2, 2))",
      -0.85888671875
    ],
    [
      "def extract_element_from_list(my_list, element):\n    result = []\n    for item in my_list:\n        if item == element:\n            result.append(item)\n    return result\n\n\nprint(extract_element_from_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))",
      -0.86083984375
    ],
    [
      "def extract_elements(lst, element):\n    return [item for sublist in lst for item in sublist if item == element]\n\n\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8))",
      -0.86083984375
    ],
    [
      "def extract_elements(matrix, row_index, col_index):\n    return [row[col_index] for row in matrix[row_index]]\n\n\nif __name__ == '__main__':\n    matrix = [[1, 2, 3, 4],\n              [5, 6, 7, 8],\n              [9, 10, 11, 12]]\n    print(extract_elements(matrix, 1, 1))",
      -0.86083984375
    ],
    [
      "from itertools import chain\n\n\ndef extract(lst, n):\n    \"\"\"\n    >>> extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n    [2, 6]\n    \"\"\"\n    return list(chain.from_iterable(row[n - 1] for row in lst))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "def extract(lst, element):\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(lst[i][element])\n    return new_list\n\n\nif __name__ == '__main__':\n    lst = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    print(extract(lst, 1))",
      -0.88720703125
    ],
    [
      "def extract_elements(list_2d: list, element: str) -> list:\n    \"\"\"Returns a list of specified elements from a 2D list.\n\n    Args:\n        list_2d (list): a 2D list to extract elements from\n        element (str): the element to extract from the 2D list\n\n    Returns:\n        list: a list of specified elements from the 2D list\n    \"\"\"\n    # return [\n    #     element for sublist in list_2d for element in sublist if element == element\n    # ]\n    return [\n        element\n        for sublist in list_2d\n        for element in sublist\n        if element == element\n    ]\n\n\nif __name__ == \"__main__\":\n    list_2d = [\n        [\"1\", \"2\", \"3\", \"4\", \"5\"],\n        [\"6\", \"7\", \"8\", \"9\", \"10\"],\n        [\"11\", \"12\", \"13\", \"14\", \"15\"],\n    ]\n    print(extract_elements(list_2d, \"1\"))",
      -0.92626953125
    ],
    [
      "from typing import List\n\n\ndef extract_elements(lst: List[List[int]], index: int) -> List[int]:\n    \"\"\"Returns a list of specified elements.\n\n    Args:\n        lst (List[List[int]]): 2D list\n        index (int): the index of the specified element to extract\n\n    Examples:\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n        [3, 6, 9]\n\n    Returns:\n        List[int]: list of specified elements\n    \"\"\"\n    return [lst[i][index] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      -0.9345703125
    ],
    [
      "def extract_every(list, n):\n    new_list = []\n\n    for i in range(len(list)):\n        for j in range(len(list[i])):\n            if (j + 1) % n == 0:\n                new_list.append(list[i][j])\n\n    return new_list\n\n\nif __name__ == '__main__':\n    list = [[1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20]]\n\n    print(extract_every(list, 2))",
      -1.044921875
    ],
    [
      "def extract_list(list_2d, extract):\n    return [ele[extract] for ele in list_2d]\n\n\nprint(extract_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      -1.072265625
    ],
    [
      "def extract_every_element(matrix, step):\n    \"\"\"\n    >>> extract_every_element([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 3)\n    [[1, 4, 7, 10], [1, 4, 7, 10]]\n    >>> extract_every_element([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 4)\n    [[1, 5, 9], [1, 5, 9]]\n    >>> extract_every_element([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 5)\n    [[1, 6, 10], [1, 6, 10]]\n    >>> extract_every_element([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 6)\n    [[1, 7, 10], [1, 7, 10]]\n    >>> extract_every_element([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 7)\n    [[1, 8], [1, 8]]\n    >>> extract_every_element([[1, 2, 3, 4,",
      -1.09375
    ],
    [
      "def extract_every(lst, n):\n    return [[lst[i][j] for i in range(0, len(lst)) if i % n == 0] for j in range(len(lst[0]))]\n\n\nprint(extract_every([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]], 2))",
      -1.1142578125
    ],
    [
      "def extract_elements_from_list(list_of_lists: list, indices: list) -> list:\n    \"\"\"Extracts every specified element from a given two dimensional list.\n\n    Args:\n        list_of_lists (list): the two dimensional list to extract elements from.\n        indices (list): the list of indices to extract from the list_of_lists.\n\n    Returns:\n        list: the list of extracted elements.\n    \"\"\"\n    return [[list_of_lists[i][j] for j in indices] for i in range(len(list_of_lists))]\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    indices = [0, 2, 3]\n    print(extract_elements_from_list(list_of_lists, indices))",
      -1.1650390625
    ],
    [
      "def extract_element(matrix, elem):\n    result = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == elem:\n                result.append(matrix[i][j])\n    return result\n\n\nmatrix = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12]\n]\n\nprint(extract_element(matrix, 1))",
      -1.3798828125
    ],
    [
      "def extract_elements_from_list(lst, n):\n    return [item[n] for item in lst]\n\n\nif __name__ == '__main__':\n    print(extract_elements_from_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      -1.5556640625
    ],
    [
      "def extract_elements(matrix, elem):\n    return [row[elem] for row in matrix]\n\n\nif __name__ == '__main__':\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [3, 6, 9]\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == []\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == []",
      -1.568359375
    ],
    [
      "from copy import deepcopy\n\n\ndef extract(input_list, element):\n    if not input_list or not element:\n        return []\n    if len(input_list) == 1:\n        return input_list[0] if input_list[0] == element else []\n\n    result = []\n    for row in input_list:\n        for item in row:\n            if item == element:\n                result.append(deepcopy(item))\n\n    return result\n\n\nif __name__ == '__main__':\n    test_list = [[1, 2, 3, 4, 5],\n                 [6, 7, 8, 9, 10],\n                 [11, 12, 13, 14, 15],\n                 [16, 17, 18, 19, 20]]\n\n    assert extract(test_list, 12) == [12]\n    assert extract(test_list, 6) == [6]\n    assert extract(test_list, 10) == [10]\n    assert extract(test_list, 1) == [1]\n    assert extract(test_list, 20) == [20]\n    assert extract(test_list, 100) == []",
      -1.59375
    ],
    [
      "def extract_elements_from_list(lst, element):\n    \"\"\"\n    >>> extract_elements_from_list([[1, 2], [3, 4], [5, 6]], 3)\n    [3, 6]\n    \"\"\"\n    new_list = []\n\n    for i in range(len(lst)):\n        if lst[i][1] == element:\n            new_list.append(lst[i][0])\n\n    return new_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.61328125
    ],
    [
      "from typing import List\n\n\ndef extract_elements(lst: List, index: int) -> List:\n    \"\"\"Returns a list containing every element from a given two dimensional list.\n\n    Args:\n        lst (List): Two dimensional list.\n        index (int): Index of the element to extract.\n\n    Returns:\n        List: List containing every element from a given two dimensional list.\n    \"\"\"\n    new_lst = []\n\n    for i in lst:\n        new_lst.append(i[index])\n\n    return new_lst\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    print(extract_elements(lst, 1))",
      -1.671875
    ],
    [
      "def extract_every(lst: list, element: int) -> list:\n    \"\"\"Return a list containing every `element` from `lst`.\n\n    >>> extract_every([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n    [[3], [6], [9]]\n    >>> extract_every([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4)\n    [[4], [7]]\n    >>> extract_every([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10)\n    []\n    \"\"\"\n    return [[e for e in row if e == element] for row in lst]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.873046875
    ],
    [
      "from typing import List\n\n\ndef extract_element_from_matrix(matrix: List[List[int]], element: int) -> List[int]:\n    \"\"\"Returns a list of elements from given matrix.\n\n    Args:\n        matrix (List[List[int]]): 2-dimensional list of numbers\n        element (int): element to extract\n\n    Returns:\n        List[int]: list of extracted elements\n    \"\"\"\n    result: List[int] = []\n\n    for row in matrix:\n        for col in row:\n            if col == element:\n                result.append(col)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert extract_element_from_matrix(\n        [[1, 1, 1], [2, 2, 2], [3, 3, 3]], 2\n    ) == [2, 2, 2]",
      -1.8994140625
    ],
    [
      "from unittest import TestCase\n\n\ndef extract_elements(lst, elem):\n    return [x.index(elem) for x in lst if elem in x]\n\n\nclass TestExtractElements(TestCase):\n    def test_extract_elements(self):\n        assert extract_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 6) == [1]\n        assert extract_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 1) == [0, 1]\n        assert extract_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3) == [0, 2]\n        assert extract_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 8) == [1]\n        assert extract_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 4) == [0]",
      -2.404296875
    ],
    [
      "from typing import List\n\n\ndef extract_elements(matrix: List[List[int]], index: int) -> List[int]:\n    \"\"\"Extracts the specified elements from a given two dimensional list.\n\n    Args:\n        matrix (List[List[int]]): The two dimensional list.\n        index (int): The index of the element to extract.\n\n    Returns:\n        List[int]: The extracted elements.\n    \"\"\"\n    return [row[index] for row in matrix]\n\n\nif __name__ == \"__main__\":\n    mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(mat, 1))",
      -2.5625
    ],
    [
      "from typing import List\n\n\ndef extract_elements(arr: List[int], elements: List[int]) -> List[int]:\n    \"\"\"Returns a list of extracted elements.\n\n    Args:\n        arr (List[int]): 2D array\n        elements (List[int]): elements to extract\n\n    Returns:\n        List[int]: extracted elements\n    \"\"\"\n    return [item for sublist in arr for item in sublist if item in elements]\n\n\nif __name__ == \"__main__\":\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(arr, [1, 4, 7]))",
      -2.701171875
    ],
    [
      "from typing import List\n\n\ndef extract_elements(matrix: List[List[int]], index: int) -> List[int]:\n    \"\"\"Extracts every element from a given two dimensional list.\n\n    Args:\n        matrix: the two dimensional list from which to extract elements.\n        index: the index of the element to extract.\n\n    Returns:\n        A list containing every nth element from the given two dimensional list.\n    \"\"\"\n    return [element[index] for element in matrix]\n\n\nif __name__ == \"__main__\":\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]",
      -3.546875
    ],
    [
      "def extract_elements_from_matrix(matrix: list, element: int) -> list:\n    \"\"\"Returns a list of elements from a matrix that are equal to the specified element.\n\n    Args:\n        matrix (list): The matrix from which to extract elements.\n        element (int): The element to extract from the matrix.\n\n    Examples:\n        >>> extract_elements_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5)\n        [5, 6]\n    \"\"\"\n    return [row[row.index(element)] for row in matrix if element in row]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5))",
      -3.7109375
    ],
    [
      "from typing import List\n\n\ndef extract_element_from_2d_list(lst: List, element: str) -> List:\n    \"\"\"Returns a list of elements specified from a 2d list.\n\n    Args:\n        lst (List): 2d list\n        element (str): element to extract\n\n    Returns:\n        List: 2d list with specified elements extracted\n    \"\"\"\n    return [[elem for elem in sublist if elem == element] for sublist in lst]\n\n\nif __name__ == \"__main__\":\n    lst = [[\"Monday\", \"Tuesday\", \"Wednesday\"], [\"Thursday\", \"Friday\", \"Saturday\"], [\"Sunday\"]]\n    print(extract_element_from_2d_list(lst, \"Sunday\"))",
      -5.03515625
    ],
    [
      "from typing import List\n\n\ndef extract_elements(arr: List[List[int]], i: int, j: int) -> List[int]:\n    \"\"\"Extract every specified element from a given two dimensional list.\n\n    Args:\n        arr (List[List[int]]): two dimensional list\n        i (int): row index\n        j (int): column index\n\n    Returns:\n        List[int]: a list of every specified element from a given two dimensional list\n\n    Examples:\n        >>> extract_elements([[1, 2, 3], [4, 5, 6]], 1, 2)\n        [6]\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 2)\n        [6, 9]\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 3)\n        [6, 8]\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 4)\n        [6]\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 3)\n        [9]\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 4)\n        [8]\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3, 4)\n        []\n    \"\"\"\n    if i < 0 or j < 0:\n        return []\n\n    return [row[j] for row in arr[:i]]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6]], 1, 2))\n    print(extract_elements([",
      -7.921875
    ],
    [
      "from typing import List\n\n\ndef extract_list(lst: List, elem: int) -> List:\n    \"\"\"Returns a list with the specified element.\n\n    Args:\n        lst (List): List of lists.\n        elem (int): Index of the element to extract.\n\n    Examples:\n        >>> extract_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n        [[3], [6], [9]]\n\n        >>> extract_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n        [[2], [5], [8]]\n    \"\"\"\n    return [[lst[i][elem] for i in range(len(lst))] for _ in range(len(lst[0]))]\n\n\nif __name__ == \"__main__\":\n    print(extract_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))\n    print(extract_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      -9.2421875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}