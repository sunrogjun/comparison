{
  "problem": {
    "task_id": "MBPP/447",
    "prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
    "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
    "test_list": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ],
    "challenge_test_list": [],
    "problem_id": 436
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List, Callable\n\n\ndef cubes(arr: List[int]) -> List[int]:\n    \"\"\"Return a list of cubes of elements in a list.\n\n    Examples:\n        >>> assert cubes([1, 2, 3]) == [1, 8, 27]\n    \"\"\"\n    return [i ** 3 for i in arr]\n\n\n# pylint: disable=invalid-name\ncubes_lambda: Callable[[List[int]], List[int]] = lambda arr: [i ** 3 for i in arr]\n\n\nif __name__ == \"__main__\":\n    print(cubes([1, 2, 3]))\n    print(cubes_lambda([1, 2, 3]))",
      19.171875
    ],
    [
      "def find_cubes(list_of_nums):\n    return list(map(lambda x: x**3, list_of_nums))\n\nif __name__ == '__main__':\n    list_of_nums = [1, 2, 3, 4, 5]\n    print(find_cubes(list_of_nums))",
      17.328125
    ],
    [
      "def cube(n):\n    return n*n*n\n\nmy_list = [1,2,3,4,5]\n\n# lambda function\n\ncube_list = list(map(lambda x: cube(x), my_list))\nprint(cube_list)\n\n# with lambda\ncube_list = list(map(lambda x: x*x*x, my_list))\nprint(cube_list)",
      16.390625
    ],
    [
      "def cube(x):\n    return x**3\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    print(list(map(cube, list1)))\n\n    list2 = [1, 2, 3, 4, 5]\n    print(list(map(lambda x: x**3, list2)))\n\nif __name__ == \"__main__\":\n    main()",
      13.7265625
    ],
    [
      "def cube_list(nums):\n    return list(map(lambda x: x**3, nums))\n\nprint(cube_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\n\ndef cube_list(nums):\n    return list(map(lambda x: x**3, nums))\n\nprint(cube_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\n\ndef cube_list(nums):\n    return list(map(lambda x: x**3, nums))\n\nprint(cube_list([1, 2, 3, 4, 5]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\n\"\"\"\n\ndef cube_list(nums):\n    return list(map(lambda x: x**3, nums))\n\nprint(cube_list([1, 2, 3, 4, 5]))",
      13.578125
    ],
    [
      "def find_cubes(list):\n    return map(lambda x: x ** 3, list)\n\ndef main():\n    print(list(find_cubes([2, 3, 4, 5, 6])))\n\nif __name__ == \"__main__\":\n    main()",
      12.6796875
    ],
    [
      "from functools import reduce\n\n\ndef cubes(lst):\n    return list(map(lambda x: x ** 3, lst))\n\n\ndef cubes_lambda(lst):\n    return list(map(lambda x: x ** 3, lst))\n\n\ndef cubes_reduce(lst):\n    return reduce(lambda x, y: x + [y ** 3], lst, [])\n\n\nif __name__ == \"__main__\":\n    print(cubes([1, 2, 3, 4, 5]))\n    print(cubes_lambda([1, 2, 3, 4, 5]))\n    print(cubes_reduce([1, 2, 3, 4, 5]))",
      12.359375
    ],
    [
      "def find_cube(list_):\n    return list(map(lambda x: x**3, list_))\n\nif __name__ == '__main__':\n    print(find_cube([1, 2, 3, 4, 5]))",
      11.265625
    ],
    [
      "from functools import reduce\n\n\ndef cube_of_elements(list_in: list) -> list:\n    \"\"\"Returns a list of cubes of elements in a list.\n\n    Args:\n        list_in (list): The list to get cubes of elements from.\n\n    Examples:\n        >>> assert cube_of_elements([1, 2, 3]) == [1, 8, 27]\n    \"\"\"\n    return list(map(lambda x: x ** 3, list_in))\n\n\ndef cube_of_elements_lambda(list_in: list) -> list:\n    \"\"\"Returns a list of cubes of elements in a list.\n\n    Args:\n        list_in (list): The list to get cubes of elements from.\n\n    Examples:\n        >>> assert cube_of_elements_lambda([1, 2, 3]) == [1, 8, 27]\n    \"\"\"\n    return list(map(lambda x: x ** 3, list_in))\n\n\ndef cube_of_elements_reduce(list_in: list) -> list:\n    \"\"\"Returns a list of cubes of elements in a list.\n\n    Args:\n        list_in (list): The list to get cubes of elements from.\n\n    Examples:\n        >>> assert cube_of_elements_reduce([1, 2, 3]) == [1, 8, 27]\n    \"\"\"\n    return list(reduce(lambda x, y: x + [y ** 3], list_in, []))\n\n\ndef main():\n    list_in = [1, 2, 3]\n    print(cube_of_elements(list_in))\n    print(cube_of_elements_lambda(list_in))\n    print(cube_of_elements_reduce(list_in))\n\n\nif __name__ == \"__main__\":\n    main()",
      8.734375
    ],
    [
      "from functools import reduce\n\n\ndef cubes(a):\n    return list(map(lambda x: x ** 3, a))\n\n\ndef cubes_lambda(a):\n    return reduce(lambda x, y: x + [y ** 3], a, [])\n\n\ndef main():\n    print(\"cubes:\")\n    a = [1, 2, 3, 4]\n    print(cubes(a))\n    print(\"cubes_lambda:\")\n    print(cubes_lambda(a))\n\n\nif __name__ == \"__main__\":\n    main()",
      8.625
    ],
    [
      "from functools import reduce\n\n\ndef cube_list(numbers: list) -> list:\n    \"\"\"Returns a list of cubes of elements.\n\n    >>> cube_list([1, 2, 3])\n    [1, 8, 27]\n    \"\"\"\n    return [x ** 3 for x in numbers]\n\n\ndef cube_list_using_lambda(numbers: list) -> list:\n    \"\"\"Returns a list of cubes of elements.\n\n    >>> cube_list_using_lambda([1, 2, 3])\n    [1, 8, 27]\n    \"\"\"\n    return list(map(lambda x: x ** 3, numbers))\n\n\ndef cube_list_using_reduce(numbers: list) -> list:\n    \"\"\"Returns a list of cubes of elements.\n\n    >>> cube_list_using_reduce([1, 2, 3])\n    [1, 8, 27]\n    \"\"\"\n    return reduce(lambda x, y: x + [y ** 3], numbers, [])\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n    test_cases = [\n        ([1, 2, 3], [1, 8, 27]),\n        ([4, 5, 6], [64, 125, 216]),\n        ([7, 8, 9], [343, 729, 1216]),\n    ]\n    for test_case in test_cases:\n        print(cube_list(test_case[0]))\n        print(cube_list_using_lambda(test_case[0]))\n        print(cube_list_using_reduce(test_case[0]))\n\n\nif __name__ == \"__main__\":\n    main()",
      8.3125
    ],
    [
      "def cube(num):\n    return num**3\n\n\nlst = [1, 2, 3, 4, 5]\n\nprint([cube(x) for x in lst])\n\nprint(list(map(lambda x: x**3, lst)))\n\nprint(list(map(lambda x: x**3, filter(lambda x: x%2 == 0, lst))))\n\nprint(list(map(lambda x: x**3, filter(lambda x: x%2 == 0, range(1, 11)))))",
      8.0625
    ],
    [
      "from functools import reduce\n\n\ndef cube(x):\n    return x ** 3\n\n\ncubes = [cube(x) for x in range(1, 10)]\nprint(cubes)\n\ncubes_lambda = list(map(lambda x: x ** 3, range(1, 10)))\nprint(cubes_lambda)\n\ncubes_reduce = reduce(lambda x, y: x + [y ** 3], range(1, 10), [])\nprint(cubes_reduce)",
      7.6015625
    ],
    [
      "# Solution 1\ndef find_cubes(numbers):\n    return list(map(lambda x: x ** 3, numbers))\n\n\n# Solution 2\ndef find_cubes_2(numbers):\n    return list(map(lambda x: x ** 3, filter(lambda x: x % 2 == 0, numbers)))\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = find_cubes(nums)\n    result_2 = find_cubes_2(nums)\n    print(result)\n    print(result_2)\n\n\nif __name__ == '__main__':\n    main()",
      6.58984375
    ],
    [
      "def cube_lambda(x):\n    return lambda y: y ** 3\n\ndef cube_list(x):\n    return list(map(lambda y: y ** 3, x))\n\nprint(cube_lambda(2)([2, 3, 4]))\nprint(cube_list([2, 3, 4]))",
      5.8203125
    ],
    [
      "def cube_list(numbers):\n    return list(map(lambda x: x**3, numbers))\n\n\nif __name__ == '__main__':\n    user_input = input('Enter comma separated numbers: ').strip()\n    numbers = [int(item) for item in user_input.split(',')]\n    print(cube_list(numbers))",
      5.3984375
    ],
    [
      "def lambda_cubes(l):\n    return list(map(lambda x: x**3, l))\n\n\ndef main():\n    l = [1, 2, 3, 4]\n    print(f\"List of cubes of elements in {l} is {lambda_cubes(l)}.\")\n\n\nif __name__ == '__main__':\n    main()",
      5.2890625
    ],
    [
      "from functools import reduce\n\n\ndef cube(x):\n    return x * x * x\n\n\ndef cube_list(arr):\n    return list(map(cube, arr))\n\n\ndef cube_lambda(arr):\n    return list(map(lambda x: x ** 3, arr))\n\n\ndef cube_reduce(arr):\n    return reduce(lambda x, y: x * y, arr)\n\n\nif __name__ == \"__main__\":\n    assert cube_list([1, 2, 3]) == [1, 8, 27]\n    assert cube_lambda([1, 2, 3]) == [1, 8, 27]\n    assert cube_reduce([1, 2, 3]) == 27",
      5.07421875
    ],
    [
      "def find_cubes(l):\n    return [x**3 for x in l]\n\n\nprint(find_cubes([1, 2, 3, 4, 5]))",
      4.96875
    ],
    [
      "def cubes(x):\n    return list(map(lambda y: y**3, x))\n\nprint(cubes([1,2,3,4,5]))",
      4.51171875
    ],
    [
      "def find_cubes(lst):\n    return list(map(lambda x: x**3, lst))\n\n\nif __name__ == \"__main__\":\n    print(find_cubes([1, 2, 3, 4]))",
      3.9140625
    ],
    [
      "def cubes(list):\n    return list(map(lambda x: x**3, list))\n\n\nif __name__ == '__main__':\n    print(cubes([1, 2, 3, 4, 5]))",
      3.787109375
    ],
    [
      "# Solution\ndef cube_list(nums):\n    return list(map(lambda x: x**3, nums))\n\n\n# Tests\nprint(cube_list([1, 2, 3, 4]))  # [1, 8, 27, 64]",
      3.767578125
    ],
    [
      "def cube_lambda(lst):\n    return list(map(lambda x: x*x*x, lst))\n\ndef main():\n    lst = [int(x) for x in input(\"Enter list elements: \").split()]\n    print(cube_lambda(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.712890625
    ],
    [
      "def cubes(lst):\n    return list(map(lambda x: x*x*x, lst))\n\ndef main():\n    print(cubes([1, 2, 3]))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.5390625
    ],
    [
      "def find_cube(arr):\n    return [x**3 for x in arr]\n\narr = [1, 2, 3, 4, 5]\nprint(\"Original list:\")\nprint(arr)\nprint(\"Cubes of individual elements in a list:\")\nprint(find_cube(arr))",
      3.53125
    ],
    [
      "cubes = lambda x: [i**3 for i in x]\n\nprint(cubes([1, 2, 3, 4, 5]))",
      3.37890625
    ],
    [
      "def cubes(list):\n    return list(map(lambda x: x**3, list))\n\n\nif __name__ == '__main__':\n    print(cubes([1, 2, 3, 4, 5]))",
      3.19921875
    ],
    [
      "def cube(n):\n    return n*n*n\n\ndef cubes(lst):\n    return list(map(lambda x:cube(x),lst))\n\nif __name__ == '__main__':\n    print(cubes([1,2,3,4,5,6,7]))",
      3.1796875
    ],
    [
      "def cube(num):\n    return num * num * num\n\n\ndef cube_list(nums):\n    return list(map(lambda x: x * x * x, nums))\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4]\n    print(cube_list(nums))",
      2.70703125
    ],
    [
      "def cube_list(list_1):\n    return list(map(lambda x: x**3, list_1))\n\nprint(cube_list([1,2,3,4,5]))",
      2.5859375
    ],
    [
      "def cube(x):\n    return x**3\n\nprint([cube(x) for x in [1,2,3,4]])\n\nlist = [1,2,3,4]\nprint([x**3 for x in list])\n\nprint([x**3 for x in list if x%2==0])",
      2.529296875
    ],
    [
      "def cube(x):\n    return x ** 3\n\nmy_list = [1, 2, 3, 4, 5]\n\n# Using lambda\nprint(list(map(lambda x: x ** 3, my_list)))\n\n# Using normal function\nprint(list(map(cube, my_list)))",
      2.05078125
    ],
    [
      "def lambda_cubes(list):\n    return list(map(lambda x: x**3, list))\n\nlist = [2,3,4,5,6,7,8,9,10]\nprint(lambda_cubes(list))",
      1.966796875
    ],
    [
      "def cube(x):\n    return x**3\n\ndef cube_lambda(x):\n    return (lambda y: y**3)(x)\n\ndef main():\n    # List of numbers\n    list_of_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    # Cube each element using lambda function\n    cubes = list(map(cube_lambda, list_of_num))\n\n    print(\"Cubes of each element in the list using lambda function:\")\n    print(cubes)\n\nif __name__ == \"__main__\":\n    main()",
      1.953125
    ],
    [
      "def cube(x):\n    return x*x*x\n\ncubes = list(map(lambda x:cube(x),[1,2,3,4]))\nprint(cubes)",
      1.9091796875
    ],
    [
      "def cube(x):\n    return x**3\n\ndef cube_lambda(x):\n    return lambda x: x**3\n\ncubes = map(cube, [1,2,3,4,5])\nprint(list(cubes))\n\ncubes_lambda = map(cube_lambda, [1,2,3,4,5])\nprint(list(cubes_lambda))",
      1.90625
    ],
    [
      "def cube(num):\n    return num*num*num\n\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nlst2 = list(map(lambda x: cube(x), lst))\nprint(lst2)",
      1.81640625
    ],
    [
      "def cube(num):\n    return num*num*num\n\ndef cube_list(lst):\n    return list(map(lambda x: cube(x), lst))\n\ndef main():\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    print(cube_list(nums))\n\nif __name__ == \"__main__\":\n    main()",
      1.580078125
    ],
    [
      "def cube_list(nums):\n    return [x ** 3 for x in nums]\n\n\nprint(cube_list([1, 2, 3, 4, 5]))",
      1.5634765625
    ],
    [
      "def cube_of_lambda(numbers):\n    return list(map(lambda x: x**3, numbers))\n\n\nprint(cube_of_lambda([1, 2, 3, 4]))",
      1.45703125
    ],
    [
      "#Solution is:\ndef cube_of_list(nums):\n    return list(map(lambda x:x*x*x,nums))\n\nnums = [1,2,3,4,5,6,7,8,9]\nprint(cube_of_list(nums))",
      1.4443359375
    ],
    [
      "def cube(x):\n    return x*x*x\n\n\ndef cube_lambda(x):\n    return lambda x: x*x*x\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    cube_of_numbers = list(map(cube, numbers))\n    print(cube_of_numbers)\n\n    cube_of_numbers_lambda = list(map(cube_lambda(x=5), numbers))\n    print(cube_of_numbers_lambda)",
      1.21875
    ],
    [
      "\"\"\"Question:\nWrite a function to find cubes of individual elements in a list using lambda function.\nHints:\nUse lambda() to create a lambda function.\nUse map() to apply a lambda function to a list.\nUse ** operator to compute power of a number.\n\n\"\"\"",
      1.1357421875
    ],
    [
      "from functools import reduce\n\ndef lambda_cube(arr):\n    return reduce(lambda x, y: x + y**3, arr, 0)\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(\"Enter the list of numbers: \").split()))\n    print(\"Cubes of individual elements in a list: \", lambda_cube(arr))",
      1.12890625
    ],
    [
      "def cube(x):\n    return x ** 3\n\nlst = [1,2,3,4,5]\n\nresult = list(map(lambda x: cube(x), lst))\n\nprint(result)\n\n\n# Using Lambda Functions with Map() and Filter()\n\ndef cube(x):\n    return x ** 3\n\ndef even(x):\n    return (x % 2 == 0)\n\nlst = [1,2,3,4,5]\n\n# result = list(filter(lambda x: even(x), lst))\n# print(result)\n\n# result = list(map(lambda x: cube(x), lst))\n# print(result)\n\n# result = list(map(lambda x: (cube(x), even(x)), lst))\n# print(result)\n\n# result = list(filter(lambda x: x[1], result))\n# print(result)\n\n# result = list(map(lambda x: x[0], result))\n# print(result)",
      1.068359375
    ],
    [
      "from functools import reduce\n\n\ndef cube_of_list(l):\n    return list(map(lambda x: x*x*x, l))\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5]\n    print(f\"The cubes of {l} are: {cube_of_list(l)}\")\n\n    # reduce is a functional programming function\n    # that combines all elements of a list into a single value\n    # reduce(function, list)\n    # list -> sequence of elements\n    # function -> function that takes two arguments and combines them into one\n    # reduce(function, [1,2,3]) -> reduce(function, [1, 2, 3], 0) -> 1\n    # reduce(function, [1,2,3]) -> reduce(function, [2, 3], 1) -> 6\n    # reduce(function, [1,2,3]) -> reduce(function, [3], 6) -> 27\n    # reduce(function, [1,2,3]) -> 81\n    print(f\"The cubes of {l} are: {reduce(lambda x, y: x*x*x + y*y*y, l)}\")",
      0.9990234375
    ],
    [
      "def cube(x):\n    return x**3\n\ncube_list = list(map(lambda x: cube(x), [1, 2, 3, 4, 5]))\n\nprint(cube_list)",
      0.98486328125
    ],
    [
      "def cube(x):\n    return x*x*x\n\n\ndef cube_all(lst):\n    return list(map(lambda x: cube(x), lst))\n\n\nif __name__ == \"__main__\":\n    print(cube_all([2, 3, 4, 5]))",
      0.849609375
    ],
    [
      "def cube_lambda(lst):\n    return list(map(lambda x: x*x*x, lst))\n\ndef main():\n    print(cube_lambda([1, 2, 3, 4, 5, 6]))\n\nif __name__ == \"__main__\":\n    main()",
      0.580078125
    ],
    [
      "def cube_lambda(num):\n    return lambda x: x**3\n\nif __name__ == '__main__':\n    numbers = [2, 3, 4, 5, 6]\n    cubes = list(map(cube_lambda(2), numbers))\n    print(cubes)",
      0.269287109375
    ],
    [
      "def cube(x):\n    return x**3\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint([cube(x) for x in list])\n\nprint([cube(x) for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x % 2 == 0])\n\nprint([x**3 for x in list if x %",
      0.252197265625
    ],
    [
      "from functools import reduce\n\n\ndef cubes(arr):\n    return [lambda x: x * x * x for x in arr]\n\n\ndef main():\n    print(reduce(lambda x, y: x + y, cubes([1, 2, 3, 4])))\n\n\nif __name__ == '__main__':\n    main()",
      0.1468505859375
    ],
    [
      "def cube(n):\n    return lambda x: x ** n\n\n\ndef main():\n    print(list(map(cube(3), range(1, 11))))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.049407958984375
    ],
    [
      "def cube(x):\n    return x**3\n\ndef cube_lambda(x):\n    return lambda x: x**3\n\nif __name__ == \"__main__\":\n    numbers = [1,2,3,4,5]\n    print(list(map(cube,numbers)))\n    print(list(map(cube_lambda(numbers))))",
      -0.128173828125
    ],
    [
      "def cube(x):\n    return x*x*x\n\n# using lambda function\ncubes = list(map(lambda x:x*x*x, [1,2,3,4,5]))\nprint(cubes)",
      -0.26171875
    ],
    [
      "def cube(x):\n    return x**3\n\ndef lambda_cube(x):\n    return lambda x: x**3\n\ncubes = list(map(cube, [1, 2, 3, 4, 5]))\nprint(cubes)\n\ncubes = list(map(lambda x: x**3, [1, 2, 3, 4, 5]))\nprint(cubes)\n\ncubes = list(map(lambda_cube, [1, 2, 3, 4, 5]))\nprint(cubes)",
      -0.384521484375
    ],
    [
      "def cube(x):\n    return x * x * x\n\n\ndef main():\n    list_input = [1, 2, 3, 4, 5]\n    print(list(map(lambda x: cube(x), list_input)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.703125
    ],
    [
      "def cube_list(nums):\n    return list(map(lambda x: x**3, nums))\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6]\n    print(cube_list(nums))",
      -0.85693359375
    ],
    [
      "\"\"\"Question:\nWrite a function to find cubes of individual elements in a list using lambda function.\nHints:\nUse lambda to create anonymous functions.\nUse list.append() to append the values to a list.\n\n\"\"\"\ndef cube(num):\n    return num*num*num\nlst = [1,2,3,4,5]\ncubes = list(map(lambda x: x**3, lst))\nprint cubes",
      -0.85693359375
    ],
    [
      "def lambda_cubes(nums):\n    return list(map(lambda x: x ** 3, nums))\n\nprint(lambda_cubes([2, 3, 4]))\n\n\"\"\"\nWrite a function to find cubes of individual elements in a list using list comprehension.\n\"\"\"\n\ndef list_comp_cubes(nums):\n    return [x ** 3 for x in nums]\n\nprint(list_comp_cubes([2, 3, 4]))",
      -0.85693359375
    ],
    [
      "def cube(n):\n    return n ** 3\n\ndef find_cube_of_elements(l):\n    return list(map(lambda x: cube(x), l))\n\nif __name__ == '__main__':\n    print(find_cube_of_elements([1, 2, 3, 4, 5]))",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\n\ndef cube_list(lst):\n    return list(map(lambda x: x**3, lst))\n\n\ndef cube_list_lambda(lst):\n    return list(map(lambda x: (lambda y: y**3)(x), lst))\n\n\ndef cube_list_reduce(lst):\n    return reduce(lambda x, y: x + [y**3], lst, [])\n\n\nif __name__ == \"__main__\":\n    print(cube_list_lambda([1, 2, 3, 4, 5]))",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\n\ndef cubes(lst):\n    return [x**3 for x in lst]\n\n\ndef cubes_lambda(lst):\n    return list(map(lambda x: x**3, lst))\n\n\ndef cubes_reduce(lst):\n    return list(reduce(lambda x, y: x + [y**3], lst, []))\n\n\nif __name__ == \"__main__\":\n    print(cubes([1, 2, 3, 4, 5]))\n    print(cubes_lambda([1, 2, 3, 4, 5]))\n    print(cubes_reduce([1, 2, 3, 4, 5]))",
      -0.85693359375
    ],
    [
      "def find_cubes(lst):\n    return list(map(lambda x: x**3, lst))\n\n\nif __name__ == \"__main__\":\n    print(find_cubes([1, 2, 3, 4, 5]))",
      -0.85693359375
    ],
    [
      "def cube_list(l):\n    return list(map(lambda x: x**3, l))\n\ncube_list([1, 2, 3, 4])",
      -0.857421875
    ],
    [
      "def cube(num):\n    return num ** 3\n\nprint(list(map(lambda x: cube(x), [1, 2, 3, 4, 5])))",
      -0.85791015625
    ],
    [
      "\"\"\"Question:\nWrite a function to find cubes of individual elements in a list using lambda function.\nHints:\nUse lambda to write anonymous functions.\nUse map() to apply a function to a list.\n\n\"\"\"",
      -0.85791015625
    ],
    [
      "def cube_list(lst):\n    return list(map(lambda x:x**3, lst))\n\nif __name__ == '__main__':\n    print(cube_list([1,2,3,4,5]))",
      -0.85791015625
    ],
    [
      "def cubes(list):\n    return list(map(lambda x: x**3, list))\n\nprint(cubes([1, 2, 3, 4, 5]))",
      -0.85791015625
    ],
    [
      "\"\"\"Question:\nWrite a function to find cubes of individual elements in a list using lambda function.\nHints:\nUse lambda to create anonymous functions.\nUse map() to apply a function to a list.\n\n\"\"\"",
      -0.85791015625
    ],
    [
      "def cube(x):\n    return x*x*x\n\n\nlst = [1, 2, 3, 4, 5]\n\nresult = map(lambda x: cube(x), lst)\n\nprint(list(result))",
      -0.85791015625
    ],
    [
      "def cube_elements(list):\n    return list(map(lambda x: x*x*x, list))\n\n\ndef main():\n    list = [2, 3, 5, 7, 9]\n    result = cube_elements(list)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def cube(n):\n    return n**3\n\ndef main():\n    l = [1, 2, 3, 4, 5]\n    result = list(map(lambda n: cube(n), l))\n    print(f\"The cubes of elements in the list {l} are {result}\")\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def cube(x):\n    return x**3\n\ncubes = list(map(lambda x: cube(x), [1, 2, 3, 4, 5]))\n\nprint(cubes)",
      -0.85791015625
    ],
    [
      "def lambda_cubes(l):\n    return list(map(lambda x: x**3, l))\n\nl = [2, 3, 4, 5, 6]\nprint(lambda_cubes(l))",
      -0.85791015625
    ],
    [
      "def cube(x):\n    return x*x*x\n\n\nprint(list(map(lambda x: cube(x), [1, 2, 3, 4, 5])))",
      -0.85791015625
    ],
    [
      "def cube(x):\n    return x ** 3\n\nlist = [1, 2, 3, 4, 5]\n\nnew_list = list(map(lambda x: cube(x), list))\nprint(new_list)",
      -0.85791015625
    ],
    [
      "\"\"\"Question:\nWrite a function to find cubes of individual elements in a list using lambda function.\nHints:\nUse lambda to create anonymous functions.\nUse map() to apply a function to a list.\n\n\"\"\"",
      -0.85791015625
    ],
    [
      "def cube(x):\n    return x ** 3\n\ncubes = list(map(lambda x: cube(x), [1, 2, 3, 4]))\nprint(cubes)",
      -0.85791015625
    ],
    [
      "def cubes(nums):\n    return [lambda x: x ** 3 for x in nums]\n\n\nprint(cubes([2, 3, 4]))",
      -0.85791015625
    ],
    [
      "def cubes(x):\n    return [lambda x: x ** 3 for x in x]\n\n\nprint(cubes([1, 2, 3, 4, 5]))",
      -0.85791015625
    ],
    [
      "def cubes(a):\n    return map(lambda x:x**3, a)\n\n\nif __name__ == '__main__':\n    print(list(cubes([1,2,3,4,5])))",
      -0.85791015625
    ],
    [
      "from functools import reduce\n\n\ndef cubes(l: list):\n    return reduce(lambda a, b: a + [b ** 3], l, [])\n\n\ndef main():\n    print(cubes([1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def lambda_cubes(my_list):\n    return list(map(lambda x: x**3, my_list))\n\nprint(lambda_cubes([1,2,3,4,5]))",
      -0.85791015625
    ],
    [
      "from functools import reduce\n\n\ndef cubes(numbers):\n    return list(map(lambda x: x ** 3, numbers))\n\n\ndef cubes_reduce(numbers):\n    return reduce(lambda x, y: x + [y ** 3], numbers, [])\n\n\nif __name__ == \"__main__\":\n    print(cubes([1, 2, 3, 4, 5]))\n    print(cubes_reduce([1, 2, 3, 4, 5]))",
      -0.85888671875
    ],
    [
      "def cube(x):\n    return x**3\n\n\nl = [2, 3, 4, 5, 6, 7]\n\nprint(list(map(cube, l)))",
      -0.85888671875
    ],
    [
      "def cubes(list):\n    return list(map(lambda x: x**3, list))\n\n\nif __name__ == '__main__':\n    print(cubes([2, 3, 4, 5]))",
      -0.85888671875
    ],
    [
      "def cubes(nums):\n    return list(map(lambda x: x ** 3, nums))\n\nprint(cubes([1,2,3,4,5]))",
      -0.8857421875
    ],
    [
      "def cubes(lst):\n    return list(map(lambda x: x**3, lst))\n\nprint(cubes([1,2,3]))",
      -1.1611328125
    ],
    [
      "def cube(num):\n    return num ** 3\n\n\ndef cube_lambda(num):\n    return lambda x: x ** 3\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5]\n\n    for num in nums:\n        print(cube(num))\n\n    print(\"--------\")\n\n    for num in nums:\n        print(cube_lambda(num)(num))\n\n\nif __name__ == '__main__':\n    main()",
      -1.435546875
    ],
    [
      "cubes = lambda lst: [x**3 for x in lst]\n\nprint(cubes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -1.5556640625
    ],
    [
      "from functools import reduce\n\n\ndef cube(x):\n    return x ** 3\n\n\ndef main(my_list):\n    # using map()\n    print(list(map(cube, my_list)))\n\n    # using reduce()\n    print(list(reduce(lambda x, y: x + [y ** 3], my_list, [])))\n\n\nif __name__ == \"__main__\":\n    main([1, 2, 3, 4, 5])",
      -1.5771484375
    ],
    [
      "# Solution\ndef cube_of_list_elements(nums):\n    return list(map(lambda x: x**3, nums))\n\n\n# Tests\ndef test_function(test_case):\n    nums = test_case[0]\n    expected = test_case[1]\n    output = cube_of_list_elements(nums)\n\n    if output == expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([(1, 1), 8])\ntest_function([(1, 8), 729])\ntest_function([(2, 8), 64])\ntest_function([(2, 2), 8])",
      -2.169921875
    ],
    [
      "def cube(x):\n    return x**3\n\ndef cube_lambda(x):\n    return lambda x: x**3\n\nprint(list(map(cube, [1, 2, 3, 4, 5])))\nprint(list(map(cube_lambda(2), [1, 2, 3, 4, 5])))",
      -2.810546875
    ],
    [
      "def cube(x):\n    return x**3\n\ndef cube_lambda(x):\n    return lambda x: x**3\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    print(list(map(cube, list1)))\n    print(list(map(cube_lambda(list1))))\n\nif __name__ == \"__main__\":\n    main()",
      -2.89453125
    ],
    [
      "def cube(x):\n    return x ** 3\n\ndef lambda_cube(x):\n    return lambda x: x ** 3\n\nprint(list(map(cube, [1, 2, 3, 4, 5])))\nprint(list(map(lambda x: x ** 3, [1, 2, 3, 4, 5])))\n\n\"\"\"\nWrite a function to find the sum of all elements in a list using lambda function.\n\"\"\"\n\ndef sum(x):\n    return sum(x)\n\ndef lambda_sum(x):\n    return lambda x: sum(x)\n\nprint(list(map(sum, [[1, 2, 3], [4, 5, 6]])))\nprint(list(map(lambda x: sum(x), [[1, 2, 3], [4, 5, 6]])))",
      -3.158203125
    ],
    [
      "def cube(num):\n    return num * num * num\n\n\ndef cube_lambda(num):\n    return lambda x: x * x * x\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4, 5]\n\n    print(\"List 1: {}\".format(list1))\n    print(\"List 2: {}\".format(list2))\n\n    list1_cubed = list(map(cube, list1))\n    print(\"List 1 cubed: {}\".format(list1_cubed))\n\n    list2_cubed = list(map(cube_lambda(5), list2))\n    print(\"List 2 cubed: {}\".format(list2_cubed))\n\n\nif __name__ == '__main__':\n    main()",
      -3.228515625
    ],
    [
      "from functools import reduce\n\n\ndef cube(x):\n    return x ** 3\n\n\ndef main(l):\n    res = reduce(lambda x, y: x + cube(y), l, 0)\n    return res\n\n\nif __name__ == '__main__':\n    assert cube(2) == 8\n    assert main([2, 3, 4, 5, 6]) == 224",
      -3.390625
    ],
    [
      "from functools import reduce\n\n\ndef cube(n):\n    return n ** 3\n\n\ndef lambda_cube(n):\n    return lambda x: x ** 3\n\n\ndef main():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(f\"Cubes of the numbers in the list {l}: {list(map(cube, l))}\")\n    print(f\"Using lambda: {list(map(lambda_cube(2), l))}\")\n    print(f\"Using reduce: {list(reduce(lambda x, y: x + y, map(lambda_cube(2), l)))}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.978515625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}