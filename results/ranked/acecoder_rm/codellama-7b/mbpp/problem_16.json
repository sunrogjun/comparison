{
  "problem": {
    "task_id": "MBPP/27",
    "prompt": "Write a python function to remove all digits from a list of strings.",
    "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
    "test_list": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ],
    "challenge_test_list": [],
    "problem_id": 16
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def remove_digits(s):\n    \"\"\"\n    >>> remove_digits(['a2', '3c', '4d', 'b5'])\n    ['ac', 'bd']\n    \"\"\"\n    return [x.translate(str.maketrans('', '', '0123456789')) for x in s]\n\n\ndef remove_digits_regex(s):\n    \"\"\"\n    >>> remove_digits_regex(['a2', '3c', '4d', 'b5'])\n    ['ac', 'bd']\n    \"\"\"\n    import re\n\n    return [re.sub(r\"\\d\", \"\", x) for x in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      15.296875
    ],
    [
      "def remove_digits(list_of_strings):\n    \"\"\"\n    Removes all digits from a list of strings\n    \"\"\"\n    for i in range(len(list_of_strings)):\n        list_of_strings[i] = list_of_strings[i].replace('0', '')\n        list_of_strings[i] = list_of_strings[i].replace('1', '')\n        list_of_strings[i] = list_of_strings[i].replace('2', '')\n        list_of_strings[i] = list_of_strings[i].replace('3', '')\n        list_of_strings[i] = list_of_strings[i].replace('4', '')\n        list_of_strings[i] = list_of_strings[i].replace('5', '')\n        list_of_strings[i] = list_of_strings[i].replace('6', '')\n        list_of_strings[i] = list_of_strings[i].replace('7', '')\n        list_of_strings[i] = list_of_strings[i].replace('8', '')\n        list_of_strings[i] = list_of_strings[i].replace('9', '')\n    return list_of_strings",
      14.8828125
    ],
    [
      "def remove_digits(list_of_strings):\n    \"\"\"Remove all digits from a list of strings.\"\"\"\n\n    for i in range(0, len(list_of_strings)):\n        list_of_strings[i] = ''.join(filter(lambda x: not x.isdigit(), list_of_strings[i]))\n\n    return list_of_strings\n\ndef main():\n    \"\"\"Print out remove_digits in action.\"\"\"\n    list_of_strings = ['123abc', 'abc123', 'abc', '123']\n    print(\"List of strings: {0}\".format(list_of_strings))\n    print(\"List of strings with digits removed: {0}\".format(remove_digits(list_of_strings)))\n\nif __name__ == '__main__':\n    main()",
      14.8203125
    ],
    [
      "def remove_digits(list_of_strings):\n    for i in range(len(list_of_strings)):\n        list_of_strings[i] = ''.join([x for x in list_of_strings[i] if not x.isdigit()])\n    return list_of_strings\n\n\ndef main():\n    list_of_strings = [\"123\", \"abc\", \"abc3\", \"a123bc\"]\n    print(remove_digits(list_of_strings))\n\n\nif __name__ == \"__main__\":\n    main()",
      14.8125
    ],
    [
      "def remove_digits(list_of_strings):\n    \"\"\"\n    Removes digits from a list of strings.\n\n    Args:\n       list_of_strings(list): list of strings\n    Returns:\n       list: list of strings with digits removed.\n    \"\"\"\n    return [x.translate(str.maketrans('', '', '0123456789')) for x in list_of_strings]\n\n\ndef test_remove_digits():\n    assert remove_digits(['abc1', 'def2', 'ghi3', 'jkl4']) == ['abc', 'def', 'ghi', 'jkl']\n\n\nif __name__ == '__main__':\n    test_remove_digits()",
      14.265625
    ],
    [
      "from re import sub\n\n\ndef remove_digits(list_of_strings: list) -> list:\n    \"\"\"Remove digits from a list of strings.\"\"\"\n\n    return [sub('[0-9]+', '', i) for i in list_of_strings]\n\n\ndef main():\n    \"\"\"Print out remove_digits in action.\"\"\"\n\n    list_of_strings = ['ab123', 'ab456cd789']\n    print(f\"Input: {list_of_strings}\")\n    print(f\"Output: {remove_digits(list_of_strings)}\")\n\n\nif __name__ == '__main__':\n    main()",
      12.4375
    ],
    [
      "def remove_digits(my_list):\n    return [x.translate(None, \"0123456789\") for x in my_list]\n\n\ndef remove_digits_new(my_list):\n    return [x.replace(\"0\",\"\").replace(\"1\",\"\").replace(\"2\",\"\").replace(\"3\",\"\").replace(\"4\",\"\").replace(\"5\",\"\").replace(\"6\",\"\").replace(\"7\",\"\").replace(\"8\",\"\").replace(\"9\",\"\") for x in my_list]\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"20\", \"12\", \"100\", \"101\", \"1010\"]))\n    print(remove_digits_new([\"20\", \"12\", \"100\", \"101\", \"1010\"]))",
      11.640625
    ],
    [
      "def remove_digits(str_list):\n    new_list = []\n    for i in str_list:\n        new_list.append(i.replace('0','').replace('1','').replace('2','').replace('3','').replace('4','').replace('5','').replace('6','').replace('7','').replace('8','').replace('9',''))\n    return new_list\n\nprint(remove_digits([\"123abc\", \"abc456\", \"abcdef\", \"123456\"]))",
      11.25
    ],
    [
      "def remove_digits(input_list):\n    result = []\n    for item in input_list:\n        result.append(item.translate(str.maketrans('', '', \"0123456789\")))\n    return result\n\nif __name__ == \"__main__\":\n    input_list = [\"hi3\",\"200\",\"0.2\",\"0\",\"12\",\"1200\",\"20\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\"]\n    print(remove_digits(input_list))",
      11.140625
    ],
    [
      "from unittest import TestCase\n\n\ndef remove_digits(strings):\n    return [s.translate(str.maketrans(\"\", \"\", \"0123456789\")) for s in strings]\n\n\nclass TestRemoveDigits(TestCase):\n    data = [\n        ([\"abc\", \"def\", \"gh1\", \"2ij\", \"k3l\"], [\"abc\", \"def\", \"gh\", \"ij\", \"kl\"]),\n        ([\"0\"], []),\n        ([\"0\", \"1\", \"2\", \"3\"], []),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]),\n    ]\n\n    def test_remove_digits(self):\n        for strings, result in self.data:\n            assert remove_digits(strings) == result",
      10.7265625
    ],
    [
      "from re import sub\n\n\ndef remove_digits(data: list) -> list:\n    \"\"\"Remove all digits from a list of strings.\n\n    Args:\n        data (list): list of strings\n\n    Returns:\n        list: list of strings without digits\n    \"\"\"\n    return [sub(\"\\\\d\", \"\", word) for word in data]\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"hello1\", \"2world\", \"3apple\", \"dog5\"]))",
      9.1953125
    ],
    [
      "from re import sub\n\n\ndef remove_digits(s: list) -> list:\n    \"\"\"\n    Removes all digits from a list of strings.\n    >>> remove_digits([\"a1\", \"b1\", \"c1\"])\n    ['a', 'b', 'c']\n    >>> remove_digits([\"a1b1c1\"])\n    ['abc']\n    \"\"\"\n    return [sub(r\"\\d\", \"\", i) for i in s]\n\n\ndef main():\n    assert remove_digits([\"a1\", \"b1\", \"c1\"]) == [\"a\", \"b\", \"c\"]\n    assert remove_digits([\"a1b1c1\"]) == [\"abc\"]\n    print(\"Passed.\")\n\n\nif __name__ == \"__main__\":\n    main()",
      8.6953125
    ],
    [
      "def remove_digits(input_list):\n    result = []\n    for s in input_list:\n        result.append(''.join(c for c in s if not c.isdigit()))\n    return result\n\n\ndef main():\n    print(remove_digits([\"A123\", \"B456\", \"C789\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      7.80078125
    ],
    [
      "def remove_digits(str_list):\n    for i in range(len(str_list)):\n        str_list[i] = \"\".join(c for c in str_list[i] if not c.isdigit())\n    return str_list\n\nif __name__ == \"__main__\":\n    str_list = [\"hello123\", \"12345hi\", \"bye12345\"]\n    print(remove_digits(str_list))",
      6.75
    ],
    [
      "def remove_digits(list_of_str):\n    \"\"\"\n    Remove all digits from list of strings\n    Args:\n       list_of_str(list): list of strings containing digits\n    Returns:\n       list: list of strings with digits removed\n    \"\"\"\n    list_of_str_no_digit = []\n    for str_element in list_of_str:\n        list_of_str_no_digit.append(str_element.translate(str.maketrans('', '', '0123456789')))\n    return list_of_str_no_digit\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = remove_digits(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function((['ab123', 'cd456'], ['ab', 'cd']))\ntest_function((['1234', 'ab1234', '123abc', '121201'], ['', 'ab', 'abc', '1201']))\ntest_function((['112358', '112abc58'], ['', 'abc']))\ntest_function((['a1b2c3', 'a1b2c3d4e5'], ['abc', 'abcde']))\ntest_function((['a1b2c3', 'a1b2c3d4e5', 'a1b2c3d4e5f6g7'], ['abc', 'abcd', 'abcdefg']))\ntest_function((['123456789', '1234567890', '1234567890a'], ['', '', 'a']))\ntest_function((['abc', '123', 'abc123', 'abc123def456'], ['', '', 'abc', 'abcdef']))\ntest_function((['123', 'abc123', 'abc123def456'], ['', 'abc', 'abcdef']))\ntest",
      5.38671875
    ],
    [
      "def remove_digits(l):\n    new_l = []\n    for i in l:\n        new_l.append(i.translate(str.maketrans('','','0123456789')))\n    return new_l\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"hello123\",\"123abc456\",\"a1b2c3\"]))",
      4.91015625
    ],
    [
      "def remove_digits(lst):\n    result = []\n    for i in lst:\n        result.append(i.replace(\"0\", \"\").replace(\"1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\", \"\").replace(\"5\", \"\").replace(\"6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"9\", \"\"))\n    return result\n\n\nprint(remove_digits([\"123\", \"456\", \"789\"]))",
      4.27734375
    ],
    [
      "def remove_digits(list_of_strings):\n    for i in range(len(list_of_strings)):\n        list_of_strings[i] = ''.join(c for c in list_of_strings[i] if not c.isdigit())\n    return list_of_strings\n\n\ndef main():\n    list_of_strings = [\"hello1\", \"2world\", \"3r34acebe23\"]\n    print(\"List of strings: \", list_of_strings)\n    print(\"After removing digits: \", remove_digits(list_of_strings))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.791015625
    ],
    [
      "from re import sub\n\n\ndef remove_digits(lst):\n    for i, s in enumerate(lst):\n        lst[i] = sub(\"[0-9]\", \"\", s)\n\n    return lst\n\n\ndef main():\n    l = [\"123\", \"abc\", \"abc123\"]\n    print(\"Input list:\")\n    print(l)\n    print(\"Output list:\")\n    print(remove_digits(l))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.658203125
    ],
    [
      "def remove_digits(list):\n    return [x for x in list if not any(i.isdigit() for i in x)]\n\nif __name__ == '__main__':\n    list = ['hello123', '999', '0.0', 'hello']\n    print(remove_digits(list))",
      3.169921875
    ],
    [
      "def remove_digits(input_list):\n    return [x.translate(str.maketrans(\"\", \"\", \"0123456789\")) for x in input_list]\n\n\ndef main():\n    print(remove_digits([\"1a\", \"2b\", \"3c\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.8359375
    ],
    [
      "from re import sub\n\n\ndef remove_digits(input_list: list) -> list:\n    \"\"\"Removes all digits from a list of strings.\n\n    Args:\n        input_list (list): list of strings\n\n    Returns:\n        list: list of strings\n    \"\"\"\n    return [sub(\"[0-9]\", \"\", i) for i in input_list]\n\n\ndef main():\n    \"\"\"Main function for test.\"\"\"\n    print(remove_digits([\"ab123\", \"cd45\", \"ef678\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.798828125
    ],
    [
      "def remove_digits(list_of_strings):\n    return [word.strip(\"0123456789\") for word in list_of_strings]\n\nprint(remove_digits([\"123\", \"456\", \"789\"]))\nprint(remove_digits([\"123abc\", \"456\", \"789\"]))\nprint(remove_digits([\"123abc\", \"456\", \"789\", \"123\"]))\nprint(remove_digits([\"123abc\", \"456\", \"789\", \"123\", \"abc\"]))",
      2.7265625
    ],
    [
      "def remove_digits(lst):\n    new_lst = []\n    for i in lst:\n        new_lst.append(\"\".join(j for j in i if not j.isdigit()))\n    return new_lst\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"123\", \"456\", \"789\"]))",
      2.564453125
    ],
    [
      "def remove_digits(list_of_strings: list) -> list:\n    \"\"\"\n    >>> remove_digits(['abc', 'def', 'ghi'])\n    ['abc', 'def', 'ghi']\n    >>> remove_digits(['abc1', 'def2', 'ghi3'])\n    ['abc', 'def', 'ghi']\n    >>> remove_digits(['abc1', 'def2', 'ghi3', ''])\n    ['abc', 'def', 'ghi']\n    \"\"\"\n    return [x.replace(\"\", \"\") for x in list_of_strings]\n\n\ndef remove_digits_regex(list_of_strings: list) -> list:\n    \"\"\"\n    >>> remove_digits_regex(['abc', 'def', 'ghi'])\n    ['abc', 'def', 'ghi']\n    >>> remove_digits_regex(['abc1', 'def2', 'ghi3'])\n    ['abc', 'def', 'ghi']\n    >>> remove_digits_regex(['abc1', 'def2', 'ghi3', ''])\n    ['abc', 'def', 'ghi']\n    \"\"\"\n    import re\n\n    return [re.sub(r\"\\d\", \"\", x) for x in list_of_strings]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.375
    ],
    [
      "def remove_digits(my_list):\n    \"\"\"\n    Removes digits from a list of strings\n\n    >>> remove_digits([\"1234\", \"abcd\", \"4567\"])\n    ['', 'abcd', '']\n    \"\"\"\n    return [x.translate(str.maketrans(\"\", \"\", \"0123456789\")) for x in my_list]\n\n\ndef main():\n    assert (\n        remove_digits([\"1234\", \"abcd\", \"4567\"]) == [\"\", \"abcd\", \"\"]\n    ), \"Function not working\"\n    print(\"All Tests Passed\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
      2.26953125
    ],
    [
      "def remove_digits(lst):\n    for i in range(len(lst)):\n        lst[i] = \"\".join([j for j in lst[i] if not j.isdigit()])\n    return lst\n\ndef main():\n    lst = [\"abc123\",\"a1b2c3\",\"123abc\",\"abc123\"]\n    print(remove_digits(lst))\n\nif __name__ == \"__main__\":\n    main()",
      2.220703125
    ],
    [
      "def remove_digits(string_list):\n    return [str(i).translate(str.maketrans('', '', '0123456789')) for i in string_list]\n\n\nif __name__ == \"__main__\":\n    string_list = [\"string1\", \"string2\", \"string3\"]\n    print(remove_digits(string_list))",
      2.146484375
    ],
    [
      "def remove_digits(string_list):\n    for i in range(len(string_list)):\n        string_list[i] = ''.join(filter(str.isalpha, string_list[i]))\n    return string_list\n\n\nprint(remove_digits([\"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      2.0546875
    ],
    [
      "def remove_digits(lst):\n    new_lst = []\n    for i in lst:\n        new_lst.append(i.replace(\"0\",\"\").replace(\"1\",\"\").replace(\"2\",\"\").replace(\"3\",\"\").replace(\"4\",\"\").replace(\"5\",\"\").replace(\"6\",\"\").replace(\"7\",\"\").replace(\"8\",\"\").replace(\"9\",\"\"))\n    return new_lst",
      1.91015625
    ],
    [
      "def remove_digits(lst):\n    for i in range(len(lst)):\n        lst[i] = \"\".join([c for c in lst[i] if not c.isdigit()])\n    return lst\n\nprint(remove_digits([\"abc123\", \"de12\", \"1234fghi567\", \"123456\"]))",
      1.7099609375
    ],
    [
      "def remove_digits(lst):\n    return [x.replace(\"0\", \"\").replace(\"1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\", \"\").replace(\"5\", \"\").replace(\"6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"9\", \"\") for x in lst]\n\n\nprint(remove_digits([\"1234567890\", \"0987654321\", \"abcdefghijklmnopqrstuvwxyz\"]))",
      1.6435546875
    ],
    [
      "from re import sub\n\n\ndef remove_digits(input_list):\n    \"\"\"\n    Remove all digits from a list of strings.\n    >>> remove_digits(['123', '1', 'abc', '123abc'])\n    ['abc', 'abc']\n    >>> remove_digits(['123', '1', 'abc', '123abc', '123abc'])\n    ['abc', 'abc', 'abc']\n    \"\"\"\n    return [sub(r\"\\d+\", \"\", x) for x in input_list]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.583984375
    ],
    [
      "def remove_digits(string_list):\n    # Iterate through each string in string_list\n    for string in string_list:\n        # Iterate through each character in string\n        for i in range(len(string)):\n            # If character is a digit, remove it\n            if string[i].isdigit():\n                string = string[:i] + string[i+1:]\n    return string_list\n\nif __name__ == \"__main__\":\n    string_list = [\"a1b2c3\", \"123\", \"abc\", \"d1e3f5\"]\n    print(remove_digits(string_list))",
      1.55859375
    ],
    [
      "def remove_digits(list_of_strings):\n    \"\"\"\n    Removes all digits from a list of strings\n    \"\"\"\n    return [str(i).translate(None, \"0123456789\") for i in list_of_strings]\n\n\ndef test_remove_digits():\n    \"\"\"\n    Tests remove_digits function\n    \"\"\"\n    assert remove_digits([\"123\", \"abc\", \"123abc\", \"abc123\", \"123abc123\"]) == [\n        \"\",\n        \"abc\",\n        \"abc\",\n        \"abc\",\n        \"abc\",\n    ]\n    assert remove_digits([\"abc\", \"abc123\", \"abc123abc\"]) == [\n        \"abc\",\n        \"abc\",\n        \"abcabc\",\n    ]\n    assert remove_digits([\"123abc123\", \"abc123abc\", \"123abc\"]) == [\n        \"abcabc\",\n        \"abcabc\",\n        \"abc\",\n    ]\n    assert remove_digits([\"123abc123abc\", \"abc123abc123\", \"abc123\"]) == [\n        \"abcabcabc\",\n        \"abcabcabc\",\n        \"abc\",\n    ]\n    assert remove_digits([\"123abc123abcabc\", \"abc123abc123abc\", \"abc123abc123\"]) == [\n        \"abcabcabcabc\",\n        \"abcabcabcabc\",\n        \"abcabcabc\",\n    ]\n    assert remove_digits([\"abcabcabc\", \"abc123abc123abc\", \"123abc123abcabc\"]) == [\n        \"abcabcabc\",\n        \"abcabcabcabc\",\n        \"abcabcabc\",\n    ]\n    assert remove_digits([\"123abc123abcabc\", \"abc123abc123abcabc\", \"123abc123abcabc\"]) == [\n        \"abcabcabcabc\",\n        \"abcabcabcabc\",\n        \"abcabcabcabc\",\n    ]",
      1.51953125
    ],
    [
      "def remove_digits(list):\n    for i in range(len(list)):\n        list[i] = list[i].replace(str(i), \"\")\n    return list\n\n\n\nprint(remove_digits([\"123\", \"a4b5\", \"12c\"]))",
      1.43359375
    ],
    [
      "from re import sub\n\n\ndef remove_digits(list_str: list) -> list:\n    return [sub(\"[0-9]\", \"\", item) for item in list_str]\n\n\ndef main():\n    list_str = [\"a1b2c3\", \"12d34e4f5\", \"a2b3\"]\n    print(remove_digits(list_str))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.38671875
    ],
    [
      "from re import sub\n\n\ndef remove_digits(strings: list) -> list:\n    \"\"\"Remove all digits from a list of strings.\n\n    Args:\n        strings (list): list of strings\n\n    Returns:\n        list: list of strings\n    \"\"\"\n    return [sub(r\"\\d\", \"\", s) for s in strings]\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"hello1\", \"bye2\", \"welcome3\"]))",
      1.3095703125
    ],
    [
      "def remove_digits(str_list):\n    for i in range(len(str_list)):\n        str_list[i] = \"\".join([x for x in str_list[i] if not x.isdigit()])\n    return str_list\n\n\nprint(remove_digits([\"hello1\", \"2world\", \"3my\", \"4name\", \"is5Aditya\"]))",
      1.158203125
    ],
    [
      "def remove_digits(list_of_strings):\n    new_list = []\n    for string in list_of_strings:\n        new_list.append(''.join([i for i in string if not i.isdigit()]))\n    return new_list\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"hello1\", \"2world\", \"3my\", \"friend3\"]))",
      1.1337890625
    ],
    [
      "def remove_digits(list_of_strings):\n    \"\"\"\n    Remove all digits from a list of strings\n    :param list_of_strings: list\n    :return: list\n    \"\"\"\n    return [x for x in list_of_strings if not any(y.isdigit() for y in x)]\n\n\ndef main():\n    print(remove_digits([\"abc\", \"bca\", \"abc123\", \"123abc\", \"abc123abc\", \"123abc123\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.099609375
    ],
    [
      "from re import sub\n\n\ndef remove_digits(lst):\n    return [sub('[\\d]', '', i) for i in lst]\n\n\ndef main():\n    print(remove_digits([\"123abc\", \"45678ef\", \"99999def\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.005859375
    ],
    [
      "def remove_digits(list_of_strings: list) -> list:\n    \"\"\"Remove all digits from a list of strings.\n\n    Args:\n        list_of_strings (list): list of strings.\n\n    Returns:\n        list: list of strings without digits.\n    \"\"\"\n    return [str(i).translate(str.maketrans(\"\", \"\", \"0123456789\")) for i in list_of_strings]\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"abc\", \"def123\", \"456\"]))",
      0.83984375
    ],
    [
      "def remove_digits(list):\n    result = []\n    for word in list:\n        for letter in word:\n            if letter.isdigit():\n                word = word.replace(letter, \"\")\n        result.append(word)\n    return result\n\nprint(remove_digits([\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      0.81591796875
    ],
    [
      "from re import sub\n\n\ndef remove_digits(list_of_str: list) -> list:\n    \"\"\"Remove all digits from a list of strings.\n\n    Args:\n        list_of_str (list): list of strings\n\n    Returns:\n        list: list of strings\n    \"\"\"\n    return [sub(\"[0-9]\", \"\", s) for s in list_of_str]\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"hello1\", \"1234\", \"hi2\"]))",
      0.669921875
    ],
    [
      "def remove_digits(lst):\n    result = []\n    for i in lst:\n        result.append(i.translate(str.maketrans('','','1234567890')))\n    return result\n\nif __name__ == '__main__':\n    print(\"Enter a list of strings: \")\n    lst = list(map(str, input().split()))\n    print(\"Original list: \", lst)\n    lst = remove_digits(lst)\n    print(\"After removing digits: \", lst)",
      0.352294921875
    ],
    [
      "def remove_digits(s):\n    return [x for x in s if not x.isdigit()]\n\n\nprint(remove_digits([\"1\", \"2\", \"3\", \"4\", \"5\"]))",
      0.2392578125
    ],
    [
      "from re import sub\n\n\ndef remove_digits(strings):\n    for string in strings:\n        yield sub(r\"\\d\", \"\", string)\n\n\ndef main():\n    strings = [\"123\", \"abc\", \"abc123\", \"abc123abc\"]\n    print(list(remove_digits(strings)))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.1849365234375
    ],
    [
      "def remove_digits(list_str):\n    for i in range(len(list_str)):\n        list_str[i] = ''.join([x for x in list_str[i] if not x.isdigit()])\n    return list_str\n\n\ndef main():\n    print(remove_digits([\"a123\", \"b456\", \"c789\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.1475830078125
    ],
    [
      "from re import sub\n\n\ndef remove_digits(l):\n    result = []\n    for i in l:\n        result.append(sub(r\"\\d+\", \"\", i))\n    return result\n\n\ndef main():\n    l = [\"123\", \"abc\", \"123abc\", \"abc123\"]\n    print(\"Original list:\")\n    print(l)\n    print(\"List after removing all digits:\")\n    print(remove_digits(l))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.1473388671875
    ],
    [
      "from re import sub\n\n\ndef remove_digits(strings: list) -> list:\n    \"\"\"Removes all digits from a list of strings\n\n    Args:\n        strings (list): list of strings\n\n    Returns:\n        list: list of strings with digits removed\n    \"\"\"\n    return [sub(\"[0-9]\", \"\", string) for string in strings]\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"123abc\", \"abc123\", \"abc\"]))",
      0.097900390625
    ],
    [
      "def remove_digits(list_of_strings):\n    for index, string in enumerate(list_of_strings):\n        list_of_strings[index] = \"\".join(i for i in string if not i.isdigit())\n\n    return list_of_strings\n\n\ndef main():\n    list_of_strings = [\"abc1\", \"123\", \"456xyz\", \"789\", \"xyz\"]\n    print(list_of_strings)\n    print(remove_digits(list_of_strings))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.0186004638671875
    ],
    [
      "from re import sub\n\n\ndef remove_digits(text):\n    return [sub(r\"\\d\", \"\", i) for i in text]\n\n\nprint(remove_digits([\"hello1\", \"bye2\", \"welcome3\"]))",
      0.016998291015625
    ],
    [
      "def remove_digits(input_list):\n    return [x.translate(str.maketrans(\"\", \"\", \"0123456789\")) for x in input_list]\n\n\ndef main():\n    print(remove_digits([\"1111\", \"2222\", \"3333\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.004169464111328125
    ],
    [
      "def remove_digits(list_of_strings):\n    for item in list_of_strings:\n        new_list = []\n        for char in item:\n            if char.isdigit():\n                continue\n            new_list.append(char)\n        print(\"\".join(new_list))\n\n\nif __name__ == \"__main__\":\n    remove_digits([\"abc123\", \"a1b2c3\", \"abc1\", \"123abc\", \"123\"])",
      -0.0367431640625
    ],
    [
      "def remove_digits(list_of_strings):\n    return [x.translate(str.maketrans('', '', '0123456789')) for x in list_of_strings]\n\n\nprint(remove_digits([\"1a\", \"12\", \"123\", \"1234\", \"12345\"]))",
      -0.1041259765625
    ],
    [
      "def remove_digits(text):\n    return [x.translate(str.maketrans('', '', '0123456789')) for x in text]\n\n\ndef main():\n    text = ['abc123', '456', 'xyz789']\n    print(remove_digits(text))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.295166015625
    ],
    [
      "from typing import List\n\n\ndef remove_digits(s: List[str]) -> List[str]:\n    \"\"\"Remove all digits from a list of strings.\n\n    Args:\n        s (List[str]): list of strings\n\n    Returns:\n        List[str]: list of strings with digits removed\n    \"\"\"\n    return [x.replace(\"0\", \"\").replace(\"1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\", \"\").replace(\"5\", \"\").replace(\"6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"9\", \"\") for x in s]\n\n\nif __name__ == \"__main__\":\n    assert remove_digits([\"123abc\", \"abc456\", \"789xyz\"]) == [\"abc\", \"abc\", \"xyz\"]",
      -0.388916015625
    ],
    [
      "def remove_digits(list_of_strings):\n    return [str.replace(''.join(list_of_strings), '0123456789', '')]\n\n\nprint(remove_digits([\"123abc456\", \"ab123c\", \"12abc\", \"ab123\", \"12abc456\", \"abc123\"]))",
      -0.5185546875
    ],
    [
      "def remove_digits(lst):\n    for i in lst:\n        for j in i:\n            if j.isdigit():\n                lst.remove(i)\n\n\nif __name__ == \"__main__\":\n    lst = [\"20\", \"100\", \"abc\", \"def\"]\n    print(lst)\n    remove_digits(lst)\n    print(lst)",
      -0.51904296875
    ],
    [
      "def remove_digits(string_list):\n    for string in string_list:\n        result = \"\"\n        for char in string:\n            if not char.isdigit():\n                result += char\n        print(result)\n\nif __name__ == '__main__':\n    remove_digits([\"hi23\",\"345hello\",\"5\"])",
      -0.6474609375
    ],
    [
      "from re import sub\n\n\ndef remove_digits(string_list):\n    \"\"\"Return list of strings without digits.\"\"\"\n    if not isinstance(string_list, list):\n        return \"Please pass a list as an argument.\"\n    else:\n        return [sub('[\\d]', '', string) for string in string_list]",
      -0.85693359375
    ],
    [
      "def remove_digits(input_list):\n    return [x.translate(str.maketrans(\"\", \"\", \"0123456789\")) for x in input_list]\n\n\ndef main():\n    print(remove_digits([\"abc\", \"abc1\", \"abc12\", \"abc123\", \"abc1234\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def remove_digits(str_list):\n    for i in str_list:\n        new_str = ''.join([c for c in i if not c.isdigit()])\n        print(new_str)\n\nremove_digits([\"dog\", \"cat\", \"123dog\", \"dog123\"])",
      -0.85693359375
    ],
    [
      "def remove_digits(strings):\n    \"\"\"Return a list of strings with digits removed.\"\"\"\n    return [s.translate(None, \"0123456789\") for s in strings]\n\n\ndef main():\n    \"\"\"Call the function and print the returned result.\"\"\"\n    print(remove_digits([\"123abc\", \"456def\", \"789ghi\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef remove_digits(list_str: List[str]) -> List[str]:\n    \"\"\"Removes all digits from a list of strings.\n\n    Args:\n        list_str (List[str]): list of strings\n\n    Returns:\n        List[str]: list of strings without digits\n    \"\"\"\n    return [x.translate(str.maketrans(\"\", \"\", \"0123456789\")) for x in list_str]\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"123abc\", \"456bcd\", \"789cde\"]))",
      -0.85693359375
    ],
    [
      "from re import sub\n\n\ndef remove_digits(list_str):\n    return [sub(r\"\\d\", \"\", i) for i in list_str]\n\n\ndef main():\n    print(remove_digits([\"123abc\", \"a12bc\", \"abc12\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def remove_digits(lst):\n    new_list = []\n    for item in lst:\n        new_list.append(\"\".join([char for char in item if not char.isdigit()]))\n    return new_list",
      -0.85791015625
    ],
    [
      "def remove_digits(str_list):\n    return [str.replace(\" \", \"\") for str in str_list]\n\n\nprint(remove_digits([\"123\", \"123abc\", \"abc\", \"123abc456\"]))",
      -0.85791015625
    ],
    [
      "def remove_digits(input_list):\n    for i in range(len(input_list)):\n        input_list[i] = ''.join(filter(lambda x: not x.isdigit(), input_list[i]))\n\n    return input_list\n\nif __name__ == \"__main__\":\n    input_list = [\"abc123\", \"b1c123\", \"c123a123\", \"123\"]\n    print(remove_digits(input_list))",
      -0.85791015625
    ],
    [
      "from re import sub\n\n\ndef remove_digits(lst):\n    return [sub(r\"\\d\", \"\", x) for x in lst]\n\n\ndef main():\n    print(remove_digits([\"a1\", \"b2\", \"c3\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def remove_digits(list_of_strings):\n    \"\"\"\n    Removes all digits from a list of strings\n    :param list_of_strings: list of strings\n    :return: list of strings with digits removed\n    \"\"\"\n    return [x for x in list_of_strings if not any(c.isdigit() for c in x)]\n\n\ndef main():\n    \"\"\"Print out remove_digits in action\"\"\"\n    print(\"Removing digits from the following list:\")\n    print(\"['hello123', 'bye456']\")\n    print(\"Produces:\")\n    print(remove_digits(['hello123', 'bye456']))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def remove_digits(list):\n    for i in range(len(list)):\n        list[i] = list[i].replace(\"0\",\"\").replace(\"1\",\"\").replace(\"2\",\"\").replace(\"3\",\"\").replace(\"4\",\"\").replace(\"5\",\"\").replace(\"6\",\"\").replace(\"7\",\"\").replace(\"8\",\"\").replace(\"9\",\"\")\n    return list\n\nlist = [\"0abc\", \"1abc\", \"2abc\", \"3abc\"]\nprint(remove_digits(list))",
      -0.8583984375
    ],
    [
      "def remove_digits(input_list):\n    return [x.translate(str.maketrans('','','0123456789')) for x in input_list]\n\ndef main():\n    print(remove_digits([\"100\", \"110\", \"120\"]))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def remove_digits(strings: list) -> list:\n    \"\"\"\n    >>> remove_digits(['a', '1', 'b', '2', 'c', '3'])\n    ['a', 'b', 'c']\n    \"\"\"\n    return [string for string in strings if not string.isdigit()]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def remove_digits(lst: list) -> list:\n    return [x for x in lst if not any(c.isdigit() for c in x)]",
      -0.8583984375
    ],
    [
      "def remove_digits(l):\n    for i in range(len(l)):\n        l[i] = \"\".join(j for j in l[i] if not j.isdigit())\n    return l\n\nprint(remove_digits([\"abc\", \"d123\", \"4r9\"]))",
      -0.8583984375
    ],
    [
      "def remove_digits(list_of_strings):\n    return [str(word) for word in list_of_strings if not any(letter.isdigit() for letter in word)]\n\nremove_digits(['123', 'a23', 'b11', 'c123'])",
      -0.85888671875
    ],
    [
      "def remove_digits(lst):\n    return [str.replace(str(i), \"\", str(i)) for i in lst]\n\n\ndef remove_digits_improved(lst):\n    return [i.translate(None, \"0123456789\") for i in lst]\n\n\nif __name__ == \"__main__\":\n    lst = [\"abc123\", \"a12bc\", \"123abc\", \"123\"]\n    print(remove_digits(lst))\n    print(remove_digits_improved(lst))",
      -0.85888671875
    ],
    [
      "def remove_digits(strings: list) -> list:\n    \"\"\"\n    >>> remove_digits(['abc123', '123abc', 'ab123c'])\n    ['abc', 'abc', 'abc']\n    \"\"\"\n    return [str.maketrans(\"\", \"\", \"1234567890\") for str in strings]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def remove_digits(list_of_strings):\n    \"\"\"\n    >>> remove_digits(['123abc', 'abc123', 'a1b2c3'])\n    ['abc', 'abc', 'a1b2c3']\n    \"\"\"\n    return [x.translate(str.maketrans('', '', '0123456789')) for x in list_of_strings]\n\ndef remove_digits_2(list_of_strings):\n    \"\"\"\n    >>> remove_digits(['123abc', 'abc123', 'a1b2c3'])\n    ['abc', 'abc', 'a1b2c3']\n    \"\"\"\n    return [x.translate(str.maketrans({'0':'','1':'','2':'','3':'','4':'','5':'','6':'','7':'','8':'','9':''})) for x in list_of_strings]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "def remove_digits(strings):\n    for i in range(len(strings)):\n        strings[i] = \"\".join(filter(lambda x: not x.isdigit(), strings[i]))\n    return strings\n\nif __name__ == \"__main__\":\n    data = [\"123\", \"456\", \"789\"]\n    print(\"Before: \", data)\n    print(\"After: \", remove_digits(data))",
      -0.85888671875
    ],
    [
      "def remove_digits(lst):\n    for i in lst:\n        temp = \"\"\n        for j in i:\n            if j.isalpha():\n                temp += j\n        lst[lst.index(i)] = temp\n    return lst\n\nprint(remove_digits([\"a1bc3de\", \"123a45\", \"1245bc\"]))",
      -0.85888671875
    ],
    [
      "def remove_digits(a):\n    for i in range(len(a)):\n        a[i] = \"\".join(list(filter(lambda x: not x.isdigit(), a[i])))\n    return a\n\n\nprint(remove_digits([\"a1b2c3\", \"12d345\", \"678\"]))",
      -0.92236328125
    ],
    [
      "def remove_digits(mylist):\n    for i in range(len(mylist)):\n        mylist[i] = ''.join([x for x in mylist[i] if not x.isdigit()])\n    return mylist\n\n\nmylist = [\"hello123\", \"999\", \"world\"]\nprint(remove_digits(mylist))",
      -1.36328125
    ],
    [
      "def remove_digits(list_of_strings):\n    return [x for x in list_of_strings if not any(y.isdigit() for y in x)]\n\n\ndef main():\n    list_of_strings = [\"123abc\", \"abc123\", \"abc\", \"123\", \"abc123abc\"]\n    print(f\"Before removing digits: {list_of_strings}\")\n    print(f\"After removing digits: {remove_digits(list_of_strings)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.3994140625
    ],
    [
      "def remove_digits(input_list):\n    \"\"\"\n    >>> remove_digits([\"123\", \"abc\", \"a12bc\", \"123abc\"])\n    ['abc', 'abc', 'abc', 'abc']\n    \"\"\"\n    return [x for x in input_list if not any(c.isdigit() for c in x)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.6103515625
    ],
    [
      "from unittest import TestCase\n\n\ndef remove_digits(strings):\n    return [string for string in strings if not any(char.isdigit() for char in string)]\n\n\nclass TestRemoveDigits(TestCase):\n    def test_one(self):\n        assert remove_digits([\"123abc\", \"abc\", \"123\", \"abc123\", \"123abc123\"]) == [\"abc\", \"abc\", \"abc\"]\n\n    def test_two(self):\n        assert remove_digits([\"123abc\", \"abc\", \"123\", \"abc123\", \"123abc123\", \"abc123abc\"]) == [\"abc\", \"abc\", \"abc\", \"abc\"]\n\n    def test_three(self):\n        assert remove_digits([\"123abc\", \"abc\", \"123\", \"abc123\", \"123abc123\", \"abc123abc\", \"123abc123abc\"]) == [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]",
      -1.6396484375
    ],
    [
      "def remove_digits(my_list: list[str]) -> list[str]:\n    return [word for word in my_list if not any(letter.isdigit() for letter in word)]\n\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"hello\", \"world\", \"1\", \"2\", \"3\", \"4\"]))",
      -1.6552734375
    ],
    [
      "def remove_digits(list_of_strings):\n    for i in range(len(list_of_strings)):\n        list_of_strings[i] = list_of_strings[i].translate(str.maketrans('', '', '0123456789'))\n\n    return list_of_strings\n\n\nif __name__ == '__main__':\n    print(remove_digits([\"one\", \"two\", \"three\", \"four\", \"five\"]))",
      -2.111328125
    ],
    [
      "from unittest import TestCase\n\n\ndef remove_digits(text):\n    return [s.translate(str.maketrans(\"\", \"\", \"0123456789\")) for s in text]\n\n\nclass Test(TestCase):\n    def test_remove_digits(self):\n        text = [\"a1b2c3\", \"12345\", \"abcdef\"]\n        result = [\"ab\", \"2345\", \"abcdef\"]\n\n        self.assertListEqual(remove_digits(text), result)",
      -2.22265625
    ],
    [
      "def remove_digits(lst):\n    return [x.translate(x.maketrans(\"\", \"\", \"0123456789\")) for x in lst]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = remove_digits(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([\"1ab2\", \"2ab3\", \"4a5b\"], [\"ab\", \"ab\", \"ab\"]))\ntest_function(([\"111o\", \"b22\", \"123o4\"], [\"oo\", \"b2\", \"23o4\"]))\ntest_function(([\"\", \"1\"], [\"\", \"\"]))\ntest_function(([\"1o1o1o1\"], [\"o1o1\"]))\ntest_function(([\"1\"], [\"\"]))",
      -2.361328125
    ],
    [
      "def remove_digits(input_list):\n    result = []\n    for i in input_list:\n        result.append(''.join([i for i in str(i) if not i.isdigit()]))\n    return result\n\n\ndef remove_digits_2(input_list):\n    return [re.sub(r'[0-9]', '', i) for i in input_list]\n\n\nprint(remove_digits([\"test1\", \"test2\", \"test3\", \"test4\", \"test5\"]))\nprint(remove_digits_2([\"test1\", \"test2\", \"test3\", \"test4\", \"test5\"]))",
      -2.4296875
    ],
    [
      "def remove_digits(str_list):\n    return [x for x in str_list if x.isalpha()]\n\n\"\"\"\nWrite a python function to remove all characters from a list of strings except alphabets and spaces.\n\"\"\"\n\ndef remove_characters(str_list):\n    return [x for x in str_list if x.isalnum() or x.isspace()]\n\n\n\"\"\"\nWrite a python program to reverse the words of a given sentence.\n\"\"\"\ndef reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])\n\n\n\"\"\"\nWrite a python function to reverse the words of a given sentence.\n\"\"\"\ndef reverse_words_2(sentence):\n    return ' '.join(reversed(sentence.split()))\n\n\n\"\"\"\nWrite a python program to find the longest word in a given sentence.\n\"\"\"\ndef longest_word(sentence):\n    return max(sentence.split(), key=len)\n\n\n\"\"\"\nWrite a python program to count the number of vowels in a given string.\n\"\"\"\ndef count_vowels(string):\n    return len([c for c in string if c.lower() in 'aeiou'])\n\n\n\"\"\"\nWrite a python program to count the number of words in a given sentence.\n\"\"\"\ndef count_words(sentence):\n    return len(sentence.split())\n\n\n\"\"\"\nWrite a python program to count the number of uppercase letters and lowercase letters in a given sentence.\n\"\"\"\ndef count_uppercase_lowercase_letters(sentence):\n    return sentence.count('A'), sentence.count('a'), sentence.count('E'), sentence.count('e'), sentence.count('I'), sentence.count('i'), sentence.count('O'), sentence.count('o'), sentence.count('U'), sentence.count('u')\n\n\n\"\"\"\nWrite a python program to count the number of digits in a given string.\n\"\"\"\ndef count_digits(string):\n    return len([c for c in string if c.isdigit()])\n\n\n\"\"\"\nWrite a python program to remove all the occurr",
      -2.46875
    ],
    [
      "from functools import reduce\n\n\ndef remove_digits(l):\n    return reduce(lambda x, y: x + [y[:y.index(y.find_first_digit())] + y[y.index(y.find_last_digit()) + 1:]], l, [])\n\n\ndef find_first_digit(s):\n    return s.find(next(filter(str.isdigit, s)))\n\n\ndef find_last_digit(s):\n    return s.rfind(next(filter(str.isdigit, reversed(s))))\n\n\nprint(remove_digits([\"ab123\", \"12c\", \"a12bc\", \"123\", \"abc\"]))",
      -3.39453125
    ],
    [
      "from functools import reduce\nfrom re import sub\n\n\ndef remove_digits(lst):\n    return reduce(lambda x, y: sub('[0-9]', '', y) if y else x, lst, lst)\n\n\ndef main():\n    lst = [\"123\", \"a4b\", \"1c\", \"1234\", \"c\", \"123abc\"]\n    print(\"Original list:\")\n    print(lst)\n    lst = remove_digits(lst)\n    print(\"List after removing digits:\")\n    print(lst)\n\n\nif __name__ == '__main__':\n    main()",
      -3.705078125
    ],
    [
      "def remove_digits(s):\n    return [x for x in s if not x.isdigit()]\n\nprint(remove_digits(['1', 'a', '3', '4', 'b']))\nprint(remove_digits(['a', 'b', 'c']))\nprint(remove_digits(['1', '2', '3', 'a', 'b', 'c', 'd']))",
      -4.0
    ],
    [
      "def remove_digits(list_of_strings):\n    return [str(x).replace(\" \", \"\").replace(\"'\", \"\").replace(\",\", \"\").replace(\".\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\") for x in list_of_strings]\n\nif __name__ == \"__main__\":\n    print(remove_digits([\"1,2,3\", \"4,5,6\", \"7,8,9\"]))",
      -4.7578125
    ],
    [
      "def remove_digits(list):\n    \"\"\"\n    >>> remove_digits(['123', '456', '789'])\n    ['', '', '']\n    >>> remove_digits(['123', 'a45', '789'])\n    ['', 'a', '']\n    >>> remove_digits(['123', '456', '789', ''])\n    ['', '', '', '']\n    \"\"\"\n    for index, item in enumerate(list):\n        if item == '':\n            list[index] = ''\n        else:\n            list[index] = item.translate({ord(c): None for c in '0123456789'})\n    return list\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -4.91796875
    ],
    [
      "def remove_digits(list_of_strings: list) -> list:\n    \"\"\"\n    >>> remove_digits(['abc', 'abc1', 'abc12', 'abc123', 'abc1234'])\n    ['abc', 'abc', 'abc', 'abc', 'abc']\n    \"\"\"\n    return [\n        \"\".join(filter(lambda x: not x.isdigit(), string)) for string in list_of_strings\n    ]\n\n\ndef remove_digits_list_comprehension(list_of_strings: list) -> list:\n    \"\"\"\n    >>> remove_digits_list_comprehension(['abc', 'abc1', 'abc12', 'abc123', 'abc1234'])\n    ['abc', 'abc', 'abc', 'abc', 'abc']\n    \"\"\"\n    return [\n        \"\".join(string)\n        for string in list_of_strings\n        if not any(map(str.isdigit, string))\n    ]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -7.13671875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}