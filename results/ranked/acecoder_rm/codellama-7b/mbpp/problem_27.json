{
  "problem": {
    "task_id": "MBPP/38",
    "prompt": "Write a function to find the division of first even and odd number of a given list.",
    "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
    "test_list": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ],
    "challenge_test_list": [],
    "problem_id": 27
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List, Optional\n\n\ndef find_division_of_even_and_odd(numbers: List[int]) -> Optional[int]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): given list\n\n    Returns:\n        Optional[int]: division result\n    \"\"\"\n    odd = []\n    even = []\n\n    for num in numbers:\n        if num % 2:\n            odd.append(num)\n        else:\n            even.append(num)\n\n    if len(odd) > 0 and len(even) > 0:\n        return even[0] / odd[0]\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    assert find_division_of_even_and_odd([1, 2, 3, 4, 5, 6, 7]) == 3.0",
      12.6328125
    ],
    [
      "from typing import List, Optional\n\n\ndef find_division(lst: List[int]) -> Optional[int]:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list\n\n    Returns:\n        Optional[int]: division of first even and odd number of a given list\n    \"\"\"\n    for i, number in enumerate(lst):\n        if number % 2 == 0:\n            for j, number_2 in enumerate(lst[i + 1 :]):\n                if number_2 % 2 != 0:\n                    return number // number_2\n    return None\n\n\nif __name__ == \"__main__\":\n    print(find_division([2, 3, 6, 3, 1]))\n    print(find_division([1, 2, 3, 4, 5]))\n    print(find_division([1, 2, 3, 4, 5, 6]))\n    print(find_division([2, 3, 4, 5, 6, 7]))\n    print(find_division([2, 3, 4, 5, 6, 7, 8]))",
      3.56640625
    ],
    [
      "def even_odd(arr):\n    evens = []\n    odds = []\n    for i in arr:\n        if i%2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    if len(evens) > 0 and len(odds) > 0:\n        return evens[0]/odds[0]\n    else:\n        return None\n\n\nprint(even_odd([1, 2, 3, 4, 5, 6, 7, 8]))",
      2.3515625
    ],
    [
      "from typing import List, Tuple\n\n\ndef find_even_odd_division(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Finds the division of the first even and odd numbers in a list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert find_even_odd_division([1, 2, 3, 4, 5, 6]) == (3, 2)\n        >>> assert find_even_odd_division([2, 4, 6, 8, 10, 12]) == (6, 4)\n    \"\"\"\n    even, odd = 0, 0\n    for number in numbers:\n        if number % 2 == 0:\n            even = number\n            break\n    for number in numbers:\n        if number % 2 != 0:\n            odd = number\n            break\n    return even, odd\n\n\ndef main():\n    print(find_even_odd_division([1, 2, 3, 4, 5, 6]))\n    print(find_even_odd_division([2, 4, 6, 8, 10, 12]))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.904296875
    ],
    [
      "from typing import List, Optional\n\n\ndef find_division(lst: List[int]) -> Optional[int]:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list of numbers\n\n    Returns:\n        Optional[int]: division of first even and odd number\n    \"\"\"\n    if not lst:\n        return None\n\n    odd = 0\n    even = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    return odd / even\n\n\nif __name__ == \"__main__\":\n    assert find_division([1, 2, 3, 4, 10, 11]) == 5\n    assert find_division([3, 4, 5, 6]) is None",
      1.7626953125
    ],
    [
      "def find_division(lst):\n    evens = []\n    odds = []\n\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n\n    if len(evens) > len(odds):\n        return evens[0] / odds[0]\n    else:\n        return odds[0] / evens[0]\n\n\nprint(find_division([1, 2, 3, 4, 10, 11]))",
      1.740234375
    ],
    [
      "from typing import List, Optional\n\n\ndef get_division_of_first_even_and_odd_number(lst: List[int]) -> Optional[float]:\n    \"\"\"Returns division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): list of numbers\n\n    Returns:\n        Optional[float]: division of first even and odd number of a given list.\n    \"\"\"\n    if not lst:\n        return None\n\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n        if even_num and odd_num:\n            break\n\n    return even_num / odd_num if even_num and odd_num else None\n\n\nif __name__ == \"__main__\":\n    print(get_division_of_first_even_and_odd_number([1, 2, 3, 4, 5, 6]))\n    print(get_division_of_first_even_and_odd_number([1, 2, 3, 4, 5, 6, 7]))\n    print(get_division_of_first_even_and_odd_number([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(get_division_of_first_even_and_odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(get_division_of_first_even_and_odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      1.5859375
    ],
    [
      "from typing import List, Optional\n\n\ndef division_of_first_even_and_odd_number(numbers: List[int]) -> Optional[float]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): given list of numbers\n\n    Returns:\n        Optional[float]: division of first even and odd number\n    \"\"\"\n    if not numbers:\n        return None\n\n    if len(numbers) < 2:\n        return None\n\n    even = None\n    odd = None\n    for num in numbers:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n\n        if even and odd:\n            break\n\n    return even / odd\n\n\nif __name__ == \"__main__\":\n    assert division_of_first_even_and_odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.0\n    assert division_of_first_even_and_odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9]) is None",
      1.4560546875
    ],
    [
      "from typing import List\n\n\ndef even_odd_division(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not nums:\n        return 0\n\n    even_sum = odd_sum = 0\n\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    return odd_sum / even_sum\n\n\nif __name__ == \"__main__\":\n    assert even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.5",
      1.294921875
    ],
    [
      "from typing import List\n\n\ndef divide_first_even_odd_numbers(numbers: List[int]) -> int:\n    \"\"\"Return division of first even and odd number in a given list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert divide_first_even_odd_numbers([1, 2, 3, 4]) == 2\n        >>> assert divide_first_even_odd_numbers([1, 2, 3]) == 0\n        >>> assert divide_first_even_odd_numbers([1, 3, 5]) == 0\n    \"\"\"\n    for number in numbers:\n        if number % 2 == 0:\n            for odd_number in numbers:\n                if odd_number % 2 != 0:\n                    return number / odd_number\n            return 0\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(divide_first_even_odd_numbers([1, 2, 3, 4]))",
      1.154296875
    ],
    [
      "from typing import List\n\n\ndef first_even_odd_division(lst: List[int]) -> int:\n    \"\"\"\n    1 2 3 4 5 6 7 8 9 10\n    ^\n\n    Odd numbers: 1, 3, 5, 7, 9\n    Even numbers: 2, 4, 6, 8, 10\n\n    Odd numbers: 1, 3, 5, 7, 9\n    Even numbers: 2, 4, 6, 8, 10\n    \"\"\"\n    odd_numbers = []\n    even_numbers = []\n\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n\n    if len(odd_numbers) < len(even_numbers):\n        return odd_numbers[0] / even_numbers[0]\n\n    return even_numbers[0] / odd_numbers[0]\n\n\nif __name__ == \"__main__\":\n    assert first_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.5\n    assert first_even_odd_division([2, 4, 6, 8, 10]) == 2.0\n    assert first_even_odd_division([1, 3, 5, 7, 9]) == 1.0",
      1.1064453125
    ],
    [
      "from typing import List, Optional\n\n\ndef find_division(lst: List[int]) -> Optional[int]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list\n\n    Returns:\n        Optional[int]: division of first even and odd number\n    \"\"\"\n    odd_num = None\n    even_num = None\n\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 == 1 and odd_num is None:\n            odd_num = num\n\n    if odd_num is None or even_num is None:\n        return None\n\n    return odd_num // even_num\n\n\nif __name__ == \"__main__\":\n    assert find_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n    assert find_division([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert find_division([0, 2, 4, 6, 8, 10]) == 2\n    assert find_division([0, 1, 2, 3, 4, 5]) is None\n    assert find_division([1, 2, 3, 4, 5]) is None\n    assert find_division([1, 2, 3, 4, 5, 6]) is None\n    assert find_division([1, 2, 3, 4, 5, 6, 7]) is None\n    assert find_division([2, 4, 6, 8, 10]) is None\n    assert find_division([2, 4, 6, 8, 10, 12]) == 2",
      0.830078125
    ],
    [
      "from typing import List\n\n\ndef divide(lst: List[int]) -> int:\n    \"\"\"Return the division of first even and odd number of a given list.\n\n    Examples:\n    >>> assert divide([2, 5, 7, 9, 11]) == 2\n    >>> assert divide([10, 20, 30, 40, 50]) == 2\n    \"\"\"\n    if len(lst) < 2:\n        return 1\n\n    if lst[0] % 2 == 0:\n        return lst[0] // lst[1]\n\n    return lst[1] // lst[0]\n\n\ndef divide_naive(lst: List[int]) -> int:\n    \"\"\"Return the division of first even and odd number of a given list.\n\n    Examples:\n    >>> assert divide_naive([2, 5, 7, 9, 11]) == 2\n    >>> assert divide_naive([10, 20, 30, 40, 50]) == 2\n    \"\"\"\n    if len(lst) < 2:\n        return 1\n\n    even, odd = 0, 1\n    while even < len(lst) and lst[even] % 2 == 0:\n        even += 1\n\n    while odd < len(lst) and lst[odd] % 2 != 0:\n        odd += 1\n\n    if even < odd:\n        return lst[even] // lst[odd]\n\n    return lst[odd] // lst[even]\n\n\nif __name__ == \"__main__\":\n    print(divide([2, 5, 7, 9, 11]))\n    print(divide([10, 20, 30, 40, 50]))",
      0.802734375
    ],
    [
      "def find_division(array):\n    if len(array) == 0:\n        return None\n\n    if len(array) == 1:\n        return array[0]\n\n    odd_list = []\n    even_list = []\n\n    for element in array:\n        if element % 2 == 0:\n            even_list.append(element)\n        else:\n            odd_list.append(element)\n\n    if len(even_list) == 0 or len(odd_list) == 0:\n        return None\n\n    return even_list[0] / odd_list[0]\n\n\n# Test cases\nprint(find_division([0, 2, 1, 4, 5]))\nprint(find_division([0, 2, 1]))\nprint(find_division([0, 2]))\nprint(find_division([0, 2, 4]))\nprint(find_division([2, 1, 4]))",
      0.73583984375
    ],
    [
      "from typing import List, Optional\n\n\ndef even_odd_division(numbers: List[int]) -> Optional[float]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    even_sum = odd_sum = 0\n\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n        else:\n            odd_sum += number\n\n    if odd_sum == 0:\n        return None\n\n    return even_sum / odd_sum\n\n\nif __name__ == \"__main__\":\n    assert even_odd_division([2, 2, 2, 2, 1, 1, 1, 1]) == 2\n    assert even_odd_division([1, 1, 1, 1]) is None",
      0.63671875
    ],
    [
      "def divide_evens_and_odds(lst):\n    evens = []\n    odds = []\n    for i in lst:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return (evens, odds)\n\n\nprint(divide_evens_and_odds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      0.2012939453125
    ],
    [
      "def division_of_first_even_odd(lst):\n    if len(lst) < 2:\n        return None\n    for i, num in enumerate(lst):\n        if i % 2 == 0:\n            for j, num2 in enumerate(lst):\n                if j % 2 != 0:\n                    return num / num2\n    return None\n\nprint(division_of_first_even_odd([10, 3, 5, 2, 6]))\nprint(division_of_first_even_odd([10, 3, 5, 2, 6, 2]))",
      0.145263671875
    ],
    [
      "from typing import List\n\n\ndef divide_even_odd(lst: List[int]) -> float:\n    \"\"\"Divide the first even and odd number in a list.\n\n    Args:\n        lst (List[int]): list of integers\n\n    Examples:\n        >>> assert divide_even_odd([1, 2, 3, 4]) == 2.0\n    \"\"\"\n    even_number = 0\n    odd_number = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_number = num\n        else:\n            odd_number = num\n    return odd_number / even_number\n\n\nif __name__ == \"__main__\":\n    print(divide_even_odd([1, 2, 3, 4]))",
      0.141845703125
    ],
    [
      "from typing import List\n\n\ndef division(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not nums:\n        return None\n\n    if len(nums) < 2:\n        return None\n\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            break\n\n    for j in range(len(nums)):\n        if nums[j] % 2 != 0:\n            break\n\n    return nums[i] / nums[j]\n\n\nif __name__ == \"__main__\":\n    assert division([2, 4, 6, 8, 10]) == 2.0\n    assert division([2, 4, 6, 8, 9, 10]) == 2.0\n    assert division([3, 5, 6, 8, 9, 10]) == 3.0",
      0.139892578125
    ],
    [
      "from typing import List\n\n\ndef division(numbers: List) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List length must be greater than 1\")\n\n    first_even_number, first_odd_number = 0, 0\n\n    for number in numbers:\n        if number % 2 == 0:\n            if first_even_number == 0:\n                first_even_number = number\n            else:\n                return first_even_number // number\n\n        elif number % 2 != 0:\n            if first_odd_number == 0:\n                first_odd_number = number\n            else:\n                return first_odd_number // number\n\n    raise ValueError(\"List must contain at least one even and one odd number\")\n\n\nif __name__ == \"__main__\":\n    assert division([1, 2, 3, 4]) == 2",
      -0.1611328125
    ],
    [
      "def division(arr):\n    if len(arr) == 0:\n        return 1\n\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even = arr[i]\n        else:\n            odd = arr[i]\n\n    return even / odd\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(division(arr))",
      -0.26171875
    ],
    [
      "from typing import List\n\n\ndef even_odd_division(numbers: List[int]) -> List[int]:\n    \"\"\"Splits a list of numbers into even and odd and divides them.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert even_odd_division([1, 2, 3, 4]) == [2, 4]\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    if len(even_numbers) > 0:\n        return [even_numbers[0] // odd_numbers[0], odd_numbers[0] // even_numbers[0]]\n    return [0, 0]\n\n\nif __name__ == \"__main__\":\n    print(even_odd_division([1, 2, 3, 4]))",
      -0.27783203125
    ],
    [
      "from typing import List\n\n\ndef find_even_odd_division(input_list: List) -> List:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        input_list (List): list to find the division\n\n    Returns:\n        List: the division of first even and odd number of a given list.\n    \"\"\"\n    if len(input_list) < 2:\n        return []\n\n    even_list = [\n        num for num in input_list if num % 2 == 0 and type(num) == int\n    ]\n\n    if len(even_list) < 1:\n        return []\n\n    even_num = even_list[0]\n\n    odd_list = [\n        num for num in input_list if num % 2 != 0 and type(num) == int\n    ]\n\n    if len(odd_list) < 1:\n        return []\n\n    odd_num = odd_list[0]\n\n    return [even_num, odd_num]\n\n\nif __name__ == \"__main__\":\n    print(find_even_odd_division([3, 4, 6, 7, 8, 10]))\n    print(find_even_odd_division([1, 3, 5, 7, 9]))",
      -0.39453125
    ],
    [
      "from typing import List, Tuple\n\n\ndef get_even_and_odd_division(numbers: List[int]) -> Tuple[float, float]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): given list.\n\n    Examples:\n        >>> assert get_even_and_odd_division([0, 1, 2, 3, 4, 5]) == (2.5, 3.3333333333333335)\n    \"\"\"\n    even, odd = 0, 0\n    for number in numbers:\n        if number % 2 == 0:\n            even += number\n        else:\n            odd += number\n    return even / len(numbers), odd / len(numbers)\n\n\ndef main():\n    print(\"First even and odd number of a given list:\", get_even_and_odd_division([0, 1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.53271484375
    ],
    [
      "def first_even_odd_division(lst):\n    \"\"\"\n    >>> first_even_odd_division([2, 4, 6, 8, 10, 12, 14, 16])\n    (2, 16)\n    \"\"\"\n    return lst[0], lst[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.65283203125
    ],
    [
      "from typing import List, Tuple\n\n\ndef first_even_odd(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"Returns the first even and odd number of a given list.\n\n    Args:\n        arr (List[int]): The list to find even and odd number.\n\n    Examples:\n        >>> first_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        (2, 3)\n        >>> first_even_odd([1, 3, 5, 7, 9, 11])\n        (None, None)\n    \"\"\"\n    # O(1) time complexity\n    even = None\n    odd = None\n\n    for index, num in enumerate(arr):\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n\n        if even and odd:\n            break\n\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    print(first_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(first_even_odd([1, 3, 5, 7, 9, 11]))",
      -0.65771484375
    ],
    [
      "def even_odd_division(arr: list) -> list:\n    \"\"\"Returns the division of first even and odd number of a given list.\n\n    Args:\n        arr (list): given list.\n\n    Examples:\n        >>> even_odd_division([1, 2, 3, 4, 5, 6])\n        [3, 2]\n        >>> even_odd_division([1, 2, 3, 4, 5])\n        [3, 2.5]\n    \"\"\"\n    even, odd = 0, 0\n\n    for i in arr:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n\n    return [even, odd]\n\n\nif __name__ == \"__main__\":\n    print(even_odd_division([1, 2, 3, 4, 5, 6]))\n    print(even_odd_division([1, 2, 3, 4, 5]))",
      -0.71630859375
    ],
    [
      "from typing import List\n\n\ndef division(lst: List) -> int:\n    \"\"\"\n    :param lst: list of integers\n    :return: division of first even and odd number of a given list\n\n    >>> assert division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20\n    \"\"\"\n    return (sum(lst[1::2]) * lst[0]) / sum(lst[::2])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.720703125
    ],
    [
      "def even_odd_division(arr):\n    even_sum = 0\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n        else:\n            odd_sum += arr[i]\n    return even_sum/odd_sum\n\n\nprint(even_odd_division([1, 2, 3, 4, 5]))\nprint(even_odd_division([1, 2, 3, 4, 5, 6]))\nprint(even_odd_division([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.73388671875
    ],
    [
      "from typing import List\n\n\ndef first_even_odd_division(input_list: List[int]) -> List[int]:\n    \"\"\"Returns the division of first even and odd number of a given list.\n\n    Args:\n        input_list (List[int]): the list to check\n\n    Examples:\n        >>> assert first_even_odd_division([10, 2, 5, 3]) == [10, 2]\n        >>> assert first_even_odd_division([1, 2, 3, 4, 5]) == [1, 0]\n        >>> assert first_even_odd_division([10, 2, 5, 3, 4, 1]) == [10, 2]\n    \"\"\"\n    even_division, odd_division = 0, 0\n    for number in input_list:\n        if number % 2 == 0:\n            even_division = number\n        else:\n            odd_division = number\n        if odd_division != 0 and even_division != 0:\n            break\n    return [even_division, odd_division]\n\n\nif __name__ == \"__main__\":\n    print(first_even_odd_division([10, 2, 5, 3]))",
      -0.748046875
    ],
    [
      "from typing import List\n\n\ndef find_division_of_first_even_odd(numbers: List[int]) -> int:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): given list of numbers.\n\n    Examples:\n        >>> assert find_division_of_first_even_odd([1, 2, 3, 4, 5]) == 4\n        >>> assert find_division_of_first_even_odd([1, 2, 3, 4]) == 3\n        >>> assert find_division_of_first_even_odd([1, 2]) == 2\n        >>> assert find_division_of_first_even_odd([1]) == 1\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return numbers[1] // numbers[0]\n    if len(numbers) > 2:\n        return numbers[1] // numbers[0] if numbers[0] % 2 == 0 else numbers[2] // numbers[1]\n\n\nif __name__ == \"__main__\":\n    print(find_division_of_first_even_odd([1, 2, 3, 4, 5]))",
      -0.8134765625
    ],
    [
      "def first_even_odd(numbers):\n    # One liner\n    return (sum(numbers[::2]) / sum(numbers[1::2]))\n\n\n# Driver code\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(first_even_odd(numbers))",
      -0.85693359375
    ],
    [
      "def first_even_odd(lst):\n    even_div = 0\n    odd_div = 0\n\n    for x in lst:\n        if x % 2 == 0:\n            even_div = x\n        else:\n            odd_div = x\n\n    return even_div, odd_div\n\n\nprint(first_even_odd([2, 4, 6, 8, 1, 3, 5, 7]))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef division(lst: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    even_sum, odd_sum = 0, 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    return even_sum // odd_sum\n\n\nif __name__ == \"__main__\":\n    assert division([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2",
      -0.85693359375
    ],
    [
      "from typing import List, Tuple\n\n\ndef first_even_odd(input_list: List[int]) -> Tuple[int, int]:\n    \"\"\"Returns the first even and odd numbers of a given list.\n\n    Args:\n        input_list (List[int]): a list of numbers\n\n    Returns:\n        Tuple[int, int]: the first even and odd numbers\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in input_list:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 == 1 and odd_num is None:\n            odd_num = num\n\n    return even_num, odd_num\n\n\nif __name__ == \"__main__\":\n    print(first_even_odd([1, 2, 3, 4, 5, 6]))",
      -0.85693359375
    ],
    [
      "def even_odd_div(numbers):\n    evens = []\n    odds = []\n    for number in numbers:\n        if number % 2 == 0:\n            evens.append(number)\n        else:\n            odds.append(number)\n    return evens, odds\n\n\nprint(even_odd_div([3, 4, 6, 8, 12]))\nprint(even_odd_div([1, 2, 3, 4, 5, 6]))",
      -0.85791015625
    ],
    [
      "def get_division(arr):\n    even, odd, i = 0, 0, 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            even = arr[i]\n        else:\n            odd = arr[i]\n        i += 1\n    return even / odd\n\n\n# test\narr = [2, 4, 6, 8, 10, 12]\nprint(get_division(arr))",
      -0.85791015625
    ],
    [
      "def find_division(lst):\n    even, odd = [], []\n    for i in range(len(lst)):\n        if i%2==0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return [even[0] / odd[0]]\n\n\nif __name__ == '__main__':\n    print(find_division([10, 12, 6, 7, 8]))",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef get_first_even_odd_division(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for index, number in enumerate(numbers):\n        if index % 2 == 0:\n            continue\n\n        if number == 0:\n            continue\n\n        return number\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert get_first_even_odd_division([1, 3, 4, 5, 2]) == 4\n    assert get_first_even_odd_division([1, 3, 5, 2]) == 2\n    assert get_first_even_odd_division([1, 3, 5]) == -1",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef divide_first_even_odd_number(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    first_even = -1\n    first_odd = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and first_even == -1:\n            first_even = i\n        elif num % 2 != 0 and first_odd == -1:\n            first_odd = i\n\n        if first_even != -1 and first_odd != -1:\n            break\n\n    return arr[first_even] / arr[first_odd]\n\n\nif __name__ == \"__main__\":\n    assert divide_first_even_odd_number([1, 2, 3, 4, 5, 6]) == 2",
      -0.8583984375
    ],
    [
      "from typing import List, Tuple\n\n\ndef find_division(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"Find division of first even and odd number.\n\n    Args:\n        lst (List[int]): given list\n\n    Returns:\n        Tuple[int, int]: division of first even and odd number\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n\n    for idx, num in enumerate(lst):\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n        if idx == 1:\n            break\n\n    return even_sum, odd_sum\n\n\nif __name__ == \"__main__\":\n    assert find_division([5, 2, 7, 4]) == (6, 11)",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef divide_even_odd(lst: List[int]) -> int:\n    \"\"\"Return the division of first even and odd number of a given list.\n\n    Examples:\n        >>> assert divide_even_odd([2, 3, 7, 10]) == 3\n        >>> assert divide_even_odd([2, 3, 7, 10, 20]) == 10\n    \"\"\"\n    if not lst:\n        return 0\n\n    even = 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n\n    return odd / even\n\n\nif __name__ == \"__main__\":\n    print(divide_even_odd([2, 3, 7, 10]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef division(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    odd, even = 0, 0\n\n    for i in arr:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n\n    return even / odd\n\n\nif __name__ == \"__main__\":\n    assert division([2, 4, 5, 6, 7, 10]) == 2.0",
      -0.8583984375
    ],
    [
      "def find_division(nums):\n    if not nums:\n        return 0\n\n    if len(nums) == 1:\n        return nums[0]\n\n    even, odd = 0, 1\n\n    while odd < len(nums):\n        if nums[odd] % 2 == 0:\n            even = nums[odd]\n        else:\n            odd = nums[even]\n\n        odd += 2\n        even += 2\n\n    return even / odd\n\n\nif __name__ == '__main__':\n    print(find_division([1, 2, 3, 4, 5, 6, 7]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef get_division(input_list: List[int]) -> str:\n    \"\"\"Get division of first even and odd number.\n\n    Args:\n        input_list (List[int]): list of numbers\n\n    Returns:\n        str: division of first even and odd number\n    \"\"\"\n    for number in input_list:\n        if number % 2 == 0:\n            even_number = number\n        else:\n            odd_number = number\n            break\n    return str(even_number / odd_number)\n\n\nif __name__ == \"__main__\":\n    assert get_division([5, 2, 3, 6]) == \"3.0\"",
      -0.8583984375
    ],
    [
      "def division(arr):\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even += arr[i]\n        else:\n            odd += arr[i]\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6]\n    print(division(arr))",
      -0.8583984375
    ],
    [
      "from typing import List, Tuple\n\n\ndef division_of_first_even_and_odd_number(numbers: List[int]) -> Tuple[float, float]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): given list of integers\n\n    Examples:\n        >>> assert division_of_first_even_and_odd_number([2, 3, 4, 5, 6]) == (2.0, 3.0)\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n\n    for number in numbers:\n        if number % 2 == 0:\n            even_num = number\n        else:\n            odd_num = number\n\n    return even_num / odd_num, even_num / odd_num\n\n\nif __name__ == \"__main__\":\n    print(division_of_first_even_and_odd_number([2, 3, 4, 5, 6]))",
      -0.87548828125
    ],
    [
      "from typing import List, Optional\n\n\ndef find_division(lst: List[int]) -> Optional[float]:\n    \"\"\"Return division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list\n\n    Examples:\n        >>> assert find_division([2, 3, 4, 5, 6, 7]) == 3.5\n    \"\"\"\n    for idx, value in enumerate(lst):\n        if value % 2:\n            try:\n                return lst[idx + 1] / value\n            except ZeroDivisionError:\n                return None\n\n\nif __name__ == \"__main__\":\n    print(find_division([2, 3, 4, 5, 6, 7]))",
      -0.9228515625
    ],
    [
      "from typing import List\n\n\ndef get_division(numbers: List[int]) -> str:\n    \"\"\"Finds the division of first even and odd number.\n\n    Args:\n        numbers (List[int]): numbers to find the division of first even and odd number\n\n    Examples:\n        >>> assert get_division([4, 2, 7, 5]) == '2 is divided by 4'\n    \"\"\"\n    for number in numbers:\n        if number % 2 == 0:\n            for num in numbers:\n                if num % 2 != 0:\n                    return f\"{num} is divided by {number}\"\n\n\nif __name__ == \"__main__\":\n    print(get_division([4, 2, 7, 5]))",
      -1.1181640625
    ],
    [
      "from typing import List\n\n\ndef find_division(input_list: List[int]) -> int:\n    \"\"\"Finds division of first even and odd number of a given list.\n\n    Args:\n        input_list (List[int]): given list\n\n    Examples:\n        >>> assert find_division([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n        >>> assert find_division([1, 2, 3, 4, 5]) == 0\n        >>> assert find_division([0, 2, 3, 4, 5]) == 0\n        >>> assert find_division([2, 2, 3, 4, 5]) == 2\n    \"\"\"\n    if not input_list:\n        return 0\n\n    if len(input_list) == 1:\n        return 0\n\n    if len(input_list) == 2:\n        return input_list[1] / input_list[0]\n\n    even_number = 0\n    odd_number = 0\n    for index, value in enumerate(input_list):\n        if index % 2 == 0:\n            even_number += value\n        else:\n            odd_number += value\n\n    if even_number == 0:\n        return 0\n\n    return odd_number / even_number\n\n\nif __name__ == \"__main__\":\n    print(find_division([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(find_division([1, 2, 3, 4, 5]))\n    print(find_division([0, 2, 3, 4, 5]))\n    print(find_division([2, 2, 3, 4, 5]))",
      -1.126953125
    ],
    [
      "from typing import List, Tuple\n\n\ndef division_of_first_even_odd_number(lst: List) -> Tuple[int, int]:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        lst (List): given list\n\n    Returns:\n        Tuple[int, int]: the division of first even and odd number of a given list\n    \"\"\"\n\n    if not lst:\n        return None\n\n    if len(lst) == 1:\n        return None\n\n    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in lst if num % 2 == 1]\n\n    if evens and odds:\n        return (evens[0] / odds[0], evens[1] / odds[1])\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    assert division_of_first_even_odd_number([5, 2, 7, 1]) == (2, 7)\n    assert division_of_first_even_odd_number([1, 2, 3, 4]) is None\n    assert division_of_first_even_odd_number([1]) is None",
      -1.345703125
    ],
    [
      "from typing import List\n\n\ndef find_division(numbers: List[int]) -> float:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): given list of numbers\n\n    Examples:\n        >>> assert find_division([5, 2, 3, 6, 1]) == 2.0\n    \"\"\"\n    odd, even = 0, 0\n\n    for number in numbers:\n        if number % 2:\n            odd += number\n        else:\n            even += number\n\n    return odd / even\n\n\nif __name__ == \"__main__\":\n    print(find_division([5, 2, 3, 6, 1]))",
      -1.4267578125
    ],
    [
      "from typing import List\n\n\ndef first_even_odd_division(numbers: List[int]) -> float:\n    \"\"\"Sums first even and odd numbers from a list and divides them.\n\n    Args:\n        numbers (List[int]): a list of numbers\n\n    Examples:\n        >>> assert first_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8]) == 2.5\n    \"\"\"\n    if not numbers:\n        return 0\n\n    even_sum = 0\n    odd_sum = 0\n\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n        else:\n            odd_sum += number\n\n    return even_sum / odd_sum\n\n\nif __name__ == \"__main__\":\n    print(first_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8]))",
      -1.439453125
    ],
    [
      "from typing import List\n\n\ndef divide_even_odd(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    even_sum, odd_sum = 0, 0\n\n    for num in numbers:\n        if num % 2:\n            odd_sum += num\n        else:\n            even_sum += num\n\n    return odd_sum / even_sum\n\n\nif __name__ == \"__main__\":\n    assert divide_even_odd([2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 2\n    assert divide_even_odd([2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1]) == 1.5",
      -1.623046875
    ],
    [
      "from typing import List\n\n\ndef division_of_first_even_odd_number(numbers: List[int]) -> float:\n    \"\"\"Find division of first even and odd number in a list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert division_of_first_even_odd_number([1, 2, 3, 4, 5, 6, 7]) == 3\n        >>> assert division_of_first_even_odd_number([2, 3, 4, 5, 6, 7]) == 1.5\n        >>> assert division_of_first_even_odd_number([3, 4, 5, 6, 7]) == 2\n        >>> assert division_of_first_even_odd_number([4, 5, 6, 7]) == 1.6666666666666667\n        >>> assert division_of_first_even_odd_number([5, 6, 7]) == 2.5\n        >>> assert division_of_first_even_odd_number([6, 7]) == 1.5\n        >>> assert division_of_first_even_odd_number([7]) == 1\n\n    \"\"\"\n    even_number = 0\n    odd_number = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_number = number\n        else:\n            odd_number = number\n        if odd_number != 0 and even_number != 0:\n            break\n\n    return odd_number / even_number\n\n\nif __name__ == \"__main__\":\n    print(division_of_first_even_odd_number([1, 2, 3, 4, 5, 6, 7]))",
      -1.6357421875
    ],
    [
      "from typing import List\n\n\ndef divide_by_first_even_and_odd(lst: List[int]) -> float:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list of integers.\n\n    Examples:\n        >>> assert divide_by_first_even_and_odd([2, 4, 6, 8, 10, 12, 14, 16]) == 2\n        >>> assert divide_by_first_even_and_odd([3, 5, 7, 8, 10, 12, 14, 16]) == 1.5\n        >>> assert divide_by_first_even_and_odd([2, 4, 6, 8, 10, 12, 14, 18]) == 1.5\n    \"\"\"\n    even_index = None\n    odd_index = None\n    for idx, num in enumerate(lst):\n        if num % 2 == 0:\n            even_index = idx\n        else:\n            odd_index = idx\n        if even_index is not None and odd_index is not None:\n            break\n\n    return lst[odd_index] / lst[even_index]\n\n\nif __name__ == \"__main__\":\n    print(divide_by_first_even_and_odd([2, 4, 6, 8, 10, 12, 14, 16]))\n    print(divide_by_first_even_and_odd([3, 5, 7, 8, 10, 12, 14, 16]))\n    print(divide_by_first_even_and_odd([2, 4, 6, 8, 10, 12, 14, 18]))",
      -1.65625
    ],
    [
      "from typing import List, Tuple\n\n\ndef even_odd_division(lst: List) -> Tuple:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        lst (List): The given list.\n\n    Examples:\n        >>> even_odd_division([2, 5, 7, 10])\n        (1.0, 2.5)\n        >>> even_odd_division([2, 5, 7, 11])\n        (None, None)\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    if even_num is not None and odd_num is not None:\n        return even_num / odd_num, odd_num / even_num\n    else:\n        return None, None\n\n\ndef even_odd_division_list_comprehension(lst: List) -> Tuple:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        lst (List): The given list.\n\n    Examples:\n        >>> even_odd_division_list_comprehension([2, 5, 7, 10])\n        (1.0, 2.5)\n        >>> even_odd_division_list_comprehension([2, 5, 7, 11])\n        (None, None)\n    \"\"\"\n    even_num = [num for num in lst if num % 2 == 0]\n    odd_num = [num for num in lst if num % 2 != 0]\n\n    if len(even_num) == 0 or len(odd_num) == 0:\n        return None, None\n    else:\n        return even_num[0] / odd_num[0], odd_num[0] / even_num[0]\n\n\ndef even_odd_division_tuple_unpacking(lst: List) -> Tuple:\n    \"\"\"Finds the division",
      -1.671875
    ],
    [
      "from typing import List\n\n\ndef division(lst: List) -> int:\n    \"\"\"Returns division of first even and odd number of a given list.\n\n    Args:\n        lst (List): given list\n\n    Examples:\n        >>> assert division([1, 2, 3, 4, 5]) == 2\n        >>> assert division([1, 2, 3, 4, 5, 6]) == 3\n        >>> assert division([1, 2, 3, 4, 5, 6, 7]) == 4\n    \"\"\"\n    return 0 if len(lst) == 0 else lst[0] / lst[1]\n\n\nif __name__ == \"__main__\":\n    print(division([1, 2, 3, 4, 5]))\n    print(division([1, 2, 3, 4, 5, 6]))\n    print(division([1, 2, 3, 4, 5, 6, 7]))",
      -1.7412109375
    ],
    [
      "from typing import List\n\n\ndef division_of_first_even_and_odd_number(input_list: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(input_list) < 2:\n        return 0\n\n    even_number = 0\n    odd_number = 0\n\n    for num in input_list:\n        if num % 2 == 0:\n            even_number = num\n        else:\n            odd_number = num\n\n    return odd_number / even_number\n\n\nif __name__ == \"__main__\":\n    assert division_of_first_even_and_odd_number([5, 2, 7, 3]) == 1.5",
      -1.767578125
    ],
    [
      "from typing import List\n\n\ndef first_even_and_odd_division(lst: List[int]) -> float:\n    \"\"\"Returns the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): list of numbers\n\n    Examples:\n        >>> assert first_even_and_odd_division([1, 2, 3, 4, 5, 6]) == 2.0\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even / odd\n\n\nif __name__ == \"__main__\":\n    print(first_even_and_odd_division([1, 2, 3, 4, 5, 6]))",
      -2.01953125
    ],
    [
      "from typing import List, Optional\n\n\ndef get_division(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not lst:\n        return None\n\n    odd, even = 0, 0\n\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even += lst[i]\n        else:\n            odd += lst[i]\n\n    if odd == 0:\n        return None\n\n    return even // odd\n\n\nif __name__ == \"__main__\":\n    assert get_division([2, 3, 4, 5, 6]) == 2\n    assert get_division([2, 3, 4, 5, 6, 7]) is None",
      -2.072265625
    ],
    [
      "from typing import List, Tuple\n\n\ndef first_even_odd_division(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"Sums all even numbers and all odd numbers in a list.\n\n    Args:\n        lst (List[int]): list of numbers\n\n    Examples:\n        >>> assert first_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8]) == (12, 15)\n    \"\"\"\n    return sum(num for num in lst if num % 2 == 0), sum(num for num in lst if num % 2 == 1)\n\n\nif __name__ == \"__main__\":\n    print(first_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8]))",
      -2.1015625
    ],
    [
      "from typing import List\n\n\ndef get_first_odd_even_division(l: List) -> List[float]:\n    \"\"\"Returns the division of first even and odd number of a given list.\n\n    Args:\n        l (List): list of integers\n\n    Examples:\n        >>> assert get_first_odd_even_division([1, 2, 3, 4]) == [2, 4]\n        >>> assert get_first_odd_even_division([5, 6, 7, 8]) == [7, 2]\n        >>> assert get_first_odd_even_division([1, 2, 3, 4, 5]) == [2, 4]\n        >>> assert get_first_odd_even_division([6, 7, 8, 9]) == [8, 2]\n    \"\"\"\n    return [\n        float(l[l.index(next(filter(lambda x: x % 2 != 0, l)))])\n        / float(l[l.index(next(filter(lambda x: x % 2 == 0, l)))])\n    ]\n\n\nif __name__ == \"__main__\":\n    print(get_first_odd_even_division([1, 2, 3, 4]))",
      -2.12109375
    ],
    [
      "def find_division(numbers):\n    even_num = numbers[0]\n    odd_num = numbers[1]\n    for i in numbers:\n        if i % 2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    return even_num / odd_num\n\n\nprint(find_division([1, 2, 3, 4, 10, 11]))\nprint(find_division([1, 3, 5, 7, 9, 11]))",
      -2.162109375
    ],
    [
      "from typing import List, Tuple\n\n\ndef find_division(input_list: List[int]) -> Tuple[int, int]:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        input_list (List[int]): the given list\n\n    Returns:\n        Tuple[int, int]: the division of first even and odd number\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in input_list:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    return even_num, odd_num\n\n\nif __name__ == \"__main__\":\n    print(find_division([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_division([1, 3, 5, 7, 9]))",
      -2.166015625
    ],
    [
      "from typing import List\n\n\ndef even_odd_division(input_list: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    even_sum = odd_sum = 0\n\n    for num in input_list:\n        if num % 2:\n            odd_sum += num\n        else:\n            even_sum += num\n\n    return even_sum / odd_sum\n\n\nif __name__ == \"__main__\":\n    assert even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10 / 1\n    assert even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 14 / 3\n    assert even_odd_division([1, 2, 3, 4, 5, 6, 7, 8]) == 12 / 2",
      -2.267578125
    ],
    [
      "from typing import List, Tuple\n\n\ndef find_division(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Finds division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): given list of integers\n\n    Returns:\n        Tuple[int, int]: division result\n    \"\"\"\n    even, odd = 0, 0\n    for number in numbers:\n        if number % 2 == 0:\n            even += number\n        else:\n            odd += number\n    return odd, even\n\n\nif __name__ == \"__main__\":\n    print(find_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -2.29296875
    ],
    [
      "from typing import List\n\n\ndef first_even_odd_division(input_list: List[int]) -> List[int]:\n    \"\"\"Return first even and odd division of a given list.\n\n    Args:\n        input_list (List[int]): input list\n\n    Examples:\n        >>> assert first_even_odd_division([1, 2, 3, 4]) == [2, 2]\n        >>> assert first_even_odd_division([1, 3, 5, 7]) == [1, 1]\n    \"\"\"\n    even_number = 0\n    odd_number = 0\n\n    for number in input_list:\n        if number % 2 == 0:\n            even_number = number\n        else:\n            odd_number = number\n        if even_number and odd_number:\n            break\n\n    return [even_number, odd_number]\n\n\nif __name__ == \"__main__\":\n    print(first_even_odd_division([1, 2, 3, 4]))\n    print(first_even_odd_division([1, 3, 5, 7]))",
      -2.361328125
    ],
    [
      "def even_odd_division(lst):\n    even_num, odd_num = 0, 0\n    for i in lst:\n        if i % 2 == 0:\n            even_num += i\n        else:\n            odd_num += i\n    return even_num / len(lst), odd_num / len(lst)\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    even_num, odd_num = even_odd_division(lst)\n    print(even_num, odd_num)\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.509765625
    ],
    [
      "from typing import List\n\n\ndef even_odd_division(arr: List[int]) -> int:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        arr (List[int]): given list\n\n    Examples:\n        >>> even_odd_division([1, 2, 3, 4, 5, 6, 7, 8])\n        3\n        >>> even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9])\n        3\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even // odd\n\n\nif __name__ == \"__main__\":\n    print(even_odd_division([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -2.80078125
    ],
    [
      "from typing import List\n\n\ndef first_even_odd_div(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    even_sum, odd_sum = 0, 0\n\n    for i in arr:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n\n    return even_sum / odd_sum\n\n\nif __name__ == \"__main__\":\n    assert first_even_odd_div([1, 2, 3, 4, 5]) == 2",
      -3.2734375
    ],
    [
      "from typing import List\n\n\ndef divide_first_even_odd(lst: List) -> int:\n    \"\"\"Divides the first even and odd numbers of a given list.\n\n    Args:\n        lst (List): list of integers\n\n    Examples:\n        >>> assert divide_first_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n    \"\"\"\n    even = 0\n    odd = 0\n    for element in lst:\n        if element % 2 == 0:\n            even = element\n        else:\n            odd = element\n    return even / odd\n\n\nif __name__ == \"__main__\":\n    print(divide_first_even_odd([1, 2, 3, 4, 5, 6, 7, 8]))",
      -3.30859375
    ],
    [
      "from typing import List, Tuple\n\n\ndef division(arr: List) -> Tuple[int, int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return (0, 0)\n\n    if len(arr) == 1:\n        return (0, 0)\n\n    i = 0\n    j = 1\n\n    while j < len(arr):\n        if arr[i] % 2 == 0:\n            i += 1\n            if arr[j] % 2 == 0:\n                j += 1\n        else:\n            j += 1\n\n    return (arr[i], arr[j])\n\n\nif __name__ == \"__main__\":\n    assert division([1, 2, 3, 4, 5]) == (2, 4)\n    assert division([2, 4, 6, 8, 10]) == (2, 8)\n    assert division([1, 3, 5, 7, 9]) == (0, 0)\n    assert division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2, 8)",
      -3.6328125
    ],
    [
      "def even_odd(l):\n    even_sum = 0\n    odd_sum = 0\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even_sum += l[i]\n        else:\n            odd_sum += l[i]\n    return even_sum/odd_sum\n\n\nif __name__ == \"__main__\":\n    l = [10, 11, 12, 13, 14, 15]\n    print(even_odd(l))",
      -3.751953125
    ],
    [
      "from typing import List, Optional\n\n\ndef find_division_point(nums: List[int]) -> Optional[int]:\n    \"\"\"\n    We will use two pointers, one from the left, and one from the right.\n    The left pointer will be pointing to the first odd number,\n    and the right pointer to the first even number.\n    Then we will check if the right pointer is pointing to the same element\n    as the left pointer. If so, we have found the index of the division point.\n    \"\"\"\n    i, j = 0, len(nums) - 1\n\n    while i < j:\n        while nums[i] % 2 == 0 and i < j:\n            i += 1\n\n        while nums[j] % 2 != 0 and i < j:\n            j -= 1\n\n        if i < j:\n            return i\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert find_division_point([1, 2, 3, 4, 5, 6, 7, 8]) == 3\n    assert find_division_point([1, 2, 3, 4, 5, 6, 7, 8, 9]) is None",
      -4.109375
    ],
    [
      "from typing import List\n\n\ndef find_division(numbers: List[int]) -> float:\n    \"\"\"Find division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert find_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3.5\n    \"\"\"\n    return numbers[\n        [\n            index\n            for index, number in enumerate(numbers)\n            if number % 2 == 0 and index % 2 != 0\n        ][0]\n    ] / numbers[\n        [\n            index\n            for index, number in enumerate(numbers)\n            if number % 2 != 0 and index % 2 == 0\n        ][0]\n    ]\n\n\nif __name__ == \"__main__\":\n    print(find_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -4.140625
    ],
    [
      "from typing import List\n\n\ndef even_odd_division(lst: List[int]) -> int:\n    \"\"\"\n    Find the division of first even and odd number of a given list.\n    :param lst: list of numbers.\n    :return: division value.\n    >>> even_odd_division([1, 2, 3, 4, 5, 6, 7])\n    3\n    \"\"\"\n    even_sum, odd_sum = 0, 0\n    for num in lst:\n        if num % 2:\n            odd_sum += num\n        else:\n            even_sum += num\n    return odd_sum / even_sum\n\n\nif __name__ == \"__main__\":\n    print(even_odd_division([1, 2, 3, 4, 5, 6, 7]))",
      -4.26171875
    ],
    [
      "from typing import List\n\n\ndef find_division(input_list: List) -> int:\n    \"\"\"Find division of first even and odd number.\n\n    Args:\n        input_list (List): list of integers\n\n    Returns:\n        int: division of first even and odd number\n    \"\"\"\n    even = 0\n    odd = 0\n\n    for number in input_list:\n        if number % 2 == 0:\n            even = number\n        else:\n            odd = number\n\n    return even / odd\n\n\nif __name__ == \"__main__\":\n    assert find_division([2, 4, 5, 10]) == 2",
      -4.58203125
    ],
    [
      "from typing import List\n\n\ndef find_division(numbers: List[int]) -> int:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert find_division([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n    \"\"\"\n    odd = numbers[1]\n    even = numbers[0]\n\n    for number in numbers:\n        if number % 2 == 0:\n            even = number\n        else:\n            odd = number\n\n    return odd / even\n\n\nif __name__ == \"__main__\":\n    print(find_division([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -4.58203125
    ],
    [
      "def find_division(lst):\n    if not lst:\n        return None\n\n    if len(lst) == 1:\n        return None\n\n    odd_num = None\n    even_num = None\n    for i, num in enumerate(lst):\n        if i % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num / num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num / num\n\n    return even_num / odd_num\n\n\n# tests\nimport random\nimport string\n\n\ndef generate_list(length):\n    lst = []\n    for _ in range(length):\n        num = random.randint(1, 100)\n        lst.append(num)\n    return lst\n\n\ndef random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\n\nprint(find_division([2, 4, 5, 6, 10, 12]))\nprint(find_division([12, 4, 5, 6, 10, 12]))\nprint(find_division([12, 4, 5, 6, 10]))\nprint(find_division([2, 4, 5, 6, 10]))\nprint(find_division([2, 4, 5, 6]))\nprint(find_division([2, 4, 5]))\nprint(find_division([2, 4]))\nprint(find_division([2]))\nprint(find_division([]))\nprint(find_division([random_string(10) for _ in range(10)]))\nprint(find_division(generate_list(100)))",
      -4.6875
    ],
    [
      "from typing import List\n\n\ndef even_odd_division(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    even_sum = odd_sum = 0\n\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n        else:\n            odd_sum += number\n\n    return [even_sum, odd_sum]\n\n\nif __name__ == \"__main__\":\n    assert even_odd_division([2, 5, 6, 8, 11, 13, 15]) == [22, 15]",
      -4.7421875
    ],
    [
      "from typing import List\n\n\ndef find_division_of_first_even_odd(arr: List[int]) -> int:\n    \"\"\"Find division of first even and odd number.\n\n    Args:\n        arr (List[int]): list of integers\n\n    Examples:\n        >>> assert find_division_of_first_even_odd([10, 11, 15, 5, 6, 3]) == 15\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n\n    for num in arr:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    return even_num // odd_num\n\n\nif __name__ == \"__main__\":\n    print(find_division_of_first_even_odd([10, 11, 15, 5, 6, 3]))",
      -5.36328125
    ],
    [
      "from typing import List\n\n\ndef division_of_first_even_and_odd_number(lst: List[int]) -> float:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): list of integers\n\n    Examples:\n        >>> assert division_of_first_even_and_odd_number([1, 2, 3, 4, 5]) == 2\n        >>> assert division_of_first_even_and_odd_number([10, 10, 10, 10]) == 10\n        >>> assert division_of_first_even_and_odd_number([10, 10, 10, 20]) == 2\n    \"\"\"\n    odd_num: int = lst[0]\n    even_num: int = lst[1]\n\n    return odd_num / even_num\n\n\nif __name__ == \"__main__\":\n    print(division_of_first_even_and_odd_number([1, 2, 3, 4, 5]))\n    print(division_of_first_even_and_odd_number([10, 10, 10, 10]))\n    print(division_of_first_even_and_odd_number([10, 10, 10, 20]))",
      -5.73828125
    ],
    [
      "def first_even_odd(l):\n    # Create a new list for storing even and odd numbers\n    even = []\n    odd = []\n    # Loop through the list and append even and odd numbers to the respective list\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    # Check if the lists are empty and return the division of the first two numbers\n    if len(even) == 0:\n        return odd[0] / even[0]\n    if len(odd) == 0:\n        return even[0] / odd[0]\n    # If both lists are not empty, return the division of the first two numbers of each list\n    return even[0] / odd[0], odd[0] / even[0]\n\nfirst_even_odd([1, 2, 3, 4, 5, 6, 7])",
      -5.96484375
    ],
    [
      "from typing import List\n\n\ndef even_odd_division(nums: List[int]) -> List[int]:\n    \"\"\"Finds the division of first even and odd number.\n\n    Args:\n        nums (List[int]): input list of numbers\n\n    Examples:\n        >>> even_odd_division([1, 2, 3, 4, 5])\n        [0, 0]\n        >>> even_odd_division([1, 2, 3, 4, 5, 6])\n        [1, 2]\n        >>> even_odd_division([1, 2, 3, 4, 5, 6, 7])\n        [1, 2]\n        >>> even_odd_division([1, 2, 3, 4, 5, 6, 7, 8])\n        [2, 4]\n    \"\"\"\n    even_index, odd_index = -1, -1\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_index = i\n        else:\n            odd_index = i\n    return [nums[even_index] // nums[odd_index], nums[odd_index] // nums[even_index]]\n\n\ndef even_odd_division_opt(nums: List[int]) -> List[int]:\n    \"\"\"Finds the division of first even and odd number.\n\n    Args:\n        nums (List[int]): input list of numbers\n\n    Examples:\n        >>> even_odd_division_opt([1, 2, 3, 4, 5])\n        [0, 0]\n        >>> even_odd_division_opt([1, 2, 3, 4, 5, 6])\n        [1, 2]\n        >>> even_odd_division_opt([1, 2, 3, 4, 5, 6, 7])\n        [1, 2]\n        >>> even_odd_division_opt([1, 2, 3, 4, 5,",
      -6.00390625
    ],
    [
      "from typing import List, Tuple\n\n\ndef division(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert division([2, 4, 8, 10, 12]) == (2, 2)\n        >>> assert division([2, 4, 8, 10, 12, 14, 16]) == (2, 2)\n        >>> assert division([2, 4, 8, 10, 12, 14, 16, 18]) == (2, 3)\n    \"\"\"\n    odd_index = None\n    even_index = None\n\n    for index, number in enumerate(numbers):\n        if not number % 2:\n            even_index = index\n        else:\n            odd_index = index\n\n    return numbers[odd_index], numbers[even_index]\n\n\nif __name__ == \"__main__\":\n    print(division([2, 4, 8, 10, 12]))\n    print(division([2, 4, 8, 10, 12, 14, 16]))\n    print(division([2, 4, 8, 10, 12, 14, 16, 18]))",
      -6.0859375
    ],
    [
      "from typing import List, Tuple\n\n\ndef find_division(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list\n\n    Examples:\n        >>> assert find_division([1, 2, 3, 4, 5]) == (2, 4)\n        >>> assert find_division([1, 2, 3, 4, 5, 6]) == (2, 4)\n        >>> assert find_division([1, 2, 3, 4, 5, 6, 7]) == (2, 5)\n    \"\"\"\n    i = 0\n    while i < len(lst) and lst[i] % 2 == 1:\n        i += 1\n    if i < len(lst):\n        return (lst[i], lst[i + 1])\n    return (None, None)\n\n\nif __name__ == \"__main__\":\n    print(find_division([1, 2, 3, 4, 5]))\n    print(find_division([1, 2, 3, 4, 5, 6]))\n    print(find_division([1, 2, 3, 4, 5, 6, 7]))",
      -6.26953125
    ],
    [
      "from typing import List, Tuple\n\n\ndef first_even_odd_division(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"Returns the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list of integers\n\n    Examples:\n        >>> first_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8])\n        (2, 3)\n        >>> first_even_odd_division([1, 2, 3, 4, 5, 6, 7])\n        (2, 4)\n    \"\"\"\n    even_index = 0\n    odd_index = 0\n\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even_index = i\n        else:\n            odd_index = i\n\n    return lst[even_index] // lst[odd_index], lst[even_index] % lst[odd_index]\n\n\ndef first_even_odd_division_pythonic(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"Returns the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list of integers\n\n    Examples:\n        >>> first_even_odd_division_pythonic([1, 2, 3, 4, 5, 6, 7, 8])\n        (2, 3)\n        >>> first_even_odd_division_pythonic([1, 2, 3, 4, 5, 6, 7])\n        (2, 4)\n    \"\"\"\n    return (lst[lst[::2].index(min(lst[::2]))] // lst[lst[1::2].index(min(lst[1::2]))],\n            lst[lst[::2].index(min(lst[::2]))] % lst[lst[1::2].index(min(lst[1::2]))])\n\n\ndef first_even_odd_division_python",
      -6.84375
    ],
    [
      "from typing import List\n\n\ndef first_even_odd_division(lst: List) -> int:\n    \"\"\"Returns the division of first even and odd number of a given list.\n\n    Args:\n        lst (List): given list\n\n    Examples:\n        >>> assert first_even_odd_division([2, 4, 1, 8, 6, 9]) == 4\n        >>> assert first_even_odd_division([2, 4, 1, 8, 6]) == 2\n        >>> assert first_even_odd_division([2, 4, 1, 8]) == 2\n        >>> assert first_even_odd_division([2, 4, 1]) == 1\n        >>> assert first_even_odd_division([2, 4]) == 1\n    \"\"\"\n    return sum(lst[::2]) / sum(lst[1::2])\n\n\nif __name__ == \"__main__\":\n    print(first_even_odd_division([2, 4, 1, 8, 6, 9]))\n    print(first_even_odd_division([2, 4, 1, 8, 6]))\n    print(first_even_odd_division([2, 4, 1, 8]))\n    print(first_even_odd_division([2, 4, 1]))\n    print(first_even_odd_division([2, 4]))",
      -7.0703125
    ],
    [
      "from typing import List, Tuple\n\n\ndef find_even_odd_division(lst: List[int]) -> Tuple[float, float]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list\n\n    Examples:\n        >>> assert find_even_odd_division([1, 2, 3, 4, 5]) == (2.0, 3.0)\n        >>> assert find_even_odd_division([2, 3, 4, 5, 6]) == (3.0, 2.0)\n        >>> assert find_even_odd_division([2, 3, 4, 5, 6, 7]) == (3.5, 2.0)\n    \"\"\"\n    if len(lst) < 2:\n        return float(lst[0]), float(lst[0])\n\n    if lst[0] % 2 == 0:\n        even = lst[0]\n    else:\n        even = lst[1]\n\n    if lst[-1] % 2 == 0:\n        odd = lst[-1]\n    else:\n        odd = lst[-2]\n\n    return even / odd, odd / even\n\n\nif __name__ == \"__main__\":\n    print(find_even_odd_division([1, 2, 3, 4, 5]))\n    print(find_even_odd_division([2, 3, 4, 5, 6]))\n    print(find_even_odd_division([2, 3, 4, 5, 6, 7]))",
      -7.53515625
    ],
    [
      "from typing import List, Tuple\n\n\ndef get_even_odd_division(lst: List[int]) -> Tuple[int, int]:\n    \"\"\"Get the division of first even and odd number of a given list.\n\n    Args:\n        lst (List[int]): given list.\n\n    Examples:\n        >>> assert get_even_odd_division([1, 2, 3, 4]) == (2, 4)\n        >>> assert get_even_odd_division([1, 2, 3, 4, 5]) == (2, 5)\n        >>> assert get_even_odd_division([1, 2, 3, 4, 5, 6]) == (2, 6)\n    \"\"\"\n    return (\n        lst[0] if len(lst) == 1 else sum(lst[0::2]) // len(lst[0::2]),\n        lst[1] if len(lst) == 1 else sum(lst[1::2]) // len(lst[1::2]),\n    )\n\n\ndef main():\n    print(get_even_odd_division([1, 2, 3, 4]))\n    print(get_even_odd_division([1, 2, 3, 4, 5]))\n    print(get_even_odd_division([1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -9.375
    ],
    [
      "def first_even_odd_div(lst):\n    # check if the list contains even and odd numbers\n    if not (lst and (len(lst) == len([i for i in lst if i%2 == 0]))):\n        return \"Not Possible\"\n\n    even_lst = [i for i in lst if i%2 == 0]\n    odd_lst = [i for i in lst if i%2 != 0]\n    # check if the first even number is 0\n    if even_lst[0] == 0:\n        return \"Not Possible\"\n\n    # find the division of first even and odd number\n    return even_lst[0] // odd_lst[0]\n\nprint(first_even_odd_div([1, 2, 3, 4]))\nprint(first_even_odd_div([1, 2, 3, 4, 5]))\nprint(first_even_odd_div([1, 2, 3, 4, 5, 6]))\nprint(first_even_odd_div([1, 2, 3, 4, 5, 6, 7]))\nprint(first_even_odd_div([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(first_even_odd_div([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(first_even_odd_div([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(first_even_odd_div([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(first_even_odd_div([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(first_even_odd_div([1, 2, 3, 4, 5, 6, 7, 8, 9,",
      -10.203125
    ],
    [
      "from typing import List, Tuple\n\n\ndef find_even_odd_division(arr: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Finds division of first even and odd number of a given list.\n\n    Args:\n        arr (List[int]): given list\n\n    Examples:\n        >>> find_even_odd_division([1, 2, 3, 4, 5, 6])\n        (1, 2, 3)\n        >>> find_even_odd_division([1, 2, 3, 4, 5, 6, 7])\n        (1, 2, 4)\n        >>> find_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8])\n        (1, 2, 6)\n    \"\"\"\n    if not arr:\n        return 0, 0, 0\n\n    first_even = arr[0]\n    first_odd = arr[0]\n\n    for num in arr:\n        if num % 2 == 0:\n            first_even = num\n        else:\n            first_odd = num\n\n    return first_even, first_odd, first_even // first_odd\n\n\ndef find_even_odd_division_one_line(arr: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Finds division of first even and odd number of a given list.\n\n    Args:\n        arr (List[int]): given list\n\n    Examples:\n        >>> find_even_odd_division_one_line([1, 2, 3, 4, 5, 6])\n        (1, 2, 3)\n        >>> find_even_odd_division_one_line([1, 2, 3, 4, 5, 6, 7])\n        (1, 2, 4)\n        >>> find_even_odd_division_one_line([1, 2, 3, 4, 5, 6, 7, 8])\n        (1, 2",
      -11.2265625
    ],
    [
      "from typing import List, Tuple\n\n\ndef division(numbers: List[int]) -> Tuple[float, float]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert division([2, 3, 4, 1, 5, 6, 7]) == (2.0, 2.0)\n        >>> assert division([2, 3, 4, 5, 6, 7]) == (3.0, 3.0)\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n        else:\n            odd_sum += number\n\n    return even_sum / len(numbers), odd_sum / len(numbers)\n\n\nif __name__ == \"__main__\":\n    print(division([2, 3, 4, 1, 5, 6, 7]))",
      -11.796875
    ],
    [
      "from typing import List\n\n\ndef first_even_odd_division(nums: List[int]) -> int:\n    \"\"\"Find division of first even and odd number of a given list.\n\n    Args:\n        nums (List[int]): input list\n\n    Examples:\n        >>> assert first_even_odd_division([5, 2, 7, 4]) == 4\n        >>> assert first_even_odd_division([-2, 4, 3, 0]) == -2\n    \"\"\"\n    odd_number = 0\n    even_number = 0\n\n    for num in nums:\n        if num % 2:\n            odd_number += num\n        else:\n            even_number += num\n\n    return odd_number // even_number\n\n\nif __name__ == \"__main__\":\n    print(first_even_odd_division([5, 2, 7, 4]))\n    print(first_even_odd_division([-2, 4, 3, 0]))",
      -12.109375
    ],
    [
      "from typing import List\n\n\ndef first_even_odd_division(data: List[int]) -> List[int]:\n    \"\"\"Splits the list into two lists: odd and even.\n\n    Then finds the first element of each list and divides them.\n\n    Args:\n        data (List[int]): list of integers.\n\n    Examples:\n        >>> assert first_even_odd_division([5, 2, 7, 3]) == [1, 1]\n        >>> assert first_even_odd_division([-5, 2, 7, 3]) == [-1, 1]\n        >>> assert first_even_odd_division([5, -2, 7, 3]) == [1, -1]\n        >>> assert first_even_odd_division([5, 2, 7, -3]) == [1, -1]\n    \"\"\"\n    even = [n for n in data if n % 2 == 0]\n    odd = [n for n in data if n % 2 != 0]\n\n    return [odd[0] // even[0], odd[1] // even[1]]\n\n\nif __name__ == \"__main__\":\n    print(first_even_odd_division([5, 2, 7, 3]))",
      -13.1640625
    ],
    [
      "from typing import List, Tuple\n\n\ndef get_even_odd_division(input_list: List[int]) -> Tuple[int, int]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        input_list (List[int]): the input list\n\n    Returns:\n        Tuple[int, int]: the division of first even and odd number of a given list\n    \"\"\"\n\n    if not input_list:\n        return None\n\n    even_division = 0\n    odd_division = 0\n\n    for num in input_list:\n        if num % 2 == 0:\n            even_division += num\n        else:\n            odd_division += num\n\n    return even_division, odd_division\n\n\nif __name__ == \"__main__\":\n    print(get_even_odd_division([1, 2, 3, 4, 5, 6, 7]))\n    print(get_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(get_even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -13.2734375
    ],
    [
      "from typing import List, Tuple\n\n\ndef division(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (3, 2)\n    \"\"\"\n    if not numbers:\n        return 0, 0\n\n    even = sum(numbers[0::2])\n    odd = sum(numbers[1::2])\n\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    print(division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -13.40625
    ],
    [
      "from typing import List, Tuple\n\n\ndef even_odd_division(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"Finds the division of first even and odd number of a given list.\n\n    Args:\n        arr (List[int]): given list.\n\n    Examples:\n        >>> even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        (2, 1)\n    \"\"\"\n    even_sum = odd_sum = 0\n\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    return even_sum, odd_sum\n\n\nif __name__ == \"__main__\":\n    print(even_odd_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -16.1875
    ],
    [
      "from typing import List, Tuple\n\n\ndef even_odd_division(nums: List[int]) -> Tuple[int, int]:\n    \"\"\"Find the division of first even and odd number of a given list.\n\n    Args:\n        nums (List[int]): input list of numbers\n\n    Examples:\n        >>> even_odd_division([1, 2, 3, 4, 5])\n        (2, 2)\n        >>> even_odd_division([2, 3, 4, 5, 6])\n        (3, 2)\n    \"\"\"\n    _sum = 0\n    _count = 0\n    for i in nums:\n        if i % 2 == 0:\n            _sum += i\n            _count += 1\n        else:\n            _sum += i\n\n    return _sum // _count, _sum % _count\n\n\nif __name__ == \"__main__\":\n    print(even_odd_division([1, 2, 3, 4, 5]))\n    print(even_odd_division([2, 3, 4, 5, 6]))",
      -16.265625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}