{
  "problem": {
    "task_id": "MBPP/23",
    "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
    "test_list": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ],
    "challenge_test_list": [
      "assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"
    ],
    "problem_id": 12
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def max_sum(list_of_lists):\n    max_sum = 0\n    for sub_list in list_of_lists:\n        sub_sum = sum(sub_list)\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]))\nprint(max_sum([[1, 1, 1, 1, 1], [6, 7, 8, 9, 10], [-1, -2, -3, -4, -5]]))\n\n# Another solution\n\"\"\"\ndef max_sum(list_of_lists):\n    max_sum = 0\n    for sub_list in list_of_lists:\n        sub_sum = sum(sub_list)\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]))\nprint(max_sum([[1, 1, 1, 1, 1], [6, 7, 8, 9, 10], [-1, -2, -3, -4, -5]]))\n\n\"\"\"",
      13.1484375
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef max_sum_of_list_in_list(lists: list) -> int:\n    \"\"\"Return the maximum sum of elements of a list in a list of lists.\n\n    >>> max_sum_of_list_in_list([[1, 2, 3], [4, 5, 6]])\n    21\n    >>> max_sum_of_list_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    60\n    \"\"\"\n    # return max(\n    #     [reduce(add, lst) for lst in lists],\n    #     default=0,\n    # )\n\n    return max(\n        [sum(lst) for lst in lists],\n        default=0,\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      12.71875
    ],
    [
      "def max_sum_list_in_list(input_list):\n    \"\"\"\n    Finds the maximum sum of elements of list in a list of lists.\n\n    Args:\n       input_list(list): list containing lists of integers\n    Returns:\n       int: Maximum sum\n    \"\"\"\n    if not input_list or not isinstance(input_list, list):\n        return None\n    max_sum = 0\n    for i in input_list:\n        if not isinstance(i, list):\n            return None\n        sum_temp = 0\n        for j in i:\n            if not isinstance(j, int):\n                return None\n            sum_temp += j\n        if max_sum < sum_temp:\n            max_sum = sum_temp\n    return max_sum",
      12.421875
    ],
    [
      "def max_sum(arr):\n    max_sum = 0\n    for i in arr:\n        s = 0\n        for j in i:\n            s += j\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n\n\ndef main():\n    print(max_sum([[1, 2, 3], [4, 5], [1, 6, 9, 1, 8, 1, 5]]))\n    print(max_sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 1, 2, 3, 4]]))\n    print(max_sum([[1, 2, 3], [4, 5, 6], [7, 8]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      10.53125
    ],
    [
      "def find_max_sum(arr):\n    max_sum = 0\n\n    for i in arr:\n        curr_sum = sum(i)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum\n\n\ndef main():\n    print(find_max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(find_max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))\n    print(find_max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]))\n    print(find_max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      9.53125
    ],
    [
      "def max_sum(ls):\n    max_sum = 0\n    for i in ls:\n        curr_sum = 0\n        for j in i:\n            curr_sum += j\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\n\nls = [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]]\nprint(max_sum(ls))",
      9.0859375
    ],
    [
      "def max_sum(list_of_list):\n    \"\"\"\n    Calculates the maximum sum of elements of list in a list of lists.\n\n    >>> max_sum([[1, 2, 3], [3, 2, 1], [1, 3, 2]])\n    12\n    \"\"\"\n    return max([sum(list_) for list_ in list_of_list])\n\ndef main():\n    print(max_sum([[1, 2, 3], [3, 2, 1], [1, 3, 2]]))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()",
      8.8125
    ],
    [
      "from typing import List\n\n\ndef max_sum(lists: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not lists:\n        return 0\n\n    max_sum = 0\n\n    for list_ in lists:\n        current_sum = sum(list_)\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum([[1, 2, 3], [4, 5], [1, 6, 3, 4]]) == 12",
      7.37890625
    ],
    [
      "from itertools import chain\n\n\ndef max_sum(lists):\n    return max(map(sum, lists))\n\n\ndef max_sum_itertools(lists):\n    return max(map(sum, chain(*lists)))\n\n\ndef max_sum_no_chain(lists):\n    return max(map(sum, lists))\n\n\nif __name__ == '__main__':\n    lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(max_sum(lists))\n    print(max_sum_itertools(lists))\n    print(max_sum_no_chain(lists))",
      5.14453125
    ],
    [
      "def maximum_sum(lists):\n    if lists is None:\n        return 0\n    max_sum = 0\n    for i in lists:\n        sum = 0\n        for j in i:\n            sum += j\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\n\nprint(maximum_sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))",
      3.583984375
    ],
    [
      "from typing import List\n\n\ndef max_sum_in_list(lists: List[List[int]]) -> int:\n    \"\"\"\n    Return the maximum sum of elements of list in a list of lists.\n    >>> max_sum_in_list([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    100\n    >>> max_sum_in_list([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [-1, -2, -3, -4]])\n    20\n    >>> max_sum_in_list([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [-1, -2, -3, -4], [-1, -2, -3, -4]])\n    20\n    \"\"\"\n    max_sum = 0\n\n    for list_ in lists:\n        list_sum = sum(list_)\n\n        if list_sum > max_sum:\n            max_sum = list_sum\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.93359375
    ],
    [
      "def max_sum_list(lists):\n    max_sum = float(\"-inf\")\n\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n\n    return max_sum\n\n\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))",
      2.921875
    ],
    [
      "def max_sum_list(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        if sum(arr[i]) > max_sum:\n            max_sum = sum(arr[i])\n    return max_sum\n\n\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      2.8984375
    ],
    [
      "def max_sum(list_of_list):\n    max_sum = 0\n    for sublist in list_of_list:\n        if max_sum < sum(sublist):\n            max_sum = sum(sublist)\n    return max_sum\n\n\nlist_of_list = [[1, 2, 3, 4, 10], [2, 3, 7, 4, 9], [3, 6, 7, 2, 1]]\nprint(max_sum(list_of_list))",
      2.88671875
    ],
    [
      "def max_sum_list_list(list_of_lists):\n    \"\"\"\n    Return the maximum sum of elements of list in a list of lists.\n    \"\"\"\n    if len(list_of_lists) == 0:\n        return 0\n\n    max_sum = 0\n    for lst in list_of_lists:\n        max_sum = max(max_sum, sum(lst))\n\n    return max_sum",
      2.5859375
    ],
    [
      "def max_sum(lists):\n    max_sum = 0\n    for i in lists:\n        sum = 0\n        for j in i:\n            sum += j\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\n\nlists = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nprint(max_sum(lists))",
      2.46484375
    ],
    [
      "def max_sum_list(lst):\n    max_sum
      1.8095703125
    ],
    [
      "from typing import List\n\n\ndef max_sum_list_list(lists: List[List[int]]) -> int:\n    \"\"\"\n    Return the maximum sum of elements of a list in a list of lists.\n    >>> max_sum_list_list([[1, 2, 3], [4, 5], [1, 6, 9, 10, 11]])\n    21\n    \"\"\"\n    return max(\n        sum(\n            [\n                max(list_)\n                for list_ in lists\n            ]\n        ),\n        sum(\n            [\n                max(list_)\n                for list_ in zip(*lists)\n            ]\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.8056640625
    ],
    [
      "def max_sum_list(a: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n\n    for i in range(len(a)):\n        temp_sum = 0\n        for j in range(len(a[i])):\n            temp_sum += a[i][j]\n        if max_sum < temp_sum:\n            max_sum = temp_sum\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_list([[1, 2, 3, 4], [1, 2, 3]]) == 10",
      1.6396484375
    ],
    [
      "def find_max_sum(l):\n    max_sum = 0\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            if l[i][j] > max_sum:\n                max_sum = l[i][j]\n    return max_sum\n\n\nl = [[1, 2, 3, 4], [5, 6, 7], [9, 1, 2, 3, 4], [5, 6, 7, 8]]\nprint(find_max_sum(l))",
      1.05078125
    ],
    [
      "def max_sum_list(arr):\n    max_sum = 0\n    for i in arr:\n        for j in i:\n            max_sum += j\n    return max_sum\n\n\nprint(max_sum_list([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]))",
      0.7958984375
    ],
    [
      "def maximumSum(lst):\n    maximum = 0\n    for i in lst:\n        for j in i:\n            if j > maximum:\n                maximum = j\n    return maximum\n\nprint(maximumSum([[1,2,3], [4,5,6], [7,8,9]]))",
      0.70556640625
    ],
    [
      "def max_sum(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            lst[i][j] += max(lst[i][j-1], 0)\n    return max(lst[i][-1] for i in range(len(lst)))\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      0.60693359375
    ],
    [
      "def max_sum(ls):\n    \"\"\"\n    >>> max_sum([[1, 2, 3], [2, 3, 4], [1, 2, 3, 4], [1, 3, 5, 6], [2, 4, 6, 8]])\n    20\n    \"\"\"\n    return max(sum(max(lst, key=sum)) for lst in ls)\n\n\ndef max_sum_eff(ls):\n    \"\"\"\n    >>> max_sum_eff([[1, 2, 3], [2, 3, 4], [1, 2, 3, 4], [1, 3, 5, 6], [2, 4, 6, 8]])\n    20\n    \"\"\"\n    max_sum = -float(\"inf\")\n    for lst in ls:\n        temp = sum(lst)\n        if temp > max_sum:\n            max_sum = temp\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.5732421875
    ],
    [
      "from itertools import chain\n\n\ndef max_sum_list(lists):\n    return max(chain.from_iterable(lists))\n\n\ndef main():\n    list_of_lists = [[1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print(\"Max sum list of lists: \" + str(max_sum_list(list_of_lists)))\n\n\nif __name__ == '__main__':\n    main()",
      0.4365234375
    ],
    [
      "def max_sum(list_of_lists):\n    # Using nested list comprehension\n    return max([sum(l) for l in list_of_lists])\n\n\n# Driver code\nlist_of_lists = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\nprint(max_sum(list_of_lists))",
      0.419677734375
    ],
    [
      "def max_sum(lists):\n    \"\"\"\n    >>> max_sum([[2, 3, 1, 1], [1, 2, 3, 4], [0, 0, 0, 1]])\n    10\n    \"\"\"\n    if len(lists) == 0:\n        return None\n    max_sum = 0\n    for i in lists:\n        temp_sum = sum(i)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n\n\ndef max_sum_recursive(lists):\n    \"\"\"\n    >>> max_sum_recursive([[2, 3, 1, 1], [1, 2, 3, 4], [0, 0, 0, 1]])\n    10\n    \"\"\"\n    if len(lists) == 0:\n        return None\n    return max(sum(lists[0]), max_sum_recursive(lists[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.269775390625
    ],
    [
      "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> int:\n    \"\"\"\n    Return the maximum sum of elements of list in a list of lists.\n    >>> max_sum_list([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    24\n    >>> max_sum_list([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    32\n    >>> max_sum_list([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    32\n    >>> max_sum_list([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    40\n    >>> max_sum_list([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    48\n    >>> max_sum_list([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3,",
      0.2568359375
    ],
    [
      "def max_sum(lists):\n    if not lists:\n        return 0\n    max_sum = lists[0][0]\n    for l in lists:\n        for i in l:\n            max_sum = max(max_sum, i)\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3], [4, 5], [6]]))\nprint(max_sum([[1, 2, -10, -10], [4, 5], [6]]))",
      0.22509765625
    ],
    [
      "def max_sum(list_of_list):\n    max_sum = 0\n    for list_ in list_of_list:\n        list_.sort()\n        max_sum = max(max_sum, sum(list_[-2:]))\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3], [2, 4, 6, 8], [1, 3, 5, 7, 9]]))",
      0.1298828125
    ],
    [
      "def max_sum(lists: list):\n    max_sum = 0\n    for lst in lists:\n        sum_list = sum(lst)\n        if sum_list > max_sum:\n            max_sum = sum_list\n\n    return max_sum\n\n\ndef main():\n    lists = [[1, 2, 3], [3, 4, 5], [2, 3, 4, 5, 6]]\n    print(max_sum(lists))\n\n\nif __name__ == '__main__':\n    main()",
      0.035308837890625
    ],
    [
      "def max_sum(lists):\n    max_sum = 0\n    for l in lists:\n        max_sum = max(max_sum, sum(l))\n    return max_sum\n\nprint(max_sum([[1,2,3], [1,2], [1,2,3,4,5,6]]))",
      0.01479339599609375
    ],
    [
      "def max_sum(lists):\n    # initialize max_sum\n    max_sum = 0\n\n    for list_ in lists:\n        current_sum = 0\n        for num in list_:\n            current_sum += num\n            if current_sum > max_sum:\n                max_sum = current_sum\n            if current_sum < 0:\n                current_sum = 0\n\n    return max_sum\n\nlists = [[1, 2, 3], [-1, 2, 5], [1, 5, 3, 6, 7, -3]]\n\nprint(max_sum(lists))",
      -0.07696533203125
    ],
    [
      "def max_sum(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return max(arr[0])\n    else:\n        temp = []\n        for i in range(len(arr)):\n            temp.append(max(arr[i]))\n        return max(temp)\n\n\nif __name__ == \"__main__\":\n    arr = [[-1, 2, -3, 5], [2, -2, 3, 4], [-1, -2, -3, -4, -5]]\n    print(max_sum(arr))",
      -0.1029052734375
    ],
    [
      "from itertools import chain\n\ndef max_sum_list(list_of_lists):\n    return max(map(sum, list_of_lists))\n\ndef max_sum_list_itertools(list_of_lists):\n    return max(chain.from_iterable(list_of_lists))\n\ndef max_sum_list_itertools_comprehension(list_of_lists):\n    return max([sum(list_of_lists[i]) for i in range(len(list_of_lists))])\n\ndef max_sum_list_itertools_comprehension_chain(list_of_lists):\n    return max([sum(list_of_lists[i]) for i in range(len(list_of_lists))])",
      -0.2607421875
    ],
    [
      "def max_sum_list_in_list(lists):\n    \"\"\"\n    >>> max_sum_list_in_list([[1,2,3], [4,5,6], [7,8,9]])\n    27\n    >>> max_sum_list_in_list([[1,2,3], [-4,5,-6], [7,-8,9]])\n    19\n    \"\"\"\n\n    max_sum = 0\n\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n\n    return max_sum",
      -0.260986328125
    ],
    [
      "from itertools import chain\n\n\ndef max_sum(lst):\n    return max(chain(*lst))\n\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(\"Maximum sum of elements of list in a list of lists:\")\n    print(max_sum(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.51953125
    ],
    [
      "def max_sum(list_of_lists):\n    \"\"\"\n    This function takes a list of lists as a parameter and returns the maximum sum of elements of the list in the list\n    of lists.\n    >>> max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    45\n    >>> max_sum([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]])\n    45\n    >>> max_sum([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [10, 11, 12, 13]])\n    45\n    >>> max_sum([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [10, 11, 12, 13], [1, 2, 3, 4]])\n    45\n    >>> max_sum([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [10, 11, 12, 13], [1, 2, 3, 4], [1, 2, 3, 4]])\n    45\n    \"\"\"\n    if not list_of_lists:\n        return None\n    maximum = list_of_lists[0]\n    for i in range(len(list_of_lists)):\n        if sum(list_of_lists[i]) > sum(maximum):\n            maximum = list_of_lists[i]\n    return sum(maximum)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.64990234375
    ],
    [
      "def max_sum_list(lists):\n    sum_list = []\n    for i in lists:\n        sum_list.append(sum(i))\n    return max(sum_list)\n\n\nlists = [[1, 2, 3], [2, 3, 4, 5], [2, 3, 4]]\nprint(max_sum_list(lists))",
      -0.85693359375
    ],
    [
      "def max_sum(lists):\n    total_sum = 0\n    for list in lists:\n        for element in list:\n            total_sum += element\n\n    return total_sum\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.85693359375
    ],
    [
      "from itertools import chain\n\n\ndef max_sum_of_elements(list_of_lists):\n    \"\"\"\n    Return the maximum sum of elements of list in a list of lists.\n    \"\"\"\n    return max(sum(i) for i in chain(*list_of_lists))",
      -0.85693359375
    ],
    [
      "def max_sum(lst):\n    max_list = []\n    for i in lst:\n        max_list.append(max(i))\n    return max(max_list)\n\n\nprint(max_sum([[1, 2, 3], [2, 3, 4], [3, 4, 5]]))",
      -0.85693359375
    ],
    [
      "from itertools import chain\n\n\ndef max_sum_list_in_list(lists):\n    return max(chain.from_iterable(lists))\n\n\ndef main():\n    print(max_sum_list_in_list([[1, 2, 3], [2, 3, 4], [5, 6, 7]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def max_sum(lists):\n    max_sum = 0\n    for list in lists:\n        for item in list:\n            if item > max_sum:\n                max_sum = item\n    return max_sum\n\n\ndef main():\n    print(max_sum([[1, 2, 3], [4, 5, 6], [10, 9, 8]]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def maximum_sum(a):\n    m_sum = 0\n    for i in range(len(a)):\n        if sum(a[i]) > m_sum:\n            m_sum = sum(a[i])\n    return m_sum\n\n\nl = [[10, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [12, 13, 14, 15]]\nprint(maximum_sum(l))",
      -0.85693359375
    ],
    [
      "def max_sum(lst):\n    max_ = -10000000000\n    for i in lst:\n        temp = sum(i)\n        if max_ < temp:\n            max_ = temp\n    return max_\n\n\nl = [[1, 2, 3], [-1, 6, 7], [1, 2, 2, 2]]\nprint(max_sum(l))",
      -0.85693359375
    ],
    [
      "def max_sum(lst):\n    max_sum = 0\n    for i in lst:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3], [2, 3, 4], [3, 4, 5]]))\nprint(max_sum([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]))\nprint(max_sum([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]]))",
      -0.85693359375
    ],
    [
      "def max_sum(lists):\n    max_sum = 0\n    for i in range(len(lists)):\n        if sum(lists[i]) > max_sum:\n            max_sum = sum(lists[i])\n\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3], [2, 3, 4], [5, 6, 7]]))",
      -0.85693359375
    ],
    [
      "def max_sum(list_of_lists):\n    max_sum = 0\n    for list in list_of_lists:\n        list_sum = sum(list)\n        if list_sum > max_sum:\n            max_sum = list_sum\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))",
      -0.85791015625
    ],
    [
      "def max_sum_list(lists):\n    max_sum = 0\n    for l in lists:\n        s = sum(l)\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n\nlists = [[1,2,3,4],[1,2,3,-4],[-1,-2,-3,-4],[1,2,-3,4]]\nprint(max_sum_list(lists))",
      -0.85791015625
    ],
    [
      "def find_max_sum(list_of_lists):\n    max_sum = -9999999\n    for i in list_of_lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n    return max_sum",
      -0.85791015625
    ],
    [
      "from itertools import chain\n\n\ndef max_sum(lst):\n    return max(chain.from_iterable(lst))",
      -0.85791015625
    ],
    [
      "def max_sum(lst):\n    max_sum = 0\n    for i in lst:\n        for j in i:\n            if j > max_sum:\n                max_sum = j\n    return max_sum\n\nlst = [[1,2,3],[2,3,4],[3,4,5]]\nprint(max_sum(lst))",
      -0.8583984375
    ],
    [
      "from itertools import chain\n\n\ndef max_sum(lst_of_lst):\n    return max(chain.from_iterable(lst_of_lst))\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.8583984375
    ],
    [
      "def max_sum_of_list(l):\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return max(l[0])\n\n    m = []\n    for i in l:\n        m.append(max(i))\n    return max(m)\n\n\nprint(max_sum_of_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.8583984375
    ],
    [
      "def max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            max_sum = max(arr[i][j], arr[i][j]+arr[i-1][j], arr[i][j]+arr[i][j-1])\n            arr[i][j] = max_sum\n    return max_sum\n\n\narr = [[-1, -2, -3],\n       [-2, -3, -5],\n       [-1, -2, -3]]\n\nprint(max_sum(arr))",
      -0.8583984375
    ],
    [
      "from itertools import chain\n\n\ndef max_sum_in_list(lists):\n    return max(chain.from_iterable(lists))\n\n\ndef main():\n    lists = [[1, 2, 3], [2, 3, 5], [3, 5, 6], [1, 2, 3, 4]]\n    print(max_sum_in_list(lists))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "from functools import reduce\nfrom operator import mul\n\n\ndef max_sum_of_elements_in_a_list(list_of_lists):\n    \"\"\"\n    >>> max_sum_of_elements_in_a_list([[1, 2, 3], [3, 4, 5], [5, 6, 7]])\n    24\n    >>> max_sum_of_elements_in_a_list([[1, 2, 3], [3, 4, 5], [5, 6, 7], [3, 8, 1]])\n    28\n    \"\"\"\n    return reduce(mul, map(max, zip(*list_of_lists)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def max_sum(lst):\n    \"\"\"\n    >>> max_sum([[2, 5, 3, 5], [1, 3, 4], [6, 7, 1, 3], [1, 2, 5, 5]])\n    17\n    \"\"\"\n    return max(\n        [sum(lst[i]) for i in range(len(lst))],\n        default=0,\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def max_sum(ls):\n    max_sum = 0\n    for i in range(len(ls)):\n        if sum(ls[i]) > max_sum:\n            max_sum = sum(ls[i])\n    return max_sum",
      -0.8583984375
    ],
    [
      "def max_sum(lists):\n    max_list = []\n    for l in lists:\n        if sum(l) > sum(max_list):\n            max_list = l\n    return max_list\n\n\nif __name__ == \"__main__\":\n    print(max_sum([[1, 3, 5], [2, 4, 6], [7, 8, 9]]))",
      -0.85888671875
    ],
    [
      "def max_sum(lists):\n    max_sum = 0\n    for list in lists:\n        list_sum = sum(list)\n        if list_sum > max_sum:\n            max_sum = list_sum\n    return max_sum\n\n\nlists = [[-13, 2, -4, 15, -6, 1],\n         [4, 5, 2, 10],\n         [-1, -2, -3, -4, -4, -5]]\nprint(max_sum(lists))",
      -0.85888671875
    ],
    [
      "def max_sum(lst):\n    max_sum = lst[0]\n    for i in lst:\n        for j in i:\n            if max_sum < j:\n                max_sum = j\n    return max_sum\n\n\nlst = [[1, 2, 3], [4, 5], [1, 6, 9, 10, 11]]\nprint(max_sum(lst))",
      -0.85888671875
    ],
    [
      "def max_sum(list_of_lists):\n    max_sum = 0\n    for lst in list_of_lists:\n        sum_of_lst = 0\n        for i in lst:\n            sum_of_lst += i\n        if max_sum < sum_of_lst:\n            max_sum = sum_of_lst\n    return max_sum\n\n\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]\nprint(\"Original list:\", list_of_lists)\nprint(\"Maximum sum of elements of list in a list of lists:\", max_sum(list_of_lists))",
      -0.85888671875
    ],
    [
      "def max_sum_in_list(list_of_list):\n    max_sum = 0\n\n    for lst in list_of_list:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n\n    return max_sum\n\n\nprint(max_sum_in_list([[1, 2, 3], [2, 3, 4], [1, 2, 4]]))",
      -0.86083984375
    ],
    [
      "def max_sum(lst):\n    if not lst:\n        return 0\n    else:\n        max_sum = lst[0]\n        for i in lst:\n            for j in i:\n                max_sum += j\n        return max_sum\n\n\nprint(max_sum([[2, 3, 4], [1, 2, 3], [4, 5, 6]]))",
      -0.86083984375
    ],
    [
      "def max_sum(lst):\n    return max([sum(lst[i]) for i in range(len(lst))])\n\n\ndef main():\n    lst = [[1, 2, 3], [3, 2, 1], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\n    print(\"Maximum sum of elements of list in a list of lists:\", max_sum(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.86083984375
    ],
    [
      "def max_sum_list(list_of_lists):\n    return sum([max(x) for x in list_of_lists])\n\n\ndef main():\n    l1 = [[1, 2, 3], [1, 2, 3, 4, 5], [2, 3, 4]]\n    print(max_sum_list(l1))\n\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "def max_sum(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return max(arr[0])\n    max_sum = max(arr[0])\n    max_sum_list = []\n    for i in range(len(arr[0])):\n        max_sum_list.append(arr[0][i])\n    for i in range(1, len(arr)):\n        for j in range(len(arr[i])):\n            max_sum_list[j] += arr[i][j]\n    for i in range(len(max_sum_list)):\n        if max_sum < max_sum_list[i]:\n            max_sum = max_sum_list[i]\n    return max_sum\n\n\ndef main():\n    arr = [[10, 2, 3, 11, 12], [1, 6, 13, 14, 15, 16], [5, 7, 17, 8, 9]]\n    print(max_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.876953125
    ],
    [
      "def max_sum(list_of_lists):\n    sum_list = []\n    for i in list_of_lists:\n        sum_list.append(sum(i))\n    return max(sum_list)\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))",
      -1.01171875
    ],
    [
      "def maximum_sum(lists):\n    sums = []\n    for i in range(len(lists)):\n        sums.append(sum(lists[i]))\n    return max(sums)\n\n\nlists = [[1, 2, 3], [4, 5, 6], [10, 11, 12]]\nprint(maximum_sum(lists))",
      -1.2275390625
    ],
    [
      "from itertools import chain\n\n\ndef max_sum(lst):\n    return max(sum(sublist) for sublist in lst)\n\n\ndef max_sum_itertools(lst):\n    return max(chain.from_iterable(lst))\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [2, 3, 4], [1, 2, 3, 4, 5]]\n    print(max_sum(lst))\n    print(max_sum_itertools(lst))",
      -1.4560546875
    ],
    [
      "def max_sum(arr):\n    max_sum = arr[0]\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sub = arr[i:j+1]\n            if sum(sub) > max_sum:\n                max_sum = sum(sub)\n    return max_sum\n\n\ndef main():\n    l = [[1, 4, 2, 10], [1, 6, 3, 1], [1, 5, 7, 1], [1, 1, 0, 1]]\n    ans = max_sum(l)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.744140625
    ],
    [
      "def max_sum_list(lst):\n    \"\"\"\n    Finds the maximum sum of elements in a list of lists.\n\n    Args:\n       lst(list): list of lists\n    Returns:\n       (int): maximum sum\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return max(lst[0])\n    if len(lst) == 2:\n        return max(lst[0] + lst[1])\n    if len(lst) > 2:\n        return max(lst[0] + lst[1] + lst[2], max_sum_list(lst[1:]))\n\n\nprint(\"Maximum sum of elements of list in a list of lists: \", max_sum_list([[1, 2, 3], [10, 20, 30], [100, 200, 300]]))\nprint(\"Maximum sum of elements of list in a list of lists: \", max_sum_list([[1, 2, 3], [10, 20, 30], [100, 200, 300], [1000, 2000, 3000]]))\nprint(\"Maximum sum of elements of list in a list of lists: \", max_sum_list([[1, 2, 3], [10, 20, 30], [100, 200, 300], [1000, 2000, 3000], [10000, 20000, 30000]]))\nprint(\"Maximum sum of elements of list in a list of lists: \", max_sum_list([[1, 2, 3], [10, 20, 30], [100, 200, 300], [1000, 2000, 3000], [10000, 20000, 30000], [100000, 200000,",
      -1.9892578125
    ],
    [
      "def max_sum(lst):\n    max_sum = 0\n    for sub_lst in lst:\n        sub_lst_sum = sum(sub_lst)\n        if sub_lst_sum > max_sum:\n            max_sum = sub_lst_sum\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]))",
      -2.01171875
    ],
    [
      "def max_sum_list(lists):\n    max_sum = 0\n    for lst in lists:\n        temp_sum = sum(lst)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n\n\nlists = [[-1, 2, -3, 5, 9, 6],\n         [1, 2, -1, 3, 4, 100],\n         [5, 6, 4, -2, 5, 6],\n         [10, -10, -10, -10, -10, -10]]\n\nprint(max_sum_list(lists))",
      -2.01953125
    ],
    [
      "def max_sum(list_of_lists):\n    if not list_of_lists:\n        return 0\n    else:\n        return max([sum(list_of_lists[i]) for i in range(len(list_of_lists))])\n\n\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [-1, -2, -3]]))",
      -2.181640625
    ],
    [
      "from typing import List\n\n\ndef max_sum_list_of_lists(list_of_lists: List[List[int]]) -> int:\n    \"\"\"\n    Return the maximum sum of elements of list in a list of lists\n    >>> max_sum_list_of_lists([[1, 2, 3], [4, 5], [1, 6, 9, 10, 11]])\n    21\n    >>> max_sum_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    24\n    >>> max_sum_list_of_lists([[1, 1, 1], [1, 1, 1], [1, 1, 1]])\n    3\n    >>> max_sum_list_of_lists([[1, 2], [3, 4], [5, 6], [7, 8]])\n    20\n    \"\"\"\n    if len(list_of_lists) == 0:\n        return 0\n    elif len(list_of_lists) == 1:\n        return sum(list_of_lists[0])\n    else:\n        return max(\n            sum(list_of_lists[0]),\n            max_sum_list_of_lists(list_of_lists[1:])\n        )\n\n\ndef max_sum_list_of_lists_recursive(list_of_lists: List[List[int]]) -> int:\n    \"\"\"\n    Return the maximum sum of elements of list in a list of lists\n    >>> max_sum_list_of_lists_recursive([[1, 2, 3], [4, 5], [1, 6, 9, 10, 11]])\n    21\n    >>> max_sum_list_of_lists_recursive([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    24\n    >>> max_sum_list_of_lists_recursive([[1, 1, 1], [1, 1, 1], [1, 1",
      -2.51953125
    ],
    [
      "from itertools import chain\n\n\ndef max_sum(lists: list) -> int:\n    \"\"\"Returns the maximum sum of elements in a list of lists.\n\n    Args:\n        lists (list): list of lists to find maximum sum.\n\n    Examples:\n        >>> assert max_sum([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 27\n    \"\"\"\n    return max(chain.from_iterable(lists))\n\n\nif __name__ == \"__main__\":\n    print(max_sum([[1, 2, 3], [4, 5], [6, 7, 8, 9]]))",
      -2.599609375
    ],
    [
      "from itertools import chain\n\n\ndef max_sum_list_list(lists):\n    return max(chain.from_iterable(lists))\n\n\ndef test_max_sum_list_list():\n    \"\"\"\n    >>> test_max_sum_list_list()\n    True\n    \"\"\"\n    assert max_sum_list_list([[1, 2, 3], [1, 2, 3]]) == 6\n    assert max_sum_list_list([[1, 2, 3], [1, 2, 3, 4]]) == 7\n    assert max_sum_list_list([[1, 2, 3], [1, 2, 3, 4, 5]]) == 10\n    assert max_sum_list_list([[1, 2, 3], [1, 2, 3, 4, 5, 6]]) == 12\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.875
    ],
    [
      "from itertools import chain\nfrom typing import List\n\n\ndef max_sum(lists: List[List[int]]) -> int:\n    \"\"\"Returns the maximum sum of elements of list in a list of lists.\n\n    Args:\n        lists (List[List[int]]): List of lists\n\n    Returns:\n        int: Maximum sum of elements of list in a list of lists\n\n    Example:\n    >>> max_sum([[1,2,3],[2,4,5],[3,6,7]])\n    14\n    \"\"\"\n    return max(chain.from_iterable(lists))\n\n\nif __name__ == \"__main__\":\n    list_of_list = [[1, 2, 3], [2, 4, 5], [3, 6, 7]]\n    print(max_sum(list_of_list))",
      -2.876953125
    ],
    [
      "def max_sum(lists):\n    if lists is None:\n        return None\n    max_sum = float('-inf')\n    for list in lists:\n        if list is None:\n            continue\n        sum = 0\n        for i in list:\n            sum += i\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\n\nif __name__ == '__main__':\n    test_cases = [\n        [[1, 2, 3], [2, 4, 5, 6], [1, 1, 1, 1]],\n        [[1, 2], [2, 4, 5, 6], [1, 1, 1, 1]],\n        [[1, 2], [2, 4, 5, 6], [1, 1, 1, 1], None],\n        [[1, 2], [2, 4, 5, 6], [1, 1, 1, 1], [1, 1, 1, 1]],\n        [None],\n        [None, [1, 2, 3], [2, 4, 5, 6], [1, 1, 1, 1], [1, 1, 1, 1]],\n        [None, [1, 2, 3], [2, 4, 5, 6], [1, 1, 1, 1], [1, 1, 1, 1]],\n        [None, [1, 2, 3], [2, 4, 5, 6], [1, 1, 1, 1], [1, 1, 1, 1], None],\n    ]\n    for lists in test_cases:\n        print(max_sum(lists))",
      -3.001953125
    ],
    [
      "from functools import reduce\n\n\ndef maximum_sum(input_list):\n    return reduce(\n        lambda acc, elem: acc if acc[1] > elem[1] else elem, input_list, [None, float(\"-inf\")]\n    )[1]\n\n\ndef main():\n    print(maximum_sum([[1, 2, 3], [2, 5, 6], [3, 8, 9]]))\n    print(maximum_sum([[1, 2, 3], [2, 5, 6], [3, 8, 9], [1, 4, 10]]))\n    print(maximum_sum([[1, 2, 3], [2, 5, 6], [3, 8, 9], [1, 4, 10], [-1, 5, 10]]))\n    print(maximum_sum([[1, 2, 3], [2, 5, 6], [3, 8, 9], [1, 4, 10], [-1, 5, 10], [2, 4, 8]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.041015625
    ],
    [
      "from itertools import chain\n\n\ndef max_sum(lists):\n    return max(chain.from_iterable(lists))\n\n\ndef main():\n    print(max_sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.0546875
    ],
    [
      "def max_sum_list(arr):\n    max_sum = arr[0]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n\nprint(max_sum_list([3, 10, 2, 1, 20]))\nprint(max_sum_list([1, 10, 2, 20, 3]))\nprint(max_sum_list([3, 10, 2, 1, 20, 10, 20, 3]))",
      -3.427734375
    ],
    [
      "def max_sum(l):\n    mx = 0\n    for i in l:\n        for j in i:\n            mx = max(mx, j)\n    return mx\n\n\ndef max_sum_list(l):\n    mx = 0\n    for i in l:\n        mx = max(mx, sum(i))\n    return mx\n\n\ndef max_sum_list_2(l):\n    mx = 0\n    for i in l:\n        mx = max(mx, sum(i), max(i))\n    return mx\n\n\ndef max_sum_list_3(l):\n    mx = 0\n    for i in l:\n        mx = max(mx, max([sum(i), max(i)]))\n    return mx\n\n\ndef max_sum_list_4(l):\n    mx = 0\n    for i in l:\n        mx = max(mx, max(sum(i), max(i)))\n    return mx\n\n\ndef max_sum_list_5(l):\n    mx = 0\n    for i in l:\n        mx = max(mx, max(j for j in i))\n    return mx\n\n\ndef max_sum_list_6(l):\n    mx = 0\n    for i in l:\n        mx = max(mx, sum(j for j in i))\n    return mx\n\n\ndef max_sum_list_7(l):\n    mx = 0\n    for i in l:\n        mx = max(mx, max(j for j in i))\n    return mx\n\n\ndef max_sum_list_8(l):\n    mx = 0\n    for i in l:\n        mx = max(mx, sum([max(j) for j in i]))\n    return mx\n\n\ndef max_sum_list_9(l):\n    mx = 0\n    for i in l:\n        mx = max(mx, sum([j for j in i]))\n    return mx\n\n\ndef max_sum_list_10(l",
      -3.564453125
    ],
    [
      "def max_sum(arr):\n    mx = arr[0]\n    for i in arr:\n        for j in i:\n            if sum(j) > mx:\n                mx = sum(j)\n    return mx\n\n\ndef main():\n    arr = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n    print(max_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.23046875
    ],
    [
      "def max_sum(array):\n    if len(array) == 0:\n        return 0\n    max_sum = array[0]\n    for i in range(1, len(array)):\n        if max_sum < 0:\n            max_sum = array[i]\n        else:\n            max_sum += array[i]\n    return max_sum\n\n\ndef max_sum_list(array):\n    if len(array) == 0:\n        return 0\n    max_sum = max_sum(array[0])\n    for i in range(1, len(array)):\n        if max_sum < 0:\n            max_sum = max_sum(array[i])\n        else:\n            max_sum = max(max_sum, max_sum(array[i]))\n    return max_sum\n\n\nprint(max_sum_list([[1, 2, 3], [2, 1, 5], [1, 2, 3, 10]]))",
      -4.9921875
    ],
    [
      "def max_sum(list_of_list):\n    max_sum = 0\n    for list_ in list_of_list:\n        list_.sort()\n        max_sum = max(max_sum, list_[-1] + list_[-2])\n\n    return max_sum\n\n\nprint(max_sum([[1, 2, 3, 4], [-1, -2, -3, -4]]))\nprint(max_sum([[1, 2, 3, 4], [-1, -2, -3, -4], [-1, -2, -3, -4]]))\nprint(max_sum([[1, 2, 3, 4], [-1, -2, -3, -4], [-1, -2, -3, -4], [-1, -2, -3, -4]]))",
      -5.06640625
    ],
    [
      "from itertools import chain\n\n\ndef max_sum_in_list(list_of_lists):\n    \"\"\"\n    Takes a list of lists and returns the maximum sum of the elements in the list\n\n    >>> max_sum_in_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n    36\n\n    >>> max_sum_in_list([[1, 2], [3, 4, 5], [6, 7, 8], [9]])\n    34\n\n    >>> max_sum_in_list([[1, 2, 3], [4, 5, 6, 7, 8], [9, 10], [11, 12], [13, 14], [15, 16]])\n    139\n\n    :param list_of_lists:\n    :return:\n    \"\"\"\n\n    return max(map(sum, chain.from_iterable(list_of_lists)))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -5.30078125
    ],
    [
      "from itertools import chain\n\n\ndef max_sum(lst):\n    return max(sum(sub) for sub in lst)\n\n\ndef max_sum_efficient(lst):\n    return max(chain(*lst))\n\n\nprint(max_sum([[1, 2, 3], [4, 5], [1, 6, 7, 8, 10]]))\nprint(max_sum_efficient([[1, 2, 3], [4, 5], [1, 6, 7, 8, 10]]))",
      -5.671875
    ],
    [
      "from itertools import chain\n\n\ndef max_sum(lst):\n    return max(chain.from_iterable(lst))\n\n\ndef main():\n    lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(max_sum(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.74609375
    ],
    [
      "def max_sum(lists):\n    \"\"\"\n    >>> max_sum([[1, 2, 3], [3, 6, 7], [4, 5, 6], [1, 2, 3, 4]])\n    14\n    >>> max_sum([[1, 2, 3], [3, 6, 7], [4, 5, 6]])\n    14\n    >>> max_sum([[1, 2, 3], [3, 6, 7], [4, 5, 6], [1, 2, 3, 4, 5]])\n    15\n    >>> max_sum([[1, 2, 3], [3, 6, 7], [4, 5, 6], [1, 2, 3, 4, 5, 6]])\n    15\n    >>> max_sum([[1, 2, 3], [3, 6, 7], [4, 5, 6], [1, 2, 3, 4, 5, 6, 7]])\n    16\n    >>> max_sum([[1, 2, 3], [3, 6, 7], [4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]])\n    16\n    >>> max_sum([[1, 2, 3], [3, 6, 7], [4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]])\n    19\n    >>> max_sum([[1, 2, 3], [3, 6, 7], [4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]])\n    19\n    \"\"\"\n    if not lists:\n        return 0\n\n    max_sum = lists[0][0]\n\n    for i in range(len(lists)):\n        for j in range(len(lists",
      -6.171875
    ],
    [
      "from typing import List\n\n\ndef max_sum(lst: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum_ = lst[0][0]\n\n    for l in lst:\n        for i in range(len(l)):\n            if i == 0:\n                max_sum_ = max(max_sum_, l[i] + l[i + 1])\n            elif i == len(l) - 1:\n                max_sum_ = max(max_sum_, l[i] + l[i - 1])\n            else:\n                max_sum_ = max(max_sum_, l[i] + l[i - 1] + l[i + 1])\n\n    return max_sum_\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    assert max_sum(lst) == 24",
      -6.39453125
    ],
    [
      "def max_sum(arr):\n    \"\"\"\n    Find the maximum sum of elements of list in a list of lists.\n\n    Args:\n       arr(list): list of lists\n    Returns:\n       int: maximum sum\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return max(arr[0])\n    else:\n        max_sum = 0\n        for i in range(len(arr)):\n            for j in range(len(arr[i])):\n                if arr[i][j] > max_sum:\n                    max_sum = arr[i][j]\n        return max_sum\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = max_sum(arr)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[1, 2, 3, 4, 5], 15])\ntest_function([[1, 2, -1, -2, -1, -2, 1, 2, 3], 7])\ntest_function([[], 0])\ntest_function([[[-1, -2], [-1], [-2]], -1])",
      -6.48046875
    ],
    [
      "from typing import List\n\n\ndef maximum_sum(lists: List[List[int]]) -> int:\n    \"\"\"\n    Return maximum sum of elements of list in a list of lists.\n    >>> maximum_sum([[1,2,3],[4,5,6],[7,8,9]])\n    45\n    \"\"\"\n    # we'll use a helper function to find the maximum sum of elements of list in a list of lists.\n    def max_sum(lists: List[int]) -> int:\n        \"\"\"\n        Return maximum sum of elements of list in a list of lists.\n        >>> max_sum([1,2,3,4])\n        10\n        >>> max_sum([-1,-2,-3,-4])\n        -1\n        \"\"\"\n        # we'll use a variable to store the maximum sum\n        max_sum = 0\n        # we'll use a variable to store the sum of elements of a list\n        sum_of_elements = 0\n        # we'll iterate over the list\n        for num in lists:\n            # we'll check if num is positive or negative\n            if num > 0:\n                # if num is positive we'll add it to sum_of_elements\n                sum_of_elements += num\n            else:\n                # if num is negative we'll reset sum_of_elements to 0\n                sum_of_elements = 0\n            # we'll check if sum_of_elements is greater than max_sum\n            if sum_of_elements > max_sum:\n                # if it is we'll update max_sum\n                max_sum = sum_of_elements\n        return max_sum\n\n    # we'll use a variable to store the maximum sum of elements of list in a list of lists\n    max_sum_of_elements = 0\n    # we'll iterate over the list of lists\n    for lists in lists:\n        # we'll call the helper function to find the maximum sum of elements of list in a list of lists\n        sum_of_elements = max_sum(lists)\n        # we'll check if sum_of_elements is greater than max_sum_of_elements\n        if sum_of_elements > max_",
      -6.55078125
    ],
    [
      "from collections import defaultdict\n\n\ndef max_sum(arr: list) -> int:\n    \"\"\"\n    Returns the maximum sum of elements of list in a list of lists.\n    >>> max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    33\n    >>> max_sum([[1, 2, 3], [-4, 5, 6], [7, -8, 9]])\n    29\n    >>> max_sum([[1, 2, 3], [4, 5, 6], [7, -8, 9]])\n    33\n    >>> max_sum([[1, 2, 3], [4, 5, -6], [7, 8, 9]])\n    33\n    >>> max_sum([[1, 2, 3], [4, 5, 6], [7, -8, 9], [10, 11, 12], [13, 14, 15]])\n    60\n    >>> max_sum([[1, 2, 3], [4, 5, 6], [7, -8, 9], [10, 11, 12], [13, 14, 15], [-16, -17, -18]])\n    60\n    \"\"\"\n    if not arr:\n        return 0\n\n    memo = defaultdict(int)\n    memo[-1] = 0\n    memo[0] = 0\n\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            memo[i] = max(memo[i], memo[i - 1] + arr[i][j])\n            memo[j] = max(memo[j], memo[j - 1] + arr[i][j])\n\n    return max(memo.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.8828125
    ],
    [
      "def max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            sum = arr[i][j]\n            if i == 0 and j == 0:\n                max_sum = sum\n            elif i == 0:\n                max_sum = max(sum, max_sum)\n            elif j == 0:\n                max_sum = max(sum, max_sum)\n            else:\n                max_sum = max(sum, max_sum-arr[i-1][j], max_sum-arr[i][j-1])\n    return max_sum\n\n\nif __name__ == '__main__':\n    arr = [[-1, -2, -3], [-2, -3, -6], [-1, -2, -3]]\n    print(max_sum(arr))",
      -9.453125
    ],
    [
      "def find_max_sum(lists):\n    # get the sum of all the elements in the list\n    total_sum = sum(lists)\n    # get the sum of all the elements in the list of lists\n    total_sum_of_lists = sum(lists, [])\n    # get the sum of all the elements in the list of lists\n    total_sum_of_lists = sum(total_sum_of_lists, [])\n    # return the maximum sum\n    return max(total_sum, total_sum_of_lists)\n\n\nprint(find_max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(find_max_sum([[1, 2, 3], [-1, -5, 6], [7, 8, -9]]))",
      -10.5
    ],
    [
      "from functools import reduce\n\n\ndef max_sum_list(lst):\n    return reduce(lambda x, y: x if x > y else y, lst)\n\n\ndef main():\n    list_of_lists = [\n        [1, 2, 3, 4, 10, 11, 12],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 11, 19, 20],\n        [21, 22, 23, 24]\n    ]\n    print(max_sum_list(list_of_lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      -11.2734375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}