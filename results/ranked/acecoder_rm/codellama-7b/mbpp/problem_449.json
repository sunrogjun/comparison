{
  "problem": {
    "task_id": "MBPP/460",
    "prompt": "Write a python function to get the first element of each sublist.",
    "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
    "test_list": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ],
    "challenge_test_list": [],
    "problem_id": 449
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def first_element_of_each_sublist(list_of_sublists):\n    \"\"\"\n    >>> first_element_of_each_sublist([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [1, 4, 7]\n    \"\"\"\n    return [sublist[0] for sublist in list_of_sublists]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      22.265625
    ],
    [
      "from typing import List\n\n\ndef first_element_of_sublist(lists: List[List[int]]) -> List[int]:\n    \"\"\"Return the first element of each sublist.\n\n    Examples:\n        >>> assert first_element_of_sublist([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 3, 5, 7]\n    \"\"\"\n    return [sublist[0] for sublist in lists]\n\n\nif __name__ == \"__main__\":\n    print(first_element_of_sublist([[1, 2], [3, 4], [5, 6], [7, 8]]))",
      21.453125
    ],
    [
      "def get_first_element(list_of_lists):\n    \"\"\"\n    >>> get_first_element([[1,2],[3,4,5],[6,7,8,9]])\n    [1, 3, 6]\n    \"\"\"\n    return [sub_list[0] for sub_list in list_of_lists]\n\n\ndef main():\n    list_of_lists = [[1, 2], [3, 4, 5], [6, 7, 8, 9]]\n    print(get_first_element(list_of_lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      21.171875
    ],
    [
      "def first_element(list_of_lists):\n    return [sublist[0] for sublist in list_of_lists]\n\n\ndef test_first_element():\n    assert first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n\n\nif __name__ == \"__main__\":\n    print(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      16.03125
    ],
    [
      "def first_element_in_sublists(list_of_sublists):\n    return [sublist[0] for sublist in list_of_sublists]\n\nprint(first_element_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      15.7421875
    ],
    [
      "def getFirstElement(arr):\n    return [x[0] for x in arr]\n\ndef main():\n    arr = [[1, 2], [3, 4], [5, 6]]\n    print(getFirstElement(arr))\n\nif __name__ == \"__main__\":\n    main()",
      15.09375
    ],
    [
      "def first_element(list_of_lists):\n    return [sublist[0] for sublist in list_of_lists]\n\n\ndef main():\n    list_of_lists = [[1, 2, 3, 4, 5], [11, 22, 33, 44, 55], [111, 222, 333, 444, 555]]\n    print(\"list_of_lists:\", list_of_lists)\n    print(\"first_element:\", first_element(list_of_lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      14.0546875
    ],
    [
      "def first_element(lists):\n    new_list = []\n    for i in lists:\n        new_list.append(i[0])\n    return new_list\n\n\nlists = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nprint(first_element(lists))",
      13.5625
    ],
    [
      "def first_elem(list_of_lists):\n    return [x[0] for x in list_of_lists]\n\nprint(first_elem([[1,2,3],[4,5,6],[7,8,9]]))\nprint(first_elem([['a','b','c'],['d','e','f'],['g','h','i']]))",
      13.5390625
    ],
    [
      "from typing import List\n\n\ndef get_first_element(alist: List) -> List:\n    \"\"\"Returns the first element of each sublist.\n\n    Args:\n        alist (List): list of lists\n\n    Returns:\n        List: list of first elements\n    \"\"\"\n    return [sublist[0] for sublist in alist]\n\n\ndef main():\n    alist = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25],\n    ]\n    print(get_first_element(alist))\n\n\nif __name__ == \"__main__\":\n    main()",
      13.0625
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef first_element(values):\n    \"\"\"Return the first element of each sublist.\"\"\"\n    return [sublist[0] for sublist in values]\n\n\ndef test_first_element():\n    \"\"\"Test for first_element.\"\"\"\n    assert_equal(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [1, 4, 7])\n    assert_equal(first_element([[1, 2], [3, 4], [5, 6], [7, 8]]), [1, 3, 5, 7])\n    assert_equal(first_element([[1, 2, 3]]), [1])\n    assert_equal(first_element([]), [])\n    assert_equal(first_element([[1], [2]]), [1, 2])\n    assert_equal(first_element([[1, 2, 3], [4], [5, 6]]), [1, 4, 5])",
      12.375
    ],
    [
      "from functools import reduce\n\n\ndef get_first(lst):\n    return [x[0] for x in lst]\n\n\ndef get_first_lambda(lst):\n    return list(map(lambda x: x[0], lst))\n\n\ndef get_first_reduce(lst):\n    return list(reduce(lambda x, y: x + [y[0]], lst, []))\n\n\nprint(get_first([[1, 2], [3, 4], [5, 6]]))\nprint(get_first_lambda([[1, 2], [3, 4], [5, 6]]))\nprint(get_first_reduce([[1, 2], [3, 4], [5, 6]]))",
      11.7890625
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef first_element(lst):\n    \"\"\"\n    >>> first_element([[1,2,3],[4,5,6],[7,8,9]])\n    [1, 4, 7]\n    \"\"\"\n    return [i[0] for i in lst]\n\n\nif __name__ == '__main__':\n    a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    assert_equal(first_element(a), [1, 4, 7])\n    print(\"Congratulations! You made your first test!\")",
      11.7578125
    ],
    [
      "def first_element_in_each_list(list_of_lists):\n    # Checking whether the list is empty or not\n    if not list_of_lists:\n        return None\n    else:\n        # A list to store the first elements of each sublist\n        first_element_list = []\n        # Iterating over the list of lists\n        for i in list_of_lists:\n            # Appending the first elements of each sublist to the first element list\n            first_element_list.append(i[0])\n        # Returning the first element list\n        return first_element_list\n\nfirst_element_in_each_list([[1, 2, 3], [3, 4, 5], [4, 5, 6]])",
      11.734375
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef first(items):\n    # return a list of the first item in each list\n    return [x[0] for x in items]\n\n\ndef test_first():\n    assert_equal(first([[1, 2], [3, 4], [5, 6, 7]]), [1, 3, 5])\n    assert_equal(first([['python', 'code'], ['fun']]), ['python', 'fun'])\n    assert_equal(first([['a', 'b', 'c'], ['d', 'e'], ['f']]), ['a', 'd', 'f'])\n    assert_equal(first([[], [1, 2, 3, 4], [5, 6, 7, 8, 9]]), ['', 1, 5])\n    print('Success: test_first')\n\n\ndef main():\n    test_first()\n\n\nif __name__ == '__main__':\n    main()",
      11.53125
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef first(lst):\n    return [x[0] for x in lst]\n\n\nclass TestFirst():\n\n    def test(self, sol):\n        assert_equal(sol([[1, 2, 3], [4, 5], [6, 7, 8, 9]]), [1, 4, 6])\n        assert_equal(sol([[1, 2], [3, 4, 5, 6, 7], [8, 9, 10]]), [1, 3, 8])\n        assert_equal(sol([[1], [2, 3, 4], [5, 6, 7, 8]]), [1, 2, 5])\n        print(\"ALL TEST CASES PASSED\")\n\n\nif __name__ == '__main__':\n    t = TestFirst()\n    t.test(first)",
      10.3515625
    ],
    [
      "from unit_tester import test\n\n\ndef first_element(list_of_lists):\n    \"return a list with the first element of each sublist\"\n    return [sublist[0] for sublist in list_of_lists]\n\n\ndef first_element_b(list_of_lists):\n    \"return a list with the first element of each sublist\"\n    return [sublist[0] for sublist in list_of_lists]\n\n\ntest(first_element([[1, 2], [3, 4], [5, 6, 7]]) == [1, 3, 5])\ntest(first_element([[1, 2], [3, 4, 5], [6, 7]]) == [1, 3, 6])\ntest(first_element([[100, 2, 50, 1], [4, 7], [15]]) == [100, 4, 15])\n\n\n# test(first_element_b([[1, 2], [3, 4], [5, 6, 7]]) == [1, 3, 5])\n# test(first_element_b([[1, 2], [3, 4, 5], [6, 7]]) == [1, 3, 6])\n# test(first_element_b([[100, 2, 50, 1], [4, 7], [15]]) == [100, 4, 15])",
      9.9609375
    ],
    [
      "def first_element(list_of_lists):\n    return [sub[0] for sub in list_of_lists]\n\n\ndef main():\n    print(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\nif __name__ == '__main__':\n    main()",
      9.28125
    ],
    [
      "from itertools import chain, islice\n\n\ndef first_element_of_sublists(lst):\n    return list(map(lambda x: x[0], lst))\n\n\ndef first_element_of_sublists_2(lst):\n    return list(map(next, lst))\n\n\ndef first_element_of_sublists_3(lst):\n    return list(chain.from_iterable(islice(x, 0, 1) for x in lst))\n\n\ndef main():\n    lst = [[1, 2, 3, 4, 5], [11, 22, 33, 44, 55], [111, 222, 333, 444, 555]]\n    print(\"First element of sublists: \", first_element_of_sublists(lst))\n    print(\"First element of sublists: \", first_element_of_sublists_2(lst))\n    print(\"First element of sublists: \", first_element_of_sublists_3(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      8.8984375
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef first(items):\n    return [item[0] for item in items]\n\n\nclass TestFirst(object):\n\n    def test(self, sol):\n        assert_equal(sol([[1, 2, 3], [4, 5], [6, 7, 8, 9]]), [1, 4, 6])\n        assert_equal(sol([[1, 2], [3, 4, 5], [6, 7, 8, 9]]), [1, 3, 6])\n        assert_equal(sol([[1, 2, 3]]), [1])\n        assert_equal(sol([]), [])\n        print(\"ALL TEST CASES PASSED\")\n\n\n# Run Tests\nt = TestFirst()\nt.test(first)",
      8.2578125
    ],
    [
      "def get_first_element(lst):\n    result = []\n    for sublst in lst:\n        result.append(sublst[0])\n    return result\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(get_first_element(lst))",
      8.21875
    ],
    [
      "from functools import reduce\n\n\ndef first_element(l):\n    return reduce(lambda x, y: x + [y[0]], l, [])\n\n\ndef main():\n    l = [[1, 2], [3, 4], [5, 6]]\n    print(first_element(l))\n\n\nif __name__ == \"__main__\":\n    main()",
      7.25
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef first_element(arr):\n    return [arr[i][0] for i in range(len(arr))]\n\n\nclass TestFirstElement(object):\n\n    @classmethod\n    def setup_class(cls):\n        cls.solution = first_element\n\n    def test_first_element_none(self):\n        assert_equal(self.solution(None), None)\n\n    def test_first_element_empty(self):\n        assert_equal(self.solution([]), [])\n\n    def test_first_element_one(self):\n        assert_equal(self.solution([1]), [1])\n\n    def test_first_element_two(self):\n        assert_equal(self.solution([[1, 2], [3, 4]]), [1, 3])",
      6.96875
    ],
    [
      "def first_element(lists):\n    first_elements = []\n\n    for i in range(len(lists)):\n        first_elements.append(lists[i][0])\n\n    return first_elements\n\n\nprint(first_element([[1,2,3],[4,5,6],[7,8,9]]))",
      6.87109375
    ],
    [
      "def get_first_elem(lst):\n    \"\"\"\n    >>> get_first_elem([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [1, 3, 5, 7]\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.93359375
    ],
    [
      "from functools import reduce\n\n\ndef get_first_element(list_of_lists):\n    return reduce(lambda x, y: x + [y[0]], list_of_lists, [])\n\n\nprint(get_first_element([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]))",
      5.80859375
    ],
    [
      "from functools import reduce\n\n\ndef get_first_element(list_of_sublists):\n    return reduce(lambda x, y: x+[y[0]], list_of_sublists, [])\n\n\nprint(get_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(get_first_element([[1, 2, 3], [4, 5], [7, 8, 9]]))",
      5.28125
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef first_element(lst):\n    return [sub_lst[0] for sub_lst in lst]\n\n\ndef first_element(lst):\n    return list(map(lambda sub_lst: sub_lst[0], lst))\n\n\nclass TestFirstElement(object):\n\n    def test(self, solution):\n        assert_equal(solution([[1, 2, 3], [4, 5], [6, 7, 8, 9]]), [1, 4, 6])\n        assert_equal(solution([[1, 2], [3, 4, 5, 6, 7], [8, 9, 10]]), [1, 3, 8])\n        assert_equal(solution([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]), [1])",
      4.0859375
    ],
    [
      "def first_element(list_of_lists):\n    return [sublist[0] for sublist in list_of_lists]\n\n\ndef main():\n    list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    result = first_element(list_of_lists)\n    print(\"First Elements of each sublist:\")\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      3.986328125
    ],
    [
      "def get_first_element(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n\n\ndef main():\n    lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    print(get_first_element(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.380859375
    ],
    [
      "from unittest import TestCase\n\n\ndef first_element(array):\n    return [i[0] for i in array]\n\n\nclass TestFirstElement(TestCase):\n\n    def test_first_element(self):\n        assert first_element([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]",
      3.37890625
    ],
    [
      "def first_element_in_sublists(lst):\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result\n\n\nprint(first_element_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(first_element_in_sublists([[1, 2, 3], [4], [7, 8, 9]]))\nprint(first_element_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))",
      3.232421875
    ],
    [
      "def first_elements(list):\n    return [sub_list[0] for sub_list in list]\n\nprint(first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(first_elements([[\"Hello\", \"World\"], [\"Namaste\", \"Bhavesh\"]]))\n\n\"\"\"\nFirst element of each sublist\n\"\"\"",
      2.439453125
    ],
    [
      "from unit_tester import test\n\n\ndef first_element(list_of_lists):\n    return [sublist[0] for sublist in list_of_lists]\n\n\n# test cases\ntest(first_element([[1, 2], [3, 4], [5, 6, 7]]), [1, 3, 5])\ntest(first_element([[1, 2, 3]]), [1])\ntest(first_element([]), [])",
      2.4296875
    ],
    [
      "def get_first_element(data):\n    return [item[0] for item in data]\n\n\nif __name__ == \"__main__\":\n    data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(get_first_element(data))",
      2.419921875
    ],
    [
      "def first_elem(a):\n    result = []\n    for i in a:\n        result.append(i[0])\n    return result\n\n\na = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(first_elem(a))",
      2.33984375
    ],
    [
      "def get_first_elements(list_of_lists):\n    return [sublist[0] for sublist in list_of_lists]\n\n\nprint(get_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(get_first_elements([[\"Hello\", \"World\"], [\"I\", \"am\", \"learning\"], [\"Python\", \"functions\"]]))",
      2.27734375
    ],
    [
      "from typing import List\n\n\ndef get_first_element(data: List[list]) -> List[int]:\n    \"\"\"Returns the first element of each sublist.\n\n    Args:\n        data (List[list]): list of lists\n\n    Returns:\n        List[int]: list of first elements of sublists\n    \"\"\"\n    return [sublist[0] for sublist in data]\n\n\nif __name__ == \"__main__\":\n    print(get_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      2.146484375
    ],
    [
      "def first_element(list_of_lists):\n    first_elements = []\n    for sublist in list_of_lists:\n        first_elements.append(sublist[0])\n    return first_elements",
      2.0390625
    ],
    [
      "def get_first_element(lst):\n    return [x[0] for x in lst]\n\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(get_first_element(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.755859375
    ],
    [
      "def get_first_element_of_sublist(list_of_list):\n    return [i[0] for i in list_of_list]\n\n\nprint(get_first_element_of_sublist([[1, 2], [3, 4], [5, 6]]))",
      1.5283203125
    ],
    [
      "from typing import List\n\n\ndef first_element(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Get first element of each sublist.\n    :param lists:\n    :return:\n    >>> first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [1, 4, 7]\n    \"\"\"\n    return [item[0] for item in lists]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.4638671875
    ],
    [
      "def first_element(list_of_lists):\n    result = []\n    for sublist in list_of_lists:\n        result.append(sublist[0])\n    return result",
      1.4306640625
    ],
    [
      "def first_element(lst):\n    \"\"\"\n    >>> first_element([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [1, 3, 5, 7]\n    \"\"\"\n    return [lst[i][0] for i in range(len(lst))]\n\ndef first_element_lambda(lst):\n    \"\"\"\n    >>> first_element_lambda([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [1, 3, 5, 7]\n    \"\"\"\n    return list(map(lambda x: x[0], lst))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      1.31640625
    ],
    [
      "from unittest import TestCase\n\n\ndef first_element(list_of_list):\n    return [x[0] for x in list_of_list]\n\n\nclass TestFirstElement(TestCase):\n\n    def test_first_element(self):\n        self.assertListEqual(\n            [1, 2, 3], first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        )",
      0.99267578125
    ],
    [
      "def get_first_element(l):\n    new_l = []\n    for i in l:\n        new_l.append(i[0])\n    return new_l\n\n\nprint(get_first_element([[1, 2], [3, 4], [5, 6]]))",
      0.84130859375
    ],
    [
      "def first_element(lst):\n    \"\"\"Returns the first element of each sublist.\"\"\"\n    return [item[0] for item in lst]\n\nprint(first_element([[1, 2], [3, 4], [5, 6], [7, 8]]))",
      0.828125
    ],
    [
      "def first_element(sublists):\n    return [sublist[0] for sublist in sublists]\n\n\nprint(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      0.810546875
    ],
    [
      "def first_elements(l):\n    return [i[0] for i in l]\n\n\nprint(first_elements([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))",
      0.6904296875
    ],
    [
      "def get_first_element_in_sublists(list_of_lists):\n    return [sublist[0] for sublist in list_of_lists]\n\n\ndef main():\n    list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(get_first_element_in_sublists(list_of_lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.689453125
    ],
    [
      "def first_element_of_each(list_of_sublists):\n    \"\"\"\n    Return the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in list_of_sublists]",
      0.436767578125
    ],
    [
      "from functools import reduce\n\n\ndef get_first(list_of_lists):\n    return reduce(lambda x, y: x + [y[0]], list_of_lists, [])\n\n\nprint(get_first([[1, 2], [3, 4], [5, 6]]))",
      0.274169921875
    ],
    [
      "from functools import reduce\n\n\ndef first_element(lst):\n    return reduce(lambda x, y: x + [y[0]], lst, [])\n\n\ndef main():\n    lst = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    print(first_element(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.240234375
    ],
    [
      "def get_first(list_of_lists):\n    return [sub_list[0] for sub_list in list_of_lists]\n\n\nprint(get_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      0.13232421875
    ],
    [
      "def first_element(list_of_lists):\n    return [i[0] for i in list_of_lists]",
      0.095703125
    ],
    [
      "def get_first_element(list_of_lists):\n    \"\"\"Get first element of each sublist.\"\"\"\n    return [item[0] for item in list_of_lists]",
      0.033843994140625
    ],
    [
      "def get_first_element(lst):\n    result = []\n    for l in lst:\n        result.append(l[0])\n    return result\n\n\nprint(get_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      0.033477783203125
    ],
    [
      "def first_element(sublist):\n    first = []\n    for i in sublist:\n        first.append(i[0])\n    return first\n\n\nif __name__ == \"__main__\":\n    sublist = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(first_element(sublist))",
      0.0289306640625
    ],
    [
      "def first_element(x):\n    return [x[i][0] for i in range(len(x))]\n\n\ndef main():\n    x = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(\"Original list:\")\n    print(x)\n    print(\"First element of each sublist:\")\n    print(first_element(x))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.302490234375
    ],
    [
      "from unit_tester import test\n\n\ndef first_element(lst):\n    \"Return a list of the first elements of each sublist in lst.\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n\n\ntest(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7])\ntest(first_element([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [1, 4, 6])\ntest(first_element([[1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11]]) == [1, 4, 6])",
      -0.462158203125
    ],
    [
      "def first_element(input_list):\n    first_elements = []\n    for i in input_list:\n        first_elements.append(i[0])\n    return first_elements\n\n\nprint(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(first_element([[1, 2, 3], [4], [7, 8, 9]]))",
      -0.66943359375
    ],
    [
      "def get_first(lists):\n    \"\"\"\n    >>> get_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [1, 4, 7]\n    \"\"\"\n    return [lists[i][0] for i in range(len(lists))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.71630859375
    ],
    [
      "def first_element(lst):\n    return [sublist[0] for sublist in lst]\n\n\ndef main():\n    print(first_element([[1, 2], [3, 4], [5, 6]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.75048828125
    ],
    [
      "def first_element_in_sublist(list_of_sublists):\n    return [sublist[0] for sublist in list_of_sublists]\n\n\nprint(first_element_in_sublist([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.7646484375
    ],
    [
      "def first_element(lst):\n    return [x[0] for x in lst]\n\n\ndef test_first_element():\n    assert first_element([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 3, 5, 7]\n\n\nif __name__ == \"__main__\":\n    test_first_element()",
      -0.84130859375
    ],
    [
      "def first_element(list_of_sublists):\n    return [sublist[0] for sublist in list_of_sublists]",
      -0.8427734375
    ],
    [
      "from unit_tester import test\n\n\ndef first_element(list_of_lists):\n    \"\"\"Return a new list with the first element of each of the given lists.\n\n    >>> first_element([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [1, 3, 5, 7]\n    >>> first_element([[100, 200, 300], [400, 500, 600], [700, 800, 900]])\n    [100, 400, 700]\n    >>> first_element([[], [1, 2], [3, 4, 5], [6, 7, 8, 9], [100, 300, 500]])\n    [None, 1, 3, 6, 100]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\ndef first_element_bad(list_of_lists):\n    \"\"\"Return a new list with the first element of each of the given lists.\n\n    >>> first_element_bad([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [1, 3, 5, 7]\n    >>> first_element_bad([[100, 200, 300], [400, 500, 600], [700, 800, 900]])\n    [100, 400, 700]\n    >>> first_element_bad([[], [1, 2], [3, 4, 5], [6, 7, 8, 9], [100, 300, 500]])\n    [None, 1, 3, 6, 100]\n    \"\"\"\n    return [x[0] for x in list_of_lists]\n\n\ntest(first_element, first_element_bad,\n     \"Testing first_element() and first_",
      -0.853515625
    ],
    [
      "def first_element_sublist(lists):\n    for i in lists:\n        print(i[0])\n\n\nfirst_element_sublist([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
      -0.85595703125
    ],
    [
      "def first_element(lst):\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result\n\n\nprint(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.85595703125
    ],
    [
      "def get_first_element(lst):\n    return [sublist[0] for sublist in lst]\n\n\ndef main():\n    print(get_first_element([[1, 2], [3, 4], [5, 6]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85595703125
    ],
    [
      "def first_element_of_sublist(list_of_lists):\n    first_elements = []\n    for sublist in list_of_lists:\n        first_elements.append(sublist[0])\n    return first_elements",
      -0.85693359375
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef first_element(array):\n    if not isinstance(array, list):\n        raise TypeError(\"Invalid argument type\")\n    return [sub[0] for sub in array]\n\n\nclass TestFirstElement(object):\n\n    def test(self, sol):\n        assert_equal(sol([[1, 2, 3], [4, 5], [6, 7, 8, 9]]), [1, 4, 6])\n        assert_equal(sol([[1, 2], [3, 4, 5, 6, 7], [8], []]), [1, 3, 8])\n        print(\"ALL TEST CASES PASSED\")\n\n\nif __name__ == '__main__':\n    t = TestFirstElement()\n    t.test(first_element)",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\ndef first_element(list_of_sub_lists):\n    return [item[0] for item in list_of_sub_lists]\n\n\ndef main():\n    list_of_sub_lists = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12]\n    ]\n\n    assert first_element(list_of_sub_lists) == [1, 5, 9]\n\n    print(\"OK\")\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def first_element(list_of_lists):\n    \"\"\"\n    Return the first element of each sublist.\n\n    Args:\n     list_of_lists (list): A list of sublists.\n\n    Returns:\n     list: A list of the first elements of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in list_of_lists]\n\nif __name__ == '__main__':\n    print(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(first_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))",
      -0.85693359375
    ],
    [
      "def first_element(arr):\n    result = []\n    for i in arr:\n        result.append(i[0])\n    return result\n\n\nprint(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.85693359375
    ],
    [
      "def first_element(list_of_lists):\n    return [sublist[0] for sublist in list_of_lists]",
      -0.85693359375
    ],
    [
      "from copy import deepcopy\n\n\ndef first_element_of_sublist(list_of_sublists):\n    \"\"\"Return the first element of each sublist.\"\"\"\n    sublists = deepcopy(list_of_sublists)\n    for i in range(len(sublists)):\n        sublists[i] = sublists[i][0]\n    return sublists",
      -0.85693359375
    ],
    [
      "def get_first(lists):\n    return [x[0] for x in lists]\n\n\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(get_first(lists))",
      -0.85693359375
    ],
    [
      "def first_element(input_list):\n    if len(input_list) == 0:\n        return input_list\n    return [i[0] for i in input_list]",
      -0.85693359375
    ],
    [
      "def first_elem(arr):\n    for i in range(len(arr)):\n        yield arr[i][0]\n\n\nif __name__ == \"__main__\":\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(list(first_elem(arr)))",
      -0.85693359375
    ],
    [
      "def first_element(list_of_lists):\n    result = []\n    for i in list_of_lists:\n        result.append(i[0])\n    return result\n\n\nprint(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.85693359375
    ],
    [
      "def first_element(data):\n    result = []\n    for i in data:\n        result.append(i[0])\n    return result\n\n\ndef first_element_improved(data):\n    return [i[0] for i in data]",
      -0.85693359375
    ],
    [
      "def get_first_element(list_of_list):\n    return [sub[0] for sub in list_of_list]",
      -0.857421875
    ],
    [
      "def first_element(data):\n    \"\"\"\n    Return the first element of each sublist.\n    \"\"\"\n    return [d[0] for d in data]",
      -0.857421875
    ],
    [
      "def first_element(lst):\n    return [i[0] for i in lst]",
      -0.857421875
    ],
    [
      "def first_element_of_sublist(sublist):\n    return [item[0] for item in sublist]\n\n\nprint(first_element_of_sublist([[1, 2], [3, 4], [5, 6]]))",
      -0.85791015625
    ],
    [
      "def first_element(list_of_list):\n    \"\"\"\n    Return a list of the first element of each sublist\n    \"\"\"\n    return [item[0] for item in list_of_list]",
      -0.912109375
    ],
    [
      "def first_element(input_list):\n    return [i[0] for i in input_list]\n\n\ninput_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12],\n]\nprint(\"Input:\", input_list)\nprint(\"Output:\", first_element(input_list))",
      -0.96337890625
    ],
    [
      "def first_element(lists):\n    return [list[0] for list in lists]\n\n\nif __name__ == '__main__':\n    print(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.98876953125
    ],
    [
      "def first_element(list_of_list):\n    return [item[0] for item in list_of_list]\n\n\nprint(first_element([[1, 2, 3], [4, 5, 6]]))",
      -0.990234375
    ],
    [
      "def get_first_elements(list_of_list):\n    return [sublist[0] for sublist in list_of_list]\n\n\nprint(get_first_elements([[1, 2, 3], [3, 4, 5], [4, 5, 6]]))",
      -1.0400390625
    ],
    [
      "def get_first_element(sublist):\n    \"\"\"\n    Get first element of each sublist.\n\n    :param sublist: list of sublists\n    :return: list of first elements\n    \"\"\"\n    return [sublist[0] for sublist in sublist]\n\n\ndef main():\n    \"\"\"\n    Print the result of the get_first_element function.\n    \"\"\"\n    print(get_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\nif __name__ == '__main__':\n    main()",
      -1.0556640625
    ],
    [
      "def first_element_of_each_list(lists):\n    for i in lists:\n        print(i[0])\n\n\nfirst_element_of_each_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
      -1.208984375
    ],
    [
      "def get_first_element(list_of_lists):\n    return [sublist[0] for sublist in list_of_lists]\n\nlist_of_lists = [\n    [1, 2, 3],\n    ['a', 'b', 'c'],\n    [1, 2, 3, 4],\n    ['x', 'y', 'z'],\n]\n\nprint(get_first_element(list_of_lists))",
      -1.3330078125
    ],
    [
      "from functools import reduce\n\n\ndef first_element(test_list):\n    return reduce(lambda x, y: x + [y[0]], test_list, [])\n\n\ndef main():\n    list1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(\"Original List:\")\n    print(list1)\n    print(\"First element of each sublist:\")\n    print(first_element(list1))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.4560546875
    ],
    [
      "def get_first_element(list_of_list):\n    return [sublist[0] for sublist in list_of_list]\n\n\nif __name__ == \"__main__\":\n    a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(get_first_element(a))",
      -1.5537109375
    ],
    [
      "def first_element(l):\n    return [i[0] for i in l]\n\n\nl = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(first_element(l))",
      -1.9833984375
    ],
    [
      "from itertools import chain\n\n\ndef first_element_of_sublists(list_of_lists):\n    \"\"\"Return first element of each sublist.\"\"\"\n    return list(chain.from_iterable(map(lambda x: [x[0]], list_of_lists)))",
      -2.482421875
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef first_element(list_of_lists):\n    return [x[0] for x in list_of_lists]\n\n\ndef test_first_element():\n    list_of_lists = [\n        [10, 20, 30, 40, 50],\n        [15, 25, 35, 45],\n        [27, 30, 32],\n        [49]\n    ]\n    expected = [10, 15, 27, 49]\n    assert_equal(first_element(list_of_lists), expected)",
      -3.37109375
    ],
    [
      "from nose.tools import assert_equal\n\n\ndef get_first(lst):\n    \"\"\"\n    >>> lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> result = get_first(lst)\n    >>> assert_equal(result, [1, 2, 3, 4, 5, 6, 7])\n    >>> lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> result = get_first(lst)\n    >>> assert_equal(result, [1, 2, 3, 4, 5, 6, 7, 8])\n    \"\"\"\n    return [lst[i] for i in range(7)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -12.625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}