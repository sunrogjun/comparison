{
  "problem": {
    "task_id": "MBPP/158",
    "prompt": "Write a python function to find k number of operations required to make all elements equal.",
    "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
    "test_list": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ],
    "challenge_test_list": [],
    "problem_id": 147
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def find_k_operations(arr, k):\n    arr.sort()\n    n = len(arr)\n    mean = sum(arr) / n\n    count = 0\n    for i in range(n):\n        count += abs(arr[i] - mean)\n    if count <= k:\n        return True\n    return False\n\n\nprint(find_k_operations([1, 2, 3, 4, 5, 5], 2))",
      3.208984375
    ],
    [
      "from collections import Counter\n\n\ndef k_operations(a, k):\n    counter = Counter(a)\n    count_a = counter[a[0]]\n    if count_a <= k:\n        return k - count_a\n    else:\n        return -1\n\n\ndef main():\n    a = [2, 1, 1, 1, 1, 1, 2, 3, 3]\n    k = 3\n    print(k_operations(a, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.0439453125
    ],
    [
      "def make_equal(arr, k):\n    n = len(arr)\n    if n == 0:\n        return -1\n    arr.sort()\n    median = arr[n//2]\n    # print(median)\n    count = 0\n    for i in range(n):\n        count += abs(arr[i] - median)\n    # print(count)\n    if count <= k:\n        return count\n    else:\n        return -1\n\n\nif __name__ == \"__main__\":\n    # arr = [1, 2, 3, 4, 5]\n    # arr = [2, 2, 2, 2, 2]\n    arr = [1, 3, 1, 1, 1]\n    k = 2\n    print(make_equal(arr, k))",
      0.470947265625
    ],
    [
      "def find_k_operations(arr, k):\n    if len(arr) == 0:\n        return -1\n\n    max_element = max(arr)\n    min_element = min(arr)\n    diff = max_element - min_element\n    if diff < k:\n        return -1\n\n    return k - diff\n\n\nif __name__ == \"__main__\":\n    print(find_k_operations([1, 2, 3, 4, 5], 2))",
      0.4248046875
    ],
    [
      "def minimum_operations(arr, k):\n    n = len(arr)\n    count = 0\n    arr.sort()\n    for i in range(n-1):\n        if arr[i+1]-arr[i] > 0:\n            count += (arr[i+1]-arr[i])\n    if count % k == 0:\n        return count/k\n    else:\n        return count//k+1\n\n\nprint(minimum_operations([1, 5, 3, 4, 2], 3))",
      -0.039520263671875
    ],
    [
      "def make_equal(arr, k):\n    arr_sum = sum(arr)\n    if arr_sum % k != 0:\n        return -1\n    return arr_sum / k\n\n\ndef main():\n    arr = [2, 4, 6, 1, 3]\n    k = 3\n    print(make_equal(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.27392578125
    ],
    [
      "def number_of_operations(A):\n    n = len(A)\n    max_element = max(A)\n    min_element = min(A)\n\n    k = max_element - min_element\n    operations = k * (n-1)\n    return operations\n\n\nif __name__ == \"__main__\":\n    A = [2, 1, 3, 2, 1, 2]\n    print(number_of_operations(A))",
      -0.499755859375
    ],
    [
      "def make_equal(arr, k):\n    count = 0\n    n = len(arr)\n    arr.sort()\n    mid = arr[n//2]\n    for i in range(n):\n        if arr[i] != mid:\n            count += abs(arr[i]-mid)\n        if count > k:\n            return -1\n    return count\n\nprint(make_equal([1, 2, 3, 4, 5], 10))\nprint(make_equal([1, 2, 3, 4, 5], 11))\nprint(make_equal([1, 1, 1, 5, 5], 2))\nprint(make_equal([5, 5, 5, 5, 5], 1))\nprint(make_equal([1, 2, 3, 4, 100], 50))",
      -0.78466796875
    ],
    [
      "def equal(a, b):\n    return abs(a - b)\n\n\ndef min_ops(a, b, c):\n    return min(equal(a, b), equal(a, c), equal(b, c))\n\n\ndef find_k_ops(a, b, c):\n    k = min_ops(a, b, c)\n    return k\n\n\na = 2\nb = 5\nc = 4\n\nprint(find_k_ops(a, b, c))",
      -0.85595703125
    ],
    [
      "def equal_elements(arr):\n    n = len(arr)\n    count = 0\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            count += 1\n    return count\n\n\ndef main():\n    print(equal_elements([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85595703125
    ],
    [
      "from functools import reduce\n\n\ndef find_k_operations(arr):\n    return reduce(lambda x, y: x + y, arr) % len(arr)\n\n\ndef main():\n    print(find_k_operations([1, 2, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def number_of_operations(arr, k):\n    arr.sort()\n    return k - (arr[-1] - arr[0])\n\n\nprint(number_of_operations([1, 2, 3, 5, 6], 4))",
      -0.85693359375
    ],
    [
      "def makeEqual(arr):\n    return max(arr) - min(arr)\n\n\nprint(makeEqual([1,2,3,4,5,6]))",
      -0.85693359375
    ],
    [
      "def find_k_operations(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] != arr[j]:\n                count += 1\n\n    return k if count <= k else -1\n\n\ndef main():\n    print(find_k_operations([1, 2, 3, 4, 5, 6, 7], 2))\n    print(find_k_operations([1, 2, 3, 4, 5, 6, 7], 3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def find_operations(arr, k):\n    if len(arr) < 2:\n        return -1\n    if k < 0:\n        return -1\n    if k == 0:\n        return 0\n    if len(arr) < k:\n        return -1\n    arr.sort()\n    # print(arr)\n    # print(len(arr))\n    # print(k)\n    for i in range(len(arr)):\n        if arr[i] != arr[0]:\n            return k - i\n\n\nprint(find_operations([1, 2, 3], 2))\nprint(find_operations([1, 2, 3], 3))\nprint(find_operations([1, 2, 3], 4))\nprint(find_operations([1, 2, 3], 1))",
      -0.85693359375
    ],
    [
      "def diff(list_a, list_b):\n    diff_list = []\n    for i in range(len(list_a)):\n        diff_list.append(list_a[i]-list_b[i])\n    return diff_list\n\ndef find_operations(list_a, list_b):\n    diff_list = diff(list_a, list_b)\n    operations = 0\n    for i in range(len(diff_list)):\n        if abs(diff_list[i]) > 0:\n            operations += abs(diff_list[i])\n    return operations\n\ndef main():\n    list_a = [1, 2, 3, 4]\n    list_b = [2, 3, 4, 5]\n    print(find_operations(list_a, list_b))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def equal_elements(arr, k):\n    n = len(arr)\n    target = sum(arr) // n\n    count = 0\n    for i in range(n):\n        count += abs(arr[i] - target)\n    return count\n\n\ndef main():\n    arr = [3, 2, 1, 5, 4]\n    k = 3\n    print(equal_elements(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "from math import ceil\n\n\ndef find_k_operations(array, k):\n    \"\"\"\n    :param array: list\n    :param k: int\n    :return: int\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k cannot be negative\")\n    if k == 0:\n        return 0\n    min_element = min(array)\n    max_element = max(array)\n    if max_element == min_element:\n        return 0\n    return ceil((max_element - min_element) / k)\n\n\ndef main():\n    array = [1, 3, 4, 5]\n    k = 2\n    print(\"Original Array: {}\\nk: {}\".format(array, k))\n    res = find_k_operations(array, k)\n    print(\"Minimum number of operations required: {}\\n\".format(res))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def make_equal(list_num, k):\n    count = 0\n    for i in range(0, len(list_num) - 1):\n        for j in range(i + 1, len(list_num)):\n            count += abs(list_num[i] - list_num[j])\n\n    if count <= k:\n        return True\n    else:\n        return False\n\n\nprint(make_equal([1, 2, 3, 4, 5, 6], 3))",
      -0.85693359375
    ],
    [
      "def equal_elements(arr, k):\n    n = len(arr)\n    target = sum(arr)//n\n    count = 0\n\n    for i in range(n):\n        count += abs(arr[i] - target)\n\n    return count <= k\n\n\narr = [1, 2, 3, 4, 5]\nk = 3\nprint(equal_elements(arr, k))",
      -0.85693359375
    ],
    [
      "def find_k_operations(arr, k):\n    arr.sort()\n    n = len(arr)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return abs(arr[0] - arr[1])\n    else:\n        return max(find_k_operations(arr[:n//2], k), find_k_operations(arr[n//2:], k))\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(\"Enter the array: \").split()))\n    k = int(input(\"Enter the k: \"))\n    print(find_k_operations(arr, k))",
      -0.85693359375
    ],
    [
      "def find_k_number_of_operations(arr, k):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] > k:\n            return k\n        k -= arr[i+1] - arr[i]\n    return k",
      -0.85693359375
    ],
    [
      "def find_k_operations(a, b, c):\n    max_val = max(a, b, c)\n    min_val = min(a, b, c)\n    return max_val - min_val\n\n\ndef main():\n    print(find_k_operations(5, 1, 5))\n    print(find_k_operations(2, 1, 1))\n    print(find_k_operations(3, 1, 2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def k_operations(arr, k):\n    arr.sort()\n    print(arr)\n    m = arr[0]\n    n = arr[-1]\n    print(m, n)\n    return k - (m * n)\n\n\nprint(k_operations([1, 2, 2, 2, 2], 15))",
      -0.8583984375
    ],
    [
      "def get_minimum_operations_required(arr, k):\n    n = len(arr)\n    diff = max(arr) - min(arr)\n    if diff // k > 1:\n        return diff // k\n    else:\n        return diff\n\n\ndef main():\n    arr = [1, 4, 1, 3]\n    k = 2\n    print(\"Minimum operations required: \" + str(get_minimum_operations_required(arr, k)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def make_equal(arr, k):\n    arr.sort()\n    i = 1\n    while i < len(arr):\n        if arr[i] != arr[i-1]:\n            k -= 1\n            if k < 0:\n                return -1\n        i += 1\n    return k\n\n\ndef main():\n    arr_input = [1, 2, 3, 4, 5]\n    k = 2\n    print(make_equal(arr_input, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def get_num_of_ops_to_make_equal(arr):\n    return len(arr) - len(set(arr))\n\ndef main():\n    arr = [1,2,3,4,5]\n    ops = get_num_of_ops_to_make_equal(arr)\n    print(ops)\n\n\nmain()",
      -0.8583984375
    ],
    [
      "def find_k_operations(arr, k):\n    arr.sort()\n    max_element = max(arr)\n    min_element = min(arr)\n    if max_element - min_element > k:\n        return -1\n    return k - (max_element - min_element)\n\n\ndef main():\n    arr_input = [1, 2, 3, 4, 5, 6]\n    k_input = 3\n    print(\"Input: \" + str(arr_input) + \", \" + str(k_input))\n    ans = find_k_operations(arr_input, k_input)\n    if ans == -1:\n        print(\"Output: Impossible\")\n    else:\n        print(\"Output: \" + str(ans))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def make_equal(a, b, c):\n    count = 0\n    if a > b:\n        count += a - b\n    elif b > a:\n        count += b - a\n    if c > a:\n        count += c - a\n    elif a > c:\n        count += a - c\n    elif b > c:\n        count += b - c\n    else:\n        count += 0\n    return count\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(make_equal(a, b, c))",
      -0.8583984375
    ],
    [
      "def equalize(a, k):\n    a.sort()\n    i = 0\n    while i < k:\n        a[0] += 1\n        a[1] += 1\n        a[2] += 1\n        i += 1\n    return a\n\n\nprint(equalize([1, 2, 3], 3))",
      -0.8583984375
    ],
    [
      "def make_equal(arr, k):\n    arr.sort()\n    n = len(arr)\n    mid = n // 2\n    if k < mid:\n        for i in range(mid):\n            arr[i] = arr[i] + k\n        return arr\n    else:\n        for i in range(mid, n):\n            arr[i] = arr[i] - (k - mid)\n        return arr\n\n\ndef main():\n    arr_input = [1, 3, 4, 5, 6, 7, 8]\n    k_input = 2\n    print(\"Input array is: \" + str(arr_input))\n    print(\"Input k is: \" + str(k_input))\n    print(\"Output array is: \" + str(make_equal(arr_input, k_input)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "from collections import Counter\n\ndef equal_sum(arr, k):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return k\n\n    c = Counter(arr)\n    keys = list(c.keys())\n    keys.sort()\n    diff = keys[-1] - keys[0]\n    if diff == 0:\n        return 0\n    elif diff > k:\n        return -1\n    else:\n        return k - diff\n\n\nprint(equal_sum([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], 5))",
      -0.85888671875
    ],
    [
      "def make_equal(a, b):\n    if a == b:\n        return 0\n\n    n = len(a)\n    if n != len(b):\n        return -1\n\n    total_ops = 0\n\n    for i in range(n):\n        if a[i] == b[i]:\n            continue\n\n        total_ops += abs(a[i] - b[i])\n        a[i] = b[i]\n\n    return total_ops",
      -0.85888671875
    ],
    [
      "def make_equal(arr, k):\n    n = len(arr)\n    arr.sort()\n    diff = arr[n - 1] - arr[0]\n    if k < diff:\n        return -1\n    else:\n        return k - diff\n\n\ndef main():\n    arr_input = [1, 2, 3, 4]\n    k_input = 2\n    print(\"Input: \" +\n          str(arr_input) + \" \" + str(k_input))\n    print(\"Answer \" + str(make_equal(arr_input, k_input)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def equal(arr, k):\n    n = len(arr)\n    c = [0] * 100\n    for i in arr:\n        c[i] += 1\n    max_count = max(c)\n    if max_count <= k:\n        return 0\n    else:\n        return max_count - k\n\n\ndef main():\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    k = 2\n    ans = equal(arr, k)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def equalize_list(a, b, c):\n    max_val = max(a, b, c)\n    operations = max_val - min(a, b, c)\n    return operations\n\n\na = int(input(\"Enter first value: \"))\nb = int(input(\"Enter second value: \"))\nc = int(input(\"Enter third value: \"))\nprint(equalize_list(a, b, c))",
      -0.85888671875
    ],
    [
      "def make_equal(arr):\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return abs(arr[0] - arr[1])\n    return min(make_equal(arr[1:]), make_equal(arr[:-1])) + abs(arr[0] - arr[-1])\n\n\ndef main():\n    arr = [1, 3, 5, 7, 9, 2, 8]\n    print(\"Array elements are: \", arr)\n    print(\"K number of operations required to make all elements equal: \", make_equal(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def k_operation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    max_val = max(arr)\n    min_val = min(arr)\n    if max_val == min_val:\n        return 0\n    if min_val == 0:\n        return max_val\n    k_val = min_val - max_val\n    return k_val\n\n\ndef main():\n    arr_input = [2, 4, 5, 2, 1, 3]\n    print(\"Input: \" + str(arr_input))\n    print(\"k operations required: \" + str(k_operation(arr_input)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def equalize(a,k):\n    n=len(a)\n    if k>n:\n        print(\"k is greater than n\")\n    else:\n        a.sort()\n        median=a[n//2]\n        count=0\n        for i in range(n):\n            count+=abs(a[i]-median)\n        if count<=k:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n\nequalize([1,2,3,4,5], 1)",
      -0.86083984375
    ],
    [
      "def find_k_operations(arr):\n    arr_set = set(arr)\n    if len(arr_set) == 1:\n        return 0\n    else:\n        return max(arr_set) - min(arr_set) - 1\n\n\ndef main():\n    arr = list(map(int, input(\"Enter the number list: \").split()))\n    print(find_k_operations(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.86083984375
    ],
    [
      "def make_equal(arr):\n    arr.sort()\n    if arr[-1] - arr[0] == len(arr) - 1:\n        return -1\n    else:\n        return len(arr) - 1 - (arr[-1] - arr[0])\n\n\ndef main():\n    arr_input = [3, 4, 2, 1, 5, 6]\n    print(make_equal(arr_input))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.91015625
    ],
    [
      "def make_equal(arr, k):\n    arr.sort()\n    m = arr[-1]\n    n = len(arr)\n    diff = m - arr[0]\n    if diff <= k:\n        return diff\n    else:\n        return k\n\n\ndef main():\n    arr_input = [1, 4, 1, 4, 1, 4]\n    k_input = 5\n    print(make_equal(arr_input, k_input))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.3310546875
    ],
    [
      "def operations(arr, k):\n    n = len(arr)\n    arr.sort()\n    median = n // 2\n    if n % 2:\n        med = arr[median]\n    else:\n        med = (arr[median] + arr[median - 1]) / 2\n\n    diff = 0\n    for i in range(n):\n        diff += abs(arr[i] - med)\n\n    if diff <= k:\n        return True\n    else:\n        return False\n\n\ndef main():\n    print(operations([1, 2, 3, 4, 5, 6, 7], 1))\n    print(operations([1, 2, 3, 4, 5, 6, 7], 2))\n    print(operations([1, 2, 3, 4, 5, 6, 7], 3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.4326171875
    ],
    [
      "def k_operations(a: list, k: int) -> int:\n    \"\"\"\n    >>> k_operations([2, 4, 6, 8], 2)\n    2\n    >>> k_operations([2, 4, 6, 8], 1)\n    -1\n    >>> k_operations([2, 2, 2, 2], 1)\n    0\n    \"\"\"\n    n = len(a)\n    a.sort()\n\n    if a[n - 1] - a[0] == k:\n        return n - 1\n\n    if a[n - 1] - a[0] > k:\n        return -1\n\n    for i in range(n - 1):\n        if a[i + 1] - a[i] == k:\n            return i + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.48046875
    ],
    [
      "def find_operations(arr, k):\n    n = len(arr)\n    arr.sort()\n    if k >= 2*n:\n        return n-1\n    elif k < n:\n        return k-1\n\n\ndef main():\n    arr_input = [3, 5, 1, 2, 4]\n    k = 4\n    a2 = find_operations(arr_input, k)\n    print(a2)\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.791015625
    ],
    [
      "def find_k_ops(arr, k):\n    if len(arr) < 2:\n        return 0\n    if len(arr) == 2:\n        return abs(arr[0] - arr[1])\n\n    n = len(arr)\n    count_arr = [0] * n\n    for i in range(1, n):\n        count_arr[i] = count_arr[i - 1] + abs(arr[i - 1] - arr[i])\n    count_arr.sort()\n\n    for i in range(n - 2, -1, -1):\n        if count_arr[i] <= k:\n            return k - count_arr[i]\n\n\nprint(find_k_ops([1, 2, 3, 4, 5, 6], 2))",
      -1.892578125
    ],
    [
      "def equalize(arr, k):\n    if k > len(arr) or k < 0:\n        return -1\n    arr.sort()\n    if k == 0:\n        return 0\n    if k == 1:\n        return arr[-1] - arr[0]\n    if k % 2 == 0:\n        return arr[-1] - arr[k//2]\n    else:\n        return arr[-1] - arr[k//2 + 1]\n\n\nprint(equalize([1, 2, 3, 4, 5, 6], 1))\nprint(equalize([1, 2, 3, 4, 5, 6], 2))\nprint(equalize([1, 2, 3, 4, 5, 6], 3))\nprint(equalize([1, 2, 3, 4, 5, 6], 4))\nprint(equalize([1, 2, 3, 4, 5, 6], 5))\nprint(equalize([1, 2, 3, 4, 5, 6], 6))\nprint(equalize([1, 2, 3, 4, 5, 6], 7))\nprint(equalize([1, 2, 3, 4, 5, 6], 8))\nprint(equalize([1, 2, 3, 4, 5, 6], 9))\nprint(equalize([1, 2, 3, 4, 5, 6], 10))",
      -1.966796875
    ],
    [
      "def min_operations(arr, k):\n    n = len(arr)\n    arr.sort()\n    target = arr[n//2]\n    diff = 0\n\n    for i in range(n):\n        diff += abs(arr[i] - target)\n\n    return diff // k\n\n\ndef main():\n    arr_input = [2, 4, 5, 6, 3]\n    k_input = 2\n    print(min_operations(arr_input, k_input))\n\n\nif __name__ == '__main__':\n    main()",
      -2.28515625
    ],
    [
      "def make_equal(a, k):\n    if k > len(a):\n        return -1\n    if k == 0:\n        return 0\n    if k < 0:\n        return -1\n    if len(set(a)) == 1:\n        return 0\n    if k > len(set(a)):\n        return -1\n    arr = sorted(a, reverse=True)\n    c = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] > k:\n            return -1\n        c += arr[i] - arr[i - 1]\n    return c\n\nprint(make_equal([1, 5, 1, 1], 1))\nprint(make_equal([1, 2, 3], 2))\nprint(make_equal([1, 2, 4, 1, 2, 3, 2, 2], 3))",
      -2.4609375
    ],
    [
      "def find_k_operations(arr, k):\n    # find the minimum element\n    min_element = min(arr)\n\n    # count the number of elements greater than min element\n    count = 0\n    for i in arr:\n        if i > min_element:\n            count += 1\n\n    # if count is less than k, return -1\n    if count < k:\n        return -1\n\n    # if count is equal to k, return 0\n    if count == k:\n        return 0\n\n    # if count is greater than k, then find the number of operations required\n    return count - k\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    k = 6\n    print(find_k_operations(arr, k))",
      -2.552734375
    ],
    [
      "def get_equal(arr, k):\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    target = sum(arr) // n\n\n    total = 0\n    for i in range(n):\n        total += abs(arr[i] - target)\n\n    return total\n\n\nif __name__ == \"__main__\":\n    arr = [1, 4, 3, 2, 5, 2]\n    k = 2\n    print(get_equal(arr, k))",
      -2.583984375
    ],
    [
      "from collections import Counter\n\n\ndef equal_elements(elements, k):\n    \"\"\"\n    :param elements: list of elements\n    :param k: number of operations\n    :return: number of operations required to make all elements equal\n    \"\"\"\n    # check if elements are empty\n    if not elements:\n        return -1\n\n    # check if k is negative\n    if k < 0:\n        return -1\n\n    # check if k is greater than possible operations\n    if k > len(elements) - 1:\n        return -1\n\n    # count elements\n    counter = Counter(elements)\n    # get the max count\n    max_count = counter.most_common(1)[0][1]\n    # get the min count\n    min_count = counter.most_common()[-1][1]\n    # find the difference\n    difference = max_count - min_count\n    # check if difference is less than k\n    if difference < k:\n        return -1\n    else:\n        # return difference\n        return difference\n\n\nif __name__ == \"__main__\":\n    elements = [1, 2, 3, 2, 1, 1, 3]\n    k = 3\n    print(equal_elements(elements, k))",
      -2.6796875
    ],
    [
      "def find_operations(arr, k):\n    count = 0\n    target = sum(arr) / len(arr)\n    for i in range(len(arr)):\n        count += abs(arr[i] - target)\n    return count <= k\n\n\nif __name__ == \"__main__\":\n    print(find_operations([1, 2, 3, 4, 5, 5], 3))\n    print(find_operations([1, 1, 1, 1, 1, 1], 5))\n    print(find_operations([1, 2, 3, 4, 5, 5], 6))",
      -2.765625
    ],
    [
      "def find_operations(A, B, C):\n    operations = 0\n\n    while A != B or A != C:\n        if A == B and B == C:\n            return operations\n        elif A == B:\n            A = C\n            operations += 1\n        elif A == C:\n            B = C\n            operations += 1\n        elif B == C:\n            A = B\n            operations += 1\n\n    return operations\n\nif __name__ == \"__main__\":\n    A = [1, 2, 3]\n    B = [2, 3, 1]\n    C = [3, 1, 2]\n\n    print(find_operations(A, B, C))",
      -2.791015625
    ],
    [
      "def find_k_operations(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    total_sum = sum(arr)\n    target = total_sum / len(arr)\n    k = 0\n\n    for num in arr:\n        k += abs(target - num)\n\n    return k\n\n\nif __name__ == \"__main__\":\n    assert find_k_operations([1, 2, 3, 4, 5, 6, 7]) == 0\n    assert find_k_operations([1, 2, 3, 4, 5, 6, 7, 8]) == 1\n    assert find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n    assert find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3",
      -2.9140625
    ],
    [
      "def make_equal(arr, k):\n    arr.sort()\n    n = len(arr)\n    target = n//2\n    if k < target:\n        return -1\n    diff = arr[-1] - arr[0]\n    return (k - target)//diff\n\n\nprint(make_equal([1, 2, 3, 4, 5], 6))\nprint(make_equal([1, 2, 3, 4, 5], 7))\nprint(make_equal([1, 2, 3, 4, 5], 8))\nprint(make_equal([1, 2, 3, 4, 5], 9))\nprint(make_equal([1, 2, 3, 4, 5], 10))\nprint(make_equal([1, 2, 3, 4, 5], 11))\nprint(make_equal([1, 2, 3, 4, 5], 12))\nprint(make_equal([1, 2, 3, 4, 5], 13))\nprint(make_equal([1, 2, 3, 4, 5], 14))",
      -2.931640625
    ],
    [
      "def find_k_operations(arr, k):\n    # 1. Find the mean of the array.\n    mean = sum(arr) / len(arr)\n\n    # 2. Subtract the mean from each element of the array.\n    sub = [i - mean for i in arr]\n\n    # 3. Find the number of operations required to make all elements equal.\n    operations = sum([abs(i) for i in sub])\n\n    # 4. If the number of operations is less than k, return the number of operations else return -1.\n    return operations if operations < k else -1\n\n\nprint(find_k_operations([1, 2, 3, 4, 5, 5], 2))",
      -3.078125
    ],
    [
      "def make_equal(arr, k):\n    if k == 0:\n        return 0\n    n = len(arr)\n    arr.sort()\n    median = n // 2\n    if n % 2 != 0:\n        median += 1\n\n    target = arr[median]\n\n    left = 0\n    right = n - 1\n    while left < right:\n        if arr[left] + k >= target and arr[right] + k >= target:\n            return 0\n        elif arr[left] + k < target and arr[right] + k < target:\n            return -1\n        elif arr[left] + k < target and arr[right] + k >= target:\n            left += 1\n        elif arr[left] + k >= target and arr[right] + k < target:\n            right -= 1\n\n    return -1\n\n\ndef main():\n    print(make_equal([1, 1, 2, 2, 3, 3], 1))\n    print(make_equal([1, 2, 2, 3, 3, 4], 1))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.265625
    ],
    [
      "def k_operations(arr, k):\n    n = len(arr)\n    if k > n*(n-1)//2:\n        return -1\n    arr.sort()\n    total = 0\n    for i in range(n-1):\n        total += arr[i+1]-arr[i]\n    if total < k:\n        return -1\n    else:\n        return k-total\n\n\nprint(k_operations([1, 3, 5, 7], 7))\nprint(k_operations([1, 1, 1], 2))",
      -3.609375
    ],
    [
      "def equalize(l, k):\n    n = len(l)\n    l.sort()\n    if n == 1:\n        return 0\n    if n == 2:\n        if k == 0:\n            return 0\n        else:\n            return abs(l[0] - l[1])\n    if n == 3:\n        if k == 0:\n            return 0\n        else:\n            return abs(l[0] - l[1]) + abs(l[1] - l[2])\n    else:\n        if k >= 3:\n            return abs(l[0] - l[1]) + abs(l[1] - l[2]) + abs(l[2] - l[3])\n        elif k == 2:\n            return abs(l[0] - l[1]) + abs(l[1] - l[2])\n        else:\n            return abs(l[0] - l[1])\n\n\ndef main():\n    l = [1, 2, 3, 4, 5]\n    k = 0\n    print(equalize(l, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.669921875
    ],
    [
      "def find_k_operations(array):\n    count = 0\n    count_max = max(array)\n    count_min = min(array)\n    if count_max == count_min:\n        return 0\n    else:\n        diff = count_max - count_min\n        for i in range(len(array)):\n            if array[i] > count_max - diff:\n                array[i] = array[i] - diff\n                count += 1\n        return count\n\n\ndef main():\n    arr_input = [3, 5, 2, 4, 1, 6]\n    result = find_k_operations(arr_input)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.775390625
    ],
    [
      "def find_k_operations(arr):\n    n = len(arr)\n    k = 0\n    for i in range(n - 1):\n        k += abs(arr[i] - arr[i + 1])\n\n    return k\n\n\ndef main():\n    arr = [2, 3, 1, 3, 2, 2]\n    print(\"Operations required to make all elements equal: \" +\n          str(find_k_operations(arr)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.818359375
    ],
    [
      "def equal_ele(array, k):\n    n = len(array)\n    array = sorted(array)\n    i = 0\n    while i < n:\n        if array[i] != i:\n            k -= 1\n            if k == 0:\n                return True\n            array[i], array[i + 1] = array[i + 1], array[i]\n        i += 1\n    return False\n\n\nprint(equal_ele([1, 2, 3, 4], 2))",
      -4.01171875
    ],
    [
      "def make_equal(arr: list, k: int) -> int:\n    arr.sort()\n    median = arr[len(arr) // 2]\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == median:\n            continue\n        if arr[i] < median:\n            diff = median - arr[i]\n        else:\n            diff = arr[i] - median\n        if k < diff:\n            return -1\n        k -= diff\n        count += diff\n    return count\n\n\nif __name__ == \"__main__\":\n    print(make_equal([2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
      -4.08984375
    ],
    [
      "def find_k_operations(array):\n    array_set = set(array)\n\n    if len(array_set) == 1:\n        return 0\n\n    if len(array_set) == 2:\n        return min(array)\n\n    return -1\n\n\ndef main():\n    print(\"Number of operations required to make all elements equal: \" +\n          str(find_k_operations([5, 6, 5, 6, 5, 6, 5])))\n    print(\"Number of operations required to make all elements equal: \" +\n          str(find_k_operations([1, 2, 3, 4, 5, 6])))\n    print(\"Number of operations required to make all elements equal: \" +\n          str(find_k_operations([1, 2, 3, 4, 5, 6, 7])))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.1015625
    ],
    [
      "def make_equal(arr, k):\n    n = len(arr)\n    if n <= 2:\n        return 0\n\n    arr.sort()\n\n    mid = n // 2\n\n    left = arr[:mid]\n    right = arr[mid:]\n\n    l_diff = left[-1] - left[0]\n    r_diff = right[-1] - right[0]\n\n    if l_diff == r_diff:\n        return 0\n    elif l_diff > r_diff:\n        return k - r_diff\n    else:\n        return k - l_diff\n\n\nprint(make_equal([2, 3, 4, 5, 6, 7, 8], 2))\nprint(make_equal([2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(make_equal([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 3))",
      -4.11328125
    ],
    [
      "def equal(arr, k):\n    n = len(arr)\n    if n < k:\n        return -1\n    if k == 0:\n        return 0\n    count = 0\n    for i in range(n):\n        if arr[i] != arr[0]:\n            count += 1\n    return count\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nb = [1, 2, 3, 4, 5, 6, 7, 8]\nc = [1, 1, 1, 1, 1, 1, 1, 1]\nd = [1, 2, 3, 4, 5, 6, 7, 8, 8]\n\nprint(equal(a, 1))\nprint(equal(b, 2))\nprint(equal(c, 2))\nprint(equal(d, 3))",
      -4.1640625
    ],
    [
      "def find_k_opertions(list_of_numbers, k):\n    # find the mean\n    mean = sum(list_of_numbers) / len(list_of_numbers)\n    # find the total number of operations required\n    diff = sum([abs(x - mean) for x in list_of_numbers])\n    if diff <= k:\n        return 0\n    else:\n        return diff - k\n\n\ndef main():\n    list_of_numbers = [1, 2, 3, 4]\n    k = 1\n    print(find_k_opertions(list_of_numbers, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.73046875
    ],
    [
      "def min_ops(arr, k):\n    arr.sort()\n    if arr[len(arr) - 1] - arr[0] <= k:\n        return 0\n    else:\n        return k - arr[len(arr) - 1] + arr[0]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    k = 3\n    print(min_ops(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.88671875
    ],
    [
      "def make_equal(l, k):\n    if k > len(l):\n        return -1\n\n    count = 0\n    for i in range(len(l)):\n        if l[i] == 0:\n            continue\n        else:\n            count += 1\n\n    if count < k:\n        return -1\n\n    l.sort()\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 0:\n            continue\n        else:\n            count -= 1\n        if count == k:\n            return i\n\n\nif __name__ == \"__main__\":\n    l = [2, 3, 0, 5, 2, 1, 1]\n    k = 3\n    print(make_equal(l, k))\n\n    l = [1, 1, 1]\n    k = 2\n    print(make_equal(l, k))",
      -5.34375
    ],
    [
      "def k_operations(arr, k):\n    count = 0\n    arr.sort()\n    difference = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        if difference != arr[i] - arr[i-1]:\n            count += abs(difference - arr[i] + arr[i-1])\n            difference = arr[i] - arr[i-1]\n    return True if count <= k else False\n\n\nprint(k_operations([1, 5, 3, 4, 2], 3))\nprint(k_operations([2, 1, 5, 3, 4], 7))",
      -5.90234375
    ],
    [
      "def find_k_operations(arr, k):\n    if k >= len(arr):\n        return k - len(arr)\n    arr.sort()\n    median = arr[len(arr) // 2]\n    arr.sort(key=lambda x: abs(x - median))\n    return sum(arr) - median * len(arr)\n\n\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(find_k_operations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],",
      -6.04296875
    ],
    [
      "def make_equal(a):\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return 0\n    if len(a)==2:\n        return abs(a[0]-a[1])\n    if len(a)==3:\n        return abs(a[0]-a[1])+abs(a[0]-a[2])+abs(a[1]-a[2])\n    if len(a)==4:\n        return abs(a[0]-a[1])+abs(a[0]-a[2])+abs(a[0]-a[3])+abs(a[1]-a[2])+abs(a[1]-a[3])+abs(a[2]-a[3])\n    return abs(a[0]-a[1])+abs(a[0]-a[2])+abs(a[0]-a[3])+abs(a[1]-a[2])+abs(a[1]-a[3])+abs(a[2]-a[3])+sum(make_equal(a[1:]))\n\na=[2,2,2,2]\nprint(make_equal(a))",
      -6.23828125
    ],
    [
      "def find_operation_required(array, k):\n    if len(array) == 0:\n        return 0\n\n    if len(array) == 1:\n        return 0 if array[0] == k else -1\n\n    max_elem = max(array)\n    min_elem = min(array)\n    array.sort()\n    if max_elem == min_elem:\n        return 0\n\n    return (array[len(array) - 1] - array[0]) * (k - array[0])\n\n\nprint(find_operation_required([1, 2, 3, 4], 2))",
      -6.34375
    ],
    [
      "def equal_elements(arr, k):\n    n = len(arr)\n    # if all elements are equal return 0\n    if n == 1:\n        return 0\n\n    # if k is greater than all elements, return -1\n    if k < arr[0]:\n        return -1\n\n    # if k is greater than all elements minus one, return -1\n    if k < arr[0] - arr[n - 1]:\n        return -1\n\n    # if k is greater than the sum of all elements minus one, return -1\n    if k > (arr[0] * n - (n - 1)):\n        return -1\n\n    # if k is greater than the sum of all elements minus one, return -1\n    if k > (arr[n - 1] * n - (n - 1)):\n        return -1\n\n    # if k is greater than all elements minus one, return -1\n    if k > (arr[0] + arr[n - 1] - n):\n        return -1\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop over all elements\n    for i in range(0, n):\n        # add the elements to sum\n        sum += arr[i]\n\n        # if sum is greater than k, return -1\n        if sum > k:\n            return -1\n\n    return k - sum\n\n\ndef main():\n    arr = [2, 4, 5, 8, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    k = 30\n\n    print(equal_elements(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.51171875
    ],
    [
      "def k_ops(arr: list, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if k == 0:\n        return 0\n\n    if k == 1:\n        return max(arr) - min(arr)\n\n    if len(arr) == 1:\n        return k\n\n    if len(arr) == 2:\n        return k if abs(arr[0] - arr[1]) > k else k - abs(arr[0] - arr[1])\n\n    arr.sort()\n    if k % 2 == 0:\n        return k\n\n    diff = arr[-1] - arr[0]\n    return k if diff > k else k - diff\n\n\nif __name__ == \"__main__\":\n    assert k_ops([1, 2, 3, 4, 5], 3) == 3\n    assert k_ops([1, 2, 3, 4, 5], 10) == 5\n    assert k_ops([1, 2, 3, 4, 5], 6) == 6\n    assert k_ops([1, 2, 3, 4, 5], 0) == 0\n    assert k_ops([1, 2, 3, 4, 5], 1) == 4\n    assert k_ops([1, 2, 3, 4, 5], 2) == 2\n    assert k_ops([1, 2, 3, 4, 5], 4) == 0\n    assert k_ops([1, 2, 3, 4, 5], 5) == 0\n    assert k_ops([1, 2, 3, 4, 5], 6) == 1\n    assert k_ops([1, 2, 3, 4, 5], 7) == 1\n    assert k_ops([1, 2, 3, 4, 5], 8) == 2",
      -6.6875
    ],
    [
      "def equalize(a, k):\n    if k == 0:\n        return 0\n    if len(a) == 1:\n        return k\n    a.sort()\n    if a[0] == a[-1]:\n        return 0\n    if a[0] == a[1]:\n        return k\n    if a[-2] == a[-1]:\n        return k\n    if a[1] == a[-1]:\n        return k\n    if a[0] == a[-2]:\n        return k\n    if a[0] == a[2]:\n        return k\n    if a[-2] == a[-3]:\n        return k\n    if a[1] == a[2]:\n        return k\n\n\ndef main():\n    print(equalize([2, 1, 5, 3, 4], 2))\n    print(equalize([2, 2, 2, 2], 2))\n    print(equalize([1, 2, 3, 4, 5], 3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.86328125
    ],
    [
      "def find_k_operations(arr, k):\n    count_array = [0] * len(arr)\n\n    for i in range(len(arr)):\n        count_array[i] = abs(arr[i] - arr[0])\n\n    count_array.sort()\n\n    total_count = 0\n\n    for i in range(len(count_array)):\n        total_count += count_array[i]\n\n        if total_count > k:\n            return k\n\n        k -= count_array[i]\n\n    return k\n\n\ndef main():\n    arr = [2, 2, 1, 5, 3, 4, 1, 2, 2, 1]\n    k = 3\n\n    print(find_k_operations(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -7.1328125
    ],
    [
      "def find_min_ops(a, b, c):\n    \"\"\"\n    Time complexity : O(1)\n    Space complexity : O(1)\n    \"\"\"\n    if a > b and a > c:\n        if b > c:\n            return b - c\n        else:\n            return c - b\n    elif b > a and b > c:\n        if a > c:\n            return a - c\n        else:\n            return c - a\n    else:\n        if a > b:\n            return a - b\n        else:\n            return b - a\n\n\ndef find_min_ops_with_brute_force(a, b, c):\n    \"\"\"\n    Time complexity : O(n)\n    Space complexity : O(n)\n    \"\"\"\n    min_ops = float(\"inf\")\n    for i in range(10000):\n        a_tmp = a - i\n        b_tmp = b - i\n        c_tmp = c - i\n        if a_tmp < 0 or b_tmp < 0 or c_tmp < 0:\n            continue\n        tmp_ops = a_tmp + b_tmp + c_tmp\n        if tmp_ops < min_ops:\n            min_ops = tmp_ops\n\n    return min_ops\n\n\ndef find_min_ops_with_greedy(a, b, c):\n    \"\"\"\n    Time complexity : O(n)\n    Space complexity : O(n)\n    \"\"\"\n    min_ops = float(\"inf\")\n    min_ops_arr = [a, b, c]\n    min_ops_arr.sort()\n\n    while min(min_ops_arr) != 0:\n        min_ops += 1\n        min_ops_arr[0] -= 1\n        min_ops_arr[1] -= 1\n        min_ops_arr[2] -= 1\n\n    return min_ops\n\n\nif __name__ == \"__main__\":\n    a, b, c = 3, 4, 5\n    print(find_min_ops(a, b, c))\n    print(find_min_ops_with_brute_force",
      -7.55078125
    ],
    [
      "def find_k_operations(arr, k):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n                if count == k:\n                    return True\n    return False\n\nif __name__ == \"__main__\":\n    print(find_k_operations([1,2,3,4], 2))\n    print(find_k_operations([1,2,3,4], 3))\n    print(find_k_operations([1,2,3,4], 4))\n    print(find_k_operations([1,2,3,4], 5))\n    print(find_k_operations([1,2,3,4], 6))\n    print(find_k_operations([1,2,3,4], 7))",
      -7.7890625
    ],
    [
      "def minimum_operations(arr, k):\n    \"\"\"\n    :param: arr - input array\n    :param: k - number of operations\n    TODO: complete this method and return the integer value\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return -1\n\n    if k < 0:\n        return -1\n    if k == 0:\n        return 0\n\n    arr.sort()\n    mid = arr[int(len(arr) / 2)]\n    minimum_operations = 0\n    for i in range(len(arr)):\n        if arr[i] == mid:\n            minimum_operations += 0\n        elif arr[i] < mid:\n            minimum_operations += abs(mid - arr[i])\n        else:\n            minimum_operations += abs(mid - arr[i]) - k\n\n    return minimum_operations\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = minimum_operations(arr, k)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 2, 3, 4, 5]\nk = 0\nsolution = 0\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nk = 3\nsolution = 3\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nk = 4\nsolution = 2\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [5, 5, 5, 5, 5]",
      -8.03125
    ],
    [
      "def k_operations(arr, k):\n    n = len(arr)\n    max_element = max(arr)\n    min_element = min(arr)\n\n    if max_element - min_element <= k:\n        return 0\n\n    if k % (max_element - min_element) == 0:\n        return k\n\n    return -1\n\n\ndef main():\n    print(\"Maximum number of operations required to make all elements equal: \" +\n          str(k_operations([4, 1, 1, 3, 4, 2, 1, 3], 2)))\n    print(\"Maximum number of operations required to make all elements equal: \" +\n          str(k_operations([2, 1, 2, 2, 1, 2, 1, 2], 3)))\n    print(\"Maximum number of operations required to make all elements equal: \" +\n          str(k_operations([1, 2, 3, 4, 5, 6, 7, 8], 1)))\n\n\nmain()",
      -8.03125
    ],
    [
      "def find_operations(arr, k):\n    if len(arr) < 2:\n        return 0\n\n    if len(arr) == 2:\n        return abs(arr[0] - arr[1])\n\n    arr.sort()\n    median = len(arr) // 2\n    if len(arr) % 2 == 0:\n        median1 = arr[median - 1]\n        median2 = arr[median]\n    else:\n        median1 = arr[median - 1]\n        median2 = arr[median]\n\n    if median1 == median2:\n        return 0\n    else:\n        return min(abs(median1 - arr[0]), abs(median2 - arr[len(arr) - 1]))\n\n\nprint(find_operations([1, 2, 3, 4, 5, 6, 7, 8], 1))\nprint(find_operations([1, 2, 3, 4, 5, 6, 7, 8], 2))\nprint(find_operations([1, 2, 3, 4, 5, 6, 7, 8], 3))\nprint(find_operations([1, 2, 3, 4, 5, 6, 7, 8], 4))\nprint(find_operations([1, 2, 3, 4, 5, 6, 7, 8], 5))\nprint(find_operations([1, 2, 3, 4, 5, 6, 7, 8], 6))\nprint(find_operations([1, 2, 3, 4, 5, 6, 7, 8], 7))\nprint(find_operations([1, 2, 3, 4, 5, 6, 7, 8], 8))",
      -8.140625
    ],
    [
      "def number_of_operations(array, k):\n    # If all elements are equal return 0\n    if all(array[i] == array[i+1] for i in range(len(array)-1)):\n        return 0\n\n    # Initialize the sum of elements to 0\n    sum_of_elements = 0\n    for element in array:\n        sum_of_elements += element\n\n    # If the sum of elements is less than k return -1\n    if sum_of_elements < k:\n        return -1\n\n    # If the sum of elements is equal to k return -1\n    if sum_of_elements == k:\n        return -1\n\n    # If the sum of elements is greater than k\n    # Then we need to find how many operations are required to make all elements equal\n    # We can do this by subtracting the sum of elements from k\n    # The difference will be the number of operations required to make all elements equal\n    # The difference will also be the number of elements that need to be subtracted\n    # The number of elements that need to be subtracted is the number of elements that need to be added\n    # The number of elements that need to be added is the number of operations required to make all elements equal\n    return k - sum_of_elements\n\n\ndef main():\n    array1 = [1, 1, 2, 4, 1]\n    array2 = [1, 1, 1, 1, 1]\n    array3 = [3, 3, 3, 3, 3]\n    array4 = [1, 2, 3, 4, 5, 6, 7]\n    array5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    print(number_of_operations(array1, 2))\n    print(number_of_operations(array2, 2))\n    print(number_of_operations(array3, 2))\n    print(number_of_operations(array4, 10))\n    print(number_of_operations(array5, 10",
      -8.2890625
    ],
    [
      "from collections import Counter\n\n\ndef find_k_ops(a):\n    c = Counter(a)\n    if len(c) == 1:\n        return 0\n    return max(c.values()) - min(c.values())\n\n\ndef main():\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11]\n    print(find_k_ops(a))\n\n\nif __name__ == \"__main__\":\n    main()",
      -8.421875
    ],
    [
      "def operations_required(A,B,K):\n    A = sorted(A)\n    B = sorted(B)\n    if len(A) != len(B):\n        return -1\n    else:\n        N = len(A)\n        d = [0] * N\n        for i in range(N):\n            d[i] = abs(A[i]-B[i])\n        for i in range(N-1):\n            d[i+1] += d[i]\n        if d[N-1]%K == 0:\n            return d[N-1]/K\n        else:\n            return -1\n\nA = [4,2,3,1]\nB = [2,3,4,1]\nK = 2\nprint(operations_required(A,B,K))",
      -8.6328125
    ],
    [
      "def find_k_operations(arr, k):\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    # Initialize the count array\n    count_array = [0] * n\n\n    # Initialize the difference array\n    diff_array = [0] * n\n\n    # Initialize the difference array\n    max_diff = 0\n\n    # Find the difference array\n    for i in range(n - 1):\n        diff_array[i] = arr[i + 1] - arr[i]\n\n    # Find the maximum difference\n    max_diff = max(diff_array)\n\n    # Find the count array\n    for i in range(n - 1):\n        count_array[i] = diff_array[i] // max_diff\n\n    # Find the total count\n    total_count = sum(count_array)\n\n    # Return if total count is equal to k\n    if total_count == k:\n        return max_diff\n\n    # Find the minimum difference\n    min_diff = min(diff_array)\n\n    # Find the count array\n    for i in range(n - 1):\n        count_array[i] = diff_array[i] // min_diff\n\n    # Find the total count\n    total_count = sum(count_array)\n\n    # Return if total count is equal to k\n    if total_count == k:\n        return min_diff\n\n    # Find the minimum and maximum difference\n    min_diff = min(diff_array)\n    max_diff = max(diff_array)\n\n    # Find the count array\n    for i in range(n - 1):\n        count_array[i] = diff_array[i] // (max_diff - min_diff)\n\n    # Find the total count\n    total_count = sum(count_array)\n\n    # Return if total count is equal to k\n    if total_count == k:\n        return (max_diff - min_diff)\n\n    # Return -1 if not possible\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4,",
      -8.7890625
    ],
    [
      "def find_diff(array):\n    return max(array) - min(array)\n\n\ndef find_diff_in_array(array, k):\n    diff = find_diff(array)\n    if diff == 0:\n        return 0\n    if k < diff:\n        return -1\n    k -= diff\n    array.sort()\n    diff = find_diff(array)\n    return k // diff\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6]\n    k = 4\n    result = find_diff_in_array(array, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      -9.3515625
    ],
    [
      "def make_equal(arr, k):\n    n = len(arr)\n    if n < 2:\n        return -1\n    # find the max element\n    max_element = max(arr)\n    if max_element <= k:\n        return 0\n\n    # now we have to find the minimum number of operations required\n    # to make all elements equal.\n\n    # if the max element is odd we can simply remove all the odd elements\n    # then all elements will be equal.\n    if max_element % 2 == 1:\n        return max_element\n\n    # if max element is even then we can either remove even elements\n    # or subtract 1 from all the even elements.\n    # we can do either of the operation at most k times.\n\n    # now we have to find the minimum number of operations to make all the elements equal.\n\n    # we can either remove even elements or subtract 1 from all the even elements.\n    # we can do either of the operation at most k times.\n\n    # if we subtract 1 from all the even elements then we have to find the minimum number of\n    # 1's that we have to subtract.\n\n    # now we have to find the minimum number of 1's that we have to subtract\n    # so that all the elements are equal.\n\n    # we can subtract 1 from all the even elements at most k times.\n\n    # so we have to find the minimum number of 1's that we have to subtract\n    # so that all the elements are equal.\n\n    # if we subtract 1 from all the even elements then we have to find the minimum number of\n    # 1's that we have to subtract.\n\n    # so we have to find the minimum number of 1's that we have to subtract\n    # so that all the elements are equal.\n\n    # if we subtract 1 from all the even elements then we have to find the minimum number of\n    # 1's that we have to subtract.\n\n    # so we have to find the minimum number of 1's that we have to subtract\n    # so that all the elements are equal.\n\n    # if we subtract 1 from all the even elements then we have to find",
      -9.359375
    ],
    [
      "from collections import Counter\n\n\ndef equal_elements(arr, k):\n    if k == 0:\n        return 0\n\n    if len(arr) == 1:\n        return float(\"inf\")\n\n    if len(arr) == 2:\n        return abs(arr[0] - arr[1])\n\n    count = Counter(arr)\n    most_common = count.most_common(1)[0][1]\n    if most_common == len(arr):\n        return 0\n\n    if k >= len(arr) - most_common:\n        return k - len(arr) + most_common\n\n    return float(\"inf\")\n\n\ndef main():\n    print(\"Minimum number of operations to make all elements equal: \" +\n          str(equal_elements([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
      -9.734375
    ],
    [
      "def operations_to_make_equal(a: int, b: int, c: int, k: int) -> int:\n    \"\"\"\n    >>> operations_to_make_equal(1, 2, 3, 2)\n    2\n    >>> operations_to_make_equal(1, 2, 3, 3)\n    -1\n    \"\"\"\n    if a == b and b == c:\n        return -1\n    if a + b + c <= k:\n        return 0\n    a_dif = a - b\n    b_dif = b - c\n    c_dif = c - a\n    if a_dif > 0:\n        a_ops = a_dif // 2\n    else:\n        a_ops = -(a_dif // 2)\n    if b_dif > 0:\n        b_ops = b_dif // 2\n    else:\n        b_ops = -(b_dif // 2)\n    if c_dif > 0:\n        c_ops = c_dif // 2\n    else:\n        c_ops = -(c_dif // 2)\n    total_ops = a_ops + b_ops + c_ops\n    if total_ops <= k:\n        return total_ops\n    else:\n        return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -10.09375
    ],
    [
      "def make_equal(nums, k):\n    count = 0\n    n = len(nums)\n    nums.sort()\n    mid = n//2\n    if n%2 == 0:\n        if nums[mid-1] == nums[mid]:\n            return 0\n        else:\n            count = k\n            while count > 0:\n                if nums[mid-1] > nums[mid]:\n                    nums[mid-1]-=1\n                    count-=1\n                else:\n                    nums[mid]+=1\n                    count-=1\n    else:\n        if nums[mid] == nums[mid-1]:\n            return 0\n        else:\n            count = k\n            while count > 0:\n                if nums[mid-1] > nums[mid]:\n                    nums[mid-1]-=1\n                    count-=1\n                else:\n                    nums[mid]+=1\n                    count-=1\n    return count\n\nprint(make_equal([1, 2, 3, 4, 5, 5, 7, 7, 8, 9, 10], 3))\nprint(make_equal([1, 2, 3, 4, 5, 5, 7, 7, 8, 9, 10], 4))\nprint(make_equal([1, 2, 3, 4, 5, 5, 7, 7, 8, 9, 10], 5))",
      -10.7265625
    ],
    [
      "def find_ops(arr, k):\n    arr_len = len(arr)\n    max_arr_val = max(arr)\n    min_arr_val = min(arr)\n    if max_arr_val - min_arr_val <= k:\n        return 0\n\n    diff = max_arr_val - min_arr_val\n    min_ops = diff // arr_len\n    max_ops = min_ops + 1\n\n    while min_ops < max_ops:\n        mid_ops = (min_ops + max_ops) // 2\n        if mid_ops * arr_len - diff > k:\n            min_ops = mid_ops\n        else:\n            max_ops = mid_ops\n\n    return min_ops\n\n\ndef main():\n    arr = [1, 3, 5, 7, 9]\n    k = 2\n    print(find_ops(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -10.7421875
    ],
    [
      "from collections import Counter\n\n\ndef operations(arr, k):\n    c = Counter(arr)\n    if len(c) == 1:\n        return 0\n\n    if len(c) == 2:\n        min_element = min(c.keys())\n        max_element = max(c.keys())\n        min_count = c[min_element]\n        max_count = c[max_element]\n        if min_count > max_count:\n            return min_count - max_count\n        return max_count - min_count\n\n    return -1\n\n\ndef main():\n    print(operations([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5], 2))\n    print(operations([1, 1, 1, 1, 1], 1))\n\n\nif __name__ == '__main__':\n    main()",
      -11.0390625
    ],
    [
      "def k_operations(arr, k):\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    # We can find the minimum and maximum element of the array.\n    min_element = min(arr)\n    max_element = max(arr)\n\n    # We can find the range of elements in the array.\n    range_element = max_element - min_element\n\n    # If the range of the elements is less than the value of k, then we can't make all elements equal.\n    if range_element < k:\n        return -1\n\n    # If the range of the elements is equal to the value of k, then we can't make all elements equal.\n    if range_element == k:\n        return 0\n\n    # We can find the number of operations required to make all elements equal.\n    return k // range_element\n\nprint(k_operations([1, 5, 3, 4, 2], 5))\nprint(k_operations([1, 2, 3], 4))\nprint(k_operations([1, 2, 3, 4, 5, 6], 7))\nprint(k_operations([1, 1, 1, 1, 1, 1], 2))\nprint(k_operations([1, 1, 1, 1, 1, 1], 3))",
      -11.0390625
    ],
    [
      "def find_operations(a, b, c):\n    \"\"\"\n    >>> find_operations(1, 2, 3)\n    3\n    >>> find_operations(1, 2, 1)\n    -1\n    \"\"\"\n    a, b, c = sorted((a, b, c))\n\n    if a == b == c:\n        return 0\n    elif a + 1 == b == c:\n        return 1\n    elif a == b + 1 == c:\n        return 1\n    elif a == b == c + 1:\n        return 1\n    elif a + 1 == b + 1 == c:\n        return 2\n    elif a == b + 1 + 1 == c:\n        return 2\n    elif a == b == c + 1 + 1:\n        return 2\n    else:\n        return -1\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()",
      -12.4453125
    ],
    [
      "def make_equal(arr, k):\n    arr_len = len(arr)\n    if arr_len == 0:\n        return 0\n\n    arr.sort()\n\n    for i in range(arr_len - 1):\n        if arr[i] == arr[i + 1]:\n            continue\n\n        if k > (arr[i + 1] - arr[i]):\n            k -= (arr[i + 1] - arr[i])\n        else:\n            return i + 1\n\n    return -1\n\n\ndef main():\n    print(make_equal([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9], 20))\n    print(make_equal([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9], 20))\n    print(make_equal([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9], 0))\n    print(make_equal([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9], 10))\n    print(make_equal([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9], 15))\n\n\nif __name__ == '__main__':\n    main()",
      -12.9921875
    ],
    [
      "def make_equal(arr, k):\n    if len(arr) < 2:\n        return 0\n\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return k\n\n    arr.sort()\n    median = len(arr) // 2\n    first_half = arr[:median]\n    second_half = arr[median:]\n\n    diff = sum(first_half) - sum(second_half)\n    return k - diff\n\n\ndef main():\n    arr = [2, 2, 2, 5, 2, 3, 2, 2, 2]\n    k = 3\n    ans = make_equal(arr, k)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()",
      -13.6640625
    ],
    [
      "def equal_elements(arr, k):\n    n = len(arr)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return -1\n    else:\n        count = 0\n        arr.sort()\n        for i in range(n):\n            if arr[i] != i:\n                count += abs(arr[i] - i)\n                if count > k:\n                    return -1\n        return count\n\n\nprint(equal_elements([3, 4, 5, 0, 1], 2))\nprint(equal_elements([0, 1, 2], 2))\nprint(equal_elements([1, 2, 3, 4], 3))",
      -14.3515625
    ],
    [
      "def find_k_operation(arr, k):\n    arr_len = len(arr)\n    n = arr_len - 1\n    # Find the maximum element from the array.\n    max_ele = max(arr)\n\n    # Find the minimum element from the array.\n    min_ele = min(arr)\n\n    # If all the elements are equal, no need to perform any operation.\n    if max_ele == min_ele:\n        return 0\n\n    # Find the number of elements that are greater than the minimum element.\n    greater_than_min = arr.count(min_ele)\n\n    # Find the number of elements that are less than the maximum element.\n    less_than_max = arr.count(max_ele)\n\n    # If the number of elements that are greater than the minimum element is less than or equal to the number of elements that are less than the maximum element,\n    # then we can reduce the number of elements that are greater than the minimum element to the number of elements that are less than the maximum element.\n    if greater_than_min <= less_than_max:\n        k = k - (arr_len - greater_than_min)\n    else:\n        k = k - (less_than_max - arr_len + greater_than_min)\n\n    # If the number of elements that are greater than the minimum element is less than the number of elements that are less than the maximum element,\n    # then we can reduce the number of elements that are less than the maximum element to the number of elements that are greater than the minimum element.\n    if less_than_max < greater_than_min:\n        k = k - (arr_len - less_than_max)\n    else:\n        k = k - (greater_than_min - arr_len + less_than_max)\n\n    # If the number of elements that are greater than the minimum element is greater than the number of elements that are less than the maximum element,\n    # then we can reduce the number of elements that are less than the maximum element to the number of elements that are greater than the minimum element.\n    if greater_than_min > less_than_max:\n        k = k - (arr_len - less_",
      -15.515625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}