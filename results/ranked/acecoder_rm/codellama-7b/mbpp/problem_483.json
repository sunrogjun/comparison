{
  "problem": {
    "task_id": "MBPP/494",
    "prompt": "Write a function to convert the given binary tuple to integer.",
    "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
    "test_list": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ],
    "challenge_test_list": [],
    "problem_id": 483
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def binary_to_int(binary_tuple):\n    \"\"\"\n    :param binary_tuple: binary tuple\n    :return: integer\n\n    >>> binary_to_int((0,0,0,1))\n    1\n    >>> binary_to_int((1,0,0,0))\n    8\n    >>> binary_to_int((0,1,1,0))\n    6\n    >>> binary_to_int((1,1,1,1))\n    15\n    \"\"\"\n    integer = 0\n    for i in range(len(binary_tuple)):\n        integer += binary_tuple[i] * (2 ** (len(binary_tuple) - i - 1))\n    return integer\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      21.953125
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(b_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert given binary tuple to integer.\n\n    Args:\n        b_tuple (Tuple[int, ...]): Binary tuple to convert.\n\n    Examples:\n        >>> assert binary_tuple_to_int((1, 0, 1, 1)) == 13\n        >>> assert binary_tuple_to_int((1, 0, 0, 1, 0, 0, 1, 1, 1)) == 463\n    \"\"\"\n    return int(\"\".join(map(str, b_tuple)), base=2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((1, 0, 1, 1)))\n    print(binary_tuple_to_int((1, 0, 0, 1, 0, 0, 1, 1, 1)))",
      17.734375
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(bin_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        bin_tuple (Tuple[int, ...]): Binary tuple to convert\n\n    Returns:\n        int: Converted integer\n\n    Examples:\n        >>> assert binary_tuple_to_int((1, 1, 0, 1, 1, 1)) == 53\n    \"\"\"\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((1, 1, 0, 1, 1, 1)))",
      15.5546875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Converts a given binary tuple to an integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): a tuple of binary digits\n\n    Examples:\n        >>> assert binary_tuple_to_int((1, 0, 0, 1)) == 11\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.171875
    ],
    [
      "def binary_tuple_to_int(bin_tuple: tuple) -> int:\n    \"\"\"\n    :param bin_tuple: tuple of binary numbers\n    :return: int\n    >>> binary_tuple_to_int((1, 0, 1))\n    5\n    >>> binary_tuple_to_int((1, 0, 0, 1))\n    9\n    >>> binary_tuple_to_int((1, 0, 1, 0, 1))\n    13\n    >>> binary_tuple_to_int((1, 1, 1, 1, 1))\n    31\n    >>> binary_tuple_to_int((1, 0, 1, 1))\n    11\n    >>> binary_tuple_to_int((1, 1, 1, 0))\n    12\n    >>> binary_tuple_to_int((0, 0, 0, 0))\n    0\n    >>> binary_tuple_to_int((0, 1, 1, 1))\n    15\n    \"\"\"\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      13.484375
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Converts a given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): a tuple of binary numbers\n\n    Examples:\n        >>> assert binary_tuple_to_int((0, 1, 0, 1)) == 10\n    \"\"\"\n    return sum(2 ** i * digit for i, digit in enumerate(binary_tuple[::-1]))\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((0, 1, 0, 1)))",
      12.625
    ],
    [
      "def tuple_to_int(tup):\n    # type (tuple) -> int\n    \"\"\"\n    Converts a binary tuple to an integer.\n    >>> tuple_to_int((1, 0, 1))\n    5\n    >>> tuple_to_int((1, 0, 1, 1))\n    11\n    >>> tuple_to_int((0, 1, 0, 1))\n    9\n    >>> tuple_to_int((0, 0, 0, 0))\n    0\n    >>> tuple_to_int((1, 1, 1, 1))\n    15\n    \"\"\"\n    return sum(2 ** i * tup[i] for i in range(len(tup)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      12.0625
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(b_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert a given tuple of binary digits to a single integer.\n\n    Args:\n        b_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation of the binary tuple\n    \"\"\"\n    return sum(b * (2 ** i) for i, b in enumerate(b_tuple[::-1]))\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 1, 0, 1)) == 13\n    assert binary_tuple_to_int((1, 0, 1)) == 5\n    assert binary_tuple_to_int((1, 1, 1, 1, 1, 1)) == 63",
      11.8671875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Examples:\n        >>> assert binary_tuple_to_integer((1, 1)) == 3\n        >>> assert binary_tuple_to_integer((1, 0, 1)) == 5\n        >>> assert binary_tuple_to_integer((1, 0, 1, 0)) == 5\n        >>> assert binary_tuple_to_integer((1, 0, 1, 0, 1)) == 11\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_integer((1, 1)))",
      10.78125
    ],
    [
      "def binary_to_decimal(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    :param binary_tuple: a tuple of binary numbers\n    :type binary_tuple: tuple\n    :return: an integer\n    :rtype: int\n    \"\"\"\n    return int(\"\".join([str(i) for i in binary_tuple]), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((1, 1, 0, 1)) == 13\n    assert binary_to_decimal((1, 0, 1, 0, 1, 0, 1)) == 103",
      10.6171875
    ],
    [
      "from typing import List\n\n\ndef binary_tuple_to_integer(tup: List[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        tup (List[int]): Binary tuple\n\n    Examples:\n        >>> assert binary_tuple_to_integer([1, 1, 1]) == 7\n        >>> assert binary_tuple_to_integer([1, 1, 0, 1]) == 10\n        >>> assert binary_tuple_to_integer([1, 1, 0, 0, 1]) == 14\n        >>> assert binary_tuple_to_integer([1, 0, 1, 0, 1]) == 12\n    \"\"\"\n    return sum(val * 2 ** idx for idx, val in enumerate(tup[::-1]))\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_integer([1, 1, 1]))  # 7\n    print(binary_tuple_to_integer([1, 1, 0, 1]))  # 10\n    print(binary_tuple_to_integer([1, 1, 0, 0, 1]))  # 14\n    print(binary_tuple_to_integer([1, 0, 1, 0, 1]))  # 12",
      10.515625
    ],
    [
      "from functools import reduce\n\n\ndef binary_to_decimal(binary):\n    \"\"\"Returns the decimal value of the given binary tuple.\"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary)\n\n\ndef test_binary_to_decimal():\n    \"\"\"Test for binary_to_decimal function.\"\"\"\n    assert binary_to_decimal((1, 0, 1, 0, 1, 0, 1)) == 42\n    assert binary_to_decimal((1, 0, 0, 1)) == 9\n    assert binary_to_decimal((0, 0, 0, 0)) == 0\n    assert binary_to_decimal((1, 1, 1, 1)) == 15\n\n\nif __name__ == \"__main__\":\n    test_binary_to_decimal()",
      10.21875
    ],
    [
      "def binary_to_integer(binary_tuple):\n    integer = 0\n    for i in range(len(binary_tuple)):\n        integer += binary_tuple[i] * (2 ** (len(binary_tuple) - i - 1))\n\n    return integer\n\n\ndef test_binary_to_integer():\n    \"\"\"Test for binary_to_integer function.\"\"\"\n    assert binary_to_integer((1, 0, 1, 1)) == 13\n    assert binary_to_integer((1, 0, 0, 1, 0, 1, 1)) == 101\n    assert binary_to_integer((0, 1, 1, 0, 1, 0, 1, 1)) == 159\n\n\nif __name__ == \"__main__\":\n    test_binary_to_integer()",
      9.3125
    ],
    [
      "from typing import Tuple\n\n\ndef convert_to_integer(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple to convert\n\n    Examples:\n        >>> assert convert_to_integer((1, 0, 1, 0, 1, 0)) == 42\n    \"\"\"\n    return sum(\n        binary_tuple[index] * (2 ** index) for index in range(len(binary_tuple))\n    )\n\n\nif __name__ == \"__main__\":\n    print(convert_to_integer((1, 0, 1, 0, 1, 0)))",
      9.1015625
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Converts binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): tuple of binary numbers\n\n    Examples:\n        >>> assert binary_to_int((1, 0, 1, 0)) == 10\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_int((1, 0, 1, 0)))",
      8.5703125
    ],
    [
      "from typing import List\n\n\ndef binary_tuple_to_int(binary_tuple: List[int]) -> int:\n    \"\"\"Convert binary tuple to int.\n\n    Args:\n        binary_tuple (List[int]): binary tuple\n\n    Examples:\n        >>> assert binary_tuple_to_int([0, 1, 0, 1, 1, 1, 1]) == 53\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int([0, 1, 0, 1, 1, 1, 1]))",
      8.171875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_to_int((1, 0, 1, 0, 1)) == 14\n    \"\"\"\n    return sum(2 ** i * val for i, val in enumerate(binary_tuple))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      7.6796875
    ],
    [
      "from functools import reduce\nfrom operator import mul, or_\nfrom typing import Tuple, List\n\n\ndef bin_to_int(bin_tuple: Tuple[bool]) -> int:\n    return reduce(\n        lambda carry, bit: carry << 1 | bit,\n        bin_tuple,\n        0\n    )\n\n\nif __name__ == '__main__':\n    test_cases = [\n        (),\n        (False,),\n        (False, False),\n        (False, True),\n        (True,),\n        (True, False),\n        (True, True),\n        (False, False, False),\n        (False, False, True),\n        (False, True, False),\n        (False, True, True),\n        (True, False, False),\n        (True, False, True),\n        (True, True, False),\n        (True, True, True),\n        (False, False, False, False),\n        (False, False, False, True),\n        (False, False, True, False),\n        (False, False, True, True),\n        (False, True, False, False),\n        (False, True, False, True),\n        (False, True, True, False),\n        (False, True, True, True),\n        (True, False, False, False),\n        (True, False, False, True),\n        (True, False, True, False),\n        (True, False, True, True),\n        (True, True, False, False),\n        (True, True, False, True),\n        (True, True, True, False),\n        (True, True, True, True),\n    ]\n\n    for bits in test_cases:\n        print(f\"{bits} -> {bin_to_int(bits)}\")",
      7.19921875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"\n    Write a function to convert the given binary tuple to integer.\n    :param binary_tuple: tuple with binary values\n    :return: integer value\n    >>> binary_to_integer((1, 0, 0, 1))\n    5\n    >>> binary_to_integer((1, 1, 0, 1))\n    10\n    >>> binary_to_integer((1, 1, 1, 1))\n    15\n    \"\"\"\n    result = 0\n    for i in range(len(binary_tuple)):\n        result += binary_tuple[i] * (2 ** i)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.66796875
    ],
    [
      "from collections import deque\nfrom typing import Tuple\n\n\ndef convert_to_int(tup: Tuple[int, ...]) -> int:\n    \"\"\"Convert tuple of binary digits to integer.\n\n    Args:\n        tup (Tuple[int, ...]): tuple of binary digits\n\n    Returns:\n        int: integer\n    \"\"\"\n    queue = deque(tup)\n    integer = 0\n\n    for _ in range(len(tup)):\n        integer = integer << 1\n        integer += queue.popleft()\n\n    return integer\n\n\nif __name__ == \"__main__\":\n    assert convert_to_int((1, 0, 1, 0, 1, 1)) == 31",
      6.48828125
    ],
    [
      "def binary_to_decimal(binary_tuple: tuple) -> int:\n    \"\"\"\n    >>> binary_to_decimal((0, 1, 1, 1, 0))\n    22\n    >>> binary_to_decimal((0, 0, 1, 1, 1, 1, 1, 1))\n    135\n    \"\"\"\n    decimal = 0\n    for i, bit in enumerate(binary_tuple):\n        decimal += 2 ** i * bit\n    return decimal\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.72265625
    ],
    [
      "def binary_tuple_to_integer(b):\n    integer = 0\n    for i in range(len(b)):\n        integer += b[i] * 2 ** i\n    return integer\n\n\ndef main():\n    print(binary_tuple_to_integer((1, 1, 1, 1)))\n    print(binary_tuple_to_integer((1, 1, 1, 0)))\n    print(binary_tuple_to_integer((1, 1, 0, 1)))\n    print(binary_tuple_to_integer((1, 0, 1, 1)))\n    print(binary_tuple_to_integer((0, 1, 1, 1)))\n    print(binary_tuple_to_integer((0, 0, 0, 0)))\n\n\nif __name__ == '__main__':\n    main()",
      3.828125
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to int.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple\n\n    Examples:\n        >>> assert binary_to_int((1, 0, 1, 1)) == 13\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 1, 1)) == 13",
      2.955078125
    ],
    [
      "from functools import reduce\n\n\n# [1, 0, 1, 0, 1] -> 10101\ndef binary_tuple_to_int(tup):\n    return reduce(lambda x, y: x * 2 + y, tup)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 0, 1, 0, 1)) == 10101",
      2.783203125
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_decimal(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to decimal.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: decimal value\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((1, 0, 0, 1)) == 9\n    assert binary_to_decimal((1, 1, 1, 1, 0)) == 31",
      2.716796875
    ],
    [
      "def convert_to_integer(binary):\n    integer = 0\n    for i in range(len(binary)):\n        integer += binary[i] * (2 ** (len(binary) - i - 1))\n    return integer\n\n\ndef main():\n    print(convert_to_integer((1, 0, 1, 0, 0, 1, 0)))\n    print(convert_to_integer((1, 0, 1, 0)))\n\n\nif __name__ == '__main__':\n    main()",
      2.619140625
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[bool, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[bool, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation\n    \"\"\"\n    return int(\"\".join(map(str, map(int, binary_tuple))), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((True, True, False, False)) == 12",
      2.58984375
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_int(binary: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary (Tuple[int, ...]): binary tuple.\n\n    Examples:\n        >>> assert binary_to_int((1, 0, 1)) == 5\n    \"\"\"\n    return sum(\n        number * 2 ** idx\n        for idx, number in enumerate(reversed(binary))\n    )\n\n\ndef main():\n    \"\"\"Main function for this script.\"\"\"\n    binary_tuple = (1, 0, 1)\n    print(binary_to_int(binary_tuple))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.5546875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 1)) == 5\n    assert binary_to_int((1, 1, 0, 1, 0, 0, 1, 1, 1, 1)) == 1023\n    assert binary_to_int((1, 0, 0, 1, 0, 0, 1, 0, 1, 0)) == 458",
      2.451171875
    ],
    [
      "from typing import Tuple\n\n\ndef convert_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"\n    :param binary_tuple: Tuple of integers, all are 0 or 1\n    :return: Integer value of the tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert convert_to_integer((0, 1, 1)) == 5",
      2.439453125
    ],
    [
      "from typing import List\n\n\ndef tuple_to_integer(tuples: List[int]) -> int:\n    \"\"\"\n    :param tuples: list of binary tuples\n    :return: integer\n    >>> tuple_to_integer([0, 0, 1, 1])\n    10\n    >>> tuple_to_integer([1, 0, 0, 1])\n    9\n    >>> tuple_to_integer([1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1])\n    4095\n    \"\"\"\n    return int(\"\".join(str(i) for i in tuples), 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.32421875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_integer(binary: Tuple[int, ...]) -> int:\n    \"\"\"Convert a binary tuple to integer.\n\n    Args:\n        binary (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_to_integer((1, 0, 1)) == 5\n    \"\"\"\n    return sum(d * (2 ** i) for i, d in enumerate(reversed(binary)))\n\n\ndef main():\n    \"\"\"Print example.\"\"\"\n    print(binary_to_integer((1, 0, 1)))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.2265625
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\ndef binary_tuple_to_int(binary: List[int]) -> int:\n    return reduce(\n        lambda acc, x: acc * 2 + x,\n        binary,\n        0,\n    )\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int([1, 0, 1]) == 5\n    assert binary_tuple_to_int([1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1]) == 285",
      2.1640625
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef binary_tuple_to_integer(binary_tuple: tuple) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (tuple): Binary tuple to convert.\n\n    Examples:\n        >>> assert binary_tuple_to_integer((1, 1, 0, 1)) == 11\n    \"\"\"\n    return reduce(add, [2**i for i, b in enumerate(binary_tuple) if b])\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_integer((1, 1, 0, 1)))",
      2.119140625
    ],
    [
      "from typing import List\n\n\ndef binary_tuple_to_int(binary_tuple: List[int]) -> int:\n    \"\"\"Binary tuple to integer.\n\n    Args:\n        binary_tuple (List[int]): list of binary digits\n\n    Returns:\n        int: integer\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int([1, 0, 1, 1]))",
      1.7705078125
    ],
    [
      "def convert_binary_to_int(binary_tuple):\n    result = 0\n\n    for i in range(len(binary_tuple)):\n        result = result + binary_tuple[i] * 2**i\n\n    return result\n\n\ndef main():\n    binary_tuple = (1, 0, 0, 1)\n    result = convert_binary_to_int(binary_tuple)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      1.68359375
    ],
    [
      "def binary_to_int(binary_tuple):\n    result = 0\n    for idx, num in enumerate(reversed(binary_tuple)):\n        result += 2 ** idx * num\n    return result\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 0, 1)) == 10",
      1.5439453125
    ],
    [
      "# def binary_to_int(binary):\n#     return int(\"\".join(binary), 2)\n\n\ndef binary_to_int(binary):\n    return int(binary, 2)\n\n\nif __name__ == \"__main__\":\n    binary = \"11001\"\n    print(binary_to_int(binary))",
      1.4423828125
    ],
    [
      "from functools import reduce\n\n\ndef binary_to_int(binary_tuple):\n    return reduce(lambda x, y: x * 2 + y, binary_tuple)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((0, 0, 1, 1)) == 11\n    assert binary_to_int((1, 1, 1, 1)) == 15",
      1.3662109375
    ],
    [
      "from typing import List\n\n\ndef binary_to_int(binary: List[int]) -> int:\n    \"\"\"Binary to int.\n\n    :param binary: binary number\n    :return: integer\n    \"\"\"\n    return int(\"\".join(str(digit) for digit in binary), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_int([1, 1, 0, 1]))",
      1.2666015625
    ],
    [
      "# Time: O(n)\n# Space: O(1)\ndef binary_tuple_to_int(binary_tuple):\n    result = 0\n\n    for i, val in enumerate(reversed(binary_tuple)):\n        result += val * (2 ** i)\n\n    return result\n\n\nif __name__ == '__main__':\n    print(binary_tuple_to_int((1, 1, 0, 1)))",
      1.1455078125
    ],
    [
      "def binary_to_integer(t):\n    \"\"\"\n    :param t: binary tuple\n    :return: integer\n    >>> binary_to_integer((1, 0, 0, 1))\n    5\n    >>> binary_to_integer((1, 1, 1, 1))\n    15\n    \"\"\"\n    return int(''.join([str(i) for i in t]), 2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.017578125
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Returns:\n        int: integer\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_integer((1, 0, 0, 1)) == 5\n    assert binary_tuple_to_integer((0, 0, 1)) == 4\n    assert binary_tuple_to_integer((1, 1, 1, 1)) == 15\n    assert binary_tuple_to_integer((1, 0, 1, 1)) == 11\n    assert binary_tuple_to_integer((1, 1, 1, 0)) == 14",
      0.97802734375
    ],
    [
      "from functools import reduce\n\n\ndef binary_tuple_to_int(binary_tuple):\n    \"\"\"\n    :param binary_tuple: Tuple containing binary digits\n    :return: Integer equivalent of binary tuple\n    \"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary_tuple)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 0, 1, 1)) == 13",
      0.947265625
    ],
    [
      "from typing import List\n\n\ndef binary_to_int(bin_list: List[int]) -> int:\n    \"\"\"Binary to integer.\n\n    Args:\n        bin_list (List[int]): list of binary digits\n\n    Returns:\n        int: integer value\n    \"\"\"\n    return int(\"\".join(map(str, bin_list)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int([1, 0, 1, 1]) == 13",
      0.7529296875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert a tuple of binary digits to integer.\n\n    :param binary_tuple: tuple of binary digits\n    :return: integer\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 0, 1)) == 5\n    assert binary_tuple_to_int((1, 1, 0, 1)) == 10",
      0.67822265625
    ],
    [
      "def binary_to_int(binary: tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary (tuple[int, ...]): Binary tuple.\n\n    Examples:\n        >>> binary_to_int((0, 1, 1, 0, 1, 0, 1, 1))\n        131\n        >>> binary_to_int((1, 1, 1, 1, 1, 1, 1, 1))\n        255\n\n    Returns:\n        int: Integer representation of binary tuple.\n    \"\"\"\n    return sum(val * (2 ** idx) for idx, val in enumerate(reversed(binary)))\n\n\ndef main():\n    \"\"\"Print binary_to_int.\"\"\"\n    print(binary_to_int((0, 1, 1, 0, 1, 0, 1, 1)))\n    print(binary_to_int((1, 1, 1, 1, 1, 1, 1, 1)))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.375
    ],
    [
      "# O(n) time | O(1) space - where n is the length of the tuples\ndef binaryTupleToNumber(tuple):\n    number = 0\n    for i in range(len(tuple)):\n        number = number * 2 + tuple[i]\n    return number",
      0.14501953125
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_integer(binary: Tuple[int, ...]) -> int:\n    \"\"\"Convert a binary tuple to integer.\n\n    Args:\n        binary (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_integer((1, 0, 1, 1)) == 13\n    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1)) == 1023\n    assert binary_to_integer((0, 0, 0, 0)) == 0",
      0.136474609375
    ],
    [
      "def binary_tuple_to_int(tuple):\n    # First, let's validate the tuple\n    for val in tuple:\n        if not (val == 1 or val == 0):\n            raise ValueError(\"Only binary values are allowed\")\n\n    # We can convert it to a string and then use int()\n    return int(\"\".join([str(i) for i in tuple]))\n\n\nif __name__ == '__main__':\n    print(binary_tuple_to_int((1, 0, 1, 0, 0)))",
      0.044677734375
    ],
    [
      "def binary_tuple_to_int(b):\n    return int(''.join(map(str, b)), 2)\n\n\nprint(binary_tuple_to_int((1, 1, 0, 1)))",
      -0.03546142578125
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef binary_tuple_to_integer(binary_tuple):\n    return reduce(lambda x, y: x * 2 + y, binary_tuple)\n\n\nprint(binary_tuple_to_integer((1, 0, 0, 1)))",
      -0.0677490234375
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_tuple_to_int((1, 0, 1)) == 5\n    \"\"\"\n    return sum(2 ** (len(binary_tuple) - index - 1) * value for index, value in enumerate(binary_tuple))\n\n\nif __name__ == '__main__':\n    print(binary_tuple_to_int((1, 0, 1)))",
      -0.07275390625
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_integer(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): given binary tuple.\n\n    Examples:\n        >>> assert binary_tuple_to_integer((1, 0, 1)) == 5\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_integer((1, 0, 1)))",
      -0.1378173828125
    ],
    [
      "from typing import List\n\n\ndef binary_tuple_to_int(bin_tuple: List[int]) -> int:\n    \"\"\"Binary tuple to integer.\n\n    :param bin_tuple: binary tuple\n    :return: integer\n    \"\"\"\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int([1, 0, 1, 1]) == 13",
      -0.237548828125
    ],
    [
      "from functools import reduce\n\n\ndef bin_tuple_to_int(tup):\n    \"\"\"Convert a binary tuple to integer.\"\"\"\n    return reduce(lambda a, b: a << 1 | b, tup)",
      -0.25634765625
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_decimal(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Binary to decimal.\"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((0, 1, 1)) == 5\n    assert binary_to_decimal((0, 1, 0, 1, 1)) == 11\n    assert binary_to_decimal((1, 1, 1, 1, 1)) == 31",
      -0.3408203125
    ],
    [
      "from typing import List\n\n\ndef binary_to_integer(binary: List[int]) -> int:\n    \"\"\"Binary to integer.\n\n    Args:\n        binary (List[int]): binary number\n\n    Returns:\n        int: integer\n    \"\"\"\n    return int(\"\".join(str(b) for b in binary), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_integer([1, 1, 1, 1, 1, 1]) == 127",
      -0.483154296875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_decimal(binary: Tuple[int]) -> int:\n    \"\"\"Binary to decimal.\n\n    :param binary: binary tuple\n    :return: decimal integer\n    \"\"\"\n    return int(\"\".join(map(str, binary)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((1, 0, 1)) == 5",
      -0.5419921875
    ],
    [
      "from functools import reduce\nfrom typing import Iterable\n\n\ndef binary_to_decimal(binary_tuple: Iterable[int]) -> int:\n    \"\"\"\n    :param binary_tuple:\n    :return: decimal number\n\n    >>> binary_to_decimal((0, 1, 0, 1))\n    5\n    >>> binary_to_decimal((1, 0, 0, 1, 1, 0))\n    42\n    >>> binary_to_decimal((0, 0))\n    0\n    >>> binary_to_decimal((1, 1))\n    3\n    >>> binary_to_decimal((1, 0, 1))\n    5\n    >>> binary_to_decimal((1, 1, 0))\n    6\n    >>> binary_to_decimal((1, 0, 0, 0))\n    4\n    >>> binary_to_decimal((1, 0, 1, 0))\n    6\n    >>> binary_to_decimal((0, 1, 1, 0))\n    6\n    >>> binary_to_decimal((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    3402823669209384634633746074317681671580L\n    >>> binary_to_decimal((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n    0\n    >>> binary_to_decimal((1, 0, 1, 1, 1, 0, 1, 0,",
      -0.57861328125
    ],
    [
      "def binary_to_integer(binary_tuple):\n    integer = 0\n    for i, bit in enumerate(reversed(binary_tuple)):\n        integer += bit * (2 ** i)\n    return integer\n\n\ndef test_binary_to_integer():\n    \"\"\"\n    >>> test_binary_to_integer()\n    \"\"\"\n    assert binary_to_integer((1, 0, 0, 1, 1, 0, 0, 1)) == 101\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.58740234375
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_integer((1, 0, 1)) == 5\n    assert binary_to_integer((1, 0, 0, 1)) == 9\n    assert binary_to_integer((0, 0, 1)) == 4\n    assert binary_to_integer((1, 1, 1, 1, 1)) == 31\n    assert binary_to_integer((0, 0, 0, 0, 0, 0, 1)) == 128",
      -0.61865234375
    ],
    [
      "from functools import reduce\nfrom typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): tuple of binary digits\n\n    Examples:\n        >>> binary_tuple_to_int((1, 1, 1, 1))\n        15\n        >>> binary_tuple_to_int((0, 0, 1))\n        4\n    \"\"\"\n    return reduce(\n        lambda carry, digit: carry * 2 + digit,\n        binary_tuple,\n        0,\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.689453125
    ],
    [
      "def binary_to_decimal(t):\n    \"\"\"\n    :param t: list\n    :return: int\n    \"\"\"\n    return int(\"\".join(map(str, t)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal([0, 1, 1]))",
      -0.85693359375
    ],
    [
      "def binary_tuple_to_int(binary_tuple):\n    return sum(2 ** i * binary_tuple[i] for i in range(len(binary_tuple)))\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((0, 1, 0)))",
      -0.85693359375
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple\n\n    Examples:\n        >>> assert binary_to_integer((1, 0, 1, 1)) == 13\n\n    Returns:\n        int: integer value of binary tuple\n    \"\"\"\n    return sum(\n        value * (2 ** index) for index, value in enumerate(binary_tuple[::-1])\n    )\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((1, 0, 1, 1)))",
      -0.85693359375
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_tuple_to_int((0, 1, 0)) == 4\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((0, 1, 0)))",
      -0.85693359375
    ],
    [
      "def binary_tuple_to_int(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\"\"\"\n    return sum(val * (2 ** idx) for idx, val in enumerate(binary_tuple[::-1]))",
      -0.857421875
    ],
    [
      "def binary_to_integer(binary_tuple):\n    \"\"\"\n    Convert the given binary tuple to integer.\n\n    :param binary_tuple: Binary tuple.\n    :type binary_tuple: tuple\n    :return: Integer.\n    :rtype: int\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((0, 1, 1, 0, 1)))",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef tuple_to_int(tup: List[int]) -> int:\n    \"\"\"Returns the integer value of a binary tuple.\n\n    Args:\n        tup (List[int]): the binary tuple\n\n    Examples:\n        >>> tuple_to_int([0, 1, 1])\n        5\n        >>> tuple_to_int([1, 0, 1])\n        6\n    \"\"\"\n    return sum(v * 2 ** i for i, v in enumerate(reversed(tup)))\n\n\ndef main():\n    tup = [0, 1, 1]\n    print(f'{tup} to int: {tuple_to_int(tup)}')\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef binary_tuple_to_int(binary_tuple):\n    \"\"\"Convert binary tuple to integer.\n\n    Parameters\n    ----------\n    binary_tuple: tuple of int\n\n    Returns\n    -------\n    int\n    \"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary_tuple)",
      -0.85791015625
    ],
    [
      "from functools import reduce\nfrom operator import xor\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef binary_tuple_to_int(binary_tuple):\n    return reduce(xor, binary_tuple, 0)",
      -0.85791015625
    ],
    [
      "# O(n) time | O(n) space\ndef binaryTupleToNumber(tuple):\n    return int(\"\".join(map(str, tuple)), 2)",
      -0.85791015625
    ],
    [
      "def binary_to_integer(binary):\n    return int(\"\".join(binary), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_integer((1, 0, 1)) == 5",
      -0.85791015625
    ],
    [
      "def binary_tuple_to_int(binary_tuple):\n    return int(''.join(map(str, binary_tuple)), 2)\n\n\nprint(binary_tuple_to_int((0, 1, 1, 1, 0, 1, 0, 1)))",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef binary_tuple_to_int(binary_tuple: List[int]) -> int:\n    \"\"\"Convert binary tuple to int.\n\n    Args:\n        binary_tuple (List[int]): binary tuple to convert\n\n    Returns:\n        int: converted int\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int([1, 1, 1, 1]) == 15",
      -0.8583984375
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 1, 0, 1, 0)) == 42",
      -0.85888671875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: converted integer\n    \"\"\"\n    return sum(binary_tuple[i] * 2 ** (len(binary_tuple) - 1 - i) for i in range(len(binary_tuple)))\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((1, 0, 1, 0)))",
      -0.85888671875
    ],
    [
      "from functools import reduce\n\n\ndef convert_binary_to_int(binary):\n    \"\"\"\n    :param binary: tuple of binary digits\n    :return: int\n    >>> convert_binary_to_int((0, 1, 0, 1))\n    5\n    >>> convert_binary_to_int((1, 0, 0, 1))\n    9\n    >>> convert_binary_to_int((0, 0, 1))\n    1\n    \"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary)\n\n\ndef main():\n    print(\n        \"The integer equivalent of the given binary tuple is: \"\n        f\"{convert_binary_to_int((0, 1, 0, 1))}\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.90478515625
    ],
    [
      "from functools import reduce\n\n\n# O(n) time | O(n) space - where n is the length of the binary tuple\ndef binaryTupleToNumber(binaryTuple):\n    return reduce(lambda result, num: result * 2 + num, binaryTuple)",
      -0.90869140625
    ],
    [
      "from functools import reduce\nfrom typing import Tuple\n\n\ndef binary_to_decimal(binary: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to decimal.\n\n    Args:\n        binary (Tuple[int, ...]): tuple of binary numbers\n\n    Returns:\n        int: decimal value\n    \"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((1, 0, 1)) == 5",
      -0.9111328125
    ],
    [
      "def binary_tuple_to_int(binary_tuple):\n    return sum([2**i * val for i, val in enumerate(reversed(binary_tuple))])\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 1, 1, 0)) == 14",
      -0.91943359375
    ],
    [
      "def binary_tuple_to_integer(binary_tuple):\n    if not binary_tuple:\n        return None\n\n    return sum([value * (2 ** i) for i, value in enumerate(binary_tuple)])\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_integer((1, 1, 0, 1)) == 13",
      -0.98291015625
    ],
    [
      "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)), 2)\n\n\nif __name__ == \"__main__\":\n    tup = (1, 0, 1, 0, 1, 0)\n    print(tuple_to_int(tup))",
      -0.99462890625
    ],
    [
      "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return sum(\n        int(digit) * (2 ** idx) for idx, digit in enumerate(binary_tuple[::-1])\n    )\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 0, 1)) == 5\n    assert binary_tuple_to_int((1, 0, 0, 1)) == 10\n    assert binary_tuple_to_int((1, 1, 1, 1, 0)) == 30\n    assert binary_tuple_to_int((1, 0, 1, 1)) == 11",
      -1.0595703125
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_integer(bin_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        bin_tuple (Tuple[int]): binary tuple\n\n    Returns:\n        int: integer\n    \"\"\"\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((0, 1, 0, 1, 1, 0, 1, 1)))",
      -1.091796875
    ],
    [
      "# O(n) time | O(1) space\ndef binaryTupleToNumber(binaryTuple):\n\tresult = 0\n\tfor i in range(len(binaryTuple)):\n\t\tresult += 2**i * binaryTuple[i]\n\treturn result\n\n\nprint(binaryTupleToNumber((1, 1, 1, 1, 0)))",
      -1.2763671875
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_decimal(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Converts the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Examples:\n        >>> assert binary_to_decimal((1, 0, 1)) == 5\n    \"\"\"\n    return sum(digit * 2 ** (len(binary_tuple) - i - 1) for i, digit in enumerate(binary_tuple))\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal((1, 0, 1)))",
      -1.326171875
    ],
    [
      "def binary_to_int(binary_tuple):\n    integer = 0\n    for i in range(len(binary_tuple)):\n        integer += binary_tuple[i] * (2 ** i)\n    return integer\n\n\nif __name__ == \"__main__\":\n    binary_tuple = (1, 0, 1, 1, 1)\n    print(binary_to_int(binary_tuple))",
      -1.3349609375
    ],
    [
      "def binary_to_int(bin_tuple):\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 1, 1, 1, 0)) == 31",
      -1.4306640625
    ],
    [
      "# O(n) time | O(n) space\ndef binaryTupleToNumber(binaryTuple):\n    return int(\"\".join(map(str, binaryTuple)), 2)",
      -1.4306640625
    ],
    [
      "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_to_integer((1, 0, 1)) == 5\n    \"\"\"\n    return sum(\n        number * 2 ** index\n        for index, number in enumerate(reversed(binary_tuple))\n    )\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((1, 0, 1)))",
      -1.4755859375
    ],
    [
      "def convert_to_integer(binary_tuple):\n    integer = 0\n    for i in range(len(binary_tuple)):\n        integer += binary_tuple[i] * 2 ** i\n\n    return integer\n\n\nif __name__ == \"__main__\":\n    print(convert_to_integer((0, 1, 0)))",
      -1.5419921875
    ],
    [
      "from typing import Tuple\n\n\ndef tuple_to_int(tuple_: Tuple[int]) -> int:\n    \"\"\"Convert given tuple of integers to integer.\n\n    Args:\n        tuple_ (Tuple[int]): Tuple of integers to convert.\n\n    Examples:\n        >>> assert tuple_to_int((0, 1, 0, 1)) == 11\n        >>> assert tuple_to_int((1, 1, 0, 1)) == 13\n        >>> assert tuple_to_int((1, 1, 0, 0)) == 12\n        >>> assert tuple_to_int((1, 0, 1, 0)) == 10\n    \"\"\"\n    return sum(tuple_[i] * (2 ** i) for i in range(len(tuple_)))\n\n\nif __name__ == \"__main__\":\n    print(tuple_to_int((0, 1, 0, 1)))",
      -1.5771484375
    ],
    [
      "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef convert_binary_tuple_to_integer(binary_tuple):\n    if not binary_tuple:\n        return 0\n    elif len(binary_tuple) == 1:\n        return int(binary_tuple[0])\n\n    return int(binary_tuple[0]) * 2 ** (len(binary_tuple) - 1) + convert_binary_tuple_to_integer(binary_tuple[1:])\n\n\nif __name__ == \"__main__\":\n    print(convert_binary_tuple_to_integer((\"1\", \"1\", \"0\")))",
      -1.787109375
    ],
    [
      "from collections import deque\n\n\ndef convert_binary_tuple_to_integer(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to convert.\n\n    Returns:\n        int: integer value of the given binary tuple.\n    \"\"\"\n    integer = 0\n    for index, value in enumerate(binary_tuple):\n        if value == \"1\":\n            integer += (2 ** index)\n    return integer\n\n\ndef convert_binary_tuple_to_integer_2(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to convert.\n\n    Returns:\n        int: integer value of the given binary tuple.\n    \"\"\"\n    integer = 0\n    for value in reversed(binary_tuple):\n        if value == \"1\":\n            integer += (2 ** binary_tuple.index(value))\n    return integer\n\n\ndef convert_binary_tuple_to_integer_3(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to convert.\n\n    Returns:\n        int: integer value of the given binary tuple.\n    \"\"\"\n    integer = 0\n    for index, value in enumerate(binary_tuple):\n        if value == \"1\":\n            integer += (2 ** (len(binary_tuple) - index - 1))\n    return integer\n\n\ndef convert_binary_tuple_to_integer_4(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to convert.\n\n    Returns:\n        int: integer value of the given binary tuple.\n    \"\"\"\n    integer = 0\n    for value in reversed(binary_tuple):\n        if value == \"1\":\n            integer += (2 ** binary_tuple.index(value))\n    return integer\n\n\ndef convert_binary_tuple_to_integer_5(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to",
      -1.953125
    ],
    [
      "from typing import List\n\n\ndef binary_to_integer(binary_tuple: List[int]) -> int:\n    \"\"\"\n    :param binary_tuple: List[int]\n    :return: int\n    >>> binary_to_integer([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
      -2.16796875
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef binary_tuple_to_integer(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (tuple): Binary tuple.\n\n    Returns:\n        int: Integer.\n    \"\"\"\n    return reduce(\n        lambda x, y: 2 * x + y,\n        map(lambda x: int(x), reversed(binary_tuple)),\n        0\n    )",
      -2.427734375
    ],
    [
      "from typing import List\n\n\ndef binary_tuple_to_integer(binary_tuple: List[int]) -> int:\n    \"\"\"\n    :param binary_tuple: list of binary numbers\n    :return: integer representation of binary tuple\n    >>> binary_tuple_to_integer([1, 0, 1, 0, 1])\n    10\n    >>> binary_tuple_to_integer([1, 1, 1, 1, 1])\n    31\n    >>> binary_tuple_to_integer([0, 0, 0, 0, 0])\n    0\n    >>> binary_tuple_to_integer([1, 1, 1, 1, 0])\n    30\n    >>> binary_tuple_to_integer([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
      -2.537109375
    ],
    [
      "from functools import reduce\nfrom operator import xor\nfrom typing import Tuple\n\n\ndef convert_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Examples:\n        >>> assert convert_to_int((0, 0, 1)) == 4\n    \"\"\"\n    return reduce(xor, binary_tuple, 0)\n\n\ndef main() -> None:\n    \"\"\"Main function.\"\"\"\n    binary_tuple = (0, 0, 1)\n    print(f'The binary tuple: {binary_tuple}')\n    print(f'The integer: {convert_to_int(binary_tuple)}')\n\n\nif __name__ == '__main__':\n    main()",
      -13.0703125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}