{
  "problem": {
    "task_id": "MBPP/45",
    "prompt": "Write a function to find the gcd of the given array elements.",
    "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
    "test_list": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ],
    "challenge_test_list": [],
    "problem_id": 34
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from functools import reduce\nfrom math import gcd\n\n\ndef gcd_array(arr: list) -> int:\n    \"\"\"\n    Return the gcd of the given array elements.\n    >>> gcd_array([2, 4, 6])\n    2\n    >>> gcd_array([2, 4, 8])\n    2\n    >>> gcd_array([2, 6, 12, 18])\n    6\n    >>> gcd_array([1, 1, 1, 1, 1, 1])\n    1\n    >>> gcd_array([2, 6, 12, 18, 24])\n    6\n    >>> gcd_array([1, 3, 2, 4])\n    1\n    >>> gcd_array([1, 3, 2, 4, 5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n    1\n    >>> gcd_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    1\n    \"\"\"\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      15.1484375
    ],
    [
      "from typing import List\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"\n    Returns the gcd of the given two numbers.\n    >>> gcd(5, 10)\n    5\n    >>> gcd(10, 20)\n    10\n    >>> gcd(5, 3)\n    1\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_array(nums: List[int]) -> int:\n    \"\"\"\n    Returns the gcd of the given array elements.\n    >>> gcd_array([10, 20, 5, 40, 30])\n    5\n    >>> gcd_array([10, 15, 15, 25, 20])\n    5\n    \"\"\"\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        result = gcd(result, nums[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      14.9140625
    ],
    [
      "from functools import reduce\n\n\ndef gcd(x, y):\n    \"\"\"\n    Euclid's algorithm\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    assert gcd_array([12, 18, 36]) == 6\n    assert gcd_array([3, 6, 9, 12]) == 3\n    assert gcd_array([5, 15, 45]) == 5\n\n\nif __name__ == '__main__':\n    main()",
      13.859375
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(array):\n    result = array[0]\n    for i in range(1, len(array)):\n        result = gcd(result, array[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    arr = [10, 15, 20, 25]\n    print(gcd_of_array(arr))",
      12.90625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_of_array(arr):\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = gcd(res, arr[i])\n    return res\n\n\nprint(gcd_of_array([3, 9, 15, 5]))",
      7.96484375
    ],
    [
      "from functools import reduce\n\n\ndef gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return gcd(x % y, y)\n    else:\n        return gcd(y % x, x)\n\n\ndef gcd_arr(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    arr = [12, 3, 2, 15, 16]\n    print(f\"gcd of {arr} is {gcd_arr(arr)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      7.84765625
    ],
    [
      "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return gcd(y, x)\n    return gcd(x, y-x)\n\n\ndef gcd_array(arr):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    arr = [3, 6, 9, 12, 15, 36]\n    print(gcd_array(arr))",
      7.765625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        gcd_num = arr[0]\n        for i in range(1, len(arr)):\n            gcd_num = gcd(gcd_num, arr[i])\n\n        return gcd_num\n\n\nassert gcd_array([3, 9, 15, 3, 5]) == 3\nassert gcd_array([4, 6, 9]) == 6\nassert gcd_array([1, 2, 3, 4, 5]) == 1\nassert gcd_array([10, 20, 30, 40, 50]) == 10\nassert gcd_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1",
      7.390625
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(N*log(M)) where N is the number of elements in the array and M is the max value of the array\n# Space complexity: O(1)\ndef find_gcd(arr):\n    return reduce(gcd, arr)\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\n# Time complexity: O(N) where N is the number of elements in the array\n# Space complexity: O(1)\ndef find_gcd2(arr):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n    return result\n\n\ndef main():\n    arr = [15, 35, 21, 10]\n    result = find_gcd(arr)\n    print(result)\n    result = find_gcd2(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      6.796875
    ],
    [
      "from functools import reduce\n\n\ndef gcd(x, y):\n    \"\"\"\n    Euclid's algorithm for GCD.\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef gcd_of_array(arr):\n    \"\"\"\n    Euclid's algorithm for GCD.\n    \"\"\"\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    assert gcd_of_array([12, 15, 18, 21]) == 3",
      6.0
    ],
    [
      "from functools import reduce\nfrom math import gcd\n\n\n# Time complexity O(n)\n# Space complexity O(1)\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\n# Time complexity O(n)\n# Space complexity O(1)\ndef gcd_of_array2(arr):\n    if len(arr) == 0:\n        return 0\n    result = arr[0]\n    for num in arr[1:]:\n        result = gcd(result, num)\n    return result\n\n\n# Time complexity O(n)\n# Space complexity O(1)\ndef gcd_of_array3(arr):\n    result = arr[0]\n    for num in arr[1:]:\n        if result > num:\n            result, num = num, result\n\n        while num:\n            r = result % num\n            result, num = num, r\n    return result\n\n\n# Time complexity O(n)\n# Space complexity O(1)\ndef gcd_of_array4(arr):\n    result = arr[0]\n    for num in arr[1:]:\n        if result > num:\n            result, num = num, result\n\n        while num:\n            r = result % num\n            result, num = num, r\n\n    return result\n\n\n# Time complexity O(n)\n# Space complexity O(n)\ndef gcd_of_array5(arr):\n    return reduce(gcd, sorted(arr))\n\n\nprint(gcd_of_array([2, 5, 6, 9, 10, 15]))\nprint(gcd_of_array2([2, 5, 6, 9, 10, 15]))\nprint(gcd_of_array3([2, 5, 6, 9, 10, 15]))\nprint(gcd_of_array4([2, 5, 6, 9, 10, 15]))\nprint(gcd_of_array5([2, 5, 6, 9, 10, 15]))",
      5.81640625
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_array(array):\n    return reduce(gcd, array)\n\n\nif __name__ == \"__main__\":\n    assert gcd_array([2, 4, 6, 8]) == 2\n    assert gcd_array([2, 4, 6, 8, 12]) == 2\n    assert gcd_array([2, 4, 6, 8, 12, 14]) == 2\n    assert gcd_array([2, 4, 6, 8, 12, 14, 16]) == 2\n    assert gcd_array([2, 4, 6, 8, 12, 14, 16, 18]) == 2\n    assert gcd_array([2, 4, 6, 8, 12, 14, 16, 18, 20]) == 2\n    assert gcd_array([2, 4, 6, 8, 12, 14, 16, 18, 20, 24]) == 2",
      5.546875
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_of_array(array):\n    if len(array) == 0:\n        return None\n    if len(array) == 1:\n        return array[0]\n    return gcd(array[0], gcd_of_array(array[1:]))\n\n\nprint(gcd_of_array([2, 4, 6, 8, 16]))",
      5.46875
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_array(array):\n    result = array[0]\n    for i in range(1, len(array)):\n        result = gcd(result, array[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    array = [12, 15, 18, 17, 24, 25, 30]\n    print(gcd_array(array))",
      5.39453125
    ],
    [
      "from functools import reduce\n\n\n# def gcd(x, y):\n#     \"\"\"Returns the greatest common divisor of two numbers\"\"\"\n#     while y:\n#         x, y = y, x % y\n#     return x\n\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    arr = [12, 24, 6, 18]\n    print(gcd_array(arr))",
      4.421875
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n    return result\n\n\nprint(gcd_of_array([12, 18, 36, 9]))",
      4.38671875
    ],
    [
      "from functools import reduce\n\n\ndef gcd_array(arr):\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    return reduce(lambda a, b: gcd(a, b), arr)\n\n\ndef gcd(a, b):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_array2(arr):\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    return gcd(arr[0], gcd_array2(arr[1:]))\n\n\nif __name__ == \"__main__\":\n    arr = [2, 4, 6, 8]\n    assert gcd_array(arr) == 2\n    assert gcd_array2(arr) == 2\n\n    arr = [14, 27, 104]\n    assert gcd_array(arr) == 1\n    assert gcd_array2(arr) == 1",
      3.931640625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[0], gcd_array(arr[1:]))\n\n\nprint(gcd_array([12, 4, 6, 8]))",
      3.794921875
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    print(gcd_array([12, 18, 24]))\n    print(gcd_array([99, 84, 51, 36, 1]))\n\n\nif __name__ == '__main__':\n    main()",
      3.2109375
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_array(array):\n    return reduce(gcd, array)\n\n\ndef main():\n    print(\"gcd of 2, 4, 6, 8, 10 is {}\".format(gcd_array([2, 4, 6, 8, 10])))\n    print(\"gcd of 2, 4, 6, 8, 10, 12 is {}\".format(gcd_array([2, 4, 6, 8, 10, 12])))\n\n\nif __name__ == '__main__':\n    main()",
      3.02734375
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(N)\n# Space complexity: O(1)\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef find_gcd(arr):\n    return reduce(gcd, arr)\n\n\nprint(find_gcd([2, 4, 6, 8]))\nprint(find_gcd([2, 5, 6, 10]))",
      2.94140625
    ],
    [
      "def gcd_array(arr):\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = gcd_of_two_numbers(gcd, arr[i])\n    return gcd\n\ndef gcd_of_two_numbers(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if (x % i == 0) and (y % i == 0):\n            gcd = i\n    return gcd\n\narr = [12, 14, 16, 18, 20]\nprint(gcd_array(arr))",
      2.603515625
    ],
    [
      "from functools import reduce\nfrom math import gcd\n\n\ndef gcd_array(array):\n    return reduce(gcd, array)\n\n\ndef gcd_array_eff(array):\n    \"\"\"\n    Efficient solution.\n    \"\"\"\n    return reduce(gcd, sorted(array)[1:])\n\n\nif __name__ == \"__main__\":\n    assert gcd_array([12, 9, 6, 3]) == 3\n    assert gcd_array([3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3\n    assert gcd_array([12, 36, 48, 60]) == 12\n    assert gcd_array([12, 9, 6, 3]) == gcd_array_eff([12, 9, 6, 3])",
      2.53125
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_of_array(a):\n    res = a[0]\n    for i in range(1, len(a)):\n        res = gcd(res, a[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([2, 4, 6, 8]))",
      2.185546875
    ],
    [
      "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x == y:\n        return x\n    if x > y:\n        return gcd(x % y, y)\n    else:\n        return gcd(x, y % x)\n\n\ndef gcd_of_array(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    return gcd(arr[0], gcd_of_array(arr[1:]))\n\n\ndef main():\n    arr = [10, 20, 4, 5, 10]\n    print(\"GCD of %s is %d\" % (arr, gcd_of_array(arr)))\n\n\nmain()",
      2.083984375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_of_array(a):\n    res = a[0]\n    for i in range(1, len(a)):\n        res = gcd(res, a[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([1, 2, 4, 6]))",
      1.9287109375
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_array(arr):\n    if len(arr) == 0:\n        return 0\n\n    gcd_val = arr[0]\n\n    for i in range(1, len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n\n    return gcd_val\n\n\nif __name__ == \"__main__\":\n    assert gcd_array([2, 4, 6, 8, 16]) == 2",
      1.837890625
    ],
    [
      "def gcd_array(arr):\n    gcd = arr[0]\n\n    for i in range(1, len(arr)):\n        gcd = gcd_two_numbers(gcd, arr[i])\n\n    return gcd\n\n\ndef gcd_two_numbers(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    if a < b:\n        a, b = b, a\n\n    if a % b == 0:\n        return b\n\n    return gcd_two_numbers(b, a % b)\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([12, 4, 24, 16]))",
      1.6337890625
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)\ndef gcd_of_array(nums):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return reduce(gcd, nums)\n\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1)\ndef gcd_of_array_2(nums):\n    nums.sort()\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        result = gcd(result, nums[i])\n\n    return result\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)\ndef gcd_of_array_3(nums):\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            result = gcd(result, nums[i])\n\n    return result\n\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1)\ndef gcd_of_array_4(nums):\n    nums.sort()\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            result = gcd(result, nums[i])\n\n    return result\n\n\n# Test cases:\nprint(gcd_of_array([2, 5, 6, 9, 10, 3]))\nprint(gcd_of_array_2([2, 5, 6, 9, 10, 3]))\nprint(gcd_of_array_3([2, 5, 6, 9, 10, 3]))\nprint(gcd_of_array_4([2, 5, 6, 9, 10, 3]))",
      1.6201171875
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = gcd(res, arr[i])\n    return res\n\n\ndef main():\n    arr_input = [int(x) for x in input(\"Enter the array elements: \").split()]\n    print(f\"The gcd of array elements is {gcd_of_array(arr_input)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      1.5126953125
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    assert gcd_of_array([6, 24, 36, 12]) == 12\n    assert gcd_of_array([6, 24, 36, 12, 6]) == 6",
      1.4423828125
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[0], gcd_array(arr[1:]))\n\n\nprint(gcd_array([1, 2, 3, 4, 5]))",
      1.3857421875
    ],
    [
      "def gcd_of_array(arr):\n    # Base case\n    if len(arr) == 2:\n        return gcd(arr[0], arr[1])\n    # Recursive case\n    else:\n        return gcd(arr[0], gcd_of_array(arr[1:]))\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint(gcd_of_array([2, 4, 6, 8, 12, 16]))",
      1.26953125
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    arr = [12, 4, 24, 16]\n    print(gcd_array(arr))",
      1.068359375
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    gcd_val = arr[0]\n    for i in range(1, len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n    return gcd_val\n\n\nif __name__ == \"__main__\":\n    assert gcd_array([12, 24, 6, 18]) == 6",
      1.0673828125
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef gcd_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return gcd(arr[0], arr[1])\n    else:\n        return gcd(arr[0], gcd_array(arr[1:]))\n\n# print(gcd_array([12, 14, 16]))\n# print(gcd_array([12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42]))\n\n\"\"\"\nWrite a function to find the lcm of the given array elements.\n\"\"\"\n\ndef lcm(a, b):\n    return (a*b)//gcd(a, b)\n\ndef lcm_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return lcm(arr[0], arr[1])\n    else:\n        return lcm(arr[0], lcm_array(arr[1:]))\n\nprint(lcm_array([12, 14, 16]))\nprint(lcm_array([12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42]))\n\n\"\"\"\nWrite a function to find the hcf of the given array elements.\n\"\"\"\n\ndef hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, a % b)\n\ndef hcf_array(arr):\n    if len(arr) == 1:\n        return arr[0]",
      1.0087890625
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_array(arr):\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return gcd(arr[0], gcd_array(arr[1:]))\n\n\nprint(gcd_array([15, 20, 5, 17]))\nprint(gcd_array([4, 8, 12, 24]))\nprint(gcd_array([1, 2, 3]))\nprint(gcd_array([1, 2]))\nprint(gcd_array([1]))\nprint(gcd_array([]))",
      0.91943359375
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    print(gcd_array([12, 24, 36, 48]))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.82666015625
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    return reduce(lambda x, y: gcd(x, y), arr)\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([1, 2, 3, 4, 5, 6]))",
      0.69873046875
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    print(gcd_array([1, 18, 51, 36]))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.4775390625
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(array):\n    if len(array) == 0:\n        return 0\n    result = array[0]\n    for i in range(1, len(array)):\n        result = gcd(result, array[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    assert gcd_of_array([12, 76, 9, 6, 12]) == 6",
      0.389404296875
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    arr = [12, 24, 6, 18]\n    print(gcd_array(arr))\n\n\nif __name__ == '__main__':\n    main()",
      0.33447265625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_of_array(a):\n    if len(a) == 2:\n        return gcd(a[0], a[1])\n    else:\n        return gcd(a[0], gcd_of_array(a[1:]))\n\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([12, 18, 24, 60]))",
      0.303466796875
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_array(array):\n    gcd = array[0]\n    for i in range(1, len(array)):\n        gcd = gcd(array[i], gcd)\n    return gcd\n\n\ndef main():\n    array = [12, 15, 18, 21]\n    print(\"GCD of %s is %d\" % (array, gcd_array(array)))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.2626953125
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(a):\n    return reduce(lambda x, y: gcd(x, y), a)\n\n\nif __name__ == \"__main__\":\n    assert gcd_of_array([12, 18]) == 6\n    assert gcd_of_array([2, 4, 6]) == 2",
      0.09722900390625
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    return gcd(arr[0], gcd_of_array(arr[1:]))\n\n\ndef main():\n    arr = [2, 4, 6, 8]\n    print(gcd_of_array(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.035003662109375
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_of_array(arr: list) -> int:\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([15, 5, 10, 20]))",
      0.005870819091796875
    ],
    [
      "def gcd_of_array(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    gcd = gcd_of_array(arr[1:])\n    return gcd_of_two_numbers(arr[0], gcd)\n\n\ndef gcd_of_two_numbers(num1, num2):\n    if num1 == 0:\n        return num2\n    if num2 == 0:\n        return num1\n    if num1 > num2:\n        return gcd_of_two_numbers(num1 - num2, num2)\n    return gcd_of_two_numbers(num1, num2 - num1)\n\n\nif __name__ == \"__main__\":\n    arr = [2, 4, 6, 8]\n    print(gcd_of_array(arr))",
      -0.01465606689453125
    ],
    [
      "from functools import reduce\n\n\ndef gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n\n    for i in range(1, smaller+1):\n        if (x % i == 0) and (y % i == 0):\n            gcd = i\n\n    return gcd\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\nprint(gcd_of_array([15, 51, 16]))",
      -0.015716552734375
    ],
    [
      "def gcd_of_array(arr):\n    if len(arr) == 2:\n        return gcd(arr[0], arr[1])\n    else:\n        return gcd(arr[0], gcd_of_array(arr[1:]))\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    assert gcd_of_array([6, 3, 9, 0, 18, 9, 6, 15]) == 6",
      -0.0633544921875
    ],
    [
      "from functools import reduce\n\n\ndef gcd(x, y):\n    \"\"\"\n    Euclid's Algorithm\n    \"\"\"\n    if x == 0:\n        return y\n    return gcd(y % x, x)\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    print(gcd_array([12, 18, 24]))\n    print(gcd_array([15, 45, 35]))\n    print(gcd_array([3, 6, 9]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.378662109375
    ],
    [
      "from functools import reduce\n\n\n# Time complexity O(nlogn)\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\nprint(gcd_array([6, 4, 5, 3, 7, 1]))",
      -0.52392578125
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    gcd_arr = []\n    for i in range(len(arr)-1):\n        gcd_arr.append(gcd(arr[i], arr[i+1]))\n    return gcd_arr\n\n\nprint(gcd_array([2, 4, 6, 8]))\nprint(gcd_array([12, 24, 36]))\nprint(gcd_array([14, 21, 30, 45]))\nprint(gcd_array([3, 9, 15, 30, 45]))\nprint(gcd_array([16, 18, 24, 36, 48, 60]))",
      -0.59326171875
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef find_gcd(arr):\n    gcd_of_gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd_of_gcd = gcd(gcd_of_gcd, arr[i])\n\n    return gcd_of_gcd\n\n\ndef main():\n    print(\"Please enter the elements of the array, space separated\")\n    arr = list(map(int, input().split()))\n\n    print(find_gcd(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.63330078125
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    assert gcd_array([2, 4, 6, 8]) == 2\n    assert gcd_array([1, 5, 25]) == 1\n    assert gcd_array([3, 9, 3, 9]) == 3",
      -0.673828125
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_array(arr):\n    if len(arr) == 0:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    return gcd(arr[0], gcd_array(arr[1:]))\n\n\nif __name__ == \"__main__\":\n    arr = [10, 20, 4, 25, 20]\n    assert gcd_array(arr) == 5",
      -0.68115234375
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    print(gcd_array([10, 20, 30]))\n    print(gcd_array([2, 4, 6, 8]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8076171875
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_array(arr):\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = gcd(arr[i], res)\n    return res\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([2, 4, 6, 8]))\n    print(gcd_array([12, 14, 16, 18]))\n    print(gcd_array([20, 40, 60, 80]))",
      -0.84912109375
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    \"\"\"\n    Returns gcd of two numbers.\n    \"\"\"\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_array(arr):\n    return reduce(lambda x, y: gcd(x, y), arr)\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([12, 36, 48, 60]))",
      -0.85595703125
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([12, 16, 8, 24, 32]))",
      -0.85595703125
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef find_gcd(arr):\n    return reduce(lambda a, b: gcd(a, b), arr)\n\n\nif __name__ == \"__main__\":\n    print(find_gcd([2, 4, 6, 8, 12]))",
      -0.85595703125
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    print(gcd_of_array([12, 24, 8, 16]))\n    print(gcd_of_array([3, 12, 9, 6, 18, 24]))\n\n\nmain()",
      -0.85595703125
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    arr = [3, 9, 15, 3, 3]\n    print(gcd_of_array(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([12, 35, 5, 6]))",
      -0.85693359375
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    print(gcd_array([12, 36, 96, 168, 8]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([3, 6, 9, 12, 18, 24]))",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([6, 30, 18]))",
      -0.85693359375
    ],
    [
      "from gcd_recursive import gcd\n\n\ndef gcd_array(arr):\n    return reduce(lambda x, y: gcd(x, y), arr)\n\n\ndef main():\n    arr = [12, 15, 19, 11, 10, 18]\n    print(gcd_array(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_of_array(arr):\n    res = 0\n    for i in range(len(arr)):\n        if i == 0:\n            res = arr[i]\n        else:\n            res = gcd(arr[i], res)\n    return res\n\n\ndef main():\n    arr = [2, 4, 6, 8]\n    print(gcd_of_array(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def gcd_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return gcd(arr[0], arr[1])\n    else:\n        return gcd(arr[0], gcd_array(arr[1:]))\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    arr = [10, 20, 30, 40, 50]\n    print(gcd_array(arr))",
      -0.85791015625
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    print gcd_of_array([15, 51, 16])\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_array(arr):\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = gcd(gcd, arr[i])\n    return gcd\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([12, 16, 18, 48]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef gcd_array(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) == 2:\n        return gcd(arr[0], arr[1])\n\n    return gcd_array([arr[len(arr) - 1], gcd_array(arr[:-1])])\n\n\ndef gcd(a: int, b: int) -> int:\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nif __name__ == \"__main__\":\n    assert gcd_array([12, 36, 48, 60]) == 12",
      -0.8583984375
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_of_array(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    gcd_val = arr[0]\n\n    for i in range(1, len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n\n    return gcd_val\n\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([2, 4, 6, 8]))\n    print(gcd_of_array([2, 4, 6, 8, 12]))",
      -0.8583984375
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\ndef main():\n    arr = [12, 36, 48, 63]\n    print(\"The GCD of %s is %d\" % (arr, gcd_of_array(arr)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef gcd(a: int, b: int) -> int:\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr: List[int]) -> int:\n    result: int = arr[0]\n\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert gcd_of_array([6, 24, 14, 18, 22]) == 6\n    assert gcd_of_array([6, 3, 9, 6, 6]) == 3\n    assert gcd_of_array([2, 7, 2, 4, 7, 12, 21, 3]) == 2",
      -0.8583984375
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_array(arr):\n    gcd_val = arr[0]\n    for i in range(1, len(arr)):\n        gcd_val = gcd(arr[i], gcd_val)\n    return gcd_val\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([2, 4, 6, 8]))",
      -0.8583984375
    ],
    [
      "from gcd_two_numbers import gcd\n\n\ndef gcd_array(array):\n    \"\"\"\n    Find the gcd of the given array elements.\n    \"\"\"\n    if len(array) == 1:\n        return array[0]\n\n    return gcd(array[0], gcd_array(array[1:]))\n\n\nif __name__ == \"__main__\":\n    assert gcd_array([12, 6, 3, 9]) == 3\n    assert gcd_array([3, 12, 6, 9]) == 3",
      -0.86083984375
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_of_array(array):\n    return reduce(gcd, array)\n\n\nif __name__ == \"__main__\":\n    assert gcd_of_array([6, 9, 12, 36, 48]) == 12",
      -0.86083984375
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef find_gcd(array):\n    if len(array) == 2:\n        return gcd(array[0], array[1])\n    return gcd(array[0], find_gcd(array[1:]))\n\ndef main():\n    array = [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n    print(find_gcd(array))\n\nif __name__ == \"__main__\":\n    main()",
      -0.87255859375
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n\n    return gcd(b % a, a)\n\n\ndef gcd_array(arr):\n    if len(arr) == 2:\n        return gcd(arr[0], arr[1])\n\n    return gcd(arr[0], gcd_array(arr[1:]))\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([10, 20, 30, 40, 50]))",
      -1.1435546875
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_of_array(arr):\n    return reduce(gcd, arr)\n\n\nif __name__ == \"__main__\":\n    assert gcd_of_array([12, 4, 24]) == 12",
      -1.3349609375
    ],
    [
      "from functools import reduce\n\n\n# Time complexity is O(n)\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    return reduce(lambda x, y: gcd(x, y), arr)\n\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([1, 2, 3, 4, 5]))",
      -1.3955078125
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_array(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return gcd(arr[0], gcd_array(arr[1:]))\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([12, 4, 24, 8]))",
      -1.4189453125
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    \"\"\"\n    Compute gcd of two numbers\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef compute_gcd(arr):\n    return reduce(lambda a, b: gcd(a, b), arr)\n\n\nif __name__ == \"__main__\":\n    assert compute_gcd([12, 36, 48]) == 12",
      -1.451171875
    ],
    [
      "from gcd import gcd\n\ndef find_gcd(arr):\n    \"\"\"\n    Find the gcd of the given array.\n\n    Args:\n       arr(array): Array of integers containing rray elements\n    Returns:\n       (int): Gcd of the array\n    \"\"\"\n    if not arr:\n        return 0\n    return reduce(gcd, arr)\n\ndef main():\n    print(find_gcd([1, 2, 3, 4, 5, 6]))\n\nif __name__ == \"__main__\":\n    main()",
      -1.478515625
    ],
    [
      "from gcd import gcd\n\ndef gcd_of_array(arr):\n    if len(arr) == 0:\n        return 0\n\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n\n    return result\n\nif __name__ == \"__main__\":\n    print(gcd_of_array([2, 4, 6, 8]))\n    print(gcd_of_array([12, 4, 6, 8]))\n    print(gcd_of_array([10, 20, 30]))",
      -1.486328125
    ],
    [
      "from functools import reduce\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    return reduce(lambda a, b: gcd(a, b), arr)\n\n\nif __name__ == \"__main__\":\n    assert gcd_of_array([12, 14, 16, 8]) == 4",
      -1.509765625
    ],
    [
      "def gcd(a, b):\n    if a == 0:\n        return b\n\n    return gcd(b % a, a)\n\n\ndef gcd_of_array(arr):\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n\n    return result\n\n\ndef main():\n    print(\"Here is the gcd of the given array elements:\")\n    print(gcd_of_array([12, 36, 48, 24]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.509765625
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_array(arr):\n    return reduce(gcd, arr)\n\n\ndef test_gcd_array():\n    assert gcd_array([15, 20, 12, 12, 20]) == 4\n    assert gcd_array([1, 2, 3, 4, 5, 6]) == 1\n\n\nif __name__ == \"__main__\":\n    test_gcd_array()",
      -1.70703125
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_array(a):\n    return reduce(gcd, a)\n\n\ndef main():\n    print(gcd_array([3, 6, 9, 15]))\n    print(gcd_array([3, 5, 7, 11, 13, 17]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.080078125
    ],
    [
      "from functools import reduce\nfrom math import gcd\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_gcd(arr):\n    return reduce(gcd, arr)\n\n\nprint(find_gcd([12, 24, 36, 48]))",
      -2.232421875
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(n*log(n))\n# Space complexity: O(1)\ndef gcd_array(arr):\n    if len(arr) == 0:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return gcd(arr[0], arr[1])\n\n    return reduce(gcd, arr)\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n\n    return gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    print(gcd_array([6, 8, 12, 4, 2]))",
      -2.263671875
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_array(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return 0\n    gcd_val = arr[0]\n    for i in range(1, len(arr)):\n        gcd_val = gcd(gcd_val, arr[i])\n    return gcd_val\n\n\ndef main():\n    print(gcd_array([10, 20, 30]))\n    print(gcd_array([10, 20, 30, 40]))\n    print(gcd_array([10, 20, 30, 40, 50]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.90625
    ],
    [
      "from functools import reduce\nfrom gcd import gcd\n\n\ndef gcd_array(array):\n    return reduce(gcd, array)\n\n\ndef main():\n    assert gcd_array([2, 6, 4, 10]) == 2\n    assert gcd_array([2, 6, 4, 10, 12]) == 2\n    assert gcd_array([2, 6, 4, 10, 12, 15]) == 3\n    assert gcd_array([2, 6, 4, 10, 12, 15, 1]) == 1\n    assert gcd_array([2, 6, 4, 10, 12, 15, 1, 100, 500]) == 2\n\n\nif __name__ == '__main__':\n    main()",
      -3.798828125
    ],
    [
      "from functools import reduce\n\n\n# O(n) solution\ndef gcd(a, b):\n    \"\"\"\n    Euclid's algorithm for GCD\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_arr(arr):\n    return reduce(gcd, arr)\n\n\ndef gcd_of_array(arr):\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = gcd(gcd, arr[i])\n    return gcd\n\n\ndef main():\n    arr_input = [12, 36, 24, 8]\n    print(\"Input array:\", arr_input)\n    print(\"GCD of array:\", gcd_of_array(arr_input))\n    print(\"GCD of array:\", gcd_arr(arr_input))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.74609375
    ],
    [
      "from functools import reduce\n\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1)\ndef find_gcd(arr):\n    return reduce(gcd, arr)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1)\ndef find_gcd_builtin(arr):\n    return reduce(lambda x, y: gcd(x, y), arr)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_gcd_builtin_2(arr):\n    return reduce(lambda x, y: math.gcd(x, y), arr)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_gcd_builtin_3(arr):\n    return reduce(lambda x, y: x if x == 0 else y if y == 0 else gcd(x, y), arr)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_gcd_builtin_4(arr):\n    return reduce(lambda x, y: math.gcd(x, y) if x != 0 and y != 0 else 0, arr)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_gcd_builtin_5(arr):\n    return reduce(lambda x, y: gcd(x, y) if x != 0 and y != 0 else 0, arr)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_gcd_builtin_6(arr):\n    return reduce(gcd, arr, 0)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_gcd_builtin_7(arr):\n    return reduce(lambda x, y: x if x == 0 else y if y == 0 else",
      -5.3203125
    ],
    [
      "from gcd import gcd\n\ndef gcd_of_array(arr):\n    \"\"\"\n    Time complexity: O(nlogn)\n    Space complexity: O(1)\n    \"\"\"\n    # Check base case\n    if len(arr) == 1:\n        return arr[0]\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # Find the GCD\n            gcd_val = gcd(arr[i], arr[j])\n\n            # If the GCD is 1, then no common divisor is present\n            if gcd_val == 1:\n                return 1\n\n            # Update the first element\n            arr[i] = gcd_val\n\n    # Return the GCD\n    return arr[0]\n\nif __name__ == \"__main__\":\n\n    print(gcd_of_array([6, 9, 3, 12, 18, 12]))\n    print(gcd_of_array([18, 12, 6, 9, 3, 12, 18]))\n    print(gcd_of_array([18, 12, 6, 9, 3, 12, 18, 12]))\n    print(gcd_of_array([6, 9, 3, 12, 18, 12, 18, 12, 12]))",
      -6.40234375
    ],
    [
      "from gcd import gcd\n\ndef gcd_array(arr):\n    # return gcd(arr[0], arr[1])\n    # return gcd(gcd(arr[0], arr[1]), arr[2])\n    # return gcd(gcd(gcd(arr[0], arr[1]), arr[2]), arr[3])\n    # return gcd(gcd(gcd(gcd(arr[0], arr[1]), arr[2]), arr[3]), arr[4])\n    # return gcd(gcd(gcd(gcd(gcd(arr[0], arr[1]), arr[2]), arr[3]), arr[4]), arr[5])\n    # return gcd(gcd(gcd(gcd(gcd(gcd(arr[0], arr[1]), arr[2]), arr[3]), arr[4]), arr[5]), arr[6])\n    return gcd(gcd(gcd(gcd(gcd(gcd(gcd(arr[0], arr[1]), arr[2]), arr[3]), arr[4]), arr[5]), arr[6]), arr[7])\n\n\nif __name__ == \"__main__\":\n    arr = [10, 15, 20, 25, 30, 35, 40]\n    print(gcd_array(arr))",
      -11.40625
    ],
    [
      "from gcd import gcd\n\n\ndef gcd_array(arr):\n    return reduce(lambda x, y: gcd(x, y), arr)\n\n\ndef main():\n    print(gcd_array([2, 4, 6, 8]))\n    print(gcd_array([12, 16, 32, 48]))\n    print(gcd_array([12, 16, 32, 48, 24]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -14.0
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}