{
  "problem": {
    "task_id": "MBPP/19",
    "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
    "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
    "test_list": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ],
    "challenge_test_list": [],
    "problem_id": 8
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) <= 1:\n        return False\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n\n\ndef contains_duplicate_v2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) <= 1:\n        return False\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            return True\n        nums_set.add(num)\n    return False\n\n\ndef contains_duplicate_v3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) <= 1:\n        return False\n    return len(set(nums)) != len(nums)\n\nprint(contains_duplicate([1,2,3,4,5,6,7,8,9]))\nprint(contains_duplicate([1,2,3,4,5,6,7,8,9,9]))\n\nprint(contains_duplicate_v2([1,2,3,4,5,6,7,8,9]))\nprint(contains_duplicate_v2([1,2,3,4,5,6,7,8,9,9]))\n\nprint(contains_duplicate_v3([1,2,3,4,5,6,7,8,9]))\nprint(contains_duplicate_v3([1,2,3,4,5,6,7,8,9,9]))",
      20.03125
    ],
    [
      "from typing import List\n\n\ndef has_duplicates(arr: List[int]) -> bool:\n    \"\"\"\n    Using set.\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n\ndef has_duplicates_fast(arr: List[int]) -> bool:\n    \"\"\"\n    Using hash table.\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    hash_map = {}\n\n    for num in arr:\n        if num in hash_map:\n            return True\n        hash_map[num] = True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert has_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is False\n    assert has_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) is True\n\n    assert has_duplicates_fast([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is False\n    assert has_duplicates_fast([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) is True",
      18.828125
    ],
    [
      "def contains_duplicate(nums: [int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param nums: list[int]\n    :return: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\n\ndef contains_duplicate_2(nums: [int]) -> bool:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n\n    :param nums: list[int]\n    :return: bool\n    \"\"\"\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(contains_duplicate([1, 2, 3, 1]))\n    print(contains_duplicate_2([1, 2, 3, 1]))",
      16.515625
    ],
    [
      "from typing import List\n\n\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        s = set()\n        for num in nums:\n            if num in s:\n                return True\n            else:\n                s.add(num)\n        return False\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 1]\n    out = True\n    res = Solution().containsDuplicate(nums)\n    assert out == res, (out, res)\n\n    nums = [1, 2, 3, 4]\n    out = False\n    res = Solution().containsDuplicate(nums)\n    assert out == res, (out, res)\n\n    nums = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\n    out = True\n    res = Solution().containsDuplicate(nums)\n    assert out == res, (out, res)",
      14.8125
    ],
    [
      "from typing import List\n\n\ndef contains_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    seen = set()\n\n    for num in nums:\n        if num in seen:\n            return True\n\n        seen.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_duplicate([1, 2, 3, 4]) == False\n    assert contains_duplicate([1, 2, 3, 4, 5]) == False\n    assert contains_duplicate([1, 2, 3, 4, 5, 1]) == True\n    assert contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]) == True",
      14.03125
    ],
    [
      "def check_duplicate(arr):\n    \"\"\"\n    Using set\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n\ndef check_duplicate_two(arr):\n    \"\"\"\n    Using sort\n\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return True\n    return False\n\n\ndef check_duplicate_three(arr):\n    \"\"\"\n    Using HashMap\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    s = set()\n    for i in range(len(arr)):\n        if arr[i] in s:\n            return True\n        s.add(arr[i])\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(check_duplicate(arr))\n    print(check_duplicate_two(arr))\n    print(check_duplicate_three(arr))",
      13.265625
    ],
    [
      "def has_duplicates(arr):\n    # Fill this in.\n    if len(arr) == 0:\n        return False\n    arr.sort()\n    for i in range(1,len(arr)):\n        if arr[i] == arr[i-1]:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    print (has_duplicates([1, 2, 3, 4, 5, 5]))\n    # True\n    print (has_duplicates([1, 2, 3, 4, 5]))\n    # False\n    print (has_duplicates([5, 5, 5, 5]))\n    # True\n    print (has_duplicates([]))\n    # False",
      10.59375
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n\ndef contains_duplicate_2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    d = dict()\n    for i in nums:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\ndef contains_duplicate_3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef contains_duplicate_4(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    d = dict()\n    for i in nums:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\ndef contains_duplicate_5(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(map(str, nums)))\n\n\nprint(contains_duplicate_5([1,2,3,4,5]))\nprint(contains_duplicate_5([1,2,3,4,5,5]))",
      9.2578125
    ],
    [
      "from typing import List\n\n\ndef duplicate_element(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if not nums:\n        return False\n\n    # O(n)\n    seen = set()\n\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert duplicate_element([1, 2, 3, 4, 5, 6]) is False\n    assert duplicate_element([1, 2, 3, 4, 5, 6, 6]) is True",
      8.4921875
    ],
    [
      "from typing import List\n\n\ndef contains_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(nums) <= 1:\n        return False\n\n    num_map = {}\n\n    for num in nums:\n        if num in num_map:\n            return True\n        num_map[num] = 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_duplicate([1, 2, 3, 1]) == True\n    assert contains_duplicate([1, 2, 3, 4]) == False\n    assert contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]) == True",
      8.3515625
    ],
    [
      "def check_duplicate(input_list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    # create a dict to store the values\n    value_dict = {}\n\n    # iterate through the list\n    for i in input_list:\n        # check if the value is already in the dict\n        if i in value_dict:\n            # return True\n            return True\n        else:\n            # add the value to the dict\n            value_dict[i] = 1\n\n    # return False if no duplicate element found\n    return False\n\n\ndef check_duplicate_2(input_list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    # create a set to store the values\n    value_set = set()\n\n    # iterate through the list\n    for i in input_list:\n        # check if the value is already in the set\n        if i in value_set:\n            # return True\n            return True\n        else:\n            # add the value to the set\n            value_set.add(i)\n\n    # return False if no duplicate element found\n    return False\n\n\ndef check_duplicate_3(input_list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    # iterate through the list\n    for i in range(len(input_list)):\n        # check if the value is already in the list\n        if input_list[i] in input_list[i+1:]:\n            # return True\n            return True\n\n    # return False if no duplicate element found\n    return False\n\n\ndef check_duplicate_4(input_list):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    # sort the list\n    input_list.sort()\n\n    # iterate through the list\n    for i in range(len(input_list)-1):\n        # check if the value is already in the list\n        if input_list[i] == input_list[i+1]:\n            # return True\n            return True",
      8.15625
    ],
    [
      "from typing import List\n\n\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums) != len(set(nums))\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    out = True\n    res = Solution().containsDuplicate(nums)\n    assert res == out, (res, out)\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15]\n    out = True\n    res = Solution().containsDuplicate(nums)\n    assert res == out, (res, out)\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15]\n    out = True\n    res = Solution().containsDuplicate(nums)\n    assert res == out, (res, out)\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15]\n    out = True\n    res = Solution().containsDuplicate(nums)\n    assert res == out, (res, out)\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    out = False\n    res = Solution().containsDuplicate(nums)",
      7.83984375
    ],
    [
      "from typing import List\n\n\ndef has_duplicates(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    seen_nums = set()\n\n    for num in nums:\n        if num in seen_nums:\n            return True\n        seen_nums.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert has_duplicates([1, 2, 3, 4, 5]) == False\n    assert has_duplicates([1, 2, 3, 4, 5, 1]) == True\n    assert has_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]) == False\n    assert has_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]) == True",
      7.5390625
    ],
    [
      "def duplicate_element(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) == 1:\n        return False\n\n    lookup = set()\n    for num in arr:\n        if num in lookup:\n            return True\n        else:\n            lookup.add(num)\n    return False\n\n\ndef duplicate_element_2(arr):\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 1:\n        return False\n\n    arr.sort()\n\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(duplicate_element([1, 2, 3, 4, 5, 6]))\n    print(duplicate_element([1, 2, 3, 4, 5, 1]))",
      6.99609375
    ],
    [
      "def duplicate(arr):\n    seen = {}\n    for i in arr:\n        if i in seen:\n            return True\n        seen[i] = 1\n    return False\n\nprint(duplicate([1,2,3,4,5,6,7,8,9,10]))\nprint(duplicate([1,2,3,4,5,6,7,8,9,10,10]))",
      6.46484375
    ],
    [
      "from typing import List\n\n\ndef has_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(nums) == 0:\n        return False\n\n    nums.sort()\n\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert has_duplicate([1, 2, 3, 4, 5]) is False\n    assert has_duplicate([1, 2, 3, 4, 5, 5]) is True\n    assert has_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]) is True",
      6.23828125
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            return True\n        nums_dict[num] = 1\n    return False\n\n\ndef contains_duplicate_optimized(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            return True\n    return False\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    print(contains_duplicate(nums))\n    print(contains_duplicate_optimized(nums))\n\n\nif __name__ == '__main__':\n    main()",
      5.9296875
    ],
    [
      "def duplicate_number(arr):\n    \"\"\"\n    :param arr: list - a list of integers\n    :return: bool - if an element appears at least twice in the array (True) or not (False)\n    \"\"\"\n    arr.sort()\n\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = duplicate_number(arr)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Test cases\ntest_function([[1,2,3,4,5,6], False])\ntest_function([[1,2,3,4,5,5], True])\ntest_function([[1,2,3,4,4,4], True])\ntest_function([[1,2,2,2,3,4,5], True])\ntest_function([[1,2,3,4,5], False])\ntest_function([[1,1,2,2,3,3,4,4,5,5], True])\ntest_function([[1,2,3,4,5,6,7], False])\ntest_function([[1,1,2,3,3,4,4,5,5,6,6,7,7], True])",
      5.83203125
    ],
    [
      "def has_duplicate(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(set(arr)) != len(arr)\n\n\ndef has_duplicate_2(arr):\n    if not arr:\n        return False\n\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\ndef has_duplicate_3(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n\ndef has_duplicate_4(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if not arr:\n        return False\n\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\ndef has_duplicate_5(arr):\n    if not arr:\n        return False\n\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\ndef has_duplicate_6(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if not arr:\n        return False\n\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print has_duplicate([1, 2, 3, 4, 5, 6, 1])",
      5.703125
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return True\n        else:\n            num_dict[num] = 1\n    return False\n\ndef contains_duplicate_2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    num_dict = {}\n    for num in nums:\n        if num_dict.get(num, False):\n            return True\n        else:\n            num_dict[num] = 1\n    return False\n\ndef contains_duplicate_3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef contains_duplicate_4(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(nums - set(nums))\n\ndef contains_duplicate_5(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(list(set(nums)))\n\nif __name__ == \"__main__\":\n    nums = [1,2,3,4,5]\n    print(contains_duplicate(nums))\n    print(contains_duplicate_2(nums))\n    print(contains_duplicate_3(nums))\n    print(contains_duplicate_4(nums))\n    print(contains_duplicate_5(nums))",
      5.69921875
    ],
    [
      "from collections import defaultdict\n\n\nclass Solution:\n    \"\"\"\n    Runtime: 40 ms, faster than 93.32% of Python3.\n    Memory Usage: 14.7 MB, less than 5.61% of Python3.\n    \"\"\"\n\n    def containsDuplicate(self, nums: list) -> bool:\n        d = defaultdict(int)\n        for n in nums:\n            d[n] += 1\n            if d[n] > 1:\n                return True\n        return False\n\n\nclass Solution2:\n    \"\"\"\n    Runtime: 48 ms, faster than 77.93% of Python3.\n    Memory Usage: 14.4 MB, less than 5.61% of Python3.\n\n    Two-pointer approach.\n    \"\"\"\n\n    def containsDuplicate(self, nums: list) -> bool:\n        if len(nums) <= 1:\n            return False\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i - 1] == nums[i]:\n                return True\n        return False\n\n\nclass Solution3:\n    \"\"\"\n    Runtime: 36 ms, faster than 98.18% of Python3.\n    Memory Usage: 14.2 MB, less than 94.78% of Python3.\n\n    Hash set.\n    \"\"\"\n\n    def containsDuplicate(self, nums: list) -> bool:\n        return len(set(nums)) < len(nums)\n\n\nclass Solution4:\n    \"\"\"\n    Runtime: 36 ms, faster than 98.18% of Python3.\n    Memory Usage: 14.2 MB, less than 94.78% of Python3.\n\n    Hash set.\n    \"\"\"\n\n    def containsDuplicate(self, nums: list) -> bool:\n        s = set()\n        for n in nums:\n            if n in s:\n                return True\n            s.add(n)\n        return False\n\n\nif __name__ == \"",
      5.6796875
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) <= 1:\n        return False\n\n    nums_dict = {}\n    for num in nums:\n        if num not in nums_dict:\n            nums_dict[num] = 1\n        else:\n            return True\n\n    return False\n\nprint(contains_duplicate([1,2,3,4,5,6]))\nprint(contains_duplicate([1,2,3,4,5,6,1]))",
      5.0625
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            return True\n\n    return False\n\n\ndef contains_duplicate_set(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(nums))\n\n\ndef contains_duplicate_dict(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return True\n        num_dict[num] = True\n\n    return False\n\n\ndef contains_duplicate_dict_v2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    num_dict = {}\n    for num in nums:\n        if num_dict.get(num):\n            return True\n        num_dict[num] = True\n\n    return False\n\n\ndef contains_duplicate_dict_v3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(map(str, nums)))\n\n\ndef contains_duplicate_dict_v4(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(map(lambda x: str(x) + str(x), nums)))",
      5.01171875
    ],
    [
      "def contains_duplicate(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(arr) < 2:\n        return False\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\ndef contains_duplicate_2(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n\ndef contains_duplicate_3(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    check = set()\n    for x in arr:\n        if x in check:\n            return True\n        else:\n            check.add(x)\n    return False\n\n\ndef contains_duplicate_4(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(arr) != len(set(map(str, arr)))\n\n\ndef contains_duplicate_5(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(arr) != len(set(map(hash, arr)))\n\n\ndef contains_duplicate_6(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(arr) != len(set(map(id, arr)))\n\n\ndef contains_duplicate_7(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(arr) != len(set(map(lambda x: x, arr)))\n\n\ndef contains_duplicate_8(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(arr) != len(set(map(str, map(id, arr))))\n\n\nif __name__ == \"__main__",
      4.7109375
    ],
    [
      "from typing import List\n\n\ndef contains_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    num_dict = {}\n\n    for num in nums:\n        if num in num_dict:\n            return True\n\n        num_dict[num] = 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_duplicate([1, 2, 3, 1]) == True\n    assert contains_duplicate([1, 2, 3, 4]) == False\n    assert contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]) == True",
      4.3203125
    ],
    [
      "from typing import List\n\n\ndef contains_duplicates(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    seen = set()\n\n    for elem in arr:\n        if elem in seen:\n            return True\n        seen.add(elem)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_duplicates([1, 2, 3, 4, 5]) is False\n    assert contains_duplicates([1, 2, 3, 4, 5, 5]) is True",
      4.09765625
    ],
    [
      "def contains_duplicate(nums: list[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(nums) <= 1:\n        return False\n\n    num_dict: dict[int, int] = {}\n\n    for num in nums:\n        if num not in num_dict:\n            num_dict[num] = 0\n        else:\n            return True\n    return False\n\n\ndef contains_duplicate_optimized(nums: list[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n log n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(nums) <= 1:\n        return False\n\n    nums.sort()\n\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_duplicate([1, 2, 3, 1]) == True\n    assert contains_duplicate([1, 2, 3, 4]) == False\n    assert contains_duplicate_optimized([1, 2, 3, 1]) == True\n    assert contains_duplicate_optimized([1, 2, 3, 4]) == False",
      4.08203125
    ],
    [
      "from typing import List\n\n\ndef contains_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param nums: list of integers\n    :return: true if duplicate exists\n    \"\"\"\n    num_set = set()\n\n    for num in nums:\n        if num in num_set:\n            return True\n        else:\n            num_set.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 4, 5, 6]))\n    print(contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]))",
      3.69921875
    ],
    [
      "def find_duplicate(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: boolean value\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    temp_set = set()\n    for i in arr:\n        if i in temp_set:\n            return True\n        else:\n            temp_set.add(i)\n    return False\n\n\ndef find_duplicate_2(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: boolean value\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    arr.sort()\n    for i in range(0, len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(find_duplicate([1, 2, 3, 4, 5, 5]))\n    print(find_duplicate_2([1, 2, 3, 4, 5, 5]))",
      3.384765625
    ],
    [
      "def contains_duplicates(nums):\n    if len(nums) == 0:\n        return False\n    nums.sort()\n    for i in range(0, len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n\n\nprint(contains_duplicates([1, 2, 3, 1]))\nprint(contains_duplicates([1, 2, 3, 4]))\nprint(contains_duplicates([]))\nprint(contains_duplicates([1, 2, 3, 4, 5, 6]))",
      2.9375
    ],
    [
      "from typing import List\n\n\ndef duplicate_element(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if not nums:\n        return False\n\n    lookup = {}\n\n    for num in nums:\n        if num in lookup:\n            return True\n        lookup[num] = True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(duplicate_element([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 8]))",
      2.884765625
    ],
    [
      "def has_duplicate(arr):\n    \"\"\"\n    :param arr: list[int]\n    :return: bool\n    \"\"\"\n    if len(arr) < 2:\n        return False\n\n    dup_dict = dict()\n    for i in arr:\n        if i in dup_dict:\n            return True\n        else:\n            dup_dict[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    print(has_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(has_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]))",
      2.595703125
    ],
    [
      "from typing import List\n\n\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums) != len(set(nums))\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 1]\n    out = True\n    res = Solution().containsDuplicate(nums)\n    assert res == out, (res, out)\n\n    nums = [1, 2, 3, 4]\n    out = False\n    res = Solution().containsDuplicate(nums)\n    assert res == out, (res, out)\n\n    nums = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\n    out = True\n    res = Solution().containsDuplicate(nums)\n    assert res == out, (res, out)",
      2.359375
    ],
    [
      "def contains_duplicates(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) < 2:\n        return False\n\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\n\ndef contains_duplicates_sort(arr):\n    \"\"\"\n    Time Complexity: O(n log n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return False\n\n    arr.sort()\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            return True\n\n    return False\n\n\ndef contains_duplicates_hash(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) < 2:\n        return False\n\n    seen = {}\n\n    for num in arr:\n        if num in seen:\n            return True\n        seen[num] = 1\n\n    return False\n\n\ndef contains_duplicates_hash_2(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) < 2:\n        return False\n\n    seen = {}\n\n    for num in arr:\n        if num not in seen:\n            seen[num] = 1\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4]\n    arr2 = [1, 2, 3, 4, 1]\n    arr3 = [1, 2, 3, 4, 5]\n\n    print(contains_duplicates(arr1))\n    print(contains_duplicates(arr2))\n    print(contains_duplicates(arr3))\n\n    print(contains_duplicates_sort(arr1))\n    print(contains_",
      2.283203125
    ],
    [
      "def contains_duplicate(nums: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if len(nums) == 0:\n        return False\n\n    visited = set()\n\n    for num in nums:\n        if num in visited:\n            return True\n        else:\n            visited.add(num)\n\n    return False\n\n\ndef contains_duplicate_optimized(nums: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    return len(nums) != len(set(nums))\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 1]))\n    print(contains_duplicate([1, 2, 3, 4]))\n    print(contains_duplicate_optimized([1, 2, 3, 1]))\n    print(contains_duplicate_optimized([1, 2, 3, 4]))",
      2.279296875
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    nums.sort()\n    for i in range(len(nums)):\n        if i > 0 and nums[i] == nums[i - 1]:\n            return True\n    return False\n\n\ndef contains_duplicate_2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return True\n        else:\n            num_dict[num] = 1\n    return False",
      2.193359375
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\nclass Solution1:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums) != len(set(nums))\n\n\n# Time Complexity: O(nlogn)\n# Space Complexity: O(1)\nclass Solution2:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        nums.sort()\n        for i in range(len(nums)-1):\n            if nums[i] == nums[i+1]:\n                return True\n        return False\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\nclass Solution3:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums) != len(set(nums))",
      2.078125
    ],
    [
      "def contains_duplicates(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            return True\n    return False\n\n\ndef contains_duplicates_set(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(nums))",
      2.041015625
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    num_dict = {}\n    for i in range(len(nums)):\n        if nums[i] in num_dict:\n            return True\n        else:\n            num_dict[nums[i]] = 1\n    return False\n\nif __name__ == '__main__':\n    print(contains_duplicate([1,2,3,1]))",
      2.0
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    # if len(nums) < 2:\n    #     return False\n    #\n    # for i in range(len(nums)):\n    #     for j in range(i + 1, len(nums)):\n    #         if nums[i] == nums[j]:\n    #             return True\n    # return False\n\n    # set()\n    return len(set(nums)) < len(nums)\n\n    # dictionary\n    # num_map = {}\n    # for i in range(len(nums)):\n    #     if nums[i] in num_map:\n    #         return True\n    #     else:\n    #         num_map[nums[i]] = 1\n    # return False\n\n\nprint(contains_duplicate([1,2,3,4,5,6]))\nprint(contains_duplicate([1,1,2,3,4,5,6]))",
      1.7900390625
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(nums))\n\ndef contains_duplicate_v2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i-1] == nums[i]:\n            return True\n    return False\n\nprint(contains_duplicate([1,2,3,4,5,6,7,8,9,10]))\nprint(contains_duplicate([1,2,3,4,5,6,7,8,9,10,11]))\nprint(contains_duplicate_v2([1,2,3,4,5,6,7,8,9,10]))\nprint(contains_duplicate_v2([1,2,3,4,5,6,7,8,9,10,11]))",
      1.6171875
    ],
    [
      "def contains_duplicate(nums: list[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    return len(nums) != len(set(nums))\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 1]))\n    print(contains_duplicate([1, 2, 3, 4]))\n    print(contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]))",
      1.4189453125
    ],
    [
      "from typing import List\n\n\ndef contains_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(nums) == len(set(nums)):\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert contains_duplicate([1, 2, 3, 4, 5]) is False\n    assert contains_duplicate([1, 2, 3, 4, 5, 5]) is True",
      0.91259765625
    ],
    [
      "def contains_duplicate(arr: list) -> bool:\n    \"\"\"\n    Using set\n    O(n)\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n\ndef contains_duplicate_optimized(arr: list) -> bool:\n    \"\"\"\n    Using set\n    O(n)\n    \"\"\"\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False\n\n\ndef contains_duplicate_sorting(arr: list) -> bool:\n    \"\"\"\n    Using sorting\n    O(nlogn)\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return True\n    return False\n\n\ndef contains_duplicate_sorting_optimized(arr: list) -> bool:\n    \"\"\"\n    Using sorting\n    O(nlogn)\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return True\n    return False\n\n\ndef contains_duplicate_hash(arr: list) -> bool:\n    \"\"\"\n    Using Hashmap\n    O(n)\n    \"\"\"\n    hashmap = {}\n    for i in arr:\n        if i in hashmap:\n            return True\n        hashmap[i] = True\n    return False\n\n\ndef contains_duplicate_hash_optimized(arr: list) -> bool:\n    \"\"\"\n    Using Hashmap\n    O(n)\n    \"\"\"\n    hashmap = {}\n    for i in arr:\n        hashmap[i] = hashmap.get(i, 0) + 1\n        if hashmap[i] == 2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr2 = [1, 2, 3, 4, 5,",
      0.90185546875
    ],
    [
      "from typing import List\n\n\ndef duplicate_in_array(array: List[int]) -> bool:\n    \"\"\"\n    >>> duplicate_in_array([1, 2, 3, 4, 5])\n    False\n    >>> duplicate_in_array([1, 2, 3, 4, 5, 1])\n    True\n    \"\"\"\n\n    for i in array:\n        if array.count(i) > 1:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.87353515625
    ],
    [
      "from typing import List\n\n\nclass Solution:\n    \"\"\"\n    Runtime: 40 ms, faster than 96.10% of Python3\n    Memory Usage: 14.2 MB, less than 91.52% of Python3\n    \"\"\"\n\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums) != len(set(nums))\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.containsDuplicate([1, 2, 3, 4, 5]) is False\n    assert s.containsDuplicate([1, 2, 3, 1]) is True",
      0.8681640625
    ],
    [
      "def duplicate_element(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    # if len(nums) <= 1:\n    #     return False\n    #\n    # visited = set()\n    # for num in nums:\n    #     if num in visited:\n    #         return True\n    #     visited.add(num)\n    # return False\n\n    if len(nums) <= 1:\n        return False\n\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i - 1] == nums[i]:\n            return True\n    return False\n\n\ndef duplicate_element_two_pointer(nums):\n    if len(nums) <= 1:\n        return False\n\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i - 1] == nums[i]:\n            return True\n    return False\n\n\nprint(duplicate_element([1, 2, 3, 4, 5, 6, 7]))\nprint(duplicate_element([1, 2, 3, 4, 5, 6, 7, 7]))\nprint(duplicate_element([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]))",
      0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef duplicate_elements(array):\n    count = Counter(array)\n    for key in count.keys():\n        if count[key] > 1:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(duplicate_elements([1, 2, 3, 4, 5]))\n    print(duplicate_elements([1, 2, 3, 4, 5, 5]))",
      0.82373046875
    ],
    [
      "from typing import List\n\n\ndef duplicate_element(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if not nums:\n        return False\n\n    seen = set()\n\n    for num in nums:\n        if num in seen:\n            return True\n\n        seen.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))",
      0.79248046875
    ],
    [
      "def contains_duplicate(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return False\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\ndef contains_duplicate_optimized(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return False\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate_optimized([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(contains_duplicate_optimized([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]))\n    print(contains_duplicate_optimized([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10]))",
      0.69287109375
    ],
    [
      "def contains_duplicates(array):\n    \"\"\"\n    :param: array - input array\n    return: True if array contains any duplicate element, False otherwise\n    \"\"\"\n    if not array or len(array) == 0:\n        return False\n\n    my_set = set()\n\n    for item in array:\n        if item in my_set:\n            return True\n        else:\n            my_set.add(item)\n\n    return False\n\n\ndef test_function(test_case):\n    array = test_case[0]\n    solution = test_case[1]\n    output = contains_duplicates(array)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Test case 1\narray = [1, 2, 3, 4]\nsolution = False\ntest_case = [array, solution]\ntest_function(test_case)\n\n# Test case 2\narray = [1, 2, 3, 1]\nsolution = True\ntest_case = [array, solution]\ntest_function(test_case)\n\n# Test case 3\narray = [1, 1, 1, 1]\nsolution = True\ntest_case = [array, solution]\ntest_function(test_case)\n\n# Test case 4\narray = [0, 5, 0, 1, 5]\nsolution = True\ntest_case = [array, solution]\ntest_function(test_case)\n\n# Test case 5\narray = [1, 2, 3, 4, 5]\nsolution = False\ntest_case = [array, solution]\ntest_function(test_case)\n\n# Test case 6\narray = [1, 1, 1, 2, 2, 2]\nsolution = True\ntest_case = [array, solution]\ntest_function(test_case)\n\n# Test case 7\narray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsolution = False",
      0.3046875
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    elif len(nums) == 1:\n        return False\n    elif len(nums) == 2:\n        return nums[0] == nums[1]\n    else:\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    return True\n        return False\n\n\nprint(contains_duplicate([1, 2, 3, 1]))\nprint(contains_duplicate([1, 2, 3, 4]))\nprint(contains_duplicate([]))\nprint(contains_duplicate([1, 2, 3, 4, 5]))\nprint(contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]))",
      0.13916015625
    ],
    [
      "def duplicate_element(array):\n    \"\"\"\n    Using set()\n    \"\"\"\n    if len(array) == len(set(array)):\n        return False\n    return True\n\ndef duplicate_element_2(array):\n    \"\"\"\n    Using hash map\n    \"\"\"\n    hm = {}\n    for el in array:\n        if el in hm:\n            return True\n        else:\n            hm[el] = True\n    return False\n\nif __name__ == \"__main__\":\n    assert duplicate_element([1, 2, 3, 4, 5]) == False\n    assert duplicate_element([1, 2, 3, 4, 5, 6, 1]) == True\n    assert duplicate_element([1, 2, 3, 4, 5, 6, 1, 7, 8, 9]) == False\n    assert duplicate_element([1, 2, 3, 4, 5, 6, 1, 7, 8, 9, 10]) == True\n    assert duplicate_element([1, 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13]) == False\n    assert duplicate_element([1, 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14]) == True\n    assert duplicate_element([1, 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == False\n\n    assert duplicate_element_2([1, 2, 3, 4, 5]) == False\n    assert duplicate_element_2([1, 2, 3, 4, 5, 6, 1]) == True\n    assert duplicate_element_2([1, 2, 3, 4, 5, 6, 1, 7,",
      0.09136962890625
    ],
    [
      "# O(n)\ndef contains_duplicate1(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if not nums:\n        return False\n\n    num_dict = {}\n\n    for num in nums:\n        if num in num_dict:\n            return True\n        num_dict[num] = 1\n\n    return False\n\n\n# O(nlogn)\ndef contains_duplicate2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if not nums:\n        return False\n\n    nums.sort()\n\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            return True\n\n    return False\n\n\n# O(n)\ndef contains_duplicate3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if not nums:\n        return False\n\n    num_dict = {}\n\n    for num in nums:\n        if num in num_dict:\n            return True\n        num_dict[num] = 1\n\n    return False\n\n\n# O(n)\ndef contains_duplicate4(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if not nums:\n        return False\n\n    num_dict = {}\n\n    for num in nums:\n        num_dict[num] = num_dict.get(num, 0) + 1\n\n    for val in num_dict.values():\n        if val > 1:\n            return True\n\n    return False\n\n\n# O(n)\ndef contains_duplicate5(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if not nums:\n        return False\n\n    num_dict = {}\n\n    for num in nums:\n        num_dict[num] = num_dict.get",
      0.062469482421875
    ],
    [
      "def contains_duplicate(nums: [int]) -> bool:\n    nums.sort()\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            return True\n        i += 1\n    return False\n\n\ndef contains_duplicate_optimized(nums: [int]) -> bool:\n    nums.sort()\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            return True\n        i += 1\n    return False\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6]\n    print(contains_duplicate(nums))\n    print(contains_duplicate_optimized(nums))\n\n    nums = [1, 2, 3, 4, 5, 6, 5]\n    print(contains_duplicate(nums))\n    print(contains_duplicate_optimized(nums))",
      -0.2861328125
    ],
    [
      "from typing import List\n\n\ndef duplicate_element(nums: List[int]) -> bool:\n    \"\"\"\n    >>> duplicate_element([1, 2, 3, 4])\n    False\n    >>> duplicate_element([1, 2, 3, 4, 1])\n    True\n    >>> duplicate_element([1, 2, 3, 4, 3, 1])\n    True\n    >>> duplicate_element([1, 2, 3, 4, 3, 1, 2])\n    True\n    >>> duplicate_element([1, 2, 3, 4, 3, 1, 2, 3])\n    True\n    \"\"\"\n\n    seen = set()\n\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.61962890625
    ],
    [
      "def duplicate_element(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 1:\n        return False\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False\n\n\ndef test_duplicate_element():\n    \"\"\"Test for duplicate_element function.\"\"\"\n    assert duplicate_element([1, 2, 3, 4]) == False\n    assert duplicate_element([1, 2, 3, 4, 4]) == True\n    assert duplicate_element([1, 1, 2, 3, 4]) == True\n\n\nif __name__ == \"__main__\":\n    test_duplicate_element()",
      -0.62841796875
    ],
    [
      "from typing import List\n\n\ndef has_duplicate_element(lst: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    visited = set()\n\n    for elem in lst:\n        if elem in visited:\n            return True\n        visited.add(elem)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert has_duplicate_element([1, 2, 3, 4, 5, 6]) == False\n    assert has_duplicate_element([1, 2, 3, 4, 5, 6, 6]) == True",
      -0.68701171875
    ],
    [
      "def find_duplicate(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return False\n\n    for i in range(len(arr)):\n        if i == arr[i]:\n            return True\n\n    return False\n\nif __name__ == \"__main__\":\n    print(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.70263671875
    ],
    [
      "def contains_duplicate(nums):\n    # Time complexity O(n)\n    # Space complexity O(n)\n    d = dict()\n    for num in nums:\n        if num in d:\n            return True\n        else:\n            d[num] = 1\n    return False\n\n\ndef contains_duplicate2(nums):\n    # Time complexity O(nlogn)\n    # Space complexity O(n)\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i - 1] == nums[i]:\n            return True\n    return False\n\n\ndef contains_duplicate3(nums):\n    # Time complexity O(n)\n    # Space complexity O(n)\n    s = set()\n    for num in nums:\n        if num in s:\n            return True\n        else:\n            s.add(num)\n    return False\n\n\ndef contains_duplicate4(nums):\n    # Time complexity O(n)\n    # Space complexity O(n)\n    s = set()\n    for num in nums:\n        s.add(num)\n        if len(s) > len(nums):\n            return True\n    return False",
      -0.75537109375
    ],
    [
      "from collections import Counter\n\n\ndef duplicates(arr):\n    return any(c > 1 for c in Counter(arr).values())\n\n\ndef main():\n    print(duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85595703125
    ],
    [
      "def has_duplicates(array):\n    \"\"\"\n    :param array: list[int]\n    :return: bool\n    \"\"\"\n    if not array:\n        return False\n\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] == array[j]:\n                return True\n\n    return False",
      -0.85693359375
    ],
    [
      "def check_duplicate(arr):\n    hash_map = {}\n    for i in arr:\n        if i not in hash_map:\n            hash_map[i] = 1\n        else:\n            hash_map[i] += 1\n            if hash_map[i] > 1:\n                return True\n    return False\n\nprint(check_duplicate([1,2,3,4,5]))\nprint(check_duplicate([1,2,3,4,5,1]))\nprint(check_duplicate([1,2,3,4,5,1,2]))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\nclass Solution:\n    def contains_duplicate(self, nums: List[int]) -> bool:\n        count = {}\n        for n in nums:\n            if n in count:\n                return True\n            else:\n                count[n] = 1\n        return False",
      -0.85693359375
    ],
    [
      "from collections import defaultdict\n\ndef contains_duplicates(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    # use a dict to record the count\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    for num in count.keys():\n        if count[num] > 1:\n            return True\n    return False\n\nprint(contains_duplicates([1,2,3,1]))\nprint(contains_duplicates([1,2,3,4]))\nprint(contains_duplicates([1,1,1,3,3,4,3,2,4,2]))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef contains_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    s = set()\n\n    for num in nums:\n        if num in s:\n            return True\n        s.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 1]))\n    print(contains_duplicate([1, 2, 3, 4]))",
      -0.85693359375
    ],
    [
      "def duplicate_element(input_list):\n    # Initialize a dictionary\n    dict = {}\n    for i in input_list:\n        if i in dict:\n            return True\n        else:\n            dict[i] = 1\n    return False\n\nprint(duplicate_element([1,2,3,4,5,6,7,8,9,10]))\nprint(duplicate_element([1,2,3,4,5,6,7,8,9,10,10]))",
      -0.85693359375
    ],
    [
      "from collections import defaultdict\n\ndef duplicate_element(arr):\n    if len(arr) <= 1:\n        return False\n\n    d = defaultdict(int)\n\n    for i in arr:\n        if i in d:\n            return True\n        d[i] += 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(duplicate_element([1, 2, 3, 4, 5]))\n    print(duplicate_element([1, 2, 3, 4, 5, 1]))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef find_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    visited: set = set()\n\n    for num in nums:\n        if num in visited:\n            return True\n        else:\n            visited.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(find_duplicate([1, 2, 3, 4, 5, 6, 7]))",
      -0.85693359375
    ],
    [
      "from collections import defaultdict\n\n\ndef has_duplicates(nums):\n    num_dict = defaultdict(int)\n\n    for num in nums:\n        num_dict[num] += 1\n\n    return any(num > 1 for num in num_dict.values())\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 6, 6]\n    print(has_duplicates(nums))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def duplicate_element(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] == arr[i + 1]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 4]\n    print(duplicate_element(arr))",
      -0.85791015625
    ],
    [
      "def contains_duplicate(nums):\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            return True\n    return False\n\n\n# Test cases:\nprint(contains_duplicate([1, 2, 3, 4]))\nprint(contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]))\nprint(contains_duplicate([1, 2, 3, 4, 5]))",
      -0.85791015625
    ],
    [
      "def contains_duplicate(nums: list[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    nums.sort()\n\n    for i in range(1, len(nums)):\n        if nums[i - 1] == nums[i]:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 1]))",
      -0.85791015625
    ],
    [
      "def has_duplicates(arr):\n    # Time complexity O(n)\n    if len(arr) == len(set(arr)):\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(has_duplicates([1, 2, 3, 4, 5]))\n    print(has_duplicates([1, 2, 3, 4, 5, 2]))",
      -0.85791015625
    ],
    [
      "def find_duplicate(arr):\n    if not arr:\n        return False\n    else:\n        arr.sort()\n        for i in range(1, len(arr)):\n            if arr[i-1] == arr[i]:\n                return True\n        return False\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr3 = [1, 1, 2, 2, 3]\n    arr4 = [1, 1, 2, 2, 3, 3]\n    print(find_duplicate(arr1))\n    print(find_duplicate(arr2))\n    print(find_duplicate(arr3))\n    print(find_duplicate(arr4))",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef contains_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    :param nums: array of integers\n    :return: True if array contains any duplicate element, False otherwise\n    \"\"\"\n    hash_table = {}\n    for num in nums:\n        if num in hash_table:\n            return True\n        hash_table[num] = True\n\n    return False",
      -0.85791015625
    ],
    [
      "def duplicate_check(arr):\n    arr_set = set(arr)\n    return len(arr_set) != len(arr)\n\n\nprint(duplicate_check([1, 2, 3, 4, 5]))\nprint(duplicate_check([1, 2, 3, 4, 5, 5]))",
      -0.85791015625
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n\n\nprint(contains_duplicate([1,2,3,4,5,5]))",
      -0.85791015625
    ],
    [
      "class Solution:\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(nums) != len(set(nums))\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n    s = Solution()\n    print(s.containsDuplicate(nums))",
      -0.85791015625
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(nums))\n\n\ndef contains_duplicate_2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n\ndef contains_duplicate_3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) == len(set(nums)):\n        return False\n    return True\n\nif __name__ == '__main__':\n    print contains_duplicate([1,2,3,1])\n    print contains_duplicate([1,2,3,4])",
      -0.8583984375
    ],
    [
      "def contains_duplicates(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: bool\n    \"\"\"\n    a.sort()\n    for i in range(len(a)-1):\n        if a[i] == a[i+1]:\n            return True\n    return False",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef duplicate_element(arr: list) -> bool:\n    return max(Counter(arr).values()) > 1\n\n\nif __name__ == \"__main__\":\n    print(duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.8583984375
    ],
    [
      "def contains_duplicate(nums: list[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    num_set: set[int] = set()\n    for num in nums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 1]))\n    print(contains_duplicate([1, 2, 3, 4]))",
      -0.8583984375
    ],
    [
      "def has_duplicate_elements(array: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(array) == len(set(array)):\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(has_duplicate_elements([1, 2, 3, 4, 5]))\n    print(has_duplicate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(has_duplicate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef find_duplicate(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not nums:\n        return False\n\n    lookup = set()\n\n    for num in nums:\n        if num in lookup:\n            return True\n\n        lookup.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert find_duplicate([1, 2, 3, 4, 5]) is False\n    assert find_duplicate([1, 2, 3, 1, 5]) is True",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef has_duplicate_elements(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if not arr:\n        return False\n\n    visited: List[bool] = [False] * len(arr)\n\n    for i in range(len(arr)):\n        if visited[i]:\n            continue\n\n        visited[i] = True\n\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(has_duplicate_elements([1, 2, 3, 4, 5]))\n    print(has_duplicate_elements([1, 2, 3, 1, 5]))",
      -0.8583984375
    ],
    [
      "def find_duplicate(arr):\n    nums = set()\n    for num in arr:\n        if num in nums:\n            return True\n        nums.add(num)\n    return False\n\nprint(find_duplicate([1,2,3,4,5,6,7,8,9,10]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef duplicate(array: List[int]) -> bool:\n    \"\"\"Finds if there is any duplicate in an array.\n\n    Args:\n        array (List[int]): List of integers\n\n    Returns:\n        bool: True if there is a duplicate, False otherwise\n    \"\"\"\n\n    array_set = set()\n    for element in array:\n        if element in array_set:\n            return True\n        array_set.add(element)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(duplicate([1, 2, 3, 4, 5, 6, 7]))\n    print(duplicate([1, 2, 3, 4, 5, 6, 7, 7]))",
      -0.8583984375
    ],
    [
      "def contains_duplicates(arr):\n    \"\"\"\n    :param arr: list[int]\n    :return: bool\n    \"\"\"\n    if len(arr) == len(set(arr)):\n        return False\n    return True\n\n\nprint(contains_duplicates([1, 2, 3, 4]))\nprint(contains_duplicates([1, 1, 1, 3, 3, 4]))",
      -0.85888671875
    ],
    [
      "def contains_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return False\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 5]\n    print(contains_duplicate(nums))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\n# Time complexity: O(n).\n# Space complexity: O(1).\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        nums_set = set()\n        for i in nums:\n            if i in nums_set:\n                return True\n            else:\n                nums_set.add(i)\n        return False",
      -0.85888671875
    ],
    [
      "def has_duplicate_elements(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\ndef test_has_duplicate_elements():\n    assert has_duplicate_elements([1, 2, 3, 4, 5, 6]) is False\n    assert has_duplicate_elements([1, 2, 3, 4, 5, 5]) is True\n\n\nif __name__ == \"__main__\":\n    test_has_duplicate_elements()",
      -0.86083984375
    ],
    [
      "def contains_duplicates(arr):\n    if len(arr) <= 1:\n        return False\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return True\n    return False\n\nprint(contains_duplicates([1,2,3,4,4]))\nprint(contains_duplicates([1,2,3,4,5]))",
      -1.3203125
    ],
    [
      "def contains_duplicate(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(arr) == 0 or len(arr) == 1:\n        return False\n\n    arr.sort()\n\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n\n    return False\n\ndef contains_duplicate2(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(arr) == 0 or len(arr) == 1:\n        return False\n\n    arr.sort()\n\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n\n    return False\n\ndef contains_duplicate3(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(arr) == 0 or len(arr) == 1:\n        return False\n\n    arr.sort()\n\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n\n    return False\n\ndef contains_duplicate4(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(arr) == 0 or len(arr) == 1:\n        return False\n\n    arr.sort()\n\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n\n    return False\n\nprint(contains_duplicate([1,2,3,4,5,6,7,8,9]))\nprint(contains_duplicate2([1,2,3,4,5,6,7,8,9]))\nprint(contains_duplicate3([1,2,3,4,5,6,7,8,9]))\nprint(contains_duplicate4([1,2,3,4,5,6,7,8,",
      -1.326171875
    ],
    [
      "def contains_duplicates(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(nums))\n\n\ndef contains_duplicates_2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n\n\ndef contains_duplicates_3(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    num_set = set()\n    for n in nums:\n        if n in num_set:\n            return True\n        num_set.add(n)\n    return False\n\n\ndef contains_duplicates_4(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(map(str, nums)))\n\n\ndef contains_duplicates_5(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(map(lambda x: x * 100 + x * 10 + x, nums)))\n\n\ndef contains_duplicates_6(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(map(lambda x: x * 100 + x * 10 + x, nums)))\n\n\ndef contains_duplicates_7(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(nums) != len(set(map(lambda x: x * 100 + x * 10 + x, nums)))\n\n\ndef contains_duplicates_8(nums):\n    \"\"\"",
      -1.4130859375
    ],
    [
      "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef find_duplicate(nums: List[int]) -> bool:\n    seen = set()\n\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1)\ndef find_duplicate_sorted(nums: List[int]) -> bool:\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            return True\n\n    return False\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef find_duplicate_hashmap(nums: List[int]) -> bool:\n    seen = {}\n\n    for num in nums:\n        if num in seen:\n            return True\n        seen[num] = 1\n\n    return False\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_duplicate_cycle_sort(nums: List[int]) -> bool:\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            return True\n\n        while nums[i] != nums[nums[i]]:\n            nums[nums[i]], nums[i] = nums[i], nums[nums[i]]\n\n    return False\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_duplicate_floyd(nums: List[int]) -> bool:\n    slow, fast = nums[0], nums[nums[0]]\n\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n\n    slow2 = nums[0]\n    while slow2 != slow:\n        slow2 = nums[slow2]\n        slow = nums[slow]\n\n    return True",
      -1.8623046875
    ],
    [
      "def contains_duplicate(arr):\n    if len(arr) <= 1:\n        return False\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i != j and arr[i] == arr[j]:\n                return True\n    return False\n\nif __name__ == '__main__':\n    print(contains_duplicate([1,2,3,4,5]))\n    print(contains_duplicate([1,2,3,1,4,5]))\n    print(contains_duplicate([1,2,3,4,5,6]))\n    print(contains_duplicate([1,2,3,4,5,6,7]))",
      -1.99609375
    ],
    [
      "def find_duplicate(arr):\n    \"\"\"\n    :param arr: list - a list of integers\n    :return: bool - if an element appears at least twice in the array, return True\n\n    >>> find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    False\n    >>> find_duplicate([1, 5, 3, 4, 5, 6, 7, 8, 9, 10])\n    True\n    >>> find_duplicate([1, 5, 3, 4, 5, 6, 7, 8, 9])\n    True\n    >>> find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    False\n    >>> find_duplicate([1, 2, 3, 4, 5, 6, 7, 8])\n    False\n    >>> find_duplicate([1, 2, 3, 4, 5, 6, 7])\n    False\n    >>> find_duplicate([2, 4, 2, 4, 2, 4])\n    True\n    \"\"\"\n    # for i in range(len(arr)):\n    #     for j in range(len(arr)):\n    #         if i != j and arr[i] == arr[j]:\n    #             return True\n    # return False\n\n    # for i in range(len(arr)):\n    #     for j in range(i + 1, len(arr)):\n    #         if arr[i] == arr[j]:\n    #             return True\n    # return False\n\n    # return len(set(arr)) != len(arr)\n\n    # for i in range(len(arr)):\n    #     for j in range(i + 1, len(arr)):\n    #         if arr[i] == arr[j]:\n    #             return True\n    # return False\n\n    # for i in range(len(arr)):\n    #     for j in range(len(arr)):\n    #         if i",
      -2.0
    ],
    [
      "def duplicate_in_array(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return False\n\n    # We can use a hash table to check if we have seen an element before\n    # We can use a set to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an element before\n    # We can use a hash table to check if we have seen an",
      -2.69921875
    ],
    [
      "def find_duplicate(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if there is a duplicate element, False otherwise\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    # Set of integers\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n\n    return False\n\n\ndef find_duplicate_with_constant_space(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if there is a duplicate element, False otherwise\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    seen = 0\n\n    for num in arr:\n        # if the number is 0 or 1, just add it. Otherwise, add it mod 2\n        # if the number is 1, it is already added\n        seen ^= num\n\n    return seen != 0\n\n\ndef find_duplicate_with_constant_space_and_no_extra_data_structures(arr):\n    \"\"\"\n    :param arr: array of integers\n    :return: True if there is a duplicate element, False otherwise\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    seen = 0\n\n    for num in arr:\n        # if the number is 0 or 1, just add it. Otherwise, add it mod 2\n        # if the number is 1, it is already added\n        seen ^= num\n\n    # XOR with 1, so that we can return False if there is no duplicate\n    # otherwise return True\n    return seen ^ 1 == 0\n\n\ndef main():\n    print(find_duplicate([1, 2, 3, 4]))\n    print(find_duplicate([1, 2, 3, 4, 1]))\n\n    print(find_duplicate_with_constant_space([1, 2, 3, 4]))\n    print(find_duplicate_with_constant_space([1, 2, 3, 4, 1",
      -3.650390625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}