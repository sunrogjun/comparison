{
  "problem": {
    "task_id": "MBPP/342",
    "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
    "test_list": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ],
    "challenge_test_list": [],
    "problem_id": 331
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef smallest_range(nums: List[int]) -> List[int]:\n    first, last = nums[0], nums[0]\n\n    for num in nums:\n        first = min(first, num)\n        last = max(last, num)\n\n    return [first, last]\n\n\nprint(smallest_range([1, 2, 3, 4]))\nprint(smallest_range([1, 2, 3, 4, 5]))",
      3.212890625
    ],
    [
      "def smallest_range(arrays):\n    \"\"\"\n    :param arrays:\n    :return:\n    :rtype: list\n    \"\"\"\n    if len(arrays) < 2:\n        return arrays\n\n    min_num, max_num = min(arrays[0]), max(arrays[0])\n    for index in range(1, len(arrays)):\n        if min(arrays[index]) < min_num:\n            min_num = min(arrays[index])\n        if max(arrays[index]) > max_num:\n            max_num = max(arrays[index])\n\n    return [min_num, max_num]\n\n\nif __name__ == \"__main__\":\n    arrays = [[1, 2, 4, 5], [2, 4, 5, 5], [1, 2, 4, 5]]\n    assert smallest_range(arrays) == [1, 4]\n    arrays = [[1, 2, 4], [2, 4, 5], [1, 2, 4]]\n    assert smallest_range(arrays) == [1, 2]\n    arrays = [[1, 2, 3], [2, 4, 5], [1, 2, 4]]\n    assert smallest_range(arrays) == [1, 2]",
      3.064453125
    ],
    [
      "def smallest_range(arrays):\n    \"\"\"\n    >>> smallest_range([[34,97,23,12,45], [2,24,12,67,55], [23,12,67,45,78]])\n    (12, 67)\n    >>> smallest_range([[12,23,45,67], [2,24,12,67], [23,12,67,45,78]])\n    (12, 67)\n    >>> smallest_range([[1,10,100], [2,24,12,67], [23,12,67,45,78]])\n    (1, 78)\n    >>> smallest_range([[1,10,100], [2,24,12,67], [23,12,67,45,78], [23,12,67,45,78]])\n    (1, 78)\n    >>> smallest_range([[1,10,100], [2,24,12,67], [23,12,67,45,78], [23,12,67,45,78], [12,23,45,67]])\n    (1, 78)\n    \"\"\"\n    min_val = min(arrays[0])\n    max_val = max(arrays[0])\n    for array in arrays:\n        if min(array) < min_val:\n            min_val = min(array)\n        if max(array) > max_val:\n            max_val = max(array)\n    return min_val, max_val\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.294921875
    ],
    [
      "from typing import List\nfrom pprint import pprint\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"Return smallest range that includes at least one element from each of the given arrays.\n\n    Args:\n        arrays (List[List[int]]): input array of arrays\n\n    Examples:\n        >>> assert smallest_range([[3, 6, 9], [4, 17], [8, 15]]) == [4, 8]\n    \"\"\"\n    pprint(arrays)\n    min_value = min(min(array) for array in arrays)\n    max_value = max(max(array) for array in arrays)\n    print(f\"min_value = {min_value}, max_value = {max_value}\")\n    return [min_value, max_value]\n\n\ndef main():\n    test_arrays = [[3, 6, 9], [4, 17], [8, 15]]\n    return smallest_range(test_arrays)\n\n\nif __name__ == \"__main__\":\n    main()",
      1.431640625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    arrays = [sorted(arr) for arr in arrays]\n\n    min_num = min(arr[0] for arr in arrays)\n    max_num = max(arr[-1] for arr in arrays)\n\n    if min_num == max_num:\n        return [min_num, max_num]\n\n    result = [min_num, max_num]\n    for arr in arrays:\n        if arr[0] <= result[0]:\n            result[0] = arr[0]\n        if arr[-1] >= result[1]:\n            result[1] = arr[-1]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert smallest_range(\n        [[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]\n    ) == [5, 24]",
      1.23828125
    ],
    [
      "def solution(arr):\n    if len(arr) == 1:\n        return arr[0][0], arr[0][-1]\n    elif len(arr) == 2:\n        return max(arr[0][0], arr[1][0]), min(arr[0][-1], arr[1][-1])\n    else:\n        return solution([arr[0], arr[1], arr[2]])\n\nif __name__ == \"__main__\":\n    arr = [[1, 5, 7, 9], [2, 3, 4, 6, 8], [5, 10, 11, 12, 13]]\n    print(solution(arr))",
      0.79931640625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n\n    min_num = min(min(array) for array in arrays)\n    max_num = max(max(array) for array in arrays)\n\n    return [min_num, max_num - min_num]\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]))",
      0.79736328125
    ],
    [
      "def find_smallest_range(arrays):\n    \"\"\"\n    :param arrays: list[list] -- an array of arrays\n    :return: list -- a smallest range that includes at least one element from each of the given arrays\n\n    >>> find_smallest_range([[1], [2, 3], [0, 0, 4]])\n    [2, 3]\n    \"\"\"\n    smallest_range = [arrays[0][0], arrays[0][0]]\n    min_val = arrays[0][0]\n    max_val = arrays[0][0]\n\n    for array in arrays:\n        min_val = min(min_val, min(array))\n        max_val = max(max_val, max(array))\n\n    for array in arrays:\n        if min(array) <= smallest_range[0] and max(array) >= smallest_range[1]:\n            smallest_range[0] = min(array)\n            smallest_range[1] = max(array)\n        elif min(array) >= smallest_range[0] and min(array) < smallest_range[1]:\n            smallest_range[1] = min(array)\n        elif max(array) >= smallest_range[0] and max(array) < smallest_range[1]:\n            smallest_range[0] = max(array)\n\n    return smallest_range\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.77490234375
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n\n    min_val = min(arr)\n    max_val = max(arr)\n\n    for i in range(len(arr)):\n        if min_val > min(arr[i]):\n            min_val = min(arr[i])\n        if max_val < max(arr[i]):\n            max_val = max(arr[i])\n\n    return [min_val, max_val]\n\n\nif __name__ == \"__main__\":\n    arr1 = [4, 10, 15, 24, 26]\n    arr2 = [0, 9, 12, 20]\n    arr3 = [5, 18, 25, 29, 30]\n\n    print(smallest_range([arr1, arr2, arr3]))",
      0.7099609375
    ],
    [
      "def find_smallest_range(arr1, arr2):\n    if len(arr1) == 0 or len(arr2) == 0:\n        return\n\n    min_arr1 = min(arr1)\n    max_arr1 = max(arr1)\n    min_arr2 = min(arr2)\n    max_arr2 = max(arr2)\n\n    min_range = min(min_arr1, min_arr2)\n    max_range = max(max_arr1, max_arr2)\n\n    if min_range <= max_range:\n        return min_range, max_range\n\n\ndef main():\n    print(find_smallest_range([1, 2, 3, 4], [5, 6, 7]))\n    print(find_smallest_range([1, 2], [3, 4]))\n    print(find_smallest_range([1, 2, 3], [2, 3, 4]))\n\n\nmain()",
      0.491455078125
    ],
    [
      "from collections import deque\nfrom typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    if not arrays:\n        return []\n\n    nums_queues = []\n    for nums in arrays:\n        queue = deque([])\n        queue.extend(nums)\n        queue.extend([float(\"inf\")] * (len(arrays) - 1))\n        nums_queues.append(queue)\n\n    max_num = max(max(nums_queues, key=lambda x: x.popleft()))\n    min_num = min(min(nums_queues, key=lambda x: x[0]))\n\n    return [min_num, max_num]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]) == [5, 24]",
      -0.0084228515625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    min_val, max_val = float(\"inf\"), float(\"-inf\")\n\n    for arr in arrays:\n        min_val = min(min_val, min(arr))\n        max_val = max(max_val, max(arr))\n\n    if max_val - min_val < 0:\n        return []\n\n    for i in range(len(arrays)):\n        if arrays[i][0] > min_val:\n            return [min_val, arrays[i][0] - 1]\n        if arrays[i][-1] < max_val:\n            return [arrays[i][-1] + 1, max_val]\n\n    return [min_val, max_val]\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]))",
      -0.162841796875
    ],
    [
      "from typing import List\n\n\ndef find_smallest_range(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    \"\"\"\n\n    # find the smallest and largest element\n    smallest = max(arr)\n    largest = min(arr)\n\n    for i in range(len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n\n        if arr[i] > largest:\n            largest = arr[i]\n\n    # find the smallest range\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] <= (largest - arr[j]) <= (smallest - arr[i]):\n                return [arr[i], arr[j]]\n\n\nif __name__ == \"__main__\":\n    assert find_smallest_range([1, 10, 5, 4, 20, 3]) == [5, 20]",
      -0.1702880859375
    ],
    [
      "def smallest_range(arrays):\n    \"\"\"\n    :param arrays: List[List[int]]\n    :return: List[int]\n    \"\"\"\n    # TODO: Write your code here\n\nif __name__ == '__main__':\n    arrays = [[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 7, 16, 21, 25]]\n    print(smallest_range(arrays))\n\n    arrays = [[4, 10, 15, 24, 26], [0, 9, 12, 20]]\n    print(smallest_range(arrays))\n\n    arrays = [[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 7, 16, 21, 25], [1, 3, 8, 10, 11, 14, 19, 22]]\n    print(smallest_range(arrays))",
      -0.208984375
    ],
    [
      "def smallest_range(arrays):\n    start = min(arrays)\n    end = max(arrays)\n\n    while True:\n        # check if start and end are in all arrays\n        if all(start <= item <= end for array in arrays for item in array):\n            return (start, end)\n        # check if we can increment the start\n        if all(start < item <= end for array in arrays for item in array):\n            start += 1\n        else:\n            end -= 1\n\nprint(smallest_range([[1, 3, 5, 7, 9], [2, 3, 4, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]))",
      -0.263916015625
    ],
    [
      "def smallest_range(lst):\n    smallest = float('inf')\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                if lst[i][-1] - lst[j][0] < smallest:\n                    smallest = lst[i][-1] - lst[j][0]\n    return smallest\n\n\nif __name__ == '__main__':\n    arr = [[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 7, 8, 10]]\n    print(smallest_range(arr))",
      -0.3251953125
    ],
    [
      "def smallest_range(arr):\n    if len(arr) < 1:\n        return None\n    elif len(arr) == 1:\n        return [min(arr[0]), max(arr[0])]\n\n    smallest = [arr[0][0], arr[1][0]]\n    for i in range(2, len(arr)):\n        smallest[0] = min(smallest[0], arr[i][0])\n        smallest[1] = max(smallest[1], arr[i][0])\n\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] < smallest[0]:\n                smallest[0] = arr[i][j]\n            elif arr[i][j] > smallest[1]:\n                smallest[1] = arr[i][j]\n\n    return smallest\n\nprint(smallest_range([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]))\nprint(smallest_range([[1, 10, 100], [2, 9, 8], [3, 7, 15]]))\nprint(smallest_range([[1, 10, 100], [2, 9, 8], [3, 7, 15], [20, 30, 40]]))\nprint(smallest_range([]))\nprint(smallest_range([[1, 10]]))\nprint(smallest_range([[1, 10, 100], [2, 9, 8], [3, 7, 15], [20, 30, 40, 50]]))",
      -0.399169921875
    ],
    [
      "from typing import List\nfrom collections import Counter\n\n\ndef smallest_range(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    min_arr1 = min(arr1)\n    max_arr1 = max(arr1)\n\n    min_arr2 = min(arr2)\n    max_arr2 = max(arr2)\n\n    min_range = min(min_arr1, min_arr2)\n    max_range = max(max_arr1, max_arr2)\n\n    if max_range - min_range < 0:\n        return []\n    return [min_range, max_range]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([1, 2, 4], [2, 3, 5]) == [2, 5]\n    assert smallest_range([1, 2, 3], [4, 5, 6]) == []\n    assert smallest_range([1, 2], [2, 3]) == [1, 3]\n    assert smallest_range([1, 2], [1, 3]) == [1, 3]",
      -0.56884765625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Find the smallest range that includes at-least one element from each of the given arrays.\n    :param arrays: 2D array of integers\n    :return: List of two integers\n    Time Complexity: O(n*logn)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arrays or len(arrays) == 0:\n        return None\n\n    min_value = min(arrays[0])\n    max_value = max(arrays[0])\n\n    for array in arrays:\n        if min(array) < min_value:\n            min_value = min(array)\n        if max(array) > max_value:\n            max_value = max(array)\n\n    min_range = max_value - min_value\n\n    for array in arrays:\n        curr_min_range = max(array) - min(array)\n        if curr_min_range < min_range:\n            min_range = curr_min_range\n\n    return [min_value + min_range, min_value + 2 * min_range]\n\n\nif __name__ == \"__main__\":\n    assert (\n        smallest_range([[4, 10, 15, 24, 26], [2, 14, 21, 30], [2, 11, 12, 18]])\n        == [12, 17]\n    )\n    assert smallest_range([[2, 12], [4, 10], [6, 8]]) == [6, 8]",
      -0.69140625
    ],
    [
      "def smallest_range(a, b, c):\n    c = sorted(c)\n    start = a[0]\n    end = a[-1]\n    min_diff = c[-1] - c[0]\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] <= b[j] <= c[-1]:\n                min_diff = min(min_diff, c[-1] - b[j])\n            elif a[i] >= b[j] >= c[0]:\n                min_diff = min(min_diff, b[j] - c[0])\n    return [start, end + min_diff]\n\n\nprint(smallest_range([0, 10], [5, 18], [20, 25]))",
      -0.7021484375
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])\n    [24, 26]\n    \"\"\"\n    arrays.sort(key=lambda arr: arr[0])\n    left, right = arrays[0][0], arrays[-1][-1]\n    result = [left, right]\n    for i in range(1, len(arrays)):\n        left_i, right_i = arrays[i][0], arrays[i][-1]\n        if left_i > result[1]:\n            return result\n        if right_i < result[0]:\n            result = [left_i, right_i]\n        result = [min(result[0], left_i), max(result[1], right_i)]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.71875
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])\n    [5, 24]\n    \"\"\"\n    if not arrays:\n        return []\n    smallest_start = min(arrays[0])\n    largest_end = max(arrays[0])\n    for array in arrays[1:]:\n        smallest_start = min(smallest_start, min(array))\n        largest_end = max(largest_end, max(array))\n\n    for array in arrays:\n        if smallest_start > min(array):\n            return [smallest_start, largest_end]\n\n    for array in arrays:\n        if largest_end < max(array):\n            return [smallest_start, largest_end]\n\n    return [smallest_start, largest_end]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.77978515625
    ],
    [
      "def smallest_range(lst):\n    pass\n\nif __name__ == \"__main__\":\n    lst = [\n        [1, 2, 3, 4, 10],\n        [11, 12, 13, 14],\n        [6, 7, 8, 9]\n    ]\n\n    print(smallest_range(lst))",
      -0.85693359375
    ],
    [
      "def find_range(arr1, arr2):\n    arr1_set = set(arr1)\n    arr2_set = set(arr2)\n\n    if arr1_set & arr2_set:\n        return min(arr1), max(arr1), min(arr2), max(arr2)\n    else:\n        return -1\n\n\ndef main():\n    arr1 = [1, 5, 7, 9]\n    arr2 = [2, 3, 4, 6, 8, 10]\n    print(\"Smallest range that includes at-least one element from each of the given arrays: \" +\n          str(find_range(arr1, arr2)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def smallest_range(list_of_arrays):\n    pass\n\nif __name__ == '__main__':\n    print(smallest_range([[1, 5, 7, 9], [2, 3, 4], [0, 9, 12]]))",
      -0.85791015625
    ],
    [
      "def find_smallest_range(arr1, arr2, arr3):\n    min_value, max_value = None, None\n    for i in arr1:\n        for j in arr2:\n            for k in arr3:\n                if min_value is None or i <= min_value:\n                    min_value = i\n                if max_value is None or j >= max_value:\n                    max_value = j\n                if min_value <= k <= max_value:\n                    return [min_value, max_value]\n    return None\n\n\nprint(find_smallest_range([1, 5, 9], [2, 3, 4], [0, 5, 6, 7, 8]))",
      -0.8583984375
    ],
    [
      "def solution(A, B, C):\n    # TODO - add docstring\n    pass",
      -0.8583984375
    ],
    [
      "def smallest_range(lst):\n    \"\"\"\n    >>> smallest_range([[1, 5, 7, 9], [0, 1, 6, 8, 10], [1, 3, 9, 11]])\n    [1, 10]\n\n    >>> smallest_range([[1, 2, 3], [100, 200]])\n    [1, 100]\n    \"\"\"\n    mx = max(lst, key=max)\n    mn = min(lst, key=min)\n\n    return [mn[0], mx[len(mx) - 1]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not arrays:\n        return []\n\n    min_val, max_val = min(arrays[0]), max(arrays[0])\n\n    for i in range(1, len(arrays)):\n        if min(arrays[i]) < min_val:\n            min_val = min(arrays[i])\n\n        if max(arrays[i]) > max_val:\n            max_val = max(arrays[i])\n\n    return [min_val, max_val]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[1, 2, 3], [4, 5], [1, 2, 3]]) == [1, 2]",
      -0.8583984375
    ],
    [
      "def smallest_range(lst):\n    start = min(lst)\n    end = max(lst)\n    while True:\n        for i in lst:\n            if start <= i <= end:\n                continue\n            else:\n                end = max(lst)\n                for j in lst:\n                    if start <= j <= end:\n                        continue\n                    else:\n                        end = max(lst)\n                        start = min(lst)\n                        end = max(lst)\n                        break\n                break\n        else:\n            return start, end\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([1, 2, 6]))\n    print(smallest_range([1, 2, 6, 7]))\n    print(smallest_range([1, 2, 6, 7, 8]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])\n    [20, 24]\n    \"\"\"\n    smallest = min(min(array) for array in arrays)\n    largest = max(max(array) for array in arrays)\n\n    return [smallest, largest]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    \"\"\"\n    min_value = min(arrays[0])\n    max_value = max(arrays[0])\n\n    for array in arrays:\n        min_value = min(min_value, min(array))\n        max_value = max(max_value, max(array))\n\n    if min_value == max_value:\n        return [min_value, min_value]\n\n    for i in range(len(arrays)):\n        min_value, max_value = _min_max(arrays[i], min_value, max_value)\n\n    return [min_value, max_value]\n\n\ndef _min_max(array: List[int], min_value: int, max_value: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    min_index = 0\n    max_index = len(array) - 1\n\n    while min_index < max_index:\n        if array[min_index] > array[max_index]:\n            max_index -= 1\n        else:\n            min_index += 1\n\n    min_value = min(min_value, array[min_index])\n    max_value = max(max_value, array[max_index])\n\n    return [min_value, max_value]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 3]\n    assert smallest_range([[1, 5, 7], [3, 4, 6], [2, 3, 5]]) == [2, 5]",
      -0.9150390625
    ],
    [
      "from typing import List\n\n\ndef find_range(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    def get_smallest(lists: List[List[int]]) -> int:\n        return min(lists[0])\n\n    def get_largest(lists: List[List[int]]) -> int:\n        return max(lists[0])\n\n    def get_range(lists: List[List[int]]) -> List[int]:\n        return [get_smallest(lists), get_largest(lists)]\n\n    def merge(lists: List[List[int]]) -> List[List[int]]:\n        merged_list = []\n        for i in range(len(lists[0])):\n            merged_list.append([lists[0][i], lists[1][i]])\n        return merged_list\n\n    def get_lists(lists: List[List[int]]) -> List[List[int]]:\n        if len(lists) == 1:\n            return lists[0]\n        lists = merge(lists)\n        return get_lists(lists)\n\n    def get_ranges(lists: List[List[int]]) -> List[List[int]]:\n        if len(lists) == 0:\n            return []\n        if len(lists) == 1:\n            return [lists[0]]\n        lists = get_lists(lists)\n        return get_ranges(lists)\n\n    return get_range(get_ranges(lists))\n\n\nif __name__ == \"__main__\":\n    assert find_range([[1, 10, 100], [2, 11, 101]]) == [2, 10]\n    assert find_range([[1, 10, 100], [2, 11, 101], [3, 12, 102]]) == [2, 10]\n    assert find_range([[1, 10, 100], [2, 11, 101], [3,",
      -0.92041015625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if not arrays:\n        return []\n\n    min_element = min(arrays[0])\n    max_element = max(arrays[0])\n\n    for array in arrays:\n        min_element = min(min_element, min(array))\n        max_element = max(max_element, max(array))\n\n    result = [min_element, max_element]\n\n    for array in arrays:\n        if min_element > min(array):\n            result[0] = min(result[0], min(array))\n        if max_element < max(array):\n            result[1] = max(result[1], max(array))\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]))\n    print(smallest_range([[1, 10, 100], [11, 12, 100], [1, 2, 3]]))",
      -1.11328125
    ],
    [
      "def smallest_range(a, b):\n    min_a = min(a)\n    max_a = max(a)\n    min_b = min(b)\n    max_b = max(b)\n    if (max_a - min_b) > (max_b - min_a):\n        return [min_a, max_b]\n    else:\n        return [min_b, max_a]\n\n\ndef test_smallest_range():\n    \"\"\"\n    >>> test_smallest_range()\n    \"\"\"\n    assert smallest_range([1, 7, 9, 15], [2, 10, 11, 13]) == [2, 15]\n    assert smallest_range([1, 3, 9], [2, 5, 10]) == [1, 10]\n    assert smallest_range([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 8]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.1875
    ],
    [
      "from typing import List\n\n\ndef smallest_range(nums: List[int]) -> List[int]:\n    if len(nums) <= 2:\n        return nums\n\n    nums.sort()\n    start, end = nums[0], nums[-1]\n    min_diff = end - start\n    for i in range(len(nums) - 2):\n        for j in range(i + 2, len(nums)):\n            if nums[j] - nums[i] < min_diff:\n                start, end = nums[i], nums[j]\n                min_diff = end - start\n\n    return [start, end]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([4, 10, 10, 12, 20, 21, 22]) == [10, 12]\n    assert smallest_range([4, 10, 10, 12, 20, 21, 22, 23, 24]) == [10, 12]",
      -1.2880859375
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arrays) < 2:\n        return []\n\n    min_val, max_val = min(arrays[0]), max(arrays[0])\n\n    for i in range(1, len(arrays)):\n        min_val = min(min_val, min(arrays[i]))\n        max_val = max(max_val, max(arrays[i]))\n\n    return [min_val, max_val] if max_val - min_val >= 0 else []\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]) == [5, 24]",
      -1.2978515625
    ],
    [
      "def find_range(arr_list):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    arr_len = len(arr_list)\n    if arr_len == 0:\n        return []\n    if arr_len == 1:\n        return [arr_list[0]]\n    arr_list.sort()\n    min_diff = arr_list[1] - arr_list[0]\n    min_range = arr_list[0], arr_list[1]\n\n    for i in range(2, arr_len):\n        diff = arr_list[i] - arr_list[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            min_range = arr_list[i - 1], arr_list[i]\n    return min_range\n\n\nif __name__ == \"__main__\":\n    print(find_range([1, 2, 3, 4]))\n    print(find_range([1, 3, 10, 4, 5]))\n    print(find_range([1, 3, 10, 4, 5, 6]))\n    print(find_range([1, 3, 10, 4, 5, 6, 9]))",
      -1.3369140625
    ],
    [
      "from typing import List\n\n\ndef find_smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Greedy algorithm\n\n    Time complexity: O(n log n)\n    Space complexity: O(1)\n    \"\"\"\n    if not arrays:\n        raise ValueError(\"At least one array is required\")\n\n    min_num, max_num = min(min(array) for array in arrays), max(max(array) for array in arrays)\n\n    smallest_range = [min_num, max_num]\n\n    while True:\n        if all(min_num <= num <= max_num for array in arrays for num in array):\n            return smallest_range\n\n        if min_num < max_num:\n            min_num += 1\n        else:\n            max_num -= 1\n\n        smallest_range[0], smallest_range[1] = min_num, max_num\n\n\nif __name__ == \"__main__\":\n    assert find_smallest_range([[10, 20, 30], [15, 25, 35], [2, 17, 28, 30, 40]]) == [15, 28]",
      -1.3671875
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])\n    [20, 24]\n    \"\"\"\n    arrays.sort(key=lambda x: x[0])\n\n    min_num, max_num = arrays[0]\n\n    for array in arrays[1:]:\n        min_num = max(min_num, array[0])\n        max_num = min(max_num, array[-1])\n\n    return [min_num, max_num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.416015625
    ],
    [
      "def solution(A, B, C):\n    A.sort()\n    B.sort()\n    C.sort()\n    start, end = 0, len(A) - 1\n    while start < len(A) and A[start] > B[-1] and A[start] > C[-1]:\n        start += 1\n    while end >= 0 and A[end] < B[0] and A[end] < C[0]:\n        end -= 1\n    if start == len(A):\n        return [-1, -1]\n    if end < 0:\n        return [A[0], A[-1]]\n    return [A[start], A[end]]\n\n\nif __name__ == \"__main__\":\n    A = [1, 5, 7, 9, 13]\n    B = [2, 3, 4, 11, 12, 15]\n    C = [6, 8, 10, 14, 16]\n    print(solution(A, B, C))",
      -1.44140625
    ],
    [
      "from typing import List\n\n\ndef find_smallest_range(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    min_val, max_val = arr[0][0], arr[0][0]\n    min_range, max_range = arr[0][0], arr[0][0]\n\n    for i in range(len(arr[0])):\n        for j in range(len(arr)):\n            if arr[j][i] < min_val:\n                min_val = arr[j][i]\n            if arr[j][i] > max_val:\n                max_val = arr[j][i]\n\n        if max_val - min_val > max_range - min_range:\n            min_range, max_range = min_val, max_val\n\n    return min_range, max_range\n\n\nif __name__ == \"__main__\":\n    assert find_smallest_range([[1, 3, 15], [2, 6, 8], [0, 9, 12]]) == [2, 6]",
      -1.5087890625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m*log(n*m))\n    Space Complexity: O(n*m)\n    \"\"\"\n\n    def merge_sort(array: List[int]) -> List[int]:\n        if len(array) <= 1:\n            return array\n\n        mid = len(array) // 2\n        left = merge_sort(array[:mid])\n        right = merge_sort(array[mid:])\n\n        return merge(left, right)\n\n    def merge(left: List[int], right: List[int]) -> List[int]:\n        i, j = 0, 0\n        merged = []\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n\n        merged += left[i:]\n        merged += right[j:]\n        return merged\n\n    def find_smallest_range(arrays: List[List[int]]) -> List[int]:\n        if len(arrays) == 1:\n            return [min(arrays[0]), max(arrays[0])]\n\n        merged_array = merge_sort(arrays[0])\n\n        for array in arrays[1:]:\n            merged_array = merge(merged_array, array)\n\n        return [min(merged_array), max(merged_array)]\n\n    return find_smallest_range(arrays)\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([[1, 10, 100], [2, 9, 8], [3, 6, 7]]))\n    print(smallest_range([[1, 10, 100, 1000], [2, 9, 8, 1000], [3, 6, 7, 1000]]))",
      -1.69140625
    ],
    [
      "from collections import deque\n\n\ndef smallest_range(arr1, arr2):\n    \"\"\"\n    :param arr1:\n    :param arr2:\n    :return: list containing smallest range\n    \"\"\"\n    if len(arr1) == 0 or len(arr2) == 0:\n        return []\n\n    start = 0\n    end = 0\n\n    arr1_queue = deque(arr1)\n    arr2_queue = deque(arr2)\n\n    arr1_min = arr1_queue.popleft()\n    arr2_min = arr2_queue.popleft()\n\n    if arr1_min < arr2_min:\n        start = arr1_min\n        end = arr1_min\n    else:\n        start = arr2_min\n        end = arr2_min\n\n    while arr1_queue and arr2_queue:\n        if arr1_queue[0] < arr2_queue[0]:\n            if arr1_queue[0] < end:\n                end = arr1_queue[0]\n            arr1_queue.popleft()\n        else:\n            if arr2_queue[0] < end:\n                end = arr2_queue[0]\n            arr2_queue.popleft()\n\n    while arr1_queue:\n        if arr1_queue[0] < end:\n            end = arr1_queue[0]\n        arr1_queue.popleft()\n\n    while arr2_queue:\n        if arr2_queue[0] < end:\n            end = arr2_queue[0]\n        arr2_queue.popleft()\n\n    return [start, end]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([-2, 7, 3, 9, 4, 8, 1], [5, 8, 12, 3, 2]) == [-2, 7]\n    assert smallest_range([-2, 7, 3, 9, 4, 8, 1], [5, 8, 12, 3, 2, 5]) == [-2, 7]",
      -1.7109375
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) < 2:\n        return []\n\n    min_num = min(arr[0])\n    max_num = max(arr[0])\n    start_index, end_index = 0, 0\n\n    for num in arr[0]:\n        if num < min_num:\n            min_num = num\n            start_index = arr[0].index(num)\n        if num > max_num:\n            max_num = num\n            end_index = arr[0].index(num)\n\n    for index in range(1, len(arr)):\n        if arr[index][0] > min_num:\n            start_index = index\n            min_num = arr[index][0]\n            break\n\n    for index in range(len(arr[start_index]) - 1, -1, -1):\n        if arr[start_index][index] < max_num:\n            end_index = start_index\n            max_num = arr[start_index][index]\n            break\n\n    return [min_num, max_num]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[1, 2, 3], [1, 5, 6]]) == [1, 5]\n    assert smallest_range([[1, 2, 3], [1, 10, 12]]) == [1, 3]\n    assert smallest_range([[1, 2, 3, 4], [1, 5, 6, 7], [2, 3, 5, 6]]) == [2, 4]",
      -1.78125
    ],
    [
      "from collections import deque\nfrom typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not arrays:\n        return []\n\n    min_value = min(arrays[0])\n    max_value = max(arrays[0])\n\n    for array in arrays[1:]:\n        min_value = min(min_value, min(array))\n        max_value = max(max_value, max(array))\n\n    result = [min_value, max_value]\n\n    for array in arrays:\n        if min_value >= min(array) and max_value <= max(array):\n            continue\n\n        if min_value < min(array) <= max_value:\n            max_value = min(array)\n            result = [min_value, max_value]\n\n        if min_value <= min(array) < max_value:\n            min_value = min(array)\n            result = [min_value, max_value]\n\n        if min_value <= max(array) < max_value:\n            max_value = max(array)\n            result = [min_value, max_value]\n\n        if min_value < max(array) <= max_value:\n            min_value = max(array)\n            result = [min_value, max_value]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]) == [5, 24]\n    assert smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30], [-1, 1, 3]]) == [-1, 24]",
      -1.93359375
    ],
    [
      "from typing import List\n\n\ndef find_smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    result: List[int] = []\n\n    if not arrays:\n        return result\n\n    min_value = min(min(array) for array in arrays)\n    max_value = max(max(array) for array in arrays)\n\n    result = [min_value, max_value]\n\n    for i in range(len(arrays)):\n        for j in range(i + 1, len(arrays)):\n            left, right = min(arrays[i]), max(arrays[j])\n            if left <= right:\n                result = [left, right]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_smallest_range(\n        [[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]\n    ) == [10, 20]",
      -2.12890625
    ],
    [
      "def smallest_range(a, b, c):\n    \"\"\"\n    :param a: list of integers\n    :param b: list of integers\n    :param c: list of integers\n    :return: smallest range\n    >>> smallest_range([1], [2, 3], [3, 4])\n    (2, 3)\n    >>> smallest_range([1, 2], [2, 3], [3, 4])\n    (1, 3)\n    >>> smallest_range([1, 2], [2, 3], [3, 4], [10, 20])\n    (1, 10)\n    \"\"\"\n    a_max = max(a)\n    a_min = min(a)\n    b_max = max(b)\n    b_min = min(b)\n    c_max = max(c)\n    c_min = min(c)\n\n    max_num = max(a_max, b_max, c_max)\n    min_num = min(a_min, b_min, c_min)\n    return min_num, max_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.2578125
    ],
    [
      "from typing import List, Tuple\n\n\ndef smallest_range(arrays: List[List[int]]) -> Tuple[int, int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(n)\n    \"\"\"\n    min_num = min([min(array) for array in arrays])\n    max_num = max([max(array) for array in arrays])\n\n    return min_num, max_num\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([[1, 5, 7, 10, 15], [3, 4, 10, 11, 12], [8, 9, 11, 15, 16]]))\n    print(smallest_range([[1, 2, 3, 4], [4, 5, 7, 8]]))",
      -2.28515625
    ],
    [
      "def smallest_range(arrays):\n    \"\"\"\n    >>> smallest_range([[3, 5, 6, 9, 10, 11], [2, 4, 6, 8, 10, 12], [1, 2, 3, 5, 7, 9]])\n    [1, 11]\n    \"\"\"\n    if len(arrays) < 2:\n        return None\n    min_max = [arrays[0][0], arrays[0][-1]]\n    for i in range(1, len(arrays)):\n        min_max = min_max_update(min_max, arrays[i])\n    return min_max\n\n\ndef min_max_update(min_max, array):\n    if array[0] < min_max[0]:\n        min_max[0] = array[0]\n    if array[-1] > min_max[-1]:\n        min_max[-1] = array[-1]\n    return min_max\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.3984375
    ],
    [
      "def smallest_range(arrays):\n    \"\"\"\n    >>> smallest_range([[1, 2, 3], [4, 5], [1, 2, 3]])\n    [1, 4]\n    >>> smallest_range([[1, 2, 3], [4, 5], [6, 7]])\n    [1, 7]\n    >>> smallest_range([[1, 2, 3], [4, 5], [1, 2, 3], [1, 2, 3]])\n    [1, 3]\n    \"\"\"\n    # sort the arrays\n    arrays = [array.sort() for array in arrays]\n\n    # get the smallest and largest elements\n    smallest, largest = arrays[0][0], arrays[0][-1]\n\n    # iterate through the arrays\n    for i in range(1, len(arrays)):\n        # if the smallest element is bigger than the current smallest\n        if smallest > arrays[i][0]:\n            smallest = arrays[i][0]\n        # if the largest element is smaller than the current largest\n        if largest < arrays[i][-1]:\n            largest = arrays[i][-1]\n\n    return [smallest, largest]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.5390625
    ],
    [
      "from collections import defaultdict\n\n\ndef smallest_range(nums1, nums2, nums3):\n    nums = [nums1, nums2, nums3]\n    ranges = defaultdict(list)\n\n    for num in nums1:\n        ranges[num].append(nums1)\n\n    for num in nums2:\n        if num not in ranges:\n            ranges[num].append(nums2)\n        else:\n            ranges[num].append(nums2)\n            if len(ranges[num]) > 2:\n                return [min(ranges[num]), max(ranges[num])]\n\n    for num in nums3:\n        if num not in ranges:\n            ranges[num].append(nums3)\n        else:\n            ranges[num].append(nums3)\n            if len(ranges[num]) > 2:\n                return [min(ranges[num]), max(ranges[num])]\n\n    return [min(ranges.keys()), max(ranges.keys())]\n\n\nif __name__ == '__main__':\n    print(smallest_range([1, 2, 5, 7, 8, 9], [2, 4, 5, 11, 13], [3, 4, 5, 8, 9]))",
      -2.5625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> smallest_range([[1], [2, 3]])\n    [2, 1]\n    >>> smallest_range([[1, 5, 6, 7, 8, 10], [2, 3, 4, 5, 6, 7], [0, 9, 12, 10, 11, 12]])\n    [2, 7]\n    >>> smallest_range([[1, 10, 20, 30], [2, 11, 21, 31], [3, 12, 22, 32], [4, 13, 23, 33], [5, 14, 24, 34], [6, 15, 25, 35]])\n    [1, 34]\n    \"\"\"\n    if not arrays:\n        return []\n\n    # Find min and max for all arrays\n    min_val, max_val = arrays[0][0], arrays[0][-1]\n\n    for array in arrays[1:]:\n        min_val = min(min_val, array[0])\n        max_val = max(max_val, array[-1])\n\n    # Find the smallest range\n    range_min, range_max = max_val, min_val\n\n    for array in arrays:\n        for value in array:\n            if value > range_min:\n                range_min = value\n                break\n        for value in reversed(array):\n            if value < range_max:\n                range_max = value\n                break\n\n    return [range_min, range_max]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.595703125
    ],
    [
      "def smallest_range(lst):\n    \"\"\"\n    >>> smallest_range([[1, 5, 7], [0, 2, 5, 9], [1, 2, 5, 8]])\n    [1, 5]\n    >>> smallest_range([[1, 5, 7], [0, 2, 5, 9], [1, 2, 5, 8], [1, 1, 1, 1]])\n    [1, 1]\n    \"\"\"\n    if len(lst) < 2:\n        return lst[0]\n\n    def helper(left, right):\n        min_left, max_right = left, right\n        for nums in lst:\n            left, right = nums[0], nums[-1]\n            min_left = min(min_left, left)\n            max_right = max(max_right, right)\n        return [min_left, max_right]\n\n    return helper(min(lst, key=lambda x: x[0]), max(lst, key=lambda x: x[-1]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.681640625
    ],
    [
      "def smallest_range(arrays):\n    smallest_range = (arrays[0][0], arrays[0][-1])\n    for array in arrays:\n        if array[0] < smallest_range[0]:\n            smallest_range = (array[0], smallest_range[1])\n        if array[-1] > smallest_range[1]:\n            smallest_range = (smallest_range[0], array[-1])\n    return smallest_range\n\n\nprint(smallest_range([[1, 3, 5, 7, 9], [0, 10, 20, 30, 40], [0, 3, 5, 7, 9, 11, 15]]))",
      -2.759765625
    ],
    [
      "from typing import List\n\n\ndef find_smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    start, end = arrays[0][0], arrays[0][-1]\n    for i in range(1, len(arrays)):\n        start = min(start, arrays[i][0])\n        end = max(end, arrays[i][-1])\n\n    for i in range(len(arrays) - 1):\n        for j in range(i + 1, len(arrays)):\n            for num in arrays[i]:\n                if num in arrays[j]:\n                    start, end = min(start, num), max(end, num)\n                    break\n\n    return [start, end]\n\n\nif __name__ == \"__main__\":\n    arr1 = [4, 10, 15, 24, 26]\n    arr2 = [0, 9, 12, 20]\n    arr3 = [5, 7, 8, 10]\n    arr4 = [3, 4, 6, 8, 10]\n    arr5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    print(find_smallest_range([arr1, arr2, arr3, arr4, arr5]))",
      -2.8359375
    ],
    [
      "from typing import List\n\n\ndef find_smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not arrays:\n        return []\n\n    arrays.sort(key=lambda x: x[0])\n    smallest_range = [arrays[-1][-1], arrays[0][-1]]\n\n    for index in range(len(arrays) - 1):\n        if arrays[index][-1] > smallest_range[0]:\n            smallest_range[0] = arrays[index][-1]\n        else:\n            break\n\n    return smallest_range\n\n\nif __name__ == \"__main__\":\n    assert find_smallest_range([[1, 15], [2, 10], [3, 7], [4, 5], [6, 3]]) == [6, 7]\n    assert find_smallest_range([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [4, 5]",
      -2.84765625
    ],
    [
      "from collections import Counter\n\n\ndef find_smallest_range(arr_list):\n    \"\"\"\n    :param: arr_list - list of integer arrays\n    You need to find the smallest range that includes at least one element from each array\n    and return its length.\n    \"\"\"\n    # Write your code here.\n    return 0\n\n\ndef test_smallest_range():\n    assert find_smallest_range([[3, 5, 7, 9], [10, 15, 18, 19, 20], [2, 3, 4, 5, 6, 7, 8]]) == 5\n    assert find_smallest_range([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == 2\n\n\nif __name__ == '__main__':\n    test_smallest_range()",
      -2.98046875
    ],
    [
      "def smallest_range(arrays):\n    \"\"\"\n    O(nlogn) time | O(1) space\n    \"\"\"\n    if len(arrays) <= 1:\n        return arrays\n\n    smallest_range = [\n        min(arrays[0]),\n        max(arrays[0])\n    ]\n\n    def merge(left, right):\n        \"\"\"\n        Merge two sorted arrays into one.\n        \"\"\"\n        i, j = 0, 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        while i < len(left):\n            result.append(left[i])\n            i += 1\n        while j < len(right):\n            result.append(right[j])\n            j += 1\n        return result\n\n    def find_smallest_range(arrays):\n        \"\"\"\n        Find smallest range.\n        \"\"\"\n        if len(arrays) == 2:\n            return [\n                min(arrays[0] + arrays[1]),\n                max(arrays[0] + arrays[1])\n            ]\n        mid = len(arrays) // 2\n        left = arrays[:mid]\n        right = arrays[mid:]\n\n        left_range = find_smallest_range(left)\n        right_range = find_smallest_range(right)\n\n        return get_smallest_range(left_range, right_range)\n\n    def get_smallest_range(left_range, right_range):\n        \"\"\"\n        Get smallest range.\n        \"\"\"\n        left_min = left_range[0]\n        left_max = left_range[1]\n        right_min = right_range[0]\n        right_max = right_range[1]\n\n        smallest_range = [\n            min(left_min, right_min),\n            max(left_max, right_max)\n        ]\n\n        if left_max <= right_min:",
      -2.994140625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])\n    [24, 26]\n    \"\"\"\n    if not arrays:\n        return []\n\n    smallest_range = [arrays[0][0], arrays[0][0]]\n\n    for array in arrays:\n        if array[0] < smallest_range[0]:\n            smallest_range[0] = array[0]\n        if array[-1] > smallest_range[-1]:\n            smallest_range[-1] = array[-1]\n\n    for i in range(len(arrays)):\n        for j in range(i + 1, len(arrays)):\n            if arrays[i][0] < arrays[j][0] < smallest_range[0]:\n                smallest_range[0] = arrays[i][0]\n            if arrays[i][-1] > arrays[j][-1] > smallest_range[1]:\n                smallest_range[-1] = arrays[i][-1]\n\n    return smallest_range\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.0
    ],
    [
      "def find_range(nums):\n    \"\"\"\n    :param nums: list[list[int]]\n    :return: list[int]\n    \"\"\"\n    result = []\n    start = nums[0][0]\n    end = nums[0][-1]\n    for num in nums:\n        start = min(start, num[0])\n        end = max(end, num[-1])\n    for i in range(start, end+1):\n        for num in nums:\n            if i not in num:\n                break\n        else:\n            result.append(i)\n    return result\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([[1, 2, 3, 5], [1, 2, 3, 4]], [1, 2, 3]),\n        ([[1, 2, 3, 5], [1, 2, 3, 4], [1, 2, 3, 4, 5]], [1, 2, 3, 4, 5])\n    ]\n    for case in test_cases:\n        assert find_range(case[0]) == case[1]",
      -3.0
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(nlogn)\n# Space Complexity: O(1)\ndef smallest_range(nums: List[int]) -> List[int]:\n    nums.sort()\n    first_num = nums[0]\n    last_num = nums[-1]\n    min_diff = last_num - first_num\n    for i in range(len(nums) - 1):\n        cur_diff = nums[i + 1] - nums[i]\n        min_diff = min(cur_diff, min_diff)\n    return [first_num, first_num + min_diff]\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([1, 2, 3, 4, 10]))\n    print(smallest_range([1, 2, 2, 4, 4, 5]))\n    print(smallest_range([1, 2, 3, 4, 10, 11, 12, 13, 14, 15]))\n    print(smallest_range([0, 100000000]))\n    print(smallest_range([1]))\n    print(smallest_range([1, 2, 3]))\n    print(smallest_range([2147483647]))\n    print(smallest_range([0, -1]))",
      -3.16015625
    ],
    [
      "def get_smallest_range(arrays):\n    \"\"\"\n    :param arrays: list of arrays\n    :return: list of smallest range that includes at-least one element from each of the given arrays\n\n    >>> get_smallest_range([[1], [3, 4], [2, 5]])\n    [1, 5]\n    >>> get_smallest_range([[1, 2, 3], [4, 5, 6]])\n    [1, 6]\n    >>> get_smallest_range([[1, 2, 3, 4], [5, 6], [7, 8]])\n    [1, 8]\n    >>> get_smallest_range([[1, 2, 3], [1, 2, 3], [1, 2, 3]])\n    [1, 3]\n    >>> get_smallest_range([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]])\n    [1, 10]\n    >>> get_smallest_range([[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]])\n    [1, 10]\n    \"\"\"\n    if not arrays:\n        return []\n\n    min_num = min(arrays[0])\n    max_num = max(arrays[0])\n    for array in arrays:\n        min_num = min(min_num, min(array))\n        max_num = max(max_num, max(array))\n\n    return [min_num, max_num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.734375
    ],
    [
      "def get_smallest_range(arrays: list) -> tuple:\n    \"\"\"\n    Find the smallest range that includes at-least one element from each of the given arrays.\n    :param arrays: list of lists\n    :return: tuple\n    >>> get_smallest_range([[1,2,3,4], [2,3,4], [3,4]])\n    (3, 4)\n    >>> get_smallest_range([[1,2,3], [2,3,4], [3,4,5]])\n    (1, 5)\n    >>> get_smallest_range([[1,2,3], [2,3,4], [3,4,5], [1,2,3,4,5]])\n    (1, 5)\n    >>> get_smallest_range([[1,2,3], [2,3,4], [3,4,5], [1,2,3,4,5], [1,2,3,4,5]])\n    (1, 5)\n    >>> get_smallest_range([[1,2,3,4,5], [2,3,4], [3,4,5]])\n    (1, 5)\n    >>> get_smallest_range([[1,2,3,4,5], [2,3,4], [3,4,5], [1,2,3,4,5]])\n    (1, 5)\n    >>> get_smallest_range([[1,2,3,4,5], [2,3,4], [3,4,5], [1,2,3,4,5], [1,2,3,4,5]])\n    (1, 5)\n    >>> get_smallest_range([[1,2,3,4,5], [2,3,4], [3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]])\n    (1, 5)\n    >>> get_smallest_range([[1,2,3,4,5], [2,3,4],",
      -3.751953125
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    start = min(min(array) for array in arrays)\n    end = max(max(array) for array in arrays)\n\n    for num in range(start, end):\n        if all(num in array for array in arrays):\n            return [num, end]\n\n    return [start, end]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[1, 5, 7], [0, 3, 10], [2, 6]]) == [1, 7]\n    assert smallest_range([[1, 10], [2, 3, 4], [0, 9, 12]]) == [1, 12]\n    assert smallest_range([[1, 10, 20, 30], [2, 11, 16], [3, 18, 25]]) == [2, 25]",
      -3.7890625
    ],
    [
      "def smallest_range(a, b, c):\n    a.sort()\n    b.sort()\n    c.sort()\n\n    a_min = a[0]\n    a_max = a[len(a)-1]\n\n    b_min = b[0]\n    b_max = b[len(b)-1]\n\n    c_min = c[0]\n    c_max = c[len(c)-1]\n\n    min_max = [a_min, a_max, b_min, b_max, c_min, c_max]\n    max_min = [a_max, a_min, b_max, b_min, c_max, c_min]\n\n    min_min = min(min_max)\n    max_max = max(max_min)\n\n    return [min_min, max_max]\n\n\nif __name__ == \"__main__\":\n    a = [0, 10, 20, 30]\n    b = [1, 9, 10, 15]\n    c = [2, 6, 8, 20]\n    print(smallest_range(a, b, c))",
      -3.798828125
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    \"\"\"\n    if not arr or len(arr) == 0:\n        return []\n\n    min_value = min(arr)\n    max_value = max(arr)\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                min_value, max_value = arr[j], arr[i]\n            else:\n                min_value, max_value = min(arr[i], arr[j]), max(arr[i], arr[j])\n\n    return [min_value, max_value]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([1, 5, 9, 10, 17, 25, 41]) == [1, 25]\n    assert smallest_range([1, 10, 20, 30, 40, 50]) == [1, 50]",
      -3.865234375
    ],
    [
      "from collections import deque\nfrom typing import List\n\n\ndef find_smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m*log(m))\n    Space Complexity: O(1)\n    \"\"\"\n    if not arrays:\n        raise ValueError(\"arrays should contain at least one array\")\n\n    nums = deque()\n\n    for array in arrays:\n        nums.append(array)\n\n    left = min(nums[0][0], nums[1][0])\n    right = max(nums[0][-1], nums[1][-1])\n\n    while left <= right:\n        if has_all_values(nums, left):\n            break\n        left += 1\n\n    return [left, right]\n\n\ndef has_all_values(nums: deque, target: int) -> bool:\n    \"\"\"\n    Time Complexity: O(m)\n    Space Complexity: O(1)\n    \"\"\"\n    for array in nums:\n        if target not in array:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(find_smallest_range([[1, 2, 3], [4, 5, 6]]))",
      -4.08984375
    ],
    [
      "from collections import defaultdict\n\n\ndef smallest_range(arrays):\n    \"\"\"Return the smallest range that includes at-least one element from each of the given arrays.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    Args:\n        arrays: list of lists\n\n    Returns:\n        list of ints\n    \"\"\"\n    smallest_range_start = None\n    smallest_range_end = None\n    min_value = None\n    max_value = None\n\n    for i in range(len(arrays)):\n        if min_value is None:\n            min_value = min(arrays[i])\n            max_value = max(arrays[i])\n        else:\n            if min(arrays[i]) < min_value:\n                min_value = min(arrays[i])\n            if max(arrays[i]) > max_value:\n                max_value = max(arrays[i])\n\n    if max_value - min_value == 0:\n        return [min_value, max_value]\n\n    for i in range(len(arrays)):\n        if smallest_range_start is None:\n            smallest_range_start = min(arrays[i])\n            smallest_range_end = max(arrays[i])\n        else:\n            if max(arrays[i]) > smallest_range_end:\n                smallest_range_end = max(arrays[i])\n\n            if min(arrays[i]) < smallest_range_start:\n                smallest_range_start = min(arrays[i])\n\n    return [smallest_range_start, smallest_range_end]\n\n\ndef smallest_range_optimized(arrays):\n    \"\"\"Return the smallest range that includes at-least one element from each of the given arrays.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Args:\n        arrays: list of lists\n\n    Returns:\n        list of ints\n    \"\"\"\n    min_value = None\n    max_value = None\n\n    for i in range(len(arrays)):\n        if min_value",
      -4.41015625
    ],
    [
      "from typing import List\n\n\ndef find_smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def get_range(array: List[int]) -> int:\n        return array[-1] - array[0]\n\n    if not arrays or not arrays[0]:\n        return []\n\n    min_range = max_range = get_range(arrays[0])\n    min_index = max_index = 0\n\n    for i in range(len(arrays[0])):\n        min_index = max_index = i\n        for j in range(len(arrays)):\n            if arrays[j][i] < arrays[j][min_index]:\n                min_index = i\n            if arrays[j][i] > arrays[j][max_index]:\n                max_index = i\n        min_range = min(min_range, get_range(arrays[j][min_index : max_index + 1]))\n        max_range = max(max_range, get_range(arrays[j][min_index : max_index + 1]))\n\n    return arrays[0][min_index : max_index + 1]\n\n\nif __name__ == \"__main__\":\n    arr_1 = [[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]\n    print(find_smallest_range(arr_1))\n\n    arr_2 = [[1], [2], [3]]\n    print(find_smallest_range(arr_2))\n\n    arr_3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(find_smallest_range(arr_3))",
      -4.421875
    ],
    [
      "from collections import defaultdict\nfrom typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m*log(m))\n    \"\"\"\n    if not arrays:\n        return []\n\n    min_val = min(arrays[0])\n    max_val = max(arrays[0])\n\n    for array in arrays:\n        min_val = min(min_val, min(array))\n        max_val = max(max_val, max(array))\n\n    result = []\n\n    for array in arrays:\n        if not array:\n            return []\n\n        if min(array) >= min_val and max(array) <= max_val:\n            continue\n\n        result.append(array)\n\n    if not result:\n        return [min_val, max_val]\n\n    if len(result) == 1:\n        return [min_val, max(min(result[0]), max_val)]\n\n    return [min_val, max(max(result[0]), max(result[1]))]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[1, 5, 7], [4, 12, 100], [10, 20, 30]]) == [4, 20]\n    assert smallest_range([[1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [1, 5]",
      -4.52734375
    ],
    [
      "def find_smallest_range(arrays):\n    \"\"\"\n    :param arrays: list of lists of integers\n    :return: list of two integers [start, end]\n    \"\"\"\n    if not arrays:\n        return None\n\n    ranges = []\n    for array in arrays:\n        ranges.append(\n            (array[0], array[0], len(array))\n        )\n\n    for array in arrays:\n        for i in range(len(array)):\n            for j in range(len(ranges)):\n                if array[i] < ranges[j][0]:\n                    ranges[j] = (array[i], array[i], ranges[j][2])\n                elif array[i] > ranges[j][1]:\n                    ranges[j] = (ranges[j][0], array[i], ranges[j][2])\n\n    return min(ranges, key=lambda x: x[2])[0:2]\n\n\ndef main():\n\n    arrays = [\n        [1, 3, 5, 7],\n        [0, 2, 4, 6, 8],\n        [1, 2, 3, 7]\n    ]\n\n    result = find_smallest_range(arrays)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()",
      -4.59375
    ],
    [
      "def smallest_range(lst1, lst2):\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    lst3 = []\n    min_val = min(lst1 + lst2)\n    max_val = max(lst1 + lst2)\n    for i in range(min_val, max_val + 1):\n        if i in lst1 and i in lst2:\n            lst3.append(i)\n    return [min(lst3), max(lst3)]\n\n\ndef smallest_range_eff(lst1, lst2):\n    \"\"\"\n    Time Complexity: O(n*log(n)+m*log(m))\n    \"\"\"\n    lst3 = []\n    min_val = min(lst1 + lst2)\n    max_val = max(lst1 + lst2)\n    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n    i, j = 0, 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] <= lst2[j]:\n            lst3.append(lst1[i])\n            i += 1\n        else:\n            lst3.append(lst2[j])\n            j += 1\n    lst3 += lst1[i:] + lst2[j:]\n    return [min(lst3), max(lst3)]\n\n\ndef smallest_range_eff2(lst1, lst2):\n    \"\"\"\n    Time Complexity: O(n*log(n)+m*log(m))\n    \"\"\"\n    lst3 = []\n    min_val = min(lst1 + lst2)\n    max_val = max(lst1 + lst2)\n    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n    i, j = 0, 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] <= lst2[j]:\n            lst3.append(lst1[i])\n            i += 1\n        else:\n            lst3.append(lst2[j])\n            j += 1\n    lst3",
      -4.76953125
    ],
    [
      "from collections import defaultdict\n\n\ndef smallest_range(arr1, arr2):\n    \"\"\"\n    :param arr1: list\n    :param arr2: list\n    :return: list\n    \"\"\"\n    # we use the defaultdict in order to create a dictionary where we can\n    # check if a key exist, if not, we add it and assign the value to 0\n    # then we can use the .get method in order to check if the key exist\n    # in the dictionary, if not, we assign it the value 0\n    # then we can use the max and min functions in order to find the max\n    # and min values\n    dict_arr = defaultdict(int)\n    for i in arr1:\n        dict_arr[i] += 1\n    for i in arr2:\n        dict_arr[i] += 1\n\n    max_val = max(dict_arr)\n    min_val = min(dict_arr)\n\n    return [min_val, max_val]\n\n\nprint(smallest_range([0, 10, 20, 30], [10, 20, 30, 40]))",
      -4.7734375
    ],
    [
      "def find_smallest_range(arrays):\n    \"\"\"\n    Given a list of arrays, returns the smallest range that includes at-least one element from each array.\n\n    >>> find_smallest_range([[1, 3, 5, 7], [0, 2, 4, 5], [3, 5, 7, 9]])\n    [3, 5]\n    >>> find_smallest_range([[1, 5], [2, 3], [0, 4], [2, 5]])\n    [2, 4]\n    >>> find_smallest_range([[1, 3], [2, 5], [3, 4], [1, 5], [2, 6], [3, 5]])\n    [2, 5]\n    \"\"\"\n    # First, find the lowest and highest values from all the arrays\n    lowest = min(arrays, key=min)\n    highest = max(arrays, key=max)\n\n    # Then, find the smallest range that includes at least one element from each array\n    return smallest_range_from_intervals(lowest, highest)\n\ndef smallest_range_from_intervals(lowest, highest):\n    \"\"\"\n    Returns the smallest range that includes at least one element from each interval in intervals.\n\n    >>> smallest_range_from_intervals([1, 3, 5, 7], [3, 5, 7, 9])\n    [3, 5]\n    >>> smallest_range_from_intervals([2, 3], [2, 5], [3, 4], [1, 5], [2, 6], [3, 5])\n    [2, 5]\n    \"\"\"\n    # First, find the lowest and highest values from all the intervals\n    lowest_value = min(lowest)\n    highest_value = max(highest)\n\n    # Then, find the smallest range that includes at least one element from each interval\n    return smallest_range_from_intervals_from_values(lowest_value, highest_value)\n\ndef smallest_range_from_intervals_from_values(lowest_value,",
      -4.79296875
    ],
    [
      "def smallest_range(arr1, arr2, arr3):\n    arr1.sort()\n    arr2.sort()\n    arr3.sort()\n    print(arr1)\n    print(arr2)\n    print(arr3)\n    min_val = arr1[0]\n    max_val = arr1[-1]\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            for k in range(len(arr3)):\n                if arr1[i] + arr2[j] + arr3[k] >= max_val:\n                    max_val = arr1[i] + arr2[j] + arr3[k]\n\n    return min_val, max_val\n\n\nprint(smallest_range([1, 2, 3], [1, 2, 3], [1, 2, 3]))\nprint(smallest_range([1, 2, 3], [2, 3, 4], [3, 4, 5]))\nprint(smallest_range([1, 2, 3], [4, 5, 6], [7, 8, 9]))",
      -4.81640625
    ],
    [
      "from typing import List, Tuple\n\n\ndef smallest_range(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n    min_val = min(arr)\n    max_val = max(arr)\n\n    for i in range(len(arr)):\n        if min_val > arr[i]:\n            min_val = arr[i]\n        if max_val < arr[i]:\n            max_val = arr[i]\n\n    return min_val, max_val\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([4, 10, 100, 3, 2]) == (2, 20)\n    assert smallest_range([4, 10, 100, 3, 2, 1]) == (1, 100)",
      -4.9296875
    ],
    [
      "from typing import List\n\n\ndef find_range(arr1: List[int], arr2: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    if not arr1 or not arr2:\n        return None\n\n    start = 0\n    end = len(arr1) - 1\n\n    while start < end:\n        min_val = min(arr1[start], arr2[end])\n        max_val = max(arr1[start], arr2[end])\n\n        if min_val <= max_val:\n            return max_val - min_val\n        if min_val > max_val:\n            if arr1[start] > arr2[end]:\n                start += 1\n            else:\n                end -= 1\n\n\nif __name__ == \"__main__\":\n    print(find_range([1, 5, 8], [2, 3, 7]))\n    print(find_range([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(find_range([1, 5, 8], [2, 3, 7, 8]))",
      -4.98046875
    ],
    [
      "def smallest_range(a, b, c):\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n    ranges = [a, b, c]\n    ranges.sort(key=lambda x: max(x) - min(x))\n    diff = max(ranges[0]) - min(ranges[1])\n    if diff < max(ranges[2]) - min(ranges[2]):\n        return min(ranges[2]) - diff\n    else:\n        return min(ranges[1]) - diff\n\n\ndef smallest_range_solution(a, b, c):\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n    ranges = [a, b, c]\n    ranges.sort(key=lambda x: max(x) - min(x))\n    diff = max(ranges[0]) - min(ranges[1])\n    if diff < max(ranges[2]) - min(ranges[2]):\n        return min(ranges[2]) - diff\n    else:\n        return min(ranges[1]) - diff\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [0, 1, 3, 5, 7]))\n    print(smallest_range_solution([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [0, 1, 3, 5, 7]))",
      -5.0546875
    ],
    [
      "def min_range(arrays):\n    \"\"\"\n    >>> min_range([[1, 10, 12, 14], [2, 5, 7, 9], [3, 4, 6, 8]])\n    [2, 3]\n    >>> min_range([[1, 10, 12, 14], [2, 5, 7, 9], [3, 4, 6, 8], [1, 2, 3, 4]])\n    [1, 4]\n    >>> min_range([[1, 10, 12, 14], [2, 5, 7, 9], [3, 4, 6, 8], [1, 2, 3, 4], [1, 2, 3, 4]])\n    [1, 4]\n    >>> min_range([[1, 10, 12, 14], [2, 5, 7, 9], [3, 4, 6, 8], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    [1, 4]\n    >>> min_range([[1, 10, 12, 14], [2, 5, 7, 9], [3, 4, 6, 8], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    [1, 4]\n    >>> min_range([[1, 10, 12, 14], [2, 5, 7, 9], [3, 4, 6, 8], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    [",
      -5.5234375
    ],
    [
      "from typing import List\n\n\ndef smallest_range(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    nums = sorted(nums)\n    min_num, max_num = nums[0], nums[-1]\n    start, end = min_num, max_num\n\n    for i in range(len(nums) - 1):\n        start = min(start, nums[i])\n        end = max(end, nums[i + 1])\n\n        if end - start <= end - min_num + max_num - start:\n            break\n\n    return [start, end]\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([1, 7, 9, 10, 12, 15, 18, 19, 25, 27]))",
      -5.65625
    ],
    [
      "def smallest_range(arrays):\n    if not arrays:\n        return None\n    smallest_max = max(arrays[0])\n    largest_min = min(arrays[0])\n    for i in range(len(arrays)):\n        smallest_max = max(arrays[i]) if max(arrays[i]) > smallest_max else smallest_max\n        largest_min = min(arrays[i]) if min(arrays[i]) < largest_min else largest_min\n    return [largest_min, smallest_max]\n\n\nprint(smallest_range([[4, 10, 15, 24, 26], [1, 8, 8, 12, 15], [7, 10, 13, 16, 20]]))",
      -5.6640625
    ],
    [
      "def smallest_range(array_one, array_two):\n    \"\"\"\n    >>> smallest_range([1, 10], [2, 11])\n    (1, 2)\n    >>> smallest_range([1, 10, 15, 20], [2, 11, 16, 21])\n    (1, 2)\n    \"\"\"\n    array_one_min = min(array_one)\n    array_one_max = max(array_one)\n    array_two_min = min(array_two)\n    array_two_max = max(array_two)\n    if array_one_min <= array_two_min <= array_one_max or array_two_min <= array_one_min <= array_two_max:\n        return min(array_one_min, array_two_min), max(array_one_max, array_two_max)\n    elif array_one_min <= array_two_max <= array_one_max or array_two_max <= array_one_max <= array_two_min:\n        return min(array_one_min, array_two_max), max(array_one_max, array_two_min)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.6640625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    arrays.sort(key=lambda x: x[0])\n    right = max(arrays[-1])\n    left = min(arrays[0])\n\n    for i in range(len(arrays) - 1):\n        if arrays[i][-1] > left:\n            left = arrays[i][-1]\n        if right - arrays[i][0] < right - left:\n            right = arrays[i][0]\n\n    return [left, right]\n\n\nif __name__ == \"__main__\":\n    arr1 = [4, 10, 15, 24, 26]\n    arr2 = [0, 9, 12, 20]\n    arr3 = [5, 7, 13, 18, 22]\n    arrays = [arr1, arr2, arr3]\n    assert smallest_range(arrays) == [9, 22]\n\n    arr1 = [4, 10, 15, 24, 26]\n    arr2 = [0, 9, 12, 20]\n    arr3 = [5, 7, 13, 18, 22]\n    arr4 = [3, 5, 7, 9, 11]\n    arrays = [arr1, arr2, arr3, arr4]\n    assert smallest_range(arrays) == [7, 11]",
      -5.69140625
    ],
    [
      "def find_smallest_range(arrays):\n    min_max = []\n    for array in arrays:\n        min_max.append((min(array), max(array)))\n    return find_smallest_range_from_min_max(min_max)\n\ndef find_smallest_range_from_min_max(min_max):\n    min_max.sort(key=lambda x:x[0])\n    smallest = min_max[0]\n    for i in range(1, len(min_max)):\n        smallest = find_smallest_range_from_min_max_helper(smallest, min_max[i])\n    return smallest\n\ndef find_smallest_range_from_min_max_helper(smallest, current):\n    if current[0] <= smallest[0] and current[1] >= smallest[1]:\n        return current\n    elif current[0] <= smallest[0]:\n        return (smallest[0], current[1])\n    else:\n        return (current[0], smallest[1])\n\nprint(find_smallest_range([[1,2,3,4], [2,3,4,5], [3,4,5,6]]))\nprint(find_smallest_range([[1,2,3,4], [2,3,4,5]]))\nprint(find_smallest_range([[1,2,3,4]]))",
      -5.71875
    ],
    [
      "def find_smallest_range(arrays):\n    \"\"\"\n    >>> find_smallest_range([[34, 19, 3], [100, 2, 50, 3], [3, 4, 16, 6]])\n    (2, 20)\n    >>> find_smallest_range([[34, 19, 3], [100, 2, 50, 3], [3, 4, 16, 6], [10, 8, 101, 15]])\n    (2, 20)\n    >>> find_smallest_range([[34, 19, 3], [100, 2, 50, 3], [3, 4, 16, 6], [10, 8, 101, 15], [12, 15, 18, 20]])\n    (2, 20)\n    >>> find_smallest_range([[34, 19, 3], [100, 2, 50, 3], [3, 4, 16, 6], [10, 8, 101, 15], [12, 15, 18, 20], [1000, 1001, 999, 1002]])\n    (2, 20)\n    \"\"\"\n    result_min = None\n    result_max = None\n    min_value = None\n    max_value = None\n    for arr in arrays:\n        if not arr:\n            return None\n        if min_value is None:\n            min_value = min(arr)\n        elif min(arr) < min_value:\n            min_value = min(arr)\n        if max_value is None:\n            max_value = max(arr)\n        elif max(arr) > max_value:\n            max_value = max(arr)\n    result_min = min_value\n    result_max = max_value\n    for arr in arrays:\n        if min(arr",
      -5.7265625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arrays or len(arrays) < 2:\n        return []\n\n    min_num = min(arrays[0])\n    max_num = max(arrays[0])\n    start = 0\n    end = 0\n\n    for i in range(1, len(arrays)):\n        if min_num < min(arrays[i]):\n            start = i\n        if max_num > max(arrays[i]):\n            end = i\n\n    return [min_num, max(min_num, max(arrays[end]) - min(arrays[start]))]\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]) == [4, 18]\n    assert smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30], [0, 9, 12, 20]]) == [4, 18]\n    assert smallest_range([[1, 2, 3], [2, 3, 4]]) == [1, 3]\n    assert smallest_range([[1, 2, 3], [1, 3, 4]]) == [1, 3]",
      -5.953125
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef smallest_range(nums: List[int]) -> List[int]:\n    nums.sort()\n    min_num, max_num = nums[0], nums[-1]\n    min_index, max_index = 0, len(nums) - 1\n\n    while max_index > min_index:\n        curr_min, curr_max = nums[min_index], nums[max_index]\n        if curr_max - curr_min >= max_num - min_num:\n            min_num, max_num = curr_min, curr_max\n            min_index += 1\n        else:\n            max_index -= 1\n\n    return [min_num, max_num]\n\n\nif __name__ == \"__main__\":\n    print(smallest_range([0, 10, 20, 30]), [10, 20])\n    print(smallest_range([5, 11, 12, 14, 18, 19, 20]), [11, 19])",
      -6.203125
    ],
    [
      "from collections import deque\n\n\ndef find_smallest_range(arrays):\n    if not arrays:\n        return None\n\n    smallest_range = []\n    smallest_range_size = float(\"inf\")\n\n    range_ends = deque()\n\n    for array in arrays:\n        range_ends.append((array[0], array[0]))\n\n    while range_ends:\n        start, end = range_ends.popleft()\n\n        for array in arrays:\n            if start <= array[-1] <= end:\n                continue\n\n            if array[0] <= end:\n                range_ends.append((array[0], end))\n                break\n\n        else:\n            if end - start < smallest_range_size:\n                smallest_range = [start, end]\n                smallest_range_size = end - start\n\n    return smallest_range\n\n\nif __name__ == \"__main__\":\n    print(find_smallest_range([[1, 34, 3], [4, 11, 10], [10, 200]]))\n    print(find_smallest_range([[1, 34, 3], [4, 11, 10], [10, 200], [200, 300]]))\n    print(find_smallest_range([]))",
      -6.296875
    ],
    [
      "def get_smallest_range(arrays):\n    \"\"\"\n    >>> get_smallest_range([[1,2,5,9,10], [2,3,4,9,12], [0,2,5,7,10]])\n    [2, 5]\n    >>> get_smallest_range([[1,2,3,4], [2,3,4,5]])\n    [2, 3]\n    \"\"\"\n    if not arrays:\n        return None\n\n    min_max = []\n    for i in range(len(arrays)):\n        min_max.append([min(arrays[i]), max(arrays[i])])\n\n    min_max.sort(key=lambda x: x[0])\n    max_min = list(reversed(sorted(min_max, key=lambda x: x[1])))\n\n    # [1, 2], [2, 3]\n    # [2, 3], [3, 4]\n    # [3, 4], [4, 5]\n    # [4, 5], [5, 6]\n    # [5, 6], [6, 7]\n    for i in range(len(max_min) - 1):\n        if max_min[i][1] >= min_max[i + 1][0]:\n            return [max_min[i][0], max(max_min[i][1], min_max[i + 1][1])]\n\n    return [max_min[0][0], max_min[0][1]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.78125
    ],
    [
      "from collections import deque\n\n\ndef find_smallest_range(nums):\n    \"\"\"\n    :param nums: list of lists\n    :return: list of lists\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n\n    def get_min_max(nums):\n        min_val, max_val = nums[0][0], nums[0][0]\n        for num in nums:\n            if num[0] < min_val:\n                min_val = num[0]\n            if num[1] > max_val:\n                max_val = num[1]\n        return min_val, max_val\n\n    def get_next_range(nums):\n        if len(nums) == 1:\n            return nums[0]\n        min_val, max_val = get_min_max(nums)\n        result = [min_val, max_val]\n        for num in nums:\n            if num[0] < result[0]:\n                result[0] = num[0]\n            if num[1] > result[1]:\n                result[1] = num[1]\n        return result\n\n    def get_smallest_range(nums, result):\n        if not nums:\n            return result\n        result = get_next_range(nums)\n        return get_smallest_range([n for n in nums if n[0] >= result[0] and n[1] <= result[1]], result)\n\n    return get_smallest_range(nums, [])\n\n\ndef main():\n    print(\"Maximum profit: \" +\n          str(find_smallest_range([[10, 20], [6, 8], [1, 5]])))\n    print(\"Maximum profit: \" +\n          str(find_smallest_range([[1, 5], [23, 120], [20, 25], [18, 35]])))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.8125
    ],
    [
      "def find_smallest_range(arrays):\n    \"\"\"\n    :param arrays: list[list] -- list of sorted arrays\n    :return: list -- smallest range that includes at least one element from each of the arrays\n    \"\"\"\n    if not arrays:\n        return None\n\n    min_range = arrays[0]\n    max_range = arrays[0]\n    for array in arrays:\n        if array[0] < min_range[0]:\n            min_range = array\n        if array[-1] > max_range[-1]:\n            max_range = array\n\n    return max_range - min_range\n\nprint(find_smallest_range([[1, 5, 7], [0, 10, 20], [3, 9, 13]]))\nprint(find_smallest_range([[1, 10, 20], [2, 5, 7], [0, 9, 12]]))\nprint(find_smallest_range([[1, 5, 7, 10, 15], [2, 3, 4, 11, 12], [0, 9, 12, 13, 17]]))",
      -6.8203125
    ],
    [
      "from typing import List\n\n\ndef smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arrays:\n        return []\n\n    min_range = max_range = arrays[0]\n\n    for arr in arrays[1:]:\n        max_range = max(max_range, arr)\n        min_range = min(min_range, arr)\n\n    for i in range(len(min_range)):\n        if min_range[i] > max_range[i]:\n            return min_range[:i] + max_range[i:]\n\n    return min_range\n\n\nif __name__ == \"__main__\":\n    assert smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]) == [\n        5,\n        24,\n    ]\n    assert smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30], [1, 3, 8, 10]]) == [\n        1,\n        3,\n    ]",
      -7.328125
    ],
    [
      "def find_smallest_range(arrays):\n    ranges = []\n    for array in arrays:\n        ranges.append([min(array), max(array)])\n    return min_range(ranges)\n\ndef min_range(ranges):\n    if len(ranges) == 1:\n        return ranges[0]\n    else:\n        smaller = ranges[:2]\n        bigger = ranges[2:]\n        if smaller[0][1] >= smaller[1][0]:\n            smaller[0] = min_range(smaller)\n        if bigger:\n            bigger = min_range(bigger)\n        if smaller[0][1] >= bigger[0][0]:\n            return smaller[0]\n        else:\n            return bigger[0]\n\n\na = [1, 5, 8]\nb = [6, 9, 15]\nc = [3, 6, 9]\nprint(find_smallest_range([a, b, c]))",
      -7.82421875
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n log n)\n# Space Complexity: O(1)\ndef solution(arr1: List[int], arr2: List[int]) -> List[int]:\n    arr1.sort()\n    arr2.sort()\n\n    start = arr1[0]\n    end = arr1[-1]\n\n    while arr1 and arr2:\n        if arr1[-1] <= arr2[-1]:\n            arr1.pop()\n            end = arr1[-1] if arr1 else end\n        else:\n            arr2.pop()\n            start = arr2[-1] if arr2 else start\n\n    return [start, end]\n\n\n# Time Complexity: O(n log n)\n# Space Complexity: O(n)\ndef solution2(arr1: List[int], arr2: List[int]) -> List[int]:\n    arr = arr1 + arr2\n    arr.sort()\n\n    start = arr[0]\n    end = arr[-1]\n\n    return [start, end]\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef solution3(arr1: List[int], arr2: List[int]) -> List[int]:\n    arr = []\n    start = end = None\n\n    for x in arr1:\n        arr.append((x, 1))\n    for x in arr2:\n        arr.append((x, 2))\n\n    arr.sort(key=lambda x: x[0])\n\n    for i in range(len(arr)):\n        if arr[i][1] == 1:\n            if start is None:\n                start = arr[i][0]\n            end = arr[i][0]\n        elif arr[i][1] == 2:\n            if end is None:\n                end = arr[i][0]\n            start = arr[i][0]\n\n    return [start, end]\n\n\nprint(solution([1, 10], [2, 9]))\nprint(solution([1, 10], [2, 9, 11]))\nprint(sol",
      -8.859375
    ],
    [
      "from typing import List\nfrom heapq import heappush, heappop\n\n\ndef find_smallest_range(arr1: List[int], arr2: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n    min_heap = []\n    heappush(min_heap, (arr1[0], 0))\n\n    min_diff = float(\"inf\")\n    min_val = arr1[0]\n\n    for i in range(1, len(arr1)):\n        heappush(min_heap, (arr1[i], i))\n\n    while min_heap:\n        curr_val, idx = heappop(min_heap)\n\n        if curr_val <= min_val:\n            min_val = curr_val\n\n        if min_val - curr_val < min_diff:\n            min_diff = min_val - curr_val\n\n        if idx < len(arr1) - 1:\n            heappush(min_heap, (arr1[idx + 1], idx + 1))\n\n    min_heap = []\n    heappush(min_heap, (arr2[0], 0))\n\n    for i in range(1, len(arr2)):\n        heappush(min_heap, (arr2[i], i))\n\n    while min_heap:\n        curr_val, idx = heappop(min_heap)\n\n        if curr_val <= min_val:\n            min_val = curr_val\n\n        if min_val - curr_val < min_diff:\n            min_diff = min_val - curr_val\n\n        if idx < len(arr2) - 1:\n            heappush(min_heap, (arr2[idx + 1], idx + 1))\n\n    return min_diff\n\n\nif __name__ == \"__main__\":\n    assert find_smallest_range([1, 2, 3, 4], [1, 2, 3, 4]) == 0\n    assert find",
      -8.9765625
    ],
    [
      "from typing import List\n\n\ndef smallest_range(nums: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])\n    [20, 24]\n    >>> smallest_range([[1], [2]])\n    [1, 2]\n    >>> smallest_range([[1, 2, 3], [10, 11, 12], [100, 101, 102]])\n    [1, 3]\n    >>> smallest_range([[1, 2, 3], [10, 11, 12], [100, 101, 102], [5, 18, 22, 30]])\n    [1, 3]\n    >>> smallest_range([[5, 18, 22, 30]])\n    [5, 30]\n    \"\"\"\n    # Base cases\n    if not nums:\n        return []\n\n    # If only one array is given, the result is the same as the array itself.\n    if len(nums) == 1:\n        return nums[0]\n\n    # Find minimum and maximum element from all the arrays.\n    min_el = min(nums, key=min)\n    max_el = max(nums, key=max)\n\n    # Find the smallest range that includes at least one element from each array.\n    min_range = max(min_el)\n    max_range = min(max_el)\n\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            min_range = min(min_range, min(nums[i] + nums[j]))\n            max_range = max(max_range, max(nums[i] + nums[j]))\n\n    return [min_range, max_range]\n\n\nif __name",
      -9.140625
    ],
    [
      "from collections import deque\nfrom typing import List\n\n\ndef find_smallest_range(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    smallest_range = []\n    smallest_range_length = float(\"inf\")\n\n    if not arr:\n        return smallest_range\n\n    arr_queue = deque(sorted(arr))\n    min_val = arr_queue.popleft()\n    max_val = arr_queue.popleft()\n\n    while arr_queue:\n        if arr_queue[0] > max_val:\n            smallest_range_length = max_val - min_val\n            smallest_range = [min_val, max_val]\n\n            while arr_queue and arr_queue[0] <= max_val:\n                arr_queue.popleft()\n\n            if arr_queue:\n                min_val = arr_queue.popleft()\n                max_val = arr_queue.popleft()\n\n        else:\n            arr_queue.popleft()\n\n    if len(arr_queue) == 0:\n        smallest_range_length = max_val - min_val\n        smallest_range = [min_val, max_val]\n\n    return smallest_range\n\n\nif __name__ == \"__main__\":\n    assert find_smallest_range([4, 5, 6, 7, 8]) == [4, 5]\n    assert find_smallest_range([1, 10, 10, 4, 5, 6, 7, 8]) == [1, 8]\n    assert find_smallest_range([1, 1, 10, 10, 4, 5, 6, 7, 8]) == [1, 8]\n    assert find_smallest_range([1, 1, 1, 10, 10, 4, 5, 6, 7, 8]) == [1, 8]\n    assert find_smallest_range([1, 1, 1, 1,",
      -9.390625
    ],
    [
      "def smallest_range(arrays):\n    # Generate a list of all the elements in the arrays\n    elements = []\n    for array in arrays:\n        for element in array:\n            elements.append(element)\n\n    # Sort the elements in ascending order\n    elements = sorted(elements)\n\n    # Initialize the smallest range\n    smallest = elements[-1] - elements[0]\n\n    # Initialize the indices of the first and last elements of the smallest range\n    index_first = 0\n    index_last = 0\n\n    # Loop over the sorted elements\n    for index, element in enumerate(elements):\n        # Loop over the arrays\n        for array in arrays:\n            # If the element is not in the array, return False\n            if element not in array:\n                return False\n\n        # Calculate the difference between the current element and the first element of the range\n        diff_first = element - elements[index_first]\n\n        # Calculate the difference between the current element and the last element of the range\n        diff_last = elements[-1] - element\n\n        # If the difference between the current element and the first element of the range is smaller\n        # than the smallest range, update the indices of the first and last elements of the smallest range\n        if diff_first < smallest:\n            smallest = diff_first\n            index_first = index\n\n        # If the difference between the current element and the last element of the range is smaller\n        # than the smallest range, update the indices of the first and last elements of the smallest range\n        if diff_last < smallest:\n            smallest = diff_last\n            index_last = index\n\n    # Return the smallest range\n    return elements[index_first], elements[index_last]\n\n\ndef test(arrays, expected_answer):\n    answer = smallest_range(arrays)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\nif __name__ == \"__main__\":\n    test([[4, 10, 15, 24, 26], [0, 9, 12, 20], [",
      -10.25
    ],
    [
      "from typing import List\n\n\ndef find_smallest_range(arrays: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> find_smallest_range([[3, 4, 10, 11, 12], [1, 2, 9, 10, 13], [5, 7, 8, 14, 15]])\n    [2, 3, 8, 14]\n    \"\"\"\n    if not arrays:\n        return []\n    if len(arrays) == 1:\n        return arrays[0]\n    arrays.sort(key=lambda x: x[0])\n    result: List[int] = arrays[0]\n    result_length: int = len(result)\n\n    for i in range(1, len(arrays)):\n        if len(arrays[i]) <= result_length:\n            continue\n        for j in range(len(result)):\n            if result[j] not in arrays[i]:\n                break\n        else:\n            result = arrays[i]\n            result_length = len(result)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -11.71875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}