{
  "problem": {
    "task_id": "MBPP/59",
    "prompt": "Write a function to find the nth octagonal number.",
    "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
    "test_list": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ],
    "challenge_test_list": [],
    "problem_id": 48
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def octagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: int\n    :return: int\n    >>> octagonal_number(1)\n    1\n    >>> octagonal_number(5)\n    15\n    >>> octagonal_number(12)\n    168\n    \"\"\"\n    return n * (3 * n - 2) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.828125
    ],
    [
      "def nth_octagonal_number(n):\n    return (n * (3 * n - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    print(nth_octagonal_number(1))\n    print(nth_octagonal_number(2))\n    print(nth_octagonal_number(3))\n    print(nth_octagonal_number(4))\n    print(nth_octagonal_number(5))\n    print(nth_octagonal_number(6))\n    print(nth_octagonal_number(7))\n    print(nth_octagonal_number(8))\n    print(nth_octagonal_number(9))\n    print(nth_octagonal_number(10))",
      7.625
    ],
    [
      "import unittest\n\n\ndef nth_octagonal(n):\n    return (n * (3 * n - 1)) // 2\n\n\nclass TestNthOctagonal(unittest.TestCase):\n    def test_nth_octagonal(self):\n        self.assertEqual(nth_octagonal(1), 1)\n        self.assertEqual(nth_octagonal(2), 2)\n        self.assertEqual(nth_octagonal(3), 3)\n        self.assertEqual(nth_octagonal(4), 4)\n        self.assertEqual(nth_octagonal(5), 5)\n        self.assertEqual(nth_octagonal(6), 6)\n        self.assertEqual(nth_octagonal(7), 7)\n        self.assertEqual(nth_octagonal(8), 8)\n        self.assertEqual(nth_octagonal(9), 9)\n        self.assertEqual(nth_octagonal(10), 10)\n        self.assertEqual(nth_octagonal(11), 11)\n        self.assertEqual(nth_octagonal(12), 12)\n        self.assertEqual(nth_octagonal(13), 13)\n        self.assertEqual(nth_octagonal(14), 14)\n        self.assertEqual(nth_octagonal(15), 15)\n        self.assertEqual(nth_octagonal(16), 16)\n        self.assertEqual(nth_octagonal(17), 17)\n        self.assertEqual(nth_octagonal(18), 18)\n        self.assertEqual(nth_octagonal(19), 19)\n        self.assertEqual(nth_octagonal(20), 20)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      6.9609375
    ],
    [
      "def nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return ((3 * n * n - n) * n) // 6\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_octagonal_number(n))",
      5.58984375
    ],
    [
      "def nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    Returns the nth octagonal number.\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(2)\n    2\n    >>> nth_octagonal_number(4)\n    8\n    >>> nth_octagonal_number(10)\n    42\n    >>> nth_octagonal_number(20)\n    92\n    >>> nth_octagonal_number(100)\n    574\n    \"\"\"\n    return (3 * n ** 2 - n) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.30859375
    ],
    [
      "def octagonal_number(n):\n    \"\"\"\n    This solution is based on the observation that each octagonal number is\n    the sum of the first n squares.\n    \"\"\"\n    return n * (2 * n ** 2 - n)\n\n\ndef test_octagonal_number():\n    \"\"\"Test for octagonal_number function.\"\"\"\n    assert octagonal_number(1) == 1\n    assert octagonal_number(2) == 6\n    assert octagonal_number(3) == 15\n    assert octagonal_number(4) == 28\n    assert octagonal_number(5) == 45\n    assert octagonal_number(6) == 66\n    assert octagonal_number(7) == 91\n    assert octagonal_number(8) == 120\n    assert octagonal_number(9) == 155\n    assert octagonal_number(10) == 196",
      3.9453125
    ],
    [
      "def octagonal(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef octagonal_num(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    nth_num = octagonal(n)\n\n    for i in range(1, n):\n        if octagonal(i) <= nth_num < octagonal(i + 1):\n            return nth_num\n\n    return octagonal(n + 1)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(octagonal_num(i))",
      3.759765625
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(2)\n    2\n    >>> nth_octagonal_number(3)\n    3\n    >>> nth_octagonal_number(4)\n    4\n    >>> nth_octagonal_number(5)\n    5\n    >>> nth_octagonal_number(6)\n    6\n    >>> nth_octagonal_number(7)\n    7\n    >>> nth_octagonal_number(8)\n    8\n    >>> nth_octagonal_number(9)\n    9\n    >>> nth_octagonal_number(10)\n    10\n    >>> nth_octagonal_number(11)\n    11\n    >>> nth_octagonal_number(12)\n    12\n    >>> nth_octagonal_number(13)\n    13\n    >>> nth_octagonal_number(14)\n    14\n    >>> nth_octagonal_number(15)\n    15\n    >>> nth_octagonal_number(16)\n    16\n    >>> nth_octagonal_number(17)\n    17\n    >>> nth_octagonal_number(18)\n    18\n    >>> nth_octagonal_number(19)\n    19\n    >>> nth_octagonal_number(20)\n    20\n    >>> nth_octagonal_number(21)\n    21\n    >>> nth_octagonal_number(22)\n    22\n    >>> nth_octagonal_number(23)\n    23\n    >>> nth_octagonal_number(24)\n    24\n    >>> nth_octagonal_number(25)\n    25\n    >>> nth_octagonal_number(26)\n    26\n    >>> nth_octagonal_number(27)",
      3.126953125
    ],
    [
      "def octagonal_number(n: int) -> int:\n    \"\"\"\n    This function uses the formula n * (2n - 1).\n    >>> octagonal_number(1)\n    1\n    >>> octagonal_number(2)\n    2\n    >>> octagonal_number(3)\n    5\n    >>> octagonal_number(4)\n    12\n    >>> octagonal_number(5)\n    22\n    >>> octagonal_number(6)\n    35\n    \"\"\"\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.001953125
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(5)\n    7\n    >>> nth_octagonal_number(20)\n    341\n    >>> nth_octagonal_number(21)\n    342\n    >>> nth_octagonal_number(100)\n    5025\n    >>> nth_octagonal_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    >>> nth_octagonal_number(-17)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Invalid input\")\n\n    if n == 1:\n        return 1\n\n    # Formula: (n^2 - 1)/2\n    return (n * n - 1) * 0.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.9638671875
    ],
    [
      "import math\n\ndef nth_octagonal(n):\n    \"\"\"Return the nth octagonal number.\"\"\"\n    return int((math.sqrt(8*n - 7) + 1)/ 2)",
      1.56640625
    ],
    [
      "def nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    Return the nth octagonal number.\n\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(2)\n    2\n    >>> nth_octagonal_number(3)\n    4\n    >>> nth_octagonal_number(4)\n    5\n    >>> nth_octagonal_number(5)\n    7\n    >>> nth_octagonal_number(6)\n    8\n    >>> nth_octagonal_number(7)\n    9\n    >>> nth_octagonal_number(8)\n    10\n    >>> nth_octagonal_number(9)\n    11\n    >>> nth_octagonal_number(10)\n    12\n    >>> nth_octagonal_number(11)\n    13\n    >>> nth_octagonal_number(12)\n    14\n    >>> nth_octagonal_number(13)\n    15\n    >>> nth_octagonal_number(14)\n    16\n    >>> nth_octagonal_number(15)\n    17\n    >>> nth_octagonal_number(16)\n    18\n    >>> nth_octagonal_number(17)\n    19\n    >>> nth_octagonal_number(18)\n    20\n    >>> nth_octagonal_number(19)\n    21\n    >>> nth_octagonal_number(20)\n    22\n    >>> nth_octagonal_number(21)\n    23\n    >>> nth_octagonal_number(22)\n    24\n    >>> nth_octagonal_number(23)\n    25\n    >>> nth_octagonal_number(24)\n    26\n    >>> nth_octagonal_number(25)\n    27\n    >>> nth_octagonal_number(26)\n    28",
      1.3916015625
    ],
    [
      "def octagonal(n):\n    \"\"\"\n    Finds the nth octagonal number\n    :param n: number to find\n    :return: nth octagonal number\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef nth_octagonal(n):\n    \"\"\"\n    Finds the nth octagonal number\n    :param n: number to find\n    :return: nth octagonal number\n    \"\"\"\n    if n == 1:\n        return 1\n    octagonal_num = 1\n    counter = 2\n    while counter <= n:\n        octagonal_num = octagonal_num + 8 * (counter - 1)\n        counter += 1\n    return octagonal_num\n\n\nif __name__ == \"__main__\":\n    print(nth_octagonal(1))\n    print(nth_octagonal(2))\n    print(nth_octagonal(10))\n    print(nth_octagonal(100))",
      1.13671875
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return int((n**2 + (3*n - 2)*(n - 1))**0.5 + n - 0.5)\n\ndef nth_octagonal_number_naive(n):\n    \"\"\"\n    Returns the nth octagonal number using brute force\n    \"\"\"\n    i = 1\n    while i <= n:\n        j = 1\n        while nth_octagonal_number(j) < i:\n            j += 1\n        if nth_octagonal_number(j) == i:\n            return i\n        i += 1\n    return -1",
      1.1337890625
    ],
    [
      "import math\nfrom typing import List\n\n\ndef octagonal_number(n: int) -> int:\n    \"\"\"Returns the nth octagonal number.\n    >>> octagonal_number(1)\n    1\n    >>> octagonal_number(2)\n    2\n    >>> octagonal_number(3)\n    4\n    >>> octagonal_number(4)\n    5\n    >>> octagonal_number(5)\n    10\n    >>> octagonal_number(6)\n    12\n    >>> octagonal_number(7)\n    15\n    \"\"\"\n    return (3 * n ** 2 - n) // 2\n\n\ndef octagonal_number_sequence(n: int) -> List[int]:\n    \"\"\"Returns a list of the first n octagonal numbers.\n    >>> octagonal_number_sequence(1)\n    [1]\n    >>> octagonal_number_sequence(2)\n    [1, 2]\n    >>> octagonal_number_sequence(3)\n    [1, 2, 4]\n    >>> octagonal_number_sequence(4)\n    [1, 2, 4, 5]\n    >>> octagonal_number_sequence(5)\n    [1, 2, 4, 5, 10]\n    >>> octagonal_number_sequence(6)\n    [1, 2, 4, 5, 10, 12]\n    >>> octagonal_number_sequence(7)\n    [1, 2, 4, 5, 10, 12, 15]\n    \"\"\"\n    return [octagonal_number(i) for i in range(1, n + 1)]\n\n\ndef is_octagonal(n: int) -> bool:\n    \"\"\"Returns True if n is an octagonal number.\n    >>> is_octagonal(1)\n    True\n    >>> is_octagonal(2)\n    True\n    >>> is_octagonal(3)\n    False\n    >>> is_octagonal(4)\n    True\n    >>> is_octagonal",
      0.841796875
    ],
    [
      "def nth_octagonal(n):\n    \"\"\"\n    The nth octagonal number is given by (n * (3 * n - 1)) / 2.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2\n\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(i, nth_octagonal(i))",
      0.78125
    ],
    [
      "def nth_octagonal_number(n):\n    if n < 1:\n        return None\n\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return (n // 2) ** 2\n\n    return (n // 2) ** 2 + 1 + 4 * ((n - 1) // 2)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(i, nth_octagonal_number(i))",
      0.48388671875
    ],
    [
      "def nth_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n\n    Args:\n        n: The nth number to find.\n    \"\"\"\n\n    return int((n * (5 + 2 * n) ** 0.5) / 5)",
      0.436767578125
    ],
    [
      "def nth_octagonal(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n\n    :param n:\n    :return:\n    \"\"\"\n    return int(((2 * n - 1) ** 2 + (2 * n - 1)) / 6)",
      0.40771484375
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    :param n: int - an octagonal number will be returned\n    :return: int - the nth octagonal number\n    \"\"\"\n    if n < 1:\n        return None\n\n    if n == 1:\n        return 1\n\n    if n % 16 == 0:\n        return int((math.sqrt(8 * n + 1) - 1) / 2)\n\n    return int((math.sqrt(8 * n + 1) + 1) / 2)\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = nth_octagonal_number(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((1, 1))\ntest_function((2, 2))\ntest_function((3, 4))\ntest_function((4, 5))\ntest_function((5, 12))\ntest_function((6, None))",
      0.1475830078125
    ],
    [
      "import math\n\n\ndef octagonal(n):\n    return int((math.sqrt(8 * n - 7) + 1) / 2)\n\n\ndef nth_octagonal_number(n):\n    return octagonal(octagonal(n) + n)",
      0.03564453125
    ],
    [
      "def octagonal(n: int) -> int:\n    \"\"\"Return the nth octagonal number.\n\n    >>> octagonal(1)\n    1\n    >>> octagonal(2)\n    8\n    >>> octagonal(3)\n    28\n    >>> octagonal(4)\n    68\n    >>> octagonal(5)\n    120\n    >>> octagonal(6)\n    220\n    >>> octagonal(7)\n    348\n    >>> octagonal(8)\n    528\n    >>> octagonal(9)\n    744\n    >>> octagonal(10)\n    1000\n    >>> octagonal(11)\n    1320\n    >>> octagonal(12)\n    1680\n    >>> octagonal(13)\n    2092\n    >>> octagonal(14)\n    2568\n    >>> octagonal(15)\n    3112\n    >>> octagonal(16)\n    3720\n    >>> octagonal(17)\n    4404\n    >>> octagonal(18)\n    5160\n    >>> octagonal(19)\n    6004\n    >>> octagonal(20)\n    6960\n    >>> octagonal(21)\n    8080\n    >>> octagonal(22)\n    9320\n    >>> octagonal(23)\n    10648\n    >>> octagonal(24)\n    12140\n    >>> octagonal(25)\n    13720\n    >>> octagonal(26)\n    15400\n    >>> octagonal(27)\n    17220\n    >>> octagonal(28)\n    19168\n    >>> octagonal(29)\n    21240\n    >>> octagonal(30)\n    23520\n    >>> octagonal(31)\n    25968\n    >>> oct",
      0.0008668899536132812
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: The position of the octagonal number.\n    :return: The nth octagonal number.\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(5)\n    7\n    >>> nth_octagonal_number(100)\n    16620\n    >>> nth_octagonal_number(1000000)\n    113486917\n    >>> nth_octagonal_number(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return int((3 * (n ** 2) - n) / 2)\n\n\ndef nth_octagonal_number_math(n: int) -> int:\n    \"\"\"\n    :param n: The position of the octagonal number.\n    :return: The nth octagonal number.\n    >>> nth_octagonal_number_math(1)\n    1\n    >>> nth_octagonal_number_math(5)\n    7\n    >>> nth_octagonal_number_math(100)\n    16620\n    >>> nth_octagonal_number_math(1000000)\n    113486917\n    >>> nth_octagonal_number_math(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return int(n * (3 * (n ** 2) - n) / 2)\n\n\ndef nth_octagonal_number_formula(n: int) -> int:\n    \"\"\"\n    :param n: The position of the octagonal number.\n    :return: The nth octagonal number",
      -0.052337646484375
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    :param n: int - an octagonal number will be returned\n    :return: int - nth octagonal number\n    \"\"\"\n    return ((2 * n - 1) * (2 * n - 1)) ** 0.5\n\n\nif __name__ == '__main__':\n    print(nth_octagonal_number(12))",
      -0.1544189453125
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n: int) -> int:\n    \"\"\"Returns the nth octagonal number.\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(5)\n    7\n    >>> nth_octagonal_number(7)\n    15\n    >>> nth_octagonal_number(100)\n    21124\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be a positive integer\")\n\n    # nth octagonal number = n**2 - (n - 1)**2\n    return n**2 - (n - 1)**2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    n = int(input(\"Enter an octagonal number: \").strip())\n    print(nth_octagonal_number(n))",
      -0.28173828125
    ],
    [
      "def octagonal_number(n):\n    return n * (2 * n - 1)\n\n\ndef test_octagonal_number():\n    assert octagonal_number(1) == 1\n    assert octagonal_number(2) == 2\n    assert octagonal_number(3) == 6\n    assert octagonal_number(4) == 10\n    assert octagonal_number(5) == 15\n\n\nif __name__ == \"__main__\":\n    test_octagonal_number()",
      -0.85595703125
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \"\"\"\n    return ((n * (2 * n - 1)) + (n * (n - 1))) // 6",
      -0.85693359375
    ],
    [
      "def nth_octagonal_number(n):\n    return int((n ** 2 + (n - 1) ** 2) ** 0.5)\n\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(i, nth_octagonal_number(i))",
      -0.85693359375
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    We can find the nth octagonal number by adding the sum of 1 to n, and\n    then dividing that sum by 2.\n    \"\"\"\n    return (1 + (8 * n)) // 2",
      -0.85693359375
    ],
    [
      "def octagonal_number(n):\n    return n * (3 * n - 1) // 2\n\n\ndef octagonal_number_reverse(num):\n    n = (2 * num) ** 0.5\n    return int(n + 0.5)",
      -0.85693359375
    ],
    [
      "def nth_octagonal_number(n):\n    return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    print(nth_octagonal_number(1))",
      -0.85693359375
    ],
    [
      "def octagonal(n):\n    return (n * (3 * n - 1) // 2)\n\ndef octagonal_number(n):\n    if n == 1:\n        return 1\n    return octagonal(n)\n\ndef octagonal_number_sequence(n):\n    if n == 1:\n        return [1]\n    return [octagonal(i) for i in range(1, n + 1)]\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(octagonal_number(i))\n\n    print(octagonal_number_sequence(5))",
      -0.85693359375
    ],
    [
      "def nth_octagonal_number(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return 1 + 4 * (n - 1) * (n - 1)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_octagonal_number(i))",
      -0.85693359375
    ],
    [
      "def octagonal_number(n):\n    \"\"\"\n    Return the nth octagonal number.\n    \"\"\"\n    return (n * (2 * n - 1))\n\n\ndef octagonal_number_sequence(n):\n    \"\"\"\n    Return an array of the first n octagonal numbers.\n    \"\"\"\n    return [octagonal_number(x) for x in range(1, n + 1)]",
      -0.85693359375
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \"\"\"\n    return ((((2 * n) - 1) ** 2) + 1) // 6",
      -0.85791015625
    ],
    [
      "def octagonal_number(n):\n    \"\"\"\n    Return the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return (3 * n**2 - n) // 2",
      -0.85791015625
    ],
    [
      "def octagonal_number(n):\n    \"\"\"\n    :param n: int - an octagonal number will be returned\n    :return: int - nth octagonal number\n    \"\"\"\n    return ((2 * n - 1) ** 2) + (n - 1)\n\n\nif __name__ == \"__main__\":\n    print(octagonal_number(2))",
      -0.85791015625
    ],
    [
      "def nth_octagonal_number(n):\n    return n * (3 * n - 2)\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_octagonal_number(n))",
      -0.85791015625
    ],
    [
      "def octagonal_number(n):\n    return (n * (2 * n - 1))\n\n\ndef octagonal_number_sequence(n):\n    return [octagonal_number(x) for x in range(1, n + 1)]",
      -0.85791015625
    ],
    [
      "def octagonal_num(n):\n    return n * (2 * n - 1)\n\n\ndef nth_octagonal_num(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 1\n    while octagonal_num(i) < n:\n        i += 1\n    return octagonal_num(i)\n\n\nprint(nth_octagonal_num(100))",
      -0.85791015625
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    We know that octagonal numbers are generated by the formula:\n        n**2 + 1\n    So we can generate the nth octagonal number by calculating the square root of n**2 + 1.\n    \"\"\"\n    return (n ** 2 + 1) ** 0.5\n\n\nif __name__ == \"__main__\":\n    print(nth_octagonal_number(100))",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef octagonal_number(n):\n    \"\"\"Returns the nth octagonal number.\n\n    Args:\n        n: The position of the octagonal number.\n\n    Returns:\n        An integer representing the nth octagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef nth_octagonal_number(n):\n    \"\"\"Returns the nth octagonal number.\n\n    Args:\n        n: The position of the octagonal number.\n\n    Returns:\n        An integer representing the nth octagonal number.\n    \"\"\"\n    return (math.sqrt(8 * n ** 2 + 1) - 1) / 2\n\n\nif __name__ == \"__main__\":\n    print(octagonal_number(100))\n    print(nth_octagonal_number(100))",
      -0.85791015625
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \"\"\"\n    return int((math.sqrt(24 * n + 7) + 1) / 6)",
      -0.8583984375
    ],
    [
      "def octagonal_number(n):\n    \"\"\"\n    This function calculates the nth octagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef octagonal_number_sequence(n):\n    \"\"\"\n    This function returns the sequence of the first n octagonal numbers.\n    \"\"\"\n    octagonal = []\n    for i in range(1, n + 1):\n        octagonal.append(octagonal_number(i))\n    return octagonal",
      -0.8583984375
    ],
    [
      "def nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    Returns the nth octagonal number.\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(5)\n    15\n    >>> nth_octagonal_number(12)\n    168\n    \"\"\"\n    return ((3 * n ** 2 - n) // 2) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def octagonal(n: int) -> int:\n    \"\"\"\n    n(n^2 - 7n + 6) / 6\n    \"\"\"\n    return n * (n * n - 7 * n + 6) // 6\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 101):\n        print(octagonal(i))",
      -0.8583984375
    ],
    [
      "def octagonal(n):\n    return n ** 2\n\n\ndef octagonal_number(n):\n    if n == 1:\n        return 1\n\n    i = 1\n    while octagonal(i) < n:\n        i += 1\n\n    j = i - 1\n    while octagonal(j) >= n:\n        j -= 1\n\n    k = i\n    while octagonal(k) <= n:\n        k += 1\n\n    return octagonal(j) + (n - octagonal(j)) * (octagonal(k) - octagonal(j)) // (k - j)",
      -0.8583984375
    ],
    [
      "def octagonal(num):\n    return num * (2 * num - 1)\n\n\ndef nth_octagonal(n):\n    nth = n + 1\n    start = int((-1 + (1 + 8 * nth) ** .5) / 2)\n    num = start\n    while nth > 0:\n        nth -= 1\n        num += 1\n    return octagonal(num)\n\n\nif __name__ == \"__main__\":\n    print(nth_octagonal(1))\n    print(nth_octagonal(2))\n    print(nth_octagonal(3))\n    print(nth_octagonal(4))\n    print(nth_octagonal(5))",
      -0.8583984375
    ],
    [
      "import math\n\ndef nth_octagonal_number(n):\n    \"\"\"Find the nth octagonal number.\"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + 4 * (n - 1) * (n - 1)\n\ndef nth_octagonal_number_formula(n):\n    \"\"\"Find the nth octagonal number.\"\"\"\n    return int(math.ceil((math.sqrt(8 * n - 7) + 1) / 2.0))",
      -0.8583984375
    ],
    [
      "def octagonal_number(n):\n    return (n * (2 * n - 1))\n\n\ndef test_octagonal_number():\n    assert octagonal_number(1) == 1\n    assert octagonal_number(2) == 2\n    assert octagonal_number(3) == 6\n    assert octagonal_number(4) == 10\n    assert octagonal_number(5) == 15\n    assert octagonal_number(6) == 20\n    assert octagonal_number(7) == 28",
      -0.8583984375
    ],
    [
      "def octagonal_number(n):\n    return n ** 2 - n * (n - 1) // 2\n\n\ndef octagonal_number_n(n):\n    \"\"\"\n    This function is faster than the first one.\n    \"\"\"\n    return (n * (3 * n - 1) // 2) + 1",
      -0.8583984375
    ],
    [
      "def nth_octagonal_number(n: int) -> int:\n    \"\"\"Returns nth octagonal number.\n\n    Args:\n        n (int): nth number\n\n    Examples:\n        >>> assert nth_octagonal_number(1) == 1\n        >>> assert nth_octagonal_number(5) == 15\n    \"\"\"\n    return n * (3 * n - 2) // 2\n\n\nif __name__ == \"__main__\":\n    print(nth_octagonal_number(int(input().strip())))",
      -0.8583984375
    ],
    [
      "def octagonal(n):\n    \"\"\"Returns nth octagonal number\"\"\"\n    if n < 1:\n        return n\n    return (((3 * n ** 2) - n) / 2)\n\n\ndef test_octagonal():\n    \"\"\"run tests\"\"\"\n    assert octagonal(1) == 1\n    assert octagonal(2) == 6\n    assert octagonal(3) == 15\n    assert octagonal(4) == 28\n    assert octagonal(5) == 45\n    assert octagonal(6) == 66\n\n\nif __name__ == \"__main__\":\n    test_octagonal()",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    return int((n * (3 * n - 1)) / 2)\n\n\ndef main():\n    print(nth_octagonal_number(int(input(\"Enter n: \"))))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    if n > 0:\n        return int(((math.sqrt(24 * n + 7) + 1) / 4) + 0.5)\n    return 0\n\n\nif __name__ == '__main__':\n    for i in range(10):\n        print(nth_octagonal_number(i))",
      -0.8583984375
    ],
    [
      "def octagonal_number(n):\n    \"\"\"\n    :param n: int - an octagonal number will be returned\n    :return: int - nth octagonal number\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return ((3 * n ** 2 - n) // 2)\n\n\nif __name__ == '__main__':\n    print(octagonal_number(4))",
      -0.8583984375
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    # Find the nth octagonal number\n    i = 1\n    num = 1\n    while i < n:\n        num += 1\n        i += 1\n        for _ in range(6):\n            num += 1\n            i += 1\n            if i == n:\n                break\n    return num",
      -0.8583984375
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    :param n: int - an octagonal number will be returned\n    :return: int - nth octagonal number\n    \"\"\"\n    return (n * (2 * n - 1))\n\n\nif __name__ == '__main__':\n    print(nth_octagonal_number(1))\n    print(nth_octagonal_number(2))\n    print(nth_octagonal_number(4))",
      -0.8583984375
    ],
    [
      "def nth_octagonal(n):\n    return int((n**2 + (n - 1)*2) * (2 - n))\n\ndef test_nth_octagonal():\n    assert nth_octagonal(1) == 1\n    assert nth_octagonal(2) == 8\n    assert nth_octagonal(3) == 22\n    assert nth_octagonal(4) == 42\n    assert nth_octagonal(5) == 64\n    assert nth_octagonal(6) == 92\n    assert nth_octagonal(7) == 122\n    assert nth_octagonal(8) == 164\n    assert nth_octagonal(9) == 212",
      -0.8583984375
    ],
    [
      "def nth_octagonal(num):\n    \"\"\"\n    Return the nth octagonal number.\n    \"\"\"\n    if num < 1:\n        return None\n    if num == 1:\n        return 1\n    octagonal_num = 1\n    for i in range(2, num + 1):\n        octagonal_num += 4 * (i - 1)\n        octagonal_num += 3 * (i - 1) * (i - 1)\n    return octagonal_num",
      -0.85888671875
    ],
    [
      "def octagonal(n):\n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\tif n == 1:\n\t\treturn 1\n\treturn (3*n**2 - n) // 2\n\ndef octagonal_index(num):\n\t\"\"\"\n\tReturns the index of the given octagonal number.\n\t\"\"\"\n\tif num == 1:\n\t\treturn 1\n\tfor i in range(1, octagonal(num)):\n\t\tif octagonal(i) == num:\n\t\t\treturn i\n\treturn None\n\nif __name__ == '__main__':\n\tprint octagonal_index(225)",
      -0.85888671875
    ],
    [
      "def octagonal_number(n):\n    \"\"\"Return the nth octagonal number.\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    return int((n * (5 + (2 * n) ** 2)) ** 0.5 + 0.5)\n\n\ndef nth_octagonal_number(n):\n    \"\"\"Return the nth octagonal number.\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a",
      -0.85888671875
    ],
    [
      "import math\n\ndef nth_octagonal_number(n):\n    return int((math.sqrt(8 * n - 7) + 1) / 2)\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    print(\"The {} octagonal number is {}.\".format(n, nth_octagonal_number(n)))\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "def octagonal(n):\n    if n < 1:\n        return 0\n    return (n * (3 * n - 1)) // 2\n\ndef octagonal_number(n):\n    if n < 1:\n        return 0\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if octagonal(mid) < n:\n            low = mid + 1\n        else:\n            high = mid\n    return octagonal(low)\n\n# Tests\nassert octagonal_number(1) == 1\nassert octagonal_number(2) == 2\nassert octagonal_number(3) == 4\nassert octagonal_number(4) == 5\nassert octagonal_number(5) == 10\nassert octagonal_number(6) == 12\nassert octagonal_number(7) == 22",
      -0.85888671875
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    n is 1-indexed.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be at least 1\")\n    return n * (5 * n - 3)",
      -0.86083984375
    ],
    [
      "def nth_octagonal(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return (n * (3 * n - 2)) // 2\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_octagonal(n))",
      -0.86083984375
    ],
    [
      "def octagonal(n: int) -> int:\n    \"\"\"\n    Return the nth octagonal number.\n    >>> octagonal(1)\n    1\n    >>> octagonal(5)\n    28\n    >>> octagonal(10)\n    188\n    >>> octagonal(20)\n    368\n    >>> octagonal(100)\n    13784\n    \"\"\"\n    # number of sides\n    s = 8\n\n    # nth octagonal number is equal to n * (2n-1) * (2n-3) / 6\n    return int((n * (2 * n - 1) * (2 * n - 3)) / (s * (s - 1)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.92138671875
    ],
    [
      "def octagonal_number(n: int) -> int:\n    \"\"\"\n    Returns the nth octagonal number.\n    >>> octagonal_number(1)\n    1\n    >>> octagonal_number(2)\n    2\n    >>> octagonal_number(3)\n    4\n    >>> octagonal_number(4)\n    5\n    >>> octagonal_number(5)\n    7\n    >>> octagonal_number(6)\n    8\n    >>> octagonal_number(7)\n    9\n    >>> octagonal_number(8)\n    10\n    >>> octagonal_number(9)\n    12\n    >>> octagonal_number(10)\n    13\n    >>> octagonal_number(11)\n    14\n    >>> octagonal_number(12)\n    15\n    >>> octagonal_number(13)\n    16\n    >>> octagonal_number(14)\n    17\n    >>> octagonal_number(15)\n    18\n    >>> octagonal_number(16)\n    19\n    >>> octagonal_number(17)\n    20\n    >>> octagonal_number(18)\n    21\n    >>> octagonal_number(19)\n    22\n    >>> octagonal_number(20)\n    23\n    \"\"\"\n    return int(((3 * (n ** 2) - n) / 2) + 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.9365234375
    ],
    [
      "def octagonal(n):\n    return n * (2 * n - 1)\n\ndef nth_octagonal(n):\n    \"\"\"Returns the nth octagonal number.\n\n    >>> nth_octagonal(1)\n    1\n    >>> nth_octagonal(2)\n    2\n    >>> nth_octagonal(3)\n    4\n    >>> nth_octagonal(4)\n    6\n    >>> nth_octagonal(5)\n    9\n    >>> nth_octagonal(6)\n    12\n    >>> nth_octagonal(7)\n    16\n    >>> nth_octagonal(8)\n    20\n    >>> nth_octagonal(9)\n    25\n    >>> nth_octagonal(10)\n    30\n\n    >>> nth_octagonal(11)\n    36\n    >>> nth_octagonal(22)\n    264\n    \"\"\"\n    if n == 1:\n        return 1\n    return octagonal(n - 1) + nth_octagonal(n - 1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.9638671875
    ],
    [
      "import unittest\n\n\ndef nth_octagonal(n):\n    return (n * (3 * n - 1)) // 2\n\n\nclass TestNthOctagonal(unittest.TestCase):\n    def test_nth_octagonal(self):\n        self.assertEqual(nth_octagonal(1), 1)\n        self.assertEqual(nth_octagonal(2), 2)\n        self.assertEqual(nth_octagonal(3), 4)\n        self.assertEqual(nth_octagonal(4), 5)\n        self.assertEqual(nth_octagonal(5), 7)\n        self.assertEqual(nth_octagonal(6), 8)\n        self.assertEqual(nth_octagonal(7), 10)\n        self.assertEqual(nth_octagonal(8), 11)\n        self.assertEqual(nth_octagonal(9), 13)\n        self.assertEqual(nth_octagonal(10), 14)\n        self.assertEqual(nth_octagonal(11), 15)\n        self.assertEqual(nth_octagonal(12), 17)\n        self.assertEqual(nth_octagonal(13), 18)\n        self.assertEqual(nth_octagonal(14), 20)\n        self.assertEqual(nth_octagonal(15), 21)\n        self.assertEqual(nth_octagonal(16), 22)\n        self.assertEqual(nth_octagonal(17), 24)\n        self.assertEqual(nth_octagonal(18), 25)\n        self.assertEqual(nth_octagonal(19), 27)\n        self.assertEqual(nth_octagonal(20), 28)\n        self.assertEqual(nth_octagonal(21), 30)\n        self.assertEqual(nth_octagonal(22), 31)\n        self.assertEqual(nth_octagonal(23), 33)\n        self.",
      -0.97119140625
    ],
    [
      "def octagonal(n):\n    \"\"\"\n    Take the nth number and find the octagonal number\n    \"\"\"\n    # Check if the number is negative\n    if n < 0:\n        raise ValueError(\"The number cannot be negative\")\n\n    # Check if the number is 0\n    if n == 0:\n        return 0\n\n    # Check if the number is 1\n    if n == 1:\n        return 1\n\n    # Calculate the number\n    return int(((3 * n * n) - (n * n)) / 2)",
      -1.0888671875
    ],
    [
      "def octagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: int - an octagonal number will be returned\n    :return: int\n    \"\"\"\n    return n * (3 * n - 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(octagonal_number(1))\n    print(octagonal_number(2))\n    print(octagonal_number(100))",
      -1.1279296875
    ],
    [
      "import math\nfrom typing import Optional\n\n\ndef nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    :param n: the nth number to find\n    :return: the nth octagonal number\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(5)\n    7\n    >>> nth_octagonal_number(10)\n    28\n    >>> nth_octagonal_number(20)\n    75\n    >>> nth_octagonal_number(100)\n    648\n    >>> nth_octagonal_number(1000)\n    6746\n    \"\"\"\n    return int((n * (2 * (n ** 2) - 1)) ** 0.5 + 0.5)\n\n\ndef nth_octagonal_number_math(n: int) -> int:\n    \"\"\"\n    :param n: the nth number to find\n    :return: the nth octagonal number\n    >>> nth_octagonal_number_math(1)\n    1\n    >>> nth_octagonal_number_math(5)\n    7\n    >>> nth_octagonal_number_math(10)\n    28\n    >>> nth_octagonal_number_math(20)\n    75\n    >>> nth_octagonal_number_math(100)\n    648\n    >>> nth_octagonal_number_math(1000)\n    6746\n    \"\"\"\n    return int(n * (3 * n - 1) / 2)\n\n\ndef nth_octagonal_number_math_sqrt(n: int) -> int:\n    \"\"\"\n    :param n: the nth number to find\n    :return: the nth octagonal number\n    >>> nth_octagonal_number_math_sqrt(1)\n    1\n    >>> nth_octagonal_number_math_sqrt(5)\n    7\n    >>> nth_octagonal_number_math_sqrt(",
      -1.9384765625
    ],
    [
      "def octagonal_number(n: int) -> int:\n    \"\"\"\n    Octagonal number is a number which is the sum of the 8th powers of its\n    digits.\n\n    :param n: the number to find the octagonal number of\n    :return: the nth octagonal number\n\n    >>> octagonal_number(1)\n    1\n    >>> octagonal_number(5)\n    15\n    >>> octagonal_number(10)\n    100\n    >>> octagonal_number(100)\n    10000\n    \"\"\"\n    octagonal = n\n    while n > 0:\n        octagonal += sum(int(x) ** 8 for x in str(n))\n        n -= 1\n    return octagonal\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -2.173828125
    ],
    [
      "import math\n\ndef octagon(n):\n    return n**2 + (n-1)**2\n\ndef nth_octagon(n):\n    return (n*(2*n-1))\n\n\ndef main():\n    n = 2\n    print octagon(n)\n    print nth_octagon(n)\n\nif __name__ == '__main__':\n    main()",
      -2.333984375
    ],
    [
      "def octagonal_number(n):\n    return n * ((2 * n) - 1)\n\n\ndef octagonal_number_naive(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    :param n: int - octagonal number position\n    :return: int - nth octagonal number\n    \"\"\"\n    counter = 1\n    while counter < n:\n        counter += 1\n    return octagonal_number(counter)\n\n\nif __name__ == \"__main__\":\n    print(octagonal_number(5))\n    print(octagonal_number_naive(5))",
      -3.37109375
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    Octagonal numbers are numbers of the form 1 + 2 + 3 + ... + n.\n    We can calculate the nth octagonal number by summing the first n\n    squares.\n    \"\"\"\n    return int((math.sqrt(8 * n + 1) - 1) / 2)",
      -4.1640625
    ],
    [
      "import math\n\n\n# O(sqrt(n))\ndef octagonal_number(n: int) -> int:\n    \"\"\"Returns the nth octagonal number.\n    >>> octagonal_number(1)\n    1\n    >>> octagonal_number(2)\n    8\n    >>> octagonal_number(5)\n    120\n    >>> octagonal_number(23)\n    768\n    >>> octagonal_number(100)\n    5072\n    \"\"\"\n    if n < 1:\n        return 0\n\n    # nth octagonal number is a number of the form 1+8*k+16*k**2 for k>=0\n    k = math.floor((1 + math.sqrt(24 * n + 1)) / 6)\n    return 8 * k ** 2 + 1 + 8 * k\n\n\nif __name__ == \"__main__\":\n    print(octagonal_number(int(input().strip())))",
      -4.36328125
    ],
    [
      "def octagonal_number(n: int) -> int:\n    \"\"\"\n    >>> octagonal_number(1)\n    1\n    >>> octagonal_number(5)\n    28\n    >>> octagonal_number(10)\n    146\n    >>> octagonal_number(20)\n    464\n    \"\"\"\n    return n * (3 * n - 2)\n\n\ndef octagonal_number_sequence(n: int) -> int:\n    \"\"\"\n    >>> octagonal_number_sequence(1)\n    1\n    >>> octagonal_number_sequence(5)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    >>> octagonal_number_sequence(10)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]\n    >>> octagonal_number_sequence(20)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,",
      -4.53125
    ],
    [
      "def octagonal_number(n):\n    \"\"\"\n    :param n: int - an octagonal number will be returned\n    :return: int or str\n    \"\"\"\n    if n <= 0:\n        return str(n)\n    else:\n        return sum(range(1, n + 1))\n\n\nprint(octagonal_number(0))\nprint(octagonal_number(1))\nprint(octagonal_number(2))\nprint(octagonal_number(3))\nprint(octagonal_number(4))\nprint(octagonal_number(5))\nprint(octagonal_number(6))\nprint(octagonal_number(7))\nprint(octagonal_number(8))\nprint(octagonal_number(9))\nprint(octagonal_number(10))\nprint(octagonal_number(11))\nprint(octagonal_number(12))\nprint(octagonal_number(13))\nprint(octagonal_number(14))\nprint(octagonal_number(15))\nprint(octagonal_number(16))\nprint(octagonal_number(17))\nprint(octagonal_number(18))\nprint(octagonal_number(19))\nprint(octagonal_number(20))\nprint(octagonal_number(21))\nprint(octagonal_number(22))\nprint(octagonal_number(23))\nprint(octagonal_number(24))\nprint(octagonal_number(25))\nprint(octagonal_number(26))\nprint(octagonal_number(27))\nprint(octagonal_number(28))\nprint(octagonal_number(29))\nprint(octagonal_number(30))\nprint(octagonal_number(31))\nprint(octagonal_number(32))\nprint(octagonal_number(33))\nprint(octagonal_number(34))\nprint(octagonal_number(35))\nprint(octagonal_number(36))\nprint",
      -4.58203125
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    return n * (3 * n - 1) // 2\n\n\ndef nth_octagonal_number_naive(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    i = 1\n    while nth_octagonal_number(i) < n:\n        i += 1\n\n    return nth_octagonal_number(i)\n\n\nif __name__ == \"__main__\":\n    print(nth_octagonal_number(4))\n    print(nth_octagonal_number(6))\n    print(nth_octagonal_number(7))\n    print(nth_octagonal_number(23))\n\n    assert nth_octagonal_number(4) == 4\n    assert nth_octagonal_number(6) == 6\n    assert nth_octagonal_number(7) == 7\n    assert nth_octagonal_number(23) == 23\n\n    print(nth_octagonal_number_naive(4))\n    print(nth_octagonal_number_naive(6))\n    print(nth_octagonal_number_naive(7))\n    print(nth_octagonal_number_naive(23))\n\n    assert nth_octagonal_number_naive(4) == 4\n    assert nth_octagonal_number_naive(6) == 6\n    assert nth_octagonal_number_naive(7) == 7\n    assert nth_octagonal_number_naive(23) == 23",
      -4.859375
    ],
    [
      "import math\n\n\ndef nth_octagonal(n):\n    \"\"\"Return the nth octagonal number.\n\n    Octagonal numbers are numbers with the form 1+4+6+8+10+12+14+16+18+20.\n\n    >>> nth_octagonal(1)\n    1\n    >>> nth_octagonal(5)\n    24\n    >>> nth_octagonal(10)\n    96\n    >>> nth_octagonal(20)\n    384\n    >>> nth_octagonal(100)\n    7896\n    \"\"\"\n    return ((2 * n - 1) ** 2 + 1) * ((2 * n - 1) ** 2) // 4\n\n\ndef nth_octagonal_alt(n):\n    \"\"\"Return the nth octagonal number.\n\n    Octagonal numbers are numbers with the form 1+4+6+8+10+12+14+16+18+20.\n\n    >>> nth_octagonal_alt(1)\n    1\n    >>> nth_octagonal_alt(5)\n    24\n    >>> nth_octagonal_alt(10)\n    96\n    >>> nth_octagonal_alt(20)\n    384\n    >>> nth_octagonal_alt(100)\n    7896\n    \"\"\"\n    return (2 * n - 1) * (2 * n - 1) * (4 * n + 2) // 6\n\n\ndef nth_octagonal_recursive(n):\n    \"\"\"Return the nth octagonal number.\n\n    Octagonal numbers are numbers with the form 1+4+6+8+10+12+14+16+18+20.\n\n    >>> nth_octagonal_recursive(1)\n    1\n    >>> nth_octagonal_recursive(5)\n    24\n    >>> nth_octagonal_recursive(10)",
      -5.56640625
    ],
    [
      "def octagonal_number(n: int) -> int:\n    \"\"\"\n    A number is octagonal if the sum of the digits to the power of the\n    digits equals the number itself.\n\n    >>> octagonal_number(1)\n    1\n    >>> octagonal_number(2)\n    8\n    >>> octagonal_number(3)\n    21\n    >>> octagonal_number(4)\n    28\n    >>> octagonal_number(5)\n    36\n    >>> octagonal_number(10)\n    100\n    >>> octagonal_number(100)\n    10000\n    >>> octagonal_number(101)\n    10001\n    >>> octagonal_number(1234)\n    12340\n    \"\"\"\n    num = n\n    while True:\n        num += 1\n        octagonal_num = _is_octagonal(num)\n        if octagonal_num:\n            return octagonal_num\n\n\ndef _is_octagonal(n: int) -> int:\n    \"\"\"\n    Returns the octagonal number if the given number is octagonal,\n    else returns None.\n    \"\"\"\n    num = n\n    octagonal_num = 0\n    while num:\n        octagonal_num += (num % 10) ** (num % 10)\n        num //= 10\n    return octagonal_num if octagonal_num == n else None\n\n\ndef _test() -> None:\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    _test()",
      -5.640625
    ],
    [
      "import unittest\n\n\ndef nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return int((n * (5 + (1 + 24 * n) ** 0.5) / 12) + 0.5)\n\n\nclass TestSuite(unittest.TestCase):\n\n    def test_nth_octagonal_number(self):\n\n        self.assertEqual(nth_octagonal_number(1), 1)\n        self.assertEqual(nth_octagonal_number(2), 8)\n        self.assertEqual(nth_octagonal_number(3), 21)\n        self.assertEqual(nth_octagonal_number(4), 34)\n        self.assertEqual(nth_octagonal_number(5), 46)\n        self.assertEqual(nth_octagonal_number(6), 57)\n        self.assertEqual(nth_octagonal_number(7), 68)\n        self.assertEqual(nth_octagonal_number(8), 81)\n        self.assertEqual(nth_octagonal_number(9), 92)\n        self.assertEqual(nth_octagonal_number(10), 103)\n        self.assertEqual(nth_octagonal_number(11), 114)\n        self.assertEqual(nth_octagonal_number(12), 125)\n        self.assertEqual(nth_octagonal_number(13), 136)\n        self.assertEqual(nth_octagonal_number(14), 147)\n        self.assertEqual(nth_octagonal_number(15), 158)\n        self.assertEqual(nth_octagonal_number(16), 169)\n        self.assertEqual(nth_octagonal_number(17), 180)\n        self.assertEqual(nth_octagonal_number(18), 191)",
      -5.69921875
    ],
    [
      "from math import sqrt\n\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    Finds the nth octagonal number.\n    :param n: The index of the octagonal number.\n    :return: The nth octagonal number.\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(2)\n    2\n    >>> nth_octagonal_number(5)\n    15\n    >>> nth_octagonal_number(6)\n    21\n    \"\"\"\n    return round(1 + (n + 1) * (2 + (n + 1) * sqrt(2)) / 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.88671875
    ],
    [
      "from math import sqrt\n\n\n# Time complexity: O(sqrt(n))\ndef nth_octagonal_number(n):\n    \"\"\"Returns the nth octagonal number.\"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    i = 1\n    while n > 0:\n        i += 1\n        n -= 2 * (i - 1)\n    return i * (3 * i - 2)\n\n\n# Time complexity: O(sqrt(n))\ndef nth_octagonal_number_v2(n):\n    \"\"\"Returns the nth octagonal number.\"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    i = 1\n    while n > 0:\n        n -= 2 * i - 2\n        i += 1\n    return i * (3 * i - 2) - n\n\n\n# Time complexity: O(sqrt(n))\ndef nth_octagonal_number_v3(n):\n    \"\"\"Returns the nth octagonal number.\"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    i = 1\n    while n > 0:\n        n -= 2 * i - 2\n        i += 1\n    return i * (3 * i - 2) - n\n\n\n# Time complexity: O(sqrt(n))\ndef nth_octagonal_number_v4(n):\n    \"\"\"Returns the nth octagonal number.\"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    i = 1\n    while n > 0:\n        n -= 2 * i - 2\n        i += 1\n    return i * (3 * i - 2) - n\n\n\n# Time complexity: O(sqrt(n))\ndef nth_octagonal_number_v5(n):\n    \"\"\"Returns the nth octagonal number.\"\"\"\n    if n < 1:",
      -6.8125
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    Octagonal numbers are numbers of the form (n^2 + n) / 2.\n    \"\"\"\n    return int(((n**2 + n) / 2))\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 16):\n        print(i, nth_octagonal_number(i))",
      -6.92578125
    ],
    [
      "import math\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef nth_octagonal_number(n):\n    n -= 1\n    if n <= 0:\n        return 1\n\n    # The difference between two consecutive octagonal numbers is the sum of the first n odd integers.\n    # The first octagonal number is 1.\n    return n * (n * 4 - 6) + 2\n\n\n# Time complexity: O(log(n))\n# Space complexity: O(1)\ndef nth_octagonal_number_math(n):\n    n -= 1\n    if n <= 0:\n        return 1\n\n    # The nth octagonal number is equal to the nth triangular number + 1\n    # The nth triangular number is the sum of the first n integers, so it's equal to n * (n + 1) / 2\n    # The nth octagonal number is equal to n * (n + 1) * (4 * n - 6) / 6\n    return n * (n + 1) * (4 * n - 6) / 6 + 1\n\n\n# Time complexity: O(log(n))\n# Space complexity: O(1)\ndef nth_octagonal_number_math_simplified(n):\n    n -= 1\n    if n <= 0:\n        return 1\n\n    # The nth octagonal number is equal to the nth triangular number + 1\n    # The nth triangular number is the sum of the first n integers, so it's equal to n * (n + 1) / 2\n    # The nth octagonal number is equal to n * (n + 1) * (4 * n - 6) / 6\n    return n * n * (4 * n - 6) / 6 + 1\n\n\ndef nth_octagonal_number_math_simplified_2(n):\n    n -= 1\n    if n <= 0:\n        return 1\n\n    # The nth octagonal number is equal to the nth tri",
      -7.0546875
    ],
    [
      "import math\n\n\n# n is the order\ndef octagonal_number(n):\n    return int(round((math.sqrt(8 * n - 7) + 1) / 2))\n\n\n# n is the order\ndef octagonal_number2(n):\n    return int((math.sqrt(8 * n - 7) + 1) / 2)\n\n\n# n is the order\ndef octagonal_number3(n):\n    return int(math.ceil(math.sqrt(8 * n - 7) / 2))\n\n\n# n is the order\ndef octagonal_number4(n):\n    return int((math.sqrt(8 * n - 7) + 1) // 2)\n\n\n# n is the order\ndef octagonal_number5(n):\n    return int((math.sqrt(8 * n - 7) + 1) // 2)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print(octagonal_number(i), octagonal_number2(i), octagonal_number3(i), octagonal_number4(i), octagonal_number5(i))",
      -7.2421875
    ],
    [
      "def octagonal(n):\n    if n == 1:\n        return 1\n    return (3 * n * n - n) // 2\n\n\ndef nth_octagonal(n):\n    \"\"\"\n    :param n: int\n    :return: int\n\n    >>> nth_octagonal(1)\n    1\n    >>> nth_octagonal(5)\n    15\n    >>> nth_octagonal(20)\n    167\n    >>> nth_octagonal(21)\n    211\n    >>> nth_octagonal(22)\n    257\n    >>> nth_octagonal(23)\n    305\n    >>> nth_octagonal(24)\n    359\n    >>> nth_octagonal(25)\n    413\n    >>> nth_octagonal(26)\n    471\n    >>> nth_octagonal(27)\n    529\n    >>> nth_octagonal(28)\n    589\n    >>> nth_octagonal(29)\n    651\n    >>> nth_octagonal(30)\n    715\n    \"\"\"\n    if n <= 1:\n        return 1\n    for i in range(1, n):\n        if octagonal(i) == n:\n            return octagonal(i)\n        if octagonal(i) > n:\n            return octagonal(i - 1)",
      -8.1640625
    ],
    [
      "import math\n\n\ndef octagonal_number(n: int) -> int:\n    \"\"\"Find the nth octagonal number.\n\n    Args:\n        n (int): The nth number in the sequence.\n\n    Examples:\n        >>> octagonal_number(1)\n        1\n        >>> octagonal_number(2)\n        8\n        >>> octagonal_number(3)\n        28\n    \"\"\"\n    return n * ((3 * n) - 2)\n\n\ndef nth_octagonal_number(n: int) -> int:\n    \"\"\"Find the nth octagonal number.\n\n    Args:\n        n (int): The nth number in the sequence.\n\n    Examples:\n        >>> nth_octagonal_number(1)\n        1\n        >>> nth_octagonal_number(2)\n        8\n        >>> nth_octagonal_number(3)\n        28\n    \"\"\"\n    root = math.sqrt(1 + 24 * n)\n    return round(((root + 1) / 6) * (root + 2))\n\n\nif __name__ == \"__main__\":\n    print(octagonal_number(1))\n    print(octagonal_number(2))\n    print(octagonal_number(3))\n    print(octagonal_number(4))\n    print(octagonal_number(5))\n    print(octagonal_number(6))\n    print(octagonal_number(7))\n    print(octagonal_number(8))\n    print(octagonal_number(9))\n    print(octagonal_number(10))\n    print(octagonal_number(11))\n    print(octagonal_number(12))",
      -8.4375
    ],
    [
      "def nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    O(1)\n    \"\"\"\n    return int((n * (5 + 2 * n) ** 0.5) / 3)\n\n\nif __name__ == \"__main__\":\n    print(nth_octagonal_number(1))\n    print(nth_octagonal_number(2))\n    print(nth_octagonal_number(3))\n    print(nth_octagonal_number(4))\n    print(nth_octagonal_number(5))",
      -8.4609375
    ],
    [
      "import math\n\n\n# recursive\ndef octagonal(n):\n    # base case\n    if n == 1:\n        return 1\n\n    return 1 + 4 * octagonal(n - 1)\n\n\n# iterative\ndef octagonal_iter(n):\n    num = 0\n    count = 0\n\n    while count < n:\n        num += 1\n        count = (num * (5 + (1 + 24 * num))) // 6\n\n    return num\n\n\n# recursive\ndef octagonal_sqrt(n):\n    # base case\n    if n == 1:\n        return 1\n\n    return 1 + 4 * octagonal_sqrt(int(math.sqrt(24 * n - 7) + 1) // 2)\n\n\n# iterative\ndef octagonal_sqrt_iter(n):\n    num = 0\n    count = 0\n\n    while count < n:\n        num += 1\n        count = (num * (5 + (1 + 24 * num))) // 6\n\n    return num\n\n\n# iterative\ndef octagonal_sqrt_iter_2(n):\n    num = 0\n    count = 0\n\n    while count < n:\n        num += 1\n        count = (num * (5 + (1 + 24 * num))) // 6\n\n    return num\n\n\nif __name__ == \"__main__\":\n    # n = int(input(\"Enter n: \"))\n    n = 100\n\n    print(\"n:\", n)\n    print(\"octagonal(n):\", octagonal(n))\n    print(\"octagonal_iter(n):\", octagonal_iter(n))\n    print(\"octagonal_sqrt(n):\", octagonal_sqrt(n))\n    print(\"octagonal_sqrt_iter(n):\", octagonal_sqrt_iter(n))\n    print(\"octagonal_sqrt_iter_2(n):\", octagonal_sqrt_iter_2(n))",
      -8.6015625
    ],
    [
      "def octagonal_number(n: int) -> int:\n    \"\"\"\n    Octagonal number is a number with the form (2n^2 - 3n + 1).\n    >>> octagonal_number(1)\n    1\n    >>> octagonal_number(10)\n    120\n    >>> octagonal_number(20)\n    440\n    >>> octagonal_number(100)\n    3600\n    >>> octagonal_number(500)\n    12000\n    >>> octagonal_number(1000)\n    25200\n    \"\"\"\n    return int((2 * n ** 2 - 3 * n + 1) ** 0.5)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -9.34375
    ],
    [
      "import math\n\n\ndef nth_octagonal_number(n):\n    return int((math.sqrt(8 * n + 1) - 1) / 2)\n\n\ndef test_octagonal_number():\n    \"\"\"\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(2)\n    3\n    >>> nth_octagonal_number(3)\n    6\n    >>> nth_octagonal_number(4)\n    10\n    >>> nth_octagonal_number(5)\n    15\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
      -10.3515625
    ],
    [
      "def nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    Octagonal numbers are of the form (n(3n-1))/2.\n    Therefore, we can find the nth octagonal number by\n    generating all octagonal numbers and returning the\n    nth one.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n\n    # Initialise the lower and upper bounds of the\n    # octagonal number search\n    lower_bound = 1\n    upper_bound = 8\n\n    # Loop until we find the nth octagonal number\n    while lower_bound <= n:\n        # Check if the current upper bound is the\n        # nth octagonal number. If so, return it.\n        if upper_bound == n:\n            return upper_bound\n\n        # Otherwise, generate the next octagonal number\n        # and continue the search\n        lower_bound += 1\n        octagonal_number = (3 * upper_bound - 1) / 2\n        upper_bound += 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(nth_octagonal_number(2))\n    print(nth_octagonal_number(1))\n    print(nth_octagonal_number(100))\n    print(nth_octagonal_number(0))",
      -11.0546875
    ],
    [
      "def octagonal_number(n):\n\t\"\"\"\n\tReturns the nth octagonal number.\n\t\"\"\"\n\n\tdef is_octagonal(n):\n\t\t\"\"\"\n\t\tReturns True if n is octagonal, False otherwise.\n\t\t\"\"\"\n\t\tsqrt_n = n**(1/2)\n\t\ta = 1 + (sqrt_n + 1) / 2\n\t\tb = 1 - (sqrt_n + 1) / 2\n\t\treturn a == int(a) or b == int(b)\n\n\tcount = 0\n\tnum = 1\n\twhile count < n:\n\t\tnum += 1\n\t\tif is_octagonal(num):\n\t\t\tcount += 1\n\n\treturn num\n\ndef main():\n\tprint(\"100th octagonal number is: \" + str(octagonal_number(100)))\n\nif __name__ == '__main__':\n\tmain()",
      -11.3203125
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"\n    :param n: int\n    :return: int\n\n    - Octagonal numbers are like an octagon with a 2D grid.\n    - The nth octagonal number is the number of elements in the nth row of the 2D grid.\n    - The first 5 octagonal numbers are: 1, 2, 3, 6, 10, ...\n    \"\"\"\n    return int((n * (2 * n - 1)) ** 0.5)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 20):\n        print(i, nth_octagonal_number(i))",
      -11.5
    ],
    [
      "import math\n\n\ndef nth_octagonal(num):\n    return int((math.sqrt(8 * num - 7) + 1) / 2)\n\n\ndef test_octagonal(num):\n    assert nth_octagonal(num) == num\n\n\ndef main():\n    test_octagonal(1)\n    test_octagonal(2)\n    test_octagonal(3)\n    test_octagonal(4)\n    test_octagonal(5)\n    test_octagonal(6)\n    test_octagonal(7)\n    test_octagonal(8)\n    test_octagonal(9)\n    test_octagonal(10)\n    test_octagonal(11)\n    test_octagonal(12)\n    test_octagonal(13)\n    test_octagonal(14)\n    test_octagonal(15)\n    test_octagonal(16)\n    test_octagonal(17)\n    test_octagonal(18)\n    test_octagonal(19)\n    test_octagonal(20)\n    test_octagonal(21)\n    test_octagonal(22)\n    test_octagonal(23)\n    test_octagonal(24)\n    test_octagonal(25)\n    test_octagonal(26)\n    test_octagonal(27)\n    test_octagonal(28)\n    test_octagonal(29)\n    test_octagonal(30)\n    test_octagonal(31)\n    test_octagonal(32)\n    test_octagonal(33)\n    test_octagonal(34)\n    test_octagonal(35)\n    test_octagonal(36)\n    test_octagonal(37)\n    test_octagonal(38)\n    test_octagonal(39)\n    test_octagonal(40)\n    test_octagonal(41",
      -12.640625
    ],
    [
      "def nth_octagonal_number(n):\n    \"\"\"Returns the nth octagonal number.\n\n    >>> nth_octagonal_number(1)\n    1\n    >>> nth_octagonal_number(5)\n    15\n    >>> nth_octagonal_number(7)\n    28\n    >>> nth_octagonal_number(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_octagonal_number(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_octagonal_number(0.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_octagonal_number(3.2)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_octagonal_number(8.2)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_octagonal_number(dict())\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> nth_octagonal_number(None)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    \"\"\"\n\n    if type(n) is not int or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    if n == 1:\n        return 1\n\n    # n is odd\n    if n % 2 == 1:\n        n -= 1\n        n = 4 * n + 6\n        return n\n\n    # n is even\n    n = 4 * n\n    n += 6\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -12.640625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}