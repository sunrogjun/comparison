{
  "problem": {
    "task_id": "MBPP/32",
    "prompt": "Write a python function to find the largest prime factor of a given number.",
    "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
    "test_list": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ],
    "challenge_test_list": [],
    "problem_id": 21
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def largest_prime_factor(n):\n    if n <= 2:\n        return n\n    largest = 1\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest = i\n            n //= i\n    if n > 2:\n        largest = n\n    return largest\n\nprint(largest_prime_factor(600851475143))",
      13.546875
    ],
    [
      "def prime_factors(n: int) -> int:\n    \"\"\"\n    Return the largest prime factor of a given number.\n\n    >>> prime_factors(13195)\n    29\n    >>> prime_factors(10)\n    5\n    >>> prime_factors(17)\n    17\n    \"\"\"\n    p: int = 2\n\n    while n > 1:\n        if n % p == 0:\n            n /= p\n        else:\n            p += 1\n    return int(p)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.3671875
    ],
    [
      "def prime_factors(num):\n    max_prime = 0\n    if num == 0 or num == 1:\n        return num\n    while num % 2 == 0:\n        max_prime = 2\n        num = num / 2\n    for i in range(3, int(num**0.5) + 1, 2):\n        while num % i == 0:\n            max_prime = i\n            num = num / i\n    if num > 2:\n        max_prime = num\n    return max_prime\n\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The largest prime factor of {} is {}\".format(num, prime_factors(num)))",
      8.375
    ],
    [
      "def prime_factors(number):\n    \"\"\"Returns the largest prime factor of the number.\n\n    Args:\n        number (int): the number to find the largest prime factor.\n\n    Returns:\n        int: the largest prime factor.\n    \"\"\"\n    if number <= 1:\n        return number\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(i)\n            number = number / i\n    if number > 2:\n        prime_factors.append(int(number))\n    return max(prime_factors)\n\n\nprint(prime_factors(600851475143))",
      8.25
    ],
    [
      "import math\n\n\ndef is_prime(num):\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_factor(num):\n    for i in range(num, 1, -1):\n        if num % i == 0 and is_prime(i):\n            return i\n\n\nprint(largest_prime_factor(10))\nprint(largest_prime_factor(17))\nprint(largest_prime_factor(20))\nprint(largest_prime_factor(21))\nprint(largest_prime_factor(100))",
      8.1875
    ],
    [
      "from math import sqrt\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i <= sqrt(n):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n\n    return True\n\n\ndef largest_prime_factor(n):\n    for i in range(n, 2, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(largest_prime_factor(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      7.5859375
    ],
    [
      "def prime_factor(n):\n    largest_prime = 0\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime\n\n\ndef main():\n    print(prime_factor(100))\n    print(prime_factor(12))\n    print(prime_factor(15))\n    print(prime_factor(91))\n    print(prime_factor(1000))\n\n\nif __name__ == \"__main__\":\n    main()",
      7.546875
    ],
    [
      "def prime_factor(number):\n    prime_factors = []\n\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number // 2\n\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(i)\n            number = number / i\n\n    if number > 2:\n        prime_factors.append(int(number))\n\n    return max(prime_factors)\n\n\ndef main():\n    number = 13195\n    print(prime_factor(number))\n\n\nif __name__ == \"__main__\":\n    main()",
      6.8828125
    ],
    [
      "def largest_prime_factor(number):\n    if number <= 1:\n        return number\n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n    return number\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    largest_prime = largest_prime_factor(number)\n    print(f\"The largest prime factor of {number} is {largest_prime}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      6.65234375
    ],
    [
      "def largest_prime_factor(number):\n    for i in range(number // 2, 1, -1):\n        if number % i == 0:\n            if is_prime(i):\n                return i\n\n\ndef is_prime(number):\n    if number <= 1:\n        return False\n    elif number <= 3:\n        return True\n    else:\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        else:\n            return True\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    result = largest_prime_factor(number)\n    print(f\"The largest prime factor of {number} is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      5.9140625
    ],
    [
      "import math\n\n\ndef largest_prime_factor(number: int) -> int:\n    \"\"\"\n    >>> largest_prime_factor(13195)\n    29\n    \"\"\"\n    i: int = 2\n    largest_factor: int = 0\n\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            largest_factor = i\n            number //= i\n    if largest_factor == 0:\n        largest_factor = number\n\n    return largest_factor\n\n\ndef largest_prime_factor_with_sqrt(number: int) -> int:\n    \"\"\"\n    >>> largest_prime_factor_with_sqrt(13195)\n    29\n    \"\"\"\n    largest_factor: int = 0\n    sqrt_number: float = math.sqrt(number)\n    i: int = 2\n\n    while i <= sqrt_number:\n        if number % i == 0:\n            largest_factor = i\n            number //= i\n            sqrt_number = math.sqrt(number)\n        else:\n            i += 1\n    if largest_factor == 0:\n        largest_factor = number\n\n    return largest_factor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.1328125
    ],
    [
      "def prime_factor(number: int) -> int:\n    \"\"\"\n    Return the largest prime factor of a number.\n    >>> prime_factor(13195)\n    29\n    >>> prime_factor(10)\n    5\n    >>> prime_factor(17)\n    17\n    >>> prime_factor(3.4)\n    3\n    >>> prime_factor(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be greater than zero\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Input number should be greater than zero\")\n    prime_factor = 1\n    while number > 1:\n        for i in range(2, number + 1):\n            if number % i == 0:\n                prime_factor = i\n                break\n        number = number / prime_factor\n    return int(prime_factor)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.48046875
    ],
    [
      "def largest_prime_factor(num):\n    prime_factors = []\n    while num % 2 == 0:\n        prime_factors.append(2)\n        num = num // 2\n\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        while num % i == 0:\n            prime_factors.append(i)\n            num = num // i\n    if num > 2:\n        prime_factors.append(num)\n\n    return max(prime_factors)\n\n\nprint(largest_prime_factor(13195))",
      3.80078125
    ],
    [
      "def largest_prime_factor(number):\n    prime_factors = []\n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            prime_factors.append(i)\n    if number > 1:\n        prime_factors.append(number)\n    return max(prime_factors)\n\nprint(largest_prime_factor(600851475143))",
      3.552734375
    ],
    [
      "def largest_prime_factor(num: int) -> int:\n    \"\"\"\n    Return the largest prime factor of a given number.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(20)\n    5\n    >>> largest_prime_factor(1776)\n    17\n    >>> largest_prime_factor(500)\n    25\n    >>> largest_prime_factor(1)\n    1\n    \"\"\"\n    i = 2\n    while i * i <= num:\n        if num % i:\n            i += 1\n        else:\n            num //= i\n    return num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.275390625
    ],
    [
      "def largest_prime_factor(n):\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            prime_factors.append(i)\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors[-1]\n\n\nprint(largest_prime_factor(13195))",
      3.24609375
    ],
    [
      "def largest_prime_factor(num):\n    largest_prime_factor = 0\n    for i in range(2, num):\n        if num % i == 0:\n            if is_prime(i):\n                largest_prime_factor = i\n    return largest_prime_factor\n\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True",
      3.064453125
    ],
    [
      "def largest_prime_factor(number: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given number.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(20)\n    5\n    >>> largest_prime_factor(17)\n    17\n    >>> largest_prime_factor(1641)\n    41\n    \"\"\"\n    prime_factor = 1\n\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            prime_factor = i\n\n            while number % i == 0:\n                number = number / i\n\n            if number == 1:\n                return prime_factor\n\n    if prime_factor == 1:\n        return number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.859375
    ],
    [
      "def prime_factor(num):\n    prime = 2\n    while prime * prime <= num:\n        if num % prime:\n            prime += 1\n        else:\n            num //= prime\n    return num\n\n\nif __name__ == \"__main__\":\n    print(prime_factor(13195))",
      2.8046875
    ],
    [
      "def largest_prime_factor(number):\n    largest = 0\n    for i in range(2, number):\n        if number % i == 0:\n            largest = i\n            break\n    return largest\n\n\nnumber = int(input(\"Enter the number: \"))\nprint(largest_prime_factor(number))",
      2.345703125
    ],
    [
      "def prime_factor(num):\n    prime_list = []\n    for i in range(2, num+1):\n        if num % i == 0:\n            prime_list.append(i)\n            num = num / i\n            i = 2\n    return prime_list[-1]\n\n\nprint(prime_factor(600851475143))",
      2.2734375
    ],
    [
      "def prime_factor(n):\n    primes = []\n    for i in range(2, n):\n        if n % i == 0:\n            primes.append(i)\n    return primes[-1]\n\n\ndef prime_factor2(n):\n    primes = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                primes.append(i)\n                n = n / i\n                break\n    return primes[-1]\n\n\ndef prime_factor3(n):\n    primes = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                primes.append(i)\n                n = n / i\n                break\n    return primes[-1]\n\n\ndef prime_factor4(n):\n    primes = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                primes.append(i)\n                n = n / i\n                break\n    return primes[-1]\n\n\ndef prime_factor5(n):\n    primes = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                primes.append(i)\n                n = n / i\n                break\n    return primes[-1]",
      2.06640625
    ],
    [
      "def prime_factor(number):\n    \"\"\"\n    Return the largest prime factor of a given number.\n    \"\"\"\n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n    return number\n\n\nif __name__ == \"__main__\":\n    print(prime_factor(1000000007))",
      1.9775390625
    ],
    [
      "def largest_prime_factor(number):\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(i)\n            number = number / i\n\n    if number > 2:\n        prime_factors.append(int(number))\n\n    return max(prime_factors)\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(\"Largest prime factor is:\", largest_prime_factor(number))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.8994140625
    ],
    [
      "def prime_factor(num):\n    prime_factors = []\n    for i in range(2, num+1):\n        if num % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n\n\nnum = int(input(\"Enter a number: \"))\nprint(\"Largest prime factor of {}: {}\".format(num, prime_factor(num)[-1]))",
      1.5693359375
    ],
    [
      "def prime_factor(num):\n    max_prime = 0\n    for i in range(2, num):\n        if num % i == 0:\n            max_prime = i\n            num = num / i\n            break\n    return max_prime\n\n\ndef prime_factor_v2(num):\n    max_prime = 0\n    for i in range(2, num):\n        if num % i == 0:\n            while num % i == 0:\n                num /= i\n            max_prime = i\n    return max_prime\n\n\nif __name__ == \"__main__\":\n    num = 600851475143\n    result = prime_factor_v2(num)\n    print(result)",
      1.43359375
    ],
    [
      "def prime_factor(num):\n    \"\"\"\n    This function takes a number and returns the largest prime factor of the number.\n    \"\"\"\n    if num < 2:\n        return num\n    else:\n        while num % 2 == 0:\n            num = num / 2\n        if num == 1:\n            return 2\n        else:\n            for i in range(3, int(num**0.5)+1, 2):\n                while num % i == 0:\n                    num = num / i\n                if num == 1:\n                    return i\n            return num\n\n\ndef prime_factor_list(num):\n    \"\"\"\n    This function takes a number and returns the list of prime factors of the number.\n    \"\"\"\n    prime_factors = []\n    if num < 2:\n        prime_factors.append(num)\n        return prime_factors\n    else:\n        while num % 2 == 0:\n            num = num / 2\n        if num == 1:\n            prime_factors.append(2)\n            return prime_factors\n        else:\n            for i in range(3, int(num**0.5)+1, 2):\n                while num % i == 0:\n                    num = num / i\n                    prime_factors.append(i)\n                if num == 1:\n                    return prime_factors\n            prime_factors.append(num)\n            return prime_factors\n\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number: \"))\n    print(prime_factor(num))\n    print(prime_factor_list(num))",
      1.376953125
    ],
    [
      "def largest_prime_factor(num):\n    prime_factors = []\n\n    while num % 2 == 0:\n        prime_factors.append(2)\n        num = num / 2\n\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        while num % i == 0:\n            prime_factors.append(i)\n            num = num / i\n\n    if num > 2:\n        prime_factors.append(int(num))\n\n    return max(prime_factors)\n\n\nif __name__ == \"__main__\":\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(10) == 5",
      1.26171875
    ],
    [
      "def largest_prime_factor(n):\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            if is_prime(i):\n                return i\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(largest_prime_factor(n))\n\nif __name__ == \"__main__\":\n    main()",
      1.0849609375
    ],
    [
      "def largest_prime_factor(num):\n    prime_factor = 1\n    while prime_factor * prime_factor <= num:\n        if num % prime_factor == 0:\n            num //= prime_factor\n        else:\n            prime_factor += 1\n    return prime_factor\n\n\nprint(largest_prime_factor(13195))",
      1.00390625
    ],
    [
      "import math\n\n\ndef prime_factor(n):\n    if n < 2:\n        return n\n\n    while n % 2 == 0:\n        n = n / 2\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n / i\n\n    if n > 2:\n        return n\n    else:\n        return int(n)\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"The largest prime factor of the number is: \", prime_factor(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.9091796875
    ],
    [
      "def largest_prime(num):\n    if num < 2:\n        return 0\n    else:\n        prime = 2\n        while prime <= num:\n            if num % prime == 0:\n                num = num / prime\n                return prime\n            else:\n                prime += 1\n\n\nprint(largest_prime(100))",
      0.80322265625
    ],
    [
      "def prime_factor(num):\n    \"\"\"\n    Returns the largest prime factor of a number.\n\n    >>> prime_factor(13195)\n    29\n    >>> prime_factor(10)\n    5\n    >>> prime_factor(3)\n    3\n    \"\"\"\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return prime_factor(num // i)\n    return num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.73095703125
    ],
    [
      "def prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\nif __name__ == \"__main__\":\n    print(prime_factor(600851475143))",
      0.72216796875
    ],
    [
      "def prime_factor(n):\n    while n%2 == 0:\n        n = n/2\n    for i in range(3,int(n**0.5)+1,2):\n        while n%i==0:\n            n = n/i\n    if n>2:\n        print(int(n))\n    else:\n        print(2)\n\nprime_factor(600851475143)",
      0.54052734375
    ],
    [
      "def largest_prime_factor(n):\n    largest = 0\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n            break\n    return largest\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(\"Largest prime factor of {} is {}\".format(num, largest_prime_factor(num)))",
      0.239501953125
    ],
    [
      "def largest_prime_factor(num):\n    i = 2\n    while i * i <= num:\n        if num % i:\n            i += 1\n        else:\n            num //= i\n    return num\n\n\nprint(largest_prime_factor(13195))",
      0.18896484375
    ],
    [
      "def largest_prime_factor(num):\n    largest = 0\n    for i in range(2, num):\n        if num % i == 0:\n            largest = i\n            break\n    return largest\n\n\nprint(largest_prime_factor(13195))",
      0.1478271484375
    ],
    [
      "def largest_prime_factor(n):\n    prime = 2\n    while prime * prime <= n:\n        if n % prime == 0:\n            n //= prime\n        else:\n            prime += 1\n    return n\n\n\ndef test_largest_prime_factor():\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(10) == 5",
      0.1365966796875
    ],
    [
      "def largest_prime_factor(number):\n    prime_factors = []\n    i = 2\n    while i <= number:\n        if number % i == 0:\n            prime_factors.append(i)\n            number = number / i\n            i = 2\n        else:\n            i += 1\n    return max(prime_factors)\n\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    print(\"The largest prime factor of {} is {}\".format(number, largest_prime_factor(number)))",
      0.0706787109375
    ],
    [
      "def prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(prime_factors(600851475143))",
      0.016632080078125
    ],
    [
      "def prime_factor(num: int) -> int:\n    \"\"\"\n    Returns the largest prime factor of a given number.\n    >>> prime_factor(13195)\n    29\n    >>> prime_factor(10)\n    5\n    >>> prime_factor(17)\n    17\n    \"\"\"\n    # Step 1: Get the largest factor of the number\n    # Step 2: Check if the largest factor is prime\n    # Step 3: If the largest factor is prime, return it\n    # Step 4: If the largest factor is not prime, check for the next largest factor\n    largest_factor = num\n    while num % largest_factor > 0:\n        largest_factor -= 1\n\n    while not is_prime(largest_factor):\n        largest_factor -= 1\n\n    return largest_factor\n\n\ndef is_prime(num: int) -> bool:\n    \"\"\"\n    Returns True if the number is prime\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    # Step 1: Check if the number is equal to 1\n    # Step 2: If the number is equal to 1, return False\n    # Step 3: If the number is not equal to 1, check if the number is divisible by 2\n    # Step 4: If the number is divisible by 2, return False\n    # Step 5: If the number is not divisible by 2, start checking the number with 3\n    # Step 6: If the number is not divisible by 3, continue the process till square root of the number\n    # Step 7: If the number is divisible by any number between 3 and square root of the number, return False\n    # Step 8: If the number is not divisible by any number between 3 and square root of the number, return True\n    if num == 1:\n        return False\n\n    if num % 2 == 0:\n        return False\n\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False",
      -0.0179901123046875
    ],
    [
      "def largest_prime_factor(n):\n    i = 2\n    while i*i < n:\n        while n % i == 0:\n            n //= i\n        i += 1\n    return n\n\n\nprint(largest_prime_factor(13195))",
      -0.0355224609375
    ],
    [
      "def largest_prime_factor(num):\n    i = 2\n    while i * i <= num:\n        if num % i:\n            i += 1\n        else:\n            num //= i\n    return num\n\nprint(largest_prime_factor(13195))",
      -0.042816162109375
    ],
    [
      "import math\n\ndef largest_prime_factor(num):\n    \"\"\"\n    Return the largest prime factor of a number\n    \"\"\"\n    if num < 2:\n        return num\n\n    while num % 2 == 0:\n        num //= 2\n\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            num //= i\n\n    return num",
      -0.0994873046875
    ],
    [
      "def prime_factor(num: int) -> int:\n    \"\"\"\n    Returns the largest prime factor of a given number.\n    >>> prime_factor(13195)\n    29\n    >>> prime_factor(10)\n    5\n    >>> prime_factor(17)\n    17\n    \"\"\"\n    # prime numbers are greater than 1\n    if num < 2:\n        return num\n\n    # make sure the number is odd\n    while num % 2 == 0:\n        num = num // 2\n\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        while num % i == 0:\n            num = num // i\n        if num == 1:\n            return i\n\n    return num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.456298828125
    ],
    [
      "def largest_prime_factor(n):\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n    return max(prime_factors)\n\n\nprint(largest_prime_factor(13195))",
      -0.54345703125
    ],
    [
      "def largest_prime_factor(number):\n    prime_factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            prime_factors.append(i)\n\n    return prime_factors[-1]\n\n\nprint(largest_prime_factor(13195))",
      -0.54345703125
    ],
    [
      "from math import sqrt\n\n\ndef prime_factors(n):\n    if n <= 2:\n        return n\n    if n % 2 == 0:\n        return 2\n\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef largest_prime_factor(n):\n    largest = 1\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    while n % 3 == 0:\n        largest = 3\n        n //= 3\n    while n % 5 == 0:\n        largest = 5\n        n //= 5\n    while n % 7 == 0:\n        largest = 7\n        n //= 7\n    while n > 1:\n        p = prime_factors(n)\n        if p > largest:\n            largest = p\n        n //= p\n    return largest\n\n\nprint(largest_prime_factor(600851475143))",
      -0.54345703125
    ],
    [
      "def largest_prime_factor(num):\n    i = 2\n    while i * i <= num:\n        if num % i:\n            i += 1\n        else:\n            num //= i\n    return num\n\n\nif __name__ == \"__main__\":\n    print(largest_prime_factor(600851475143))",
      -0.544921875
    ],
    [
      "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    print(prime_factors(13195))",
      -0.66162109375
    ],
    [
      "from math import sqrt\n\ndef largest_prime_factor(num):\n    \"\"\"\n    Finds the largest prime factor of a given number.\n    :param num: number\n    :return: largest prime factor\n    \"\"\"\n    if num <= 1:\n        return num\n    i = 2\n    while i <= sqrt(num):\n        if num % i == 0:\n            break\n        i += 1\n    return i\n\n\nif __name__ == \"__main__\":\n    num = 600851475143\n    print(largest_prime_factor(num))",
      -0.6845703125
    ],
    [
      "def largest_prime_factor(n):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    prime = 2\n    while prime <= n:\n        if n % prime == 0:\n            n = n / prime\n            if n == 1:\n                return prime\n        else:\n            prime += 1\n    return prime\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(largest_prime_factor(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.72509765625
    ],
    [
      "def largest_prime_factor(number):\n    largest_prime_factor = 0\n    while number % 2 == 0:\n        largest_prime_factor = 2\n        number = number / 2\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        while number % i == 0:\n            largest_prime_factor = i\n            number = number / i\n    if number > 2:\n        largest_prime_factor = number\n    return largest_prime_factor\n\n\nprint(largest_prime_factor(600851475143))",
      -0.85595703125
    ],
    [
      "def largest_prime_factor(number):\n    prime_factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            prime_factors.append(i)\n    return prime_factors[-1]\n\n\nprint(largest_prime_factor(13195))",
      -0.85595703125
    ],
    [
      "def prime_factor(number):\n    prime_factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            prime_factors.append(i)\n    return max(prime_factors)\n\n\nprint(prime_factor(600851475143))",
      -0.85693359375
    ],
    [
      "def largest_prime_factor(number):\n    \"\"\"\n    This function takes in a number and returns the largest prime factor.\n    :param number:\n    :return:\n    \"\"\"\n    if number <= 1:\n        return number\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number /= 2\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(i)\n            number /= i\n    if number > 2:\n        prime_factors.append(int(number))\n    return max(prime_factors)\n\n\nprint(largest_prime_factor(13195))",
      -0.85693359375
    ],
    [
      "def largest_prime_factor(n):\n    if n <= 1:\n        return n\n    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n / 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n / i\n    if n > 2:\n        prime_factors.append(n)\n    return max(prime_factors)\n\n\nif __name__ == \"__main__\":\n    print(largest_prime_factor(1000))",
      -0.85693359375
    ],
    [
      "def largest_prime_factor(n: int) -> int:\n    \"\"\"\n    >>> largest_prime_factor(13195)\n    29\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def largest_prime_factor(number):\n    for i in range(2, number):\n        if number % i == 0:\n            number = number / i\n            return i\n\n\nprint(largest_prime_factor(600851475143))",
      -0.85693359375
    ],
    [
      "def prime_factor(num):\n    if num < 2:\n        return num\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return i\n\nprint(prime_factor(15))",
      -0.85693359375
    ],
    [
      "def prime_factor(number):\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number = number / 2\n\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(i)\n            number = number / i\n    if number > 2:\n        prime_factors.append(int(number))\n\n    return max(prime_factors)\n\n\nprint(prime_factor(100))\nprint(prime_factor(12))\nprint(prime_factor(13))",
      -0.85693359375
    ],
    [
      "import math\n\ndef prime_factors(num):\n    prime_list = []\n    while num % 2 == 0:\n        prime_list.append(2)\n        num = num/2\n    for i in range(3,int(math.sqrt(num))+1,2):\n        while num % i== 0:\n            prime_list.append(i)\n            num = num/i\n    if num > 2:\n        prime_list.append(num)\n    return prime_list\n\nprint(prime_factors(600851475143))",
      -0.85693359375
    ],
    [
      "def prime_factors(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef largest_prime_factor(number):\n    factors = prime_factors(number)\n    return max(factors)",
      -0.85693359375
    ],
    [
      "def prime_factor(num):\n    prime_factors = []\n    for i in range(2, num + 1):\n        if num % i == 0:\n            prime_factors.append(i)\n            num /= i\n            i -= 1\n    return max(prime_factors)\n\n\nprint(prime_factor(13195))",
      -0.85791015625
    ],
    [
      "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\nif __name__ == \"__main__\":\n    print(largest_prime_factor(13195))",
      -0.85791015625
    ],
    [
      "from math import sqrt\n\n\ndef prime_factors(n):\n    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n / i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n\n\ndef largest_prime_factor(n):\n    prime_factors_list = prime_factors(n)\n    return max(prime_factors_list)\n\n\ndef main():\n    n = int(input(\"Enter the number to find the largest prime factor: \"))\n    print(largest_prime_factor(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def prime_factor(n):\n    prime = 2\n    while prime * prime <= n:\n        while n % prime == 0:\n            n = n / prime\n        prime = prime + 1\n    return n\n\n\ndef main():\n    n = int(input(\"Enter the number: \"))\n    print(prime_factor(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def prime_factor(num):\n    prime_factors = []\n    for i in range(2, num+1):\n        while num % i == 0:\n            prime_factors.append(i)\n            num /= i\n    return max(prime_factors)\n\n\nnum = int(input(\"Enter a number: \"))\nprint(prime_factor(num))\n\n\n\"\"\"\nTime complexity: O(log(n))\nSpace complexity: O(1)\n\nEnter a number: 1000\n100\n\"\"\"",
      -0.8583984375
    ],
    [
      "def prime_factor(number):\n    if number <= 0:\n        raise ValueError(\"Number must be positive\")\n    if number == 1:\n        return 1\n\n    prime_factors = []\n    while number % 2 == 0:\n        prime_factors.append(2)\n        number /= 2\n\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        while number % i == 0:\n            prime_factors.append(i)\n            number /= i\n    if number > 2:\n        prime_factors.append(int(number))\n    return max(prime_factors)\n\n\nif __name__ == \"__main__\":\n    print(prime_factor(600851475143))",
      -0.8583984375
    ],
    [
      "def largest_prime_factor(n):\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        prime_factors.append(n)\n    return max(prime_factors)\n\n\nprint(largest_prime_factor(13195))",
      -0.8583984375
    ],
    [
      "def largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of a number.\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\ndef main():\n    \"\"\"\n    Print the largest prime factor of a number.\n    \"\"\"\n    n = 600851475143\n    print(largest_prime_factor(n))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def prime_factor(n):\n    # Create a list of primes\n    primes = []\n    for i in range(2, n + 1):\n        # Check if i is a multiple of primes\n        if all(i % prime != 0 for prime in primes):\n            primes.append(i)\n\n    # Check if primes are factors of n\n    for prime in primes:\n        if n % prime == 0:\n            return prime\n\n    return 1",
      -0.85888671875
    ],
    [
      "def prime_factor(num):\n    for i in range(2, num):\n        if num % i == 0:\n            if is_prime(i):\n                return i\n\n\ndef is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef main():\n    val = int(input(\"Enter a number: \"))\n    print(f\"Largest prime factor of {val} is {prime_factor(val)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.86083984375
    ],
    [
      "def largestPrimeFactor(num):\n    largest_prime_factor = 0\n    for i in range(2, num):\n        if num % i == 0:\n            is_prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    is_prime = False\n            if is_prime:\n                largest_prime_factor = i\n    return largest_prime_factor\n\nlargestPrimeFactor(13195)",
      -0.86083984375
    ],
    [
      "def prime_factors(number):\n    prime_factors = []\n    for i in range(2, number + 1):\n        if number % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n\n\ndef largest_prime_factor(number):\n    prime_factors = prime_factors(number)\n    return max(prime_factors)\n\n\nprint(largest_prime_factor(2))\nprint(largest_prime_factor(10))\nprint(largest_prime_factor(17))\nprint(largest_prime_factor(15))",
      -0.86083984375
    ],
    [
      "def prime_factor(num):\n    if num < 2:\n        return num\n\n    prime = 2\n    while num % prime != 0:\n        prime += 1\n\n    return prime\n\n\ndef largest_prime_factor(num):\n    if num < 2:\n        return num\n\n    factor = 2\n    largest = 0\n    while factor * factor <= num:\n        while num % factor == 0:\n            num = num / factor\n            largest = factor\n        factor += 1\n\n    if num > 1:\n        largest = num\n\n    return largest\n\n\ndef test_prime_factor(num, expected_result):\n    result = prime_factor(num)\n    if result != expected_result:\n        print(\"prime_factor(%d) returned %d but expected %d\" % (num, result, expected_result))\n    else:\n        print(\"prime_factor(%d) returned %d\" % (num, result))\n\n\ndef test_largest_prime_factor(num, expected_result):\n    result = largest_prime_factor(num)\n    if result != expected_result:\n        print(\"largest_prime_factor(%d) returned %d but expected %d\" % (num, result, expected_result))\n    else:\n        print(\"largest_prime_factor(%d) returned %d\" % (num, result))\n\n\nprint(\"Testing prime_factor\")\ntest_prime_factor(13, 13)\ntest_prime_factor(15, 5)\ntest_prime_factor(20, 5)\ntest_prime_factor(19, 19)\ntest_prime_factor(100, 5)\ntest_prime_factor(101, 101)\n\nprint(\"Testing largest_prime_factor\")\ntest_largest_prime_factor(13, 13)\ntest_largest_prime_factor(15, 5)\ntest_largest_prime_factor(20, 5)\ntest_largest_prime_factor(19, 19)\ntest_largest_prime_factor(10",
      -1.294921875
    ],
    [
      "from math import sqrt\n\n\ndef is_prime(num: int) -> bool:\n    \"\"\"\n    Check if number is prime\n    >>> is_prime(19)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n\n    for i in range(3, int(sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_factor(num: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given number\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(10)\n    5\n    \"\"\"\n    largest_factor = 1\n    while num % 2 == 0:\n        largest_factor = 2\n        num = num // 2\n    for i in range(3, int(sqrt(num)) + 1, 2):\n        while num % i == 0:\n            largest_factor = i\n            num = num // i\n    if num > 2 and is_prime(num):\n        largest_factor = num\n    return largest_factor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.326171875
    ],
    [
      "def largest_prime_factor(num):\n    \"\"\"\n    Return the largest prime factor of a given number.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(10)\n    5\n    >>> largest_prime_factor(17)\n    17\n    \"\"\"\n    prime_factors = []\n    while num > 1:\n        for i in range(2, num + 1):\n            if num % i == 0:\n                prime_factors.append(i)\n                num = num // i\n                break\n    return max(prime_factors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.5400390625
    ],
    [
      "def prime_factor(num):\n    \"\"\"\n    Return the largest prime factor of a given number.\n    \"\"\"\n    i = 2\n    while i <= num:\n        if num % i == 0:\n            num = num / i\n            return i\n        i += 1",
      -1.6357421875
    ],
    [
      "def prime_factor(number):\n    if number <= 1:\n        return number\n\n    prime = 2\n    while prime * prime <= number:\n        if number % prime:\n            prime += 1\n        else:\n            number /= prime\n    return int(number)\n\ndef prime_factors(number):\n    factors = []\n    while number > 1:\n        if number % 2:\n            number -= 1\n        else:\n            factors.append(2)\n            number /= 2\n\n        if number % 3:\n            number -= 1\n        else:\n            factors.append(3)\n            number /= 3\n\n        if number % 5:\n            number -= 1\n        else:\n            factors.append(5)\n            number /= 5\n    return factors\n\ndef prime_factors_list(number):\n    factors = []\n    while number > 1:\n        for i in range(2, number + 1):\n            if number % i == 0:\n                factors.append(i)\n                number /= i\n                break\n    return factors\n\ndef prime_factors_dict(number):\n    factors = {}\n    while number > 1:\n        for i in range(2, number + 1):\n            if number % i == 0:\n                factors[i] = factors.get(i, 0) + 1\n                number /= i\n                break\n    return factors\n\ndef prime_factors_dict_2(number):\n    factors = {}\n    while number > 1:\n        for i in range(2, int(number**0.5)+1):\n            if number % i == 0:\n                factors[i] = factors.get(i, 0) + 1\n                number /= i\n                break\n        else:\n            factors[number] = factors.get(number, 0) + 1\n            break\n    return factors\n\ndef prime_factors_dict_3(number):\n    factors = {}\n    while number > 1:\n        for i in range(2, int(number**0.5)+1):\n            if number % i ==",
      -1.76953125
    ],
    [
      "def largest_prime_factor(num: int) -> int:\n    \"\"\"\n    Return largest prime factor of a number.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(10)\n    5\n    >>> largest_prime_factor(17)\n    17\n    >>> largest_prime_factor(3.4)\n    3\n    >>> largest_prime_factor('a')\n    Traceback (most recent call last):\n        ...\n    TypeError: '<=' not supported between instances of 'str' and 'int'\n    >>> largest_prime_factor(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Number should be greater than zero\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"Input should be an integer\")\n    if num <= 0:\n        raise ValueError(\"Number should be greater than zero\")\n\n    divisor = 2\n    while num > 1:\n        if num % divisor == 0:\n            num /= divisor\n            if is_prime(divisor):\n                return divisor\n        else:\n            divisor += 1\n    return num\n\n\ndef is_prime(num: int) -> bool:\n    \"\"\"\n    Return True if a number is prime, False otherwise.\n    >>> is_prime(13)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(3.4)\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'float' and 'int'\n    >>> is_prime('a')\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"Input should be an integer\")\n    if num <= 0:\n        raise ValueError(\"Number should be greater than zero\")\n\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:",
      -2.125
    ],
    [
      "def largest_prime_factor(n):\n    if n <= 1:\n        return n\n    largest_prime_factor = 0\n    i = 2\n    while i <= n:\n        if n%i == 0:\n            largest_prime_factor = i\n            n = n/i\n            i = 2\n        else:\n            i += 1\n    return largest_prime_factor\n\nprint(largest_prime_factor(600851475143))",
      -2.779296875
    ],
    [
      "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_factor(n):\n    if n <= 1:\n        return n\n    for i in range(int(sqrt(n)) - 1, 0, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(largest_prime_factor(n))",
      -2.9765625
    ],
    [
      "def prime_factor(number):\n    prime_list = []\n    for i in range(2, number+1):\n        if number % i == 0:\n            prime_list.append(i)\n    return prime_list[-1]\n\n\ndef largest_prime_factor(number):\n    prime_list = []\n    for i in range(2, number+1):\n        if number % i == 0:\n            prime_list.append(i)\n    return prime_list[-1]\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    result = prime_factor(number)\n    print(f\"The largest prime factor of {number} is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.01171875
    ],
    [
      "def is_prime(n):\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n\n\ndef largest_prime_factor(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        n = n/2\n    while n % 2 == 0:\n        n = n/2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n%i == 0:\n            n = n/i\n            if is_prime(n):\n                return n\n    return n\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(largest_prime_factor(num))",
      -3.025390625
    ],
    [
      "def prime_factor(n):\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n = n / i\n    if n > 2:\n        return n\n    else:\n        return n - 1\n\nif __name__ == '__main__':\n    print(prime_factor(600851475143))",
      -3.033203125
    ],
    [
      "def largest_prime_factor(n):\n    for i in range(n, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n\ndef is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef test_case(k, solution, test_func):\n\n    output = test_func(k)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\n\ndef main():\n    print(\"Largest prime factor of 13195:\")\n    test_case(13195, 29, largest_prime_factor)\n\n    print(\"Largest prime factor of 600851475143:\")\n    test_case(600851475143, 6857, largest_prime_factor)\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.103515625
    ],
    [
      "def prime_factors(n):\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)), 2):\n        while n % i == 0:\n            n = n / i\n    if n > 2:\n        return n\n    else:\n        return n\n\nprint(prime_factors(600851475143))",
      -3.603515625
    ],
    [
      "def largest_prime_factor(number):\n    prime_factor = 1\n    for i in range(2, number):\n        if number % i == 0:\n            prime_factor = i\n\n    return prime_factor\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    result = largest_prime_factor(number)\n    print(f\"Largest prime factor of {number} is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.3046875
    ],
    [
      "import math\n\ndef prime_factor(number):\n    if number <= 1:\n        return 1\n    prime = 1\n    for i in range(2, math.floor(math.sqrt(number)) + 1):\n        if number % i == 0:\n            prime = i\n            break\n    return prime\n\n\ndef largest_prime_factor(number):\n    if number <= 1:\n        return 1\n    prime = 1\n    while number % prime != 1:\n        prime = prime_factor(number)\n        number = number / prime\n    return prime\n\n\nprint(largest_prime_factor(1234))",
      -4.37109375
    ],
    [
      "def largest_prime_factor(num):\n    prime_factor = 1\n    for i in range(2, num):\n        if num % i == 0:\n            prime_factor = i\n            break\n\n    return prime_factor\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(f\"Largest prime factor of {num} is {largest_prime_factor(num)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.44921875
    ],
    [
      "def prime_factor(num: int) -> int:\n    \"\"\"\n    This function finds the largest prime factor of a given number.\n    :param num: int\n    :return: int\n    >>> prime_factor(13195)\n    29\n    >>> prime_factor(10)\n    5\n    >>> prime_factor(17)\n    17\n    >>> prime_factor(195)\n    11\n    >>> prime_factor(20)\n    5\n    >>> prime_factor(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be greater than 0\n    >>> prime_factor('a')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be an integer\n    >>> prime_factor(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be greater than 0\n    \"\"\"\n    if not num or not isinstance(num, int):\n        raise ValueError(\"Input number should be an integer\")\n\n    if num < 0:\n        raise ValueError(\"Input number should be greater than 0\")\n\n    # Initialize the largest prime factor\n    largest_prime_factor = 1\n\n    # Loop from 2 to n / 2 and find factors\n    for i in range(2, num // 2 + 1):\n        # Supposed i is a factor\n        if num % i == 0:\n            # Get the largest prime factor\n            if is_prime(i):\n                largest_prime_factor = max(i, largest_prime_factor)\n\n    return largest_prime_factor\n\n\ndef is_prime(num: int) -> bool:\n    \"\"\"\n    This function checks if a number is prime or not.\n    :param num: int\n    :return: bool\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(26)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be greater than",
      -5.31640625
    ],
    [
      "from math import sqrt\n\n\ndef is_prime(n):\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_factor(num):\n    if is_prime(num):\n        return num\n    for i in range(2, num + 1):\n        if num % i == 0:\n            if is_prime(i):\n                return i\n    return 1\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(largest_prime_factor(num))",
      -5.484375
    ],
    [
      "def largest_prime_factor(n):\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors[-1]\n\n\ndef largest_prime_factor_2(n):\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n            n = n / i\n    return prime_factors[-1]\n\n\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor_2(13195))",
      -5.49609375
    ],
    [
      "def largest_prime_factor(num):\n    factor = 2\n    while factor * factor <= num:\n        if num % factor:\n            factor += 1\n        else:\n            num //= factor\n    return num\n\nprint(largest_prime_factor(13195))\n\n# Time complexity: O(sqrt(N))\n# Space complexity: O(1)\n\n\"\"\"\nAlternative solution:\n\ndef largest_prime_factor(num):\n    prime_factors = []\n    while num % 2 == 0:\n        prime_factors.append(2)\n        num //= 2\n\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            prime_factors.append(i)\n            num //= i\n\n    if num > 2:\n        prime_factors.append(num)\n\n    return max(prime_factors)\n\"\"\"\n\n\"\"\"\nSample Output:\n17\n\"\"\"",
      -6.609375
    ],
    [
      "def largest_prime_factor(num):\n    prime_factors = []\n    for i in range(2, num):\n        if num % i == 0:\n            prime_factors.append(i)\n    return prime_factors[-1]\n\n\ndef largest_prime_factor_efficient(num):\n    prime_factors = []\n    for i in range(2, num):\n        if num % i == 0:\n            prime_factors.append(i)\n    return prime_factors[-1]\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(largest_prime_factor(num))\n    print(largest_prime_factor_efficient(num))\n\n\nif __name__ == \"__main__\":\n    main()",
      -8.296875
    ],
    [
      "def prime_factor(number):\n    for i in range(2, number):\n        if number % i == 0:\n            return i\n\n\ndef prime_factors(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factor_list(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factor_list2(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factor_list3(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factor_list4(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factor_list5(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factor_list6(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factor_list7(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factor_list8(number):\n    factors = []\n    for i in range(2, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factor_list9(number):\n    factors = []\n    for i",
      -8.46875
    ],
    [
      "from math import sqrt\n\n\ndef prime_factors(num):\n    # prime numbers are greater than 1\n    if num == 1:\n        return num\n\n    # finding factors\n    factors = []\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            factors.append(i)\n\n    # checking for prime factors\n    prime_factors = []\n    for i in factors:\n        # checking if factor is prime\n        is_prime = True\n        for j in factors:\n            if i != j and num % j == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            prime_factors.append(i)\n\n    # return max prime factor\n    return max(prime_factors)\n\n\nprint(prime_factors(600851475143))",
      -8.75
    ],
    [
      "from math import sqrt\n\n\ndef is_prime(n):\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_factor(n):\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            prime_factors.append(i)\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors[-1]\n\n\ndef largest_prime_factor_eff(n):\n    for i in range(2, n):\n        if n % i == 0:\n            if is_prime(i):\n                return i\n    return 1\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(largest_prime_factor(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      -10.46875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}