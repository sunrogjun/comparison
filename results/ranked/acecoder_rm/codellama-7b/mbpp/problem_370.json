{
  "problem": {
    "task_id": "MBPP/381",
    "prompt": "Write a function to sort a list of lists by a given index of the inner list.",
    "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
    "test_list": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ],
    "challenge_test_list": [],
    "problem_id": 370
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\ndef sort_lists(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts lists by a given index of the inner list.\n\n    Args:\n        lists: list of lists\n        index: index of the inner list\n\n    Examples:\n        >>> sort_lists([[1, 3], [5, 4], [4, 2]], 0)\n        [[1, 3], [4, 2], [5, 4]]\n        >>> sort_lists([[1, 3], [5, 4], [4, 2]], 1)\n        [[4, 2], [1, 3], [5, 4]]\n\n    Returns:\n        List[List[int]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_lists([[1, 3], [5, 4], [4, 2]], 0))\n    print(sort_lists([[1, 3], [5, 4], [4, 2]], 1))",
      15.1796875
    ],
    [
      "from typing import List, Optional\n\n\ndef sort_list_of_lists(array: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists\n        index (int): index of the inner list\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\ndef sort_list_of_lists_in_place(array: List[List[int]], index: int) -> None:\n    \"\"\"Sorts a list of lists in place by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists\n        index (int): index of the inner list\n    \"\"\"\n    array.sort(key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(\n        sort_list_of_lists(\n            [[3, 1, 6], [1, 2, 3], [7, 8, 9]],\n            index=2,\n        )\n    )\n    print(\n        sort_list_of_lists(\n            [[3, 1, 6], [1, 2, 3], [7, 8, 9]],\n            index=1,\n        )\n    )\n    print(\n        sort_list_of_lists(\n            [[3, 1, 6], [1, 2, 3], [7, 8, 9]],\n            index=0,\n        )\n    )\n\n    array = [[3, 1, 6], [1, 2, 3], [7, 8, 9]]\n    sort_list_of_lists_in_place(array, index=2)\n    print(array)\n    sort_list_of_lists_in_place(array, index=1)\n    print(array)\n    sort_list_of_lists_in_place(array, index=0)\n    print(array)",
      14.375
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List[int]], index: int = 0) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lists: list of lists to sort\n        index: index of the inner list to sort\n\n    Examples:\n        >>> assert sort_list_of_lists([[3, 2], [4, 1]]) == [[4, 1], [3, 2]]\n        >>> assert sort_list_of_lists([[3, 2], [4, 1]], 1) == [[3, 2], [4, 1]]\n        >>> assert sort_list_of_lists([[2, 3], [1, 4]]) == [[1, 4], [2, 3]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_lists([[3, 2], [4, 1]]))\n    print(sort_list_of_lists([[3, 2], [4, 1]], 1))\n    print(sort_list_of_lists([[2, 3], [1, 4]]))",
      14.328125
    ],
    [
      "from typing import List, Tuple\n\n\ndef sort_by_index(array: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists to be sorted\n        index (int): index of the inner list to be used for sorting\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    assert sort_by_index(\n        [[1, 2], [4, 5], [7, 8]], 1\n    ) == [[7, 8], [1, 2], [4, 5]]\n    assert sort_by_index(\n        [[1, 2], [4, 5], [7, 8]], 0\n    ) == [[1, 2], [4, 5], [7, 8]]\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [4, 5], [7, 8]], 1))\n    print(sort_by_index([[1, 2], [4, 5], [7, 8]], 0))",
      11.7734375
    ],
    [
      "def sort_by_index(list, index):\n    \"\"\"\n    >>> sort_by_index([[2,4],[1,3],[3,1]], 0)\n    [[3, 1], [1, 3], [2, 4]]\n    >>> sort_by_index([[2,4],[1,3],[3,1]], 1)\n    [[2, 4], [3, 1], [1, 3]]\n    \"\"\"\n    return sorted(list, key = lambda inner: inner[index])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      11.765625
    ],
    [
      "def sort_by_index(lst, index, reverse=False):\n    \"\"\"\n    >>> lst = [\n    ...     [1, 2, 3, 4],\n    ...     [1, 2, 3, 5],\n    ...     [1, 2, 3, 6],\n    ...     [1, 2, 3, 7]\n    ... ]\n    >>> sort_by_index(lst, 3)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7]]\n    >>> sort_by_index(lst, 3, reverse=True)\n    [[1, 2, 3, 7], [1, 2, 3, 6], [1, 2, 3, 5], [1, 2, 3, 4]]\n    \"\"\"\n    lst = lst[:]\n    lst.sort(key=lambda x: x[index], reverse=reverse)\n    return lst\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      11.734375
    ],
    [
      "from typing import List, Optional, Sequence\n\n\ndef sort_by_index(lst: List[Sequence], index: int) -> List[Sequence]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst: list of lists\n        index: index of the inner list to be used for sorting\n\n    Returns:\n        list of lists\n\n    Examples:\n        >>> assert sort_by_index([[1, 2, 3], [1, 2, 3]], 0) == [[1, 2, 3], [1, 2, 3]]\n        >>> assert sort_by_index([[1, 2, 3], [2, 1, 3]], 0) == [[1, 2, 3], [2, 1, 3]]\n        >>> assert sort_by_index([[1, 2, 3], [2, 1, 3]], 1) == [[2, 1, 3], [1, 2, 3]]\n        >>> assert sort_by_index([[1, 2, 3], [2, 1, 3]], 2) == [[1, 2, 3], [2, 1, 3]]\n        >>> assert sort_by_index([[1, 2, 3], [2, 1, 3]], 3) == [[1, 2, 3], [2, 1, 3]]\n    \"\"\"\n    return sorted(lst, key=lambda inner_list: inner_list[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2, 3], [2, 1, 3]], 1))",
      10.8203125
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(lst: List[List[int]], index: int):\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    lst = [[2, 5], [3, 4], [1, 2]]\n    print(sort_by_index(lst, 0))",
      10.6484375
    ],
    [
      "from typing import List, Any\n\n\ndef sort_lists(lists: List[list], index: int) -> List[list]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[list]): list of lists\n        index (int): index of the inner list\n\n    Returns:\n        List[list]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_lists([[1, 2, 3], [3, 2, 1], [1, 3, 2], [2, 1, 3]], 1))\n    print(sort_lists([[1, 2, 3], [3, 2, 1], [1, 3, 2], [2, 1, 3]], 2))\n    print(sort_lists([[1, 2, 3], [3, 2, 1], [1, 3, 2], [2, 1, 3]], 0))",
      10.46875
    ],
    [
      "from typing import List\n\n\ndef sort_list(lst: List[list], index: int) -> List[list]:\n    \"\"\"Sorts list by given index of inner list.\n\n    Args:\n        lst: list to sort\n        index: index of inner list\n\n    Returns:\n        Sorted list\n\n    Examples:\n        >>> sort_list([[1, 2], [3, 4], [5, 6]], 0)\n        [[1, 2], [3, 4], [5, 6]]\n        >>> sort_list([[1, 2], [3, 4], [5, 6]], 1)\n        [[5, 6], [1, 2], [3, 4]]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list([[1, 2], [3, 4], [5, 6]], 0))\n    print(sort_list([[1, 2], [3, 4], [5, 6]], 1))",
      9.9140625
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(array: List[List], index: int) -> List[List]:\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    assert sort_by_index([[1, 2], [5, 6], [3, 4]], 1) == [[3, 4], [1, 2], [5, 6]]\n    assert sort_by_index([[1, 2], [5, 6], [3, 4]], 0) == [[1, 2], [3, 4], [5, 6]]\n    assert sort_by_index([[1, 2], [5, 6], [3, 4]], -1) == [[5, 6], [1, 2], [3, 4]]\n    assert sort_by_index([[1, 2], [5, 6], [3, 4]], -2) == [[3, 4], [5, 6], [1, 2]]",
      9.8671875
    ],
    [
      "from typing import List\n\n\ndef sort_list_by_index(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts the given list of lists by the given index of the inner list.\n\n    Args:\n        lst: A list of lists.\n        index: The index of the inner list.\n\n    Examples:\n        >>> sort_list_by_index([[1, 2], [3, 4], [5, 6]], 0)\n        [[1, 2], [3, 4], [5, 6]]\n        >>> sort_list_by_index([[1, 2], [3, 4], [5, 6]], 1)\n        [[5, 6], [1, 2], [3, 4]]\n\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_by_index([[1, 2], [3, 4], [5, 6]], 0))\n    print(sort_list_by_index([[1, 2], [3, 4], [5, 6]], 1))",
      8.5234375
    ],
    [
      "from typing import List, Optional\n\n\ndef sort_by_index(array: List[List[int]], index: Optional[int] = 0) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists to sort\n        index (Optional[int], optional): index of inner list to sort by. Defaults to 0.\n\n    Returns:\n        List[List[int]]: sorted list\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [5, 6], [3, 4]]))\n    print(sort_by_index([[1, 2], [5, 6], [3, 4]], 1))",
      8.4140625
    ],
    [
      "from typing import List, Optional, TypeVar\n\nT = TypeVar('T')\n\n\ndef sort_by_index(array: List[T], index: int, reverse: Optional[bool] = False) -> List[T]:\n    \"\"\"Sort a list by an index of an inner list.\n\n    Args:\n        array (List[T]): list of lists to sort\n        index (int): index of inner list to sort by\n        reverse (Optional[bool], optional): reverse the order of the sort. Defaults to False.\n\n    Returns:\n        List[T]: sorted list of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index], reverse=reverse)\n\n\nif __name__ == '__main__':\n    a = [[3, 2], [1, 5], [4, 6]]\n    b = [[3, 2], [1, 5], [4, 6]]\n    print(sort_by_index(a, 1))\n    print(sort_by_index(b, 1, True))",
      6.4609375
    ],
    [
      "from typing import List\n\n\ndef sort_list(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst (List[List[int]]): List of lists to sort\n        index (int): Index to sort by\n\n    Returns:\n        List[List[int]]: Sorted list of lists\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n    print(sort_list(lst, 2))",
      6.17578125
    ],
    [
      "def sort_by_index(arr, index):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n    \"\"\"\n    return sorted(arr, key=lambda x: x[index])\n\ndef test_function(test_case):\n    arr = test_case[0]\n    index = test_case[1]\n    solution = test_case[2]\n    output = sort_by_index(arr, index)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [[2, 5, 3], [1, 2, 3], [3, 1, 2]]\nindex = 1\nsolution = [[3, 1, 2], [2, 5, 3], [1, 2, 3]]\ntest_case = [arr, index, solution]\ntest_function(test_case)\n\narr = [[1, 2, 3], [2, 1, 4], [3, 4, 1], [1, 4, 2]]\nindex = 2\nsolution = [[1, 4, 2], [2, 1, 4], [3, 4, 1], [1, 2, 3]]\ntest_case = [arr, index, solution]\ntest_function(test_case)\n\narr = [[1, 2, 3], [2, 1, 4], [3, 4, 1], [1, 4, 2]]\nindex = 0\nsolution = [[1, 2, 3], [2, 1, 4], [3, 4, 1], [1, 4, 2]]\ntest_case = [arr, index, solution]\ntest_function(test_case)",
      6.0703125
    ],
    [
      "def sort_by_index(lst, idx):\n    \"\"\"\n    >>> lst = [\n    ...     [1, 5, 7, 2],\n    ...     [1, 5, 7, 1],\n    ...     [1, 5, 7, 3],\n    ...     [1, 5, 7, 4],\n    ...     [1, 5, 7, 5],\n    ...     [1, 5, 7, 6],\n    ... ]\n    >>> sort_by_index(lst, 3)\n    [[1, 5, 7, 2], [1, 5, 7, 1], [1, 5, 7, 3], [1, 5, 7, 4], [1, 5, 7, 5], [1, 5, 7, 6]]\n    >>> sort_by_index(lst, 2)\n    [[1, 5, 7, 2], [1, 5, 7, 1], [1, 5, 7, 4], [1, 5, 7, 3], [1, 5, 7, 5], [1, 5, 7, 6]]\n    >>> sort_by_index(lst, 1)\n    [[1, 5, 7, 6], [1, 5, 7, 5], [1, 5, 7, 4], [1, 5, 7, 3], [1, 5, 7, 1], [1, 5, 7, 2]]\n    \"\"\"\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[j][idx] > lst[i][idx]:\n                lst[j], lst[i] = lst[i], lst[j]\n    return lst\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.49609375
    ],
    [
      "def sort_list_by_index(l, index, reverse=False):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    Args:\n        l (list): list of lists to be sorted\n        index (int): index of inner list to sort by\n        reverse (bool, optional): reverse the sort order\n    \"\"\"\n    l.sort(key=lambda x: x[index], reverse=reverse)\n\n\nif __name__ == '__main__':\n    l = [\n        ['a', 2],\n        ['c', 1],\n        ['b', 3]\n    ]\n    sort_list_by_index(l, 0)\n    print(l)\n    sort_list_by_index(l, 0, reverse=True)\n    print(l)\n    sort_list_by_index(l, 1)\n    print(l)\n    sort_list_by_index(l, 1, reverse=True)\n    print(l)",
      5.33984375
    ],
    [
      "from typing import List, Optional, TypeVar\n\nT = TypeVar(\"T\", list, str)\n\n\ndef sort_list(list_to_sort: List[T], index: Optional[int] = 0) -> List[T]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        list_to_sort (List[T]): list of lists\n        index (Optional[int], optional): index of the inner list. Defaults to 0.\n\n    Returns:\n        List[T]: sorted list of lists\n    \"\"\"\n    return sorted(list_to_sort, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    list_to_sort = [\n        [\"a\", 1],\n        [\"b\", 2],\n        [\"c\", 3],\n        [\"d\", 4],\n        [\"e\", 5],\n        [\"f\", 6],\n        [\"g\", 7],\n        [\"h\", 8],\n    ]\n    print(sort_list(list_to_sort, 1))",
      4.8828125
    ],
    [
      "from typing import List\n\n\ndef sort_list_by_index(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts list of lists by index of inner list.\n\n    Args:\n        lst (List[List[int]]): list of lists to be sorted\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[List[int]]: list of lists sorted by index of inner list\n    \"\"\"\n\n    def sort_helper(lst: List[List[int]], index: int) -> List[List[int]]:\n        if len(lst) <= 1:\n            return lst\n\n        mid = len(lst) // 2\n        left = lst[:mid]\n        right = lst[mid:]\n\n        left = sort_helper(left, index)\n        right = sort_helper(right, index)\n\n        return merge(left, right, index)\n\n    def merge(left: List[List[int]], right: List[List[int]], index: int) -> List[List[int]]:\n        i = j = 0\n        result = []\n\n        while i < len(left) and j < len(right):\n            if left[i][index] < right[j][index]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    return sort_helper(lst, index)\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [3, 2, 1], [1, 4, 3], [2, 3, 1]]\n    sorted_lst = sort_list_by_index(lst, 2)\n    print(sorted_lst)",
      4.62109375
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(data: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        data (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Examples:\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 0)\n        [[1, 2], [3, 4], [5, 6]]\n\n        >>> sort_by_index([[3, 2], [5, 1], [6, 4]], 1)\n        [[3, 2], [5, 1], [6, 4]]\n\n        >>> sort_by_index([[3, 2], [5, 1], [6, 4]], 1)\n        [[5, 1], [3, 2], [6, 4]]\n    \"\"\"\n    return sorted(data, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [3, 4], [5, 6]], 0))\n    print(sort_by_index([[3, 2], [5, 1], [6, 4]], 1))\n    print(sort_by_index([[3, 2], [5, 1], [6, 4]], 1))",
      4.31640625
    ],
    [
      "from math import inf\n\n\ndef sort_by_index(lst, index=0, reverse=False):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n    :param lst: List of lists\n    :param index: Index of inner list to sort by\n    :param reverse: Reverse order\n    :return: Sorted list of lists\n    \"\"\"\n\n    def sort_key(item):\n        return item[index]\n\n    return sorted(lst, key=sort_key, reverse=reverse)\n\n\nif __name__ == '__main__':\n    list_of_lists = [\n        ['a', 0, 'b'],\n        ['b', inf, 'a'],\n        ['a', 1, 'c'],\n        ['c', 1, 'a'],\n        ['b', 0, 'a'],\n        ['a', 2, 'c'],\n        ['c', 2, 'a'],\n        ['a', 3, 'b'],\n        ['b', 3, 'a'],\n        ['c', 3, 'a'],\n    ]\n    print(sort_by_index(list_of_lists, 1))\n    print(sort_by_index(list_of_lists, 1, True))\n    print(sort_by_index(list_of_lists, 2))",
      4.015625
    ],
    [
      "def sort_by_index(list_of_lists, index=0, reverse=False):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists: List of lists to be sorted.\n        index: Index of the inner list to sort by.\n        reverse: Sort in reverse order.\n\n    Returns:\n        Sorted list of lists.\n\n    Raises:\n        TypeError: If list_of_lists is not a list.\n        TypeError: If index is not an integer.\n        TypeError: If reverse is not a boolean.\n    \"\"\"\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"The argument list_of_lists must be a list.\")\n    if not isinstance(index, int):\n        raise TypeError(\"The argument index must be an integer.\")\n    if not isinstance(reverse, bool):\n        raise TypeError(\"The argument reverse must be a boolean.\")\n\n    return sorted(list_of_lists, key=lambda x: x[index], reverse=reverse)",
      3.958984375
    ],
    [
      "def sort_list_of_lists(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    assert sort_list_of_lists([[2, 1], [3, 3], [1, 2]], 0) == [[1, 2], [2, 1], [3, 3]]\n    assert sort_list_of_lists([[2, 1], [3, 3], [1, 2]], 1) == [[3, 3], [2, 1], [1, 2]]",
      3.693359375
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(array: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[List[int]]): list of lists to be sorted\n        index (int): index of the inner list to be used as a key\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    array = [[1, 2, 3], [2, 1, 3], [3, 2, 1]]\n    index = 0\n    print(sort_by_index(array, index))",
      3.109375
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(lists: List[List], index: int) -> List[List]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List]): list of lists\n        index (int): index of the inner list\n\n    Returns:\n        List[List]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [3, 4], [5, 6]], 1))",
      2.921875
    ],
    [
      "def sort_list(l, index):\n    \"\"\"\n    >>> sort_list([[1, 2, 3], [1, 2, 3]], 1)\n    [[1, 2, 3], [1, 2, 3]]\n    >>> sort_list([[3, 2, 1], [1, 2, 3]], 0)\n    [[3, 2, 1], [1, 2, 3]]\n    >>> sort_list([[3, 2, 1], [1, 2, 3]], 1)\n    [[3, 2, 1], [1, 2, 3]]\n    >>> sort_list([[3, 2, 1], [1, 2, 3]], 2)\n    [[1, 2, 3], [3, 2, 1]]\n    \"\"\"\n    l.sort(key=lambda x: x[index])\n    return l\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.87109375
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(input_list: List[List], index: int) -> List[List]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        input_list: The list of lists to be sorted.\n        index: The index of the inner list to sort by.\n\n    Returns:\n        The sorted list of lists.\n\n    Examples:\n        >>> sort_by_index([[2, 4], [4, 2], [2, 1]], 0)\n        [[2, 1], [2, 4], [4, 2]]\n        >>> sort_by_index([[2, 4], [4, 2], [2, 1]], 1)\n        [[4, 2], [2, 4], [2, 1]]\n    \"\"\"\n    return sorted(input_list, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[2, 4], [4, 2], [2, 1]], 0))\n    print(sort_by_index([[2, 4], [4, 2], [2, 1]], 1))",
      2.474609375
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_lists_by_index(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List[int]]): List of lists to be sorted.\n        index (int): Index of inner list to sort.\n\n    Returns:\n        List[List[int]]: Sorted list of lists.\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    data = [\n        [1, 2, 3],\n        [5, 4, 3],\n        [4, 5, 6],\n        [9, 0, 3],\n        [1, 1, 1],\n        [5, 5, 5],\n        [1, 2, 4],\n    ]\n    print(sort_list_of_lists_by_index(data, 0))\n    print(sort_list_of_lists_by_index(data, 1))\n    print(sort_list_of_lists_by_index(data, 2))",
      2.47265625
    ],
    [
      "def sort_lists_by_index(list_of_lists, index=0):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\nprint(sort_lists_by_index([[3, 2], [1, 2], [2, 2], [3, 1]], index=0))\n\n# Another way\n\ndef sort_lists_by_index_v2(list_of_lists, index=0):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\nprint(sort_lists_by_index_v2([[3, 2], [1, 2], [2, 2], [3, 1]], index=1))",
      2.390625
    ],
    [
      "def sort_by_index(lst, index, descending=False):\n    \"\"\"\n    >>> lst = [\n    ...     [1, 10, 100],\n    ...     [2, 20, 200],\n    ...     [3, 30, 300],\n    ...     [4, 40, 400],\n    ... ]\n    >>> sort_by_index(lst, 1)\n    [[4, 40, 400], [2, 20, 200], [3, 30, 300], [1, 10, 100]]\n    >>> sort_by_index(lst, 1, descending=True)\n    [[1, 10, 100], [3, 30, 300], [2, 20, 200], [4, 40, 400]]\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i][index] < lst[j][index]:\n                lst[i], lst[j] = lst[j], lst[i]\n            elif lst[i][index] == lst[j][index] and descending:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.830078125
    ],
    [
      "from typing import List, Optional\n\n\ndef sort_list_of_lists(\n    lists: List[List[int]], index_to_sort_by: int, reverse: bool = False\n) -> List[List[int]]:\n    \"\"\"Sort list of lists by a given index of the inner list.\n\n    Args:\n        lists: The list of lists to sort.\n        index_to_sort_by: The index of the inner list to sort by.\n        reverse: Sort in descending order instead of ascending.\n\n    Returns:\n        The sorted list of lists.\n    \"\"\"\n\n    def sort_by_index(value: List[int]) -> int:\n        return value[index_to_sort_by]\n\n    return sorted(lists, key=sort_by_index, reverse=reverse)\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [1, 4, 5],\n        [1, 3, 4],\n        [2, 3, 1],\n        [1, 2, 3],\n    ]\n    print(sort_list_of_lists(lists, index_to_sort_by=0))\n    print(sort_list_of_lists(lists, index_to_sort_by=1))\n    print(sort_list_of_lists(lists, index_to_sort_by=2))\n    print(sort_list_of_lists(lists, index_to_sort_by=2, reverse=True))",
      1.8017578125
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(array: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        array: the array to be sorted\n        index: the index of the inner list to be sorted by\n\n    Examples:\n        >>> sort_by_index([[1, 2], [3, 4]], 0)\n        [[1, 2], [3, 4]]\n        >>> sort_by_index([[3, 2], [1, 4]], 1)\n        [[1, 4], [3, 2]]\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [3, 4]], 0))\n    print(sort_by_index([[3, 2], [1, 4]], 1))",
      1.7021484375
    ],
    [
      "def sort_list(my_list, index):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        my_list (list): The list to sort\n        index (int): The index to sort by\n\n    Returns:\n        list: The sorted list\n    \"\"\"\n    for i in range(len(my_list) - 1):\n        for j in range(i + 1, len(my_list)):\n            if my_list[i][index] > my_list[j][index]:\n                my_list[i], my_list[j] = my_list[j], my_list[i]\n    return my_list\n\n\ndef test_function():\n    assert sort_list([[1, 2], [3, 4], [5, 6], [7, 8]], 1) == [\n        [7, 8],\n        [5, 6],\n        [3, 4],\n        [1, 2],\n    ]\n    assert sort_list([[1, 2], [3, 4], [5, 6], [7, 8]], 0) == [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n        [7, 8],\n    ]\n    assert sort_list([[1, 2], [3, 4], [5, 6], [7, 8]], 1) == [\n        [7, 8],\n        [5, 6],\n        [3, 4],\n        [1, 2],\n    ]\n\n\nif __name__ == \"__main__\":\n    test_function()",
      1.6865234375
    ],
    [
      "def sort_by_index(list_of_lists, index):\n    \"\"\"Return a sorted list of lists by a given index of the inner list.\"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"Test for sort_by_index.\"\"\"\n    assert sort_by_index(\n        [[1, 3, 5], [2, 4, 6], [3, 5, 7]], 0) == [[1, 3, 5], [3, 5, 7], [2, 4, 6]]\n    assert sort_by_index(\n        [[1, 3, 5], [2, 4, 6], [3, 5, 7]], 1) == [[2, 4, 6], [1, 3, 5], [3, 5, 7]]\n    assert sort_by_index(\n        [[1, 3, 5], [2, 4, 6], [3, 5, 7]], 2) == [[3, 5, 7], [1, 3, 5], [2, 4, 6]]\n\n\nif __name__ == '__main__':\n    test_sort_by_index()",
      1.4189453125
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts list of lists by a given index.\n\n    Args:\n        lists (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    lists = [[1, 4], [3, 1], [1, 3]]\n    index = 1\n    print(sort_list_of_lists(lists, index))",
      1.2666015625
    ],
    [
      "def sort_by_index(list, index):\n    return sorted(list, key=lambda x: x[index])\n\n\n# Test\nlist = [\n    [1, 2, 3, 4],\n    [2, 3, 4, 5],\n    [3, 4, 5, 6]\n]\nprint(sort_by_index(list, 1))",
      1.158203125
    ],
    [
      "def sort_by_index(lst, idx):\n    return sorted(lst, key=lambda x: x[idx])\n\n\nprint(sort_by_index([[1, 2], [3, 4], [5, 6], [7, 8]], 0))",
      1.06640625
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(lists: List[list], index: int) -> List[list]:\n    \"\"\"Sorts a list of lists by a given index.\n\n    Args:\n        lists: list of lists to sort.\n        index: index to sort by.\n\n    Returns:\n        Sorted list of lists.\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    lists = [[3, 2, 1], [1, 2, 3], [2, 1, 3]]\n    print(sort_by_index(lists, 0))",
      0.904296875
    ],
    [
      "def sort_by_index(a, index):\n    return sorted(a, key=lambda x: x[index])\n\n# test\na = [\n    [4, 5, 1],\n    [13, 2, 5],\n    [7, 1, 12],\n    [3, 6, 7],\n    [1, 1, 5],\n    [4, 7, 7],\n]\nprint(sort_by_index(a, 1))\nprint(sort_by_index(a, 0))\nprint(sort_by_index(a, 2))",
      0.8095703125
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(arr: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        arr (List[List[int]]): list of lists to sort\n        index (int): index of the inner list to sort by\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(arr, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [5, 6], [7, 8], [3, 4], [9, 10], [11, 12]], 0))\n    print(sort_by_index([[1, 2], [5, 6], [7, 8], [3, 4], [9, 10], [11, 12]], 1))",
      0.79296875
    ],
    [
      "from typing import List\n\n\ndef sort_lists(lists: List[List], index: int) -> List[List]:\n    \"\"\"Sort lists by a given index.\n\n    Args:\n        lists (List[List]): List of lists to sort.\n        index (int): Index to sort by.\n\n    Examples:\n        >>> assert sort_lists([[1, 2], [3, 4]], 1) == [[3, 4], [1, 2]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_lists([[1, 2], [3, 4]], 1))",
      0.60498046875
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lst: list of lists to be sorted\n        index: index of the inner list by which the list should be sorted\n\n    Examples:\n        >>> lst = [[1, 4], [3, 1], [5, 2], [4, 5], [2, 3]]\n        >>> sort_by_index(lst, 0)\n        [[1, 4], [2, 3], [3, 1], [4, 5], [5, 2]]\n        >>> sort_by_index(lst, 1)\n        [[2, 3], [3, 1], [1, 4], [4, 5], [5, 2]]\n        >>> sort_by_index(lst, 5)\n        [[1, 4], [3, 1], [4, 5], [5, 2], [2, 3]]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 4], [3, 1], [5, 2], [4, 5], [2, 3]], 0))\n    print(sort_by_index([[1, 4], [3, 1], [5, 2], [4, 5], [2, 3]], 1))\n    print(sort_by_index([[1, 4], [3, 1], [5, 2], [4, 5], [2, 3]], 5))",
      0.51220703125
    ],
    [
      "def sort_by_index(list_of_lists, index):\n    \"\"\"\n    Sorts the given list of lists by the given index of the inner list.\n    :param list_of_lists: list of lists\n    :param index: index of the inner list\n    :return: sorted list of lists\n    >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 1)\n    [[3, 4], [5, 6], [1, 2]]\n    >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 0)\n    [[5, 6], [3, 4], [1, 2]]\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.472412109375
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Examples:\n        >>> sort_by_index([[1, 2], [4, 5], [7, 8], [9, 10]], 0)\n        [[1, 2], [4, 5], [7, 8], [9, 10]]\n        >>> sort_by_index([[1, 2], [4, 5], [7, 8], [9, 10]], 1)\n        [[7, 8], [4, 5], [1, 2], [9, 10]]\n        >>> sort_by_index([[1, 2], [4, 5], [7, 8], [9, 10]], 3)\n        [[1, 2], [4, 5], [7, 8], [9, 10]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\ndef sort_by_index_lambda(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Examples:\n        >>> sort_by_index_lambda([[1, 2], [4, 5], [7, 8], [9, 10]], 0)\n        [[1, 2], [4, 5], [7, 8], [9, 10]]\n        >>> sort_by_index_lambda([[1, 2], [4, 5], [7, 8], [9, 10]], 1)\n        [[7, 8], [4,",
      0.2335205078125
    ],
    [
      "def sort_list_of_lists(list_of_lists: list, index: int) -> list:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists (list): list of lists\n        index (int): index of the inner list to sort by\n\n    Returns:\n        list: sorted list of lists\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_lists([[1, 2], [3, 4], [5, 6]], 1))",
      0.1998291015625
    ],
    [
      "def sort_by_index(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\ndef test_list_of_lists():\n    assert sort_by_index([[1, 3], [3, 1], [4, 5], [5, 4]], 0) == [\n        [1, 3],\n        [3, 1],\n        [4, 5],\n        [5, 4],\n    ]\n    assert sort_by_index([[1, 3], [3, 1], [4, 5], [5, 4]], 1) == [\n        [3, 1],\n        [1, 3],\n        [5, 4],\n        [4, 5],\n    ]\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 3], [3, 1], [4, 5], [5, 4]], 0))",
      0.158447265625
    ],
    [
      "def sort_by_index(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [5, 6], [3, 4]], 1))",
      0.10174560546875
    ],
    [
      "def sort_by_index(lst, index):\n    lst.sort(key=lambda x: x[index])\n    return lst\n\n\ndef test_sort_by_index():\n    assert sort_by_index(\n        [[1, 2], [3, 4], [5, 6], [7, 8]], 0\n    ) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert sort_by_index(\n        [[1, 2], [3, 4], [5, 6], [7, 8]], 1\n    ) == [[7, 8], [1, 2], [3, 4], [5, 6]]\n\n\nif __name__ == \"__main__\":\n    test_sort_by_index()",
      0.017242431640625
    ],
    [
      "def sort_by_index(list_of_lists, index):\n    \"\"\"\n    >>> list_of_lists = [[1, 2, 3], [10, 20, 30], [100, 200, 300]]\n    >>> sort_by_index(list_of_lists, 2)\n    [[1, 2, 3], [10, 20, 30], [100, 200, 300]]\n    >>> sort_by_index(list_of_lists, 1)\n    [[10, 20, 30], [1, 2, 3], [100, 200, 300]]\n    >>> sort_by_index(list_of_lists, 0)\n    [[100, 200, 300], [10, 20, 30], [1, 2, 3]]\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.230712890625
    ],
    [
      "def sort_list_by_index(list_of_lists, index):\n    \"\"\"\n    Return a sorted list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists: list of lists\n        index: index of the inner list\n\n    Returns:\n        list of lists sorted by a given index of the inner list\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])",
      -0.269287109375
    ],
    [
      "from typing import List, Tuple\n\n\ndef sort_by_index(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst: List of lists to be sorted.\n        index: Index of the inner list to sort by.\n\n    Returns:\n        Sorted list of lists.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"Test for sort_by_index function.\"\"\"\n    assert sort_by_index(\n        lst=[\n            [1, 2, 3, 4],\n            [1, 4, 2, 3],\n            [3, 1, 4, 2],\n            [4, 2, 3, 1],\n            [2, 3, 4, 1],\n            [4, 3, 2, 1],\n        ],\n        index=1,\n    ) == [\n        [1, 4, 2, 3],\n        [3, 1, 4, 2],\n        [4, 2, 3, 1],\n        [2, 3, 4, 1],\n        [4, 3, 2, 1],\n        [1, 2, 3, 4],\n    ]\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index(\n        lst=[\n            [1, 2, 3, 4],\n            [1, 4, 2, 3],\n            [3, 1, 4, 2],\n            [4, 2, 3, 1],\n            [2, 3, 4, 1],\n            [4, 3, 2, 1],\n        ],\n        index=1,\n    ))",
      -0.453857421875
    ],
    [
      "def sort_list_of_lists(list_of_lists, index_to_sort_by=0):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists: The list of lists to be sorted.\n        index_to_sort_by: The index of the inner list to sort by.\n\n    Returns:\n        list_of_lists: The sorted list of lists.\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index_to_sort_by])\n\n\ndef main():\n    \"\"\"\n    Print the sorted list of lists.\n    \"\"\"\n    list_of_lists = [\n        [\"c\", 3, \"apple\"],\n        [\"a\", 5, \"banana\"],\n        [\"b\", 1, \"orange\"],\n        [\"d\", 2, \"grape\"]\n    ]\n    print(sort_list_of_lists(list_of_lists, 1))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.75048828125
    ],
    [
      "def get_element_index_sorter(index):\n    def sorter(list_of_lists):\n        return sorted(list_of_lists, key=lambda l: l[index])\n    return sorter\n\nif __name__ == '__main__':\n    print(get_element_index_sorter(0)([[1, 2, 3], [2, 1, 3], [2, 3, 1]]))\n    print(get_element_index_sorter(1)([[1, 2, 3], [2, 1, 3], [2, 3, 1]]))\n    print(get_element_index_sorter(2)([[1, 2, 3], [2, 1, 3], [2, 3, 1]]))",
      -0.7607421875
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(input: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n    >>> sort_by_index([[1, 2, 3], [4, 5, 6]], 1)\n    [[4, 5, 6], [1, 2, 3]]\n    \"\"\"\n    return sorted(input, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8134765625
    ],
    [
      "def sort_list_by_index(input_list, index):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n\n    :param input_list: List of lists\n    :type input_list: list\n    :param index: Index of the inner list\n    :type index: int\n    :return: Sorted list of lists\n    :rtype: list\n    \"\"\"\n    return sorted(input_list, key=lambda x: x[index])",
      -0.85693359375
    ],
    [
      "def sort_list(list, index):\n    return sorted(list, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    list = [[3, 5, 7], [1, 2, 3], [4, 5, 6]]\n    print(sort_list(list, 0))\n    print(sort_list(list, 1))",
      -0.85693359375
    ],
    [
      "def sort_lists(lists, index):\n    \"\"\"\n    >>> sort_lists([[3, 1], [1, 2], [2, 3]], 0)\n    [[1, 2], [2, 3], [3, 1]]\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def sort_by_index(l, index):\n    return sorted(l, key=lambda x: x[index])\n\n\nprint(sort_by_index([[3, 7], [1, 2], [4, 5]], 1))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sort list of lists by index.\n\n    Args:\n        lists (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda item: item[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_lists([[1, 3], [3, 1], [4, 2]], 0))",
      -0.85693359375
    ],
    [
      "from typing import List, TypeVar\n\nT = TypeVar('T', List[int], List[str])\n\n\ndef sort_lists_by_index(lists: List[T], index: int = 0) -> List[T]:\n    \"\"\"Sort lists by a given index.\n\n    Args:\n        lists (List[T]): list of lists to be sorted\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[T]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    lists = [\n        [1, 2, 3],\n        [5, 4, 3],\n        [1, 2, 3],\n        [5, 6, 7],\n    ]\n    print(sort_lists_by_index(lists, 1))",
      -0.85693359375
    ],
    [
      "def sort_list_of_lists(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\ndef test_list_of_lists_sorting():\n    \"\"\"\n    >>> sort_list_of_lists([[1, 2, 3], [5, 6, 7], [3, 2, 1]], 2)\n    [[3, 2, 1], [1, 2, 3], [5, 6, 7]]\n    >>> sort_list_of_lists([[1, 2], [5, 6], [3, 2]], 1)\n    [[3, 2], [1, 2], [5, 6]]\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def sort_list(lst, index):\n    lst = lst.sort(key=lambda x: x[index])\n    return lst\n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_list(lst, 2))",
      -0.85693359375
    ],
    [
      "def sort_by_index(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\nprint(sort_by_index([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], 1))",
      -0.85693359375
    ],
    [
      "def sort_by_index(list_of_lists, index=0):\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    :param list_of_lists: list of lists to be sorted\n    :param index: index of the inner list to sort by\n    :return: sorted list of lists\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"Test for sort_by_index function.\"\"\"\n    assert sort_by_index([[4, 5], [2, 3], [1, 2]]) == [[1, 2], [2, 3], [4, 5]]\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[4, 5], [2, 3], [1, 2]]))",
      -0.85693359375
    ],
    [
      "def sort_by_index(l, index):\n    return sorted(l, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    data = [\n        [1, 2, 3],\n        [5, 4, 3],\n        [4, 1, 2],\n        [3, 2, 1]\n    ]\n    print(data)\n    print(sort_by_index(data, 1))",
      -0.85693359375
    ],
    [
      "def sort_lists_by_index(lists, index):\n    return sorted(lists, key=lambda x: x[index])",
      -0.857421875
    ],
    [
      "def sort_by_index(array, index):\n    \"\"\"\n    Sorts the list by the given index.\n    \"\"\"\n    return sorted(array, key=lambda item: item[index])",
      -0.857421875
    ],
    [
      "def sort_by_index(list, index):\n    return sorted(list, key=lambda x: x[index])\n\n\nprint(sort_by_index([[3, 5], [1, 2], [4, 1]], 1))\nprint(sort_by_index([[1, 3], [1, 2], [4, 1]], 0))",
      -0.85791015625
    ],
    [
      "def sort_by_index(lists, index):\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == '__main__':\n    print(sort_by_index([[2, 4], [3, 1], [1, 4]], 1))",
      -0.85791015625
    ],
    [
      "def sort_by_index(lst, index):\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst: A list of lists\n        index: The index to sort by\n\n    Returns:\n        A sorted list of lists\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index])",
      -0.85791015625
    ],
    [
      "def sort_by_index(array, index):\n    return sorted(array, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"\n    >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 0)\n    [[1, 2], [5, 6], [3, 4]]\n    >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 1)\n    [[3, 4], [1, 2], [5, 6]]\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def sort_list_by_index(l, index):\n    \"\"\"\n    Sort the list of lists by a given index\n\n    Args:\n        l: list of lists to be sorted\n        index: index of the inner list to sort by\n\n    Returns:\n        sorted list of lists\n    \"\"\"\n    return sorted(l, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    l = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]\n    print(sort_list_by_index(l, 2))",
      -0.85791015625
    ],
    [
      "def sort_by_index(list_to_sort, index):\n    \"\"\"\n    >>> sort_by_index([[1, 2], [2, 1], [1, 1]], 0)\n    [[1, 2], [1, 1], [2, 1]]\n    \"\"\"\n    return sorted(list_to_sort, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def sort_by_index(list_of_lists, index):\n    \"\"\"Sorts a list of lists by a given index of the inner list.\"\"\"\n    return sorted(list_of_lists, key=lambda list_item: list_item[index])\n\n\ndef main():\n    \"\"\"Returns a sorted list of lists by a given index.\"\"\"\n    print(sort_by_index([[1, 2], [3, 4], [5, 6]], 1))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List], index: int = 0, reverse: bool = False) -> List[List]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists: List of lists to be sorted\n        index: Index of the inner list to be sorted\n        reverse: If true, sorts in descending order. Otherwise, sorts in ascending order.\n\n    Returns:\n        A list of lists sorted by the given index.\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index], reverse=reverse)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def sort_by_index(array, index):\n    return sorted(array, key=lambda x: x[index])\n\n\ndef test_sort_by_index():\n    \"\"\"\n    >>> sort_by_index([[1, 2], [4, 3], [9, 0]], 1)\n    [[9, 0], [1, 2], [4, 3]]\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_lists(lst: List, index: int, reverse: bool = False) -> List:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        lst: list of lists to be sorted\n        index: index of inner list to be sorted\n        reverse: whether to sort in reverse order (default: False)\n\n    Returns:\n        sorted list of lists\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index], reverse=reverse)",
      -0.8583984375
    ],
    [
      "def sort_by_index(a_list, index):\n    return sorted(a_list, key=lambda x: x[index])\n\n\nprint(sort_by_index([[1, 2], [5, 6], [3, 4]], 0))",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef sort_list(lst: List[List[int]], index: int) -> List[List[int]]:\n    \"\"\"Sorts list of lists by given index.\n\n    Args:\n        lst (List[List[int]]): list of lists to sort\n        index (int): index of inner list to sort by\n\n    Returns:\n        List[List[int]]: sorted list of lists\n    \"\"\"\n    lst.sort(key=lambda x: x[index])\n    return lst\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_list(lst, 2))",
      -0.85888671875
    ],
    [
      "from random import randint\n\n\ndef sort_by_index(array, index):\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    data = [[randint(0, 100) for _ in range(4)] for _ in range(20)]\n    print(\"Before sort:\")\n    for item in data:\n        print(item)\n    print(\"After sort:\")\n    for item in sort_by_index(data, 0):\n        print(item)",
      -0.85888671875
    ],
    [
      "def sort_list_by_index(list_to_sort, index):\n    return sorted(list_to_sort, key=lambda x: x[index])\n\n\nl = [\n    [1, 2, 3, 4],\n    [4, 3, 2, 1],\n    [3, 2, 1, 4],\n    [2, 1, 4, 3],\n    [1, 4, 3, 2],\n    [4, 2, 1, 3],\n]\n\nprint(sort_list_by_index(l, 0))\nprint(sort_list_by_index(l, 1))\nprint(sort_list_by_index(l, 2))\nprint(sort_list_by_index(l, 3))",
      -0.85888671875
    ],
    [
      "from functools import cmp_to_key\n\n\ndef sort_lists_by_index(lists, index):\n    \"\"\"Sort lists by index of inner list.\n\n    :param lists: list of lists\n    :type lists: list\n    :param index: index of inner list\n    :type index: int\n    :return: sorted lists\n    :rtype: list\n    \"\"\"\n    return sorted(lists, key=cmp_to_key(lambda a, b: a[index] - b[index]))",
      -0.85888671875
    ],
    [
      "def sort_by_index(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\ndef main():\n    list_of_lists = [\n        [1, 2, 3],\n        [3, 2, 1],\n        [2, 3, 1],\n        [2, 1, 3],\n        [1, 3, 2],\n        [3, 1, 2],\n    ]\n\n    sorted_lists = sort_by_index(list_of_lists, 0)\n    print(sorted_lists)\n\n    sorted_lists = sort_by_index(list_of_lists, 2)\n    print(sorted_lists)\n\n    sorted_lists = sort_by_index(list_of_lists, 1)\n    print(sorted_lists)\n\nif __name__ == '__main__':\n    main()",
      -0.85888671875
    ],
    [
      "from typing import List, Optional\n\n\ndef sort_by_index(\n    list_of_lists: List[List], index: int, descending: bool = False\n) -> List[List]:\n    \"\"\"Sorts list of lists by a given index of inner list.\n\n    Args:\n        list_of_lists (List[List]): List of lists.\n        index (int): Index of inner list to sort by.\n        descending (bool, optional): Whether to sort in descending order. Defaults to False.\n\n    Returns:\n        List[List]: List of lists sorted by inner list at index.\n\n    Examples:\n        >>> list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        >>> sort_by_index(list_of_lists, 1)\n        [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\n        >>> sort_by_index(list_of_lists, 1, True)\n        [[4, 5, 6], [7, 8, 9], [1, 2, 3]]\n    \"\"\"\n    if not list_of_lists:\n        return []\n\n    if not all(len(lst) > index for lst in list_of_lists):\n        raise IndexError(\"Index out of range.\")\n\n    return sorted(list_of_lists, key=lambda x: x[index], reverse=descending)\n\n\ndef sort_by_index_lambda(\n    list_of_lists: List[List], index: int, descending: bool = False\n) -> List[List]:\n    \"\"\"Sorts list of lists by a given index of inner list.\n\n    Args:\n        list_of_lists (List[List]): List of lists.\n        index (int): Index of inner list to sort by.\n        descending (bool, optional): Whether to sort in descending order. Defaults to False.\n\n    Returns:\n        List[List]: List of lists sorted by inner list at index.\n\n    Examples:\n        >>> list_of_lists = [[1, 2",
      -0.880859375
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List], index: int) -> List[List]:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        lists (List[List]): list of lists to be sorted\n        index (int): index of the inner list to sort by\n\n    Returns:\n        List[List]: sorted list of lists\n    \"\"\"\n    return sorted(lists, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      -0.89453125
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(array: List[list], index: int) -> List[list]:\n    \"\"\"Returns a list of lists sorted by a given index.\n\n    Args:\n        array: List of lists.\n        index: Index of the inner list.\n\n    Examples:\n        >>> assert sort_by_index([[1, 2], [3, 4]], 1) == [[3, 4], [1, 2]]\n    \"\"\"\n    return sorted(array, key=lambda item: item[index])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_index([[1, 2], [3, 4]], 1))",
      -0.90283203125
    ],
    [
      "from typing import List\n\n\ndef sort_list_by_index(lst: List[list], index: int) -> None:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Examples:\n        >>> lst = [\n        ...     [1, 2, 3],\n        ...     [1, 3, 2],\n        ...     [1, 2, 3],\n        ...     [1, 2, 3],\n        ...     [2, 3, 1],\n        ...     [3, 2, 1],\n        ...     [3, 2, 1],\n        ... ]\n        >>> sort_list_by_index(lst, 0)\n        >>> lst\n        [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 2, 1], [3, 2, 1]]\n        >>> sort_list_by_index(lst, 2)\n        >>> lst\n        [[1, 2, 3], [1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 2, 1], [3, 2, 1], [1, 2, 3]]\n        >>> sort_list_by_index(lst, 1)\n        >>> lst\n        [[1, 2, 3], [1, 3, 2], [2, 3, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1]]\n    \"\"\"\n    lst.sort(key=lambda x: x[index])\n\n\ndef main():\n    lst = [\n        [1, 2, 3],\n        [1, 3, 2],\n        [1, 2, 3],\n        [1, 2, 3],\n        [2, 3, 1],\n        [3, 2, 1],\n        [3, 2,",
      -0.94482421875
    ],
    [
      "from typing import List\n\n\ndef sort_by_index(array: List[list], index: int) -> List[list]:\n    \"\"\"Sort a list of lists by a given index of the inner list.\n\n    Args:\n        array (List[list]): Array of lists\n        index (int): Index of inner list to sort by\n\n    Returns:\n        List[list]: Sorted array of lists\n    \"\"\"\n    return sorted(array, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    arr = [\n        [\"b\", 2, \"c\"],\n        [\"a\", 1, \"z\"],\n        [\"d\", 3, \"e\"],\n    ]\n    index = 1\n    print(sort_by_index(arr, index))",
      -1.0
    ],
    [
      "def sort_by_index(lst, index):\n    \"\"\"\n    >>> lst = [[1, 2], [3, 4], [5, 6]]\n    >>> sort_by_index(lst, 0)\n    [[1, 2], [3, 4], [5, 6]]\n    >>> sort_by_index(lst, 1)\n    [[3, 4], [1, 2], [5, 6]]\n    \"\"\"\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i][index] > lst[j][index]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.0166015625
    ],
    [
      "def sort_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n\ndef main():\n    lst = [\n        [\"Mike\", \"Jones\", 18],\n        [\"Jimmy\", \"Brown\", 34],\n        [\"Jim\", \"Johnson\", 42],\n        [\"Robert\", \"Clark\", 23],\n        [\"Richard\", \"Davis\", 41]\n    ]\n\n    print(sort_list(lst, 2))\n\n\nif __name__ == '__main__':\n    main()",
      -1.1611328125
    ],
    [
      "def sort_by_index(arr, index):\n    \"\"\"\n    >>> sort_by_index([[1, 3], [5, 3], [4, 5], [6, 2]], 1)\n    [[1, 3], [4, 5], [5, 3], [6, 2]]\n    \"\"\"\n    return sorted(arr, key=lambda x: x[index])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.3330078125
    ],
    [
      "def sort_by_index(arr, index):\n    return sorted(arr, key=lambda x: x[index])\n\n\ndef test_list_of_lists():\n    # test 1\n    arr = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    expected = [[9, 10, 11], [6, 7, 8], [3, 4, 5]]\n    actual = sort_by_index(arr, 0)\n    assert actual == expected\n\n    # test 2\n    arr = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    expected = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    actual = sort_by_index(arr, 1)\n    assert actual == expected\n\n    # test 3\n    arr = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    expected = [[9, 10, 11], [3, 4, 5], [6, 7, 8]]\n    actual = sort_by_index(arr, 2)\n    assert actual == expected\n\n    # test 4\n    arr = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    expected = [[3, 4, 5], [6, 7, 8], [9, 10, 11]]\n    actual = sort_by_index(arr, 3)\n    assert actual == expected\n\n\ndef test_list_of_lists_2():\n    # test 1\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = [[7, 8, 9], [4, 5, 6], [1, 2, 3]]\n    actual = sort_by_index(arr, 0",
      -1.4677734375
    ],
    [
      "from typing import List, Callable, Any\n\n\ndef sort_list(lst: List[list], index: int, reverse: bool = False) -> List[list]:\n    \"\"\"Sort a list by a given index of the inner list.\n\n    Args:\n        lst: the list of lists\n        index: the index of the inner list to sort by\n        reverse: if True, sort in reverse order\n\n    Examples:\n        >>> lst = [[\"a\", 5], [\"b\", 6], [\"c\", 2], [\"d\", 1], [\"e\", 3], [\"f\", 4]]\n        >>> sort_list(lst, 1, reverse=True)\n        [['f', 4], ['e', 3], ['d', 1], ['c', 2], ['b', 6], ['a', 5]]\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[index], reverse=reverse)\n\n\ndef sort_list_by_key(lst: List[dict], key: str, reverse: bool = False) -> List[dict]:\n    \"\"\"Sort a list by a given key of the dict.\n\n    Args:\n        lst: the list of dict\n        key: the key of the dict to sort by\n        reverse: if True, sort in reverse order\n\n    Examples:\n        >>> lst = [{\"a\": 5}, {\"b\": 6}, {\"c\": 2}, {\"d\": 1}, {\"e\": 3}, {\"f\": 4}]\n        >>> sort_list_by_key(lst, \"a\", reverse=True)\n        [{'f': 4}, {'e': 3}, {'d': 1}, {'c': 2}, {'b': 6}, {'a': 5}]\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[key], reverse=reverse)\n\n\ndef sort_list_by_index(lst: List[list], index: int, reverse: bool = False) -> List[list]:\n    \"\"\"Sort a list by a given index of the list.\n\n    Args:\n        lst: the list",
      -1.5087890625
    ],
    [
      "from functools import cmp_to_key\n\n\ndef sort_by_index(list_of_lists: list, index: int, descending: bool = False) -> list:\n    \"\"\"Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        list_of_lists: list of lists to be sorted.\n        index: index of the inner list.\n        descending: if True, sorts in descending order. Defaults to False.\n\n    Returns:\n        list of lists sorted by the inner list's index.\n    \"\"\"\n\n    def sort_key(list_of_lists):\n        return list_of_lists[index]\n\n    return sorted(list_of_lists, key=cmp_to_key(sort_key), reverse=descending)\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [\n        [\"a\", \"b\", \"c\"],\n        [\"b\", \"c\", \"d\"],\n        [\"c\", \"d\", \"e\"],\n        [\"d\", \"e\", \"f\"],\n        [\"e\", \"f\", \"g\"],\n    ]\n    print(sort_by_index(list_of_lists, 0))\n    print(sort_by_index(list_of_lists, 1))\n    print(sort_by_index(list_of_lists, 2, True))",
      -1.7275390625
    ],
    [
      "def sort_by_index(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\ndef test_function(test_case):\n    lst = test_case[0]\n    index = test_case[1]\n    solution = test_case[2]\n    output = sort_by_index(lst, index)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nlst = [[4, 5, 1, 6], [13, 7, 2, 9], [34, 3, 5, 2], [100, 5, 6, 2]]\nindex = 1\nsolution = [[13, 7, 2, 9], [4, 5, 1, 6], [34, 3, 5, 2], [100, 5, 6, 2]]\ntest_case = [lst, index, solution]\ntest_function(test_case)\n\nlst = [[1, 2], [3, 4], [5, 6], [7, 8]]\nindex = 0\nsolution = [[1, 2], [3, 4], [5, 6], [7, 8]]\ntest_case = [lst, index, solution]\ntest_function(test_case)",
      -2.05859375
    ],
    [
      "def sort_by_index(array, index, reverse=False):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n\n    Args:\n        array: list of lists\n        index: index of the inner list to sort by\n        reverse: flag to reverse the sort\n\n    Returns:\n        Sorted list of lists.\n    \"\"\"\n    # sort by index\n    return sorted(array, key=lambda x: x[index], reverse=reverse)\n\n\ndef test_function(test_case):\n    sorted_array = sort_by_index(test_case[0], test_case[1])\n    if sorted_array == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [[\"Joe\", 10, 20], [\"Tim\", 20, 10], [\"Jeff\", 10, 30]]\nindex_to_sort_by = 1\nresult = [[\"Tim\", 20, 10], [\"Joe\", 10, 20], [\"Jeff\", 10, 30]]\n\ntest_function(test_case_1)\n\ntest_case_2 = [[\"Joe\", 10, 20], [\"Tim\", 20, 10], [\"Jeff\", 10, 30]]\nindex_to_sort_by = 2\nresult = [[\"Joe\", 10, 20], [\"Jeff\", 10, 30], [\"Tim\", 20, 10]]\n\ntest_function(test_case_2)\n\ntest_case_3 = [[\"Joe\", 10, 20], [\"Tim\", 20, 10], [\"Jeff\", 10, 30]]\nindex_to_sort_by = 0\nresult = [[\"Jeff\", 10, 30], [\"Joe\", 10, 20], [\"Tim\", 20, 10]]\n\ntest_function(test_case_3)\n\ntest_case_4 = [[\"Joe\", 10",
      -2.4765625
    ],
    [
      "from typing import List, Optional, TypeVar\n\nT = TypeVar(\"T\")\n\n\ndef get_index_of_min(array: List[T], start: Optional[int] = None) -> int:\n    \"\"\"Returns the index of the smallest element in the list.\n\n    Args:\n        array: The list to search.\n        start: The index to start the search from.\n\n    Examples:\n        >>> get_index_of_min([1, 2, 3])\n        0\n        >>> get_index_of_min([3, 2, 1])\n        2\n        >>> get_index_of_min([1, 2, 3, 2])\n        0\n        >>> get_index_of_min([3, 2, 1, 2])\n        2\n    \"\"\"\n    start = start or 0\n    min_index = start\n    for i in range(start + 1, len(array)):\n        if array[i] < array[min_index]:\n            min_index = i\n    return min_index\n\n\ndef sort_by_index(array: List[List[T]], index: int) -> List[List[T]]:\n    \"\"\"Sorts the list by the given index.\n\n    Args:\n        array: The list to sort.\n        index: The index to sort by.\n\n    Examples:\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 0)\n        [[1, 2], [3, 4], [5, 6]]\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 1)\n        [[3, 4], [1, 2], [5, 6]]\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], -1)\n        [[5, 6], [3, 4], [1, 2]]\n        >>> sort_by_index([[1, 2], [3, 4], [5, 6]], 2)\n        [[1, 2],",
      -2.529296875
    ],
    [
      "from typing import List\n\n\ndef sort_list_by_index(lst: List[list], index: int) -> List[list]:\n    \"\"\"Sort list of lists by index.\n\n    Args:\n        lst: List of lists.\n        index: Index of inner list.\n\n    Returns:\n        List of lists sorted by index.\n    \"\"\"\n    return sorted(lst, key=lambda i: i[index])\n\n\nif __name__ == \"__main__\":\n    lst = [\n        [1, 2, 3],\n        [1, 2, 5],\n        [1, 2, 8],\n        [1, 2, 9],\n        [1, 2, 10],\n        [1, 2, 11],\n        [1, 2, 12],\n        [1, 2, 13],\n        [1, 2, 14],\n        [1, 2, 15],\n    ]\n    print(sort_list_by_index(lst, 2))",
      -2.875
    ],
    [
      "def sort_list_of_lists(arr, index):\n    \"\"\"\n    >>> arr = [\n    ...     [1, 2, 3],\n    ...     [2, 3, 4],\n    ...     [3, 4, 5],\n    ...     [4, 5, 6],\n    ...     [5, 6, 7],\n    ...     [6, 7, 8],\n    ...     [7, 8, 9]\n    ... ]\n    >>> sort_list_of_lists(arr, 1)\n    [[7, 8, 9], [6, 7, 8], [5, 6, 7], [4, 5, 6], [3, 4, 5], [2, 3, 4], [1, 2, 3]]\n    >>> sort_list_of_lists(arr, 2)\n    [[3, 4, 5], [2, 3, 4], [1, 2, 3], [7, 8, 9], [6, 7, 8], [5, 6, 7], [4, 5, 6]]\n    >>> sort_list_of_lists(arr, 0)\n    [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]]\n    >>> sort_list_of_lists(arr, 3)\n    [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]]\n    >>> sort_list_of_lists(arr, 4)\n    [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7,",
      -3.751953125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}