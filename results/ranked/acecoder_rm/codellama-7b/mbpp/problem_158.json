{
  "problem": {
    "task_id": "MBPP/169",
    "prompt": "Write a function to calculate the nth pell number.",
    "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
    "test_list": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ],
    "challenge_test_list": [],
    "problem_id": 158
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def nth_pell_number(n):\n    \"\"\"\n    Pell numbers are integers that satisfy the following recurrence relation:\n\n    Pell(1) = 0\n    Pell(2) = 1\n    Pell(n) = (2 * Pell(n-1) + Pell(n-2))\n\n    >>> nth_pell_number(1)\n    0\n    >>> nth_pell_number(2)\n    1\n    >>> nth_pell_number(3)\n    2\n    >>> nth_pell_number(4)\n    5\n    >>> nth_pell_number(5)\n    15\n    >>> nth_pell_number(6)\n    57\n    >>> nth_pell_number(7)\n    178\n    >>> nth_pell_number(8)\n    577\n    >>> nth_pell_number(9)\n    1771\n    >>> nth_pell_number(10)\n    5769\n    \"\"\"\n    pell_0 = 0\n    pell_1 = 1\n\n    for _ in range(n - 1):\n        pell_1, pell_0 = 2 * pell_1 + pell_0, pell_1\n\n    return pell_1\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      12.71875
    ],
    [
      "def pell_number(n: int) -> int:\n    \"\"\"\n    >>> pell_number(1)\n    0\n    >>> pell_number(2)\n    1\n    >>> pell_number(3)\n    2\n    >>> pell_number(4)\n    5\n    >>> pell_number(5)\n    15\n    >>> pell_number(6)\n    25\n    >>> pell_number(7)\n    57\n    >>> pell_number(8)\n    119\n    >>> pell_number(9)\n    277\n    >>> pell_number(10)\n    575\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return pell_number(n - 1) + 2 * pell_number(n - 2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      8.9296875
    ],
    [
      "def pell(n: int) -> int:\n    \"\"\"\n    >>> pell(1)\n    0\n    >>> pell(2)\n    1\n    >>> pell(3)\n    2\n    >>> pell(4)\n    5\n    >>> pell(5)\n    15\n    >>> pell(6)\n    35\n    >>> pell(7)\n    77\n    >>> pell(8)\n    199\n    >>> pell(9)\n    519\n    >>> pell(10)\n    1285\n    >>> pell(11)\n    3369\n    >>> pell(12)\n    8970\n    >>> pell(13)\n    25401\n    \"\"\"\n    if n == 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    prev = 0\n    curr = 1\n\n    for _ in range(3, n + 1):\n        temp = 2 * curr + prev\n        prev = curr\n        curr = temp\n\n    return curr\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      8.7421875
    ],
    [
      "def nth_pell_number(n):\n    \"\"\"\n    Calculates the nth pell number.\n\n    >>> nth_pell_number(1)\n    0\n    >>> nth_pell_number(2)\n    1\n    >>> nth_pell_number(3)\n    2\n    >>> nth_pell_number(4)\n    5\n    >>> nth_pell_number(5)\n    15\n    >>> nth_pell_number(6)\n    57\n    >>> nth_pell_number(7)\n    237\n    >>> nth_pell_number(8)\n    897\n    >>> nth_pell_number(9)\n    3597\n    >>> nth_pell_number(10)\n    13990\n    >>> nth_pell_number(11)\n    57951\n    >>> nth_pell_number(12)\n    216267\n    >>> nth_pell_number(13)\n    896891\n    >>> nth_pell_number(14)\n    3596913\n    >>> nth_pell_number(15)\n    13997001\n    \"\"\"\n    if n == 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    return nth_pell_number(n - 1) + 2 * nth_pell_number(n - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      8.7109375
    ],
    [
      "def pell_number(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell_number(n-1) + 2 * pell_number(n-2)\n\n\ndef pell_number_dp(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell_number_dp(n-1) + 2 * pell_number_dp(n-2)\n\n\ndef pell_number_dp_optimized(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n):\n            c = 2 * b + a\n            a = b\n            b = c\n        return b\n\n\ndef main():\n    n = int(input(\"Enter the nth pell number to calculate: \"))\n    print(f\"The nth Pell number is: {pell_number(n)}\")\n    print(f\"The nth Pell number is: {pell_number_dp(n)}\")\n    print(f\"The nth Pell number is: {pell_number_dp_optimized(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      7.4765625
    ],
    [
      "import math\n\ndef pell(n):\n    \"\"\"\n    Return the nth pell number.\n    \"\"\"\n    if n < 1:\n        raise ValueError('n must be greater than zero')\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    prev = 0\n    curr = 1\n    for _ in range(n - 2):\n        prev, curr = curr, prev + 2 * curr\n\n    return curr\n\ndef test_pell():\n    \"\"\"\n    >>> pell(1)\n    0\n    >>> pell(2)\n    1\n    >>> pell(3)\n    2\n    >>> pell(4)\n    5\n    >>> pell(5)\n    12\n    >>> pell(6)\n    29\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      7.41015625
    ],
    [
      "import math\nfrom typing import List\n\n\ndef pell_number(n: int) -> int:\n    \"\"\"\n    Pell numbers are generated by the formula pell(n) = pell(n - 1) + 2 * pell(n - 2).\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Pell number must be greater than or equal to 1\")\n\n    if n == 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    return pell_number(n - 1) + 2 * pell_number(n - 2)\n\n\ndef pell_numbers(n: int) -> List[int]:\n    \"\"\"\n    Pell numbers are generated by the formula pell(n) = pell(n - 1) + 2 * pell(n - 2).\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Pell number must be greater than or equal to 1\")\n\n    if n == 1:\n        return [0]\n\n    if n == 2:\n        return [0, 1]\n\n    prev_pells = pell_numbers(n - 1)\n\n    pells = prev_pells[:]\n    pells.append(prev_pells[-1] + 2 * prev_pells[-2])\n\n    return pells\n\n\ndef pell_sequence(n: int) -> List[int]:\n    \"\"\"\n    Pell numbers are generated by the formula pell(n) = pell(n - 1) + 2 * pell(n - 2).\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Pell number must be greater than or equal to 1\")\n\n    if n == 1:\n        return [0]\n\n    if n == 2:\n        return [0, 1]\n\n    prev_pells = pell_sequence(n - 1)\n\n    pells = prev_pells[:]\n    pells.append(prev_pells[-1] + 2 * prev_pells[-2])\n\n    return pells",
      5.6875
    ],
    [
      "def nth_pell_number(n):\n    \"\"\"\n    >>> nth_pell_number(1)\n    0\n    >>> nth_pell_number(2)\n    1\n    >>> nth_pell_number(3)\n    2\n    >>> nth_pell_number(4)\n    5\n    >>> nth_pell_number(5)\n    12\n    >>> nth_pell_number(6)\n    29\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    nth_pell_number_list = [0, 1]\n    for i in range(2, n + 1):\n        nth_pell_number_list.append(nth_pell_number_list[i - 1] + 2 * nth_pell_number_list[i - 2])\n\n    return nth_pell_number_list[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      4.6328125
    ],
    [
      "import unittest\n\n\ndef pell_number(n: int) -> int:\n    \"\"\"\n    Pell number is calculated using the following formula:\n\n    P_n = P_n-1 + 2 * P_n-2\n\n    where P_0 = 0 and P_1 = 1\n\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if n <= 1:\n        return n\n\n    prev_prev = 0\n    prev = 1\n    for _ in range(2, n + 1):\n        curr = prev + 2 * prev_prev\n        prev_prev = prev\n        prev = curr\n\n    return curr\n\n\nclass TestSuite(unittest.TestCase):\n\n    def test_pell_number_0(self):\n\n        self.assertEqual(pell_number(0), 0)\n\n    def test_pell_number_1(self):\n\n        self.assertEqual(pell_number(1), 1)\n\n    def test_pell_number_2(self):\n\n        self.assertEqual(pell_number(2), 2)\n\n    def test_pell_number_3(self):\n\n        self.assertEqual(pell_number(3), 5)\n\n    def test_pell_number_4(self):\n\n        self.assertEqual(pell_number(4), 15)\n\n    def test_pell_number_5(self):\n\n        self.assertEqual(pell_number(5), 57)\n\n    def test_pell_number_6(self):\n\n        self.assertEqual(pell_number(6), 267)\n\n\nif __name__ == '__main__':\n\n    unittest.main()",
      4.5234375
    ],
    [
      "def pell_number(n):\n    if n < 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return pell_number(n - 1) + 2 * pell_number(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(pell_number(10))",
      4.22265625
    ],
    [
      "def pell(n):\n    \"\"\"\n    Calculate the nth pell number.\n    \"\"\"\n    if n <= 0:\n        return -1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)",
      3.744140625
    ],
    [
      "def pell(n):\n    \"\"\"\n    >>> pell(1)\n    0\n    >>> pell(2)\n    1\n    >>> pell(3)\n    2\n    >>> pell(4)\n    5\n    >>> pell(5)\n    15\n    >>> pell(6)\n    57\n    >>> pell(7)\n    227\n    >>> pell(8)\n    879\n    >>> pell(9)\n    3908\n    >>> pell(10)\n    19603\n    >>> pell(11)\n    119443\n    >>> pell(12)\n    873713\n    >>> pell(13)\n    7607087\n    >>> pell(14)\n    7607087\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      3.349609375
    ],
    [
      "def pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * pell(n - 1) + 2 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(pell(n))",
      3.26171875
    ],
    [
      "def pell_number(n):\n    \"\"\"\n    Return the nth pell number.\n    >>> pell_number(0)\n    0\n    >>> pell_number(1)\n    1\n    >>> pell_number(2)\n    2\n    >>> pell_number(3)\n    5\n    >>> pell_number(4)\n    15\n    >>> pell_number(5)\n    57\n    >>> pell_number(6)\n    237\n    \"\"\"\n    # Base Case\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    # Recursive Case\n    return pell_number(n - 1) + 2 * pell_number(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      2.935546875
    ],
    [
      "def nth_pell_number(n: int) -> int:\n    \"\"\"\n    Pell number is a number in the sequence of Pell numbers.\n    The first few Pell numbers are:\n    1, 2, 5, 15, 57, 239, ...\n    >>> nth_pell_number(1)\n    1\n    >>> nth_pell_number(2)\n    2\n    >>> nth_pell_number(3)\n    5\n    >>> nth_pell_number(4)\n    15\n    >>> nth_pell_number(5)\n    57\n    >>> nth_pell_number(6)\n    239\n    >>> nth_pell_number(7)\n    897\n    >>> nth_pell_number(8)\n    3535\n    >>> nth_pell_number(9)\n    11025\n    >>> nth_pell_number(10)\n    27219\n    >>> nth_pell_number(11)\n    55279\n    >>> nth_pell_number(12)\n    115975\n    >>> nth_pell_number(13)\n    242581\n    \"\"\"\n    if n == 1:\n        return 1\n    return nth_pell_number(n - 1) + 2 * nth_pell_number(n - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      2.884765625
    ],
    [
      "import unittest\n\n\ndef pell_number(n):\n    \"\"\"Returns the nth pell number.\"\"\"\n\n    if n < 0:\n        raise ValueError(\"Negative numbers are not allowed.\")\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    return pell_number(n - 1) + 2 * pell_number(n - 2)\n\n\nclass PellNumberTest(unittest.TestCase):\n\n    def test_pell_number(self):\n        self.assertEqual(pell_number(0), 0)\n        self.assertEqual(pell_number(1), 1)\n        self.assertEqual(pell_number(2), 2)\n        self.assertEqual(pell_number(3), 5)\n        self.assertEqual(pell_number(4), 15)\n        self.assertEqual(pell_number(5), 57)\n        self.assertEqual(pell_number(6), 239)\n        self.assertEqual(pell_number(7), 897)\n        self.assertEqual(pell_number(8), 3551)\n\n        with self.assertRaises(ValueError):\n            pell_number(-1)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      2.6953125
    ],
    [
      "def pell_number(n: int) -> int:\n    \"\"\"\n    Pell numbers are generated by the recurrence relation:\n\n    Pn = 2Pn-1 + Pn-2\n\n    >>> pell_number(0)\n    0\n    >>> pell_number(1)\n    1\n    >>> pell_number(2)\n    2\n    >>> pell_number(3)\n    5\n    >>> pell_number(4)\n    15\n    >>> pell_number(5)\n    57\n    >>> pell_number(6)\n    239\n    >>> pell_number(7)\n    897\n    >>> pell_number(8)\n    3533\n    >>> pell_number(9)\n    12915\n    >>> pell_number(10)\n    55207\n    >>> pell_number(11)\n    227915\n    >>> pell_number(12)\n    974295\n    >>> pell_number(13)\n    4500647\n    >>> pell_number(14)\n    20444689\n    >>> pell_number(15)\n    101813155\n    >>> pell_number(16)\n    505697305\n    >>> pell_number(17)\n    2610846205\n    >>> pell_number(18)\n    13362154075\n    >>> pell_number(19)\n    75286380925\n    >>> pell_number(20)\n    405079784325\n    >>> pell_number(21)\n    2217622531285\n    >>> pell_number(22)\n    12403457743625\n    >>> pell_number(23)\n    75743864602025\n    >>>",
      2.4609375
    ],
    [
      "def pell_num(n):\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    return pell_num(n-1)+2*pell_num(n-2)\n\ndef pell_num_dp(n):\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    dp=[0]*(n+1)\n    dp[1]=0\n    dp[2]=1\n    for i in range(3,n+1):\n        dp[i]=dp[i-1]+2*dp[i-2]\n    return dp[n]\n\nif __name__==\"__main__\":\n    for i in range(1,11):\n        print(pell_num_dp(i))",
      2.3203125
    ],
    [
      "import unittest\n\n\ndef pell(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return pell(n - 2) + 2 * pell(n - 1)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(pell(1), 1)\n        self.assertEqual(pell(2), 2)\n        self.assertEqual(pell(3), 5)\n        self.assertEqual(pell(4), 15)\n        self.assertEqual(pell(5), 36)\n        self.assertEqual(pell(6), 95)\n        self.assertEqual(pell(7), 265)\n        self.assertEqual(pell(8), 815)\n        self.assertEqual(pell(9), 2115)\n        self.assertEqual(pell(10), 5715)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      2.021484375
    ],
    [
      "import math\n\ndef pell(n):\n    return int(math.sqrt(2 * (2 ** n - 1)))\n\nif __name__ == '__main__':\n    print(pell(4))",
      2.021484375
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n - 2) + 2 * pell(n - 1)",
      1.33984375
    ],
    [
      "def pell_num(n):\n    \"\"\"Return nth pell number.\"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    return pell_num(n - 1) + 2 * pell_num(n - 2) + 2 * pell_num(n - 3)\n\n\ndef main():\n    \"\"\"Main\"\"\"\n    print(pell_num(100))\n\nif __name__ == '__main__':\n    main()",
      1.0068359375
    ],
    [
      "def pell_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell_num(n - 2) + 2 * pell_num(n - 1)\n\n\ndef pell_num_dp(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        t = [0] * (n + 1)\n        t[1] = 1\n        t[2] = 2\n        for i in range(3, n + 1):\n            t[i] = t[i - 2] + 2 * t[i - 1]\n        return t[n]\n\n\nif __name__ == \"__main__\":\n    num = 10\n    print(\"Nth Pell number is:\", pell_num_dp(num))",
      0.84375
    ],
    [
      "def nth_pell_number(n):\n    \"\"\"\n    This function calculates the nth pell number.\n    >>> nth_pell_number(1)\n    0\n    >>> nth_pell_number(2)\n    1\n    >>> nth_pell_number(3)\n    2\n    >>> nth_pell_number(4)\n    5\n    >>> nth_pell_number(5)\n    15\n    >>> nth_pell_number(6)\n    57\n    >>> nth_pell_number(7)\n    79\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        return nth_pell_number(n - 1) + 2 * nth_pell_number(n - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      0.8193359375
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print(i, pell(i))",
      0.798828125
    ],
    [
      "def pell_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return pell_number(n - 1) + 4 * pell_number(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(pell_number(10))",
      0.595703125
    ],
    [
      "def nth_pell(n):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    # Calculate the first two pell numbers.\n    pell1 = 0\n    pell2 = 1\n\n    for i in range(2, n + 1):\n        # Calculate next pell number.\n        pell_i = 2 * pell2 + pell1\n\n        # Update pell1 and pell2.\n        pell1 = pell2\n        pell2 = pell_i\n\n    return pell_i\n\n\ndef main():\n    n = int(input('Enter n: '))\n    print(f'The {n}th pell number is {nth_pell(n)}.')\n\n\nif __name__ == '__main__':\n    main()",
      0.5849609375
    ],
    [
      "def pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return pell(n - 1) + 4 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    for i in range(10):\n        print(pell(i))",
      0.463623046875
    ],
    [
      "def pell(n: int) -> int:\n    \"\"\"\n    >>> pell(1)\n    0\n    >>> pell(2)\n    1\n    >>> pell(3)\n    2\n    >>> pell(4)\n    5\n    >>> pell(5)\n    15\n    >>> pell(6)\n    22\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n\n    def _pell(n: int, memo: dict[int, int]) -> int:\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            memo[1] = 0\n            return 0\n        if n == 2:\n            memo[2] = 1\n            return 1\n\n        memo[n] = _pell(n - 1, memo) ** 2 + 2 * _pell(n - 2, memo) ** 2\n        return memo[n]\n\n    return _pell(n, {})\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.2724609375
    ],
    [
      "import unittest\n\ndef pell(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    return 2*pell(n-1) + pell(n-2)\n\n\nclass TestPell(unittest.TestCase):\n    def test_pell(self):\n        self.assertEqual(pell(0), 0)\n        self.assertEqual(pell(1), 1)\n        self.assertEqual(pell(2), 2)\n        self.assertEqual(pell(3), 5)\n        self.assertEqual(pell(4), 15)\n        self.assertEqual(pell(5), 57)\n\nif __name__ == \"__main__\":\n    unittest.main()",
      0.2379150390625
    ],
    [
      "def nth_pell(n):\n    \"\"\"\n    Calculate the nth pell number.\n\n    :param n: number of pell number to calculate\n    :type n: int\n    :return: nth pell number\n    :rtype: int\n    \"\"\"\n    pell = [1, 2]\n    for i in range(2, n):\n        pell.append(2 * pell[i - 1] + pell[i - 2])\n    return pell[n - 1]\n\n\nif __name__ == \"__main__\":\n    print(nth_pell(int(input().strip())))",
      0.1326904296875
    ],
    [
      "def pell(n: int) -> int:\n    \"\"\"\n    This is a recursive solution, which is not the most efficient.\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return pell(n - 1) + 2 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(f\"Pell {n} is: {pell(n)}\")",
      0.0572509765625
    ],
    [
      "def pell_number(n):\n    \"\"\"\n    Calculate the nth pell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return pell_number(n-1) + 2 * pell_number(n-2)\n\n\ndef main():\n    \"\"\"\n    Print the first 10 pell numbers.\n    \"\"\"\n    for i in range(10):\n        print(pell_number(i))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.0418701171875
    ],
    [
      "def pell(n):\n    \"\"\"Return the nth pell number.\"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return pell(n - 1) + 2 * pell(n - 2)\n\ndef test_pell():\n    \"\"\"Test pell function.\"\"\"\n    assert pell(1) == 0\n    assert pell(2) == 1\n    assert pell(3) == 2\n    assert pell(4) == 5\n    assert pell(5) == 15",
      -0.0662841796875
    ],
    [
      "from math import sqrt\n\n\ndef pell_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2 * pell_number(n // 2)\n    if n % 2 == 1:\n        return 2 * pell_number((n - 1) // 2) + 1\n\n\ndef pell_number_iter(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2 * pell_number_iter(n // 2)\n    if n % 2 == 1:\n        return 2 * pell_number_iter((n - 1) // 2) + 1\n\n\nif __name__ == \"__main__\":\n    print(pell_number(4))\n    print(pell_number_iter(4))",
      -0.08087158203125
    ],
    [
      "import unittest\n\n\ndef nth_pell_number(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 2 * nth_pell_number(n - 1) + 2 * nth_pell_number(n - 2)\n\n\nclass TestNthPellNumber(unittest.TestCase):\n    def test_nth_pell_number(self):\n        self.assertEqual(nth_pell_number(1), 0)\n        self.assertEqual(nth_pell_number(2), 1)\n        self.assertEqual(nth_pell_number(3), 2)\n        self.assertEqual(nth_pell_number(4), 5)\n        self.assertEqual(nth_pell_number(5), 15)\n        self.assertEqual(nth_pell_number(6), 57)\n        self.assertEqual(nth_pell_number(7), 227)\n        self.assertEqual(nth_pell_number(8), 870)\n        self.assertEqual(nth_pell_number(9), 3855)\n        self.assertEqual(nth_pell_number(10), 19730)\n        self.assertEqual(nth_pell_number(11), 98775)\n        self.assertEqual(nth_pell_number(12), 595945)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -0.2130126953125
    ],
    [
      "def pell(n: int) -> int:\n    \"\"\"\n    This function calculates the nth pell number.\n    >>> pell(1)\n    0\n    >>> pell(2)\n    1\n    >>> pell(3)\n    2\n    >>> pell(4)\n    5\n    >>> pell(5)\n    15\n    >>> pell(6)\n    5\n    >>> pell(7)\n    29\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 5\n    if n == 5:\n        return 15\n    if n == 6:\n        return 5\n    if n == 7:\n        return 29\n    return pell(n - 3) + 2 * pell(n - 2) + 2 * pell(n - 1) + pell(n - 6)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    print(pell(int(input().strip())))",
      -0.2900390625
    ],
    [
      "from math import sqrt\n\n\ndef pell(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    return pell(n - 1) + 2 * pell(n - 2)\n\n\ndef pell_math(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    return (sqrt(1 + 8 * pell_math(n - 1)) - 1) / 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(f\"pell({i}) = {pell(i)}\")\n        print(f\"pell_math({i}) = {pell_math(i)}\")",
      -0.36083984375
    ],
    [
      "import unittest\nfrom math import sqrt\nfrom time import time\n\n\ndef pell(n: int):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    pell_2 = 1\n    pell_1 = 0\n\n    for _ in range(n - 1):\n        pell_2, pell_1 = 2 * pell_2 + pell_1, pell_2\n\n    return pell_2\n\n\nclass Tests(unittest.TestCase):\n    def test_solution(self):\n        t0 = time()\n        for i in range(1, 1000000):\n            self.assertEqual(pell(i), pell_rec(i))\n        print(time() - t0)\n\n\ndef pell_rec(n: int):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    return 2 * pell_rec(n - 1) + pell_rec(n - 2)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.390625
    ],
    [
      "import unittest\n\n\ndef pell(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1\n\n    return pell(n - 1) + 4 * pell(n // 2)\n\n\nclass PellNumberTest(unittest.TestCase):\n\n    def test_pell_number(self):\n        self.assertEqual(0, pell(1))\n        self.assertEqual(1, pell(2))\n        self.assertEqual(2, pell(3))\n        self.assertEqual(12, pell(6))\n        self.assertEqual(505, pell(10))\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -0.399658203125
    ],
    [
      "def pell(n: int) -> int:\n    \"\"\"\n    Returns nth pell number.\n    >>> pell(1)\n    0\n    >>> pell(2)\n    1\n    >>> pell(3)\n    2\n    >>> pell(4)\n    5\n    >>> pell(5)\n    15\n    >>> pell(6)\n    29\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return pell(n - 1) + 2 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.431640625
    ],
    [
      "def nth_pell_number(n: int) -> int:\n    \"\"\"\n    >>> nth_pell_number(1)\n    1\n    >>> nth_pell_number(2)\n    2\n    >>> nth_pell_number(3)\n    5\n    >>> nth_pell_number(4)\n    15\n    >>> nth_pell_number(5)\n    57\n    \"\"\"\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    pell_numbers = [0, 1]\n\n    for i in range(2, n):\n        pell_numbers.append(pell_numbers[i - 1] + 2 * pell_numbers[i - 2])\n\n    return pell_numbers[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.54150390625
    ],
    [
      "import unittest\n\n\ndef pell(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    return pell(n - 2) + 4 * pell(n - 1)\n\n\nclass PellNumberTest(unittest.TestCase):\n\n    def test_pell(self):\n        self.assertEqual(pell(0), 0)\n        self.assertEqual(pell(1), 1)\n        self.assertEqual(pell(2), 2)\n        self.assertEqual(pell(3), 5)\n        self.assertEqual(pell(4), 15)\n        self.assertEqual(pell(5), 57)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -0.625
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    print(pell(n))",
      -0.6533203125
    ],
    [
      "def pell(n):\n\tif n == 1:\n\t\treturn 0\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn pell(n-1) + 2*pell(n-2)\n\nprint pell(int(raw_input()))",
      -0.85595703125
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return pell(n - 1) + 2 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(pell(n))",
      -0.85595703125
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)\n\n\ndef main():\n    for i in range(1, 11):\n        print(pell(i))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85595703125
    ],
    [
      "def pell(n):\n    return (2*((4**(n+1))-(2**(n+1)))+1)\n\n\nif __name__ == \"__main__\":\n    print pell(3)",
      -0.85595703125
    ],
    [
      "def nth_pell_number(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n\n    prev_prev = 0\n    prev = 1\n    curr = 2\n\n    for i in range(3, n):\n        curr = prev + 2 * prev_prev\n        prev_prev = prev\n        prev = curr\n\n    return curr",
      -0.85595703125
    ],
    [
      "def pell_number(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return pell_number(n - 1) + 2 * pell_number(n - 2)\n\n\nprint(pell_number(6))",
      -0.85693359375
    ],
    [
      "def pell_number(n):\n    \"\"\"Calculates the nth pell number.\"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return pell_number(n - 1) + 2 * pell_number(n - 2)",
      -0.85693359375
    ],
    [
      "def pell_number(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell_number(n - 1) + 2 * pell_number(n - 2)\n\n\ndef pell_number_dp(n):\n    pell_numbers = [0, 1]\n    for i in range(2, n + 1):\n        pell_numbers.append(pell_numbers[i - 1] + 2 * pell_numbers[i - 2])\n    return pell_numbers[n]\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(i, pell_number(i))",
      -0.85693359375
    ],
    [
      "from math import sqrt\n\n\ndef pell_number(n):\n    \"\"\"\n    Calculate the nth pell number.\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2 * pell_number(n // 2) ** 2 - 1\n    else:\n        return 2 * pell_number((n - 1) // 2) ** 2 + 1\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 101):\n        print(i, pell_number(i))",
      -0.85693359375
    ],
    [
      "def pell(n: int):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n % 2 == 0:\n        return pell(n // 2) * pell(n // 2)\n    if n % 2 == 1:\n        return (pell(n // 2) + 1) * (pell(n // 2) + 1)\n\n\nif __name__ == \"__main__\":\n    print(pell(10))",
      -0.85693359375
    ],
    [
      "def nth_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return nth_pell(n - 1) + 2 * nth_pell(n - 2)\n\ndef main():\n    for i in range(20):\n        print(i, nth_pell(i))\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "import unittest\n\n\ndef pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return pell(n - 1) + 4 * pell(n - 2)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(pell(0), 0)\n        self.assertEqual(pell(1), 1)\n        self.assertEqual(pell(2), 2)\n        self.assertEqual(pell(3), 5)\n        self.assertEqual(pell(4), 15)\n        self.assertEqual(pell(5), 57)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -0.85693359375
    ],
    [
      "def pell_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return pell_num(n - 1) + 2 * pell_num(n - 2)\n\nprint(pell_num(10))",
      -0.85693359375
    ],
    [
      "def pell(n):\n    # base case\n    if n == 0:\n        return 0\n    # recursive case\n    if n % 2 == 1:\n        return 2 * pell(n - 1) + 1\n    else:\n        return 2 * pell(n // 2)\n\nprint(pell(10))",
      -0.85693359375
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(pell(6))",
      -0.85791015625
    ],
    [
      "def nth_pell(n):\n    \"\"\"\n    nth pell number is 2*n+1\n    \"\"\"\n    return 2*n+1\n\n\nif __name__ == '__main__':\n    print nth_pell(100)",
      -0.85791015625
    ],
    [
      "from math import sqrt\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef pell_number(n: int) -> int:\n    \"\"\"Return nth pell number.\"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    return pell_number(n - 1) + 2 * pell_number(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(pell_number(6))",
      -0.85791015625
    ],
    [
      "def pell_number(n):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return pell_number(n-1) + 2*pell_number(n-2)",
      -0.85791015625
    ],
    [
      "def pell(n):\n    if n < 1:\n        raise ValueError('n should be greater than 0')\n    return pell_helper(n, 2, 1)\n\n\ndef pell_helper(n, k, p):\n    if k > n:\n        return p\n    else:\n        return pell_helper(n, k + 1, pell_helper(n, k + 2, p + 2 * p))\n\n\nif __name__ == '__main__':\n    print(pell(1))\n    print(pell(2))\n    print(pell(3))\n    print(pell(4))\n    print(pell(5))\n    print(pell(6))\n    print(pell(7))\n    print(pell(8))\n    print(pell(9))\n    print(pell(10))\n    print(pell(11))\n    print(pell(12))\n    print(pell(13))\n    print(pell(14))\n    print(pell(15))\n    print(pell(16))",
      -0.85791015625
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return pell(n - 2) + 2 * pell(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(pell(5))",
      -0.85791015625
    ],
    [
      "def pell(n):\n    return n * (n * (3 * n - 1) // 2) ** 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(pell(i))",
      -0.85791015625
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)\n\n\nprint(pell(6))",
      -0.85791015625
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n-1) + 2*pell(n-2)\n\nprint(pell(5))",
      -0.85791015625
    ],
    [
      "def nth_pell(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return nth_pell(n-1) + 2 * nth_pell(n-2)\n\nif __name__ == \"__main__\":\n    print nth_pell(10)",
      -0.8583984375
    ],
    [
      "def pell_number(n):\n    \"\"\"Returns the nth Pell number\"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return pell_number(n - 1) + 2 * pell_number(n - 2)\n\ndef main():\n    for i in range(1, 10):\n        print(pell_number(i))\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def pell_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    return (pell_number(n - 1) + pell_number(n - 2)) * 2",
      -0.8583984375
    ],
    [
      "def pell_number(n):\n    \"\"\"\n    The Pell numbers are a sequence of integers defined by the formula:\n    Pn=2n^2-1\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (2 * (n ** 2) - 1)\n\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(f'Pell number {i} is {pell_number(i)}')",
      -0.8583984375
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return pell(n - 1) + 2 * pell(n - 2)\n\n\nprint(pell(10))",
      -0.8583984375
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return pell(n - 2) + 2 * pell(n - 1)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(pell(i))",
      -0.85888671875
    ],
    [
      "def nth_pell_number(n):\n    \"\"\"\n    Pell number is the sum of two squares.\n    This function is a recursive implementation.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n % 2 == 0:\n        return nth_pell_number(n - 1) + nth_pell_number(n - 2)\n    else:\n        return 2 * nth_pell_number(n - 1) + 1\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(i, nth_pell_number(i))",
      -0.85888671875
    ],
    [
      "from math import sqrt\n\n\ndef pell_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n\n    # P_n = 2 * P_{n-1} + (P_{n-2})^2\n    P_1 = 1\n    P_2 = 2\n    P_3 = 5\n    if n <= 3:\n        return P_n\n    P_n = 2 * P_2 + (P_1) ** 2\n    for i in range(4, n):\n        P_n = 2 * P_n + (P_n - P_3) ** 2\n    return P_n\n\n\nif __name__ == \"__main__\":\n    print(pell_number(10))",
      -0.85888671875
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)\n\n\nfor i in range(1, 10):\n    print(pell(i))",
      -0.86083984375
    ],
    [
      "def pell(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)",
      -0.86083984375
    ],
    [
      "def pell(n):\n    \"\"\"\n    Pell number is a number sequence defined as follows:\n    P(1) = 0\n    P(2) = 1\n    P(n) = 2P(n-1) - P(n-2)\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return 2 * pell(n - 1) - pell(n - 2)",
      -0.86083984375
    ],
    [
      "def pell_num(n):\n    if n < 1:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    return pell_num(n - 1) + 2 * pell_num(n - 2)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(pell_num(i))",
      -0.86083984375
    ],
    [
      "def nth_pell(n):\n    \"\"\"\n    Calculate the nth Pell number.\n    \"\"\"\n    if n == 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    return nth_pell(n - 1) + 2 * nth_pell(n - 2)",
      -0.86083984375
    ],
    [
      "def pell(n):\n    \"\"\"\n    Pell numbers are the numbers in the triangle of integers.\n    \"\"\"\n    pell_list = [0, 1]\n    for i in range(1, n):\n        pell_list.append(2 * pell_list[i] + pell_list[i - 1])\n    return pell_list[n]\n\n\nprint(pell(5))",
      -0.86083984375
    ],
    [
      "def pell_number(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return pell_number(n-1) + 2*pell_number(n-2)",
      -0.86083984375
    ],
    [
      "def nth_pell_number(n):\n    # base case\n    if n == 1:\n        return 0\n\n    # calculate the pell numbers recursively\n    return 2 * nth_pell_number(n - 1) + 2 * nth_pell_number(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(nth_pell_number(10))",
      -0.8720703125
    ],
    [
      "def pell(n: int) -> int:\n    \"\"\"\n    Calculates the nth pell number.\n\n    >>> pell(1)\n    2\n    >>> pell(2)\n    15\n    >>> pell(3)\n    301\n    >>> pell(4)\n    2702\n    >>> pell(5)\n    19027\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 15\n    else:\n        return pell(n - 1) + 2 * pell(n - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -1.7255859375
    ],
    [
      "def pell(n):\n    \"\"\"\n    Pell numbers are a sequence of integers where\n    the nth number is given by the formula Pn = (2n-1)^2 - n^2.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (2 * n - 1) ** 2 - n ** 2\n\n\nif __name__ == \"__main__\":\n    print(pell(1))\n    print(pell(2))\n    print(pell(3))\n    print(pell(4))",
      -2.138671875
    ],
    [
      "import unittest\nfrom math import sqrt\n\n\ndef nth_pell(n):\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return nth_pell(n - 1) + 2 * nth_pell(n - 2)\n\n\nclass TestNthPell(unittest.TestCase):\n    def test_nth_pell(self):\n        self.assertEqual(nth_pell(0), 0)\n        self.assertEqual(nth_pell(1), 1)\n        self.assertEqual(nth_pell(2), 2)\n        self.assertEqual(nth_pell(3), 5)\n        self.assertEqual(nth_pell(4), 15)\n        self.assertEqual(nth_pell(5), 57)\n        self.assertEqual(nth_pell(6), 177)\n        self.assertEqual(nth_pell(7), 577)\n        self.assertEqual(nth_pell(8), 1771)\n        self.assertEqual(nth_pell(9), 5777)\n        self.assertEqual(nth_pell(10), 17711)\n        self.assertEqual(nth_pell(11), 57717)\n        self.assertEqual(nth_pell(12), 177177)\n        self.assertEqual(nth_pell(13), 5771777)\n        self.assertEqual(nth_pell(14), 17717779)\n        self.assertEqual(nth_pell(15), 577177797)\n        self.assertEqual(nth_pell(16), 1771777979)\n        self.assert",
      -2.138671875
    ],
    [
      "import unittest\nfrom math import sqrt\n\ndef pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * pell(n - 1) + 2 * pell(n - 2)\n\nclass PellTest(unittest.TestCase):\n    def test_pell(self):\n        self.assertEqual(pell(0), 0)\n        self.assertEqual(pell(1), 1)\n        self.assertEqual(pell(2), 2)\n        self.assertEqual(pell(3), 5)\n        self.assertEqual(pell(4), 15)\n        self.assertEqual(pell(5), 57)\n        self.assertEqual(pell(6), 239)\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -2.55859375
    ],
    [
      "def pell(n):\n    \"\"\"\n    pell(n) -> P_n\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 2 * pell(n / 2) ** 2 - 1\n    else:\n        return 2 * pell(n - 1) * pell(n // 2)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"n = \"))\n    print(pell(n))",
      -3.0
    ],
    [
      "import math\n\n\ndef nth_pell(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    a = nth_pell(n - 1)\n    b = nth_pell(n - 2)\n\n    return a + 2 * b\n\n\ndef main():\n    n = int(input())\n    print(nth_pell(n))\n\n\nif __name__ == '__main__':\n    main()",
      -3.228515625
    ],
    [
      "def pell(n: int) -> int:\n    \"\"\"\n    Return the nth pell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    p_2 = 2\n    p_1 = 1\n    p = p_2 - p_1\n    for _ in range(n - 2):\n        p_2 = 2 * p\n        p_1 = p\n        p = p_2 - p_1\n    return p\n\n\nif __name__ == \"__main__\":\n    print(pell(1))\n    print(pell(2))\n    print(pell(3))\n    print(pell(4))\n    print(pell(5))\n    print(pell(6))",
      -4.44140625
    ],
    [
      "def nth_pell_number(n):\n    # This is the sequence:\n    # 0, 1, 2, 5, 12, 29, 70, 169, 408, 987, 2378, 6148, 12547, 29696, 71749, 177147, 436620, 1144437, 2746749, 7058458\n    # It is the number of ways to tile a 2xn rectangle.\n\n    # The first few terms are:\n    # 0, 1, 2, 5, 12, 29, 70, 169, 408, 987, 2378, 6148, 12547, 29696, 71749, 177147, 436620, 1144437, 2746749, 7058458\n    # 0, 1, 2, 5, 12, 29, 70, 169, 408, 987, 2378, 6148, 12547, 29696, 71749, 177147, 436620, 1144437, 2746749, 7058458\n    # 0, 1, 2, 5, 12, 29, 70, 169, 408, 987, 2378, 6148, 12547, 29696, 71749, 177147, 436620, 1144437, 2746749, 70",
      -5.00390625
    ],
    [
      "from math import sqrt\nfrom decimal import Decimal, getcontext\n\ndef pell(n):\n    \"\"\"\n    Calculates the nth pell number.\n    \"\"\"\n\n    if n <= 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 5\n\n    if n == 4:\n        return 15\n\n    if n == 5:\n        return 35\n\n    if n == 6:\n        return 76\n\n    if n == 7:\n        return 195\n\n    if n == 8:\n        return 485\n\n    if n == 9:\n        return 1185\n\n    if n == 10:\n        return 2915\n\n    if n == 11:\n        return 7615\n\n    if n == 12:\n        return 21785\n\n    if n == 13:\n        return 61185\n\n    if n == 14:\n        return 182815\n\n    if n == 15:\n        return 518915\n\n    if n == 16:\n        return 1771455\n\n    if n == 17:\n        return 5595885\n\n    if n == 18:\n        return 18891915\n\n    if n == 19:\n        return 64361915\n\n    if n == 20:\n        return 217830915\n\n    if n == 21:\n        return 761458855\n\n    if n == 22:\n        return 291548855\n\n    if n == 23:\n        return 891094195\n\n    if n == 24:\n        return 2679142145\n\n    if n ==",
      -6.3671875
    ],
    [
      "def pell(n: int):\n    \"\"\"\n    >>> pell(0)\n    0\n    >>> pell(1)\n    1\n    >>> pell(2)\n    2\n    >>> pell(3)\n    5\n    >>> pell(4)\n    15\n    >>> pell(5)\n    57\n    >>> pell(6)\n    227\n    >>> pell(7)\n    874\n    >>> pell(8)\n    3797\n    >>> pell(9)\n    15944\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2 * pell(n - 1)\n    if n % 2 == 1:\n        return pell(n - 1) + 4 * pell(n // 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.3671875
    ],
    [
      "def pell(n):\n    # base case\n    if n == 1:\n        return 0\n\n    # recursive case\n    return 2 * pell(n - 1) + pell(n - 2)\n\n\ndef test(n, expected_answer):\n    answer = pell(n)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\nif __name__ == \"__main__\":\n    test(1, 0)\n    test(2, 1)\n    test(3, 2)\n    test(4, 5)\n    test(5, 15)\n    test(6, 57)\n    test(7, 227)\n    print(\"All tests passed!\")",
      -6.796875
    ],
    [
      "from math import floor\n\ndef nth_pell_number(n):\n    \"\"\"Returns the nth Pell number.\"\"\"\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1\n    if n == 3:\n        return 2\n    return nth_pell_number(n // 2) + 2 * nth_pell_number(floor(n / 2))\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    n = int(input('Enter the nth Pell number: '))\n    print(f'The {n}th Pell number is {nth_pell_number(n)}.')\n\nif __name__ == '__main__':\n    main()",
      -7.04296875
    ],
    [
      "from math import sqrt\n\n\ndef pell_number(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return pell_number(n / 2) ** 2\n    if n % 2 == 1:\n        return (pell_number(n / 2) ** 2) + 2 * pell_number((n - 1) / 2) ** 2\n\n\ndef pell_number_2(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n % 2 == 0:\n        return pell_number_2(n / 2) ** 2 + pell_number_2(n / 2)\n    if n % 2 == 1:\n        return pell_number_2(n / 2) ** 2 + 2 * pell_number_2((n - 1) / 2)\n\n\ndef pell_number_3(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    return pell_number_3(n / 2) ** 2 + pell_number_3((n - 1) / 2) ** 2\n\n\ndef pell_number_4(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n % 2 == 0:\n        return pell_number_4(n / 2) ** 2 + pell_number_4(n / 2)\n    if n % 2 == 1:\n        return pell_number_4(n / 2) ** 2 + 2 * pell_number_4((n - 1) / 2)\n\n\ndef pell_number_5(n):\n    if",
      -7.7578125
    ],
    [
      "import math\n\n\ndef pell(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 1:\n        return 1\n\n    else:\n        return 2 * pell(n - 1) + 2 * pell(n - 2)\n\n\ndef pell_recursive(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 1:\n        return 1\n\n    return 2 * pell_recursive(n - 1) + 2 * pell_recursive(n - 2)\n\n\ndef pell_iterative(n):\n    a1 = 0\n    a2 = 1\n    b1 = 1\n    b2 = 0\n\n    if n == 1:\n        return a1\n\n    for _ in range(n - 1):\n        a1 = b1\n        b1 = b2\n        a2 = b1 + 2 * a1\n        b2 = a2\n\n    return a2\n\n\ndef pell_closed_form(n):\n    return 2 * (4 ** (n - 1) - 1) / 3\n\n\nprint(pell(10))\nprint(pell_recursive(10))\nprint(pell_iterative(10))\nprint(pell_closed_form(10))\nprint(pell(1000))\nprint(pell_recursive(1000))\nprint(pell_iterative(1000))\nprint(pell_closed_form(1000))",
      -8.3046875
    ],
    [
      "def pell_number(n):\n    \"\"\"\n    Calculate the nth Pell number.\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2 * pell_number(n // 2) ** 2\n    else:\n        return 2 * pell_number(n // 2) * (2 * pell_number(n // 2) + 1)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(pell_number(i))",
      -8.5390625
    ],
    [
      "def pell_number(n):\n    \"\"\"\n    Pell number is the nth number in the sequence of Pell numbers.\n\n    :param n: number\n    :return: pell number\n    \"\"\"\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return (pell_number(n - 1) + 2 * pell_number(n // 2)) ** 2\n    else:\n        return (pell_number(n - 1) + 2 * pell_number((n - 1) // 2)) ** 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(i, pell_number(i))",
      -12.921875
    ],
    [
      "def pell(n):\n    # Base case\n    if n == 1:\n        return 0\n\n    # Recursive case\n    else:\n        # Pell numbers\n        pn = [0]\n\n        # Calculate the first 10 pell numbers\n        for i in range(1, 11):\n            # Calculate the pell number\n            pn.append(pn[i - 1] + 2 * i)\n\n        # Return the nth pell number\n        return pn[n]\n\n\n# Tests\nassert pell(1) == 0\nassert pell(2) == 1\nassert pell(3) == 2\nassert pell(4) == 5\nassert pell(5) == 10\nassert pell(6) == 17\nassert pell(7) == 32\nassert pell(8) == 57\nassert pell(9) == 92\nassert pell(10) == 147",
      -13.4921875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}