{
  "problem": {
    "task_id": "MBPP/60",
    "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
    "test_list": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ],
    "challenge_test_list": [],
    "problem_id": 49
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def max_diff(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_diff = 0\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] > max_diff:\n            max_diff = arr[i] - arr[i - 1]\n    return max_diff\n\n\nprint(max_diff([1, 2, 3, 4, 5, 3, 2, 1]))",
      3.2109375
    ],
    [
      "from typing import List\n\n\ndef max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 1:\n        return 1\n\n    max_length, current_length = 1, 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            current_length += 1\n        else:\n            current_length = 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(max_length([1, 2, 3, 4, 5]))",
      2.1796875
    ],
    [
      "from collections import deque\n\n\ndef max_diff(arr):\n    n = len(arr)\n    max_length = 0\n    q = deque()\n\n    for i in range(n):\n        while q and arr[i] - arr[q[-1]] >= 0:\n            q.pop()\n        q.append(i)\n\n    q = deque()\n\n    for i in range(n-1, -1, -1):\n        while q and arr[i] - arr[q[-1]] >= 0:\n            q.pop()\n        q.append(i)\n\n        max_length = max(max_length, len(q))\n\n    return max_length\n\n\ndef main():\n    arr = [1, 5, 7, 1, 7, 2, 1, 1]\n    print(max_diff(arr))\n\n\nif __name__ == '__main__':\n    main()",
      1.44140625
    ],
    [
      "from typing import List\n\n\ndef max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    length = len(arr)\n\n    if length < 2:\n        return length\n\n    result = 1\n    max_length = 1\n\n    for i in range(1, length):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            max_length += 1\n        else:\n            max_length = 1\n\n        if max_length > result:\n            result = max_length\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 2, 3, 4]) == 3\n    assert max_length([1, 1, 1, 1, 1]) == 1\n    assert max_length([1, 2, 4, 6, 7, 8, 9]) == 4\n    assert max_length([1, 1, 1, 1, 1, 1, 1, 1]) == 1",
      1.2783203125
    ],
    [
      "def length_of_longest_subsequence(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 4, 2, 1, 3, 5, 1, 4]\n    assert length_of_longest_subsequence(arr) == 6",
      1.0361328125
    ],
    [
      "from typing import List\n\n\ndef length_of_longest_subsequence(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_length = 0\n\n    for i in range(1, len(arr)):\n        if arr[i - 1] + 1 == arr[i]:\n            max_length += 1\n        else:\n            max_length = 1\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert length_of_longest_subsequence([1, 2, 3, 4, 5]) == 3\n    assert length_of_longest_subsequence([1, 3, 5, 7, 9]) == 1",
      1.0224609375
    ],
    [
      "from typing import List\n\n\ndef max_length_with_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) < 2:\n        return len(arr)\n\n    prev_diff = arr[1] - arr[0]\n\n    max_length = 2\n\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i - 1]\n\n        if diff == prev_diff:\n            max_length += 1\n        elif diff * prev_diff < 0:\n            max_length = 2\n\n        prev_diff = diff\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_length_with_diff([1, 3, 5, 7, 9]) == 3\n    assert max_length_with_diff([1, 4, 7, 10, 12, 15, 18]) == 4\n    assert max_length_with_diff([1, 3, 5, 7, 9, 11, 13, 15]) == 6",
      0.8662109375
    ],
    [
      "from typing import List\n\n\ndef max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    length = 1\n    max_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            length += 1\n            if length > max_length:\n                max_length = length\n        else:\n            length = 1\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 2, 3, 4, 5]) == 3\n    assert max_length([1, 1, 2, 3, 4, 5]) == 3\n    assert max_length([1, 2, 5, 0, 3]) == 2",
      0.822265625
    ],
    [
      "from typing import List\n\n\ndef find_max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    diff = [0]\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == diff[i - 1]:\n            diff.append(diff[-1] + 1)\n        else:\n            diff.append(0)\n\n    max_length = 0\n    for i in range(len(diff)):\n        max_length = max(max_length, diff[i])\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(find_max_length([1, 2, 3, 4, 5]))\n    print(find_max_length([1, 3, 100, 4, 5, 3]))",
      0.80908203125
    ],
    [
      "from typing import List\n\n\ndef max_len_with_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    diff_count = 0\n\n    max_len = 0\n\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 0:\n            diff_count += 1\n            max_len = max(diff_count, max_len)\n        else:\n            diff_count = 0\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_len_with_diff([1, 5, 3, 4, 2, 3, 7, 1, 3, 5]) == 5",
      0.7451171875
    ],
    [
      "def max_length(array: list) -> int:\n    \"\"\"\n    The idea is to keep track of the max difference between adjacent elements\n    for each index in the array. We do this by keeping a dictionary of the\n    difference between the maximum value and the minimum value seen so far\n    for each index.\n\n    If the current index has a maximum difference greater than the current\n    maximum difference in the dictionary, we update the dictionary with\n    the current maximum difference.\n    \"\"\"\n    max_diffs = {}\n\n    for index, value in enumerate(array):\n        if index == 0:\n            min_value = value\n            max_diffs[index] = 0\n        else:\n            min_value = min(min_value, value)\n            max_diffs[index] = max(max_diffs[index - 1], value - min_value)\n\n    return max(max_diffs.values())\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 6, 2, 3, 5, 10, 14, 8, 12]) == 4",
      0.673828125
    ],
    [
      "from collections import defaultdict\n\n\ndef longest_subsequence_with_difference(arr):\n    if len(arr) < 2:\n        return len(arr)\n\n    max_length = 1\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            max_length += 1\n        else:\n            max_length = 1\n\n    return max_length\n\n\ndef longest_subsequence_with_difference_v2(arr):\n    if len(arr) < 2:\n        return len(arr)\n\n    count = defaultdict(int)\n    count[1] = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            count[i + 1] = count[i] + 1\n\n    return max(count.values())\n\n\nif __name__ == \"__main__\":\n    print(longest_subsequence_with_difference([1, 10, 2, 9, 3, 8, 5]))\n    print(longest_subsequence_with_difference_v2([1, 10, 2, 9, 3, 8, 5]))",
      0.6357421875
    ],
    [
      "from typing import List\n\n\ndef max_sequence_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    prev = 0\n    curr = 0\n    max_length = 0\n\n    for num in arr:\n        prev, curr = curr, max(curr + 1, prev + 1 if num - 1 == prev else 1)\n        max_length = max(max_length, curr)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_sequence_length([]) == 0\n    assert max_sequence_length([1]) == 1\n    assert max_sequence_length([1, 3, 5, 7, 9]) == 4\n    assert max_sequence_length([1, 3, 5, 8, 11]) == 3",
      0.56494140625
    ],
    [
      "from typing import List\n\n\ndef max_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    if len(arr) < 2:\n        return 0\n\n    max_diff = 0\n\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i - 1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i - 1])\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff([1, 1, 2, 2, 3, 4]) == 3",
      0.56201171875
    ],
    [
      "def max_length(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    prev = 0\n    max_len = 0\n\n    for i in arr:\n        if i - prev > 0:\n            prev = i\n        else:\n            prev = prev + i\n\n        if prev > max_len:\n            max_len = prev\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(max_length([1, 5, 10, 4, 2, 1, 5, 1, 5, 10, 4, 2, 1]))",
      0.1302490234375
    ],
    [
      "from typing import List\n\n\ndef max_subseq_diff(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_subseq = 0\n    max_diff = 0\n\n    for i in range(len(nums)):\n        max_subseq = max(max_subseq, i + 1)\n        max_diff = max(max_diff, max_subseq - (i + 1))\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_subseq_diff([1, 2, 3, 1, 2, 3]) == 3\n    assert max_subseq_diff([1, 2, 3, 4, 5]) == 4\n    assert max_subseq_diff([1, 1, 1]) == 2\n    assert max_subseq_diff([1, 2, 2, 3, 4, 4, 5]) == 4",
      0.09661865234375
    ],
    [
      "from typing import List\n\n\ndef max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_len = 0\n\n    prev = arr[0]\n    temp = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - prev == 1:\n            temp += 1\n            max_len = max(max_len, temp)\n        else:\n            temp = 1\n\n        prev = arr[i]\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 5, 8, 4, 2, 3]) == 3\n    assert max_length([1, 5, 8, 11, 3, 2, 4, 12, 10, 7, 6, 15]) == 4",
      0.03778076171875
    ],
    [
      "def max_diff_subseq(arr):\n    \"\"\"\n    This is a typical DP problem.\n    \"\"\"\n    n = len(arr)\n    max_diff = 0\n    for i in range(n):\n        max_diff = max(max_diff, arr[i])\n\n    dp = [0] * (max_diff + 1)\n    for i in range(n):\n        for j in range(arr[i] + 1):\n            dp[j] = max(dp[j], dp[j - arr[i]] + arr[i])\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    print(max_diff_subseq([3, 5, 3, 2, 4]))\n    print(max_diff_subseq([5, 1, 3, 3, 2, 4]))\n    print(max_diff_subseq([7, 2, 3, 5, 5, 6, 7, 8, 1]))",
      0.0158233642578125
    ],
    [
      "from typing import List\n\n\ndef max_subseq_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_length = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] > 1:\n                break\n            max_length = max(max_length, j - i + 1)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_subseq_diff([3, 7, 1, 2, 5, 2, 4]) == 4\n    assert max_subseq_diff([1, 3, 5, 7, 9]) == 4\n    assert max_subseq_diff([9, 4, 7, 2, 10]) == 3",
      -0.038543701171875
    ],
    [
      "def max_length_subsequence(arr):\n    n = len(arr)\n    dp = [0 for i in range(n)]\n    for i in range(n):\n        dp[i] = 1\n    for i in range(n):\n        for j in range(i):\n            if arr[i] - arr[j] == 0:\n                continue\n            if arr[i] - arr[j] > 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n\n\ndef main():\n    arr = [1, 5, 7, 8, 5, 3, 4, 2, 1]\n    print(max_length_subsequence(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.0567626953125
    ],
    [
      "from collections import deque\nfrom typing import List\n\n\ndef max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param arr: list of integers\n    :return: maximum length of subsequence\n    \"\"\"\n    if not arr:\n        return 0\n\n    stack = deque()\n    max_length = 0\n\n    for num in arr:\n        if not stack or stack[-1][1] <= num:\n            stack.append((num, num))\n        else:\n            stack.append((num, stack[-1][0]))\n        max_length = max(max_length, stack[-1][0] - stack[-1][1])\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(max_length([5, 1, 3, 5, 2, 7, 9, 8, 1]))",
      -0.258544921875
    ],
    [
      "from typing import List\n\n\ndef max_length_subsequence(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_length = 0\n\n    for i in range(len(arr) - 1):\n        max_length = max(max_length, arr[i + 1] - arr[i])\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(max_length_subsequence([1, 10, 100, 1000]))",
      -0.462890625
    ],
    [
      "from typing import List\n\n\ndef max_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) < 2:\n        return 0\n\n    max_length = 1\n    diff = 1\n\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i - 1]) <= diff:\n            diff = abs(arr[i] - arr[i - 1])\n            max_length += 1\n        else:\n            diff = abs(arr[i] - arr[i - 1])\n            max_length = 1\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_diff([2, 1, 1, 2, 3, 1]) == 2\n    assert max_diff([2, 1, 2, 3, 1]) == 1\n    assert max_diff([2, 1, 2, 3, 1, 1]) == 3\n    assert max_diff([1, 1, 1, 1]) == 1",
      -0.56396484375
    ],
    [
      "def max_length_subsequence_difference(arr):\n    n = len(arr)\n    max_len = 0\n    max_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n                max_len = 1\n            elif abs(arr[i] - arr[j]) == max_diff:\n                max_len = max(max_len, j - i)\n    return max_len\n\n\ndef max_length_subsequence_difference_eff(arr):\n    n = len(arr)\n    max_len = 0\n    max_diff = 0\n    for i in range(n):\n        diff = arr[i]\n        current_len = 1\n        for j in range(i + 1, n):\n            if arr[j] - diff > max_diff:\n                max_diff = arr[j] - diff\n                max_len = 1\n            elif arr[j] - diff == max_diff:\n                current_len += 1\n                max_len = max(max_len, current_len)\n    return max_len\n\n\nprint(max_length_subsequence_difference([1, 2, 3, 4]))\nprint(max_length_subsequence_difference([1, 2, 4, 4, 4, 4, 5]))\nprint(max_length_subsequence_difference([1, 2, 3, 4, 5, 6, 7]))\nprint(max_length_subsequence_difference_eff([1, 2, 3, 4]))\nprint(max_length_subsequence_difference_eff([1, 2, 4, 4, 4, 4, 5]))\nprint(max_length_subsequence_difference_eff([1, 2, 3, 4, 5, 6, 7]))",
      -0.6181640625
    ],
    [
      "from typing import List\n\n\ndef max_sequence_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_diff = 0\n    max_sub_array = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = arr[j] - arr[i]\n            if diff < 0:\n                continue\n\n            sub_array = j - i + 1\n            if diff > max_diff:\n                max_diff = diff\n                max_sub_array = sub_array\n            elif diff == max_diff:\n                if sub_array > max_sub_array:\n                    max_sub_array = sub_array\n\n    return max_sub_array\n\n\nif __name__ == \"__main__\":\n    assert max_sequence_diff([1, 3, 5, 8, 6, 4, 2, 3, 1, 7]) == 5\n    assert max_sequence_diff([1, 1, 1, 1]) == 3",
      -0.71240234375
    ],
    [
      "from collections import defaultdict\n\n\ndef max_length(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) < 2:\n        return len(arr)\n\n    d = defaultdict(int)\n    max_len = 0\n\n    for i in range(len(arr)):\n        d[arr[i]] = i\n\n    for i in range(len(arr) - 1):\n        diff = arr[i + 1] - arr[i]\n        max_len = max(max_len, i - d[diff])\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 3, 5, 7, 9, 11]) == 4",
      -0.76123046875
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef max_sequence(array: List[int]) -> int:\n    max_len = 1\n    max_diff = 0\n\n    for i in range(1, len(array)):\n        if abs(array[i] - array[i - 1]) <= max_diff:\n            max_len += 1\n        else:\n            max_len = 1\n\n        max_diff = abs(array[i] - array[i - 1])\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(max_sequence([10, 5, 9, 8, 10, 6, 12, 10]))",
      -0.79541015625
    ],
    [
      "def get_max_length(arr):\n    if not arr:\n        return 0\n    max_length = 0\n    diff = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] != diff:\n            diff = arr[i] - arr[i - 1]\n            max_length = 1\n        else:\n            max_length += 1\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(get_max_length([1, 1, 1, 1]))",
      -0.85595703125
    ],
    [
      "def diff_subseq_length(arr):\n    \"\"\"\n    TC: O(n^2)\n    SC: O(1)\n    \"\"\"\n    max_length = 1\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == 1:\n                max_length = max(max_length, j - i + 1)\n    return max_length\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(diff_subseq_length(arr))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef max_sequence_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_diff = 0\n\n    for i in range(len(arr)):\n        max_diff = max(max_diff, arr[i] - arr[i - 1] + 1) if i > 0 else max_diff\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_sequence_diff([1, 3, 5, 7, 9, 11, 13, 15]))",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef max_len_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    length = len(arr)\n\n    if length < 2:\n        return 0\n\n    diff_dict: dict[int, int] = {arr[0]: 1}\n\n    for i in range(1, length):\n        diff_dict[arr[i]] = diff_dict.get(arr[i], 0) + 1\n\n        for key in diff_dict:\n            diff_dict[key] = max(diff_dict[key], diff_dict.get(key + arr[i], 0))\n\n    return max(diff_dict.values())\n\n\nif __name__ == \"__main__\":\n    assert max_len_diff([1, 3, 2, 1, 4, 2, 3, 2, 2]) == 5",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef max_length_subsequence(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_length = 1\n\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if abs(array[i] - array[j]) == 1:\n                max_length += 1\n            else:\n                break\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_length_subsequence([1, 5, 7, 8, 5, 3, 4, 2, 1]) == 5",
      -0.85693359375
    ],
    [
      "def length_of_subsequence(arr):\n    # Write your code here.\n\tprev = 0\n\tmaxi = 0\n\tfor i in arr:\n\t    if i-prev > maxi:\n\t        maxi = i-prev\n\t    prev = i\n\treturn maxi",
      -0.85791015625
    ],
    [
      "def max_subsequence_difference(array):\n    max_difference = 0\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[j] - array[i] > max_difference:\n                max_difference = array[j] - array[i]\n    return max_difference",
      -0.85791015625
    ],
    [
      "def find_max_length(arr):\n    sub_sequence_length = 1\n    max_length = 1\n\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] == 1:\n            sub_sequence_length += 1\n        else:\n            sub_sequence_length = 1\n        max_length = max(sub_sequence_length, max_length)\n\n    return max_length",
      -0.85791015625
    ],
    [
      "def max_subseq_diff(arr):\n    n = len(arr)\n    max_diff = 0\n    max_len = 1\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i - 1])\n            max_len = 2\n        elif abs(arr[i] - arr[i - 1]) == max_diff:\n            max_len += 1\n\n    return max_len\n\n\nprint(max_subseq_diff([1, 1, 2, 3, 4, 5, 7, 8]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef max_length_subsequence(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if abs(arr[i] - arr[j]) < abs(arr[j] - arr[j - 1]):\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert max_length_subsequence([1, 5, 10, 4, 9, 3, 8]) == 4",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef max_length_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not arr:\n        return 0\n\n    max_len = 0\n\n    for i in range(len(arr) - 1):\n        if arr[i] - arr[i + 1] > 0:\n            max_len += 1\n        else:\n            max_len = 1\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_length_diff([1, 5, 10, 4, 2, 1, 7, 8]) == 4",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef max_length_subsequence(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    prev, max_length = arr[0], 1\n\n    for num in arr[1:]:\n        if num - prev > max_length:\n            max_length += 1\n        elif num - prev == max_length:\n            max_length += 1\n        else:\n            max_length = 1\n\n        prev = num\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_length_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef length_of_max_subsequence(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if len(arr) <= 2:\n        return len(arr)\n\n    max_length = 0\n    max_diff = 0\n\n    for i in range(len(arr) - 1):\n        diff = arr[i] - arr[i + 1]\n        max_diff = max(max_diff, diff)\n        max_length = max(max_length, 2 + max_diff)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert length_of_max_subsequence([1, 2, 10, 4, 7, 4, 2, 1]) == 5",
      -0.85888671875
    ],
    [
      "def difference(array):\n    if len(array) < 2:\n        return 0\n    max_length = 1\n    prev = array[0]\n    for i in range(1, len(array)):\n        if array[i] - prev > 1:\n            prev = array[i]\n            max_length += 1\n    return max_length\n\n\nif __name__ == '__main__':\n    print(difference([1, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(difference([1, 2, 3, 4, 5]))\n    print(difference([1, 2, 3, 4, 4, 5, 6]))",
      -0.85888671875
    ],
    [
      "def max_subsequence(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [arr[0]]\n    for i in range(1, len(arr)):\n        dp.append(dp[i - 1] + arr[i] - arr[i - 1])\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence([1, 1, 1, 1, 1, 1]) == 5\n    assert max_subsequence([1, 1, 1, 2, 1, 1]) == 5\n    assert max_subsequence([1, 2, 3, 1, 4]) == 4\n    assert max_subsequence([1, 2, 3, 4, 5]) == 4",
      -0.85888671875
    ],
    [
      "from typing import List\n\n\ndef length_of_subarray_with_difference(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_length = 0\n    diff = 0\n\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] != diff:\n            diff = arr[i + 1] - arr[i]\n            length = 2\n        else:\n            length += 1\n\n        if length > max_length:\n            max_length = length\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert length_of_subarray_with_difference([1, 5, 10, 4, 2, 3, 7, 8, 9, 12, 18, 11, 15, 16]) == 4",
      -0.90478515625
    ],
    [
      "def max_length(arr):\n    max_len = 1\n    diff = 0\n\n    for i in range(len(arr)):\n        if i == 0:\n            diff = arr[i+1] - arr[i]\n        elif i == len(arr) - 1:\n            if diff == arr[i] - arr[i-1]:\n                max_len += 1\n            else:\n                diff = arr[i] - arr[i-1]\n        else:\n            if diff == arr[i] - arr[i-1]:\n                max_len += 1\n            else:\n                diff = arr[i] - arr[i-1]\n                max_len = 1\n\n    return max_len\n\n\ndef main():\n    arr = [3, 5, 4, 2, 1, 3, 2, 5, 1, 2, 3, 4]\n    print(max_length(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.91796875
    ],
    [
      "def max_length(arr):\n    if len(arr) < 2:\n        return 0\n\n    dp = [0] * len(arr)\n    dp[0] = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = 1\n\n    return max(dp)\n\n\ndef max_length_eff(arr):\n    if len(arr) < 2:\n        return 0\n\n    prev_max = 1\n    max_len = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            prev_max += 1\n        else:\n            prev_max = 1\n\n        if prev_max > max_len:\n            max_len = prev_max\n\n    return max_len\n\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr2 = [1, 3, 5, 7, 9, 11, 13, 15]\n    arr3 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n    arr4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n    print(\"Input: \" + str(arr1))\n    print(\"Output: \" + str(max_length(arr1)))\n\n    print(\"Input: \" + str(arr2))\n    print(\"Output: \" + str(max_length(arr2)))\n\n    print(\"Input:",
      -0.953125
    ],
    [
      "from typing import List\n\n\ndef max_subsequence_difference(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) < 2:\n        return 0\n\n    prev_max, prev_min = arr[0], arr[0]\n    curr_max, curr_min = arr[0], arr[0]\n\n    for num in arr[1:]:\n        curr_max = max(num, num - prev_min, prev_max)\n        curr_min = min(num, num - prev_max, prev_min)\n\n        prev_max, prev_min = curr_max, curr_min\n\n    return curr_max\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence_difference([]) == 0\n    assert max_subsequence_difference([1, 2, 3]) == 2\n    assert max_subsequence_difference([1, 2, 100, 3]) == 100\n    assert max_subsequence_difference([1, 2, 10, 9, 100, 101, 3]) == 102",
      -0.96533203125
    ],
    [
      "def max_subsequence(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    sequence = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] - sequence[-1] == 1:\n            sequence.append(arr[i])\n        elif sequence and arr[i] - sequence[-1] > 1:\n            sequence = [arr[i]]\n\n    return len(sequence)",
      -0.99462890625
    ],
    [
      "from typing import List\n\n\ndef find_max_len(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if len(arr) < 2:\n        return len(arr)\n\n    stack = [arr[0]]\n    max_len = 1\n\n    for i in range(1, len(arr)):\n        if stack[-1] + 1 == arr[i]:\n            stack.append(arr[i])\n            max_len = max(max_len, len(stack))\n        else:\n            stack = [arr[i]]\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert find_max_len([1, 2, 3, 4]) == 2\n    assert find_max_len([1, 3, 5, 7]) == 1\n    assert find_max_len([1, 5, 7, 8, 5]) == 3",
      -1.26953125
    ],
    [
      "def max_length(arr):\n    max_len = 0\n    for i in range(len(arr)-1):\n        curr_len = 1\n        for j in range(i+1, len(arr)):\n            if arr[j]-arr[i] == 1:\n                curr_len += 1\n            else:\n                break\n        max_len = max(max_len, curr_len)\n    return max_len\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    max_length(arr)",
      -1.4326171875
    ],
    [
      "def max_subsequence_diff(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return len(arr)\n\n    max_diff = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, arr[i] - min_value)\n        min_value = min(min_value, arr[i])\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_subsequence_diff([1, 3, 5, 1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))",
      -1.51171875
    ],
    [
      "def max_length(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # Create a hashmap to keep track of the elements\n    hashmap = {}\n    # Set the first element as the max length\n    max_length = 1\n    # Set the first element as the current length\n    current_length = 1\n\n    # Loop over the array\n    for i in range(1, len(arr)):\n        # If the current element minus the previous is in the hashmap\n        if arr[i] - arr[i-1] in hashmap:\n            # Set the current length to the value in the hashmap plus 1\n            current_length = hashmap[arr[i] - arr[i-1]] + 1\n        # If the current element minus the previous is not in the hashmap\n        else:\n            # Set the current length to 1\n            current_length = 1\n        # Update the hashmap with the current length\n        hashmap[arr[i] - arr[i-1]] = current_length\n        # If the current length is greater than the max length, update the max length\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length\n\nprint(max_length([1,1,1,1])) # 1\nprint(max_length([2,1,2,3,4,3,2,1,3,4,6,2,4,1,2,3,4,6,1,4,3,2,1,2,3,4,6])) # 5\nprint(max_length([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
      -1.560546875
    ],
    [
      "def max_length_subsequence(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    max_len = 0\n    max_diff = 0\n\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        max_len += 1\n\n        if diff == 0:\n            continue\n        elif diff < 0:\n            max_len = 0\n        elif diff > max_diff:\n            max_diff = diff\n\n    return max_len\n\n\ndef max_length_subsequence2(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    max_len = 0\n    max_diff = 0\n\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        if diff == 0:\n            continue\n        elif diff < 0:\n            max_len = 0\n        elif diff > max_diff:\n            max_diff = diff\n            max_len += 1\n        else:\n            max_len += 1\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    # arr = [1, 5, 3, 3, 4, 2, 1, 4, 2, 1, 2]\n    # arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # arr = []\n    print(max_length_subsequence(arr))\n    print(max_length_subsequence2(arr))",
      -1.5859375
    ],
    [
      "from typing import List\n\n\ndef max_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    max_length = 0\n    max_length_cache: List[int] = [0] * len(arr)\n\n    for i in range(len(arr)):\n        max_length_cache[i] = 1\n\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1:\n                max_length_cache[i] = max(max_length_cache[i], max_length_cache[j] + 1)\n\n        max_length = max(max_length, max_length_cache[i])\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 7\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 8\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 9\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 10",
      -1.6357421875
    ],
    [
      "from typing import List\n\n\ndef subsequence_diff(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(nums) == 1:\n        return 1\n\n    diff = 0\n    max_diff = 0\n\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i - 1]\n        max_diff = max(max_diff, diff)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert subsequence_diff([1, 2, 1, 3, 4]) == 3",
      -1.66015625
    ],
    [
      "from typing import List\n\n\ndef max_subsequence_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_length = 1\n\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        length = 2\n\n        for j in range(i + 2, len(arr)):\n            if abs(arr[j] - arr[j - 1]) == diff:\n                length += 1\n            else:\n                break\n\n        max_length = max(max_length, length)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence_diff([1, 10, 10, 10]) == 3\n    assert max_subsequence_diff([1, 10, 10, 9]) == 3\n    assert max_subsequence_diff([1, 10, 10, 10, 10]) == 4\n    assert max_subsequence_diff([1, 10, 10, 9, 10]) == 3\n    assert max_subsequence_diff([1, 10, 10, 9, 10, 10, 10]) == 4\n    assert max_subsequence_diff([1, 10, 10, 9, 10, 10, 10, 10]) == 5\n    assert max_subsequence_diff([1, 10, 10, 9, 10, 10, 10, 10, 10]) == 6",
      -1.7412109375
    ],
    [
      "def max_diff(arr):\n    if len(arr) <= 2:\n        return 0\n\n    max_length = 0\n    for i in range(len(arr)):\n        max_length = max(max_length, arr[i] - arr[i-1])\n\n    return max_length\n\ndef max_diff_dp(arr):\n    if len(arr) <= 2:\n        return 0\n\n    max_length = 0\n    for i in range(1, len(arr)):\n        max_length = max(max_length, arr[i] - arr[i-1])\n\n    return max_length\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    arr = [2, 10, 8, 4, 6, 12]\n    arr = [1, 2, 3, 4, 5, 6]\n    arr = [1, 2, 3, 4, 5, 4, 3, 2, 1]\n    result = max_diff_dp(arr)\n    print(result)\n\n\nmain()",
      -1.787109375
    ],
    [
      "from typing import List\n\n\ndef max_subsequence_difference(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    diff = 0\n\n    for i in range(1, len(arr)):\n        diff = max(diff, abs(arr[i] - arr[i - 1]))\n\n    return diff\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence_difference([10, 15, 12, 10, 14, 18]) == 4",
      -2.013671875
    ],
    [
      "def max_subsequence(arr):\n    if len(arr) < 2:\n        return len(arr)\n\n    prev = arr[0]\n    max_length = 1\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            max_length += 1\n        else:\n            max_length = 1\n        prev = arr[i]\n\n    return max_length\n\n\ndef main():\n\n    arr = [1, 3, 5, 7, 9]\n    result = max_subsequence(arr)\n    print(result)\n\n    arr = [1, 4, 7, 10, 10, 12]\n    result = max_subsequence(arr)\n    print(result)\n\n    arr = [1, 1, 1, 1, 1, 1]\n    result = max_subsequence(arr)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()",
      -2.041015625
    ],
    [
      "from typing import List\n\n\n# O(n) time | O(n) space\ndef longest_subsequence(array: List[int]) -> int:\n    # define a dict to store the max length of the subsequence of each element\n    cache = {\n        array[0]: 1\n    }\n\n    for num in array[1:]:\n        # for each element, check if it's a candidate to be the first element of a subsequence\n        if num - 1 in cache:\n            # if it's a candidate, then it's the max length of the subsequence of the element is the max length of\n            # the subsequence of the element - 1 + 1\n            cache[num] = cache[num - 1] + 1\n        elif num + 1 in cache:\n            # or if it's a candidate, then it's the max length of the subsequence of the element is the max length of\n            # the subsequence of the element + 1\n            cache[num] = cache[num + 1] + 1\n        else:\n            # if not, then it's the max length of the subsequence of the element is 1\n            cache[num] = 1\n\n    return max(cache.values())\n\n\n# O(n) time | O(1) space\ndef longest_subsequence_optimized(array: List[int]) -> int:\n    max_length = 1\n    prev_num = array[0]\n\n    for num in array[1:]:\n        if num - 1 == prev_num:\n            prev_num = num\n            max_length += 1\n        elif num + 1 == prev_num:\n            prev_num = num\n            max_length += 1\n        else:\n            prev_num = num\n            max_length = 1\n\n    return max_length\n\n\nprint(longest_subsequence([10, 7, 8, 9, 7]))\nprint(longest_subsequence([3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]))",
      -2.1015625
    ],
    [
      "from typing import List\n\n\ndef max_length_with_diff(nums: List[int]) -> int:\n    \"\"\"\n    The idea is to calculate the difference between adjacent elements and store it in a new list.\n    Then we calculate the longest increasing subsequence of the new list.\n    >>> max_length_with_diff([1, 5, 3, 4, 2])\n    3\n    >>> max_length_with_diff([2, 1, 5, 3, 4, 2, 1, 5, 3, 4, 2])\n    4\n    >>> max_length_with_diff([1, 1, 1, 1, 1])\n    1\n    >>> max_length_with_diff([2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n    1\n    >>> max_length_with_diff([2, 1, 3, 4, 2])\n    3\n    >>> max_length_with_diff([2, 1, 4, 3, 2])\n    4\n    \"\"\"\n    if not nums:\n        return 0\n\n    diff = [nums[i] - nums[i - 1] for i in range(1, len(nums))]\n    return _longest_increasing_subsequence(diff)\n\n\ndef _longest_increasing_subsequence(nums: List[int]) -> int:\n    \"\"\"\n    Calculate the longest increasing subsequence of the given list.\n    >>> _longest_increasing_subsequence([1, 5, 3, 4, 2])\n    3\n    >>> _longest_increasing_subsequence([2, 1, 5, 3, 4, 2, 1, 5, 3, 4, 2])\n    4\n    >>> _longest_increasing_subsequence([1, 1, 1, 1, 1])\n    1\n    >>> _longest_increasing_subsequence([2, 1, 2, 1, 2,",
      -2.12890625
    ],
    [
      "from typing import List\n\n\ndef max_length_subsequence_difference(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    \"\"\"\n\n    def max_length_subsequence_difference_rec(arr, diff, index):\n        if index == len(arr):\n            return 0\n\n        max_len = 0\n        for i in range(index, len(arr)):\n            if arr[i] - arr[index] == diff:\n                max_len = max(max_len, 1 + max_length_subsequence_difference_rec(arr, diff, i + 1))\n            elif arr[i] - arr[index] > diff:\n                max_len = max(max_len, 1 + max_length_subsequence_difference_rec(arr, arr[i] - arr[index], i + 1))\n\n        return max_len\n\n    if len(arr) < 2:\n        return 0\n\n    max_diff = max(arr[i] - arr[i - 1] for i in range(1, len(arr)))\n\n    return max(max_length_subsequence_difference_rec(arr, diff, 0) for diff in range(max_diff + 1))\n\n\nif __name__ == \"__main__\":\n    assert max_length_subsequence_difference([10, 12, 14, 16, 18]) == 3",
      -2.201171875
    ],
    [
      "from typing import List\n\n\ndef max_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_diff = 0\n\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff([0, 1, 2, 3]) == 3\n    assert max_diff([1, 1, 2, 3]) == 3\n    assert max_diff([1, 2, 3, 4]) == 3\n    assert max_diff([1, 2, 3, 4, 5, 6]) == 5\n    assert max_diff([1, 2, 3, 4, 5, 6, 7]) == 5",
      -2.43359375
    ],
    [
      "from typing import List\n\n\ndef max_diff_sub_sequence(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    n = len(array)\n\n    if n == 0:\n        return 0\n\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if array[i] - array[j] == 0:\n                dp[i] = dp[j] + 1\n\n            elif array[i] - array[j] > 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert max_diff_sub_sequence([1, 1, 2, 3, 4, 4]) == 3\n    assert max_diff_sub_sequence([1, 1, 2, 3, 4, 4, 10, 20]) == 4",
      -2.494140625
    ],
    [
      "def max_length(arr):\n    max_length = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) < 2:\n                max_length = max(max_length, j - i)\n    return max_length\n\n\nprint(max_length([1, 2, 3, 4]))\nprint(max_length([1, 2, 3, 4, 5]))\nprint(max_length([1, 2, 3, 4, 5, 6]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7]))",
      -2.5
    ],
    [
      "from typing import List\n\n\ndef max_seq_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    max_count = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if i == 0:\n            prev = arr[i]\n            count += 1\n        else:\n            if arr[i] - prev == 1:\n                count += 1\n                prev = arr[i]\n            else:\n                max_count = max(max_count, count)\n                count = 0\n                prev = arr[i]\n\n    max_count = max(max_count, count)\n\n    return max_count\n\n\nif __name__ == \"__main__\":\n    assert max_seq_diff([1, 2, 3, 5, 6, 7, 8, 10]) == 5\n    assert max_seq_diff([1, 3, 5, 7, 9]) == 2",
      -2.5390625
    ],
    [
      "from typing import List\n\n\ndef max_subsequence_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) < 2:\n        return 0\n\n    max_subsequence_length = 1\n\n    for i in range(len(arr) - 1):\n        if abs(arr[i + 1] - arr[i]) > max_subsequence_length:\n            max_subsequence_length = abs(arr[i + 1] - arr[i])\n\n    return max_subsequence_length\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence_diff([1, 5, 10, 4, 7]) == 9",
      -2.544921875
    ],
    [
      "from typing import List\n\n\ndef max_subsequence_with_difference(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    prev = array[0]\n    max_length = 1\n    length = 1\n\n    for num in array[1:]:\n        if num - prev == 1:\n            length += 1\n        else:\n            length = 1\n        prev = num\n        max_length = max(max_length, length)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence_with_difference([1, 3, 5, 7, 9]) == 3\n    assert max_subsequence_with_difference([2, 4, 7, 8, 10]) == 3\n    assert max_subsequence_with_difference([1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 5",
      -2.560546875
    ],
    [
      "from typing import List\n\n\ndef subsequence_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_length = 1\n\n    prev_diff = 0\n\n    for i in range(len(arr) - 1):\n        if abs(arr[i] - arr[i + 1]) <= prev_diff:\n            prev_diff = abs(arr[i] - arr[i + 1])\n            max_length += 1\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert subsequence_length([1, 2, 3, 4, 5]) == 3\n    assert subsequence_length([1, 2, 3, 1, 2, 1, 2, 1]) == 6\n    assert subsequence_length([1, 3, 100, 4, 1, 2, 10, 10, 1]) == 5",
      -2.630859375
    ],
    [
      "from typing import List\n\n\n# O(n) time | O(1) space\ndef longest_subsequence_difference(array: List[int]) -> int:\n    max_length = 0\n    for i in range(len(array)):\n        max_length = max(max_length, get_length_for_index(array, i))\n    return max_length\n\n\ndef get_length_for_index(array: List[int], index: int) -> int:\n    length = 1\n    if index + 1 < len(array):\n        length += get_length_for_index(array, index + 1)\n    if index - 1 >= 0:\n        length += get_length_for_index(array, index - 1)\n    return length\n\n\n\"\"\"\nTime complexity: O(n^2)\nSpace complexity: O(1)\n\"\"\"",
      -2.658203125
    ],
    [
      "from typing import List\n\n\ndef max_length_with_difference(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            max_length += 1\n        else:\n            max_length = 1\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_length_with_difference([1, 2, 3, 5, 8, 12, 15]) == 4\n    assert max_length_with_difference([1, 2, 4, 5, 6, 7, 8, 10, 11, 12]) == 4\n    assert max_length_with_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6",
      -2.734375
    ],
    [
      "from typing import List\n\n\ndef max_length(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    prev = array[0]\n    max_len = 1\n    for i in range(1, len(array)):\n        if array[i] - prev > 1:\n            prev = array[i]\n            max_len += 1\n        elif array[i] - prev == 1:\n            prev = array[i]\n            max_len += 1\n        else:\n            prev = array[i]\n            max_len = 1\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_length([1, 3, 5, 4, 7]) == 3",
      -2.90625
    ],
    [
      "from typing import List\n\n\ndef subsequence_with_max_difference(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not array:\n        return 0\n\n    max_length = 1\n    max_diff = 0\n\n    for i in range(1, len(array)):\n        if abs(array[i] - array[i - 1]) > max_diff:\n            max_diff = abs(array[i] - array[i - 1])\n        max_length += 1\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert subsequence_with_max_difference([1, 2, 3, 4, 5]) == 4\n    assert subsequence_with_max_difference([1, 3, 10, 4, 7, 2, 9, 7, 8, 7, 1]) == 5",
      -3.0
    ],
    [
      "from typing import List\n\n\ndef max_diff(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not array:\n        raise ValueError(\"Array must contain at least one element\")\n\n    max_diff = 0\n\n    max_so_far = array[0]\n\n    for i in range(1, len(array)):\n        max_so_far = max(max_so_far + 1, array[i])\n        max_diff = max(max_diff, max_so_far - array[i])\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff([1, 2, 3, 4, 5, 6]) == 4",
      -3.03515625
    ],
    [
      "def difference_sequence(arr):\n    n = len(arr)\n    max_len = 1\n    max_diff = abs(arr[1] - arr[0])\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) > max_diff:\n            max_len += 1\n            max_diff = abs(arr[i] - arr[i - 1])\n        else:\n            max_len = 1\n            max_diff = abs(arr[i] - arr[i - 1])\n    return max_len\n\n\ndef main():\n    print(\"Maximum length of the subsequence: \" +\n          str(difference_sequence([10, 12, 14, 16, 18, 20])))\n    print(\"Maximum length of the subsequence: \" +\n          str(difference_sequence([10, 12, 14, 16, 18, 19])))\n    print(\"Maximum length of the subsequence: \" +\n          str(difference_sequence([10, 12, 14, 16, 18, 20, 21])))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.095703125
    ],
    [
      "from typing import List\n\n\ndef max_length_sub_sequence(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    \"\"\"\n    length = len(arr)\n\n    # If the array has less than 2 elements, return 0\n    if length < 2:\n        return 0\n\n    # Create a sub-array of all adjacent elements\n    sub_arr = [arr[i : i + 2] for i in range(length - 1)]\n\n    # Find the maximum difference between adjacent elements in the sub-array\n    max_diff = max(sub_arr, key=lambda x: abs(x[0] - x[1]))\n\n    # Return the length of the sub-array\n    return len(max_diff)\n\n\nif __name__ == \"__main__\":\n    print(max_length_sub_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(max_length_sub_sequence([1, 3, 100, 4, 7]))\n    print(max_length_sub_sequence([1, 5, 2, 10, 3, 2]))",
      -3.181640625
    ],
    [
      "def max_diff_subseq(array, difference):\n    if len(array) < 2:\n        return len(array)\n\n    max_seq_len = 1\n    max_seq_start = 0\n    max_seq_end = 1\n\n    for i in range(1, len(array)):\n        if array[i] - array[max_seq_end] > difference:\n            if max_seq_end - max_seq_start > max_seq_len:\n                max_seq_len = max_seq_end - max_seq_start\n                max_seq_start = i\n                max_seq_end = i\n            else:\n                max_seq_start = i\n                max_seq_end = i\n\n        elif array[i] - array[max_seq_end] == difference:\n            max_seq_end += 1\n\n    return max_seq_len\n\n\nif __name__ == '__main__':\n    print(max_diff_subseq([1,2,3,4,5,6,8,10,12,15,20], 2))",
      -3.2578125
    ],
    [
      "from typing import List\n\n\ndef max_subsequence_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def helper(arr: List[int], start: int, end: int, diff: int) -> int:\n        if start > end:\n            return 0\n\n        if start == end:\n            return 1\n\n        max_len = 0\n\n        for i in range(start, end + 1):\n            if arr[i] - arr[start] <= diff:\n                max_len = max(\n                    helper(arr, start + 1, end, diff),\n                    helper(arr, start, i - 1, diff),\n                    max_len,\n                )\n\n        return max_len + 1\n\n    return helper(arr, 0, len(arr) - 1, 1)\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence_diff([10, 7, 5, 12, 15, 10]) == 4\n    assert max_subsequence_diff([1, 10, 3, 11, 4, 14, 13, 12, 11, 10]) == 6",
      -3.541015625
    ],
    [
      "from typing import List\n\n\n# O(n) & O(1)\ndef length_of_longest_subsequence_with_difference(arr: List[int]) -> int:\n    max_length = 0\n\n    for i in range(len(arr)):\n        max_length = max(max_length, arr[i] - arr[i - 1] + 1)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert length_of_longest_subsequence_with_difference([1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 13\n    assert length_of_longest_subsequence_with_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 16",
      -3.552734375
    ],
    [
      "def max_len_subsequence(arr):\n    arr.sort()\n    max_len = 0\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] > 0:\n            max_len += 1\n        else:\n            max_len = 0\n        if max_len > 1:\n            return max_len\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(max_len_subsequence([1, 5, 7, 1, 9, 8, 10, 6, 11, 3]))",
      -4.0
    ],
    [
      "from typing import List\n\n\ndef max_subsequence(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    length = len(arr)\n\n    if length < 2:\n        return length\n\n    dp = [1] * length\n\n    for i in range(1, length):\n        for j in range(i):\n            if arr[i] - arr[j] == 0:\n                dp[i] = dp[j] + 1\n            elif arr[i] - arr[j] > 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence([]) == 0\n    assert max_subsequence([1, 2, 3, 4]) == 2\n    assert max_subsequence([1, 1, 1, 1, 1]) == 5\n    assert max_subsequence([1, 2, 3, 4, 5, 6, 7]) == 4\n    assert max_subsequence([1, 1, 1, 2, 3, 4, 5, 6, 7]) == 5\n    assert max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5",
      -4.03125
    ],
    [
      "from typing import List\n\n\ndef max_len_with_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    length = len(arr)\n\n    if length < 3:\n        return length\n\n    max_length = 2\n    max_diff = arr[1] - arr[0]\n    for i in range(1, length - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff > max_diff:\n            max_length += 1\n            max_diff = diff\n        elif diff < max_diff:\n            max_length = 2\n            max_diff = diff\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_len_with_diff([]) == 0\n    assert max_len_with_diff([1]) == 1\n    assert max_len_with_diff([1, 2]) == 2\n    assert max_len_with_diff([1, 2, 3]) == 2\n    assert max_len_with_diff([1, 2, 2]) == 2\n    assert max_len_with_diff([1, 2, 3, 5, 4, 6, 7, 8, 9]) == 5\n    assert max_len_with_diff([1, 2, 3, 5, 3, 4, 6, 7, 8, 9]) == 4",
      -4.27734375
    ],
    [
      "from typing import List\n\n\ndef max_len_subseq_with_diff(nums: List[int]) -> int:\n    \"\"\"\n    :param nums: list of integers\n    :return: maximum length of the subsequence with difference between adjacent elements\n    >>> max_len_subseq_with_diff([1, 1, 1, 1, 1])\n    1\n    >>> max_len_subseq_with_diff([1, 2, 3, 4, 5, 6, 7, 8])\n    4\n    >>> max_len_subseq_with_diff([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9])\n    6\n    >>> max_len_subseq_with_diff([1, 2, 4, 8, 16, 32, 64, 128, 256])\n    1\n    >>> max_len_subseq_with_diff([1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6])\n    6\n    >>> max_len_subseq_with_diff([1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7])\n    7\n    >>> max_len_subseq_with_diff([1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8])\n    8\n    >>> max_len_subseq_with_diff([1,",
      -4.46484375
    ],
    [
      "from typing import List\n\n\ndef length_with_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 2:\n        return len(arr)\n\n    diff = 0\n    max_length = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] != diff:\n            diff = arr[i] - arr[i - 1]\n            max_length += 1\n        else:\n            max_length += 1\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert length_with_diff([1, 2, 1, 3, 4, 1, 2]) == 6\n    assert length_with_diff([1, 2, 3, 4, 5, 6]) == 5\n    assert length_with_diff([1, 3, 10, 4, 7, 2, 1, 7, 12, 8, 10, 12]) == 6",
      -4.63671875
    ],
    [
      "from typing import List\n\n\ndef subsequence_length(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n\n    :param arr: list of numbers\n    :return: maximum length of subsequence\n    \"\"\"\n    if len(arr) < 2:\n        return len(arr)\n\n    max_len = 0\n\n    for i in range(len(arr) - 1):\n        diff = arr[i + 1] - arr[i]\n\n        if diff > 0:\n            max_len += 1\n        else:\n            max_len = 1\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert subsequence_length([5, 3, 8, 6, 4]) == 2\n    assert subsequence_length([4, 5, 3, 8, 6]) == 3\n    assert subsequence_length([3, 5, 8, 6, 4]) == 3\n    assert subsequence_length([5, 8, 6, 3, 4]) == 2\n    assert subsequence_length([5, 5, 5, 5, 5]) == 1\n    assert subsequence_length([1, 2, 3, 4, 5, 6, 7]) == 4",
      -4.6875
    ],
    [
      "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef subsequence_length(arr: List[int]) -> int:\n    diff = arr[0]\n    max_diff = 0\n    max_diff_len = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == diff:\n            max_diff_len += 1\n        else:\n            if max_diff_len > max_diff:\n                max_diff = max_diff_len\n            diff = arr[i] - arr[i - 1]\n            max_diff_len = 2\n\n    return max_diff if max_diff_len > max_diff else max_diff_len\n\n\nif __name__ == \"__main__\":\n    print(subsequence_length([1, 2, 3, 4, 5, 6]))\n    print(subsequence_length([1, 3, 10, 4, 7, 9, 2, 8]))\n    print(subsequence_length([1, 5, 7, 1, 9, 3, 4, 8, 6]))",
      -4.69921875
    ],
    [
      "from collections import defaultdict\n\n\ndef longest_subsequence(arr):\n    # The idea is to find the longest subsequence with difference between adjacent elements.\n    # This problem is similar to longest increasing subsequence problem.\n    # For the longest increasing subsequence problem, we can find the longest increasing subsequence by finding the longest increasing subsequence for each element of the given array.\n    # Since the longest increasing subsequence of each element may not be the longest increasing subsequence of the whole array, we need to find the longest increasing subsequence for each element and then combine them to get the longest increasing subsequence of the whole array.\n    # To find the longest increasing subsequence for each element, we can use dynamic programming.\n    # The idea is to use a dp array to store the maximum length of the longest increasing subsequence for each element.\n    # The dp array can be constructed in a bottom-up manner.\n    # We can start from the last element of the array and find the longest increasing subsequence for it.\n    # Then, we can move to the previous element of the array and find the longest increasing subsequence for it by checking if the previous element is smaller than the current element.\n    # If the previous element is smaller than the current element, then the longest increasing subsequence of the current element is equal to the longest increasing subsequence of the previous element plus 1.\n    # Otherwise, the longest increasing subsequence of the current element is equal to the longest increasing subsequence of the previous element.\n    # This is the idea.\n    # The implementation is the details.\n\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    dp = [1] * n\n\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if arr[j] > arr[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n\ndef longest_subsequence_optimized(arr):\n    # The idea is to use the longest increasing subsequence problem.\n    # We can find the longest increasing subsequence for each element of the given array.\n    # Since the longest increasing subsequence of each",
      -4.7890625
    ],
    [
      "def max_length(arr):\n    \"\"\"\n    Finds the maximum length of the subsequence with difference between adjacent elements for the given array.\n\n    Args:\n       arr(array): Input array\n    Returns:\n       int: Maximum length of the subsequence\n    \"\"\"\n    if not arr:\n        return 0\n\n    dp = [1] * len(arr)\n\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] - arr[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = max_length(arr)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1, 3, 5, 4, 2]\nsolution = 4\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5]\nsolution = 3\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 3, 5, 7, 9, 11]\nsolution = 3\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 3, 5, 7, 9, 11, 13]\nsolution = 4\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 3, 5, 7, 9, 11, 13, 15]\nsolution = 5\ntest_case = [arr, solution]\ntest_function(test_case)",
      -4.94921875
    ],
    [
      "def subsequence_length(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i][i + 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 5, 4, 2, 1, 1]\n    assert subsequence_length(arr) == 6",
      -5.1015625
    ],
    [
      "from typing import List\n\n\ndef max_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    n = len(arr)\n\n    max_diff = 0\n    max_diff_arr = []\n\n    for i in range(n):\n        max_diff_arr.append(arr[i])\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == 1:\n                max_diff_arr.append(arr[j])\n            else:\n                break\n\n        max_diff = max(len(max_diff_arr), max_diff)\n        max_diff_arr = []\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff([1, 5, 7, 8, 5, 3, 4, 2, 1]) == 5",
      -5.203125
    ],
    [
      "from collections import defaultdict\n\n\ndef max_subsequence_diff(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: int\n    >>> max_subsequence_diff([3, 5, 1, 4, 2])\n    2\n    >>> max_subsequence_diff([1, 2, 3, 4, 5])\n    4\n    >>> max_subsequence_diff([1, 1, 1, 1, 1])\n    0\n    \"\"\"\n    diff_dict = defaultdict(int)\n    diff_dict[arr[0]] = 1\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] in diff_dict:\n            diff_dict[arr[i]] = diff_dict[arr[i - 1]] + 1\n        else:\n            diff_dict[arr[i]] = diff_dict[arr[i - 1]]\n    return max(diff_dict.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.671875
    ],
    [
      "from typing import List\n\n\ndef max_len_diff_subseq(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def diff_subseq(arr: List[int], i: int, j: int, diff: int) -> int:\n        if i > j:\n            return 0\n\n        if arr[i] - arr[j] == diff:\n            return 1 + diff_subseq(arr, i + 1, j - 1, diff)\n        else:\n            return max(\n                diff_subseq(arr, i + 1, j, diff), diff_subseq(arr, i, j - 1, diff)\n            )\n\n    max_len = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_len = max(max_len, diff_subseq(arr, i, j, arr[i] - arr[j]))\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    arr = [1, 5, 7, 8, 5, 3, 4, 2, 1]\n    print(max_len_diff_subseq(arr))",
      -5.796875
    ],
    [
      "def max_diff_subsequence(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    diffs = {}\n    max_diff = 0\n\n    for num in arr:\n        if num in diffs:\n            diffs[num] += 1\n        else:\n            diffs[num] = 1\n\n    if len(diffs) == 1:\n        return len(arr)\n\n    for i in range(len(arr) - 1):\n        if arr[i] + 1 in diffs:\n            diffs[arr[i] + 1] -= 1\n        if arr[i] - 1 in diffs:\n            diffs[arr[i] - 1] -= 1\n\n    for num, count in diffs.items():\n        max_diff = max(max_diff, count)\n\n    return max_diff + 1\n\n\nassert max_diff_subsequence([1, 1, 1, 1]) == 1\nassert max_diff_subsequence([1, 2, 3, 4]) == 4\nassert max_diff_subsequence([1, 2, 3, 5, 4]) == 3\nassert max_diff_subsequence([1, 2, 3, 5, 4, 4]) == 4\nassert max_diff_subsequence([1, 2, 3, 5, 4, 4, 4]) == 5",
      -6.6328125
    ],
    [
      "from typing import List\n\n\ndef max_sub_sequence_diff(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_diff = 0\n    max_end = arr[0]\n\n    for num in arr[1:]:\n        max_end = max(num, max_end + num)\n        max_diff = max(max_diff, max_end - num)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_sub_sequence_diff([1, 10, 3, 4, 6, 8, 5, 7]) == 9",
      -6.71875
    ],
    [
      "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_length(array: List[int]) -> int:\n    # Initialise the variables\n    max_len = 1\n    max_diff = 0\n\n    # Initialise the current subsequence with the first element\n    curr_len = 1\n\n    # Iterate over the array\n    for i in range(len(array) - 1):\n        # Increment the length of the subsequence if the difference between the two adjacent elements is less than max_diff\n        if abs(array[i] - array[i + 1]) < max_diff:\n            curr_len += 1\n\n        # Update the maximum length if the current length is greater than the previous maximum length\n        if curr_len > max_len:\n            max_len = curr_len\n\n        # Update the maximum difference if the difference between the two adjacent elements is greater than the previous maximum difference\n        if abs(array[i] - array[i + 1]) > max_diff:\n            max_diff = abs(array[i] - array[i + 1])\n\n        # If the difference between the two adjacent elements is not less than max_diff, reset the current length\n        if abs(array[i] - array[i + 1]) >= max_diff:\n            curr_len = 1\n\n    return max_len\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_length2(array: List[int]) -> int:\n    # Initialise the variables\n    max_len = 1\n    max_diff = 0\n\n    # Iterate over the array\n    for i in range(len(array) - 1):\n        # Update the maximum length if the difference between the two adjacent elements is greater than the previous maximum difference\n        if abs(array[i] - array[i + 1]) > max_diff:\n            max_len = 2\n            max_diff = abs(array[i] - array[i + 1])\n\n        # If the difference between the two adjacent elements is not greater than the previous maximum difference, increment the length of the subsequence",
      -6.85546875
    ],
    [
      "from typing import List\n\n\ndef maximum_length_subsequence(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(arr) == 1:\n        return 1\n\n    # dp[i] = max length subsequence ending at arr[i]\n    dp = [1 for _ in range(len(arr))]\n\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) < arr[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    assert maximum_length_subsequence([1, 2, 3, 3, 2]) == 4\n    assert maximum_length_subsequence([1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 6]) == 5\n    assert maximum_length_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1",
      -7.31640625
    ],
    [
      "def max_diff_subseq(arr):\n    n = len(arr)\n    max_diff = 0\n    # Find the difference between adjacent elements\n    arr = [arr[i] - arr[i - 1] for i in range(1, n)]\n    # Find the maximum difference\n    max_diff = max(arr)\n    # Find the maximum length of the subsequence with difference between adjacent elements\n    max_diff_subseq = 0\n    diff = 0\n    for i in range(n):\n        if arr[i] != diff:\n            diff = arr[i]\n            count = 1\n        else:\n            count += 1\n            max_diff_subseq = max(max_diff_subseq, count)\n    return max_diff_subseq\n\nif __name__ == \"__main__\":\n    print(max_diff_subseq([2, 4, 6, 8, 10]))\n    print(max_diff_subseq([1, 1, 1, 1, 1]))\n    print(max_diff_subseq([1, 2, 3, 4, 5]))\n    print(max_diff_subseq([5, 4, 3, 2, 1]))",
      -7.37109375
    ],
    [
      "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef max_length(array: List[int]) -> int:\n    if len(array) < 2:\n        return len(array)\n\n    max_length = 1\n    max_diff = 0\n\n    for i in range(len(array) - 1):\n        if abs(array[i] - array[i + 1]) > max_diff:\n            max_diff = abs(array[i] - array[i + 1])\n            max_length = 2\n        elif abs(array[i] - array[i + 1]) == max_diff:\n            max_length += 1\n\n    return max_length\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef max_length_using_set(array: List[int]) -> int:\n    if len(array) < 2:\n        return len(array)\n\n    max_length = 1\n    max_diff = 0\n    prev_nums = set([array[0]])\n\n    for num in array[1:]:\n        if num - max_diff in prev_nums:\n            max_length += 1\n        else:\n            max_length = 1\n            prev_nums = set([num])\n\n        max_diff = max(max_diff, abs(num - array[0]))\n\n    return max_length\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef max_length_using_stack(array: List[int]) -> int:\n    if len(array) < 2:\n        return len(array)\n\n    max_length = 1\n    max_diff = 0\n    stack = [array[0]]\n\n    for num in array[1:]:\n        if num - max_diff == stack[-1]:\n            max_length += 1\n        else:\n            max_length = 1\n            stack = [num]\n\n        max_diff = max(max_diff, abs(num - stack[0]))\n        stack.append(num)",
      -7.5625
    ],
    [
      "from typing import List\n\n\ndef max_length_subsequence(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    \"\"\"\n\n    def max_length_subsequence_helper(arr: List[int], start: int, end: int) -> int:\n        if start >= end:\n            return 0\n\n        max_length = 0\n        max_length_without_difference = max_length_subsequence_helper(arr, start + 1, end)\n\n        for i in range(start, end):\n            max_length = max(max_length, max_length_without_difference + 1)\n            max_length_without_difference = max(\n                max_length_without_difference,\n                max_length_subsequence_helper(arr, start, i),\n                max_length_subsequence_helper(arr, i + 1, end),\n            )\n\n        return max_length\n\n    return max_length_subsequence_helper(arr, 0, len(arr))\n\n\nif __name__ == \"__main__\":\n    assert max_length_subsequence([1, 10, 3, 1, 4, 2, 3, 6, 1, 10, 5, 9]) == 5",
      -7.58203125
    ],
    [
      "def get_diff(arr):\n    res = 0\n    for i in range(len(arr)-1):\n        res = max(res, abs(arr[i] - arr[i+1]))\n    return res\n\ndef max_diff_sub_sequence(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    if n == 2:\n        return abs(arr[0]-arr[1])\n\n    max_sub_arr = [0] * n\n    max_sub_arr[0] = arr[0]\n    max_sub_arr[1] = max(arr[0], arr[1])\n    max_len = 2\n    for i in range(2, n):\n        max_sub_arr[i] = max(max_sub_arr[i-1], max_sub_arr[i-2] + arr[i])\n        if max_sub_arr[i] != max_sub_arr[i-1]:\n            max_len = i+1\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(max_diff_sub_sequence([1,2,3,4]))\n    print(max_diff_sub_sequence([1,1,1,1]))\n    print(max_diff_sub_sequence([1,1,1,1,1]))\n    print(max_diff_sub_sequence([1,2,3,4,5]))\n    print(max_diff_sub_sequence([1,2,3,4,5,6]))\n    print(max_diff_sub_sequence([1,1,1,1,1,1]))\n    print(max_diff_sub_sequence([1,2,3,4,5,6,7]))\n    print(max_diff_sub_sequence([1,2,3,4,5,6,7,8]))\n    print(max_diff_sub_sequence([1,2,3,4,5,6,7,8,9]))",
      -7.76953125
    ],
    [
      "from typing import List\n\n\n# O(n)\ndef max_length_with_difference(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    diff_count = 0\n    max_length = 0\n    dp = [1] * len(arr)\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            diff_count += 1\n            dp[i] = dp[i - 1] + 1\n        elif arr[i] - arr[i - 1] == -1:\n            dp[i] = 1\n        else:\n            dp[i] = 0\n\n        max_length = max(max_length, dp[i] + diff_count)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert max_length_with_difference([1, 2, 3, 4, 5]) == 4\n    assert max_length_with_difference([1, 1, 1, 1]) == 4\n    assert max_length_with_difference([1, 2, 4, 7, 9, 10]) == 4\n    assert max_length_with_difference([1, 1, 1, 1, 1]) == 1\n    assert max_length_with_difference([1, 2, 3, 4, 5, 6]) == 2\n    assert max_length_with_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert max_length_with_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3\n    assert max_length_with_difference([1, 2, 3, 4, 5, 6, 7, 8,",
      -8.9609375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}