{
  "problem": {
    "task_id": "MBPP/470",
    "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
    "test_list": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ],
    "challenge_test_list": [],
    "problem_id": 459
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"Returns a tuple of pairwise addition of elements of the given tuple.\n\n    Examples:\n        >>> pairwise_addition((1, 2, 3))\n        (3, 5)\n        >>> pairwise_addition((1, 2, 3, 4))\n        (3, 5, 9)\n    \"\"\"\n    return tuple(sum(pair) for pair in zip(tup, tup[1:]))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3)))\n    print(pairwise_addition((1, 2, 3, 4)))",
      13.796875
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(t1: Tuple, t2: Tuple) -> Tuple:\n    \"\"\"\n    >>> pairwise_addition((1, 2, 3), (10, 20, 30))\n    (11, 22, 33)\n    >>> pairwise_addition((-1, -2, -3), (-10, -20, -30))\n    (-11, -22, -33)\n    >>> pairwise_addition((1, 2), (10, 20))\n    (11, 22)\n    \"\"\"\n    return tuple(a + b for a, b in zip(t1, t2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      13.5078125
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(a: Tuple, b: Tuple) -> Tuple:\n    \"\"\"\n    :param a: tuple of numbers\n    :param b: tuple of numbers\n    :return: pairwise addition of the elements of the given tuples\n\n    >>> pairwise_addition((1, 2, 3, 4), (1, 2, 3, 4))\n    (2, 4, 6, 8)\n\n    >>> pairwise_addition((1, 2, 3), (4, 5))\n    (5, 7)\n\n    >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n    (5, 7, 9)\n    \"\"\"\n    return tuple(map(sum, zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.9375
    ],
    [
      "def pairwise_addition(tup1, tup2):\n    if len(tup1) == len(tup2):\n        return tuple(map(sum, zip(tup1, tup2)))\n    else:\n        return \"The tuples must have the same length\"\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert pairwise_addition((1, 2, 3), (1, 2, 3)) == (2, 4, 6), \"First\"\n    assert pairwise_addition((1, 2, 3), (3, 4, 5)) == (4, 6, 8), \"Second\"\n    assert pairwise_addition((1, 2, 3), (10, 20, 30)) == \"The tuples must have the same length\", \"Different\"\n    assert pairwise_addition((1, 2), (2, 3, 4)) == \"The tuples must have the same length\", \"Different Length\"",
      10.6484375
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\n# my solution\ndef add_tuples(tup_1, tup_2):\n    return tuple(map(add, tup_1, tup_2))\n\n\n# solution 1\ndef add_tuples_1(tup_1, tup_2):\n    return tuple(map(add, tup_1, tup_2))\n\n\n# solution 2\ndef add_tuples_2(tup_1, tup_2):\n    return tuple(reduce(lambda x, y: x + y, zip(tup_1, tup_2)))\n\n\n# solution 3\ndef add_tuples_3(tup_1, tup_2):\n    return tuple(map(lambda x, y: x + y, tup_1, tup_2))\n\n\n# solution 4\ndef add_tuples_4(tup_1, tup_2):\n    return tuple(map(lambda x: x[0] + x[1], zip(tup_1, tup_2)))\n\n\n# solution 5\ndef add_tuples_5(tup_1, tup_2):\n    return tuple(map(lambda x, y: x + y, tup_1, tup_2))\n\n\nprint(add_tuples((1, 2, 3), (4, 5, 6)))\nprint(add_tuples_1((1, 2, 3), (4, 5, 6)))\nprint(add_tuples_2((1, 2, 3), (4, 5, 6)))\nprint(add_tuples_3((1, 2, 3), (4, 5, 6)))\nprint(add_tuples_4((1, 2, 3), (4, 5, 6)))\nprint(add_tuples_5((1, 2, 3), (4, 5, 6)))",
      9.9921875
    ],
    [
      "def pairwise_addition(tup1, tup2):\n    if len(tup1) != len(tup2):\n        return \"Tuples must be of equal length\"\n\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] + tup2[i])\n\n    return result\n\n\nprint(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      6.10546875
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(a: Tuple, b: Tuple) -> list:\n    return [x + y for x, y in zip(a, b)]\n\n\nif __name__ == \"__main__\":\n    assert pairwise_addition((1, 2, 3), (4, 5, 6)) == [5, 7, 9]",
      6.02734375
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tuple1: Tuple[int, ...], tuple2: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"Returns the pairwise addition of the elements of the given tuples.\n\n    Examples:\n        >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n        (5, 7, 9)\n        >>> pairwise_addition((3, 4), (7, 8, 9, 10))\n        (10, 14)\n    \"\"\"\n    return tuple(map(sum, zip(tuple1, tuple2)))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))\n    print(pairwise_addition((3, 4), (7, 8, 9, 10)))",
      5.6484375
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(a, b):\n    \"\"\"\n    >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n    [5, 7, 9]\n    >>> pairwise_addition((1, 2, 3), (4, 5))\n    [5, 7]\n    \"\"\"\n    result = []\n    for i, j in product(a, b):\n        result.append(i + j)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.29296875
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup1: Tuple, tup2: Tuple) -> Tuple:\n    \"\"\"Returns pairwise addition of the given tuples\n\n    Args:\n        tup1 (Tuple): first tuple\n        tup2 (Tuple): second tuple\n\n    Returns:\n        Tuple: pairwise addition of the given tuples\n    \"\"\"\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3, 4), (5, 6, 7, 8)))\n    print(pairwise_addition((1, 2, 3, 4), (1, 2, 3)))\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      2.142578125
    ],
    [
      "def pairwise_addition(tup1, tup2):\n    return [i + j for i, j in zip(tup1, tup2)]\n\n\ntup1 = (1, 2, 3)\ntup2 = (4, 5, 6)\nprint(pairwise_addition(tup1, tup2))",
      1.7353515625
    ],
    [
      "from itertools import combinations\n\n\ndef pairwise_addition(t1, t2):\n    return [sum(i) for i in combinations(t1+t2, 2)]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (1, 2, 3)))",
      1.6904296875
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup1: Tuple, tup2: Tuple) -> Tuple:\n    \"\"\"Returns a tuple of pairwise addition of elements of two given tuples.\n\n    Args:\n        tup1 (Tuple): first tuple\n        tup2 (Tuple): second tuple\n\n    Examples:\n        >>> assert pairwise_addition((1, 2, 3), (10, 20, 30)) == (11, 22, 33)\n        >>> assert pairwise_addition((1, 2, 3), (10, 20)) == (11, 22, 3)\n    \"\"\"\n    return tuple(sum(pair) for pair in zip(tup1, tup2))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (10, 20, 30)))",
      1.6064453125
    ],
    [
      "from itertools import product\nfrom functools import reduce\nfrom operator import add\n\n\ndef pairwise_addition(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef pairwise_addition_2(tup1, tup2):\n    return tuple(map(sum, product(tup1, tup2)))\n\n\ndef pairwise_addition_3(tup1, tup2):\n    return tuple(map(lambda x: x[0] + x[1], zip(tup1, tup2)))\n\n\ndef pairwise_addition_4(tup1, tup2):\n    return tuple(map(reduce(lambda x, y: x + y, tup1, tup2)))\n\n\ndef pairwise_addition_5(tup1, tup2):\n    return tuple(map(lambda x, y: x + y, tup1, tup2))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))\n    print(pairwise_addition_2((1, 2, 3), (4, 5, 6)))\n    print(pairwise_addition_3((1, 2, 3), (4, 5, 6)))\n    print(pairwise_addition_4((1, 2, 3), (4, 5, 6)))\n    print(pairwise_addition_5((1, 2, 3), (4, 5, 6)))",
      1.5859375
    ],
    [
      "from itertools import product\n\n\ndef pairwise_add(tuples):\n    # return list(map(lambda x: sum(x), product(*tuples)))\n    return [sum(x) for x in product(*tuples)]\n\n\ndef test_pairwise_add():\n    \"\"\"\n    >>> test_pairwise_add()\n    \"\"\"\n    assert pairwise_add((1, 2, 3)) == [3, 4, 5, 4, 5, 6, 5, 6, 7]\n    assert pairwise_add((1, 2)) == [3, 3, 4]\n    assert pairwise_add((-1, 0, 1)) == [0, 0, 1, 0, 1, 2]\n    assert pairwise_add((-1, 1)) == [0, 0, 1, -1, 0, 1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.529296875
    ],
    [
      "def pairwise_addition(tup1, tup2):\n    return tuple(map(lambda x, y: x + y, tup1, tup2))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))\n    print(pairwise_addition((1, 2, 3), (4, 5)))",
      1.4404296875
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(t1: tuple, t2: tuple) -> tuple:\n    \"\"\"Returns the pairwise addition of the elements of the given tuples.\n\n    Args:\n        t1 (tuple): First tuple\n        t2 (tuple): Second tuple\n\n    Returns:\n        tuple: The pairwise addition of the elements of the given tuples.\n\n    Examples:\n        >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n        ((5, 5), (6, 6), (7, 7))\n    \"\"\"\n    return tuple(map(sum, product(t1, t2)))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      1.107421875
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(tup1, tup2):\n    return tuple(map(sum, product(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    tup1 = (1, 2, 3, 4, 5)\n    tup2 = (6, 7, 8, 9, 10)\n    print(pairwise_addition(tup1, tup2))",
      1.06640625
    ],
    [
      "def pairwise_addition(t1, t2):\n    if len(t1) != len(t2):\n        return None\n\n    result = []\n\n    for i in range(len(t1)):\n        result.append(t1[i] + t2[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      1.0654296875
    ],
    [
      "from typing import List\n\n\ndef pairwise_addition(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Returns the pairwise addition of the elements of the given tuples.\n\n    Args:\n        tuples (List[tuple]): a list of tuples\n\n    Examples:\n        >>> assert pairwise_addition([(1, 2), (3, 4)]) == [(4, 6)]\n    \"\"\"\n    return [(sum(pair),) for pair in zip(*tuples)]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition([(1, 2), (3, 4)]))",
      0.6123046875
    ],
    [
      "from itertools import combinations\nfrom typing import List\n\n\ndef pairwise_addition(numbers: List[int]) -> List[int]:\n    \"\"\"Returns the pairwise addition of the elements of the given list.\n\n    Args:\n        numbers (List[int]): a list of integers\n\n    Examples:\n        >>> pairwise_addition([1, 2, 3, 4, 5])\n        [2, 4, 6, 8, 10]\n        >>> pairwise_addition([10, 20, 30, 40, 50])\n        [30, 50, 70, 90, 110]\n    \"\"\"\n    return [sum(pair) for pair in combinations(numbers, 2)]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition([1, 2, 3, 4, 5]))\n    print(pairwise_addition([10, 20, 30, 40, 50]))",
      0.5419921875
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(t1: Tuple, t2: Tuple) -> None:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def add(x, y):\n        return x + y\n\n    return zip(map(add, t1, t2))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      0.48291015625
    ],
    [
      "from typing import List\n\n\ndef pairwise_addition(tuple_a: List[int], tuple_b: List[int]) -> List[int]:\n    \"\"\"\n    :param tuple_a:\n    :param tuple_b:\n    :return: list of pairwise addition of elements of given tuples\n    >>> pairwise_addition([1, 2, 3], [4, 5, 6])\n    [5, 7, 9]\n    >>> pairwise_addition([1, 2, 3, 4], [4, 5, 6])\n    [5, 7, 9, 10]\n    \"\"\"\n    result = []\n\n    for index, element in enumerate(tuple_a):\n        result.append(element + tuple_b[index])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.034454345703125
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(a: Tuple, b: Tuple) -> Tuple:\n    \"\"\"Returns pairwise addition of two tuples.\n\n    Args:\n        a (Tuple): first tuple.\n        b (Tuple): second tuple.\n\n    Returns:\n        Tuple: pairwise addition of two tuples.\n\n    Examples:\n        >>> assert pairwise_addition((1, 2, 3), (4, 5, 6)) == (5, 7, 9)\n    \"\"\"\n    return tuple(map(sum, zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      0.0073699951171875
    ],
    [
      "def pairwise_addition(tuple_1, tuple_2):\n    return tuple([x + y for x, y in zip(tuple_1, tuple_2)])\n\n\nif __name__ == \"__main__\":\n    tuple_1 = (1, 2, 3)\n    tuple_2 = (4, 5, 6)\n    print(pairwise_addition(tuple_1, tuple_2))",
      -0.06597900390625
    ],
    [
      "from typing import List\n\n\ndef add_pairwise(t1: List[int], t2: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not t1 or not t2:\n        return []\n\n    return [a + b for a, b in zip(t1, t2)]\n\n\nif __name__ == \"__main__\":\n    assert add_pairwise([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
      -0.08843994140625
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(first_tuple: Tuple[int, ...], second_tuple: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"Return the pairwise addition of the elements of the given tuples.\n\n    Examples:\n        >>> pairwise_addition((1, 2, 3), (1, 2, 3))\n        (2, 4, 6)\n        >>> pairwise_addition((1, 2, 3, 4), (1, 2, 3))\n        (2, 5, 8, 4)\n        >>> pairwise_addition((1, 2, 3), (1, 2, 3, 4))\n        (2, 5, 8, 4)\n        >>> pairwise_addition((1, 2, 3), ())\n        (1, 2, 3)\n        >>> pairwise_addition((), (1, 2, 3))\n        (1, 2, 3)\n        >>> pairwise_addition((), ())\n        ()\n        >>> pairwise_addition(('a', 'b', 'c'), (1, 2, 3))\n        ('a1', 'b2', 'c3')\n        >>> pairwise_addition((1, 2, 3), ('a', 'b', 'c'))\n        ('a1', 'b2', 'c3')\n        >>> pairwise_addition(('a', 'b', 'c'), ())\n        ('a', 'b', 'c')\n        >>> pairwise_addition((), ('a', 'b', 'c'))\n        ('a', 'b', 'c')\n        >>> pairwise_addition((), ())\n        ()\n        >>> pairwise_addition((1, 2, 3), (1.5, 2.5, 3.5))\n        Traceback (most recent call last):\n        ...\n        ValueError: Both tuples should only contain integers.\n    \"\"\"\n    if any(not isinstance(element, int) for element in first_tuple + second_tuple):\n        raise ValueError",
      -0.25634765625
    ],
    [
      "from itertools import product\nfrom typing import List\n\n\ndef pairwise_addition(t1: List[int], t2: List[int]) -> List[int]:\n    \"\"\"\n    :param t1: first tuple\n    :param t2: second tuple\n    :return: list of sum of pairwise elements of the two tuples\n\n    >>> pairwise_addition([1, 2, 3], [1, 2, 3])\n    [3, 5, 6]\n\n    >>> pairwise_addition([1, 2, 3], [1, 2])\n    [3, 5]\n\n    >>> pairwise_addition([1, 2], [1, 2, 3])\n    [3, 5]\n    \"\"\"\n    return [i + j for i, j in product(t1, t2)]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -0.262451171875
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(a: Tuple, b: Tuple) -> Tuple:\n    \"\"\"\n    >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n    (5, 7, 9)\n    >>> pairwise_addition((1, 2, 3), (10, 10, 10))\n    (11, 12, 13)\n    >>> pairwise_addition((-1, 2, 3), (10, -10, 10))\n    (9, -7, 13)\n    >>> pairwise_addition((0, 2, 3), (10, -10, 10))\n    (10, -8, 13)\n    >>> pairwise_addition((0, 0, 0), (10, -10, 10))\n    (10, -10, 10)\n    \"\"\"\n    return tuple(map(sum, zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.371826171875
    ],
    [
      "from typing import Tuple\n\n\ndef add_pairwise(tuple_1: Tuple, tuple_2: Tuple) -> Tuple:\n    \"\"\"\n    >>> add_pairwise((1, 2, 3), (1, 2, 3))\n    (2, 4, 6)\n    >>> add_pairwise((1, 2, 3), (4, 5, 6))\n    (5, 7, 9)\n    >>> add_pairwise((1, 2, 3), (4, 5, 6, 7))\n    Traceback (most recent call last):\n        ...\n    ValueError: Tuples must be of the same length.\n    \"\"\"\n    if len(tuple_1) != len(tuple_2):\n        raise ValueError(\"Tuples must be of the same length.\")\n\n    return tuple(sum(tup) for tup in zip(tuple_1, tuple_2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.59423828125
    ],
    [
      "from itertools import combinations\n\n\ndef pairwise_addition(tup1, tup2):\n    return [sum(pair) for pair in combinations(tup1 + tup2, 2)]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))\n    print(pairwise_addition((1, 2, 3), (4, 5)))\n    print(pairwise_addition((1, 2), (4, 5, 6)))",
      -0.60107421875
    ],
    [
      "def pairwise_addition(a, b):\n    return tuple([a[i] + b[i] for i in range(len(a))])\n\n\nprint(pairwise_addition((1, 2, 3, 4), (1, 2, 3, 4)))",
      -0.60986328125
    ],
    [
      "from itertools import permutations\n\n\n# Time complexity O(n!)\ndef pairwise_addition(a, b):\n    \"\"\"\n    >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n    [(5, 5), (7, 7), (9, 9)]\n    \"\"\"\n    return [(a + b, a + b) for a, b in permutations(a, 2)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.6171875
    ],
    [
      "from itertools import product\n\n\ndef add_tuples(first_tuple, second_tuple):\n    \"\"\"Returns the list of tuples containing the pairwise addition of elements of the given tuples.\"\"\"\n    return list(map(lambda x: (x[0] + x[1],), product(first_tuple, second_tuple)))\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 3, 5), (2, 4, 6)))",
      -0.69091796875
    ],
    [
      "def pairwise_addition(tup1, tup2):\n    \"\"\"\n    >>> pairwise_addition((2, 3, 4), (5, 6, 7))\n    [(2 + 5, 3 + 6, 4 + 7), (3 + 5, 4 + 6, 5 + 7), (4 + 5, 5 + 6, 6 + 7)]\n    \"\"\"\n    return [\n        (tup1[0] + tup2[0], tup1[1] + tup2[1], tup1[2] + tup2[2]),\n        (tup1[0] + tup2[1], tup1[1] + tup2[2], tup1[2] + tup2[0]),\n        (tup1[0] + tup2[2], tup1[1] + tup2[0], tup1[2] + tup2[1]),\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.7119140625
    ],
    [
      "from typing import List, Tuple\n\n\ndef pairwise_addition(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"Return pairwise addition of elements of given tuples.\n\n    >>> pairwise_addition([(2, 3), (3, 2), (2, 2), (2, 1)])\n    [(5, 3), (5, 3), (4, 4), (3, 3)]\n    \"\"\"\n    return [\n        (tuples[0][0] + tuples[1][0], tuples[0][1] + tuples[1][1])\n        for tuples in zip(tuples, tuples[1:])\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.72314453125
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(tuple_1, tuple_2):\n    return [x + y for x, y in product(tuple_1, tuple_2)]\n\n\ndef test_pairwise_addition():\n    \"\"\"\n    >>> test_pairwise_addition()\n    \"\"\"\n    assert pairwise_addition((1, 2, 3, 4), (1, 2, 3, 4)) == [2, 4, 6, 8, 3, 5, 7, 9]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.72314453125
    ],
    [
      "def pairwise_addition(a, b):\n    \"\"\"Returns a list of tuples with the pairwise addition of the elements of a and b.\"\"\"\n    return [(x, y, x + y) for x in a for y in b]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      -0.75048828125
    ],
    [
      "from typing import List\n\n\ndef pairwise_addition(nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if len(nums) < 2:\n        raise ValueError(\"Length of tuple should be at least 2\")\n\n    return [nums[i] + nums[i + 1] for i in range(len(nums) - 1)]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition([1, 2, 3, 4, 5]))\n    print(pairwise_addition([2, 2, 4, 8, 16]))",
      -0.751953125
    ],
    [
      "from typing import Tuple\n\n\ndef add_tuples(a: Tuple, b: Tuple) -> Tuple:\n    \"\"\"\n    >>> add_tuples((1, 2), (4, 5))\n    (5, 7)\n    \"\"\"\n    return tuple(map(sum, zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85595703125
    ],
    [
      "def pairwise_addition(tup1, tup2):\n    return tuple(map(lambda x, y: x + y, tup1, tup2))\n\n\nprint(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      -0.85693359375
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(a, b):\n    return [x + y for x, y in product(a, b)]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (1, 2, 3)))",
      -0.85693359375
    ],
    [
      "def pairwise_addition(tuple1, tuple2):\n    return tuple(map(lambda x, y: x + y, tuple1, tuple2))\n\n\nprint(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      -0.85693359375
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\n# My solution\n\n\ndef pairwise_addition(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\n# Best ways\n\n\ndef pairwise_addition_best(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef pairwise_addition_best_2(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef pairwise_addition_best_3(tup1, tup2):\n    return tuple(map(add, tup1, tup2))\n\n\ndef pairwise_addition_best_4(tup1, tup2):\n    return tuple(map(add, tup1, tup2))",
      -0.85693359375
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup_1: Tuple[int, ...], tup_2: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"Returns the pairwise addition of the elements of the given tuples.\n\n    Args:\n        tup_1 (Tuple[int, ...]): First tuple.\n        tup_2 (Tuple[int, ...]): Second tuple.\n\n    Examples:\n        >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n        (5, 7, 9)\n    \"\"\"\n    return tuple(x + y for x, y in zip(tup_1, tup_2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(tuples):\n    return [sum(pair) for pair in product(*tuples)]\n\n\nif __name__ == \"__main__\":\n    tuples = [(1, 2, 3), (4, 5, 6)]\n    print(pairwise_addition(tuples))",
      -0.85693359375
    ],
    [
      "from itertools import permutations\n\n\ndef pairwise_addition(tup1, tup2):\n    return [x+y for x,y in permutations(tup1, 2)]\n\n\nif __name__ == '__main__':\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      -0.85693359375
    ],
    [
      "from itertools import combinations\n\n\ndef pairwise_addition(first, second):\n    \"\"\"\n    >>> pairwise_addition((1, 2, 3), (10, 20, 30))\n    [(11, 22, 33), (12, 23, 34), (13, 24, 35)]\n    \"\"\"\n    return [\n        tuple(map(sum, combination))\n        for combination in combinations(zip(first, second), 2)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup_a: Tuple, tup_b: Tuple) -> Tuple:\n    \"\"\"\n    >>> pairwise_addition((1, 3, 5), (5, 3, 1))\n    (6, 6, 6)\n    \"\"\"\n    return tuple(map(sum, zip(tup_a, tup_b)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(t1, t2):\n    for i in product(t1, t2):\n        print(i)\n\n\nt1 = (1, 2, 3, 4)\nt2 = (5, 6, 7, 8)\npairwise_addition(t1, t2)",
      -0.85693359375
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuples(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    >>> add_tuples([(1, 2), (3, 4), (5, 6)])\n    [(1, 2, 3, 4), (1, 2, 5, 6)]\n    \"\"\"\n    return [\n        tuple(sorted(a + b for a, b in zip(*tuple_))) for tuple_ in zip(*tuples)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def pairwise_addition(tup1, tup2):\n    return [sum(pair) for pair in zip(tup1, tup2)]\n\n\nprint(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      -0.85791015625
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup_a: Tuple[int, ...], tup_b: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"\n    >>> pairwise_addition((1, 2, 3), (1, 1, 1))\n    (2, 3, 4)\n    \"\"\"\n    return tuple(a + b for a, b in zip(tup_a, tup_b))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from typing import List, Tuple\n\n\ndef pairwise_addition(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    >>> pairwise_addition([(1, 2), (3, 4), (5, 6)])\n    [(1, 4), (3, 7), (5, 11)]\n    \"\"\"\n    return [\n        (first_tuple[0] + second_tuple[0], first_tuple[1] + second_tuple[1])\n        for first_tuple, second_tuple in zip(tuples, tuples[1:])\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from itertools import permutations\n\n\n# Time complexity O(N!)\ndef pairwise_addition(tuple1, tuple2):\n    return [tuple(map(sum, zip(tuple1, tuple2))) for tuple1, tuple2 in permutations((tuple1, tuple2))]\n\n\nprint(pairwise_addition((1, 2, 3), (4, 5, 6)))\nprint(pairwise_addition((1, 2, 3), (3, 4, 5)))\nprint(pairwise_addition((1, 2, 3), (3, 4, 5, 6)))\nprint(pairwise_addition((1, 2, 3, 4), (3, 4, 5, 6)))",
      -0.8583984375
    ],
    [
      "from itertools import combinations\nfrom operator import add\n\n\ndef pairwise_addition(a, b):\n    return list(map(add, a, b))\n\n\ndef test_pairwise_addition():\n    \"\"\"\n    >>> test_pairwise_addition()\n    True\n    \"\"\"\n    t1 = (1, 2, 3)\n    t2 = (4, 5, 6)\n    pairs = [(1, 4), (1, 5), (1, 6), (2, 5), (2, 6), (3, 6)]\n    assert pairwise_addition(t1, t2) == pairs\n    return True\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      -0.8583984375
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(first_tuple: tuple, second_tuple: tuple):\n    result = []\n    for i in product(first_tuple, second_tuple):\n        result.append(i[0] + i[1])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3, 4, 5, 6), (10, 20, 30, 40)))",
      -0.8583984375
    ],
    [
      "from itertools import permutations\n\n\ndef pairwise_addition(first_tuple, second_tuple):\n    \"\"\"\n    >>> pairwise_addition((1, 3, 5), (2, 4, 6))\n    [3, 7, 11]\n    \"\"\"\n    return [sum(x) for x in permutations(first_tuple + second_tuple, 2)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from itertools import permutations\n\n\ndef pairwise_addition(tuples):\n    return [\n        [sum(pair) for pair in permutations(tup, 2)] for tup in tuples\n    ]\n\n\nif __name__ == \"__main__\":\n    assert pairwise_addition((1, 2, 3)) == [[4, 5], [5, 6], [6, 7]]\n    assert pairwise_addition((1, 2, 3, 4)) == [[5, 6], [6, 7], [7, 8], [8, 9]]",
      -0.8583984375
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup1: Tuple, tup2: Tuple) -> Tuple:\n    \"\"\"\n    >>> pairwise_addition((1, 3, 5), (2, 4, 6))\n    (3, 7, 11)\n    >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n    (5, 7, 9)\n    >>> pairwise_addition((1, 2, 3), (2, 4, 6))\n    (3, 6, 9)\n    \"\"\"\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(a: Tuple, b: Tuple) -> Tuple:\n    \"\"\"\n    >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n    (5, 7, 9)\n    \"\"\"\n    return tuple(map(sum, zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def pairwise_addition(a, b):\n    return [(a[i], b[i]) for i in range(len(a))]\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      -0.8583984375
    ],
    [
      "from itertools import product\nfrom functools import reduce\n\n\n# my solution\n\n\ndef pairwise_addition(tup1, tup2):\n    return [i + j for i, j in product(tup1, tup2)]\n\n\n# best practice\n\n\ndef pairwise_addition_best(tup1, tup2):\n    return [reduce(lambda x, y: x + y, pair) for pair in product(tup1, tup2)]\n\n\nprint(pairwise_addition((1, 2, 3), (4, 5, 6)))\nprint(pairwise_addition_best((1, 2, 3), (4, 5, 6)))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef pairwise_addition(tuples: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(len(tuples) - 1):\n        for j in range(i + 1, len(tuples)):\n            tuples[i].append(tuples[i][j - 1] + tuples[j][i])\n\n    return tuples\n\n\nif __name__ == \"__main__\":\n    assert pairwise_addition([[1, 2, 3], [4, 5]]) == [\n        [5, 5, 10],\n        [5, 6, 6],\n        [6, 7, 8],\n    ]",
      -0.8583984375
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup1: Tuple, tup2: Tuple) -> Tuple:\n    \"\"\"\n    :param tup1:\n    :param tup2:\n    :return:\n    \"\"\"\n    if len(tup1) != len(tup2):\n        raise ValueError(\"Tuples must be of same length\")\n    return tuple(map(sum, zip(tup1, tup2)))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))\n    print(pairwise_addition((1, 2, 3), (4, 5, 6, 7)))",
      -0.85888671875
    ],
    [
      "from itertools import permutations\nfrom functools import reduce\n\n\n# def pairwise_addition(tuples):\n#     # my_list = list(permutations(tuples, len(tuples)))\n#     # print(my_list)\n#     # return list(map(lambda x: reduce(lambda y, z: y + z, x), my_list))\n#     return list(map(lambda x: reduce(lambda y, z: y + z, x), permutations(tuples, len(tuples))))\n\n\ndef pairwise_addition(tuples):\n    return list(map(lambda x: reduce(lambda y, z: y + z, x), permutations(tuples, len(tuples))))\n\n\nprint(pairwise_addition((1, 2, 3, 4, 5)))",
      -0.85888671875
    ],
    [
      "from itertools import combinations\nfrom typing import List, Tuple\n\n\ndef pairwise_addition(input_tuple: Tuple[int, ...]) -> List[int]:\n    \"\"\"\n    >>> pairwise_addition((1, 2, 3, 4))\n    [5, 5, 6, 6]\n    \"\"\"\n    return [sum(pair) for pair in combinations(input_tuple, 2)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "from itertools import product\n\n\ndef pairwise_add(tup1, tup2):\n    res = []\n    for i, j in product(tup1, tup2):\n        res.append(i + j)\n    return res\n\n\nprint(pairwise_add((1, 2, 3), (4, 5)))\nprint(pairwise_add((1, 2, 3), (4, 5, 6)))\nprint(pairwise_add((1, 2), (3, 4, 5)))",
      -0.85888671875
    ],
    [
      "from typing import List, Tuple\n\n\ndef pairwise_addition(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [(x + y, x + y) for (x, y) in tuples]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition([(1, 2), (3, 4)]))",
      -0.85888671875
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup_1: Tuple, tup_2: Tuple) -> Tuple:\n    \"\"\"\n    Given two tuples, return the pairwise addition of the elements of the two tuples.\n    >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n    (5, 7, 9)\n    \"\"\"\n    return tuple(map(sum, zip(tup_1, tup_2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "from typing import List, Tuple\n\n\ndef pairwise_addition(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"Returns pairwise addition of elements of the given tuples.\n\n    Args:\n        tuples (List[Tuple[int, int]]): given tuples.\n\n    Returns:\n        List[Tuple[int, int]]: pairwise addition of elements of the given tuples.\n\n    Examples:\n        >>> assert pairwise_addition([(1, 2), (3, 4)]) == [(4, 6)]\n    \"\"\"\n    return [tuple(map(sum, zip(*tpl))) for tpl in zip(*tuples)]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition([(1, 2), (3, 4)]))",
      -0.85888671875
    ],
    [
      "from itertools import combinations\n\n\ndef pairwise_addition(tuples):\n    results = []\n    for t1, t2 in combinations(tuples, 2):\n        results.append(tuple(map(sum, zip(t1, t2))))\n    return results\n\n\nif __name__ == '__main__':\n    tuples = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    results = pairwise_addition(tuples)\n    print(results)",
      -0.85888671875
    ],
    [
      "from itertools import combinations\nfrom typing import Tuple\n\n\ndef pairwise_addition(tup1: Tuple, tup2: Tuple) -> Tuple:\n    \"\"\"\n    >>> pairwise_addition((1,2,3), (4,5))\n    ((5, 7), (6, 8))\n    \"\"\"\n    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in combinations((tup1, tup2), 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.083984375
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(t1, t2):\n    return [x + y for x, y in product(t1, t2)]\n\n\nt1 = (1, 2, 3)\nt2 = (4, 5, 6)\nprint(pairwise_addition(t1, t2))",
      -1.1044921875
    ],
    [
      "from typing import List, Tuple\n\n\ndef pairwise_addition(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    >>> pairwise_addition([(1, 2), (3, 4)])\n    [(4, 6), (7, 9)]\n    \"\"\"\n    return [\n        (tuples[0][0] + tuples[1][0], tuples[0][1] + tuples[1][1])\n        for tuples in zip(tuples, tuples[1:])\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.314453125
    ],
    [
      "from typing import List\n\n\ndef pairwise_sum(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Returns a list of tuples where each tuple is the pairwise addition of the elements of the given tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> pairwise_sum([(1, 2), (3, 4)])\n        [(1, 3), (2, 4)]\n        >>> pairwise_sum([(1, 2, 3), (4, 5, 6)])\n        [(1, 4, 5), (2, 5, 6), (3, 6, 7)]\n        >>> pairwise_sum([(1, 2, 3, 4), (5, 6, 7, 8)])\n        [(1, 5, 6, 7), (2, 6, 7, 8), (3, 7, 8, 9), (4, 8, 9, 10)]\n    \"\"\"\n    return [\n        tuple(a + b for a, b in zip(t1, t2))\n        for t1, t2 in zip(tuples[:-1], tuples[1:])\n    ]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_sum([(1, 2), (3, 4)]))\n    print(pairwise_sum([(1, 2, 3), (4, 5, 6)]))\n    print(pairwise_sum([(1, 2, 3, 4), (5, 6, 7, 8)]))",
      -1.4892578125
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(tup1, tup2):\n    return [x + y for x, y in product(tup1, tup2)]\n\n\nprint(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      -1.728515625
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef pairwise_addition(first: tuple, second: tuple) -> tuple:\n    \"\"\"Finds pairwise addition of elements of two tuples\n\n    Args:\n        first: first tuple\n        second: second tuple\n\n    Returns:\n        tuple: Pairwise addition of elements of two tuples\n    \"\"\"\n    return tuple(map(add, first, second))\n\n\ndef main():\n    first = (1, 2, 3, 4)\n    second = (5, 6, 7, 8)\n    print(f\"Pairwise addition of {first} and {second} is {pairwise_addition(first, second)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.791015625
    ],
    [
      "from itertools import product\nfrom typing import List\n\n\n# Time complexity: O(n * m) where n = len(list_1) and m = len(list_2)\n# Space complexity: O(n * m)\ndef pairwise_addition(list_1: List[int], list_2: List[int]) -> List[int]:\n    return [a + b for a, b in product(list_1, list_2)]\n\n\n# Time complexity: O(n * m) where n = len(list_1) and m = len(list_2)\n# Space complexity: O(1)\ndef pairwise_addition_in_place(list_1: List[int], list_2: List[int]) -> List[int]:\n    result = []\n\n    i = 0\n    while i < len(list_1):\n        j = 0\n        while j < len(list_2):\n            result.append(list_1[i] + list_2[j])\n            j += 1\n        i += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition([1, 2, 3], [4, 5, 6]))\n    print(pairwise_addition_in_place([1, 2, 3], [4, 5, 6]))",
      -1.861328125
    ],
    [
      "from itertools import product\nfrom typing import List, Tuple\n\n\ndef pairwise_addition(tuples: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Return the pairwise addition of the elements of the given tuples.\n\n    >>> pairwise_addition([(1, 2), (3, 4), (5, 6)])\n    [4, 6, 8]\n    >>> pairwise_addition([(1, 2), (3, 4), (5, 6), (7, 8)])\n    [4, 6, 8, 10]\n    >>> pairwise_addition([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n    [4, 6, 8, 10, 12]\n    >>> pairwise_addition([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)])\n    [4, 6, 8, 10, 12, 14]\n    >>> pairwise_addition([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)])\n    [4, 6, 8, 10, 12, 14, 16]\n    >>> pairwise_addition([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)])\n    [4, 6, 8, 10, 12, 14, 16, 18]\n    >>> pairwise_addition([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 1",
      -2.125
    ],
    [
      "from itertools import product\nfrom typing import List, Tuple\n\n\ndef pairwise_addition(tuples: List[Tuple[int, ...]]) -> List[int]:\n    \"\"\"\n    Write a function to find the pairwise addition of the elements of the given tuples.\n    >>> pairwise_addition([(1, 2, 3), (4, 5, 6)])\n    [5, 5, 5, 6, 6, 6]\n    >>> pairwise_addition([(1, 2, 3), (1, 2, 3)])\n    [2, 4, 6, 2, 4, 6]\n    >>> pairwise_addition([(1, 2, 3, 4), (1, 2, 3, 4)])\n    [2, 4, 6, 8, 4, 6, 8, 10]\n    \"\"\"\n    return [\n        sum(items) for items in product(*tuples)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.197265625
    ],
    [
      "from itertools import combinations\nfrom typing import List\n\n\ndef pairwise_addition(tup_1: List[int], tup_2: List[int]) -> List[int]:\n    \"\"\"\n    :param tup_1: list of numbers\n    :param tup_2: list of numbers\n    :return: list of sums of pairwise addition of elements of given tuples\n    >>> pairwise_addition([1, 2, 3, 4], [5, 6, 7, 8])\n    [1 + 5, 1 + 6, 1 + 7, 1 + 8, 2 + 5, 2 + 6, 2 + 7, 2 + 8, 3 + 5, 3 + 6, 3 + 7, 3 + 8, 4 + 5, 4 + 6, 4 + 7, 4 + 8]\n    >>> pairwise_addition([1, 2], [3, 4, 5])\n    [1 + 3, 1 + 4, 1 + 5, 2 + 3, 2 + 4, 2 + 5]\n    >>> pairwise_addition([1, 2, 3], [4, 5])\n    [1 + 4, 1 + 5, 2 + 4, 2 + 5, 3 + 4, 3 + 5]\n    >>> pairwise_addition([1, 2], [3, 4, 5, 6])\n    [1 + 3, 1 + 4, 1 + 5, 1 + 6, 2 + 3, 2 + 4, 2 + 5, 2 + 6]\n    \"\"\"\n    return [sum(x) for x in combinations(tup_1 + tup_2, 2)]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -2.2421875
    ],
    [
      "from itertools import combinations\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\ndef pairwise_addition(tuple_a, tuple_b):\n    for i, j in combinations(tuple_a, 2):\n        for k, l in combinations(tuple_b, 2):\n            if i + k == j + l:\n                return True\n    return False\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\ndef pairwise_addition_2(tuple_a, tuple_b):\n    for i, j in combinations(tuple_a, 2):\n        for k, l in combinations(tuple_b, 2):\n            if i + j == k + l:\n                return True\n    return False\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\ndef pairwise_addition_3(tuple_a, tuple_b):\n    for i in tuple_a:\n        for j in tuple_b:\n            for k in tuple_a:\n                for l in tuple_b:\n                    if i + j == k + l:\n                        return True\n    return False\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\ndef pairwise_addition_4(tuple_a, tuple_b):\n    for i in tuple_a:\n        for j in tuple_b:\n            for k in tuple_a:\n                for l in tuple_b:\n                    if i + j == k + l:\n                        return True\n    return False",
      -2.326171875
    ],
    [
      "from typing import List, Tuple\n\n\ndef pairwise_addition(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"Returns the pairwise addition of the elements of the given tuples.\n\n    Args:\n        tuples (List[Tuple[int, int]]): the tuples.\n\n    Examples:\n        >>> assert pairwise_addition([(1, 2), (3, 4)]) == [(1, 2), (3, 4), (4, 6)]\n        >>> assert pairwise_addition([(1, 2, 3), (4, 5, 6)]) == [(1, 2, 3), (4, 5, 6), (5, 7, 9)]\n    \"\"\"\n    result = []\n\n    for i, tuple_ in enumerate(tuples):\n        if i == 0:\n            result.append(tuple_)\n        else:\n            last_tuple = result[-1]\n            result.append(tuple(last + current for last, current in zip(last_tuple, tuple_)))\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition([(1, 2), (3, 4)]))\n    print(pairwise_addition([(1, 2, 3), (4, 5, 6)]))",
      -2.484375
    ],
    [
      "from functools import reduce\nfrom itertools import product\n\n\n# [1,2,3] [4,5,6]\n# [1,2,3,4,5,6]\n# [(1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6)]\n# [(1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6)]\n# [(1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6)]\ndef pairwise_addition(tup_1, tup_2):\n    tup_1 = list(tup_1)\n    tup_2 = list(tup_2)\n    tup_1.extend(tup_2)\n    return list(product(tup_1, repeat=2))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition((1, 2, 3), (4, 5, 6)))",
      -2.716796875
    ],
    [
      "from itertools import combinations\n\n\ndef pairwise_addition(lst1, lst2):\n    \"\"\"\n    >>> pairwise_addition((1, 2, 3), (1, 2, 3))\n    [(2, 2, 3), (2, 3, 3), (3, 3, 3)]\n    >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n    [(5, 5, 6), (5, 6, 6), (6, 6, 6)]\n    >>> pairwise_addition((1, 2, 3), (4, 5))\n    [(5, 5, 3), (5, 6, 3), (6, 6, 3)]\n    \"\"\"\n    return [\n        tuple(sum(e) for e in zip(a, b))\n        for a, b in combinations(zip(lst1, lst2), 2)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.748046875
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tuples: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\"Returns pairwise addition of the elements of the given tuples.\n\n    Args:\n        tuples (Tuple[Tuple[int, ...], ...]): tuples of integers.\n\n    Examples:\n        >>> assert pairwise_addition(((1, 2, 3), (4, 5, 6))) == ((5, 7, 9), (5, 6, 7))\n        >>> assert pairwise_addition(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == ((5, 7, 9), (5, 6, 7), (12, 14, 16))\n        >>> assert pairwise_addition(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))) == ((5, 7, 9), (5, 6, 7), (12, 14, 16), (17, 19, 21))\n    \"\"\"\n    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in zip(*tuples))\n\n\ndef pairwise_addition_v2(tuples: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\"Returns pairwise addition of the elements of the given tuples.\n\n    Args:\n        tuples (Tuple[Tuple[int, ...], ...]): tuples of integers.\n\n    Examples:\n        >>> assert pairwise_addition_v2(((1, 2, 3), (4, 5, 6))) == ((5, 7, 9), (5, 6, 7))\n        >>> assert pairwise_addition_v2(((1, 2, 3), (4, 5,",
      -2.751953125
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tup_1: Tuple, tup_2: Tuple) -> Tuple:\n    \"\"\"\n    This function finds the pairwise addition of the elements of the given tuples.\n    >>> pairwise_addition((1, 2, 3), (1, 2, 3))\n    (2, 4, 6)\n    >>> pairwise_addition((1, 2, 3), (1, 2, 3, 4))\n    (2, 4, 6, 4)\n    >>> pairwise_addition((1, 2, 3), (1, 2, 3, 4, 5))\n    (2, 4, 6, 4, 5)\n    >>> pairwise_addition((1, 2, 3, 4, 5), (1, 2, 3))\n    (2, 4, 6, 4, 5)\n    >>> pairwise_addition((1, 2, 3), (1, 2, 3, 4, 5, 6))\n    (2, 4, 6, 4, 5, 6)\n    >>> pairwise_addition((1, 2, 3, 4, 5, 6), (1, 2, 3))\n    (2, 4, 6, 4, 5, 6)\n    >>> pairwise_addition((1, 2, 3), (1, 2, 3, 4, 5, 6, 7))\n    (2, 4, 6, 4, 5, 6, 7)\n    >>> pairwise_addition((1, 2, 3, 4, 5, 6, 7), (1, 2, 3))\n    (2, 4, 6, 4, 5, 6, 7)\n    >>> pairwise_addition((1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 6",
      -2.8125
    ],
    [
      "from itertools import product\nfrom typing import List\n\n\ndef pairwise_addition(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Returns a list of tuples with pairwise addition of the elements of the given tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> pairwise_addition([(1, 2), (3, 4)])\n        [(4, 6), (7, 8)]\n        >>> pairwise_addition([(1, 2, 3), (4, 5, 6)])\n        [(5, 7, 9), (5, 6, 7), (6, 7, 8)]\n        >>> pairwise_addition([(1, 2, 3), (4, 5, 6), (7, 8, 9)])\n        [(5, 7, 9), (5, 6, 7), (6, 7, 8), (7, 8, 9), (8, 9, 10)]\n    \"\"\"\n    return [sum(pair) for pair in product(*tuples)]\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition([(1, 2), (3, 4)]))\n    print(pairwise_addition([(1, 2, 3), (4, 5, 6)]))\n    print(pairwise_addition([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))",
      -2.99609375
    ],
    [
      "from itertools import permutations\n\n\n# Time complexity O(n!)\n# Space complexity O(n!)\ndef pairwise_addition(first_tuple, second_tuple):\n    for permutation in permutations(first_tuple):\n        for permutation_2 in permutations(second_tuple):\n            yield permutation + permutation_2\n\n\n# Time complexity O(n!)\n# Space complexity O(n!)\ndef pairwise_addition_2(first_tuple, second_tuple):\n    permutations_of_first_tuple = permutations(first_tuple)\n    permutations_of_second_tuple = permutations(second_tuple)\n\n    while True:\n        try:\n            permutation = next(permutations_of_first_tuple)\n            permutation_2 = next(permutations_of_second_tuple)\n            yield permutation + permutation_2\n        except StopIteration:\n            break\n\n\nprint(list(pairwise_addition((1, 2, 3), (4, 5, 6))))\nprint(list(pairwise_addition_2((1, 2, 3), (4, 5, 6))))",
      -3.560546875
    ],
    [
      "from typing import List\n\n\ndef pairwise_sum(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n    result: List[tuple] = []\n\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            result.append(tuples[i] + tuples[j])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(pairwise_sum([(1, 2), (3, 4)]))",
      -3.8046875
    ],
    [
      "from itertools import combinations\nfrom typing import Tuple\n\n\ndef pairwise_addition(tuples: Tuple[Tuple[int, int], Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"Return pairwise addition of two tuples.\n\n    >>> pairwise_addition(((1, 2), (3, 4)))\n    (4, 6)\n    \"\"\"\n    return tuple(sum(pair) for pair in combinations(*tuples))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition(((1, 2), (3, 4))))",
      -4.0390625
    ],
    [
      "from itertools import combinations\n\n\ndef pairwise_addition(a, b):\n    return [(a[i] + b[i], a[i] + b[i + 1]) for i in range(len(a) - 1)]\n\n\ndef main():\n    t = tuple(range(1, 5))\n    u = tuple(range(1, 5))\n    result = pairwise_addition(t, u)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.25390625
    ],
    [
      "from itertools import permutations\n\n\ndef pairwise_addition(tup1, tup2):\n    \"\"\"\n    Returns a list of tuples where each tuple is the pairwise addition of the elements of the given tuples.\n\n    >>> pairwise_addition((1, 2, 3), (4, 5, 6))\n    [(5, 5, 6), (6, 6, 7), (7, 7, 8)]\n    >>> pairwise_addition((1, 2, 3, 4), (4, 5, 6, 7))\n    [(5, 6, 7, 7), (6, 7, 8, 8), (7, 8, 9, 9), (8, 9, 10, 10)]\n    >>> pairwise_addition((1, 2, 3, 4, 5), (4, 5, 6, 7, 8))\n    [(5, 6, 7, 7, 8), (6, 7, 8, 8, 9), (7, 8, 9, 9, 10), (8, 9, 10, 10, 11)]\n    >>> pairwise_addition((1, 2, 3), (4, 5))\n    []\n    \"\"\"\n    res = []\n    for tup in permutations(tup1):\n        if len(tup) == len(tup2):\n            temp = tuple(map(sum, zip(tup, tup2)))\n            res.append(temp)\n    return res\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -5.3046875
    ],
    [
      "from typing import Tuple\n\n\ndef pairwise_addition(tuples: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\"Returns a tuple of tuples, where each inner tuple is the pairwise addition of the elements of the given tuples.\n\n    Examples:\n        >>> assert pairwise_addition(((1, 2, 3), (4, 5, 6))) == ((5, 7), (9, 11), (12,))\n    \"\"\"\n    return tuple(tuple(a + b for a, b in zip(tuples[0], tuples[1])) for tuples in zip(*tuples))\n\n\nif __name__ == \"__main__\":\n    print(pairwise_addition(((1, 2, 3), (4, 5, 6))))",
      -5.8671875
    ],
    [
      "from functools import reduce\nfrom itertools import combinations\n\n\n# Time complexity O(n!)\ndef pairwise_addition(tup1, tup2):\n    comb = combinations(tup1, 2)\n    res = []\n    for i in comb:\n        res.append(i[0] + i[1])\n    return res\n\n\n# Time complexity O(n^2)\ndef pairwise_addition_eff(tup1, tup2):\n    comb = combinations(tup1, 2)\n    res = []\n    for i in comb:\n        res.append(i[0] + i[1])\n    return res\n\n\n# Time complexity O(n*m)\ndef pairwise_addition_eff(tup1, tup2):\n    comb = combinations(tup1, 2)\n    res = []\n    for i in comb:\n        res.append(i[0] + i[1])\n    return res\n\n\n# Time complexity O(n*m)\ndef pairwise_addition_eff(tup1, tup2):\n    comb = combinations(tup1, 2)\n    res = []\n    for i in comb:\n        res.append(i[0] + i[1])\n    return res\n\n\n# Time complexity O(n*m)\ndef pairwise_addition_eff(tup1, tup2):\n    comb = combinations(tup1, 2)\n    res = []\n    for i in comb:\n        res.append(i[0] + i[1])\n    return res\n\n\n# Time complexity O(n*m)\ndef pairwise_addition_eff(tup1, tup2):\n    comb = combinations(tup1, 2)\n    res = []\n    for i in comb:\n        res.append(i[0] + i[1])\n    return res\n\n\n# Time complexity O(n*m)\ndef pairwise_addition_eff(tup1, tup2):\n    comb = combinations(tup1, 2)\n    res = []\n    for i in comb:\n        res.append",
      -6.3125
    ],
    [
      "from typing import List, Tuple\n\n\ndef add_tuples(tuple_1: Tuple[int, ...], tuple_2: Tuple[int, ...]) -> List[Tuple[int, ...]]:\n    \"\"\"Returns the pairwise addition of the elements of the given tuples.\n\n    Args:\n        tuple_1: Tuple of integers.\n        tuple_2: Tuple of integers.\n\n    Examples:\n        >>> assert add_tuples((1, 2, 3), (4, 5, 6)) == [(5, 7, 9)]\n        >>> assert add_tuples((1, 2, 3), (4, 5)) == [(5, 7, 3)]\n    \"\"\"\n    result: List[Tuple[int, ...]] = []\n\n    for i in range(max(len(tuple_1), len(tuple_2))):\n        value_1 = tuple_1[i] if i < len(tuple_1) else 0\n        value_2 = tuple_2[i] if i < len(tuple_2) else 0\n        result.append((value_1 + value_2,))\n\n    return result\n\n\ndef add_tuples_optimal(tuple_1: Tuple[int, ...], tuple_2: Tuple[int, ...]) -> List[Tuple[int, ...]]:\n    \"\"\"Returns the pairwise addition of the elements of the given tuples.\n\n    Args:\n        tuple_1: Tuple of integers.\n        tuple_2: Tuple of integers.\n\n    Examples:\n        >>> assert add_tuples_optimal((1, 2, 3), (4, 5, 6)) == [(5, 7, 9)]\n        >>> assert add_tuples_optimal((1, 2, 3), (4, 5)) == [(5, 7, 3)]\n    \"\"\"\n    return list(map(sum, zip(tuple_1, tuple_2)))\n\n\nif __name__ == \"__main__\":\n    print(add_tuples((1, 2, 3), (4, 5, 6)))",
      -6.44140625
    ],
    [
      "from typing import List\n\n\ndef pairwise_addition(input_list: List) -> List:\n    \"\"\"\n    :param input_list: list of tuples\n    :return: list of tuples\n    >>> pairwise_addition([(1, 2), (2, 3), (3, 4)])\n    [(3, 5), (5, 7)]\n    >>> pairwise_addition([(1, 2, 3), (2, 3, 4), (3, 4, 5)])\n    [(4, 6, 9), (6, 9, 15)]\n    \"\"\"\n    return [\n        (input_list[i][j], input_list[i][j + 1], input_list[i][j] + input_list[i][j + 1])\n        for i in range(len(input_list) - 1)\n        for j in range(len(input_list[i]) - 1)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -6.86328125
    ],
    [
      "from itertools import product\n\n\ndef pairwise_addition(tuples):\n    \"\"\"\n    >>> pairwise_addition(((1, 2, 3), (4, 5, 6)))\n    [(5, 5, 5), (6, 6, 6), (7, 7, 7)]\n    >>> pairwise_addition(((1, 2, 3), (4, 5, 6), (7, 8, 9)))\n    [(5, 5, 5), (6, 6, 6), (7, 7, 7), (8, 8, 8), (9, 9, 9)]\n    >>> pairwise_addition(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)))\n    [(5, 5, 5), (6, 6, 6), (7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10), (11, 11, 11)]\n    >>> pairwise_addition(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)))\n    [(5, 5, 5), (6, 6, 6), (7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10), (11, 11, 11), (13, 13, 13), (14, 14, 14), (15, 15, 15)]\n    \"\"\"\n    return [tuple(map(sum, i)) for i in product(*tuples)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -8.5234375
    ],
    [
      "from itertools import combinations\n\n\ndef pairwise_addition(tuples):\n    result = set()\n    for tup in tuples:\n        for combination in combinations(tup, 2):\n            result.add(sum(combination))\n    return result\n\n\nif __name__ == \"__main__\":\n    assert pairwise_addition([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == {\n        \"11\", \"12\", \"13\", \"23\", \"45\", \"46\", \"47\", \"56\", \"57\", \"58\", \"67\", \"68\", \"69\", \"78\", \"79\", \"89\", \"10\", \"14\",\n        \"15\", \"16\", \"17\", \"18\", \"19\", \"25\", \"26\", \"27\", \"28\", \"29\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"50\",\n        \"51\", \"52\", \"53\", \"54\", \"55\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\",\n        \"76\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\"\n    }",
      -9.0390625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}