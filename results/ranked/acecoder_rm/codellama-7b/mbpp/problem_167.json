{
  "problem": {
    "task_id": "MBPP/178",
    "prompt": "Write a function to search some literals strings in a string.",
    "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
    "test_list": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ],
    "challenge_test_list": [],
    "problem_id": 167
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def string_search(input_string: str, literals: list) -> list:\n    \"\"\"\n    >>> string_search('abc', ['a', 'b', 'c'])\n    ['a', 'b', 'c']\n    >>> string_search('abc', ['d', 'e', 'f'])\n    []\n    >>> string_search('', ['a', 'b', 'c'])\n    []\n    >>> string_search('abc', [''])\n    []\n    \"\"\"\n    output = []\n    for literal in literals:\n        if literal in input_string:\n            output.append(literal)\n    return output\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      17.703125
    ],
    [
      "def search_literals(string: str, literals: list) -> bool:\n    \"\"\"\n    >>> search_literals('I love cats', ['cats', 'dogs'])\n    True\n    >>> search_literals('I love cats', ['cats', 'dogs', 'fish'])\n    True\n    >>> search_literals('I love cats', ['cats'])\n    True\n    >>> search_literals('I love cats', ['dogs', 'fish'])\n    False\n    \"\"\"\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      17.53125
    ],
    [
      "def search(text, literals):\n    \"\"\"\n    >>> search(\"Hello World\", [\"Hello\", \"World\"])\n    ['Hello', 'World']\n    >>> search(\"Hello World\", [\"World\", \"Hello\"])\n    ['World', 'Hello']\n    >>> search(\"Hello World\", [\"World\", \"Hello\", \"Bye\"])\n    ['World', 'Hello', None]\n    >>> search(\"Hello World\", [\"Hello\", \"World\", \"Bye\"])\n    ['Hello', 'World', None]\n    >>> search(\"Hello World\", [\"Hello\", \"World\", \"Bye\", \"Bye\"])\n    ['Hello', 'World', None, None]\n    >>> search(\"Hello World\", [])\n    []\n    >>> search(\"Hello World\", [\"Bye\"])\n    [None]\n    \"\"\"\n\n    result = []\n    for literal in literals:\n        if literal in text:\n            result.append(literal)\n        else:\n            result.append(None)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      16.609375
    ],
    [
      "def search_literals(string, literals):\n    \"\"\"\n    >>> search_literals(\"I am a string\", [\"am\", \"string\"])\n    ['am', 'string']\n    >>> search_literals(\"I am a string\", [\"am\", \"strings\"])\n    []\n    >>> search_literals(\"I am a string\", [\"am\", \"string\", \"a\"])\n    ['am', 'string', 'a']\n    >>> search_literals(\"I am a string\", [\"am\", \"string\", \"a\", \"b\"])\n    ['am', 'string', 'a', 'b']\n    \"\"\"\n    return [literal for literal in literals if literal in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      13.7734375
    ],
    [
      "def contains_all(source: str, *args) -> bool:\n    \"\"\"\n    >>> contains_all(\"This is the string\", \"is\", \"the\", \"string\")\n    True\n    >>> contains_all(\"This is the string\", \"is\", \"not\", \"the\")\n    False\n    \"\"\"\n    return all(arg in source for arg in args)\n\n\ndef contains_all_builtin(source: str, *args) -> bool:\n    \"\"\"\n    >>> contains_all(\"This is the string\", \"is\", \"the\", \"string\")\n    True\n    >>> contains_all(\"This is the string\", \"is\", \"not\", \"the\")\n    False\n    \"\"\"\n    return all(arg in source for arg in args)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      11.046875
    ],
    [
      "def search(string, literals):\n    \"\"\"\n    >>> search('Lorem ipsum dolor sit amet', ['ipsum', 'amet'])\n    ['ipsum', 'amet']\n    >>> search('Lorem ipsum dolor sit amet', ['ipsum', 'amet', 'lorem'])\n    ['ipsum', 'amet', 'lorem']\n    >>> search('Lorem ipsum dolor sit amet', ['ipsum', 'amet', 'lorem', 'sit'])\n    ['ipsum', 'amet', 'lorem', 'sit']\n    >>> search('Lorem ipsum dolor sit amet', ['ipsum', 'amet', 'lorem', 'sit', 'dolor'])\n    ['ipsum', 'amet', 'lorem', 'sit', 'dolor']\n    >>> search('Lorem ipsum dolor sit amet', ['ipsum', 'amet', 'lorem', 'sit', 'dolor', 'consectetur'])\n    []\n    \"\"\"\n    return [\n        word for word in literals if word in string.lower()\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      9.296875
    ],
    [
      "import unittest\n\n\ndef find_literals(haystack, *needles):\n    return [x for x in needles if x in haystack]\n\n\nclass Test(unittest.TestCase):\n    def test_find_literals(self):\n        self.assertEqual(find_literals('foobar', 'foo', 'bar'), ['foo', 'bar'])\n        self.assertEqual(find_literals('foobar', 'foo', 'baz'), ['foo'])\n        self.assertEqual(find_literals('foobar', 'baz', 'bar'), ['bar'])\n        self.assertEqual(find_literals('foobar', 'foo', 'bar', 'baz'), ['foo', 'bar'])\n        self.assertEqual(find_literals('foobar', 'foo', 'bar', 'baz', 'foobar'), ['foo', 'bar', 'foobar'])",
      9.015625
    ],
    [
      "import unittest\n\n\ndef find_substring(search_strings, target_string):\n    search_strings = search_strings.split(\" \")\n    for search_string in search_strings:\n        if search_string in target_string:\n            return True\n    return False\n\n\nclass FindSubstringTest(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(\n            find_substring(\"hello world\", \"hello\"),\n            True,\n            \"Should return True\",\n        )\n\n    def test_2(self):\n        self.assertEqual(\n            find_substring(\"hello world\", \"world\"),\n            True,\n            \"Should return True\",\n        )\n\n    def test_3(self):\n        self.assertEqual(\n            find_substring(\"hello world\", \"bye\"),\n            False,\n            \"Should return False\",\n        )\n\n    def test_4(self):\n        self.assertEqual(\n            find_substring(\"hello world\", \"hello world\"),\n            True,\n            \"Should return True\",\n        )\n\n    def test_5(self):\n        self.assertEqual(\n            find_substring(\"hello world\", \"hello world hello world\"),\n            True,\n            \"Should return True\",\n        )\n\n    def test_6(self):\n        self.assertEqual(\n            find_substring(\"hello world\", \"\"),\n            False,\n            \"Should return False\",\n        )\n\n    def test_7(self):\n        self.assertEqual(\n            find_substring(\"hello world\", None),\n            False,\n            \"Should return False\",\n        )\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      9.015625
    ],
    [
      "def search_literals(string, literals):\n    \"\"\"\n    >>> search_literals('this is a test', ['is', 'a'])\n    ['is', 'a']\n    >>> search_literals('this is a test', ['is'])\n    ['is']\n    >>> search_literals('this is a test', ['is', 'a', 'test'])\n    ['is', 'a', 'test']\n    >>> search_literals('this is a test', ['is', 'a', 'test', 'this'])\n    ['is', 'a', 'test']\n    >>> search_literals('this is a test', ['is', 'a', 'test', 'this', 'a'])\n    ['is', 'a', 'test', 'a']\n    \"\"\"\n    # pylint: disable=import-outside-toplevel\n    from functools import reduce\n\n    if not string or not literals:\n        return []\n\n    return reduce(\n        lambda acc, literal: acc + [literal] if literal in string else acc,\n        literals,\n        [],\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.859375
    ],
    [
      "def search_literals(literals, string):\n    \"\"\"\n    :type literals: List[str]\n    :type string: str\n    :rtype: List[int]\n    \"\"\"\n    literals_index = []\n    for i in range(len(literals)):\n        index = string.find(literals[i])\n        if index >= 0:\n            literals_index.append(index)\n\n    return literals_index\n\n\nif __name__ == '__main__':\n    literals = [\"abc\", \"abd\", \"abcde\"]\n    string = \"abcabdabcde\"\n    print(search_literals(literals, string))",
      8.5859375
    ],
    [
      "def search_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return literal\n    return None\n\n\ndef search_literals_optimized(literals, text):\n    for literal in literals:\n        if text.find(literal) >= 0:\n            return literal\n    return None\n\n\ndef search_literals_optimized_v2(literals, text):\n    for literal in literals:\n        if literal in text:\n            return literal\n    return None\n\n\ndef test_search_literals():\n    assert search_literals([\"a\", \"b\"], \"a and b\") == \"a\"\n    assert search_literals([\"a\", \"b\"], \"b and a\") == \"b\"\n    assert search_literals([\"a\", \"b\"], \"c\") is None\n    assert search_literals([\"a\", \"b\"], \"ac\") is None\n\n\ndef test_search_literals_optimized():\n    assert search_literals_optimized([\"a\", \"b\"], \"a and b\") == \"a\"\n    assert search_literals_optimized([\"a\", \"b\"], \"b and a\") == \"b\"\n    assert search_literals_optimized([\"a\", \"b\"], \"c\") is None\n    assert search_literals_optimized([\"a\", \"b\"], \"ac\") is None\n\n\ndef test_search_literals_optimized_v2():\n    assert search_literals_optimized_v2([\"a\", \"b\"], \"a and b\") == \"a\"\n    assert search_literals_optimized_v2([\"a\", \"b\"], \"b and a\") == \"b\"\n    assert search_literals_optimized_v2([\"a\", \"b\"], \"c\") is None\n    assert search_literals_optimized_v2([\"a\", \"b\"], \"ac\") is None",
      8.4765625
    ],
    [
      "def literals_search(string, literals):\n    if not string or not literals:\n        return False\n\n    if len(literals) == 1:\n        return literals[0] in string\n\n    for literal in literals:\n        if literal in string:\n            return True\n\n    return False\n\n\nif __name__ == '__main__':\n    assert literals_search('', ['a']) is False\n    assert literals_search('', []) is False\n    assert literals_search('', ['']) is False\n    assert literals_search('test', ['a', 'b']) is False\n    assert literals_search('test', ['a', 'b', 'test']) is True\n    assert literals_search('test', ['a', 'b', 'c', 'd', 'e', 'f']) is False\n    assert literals_search('test', ['a', 'b', 'c', 'd', 'e', 'f', 'test']) is True\n    assert literals_search('test', ['test', 'test', 'test']) is True\n    assert literals_search('test', ['t', 'es', 't']) is True\n    assert literals_search('test', ['t', 'es', 'ts']) is False\n    assert literals_search('test', ['est', 't']) is True\n    assert literals_search('test', ['est', 'st']) is False\n    assert literals_search('test', ['est', 'tes', 'test', 'tes']) is True",
      8.28125
    ],
    [
      "def search_literals(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\ndef test_search_literals():\n    assert search_literals('Hello world!', ['Hi', 'Hey']) is False\n    assert search_literals('Hello world!', ['Hello', 'World']) is True\n    assert search_literals('Hello world!', ['Hello', 'World', 'Hi']) is True",
      7.50390625
    ],
    [
      "import re\n\ndef search_literals(literals, search):\n    \"\"\"\n    >>> search_literals(['a', 'b', 'c'], 'abc')\n    True\n    >>> search_literals(['a', 'b', 'c'], 'abcd')\n    False\n    >>> search_literals(['a', 'b', 'c'], 'ac')\n    False\n    >>> search_literals(['a', 'b', 'c'], 'c')\n    True\n    >>> search_literals(['a', 'b', 'c'], 'd')\n    False\n    \"\"\"\n    # return bool(re.search('|'.join(literals), search))\n    for literal in literals:\n        if literal in search:\n            return True\n    return False\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      7.02734375
    ],
    [
      "def search_strings(string, literals):\n    if not string or not literals:\n        return False\n    for literal in literals:\n        if literal not in string:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    assert search_strings('', []) is False\n    assert search_strings('', ['']) is True\n    assert search_strings('abc', ['']) is True\n    assert search_strings('abc', ['ab']) is True\n    assert search_strings('abc', ['ab', 'abc']) is True\n    assert search_strings('abc', ['ab', 'abc', 'abcd']) is False\n    assert search_strings('abc', ['bc', 'bc']) is True\n    assert search_strings('abc', ['bc', 'bc', 'abc']) is True\n    assert search_strings('abc', ['bc', 'bc', 'abc', 'bcd']) is False\n    assert search_strings('abc', ['a', 'b', 'c']) is True\n    assert search_strings('abc', ['a', 'b', 'c', 'd']) is False\n    assert search_strings('abc', ['a', 'b', 'd', 'e']) is False\n    assert search_strings('abc', ['d', 'e', 'f']) is False",
      6.62890625
    ],
    [
      "def search(string, literals):\n    \"\"\"\n    Time complexity: O(n + m).\n    Space complexity: O(n).\n    \"\"\"\n    # Edge case.\n    if not string or not literals:\n        return False\n\n    # Split the string into words.\n    words = string.split(' ')\n\n    # Iterate words to check if there is any match.\n    for word in words:\n        if word in literals:\n            return True\n\n    return False\n\n\ndef search_2(string, literals):\n    \"\"\"\n    Time complexity: O(n + m).\n    Space complexity: O(1).\n    \"\"\"\n    # Edge case.\n    if not string or not literals:\n        return False\n\n    # Iterate literals to check if there is any match.\n    for literal in literals:\n        if literal in string:\n            return True\n\n    return False\n\n\ndef main():\n    # Output: True.\n    string = 'This is a string to be searched.'\n    literals = ['a', 'b', 'c']\n    print search(string, literals)\n    print search_2(string, literals)\n\n    # Output: False.\n    string = 'This is a string to be searched.'\n    literals = ['d', 'e', 'f']\n    print search(string, literals)\n    print search_2(string, literals)\n\n\nif __name__ == '__main__':\n    main()",
      6.11328125
    ],
    [
      "def search_literals(string, literals):\n    return [match for match in literals if match in string]\n\n\nif __name__ == \"__main__\":\n    print(search_literals(\"i'm a string\", [\"i\", \"am\"]))\n    print(search_literals(\"i'm a string\", [\"i\", \"am\", \"string\"]))",
      5.7890625
    ],
    [
      "def find_literals(str1, literals):\n    return [i for i in literals if i in str1]\n\n\nif __name__ == '__main__':\n    assert find_literals('abcdefgh', ['a', 'b', 'd', 'f']) == ['a', 'b', 'd', 'f']\n    assert find_literals('abcdefgh', ['a', 'b', 'd', 'e']) == ['a', 'b', 'd']\n    assert find_literals('abcdefgh', ['a', 'b', 'd', 'f', 'e']) == ['a', 'b', 'd', 'f']\n    assert find_literals('abcdefgh', ['a', 'b', 'd', 'f', 'g']) == ['a', 'b', 'd', 'f', 'g']",
      5.765625
    ],
    [
      "def search_strings(haystack: str, needles: list) -> list:\n    \"\"\"\n    >>> search_strings('hello world', ['hello', 'world'])\n    ['hello', 'world']\n    >>> search_strings('hello world', ['hello', 'world', 'foo'])\n    ['hello', 'world']\n    >>> search_strings('hello world', ['foo'])\n    []\n    \"\"\"\n    return [string for string in needles if string in haystack]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.697265625
    ],
    [
      "def contains(big_string, small_strings):\n    \"\"\"\n    >>> contains(\"Hello, World!\", [\"Hello\", \"World\"])\n    True\n    \"\"\"\n\n    for small_string in small_strings:\n        if big_string.find(small_string) == -1:\n            return False\n\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      3.626953125
    ],
    [
      "import re\n\n\ndef search_literals(text, literals):\n    for literal in literals:\n        if re.search(r\"({})\".format(literal), text):\n            return True\n    return False\n\n\ndef main():\n    assert search_literals(\n        \"I am the greatest man in the world\", [\"great\", \"awesome\"])\n    assert not search_literals(\n        \"I am the greatest man in the world\", [\"greatest\", \"awesome\"])\n\n\nif __name__ == \"__main__\":\n    main()",
      3.328125
    ],
    [
      "def find_literals(string, *literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\ndef test_find_literals():\n    assert find_literals(\"\", \"\")\n    assert find_literals(\"test\", \"\")\n    assert find_literals(\"test\", \"a\")\n    assert find_literals(\"test\", \"a\", \"b\", \"c\", \"d\")\n    assert find_literals(\"test\", \"t\", \"e\", \"s\")\n    assert find_literals(\"test\", \"a\", \"b\", \"t\", \"e\", \"s\", \"c\", \"d\")\n    assert not find_literals(\"test\", \"a\", \"b\", \"c\")\n    assert not find_literals(\"test\", \"t\", \"e\", \"s\", \"c\", \"d\")",
      2.39453125
    ],
    [
      "def find_literals(string, literals):\n    for literal in literals:\n        if string.find(literal) != -1:\n            return literal\n    return None\n\n\ndef test_find_literals():\n    assert find_literals(\"Hello\", [\"Hello\", \"World\"]) == \"Hello\"\n    assert find_literals(\"Hello\", [\"World\", \"Hello\"]) == \"Hello\"\n    assert find_literals(\"Hello\", [\"World\", \"Hello\", \"Goodbye\"]) == \"Hello\"\n    assert find_literals(\"Hello\", [\"Hello\", \"World\", \"Goodbye\"]) == \"Hello\"\n    assert find_literals(\"Hello\", [\"World\", \"Goodbye\"]) is None\n    assert find_literals(\"Hello\", [\"Goodbye\", \"World\"]) is None\n\n\nif __name__ == \"__main__\":\n    test_find_literals()",
      2.0078125
    ],
    [
      "def search_literals(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nprint(search_literals('abc', ['a', 'b', 'c']))\nprint(search_literals('abc', ['d', 'e']))\nprint(search_literals('abc', ['a', 'b', 'c', 'd']))",
      1.9462890625
    ],
    [
      "def search_literals(search_in, search_for):\n    \"\"\"\n    >>> search_literals('Lorem ipsum dolor sit amet', 'ipsum')\n    True\n    >>> search_literals('Lorem ipsum dolor sit amet', 'amet')\n    True\n    >>> search_literals('Lorem ipsum dolor sit amet', 'dolor')\n    False\n    \"\"\"\n    return search_in.find(search_for) != -1\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      1.751953125
    ],
    [
      "def search_literals(string, literals):\n    for literal in literals:\n        if literal in string:\n            return literal\n    return None\n\n\nprint(search_literals(\"The cat is walking\", [\"dog\", \"cat\"]))\nprint(search_literals(\"The cat is walking\", [\"cat\"]))\nprint(search_literals(\"The cat is walking\", [\"dog\", \"tiger\", \"lion\"]))",
      1.6865234375
    ],
    [
      "def search_literals(string, literals):\n    for literal in literals:\n        if literal not in string:\n            return False\n    return True\n\n\ndef test_literals():\n    \"\"\"\n    >>> test_literals()\n    \"\"\"\n    assert search_literals(\"abc\", [\"abc\"])\n    assert search_literals(\"abcabc\", [\"abc\"])\n    assert search_literals(\"abcabc\", [\"abc\", \"d\"])\n    assert not search_literals(\"abcabc\", [\"a\", \"b\", \"c\"])\n    assert not search_literals(\"abcabc\", [\"ab\", \"c\"])\n    assert not search_literals(\"abcabc\", [\"ab\", \"c\", \"d\"])",
      1.6513671875
    ],
    [
      "import unittest\n\n\ndef find_string(text, literals):\n    return [i for i in literals if i in text]\n\n\nclass TestFindString(unittest.TestCase):\n    def test_find_string(self):\n        self.assertListEqual(find_string('Hello', ['Hi', 'Ho']), [])\n        self.assertListEqual(find_string('Hello', ['He']), ['He'])\n        self.assertListEqual(find_string('Hello', ['el', 'll']), ['el', 'll'])\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      1.09375
    ],
    [
      "def search_literals(text: str, literals: list) -> list:\n    \"\"\"\n    >>> search_literals(\"aaa bbb ccc\", [\"bbb\", \"ccc\"])\n    ['bbb', 'ccc']\n    \"\"\"\n    return [i for i in literals if i in text]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.90576171875
    ],
    [
      "def find_literal(s, literals):\n    return [l for l in literals if l in s]\n\n\nif __name__ == '__main__':\n    assert find_literal(\"hello world\", [\"hello\", \"world\"]) == [\"hello\", \"world\"]\n    assert find_literal(\"hello world\", [\"world\"]) == [\"world\"]\n    assert find_literal(\"hello world\", [\"foo\"]) == []\n    assert find_literal(\"\", [\"hello\", \"world\"]) == []",
      0.8134765625
    ],
    [
      "def find_all(string, search):\n    i = 0\n    while i < len(string):\n        if string[i] in search:\n            return True\n        i += 1\n    return False\n\n\nif __name__ == \"__main__\":\n    print(find_all(\"python\", \"tho\"))",
      0.79736328125
    ],
    [
      "def search_string(text, literals):\n    \"\"\"Search some literals strings in a string.\n\n    Args:\n        text (str): Text to search.\n        literals (list): List of literals to search in text.\n\n    Returns:\n        list: List of literals founded.\n\n    \"\"\"\n    return [literal for literal in literals if literal in text]\n\n\nif __name__ == \"__main__\":\n    print(search_string(\"hello world\", [\"hello\", \"world\", \"hi\"]))\n    print(search_string(\"hello world\", [\"bye\", \"hi\"]))",
      0.7353515625
    ],
    [
      "def find_string_in_string(string, literals):\n    \"\"\"\n    >>> find_string_in_string('a cat', ['cat', 'dog'])\n    ['cat']\n    >>> find_string_in_string('a cat and a dog', ['cat', 'dog'])\n    ['cat', 'dog']\n    >>> find_string_in_string('a cat and a dog', ['cat'])\n    ['cat']\n    >>> find_string_in_string('a cat and a dog', ['dog'])\n    ['dog']\n    >>> find_string_in_string('a cat and a dog', [])\n    []\n    \"\"\"\n    return [lit for lit in literals if lit in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.39404296875
    ],
    [
      "def string_search(haystack, needles):\n    \"\"\"\n    :param haystack: string to search in\n    :param needles: list of strings to search for\n    :return: list of indices of the needles in the haystack\n    \"\"\"\n    indices = []\n    for needle in needles:\n        index = haystack.find(needle)\n        if index != -1:\n            indices.append(index)\n    return indices\n\n\nif __name__ == '__main__':\n    print(string_search(\"abcdefgabcdefgabcdefgabcdefgabcdefgabcdefg\", [\"abc\", \"def\", \"g\"]))",
      0.30078125
    ],
    [
      "def find_literals(string, *args):\n    for arg in args:\n        if arg in string:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(find_literals('Python is an interpreted high-level general-purpose programming language', 'Python', 'Java'))\n    print(find_literals('Python is an interpreted high-level general-purpose programming language', 'Python', 'Java', 'C++'))",
      0.25390625
    ],
    [
      "def search_literal(string, literals):\n    for literal in literals:\n        if literal in string:\n            return literal\n    return None\n\n\ndef main():\n    string = \"I am a string\"\n    literals = [\"I\", \"am\", \"a\"]\n    print(search_literal(string, literals))\n\n\nif __name__ == '__main__':\n    main()",
      0.1890869140625
    ],
    [
      "def string_search(string, literals):\n    \"\"\"\n    >>> string_search(\"AABBCCDDEE\", [\"AAB\", \"BB\", \"CC\", \"EE\"])\n    ['AAB', 'EE']\n    >>> string_search(\"AAABBCCDEEE\", [\"AAB\", \"BB\", \"CC\", \"EE\"])\n    ['AAB', 'BB', 'CC', 'EE']\n    >>> string_search(\"AAABBCCDEEE\", [\"AAB\", \"BB\", \"CC\", \"EE\", \"FF\"])\n    ['AAB', 'BB', 'CC', 'EE']\n    >>> string_search(\"AAABBCCDEEE\", [\"AAA\", \"BB\", \"CC\", \"EE\", \"FF\"])\n    ['AAA', 'BB', 'CC', 'EE']\n    \"\"\"\n    result = []\n    for literal in literals:\n        if literal in string:\n            result.append(literal)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.09844970703125
    ],
    [
      "def search(text, literals):\n    for literal in literals:\n        if literal in text:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(search(\n        'lorem ipsum dolor sit amet',\n        ['amet', 'lorem']\n    ))",
      0.07843017578125
    ],
    [
      "def search_strings(search_in, search_for):\n    \"\"\"\n    >>> search_strings('This is a string', ['is', 'a'])\n    ['is', 'a']\n    \"\"\"\n    return [i for i in search_for if i in search_in]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.053955078125
    ],
    [
      "def search_literals(literals, string):\n    \"\"\"\n    >>> search_literals(['A', 'B'], 'ABCD')\n    [0, 2]\n    \"\"\"\n    literals = [literal.lower() for literal in literals]\n    string = string.lower()\n    return [i for i, c in enumerate(string) if c in literals]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      0.005680084228515625
    ],
    [
      "def literals_search(string, literals):\n    \"\"\"\n    >>> literals_search('hola', ['a', 'l'])\n    ['l']\n    \"\"\"\n    result = []\n    for letter in literals:\n        if letter in string:\n            result.append(letter)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.1815185546875
    ],
    [
      "def find_literals(string, *literals):\n    for literal in literals:\n        if literal in string:\n            return literal\n\n\nif __name__ == '__main__':\n    assert find_literals('hello world', 'hello', 'hi') == 'hello'\n    assert find_literals('hello world', 'hi', 'hello') == 'hello'\n    assert find_literals('hello world', 'hi', 'bye') is None\n    assert find_literals('hello world', 'hello', 'hi', 'bye') == 'hello'",
      -0.327392578125
    ],
    [
      "def find_literals(string: str, literals: str) -> int:\n    \"\"\"\n    >>> find_literals('I like python', 'python')\n    2\n    >>> find_literals('I like python', 'java')\n    -1\n    >>> find_literals('I like python', 't')\n    8\n    \"\"\"\n    for literal in literals:\n        if literal in string:\n            return string.index(literal)\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.389404296875
    ],
    [
      "import re\n\n\ndef search_literals(string, literals):\n    \"\"\"Search some literals strings in a string.\n    >>> search_literals('hello world', ['hello', 'world'])\n    ['hello', 'world']\n    >>> search_literals('hello', ['hello', 'world'])\n    ['hello']\n    >>> search_literals('world', ['hello', 'world'])\n    ['world']\n    >>> search_literals('hello world', ['world'])\n    ['world']\n    >>> search_literals('hello world', ['hello', 'world', 'test'])\n    ['hello', 'world']\n    >>> search_literals('hello world', [])\n    []\n    >>> search_literals('hello world', None)\n    []\n    >>> search_literals('hello world', 'hello')\n    Traceback (most recent call last):\n        ...\n    AssertionError\n    \"\"\"\n    assert isinstance(literals, list)\n    if not literals:\n        return []\n    return [i for i in literals if i in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.4619140625
    ],
    [
      "def search_literals(haystack, *needles):\n    return all(needle in haystack for needle in needles)\n\n\ndef test_search_literals():\n    assert search_literals('abc', 'ab')\n    assert not search_literals('abc', 'a', 'bc')\n    assert search_literals('abc', 'a', 'b', 'c')\n    assert not search_literals('abc', 'ab', 'x')\n    assert search_literals('abc', 'ab', 'c')\n    assert search_literals('abc', 'ab', 'c', 'x')",
      -0.6025390625
    ],
    [
      "def find_literals(s: str, literals: list[str]):\n    for literal in literals:\n        if literal in s:\n            return True\n    return False\n\n\ndef main():\n    s = \"Hello, World!\"\n    literals = [\"Hello\", \"World\"]\n    print(find_literals(s, literals))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.65380859375
    ],
    [
      "def find_literals(search_in, search_for):\n    \"\"\"\n    Finds all literals in a string.\n\n    >>> find_literals('This is a test.', 'is')\n    ['is', 'is']\n    \"\"\"\n    return [match.group(0) for match in re.finditer(r'(is)', search_in)]",
      -0.7490234375
    ],
    [
      "def find_literals(string, literals):\n    return [literal for literal in literals if literal in string]",
      -0.85595703125
    ],
    [
      "def search(string, literals):\n    \"\"\"\n    >>> search(\"I am a cat. I am a dog.\", [\"I\", \"am\"])\n    True\n    \"\"\"\n\n    for literal in literals:\n        if literal not in string:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "import unittest\n\n\ndef find_all_literals(haystack, needles):\n    return [\n        i for i, needle in enumerate(needles)\n        if needle in haystack\n    ]\n\n\nclass TestFindLiterals(unittest.TestCase):\n    def test_find_literals(self):\n        self.assertEqual(find_all_literals(\"hello\", [\"he\", \"ll\", \"o\"]), [0, 1, 4])\n        self.assertEqual(find_all_literals(\"hello\", [\"ll\", \"xz\"]), [1, 4])\n        self.assertEqual(find_all_literals(\"hello\", [\"ab\", \"ll\", \"zz\"]), [1])\n        self.assertEqual(find_all_literals(\"\", [\"ll\", \"zz\"]), [])\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      -0.85693359375
    ],
    [
      "def search_string(s1, s2, s3, s4, s5, s6):\n    if s1 in s2 and s1 in s3:\n        return s1\n    if s4 in s5 and s4 in s6:\n        return s4\n    return \"Not found\"\n\n\ndef main():\n    print(search_string(\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"))\n    print(search_string(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"))\n    print(search_string(\"z\", \"b\", \"c\", \"d\", \"e\", \"f\"))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def find_literals(string, literals):\n    \"\"\"\n    >>> find_literals(\"Hello World\", [\"Hello\", \"World\"])\n    True\n    >>> find_literals(\"Hello World\", [\"Hello\", \"World!!\"])\n    False\n    \"\"\"\n    return any(literal in string for literal in literals)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def find_literals(string, literals):\n    for literal in literals:\n        if string.find(literal) == -1:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    string = 'abcd'\n    literals = ['a', 'b']\n    print(find_literals(string, literals))",
      -0.85693359375
    ],
    [
      "def find_literals(string, literals):\n    \"\"\"\n    >>> find_literals('abcdefg', ['ab', 'ef', 'g'])\n    [['ab', 0], ['ef', 2], ['g', 6]]\n    \"\"\"\n    return [\n        [literal, index]\n        for literal in literals\n        for index in [string.find(literal)]\n        if index != -1\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def find_literals(string, *literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert find_literals(\"hello world\", \"hello\", \"hey\")\n    assert not find_literals(\"hello world\", \"hey\", \"hi\")\n    assert not find_literals(\"hello world\", \"hey\")",
      -0.85693359375
    ],
    [
      "def search_literals(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False",
      -0.857421875
    ],
    [
      "def find_literals(string, *args):\n    \"\"\"\n    >>> find_literals(\"python is the best\", \"python\", \"best\")\n    ['python', 'best']\n    >>> find_literals(\"python is the best\", \"java\", \"ruby\")\n    []\n    \"\"\"\n    return [\n        arg for arg in args if arg in string\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "def find_literals(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(find_literals(\"Hello World\", [\"H\", \"W\"]))",
      -0.85791015625
    ],
    [
      "def literals_search(s, literals):\n    for literal in literals:\n        if literal not in s:\n            return False\n    return True",
      -0.85791015625
    ],
    [
      "def search_literals(literals: list, string: str) -> list:\n    \"\"\"\n    >>> search_literals(['abc', 'def'], 'abcdef')\n    [0]\n    >>> search_literals(['abc', 'def'], 'defabc')\n    [1]\n    >>> search_literals(['abc', 'def'], 'ghi')\n    []\n    \"\"\"\n    return [i for i, literal in enumerate(literals) if literal in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def search_literals(haystack, needles):\n    if haystack == '' or needles == '':\n        return -1\n\n    for needle in needles:\n        if needle in haystack:\n            return haystack.index(needle)\n\n    return -1",
      -0.8583984375
    ],
    [
      "def search_literals(haystack, *needles):\n    \"\"\"\n    >>> search_literals('The rain in Spain', 'Spa', 'ain')\n    True\n    >>> search_literals('The rain in Spain', 'Foo', 'Bar')\n    False\n    \"\"\"\n    for needle in needles:\n        if needle not in haystack:\n            return False\n    return True\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def find_literals(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nprint(find_literals(\"Hi there, my name is Tazri\", [\"my\", \"name\"]))\nprint(find_literals(\"Hi there, my name is Tazri\", [\"hi\", \"name\"]))\nprint(find_literals(\"Hi there, my name is Tazri\", [\"hi\", \"name\", \"my\"]))",
      -0.8583984375
    ],
    [
      "def find_literals(string, literals):\n    for literal in literals:\n        if string.find(literal) != -1:\n            return literal\n    return None\n\n\nif __name__ == \"__main__\":\n    string = \"This is a test string\"\n    literals = [\"is\", \"a\"]\n    print(find_literals(string, literals))",
      -0.8583984375
    ],
    [
      "def search_in_string(string, literals):\n    \"\"\"\n    >>> search_in_string('hello world', ['hello', 'world', 'hi'])\n    ['hello', 'world']\n    >>> search_in_string('hi', ['hello', 'world', 'hi'])\n    ['hi']\n    >>> search_in_string('bye', ['hello', 'world', 'hi'])\n    []\n    \"\"\"\n\n    return [s for s in literals if s in string]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def search_literals(s, *literals):\n    for literal in literals:\n        if literal in s:\n            return literal\n    return None\n\n\nif __name__ == '__main__':\n    print(search_literals('This is the best day of my life', 'day', 'car'))\n    print(search_literals('This is the best day of my life', 'day', 'car', 'life'))\n    print(search_literals('This is the best day of my life', 'day', 'car', 'life', 'book', 'plane'))\n    print(search_literals('This is the best day of my life', 'day', 'car', 'life', 'book', 'plane', 'plane'))\n    print(search_literals('This is the best day of my life', 'day', 'car', 'life', 'book', 'plane', 'plane', 'plane'))",
      -0.8583984375
    ],
    [
      "def string_search(string, literals):\n    \"\"\"\n    >>> string_search('abcde', 'abc')\n    True\n    >>> string_search('abcde', 'xyz')\n    False\n    >>> string_search('abcde', 'cde')\n    True\n    >>> string_search('abcde', 'bc')\n    True\n    >>> string_search('abcde', 'c')\n    True\n    >>> string_search('abcde', 'bcd')\n    False\n    >>> string_search('abcde', 'abcde')\n    True\n    \"\"\"\n    if len(literals) > len(string):\n        return False\n    for i in range(len(string) - len(literals) + 1):\n        if string[i:i+len(literals)] == literals:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "def search_strings(string, literals):\n    for l in literals:\n        if l in string:\n            print(l)\n\n\nsearch_strings(\"I like green apples and bananas\", [\"apples\", \"bananas\"])",
      -0.8583984375
    ],
    [
      "def search_literal(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False",
      -0.86083984375
    ],
    [
      "def search(string, literals):\n    \"\"\"\n    >>> search(\"I love python\", [\"love\", \"python\"])\n    True\n    >>> search(\"I love python\", [\"python\", \"go\"])\n    False\n    \"\"\"\n    if len(literals) == 0:\n        return True\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "def find_literal(s, literals):\n    \"\"\"\n    >>> find_literal(\"I am a boy\", [\"am\", \"me\"])\n    ['am', 'me']\n    \"\"\"\n    result = []\n    for literal in literals:\n        if s.find(literal) >= 0:\n            result.append(literal)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "def search_string(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    assert search_string(\"This is a test. This is another test\", [\"test\", \"is\"]) is True\n    assert search_string(\"This is a test. This is another test\", [\"test\", \"is\", \"something\"]) is False",
      -0.86083984375
    ],
    [
      "def find_literals(text, literals):\n    \"\"\"\n    >>> find_literals('test', ['a', 'b'])\n    []\n    >>> find_literals('test', ['t', 'e'])\n    ['t', 'e']\n    >>> find_literals('test', ['test'])\n    ['test']\n    >>> find_literals('test', ['test', 'e'])\n    ['test', 'e']\n    \"\"\"\n    return [i for i in literals if i in text]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.86083984375
    ],
    [
      "def search_literal_in_string(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(search_literal_in_string(\"This is a test\", [\"is\", \"a\"]))\n    print(search_literal_in_string(\"This is a test\", [\"is\", \"b\"]))\n    print(search_literal_in_string(\"This is a test\", [\"is\", \"a\", \"b\"]))",
      -0.86083984375
    ],
    [
      "def find_strings(string, substrings):\n    for substring in substrings:\n        if substring in string:\n            return substring\n    return None\n\nif __name__ == '__main__':\n    print(find_strings('hello world', ['hello', 'hi', 'world']))",
      -0.86083984375
    ],
    [
      "def find_literals(text, literals):\n    \"\"\"Return the index of the first literal found.\"\"\"\n    for literal in literals:\n        index = text.find(literal)\n        if index != -1:\n            return index\n    return -1",
      -0.86083984375
    ],
    [
      "def search_literals(string: str, literals: str) -> bool:\n    \"\"\"Search some literals strings in a string.\n\n    Args:\n        string (str): String to be searched\n        literals (str): String to be searched in the string\n\n    Returns:\n        bool: True if string was found, False otherwise\n    \"\"\"\n    for literal in literals:\n        if literal not in string:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(search_literals(\"abc\", \"abc\"))\n    print(search_literals(\"abc\", \"bc\"))\n    print(search_literals(\"abc\", \"c\"))\n    print(search_literals(\"abc\", \"ac\"))\n    print(search_literals(\"abc\", \"abcd\"))",
      -0.9033203125
    ],
    [
      "def find_literals(text, literals):\n    \"\"\"\n    >>> find_literals(\"hello world\", [\"hello\"])\n    True\n    >>> find_literals(\"hello world\", [\"hello\", \"world\"])\n    True\n    >>> find_literals(\"hello world\", [\"hello\", \"world\", \"foo\"])\n    False\n    >>> find_literals(\"hello world\", [\"foo\"])\n    False\n    \"\"\"\n    for literal in literals:\n        if literal not in text:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.9072265625
    ],
    [
      "def search_string(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n\n    return False\n\nif __name__ == '__main__':\n    string = \"This is a string\"\n    literals = [\"string\", \"hello\"]\n\n    print(search_string(string, literals))",
      -0.9189453125
    ],
    [
      "def search_literals(string, *args):\n    for arg in args:\n        if arg in string:\n            return True\n    return False\n\n\ndef test_search_literals():\n    assert search_literals(\"hola\", \"hola\", \"amigo\")\n    assert not search_literals(\"hola\", \"amigo\")\n    assert search_literals(\"hola amigo\", \"hola\", \"amigo\")\n    assert not search_literals(\"hola amigo\", \"amigo\", \"chao\")\n\n\nif __name__ == \"__main__\":\n    test_search_literals()",
      -0.97412109375
    ],
    [
      "def find_literal(string, literals):\n    if not isinstance(literals, tuple):\n        literals = (literals,)\n\n    for literal in literals:\n        if literal in string:\n            return True\n\n    return False\n\n\nif __name__ == '__main__':\n    string = 'This is a very nice and wonderful string'\n    literals = ('nice', 'awesome', 'beautiful')\n\n    assert find_literal(string, literals)",
      -1.0439453125
    ],
    [
      "import re\n\n\ndef find_literals(string, literals):\n    \"\"\"\n    >>> find_literals(\"This is a string\", [\"is\", \"a\", \"not\"])\n    ['is', 'a']\n    \"\"\"\n    return re.findall(\"|\".join([f\"\\\\b{i}\\\\b\" for i in literals]), string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.1611328125
    ],
    [
      "def find_literals(text, literals):\n    \"\"\"\n    >>> find_literals(\"This is a very nice day!\", [\"day\", \"nice\"])\n    True\n    >>> find_literals(\"This is a very nice day!\", [\"day\", \"sunny\"])\n    False\n    \"\"\"\n    for literal in literals:\n        if literal in text:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.2705078125
    ],
    [
      "def literals_search(source: str, literals: list) -> list:\n    \"\"\"\n    >>> literals_search(\"Python is the best programming language\", [\"is\", \"the\"])\n    ['is', 'the']\n    >>> literals_search(\"Python is the best programming language\", [\"is\", \"the\", \"best\"])\n    ['is', 'the', 'best']\n    >>> literals_search(\"Python is the best programming language\", [\"is\", \"the\", \"best\", \"is\"])\n    ['is', 'the', 'best', 'is']\n    >>> literals_search(\"Python is the best programming language\", [\"is\", \"the\", \"best\", \"is\", \"the\"])\n    ['is', 'the', 'best', 'is', 'the']\n    >>> literals_search(\"Python is the best programming language\", [\"is\", \"the\", \"best\", \"is\", \"the\", \"programming\"])\n    ['is', 'the', 'best', 'is', 'the', 'programming']\n    \"\"\"\n    results = []\n\n    for literal in literals:\n        if literal in source:\n            results.append(literal)\n\n    return results\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.33203125
    ],
    [
      "def search_in_string(string: str, *args: str) -> bool:\n    for arg in args:\n        if arg in string:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(search_in_string(\"a\", \"b\", \"c\", \"d\"))\n    print(search_in_string(\"a\", \"b\", \"c\", \"d\", \"a\"))\n    print(search_in_string(\"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\"))",
      -1.392578125
    ],
    [
      "def search_in_string(string, literals):\n    for literal in literals:\n        if literal in string:\n            return literal\n\n    return None\n\nif __name__ == '__main__':\n    print(search_in_string(\"Lorem ipsum dolor sit amet\", [\"ipsum\", \"sit\"]))\n    print(search_in_string(\"Lorem ipsum dolor sit amet\", [\"ipsum\", \"amet\"]))",
      -1.5556640625
    ],
    [
      "def string_search(target_string, search_strings):\n    \"\"\"\n    >>> string_search(\"1234567890\", [\"123\", \"456\"])\n    [0, 4]\n    >>> string_search(\"1234567890\", [\"123\", \"456\", \"789\"])\n    [0, 4, 8]\n    >>> string_search(\"1234567890\", [\"123\", \"456\", \"789\", \"10\"])\n    [0, 4, 8, 9]\n    \"\"\"\n    if not search_strings:\n        return []\n\n    if not target_string:\n        return []\n\n    # 1. \u5148\u6392\u9664 target_string \u957f\u5ea6\u8fc7\u77ed\u7684\u60c5\u51b5\n    # 2. \u904d\u5386 search_strings \u5224\u65ad search_strings \u662f\u5426\u5728 target_string \u4e2d\n    # 3. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u8bb0\u5f55\u4e0b\u4f4d\u7f6e\uff0c\u7136\u540e\u7ee7\u7eed\u4ece\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\u627e\uff0c\u76f4\u5230\u627e\u4e0d\u5230\u4e3a\u6b62\n    # 4. \u6700\u540e\u8fd4\u56de\u6240\u6709\u627e\u5230\u7684\u4f4d\u7f6e\n    positions = []\n    for search_string in search_strings:\n        if len(search_string) > len(target_string):\n            continue\n        index = 0\n        while index < len(target_string):\n            if target_string[index:index + len(search_string)] == search_string:\n                positions.append(index)\n                index += len(search_string) - 1\n            index += 1\n    return positions\n\n\ndef string_search_2(target_string, search_strings):\n    \"\"\"\n    >>> string_search_2(\"1234567890\", [\"123\", \"456\"])\n    [0, 4]\n    >>> string_search_2(\"1234567890\", [\"123\", \"456\", \"789\"])\n    [0, 4,",
      -1.716796875
    ],
    [
      "def find_literal_string(haystack, *needles):\n    \"\"\"\n    >>> find_literal_string('Hello World', 'H', 'W', 'l')\n    ['H', 'W', 'l', 'o']\n    >>> find_literal_string('Hello World', 'e', 'W')\n    ['e', 'W', 'o', 'r']\n    >>> find_literal_string('Hello World', 'H', 'e', 'l', 'W')\n    ['H', 'e', 'l', 'W', 'o']\n    >>> find_literal_string('Hello World', 'H', 'e', 'l', 'W', 'r')\n    ['H', 'e', 'l', 'W', 'r', 'o']\n    \"\"\"\n    result = []\n\n    for needle in needles:\n        if needle in haystack:\n            result.append(needle)\n\n    return result\n\n\ndef find_literal_string_2(haystack, *needles):\n    \"\"\"\n    >>> find_literal_string_2('Hello World', 'H', 'W', 'l')\n    ['H', 'W', 'l', 'o']\n    >>> find_literal_string_2('Hello World', 'e', 'W')\n    ['e', 'W', 'o', 'r']\n    >>> find_literal_string_2('Hello World', 'H', 'e', 'l', 'W')\n    ['H', 'e', 'l', 'W', 'o']\n    >>> find_literal_string_2('Hello World', 'H', 'e', 'l', 'W', 'r')\n    ['H', 'e', 'l', 'W', 'r', 'o']\n    \"\"\"\n    result = []\n\n    for needle in needles:\n        if needle in haystack:\n            result.append(needle)\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.767578125
    ],
    [
      "def str_search(search_for, string_to_search):\n    \"\"\"\n    Search some literals strings in a string.\n\n    :param search_for: string to search for\n    :param string_to_search: string to search in\n    :return: list of indexes of occurences\n    \"\"\"\n    return [i for i in range(len(string_to_search)) if string_to_search.startswith(search_for, i)]\n\n\ndef main():\n    \"\"\"\n    Print the result of the str_search function.\n    \"\"\"\n    print(str_search('ab', 'ababab'))\n\n\nif __name__ == '__main__':\n    main()",
      -2.166015625
    ],
    [
      "def find_literals(source, *literals):\n    \"\"\"\n    >>> find_literals(\"hello, world\", \"ll\", \"he\", \"w\")\n    [0, 7, 5, 7]\n    \"\"\"\n    result = []\n    for literal in literals:\n        pos = source.find(literal)\n        if pos != -1:\n            result.append(pos)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.2265625
    ],
    [
      "def search_string(string, *args):\n    \"\"\"\n    >>> search_string(\"hello world\", \"llo\", \"wor\")\n    ['llo', 'wor']\n    >>> search_string(\"hello world\", \"llo\", \"wor\", \"he\")\n    ['llo', 'wor', 'he']\n    >>> search_string(\"hello world\", \"llo\", \"wor\", \"he\", \"bye\")\n    []\n    \"\"\"\n    return [x for x in args if x in string]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.240234375
    ],
    [
      "import re\n\n\ndef search_literals(string, literals):\n    \"\"\"\n    >>> search_literals(\"hello\", [\"hello\", \"world\"])\n    True\n    >>> search_literals(\"hello world\", [\"hello\", \"world\"])\n    True\n    >>> search_literals(\"hello world\", [\"world\", \"hello\"])\n    True\n    >>> search_literals(\"hello world\", [\"hello\", \"world\", \"python\"])\n    True\n    >>> search_literals(\"hello world\", [\"python\", \"java\", \"c\"])\n    False\n    \"\"\"\n    if len(literals) == 1:\n        return re.search(literals[0], string) is not None\n    if len(literals) == 2:\n        return (\n            re.search(literals[0], string) is not None\n            and re.search(literals[1], string) is not None\n        )\n    if len(literals) == 3:\n        return (\n            re.search(literals[0], string) is not None\n            and re.search(literals[1], string) is not None\n            and re.search(literals[2], string) is not None\n        )\n    if len(literals) == 4:\n        return (\n            re.search(literals[0], string) is not None\n            and re.search(literals[1], string) is not None\n            and re.search(literals[2], string) is not None\n            and re.search(literals[3], string) is not None\n        )\n    if len(literals) == 5:\n        return (\n            re.search(literals[0], string) is not None\n            and re.search(literals[1], string) is not None\n            and re.search(literals[2], string) is not None\n            and re.search(literals[3], string) is not None\n            and re.search(literals[4], string) is not None\n        )\n    if len(literals) == 6:\n        return (\n            re.search(literals[0], string) is not None\n            and re.search(literals[1], string",
      -2.400390625
    ],
    [
      "def str_in_str(string, literals):\n    \"\"\"\n    >>> str_in_str('123', '12')\n    True\n    >>> str_in_str('123', '456')\n    False\n    \"\"\"\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.505859375
    ],
    [
      "def find_literals(string: str, literals: list) -> list:\n    \"\"\"Return a list of indexes where a literal string is found.\"\"\"\n    return [\n        index\n        for index in range(len(string))\n        if string[index : index + len(literals[0])] in literals\n    ]\n\n\ndef test_literals():\n    \"\"\"\n    >>> find_literals(\"hello world\", [\"hello\", \"world\"])\n    [0, 6]\n    >>> find_literals(\"hello world\", [\"world\"])\n    [6]\n    >>> find_literals(\"hello world\", [\"world\", \"hello\"])\n    [0, 6]\n    >>> find_literals(\"hello world\", [\"hello\", \"world\", \"hello\", \"world\"])\n    [0, 6]\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.0859375
    ],
    [
      "def search_literal(string, literals):\n    \"\"\"\n    string: string to search in\n    literals: list of literals to search\n\n    return: list of the indexes where the literals were found\n    \"\"\"\n    return [string.index(l) for l in literals if string.count(l) > 0]\n\n\nif __name__ == '__main__':\n    print(search_literal(\"hello world\", [\"llo\", \"world\", \"hello\"]))",
      -3.125
    ],
    [
      "def string_search(searched_strings, source_string):\n    for i in range(len(searched_strings)):\n        if searched_strings[i] in source_string:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    searched_strings = [\"abc\", \"bcd\", \"def\", \"efg\"]\n    source_string = \"abcdefg\"\n    print(string_search(searched_strings, source_string))",
      -3.19140625
    ],
    [
      "def search_literals(string, literals):\n    for literal in literals:\n        if literal in string:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(search_literals('abcdefghijkl', ['bcd', 'efg']))\n    print(search_literals('abcdefghijkl', ['bcd', 'efg', 'hij']))\n    print(search_literals('abcdefghijkl', ['bcd', 'efg', 'hij', 'kl']))\n    print(search_literals('abcdefghijkl', ['bcd', 'efg', 'hij', 'kl', 'abc']))",
      -3.373046875
    ],
    [
      "def search(text, pattern):\n    \"\"\"\n    >>> search(\"abababac\", \"ab\")\n    0\n\n    >>> search(\"abababac\", \"ac\")\n    -1\n\n    >>> search(\"abababac\", \"bac\")\n    7\n\n    >>> search(\"abababac\", \"ababac\")\n    4\n\n    >>> search(\"abababac\", \"abababac\")\n    0\n\n    >>> search(\"abababac\", \"bab\")\n    1\n\n    >>> search(\"abababac\", \"b\")\n    1\n\n    >>> search(\"abababac\", \"ababacb\")\n    -1\n\n    >>> search(\"abababac\", \"a\")\n    0\n\n    >>> search(\"abababac\", \"\")\n    0\n\n    >>> search(\"abababac\", \"ababacba\")\n    4\n\n    >>> search(\"abababac\", \"ababa\")\n    0\n\n    >>> search(\"abababac\", \"bacbacbac\")\n    -1\n\n    >>> search(\"abababac\", \"bacbacbab\")\n    8\n\n    >>> search(\"abababac\", \"babababac\")\n    1\n\n    >>> search(\"abababac\", \"ababacbac\")\n    -1\n\n    >>> search(\"abababac\", \"bababacbab\")\n    9\n\n    >>> search(\"abababac\", \"bacbacbacbab\")\n    -1\n\n    >>> search(\"abababac\", \"bacbacbacbabab\")\n    -1\n\n    >>> search(\"abababac\", \"bacbacbacbabababac\")\n    18\n\n    >>> search(\"abababac\", \"bacbacbacbababababacbacbacbabababacbacbacbabababacbacbabababacbacbacbabababacbacbacbabababacbacbacbabababacbacbabababacbacbacbabababacbac",
      -3.57421875
    ],
    [
      "def search_literals(string, literals):\n    \"\"\"\n    >>> search_literals(\"abc\", [\"a\", \"b\", \"c\"])\n    ['a', 'b', 'c']\n    >>> search_literals(\"abc\", [\"a\", \"c\"])\n    ['a', 'c']\n    >>> search_literals(\"abc\", [\"c\", \"a\"])\n    ['c', 'a']\n    >>> search_literals(\"abc\", [\"a\", \"c\", \"b\"])\n    ['a', 'c', 'b']\n    \"\"\"\n    return sorted(literals)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -4.58984375
    ],
    [
      "def search_string(haystack, needles):\n    \"\"\"\n    >>> search_string(\"abcde\", [\"a\", \"b\", \"c\"])\n    [0, 1, 2]\n    \"\"\"\n    needle_len = len(needles)\n    if needle_len == 0:\n        return []\n    if needle_len == 1:\n        return [i for i, c in enumerate(haystack) if c == needles[0]]\n    needle_len -= 1\n    result = []\n    for i, c in enumerate(haystack):\n        if c == needles[0]:\n            if haystack[i:i + needle_len] == needles:\n                result.append(i)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -5.234375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}