{
  "problem": {
    "task_id": "MBPP/49",
    "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
    "test_list": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ],
    "challenge_test_list": [],
    "problem_id": 38
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List, Any\n\n\ndef extract_elements(lst: List[List[Any]], position: int = 0) -> List[Any]:\n    \"\"\"Extracts first or specified element from a given two-dimensional list.\n\n    Args:\n        lst (List[List[Any]]): list of lists\n        position (int, optional): position of the element to extract. Defaults to 0.\n\n    Returns:\n        List[Any]: list of extracted elements\n\n    Examples:\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n        [1, 4, 7, 10]\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 1)\n        [2, 5, 8, 11]\n    \"\"\"\n    return [lst_item[position] for lst_item in lst]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 1))",
      14.640625
    ],
    [
      "def extract_first(lst, n=None):\n    if not lst:\n        return None\n\n    result = []\n\n    for row in lst:\n        if n is None:\n            result.append(row[0])\n        else:\n            result.append(row[n])\n\n    return result\n\n\ndef main():\n    print(\"First element: \" + str(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]])))\n    print(\"Second element: \" + str(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)))\n    print(\"Last element: \" + str(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -1)))\n\n\nif __name__ == '__main__':\n    main()",
      13.6328125
    ],
    [
      "from typing import List, Any\n\n\ndef extract_first_elements(lst: List[Any], *, first: bool = True) -> List[Any]:\n    \"\"\"Extracts the first element from a list of lists.\n\n    Args:\n        lst: A list of lists.\n        first: If True, extract the first element from each sublist.\n                If False, extract the second element from each sublist.\n\n    Returns:\n        A list of extracted elements.\n    \"\"\"\n    if first:\n        return [lst[i][0] for i in range(len(lst))]\n\n    return [lst[i][1] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    lst = [\n        [1, 2],\n        [3, 4],\n        [5, 6],\n        [7, 8],\n        [9, 10],\n        [11, 12],\n        [13, 14],\n        [15, 16],\n    ]\n    print(extract_first_elements(lst, first=True))\n    print(extract_first_elements(lst, first=False))",
      9.953125
    ],
    [
      "def extract_first_element(list_of_lists: list, first_or_specified: str = \"first\") -> list:\n    \"\"\"Extract first or specified elements from a given two-dimensional list.\n\n    Args:\n        list_of_lists (list): given two-dimensional list.\n        first_or_specified (str, optional): \"first\" or \"specified\". Defaults to \"first\".\n\n    Returns:\n        list: list of extracted elements.\n    \"\"\"\n    if first_or_specified not in [\"first\", \"specified\"]:\n        raise ValueError(\"first_or_specified must be 'first' or 'specified'.\")\n\n    if first_or_specified == \"first\":\n        return [list_of_lists[i][0] for i in range(len(list_of_lists))]\n    else:\n        return [list_of_lists[i][1] for i in range(len(list_of_lists))]\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_first_element(list_of_lists))\n    print(extract_first_element(list_of_lists, \"specified\"))",
      8.6875
    ],
    [
      "from typing import List, Any\n\n\ndef extract_first_element(arr: List[Any], index: int = 0) -> List[Any]:\n    \"\"\"Return list with first elements of each sublist.\n\n    Examples:\n        >>> extract_first_element([[1, 2, 3], [4, 5, 6]])\n        [1, 4]\n\n        >>> extract_first_element([[1, 2, 3], [4, 5, 6]], 1)\n        [2, 5]\n    \"\"\"\n    return [sub_arr[index] for sub_arr in arr]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_element([[1, 2, 3], [4, 5, 6]]))\n    print(extract_first_element([[1, 2, 3], [4, 5, 6]], 1))",
      7.30078125
    ],
    [
      "from typing import List\n\n\ndef get_first_element(arr: List[List[int]]) -> List[int]:\n    \"\"\"Returns a list of first elements from a given two-dimensional list.\n\n    Args:\n        arr (List[List[int]]): the given two-dimensional list\n\n    Examples:\n        >>> assert get_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n    \"\"\"\n    return [sub_arr[0] for sub_arr in arr]\n\n\ndef get_first_element_with_loop(arr: List[List[int]]) -> List[int]:\n    \"\"\"Returns a list of first elements from a given two-dimensional list.\n\n    Args:\n        arr (List[List[int]]): the given two-dimensional list\n\n    Examples:\n        >>> assert get_first_element_with_loop([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n    \"\"\"\n    result = []\n\n    for sub_arr in arr:\n        result.append(sub_arr[0])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(get_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      7.234375
    ],
    [
      "from typing import List\n\n\ndef extract_first_elements(lst: List[List], index: int = 0) -> List:\n    \"\"\"Extracts every first element from a given two-dimensional list.\n\n    Args:\n        lst: the two-dimensional list.\n        index: the index of the element to extract.\n\n    Examples:\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n        [2, 5, 8]\n    \"\"\"\n    return [lst[i][index] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      6.91015625
    ],
    [
      "def extract_first_element(lst, position=0):\n    \"\"\"\n    >>> extract_first_element([[1, 2], [3, 4], [5, 6]])\n    [1, 3, 5]\n    >>> extract_first_element([[1, 2], [3, 4], [5, 6]], 1)\n    [2, 4, 6]\n    \"\"\"\n    return [item[position] for item in lst]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.3828125
    ],
    [
      "def extract_first_or_specified_element(lst, index=0):\n    \"\"\"\n    >>> extract_first_or_specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    >>> extract_first_or_specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n    [[2, 5, 8], [3, 6, 9]]\n    \"\"\"\n    return [sub_lst[index] for sub_lst in lst]\n\n\ndef extract_first_or_specified_element_using_map(lst, index=0):\n    \"\"\"\n    >>> extract_first_or_specified_element_using_map([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    >>> extract_first_or_specified_element_using_map([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n    [[2, 5, 8], [3, 6, 9]]\n    \"\"\"\n    return list(map(lambda sub_lst: sub_lst[index], lst))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.24609375
    ],
    [
      "def get_first_elements(lst, is_first):\n    result = []\n    for i in range(len(lst)):\n        if is_first:\n            result.append(lst[i][0])\n        else:\n            result.append(lst[i][1])\n    return result\n\n\ndef main():\n    lst = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]\n    print(get_first_elements(lst, True))\n    print(get_first_elements(lst, False))\n\n\nif __name__ == '__main__':\n    main()",
      5.75390625
    ],
    [
      "from typing import List\n\n\ndef first_element_extractor(array: List[List[int]], order: int = 0) -> List[int]:\n    \"\"\"Extracts the first element from each list.\n\n    Args:\n        array: A two-dimensional list.\n        order: The order of elements to extract.\n\n    Returns:\n        A list of extracted elements.\n    \"\"\"\n    return [array[i][order] for i in range(len(array))]\n\n\nif __name__ == \"__main__\":\n    print(first_element_extractor([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(first_element_extractor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      5.38671875
    ],
    [
      "def extract_first(list_of_lists: list, mode: str = \"first\") -> list:\n    \"\"\"Extract first or specified element from a given two-dimensional list.\n\n    Args:\n        list_of_lists (list): a two-dimensional list\n        mode (str): either 'first' or 'all'\n\n    Returns:\n        list: a one-dimensional list\n    \"\"\"\n    # initialize result list\n    result = []\n\n    # for each list in list_of_lists\n    for lst in list_of_lists:\n        # if mode is 'first'\n        if mode == \"first\":\n            # append its first element to result\n            result.append(lst[0])\n        # else if mode is 'all'\n        elif mode == \"all\":\n            # append all elements to result\n            result.extend(lst)\n\n    # return result\n    return result\n\n\ndef main():\n    \"\"\"Print the result of extract_first function.\"\"\"\n    print(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"all\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      4.91015625
    ],
    [
      "from itertools import islice\nfrom typing import List, Iterator\n\n\ndef first_elements(matrix: List[List[int]], index: int = 0) -> Iterator[int]:\n    \"\"\"Returns iterator with first or specified element from a given matrix.\n\n    Args:\n        matrix (List[List[int]]): given matrix\n        index (int): index of first element to extract (default is 0)\n\n    Examples:\n        >>> list(first_elements([[1, 2], [3, 4]]))\n        [1, 3]\n        >>> list(first_elements([[1, 2], [3, 4]], 1))\n        [2, 4]\n    \"\"\"\n    return (row[index] for row in matrix)\n\n\ndef first_elements_gen(matrix: List[List[int]], index: int = 0) -> Iterator[int]:\n    \"\"\"Returns iterator with first or specified element from a given matrix.\n\n    Args:\n        matrix (List[List[int]]): given matrix\n        index (int): index of first element to extract (default is 0)\n\n    Examples:\n        >>> list(first_elements_gen([[1, 2], [3, 4]]))\n        [1, 3]\n        >>> list(first_elements_gen([[1, 2], [3, 4]], 1))\n        [2, 4]\n    \"\"\"\n    for row in matrix:\n        yield row[index]\n\n\ndef first_elements_islice(matrix: List[List[int]], index: int = 0) -> Iterator[int]:\n    \"\"\"Returns iterator with first or specified element from a given matrix.\n\n    Args:\n        matrix (List[List[int]]): given matrix\n        index (int): index of first element to extract (default is 0)\n\n    Examples:\n        >>> list(first_elements_islice([[1, 2], [3, 4]]))\n        [1, 3]\n        >>> list(first_elements_islice([[1, 2], [3, 4]], 1))\n        [2, 4",
      4.546875
    ],
    [
      "def extract_elements(lst: list, element: int = 0) -> list:\n    \"\"\"Returns a list of all the first elements of each sub-list in lst.\n\n    >>> extract_elements([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [1, 3, 5, 7]\n    >>> extract_elements([[1, 2], [3, 4], [5, 6], [7, 8]], 1)\n    [2, 4, 6, 8]\n    \"\"\"\n    return [lst[i][element] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.216796875
    ],
    [
      "from unittest import TestCase\n\n\ndef extract_first_elements(lst, position=0):\n    if lst:\n        return [sublst[position] for sublst in lst]\n    return None\n\n\nclass TestFirstElements(TestCase):\n\n    def test_one_dimensional(self):\n        lst = [1, 2, 3, 4, 5]\n        self.assertEqual(extract_first_elements(lst), [1])\n\n    def test_two_dimensional(self):\n        lst = [[1, 2], [3, 4], [5, 6]]\n        self.assertEqual(extract_first_elements(lst), [1, 3, 5])\n\n    def test_three_dimensional(self):\n        lst = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n        self.assertEqual(extract_first_elements(lst), [[1, 3], [5, 7]])\n\n    def test_two_dimensional_with_position(self):\n        lst = [[1, 2], [3, 4], [5, 6]]\n        self.assertEqual(extract_first_elements(lst, 1), [2, 4, 6])\n\n    def test_three_dimensional_with_position(self):\n        lst = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n        self.assertEqual(extract_first_elements(lst, 1), [[3, 4], [7, 8]])",
      2.1328125
    ],
    [
      "from typing import List, Any\n\n\ndef extract_elements(lst: List[List[Any]], pos: int = 0) -> List[Any]:\n    \"\"\"Extracts every first element from a given two-dimensional list.\n\n    Args:\n        lst (List[List[Any]]): given two-dimensional list\n        pos (int): position of the element to extract\n\n    Returns:\n        List[Any]: list of extracted elements\n    \"\"\"\n    return [lst[i][pos] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      2.076171875
    ],
    [
      "from typing import List, Any\n\n\ndef get_first_elements(lst: List[List[Any]], index: int = 0) -> List[Any]:\n    \"\"\"Returns a list with the first elements from the given list.\n\n    Args:\n        lst (List[List[Any]]): a two-dimensional list\n        index (int, optional): the index to extract from each inner list. Defaults to 0.\n\n    Examples:\n        >>> get_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n        >>> get_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n        [2, 5, 8]\n    \"\"\"\n    return [lst_item[index] for lst_item in lst]\n\n\nif __name__ == \"__main__\":\n    print(get_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(get_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      2.01953125
    ],
    [
      "def extract_first_or_specified_element(matrix, n):\n    \"\"\"\n    >>> extract_first_or_specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n    [1, 4, 7]\n    >>> extract_first_or_specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n    [2, 5, 8]\n    \"\"\"\n    if matrix == []:\n        return []\n\n    if n == 1:\n        return [row[0] for row in matrix]\n    elif n == 2:\n        return [row[1] for row in matrix]\n    elif n == 3:\n        return [row[2] for row in matrix]\n    else:\n        return []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.9697265625
    ],
    [
      "from typing import List\n\n\ndef extract_first_element(lst: List) -> List:\n    \"\"\"Extracts every first element from a given two-dimensional list.\n\n    Args:\n        lst (List): a given two-dimensional list\n\n    Returns:\n        List: a list of the extracted elements\n    \"\"\"\n    return [lst[i][0] for i in range(len(lst))]\n\n\ndef main():\n    lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    print(extract_first_element(lst))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.8447265625
    ],
    [
      "def extract_first_elements(list_of_lists: list, type_: str = \"first\") -> list:\n    \"\"\"Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        list_of_lists (list): a list of lists\n        type_ (str, optional): type of the elements to extract. Defaults to \"first\".\n\n    Returns:\n        list: list of extracted elements\n    \"\"\"\n    list_of_lists = list_of_lists.copy()\n    if type_ == \"first\":\n        return [list_of_lists[i][0] for i in range(len(list_of_lists))]\n    else:\n        return [list_of_lists[i][1] for i in range(len(list_of_lists))]\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2], [3, 4], [5, 6]]\n    print(extract_first_elements(list_of_lists))",
      1.837890625
    ],
    [
      "from typing import List\n\n\ndef get_first_elements(matrix: List[List]) -> List:\n    \"\"\"Returns a list containing the first element from every sublist.\n\n    Args:\n        matrix (List[List]): 2D list of numbers\n\n    Examples:\n        >>> get_first_elements([[1, 2], [3, 4], [5, 6]])\n        [1, 3, 5]\n\n        >>> get_first_elements([[1, 2], [3, 4]])\n        [1, 3]\n    \"\"\"\n    return [sublist[0] for sublist in matrix]\n\n\nif __name__ == \"__main__\":\n    print(get_first_elements([[1, 2], [3, 4], [5, 6]]))",
      1.6884765625
    ],
    [
      "from typing import List\n\n\ndef first_element(arr: List[List[int]]) -> List[int]:\n    \"\"\"Returns a list of first elements from a two-dimensional list.\n\n    Args:\n        arr (List[List[int]]): two-dimensional list\n\n    Examples:\n        >>> assert first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n    \"\"\"\n    return [sub_list[0] for sub_list in arr]\n\n\ndef second_element(arr: List[List[int]]) -> List[int]:\n    \"\"\"Returns a list of second elements from a two-dimensional list.\n\n    Args:\n        arr (List[List[int]]): two-dimensional list\n\n    Examples:\n        >>> assert second_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [2, 5, 8]\n    \"\"\"\n    return [sub_list[1] for sub_list in arr]\n\n\ndef kth_element(arr: List[List[int]], k: int) -> List[int]:\n    \"\"\"Returns a list of kth elements from a two-dimensional list.\n\n    Args:\n        arr (List[List[int]]): two-dimensional list\n        k (int): position of the element to extract\n\n    Examples:\n        >>> assert kth_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [3, 6, 9]\n    \"\"\"\n    return [sub_list[k] for sub_list in arr]\n\n\nif __name__ == \"__main__\":\n    print(first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(second_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(kth_element([[",
      1.3017578125
    ],
    [
      "from itertools import chain\nfrom typing import List, Optional\n\n\ndef extract_elements(\n    lst: List[List[int]],\n    elements: Optional[int] = None,\n) -> List[int]:\n    \"\"\"Extracts every first or specified element from a given two-dimensional list.\n\n    Args:\n        lst (List[List[int]]): input two-dimensional list.\n        elements (Optional[int], optional): number of elements to extract. Defaults to None.\n\n    Returns:\n        List[int]: list of extracted elements.\n\n    Examples:\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n        >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n        [2, 5, 8]\n    \"\"\"\n    if elements is None:\n        return list(chain.from_iterable([lst[i][0] for i in range(len(lst))]))\n    return list(chain.from_iterable([lst[i][elements] for i in range(len(lst))]))\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      1.2548828125
    ],
    [
      "from typing import List\n\n\ndef extract_every_first_element(lists: List[list]) -> list:\n    \"\"\"Extracts every first element from a given two-dimensional list.\n\n    Args:\n        lists (List[list]): the two-dimensional list\n\n    Examples:\n        >>> assert extract_every_first_element([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\n    \"\"\"\n    return [x[0] for x in lists]\n\n\nif __name__ == \"__main__\":\n    print(extract_every_first_element([[1, 2], [3, 4], [5, 6]]))",
      1.1669921875
    ],
    [
      "def extract_first(arr, mode=\"f\"):\n    result = []\n    for i in range(len(arr)):\n        if mode == \"f\":\n            result.append(arr[i][0])\n        else:\n            result.append(arr[i][mode])\n    return result\n\n\ndef main():\n    print(\"Please run this solution on a given list of lists.\")\n\n\nif __name__ == \"__main__\":\n    main()",
      1.1591796875
    ],
    [
      "from typing import List\n\n\ndef extract_first_or_every_nth_element(lst: List[List[int]], n: int) -> List[int]:\n    \"\"\"Extract every nth element from a given two-dimensional list.\n\n    Args:\n        lst (List[List[int]]): two-dimensional list to extract elements from\n        n (int): every nth element to extract\n\n    Returns:\n        List[int]: extracted elements\n    \"\"\"\n    return [element for lst in lst for element in lst[::n]]\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    print(extract_first_or_every_nth_element(lst, 2))",
      1.1591796875
    ],
    [
      "from typing import List, Tuple\n\n\ndef extract_elements(input_list: List[List[int]], index: int = 0) -> List[int]:\n    \"\"\"Extract first or specified element from a given two-dimensional list.\n\n    Args:\n        input_list (List[List[int]]): two-dimensional list to extract from.\n        index (int): position of the element to extract.\n\n    Examples:\n        >>> extract_elements([[1, 2], [3, 4], [5, 6]])\n        [1, 3, 5]\n\n        >>> extract_elements([[1, 2], [3, 4], [5, 6]], 1)\n        [2, 4, 6]\n\n    Returns:\n        List[int]: a list with the extracted elements.\n    \"\"\"\n    return [sub_list[index] for sub_list in input_list]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2], [3, 4], [5, 6]]))\n    print(extract_elements([[1, 2], [3, 4], [5, 6]], 1))",
      1.0966796875
    ],
    [
      "from typing import List, Optional\n\n\ndef extract_from_matrix(matrix: List[List], index: Optional[int] = 0) -> List:\n    \"\"\"Extract first elements from a given two-dimensional list.\n\n    Args:\n        matrix: The given two-dimensional list.\n        index: The index of elements to extract.\n\n    Returns:\n        A list of elements extracted from the given two-dimensional list.\n\n    Examples:\n        >>> assert extract_from_matrix([[1, 2, 3], [4, 5, 6]]) == [1, 4]\n        >>> assert extract_from_matrix([[1, 2, 3], [4, 5, 6]], 1) == [2, 5]\n    \"\"\"\n    return [\n        row[index]\n        for row in matrix\n    ]\n\n\nif __name__ == '__main__':\n    print(extract_from_matrix([[1, 2, 3], [4, 5, 6]]))\n    print(extract_from_matrix([[1, 2, 3], [4, 5, 6]], 1))",
      0.84326171875
    ],
    [
      "from typing import List\n\n\ndef extract_elements(elements: List[List[int]], extract_type: str = \"first\") -> List[int]:\n    \"\"\"Extracts every first or specified element from a given two-dimensional list.\n\n    Args:\n        elements (List[List[int]]): a two-dimensional list of integers\n        extract_type (str): an optional string parameter, default first,\n                            can be specified to extract the last element\n\n    Returns:\n        List[int]: a list of integers\n    \"\"\"\n    if extract_type == \"first\":\n        return [element[0] for element in elements]\n\n    return [element[-1] for element in elements]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2], [3, 4], [5, 6], [7, 8]]))\n    print(extract_elements([[1, 2], [3, 4], [5, 6], [7, 8]], \"last\"))",
      0.5146484375
    ],
    [
      "from typing import List\n\n\ndef first_elements(arr: List[List[int]]) -> List[int]:\n    \"\"\"Returns a list of the first elements of the given two-dimensional list.\n\n    Args:\n        arr (List[List[int]]): the given two-dimensional list\n\n    Examples:\n        >>> assert first_elements([[1, 2, 3], [4, 5, 6]]) == [1, 4]\n    \"\"\"\n    return [x[0] for x in arr]\n\n\nif __name__ == \"__main__\":\n    print(first_elements([[1, 2, 3], [4, 5, 6]]))",
      0.328857421875
    ],
    [
      "def extract_first_element(list_of_lists: list, index: int) -> list:\n    \"\"\"Extracts every first element from a given two-dimensional list.\n\n    Args:\n        list_of_lists: a two-dimensional list\n        index: a position of the element to extract\n\n    Returns:\n        a list of extracted elements\n    \"\"\"\n\n    return [x[index] for x in list_of_lists]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))",
      0.2490234375
    ],
    [
      "def extract_every_first_element(matrix, type=\"first\"):\n    if type == \"first\":\n        return [row[0] for row in matrix]\n    elif type == \"all\":\n        return [row[i] for row in matrix for i in range(len(row))]\n    else:\n        return [row[int(type)] for row in matrix]",
      0.1904296875
    ],
    [
      "def extract_elements(lst, number):\n    return [lst[i][number] for i in range(len(lst))]\n\n\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      0.1461181640625
    ],
    [
      "def extract_first_element(list_of_lists: list, *args) -> list:\n    \"\"\"Extract the first element of each list in the list of lists.\n\n    Args:\n        list_of_lists (list): a list of lists\n\n    Returns:\n        list: a list of extracted elements\n    \"\"\"\n    if args:\n        return [sublist[args[0]] for sublist in list_of_lists]\n    return [sublist[0] for sublist in list_of_lists]\n\n\nif __name__ == \"__main__\":\n    assert extract_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n    assert extract_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n    assert extract_first_element([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\n    assert extract_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [3, 6, 9]",
      0.0435791015625
    ],
    [
      "from typing import List\n\n\ndef get_every_first_element(lists: List[List], index: int = 0) -> List:\n    \"\"\"Return a list with the first element of the given lists.\n\n    :param lists: 2-dimensional list\n    :param index: index of the element to extract\n    :return: a list with the first element of the given lists\n    \"\"\"\n    return [list_[index] for list_ in lists]\n\n\nif __name__ == \"__main__\":\n    assert get_every_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n    assert get_every_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]",
      -0.040924072265625
    ],
    [
      "from unittest import TestCase\n\n\ndef extract_first(list_of_lists, position=0):\n    return [x[position] for x in list_of_lists]\n\n\nclass TestFirst(TestCase):\n    def test_first(self):\n        assert extract_first([]) == []\n        assert extract_first([[]]) == []\n        assert extract_first([[1]]) == [1]\n        assert extract_first([[1, 2]]) == [1]\n        assert extract_first([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\n        assert extract_first([[1, 2], [3, 4], [5, 6]], 1) == [2, 4, 6]",
      -0.141357421875
    ],
    [
      "def extract_every_first_element(lst, first=True):\n    \"\"\"Extract every first element from a given two-dimensional list.\n\n    Args:\n        lst (list): A two-dimensional list.\n        first (bool, optional): Extract first element. Defaults to True.\n\n    Returns:\n        list: A one-dimensional list.\n    \"\"\"\n    return [row[0] if first else row[-1] for row in lst]",
      -0.2276611328125
    ],
    [
      "from typing import List\n\n\ndef first_elements(arr: List[List]) -> List:\n    \"\"\"Returns the list of first elements of every sublist in a two-dimensional list.\n\n    Args:\n        arr (List[List]): a two-dimensional list.\n\n    Examples:\n        >>> first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n    \"\"\"\n    return [sublist[0] for sublist in arr]\n\n\nif __name__ == \"__main__\":\n    print(first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.29541015625
    ],
    [
      "from typing import List\n\n\ndef extract_every_first_element(two_dimensional_list: List[List[int]]) -> List[int]:\n    \"\"\"Returns every first element from a two-dimensional list.\n\n    Args:\n        two_dimensional_list (List[List[int]]): two-dimensional list\n\n    Examples:\n        >>> extract_every_first_element([[1, 2], [3, 4], [5, 6]])\n        [1, 3, 5]\n        >>> extract_every_first_element([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [element for sublist in two_dimensional_list for element in sublist[:1]]\n\n\nif __name__ == \"__main__\":\n    print(extract_every_first_element([[1, 2], [3, 4], [5, 6]]))\n    print(extract_every_first_element([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))",
      -0.362548828125
    ],
    [
      "from typing import List, Any\n\n\ndef extract_first(lst: List[Any], index: int = 0) -> List[Any]:\n    \"\"\"Extract every first element from a given two-dimensional list.\n\n    Args:\n        lst (List[Any]): the two-dimensional list.\n        index (int): the index of the element to extract.\n\n    Examples:\n        >>> assert extract_first([[1, 2], [3, 4]]) == [1, 3]\n        >>> assert extract_first([[1, 2], [3, 4]], 1) == [2, 4]\n    \"\"\"\n    return [lst[i][index] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    print(extract_first([[1, 2], [3, 4]]))\n    print(extract_first([[1, 2], [3, 4]], 1))",
      -0.406494140625
    ],
    [
      "from typing import List\n\n\ndef extract_first(lists: List[List[int]]) -> List[int]:\n    \"\"\"Extracts first element of each sublist in a list.\n\n    Args:\n        lists (List[List[int]]): the list of sublists.\n\n    Examples:\n        >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n    \"\"\"\n    return [lst[0] for lst in lists]\n\n\ndef extract_first_lambda(lists: List[List[int]]) -> List[int]:\n    \"\"\"Extracts first element of each sublist in a list.\n\n    Args:\n        lists (List[List[int]]): the list of sublists.\n\n    Examples:\n        >>> extract_first_lambda([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n    \"\"\"\n    return list(map(lambda lst: lst[0], lists))\n\n\ndef extract_first_comprehension(lists: List[List[int]]) -> List[int]:\n    \"\"\"Extracts first element of each sublist in a list.\n\n    Args:\n        lists (List[List[int]]): the list of sublists.\n\n    Examples:\n        >>> extract_first_comprehension([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n    \"\"\"\n    return [lst[0] for lst in lists]\n\n\ndef extract_first_comprehension_lambda(lists: List[List[int]]) -> List[int]:\n    \"\"\"Extracts first element of each sublist in a list.\n\n    Args:\n        lists (List[List[int]]): the list of sublists.\n\n    Examples:\n        >>> extract_first_comprehension_lambda([[1, 2, 3], [4, 5, 6], [7,",
      -0.42919921875
    ],
    [
      "from unittest import TestCase\n\n\ndef extract_first_elements(arr, extract_first=True):\n    result = []\n    for item in arr:\n        result.append(item[0] if extract_first else item[-1])\n    return result\n\n\nclass TestFirstElements(TestCase):\n\n    data = (\n        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 4, 7]),\n        ([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], [1, 4, 7, 10]),\n        ([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]], [1, 4, 7, 10, 13]),\n    )\n\n    def test_extract_first_elements(self):\n        for arr, expected in self.data:\n            self.assertEqual(extract_first_elements(arr), expected)\n\n    def test_extract_last_elements(self):\n        for arr, expected in self.data:\n            self.assertEqual(extract_first_elements(arr, False), list(reversed(expected)))",
      -0.480712890625
    ],
    [
      "def get_first_elements(matrix: list, index: int = 0) -> list:\n    \"\"\"Returns list of first elements of each sublist.\n\n    Args:\n        matrix: list of lists.\n        index: index of element to return.\n\n    Returns:\n        list of first elements of each sublist.\n    \"\"\"\n    return [row[index] for row in matrix]\n\n\ndef main():\n    mat = [[1, 2, 3, 4],\n           [5, 6, 7, 8],\n           [9, 10, 11, 12]]\n\n    print(get_first_elements(mat))\n    print(get_first_elements(mat, 1))\n\n\nif __name__ == '__main__':\n    main()",
      -0.489990234375
    ],
    [
      "def extract_elements(list_of_lists, element_index):\n    return [list_of_lists[i][element_index] for i in range(len(list_of_lists))]\n\n\ndef main():\n    list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(list_of_lists, 0))  # [1, 4, 7]\n\n\nif __name__ == '__main__':\n    main()",
      -0.61767578125
    ],
    [
      "from typing import List\n\n\ndef get_first_element(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Returns list of first elements from 2D list.\n\n    Args:\n        matrix (List[List[int]]): 2D list to extract elements from\n\n    Examples:\n        >>> assert get_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n    \"\"\"\n    return [row[0] for row in matrix]\n\n\ndef get_first_element_list_comp(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Returns list of first elements from 2D list.\n\n    Args:\n        matrix (List[List[int]]): 2D list to extract elements from\n\n    Examples:\n        >>> assert get_first_element_list_comp([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n    \"\"\"\n    return [row[0] for row in matrix]\n\n\ndef get_first_element_map(matrix: List[List[int]]) -> List[int]:\n    \"\"\"Returns list of first elements from 2D list.\n\n    Args:\n        matrix (List[List[int]]): 2D list to extract elements from\n\n    Examples:\n        >>> assert get_first_element_map([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n    \"\"\"\n    return list(map(lambda row: row[0], matrix))\n\n\nif __name__ == \"__main__\":\n    print(get_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.703125
    ],
    [
      "def extract_first_elements(matrix: list) -> list:\n    \"\"\"Extract the first element from every sublist in the given list.\n\n    Args:\n        matrix (list): two-dimensional list to extract the first element from.\n\n    Examples:\n        >>> assert extract_first_elements([[1, 2, 3], [4, 5, 6]]) == [1, 4]\n    \"\"\"\n    return [sublist[0] for sublist in matrix]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_elements([[1, 2, 3], [4, 5, 6]]))",
      -0.7548828125
    ],
    [
      "def extract_elements(lst, k):\n    if k < 0:\n        return lst\n    else:\n        new_list = []\n        for i in range(len(lst)):\n            new_list.append(lst[i][k])\n        return new_list\n\n\nif __name__ == '__main__':\n    lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    print(extract_elements(lst, 1))",
      -0.75732421875
    ],
    [
      "def extract_first_element(lst, nth):\n    return [lst[i][nth] for i in range(len(lst))]\n\n\nprint(extract_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))",
      -0.85595703125
    ],
    [
      "def extract_first_and_every_second(lst):\n    return [item[0] for item in lst[::2]]\n\n\ndef main():\n    print(\"First and every second elements from the list:\")\n    print(extract_first_and_every_second([\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]\n    ]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\ndef get_first_elements(arr: List) -> List:\n    \"\"\"Returns the first elements of the list\n\n    Args:\n        arr (List): Two dimensional list\n\n    Returns:\n        List: List of elements\n    \"\"\"\n    return [arr[i][0] for i in range(len(arr))]\n\n\nif __name__ == \"__main__\":\n    assert get_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
      -0.85595703125
    ],
    [
      "from typing import List\n\n\ndef extract_elements(matrix: List[List[int]], element: int = 0) -> List[int]:\n    \"\"\"Return a list of specified elements from a two-dimensional list.\n\n    By default, it returns a list of first elements.\n    \"\"\"\n    return [row[element] for row in matrix]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      -0.85595703125
    ],
    [
      "def extract_first_element(lst, first=True):\n    if first:\n        return [lst[i][0] for i in range(len(lst))]\n    else:\n        return [lst[i][-1] for i in range(len(lst))]\n\n\nif __name__ == '__main__':\n    print(extract_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(extract_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], False))",
      -0.85595703125
    ],
    [
      "def extract_first_element(a_list: list, n: int = 0) -> list:\n    \"\"\"Extract every first element from a given two-dimensional list.\n\n    Args:\n        a_list (list): a list of lists to extract elements from\n        n (int): if n is greater than 0, extract every nth element\n\n    Returns:\n        list: a list of extracted elements\n    \"\"\"\n    return [a_list[i][n] for i in range(len(a_list))]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(extract_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      -0.85693359375
    ],
    [
      "def extract_elements(lst, element=\"first\"):\n    \"\"\"\n    >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"first\")\n    [1, 4, 7]\n\n    >>> extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"last\")\n    [3, 6, 9]\n    \"\"\"\n    return [row[0] if element == \"first\" else row[-1] for row in lst]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef extract_first(lists: List[List[int]]) -> List[int]:\n    \"\"\"Extract first element from every inner list.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        List[int]: list of extracted elements\n    \"\"\"\n    return [list_[0] for list_ in lists]\n\n\nif __name__ == \"__main__\":\n    assert extract_first([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]\n    assert extract_first([[1, 2, 3], [4, 5, 6]]) == [1, 4]\n    assert extract_first([[1, 2, 3, 4, 5, 6]]) == [1]\n    assert extract_first([]) == []",
      -0.85693359375
    ],
    [
      "def extract_first(lst, first_only=True):\n    if first_only:\n        return [row[0] for row in lst]\n    return [[row[i] for i in range(len(row))] for row in lst]",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef extract_elements(lst: List, index: int = 0) -> List:\n    \"\"\"Return list of extracted elements from given list.\n\n    :param lst: given list\n    :param index: index of elements to extract (0 by default)\n    :return: list of extracted elements\n    \"\"\"\n    return [lst[i][index] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))",
      -0.85693359375
    ],
    [
      "def extract_first_elements(matrix, index=0):\n    return list(map(lambda x: x[index], matrix))\n\n\nif __name__ == '__main__':\n    matrix = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25],\n    ]\n    print(extract_first_elements(matrix, 0))\n    print(extract_first_elements(matrix, 1))\n    print(extract_first_elements(matrix, 4))",
      -0.85693359375
    ],
    [
      "def extract_elements(lst, num):\n    return [row[num] for row in lst]",
      -0.85693359375
    ],
    [
      "def first_elements(lst):\n    return [x[0] for x in lst]\n\n\nprint(first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.85693359375
    ],
    [
      "def extract_first_elements(arr: list, command: str) -> list:\n    \"\"\"Extracts first elements from a given two-dimensional list.\n\n    Args:\n        arr (list): the two-dimensional list.\n        command (str): a string indicating if to extract first or last elements.\n\n    Examples:\n        >>> assert extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'first') == [1, 4, 7]\n    \"\"\"\n    return [row[0] for row in arr]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"first\"))",
      -0.85791015625
    ],
    [
      "def extract_from_list(lst, extract_type):\n    return [x[0] for x in lst]\n\n\nprint(extract_from_list([[1, 2], [3, 4], [5, 6], [7, 8]], \"first\"))\nprint(extract_from_list([[1, 2], [3, 4], [5, 6], [7, 8]], \"second\"))",
      -0.85791015625
    ],
    [
      "def extract_every_first_or_specified_element(lst, index=0):\n    return [x[index] for x in lst]\n\n\nif __name__ == '__main__':\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_every_first_or_specified_element(lst))",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef extract_first_elem(arr: List[list]) -> list:\n    \"\"\"Extract the first element from each list in a 2D list.\n\n    Args:\n        arr (List[list]): 2D list\n\n    Returns:\n        list: 2D list with only the first element of each list\n    \"\"\"\n    return [[elem[0] for elem in arr]]\n\n\nif __name__ == \"__main__\":\n    assert extract_first_elem([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7]]",
      -0.8583984375
    ],
    [
      "from unittest import TestCase\n\n\ndef extract_first_elements(lst, first=True):\n    return [x[0] for x in lst if first == x[0][0]]\n\n\nclass TestFirstElements(TestCase):\n\n    def test_first_elements(self):\n        assert extract_first_elements([['a', 'b'], ['c', 'd'], ['e', 'f']]) == ['a', 'c', 'e']\n        assert extract_first_elements([['a', 'b'], ['c', 'd'], ['e', 'f']], False) == ['b', 'd', 'f']",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef extract_first_elements(lst: List) -> List:\n    \"\"\"Return a list with first elements from given list.\n\n    :param lst: given list\n    :return: list with first elements from given list\n    \"\"\"\n    return [element[0] for element in lst]\n\n\nif __name__ == '__main__':\n    assert extract_first_elements([[\"Python\", \"PHP\"], [\"Java\", \"C#\"], [\"C++\", \"C\"]]) == [\"Python\", \"Java\", \"C++\"]\n    assert extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
      -0.8583984375
    ],
    [
      "def extract_first_elements(lst, every=False):\n    if every:\n        return [item[0] for item in lst]\n    return [lst[0]]",
      -0.8583984375
    ],
    [
      "def first_element_from_2d_list(list_2d, every_first=True):\n    \"\"\"\n    Return a list with the first elements of the given 2d list.\n    \"\"\"\n    if not list_2d or not every_first:\n        return list_2d\n    return [item[0] for item in list_2d]",
      -0.8583984375
    ],
    [
      "def extract_first_element(lst, every_other):\n    return [elem[0] for elem in lst[::every_other]]\n\n\nif __name__ == '__main__':\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_first_element(lst, every_other=2))",
      -0.8583984375
    ],
    [
      "def extract_from_list(lst, first=True):\n    result = []\n    for sublist in lst:\n        if first:\n            result.append(sublist[0])\n        else:\n            result.append(sublist[-1])\n    return result\n\n\nprint(extract_from_list([[1, 2], [3, 4], [5, 6], [7, 8]]))\nprint(extract_from_list([[1, 2], [3, 4], [5, 6], [7, 8]], False))",
      -0.8583984375
    ],
    [
      "def extract_elements(lst, n):\n    return [row[n] for row in lst]\n\n\nprint(extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))",
      -0.86083984375
    ],
    [
      "def extract_every_first_element(lst, position=0):\n    return [row[position] for row in lst]\n\n\nprint(extract_every_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(extract_every_first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))",
      -0.86083984375
    ],
    [
      "def extract_elements(lst, index=0):\n    new_lst = []\n    for sub_lst in lst:\n        new_lst.append(sub_lst[index])\n    return new_lst\n\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(lst))\n    print(extract_elements(lst, 1))\n\n\nif __name__ == '__main__':\n    main()",
      -0.86083984375
    ],
    [
      "from unittest import TestCase\n\n\ndef first_elements(lst_lst, index=0):\n    return [lst[index] for lst in lst_lst]\n\n\nclass TestFirstElements(TestCase):\n    def test_one_dimensional_list(self):\n        assert first_elements([1, 2, 3, 4]) == [1]\n\n    def test_two_dimensional_list(self):\n        assert first_elements([[1, 2, 3, 4], [5, 6, 7, 8]]) == [1, 5]\n\n    def test_two_dimensional_list_with_index(self):\n        assert first_elements([[1, 2, 3, 4], [5, 6, 7, 8]], 2) == [3, 7]",
      -0.90869140625
    ],
    [
      "from typing import List, Any\n\n\ndef extract_first_elements(lst: List[List[Any]], index: int = 0) -> List[Any]:\n    \"\"\"Extracts first elements from a two-dimensional list.\n\n    Args:\n        lst (List[List[Any]]): list of lists to extract elements from\n        index (int, optional): index of element to extract. Defaults to 0.\n\n    Returns:\n        List[Any]: list of extracted elements\n    \"\"\"\n    return [element[index] for element in lst]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))\n    print(extract_first_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 1))",
      -0.98046875
    ],
    [
      "def extract_first_element(matrix, element_type=0):\n    \"\"\"Extracts first element from a given two-dimensional list.\n\n    Args:\n        matrix (list): Two-dimensional list.\n        element_type (int): Type of extracted element (0 - first, 1 - last).\n\n    Returns:\n        list: A list with extracted elements.\n    \"\"\"\n    if element_type == 0:\n        return [row[0] for row in matrix]\n    elif element_type == 1:\n        return [row[-1] for row in matrix]\n    else:\n        raise ValueError(\"element_type value must be 0 or 1\")",
      -0.98095703125
    ],
    [
      "from itertools import chain\n\n\ndef extract_first_element(lst, k=0):\n    return list(chain.from_iterable([lst[i][k] for i in range(len(lst))]))\n\n\ndef main():\n    list_of_lists = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16],\n    ]\n\n    assert extract_first_element(list_of_lists) == [1, 5, 9, 13]\n    assert extract_first_element(list_of_lists, 1) == [2, 6, 10, 14]\n\n\nif __name__ == '__main__':\n    main()",
      -1.2744140625
    ],
    [
      "from typing import List, Optional\n\n\ndef extract_first_elements(matrix: List[List[int]], position: Optional[str] = \"first\") -> List[int]:\n    if position == \"first\":\n        return [row[0] for row in matrix]\n    else:\n        return [row[len(row) - 1] for row in matrix]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_elements([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]))\n    print(extract_first_elements([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]], \"last\"))",
      -1.330078125
    ],
    [
      "from typing import List\n\n\ndef extract_elements_from_matrix(matrix: List[List[int]], index: int) -> List[int]:\n    \"\"\"Extracts all elements at given index from a given matrix.\n\n    Args:\n        matrix (List[List[int]]): matrix to extract elements from\n        index (int): index to extract elements from\n\n    Returns:\n        List[int]: list of extracted elements\n    \"\"\"\n    return [row[index] for row in matrix]\n\n\nif __name__ == \"__main__\":\n    print(extract_elements_from_matrix([[1, 2, 3], [4, 5, 6]], 0))\n    print(extract_elements_from_matrix([[1, 2, 3], [4, 5, 6]], 1))\n    print(extract_elements_from_matrix([[1, 2, 3], [4, 5, 6]], 2))",
      -1.494140625
    ],
    [
      "from typing import List\n\n\ndef extract_elements(lst: List, n: int = 0) -> List:\n    \"\"\"Returns a list of the first element of every sublist of a given list.\n\n    Args:\n        lst (list): a list of lists\n        n (int): the index of the element to extract. Defaults to 0 (first element).\n\n    Returns:\n        list: a list of the extracted elements.\n    \"\"\"\n    return [sublist[n] for sublist in lst]\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(extract_elements(lst))\n    print(extract_elements(lst, n=1))",
      -1.5595703125
    ],
    [
      "def extract_every_nth_element(input_list, n):\n    # return [item[0] for item in input_list[::n]]\n    return [item for index, item in enumerate(input_list) if index % n == 0]\n\n\ndef main():\n    list1 = [\n        [\"00\", \"01\", \"02\", \"03\", \"04\"],\n        [\"10\", \"11\", \"12\", \"13\", \"14\"],\n        [\"20\", \"21\", \"22\", \"23\", \"24\"],\n        [\"30\", \"31\", \"32\", \"33\", \"34\"],\n        [\"40\", \"41\", \"42\", \"43\", \"44\"],\n    ]\n    print(\"Input: \" + str(list1))\n    print(\"Extract every first element: \" + str(extract_every_nth_element(list1, 1)))\n    print(\"Extract every second element: \" + str(extract_every_nth_element(list1, 2)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.6640625
    ],
    [
      "def extract_first(list_of_lists: list, first: bool = True) -> list:\n    \"\"\"Extracts every first or specified element from a given two-dimensional list.\n\n    Args:\n        list_of_lists (list): the list of lists to extract from\n        first (bool): True if you want to extract every first element, False if you want to extract every other element\n\n    Returns:\n        list: the resulting list\n    \"\"\"\n\n    # If the user wants to extract every first element\n    if first:\n        return [element[0] for element in list_of_lists]\n\n    # If the user wants to extract every other element\n    else:\n        return [element[1] for element in list_of_lists]\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]\n\n    print(extract_first(list_of_lists))\n    print(extract_first(list_of_lists, first=False))",
      -1.7138671875
    ],
    [
      "from itertools import chain\n\n\ndef extract_first_element(lst, first=True):\n    if first:\n        return [sublist[0] for sublist in lst]\n    else:\n        return [sublist[-1] for sublist in lst]\n\n\ndef extract_first_element2(lst, first=True):\n    if first:\n        return [x[0] for x in lst]\n    else:\n        return [x[-1] for x in lst]\n\n\ndef extract_first_element3(lst, first=True):\n    if first:\n        return list(map(lambda x: x[0], lst))\n    else:\n        return list(map(lambda x: x[-1], lst))\n\n\ndef extract_first_element4(lst, first=True):\n    if first:\n        return list(map(lambda x: x[0], lst))\n    else:\n        return list(map(lambda x: x[-1], lst))\n\n\ndef extract_first_element5(lst, first=True):\n    if first:\n        return list(map(lambda x: x[0], lst))\n    else:\n        return list(map(lambda x: x[-1], lst))\n\n\ndef extract_first_element6(lst, first=True):\n    if first:\n        return list(chain.from_iterable(x[0] for x in lst))\n    else:\n        return list(chain.from_iterable(x[-1] for x in lst))\n\n\ndef extract_first_element7(lst, first=True):\n    if first:\n        return list(chain.from_iterable(x[0] for x in lst))\n    else:\n        return list(chain.from_iterable(x[-1] for x in lst))\n\n\ndef extract_first_element8(lst, first=True):\n    if first:\n        return list(chain.from_iterable(map(lambda x: x[0], lst)))\n    else:\n        return list(chain.from_iterable(map(lambda x: x[-1], lst)))\n\n\ndef extract_first_element9(lst, first=True):",
      -1.7626953125
    ],
    [
      "def extract_first_column(table):\n    return [[row[0] for row in table]]\n\ndef extract_first_column_for_odd_rows(table):\n    return [[row[0] for row in table if row[0] % 2 != 0]]\n\ndef extract_second_column(table):\n    return [[row[1] for row in table]]\n\ndef extract_second_column_for_odd_rows(table):\n    return [[row[1] for row in table if row[0] % 2 != 0]]\n\ndef extract_third_column(table):\n    return [[row[2] for row in table]]\n\ndef extract_third_column_for_odd_rows(table):\n    return [[row[2] for row in table if row[0] % 2 != 0]]\n\ndef extract_fourth_column(table):\n    return [[row[3] for row in table]]\n\ndef extract_fourth_column_for_odd_rows(table):\n    return [[row[3] for row in table if row[0] % 2 != 0]]\n\ndef extract_fifth_column(table):\n    return [[row[4] for row in table]]\n\ndef extract_fifth_column_for_odd_rows(table):\n    return [[row[4] for row in table if row[0] % 2 != 0]]\n\ndef extract_sixth_column(table):\n    return [[row[5] for row in table]]\n\ndef extract_sixth_column_for_odd_rows(table):\n    return [[row[5] for row in table if row[0] % 2 != 0]]\n\ndef extract_seventh_column(table):\n    return [[row[6] for row in table]]\n\ndef extract_seventh_column_for_odd_rows(table):\n    return [[row[6] for row in table if row[0] % 2 != 0]]\n\ndef extract_eighth_column(table):\n    return [[row[7] for row in table]]\n\ndef extract_eighth_column_for_odd_rows(table):\n    return [[row",
      -1.830078125
    ],
    [
      "def first_element(list_of_lists: list, position: int = 0) -> list:\n    \"\"\"Returns a list with the first or the specified element from each list.\n\n    Args:\n        list_of_lists (list): a two-dimensional list.\n        position (int): the position of the element to extract. Defaults to 0.\n\n    Examples:\n        >>> first_element([[1, 2], [3, 4], [5, 6], [7, 8]])\n        [1, 3, 5, 7]\n\n        >>> first_element([[1, 2], [3, 4], [5, 6], [7, 8]], 1)\n        [2, 4, 6, 8]\n\n    \"\"\"\n    return [lst[position] for lst in list_of_lists]",
      -2.10546875
    ],
    [
      "def extract_first(lst: list, n: int = 0) -> list:\n    \"\"\"Returns a list of the first or nth element of each sublist.\n\n    Args:\n        lst (list): The list of sublists to extract from.\n        n (int): The nth element to extract.\n\n    Examples:\n        >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n        >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n        [2, 5, 8]\n\n    Returns:\n        list: The list of extracted elements.\n    \"\"\"\n    return [sublst[n] for sublst in lst]",
      -2.19921875
    ],
    [
      "def extract_first(lst: list, n: int) -> list:\n    \"\"\"Returns a list of the first n elements of each sublist.\"\"\"\n    return [sub[0:n] for sub in lst]\n\n\ndef extract_first_p(lst: list, n: int) -> list:\n    \"\"\"Returns a list of the first n elements of each sublist.\"\"\"\n    return [[sub[i] for i in range(n)] for sub in lst]\n\n\ndef extract_last(lst: list, n: int) -> list:\n    \"\"\"Returns a list of the last n elements of each sublist.\"\"\"\n    return [sub[-n:] for sub in lst]\n\n\ndef extract_last_p(lst: list, n: int) -> list:\n    \"\"\"Returns a list of the last n elements of each sublist.\"\"\"\n    return [[sub[i] for i in range(-n, 0)] for sub in lst]\n\n\ndef extract_all(lst: list) -> list:\n    \"\"\"Returns a list of all elements of each sublist.\"\"\"\n    return [sub[:] for sub in lst]\n\n\ndef extract_all_p(lst: list) -> list:\n    \"\"\"Returns a list of all elements of each sublist.\"\"\"\n    return [[sub[i] for i in range(len(sub))] for sub in lst]\n\n\ndef main():\n    lst = [\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [10, 11, 12, 13, 14, 15, 16, 17],\n        [20, 21, 22, 23, 24, 25, 26, 27],\n        [30, 31, 32, 33, 34, 35, 36, 37],\n    ]\n    print(extract_first(lst, 3))\n    print(extract_first_p(lst, 3))\n    print(extract_last(lst, 3))\n    print(extract_last_p",
      -2.78515625
    ],
    [
      "from typing import List\n\n\ndef extract_elements(array: List[list], elem: int) -> List[list]:\n    \"\"\"Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        array (List[list]): a two-dimensional list\n        elem (int): the element to extract\n\n    Returns:\n        List[list]: a two-dimensional list with the specified element extracted\n    \"\"\"\n    return [[array[i][j] for j in range(len(array[0])) if j == elem] for i in range(len(array))]\n\n\nif __name__ == \"__main__\":\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [[2], [5], [8]]\n    assert extract_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [[1], [4], [7]]",
      -3.138671875
    ],
    [
      "def extract_elements(arr, every_first_element=True):\n    \"\"\"Returns a list of the first elements from the sublists of a given list.\n\n    Args:\n        arr: A list.\n        every_first_element: A boolean. If True, it will return a list of the first elements from the sublists of a given list.\n                             If False, it will return a list of the last elements from the sublists of a given list.\n\n    Returns:\n        A list of the first elements from the sublists of a given list.\n    \"\"\"\n    return [element[0] for element in arr]\n\n\ndef main():\n    print(\"Please run this solution from the command line\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.30078125
    ],
    [
      "def extract_first(arr, order):\n    if order == 1:\n        return [item[0] for item in arr]\n    return [item[-1] for item in arr]\n\n\nprint(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\nprint(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))\nprint(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))",
      -3.408203125
    ],
    [
      "from typing import List, Any\n\n\ndef extract_first(items: List[List[Any]], first: bool = True) -> List[Any]:\n    \"\"\"Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        items (List[List[Any]]): two-dimensional list.\n        first (bool, optional): extract first elements. Defaults to True.\n\n    Examples:\n        >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], first=True)\n        [1, 4, 7]\n\n        >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], first=False)\n        [2, 5, 8]\n\n        >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], first=1)\n        [2, 5, 8]\n    \"\"\"\n    if first:\n        return [row[0] for row in items]\n\n    return [row[len(row) - 1] for row in items]\n\n\nif __name__ == \"__main__\":\n    print(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], first=True))\n    print(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], first=False))\n    print(extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], first=1))",
      -3.5
    ],
    [
      "from typing import List, Any\n\n\ndef extract_first_element(lst: List[Any]) -> List[Any]:\n    \"\"\"Extract first element from a given two-dimensional list.\n\n    Args:\n        lst (List[Any]): a given two-dimensional list\n\n    Examples:\n        >>> extract_first_element([[1, 2], [3, 4], [5, 6]])\n        [[1, 3, 5], [2, 4, 6]]\n    \"\"\"\n    return [sub_lst[0] for sub_lst in lst]\n\n\ndef extract_first_element_recursively(lst: List[Any]) -> List[Any]:\n    \"\"\"Extract first element from a given two-dimensional list recursively.\n\n    Args:\n        lst (List[Any]): a given two-dimensional list\n\n    Examples:\n        >>> extract_first_element_recursively([[1, 2], [3, 4], [5, 6]])\n        [[1, 3, 5], [2, 4, 6]]\n    \"\"\"\n    if not lst:\n        return []\n\n    return [lst[0]] + extract_first_element_recursively(lst[1:])\n\n\ndef extract_specified_element(lst: List[Any], idx: int) -> List[Any]:\n    \"\"\"Extract specified element from a given two-dimensional list.\n\n    Args:\n        lst (List[Any]): a given two-dimensional list\n        idx (int): an index of the specified element\n\n    Examples:\n        >>> extract_specified_element([[1, 2], [3, 4], [5, 6]], 1)\n        [[2, 4, 6]]\n    \"\"\"\n    return [[sub_lst[idx]] for sub_lst in lst]\n\n\ndef extract_specified_element_recursively(lst: List[Any], idx: int) -> List[Any]:\n    \"\"\"Extract specified element from a given two-dimensional list recursively.\n\n    Args:\n        lst (List[Any]): a given two-dimensional list\n        idx (int): an index",
      -4.0234375
    ],
    [
      "from itertools import zip_longest\n\n\ndef first_elements(lst):\n    return [element[0] for element in lst]\n\n\ndef first_elements_zip(lst):\n    return [first for first, _ in zip_longest(lst, fillvalue=None)]\n\n\ndef first_elements_zip_longest(lst):\n    return [first for first, _ in zip_longest(lst, fillvalue=None)]\n\n\n# tests\nlst = [['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3']]\n\nassert first_elements(lst) == ['a1', 'b1', 'c1']\nassert first_elements_zip(lst) == ['a1', 'b1', 'c1']\nassert first_elements_zip_longest(lst) == ['a1', 'b1', 'c1']",
      -4.12890625
    ],
    [
      "def extract_list(lst, every_first=True):\n    for sublist in lst:\n        if every_first:\n            yield sublist[0]\n        else:\n            yield sublist[1]\n\n\nif __name__ == '__main__':\n    lst = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n    print(list(extract_list(lst)))\n    print(list(extract_list(lst, every_first=False)))",
      -5.22265625
    ],
    [
      "from typing import List\n\n\ndef extract_from_matrix(matrix: List[List[int]], mode: str) -> List[int]:\n    \"\"\"Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        matrix (List[List[int]]): two-dimensional list of integers\n        mode (str): either 'first' or 'specified'\n\n    Examples:\n        >>> extract_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'first')\n        [1, 4, 7]\n\n        >>> extract_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 'specified')\n        [2, 5, 8]\n\n    Returns:\n        List[int]: extracted elements\n    \"\"\"\n    return [\n        row[0] if mode == \"first\" else row[row_index]\n        for row_index, row in enumerate(matrix)\n    ]\n\n\nif __name__ == \"__main__\":\n    print(extract_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"first\"))\n    print(extract_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"specified\"))",
      -5.54296875
    ],
    [
      "from typing import List, Any\n\n\ndef extract_first_elements(lst: List[List[Any]], position: int) -> List[Any]:\n    \"\"\"Extracts the first element of each sublist.\n\n    Args:\n        lst (List[List[Any]]): the list of lists\n        position (int): the index of the sublist to extract the element from\n\n    Examples:\n        >>> extract_first_elements([[1, 2, 3, 4], [5, 6, 7, 8]], 1)\n        [2, 6]\n    \"\"\"\n    return [lst[i][position] for i in range(len(lst))]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_elements([[1, 2, 3, 4], [5, 6, 7, 8]], 1))",
      -5.73046875
    ],
    [
      "from typing import List\n\n\ndef extract_first_or_nth(lst: List[List], n: int) -> List[List]:\n    \"\"\"Returns a list of lists containing only first or nth element from the original list.\n\n    Args:\n        lst: two-dimensional list of integers\n        n: if n is 0, extracts only the first element from each sublist\n\n    Examples:\n        >>> extract_first_or_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0)\n        [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\n        >>> extract_first_or_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n        [[2, 5, 8], [3, 6, 9]]\n\n        >>> extract_first_or_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n        [[3, 6, 9]]\n\n        >>> extract_first_or_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n        []\n    \"\"\"\n    return [lst[i][n] for i in range(len(lst)) if lst[i]]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_or_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\n    print(extract_first_or_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\n    print(extract_first_or_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))\n    print(extract_first_or_nth([[1, 2, 3], [",
      -6.5390625
    ],
    [
      "from typing import List\n\n\ndef extract_first_elements(lst: List[List]) -> List:\n    \"\"\"Returns a list of first elements from two-dimensional list.\n\n    Examples:\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\n        [2, 5, 8]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0)\n        [1, 4, 7]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10)\n        [1, 4, 7]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -1)\n        [1, 4, 7]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -2)\n        [2, 5, 8]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -3)\n        [3, 6, 9]\n\n    \"\"\"\n    if not lst:\n        return []\n\n    return [\n        lst_item[index]\n        for lst_item in lst\n        if len(lst_item) > index\n    ]\n\n\nif __name__ == \"__main__\":\n    print(extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(extract_first_elements([[1,",
      -7.625
    ],
    [
      "def extract_first_or_specified_element(matrix, *args):\n    \"\"\"Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        matrix: two-dimensional list of integers\n        *args: optional index of the element to extract\n\n    Returns:\n        a list of extracted elements\n\n    Raises:\n        ValueError: if matrix is not a two-dimensional list\n        IndexError: if the index is out of range\n\n    Examples:\n        >>> extract_first_or_specified_element([[1, 2], [3, 4], [5, 6]])\n        [[1, 3, 5], [2, 4, 6]]\n\n        >>> extract_first_or_specified_element([[1, 2], [3, 4], [5, 6]], 0)\n        [[1, 3, 5], [2, 4, 6]]\n\n        >>> extract_first_or_specified_element([[1, 2], [3, 4], [5, 6]], 1)\n        [[2, 4, 6], [1, 3, 5]]\n\n        >>> extract_first_or_specified_element([[1, 2], [3, 4], [5, 6]], 0, 1)\n        [[1, 2, 4], [3, 4, 6]]\n    \"\"\"\n    if not isinstance(matrix, list):\n        raise ValueError(\"Matrix must be a two-dimensional list\")\n    if len(matrix) == 0 or len(matrix[0]) == 0:\n        return []\n    if args:\n        if not all(isinstance(arg, int) for arg in args):\n            raise ValueError(\"Index must be an integer\")\n        if not all(0 <= arg < len(matrix[0]) for arg in args):\n            raise IndexError(\"Index is out of range\")\n\n    extracted = []\n    for row in matrix:\n        extracted.append([row[arg] for arg in args])\n    return extracted\n\n\nif __name__ == \"__main__\":\n    print(extract_",
      -12.703125
    ],
    [
      "def extract_first(arr: list, type: str = \"first\") -> list:\n    \"\"\"\n    >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"first\")\n    [1, 4, 7]\n    >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"second\")\n    [2, 5, 8]\n    >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"third\")\n    [3, 6, 9]\n    >>> extract_first([[1, 2, 3], [4, 5, 6], [7, 8, 9]], \"fourth\")\n    []\n    \"\"\"\n    return [\n        i[0]\n        for i in arr\n        if len(i) > 0 and (type == \"first\" or type == \"first\" and len(i) > int(type))\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -13.3359375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}