{
  "problem": {
    "task_id": "MBPP/249",
    "prompt": "Write a function to find the intersection of two arrays using lambda function.",
    "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
    "test_list": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ],
    "challenge_test_list": [],
    "problem_id": 238
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\ndef intersection(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    Using lambda function to find the intersection of two arrays.\n    >>> intersection([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])\n    [4, 5]\n    >>> intersection([1, 2, 3, 4], [1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> intersection([1, 2, 3, 4], [1, 2, 3])\n    [1, 2, 3]\n    >>> intersection([], [1, 2, 3, 4])\n    []\n    >>> intersection([1, 2, 3, 4], [])\n    []\n    \"\"\"\n    return list(filter(lambda x: x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      15.125
    ],
    [
      "def find_intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [4, 5, 6, 7, 8, 9]\n    print(find_intersection(arr1, arr2))",
      13.921875
    ],
    [
      "def find_intersection(array1, array2):\n    return list(filter(lambda x: x in array1, array2))\n\n\ndef main():\n    array1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    array2 = [2, 4, 6, 8, 10]\n    print(find_intersection(array1, array2))\n\n\nif __name__ == \"__main__\":\n    main()",
      12.8515625
    ],
    [
      "def intersection_arrays(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(intersection_arrays(arr1, arr2))\n\n\nif __name__ == '__main__':\n    main()",
      12.375
    ],
    [
      "from typing import List\n\n\ndef intersection(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"Returns the intersection of two arrays using lambda function.\n\n    Args:\n        arr1 (List[int]): first array.\n        arr2 (List[int]): second array.\n\n    Examples:\n        >>> intersection([1, 2, 3, 4, 5], [1, 2, 5, 6, 7])\n        [1, 2, 5]\n    \"\"\"\n    return list(set(arr1) & set(arr2))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [1, 2, 5, 6, 7]))",
      11.921875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7]\n    arr2 = [3, 4, 7, 8, 9, 10]\n    print(intersection(arr1, arr2))",
      11.109375
    ],
    [
      "def intersection(array_1, array_2):\n    return list(set(array_1) & set(array_2))\n\n\nif __name__ == '__main__':\n    array_1 = [1, 2, 3, 4, 5, 6, 7]\n    array_2 = [4, 5, 6, 7, 8, 9, 10]\n    print(intersection(array_1, array_2))",
      9.9296875
    ],
    [
      "def intersection(arr1, arr2):\n    # return list(filter(lambda x: x in arr1, arr2))\n    return list(set(arr1) & set(arr2))\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [4, 5, 6, 7, 8, 9]\n    print(intersection(arr1, arr2))\n    print(intersection(arr2, arr1))\n\n    # Alternative solution\n    # return [x for x in arr1 if x in arr2]",
      9.2109375
    ],
    [
      "from typing import List\n\n\ndef intersection_using_lambda(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    Using lambda, we can't use for loop and if statement.\n    \"\"\"\n    return list(set(arr1) & set(arr2))\n\n\nif __name__ == \"__main__\":\n    assert intersection_using_lambda([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]",
      9.046875
    ],
    [
      "from functools import reduce\n\ndef intersect(arr1, arr2):\n    return list(set(arr1).intersection(arr2))\n\ndef intersect_lambda(arr1, arr2):\n    return list(reduce(lambda x, y: x.intersection(y), [set(arr1), set(arr2)]))\n\n\nprint(intersect([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\nprint(intersect_lambda([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))",
      8.2890625
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr2 = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(intersection(arr1, arr2))\n\n\nif __name__ == \"__main__\":\n    main()",
      8.1640625
    ],
    [
      "def intersection(arr1, arr2):\n    \"\"\"\n    >>> intersection([1, 2, 3, 4, 5], [5, 6, 7, 8])\n    [5]\n    \"\"\"\n\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      7.29296875
    ],
    [
      "from functools import reduce\n\n\ndef intersection(a, b):\n    \"\"\"\n    >>> intersection([1, 2, 3], [2, 3, 4])\n    [2, 3]\n    >>> intersection([1, 2, 3], [4, 5, 6])\n    []\n    >>> intersection([1, 2, 3], [3, 4, 5])\n    [3]\n    \"\"\"\n    return reduce(\n        lambda result, x: result + [x] if x in b else result, a, []\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      7.0234375
    ],
    [
      "def find_intersection(array_1, array_2):\n    \"\"\"\n    Find the intersection of two arrays using lambda function.\n\n    Args:\n       array_1(list): First array to find the intersection\n       array_2(list): Second array to find the intersection\n    Returns:\n       array_1 :intersection of the two arrays (if intersection exists)\n       None: if no intersection is found\n    \"\"\"\n    return list(set(array_1).intersection(array_2))\n\n\nprint(find_intersection([1, 2, 3, 5, 7], [1, 2, 3, 4, 5, 6]))\nprint(find_intersection([1, 2, 3, 5, 7], [1, 2, 3, 4, 5, 6, 7]))\nprint(find_intersection([1, 2, 3, 5, 7], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(find_intersection([1, 2, 3, 5, 7], [2, 4, 6, 8]))",
      5.9921875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(map(lambda x: x, set(arr1).intersection(arr2)))\n\n\ndef main():\n    print(\"There are 2 different ways to solve this:\")\n    print(\"Method 1: Using List Comprehension\")\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(f\"Intersection of {arr1} and {arr2} is: {intersection(arr1, arr2)}\")\n\n    print(\"Method 2: Using Lambda Function\")\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(f\"Intersection of {arr1} and {arr2} is: {intersection(arr1, arr2)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      5.73828125
    ],
    [
      "from typing import List\n\n\ndef intersection(arr1: List, arr2: List) -> List:\n    \"\"\"Returns intersection of two given lists.\n\n    Args:\n        arr1 (List): list one.\n        arr2 (List): list two.\n\n    Examples:\n        >>> intersection([1, 2, 3, 4, 5], [1, 2, 5, 6, 7])\n        [1, 2, 5]\n        >>> intersection([1, 2, 3, 4, 5], [1, 3, 5, 7, 9])\n        [1, 3, 5]\n    \"\"\"\n    return list(set(arr1).intersection(set(arr2)))\n\n\ndef intersection_lambda(arr1: List, arr2: List) -> List:\n    \"\"\"Returns intersection of two given lists using lambda function.\n\n    Args:\n        arr1 (List): list one.\n        arr2 (List): list two.\n\n    Examples:\n        >>> intersection_lambda([1, 2, 3, 4, 5], [1, 2, 5, 6, 7])\n        [1, 2, 5]\n        >>> intersection_lambda([1, 2, 3, 4, 5], [1, 3, 5, 7, 9])\n        [1, 3, 5]\n    \"\"\"\n    return list(set(arr1).intersection(set(arr2)))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [1, 2, 5, 6, 7]))\n    print(intersection([1, 2, 3, 4, 5], [1, 3, 5, 7, 9]))",
      5.70703125
    ],
    [
      "from functools import reduce\nfrom typing import List\n\n\ndef intersection_set_comprehension(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    return [i for i in arr1 if i in arr2]\n\n\ndef intersection_reduce(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    return list(reduce(lambda x, y: x.union(y), [set(arr1), set(arr2)]))\n\n\ndef intersection_set_builtin(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    return list(set(arr1).intersection(set(arr2)))\n\n\ndef intersection_lambda(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    return list(set(arr1).intersection(set(arr2)))\n\n\nif __name__ == \"__main__\":\n    print(intersection_set_comprehension([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\n    print(intersection_reduce([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\n    print(intersection_set_builtin([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\n    print(intersection_lambda([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))",
      5.48828125
    ],
    [
      "from functools import reduce\n\n\ndef intersection(arr1, arr2):\n    return reduce(lambda x, y: x + [y] if y in arr1 else x, arr2, [])\n\n\ndef test_intersection():\n    \"\"\"\n    >>> test_intersection()\n    True\n    \"\"\"\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [4, 5, 6, 7, 8]\n    assert intersection(arr1, arr2) == [4, 5, 6]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      5.12890625
    ],
    [
      "def intersect_arrays(array_a, array_b):\n    return list(filter(lambda x: x in array_a, array_b))\n\n\ndef main():\n    arr_a = [1, 2, 3, 4, 5]\n    arr_b = [4, 5, 6, 7, 8]\n    print(intersect_arrays(arr_a, arr_b))\n\n\nif __name__ == \"__main__\":\n    main()",
      4.6953125
    ],
    [
      "def intersection(arr1, arr2):\n    \"\"\"\n    >>> intersection([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8])\n    [4, 5, 6]\n    >>> intersection([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7])\n    [1, 2, 3, 4, 5, 6]\n    >>> intersection([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12])\n    []\n    \"\"\"\n    return list(\n        filter(lambda x: x in arr1 and x in arr2, arr1 + arr2)\n    )  # filter(lambda x: x in arr1, arr2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.60546875
    ],
    [
      "from functools import reduce\nfrom operator import __and__\n\n\ndef intersect(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\ndef intersect_lambda(arr1, arr2):\n    return list(reduce(__and__, (set(arr1), set(arr2))))\n\n\n# Tests\nassert intersect_lambda([1, 2, 3], [2, 3, 4]) == intersect([1, 2, 3], [2, 3, 4])\nassert intersect_lambda([1, 2, 3], [3, 4, 5]) == intersect([1, 2, 3], [3, 4, 5])\nassert intersect_lambda([1, 2, 3], [4, 5, 6]) == intersect([1, 2, 3], [4, 5, 6])",
      4.53515625
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\n# Tests\nprint(intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\nprint(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      4.109375
    ],
    [
      "def intersect(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7, 8]\n\nprint(intersect(arr1, arr2))",
      3.70703125
    ],
    [
      "def intersection_array(arr1, arr2):\n    return list(map(lambda x: x, set(arr1).intersection(set(arr2))))\n\nif __name__ == '__main__':\n    print(intersection_array([1,2,3,4,5,6,7], [2,3,5,6,7,8,9]))",
      3.638671875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7, 8]\nprint(\"The common elements in the two arrays are: \" + str(intersection(arr1, arr2)))",
      3.2578125
    ],
    [
      "def intersection(list1, list2):\n    return list(filter(lambda x: x in list1, list2))\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = intersection(test_input[0], test_input[1])\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function(([1, 2, 3, 4, 5], [3, 4, 5, 6, 7],))\ntest_function(([1, 2, 3, 4, 5], [5, 6, 7],))\ntest_function(([1, 2, 3, 4, 5], [3, 4, 5],))\ntest_function(([1, 2, 3, 4, 5], [3, 4, 5, 6],))",
      3.25
    ],
    [
      "from functools import reduce\n\n\ndef intersection_using_lambda(arr1, arr2):\n    return list(reduce(lambda a, b: a.intersection(b), [set(arr1), set(arr2)]))\n\n\nif __name__ == \"__main__\":\n    print(intersection_using_lambda([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n    print(intersection_using_lambda([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]))",
      3.1875
    ],
    [
      "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n\n    print(intersection_array(arr1, arr2))",
      3.1015625
    ],
    [
      "from typing import List\n\n\ndef intersection_with_lambda(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"Find the intersection of two arrays using lambda function.\"\"\"\n    return list(filter(lambda num: num in arr1, arr2))\n\n\nif __name__ == \"__main__\":\n    print(intersection_with_lambda([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9]))",
      2.994140625
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(intersection(arr1, arr2))",
      2.673828125
    ],
    [
      "from functools import reduce\n\ndef intersect(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\ndef intersect_lambda(arr1, arr2):\n    return list(reduce(lambda x, y: x & y, [set(arr1), set(arr2)]))\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    assert intersect(arr1, arr2) == intersect_lambda(arr1, arr2)",
      2.5625
    ],
    [
      "def intersection(list1, list2):\n    return list(filter(lambda x: x in list1 and x in list2, list1))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5, 6], [2, 3, 5, 6, 7]))",
      2.498046875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7, 8]\n\nprint(intersection(arr1, arr2))",
      2.384765625
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda n: n in arr2, arr1))\n\n\nassert intersection([1, 2, 3, 4, 5], [3, 4, 5, 6]) == [3, 4, 5]",
      2.33984375
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7, 8]\nprint(intersection(arr1, arr2))",
      2.3359375
    ],
    [
      "def intersection_of_two_arrays(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\nif __name__ == '__main__': \n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [3, 4, 5, 6, 7]\n    print(intersection_of_two_arrays(arr1, arr2))",
      2.3046875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7, 8]\nprint(intersection(arr1, arr2))",
      2.154296875
    ],
    [
      "from typing import List\n\n\ndef intersection_arrays(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"Finds the intersection of two arrays.\n\n    Args:\n        arr1 (List[int]): first array.\n        arr2 (List[int]): second array.\n\n    Examples:\n        >>> intersection_arrays([1, 2, 3, 4], [3, 4, 5, 6])\n        [3, 4]\n        >>> intersection_arrays([1, 2, 3, 4], [1, 2, 3, 5, 6])\n        [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    print(intersection_arrays([1, 2, 3, 4], [3, 4, 5, 6]))\n    print(intersection_arrays([1, 2, 3, 4], [1, 2, 3, 5, 6]))",
      2.109375
    ],
    [
      "def find_intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\nprint(find_intersection([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]))",
      1.9296875
    ],
    [
      "from functools import reduce\n\ndef find_intersection(arr1, arr2):\n    \"\"\"\n    Finds the intersection between two arrays.\n\n    Args:\n       arr1(list): First array to find the intersection\n       arr2(list): Second array to find the intersection\n    Returns:\n       list: List of common elements if found otherwise an empty list\n    \"\"\"\n    return list(reduce(lambda x, y: x.intersection(y), [set(arr1), set(arr2)]))\n\nprint(find_intersection([1,2,3,4,5], [5,6,7,8,9]))\nprint(find_intersection([1,2,3,4,5], [10,6,7,8,9]))",
      1.7763671875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(arr2))\n\n\nprint(intersection([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9]))",
      1.443359375
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(intersection(arr1, arr2))",
      1.43359375
    ],
    [
      "from typing import List\n\n\ndef intersection(array1: List[int], array2: List[int]) -> List[int]:\n    \"\"\"Returns the intersection of two arrays.\"\"\"\n    return list(filter(lambda x: x in array1 and x in array2, array1))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]))",
      1.234375
    ],
    [
      "from typing import List\n\n\ndef intersection(arr_a: List[int], arr_b: List[int]) -> List[int]:\n    \"\"\"Returns the intersection of two lists.\n\n    Args:\n        arr_a (List[int]): First array.\n        arr_b (List[int]): Second array.\n\n    Examples:\n        >>> intersection([1, 2, 3, 4], [3, 4, 5, 6])\n        [3, 4]\n    \"\"\"\n    return list(\n        filter(\n            lambda a: a in arr_b,\n            arr_a,\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4], [3, 4, 5, 6]))",
      1.150390625
    ],
    [
      "from functools import reduce\n\n\ndef intersection(arr1, arr2):\n    return reduce(lambda x, y: x | y, map(set, (arr1, arr2)))\n\n\n# Tests\nassert intersection([1, 2, 2, 1], [2, 2, 1]) == {1, 2}",
      1.064453125
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\nprint(intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))",
      1.0009765625
    ],
    [
      "def intersection(array_1, array_2):\n    return list(filter(lambda x: x in array_1 and x in array_2, array_1))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))",
      1.0
    ],
    [
      "def intersection(a, b):\n    \"\"\"\n    >>> intersection([1, 2, 3, 4], [3, 4, 5, 6])\n    [3, 4]\n    \"\"\"\n    return list(filter(lambda x: x in a and x in b, a))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      0.84765625
    ],
    [
      "from typing import List\n\n\ndef intersection_using_lambda(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    print(intersection_using_lambda([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))",
      0.82421875
    ],
    [
      "from typing import List\n\n\ndef intersection(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    Using lambda function\n    \"\"\"\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    assert intersection([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]",
      0.7333984375
    ],
    [
      "def intersection_arrays(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\nif __name__ == \"__main__\":\n    print(intersection_arrays([1, 2, 3, 4, 5], [1, 2, 5, 6, 7]))",
      0.7236328125
    ],
    [
      "def intersection_of_two_arrays(a, b):\n    return list(map(lambda x: x, filter(lambda x: x in a, b)))\n\n\nprint(intersection_of_two_arrays([1, 2, 3, 4, 5], [1, 2, 5, 6, 7, 8]))",
      0.53369140625
    ],
    [
      "from typing import List\n\n\ndef intersection(a: List[int], b: List[int]) -> List[int]:\n    \"\"\"Return the intersection of two given arrays.\n\n    Args:\n        a (List[int]): the first array.\n        b (List[int]): the second array.\n\n    Examples:\n        >>> intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7])\n        [3, 4, 5]\n    \"\"\"\n    return list(filter(lambda x: x in b, a))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))",
      0.459716796875
    ],
    [
      "from functools import reduce\n\n\ndef intersection(a1, a2):\n    return list(set(a1) & set(a2))\n\n\ndef intersection2(a1, a2):\n    return reduce(lambda a, b: a if b in a else a + [b], a1, [])\n\n\ndef intersection3(a1, a2):\n    return [a for a in a1 if a in a2]\n\n\n# Test\na1 = [1, 2, 3, 4, 5, 6]\na2 = [4, 5, 7, 8]\n\nassert intersection(a1, a2) == [4, 5]\nassert intersection2(a1, a2) == [4, 5]\nassert intersection3(a1, a2) == [4, 5]",
      0.404296875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr2 = [4, 5, 6, 7, 8, 9, 10, 11, 12]\n    result = intersection(arr1, arr2)\n    print(result)",
      0.339599609375
    ],
    [
      "def intersect(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(\"Intersection: \" + str(intersect(arr1, arr2)))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.27978515625
    ],
    [
      "def intersection_by_lambda(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))\n\n\ndef main():\n    print(intersection_by_lambda([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.171142578125
    ],
    [
      "def intersection(a, b):\n    return list(filter(lambda x: x in a, b))\n\nprint(intersection([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))",
      0.10125732421875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7, 8]\nprint(\"Intersection of the two arrays is: \", end = \"\")\nprint(intersection(arr1, arr2))",
      0.042572021484375
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\nprint(intersection([1, 2, 3, 4, 5], [1, 2, 5, 6]))",
      0.0194091796875
    ],
    [
      "def intersection_of_two_arrays(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\nprint(intersection_of_two_arrays([1, 2, 3, 4, 5], [2, 3, 5, 6, 7]))",
      0.0174713134765625
    ],
    [
      "from functools import reduce\n\ndef intersect(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\ndef intersect_lambda(arr1, arr2):\n    return list(reduce(lambda x, y: set(x) & set(y), [arr1, arr2]))\n\nprint(intersect_lambda([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))",
      -0.042205810546875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [3, 4, 5, 6, 7]\n\nprint(intersection(arr1, arr2))",
      -0.09210205078125
    ],
    [
      "def intersect(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\narr2 = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(intersect(arr1, arr2))",
      -0.142822265625
    ],
    [
      "def intersection(arr1, arr2):\n    return list(map(lambda x: x in arr2, arr1))\n\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [5, 6, 7, 8, 9]\n    print(intersection(arr1, arr2))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.325927734375
    ],
    [
      "# Solution\n\n\ndef intersection(a1, a2):\n    return list(filter(lambda x: x in a2, a1))\n\n\n# Test\nprint(intersection([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))",
      -0.352294921875
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(intersection(arr1, arr2))",
      -0.397705078125
    ],
    [
      "# Solution 1\ndef intersection_1(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\n# Solution 2\ndef intersection_2(arr1, arr2):\n    return [x for x in arr1 if x in arr2]\n\n\n# Solution 3\ndef intersection_3(arr1, arr2):\n    return set(arr1).intersection(set(arr2))\n\n\n# Test\narr1 = [1, 2, 3, 4, 5, 6, 7, 8]\narr2 = [3, 4, 5, 6, 7, 8, 9, 10]\nprint(intersection_1(arr1, arr2))\nprint(intersection_2(arr1, arr2))\nprint(intersection_3(arr1, arr2))",
      -0.479248046875
    ],
    [
      "from functools import reduce\n\n\ndef intersect(arr1, arr2):\n    return reduce(\n        lambda acc, x: acc + [x] if x in arr1 and x in arr2 else acc,\n        arr1,\n        [],\n    )\n\n\n# test\nassert intersect([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]",
      -0.488525390625
    ],
    [
      "def intersection(array1, array2):\n    return list(filter(lambda x: x in array2, array1))\n\n\nprint(intersection([1, 2, 3, 4, 5, 6], [2, 3, 4, 7, 8]))",
      -0.50927734375
    ],
    [
      "from functools import reduce\nfrom operator import and_\n\n\ndef intersection(arr1, arr2):\n    return list(reduce(and_, map(set, [arr1, arr2])))\n\n\n# Tests\nassert intersection([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]",
      -0.837890625
    ],
    [
      "def intersect(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\nprint(intersect([1, 2, 3, 4], [1, 2, 5, 6]))",
      -0.85693359375
    ],
    [
      "def intersection(a, b):\n    return list(filter(lambda x: x in b, a))\n\nprint(intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))",
      -0.85693359375
    ],
    [
      "def intersection_using_lambda(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(intersection_using_lambda(arr1, arr2))",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\n\ndef intersect(array1, array2):\n    return reduce(lambda x, y: x.union(y), [set(array1), set(array2)])\n\n\ndef test_intersect():\n    assert intersect([1, 2, 3, 4], [3, 4, 5, 6]) == {3, 4}\n    assert intersect([1, 2, 3, 4], [5, 6]) == set()\n\n\nif __name__ == \"__main__\":\n    test_intersect()",
      -0.85693359375
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(intersection(arr1, arr2))\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def intersection(array1, array2):\n    return list(filter(lambda x: x in array1 and x in array2, array1))",
      -0.857421875
    ],
    [
      "def intersection(a1, a2):\n    return list(set(a1).intersection(set(a2)))\n\n\nif __name__ == \"__main__\":\n    a1 = [1, 2, 3, 4, 5]\n    a2 = [4, 5, 6, 7, 8]\n    print(intersection(a1, a2))",
      -0.85791015625
    ],
    [
      "def intersection_using_lambda(arr1, arr2):\n    return list(set(arr1).intersection(arr2))\n\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr2 = [4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(intersection_using_lambda(arr1, arr2))",
      -0.85791015625
    ],
    [
      "def intersection(a, b):\n    return lambda x, y: list(set(x) & set(y))(a, b)\n\n\ndef main():\n    print(\"There are two arrays:\")\n    print(intersection([1, 2, 3, 4], [3, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr2 = [3, 4, 5, 6, 7, 8, 9, 10]\n\n    print(intersection(arr1, arr2))",
      -0.8583984375
    ],
    [
      "def intersect(arr1, arr2):\n    return list(map(lambda x: x, set(arr1).intersection(set(arr2))))\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr2 = [4, 5, 6, 7, 8]\n\nprint(intersect(arr1, arr2))",
      -0.8583984375
    ],
    [
      "def intersect(a, b):\n    return list(filter(lambda x: x in a and x in b, a))\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [4, 5, 6, 7, 8]\n    print(intersect(a, b))",
      -0.8583984375
    ],
    [
      "def intersection_lambdas(a, b):\n    return list(filter(lambda x: x in a, b))\n\n\nprint(intersection_lambdas([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))",
      -0.86083984375
    ],
    [
      "from typing import List\n\n\ndef intersection_of_two_arrays(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr2 = [2, 4, 6, 8, 10]\n\n    print(intersection_of_two_arrays(arr1, arr2))",
      -0.873046875
    ],
    [
      "def intersection_using_lambda(list1, list2):\n    \"\"\"\n    Time complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return list(filter(lambda x: x in list1, list2))\n\n\nprint(intersection_using_lambda([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))",
      -1.33203125
    ],
    [
      "def find_intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [4, 5, 6, 7, 8, 9]\n    print(\"Array 1: \" + str(arr1))\n    print(\"Array 2: \" + str(arr2))\n\n    print(\"Intersection of the two arrays: \" + str(find_intersection(arr1, arr2)))\n\nif __name__ == \"__main__\":\n    main()",
      -1.3447265625
    ],
    [
      "from functools import reduce\nfrom operator import and_\n\n\ndef intersection(arr1, arr2):\n    return list(reduce(and_, map(set, [arr1, arr2])))\n\n\n# Tests\nprint(intersection([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\nprint(intersection([1, 2, 3, 4, 5], [4, 7, 6, 7, 8]))",
      -1.455078125
    ],
    [
      "from functools import reduce\n\ndef intersection_by_lambda(arr1, arr2):\n    return list(reduce(lambda a, b: a | b, (set(a) for a in [arr1, arr2])))\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(intersection_by_lambda(arr1, arr2))",
      -1.533203125
    ],
    [
      "from functools import reduce\nfrom itertools import chain\nfrom operator import __and__\n\n\ndef intersect(a, b):\n    return list(set(a) & set(b))\n\n\ndef intersect_lambda(a, b):\n    return list(set(chain(*(map(lambda x: list(filter(lambda y: y in x, b)), a))))\n\n\ndef intersect_reduce(a, b):\n    return list(reduce(__and__, (set(x) for x in a), set(b)))\n\n\nif __name__ == '__main__':\n    print(intersect([1, 2, 3, 4, 5], [1, 2, 5, 6, 7]))\n    print(intersect_lambda([1, 2, 3, 4, 5], [1, 2, 5, 6, 7]))\n    print(intersect_reduce([1, 2, 3, 4, 5], [1, 2, 5, 6, 7]))",
      -1.5380859375
    ],
    [
      "def intersection(arr1, arr2):\n    return lambda arr: [x for x in arr if x in arr1 and x in arr2]\n\n\nif __name__ == '__main__':\n    print(intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])([1, 2, 3, 4, 5]))",
      -1.5537109375
    ],
    [
      "def intersect(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1))\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [3, 4, 5, 6, 7, 8]\n    print(intersect(arr1, arr2))",
      -1.654296875
    ],
    [
      "from functools import reduce\nfrom itertools import chain\n\n\ndef intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\ndef intersection_lambda(arr1, arr2):\n    return list(set(chain(*reduce(lambda x, y: [x, y], [arr1, arr2]))))\n\n\n# Tests\nassert intersection([1, 2, 3], [4, 3, 2]) == [2, 3]\nassert intersection([1, 2, 3], [3, 4, 5]) == [3]\nassert intersection_lambda([1, 2, 3], [4, 3, 2]) == [2, 3]\nassert intersection_lambda([1, 2, 3], [3, 4, 5]) == [3]",
      -2.783203125
    ],
    [
      "from itertools import chain\nfrom functools import reduce\n\n\ndef intersection(arr1, arr2):\n    return reduce(lambda x, y: x + [y] if y in arr1 else x, arr2, [])\n\n\ndef intersection_with_chain(arr1, arr2):\n    return list(chain(*[arr for arr in (arr1, arr2) if arr is not None]))\n\n\n# Test\nassert intersection([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\nassert intersection([1, 2, 3], [4, 5, 6]) == []\nassert intersection([1, 2, 3], [1, 2, 3, 4, 5, 6]) == [1, 2, 3]\nassert intersection([1, 2, 3], [3, 4, 5, 6]) == [3]\nassert intersection_with_chain([1, 2, 3], [3, 4, 5, 6]) == [1, 2, 3]\nassert intersection_with_chain([1, 2, 3], None) == [1, 2, 3]\nassert intersection_with_chain(None, [1, 2, 3]) == [1, 2, 3]\nassert intersection_with_chain(None, None) == []",
      -3.658203125
    ],
    [
      "def find_intersection(array_one, array_two):\n    return lambda array_one, array_two: list(set(array_one).intersection(set(array_two)))\n\nif __name__ == '__main__':\n    array_one = [1, 2, 3, 4, 5]\n    array_two = [2, 3, 4, 5, 6]\n\n    find_intersection(array_one, array_two)",
      -4.109375
    ],
    [
      "def intersection(arr1, arr2):\n    return list(map(lambda x: x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr2 = [1, 2, 3, 4, 11, 12, 13, 14, 15, 16]\n    print(f\"Intersection: {intersection(arr1, arr2)}\")",
      -4.61328125
    ],
    [
      "from functools import reduce\nfrom operator import and_\n\n\ndef intersection_of_two_arrays(arr1, arr2):\n    \"\"\"\n    >>> intersection_of_two_arrays([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])\n    [4, 5]\n    \"\"\"\n    return list(\n        reduce(\n            and_,\n            (\n                map(\n                    lambda item: lambda sublist: item in sublist,\n                    arr1,\n                )\n            ),\n            arr2,\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -5.1796875
    ],
    [
      "from functools import reduce\nfrom operator import and_\n\n\ndef intersection(array_a, array_b):\n    return list(reduce(and_, map(lambda x: (x in array_a), array_b)))\n\n\ndef test_intersection():\n    array_a = [1, 2, 3, 4, 5]\n    array_b = [4, 5, 6, 7, 8]\n    assert intersection(array_a, array_b) == [4, 5]\n\n\nif __name__ == \"__main__\":\n    test_intersection()",
      -5.4609375
    ],
    [
      "from functools import reduce\nfrom itertools import chain\n\n\ndef intersection(array1, array2):\n    return list(reduce(lambda arr, arr2: set(arr) & set(arr2), array2, array1))\n\n\ndef intersection2(array1, array2):\n    return list(set(chain.from_iterable(array1)) & set(chain.from_iterable(array2)))\n\n\n# Test\narray1 = [[1, 2, 3], [4, 5, 6], [2, 3, 4]]\narray2 = [[1, 2, 3], [4, 5, 6], [2, 3, 4]]\nprint(intersection(array1, array2))\nprint(intersection2(array1, array2))",
      -5.51171875
    ],
    [
      "from functools import reduce\n\n\ndef intersection_of_two_arrays(arr1: list, arr2: list) -> list:\n    \"\"\"\n    >>> intersection_of_two_arrays([1, 2, 3, 4, 5], [4, 5, 6])\n    [4, 5]\n    \"\"\"\n    return reduce(lambda x, y: x if y in x else x + [y], arr2, arr1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -7.04296875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}