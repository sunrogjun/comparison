{
  "problem": {
    "task_id": "MBPP/104",
    "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
    "test_list": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ],
    "challenge_test_list": [],
    "problem_id": 93
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "from typing import List\n\n\ndef sort_sublists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        lists (List[List[str]]): list of lists\n\n    Examples:\n        >>> assert sort_sublists([[\"a\", \"c\", \"b\"], [\"c\", \"b\", \"a\"]]) == [['a', 'b', 'c'], ['a', 'b', 'c']]\n        >>> assert sort_sublists([[], [\"a\", \"c\", \"b\"], [\"c\", \"b\", \"a\"]]) == [[], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    \"\"\"\n    return [sorted(list_) for list_ in lists]\n\n\nif __name__ == \"__main__\":\n    print(sort_sublists([[\"a\", \"c\", \"b\"], [\"c\", \"b\", \"a\"]]))",
      15.6796875
    ],
    [
      "from typing import List\n\n\ndef sort_sublist(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort each sublist of strings.\n\n    Args:\n        lists (List[List[str]]): list of lists of strings.\n\n    Examples:\n        >>> assert sort_sublist([[\"a\", \"c\", \"b\"], [\"c\", \"a\", \"d\"]]) == [[\"a\", \"b\", \"c\"], [\"a\", \"c\", \"d\"]]\n    \"\"\"\n    return [sorted(sublist) for sublist in lists]\n\n\nif __name__ == \"__main__\":\n    print(sort_sublist([[\"a\", \"c\", \"b\"], [\"c\", \"a\", \"d\"]]))",
      13.5546875
    ],
    [
      "from typing import List\n\n\ndef lambda_sort(list_of_lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sorts each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        list_of_lists (List[List[str]]): list of lists to be sorted\n\n    Examples:\n        >>> lambda_sort([['a', 'b', 'c'], ['e', 'f', 'g', 'h'], ['i', 'j']])\n        [['a', 'b', 'c'], ['e', 'f', 'g', 'h'], ['i', 'j']]\n\n        >>> lambda_sort([['a', 'b', 'c'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l', 'm']])\n        [['a', 'b', 'c'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l', 'm']]\n\n        >>> lambda_sort([['a', 'b', 'c'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l', 'm'], ['n', 'o']])\n        [['a', 'b', 'c'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l', 'm'], ['n', 'o']]\n    \"\"\"\n    return [sorted(sublist) for sublist in list_of_lists]\n\n\nif __name__ == \"__main__\":\n    print(lambda_sort([[\"a\", \"b\", \"c\"], [\"e\", \"f\", \"g\", \"h\"], [\"i\", \"j\"]]))\n    print(lambda_sort([[\"a\", \"b\", \"c\"], [\"e\", \"f\", \"g\", \"h\"], [\"i\", \"j\", \"k\", \"l\", \"m\"]]))\n    print(\n        lambda_sort(\n            [[\"a\", \"b\", \"c\"], [\"e\", \"f\", \"g\", \"h\"], [\"i\", \"j\", \"k\", \"l\", \"m\"], [\"n\", \"o\"]]\n        )\n    )",
      12.125
    ],
    [
      "from typing import List\n\n\ndef get_sorted_sublists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sorts each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        lists (List[List[str]]): the given list of lists\n\n    Examples:\n        >>> assert get_sorted_sublists([['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]) == [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n        >>> assert get_sorted_sublists([['c', 'b', 'a'], ['c', 'b', 'a'], ['c', 'b', 'a']]) == [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n        >>> assert get_sorted_sublists([['c', 'b', 'a'], ['c', 'b', 'a'], ['c', 'b', 'a'], ['c', 'b', 'a'], ['c', 'b', 'a']]) == [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    \"\"\"\n    return list(\n        map(lambda sublist: sorted(sublist), lists)\n    )\n\n\nif __name__ == \"__main__\":\n    print(get_sorted_sublists([['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]))\n    print(get_sorted_sublists([['c', 'b', 'a'], ['c', 'b', 'a'], ['c', 'b', 'a']]))\n    print(get_sorted_sublists([['c', 'b', 'a'], ['c', 'b', 'a'], ['c', 'b', 'a'], ['c', 'b', 'a'], ['c', 'b', 'a']]))",
      11.96875
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_lists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        lists (List[List[str]]): list of lists of strings\n\n    Examples:\n        >>> assert sort_list_of_lists([['a', 'c', 'e'], ['b', 'd'], ['f']]) == [['a', 'c', 'e'], ['b', 'd'], ['f']]\n        >>> assert sort_list_of_lists([['a', 'c', 'e'], ['b', 'd'], ['f'], []]) == [['a', 'c', 'e'], ['b', 'd'], ['f'], []]\n    \"\"\"\n    return list(map(sorted, lists))\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_lists([[\"a\", \"c\", \"e\"], [\"b\", \"d\"], [\"f\"]]))",
      11.34375
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_lists(lst: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort list of lists by alphabetical order.\"\"\"\n    return [sorted(i) for i in lst]\n\n\nif __name__ == \"__main__\":\n    assert sort_list_of_lists([[\"a\", \"b\"], [\"b\", \"c\"]]) == [[\"a\", \"b\"], [\"b\", \"c\"]]\n    assert sort_list_of_lists([[\"a\", \"b\"], [\"c\", \"b\"]]) == [[\"a\", \"b\"], [\"b\", \"c\"]]\n    assert sort_list_of_lists([[\"b\", \"c\"], [\"a\", \"b\"]]) == [[\"a\", \"b\"], [\"b\", \"c\"]]\n    assert sort_list_of_lists([[\"b\", \"a\"], [\"c\", \"b\"]]) == [[\"a\", \"b\"], [\"b\", \"c\"]]",
      9.0859375
    ],
    [
      "from problem_12 import is_sorted\n\n\ndef sort_sublists(lst):\n    \"\"\"Sort each sublist of strings in a given list of lists.\"\"\"\n    return [sorted(sublst) for sublst in lst]\n\n\ndef test_sort_sublists():\n    \"\"\"Test for sort_sublists function.\"\"\"\n    assert sort_sublists([['cat', 'dog', 'bear'], ['ant', 'bird', 'fish'],\n                          ['cow', 'whale', 'fish']]) == [['bear', 'cat', 'dog'],\n                                                         ['ant', 'bird', 'fish'],\n                                                         ['cow', 'fish', 'whale']]\n    assert sort_sublists([['dog', 'cat', 'bear'], ['bird', 'ant', 'fish'],\n                          ['whale', 'fish', 'cow']]) == [['bear', 'cat', 'dog'],\n                                                         ['ant', 'bird', 'fish'],\n                                                         ['cow', 'fish', 'whale']]\n    assert sort_sublists([['cat', 'dog', 'bear'], ['bird', 'ant', 'fish'],\n                          ['whale', 'fish', 'cow']]) == [['bear', 'cat', 'dog'],\n                                                         ['ant', 'bird', 'fish'],\n                                                         ['cow', 'fish', 'whale']]\n    assert sort_sublists([['dog', 'cat', 'bear'], ['fish', 'ant', 'bird'],\n                          ['whale', 'cow', 'fish']]) == [['bear', 'cat', 'dog'],\n                                                         ['ant', 'bird', 'fish'],\n                                                         ['cow', 'fish', 'whale']]\n\n\nif __name__ == '__main__':\n    print(sort_sublists([['cat', 'dog', 'bear'], ['ant', 'bird', 'fish'],\n                         ['cow', 'whale', 'fish']]))",
      7.03515625
    ],
    [
      "from typing import List\n\n\ndef get_sorted_list(l: List[str]) -> List[str]:\n    return sorted(l)\n\n\ndef get_sorted_list_of_lists(l: List[List[str]]) -> List[List[str]]:\n    return [get_sorted_list(l) for l in l]\n\n\nif __name__ == \"__main__\":\n    assert get_sorted_list_of_lists([[\"a\", \"b\", \"c\"], [\"z\", \"b\", \"d\"], [\"q\", \"a\", \"b\"], [\"e\", \"g\", \"f\"]]) == [\n        [\"a\", \"b\", \"c\"],\n        [\"d\", \"z\", \"b\"],\n        [\"a\", \"b\", \"q\"],\n        [\"e\", \"f\", \"g\"],\n    ]",
      6.3125
    ],
    [
      "def sort_lists(list_of_lists):\n    return [sorted(i) for i in list_of_lists]\n\nprint(sort_lists([[2,3,1,5,6,7,11],[3,5,7,8,9,11,12,14,15,16],[4,8,10,12,15,17,20]]))",
      6.24609375
    ],
    [
      "from itertools import chain\n\n\ndef sort_sublists(lst):\n    return list(map(sorted, lst))\n\n\ndef sort_sublists_using_lambda(lst):\n    return list(map(lambda sublst: sorted(sublst), lst))\n\n\ndef main():\n    list_of_lists = [\n        [\"e\", \"x\", \"a\", \"m\", \"p\", \"l\", \"e\"],\n        [\"e\", \"x\", \"a\", \"m\", \"p\", \"l\", \"e\"],\n        [\"e\", \"x\", \"a\", \"m\", \"p\", \"l\", \"e\"],\n        [\"e\", \"x\", \"a\", \"m\", \"p\", \"l\", \"e\"],\n        [\"e\", \"x\", \"a\", \"m\", \"p\", \"l\", \"e\"],\n        [\"e\", \"x\", \"a\", \"m\", \"p\", \"l\", \"e\"],\n    ]\n    print(list_of_lists)\n    print(sort_sublists(list_of_lists))\n    print(sort_sublists_using_lambda(list_of_lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      6.109375
    ],
    [
      "from itertools import chain\n\n\ndef sort_list_of_lists(list_of_lists):\n    return [sorted(lst) for lst in list_of_lists]\n\n\ndef sort_list_of_lists_with_lambda(list_of_lists):\n    return list(map(lambda x: sorted(x), list_of_lists))\n\n\ndef sort_list_of_lists_with_lambda_and_chain(list_of_lists):\n    return list(chain(*list(map(lambda x: sorted(x), list_of_lists))))\n\n\nif __name__ == \"__main__\":\n    list_of_lists = [[\"c\", \"a\", \"d\"], [\"a\", \"b\", \"c\"], [\"a\", \"d\", \"b\"]]\n    print(sort_list_of_lists(list_of_lists))\n    print(sort_list_of_lists_with_lambda(list_of_lists))\n    print(sort_list_of_lists_with_lambda_and_chain(list_of_lists))",
      5.92578125
    ],
    [
      "from functools import reduce\n\n\ndef main(lists: list) -> list:\n    \"\"\"\n    >>> main([[], [\"b\", \"a\"], [\"c\", \"a\"], [\"b\", \"c\"], [\"a\"]])\n    [['a'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]\n    \"\"\"\n    return list(\n        map(\n            lambda sublist: sorted(sublist, key=lambda item: item), lists\n        )\n    )\n\n\ndef main_reduce(lists: list) -> list:\n    \"\"\"\n    >>> main_reduce([[], [\"b\", \"a\"], [\"c\", \"a\"], [\"b\", \"c\"], [\"a\"]])\n    [['a'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]\n    \"\"\"\n    return list(\n        map(\n            lambda sublist: reduce(\n                lambda acc, item: sorted(acc + [item], key=lambda x: x),\n                sublist,\n                [],\n            ),\n            lists,\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.70703125
    ],
    [
      "from typing import List\n\n\ndef sort_sublists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort each sublist of strings in a given list of lists.\n\n    Args:\n        lists (List[List[str]]): list of lists to be sorted.\n\n    Examples:\n        >>> assert sort_sublists([[\"a\", \"c\", \"e\", \"b\", \"d\"], [\"a\", \"c\", \"e\", \"b\", \"d\"], [\"a\", \"c\", \"e\", \"b\", \"d\"]]) == [[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]\n        >>> assert sort_sublists([[\"e\", \"d\", \"b\", \"c\", \"a\"], [\"e\", \"d\", \"b\", \"c\", \"a\"], [\"e\", \"d\", \"b\", \"c\", \"a\"]]) == [[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]\n        >>> assert sort_sublists([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]) == [[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]\n    \"\"\"\n    return [sorted(lst) for lst in lists]\n\n\nif __name__ == \"__main__\":\n    print(sort_sublists([[\"a\", \"c\", \"e\", \"b\", \"d\"], [\"a\", \"c\", \"e\", \"b\", \"d\"], [\"a\", \"c\", \"e\", \"b\", \"d\"]]))\n    print(sort_sublists([[\"e\", \"d\", \"b\", \"c\", \"a\"], [\"e\", \"d\", \"b\", \"c\", \"a\"], [\"e\", \"d",
      4.703125
    ],
    [
      "from problem_1 import insertion_sort\n\n\ndef sort_using_lambda(lists):\n    \"\"\"Sort each sublist of strings in a given list of lists using lambda function.\"\"\"\n    return [sorted(i, key=lambda x: x.lower()) for i in lists]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(sort_using_lambda([['bob', 'otis'], ['tim', 'bob']]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert sort_using_lambda([['bob', 'otis'], ['tim', 'bob']]) == [\n        ['bob', 'otis'], ['bob', 'tim']]\n    assert sort_using_lambda([\n        ['bob', 'otis', 'tim'],\n        ['tim', 'bob'],\n        ['bob', 'tim']\n    ]) == [\n        ['bob', 'otis', 'tim'],\n        ['bob', 'tim'],\n        ['bob', 'tim']\n    ]\n    assert sort_using_lambda([['bob']]) == [['bob']]\n    assert sort_using_lambda([]) == []\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      3.373046875
    ],
    [
      "from functools import reduce\nfrom itertools import chain\n\n\ndef sort_sublists(lst_lst):\n    \"\"\"\n    >>> sort_sublists([['a', 'b', 'c'], ['c', 'a', 'b'], ['b', 'c', 'a']])\n    [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    \"\"\"\n    return list(\n        map(\n            sorted,\n            lst_lst,\n        )\n    )\n\n\ndef sort_sublists_lambda(lst_lst):\n    \"\"\"\n    >>> sort_sublists_lambda([['a', 'b', 'c'], ['c', 'a', 'b'], ['b', 'c', 'a']])\n    [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    \"\"\"\n    return list(\n        map(\n            lambda sublist: sorted(sublist),\n            lst_lst,\n        )\n    )\n\n\ndef sort_sublists_pipe(lst_lst):\n    \"\"\"\n    >>> sort_sublists_pipe([['a', 'b', 'c'], ['c', 'a', 'b'], ['b', 'c', 'a']])\n    [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    \"\"\"\n    return list(\n        reduce(\n            lambda x, y: map(lambda sublist: x.append(sorted(sublist)) or x, y),\n            lst_lst,\n            [],\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.3203125
    ],
    [
      "def sort_list(input_list):\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i], key=lambda x: len(x))\n    return input_list\n\n\nif __name__ == '__main__':\n    print(sort_list([['x', 'y', 'z'], ['c', 'a', 'b'], ['x', 'y']]))",
      2.705078125
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef lamda_sort(lst):\n    return reduce(add, map(sorted, lst))\n\n\nprint(lamda_sort([['cat', 'dog', 'rabbit'], ['fish', 'tiger', 'lion']]))",
      2.455078125
    ],
    [
      "from unittest import TestCase\n\n\ndef sort_sublists(l):\n    return [sorted(sublist) for sublist in l]\n\n\nclass TestSortSublists(TestCase):\n    def test_sublists_sorted(self):\n        self.assertListEqual(\n            sort_sublists([\n                [\"banana\", \"cherry\", \"apple\"],\n                [\"pear\", \"grape\", \"raspberry\"],\n                [\"peach\", \"melon\", \"plum\"]\n            ]), [\n                [\"apple\", \"banana\", \"cherry\"],\n                [\"grape\", \"peach\", \"pear\"],\n                [\"melon\", \"plum\", \"raspberry\"]\n            ]\n        )",
      2.33984375
    ],
    [
      "from typing import List\n\n\ndef sort_lists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sorts each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        lists (List[List[str]]): list of lists to be sorted\n\n    Examples:\n        >>> sort_lists([[4, 3, 2, 1], [1, 2, 3], [\"1\", \"2\", \"3\"]])\n        [['1', '2', '3', '4'], ['1', '2', '3'], ['1', '2', '3']]\n    \"\"\"\n    return list(map(lambda x: sorted(x), lists))\n\n\nif __name__ == \"__main__\":\n    print(sort_lists([[4, 3, 2, 1], [1, 2, 3], [\"1\", \"2\", \"3\"]]))",
      2.265625
    ],
    [
      "from typing import List\n\n\ndef sort_list(lst: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (List[List[str]]): list of lists of strings\n\n    Examples:\n        >>> assert sort_list([['a', 'c', 'e', 'b', 'd'], ['f', 'b'], ['m', 'a', 'a', 'n']]) == [['a', 'b', 'c', 'd', 'e'], ['b', 'f'], ['a', 'a', 'm', 'n']]\n    \"\"\"\n    return sorted(lst, key=lambda x: sorted(x))\n\n\nif __name__ == \"__main__\":\n    print(sort_list([[\"a\", \"c\", \"e\", \"b\", \"d\"], [\"f\", \"b\"], [\"m\", \"a\", \"a\", \"n\"]]))",
      2.0859375
    ],
    [
      "from typing import List\n\n\ndef string_sort(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sorts each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        lists (List[List[str]]): list of lists of strings\n\n    Examples:\n        >>> string_sort([['b', 'a'], ['c', 'b']])\n        [['a', 'b'], ['b', 'c']]\n    \"\"\"\n    return list(map(sorted, lists))\n\n\nif __name__ == \"__main__\":\n    print(string_sort([[\"b\", \"a\"], [\"c\", \"b\"]]))",
      1.6044921875
    ],
    [
      "from functools import reduce\n\n\ndef sort_sublist(arr):\n    return sorted(arr)\n\n\ndef lambda_sort(arr):\n    return reduce(lambda x, y: x + sort_sublist(y), arr, [])\n\n\nprint(lambda_sort([['a', 'b', 'c'], ['e', 'f', 'g'], ['u', 'v', 'w']]))",
      1.5654296875
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef lambda_function(list1, list2):\n    return sorted(list1) + sorted(list2)\n\n\ndef sort_list(lists):\n    return reduce(add, map(lambda x: sorted(x), lists))\n\n\ndef main():\n    list1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(sort_list(list1))\n\n\nif __name__ == '__main__':\n    main()",
      1.5625
    ],
    [
      "def sort_lists(lists):\n    return map(lambda x: sorted(x), lists)\n\nlists = [['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'],\n         ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'],\n         ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p']]\n\nprint(sort_lists(lists))",
      1.046875
    ],
    [
      "from typing import List\n\n\ndef sort_list_of_list_of_strings(list_of_lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort list of lists of strings.\"\"\"\n    return [sorted(list_) for list_ in list_of_lists]\n\n\nif __name__ == \"__main__\":\n    assert sort_list_of_list_of_strings([[\"a\", \"b\", \"c\"], [\"c\", \"d\", \"e\"]]) == [\n        [\"a\", \"b\", \"c\"],\n        [\"c\", \"d\", \"e\"],\n    ]",
      0.837890625
    ],
    [
      "from typing import List\n\n\ndef sort_sublist_using_lambda(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort sublist using lambda function.\n\n    Args:\n        lists (List[List[str]]): list of lists\n\n    Returns:\n        List[List[str]]: sorted list of lists\n    \"\"\"\n    return [sorted(list_) for list_ in lists]\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [\"hello\", \"world\", \"i\", \"am\", \"a\", \"kid\"],\n        [\"dog\", \"cat\", \"mouse\"],\n        [\"red\", \"blue\", \"green\"],\n        [\"one\", \"two\", \"three\", \"four\"],\n    ]\n    print(sort_sublist_using_lambda(lists))",
      0.4638671875
    ],
    [
      "from typing import List\n\n\n# Using lambda\ndef sublist_sort(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]\n\n\n# Using named function\ndef named_function(s: str) -> str:\n    return s\n\n\ndef sublist_sort_using_named_function(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist, key=named_function) for sublist in input_list]\n\n\nif __name__ == \"__main__\":\n    lst: List[List[str]] = [\n        [\"pqr\", \"abc\", \"xyz\"],\n        [\"abcd\", \"xyz\", \"pqr\"],\n        [\"abcd\", \"pqr\", \"xyz\"],\n    ]\n    print(sublist_sort(lst))\n    print(sublist_sort_using_named_function(lst))",
      0.4033203125
    ],
    [
      "from typing import List\n\n\ndef sort_sublists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        lists (List[List[str]]): list of lists of strings\n\n    Examples:\n        >>> assert sort_sublists([[\"A\", \"B\", \"C\"], [\"C\", \"B\", \"A\"], [\"C\", \"A\", \"B\"]]) == [[\"A\", \"B\", \"C\"], [\"A\", \"B\", \"C\"], [\"B\", \"C\", \"A\"]]\n    \"\"\"\n    return [sorted(sublist) for sublist in lists]\n\n\nif __name__ == \"__main__\":\n    print(sort_sublists([[\"A\", \"B\", \"C\"], [\"C\", \"B\", \"A\"], [\"C\", \"A\", \"B\"]]))",
      0.315673828125
    ],
    [
      "from typing import List\n\n\ndef sort_sublist(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sorts sublists of list of strings.\n\n    Args:\n        lists (List[List[str]]): list of lists of strings\n\n    Examples:\n        >>> assert sort_sublist([['b', 'c', 'a'], ['d', 'a', 'b'], ['c', 'd']]) == [['a', 'b', 'c'], ['a', 'b', 'd'], ['c', 'd']]\n    \"\"\"\n    return list(map(lambda sublist: sorted(sublist), lists))\n\n\ndef sort_sublist_inplace(lists: List[List[str]]) -> None:\n    \"\"\"Sorts sublists of list of strings inplace.\n\n    Args:\n        lists (List[List[str]]): list of lists of strings\n\n    Examples:\n        >>> assert sort_sublist_inplace([['b', 'c', 'a'], ['d', 'a', 'b'], ['c', 'd']]) == None\n        >>> assert sort_sublist_inplace([['b', 'c', 'a'], ['d', 'a', 'b'], ['c', 'd']]) == [['a', 'b', 'c'], ['a', 'b', 'd'], ['c', 'd']]\n    \"\"\"\n    for sublist in lists:\n        sublist.sort()\n\n\nif __name__ == \"__main__\":\n    print(sort_sublist([[\"b\", \"c\", \"a\"], [\"d\", \"a\", \"b\"], [\"c\", \"d\"]]))\n    print(sort_sublist_inplace([[\"b\", \"c\", \"a\"], [\"d\", \"a\", \"b\"], [\"c\", \"d\"]]))",
      0.19140625
    ],
    [
      "from functools import reduce\n\ndef sort_sublists(lst):\n    return reduce(lambda sublists, sublist: sublists + [sorted(sublist)], lst, [])\n\ndef main():\n    list_of_lists = [[\"a\", \"e\", \"x\"], [\"b\", \"c\", \"z\"], [\"d\", \"f\", \"y\"]]\n    print(\"List of lists: \" + str(list_of_lists))\n    print(\"Sorted sublists: \" + str(sort_sublists(list_of_lists)))\n\n\nif __name__ == '__main__':\n    main()",
      0.185791015625
    ],
    [
      "from typing import List\n\n\ndef lambda_function(x: str, y: str) -> int:\n    if x == y:\n        return 0\n    return -1 if x < y else 1\n\n\ndef sort_lists(lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sub_list, key=lambda x: lambda_function(x, sub_list[0])) for sub_list in lists]\n\n\nif __name__ == \"__main__\":\n    assert sort_lists([[\"banana\", \"apple\", \"mango\"], [\"grapes\", \"banana\", \"apple\"], [\"mango\", \"banana\", \"date\"]]) == [\n        [\"apple\", \"banana\", \"mango\"],\n        [\"apple\", \"banana\", \"grapes\"],\n        [\"banana\", \"date\", \"mango\"],\n    ]",
      0.1297607421875
    ],
    [
      "from typing import List\n\n\ndef sort_by_lambda(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort each sublist of strings in a given list of lists.\n\n    Args:\n        lists (List[List[str]]): list of lists to sort\n\n    Examples:\n        >>> assert sort_by_lambda([[\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"]]) == [[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]]\n    \"\"\"\n    return [sorted(sub_list, key=lambda x: x) for sub_list in lists]\n\n\nif __name__ == \"__main__\":\n    print(sort_by_lambda([[\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"]]))",
      -0.037109375
    ],
    [
      "from functools import reduce\nfrom operator import add\n\n\ndef sort_sublist(lst):\n    return sorted(lst)\n\n\ndef sort_lists(lst):\n    return reduce(add, map(sort_sublist, lst))\n\n\ndef test_lambda_sort_lists():\n    \"\"\"Test for sort_lists function.\"\"\"\n    assert sort_lists([[4, 3, 5], [100, 30], [4, 2]]) == [3, 4, 5, 100, 30, 4, 2]",
      -0.29052734375
    ],
    [
      "def lambda_function(sublist):\n    return sorted(sublist)\n\ndef sort_sublist(list_of_lists):\n    for i in range(len(list_of_lists)):\n        list_of_lists[i] = lambda_function(list_of_lists[i])\n    return list_of_lists\n\ndef main():\n    list_of_lists = [[\"python\", \"go\", \"ruby\", \"java\"],\n                     [\"c\", \"haskell\", \"kotlin\", \"javascript\"],\n                     [\"swift\", \"sql\", \"php\", \"dart\"]]\n\n    print(sort_sublist(list_of_lists))\n\nif __name__ == \"__main__\":\n    main()",
      -0.4189453125
    ],
    [
      "from functools import reduce\n\n\ndef lambda_sort(lists):\n    return reduce(lambda x, y: x + sorted(y), lists, [])\n\n\nprint(lambda_sort([['apples', 'oranges', 'bananas'],\n                   ['carrots', 'peas', 'cabbages'],\n                   ['tomatoes', 'cucumbers', 'onions']]))",
      -0.49853515625
    ],
    [
      "from functools import reduce\n\n\ndef sort_using_lambda(lists: list) -> list:\n    \"\"\"Sorts sublists of a list of lists using lambda function.\n\n    Args:\n        lists (list): list of lists\n\n    Examples:\n        >>> assert sort_using_lambda([[3, 5, 4], [2, 1], [9, 8, 7, 6]]) == [[3, 4, 5], [1, 2], [6, 7, 8, 9]]\n    \"\"\"\n    return reduce(lambda x, y: x + [sorted(y, key=lambda x: x)], lists, [])\n\n\nif __name__ == \"__main__\":\n    print(sort_using_lambda([[3, 5, 4], [2, 1], [9, 8, 7, 6]]))",
      -0.53662109375
    ],
    [
      "from problem_21 import list_sort\n\ndef sort_lambda(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n    return list(map(lambda x: sorted(x), lst))\n\nif __name__ == '__main__':\n    lst = [['hi', 'hey', 'hello'], ['good', 'goodbye', 'goodbye'], ['bye', 'bye', 'bye']]\n    print(sort_lambda(lst))",
      -0.61767578125
    ],
    [
      "from problem_1 import nested_sort\n\n\ndef main(arr):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n    print(nested_sort(arr))\n\n\nif __name__ == '__main__':\n    list_of_lists = [['a', 'z', 'd', 'f'], ['c', 'x', 'b', 'a'], ['s', 'u', 'a', 'd']]\n    main(list_of_lists)",
      -0.6513671875
    ],
    [
      "from functools import reduce\n\n\ndef sort_lists(lists):\n    return [sorted(i) for i in lists]\n\n\ndef sort_lists_lambda(lists):\n    return list(map(lambda x: sorted(x), lists))\n\n\ndef sort_lists_reduce(lists):\n    return reduce(lambda x, y: sorted(x) + sorted(y), lists)\n\n\nlists = [[\"d\", \"a\", \"b\", \"c\"], [\"e\", \"f\", \"g\", \"h\"], [\"i\", \"j\", \"k\", \"l\"]]\nprint(sort_lists(lists))\nprint(sort_lists_lambda(lists))\nprint(sort_lists_reduce(lists))",
      -0.67333984375
    ],
    [
      "from functools import reduce\nfrom operator import itemgetter\n\n\ndef main():\n    # Example 1\n    list1 = [[\"h\", \"e\", \"l\", \"l\", \"o\"],\n             [\"e\", \"r\", \"t\", \"h\"],\n             [\"h\", \"e\", \"l\", \"l\", \"o\"],\n             [\"e\", \"r\", \"t\", \"h\"]]\n    print(sort_list(list1))\n\n    # Example 2\n    list2 = [[\"h\", \"e\", \"l\", \"l\", \"o\"],\n             [\"e\", \"r\", \"t\", \"h\"],\n             [\"h\", \"e\", \"l\", \"l\", \"o\", \"e\", \"r\", \"t\", \"h\"],\n             [\"e\", \"r\", \"t\", \"h\"]]\n    print(sort_list(list2))\n\n    # Example 3\n    list3 = [[\"h\", \"e\", \"l\", \"l\", \"o\", \"e\", \"r\", \"t\", \"h\"],\n             [\"e\", \"r\", \"t\", \"h\", \"h\", \"e\", \"l\", \"l\", \"o\"],\n             [\"e\", \"r\", \"t\", \"h\", \"h\", \"e\", \"l\", \"l\", \"o\"],\n             [\"e\", \"r\", \"t\", \"h\"]]\n    print(sort_list(list3))\n\n    # Example 4\n    list4 = [[\"h\", \"e\", \"l\", \"l\", \"o\", \"e\", \"r\", \"t\", \"h\"],\n             [\"e\", \"r\", \"t\", \"h\", \"h\", \"e\", \"l\", \"l\", \"o\"],\n             [\"e\", \"r\", \"t\", \"h\", \"h\", \"e\", \"l\", \"l\", \"o\"],\n             [\"e\", \"r\", \"t\", \"h\"]]\n    print(sort_list(list4))\n\n\ndef sort_list(list_of_lists):\n    return list(map(lambda x: sorted(x, key=itemgetter(0)), list_of_lists))\n\n\nif __name__ == '__main__':\n    main()",
      -0.69921875
    ],
    [
      "from itertools import chain\n\n\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: sorted(x))\n\n\nif __name__ == \"__main__\":\n    L = [[\"b\", \"a\", \"c\"], [\"f\", \"e\"], [\"d\", \"g\"]]\n    print(sort_sublists(L))",
      -0.74951171875
    ],
    [
      "from functools import reduce\n\n\ndef lambda_sort(lists):\n    return reduce(lambda x, y: x + [sorted(y)], lists, [])\n\n\nprint(lambda_sort([[\"a\", \"n\", \"b\", \"c\"], [\"e\", \"d\", \"f\"], [\"g\", \"h\", \"z\"]]))",
      -0.79931640625
    ],
    [
      "from functools import reduce\n\ndef sort_sublists(lst):\n    \"\"\"Return sorted sublists.\"\"\"\n    return reduce(lambda x, y: x + [sorted(y)], lst, [])",
      -0.85693359375
    ],
    [
      "def sort_sublist(lst):\n    for i in range(len(lst)):\n        lst[i] = sorted(lst[i], key=lambda x: len(x))\n    return lst\n\n\nlst = [['banana', 'apple', 'orange', 'peach'],\n       ['peach', 'grape', 'apple', 'banana'],\n       ['pear', 'grape', 'banana', 'apple'],\n       ['peach', 'apple', 'orange', 'banana']]\n\nprint(sort_sublist(lst))",
      -0.85693359375
    ],
    [
      "from functools import cmp_to_key\n\n\ndef sort_lambda(list_of_lists):\n    return [sorted(x, key=cmp_to_key(lambda a, b: (a > b) - (a < b))) for x in list_of_lists]\n\n\ndef main():\n    list_of_lists = [[\"h\", \"b\", \"a\", \"d\", \"e\"], [\"h\", \"a\", \"b\", \"c\", \"d\"]]\n    print(sort_lambda(list_of_lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "from typing import List\n\n\ndef sort_list(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        lists (List[List[str]]): given list of lists\n\n    Examples:\n        >>> assert sort_list([['b', 'a', 'c'], ['b', 'a', 'c'], ['b', 'a', 'c']]) == [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    \"\"\"\n    return [[x for x in sorted(l)] for l in lists]\n\n\nif __name__ == \"__main__\":\n    print(sort_list([['b', 'a', 'c'], ['b', 'a', 'c'], ['b', 'a', 'c']]))",
      -0.85693359375
    ],
    [
      "from unittest import TestCase\n\n\ndef lambda_sort(lst):\n    return [sorted(l, key=lambda x: x.lower()) for l in lst]\n\n\nclass TestLambdaSort(TestCase):\n    def test_lambda_sort(self):\n        assert lambda_sort([[\"a\", \"C\", \"b\"], [\"b\", \"A\", \"c\"], [\"c\", \"B\", \"a\"]]) == [\n            [\"a\", \"b\", \"c\"],\n            [\"A\", \"B\", \"c\"],\n            [\"b\", \"C\", \"a\"],\n        ]",
      -0.85693359375
    ],
    [
      "def sort_with_lambda(list_of_lists):\n    return [[item for item in sorted(i)] for i in list_of_lists]\n\n\ndef main():\n    list_of_lists = [\n        [\"M\", \"A\", \"T\", \"H\"],\n        [\"T\", \"O\", \"M\", \"S\"],\n        [\"E\", \"N\", \"D\"],\n        [\"M\", \"Y\", \"S\", \"T\", \"E\", \"M\"]\n    ]\n    print(sort_with_lambda(list_of_lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\n\ndef sort_list(data):\n    return sorted(data)\n\n\ndef main():\n    data = [\n        [\"python\", \"ruby\", \"java\", \"c\"],\n        [\"php\", \"html\", \"c++\"],\n        [\"c#\", \"asm\", \"sql\"]\n    ]\n    result = reduce(lambda x, y: x + y, list(map(sort_list, data)))\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "from itertools import chain\nfrom functools import reduce\nfrom operator import add\n\n\ndef sort_lists(lst):\n    return [sorted(lst[i]) for i in range(len(lst))]\n\n\ndef sort_lists_with_reduce(lst):\n    return reduce(add, (sorted(i) for i in lst))\n\n\ndef sort_lists_with_chain(lst):\n    return list(chain.from_iterable(sorted(i) for i in lst))\n\n\nif __name__ == \"__main__\":\n    lst = [\n        [\"d\", \"c\", \"b\", \"a\"],\n        [\"1\", \"3\", \"2\"],\n        [\"z\", \"x\", \"y\"],\n        [\"h\", \"g\", \"f\", \"i\"],\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"],\n    ]\n    print(sort_lists(lst))\n    print(sort_lists_with_reduce(lst))\n    print(sort_lists_with_chain(lst))",
      -0.85693359375
    ],
    [
      "def lambdasort(lst):\n    return [sorted(i, key=lambda x: len(x)) for i in lst]\n\n\nif __name__ == '__main__':\n    print(lambdasort([[\"d\", \"a\", \"b\", \"e\", \"c\"], [\"d\", \"a\", \"b\", \"e\", \"c\"], [\"d\", \"a\", \"b\", \"e\", \"c\"]]))",
      -0.85693359375
    ],
    [
      "def sort_string_list(lst):\n    for item in lst:\n        item.sort(key=lambda x: x[1])\n    return lst\n\n\ndef main():\n    lst = [\n        ['banana', 'cherry', 'apple'],\n        ['alpha', 'beta', 'gamma'],\n        ['dog', 'cat', 'fish'],\n    ]\n    print(sort_string_list(lst))\n\n\nif __name__ == '__main__':\n    main()",
      -0.85693359375
    ],
    [
      "def sort_list(arr):\n    for i in arr:\n        i.sort()\n\n\narr = [['cat', 'dog', 'fish'], ['dog', 'bird', 'fish'], ['bird', 'cat', 'fish']]\n\nsort_list(arr)\nprint(arr)",
      -0.85693359375
    ],
    [
      "from functools import reduce\n\n\ndef sort_sublists(lst):\n    return reduce(lambda x, y: x + [sorted(y)], lst, [])\n\n\nprint(sort_sublists([[\"python\", \"c\", \"java\"], [\"c\", \"java\", \"kotlin\"], [\"kotlin\", \"python\"]]))",
      -0.85791015625
    ],
    [
      "from typing import List\n\n\ndef sort_using_lambda(lists: List[List[str]]) -> None:\n    \"\"\"Sort sublists of a list of lists using lambda function.\"\"\"\n    for sublist in lists:\n        sublist.sort(key=lambda x: x.lower())\n\n\ndef main():\n    \"\"\"Call the main function.\"\"\"\n    list_of_lists = [\n        [\"a\", \"b\", \"c\"],\n        [\"z\", \"d\", \"e\"],\n        [\"x\", \"y\", \"z\"],\n    ]\n    sort_using_lambda(list_of_lists)\n    print(list_of_lists)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def sort_list(lst):\n    for i in range(len(lst)):\n        lst[i] = sorted(lst[i])\n\n\nif __name__ == '__main__':\n    lst = [['e', 'x', 'c', 'a', 'b'], ['a', 'r', 'd', 'u', 'c'], ['a', 'c', 'o', 'r', 'n']]\n    sort_list(lst)\n    print(lst)",
      -0.85791015625
    ],
    [
      "def list_sort(l):\n    return list(map(lambda x: sorted(x), l))\n\n\nl = [['b', 'a', 'c'], ['z', 'x', 'd'], ['v', 'w', 'y']]\nprint(list_sort(l))",
      -0.85791015625
    ],
    [
      "def sort_sublists(lists):\n    return list(map(lambda sublist: sorted(sublist), lists))\n\nprint(sort_sublists([['apples', 'oranges', 'bananas'], ['carrots', 'peas', 'cabbage'], ['beans', 'zucchini', 'onions', 'tomatoes']]))",
      -0.85791015625
    ],
    [
      "def sort_list_using_lambdas(lst):\n    return [sorted(sub_list, key=lambda x: x.lower()) for sub_list in lst]\n\n\nif __name__ == '__main__':\n    print(sort_list_using_lambdas(['hello', 'goodbye', 'Hello', 'Goodbye']))",
      -0.85791015625
    ],
    [
      "from functools import reduce\n\n\ndef sort_list(l: list) -> list:\n    return reduce(lambda l1, l2: l1 + sorted(l2), l, [])\n\n\ndef main():\n    l = [[\"b\", \"a\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]\n    print(sort_list(l))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def sort_lists(lists):\n    return list(map(lambda x: sorted(x), lists))\n\nlists = [\n    [\"banana\", \"cherry\", \"apple\"],\n    [\"dog\", \"cat\", \"moose\"],\n    [\"alpha\", \"beta\", \"gamma\"]\n]\n\nprint(sort_lists(lists))",
      -0.8583984375
    ],
    [
      "from functools import reduce\n\n\ndef sort_sublists(lists: list) -> list:\n    return list(map(sorted, lists))\n\n\ndef main():\n    print(sort_sublists([[4, 3, 1, 2], [100, 50, 34, 22], [4, 3, 1]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def sort_list_of_lists(lists):\n    \"\"\"Sorts a list of lists using lambda function\"\"\"\n    return [sorted(sublist, key=lambda x: x[0]) for sublist in lists]\n\ndef main():\n    \"\"\"Main function\"\"\"\n    print(sort_list_of_lists([[\"b\", \"a\", \"d\"], [\"f\", \"c\", \"e\"]]))\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "from unittest import TestCase\n\n\ndef sort_list_of_strings(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n\n\nclass TestListOfStrings(TestCase):\n    def test_list_of_strings(self):\n        assert sort_list_of_strings([[\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"], [\"b\", \"c\", \"a\"]]) == [\n            [\"a\", \"b\", \"c\"],\n            [\"a\", \"b\", \"c\"],\n            [\"a\", \"b\", \"c\"],\n        ]",
      -0.8583984375
    ],
    [
      "from functools import reduce\n\n\ndef lamda_function(list_of_lists):\n    return reduce(lambda x, y: x + y, map(lambda x: sorted(x), list_of_lists))\n\n\nprint(lamda_function([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\nprint(lamda_function([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))\nprint(lamda_function([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]))",
      -0.8583984375
    ],
    [
      "def sort_sublists(lst):\n    return list(map(lambda sublist: sorted(sublist), lst))\n\n\nprint(sort_sublists([[3, 5, 2, 1], [4, 1, 2, 3], [2, 1, 3, 5], [5, 3, 2, 1]]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef sort_list_using_lambda(lists: List[list]) -> None:\n    \"\"\"Sort list using lambda function.\"\"\"\n    for list_ in lists:\n        list_.sort(key=lambda string: string.lower())\n\n\ndef main():\n    \"\"\"Call the main function.\"\"\"\n    lists = [\n        [\"a\", \"b\", \"c\"],\n        [\"z\", \"y\", \"x\"],\n        [\"c\", \"b\", \"a\"],\n        [\"x\", \"y\", \"z\"]\n    ]\n    sort_list_using_lambda(lists)\n    print(lists)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "from functools import reduce\n\n\ndef sort_sublists(lists):\n    return reduce(lambda x, y: x + [sorted(y)], lists, [])\n\n\nif __name__ == \"__main__\":\n    print(sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
      -0.8583984375
    ],
    [
      "from typing import List\n\n\ndef sort_sublist(data: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        data (List[List[str]]): list of list of strings\n\n    Examples:\n        >>> assert sort_sublist([['pqr', 'abc', 'xyz'], ['ab', 'cd'], ['w', 'x', 'y', 'z']]) == [['abc', 'pqr', 'xyz'], ['ab', 'cd'], ['w', 'x', 'y', 'z']]\n    \"\"\"\n    return [sorted(sublist) for sublist in data]\n\n\nif __name__ == \"__main__\":\n    print(sort_sublist([[\"pqr\", \"abc\", \"xyz\"], [\"ab\", \"cd\"], [\"w\", \"x\", \"y\", \"z\"]]))",
      -0.85888671875
    ],
    [
      "from operator import itemgetter\n\n\ndef sort_lists(lists):\n    for i in range(len(lists)):\n        lists[i] = sorted(lists[i], key=lambda s: s.lower())\n    return lists\n\n\nif __name__ == '__main__':\n    lists = [\n        ['a', 'b', 'c'],\n        ['c', 'a', 'b'],\n        ['b', 'c', 'a'],\n        ['a', 'b', 'c'],\n        ['b', 'c', 'a']\n    ]\n    print(sort_lists(lists))",
      -0.85888671875
    ],
    [
      "def sort_list(list_of_lists):\n    return [sorted(list_of_lists[i]) for i in range(len(list_of_lists))]\n\n\nif __name__ == '__main__':\n    print(sort_list([[4, 3, 5, 1, 2], [2, 1, 5, 3, 4], [3, 2, 1, 4, 5], [3, 2, 4, 1, 5]]))",
      -1.0302734375
    ],
    [
      "from typing import List, Any\n\n\ndef sort_sublists(lists: List[List[Any]]) -> List[List[Any]]:\n    \"\"\"Sort each sublist of strings in a given list of lists.\n\n    Args:\n        lists (List[List[Any]]): list of lists\n\n    Examples:\n        >>> assert sort_sublists([[], [], []]) == [['', '', ''], ['', '', ''], ['', '', '']]\n        >>> assert sort_sublists([['c', 'a', 'b'], ['a', 'd', 'b', 'e'], ['b', 'd']]) == [['a', 'b', 'c'], ['a', 'b', 'd', 'e'], ['b', 'd']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lists]\n\n\nif __name__ == \"__main__\":\n    print(sort_sublists([[], [], []]))\n    print(sort_sublists([['c', 'a', 'b'], ['a', 'd', 'b', 'e'], ['b', 'd']]))",
      -1.1083984375
    ],
    [
      "from typing import List\n\n\ndef lamda_sort(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sorts a list of lists of strings.\n\n    Args:\n        lists (List[List[str]]): list of lists of strings\n\n    Examples:\n        >>> lamda_sort([[1, 2, 3], [2, 1, 2], [3, 1, 2]])\n        [['1', '2', '3'], ['1', '2', '2'], ['2', '1', '3']]\n\n    Returns:\n        List[List[str]]: list of sorted lists of strings\n    \"\"\"\n    return list(\n        map(lambda x: sorted(x, key=lambda y: y), lists)\n    )\n\n\nif __name__ == \"__main__\":\n    print(lamda_sort([[1, 2, 3], [2, 1, 2], [3, 1, 2]]))",
      -1.1484375
    ],
    [
      "from functools import reduce\n\n\ndef sort_list_of_strings(list_of_lists):\n    return [reduce(lambda x, y: x + y, sorted(list_of_lists[i])) for i in range(len(list_of_lists))]\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_strings([[\"a\", \"f\", \"b\", \"e\", \"c\"], [\"d\", \"v\", \"r\", \"g\", \"w\", \"p\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]))",
      -1.2607421875
    ],
    [
      "from typing import List\n\n\ndef sort_sublists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Return sorted sublists of given list of lists.\n\n    Examples:\n        >>> assert sort_sublists([[\"abc\", \"cde\", \"fgh\"], [\"cba\", \"edc\", \"ghi\"]]) == [[\"abc\", \"cde\", \"fgh\"], [\"ghi\", \"cba\", \"edc\"]]\n    \"\"\"\n    return [sorted(sublist) for sublist in lists]\n\n\nif __name__ == \"__main__\":\n    print(sort_sublists([[\"abc\", \"cde\", \"fgh\"], [\"cba\", \"edc\", \"ghi\"]]))",
      -1.306640625
    ],
    [
      "from functools import reduce\n\n\ndef sort_list(lst):\n    return reduce(lambda x, y: x + y, sorted(lst))\n\n\nif __name__ == '__main__':\n    print(sort_list([['john', 'tom', 'jack'], ['jack', 'john'], ['jane', 'john', 'tom']]))",
      -1.5556640625
    ],
    [
      "from functools import reduce\n\n\ndef lambda_func(x, y):\n    return x if x < y else y\n\n\ndef sort_sublists(lst):\n    return [sorted(x) for x in lst]\n\n\ndef sort_sublists_using_reduce(lst):\n    return [reduce(lambda x, y: x if x < y else y, x) for x in lst]\n\n\nif __name__ == \"__main__\":\n    l = [\n        ['a', 'd', 'c', 'b'],\n        ['c', 'd', 'b', 'a'],\n        ['d', 'b', 'a', 'c'],\n        ['d', 'b', 'a', 'c'],\n        ['d', 'a', 'b', 'c']\n    ]\n    print(sort_sublists(l))\n    print(sort_sublists_using_reduce(l))",
      -1.6591796875
    ],
    [
      "from typing import List\n\n\ndef sort_sublists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort sublists of strings.\n\n    Args:\n        lists (List[List[str]]): list of lists of strings\n\n    Examples:\n        >>> assert sort_sublists([[\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"], [\"a\", \"c\", \"b\"]]) == [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n    \"\"\"\n    return [sorted(sublist, key=lambda x: x) for sublist in lists]\n\n\nif __name__ == \"__main__\":\n    print(sort_sublists([[\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"], [\"a\", \"c\", \"b\"]]))",
      -1.7890625
    ],
    [
      "from functools import reduce\nfrom operator import itemgetter\n\n\ndef sort_list(lst):\n    return reduce(\n        lambda x, y: x + [sorted(y, key=itemgetter(1))], lst, []\n    )\n\n\ndef main():\n    print(sort_list([[\"a\", \"c\", \"e\", \"b\", \"d\"], [\"f\", \"d\", \"a\", \"e\", \"b\"], [\"b\", \"c\"]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.8037109375
    ],
    [
      "from itertools import chain\n\n\ndef sort_sublist_lambda(lists: list) -> list:\n    \"\"\"Sort each sublist of strings in a given list of lists using lambda function.\n\n    Args:\n        lists (list): list of lists\n\n    Returns:\n        list: sorted lists\n    \"\"\"\n    return sorted(lists, key=lambda x: sorted(x))\n\n\ndef main():\n    \"\"\"The main function of the program.\n\n    Returns:\n        None: prints the program output to console.\n    \"\"\"\n    lists = [\n        [\"M\", \"B\", \"Z\"],\n        [\"A\", \"B\", \"C\", \"D\"],\n        [\"C\", \"D\", \"E\", \"F\"],\n        [\"G\", \"H\", \"I\", \"J\", \"K\"],\n    ]\n    print(sort_sublist_lambda(lists))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.8134765625
    ],
    [
      "from functools import reduce\n\ndef sort_sublists(list_of_lists):\n    return reduce(lambda x, y: x + [sorted(y)], list_of_lists, [])\n\n\nprint(sort_sublists([[\"e\", \"x\", \"a\", \"m\", \"p\", \"l\", \"e\"], [\"e\", \"x\", \"a\", \"m\", \"p\", \"l\", \"e\"], [\"e\", \"x\", \"a\", \"m\", \"p\", \"l\", \"e\"]]))",
      -1.859375
    ],
    [
      "from typing import List\n\n\ndef sort_sublists_using_lambda(lists: List[List[str]]) -> None:\n    \"\"\"Sort sublists of lists using lambda function.\"\"\"\n    for list_ in lists:\n        list_.sort(key=lambda item: item.lower())\n\n\nlists = [\n    ['banana', 'Orange', 'Kiwi', 'cherry'],\n    ['C', 'F', 'A', 'z'],\n    ['Banana', 'Kiwi', 'Cherry', 'Orange'],\n]\nsort_sublists_using_lambda(lists)\nprint(lists)",
      -2.1640625
    ],
    [
      "from functools import reduce\n\n\ndef sort_sublists(lists):\n    return [sorted(lst) for lst in lists]\n\n\ndef sort_sublists_by_reduce(lists):\n    return reduce(lambda x, y: sorted(x) + sorted(y), lists)\n\n\nprint(sort_sublists([[1, 2, 3, 5, 6], [1, 2, 3, 5, 6], [1, 2, 3, 5, 6]]))\nprint(sort_sublists_by_reduce([[1, 2, 3, 5, 6], [1, 2, 3, 5, 6], [1, 2, 3, 5, 6]]))",
      -2.205078125
    ],
    [
      "def get_list():\n    \"\"\"return a list of lists\"\"\"\n    return [\n        ['python', 'go', 'r', 'ruby', 'java'],\n        ['sql', 'oracle', 'mysql'],\n        ['c', 'c++', 'java', 'go', 'python']\n    ]\n\ndef sort_list_of_lists(lst):\n    return [sorted(i) for i in lst]\n\n\n\nif __name__ == '__main__':\n    lst = get_list()\n    print(sort_list_of_lists(lst))",
      -2.4375
    ],
    [
      "from functools import reduce\n\n\ndef lamda_func(x, y):\n    return x + y\n\n\ndef lambda_func_2(x, y):\n    return x * y\n\n\ndef lambda_func_3(x, y):\n    return x - y\n\n\ndef lambda_func_4(x, y):\n    return x / y\n\n\ndef lambda_func_5(x, y):\n    return x % y\n\n\ndef lambda_func_6(x, y):\n    return x ** y\n\n\ndef lambda_func_7(x, y):\n    return x // y\n\n\ndef lambda_func_8(x, y):\n    return x << y\n\n\ndef lambda_func_9(x, y):\n    return x >> y\n\n\ndef lambda_func_10(x, y):\n    return x & y\n\n\ndef lambda_func_11(x, y):\n    return x | y\n\n\ndef lambda_func_12(x, y):\n    return x ^ y\n\n\ndef lambda_func_13(x, y):\n    return x < y\n\n\ndef lambda_func_14(x, y):\n    return x <= y\n\n\ndef lambda_func_15(x, y):\n    return x > y\n\n\ndef lambda_func_16(x, y):\n    return x >= y\n\n\ndef lambda_func_17(x, y):\n    return x == y\n\n\ndef lambda_func_18(x, y):\n    return x != y\n\n\ndef lambda_func_19(x, y):\n    return x.upper()\n\n\ndef lambda_func_20(x, y):\n    return x.lower()\n\n\ndef lambda_func_21(x, y):\n    return x.split()\n\n\ndef lambda_func_22(x, y):\n    return x.strip()\n\n\ndef lambda_func_23(x, y):\n    return x.replace(\" \", \"\")\n\n\ndef lambda_func_24(x, y):\n    return x.isdigit()",
      -2.572265625
    ],
    [
      "from typing import List\n\n\ndef get_sorted_list(lst: List[str]) -> List[str]:\n    return sorted(lst)\n\n\ndef main():\n    list_of_lists = [\n        [\"e\", \"a\", \"f\", \"c\", \"b\", \"d\"],\n        [\"f\", \"b\", \"j\", \"h\", \"g\", \"i\"],\n        [\"d\", \"r\", \"l\", \"u\", \"k\", \"c\", \"e\", \"a\", \"q\", \"w\", \"x\", \"z\", \"s\"],\n    ]\n    sorted_list_of_lists = list(map(get_sorted_list, list_of_lists))\n    print(sorted_list_of_lists)\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.720703125
    ],
    [
      "from functools import reduce\n\n\ndef sort_strings(lst):\n    return reduce(lambda x, y: x + y, sorted(lst, key=lambda x: x))\n\n\nif __name__ == \"__main__\":\n    print(sort_strings([\"b\", \"a\", \"c\"]))\n    print(sort_strings([\"b\", \"a\", \"c\", \"d\"]))\n    print(sort_strings([\"b\", \"a\", \"c\", \"d\", \"e\"]))",
      -3.41796875
    ],
    [
      "from functools import reduce\n\n\ndef sort_with_lambdas(lists):\n    return reduce(\n        lambda x, y: [sorted(i) for i in x] + [sorted(i) for i in y],\n        lists,\n    )\n\n\nif __name__ == \"__main__\":\n    lists = [[\"a\", \"d\", \"c\"], [\"f\", \"e\"], [\"b\"]]\n    print(sort_with_lambdas(lists))",
      -3.525390625
    ],
    [
      "from typing import List\n\n\n# O(n) time | O(n) space\ndef sort_sublist_with_lambdas(lists: List[List[str]]) -> List[List[str]]:\n    for i in range(len(lists)):\n        lists[i].sort(key=lambda s: s.lower())\n    return lists\n\n\n# O(n) time | O(n) space\ndef sort_sublist_with_lambdas_in_place(lists: List[List[str]]) -> None:\n    for sublist in lists:\n        sublist.sort(key=lambda s: s.lower())\n\n\nif __name__ == \"__main__\":\n    print(sort_sublist_with_lambdas(\n        [[\"banana\", \"Orange\", \"Kiwi\", \"cherry\"], [\"C\", \"B\", \"A+\", \"A\", \"A-\"]]))\n    print(sort_sublist_with_lambdas_in_place(\n        [[\"banana\", \"Orange\", \"Kiwi\", \"cherry\"], [\"C\", \"B\", \"A+\", \"A\", \"A-\"]]))",
      -3.732421875
    ],
    [
      "from functools import reduce\n\n\ndef lambda_sort(lists):\n    return [sorted(i) for i in lists]\n\n\ndef lambda_sort_reduced(lists):\n    return reduce(lambda x, y: sorted(x) + sorted(y), lists)\n\n\nlists = [['p', 'q', 'r', 'z', 'c'], ['a', 'b', 'c', 'd', 'e', 'f']]\nprint(lambda_sort(lists))\nprint(lambda_sort_reduced(lists))",
      -3.798828125
    ],
    [
      "from functools import reduce\nfrom operator import itemgetter\n\n\ndef sort_sublists(arr):\n    return list(map(lambda x: sorted(x), arr))\n\n\ndef sort_sublists_lambda(arr):\n    return list(map(lambda x: sorted(x), arr))\n\n\ndef sort_sublists_reduce(arr):\n    return list(reduce(lambda x, y: x + y, map(lambda x: sorted(x), arr)))\n\n\ndef sort_sublists_lambda_reduce(arr):\n    return list(reduce(lambda x, y: x + y, map(lambda x: sorted(x), arr)))\n\n\ndef sort_sublists_itemgetter(arr):\n    return list(map(itemgetter(0), sorted(arr)))\n\n\nif __name__ == \"__main__\":\n    data = [\n        [\"c\", \"b\", \"a\"],\n        [\"c\", \"b\", \"a\"],\n        [\"c\", \"b\", \"a\"],\n        [\"c\", \"b\", \"a\"],\n    ]\n    print(sort_sublists(data))\n    print(sort_sublists_lambda(data))\n    print(sort_sublists_reduce(data))\n    print(sort_sublists_lambda_reduce(data))\n    print(sort_sublists_itemgetter(data))",
      -3.880859375
    ],
    [
      "from problem_1 import insertion_sort\nfrom problem_1 import merge_sort\n\n\ndef sort_sublists(lists):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n    for i in range(len(lists)):\n        lists[i] = insertion_sort(lists[i])\n    return lists\n\n\ndef sort_sublists_2(lists):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n    for i in range(len(lists)):\n        lists[i] = merge_sort(lists[i])\n    return lists",
      -4.4765625
    ],
    [
      "from functools import reduce\nfrom operator import itemgetter\n\n\ndef lambda_function(x):\n    return sorted(x, key=itemgetter(0))\n\n\ndef lambda_function_2(x):\n    return sorted(x, key=lambda x: x[0])\n\n\ndef lambda_function_3(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_4(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_5(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_6(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_7(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_8(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_9(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_10(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_11(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_12(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_13(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_14(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_15(x):\n    return sorted(x, key=lambda x: x[0], reverse=True)\n\n\ndef lambda_function_16(x):\n    return sorted(x, key=lambda x",
      -4.55859375
    ],
    [
      "from functools import reduce\n\n\ndef sort_list(list_of_lists):\n    return reduce(lambda a, b: a + sorted(b, key=lambda x: x[0]), list_of_lists, [])\n\n\n# test\nlist_of_lists = [['e', 'x', 'a', 'm', 'p', 'l', 'e'],\n                 ['h', 'a', 'c', 'k', 'e', 'r', 'r', 'f', 'u', 'l'],\n                 ['l', 'a', 'z', 'y', 'i', 'a'],\n                 ['s', 'a', 'v', 'a', 'd', 'u'],\n                 ['b', 'a', 'l', 'a', 'j', 'a'],\n                 ['a', 'c', 'h', 'i', 'r', 'e', 's'],\n                 ['p', 'a', 'r', 't', 'n', 'i', 'p', 'e'],\n                 ['e', 'y', 'e', 's', 's', 'e', 'e', 'r'],\n                 ['f', 'a', 'r', 'm', 'e', 'a', 's'],\n                 ['h', 'a', 'z', 'e', 'r', 'd'],\n                 ['a', 'n', 't', 'e', 'n', 'd', 'e', 'd'],\n                 ['l', 'a', 't', 'e', 'x', 'e', 's'],\n                 ['g', 'r', 'e', 'e', 'n', 'a', 'd'],\n                 ['m', 'a', 'd', 'e', 's', 'e', 'a', 's'],\n                 ['f', 'i', 'r', 'e', 's', 'm', 'a', 'c', 'h', 'i', 'n', 'e']]\n\nprint(sort_list(list_of_lists))",
      -4.94921875
    ],
    [
      "def lambda_function(strings):\n    return lambda x: strings.index(x)\n\n\ndef lambda_function_two(x, y):\n    return strings.index(x) > strings.index(y)\n\n\ndef sort_sublists(lists, strings):\n    for sublist in lists:\n        sublist.sort(key=lambda_function(strings))\n\n\ndef sort_sublists_two(lists, strings):\n    for sublist in lists:\n        sublist.sort(key=lambda_function_two)\n\n\nif __name__ == '__main__':\n    lists = [['a', 'b', 'c'], ['c', 'b', 'a'], ['b', 'a', 'c']]\n    strings = ['a', 'b', 'c']\n    print(lists)\n    sort_sublists(lists, strings)\n    print(lists)\n    sort_sublists_two(lists, strings)\n    print(lists)",
      -5.25
    ],
    [
      "from typing import List\n\n\ndef sort_lists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\"Sort each sublist of strings in a given list of lists.\n\n    Args:\n        lists (List[List[str]]): list of lists\n\n    Examples:\n        >>> assert sort_lists([['a', 'b', 'c'], ['e', 'f', 'g']]) == [['a', 'b', 'c'], ['e', 'f', 'g']]\n        >>> assert sort_lists([['a', 'b', 'c'], ['e', 'f', 'g'], ['h', 'i', 'j']]) == [['a', 'b', 'c'], ['e', 'f', 'g'], ['h', 'i', 'j']]\n        >>> assert sort_lists([['a', 'b', 'c'], ['e', 'f', 'g'], ['h', 'i', 'j'], ['k', 'l', 'm']]) == [['a', 'b', 'c'], ['e', 'f', 'g'], ['h', 'i', 'j'], ['k', 'l', 'm']]\n    \"\"\"\n    return sorted(lists, key=lambda x: sorted(x))\n\n\nif __name__ == \"__main__\":\n    print(sort_lists([['a', 'b', 'c'], ['e', 'f', 'g']]))\n    print(sort_lists([['a', 'b', 'c'], ['e', 'f', 'g'], ['h', 'i', 'j']]))\n    print(sort_lists([['a', 'b', 'c'], ['e', 'f', 'g'], ['h', 'i', 'j'], ['k', 'l', 'm']]))",
      -5.9921875
    ],
    [
      "from functools import reduce\n\n\ndef sort_strings(arr):\n    return reduce(lambda x, y: x + sorted(y), arr, [])\n\n\ndef main():\n    arr = [\n        [\"c\", \"a\", \"d\"],\n        [\"a\", \"b\"],\n        [\"d\", \"a\", \"b\"],\n        [\"c\", \"b\", \"a\"]\n    ]\n    result = sort_strings(arr)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()",
      -6.07421875
    ],
    [
      "from functools import reduce\n\n\ndef sort_lists(lists):\n    return list(map(lambda x: sorted(x), lists))\n\n\ndef sort_lists_using_reduce(lists):\n    return list(reduce(lambda x, y: sorted(x) + sorted(y), lists))\n\n\nlists = [\n    [\"a\", \"e\", \"x\", \"b\", \"d\"],\n    [\"c\"],\n    [\"f\", \"g\"]\n]\n\nassert sort_lists(lists) == [\n    [\"a\", \"b\", \"d\", \"e\", \"x\"],\n    [\"c\"],\n    [\"f\", \"g\"]\n]\n\nassert sort_lists_using_reduce(lists) == [\n    \"a\", \"b\", \"d\", \"e\", \"x\",\n    \"c\",\n    \"f\", \"g\"\n]",
      -6.23828125
    ],
    [
      "def list_of_lists(list_of_lists):\n    \"\"\"\n    >>> list_of_lists([[1, 2, 3], [10, 20, 30]])\n    [[1, 2, 3], [10, 20, 30]]\n    >>> list_of_lists([[10, 20, 30], [1, 2, 3]])\n    [[1, 2, 3], [10, 20, 30]]\n    >>> list_of_lists([[1, 2, 3], [3, 2, 1], [1, 2]])\n    [[1, 2, 3], [1, 2, 3], [1, 2, 2]]\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: sorted(x))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -7.32421875
    ],
    [
      "from functools import reduce\n\n\ndef sort_sublists(lists):\n    return reduce(lambda x, y: x + [sorted(y)], lists, [])\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(sort_sublists([['mis', 'got', 'to'], ['be', 'or'], ['not'], ['to'], ['be']]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert sort_sublists([['mis', 'got', 'to'], ['be', 'or'], ['not'], ['to'], ['be']]) == [\n        ['be', 'be', 'be', 'got', 'to', 'to'],\n        ['be', 'or', 'not'],\n        ['mis'],\n        ['to']]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      -9.71875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}