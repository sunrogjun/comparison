{
  "problem": {
    "task_id": "MBPP/44",
    "prompt": "Write a function that matches a word at the beginning of a string.",
    "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
    "test_list": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ],
    "challenge_test_list": [
      "assert text_match_string(\"foo\")==('Found a match!')"
    ],
    "problem_id": 33
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "import re\n\n\ndef word_beginning(word: str) -> str:\n    \"\"\"Match a word at the beginning of a string.\n\n    Args:\n        word (str): word to match\n\n    Examples:\n        >>> assert word_beginning(\"cat\") == r\"^cat\"\n    \"\"\"\n    return rf\"^{word}\"\n\n\nif __name__ == \"__main__\":\n    print(word_beginning(\"cat\"))",
      14.9921875
    ],
    [
      "import re\n\n\ndef starts_with_word(string, word):\n    pattern = re.compile(r\"^\" + word, re.I)\n    result = pattern.search(string)\n    if result:\n        return True\n    return False\n\n\ndef starts_with_word_2(string, word):\n    return string.startswith(word)\n\n\ndef main():\n    word = \"Hello\"\n    string = \"Hello, World!\"\n    print(starts_with_word(string, word))\n    print(starts_with_word_2(string, word))\n\n\nif __name__ == \"__main__\":\n    main()",
      14.53125
    ],
    [
      "import re\n\n\ndef starts_with_word(text: str, word: str) -> bool:\n    \"\"\"Check if `word` is at the beginning of `text`.\n\n    Args:\n        text: The text to check.\n        word: The word to check.\n\n    Examples:\n        >>> assert starts_with_word(\"abc\", \"a\")\n        >>> assert not starts_with_word(\"abc\", \"b\")\n    \"\"\"\n    pattern = re.compile(r\"^\" + word)\n    return bool(pattern.search(text))\n\n\nif __name__ == \"__main__\":\n    print(starts_with_word(\"abc\", \"a\"))",
      13.046875
    ],
    [
      "def at_beginning(word, sentence):\n    return sentence.startswith(word)\n\n\nif __name__ == '__main__':\n    assert at_beginning('hello', 'hello world') is True, (\n        'Should be True'\n    )\n    assert at_beginning('hello', 'world hello') is False, (\n        'Should be False'\n    )\n    assert at_beginning('Hello', 'hello world') is False, (\n        'Should be False'\n    )\n    assert at_beginning('', 'world hello') is True, (\n        'Should be True'\n    )\n    assert at_beginning('', '') is True, (\n        'Should be True'\n    )\n    print('Passed')",
      11.4609375
    ],
    [
      "import re\n\n\ndef word_begins_with(word):\n    regex = r\"^\" + word\n    return re.compile(regex)\n\n\ndef main():\n    text = \"I am going to write some code\"\n    pattern = word_begins_with(\"I\")\n    match = pattern.search(text)\n    if match:\n        s = match.start()\n        e = match.end()\n        substring = text[s:e]\n        print(substring)\n    else:\n        print(\"Not found\")\n\n\nif __name__ == \"__main__\":\n    main()",
      8.15625
    ],
    [
      "def starts_with_word(string, word):\n    return string.startswith(word)\n\n\ndef starts_with_word_regex(string, word):\n    import re\n    pattern = re.compile(r'^{}'.format(word))\n    return pattern.match(string)\n\n\ndef main():\n    print(starts_with_word(\"python\", \"py\"))\n    print(starts_with_word(\"python\", \"thon\"))\n    print(starts_with_word(\"python\", \"pytho\"))\n    print(starts_with_word(\"python\", \"pytho\"))\n    print(starts_with_word(\"python\", \"python\"))\n\n    print(starts_with_word_regex(\"python\", \"py\"))\n    print(starts_with_word_regex(\"python\", \"thon\"))\n    print(starts_with_word_regex(\"python\", \"pytho\"))\n    print(starts_with_word_regex(\"python\", \"pytho\"))\n    print(starts_with_word_regex(\"python\", \"python\"))\n\n\nif __name__ == '__main__':\n    main()",
      7.93359375
    ],
    [
      "import re\n\n\ndef starts_with_word(string: str, word: str) -> bool:\n    \"\"\"Takes a string and a word and returns True if the word is at the\n    beginning of the string.\n    >>> starts_with_word(\"string\", \"str\")\n    True\n    >>> starts_with_word(\"string\", \"stri\")\n    False\n    >>> starts_with_word(\"string\", \"striNg\")\n    False\n    \"\"\"\n    pattern = f\"^{word}\"\n    regex = re.compile(pattern)\n    return True if re.search(regex, string) else False\n\n\ndef main():\n    with open(\"./data.txt\", \"r\") as file:\n        for line in file.readlines():\n            string, word = line.split(\",\")\n            print(starts_with_word(string, word.strip()))\n\n\nif __name__ == \"__main__\":\n    main()",
      6.47265625
    ],
    [
      "import re\n\n\ndef match_word_beginning(text: str) -> str:\n    \"\"\"\n    >>> match_word_beginning('abc abc')\n    'abc'\n    >>> match_word_beginning('abc.abc')\n    >>> match_word_beginning('.abc')\n    >>> match_word_beginning('abc')\n    'abc'\n    \"\"\"\n    pattern = re.compile(r\"^(\\w+)\")\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      6.18359375
    ],
    [
      "def starts_with_a(word):\n    if word[0].lower() == \"a\":\n        return True\n    return False\n\n\ndef starts_with_a_regex(word):\n    import re\n    pattern = re.compile(\"^a\")\n    match = pattern.search(word)\n    return match is not None\n\n\ndef starts_with_a_regex2(word):\n    import re\n    pattern = re.compile(\"^a.*\")\n    match = pattern.search(word)\n    return match is not None\n\n\ndef main():\n    print(starts_with_a(\"Apple\"))\n    print(starts_with_a(\"Banana\"))\n    print(starts_with_a_regex(\"Apple\"))\n    print(starts_with_a_regex(\"Banana\"))\n    print(starts_with_a_regex2(\"Apple\"))\n    print(starts_with_a_regex2(\"Banana\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      5.35546875
    ],
    [
      "import re\n\n\ndef matches_word(text):\n    # \\b means word boundary\n    return re.findall(r\"\\b\\w+\", text)\n\n\ndef test_matches_word():\n    assert matches_word(\"Hi. This is me\") == [\"Hi\", \"This\", \"me\"]\n\n\nif __name__ == \"__main__\":\n    print(matches_word(\"Hi. This is me\"))",
      5.0546875
    ],
    [
      "import re\n\ndef word_beginning(string):\n    \"\"\"Return a regex that matches a word at the beginning of a string.\"\"\"\n    return re.compile(r'\\b{}\\b'.format(string))\n\n\ndef test_word_beginning():\n    \"Test the word_beginning function.\"\n    assert word_beginning(\"test\").search('test string')\n    assert word_beginning(\"test\").search('The test string')\n    assert word_beginning(\"test\").search('test.')\n    assert not word_beginning(\"test\").search('tes')\n    assert not word_beginning(\"test\").search('testest')\n    assert not word_beginning(\"test\").search('test-')\n    assert not word_beginning(\"test\").search('test!')\n\n    assert word_beginning(\"test?\").search('test?')\n    assert word_beginning(\"test?\").search('test? string')\n    assert word_beginning(\"test?\").search('The test? string')\n    assert word_beginning(\"test?\").search('test?.')\n    assert not word_beginning(\"test?\").search('tes')\n    assert not word_beginning(\"test?\").search('testest')\n    assert not word_beginning(\"test?\").search('test-')\n    assert not word_beginning(\"test?\").search('test!')\n\n    assert word_beginning(\"test:\").search('test:')\n    assert word_beginning(\"test:\").search('test: string')\n    assert word_beginning(\"test:\").search('The test: string')\n    assert word_beginning(\"test:\").search('test:.')\n    assert not word_beginning(\"test:\").search('tes')\n    assert not word_beginning(\"test:\").search('testest')\n    assert not word_beginning(\"test:\").search('test-')\n    assert not word_beginning(\"test:\").search('test!')\n\n\nif __name__ == '__main__':\n    test_word_beginning()",
      4.484375
    ],
    [
      "import re\n\n\ndef starts_with_word(text: str, word: str) -> bool:\n    \"\"\"\n    >>> starts_with_word('abcdef', 'abc')\n    True\n    >>> starts_with_word('abcdef', 'bcd')\n    False\n    >>> starts_with_word('abcdef', 'def')\n    False\n    \"\"\"\n    pattern = re.compile(r\"^\" + word)\n    return bool(pattern.match(text))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.1953125
    ],
    [
      "import re\n\ndef starts_with_word(text):\n    pattern = r\"^(\\w+)\"\n    result = re.search(pattern, text)\n    return result[1]\n\nprint(starts_with_word(\"Hello\"))\nprint(starts_with_word(\"Helllo\"))\nprint(starts_with_word(\"He3llo\"))",
      3.955078125
    ],
    [
      "import re\n\n\ndef checkio(text):\n    \"\"\"\n        returns True if text begins with a word and False if not\n    \"\"\"\n    # your code here\n    regex = re.compile(r'^\\w+')\n    result = regex.search(text)\n    return result is not None\n\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    assert checkio(\"Hello World\") == True, \"Hello\"\n    assert checkio(\"World\") == False, \"No Hello\"\n    assert checkio(\"\") == False, \"Empty\"\n    assert checkio(\"  \") == False, \"Empty\"",
      3.3359375
    ],
    [
      "import re\n\ndef starts_with_word(string, word):\n    \"\"\"Returns True if the given string starts with the given word.\"\"\"\n    match = re.match(r'^' + word, string)\n    return match is not None\n\ndef starts_with_word(string, word):\n    \"\"\"Returns True if the given string starts with the given word.\"\"\"\n    return string.startswith(word)\n\nprint(starts_with_word(\"Python is great!\", \"Py\"))",
      3.3203125
    ],
    [
      "import re\n\ndef word_begin(word):\n    regex = r\"^\" + word + r\"\\b\"\n    return regex\n\nprint(word_begin(\"dog\"))\n# ^dog\\b\n\n\"\"\"\nThe carot (^) matches the start of the string, and the backspace (\\b) matches a word boundary.\n\"\"\"\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\n\ndef word_end(word):\n    regex = r\"\\b\" + word + r\"$\"\n    return regex\n\nprint(word_end(\"dog\"))\n# \\bdog$\n\n\"\"\"\nThe backspace (\\b) matches a word boundary, and the dollar ($) matches the end of the string.\n\"\"\"\n\n\"\"\"\nWrite a function that matches a word that is not at the beginning or end of a string.\n\"\"\"\n\ndef word_mid(word):\n    regex = r\"\\b\" + word + r\"\\b\"\n    return regex\n\nprint(word_mid(\"dog\"))\n# \\bdog\\b\n\n\"\"\"\nThe backspace (\\b) matches a word boundary, and the word boundary is not matched at the beginning or end of the string.\n\"\"\"",
      3.212890625
    ],
    [
      "import re\n\ndef word_begin(string):\n    \"\"\"\n    >>> word_begin(\"^abc\")\n    True\n    >>> word_begin(\"^abcdef\")\n    True\n    >>> word_begin(\"^def\")\n    False\n    >>> word_begin(\"^123abc\")\n    False\n    >>> word_begin(\"abc^123\")\n    False\n    >>> word_begin(\"abc\")\n    False\n    >>> word_begin(\"123abc\")\n    False\n    >>> word_begin(\"abc123\")\n    False\n    \"\"\"\n    pattern = re.compile(r\"^\\w\")\n    if pattern.match(string):\n        return True\n    return False\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      2.869140625
    ],
    [
      "import re\n\ndef beginning_with_word(s, w):\n    return re.match(r'^'+w, s)\n\n#Tests\ndef test(s, w):\n    print(beginning_with_word(s, w))\n\ntest(\"Hello, how are you?\", \"Hello\")\n# <_sre.SRE_Match object; span=(0, 5), match='Hello'>\n\ntest(\"Hello, how are you?\", \"you\")\n# None\n\ntest(\"Hello, how are you?\", \"ell\")\n# None\n\ntest(\"Hello, how are you?\", \"ell\")\n# None",
      2.744140625
    ],
    [
      "import re\n\n\ndef match_word(string: str) -> bool:\n    \"\"\"Check if a string starts with a word.\n\n    Args:\n        string (str): input string.\n\n    Examples:\n        >>> assert match_word('cat')\n        >>> assert not match_word('cat dog')\n        >>> assert not match_word('cat dog')\n    \"\"\"\n    pattern = re.compile(r\"^\\w+\")\n    result = re.search(pattern, string)\n    return bool(result)\n\n\nif __name__ == \"__main__\":\n    print(match_word(\"cat\"))",
      2.3671875
    ],
    [
      "import re\n\n\ndef starts_with_word(string):\n    \"\"\"\n    >>> starts_with_word('word')\n    True\n    >>> starts_with_word('   word')\n    True\n    >>> starts_with_word('word ')\n    False\n    >>> starts_with_word('   word   ')\n    False\n    \"\"\"\n    return bool(re.match(r'\\b\\w+', string))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      2.3125
    ],
    [
      "import re\n\n\ndef match_beginning(string):\n    return bool(re.match(r\"^word\", string))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(match_beginning('word'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert match_beginning('word') == True\n    assert match_beginning('Word') == False\n    assert match_beginning('w') == False\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      2.16015625
    ],
    [
      "import re\n\n\ndef starts_with_word(string):\n    \"\"\"\n    >>> starts_with_word('apple')\n    True\n    >>> starts_with_word('banana')\n    False\n    \"\"\"\n    return bool(re.match(r\"^\\w\", string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.84765625
    ],
    [
      "import re\n\ndef is_word_beginning(text, word):\n    \"\"\"Return True if word is at the beginning of text.\"\"\"\n    pattern = re.compile(r\"\\b\" + word + r\"\\b\")\n    return pattern.search(text)\n\n\ndef test_is_word_beginning():\n    \"\"\"Test is_word_beginning.\"\"\"\n    assert is_word_beginning(\"Python is fun!\", \"Python\")\n    assert is_word_beginning(\"Python is fun!\", \"python\")\n    assert not is_word_beginning(\"Python is fun!\", \"fun\")\n    assert not is_word_beginning(\"Python is fun!\", \"fun!\")\n    assert not is_word_beginning(\"Python is fun!\", \"nope\")\n    assert not is_word_beginning(\"Python is fun!\", \"not\")\n    assert not is_word_beginning(\"Python is fun!\", \"not!\")\n\n\nif __name__ == '__main__':\n    test_is_word_beginning()",
      1.7138671875
    ],
    [
      "import re\n\ndef word_begins_at(word, string):\n    return re.match(r'^{}'.format(word), string)\n\ndef test_word_begins_at():\n    assert word_begins_at('hi', 'hi there')\n    assert not word_begins_at('hi', 'there hi')\n    assert word_begins_at('hi', 'hi')\n    assert not word_begins_at('hi', 'bye')\n    assert not word_begins_at('hi', '')\n\nif __name__ == '__main__':\n    test_word_begins_at()",
      1.474609375
    ],
    [
      "import re\n\ndef word_beginning(word):\n\n    pattern = re.compile(f'^{word}\\w*')\n    return pattern\n\n\nassert(word_beginning('hello') == re.compile(r'^hello\\w*'))\n\n\n\"\"\"\nWrite a function that matches a word at the end of a string.\n\"\"\"\n\nimport re\n\ndef word_end(word):\n\n    pattern = re.compile(f'\\w*{word}$')\n    return pattern\n\n\nassert(word_end('hello') == re.compile(r'\\w*hello$'))\n\n\n\"\"\"\nWrite a function that matches a word inside a string.\n\"\"\"\n\nimport re\n\ndef word_middle(word):\n\n    pattern = re.compile(f'\\w*{word}\\w*')\n    return pattern\n\n\nassert(word_middle('hello') == re.compile(r'\\w*hello\\w*'))",
      1.439453125
    ],
    [
      "import re\n\n\ndef is_word_beginning(text: str) -> bool:\n    \"\"\"Check if word starts the text.\n\n    Args:\n        text (str): target text.\n\n    Examples:\n        >>> assert is_word_beginning('word')\n        >>> assert not is_word_beginning('  word')\n        >>> assert not is_word_beginning('word ')\n        >>> assert is_word_beginning('word word')\n        >>> assert not is_word_beginning('  word word')\n        >>> assert not is_word_beginning('word word  ')\n    \"\"\"\n    pattern = re.compile(r\"^\\w\")\n    result = re.search(pattern, text)\n    return bool(result)\n\n\nif __name__ == \"__main__\":\n    print(is_word_beginning(\"word\"))",
      1.12890625
    ],
    [
      "import re\n\n\ndef checkio(data):\n    # search(pattern, string, flags=0)\n    # match(pattern, string, flags=0)\n    # findall(pattern, string, flags=0)\n    # finditer(pattern, string, flags=0)\n    # sub(pattern, repl, string, count=0, flags=0)\n    return re.search(r'^(\\w+)', data)\n\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    assert checkio(\"Hello World!\") == 'Hello'\n    assert checkio(\"Hello World hello\") == 'Hello'\n    assert checkio(\"HELLO WORLD HELLO\") == 'HELLO'\n    assert checkio(\"!HELLO WORLD! HELLO\") == 'HELLO'\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")",
      0.9833984375
    ],
    [
      "import re\n\n\ndef starts_with_word(string):\n    \"\"\"\n    >>> starts_with_word('word')\n    True\n    >>> starts_with_word('sword')\n    False\n    \"\"\"\n    pattern = re.compile(r\"^word\")\n    return pattern.search(string) is not None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.91064453125
    ],
    [
      "import re\n\ndef match_at_beginning(text):\n    return re.findall(r\"^[A-Za-z]+\", text)\n\n\ndef test_match_at_beginning():\n\n    assert match_at_beginning(\"Bite my shiny metal ass\") == ['Bite']\n    assert match_at_beginning(\"This is a test string\") == ['This']\n    assert match_at_beginning(\"123456789\") == []\n    assert match_at_beginning(\"\") == []\n\n\nif __name__ == '__main__':\n    test_match_at_beginning()",
      0.68896484375
    ],
    [
      "import re\n\ndef my_solution(string):\n    return bool(re.match(r'^\\w+', string))\n\ndef rajesh_solution(string):\n    return bool(re.match(r'^\\w*', string))\n\ndef gyahun_dash_solution(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+', string))\n\ndef gyahun_dash_solution_2(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+', string))\n\ndef gyahun_dash_solution_3(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+', string))\n\ndef gyahun_dash_solution_4(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+', string))\n\ndef gyahun_dash_solution_5(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+', string))\n\ndef gyahun_dash_solution_6(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+', string))\n\ndef gyahun_dash_solution_7(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+', string))\n\ndef gyahun_dash_solution_8(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+', string))\n\ndef gyahun_dash_solution_9(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+', string))\n\nimport pytest\n\n@pytest.mark.parametrize(\"string, expected\", [\n    (\"python\", True),\n    (\"\", True),\n    (\"3\", True),\n    (\"-\", True),\n    (\"/\", False),\n    (\"@\", False),\n    (\"Python\", False),\n    (\" \", False),\n    (\"#\", False),",
      0.6572265625
    ],
    [
      "import re\nimport itertools\nfrom toolbox.practice.string_utilities import match_beginning\n\n\ndef match_beginning_regex(word, line):\n    \"\"\"Matches a word at the beginning of a line.\"\"\"\n    pattern = re.compile(f\"^{word}\")\n    match = pattern.search(line)\n    if match:\n        return match.group(0)\n\n\ndef match_beginning_itertools(word, line):\n    \"\"\"Matches a word at the beginning of a line.\"\"\"\n    pattern = itertools.repeat(word, 1)\n    for i, letter in enumerate(line):\n        if letter != word[0]:\n            return line[:i]\n        if i == len(word) - 1:\n            return line[:i + 1]\n\n\nprint(match_beginning(\"python\", \"python is awesome\"))\nprint(match_beginning_regex(\"python\", \"python is awesome\"))\nprint(match_beginning_itertools(\"python\", \"python is awesome\"))",
      0.333251953125
    ],
    [
      "import re\n\ndef match_at_beginning(word, string):\n    pattern = re.compile(r\"^\" + word)\n    return pattern.search(string)\n\ndef test_match_at_beginning():\n    assert match_at_beginning(\"a\", \"a\")\n    assert match_at_beginning(\"a\", \"a,b,c\")\n    assert match_at_beginning(\"a\", \"ab,c\")\n    assert match_at_beginning(\"a\", \"ab\")\n    assert match_at_beginning(\"a\", \"a,b\")\n    assert not match_at_beginning(\"a\", \"b\")\n    assert not match_at_beginning(\"a\", \"ba\")\n    assert not match_at_beginning(\"a\", \"ba,c\")\n    assert not match_at_beginning(\"a\", \"ba,c,d\")\n\nif __name__ == '__main__':\n    test_match_at_beginning()",
      0.25537109375
    ],
    [
      "def beginning_matches(word, string):\n    \"\"\"\n    >>> beginning_matches('string', 'string')\n    True\n    >>> beginning_matches('string', 'stringing')\n    False\n    \"\"\"\n    return word == string[:len(word)]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()",
      0.1136474609375
    ],
    [
      "def beginning_matches(string, word):\n    return string.startswith(word)\n\n\nif __name__ == '__main__':\n    print(beginning_matches('Hello world!', 'Hello'))\n    print(beginning_matches('Hello world!', 'hey'))",
      0.10235595703125
    ],
    [
      "import re\n\ndef word_begins(string):\n    regex = r\"^\\w+\"\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return match.group()\n    else:\n        return None\n\nprint(word_begins(\"The dog is sleeping\"))\nprint(word_begins(\"Dog sleeping\"))",
      0.03521728515625
    ],
    [
      "import re\n\n\ndef match_word_beginning(text: str, pattern: str) -> bool:\n    \"\"\"\n\n    :param text: str to search\n    :param pattern: pattern to match\n    :return: True if pattern matches beginning of text\n\n    >>> match_word_beginning('hello world', 'hello')\n    True\n    >>> match_word_beginning('hello world', 'hello ')\n    False\n    >>> match_word_beginning('hello world', 'hello*')\n    True\n    >>> match_word_beginning('hello world', 'hello* ')\n    False\n    >>> match_word_beginning('hello world', 'hello**')\n    False\n    >>> match_word_beginning('hello world', '[hello]')\n    False\n    >>> match_word_beginning('hello world', '[hello] ')\n    False\n    \"\"\"\n    return bool(re.match(rf\"^({pattern})\", text))\n\n\ndef match_word_beginning_regex(text: str, pattern: str) -> bool:\n    \"\"\"\n\n    :param text: str to search\n    :param pattern: pattern to match\n    :return: True if pattern matches beginning of text\n\n    >>> match_word_beginning_regex('hello world', 'hello')\n    True\n    >>> match_word_beginning_regex('hello world', 'hello ')\n    False\n    >>> match_word_beginning_regex('hello world', 'hello*')\n    True\n    >>> match_word_beginning_regex('hello world', 'hello* ')\n    False\n    >>> match_word_beginning_regex('hello world', 'hello**')\n    False\n    >>> match_word_beginning_regex('hello world', '[hello]')\n    False\n    >>> match_word_beginning_regex('hello world', '[hello] ')\n    False\n    \"\"\"\n    return bool(re.match(rf\"^({pattern})\", text))\n\n\ndef main():\n    assert match_word_beginning(\"hello world\", \"hello\") is True\n    assert match_word_beginning(\"hello world\", \"hello \") is False\n    assert match_word_beginning(\"hello world\", \"",
      0.00882720947265625
    ],
    [
      "import re\n\n\ndef word_beginning(text: str) -> str:\n    \"\"\"Returns a word at the beginning of the string.\n\n    >>> word_beginning(\"The quick brown fox jumps over the lazy dog.\")\n    'The'\n    \"\"\"\n    return re.search(r\"\\b\\w+\", text).group()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.027618408203125
    ],
    [
      "import re\n\n\ndef starts_with_word(string: str) -> str:\n    \"\"\"Return the word at the beginning of the string.\n    >>> starts_with_word(\"word\")\n    'word'\n    >>> starts_with_word(\"word text\")\n    'word'\n    >>> starts_with_word(\"1word text\")\n    ''\n    \"\"\"\n    return re.match(r\"\\w+\", string).group(0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.0298919677734375
    ],
    [
      "import re\n\ndef word_beginning(string):\n    pattern = re.compile(r\"\\A\\w\")\n    return pattern.search(string)\n\n#tests\n\ndef word_beginning_test():\n    assert word_beginning(\"Python\") == None\n    assert word_beginning(\"Python is awesome\") != None\n    assert word_beginning(\"9Python\") == None\n    assert word_beginning(\"9Python is awesome\") != None\n    assert word_beginning(\"Python is 18\") != None\n    assert word_beginning(\"Python 3.6\") != None\n    assert word_beginning(\"Python 3.6 is awesome\") != None\n    assert word_beginning(\"Python 3.6 is 18\") != None\n    return True\n\nprint(word_beginning_test())",
      -0.2095947265625
    ],
    [
      "def match_word(word, sentence):\n    return sentence.startswith(word)\n\n\n# TESTS\nassert match_word(\"foo\", \"I am a foo bar\")\nassert not match_word(\"foo\", \"I am a bar foo\")",
      -0.2496337890625
    ],
    [
      "import re\n\ndef match_beginning(text):\n    return bool(re.match(r'^\\w+', text))\n\n\nprint(match_beginning('abba'))\nprint(match_beginning('1234'))",
      -0.257568359375
    ],
    [
      "import re\n\ndef starts_with_word(string, word):\n    \"\"\"Returns a boolean indicating if the string starts with the given word.\"\"\"\n    regex = re.compile(r\"^\\w+\")\n    match = regex.search(string)\n    return match and match.group() == word",
      -0.2998046875
    ],
    [
      "import re\n\ndef word_beginning(s):\n    return re.match(r\"\\w\", s)\n\n# tests\n\nprint(word_beginning(\"\"))  # False\nprint(word_beginning(\"a\")) # True\nprint(word_beginning(\"abc\")) # True\nprint(word_beginning(\"123\")) # False\nprint(word_beginning(\"_a\")) # True\nprint(word_beginning(\"-a\")) # False\nprint(word_beginning(\"a_\")) # True\nprint(word_beginning(\"a-\")) # True\nprint(word_beginning(\"a.\")) # False\nprint(word_beginning(\"a,\")) # False\nprint(word_beginning(\"a:\")) # False\nprint(word_beginning(\"a;\")) # False\nprint(word_beginning(\"a!\")) # False\nprint(word_beginning(\"a?\")) # False\nprint(word_beginning(\"a \")) # False\nprint(word_beginning(\"a\\n\")) # False\nprint(word_beginning(\"a\\t\")) # False\nprint(word_beginning(\"a/\")) # False\nprint(word_beginning(\"a\\\\\")) # False\nprint(word_beginning(\"a\\\"\")) # False\nprint(word_beginning(\"a'\")) # False\nprint(word_beginning(\"a(\")) # False\nprint(word_beginning(\"a)\")) # False\nprint(word_beginning(\"a[\")) # False\nprint(word_beginning(\"a]\")) # False\nprint(word_beginning(\"a{\")) # False\nprint(word_beginning(\"a}\")) # False\nprint(word_beginning(\"a=\")) # False\nprint(word_beginning(\"a|\")) # False\nprint(word_beginning(\"a+\")) # False\nprint(word_beginning(\"a*\")) # False\nprint(word_beginning(\"a^\")) # False\nprint(word_beginning(\"a&\")) # False\nprint(word_beginning(\"a.\")) # False\nprint(word_beginning(\"a<\")) # False\nprint(word_beginning(\"a>\")) # False\nprint(word_beginning(\"a@\")) # False",
      -0.4921875
    ],
    [
      "import re\n\n\ndef starts_with_word(text):\n    \"\"\"Return a regex that matches a word at the beginning of a string.\"\"\"\n    return re.compile(r\"\\b\\w+\")\n\n\ndef main():\n    text = input(\"Enter a string: \")\n    regex = starts_with_word(text)\n    print(f\"The word is {regex.group()}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.5166015625
    ],
    [
      "import re\nimport regex\nfrom regex import match\n\n\ndef word_beginning_match(string: str, word: str) -> bool:\n    return bool(regex.match(f\"^{word}\", string))\n\n\ndef word_beginning_match_2(string: str, word: str) -> bool:\n    return bool(re.match(f\"^{word}\", string))\n\n\ndef word_beginning_match_3(string: str, word: str) -> bool:\n    return bool(match(f\"^{word}\", string))\n\n\ndef word_beginning_match_4(string: str, word: str) -> bool:\n    return bool(match(f\"^{word}\", string, partial=False))\n\n\ndef word_beginning_match_5(string: str, word: str) -> bool:\n    return bool(match(f\"^{word}\", string, partial=False, exact=False))\n\n\ndef word_beginning_match_6(string: str, word: str) -> bool:\n    return bool(match(f\"^{word}\", string, partial=False, exact=False, fullmatch=False))\n\n\ndef word_beginning_match_7(string: str, word: str) -> bool:\n    return bool(match(f\"^{word}\", string, fullmatch=False))\n\n\ndef word_beginning_match_8(string: str, word: str) -> bool:\n    return bool(match(f\"^{word}\", string, fullmatch=False, exact=False))\n\n\ndef word_beginning_match_9(string: str, word: str) -> bool:\n    return bool(match(f\"^{word}\", string, fullmatch=False, exact=False, partial=False))\n\n\ndef word_beginning_match_10(string: str, word: str) -> bool:\n    return bool(match(f\"^{word}\", string, fullmatch=False, exact=False, partial=False, ignorecase=False))\n\n\nif __name__ == \"__main__\":\n    assert word_beginning_match(\"The quick brown fox jumps over the lazy dog.\", \"The\") is True\n    assert word_beginning",
      -0.63818359375
    ],
    [
      "import re\n\ndef is_word_beginning(string, word):\n    pattern = re.compile(r'^' + word)\n    return pattern.search(string)\n\n\ndef main():\n    print(is_word_beginning(\"Python is awesome!\", \"Python\"))\n    print(is_word_beginning(\"Python is awesome!\", \"is\"))\n    print(is_word_beginning(\"Python is awesome!\", \"awesome\"))\n\n\nif __name__ == '__main__':\n    main()",
      -0.67724609375
    ],
    [
      "import re\n\n\ndef is_match_beginning(word, string):\n    pattern = r\"^\" + word\n    if re.match(pattern, string):\n        return True\n    return False\n\n\ndef test_beginning():\n    assert is_match_beginning(\"the\", \"the quick brown fox\")\n    assert is_match_beginning(\"quick\", \"the quick brown fox\")\n    assert is_match_beginning(\"^the\", \"the quick brown fox\")\n    assert is_match_beginning(\"^quick\", \"the quick brown fox\")\n    assert is_match_beginning(\"^brown\", \"the quick brown fox\")\n    assert not is_match_beginning(\"brown\", \"the quick brown fox\")",
      -0.7353515625
    ],
    [
      "import re\n\n\ndef is_word_start(word):\n    return re.match(r\"^\" + word, word)\n\n\ndef test_is_word_start():\n    assert is_word_start(\"cat\")\n    assert not is_word_start(\"dog\")\n    assert not is_word_start(\"c\")\n    assert not is_word_start(\"\")\n    assert is_word_start(\"c\")\n\n\nif __name__ == \"__main__\":\n    test_is_word_start()",
      -0.80810546875
    ],
    [
      "import re\n\n\ndef is_word_beginning(text: str, pattern: str) -> bool:\n    \"\"\"Take a string and a pattern and return True if the pattern is at the beginning of the string.\"\"\"\n    regexp = re.compile(f\"^{pattern}\")\n    return bool(regexp.search(text))\n\n\nif __name__ == \"__main__\":\n    print(is_word_beginning(\"abc\", \"a\"))\n    print(is_word_beginning(\"abc\", \"b\"))\n    print(is_word_beginning(\"abc\", \"c\"))\n    print(is_word_beginning(\"abc\", \"d\"))\n    print(is_word_beginning(\"abc\", \"a\"))",
      -0.85693359375
    ],
    [
      "import re\n\n\ndef word_begin(word):\n    return re.compile(r\"^\" + word)\n\n\ndef test_word_begin():\n    matcher = word_begin(\"test\")\n    assert matcher.match(\"test\")\n    assert not matcher.match(\"testing\")\n    assert matcher.match(\"test1\")\n    assert not matcher.match(\"1test\")",
      -0.85693359375
    ],
    [
      "def starts_with_a_vowel(string):\n    \"\"\"Check if string starts with a vowel.\"\"\"\n    vowels = set('aeiouAEIOU')\n    return string[0] in vowels\n\n\ndef starts_with_a_vowel_regex(string):\n    \"\"\"Check if string starts with a vowel.\"\"\"\n    return bool(re.match(r'[aeiou]', string, re.I))",
      -0.85693359375
    ],
    [
      "import re\n\ndef match_beginning(string):\n    \"\"\"\n    >>> match_beginning(\"^a\")\n    True\n    >>> match_beginning(\"^b\")\n    False\n    \"\"\"\n    pattern = re.compile(r\"^a\")\n    if pattern.match(string):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "import re\n\n\ndef beginning_matches(string, word):\n    \"\"\"Returns True if the word is at the beginning of the string.\"\"\"\n    return bool(re.match(r'^' + word, string))\n\n\ndef main():\n    assert beginning_matches('hello world', 'hello')\n    assert beginning_matches('hello world', 'he') is False\n    assert beginning_matches('hello world', 'wor') is False\n    print('Passed')\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def beginning_matches(string, word):\n    return string.startswith(word)\n\n\ndef beginning_matches_regex(string, word):\n    import re\n    return re.match(f\"^{word}\", string)\n\n\ndef beginning_matches_regex_2(string, word):\n    return string[0:len(word)] == word\n\n\ndef beginning_matches_regex_3(string, word):\n    return string.startswith(word)",
      -0.85693359375
    ],
    [
      "def at_beginning(word, string):\n    return word == string[:len(word)]\n\n\ndef test_at_beginning():\n    assert at_beginning('foo', 'foo bar') is True\n    assert at_beginning('foo', 'bar foo') is False\n    assert at_beginning('foo', 'bar foo bar') is False\n    assert at_beginning('', 'foo') is True",
      -0.85693359375
    ],
    [
      "import re\n\n\ndef matches_word_beginning(text: str) -> str:\n    \"\"\"\n    >>> matches_word_beginning(\"^word\")\n    '^word'\n    >>> matches_word_beginning(\"^word$\")\n    '^word'\n    >>> matches_word_beginning(\"word\")\n    ''\n    >>> matches_word_beginning(\"^word^\")\n    ''\n    >>> matches_word_beginning(\"word^\")\n    ''\n    >>> matches_word_beginning(\"^word$word\")\n    '^word'\n    \"\"\"\n    return re.findall(r\"^word\", text)[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85693359375
    ],
    [
      "def match_beginning_word(word, string):\n    return string.startswith(word)",
      -0.857421875
    ],
    [
      "import re\n\ndef start_word(text):\n    return re.match(r'^\\w', text)\n\nprint(start_word(\"Python\"))\nprint(start_word(\"java\"))\nprint(start_word(\"C++\"))",
      -0.85791015625
    ],
    [
      "import re\n\n\ndef starts_with_word(text: str, word: str) -> bool:\n    \"\"\"Determines if a string starts with a word.\n\n    Args:\n        text (str): The text to search.\n        word (str): The word to match.\n\n    Examples:\n        >>> assert starts_with_word(\"hello world\", \"hello\")\n        >>> assert not starts_with_word(\"hello world\", \"world\")\n    \"\"\"\n    pattern = re.compile(r\"^\\w+\")\n    match = pattern.search(text)\n    return bool(match and match.group() == word)\n\n\nif __name__ == \"__main__\":\n    print(starts_with_word(\"hello world\", \"hello\"))",
      -0.85791015625
    ],
    [
      "import re\n\n\ndef start_word(s):\n    return re.match(r'[a-zA-Z]\\w+', s)\n\n\ndef test_start_word():\n    assert start_word(\"apple\")\n    assert not start_word(\"1apple\")\n    assert start_word(\"fluflu\")\n    assert not start_word(\"fluflu1\")\n    assert start_word(\"A\")\n    assert start_word(\"Banana\")",
      -0.85791015625
    ],
    [
      "import re\n\ndef word_begin(word):\n    return re.match(\"^\"+word, word)\n\nprint(word_begin(\"abc\"))",
      -0.85791015625
    ],
    [
      "import re\n\ndef checkio(words):\n    return re.compile(\"^\"+words).search(words) is not None",
      -0.85791015625
    ],
    [
      "import re\n\ndef starts_with_word(text):\n    pattern = re.compile(r\"^\\w\")\n    return pattern.search(text)\n\nprint(starts_with_word(\"Hello\"))\nprint(starts_with_word(\"12345\"))\nprint(starts_with_word(\"123abc\"))\nprint(starts_with_word(\"ABC123\"))",
      -0.85791015625
    ],
    [
      "def word_beginning(word, string):\n    if string.startswith(word):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(word_beginning('foo', 'foo bar'))",
      -0.85791015625
    ],
    [
      "import re\n\n\ndef starts_with_word(string, word):\n    pattern = r\"^\" + word\n    result = re.search(pattern, string)\n    return result",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef match_at_beginning(regex, string):\n    \"\"\"\n    >>> match_at_beginning(r'^foo', 'foo bar baz')\n    True\n    >>> match_at_beginning(r'^foo', 'bar foo baz')\n    False\n    \"\"\"\n    return bool(re.match(regex, string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "import re\n\ndef starts_with_word(text):\n    \"\"\"Returns True if the text starts with a word.\"\"\"\n    pattern = re.compile(r\"^\\w\")\n    result = pattern.search(text)\n    return result != None\n\nprint(starts_with_word(\"dog\"))\nprint(starts_with_word(\"dog and cat\"))\nprint(starts_with_word(\"42 cat\"))\nprint(starts_with_word(\"dog 12 cat\"))",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef starts_with_word(text):\n    \"\"\"\n    Use regex to match a word at the beginning of a string.\n    \"\"\"\n    pattern = r\"^\\w+\"\n    result = re.search(pattern, text)\n    return result.group()",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef starts_with_word(string, word):\n    \"\"\"\n    >>> starts_with_word('word', 'word')\n    True\n    >>> starts_with_word('word', 'wor')\n    False\n    \"\"\"\n    pattern = re.compile(r\"^{}\".format(word))\n    return bool(pattern.match(string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef starts_with_word(string, word):\n    \"\"\"Returns a regular expression that matches a word at the beginning of a string.\"\"\"\n    regex = r\"^\" + word\n    pattern = re.compile(regex)\n    return pattern.search(string)",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef starts_with_word(text):\n    \"\"\"\n    >>> starts_with_word(\"word\")\n    True\n    >>> starts_with_word(\"   word\")\n    True\n    >>> starts_with_word(\"   word   \")\n    True\n    >>> starts_with_word(\"   word?\")\n    False\n    >>> starts_with_word(\"   word!\")\n    False\n    >>> starts_with_word(\"   word;\")\n    False\n    >>> starts_with_word(\"   word:\")\n    False\n    >>> starts_with_word(\"   word-\")\n    False\n    >>> starts_with_word(\"   word,\")\n    False\n    \"\"\"\n    pattern = re.compile(r\"^[\\w]+\")\n    return bool(pattern.match(text))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "import re\n\ndef starts_with_word(string, word):\n    \"\"\"Return True if string starts with a word.\"\"\"\n    pattern = r\"\\b\" + word + r\"\\b\"\n    result = re.search(pattern, string)\n    return result != None",
      -0.8583984375
    ],
    [
      "def starts_with_a(word: str) -> bool:\n    return word.startswith(\"a\")",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef word_beginning(string):\n    return bool(re.match(r'^\\w', string))",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef starts_with_word(string, word):\n    pattern = r\"^\" + word\n    result = re.search(pattern, string)\n    return result",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef match_at_beginning(string):\n    return re.search(r\"^\" + string + r\"\\b\", string)\n\n\ndef test_match_at_beginning():\n    assert match_at_beginning(\"abc\")\n    assert not match_at_beginning(\"bc\")\n    assert not match_at_beginning(\"ab\")\n    assert not match_at_beginning(\"a\")\n    assert not match_at_beginning(\"\")",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef is_word_at_beginning(text, word):\n    pattern = re.compile(r\"\\b\" + word + r\"\\b\")\n    result = pattern.search(text)\n    return result is not None\n\n\ndef main():\n    print(is_word_at_beginning(\"Hello world!\", \"Hello\"))\n    print(is_word_at_beginning(\"Hello world!\", \"hello\"))\n    print(is_word_at_beginning(\"Hello world!\", \"World\"))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "import re\n\ndef word_begin(word):\n  return re.match(r\"^\" + word, word)\n\n#tests\n\nprint(word_begin(\"foo\"))\nprint(word_begin(\"bar\"))",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef match_word_at_beginning(regex, string):\n    return re.match(regex, string)",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef starts_with_word(string: str) -> bool:\n    \"\"\"Take a string and return a boolean if a word exists at the beginning of the string.\n\n    >>> starts_with_word(\"word\")\n    True\n    >>> starts_with_word(\"   word\")\n    True\n    >>> starts_with_word(\"    word\")\n    False\n    >>> starts_with_word(\"word  \")\n    False\n    >>> starts_with_word(\"word?\")\n    False\n    >>> starts_with_word(\"?word\")\n    False\n    >>> starts_with_word(\"\")\n    False\n    \"\"\"\n    return bool(re.match(r\"^[a-zA-Z]+\", string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "import re\n\n\ndef starts_with_word(text, word):\n    return re.match(r\"\\b\" + word + r\"\\b\", text)",
      -0.86083984375
    ],
    [
      "import re\n\ndef checkio(regex_pattern: str, text: str) -> bool:\n    \"\"\"\n        Check io\n    \"\"\"\n    regex = re.compile(regex_pattern)\n    return bool(regex.match(text))\n\nif __name__ == \"__main__\":\n    print(checkio(\"^Python\", \"Python\"))\n    print(checkio(\"^Python\", \"Python rocks!\"))\n    print(checkio(\"^Python$\", \"Python\"))\n    print(checkio(\"^Python$\", \"Python rocks!\"))\n    print(checkio(\"P..n\", \"Python\"))\n    print(checkio(\"P..n\", \"Java\"))\n    print(checkio(\"P..n\", \"C++\"))",
      -0.923828125
    ],
    [
      "import re\n\ndef word_beginning_string(string):\n    return bool(re.match(r\"\\b\\w+\", string))\n\n# tests\ndef test(string, expected):\n    val = word_beginning_string(string)\n    if val == expected:\n        print(\"Yay. Got:\", val, \"Expected:\", expected)\n    else:\n        print(\"Oh no. Got:\", val, \"Expected:\", expected)\n\ntest(\"hi\", False)\ntest(\"hi there\", False)\ntest(\" bye\", False)\ntest(\" bye \", False)\ntest(\"bye\", True)\ntest(\"bye \", True)\ntest(\"  bye\", True)\ntest(\"bye \", True)\ntest(\"  bye \", True)\ntest(\"bye!\", False)\ntest(\"bye! \", False)\ntest(\"bye?\", False)\ntest(\"bye? \", False)\ntest(\"bye:\", False)\ntest(\"bye: \", False)\ntest(\"bye,\", False)\ntest(\"bye, \", False)\ntest(\"bye;\", False)\ntest(\"bye; \", False)\ntest(\"bye!\", False)\ntest(\"bye! \", False)\ntest(\"bye?\", False)\ntest(\"bye? \", False)\ntest(\"bye:\", False)\ntest(\"bye: \", False)\ntest(\"bye,\", False)\ntest(\"bye, \", False)\ntest(\"bye;\", False)\ntest(\"bye; \", False)",
      -1.169921875
    ],
    [
      "def is_match(word, string):\n    return string.startswith(word)\n\n\ndef test_is_match():\n    \"\"\"\n    >>> all(is_match(w, s) for w, s in [(\"test\", \"test string\"), (\"apple\", \"I like to eat apples\")])\n    True\n    >>> all(is_match(w, s) for w, s in [(\"test\", \"test! string\"), (\"apple\", \"I like to eat apples!\")])\n    False\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -1.251953125
    ],
    [
      "import re\n\ndef match_beginning_word(text):\n    \"\"\"Returns a regex match object\"\"\"\n    regex = re.compile(r\"^\\w+\")\n    result = regex.match(text)\n    return result\n\ndef test_match_beginning_word():\n    assert match_beginning_word(\"apple pie\")\n    assert not match_beginning_word(\"apple pie is good\")\n    assert not match_beginning_word(\"12345\")\n    assert match_beginning_word(\"a\")\n    assert match_beginning_word(\"A\")\n    assert not match_beginning_word(\"\")\n\n\nif __name__ == '__main__':\n    test_match_beginning_word()",
      -1.3935546875
    ],
    [
      "import re\n\ndef word_begins_at_beginning(text):\n    \"\"\"\n    >>> word_begins_at_beginning('word')\n    True\n    >>> word_begins_at_beginning('word, word')\n    True\n    >>> word_begins_at_beginning('word. word')\n    True\n    >>> word_begins_at_beginning('word? word')\n    True\n    >>> word_begins_at_beginning('word word')\n    False\n    \"\"\"\n    return bool(re.match(r'\\A\\w+', text))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -1.5556640625
    ],
    [
      "import re\n\ndef match_beginning_word(text):\n    return re.findall(r'^\\w+', text)\n\n\ndef test_match_beginning_word():\n    assert match_beginning_word(\"Hi how are you?\") == ['Hi']\n    assert match_beginning_word(\"Hello world!\") == ['Hello']\n    assert match_beginning_word(\"a quick brown fox jumped over the lazy dog.\") == ['a']\n    assert match_beginning_word(\"tree, tree, bucket, hat, bucket\") == ['tree', 'tree', 'bucket']\n    assert match_beginning_word(\"12345\") == []\n    assert match_beginning_word(\"tree\") == ['tree']\n    assert match_beginning_word(\"\") == []\n\n\nif __name__ == '__main__':\n    test_match_beginning_word()",
      -1.576171875
    ],
    [
      "import re\n\n\ndef is_match(string, pattern):\n    return bool(re.match(pattern, string))\n\n\nif __name__ == '__main__':\n    print(is_match(\"abc\", \"^a\"))\n    print(is_match(\"abc\", \"^b\"))\n    print(is_match(\"abc\", \"^c\"))\n    print(is_match(\"abc\", \"^a\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^ab\"))\n    print(is_match(\"abc\", \"^abc\"))\n    print(is_match(\"abc\", \"^abcd\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))\n    print(is_match(\"abc\", \"^bc\"))",
      -1.8291015625
    ],
    [
      "import re\n\n\ndef word_beginning(s):\n    return re.match(r'(\\b\\w+)', s)\n\n\ndef test_word_beginning():\n    assert word_beginning('a')\n    assert word_beginning('') is None\n    assert word_beginning(' ') is None\n    assert word_beginning('word')\n    assert word_beginning('word word')\n    assert word_beginning('   word') is None\n    assert word_beginning(' word')\n    assert word_beginning('word  ') is None\n    assert word_beginning('word.') is None\n    assert word_beginning('word?') is None\n    assert word_beginning('word!') is None\n    assert word_beginning('word-') is None\n    assert word_beginning('word;') is None\n    assert word_beginning('word:') is None\n    assert word_beginning('word(') is None\n    assert word_beginning('word)') is None\n    assert word_beginning('word[') is None\n    assert word_beginning('word]') is None\n    assert word_beginning('word{') is None\n    assert word_beginning('word}') is None\n    assert word_beginning('word<') is None\n    assert word_beginning('word>') is None\n    assert word_beginning('word=') is None\n    assert word_beginning('word+') is None\n    assert word_beginning('word*') is None\n    assert word_beginning('word/') is None\n    assert word_beginning('word\\\\') is None\n    assert word_beginning('word|') is None\n    assert word_beginning('word&') is None\n    assert word_beginning('word^') is None\n    assert word_beginning('word~') is None\n    assert word_beginning('word`') is None\n    assert word_beginning('word\\'') is None\n    assert word_beginning('word\\\"') is None",
      -2.1875
    ],
    [
      "def starts_with_a(word):\n    if word[0].lower() == 'a':\n        return True\n    else:\n        return False\n\n\nprint(starts_with_a('apple'))\nprint(starts_with_a('banana'))\nprint(starts_with_a('cat'))\nprint(starts_with_a('dog'))",
      -2.2421875
    ],
    [
      "import re\n\n\ndef match_at_beginning(regex, text):\n    return re.search(regex, text)\n\n\ndef test_match_at_beginning():\n    \"\"\"\n    >>> test_match_at_beginning()\n    True\n    \"\"\"\n    regex = \"^abc\"\n    assert match_at_beginning(regex, \"abcdef\")\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
      -2.375
    ],
    [
      "def match(string):\n    \"\"\"\n    >>> match(\"^word\")\n    True\n    >>> match(\"^wo\")\n    False\n    >>> match(\"^w\")\n    False\n    >>> match(\"^\")\n    False\n    \"\"\"\n    return len(string) >= 3 and string[:2] == \"^w\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -2.625
    ],
    [
      "import re\n\n\ndef match_word_beginning(string: str) -> None:\n    \"\"\"\n\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> match_word_beginning('The quick brown fox jumps over the",
      -2.681640625
    ],
    [
      "import re\nimport pytest\n\n\ndef word_begins_at_beginning(string):\n    return re.match(r\"^\\w+\", string)\n\n\n@pytest.mark.parametrize(\"string, expected\", [\n    (\"\", False),\n    (\"a\", True),\n    (\"ab\", True),\n    (\"abcd\", True),\n    (\"123abc\", False),\n    (\"ab123\", True),\n    (\"abc123\", True),\n    (\"123abc\", False),\n    (\" \", False),\n    (\"a \", True),\n    (\"a b\", False),\n    (\"ab \", False),\n    (\"ab cd\", False),\n    (\"abc\", True),\n    (\"abc1\", True),\n    (\"1abc\", False),\n    (\"abc1\", True),\n    (\"1abc\", False),\n    (\"abcd\", True),\n    (\"abcde\", False),\n    (\"abcdef\", False),\n    (\"abcdefg\", False),\n])\ndef test_word_begins_at_beginning(string, expected):\n    assert word_begins_at_beginning(string) is not None == expected\n    assert word_begins_at_beginning(string).group(0) == string if expected else False",
      -3.021484375
    ],
    [
      "import re\n\n\ndef word_begins_with_vowel(word):\n    \"\"\"\n    >>> word_begins_with_vowel('abcd')\n    False\n    >>> word_begins_with_vowel('abcde')\n    False\n    >>> word_begins_with_vowel('bcde')\n    True\n    >>> word_begins_with_vowel('eabcd')\n    True\n    >>> word_begins_with_vowel('')\n    False\n    \"\"\"\n    pattern = r\"^[aeiou]\"\n    match = re.search(pattern, word)\n    return match is not None\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()",
      -3.17578125
    ],
    [
      "import re\n\ndef match_word_at_beginning(string):\n    \"\"\"Returns a regex object matching a word at the beginning of a string.\"\"\"\n    return re.compile(r'^[a-zA-Z]+')\n\ndef test_match_word_at_beginning():\n    \"\"\"Tests the match_word_at_beginning function.\"\"\"\n    regex = match_word_at_beginning('')\n    assert regex.match('')\n    assert regex.match('word')\n    assert regex.match('word1')\n    assert regex.match('word.')\n    assert regex.match('word_')\n    assert regex.match('word-')\n    assert regex.match('word+')\n    assert regex.match('word*')\n    assert regex.match('word?')\n    assert regex.match('word!')\n    assert regex.match('word=')\n    assert regex.match('word(word')\n    assert regex.match('word)word')\n    assert regex.match('word[word')\n    assert regex.match('word]word')\n    assert regex.match('word{word')\n    assert regex.match('word}word')\n    assert regex.match('word<word')\n    assert regex.match('word>word')\n    assert regex.match('word|word')\n    assert regex.match('word&word')\n    assert not regex.match('1word')\n    assert not regex.match('word1')\n    assert not regex.match('word.1')\n    assert not regex.match('word_1')\n    assert not regex.match('word-1')\n    assert not regex.match('word+1')\n    assert not regex.match('word*1')\n    assert not regex.match('word?1')\n    assert not regex.match('word!1')\n    assert not regex.match('word=1')\n    assert not regex.match('word(1')\n    assert not regex.match('word)1')\n    assert not regex.match('word[1')\n    assert not regex.match('word]1')\n    assert not regex.match('word{1')\n    assert not regex.match('word}1')\n    assert not regex.match",
      -4.03125
    ],
    [
      "import re\nimport itertools\nfrom collections import namedtuple\n\n\ndef match_word_beginning(string, word):\n    return re.match(r\"^{}\\b\".format(word), string)\n\n\ndef test_match_word_beginning():\n    WordMatch = namedtuple(\"WordMatch\", [\"string\", \"word\", \"match\"])\n\n    cases = [\n        WordMatch(\"I'm a banana\", \"I'm\", True),\n        WordMatch(\"I'm a banana\", \"am\", False),\n        WordMatch(\"I'm a banana\", \"a\", False),\n        WordMatch(\"I'm a banana\", \"banana\", True),\n        WordMatch(\"I'm a banana\", \"anana\", False),\n        WordMatch(\"I'm a banana\", \"nanana\", False),\n        WordMatch(\"I'm a banana\", \"aaaaa\", False),\n        WordMatch(\"I'm a banana\", \"I\", True),\n        WordMatch(\"I'm a banana\", \"I'm a\", True),\n        WordMatch(\"I'm a banana\", \"I'm am\", False),\n    ]\n\n    for case in cases:\n        assert match_word_beginning(case.string, case.word) == case.match\n\n    for string, word in itertools.product(\n        [\"\", \"a\", \"aa\", \"ab\", \"abc\", \"abcd\"],\n        [\"\", \"a\", \"aa\", \"ab\", \"abc\", \"abcd\"],\n    ):\n        assert match_word_beginning(string + word, word) == (string == \"\")",
      -4.50390625
    ],
    [
      "import re\n\n\ndef word_begins(text: str):\n    \"\"\"Checks if a word begins a string.\n\n    Args:\n        text (str): string to check.\n\n    Examples:\n        >>> assert word_begins(\"python\") == True\n        >>> assert word_begins(\"python is fun\") == True\n        >>> assert word_begins(\"python is not fun\") == True\n        >>> assert word_begins(\"the python is not fun\") == True\n        >>> assert word_begins(\"the python is not fun\") == True\n        >>> assert word_begins(\"the python is not fun\") == True\n        >>> assert word_begins(\"python is not fun\") == True\n        >>> assert word_begins(\"the python is not funny\") == False\n        >>> assert word_begins(\"the python is not fun\") == True\n        >>> assert word_begins(\"the python is not fun\") == True\n        >>> assert word_begins(\"the python is not fun\") == True\n        >>> assert word_begins(\"python is not fun\") == True\n    \"\"\"\n    pattern = re.compile(r\"^python\")\n    result = re.search(pattern, text)\n    return result != None\n\n\ndef word_begins2(text: str):\n    \"\"\"Checks if a word begins a string.\n\n    Args:\n        text (str): string to check.\n\n    Examples:\n        >>> assert word_begins2(\"python\") == True\n        >>> assert word_begins2(\"python is fun\") == True\n        >>> assert word_begins2(\"python is not fun\") == True\n        >>> assert word_begins2(\"the python is not fun\") == True\n        >>> assert word_begins2(\"the python is not fun\") == True\n        >>> assert word_begins2(\"the python is not fun\") == True\n        >>> assert word_begins2(\"python is not fun\") == True\n        >>> assert word_begins2(\"the python is not funny\") == False\n        >>> assert word_begins2(\"the python is not fun\") == True\n        >>> assert word_begins2(\"the python is not fun\") == True\n        >>> assert word_begins2(\"the",
      -4.6015625
    ],
    [
      "import re\n\n\ndef starts_with_a_word(text):\n    \"\"\"\n    >>> starts_with_a_word('abc')\n    False\n    >>> starts_with_a_word('abc def')\n    False\n    >>> starts_with_a_word('abc d')\n    False\n    >>> starts_with_a_word('abc abcd')\n    False\n    >>> starts_with_a_word('abc abc')\n    False\n    >>> starts_with_a_word('abc')\n    False\n    >>> starts_with_a_word('abc abc')\n    False\n    >>> starts_with_a_word('abc')\n    False\n    >>> starts_with_a_word('abc abc')\n    False\n    \"\"\"\n    pattern = re.compile(r\"^[a-zA-Z]+\")\n    match = pattern.search(text)\n    return match is not None\n\n\ndef starts_with_a_word_using_split(text):\n    \"\"\"\n    >>> starts_with_a_word_using_split('abc')\n    False\n    >>> starts_with_a_word_using_split('abc def')\n    False\n    >>> starts_with_a_word_using_split('abc d')\n    False\n    >>> starts_with_a_word_using_split('abc abcd')\n    False\n    >>> starts_with_a_word_using_split('abc abc')\n    False\n    >>> starts_with_a_word_using_split('abc')\n    False\n    >>> starts_with_a_word_using_split('abc abc')\n    False\n    >>> starts_with_a_word_using_split('abc')\n    False\n    >>> starts_with_a_word_using_split('abc abc')\n    False\n    \"\"\"\n    words = text.split()\n    return words and words[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -5.22265625
    ],
    [
      "import re\n\n\ndef starts_with_word(text):\n    \"\"\"\n    Use ^ to match the beginning of a string.\n    \"\"\"\n    pattern = r\"^a\"\n    result = re.search(pattern, text)\n    return result\n\n\ndef starts_with_word(text):\n    \"\"\"\n    Use \\b to match a word boundary.\n    \"\"\"\n    pattern = r\"\\ba\"\n    result = re.search(pattern, text)\n    return result\n\n\ndef starts_with_word(text):\n    \"\"\"\n    Use \\b to match a word boundary.\n    \"\"\"\n    pattern = r\"\\b\"\n    result = re.search(pattern, text)\n    return result\n\n\ndef starts_with_word(text):\n    \"\"\"\n    Use \\b to match a word boundary.\n    \"\"\"\n    pattern = r\"\\b\"\n    result = re.search(pattern, text)\n    return result",
      -5.859375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}