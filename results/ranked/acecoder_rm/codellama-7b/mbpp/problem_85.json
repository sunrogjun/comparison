{
  "problem": {
    "task_id": "MBPP/96",
    "prompt": "Write a python function to find the number of divisors of a given integer.",
    "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
    "test_list": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ],
    "challenge_test_list": [],
    "problem_id": 85
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def divisors(n):\n    \"\"\"\n    >>> divisors(12)\n    6\n    >>> divisors(20)\n    8\n    >>> divisors(32)\n    10\n    >>> divisors(0)\n    'The number cannot be zero.'\n    >>> divisors(-17)\n    'The number cannot be a negative integer.'\n    \"\"\"\n    if n == 0:\n        return \"The number cannot be zero.\"\n    if n < 0:\n        return \"The number cannot be a negative integer.\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      20.90625
    ],
    [
      "def divisors(n: int) -> int:\n    \"\"\"\n    >>> divisors(6)\n    3\n    >>> divisors(24)\n    8\n    >>> divisors(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than zero\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      15.6953125
    ],
    [
      "from math import sqrt\n\n\ndef num_divisors(n):\n    \"\"\"\n    Find number of divisors of a given integer.\n\n    >>> num_divisors(12)\n    6\n    \"\"\"\n    divisors = set()\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            divisors.add(i)\n            if i != n // i:\n                divisors.add(n // i)\n        i += 1\n    return len(divisors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      15.0703125
    ],
    [
      "def divisors_counter(number):\n    divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors += 1\n    return divisors\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(f\"Number of divisors of {number} is: {divisors_counter(number)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      13.5859375
    ],
    [
      "def divisors(num):\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            count += 1\n    return count\n\n\n\ndef main():\n    num = int(input(\"Enter an integer: \"))\n    print(f\"The number of divisors of {num} is {divisors(num)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      13.234375
    ],
    [
      "def find_divisors(n):\n    return len([i for i in range(1, n+1) if n%i==0])\n\n\ndef find_divisors_2(n):\n    count = 0\n    for i in range(1, n+1):\n        if n%i==0:\n            count+=1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(find_divisors(12))\n    print(find_divisors_2(12))",
      12.8515625
    ],
    [
      "def divisors_count(n):\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\n\ndef main():\n    n = int(input(\"Enter the number: \"))\n    print(\"Number of divisors: \", divisors_count(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      12.671875
    ],
    [
      "def divisors(n):\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number: \"))\n    print(f\"Number of divisors of {num} is: {divisors(num)}\")",
      12.5
    ],
    [
      "def find_number_of_divisors(number: int) -> int:\n    \"\"\"\n    >>> find_number_of_divisors(1)\n    1\n    >>> find_number_of_divisors(2)\n    2\n    >>> find_number_of_divisors(3)\n    2\n    >>> find_number_of_divisors(4)\n    3\n    >>> find_number_of_divisors(5)\n    2\n    >>> find_number_of_divisors(6)\n    4\n    >>> find_number_of_divisors(7)\n    2\n    >>> find_number_of_divisors(8)\n    3\n    >>> find_number_of_divisors(9)\n    3\n    >>> find_number_of_divisors(10)\n    4\n    >>> find_number_of_divisors(11)\n    2\n    >>> find_number_of_divisors(12)\n    3\n    >>> find_number_of_divisors(13)\n    2\n    >>> find_number_of_divisors(14)\n    3\n    >>> find_number_of_divisors(15)\n    2\n    >>> find_number_of_divisors(16)\n    4\n    >>> find_number_of_divisors(17)\n    2\n    >>> find_number_of_divisors(18)\n    3\n    >>> find_number_of_divisors(19)\n    2\n    >>> find_number_of_divisors(20)\n    4\n    \"\"\"\n    divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors += 1\n    return divisors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      10.515625
    ],
    [
      "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(count_divisors(12))\nprint(count_divisors(36))\nprint(count_divisors(100))",
      10.0625
    ],
    [
      "def divisors(n):\n    c = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            c += 1\n    return c\n\n\nprint(divisors(12))\nprint(divisors(5))\nprint(divisors(15))\nprint(divisors(20))\nprint(divisors(25))\nprint(divisors(30))",
      10.0625
    ],
    [
      "\"\"\"Question:\nWrite a python function to find the number of divisors of a given integer.\nHints:\nUse list comprehension to find divisors\n\n\"\"\"\ndef number_of_divisors(n):\n    return len([x for x in range(1, n+1) if n%x==0])\n\t\n#print number_of_divisors(24)\n\"\"\"\nTest.assert_equals(number_of_divisors(0), 0)\nTest.assert_equals(number_of_divisors(3), 2)\nTest.assert_equals(number_of_divisors(4), 3)\nTest.assert_equals(number_of_divisors(6), 4)\nTest.assert_equals(number_of_divisors(10), 4)\nTest.assert_equals(number_of_divisors(12), 5)\n\"\"\"",
      9.6875
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 10\n    print(divisors(n))",
      9.609375
    ],
    [
      "def number_of_divisors(n):\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(number_of_divisors(1))\nprint(number_of_divisors(2))\nprint(number_of_divisors(3))\nprint(number_of_divisors(4))\nprint(number_of_divisors(5))\nprint(number_of_divisors(6))\nprint(number_of_divisors(7))\nprint(number_of_divisors(8))\nprint(number_of_divisors(9))\nprint(number_of_divisors(10))\nprint(number_of_divisors(11))\nprint(number_of_divisors(12))\nprint(number_of_divisors(13))\nprint(number_of_divisors(14))\nprint(number_of_divisors(15))",
      9.28125
    ],
    [
      "def number_of_divisors(n: int) -> int:\n    \"\"\"\n    >>> number_of_divisors(12)\n    3\n    >>> number_of_divisors(10)\n    2\n    >>> number_of_divisors(16)\n    4\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if n / i != i:\n                count += 1\n        i += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.90625
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if n / i != i:\n                count += 1\n        i += 1\n    return count\n\nprint(number_of_divisors(12))\nprint(number_of_divisors(24))",
      8.8125
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Number of divisors of {n}: {number_of_divisors(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      8.359375
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(\"Number of divisors are: \", divisors(12))\n    print(\"Number of divisors are: \", divisors(20))\n    print(\"Number of divisors are: \", divisors(100))",
      8.2734375
    ],
    [
      "def num_divisors(n):\n    \"\"\"\n    Returns the number of divisors of a given integer\n    >>> num_divisors(12)\n    4\n    >>> num_divisors(24)\n    8\n    >>> num_divisors(10)\n    4\n    \"\"\"\n    if n <= 0:\n        return 0\n    res = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            res += 1\n            if n // i != i:\n                res += 1\n        i += 1\n    return res\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n    n = int(input(\"Enter a number: \").strip())\n    print(f\"Number of divisors of {n} is {num_divisors(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      8.2109375
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(number_of_divisors(12))\nprint(number_of_divisors(32))",
      7.6015625
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(number_of_divisors(25))",
      7.59765625
    ],
    [
      "def num_of_divisors(n):\n    \"\"\"\n    :param: n - number to find the number of divisors for\n    return: - number of divisors for n\n    \"\"\"\n    divisors = 0\n    if n == 1:\n        return 1\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\ndef main():\n    \"\"\"\n    main function to call the num_of_divisors\n    \"\"\"\n    print(num_of_divisors(5))\n    print(num_of_divisors(0))\n    print(num_of_divisors(6))\n    print(num_of_divisors(3))\n    print(num_of_divisors(12))\n\nif __name__ == \"__main__\":\n    main()",
      7.484375
    ],
    [
      "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_divisors(2))\n    print(count_divisors(4))\n    print(count_divisors(6))\n    print(count_divisors(12))",
      7.0625
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(divisors(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      6.8671875
    ],
    [
      "def num_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n\n\ndef main():\n    n = int(input(\"Enter an integer: \"))\n    print(num_divisors(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      6.50390625
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"Number of divisors:\", number_of_divisors(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      6.27734375
    ],
    [
      "\"\"\"Question:\nWrite a python function to find the number of divisors of a given integer.\nHints:\nUse math module to find divisors of a number,\n\n\"\"\"\ndef number_of_divisors(n):\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n\nprint number_of_divisors(6)\nprint number_of_divisors(12)\nprint number_of_divisors(15)",
      5.68359375
    ],
    [
      "def num_divisors(n):\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Number of divisors of {n} is {num_divisors(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      5.47265625
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    i = 1\n    while i * i < n:\n        if n % i == 0:\n            count += 2\n        i += 1\n    if i * i == n:\n        count += 1\n    return count\n\nprint(number_of_divisors(10))\nprint(number_of_divisors(24))\nprint(number_of_divisors(12))",
      5.40234375
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter an integer: \"))\n    print(f\"Number of divisors of {n} is {number_of_divisors(n)}\")",
      5.22265625
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef number_of_divisors_optimized(n):\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 2\n    if n % int(n**0.5) == 0:\n        count -= 1\n    return count\n\nprint(number_of_divisors(12))\nprint(number_of_divisors_optimized(12))",
      5.21875
    ],
    [
      "def divisor_counter(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Number of divisors of {n} is {divisor_counter(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      5.12109375
    ],
    [
      "def divisors(n):\n    divisors = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors += 1\n    return divisors\n\nprint(divisors(12))\nprint(divisors(13))\nprint(divisors(15))",
      5.07421875
    ],
    [
      "def find_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n\n\nprint(find_divisors(6))",
      5.04296875
    ],
    [
      "def no_divisors(number):\n    divisor_count = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_count += 1\n    return divisor_count\n\nprint(no_divisors(12))\nprint(no_divisors(13))",
      4.65234375
    ],
    [
      "def count_divisors(number):\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\n\nprint(count_divisors(10))\nprint(count_divisors(15))\nprint(count_divisors(20))\nprint(count_divisors(25))",
      4.1953125
    ],
    [
      "def divisors(n):\n    if n < 0:\n        return 0\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(divisors(1))\nprint(divisors(12))\nprint(divisors(-1))\nprint(divisors(-12))",
      4.03125
    ],
    [
      "def num_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef test_num_divisors():\n    assert num_divisors(24) == 6\n    assert num_divisors(100) == 4\n    assert num_divisors(101) == 3\n    assert num_divisors(102) == 4\n    assert num_divisors(103) == 3",
      3.87890625
    ],
    [
      "def number_of_divisors(num):\n    divisors = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors += 1\n    return divisors\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(f\"Number of divisors: {number_of_divisors(n)}\")",
      3.74609375
    ],
    [
      "def num_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(num_divisors(2))\nprint(num_divisors(10))\nprint(num_divisors(12))\nprint(num_divisors(15))",
      3.720703125
    ],
    [
      "def number_of_divisors(n):\n    if n <= 0:\n        return -1\n\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n\n    return count\n\n\nprint(number_of_divisors(10))",
      3.40625
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(number_of_divisors(20))\nprint(number_of_divisors(24))",
      3.3828125
    ],
    [
      "def find_number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Please enter a number: \"))\n    result = find_number_of_divisors(n)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      3.263671875
    ],
    [
      "def find_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(find_divisors(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.111328125
    ],
    [
      "def divisors(number):\n    count = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            count += 1\n    return count\n\nprint(divisors(12))\nprint(divisors(15))",
      3.017578125
    ],
    [
      "def number_of_divisors(num):\n    divisors = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors += 1\n    return divisors\n\n\nprint(number_of_divisors(12))\nprint(number_of_divisors(10))\nprint(number_of_divisors(20))",
      3.0078125
    ],
    [
      "def find_divisors(n):\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(find_divisors(12))",
      2.8125
    ],
    [
      "def num_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(num_divisors(12))",
      2.654296875
    ],
    [
      "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(count_divisors(12))\n    print(count_divisors(24))\n    print(count_divisors(100))",
      2.548828125
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n\nprint(number_of_divisors(12))",
      2.466796875
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(number_of_divisors(6))\nprint(number_of_divisors(25))",
      2.46484375
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(number_of_divisors(10))",
      2.453125
    ],
    [
      "def divisors(n):\n    \"\"\"\n    Divisors of a number is the count of numbers which can completely divide the number.\n    \"\"\"\n    cnt = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            cnt += 1\n    return cnt\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(divisors(num))",
      2.3359375
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nn = int(input(\"Enter a number: \"))\nprint(divisors(n))",
      1.603515625
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisors(10))\nprint(divisors(12))\nprint(divisors(24))\nprint(divisors(45))",
      1.603515625
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(number_of_divisors(10))",
      1.443359375
    ],
    [
      "def divisors(n):\n    return len([i for i in range(1, n + 1) if n % i == 0])",
      1.4404296875
    ],
    [
      "def divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n\n\nprint(divisors(20))",
      1.4375
    ],
    [
      "def divisor(number):\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\n\nprint(divisor(10))",
      1.3173828125
    ],
    [
      "def divisors(num):\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(divisors(num))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.048828125
    ],
    [
      "def find_divisors(number):\n    return len([i for i in range(1, number + 1) if number % i == 0])\n\n\nprint(find_divisors(10))",
      0.974609375
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(\"Number of divisors of {} is {}\".format(num, divisors(num)))",
      0.86181640625
    ],
    [
      "def divisors(number):\n    divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor += 1\n    return divisor\n\nprint(divisors(10))",
      0.8134765625
    ],
    [
      "def divisors(num):\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            count += 1\n    return count\n\n\nprint(divisors(12))",
      0.79345703125
    ],
    [
      "def count_divisors(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 2\n    return count if n ** 0.5 % 1 else count + 1\n\n\nif __name__ == \"__main__\":\n    print(count_divisors(12))",
      0.7763671875
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count += 1\n    return count\n\nprint(divisors(12))\nprint(divisors(24))\nprint(divisors(10))",
      0.76318359375
    ],
    [
      "def num_divisors(num):\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        count = 0\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                count += 2\n        return count\n\n\nnum = int(input(\"Enter a number: \"))\nprint(num_divisors(num))",
      0.74365234375
    ],
    [
      "def divisors(num):\n    divisors_count = 0\n\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors_count += 1\n\n    return divisors_count\n\nprint(divisors(12))\nprint(divisors(36))\nprint(divisors(24))",
      0.5009765625
    ],
    [
      "from math import sqrt\n\n\ndef divisors(n):\n    count = 0\n    for i in range(1, int(sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n ** 0.5 == int(n ** 0.5):\n        count -= 1\n    return count\n\n\nprint(divisors(12))\nprint(divisors(100))\nprint(divisors(1))\nprint(divisors(20))",
      0.37841796875
    ],
    [
      "def divisors(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n\n\nif __name__ == '__main__':\n    print(divisors(12))\n    print(divisors(15))\n    print(divisors(100))\n    print(divisors(500))",
      0.32080078125
    ],
    [
      "def divisors(num):\n    divisor = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisor += 1\n    return divisor\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(divisors(num))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.28369140625
    ],
    [
      "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Number of divisors of {n} is {divisor(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      0.255126953125
    ],
    [
      "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_divisors(12))",
      0.09954833984375
    ],
    [
      "def divisors(n):\n    divisor = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor += 1\n    return divisor\n\n\nprint(divisors(20))",
      0.035736083984375
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
      -0.12005615234375
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    result = divisors(number)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.1429443359375
    ],
    [
      "from math import sqrt\ndef divisor(n):\n    \"\"\"\n    >>> divisor(25)\n    6\n    >>> divisor(100)\n    16\n    >>> divisor(50)\n    8\n    >>> divisor(1)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(1, int(sqrt(n)) + 1):\n            if n % i == 0:\n                count += 2\n        if n ** 0.5 == int(sqrt(n)):\n            count -= 1\n        return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
      -0.3017578125
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    i = 1\n    while i * i < n:\n        if n % i == 0:\n            count += 2\n        i += 1\n    if i * i == n:\n        count += 1\n    return count\n\n\ndef main():\n    n = 10\n    answer = number_of_divisors(n)\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.3818359375
    ],
    [
      "from math import sqrt\n\n\ndef num_divisors(n):\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    return count + 1\n\n\nprint(num_divisors(12))\nprint(num_divisors(24))\nprint(num_divisors(20))",
      -0.64404296875
    ],
    [
      "def num_divisors(num):\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(\"Number of divisors of\", num, \"is\", num_divisors(num))\n\nif __name__ == \"__main__\":\n    main()",
      -0.7490234375
    ],
    [
      "def number_of_divisors(n):\n    number_of_divisors = 0\n    i = 1\n    while i * i < n:\n        if n % i == 0:\n            if i * i == n:\n                number_of_divisors += 1\n            else:\n                number_of_divisors += 2\n        i += 1\n    return number_of_divisors\n\n\nprint(number_of_divisors(12))",
      -0.77587890625
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(number_of_divisors(10))\nprint(number_of_divisors(12))",
      -0.85693359375
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(number_of_divisors(20))",
      -0.85693359375
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    result = divisors(n)\n    print(f\"The number of divisors of {n} is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Number of divisors of {n} is {divisor(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(divisors(12))",
      -0.85791015625
    ],
    [
      "def divisors(n):\n    divisor_list = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisor_list.append(i)\n    return len(divisor_list)\n\nprint(divisors(4))\nprint(divisors(12))\nprint(divisors(16))",
      -0.85791015625
    ],
    [
      "def count_divisors(n):\n    \"\"\"\n    :param: n - number to calculate number of divisors\n    return: count of divisors\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef main():\n    number = int(input(\"Enter a number to find number of divisors: \"))\n    count = count_divisors(number)\n    print(\"Number of divisors of {} are {}\".format(number, count))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(divisors(12))\nprint(divisors(13))",
      -0.85791015625
    ],
    [
      "def divisor_counter(num):\n    divisor_list = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisor_list.append(i)\n    return len(divisor_list)\n\n\nprint(divisor_counter(10))\nprint(divisor_counter(20))\nprint(divisor_counter(30))",
      -0.86083984375
    ],
    [
      "\"\"\"Question:\nWrite a python function to find the number of divisors of a given integer.\nHints:\nUse math module.\n\n\"\"\"\ndef number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n%i==0:\n            count += 1\n    return count\n\t\t\n\t\t\n\t\t\nprint number_of_divisors(24)\nprint number_of_divisors(102)\nprint number_of_divisors(1000)",
      -0.86083984375
    ],
    [
      "def num_divisors(n):\n    divisors = set()\n    for i in range(1, int(n**0.5)+1):\n        if n%i==0:\n            divisors.add(i)\n            if i!=n/i:\n                divisors.add(n//i)\n    return len(divisors)\n\nprint(num_divisors(12))\nprint(num_divisors(24))",
      -0.86083984375
    ],
    [
      "def number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\nprint(number_of_divisors(12))",
      -0.88818359375
    ],
    [
      "from math import sqrt\n\n\ndef find_divisors(number):\n    \"\"\"Find divisors of a number.\n\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    for i in range(1, int(sqrt(number)) + 1):\n        if number % i == 0:\n            count += 2\n\n    if number ** 0.5 == int(number ** 0.5):\n        count -= 1\n\n    return count",
      -1.3388671875
    ],
    [
      "def divisors(num):\n    divisors = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors += 1\n    return divisors\n\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number: \"))\n    print(divisors(num))",
      -1.5595703125
    ],
    [
      "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisors(12))\nprint(divisors(10))\nprint(divisors(20))\n\n\"\"\"\nWrite a python program to find the prime factors of a given integer.\n\"\"\"\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n / i\n        else:\n            i += 1\n    return factors\n\nprint(prime_factors(12))\nprint(prime_factors(10))\nprint(prime_factors(20))\n\n\"\"\"\nWrite a python program to find the sum of the digits of a given integer.\n\"\"\"\ndef sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n\nprint(sum_of_digits(1234))\nprint(sum_of_digits(12345))\nprint(sum_of_digits(123456))\n\n\"\"\"\nWrite a python program to find the product of the digits of a given integer.\n\"\"\"\ndef product_of_digits(n):\n    product = 1\n    while n > 0:\n        product *= n % 10\n        n = n // 10\n    return product\n\nprint(product_of_digits(1234))\nprint(product_of_digits(12345))\nprint(product_of_digits(123456))\n\n\"\"\"\nWrite a python program to find the number of digits of a given integer.\n\"\"\"\ndef number_of_digits(n):\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count\n\nprint(number_",
      -2.912109375
    ],
    [
      "\"\"\"Question:\nWrite a python function to find the number of divisors of a given integer.\nHints:\nFor example, a prime number other than 2 has 2 divisors, a square has 4 divisors, a cube has 6 divisors, a number that is a multiple of 4 has 3 divisors.\n\n\"\"\"",
      -4.54296875
    ],
    [
      "from math import sqrt\n\n\ndef divisors(number: int) -> int:\n    \"\"\"Returns the number of divisors of a given number\n\n    Args:\n        number (int): [description]\n\n    Returns:\n        int: [description]\n    \"\"\"\n    # 1. Get all prime factors of number\n    prime_factors = []\n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            prime_factors.append(i)\n\n    if number > 1:\n        prime_factors.append(number)\n\n    # 2. Get the count of each prime factor\n    prime_factor_count = {}\n    for prime in prime_factors:\n        if prime not in prime_factor_count:\n            prime_factor_count[prime] = 1\n        else:\n            prime_factor_count[prime] += 1\n\n    # 3. Get the divisors\n    divisors = [1]\n    for prime, count in prime_factor_count.items():\n        divisors.append(prime)\n        for _ in range(1, count):\n            divisors.append(divisors[-1] * prime)\n\n    return len(divisors)\n\n\nif __name__ == \"__main__\":\n    print(divisors(12))\n    print(divisors(100))\n    print(divisors(121))",
      -8.5
    ],
    [
      "def number_of_divisors(n):\n    if n == 1:\n        return 1\n\n    # if n is even, divide it by 2 and increase the count by 1\n    count = 1\n    while n % 2 == 0:\n        n = n // 2\n        count += 1\n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n        i += 2\n\n    return count\n\n\nprint(number_of_divisors(12))\nprint(number_of_divisors(15))\nprint(number_of_divisors(20))\nprint(number_of_divisors(24))",
      -10.125
    ],
    [
      "\"\"\"Question:\nWrite a python function to find the number of divisors of a given integer.\nHints:\nUse math module\nUse set() to get unique values\n\n\"\"\"\ndef numDivisors(num):\n\tdivisors = []\n\tfor i in range(1, int(math.sqrt(num))+1):\n\t\tif num % i == 0:\n\t\t\tdivisors.append(i)\n\t\t\tif i*i != num:\n\t\t\t\tdivisors.append(num/i)\n\treturn len(divisors)\n\nprint numDivisors(10)\nprint numDivisors(25)",
      -15.875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}