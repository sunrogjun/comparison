{
  "problem": {
    "task_id": "MBPP/326",
    "prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
    "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
    "test_list": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ],
    "challenge_test_list": [],
    "problem_id": 315
  },
  "model_name": "codellama-7b",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def get_word_with_most_occurrences(strings):\n    \"\"\"\n    :param strings: list of strings\n    :return: string\n    \"\"\"\n    word_occurrences = {}\n    for string in strings:\n        for word in string.split():\n            if word in word_occurrences:\n                word_occurrences[word] += 1\n            else:\n                word_occurrences[word] = 1\n\n    return max(word_occurrences, key=word_occurrences.get)\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_word_with_most_occurrences(['i like apples', 'apples are my favorite', 'apples are my favorite too']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_word_with_most_occurrences(['apples are my favorite', 'apples are my favorite too']) == 'apples'\n    assert get_word_with_most_occurrences(['i like apples', 'apples are my favorite', 'apples are my favorite too']) == 'apples'\n    assert get_word_with_most_occurrences(['my favorite is apples', 'my favorite is apples too']) == 'apples'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      10.0
    ],
    [
      "from collections import Counter\n\n\ndef word_counter(strings):\n    \"\"\"Return the word with most number of occurrences in the given strings list.\n\n    >>> word_counter(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog'])\n    'the'\n    >>> word_counter(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog', 'the'])\n    'the'\n    >>> word_counter(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog', 'the', 'the'])\n    'the'\n    >>> word_counter(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog', 'the', 'the', 'the'])\n    'the'\n    >>> word_counter(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog', 'the', 'the', 'the', 'the'])\n    'the'\n    >>> word_counter(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog', 'the', 'the', 'the', 'the', 'the'])\n    'the'\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      9.59375
    ],
    [
      "def word_count(strings):\n    word_dict = {}\n    for string in strings:\n        words = string.split()\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    return max(word_dict, key=word_dict.get)\n\n\nif __name__ == '__main__':\n    print(word_count(['i love python', 'i love java', 'i love python', 'i love c']))",
      8.9609375
    ],
    [
      "def word_count(string):\n    \"\"\"\n    >>> word_count(['a', 'a', 'b', 'b', 'c', 'c'])\n    'a'\n    >>> word_count(['a', 'a', 'b', 'b', 'b', 'c', 'c'])\n    'b'\n    >>> word_count(['a', 'a', 'b', 'b', 'c', 'c', 'c'])\n    'c'\n    >>> word_count(['a', 'a', 'b', 'b', 'b', 'b', 'c', 'c'])\n    'b'\n    >>> word_count(['a', 'a', 'b', 'b', 'c', 'c', 'c', 'c'])\n    'c'\n    \"\"\"\n    dict_count = {}\n\n    for i in range(len(string)):\n        dict_count[string[i]] = dict_count.get(string[i], 0) + 1\n\n    return max(dict_count, key=dict_count.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      8.875
    ],
    [
      "from collections import Counter\n\n\ndef most_frequent_word(strings):\n    \"\"\"Return the most frequent word in the given list of strings.\n\n    >>> most_frequent_word(['Hello', 'World', 'Hey', 'Hey', 'World'])\n    'Hey'\n    >>> most_frequent_word(['Hello', 'World', 'Hey', 'Hey', 'World', 'World'])\n    'World'\n    >>> most_frequent_word(['Hello', 'World', 'Hey', 'Hey', 'World', 'World', 'World'])\n    'World'\n    >>> most_frequent_word(['Hello', 'World', 'Hey', 'Hey', 'World', 'World', 'World', 'World'])\n    'World'\n    \"\"\"\n    # get the frequency of the words in the string\n    word_frequencies = Counter(\" \".join(strings).split())\n    # sort the word frequencies in descending order\n    sorted_word_frequencies = sorted(\n        word_frequencies.items(), key=lambda kv: kv[1], reverse=True\n    )\n    # return the word with the highest frequency\n    return sorted_word_frequencies[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      7.65625
    ],
    [
      "from collections import Counter\n\n\ndef word_occurrences(strings):\n    \"\"\"\n    >>> word_occurrences(['I like python', 'I like java', 'I like python'])\n    'python'\n\n    >>> word_occurrences(['I like python', 'I like java', 'I like python', 'I like python'])\n    'python'\n\n    >>> word_occurrences(['I like python', 'I like python', 'I like python', 'I like python'])\n    'python'\n    \"\"\"\n    word_list = [word for string in strings for word in string.split()]\n    return Counter(word_list).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      7.37109375
    ],
    [
      "from collections import Counter\nfrom typing import List\n\n\ndef max_occurred_word(strings: List[str]) -> str:\n    \"\"\"Returns word with most number of occurrences in the given strings list.\n\n    Args:\n        strings (List[str]): list of strings\n\n    Examples:\n        >>> assert max_occurred_word([\"I like banana\", \"banana favorite food\", \"banana\"]) == \"banana\"\n        >>> assert max_occurred_word([\"a\", \"b\", \"a\"]) == \"a\"\n        >>> assert max_occurred_word([\"a\", \"b\", \"a\", \"a\"]) == \"a\"\n        >>> assert max_occurred_word([\"\"]) is None\n    \"\"\"\n    if not strings:\n        return None\n\n    word_count = Counter(\" \".join(strings).split(\" \"))\n    return max(word_count, key=word_count.get)\n\n\nif __name__ == \"__main__\":\n    print(max_occurred_word([\"I like banana\", \"banana favorite food\", \"banana\"]))\n    print(max_occurred_word([\"a\", \"b\", \"a\"]))\n    print(max_occurred_word([\"a\", \"b\", \"a\", \"a\"]))\n    print(max_occurred_word([\"\"]))",
      6.68359375
    ],
    [
      "from collections import Counter\n\n\ndef get_most_common_word(strings):\n    \"\"\"\n    :param strings: list of strings\n    :return: most common word\n    \"\"\"\n    if not strings:\n        return None\n\n    counter = Counter()\n    for string in strings:\n        for word in string.split():\n            counter[word] += 1\n\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"a\", \"b\", \"a\"], \"a\"),\n        ([\"a\", \"a\"], \"a\"),\n        ([\"a\", \"b\"], \"a\"),\n        ([\"\"], None),\n        (None, None)\n    ]\n\n    for test_case, expected_result in test_cases:\n        assert get_most_common_word(test_case) == expected_result",
      6.23046875
    ],
    [
      "def word_with_most_occurrences(strings):\n    \"\"\"\n    >>> word_with_most_occurrences([\"ab\", \"ab\", \"cd\", \"ab\"])\n    'ab'\n    >>> word_with_most_occurrences([\"ab\", \"ba\", \"ba\", \"ba\"])\n    'ba'\n    >>> word_with_most_occurrences([\"ab\", \"ba\", \"ba\", \"ba\", \"ab\"])\n    'ab'\n    >>> word_with_most_occurrences([\"ab\", \"ba\", \"ba\", \"ba\", \"ab\", \"cd\"])\n    'ab'\n    \"\"\"\n    word_count = {}\n\n    for string in strings:\n        string = string.strip()\n        for word in string.split():\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n\n    max_count = 0\n    max_word = \"\"\n    for word, count in word_count.items():\n        if count > max_count:\n            max_count = count\n            max_word = word\n\n    return max_word\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      5.5625
    ],
    [
      "def word_with_most_occurrences(strings: list) -> str:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    # Create a dictionary to store the word and its occurrences\n    word_occurrences = {}\n\n    # Iterate over each string\n    for string in strings:\n        # Iterate over each word in the string\n        for word in string.split():\n            # Check if the word is in the dictionary\n            if word in word_occurrences:\n                # If the word is in the dictionary, increase its occurrence by 1\n                word_occurrences[word] += 1\n            else:\n                # If the word is not in the dictionary, add it and set its occurrence to 1\n                word_occurrences[word] = 1\n\n    # Sort the dictionary by the value\n    sorted_word_occurrences = dict(\n        sorted(word_occurrences.items(), key=lambda x: x[1], reverse=True)\n    )\n\n    # Return the word with most occurrences\n    return list(sorted_word_occurrences.keys())[0]\n\n\nif __name__ == \"__main__\":\n    print(word_with_most_occurrences([\"i like apples\", \"apples are my favorite\", \"i like oranges\"]))\n    print(word_with_most_occurrences([\"i like apples\", \"apples are my favorite\", \"i like oranges\", \"apples are my favorite\"]))\n    print(word_with_most_occurrences([\"i like apples\", \"apples are my favorite\", \"i like oranges\", \"apples are my favorite\", \"i like apples\"]))",
      4.78125
    ],
    [
      "from collections import Counter\n\n\ndef most_occurring_word(strings):\n    \"\"\"\n    Return the word with most number of occurrences in the given strings list.\n\n    >>> most_occurring_word([\"Hello\", \"Hero\", \"Hello\", \"Hola\", \"Hi\"])\n    'Hello'\n    >>> most_occurring_word([\"Hello\", \"Hero\", \"World\", \"Hola\", \"Hi\"])\n    'Hola'\n    >>> most_occurring_word([\"Hello\", \"Hero\", \"World\", \"Hola\", \"Hi\", \"Hello\"])\n    'Hello'\n    >>> most_occurring_word([\"Hello\", \"Hero\", \"World\", \"Hola\", \"Hi\", \"Hello\", \"World\"])\n    'World'\n    \"\"\"\n    word_counter = Counter(strings)\n    return word_counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      4.36328125
    ],
    [
      "from collections import Counter\n\n\ndef word_with_most_occurrence(strings):\n    \"\"\"\n    >>> word_with_most_occurrence(['apple apple apple', 'apple apple', 'apple'])\n    'apple'\n    \"\"\"\n    word_count = Counter()\n    for s in strings:\n        for word in s.split():\n            word_count[word] += 1\n    return word_count.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.9296875
    ],
    [
      "def get_most_common_word(strings):\n    \"\"\"\n    >>> get_most_common_word([\"cat\", \"dog\", \"dog\", \"dog\", \"dog\", \"bird\", \"cat\", \"cat\", \"bird\", \"bird\", \"cat\"])\n    'dog'\n    \"\"\"\n    word_count = {}\n    for string in strings:\n        for word in string.split():\n            word_count[word] = word_count.get(word, 0) + 1\n\n    most_common_word = max(word_count, key=lambda key: word_count[key])\n    return most_common_word\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.83984375
    ],
    [
      "from collections import Counter\nfrom typing import List\n\n\ndef word_with_max_occurrence(strings: List[str]) -> str:\n    \"\"\"Returns word with max occurrences from the given string list.\n\n    Args:\n        strings (List[str]): list of strings\n\n    Returns:\n        str: word with max occurrences\n\n    Examples:\n        >>> assert word_with_max_occurrence(['abcd', 'abcd', 'abcd', 'xyz', 'abcd']) == 'abcd'\n        >>> assert word_with_max_occurrence(['abcd', 'abc', 'abc', 'xyz', 'abc']) == 'abc'\n        >>> assert word_with_max_occurrence(['abcd', 'abc', 'abc', 'xyz', 'abc', 'abc']) == 'abc'\n        >>> assert word_with_max_occurrence(['abcd', 'abc', 'abc', 'xyz', 'abc', 'abc', 'abcd']) == 'abc'\n        >>> assert word_with_max_occurrence(['abcd', 'abc', 'abc', 'xyz', 'abc', 'abc', 'abcd', 'abc']) == 'abc'\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(word_with_max_occurrence([\"abcd\", \"abcd\", \"abcd\", \"xyz\", \"abcd\"]))\n    print(word_with_max_occurrence([\"abcd\", \"abc\", \"abc\", \"xyz\", \"abc\"]))\n    print(word_with_max_occurrence([\"abcd\", \"abc\", \"abc\", \"xyz\", \"abc\", \"abc\"]))\n    print(word_with_max_occurrence([\"abcd\", \"abc\", \"abc\", \"xyz\", \"abc\", \"abc\", \"abcd\"]))\n    print(word_with_max_occurrence([\"abcd\", \"abc\", \"abc\", \"xyz\", \"abc\", \"abc\", \"abcd\", \"abc\"]))",
      3.79296875
    ],
    [
      "def most_occur_word(strings):\n    \"\"\"\n    Return the word with most number of occurrences.\n\n    >>> most_occur_word(['a', 'a', 'b', 'b', 'b'])\n    'b'\n    >>> most_occur_word(['a', 'b', 'b', 'c', 'c'])\n    'b'\n    \"\"\"\n    return max(strings, key=strings.count)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      3.166015625
    ],
    [
      "def word_occurrence(sentences):\n    \"\"\"\n    >>> word_occurrence([\"hello world\", \"hello\"])\n    'hello'\n\n    >>> word_occurrence([\"hello\", \"hello\"])\n    'hello'\n\n    >>> word_occurrence([\"hello\", \"world\"])\n    'hello'\n\n    >>> word_occurrence([\"world\", \"world\"])\n    'world'\n\n    >>> word_occurrence([\"world\", \"world hello\"])\n    'world'\n\n    >>> word_occurrence([\"world hello\", \"world\"])\n    'world'\n\n    >>> word_occurrence([\"world hello\", \"world hello\"])\n    'world hello'\n\n    >>> word_occurrence([\"world hello hello\", \"world hello\"])\n    'hello'\n    \"\"\"\n    word_count = {}\n    for sentence in sentences:\n        for word in sentence.split():\n            word_count[word] = word_count.get(word, 0) + 1\n\n    return max(word_count, key=word_count.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.888671875
    ],
    [
      "from collections import Counter\n\n\ndef get_most_occurring_word(strings):\n    \"\"\"\n    :param strings: list of strings\n    :return: most occurring word\n    \"\"\"\n    counter = Counter()\n    for s in strings:\n        for w in s.split():\n            counter[w] += 1\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(get_most_occurring_word([\"I love Python\", \"Python is a great language\", \"I like Python\"]))",
      2.80859375
    ],
    [
      "def word_count(strings):\n    \"\"\"\n    >>> word_count([]) == {}\n    True\n    >>> word_count([\"I\", \"I\", \"I\", \"I\"]) == {\"I\": 4}\n    True\n    >>> word_count([\"I\", \"am\", \"I\", \"am\", \"I\", \"Am\"]) == {\"I\": 3, \"am\": 2}\n    True\n    \"\"\"\n    result = {}\n    for s in strings:\n        words = s.split()\n        for word in words:\n            if word not in result:\n                result[word] = 1\n            else:\n                result[word] += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      2.79296875
    ],
    [
      "from collections import Counter\n\n\ndef word_counter(strings):\n    words = []\n    for string in strings:\n        words.extend(string.split())\n    return Counter(words).most_common(1)[0][0]\n\n\ndef test_word_counter():\n    assert word_counter([\"I love python\"]) == \"python\"\n\n\ndef main():\n    print(word_counter([\"I love python\", \"I love java\", \"I love python\"]))\n\n\nif __name__ == \"__main__\":\n    main()",
      2.453125
    ],
    [
      "from collections import defaultdict\n\ndef word_count(strings):\n    word_dict = defaultdict(int)\n    for string in strings:\n        for word in string.split():\n            word_dict[word] += 1\n    return word_dict\n\n\nif __name__ == '__main__':\n    strings = ['python is a great language', 'python is the best language', 'python is awesome', 'python is the best']\n    word_dict = word_count(strings)\n    print(word_dict)",
      2.22265625
    ],
    [
      "def word_with_most_occurrences(words: list) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n\n    word_with_most_occurrences = None\n    max_occurrences = 0\n    for word, occurrences in word_counts.items():\n        if occurrences > max_occurrences:\n            word_with_most_occurrences = word\n            max_occurrences = occurrences\n\n    return word_with_most_occurrences\n\n\nif __name__ == \"__main__\":\n    assert (\n        word_with_most_occurrences([\"a\", \"a\", \"b\", \"b\", \"c\", \"a\"]) == \"a\"\n    ), \"incorrect output\"\n    assert (\n        word_with_most_occurrences([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == \"a\"\n    ), \"incorrect output\"\n    assert (\n        word_with_most_occurrences([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"a\"\n    ), \"incorrect output\"",
      1.7451171875
    ],
    [
      "def most_occur(words):\n    \"\"\"Returns the word with most number of occurrences in the given strings list.\n\n    >>> most_occur(['apple', 'banana', 'pear', 'orange', 'apple', 'apple', 'pear', 'orange', 'apple'])\n    'apple'\n    \"\"\"\n    result = {}\n    for word in words:\n        result[word] = result.get(word, 0) + 1\n    return max(result, key=result.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      1.4248046875
    ],
    [
      "from collections import Counter\n\n\ndef word_occurrences(strings):\n    \"\"\"Returns word with the most occurrences.\"\"\"\n    word_counts = Counter(strings)\n    return word_counts.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(word_occurrences([\"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"]))\n    print(word_occurrences([\"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"bye\"]))\n    print(word_occurrences([\"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"bye\", \"bye\"]))\n    print(word_occurrences([\"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"bye\", \"bye\", \"bye\"]))",
      1.1689453125
    ],
    [
      "from collections import Counter\n\n\ndef word_occurrence(words):\n    return Counter(words).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(word_occurrence([\"Hello\", \"Hello\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"]))",
      1.1328125
    ],
    [
      "from collections import Counter\n\n\ndef most_frequent_word(strings):\n    \"\"\"Return the word with the most number of occurrences in the given strings list.\n\n    Args:\n        strings (list): list of strings\n\n    Returns:\n        str: word with the most number of occurrences in the given strings list\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    assert most_frequent_word([\"a\", \"b\", \"c\", \"b\"]) == \"b\"\n    assert most_frequent_word([\"a\", \"b\", \"c\", \"b\", \"a\"]) == \"a\"",
      1.087890625
    ],
    [
      "from collections import Counter\n\ndef get_max_word(words):\n    \"\"\"\n    :param words: list of strings\n    :return: word with most number of occurrences\n    \"\"\"\n    counter = Counter()\n\n    for word in words:\n        counter[word] += 1\n\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == '__main__':\n    print(get_max_word([\"this\", \"is\", \"a\", \"test\", \"this\", \"is\", \"a\", \"test\"]))",
      1.064453125
    ],
    [
      "from collections import Counter\n\n\n# Time Complexity O(N), where N is the total number of characters in all strings\n# Space Complexity O(N)\ndef get_most_occuring_word(strings):\n    counter = Counter()\n    for s in strings:\n        counter.update(s.lower().split())\n\n    return counter.most_common(1)[0][0]\n\n\n# Time Complexity O(N), where N is the total number of characters in all strings\n# Space Complexity O(N)\ndef get_most_occuring_word_with_list(strings):\n    counter = []\n    for s in strings:\n        counter.extend(s.lower().split())\n\n    return Counter(counter).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    strings = [\"Hello World\", \"World\", \"World Hello\", \"Hello\", \"Hello Hello\"]\n    assert get_most_occuring_word(strings) == \"hello\"\n    assert get_most_occuring_word_with_list(strings) == \"hello\"",
      0.98193359375
    ],
    [
      "def most_occurrence_word(words: list) -> str:\n    \"\"\"Returns the word with most number of occurrences in the given strings list.\n\n    Args:\n        words (list): list of strings.\n\n    Examples:\n        >>> assert most_occurrence_word([\"this\", \"this\", \"this\", \"that\", \"that\"]) == \"this\"\n    \"\"\"\n    return max(words, key=words.count)\n\n\nif __name__ == \"__main__\":\n    print(most_occurrence_word([\"this\", \"this\", \"this\", \"that\", \"that\"]))",
      0.98046875
    ],
    [
      "from collections import Counter\n\n\ndef get_most_frequent(strings):\n    counter = Counter()\n    for string in strings:\n        counter.update(string.split())\n    return counter.most_common(1)[0]\n\n\nif __name__ == \"__main__\":\n    print(get_most_frequent([\"Hello world\", \"world\", \"hello hello\", \"hello\"]))",
      0.95654296875
    ],
    [
      "def most_occurring_word(strs):\n    \"\"\"\n    Return the word with the most occurrences in the given list of strings.\n    \"\"\"\n    return None\n\nif __name__ == '__main__':\n    # Run the doctests.\n    import doctest\n    doctest.testmod()",
      0.82861328125
    ],
    [
      "def word_occurrences(strings):\n    word_dict = {}\n\n    for string in strings:\n        for word in string.split():\n            word_dict[word] = word_dict.get(word, 0) + 1\n\n    return max(word_dict, key=word_dict.get)\n\n\nprint(word_occurrences(['hello world', 'world hello', 'world hello hello']))",
      0.80859375
    ],
    [
      "from collections import Counter\nfrom typing import List\n\n\ndef most_frequent(strings: List[str]) -> str:\n    \"\"\"Returns the word with most number of occurrences in the given strings list.\n\n    Args:\n        strings (List[str]): list of strings to check.\n\n    Examples:\n        >>> assert most_frequent([\"a\", \"b\", \"c\", \"a\"]) == \"a\"\n        >>> assert most_frequent([\"a\", \"b\", \"c\", \"b\"]) == \"b\"\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(most_frequent([\"a\", \"b\", \"c\", \"a\"]))",
      0.8076171875
    ],
    [
      "from collections import Counter\n\n\ndef most_occur(string_list):\n    \"\"\"\n    >>> most_occur([])\n\n    >>> most_occur([\"hello\", \"world\", \"hello\"])\n    hello\n    \"\"\"\n    c = Counter()\n    for s in string_list:\n        c[s] += 1\n    if not c:\n        return\n    max_count = max(c.values())\n    return min(\n        [word for word, count in c.items() if count == max_count]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.7119140625
    ],
    [
      "from collections import Counter\n\n\ndef most_occurring_word(strings):\n    \"\"\"\n    >>> most_occurring_word(['i love python i love java i love c++'])\n    'i'\n    >>> most_occurring_word(['i love python i love java i love c++ i love c++'])\n    'i'\n    >>> most_occurring_word(['i love python i love java i love c++ i love c++ i love c++'])\n    'i'\n    >>> most_occurring_word(['i love python i love java i love c++ i love c++ i love c++ i love c++'])\n    'i'\n    >>> most_occurring_word(['i love python i love java i love c++ i love c++ i love c++ i love c++ i love c++'])\n    'i'\n    \"\"\"\n    word_counter = Counter(strings[0].split())\n\n    for string in strings[1:]:\n        word_counter.update(string.split())\n\n    return max(word_counter, key=word_counter.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.626953125
    ],
    [
      "from collections import Counter\n\n\ndef most_occur(strings):\n    \"\"\"\n    >>> most_occur([\"I\", \"am\", \"batman\", \"I\", \"am\", \"Batman\", \"I\", \"am\", \"Batman\"])\n    'Batman'\n\n    >>> most_occur([\"I\", \"am\", \"batman\", \"I\", \"am\", \"Batman\", \"I\", \"am\", \"Batman\", \"I\", \"am\", \"Batman\"])\n    'Batman'\n\n    >>> most_occur([\"Batman\", \"is\", \"a\", \"great\", \"detective\"])\n    'Batman'\n\n    >>> most_occur([\"Batman\", \"is\", \"a\", \"great\", \"superhero\"])\n    'Batman'\n\n    >>> most_occur([\"Batman\", \"is\", \"a\", \"great\", \"sidekick\"])\n    'Batman'\n\n    >>> most_occur([\"Batman\", \"is\", \"a\", \"great\", \"sidekick\", \"and\", \"Robin\"])\n    'Batman'\n\n    >>> most_occur([\"Batman\", \"is\", \"a\", \"great\", \"sidekick\", \"and\", \"Robin\", \"and\", \"Superman\"])\n    'Batman'\n\n    >>> most_occur([\"Batman\", \"is\", \"a\", \"great\", \"sidekick\", \"and\", \"Robin\", \"and\", \"Superman\", \"and\", \"Wonder_Woman\"])\n    'Batman'\n\n    >>> most_occur([\"Batman\", \"is\", \"a\", \"great\", \"sidekick\", \"and\", \"Robin\", \"and\", \"Superman\", \"and\", \"Wonder_Woman\", \"and\", \"Aquaman\"])\n    'Batman'\n    \"\"\"\n    words = \" \".join(strings).split()\n    return Counter(words).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest",
      0.47314453125
    ],
    [
      "def word_count(string_list):\n    if not string_list:\n        return None\n\n    word_count = {}\n\n    for string in string_list:\n        for word in string.split():\n            word_count[word] = word_count.get(word, 0) + 1\n\n    return max(word_count, key=word_count.get)\n\n\nif __name__ == '__main__':\n    print(word_count([\"I love python\", \"I love java\", \"I love C\"]))",
      0.44921875
    ],
    [
      "from collections import Counter\n\n\ndef word_count(str_list):\n    \"\"\"Returns the word with most number of occurrences in the given strings list.\n\n    >>> word_count(['ab', 'ab', 'bc', 'bc', 'cd', 'cd'])\n    'bc'\n    >>> word_count(['a', 'a', 'b', 'b', 'c', 'c', 'c'])\n    'c'\n    >>> word_count(['a', 'a', 'b', 'b', 'c', 'c', 'c', 'c'])\n    'c'\n    \"\"\"\n    return Counter(str_list).most_common()[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      0.3232421875
    ],
    [
      "from collections import defaultdict\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef most_occur_word(words: list) -> str:\n    word_count = defaultdict(int)\n    for word in words:\n        word_count[word] += 1\n    return max(word_count, key=word_count.get)\n\n\nif __name__ == \"__main__\":\n    assert most_occur_word([\"i\", \"like\", \"a\", \"cat\"]) == \"cat\"\n    assert most_occur_word([\"i\", \"like\", \"a\", \"cat\", \"cat\"]) == \"cat\"\n    assert most_occur_word([\"i\", \"like\", \"a\", \"cat\", \"kat\", \"kat\"]) == \"kat\"\n    assert most_occur_word([\"i\", \"like\", \"a\", \"cat\", \"kat\", \"kat\"]) == \"kat\"",
      0.15625
    ],
    [
      "from collections import defaultdict\n\n\ndef word_with_most_occurrences(words: list) -> str:\n    \"\"\"Return word with most occurrences.\n\n    >>> word_with_most_occurrences([\"i\", \"like\", \"a\", \"cat\"])\n    'cat'\n    >>> word_with_most_occurrences([\"i\", \"like\", \"a\", \"cat\"])\n    'cat'\n    >>> word_with_most_occurrences([\"i\", \"like\", \"a\", \"cat\"])\n    'cat'\n    >>> word_with_most_occurrences([\"i\", \"like\", \"a\", \"cat\", \"cat\", \"cat\"])\n    'cat'\n    \"\"\"\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    return max(word_counts, key=word_counts.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.259521484375
    ],
    [
      "from collections import Counter\n\n\ndef get_word_with_most_occurrences(words):\n    \"\"\"\n    :param words: list of strings\n    :return: string with most number of occurrences\n    \"\"\"\n    if not words:\n        return None\n    counter = Counter(words)\n    most_occurring_word = counter.most_common(1)[0][0]\n    return most_occurring_word\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = get_word_with_most_occurrences(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([\"hello\", \"world\", \"hello\"], \"hello\"))\ntest_function(([\"cat\", \"dog\", \"cat\", \"dog\"], \"cat\"))\ntest_function(([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\"], \"cat\"))\ntest_function(([\"cat\", \"dog\", \"cat\", \"dog\", \"dog\"], \"dog\"))\ntest_function(([\"cat\", \"dog\", \"cat\", \"dog\", \"dog\", \"dog\"], \"dog\"))\ntest_function(([\"cat\", \"dog\", \"cat\", \"dog\", \"dog\", \"dog\", \"dog\"], \"dog\"))\ntest_function(([\"cat\", \"dog\", \"cat\", \"dog\", \"dog\", \"dog\", \"cat\"], \"cat\"))\ntest_function(([\"cat\", \"dog\", \"cat\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\"], \"dog\"))\ntest_function(([\"cat\", \"dog\", \"cat\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\"], \"dog\"))\ntest_function(([], None))\ntest_function(([\"\"], None))\ntest_function(([\" \"], None))\ntest_function(([\"  \", \"  \"], None))\ntest_function(([\"   \", \"   \", \"  \"], None))\ntest_function(([\"cat\", \"dog\", \"cat\", \"dog\", \"cat\", \"dog\", \"cat\", \"dog\", \"cat\", \"dog\"], \"cat\"))\ntest_function",
      -0.42724609375
    ],
    [
      "from collections import Counter\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef most_occurrence(strings):\n    count = Counter()\n    for string in strings:\n        count.update(string.lower().split())\n    return count.most_common(1)\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef most_occurrence_2(strings):\n    count = {}\n    for string in strings:\n        for word in string.lower().split():\n            if word in count:\n                count[word] += 1\n            else:\n                count[word] = 1\n    most_occurrence_word = None\n    most_occurrence_count = 0\n    for word, count in count.items():\n        if count > most_occurrence_count:\n            most_occurrence_word = word\n            most_occurrence_count = count\n    return most_occurrence_word\n\n\nif __name__ == \"__main__\":\n    assert most_occurrence([\"Hello how are you\", \"Hello how are you\", \"Hello how are you\"]) == [('hello', 3)]\n    assert most_occurrence([\"Hello how are you\", \"Hello how are you\", \"Hello how are you\", \"Hi how are you\"]) == [\n        ('how', 3), ('are', 3), ('you', 3), ('hello', 3), ('hi', 1)]\n    assert most_occurrence([\"Hello how are you\", \"Hello how are you\", \"Hello how are you\", \"Hi how are you\", \"Hi\"]) == [\n        ('how', 3), ('are', 3), ('you', 3), ('hello', 3), ('hi', 2)]\n    assert most_occurrence_2([\"Hello how are you\", \"Hello how are you\", \"Hello how are you\", \"Hi how are you\", \"Hi\"]) == \\\n           'how'\n    assert most_occurrence_2([\"Hello how are you\", \"Hello how are you\", \"Hello how are you\", \"Hi how are you\", \"Hi\"]) == \\\n           'hi'",
      -0.56982421875
    ],
    [
      "from collections import defaultdict\n\n\ndef get_most_frequent_word(strings):\n    \"\"\"Returns the word with most number of occurrences in the given strings list.\n\n    Args:\n        strings(list): list of strings\n\n    Returns:\n        str: word with most number of occurrences\n\n    Raises:\n        TypeError: if strings is not a list\n\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"strings must be a list\")\n\n    words_count = defaultdict(int)\n    for string in strings:\n        if not isinstance(string, str):\n            raise TypeError(\"strings must be a list of strings\")\n\n        for word in string.split():\n            words_count[word] += 1\n\n    return max(words_count, key=words_count.get)\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [\"Hello world\", \"world\", \"Hello world world\"],\n        [\"Hello\", \"world\", \"Hello world\"],\n        [\"Hello world world world\", \"Hello world world\", \"Hello world\"],\n    ]\n    for test_case in test_cases:\n        print(get_most_frequent_word(test_case))",
      -0.76513671875
    ],
    [
      "def word_counter(strings):\n    d = {}\n    for string in strings:\n        for word in string.split(\" \"):\n            if word not in d:\n                d[word] = 1\n            else:\n                d[word] += 1\n    return max(d, key=d.get)\n\n\nprint(word_counter([\"hey\", \"hello\", \"hey\", \"hey\"]))\nprint(word_counter([\"hey\", \"hello\", \"hey\", \"hey\", \"hi\", \"hi\", \"hi\"]))\nprint(word_counter([\"hey\", \"hello\", \"hey\", \"hey\", \"hi\", \"hi\"]))",
      -0.85595703125
    ],
    [
      "from collections import Counter\n\n\ndef most_occurring_word(strings):\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(most_occurring_word([\"a\", \"b\", \"a\", \"c\", \"d\", \"d\", \"a\"]))",
      -0.85595703125
    ],
    [
      "def most_occurring_word(strings):\n    if not strings:\n        return None\n\n    word_count = {}\n    for string in strings:\n        string = string.lower()\n        string = string.replace(\" \", \"\")\n        for word in string.split(\",\"):\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n\n    return max(word_count, key=word_count.get)\n\n\nif __name__ == \"__main__\":\n    print(most_occurring_word([\"hello world\", \"hello\", \"world\"]))\n    print(most_occurring_word([\"hello world\", \"hello\", \"world\", \"world\"]))\n    print(most_occurring_word([]))",
      -0.85693359375
    ],
    [
      "from collections import Counter\n\n\ndef word_occurrence(strings):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    counter = Counter(strings)\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    test_data = [\"hey\", \"hello\", \"hey\", \"hi\", \"hey\", \"hi\", \"hello\", \"hey\", \"hi\", \"hey\"]\n    assert word_occurrence(test_data) == \"hey\"",
      -0.85693359375
    ],
    [
      "def most_occurrence(string_list):\n    string_list = string_list.split()\n    string_dict = {}\n    for word in string_list:\n        if word in string_dict:\n            string_dict[word] += 1\n        else:\n            string_dict[word] = 1\n    max_value = max(string_dict.values())\n    max_key = [key for key, value in string_dict.items() if value == max_value]\n    return max_key\n\n\nprint(most_occurrence(\"I am not a not a good boy. I am a good boy.\"))\nprint(most_occurrence(\"I am not a not a good boy. I am a good boy.\"))\nprint(most_occurrence(\"I am not a not a good boy. I am a good boy.\"))",
      -0.85693359375
    ],
    [
      "from collections import Counter\n\n\ndef word_count(strings):\n    return Counter(strings).most_common(1)[0][0]\n\n\ndef test():\n    strings = [\n        \"I love python\",\n        \"I love python\",\n        \"I love python\",\n        \"I love javascript\",\n        \"I love python\",\n        \"I love javascript\",\n        \"I love python\",\n    ]\n    assert word_count(strings) == \"python\"\n\n\nif __name__ == \"__main__\":\n    test()",
      -0.85693359375
    ],
    [
      "from collections import Counter\n\n\ndef most_common_word(sentences):\n    \"\"\"Return the most common word in the list of sentences.\"\"\"\n    words = []\n    for sentence in sentences:\n        for word in sentence.split():\n            words.append(word.lower())\n    return Counter(words).most_common(1)[0][0]",
      -0.85693359375
    ],
    [
      "from collections import Counter\n\n\ndef most_frequent(strs):\n    \"\"\"\n    Return the word with the most occurrences in the given strings list.\n    \"\"\"\n    str_counter = Counter()\n    for string in strs:\n        str_counter.update(string.split())\n    return str_counter.most_common(1)[0][0]",
      -0.85693359375
    ],
    [
      "from collections import Counter\n\n\n# Time Complexity O(n)\n# Space Complexity O(n)\ndef word_with_most_occurrences(strings):\n    counter = Counter(strings)\n    most_common_word = counter.most_common(1)[0][0]\n    return most_common_word\n\n\nprint(word_with_most_occurrences([\"hello\", \"world\", \"hello\"]))",
      -0.85791015625
    ],
    [
      "def word_count(strings):\n    word_dict = {}\n    for string in strings:\n        string = string.lower()\n        for word in string.split():\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n    return word_dict\n\n\ndef main():\n    strings = [\"I like python\", \"python is a very good language\", \"I like python language\", \"python language is very easy to learn\", \"I love python\", \"python is a dynamic language\", \"I like python language very much\", \"python language is easy to learn\"]\n    word_dict = word_count(strings)\n    print(word_dict)\n\n\nif __name__ == '__main__':\n    main()",
      -0.85791015625
    ],
    [
      "from collections import Counter\n\n\ndef most_occurring(strings):\n    \"\"\"Returns the most occuring word in a list of strings.\"\"\"\n    if len(strings) < 1:\n        return None\n\n    if len(strings) == 1:\n        return strings[0]\n\n    c = Counter(strings)\n    return c.most_common(1)[0][0]",
      -0.85791015625
    ],
    [
      "from collections import Counter\n\n\ndef get_most_occur_word(words):\n    word_count = Counter(words)\n    return word_count.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    assert get_most_occur_word([\"happy\", \"happy\", \"not\", \"unhappy\"]) == \"happy\"",
      -0.85791015625
    ],
    [
      "from collections import Counter\n\n\ndef word_count(strings):\n    cnt = Counter()\n    for string in strings:\n        for word in string.split():\n            cnt[word] += 1\n    return cnt.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(word_count([\"Hello world\", \"world\", \"world hello\"]))",
      -0.85791015625
    ],
    [
      "def word_count(strings: list) -> str:\n    \"\"\"Return the word with most number of occurrences in the given strings list.\n\n    >>> word_count([\"Hello World\", \"Hello Hello World\"])\n    'Hello'\n    \"\"\"\n    words = {}\n    for string in strings:\n        for word in string.split():\n            words[word] = words.get(word, 0) + 1\n\n    max_word = max(words, key=words.get)\n    return max_word\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85791015625
    ],
    [
      "from collections import Counter\n\n\ndef get_most_occur_word(strings):\n    \"\"\"\n    Get the word with most number of occurrences in the given strings list.\n\n    :param strings: list of strings to be checked.\n    :return: word with most number of occurrences.\n    \"\"\"\n    word_count = Counter()\n    for string in strings:\n        word_count.update(string.split())\n    return word_count.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    strings = [\"The quick brown fox jumps over the lazy dog\",\n               \"Python Exercises\",\n               \"python exercises python\"]\n    print(get_most_occur_word(strings))",
      -0.85791015625
    ],
    [
      "from collections import Counter\n\n\ndef get_most_occurred_word(string_list):\n    \"\"\"\n    Get the word with most number of occurrences in the given strings list.\n\n    :param string_list: List of strings.\n    :return: The word with most number of occurrences.\n\n    >>> get_most_occurred_word(['hello', 'world', 'hello', 'hello'])\n    'hello'\n    \"\"\"\n    return Counter(string_list).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef most_frequent_word(strings):\n    \"\"\"Return the word with most number of occurrences in the given strings list.\n\n    Args:\n        strings(list): list of strings\n\n    Returns:\n        word(str): word with most number of occurrences\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(most_frequent_word([\"a\", \"a\", \"a\", \"b\", \"b\", \"c\"]))",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef word_count(strings):\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    assert word_count([\"word\", \"b\", \"word\"]) == \"word\"",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef get_most_common_word(strings):\n    \"\"\"Return the word with most number of occurrences in the given strings list.\n\n    Args:\n        strings (list): list of strings\n\n    Examples:\n        >>> assert get_most_common_word(['apple', 'apple', 'apple', 'banana', 'apple']) == 'apple'\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == '__main__':\n    print(get_most_common_word(['apple', 'apple', 'apple', 'banana', 'apple']))",
      -0.8583984375
    ],
    [
      "def get_most_common_word(strings):\n    \"\"\"Returns the word with most number of occurrences in the given strings list.\"\"\"\n    # TODO: Write your solution here\n    word_dict = {}\n    for string in strings:\n        words = string.split()\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    max_count = max(word_dict.values())\n    for word, count in word_dict.items():\n        if count == max_count:\n            return word\n\n\nprint(get_most_common_word([\"hello there\", \"hello\", \"hi\", \"hello\", \"hi\"]))\nprint(get_most_common_word([\"a\", \"b\", \"a\"]))\nprint(get_most_common_word([\"a\", \"b\", \"a\", \"b\", \"a\"]))",
      -0.8583984375
    ],
    [
      "from collections import defaultdict\n\n\ndef word_occurrences(words):\n    word_count = defaultdict(int)\n\n    for word in words:\n        word_count[word] += 1\n\n    return word_count\n\n\nif __name__ == \"__main__\":\n    print(word_occurrences([\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"world\", \"world\", \"world\", \"hello\"]))",
      -0.8583984375
    ],
    [
      "from collections import defaultdict\n\n\ndef most_frequent(strings):\n    word_count = defaultdict(int)\n\n    for string in strings:\n        for word in string.split():\n            word_count[word] += 1\n\n    return max(word_count, key=word_count.get)\n\n\nif __name__ == \"__main__\":\n    print(most_frequent([\"I love dogs\", \"I love cat\", \"I love cat\"]))",
      -0.8583984375
    ],
    [
      "from collections import defaultdict\n\n\ndef word_count(strings):\n    words = defaultdict(int)\n    for string in strings:\n        for word in string.split():\n            words[word] += 1\n    return max(words, key=words.get)\n\n\nif __name__ == \"__main__\":\n    print(word_count([\"cat\", \"dog\", \"dog\", \"cat\", \"dog\", \"mouse\", \"cat\"]))",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef word_with_max_occurrence(words_list):\n    counter = Counter()\n    for word in words_list:\n        counter.update(word.split())\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(word_with_max_occurrence([\"I am a boy\", \"I am a boy\", \"I am a girl\", \"She is a girl\"]))",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef word_count(strings):\n    counter = Counter(strings)\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    assert word_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"d\", \"c\", \"b\", \"a\"]) == \"a\"\n    assert word_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"d\", \"c\", \"b\", \"a\", \"a\"]) == \"a\"\n    assert word_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"d\", \"c\", \"b\", \"a\", \"a\", \"b\"]) == \"b\"",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef most_occurrence(arr):\n    word_count = Counter()\n    for word in arr:\n        word_count[word] += 1\n\n    return word_count.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    arr = [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"b\", \"c\", \"a\"]\n    print(most_occurrence(arr))",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef word_count(strs):\n    return Counter(strs).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(word_count([\"I\", \"like\", \"big\", \"butts\", \"and\", \"I\", \"like\", \"ass\", \"too\"]))",
      -0.8583984375
    ],
    [
      "from collections import Counter\n\n\ndef word_with_most_occurrences(strings):\n    \"\"\"\n    >>> word_with_most_occurrences(['a', 'b', 'a', 'c', 'a', 'c', 'a'])\n    'a'\n\n    >>> word_with_most_occurrences(['a', 'b', 'c', 'd'])\n    'None'\n\n    >>> word_with_most_occurrences(['a', 'b', 'c', 'd', 'c'])\n    'c'\n\n    >>> word_with_most_occurrences([''])\n    'None'\n\n    >>> word_with_most_occurrences(None)\n    'None'\n    \"\"\"\n    if not strings or len(strings) == 0:\n        return \"None\"\n\n    counter = Counter(strings)\n    return max(counter, key=counter.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "from collections import Counter\n\n\ndef word_counter(words):\n    return Counter(words).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(word_counter([\"i\", \"like\", \"a\", \"cat\", \"dog\", \"cat\", \"cat\"]))",
      -0.85888671875
    ],
    [
      "from collections import Counter\n\n\n# Time Complexity O(n*m), n=no of strings, m=max length of a string\n# Space Complexity O(1)\ndef get_max_occurrence(strings: list):\n    \"\"\"\n    >>> get_max_occurrence(['a', 'b', 'c', 'a', 'b', 'a'])\n    'a'\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()",
      -0.85888671875
    ],
    [
      "def most_frequent_word(strings):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param strings: list[str]\n    :return: str\n    \"\"\"\n    count = {}\n    for word in strings:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    return max(count, key=count.get)",
      -0.85888671875
    ],
    [
      "def get_most_occur_word(words: list) -> str:\n    \"\"\"\n    Returns the word with most number of occurrences in the given strings list.\n    >>> get_most_occur_word([\"I\", \"am\", \"batman\", \"batman\", \"batman\", \"batman\", \"batman\"])\n    'batman'\n    >>> get_most_occur_word([\"batman\", \"is\", \"the\", \"greatest\", \"batman\", \"in\", \"the\", \"world\"])\n    'batman'\n    >>> get_most_occur_word([\"I\", \"am\", \"batman\", \"batman\", \"batman\", \"batman\", \"batman\", \"and\", \"I\", \"am\", \"batman\"])\n    'batman'\n    \"\"\"\n    # get the word with most number of occurrences\n    return max(words, key=words.count)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -0.85888671875
    ],
    [
      "from collections import Counter\n\n\ndef get_most_frequent_word(strings):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    if not strings:\n        return \"\"\n\n    counter = Counter()\n\n    for string in strings:\n        for word in string.split():\n            counter[word] += 1\n\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(get_most_frequent_word([\"\", \"a\", \"ab\", \"ac\", \"a\", \"ac\", \"b\"]))",
      -0.87890625
    ],
    [
      "from collections import defaultdict\n\n\ndef word_counter(strings):\n    \"\"\"\n    :param strings: list of strings\n    :return: string with max number of occurrences\n    \"\"\"\n    count = defaultdict(int)\n    for string in strings:\n        for word in string.split():\n            count[word] += 1\n    return max(count, key=count.get)\n\n\nif __name__ == '__main__':\n    print(word_counter(['this is a test', 'this is a test', 'this is a another test', 'this is']))",
      -0.92822265625
    ],
    [
      "from collections import Counter\n\n\ndef most_occurring_word(str_list):\n    # return word with most number of occurrences in the given strings list.\n    # count the number of occurrences of the word in the string\n    # get the max value\n    # return the word with max occurrences\n    counter = Counter()\n    for s in str_list:\n        counter.update(s.split())\n\n    return counter.most_common(1)[0][0]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = most_occurring_word(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([\"best best best best best\"], \"best\"))\ntest_function(([\"best best best best best\", \"best best best best best\", \"best best best best best\"], \"best\"))\ntest_function(([\"best best best best best\", \"best best best best best\", \"best best best best best\", \"best\"], \"best\"))\ntest_function(([\"best best best best best\", \"best best best best best\", \"best best best best best\", \"best best\"], \"best\"))\ntest_function(([\"best best best best best\", \"best best best best best\", \"best best best best best\", \"best best best\"], \"best\"))\ntest_function(([\"best best best best best\", \"best best best best best\", \"best best best best best\", \"best best best best\"], \"best\"))\ntest_function(([\"best best best best best\", \"best best best best best\", \"best best best best best\", \"best best best best best\"], \"best\"))\ntest_function(([\"best best best best best\", \"best best best best best\", \"best best best best best\", \"best best best best best\"], \"best\"))\ntest_function(([\"best best best best best\", \"best best best best best\", \"best best best best best\", \"best best best best best\", \"best best best best best\"], \"best\"))\ntest_function(([\"best best best best best\", \"best best best best best\", \"best best best best best\", \"best best best best best\", \"best",
      -0.96923828125
    ],
    [
      "from collections import Counter\n\n\ndef word_counter(strings: list) -> str:\n    \"\"\"Returns the word with most number of occurrences in the given strings list.\n\n    Args:\n        strings (list): list of strings.\n\n    Examples:\n        >>> assert word_counter([\"Hello\", \"Hello\", \"World\", \"Python\", \"World\"]) == \"Hello\"\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(word_counter([\"Hello\", \"Hello\", \"World\", \"Python\", \"World\"]))",
      -1.041015625
    ],
    [
      "def most_occurrences_word(string_list):\n    \"\"\"\n    >>> most_occurrences_word(['abc', 'abc', 'abcd', 'abc'])\n    'abc'\n    >>> most_occurrences_word(['abc', 'abc', 'abcd', 'abc', 'abcd'])\n    'abcd'\n    \"\"\"\n    # Find the word with most number of occurrences\n    # in the given strings list\n    #\n    # Use a dictionary to store the count of each word\n    # and then find the word with max count\n\n    word_count = {}\n\n    for string in string_list:\n        words = string.split()\n\n        for word in words:\n            word_count[word] = word_count.get(word, 0) + 1\n\n    max_word = \"\"\n    max_count = 0\n\n    for word, count in word_count.items():\n        if count > max_count:\n            max_word = word\n            max_count = count\n\n    return max_word\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.05859375
    ],
    [
      "from collections import Counter\n\n\ndef most_frequent_word(words):\n    word_count = Counter(words)\n    return word_count.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(most_frequent_word([\"lambda\", \"school\", \"is\", \"awesome\", \"awesome\"]))\n    print(most_frequent_word([\"a\", \"a\", \"a\", \"b\", \"b\", \"c\"]))",
      -1.1162109375
    ],
    [
      "from collections import Counter\n\n\ndef word_count(strings):\n    words = [word for string in strings for word in string.split()]\n    word_counter = Counter(words)\n    return word_counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    assert word_count([\"Hello world\", \"hello hello\", \"world\"]) == \"hello\"",
      -1.216796875
    ],
    [
      "def get_most_common_word(strings):\n    \"\"\"\n    :param strings: list of strings\n    :return: most common word\n\n    >>> get_most_common_word(['abcd', 'abcd', 'cdef', 'cdef'])\n    'cdef'\n    \"\"\"\n    # your code here\n    word_dict = {}\n    for string in strings:\n        for word in string.split():\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n    return max(word_dict, key=word_dict.get)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.2412109375
    ],
    [
      "def most_occurring_word(string_list):\n    \"\"\"\n    >>> most_occurring_word(['The quick brown fox jumped over the lazy dog.'])\n    'the'\n    >>> most_occurring_word(['The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.'])\n    'the'\n    >>> most_occurring_word(['The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.'])\n    'the'\n    >>> most_occurring_word(['The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.'])\n    'the'\n    >>> most_occurring_word(['The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.'])\n    'the'\n    >>> most_occurring_word(['The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.'])\n    'the'\n    >>> most_occurring_word(['The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.', 'The quick brown fox jumped over the lazy dog.'])",
      -1.6220703125
    ],
    [
      "# O(n) time | O(n) space\ndef mostCommonWord(sentence):\n    words = sentence.split()\n    mostCommonWord = \"\"\n    count = 0\n    wordMap = {}\n    for word in words:\n        word = word.lower()\n        if word not in wordMap:\n            wordMap[word] = 1\n        else:\n            wordMap[word] += 1\n        if wordMap[word] > count:\n            mostCommonWord = word\n            count = wordMap[word]\n    return mostCommonWord",
      -1.896484375
    ],
    [
      "from collections import Counter\n\n\ndef most_occur_word(words):\n    return Counter(words).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"a\", \"b\", \"a\", \"c\", \"b\"], \"a\"),\n        ([\"a\", \"b\", \"a\", \"a\", \"c\", \"b\"], \"a\"),\n        ([\"a\", \"b\", \"a\", \"a\", \"a\", \"c\", \"b\"], \"a\"),\n    ]\n    for test_case, expected_result in test_cases:\n        assert most_occur_word(test_case) == expected_result",
      -1.9765625
    ],
    [
      "from collections import Counter\n\n\n# Time complexity O(n)\n# Space complexity O(n)\ndef word_count(str_list):\n    word_count_dict = Counter()\n    for s in str_list:\n        for word in s.split():\n            word_count_dict[word] += 1\n    return word_count_dict.most_common(1)[0]\n\n\n# Time complexity O(n*m)\n# Space complexity O(n)\ndef word_count(str_list):\n    word_count_dict = {}\n    for s in str_list:\n        for word in s.split():\n            word_count_dict[word] = word_count_dict.get(word, 0) + 1\n    return max(word_count_dict, key=word_count_dict.get)",
      -1.98046875
    ],
    [
      "from collections import Counter\n\n\ndef most_occur(strings):\n    \"\"\"\n    >>> most_occur([\"I am a boy\", \"I am a girl\", \"I am a boy\", \"I am a girl\", \"I am a boy\", \"I am a girl\", \"I am a boy\", \"I am a girl\", \"I am a boy\", \"I am a girl\"])\n    'I am a girl'\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -1.990234375
    ],
    [
      "from collections import Counter\n\n\ndef word_counter(strings):\n    if strings is None:\n        return None\n\n    count = Counter()\n\n    for string in strings:\n        words = string.split()\n        count.update(words)\n\n    return count.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"abc\", \"abc abc\", \"abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\", \"abc abc abc\", \"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\"], \"abc\"),\n        ([\"abc\", \"abc abc\",",
      -2.07421875
    ],
    [
      "def most_occur(strings):\n    \"\"\"\n    >>> most_occur(['i','like','this','program','very','much'])\n    'like'\n\n    >>> most_occur(['i','like','this','program','very','much','like','this'])\n    'like'\n\n    >>> most_occur(['this','is','a','test','case'])\n    'is'\n\n    >>> most_occur(['this','is','a','test','case','is'])\n    'is'\n\n    >>> most_occur(['this','is','a','test','case','is','this'])\n    'is'\n\n    >>> most_occur(['this','is','a','test','case','is','this','is'])\n    'is'\n\n    >>> most_occur(['this','is','a','test','case','is','this','is','this'])\n    'this'\n\n    >>> most_occur(['this','is','a','test','case','is','this','is','this','is'])\n    'is'\n    \"\"\"\n    result = ''\n    max_occur = 0\n    word_dict = {}\n    for string in strings:\n        for word in string.split():\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n    for word in word_dict:\n        if word_dict[word] > max_occur:\n            max_occur = word_dict[word]\n            result = word\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.08203125
    ],
    [
      "def word_occurrences(strings):\n    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    words = strings[0].split()\n    for i in range(1, len(strings)):\n        words += strings[i].split()\n    words_dict = {}\n    for word in words:\n        if word not in words_dict:\n            words_dict[word] = 1\n        else:\n            words_dict[word] += 1\n    return max(words_dict, key=words_dict.get)\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(word_occurrences(['i like apples', 'i like oranges', 'i like grapes', 'i like apples', 'i like apples', 'i like apples', 'i like apples']))\n\n    #These \"asserts\" are used for self-checking and not for an auto-testing\n    assert word_occurrences(['i like apples', 'i like oranges', 'i like grapes', 'i like apples', 'i like apples', 'i like apples', 'i like apples']) == 'apples'\n    assert word_occurrences(['apples are tasty', 'apples are tasty', 'oranges are ugly', 'oranges are ugly', 'grapes are big', 'grapes are big', 'apples are tasty', 'apples are tasty', 'apples are tasty', 'oranges are ugly']) == 'apples'\n    assert word_occurrences(['apples are tasty', 'oranges are ugly', 'grapes are big', 'apples are tasty', 'oranges are ugly', 'grapes are big', 'apples are tasty', 'oranges are ugly', 'grapes are big', 'apples are tasty', 'oranges are ugly', 'grapes are big']) == 'oranges'\n    assert word_occurrences(['apples are tasty', 'oranges are ugly', 'grapes are big', 'apples are tasty",
      -2.138671875
    ],
    [
      "def max_occur(strings):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    word_count = {}\n    for string in strings:\n        words = string.split()\n        for word in words:\n            if word not in word_count:\n                word_count[word] = 1\n            else:\n                word_count[word] += 1\n\n    return max(word_count, key=word_count.get)\n\nprint(max_occur([\"I like eating ice cream\", \"I like eating ice cream\", \"I like eating ice cream\", \"I like eating ice cream\", \"I like eating ice cream\"]))",
      -2.359375
    ],
    [
      "from collections import Counter\n\n\ndef word_counter(strings):\n    \"\"\"\n    >>> word_counter([\"The quick brown fox jumps over the lazy dog\", \"The quick brown fox jumped over the lazy hog\", \"The quick brown fox jumped over the lazy hog\", \"The quick brown fox jumped over the lazy hog\"])\n    'jumped'\n    \"\"\"\n    word_count = Counter()\n    for string in strings:\n        for word in string.split():\n            word_count[word] += 1\n    return word_count.most_common()[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -2.38671875
    ],
    [
      "def most_occurrence(strings):\n    \"\"\"Return the word with most number of occurrences in the given strings list.\n\n    >>> most_occurrence(['apple', 'apple', 'banana', 'banana', 'banana', 'coconut'])\n    'banana'\n\n    >>> most_occurrence(['apple', 'banana', 'banana', 'coconut', 'coconut'])\n    'banana'\n\n    >>> most_occurrence(['apple', 'banana', 'coconut', 'coconut'])\n    'coconut'\n\n    >>> most_occurrence(['apple', 'banana', 'coconut'])\n    'banana'\n\n    >>> most_occurrence(['apple', 'banana', 'coconut', 'coconut', 'coconut'])\n    'coconut'\n\n    >>> most_occurrence(['apple', 'apple', 'banana', 'banana', 'banana'])\n    'banana'\n    \"\"\"\n    # return most_occurrence_dict(strings)\n    return most_occurrence_dict_2(strings)\n\n\ndef most_occurrence_dict(strings):\n    \"\"\"Return the word with most number of occurrences in the given strings list.\n\n    >>> most_occurrence_dict(['apple', 'apple', 'banana', 'banana', 'banana', 'coconut'])\n    'banana'\n\n    >>> most_occurrence_dict(['apple', 'banana', 'banana', 'coconut', 'coconut'])\n    'banana'\n\n    >>> most_occurrence_dict(['apple', 'banana', 'coconut', 'coconut'])\n    'coconut'\n\n    >>> most_occurrence_dict(['apple', 'banana', 'coconut', 'coconut', 'coconut'])\n    'coconut'\n\n    >>> most_occurrence_dict(['apple', 'apple', 'banana', 'banana', 'banana'])\n    'banana'\n    \"\"\"\n    # Time complexity O(n)\n    # Space complexity O(n)\n    word_count = {}\n    for string in strings:\n        if string not in",
      -2.490234375
    ],
    [
      "def word_occurrences(strings):\n    word_count = {}\n    for string in strings:\n        words = string.split()\n        for word in words:\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n    return word_count\n\n\ndef main():\n    print(word_occurrences([\"i am a boy\", \"boy you are a boy\", \"she is a girl\", \"a girl is a girl\"]))\n\n\nif __name__ == '__main__':\n    main()",
      -2.78515625
    ],
    [
      "from collections import Counter\n\ndef word_with_most_occurences(words):\n    \"\"\"\n\n    :param words: list of strings\n    :return: string\n    \"\"\"\n\n    if not words:\n        return None\n\n    word_count = Counter()\n\n    for word in words:\n        word_count[word] += 1\n\n    return word_count.most_common(1)[0][0]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = word_with_most_occurences(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([\"hello\", \"world\", \"hello\", \"hi\", \"world\", \"hello\", \"hello\"], \"hello\"))\ntest_function(([\"a\", \"b\", \"c\", \"d\", \"e\", \"a\", \"b\", \"c\", \"d\", \"e\"], \"e\"))\ntest_function(([\"aaa\", \"aa\", \"bbb\", \"bb\", \"bbb\", \"bbb\", \"bb\", \"bb\", \"a\", \"aa\", \"bb\", \"bbb\"], \"bbb\"))\ntest_function(([\"aaa\", \"bbb\", \"bbb\", \"bbb\", \"bbb\", \"bbb\", \"bb\", \"bb\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"], \"aaa\"))\ntest_function(([\"aaa\", \"bbb\", \"bbb\", \"bbb\", \"bbb\", \"bbb\", \"bb\", \"bb\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aa",
      -2.9609375
    ],
    [
      "# O(n*m) where n is the length of the words list and m is the length of the longest string in the list\ndef get_word_with_most_occurrences(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    return max(word_count, key=word_count.get)\n\n\nif __name__ == \"__main__\":\n    print(get_word_with_most_occurrences([\"I\", \"love\", \"coding\", \"coding\", \"coding\", \"I\", \"love\", \"coding\"]))",
      -3.080078125
    ],
    [
      "from collections import Counter\n\n\ndef get_most_occurring_word(strings):\n    \"\"\"\n    >>> get_most_occurring_word(['a', 'b', 'c', 'd', 'a'])\n    'a'\n    >>> get_most_occurring_word(['a', 'b', 'c', 'd', 'a', 'b'])\n    'b'\n    >>> get_most_occurring_word(['a', 'b', 'c', 'd', 'a', 'b', 'c'])\n    'c'\n    \"\"\"\n    word_count = Counter(strings)\n    return word_count.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -3.447265625
    ],
    [
      "from collections import Counter\n\n\ndef word_counter(strs):\n    word_counts = Counter(strs)\n    return word_counts.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    assert word_counter([\"hello\", \"world\", \"hello\"]) == \"hello\"",
      -5.14453125
    ],
    [
      "def word_count(words):\n    \"\"\"Returns the word with most number of occurrences in the given strings list.\"\"\"\n    d = {}\n    for word in words:\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n\n    max_word = ''\n    for key in d:\n        if d[key] > d[max_word]:\n            max_word = key\n\n    return max_word\n\n\ndef main():\n    words = [\n        'hello', 'world', 'hello', 'hello', 'hello',\n        'hello', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'hello', 'hello',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world', 'world',\n        'world', 'world', 'world', 'world',",
      -6.3125
    ],
    [
      "from collections import Counter\n\n\ndef word_count(strings):\n    \"\"\"Returns the word with most number of occurrences in the given strings list.\n\n    >>> word_count([\"hello world\", \"world\", \"hello\"])\n    'hello'\n    >>> word_count([\"dog\", \"dog\", \"cat\"])\n    'dog'\n    >>> word_count([\"\", \"hello\", \"world\"])\n    'hello'\n    >>> word_count([\"world\"])\n    'world'\n    >>> word_count([\"hello\"])\n    'hello'\n    >>> word_count([])\n    ''\n    \"\"\"\n    return Counter(strings).most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      -8.078125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 50,
    "inference_batch_size": 256,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_new_tokens": 512,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}