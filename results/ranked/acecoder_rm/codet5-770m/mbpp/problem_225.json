{
  "problem": {
    "task_id": "MBPP/236",
    "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
    "test_list": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ],
    "challenge_test_list": [],
    "problem_id": 225
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def max_equilateral_triangle(n):\n    if n <= 1:\n        return 0\n    else:\n        return (n*(n+1)/2)\n\n\nprint(max_equilateral_triangle(6))",
      0.60693359375
    ],
    [
      "def max_equilateral_triangles(n):\n    return max(\n        (n*(n-1)*(2*n))/6,\n        (n*(n-1)*(4*n))/9,\n        (n*(n-1)*(8*n))/16)\n\nprint(max_equilateral_triangles(int(input())))",
      0.2095947265625
    ],
    [
      "def max_equilateral_triangles(a, b, c):\n    # Your code here\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    return 1 + max(max_equilateral_triangles(a - 1, b, c), max_equilateral_triangles(a, b - 1, c - 1))\n\n\nif __name__ == '__main__':\n    print(max_equilateral_triangles(3, 2, 2))",
      0.03759765625
    ],
    [
      "def max_equilateral_triangles(n):\n    if n <= 2:\n        return n\n    else:\n        return max_equilateral_triangles(n - 1) + max_equilateral_triangles(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(max_equilateral_triangles(5))",
      -0.1092529296875
    ],
    [
      "def equilateral_triangles(n):\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(equilateral_triangles(3))\nprint(equilateral_triangles(4))\nprint(equilateral_triangles(5))\nprint(equilateral_triangles(10))",
      -0.28564453125
    ],
    [
      "def equilateral_triangle(n):\n    a = 0\n    b = 0\n    c = 0\n    for i in range(n):\n        a += 1\n        b += 1\n        c += 1\n\n    if a == b and a == c:\n        return 0\n    elif b == c:\n        return 1\n    else:\n        return 2\n\n\nprint(equilateral_triangle(3))\nprint(equilateral_triangle(6))\nprint(equilateral_triangle(7))\nprint(equilateral_triangle(8))\nprint(equilateral_triangle(9))\nprint(equilateral_triangle(10))",
      -0.85693359375
    ],
    [
      "def max_equilateral_triangle(n):\n    # Your code here\n    max_triangle = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if i == j:\n                continue\n            if i+j==n:\n                max_triangle += 1\n    return max_triangle\n\n\nprint(max_equilateral_triangle(5))",
      -0.85693359375
    ],
    [
      "def max_equilateral_triangles(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    count = 1\n    for i in range(2, n):\n        for j in range(2, i):\n            count += (i-j)**2\n\n    return count\n\n\nprint(max_equilateral_triangles(5))",
      -0.85693359375
    ],
    [
      "def equilateral_triangle(a, b, c):\n    if a < b + c and a < b - c and a < b * c:\n        return a * b * c\n    else:\n        return 0\n\n\na = int(input(\"Enter the number of sides of a triangle: \"))\nb = int(input(\"Enter the number of sides of b triangle: \"))\nc = int(input(\"Enter the number of sides of c triangle: \"))\n\nprint(equilateral_triangle(a, b, c))",
      -0.85693359375
    ],
    [
      "def count_equilateral_triangles(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    return (n - 2) * (n - 1) / 2\n\n\nprint(count_equilateral_triangles(2))\nprint(count_equilateral_triangles(4))\nprint(count_equilateral_triangles(7))\nprint(count_equilateral_triangles(10))",
      -0.85693359375
    ],
    [
      "def max_equilateral_triangle(n):\n    # Your code here\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(1, i+1):\n                if i**2 + j**2 == k**2:\n                    result = max(result, i*j*k)\n    return result\n\nprint(max_equilateral_triangle(4))",
      -0.85693359375
    ],
    [
      "def equilateralTriangles(n):\n    n = n//3\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return 1 + equilateralTriangles(n) + equilateralTriangles(n-1)\n\n\nn = int(input(\"Enter the number of triangles: \"))\nprint(equilateralTriangles(n))",
      -0.85693359375
    ],
    [
      "def equilateral_triangle(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return max(equilateral_triangle(n - 1), equilateral_triangle(n - 2), equilateral_triangle(n - 3))\n\n\nprint(equilateral_triangle(3))\nprint(equilateral_triangle(4))\nprint(equilateral_triangle(5))",
      -0.85693359375
    ],
    [
      "def max_equilateral_triangles(a, b, c):\n    if a + b < c or a + c < b or b + c < a:\n        return 0\n\n    return 1 + max(max_equilateral_triangles(a + b, b, c), max_equilateral_triangles(a, b + c, c))\n\n\nprint(max_equilateral_triangles(4, 4, 4))\nprint(max_equilateral_triangles(4, 4, 4))\nprint(max_equilateral_triangles(4, 4, 4))\nprint(max_equilateral_triangles(4, 4, 4))",
      -0.85693359375
    ],
    [
      "def max_equilateral_triangles(n):\n    # Write your code here\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            if i > j:\n                count += 1\n    return count\n\n\n\nprint(max_equilateral_triangles(5))\nprint(max_equilateral_triangles(10))",
      -0.85791015625
    ],
    [
      "def count_triangles(n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if i == j:\n                count += 1\n            else:\n                count += i*j\n    return count\n\n\nprint(count_triangles(3))\nprint(count_triangles(4))\nprint(count_triangles(5))\nprint(count_triangles(6))",
      -0.85791015625
    ],
    [
      "def equilateral_triangle(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    else:\n        return 0\n\nprint(equilateral_triangle(8))",
      -0.85791015625
    ],
    [
      "def count_equilateral_triangles(a):\n    if a == 0:\n        return 0\n    else:\n        return a + count_equilateral_triangles(a - 1)\n\nprint(count_equilateral_triangles(3))\nprint(count_equilateral_triangles(4))\nprint(count_equilateral_triangles(5))\nprint(count_equilateral_triangles(6))\nprint(count_equilateral_triangles(7))\nprint(count_equilateral_triangles(8))\nprint(count_equilateral_triangles(9))\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)",
      -0.85791015625
    ],
    [
      "def maxEquilateralTriangles(a, b, c):\n    return max(a*b, b*c, a*c)\n\n\nprint(maxEquilateralTriangles(3, 3, 3))\nprint(maxEquilateralTriangles(4, 4, 4))",
      -0.85791015625
    ],
    [
      "def equilateral_triangle(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return n * equilateral_triangle(n-1) + equilateral_triangle(n-2)\n\nprint(equilateral_triangle(5))",
      -0.85791015625
    ],
    [
      "def max_equilateral_triangle(n):\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    return max_equilateral_triangle(n - 1) + max_equilateral_triangle(n - 2) + max_equilateral_triangle(n - 3)\n\n\nprint(max_equilateral_triangle(5))",
      -0.85791015625
    ],
    [
      "def count_equilateral_triangles(a, b, c):\n    if a == b == c:\n        return 1\n    if a > b and a > c:\n        return count_equilateral_triangles(a, c, b) + count_equilateral_triangles(a, b, c - 1)\n    elif b > a and b > c:\n        return count_equilateral_triangles(b, a, c) + count_equilateral_triangles(b, a, c - 1)\n    else:\n        return 0\n\nprint(count_equilateral_triangles(4, 4, 4))",
      -0.85791015625
    ],
    [
      "def maxEquilateralTriangle(n, a, b):\n    a = abs(a)\n    b = abs(b)\n    if a == b:\n        return n\n    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    return maxEquilateralTriangle(n - 1, (a + b) / 2, (a + b) / 2)\n\n\nprint(maxEquilateralTriangle(5, 3, 6))",
      -0.85791015625
    ],
    [
      "def max_equilateral_triangles(a,b,c):\n    if a==b==c:\n        return 0\n    elif a==b or a==c or b==c:\n        return 1\n    else:\n        return max(max_equilateral_triangles(a,c,b-a),max_equilateral_triangles(a,b,c-b))\n\nprint(max_equilateral_triangles(10,20,30))\nprint(max_equilateral_triangles(5,7,13))",
      -0.8583984375
    ],
    [
      "def equilateralTriangle(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return max(equilateralTriangle(n - 1), equilateralTriangle(n - 2))\n\n\nprint(equilateralTriangle(3))",
      -0.8583984375
    ],
    [
      "def max_equilateral_triangles(n):\n    triangle = [0] * n\n    triangle[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if j == 0 or j == i-1:\n                triangle[i] = max(triangle[i], triangle[j]+1)\n    return max(triangle)\n\nif __name__ == \"__main__\":\n    print(max_equilateral_triangles(3))",
      -0.8583984375
    ],
    [
      "def max_equilateral_triangle(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n\n    return max(n-1, (n*(n+1))/2)\n\n\nprint(max_equilateral_triangle(5))",
      -0.8583984375
    ],
    [
      "def count_equilateral_triangles(n):\n    a = 0\n    b = 0\n    c = 0\n    if n == 0:\n        return 0\n    while a <= n and b <= n and c <= n:\n        if a + b + c == n:\n            a += 1\n            b += 1\n            c += 1\n        else:\n            a = 0\n            b = 0\n            c = 0\n    return a\n\nprint(count_equilateral_triangles(6))",
      -0.8583984375
    ],
    [
      "def equilateral_triangle(n):\n    if n <= 1:\n        return n\n    else:\n        return max(equilateral_triangle(n-1), equilateral_triangle(n-2)) + 1\n\nif __name__ == \"__main__\":\n    print(equilateral_triangle(5))\n    print(equilateral_triangle(6))\n    print(equilateral_triangle(7))\n    print(equilateral_triangle(8))\n    print(equilateral_triangle(9))",
      -0.8583984375
    ],
    [
      "def max_equilateral_triangle(a, b, c):\n    return max(max(a, b) + max(c, a), max(a, b) + max(c, b), max(a, b) + max(c, a))\n\n\nprint(max_equilateral_triangle(3, 4, 5))\nprint(max_equilateral_triangle(5, 6, 7))\nprint(max_equilateral_triangle(6, 4, 8))\nprint(max_equilateral_triangle(3, 4, 5))\nprint(max_equilateral_triangle(4, 6, 7))\nprint(max_equilateral_triangle(3, 4, 5))\nprint(max_equilateral_triangle(5, 6, 7))\nprint(max_equilateral_triangle(6, 4, 8))\nprint(max_equilateral_triangle(3, 4, 5))\nprint(max_equilateral_triangle(4, 6, 7))\nprint(max_equilateral_triangle(5, 6, 7))\nprint(max_equilateral_triangle(6, 4, 8))",
      -0.8583984375
    ],
    [
      "def max_equilateral_triangle(a, b, c):\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    elif a == 0 or b == 0 or c == 0:\n        return -1\n    else:\n        if a == b and b == c:\n            return 1\n        elif a == c and b == c:\n            return 2\n        elif a == c and b == 0:\n            return 3\n        elif a == 0 and b == 0:\n            return 4\n        elif a == 0 and c == 0:\n            return 5\n\n\nprint(max_equilateral_triangle(10, 10, 10))\nprint(max_equilateral_triangle(3, 3, 3))\nprint(max_equilateral_triangle(3, 3, 5))\nprint(max_equilateral_triangle(10, 10, 3))",
      -0.8583984375
    ],
    [
      "def equilateral_triangle(a, b, c):\n    if a == b and b == c:\n        return 1\n    elif a == b or b == c or c == a:\n        return 0\n    else:\n        return max(equilateral_triangle(a + 1, b, c), equilateral_triangle(a, b + 1, c), equilateral_triangle(a, b, c + 1))\n\n\nprint(equilateral_triangle(1, 1, 1))",
      -0.8583984375
    ],
    [
      "def maxEquilateralTriangles(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    return max(maxEquilateralTriangles(n - 1), maxEquilateralTriangles(n - 2)) + 1\n\n\nprint(maxEquilateralTriangles(5))",
      -0.8583984375
    ],
    [
      "def equilateral_triangle(n):\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            if i // 3 == 0:\n                return i\n            else:\n                return 0\n\n\nprint(equilateral_triangle(6))",
      -0.8583984375
    ],
    [
      "def equilateral_triangles(a, b, c):\n    if a == b == c:\n        return 0\n    if a < b + c or b < a + c or c < a + b:\n        return 0\n    return 1 + max(equilateral_triangles(a+1, b, c), equilateral_triangles(a, b+1, c+1), equilateral_triangles(a, b, c+1))\n\nprint(equilateral_triangles(1, 1, 1))",
      -0.8583984375
    ],
    [
      "def max_equilateral_triangles(a, b, c):\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    i = 0\n    j = 0\n    k = 0\n    while i < len(a) and j < len(b) and k < len(c):\n        if a[i] + b[j] + c[k] == 200:\n            print(a[i] + b[j] + c[k])\n            i += 1\n            j += 1\n            k += 1\n        else:\n            i += 1\n            j += 1\n            k += 1\n\n\nmax_equilateral_triangles(4, 5, 6)",
      -0.8583984375
    ],
    [
      "def equilateral_triangle(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(equilateral_triangle(n-1), equilateral_triangle(n-2)) + 1\n\nprint(equilateral_triangle(6))",
      -0.8583984375
    ],
    [
      "def max_triangle(n):\n    triangle = [1, 1, 1]\n    for i in range(2, n+1):\n        triangle.append(triangle[i-1]*(i-2))\n    return max(triangle)\n\nprint(max_triangle(8))",
      -0.8583984375
    ],
    [
      "def equilateral_triangle(a, b, c):\n\n    if a > b and b > c and c > a:\n        return 1\n    elif a > b and b > c:\n        return 0\n    elif a > c and b > a:\n        return 0\n    elif a > c:\n        return 0\n    else:\n        return 0\n\na = int(input())\nb = int(input())\nc = int(input())\nprint(equilateral_triangle(a, b, c))",
      -0.85888671875
    ],
    [
      "def max_equilateral_triangle(a, b, c):\n    # Fill this in.\n    count = 0\n    for i in range(1, b+1):\n        for j in range(1, c+1):\n            if a == i or b == i or c == i:\n                count += 1\n    return count\n\nprint(max_equilateral_triangle(5,3,5))",
      -0.85888671875
    ],
    [
      "def count_triangle(n):\n    tri = [0] * (n + 1)\n    tri[0] = 1\n    tri[1] = 1\n    tri[2] = 2\n\n    for i in range(3, n + 1):\n        tri[i] = tri[i - 1] + tri[i - 2]\n\n    return tri[n]\n\n\ndef main():\n    print(count_triangle(6))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85888671875
    ],
    [
      "def max_equilateral_triangles(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return max(max_equilateral_triangles(n - 1), max_equilateral_triangles(n - 2), max_equilateral_triangles(n - 3))\n\n\nprint(max_equilateral_triangles(5))",
      -0.86083984375
    ],
    [
      "def equilateral_triangle(n):\n    if n==1:\n        return 1\n    return max(equilateral_triangle(n-1),equilateral_triangle(n-2),equilateral_triangle(n-3))\n\nprint(equilateral_triangle(10))\nprint(equilateral_triangle(20))\nprint(equilateral_triangle(30))\nprint(equilateral_triangle(40))\nprint(equilateral_triangle(50))",
      -0.86083984375
    ],
    [
      "def triangle_count(a, b, c):\n    # code here\n    if a > b and a > c:\n        return 1\n    elif b > c:\n        return 1\n    elif c > a:\n        return 1\n    else:\n        return 0\n\n\nprint(triangle_count(1, 2, 3))\nprint(triangle_count(2, 3, 1))\nprint(triangle_count(1, 2, 3))",
      -0.86083984375
    ],
    [
      "import math\ndef count_equilateral_triangles(a, b, c):\n    if a==b and a==c:\n        return 1\n    if a>b and a>c:\n        return 1\n    if b>a and b>c:\n        return 1\n    if c>a and c>b:\n        return 1\n    return 0\n\nif __name__ == '__main__':\n    print(count_equilateral_triangles(2, 4, 8))\n    print(count_equilateral_triangles(4, 8, 9))",
      -1.0107421875
    ],
    [
      "def equilateralTriangles(n,a,b,c):\n    if(a+b>c):\n        return 0\n    if(a==b and a==c):\n        return 1\n    if(a!=b and a!=c):\n        return 0\n    if(b!=a and b!=c):\n        return 0\n    if(c!=a and c!=b):\n        return 0\n    return equilateralTriangles(n,a+b,c+a,n+c)\n\n\nprint(equilateralTriangles(4,2,3,4))",
      -1.5126953125
    ],
    [
      "def max_equilateral_triangles(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 0\n\n    count = 0\n    for i in range(1, n):\n        for j in range(1, i):\n            if i == j:\n                continue\n            if n - i - j > 2:\n                count += 1\n    return count\n\nprint(max_equilateral_triangles(5))",
      -1.6591796875
    ],
    [
      "def equilateralTriangle(n):\n    # Code here\n    triangle = []\n    for i in range(1, n+1):\n        triangle.append(i**2)\n    triangle.sort()\n    return triangle\n\nprint(equilateralTriangle(5))\nprint(equilateralTriangle(7))\nprint(equilateralTriangle(10))\nprint(equilateralTriangle(15))\nprint(equilateralTriangle(20))\nprint(equilateralTriangle(30))\nprint(equilateralTriangle(40))\nprint(equilateralTriangle(50))\nprint(equilateralTriangle(60))\nprint(equilateralTriangle(70))\nprint(equilateralTriangle(80))\nprint(equilateralTriangle(90))\nprint(equilateralTriangle(100))",
      -2.466796875
    ],
    [
      "def equilateral_triangle(n):\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    return max(equilateral_triangle(n - 1), equilateral_triangle(n - 2))\n\n\nprint(equilateral_triangle(6))\nprint(equilateral_triangle(9))\nprint(equilateral_triangle(20))",
      -2.509765625
    ],
    [
      "def count_triangle(n):\n    if n <= 1:\n        return 0\n    a = [0] * n\n    a[0] = 1\n    a[1] = 1\n    for i in range(2, n):\n        for j in range(0, i):\n            a[i] += a[j] * a[i-1]\n    return a[n-1]\n\nprint(count_triangle(4))\nprint(count_triangle(3))\nprint(count_triangle(2))\nprint(count_triangle(1))\nprint(count_triangle(0))\nprint(count_triangle(5))",
      -2.826171875
    ],
    [
      "def equilateral_triangle(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i * j == i + j * j:\n                count += 1\n    return count\n\nprint(equilateral_triangle(5))",
      -3.125
    ],
    [
      "def equilateral_triangle(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if i * j == n * (n + 1) // 2:\n                count += 1\n    return count\n\n\nprint(equilateral_triangle(20))",
      -3.724609375
    ],
    [
      "def count_equilateral_triangles(a, b, c):\n    if (a + b + c) == 2:\n        return 2\n    else:\n        return min(count_equilateral_triangles(a, b, c), count_equilateral_triangles(a + b, b, c)) + 1\n\n\na, b, c = map(int, input().split())\nprint(count_equilateral_triangles(a, b, c))",
      -3.8125
    ],
    [
      "def max_equilateral_triangles(n):\n    # Write your code here\n    count = 0\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            if i == j:\n                continue\n            elif i < j:\n                count += 1\n    return count\n\n\nprint(max_equilateral_triangles(5))\nprint(max_equilateral_triangles(10))\nprint(max_equilateral_triangles(15))\nprint(max_equilateral_triangles(20))\nprint(max_equilateral_triangles(25))\nprint(max_equilateral_triangles(30))\nprint(max_equilateral_triangles(35))\nprint(max_equilateral_triangles(40))\nprint(max_equilateral_triangles(45))\nprint(max_equilateral_triangles(50))",
      -3.8125
    ],
    [
      "def equilateral_triangle(a,b,c):\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a == 0 or b == 0 or c == 0:\n        return -1\n    if a == b or b == c or c == a:\n        return -1\n    if a == b or b == c or c == a:\n        return max(equilateral_triangle(a-1,b,c),equilateral_triangle(a,b-1,c))+1\n    else:\n        return max(equilateral_triangle(a,b,c-1),equilateral_triangle(a,b-1,c))+1\n\nprint(equilateral_triangle(1,2,3))\nprint(equilateral_triangle(2,3,4))\nprint(equilateral_triangle(3,4,5))\nprint(equilateral_triangle(3,4,6))\nprint(equilateral_triangle(3,4,7))\nprint(equilateral_triangle(3,4,8))\nprint(equilateral_triangle(3,4,9))\nprint(equilateral_triangle(4,5,6))\nprint(equilateral_triangle(4,5,7))\nprint(equilateral_triangle(4,5,8))\nprint(equilateral_triangle(4,5,9))\nprint(equilateral_triangle(5,6,7))\nprint(equilateral_triangle(5,6,8))\nprint(equilateral_triangle(5,6,9))\nprint(equilateral_triangle(6,7,8))\nprint(equilateral_triangle(6,7,9))\nprint(equilateral_triangle(7,8,9))\nprint(equilateral_triangle(7,8,10))\nprint(equilateral_triangle(7,8,11))\nprint(equilateral_triangle(7,8",
      -3.96875
    ],
    [
      "def equilateral_triangles(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        return equilateral_triangles(n-1) + equilateral_triangles(n-2) + equilateral_triangles(n-3)\n\n\nprint(equilateral_triangles(5))\nprint(equilateral_triangles(10))\nprint(equilateral_triangles(20))\nprint(equilateral_triangles(30))\nprint(equilateral_triangles(40))\nprint(equilateral_triangles(50))",
      -4.09375
    ],
    [
      "def equilateralTriangle(a,b,c):\n    # Write your code here\n    a,b,c=int(a),int(b),int(c)\n    if a==0:\n        return 0\n    if b==0:\n        return 0\n    if c==0:\n        return 0\n    if (a**2+b**2)==(c**2):\n        return 2\n    if (a**2+b**2)>(c**2):\n        return 1\n    if (a**2+b**2)<(c**2):\n        return 0\n    else:\n        return 0\nprint(equilateralTriangle(1,2,3))\nprint(equilateralTriangle(2,2,3))\nprint(equilateralTriangle(1,1,1))\nprint(equilateralTriangle(0,0,0))\nprint(equilateralTriangle(3,3,3))\nprint(equilateralTriangle(0,0,0))\nprint(equilateralTriangle(3,3,3))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(1,1,1))\nprint(equilateralTriangle(3,3,3))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(1,1,1))\nprint(equilateralTriangle(3,3,3))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(equilateralTriangle(2,2,2))\nprint(",
      -4.19921875
    ],
    [
      "def max_equilateral_triangles(n, a, b, c):\n    count = 0\n    while (a < b + c):\n        if (a**2 + b**2 == c**2):\n            count += 1\n        a += 1\n    return count\n\nprint(max_equilateral_triangles(5, 4, 3, 7))\nprint(max_equilateral_triangles(5, 1, 1, 1))\nprint(max_equilateral_triangles(5, 4, 3, 2))\nprint(max_equilateral_triangles(5, 4, 3, 1))",
      -4.37109375
    ],
    [
      "def equilateral_triangle(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if",
      -4.5546875
    ],
    [
      "def max_equilateral_triangle(a, b, c):\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if a < b + c and b < a + c and c < a + b:\n        return 1\n    elif a == b and b == c:\n        return 2\n    else:\n        return 0\n\n\nprint(max_equilateral_triangle(10, 5, 8))\nprint(max_equilateral_triangle(10, 5, 5))",
      -4.7109375
    ],
    [
      "def max_equilateral_triangles(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44",
      -5.1171875
    ],
    [
      "def equilateral_triangle(a, b, c):\n    if a == b == c:\n        return 1\n\n    if a < b < c:\n        return max(equilateral_triangle(a + 1, b, c),\n                   equilateral_triangle(a + 1, b + 1, c))\n    else:\n        return 0\n\n\na = int(input())\nb = int(input())\nc = int(input())\nprint(equilateral_triangle(a, b, c))",
      -5.1328125
    ],
    [
      "def max_equilateral_triangle(a,b,c):\n    if a+b>c:\n        return 0\n    if b+c>a:\n        return 0\n    if c+a>b:\n        return 0\n    return 1+max_equilateral_triangle(a,b,c)\n\nprint(max_equilateral_triangle(2,2,3))\nprint(max_equilateral_triangle(2,3,2))\nprint(max_equilateral_triangle(2,3,4))\nprint(max_equilateral_triangle(3,4,4))",
      -5.19921875
    ],
    [
      "# O(n^2)\ndef equilateral_triangles(n):\n    return (1 + (n - 1) * (n - 2)) / 2\n\n# O(n^3)\ndef equilateral_triangles2(n):\n    return (1 + (n - 1) * (n - 2) * (n - 3)) / 6\n\n# O(n^4)\ndef equilateral_triangles3(n):\n    return (1 + (n - 1) * (n - 2) * (n - 3) * (n - 4)) / 24\n\n# O(1)\ndef equilateral_triangles4(n):\n    return (1 + (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5)) / 7\n\nprint(equilateral_triangles(6))\nprint(equilateral_triangles(4))\nprint(equilateral_triangles(3))\nprint(equilateral_triangles(2))\nprint(equilateral_triangles(1))",
      -5.27734375
    ],
    [
      "def max_equilateral_triangle(n):\n    triangle = [1]\n    for i in range(1, n):\n        for j in range(1, i):\n            triangle.append(max(triangle[j-1] + triangle[j], triangle[j] + triangle[j-1]))\n    return triangle[-1]\n\n\nif __name__ == \"__main__\":\n    print(max_equilateral_triangle(5))",
      -5.328125
    ],
    [
      "def equilateral_triangles(a, b, c):\n    # Write your code here\n    def count_triangle(a, b, c):\n        if a > b and a > c:\n            return 0\n        elif b > a and b > c:\n            return 0\n        elif c > a and c > b:\n            return 0\n        elif a == b and b == c:\n            return 1\n        elif a == b or b == c or c == a:\n            return 0\n        else:\n            return 0\n    \n    if count_triangle(a, b, c) == 0:\n        return 0\n    else:\n        return 1\n\n\nprint(equilateral_triangles(2, 3, 4))\nprint(equilateral_triangles(2, 4, 4))\nprint(equilateral_triangles(3, 2, 4))\nprint(equilateral_triangles(3, 4, 2))\nprint(equilateral_triangles(3, 5, 2))\nprint(equilateral_triangles(3, 6, 2))\nprint(equilateral_triangles(3, 7, 2))\nprint(equilateral_triangles(3, 8, 2))\nprint(equilateral_triangles(3, 9, 2))\nprint(equilateral_triangles(3, 10, 2))\nprint(equilateral_triangles(3, 11, 2))\nprint(equilateral_triangles(3, 12, 2))\nprint(equilateral_triangles(3, 13, 2))\nprint(equilateral_triangles(3, 14, 2))\nprint(equilateral_triangles(3, 15, 2))\nprint(equilateral_triangles(3, 16, 2))\nprint(equilateral_triangles(3, 17, 2))\nprint(equilateral_triangles(3, 18, 2))\nprint(equilateral_triangles(3, 19, 2))\nprint(equilateral_triangles(3, 20, 2))\nprint(equilateral_triangles(3,",
      -5.35546875
    ],
    [
      "def equilateral_triangles(a, b, c):\n    if a == b and a == c:\n        return 0\n    elif a == b or a == c:\n        return 1\n    elif b == c:\n        return 2\n    else:\n        return max(equilateral_triangles(a, b + 1, c), equilateral_triangles(a, b, c + 1))\n\n\nprint(equilateral_triangles(3, 4, 5))\nprint(equilateral_triangles(4, 5, 6))\nprint(equilateral_triangles(1, 1, 1))\nprint(equilateral_triangles(4, 5, 6))\nprint(equilateral_triangles(3, 4, 7))\nprint(equilateral_triangles(4, 5, 7))\nprint(equilateral_triangles(3, 4, 7))\nprint(equilateral_triangles(4, 5, 7))\nprint(equilateral_triangles(2, 3, 4))",
      -5.53125
    ],
    [
      "def equilateral_triangle(a,b,c):\n    if a+b>c:\n        return 0\n    elif a+c>b:\n        return 0\n    elif b+c>a:\n        return 0\n    else:\n        return 1\nprint(equilateral_triangle(1,2,3))",
      -5.64453125
    ],
    [
      "def equilateral_triangle(a,b,c):\n    if a < 0 or b < 0 or c < 0:\n        return 0\n    if a == b == c:\n        return 1\n    if a == b or b == c:\n        return 2\n    if a > b and a > c:\n        return max(equilateral_triangle(a - 1,b,c),equilateral_triangle(a,b - 1,c - 1))\n    else:\n        return max(equilateral_triangle(a,b,c - 1),equilateral_triangle(a - 1,b - 1,c))\n\nprint(equilateral_triangle(3,4,5))",
      -5.71484375
    ],
    [
      "\"\"\"\nInput Format\nThe first line contains an integer, n, representing the number of triangles that can be formed.\nThe second line contains an integer, m, representing the number of vertices.\nEach line contains an integer, n, representing the number of edges.\n\nConstraints\n1 <= n <= 100000\n1 <= m <= 100000\n1 <= n + m <= 100000\n\"\"\"\n\nn, m = map(int, input().split())\n\ndef equilateral_triangles(n, m):\n    tri_count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if i == j:\n                tri_count += 1\n            else:\n                if (i + j) % 2 == 0:\n                    tri_count += 1\n    return tri_count\n\nprint(equilateral_triangles(n, m))",
      -5.94921875
    ],
    [
      "def equilateral_triangles(n, c):\n    if n == 0:\n        return 0\n    if n == 1:\n        return c\n    if n == 2:\n        return c * c\n    return max(equilateral_triangles(n - 1, c),\n               equilateral_triangles(n - 2, c),\n               equilateral_triangles(n - 3, c))\n\n\nif __name__ == '__main__':\n    print(equilateral_triangles(10, 3))\n    print(equilateral_triangles(10, 4))\n    print(equilateral_triangles(10, 6))",
      -6.15234375
    ],
    [
      "def max_equilateral_triangles(a,b,c):\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    elif a == 0:\n        return 1\n    elif b == 0:\n        return max(max_equilateral_triangles(a-1,c,c-1),max_equilateral_triangles(a,b-1,c-1))\n    elif c == 0:\n        return max(max_equilateral_triangles(a-1,b,c-1),max_equilateral_triangles(a,b-1,c))\n    else:\n        return max(max_equilateral_triangles(a-1,b,c-1),max_equilateral_triangles(a,b-1,c),max_equilateral_triangles(a,b,c-1))\n\na = int(input(\"Enter the number of elements\"))\na = a//3\nb = int(input(\"Enter the number of elements\"))\nb = b//3\nc = int(input(\"Enter the number of elements\"))\nc = c//3\nprint(max_equilateral_triangles(a,b,c))",
      -6.29296875
    ],
    [
      "def equilateral_triangle(a, b, c):\n    if a == b == c:\n        return 1\n    if a > b and a > c:\n        return max(equilateral_triangle(a-1, b, c), equilateral_triangle(a, b-1, c))\n    if b > a and b > c:\n        return max(equilateral_triangle(a, b-1, c), equilateral_triangle(a, b, c-1))\n    if c > a and c > b:\n        return max(equilateral_triangle(a, b, c-1), equilateral_triangle(a, b, c))\n\nprint(equilateral_triangle(1, 1, 1))\nprint(equilateral_triangle(3, 3, 3))\nprint(equilateral_triangle(1, 1, 1))\nprint(equilateral_triangle(3, 3, 3))\nprint(equilateral_triangle(1, 2, 3))",
      -6.87109375
    ],
    [
      "def equilateral_triangle(a, b, c):\n    if (a + b + c) == 2 * max(a, b, c):\n        return True\n    return False\n\nprint(equilateral_triangle(4, 3, 6))\nprint(equilateral_triangle(4, 4, 6))\nprint(equilateral_triangle(4, 4, 5))\nprint(equilateral_triangle(4, 5, 6))\nprint(equilateral_triangle(4, 4, 4))\nprint(equilateral_triangle(5, 6, 7))",
      -7.3359375
    ],
    [
      "def equilateral_triangle(n):\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n%2==0:\n        return 2\n    if n%3==0:\n        return 2\n    if n%4==0:\n        return 2\n    if n%5==0:\n        return 2\n    if n%6==0:\n        return 2\n    if n%7==0:\n        return 2\n    if n%8==0:\n        return 2\n    if n%9==0:\n        return 2\n    if n%10==0:\n        return 2\n    if n%11==0:\n        return 2\n    if n%12==0:\n        return 2\n    if n%13==0:\n        return 2\n    if n%14==0:\n        return 2\n    if n%15==0:\n        return 2\n    if n%16==0:\n        return 2\n    if n%17==0:\n        return 2\n    if n%18==0:\n        return 2\n    if n%19==0:\n        return 2\n    if n%20==0:\n        return 2\n    if n%21==0:\n        return 2\n    if n%22==0:\n        return 2\n    if n%23==0:\n        return 2\n    if n%24==0:\n        return 2\n    if n%25==0:\n        return 2\n    if n%26==0:\n        return 2\n    if n%27==0:\n        return 2\n    if n%28==0:\n        return 2\n    if n%29==0:\n        return 2\n    if n%2A==0:\n        return 2\n    if n%2B==0:\n        return 2\n    if n%2C==0:\n        return 2\n    if n%2D==0:\n        return 2\n    if n%2E==0:\n        return 2\n    if n%2F==0:\n        return 2\n    if n%30",
      -7.51171875
    ],
    [
      "def count_equilateral_triangles(n, m):\n    # write your code here\n    if n == 0 or m == 0:\n        return 0\n    if n == 1 and m == 1:\n        return 1\n    if n == 1 and m == 2:\n        return 2\n    if n == 2 and m == 1:\n        return 2\n    if n == 2 and m == 2:\n        return 3\n    if n == 3 and m == 2:\n        return 4\n    if n == 3 and m == 1:\n        return 4\n    if n == 4 and m == 1:\n        return 5\n    if n == 4 and m == 2:\n        return 5\n    if n == 5 and m == 2:\n        return 6\n    if n == 5 and m == 3:\n        return 7\n    if n == 5 and m == 4:\n        return 8\n    if n == 6 and m == 3:\n        return 9\n    if n == 6 and m == 4:\n        return 10\n    if n == 7 and m == 3:\n        return 11\n    if n == 7 and m == 4:\n        return 12\n    if n == 8 and m == 4:\n        return 13\n    if n == 8 and m == 5:\n        return 14\n    if n == 8 and m == 6:\n        return 15\n    if n == 9 and m == 3:\n        return 16\n    if n == 9 and m == 4:\n        return 17\n    if n == 10 and m == 3:\n        return 18\n    if n == 10 and m == 4:\n        return 19\n    if n == 11 and m == 3:\n        return 20\n    if n == 11 and m == 4:\n        return 21\n    if n == 12 and m == 3:\n        return 22\n    if n == 12 and m == 4:\n        return 23\n    if n == 13 and m == 3:\n        return 24\n    if n == 13 and m == 4:\n        return 25\n    if n == 14 and m == 3:\n        return 26\n    if n == 14 and m == 4:\n        return 27\n    if n == 15 and m == 3:\n        return 28\n    if n == 15 and",
      -7.7890625
    ],
    [
      "def count_equilateral_triangles(a, b, c):\n    if a < b + c and a < b + c and b < a + c:\n        return 2\n    elif a < b and b < c:\n        return 1\n    elif b < a and b < c:\n        return 1\n    elif a < b and c < a:\n        return 1\n    else:\n        return 0\n\na = int(input(\"Enter the length of the triangle \"))\nb = int(input(\"Enter the length of the triangle \"))\nc = int(input(\"Enter the length of the triangle \"))\nprint(\"Number of equilateral triangles that can be formed: \" + str(count_equilateral_triangles(a, b, c)))",
      -8.28125
    ],
    [
      "def equilateral_triangles(n):\n    # write your code here\n    a = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
      -8.4609375
    ],
    [
      "def equilateralTriangles(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if a == b == c:\n        return 0\n\n    a, b, c = sorted([a, b, c])\n    a_count = 0\n    b_count = 0\n    c_count = 0\n\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            a_count += 1\n        else:\n            b_count += 1\n\n    for i in range(b, c + 1):\n        if i % 2 == 0:\n            c_count += 1\n        else:\n            a_count += 1\n\n    return max(a_count, b_count, c_count)\n\n\nif __name__ == '__main__':\n    print(equilateralTriangles(1, 3, 5))",
      -8.875
    ],
    [
      "def equilateral_triangle(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    else:\n        return max(equilateral_triangle(n - 1), equilateral_triangle(n - 2), equilateral_triangle(n - 3))\n\nprint(equilateral_triangle(5))\nprint(equilateral_triangle(6))\nprint(equilateral_triangle(7))\nprint(equilateral_triangle(8))\nprint(equilateral_triangle(9))\nprint(equilateral_triangle(10))\nprint(equilateral_triangle(11))\nprint(equilateral_triangle(12))",
      -9.046875
    ],
    [
      "def equilateral_triangle(n):\n\n    # Check for input\n    if n < 0:\n        return -1\n\n    # Initialize\n    count = 0\n\n    # Loop for each side of the triangle\n    for side in range(1, n + 1):\n\n        # Check if the triangle can be formed by summing the sides of the triangle\n        if side == 1 or side == 2:\n            count += 1\n\n        # Check if the triangle can be formed by comparing the sides of the triangle and the sides of the triangle\n        elif side == 3:\n            count += 1\n\n        # Check if the triangle can be formed by comparing the sides of the triangle and the sides of the triangle\n        elif side == 4:\n            count += 1\n\n        # Check if the triangle can be formed by comparing the sides of the triangle and the sides of the triangle\n        elif side == 5:\n            count += 1\n\n    # Return the maximum number of equilateral triangles\n    return count\n\n\n# Test\nprint(equilateral_triangle(0))\nprint(equilateral_triangle(1))\nprint(equilateral_triangle(2))\nprint(equilateral_triangle(3))\nprint(equilateral_triangle(4))\nprint(equilateral_triangle(5))\nprint(equilateral_triangle(6))\nprint(equilateral_triangle(7))\nprint(equilateral_triangle(8))\nprint(equilateral_triangle(9))",
      -9.3203125
    ],
    [
      "import math\n\n\ndef count_equilateral_triangles(a, b, c):\n    # Write your code here\n    max_num_triangles = 0\n    if a < 0 or b < 0 or c < 0:\n        return max_num_triangles\n    if a == b == c:\n        return 1\n    if math.sqrt(a**2 + b**2 + c**2) == math.sqrt(a**2 + b**2 + c**2):\n        max_num_triangles = 2\n        return max_num_triangles\n    if math.sqrt(a**2 + b**2) == math.sqrt(b**2 + c**2):\n        max_num_triangles = 3\n        return max_num_triangles\n    if math.sqrt(a**2 + b**2) == math.sqrt(c**2):\n        max_num_triangles = 4\n        return max_num_triangles\n    if math.sqrt(a**2 + b**2) == math.sqrt(c**2 + a**2):\n        max_num_triangles = 5\n        return max_num_triangles\n    if math.sqrt(a**2 + b**2) == math.sqrt(c**2 + a**2):\n        max_num_triangles = 6\n        return max_num_triangles\n    if math.sqrt(a**2 + b**2) == math.sqrt(c**2 + a**2 + b**2):\n        max_num_triangles = 7\n        return max_num_triangles\n    return max_num_triangles\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    print(\"Maximum number of equilateral triangles is \", count_equilateral_triangles(a, b, c))",
      -9.4140625
    ],
    [
      "def equilateral_triangle(n):\n    # Write your code here.\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n\n    max_count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if i == j:\n                continue\n            if i == 1 and j == 1:\n                continue\n            if i == 2 and j == 2:\n                continue\n            if i == 3 and j == 3:\n                continue\n            if i == 4 and j == 4:\n                continue\n            if i == 5 and j == 5:\n                continue\n            if i == 6 and j == 6:\n                continue\n            if i == 7 and j == 7:\n                continue\n            if i == 8 and j == 8:\n                continue\n            if i == 9 and j == 9:\n                continue\n            if i == 10 and j == 10:\n                continue\n            if i == 11 and j == 11:\n                continue\n            if i == 12 and j == 12:\n                continue\n            if i == 13 and j == 13:\n                continue\n            if i == 14 and j == 14:\n                continue\n            if i == 15 and j == 15:\n                continue\n            if i == 16 and j == 16:\n                continue\n            if i == 17 and j == 17:\n                continue\n            if i == 18 and j == 18:\n                continue\n            if i == 19 and j == 19:\n                continue\n            if i == 20 and j == 20:\n                continue\n            if i == 21 and j == 21:\n                continue\n            if i == 22 and j == 22:\n                continue\n            if i == 23 and j == 23:\n                continue\n            if i == 24 and j == 24:\n                continue\n            if i == 25 and j == 25:\n                continue\n            if i == 26 and j == 26:\n                continue\n            if i == 27 and j == 27:\n                continue\n            if i",
      -9.5
    ],
    [
      "def equilateral_triangle_count(a,b,c):\n    a=int(a)\n    b=int(b)\n    c=int(c)\n\n    if a<b and a<c:\n        return 1\n    elif b<a and b<c:\n        return 2\n    elif c<a and c<b:\n        return 3\n    else:\n        return 0\n\nprint(equilateral_triangle_count(2,3,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,6))\nprint(equilateral_triangle_count(4,5,6))\nprint(equilateral_triangle_count(4,4,3))\nprint(equilateral_triangle_count(4,3,5))\nprint(equilateral_triangle_count(4,3,4))\nprint(equilateral_triangle_count(4,4,3))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,3))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4,4,4))\nprint(equilateral_triangle_count(4",
      -9.703125
    ],
    [
      "def equilateral_triangles(n):\n    # Write your code here\n    # If the triangle can be formed with only one side, then\n    # it can be formed with two sides.\n\n    if n == 1:\n        return 1\n    else:\n        return max(equilateral_triangles(n-1), equilateral_triangles(n-2)) + 1\n\nprint(equilateral_triangles(1))\nprint(equilateral_triangles(2))\nprint(equilateral_triangles(3))\nprint(equilateral_triangles(4))\nprint(equilateral_triangles(5))\nprint(equilateral_triangles(6))\nprint(equilateral_triangles(7))\nprint(equilateral_triangles(8))\nprint(equilateral_triangles(9))\nprint(equilateral_triangles(10))\nprint(equilateral_triangles(11))\nprint(equilateral_triangles(12))\nprint(equilateral_triangles(13))\nprint(equilateral_triangles(14))\nprint(equilateral_triangles(15))\nprint(equilateral_triangles(16))\nprint(equilateral_triangles(17))\nprint(equilateral_triangles(18))\nprint(equilateral_triangles(19))\nprint(equilateral_triangles(20))\nprint(equilateral_triangles(21))\nprint(equilateral_triangles(22))\nprint(equilateral_triangles(23))\nprint(equilateral_triangles(24))\nprint(equilateral_triangles(25))\nprint(equilateral_triangles(26))\nprint(equilateral_triangles(27))\nprint(equilateral_triangles(28))\nprint(equilateral_triangles(29))\nprint(equilateral_triangles(30))\nprint(equilateral_triangles(31))\nprint(equilateral_triangles(32))",
      -9.71875
    ],
    [
      "def equilateral_triangle(n, m):\n    n = int(n)\n    m = int(m)\n    if n == m:\n        return n\n    elif n < m:\n        return equilateral_triangle(m, n)\n    else:\n        return equilateral_triangle(n, m-1) + 1\n\n\nprint(equilateral_triangle(2, 2))\nprint(equilateral_triangle(2, 3))\nprint(equilateral_triangle(3, 2))\nprint(equilateral_triangle(3, 3))\nprint(equilateral_triangle(3, 4))\nprint(equilateral_triangle(4, 4))\nprint(equilateral_triangle(4, 5))\nprint(equilateral_triangle(5, 4))\nprint(equilateral_triangle(5, 5))\nprint(equilateral_triangle(5, 6))\nprint(equilateral_triangle(6, 7))\nprint(equilateral_triangle(7, 6))\nprint(equilateral_triangle(7, 8))\nprint(equilateral_triangle(8, 7))\nprint(equilateral_triangle(8, 9))\nprint(equilateral_triangle(9, 8))\nprint(equilateral_triangle(9, 9))",
      -10.296875
    ],
    [
      "def max_equilateral_triangle(a,b,c):\n    if a+b>c:\n        return 0\n    elif a+c>b:\n        return 0\n    elif b+c>a:\n        return 0\n    else:\n        return 1\n\nprint(max_equilateral_triangle(3,3,5))\nprint(max_equilateral_triangle(4,5,6))\nprint(max_equilateral_triangle(7,7,7))\nprint(max_equilateral_triangle(7,7,7))\nprint(max_equilateral_triangle(7,7,7))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equilateral_triangle(8,8,8))\nprint(max_equil",
      -10.6484375
    ],
    [
      "def equilateral_triangle(n):\n    # write your code here\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if i == j:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + dp[i - 1][j]\n    return dp[n][n]\n\n\nprint(equilateral_triangle(5))",
      -11.4921875
    ],
    [
      "def max_equilateral_triangles(a,b,c):\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    if a <= 0 or b <= 0 or c <= 0:\n        return 0\n    else:\n        if a == b == c:\n            return 1\n        elif a > b and a > c:\n            return max(max_equilateral_triangles(a,b-1,c), max_equilateral_triangles(a-1,b,c))\n        elif b > a and b > c:\n            return max(max_equilateral_triangles(a,b-1,c), max_equilateral_triangles(a,b,c-1))\n        elif c > a and c > b:\n            return max(max_equilateral_triangles(a,b,c-1), max_equilateral_triangles(a,b-1,c-1))\n        \n\n\nprint(max_equilateral_triangles(1,2,3))\nprint(max_equilateral_triangles(5,6,7))\nprint(max_equilateral_triangles(2,1,3))\nprint(max_equilateral_triangles(1,2,3))",
      -11.953125
    ],
    [
      "def equilateral_triangle(a, b, c):\n    if b == c or a == c or b == c or a == c:\n        return 0\n    if b < c:\n        return max(equilateral_triangle(a, b+1, c), equilateral_triangle(a, b, c+1))\n    if a < c:\n        return max(equilateral_triangle(a+1, b, c), equilateral_triangle(a, b+1, c+1))\n\ndef main():\n    print(equilateral_triangle(1, 1, 1))\n    print(equilateral_triangle(2, 2, 2))\n    print(equilateral_triangle(3, 3, 3))\n    print(equilateral_triangle(4, 4, 4))\n    print(equilateral_triangle(5, 5, 5))\n    print(equilateral_triangle(6, 6, 6))\n    print(equilateral_triangle(7, 7, 7))\n    print(equilateral_triangle(8, 8, 8))\n    print(equilateral_triangle(9, 9, 9))\n    print(equilateral_triangle(10, 10, 10))\n    print(equilateral_triangle(11, 11, 11))\n    print(equilateral_triangle(12, 12, 12))\n    print(equilateral_triangle(13, 13, 13))\n    print(equilateral_triangle(14, 14, 14))\n    print(equilateral_triangle(15, 15, 15))\n    print(equilateral_triangle(16, 16, 16))\n    print(equilateral_triangle(17, 17, 17))\n    print(equilateral_triangle(18, 18, 18))\n    print(equilateral_triangle(19, 19, 19))\n\nif __name__ == '__main__':\n    main()",
      -12.03125
    ],
    [
      "def max_equilateral_triangles(a, b, c):\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    n = a + b + c\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        return max_equilateral_triangles(a, b, c) + max_equilateral_triangles(a, b, c - 1)\n\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilater",
      -12.0390625
    ],
    [
      "def equilateral_triangle(n, a, b, c):\n    # Your code here\n    if (n == 0 or a == 0 or b == 0 or c == 0):\n        return 0\n    else:\n        return max(equilateral_triangle(n-1, a, b, c), equilateral_triangle(n-1, a, b, c-1), equilateral_triangle(n-1, a, b-1, c))\n\nprint(equilateral_triangle(4, 2, 3, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 2, 3, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 2, 3, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 2, 3, 4))\nprint(equilateral_triangle(4, 2, 3, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3, 2, 4))\nprint(equilateral_triangle(4, 3",
      -12.140625
    ],
    [
      "def max_equilateral_triangles(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i - 1):\n            if (n - i - 1) <= j:\n                count += 1\n    return count\n\nprint(max_equilateral_triangles(8))\nprint(max_equilateral_triangles(11))\nprint(max_equilateral_triangles(12))\nprint(max_equilateral_triangles(13))\nprint(max_equilateral_triangles(17))",
      -12.2109375
    ],
    [
      "def max_equilateral_triangle(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    # Your code here\n    if a < 0 or b < 0 or c < 0:\n        return 0\n    if a == 0:\n        if b == 0:\n            return 1\n        elif c == 0:\n            return 1\n        else:\n            return 0\n    if b == 0:\n        if c == 0:\n            return 1\n        elif a == 0:\n            return 1\n        else:\n            return 0\n    if c == 0:\n        if a == 0:\n            return 1\n        elif b == 0:\n            return 1\n        else:\n            return 0\n    if a > b and a > c:\n        return max_equilateral_triangle(a, b-1, c) + max_equilateral_triangle(a, b, c-1)\n    if b > a and b > c:\n        return max_equilateral_triangle(a, b-1, c) + max_equilateral_triangle(a, b, c-1)\n    if c > a and c > b:\n        return max_equilateral_triangle(a, b-1, c) + max_equilateral_triangle(a, b, c-1)\n    return 0\n\n\n\n\n\n\na = int(input())\nb = int(input())\nc = int(input())\nprint(max_equilateral_triangle(a, b, c))",
      -12.3046875
    ],
    [
      "def max_equilateral_triangles(a, b, c):\n    if a == b == c:\n        return 1\n    elif a + b > c:\n        return max_equilateral_triangles(a, b, c + 1)\n    else:\n        return max_equilateral_triangles(a + 1, b, c)\n\nprint(max_equilateral_triangles(1, 1, 1))\nprint(max_equilateral_triangles(1, 2, 1))\nprint(max_equilateral_triangles(1, 1, 2))\nprint(max_equilateral_triangles(2, 2, 1))\nprint(max_equilateral_triangles(3, 3, 2))",
      -12.3515625
    ],
    [
      "import math\n\ndef equilateral_triangles(a, b, c):\n    if a + b + c > 1000:\n        return 0\n    else:\n        return 1 + math.sqrt(a**2 + b**2 + c**2)\n\nprint(equilateral_triangles(1, 2, 3))\nprint(equilateral_triangles(1, 2, 4))\nprint(equilateral_triangles(1, 4, 4))\nprint(equilateral_triangles(1, 2, 5))\nprint(equilateral_triangles(2, 2, 2))\nprint(equilateral_triangles(2, 1, 2))\nprint(equilateral_triangles(3, 2, 1))",
      -13.0078125
    ],
    [
      "def max_equilateral_triangles(a, b, c):\n    if a == b and a == c:\n        return 0\n    elif a < b and b < c:\n        return max_equilateral_triangles(a, b, c) + max_equilateral_triangles(a, c, b)\n    elif b < a and a < c:\n        return max_equilateral_triangles(b, a, c) + max_equilateral_triangles(b, c, a)\n    elif c < b and b < a:\n        return max_equilateral_triangles(c, b, a) + max_equilateral_triangles(c, a, b)\n\nprint(max_equilateral_triangles(1, 2, 3))\nprint(max_equilateral_triangles(2, 2, 2))\nprint(max_equilateral_triangles(3, 3, 3))\nprint(max_equilateral_triangles(4, 4, 4))\nprint(max_equilateral_triangles(5, 5, 5))\nprint(max_equilateral_triangles(6, 6, 6))\nprint(max_equilateral_triangles(7, 7, 7))\nprint(max_equilateral_triangles(8, 8, 8))\nprint(max_equilateral_triangles(9, 9, 9))",
      -14.8984375
    ],
    [
      "def max_equilateral_triangles(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a == 0 or b == 0 or c == 0:\n        return 1\n    if a + b + c > 3 * (a + b + c):\n        return max_equilateral_triangles(a, b, c)\n    else:\n        return max_equilateral_triangles(a, b, c) + max_equilateral_triangles(a, b, c - 1)\n\n\nprint(max_equilateral_triangles(3, 2, 1))",
      -16.484375
    ],
    [
      "\"\"\"\nProblem Statement\n\nGiven a triangle number, write a program that returns the maximum number of equilateral triangles that can be formed within a given triangle.\n\nExample 1:\n\nInput:\n3\nOutput:\n1\nExample 2:\n\nInput:\n7\nOutput:\n2\n\nConstraints:\n\n1 <= triangle <= 10000\n\"\"\"\n\nclass Solution(object):\n    def maxEquilateralTriangles(self, triangle):\n        \"\"\"\n        :type triangle: int\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(1, triangle+1):\n            for j in range(i):\n                if i - j == 1:\n                    count += 1\n        return count",
      -17.515625
    ],
    [
      "# solution\ndef count_equilateral_triangles(a, b, c):\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    count = 0\n    while a + b + c > 3:\n        if a + b + c == 2:\n            count += 1\n            if a + c == 2:\n                count += 1\n        a += 1\n        b += 1\n        c += 1\n    return count\n\n# test\nprint(count_equilateral_triangles(1, 2, 3))\nprint(count_equilateral_triangles(1, 2, 4))\nprint(count_equilateral_triangles(1, 2, 5))\nprint(count_equilateral_triangles(1, 3, 3))\nprint(count_equilateral_triangles(1, 3, 5))\nprint(count_equilateral_triangles(1, 4, 3))\nprint(count_equilateral_triangles(1, 4, 5))\nprint(count_equilateral_triangles(1, 5, 3))\nprint(count_equilateral_triangles(1, 5, 5))\nprint(count_equilateral_triangles(2, 4, 3))\nprint(count_equilateral_triangles(2, 4, 5))\nprint(count_equilateral_triangles(2, 5, 3))\nprint(count_equilateral_triangles(2, 5, 5))\nprint(count_equilateral_triangles(3, 4, 3))\nprint(count_equilateral_triangles(3, 4, 5))\nprint(count_equilateral_triangles(3, 5, 3))\nprint(count_equilateral_triangles(3, 5, 5))",
      -17.546875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}