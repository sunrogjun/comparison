{
  "problem": {
    "task_id": "MBPP/339",
    "prompt": "Write a python function to find the maximum occuring divisor in an interval.",
    "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
    "test_list": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ],
    "challenge_test_list": [],
    "problem_id": 328
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def max_divisor(start, end):\n    # Your code here\n    if start > end:\n        return 0\n    return max(start, end // 2)\n\n\nprint(max_divisor(2, 5))\nprint(max_divisor(3, 6))",
      1.501953125
    ],
    [
      "def max_occuring_divisor(a, b):\n    if a > b:\n        return 1\n    else:\n        return 0\n\nprint(max_occuring_divisor(5, 6))\nprint(max_occuring_divisor(5, 8))\nprint(max_occuring_divisor(1, 1))\nprint(max_occuring_divisor(2, 5))",
      1.400390625
    ],
    [
      "def max_divisor(a, b):\n    if a < b:\n        return 1\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(max_divisor(a, b))",
      1.0693359375
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return a\n    return max_divisor(b, a % b)\n\na, b = int(input()), int(input())\nprint(max_divisor(a, b))",
      0.99462890625
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return 1\n    else:\n        return max(a, b, a % b)\n\n\nprint(max_divisor(10, 20))",
      0.99365234375
    ],
    [
      "def max_divisor(a, b):\n    return (a / b) * max(a, b)\n\n\nprint(max_divisor(4, 5))\nprint(max_divisor(2, 4))\nprint(max_divisor(3, 5))\nprint(max_divisor(2, 3))",
      0.99267578125
    ],
    [
      "def max_divisor(a,b):\n    if a<b:\n        return a\n    else:\n        return b\n\nif __name__ == \"__main__\":\n    print(max_divisor(2,4))\n    print(max_divisor(6,8))",
      0.130615234375
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return max(a, b)\n    else:\n        return max(b, a)\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(max_divisor(a, b))",
      0.060546875
    ],
    [
      "def max_divisor(a, b):\n    if b == 0:\n        return 0\n    if b == 1:\n        return a\n    return max(a, max_divisor(a%b, b))\n\nprint(max_divisor(3, 2))",
      -0.077880859375
    ],
    [
      "def max_divisor(a, b):\n    if a < b:\n        return max(a, b)\n    else:\n        return max(b, a)\n\nprint(max_divisor(3, 5))\nprint(max_divisor(5, 3))\nprint(max_divisor(10, 20))",
      -0.07965087890625
    ],
    [
      "def max_divisor(a,b):\n    if a>b:\n        return a\n    else:\n        return b",
      -0.85595703125
    ],
    [
      "def max_divisor(x, y):\n    if x > y:\n        return x\n    if y < x:\n        return y\n    else:\n        return max_divisor(y, x)\n\n\nprint(max_divisor(3, 5))\nprint(max_divisor(10, 20))",
      -0.85693359375
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return b\n    else:\n        return a\n\n\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \"))\nprint(f\"Maximum occuring divisor of {a} and {b} is {max_divisor(a, b)}\")",
      -0.85693359375
    ],
    [
      "def find_max_divisor(a, b):\n    if b == 0:\n        return 0\n    elif a == 0:\n        return 1\n    else:\n        return 1 + max(a % b, find_max_divisor(a, b - 1))\n\n\ndef main():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    print(find_max_divisor(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85693359375
    ],
    [
      "def max_divisor(n1, n2):\n    return max(n1, n2)\n\n\nif __name__ == \"__main__\":\n    print(max_divisor(3, 3))",
      -0.85693359375
    ],
    [
      "def max_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return max(a, b, max_divisor(a - 1, b - 1))\n\n\nprint(max_divisor(5, 3))",
      -0.85693359375
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return 1\n    else:\n        return max(max(a, b), a % b)\n\n\nif __name__ == \"__main__\":\n    print(max_divisor(5, 10))\n    print(max_divisor(7, 8))\n    print(max_divisor(10, 20))\n    print(max_divisor(5, 10))",
      -0.85693359375
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n\nprint(max_divisor(3, 4))\nprint(max_divisor(2, 3))\nprint(max_divisor(6, 6))\nprint(max_divisor(9, 6))\nprint(max_divisor(3, 4))\nprint(max_divisor(1, 3))",
      -0.85693359375
    ],
    [
      "def max_occuring_divisor(a, b):\n    max_count = a\n    for i in range(1, b + 1):\n        if a % i == 0:\n            max_count = max(max_count, i)\n    return max_count\n\n\na = int(input(\"Enter the first interval: \"))\nb = int(input(\"Enter the second interval: \"))\nprint(max_occuring_divisor(a, b))",
      -0.85693359375
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return a\n    elif a == b:\n        return b\n    else:\n        return max(a, b)\n\n\nif __name__ == '__main__':\n    print(max_divisor(10, 20))",
      -0.85693359375
    ],
    [
      "def max_divisor(a, b):\n    if b == 0:\n        return 1\n    else:\n        return max(a, b // a)\n\n\nprint(max_divisor(2, 4))\nprint(max_divisor(3, 4))\nprint(max_divisor(5, 4))\nprint(max_divisor(2, 4))",
      -0.85791015625
    ],
    [
      "def max_divisor(a,b):\n    if(a > b):\n        return a\n    else:\n        return b",
      -0.85791015625
    ],
    [
      "def max_divisor(a, b):\n    if b > a:\n        return a\n    else:\n        return b\n\na = int(input())\nb = int(input())\n\nprint(max_divisor(a, b))",
      -0.85791015625
    ],
    [
      "def max_divisor(a,b):\n    if a > b:\n        return a\n    else:\n        return b",
      -0.8583984375
    ],
    [
      "def max_divisor(a, b):\n    # your code here\n    if a > b:\n        return b\n    else:\n        return a\n\n\nprint(max_divisor(5, 3))\nprint(max_divisor(5, 10))\nprint(max_divisor(2, 3))\nprint(max_divisor(1, 5))\nprint(max_divisor(2, 10))\nprint(max_divisor(5, 7))\nprint(max_divisor(5, 10))\nprint(max_divisor(5, 11))\nprint(max_divisor(5, 12))",
      -0.8583984375
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return a\n    if b > a:\n        return b\n    return max(a, b)\n\n\nif __name__ == \"__main__\":\n    print(max_divisor(4, 5))\n    print(max_divisor(8, 5))\n    print(max_divisor(5, 10))",
      -0.8583984375
    ],
    [
      "def find_divisor(a,b):\n    if a > b:\n        a,b = b,a\n    if b == 0:\n        return 0\n    elif b == 1:\n        return 1\n    else:\n        return max(a//b, find_divisor(a, b//b))\n\nprint(find_divisor(10,15))\nprint(find_divisor(2,3))\nprint(find_divisor(4,7))\nprint(find_divisor(4,10))",
      -0.8583984375
    ],
    [
      "def find_divisor(n):\n    a = 1\n    b = n\n    while a <= b:\n        mid = (a + b) // 2\n        if n % mid == 0:\n            b = mid\n        else:\n            a = mid + 1\n    return b\n\nprint(find_divisor(100))\nprint(find_divisor(4))\nprint(find_divisor(3))\nprint(find_divisor(2))\nprint(find_divisor(1))",
      -0.8583984375
    ],
    [
      "def max_divisor(a, b):\n    if b < a:\n        return b\n    else:\n        return a\n\n\nprint(max_divisor(2, 3))\nprint(max_divisor(2, 4))\nprint(max_divisor(3, 4))\nprint(max_divisor(5, 4))\nprint(max_divisor(6, 4))\nprint(max_divisor(4, 7))\nprint(max_divisor(2, 3))\nprint(max_divisor(2, 5))",
      -0.8583984375
    ],
    [
      "def max_divisor(a, b):\n    return max(a // b, b // a)\n\n\ndef test_max_divisor():\n    assert max_divisor(2, 3) == 2\n    assert max_divisor(5, 10) == 5\n    assert max_divisor(12, 3) == 3\n    assert max_divisor(8, 10) == 9\n    assert max_divisor(4, 10) == 8",
      -0.86083984375
    ],
    [
      "def max_divisor(a, b):\n    if b > a:\n        return b\n    else:\n        return a\n\n\nprint(max_divisor(1, 6))\nprint(max_divisor(2, 6))\nprint(max_divisor(3, 6))\nprint(max_divisor(6, 12))\nprint(max_divisor(6, 12))\nprint(max_divisor(12, 12))\nprint(max_divisor(12, 12))",
      -0.86083984375
    ],
    [
      "def max_occuring_divisor(a, b):\n    if b == 0:\n        return 0\n    return max(a % b, max_occuring_divisor(a, b - 1))\n\n\nprint(max_occuring_divisor(2, 2))\nprint(max_occuring_divisor(3, 2))\nprint(max_occuring_divisor(4, 2))\nprint(max_occuring_divisor(5, 2))",
      -0.86083984375
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return a\n    elif a == b:\n        return b\n    else:\n        return max(max_divisor(b, a-1), b)\n\n\nprint(max_divisor(3, 5))",
      -0.86572265625
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return a\n    elif a < b:\n        return max_divisor(a, b/2)\n    else:\n        return max_divisor(b, a/2)\n\n\ndef main():\n    print(max_divisor(2, 4))\n    print(max_divisor(5, 8))\n\n\nmain()",
      -0.896484375
    ],
    [
      "def find_max_divisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a <= 0 or b <= 0:\n        return -1\n    return max(a, b)\n\n\ndef main():\n    print(find_max_divisor(1, 1))\n    print(find_max_divisor(2, 3))\n    print(find_max_divisor(6, 2))\n    print(find_max_divisor(3, 3))\n    print(find_max_divisor(3, 4))\n    print(find_max_divisor(4, 4))\n    print(find_max_divisor(4, 5))\n    print(find_max_divisor(5, 5))\n    print(find_max_divisor(6, 6))\n    print(find_max_divisor(7, 7))\n    print(find_max_divisor(7, 8))\n    print(find_max_divisor(8, 8))\n    print(find_max_divisor(8, 9))\n    print(find_max_divisor(9, 9))\n    print(find_max_divisor(9, 10))\n    print(find_max_divisor(10, 10))\n    print(find_max_divisor(11, 11))\n    print(find_max_divisor(11, 12))\n    print(find_max_divisor(12, 11))\n    print(find_max_divisor(12, 12))\n    print(find_max_divisor(12, 13))\n    print(find_max_divisor(13, 12))\n    print(find_max_divisor(13, 13))\n    print(find_max_divisor(13, 14))\n    print(find_max_divisor(14, 13))\n    print(find_max_divisor(14, 14))\n    print(find_max_divisor(14, 15))\n    print(find_max_divisor(15, 15))\n    print(find_max_divisor(15, 16))\n    print",
      -1.126953125
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(max_divisor(2, 3))\nprint(max_divisor(3, 2))\nprint(max_divisor(2, 3))\nprint(max_divisor(1, 2))\nprint(max_divisor(1, 3))\nprint(max_divisor(2, 3))",
      -1.716796875
    ],
    [
      "def max_divisor(a, b):\n    if a < b:\n        return max(a, b)\n    else:\n        return a\n\n\nif __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    print(max_divisor(a, b))",
      -1.74609375
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return a\n    else:\n        return max(a, b)\n\nprint(max_divisor(2, 5))",
      -1.748046875
    ],
    [
      "def find_divisor(a,b):\n    if b>a:\n        return a\n    else:\n        return b\n\ndef find_max_divisor(a,b):\n    return find_divisor(a,b)\n\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nprint(find_max_divisor(a,b))",
      -1.84765625
    ],
    [
      "def find_max_divisor(a, b):\n    if a > b:\n        return 1\n    else:\n        return 0\n\n\nprint(find_max_divisor(2, 4))\nprint(find_max_divisor(5, 8))\nprint(find_max_divisor(6, 4))\nprint(find_max_divisor(2, 1))",
      -1.9111328125
    ],
    [
      "def max_divisor(x, y):\n    if x == y:\n        return x\n    if x % y == 0:\n        return y\n    return max_divisor(y, x % y)\n\n\nprint(max_divisor(3, 6))\nprint(max_divisor(2, 3))\nprint(max_divisor(3, 6))\nprint(max_divisor(5, 6))\nprint(max_divisor(5, 3))\nprint(max_divisor(1, 2))\nprint(max_divisor(1, 2))\nprint(max_divisor(1, 2))\nprint(max_divisor(1, 2))",
      -2.013671875
    ],
    [
      "def max_divisor(x,y):\n    if y>x:\n        return 0\n    else:\n        return 1\n\nprint(max_divisor(2,5))\nprint(max_divisor(2,8))\nprint(max_divisor(2,6))",
      -2.115234375
    ],
    [
      "def findMaxDivisor(a, b):\n    # Write your code here\n    if a < b:\n        return a\n    else:\n        return b\n\n\nprint(findMaxDivisor(4, 5))\nprint(findMaxDivisor(3, 4))\nprint(findMaxDivisor(3, 4))",
      -2.302734375
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return 0\n    elif a > b:\n        return 1\n    else:\n        return 2\n\n\na = int(input(\"Enter the minimum number: \"))\nb = int(input(\"Enter the maximum number: \"))\n\nprint(max_divisor(a, b))",
      -2.357421875
    ],
    [
      "def max_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return 1\n    return max(a, b)\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(max_divisor(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.365234375
    ],
    [
      "def max_divisor(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a > b:\n        return 1\n    else:\n        return max(a, b)\n\n\nprint(max_divisor(2, 3))",
      -2.46875
    ],
    [
      "def max_divisor(a, b):\n    max_divisor = a\n    while a!= b:\n        if a % b == 0:\n            a //= b\n        else:\n            max_divisor = max(max_divisor, b)\n            b //= a\n    return max_divisor\n\nprint(max_divisor(2, 6))\nprint(max_divisor(3, 6))\nprint(max_divisor(3, 4))\nprint(max_divisor(10, 15))\nprint(max_divisor(20, 30))\nprint(max_divisor(10, 9))\nprint(max_divisor(5, 10))\nprint(max_divisor(5, 5))\nprint(max_divisor(5, 5))\nprint(max_divisor(5, 5))",
      -2.703125
    ],
    [
      "def max_divisor(a, b):\n    # write your code here\n    if a < b:\n        return max(a, b)\n    else:\n        return max(b, a)\n\n\nprint(max_divisor(3, 7))\nprint(max_divisor(5, 7))\nprint(max_divisor(10, 7))\nprint(max_divisor(7, 7))\nprint(max_divisor(10, 10))\nprint(max_divisor(8, 6))\nprint(max_divisor(8, 8))\nprint(max_divisor(8, 7))\nprint(max_divisor(8, 8))",
      -2.763671875
    ],
    [
      "def max_divisor(a,b):\n    if a>b:\n        return 1\n    else:\n        return 0\n\nif __name__ == \"__main__\":\n    print(max_divisor(5,7))\n    print(max_divisor(5,9))\n    print(max_divisor(4,8))",
      -2.7890625
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return a\n    return b\n\nprint(max_divisor(3, 5))\nprint(max_divisor(5, 3))\nprint(max_divisor(2, 4))\nprint(max_divisor(2, 1))",
      -2.958984375
    ],
    [
      "def find_max_divisor(a, b):\n    max_divisor = 0\n    i = 0\n    j = 0\n    while i < len(a) and j < len(b):\n        if a[i] % b[j] == 0:\n            max_divisor = max(max_divisor, b[j])\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return max_divisor\n\n\na = [2, 3, 4, 5]\nb = [2, 3, 4]\nprint(find_max_divisor(a, b))",
      -2.962890625
    ],
    [
      "def max_divisor(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first interval: \"))\n    b = int(input(\"Enter the second interval: \"))\n    print(max_divisor(a, b))",
      -2.9765625
    ],
    [
      "def find_max_divisor(a, b):\n    if a > b:\n        return 1\n    if a == b:\n        return 0\n\n    max_divisor = 0\n    i = 1\n    while i <= b:\n        if b % i == 0:\n            max_divisor = max(max_divisor, i)\n        i += 1\n    return max_divisor\n\n\nprint(find_max_divisor(5, 8))\nprint(find_max_divisor(5, 3))\nprint(find_max_divisor(7, 9))\nprint(find_max_divisor(9, 8))\nprint(find_max_divisor(6, 7))",
      -3.123046875
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return a\n    else:\n        return max(a, b)\n\n\na = int(input(\"Enter the start: \"))\nb = int(input(\"Enter the end: \"))\nprint(\"The maximum occuring divisor is \", max_divisor(a, b))",
      -3.2734375
    ],
    [
      "def max_divisor(a, b):\n    if b == 0:\n        return 0\n    return a//b\n\n\na = int(input(\"Enter the first value: \"))\nb = int(input(\"Enter the second value: \"))\n\nprint(\"The maximum occuring divisor is \", max_divisor(a, b))",
      -3.525390625
    ],
    [
      "def max_divisor(a, b):\n    return max(a // i for i in range(1, b+1))\n\n\na = int(input(\"Enter the first interval: \"))\nb = int(input(\"Enter the second interval: \"))\nprint(max_divisor(a, b))",
      -3.591796875
    ],
    [
      "def max_divisor(a, b):\n    if a < b:\n        a, b = b, a\n\n    if a % b == 0:\n        return b\n    else:\n        return a\n\n\nprint(max_divisor(10, 20))\nprint(max_divisor(20, 30))\nprint(max_divisor(30, 40))\nprint(max_divisor(10, 30))",
      -3.62890625
    ],
    [
      "def max_occuring_divisor(interval):\n    if interval[0] > interval[1]:\n        return interval[1]\n    else:\n        return interval[0]\n\n\nprint(max_occuring_divisor([4, 7, 10, 12, 13]))",
      -3.65625
    ],
    [
      "def find_max_divisor(a,b):\n  if (a>b):\n    return 1\n  else:\n    return b\n\nif __name__ == \"__main__\":\n  print(find_max_divisor(10,3))\n  print(find_max_divisor(3,5))\n  print(find_max_divisor(2,3))\n  print(find_max_divisor(3,10))",
      -3.70703125
    ],
    [
      "def max_occuring_divisor(a, b):\n  max_divisor = 0\n  while a < b:\n    if a % b == 0:\n      max_divisor = b\n    a += 1\n  return max_divisor\n\n\na = int(input())\nb = int(input())\nprint(max_occuring_divisor(a, b))",
      -3.798828125
    ],
    [
      "def max_divisor(a,b):\n    if a <= b:\n        return max(a,b)\n    else:\n        return a\n\nprint(max_divisor(3,5))\nprint(max_divisor(5,7))\nprint(max_divisor(7,10))\nprint(max_divisor(10,20))",
      -3.90234375
    ],
    [
      "def find_max_divisor(a, b):\n    if a > b:\n        return a\n    elif a == b:\n        return b\n    else:\n        return b\n\n\nprint(find_max_divisor(4, 7))\nprint(find_max_divisor(3, 2))\nprint(find_max_divisor(3, 5))\nprint(find_max_divisor(4, 6))\nprint(find_max_divisor(6, 7))\nprint(find_max_divisor(7, 4))\nprint(find_max_divisor(6, 5))\nprint(find_max_divisor(3, 2))\nprint(find_max_divisor(3, 5))\nprint(find_max_divisor(3, 6))\nprint(find_max_divisor(6, 7))\nprint(find_max_divisor(7, 4))\nprint(find_max_divisor(4, 6))\nprint(find_max_divisor(6, 5))\nprint(find_max_divisor(3, 2))",
      -4.00390625
    ],
    [
      "def max_divisor(a, b):\n    max_divisor = 0\n    for divisor in range(a, b + 1):\n        if a % divisor == 0 and b % divisor == 0:\n            max_divisor = divisor\n    return max_divisor\n\nprint(max_divisor(6, 20))",
      -4.11328125
    ],
    [
      "def max_divisor(a, b):\n    # Write your code here\n    max_divisor = 0\n    if a > b:\n        return max_divisor\n    for i in range(1, b + 1):\n        if a % i == 0:\n            max_divisor = max(max_divisor, i)\n    return max_divisor\n\n\nprint(max_divisor(5, 20))",
      -4.12890625
    ],
    [
      "def max_divisor(x, y):\n    return max(x % y, y % x)\n\n\nprint(max_divisor(3, 4))\nprint(max_divisor(3, 2))\nprint(max_divisor(3, 5))\nprint(max_divisor(1, 2))\nprint(max_divisor(1, 3))\nprint(max_divisor(5, 5))\nprint(max_divisor(1, 7))\nprint(max_divisor(7, 7))",
      -4.296875
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return 1\n    elif a == b:\n        return 0\n    else:\n        return max(a, b)\n\n\nprint(max_divisor(3, 5))\nprint(max_divisor(1, 2))\nprint(max_divisor(4, 2))\nprint(max_divisor(1, 6))",
      -4.5546875
    ],
    [
      "def max_divisor(a, b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    i = 1\n    j = 1\n    while i <= b:\n        if a % i == 0 and b % i == 0:\n            return i\n        i = i + 1\n    return -1\n\n\nif __name__ == '__main__':\n    print(max_divisor(3, 6))\n    print(max_divisor(5, 4))\n    print(max_divisor(6, 7))\n    print(max_divisor(4, 7))\n    print(max_divisor(6, 8))",
      -4.62109375
    ],
    [
      "def max_divisor(a,b):\n    m=0\n    for i in range(b):\n        if(a%i==0):\n            m=i\n    return m\n\nprint(max_divisor(3,5))\nprint(max_divisor(3,7))\nprint(max_divisor(5,10))",
      -4.6328125
    ],
    [
      "def divisor(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\n\ndef max_divisor(a, b):\n    a = divisor(a, b)\n    if a == 0:\n        return 0\n    else:\n        return a\n\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nprint(f\"The maximum occuring divisor is: {max_divisor(a, b)}\")",
      -4.75
    ],
    [
      "def max_divisor(a, b):\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    return max(a, b)\n\n\nif __name__ == '__main__':\n    print(max_divisor(2, 5))\n    print(max_divisor(3, 4))\n    print(max_divisor(4, 5))\n    print(max_divisor(5, 4))\n    print(max_divisor(2, 7))\n    print(max_divisor(6, 8))",
      -4.89453125
    ],
    [
      "def max_divisor(a, b):\n    if b > a:\n        return a\n    else:\n        return b\n\n\nprint(max_divisor(2, 3))\nprint(max_divisor(1, 3))\nprint(max_divisor(10, 2))",
      -4.9453125
    ],
    [
      "def max_divisor(a,b):\n    if a<b:\n        return 0\n    else:\n        return 1\n\nprint(max_divisor(10,20))\nprint(max_divisor(5,10))\nprint(max_divisor(7,5))\nprint(max_divisor(2,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10))\nprint(max_divisor(5,10",
      -5.34765625
    ],
    [
      "def divisor_finder(a, b):\n    max_count = 0\n    a = max(a, b)\n    while a > 0:\n        if a % b == 0:\n            max_count += 1\n        a -= 1\n    return max_count\n\nif __name__ == '__main__':\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    print(\"Maximum occuring divisor is: \", divisor_finder(a, b))",
      -5.54296875
    ],
    [
      "def max_divisor(a, b):\n    if b == 0:\n        return a\n    else:\n        return max(max_divisor(a, b-1), a)\n\nprint(max_divisor(2, 7))\nprint(max_divisor(3, 6))\nprint(max_divisor(2, 3))\nprint(max_divisor(2, 5))\nprint(max_divisor(2, -2))\nprint(max_divisor(2, -2))",
      -5.88671875
    ],
    [
      "def max_divisor(a,b):\n    if a>b:\n        return 0\n    else:\n        return 1\n\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nprint(\"Maximum divisor is:\", max_divisor(a,b))",
      -5.9140625
    ],
    [
      "def max_divisor(a, b):\n    if b == 0:\n        return a\n    else:\n        return max(a, max_divisor(b, a % b))\n\nprint(max_divisor(2, 3))\nprint(max_divisor(3, 4))\nprint(max_divisor(3, 6))\nprint(max_divisor(2, 6))\nprint(max_divisor(2, 5))",
      -6.0234375
    ],
    [
      "def find_divisor(a, b):\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return 1\n    if a % b == 0:\n        return b\n    return find_divisor(b, a % b)\n\n\nif __name__ == \"__main__\":\n    a, b = int(input()), int(input())\n    print(find_divisor(a, b))",
      -6.2578125
    ],
    [
      "def find_max_divisor(a, b):\n  count = 0\n  for i in range(a, b+1):\n    if a % i == 0:\n      count += 1\n  return count\n\nprint(find_max_divisor(10, 20))",
      -6.36328125
    ],
    [
      "def find_max_divisor(a, b):\n    max_divisor = 0\n    for i in range(a, b + 1):\n        if a % i == 0:\n            max_divisor = i\n    return max_divisor\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(find_max_divisor(a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.4609375
    ],
    [
      "def max_divisor(x, y):\n    if x == y:\n        return x\n    if x == -1 or y == -1:\n        return -1\n    return max(x, y)\n\n\ndef max_divisor_2(x, y):\n    return max(x // y, y // x)\n\n\nprint(max_divisor(3, 5))\nprint(max_divisor_2(3, 5))",
      -6.5234375
    ],
    [
      "def find_divisor(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\nif __name__ == '__main__':\n    a = int(input(\"Enter the first interval: \"))\n    b = int(input(\"Enter the second interval: \"))\n    print(\"The maximum occuring divisor is\", find_divisor(a, b))",
      -6.7421875
    ],
    [
      "def max_divisor(a, b):\n    # Write your code here\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a % b == 0:\n        return b\n    else:\n        return a\n\nprint(max_divisor(3, 4))\nprint(max_divisor(2, 3))\nprint(max_divisor(2, 3))\nprint(max_divisor(3, 4))\nprint(max_divisor(3, 4))\nprint(max_divisor(3, 4))\nprint(max_divisor(3, 4))\nprint(max_divisor(3, 4))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 4))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(3, 4))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(3, 4))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(3, 4))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(3, 4))\nprint(max_divisor(4, 3))\nprint(max_divisor(3, 4))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(3, 4))\nprint(max_divisor(3, 4))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max_divisor(4, 3))\nprint(max",
      -6.80078125
    ],
    [
      "def max_divisor(a, b):\n    return max(a // b, 1)\n\n\nif __name__ == \"__main__\":\n    print(max_divisor(3, 2))\n    print(max_divisor(4, 3))\n    print(max_divisor(10, 20))\n    print(max_divisor(5, 9))\n    print(max_divisor(3, 6))\n    print(max_divisor(1, 1))\n    print(max_divisor(2, 2))\n    print(max_divisor(2, 3))\n    print(max_divisor(2, 4))\n    print(max_divisor(4, 4))\n    print(max_divisor(3, 4))\n    print(max_divisor(4, 5))\n    print(max_divisor(5, 6))\n    print(max_divisor(6, 7))\n    print(max_divisor(7, 8))\n    print(max_divisor(7, 9))\n    print(max_divisor(9, 10))\n    print(max_divisor(10, 11))\n    print(max_divisor(11, 12))\n    print(max_divisor(12, 13))\n    print(max_divisor(13, 14))\n    print(max_divisor(14, 15))\n    print(max_divisor(15, 16))",
      -7.00390625
    ],
    [
      "def max_divisor(a, b):\n    if b == 0:\n        return 0\n    if a == 0:\n        return b\n    return max(a, b//a)\n\n\ndef main():\n    print(max_divisor(10, 4))\n    print(max_divisor(10, 3))\n    print(max_divisor(10, 5))\n    print(max_divisor(5, 6))\n    print(max_divisor(10, 2))\n    print(max_divisor(5, 1))\n\n\nif __name__ == \"__main__\":\n    main()",
      -7.28125
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return 0\n    if a < b:\n        return 1\n    return max(max_divisor(a, b-1), max_divisor(a-1, b))\n\n\nprint(max_divisor(2, 4))",
      -7.6484375
    ],
    [
      "def max_divisor(a, b):\n    m = 0\n    for i in range(a, b+1):\n        if a % i == 0:\n            m = i\n    return m\n\n\nprint(max_divisor(1, 7))\nprint(max_divisor(2, 4))\nprint(max_divisor(2, 2))\nprint(max_divisor(3, 5))\nprint(max_divisor(7, 5))",
      -7.94921875
    ],
    [
      "def max_divisor(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return max(a, b) // max(a, b)\n\n\nprint(max_divisor(4, 3))\nprint(max_divisor(3, 4))\nprint(max_divisor(3, 5))\nprint(max_divisor(3, 6))\nprint(max_divisor(5, 3))\nprint(max_divisor(10, 3))",
      -8.8046875
    ],
    [
      "def max_divisor(a,b):\n    if a<b:\n        return b\n    else:\n        return a\n\nprint(max_divisor(10,20))\nprint(max_divisor(10,30))\nprint(max_divisor(10,30,10))\nprint(max_divisor(30,10))",
      -8.8203125
    ],
    [
      "def find_max_divisor(a,b):\n    if b<a:\n        return b\n    if a==1:\n        return b\n    for i in range(1,b+1):\n        if a%i==0:\n            return i\n\n\nprint(find_max_divisor(2,3))\nprint(find_max_divisor(2,4))\nprint(find_max_divisor(2,6))\nprint(find_max_divisor(5,6))\nprint(find_max_divisor(5,8))\nprint(find_max_divisor(5,10))\nprint(find_max_divisor(1,1))\nprint(find_max_divisor(1,3))\nprint(find_max_divisor(5,10))",
      -8.9140625
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return a\n    if a < b:\n        return max_divisor(a, b)\n    return max_divisor(b, a)\n\n\nprint(max_divisor(2, 3))\nprint(max_divisor(3, 5))",
      -9.078125
    ],
    [
      "def max_divisor(a, b):\n    if b == 0:\n        return 0\n    elif a == 0:\n        return b\n    elif a == b:\n        return 1\n    else:\n        return max(a//b, max_divisor(a, b-1))\n\n\nprint(max_divisor(3, 4))\nprint(max_divisor(5, 6))\nprint(max_divisor(7, 8))",
      -9.4765625
    ],
    [
      "def max_occuring_divisor(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return max_occuring_divisor(b, a)\n    else:\n        return max_occuring_divisor(a, b)\n\n\nprint(max_occuring_divisor(10, 20))\nprint(max_occuring_divisor(10, 30))\nprint(max_occuring_divisor(20, 30))",
      -10.6875
    ],
    [
      "def max_divisor(a,b):\n    count = 0\n    for i in range(a,b+1):\n        if a%i == 0 and b%i == 0:\n            count+=1\n    return count\n\n\nprint(max_divisor(2,3))\nprint(max_divisor(2,4))\nprint(max_divisor(3,4))\nprint(max_divisor(5,8))\nprint(max_divisor(5,12))\nprint(max_divisor(2,4))\nprint(max_divisor(2,7))\nprint(max_divisor(2,9))\nprint(max_divisor(2,11))\nprint(max_divisor(3,6))\nprint(max_divisor(3,11))\nprint(max_divisor(2,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,9))\nprint(max_divisor(3,",
      -10.84375
    ],
    [
      "def max_occuring_divisor(a, b):\n    if a == b:\n        return 0\n    if a == 0:\n        return 1\n    if b == 0:\n        return 1\n\n    if a > b:\n        return max_occuring_divisor(b, a)\n    else:\n        return max_occuring_divisor(a, b)\n\n\nprint(max_occuring_divisor(4, 2))\nprint(max_occuring_divisor(3, 4))\nprint(max_occuring_divisor(4, 5))\nprint(max_occuring_divisor(1, 0))\nprint(max_occuring_divisor(1, 1))\nprint(max_occuring_divisor(1, 2))",
      -11.1484375
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return a\n    max_a = a\n    max_b = b\n    while a > b:\n        max_a = max(max_a, a % b)\n        b = b // b\n    max_a = max(max_a, b)\n    return max_a\n\n\nif __name__ == \"__main__\":\n    print(max_divisor(4, 5))\n    print(max_divisor(4, 9))\n    print(max_divisor(4, 6))\n    print(max_divisor(4, 5))",
      -11.203125
    ],
    [
      "def max_divisor(x, y):\n    if y == 0:\n        return 0\n    if x == 0:\n        return 0\n    if y > x:\n        return 1\n    return max(max_divisor(x - 1, y), max_divisor(x - 1, y - 1))\n\nprint(max_divisor(3, 4))\nprint(max_divisor(3, -4))\nprint(max_divisor(5, 5))\nprint(max_divisor(6, 5))\nprint(max_divisor(10, 6))\nprint(max_divisor(10, 7))\nprint(max_divisor(10, -6))",
      -11.6875
    ],
    [
      "def find_max_divisor(a, b):\n    if b < a:\n        a, b = b, a\n    if a == b:\n        return 0\n    if a == 1:\n        return 1\n    return max(find_max_divisor(a-1, b), find_max_divisor(a, b-1))\n\n\nprint(find_max_divisor(7, 5))",
      -11.7109375
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return 0\n    if a > b:\n        return 1\n    else:\n        return max(max_divisor(a, b-1), max_divisor(a-1, b))\n\n\nprint(max_divisor(5, 3))\nprint(max_divisor(4, 5))\nprint(max_divisor(5, 6))\nprint(max_divisor(5, 7))",
      -12.2421875
    ],
    [
      "def max_divisor(a, b):\n    if a == b:\n        return a\n    else:\n        return max(max_divisor(a, b//a), max_divisor(b, a//b))\n\nprint(max_divisor(1, 2))\nprint(max_divisor(1, 3))\nprint(max_divisor(2, 3))\nprint(max_divisor(4, 5))\nprint(max_divisor(5, 6))\nprint(max_divisor(7, 10))\nprint(max_divisor(8, 10))",
      -12.9765625
    ],
    [
      "def divisor_find(a, b):\n    max_divisor = 0\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i] % b[i] == 0:\n            max_divisor = max(max_divisor, b[i])\n            i += 1\n        else:\n            i += 1\n    if i == len(a):\n        return max_divisor\n    else:\n        return max_divisor\n\n\nif __name__ == '__main__':\n    print(divisor_find(4, 5))\n    print(divisor_find(3, 5))\n    print(divisor_find(1, 2))\n    print(divisor_find(1, 5))\n    print(divisor_find(2, 3))\n    print(divisor_find(2, 4))\n    print(divisor_find(2, 6))\n    print(divisor_find(2, 7))\n    print(divisor_find(2, 8))\n    print(divisor_find(2, 9))\n    print(divisor_find(4, 10))\n    print(divisor_find(7, 10))\n    print(divisor_find(8, 9))\n    print(divisor_find(2, 4))\n    print(divisor_find(3, 4))\n    print(divisor_find(6, 6))\n    print(divisor_find(2, 4))\n    print(divisor_find(7, 4))\n    print(divisor_find(8, 6))\n    print(divisor_find(8, 5))\n    print(divisor_find(8, 3))\n    print(divisor_find(8, 2))\n    print(divisor_find(8, 1))\n    print(divisor_find(8, 0))\n    print(divisor_find(9, 3))\n    print(divisor_find(2, 3))\n    print(divisor_find(2, 4))\n    print(divisor_find(3, 4))\n    print(divisor_find(3, 2))\n    print(divisor_",
      -13.328125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}