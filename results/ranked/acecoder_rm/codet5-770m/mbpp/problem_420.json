{
  "problem": {
    "task_id": "MBPP/431",
    "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
    "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
    "test_list": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ],
    "challenge_test_list": [],
    "problem_id": 420
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def common_elements(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    return list(set(list1) & set(list2))!= []\n\n\ndef common_elements_2(list1, list2):\n    return set(list1) & set(list2)!= set()\n\n\nprint(common_elements([1, 2, 2, 2], [2, 2, 2, 2]))\nprint(common_elements([1, 2, 2, 2], [2, 2, 2, 2]))\nprint(common_elements_2([1, 2, 2, 2], [2, 2, 2, 2]))",
      8.1796875
    ],
    [
      "def common_elements(list1, list2):\n    return len(set(list1).intersection(set(list2))) >= 1\n\nif __name__ == \"__main__\":\n    assert common_elements([1, 2, 3], [3, 2, 1]) == True\n    assert common_elements([1, 2, 3], [2, 3, 1]) == False\n    assert common_elements([1, 2, 3], [2, 2, 1]) == True",
      7.5859375
    ],
    [
      "def common_elements(a, b):\n    if len(set(a).intersection(set(b))) > 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(common_elements([1, 2, 3], [2, 2, 3]))\n    print(common_elements([1, 2, 3], [2, 2, 3]))\n    print(common_elements([1, 2, 3], [2, 2, 4]))\n    print(common_elements([1, 2, 3], [1, 1, 2]))",
      7.328125
    ],
    [
      "def common_element(l1, l2):\n    return len(set(l1) & set(l2)) > 0\n\nprint(common_element([1, 2, 3, 4, 5], [3, 4, 5, 6]))\nprint(common_element([1, 2, 3, 4, 5], [4, 5, 6, 7]))\nprint(common_element([1, 2, 3, 4, 5], [1, 4, 5, 6]))\nprint(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8]))",
      6.3359375
    ],
    [
      "def common(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0\n\n\nprint(common([1, 2, 3, 4, 5], [2, 3, 4]))\nprint(common([1, 2, 3, 4, 5], [4, 5]))\nprint(common([1, 2, 3, 4, 5], [2, 3, 5]))\nprint(common([1, 2, 3, 4, 5], [4, 5, 6]))",
      6.30859375
    ],
    [
      "def common_elements(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\n\nprint(common_elements([1, 2, 2, 2], [2, 2, 2, 2]))\nprint(common_elements([1, 2, 2, 2], [2, 2, 2, 2]))\nprint(common_elements([1, 2, 2, 2], [2, 2, 2, 2]))\nprint(common_elements([1, 2, 2, 2], [2, 2, 2, 2]))",
      6.29296875
    ],
    [
      "def check_common_elements(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    common_element = list(set(list1) & set(list2))\n    return len(common_element) > 0\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    list2 = [2, 3, 4, 5, 6, 7, 8]\n    print(check_common_elements(list1, list2))\n\nif __name__ == \"__main__\":\n    main()",
      6.07421875
    ],
    [
      "def find_common(list1, list2):\n  return len(set(list1).intersection(set(list2))) > 0\n\nprint(find_common([1, 2, 3, 4, 5], [3, 4, 5]))\nprint(find_common([1, 2, 3, 4, 5], [2, 3, 5, 6, 7]))\nprint(find_common([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\nprint(find_common([1, 2, 3, 4, 5], [2, 3, 6, 7]))\nprint(find_common([1, 2, 3, 4, 5], [2, 3, 7, 8]))",
      5.6953125
    ],
    [
      "def common_elements(list1, list2):\n    \"\"\"\n    :type list1: list[int]\n    :type list2: list[int]\n    :rtype: bool\n    \"\"\"\n    return len(set(list1).intersection(set(list2))) > 0\n\n\nif __name__ == \"__main__\":\n    assert common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]) == True\n    assert common_elements([1, 2, 3, 4], [4, 5, 6, 7]) == False\n    assert common_elements([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True\n    assert common_elements([1, 2, 3, 4, 5], [6, 7, 8, 9]) == True\n    assert common_elements([1, 2, 3, 4, 5], [8, 9, 10]) == False\n    assert common_elements([1, 2, 3, 4, 5], [2, 4, 6, 8]) == True",
      5.15625
    ],
    [
      "def has_common_element(lst1, lst2):\n    return len(set(lst1) & set(lst2)) > 0\n\n\nassert has_common_element([1, 2, 3, 4, 5, 6], [4, 5, 6])\nassert not has_common_element([1, 2, 3, 4, 5, 6], [1, 4, 5, 6])\nassert not has_common_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10])\nassert has_common_element([1, 2, 3, 4, 5, 6], [8, 9, 10, 11])\nassert has_common_element([1, 2, 3, 4, 5, 6], [1, 1, 1, 1, 1, 1])",
      4.17578125
    ],
    [
      "def have_common(list1, list2):\n    common = []\n    for x in list1:\n        for y in list2:\n            if x == y:\n                common.append(x)\n    return len(common) > 0\n\n\nprint(have_common([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(have_common([1, 2, 3, 4], [2, 3, 4]))",
      3.880859375
    ],
    [
      "def common_elements(list1, list2):\n    list1_set = set(list1)\n    list2_set = set(list2)\n    common_list = list1_set.intersection(list2_set)\n    return len(common_list) > 0\n\nif __name__ == '__main__':\n    print(common_elements([1,2,3,4], [5,6,7,8]))\n    print(common_elements([1,2,3,4], [2,3,4]))\n    print(common_elements([1,2,3,4], [2,3,5]))\n    print(common_elements([1,2,3,4], [3,4,5]))",
      3.720703125
    ],
    [
      "def has_common_element(list1, list2):\n    common = list(set(list1) & set(list2))\n    return len(common) > 0\n\n\ndef has_common_element_2(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\n\nprint(has_common_element([1, 2, 3, 4, 5], [2, 3]))\nprint(has_common_element([1, 2, 3, 4, 5], [2, 4]))\nprint(has_common_element([1, 2, 3, 4, 5], [4, 5]))\nprint(has_common_element([1, 2, 3, 4, 5], [3, 4, 5]))\nprint(has_common_element([1, 2, 3, 4, 5], [3, 5]))\nprint(has_common_element([1, 2, 3, 4, 5], [3, 2]))\nprint(has_common_element([1, 2, 3, 4, 5], [4, 5]))",
      3.375
    ],
    [
      "def common_elements(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    common_elements_list = []\n\n    for element in list1:\n        if element in list2:\n            common_elements_list.append(element)\n\n    return len(common_elements_list) > 0\n\n\nif __name__ == \"__main__\":\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]))",
      3.212890625
    ],
    [
      "def common_elements(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0\n\n\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 1, 2]\nprint(common_elements(list1, list2))",
      3.14453125
    ],
    [
      "def find_common(list1, list2):\n    list1_set = set(list1)\n    list2_set = set(list2)\n    common = list1_set.intersection(list2_set)\n    return len(common) > 0\n\nprint(find_common([1,2,3,4], [2,3,4]))\nprint(find_common([1,2,3,4], [4,5,6]))\nprint(find_common([1,2,3,4], [4,5,6,7]))\nprint(find_common([1,2,3,4], [5,6,7]))\nprint(find_common([1,2,3,4], [5,6,7,8]))\nprint(find_common([1,2,3,4], [7,8,9]))\nprint(find_common([1,2,3,4], [1,2,3,4]))",
      3.06640625
    ],
    [
      "def common_elements(list1, list2):\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert common_elements([1, 2, 3], [2, 3, 4]) == True\n    assert common_elements([1, 2, 3], [2, 1, 2]) == True\n    assert common_elements([1, 2, 3], [3, 1, 2]) == False\n    assert common_elements([1, 2, 3], [4, 2, 3]) == False\n    assert common_elements([1, 2, 3], [1, 2, 4]) == True\n    assert common_elements([1, 2, 3], [1, 4, 2]) == True\n    assert common_elements([1, 2, 3], [1, 4, 4]) == True",
      2.9765625
    ],
    [
      "def common_elements(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0\n\n\nprint(common_elements([1, 2, 3, 4, 5], [4, 5, 2, 3, 1]))\nprint(common_elements([1, 2, 3, 4, 5], [4, 5, 2, 3, 1]))",
      2.58984375
    ],
    [
      "def find_common_element(list1, list2):\n    return len(list(set(list1).intersection(list2))) > 0\n\nif __name__ == '__main__':\n    print(find_common_element([1,2,3], [4,5,6]))\n    print(find_common_element([1,2,3], [4,5,7]))\n    print(find_common_element([1,2,3], [5,6,7]))\n    print(find_common_element([1,2,3], [1,2,3]))\n    print(find_common_element([1,2,3], [1,2,3,4]))\n    print(find_common_element([1,2,3], [5,6,7]))\n    print(find_common_element([1,2,3], [4,5,7]))\n    print(find_common_element([1,2,3], [1,2,3,4]))\n    print(find_common_element([1,2,3], [1,2,3,5]))\n    print(find_common_element([1,2,3], [1,2,3,4,5]))\n    print(find_common_element([1,2,3], [1,2,3,4,5,6]))",
      2.509765625
    ],
    [
      "def common_elements(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\n\nif __name__ == \"__main__\":\n    assert common_elements([1, 2, 3], [1, 2, 3]) == True\n    assert common_elements([1, 2, 3], [2, 3]) == False",
      2.484375
    ],
    [
      "def check_common_elements(list1, list2):\n    common_list = []\n    for i in list1:\n        if i in list2:\n            common_list.append(i)\n    return len(common_list) > 0",
      2.455078125
    ],
    [
      "def common_elements(list1, list2):\n    list1 = set(list1)\n    list2 = set(list2)\n    return len(list1.intersection(list2)) > 0\n\nprint(common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\nprint(common_elements([1, 2, 3, 4, 5], [3, 4, 6, 7]))\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]))",
      2.36328125
    ],
    [
      "def check_common_element(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\nprint(check_common_element([1,2,3,4,5], [5,6,7,8,9]))\nprint(check_common_element([1,2,3,4,5], [1,2,3,4,5]))",
      2.154296875
    ],
    [
      "def find_common_element(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0\n\n\nprint(find_common_element([1, 2, 3], [2, 3, 4]))\nprint(find_common_element([1, 2, 3], [2, 3, 5]))\nprint(find_common_element([1, 2, 3], [3, 5, 7]))",
      2.126953125
    ],
    [
      "def find_common(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\n\nif __name__ == \"__main__\":\n    assert find_common([1, 2, 3, 4], [1, 2, 3, 4]) == True\n    assert find_common([1, 2, 3, 4], [1, 2]) == False\n    assert find_common([1, 2, 3, 4, 5], [1, 2]) == True\n    assert find_common([1, 2, 3, 4, 5], [1, 2, 3, 5]) == True",
      1.958984375
    ],
    [
      "def list_common_element(list1, list2):\n    list1.sort()\n    list2.sort()\n    return list1[0] == list2[0]\n\n\nprint(list_common_element([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]))\nprint(list_common_element([1, 2, 3, 4, 5], [3, 4, 5, 3, 2]))",
      1.9267578125
    ],
    [
      "def common_elements(list1, list2):\n    common = set(list1) & set(list2)\n    return len(common) > 0\n\n\nprint(common_elements([1, 2, 3], [2, 3, 4]))\nprint(common_elements([1, 2, 3, 4], [1, 2, 3]))\nprint(common_elements([1, 2, 3], [1, 2, 3, 4]))",
      1.7587890625
    ],
    [
      "def common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n\n\nprint(common_elements([1, 1, 1, 2, 2, 2], [1, 2, 3, 3, 4, 4]))",
      1.71875
    ],
    [
      "def one_common(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert one_common([1, 2, 3], [2, 3, 1]) == True\n    assert one_common([1, 2, 3], [2, 4]) == False\n    assert one_common([1, 2, 3], [2, 5, 6]) == True\n    assert one_common([1, 2, 3], [1, 2, 3]) == False\n    assert one_common([1, 2, 3], [3, 2, 4]) == True\n    assert one_common([1, 2, 3], [1, 2, 3]) == False",
      1.6884765625
    ],
    [
      "def intersection(list1, list2):\n    return list(set(list1).intersection(list2))\n\nprint(intersection([1,2,3], [4,5,6]))",
      1.5673828125
    ],
    [
      "def common_element(list1, list2):\n    # Fill this in.\n    return list(set(list1) & set(list2))\n\nprint(common_element([1,2,3,4,5], [4,5,6,7]))",
      1.16015625
    ],
    [
      "def find_common_element(list1, list2):\n    list1.sort()\n    list2.sort()\n    common_element = None\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if common_element is None:\n                common_element = list1[i]\n            else:\n                return False\n    return True\n\nprint(find_common_element([1, 1, 2, 2, 2, 3], [1, 2, 3]))",
      0.8515625
    ],
    [
      "def check_common_elements(list1, list2):\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    return any(element in list1 for element in list2)\n\n\nprint(check_common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(check_common_elements([1, 2, 3, 4, 5], [1, 2, 4, 5, 6]))\nprint(check_common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(check_common_elements([1, 2, 3, 4, 5], [2, 4, 5, 6]))\nprint(check_common_elements([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]))",
      0.68408203125
    ],
    [
      "def common_elements(list_1, list_2):\n    list_1 = set(list_1)\n    list_2 = set(list_2)\n    return len(list_1.intersection(list_2)) > 0\n\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]))",
      0.51220703125
    ],
    [
      "def common_element(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    if len(set(list1)) == len(list1) and len(set(list2)) == len(list2):\n        return True\n    else:\n        return False\n\n\nprint(common_element([1, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3]))",
      0.359130859375
    ],
    [
      "def find_common(lst1, lst2):\n    return len(set(lst1) & set(lst2)) > 0\n\nprint(find_common([1,2,3], [2,3,4]))\nprint(find_common([1,2,3], [3,4,5]))\nprint(find_common([1,2,3], [4,5,6]))",
      0.131103515625
    ],
    [
      "def common_elements(list1, list2):\n    return list(set(list1).intersection(set(list2)))\n\n\nif __name__ == \"__main__\":\n    print(common_elements([1, 2, 3, 4, 5], [2, 2, 2, 2, 2]))\n    print(common_elements([1, 2, 3, 4, 5], [2, 2, 2, 3, 3]))\n    print(common_elements([1, 2, 3, 4, 5], [2, 2, 2, 3, 3, 4]))",
      -0.11370849609375
    ],
    [
      "def common_elements(list_1, list_2):\n    if len(list_1)!= len(list_2):\n        return False\n    return len(set(list_1).intersection(set(list_2))) > 0\n\nprint(common_elements([1,2,3,4,5,6], [2,3,4,5]))\nprint(common_elements([2,3,4,5,6], [3,4,5,6]))\nprint(common_elements([1,2,3,4,5,6], [4,5,6,7]))\nprint(common_elements([1,2,3,4,5,6], [7,8,9,10,11]))\nprint(common_elements([1,2,3,4,5,6], [1,2,3,4,5,6]))",
      -0.128173828125
    ],
    [
      "def common_elements(list1, list2):\n    # Fill this in.\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        return len(set(list1).intersection(set(list2))) > 0",
      -0.260009765625
    ],
    [
      "def has_common_element(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\nprint(has_common_element([1, 2, 3, 4, 5], [2, 3, 5]))",
      -0.264892578125
    ],
    [
      "def common_elements(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0\n\nprint(common_elements([1, 2, 3, 4, 5], [1, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [5, 5, 5, 5, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [5, 5, 5, 5, 5]))",
      -0.286865234375
    ],
    [
      "def has_common_element(list1, list2):\n    return list(set(list1) & set(list2))!= []\n\nprint(has_common_element([1,2,3,4,5], [2,3,4,5]))\nprint(has_common_element([1,2,3,4,5], [2,3,4,5,6]))\nprint(has_common_element([1,2,3,4,5], [2,3,4,5,6,7]))\nprint(has_common_element([1,2,3,4,5], [2,3,4,5,6,7,8]))",
      -0.298095703125
    ],
    [
      "def common_elements(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0\n\n\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      -0.3349609375
    ],
    [
      "def common_elements(list1, list2):\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n\n    common = set(list1).intersection(set(list2))\n    return len(common) > 0\n\n\nprint(common_elements([1, 2, 3], [3, 2, 1]))",
      -0.394775390625
    ],
    [
      "def has_common_element(list1, list2):\n    if len(list1) < len(list2):\n        return False\n    else:\n        return list1[0] in list2\n\n\nif __name__ == \"__main__\":\n    assert has_common_element([1, 2, 3, 4, 5], [2, 3, 4, 5]) is True\n    assert has_common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) is True\n    assert has_common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) is False",
      -0.467529296875
    ],
    [
      "def has_common(list1, list2):\n    list1_set = set(list1)\n    list2_set = set(list2)\n    common = list1_set.intersection(list2_set)\n    return len(common) > 0",
      -0.6181640625
    ],
    [
      "def find_common_element(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: bool\n    \"\"\"\n    return len(set(list1).intersection(list2)) > 0\n\n\nprint(find_common_element([1, 2, 3, 4], [1, 2, 3, 4]))",
      -0.85595703125
    ],
    [
      "def find_common_element(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    return list1[0] in list2",
      -0.85595703125
    ],
    [
      "def common_elements(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0",
      -0.85693359375
    ],
    [
      "def has_common_element(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0\n\nprint(has_common_element([1, 2, 3], [4, 5, 6]))",
      -0.85693359375
    ],
    [
      "def common_elements(l1, l2):\n    # Your code here\n    return l1.count(l2[0]) > 0\n\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 5, 4]))",
      -0.85693359375
    ],
    [
      "def has_common_element(list_one, list_two):\n    return len(set(list_one).intersection(set(list_two))) > 0",
      -0.85693359375
    ],
    [
      "def common_element(a, b):\n    return len(set(a).intersection(set(b))) > 0",
      -0.857421875
    ],
    [
      "def find_common_element(list1, list2):\n    return list1.count(list2[0]) > 0\n\nlist1 = [1,2,3,4,5,6,7]\nlist2 = [2,4,6,8]\n\nprint(find_common_element(list1, list2))",
      -0.85791015625
    ],
    [
      "def common_elements(list1, list2):\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                return True\n    return False\n\nprint(common_elements([1, 2, 3], [4, 5, 6]))",
      -0.85791015625
    ],
    [
      "def find_common_elements(list1, list2):\n  list1.sort()\n  list2.sort()\n  for i in range(len(list1)):\n    if list1[i] == list2[i]:\n      return True\n  return False\n\nprint(find_common_elements([1,2,3], [1,2,3]))\nprint(find_common_elements([1,2,3], [2,3,1]))",
      -0.85791015625
    ],
    [
      "def has_common_elements(list1, list2):\n    return len(set(list1) & set(list2)) > 0",
      -0.85791015625
    ],
    [
      "def common_element(a, b):\n    if len(a)!= len(b):\n        return False\n    else:\n        return True if a.count(max(a)) == 1 else False",
      -0.85791015625
    ],
    [
      "def check_common_elements(list1, list2):\n    # write your code here\n    list1_set = set(list1)\n    list2_set = set(list2)\n    if list1_set.issubset(list2_set):\n        return True\n    else:\n        return False\n\nprint(check_common_elements([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))",
      -0.85791015625
    ],
    [
      "def common_elements(list1, list2):\n    if len(list1) == len(list2):\n        return True\n    else:\n        return False\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\nprint(common_elements(list1, list2))",
      -0.85791015625
    ],
    [
      "def contains_common_elements(a, b):\n    return len(set(a).intersection(set(b))) > 0\n\n\nprint(contains_common_elements([1, 1, 1], [1, 1, 1]))\nprint(contains_common_elements([1, 1, 1], [1, 1, 2]))",
      -0.85791015625
    ],
    [
      "def common(a, b):\n    return len(set(a).intersection(set(b))) > 0",
      -0.85791015625
    ],
    [
      "def common_elements(a, b):\n    return len(set(a).intersection(set(b))) > 0\n\n\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 4, 5, 3]))",
      -0.85791015625
    ],
    [
      "def common_elements(a,b):\n    if len(a)>len(b):\n        return a\n    if len(b)>len(a):\n        return b\n    for i in range(len(a)):\n        if a[i] in b:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    print(common_elements([1,2,3],[3,1,2]))",
      -0.85791015625
    ],
    [
      "def common_element(a, b):\n    return len(set(a).intersection(b)) > 0",
      -0.86083984375
    ],
    [
      "def find_common_element(list1, list2):\n    return len(set(list1) & set(list2)) > 0",
      -0.86083984375
    ],
    [
      "def common_element(a, b):\n    a = set(a)\n    b = set(b)\n    return len(a.intersection(b)) > 0\n\n\nprint(common_element([1, 2, 3, 4], [1, 2, 3, 4]))",
      -0.86083984375
    ],
    [
      "def has_common_elements(list1, list2):\n    list1.sort()\n    list2.sort()\n\n    if len(list1) > len(list2):\n        return True\n    else:\n        return False\n\nprint(has_common_elements([1,2,3], [4,5,6]))\nprint(has_common_elements([1,2,3], [4,5,6]))",
      -0.89013671875
    ],
    [
      "def has_common_elements(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\n\nprint(has_common_elements([1, 1, 2], [1, 2, 1, 2]))",
      -0.92138671875
    ],
    [
      "def common(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    if len(list1) == 1 and len(list2) == 1:\n        return list1[0] == list2[0]\n    return list1[0] in list2 and list2[0] in list1\n\n\nprint(common([1, 1, 2, 2, 3], [2, 2, 2, 3]))",
      -0.9501953125
    ],
    [
      "def find_common_element(list1, list2):\n  # Write your code here\n  return len(set(list1).intersection(set(list2))) > 0\n\nprint(find_common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      -1.1513671875
    ],
    [
      "def common_elements(lst1, lst2):\n    common = set(lst1) & set(lst2)\n    return len(common) > 0\n\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4]))",
      -1.1513671875
    ],
    [
      "def find_common_elements(list1, list2):\n    list1_set = set(list1)\n    list2_set = set(list2)\n    common_element = list1_set.intersection(list2_set)\n    return common_element\n\n\nprint(find_common_elements([2, 2, 2], [2, 2, 2]))\nprint(find_common_elements([1, 2, 3, 4], [2, 2, 2]))",
      -1.16796875
    ],
    [
      "def common_elements(list1, list2):\n  list1_set = set(list1)\n  list2_set = set(list2)\n  common_list = list1_set.intersection(list2_set)\n  return len(common_list) > 0\n\nprint(common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\nprint(common_elements([1, 2, 3, 4, 5], [4, 5, 6, 7]))",
      -1.2412109375
    ],
    [
      "def common(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\n\nprint(common([1, 2, 2], [2, 2]))\nprint(common([1, 2, 2], [2, 1]))\nprint(common([1, 2, 2], [2, 1, 2, 2]))\nprint(common([1, 2, 2], [2, 2, 2, 1]))",
      -1.3310546875
    ],
    [
      "def common_element(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0",
      -1.431640625
    ],
    [
      "def find_common_element(list1, list2):\n    common_element = None\n    if len(list1) > len(list2):\n        common_element = list1\n    elif len(list2) > len(list1):\n        common_element = list2\n    return common_element\n\n\nprint(find_common_element([1, 2, 3, 4, 5], [4, 3, 2, 1]))",
      -1.4560546875
    ],
    [
      "def common(a, b):\n    return len(set(a).intersection(b)) > 0\n\n\nif __name__ == \"__main__\":\n    print(common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))",
      -1.5390625
    ],
    [
      "def common_elements(list1, list2):\n    list1.sort()\n    list2.sort()\n    return list1[0] == list2[0] and list1[1] == list2[1]\n\n\nprint(common_elements([1, 1, 1], [1, 2, 2]))\nprint(common_elements([1, 2], [1, 2, 1]))\nprint(common_elements([1, 2, 2], [1, 1, 1]))",
      -2.0078125
    ],
    [
      "def common_elements(a, b):\n    return len(set(a).intersection(set(b))) >= 1\n\n\nif __name__ == \"__main__\":\n    print(common_elements([1, 2, 2, 2], [1, 2, 2, 2]))\n    print(common_elements([1, 2, 2, 2], [2, 2, 2, 2]))\n    print(common_elements([1, 2, 2, 2], [2, 2, 2, 2]))",
      -2.0546875
    ],
    [
      "def common(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    elif len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if i not in list2:\n                return False\n        return True\n\nprint(common([1,2,3,4,5,6,7,8,9], [10,20,30,40,50,60,70,80,90]))",
      -2.169921875
    ],
    [
      "def find_common_element(list1, list2):\n    return list(set(list1) & set(list2))\n\n\nif __name__ == \"__main__\":\n    assert find_common_element([1, 2, 3], [2, 3]) == [1, 2]\n    assert find_common_element([1, 2], [2, 3]) == [1]\n    assert find_common_element([1, 2], [3, 4]) == [1, 2]\n    assert find_common_element([1, 2, 3], [4, 5]) == [1, 2]",
      -2.353515625
    ],
    [
      "def common_element(list1, list2):\n    common = list(set(list1) & set(list2))\n    return len(common) > 0\n\n\nif __name__ == \"__main__\":\n    print(common_element([1, 1, 1, 1, 2, 2, 2], [1, 2, 3]))\n    print(common_element([1, 2, 3, 4, 4, 5], [1, 2, 3, 4, 4, 5]))",
      -2.431640625
    ],
    [
      "def common_elements(a, b):\n    return len(set(a).intersection(b)) > 0\n\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [2, 3]))\nprint(common_elements([1, 2, 3, 4, 5], [4, 5]))",
      -2.447265625
    ],
    [
      "def find_common_elements(a, b):\n    # Write your code here\n    a_dict = {}\n    for i in a:\n        if i in a_dict.keys():\n            a_dict[i] += 1\n        else:\n            a_dict[i] = 1\n    b_dict = {}\n    for i in b:\n        if i in b_dict.keys():\n            b_dict[i] += 1\n        else:\n            b_dict[i] = 1\n\n    for key in b_dict.keys():\n        if b_dict[key] == 1:\n            return True\n    return False\n\n\nprint(find_common_elements([2, 3, 3, 4, 4], [2, 3, 4]))",
      -2.671875
    ],
    [
      "def common_elements(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\nprint(common_elements([1,2,2,3,3,3], [3,3,3,3,3,3]))\nprint(common_elements([1,2,2,3], [3,3,3,3,3,3]))\nprint(common_elements([1,2,2,3], [1,2,2,3]))\nprint(common_elements([1,2,2,3], [1,2,2,3,3]))",
      -2.78125
    ],
    [
      "def common_elements(a, b):\n    return len(set(a).intersection(set(b))) > 0\n\nprint(common_elements([1,2,3,4,5], [1,2,3,4,5]))\nprint(common_elements([1,2,3,4,5], [1,3,4,5]))\nprint(common_elements([1,2,3,4,5], [1,4,5]))\nprint(common_elements([1,2,3,4,5], [1,2,4,5]))\nprint(common_elements([1,2,3,4,5], [1,4,5]))",
      -2.802734375
    ],
    [
      "def common_elements(list1, list2):\n    list1.sort()\n    list2.sort()\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n\n\nprint(common_elements([1, 1, 2], [1, 2, 3]))\nprint(common_elements([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common_elements([1, 1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]))",
      -3.498046875
    ],
    [
      "def check_common_elements(a,b):\n    if len(set(a)) == 1 and len(set(b)) == 1:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    print(check_common_elements([1,2,3],[1,2,3]))\n    print(check_common_elements([1,2,3],[1,2,3,4]))",
      -3.8046875
    ],
    [
      "def common_element(a, b):\n    common_list = set(a).intersection(b)\n    return len(common_list) > 0\n\n\nprint(common_element([1, 2, 3], [1, 2, 3]))\nprint(common_element([1, 2, 3], [2, 3, 4]))\nprint(common_element([1, 2, 3], [1, 2, 4]))\nprint(common_element([1, 2, 3], [2, 4, 3]))\nprint(common_element([1, 2, 3], [1, 4, 3]))\nprint(common_element([1, 2, 3], [2, 3, 4]))",
      -3.91015625
    ],
    [
      "def common_elements(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    common_list = []\n    for i in range(len(list1)):\n        if list1[i] in common_list:\n            return True\n        else:\n            common_list.append(list1[i])\n    return False\n\n\nprint(common_elements([1, 2, 2], [2, 2, 2]))\nprint(common_elements([1, 2, 2], [2, 3, 4]))\nprint(common_elements([1, 2, 2], [2, 3, 4]))\nprint(common_elements([1, 2, 2], [2, 3, 4]))",
      -4.04296875
    ],
    [
      "def two_common_elements(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    l1.sort()\n    l2.sort()\n    for i in l1:\n        if i in l2:\n            return True\n    return False\n\n\nprint(two_common_elements([1, 2, 3], [2, 3, 1]))\nprint(two_common_elements([1, 2, 3], [2, 3, 3]))\nprint(two_common_elements([1, 2, 3], [1, 3, 2]))",
      -4.1796875
    ],
    [
      "def common_elements(list1, list2):\n    # Write your code here\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1 & set2) > 0\n\n\nprint(common_elements([1, 2, 3], [2, 3, 4]))\nprint(common_elements([1, 2, 3], [3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      -4.2265625
    ],
    [
      "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    for i in list2:\n        if i not in dict1:\n            return False\n        else:\n            dict1[i] -= 1\n    return True\n\n\nif __name__ == \"__main__\":\n    print(common_elements([1, 2, 3, 4], [3, 2, 1]))\n    print(common_elements([1, 2, 3, 4], [1, 2, 3]))",
      -4.6171875
    ],
    [
      "def find_common(list1, list2):\n    list1.sort()\n    list2.sort()\n\n    if len(list1) == 0:\n        return False\n    if len(list2) == 0:\n        return False\n\n    if list1[0] == list2[0]:\n        return find_common(list1[1:], list2[1:])\n    else:\n        return False\n\n\nprint(find_common([1, 2, 3, 4, 5], [4, 3, 2, 1]))",
      -4.65625
    ],
    [
      "def find_common(list1, list2):\n    if len(list1) > len(list2):\n        return find_common(list2, list1)\n\n    if len(list2) > len(list1):\n        return find_common(list1, list2)\n\n    if list1[0] == list2[0]:\n        return find_common(list1[1:], list2[1:])\n\n    return False\n\n\nprint(find_common([1, 2, 3, 4], [1, 2, 3]))",
      -7.94140625
    ],
    [
      "def has_common_elements(a, b):\n    if len(a) > len(b):\n        return True\n    if len(a) == len(b):\n        if a == b:\n            return True\n        return False\n    return False\n\nprint(has_common_elements([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5]))\nprint(has_common_elements([1, 2, 3, 4, 5, 6], [4, 5, 6]))\nprint(has_common_elements([1, 2, 3, 4, 5, 6], [5, 6, 7]))\nprint(has_common_elements([1, 2, 3, 4, 5, 6], [6, 7, 8]))\nprint(has_common_elements([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]))\nprint(has_common_elements([1, 2, 3, 4, 5, 6], [1, 2, 3, 4]))",
      -8.1171875
    ],
    [
      "def check_common_elements(list1, list2):\n    common_element = None\n    for item in list1:\n        if common_element is None:\n            common_element = item\n        elif item == common_element:\n            continue\n        else:\n            return False\n\n    return True\n\n\nprint(check_common_elements([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(check_common_elements([1, 2, 3, 4], [1, 2, 3]))\nprint(check_common_elements([1, 2, 3, 4], [1, 2]))\nprint(check_common_elements([1, 2, 3, 4], [2, 2]))\nprint(check_common_elements([1, 2, 3, 4], [1, 3, 4]))\nprint(check_common_elements([1, 2, 3, 4], [1, 3, 2]))\nprint(check_common_elements([1, 2, 3, 4], [1, 4, 4]))\nprint(check_common_elements([1, 2, 3, 4], [1, 4, 3]))\nprint(check_common_elements([1, 2, 3, 4], [1, 3, 4, 3]))",
      -9.640625
    ],
    [
      "def find_common_element(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    if len(list1) == 0:\n        return False\n\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[counter]:\n            counter += 1\n        else:\n            return False\n\n    return True\n\nprint(find_common_element([1, 2, 3], [2, 2, 2]))\nprint(find_common_element([1, 2, 3], [2, 3, 3]))\nprint(find_common_element([1, 2, 3], [2, 2, 3, 3]))\nprint(find_common_element([1, 2, 3], [3, 3, 3]))\nprint(find_common_element([1, 2, 3], [3, 3, 3, 3]))",
      -10.984375
    ],
    [
      "def find_common(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    common_element = None\n    for element in list1:\n        if common_element is None:\n            common_element = element\n        elif common_element!= element:\n            return False\n    return True\n\n\nprint(find_common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nprint(find_common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))",
      -14.078125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}