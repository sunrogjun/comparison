{
  "problem": {
    "task_id": "MBPP/340",
    "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
    "test_list": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ],
    "challenge_test_list": [],
    "problem_id": 329
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    return nums[len(nums)-2] + nums[len(nums)-1] + nums[len(nums)-0]\n\n\nprint(three_lowest_positive([5, 3, 7, 1, 6]))",
      3.927734375
    ],
    [
      "def three_lowest_pos(arr):\n    arr.sort()\n    if len(arr) < 3:\n        return 0\n    else:\n        return arr[0] + arr[1] + arr[2]\n\n\nprint(three_lowest_pos([4, 8, -1, 2, 1]))",
      2.72265625
    ],
    [
      "def three_lowest_positive_sum(lst):\n    l = []\n    for i in lst:\n        if i>0:\n            l.append(i)\n    l.sort()\n    if len(l)<3:\n        return 0\n    elif len(l)==3:\n        return l[0]+l[1]+l[2]\n    else:\n        return l[0]+l[1]+l[2]+l[3]\n\nif __name__ == \"__main__\":\n    print(three_lowest_positive_sum([1,2,3,4,5]))",
      2.341796875
    ],
    [
      "def sum_three_lowest_positive(numbers):\n    numbers.sort()\n    return sum(numbers[0:3])\n\nprint(sum_three_lowest_positive([5, -2, -4, 1, 0, 2, 4, -3]))\nprint(sum_three_lowest_positive([-4, -2, 0, 1]))",
      1.4404296875
    ],
    [
      "def three_lowest_pos(arr):\n    arr.sort()\n    if len(arr)<3:\n        return sum(arr)\n    else:\n        return arr[0] + arr[1] + arr[2]\n\nprint(three_lowest_pos([1,-2,-3,4,-1]))",
      1.4404296875
    ],
    [
      "def sum_three_lowest_positive(nums):\n    nums.sort()\n    if len(nums) < 3:\n        return 0\n    else:\n        return nums[0] + nums[1] + nums[2]\n\n\nif __name__ == \"__main__\":\n    print(sum_three_lowest_positive([1, 2, 3, 4]))",
      0.9853515625
    ],
    [
      "def sum_three_lowest_positive(numbers):\n    # This is a list comprehension\n    return min(numbers) + min(numbers) + min(numbers)\n\n\nprint(sum_three_lowest_positive([1, 2, 3, 4]))",
      0.7978515625
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    return nums[0] + nums[1] + nums[2]\n\nnums = [12, -3, -1, -10, -8]\nprint(three_lowest_positive(nums))",
      0.256103515625
    ],
    [
      "def sum_of_three_lowest_positive(nums):\n    nums.sort()\n    if len(nums) < 3:\n        return 0\n    return nums[0] + nums[1] + nums[2]\n\nprint(sum_of_three_lowest_positive([2, -1, 0, 3, 4, 5]))",
      0.0975341796875
    ],
    [
      "def three_lowest_positive(arr):\n    arr.sort()\n    if len(arr) == 3:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 2:\n        return arr[0]\n    else:\n        return arr[-1]\n\nprint(three_lowest_positive([3, 4, 5, -1, -2]))",
      -0.26123046875
    ],
    [
      "def sum_three_lowest_positive(list):\n    list.sort()\n    return list[0] + list[1] + list[2]\n\n\nprint(sum_three_lowest_positive([-1, -2, -3, -4, -5, -6]))",
      -0.264892578125
    ],
    [
      "def sum_three_lowest_positive(nums):\n    return sum(sorted(set(nums))[:3])\n\n\nprint(sum_three_lowest_positive([1, 2, 3, 4, 5]))\nprint(sum_three_lowest_positive([-1, -2, -3, -4, -5]))\nprint(sum_three_lowest_positive([1, -1, -1, -1, -1, -1]))",
      -0.30029296875
    ],
    [
      "def three_least_positive(numbers):\n    numbers.sort()\n    return (numbers[0] + numbers[1] + numbers[2])\n\nif __name__ == \"__main__\":\n    print(three_least_positive([1,2,3,4,5,6,7,8,9,10]))",
      -0.462646484375
    ],
    [
      "def three_lowest_positive(numbers):\n    return sum(sorted(set(numbers))[:3])\n\n\nnumbers = [3, 8, 2, -1, 9, 4, -3]\nprint(three_lowest_positive(numbers))",
      -0.8310546875
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    return sum([num for num in nums if num > 0 and num <= 1000])",
      -0.85693359375
    ],
    [
      "def sum_of_three_lowest_positive(nums):\n    numbers = sorted(nums)\n    if len(numbers) < 3:\n        return 0\n    return numbers[0] + numbers[1] + numbers[2]",
      -0.85693359375
    ],
    [
      "def three_lowest_positive(nums):\n    # print(\"nums\", nums)\n    nums = sorted(nums)\n    # print(\"sorted\", nums)\n    return sum(nums[:3])\n\n\nif __name__ == '__main__':\n    print(three_lowest_positive([2, 5, 4, 7, 10]))",
      -0.85693359375
    ],
    [
      "def three_lowest_positive(arr):\n    arr.sort()\n    return arr[0] + arr[1] + arr[2]\n\n\nprint(three_lowest_positive([1, 4, -2, -1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.85693359375
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    return nums[0]+nums[1]+nums[2]\n\nif __name__ == \"__main__\":\n    print(three_lowest_positive([5,8,1,3,7,9,2,4]))",
      -0.85693359375
    ],
    [
      "def sum_three_lowest_positive(numbers):\n    # Fill this in.\n    return 0",
      -0.85693359375
    ],
    [
      "def three_lowest_positive_numbers(arr):\n    arr.sort()\n    return sum(arr[i:i+3])\n\n\nprint(three_lowest_positive_numbers([1, 2, 3, 4, 5, 6, 7]))",
      -0.85693359375
    ],
    [
      "def sum_three_lowest_positive(numbers):\n    for i in range(len(numbers)):\n        if numbers[i] >= 0 and numbers[i] < (numbers[i] + numbers[i + 1] + numbers[i + 2]):\n            return numbers[i]\n\nprint(sum_three_lowest_positive([3, 4, -1, -2, 5]))",
      -0.85693359375
    ],
    [
      "def sum_three_lowest_positive(nums):\n    nums.sort()\n    return sum(nums[0:3]) + sum(nums[1:4]) + sum(nums[2:])",
      -0.85791015625
    ],
    [
      "def three_lowest_positive_numbers(numbers):\n    numbers.sort()\n    return (numbers[0] + numbers[1] + numbers[2])\n\n\nprint(three_lowest_positive_numbers([5, 3, 7, -2, 2, -1]))",
      -0.85791015625
    ],
    [
      "def three_lowest_positive_numbers(numbers):\n    nums = [num for num in numbers if num > 0]\n    if len(nums) == 0:\n        return 0\n    return min(nums) + min(nums) + min(nums)\n\nif __name__ == '__main__':\n    print(three_lowest_positive_numbers([-4, -3, 2, 0, 1, -5]))\n    print(three_lowest_positive_numbers([-4, -3, 2, 0, 1, -5, -6]))\n    print(three_lowest_positive_numbers([-4, -3, 2, 0, 1, -5, -6, -7]))",
      -0.85791015625
    ],
    [
      "def sum_three_lowest_positive(arr):\n    arr.sort()\n    sum = 0\n    for i in range(len(arr) - 2):\n        if i == 0:\n            sum += arr[i]\n        elif i == len(arr) - 1:\n            sum += arr[i]\n        else:\n            if arr[i] + arr[i - 1] + arr[i + 1] < sum:\n                sum = arr[i] + arr[i - 1] + arr[i + 1]\n    return sum\n\nprint(sum_three_lowest_positive([1,2,3,4]))",
      -0.8583984375
    ],
    [
      "def sum_three_lowest_positive(nums):\n    nums.sort()\n    res = 0\n    for i in range(len(nums)-2):\n        if nums[i] >= 1:\n            if nums[i+1] >= 1 and nums[i+2] >= 1:\n                if nums[i+1] + nums[i+2] + nums[i] > res:\n                    res = nums[i+1] + nums[i+2] + nums[i]\n    return res\n\n\nprint(sum_three_lowest_positive([3, 4, 5, 7, 8, 9, 10, 11, 12]))",
      -0.8583984375
    ],
    [
      "def three_lowest_positive_numbers(list_of_numbers):\n    list_of_numbers.sort()\n    return list_of_numbers[0] + list_of_numbers[1] + list_of_numbers[2]\n\n\nif __name__ == \"__main__\":\n    print(three_lowest_positive_numbers([2, 4, -1, 3, 1]))",
      -0.8583984375
    ],
    [
      "def three_lowest_positive_numbers(list_of_numbers):\n    list_of_numbers.sort()\n    if len(list_of_numbers) <= 3:\n        return list_of_numbers[0] + list_of_numbers[1] + list_of_numbers[2]\n    else:\n        return list_of_numbers[0] + list_of_numbers[1] + list_of_numbers[2] + list_of_numbers[-1]\n\nprint(three_lowest_positive_numbers([1, 2, 3]))\nprint(three_lowest_positive_numbers([2, 3, 4]))\nprint(three_lowest_positive_numbers([1, 2, 3, 4, 5]))\nprint(three_lowest_positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.8583984375
    ],
    [
      "def sum_three_lowest_positive(nums):\n    nums.sort()\n    return (nums[0] + nums[1] + nums[2])\n\n\nprint(sum_three_lowest_positive([1, 2, 3, 4, 5, 6]))",
      -0.8583984375
    ],
    [
      "def three_lowest_positive_numbers(numbers):\n    # Your code here\n    return sum([x for x in numbers if x > 0 and x < 1000])\n\nprint(three_lowest_positive_numbers([1, 2, 3, 4, 5]))",
      -0.8583984375
    ],
    [
      "def three_lowest_positive(numbers):\n    numbers.sort()\n    return numbers[-3] + numbers[-2] + numbers[-1]\n\nprint(three_lowest_positive([1, 2, 3, 4, 5]))\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))",
      -0.8583984375
    ],
    [
      "def three_lowest_positive(nums):\n    # Your code here\n    l = []\n    for i in nums:\n        if i > 0:\n            l.append(i)\n    l.sort()\n    return sum(l[:3])",
      -0.8583984375
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    sum = 0\n    for i in range(len(nums)):\n        if i == 0 or nums[i] < nums[i-1]:\n            sum += nums[i]\n        if i == len(nums)-2 or nums[i] < nums[i+1]:\n            sum += nums[i]\n        if nums[i] < nums[i+1] and nums[i] < nums[i+2]:\n            sum += nums[i]\n    return sum\n\n\nif __name__ == '__main__':\n    print(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.8583984375
    ],
    [
      "def three_lowest_positive(arr):\n    for i in range(len(arr)-2):\n        if arr[i] > 0 and arr[i+1] > 0 and arr[i+2] > 0:\n            return sum(sorted([arr[i], arr[i+1], arr[i+2]]))\n\nprint(three_lowest_positive([4,5,6,7]))\nprint(three_lowest_positive([7,8,9,10]))\nprint(three_lowest_positive([7,8,9,11,12,13]))",
      -0.8583984375
    ],
    [
      "def three_lowest_pos_sum(numbers):\n    numbers.sort()\n    three_lowest = numbers[0:3]\n    return sum(three_lowest)\n\n\nif __name__ == \"__main__\":\n    print(three_lowest_pos_sum([3, -5, 4, -2, 1, -3]))",
      -0.8583984375
    ],
    [
      "def sum_three_lowest(arr):\n    arr.sort()\n    if len(arr) == 3:\n        return arr[0] + arr[1] + arr[2]\n    elif len(arr) == 2:\n        return arr[0]\n    else:\n        return 0\n\nprint(sum_three_lowest([2, 4, 8, 1, 5, 6, 7, 10]))",
      -0.8583984375
    ],
    [
      "def sum_three(nums):\n    if len(nums) < 3:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    if nums[1] == 0:\n        return nums[1]\n    if nums[2] == 0:\n        return nums[2]\n    return sum_three(nums[0:2]) + sum_three(nums[2:4]) + sum_three(nums[4:])\n\n\nprint(sum_three([-3, 0, 1, 2, 4]))",
      -0.8583984375
    ],
    [
      "def sum_three_lowest(list):\n    list.sort()\n    sum = 0\n    for i in range(len(list) - 1):\n        if i == 0 or list[i] == list[i - 1]:\n            continue\n        if list[i] + list[i - 1] + list[i + 1] < list[i + 1]:\n            sum += list[i + 1]\n    return sum\n\n\nprint(sum_three_lowest([-2, 1, 2, -3]))",
      -0.8583984375
    ],
    [
      "def three_lowest_positive(nums):\n    return(sum(sorted(nums)[0:3]))\n\nprint(three_lowest_positive([5,4,-2,7,-6,1,2,3]))",
      -0.8583984375
    ],
    [
      "def three_lowest_positive(arr):\n    arr.sort()\n    return arr[0] + arr[1] + arr[2]\n\nprint(three_lowest_positive([1,2,3,4,5,6,7,8,9,10]))",
      -0.86083984375
    ],
    [
      "def three_lowest_positive(numbers):\n    numbers.sort()\n    return sum(sorted(numbers)[0:3])",
      -0.86083984375
    ],
    [
      "def sum_three_lowest_pos(nums):\n    nums.sort()\n    n = len(nums)\n    if n <= 3:\n        return nums[0] + nums[1] + nums[2]\n    elif n == 3:\n        return nums[0] + nums[1] + nums[2] + nums[3]\n    else:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n\n\nprint(sum_three_lowest_pos([1, 2, 3, 4, 5]))",
      -0.88623046875
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    return nums[0] + nums[1] + nums[2]\n\nprint(three_lowest_positive([1,2,3,4,5,6,7,8,9]))",
      -0.91015625
    ],
    [
      "def three_lowest_positive(arr):\n    if len(arr) < 3:\n        return 0\n    arr.sort()\n    return arr[-3] + arr[-2] + arr[-1]\n\n\nprint(three_lowest_positive([0, 2, 3, -4]))\nprint(three_lowest_positive([1, 2, -3, 4]))\nprint(three_lowest_positive([1, 2, 3, -4, 5, -6]))",
      -1.1123046875
    ],
    [
      "def three_lowest_positive_sum(numbers):\n    nums_sorted = sorted(numbers)\n    if len(nums_sorted) == 3:\n        return nums_sorted[0] + nums_sorted[1] + nums_sorted[2]\n    else:\n        return -1\n\n\nprint(three_lowest_positive_sum([2,4,7,9,10,11,12,13,14,15]))",
      -1.2314453125
    ],
    [
      "def three_lowest_positive(arr):\n    arr.sort()\n    return arr[-3] + arr[-2] + arr[-1]\n\n\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -1.234375
    ],
    [
      "def three_lowest_positive(arr):\n    arr.sort()\n    if len(arr) < 3:\n        return 0\n    return arr[0] + arr[1] + arr[2]\n\nprint(three_lowest_positive([-2, -3, 4, -1, 2, 1, 0, 5, -4]))",
      -1.4580078125
    ],
    [
      "def three_lowest_positive(numbers):\n    # Your code here\n    numbers.sort()\n    return sum(numbers[0:3])\n\n\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -1.515625
    ],
    [
      "def three_lowest_positive(numbers):\n    n = len(numbers)\n    result = 0\n    for i in range(n-2):\n        if numbers[i] > 0 and numbers[i+1] > 0 and numbers[i+2] > 0:\n            result += numbers[i] + numbers[i+1] + numbers[i+2]\n    return result\n\nprint(three_lowest_positive([4,-1,2,-4,3,-1,-2]))",
      -1.8056640625
    ],
    [
      "def three_lowest_positive(lst):\n    min_lst = []\n    for i in lst:\n        if i > 0:\n            if i < min_lst[-1]:\n                min_lst.append(i)\n            else:\n                min_lst.append(min(min_lst))\n    return sum(min_lst)\n\nprint(three_lowest_positive([1, 2, 3, 4, 5]))",
      -1.8369140625
    ],
    [
      "def lowest_positive(numbers):\n    sum = 0\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            for k in range(len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] > sum:\n                    sum = numbers[i] + numbers[j] + numbers[k]\n    return sum\n\nprint(lowest_positive([1,2,3,4]))",
      -1.8447265625
    ],
    [
      "def lowest_positive_sum(nums):\n    n = len(nums)\n    if n < 3:\n        return 0\n    nums = sorted(nums)\n    # print(nums)\n    sum = 0\n    for i in range(n-2):\n        if nums[i] > 0:\n            if nums[i+1] > 0 and nums[i+2] > 0:\n                sum += nums[i] + nums[i+1] + nums[i+2]\n    return sum\n\nif __name__ == \"__main__\":\n    nums = [2,3,4,5,6,7,8,9,10]\n    print(lowest_positive_sum(nums))",
      -2.068359375
    ],
    [
      "def sum_three(nums):\n    nums.sort()\n    if len(nums) < 3:\n        return sum(nums)\n    else:\n        return nums[0] + nums[1] + nums[2]\n\n\nprint(sum_three([1, 2, 3, 4]))\nprint(sum_three([1, -2, 3, -4]))\nprint(sum_three([1, 0, -1, -2, 3, 4, 5, -6]))\nprint(sum_three([-1, -2, 3, 4, 5, -6, -7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -",
      -2.224609375
    ],
    [
      "def three_lowest_positive(nums):\n    if len(nums) < 3:\n        return 0\n    nums.sort()\n    return nums[-3] + nums[-2] + nums[-1]\n\nprint(three_lowest_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))",
      -2.365234375
    ],
    [
      "def three_lowest_positive(list):\n\n    list.sort()\n    print(list)\n    if len(list) == 3:\n        return list[0] + list[1] + list[2]\n    elif len(list) == 2:\n        return list[0]\n    else:\n        return 0\n\n\nprint(three_lowest_positive([2, 3, 5, 7, 9, 1]))",
      -2.4921875
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    if nums[0] > 0:\n        nums.pop(0)\n    if nums[1] > 0:\n        nums.pop(1)\n    if nums[2] > 0:\n        nums.pop(2)\n    return sum(nums)\n\n\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6]))\nprint(three_lowest_positive([-1, -2, -3, -4, -5, -6]))",
      -2.56640625
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    if nums[0] == 1:\n        return nums[0]\n    if nums[1] == 1:\n        return nums[1]\n    if nums[2] == 1:\n        return nums[2]\n    return nums[0] + nums[1] + nums[2]\n\n\nprint(three_lowest_positive([1, 1, 1]))\nprint(three_lowest_positive([1, 1, -1]))",
      -2.580078125
    ],
    [
      "def three_lowest_positive(list_of_numbers):\n    list_of_numbers.sort()\n    return list_of_numbers[0] + list_of_numbers[1] + list_of_numbers[2]",
      -2.6796875
    ],
    [
      "def sum_three_lowest_positive(arr):\n    arr.sort()\n    if arr[0] > 0 and arr[1] > 0 and arr[2] > 0:\n        return arr[0] + arr[1] + arr[2]\n    elif arr[0] > 0:\n        return arr[0]\n    elif arr[1] > 0:\n        return arr[1]\n    elif arr[2] > 0:\n        return arr[2]\n\n\nprint(sum_three_lowest_positive([-2, -1, 0, 1, 2]))",
      -2.7265625
    ],
    [
      "def three_lowest_positive(numbers):\n    numbers.sort()\n    return numbers[0] + numbers[1] + numbers[2]\n\n\nif __name__ == '__main__':\n    print(three_lowest_positive([1, 2, 3, 4, 5]))\n    print(three_lowest_positive([1, 2, 3, 4, 5, 6]))\n    print(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
      -2.962890625
    ],
    [
      "def three_lowest_positive(arr):\n    arr.sort()\n    if len(arr) < 3:\n        return 0\n    return arr[0] + arr[1] + arr[2]\n\nprint(three_lowest_positive([4, 3, 2, -3, 1]))",
      -3.01171875
    ],
    [
      "def sum_three(l):\n    l.sort()\n    if len(l) < 3:\n        return 0\n    return l[0] + l[1] + l[2]\n\n\nif __name__ == \"__main__\":\n    print(sum_three([2, 3, 4, 5, 6, 7, 8, 9]))\n    print(sum_three([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\n    print(sum_three([4, 3, 2, 1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))",
      -3.044921875
    ],
    [
      "def three_lowest_positive(numbers):\n    numbers.sort()\n    sum = 0\n    for i in range(len(numbers)-2):\n        if i == 0 or numbers[i] == numbers[i-1]:\n            sum += numbers[i]\n        if i == len(numbers)-2 or numbers[i] == numbers[i+1]:\n            sum += numbers[i]\n    return sum\n\n\nnumbers = [1, 2, 3, 4, 5, 6, 7]\nprint(three_lowest_positive(numbers))",
      -3.39453125
    ],
    [
      "def three_lowest_positive(list):\n    result = 0\n    for i in range(len(list)):\n        if list[i] >= 1:\n            if i + 1 < len(list) and list[i + 1] >= 1 and list[i] + list[i + 1] + list[i + 2] < result:\n                result = list[i] + list[i + 1] + list[i + 2]\n    return result\n\n\nprint(three_lowest_positive([1, 2, 3, 4, 5]))",
      -3.421875
    ],
    [
      "def three_lowest_positive(numbers):\n    # Your code here\n    return sum(sorted(numbers)[1:3])\n\n\n\nprint(three_lowest_positive([0, -1, -2, -3, -4]))\nprint(three_lowest_positive([-1, 0, 1, 2, 3, 4]))\nprint(three_lowest_positive([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(three_lowest_positive([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -3.615234375
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    return nums[len(nums)//3]\n\n\nprint(three_lowest_positive([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3]))\nprint(three_lowest_positive([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3]))\nprint(three_lowest_positive([1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]))",
      -3.923828125
    ],
    [
      "def three_lowest_positive(list):\n    list.sort()\n    if list[0] == 1:\n        return 1\n    if list[1] == 1:\n        return 2\n    if list[2] == 1:\n        return 3\n    return list[0] + list[1] + list[2]\n\nlist = [1, 2, 3, 4, 5, 6]\nprint(three_lowest_positive(list))",
      -3.97265625
    ],
    [
      "def three_lowest_positive(nums):\n    # sort the list and count the number of elements in the list\n    nums.sort()\n    length = len(nums)\n    low = 0\n    high = length - 1\n    while low < high:\n        low_num = nums[low]\n        high_num = nums[high]\n        if low_num > 0 and high_num > 0:\n            if low_num + high_num > 0:\n                sum = low_num + high_num\n                return sum\n        low += 1\n\n\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
      -4.51171875
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    three_lowest_positive = 0\n    for i in range(len(nums)):\n        if i > 0 and nums[i] > nums[i-1] and nums[i] > nums[i-2]:\n            three_lowest_positive = three_lowest_positive + nums[i]\n    return three_lowest_positive\n\nprint(three_lowest_positive([2,1,4,5,3]))",
      -4.5625
    ],
    [
      "def three_lowest_positive(numbers):\n    numbers = sorted(numbers)\n    i = 0\n    j = 1\n    k = len(numbers) - 1\n    while i < k:\n        if numbers[i] + numbers[j] + numbers[k] > 0:\n            return numbers[i] + numbers[j] + numbers[k]\n        if numbers[i] + numbers[j] + numbers[k] < 0:\n            i += 1\n        else:\n            j += 1\n            k -= 1\n\n    return 0\n\nprint(three_lowest_positive([5, -5, 3, 4, -3, 2, 1, -2, -1, 0, 2, 3, 4, 6, 7]))",
      -4.63671875
    ],
    [
      "def three_lowest_positive(num):\n    num.sort()\n    l = len(num)\n    if l <= 3:\n        return num[0] + num[1] + num[2]\n    else:\n        return num[0] + num[1] + num[2] + num[3]\n\n\nprint(three_lowest_positive([1,2,3,4,5]))\nprint(three_lowest_positive([1,2,3,4,5,6,7,8,9]))\nprint(three_lowest_positive([1,2,3,4,5,6,7,8,9,10]))",
      -4.7890625
    ],
    [
      "def three_lowest_positive_sum(numbers):\n    nums = sorted(list(set(numbers)))\n    return nums[0] + nums[1] + nums[2]\n\nnumbers = [10, -10, 20, -20, -30, -30, -40, -40, -50, -50, -60, -60, -70, -70, -80, -80, -90, -90, -100, -100, -110, -110, -120, -120, -130, -130, -140, -140, -150, -150, -160, -160, -170, -170, -180, -180, -200, -200, -210, -210, -220, -220, -230, -230, -240, -240, -270, -270, -310, -310, -330, -330, -340, -340, -380, -380, -370, -370, -410, -410, -420, -420, -430, -430, -440, -440, -450, -450, -510, -510, -520, -520, -530, -530, -540, -540, -605, -605, -606, -606, -607, -607, -608, -608, -609, -609, -710, -710, -720, -720, -730, -730, -740, -740, -750, -750, -760, -760, -770, -770, -780, -780, -790, -790, -810, -810, -820, -820, -830, -830, -840, -840, -850, -850, -860, -860, -870, -870, -880, -880, -890, -890, -910, -910, -920, -920, -930, -",
      -5.36328125
    ],
    [
      "def sum_three_lowest_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    if len(nums) < 3:\n        return 0\n    return nums[0] + nums[1] + nums[2]\n\nprint(sum_three_lowest_positive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,176,176,177,176,177,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,",
      -5.68359375
    ],
    [
      "def three_lowest_positive(list):\n\n    sum = 0\n\n    for i in range(len(list) - 2):\n        if list[i] + list[i+1] + list[i+2] < 0:\n            sum += list[i]\n\n    return sum\n\n\nprint(three_lowest_positive([1,2,3,4,5,6,7,8,9,10]))",
      -6.1796875
    ],
    [
      "def three_lowest_positive(nums):\n    nums.sort()\n    count = 0\n    for i in range(len(nums)-2):\n        if i < len(nums)-1:\n            if nums[i] + nums[i+1] + nums[i+2] < 0:\n                count += nums[i]\n    return count\n\nprint(three_lowest_positive([-1, 0, 1, 2, 3]))",
      -6.59765625
    ],
    [
      "def sum_three_lowest_positive(nums):\n    nums.sort()\n    sum = 0\n    for i in range(len(nums)-2):\n        if i == 0 or nums[i] == nums[i-1]:\n            sum += nums[i]\n        if i == len(nums)-1 or nums[i] == nums[i+1]:\n            sum += nums[i]\n    return sum\n\n\nprint(sum_three_lowest_positive([-1, -2, -3, -4, -5]))\nprint(sum_three_lowest_positive([-2, -1, 0, 1, 2]))",
      -6.765625
    ],
    [
      "def three_lowest_positive(lst):\n    result = 0\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if i < len(lst) - 2:\n                if i + 1 < len(lst) - 1:\n                    if lst[i] + lst[i + 1] < lst[i + 2]:\n                        result += lst[i]\n    return result\n\nprint(three_lowest_positive([1,2,3,4,5]))\nprint(three_lowest_positive([-1,-2,-3,-4,-5]))",
      -6.828125
    ],
    [
      "def three_lowest_positive(arr):\n    arr.sort()\n    i=0\n    j=len(arr)-1\n    k=len(arr)-2\n    while(i<j):\n        if(arr[i]>=1 and arr[j]>=1 and arr[k]>=1):\n            return arr[i]+arr[j]+arr[k]\n        elif(arr[i]>1):\n            i+=1\n        elif(arr[j]>1):\n            j-=1\n        elif(arr[k]>1):\n            k-=1\n    return 0\n\nprint(three_lowest_positive([2,4,6,8]))\nprint(three_lowest_positive([1,-2,-3,4,-6,8]))\nprint(three_lowest_positive([4,2,-1]))\nprint(three_lowest_positive([-5,-4,-3,-2,-1]))",
      -8.2109375
    ],
    [
      "def sum_three_lowest_positive(numbers):\n    numbers = sorted(numbers)\n    return sum(numbers[0:3]) + sum(numbers[1:3]) + sum(numbers[2:3])\n\nprint(sum_three_lowest_positive([1, -5, -3, -10, 4, -2]))",
      -9.109375
    ],
    [
      "def three_lowest_positive(list):\n    list = sorted(list)\n    if len(list) == 3:\n        return list[0] + list[1] + list[2]\n    if len(list) == 2:\n        return list[0]\n    if len(list) == 1:\n        return list[0] + list[1] + list[2]\n    return list[0] + list[1] + list[2] + list[3]\n\n\nprint(three_lowest_positive([1, -2, 3, 4, 5]))\nprint(three_lowest_positive([1, -2, 3, 4, 5, -1]))",
      -10.59375
    ],
    [
      "def sum_three_lowest_positive(numbers):\n    numbers.sort()\n    if numbers[0] < numbers[1]:\n        if numbers[0] + numbers[2] < numbers[1]:\n            return numbers[0] + numbers[2]\n        if numbers[0] + numbers[2] + numbers[1] < numbers[1]:\n            return numbers[0] + numbers[2] + numbers[1]\n        if numbers[0] + numbers[2] + numbers[1] + numbers[2] < numbers[1]:\n            return numbers[0] + numbers[2] + numbers[1] + numbers[2]\n    else:\n        return numbers[0] + numbers[1] + numbers[2]\n\n\nif __name__ == \"__main__\":\n    print(sum_three_lowest_positive([3, 2, 4, 5, -1, -4, -3, -2]))",
      -10.625
    ],
    [
      "def three_lowest_positive(list_of_numbers):\n    list_of_numbers.sort()\n    low = 0\n    high = len(list_of_numbers) - 1\n    while low < high:\n        if list_of_numbers[low] + list_of_numbers[high] + list_of_numbers[low + 1] < 0:\n            low += 1\n        elif list_of_numbers[low] + list_of_numbers[high] + list_of_numbers[low + 1] + list_of_numbers[high + 1] < 0:\n            high -= 1\n        else:\n            return list_of_numbers[low] + list_of_numbers[high] + list_of_numbers[low + 1]\n\n\nprint(three_lowest_positive([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -10.9375
    ],
    [
      "def three_lowest_positive(arr):\n    #arr = list(range(1,101))\n    arr.sort()\n    i = 0\n    while i < len(arr) - 2:\n        if arr[i] > 0:\n            j = i + 1\n            k = len(arr) - 1\n            while j < k:\n                if arr[j] + arr[k] < arr[i]:\n                    if arr[j] + arr[k] + arr[i] > arr[i]:\n                        i = j\n                    elif arr[j] + arr[k] + arr[i] == arr[i]:\n                        return arr[i] + arr[j] + arr[k]\n                    else:\n                        k -= 1\n                else:\n                    j += 1\n            i += 1\n        else:\n            i += 1\n    return 0\n\nprint(three_lowest_positive([1,2,3,4,5,6,7,8,9,10]))",
      -12.4765625
    ],
    [
      "def three_lowest_positive(numbers):\n    low_nums = [x for x in numbers if x > 0]\n    if len(low_nums) > 0:\n        sum = 0\n        for i in range(len(low_nums)):\n            if i == 0 or i == len(low_nums) - 1:\n                sum += low_nums[i]\n            else:\n                sum += low_nums[i] + low_nums[i - 1] + low_nums[i + 1]\n        return sum\n    else:\n        return 0\n\n\n\nprint(three_lowest_positive([1, 2, 3, 4, 5]))",
      -12.6796875
    ],
    [
      "def three_lowest_positive(nums):\n    num_list = [num for num in nums if num > 0]\n    for i in range(len(num_list)-2):\n        for j in range(i+1,len(num_list)-1):\n            for k in range(j+1,len(num_list)):\n                if num_list[i]+num_list[j]+num_list[k] < 0:\n                    return num_list[i]+num_list[j]+num_list[k]\n\nprint(three_lowest_positive([1,2,-3,-4,-5]))",
      -13.0
    ],
    [
      "def three_lowest_positive(list_of_numbers):\n    list_of_numbers.sort()\n    return sum(list_of_numbers[0:3]) + sum(list_of_numbers[1:3]) + sum(list_of_numbers[2:3])\n\nprint(three_lowest_positive([1, -1, -2, 3, 2, -1, -3, 4, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141,",
      -13.578125
    ],
    [
      "def three_least_positive(nums):\n    nums.sort()\n    low = 0\n    high = len(nums) - 1\n    while low < high:\n        if nums[low] + nums[high] + nums[low + 1] < 0:\n            low += 1\n        elif nums[low] + nums[high] + nums[low + 1] > 0:\n            high -= 1\n        else:\n            return nums[low] + nums[high] + nums[low + 1]\n    return 0\n\n\nprint(three_least_positive([5, 4, 3, 2, 1]))\nprint(three_least_positive([2, 1, -1, -2, 2]))\nprint(three_least_positive([-1, 2, 3, -4, -5, -6]))\nprint(three_least_positive([-1, 2, 3, -4, -5, -6, -7]))",
      -13.6484375
    ],
    [
      "def lowest_positive_sum(nums):\n    nums.sort()\n    return sum([x for x in nums if x > 0 and x < 3000])\n\n\nprint(lowest_positive_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -13.921875
    ],
    [
      "def sum_three_lowest_positive(lst):\n    l = []\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if i+1 < len(lst) and lst[i] + lst[i+1] > lst[i]:\n                if i+2 < len(lst) and lst[i] + lst[i+2] > lst[i]:\n                    if i+3 < len(lst) and lst[i] + lst[i+3] > lst[i]:\n                        l.append(lst[i])\n    return sum(l)\n\n\nprint(sum_three_lowest_positive([10, 7, 3, 8, 9]))\nprint(sum_three_lowest_positive([-2, -1, -5, -4, -7, -9]))\nprint(sum_three_lowest_positive([]))",
      -14.3359375
    ],
    [
      "def sum_of_three_lowest_positive(nums):\n    nums.sort()\n    return sum(nums[0:3]) + sum(nums[1:3]) + sum(nums[2:3])\n\nprint(sum_of_three_lowest_positive([3, -1, 4, 2, -1]))\nprint(sum_of_three_lowest_positive([4, -1, 3, 2]))\nprint(sum_of_three_lowest_positive([3, -1, 4]))\nprint(sum_of_three_lowest_positive([-1, 4, 2]))\nprint(sum_of_three_lowest_positive([3, -1, 4, 2, 3]))\nprint(sum_of_three_lowest_positive([-1, 4, 2, -1]))\nprint(sum_of_three_lowest_positive([-1, 4, 2, -1, 3]))\nprint(sum_of_three_lowest_positive([-1, 4, 2, -1, 3, -1, -1, 4]))\nprint(sum_of_three_lowest_positive([-1, 4, 2, -1, 3, -1, -1, -1]))\nprint(sum_of_three_lowest_positive([-1, 4, 2, -1, 3, -1, -1, 4, -1, -1]))\nprint(sum_of_three_lowest_positive([-1, 4, 2, -1, 3, -1, -1, -1, 4, -1, -1]))\nprint(sum_of_three_lowest_positive([-1, 4, 2, -1, 3, -1, -1, 4, -1, -1, -1, -1, 4, -1, -1, -1]))",
      -14.4453125
    ],
    [
      "def three_lowest_positive(nums):\n    # Create a set of numbers less than 3\n    less_than_three = set(nums)\n    # Create a set of numbers greater than 3\n    greater_than_three = set(nums)\n    # Create a set of numbers less than or equal to 3\n    less_than_or_equal_three = set(nums)\n\n    # Get the sum of the three lowest positive numbers\n    sum_of_three = less_than_three.union(greater_than_three).union(less_than_or_equal_three)\n    # Return the sum of the three lowest positive numbers\n    return sum(list(sum_of_three))\n\n\nif __name__ == \"__main__\":\n    print(three_lowest_positive([0, 1, 2, 3, 4, 5]))",
      -14.84375
    ],
    [
      "def three_lowest_positive(numbers):\n    numbers.sort()\n    result = 0\n    for i in range(len(numbers) - 2):\n        if i == 0:\n            result += numbers[i]\n        if i == len(numbers) - 2:\n            result += numbers[i]\n        if i == len(numbers) - 1:\n            result += numbers[i]\n        if numbers[i] > 0 and numbers[i + 1] > 0 and numbers[i + 2] > 0:\n            result += numbers[i]\n    return result\n\nprint(three_lowest_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99]))",
      -15.1640625
    ],
    [
      "def three_lowest_positive(nums):\n    sum = 0\n    for i in range(len(nums) - 2):\n        if nums[i] > 0 and nums[i + 1] > 0 and nums[i + 2] > 0:\n            sum += nums[i] + nums[i + 1] + nums[i + 2]\n    return sum\n\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(three_lowest_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
      -15.1796875
    ],
    [
      "def sum_three_lowest_positive(numbers):\n    sorted_numbers = sorted(numbers)\n    sum_of_three = 0\n    for i in range(len(sorted_numbers) - 2):\n        if i == 0 or sorted_numbers[i] == sorted_numbers[i - 1]:\n            if i == len(sorted_numbers) - 1:\n                sum_of_three += sorted_numbers[i]\n            else:\n                sum_of_three += sorted_numbers[i] + sorted_numbers[i + 1]\n                sum_of_three += sorted_numbers[i + 2]\n    return sum_of_three\n\n\ndef main():\n    numbers = list(map(int, input().split()))\n    print(sum_three_lowest_positive(numbers))\n\n\nif __name__ == \"__main__\":\n    main()",
      -15.875
    ],
    [
      "def three_lowest_positive(numbers):\n    three_lowest = 0\n    for i in range(len(numbers)):\n        if numbers[i] >= 3 and numbers[i] < numbers[i+1] and numbers[i] < numbers[i+2]:\n            three_lowest = numbers[i]\n    return three_lowest\n\n\nprint(three_lowest_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -16.53125
    ],
    [
      "def three_lowest_positive(numbers):\n    numbers.sort()\n    i = 0\n    j = 0\n    k = 0\n    result = 0\n    while i < len(numbers) - 2:\n        if numbers[i] + numbers[j] + numbers[k] < 0:\n            result += numbers[i] + numbers[j] + numbers[k]\n            i += 1\n            j += 1\n            k += 1\n        elif numbers[i] + numbers[j] + numbers[k] > 0:\n            j += 1\n        else:\n            k += 1\n    return result\n\nprint(three_lowest_positive([1,2,3,4,5]))",
      -17.53125
    ],
    [
      "def sum_three_lowest_positive(numbers):\n    # write your code here\n    sum_three = 0\n    for i in range(len(numbers)):\n        if i == 0 or numbers[i] <= 0:\n            continue\n        if numbers[i] == 3:\n            sum_three += numbers[i]\n    return sum_three\n\n\nprint(sum_three_lowest_positive([1, 2, 3, 4, 5, 6]))\nprint(sum_three_lowest_positive([1, 2, 3, 4, 5, 6, 7]))\nprint(sum_three_lowest_positive([-1, -2, -3, -4, -5, -6, -7]))",
      -17.625
    ],
    [
      "def three_lowest_positive(nums):\n    if len(nums) <= 3:\n        return sum(nums)\n\n    min_num = nums[0]\n    for num in nums[1:]:\n        if num > min_num:\n            min_num = num\n            break\n    max_num = nums[-1]\n    for num in nums[1:-1]:\n        if num > max_num:\n            max_num = num\n            break\n\n    return min_num + max_num\n\nprint(three_lowest_positive([0, 1, 2, 3, 4, 5]))\nprint(three_lowest_positive([-1, -2, -3, -4, -5]))\nprint(three_lowest_positive([-1, -2, -3, -4, -5, -6, -7]))\nprint(three_lowest_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]))\nprint(three_lowest_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]))",
      -17.71875
    ],
    [
      "def sum_three_lowest_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    sum_three_lowest = 0\n    for i in range(len(nums) - 1):\n        if i > 0 and nums[i] > nums[i - 1]:\n            sum_three_lowest += nums[i]\n        if i > 0 and nums[i] > nums[i - 2] and nums[i] > nums[i - 3]:\n            sum_three_lowest += nums[i]\n    return sum_three_lowest\n\n\nprint(sum_three_lowest_positive([-1, 2, 1, -4, 3, 4]))",
      -17.765625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}