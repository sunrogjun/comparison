{
  "problem": {
    "task_id": "MBPP/102",
    "prompt": "Write a function to convert snake case string to camel case string.",
    "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
    "test_list": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ],
    "challenge_test_list": [],
    "problem_id": 91
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def snake_to_camel(snake):\n    \"\"\"\n    :type snake: str\n    :rtype: str\n    \"\"\"\n    return ''.join([x.title() if i!= 0 else x for i, x in enumerate(snake.split('_'))])\n\n\nprint(snake_to_camel('snake'))\nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake_case_case'))\nprint(snake_to_camel('snake_case_case_case'))\nprint(snake_to_camel('snake_case_case_case_case'))\nprint(snake_to_camel('snake_case_case_case_case_case'))",
      5.55078125
    ],
    [
      "def snake_to_camel(snake_string: str) -> str:\n    return ''.join([x.title() for x in snake_string.split('_')])\n\n\nprint(snake_to_camel('snake'))\nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake_case_case'))",
      5.203125
    ],
    [
      "def snake_to_camel(snake_string):\n    return ''.join(x.title() if i < len(snake_string) else x for i, x in enumerate(snake_string))\n\n\nprint(snake_to_camel('snake'))",
      4.5625
    ],
    [
      "def snake_to_camel(snake_str):\n    return ''.join([word.title() for word in snake_str.split('_')])\n\n\nprint(snake_to_camel('snake'))",
      4.2421875
    ],
    [
      "def snake_to_camel(snake):\n    s = snake.split('_')\n    return ''.join([s[0]] + [x.title() for x in s[1:]])\n\nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake_case_2'))\nprint(snake_to_camel('snake_case_3'))\nprint(snake_to_camel('snake_case_4'))\nprint(snake_to_camel('snake_case_5'))",
      4.02734375
    ],
    [
      "def snake_case_to_camel(s):\n    words = s.split(\"_\")\n    return \"\".join(x.capitalize() for x in words)\n\nprint(snake_case_to_camel(\"snake\"))\nprint(snake_case_to_camel(\"snake_case\"))\nprint(snake_case_to_camel(\"snake_case_case\"))\nprint(snake_case_to_camel(\"snake_case_case_case\"))",
      3.189453125
    ],
    [
      "def camel_case(snake_string):\n    return snake_string[0].upper() + snake_string[1:]\n\nprint(camel_case(\"snake_case\"))\nprint(camel_case(\"camel_case\"))\nprint(camel_case(\"_camel_case\"))\nprint(camel_case(\"_case\"))\nprint(camel_case(\"_case_\"))\nprint(camel_case(\"_case__\"))\nprint(camel_case(\"case\"))\nprint(camel_case(\"case_\"))\nprint(camel_case(\"camelcase\"))",
      3.18359375
    ],
    [
      "def snake_to_camel(snake):\n    words = snake.split('_')\n    return ''.join(words).lower()\n\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snakecase\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))",
      2.783203125
    ],
    [
      "def snake_to_camel(string):\n    return ''.join([word.title() for word in string.split('_')])\n\n\nprint(snake_to_camel('snake_case'))",
      2.451171875
    ],
    [
      "def snake_to_camel(snake_string):\n    result = \"\"\n    for i in snake_string.split(\"_\"):\n        result += i[0].upper() + i[1:]\n    return result\n\n\nassert snake_to_camel(\"snake\") == \"snake\"\nassert snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert snake_to_camel(\"snake_case_case\") == \"snakeCaseCase\"\nassert snake_to_camel(\"snake_case_case_case\") == \"snakeCaseCaseCase\"\nassert snake_to_camel(\"snake_case_case_case_case\") == \"snakeCaseCaseCaseCase\"",
      2.1875
    ],
    [
      "def snake_to_camel(snake):\n    return ''.join([x.capitalize() for x in snake.split('_')])\n\n\nif __name__ == '__main__':\n    print(snake_to_camel('snake'))\n    print(snake_to_camel('snake_case'))\n    print(snake_to_camel('snake_case_case'))\n    print(snake_to_camel('snake_case_case_case'))\n    print(snake_to_camel('snake_case_case_case_case'))\n    print(snake_to_camel('snake_case_case_case_case_case'))\n    print(snake_to_camel('snake_case_case_case_case_case_case'))\n    print(snake_to_camel('snake_case_case_case_case_case_case_case'))\n    print(snake_to_camel('snake_case_case_case_case_case_case_case_case'))",
      2.15625
    ],
    [
      "def snake_to_camel(snake_str):\n    return \"\".join([word.capitalize() for word in snake_str.split(\"_\")])",
      1.8310546875
    ],
    [
      "def snake_to_camel(snake_str):\n    \"\"\"\n    :type snake_str: str\n    :rtype: str\n    \"\"\"\n    return \"\".join([x.capitalize() for x in snake_str.split(\"_\")])\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake\"))\n    print(snake_to_camel(\"snake_case\"))\n    print(snake_to_camel(\"snake_case_case\"))",
      1.8154296875
    ],
    [
      "def snake_to_camel(string):\n    return \"\".join([word.title() for word in string.split(\"_\")])\n\n\nif __name__ == \"__main__\":\n    assert snake_to_camel(\"snake_case\") == \"snakeCase\"\n    assert snake_to_camel(\"camel_case\") == \"camelCase\"\n    assert snake_to_camel(\"camelCase\") == \"camelCase\"\n    assert snake_to_camel(\"snake_case_with_underscores\") == \"snake_caseWithunderscores\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_underscores\") == \"snake_caseWithunderscoresAndunderscores\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_underscores_and_underscores\") == \"snake_caseWithunderscoresAndunderscoresAndunderscores\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_underscores_and_underscores_and_underscores_and_underscores\") == \"snake_caseWithunderscoresAndunderscoresAndunderscoresAndunderscoresAndunderscores\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_underscores_and_underscores_and_underscores\") == \"snake_caseWithunderscoresAndunderscoresAndunderscoresAndunderscores\"",
      1.2412109375
    ],
    [
      "def snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    return ''.join([word[0].upper() + word[1:] for word in words])\n\n\nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake_case_2'))\nprint(snake_to_camel('snake_case_3'))\nprint(snake_to_camel('snake_case_4'))",
      1.1953125
    ],
    [
      "def camel_case(s):\n    return \"\".join([word[0].upper() + word[1:] for word in s.split(\"_\")])\n\n\nprint(camel_case(\"snake_case\"))",
      0.90869140625
    ],
    [
      "def snake_to_camel(string):\n    return ''.join(word.capitalize() for word in string.split('_'))",
      0.796875
    ],
    [
      "def snake_to_camel(s):\n    s = s.replace(\"_\", \"\").replace(\"-\", \"\").upper()\n    return s\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_with_hyphen\"))\nprint(snake_to_camel(\"snake_case_with_hyphen_with_spaces\"))",
      0.79443359375
    ],
    [
      "def snake_to_camel(snake_string):\n    return \"\".join([x.title() for x in snake_string.split(\"_\")])\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel(\"snake_case\") == \"SnakeCase\"\n    assert snake_to_camel(\"snake_case_1\") == \"SnakeCase1\"\n    assert snake_to_camel(\"snake_case1_1\") == \"SnakeCase1_1\"\n    assert snake_to_camel(\"snake_case1_1_1\") == \"SnakeCase1_1_1\"\n    assert snake_to_camel(\"snake_case1_1_1_1\") == \"SnakeCase1_1_1_1\"\n    assert snake_to_camel(\"snake_case_1\") == \"SnakeCase1\"",
      0.70947265625
    ],
    [
      "def snake_to_camel(snake_case_string):\n    return ''.join(x.capitalize() for x in snake_case_string.split('_'))\n\n\nif __name__ == '__main__':\n    print(snake_to_camel('snake'))\n    print(snake_to_camel('snake_case'))",
      0.53271484375
    ],
    [
      "def snake_to_camel(snake_string):\n    \"\"\"\n    :type snake_string: str\n    :rtype: str\n    \"\"\"\n    return \"\".join([word.title() for word in snake_string.split(\"_\")])\n\n\nassert snake_to_camel(\"snakeCase\") == \"snakeCase\"\nassert snake_to_camel(\"snake_case\") == \"snake_case\"\nassert snake_to_camel(\"snake_case_\") == \"snake_case_\"\nassert snake_to_camel(\"snake_case_\") == \"snake_case_\"\nassert snake_to_camel(\"snake_case_\") == \"snake_case_\"",
      0.50146484375
    ],
    [
      "def snake_to_camel(s):\n    return \"\".join(x.title() for x in s.split(\"_\"))\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))",
      0.439697265625
    ],
    [
      "def snake_to_camel(s):\n    return ''.join([x.capitalize() for x in s.split('_')])\n\nprint(snake_to_camel('snake'))\nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake_case_case'))",
      0.3564453125
    ],
    [
      "def snake_to_camel(snake_string):\n    return \"\".join(x.capitalize() for x in snake_string.split(\"_\"))\n\n\ndef test_function():\n    assert snake_to_camel(\"snake\") == \"Snake\"\n    assert snake_to_camel(\"snake_case\") == \"SnakeCase\"\n    assert snake_to_camel(\"snake_case_with_underscores\") == \"SnakeCaseWithUnderscore\"",
      -0.41650390625
    ],
    [
      "def snake_to_camel(snake_str):\n    return snake_str[0].upper() + snake_str[1:].lower()\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snakecase\"))\nprint(snake_to_camel(\"snake_case\"))",
      -0.61669921875
    ],
    [
      "def snake_to_camel(snake_str):\n    \"\"\"\n    :type snake_str: str\n    :rtype: str\n    \"\"\"\n    return ''.join(x.title() for x in snake_str.split('_'))\n\n\nif __name__ == '__main__':\n    assert snake_to_camel('snake') =='snake'\n    assert snake_to_camel('snake_case') =='snake_case'\n    assert snake_to_camel('snake_case_1') =='snake_case_1'\n    assert snake_to_camel('snake_case_1_2') =='snake_case_1_2'\n    assert snake_to_camel('snake_case_1_2_3') =='snake_case_1_2_3'\n    assert snake_to_camel('snake_case_1_2_3_4') =='snake_case_1_2_3_4'\n    assert snake_to_camel('snake_case_1_2_3_4_5') =='snake_case_1_2_3_4_5'",
      -0.6494140625
    ],
    [
      "def camel_to_snake(string):\n    return \"\".join(x.title() for x in string.split(\"_\"))\n\n\nprint(camel_to_snake(\"snake\"))",
      -0.65380859375
    ],
    [
      "def camel_to_snake(s):\n    return \"\".join(x.capitalize() or \"_\" for x in s.split(\"_\"))",
      -0.68017578125
    ],
    [
      "def snake_to_camel(snake_string):\n    return \"\".join(x.title() for x in snake_string.split(\"_\"))",
      -0.75341796875
    ],
    [
      "def camel_to_snake(string):\n    string = string.replace(\"_\", \"\")\n    return string[0].upper() + string[1:]\n\nprint(camel_to_snake(\"snake_case\"))\nprint(camel_to_snake(\"camel_case\"))\nprint(camel_to_snake(\"camel_case_2\"))\nprint(camel_to_snake(\"camel_case_3\"))\nprint(camel_to_snake(\"camel_case_4\"))\nprint(camel_to_snake(\"camel_case_5\"))\nprint(camel_to_snake(\"camel_case_6\"))",
      -0.81884765625
    ],
    [
      "def camel_case(s):\n    s = s.replace(\"_\",\" \")\n    return \"\".join(word.capitalize() for word in s.split(\"_\"))",
      -0.85693359375
    ],
    [
      "def snake_to_camel(snake_case):\n    return ''.join(word.title() for word in snake_case.split('_'))",
      -0.85693359375
    ],
    [
      "def snake_to_camel(snake_string):\n    if snake_string[0].isupper():\n        return snake_string[0].lower() + snake_string[1:]\n    else:\n        return snake_string[0] + snake_string[1].upper()\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))",
      -0.85693359375
    ],
    [
      "def camel_to_snake(string):\n    return ''.join(x.capitalize() or '_' for x in string.split('_'))\n\n\nassert camel_to_snake('snake') == 'Snake'\nassert camel_to_snake('snake_case') == 'SnakeCase'\nassert camel_to_snake('snake_case_2') == 'SnakeCase2'",
      -0.85693359375
    ],
    [
      "class Solution:\n    def snake_to_camel(self, s: str) -> str:\n        s = s.replace(\"_\", \"\").lower()\n        s = s[0].upper() + s[1:]\n        return s\n\nif __name__ == \"__main__\":\n    s = \"snake\"\n    print(Solution().snake_to_camel(s))",
      -0.85693359375
    ],
    [
      "def snake_to_camel(str):\n    str = str.title()\n    str = str.replace('_',' ')\n    str = str.replace('-','_')\n    return str\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"camel\"))\nprint(snake_to_camel(\"SNAKE\"))",
      -0.85693359375
    ],
    [
      "def camel_case(string):\n    return ''.join(word[0].upper() + word[1:] for word in string.split('_'))\n\n\nprint(camel_case('snake'))\nprint(camel_case('snake_case'))\nprint(camel_case('snake_case_case'))",
      -0.85693359375
    ],
    [
      "def camelcase(s):\n    return ''.join(x.title() for x in s.split('_'))",
      -0.85693359375
    ],
    [
      "def snake_to_camel(snake_str):\n    snake_str = snake_str.replace(\"_\", \"\").title()\n    return snake_str\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_\"))",
      -0.85693359375
    ],
    [
      "class Solution:\n    def toCamel(self, s: str) -> str:\n        return \"\".join(x.capitalize() for x in s.split(\"_\"))\n\n\nprint(Solution().toCamel(\"snake\"))",
      -0.85693359375
    ],
    [
      "def camel_case(s):\n    return ''.join(x.capitalize() for x in s.split('_'))\n\nprint(camel_case('snake'))",
      -0.85693359375
    ],
    [
      "def camel_case(str):\n    return ''.join(word.capitalize() or '_' for word in str.split('_'))",
      -0.857421875
    ],
    [
      "def snake_to_camel(string):\n    return \"\".join([x.capitalize() for x in string.split(\"_\")])",
      -0.857421875
    ],
    [
      "def snake_to_camel(snake_string):\n    return ''.join(x.title() for x in snake_string.split('_'))",
      -0.857421875
    ],
    [
      "def snake_to_camel(snake_string):\n    return ''.join(x.title() for x in snake_string.split('_'))",
      -0.857421875
    ],
    [
      "def snake_to_camel(snake_case):\n    return snake_case[0].upper() + snake_case[1:]\n\n\nprint(snake_to_camel(\"snake\"))",
      -0.857421875
    ],
    [
      "def camel_case(s):\n    return ''.join([x.capitalize() for x in s.split('_')])",
      -0.857421875
    ],
    [
      "def snake_case_to_camel_case(s):\n    s = s.replace('-', '_')\n    s = s.replace('_', '')\n    return s\n\n\nprint(snake_case_to_camel_case('snake_case'))",
      -0.85791015625
    ],
    [
      "def camel_case(snake_string):\n    return snake_string.title()\n\nprint(camel_case('snake'))",
      -0.85791015625
    ],
    [
      "def snake_to_camel(snake_string):\n    return ''.join(x.capitalize() for x in snake_string.split('_'))\n\nprint(snake_to_camel('snake'))",
      -0.85791015625
    ],
    [
      "def snake_to_camel(snake_str):\n    camel_str = \"\"\n    for char in snake_str:\n        if char.isalpha():\n            camel_str += char.lower()\n        else:\n            camel_str += char\n    return camel_str\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"SNAKE\"))",
      -0.85791015625
    ],
    [
      "def snake_to_camel(snake_string):\n    return \"\".join([w.capitalize() for w in snake_string.split(\"_\")])",
      -0.85791015625
    ],
    [
      "def snake_to_camel(s):\n    s = s.replace(\"_\", \"\")\n    s = s.title()\n    return s\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case\"))",
      -0.85791015625
    ],
    [
      "def camel_case(string):\n    result = \"\"\n    for i in string.split(\"_\"):\n        if i == \"\":\n            continue\n        result += i[0].upper() + i[1:]\n    return result\n\n\nprint(camel_case(\"snake\"))",
      -0.85791015625
    ],
    [
      "def snake_to_camel(snake_string):\n    if snake_string == '':\n        return ''\n    return snake_string[0].upper() + snake_string[1:].lower()\n\nprint(snake_to_camel('snake_case'))",
      -0.85791015625
    ],
    [
      "def snake_to_camel(s):\n    return ''.join(x.capitalize() for x in s.split('_'))\n\nprint(snake_to_camel('snake'))\nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake_case_case'))",
      -0.85791015625
    ],
    [
      "def camelcase(s):\n    s = s.replace(\"_\", \"\")\n    return s[0].upper() + s[1:]\n\n\nprint(camelcase(\"snake\"))",
      -0.85791015625
    ],
    [
      "def snake_case(s):\n    return ''.join(x.capitalize() for x in s.split('_'))",
      -0.85791015625
    ],
    [
      "def snake_to_camel(string):\n    return ''.join([word[0].upper() + word[1:] for word in string.split('_')])",
      -0.85791015625
    ],
    [
      "def camel_case_snake(snake_str):\n    return \"\".join([word[0].upper() + word[1:] for word in snake_str.split(\"_\")])",
      -0.85791015625
    ],
    [
      "def snake_to_camel(s):\n    s = s.replace(\"_\", \"\")\n    s = s.title()\n    return s\n\n\nprint(snake_to_camel(\"snake\"))",
      -0.85791015625
    ],
    [
      "def snake_to_camel(snake_string):\n    return \"\".join([word.capitalize() for word in snake_string.split(\"_\")])\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"camel\"))\nprint(snake_to_camel(\"camelCase\"))",
      -0.8583984375
    ],
    [
      "def snake_to_camel(snake):\n    s = snake.split(\"_\")\n    return s[0] + \"\".join(x.title() for x in s[1:])",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def convert(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        res = \"\"\n        for i in range(len(s)):\n            if s[i].isupper():\n                res += s[i].lower()\n                res += s[i].upper()\n            else:\n                res += s[i]\n        return res[0].upper() + res[1:]\n\ns = Solution()\nprint s.convert(\"snake\")",
      -0.8583984375
    ],
    [
      "def camel_to_snake(name):\n    return ''.join(x.title() for x in name.split('_'))",
      -0.86083984375
    ],
    [
      "def snake_to_camel(snake_str):\n    return \"\".join([x.capitalize() for x in snake_str.split(\"_\")])",
      -0.86083984375
    ],
    [
      "def snake_to_camel(snake_str):\n    return snake_str[0].upper() + snake_str[1:]\n\n\nprint(snake_to_camel(\"snake\"))",
      -0.86083984375
    ],
    [
      "def convert(string):\n    return ''.join(x.capitalize() if i < len(string) - 1 else x for i, x in enumerate(string))",
      -0.88818359375
    ],
    [
      "class Solution(object):\n    def snakeToCamel(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = s.replace('_','')\n        return ''.join([w[0].upper() + w[1:] for w in s.split('_')])",
      -0.908203125
    ],
    [
      "def snake_to_camel(s):\n    return \"\".join(x.title() if x.isupper() else x.lower() for x in s.split(\"_\"))\n\n\nprint(snake_to_camel(\"snake\"))",
      -0.92138671875
    ],
    [
      "def snake_to_camel(snake):\n    s = snake.split('_')\n    return ''.join([i.capitalize() for i in s])\n\n\nassert snake_to_camel('snake') == 'Snake'\nassert snake_to_camel('snake1') == 'Snake1'\nassert snake_to_camel('snake1_1') == 'Snake1_1'",
      -1.0185546875
    ],
    [
      "def camel_case_to_snake(s):\n    return ''.join(x.capitalize() or '_' for x in s.split('_'))\n\nprint(camel_case_to_snake('snake'))",
      -1.333984375
    ],
    [
      "def snake_to_camel(s):\n    return ''.join([i.title() for i in s.split('_')])",
      -1.4326171875
    ],
    [
      "def snake_to_camel(snake_string):\n    s1 = snake_string.split('_')\n    return ''.join(x.capitalize() for x in s1)\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))\nprint(snake_to_camel(\"snake_case_Case\"))",
      -1.62890625
    ],
    [
      "def snake_to_camel(s):\n    return ''.join(x.title() for x in s.split('_'))\n\nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake'))\nprint(snake_to_camel('snake_case_1'))\nprint(snake_to_camel('snake_case_1_2'))\nprint(snake_to_camel('snake_case_1_2_3'))\nprint(snake_to_camel('snake_case_1_2_3_4'))\nprint(snake_to_camel('snake_case_1_2_3_4_5'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6_7'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6_7_8'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6_7_8_9'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6_7_8_9_10'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6_7_8_9_10_11'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6_7_8_9_10_11_12'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6_7_8_9_10_11_12_13'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6_7_8_9_10_11_12_13_14'))\nprint(snake_to_camel('snake_case_1_2_3_4_5_6_7_8_",
      -1.8115234375
    ],
    [
      "def camel_case(string):\n    return ''.join([word.capitalize() for word in string.split('_')])\n\nprint(camel_case('snake'))\nprint(camel_case('snakeCase'))\nprint(camel_case('snake_case'))\nprint(camel_case('snake_case_'))\nprint(camel_case('snake_case_1'))\nprint(camel_case('snake_case_1_1'))\nprint(camel_case('snake_case_1_2'))\nprint(camel_case('snake_case_1_2_1'))\nprint(camel_case('snake_case_1_2_1_3'))\nprint(camel_case('snake_case_1_2_1_3_4'))\nprint(camel_case('snake_case_1_2_1_3_4_5'))\nprint(camel_case('snake_case_1_2_1_3_4_5_6'))\nprint(camel_case('snake_case_1_2_1_3_4_5_6_7'))\nprint(camel_case('snake_case_1_2_1_3_4_5_6_7_8'))\nprint(camel_case('snake_case_1_2_1_3_4_5_6_7_8_9'))\nprint(camel_case('snake_case_1_2_1_3_4_5_6_7_8_9_10'))\nprint(camel_case('snake_case_1_2_1_3_4_5_6_7_8_9_10_1'))\nprint(camel_case('snake_case_1_2_1_3_4_5_6_7_8_9_10_2'))\nprint(camel_case('snake_case_1_2_1_3_4_5_6_7_8_9_10_2_1'))\nprint(camel_case('snake_case_1_2_1_3_4_5_6_7_8_9_10_2_1_2'))\nprint",
      -1.9453125
    ],
    [
      "def snake_to_camel(snake):\n    return \"\".join(x.title() for x in snake.split(\"_\"))\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_1\"))",
      -2.087890625
    ],
    [
      "def snake_to_camel(snake_string):\n    return \"\".join(x.capitalize() for x in snake_string.split(\"_\"))\n\n\nassert snake_to_camel(\"snake_case\") == \"SnakeCase\"\nassert snake_to_camel(\"snake_case_1\") == \"SnakeCase1\"\nassert snake_to_camel(\"snake_case_1_2\") == \"SnakeCase1_2\"\nassert snake_to_camel(\"snake_case_1_2_3\") == \"SnakeCase1_2_3\"\nassert snake_to_camel(\"snake_case_1_2_3_4\") == \"SnakeCase1_2_3_4\"\nassert snake_to_camel(\"snake_case_1_2_3_4_5\") == \"SnakeCase1_2_3_4_5\"",
      -2.10546875
    ],
    [
      "def snake_case_to_camel(snake_case):\n    \"\"\"\n    :type snake_case: str\n    :rtype: str\n    \"\"\"\n    s1 = snake_case.split('_')\n    s2 = ''\n    for i in range(len(s1)):\n        s2 += s1[i].title()\n    return s2\n\ndef test_case():\n    test_cases = [\n        ('snake','snake'),\n        ('snake_case','snake_case'),\n        ('snake_case_case','snake_case_case'),\n        ('snake_case_case_case','snake_case_case_case'),\n    ]\n\n    for test_case in test_cases:\n        result = snake_case_to_camel(test_case[0])\n        expected = test_case[1]\n        assert result == expected\n\nif __name__ == '__main__':\n    test_case()",
      -2.45703125
    ],
    [
      "def to_camel(string):\n    string = string.lower()\n    return ''.join([word.capitalize() for word in string.split('_')])\n\n\nassert to_camel('snake') =='snake'\nassert to_camel('snake_case') =='snake_case'\nassert to_camel('snake_case_with_underscores') =='snake_case_with_underscores'\nassert to_camel('snake_case_with_underscores_and_underscores') =='snake_case_with_underscores_and_underscores'\nassert to_camel('snake_case_with_underscores_and_underscores_and_underscores') =='snake_case_with_underscores_and_underscores_and_underscores'\nassert to_camel('snake_case_with_underscores_and_underscores_and_underscores_and_underscores') =='snake_case_with_underscores_and_underscores_and_underscores'\nassert to_camel('snake_case_with_underscores_and_underscores_and_underscores_and_underscores_and_underscores_and_underscores_and_underscores') =='snake_case_with_underscores_and_underscores_and_underscores_and_underscores_and_underscores_and_underscores'",
      -2.56640625
    ],
    [
      "def snake_to_camel(string):\n    return \"\".join([word[0].upper() + word[1:] for word in string.split(\"_\")])\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))",
      -2.701171875
    ],
    [
      "def snake_to_camel(snake_string):\n    camel_string = ''\n    for i in range(len(snake_string)):\n        if snake_string[i].isupper():\n            camel_string += snake_string[i].lower()\n        else:\n            camel_string += snake_string[i]\n    return camel_string\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case_case_case\"))",
      -3.02734375
    ],
    [
      "def to_camel_case(snake_string):\n    return snake_string[0].upper() + snake_string[1:].replace(\"_\", \"\")\n\n\nassert to_camel_case(\"snake_case\") == \"snake_case\"\nassert to_camel_case(\"snake_case_with_underscores\") == \"snake_case_with_underscores\"\nassert to_camel_case(\"snake_case_with_underscores_and_hyphens\") == \"snake_case_with_underscores_and_hyphens\"\nassert to_camel_case(\"snake_case_with_underscores_and_hyphens_and_underscores\") == \"snake_case_with_underscores_and_hyphens_and_underscores\"\nassert to_camel_case(\"snake_case_with_underscores_and_underscores_and_hyphens_and_underscores\") == \"snake_case_with_underscores_and_underscores_and_hyphens_and_underscores\"",
      -3.400390625
    ],
    [
      "def snake_to_camel(snake_case):\n    return snake_case.title()\n\n\nif __name__ == '__main__':\n    print(snake_to_camel('snake'))\n    print(snake_to_camel('snake_case'))\n    print(snake_to_camel('snake_case_case'))\n    print(snake_to_camel('snake_case_case_case'))\n    print(snake_to_camel('snake_case_case_case_case'))\n    print(snake_to_camel('snake_case_case_case_case_case'))",
      -3.68359375
    ],
    [
      "def snake_to_camel(snake_str):\n    return snake_str[0].upper() + snake_str[1:]\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snakeCase\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case_case\"))",
      -4.19140625
    ],
    [
      "def convert_snake_to_camel(snake_string):\n    return \"\".join(x.capitalize() or \"_\" for x in snake_string.split(\"_\"))\n\ndef test_convert_snake_to_camel():\n    assert convert_snake_to_camel(\"snake_case\") == \"snake_case\"\n    assert convert_snake_to_camel(\"snake_case_2\") == \"snake_case2\"\n    assert convert_snake_to_camel(\"snake_case_3\") == \"snake_case3\"\n    assert convert_snake_to_camel(\"snake_case_4\") == \"snake_case4\"\n    assert convert_snake_to_camel(\"snake_case_5\") == \"snake_case5\"",
      -4.5859375
    ],
    [
      "def convert_snake_case(string):\n    return ''.join(x.title() if x.isupper() else x for x in string.split('_'))\n\n\ndef test_function():\n    assert convert_snake_case('snake') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert convert_snake_case('snakeCase') =='snakeCase'\n    assert",
      -4.8671875
    ],
    [
      "def snake_to_camel(snake_str):\n    return \"\".join(x.capitalize() for x in snake_str.split(\"_\"))\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake\"))\n    print(snake_to_camel(\"snake_case\"))\n    print(snake_to_camel(\"snake_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case_case_case\"))",
      -4.8984375
    ],
    [
      "def snake_case(string):\n    return ''.join(x.capitalize() or \"_\" for x in string.split(\"_\"))\n\ndef main():\n    print(snake_case(\"snake\"))\n    print(snake_case(\"snake_case\"))\n    print(snake_case(\"snake_case_case\"))\n    print(snake_case(\"snake_case_case_case\"))\n    print(snake_case(\"snake_case_case_case_case\"))\n    print(snake_case(\"snake_case_case_case_case_case\"))\n    print(snake_case(\"snake_case_case_case_case_case_case\"))\n    print(snake_case(\"snake_case_case_case_case_case_case_case\"))\n    print(snake_case(\"snake_case_case_case_case_case_case_case_case\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.1953125
    ],
    [
      "def snake_to_camel(snake_str):\n    return snake_str[0].upper() + snake_str[1:]\n\nif __name__ == '__main__':\n    print(snake_to_camel(\"snake\"))\n    print(snake_to_camel(\"snake_case\"))\n    print(snake_to_camel(\"snake_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case\"))\n    print(snake_to_camel(\"snake_case_case_case_case\"))",
      -5.2890625
    ],
    [
      "def camelcase(snake_case_string: str) -> str:\n    return snake_case_string[0].lower() + \"\".join(x.title() for x in snake_case_string[1:])\n\n\nprint(camelcase(\"snake\"))\nprint(camelcase(\"snake_case\"))\nprint(camelcase(\"snake_case_case\"))\nprint(camelcase(\"snake_case_case_case\"))",
      -5.5625
    ],
    [
      "def snake_to_camel(str):\n    new_str = ''\n    for i in range(len(str)):\n        if i == 0:\n            new_str += str[i].upper()\n        else:\n            new_str += str[i].lower()\n\n    return new_str\n\nprint(snake_to_camel('snake'))\nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake_case_case'))\nprint(snake_to_camel('snake_case_case_case'))\nprint(snake_to_camel('snake_case_case_case_case'))\nprint(snake_to_camel('snake_case_case_case_case_case'))",
      -6.27734375
    ],
    [
      "def camel_to_snake(word):\n    return \"\".join([word[0].upper() + word[1:] if word[0].isupper() else word.upper() + word[1:] for word in word.split(\"_\")])\n\n\ndef test():\n    assert camel_to_snake(\"snake\") == \"snake\"\n    assert camel_to_snake(\"snake_case\") == \"snake_case\"\n    assert camel_to_snake(\"camel\") == \"camel\"\n    assert camel_to_snake(\"camel_case\") == \"camel_case\"\n    assert camel_to_snake(\"snake_case_camel\") == \"snake_case_camel\"\n    assert camel_to_snake(\"snake_case_camel_case\") == \"snake_case_camel_case\"",
      -6.8828125
    ],
    [
      "def camel_to_snake(string):\n    return ''.join(x.capitalize() for x in string.split('_'))\n\n\ndef main():\n    print(camel_to_snake('snake'))\n    print(camel_to_snake('camel'))\n\n\nif __name__ == '__main__':\n    main()",
      -6.9921875
    ],
    [
      "def snake_to_camel(snake):\n    s = snake.replace(\"_\", \"\")\n    return s[0].upper() + s[1:]\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_with_underscores\"))\nprint(snake_to_camel(\"snake_case_with_underscores_and_spaces\"))\nprint(snake_to_camel(\"snake_case_with_underscores_and_spaces_and_spaces\"))",
      -7.4453125
    ],
    [
      "def snake_to_camel(string):\n    s1 = string[0].lower()\n    s2 = ''\n    for i in range(1, len(string)):\n        if string[i].isupper():\n            s2 += string[i].upper()\n        else:\n            s2 += string[i]\n\n    return s1 + s2",
      -7.6484375
    ],
    [
      "def snake_to_camel(string):\n    new_string = \"\"\n    for char in string:\n        if char.islower() and char.isupper() and char.isdigit():\n            new_string += char.lower()\n        elif char.isupper():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case\"))",
      -7.66015625
    ],
    [
      "def snake_to_camel(s):\n    if s == \"\":\n        return \"\"\n    s = s.replace(\"_\", \"\")\n    return s[0].upper() + s[1:].lower()\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel(\"\") == \"\"\n    assert snake_to_camel(\"_\") == \"\"\n    assert snake_to_camel(\"_1\") == \"_1\"\n    assert snake_to_camel(\"_1_2\") == \"_1_2\"\n    assert snake_to_camel(\"_1_2_3\") == \"_1_2_3\"\n    assert snake_to_camel(\"_1_2_3_4\") == \"_1_2_3_4\"\n    assert snake_to_camel(\"_1_2_3_4_5\") == \"_1_2_3_4_5\"\n    assert snake_to_camel(\"_1_2_3_4_5_6\") == \"_1_2_3_4_5_6\"\n    assert snake_to_camel(\"_1_2_3_4_5_6_7\") == \"_1_2_3_4_5_6_7\"\n    assert snake_to_camel(\"_1_2_3_4_5_6_7_8\") == \"_1_2_3_4_5_6_7_8\"",
      -8.5
    ],
    [
      "def camel_to_snake(string: str) -> str:\n    return \"\".join(x.title() for x in string.split(\"_\"))\n\n\nprint(camel_to_snake(\"snake\"))\nprint(camel_to_snake(\"snake_case\"))\nprint(camel_to_snake(\"snake_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case\"))",
      -8.859375
    ],
    [
      "def snake_to_camel(snake_string):\n    new_string = \"\"\n    for i in snake_string:\n        new_string = new_string + i.capitalize()\n    return new_string\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake1\"))\nprint(snake_to_camel(\"snake_1\"))\nprint(snake_to_camel(\"snake_1_1\"))\nprint(snake_to_camel(\"snake_1_1_1\"))\nprint(snake_to_camel(\"snake_1_1_1_1\"))",
      -9.0078125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}