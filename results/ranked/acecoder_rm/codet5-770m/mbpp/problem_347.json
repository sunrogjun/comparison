{
  "problem": {
    "task_id": "MBPP/358",
    "prompt": "Write a function to find modulo division of two lists using map and lambda function.",
    "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
    "test_list": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ],
    "challenge_test_list": [],
    "problem_id": 347
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def modulo_division(list_1, list_2):\n    return list(map(lambda x, y: x % y, list_1, list_2))\n\n\nprint(modulo_division([3, 4, 5], [2, 3, 4]))",
      14.4453125
    ],
    [
      "list_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\n\ndef modulo_division(list_1, list_2):\n    return list(map(lambda x, y: x % y, list_1, list_2))\n\n\nprint(modulo_division(list_1, list_2))",
      11.6015625
    ],
    [
      "def modulo_division(list_1, list_2):\n    return list(map(lambda x, y: x % y, list_1, list_2))\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5]\n    list_2 = [5, 4, 3, 2, 1]\n\n    print(modulo_division(list_1, list_2))",
      11.5546875
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3], [4, 5, 6]))",
      10.9765625
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(modulo_division([1, 2, 3], [4, 5, 6]))",
      10.7890625
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\ndef main():\n    print(modulo_division([1, 2, 3, 4, 5], [3, 6, 7, 8, 9]))\n\n\nif __name__ == \"__main__\":\n    main()",
      9.9921875
    ],
    [
      "def mod_div(l1, l2):\n    return list(map(lambda x: x % y, l1, l2))\n\n\ndef mod_div_lambda(l1, l2):\n    return list(map(lambda x: x % y, l1, l2))\n\n\nprint(mod_div([1, 2, 3], [4, 5, 6]))\nprint(mod_div_lambda([1, 2, 3], [4, 5, 6]))",
      9.09375
    ],
    [
      "def mod_div(a, b):\n    return [x % y for x, y in zip(a, b)]\n\n\na = [1, 2, 3, 4, 5]\nb = [2, 4, 6, 8, 10]\n\nprint(mod_div(a, b))",
      8.546875
    ],
    [
      "def mod(x, y):\n    return x % y\n\n\ndef mod_list(x, y):\n    return list(map(mod, x, y))\n\n\nif __name__ == '__main__':\n    print(mod_list([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))",
      8.046875
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3], [4, 5, 6]))\n    print(modulo_division([1, 2, 3], [4, 5, 6]))\n    print(modulo_division([1, 2, 3], [4, 5, 6]))",
      7.65625
    ],
    [
      "def mod_div(a, b):\n    return [int(x) % y for x, y in zip(a, b)]\n\n\ndef mod_div_lambda(a, b):\n    return [x % y for x, y in zip(a, b)]\n\n\ndef mod_div_map(a, b):\n    return list(map(lambda x, y: int(x) % y, a, b))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3]\n    b = [1, 2, 3]\n\n    print(mod_div_map(a, b))",
      7.453125
    ],
    [
      "def mod_div(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\nif __name__ == '__main__':\n    print(mod_div([1, 2, 3], [4, 5, 6]))\n    print(mod_div([2, 3, 4], [5, 6, 7]))",
      7.24609375
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\ndef modulo_division_lambda(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(modulo_division([1, 2, 3, 4, 5], [4, 5, 7, 8, 9]))\n    print(modulo_division([1, 2, 3, 4, 5], [7, 8, 9, 10, 11]))\n    print(modulo_division_lambda([1, 2, 3, 4, 5], [4, 5, 7, 8, 9]))\n    print(modulo_division_lambda([1, 2, 3, 4, 5], [7, 8, 9, 10, 11]))",
      7.203125
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3], [4, 5, 6]))\n    print(modulo_division([1, 2, 3], [4, 5, 6]))",
      5.81640625
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nprint(modulo_division([1, 2, 3, 4], [5, 6, 7, 8]))",
      5.6796875
    ],
    [
      "def mod_div(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\ndef mod_div_lambda(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(",
      5.5703125
    ],
    [
      "def mod_div(list_1, list_2):\n    return list(map(lambda x: x % y, list_1, list_2))\n\n\ndef mod_div_lambda(list_1, list_2):\n    return list(map(lambda x: x % y, list_1, list_2))\n\n\nif __name__ == \"__main__\":\n    print(mod_div([1, 2, 3], [4, 5, 6]))",
      5.19140625
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x,y: x%y, list1, list2))\n\nprint(modulo_division([1,2,3,4,5],[1,2,3,4,5]))",
      4.17578125
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\nprint(modulo_division([1,2,3,4,5], [1,2,3,4,5]))",
      3.826171875
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\ndef test_function():\n    assert modulo_division([1, 2, 3], [4, 5, 6]) == [1, 3, 6]\n\n\nif __name__ == \"__main__\":\n    test_function()",
      3.7578125
    ],
    [
      "def mod_div(l1, l2):\n    return [x % y for x, y in zip(l1, l2)]\n\n\ndef main():\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 3, 5, 7, 9]\n    print(mod_div(l1, l2))\n\n\nif __name__ == \"__main__\":\n    main()",
      3.25
    ],
    [
      "def mod_div(l1, l2):\n    return list(map(lambda x: x % y, l1, l2))\n\n\nprint(mod_div([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))",
      3.056640625
    ],
    [
      "def mod_div(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5]\n    print(mod_div(a, b))",
      3.041015625
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\nprint(modulo_division([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]))\nprint(modulo_division([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]))\nprint(modulo_division([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8]))",
      3.037109375
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3], [4, 5, 6]))",
      2.98828125
    ],
    [
      "def mod_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\ndef mod_division_lambda(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nprint(mod_division([1, 2, 3, 4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 8, 9]))\nprint(mod_division([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 6, 8, 10, 12, 14, 16, 18]))",
      2.873046875
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nprint(modulo_division([1, 2, 3, 4], [5, 6, 7, 8]))",
      2.859375
    ],
    [
      "def modulo_division(list_1, list_2):\n    return list(map(lambda x: x % y, list_1, list_2))\n\nprint(modulo_division([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [4, 5, 6, 7, 8, 9, 10]))",
      2.765625
    ],
    [
      "def modulo_division(list1, list2):\n    return [i % j for i, j in zip(list1, list2)]\n\n\nprint(modulo_division([1, 2, 3], [4, 5, 6]))",
      2.591796875
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(modulo_division([1, 2, 3], [1, 3, 5]))",
      2.48046875
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nprint(modulo_division([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      2.10546875
    ],
    [
      "def modulo_division(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\nprint(modulo_division([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))",
      1.990234375
    ],
    [
      "def modulo_division(a, b):\n    return map(lambda x, y: x % y, a, b)\n\n\nprint(modulo_division([1, 2, 3, 4, 5], [3, 5]))",
      1.919921875
    ],
    [
      "def mod_div(a, b):\n    return list(map(lambda x,y: x%y, a, b))\n\nprint(mod_div([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))",
      1.515625
    ],
    [
      "def mod_div(l1, l2):\n    return list(map(lambda x: x % y, l1, l2))\n\nprint(mod_div([1, 2, 3], [4, 5, 6]))",
      1.4423828125
    ],
    [
      "def moddiv(list1, list2):\n    return [i % j for i, j in zip(list1, list2)]\n\n\nprint(moddiv([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))",
      1.1640625
    ],
    [
      "def modulo_division(a, b):\n    return list(map(lambda x: x % b, a))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3, 4, 5, 6], [2, 4, 6]))",
      1.0849609375
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nprint(modulo_division([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))",
      1.0087890625
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nprint(modulo_division([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))",
      0.978515625
    ],
    [
      "def mod(a, b):\n    return [a[i] % b[i] for i in range(len(a))]\n\n\na = [2, 4, 6, 8, 10]\nb = [4, 6, 8, 10, 12]\n\nprint(mod(a, b))",
      0.8896484375
    ],
    [
      "def modulo_division(list_1, list_2):\n    return list(map(lambda x, y: x % y, list_1, list_2))\n\n\nprint(modulo_division([1, 2, 3], [4, 5, 6]))",
      0.83251953125
    ],
    [
      "def modulo_division(a, b):\n    return map(lambda x, y: x % y, a, b)\n\n\na = [1, 2, 3, 4, 5]\nb = [6, 7, 8, 9, 10]\n\nprint(modulo_division(a, b))",
      0.76025390625
    ],
    [
      "def mod_division(list1, list2):\n    return [i % j for i, j in zip(list1, list2)]\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nprint(mod_division(list1, list2))",
      0.64892578125
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3], [4, 5, 6]))",
      0.64892578125
    ],
    [
      "def mod_div(a, b):\n    return map(lambda x: x % b, a)\n\n\ndef mod_div_lambda(a, b):\n    return list(map(lambda x: x % b, a))\n\n\nprint(mod_div([1, 2, 3], [2, 3, 4]))\nprint(mod_div_lambda([1, 2, 3], [2, 3, 4]))",
      0.6083984375
    ],
    [
      "def modulo_division(list_a, list_b):\n    return list(map(lambda x: x % y, list_a, list_b))\n\nif __name__ == '__main__':\n    print(modulo_division([1,2,3], [4,5,6]))\n    print(modulo_division([1,2,3], [4,5,6]))\n    print(modulo_division([1,2,3], [4,5,6]))\n    print(modulo_division([1,2,3], [4,5,6]))",
      0.423095703125
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nprint(modulo_division([1, 2, 3], [4, 5, 6]))",
      0.390380859375
    ],
    [
      "def mod_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\nprint(mod_division([1,2,3], [4,5,6]))",
      0.335205078125
    ],
    [
      "def mod_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))",
      0.32958984375
    ],
    [
      "def modulo_division(numbers_one, numbers_two):\n    return list(map(lambda x: x % y, numbers_one, numbers_two))",
      0.1883544921875
    ],
    [
      "def modulo_division(list1, list2):\n    return map(lambda x, y: x % y, list1, list2)\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3], [4, 5, 6]))",
      0.1341552734375
    ],
    [
      "def modulo_division(list_1, list_2):\n    return list(map(lambda x: x % y, list_1, list_2))\n\n\nprint(modulo_division([1, 2, 3], [2, 5, 10]))",
      0.0908203125
    ],
    [
      "def modulo(l1, l2):\n    return list(map(lambda x, y: x % y, l1, l2))\n\nprint(modulo([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))",
      0.07708740234375
    ],
    [
      "def mod_div(l1, l2):\n    return [x % y for x, y in zip(l1, l2)]\n\nl1 = [1, 2, 3, 4]\nl2 = [2, 4, 6, 8]\nprint(mod_div(l1, l2))",
      -0.15185546875
    ],
    [
      "def mod_div(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\nif __name__ == '__main__':\n    print(mod_div([1, 2, 3], [4, 5, 6]))",
      -0.226318359375
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\nprint(modulo_division([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))",
      -0.259521484375
    ],
    [
      "def modulo_division(list_1, list_2):\n    return list(map(lambda x: x % y, list_1, list_2))\n\n\nprint(modulo_division([1, 2, 3], [4, 5, 6]))",
      -0.2626953125
    ],
    [
      "def mod_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nprint(mod_division([1, 2, 3], [4, 5, 6]))",
      -0.328125
    ],
    [
      "def mod_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\nprint(mod_division([1, 2, 3], [3, 4, 5]))",
      -0.336181640625
    ],
    [
      "def modulo_division(numbers_list1, numbers_list2):\n    return list(map(lambda x: x % y, numbers_list1, numbers_list2))\n\n\nprint(modulo_division([1, 2, 3, 4], [5, 6, 7, 8]))",
      -0.40771484375
    ],
    [
      "def modulo_division(list1, list2):\n    return map(lambda x: x % y, list1, list2)\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3, 4], [2, 3, 4, 5]))",
      -0.427001953125
    ],
    [
      "def mod_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(mod_division([1, 2, 3], [2, 3, 4]))\n    print(mod_division([1, 2, 3], [1, 2, 3]))",
      -0.47021484375
    ],
    [
      "def modulo_division(a, b):\n    return map(lambda x: x % b, a)\n\n\nprint(modulo_division([1, 2, 3], [4, 5, 6]))",
      -0.52587890625
    ],
    [
      "def modulo_division(l1, l2):\n    return list(map(lambda x: x % y, l1, l2))\n\n\nprint(modulo_division([1, 2, 3], [4, 5, 6]))\nprint(modulo_division([1, 2, 3], [4, 5, 6, 7]))",
      -0.662109375
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3, 4], [2, 4, 6, 8]))",
      -0.8349609375
    ],
    [
      "def mod_division(a, b):\n    return [x % y for x, y in zip(a, b)]\n\n\nif __name__ == \"__main__\":\n    print(mod_division([1, 2, 3], [2, 4, 6]))",
      -0.85693359375
    ],
    [
      "def modulo_division(a, b):\n    return [x % y for x, y in zip(a, b)]\n\n\nprint(modulo_division([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6]))",
      -0.85693359375
    ],
    [
      "def modulo_division(a, b):\n    return list(map(lambda x: x % b, a))\n\nprint(modulo_division([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.85693359375
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))",
      -0.857421875
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nprint(modulo_division([1, 2, 3], [4, 5, 6]))",
      -0.85791015625
    ],
    [
      "def mod_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nprint(mod_division([1, 2, 3, 4], [2, 4, 6, 8]))",
      -0.85791015625
    ],
    [
      "def mod(a,b):\n    return sum(map(lambda x:x%b, a))\n\nprint(mod([1,2,3,4], [5,6,7,8]))\nprint(mod([1,2,3,4], [6,7,8,9]))\nprint(mod([1,2,3,4], [4,5,6,7]))\nprint(mod([1,2,3,4], [5,6,7,8]))\nprint(mod([1,2,3,4], [6,7,8,9]))\nprint(mod([1,2,3,4], [7,8,9,0]))\nprint(mod([1,2,3,4], [8,9,0,0]))",
      -0.85791015625
    ],
    [
      "def modulo_division(a, b):\n    return map(lambda x: x % b, a)\n\n\nprint(modulo_division([3, 4, 5], [2, 3, 1]))",
      -0.85791015625
    ],
    [
      "def modulo_division(a,b):\n    return map(lambda x: x%b, a)\n\nprint(modulo_division([1,2,3,4,5],[2,4,6,8,10]))",
      -0.85791015625
    ],
    [
      "def moddivide(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(moddivide([1, 2, 3], [4, 5, 6]))",
      -0.86083984375
    ],
    [
      "def modulo_division(numbers1, numbers2):\n    return [x % y for x, y in zip(numbers1, numbers2)]\n\n\nprint(modulo_division([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))",
      -0.86083984375
    ],
    [
      "def modulo_division(list1, list2):\n    list1 = list(map(lambda x: x % y, list1))\n    list2 = list(map(lambda x: x % y, list2))\n    return list1, list2\n\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nprint(modulo_division(list1, list2))",
      -0.86083984375
    ],
    [
      "def mod_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))",
      -0.888671875
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\nprint(modulo_division([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))",
      -0.97412109375
    ],
    [
      "def mod_div(a, b):\n    return map(lambda x,y: x%y, a, b)\n\nprint(mod_div([1, 2, 3, 4], [3, 4, 5, 6]))\nprint(mod_div([1, 2, 3, 4], [2, 4, 6, 8]))",
      -1.068359375
    ],
    [
      "def modulo_division(list1, list2):\n    return map(lambda x, y: x % y, list1, list2)\n\n\nprint(modulo_division([1, 2, 3], [4, 5, 6]))",
      -1.12109375
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\nprint(modulo_division([1,2,3,4,5], [2,3,4,5]))",
      -1.228515625
    ],
    [
      "def moddivide(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(moddivide([1, 2, 3], [4, 5, 6]))",
      -1.2294921875
    ],
    [
      "def modulo_division(a, b):\n    return map(lambda x: x % b, a)\n\n\nprint(modulo_division(2, 3))",
      -1.5166015625
    ],
    [
      "def moddivision(list1,list2):\n    return map(lambda x: x % y,list1,list2)\n\nprint(moddivision([1,2,3,4,5],[6,7,8,9,10]))",
      -1.5546875
    ],
    [
      "def modulo_division(list1, list2):\n    return map(lambda x, y: x % y, list1, list2)\n\n\nprint(modulo_division([1, 2, 3, 4], [1, 2, 3, 4]))",
      -1.73046875
    ],
    [
      "def mod_div(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\nprint(mod_div([1,2,3,4,5], [2,3,4,5]))",
      -1.7373046875
    ],
    [
      "def mod_div(a, b):\n    return list(map(lambda x: x % b, a))\n\n\nif __name__ == \"__main__\":\n    print(mod_div([1, 2, 3, 4, 5], [2, 4, 6]))",
      -1.9775390625
    ],
    [
      "def modulo_division(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [3, 4, 5, 6, 7]\n    print(modulo_division(list1, list2))",
      -2.318359375
    ],
    [
      "def mod_div(list1, list2):\n    return list(map(lambda x: x % y, list1, list2))\n\n\nprint(mod_div([1, 2, 3, 4], [5, 6, 7, 8]))",
      -2.33984375
    ],
    [
      "def mod_div(list1, list2):\n    return list(map(lambda x: x%list2, list1))\n\n\nif __name__ == '__main__':\n    list1 = [2, 3, 4, 5]\n    list2 = [3, 2, 5, 4]\n    print(mod_div(list1, list2))",
      -2.595703125
    ],
    [
      "def modulo_division(list_1, list_2):\n    return list(map(lambda x: x % y, list_1, list_2))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3, 4, 5], [6, 7, 8, 9]))",
      -3.017578125
    ],
    [
      "def moddiv(a, b):\n    return map(lambda x: x % b, a)\n\n\nif __name__ == \"__main__\":\n    print(moddiv([1, 2, 3], [1, 2, 3]))\n    print(moddiv([1, 2, 3], [1, 2, 3]))",
      -3.19921875
    ],
    [
      "def modulo_division(a, b):\n    return list(map(lambda x: x % b, a))\n\n\nprint(modulo_division([1, 2, 3], [1, 2, 3]))\nprint(modulo_division([1, 2, 3], [4, 5, 6]))",
      -3.70703125
    ],
    [
      "def mod_div(a, b):\n    return list(map(lambda x: x % b, a))\n\n\nprint(mod_div([1, 2, 3], [1, 2, 3]))\nprint(mod_div([1, 2, 3], [1, 2, 3, 4]))\nprint(mod_div([1, 2, 3], [1, 2, 3, 4, 5]))\nprint(mod_div([1, 2, 3], [1, 2, 3, 4, 5, 6, 7]))",
      -4.4296875
    ],
    [
      "def modulo_division(a, b):\n    return list(map(lambda x: x % b, a))\n\n\nif __name__ == \"__main__\":\n    print(modulo_division([1, 2, 3, 4], [2, 4, 6, 8]))",
      -4.515625
    ],
    [
      "def mod_div(a, b):\n    return list(map(lambda x: x % b, a))\n\n\ndef mod_div_lambda(a, b):\n    return list(map(lambda x: x % b, a))\n\n\ndef test():\n    print(mod_div([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]))\n    print(mod_div([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]))\n    print(mod_div([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12], lambda x: x % b))\n    print(mod_div_lambda([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]))\n    print(mod_div_lambda([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12], lambda x: x % b))\n\n\nif __name__ == \"__main__\":\n    test()",
      -5.08984375
    ],
    [
      "def mod_div(l1, l2):\n    return list(map(lambda x: x%l2, l1))\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [2, 5, 8, 11, 12]\n\n    print(mod_div(l1, l2))",
      -5.26171875
    ],
    [
      "def mod_div(lst1, lst2):\n    return map(lambda x: x%sum(lst1), lst2)\n\n\nif __name__ == '__main__':\n    lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    lst2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(mod_div(lst1, lst2))",
      -6.0546875
    ],
    [
      "def modulo_division(lst1, lst2):\n    lst1 = list(map(lambda x: x % x, lst1))\n    lst2 = list(map(lambda x: x % x, lst2))\n    return lst1 + lst2\n\n\nprint(modulo_division([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))",
      -6.1015625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}