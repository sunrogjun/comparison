{
  "problem": {
    "task_id": "MBPP/60",
    "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
    "test_list": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ],
    "challenge_test_list": [],
    "problem_id": 49
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "class Solution:\n    def find_max_len(self, nums):\n        # write your code here\n        if len(nums) == 0:\n            return 0\n        max_len = 0\n        cur_len = 1\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] > 0:\n                cur_len += 1\n            max_len = max(max_len, cur_len)\n        return max_len\n\n\ns = Solution()\nprint(s.find_max_len([0, 1, 2, 3, 4, 5, 6, 7]))",
      1.14453125
    ],
    [
      "def find_max_subsequence(arr):\n    # Write your code here\n    if len(arr) == 1:\n        return 1\n    return max(find_max_subsequence(arr[1:]), find_max_subsequence(arr[:-1]))\n\nprint(find_max_subsequence([1, 2, 3, 4, 5]))\nprint(find_max_subsequence([1, 2, 3, 4, 5, 6]))\nprint(find_max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      0.1300048828125
    ],
    [
      "def max_subsequence(arr):\n    max_length = 0\n    cur_length = 0\n\n    for i in range(len(arr)):\n        if arr[i] > max_length:\n            cur_length = i + 1\n            max_length = arr[i]\n        elif arr[i] == max_length:\n            cur_length += 1\n\n    return cur_length\n\n\narr = [1, 2, 3, 4, 5, 6]\nprint(max_subsequence(arr))",
      0.0374755859375
    ],
    [
      "def max_subsequence_length(array):\n    max_len = 0\n    cur_len = 0\n    for i in range(len(array)):\n        if i == 0:\n            cur_len = array[i]\n            max_len = max(max_len, cur_len)\n        elif array[i] > array[i-1]:\n            cur_len = array[i]\n            max_len = max(max_len, cur_len)\n        else:\n            cur_len = 0\n    return max_len\n\n\nif __name__ == '__main__':\n    array = [3, 2, 5, 4, 8, 7, 1]\n    print(max_subsequence_length(array))",
      -0.041473388671875
    ],
    [
      "def max_sub_seq_diff(nums):\n    max_len = 0\n    prev_len = 0\n    for i in range(len(nums)):\n        max_len = max(max_len, nums[i] - prev_len)\n        prev_len = nums[i]\n    return max_len\n\n\ndef main():\n    print(max_sub_seq_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.09100341796875
    ],
    [
      "class Solution:\n    def find_max_len(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        i = 0\n        max_len = 0\n        while i < len(nums) - 1:\n            max_len = max(max_len, abs(nums[i] - nums[i + 1]))\n            i += 1\n        return max_len",
      -0.1224365234375
    ],
    [
      "def max_sub_seq(arr):\n    if len(arr) == 0:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    res = 0\n    i = 0\n    while i < len(arr):\n        res = max(res, arr[i] - arr[i-1])\n        i += 1\n    return res\n\n\nif __name__ == \"__main__\":\n    print(max_sub_seq([1, 2, 3, 4, 5]))",
      -0.2247314453125
    ],
    [
      "class Solution:\n    def maxSubSequence(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        max_len = 1\n        min_len = 1\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] > 0:\n                max_len = max(max_len, i-min_len+1)\n            min_len = min(min_len, i)\n        return max_len\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxSubSequence([-1, 2, -3, 4, -1, 2, -5, 4, -3]))\n    print(s.maxSubSequence([]))\n    print(s.maxSubSequence([-1, -2, -3, -4, -5, -6, -7, -8]))",
      -0.33984375
    ],
    [
      "def max_len_subsequence(arr):\n    if len(arr) == 0:\n        return 0\n    max_len = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_len:\n            max_len = arr[i] - arr[i-1]\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(max_len_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.556640625
    ],
    [
      "def max_length(arr):\n    n = len(arr)\n    if n <= 1:\n        return n\n    m = [0] * (n + 1)\n    m[0] = 0\n    for i in range(1, n + 1):\n        m[i] = m[i - 1] + arr[i - 1]\n    return max(m)\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(max_length(arr))",
      -0.59814453125
    ],
    [
      "def max_subsequence(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i - 1], arr[i] + dp[i - 2])\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    arr = [4, 2, 3, 7, 1]\n    print(max_subsequence(arr))",
      -0.7060546875
    ],
    [
      "def max_length_subseq_diff_adj(arr):\n    arr.sort()\n    max_length = 0\n    min_length = float('inf')\n    for i in range(len(arr)):\n        if i == 0:\n            min_length = min(arr[0], arr[i])\n        elif arr[i] - min_length > max_length:\n            max_length = arr[i] - min_length\n    return max_length",
      -0.85791015625
    ],
    [
      "def max_subsequence(nums):\n    max_len = 0\n    i = 0\n    j = 0\n    while j < len(nums):\n        if i!= j:\n            max_len = max(max_len, nums[i] - nums[j])\n        i += 1\n        j += 1\n    return max_len\n\n\nprint(max_subsequence([1, 2, 3, 4, 5]))\nprint(max_subsequence([1, 2, 3, 4, 5, 6, 7]))\nprint(max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -0.85791015625
    ],
    [
      "def max_length(arr):\n    if not arr:\n        return 0\n\n    arr.append(0)\n\n    max_len = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            arr[i] += 1\n            max_len = max(max_len, i-1)\n        else:\n            arr[i] = 1\n\n    return max_len\n\nprint(max_length([1,2,3,4,5,6,7,8,9,10,11,12]))",
      -0.85791015625
    ],
    [
      "def max_subsequence(arr):\n    return max(arr, key=lambda x: abs(x - arr[0]))\n\n\nprint(max_subsequence([-2, 0, 2, -1, 4, 5, 1, -3]))",
      -0.85791015625
    ],
    [
      "def max_len_subsequence(arr):\n    # Fill this in.\n    max_len = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_len = arr[i]\n        else:\n            if arr[i] + 1 > arr[i - 1]:\n                max_len = max(max_len, arr[i] + 1)\n            else:\n                max_len = max(max_len, arr[i] - 1)\n    return max_len\n\n\nprint(max_len_subsequence([1, 2, 3, 4, 5, 6, 7, 8]))",
      -0.8583984375
    ],
    [
      "def max_subsequence(arr):\n    # Write your code here\n    arr.sort()\n    max_len = 0\n    start = 0\n    for i in range(len(arr)):\n        if i == 0:\n            start = i\n        if i > 0 and arr[i] - arr[i - 1] > max_len:\n            max_len = arr[i] - arr[i - 1]\n    return max_len\n\n\nprint(max_subsequence([1, 2, 3, 4, 5]))\nprint(max_subsequence([1, 3, 3, 4, 2]))\nprint(max_subsequence([1, 2, 4, 6, 7, 8, 10, 20, 30]))",
      -0.8583984375
    ],
    [
      "def max_subsequence(arr):\n    n = len(arr)\n    if n <= 1:\n        return n\n    ans = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            ans = max(ans, i-1)\n    return ans\n\narr = [1,3,2,4,5]\nprint(max_subsequence(arr))",
      -0.8583984375
    ],
    [
      "def max_length(arr):\n    if not arr:\n        return 0\n    max_len = 0\n    cur_len = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            cur_len += 1\n            max_len = max(max_len, cur_len)\n        else:\n            cur_len = 1\n    return max_len\n\n\nprint(max_length([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))",
      -0.8583984375
    ],
    [
      "def max_subsequence(arr):\n    max_len = 0\n    max_len_prev = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_len_prev = max_len\n        else:\n            max_len_prev = max(arr[i] - arr[i-1], max_len_prev)\n        max_len = max(max_len, max_len_prev)\n    return max_len\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(max_subsequence(arr))",
      -0.8583984375
    ],
    [
      "class Solution:\n    def findMaxSubSequence(self, nums):\n        if len(nums) == 1:\n            return 0\n        else:\n            n = len(nums)\n            dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n            for i in range(n+1):\n                for j in range(n+1):\n                    if i == 0:\n                        dp[i][j] = nums[i]\n                    elif j == 0:\n                        dp[i][j] = dp[i-1][j]\n                    else:\n                        dp[i][j] = max(dp[i-1][j], dp[i][j-1]+nums[i])\n            return dp[n][n]\n\n\ns = Solution()\nprint(s.findMaxSubSequence([2, 3, 4, 5, 6, 7]))",
      -0.8583984375
    ],
    [
      "def max_subsequence(arr):\n    n = len(arr)\n    if n < 2:\n        return n\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = arr[0]\n    dp[0][1] = arr[0]\n\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0], arr[i])\n        dp[i][1] = max(dp[i - 1][1], arr[i] - dp[i - 1][0])\n\n    return max(dp[-1][-1], dp[-1][-1] + dp[-1][-2])\n\n\nif __name__ == '__main__':\n    print(max_subsequence([-2, -2, -2, -2, -2, -2, -2]))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def maxSubsequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        if len(nums) == 1:\n            return 1\n\n        dp = [0] * (len(nums) + 1)\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1] + nums[i - 2], dp[i - 2] + nums[i])\n\n        return dp[-1]",
      -0.8583984375
    ],
    [
      "def max_len_subseq(arr, n):\n    # Fill this in.\n    res = 0\n    if not arr:\n        return res\n    cur_max = 0\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            cur_max += 1\n        else:\n            res = max(res, cur_max)\n            cur_max = 1\n    res = max(res, cur_max)\n    return res\n\n\narr = [1, 2, 4, 5, 6, 7]\nn = len(arr)\nprint(max_len_subseq(arr, n))",
      -0.8583984375
    ],
    [
      "def max_subsequence(arr, n):\n    max_len = 0\n    cur_len = 1\n    for i in range(n):\n        if arr[i] - arr[i-1] > max_len:\n            max_len = arr[i] - arr[i-1]\n            cur_len = 1\n        else:\n            cur_len += 1\n    return max_len, cur_len\n\n\nprint(max_subsequence([1, 3, 2, 4, 5], 3))",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param A : list of integers\n    # @return an integer\n    def maxSubSequence(self, A):\n        n = len(A)\n        if n == 0:\n            return 0\n        if n == 1:\n            return A[0]\n        prev = -1\n        res = -1\n        for i in range(n):\n            if A[i] - prev > res:\n                res = A[i] - prev\n            prev = A[i]\n        return res",
      -0.85888671875
    ],
    [
      "def max_subsequence(arr):\n    arr.sort()\n    n = len(arr)\n    if n <= 1:\n        return n\n\n    max_len = 0\n    max_subseq = []\n\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > max_len:\n            max_len = arr[i] - arr[i-1]\n            max_subseq = [arr[i-1]]\n        else:\n            max_subseq.append(arr[i-1])\n\n    return max(max_subseq)\n\nprint(max_subsequence([-1, -2, -3, 4, -1, -2, 1, 2, -5, 4, -1]))",
      -0.85888671875
    ],
    [
      "class Solution:\n    # @param {integer[]} nums\n    # @return {integer}\n    def find_max_subsequence(self, nums):\n        if len(nums) < 2:\n            return len(nums)\n        i, j = 0, 0\n        max_len = 0\n        while j < len(nums):\n            if nums[i] == nums[j]:\n                i += 1\n                j += 1\n            else:\n                max_len = max(max_len, j - i)\n                i = j\n                j = 0\n        max_len = max(max_len, j - i)\n        return max_len\n\n\nprint(Solution().find_max_subsequence([1, 2, 3, 4, 5]))",
      -0.85888671875
    ],
    [
      "def max_subsequence(arr):\n    arr.append(0)\n    max_length = 0\n    current_length = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_length = 1\n        else:\n            current_length += 1\n        max_length = max(max_length, current_length)\n    return max_length\n\n\nprint(max_subsequence([1, 3, 5, 7, 9, 2]))\nprint(max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -0.85888671875
    ],
    [
      "def max_subsequence(nums):\n    # Fill this in.\n    ans = 0\n    prev = 0\n    for i in range(len(nums)):\n        if i > 0:\n            ans = max(ans, nums[i] - nums[i - 1])\n        prev = max(prev, nums[i])\n    return ans\n\n\nif __name__ == '__main__':\n    print(max_subsequence([-1, -2, 1, -3, 4, -1, 2, 1, -5, 4]))",
      -0.85888671875
    ],
    [
      "def max_length_subsequence(arr):\n    if len(arr) <= 1:\n        return len(arr)\n\n    max_len = 0\n    prev = 0\n    for i in range(len(arr)):\n        if i - prev < max_len:\n            max_len = i - prev\n        else:\n            prev = i\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(max_length_subsequence([1, 3, 5, 7, 9, 1, 2]))\n    print(max_length_subsequence([1, 2, 3, 4, 5, 6, 7]))\n    print(max_length_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -1.08984375
    ],
    [
      "def max_len_subseq(arr):\n    if not arr:\n        return 0\n    curr_max = 0\n    curr_min = float('inf')\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n        if arr[i] < curr_min:\n            curr_min = arr[i]\n        curr_max = max(curr_max, arr[i] - curr_min)\n    return curr_max\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(max_len_subseq(arr))",
      -1.2197265625
    ],
    [
      "def max_len_subsequence_with_diff(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    diff = 0\n    max_len = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > diff:\n            diff = arr[i] - arr[i-1]\n            max_len = i\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(max_len_subsequence_with_diff([2, 1, 2, 3, 4]))",
      -1.248046875
    ],
    [
      "class Solution:\n    def find_max_len_subseq(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        min_diff = float('inf')\n        max_len = 0\n\n        for i in range(len(nums)):\n            if i == 0:\n                min_diff = nums[0]\n                max_len = 1\n            else:\n                if nums[i] - nums[i-1] > min_diff:\n                    max_len = i - 1\n\n            min_diff = min(min_diff, nums[i])\n\n        return max_len\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.find_max_len_subseq([1, 2, 3, 4, 5]))\n    print(sol.find_max_len_subseq([]))",
      -1.6357421875
    ],
    [
      "def max_subsequence(arr):\n    arr.sort()\n    max_len = 0\n    cur_len = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            cur_len = 0\n        else:\n            cur_len += 1\n        max_len = max(max_len, cur_len)\n    return max_len",
      -1.6640625
    ],
    [
      "# Time: O(n^2) Space:O(n^2)\n\ndef max_subsequence(arr):\n    max_len = 0\n    curr_max_len = 0\n\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            curr_max_len += 1\n        else:\n            curr_max_len = 1\n\n        max_len = max(max_len, curr_max_len)\n\n    return max_len\n\n\nprint(max_subsequence([5, 4, 6, 3, 2, 1]))\nprint(max_subsequence([3, 2, 2, 1]))\nprint(max_subsequence([]))\nprint(max_subsequence([5, 3, 4, 5]))",
      -1.7392578125
    ],
    [
      "def max_len_subseq(arr):\n    max_len = 0\n    cur_len = 0\n    for i in range(len(arr)):\n        if i > 0 and arr[i] - arr[i-1] == 1:\n            cur_len += 1\n        else:\n            max_len = max(max_len, cur_len)\n            cur_len = 1\n    return max_len\n\n\n\nprint(max_len_subseq([1,2,3,4,5]))\nprint(max_len_subseq([2,3,1]))\nprint(max_len_subseq([]))",
      -1.7509765625
    ],
    [
      "def max_len_subsequence(arr):\n    max_len = 0\n    max_len_sub = 0\n    prev = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            max_len_sub = max(max_len_sub, i - prev + 1)\n            prev = i\n    max_len_sub = max(max_len_sub, len(arr)-1 - prev + 1)\n    return max_len_sub\n\nprint(max_len_subsequence([1, 2, 3, 4, 5, 6, 7, 8]))",
      -1.927734375
    ],
    [
      "class Solution:\n    def findMaxSubsequence(self, nums: List[int]) -> int:\n        if not nums: return 0\n        dp = [[0 for _ in range(len(nums))] for _ in range(len(nums))]\n        dp[0][0] = nums[0]\n        for i in range(1, len(nums)):\n            dp[i][0] = max(nums[i-1] + dp[i-1][0], nums[i] + dp[i-1][1])\n        return max(dp[-1])",
      -1.9287109375
    ],
    [
      "def max_subsequence(arr):\n    if len(arr) < 2:\n        return len(arr)\n    max_len = 0\n    curr_len = 0\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_len += 1\n        curr_sum += arr[i]\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\n\ndef test():\n    assert max_subsequence([1, 3, 5, 7, 9, 2, 4]) == 4\n    assert max_subsequence([1, 3, 5, 7, 9, 2, 4, 6]) == 6\n\n\ntest()",
      -2.16796875
    ],
    [
      "def maximum_len(arr):\n    if len(arr) < 2:\n        return len(arr)\n\n    arr.sort()\n    n = len(arr)\n    max_len = 0\n    min_len = n\n\n    for i in range(n):\n        if i == 0 or arr[i-1]!= arr[i]:\n            min_len = i\n\n        if i + 1 == n:\n            max_len = max(max_len, min_len - i)\n\n    return max_len\n\n\nprint(maximum_len([-1, -2, -3, -4, -5, -6]))",
      -2.396484375
    ],
    [
      "class Solution:\n    def find_max_subsequence(self, nums: list) -> int:\n        if not nums:\n            return 0\n        l = 0\n        r = len(nums) - 1\n        max_length = 0\n        while l <= r:\n            max_length = max(max_length, (r - l) * (nums[r] - nums[l]))\n            if nums[l] < nums[r]:\n                l += 1\n            else:\n                r -= 1\n        return max_length",
      -2.5
    ],
    [
      "def max_subsequence(arr):\n    if len(arr) < 2:\n        return len(arr)\n    arr.sort()\n    max_len = 0\n    i = 0\n    j = 0\n    while j < len(arr) - 1:\n        if arr[j] - arr[i] > max_len:\n            max_len = arr[j] - arr[i]\n        if arr[j] < arr[i]:\n            i += 1\n        j += 1\n    return max_len\n\n\nprint(max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
      -2.517578125
    ],
    [
      "def max_subsequence(arr):\n    arr = sorted(arr)\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1)\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j])\n    return max(dp[-1])\n\n\nprint(max_subsequence([3, 1, 5, -1, 4, 2, -1, 2, 1]))",
      -2.703125
    ],
    [
      "def max_length(arr, n):\n    # write your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            dp[i] = max(dp[i], dp[j] + arr[i - j])\n    return dp[n]\n\n\nprint(max_length([-1, 1, -2, 3, -4, 5, -1, 2, 1, -5, 4], 5))",
      -2.712890625
    ],
    [
      "def max_subsequence(arr):\n    if not arr:\n        return 0\n    max_len = 0\n    curr_len = 0\n    prev_len = 0\n\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            prev_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n            prev_len = 0\n        curr_len += 1\n\n    max_len = max(max_len, curr_len)\n    return max_len\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(max_subsequence(arr))",
      -2.880859375
    ],
    [
      "def maximum_subsequence(arr):\n    arr.sort()\n    max_len = 0\n    i = 0\n    j = 0\n    while i < len(arr) - 1:\n        if arr[i] + arr[j] > max_len:\n            max_len = arr[i] + arr[j]\n        elif arr[i] + arr[j] == max_len:\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(maximum_subsequence([1, 2, 3, 4, 5, 6, 7]))\n    print(maximum_subsequence([1, 2, 3, 4, 5]))\n    print(maximum_subsequence([]))\n    print(maximum_subsequence([-1, -2, -3, -4, -5, -6]))\n    print(maximum_subsequence([1, 2, 3, 4, 5]))",
      -3.013671875
    ],
    [
      "class Solution:\n    def find_max_len(self, nums: List[int]) -> int:\n        if len(nums) == 1:\n            return 0\n\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n\n        for i in range(1, len(nums)):\n            if i > 0:\n                dp[i] = max(dp[i-1], dp[i] + nums[i])\n\n        return max(dp)\n\n\ns = Solution()\nprint(s.find_max_len([-2, 1, -3, 4, -1, 2, 1, -5, 4]))",
      -3.1015625
    ],
    [
      "def max_subsequence_with_diff(arr):\n    max_len = 0\n    prev = 0\n    for i in range(len(arr)):\n        if i == 0:\n            prev = arr[i]\n            continue\n        if arr[i] - prev > max_len:\n            max_len = arr[i] - prev\n        prev = arr[i]\n    return max_len\n\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 5, 7, 9]\n    print(max_subsequence_with_diff(arr))",
      -3.103515625
    ],
    [
      "def max_length_subsequence(arr):\n    if len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        res = 0\n        curr_max = 0\n        for i in range(1, len(arr)):\n            curr_max = max(curr_max, arr[i] - arr[i-1])\n            res = max(res, curr_max)\n        return res\n\n\narr = [1, -2, 3, -4, 5]\nprint(max_length_subsequence(arr))",
      -3.123046875
    ],
    [
      "def max_subsequence(arr, n):\n    max_len = 0\n    left_idx = 0\n    right_idx = 0\n    while right_idx < n:\n        if arr[right_idx] < arr[right_idx + 1]:\n            left_idx += 1\n            max_len = max(max_len, right_idx - left_idx + 1)\n        else:\n            right_idx += 1\n    return max_len\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(max_subsequence(arr, len(arr)))\n\n\nif __name__ == '__main__':\n    main()",
      -3.150390625
    ],
    [
      "def max_len_of_subsequence(arr):\n    if arr == []:\n        return 0\n    max_len = 0\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_len:\n            max_len = arr[i] - arr[i-1]\n    return max_len\n\n\nif __name__ == \"__main__\":\n    arr = [1, 3, -3, -1, 3, 1, -2, -4, 5]\n    print(max_len_of_subsequence(arr))",
      -3.244140625
    ],
    [
      "class Solution(object):\n    def find_max_subsequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        max_len = 0\n        cur_len = 0\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i-1]:\n                cur_len += 1\n                max_len = max(max_len, cur_len)\n\n        return max_len",
      -3.36328125
    ],
    [
      "def max_len_subseq(arr):\n    max_len = 0\n    max_len_arr = []\n\n    for i in range(len(arr)):\n        if i == 0 or arr[i] == arr[i - 1]:\n            max_len_arr.append(arr[i])\n            continue\n\n        max_len = max(max_len, len(max_len_arr) - 1)\n        max_len_arr.append(arr[i])\n\n    return max(max_len_arr)\n\n\nif __name__ == '__main__':\n    print(max_len_subseq([2, 1, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -3.36328125
    ],
    [
      "def max_sub_seq_with_diff(arr):\n    n = len(arr)\n    max_len = 0\n    diff = 0\n    max_diff = 0\n\n    for i in range(n):\n        if arr[i]!= arr[i-1]:\n            diff = arr[i] - arr[i-1]\n            max_diff = max(max_diff, diff)\n            max_len = max(max_len, i-1)\n        else:\n            max_len = i\n    return max_len, max_diff\n\n\narr = [1, 2, 3, 4, 5]\nprint(max_sub_seq_with_diff(arr))",
      -3.474609375
    ],
    [
      "def find_max_length_with_diff(array):\n    array.sort()\n    max_length = 0\n    index = 0\n    prev_index = 0\n\n    while index < len(array):\n        if index == prev_index:\n            max_length = max(max_length, array[index] - array[prev_index])\n        else:\n            prev_index = index\n\n        index += 1\n\n    return max_length\n\n\narray = [4, 2, 1, 5, 3, 6, 7, 8, 9]\nprint(find_max_length_with_diff(array))",
      -3.728515625
    ],
    [
      "class Solution(object):\n    def maxSubsequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        res = [0] * len(nums)\n        res[0] = nums[0]\n\n        for i in range(1, len(nums)):\n            res[i] = max(res[i-1], nums[i] - res[i-1])\n\n        return res[-1]\n\nif __name__ == '__main__':\n    print Solution().maxSubsequence([-2,1,-3,4,-1,2,1,-5,4])",
      -3.86328125
    ],
    [
      "def max_length_subsequence(arr):\n    max_length = 0\n    arr.sort()\n    for i in range(len(arr) - 1):\n        max_length = max(max_length, arr[i] - arr[i + 1])\n    return max_length\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(max_length_subsequence(arr))",
      -4.1171875
    ],
    [
      "def max_subsequence(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_len = 0\n    curr_len = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            curr_len += 1\n        else:\n            curr_len = 1\n        max_len = max(max_len, curr_len)\n    return max_len\n\n\ndef main():\n    arr = [3, 1, 2, 4, 5, 1, 2, 3, 4, 5]\n    print(max_subsequence(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.26953125
    ],
    [
      "def max_length(arr):\n    if not arr:\n        return 0\n    max_len = 0\n    curr_len = 0\n    for i in range(1, len(arr)):\n        curr_len += arr[i] - arr[i-1]\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\narr = [1, 2, 3, 4, 5, 6]\nprint(max_length(arr))",
      -4.27734375
    ],
    [
      "def max_subsequence(arr):\n    if not arr:\n        return 0\n\n    left = 0\n    right = len(arr) - 1\n\n    max_len = 0\n\n    while left < right:\n        if arr[left] < arr[right]:\n            max_len = max(max_len, right - left + 1)\n            left += 1\n        else:\n            max_len = max(max_len, left - right + 1)\n            right -= 1\n\n    return max_len\n\n\nprint(max_subsequence([4, 2, 7, 3, 1, 8, 5, 6]))\nprint(max_subsequence([4, 2, 7, 3, 1, 8, 5, 6, 7]))",
      -4.37109375
    ],
    [
      "def max_subsequence(arr):\n    l = len(arr)\n    max_len = 0\n    diff = 0\n\n    for i in range(1, l):\n        diff = max(diff, arr[i] - arr[i - 1])\n        max_len = max(max_len, i - diff)\n\n    return max_len\n\n\nprint(max_subsequence([1, -2, 3, 4, -1, 2, 1]))",
      -4.484375
    ],
    [
      "def max_subsequence(arr):\n    if not arr:\n        return 0\n    length = len(arr)\n    dp = [[0] * (length + 1) for _ in range(length + 1)]\n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            if arr[i] < arr[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\n    return dp[-1][-1]",
      -4.8203125
    ],
    [
      "class Solution:\n    def maxSubsequence(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * (n + 1)\n        dp[0] = nums[0]\n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + nums[i - 1], dp[i - 2] + nums[i - 2])\n        return dp[-1]\n\n\ns = Solution()\nprint(s.maxSubsequence([-2, 1, -3, 4, -1, 2, 1, -5, 4]))",
      -4.86328125
    ],
    [
      "def max_subsequence(arr, n):\n    max_len = 0\n    prev_len = 0\n\n    for i in range(n):\n        curr_len = 0\n        for j in range(i, n):\n            curr_len += abs(arr[j] - arr[i])\n        if curr_len > max_len:\n            max_len = curr_len\n            prev_len = i\n    return max_len, prev_len\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    n = len(arr)\n    print(max_subsequence(arr, n))",
      -5.00390625
    ],
    [
      "def find_max_len(arr):\n    # write your code here\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return 1\n\n    dp = [0] * (len(arr) + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, len(arr) + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + arr[i - 1])\n\n    return dp[-1]\n\n\nprint(find_max_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -5.203125
    ],
    [
      "class Solution:\n    # @param A : list of integers\n    # @return an integer\n    def maxSubSeqLen(self, A):\n        if len(A) == 0:\n            return 0\n        if len(A) == 1:\n            return 1\n        max_length = 0\n        current_length = 0\n        current_value = A[0]\n        for i in range(1, len(A)):\n            if A[i] > current_value:\n                current_length += 1\n            else:\n                current_length = max(current_length, current_length + 1)\n            current_value = A[i]\n            max_length = max(max_length, current_length)\n        return max_length",
      -5.33984375
    ],
    [
      "def max_length_subsequence(arr):\n    # write your code here\n    max_length = 0\n    max_len = 0\n    curr_length = 0\n    for i in range(len(arr)):\n        if i == 0:\n            curr_length = 0\n        elif arr[i] - arr[i-1] > 0:\n            curr_length += 1\n        else:\n            max_length = max(max_length, curr_length)\n            curr_length = 0\n    return max(max_length, curr_length)\n\n\nprint(max_length_subsequence([-1, 2, -3, 4, -1, -2]))",
      -5.37890625
    ],
    [
      "def max_length_with_diff(arr):\n    max_length = 0\n    left_index = 0\n    right_index = len(arr) - 1\n    while left_index <= right_index:\n        max_length = max(max_length, arr[left_index] + arr[right_index] - arr[left_index + 1] - arr[right_index - 1])\n        if arr[left_index] + arr[right_index] > arr[left_index + 1] + arr[right_index - 1]:\n            left_index += 1\n        else:\n            right_index -= 1\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(max_length_with_diff([3, 2, 1, 4, 5, 6]))",
      -5.95703125
    ],
    [
      "def max_subsequence(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    diff = [0 for _ in range(n)]\n    diff[0] = arr[0]\n    max_length = 0\n    for i in range(1, n):\n        if i!= n-1:\n            diff[i] = max(diff[i-1], arr[i]-diff[i-1])\n        max_length = max(max_length, i-1)\n    return max_length\n\n\narr = [3, 1, 2, 4, 5]\nprint(max_subsequence(arr))",
      -5.99609375
    ],
    [
      "def max_len_subseq(arr):\n    if not arr:\n        return 0\n    arr.append(arr[0])\n    max_len = 0\n    for i in range(1, len(arr)):\n        max_len = max(max_len, abs(arr[i] - arr[i-1]))\n    return max_len\n\nprint(max_len_subseq([-4, -3, -2, -1, 5, -7, -1, -3, -2, -4, -1]))",
      -6.078125
    ],
    [
      "def max_subsequence(arr):\n    arr.sort()\n    diff = 0\n    max_len = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_len = arr[i]\n        elif i == len(arr) - 1:\n            max_len += arr[i]\n            diff = max_len - arr[i-1]\n        else:\n            max_len = max(max_len, arr[i] + diff)\n            diff = 0\n    return max_len\n\n\narr = [1, 2, 3, 4, 5, 6]\nprint(max_subsequence(arr))",
      -6.45703125
    ],
    [
      "def find_max_len(arr):\n    if len(arr) == 0:\n        return 0\n\n    # dp[i][j] = max_len_of_subsequence\n    dp = [[0 for i in range(len(arr))] for j in range(len(arr))]\n\n    # initialize dp[0][0]\n    for i in range(len(arr)):\n        dp[0][i] = arr[0]\n\n    # initialize dp[0][1]\n    for i in range(1, len(arr)):\n        dp[0][i] = max(dp[0][i - 1], arr[i])\n\n    # initialize dp[1][0]\n    for i in range(1, len(arr)):\n        dp[i][0] = max(dp[i - 1][0], arr[i])\n\n    # initialize dp[1][1]\n    for i in range(1, len(arr)):\n        dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - arr[i])\n\n    return max(dp[-1])\n\n\nprint(find_max_len([-2, -3, -1, -4, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\nprint(find_max_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,",
      -6.984375
    ],
    [
      "class Solution:\n    def find_max_length(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Solution 1\n        # Time: O(n) Space:O(n)\n        if not nums:\n            return 0\n        max_len = 0\n        i = 0\n        j = len(nums) - 1\n        while i < j:\n            if nums[i] + nums[j] > max_len:\n                max_len = nums[i] + nums[j]\n            i += 1\n            j -= 1\n        return max_len\n\n        # Solution 2\n        # Time: O(n) Space:O(n)\n        if not nums:\n            return 0\n        max_len = 0\n        i = 0\n        j = len(nums) - 1\n        while i < j:\n            if nums[i] + nums[j] > max_len:\n                max_len = nums[i] + nums[j]\n            i += 1\n            j -= 1\n        return max_len\n\n        # Solution 3\n        # Time: O(n) Space:O(n)\n        if not nums:\n            return 0\n        max_len = 0\n        i = 0\n        j = len(nums) - 1\n        while i < j:\n            if nums[i] + nums[j] > max_len:\n                max_len = nums[i] + nums[j]\n            i += 1\n            j -= 1\n        return max_len",
      -7.1796875
    ],
    [
      "def find_max_len(arr):\n    max_len = 0\n    current_len = 0\n    previous_len = 0\n    for i in range(len(arr)):\n        if i == 0:\n            previous_len = arr[i]\n            current_len = arr[i]\n        elif i == len(arr) - 1:\n            current_len += arr[i] - previous_len\n        else:\n            current_len += arr[i] - previous_len\n            if current_len > max_len:\n                max_len = current_len\n            previous_len = current_len\n    return max_len\n\n\nprint(find_max_len([3, 2, 1, -1, 4, -2, -3, 5]))",
      -7.2890625
    ],
    [
      "def max_subseq_len(arr):\n    result = 0\n    last_index = 0\n    current_index = 0\n    for i in range(len(arr)):\n        if i == 0:\n            result = max(result, arr[i])\n            continue\n        if arr[i] > arr[i-1]:\n            current_index = i\n        elif arr[i] == arr[i-1]:\n            current_index += 1\n        else:\n            result = max(result, current_index - last_index)\n            last_index = current_index\n            current_index = i\n    return result\n\n\nif __name__ == \"__main__\":\n    print(max_subseq_len([2, 3, 5, 7, 9, 1, 4]))",
      -7.4921875
    ],
    [
      "def max_subsequence(arr):\n    max_length = 0\n    prev = 0\n    for i in range(len(arr)):\n        if arr[i] - prev >= 0:\n            max_length = max(max_length, i - prev)\n        prev = arr[i]\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(max_subsequence([-1, -3, -2, -5, 4, -1, 2, 1, -5, 4]))",
      -7.5234375
    ],
    [
      "def max_subseq_diff(arr):\n    arr_len = len(arr)\n    if arr_len == 0:\n        return 0\n    max_len = 0\n    prev_max_len = 0\n    for i in range(1, arr_len):\n        if arr[i] > arr[i - 1]:\n            max_len = max(max_len, i - prev_max_len)\n            prev_max_len = max_len\n        else:\n            max_len = max(max_len, i - prev_max_len)\n    return max_len\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_subseq_diff(arr))",
      -7.8203125
    ],
    [
      "class Solution(object):\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return 0\n        else:\n            max_length = 0\n            prev_length = 0\n            for i in range(1, len(nums)):\n                if nums[i] > nums[i-1]:\n                    max_length = max(max_length, prev_length)\n                prev_length = i\n            return max_length\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.maxSubSequence([1, 2, 3, 4, 5, 6, 7])\n    print s.maxSubSequence([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    print s.maxSubSequence([2, 3, 4, 5])\n    print s.maxSubSequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    print s.maxSubSequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n    print s.maxSubSequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n    print s.maxSubSequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n    print s.maxSubSequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n    print s.maxSubSequence([1, 2, 3, 4,",
      -8.078125
    ],
    [
      "class Solution:\n    # @param nums, a list of integers\n    # @return an integer\n    def maxSubseq(self, nums):\n        # Write your code here\n        nums.sort()\n        return self.helper(nums)\n\n    def helper(self, nums):\n        if not nums:\n            return 0\n        prev = nums[0]\n        max_len = 0\n        for i in range(1, len(nums)):\n            cur_len = 0\n            if nums[i] - prev > 0:\n                cur_len = 1 + self.helper(nums[i:])\n            max_len = max(max_len, cur_len)\n            prev = nums[i]\n        return max_len\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxSubseq([2, 1, 3, 4, 5, 6, 7]))",
      -8.1328125
    ],
    [
      "def max_subsequence_with_diff(arr):\n    # write your code here\n    arr.sort()\n    i = 0\n    j = 0\n    max_length = 0\n    while i < len(arr) and j < len(arr):\n        if arr[i] + arr[j] > arr[i + 1] + arr[j + 1]:\n            max_length = max(max_length, j - i + 1)\n        else:\n            i += 1\n            j += 1\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(max_subsequence_with_diff([1, 2, 3, 4, 5, 6, 7]))",
      -8.265625
    ],
    [
      "class Solution(object):\n    def findMaxSubseq(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        max_len = 0\n        curr_len = 0\n        for i in range(len(nums)):\n            if i == 0:\n                curr_len = nums[i]\n            else:\n                curr_len = max(nums[i], curr_len + nums[i - 1])\n            max_len = max(max_len, curr_len)\n        return max_len\n\n\ns = Solution()\nprint s.findMaxSubseq([1, 3, 2, 4, 5, 7])",
      -8.3671875
    ],
    [
      "def max_len_subseq(arr):\n    if not arr:\n        return 0\n\n    max_len = 0\n    curr_len = 0\n    max_len_subseq = []\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n        else:\n            curr_len = 0\n\n        max_len_subseq.append(curr_len)\n\n    return max(max_len, curr_len)\n\nprint(max_len_subseq([1, 2, 3, 4, 5]))\nprint(max_len_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_len_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_len_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_len_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,",
      -8.40625
    ],
    [
      "def max_length_with_diff(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_length = 0\n    max_diff = 0\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        if diff > max_diff:\n            max_diff = diff\n            max_length = i\n    return max_length\n\n\nprint(max_length_with_diff([1, 2, 3, 4, 5]))\nprint(max_length_with_diff([1, 1, 2, 2, 2]))\nprint(max_length_with_diff([1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4",
      -8.5
    ],
    [
      "def max_sub_seq(arr):\n    max_len = 0\n    arr_len = len(arr)\n    max_val = arr[0]\n    for i in range(1, arr_len):\n        max_val = max(max_val, arr[i])\n        if max_val + 1 < arr[i]:\n            max_len = i\n    return max_len\n\n\nprint(max_sub_seq([-1, -2, -3, 4, -1, -2, -3, 4, -1, -2, -3, 4, -1, -2, -3, 4]))",
      -8.7109375
    ],
    [
      "def max_subsequence(arr):\n    max_len = 0\n    max_len_current = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_len_current = max(max_len, i - max_len_current)\n        else:\n            max_len_current = i\n        max_len = max(max_len, max_len_current)\n    return max_len\n\nif __name__ == '__main__':\n    print(max_subsequence([1, 2, 3, 4, 5]))",
      -9.078125
    ],
    [
      "def max_subsequence(arr):\n    max_len = 0\n    max_diff = 0\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        if arr[i] > arr[j]:\n            max_diff = max(max_diff, arr[i] - arr[j])\n            i += 1\n        else:\n            max_len = max(max_len, j - i)\n            j -= 1\n    return max_len, max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence([1, 2, 3, 4, 5, 6]) == (3, 0)\n    assert max_subsequence([1, 2, 3, 4, 5, 6, 7, 8]) == (3, 1)\n    assert max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (3, 1)\n    assert max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (7, 1)\n    assert max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == (7, 0)\n    assert max_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == (7, 1)",
      -9.671875
    ],
    [
      "def max_subsequence(arr):\n    n = len(arr)\n    arr.sort()\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = arr[0]\n    for i in range(1, n+1):\n        dp[i][0] = arr[i-1]\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i][j+1] = max(dp[i-1][j+1], arr[i] - arr[j])\n    return dp[n][n]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(max_subsequence(arr))",
      -9.6875
    ],
    [
      "def max_sub_seq_diff(arr):\n    # Write your code here\n    max_len = 0\n    current_len = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_len:\n            max_len = arr[i] - arr[i-1]\n        else:\n            current_len += 1\n    return max_len, current_len\n\n\narr = [3, 2, 5, 2, 6, 4, 5]\nprint(max_sub_seq_diff(arr))",
      -9.7734375
    ],
    [
      "def max_subsequence_with_diff(arr):\n    # write your code here\n    if len(arr) <= 1:\n        return 0\n    dp = [[0] * (len(arr) + 1) for _ in range(len(arr))]\n    dp[0][0] = arr[0]\n    for i in range(1, len(arr)):\n        dp[i][0] = max(arr[i - 1], dp[i - 1][0] + arr[i])\n    for i in range(len(arr) - 2, -1, -1):\n        for j in range(len(arr) - 1):\n            dp[i][j + 1] = max(dp[i + 1][j], dp[i + 1][j + 1] + arr[j] - arr[j + 1])\n    return dp[0][len(arr) - 1]\n\n\nif __name__ == \"__main__\":\n    print(max_subsequence_with_diff([2, 3, 4, 1, 5, 7, 6, 8, 9, 10]))",
      -9.8984375
    ],
    [
      "class Solution:\n    def findMaxSubseqLen(self, nums: List[int]) -> int:\n        # Fill this in.\n        nums.sort()\n        ans = 0\n        i = 0\n        j = len(nums) - 1\n        while i < j:\n            if nums[i] + nums[j] > 0:\n                ans = max(ans, j - i)\n                j -= 1\n            elif nums[i] + nums[j] < 0:\n                i += 1\n            else:\n                i += 1\n                j -= 1\n        return ans\n\n\nif __name__ == \"__main__\":\n    nums = [1, -2, 3, -1, 4, -2, 1, 2, 5, -3]\n    out = 6\n    res = Solution().findMaxSubseqLen(nums)\n    assert res == out, (res, out)\n\n    nums = [1, -2, 3, -1, 4, -2, 1, 2, 5, -3]\n    out = 1\n    res = Solution().findMaxSubseqLen(nums)\n    assert res == out, (res, out)\n\n    nums = [1, -2, 3, -1, 4, -2, 1, 2, 5, -3]\n    out = 2\n    res = Solution().findMaxSubseqLen(nums)\n    assert res == out, (res, out)\n\n    nums = [1, -2, 3, -1, 4, -2, 1, 2, 5, -3]\n    out = 5\n    res = Solution().findMaxSubseqLen(nums)\n    assert res == out, (res, out)\n\n    nums = [1, -2, 3, -1, 4, -2, 1, 2, 5, -3]\n    out = 0\n    res = Solution().findMaxSubseqLen(nums)\n    assert res == out, (res, out)\n\n    nums = [1, -2, 3, -1, 4, -2, 1, 2, 5, -3]\n    out = -1\n    res = Solution().findMaxSubseqLen(nums)\n    assert res == out, (res,",
      -9.9609375
    ],
    [
      "def find_max_length(arr, n):\n    if n == 0:\n        return 0\n    max_length = 0\n    max_length_2 = 0\n    for i in range(n):\n        if i == 0:\n            max_length = 0\n            max_length_2 = 0\n        else:\n            max_length = max(max_length, arr[i] - arr[i - 1])\n            max_length_2 = max(max_length_2, arr[i] - arr[i - 2])\n    return max(max_length, max_length_2)\n\n\nprint(find_max_length([3, 2, 6, 1, 5, 4], 3))\nprint(find_max_length([3, 2, 6, 1, 5, 4], 5))",
      -10.0546875
    ],
    [
      "class Solution:\n    def findMaxSubsequence(self, nums):\n        max_length = 0\n        current_length = 0\n        prev_length = 0\n\n        for i in range(len(nums)):\n            if i == 0:\n                prev_length = current_length\n                current_length = nums[i]\n            elif i == len(nums) - 1:\n                current_length += nums[i]\n            else:\n                current_length = max(current_length, nums[i] - prev_length)\n                prev_length = current_length\n            max_length = max(max_length, current_length)\n\n        return max_length\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findMaxSubsequence([-1, -3, 4, -1, -2, 1, 5, -3]))\n    print(sol.findMaxSubsequence([-1, 1, 2, 3]))\n    print(sol.findMaxSubsequence([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\n    print(sol.findMaxSubsequence([1, 2, 3, 4, 5]))",
      -10.5625
    ],
    [
      "def max_sub_seq(arr):\n    n = len(arr)\n    if n < 2:\n        return n\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    dp[0][0] = arr[0]\n    for i in range(1, n+1):\n        dp[i][0] = max(dp[i-1][0], arr[i-1] - dp[i-2][0])\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = max(dp[i-1][j], dp[i-2][j] + arr[i-1] - arr[i-2])\n    return dp[n][n]\n\n\nif __name__ == \"__main__\":\n    arr = [1, -1, 2, 3, 4, -1, -2]\n    print(max_sub_seq(arr))",
      -11.15625
    ],
    [
      "def max_len_subseq(arr,n):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        return 2\n    if n == 1:\n        return max(arr[0],arr[1])\n    if n == 2:\n        return max(arr[0],arr[1],arr[2])\n\n    max_len = 0\n    max_len_subseq_1 = max_len_subseq(arr[1:],n-1)\n    max_len_subseq_2 = max_len_subseq(arr[:-1],n-1)\n    max_len_subseq = max(max_len_subseq_1,max_len_subseq_2)\n    return max_len_subseq\n\nif __name__ == \"__main__\":\n    print(max_len_subseq([1,2,3,4,5,6,7],8))",
      -12.6640625
    ],
    [
      "class Solution:\n    def maxSubseqLen(self, nums):\n        if not nums:\n            return 0\n\n        dp = [0] * (len(nums) + 1)\n\n        dp[0] = nums[0]\n        for i in range(1, len(nums)):\n            dp[i] = max(dp[i - 1] + nums[i], dp[i - 1] - nums[i])\n\n        return max(dp)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.maxSubseqLen([1, 3, 4, 5, 6]) == 5\n    assert sol.maxSubseqLen([1, 2, 3, 4, 5]) == 5\n    assert sol.maxSubseqLen([1]) == 1\n    assert sol.maxSubseqLen([-1]) == 0",
      -12.828125
    ],
    [
      "def max_subsequence(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    curr_max = 0\n    curr_min = float(\"inf\")\n    for i in range(1, len(arr)):\n        if arr[i] > curr_min:\n            curr_max = max(curr_max, i - curr_min)\n            curr_min = arr[i]\n        else:\n            curr_max = curr_max + 1\n    return max(curr_max, len(arr) - curr_min)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(max_subsequence(arr))\n\n    arr = [1, 2, 3, 4, 5, 6]\n    print(max_subsequence(arr))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(max_subsequence(arr))",
      -14.3984375
    ],
    [
      "class Solution:\n    def maxSubSeq(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        prev = 0\n        cur = 0\n        ans = 0\n        for i in range(len(nums)):\n            cur = max(prev, cur + nums[i])\n            prev = cur\n            ans = max(ans, i - prev)\n        return ans\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.maxSubSeq([]) == 0\n    assert s.maxSubSeq([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert s.maxSubSeq([1, 2, 3, 4, 5, 6, 7, 8]) == 6\n    assert s.maxSubSeq([1, 2, 3, 4, 5, 6, 7]) == 6\n    assert s.maxSubSeq([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9",
      -14.8046875
    ],
    [
      "def max_sub_len(arr):\n    max_len = 0\n    max_diff = 0\n    current_len = 0\n    current_diff = 0\n\n    for i in range(len(arr)):\n        current_len += 1\n        if arr[i] > max_diff:\n            max_diff = arr[i]\n\n        if current_len == 0:\n            current_diff = 0\n        else:\n            current_diff = arr[i] - current_diff\n\n        max_len = max(max_len, current_len)\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_sub_len([1, 2, 3, 4, 5, 6, 7]) == 5\n    assert max_sub_len([3, 2, 1]) == 2\n    assert max_sub_len([1, 2, 3, 4, 5, 6, 7]) == 5",
      -15.1015625
    ],
    [
      "def max_subsequence(nums):\n    if not nums:\n        return 0\n    stack = []\n    stack_max_len = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            stack.pop()\n        else:\n            stack.append(nums[i])\n        while len(stack) > 0:\n            stack_max_len = max(stack_max_len, i - stack[-1] + 1)\n            stack.pop()\n    return stack_max_len\n\n\nif __name__ == \"__main__\":\n    assert max_subsequence([1, 1, 0, 0, 0]) == 3\n    assert max_subsequence([1, 1, 1, 1, 1, 1, 1]) == 4\n    assert max_subsequence([1, 1, 1, 1, 1, 1, 1]) == 4\n    assert max_subsequence([1, 1, 1, 1, 1, 1, 1, 1]) == 4",
      -15.7890625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}