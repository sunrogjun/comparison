{
  "problem": {
    "task_id": "MBPP/312",
    "prompt": "Write a function to find the volume of a cone.",
    "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
    "test_list": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ],
    "challenge_test_list": [],
    "problem_id": 301
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def cone_volume(radius):\n    return 2 * radius * radius\n\nprint(cone_volume(3))",
      3.20703125
    ],
    [
      "def volume_cone(radius):\n    return 3.14159 * radius ** 2\n\n\nprint(volume_cone(3))",
      2.384765625
    ],
    [
      "def cone_volume(r, h):\n    return 3.14 * r * h\n\n\nprint(cone_volume(2, 3))",
      2.224609375
    ],
    [
      "def volume(r):\n    return 3.14159 * r**3\n\nprint(volume(3))\nprint(volume(5))",
      2.224609375
    ],
    [
      "def volume(r, theta):\n    return r * r * r * (theta - r / 2)\n\nprint(volume(1, 0))",
      2.072265625
    ],
    [
      "def volume(radius):\n    return 3.14159 * radius ** 2\n\n\nprint(volume(3))",
      1.595703125
    ],
    [
      "def volume(r, h):\n    return 3.1415926 * r * h\n\nprint(volume(r=1, h=1))",
      1.5947265625
    ],
    [
      "def volume_cone(radius, height):\n    return (4/3)*(radius**3)*height\n\n\nprint(volume_cone(2, 6))",
      1.5146484375
    ],
    [
      "def cone_volume(r, h):\n    return 2*r*h\n\n\nprint(cone_volume(1, 2))",
      1.44140625
    ],
    [
      "def volume(l):\n    return l * l * l\n\nprint(volume(5))",
      1.4404296875
    ],
    [
      "def volume(a, b, c):\n    return a*b*c\n\nprint(volume(3, 5, 7))\nprint(volume(2, 3, 4))",
      1.1337890625
    ],
    [
      "def cone_volume(r):\n    return (4/3)*(r**3)\n\nprint(cone_volume(5))",
      1.0634765625
    ],
    [
      "def cone_volume(r, h):\n    return 2 * r * h\n\n\nprint(cone_volume(4, 4))",
      0.82275390625
    ],
    [
      "from math import pi\n\ndef cone_volume(a, b, c):\n    return a*b*c\n\nprint(cone_volume(1,2,3))\nprint(cone_volume(1,2,-2))\nprint(cone_volume(1,2,-2.3))\nprint(cone_volume(1,2,-3.5))\nprint(cone_volume(1,2,-3.5))",
      0.61767578125
    ],
    [
      "import math\n\n\ndef cone_volume(r, h):\n    return math.pi * r * h\n\n\nprint(cone_volume(1, 1))\nprint(cone_volume(1, 2))\nprint(cone_volume(1, 3))\nprint(cone_volume(1, 4))\nprint(cone_volume(1, 5))\nprint(cone_volume(1, 6))\nprint(cone_volume(1, 7))\nprint(cone_volume(1, 8))\nprint(cone_volume(1, 9))\nprint(cone_volume(2, 1))\nprint(cone_volume(2, 2))\nprint(cone_volume(2, 3))\nprint(cone_volume(2, 4))\nprint(cone_volume(2, 5))\nprint(cone_volume(2, 6))\nprint(cone_volume(2, 7))\nprint(cone_volume(2, 8))\nprint(cone_volume(3, 1))\nprint(cone_volume(3, 2))\nprint(cone_volume(3, 3))\nprint(cone_volume(3, 4))\nprint(cone_volume(3, 5))\nprint(cone_volume(3, 6))\nprint(cone_volume(3, 7))\nprint(cone_volume(3, 8))\nprint(cone_volume(4, 1))\nprint(cone_volume(4, 2))\nprint(cone_volume(4, 3))\nprint(cone_volume(4, 4))\nprint(cone_volume(4, 5))\nprint(cone_volume(4, 6))\nprint(cone_volume(4, 7))\nprint(cone_volume(4, 8))\nprint(cone_volume(5, 1))\nprint(cone_volume(5, 2))\nprint(cone_volume(5, 3))\nprint(cone_volume(5, 4))\nprint(cone_volume(5, 5))\nprint(cone_volume(5, 6))\nprint(cone_volume(5, 7))\nprint",
      0.525390625
    ],
    [
      "def volume(n):\n    return n**3\n\n\nprint(volume(3))\nprint(volume(4))\nprint(volume(5))\nprint(volume(6))",
      0.2587890625
    ],
    [
      "def volume(r):\n    return 3.14 * (r * r)\n\n\nprint(volume(4))\nprint(volume(2))\nprint(volume(1))",
      0.09747314453125
    ],
    [
      "def cone_volume(radius):\n    return 4 * 3.14 * radius**3\n\nprint(cone_volume(3))",
      0.0352783203125
    ],
    [
      "def cone_volume(a, b):\n    return a * b\n\nprint(cone_volume(1, 2))\nprint(cone_volume(1, 1))",
      -0.039215087890625
    ],
    [
      "def volume(r, theta):\n    return r * (np.cos(theta)) * (np.sin(theta))",
      -0.260498046875
    ],
    [
      "def volume(a, b, c):\n    return a * b * c",
      -0.46142578125
    ],
    [
      "def volume(a, b):\n    return (a * b) / 2\n\n\nprint(volume(2, 3))",
      -0.57080078125
    ],
    [
      "def volume_cone(radius):\n    return 3.14 * (radius ** 2)\n\n\nprint(volume_cone(3))",
      -0.576171875
    ],
    [
      "def get_volume(a, b):\n    return a * b\n\n\nprint(get_volume(3, 4))",
      -0.642578125
    ],
    [
      "def cone_volume(a, b, c):\n    return a * b * c",
      -0.6533203125
    ],
    [
      "def volume(n):\n    return n**3\n\n\nprint(volume(6))",
      -0.65380859375
    ],
    [
      "def volume(a,b,c):\n    return a*b*c\n\nprint(volume(2,5,10))",
      -0.654296875
    ],
    [
      "def cone_volume(radius):\n    return 3.14 * radius ** 2",
      -0.85595703125
    ],
    [
      "def volume(r, theta):\n    return 3.14159*r*r*theta\n\nr = float(input(\"Enter radius of cone: \"))\ntheta = float(input(\"Enter angle of cone: \"))\nprint(\"Volume of cone: \", volume(r, theta))",
      -0.85693359375
    ],
    [
      "def volume(cone):\n    return (4 / 3) * (cone ** 3)",
      -0.85693359375
    ],
    [
      "def volume(r, h):\n    return (4/3)*(r*h)\n\nprint(volume(2,2))",
      -0.85693359375
    ],
    [
      "def cone_volume(x, y, z):\n    return (x * y * z) / 2\n\n\nprint(cone_volume(5, 5, 5))",
      -0.85791015625
    ],
    [
      "def volume_cone(r, h, p):\n    return r * h * p\n\n\nprint(volume_cone(2, 2, 3))\nprint(volume_cone(4, 2, 3))\nprint(volume_cone(5, 2, 3))\nprint(volume_cone(6, 2, 3))\nprint(volume_cone(7, 2, 3))\nprint(volume_cone(8, 2, 3))",
      -0.85791015625
    ],
    [
      "def volume_cone(radius):\n    return 3.14 * radius * radius\n\n\nprint(volume_cone(3))\nprint(volume_cone(5))\nprint(volume_cone(10))",
      -0.85791015625
    ],
    [
      "def volume_cone(n):\n    if n == 1:\n        return 1\n    return n * (n + 1) / 2\n\n\nif __name__ == \"__main__\":\n    print(volume_cone(3))",
      -0.85791015625
    ],
    [
      "def cone_volume(r, h):\n    return 3.14 * (r * r + h * h)\n\nif __name__ == '__main__':\n    print(cone_volume(5, 3))\n    print(cone_volume(5, 5))",
      -0.85791015625
    ],
    [
      "def cone_volume(r):\n    return (4/3)*(r**3)\n\nprint(cone_volume(3))\nprint(cone_volume(5))\nprint(cone_volume(7))",
      -0.85791015625
    ],
    [
      "def cone(r, h):\n    return r * h\n\nprint(cone(3, 2))\nprint(cone(2, 3))\nprint(cone(4, 5))",
      -0.85791015625
    ],
    [
      "def cone_volume(radius):\n\treturn 3.14 * radius ** 2\n\ndef main():\n\tprint(cone_volume(5))\n\tprint(cone_volume(10))\n\tprint(cone_volume(15))\n\nif __name__ == '__main__':\n\tmain()",
      -0.8583984375
    ],
    [
      "def cone_volume(a, b, c):\n    return (a * b * c)\n\nprint(cone_volume(1, 2, 3))\nprint(cone_volume(2, 3, 1))",
      -0.8583984375
    ],
    [
      "def volume(r, h):\n    return r * h",
      -0.8583984375
    ],
    [
      "def cone_volume(r, h):\n    return (4/3) * r * h",
      -0.92333984375
    ],
    [
      "def volume_cone(length, width, height):\n    return (length * width * height)",
      -1.00390625
    ],
    [
      "def cone_volume(a,b,c):\n    return a*b*c\n\n\nprint(cone_volume(3,3,3))",
      -1.0625
    ],
    [
      "def volume(r, h, a):\n    return r * h * a\n\n\nif __name__ == \"__main__\":\n    print(volume(5, 2, 3))",
      -1.333984375
    ],
    [
      "def volume_cone(r, theta):\n    return r * theta\n\n\nprint(volume_cone(3, 1))",
      -1.5556640625
    ],
    [
      "import math\n\ndef cone(r, h):\n    return r * h\n\nprint(cone(5, 1.5))\nprint(cone(5, 2))\nprint(cone(3, 3))\nprint(cone(5, 2.5))\nprint(cone(5, 4.5))\nprint(cone(6, 6))\nprint(cone(6, 4))\nprint(cone(6, 5))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6,",
      -1.8828125
    ],
    [
      "def volume(r, h):\n    return r * h\n\nprint(volume(1, 3))\nprint(volume(3, 2))\nprint(volume(2, 1))",
      -1.91015625
    ],
    [
      "def volume_cone(length, width):\n    return length * width\n\nif __name__ == \"__main__\":\n    print(volume_cone(3, 5))",
      -1.95703125
    ],
    [
      "def volume(r, h):\n\treturn r * h\n\nprint(volume(1, 2))",
      -2.29296875
    ],
    [
      "def volume(r,h):\n    return (r*r+h*h)**(1/2)\n\nprint(volume(5,4))\nprint(volume(3,3))",
      -2.654296875
    ],
    [
      "def cone_volume(height, width):\n    return height * width\n\n\nif __name__ == \"__main__\":\n    height = float(input(\"Enter height: \"))\n    width = float(input(\"Enter width: \"))\n\n    print(f\"Volume of cone is {cone_volume(height, width)}\")",
      -2.67578125
    ],
    [
      "def get_volume(a, b, c):\n    return a * b * c\n\n\nprint(get_volume(1, 2, 3))",
      -2.853515625
    ],
    [
      "def volume_cone(length, width, height, volume):\n    return length * width * height * volume\n\n\nprint(volume_cone(10, 10, 10, 5))\nprint(volume_cone(10, 10, 10, 5))\nprint(volume_cone(10, 10, 10, 5))",
      -2.859375
    ],
    [
      "def volume_cone(a, b, c):\n    return a * b * c\n\n\na = float(input('a: '))\nb = float(input('b: '))\nc = float(input('c: '))\n\nprint(f'volume of cone = {volume_cone(a, b, c)}')",
      -2.916015625
    ],
    [
      "def volume(radius, height):\n    return 2 * radius * height\n\n\nprint(volume(3, 2))\nprint(volume(3, 4))\nprint(volume(5, 4))",
      -3.490234375
    ],
    [
      "def cone_volume(r, h, b):\n    return r*h*b\n\nprint(cone_volume(2, 3, 3))",
      -3.529296875
    ],
    [
      "def cone_volume(length, width, height):\n    return (length * width * height)\n\n\nprint(cone_volume(3, 4, 5))",
      -3.5546875
    ],
    [
      "def cone_volume(r, theta):\n    return r * theta\n\n\nr = float(input(\"Radius of cone: \"))\ntheta = float(input(\"Theta of cone: \"))\nprint(cone_volume(r, theta))",
      -3.611328125
    ],
    [
      "def get_volume(radius):\n    return 4/3 * (radius**3)\n\nprint(get_volume(4))\nprint(get_volume(2))\nprint(get_volume(3))\nprint(get_volume(5))",
      -3.705078125
    ],
    [
      "def volume(n):\n    return n * (n + 1) / 2\n\nprint(volume(3))\nprint(volume(4))\nprint(volume(5))",
      -3.7265625
    ],
    [
      "def cone(length, width):\n    return length * width\n\nprint(cone(3, 2))\nprint(cone(4, 3))",
      -3.814453125
    ],
    [
      "def volume(r, h):\n    return r * h\n\ndef test_volume():\n    assert volume(1,1) == 1\n    assert volume(1,2) == 1\n    assert volume(1,3) == 2\n    assert volume(1,4) == 4\n    assert volume(2,1) == 2\n    assert volume(2,2) == 3\n    assert volume(2,3) == 6\n    assert volume(2,4) == 9\n    assert volume(3,1) == 9\n    assert volume(3,2) == 16\n    assert volume(3,3) == 36\n    assert volume(4,1) == 36\n    assert volume(4,2) == 36\n    assert volume(4,3) == 36\n    assert volume(4,4) == 36\n    assert volume(5,1) == 36\n    assert volume(5,2) == 36\n    assert volume(5,3) == 36\n    assert volume(5,4) == 36\n    assert volume(6,1) == 36\n    assert volume(6,2) == 36\n    assert volume(6,3) == 36\n    assert volume(6,4) == 36\n    assert volume(7,1) == 36\n    assert volume(7,2) == 36\n    assert volume(7,3) == 36\n    assert volume(7,4) == 36",
      -3.865234375
    ],
    [
      "def cone_volume(r, theta):\n    return (r * r) * (r * r) * (r * r) * (theta * theta) * (theta * theta)\n\n\nprint(cone_volume(3, 3))",
      -3.943359375
    ],
    [
      "def cone(r, theta):\n    return r * r * theta * theta / 6\n\n\nprint(cone(3, 4))\nprint(cone(4, 2))",
      -4.13671875
    ],
    [
      "def cone_volume(r, theta, phi):\n    return (4/3)*(r*r*r)\n\nprint(cone_volume(1, 0, 0))",
      -4.16796875
    ],
    [
      "def cone_volume(l, h):\n    return (l * h) / 2\n\ndef main():\n    print(cone_volume(5, 6))\n\nif __name__ == \"__main__\":\n    main()",
      -4.7109375
    ],
    [
      "def volume(a, b, c):\n    return a * b * c\n\nprint(volume(2, 3, 4))",
      -5.05859375
    ],
    [
      "def volume(a,b,c):\n    return a*b*c\n\nprint(volume(10,10,10))\nprint(volume(10,10,5))\nprint(volume(10,10,5.5))\nprint(volume(10,10,5.5,5))\nprint(volume(10,10,5,5.5,5.5,5.5,5.5))",
      -5.09765625
    ],
    [
      "def cone_volume(r, h, a):\n\tvolume = a * r * r * r\n\treturn volume\n\nprint(cone_volume(3, 2, 8))\nprint(cone_volume(3, 2, 9))\nprint(cone_volume(3, 2, 10))",
      -5.140625
    ],
    [
      "def cone_volume(cone_radius):\n    return 2 * cone_radius**3\n\nprint(cone_volume(5))",
      -5.1640625
    ],
    [
      "def volume(r, theta):\n    return r * theta * (theta - r)\n\nr = float(input(\"Radius of cone: \"))\ntheta = float(input(\"Theta of cone: \"))\nprint(volume(r, theta))",
      -5.33203125
    ],
    [
      "def get_volume(radius):\n    return 4.0 * (3.0 - 2.0 * radius)\n\n\nprint(get_volume(3))\nprint(get_volume(5))",
      -5.4453125
    ],
    [
      "def cone_volume(length, width):\n    volume = length * width\n    return volume\n\n\ndef main():\n    length = float(input(\"Enter the length of the cone: \"))\n    width = float(input(\"Enter the width of the cone: \"))\n    print(\"The volume of a cone is \", cone_volume(length, width))\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.66015625
    ],
    [
      "def volume(x, y, z):\n    return (x ** 2 + y ** 2 + z ** 2) ** (1/2)\n\n\nprint(volume(1, 2, 3))\nprint(volume(3, 4, 5))",
      -6.2421875
    ],
    [
      "def volume(r, theta, phi):\n    return (r**2)*(np.sin(theta)*np.sin(phi))\n\n\nr = float(input(\"r = \"))\ntheta = float(input(\"theta = \"))\nphi = float(input(\"phi = \"))\n\nprint(f\"The volume of a cone is {volume(r, theta, phi)}\")",
      -6.5078125
    ],
    [
      "def cone_volume(r, h):\n    volume = r * h\n    return volume\n\nprint(cone_volume(2, 3))\nprint(cone_volume(5, 5))\nprint(cone_volume(3, 1))\nprint(cone_volume(5, 6))\nprint(cone_volume(4, 2))",
      -6.73828125
    ],
    [
      "def cone_volume(length, width):\n    return length * width\n\nprint(cone_volume(3, 5))\nprint(cone_volume(4, 5))\nprint(cone_volume(6, 5))",
      -6.859375
    ],
    [
      "def volume(length, width):\n    return length * width\n\n\nif __name__ == \"__main__\":\n    print(volume(10, 10))",
      -6.9453125
    ],
    [
      "def volume(length, width):\n    return length * width * length * width\n\nif __name__ == \"__main__\":\n    print(volume(10, 10))",
      -7.07421875
    ],
    [
      "def get_volume(r, h):\n    return (3.14159 * r * h) / 2\n\n\nprint(get_volume(3, 4))\nprint(get_volume(3, 5))\nprint(get_volume(3, 6))",
      -7.12890625
    ],
    [
      "def cone_volume(r,h):\n    return (r*h)\n\nprint(cone_volume(1,1))\nprint(cone_volume(3,3))\nprint(cone_volume(5,5))",
      -7.62890625
    ],
    [
      "from math import pi\n\n\ndef cone_volume(r, h):\n    return (pi * r * h) ** 3\n\n\nif __name__ == '__main__':\n    r = float(input(\"Radius: \"))\n    h = float(input(\"Height: \"))\n    print(\"Volume of cone: {}\".format(cone_volume(r, h)))",
      -7.78125
    ],
    [
      "def cone_volume(cone_length, cone_width):\n    cone_volume = cone_length * cone_width\n    return cone_volume\n\n\nprint(cone_volume(2, 2))\nprint(cone_volume(4, 4))\nprint(cone_volume(4, 4))\nprint(cone_volume(8, 8))\nprint(cone_volume(8, 8))",
      -7.859375
    ],
    [
      "def cone_volume(a, b, c):\n    return (a * b * c) ** (1/3)\n\nprint(cone_volume(1, 2, 3))\nprint(cone_volume(1, 2, 4))\nprint(cone_volume(2, 2, 2))\nprint(cone_volume(2, 2, 4))\nprint(cone_volume(2, 2, 8))",
      -8.0546875
    ],
    [
      "def volume(radius):\n    return 3.14159 * radius * radius\n\n\nprint(volume(4))",
      -8.0625
    ],
    [
      "import math\n\ndef cone_volume(r, theta):\n    return (4/3) * math.pi * (r ** 3) * math.sin(theta)\n\nif __name__ == '__main__':\n    r = float(input())\n    theta = float(input())\n    print(cone_volume(r, theta))",
      -8.0703125
    ],
    [
      "def volume_cone(length, width, height, base):\n    return (length * width * height) / base\n\nprint(volume_cone(1, 1, 1, 2))\nprint(volume_cone(1, 1, 2, 2))\nprint(volume_cone(2, 2, 2, 2))\nprint(volume_cone(2, 2, 2, 3))\nprint(volume_cone(2, 2, 3, 1))\nprint(volume_cone(2, 2, 3, 3))\nprint(volume_cone(2, 2, 3, 4))\nprint(volume_cone(2, 2, 3, 5))\nprint(volume_cone(2, 2, 3, 6))\nprint(volume_cone(2, 2, 3, 7))\nprint(volume_cone(2, 2, 3, 8))\nprint(volume_cone(2, 2, 3, 9))\nprint(volume_cone(2, 2, 3, 10))\nprint(volume_cone(2, 2, 3, 11))\nprint(volume_cone(2, 2, 3, 12))\nprint(volume_cone(2, 2, 3, 13))\nprint(volume_cone(2, 2, 3, 14))\nprint(volume_cone(2, 2, 3, 15))\nprint(volume_cone(2, 2, 3, 16))\nprint(volume_cone(2, 2, 3, 17))\nprint(volume_cone(2, 2, 3, 18))\nprint(volume_cone(2, 2, 3, 19))\nprint(volume_cone(2, 2, 3, 20))\nprint(volume_cone(2, 2, 3, 21))\nprint(volume_cone(2, 2, 3, 22))\nprint(volume_cone(2, 2, 3, 23))\nprint(volume_cone(2, 2, 3, 24))\nprint(volume_cone(2, 2, 3, 25))\nprint(volume_cone(2, 2, 3, 26))\nprint(volume_cone(2, 2, 3, 27))\nprint",
      -8.328125
    ],
    [
      "def cone_volume(r, h):\n    return r * h\n\nprint(cone_volume(r=1, h=1))\nprint(cone_volume(r=1, h=2))\nprint(cone_volume(r=2, h=1))\nprint(cone_volume(r=2, h=2))\nprint(cone_volume(r=3, h=1))\nprint(cone_volume(r=3, h=2))\nprint(cone_volume(r=4, h=1))\nprint(cone_volume(r=4, h=2))\nprint(cone_volume(r=4, h=3))\nprint(cone_volume(r=5, h=1))\nprint(cone_volume(r=5, h=2))\nprint(cone_volume(r=5, h=3))",
      -8.640625
    ],
    [
      "def volume(r, h):\n    return 3.14 * r * h\n\nprint(volume(3, 2))\nprint(volume(2, 3))\nprint(volume(2, 5))\nprint(volume(2, 6))\nprint(volume(3, 4))",
      -9.1796875
    ],
    [
      "def volume(r, h):\n    return r * h\n\n\nif __name__ == \"__main__\":\n    print(volume(1, 1))\n    print(volume(1, 2))\n    print(volume(3, 2))\n    print(volume(2, 3))\n    print(volume(3, 4))",
      -9.2734375
    ],
    [
      "def volume(length, width, height):\n    return length * width * height\n\n\ndef main():\n    length = float(input(\"Length of cone: \"))\n    width = float(input(\"Width of cone: \"))\n    height = float(input(\"Height of cone: \"))\n    print(f\"The volume of the cone is {volume(length, width, height)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      -9.4375
    ],
    [
      "def cone_volume(a, b, c):\n    return (a * b * c) / 4\n\n\nprint(cone_volume(1, 2, 3))",
      -10.171875
    ],
    [
      "def cone_volume(a, b, c):\n    volume = (a * b * c) / 4\n    return volume\n\na = float(input())\nb = float(input())\nc = float(input())\n\nvolume = cone_volume(a, b, c)\nprint(f\"{volume:.3f}\")",
      -10.2890625
    ],
    [
      "def volume_cone(r, theta):\n    return 3.14159 * (r ** 2) * (theta ** 2)\n\n\ndef volume_cone_2(r, theta):\n    return r * theta * r * theta",
      -11.984375
    ],
    [
      "def volume(r, theta):\n    return 3.14159 * r * theta * r * theta\n\nprint(volume(10, 0.5))",
      -12.15625
    ],
    [
      "from math import pi\n\ndef cone_volume(r, h, n):\n    volume = r * h * n\n    return volume\n\nif __name__ == '__main__':\n    print(cone_volume(1, 1, 3))\n    print(cone_volume(1, 1, 5))\n    print(cone_volume(1, 1, 10))\n    print(cone_volume(1, 1, 20))\n    print(cone_volume(1, 1, 30))\n    print(cone_volume(1, 1, 40))\n    print(cone_volume(1, 1, 50))\n    print(cone_volume(1, 1, 60))\n    print(cone_volume(1, 1, 70))\n    print(cone_volume(1, 1, 80))",
      -12.421875
    ],
    [
      "def get_volume(r, theta, phi):\n    return (3 * r * r * r) * (theta * theta * theta) * (phi * phi * phi)\n\n\ndef main():\n    r = float(input(\"r: \"))\n    theta = float(input(\"theta: \"))\n    phi = float(input(\"phi: \"))\n    print(\"Volume of a cone is\", get_volume(r, theta, phi))\n\n\nif __name__ == \"__main__\":\n    main()",
      -13.3671875
    ],
    [
      "def cone_volume(r, theta):\n    return (r**2) * (theta**2)\n\n\ndef test_volume():\n    assert cone_volume(3, 3) == 6\n    assert cone_volume(2, 3) == 6\n    assert cone_volume(3, 4) == 12\n    assert cone_volume(3, 5) == 18\n    assert cone_volume(2, 4) == 20\n    assert cone_volume(4, 3) == 24\n    assert cone_volume(3, 6) == 36\n    assert cone_volume(2, 6) == 38\n    assert cone_volume(4, 6) == 42\n\n\nif __name__ == '__main__':\n    test_volume()",
      -13.546875
    ],
    [
      "def cone_volume(radius):\n    return 3.141592653589793238462643383279502884197169399375105820974944592307816406286224821696\n\nprint(cone_volume(3))",
      -16.515625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}