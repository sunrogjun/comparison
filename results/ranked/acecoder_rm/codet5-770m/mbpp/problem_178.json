{
  "problem": {
    "task_id": "MBPP/189",
    "prompt": "Write a python function to find the first missing positive number.",
    "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
    "test_list": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ],
    "challenge_test_list": [],
    "problem_id": 178
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def first_missing_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    for i in range(1, n+1):\n        if i not in nums:\n            return i\n    return n+1\n\nprint(first_missing_positive([-1,0,1]))\nprint(first_missing_positive([4,-3,2,1]))\nprint(first_missing_positive([1,-1,2,-1]))\nprint(first_missing_positive([1,2,3,4]))\nprint(first_missing_positive([1,2,3,-1,4]))\nprint(first_missing_positive([1,2,3,4,5]))",
      5.109375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= i+1:\n            return i+1\n    return n+1\n\nprint(first_missing_positive([1,2,3,4,5,6,7,8,9]))",
      2.568359375
    ],
    [
      "def first_missing_positive(array):\n    n = len(array)\n    for i in range(1, n+1):\n        if i not in array:\n            return i\n    return n+1\n\nprint(first_missing_positive([3, 2, 1]))",
      2.56640625
    ],
    [
      "def first_missing_positive(nums):\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            return i + 1\n    return len(nums) + 1\n\n\nprint(first_missing_positive([1, 3, 4, -1]))\nprint(first_missing_positive([]))\nprint(first_missing_positive([2, 3, 4, -1]))",
      2.291015625
    ],
    [
      "def firstMissingPositive(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] > 0 and arr[i]!= arr[i-1]:\n            if arr[i] > arr[i-1] + 1:\n                return arr[i-1] + 1\n    return n + 1\n\nprint(firstMissingPositive([4, 3, 2, 1]))",
      2.291015625
    ],
    [
      "def first_missing_positive(arr):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    for i in arr:\n        while i > 0 and i <= len(arr) and arr[i]!= i:\n            arr[arr[i] - 1] = arr[i]\n            i -= 1\n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            return i + 1\n    return len(arr) + 1\n\n\ndef main():\n    arr = [3, 4, 5, 6, 7, 1]\n    print(first_missing_positive(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.462890625
    ],
    [
      "def first_missing_positive(nums):\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            return i+1\n    return len(nums)+1\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([0,1,2,3,4]))\n    print(first_missing_positive([-1,0,1,2,3,4]))",
      1.4404296875
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        while arr[i] > 0 and arr[arr[i]-1] > 0:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i+1\n    return len(arr)+1\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([4,2,1,0]))",
      1.1748046875
    ],
    [
      "def first_missing_positive(arr):\n    # write your code here\n    for i in range(1, len(arr)):\n        if arr[i] <= 0:\n            return i\n    return len(arr)",
      1.158203125
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(1, len(arr)):\n        if arr[i]!= i+1:\n            return i+1\n    return len(arr)+1\n\nprint(first_missing_positive([1, 2, 3, 4]))",
      1.134765625
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(1, n+1):\n        if i not in arr:\n            return i\n    return n",
      0.99365234375
    ],
    [
      "def first_missing_positive(n):\n    for i in range(n):\n        if i == n - 1 or n + i > i + 1:\n            return i + 1\n    return n + 1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive(9))\n    print(first_missing_positive(10))\n    print(first_missing_positive(11))\n    print(first_missing_positive(12))\n    print(first_missing_positive(13))",
      0.912109375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i]>0 and arr[i]<n:\n            if arr[arr[i]-1]>0:\n                return arr[arr[i]-1]+1\n    return n+1\n\n\nif __name__ == '__main__':\n    print(first_missing_positive([7,6,4,3,2,1]))",
      0.611328125
    ],
    [
      "def firstMissingPositive(arr):\n    n = len(arr)\n    for i in range(n+1):\n        if i not in arr:\n            return i\n    return n+1\n\nprint(firstMissingPositive([-1,0,1,2,3,4]))",
      0.521484375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if i < len(arr) and arr[i] > 0:\n            arr[i] = abs(arr[i])\n        else:\n            arr[i] = 0\n    for i in range(n):\n        if arr[i]!= i + 1:\n            return i + 1\n    return n + 1\n\n\nif __name__ == '__main__':\n    arr = [0, 1, 3, 6, 9, 12]\n    print(first_missing_positive(arr))",
      0.37939453125
    ],
    [
      "def first_missing_positive(nums):\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i]!= nums[i-1]+1:\n            return nums[i]\n\n\nprint(first_missing_positive([2, 4, 6, 8, 10, 12, 14, 16, 18]))",
      0.1429443359375
    ],
    [
      "def firstMissingPositive(nums):\n    for i in range(1,len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            return i\n    return len(nums)",
      0.0186920166015625
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0 and arr[i] < len(arr):\n            if arr[arr[i] - 1] == arr[i]:\n                arr[arr[i] - 1] = arr[i]\n            else:\n                arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n\n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            return i + 1\n    return len(arr) + 1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([5, 3, -1, 7, 8, -4, 9, -1]))",
      0.005237579345703125
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i] = 0\n    for i in range(0, n):\n        if arr[i] > n:\n            arr[i] = n\n    for i in range(0, n):\n        if arr[i]!= i + 1:\n            return i + 1\n    return n + 1\n\n\nif __name__ == '__main__':\n    print(first_missing_positive([4, -3, 2, 1]))\n    print(first_missing_positive([2, 1]))\n    print(first_missing_positive([-1, -2, -3, 0, 1]))\n    print(first_missing_positive([1, 2, 3, 4, 5, 6]))\n    print(first_missing_positive([-3, -2, -1]))",
      -0.25732421875
    ],
    [
      "def first_missing_positive(nums):\n    for i in range(1, len(nums) + 1):\n        if i not in nums:\n            return i\n    return len(nums) + 1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([4, 2, 1, 3]))\n    print(first_missing_positive([5, 4, 6, 1]))",
      -0.45947265625
    ],
    [
      "def missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0 and arr[i] < len(arr) and arr[arr[i]-1]!= arr[i]:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n        else:\n            return arr[i]\n\nprint(missing_positive([2,1,4,3]))",
      -0.55078125
    ],
    [
      "def first_missing_positive_number(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < 0 or arr[i] > n:\n            return i + 1\n    return n + 1\n\nif __name__ == \"__main__\":\n    arr = [3,4,-1,1]\n    print(first_missing_positive_number(arr))",
      -0.85595703125
    ],
    [
      "import math\n\ndef missingPositive(arr):\n    count = 0\n    for i in arr:\n        if i > 0 and i <= math.sqrt(len(arr)):\n            count += 1\n    return count + 1\n\narr = list(map(int, input().split()))\nprint(missingPositive(arr))",
      -0.85595703125
    ],
    [
      "def first_missing_positive(arr):\n    return sum(x for x in arr if x > 0)\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().split()))\n    print(first_missing_positive(arr))",
      -0.85693359375
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if i+1 not in arr:\n            return i+1\n\n    return len(arr) + 1\n\nprint(first_missing_positive([4,5,6,7,8]))",
      -0.85693359375
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr):\n            return i + 1\n\n    return len(arr) + 1",
      -0.85791015625
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr):\n            return i\n    return len(arr)\n\nprint(first_missing_positive([-1, 0, 1, 3, 4]))",
      -0.85791015625
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr):\n            arr[i] = 0\n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            return i + 1\n    return len(arr) + 1\n\n\nprint(first_missing_positive([3, 4, -1, 1, 2]))",
      -0.8583984375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i]<0 or arr[i]>n:\n            arr[i]=1\n    for i in range(n):\n        if arr[i]!=i+1:\n            return i+1\n    return n+1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([-2, 1, 3, 4, -1]))\n    print(first_missing_positive([-2, 1, 3, 4, -1, 6, -3, -1, -5]))",
      -0.8583984375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > 0 and arr[i] <= n:\n            if arr[arr[i] - 1]!= arr[i]:\n                return arr[i] - 1\n    return n + 1\n\nprint(first_missing_positive([2,3,4,5,6,7,8,9]))\nprint(first_missing_positive([1,2,3,4,5,6,7,8,9]))\nprint(first_missing_positive([7,6,5,4,3,2,1]))",
      -0.8583984375
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i]<=0 or arr[i]>=len(arr):\n            return i+1\n    return len(arr)+1\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([-2, 0, 3, 4, -1]))",
      -0.8583984375
    ],
    [
      "def first_missing_positive(array):\n    for i in range(len(array)):\n        if array[i] < 0 or array[i] > len(array):\n            return i + 1\n    return len(array) + 1\n\n\nprint(first_missing_positive([3, 1, 0, -1]))\nprint(first_missing_positive([1, 2, 3]))\nprint(first_missing_positive([0, 2, 1]))\nprint(first_missing_positive([-1, -2, -3, -4]))\nprint(first_missing_positive([0, 2, 1, -1]))",
      -0.8583984375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < 0 or arr[i] > n:\n            arr[i] = n + 1\n    for i in range(n):\n        if arr[i]!= i + 1:\n            print(arr[i])\n\n\nfirst_missing_positive([2, 4, -1])",
      -0.8583984375
    ],
    [
      "def first_missing_positive(nums):\n    for i in range(len(nums)):\n        if i > 0 and nums[i] <= len(nums) and nums[i]!= nums[i - 1]:\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n        else:\n            return i + 1\n    return len(nums) + 1\n\n\nif __name__ == \"__main__\":\n    nums = [1, 3, 4, -1]\n    print(first_missing_positive(nums))",
      -0.8583984375
    ],
    [
      "def first_missing_positive(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > 0 and arr[i] < len(arr) and arr[arr[i] - 1]!= arr[i]:\n            return arr[arr[i] - 1] + 1\n    return len(arr) + 1\n\n\nprint(first_missing_positive([1, 2, 3]))\nprint(first_missing_positive([1, -1]))",
      -0.8583984375
    ],
    [
      "def missingPositive(arr):\n    for i in range(len(arr)):\n        if arr[i] <= 0 or arr[i] > len(arr):\n            arr[i] = len(arr) + 1\n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            return i + 1\n    return len(arr) + 1\n\n\nprint(missingPositive([4, 3, 2, 1]))",
      -0.8583984375
    ],
    [
      "def first_missing_positive(nums):\n    n = len(nums)\n    if n == 0:\n        return 1\n    for i in range(1, n+1):\n        if nums[i-1] > 0 and nums[i] < n:\n            nums[i-1] -= 1\n        elif nums[i-1] == 0 and nums[i] < n:\n            nums[i] -= 1\n    for i in range(n):\n        if nums[i]!= i+1:\n            return i+1\n    return n+1",
      -0.8583984375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(0, n):\n        if arr[i] < 0 or arr[i] > n:\n            return i\n    return n + 1\n\n\nif __name__ == \"__main__\":\n    assert first_missing_positive([5, 4, 3, 2, 1]) == 3\n    assert first_missing_positive([3, 2, 1, 0]) == 1\n    assert first_missing_positive([3, 4, 3, 2, 1]) == 5\n    assert first_missing_positive([3, 2, 1]) == 5",
      -0.8583984375
    ],
    [
      "def first_missing_positive(n):\n    # Write your code here\n    for i in range(1,n+1):\n        if (i!= i+1) and (i not in range(1, n+1)):\n            return i\n    return n+1",
      -1.083984375
    ],
    [
      "def first_missing_positive(arr):\n    # Fill this in.\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr):\n            arr[i] = len(arr) + 1\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i+1\n    return len(arr)\n\n\nprint(first_missing_positive([3, 4, 1, 2, -1]))\nprint(first_missing_positive([-1, 2, 3, 4]))\nprint(first_missing_positive([1, 2, 3]))",
      -1.0908203125
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > 0 and arr[i] <= n:\n            arr[i] = abs(arr[i])\n        else:\n            arr[i] = 0\n    for i in range(n):\n        if arr[i]!= i + 1:\n            return i + 1\n    return n + 1\n\n\nprint(first_missing_positive([2, 3, 4, 7]))\nprint(first_missing_positive([7, 9, 6, 4, 3, 1]))\nprint(first_missing_positive([-1, 0, 1, 2, -4, 5]))\nprint(first_missing_positive([-1, -1, -2, -3, -4, -5]))",
      -1.3271484375
    ],
    [
      "def first_missing_positive(nums):\n    missing_num = 0\n    for num in nums:\n        if num <= 0 or num > len(nums):\n            missing_num = num\n\n    return missing_num\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([1, 2, 3]))\n    print(first_missing_positive([1, 2, 4, 5]))\n    print(first_missing_positive([2, 3, 4, 5, 6, 7, 8]))\n    print(first_missing_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(first_missing_positive([2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(first_missing_positive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(first_missing_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(first_missing_positive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(first_missing_positive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))",
      -1.3291015625
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        while arr[i] < 0 or arr[i] > len(arr) or arr[arr[i] - 1] == i:\n            arr[arr[i] - 1] = arr[arr[i] - 1] - 1\n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            return i + 1\n    return len(arr) + 1\n\n\nprint(first_missing_positive([4, 3, 2, 1]))",
      -1.4130859375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(1, n+1):\n        if i not in arr:\n            return i\n\nif __name__ == \"__main__\":\n    arr = [2,3,4,7,11]\n    print(first_missing_positive(arr))",
      -1.4150390625
    ],
    [
      "def first_missing_positive(nums):\n    for i in range(1,len(nums)+1):\n        if nums[i-1]>0 and nums[i]!=i:\n            return i\n    return len(nums)",
      -1.5556640625
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= i+1:\n            arr[i], arr[arr[i]-1] = arr[arr[i]-1], arr[i]\n    for i in range(n):\n        if arr[i]!= i+1:\n            return i+1\n    return n+1\n\n\nprint(first_missing_positive([4, 2, 7, 9, 1]))\nprint(first_missing_positive([0, -1]))\nprint(first_missing_positive([3, -1, 2, 0, 1]))",
      -1.615234375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < 0 or arr[i] > n:\n            arr[i] = n + 1\n\n    for i in range(1, n + 1):\n        if i not in arr:\n            return i\n\n    return n + 1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([2, 3, 4, 6, 7]))\n    print(first_missing_positive([7, 8, 9, 0]))\n    print(first_missing_positive([5, 0, 1, 2, 3]))\n    print(first_missing_positive([7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))",
      -1.6640625
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > 0:\n            continue\n        else:\n            if i == 0:\n                print(\"0\")\n                return 0\n            else:\n                for j in range(i+1, n):\n                    if arr[i] == arr[j]:\n                        arr[i] = 0\n                        break\n                print(arr)\n                return n\n    return n",
      -1.9423828125
    ],
    [
      "def first_missing_positive_number(nums):\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[i]!= i + 1:\n            nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]\n    for i in range(len(nums)):\n        if nums[i] + 1!= i + 1:\n            return i + 1\n    return len(nums) + 1\n\n\nprint(first_missing_positive_number([2, 0, 1, 4]))\nprint(first_missing_positive_number([0, 1]))\nprint(first_missing_positive_number([5, 1, 2]))\nprint(first_missing_positive_number([7, 4, 3, 6, 1, 8, 2, 5, 0]))",
      -2.1015625
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(0,n):\n        if arr[i]<=0:\n            arr[i]=1\n\n    for i in range(0,n):\n        if arr[i]!=i+1:\n            return i+1\n\n    return n+1\n\nprint(first_missing_positive([1,2,0,3,4]))\nprint(first_missing_positive([1,3,2,4]))\nprint(first_missing_positive([4,3,2,1]))\nprint(first_missing_positive([4,3,2,5]))",
      -2.181640625
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if i > 0 and arr[i] > 0 and arr[i] <= len(arr):\n            if arr[arr[i] - 1]!= i + 1:\n                return i + 1\n    return len(arr) + 1\n\n\nif __name__ == '__main__':\n    print(first_missing_positive([1, 2, 3]))\n    print(first_missing_positive([1, 2, 4]))",
      -2.201171875
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] < 1 or arr[i] > len(arr):\n            arr[i] = 0\n\n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            return i + 1\n\n    return len(arr) + 1\n\nprint(first_missing_positive([0, 1, 2, 3, 4]))",
      -2.248046875
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(0, n+1):\n        if i not in arr:\n            return i\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([1,2,3,4,5]))",
      -2.400390625
    ],
    [
      "def firstMissingPositive(arr):\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i]!=0 and arr[i]<=n:\n            if arr[arr[i]-1]!=i:\n                arr[arr[i]-1],arr[i]=arr[i],arr[arr[i]-1]\n            else:\n                arr[arr[i]-1],arr[i]=i,arr[i]\n        else:\n            arr[i]=i\n    for i in range(1,n):\n        if arr[i]!=i:\n            return i\n\n\nprint(firstMissingPositive([3,4,1,2]))",
      -2.40625
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = 0\n    for i in range(n):\n        if i + 1 not in arr:\n            return i + 1\n    return n + 1\n\nif __name__ == \"__main__\":\n    arr = [2, 0, -1]\n    print(first_missing_positive(arr))\n    arr = [0, 1, -2]\n    print(first_missing_positive(arr))",
      -2.603515625
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    i = 0\n    while i < n:\n        if arr[i] == 0:\n            arr[i] = 1\n        else:\n            i += 1\n    for i in range(n):\n        if arr[i]!= i + 1:\n            return i + 1\n    return n + 1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -2.708984375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i] = 1\n    for i in range(1, n + 1):\n        if i not in arr:\n            return i\n    return n + 1\n\n\nprint(first_missing_positive([0, 1, 2, 3, 4]))",
      -2.7890625
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0 and arr[i] < len(arr) and arr[arr[i] - 1]!= arr[i]:\n            return arr[i]\n\n\nif __name__ == \"__main__\":\n    assert first_missing_positive([4, 2, -1]) == 3\n    assert first_missing_positive([3, 2, -1]) == 2\n    assert first_missing_positive([-2, 1, 0, 4]) == 4",
      -3.060546875
    ],
    [
      "def first_missing_positive_number(nums):\n    for i in range(len(nums)):\n        if nums[i] < 0 or nums[i] > len(nums):\n            return nums[i]\n    return len(nums)\n\nprint(first_missing_positive_number([5, 3, -1, 7, 9]))\nprint(first_missing_positive_number([1,2,3,4,5,6,7,8,9,10]))",
      -3.142578125
    ],
    [
      "import unittest\n\n\ndef first_missing_positive(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr):\n            return i + 1\n\n\nclass Test(unittest.TestCase):\n    def test_first_missing_positive(self):\n        arr = [3, 2, 1]\n        self.assertEqual(first_missing_positive(arr), 1)\n\n    def test_first_missing_positive_empty(self):\n        arr = []\n        self.assertEqual(first_missing_positive(arr), 0)\n\n    def test_first_missing_positive_empty_2(self):\n        arr = [-2, -1, 0]\n        self.assertEqual(first_missing_positive(arr), 0)\n\n    def test_first_missing_positive_empty_3(self):\n        arr = []\n        self.assertEqual(first_missing_positive(arr), 2)\n\n\nif __name__ == '__main__':\n    unittest.main()",
      -3.22265625
    ],
    [
      "def first_missing_positive(nums):\n    for i in range(len(nums)):\n        if nums[i] <= 0 or nums[i] > len(nums):\n            nums[i] = 1\n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            return i + 1\n    return len(nums) + 1\n\nprint(first_missing_positive([0, 1, 2, 3, 4]))\nprint(first_missing_positive([1, 2, 3, 4, 5, 6, 7]))\nprint(first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(first_missing_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))",
      -3.2265625
    ],
    [
      "def firstMissingPositive(nums):\n\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[nums[i]-1] == nums[i]:\n            nums[nums[i]-1] = -1\n        else:\n            return nums[i]\n\n    return -1\n\n\nprint(firstMissingPositive([4, 3, 2, 1]))\nprint(firstMissingPositive([3, 4, 2, 1]))\nprint(firstMissingPositive([3, 2, 4, 1]))\nprint(firstMissingPositive([3, 2, 1, 4]))\nprint(firstMissingPositive([4, 3, 2, 1]))",
      -3.380859375
    ],
    [
      "def first_missing_positive(arr):\n    \"\"\"\n    :type arr: list\n    :rtype: int\n    \"\"\"\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr):\n            return i\n\n        if arr[arr[i]-1]!= i:\n            count += 1\n\n    return len(arr) + count\n\n\nif __name__ == '__main__':\n    print(first_missing_positive([1, 2, 3, 4, 5, 6]))",
      -3.431640625
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        while True:\n            if arr[i] > 0:\n                break\n            else:\n                arr[i] = -1\n\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i+1\n    return len(arr)\n\nprint(first_missing_positive([1,2,3,4,5,6]))",
      -3.435546875
    ],
    [
      "def first_missing_positive(arr):\n    i = 0\n    while i < len(arr):\n        if arr[i] < 0 or arr[i] > len(arr):\n            arr[i], arr[len(arr) - 1] = arr[len(arr) - 1], arr[i]\n        else:\n            i += 1\n    for i in range(0, len(arr)):\n        if arr[i]!= i + 1:\n            return i + 1\n    return len(arr) + 1\n\n\nprint(first_missing_positive([-2, 0, 3, 4]))",
      -3.453125
    ],
    [
      "def first_missing_positive(arr):\n    i = 1\n    while i < len(arr):\n        if arr[i] < 0 or arr[i] > len(arr):\n            arr[i], arr[arr[i] - 1] = arr[arr[i] - 1], arr[i]\n        else:\n            i += 1\n    i = 1\n    while i < len(arr):\n        if arr[i]!= i + 1:\n            return i + 1\n        i += 1\n    return len(arr) + 1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([0, 1, 2, 3, 4]))",
      -3.490234375
    ],
    [
      "def first_missing_positive_number(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr) - 1:\n            return i + 1\n\n    return len(arr) + 1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive_number([4, 1, -1]))\n    print(first_missing_positive_number([1, 2, 3]))\n    print(first_missing_positive_number([-2, 0, 1]))",
      -3.546875
    ],
    [
      "def first_missing_positive(arr):\n    # Your code here\n    for i in arr:\n        if i > 0 and i not in arr:\n            return i\n    return len(arr) + 1\n\n\nif __name__ == '__main__':\n    arr = [1, 4, -1, -2, 3, -4, 5, 2]\n    print(first_missing_positive(arr))",
      -4.03515625
    ],
    [
      "import math\n\ndef first_missing_positive(arr):\n    return math.floor(math.sqrt(len(arr)) + 1) - math.floor(len(arr) / 2)\n\nprint(first_missing_positive([1,2,3,4,5,6,7,8,9]))",
      -4.3515625
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= i + 1:\n            return i + 1\n    return n + 1\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(first_missing_positive(arr))",
      -4.51953125
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] <= 0 or i!= arr[i]:\n            arr[i], arr[arr[i]] = arr[arr[i]], arr[i]\n    for i in range(n):\n        if arr[i]!= i + 1:\n            return i + 1\n    return n + 1\n\nprint(first_missing_positive([2,3,4,5]))\nprint(first_missing_positive([4,5,-1,3,2,1]))",
      -4.8359375
    ],
    [
      "def first_missing_positive(arr):\n    '''\n    :type arr: list\n    :rtype: int\n    '''\n    if arr[0]!= 0:\n        return 0\n    for i in range(len(arr)):\n        if arr[i] > 0 and arr[i]!= arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n        else:\n            return i+1\n    return len(arr)+1\n\nif __name__ == '__main__':\n    print(first_missing_positive([1,2,0]))",
      -4.9296875
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i]!= i+1:\n            arr[i], arr[arr[i]-1] = arr[arr[i]-1], arr[i]\n    for i in range(1, n):\n        if arr[i]!= i+1:\n            return i+1\n    return n+1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([7, 0, 3, 11, 1]))",
      -5.0390625
    ],
    [
      "def first_missing_positive(arr):\n    # write your code here\n    for i in range(1, len(arr)):\n        if arr[i] <= 0:\n            arr[i] = 1\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i+1\n    return len(arr)+1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([1, 2, 3, 4, 5]))",
      -5.04296875
    ],
    [
      "def firstMissingPositive(arr):\n    if len(arr) == 0:\n        return 1\n    if arr[0] < 0:\n        return arr[0]\n    i = 0\n    while i < len(arr):\n        if arr[i]!= i + 1:\n            return arr[i]\n        i += 1\n    return arr[-1]\n\nif __name__ == '__main__':\n    print(firstMissingPositive([-2,0,1]))",
      -5.109375
    ],
    [
      "import math\n\n\ndef find_first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > 0 and arr[i] <= n and arr[i]!= i + 1:\n            arr[arr[i] - 1] = -1\n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n    return n + 1\n\n\nif __name__ == '__main__':\n    print(find_first_missing_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17",
      -5.11328125
    ],
    [
      "def first_missing_positive(nums):\n    for num in nums:\n        if num <= 0:\n            continue\n        while num > 0 and num <= len(nums):\n            if num == nums[num-1]:\n                return num\n            else:\n                nums[num], nums[num-1] = nums[num-1], nums[num]\n\n    return len(nums)+1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([2, 3, 4, 0, 1]))\n    print(first_missing_positive([3, 4, 2, 1]))\n    print(first_missing_positive([1, 4, 7, 8, 9]))\n    print(first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 1",
      -5.15625
    ],
    [
      "def first_missing_positive(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n\n    for i in arr:\n        if i < 0:\n            return i\n\n    return len(arr) + 1\n\n\nprint(first_missing_positive([1, 4, -1]))\nprint(first_missing_positive([2, 4, -1]))\nprint(first_missing_positive([4, 2, 1]))",
      -5.18359375
    ],
    [
      "def missing_positive_number(arr):\n    n = len(arr)\n\n    for i in range(n):\n        if i > 0 and arr[i] <= n and arr[i]!= arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n        else:\n            arr[i], arr[i-1] = i+1, i+1\n\n    for i in range(n):\n        if arr[i]!= i+1:\n            return i+1\n    return n+1\n\n\nprint(missing_positive_number([1, 2, 3, 4]))\nprint(missing_positive_number([1, 2, 3, 5]))",
      -5.3046875
    ],
    [
      "def first_missing_positive(nums):\n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            continue\n        else:\n            if nums[i] == i+1:\n                return i+1\n\n    return len(nums) + 1\n\n\ndef main():\n    print(first_missing_positive([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.375
    ],
    [
      "def firstMissingPositive(arr):\n    if arr[0]!= 0:\n        return 0\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > 0 and arr[i] <= len(arr) and arr[arr[i]-1]!= arr[i]:\n                return arr[i] - 1\n\nprint(firstMissingPositive([3, 1, 5, 2, 6]))",
      -5.4921875
    ],
    [
      "def first_missing_positive(arr):\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] < 1:\n            arr[i] = 0\n    for i in range(len(arr)):\n        if arr[i] > len(arr) + 1:\n            return i + 1\n    return len(arr) + 1\n\nprint(first_missing_positive([-1,0,3,4,-1,2]))",
      -5.91796875
    ],
    [
      "def first_missing_positive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(1, len(nums) + 1):\n        if nums[i - 1] <= 0 or nums[i] <= 0:\n            return i\n    return len(nums) + 1\n\n\nif __name__ == \"__main__\":\n    assert first_missing_positive([1, 2, 3, 4, 5]) == 6\n    assert first_missing_positive([]) == 0\n    assert first_missing_positive([1, 0, -2, 4]) == 2\n    assert first_missing_positive([3, 4, -1, 2, 1]) == 6",
      -6.08203125
    ],
    [
      "def first_missing_positive(arr):\n    missing = 0\n    for i in range(len(arr)):\n        if arr[i] <= 0 or arr[i] > len(arr):\n            missing = i + 1\n            break\n\n    return missing\n\n\nif __name__ == '__main__':\n    arr = [3, 5, 7, 9, 11, 13]\n    print(first_missing_positive(arr))",
      -6.5703125
    ],
    [
      "def first_missing_positive(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    count = len(arr) + 1\n    for i in range(count):\n        if i > 0 and arr[i] < count and arr[i]!= i:\n            if arr[i] - 1!= i:\n                arr[i] -= 1\n                if arr[i] < 0:\n                    arr[i] += count\n            else:\n                arr[i] += count\n    for i in range(count):\n        if i!= arr[i]:\n            return i + 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([-2, 0, 1]))",
      -6.65234375
    ],
    [
      "def firstMissingPositive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > 0 and arr[i]!= arr[i-1]:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    for i in range(n):\n        if arr[i]!= i + 1:\n            return i + 1\n    return n + 1",
      -6.68359375
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] <= 0 or arr[i] > len(arr):\n            return i\n    return len(arr)\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([1, 2, 3, 4, 5]))\n    print(first_missing_positive([0, 1, 2, 3, 4, 5]))",
      -6.81640625
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] <= 0 or arr[i] > len(arr):\n            return i+1\n\n    return len(arr) + 1\n\n\narr = [0, 1, 3, -1, 5, -2, 7]\nprint(first_missing_positive(arr))",
      -7.23828125
    ],
    [
      "def firstMissingPositive(arr):\n    for i in arr:\n        if i > 0 and i <= len(arr) and arr[i-1] == i:\n            pass\n        else:\n            return i\n    return len(arr) + 1\n\nprint(firstMissingPositive([1,2,3,4,5,6,7,8,9,10]))",
      -7.4453125
    ],
    [
      "def first_missing_positive(arr):\n    if len(arr) == 0:\n        return 1\n    for i in range(1, len(arr) + 1):\n        if arr[i] <= 0:\n            continue\n        if arr[i - 1] > 0 and arr[i - 1]!= arr[i]:\n            return i\n    return len(arr)\n\n\nprint(first_missing_positive([3, 4, 2, 1]))\nprint(first_missing_positive([3, 4, 5, 7]))\nprint(first_missing_positive([3, 4, 2, 1, 5]))",
      -8.109375
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    for i in range(3, n):\n        if arr[i] > 0:\n            arr[i] = abs(arr[i])\n        else:\n            arr[i] = 1\n    for i in range(n):\n        if arr[i]!= i + 1:\n            return i + 1\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([4, 3, 2, 1]))\n    print(first_missing_positive([5, 6, 7]))",
      -8.59375
    ],
    [
      "def first_missing_positive(arr):\n    for i in arr:\n        while i > 0 and i < len(arr) and arr[i] > 0:\n            val = i\n            while val > 0 and arr[val - 1] > 0:\n                val = val - 1\n            if val == i:\n                return i\n    return len(arr)\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive([1, 0, -1]))\n    print(first_missing_positive([1, 2, 3]))\n    print(first_missing_positive([]))\n    print(first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139",
      -8.7421875
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr):\n            arr[i] = 0\n    for i in range(len(arr)):\n        if i!= arr[i]:\n            arr[i] += 1\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i+1\n\nprint(first_missing_positive([4,6,8,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147",
      -8.96875
    ],
    [
      "import math\n\ndef first_missing_positive(arr):\n    for i in arr:\n        if i < 1:\n            return i\n        else:\n            while True:\n                if (math.floor(math.sqrt(i)) * (math.floor(math.sqrt(i))) + i) < len(arr) and arr[i]!= i:\n                    break\n                else:\n                    i += 1\n    return i\n\nprint(first_missing_positive([1,3,4,7,8,10,12,14]))",
      -9.328125
    ],
    [
      "def first_missing_positive_number(arr):\n    arr.sort()\n    for i in range(len(arr) + 1):\n        if i > 0 and arr[i]!= i:\n            return i\n    return len(arr) + 1\n\n\nif __name__ == \"__main__\":\n    print(first_missing_positive_number([1, 2, 3, 4]))\n    print(first_missing_positive_number([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(first_missing_positive_number([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(first_missing_positive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
      -9.515625
    ],
    [
      "def first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > 0 and arr[i] < n:\n            if arr[arr[i] - 1]!= arr[i]:\n                return arr[arr[i] - 1] + 1\n        else:\n            return i + 1\n\nif __name__ == '__main__':\n    arr = [2,4,-1,1]\n    print(first_missing_positive(arr))",
      -10.3515625
    ],
    [
      "def first_missing_positive(arr):\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] > 0 and arr[i]!= i:\n            j = arr[i] - 1\n            if arr[j] > 0:\n                arr[j], arr[i] = arr[i], arr[j]\n            else:\n                return i\n    return len(arr) + 1\n\narr = [1, -1, 0, 3, 4, -3]\nprint(first_missing_positive(arr))",
      -10.6328125
    ],
    [
      "def first_missing_positive(arr):\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr):\n            return i\n    return len(arr)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 4, -1]\n    print(first_missing_positive(arr))\n    arr = [1, 3, 4, -1, -2]\n    print(first_missing_positive(arr))\n    arr = [1, 3, 4, 5]\n    print(first_missing_positive(arr))\n    arr = [1, 3, 4, 5, 7]\n    print(first_missing_positive(arr))\n    arr = [1, 3, 4, 5, 7, 8]\n    print(first_missing_positive(arr))\n    arr = [1, 3, 4, 5, 7, 8, 9]\n    print(first_missing_positive(arr))",
      -10.9765625
    ],
    [
      "def first_missing_positive(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    length = len(arr)\n    missing = length + 1\n    for i in range(1, missing):\n        if arr[i] < 0 or arr[i] > missing:\n            return i\n    return missing\n\n\nprint(first_missing_positive([-1, 1, 2, 3, 4]))",
      -11.3984375
    ],
    [
      "def first_missing_positive(arr):\n\n    #initialising a list to store the values of the array\n    missing_number = [0] * len(arr)\n    for i in range(len(arr)):\n        if arr[i] <= 0:\n            missing_number[i] = arr[i]\n\n    #for loop to find the missing number\n    for i in range(len(arr)):\n        if i!= missing_number[i]:\n            print(i, \"is missing number\")\n    return\n\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8]\n    first_missing_positive(arr)",
      -14.9296875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}