{
  "problem": {
    "task_id": "MBPP/492",
    "prompt": "Write a function to search an element in the given array by using binary search.",
    "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
    "test_list": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ],
    "challenge_test_list": [],
    "problem_id": 481
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def binary_search(arr, target):\n    if len(arr) == 0:\n        return False\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start)//2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(arr, 7))",
      4.73046875
    ],
    [
      "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5], 5) == 3\n    assert binary_search([1, 2, 3, 4, 5], 7) == -1",
      4.00390625
    ],
    [
      "def binary_search(arr, elem):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == elem:\n            return mid\n\n        elif arr[mid] < elem:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7], 7))",
      3.38671875
    ],
    [
      "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nelement = 10\n\nprint(binary_search(arr, element))",
      3.341796875
    ],
    [
      "def binary_search(arr, elem, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if arr[mid] == elem:\n        return mid\n    if arr[mid] < elem:\n        return binary_search(arr, elem, mid + 1, high)\n    return binary_search(arr, elem, low, mid - 1)\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(binary_search(arr, 7))",
      3.21484375
    ],
    [
      "def binary_search(arr, item):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == item:\n            return mid\n        elif arr[mid] > item:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\nprint(binary_search([1, 2, 3, 4, 5, 6], 3))",
      3.072265625
    ],
    [
      "def search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return None\n\n\nprint(search([1, 2, 3, 4, 5, 6], 6))",
      3.025390625
    ],
    [
      "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not nums:\n            return False\n\n        low, high = 0, len(nums) - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n        return False\n\n\nif __name__ == \"__main__\":\n    nums = [3, 4, 5, 7, 9]\n    target = 7\n    sol = Solution()\n    print(sol.search(nums, target))",
      3.009765625
    ],
    [
      "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6], 5))",
      2.984375
    ],
    [
      "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(binary_search(arr, 8))",
      2.85546875
    ],
    [
      "def binary_search(arr, target):\n    # write your code here\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [2, 5, 8, 10, 13, 18, 21, 34]\ntarget = 8\nprint(binary_search(arr, target))",
      2.755859375
    ],
    [
      "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target = 6\n    print(binary_search(arr, target))",
      2.68359375
    ],
    [
      "def binary_search(arr, element):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == element:\n            return mid\n\n        elif arr[mid] < element:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return None\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    element = 8\n\n    print(binary_search(arr, element))",
      2.611328125
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [2, 3, 5, 6, 9, 11, 12]\ntarget = 12\nprint(binary_search(arr, target))",
      2.505859375
    ],
    [
      "def binary_search(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(arr, 9))\n\nif __name__ == '__main__':\n    main()",
      2.3515625
    ],
    [
      "def binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] == element:\n            return mid\n\n        elif arr[mid] > element:\n            end = mid - 1\n\n        else:\n            start = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))",
      2.275390625
    ],
    [
      "def binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\narr = [2,3,4,5,6,7]\nelement = 2\n\nprint(binary_search(arr, element))",
      2.212890625
    ],
    [
      "def search(arr, n, e):\n    low = 0\n    high = n-1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == e:\n            return mid\n\n        if arr[mid] < e:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\narr = [1,2,3,4,5,6,7,8,9,10]\nprint(search(arr, len(arr), 5))",
      2.15625
    ],
    [
      "def binary_search(nums, target):\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], -2))",
      1.9326171875
    ],
    [
      "def binarySearch(arr, target, low, high):\n    if high >= low:\n        mid = (high + low) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            return binarySearch(arr, target, mid + 1, high)\n        else:\n            return binarySearch(arr, target, low, mid - 1)\n    else:\n        return -1\n\n\narr = [2, 3, 4, 5, 6, 7, 8, 9]\ntarget = 8\nprint(binarySearch(arr, target, 0, len(arr) - 1))",
      1.8759765625
    ],
    [
      "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        low, high = 0, len(nums)-1\n        while low <= high:\n            mid = (low+high)//2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                low = mid+1\n            else:\n                high = mid-1\n        return False\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.search([1,2,3,4,5,6], 3)",
      1.779296875
    ],
    [
      "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5, 6], 5))",
      1.724609375
    ],
    [
      "def search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif target < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\narr = [3, 5, 7, 9, 11, 13, 15]\ntarget = 13\n\nprint(search(arr, target))",
      1.7158203125
    ],
    [
      "def binary_search(arr, target):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(arr, 10))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.70703125
    ],
    [
      "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    val = 8\n    result = binary_search(arr, val)\n    print(result)",
      1.5234375
    ],
    [
      "def binary_search(arr, element):\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(binary_search(arr, 7))",
      1.5078125
    ],
    [
      "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == arr[mid]:\n            return mid\n        elif x < arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = int(input(\"Enter element: \"))\nresult = binary_search(arr, x)\nif result == -1:\n    print(\"Element not found\")\nelse:\n    print(\"Element is present at index \", result)",
      1.482421875
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5], 5))\n    print(binary_search([1, 2, 3, 4, 5], 6))",
      1.3984375
    ],
    [
      "def binary_search(array, target):\n    left = 0\n    right = len(array) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7]\n    target = 5\n\n    print(binary_search(array, target))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.365234375
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == target:\n        return mid\n\n    if arr[mid] < target:\n        if arr[low] <= target < arr[mid]:\n            return binary_search(arr, target)\n        else:\n            return binary_search(arr, arr[mid])\n    else:\n        if arr[high] <= target < arr[mid]:\n            return binary_search(arr, arr[mid])\n        else:\n            return binary_search(arr, target)\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5, 6], 6) == 3\n    assert binary_search([1, 2, 3, 4, 5, 6], 5) == 4\n    assert binary_search([1, 2, 3, 4, 5, 6], 2) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6], 0) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 1) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 3) == 4\n    assert binary_search([1, 2, 3, 4, 5, 6], 5) == 5\n    assert binary_search([1, 2, 3, 4, 5, 6], 6) == 7\n    assert binary_search([1, 2, 3, 4, 5, 6], 7) == -1",
      1.259765625
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\ndef main():\n    print(binary_search([2, 3, 4, 5, 6, 7], 6))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.21875
    ],
    [
      "def binary_search(arr, elem, low, high):\n    if low > high:\n        return False\n\n    mid = (low + high) // 2\n\n    if arr[mid] == elem:\n        return True\n    elif arr[mid] > elem:\n        if elem < arr[mid]:\n            return binary_search(arr, elem, low, mid - 1)\n        else:\n            return binary_search(arr, elem, mid + 1, high)\n    else:\n        if elem > arr[mid]:\n            return binary_search(arr, elem, mid + 1, high)\n        else:\n            return binary_search(arr, elem, low, mid - 1)\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(binary_search(arr, 3, 0, len(arr) - 1))",
      1.12109375
    ],
    [
      "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        low = 0\n        high = len(nums) - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n        return False",
      1.1142578125
    ],
    [
      "def search(arr, x):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6]\n    print(search(arr, 5))\n    print(search(arr, 7))\n    print(search(arr, 8))\n    print(search(arr, 9))\n\n\nif __name__ == '__main__':\n    main()",
      1.0595703125
    ],
    [
      "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [2, 3, 4, 5, 7, 9]\nval = 7\n\nprint(binary_search(arr, val))",
      0.85205078125
    ],
    [
      "def binarySearch(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binarySearch([1, 2, 3, 4, 5, 6, 7], 7))",
      0.83740234375
    ],
    [
      "def binary_search(array, target):\n    left = 0\n    right = len(array) - 1\n    mid = (left + right) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search(array, target)\n    else:\n        return binary_search(array, target - array[mid])\n\n\nprint(binary_search([1, 2, 3, 4, 5], 4))",
      0.81201171875
    ],
    [
      "def binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\n\ndef main():\n    print(binary_search([1, 2, 3, 4, 5, 6, 7], 5))\n\n\nif __name__ == '__main__':\n    main()",
      0.802734375
    ],
    [
      "def binary_search(arr, x):\n    if arr is None or len(arr) == 0:\n        return False\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n\n        if x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return False\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(arr, 3))",
      0.73828125
    ],
    [
      "def binary_search(array, element):\n    start = 0\n    end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == element:\n            return mid\n        elif element < array[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5, 6, 7]\n    element = 5\n    print(binary_search(array, element))",
      0.54052734375
    ],
    [
      "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == val:\n            return mid\n        elif val < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    val = 8\n    print(binary_search(arr, val))",
      0.5009765625
    ],
    [
      "def binary_search(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return -1\n    low, high = 0, len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([4, 5, 6, 7, 8, 9], 9))\n    print(binary_search([4, 5, 6, 7, 8, 9], 7))\n    print(binary_search([4, 5, 6, 7, 8, 9], 8))\n    print(binary_search([4, 5, 6, 7, 8, 9], 6))",
      0.359130859375
    ],
    [
      "def binary_search(arr, val, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n    if low > high:\n        return -1\n    mid = int((low + high) / 2)\n    if arr[mid] == val:\n        return mid\n    elif val < arr[mid]:\n        return binary_search(arr, val, low, mid - 1)\n    else:\n        return binary_search(arr, val, mid + 1, high)\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5], 5))",
      0.354736328125
    ],
    [
      "def binary_search(array, value):\n    if array is None or len(array) == 0:\n        return False\n\n    left = 0\n    right = len(array) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if array[mid] == value:\n            return mid\n        elif array[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\nif __name__ == '__main__':\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 10))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 2))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 7))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 2))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 9))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 3))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 0))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], -10))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 9))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 1))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 7))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], -3))",
      0.169677734375
    ],
    [
      "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    x = 7\n\n    print(binary_search(arr, x))",
      0.1488037109375
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search(arr, target)\n    else:\n        return binary_search(arr, target)\n\ndef main():\n    arr = [1, 3, 5, 7, 9, 11, 13]\n    print(binary_search(arr, 13))\n\nif __name__ == '__main__':\n    main()",
      0.04803466796875
    ],
    [
      "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left)//2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1\n\na = Solution()\nprint(a.search([1,2,3,4,5,6], 3))\nprint(a.search([1,2,3,4,5,6], 2))\nprint(a.search([1,2,3,4,5,6], 4))\nprint(a.search([1,2,3,4,5,6], 5))\nprint(a.search([1,2,3,4,5,6], 0))\nprint(a.search([1,2,3,4,5,6], 7))\nprint(a.search([1,2,3,4,5,6], 8))\nprint(a.search([1,2,3,4,5,6], 9))\nprint(a.search([1,2,3,4,5,6], 11))\nprint(a.search([1,2,3,4,5,6], 12))\nprint(a.search([1,2,3,4,5,6], 13))\nprint(a.search([1,2,3,4,5,6], 14))\nprint(a.search([1,2,3,4,5,6], 15))\nprint(a.search([1,2,3,4,5,6], 16))\nprint(a.search([1,2,3,4,5,6], 17))\nprint(a.search([1,2,3,4,5,6], 18))\nprint(a.search([1,2,3,4,5,6], 19))\nprint(a.search([1,2,3,4,5,6], 20))\nprint(a.search([1,2,3,4,5,6",
      0.036865234375
    ],
    [
      "def binary_search(arr, element):\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        if arr[0] == element:\n            return True\n        else:\n            return False\n    mid = len(arr) // 2\n    if arr[mid] == element:\n        return True\n    elif arr[mid] > element:\n        return binary_search(arr[:mid], element)\n    else:\n        return binary_search(arr[mid+1:], element)\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7], 5))",
      -0.02386474609375
    ],
    [
      "def binary_search(arr, target, low, high):\n    if high <= low:\n        return False\n\n    mid = (high + low) // 2\n    if arr[mid] == target:\n        return True\n    elif arr[mid] > target:\n        return binary_search(arr, target, low, mid - 1)\n    else:\n        return binary_search(arr, target, mid + 1, high)\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(binary_search(arr, 1, 0, len(arr) - 1))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.327392578125
    ],
    [
      "def search(array, target):\n    if not array:\n        return False\n    lo = 0\n    hi = len(array) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return False\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 5\n    print(search(array, target))\n\n\nif __name__ == '__main__':\n    main()",
      -0.6767578125
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low + high)//2\n        if arr[mid] == target:\n            return mid\n        elif target < arr[mid]:\n            high = mid-1\n        elif target > arr[mid]:\n            low = mid+1\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(binary_search(arr, 8))\n    print(binary_search(arr, 9))\n    print(binary_search(arr, 10))\n    print(binary_search(arr, 11))\n    print(binary_search(arr, 12))\n    print(binary_search(arr, 13))\n    print(binary_search(arr, 14))",
      -0.7587890625
    ],
    [
      "def search(arr, n, e):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == e:\n            return mid\n        elif arr[mid] < e:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\ndef main():\n    arr = [3, 5, 6, 7, 8, 10]\n    print(search(arr, len(arr), 7))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.7607421875
    ],
    [
      "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 3))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 7))",
      -0.7763671875
    ],
    [
      "def binary_search(arr, elem):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == elem:\n            return mid\n\n        elif arr[mid] > elem:\n            high = mid - 1\n\n        else:\n            low = mid + 1\n\n    return -1\n\n\narr = [2, 4, 5, 7, 9, 11]\nelem = 9\n\nprint(binary_search(arr, elem))",
      -0.85693359375
    ],
    [
      "def binary_search(arr, n, x):\n    if len(arr) == 0:\n        return False\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n    if arr[mid] == x:\n        return mid\n    elif arr[mid] > x:\n        return binary_search(arr[left:mid], n, x)\n    else:\n        return binary_search(arr[mid + 1:right], n, x)\n\n\narr = [2, 4, 8, 12, 16, 20]\nprint(binary_search(arr, len(arr), 8))",
      -0.85693359375
    ],
    [
      "def binary_search(array, element):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == element:\n            return mid\n        elif array[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\n# Testing\narray = [1, 2, 3, 4, 5, 6, 7]\nelement = 5\n\nprint(binary_search(array, element))",
      -0.8583984375
    ],
    [
      "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == element:\n            return mid\n        elif element < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(binary_search(arr, 5))",
      -0.8583984375
    ],
    [
      "def binary_search(arr, element):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6]\n\nprint(binary_search(arr, 1))\nprint(binary_search(arr, 5))",
      -0.8583984375
    ],
    [
      "def binary_search(arr, element):\n    if len(arr) == 0:\n        return False\n    else:\n        mid = len(arr) // 2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            return binary_search(arr[:mid], element)\n        else:\n            return binary_search(arr[mid:], element)\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(binary_search(arr, 7))",
      -0.8583984375
    ],
    [
      "def search(arr, e):\n    if len(arr) == 0:\n        return False\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == e:\n            return True\n        elif arr[mid] > e:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return False\n\nif __name__ == \"__main__\":\n    arr = [3, 5, 7, 11, 13]\n    e = 13\n    print(search(arr, e))",
      -0.85888671875
    ],
    [
      "def search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\nprint(search([1, 2, 3, 4, 5, 6, 7], 5))",
      -0.85888671875
    ],
    [
      "def search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == element:\n        return mid\n    elif arr[mid] < element:\n        return search(arr, element)\n    else:\n        return search(arr, arr[mid])\n\n\nif __name__ == \"__main__\":\n    print(search([1, 2, 3, 4, 5, 6], 6))",
      -0.85888671875
    ],
    [
      "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6, 7, 8, 9]\n    print(binary_search(arr, 4))",
      -0.85888671875
    ],
    [
      "def binary_search(array, target):\n    low = 0\n    high = len(array) - 1\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search(array, target)\n    else:\n        return binary_search(array, target)\n\n\nif __name__ == \"__main__\":\n    print(binary_search([3, 4, 5, 7, 9], 4))",
      -0.85888671875
    ],
    [
      "def binary_search(arr, num):\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left + right)//2\n        if arr[mid] == num:\n            return mid\n        elif arr[mid] > num:\n            right = mid-1\n        else:\n            left = mid+1\n    return -1\n\n\narr = [4, 5, 6, 7, 8, 9]\nnum = 9\nprint(binary_search(arr, num))",
      -0.85888671875
    ],
    [
      "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 9]\n    print(binary_search(arr, 3))",
      -0.85888671875
    ],
    [
      "def search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        if arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [3, 5, 7, 9, 11, 13]\n    print(search(arr, 13))",
      -0.85888671875
    ],
    [
      "def binary_search(arr, num):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == num:\n            return mid\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6], 6))\n    print(binary_search([1, 2, 3, 4, 5, 6], 2))\n    print(binary_search([1, 2, 3, 4, 5, 6], 5))\n    print(binary_search([1, 2, 3, 4, 5, 6], 7))",
      -0.85888671875
    ],
    [
      "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n\n        def binary_search(left, right, target):\n            if left > right:\n                return -1\n\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                return binary_search(left, mid - 1, target)\n            else:\n                return binary_search(mid + 1, right, target)\n\n        return binary_search(0, len(nums) - 1, target)\n\n\ns = Solution()\nprint(s.search([1, 2, 3, 4, 5, 6], 6))\nprint(s.search([1, 2, 3, 4, 5, 6], 1))",
      -0.85888671875
    ],
    [
      "def search(arr, e):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == e:\n            return mid\n        elif arr[mid] < e:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\narr = [1, 3, 5, 7, 9]\ne = 5\n\nprint(search(arr, e))",
      -0.85888671875
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [2, 3, 5, 7, 11, 13, 15]\ntarget = 15\n\nprint(binary_search(arr, target))",
      -0.85888671875
    ],
    [
      "def binary_search(array, element):\n    if len(array) == 1:\n        return array[0] == element\n    else:\n        return array[0] < element or array[len(array) - 1] > element\n\n\ndef main():\n    print(binary_search([1, 3, 5, 7, 9], 3))\n    print(binary_search([1, 3, 5, 7, 9], 6))\n    print(binary_search([1, 3, 5, 7, 9], 7))\n\n\nmain()",
      -0.91845703125
    ],
    [
      "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\narr = [4, 6, 8, 10, 12]\nx = 6\nprint(binary_search(arr, x))",
      -1.0751953125
    ],
    [
      "def binary_search(arr, target):\n    if arr is None or len(arr) == 0:\n        return False\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return True\n        if arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6], 4))\n    print(binary_search([1, 2, 3, 4, 5, 6], 5))\n    print(binary_search([1, 2, 3, 4, 5, 6], 2))\n    print(binary_search([1, 2, 3, 4, 5, 6], 3))\n    print(binary_search([1, 2, 3, 4, 5, 6], 7))\n    print(binary_search([1, 2, 3, 4, 5, 6], 0))\n    print(binary_search([1, 2, 3, 4, 5, 6], -1))\n    print(binary_search([1, 2, 3, 4, 5, 6], -2))\n    print(binary_search([1, 2, 3, 4, 5, 6], -3))\n    print(binary_search([1, 2, 3, 4, 5, 6], -4))\n    print(binary_search([1, 2, 3, 4, 5, 6], -5))\n    print(binary_search([1, 2, 3, 4, 5, 6], -6))\n    print(binary_search([1, 2, 3, 4, 5, 6], -7))\n    print(binary_search([1, 2, 3, 4, 5, 6], -8))\n    print(binary_search([1, 2, 3, 4, 5, 6], -9))\n    print(binary_search([1, 2, 3, 4, 5, 6], -10))\n    print(binary_search([1, 2, 3, 4, 5, 6], -11))\n    print(binary_search",
      -1.3115234375
    ],
    [
      "def binary_search(arr, e):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left)//2\n        if arr[mid] == e:\n            return mid\n        elif arr[mid] > e:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return None\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 7, 9, 11, 13, 15]\n    print(binary_search(arr, 13))",
      -1.384765625
    ],
    [
      "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        l = 0\n        r = len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return False\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.search([1, 2, 3, 4, 5, 6], 2) == True\n    assert s.search([1, 2, 3, 4, 5, 6], 3) == False\n    assert s.search([1, 2, 3, 4, 5, 6], 4) == True\n    assert s.search([1, 2, 3, 4, 5, 6], 5) == False\n    assert s.search([1, 2, 3, 4, 5, 6], 1) == True",
      -1.8701171875
    ],
    [
      "def binary_search(arr, n, e):\n    lo = 0\n    hi = len(arr)-1\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if arr[mid] == e:\n            return mid\n        elif e < arr[mid]:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return -1\n\n\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nprint(binary_search(arr, n, 6))",
      -1.96484375
    ],
    [
      "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0:\n            return False\n\n        low = 0\n        high = len(nums) - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] > target:\n                high = mid - 1\n            else:\n                low = mid + 1\n\n        return False",
      -1.9736328125
    ],
    [
      "def binary_search(arr, n, x):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 8, 8))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 8))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 8))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 8))",
      -2.05859375
    ],
    [
      "def search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == '__main__':\n    assert search([1, 2, 3, 4, 5, 6, 7], 6) == 2\n    assert search([1, 2, 3, 4, 5, 6, 7], 2) == -1\n    assert search([1, 2, 3, 4, 5, 6, 7], 1) == 0\n    assert search([1, 2, 3, 4, 5, 6, 7], 3) == -1\n    assert search([1, 2, 3, 4, 5, 6, 7], 4) == -1\n    assert search([1, 2, 3, 4, 5, 6, 7], 5) == 1\n    assert search([1, 2, 3, 4, 5, 6, 7], 6) == -1",
      -2.341796875
    ],
    [
      "def binary_search(nums, element):\n    if len(nums) == 0:\n        return False\n\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == element:\n            return True\n\n        if nums[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [1, 3, 5, 7, 9, 11],\n        [2, 4, 6, 8, 10],\n        [2, 4, 6, 8, 10, 12],\n        [2, 4, 6, 8, 10, 12, 15, 20],\n        [2, 4, 6, 8, 10, 12, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 99, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9",
      -3.794921875
    ],
    [
      "def binary_search(array, element):\n    left, right = 0, len(array) - 1\n    mid = (left + right) // 2\n    if array[mid] == element:\n        return mid\n    elif array[mid] > element:\n        return binary_search(array, element)\n    else:\n        return binary_search(array, array[mid])\n\n\nif __name__ == '__main__':\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 7) == 5\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 3) == 2\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 2) == 1\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 2) == 0",
      -3.8203125
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search(arr, target)\n    else:\n        return binary_search(arr, target - arr[mid])\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target = 7\n    print(binary_search(arr, target))",
      -4.08984375
    ],
    [
      "def search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    if high <= low:\n        return False\n\n    mid = (low + high) // 2\n\n    if arr[mid] == element:\n        return True\n    elif arr[mid] > element:\n        return search(arr, element)\n    else:\n        return search(arr, arr[mid])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(search(arr, 9))",
      -4.5546875
    ],
    [
      "def binary_search(arr, element):\n    if arr is None or len(arr) == 0:\n        return False\n    left = 0\n    right = len(arr) - 1\n    mid = left + (right - left) // 2\n    if arr[mid] == element:\n        return True\n    if arr[mid] < element:\n        if arr[mid] < arr[mid + 1]:\n            return binary_search(arr[:mid], element)\n        else:\n            return binary_search(arr[mid + 1:], element)\n    else:\n        if arr[mid] > arr[mid - 1]:\n            return binary_search(arr[mid + 1:], element)\n        else:\n            return binary_search(arr[:mid], element)\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8], 8))",
      -4.57421875
    ],
    [
      "def binarySearch(arr, target):\n    if len(arr) == 0:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binarySearch(arr, target)\n    else:\n        return binarySearch(arr, target - arr[mid])\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 10\n    result = binarySearch(arr, target)\n    if result == -1:\n        print(\"Element is not present in the array.\")\n    else:\n        print(\"Element is present at index\", result)",
      -4.74609375
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = int((low + high) / 2)\n\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] > target:\n        return binary_search(arr, target)\n    elif arr[mid] < target:\n        return binary_search(arr, target)\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5, 6, 7], 5))",
      -5.39453125
    ],
    [
      "def binary_search(array, element):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == element:\n            return mid\n        elif element < array[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 178, 179, 181, 182, 183, 184, 18",
      -5.40625
    ],
    [
      "def binarySearch(arr, elem):\n    if len(arr) == 0:\n        return False\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n    if arr[mid] == elem:\n        return True\n    elif arr[mid] < elem:\n        return binarySearch(arr[:mid], elem)\n    else:\n        return binarySearch(arr[mid+1:], elem)\n\n\nprint(binarySearch([1, 2, 3, 4, 5, 6, 7], 7))\nprint(binarySearch([1, 2, 3, 4, 5, 6, 7], 2))\nprint(binarySearch([1, 2, 3, 4, 5, 6, 7], 6))",
      -5.71484375
    ],
    [
      "def binary_search(arr, n, element):\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n\nif __name__ == \"__main__\":\n    print(binary_search([2, 3, 5, 7, 11], 3, 7))",
      -5.72265625
    ],
    [
      "def binary_search(arr, n, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nif __name__ == '__main__':\n    assert binary_search([1, 2, 3, 4, 5, 6], 5, 3) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6], 5, 4) == 1\n    assert binary_search([1, 2, 3, 4, 5, 6], 5, 6) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 5) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 4) == 1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 3) == 2\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 7) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 8) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 9) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 10) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 11) == -1",
      -6.3515625
    ],
    [
      "def binary_search(array, element):\n    if array == None or array == []:\n        return None\n    if len(array) == 1:\n        return array.index(element)\n    if len(array) == 2:\n        if array[0] == element:\n            return 0\n        return 1\n    mid = len(array) // 2\n    if array[mid] == element:\n        return mid\n    if array[mid] > element:\n        return binary_search(array[:mid], element)\n    else:\n        return binary_search(array[mid + 1:], element)\n\n\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 3))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 4))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 7))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 10))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 15))",
      -6.515625
    ],
    [
      "def binary_search(arr, el):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == el:\n            return mid\n        elif arr[mid] > el:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef test_binary_search():\n    assert binary_search([1, 2, 3, 4, 5], 5) == 1\n    assert binary_search([1, 2, 3, 4, 5], 2) == 0\n    assert binary_search([1, 2, 3, 4, 5], 0) == -1\n    assert binary_search([1, 2, 3, 4, 5], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5], 2) == -1\n    assert binary_search([1, 2, 3, 4, 5], 3) == 1\n    assert binary_search([1, 2, 3, 4, 5], 4) == -1\n    assert binary_search([1, 2, 3, 4, 5], 5) == -1",
      -6.53515625
    ],
    [
      "def binary_search(arr, target):\n    # write your code here\n    if len(arr) == 0:\n        return False\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\n\nif __name__ == '__main__':\n    assert binary_search([1, 2, 3, 4, 5, 6], 3) == True\n    assert binary_search([1, 2, 3, 4, 5, 6], 5) == False\n    assert binary_search([1, 2, 3, 4, 5, 6], 8) == False\n    assert binary_search([1, 2, 3, 4, 5, 6], 7) == True",
      -7.93359375
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5], 3) == 2\n    assert binary_search([1, 2, 3, 4, 5], 5) == None\n    assert binary_search([1, 2, 3, 4, 5], 5) == 1\n    assert binary_search([1, 2, 3, 4, 5], 7) == 4\n    assert binary_search([1, 2, 3, 4, 5], 8) == None",
      -8.046875
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    found = False\n\n    while not found:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            found = True\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return mid\n\n\ndef test_binary_search():\n    assert binary_search([1, 2, 3, 4, 5], 5) == 2\n    assert binary_search([1, 2, 3, 4, 5], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5], 2) == 0\n    assert binary_search([1, 2, 3, 4, 5], 3) == 1\n    assert binary_search([1, 2, 3, 4, 5], 4) == 1\n    assert binary_search([1, 2, 3, 4, 5], 6) == -1\n    assert binary_search([1, 2, 3, 4, 5], 7) == -1\n\n\ntest_binary_search()",
      -8.7109375
    ],
    [
      "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if val == arr[mid]:\n            return mid\n        if val < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef test_binary_search():\n    assert binary_search([1, 3, 5, 7, 9], 5) == 3\n    assert binary_search([1, 3, 5, 7, 9], 1) == -1\n    assert binary_search([1, 3, 5, 7, 9], 0) == 0\n    assert binary_search([1, 3, 5, 7, 9], 2) == -1\n    assert binary_search([1, 3, 5, 7, 9], 3) == -1\n    assert binary_search([1, 3, 5, 7, 9], 4) == -1\n    assert binary_search([1, 3, 5, 7, 9], 5) == -1\n    assert binary_search([1, 3, 5, 7, 9], 6) == -1\n    assert binary_search([1, 3, 5, 7, 9], 7) == -1\n    assert binary_search([1, 3, 5, 7, 9], 8) == -1\n    assert binary_search([1, 3, 5, 7, 9], 9) == -1",
      -9.0078125
    ],
    [
      "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == target:\n        return mid\n\n    if arr[low] <= arr[mid]:\n        if arr[low] <= target:\n            return binary_search(arr, target)\n        else:\n            return binary_search(arr, target - arr[mid])\n    else:\n        if arr[mid] <= target:\n            return binary_search(arr, target)\n        else:\n            return binary_search(arr, target - arr[low])\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5], 5))\n    print(binary_search([1, 2, 3, 4, 5], 4))",
      -9.1796875
    ],
    [
      "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == val:\n        return mid\n    elif arr[mid] > val:\n        return binary_search(arr, val)\n    else:\n        return binary_search(arr, val - arr[mid])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 5, 7, 9]\n    print(binary_search(arr, 3))\n    print(binary_search(arr, 5))\n    print(binary_search(arr, 7))\n    print(binary_search(arr, 9))\n    print(binary_search(arr, 0))\n    print(binary_search(arr, 9))",
      -11.375
    ],
    [
      "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == element:\n        return mid\n    if arr[mid] < element:\n        return binary_search(arr, element)\n    return binary_search(arr, arr[mid])\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5, 6], 3))\n    print(binary_search([1, 2, 3, 4, 5, 6], 4))\n    print(binary_search([1, 2, 3, 4, 5, 6], 7))\n    print(binary_search([1, 2, 3, 4, 5, 6], 8))",
      -14.1328125
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}