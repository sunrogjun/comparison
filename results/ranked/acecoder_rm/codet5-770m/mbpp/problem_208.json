{
  "problem": {
    "task_id": "MBPP/219",
    "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
    "test_list": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ],
    "challenge_test_list": [],
    "problem_id": 208
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def extract_min_max_k(tuple_, k):\n    if len(tuple_) < k:\n        return None\n    min_element = min(tuple_)\n    max_element = max(tuple_)\n    return min_element, max_element\n\n\nif __name__ == '__main__':\n    print(extract_min_max_k((1, 2, 3, 4, 5), 3))",
      3.9296875
    ],
    [
      "def max_min(arr, k):\n    return sorted(arr, reverse=True)[0:k]\n\n\nprint(max_min([1, 2, 3, 4, 5], 3))\nprint(max_min([1, 2, 3, 4, 5], 5))\nprint(max_min([1, 2, 3, 4, 5], 2))\nprint(max_min([1, 2, 3, 4, 5], 0))",
      2.455078125
    ],
    [
      "def extract_max_min(lst, k):\n    return sorted(lst)[:k]\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5]\n    k = 3\n    print(extract_max_min(lst, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      1.140625
    ],
    [
      "def extract_max_min(tuple, k):\n    max_list = []\n    min_list = []\n\n    for i in range(len(tuple)):\n        if len(max_list) < k:\n            max_list.append(tuple[i])\n        elif len(min_list) < k:\n            min_list.append(tuple[i])\n        else:\n            break\n\n    return max_list, min_list",
      0.9794921875
    ],
    [
      "def extract_max_min(lst, k):\n    return max(lst[:k]), min(lst[:k])\n\n\nprint(extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
      -0.0355224609375
    ],
    [
      "def extract_min_max(lst, k):\n    return sorted(lst)[k - 1], sorted(lst)[k]\n\nprint(extract_min_max([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
      -0.52880859375
    ],
    [
      "def find_max_min_k(arr, k):\n    arr.sort()\n    return arr[k-1], arr[0]\n\n\nprint(find_max_min_k([1, 3, 2, 4, 7, 8, 5], 3))",
      -0.8388671875
    ],
    [
      "def find_min_max(tuple, k):\n    if not tuple:\n        return None\n\n    if len(tuple) < k:\n        return None\n\n    min_val = tuple[0]\n    max_val = tuple[0]\n    for val in tuple[1:]:\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n\n    return min_val, max_val\n\n\nif __name__ == \"__main__\":\n    print(find_min_max([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
      -0.85595703125
    ],
    [
      "def find_k_max_min(list, k):\n    max_index = list.index(max(list))\n    min_index = list.index(min(list))\n    return (max_index, min_index)\n\n\ndef find_k_min_max(list, k):\n    max_index = list.index(max(list))\n    min_index = list.index(min(list))\n    return (max_index, min_index)\n\n\nprint(find_k_max_min([4, 1, 2, 3, 2, 1], 2))\nprint(find_k_min_max([4, 1, 2, 3, 2, 1], 2))",
      -0.85595703125
    ],
    [
      "def extract_max_min(tuple, k):\n    max_min_tuple = tuple[-k:]\n    max_min_tuple.reverse()\n    return tuple(max_min_tuple)\n\nprint(extract_max_min([1, 2, 3, 4, 5, 6, 7, 8], 2))",
      -0.85693359375
    ],
    [
      "def min_max(tuple, k):\n    min_val = tuple[0]\n    max_val = tuple[0]\n    for x in tuple:\n        if x < min_val:\n            min_val = x\n        if x > max_val:\n            max_val = x\n    return (min_val, max_val)\n\n\nif __name__ == \"__main__\":\n    tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    print(min_max(tuple, 3))\n    print(min_max(tuple, 4))\n    print(min_max(tuple, -2))",
      -0.85693359375
    ],
    [
      "def extract_min_max(arr, k):\n    arr.sort()\n    return arr[k-1], arr[0]\n\ndef extract_min_max_iterative(arr, k):\n    arr.sort()\n    return arr[k-1], arr[0]\n\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7,8,9]\n    k = 3\n    print(extract_min_max(arr, k))\n    print(extract_min_max_iterative(arr, k))",
      -0.85693359375
    ],
    [
      "def extract_max_min(arr, k):\n    result = []\n    result.append(arr[0])\n    result.append(arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > result[-1]:\n            result.append(arr[i])\n        elif arr[i] < result[-1]:\n            result.append(result[-1])\n    return result[:k]\n\n\nprint(extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
      -0.85693359375
    ],
    [
      "def get_k_max_min(nums, k):\n    return sorted(nums, reverse=True)[:k]",
      -0.85693359375
    ],
    [
      "def find_max_min(list, k):\n    return list[k-1], list[k-1]\n\n\nif __name__ == \"__main__\":\n    print(find_max_min([1, 2, 3, 4, 5, 6, 7], 2))",
      -0.85693359375
    ],
    [
      "def find_min_max(lst, k):\n    lst.sort()\n    return lst[:k]\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5]\n    print(find_min_max(lst, 2))",
      -0.85693359375
    ],
    [
      "def min_max(arr, k):\n    arr.sort()\n    min_index = 0\n    max_index = len(arr) - 1\n    return arr[min_index:max_index][k]",
      -0.857421875
    ],
    [
      "def extract_min_max_k(a, k):\n    return min(a[:k]), max(a[:k])",
      -0.857421875
    ],
    [
      "def extract_min_max_k(tuple, k):\n    # code here\n    return tuple[0:k]",
      -0.857421875
    ],
    [
      "def extract_k_min_max(tuple, k):\n    return sorted(tuple)[-k:]",
      -0.857421875
    ],
    [
      "def extract_max_min(arr, k):\n    return sorted(arr)[-k:]",
      -0.857421875
    ],
    [
      "def extract_k_max(arr, k):\n    arr.sort()\n    return arr[:k]\n\ndef extract_k_min(arr, k):\n    return arr[k:]\n\nprint(extract_k_min([1, 2, 3, 4, 5, 6], 2))",
      -0.85791015625
    ],
    [
      "def extract_kth_min(arr, k):\n    if len(arr) < k:\n        return \"Empty Array\"\n\n    return arr[k-1] + arr[0]\n\n\nif __name__ == \"__main__\":\n    print(extract_kth_min([1,2,3,4,5,6], 3))",
      -0.85791015625
    ],
    [
      "def extract_max_min(a, k):\n    if k == 0:\n        return a\n    else:\n        return max(a), min(a)\n\n\nprint(extract_max_min((1, 2, 3, 4, 5, 6), 3))",
      -0.85791015625
    ],
    [
      "def extract_k_min_max(tuple, k):\n    if len(tuple) <= k:\n        return tuple\n\n    return tuple[k-1], tuple[k-1]\n\nprint(extract_k_min_max([1, 2, 3, 4, 5], 3))",
      -0.85791015625
    ],
    [
      "class Solution:\n    def find_kth_element(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        l, r = 0, len(nums) - 1\n        while l < r:\n            mid = l + (r - l) // 2\n            if nums[mid] < nums[r]:\n                l = mid + 1\n            elif nums[mid] > nums[r]:\n                r = mid\n            else:\n                return nums[mid]\n        return nums[l]",
      -0.85791015625
    ],
    [
      "def find_k_max_min(a, k):\n    return [max(a[0:k]), min(a[0:k])]\n\n\nprint(find_k_max_min([1, 2, 3, 4, 5, 6], 3))",
      -0.85791015625
    ],
    [
      "def extract_min_max_k(tuple, k):\n    if len(tuple) < k:\n        return tuple\n    min_val = tuple[0]\n    max_val = tuple[0]\n    for i in range(1, len(tuple)):\n        if tuple[i] < min_val:\n            min_val = tuple[i]\n        if tuple[i] > max_val:\n            max_val = tuple[i]\n    return (min_val, max_val)\n\nprint(extract_min_max_k((1, 2, 3, 4, 5), 3))",
      -0.85791015625
    ],
    [
      "def extract_k_min_max(tuple_, k):\n    if len(tuple_) <= k:\n        return tuple_\n    elif k == 1:\n        return tuple_[0], tuple_[0]\n    elif k == 2:\n        return tuple_[-1], tuple_[-1]\n    else:\n        return tuple_[0], max(extract_k_min_max(tuple_[1:], k-1), extract_k_min_max(tuple_[1:], k))\n\nprint(extract_k_min_max((3,2,1,4), 2))",
      -0.85791015625
    ],
    [
      "def get_min_max_k(arr, k):\n    arr.sort()\n    return arr[-k:], arr[:-k]\n\n\nprint(get_min_max_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))",
      -0.85791015625
    ],
    [
      "def extract_k_maximum_minimum(arr, k):\n    arr_length = len(arr)\n    k_max = -1\n    k_min = -1\n    for i in range(arr_length):\n        if k_min == -1:\n            k_min = arr[i]\n        if k_max == -1:\n            k_max = arr[i]\n        if i == arr_length-k:\n            break\n    return k_max, k_min",
      -0.85791015625
    ],
    [
      "def extract_k_maximum(t, k):\n    return max(t[-k:])\n\n\ndef extract_k_minimum(t, k):\n    return min(t[:k])",
      -0.8583984375
    ],
    [
      "def find_kth_max_and_min(arr, k):\n    arr = sorted(arr)\n    return arr[:k]\n\nprint(find_kth_max_and_min([1,2,3,4,5], 2))\nprint(find_kth_max_and_min([1,2,3,4,5], 3))\nprint(find_kth_max_and_min([1,2,3,4,5], 4))\nprint(find_kth_max_and_min([1,2,3,4,5], 5))\nprint(find_kth_max_and_min([1,2,3,4,5], 1))\nprint(find_kth_max_and_min([1,2,3,4,5], 0))",
      -0.8583984375
    ],
    [
      "def extract_max_min(a, k):\n    if k == 0:\n        return a[0], a[0]\n    if len(a) == 1:\n        return a[0], a[0]\n    if k > len(a):\n        return a[0], a[-1]\n    else:\n        return a[0], a[-1]\n\n\nprint(extract_max_min([5, 4, 3, 2, 1], 2))",
      -0.8583984375
    ],
    [
      "def extract_kth_element(arr, k):\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result\n\n\narr = [1, 2, 3, 4, 5]\nprint(extract_kth_element(arr, 3))",
      -0.8583984375
    ],
    [
      "def extract_k_max(a, k):\n    return sorted(a)[k-1], sorted(a)[k-2]\n\n\nprint(extract_k_max([1, 2, 3, 4, 5], 3))\nprint(extract_k_max([1, 2, 3, 4, 5], 4))\nprint(extract_k_max([1, 2, 3, 4, 5], 5))",
      -0.8583984375
    ],
    [
      "def max_min_k(tuple_, k):\n    return tuple_[k], tuple_[k - 1]\n\n\nprint(max_min_k([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(max_min_k([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))",
      -0.8583984375
    ],
    [
      "def extract_k_min_max(a, k):\n    return a[:k], a[k:]\n\n\nprint(extract_k_min_max([1, 2, 3, 4, 5], 2))",
      -0.88671875
    ],
    [
      "def extract_min_max(tuple, k):\n    if len(tuple) == k:\n        return tuple[0], tuple[-1]\n    else:\n        return extract_min_max(tuple[1:], k), extract_min_max(tuple[:-1], k)\n\nprint(extract_min_max([1, 2, 3, 4, 5], 4))",
      -0.8876953125
    ],
    [
      "def extract_min_max(tuple_, k):\n    max_value = -1\n    min_value = float(\"inf\")\n    for i in range(k):\n        max_value = max(max_value, tuple_[i])\n    for i in range(k, len(tuple_)):\n        min_value = min(min_value, tuple_[i])\n    return max_value, min_value\n\n\nif __name__ == \"__main__\":\n    print(extract_min_max((1, 2, 3, 4, 5), 3))",
      -0.89013671875
    ],
    [
      "def extract_min_max(arr, k):\n    arr.sort()\n    return arr[:k], arr[-k:]\n\n\narr = [1, 3, 6, 7, 2, 4]\nk = 2\nprint(extract_min_max(arr, k))",
      -0.9091796875
    ],
    [
      "def find_min_max(a, k):\n    m = a[0]\n    m_index = 0\n    for i in range(len(a)):\n        if a[i] < m:\n            m = a[i]\n            m_index = i\n    return a[m_index], a[m_index-k]\n\n\na = [1, 2, 3, 4, 5, 6]\nprint(find_min_max(a, 3))",
      -0.9189453125
    ],
    [
      "def extract_max_min(lst, k):\n    if not lst:\n        return None\n    return max(lst[:k]), min(lst[:k])\n\n\nif __name__ == \"__main__\":\n    print(extract_max_min([1, 2, 3, 4, 5, 6], 3))",
      -1.0556640625
    ],
    [
      "def extract_max_min(arr, k):\n    arr.sort()\n    return arr[-k:]\n\ndef test():\n    arr = [1, 3, 5, 7, 9]\n    k = 3\n    print(extract_max_min(arr, k))\n\nif __name__ == \"__main__\":\n    test()",
      -1.5380859375
    ],
    [
      "def extract_k_elements(arr, k):\n    return sorted(arr)[-k:]\n\n\nprint(extract_k_elements([2, 1, 3, 5, 4], 3))\nprint(extract_k_elements([2, 1, 3, 5, 4], 2))\nprint(extract_k_elements([2, 1, 3, 5, 4], 1))\nprint(extract_k_elements([2, 1, 3, 5, 4], 0))\nprint(extract_k_elements([2, 1, 3, 5, 4], -1))",
      -1.697265625
    ],
    [
      "def extract_max_min(lst, k):\n    if k == 0:\n        return lst[0], lst[0]\n    lst.sort()\n    return lst[-k], lst[-k]\n\nprint(extract_max_min([1,2,3,4,5,6], 2))\nprint(extract_max_min([1,2,3,4,5,6], 1))",
      -1.734375
    ],
    [
      "def extract_min_max_k(a, k):\n    # Fill this in.\n    return a[:k]\n\nprint(extract_min_max_k([1, 2, 3, 4, 5], 2))\nprint(extract_min_max_k([1, 2, 3, 4, 5], 3))\nprint(extract_min_max_k([1, 2, 3, 4, 5], 4))\nprint(extract_min_max_k([1, 2, 3, 4, 5], 5))",
      -1.9462890625
    ],
    [
      "def extract_max_min(arr, k):\n    # Write your code here\n    arr.sort()\n    return arr[-k:] + arr[:-k]\n\n\nprint(extract_max_min([1, 2, 3, 4, 5, 6, 7, 8], 2))\nprint(extract_max_min([1, 2, 3, 4, 5, 6, 7, 8], 3))",
      -2.19921875
    ],
    [
      "def extract_min_max(tuple, k):\n    if not tuple:\n        return None, None\n\n    min_index = 0\n    max_index = len(tuple) - 1\n\n    while min_index <= max_index:\n        mid = (min_index + max_index) // 2\n\n        if tuple[mid] > tuple[k]:\n            max_index = mid\n        else:\n            min_index = mid + 1\n\n    return tuple[min_index], tuple[max_index]\n\n\ndef test_extract_min_max():\n    assert extract_min_max((1, 2, 3, 4, 5), 3) == (1, 2)\n    assert extract_min_max((1, 2, 3, 4, 5), 4) == (1, 2)\n    assert extract_min_max((1, 2, 3, 4, 5), 2) == (1, 2)\n    assert extract_min_max((1, 2, 3, 4, 5), 1) == (1, 2)",
      -2.201171875
    ],
    [
      "def extract_min_max(arr, k):\n    return sorted(arr, key=lambda x: x[k])[0:k]\n\n\narr = [5, 2, 8, 1, 7, 9, 3, 6, 4]\nk = 3\nprint(extract_min_max(arr, k))",
      -2.23828125
    ],
    [
      "def extract_max_min(t, k):\n    if len(t) <= k:\n        return [t[0], t[-1]]\n\n    i = 0\n    j = len(t) - 1\n    result = [t[0], t[0]]\n\n    while i < j:\n        if t[i] > result[1]:\n            result[0] = t[i]\n            i += 1\n        elif t[j] < result[1]:\n            result[1] = t[j]\n            j -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    t = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 2\n    print(extract_max_min(t, k))",
      -2.306640625
    ],
    [
      "def extract_max_min(arr, k):\n    arr.sort()\n    return arr[k - 1], arr[k]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 3\n    print(extract_max_min(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.5703125
    ],
    [
      "def extract_max_min(tuple_):\n    return tuple_[0], tuple_[-1]\n\n\nprint(extract_max_min((1, 2, 3, 4, 5)))\nprint(extract_max_min((1, 2, 3, 4)))\nprint(extract_max_min((1, 2, 3, 4, 5, 6, 7)))\nprint(extract_max_min((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(extract_max_min((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(extract_max_min((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))",
      -2.654296875
    ],
    [
      "def get_max_min(arr, k):\n    max_value = arr[0]\n    min_value = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n\n        if arr[i] < min_value:\n            min_value = arr[i]\n\n    return max_value, min_value",
      -2.796875
    ],
    [
      "def min_max(arr, k):\n    # Your code here\n    arr.sort()\n    return arr[k-1], arr[k]\n\n\nprint(min_max([1, 2, 3, 4, 5], 3))\nprint(min_max([1, 2, 3, 4, 5], 2))\nprint(min_max([1, 2, 3, 4, 5], 4))\nprint(min_max([1, 2, 3, 4, 5], 0))\nprint(min_max([1, 2, 3, 4, 5], 1))\nprint(min_max([1, 2, 3, 4, 5], 2))",
      -2.958984375
    ],
    [
      "def extract_min_max(lst, k):\n    if k > len(lst):\n        return None\n    min_elem = lst[0]\n    max_elem = lst[0]\n    for i in lst[1:]:\n        if i < min_elem:\n            min_elem = i\n        elif i > max_elem:\n            max_elem = i\n    return min_elem, max_elem\n\n\ndef main():\n    lst = [1, 3, 5, 2, 4, 7]\n    print(extract_min_max(lst, 1))\n    print(extract_min_max(lst, 2))\n    print(extract_min_max(lst, 3))\n\n\nmain()",
      -3.080078125
    ],
    [
      "def extract_max_min_k(lst, k):\n    if k == 0:\n        return lst\n    if k == 1:\n        return max(lst), min(lst)\n\n    l_max, l_min = [], []\n    for i in lst:\n        if i > l_max[-1]:\n            l_max.append(i)\n        elif i < l_min[-1]:\n            l_min.append(i)\n\n    return extract_max_min_k(l_max, k - 1) + l_min\n\n\nif __name__ == \"__main__\":\n    assert extract_max_min_k([1, 2, 3, 4, 5, 6], 2) == [5, 6]\n    assert extract_max_min_k([1, 2, 3, 4, 5, 6], 3) == [1, 2]\n    assert extract_max_min_k([1, 2, 3, 4, 5, 6], 0) == [1, 2]\n    assert extract_max_min_k([1, 2, 3, 4, 5, 6], 1) == [1, 2]",
      -3.11328125
    ],
    [
      "def extract_min_max(list_of_numbers, k):\n    list_of_numbers.sort()\n    return list_of_numbers[-k:]\n\n\nif __name__ == '__main__':\n    print(extract_min_max([1, 3, 2, 4, 5], 3))\n    print(extract_min_max([1, 3, 2, 4, 5], 5))\n    print(extract_min_max([1, 3, 2, 4, 5], 3))",
      -3.1796875
    ],
    [
      "def extract_k_from_list(lst, k):\n    # Your code here\n    return max(lst[:k]), min(lst[:k])\n\n\nprint(extract_k_from_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))",
      -3.34375
    ],
    [
      "def extract_k_min_max(tuple, k):\n    if len(tuple) < k:\n        return tuple\n\n    min_value = tuple[0]\n    max_value = tuple[0]\n    for val in tuple:\n        if val < min_value:\n            min_value = val\n        elif val > max_value:\n            max_value = val\n\n    return [min_value, max_value]",
      -3.36328125
    ],
    [
      "def extract_min_max(lst, k):\n    \"\"\"\n    :type lst: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # Solution 1:\n    # Sorting\n    lst.sort()\n    return lst[k-1:k+1]\n\n\ndef extract_min_max_2(lst, k):\n    \"\"\"\n    :type lst: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # Solution 2:\n    lst.sort()\n    return lst[:k]\n\n\nif __name__ == \"__main__\":\n    print(extract_min_max([1, 2, 3, 4, 5, 6, 7], 2))\n    print(extract_min_max_2([1, 2, 3, 4, 5, 6, 7], 2))",
      -3.54296875
    ],
    [
      "def extract_min_max(arr, k):\n    # Fill this in.\n    return min(arr[:k]), max(arr[:k])\n\n\narr = [3, 4, 5, 6, 7, 8]\nk = 3\n\nprint(extract_min_max(arr, k))",
      -3.564453125
    ],
    [
      "def extract_k_max(nums, k):\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums[1:]:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num, min_num\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 3\nprint(extract_k_max(nums, k))",
      -3.595703125
    ],
    [
      "class Solution:\n    def findMaxMin(self, nums, k):\n        # write your code here\n        if k == 0:\n            return (nums[0], nums[0])\n        elif k == 1:\n            return (max(nums), min(nums))\n        else:\n            return (max(nums[:k]), min(nums[:k]))\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    k = 2\n    print(Solution().findMaxMin(nums, k))",
      -3.642578125
    ],
    [
      "def extract_min_max(arr, k):\n    return min(arr[:k]), max(arr[:k])\n\n\nif __name__ == '__main__':\n    print(extract_min_max([1, 2, 3, 4, 5], 3))\n    print(extract_min_max([1, 2, 3, 4, 5], 2))\n    print(extract_min_max([1, 2, 3, 4, 5], 5))",
      -3.75390625
    ],
    [
      "from typing import List\n\n\ndef extract_min_max_k(arr: List[int], k: int) -> List[int]:\n    return sorted(arr, reverse=True)[0:k]\n\n\nassert extract_min_max_k([1, 2, 3, 4, 5], 3) == [1, 3]\nassert extract_min_max_k([1, 2, 3, 4, 5], 2) == [1, 2]\nassert extract_min_max_k([1, 2, 3, 4, 5], 1) == [1, 4]",
      -3.83984375
    ],
    [
      "def extract_k_min(tuple, k):\n    return sorted(tuple, key=lambda x: (x[k]))\n\ndef extract_k_max(tuple, k):\n    return sorted(tuple, key=lambda x: (x[k], x[k]))\n\nif __name__ == \"__main__\":\n    print(extract_k_min((1,2,3,4,5,6,7), 2))\n    print(extract_k_min((1,2,3,4,5,6,7), 1))\n    print(extract_k_max((1,2,3,4,5,6,7), 2))\n    print(extract_k_max((1,2,3,4,5,6,7), 1))",
      -3.9921875
    ],
    [
      "def extract_max_min_k(t, k):\n    if k == 0:\n        return t[0], t[-1]\n\n    for i in range(k):\n        t.append(t[i] + t[i + 1])\n\n    return max(t), min(t)\n\n\nif __name__ == \"__main__\":\n    print(extract_max_min_k([1, 2, 3, 4, 5], 4))",
      -4.37890625
    ],
    [
      "def extract_k_max_min(nums, k):\n    # write your code here\n    return sorted(nums)[-k:] + sorted(nums)[:-k]\n\n\nprint(extract_k_max_min([1, 2, 3, 4, 5], 3))",
      -4.80078125
    ],
    [
      "class Solution(object):\n    def find_kth_element(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return max(nums[:k]), min(nums[:k])\n\n\ns = Solution()\nprint(s.find_kth_element([1,2,3,4,5,6], 2))",
      -4.84375
    ],
    [
      "def min_max_k(list_of_elements, k):\n    # create a list of the smallest and largest values\n    smallest = min(list_of_elements)\n    largest = max(list_of_elements)\n\n    # create a list of the k elements\n    sorted_list = sorted(list_of_elements)\n    # create a list of the k-1 elements\n    min_k_elements = sorted_list[:k]\n    max_k_elements = sorted_list[-k:]\n\n    # return the list of the smallest and largest values\n    return [smallest, largest], min_k_elements, max_k_elements\n\n\nlist_of_elements = [2, -3, 1, 4, -2, 5]\nprint(min_max_k(list_of_elements, 3))",
      -4.9375
    ],
    [
      "def extract_max_min(list, k):\n    if len(list) <= k:\n        return list\n    max_value = max(list)\n    min_value = min(list)\n    return [max_value, min_value]\n\nlist = [1,2,3,4,5]\nk = 3\nprint(extract_max_min(list, k))",
      -5.0078125
    ],
    [
      "def extract_min_max(a, k):\n    max_val = a[k - 1]\n    min_val = a[0]\n    for i in range(1, k):\n        if a[i] > max_val:\n            max_val = a[i]\n        if a[i] < min_val:\n            min_val = a[i]\n    return max_val, min_val\n\n\na = [2, 1, 4, 6, 7, 3, 5]\nprint(extract_min_max(a, 5))",
      -5.265625
    ],
    [
      "def get_min_max(nums, k):\n    return sorted(nums)[:k], sorted(nums)[-k:]\n\n\ndef test_min_max():\n    assert get_min_max([1, 2, 3, 4, 5, 6], 1) == [1, 5]\n    assert get_min_max([1, 2, 3, 4, 5, 6], 2) == [1, 5]\n    assert get_min_max([1, 2, 3, 4, 5, 6], 3) == [1, 5]\n    assert get_min_max([1, 2, 3, 4, 5, 6], 4) == [1, 5]\n    assert get_min_max([1, 2, 3, 4, 5, 6], 5) == [1, 5]\n    assert get_min_max([1, 2, 3, 4, 5, 6], 6) == [1, 5]",
      -5.3125
    ],
    [
      "def extract_max_min(arr, k):\n    max_element = max(arr)\n    min_element = min(arr)\n    return (max_element, min_element)\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    k = 2\n    print(extract_max_min(arr, k))\n\n\nif __name__ == '__main__':\n    main()",
      -5.734375
    ],
    [
      "def find_max_and_min(t, k):\n    max_val = t[0]\n    min_val = t[0]\n    for i in range(len(t)):\n        if t[i] > max_val:\n            max_val = t[i]\n        if t[i] < min_val:\n            min_val = t[i]\n    return [max_val, min_val]\n\n\nprint(find_max_and_min([1, 2, 3, 4, 5, 6], 2))",
      -6.03515625
    ],
    [
      "def extract_max_min(arr, k):\n    return sorted(arr)[-k:]\n\n\nif __name__ == '__main__':\n    print(extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    print(extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\n    print(extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0))",
      -6.09375
    ],
    [
      "class Solution:\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return nums[0], nums[0]\n        if len(nums) == 1:\n            return nums[0], nums[0]\n        if k == 1:\n            return max(nums), min(nums)\n        # O(nlogk) time | O(1) space\n        # find the maximum\n        maximum = max(nums)\n        # find the minimum\n        minimum = min(nums)\n        # find the kth largest\n        return maximum, minimum\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print(sol.findKthLargest([1, 2, 3, 4, 5], 2))\n    print(sol.findKthLargest([1, 2, 3, 4, 5], 4))\n    print(sol.findKthLargest([1, 2, 3, 4, 5], 0))\n    print(sol.findKthLargest([1, 2, 3, 4, 5], 1))\n    print(sol.findKthLargest([1, 2, 3, 4, 5], -1))\n    print(sol.findKthLargest([1, 2, 3, 4, 5], -2))\n    print(sol.findKthLargest([1, 2, 3, 4, 5], -3))",
      -6.15234375
    ],
    [
      "def max_min(tuple_, k):\n    max_val = max(tuple_)\n    min_val = min(tuple_)\n    if k == 0:\n        return (max_val, min_val)\n\n    for i in range(k):\n        if tuple_[i] > max_val:\n            max_val = tuple_[i]\n        if tuple_[i] < min_val:\n            min_val = tuple_[i]\n\n    return (max_val, min_val)\n\n\nif __name__ == \"__main__\":\n    print(max_min((1, 2, 3, 4, 5, 6, 7), 3))\n    print(max_min((1, 2, 3, 4, 5, 6, 7), 1))",
      -6.15625
    ],
    [
      "def find_kth_element(arr, k):\n    minimum = arr[0]\n    maximum = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < minimum:\n            minimum = arr[i]\n        if arr[i] > maximum:\n            maximum = arr[i]\n\n    return minimum, maximum\n\n\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(find_kth_element(arr, k))",
      -6.24609375
    ],
    [
      "def find_k_min_max(list, k):\n    max_element = list[0]\n    min_element = list[0]\n\n    for i in range(1, len(list)):\n        if list[i] > max_element:\n            max_element = list[i]\n        elif list[i] < min_element:\n            min_element = list[i]\n\n    return max_element, min_element\n\n\nprint(find_k_min_max([1, 2, 3, 4, 5, 6, 7], 3))",
      -6.41015625
    ],
    [
      "def extract_k_min_max(tuple, k):\n    n = len(tuple)\n    if n < k:\n        return (None, None)\n    if k == 1:\n        return tuple[0], tuple[0]\n    return extract_k_min_max(tuple[1:], k-1)\n\n\ndef main():\n    tuple = [1, 2, 3, 4, 5, 6, 7]\n    k = 2\n    print(extract_k_min_max(tuple, k))\n\n\nmain()",
      -6.76171875
    ],
    [
      "def extract_min_max(arr, k):\n    # Your code here\n    return arr[:k]\n\n\nprint(extract_min_max([1, 2, 3, 4, 5], 3))\nprint(extract_min_max([1, 2, 3, 4, 5], 4))\nprint(extract_min_max([1, 2, 3, 4, 5], 5))\nprint(extract_min_max([1, 2, 3, 4, 5], 6))\nprint(extract_min_max([1, 2, 3, 4, 5], 7))",
      -6.92578125
    ],
    [
      "def extract_min_max(arr, k):\n    if k == 0:\n        return arr[0], arr[0]\n    min_value, max_value = arr[0], arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_value:\n            min_value = arr[i]\n        if arr[i] > max_value:\n            max_value = arr[i]\n    return min_value, max_value\n\n\nprint(extract_min_max([1, 2, 3, 4, 5], 3))",
      -6.9453125
    ],
    [
      "def extract_max_min(A, k):\n    return max(A), min(A)\n\nif __name__ == '__main__':\n    assert extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == (1, 7)\n    assert extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == (1, 8)\n    assert extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == (1, 2)\n    assert extract_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == (1, 1)",
      -7.671875
    ],
    [
      "def find_max_min(lst, k):\n    max_count = 0\n    min_count = 0\n    for i in lst:\n        if i > max_count:\n            max_count = i\n        elif i < min_count:\n            min_count = i\n\n    return max_count, min_count\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_max_min(lst, 3))",
      -7.96484375
    ],
    [
      "def extract_max_min(tup, k):\n    if len(tup) < k:\n        return None\n\n    max = tup[-1]\n    min = tup[0]\n\n    for i in range(1, len(tup)):\n        if tup[i] > max:\n            max = tup[i]\n\n        if tup[i] < min:\n            min = tup[i]\n\n    return [max, min]\n\n\nif __name__ == \"__main__\":\n    assert extract_max_min([1, 2, 3, 4, 5], 2) == [5, 4]\n    assert extract_max_min([1, 2, 3, 4, 5], 5) == [3, 4]\n    assert extract_max_min([1, 2, 3, 4, 5], 3) == [2, 3]",
      -8.40625
    ],
    [
      "def min_max_k(lst, k):\n    if k == 0:\n        return lst\n\n    if len(lst) < k:\n        return None\n\n    min_lst, max_lst = [], []\n\n    for i in range(k):\n        if i == k - 1:\n            min_lst.append(lst[i])\n        else:\n            min_lst.append(min(lst[i], lst[i + 1]))\n\n    for i in range(k, len(lst)):\n        if i == k - 1:\n            max_lst.append(lst[i])\n        else:\n            max_lst.append(max(lst[i], lst[i + 1]))\n\n    return min_lst, max_lst\n\n\ndef min_max_k_iterative(lst, k):\n    if k == 0:\n        return lst\n\n    if len(lst) < k:\n        return None\n\n    min_lst, max_lst = [], []\n\n    for i in range(k):\n        if i == k - 1:\n            min_lst.append(lst[i])\n        else:\n            min_lst.append(min(lst[i], lst[i + 1]))\n\n    for i in range(k, len(lst)):\n        if i == k - 1:\n            max_lst.append(lst[i])\n        else:\n            max_lst.append(max(lst[i], lst[i + 1]))\n\n    return min_lst, max_lst\n\n\nif __name__ == \"__main__\":\n    assert min_max_k([1, 2, 3, 4], 1) == [1, 2]\n    assert min_max_k([1, 2, 3, 4], 2) == [2, 3]\n    assert min_max_k([1, 2, 3, 4], 3) == [1, 2, 3]\n    assert min_max_k([1, 2, 3, 4], 4) == [1, 2, 3, 4]\n    assert min_max_k([1, 2, 3, 4], 5) == [1, 2, 3, 4]",
      -8.5625
    ],
    [
      "def max_min_k(tuple, k):\n    if k == 0:\n        return tuple\n    else:\n        max_val = max(tuple)\n        min_val = min(tuple)\n        return tuple[tuple.index(max_val) + 1 : tuple.index(min_val) + 1]\n\n\nif __name__ == '__main__':\n    print(max_min_k((1, 3, 5, 7, 9, 11), 3))\n    print(max_min_k((2, 1, 3, 4, 5, 6, 7, 9, 11), 3))\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 9, 11), 2))\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 9, 11), 0))\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 9, 11), 1))",
      -8.7578125
    ],
    [
      "def find_kth_element(lst, k):\n    if k > len(lst):\n        return \"k is greater than the number of elements in the tuple\"\n\n    if k == 0:\n        return lst[0]\n\n    return lst[k - 1]\n\n\nif __name__ == \"__main__\":\n    assert find_kth_element([1, 2, 3, 4, 5], 2) == 3\n    assert find_kth_element([1, 2, 3, 4, 5], 1) == 2\n    assert find_kth_element([1, 2, 3, 4, 5], 0) == 5\n    assert find_kth_element([1, 2, 3, 4, 5], -1) == 5\n    assert find_kth_element([1, 2, 3, 4, 5], 3) == 3\n    assert find_kth_element([1, 2, 3, 4, 5], 4) == 4\n    assert find_kth_element([1, 2, 3, 4, 5], 5) == 4\n    assert find_kth_element([1, 2, 3, 4, 5], -2) == 4\n    assert find_kth_element([1, 2, 3, 4, 5], 1) == 2\n    assert find_kth_element([1, 2, 3, 4, 5], 0) == 1\n    assert find_kth_element([1, 2, 3, 4, 5], -1) == 1",
      -9.5546875
    ],
    [
      "def find_max_min(l, k):\n    if k == 0:\n        return l\n    if k == 1:\n        return max(l)\n    l.sort()\n    return l[k - 1], l[k - 2]\n\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 6))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 7))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 11))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 12))\nprint(find_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9], 13))",
      -10.4921875
    ],
    [
      "def extract_max_min(arr, k):\n    max_val = -1\n    min_val = float('inf')\n    for i in range(k):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return max_val, min_val\n\n\ndef extract_min_max(arr, k):\n    max_val = float('inf')\n    min_val = float('inf')\n    for i in range(k):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return max_val, min_val\n\n\nprint(extract_max_min([1, 2, 3, 4, 5, 6], 3))\nprint(extract_max_min([1, 2, 3, 4, 5, 6], 2))\nprint(extract_max_min([1, 2, 3, 4, 5, 6], 4))\nprint(extract_max_min([1, 2, 3, 4, 5, 6], 5))\nprint(extract_max_min([1, 2, 3, 4, 5, 6], 10))\nprint(extract_max_min([1, 2, 3, 4, 5, 6], 0))\nprint(extract_max_min([1, 2, 3, 4, 5, 6], -1))",
      -10.5234375
    ],
    [
      "def min_max_k(tup, k):\n    n = len(tup)\n    if n == 0:\n        return None\n    elif k == 0:\n        return tup[0], tup[0]\n    elif k == 1:\n        return tup[0], min(tup)\n    elif k == 2:\n        return tup[0], max(tup)\n    else:\n        return min_max_k(tup[1:], k-1)\n\n\nif __name__ == \"__main__\":\n    print(min_max_k((1, 2, 3, 4), 3))",
      -10.7578125
    ],
    [
      "class Solution(object):\n    def find_min_max(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # Solution 1:\n        # Time complexity: O(n^2)\n        # Space complexity: O(n)\n        if k == 0:\n            return nums\n        nums = sorted(nums)\n        return [nums[i] for i in range(k)]\n\n        # Solution 2:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        if k == 0:\n            return nums\n        nums = sorted(nums)\n        return nums[:k]\n\n        # Solution 3:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        if k == 0:\n            return nums\n        nums = sorted(nums)\n        return nums[-k:]\n\n        # Solution 4:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        if k == 0:\n            return nums\n        nums = sorted(nums)\n        return nums[-k:]\n\n        # Solution 5:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        if k == 0:\n            return nums\n        nums = sorted(nums)\n        return nums[:k]\n\n        # Solution 6:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        if k == 0:\n            return nums\n        nums = sorted(nums)\n        return nums[-k:]\n\n        # Solution 7:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        if k == 0:\n            return nums\n        nums = sorted(nums)\n        return nums[-k:]\n\n        # Solution 8:\n        # Time complexity: O(n)\n        # Space complexity: O(n)\n        if k == 0:\n            return nums\n        nums = sorted(nums)\n        return nums[-k:]\n\n        # Solution 9:\n        # Time complexity: O(n)\n        # Space complexity:",
      -11.7734375
    ],
    [
      "def find_kth_max_min(arr, k):\n    if len(arr) < k:\n        return [0, 0]\n\n    maximum = max(arr)\n    minimum = min(arr)\n\n    for i in range(k):\n        if arr[i] > maximum:\n            maximum = arr[i]\n        elif arr[i] < minimum:\n            minimum = arr[i]\n\n    return [maximum, minimum]\n\n\ndef find_kth_max_min_recursive(arr, k):\n    if len(arr) < k:\n        return [0, 0]\n\n    maximum = max(arr)\n    minimum = min(arr)\n\n    if k == 1:\n        return maximum, minimum\n\n    if maximum > minimum:\n        return find_kth_max_min_recursive(arr[:k], k)\n    else:\n        return find_kth_max_min_recursive(arr[k:], k)\n\n\nprint(find_kth_max_min_recursive([1, 2, 3, 4, 5], 2))",
      -11.796875
    ],
    [
      "def min_max_k(a, k):\n    if k == 0:\n        return min(a), max(a)\n    else:\n        return min_max_k(a, k-1)\n\n\nif __name__ == '__main__':\n    print(min_max_k([1, 3, 4, 5, 2, 6, 7], 2))\n    print(min_max_k([1, 3, 4, 5, 2, 6, 7], 3))\n    print(min_max_k([1, 3, 4, 5, 2, 6, 7], 4))\n    print(min_max_k([1, 3, 4, 5, 2, 6, 7], 1))",
      -11.8671875
    ],
    [
      "def find_min_max(A, k):\n    l = len(A)\n    if k > l:\n        return A\n    if k < 0:\n        return A\n    left = 0\n    right = l - k\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < A[k - 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return A[left:k + 1]\n\n\ndef test_func():\n    assert find_min_max([1, 2, 3, 4, 5], 2) == [1, 3]\n    assert find_min_max([1, 2, 3, 4, 5], 3) == [1, 2, 5]\n    assert find_min_max([1, 2, 3, 4, 5], -1) == [1, 2, 5]\n    assert find_min_max([1, 2, 3, 4, 5], 0) == [1, 2]\n    assert find_min_max([1, 2, 3, 4, 5], 1) == [1, 2]\n    assert find_min_max([1, 2, 3, 4, 5], 2) == [1, 2]\n    assert find_min_max([1, 2, 3, 4, 5], 3) == [1, 2]\n    assert find_min_max([1, 2, 3, 4, 5], 4) == [1, 2, 5]\n\n\nif __name__ == '__main__':\n    test_func()",
      -12.078125
    ],
    [
      "def find_max_min(a, k):\n    result = []\n    for i in range(k):\n        result.append(a[i])\n    result.sort()\n    return result\n\n\ndef find_min_max(a, k):\n    result = []\n    for i in range(k):\n        result.append(a[i])\n    result.sort()\n    return result\n\n\ndef find_max_min_sum(a, k):\n    result = []\n    for i in range(k):\n        result.append(a[i] + a[i + 1])\n    result.sort()\n    return result\n\n\ndef find_max_min_sum_reverse(a, k):\n    result = []\n    for i in range(k):\n        result.append(a[i] + a[i + 1])\n    result.sort()\n    return result\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_max_min(a, 3))\n    print(find_min_max(a, 3))\n    print(find_max_min_sum(a, 3))\n    print(find_min_max_sum(a, 3))\n    print(find_max_min_sum_reverse(a, 3))\n    print(find_min_max_sum_reverse(a, 3))",
      -12.0859375
    ],
    [
      "def find_max_min(a, k):\n    if k < 0:\n        return -1, -1\n    max_idx = -1\n    min_idx = -1\n    for i in range(len(a)):\n        if a[i] > a[max_idx]:\n            max_idx = i\n        if a[i] < a[min_idx]:\n            min_idx = i\n    return max_idx + 1, min_idx + 1\n\n\nif __name__ == \"__main__\":\n    a = (3, 4, 5, 6, 7, 8, 9)\n    print(find_max_min(a, 0))",
      -12.8046875
    ],
    [
      "class Solution(object):\n    def findMaxKthElement(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return self.findMaxK(nums, k, 0, len(nums) - 1)\n\n    def findMaxK(self, nums, k, start, end):\n        if start > end:\n            return None\n\n        if start == end:\n            return nums[start]\n\n        mid = (start + end) // 2\n        if nums[mid] > nums[start] and nums[mid] > nums[end]:\n            return self.findMaxK(nums, k, mid + 1, end)\n        elif nums[mid] < nums[start] and nums[mid] < nums[end]:\n            return self.findMaxK(nums, k, start, mid - 1)\n        else:\n            return self.findMaxK(nums, k, start, mid - 1)\n\ns = Solution()\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 4\nprint(s.findMaxKthElement(nums, k))",
      -14.265625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}