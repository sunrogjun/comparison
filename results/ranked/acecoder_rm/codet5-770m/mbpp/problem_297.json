{
  "problem": {
    "task_id": "MBPP/308",
    "prompt": "Write a function to find the specified number of largest products from two given lists.",
    "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
    "test_list": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ],
    "challenge_test_list": [],
    "problem_id": 297
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "class Solution:\n    def largestProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        nums1.sort()\n        nums2.sort()\n        return max(nums1[0] * nums2[0], nums1[1] * nums2[1], nums1[2] * nums2[2])",
      1.689453125
    ],
    [
      "def largest_product(nums1, nums2):\n    n = len(nums1)\n    m = len(nums2)\n    max_product = 0\n    for i in range(n):\n        for j in range(m):\n            if nums1[i] * nums2[j] > max_product:\n                max_product = nums1[i] * nums2[j]\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(largest_product([1, 2, 3], [3, 2, 1]))",
      1.470703125
    ],
    [
      "def largest_product(list1, list2, n):\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n\n    for i in range(n):\n        temp = list1[i] * list2[i]\n        if temp > list1[i] * list2[i]:\n            list1[i] = temp\n        if temp > list2[i] * list1[i]:\n            list2[i] = temp\n    return max(list1) * max(list2)\n\nprint(largest_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 10))",
      0.90283203125
    ],
    [
      "def largest_product(a,b):\n    a = sorted(a)\n    b = sorted(b)\n    return a[len(a) - 1] * b[len(b) - 1]\n\nprint(largest_product([5,10,7,2,3,15],[10,5,1,6,2,3]))",
      0.826171875
    ],
    [
      "class Solution:\n    def largestProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n\n        max_product = nums1[0] * nums2[0]\n\n        for i in range(1, len(nums1)):\n            max_product = max(max_product, nums1[i] * nums2[i])\n\n        return max_product",
      0.81005859375
    ],
    [
      "def largest_product(lst1, lst2):\n    return max(lst1[i] * lst2[i] for i in range(len(lst1)))",
      0.794921875
    ],
    [
      "def largest_product(a,b):\n    a.sort()\n    b.sort()\n    return max(a[0]*b[0], a[1]*b[1], a[2]*b[2])\n\n\na = [2,2,4,6]\nb = [2,4,6]\n\nprint(largest_product(a,b))",
      0.1866455078125
    ],
    [
      "def largest_product(arr1, arr2, n):\n    largest_product = arr1[0] * arr2[0]\n    for i in range(n):\n        largest_product = max(largest_product, arr1[i] * arr2[i])\n    return largest_product",
      0.0572509765625
    ],
    [
      "def largest_product(l1, l2):\n    n = len(l1)\n    largest = []\n\n    for i in range(n):\n        largest.append(l1[i] * l2[i])\n\n    return max(largest)\n\n\nprint(largest_product([3, 6, 7], [8, 9, 10]))\nprint(largest_product([2, 4, 6], [2, 2, 2]))",
      -0.042205810546875
    ],
    [
      "def largest_product(list1, list2, num):\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if (list1[i] * list2[j] > result[-1]):\n                result.append(list1[i] * list2[j])\n    return result\n\n\nprint(largest_product([-1, 3, -2, -2, -4], [3, 2, -2, -2, 3], 3))",
      -0.332763671875
    ],
    [
      "def largest_product(a, b, n):\n    largest_product_list = []\n    for i in range(len(a)):\n        for j in range(len(b)):\n            largest_product_list.append(a[i] * b[j])\n\n    return max(largest_product_list)\n\n\nprint(largest_product([1, 2, 3], [3, 2, 1], 5))",
      -0.537109375
    ],
    [
      "def largest_product(a, b, n):\n    max_product = 0\n    for i in range(n):\n        max_product = max(a[i] * b[i], max_product)\n    return max_product\n\n\na = [2, 4, 6]\nb = [2, 4, 6]\nn = 3\n\nprint(largest_product(a, b, n))",
      -0.6904296875
    ],
    [
      "def largest_product(nums1, nums2):\n    return max(nums1) * max(nums2)",
      -0.85595703125
    ],
    [
      "def largest_product(list1, list2, n):\n    l1 = sorted(list1)\n    l2 = sorted(list2)\n    return max(l1[n] * l2[n], l1[n] * l2[n])",
      -0.85693359375
    ],
    [
      "def largest_product(a, b):\n    largest = a[0] * b[0]\n    for i in range(1, len(a)):\n        largest = max(largest, a[i] * b[i])\n    return largest",
      -0.85693359375
    ],
    [
      "def largest_product(list_1, list_2):\n    list_1.sort()\n    list_2.sort()\n    return list_1[-1] * list_2[-1]",
      -0.85693359375
    ],
    [
      "def largest_product(a,b):\n    return max(a[i] * b[i] for i in range(len(a)))\n\na = [2,5,7,-1]\nb = [3,4,6,-2]\nprint(largest_product(a,b))",
      -0.85693359375
    ],
    [
      "def largest_product(list1, list2):\n    # write your code here\n    # return max(list1) * max(list2)\n    return max(list1) * max(list2) if len(list1) > len(list2) else max(list2) * max(list1)\n\n\nprint(largest_product([1, 2, 3], [4, 5, 6]))\nprint(largest_product([1, 2, 3], [4, 5, 6, 7, 8, 9]))",
      -0.85791015625
    ],
    [
      "def largest_product(list1, list2):\n    if len(list1) < len(list2):\n        return largest_product(list2, list1)\n\n    if len(list2) == 0:\n        return list1\n\n    max_product = 0\n    max_product_index = 0\n    for index in range(len(list1)):\n        if max_product < list1[index] * list2[index]:\n            max_product = list1[index] * list2[index]\n            max_product_index = index\n\n    return max_product, max_product_index\n\nprint(largest_product([3,4,-1], [-1,-3,2]))\nprint(largest_product([-1,-3,2], [-1,-3,4]))\nprint(largest_product([-1,-3,2], [-1,-3,-2]))\nprint(largest_product([-1,-3,2], [-1,-3,3]))\nprint(largest_product([-1,-3,2], [-1,-3,-2]))",
      -0.85791015625
    ],
    [
      "def largest_product(arr1, arr2):\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    largest_product = 0\n    for i in range(len(arr1)):\n        largest_product = max(largest_product, arr1[i]*arr2[i])\n    return largest_product\n\nif __name__ == \"__main__\":\n    arr1 = [1, 3, 5, 7, 9]\n    arr2 = [2, 4, 6, 8, 10]\n    print(largest_product(arr1, arr2))",
      -0.85791015625
    ],
    [
      "def largest_products(l1, l2):\n    largest_product = 0\n    for i in range(len(l1)):\n        largest_product = max(largest_product, l1[i] * l2[i])\n    return largest_product\n\n\nprint(largest_products([3, 3], [3, 4]))\nprint(largest_products([1, 2, 2, 2, 2], [2, 2, 4, 4, 4]))",
      -0.85791015625
    ],
    [
      "def largest_product(a, b):\n    if len(a) > len(b):\n        a, b = b, a\n    a.sort()\n    b.sort()\n    res = 0\n    for i in range(len(a)):\n        res = max(res, a[i] * b[i])\n    return res\n\nprint(largest_product([1, 3, 5, 7], [1, 2, 4, 5]))",
      -0.85791015625
    ],
    [
      "def largest_product(a, b):\n    max_prod = 0\n    for i in a:\n        for j in b:\n            prod = i * j\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\nprint(largest_product([1, 2, 3], [4, 5, 6]))\nprint(largest_product([2, 3, 4], [5, 6, 7]))\nprint(largest_product([2, 3, 4], [2, 4, 6]))\nprint(largest_product([3, 4, 5], [5, 6, 7]))\nprint(largest_product([3, 4, 5], [5, 7, 8]))\nprint(largest_product([2, 3, 4], [5, 6, 7]))\nprint(largest_product([2, 3, 4], [2, 4, 6]))",
      -0.85791015625
    ],
    [
      "def largest_product(arr1, arr2):\n    max_prod = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] * arr2[j] > max_prod:\n                max_prod = arr1[i] * arr2[j]\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    print(largest_product([1, 2, 3, 4], [2, 4, 6, 8]))",
      -0.85791015625
    ],
    [
      "def largest_product(arr1, arr2, num):\n    max_product = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            product = arr1[i] * arr2[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(largest_product(arr1, arr2, 5))",
      -0.85791015625
    ],
    [
      "def largest_product(l1,l2):\n    return max(l1)*max(l2)",
      -0.85791015625
    ],
    [
      "def largest_product(l1, l2):\n    max_product = 0\n    for i in l1:\n        for j in l2:\n            max_product = max(max_product, i * j)\n    return max_product\n\nif __name__ == \"__main__\":\n    print(largest_product([10, 20, 30, 40, 50], [10, 20, 30, 40, 50]))",
      -0.869140625
    ],
    [
      "def largest_product(l1, l2):\n    l1.sort()\n    l2.sort()\n    product = 0\n    for i in range(len(l1)):\n        product = max(product, l1[i]*l2[i])\n    return product\n\nif __name__ == '__main__':\n    print(largest_product([1,3,2,4,5], [2,4,6,8,10]))",
      -0.98193359375
    ],
    [
      "def largest_products(arr1, arr2, n):\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    res = []\n    for i in range(n):\n        res.append(max(arr1[i] * arr2[i], arr1[i] * arr2[n-i-1]))\n    return res\n\nprint(largest_products([3, 5, 4], [4, 8, -2], 3))\nprint(largest_products([3, 5, 4], [8, -2, 4], 3))\nprint(largest_products([3, 5, 4], [4, -2, 8], 3))\nprint(largest_products([3, 5, 4], [4, -2, 4], 2))",
      -1.28125
    ],
    [
      "def largest_product(arr1, arr2):\n    max_prod = arr1[0] * arr2[0]\n    for i in range(1, len(arr1)):\n        for j in range(1, len(arr2)):\n            if arr1[i] * arr2[j] > max_prod:\n                max_prod = arr1[i] * arr2[j]\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    arr1 = [4, 2, 7]\n    arr2 = [3, 8, 1, 5]\n    print(largest_product(arr1, arr2))",
      -1.3603515625
    ],
    [
      "def largest_product(arr1, arr2, n):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if i == j:\n                result = max(result, arr1[i] * arr2[j])\n            else:\n                result = max(result, arr1[i] * arr2[j] * arr1[j + 1])\n    return result",
      -1.3876953125
    ],
    [
      "def largest_product(nums1, nums2):\n    largest_product = 0\n    i = 0\n    j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] * nums2[j] > largest_product:\n            largest_product = nums1[i] * nums2[j]\n        i += 1\n        j += 1\n    return largest_product\n\n\nif __name__ == '__main__':\n    nums1 = [5, 3, 2, -4]\n    nums2 = [-3, 4, 1, -2, 5]\n    print(largest_product(nums1, nums2))",
      -1.740234375
    ],
    [
      "def largest_products(l1, l2):\n    result = 0\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] * l2[j] > result:\n                result = l1[i] * l2[j]\n    return result\n\n\nif __name__ == '__main__':\n    print(largest_products([2, 7, 9, 11], [3, 5, 8, 12]))",
      -1.7421875
    ],
    [
      "def largest_product(list1, list2):\n    # Write your code here\n    largest = 0\n    for x in list1:\n        for y in list2:\n            largest = max(largest, x*y)\n    return largest\n\nif __name__ == '__main__':\n    print(largest_product([4,2,3], [5,6,7]))",
      -1.7529296875
    ],
    [
      "def largest_product(list1, list2):\n    max_product = 0\n    for i in list1:\n        for j in list2:\n            if i * j > max_product:\n                max_product = i * j\n    return max_product\n\n\ndef test_largest_product():\n    assert largest_product([1, 2, 3], [3, 2, 1]) == 6\n    assert largest_product([1, 2, 3], [4, 5, 6]) == 24\n    assert largest_product([1, 2, 3], [1, 3, 2]) == 6\n    assert largest_product([1, 2, 3], [2, 1, 3]) == 12\n    assert largest_product([1, 2, 3], [2, 2, 3]) == 6\n    assert largest_product([1, 2, 3], [1, 3, 2]) == 12",
      -2.015625
    ],
    [
      "def largest_product(lst1, lst2):\n    largest_product = 0\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] * lst2[j] > largest_product:\n                largest_product = lst1[i] * lst2[j]\n    return largest_product\n\n\nprint(largest_product([2, 3, 6, 9], [2, 3, 6, 9]))",
      -2.03515625
    ],
    [
      "def largest_product(l1,l2):\n    l1.sort()\n    l2.sort()\n    largest = 0\n    for i in l1:\n        for j in l2:\n            if i*j > largest:\n                largest = i*j\n    return largest\n\nprint(largest_product([1,2,3],[4,5,6]))\nprint(largest_product([1,2,3],[4,5,6]))\nprint(largest_product([3,4,5,6],[7,8,9,10]))\nprint(largest_product([3,4,5,6],[7,8,9,10]))",
      -2.103515625
    ],
    [
      "def largest_product(list_1, list_2):\n    max_product = 0\n    for i in range(len(list_1)):\n        for j in range(len(list_2)):\n            if list_1[i] * list_2[j] > max_product:\n                max_product = list_1[i] * list_2[j]\n    return max_product\n\n\nprint(largest_product([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))",
      -2.134765625
    ],
    [
      "def largest_product(nums1, nums2):\n    nums1.sort()\n    nums2.sort()\n    largest_prod = nums1[0] * nums2[0]\n    for i in range(1, len(nums1)):\n        largest_prod = max(largest_prod, nums1[i] * nums2[i])\n    return largest_prod\n\n\nprint(largest_product([1, 2, 3, 4], [2, 3, 4, 5]))",
      -2.25390625
    ],
    [
      "def largest_product(nums1, nums2):\n    max_product = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] * nums2[j] > max_product:\n                max_product = nums1[i] * nums2[j]\n    return max_product\n\nnums1 = [1,2,3,4,5,6,7]\nnums2 = [3,4,5,6,7,8,9]\nprint(largest_product(nums1, nums2))",
      -2.376953125
    ],
    [
      "def largest_products(list1, list2, num):\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n\n    max_prod = 0\n    i = 0\n    while i < len(list1):\n        max_prod = max(max_prod, list1[i] * list2[i])\n        i += 1\n    return max_prod\n\n\nprint(largest_products([2, 5, -2, 1, -3], [1, 3, -3, 2, -2], 4))\nprint(largest_products([-1, -2, -3], [1, 3, -3, 2, -2], 4))",
      -2.474609375
    ],
    [
      "def largest_product(lst1, lst2, n):\n    max_product = 0\n    lst1_len = len(lst1)\n    lst2_len = len(lst2)\n    for i in range(lst1_len):\n        for j in range(lst2_len):\n            if i == 0 or j == 0:\n                continue\n            if lst1[i] * lst2[j] > max_product:\n                max_product = lst1[i] * lst2[j]\n    return max_product\n\n\nprint(largest_product([2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7], 3))",
      -2.482421875
    ],
    [
      "def largest_product(a, b):\n    max_product = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            max_product = max(max_product, a[i] * b[j])\n    return max_product\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [6, 7, 8, 9, 10]\n    print(largest_product(a, b))",
      -2.53515625
    ],
    [
      "def largest_product(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: int\n    \"\"\"\n\n    max_product = 0\n    list1.sort()\n    list2.sort()\n\n    for i in range(0, len(list1)):\n        for j in range(0, len(list2)):\n            if list1[i] * list2[j] > max_product:\n                max_product = list1[i] * list2[j]\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 3, 4, 5, 6]\n    print(largest_product(list1, list2))",
      -2.77734375
    ],
    [
      "class Solution:\n    def largestProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        l1, l2 = len(nums1), len(nums2)\n        if l1 < l2:\n            nums1, nums2 = nums2, nums1\n        nums1, nums2 = sorted(nums1), sorted(nums2)\n        ans = 0\n        for i in range(l1):\n            for j in range(l2):\n                ans = max(ans, nums1[i] * nums2[j])\n        return ans",
      -2.857421875
    ],
    [
      "def largest_product(numbers1, numbers2):\n    largest_number = 0\n    smallest_number = float(\"inf\")\n    for number in numbers1:\n        largest_number = max(number, largest_number)\n    for number in numbers2:\n        smallest_number = min(number, smallest_number)\n    largest_product = largest_number * smallest_number\n    return largest_product\n\n\nprint(largest_product([3, 2, 4, 5], [1, 2, 3, 4]))",
      -2.888671875
    ],
    [
      "def largest_product(a, b):\n    # Write your code here\n    max_product = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] * b[j] > max_product:\n                max_product = a[i] * b[j]\n\n    return max_product\n\n\nprint(largest_product([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))",
      -2.9296875
    ],
    [
      "class Solution:\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        result = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] * nums2[j] > result:\n                result = nums1[i] * nums2[j]\n            if nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return result\n\n\nif __name__ == \"__main__\":\n    nums1 = [2, 2]\n    nums2 = [4, 7]\n    s = Solution()\n    print(s.largestProduct(nums1, nums2))",
      -2.97265625
    ],
    [
      "def largest_product(list_1, list_2):\n\t# Your code here\n\tmax_product = 0\n\tlist_1.sort()\n\tlist_2.sort()\n\tfor i in range(len(list_1)):\n\t\tfor j in range(len(list_2)):\n\t\t\tif list_1[i] * list_2[j] > max_product:\n\t\t\t\tmax_product = list_1[i] * list_2[j]\n\treturn max_product\n\nprint(largest_product([1, 2, 3, 4, 5, 6, 7, 8], [7, 8, 9, 10, 11, 12]))",
      -3.015625
    ],
    [
      "def largest_product(a, b):\n    max_product = 0\n    for i in range(len(a)):\n        max_product = max(max_product, a[i] * b[i])\n    return max_product\n\n\nif __name__ == '__main__':\n    print(largest_product([1, 2, 3, 4], [2, 4, 6, 8]))",
      -3.03125
    ],
    [
      "def largest_product(l1, l2):\n    if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    l1.sort()\n    res = 0\n    for i in range(len(l1)):\n        res = max(res * l1[i], l2[i])\n    return res\n\nif __name__ == \"__main__\":\n    l1 = [1,2,3]\n    l2 = [4,5,6]\n    print(largest_product(l1, l2))",
      -3.201171875
    ],
    [
      "def largest_product(arr1, arr2):\n    max_product = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] * arr2[j] > max_product:\n                max_product = arr1[i] * arr2[j]\n    return max_product\n\nprint(largest_product([-2, -5, -3, -4, -1, 2, 5, -1], [1, 2, 3, 4, 5, -1, 2, 5]))",
      -3.263671875
    ],
    [
      "def largest_product(arr1, arr2):\n    largest = 0\n    for i in range(0, len(arr1)):\n        for j in range(0, len(arr2)):\n            if arr1[i] * arr2[j] > largest:\n                largest = arr1[i] * arr2[j]\n    return largest\n\n\ndef main():\n    arr1 = [2, -5, -1, 2, 5, -1, -3, 2, -2, -3]\n    arr2 = [5, -1, -1, -1]\n    print(largest_product(arr1, arr2))\n\n\nif __name__ == '__main__':\n    main()",
      -3.318359375
    ],
    [
      "def largest_product(list_1, list_2, num):\n    largest_product_list = []\n\n    for i in range(num):\n        largest_product_list.append(max(list_1[i] * list_2[i], 1))\n\n    return largest_product_list\n\n\nif __name__ == '__main__':\n    print(largest_product([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 5))",
      -3.412109375
    ],
    [
      "def largest_product(a, b):\n    if len(a) > len(b):\n        a, b = b, a\n\n    a.sort()\n    b.sort()\n\n    result = [0] * len(b)\n    for i in range(len(a)):\n        result[a[i]] = a[i] * b[0]\n        for j in range(1, len(b)):\n            result[a[i]] = max(result[a[i]], a[i] * b[j])\n\n    return result\n\n\n\nif __name__ == '__main__':\n    print(largest_product([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9]))",
      -3.439453125
    ],
    [
      "def largest_product(list1, list2, num):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if i == j:\n                continue\n            max_product = max(max_product, list1[i] * list2[j])\n    return max_product\n\n\nlist1 = [2, 4, 6]\nlist2 = [4, 6, 8]\nnum = 3\n\nprint(largest_product(list1, list2, num))",
      -3.51953125
    ],
    [
      "def largest_product(a, b):\n    if len(a) == 0:\n        return a + b\n    if len(b) == 0:\n        return b + a\n    a.sort()\n    b.sort()\n    return max(a[0] * b[0], a[1] * b[1], a[2] * b[2])\n\n\nif __name__ == \"__main__\":\n    print(largest_product([3, 2, 4], [3, 2, 5]))",
      -3.533203125
    ],
    [
      "def largest_product(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a)!= len(b):\n        return 0\n\n    a.sort()\n    b.sort()\n\n    result = 0\n\n    for i in range(len(a)):\n        result = max(result, a[i] * b[i])\n\n    return result",
      -3.79296875
    ],
    [
      "def largest_product(a, b):\n    if len(a) == 0 or len(b) == 0:\n        return 0\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] * b[j] > ans:\n                ans = a[i] * b[j]\n    return ans\n\n\nprint(largest_product([1, 2, 3], [3, 5, 8]))",
      -3.84765625
    ],
    [
      "def largest_product(arr1, arr2, num):\n    arr1.sort()\n    arr2.sort()\n\n    largest = arr1[0] * arr2[0]\n    for i in range(1, len(arr1)):\n        largest = max(largest, arr1[i] * arr2[i])\n\n    return largest * num\n\n\nif __name__ == '__main__':\n    print(largest_product([1, 3, 2, -2], [-2, 5, -3, -7], 5))",
      -3.875
    ],
    [
      "def largest_product(l1, l2, num):\n  if len(l1) < len(l2):\n    return largest_product(l2, l1, num)\n  elif len(l2) < len(l1):\n    return largest_product(l1, l2, num)\n  else:\n    max_prod = 0\n    for i in range(len(l1)):\n      for j in range(len(l2)):\n        if l1[i] * l2[j] > max_prod:\n          max_prod = l1[i] * l2[j]\n    return max_prod\n\nprint(largest_product([1, 2, 3, 4], [5, 6, 7, 8], 3))\nprint(largest_product([-1, 0, 1, 2, 3, 4], [-2, -3, -4, -5, -6, -7, -8], 2))",
      -3.88671875
    ],
    [
      "def largest_product(list1, list2):\n    max_list = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if i == j:\n                continue\n            max_list.append(list1[i] * list2[j])\n    return max(max_list)\n\n\nprint(largest_product([2, 3, -1], [-1, -3, 5]))\nprint(largest_product([2, 3, -1], [1, -2, -3]))",
      -3.89453125
    ],
    [
      "def largest_product(nums1, nums2):\n    if len(nums1) == len(nums2):\n        return max(nums1) * max(nums2)\n    else:\n        return 0\n\nprint(largest_product([1,2,3], [4,5,6]))",
      -3.98828125
    ],
    [
      "def largest_product(nums1, nums2):\n    return max(nums1[0]*nums2[0], nums1[1]*nums2[1])\n\nif __name__ == \"__main__\":\n    print(largest_product([5, 3, 2, 7], [3, 5, 6]))",
      -4.03125
    ],
    [
      "def largest_product(nums1, nums2, num):\n    if len(nums1) > len(nums2):\n        return largest_product(nums2, nums1, num)\n    elif len(nums2) > len(nums1):\n        return largest_product(nums1, nums2, num)\n    elif nums1[0] * nums2[0] > num:\n        return largest_product(nums2, nums1, num)\n    else:\n        return largest_product(nums1, nums2, num)\n\n\nif __name__ == \"__main__\":\n    print(largest_product([1, 2, 3, 4], [1, 2, 3, 4], 2))",
      -4.07421875
    ],
    [
      "def largest_products(l1, l2):\n    return max(l1 * l2)\n\n\nif __name__ == \"__main__\":\n    print(largest_products([1, 2, 3, 4, 5], [4, 6, 7, 8, 9]))\n    print(largest_products([1, 2, 3, 4, 5], [3, 6, 8, 9, 10]))\n    print(largest_products([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))",
      -4.21875
    ],
    [
      "def largest_product(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    largest = arr1[0] * arr2[0]\n    for i in range(1, len(arr1)):\n        largest = max(largest, arr1[i] * arr2[i])\n    return largest\n\nprint(largest_product([1, 2, 4, 6], [2, 4, 5, 7]))",
      -4.2265625
    ],
    [
      "def largest_product(a, b):\n    if len(a) < len(b):\n        a, b = b, a\n\n    max_product = 0\n    for num in a:\n        for num2 in b:\n            if num * num2 > max_product:\n                max_product = num * num2\n\n    return max_product\n\n\nif __name__ == '__main__':\n    print(largest_product([1, 2, 3, 4, 5], [6, 7, 8, 9]))\n    print(largest_product([-1, -2, -3], [-4, -5, -6]))\n    print(largest_product([1, 2, 3], [-4, -5, -6]))\n    print(largest_product([1, 2, 3], [-1, -2, -3]))\n    print(largest_product([1, 2, 3], [1, 2, -3]))\n    print(largest_product([1, 2, 3], [3, 1, 2, -3]))\n    print(largest_product([1, 2, 3], [2, -3, 3]))",
      -4.2421875
    ],
    [
      "def largest_product(list1, list2):\n    if len(list1) < len(list2):\n        return largest_product(list2, list1)\n    else:\n        return largest_product(list1, list2)\n\n\nprint(largest_product([1, 2, 3], [2, 4, 6]))\nprint(largest_product([1, 2, 3], [4, 5, 7]))\nprint(largest_product([1, 2, 3], [6, 7, 8]))",
      -4.3125
    ],
    [
      "def largest_product(list1, list2):\n    max_prod = list1[0] * list2[0]\n    for i in range(1, len(list1)):\n        max_prod = max(max_prod, list1[i] * list2[i])\n    return max_prod\n\n\nprint(largest_product([1, 3, 5], [2, 4, 6]))\nprint(largest_product([1, 3, 5], [3, 4, 6]))\nprint(largest_product([1, 3, 5], [2, 4, 6]))",
      -4.31640625
    ],
    [
      "def largest_product(a, b):\n    return max(a[i] * b[i] for i in range(len(a)))\n\nprint(largest_product([1,2,3], [4,5,6]))\nprint(largest_product([2,3,4], [5,6,7]))\nprint(largest_product([1,2,3,4,5], [6,7,8,9]))",
      -4.51953125
    ],
    [
      "def largest_product(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return 0\n    else:\n        # create a list of unique elements\n        unique_list = list(set(list1 + list2))\n        # get the largest product\n        largest_product = max(unique_list) * max(unique_list)\n        return largest_product\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [5, 7, 9, 11, 13]\n    print(largest_product(list1, list2))",
      -4.578125
    ],
    [
      "class Solution(object):\n    def largestProduct(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        nums1.sort()\n        nums2.sort()\n        return max(nums1[0] * nums2[0], nums1[1] * nums2[1], nums1[2] * nums2[2])\n\na = Solution()\nprint a.largestProduct([2,5,4,7],[2,3,4,7])",
      -4.61328125
    ],
    [
      "def largest_product(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    l = len(arr1)\n    m = len(arr2)\n    res = 0\n    for i in range(l):\n        for j in range(m):\n            if arr1[i] * arr2[j] > res:\n                res = arr1[i] * arr2[j]\n    return res\n\n\ndef main():\n    print(largest_product([1, 2, 3], [4, 5, 6]))\n    print(largest_product([1, 2, 3], [7, 8, 9]))\n    print(largest_product([1, 2, 3], [1, 2, 3]))\n    print(largest_product([1, 2, 3], [1, 2, 3]))\n    print(largest_product([1, 2, 3], [1, 2, 3, 4, 5, 6]))\n    print(largest_product([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.8125
    ],
    [
      "def largest_product(a, b):\n    if len(a) > len(b):\n        a, b = b, a\n    max_product = a[0] * b[0]\n    for i in range(1, len(a)):\n        max_product = max(max_product * a[i], b[i] * a[i])\n    return max_product\n\nprint(largest_product([2, 3, -1, 4], [2, 3, -1, 4]))",
      -4.99609375
    ],
    [
      "def largest_product(arr1, arr2):\n    max_prod = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            max_prod = max(max_prod, arr1[i] * arr2[j])\n    return max_prod\n\n\nprint(largest_product([1, 2, 3, 4, 5, 6], [3, 5, 7, 9, 11, 13]))\nprint(largest_product([1, 2, 3, 4, 5, 6], [3, 5, 7, 9, 11, 13]))",
      -5.125
    ],
    [
      "def largest_product(arr1, arr2, n):\n    largest_product = -1\n    for i in range(n):\n        for j in range(n):\n            if arr1[i] * arr2[j] > largest_product:\n                largest_product = arr1[i] * arr2[j]\n    return largest_product\n\narr1 = [2,3,4,5,6,7,8,9]\narr2 = [1,2,3,4,5,6,7,8,9]\nprint(largest_product(arr1, arr2, 3))",
      -5.38671875
    ],
    [
      "def largest_product(arr1, arr2, num):\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    max_prod = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] * arr2[j] > max_prod:\n                max_prod = arr1[i] * arr2[j]\n    return max_prod\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [7, 8, 9, 10, 11, 12]\n    num = 10\n    print(largest_product(arr1, arr2, num))",
      -5.3984375
    ],
    [
      "def largest_products(a, b, n):\n    result = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            result += a[i]\n        elif a[i] < b[i]:\n            result += b[i]\n    return result\n\na = [1,3,6,2,5]\nb = [2,4,7,8,9]\n\nprint(largest_products(a, b, 5))",
      -5.625
    ],
    [
      "def largest_product(a, b, n):\n    a.sort()\n    b.sort()\n\n    largest_prod = 0\n    for i in range(n):\n        largest_prod = max(largest_prod * a[i], largest_prod * b[i])\n\n    return largest_prod\n\n\nif __name__ == \"__main__\":\n    assert largest_product([2, 3, 5], [1, 2, 4], 5) == 30\n    assert largest_product([1, 2, 3], [3, 2, 1], 5) == 9\n    assert largest_product([1, 2, 3], [2, 4, 3], 5) == 36",
      -5.8125
    ],
    [
      "def largest_product(a, b, n):\n    product = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] * b[j] > product:\n                product = a[i] * b[j]\n    return product\n\n\n\nif __name__ == \"__main__\":\n    print(largest_product([1,2,3], [4,5,6], 3))\n    print(largest_product([1,2,3], [4,5,6], 4))\n    print(largest_product([1,2,3], [4,5,6], 5))\n    print(largest_product([1,2,3], [4,5,6], 6))",
      -5.9609375
    ],
    [
      "def largest_product(arr1, arr2, n):\n    max_product = 0\n    for i in range(n):\n        if arr1[i] > arr2[i]:\n            max_product = max(max_product, arr1[i] * arr2[i])\n        else:\n            max_product = max(max_product, arr2[i] * arr1[i])\n    return max_product\n\n\ndef main():\n    arr1 = [1, 2, 3, 4]\n    arr2 = [1, 2, 3, 4]\n    n = 3\n    print(largest_product(arr1, arr2, n))\n\n\nif __name__ == '__main__':\n    main()",
      -6.10546875
    ],
    [
      "def largest_product(a, b, n):\n    a_dict = {}\n    for i in range(n):\n        a_dict[a[i]] = i\n\n    b_dict = {}\n    for i in range(n):\n        b_dict[b[i]] = i\n\n    largest_prod = 0\n    for i in range(len(a)):\n        if a[i] in a_dict:\n            largest_prod = max(largest_prod, a[i] * b[i])\n\n    for i in range(len(b)):\n        if b[i] in b_dict:\n            largest_prod = max(largest_prod, b[i] * a[i])\n\n    return largest_prod\n\nprint(largest_product([4, 5, 2, -5], [3, 2, -5, 8], 6))",
      -6.171875
    ],
    [
      "def largest_product(list_1, list_2):\n    if len(list_1) > len(list_2):\n        list_1, list_2 = list_2, list_1\n    if len(list_2) == 0:\n        return 0\n    largest = 0\n    for i in range(len(list_1)):\n        largest = max(list_1[i] * list_2[0], largest)\n    return largest\n\n\nif __name__ == \"__main__\":\n    assert largest_product([1, 2, 3, 4], [2, 3, 4]) == 12\n    assert largest_product([1, 2, 3, 4], [1, 2]) == 12\n    assert largest_product([1, 2, 3, 4], [1, 3, 4]) == 6\n    assert largest_product([1, 2, 3, 4], [2, 3, 4]) == 6\n    assert largest_product([1, 2, 3, 4], [3, 4, 5]) == 5\n    assert largest_product([1, 2, 3, 4], [3, 5, 6]) == 12\n    assert largest_product([1, 2, 3, 4], [5, 6, 7]) == 12\n    assert largest_product([1, 2, 3, 4], [6, 7, 8]) == 12\n    assert largest_product([1, 2, 3, 4], [7, 8, 9]) == 12\n    assert largest_product([1, 2, 3, 4], [8, 9, 10]) == 12\n    assert largest_product([1, 2, 3, 4], [9, 10, 11]) == 12\n    assert largest_product([1, 2, 3, 4], [10, 11, 12]) == 12\n    assert largest_product([1, 2, 3, 4], [11, 12, 13]) == 12\n    assert largest_product([1, 2, 3, 4], [12, 13, 14]) == 12\n    assert largest_product([1, 2, 3, 4], [13, 14, 15]) == 12",
      -6.24609375
    ],
    [
      "def largest_product(numbers1, numbers2, num):\n    max_product = 0\n    for num in numbers1:\n        for num2 in numbers2:\n            if num * num2 > max_product:\n                max_product = num * num2\n    return max_product\n\n\nprint(largest_product([3, 4, -2, -5], [1, 2, 3], 5))",
      -6.40625
    ],
    [
      "def largest_product(a, b):\n    if len(a) < len(b):\n        a, b = b, a\n    result = 0\n    for i in range(len(a)):\n        result = max(result, a[i] * b[i])\n    return result\n\n\na = [2, 2, 3, 2, 4, 2, 3]\nb = [3, 2, 2, 2, 4, 2, 3]\nprint(largest_product(a, b))",
      -6.42578125
    ],
    [
      "def largest_product(list_a, list_b, n):\n    if n == 0:\n        return 0\n\n    largest_product_list = [0] * n\n\n    for i in range(n):\n        largest_product_list[i] = max(list_a[i] * list_b[i], largest_product_list[i - 1] * list_a[i - 1])\n\n    return largest_product_list[n - 1]\n\n\nif __name__ == '__main__':\n    assert largest_product([1, 2, 3], [4, 5, 6], 2) == 24\n    assert largest_product([1, 2, 3], [4, 5, 6], 3) == 120",
      -6.67578125
    ],
    [
      "def largest_products(lst1, lst2):\n    lst1.sort()\n    lst2.sort()\n    product = 0\n\n    for i in range(len(lst1)):\n        product = max(product, lst1[i] * lst2[i])\n\n    return product\n\n\nif __name__ == '__main__':\n    lst1 = [3, 2, 7, 4, 5]\n    lst2 = [2, 3, 4, 5, 6]\n\n    print(largest_products(lst1, lst2))",
      -6.8359375
    ],
    [
      "def largest_product(a, b):\n    if len(a) < len(b):\n        a, b = b, a\n\n    max_prod = 0\n    max_prod_index = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] * b[j] > max_prod:\n                max_prod = a[i] * b[j]\n                max_prod_index = i\n\n    return max_prod, max_prod_index\n\n\nif __name__ == '__main__':\n    print(largest_product([1, 2, 3, 4], [2, 5, 6, 7]))",
      -7.31640625
    ],
    [
      "def largest_product(l1, l2, n):\n    l1.sort()\n    l2.sort()\n    result = [0] * n\n    result[0] = l1[0] * l2[0]\n    for i in range(1, n):\n        result[i] = max(result[i-1] * l1[i] * l2[i], result[i-1] * l1[i-1] * l2[i-1])\n    return result[-1]\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4]\n    l2 = [2, 4, 8, 16]\n    n = 5\n    print(largest_product(l1, l2, n))",
      -7.39453125
    ],
    [
      "def largest_product(list_1, list_2):\n    # if len(list_1) > len(list_2):\n    #     return largest_product(list_2, list_1)\n    # if len(list_2) > len(list_1):\n    #     return largest_product(list_1, list_2)\n    return max(list_1[0] * list_2[0], list_1[1] * list_2[1], list_1[2] * list_2[2])\n\n\nprint(largest_product([1, 2, 3], [4, 5, 6]))",
      -7.41796875
    ],
    [
      "def largest_product(list1, list2):\n    # Write your code here\n    max_product = 0\n    for num in list1:\n        for num2 in list2:\n            if num*num2 > max_product:\n                max_product = num*num2\n    return max_product\n\n\ndef largest_product2(list1, list2):\n    # Write your code here\n    max_product = 0\n    for num in list1:\n        for num2 in list2:\n            max_product = max(num, num2, max_product)\n    return max_product\n\n\ndef largest_product3(list1, list2):\n    # Write your code here\n    max_product = 0\n    for num in list1:\n        for num2 in list2:\n            max_product = max(num, num2, max_product, num*num2)\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(largest_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))\n    print(largest_product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(largest_product([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n    print(largest_product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(largest_product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(largest_product([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n    print(largest_product([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n    print(largest_product([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n    print(largest_product([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n    print(largest_product([1, 2, 3",
      -7.51171875
    ],
    [
      "def largest_product(list1, list2):\n    # your code here\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    if len(list1) > len(list2):\n        list2, list1 = list1, list2\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] * list2[j] > result[-1]:\n                result.append(list1[i] * list2[j])\n    return max(result)\n\n\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [7, 8, 9, 10, 11, 12]\n\nprint(largest_product(list1, list2))",
      -8.265625
    ],
    [
      "def largest_product(a, b):\n    if len(a) > len(b):\n        a, b = b, a\n    a.sort()\n    b.sort()\n    i, j = 0, 0\n    while i < len(a) and j < len(b):\n        if a[i] * b[j] > 0:\n            return a[i] * b[j]\n        i += 1\n        j += 1\n    return 0\n\nprint(largest_product([1,2,3,4,5,6], [1,2,3,4,5,6]))\nprint(largest_product([1,2,3,4,5,6], [7,8,9,10,11,12]))",
      -8.8984375
    ],
    [
      "def largest_product(arr1, arr2, num):\n    arr1.sort()\n    arr2.sort()\n    max_prod = 0\n    for i in range(len(arr1)):\n        max_prod = max(max_prod, arr1[i] * arr2[i])\n    return max_prod\n\n\nif __name__ == '__main__':\n    assert largest_product([1, 2, 3], [1, 2, 3], 5) == 24\n    assert largest_product([1, 2, 3], [2, 3, 4], 5) == 24\n    assert largest_product([1, 2, 3], [4, 5, 6], 5) == 24",
      -9.40625
    ],
    [
      "def largest_product(nums1, nums2, num):\n    # Sort the lists in ascending order\n    nums1.sort()\n    nums2.sort()\n    # Calculate the largest product of the two lists\n    largest = 0\n    for i in range(len(nums1)):\n        largest = max(largest, nums1[i] * nums2[i])\n    return largest\n\n\nprint(largest_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 6))\nprint(largest_product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 6))",
      -9.6640625
    ],
    [
      "def largest_product(nums_1, nums_2):\n    # Your code here\n    nums_1.sort()\n    nums_2.sort()\n    if len(nums_1)!= len(nums_2):\n        return 0\n    largest_product_1 = nums_1[0] * nums_2[0]\n    largest_product_2 = nums_1[-1] * nums_2[-1]\n    for i in range(len(nums_1) - 1):\n        largest_product_1 = max(largest_product_1, nums_1[i] * nums_2[i])\n    for j in range(len(nums_2) - 1):\n        largest_product_2 = max(largest_product_2, nums_1[-1] * nums_2[j])\n    return largest_product_1 * largest_product_2\n\n\nprint(largest_product([1, 2, 3, 4, 5], [1, 2, 4, 6, 7]))",
      -12.453125
    ],
    [
      "def largest_product(list1, list2):\n    largest_product = 0\n    largest_index = 0\n\n    while largest_product < len(list1) and largest_product < len(list2):\n        if list1[largest_index] * list2[largest_index] > largest_product:\n            largest_product = list1[largest_index] * list2[largest_index]\n            largest_index += 1\n        else:\n            largest_index += 1\n\n    return largest_index\n\n\nif __name__ == \"__main__\":\n    print(largest_product([1, 2, 3], [4, 5, 6]))\n    print(largest_product([1, 2, 3], [2, 2, 2]))\n    print(largest_product([1, 2, 3], [3, 3, 3]))\n    print(largest_product([1, 2, 3], [2, 3, 3]))\n    print(largest_product([1, 2, 3], [3, 3, 3]))",
      -12.46875
    ],
    [
      "def largest_product(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    largest_product_len = 0\n\n    largest_product = 0\n    largest_product_index = 0\n\n    for i in range(arr1_len):\n        if i == 0:\n            largest_product = arr1[i] * arr2[i]\n        elif i == arr1_len - 1:\n            largest_product = arr1[i] * arr2[i + 1]\n        else:\n            largest_product = arr1[i] * arr2[i + 1] * arr1[i + 1]\n        largest_product_index = i\n        largest_product_len = max(largest_product_len, largest_product_index)\n\n    return largest_product_len\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [2, 3, 4, 5, 6]\n\n    print(largest_product(arr1, arr2))",
      -14.9453125
    ],
    [
      "def largest_product(arr1, arr2, n):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n^2)\n    \"\"\"\n    if n == 1:\n        return max(arr1[0], arr2[0])\n    if n == 2:\n        return max(arr1[0] * arr2[0], arr1[1] * arr2[1])\n    if n == 3:\n        return max(arr1[0] * arr2[0] * arr1[1], arr1[1] * arr2[1] * arr1[2])\n\n    max_product = 0\n    for i in range(n):\n        for j in range(n):\n            max_product = max(max_product, largest_product(arr1[i], arr2[j], n-i-j))\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(largest_product([1, 2, 3, 4], [2, 3, 4, 5], 3))",
      -15.0234375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}