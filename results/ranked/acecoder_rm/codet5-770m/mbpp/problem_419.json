{
  "problem": {
    "task_id": "MBPP/430",
    "prompt": "Write a function to find the directrix of a parabola.",
    "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
    "test_list": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ],
    "challenge_test_list": [],
    "problem_id": 419
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def parabola(x,y):\n    return x+y\n\n\nprint(parabola(3,4))",
      3.20703125
    ],
    [
      "def parabola(parabola):\n    if parabola == \"A\":\n        return \"A\"\n    elif parabola == \"B\":\n        return \"B\"\n    elif parabola == \"C\":\n        return \"C\"\n    elif parabola == \"D\":\n        return \"D\"\n    elif parabola == \"E\":\n        return \"E\"\n    elif parabola == \"F\":\n        return \"F\"\n    elif parabola == \"G\":\n        return \"G\"\n    elif parabola == \"H\":\n        return \"H\"\n    elif parabola == \"I\":\n        return \"I\"\n    elif parabola == \"J\":\n        return \"J\"\n    elif parabola == \"K\":\n        return \"K\"\n    elif parabola == \"L\":\n        return \"L\"\n    elif parabola == \"M\":\n        return \"M\"\n    elif parabola == \"N\":\n        return \"N\"\n    elif parabola == \"O\":\n        return \"O\"\n    elif parabola == \"P\":\n        return \"P\"\n    elif parabola == \"Q\":\n        return \"Q\"\n    elif parabola == \"R\":\n        return \"R\"\n    elif parabola == \"S\":\n        return \"S\"\n    elif parabola == \"T\":\n        return \"T\"\n    elif parabola == \"U\":\n        return \"U\"\n    elif parabola == \"V\":\n        return \"V\"\n    elif parabola == \"W\":\n        return \"W\"\n    elif parabola == \"X\":\n        return \"X\"\n    elif parabola == \"Y\":\n        return \"Y\"\n    elif parabola == \"Z\":\n        return \"Z\"\n\n\nprint(parabola(\"H\"))\nprint(parabola(\"K\"))\nprint(parabola(\"S\"))\nprint(parabola(\"M\"))\nprint(parabola(\"A",
      2.12109375
    ],
    [
      "def find_directrix(p):\n    if p == 0:\n        return 0\n    else:\n        return p - 1",
      1.689453125
    ],
    [
      "def parabola(n):\n    return n**2\n\ndef main():\n    parabola(3)\n\nif __name__ == '__main__':\n    main()",
      1.44140625
    ],
    [
      "def parabola(parabola):\n    return parabola[0]*parabola[1]\n\nprint(parabola([1,2,3,4,5]))\nprint(parabola([1,2,3,4,5,6]))\nprint(parabola([1,2,3,4,5,6,7,8,9]))",
      1.4404296875
    ],
    [
      "def parabola(a,b):\n    return a*b/2\n\na = int(input())\nb = int(input())\nprint(parabola(a,b))",
      1.1357421875
    ],
    [
      "def parabola(num):\n    return num % 2",
      0.90869140625
    ],
    [
      "def directrix(parabola):\n    return parabola[0] + parabola[1] + parabola[2]",
      0.240478515625
    ],
    [
      "def parabola(x,y):\n    if x>y:\n        return 1\n    else:\n        return 0\n\n\nprint(parabola(4,5))",
      0.1881103515625
    ],
    [
      "def parabola(n):\n    return n * (n+1) / 2\n\n\nprint(parabola(6))",
      0.1312255859375
    ],
    [
      "def directrix(n):\n    if n == 0:\n        return 0\n    else:\n        return (n*directrix(n-1))\n\n\nprint(directrix(5))",
      0.129150390625
    ],
    [
      "def parabola(parabola):\n    #print(parabola)\n    return parabola[0] * parabola[1]\n\nprint(parabola((2,1)))",
      -0.04156494140625
    ],
    [
      "def directrix(parabola):\n    if parabola[0] == parabola[1]:\n        return 1\n    else:\n        return 0",
      -0.171142578125
    ],
    [
      "def directrix(n):\n    return (n*n+1)*(n*n+2)//6\n\n\ndef main():\n    print(directrix(int(input())))\n\n\nif __name__ == '__main__':\n    main()",
      -0.174072265625
    ],
    [
      "def parabola(n):\n    if n%2 == 0:\n        return \"Parabola\"\n    else:\n        return \"Not Parabola\"\n\nn = int(input(\"Digite um n\u00famero inteiro: \"))\nprint(parabola(n))",
      -0.1749267578125
    ],
    [
      "def parabola(n):\n    if n == 0:\n        return 0\n    else:\n        return n*parabola(n-1)\n\nprint(parabola(int(input())))",
      -0.1771240234375
    ],
    [
      "def parabola(p, r):\n    if p == r:\n        return True\n    else:\n        return False\n\n\nprint(parabola(3, 2))",
      -0.2078857421875
    ],
    [
      "def parabola(parabola):\n    return parabola[0]*parabola[1]\n\n\nprint(parabola([1, 2]))\nprint(parabola([1, 2, 3]))",
      -0.3271484375
    ],
    [
      "def parabola(x, y):\n    return x * y\n\n\nx = int(input(\"Digite o valor da parabola x: \"))\ny = int(input(\"Digite o valor da parabola y: \"))\n\nprint(parabola(x, y))",
      -0.3369140625
    ],
    [
      "def directrix(parabola):\n    return parabola.largura * parabola.altura\n\n\ndef main():\n    print(directrix(int(input())))\n\n\nif __name__ == '__main__':\n    main()",
      -0.591796875
    ],
    [
      "def parabola(n):\n    return n*(n-1)/2\n\nprint(parabola(int(input())))",
      -0.65283203125
    ],
    [
      "def parabola(n, x):\n    return x**(n - 1)\n\nif __name__ == '__main__':\n    print(parabola(3, 6))",
      -0.755859375
    ],
    [
      "def directrix(n):\n    return n*(n+1)/2\n\n\nprint(directrix(4))",
      -0.85595703125
    ],
    [
      "def parabola(x):\n    if x <= 0:\n        return 0\n    elif x == 1:\n        return 1\n    elif x == 2:\n        return 1 + 2\n    elif x == 3:\n        return 1 + 2 + 3\n    elif x == 4:\n        return 1 + 2 + 3 + 4\n    else:\n        return parabola(x - 1) + parabola(x - 2) + parabola(x - 3) + parabola(x - 4)\n\nprint(parabola(int(input())))",
      -0.85693359375
    ],
    [
      "def parabola(n):\n    if n % 2 == 0:\n        print(n)\n    else:\n        print(n)\n\n\nparabola(int(input()))",
      -0.85693359375
    ],
    [
      "def parabola(n, m):\n    for i in range(n):\n        if i == 0:\n            print(f\"{i} {m}\")\n        elif i == m-1:\n            print(f\"{i} {m}\")\n        else:\n            print(f\"{i} {m}\", end=\" \")\n    print()\n\n\nparabola(int(input(\"Enter the number of parabolas: \")), int(input(\"Enter the number of mates: \")))",
      -0.85693359375
    ],
    [
      "def directrix(parabola):\n    # Your code here\n    return parabola\n\n\nprint(directrix(5))",
      -0.85693359375
    ],
    [
      "def parabola_directrix(parabola):\n    x = parabola.split(' ')\n    x = [int(i) for i in x]\n    x.sort()\n    return x\n\n\nprint(parabola_directrix(\"4 1 3 2 1\"))",
      -0.85693359375
    ],
    [
      "def parabola(n):\n    if n == 0:\n        return 0\n    else:\n        return n + parabola(n - 1)\n\nprint(parabola(int(input())))",
      -0.85693359375
    ],
    [
      "def directrix(parabola):\n    return parabola[0] + parabola[1]\n\n\nprint(directrix([1, 2, 3, 4]))",
      -0.85693359375
    ],
    [
      "def directrix(parabola):\n    return parabola[0] * parabola[1]\n\n\nprint(directrix([1, 2, 3, 4]))\nprint(directrix([1, 2, 3, 4, 5]))\nprint(directrix([1, 2, 3, 4, 5, 6]))",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    return n*n\n\n\nprint(parabola(4))",
      -0.85791015625
    ],
    [
      "def parabola(n, l):\n    return n*(n+1)/2\n\n\nprint(parabola(5, 4))\nprint(parabola(5, 3))\nprint(parabola(5, 2))\nprint(parabola(5, 1))\nprint(parabola(5, 0))\nprint(parabola(5, -1))",
      -0.85791015625
    ],
    [
      "def directrix(a,b,c):\n    if a==b and a==c:\n        return True\n    if a==b or a==c:\n        return False\n    return directrix(b,c,a)\n\na = int(input(\"Ingrese a: \"))\nb = int(input(\"Ingrese b: \"))\nc = int(input(\"Ingrese c: \"))\nprint(directrix(a,b,c))",
      -0.85791015625
    ],
    [
      "def parabola(a,b):\n    if a == b:\n        return True\n    else:\n        return False\n\nprint(parabola(1,2))",
      -0.85791015625
    ],
    [
      "def parabola(a,b):\n    a = float(a)\n    b = float(b)\n    if b==0:\n        print(0)\n    elif a==0:\n        print(0)\n    else:\n        print(b/a)\n\nparabola(1,3)\nparabola(3,2)\nparabola(2,1)\nparabola(2,4)\nparabola(4,4)\nparabola(4,3)",
      -0.85791015625
    ],
    [
      "def find_directrix(p):\n    p.reverse()\n    return p\n\n\ndef main():\n    p = [int(x) for x in input(\"Enter a list of numbers: \").split(\",\")]\n    print(\"Directrix of the parabola is: \", find_directrix(p))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def directrix(parabola):\n    return parabola[0] + parabola[1]\n\nprint(directrix([1, 2, 3]))\nprint(directrix([1, 2, 3, 4]))",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    a = 0\n    b = 1\n    for i in range(1,n):\n        a = a + b\n        b = b + a\n    print(a)\n\n\nparabola(10)",
      -0.85791015625
    ],
    [
      "def parabola(n):\n    a = n * 2\n    b = n * 3\n    c = n * 4\n    return a + b + c\n\n\nprint(parabola(5))",
      -0.8583984375
    ],
    [
      "def parabola_directrix(parabola):\n    parabola_lista = []\n    for i in range(len(parabola)):\n        parabola_lista.append(parabola[i])\n    parabola_lista.sort()\n    return parabola_lista\n\n\nprint(parabola_directrix([2, 3, 4, 5]))",
      -0.8583984375
    ],
    [
      "def parabola(n):\n    if n <= 3:\n        print(\"Saldo da parabola\")\n    elif n == 3:\n        print(\"Saldo da parabola\")\n    elif n == 4:\n        print(\"Saldo da parabola\")\n    else:\n        print(\"Saldo da parabola\")\n\nparabola(int(input(\"Digite um numero: \")))",
      -0.8583984375
    ],
    [
      "def directrix(parabola):\n    return parabola[1]-parabola[0]\n\nprint(directrix([1,2,3,4]))",
      -0.8583984375
    ],
    [
      "def directrix(parabola):\n\n    if parabola[0] == parabola[1]:\n        return parabola\n    else:\n        return directrix(directrix(parabola[1], parabola[0]))\n\n\nprint(directrix([1, 2, 3]))\nprint(directrix([2, 3, 1]))",
      -0.8583984375
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 1\n    else:\n        return n * parabola(n-1)\n\nif __name__ == '__main__':\n    print(parabola(3))",
      -0.8583984375
    ],
    [
      "def parabola(x, y):\n    return x + y\n\n\nprint(parabola(2, 4))",
      -0.8583984375
    ],
    [
      "def directrix(parabola):\n    n = len(parabola)\n    if n % 2 == 1:\n        return False\n\n    aux = []\n    for i in range(n//2):\n        aux.append(parabola[i])\n    aux.reverse()\n    return aux\n\n\nif __name__ == \"__main__\":\n    parabola = [\"a\", \"b\", \"c\", \"d\"]\n    print(directrix(parabola))\n    print(directrix(parabola[::-1]))\n    print(directrix(parabola[::-1][::-1]))\n    print(directrix(parabola[::-1][::-1][::-1]))",
      -0.8583984375
    ],
    [
      "def directrix(parabola):\n    return parabola[1] - parabola[0]",
      -0.8583984375
    ],
    [
      "def parabola(parabola):\n    a = parabola[0]\n    b = parabola[1]\n    c = parabola[2]\n    directrix = [a, b, c]\n    print(directrix)",
      -0.85888671875
    ],
    [
      "def find_directrix(parabola):\n    return parabola[1] - parabola[0]\n\n\nprint(find_directrix([1, 2, 3, 4, 5]))",
      -0.85888671875
    ],
    [
      "def parabola(x):\n    x = x + 1\n    print(x)\n\n\nparabola(1)\nparabola(2)\nparabola(3)",
      -0.85888671875
    ],
    [
      "def directrix(parabola):\n    print(\"Parabola: \",parabola)\n    if parabola==1:\n        print(\"Parabola 1\")\n    elif parabola==2:\n        print(\"Parabola 2\")\n    else:\n        print(\"Parabola\",parabola,\"nao existe\")\n\ndirectrix(2)",
      -0.85888671875
    ],
    [
      "def directrix(a,b):\n    return (a*b)\n\n\na = int(input(\"Informe o primeiro n\u00famero: \"))\nb = int(input(\"Informe o segundo n\u00famero: \"))\n\nprint(directrix(a,b))",
      -0.85888671875
    ],
    [
      "def find_directrix(n):\n    if n > 1:\n        return find_directrix(n - 1) + n\n    else:\n        return 1\n\nprint(find_directrix(5))",
      -0.85888671875
    ],
    [
      "def parabola(n):\n    return n**2\n\nprint(parabola(2))",
      -0.919921875
    ],
    [
      "def parabola(x):\n    return x**3 - 4*x**2 + 2\n\n\nif __name__ == \"__main__\":\n    print(parabola(5))",
      -0.92138671875
    ],
    [
      "def directrix(parabola):\n    return parabola.index('+')\n\nprint(directrix(\"+1\"))",
      -0.92236328125
    ],
    [
      "def directrix(parabola):\n    return parabola / 2\n\n\nprint(directrix(4))\nprint(directrix(5))\nprint(directrix(6))\nprint(directrix(7))\nprint(directrix(8))\nprint(directrix(9))",
      -1.1962890625
    ],
    [
      "def directrix(parabola):\n    return parabola[1] * parabola[0]\n\n\nprint(directrix([2, 3, 1, 3, 1, 2, 4]))",
      -1.220703125
    ],
    [
      "def parabola(x, y):\n    return x - y\n\n\nprint(parabola(2, 5))",
      -1.330078125
    ],
    [
      "def parabola(x,y,z):\n    return (x**2+y**2+z**2)**0.5",
      -1.4326171875
    ],
    [
      "def directrix(a,b):\n\ta=float(a)\n\tb=float(b)\n\tif a==b:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\nprint(directrix(3,4))",
      -1.53515625
    ],
    [
      "def parabola(x,y):\n    return x**2 + y**2\n\nx = int(input(\"Digite o x: \"))\ny = int(input(\"Digite o y: \"))\n\nprint(\"A directrix de %d x %d \u00e9: %d\" %(x,y,parabola(x,y)))",
      -1.556640625
    ],
    [
      "def directrix(parabola):\n    parabola.sort()\n    print(parabola[0])\n    print(parabola[-1])\n\ndirectrix([0, 3, 2, 1])\ndirectrix([0, 2, 3, 1])\ndirectrix([3, 2, 1, 0])",
      -1.6796875
    ],
    [
      "def find_directrix(parabola):\n    parabola.sort()\n    print(parabola)\n    return parabola[0]\n\n\nparabola = [10, 5, 1, 3, 2, 7, 8, 9, 4, 6]\nprint(find_directrix(parabola))",
      -1.9306640625
    ],
    [
      "def parabola(numero, x, y, z):\n    if numero == x + y + z:\n        return True\n    else:\n        return False\n\n\ndef main():\n    print(parabola(4, 2, 3, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.220703125
    ],
    [
      "def find_directrix(parabola):\n    if parabola == 'A':\n        return 'A'\n    elif parabola == 'B':\n        return 'B'\n    elif parabola == 'C':\n        return 'C'\n    elif parabola == 'D':\n        return 'D'\n    elif parabola == 'E':\n        return 'E'\n    elif parabola == 'F':\n        return 'F'\n    elif parabola == 'G':\n        return 'G'\n    elif parabola == 'H':\n        return 'H'\n    elif parabola == 'I':\n        return 'I'\n    elif parabola == 'J':\n        return 'J'\n    elif parabola == 'K':\n        return 'K'\n    elif parabola == 'L':\n        return 'L'\n    elif parabola == 'M':\n        return 'M'\n    elif parabola == 'N':\n        return 'N'\n    elif parabola == 'O':\n        return 'O'\n    elif parabola == 'P':\n        return 'P'\n    elif parabola == 'Q':\n        return 'Q'\n    elif parabola == 'R':\n        return 'R'\n    elif parabola == 'S':\n        return 'S'\n    elif parabola == 'T':\n        return 'T'\n    elif parabola == 'U':\n        return 'U'\n    elif parabola == 'V':\n        return 'V'\n    elif parabola == 'W':\n        return 'W'\n    elif parabola == 'X':\n        return 'X'\n    elif parabola == 'Y':\n        return 'Y'\n    elif parabola == 'Z':\n        return 'Z'\n\n\nprint(find_directrix('A'))\nprint(find_directrix('B'))\nprint(find_directrix('C'))\nprint(find_directrix('D'))\nprint(find_directrix('E'))\nprint(find",
      -2.74609375
    ],
    [
      "def parabola(n):\n    x = n\n    while x % 2 == 0:\n        x = x / 2\n    return x\n\n\ndef main():\n    n = int(input(\"Digite um n\u00famero: \"))\n    print(parabola(n))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.751953125
    ],
    [
      "def directrix(parabola):\n    if parabola[0] > parabola[1]:\n        return \"parabola\"\n    else:\n        return \"parabola\"\n\nprint(directrix([1, 3, 7, 9]))",
      -3.041015625
    ],
    [
      "def find_directrix(parabola):\n    a = parabola[0]\n    b = parabola[1]\n    c = parabola[2]\n    return [a,b,c]\n\nprint(find_directrix([1,2,3]))\nprint(find_directrix([1,2,3,4]))\nprint(find_directrix([1,2,3,4,5]))\nprint(find_directrix([1,2,3,4,5,6]))\nprint(find_directrix([1,2,3,4,5,6,7]))",
      -3.578125
    ],
    [
      "def parabola(x, y, z):\n    if x > y:\n        if x > z:\n            return \"x > y\"\n        else:\n            return \"y > x\"\n    else:\n        if y > z:\n            return \"y > x\"\n        else:\n            return \"x > y\"\n\nprint(parabola(2, 4, 5))",
      -3.72265625
    ],
    [
      "def parabola(x, y):\n    if x > y:\n        x, y = y, x\n    return x, y\n\nprint(parabola(2, 2))\nprint(parabola(3, 4))\nprint(parabola(5, 3))\nprint(parabola(5, 5))",
      -3.74609375
    ],
    [
      "def parabola(n):\n    return n ** 2 - n ** 3 + n ** 4 - n ** 5 + n ** 6 - n ** 7\n\n\nn = int(input(\"Digite um n\u00famero: \"))\nprint(\"A directrix do parabola \u00e9: \", parabola(n))",
      -3.77734375
    ],
    [
      "def find_directrix(parabola):\n    parabola.sort()\n    total = 0\n    for i in range(len(parabola)-1):\n        if parabola[i] + parabola[i+1] == parabola[i+2]:\n            total += parabola[i+1] - parabola[i]\n    return total\n\nprint(find_directrix([5,2,3,1,4]))",
      -3.89453125
    ],
    [
      "def parabola(parabola):\n    parabola = float(parabola)\n    if parabola < 0:\n        return \"Parabola inv\u00e1lida\"\n    elif parabola == 0:\n        return \"Parabola zero\"\n    else:\n        return f\"Parabola {parabola}\"\n\n\nprint(parabola(0.5))\nprint(parabola(0))\nprint(parabola(1))",
      -3.90625
    ],
    [
      "def directrix(parabola):\n    directrix = []\n    for i in range(len(parabola)):\n        if i == 0:\n            directrix.append(parabola[0])\n        elif i == len(parabola) - 1:\n            directrix.append(parabola[-1])\n        else:\n            directrix.append(parabola[i + 1] - parabola[i])\n    return directrix\n\nprint(directrix([1, 2, 3, 4]))\nprint(directrix([1, 2, 3, 4, 5]))\nprint(directrix([1, 2, 3, 4, 5, 6, 7]))\nprint(directrix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(directrix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))",
      -3.91796875
    ],
    [
      "def parabola(n):\n    return n * (n - 1) / 2\n\ndef main():\n    print(parabola(3))\n    print(parabola(5))\n    print(parabola(10))\n\nif __name__ == \"__main__\":\n    main()",
      -4.0234375
    ],
    [
      "def find_directrix(parabola):\n    directrix = []\n    for i in range(len(parabola)):\n        if parabola[i] == \"A\":\n            directrix.append(i)\n    return directrix\n\n\nprint(find_directrix(\"ABABABABABAB\"))",
      -4.375
    ],
    [
      "def parabola(parabola):\n    if parabola == \"a\":\n        return \"A\"\n    elif parabola == \"b\":\n        return \"B\"\n    elif parabola == \"c\":\n        return \"C\"\n    elif parabola == \"d\":\n        return \"D\"\n    elif parabola == \"e\":\n        return \"E\"\n    elif parabola == \"f\":\n        return \"F\"\n    elif parabola == \"g\":\n        return \"G\"\n    elif parabola == \"h\":\n        return \"H\"\n    else:\n        return \"NA\"\n\n\nprint(parabola(\"a\"))\nprint(parabola(\"b\"))\nprint(parabola(\"c\"))\nprint(parabola(\"d\"))\nprint(parabola(\"e\"))\nprint(parabola(\"f\"))\nprint(parabola(\"g\"))\nprint(parabola(\"h\"))",
      -4.60546875
    ],
    [
      "def directrix(parabola):\n    x = parabola[0]\n    y = parabola[1]\n    print(f\"Pilha {x} e {y}\")\n\n\ndirectrix([2, 2])",
      -4.7890625
    ],
    [
      "def parabola(a, b):\n    return a*b\n\nprint(parabola(10, 20))\nprint(parabola(20, 10))\nprint(parabola(10, 20))\nprint(parabola(20, 10))\nprint(parabola(20, 20))",
      -5.09375
    ],
    [
      "def parabola_directrix(p):\n    if p > 0:\n        print(p)\n    else:\n        print(0)\n\nparabola_directrix(5)\nparabola_directrix(-5)\nparabola_directrix(0)\nparabola_directrix(1)\nparabola_directrix(-1)\nparabola_directrix(0.5)\nparabola_directrix(0.5)",
      -5.109375
    ],
    [
      "def directrix_parabola(parabola):\n    parabola.sort()\n    return parabola[0] - parabola[1]\n\n\nprint(directrix_parabola([3, 2, 1, 5, 4]))\nprint(directrix_parabola([3, 2, 1, 5, 4]))\nprint(directrix_parabola([3, 2, 1, 5, 4, 7]))",
      -5.89453125
    ],
    [
      "def parabola(a):\n    return a * a\n\nprint(parabola(5))\nprint(parabola(4))\nprint(parabola(3))\nprint(parabola(2))\nprint(parabola(1))",
      -6.03125
    ],
    [
      "def directrix(parabola):\n    parabola.sort()\n    x = parabola[0]\n    for i in range(1,len(parabola)):\n        if parabola[i] == x:\n            return parabola[i]\n        elif parabola[i] > x:\n            x = parabola[i]\n    return parabola[len(parabola)-1]\n\n\nprint(directrix([1,2,3,4,5]))",
      -6.22265625
    ],
    [
      "def parabola(parabola):\n    directrix = parabola[0] + parabola[1]\n    return directrix\n\n\nprint(parabola([2, 5]))\nprint(parabola([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
      -6.82421875
    ],
    [
      "def directrix(parabola):\n    parabola = list(parabola)\n    parabola.sort()\n    print(parabola)\n    print(parabola[0])\n    print(parabola[-1])\n    print(parabola[1:-1])\n    print(parabola[1:])\n\n\ndirectrix([1, 2, 3, 4, 5])",
      -6.87109375
    ],
    [
      "def find_directrix(parabola):\n    directrix = []\n    parabola = list(parabola)\n    for i in range(len(parabola)-1):\n        if parabola[i] + parabola[i+1] > parabola[i+2]:\n            directrix.append(parabola[i])\n    return directrix\n\n\nprint(find_directrix([1, 2, 3, 4, 5]))\nprint(find_directrix([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_directrix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(find_directrix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
      -7.00390625
    ],
    [
      "def find_directrix(parabola):\n    directrix = []\n    for i in parabola:\n        if i == 1:\n            directrix.append(0)\n        else:\n            directrix.append(1)\n    return directrix\n\nparabola = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_directrix(parabola))",
      -7.28515625
    ],
    [
      "def directrix(parabola):\n\n    if parabola == 1:\n        return \"1\"\n    elif parabola == 2:\n        return \"2\"\n    elif parabola == 3:\n        return \"3\"\n    elif parabola == 4:\n        return \"4\"\n    elif parabola == 5:\n        return \"5\"\n    elif parabola == 6:\n        return \"6\"\n    elif parabola == 7:\n        return \"7\"\n    elif parabola == 8:\n        return \"8\"\n    elif parabola == 9:\n        return \"9\"\n    elif parabola == 10:\n        return \"10\"\n    elif parabola == 11:\n        return \"11\"\n    elif parabola == 12:\n        return \"12\"\n    elif parabola == 13:\n        return \"13\"\n    elif parabola == 14:\n        return \"14\"\n    elif parabola == 15:\n        return \"15\"\n    elif parabola == 16:\n        return \"16\"\n    elif parabola == 17:\n        return \"17\"\n    elif parabola == 18:\n        return \"18\"\n    elif parabola == 19:\n        return \"19\"\n    elif parabola == 20:\n        return \"20\"\n    elif parabola == 21:\n        return \"21\"\n    elif parabola == 22:\n        return \"22\"\n    elif parabola == 23:\n        return \"23\"\n    elif parabola == 24:\n        return \"24\"\n    elif parabola == 25:\n        return \"25\"\n    elif parabola == 26:\n        return \"26\"\n    elif parabola == 27:\n        return \"27\"\n    elif parabola == 28:\n        return \"28\"\n    elif parabola == 29:\n        return \"29\"\n    elif parabola == 30:\n        return \"30\"\n    elif parabola == 31:\n        return \"31\"\n    elif",
      -7.8125
    ],
    [
      "def parabola(x, y):\n    # Your code here\n    x_max = max(x, y)\n    x_min = min(x, y)\n    if x_max == x_min:\n        return x\n    else:\n        return x_max - x_min\n\n\nprint(parabola(1, 3))\nprint(parabola(2, 3))\nprint(parabola(2, 4))\nprint(parabola(2, 1))",
      -7.953125
    ],
    [
      "def directrix(parabola):\n    parabola.sort()\n    directrix = []\n    for i in range(len(parabola) - 1):\n        if parabola[i] > parabola[i + 1]:\n            directrix.append(parabola[i])\n    return directrix\n\n\ndef main():\n    parabola = [2, 5, 4, 1, 3]\n    print(directrix(parabola))\n\n\nif __name__ == \"__main__\":\n    main()",
      -8.0078125
    ],
    [
      "def parabola(a, b, c, d):\n    return a + b + c + d\n\n\nprint(parabola(1, 2, 3, 4))\nprint(parabola(1, 2, 3, 5))\nprint(parabola(1, 2, 3, 6))",
      -8.140625
    ],
    [
      "def directrix(parabola):\n    if parabola == 1:\n        return 1\n    elif parabola == 2:\n        return 2\n    elif parabola == 3:\n        return 3\n    elif parabola == 4:\n        return 4\n    elif parabola == 5:\n        return 5\n    elif parabola == 6:\n        return 6\n    elif parabola == 7:\n        return 7\n    elif parabola == 8:\n        return 8\n    else:\n        return 0\n\n\nprint(directrix(8))\nprint(directrix(9))\nprint(directrix(10))\nprint(directrix(11))\nprint(directrix(12))\nprint(directrix(13))\nprint(directrix(14))\nprint(directrix(15))\nprint(directrix(16))\nprint(directrix(17))\nprint(directrix(18))\nprint(directrix(19))\nprint(directrix(20))\nprint(directrix(21))\nprint(directrix(22))\nprint(directrix(23))\nprint(directrix(24))\nprint(directrix(25))\nprint(directrix(26))\nprint(directrix(27))\nprint(directrix(28))\nprint(directrix(29))\nprint(directrix(30))\nprint(directrix(31))\nprint(directrix(32))\nprint(directrix(33))\nprint(directrix(34))\nprint(directrix(35))\nprint(directrix(36))\nprint(directrix(37))\nprint(directrix(38))\nprint(directrix(39))\nprint(directrix(40))\nprint(directrix(41))\nprint(directrix(42))\nprint(directrix(43))\nprint(directrix(44))\nprint(directrix(45))\nprint(directrix(46))\nprint(directrix(47))\nprint(directrix(48))\nprint(directrix(49))\nprint(directrix(50))\nprint(directrix(51))\nprint(directrix(52))\nprint(directrix(53))\nprint(directrix(54))\nprint",
      -8.2265625
    ],
    [
      "def parabola(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return parabola(n // 2) + parabola(n // 2 + 1)\n    else:\n        return parabola(3 * n + 1) + parabola(3 * n + 2)\n\nprint(parabola(int(input())))",
      -10.03125
    ],
    [
      "import numpy as np\n\n\ndef parabola(x, y, z):\n    x_1 = x[0]\n    x_2 = x[1]\n    y_1 = y[0]\n    y_2 = y[1]\n    z_1 = z[0]\n    z_2 = z[1]\n\n    x_3 = x[2]\n    x_4 = x[3]\n    y_3 = y[2]\n    y_4 = y[3]\n    z_3 = z[2]\n    z_4 = z[3]\n\n    x_5 = x[4]\n    x_6 = x[5]\n    y_5 = y[4]\n    y_6 = y[5]\n    z_5 = z[4]\n    z_6 = z[5]\n\n    x_7 = x[6]\n    x_8 = x[7]\n    y_7 = y[6]\n    y_8 = y[7]\n    z_7 = z[6]\n    z_8 = z[7]\n\n    x_9 = x[8]\n    x_10 = x[9]\n    y_9 = y[8]\n    y_10 = y[9]\n    z_9 = z[8]\n    z_10 = z[9]\n\n    x_11 = x[10]\n    x_12 = x[11]\n    y_11 = y[10]\n    y_12 = y[11]\n    z_11 = z[10]\n    z_12 = z[11]\n\n    x_13 = x[12]\n    x_14 = x[13]\n    y_13 = y[12]\n    y_14 = y[13]\n    z_13 = z[12]\n    z_14 = z[13]\n\n    x_15 = x[14]\n    x_16 = x[15]\n    y_15 = y[14]\n    y_16 = y[15]\n    z_15 = z[14]\n    z_16 = z[15]",
      -10.3828125
    ],
    [
      "def directrix(parabola):\n    if parabola.isnumeric():\n        return float(parabola)\n    else:\n        return 'nao foi poss\u00edvel convertir'\n\n\nprint(directrix('7'))\nprint(directrix('7.2'))\nprint(directrix('7.2.2'))\nprint(directrix('7.2.2.2'))\nprint(directrix('7.2.2.2.2'))\nprint(directrix('7.2.2.2.2.2'))\nprint(directrix('7.2.2.2.2.2.2.2'))\nprint(directrix('7.2.2.2.2.2.2.2.2.2'))\nprint(directrix('7.2.2.2.2.2.2.2.2.2.2.2.2'))\nprint(directrix('7.2.2.2.2.2.2.2.2.2.2.2.2'))\nprint(directrix('7.2.2.2.2.2.2.2.2.2.2.2.2.2.2'))\nprint(directrix('7.2.2.2.2.2.2.2.2.2.2.2.2'))\nprint(directrix('7.2.2.2.2.2.2.2.2.2.2.2.2.2'))\nprint(directrix('7.2.2.2.2.2.2.2.2.2.2.2.2.2'))",
      -10.578125
    ],
    [
      "def directrix(parabola):\n    #parabola = [1,2,3,4,5,6,7,8,9]\n    #print(parabola)\n    #print(len(parabola))\n    #print(parabola[0])\n    #print(parabola[2])\n    #print(parabola[4:])\n    #print(parabola[1:])\n    #print(parabola[:])\n    #print(parabola[1::2])\n    #print(parabola[::2])\n    #print(parabola[::-1])\n    #print(parabola[:3])\n    #print(parabola[:3:])\n    #print(parabola[::-1])\n    #print(parabola[1:3])\n    #print(parabola[1::3])\n    #print(parabola[::-1])\n    #print(parabola[:3:2])\n    #print(parabola[:3::2])\n    #print(parabola[::-1:2])\n    #print(parabola[1::-2:2])\n    #print(parabola[1::-2:2:2])\n    #print(parabola[1::2:-2])\n    #print(parabola[::2:2:-2])\n    #print(parabola[::2:2:-2:2])\n    #print(parabola[::2:2:-2:2])\n    #print(parabola[::2:2:-2::2])\n    #print(parabola[::2:2:-2::2])\n    #print(parabola[::2:2:-2::2:2])\n    #print(parabola[::2:2:-2::2:2])\n    #print(parabola[::2:2:-2::2:2:2])\n    #print(",
      -10.90625
    ],
    [
      "def find_directrix(p):\n    l = len(p)\n    a = [0] * l\n    b = [0] * l\n    c = [0] * l\n    d = [0] * l\n    for i in range(l):\n        a[i] = p[i][0]\n        b[i] = p[i][1]\n        c[i] = p[i][2]\n        d[i] = p[i][3]\n    for i in range(l):\n        a[i] = a[i] * b[i]\n        b[i] = b[i] * c[i]\n        c[i] = c[i] * d[i]\n        d[i] = d[i] * d[i]\n    return a\n\n\nprint(find_directrix([[1, 2, 3], [4, 5, 6]]))",
      -12.6328125
    ],
    [
      "def parabola(n):\n    a = 1\n    b = 1\n    for i in range(1, n + 1):\n        a *= i\n        b *= (i - 1)\n    return a * b\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Digite um n\u00famero: \"))\n    print(\"A directrix de {} \u00e9: {}\".format(n, parabola(n)))",
      -13.234375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}