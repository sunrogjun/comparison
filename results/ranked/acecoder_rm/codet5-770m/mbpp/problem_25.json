{
  "problem": {
    "task_id": "MBPP/36",
    "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
    "test_list": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ],
    "challenge_test_list": [],
    "problem_id": 25
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def proper_fraction(n, m):\n    f = (n / m) % 10\n    return f\n\n\nprint(proper_fraction(3, 2))\nprint(proper_fraction(3, 4))\nprint(proper_fraction(3, 6))\nprint(proper_fraction(3, 8))\nprint(proper_fraction(3, 10))",
      1.5634765625
    ],
    [
      "def find_nth_digit(n, m):\n    if n % m == 0:\n        return n // m\n    else:\n        return find_nth_digit(n // m, m)\n\n\nn = int(input())\nm = int(input())\n\nprint(find_nth_digit(n, m))",
      1.134765625
    ],
    [
      "def find_digit(n, k):\n    if k > n:\n        k = n\n\n    if k == 1:\n        return 1\n\n    if k % 2 == 0:\n        return find_digit(n // 2, k) * find_digit(n // 2, k - 1)\n\n    return find_digit(n // 2, k - 1) * find_digit(n // 2, k) + (n % 2)\n\n\nif __name__ == '__main__':\n    print(find_digit(9, 3))\n    print(find_digit(9, 4))\n    print(find_digit(9, 5))",
      -0.4375
    ],
    [
      "def find_fraction(n, a, b, digit):\n    num = int(b) // int(a)\n    frac = str(num)[digit]\n    return frac\n\n\nprint(find_fraction(10, 3, 9, 3))",
      -0.74951171875
    ],
    [
      "def proper_fraction(n,m):\n    a = int(n)\n    b = int(m)\n    return a/b\n\nprint(proper_fraction(12,34))",
      -0.85693359375
    ],
    [
      "def get_digit(n, d):\n    \"\"\"\n    :param n:\n    :param d:\n    :return:\n    \"\"\"\n    if d < 0:\n        d += 10\n    if n < 0:\n        n += 10\n    if n % 10 == 0:\n        return d - (n // 10)\n    else:\n        return d - (n // 10) - (n % 10)\n\n\nif __name__ == '__main__':\n    print(get_digit(1, 3))\n    print(get_digit(2, 3))\n    print(get_digit(3, 2))",
      -0.85693359375
    ],
    [
      "def proper_fraction(n, a, b):\n    return (int(n) / (int(a) * int(b)))\n\n\nprint(proper_fraction(3, 5, 5))",
      -0.85693359375
    ],
    [
      "import math\n\ndef fraction(n,m):\n    return math.floor(math.log10(n/m))\n\ndef find_digit(n,m):\n    return int(str(fraction(n,m))[-1])\n\nprint(find_digit(4,3))\nprint(find_digit(9,9))",
      -0.85693359375
    ],
    [
      "def proper_fraction(n, m):\n    if n == 0:\n        return m\n    else:\n        return proper_fraction(n - 1, m) * 10 + proper_fraction(n - 1, n)\n\n\nprint(proper_fraction(3, 2))",
      -0.85693359375
    ],
    [
      "def nth_digit(num1,num2,n):\n    if num1 > num2:\n        num1, num2 = num2, num1\n    if num1 == 0:\n        return str(num2)\n    else:\n        return str(nth_digit(num2,num1//10,n-1)) + str(num1%10)\n\nprint(nth_digit(1234,5678,2))",
      -0.85693359375
    ],
    [
      "def find_digit(num1, num2, digit):\n    if num1 % 10 == 0 and num2 % 10 == 0:\n        return digit\n    elif num1 % 10 == 0:\n        return num1 // 10\n    elif num2 % 10 == 0:\n        return num2 // 10\n    else:\n        return 0\n\nprint(find_digit(6, 9, 1))",
      -0.85693359375
    ],
    [
      "def find_nth_digit(n, a, b):\n    if n == 1:\n        return b//a\n    else:\n        return find_nth_digit(n-1, a, b//a)\n\n\nif __name__ == \"__main__\":\n    print(find_nth_digit(3, 2, 4))",
      -0.85791015625
    ],
    [
      "import math\n\ndef proper_fraction(a, b, n):\n    a = int(a)\n    b = int(b)\n    n = int(n)\n\n    if a == 0:\n        a = 1\n    if b == 0:\n        b = 1\n\n    if a * b < n:\n        a = a * 10\n    if b * a < n:\n        b = b * 10\n\n    if a * b == n:\n        return str(a)\n    else:\n        return str(a) + str(b)\n\n\nprint(proper_fraction(3, 4, 3))",
      -0.85791015625
    ],
    [
      "def nth_digit(num1,num2,n):\n    if num1 == num2:\n        return num1\n    else:\n        return nth_digit(num2,num1%num2,n-1)",
      -0.85791015625
    ],
    [
      "def proper_fraction(n, m):\n    return (int(n) / int(m)) % 10",
      -0.85791015625
    ],
    [
      "def proper_fraction(num1, num2, n):\n    if n == 1:\n        return num1 / num2\n    else:\n        return proper_fraction(num1, num2 * 10, n - 1)\n\nprint(proper_fraction(4, 4, 1))",
      -0.85791015625
    ],
    [
      "def nth_digit(n, a, b):\n    # write your code here\n    if n == 1:\n        return a\n    else:\n        return (a*n+b)//(n+1)\n\n\ndef main():\n    n = int(input(\"Enter the number of digits: \"))\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n\n    print(nth_digit(n, a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def find_digit_fraction(num1, num2, digit):\n    num1 = int(num1)\n    num2 = int(num2)\n    if num1 % num2 == 0:\n        return str(num1//num2) + str(digit)\n    else:\n        return \"Sorry, the number is not a proper fraction of two given numbers\"\n\n\nprint(find_digit_fraction(11, 13, 2))",
      -0.85791015625
    ],
    [
      "def proper_fraction(num1, num2, digit):\n    # define the number of digits\n    digits = 10\n    # define the sum of the digits\n    sum = 0\n    # loop over the digits\n    for i in range(digits):\n        # add the digits to the sum\n        sum += int(num1 / digits) ** i\n        # subtract the digit from the sum\n        num1 = num1 % digits\n    # return the sum\n    return sum % digit\n\n\nprint(proper_fraction(23, 54, 2))",
      -0.85791015625
    ],
    [
      "def nth_digit(n, a, b):\n    return a // b ** n\n\n\nprint(nth_digit(3, 3, 4))",
      -0.85791015625
    ],
    [
      "def find_digit(num1, num2, n):\n    num1 = int(num1)\n    num2 = int(num2)\n    ans = 0\n    for i in range(n):\n        ans += num1 // 10 ** (n - i - 1)\n        num1 %= 10 ** (n - i - 1)\n    return ans\n\n\ndef main():\n    print(find_digit(10, 100, 3))\n    print(find_digit(100, 10, 3))\n    print(find_digit(100, 100, 2))\n    print(find_digit(100, 100, 4))\n\n\nmain()",
      -0.85791015625
    ],
    [
      "def find_digit_in_proper_fraction(num1, num2, digit):\n    num1 = str(num1)\n    num2 = str(num2)\n    if len(num1)!= len(num2):\n        return \"Please enter two numbers\"\n    ans = 0\n    for i in range(len(num1)):\n        if num1[i] == num2[i]:\n            ans += 1\n    return str(digit) + str(ans)\n\n\nprint(find_digit_in_proper_fraction(7, 8, 3))",
      -0.85791015625
    ],
    [
      "def proper_fraction(num1, num2, nth):\n    if num1 == num2:\n        return '0'\n    else:\n        return str(int(num1 / num2)**nth)\n\nprint(proper_fraction(2, 7, 4))",
      -0.85791015625
    ],
    [
      "def proper_fraction(n,k):\n    num1,num2 = n//10,n%10\n    if num1 == 0:\n        return num2\n    else:\n        return proper_fraction(num1,k)\n\n\nprint(proper_fraction(9,4))",
      -0.85791015625
    ],
    [
      "def find_digit(num1, num2, n):\n    \"\"\"\n    :param num1: a positive integer\n    :param num2: a positive integer\n    :param n: the nth digit in the proper fraction\n    :return: the nth digit in the proper fraction\n    \"\"\"\n    if num1 < num2:\n        num1, num2 = num2, num1\n    n = n % len(str(num1))\n    return int(str(num1)[:n])\n\nprint(find_digit(2,3,1))",
      -0.85791015625
    ],
    [
      "def find_digit(num, den):\n    if den == 0:\n        return num\n    else:\n        return num//den\n\n\nif __name__ == \"__main__\":\n    print(find_digit(9, 6))",
      -0.85791015625
    ],
    [
      "def get_nth_digit(num, n):\n    if num % 10 == 0:\n        return num//10\n    else:\n        return num//10 - 1\n\n\nprint(get_nth_digit(100, 9))\nprint(get_nth_digit(100, 8))\nprint(get_nth_digit(100, 7))\nprint(get_nth_digit(100, 6))\nprint(get_nth_digit(100, 5))",
      -0.85791015625
    ],
    [
      "def proper_fraction(n,m):\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if m == 1:\n        return n\n    return proper_fraction(n//m,m)\n\n\nprint(proper_fraction(5,2))\nprint(proper_fraction(5,3))\nprint(proper_fraction(5,4))\nprint(proper_fraction(5,5))",
      -0.85791015625
    ],
    [
      "def proper_fraction(num1, num2, nth):\n    num1 = int(num1)\n    num2 = int(num2)\n    if num1 % num2 == 0:\n        return str(num1 // num2)[:nth]\n    else:\n        return str(num2 // num1)[:nth]\n\n\nif __name__ == \"__main__\":\n    print(proper_fraction(5, 10, 3))",
      -0.85791015625
    ],
    [
      "def find_digit(n1, n2, n):\n    if n > len(str(n1)):\n        n = len(str(n1))\n    if n > len(str(n2)):\n        n = len(str(n2))\n\n    if n == 1:\n        return str(n1)\n    elif n == 2:\n        return str(n1) + str(n2)\n\n    else:\n        return str(n1) + str(n2) + str(n)\n\n\nprint(find_digit(1234, 100, 8))",
      -0.85888671875
    ],
    [
      "def proper_fraction(num, den):\n    if num == 0:\n        return 0\n    elif num == den:\n        return 1\n    else:\n        return proper_fraction(num//den, den)\n\nprint(proper_fraction(2, 3))\nprint(proper_fraction(3, 4))\nprint(proper_fraction(3, 5))\nprint(proper_fraction(4, 5))",
      -0.85888671875
    ],
    [
      "def find_digit(num1, num2, digit):\n    if num1 > num2:\n        num1, num2 = num2, num1\n    if num1 == num2:\n        return digit\n    numerator = num1 % num2\n    denominator = num1\n    while numerator % num2!= 0:\n        numerator = numerator - num2 * num2\n        denominator = denominator * num2\n    return find_digit(numerator, denominator, digit + 1)\n\n\nprint(find_digit(3, 4, 3))",
      -0.85888671875
    ],
    [
      "def get_digit(n, m):\n    return str(n//m)[n%m]\n\nprint(get_digit(3, 2))",
      -0.85888671875
    ],
    [
      "def proper_fraction(n, m):\n    return str(n // m) + str(n % m)\n\n\nprint(proper_fraction(100, 1000))",
      -0.85888671875
    ],
    [
      "def proper_fraction(n, m):\n    if n > m:\n        n, m = m, n\n    if n == m:\n        return n\n    return proper_fraction(m, n % m)\n\nprint(proper_fraction(8, 6))\nprint(proper_fraction(9, 9))\nprint(proper_fraction(10, 10))\nprint(proper_fraction(1, 1))",
      -0.86083984375
    ],
    [
      "def find_nth_digit(num, n):\n    if n == 1:\n        return str(num)\n    if n == 2:\n        return str(num) + \"0\"\n    if n == 3:\n        return str(num) + \"1\"\n    if n == 4:\n        return str(num) + \"2\"\n    if n == 5:\n        return str(num) + \"3\"\n    if n == 6:\n        return str(num) + \"4\"\n    if n == 7:\n        return str(num) + \"5\"\n    if n == 8:\n        return str(num) + \"6\"\n    if n == 9:\n        return str(num) + \"7\"\n    if n == 10:\n        return str(num) + \"8\"\n    if n == 11:\n        return str(num) + \"9\"\n    if n == 12:\n        return str(num) + \"10\"\n    if n == 13:\n        return str(num) + \"11\"\n    if n == 14:\n        return str(num) + \"12\"\n    if n == 15:\n        return str(num) + \"13\"\n    if n == 16:\n        return str(num) + \"14\"\n    if n == 17:\n        return str(num) + \"15\"\n    if n == 18:\n        return str(num) + \"16\"\n    if n == 19:\n        return str(num) + \"17\"\n    if n == 20:\n        return str(num) + \"18\"\n    if n == 21:\n        return str(num) + \"19\"\n    if n == 22:\n        return str(num) + \"20\"\n    if n == 23:\n        return str(num) + \"21\"\n    if n == 24:\n        return str(num) + \"22\"\n    if n == 25:\n        return str(num) + \"23\"\n    if n == 26:\n        return str(num) + \"24\"\n    if n == 27:\n        return str(num) + \"25\"\n    if n == 28:\n        return str(num)",
      -0.90869140625
    ],
    [
      "def proper_fraction(num1,num2,n):\n    result = (num1/num2)**n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(proper_fraction(100,1000,4))",
      -1.3583984375
    ],
    [
      "def find_digit(num1, num2, nth):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    if len(num1_str)!= len(num2_str):\n        return \"Incorrect input\"\n\n    if len(num1_str) == 1:\n        return str(int(num1_str) * int(num2_str)**(nth-1))\n    else:\n        return str(int(num1_str) * int(num2_str)**(nth-1)) + str(int(num1_str) * int(num2_str)**(nth-1)) + str(int(num1_str) * int(num2_str)**(nth-1)) + str(int(num1_str) * int(num2_str)**(nth-1)) + str(int(num1_str) * int(num2_str)**(nth-1))\n\n\nif __name__ == \"__main__\":\n    print(find_digit(2, 3, 1))",
      -1.5537109375
    ],
    [
      "def get_nth_digit(num1, num2, nth):\n    return num1 // num2 ** (nth - 1)\n\n\nprint(get_nth_digit(2, 3, 1))\nprint(get_nth_digit(2, 3, 2))\nprint(get_nth_digit(2, 3, 3))\nprint(get_nth_digit(2, 3, 4))\nprint(get_nth_digit(2, 3, 5))\nprint(get_nth_digit(2, 3, 6))\nprint(get_nth_digit(2, 3, 7))\nprint(get_nth_digit(2, 3, 8))\nprint(get_nth_digit(2, 3, 9))\nprint(get_nth_digit(2, 3, 10))\nprint(get_nth_digit(2, 3, 11))\nprint(get_nth_digit(2, 3, 12))\nprint(get_nth_digit(2, 3, 13))\nprint(get_nth_digit(2, 3, 14))\nprint(get_nth_digit(2, 3, 15))\nprint(get_nth_digit(2, 3, 16))\nprint(get_nth_digit(2, 3, 17))\nprint(get_nth_digit(2, 3, 18))\nprint(get_nth_digit(2, 3, 19))\nprint(get_nth_digit(2, 3, 20))\nprint(get_nth_digit(2, 3, 21))\nprint(get_nth_digit(2, 3, 22))\nprint(get_nth_digit(2, 3, 23))\nprint(get_nth_digit(2, 3, 24))\nprint(get_nth_digit(2, 3, 25))\nprint(get_nth_digit(2, 3, 26))\nprint(get_nth_digit(2, 3, 27))\nprint(get_nth_digit(2, 3, 28))\nprint(get_nth_digit(2, 3, 29))\nprint(get_nth_digit(2,",
      -1.634765625
    ],
    [
      "def find_nth_digit(num1, num2, n):\n    n = int(n)\n    if (num1%num2 == 0):\n        return (num1//num2)%10\n    else:\n        return \"Invalid\"\n\n\nprint(find_nth_digit(5, 4, 3))",
      -2.31640625
    ],
    [
      "def proper_fraction(n,m):\n    if n%m==0:\n        return str(n//m)\n    else:\n        return \"Invalid input\"\n\nn = int(input(\"Enter a number: \"))\nm = int(input(\"Enter a number: \"))\nprint(proper_fraction(n,m))",
      -2.56640625
    ],
    [
      "def digit_fraction(num1, num2, nth):\n    # num1, num2 = map(int, input().split())\n    # nth = int(input())\n\n    # if num1 < num2:\n    #     num1, num2 = num2, num1\n\n    # if num1 == num2:\n    #     return str(num1) + str(nth)\n\n    # if num1 > num2:\n    #     num1, num2 = num2, num1\n\n    # if num1 % num2 == 0:\n    #     return str(num1 // num2) + str(nth)\n\n    # return str(num1 // num2) + str(nth)\n\n    # for i in range(1, num2):\n    #     if num1 % i == 0 and num2 % i == 0:\n    #         return str(num1 // i) + str(nth)\n\n    # for i in range(1, num2):\n    #     if num1 % i == 0 and num2 % i!= 0:\n    #         return str(num1 // i) + str(nth)\n\n    # return str(num1 // num2) + str(nth)\n\n    return str(num1 // num2) + str(nth)\n\n\nprint(digit_fraction(4, 5, 3))",
      -2.935546875
    ],
    [
      "def proper_fraction(n1, n2, n):\n    if n2 > n1:\n        n1, n2 = n2, n1\n    n1 = n1 * 10\n    n2 = n2 * 10\n    d = n1 % n2\n    return d\n\n\nif __name__ == \"__main__\":\n    print(proper_fraction(2, 7, 3))",
      -3.0859375
    ],
    [
      "def proper_fraction(a, b, n):\n    return str(int(a/b)**n)\n\n\ndef main():\n    print(proper_fraction(2, 3, 3))\n\n\nif __name__ == \"__main__\":\n    main()",
      -3.193359375
    ],
    [
      "def proper_fraction(a,b,n):\n    return a//b**n\n\n\nprint(proper_fraction(4,2,3))\nprint(proper_fraction(3,2,1))\nprint(proper_fraction(5,2,4))\nprint(proper_fraction(4,4,2))",
      -3.306640625
    ],
    [
      "def find_nth_digit(num,nth):\n    return str(num//10**(nth-1))[-1]\n\nnum = int(input(\"Enter the first number: \"))\nnth = int(input(\"Enter the nth digit: \"))\n\nprint(find_nth_digit(num,nth))",
      -3.46875
    ],
    [
      "def proper_fraction(a, b, n):\n    sum = 0\n    for i in range(n):\n        sum += a//b\n        a = b\n        b = sum\n    return a%b\n\nprint(proper_fraction(2, 3, 3))",
      -3.7578125
    ],
    [
      "def proper_fraction(num1, num2, digit):\n    result = (num1//10**(digit-1))*num2//10**digit\n    return result\n\nif __name__ == \"__main__\":\n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n    digit = int(input(\"Enter the digit you want to find: \"))\n    result = proper_fraction(num1, num2, digit)\n    print(f\"The proper fraction of {num1} and {num2} is {result}\")",
      -3.9375
    ],
    [
      "def nth_digit(a, b, n):\n    a = int(a)\n    b = int(b)\n\n    if n == 1:\n        return a\n    else:\n        return a * b / 10 ** n\n\n\nprint(nth_digit(12, 8, 3))",
      -4.015625
    ],
    [
      "def fraction(n, m):\n    f = n//m\n    return str(f)\n\nn = int(input(\"Enter a number: \"))\nm = int(input(\"Enter a number: \"))\n\nprint(\"The nth digit in the proper fraction of two given numbers is: {}\".format(fraction(n,m)))",
      -4.05859375
    ],
    [
      "def get_fraction(num, denom):\n    if denom == 0:\n        return 0\n    return num // denom\n\ndef get_nth_digit(num, denom, nth):\n    num = get_fraction(num, denom)\n    return str(num)[nth - 1]\n\nnum = int(input(\"Enter the first number: \"))\ndenom = int(input(\"Enter the second number: \"))\nnth = int(input(\"Enter the nth digit: \"))\nprint(get_nth_digit(num, denom, nth))",
      -4.109375
    ],
    [
      "def nth_digit(n, a, b):\n    num = str(a * b)\n    if n < len(num) - 1:\n        return int(num[n])\n    else:\n        return 0\n\nprint(nth_digit(6, 2, 3))\nprint(nth_digit(6, 2, 7))\nprint(nth_digit(6, 2, 8))\nprint(nth_digit(6, 2, 9))\nprint(nth_digit(6, 2, 10))\nprint(nth_digit(6, 2, 11))\nprint(nth_digit(6, 2, 12))\nprint(nth_digit(6, 2, 13))\nprint(nth_digit(6, 2, 14))\nprint(nth_digit(6, 2, 15))\nprint(nth_digit(6, 2, 16))\nprint(nth_digit(6, 2, 17))\nprint(nth_digit(6, 2, 18))\nprint(nth_digit(6, 2, 19))\nprint(nth_digit(6, 2, 20))\nprint(nth_digit(6, 2, 21))\nprint(nth_digit(6, 2, 22))\nprint(nth_digit(6, 2, 23))\nprint(nth_digit(6, 2, 24))\nprint(nth_digit(6, 2, 25))\nprint(nth_digit(6, 2, 26))\nprint(nth_digit(6, 2, 27))\nprint(nth_digit(6, 2, 28))\nprint(nth_digit(6, 2, 29))\nprint(nth_digit(6, 2, 30))\nprint(nth_digit(6, 2, 31))\nprint(nth_digit(6, 2, 32))\nprint(nth_digit(6, 2, 33))\nprint(nth_digit(6, 2, 34))\nprint(nth_digit(6, 2, 35))\nprint(nth_digit(6, 2, 36))\nprint(nth_digit(6, 2, 37))\nprint(nth_digit(6,",
      -4.14453125
    ],
    [
      "def find_digit(n,m):\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return int(str(n)[-1]) * int(str(m)[-1])\n\n\nprint(find_digit(1,2))",
      -4.29296875
    ],
    [
      "def find_digit(num, den):\n    if den == 0:\n        return num\n    else:\n        return num // den\n\n\nprint(find_digit(12, 9))\nprint(find_digit(12, 8))\nprint(find_digit(12, 7))\nprint(find_digit(12, 6))\nprint(find_digit(12, 5))\nprint(find_digit(12, 4))\nprint(find_digit(12, 3))\nprint(find_digit(12, 2))\nprint(find_digit(12, 1))",
      -4.51171875
    ],
    [
      "def find_nth_digit(n, a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    else:\n        return (find_nth_digit(n-1, a, b) + find_nth_digit(n-1, b, a)) % 10\n\n\nprint(find_nth_digit(2, 3, 4))\nprint(find_nth_digit(2, 3, 5))\nprint(find_nth_digit(2, 3, 6))\nprint(find_nth_digit(2, 3, 7))\nprint(find_nth_digit(2, 3, 8))\nprint(find_nth_digit(2, 3, 9))\nprint(find_nth_digit(2, 3, 10))",
      -4.98828125
    ],
    [
      "def find_nth_digit(num1, num2, nth):\n    if nth < 0:\n        nth += 10\n    result = 0\n    while nth > 0:\n        result = result * 10 + num1 % num2\n        num1 = num1 // num2\n        nth -= 1\n    return result\n\n\nprint(find_nth_digit(2, 3, 4))",
      -5.109375
    ],
    [
      "def nth_digit(n, a):\n    if n == 1:\n        return a\n    if n == 2:\n        return a//10\n    if n == 3:\n        return a//100\n    if n == 4:\n        return a//1000\n\nprint(nth_digit(3, 4))",
      -5.17578125
    ],
    [
      "def find_nth_digit(n, a):\n    if n == 1:\n        return a\n    else:\n        return find_nth_digit(n-1, a*10**n)\n\nprint(find_nth_digit(3, 4))\nprint(find_nth_digit(3, 2))",
      -5.2890625
    ],
    [
      "def nth_digit_fraction(a, b, n):\n    # Your code here\n    if n > len(str(a)):\n        return -1\n    if n > len(str(b)):\n        return -1\n    else:\n        return str(a) + str(b)[-1]\n\n\nif __name__ == \"__main__\":\n    print(nth_digit_fraction(8, 7, 3))",
      -5.71484375
    ],
    [
      "def find_nth_digit(num1, num2, nth):\n    # Finding the proper fraction\n    if num1 % num2 == 0:\n        return int(str(num1 / num2)[nth])\n    else:\n        return 0\n\n\nprint(find_nth_digit(12, 36, 2))\nprint(find_nth_digit(12, 36, 3))\nprint(find_nth_digit(12, 36, 4))\nprint(find_nth_digit(12, 36, 5))\nprint(find_nth_digit(12, 36, 6))\nprint(find_nth_digit(12, 36, 7))\nprint(find_nth_digit(12, 36, 8))\nprint(find_nth_digit(12, 36, 9))\nprint(find_nth_digit(12, 36, 10))\nprint(find_nth_digit(12, 36, 11))\nprint(find_nth_digit(12, 36, 12))\nprint(find_nth_digit(12, 36, 13))\nprint(find_nth_digit(12, 36, 14))\nprint(find_nth_digit(12, 36, 15))\nprint(find_nth_digit(12, 36, 16))\nprint(find_nth_digit(12, 36, 17))\nprint(find_nth_digit(12, 36, 18))\nprint(find_nth_digit(12, 36, 19))\nprint(find_nth_digit(12, 36, 20))\nprint(find_nth_digit(12, 36, 21))\nprint(find_nth_digit(12, 36, 22))\nprint(find_nth_digit(12, 36, 23))\nprint(find_nth_digit(12, 36, 24))\nprint(find_nth_digit(12, 36, 25))\nprint(find_nth_digit(12, 36, 26))\nprint(find_nth_digit(12, 36, 27))\nprint(find_nth_digit(12, 36, 28))\nprint(find_nth_digit(12, 36, 29))",
      -5.78515625
    ],
    [
      "def proper_fraction(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if m == 0:\n        return n\n    else:\n        return proper_fraction(m, n % m)\n\n\nprint(proper_fraction(1, 2))\nprint(proper_fraction(2, 3))\nprint(proper_fraction(3, 4))\nprint(proper_fraction(4, 5))\nprint(proper_fraction(5, 6))",
      -5.87109375
    ],
    [
      "def nth_digit(n,a,b):\n    a = int(a)\n    b = int(b)\n    i = 0\n    while i < n:\n        if a%b == 0:\n            return i\n        i = i+1\n    return -1\n\n\nprint(nth_digit(4,100,200))",
      -6.13671875
    ],
    [
      "def find_nth_digit(n, a, b):\n    if b == 0:\n        return 0\n    else:\n        return int(((a//b)*n)%10)\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    a = int(input(\"Enter a number: \"))\n    b = int(input(\"Enter a number: \"))\n    print(find_nth_digit(n, a, b))\n\n\nif __name__ == \"__main__\":\n    main()",
      -6.31640625
    ],
    [
      "def find_nth_digit(num1, num2, n):\n    a = num1 % num2\n    b = num1 / num2\n    return (str(b)[-n])\n\n\nprint(find_nth_digit(12, 6, 1))\nprint(find_nth_digit(12, 6, 3))",
      -6.33984375
    ],
    [
      "def proper_fraction(n, m):\n    n = int(n)\n    m = int(m)\n\n    if n > m:\n        n, m = m, n\n\n    if n % m == 0:\n        return int(n/m)\n\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    print(proper_fraction(4, 2))",
      -6.6015625
    ],
    [
      "def find_digit(num1, num2, n):\n    if num1 == 0:\n        return num2\n    if num2 == 0:\n        return num1\n    if n == 0:\n        return num1 / num2\n    if n == 1:\n        return num1 / num2\n    if n == 2:\n        return num1 / num2\n    if n == 3:\n        return num1 / num2\n    if n == 4:\n        return num1 / num2\n    if n == 5:\n        return num1 / num2\n    if n == 6:\n        return num1 / num2\n    if n == 7:\n        return num1 / num2\n    if n == 8:\n        return num1 / num2\n    if n == 9:\n        return num1 / num2\n    if n == 10:\n        return num1 / num2\n    if n == 11:\n        return num1 / num2\n    if n == 12:\n        return num1 / num2\n    if n == 13:\n        return num1 / num2\n    if n == 14:\n        return num1 / num2\n    if n == 15:\n        return num1 / num2\n    if n == 16:\n        return num1 / num2\n    if n == 17:\n        return num1 / num2\n    if n == 18:\n        return num1 / num2\n    if n == 19:\n        return num1 / num2\n    if n == 20:\n        return num1 / num2\n    if n == 21:\n        return num1 / num2\n    if n == 22:\n        return num1 / num2\n    if n == 23:\n        return num1 / num2\n    if n == 24:\n        return num1 / num2\n    if n == 25:\n        return num1 / num2\n    if n == 26:\n        return num1 / num2\n    if n == 27:\n        return num1 / num2\n    if n == 28:\n        return num1 / num2\n    if n == 29:\n        return num1 / num2\n    if n == 30:\n        return num1 / num2\n    if n",
      -6.609375
    ],
    [
      "def find_digit(n, d):\n\tif (n > 1 and d > 1):\n\t\treturn int(str(n)[-(d+1):])\n\telif (n > 1):\n\t\treturn int(str(n))\n\telif (d > 1):\n\t\treturn int(str(d))\n\nn = int(input(\"Enter the number: \"))\nd = int(input(\"Enter the number of digit: \"))\nprint(find_digit(n, d))",
      -6.88671875
    ],
    [
      "def get_digit(n, m):\n    if n == m:\n        return n\n    elif n > m:\n        return get_digit(m, n % m)\n    else:\n        return get_digit(n, m % n)\n\ndef get_digit_n_digit(n, m):\n    return str(get_digit(n, m))[1:len(str(get_digit(n, m)))]\n\nprint(get_digit_n_digit(2, 3))",
      -6.90234375
    ],
    [
      "def get_nth_digit(n, m):\n    n = str(n)\n    m = str(m)\n    if len(n) > len(m):\n        n = n[:len(m)]\n        m = m[:len(n)]\n\n    if len(n) == len(m):\n        return int(n[len(m) - 1])\n    else:\n        return 0\n\n\nprint(get_nth_digit(12, 13))",
      -6.92578125
    ],
    [
      "def get_nth_digit(n1, n2, n):\n    if n == 1:\n        return str(int(n1) / int(n2))\n    elif n == 2:\n        return str(int(n1) / int(n2)) + str(int(n2) / int(n1))\n    else:\n        return get_nth_digit(n1, n2, n - 1)",
      -7.41796875
    ],
    [
      "def proper_fraction(n1, n2, nth):\n    if nth > 9:\n        return 0\n    elif nth > 0:\n        return (int(n1) + int(n2)) / (int(n1) + int(n2) - int(n1 * n2))\n    else:\n        return 0\n\nprint(proper_fraction(1234, 5678, 2))\nprint(proper_fraction(1234, 5678, 3))",
      -7.453125
    ],
    [
      "import math\n\ndef find_fraction(num, den, n):\n\n    num = num/10\n    den = den/10\n\n    if n == 1:\n        return num\n    else:\n        return find_fraction(num, den, n-1)\n\n\nprint(find_fraction(10, 20, 1))\nprint(find_fraction(10, 20, 2))\nprint(find_fraction(10, 20, 3))\nprint(find_fraction(10, 20, 4))\nprint(find_fraction(10, 20, 5))\nprint(find_fraction(10, 20, 6))\nprint(find_fraction(10, 20, 7))\nprint(find_fraction(10, 20, 8))\nprint(find_fraction(10, 20, 9))\nprint(find_fraction(10, 20, 10))\nprint(find_fraction(10, 20, 11))\nprint(find_fraction(10, 20, 12))\nprint(find_fraction(10, 20, 13))\nprint(find_fraction(10, 20, 14))\nprint(find_fraction(10, 20, 15))\nprint(find_fraction(10, 20, 16))\nprint(find_fraction(10, 20, 17))\nprint(find_fraction(10, 20, 18))\nprint(find_fraction(10, 20, 19))\nprint(find_fraction(10, 20, 20))\nprint(find_fraction(10, 20, 21))\nprint(find_fraction(10, 20, 22))\nprint(find_fraction(10, 20, 23))\nprint(find_fraction(10, 20, 24))\nprint(find_fraction(10, 20, 25))\nprint(find_fraction(10, 20, 26))\nprint(find_fraction(10, 20, 27))\nprint(find_fraction(10, 20, 28))\nprint(find_fraction(10, 20, 29))\nprint(find_fraction(10, 20, 30))\nprint(find_fraction(10, 20, 31))\nprint(find_fraction(10, 20, 32))\nprint(find_fraction(10, 20, 33))\nprint(find_fraction(10, 20, 34))\nprint(find",
      -7.47265625
    ],
    [
      "def nth_digit_of_fraction(num1, num2, n):\n    if n == 1:\n        return str(num1)\n    else:\n        return str(num1) + \" \" + str(nth_digit_of_fraction(num2, num1, n-1))\n\nprint(nth_digit_of_fraction(12, 3, 5))",
      -7.7265625
    ],
    [
      "def find_digit(n, m):\n    d = 0\n    while n/m > 0:\n        n, m = m, n/m\n        d += 1\n    return d\n\n\nprint(find_digit(int(input(\"Enter a number: \")), int(input(\"Enter another number: \"))))",
      -7.875
    ],
    [
      "def find_nth_digit(num1, num2, nth):\n    if nth == 1:\n        return num1//num2\n    elif nth == 2:\n        return num1//num2\n    elif nth == 3:\n        return num1//num2\n    elif nth == 4:\n        return num1//num2\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    print(find_nth_digit(2, 3, 2))",
      -7.9140625
    ],
    [
      "def proper_fraction(a, b, n):\n    if a == b:\n        return n\n    else:\n        if a % b == 0:\n            return proper_fraction(a//b, b, n-1)\n        else:\n            return proper_fraction(b//a, a, n-1)\n\n\n\na = int(input(\"Enter a number: \"))\nb = int(input(\"Enter a number: \"))\nn = int(input(\"Enter a number: \"))\n\nprint(proper_fraction(a, b, n))",
      -7.95703125
    ],
    [
      "def digit_fraction(n, m):\n    n = str(n)\n    m = str(m)\n    if len(n) == 1:\n        return int(n)\n    elif len(n) == 2:\n        if m[1] == n[0]:\n            return digit_fraction(int(n[0]), int(m[0]))\n        else:\n            return 0\n    elif len(n) == 3:\n        if m[1] == n[2]:\n            return digit_fraction(int(n[0]), int(m[2]))\n        else:\n            return 0\n    elif len(n) == 4:\n        if m[1] == n[3]:\n            return digit_fraction(int(n[0]), int(m[3]))\n        else:\n            return 0\n    elif len(n) == 5:\n        if m[1] == n[4]:\n            return digit_fraction(int(n[0]), int(m[4]))\n        else:\n            return 0\n    elif len(n) == 6:\n        if m[1] == n[5]:\n            return digit_fraction(int(n[0]), int(m[5]))\n        else:\n            return 0\n    elif len(n) == 7:\n        if m[1] == n[6]:\n            return digit_fraction(int(n[0]), int(m[6]))\n        else:\n            return 0\n    else:\n        return 0\n\n\nprint(digit_fraction(9, 8))\nprint(digit_fraction(10, 10))\nprint(digit_fraction(9, 9))\nprint(digit_fraction(9, 9))",
      -8.03125
    ],
    [
      "def proper_fraction(n1, n2, n):\n    # the fraction is defined as 1/n2\n    if n2 == 0:\n        return 1\n    # the fraction is defined as 1/(n1+n2)\n    else:\n        return (n1/n2)\n\nprint(proper_fraction(5,6,9))",
      -8.1484375
    ],
    [
      "def proper_fraction(a, b, n):\n    if (b == 0):\n        return a\n    else:\n        return proper_fraction(a, b // 10, n) * 10 + proper_fraction(a, b % 10, n)\n\nprint(proper_fraction(10, 20, 4))",
      -8.2109375
    ],
    [
      "def get_nth_digit_of_frac(a,b,n):\n    if n == 1:\n        return a//b\n    else:\n        return get_nth_digit_of_frac(a,b,n-1)//b\n\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nn = int(input(\"Enter the nth digit: \"))\n\nprint(get_nth_digit_of_frac(a,b,n))",
      -8.5859375
    ],
    [
      "def proper_fraction(num1, num2, nth):\n    \"\"\"\n    :param num1:\n    :param num2:\n    :param nth:\n    :return:\n    \"\"\"\n    num = num1 // num2\n    num_str = str(num)\n    if len(num_str) > nth:\n        num_str = num_str[:nth]\n    return num_str\n\n\nif __name__ == '__main__':\n    print(proper_fraction(3, 5, 3))",
      -8.609375
    ],
    [
      "def find_nth_digit(n, x, y):\n    if n == 1:\n        return x//y\n    else:\n        return find_nth_digit(n-1, x*y, y*x)\n\n\ndef main():\n    print(find_nth_digit(3, 2, 5))\n\n\nif __name__ == \"__main__\":\n    main()",
      -9.1015625
    ],
    [
      "def digit_fraction(num1, num2, digit):\n    return num1 // num2**digit\n\n\nif __name__ == \"__main__\":\n    num1 = int(input(\"Enter a number: \"))\n    num2 = int(input(\"Enter another number: \"))\n    digit = int(input(\"Enter a digit: \"))\n    print(\"The digit fraction of {} and {} is {}\".format(num1, num2, digit_fraction(num1, num2, digit)))",
      -9.109375
    ],
    [
      "def find_digit(num1, num2, digit):\n    if num1 > num2:\n        num1, num2 = num2, num1\n    if num1 == num2:\n        return 0\n    if num1 > num2:\n        num1, num2 = num2, num1\n    num1, num2 = int(num1), int(num2)\n    while num1 >= num2:\n        num1 -= num2\n        num2 += 1\n    return num1 % digit\n\n\ndef main():\n    print(find_digit(2, 3, 10))\n    print(find_digit(2, 3, 11))\n    print(find_digit(2, 3, 12))\n    print(find_digit(2, 3, 13))\n    print(find_digit(2, 3, 14))\n    print(find_digit(2, 3, 15))\n    print(find_digit(2, 3, 16))\n    print(find_digit(2, 3, 17))\n    print(find_digit(2, 3, 18))\n    print(find_digit(2, 3, 19))\n    print(find_digit(2, 3, 20))\n    print(find_digit(2, 3, 21))\n    print(find_digit(2, 3, 22))\n    print(find_digit(2, 3, 23))\n    print(find_digit(2, 3, 24))\n    print(find_digit(2, 3, 25))\n    print(find_digit(2, 3, 26))\n    print(find_digit(2, 3, 27))\n    print(find_digit(2, 3, 28))\n    print(find_digit(2, 3, 29))\n    print(find_digit(2, 3, 30))\n    print(find_digit(2, 3, 31))\n    print(find_digit(2, 3, 32))\n    print(find_digit(2, 3, 33))\n    print(find_digit(2, 3, 34))\n    print(find_digit(2, 3, 35))\n    print(find_digit(2, 3, 36))\n    print(find_digit",
      -9.140625
    ],
    [
      "def digit_fraction(n1, n2, nth):\n    a = n1 // n2\n    b = n1 % n2\n    if a == 0:\n        return str(b)\n    else:\n        return str(b) + digit_fraction(n1, n2, nth-1)\n\n\nprint(digit_fraction(3, 8, 3))\nprint(digit_fraction(3, 8, 4))\nprint(digit_fraction(2, 3, 4))\nprint(digit_fraction(3, 2, 4))\nprint(digit_fraction(3, 2, 5))\nprint(digit_fraction(2, 3, 5))\nprint(digit_fraction(3, 2, 6))\nprint(digit_fraction(3, 2, 7))\nprint(digit_fraction(3, 2, 8))\nprint(digit_fraction(3, 2, 9))\nprint(digit_fraction(3, 2, 10))\nprint(digit_fraction(3, 2, 11))\nprint(digit_fraction(3, 2, 12))\nprint(digit_fraction(3, 2, 13))\nprint(digit_fraction(3, 2, 14))\nprint(digit_fraction(3, 2, 15))\nprint(digit_fraction(3, 2, 16))\nprint(digit_fraction(3, 2, 17))\nprint(digit_fraction(3, 2, 18))\nprint(digit_fraction(3, 2, 19))\nprint(digit_fraction(3, 2, 20))\nprint(digit_fraction(3, 2, 21))\nprint(digit_fraction(3, 2, 22))\nprint(digit_fraction(3, 2, 23))\nprint(digit_fraction(3, 2, 24))\nprint(digit_fraction(3, 2, 25))\nprint(digit_fraction(3, 2, 26))\nprint(digit_fraction(3, 2, 27))\nprint(digit_fraction(3, 2, 28))\nprint(digit_fraction(3, 2, 29))\nprint(digit_fraction(3, 2, 30))\nprint(digit_fraction(3, 2, 31))\nprint(digit_fraction(3, 2, 32))\nprint(digit_fraction(",
      -9.625
    ],
    [
      "def proper_fraction(a,b,n):\n    a_len = len(str(a))\n    b_len = len(str(b))\n    if a_len > b_len:\n        a,b = b,a\n    if a_len < b_len:\n        a,b = b,a\n    if b == 0:\n        return 0\n    a_n = str(a)[n-1]\n    b_n = str(b)[n-1]\n    if a_n == b_n:\n        return 1\n    else:\n        return proper_fraction(b,a%b,n-1)\n\n\nprint(proper_fraction(12,23,1))",
      -10.1796875
    ],
    [
      "def get_digit(num1,num2,n):\n    if num1 == 0 or num2 == 0:\n        return 0\n    else:\n        return (num1/num2)**n\n\n\ndef get_digit_2(num1,num2,n):\n    if num1 == 0 or num2 == 0:\n        return 0\n    else:\n        return (num1/num2)**(n+1)\n\n\nprint(get_digit(4,2,1))\nprint(get_digit_2(4,2,1))\nprint(get_digit_2(4,2,3))\nprint(get_digit_2(4,2,4))\nprint(get_digit_2(4,2,5))",
      -10.2109375
    ],
    [
      "def get_nth_digit_of_proper_fraction(num1, num2, n):\n    # check whether the numbers are in the proper fraction\n    if num1 > num2:\n        num1, num2 = num2, num1\n\n    if num1 == 0:\n        return num2\n    if num2 == 0:\n        return num1\n\n    # get the quotient\n    quotient = int(num1 / num2)\n\n    # get the remainder\n    remainder = num1 % num2\n\n    # check whether the remainder is in the proper fraction\n    if remainder == 0:\n        return get_nth_digit_of_proper_fraction(num2, quotient, n - 1)\n    else:\n        return get_nth_digit_of_proper_fraction(quotient, remainder, n - 1)\n\n\nprint(get_nth_digit_of_proper_fraction(4, 7, 2))",
      -10.25
    ],
    [
      "def proper_fraction(n, m):\n    if n < m:\n        n, m = m, n\n    a = [int(i) for i in str(n)]\n    b = [int(i) for i in str(m)]\n    d = 0\n    for i in range(len(a)):\n        d += a[i] * b[i]\n    return d\n\n\nprint(proper_fraction(12, 30))",
      -10.3828125
    ],
    [
      "def proper_fraction(n, a, b):\n    if n > b:\n        a, b = b, a\n    return str(a // b) + (str(a % b) if a % b!= 0 else '') + str(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(proper_fraction(3, 6, 12))",
      -10.9296875
    ],
    [
      "def proper_fraction(n, m):\n    if n > m:\n        n, m = m, n\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return int(str(n // m)[m - 1])\n\n\nprint(proper_fraction(2, 4))\nprint(proper_fraction(3, 4))\nprint(proper_fraction(5, 4))\nprint(proper_fraction(7, 4))\nprint(proper_fraction(9, 4))\nprint(proper_fraction(2, 5))",
      -11.1640625
    ],
    [
      "def nth_digit_in_fraction(a, b, n):\n    a_list = str(a)\n    b_list = str(b)\n    result = \"\"\n    for i in range(len(a_list)):\n        if i == n:\n            result += a_list[i]\n        else:\n            result += a_list[i] + b_list[i]\n    return int(result)\n\n\nprint(nth_digit_in_fraction(20, 12, 4))",
      -11.875
    ],
    [
      "import math\n\ndef find_nth_digit(n, a, b):\n    if n == 1:\n        return a//b\n    else:\n        return find_nth_digit(n-1, a, b*math.pow(10, n))\n\n\nprint(find_nth_digit(3, 12, 100))\nprint(find_nth_digit(4, 12, 100))\nprint(find_nth_digit(5, 12, 100))\nprint(find_nth_digit(6, 12, 100))\nprint(find_nth_digit(7, 12, 100))\nprint(find_nth_digit(8, 12, 100))\nprint(find_nth_digit(9, 12, 100))\nprint(find_nth_digit(10, 12, 100))",
      -11.90625
    ],
    [
      "def find_digit_in_fraction(num1,num2,n):\n    # Write your code here\n    #num1 = int(input(\"Enter the first number: \"))\n    #num2 = int(input(\"Enter the second number: \"))\n    #n = int(input(\"Enter the nth digit: \"))\n    #num_digits = (num1+num2)/10\n    #result = num_digits**n\n    #print(f\"The proper fraction of {num1} and {num2} is {result}\")\n    #return result\n    #num1 = int(input(\"Enter the first number: \"))\n    #num2 = int(input(\"Enter the second number: \"))\n    #n = int(input(\"Enter the nth digit: \"))\n    #num_digits = (num1+num2)/10\n    #result = num_digits**n\n    #print(f\"The proper fraction of {num1} and {num2} is {result}\")\n    #return result\n    #num1 = int(input(\"Enter the first number: \"))\n    #num2 = int(input(\"Enter the second number: \"))\n    #n = int(input(\"Enter the nth digit: \"))\n    #num_digits = (num1+num2)/10\n    #result = num_digits**n\n    #print(f\"The proper fraction of {num1} and {num2} is {result}\")\n    #return result\n    #num1 = int(input(\"Enter the first number: \"))\n    #num2 = int(input(\"Enter the second number: \"))\n    #n = int(input(\"Enter the nth digit: \"))\n    #num_digits = (num1+num2)/10\n    #result = num_digits**n\n    #print(f\"The proper fraction of {num1} and {num2} is {result}\")\n    #return result\n    #num1 = int(input(\"Enter the first number: \"))\n    #num2 = int(input(\"Enter the second number: \"))\n    #n = int(input(\"Enter the nth digit: \"))\n    #num_digits = (num1+num2)/10",
      -12.40625
    ],
    [
      "def find_nth_digit(n, a, b):\n    n_digit = int(n)\n    a_digit = int(a)\n    b_digit = int(b)\n    if n_digit > 9:\n        return find_nth_digit(n_digit - 9, a_digit, b_digit)\n    elif n_digit == 9:\n        return a_digit // b_digit * 10**(n_digit - 9)\n    elif n_digit == 10:\n        return a_digit // b_digit * 100**(n_digit - 10)\n    elif n_digit == 11:\n        return a_digit // b_digit * 1000**(n_digit - 11)\n    elif n_digit == 12:\n        return a_digit // b_digit * 10000**(n_digit - 12)\n    elif n_digit == 13:\n        return a_digit // b_digit * 100000**(n_digit - 13)\n    elif n_digit == 14:\n        return a_digit // b_digit * 1000000**(n_digit - 14)\n    elif n_digit == 15:\n        return a_digit // b_digit * 100000**(n_digit - 15)\n    elif n_digit == 16:\n        return a_digit // b_digit * 100**(n_digit - 16)\n    elif n_digit == 17:\n        return a_digit // b_digit * 1000**(n_digit - 17)\n    elif n_digit == 18:\n        return a_digit // b_digit * 10000**(n_digit - 18)\n    elif n_digit == 19:\n        return a_digit // b_digit * 100**(n_digit - 19)\n    elif n_digit == 20:\n        return a_digit // b_digit * 1000**(n_digit - 20)\n    elif n_digit == 21:\n        return a_digit // b_digit * 10000**(n_digit - 21)\n    elif n_digit == 22:\n        return a_digit // b_digit * 10000**(n_digit - 22)\n    elif n_digit == 23:\n        return a_digit // b_digit * 10000**(n_",
      -12.65625
    ],
    [
      "def find_digit(num1,num2,n):\n    if num1%num2==0:\n        return num1//num2\n    else:\n        return num1//num2+n\n\n\nif __name__ == \"__main__\":\n    print(find_digit(12,26,2))\n    print(find_digit(12,26,3))\n    print(find_digit(12,26,4))\n    print(find_digit(12,26,5))",
      -13.609375
    ],
    [
      "def find_digit(num1, num2, n):\n    a = str(num1 // num2)\n    b = str(num2 // num1)\n    c = str(num1 % num2)\n\n    if n == 0:\n        return int(a + b + c)\n    if n == 1:\n        return int(a + b)\n    if n == 2:\n        return int(a + b + c)\n    if n == 3:\n        return int(a + b + c)\n    if n == 4:\n        return int(a + b + c)\n    if n == 5:\n        return int(a + b + c)\n    if n == 6:\n        return int(a + b + c)\n    if n == 7:\n        return int(a + b + c)\n    if n == 8:\n        return int(a + b + c)\n    if n == 9:\n        return int(a + b + c)\n    if n == 10:\n        return int(a + b + c)\n    if n == 11:\n        return int(a + b + c)\n    if n == 12:\n        return int(a + b + c)\n    if n == 13:\n        return int(a + b + c)\n    if n == 14:\n        return int(a + b + c)\n    if n == 15:\n        return int(a + b + c)\n    if n == 16:\n        return int(a + b + c)\n    if n == 17:\n        return int(a + b + c)\n    if n == 18:\n        return int(a + b + c)\n    if n == 19:\n        return int(a + b + c)\n    if n == 20:\n        return int(a + b + c)\n    if n == 21:\n        return int(a + b + c)\n    if n == 22:\n        return int(a + b + c)\n    if n == 23:\n        return int(a + b + c)\n    if n == 24:\n        return int(a + b + c)\n    if n == 25:\n        return",
      -14.359375
    ],
    [
      "def proper_fraction(n, m):\n    \"\"\"\n    :param n: int\n    :param m: int\n    :return: int\n    \"\"\"\n    if m == 0:\n        return n\n    return n//m * (10**(n%m))\n\n\ndef main():\n    n = int(input(\"Enter the first number: \"))\n    m = int(input(\"Enter the second number: \"))\n    print(proper_fraction(n, m))\n\n\nif __name__ == \"__main__\":\n    main()",
      -14.4375
    ],
    [
      "def find_nth_digit(a,b,n):\n    if n > len(str(b)):\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return int(str(a)[:n])\n    elif n == 2:\n        return int(str(a)[:n])/int(str(b)[:n])\n    elif n == 3:\n        return int(str(a)[:n])%int(str(b)[:n])\n    elif n == 4:\n        return int(str(a)[:n])/int(str(b)[:n])%int(str(a)[:n])\n    elif n == 5:\n        return int(str(a)[:n])%int(str(b)[:n])%int(str(a)[:n])\n    else:\n        return -1\n\n\nprint(find_nth_digit(2,3,4))",
      -14.859375
    ],
    [
      "def find_nth_digit_in_the_fraction(num1, num2, nth):\n    \"\"\"\n    :type num1: int\n    :type num2: int\n    :type nth: int\n    :rtype: int\n    \"\"\"\n    num1 = str(num1)\n    num2 = str(num2)\n    if len(num1)!= len(num2):\n        raise ValueError('The numbers are not the same length')\n    if nth > len(num1):\n        raise ValueError('The nth digit is larger than the number of digits')\n    if nth < 1:\n        raise ValueError('The nth digit is smaller than 1')\n    if nth == 0:\n        return 0\n    elif nth == 1:\n        return 1\n    else:\n        return int(num1[:nth]) * int(num2[:nth])\n\nif __name__ == '__main__':\n    print(find_nth_digit_in_the_fraction(123, 456, 1))\n    print(find_nth_digit_in_the_fraction(123, 456, 2))\n    print(find_nth_digit_in_the_fraction(123, 456, 3))\n    print(find_nth_digit_in_the_fraction(123, 456, 4))\n    print(find_nth_digit_in_the_fraction(123, 456, 5))\n    print(find_nth_digit_in_the_fraction(123, 456, 6))\n    print(find_nth_digit_in_the_fraction(123, 456, 7))\n    print(find_nth_digit_in_the_fraction(123, 456, 8))\n    print(find_nth_digit_in_the_fraction(123, 456, 9))\n    print(find_nth_digit_in_the_fraction(123, 456, 10))\n    print(find_nth_digit_in_the_fraction(123, 456, 11))\n    print(find_nth_digit_in_the_fraction(123, 456, 12))\n    print(find_nth_digit_in_",
      -15.9140625
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}