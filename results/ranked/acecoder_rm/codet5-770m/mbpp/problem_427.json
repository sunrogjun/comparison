{
  "problem": {
    "task_id": "MBPP/438",
    "prompt": "Write a function to count bidirectional tuple pairs.",
    "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
    "test_list": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ],
    "challenge_test_list": [],
    "problem_id": 427
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "class Solution:\n    def countPairs(self, pairs):\n        \"\"\"\n        :type pairs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not pairs:\n            return 0\n\n        pairs.sort(key=lambda x: x[0])\n        result = 0\n        for i in range(len(pairs) - 1):\n            result += 1 if pairs[i][1] < pairs[i + 1][0] else 0\n\n        return result",
      1.1328125
    ],
    [
      "def count_pairs(lst):\n    # Write your code here\n    pairs = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                pairs += 1\n    return pairs\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(count_pairs(lst))",
      1.1328125
    ],
    [
      "def count_pairs(tup):\n    if len(tup) <= 1:\n        return 0\n    count = 0\n    for i in range(1, len(tup)):\n        if tup[i] == tup[i-1]:\n            count += 1\n    return count\n\n\ndef main():\n    tup = (1, 2, 3, 4, 5, 6)\n    print(count_pairs(tup))\n\n\nif __name__ == \"__main__\":\n    main()",
      0.56103515625
    ],
    [
      "class Solution:\n    def countPairs(self, A: List[int]) -> int:\n        if len(A) == 0:\n            return 0\n        res = 0\n        for i in range(len(A)):\n            for j in range(i+1, len(A)):\n                res += A[i] == A[j]\n        return res",
      -0.08660888671875
    ],
    [
      "def count_pairs(tup):\n    if len(tup) == 2:\n        return 1\n    count = 0\n    for i in range(1, len(tup)):\n        if tup[i] == tup[i - 1]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    tup = (1, 2, 3, 4, 5)\n    print(count_pairs(tup))",
      -0.51904296875
    ],
    [
      "def count_pairs(lst):\n    n = len(lst)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] == lst[j]:\n                count += 1\n    return count\n\n\ndef main():\n    print(count_pairs([1, 2, 3, 4, 5]))\n\n\nif __name__ == '__main__':\n    main()",
      -0.552734375
    ],
    [
      "def count_pairs(a, b):\n    if a == b:\n        return 0\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    print(count_pairs(1, 2))\n    print(count_pairs(1, 3))\n    print(count_pairs(1, 4))\n    print(count_pairs(2, 3))\n    print(count_pairs(2, 4))\n    print(count_pairs(3, 4))\n    print(count_pairs(4, 2))",
      -0.63232421875
    ],
    [
      "def count_pairs(lst):\n    if len(lst) == 1:\n        return 0\n    counter = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j]:\n                counter += 1\n    return counter\n\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_pairs(lst))",
      -0.75634765625
    ],
    [
      "def count_pairs(a, b):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            count += 1\n    return count\n\n\nprint(count_pairs((1, 2), (3, 4)))",
      -0.7744140625
    ],
    [
      "def count_pair(t):\n    n = len(t)\n    if n == 2:\n        return 1\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            count += 1\n            if t[i] == t[j]:\n                break\n    return count\n\n\n\nif __name__ == '__main__':\n    print(count_pair((1, 2, 3, 4, 5)))",
      -0.7783203125
    ],
    [
      "class Solution:\n    def countBidirectionalTuplePairs(self, nums: List[int]) -> int:\n        return sum((nums[i] - nums[i + 1]) * (nums[i + 1] - nums[i]) for i in range(len(nums) - 1))",
      -0.810546875
    ],
    [
      "def count_pairs(a, b):\n    a_count = 0\n    b_count = 0\n\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            a_count += 1\n        else:\n            b_count += 1\n\n    return a_count, b_count\n\n\nif __name__ == \"__main__\":\n    print(count_pairs((1, 2, 3), (4, 5, 6)))",
      -0.85595703125
    ],
    [
      "def count_pairs(arr):\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            count += 1\n            if arr[i] == arr[j]:\n                print(i, j)\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 1, 1, 2, 2, 2, 3, 3, 3]))",
      -0.85595703125
    ],
    [
      "def count_pairs(tuple1, tuple2):\n    return sum(x[0] == y[0] for x, y in zip(tuple1, tuple2))",
      -0.85595703125
    ],
    [
      "def count_bidirectional_tuple_pairs(a, b):\n    count = 0\n    for i in range(len(a) - 1):\n        if a[i] == b[i]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_bidirectional_tuple_pairs([1,2,3], [2,3,4]) == 2",
      -0.85693359375
    ],
    [
      "def count_pairs(t):\n    count = 0\n\n    for i in range(len(t)):\n        for j in range(len(t)):\n            if i == j:\n                continue\n            if (t[i][0] == t[j][0] and t[i][1] == t[j][1]):\n                count += 1\n\n    return count",
      -0.85693359375
    ],
    [
      "class Solution:\n    def countPairs(self, nums):\n        # write your code here\n        count = 0\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i == j:\n                    continue\n                if nums[i] == nums[j] and i!= j:\n                    count += 1\n        return count",
      -0.85693359375
    ],
    [
      "def count_pairs(t1,t2):\n    count = 0\n    for i in range(len(t1)):\n        if i+1 < len(t2):\n            if t1[i] == t2[i+1]:\n                count += 1\n    return count",
      -0.85693359375
    ],
    [
      "def count_pairs(a, b):\n    return sum(x == y for x, y in zip(a, b))",
      -0.857421875
    ],
    [
      "class Solution:\n    def countPairs(self, s: str) -> int:\n        count = 0\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                count += 1\n        return count",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum([(x[0] == x[1]) * (x[0] == x[2]) for x in nums])\n\n\na = Solution()\nprint a.countPairs([1, 2, 3, 4, 5, 6, 7])",
      -0.85791015625
    ],
    [
      "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        res = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] > nums[j]:\n                    res += 1\n        return res",
      -0.85791015625
    ],
    [
      "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [0] * len(nums)\n        dp[0] = 1\n        dp[1] = 2\n        for i in range(2, len(nums)):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[len(nums)-1]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.countPairs([1,2,3,4,5,6])",
      -0.85791015625
    ],
    [
      "def count_pairs(tup):\n    count = 0\n    for i in range(len(tup)-1):\n        for j in range(i+1, len(tup)):\n            if tup[i] == tup[j]:\n                count += 1\n    return count\n\n\nprint(count_pairs((1, 2, 3, 4, 5, 6)))",
      -0.85791015625
    ],
    [
      "def count_pairs(T):\n    if not T:\n        return 0\n\n    T = list(T)\n    T.sort()\n    return len(T) - 1\n\n\nif __name__ == \"__main__\":\n    print(count_pairs((1, 2, 3, 4, 5)))\n    print(count_pairs((1, 2, 3, 4, 5, 6)))",
      -0.85791015625
    ],
    [
      "def count_pairs(t):\n    s = 0\n    for i in range(len(t)-1):\n        for j in range(i+1, len(t)):\n            if t[i] == t[j]:\n                s += 1\n    return s",
      -0.8583984375
    ],
    [
      "def pair_count(tuples):\n    if not tuples:\n        return 0\n    pair = 0\n    pair_1 = 0\n    pair_2 = 0\n    for t in tuples:\n        if t[0] == t[1]:\n            pair += 1\n        else:\n            if pair_1 == 0:\n                pair_1 = pair\n                pair_2 = pair\n            else:\n                pair_1 = pair_1 + pair_2\n                pair_2 = pair\n    return pair_1 + pair_2\n\n\nif __name__ == \"__main__\":\n    print(pair_count((1, 2, 3, 4)))\n    print(pair_count((2, 3, 4, 1)))\n    print(pair_count((1, 2, 3, 4)))\n    print(pair_count((2, 3, 4, 1)))",
      -0.8583984375
    ],
    [
      "def count_pairs(tup):\n    if len(tup) <= 1:\n        return 0\n    elif len(tup) == 2:\n        return 1\n    else:\n        return 2 * count_pairs(tup[0:len(tup)//2]) + count_pairs(tup[len(tup)//2:])\n\n\nif __name__ == '__main__':\n    assert count_pairs((1, 2, 3)) == 2\n    assert count_pairs((2, 1, 3)) == 2\n    assert count_pairs((1, 3, 2)) == 2",
      -0.8583984375
    ],
    [
      "def count_pair(a,b):\n    # Write your code here\n    return sum([a[i] == b[j] for i in range(len(a)) for j in range(len(b))])\n\n\nif __name__ == \"__main__\":\n    print(count_pair(('a', 'b'), ('b', 'a')))\n    print(count_pair(('a', 'b'), ('b', 'c')))\n    print(count_pair(('a', 'b'), ('c', 'a')))\n    print(count_pair(('a', 'b'), ('a', 'c')))\n    print(count_pair(('a', 'b'), ('a', 'd')))\n    print(count_pair(('a', 'b'), ('b', 'a')))\n    print(count_pair(('a', 'b'), ('b', 'b')))",
      -0.8583984375
    ],
    [
      "def count_pairs(lst):\n    res = 0\n    if lst[0][0] == lst[1][0] == lst[2][0]:\n        res += 1\n    if lst[0][1] == lst[1][1] == lst[2][1]:\n        res += 1\n    if lst[0][2] == lst[1][2] == lst[2][2]:\n        res += 1\n    return res\n\n\ndef main():\n    lst = [\n        (1, 2, 3),\n        (4, 5, 6),\n        (7, 8, 9)\n    ]\n    print(count_pairs(lst))\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "class Solution:\n    def countPairs(self, s: str) -> int:\n        count = 0\n        for i in range(1, len(s) - 1):\n            if s[i] == s[i - 1] and s[i] == s[i + 1]:\n                count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.countPairs(\"aab\") == 2\n    assert s.countPairs(\"abab\") == 2\n    assert s.countPairs(\"aaaa\") == 1\n    assert s.countPairs(\"aabab\") == 1",
      -0.8583984375
    ],
    [
      "def count_pairs(arr):\n    return len(set(map(lambda x: x[0] + x[1], zip(arr[:-1], arr[1:]))))\n\n\ndef main():\n    print(count_pairs([[1, 2, 3], [1, 2, 3], [3, 2, 1], [1, 2, 3]]))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.8583984375
    ],
    [
      "def count_pairs(a, b):\n    return (len(a) + len(b))//2\n\n\n\na = (1, 2, 3)\nb = (4, 5, 6)\nprint(count_pairs(a, b))",
      -0.8583984375
    ],
    [
      "def count_pairs(t):\n    if len(t) == 1:\n        return 0\n\n    dp = [0 for _ in range(len(t) + 1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(t)):\n        if t[i - 2] == t[i - 1]:\n            dp[i] += dp[i - 1]\n\n    return dp[-1]",
      -0.8583984375
    ],
    [
      "def count_pairs(t):\n    count = 0\n    for i in range(len(t) - 1):\n        if t[i] > t[i + 1]:\n            count += 1\n    return count\n\n\ndef main():\n    print(count_pairs((1, 3, 5, 7)))\n    print(count_pairs((1, 5, 7)))\n\n\nmain()",
      -0.8583984375
    ],
    [
      "def count_pairs(tup1, tup2):\n    pairs = 0\n    for i in range(len(tup1)):\n        if tup1[i] == tup2[i]:\n            pairs += 1\n    return pairs\n\nif __name__ == \"__main__\":\n    assert count_pairs((1, 2, 3), (2, 3, 1)) == 2\n    assert count_pairs((1, 2, 3), (1, 2, 3)) == 2\n    assert count_pairs((1, 2, 3), (2, 2, 3)) == 1\n    assert count_pairs((1, 2, 3), (1, 1, 3)) == 2\n    assert count_pairs((1, 2, 3), (1, 1, 3)) == 1\n    assert count_pairs((1, 2, 3), (1, 1, 3)) == 2",
      -0.8583984375
    ],
    [
      "def count_pairs(tuple_1: tuple, tuple_2: tuple) -> int:\n    count = 0\n    if tuple_1[0] == tuple_2[0]:\n        count += 1\n    if tuple_1[1] == tuple_2[1]:\n        count += 1\n    return count\n\n\nif __name__ == '__main__':\n    assert count_pairs((1, 2), (2, 1)) == 2\n    assert count_pairs((1, 2), (2, 3)) == 2\n    assert count_pairs((1, 2), (1, 3)) == 2\n    assert count_pairs((1, 2), (3, 1)) == 1\n    assert count_pairs((1, 2), (3, 2)) == 1",
      -0.8583984375
    ],
    [
      "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        count = 0\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6]\n    sol = Solution()\n    print(sol.countPairs(nums))",
      -0.8583984375
    ],
    [
      "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if nums[i] > nums[j]:\n                    count += 1\n        return count",
      -0.8583984375
    ],
    [
      "def count_pairs(a, b):\n    count = 0\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            count += 1\n    return count\n\n\nprint(count_pairs((1, 2, 3), (4, 5, 6)))\nprint(count_pairs((1, 2, 3), (4, 5, 6, 7)))",
      -0.8583984375
    ],
    [
      "def count_pairs(a, b):\n    a_pairs = 0\n    b_pairs = 0\n    if len(a) > len(b):\n        a, b = b, a\n\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            a_pairs += 1\n        else:\n            b_pairs += 1\n\n    return a_pairs + b_pairs",
      -0.85888671875
    ],
    [
      "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        count = 0\n        for i in range(1, len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count",
      -0.85888671875
    ],
    [
      "class Solution:\n    def countPairs(self, pairs: List[List[int]]) -> int:\n        pairs.sort()\n        return sum(map(lambda x: x[0] * x[1], pairs))",
      -0.85888671875
    ],
    [
      "def count_pairs(t):\n    n = len(t)\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if t[i] == t[j]:\n                pairs += 1\n    return pairs",
      -0.8984375
    ],
    [
      "def count_pairs(arr):\n    if not arr:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if len(arr) == 3:\n        return 2\n\n    left = count_pairs(arr[:len(arr)//2])\n    right = count_pairs(arr[len(arr)//2:])\n    return left + right",
      -1.0234375
    ],
    [
      "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return 0\n        count = 0\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                count += 1\n        return count",
      -1.103515625
    ],
    [
      "def count_bidirectional_tuples(a, b):\n    count = 0\n    if len(a) == len(b):\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                count += 1\n    return count",
      -1.33203125
    ],
    [
      "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        pairs = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if nums[i] > nums[j]:\n                    pairs += 1\n        return pairs",
      -1.4326171875
    ],
    [
      "def count_pairs(tuple1, tuple2):\n    return sum(x == y for x, y in zip(tuple1, tuple2))\n\n\nif __name__ == \"__main__\":\n    assert count_pairs((1, 2), (3, 4)) == 2\n    assert count_pairs((1, 2), (4, 3)) == 2\n    assert count_pairs((1, 2), (4, 5)) == 2\n    assert count_pairs((1, 2), (5, 4)) == 1\n    assert count_pairs((1, 2), (3, 4)) == 2\n    assert count_pairs((1, 2), (4, 5)) == 1\n    assert count_pairs((1, 2), (4, 6)) == 0\n    assert count_pairs((1, 2), (5, 6)) == 0\n    assert count_pairs((1, 2), (5, 7)) == 0",
      -1.5078125
    ],
    [
      "def count_pairs(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\n\ndef main():\n    s = \"aaabbbcc\"\n    print(count_pairs(s))\n\n\nif __name__ == \"__main__\":\n    main()",
      -1.783203125
    ],
    [
      "def count_pairs(lst):\n    if len(lst) <= 1:\n        return 0\n    count = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j]:\n                count += 1\n    return count\n\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(count_pairs(lst))",
      -1.8212890625
    ],
    [
      "class Solution:\n    def countPairs(self, s: str) -> int:\n        s = s.split(\",\")\n        s = sorted(s)\n        count = 0\n        for i in range(len(s) - 1):\n            for j in range(i + 1, len(s)):\n                if s[i] == s[j]:\n                    count += 1\n        return count",
      -1.9453125
    ],
    [
      "def count_pair(tuple1, tuple2):\n    if tuple1 == tuple2:\n        return 1\n    return 2\n\n\ndef main():\n    print(count_pair((0, 1), (1, 0)))\n    print(count_pair((0, 1), (1, 2)))\n    print(count_pair((0, 1), (2, 0)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.005859375
    ],
    [
      "from typing import List, Tuple\n\n\ndef count_pair(t: Tuple[int]) -> int:\n    return (t[0] + 1) * (t[1] + 1)\n\n\ndef main() -> None:\n    print(count_pair((1, 2, 3)))\n    print(count_pair((1, 2, 3, 4)))\n    print(count_pair((1, 2, 3, 4, 5)))\n    print(count_pair((1, 2, 3, 4, 5, 6)))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.02734375
    ],
    [
      "def count_pairs(arr):\n    pairs = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                pairs += 1\n    return pairs",
      -2.14453125
    ],
    [
      "def count_pairs(tuple_1, tuple_2):\n    # write your code here\n    count = 0\n    for i in range(len(tuple_1)):\n        if tuple_1[i] == tuple_2[i]:\n            count += 1\n    return count\n\n\nprint(count_pairs((1, 2, 3), (4, 5, 6)))",
      -2.208984375
    ],
    [
      "def count_pairs(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            count += 1\n    return count\n\n\ndef main():\n    arr = [0, 1, 2, 3, 4]\n    print(count_pairs(arr))\n\n\nif __name__ == \"__main__\":\n    main()",
      -2.23046875
    ],
    [
      "def count_pairs(pairs):\n    pairs.sort(key = lambda x: x[0])\n    count = 0\n    for i in range(len(pairs) - 1):\n        if pairs[i][1]!= pairs[i + 1][1]:\n            count += 1\n    return count",
      -2.294921875
    ],
    [
      "class Solution:\n    def countPairs(self, n: int, k: int) -> int:\n        if n < k:\n            return 0\n        res = 0\n        for i in range(n - k + 1):\n            for j in range(i + 1, n - k + 1):\n                res += (i + 1) * (j + 1) // 2\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.countPairs(3, 3))",
      -2.322265625
    ],
    [
      "def count_pairs(t):\n    n = len(t)\n    counter = 0\n    for i in range(n-1):\n        if t[i] == t[i+1]:\n            counter += 1\n    return counter\n\nif __name__ == \"__main__\":\n    print(count_pairs((0, 1, 2, 3, 4, 5, 6)))\n    print(count_pairs((1, 2, 3, 4, 5, 6)))\n    print(count_pairs((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(count_pairs((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\n    print(count_pairs((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(count_pairs((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n    print(count_pairs((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34",
      -2.650390625
    ],
    [
      "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums)<2:\n            return 0\n        nums.sort()\n        res = 0\n        for i in range(len(nums)-2):\n            res += nums[i]+nums[i+1]\n        return res\n\ns = Solution()\nprint s.countPairs([1, 2, 3, 4, 5])\nprint s.countPairs([1, 2, 3, 4])\nprint s.countPairs([1, 2, 3, 4, 5, 6, 7])\nprint s.countPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
      -2.77734375
    ],
    [
      "def count_pairs(a, b):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            count += 1\n    return count\n\n\nprint(count_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5]))\nprint(count_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(count_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(count_pairs([1, 2, 3, 4, 5], [1, 3, 4, 5, 6]))",
      -2.857421875
    ],
    [
      "def count_bidirectional_tuples(tup):\n    count = 0\n    for i in range(len(tup) - 1):\n        if tup[i] > tup[i + 1]:\n            count += 1\n    return count\n\n\ndef main():\n    tup = (1, 2, 3, 4)\n    print(count_bidirectional_tuples(tup))\n\n\nif __name__ == '__main__':\n    main()",
      -2.935546875
    ],
    [
      "def count_pairs(a, b):\n    count = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_pairs((1, 2, 3), ((1, 2), (3, 1))) == 2",
      -3.052734375
    ],
    [
      "from typing import List\n\n\ndef count_pairs(s: str) -> int:\n    pairs: int = 0\n    for i in range(len(s) - 1):\n        if i + 1 < len(s):\n            if s[i] == s[i + 1]:\n                pairs += 1\n    return pairs\n\n\nif __name__ == '__main__':\n    assert count_pairs('abcb') == 1\n    assert count_pairs('aa') == 0\n    assert count_pairs('') == 0\n    assert count_pairs('a') == 0",
      -3.140625
    ],
    [
      "class Solution:\n    def countPairs(self, arr: List[int]) -> int:\n        ans = 0\n        for i in range(1, len(arr)-1):\n            for j in range(i+1, len(arr)):\n                ans += abs(arr[i] - arr[j])\n        return ans",
      -3.4140625
    ],
    [
      "def count_bidirectional(t1, t2):\n    # write your code here\n    count = 0\n    for i in range(len(t1)):\n        if t1[i] == t2[i]:\n            count += 1\n    return count\n\n\nt1 = (1, 2)\nt2 = (2, 3)\nprint(count_bidirectional(t1, t2))",
      -3.513671875
    ],
    [
      "def count_pairs(tuple_1, tuple_2):\n    count_1 = 0\n    count_2 = 0\n    for i in range(len(tuple_1)):\n        if tuple_1[i] == tuple_2[i]:\n            count_1 += 1\n        else:\n            break\n    for i in range(len(tuple_2)):\n        if tuple_2[i] == tuple_1[i]:\n            count_2 += 1\n        else:\n            break\n    return count_1, count_2\n\nprint(count_pairs((1,2,3), (2,1,3)))\nprint(count_pairs((1,2,3), (1,2,3)))\nprint(count_pairs((1,2,3), (2,3,1)))\nprint(count_pairs((1,2,3), (1,2,3)))\nprint(count_pairs((1,2,3), (1,2,3)))",
      -3.517578125
    ],
    [
      "def count_pairs(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\nprint(count_pairs([1, 3, 6, 5, 7, 8, 9, 2, 4]))\nprint(count_pairs([1, 1, 2, 3, 4, 5]))\nprint(count_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 4, 5]))\nprint(count_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8",
      -3.5703125
    ],
    [
      "class Solution:\n    def countPairs(self, s: str) -> int:\n        res = 0\n        i = 0\n        while i < len(s):\n            j = i + 1\n            while j < len(s) and s[i] == s[j]:\n                j += 1\n            res += j - i\n            i = j\n        return res\n\n\ns = Solution()\nprint(s.countPairs(\"abcbb\"))",
      -3.62890625
    ],
    [
      "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        ans = 0\n        for i in range(len(nums) - 1):\n            ans += (nums[i] + nums[i + 1]) * 2\n\n        return ans\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print Solution().countPairs(nums)",
      -3.724609375
    ],
    [
      "def count_pairs(tup):\n    if tup[0] == tup[1]:\n        return 1\n    else:\n        return 2\n\n\ndef main():\n    tup = (1, 2, 3, 4, 5, 6, 7)\n    print(count_pairs(tup))\n\n\nif __name__ == \"__main__\":\n    main()",
      -4.203125
    ],
    [
      "def countPairs(tupleA, tupleB):\n    count = 0\n    for i in range(len(tupleA)):\n        if tupleA[i] > tupleB[i]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(countPairs((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)))\n    print(countPairs((1, 2, 3, 4, 5), (5, 6, 7, 8, 9)))",
      -4.20703125
    ],
    [
      "class Solution:\n    def numBidirectionalTuplePairs(self, A):\n        ans = 0\n        A.sort()\n        for i in range(len(A)):\n            if i > 0 and A[i] == A[i-1]:\n                ans += 1\n        return ans\n\n\nA = [1, 2, 3, 4, 5]\nB = [1, 2, 3, 4, 5]\nsol = Solution()\nprint(sol.numBidirectionalTuplePairs(A))",
      -4.234375
    ],
    [
      "def count_pairs(t):\n    if t == ():\n        return 0\n    return 1 + count_pairs(t[0]) + count_pairs(t[1])\n\n\ndef test():\n    assert count_pairs(((1, 2), (2, 1))) == 3\n    assert count_pairs(((1, 2), (2, 3))) == 3\n    assert count_pairs(((1, 2), (3, 2))) == 2\n\n\nif __name__ == \"__main__\":\n    test()",
      -4.51171875
    ],
    [
      "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        dic = {}\n        for num in nums:\n            dic[num] = dic.get(num, 0) + 1\n        return sum(dic.values())\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, 9]\n    s = Solution()\n    print(s.countPairs(nums))",
      -4.54296875
    ],
    [
      "def count_pairs(tuple_):\n    count = 0\n\n    for i in range(len(tuple_)-1):\n        for j in range(len(tuple_)-1):\n            if tuple_[i] == tuple_[j] and i!= j:\n                count += 1\n\n    return count\n\n\ndef test_cases():\n    test_cases = [\n        ('abcd', 2),\n        ('abcd', 1),\n        ('abc', 3),\n        ('abc', 2),\n        ('ab', 3),\n        ('ab', 2),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),\n        ('ab', 1),",
      -4.55859375
    ],
    [
      "from typing import List, Tuple\n\n\ndef count_pairs(arr: List[Tuple[int, int]]) -> int:\n    count = 0\n\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if (arr[i][0] == arr[j][0] and arr[i][1] == arr[j][1]) or (arr[i][0] == arr[j][1] and arr[i][0] == arr[j][1]):\n                count += 1\n\n    return count",
      -4.98828125
    ],
    [
      "def count_pairs(tuple1, tuple2):\n    pairs = 0\n\n    for i in range(len(tuple1)):\n        if tuple1[i] == tuple2[i]:\n            pairs += 1\n\n    return pairs\n\n\nif __name__ == \"__main__\":\n    print(count_pairs((1, 2, 3), (4, 5, 6)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9, 10)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\n    print(count_pairs((1, 2, 3), (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)))\n    print(count_pairs((1, 2, 3),",
      -5.25390625
    ],
    [
      "def count_pairs(arr):\n    # Write your code here\n    return sum([(i+j)//2 for i in range(len(arr)) for j in range(len(arr)) if arr[i]!=arr[j]])\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8),(9,10)]\nprint(count_pairs(arr))\n\narr = [(1,2),(3,4),(5,6),(7,8",
      -5.265625
    ],
    [
      "from typing import List\n\n\ndef count_pairs(A: List[int]) -> int:\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(len(A)-1):\n            if i == j:\n                continue\n            if A[i] == A[j] and A[i] + A[j] == 2:\n                count += 1\n    return count",
      -5.3984375
    ],
    [
      "class Solution:\n    def countBidirectionalPairs(self, A):\n        # write your code here\n        count = 0\n        for i in range(len(A)-2):\n            for j in range(len(A)-1):\n                if i == j:\n                    count += 1\n                else:\n                    count += max(A[i][0],A[j][0]) - min(A[i][1],A[j][1])\n        return count\n\na = Solution()\nprint(a.countBidirectionalPairs([[1,2],[2,1]]))",
      -5.578125
    ],
    [
      "def count_pairs(seq):\n    count = 0\n    for i in range(len(seq)-1):\n        for j in range(i+1, len(seq)):\n            if seq[i] == seq[j]:\n                count += 1\n    return count\n\n\ndef test_cases():\n    test_cases = [\n        ([\"a\", \"a\", \"b\", \"b\"], 3),\n        ([\"a\", \"a\", \"b\", \"c\"], 0),\n        ([\"a\", \"b\", \"c\", \"d\"], 0),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\"], 4),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 5),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], 3),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 0),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], 2),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], 2),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"], 2),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 2),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"], 2),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j",
      -5.59375
    ],
    [
      "def count_pairs(tup):\n    pair_count = 0\n    for i in range(len(tup)):\n        for j in range(i+1, len(tup)):\n            if tup[i] == tup[j]:\n                pair_count += 1\n    return pair_count\n\n\nprint(count_pairs((1, 2, 3, 4, 5)))\nprint(count_pairs((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(count_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9)))",
      -5.875
    ],
    [
      "def count_pairs(arr):\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\n\nprint(count_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 195, 196, 197, 197, 197, 198, 199, 210, 211,",
      -6.06640625
    ],
    [
      "def count_pairs(a,b):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    assert(count_pairs([1,2,3], [1,2,3]) == 1)\n    assert(count_pairs([1,2,3], [2,3,4]) == 2)\n    assert(count_pairs([1,2,3], [1,2,4]) == 2)\n    assert(count_pairs([1,2,3], [2,1,4]) == 1)",
      -6.0703125
    ],
    [
      "def count_pairs(arr):\n    # write your code here\n    arr_count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                arr_count += 1\n\n    return arr_count\n\n\ndef test_case():\n    assert count_pairs([1, 2, 3, 4, 5]) == 2\n    assert count_pairs([1, 2, 3, 4, 5, 6, 7, 8]) == 6\n    assert count_pairs([1, 2, 3, 4, 5]) == 1\n\n\nif __name__ == '__main__':\n    test_case()",
      -6.23046875
    ],
    [
      "def count_pairs(a, b):\n    if a[0] == b[0]:\n        return a[0] + b[0]\n    elif a[1] == b[1]:\n        return a[1] + b[1]\n    else:\n        return a[0] + b[1] + a[1]\n\n\nif __name__ == \"__main__\":\n    print(count_pairs((1, 2, 3), (3, 2, 1)))",
      -6.53125
    ],
    [
      "def count_bidirectional(a, b):\n    count = 0\n    for i in range(len(a)):\n        if i == 0:\n            count += a[i] == b[i]\n        else:\n            count += a[i]!= b[i]\n    return count\n\n\nprint(count_bidirectional([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
      -6.625
    ],
    [
      "def count_pairs(t):\n    count = 0\n    if len(t) == 2:\n        count += 1\n    if len(t) == 3:\n        count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_pairs((1, 2, 3)))\n    print(count_pairs((1, 2, 3, 4, 5, 6, 7)))\n    print(count_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(count_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n    print(count_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(count_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72",
      -6.76171875
    ],
    [
      "def count_pairs(tup):\n    count = 0\n    for i in range(len(tup) - 1):\n        count += tup[i][0] * tup[i + 1][1]\n    return count\n\n\nprint(count_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9)))",
      -6.78125
    ],
    [
      "def count_pairs(arr):\n    return len(arr) - arr.count((0,1))\n\narr = [(1,2),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)]\nprint(count_pairs(arr))\n\narr = [(1,2),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)]\nprint(count_pairs(arr))\n\narr = [(1,2),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)]\nprint(count_pairs(arr))\n\narr = [(1,2),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)]\nprint(count_pairs(arr))",
      -7.05078125
    ],
    [
      "def count_pairs(arr, start, end):\n    res = 0\n    i, j = start, end\n    while i < j:\n        if arr[i] == arr[j]:\n            res += 1\n        i += 1\n        j -= 1\n    return res\n\n\ndef test_cases():\n    assert count_pairs([1, 2, 3, 4, 5], 1, 4) == 2\n    assert count_pairs([1, 2, 3, 4, 5], 2, 5) == 3\n    assert count_pairs([1, 2, 3, 4, 5], 2, 4) == 4\n    assert count_pairs([1, 2, 3, 4, 5], 1, 4) == 0\n    assert count_pairs([1, 2, 3, 4, 5], 1, 5) == 0\n    assert count_pairs([1, 2, 3, 4, 5], 2, 3) == 0\n    assert count_pairs([1, 2, 3, 4, 5], 3, 4) == 0\n    assert count_pairs([1, 2, 3, 4, 5], 4, 5) == 0\n    assert count_pairs([1, 2, 3, 4, 5], 5, 2) == 0",
      -7.5625
    ],
    [
      "class Solution:\n    def countPairs(self, arr):\n        if len(arr) <= 1:\n            return 0\n\n        count = 0\n        for i in range(len(arr)-1):\n            for j in range(len(arr)-i-1):\n                if arr[i] + arr[j] == arr[i+j]:\n                    count += 1\n\n        return count\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.countPairs([1, 2, 3, 4]) == 2\n    assert s.countPairs([1, 2, 3, 4, 5]) == 3\n    assert s.countPairs([1, 2, 3, 4, 5, 6, 7, 8]) == 4\n    assert s.countPairs([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0",
      -8.609375
    ],
    [
      "def count_bidirectional_tuple_pairs(tup):\n    if len(tup) < 2:\n        return 0\n    counter = 0\n    for i in range(len(tup) - 1):\n        for j in range(i + 1, len(tup)):\n            counter += tup[i][j]\n    return counter\n\nprint(count_bidirectional_tuple_pairs((1, 2, 3)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7, 8)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)))\nprint(count_bidirectional_tuple_pairs((1, 2, 3, 4, 5, 6, 7, 8",
      -8.703125
    ],
    [
      "class Tuple(object):\n\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def __eq__(self, other):\n        return self.a == other.a and self.b == other.b\n\n    def __hash__(self):\n        return hash(tuple([self.a, self.b]))\n\n    def __repr__(self):\n        return str(self.a) + \" -> \" + str(self.b)\n\n\ndef count_pairs(t1, t2):\n    count = 0\n    for i in range(len(t1) - 1):\n        for j in range(len(t2) - 1):\n            if t1[i] == t2[j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    t1 = Tuple(1, 1)\n    t2 = Tuple(1, 2)\n    t3 = Tuple(2, 1)\n    print(count_pairs(t1, t2))\n    print(count_pairs(t2, t3))\n    print(count_pairs(t3, t2))",
      -8.765625
    ],
    [
      "def count_pairs(tup):\n    n = len(tup)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if tup[i] == tup[j]:\n                count += 1\n    return count\n\nprint(count_pairs((1,2,3,4,5,6)))",
      -9.3046875
    ],
    [
      "class Solution(object):\n    def countPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        dp = [0 for _ in range(len(nums)+1)]\n        dp[0] = 1\n        for i in range(1, len(nums)+1):\n            for j in range(1, len(nums)+1):\n                if i == j:\n                    dp[i] += dp[j]\n                else:\n                    dp[i] += dp[j] * 2\n        return dp[-1]",
      -10.9765625
    ],
    [
      "def count_pairs(t):\n    a = [0] * (len(t) + 1)\n    for i in range(1, len(t) + 1):\n        a[i] = a[i - 1] + 1\n\n    for i in range(len(t)):\n        for j in range(i + 1, len(t)):\n            if t[i] == t[j]:\n                a[i + 1] += a[j]\n\n    return a[len(t)]\n\n\nif __name__ == \"__main__\":\n    assert count_pairs((1, 2, 3, 4, 5)) == 2\n    assert count_pairs((2, 1, 3, 4)) == 1\n    assert count_pairs((1, 2, 3)) == 0\n    assert count_pairs((1, 1)) == 1\n    assert count_pairs((2, 2)) == 1\n    assert count_pairs((1, 2, 3, 4, 5)) == 5",
      -12.4609375
    ],
    [
      "class Solution:\n    def countPairs(self, A: List[List[int]]) -> int:\n        def dfs(index, path, count):\n            if index == len(A) - 1:\n                count += 1\n                return\n            for i in range(index + 1, len(A)):\n                path.append(A[i])\n                dfs(i, path, count)\n                path.pop()\n\n        count = 0\n        dfs(0, [], count)\n        return count\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    A = [\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n        [[1, 2], [3, 4]],\n    ]\n    assert sol.countPairs(A) == 3",
      -12.4609375
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}