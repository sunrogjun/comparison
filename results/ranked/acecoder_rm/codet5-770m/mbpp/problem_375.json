{
  "problem": {
    "task_id": "MBPP/386",
    "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
    "test_list": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ],
    "challenge_test_list": [],
    "problem_id": 375
  },
  "model_name": "codet5-770m",
  "dataset": "mbpp",
  "ranker_name": "acecoder_rm",
  "num_candidates": 100,
  "ranked_candidates": [
    [
      "def min_swaps(s: str) -> int:\n    counter = 0\n    for i in range(1, len(s)):\n        if s[i]!= s[i - 1]:\n            counter += 1\n    return counter\n\n\nif __name__ == '__main__':\n    s = \"abc\"\n    print(min_swaps(s))",
      3.92578125
    ],
    [
      "class Solution(object):\n    def minSwaps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) <= 1:\n            return 0\n        num_of_swaps = 0\n        count = 0\n        i = 0\n        j = 0\n        while i < len(s):\n            if s[i] == '(':\n                j += 1\n            elif s[i] == ')':\n                num_of_swaps += j - i\n                i += 1\n                j = 0\n            else:\n                i += 1\n        return num_of_swaps",
      1.5625
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    left = 0\n    right = 0\n    swaps = 0\n\n    for i in range(n):\n        if s[i] == '[':\n            left += 1\n        elif s[i] == ']':\n            right += 1\n\n        if left == right:\n            swaps += 1\n\n    return swaps\n\n\nprint(min_swaps(\"[][][]\"))",
      1.53125
    ],
    [
      "def min_swaps(s):\n    swaps = 0\n    for i in range(len(s)):\n        if s[i] == '[':\n            if s[i+1] == ']':\n                swaps += 1\n        elif s[i] == ']':\n            if s[i-1] == '[':\n                swaps += 1\n    return swaps\n\ns = \"([])]\"\nprint(min_swaps(s))",
      1.4423828125
    ],
    [
      "def min_swaps(string):\n    swaps = 0\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                swaps += 1\n                stack.pop()\n    return swaps\n\n\nprint(min_swaps('[([{[[]]}]]]'))",
      1.1357421875
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    min_swaps = 0\n    for i in range(n):\n        if s[i] == '[':\n            min_swaps += 1\n        elif s[i] == ']':\n            min_swaps -= 1\n            if min_swaps == 0:\n                return i - n\n    return min_swaps",
      1.1337890625
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n\n    swaps = 0\n    stack = []\n    for i in range(n):\n        if s[i] == '[':\n            stack.append(i)\n        elif s[i] == ']':\n            if len(stack) == 0:\n                return swaps\n            i = stack.pop()\n            swaps += 1\n    return swaps",
      0.359375
    ],
    [
      "def find_swaps(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    swaps = 0\n    for i in range(len(s)):\n        if s[i] == '(' and s[i-1] == ')':\n            swaps += 1\n        elif s[i] == '(' and s[i-1] == '(':\n            swaps += 1\n        elif s[i] == ')' and s[i-1] == ')':\n            swaps += 1\n    return swaps\n\nprint(find_swaps(\"()()(())\"))\nprint(find_swaps(\"([)]\"))\nprint(find_swaps(\"([)]\"))\nprint(find_swaps(\"([)]\"))\nprint(find_swaps(\"([)]\"))\nprint(find_swaps(\"([)]\"))",
      0.137451171875
    ],
    [
      "def min_swaps(s):\n    # Write your code here\n    n = len(s)\n    if n < 2:\n        return n\n    n_swaps = 0\n    swaps = 0\n    for i in range(n):\n        if s[i] == '(':\n            swaps += 1\n        else:\n            if swaps > 0:\n                n_swaps += 1\n            swaps = 0\n    return n_swaps\n\nif __name__ == '__main__':\n    print(min_swaps('()(())'))",
      0.129150390625
    ],
    [
      "class Solution(object):\n    def minSwaps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) < 2:\n            return 0\n\n        open_brackets = 0\n        close_brackets = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                open_brackets += 1\n            elif s[i] == ')':\n                close_brackets += 1\n\n            if open_brackets == close_brackets:\n                open_brackets -= 1\n                close_brackets -= 1\n\n        return len(s) - open_brackets - close_brackets\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.minSwaps(\"(()())\"))\n    print(s.minSwaps(\"(()(())\"))\n    print(s.minSwaps(\"()()\"))\n    print(s.minSwaps(\"(()()())\"))\n    print(s.minSwaps(\"()\"))\n    print(s.minSwaps(\"()\"))\n    print(s.minSwaps(\"()\"))\n    print(s.minSwaps(\"()\"))",
      0.1014404296875
    ],
    [
      "def min_swaps(s):\n    # Write your code here\n    count = 0\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) > 0:\n                count += 1\n                stack.pop()\n    return count",
      -0.040069580078125
    ],
    [
      "def find_swaps(s):\n    n = len(s)\n    i = 0\n    j = 0\n    count = 0\n    while i < n:\n        if s[i] == '[' and s[j] == ']':\n            count += 1\n            i += 1\n            j += 1\n        elif s[i] == ']' and s[j] == '[':\n            count -= 1\n            i += 1\n        else:\n            j += 1\n\n    return count\n\n\nprint(find_swaps(\"[[[]]]]\"))",
      -0.1693115234375
    ],
    [
      "def min_swaps(s):\n    # Write your code here\n    n = len(s)\n    swaps = 0\n    min_swaps = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            swaps += 1\n        elif s[i] == \")\":\n            swaps -= 1\n        if swaps == 0:\n            min_swaps = i\n    return min_swaps\n\n\nprint(min_swaps(\"(())\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()[]{}\"))\nprint(min_swaps(\"()[]{}\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()[]{}\"))\nprint(min_swaps(\"()[]{}\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()[]{}\"))\nprint(min_swaps(\"()[]{}\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()[]{}\"))\nprint(min_swaps(\"()[]{}\"))",
      -0.477783203125
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        i = 0\n        j = 0\n        while i < len(s) and j < len(s):\n            if s[i] == s[j]:\n                i += 1\n                j += 1\n            else:\n                i += 1\n                j += 1\n        return j - i",
      -0.5400390625
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        n = len(s)\n        stack = []\n        for i in range(n):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if stack:\n                    stack.pop()\n                else:\n                    return n - i\n        return n - stack[-1] if stack else n - stack[0]\n\n\nprint(Solution().minSwaps(\"()()()()()()\") == 3)\nprint(Solution().minSwaps(\"()()()()()()\") == 2)\nprint(Solution().minSwaps(\"()()()()()()\") == 1)",
      -0.54345703125
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    if n <= 1:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(1, n):\n        if s[i] == '(':\n            dp[0][i] = dp[0][i-1] + 1\n        elif s[i] == ')':\n            dp[i][0] = dp[i-1][0] + 1\n    for i in range(1, n):\n        for j in range(0, i):\n            if s[i] == '(' and s[j] == ')':\n                dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n    return dp[n-1][n-1]\n\n\nif __name__ == '__main__':\n    print(min_swaps(\"()()()\"))",
      -0.642578125
    ],
    [
      "def minSwaps(s):\n    n = len(s)\n    if n <= 1:\n        return n\n    swaps = 0\n    for i in range(1, n-1):\n        if s[i] == s[i-1] and s[i] == s[i+1]:\n            swaps += 1\n    return swaps\n\nif __name__ == \"__main__\":\n    s = \"abcabcbb\"\n    print(minSwaps(s))",
      -0.6591796875
    ],
    [
      "class Solution(object):\n    def minSwaps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        stack = []\n        for char in s:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack:\n                    return 0\n                last_char = stack.pop()\n                if last_char!= '[':\n                    return 0\n        return len(stack)",
      -0.85595703125
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    if n < 2:\n        return 0\n    if s[0]!= s[-1]:\n        return 1\n\n    ans = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            ans += min_swaps(s[i:])\n        else:\n            ans += 1\n    return ans\n\nprint(min_swaps(\"([(]))\"))",
      -0.85595703125
    ],
    [
      "def min_swaps(s):\n    return min(len(s)-1, len(s)-2)\n\n\nprint(min_swaps(\"([]())))\"))",
      -0.85595703125
    ],
    [
      "def min_swaps(str):\n  n = len(str)\n  swaps = 0\n  i = 0\n  while i < n:\n    if str[i] == '[':\n      swaps += 1\n      i += 1\n    elif str[i] == ']':\n      if swaps > 0:\n        swaps -= 1\n      else:\n        i += 1\n  return swaps\n\nprint(min_swaps(\"[[{[]{]}]]\"))",
      -0.85595703125
    ],
    [
      "def min_swaps(string):\n    swaps = 0\n    i = 0\n    j = 0\n    while i < len(string):\n        if string[i] == \"(\":\n            j = j + 1\n        elif string[i] == \")\":\n            j = j - 1\n        if i < len(string) - 1 and string[i] == \"(\" and string[i+1] == \")\":\n            swaps = swaps + 1\n        i = i + 1\n    return swaps\n\nprint(min_swaps(\"([)]\"))",
      -0.85595703125
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        l = len(s)\n        count = 0\n        for i in range(l):\n            if s[i] == '[':\n                count += 1\n            elif s[i] == ']':\n                count -= 1\n                if count < 0:\n                    return count + 1\n        return 0",
      -0.85595703125
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        count = 0\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                count += 1\n        return count",
      -0.85693359375
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    min_swaps = 0\n    for i in range(n):\n        if s[i] == '(' and s[i+1] == ')':\n            min_swaps += 1\n    return min_swaps\n\n\ns = \"(()[]{}\"\nprint(min_swaps(s))",
      -0.85693359375
    ],
    [
      "def min_swaps(string):\n    stack = []\n    for i in string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return 0\n            elif len(stack) > 1:\n                if stack[-1] == '(':\n                    stack.pop()\n                    stack.pop()\n                else:\n                    return len(stack)\n            else:\n                return 0\n    return len(stack)\n\n\nprint(min_swaps('([(())])'))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def minSwaps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) == 1:\n            return 0\n\n        swaps = 0\n        stack = []\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                stack.append(i)\n            else:\n                if stack:\n                    swaps += 1\n                    stack.pop()\n        return swaps\n\n\ns = Solution()\nprint(s.minSwaps(\"([)]\"))\nprint(s.minSwaps(\"(()())\"))\nprint(s.minSwaps(\"(())(())\"))\nprint(s.minSwaps(\"()))()()(())\"))",
      -0.85693359375
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    swaps = 0\n    stack = [-1]\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            if stack:\n                j = stack.pop()\n                swaps += 1\n                if i == j:\n                    break\n    return swaps\n\n\ns = '(((())))'\nprint(min_swaps(s))",
      -0.85693359375
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    swaps = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            swaps += 1\n        elif s[i] == \")\":\n            swaps -= 1\n        if swaps == 0:\n            return swaps\n    return -1\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"()[]{}\"))",
      -0.85693359375
    ],
    [
      "class Solution(object):\n    def minSwaps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n        n = len(s)\n        l = 0\n        r = n - 1\n        while l < r:\n            if s[l] == s[r]:\n                l += 1\n                r -= 1\n            else:\n                if s[l] == '(':\n                    l += 1\n                elif s[r] == ')':\n                    r -= 1\n        return r - l + 1",
      -0.85791015625
    ],
    [
      "def min_swaps(s: str) -> int:\n    num_swaps = 0\n\n    for i in range(len(s) - 1):\n        if s[i] == \"(\" and s[i + 1] == \")\":\n            num_swaps += 1\n\n    return num_swaps\n\n\ndef main():\n    print(min_swaps(\"()\"))\n    print(min_swaps(\"()(())\"))\n    print(min_swaps(\"()(())\"))\n\n\nif __name__ == \"__main__\":\n    main()",
      -0.85791015625
    ],
    [
      "def min_swaps(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        if s[i] == '(':\n            count += 1\n        elif s[i] == ')':\n            count -= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert min_swaps('[()]') == 3\n    assert min_swaps('(())') == 2\n    assert min_swaps('') == 0\n    assert min_swaps('()[]{}') == 3",
      -0.85791015625
    ],
    [
      "def min_swaps(s):\n    l = len(s)\n    count = 0\n    for i in range(l):\n        if s[i] == '(':\n            count += 1\n        elif s[i] == ')':\n            count -= 1\n        if count < 0:\n            return count\n    return count\n\n\nprint(min_swaps('([)]'))\nprint(min_swaps(')))'))\nprint(min_swaps(')))'))\nprint(min_swaps(')))'))",
      -0.85791015625
    ],
    [
      "def minimum_swaps(string):\n    length = len(string)\n    min_swaps = 0\n    for i in range(length):\n        if string[i] == '[':\n            min_swaps += 1\n        elif string[i] == ']':\n            min_swaps -= 1\n    return min_swaps\n\n\nstring = input()\nprint(minimum_swaps(string))",
      -0.85791015625
    ],
    [
      "def min_swaps(s):\n    # Write your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '[' and s[i + 1] == ']':\n            count += 1\n        elif s[i] == ']' and s[i + 1] == '[':\n            count -= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"[][][][][][]\"))\n    print(min_swaps(\"[][][][][][]\"))\n    print(min_swaps(\"[][][][][][]\"))\n    print(min_swaps(\"[][][][][][]\"))",
      -0.85791015625
    ],
    [
      "def find_swaps(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            stack.append(i)\n        elif s[i] == ']':\n            if len(stack) == 0:\n                return 0\n            else:\n                i_open = stack.pop()\n                i_close = stack[-1]\n                if i_open == i_close:\n                    return i - i_open + 1\n                else:\n                    return i - i_open - 1\n    return len(s) - len(stack)\n\n\nprint(find_swaps('[][][][][]'))",
      -0.85791015625
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    min_swaps = 0\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            count += 1\n        elif s[i] == ')':\n            count -= 1\n            if count == 0:\n                min_swaps += 1\n    return min_swaps\n\n\nprint(min_swaps('()[]{}'))",
      -0.85791015625
    ],
    [
      "def min_swaps(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            count += 1\n        else:\n            if count > 0:\n                count -= 1\n            else:\n                count = 0\n    return count\n\nprint(min_swaps(\"(()()()\"))\nprint(min_swaps(\"()()()()\"))\nprint(min_swaps(\"()()()()\"))",
      -0.85791015625
    ],
    [
      "def min_swaps(str):\n    length = len(str)\n    counter = 0\n    for i in range(length):\n        if str[i] == '[':\n            counter += 1\n        if str[i] == ']':\n            counter -= 1\n        if counter == 0:\n            return i\n    return length\n\nprint(min_swaps('[][][]'))",
      -0.8583984375
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        res, stack = 0, []\n        for i in s:\n            if i == \"(\":\n                stack.append(i)\n            elif i == \")\":\n                if stack:\n                    res += 1\n                    stack.pop()\n        return res",
      -0.8583984375
    ],
    [
      "def min_swaps(s):\n    # Write your code here\n    n = len(s)\n    swaps = 0\n    prev_char = s[0]\n    count = 0\n\n    for i in range(1, n):\n        if s[i] == prev_char:\n            count += 1\n        else:\n            count = 0\n        prev_char = s[i]\n\n        swaps += count\n\n    return swaps\n\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"()[]{}\"))\n    print(min_swaps(\"(]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))",
      -0.8583984375
    ],
    [
      "def find_swaps(str1):\n    if str1 == \"\":\n        return 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == \"(\":\n            count += 1\n        elif str1[i] == \")\":\n            count -= 1\n        if count < 0:\n            return count + 1\n    return count\n\n\nprint(find_swaps(\"()[]{}\"))",
      -0.8583984375
    ],
    [
      "def min_swaps(s):\n    left = 0\n    right = 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            left += 1\n        elif s[i] == ')':\n            right += 1\n        if left == right:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(min_swaps('()()()'))",
      -0.8583984375
    ],
    [
      "def min_swaps(strng):\n    leng = len(strng)\n    if leng % 2!= 0:\n        return 0\n    swaps = 0\n    for i in range(0, leng, 2):\n        if strng[i] == strng[i+1]:\n            swaps += 1\n    return swaps\n\n\ndef main():\n    assert min_swaps(\"[][]\") == 3\n    assert min_swaps(\"[][][]\") == 3\n    assert min_swaps(\"[][][][][][]\") == 3\n    assert min_swaps(\"[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]\") == 5\n\n\nif __name__ == '__main__':\n    main()",
      -0.8583984375
    ],
    [
      "def min_swaps(string):\n    length = len(string)\n    if length < 2:\n        return length\n\n    stack = [0] * length\n    for i in range(1, length):\n        if string[i] == \"(\":\n            stack[i] = stack[i-1] + 1\n        elif string[i] == \")\":\n            stack[i] = min(stack[i-1], stack[i])\n\n    return stack[length-1]\n\n\nif __name__ == '__main__':\n    print(min_swaps(\"()[]{}\"))",
      -0.85888671875
    ],
    [
      "def min_swaps(string):\n    # Write your code here\n    swaps = 0\n    for i in range(len(string) - 1):\n        if string[i] == '(' and string[i + 1] == ')':\n            swaps += 1\n    return swaps\n\nprint(min_swaps('()()()'))",
      -0.85888671875
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        if len(s) <= 1:\n            return 0\n        swaps = 0\n        for i in range(len(s)-1):\n            if s[i] == s[i+1]:\n                swaps += 1\n        return swaps\n\n\ns = Solution()\nprint(s.minSwaps(\"([[])]\"))\nprint(s.minSwaps(\"([[])]\"))\nprint(s.minSwaps(\"([[])]\"))",
      -0.86083984375
    ],
    [
      "def min_swaps(s):\n    num_swaps = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            num_swaps += 1\n        else:\n            if num_swaps == 0:\n                return i\n            else:\n                num_swaps -= 1\n    return -1\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"()()()\"))\n    print(min_swaps(\"()()((((()()(\"))",
      -0.86083984375
    ],
    [
      "def min_swaps(string):\n    swaps = 0\n    left = 0\n    right = 0\n    for i in range(len(string)):\n        if string[i] == \"(\":\n            left += 1\n        elif string[i] == \")\":\n            right += 1\n        else:\n            if left > right:\n                swaps += left - right\n                left = right = i\n    return swaps\n\n\nprint(min_swaps(\"()(())\"))",
      -0.86083984375
    ],
    [
      "def min_swaps(strng):\n    if len(strng) < 2:\n        return 0\n    swaps = 0\n    l = 0\n    r = len(strng) - 1\n    while l < r:\n        if strng[l] == strng[r]:\n            l += 1\n            r -= 1\n        elif strng[l] == '(':\n            swaps += 1\n            l += 1\n        elif strng[r] == ')':\n            swaps -= 1\n            r -= 1\n        else:\n            l += 1\n            r -= 1\n    return swaps\n\nprint(min_swaps(\"(())\"))\nprint(min_swaps(\"((())\"))\nprint(min_swaps(\"(()()\"))",
      -0.921875
    ],
    [
      "def min_swaps(string):\n    # Write your code here\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"(\":\n            count += 1\n        elif string[i] == \")\":\n            count -= 1\n        if count < 0:\n            return count + 1\n    return count",
      -1.4306640625
    ],
    [
      "def min_swaps(s: str) -> int:\n    n = len(s)\n    if n < 2:\n        return 0\n    swaps = 0\n    i = 0\n    while i < n:\n        if s[i] == '(':\n            swaps += 1\n            i += 1\n        else:\n            if swaps == 0:\n                return n - i\n            else:\n                swaps -= 1\n                i += 1\n    return 0\n\n\nprint(min_swaps(\"([)]\"))",
      -1.4443359375
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    swaps = 0\n    for i in range(n-1):\n        if s[i] == '[' and s[i+1] == ']':\n            swaps += 1\n    return swaps\n\n\nprint(min_swaps('[[]]'))\nprint(min_swaps('[{[]}]'))\nprint(min_swaps('[[{}][]]'))\nprint(min_swaps('[[{}]]]'))",
      -1.6904296875
    ],
    [
      "def min_swaps(s):\n    # Write your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '[':\n            count += 1\n        else:\n            if count!= 0:\n                count -= 1\n            else:\n                count = 0\n    return count\n\n\nprint(min_swaps('[][][][][][][][][][][][][]'))",
      -1.6962890625
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            if s[i] == '(':\n                count += 1\n            elif s[i] == ')':\n                count -= 1\n            if count == 0:\n                count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.minSwaps(\"(())\"))",
      -1.845703125
    ],
    [
      "def minimum_swaps(s):\n    # write your code here\n    count = 0\n    left = 0\n    right = 0\n    for i in s:\n        if i == '[':\n            left += 1\n        elif i == ']':\n            right += 1\n        else:\n            count += max(right - left, 0)\n            left = right = 0\n    count += max(right - left, 0)\n    return count\n\n\nassert minimum_swaps(\"[]\") == 0\nassert minimum_swaps(\"[]\") == 0\nassert minimum_swaps(\"[]\") == 0\nassert minimum_swaps(\"[]\") == 0\nassert minimum_swaps(\"[]\") == 0\nassert minimum_swaps(\"[]\") == 0\nassert minimum_swaps(\"[]\") == 0",
      -1.8515625
    ],
    [
      "def min_swaps(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            if len(stack) > 0:\n                if s[stack[-1]] == '(':\n                    stack.pop()\n                else:\n                    stack.append(i)\n    return len(stack)\n\n\nif __name__ == \"__main__\":\n    assert min_swaps(\"(((())))\") == 3\n    assert min_swaps(\"((((())))\") == 3\n    assert min_swaps(\"()()()()()())(\") == 3\n    assert min_swaps(\"(()()())()()()()()(\") == 3\n    assert min_swaps(\"(()()()()())()()()()()()()(\") == 6",
      -1.9462890625
    ],
    [
      "class Solution(object):\n    def minSwaps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        if n == 0:\n            return 0\n        # create a list of 0s and 1s\n        swaps = [0, 1]\n        for i in range(2, n):\n            # if the string is not bracketed, add a 1 to the list\n            if s[i]!= '[' and s[i]!= ']':\n                swaps.append(1)\n            # if the string is bracketed, add a 1 to the list\n            elif s[i] == '[':\n                swaps.append(1)\n            elif s[i] == ']':\n                swaps.pop()\n        return sum(swaps)",
      -2.40625
    ],
    [
      "def min_swaps(string):\n    # write your code here\n    swaps = 0\n    left = 0\n    right = 0\n    for i in range(len(string)):\n        if string[i] == '(':\n            left += 1\n        else:\n            right += 1\n        if left == right:\n            swaps += 1\n    return swaps\n\n\nprint(min_swaps('()()()()'))\nprint(min_swaps('(()()())'))\nprint(min_swaps('(()()())'))\nprint(min_swaps('()()()()('))\nprint(min_swaps('()()()()('))",
      -3.23828125
    ],
    [
      "class Solution(object):\n    def minSwaps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        l = len(s)\n        dp = [[0] * (l + 1) for i in range(l + 1)]\n        for i in range(l + 1):\n            dp[i][0] = i\n        for i in range(1, l + 1):\n            for j in range(1, l + 1):\n                if s[i - 1] == s[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j] + 1\n        res = 0\n        for i in range(l + 1):\n            for j in range(i + 1, l + 1):\n                if dp[i][j] > res:\n                    res = dp[i][j]\n        return res",
      -4.48046875
    ],
    [
      "def min_swaps(string):\n    # Write your code here\n    swaps = 0\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            swaps += 1\n    return swaps\n\n\nif __name__ == '__main__':\n    assert min_swaps('[]') == 0\n    assert min_swaps('[a]') == 1\n    assert min_swaps('[a][b]') == 2\n    assert min_swaps('[a][b][c]') == 3\n    assert min_swaps('[a][b][c][d]') == 4\n    assert min_swaps('[a][b][c][d][e]') == 5\n    assert min_swaps('[a][b][c][d][e][f]') == 6\n    assert min_swaps('[a][b][c][d][e][f][g]') == 7\n    assert min_swaps('[a][b][c][d][e][f][g][h]') == 8\n    assert min_swaps('[a][b][c][d][e][f][g][h][i]') == 9",
      -4.69921875
    ],
    [
      "def min_swaps(s):\n    if len(s) <= 1:\n        return len(s)\n\n    # create a stack\n    stack = []\n\n    # for each character\n    for ch in s:\n        # if the current character is a bracket\n        if ch == '(':\n            # add the stack to the stack\n            stack.append(ch)\n        # if the current character is not a bracket\n        else:\n            # if the stack is not empty\n            if stack:\n                # pop the last element\n                last = stack.pop()\n\n                # if the current character is not a bracket\n                if ch == ')':\n                    # add the stack to the stack\n                    stack.append(last)\n\n    # if the stack is not empty\n    if stack:\n        # return the number of swaps required\n        return len(stack)\n    else:\n        # return -1 if there is no swaps\n        return -1\n\n\n# Driver code\ns = \"(()())\"\nprint(min_swaps(s))",
      -4.73828125
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n\n    if s[0] == s[n-1]:\n        return 0\n\n    swaps = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            swaps += 1\n\n    return min(swaps, n-swaps)\n\n\nif __name__ == '__main__':\n    assert min_swaps(\"[]\") == 0\n    assert min_swaps(\"[a]\") == 1\n    assert min_swaps(\"[a][b]\") == 2\n    assert min_swaps(\"[a][b][c]\") == 3\n    assert min_swaps(\"[a][b][c][d]\") == 4",
      -5.01171875
    ],
    [
      "def min_swaps(s):\n    length = len(s)\n    if length == 1:\n        return 0\n    swaps = 0\n    for i in range(length-1):\n        if s[i] == s[i+1]:\n            swaps += 1\n    return swaps\n\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"[[[(()]]]\"))\n    print(min_swaps(\"[[[()]]]\"))\n    print(min_swaps(\"[[[()]]]\"))\n    print(min_swaps(\"[[[()]]]\"))",
      -5.0703125
    ],
    [
      "def min_swaps(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    if len(string) % 2!= 0:\n        return 0\n    swaps = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            swaps += 1\n        else:\n            if swaps > 0:\n                swaps -= 1\n    return swaps\n\n\nprint(min_swaps
      -5.08203125
    ],
    [
      "def min_swaps(string):\n    n = len(string)\n    swaps = 0\n    for i in range(n-1):\n        if string[i] == '[' and string[i+1] == ']':\n            swaps += 1\n    return swaps\n\n\nprint(min_swaps(\"[[[]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))\nprint(min_swaps(\"[[[[]]]]\"))",
      -5.36328125
    ],
    [
      "class Solution:\n    def minSwaps(self, s):\n        n = len(s)\n        if n < 2:\n            return 0\n        if n % 2 == 1:\n            return n\n        count = 0\n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                count += 1\n            else:\n                count -= 1\n        return count\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.minSwaps(\"\") == 0\n    assert s.minSwaps(\"a\") == 1\n    assert s.minSwaps(\"aab\") == 2\n    assert s.minSwaps(\"ab\") == 1\n    assert s.minSwaps(\"aa\") == 0\n    assert s.minSwaps(\"aabcc\") == 3\n    assert s.minSwaps(\"aabcca\") == 3",
      -5.6640625
    ],
    [
      "def min_swaps(str):\n    num_swaps = 0\n    for i in range(len(str)):\n        if str[i] == '(':\n            num_swaps += 1\n        elif str[i] == ')':\n            if num_swaps > 0:\n                num_swaps -= 1\n            else:\n                return i - 1\n    return len(str) - num_swaps\n\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"()()[]{}\"))\n    print(min_swaps(\"()\"))\n    print(min_swaps(\"()[]{}\"))\n    print(min_swaps(\"()\"))\n    print(min_swaps(\"()\"))\n    print(min_swaps(\"()[]{}\"))\n    print(min_swaps(\"()\"))\n    print(min_swaps(\"()[]{}\"))\n    print(min_swaps(\"()[]{}\"))",
      -5.67578125
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        # Time: O(n)\n        # Space: O(n)\n        n = len(s)\n        if n < 2:\n            return 0\n\n        stack = []\n        for i in range(n):\n            if s[i] == \"(\":\n                stack.append(i)\n            elif s[i] == \")\":\n                if len(stack) > 0:\n                    stack.pop()\n                else:\n                    return n - i\n\n        return n - 1\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.minSwaps(\"(())\") == 2\n    assert s.minSwaps(\"()()()\") == 0\n    assert s.minSwaps(\"()(()()())()\") == 4\n    assert s.minSwaps(\"())()()()()()\") == 0\n    assert s.minSwaps(\"())()()()()()()\") == 0\n    assert s.minSwaps(\"())()()()()()()\") == 0\n    assert s.minSwaps(\"())()()()()()()()()()\") == 4",
      -5.78125
    ],
    [
      "def min_swaps(string):\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i] == \"(\":\n            count += 1\n            i += 1\n        elif string[i] == \")\":\n            count -= 1\n            if count < 0:\n                return count\n            i += 1\n    return count\n\n\ndef min_swaps_2(string):\n    if len(string) < 2:\n        return 0\n\n    stack = []\n    for i in range(len(string)):\n        if string[i] == \"(\":\n            stack.append(i)\n        elif string[i] == \")\":\n            if len(stack)!= 0:\n                stack.pop()\n            else:\n                return 0\n    return len(stack)\n\n\ndef main():\n    string = \"()[]{}\"\n    print(min_swaps(string))\n    print(min_swaps_2(string))\n\n\nif __name__ == \"__main__\":\n    main()",
      -5.9140625
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        stack = []\n        for i in s:\n            if i == '[':\n                stack.append(i)\n            elif i == ']':\n                if not stack:\n                    return 0\n                top = stack.pop()\n                if top == '(' and not stack:\n                    return 0\n                elif top == ')' and not stack:\n                    return 0\n        return len(stack)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.minSwaps('[]{}[]') == 1\n    assert s.minSwaps('[[]]') == 0",
      -6.0546875
    ],
    [
      "def min_swaps(string):\n    # Write your code here\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return count + 1\n    return count + 1\n\n\nprint(min_swaps('[]'))\nprint(min_swaps('[([])'))\nprint(min_swaps('[([()])'))\nprint(min_swaps('[([[()]])'))\nprint(min_swaps('[([[()]])'))\nprint(min_swaps('[([[()]])'))",
      -6.328125
    ],
    [
      "def minSwaps(s):\n    swaps = 0\n    max_len = len(s)\n    for i in range(max_len):\n        if s[i] == '(':\n            swaps += 1\n        elif s[i] == ')':\n            swaps -= 1\n    return swaps\n\nprint(minSwaps(\"()\"))\nprint(minSwaps(\"()()\"))\nprint(minSwaps(\"(())\"))\nprint(minSwaps(\"(()))\"))\nprint(minSwaps(\"()())(\"))\nprint(minSwaps(\"()()()(\"))\nprint(minSwaps(\"()()()(\"))\nprint(minSwaps(\"()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()(\"))\nprint(minSwaps(\"()()()()",
      -6.3828125
    ],
    [
      "def find_minimum_swaps(s):\n    min_swaps = 0\n    max_swaps = 0\n    stack = []\n\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            stack.append(i)\n        else:\n            while stack and s[stack[-1]] == \"(\":\n                min_swaps += max_swaps - stack[-1]\n                stack.pop()\n            stack.append(i)\n\n    while stack:\n        min_swaps += max_swaps - stack[-1]\n        stack.pop()\n\n    return min_swaps\n\n\nif __name__ == \"__main__\":\n    assert find_minimum_swaps(\"())()()()\"), \"1\"\n    assert find_minimum_swaps(\"(((((((((((((((((((((((((((((((((((((((\"\n    assert find_minimum_swaps(\"()()()()()()\"), 2\n    assert find_minimum_swaps(\"(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\"), 1\n    assert find_minimum_swaps(\"(())())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\"), 1\n    assert find_minimum_swaps(\"(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\"), 1\n    assert find_minimum_swaps(\"))())\"), 1",
      -6.53515625
    ],
    [
      "def min_swaps(s):\n    stack = []\n    for i in s:\n        if i == \"(\":\n            stack.append(i)\n        else:\n            if len(stack)!= 0:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    stack.append(i)\n    return len(stack)\n\n\ndef test_function(test_case):\n    solution = min_swaps(test_case[0])\n    print(solution)\n    if solution == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([\"()\", \"([)]\"])\ntest_function([\"()\", \"([)]\"])\ntest_function([\"()\", \"([)]\"])\ntest_function([\"()\", \"([)]\"])\ntest_function([\"()\", \"([)]\"])\ntest_function([\"()\", \"([)]\"])\ntest_function([\"()\", \"([)]\"])",
      -6.6171875
    ],
    [
      "def minimum_swaps(string):\n    n = len(string)\n    min_swaps = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    for i in range(n):\n        if string[i] == '[':\n            min_swaps += minimum_swaps(string[i+1:])\n        elif string[i] == ']':\n            min_swaps += 1\n\n    return min_swaps\n\nif __name__ == '__main__':\n    string = \"[]()\"\n    print(minimum_swaps(string))\n\n    string = \"[]([])\"\n    print(minimum_swaps(string))\n\n    string
      -6.8359375
    ],
    [
      "def min_swaps(str1):\n    # write your code here\n    # write your code here\n    if len(str1) < 2:\n        return 0\n    if len(str1) == 2:\n        return 1 if str1[0] == str1[1] else 0\n    else:\n        min_swaps_2 = min_swaps(str1[1:])\n        min_swaps_1 = min_swaps(str1[:-1])\n        return min(min_swaps_2, min_swaps_1)\n\n\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()()\"))\nprint(min_swaps(\"(())\"))\nprint(min_swaps
      -6.99609375
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if s[0] == s[-1]:\n        return min_swaps(s[1:-1])\n    min_swaps_count = 0\n    max_swaps_count = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            min_swaps_count = min(min_swaps_count, 1)\n            max_swaps_count = max(max_swaps_count, 1)\n        else:\n            min_swaps_count = min(min_swaps_count, max_swaps_count+1)\n            max_swaps_count = max(max_swaps_count, 1)\n    return min_swaps_count\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"([][][][][][][][][][][])\"))",
      -7.19921875
    ],
    [
      "def min_swaps(string):\n    if len(string) <= 1:\n        return 0\n    # Find the index of the minimum number of swaps.\n    min_swaps_index = 0\n    for i in range(1, len(string)):\n        if string[i] == string[min_swaps_index]:\n            min_swaps_index += 1\n        else:\n            min_swaps_index = i\n    return min_swaps_index\n\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[][]\"))\nprint(min_swaps(\"[[[]\"))\nprint(min_swaps(\"[[[][[]\"))\nprint(min_swaps(\"[][[][[]\"))\nprint(min_swaps(\"[][[][[][[]\"))\nprint(min_swaps(\"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\"\nprint(min_swaps
      -7.20703125
    ],
    [
      "class Solution:\n    def minSwaps(self, s: str) -> int:\n        if len(s) == 1:\n            return 0\n        n = len(s)\n        l = 0\n        r = 0\n        minSwaps = 0\n        while l < n:\n            if s[l] == s[r]:\n                l += 1\n            elif s[l] == '(':\n                l += 1\n            else:\n                r += 1\n            minSwaps = min(minSwaps, r-l)\n        return minSwaps\n\n\nif __name__ == \"__main__\":\n    assert Solution().minSwaps(\"([)]\") == 3\n    assert Solution().minSwaps(\"[(]\") == 2\n    assert Solution().minSwaps(\"([)]\") == 2\n    assert Solution().minSwaps(\"([)]\") == 1\n    assert Solution().minSwaps(\"()\") == 0\n    assert Solution().minSwaps(\"()[]{}\") == 3",
      -7.21484375
    ],
    [
      "def min_swaps(str1):\n    min_swaps = 0\n    for i in range(1, len(str1)):\n        if str1[i] == str1[i-1]:\n            min_swaps += 1\n    return min_swaps\n\n\nprint(min_swaps
      -8.0703125
    ],
    [
      "class Solution(object):\n    def minSwaps(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        min_swaps = 0\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            elif s[i] == ')':\n                if not stack:\n                    return min_swaps\n                last_open = stack.pop()\n                min_swaps = min(min_swaps, i - last_open)\n        return min_swaps\n\na = Solution()\nprint(a.minSwaps(\"()()\"))\nprint(a.minSwaps(\"()()()()()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"(()()()\"))\nprint(a.minSwaps(\"(()()()()()()()\"))\nprint(a.minSwaps(\"()()()()\"))\nprint(a.minSwaps(\"()()()()()\"))\nprint(a.minSwaps(\"()()()()\"))\nprint(a.minSwaps(\"()()()()()\"))\nprint(a.minSwaps(\"()()()()\"))\nprint(a.minSwaps(\"()()()()\"))\nprint(a.minSwaps(\"()()()\"))\nprint(a.minSwaps(\"()()()()\"))\nprint(a.minSwaps(\"()()()()\"))\nprint(a.minSwaps(\"()()()()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"))\nprint(a.minSwaps(\"()\"",
      -8.28125
    ],
    [
      "def min_swaps(str):\n    n = len(str)\n    count = 0\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n\n\nprint(min_swaps(\"(())\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"(((\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"(((\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))\nprint(min_swaps(\"))(\"))",
      -8.65625
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    swaps = 0\n    # first, we start from the start of the string\n    for i in range(n):\n        if s[i] == \"(\":\n            swaps += 1\n        elif s[i] == \")\":\n            swaps -= 1\n            if swaps < 0:\n                return -1\n    return swaps\n\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"()()()\"))\n    print(min_swaps(\"()()[]{}\"))\n    print(min_swaps(\"()()[]{}\"))\n    print(min_swaps(\"()()[]{}\"))\n    print(min_swaps(\"()()[]{}\"))\n    print(min_swaps(\"()()[]{}\"))\n    print(min_swaps(\"()()[]{}\"))\n    print(min_swaps(\"()()[]{}\"))",
      -8.75
    ],
    [
      "def min_swaps(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            count += 1\n    return count\n\n\ndef min_swaps_2(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1] and string[i]!= string[i + 1]:\n            count += 1\n    return count\n\n\ndef min_swaps_3(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1] and string[i]!= string[i + 1] and string[i]!= string[i]:\n            count += 1\n    return count\n\n\ndef min_swaps_4(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1] and string[i]!= string[i + 1] and string[i]!= string[i + 1]:\n            count += 1\n    return count\n\n\ndef min_swaps_5(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1] and string[i]!= string[i + 1] and string[i]!= string[i + 1] and string[i]!= string[i]:\n            count += 1\n    return count\n\n\ndef min_swaps_6(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1] and string[i]!= string[i + 1] and string[i]!= string[i + 1] and string[i]!= string[i]:\n            count += 1\n    return count\n\n\ndef min_swaps_7(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1] and string[i]!= string[i + 1]",
      -8.796875
    ],
    [
      "def min_swaps(s):\n    # Write your code here\n    n = len(s)\n    swaps = 0\n    for i in range(n):\n        if i < n - 1 and s[i] == s[i + 1]:\n            swaps += 1\n    return swaps\n\n\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"(()\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"([{[]{[]{[]}}\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min_swaps(\"[]\"))\nprint(min",
      -8.984375
    ],
    [
      "def min_swaps(s):\n    num_swaps = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            num_swaps += 1\n        elif s[i] == ')':\n            num_swaps -= 1\n            if num_swaps < 0:\n                return i + 1\n    return len(s)\n\n\nassert min_swaps('()(())') == 1\nassert min_swaps('(())') == 0\nassert min_swaps('())') == 2\nassert min_swaps('()())') == 3\nassert min_swaps('()())(') == 3\nassert min_swaps('())()(') == 4\nassert min_swaps('())()(') == 5\nassert min_swaps('()())') == 6\nassert min_swaps('()())') == 7\nassert min_swaps('()())') == 8\nassert min_swaps('()())(') == 9\nassert min_swaps('()()(') == 10\nassert min_swaps('())()(') == 11\nassert min_swaps('()())(') == 12\nassert min_swaps('()()(') == 13\nassert min_swaps('()()(') == 14\nassert min_swaps('()()(') == 15\nassert min_swaps('()()(') == 16\nassert min_swaps('()()(') == 17\nassert min_swaps('()()(') == 18\nassert min_swaps('()()(') == 19\nassert min_swaps('()()(') == 20\nassert min_swaps('()()(') == 21\nassert min_swaps('()()(') == 22\nassert min_swaps('()()(') == 23\nassert min_swaps('()()(') == 24\nassert min_swaps('()()(') == 25\nassert min_swaps('()()(') == 26\nassert min_swaps('()()(') == 27\nassert min_swaps('()()(') == 28\nassert min_swaps('()()(') == 29",
      -9.7890625
    ],
    [
      "def min_swaps(s):\n    if s == \"\":\n        return 0\n    stack = []\n    swaps = 0\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            stack.append(i)\n        elif s[i] == \")\":\n            if stack:\n                swaps += 1\n                stack.pop()\n            else:\n                return swaps\n\n\nif __name__ == \"__main__\":\n    assert min_swaps(\"())()()\"), \"Expected output: 1\"\n    assert min_swaps(\"(()(())\"), \"Expected output: 2\"\n    assert min_swaps(\"))()()()()()\"), \"Expected output: 3\"\n    assert min_swaps(\"())()()()()()()\"), \"Expected output: 4\"\n    assert min_swaps(\"()()()()()()()()\"), \"Expected output: 5\"",
      -10.4140625
    ],
    [
      "def min_swaps(string):\n    n = len(string)\n    if n == 1:\n        return n\n\n    swaps = 0\n    # the following function is to store the no of swaps needed to make a bracket balance.\n    # if the first character of the string is bracket, then we need to put the bracket balance in a list.\n    # if the first character of the string is not bracket, then we need to put the number of swaps\n    # in a list.\n    # if the first character of the string is not bracket, then we need to put the number of swaps\n    # in a list.\n    # if the first character of the string is bracket, then we need to put the bracket balance\n    # in a list.\n\n    brackets = {'(': ')', '[': ']', '{': '}'}\n\n    for i in range(1, n):\n        if string[i] == brackets[string[i - 1]]:\n            swaps += 1\n\n    return swaps\n\n\nif __name__ == '__main__':\n    print(min_swaps('[()][][][][][][][][]'))\n    print(min_swaps('[([][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]]'))\n    print(min_swaps('[()][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]]'))\n    print(min_swaps('[(][)[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]]'))\n    print(min_swaps('[([][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]]'))\n    print(min_swaps('[([][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]]'))\n    print(min",
      -10.546875
    ],
    [
      "def min_swaps(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        if string[i] == ']':\n            count -= 1\n        if count < 0:\n            return count + 1\n    return count\n\n\ndef test_min_swaps():\n    assert min_swaps('[]') == 1\n    assert min_swaps('[]') == 0\n    assert min_swaps('[]') == 2\n    assert min_swaps('[]') == 3\n    assert min_swaps('[]') == 4\n    assert min_swaps('[]') == 5\n    assert min_swaps('[]') == 6\n    assert min_swaps('[]') == 7\n    assert min_swaps('[]') == 8\n    assert min_swaps('[]') == 9\n    assert min_swaps('[]') == 10\n    assert min_swaps('[]') == 11\n    assert min_swaps('[]') == 12\n    assert min_swaps('[]') == 13\n    assert min_swaps('[]') == 14\n    assert min_swaps('[]') == 15\n    assert min_swaps('[]') == 16\n    assert min_swaps('[]') == 17\n    assert min_swaps('[]') == 18\n    assert min_swaps('[]') == 19\n    assert min_swaps('[]') == 20\n    assert min_swaps('[]') == 21\n    assert min_swaps('[]') == 22\n    assert min_swaps('[]') == 23\n    assert min_swaps('[]') == 24\n    assert min_swaps('[]') == 25\n    assert min_swaps('[]') == 26\n    assert min_swaps('[]') == 27\n    assert min_swaps('[]') == 28\n    assert min_swaps('[]') == 29\n    assert min_swaps('[]') == 30\n    assert min_swaps('[]') == 31\n    assert min_swaps('[]'",
      -10.6484375
    ],
    [
      "def min_swaps(str):\n    stack = []\n    i = 0\n    j = len(str) - 1\n    while i < j:\n        if str[i] == '(' and str[j] == ')':\n            stack.append(str[i])\n            stack.append(str[j])\n            i += 1\n            j -= 1\n        elif str[i] == '(' and str[j]!= '(':\n            i += 1\n        elif str[i]!= '(' and str[j] == ')':\n            j -= 1\n    return len(stack)\n\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"(())()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()()\"))\nprint(min_swaps(\"()()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()()()\"",
      -11.0234375
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if s[0] == s[1]:\n        return min_swaps(s[2:]) + 1\n    return min_swaps(s[1:]) + 1\n\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))\n    print(min_swaps(\"[]\"))",
      -11.2265625
    ],
    [
      "def min_swaps(s):\n    swaps = 0\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            if len(stack) > 0:\n                swaps += (stack.pop() - i)\n            else:\n                swaps += i - stack[-1]\n            stack.append(i)\n    return swaps\n\n\nprint(min_swaps
      -11.625
    ],
    [
      "def min_swaps(s):\n    if len(s) < 3:\n        return 0\n\n    # dp[i][j] stores the minimum no of swaps required for bracket balancing in the string\n    # i = start_index of the bracket\n    # j = end_index of the bracket\n    dp = [[0 for _ in range(len(s))] for _ in range(2)]\n    dp[0][0] = 1\n    dp[1][0] = 1\n    for i in range(1, len(s)):\n        if s[i] == \"(\":\n            dp[0][i] = dp[0][i - 1] + 1\n        else:\n            dp[0][i] = dp[0][i - 1]\n        if s[i] == \")\":\n            dp[1][i] = dp[1][i - 1] + 1\n        else:\n            dp[1][i] = dp[1][i - 1]\n\n    # find the minimum no of swaps required for bracket balancing in the string\n    # and return it\n    res = 0\n    for i in range(2):\n        for j in range(len(s)):\n            if s[j] == \"(\":\n                if dp[i][j] < res:\n                    res = dp[i][j]\n    return res\n\nif __name__ == \"__main__\":\n    s = \"()()()\"\n    print(min_swaps(s))",
      -12.8125
    ],
    [
      "def min_swaps(s):\n    n = len(s)\n    if n == 1:\n        return 0\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 2\n    dp[1][0] = 3\n    dp[1][1] = 3\n    for i in range(2, n):\n        for j in range(1, i):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])\n    return dp[n - 1][n - 1]\n\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()()\"))\nprint(min_swaps(\"()()()\"))\nprint(min_swaps(\"()(()()()\"))\nprint(min_swaps(\"()(()(()()()()()()()()()()()()()()()()()()()()()()()()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint(min_swaps(\"()\"))\nprint",
      -13.3359375
    ],
    [
      "def min_swaps(s):\n    # Write your code here\n    l = len(s)\n    if l == 0:\n        return 0\n    if l == 1:\n        return 1\n    if s[0] == s[1]:\n        return min_swaps(s[2:])\n    if s[0] == s[1]:\n        return min_swaps(s[2:]) + 1\n    if s[0] == s[2]:\n        return min_swaps(s[2:]) + 2\n    if s[0] == s[3]:\n        return min_swaps(s[2:]) + 3\n    if s[0] == s[4]:\n        return min_swaps(s[2:]) + 4\n    if s[0] == s[5]:\n        return min_swaps(s[2:]) + 5\n    if s[0] == s[6]:\n        return min_swaps(s[2:]) + 6\n    if s[0] == s[7]:\n        return min_swaps(s[2:]) + 7\n    if s[0] == s[8]:\n        return min_swaps(s[2:]) + 8\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(min_swaps(\"()\"))",
      -13.6171875
    ],
    [
      "def minSwaps(str):\n    n = len(str)\n    left = 0\n    right = 0\n    swap_count = 0\n    for i in range(n-1, -1, -1):\n        if str[i] == '[':\n            left += 1\n        elif str[i] == ']':\n            right += 1\n        elif str[i] == ')':\n            if left == right:\n                swap_count += 1\n            elif left == 0:\n                left = right = 0\n    return swap_count\n\n\nif __name__ == '__main__':\n    print(minSwaps(\"([])\"))\n    print(minSwaps(\"([]))\"))\n    print(minSwaps(\"([)]\"))\n    print(minSwaps(\"([)]\"))\n    print(minSwaps(\"([)]\"))\n    print(minSwaps(\"([)]\"))",
      -13.890625
    ],
    [
      "def min_swaps(s: str) -> int:\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            count = 0\n    return count\n\n\nif __name__ == \"__main__\":\n    assert min_swaps(\"())()\") == 1\n    assert min_swaps(\"())()()\") == 2\n    assert min_swaps(\"()()()\") == 3\n    assert min_swaps(\"()())()\") == 4\n    assert min_swaps(\"()\") == 1\n    assert min_swaps(\"())(()\") == 0\n    assert min_swaps(\"())(())()\") == 1\n    assert min_swaps(\"())(())()\") == 2\n    assert min_swaps(\"())(())()\") == 3\n    assert min_swaps(\"())()()\") == 4\n    assert min_swaps(\"())(())()\") == 5\n    assert min_swaps(\"())(())()\") == 6",
      -14.765625
    ],
    [
      "def min_swaps(s):\n    max_len = len(s)\n    min_len = 0\n    for i in range(max_len):\n        if s[i] == '(':\n            min_len += 1\n        else:\n            min_len = 0\n            break\n\n    return min_len\n\n\ndef min_swaps_2(s):\n    max_len = len(s)\n    min_len = 0\n    for i in range(max_len):\n        if s[i] == '(':\n            min_len += 1\n        elif s[i] == ')':\n            min_len -= 1\n            if min_len < 0:\n                min_len = 0\n                break\n    return min_len\n\n\nif __name__ == '__main__':\n    assert min_swaps('()()()') == 0\n    assert min_swaps('()(()()()()()') == 1\n    assert min_swaps('()()()()()()') == 3\n    assert min_swaps('()()()()()()') == 4\n    assert min_swaps('()()()()()()') == 5\n    assert min_swaps('()()()()()()()') == 6\n    assert min_swaps('()()()()()()()') == 7\n    assert min_swaps('()()()()()()()') == 8\n    assert min_swaps('()()()()()()()') == 9\n    assert min_swaps('()()()()()()()') == 10\n    assert min_swaps('()()()()()()()') == 11\n    assert min_swaps('()()()()()()()') == 12",
      -14.765625
    ],
    [
      "def min_swaps(s: str) -> int:\n    # Your code here\n    n = len(s)\n    if n < 2:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 0\n    dp[0][1] = 1\n    for i in range(2, n):\n        dp[i][0] = dp[i-1][0] + 1\n        dp[i][1] = dp[i-1][1] + 1\n        if s[i-1] == s[i]:\n            dp[i][1] = dp[i-1][1]\n    for i in range(n-2, -1, -1):\n        dp[i][0] = dp[i+1][0] + 1\n        dp[i][1] = dp[i+1][1] + 1\n        if s[i] == s[i+1]:\n            dp[i][1] = dp[i][1]\n    return min([dp[0][i] + dp[i][i] for i in range(n)])\n\n\nprint(min_swaps(\"abc\"))",
      -14.8046875
    ]
  ],
  "original_generation_params": {
    "num_candidates": 100,
    "num_seqs_per_iter": 10,
    "inference_batch_size": 64,
    "temperature": 0.6,
    "top_p": 0.95,
    "max_length": 512,
    "source_len": 600,
    "do_sample": true,
    "pad_token_id": null,
    "eos_token_id": null
  }
}